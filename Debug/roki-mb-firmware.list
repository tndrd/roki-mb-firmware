
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e2a8  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b134  0803e548  0803e548  0002e548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0805967c  0805967c  0004967c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08059684  08059684  00049684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0805968c  0805968c  0004968c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  08059694  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003608  24000168  080597f8  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003770  080597f8  00053770  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050164  2**0
                  CONTENTS, READONLY
 10 .debug_info   000526ba  00000000  00000000  00050192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000764f  00000000  00000000  000a284c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000036c0  00000000  00000000  000a9ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003440  00000000  00000000  000ad560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000454ee  00000000  00000000  000b09a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003af44  00000000  00000000  000f5e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00190511  00000000  00000000  00130dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002c12e3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000f9fc  00000000  00000000  002c1334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000168 	.word	0x24000168
 80202bc:	00000000 	.word	0x00000000
 80202c0:	0803e530 	.word	0x0803e530

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	2400016c 	.word	0x2400016c
 80202dc:	0803e530 	.word	0x0803e530

080202e0 <memchr>:
 80202e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202e4:	2a10      	cmp	r2, #16
 80202e6:	db2b      	blt.n	8020340 <memchr+0x60>
 80202e8:	f010 0f07 	tst.w	r0, #7
 80202ec:	d008      	beq.n	8020300 <memchr+0x20>
 80202ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202f2:	3a01      	subs	r2, #1
 80202f4:	428b      	cmp	r3, r1
 80202f6:	d02d      	beq.n	8020354 <memchr+0x74>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	b342      	cbz	r2, 8020350 <memchr+0x70>
 80202fe:	d1f6      	bne.n	80202ee <memchr+0xe>
 8020300:	b4f0      	push	{r4, r5, r6, r7}
 8020302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802030a:	f022 0407 	bic.w	r4, r2, #7
 802030e:	f07f 0700 	mvns.w	r7, #0
 8020312:	2300      	movs	r3, #0
 8020314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020318:	3c08      	subs	r4, #8
 802031a:	ea85 0501 	eor.w	r5, r5, r1
 802031e:	ea86 0601 	eor.w	r6, r6, r1
 8020322:	fa85 f547 	uadd8	r5, r5, r7
 8020326:	faa3 f587 	sel	r5, r3, r7
 802032a:	fa86 f647 	uadd8	r6, r6, r7
 802032e:	faa5 f687 	sel	r6, r5, r7
 8020332:	b98e      	cbnz	r6, 8020358 <memchr+0x78>
 8020334:	d1ee      	bne.n	8020314 <memchr+0x34>
 8020336:	bcf0      	pop	{r4, r5, r6, r7}
 8020338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802033c:	f002 0207 	and.w	r2, r2, #7
 8020340:	b132      	cbz	r2, 8020350 <memchr+0x70>
 8020342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020346:	3a01      	subs	r2, #1
 8020348:	ea83 0301 	eor.w	r3, r3, r1
 802034c:	b113      	cbz	r3, 8020354 <memchr+0x74>
 802034e:	d1f8      	bne.n	8020342 <memchr+0x62>
 8020350:	2000      	movs	r0, #0
 8020352:	4770      	bx	lr
 8020354:	3801      	subs	r0, #1
 8020356:	4770      	bx	lr
 8020358:	2d00      	cmp	r5, #0
 802035a:	bf06      	itte	eq
 802035c:	4635      	moveq	r5, r6
 802035e:	3803      	subeq	r0, #3
 8020360:	3807      	subne	r0, #7
 8020362:	f015 0f01 	tst.w	r5, #1
 8020366:	d107      	bne.n	8020378 <memchr+0x98>
 8020368:	3001      	adds	r0, #1
 802036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802036e:	bf02      	ittt	eq
 8020370:	3001      	addeq	r0, #1
 8020372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020376:	3001      	addeq	r0, #1
 8020378:	bcf0      	pop	{r4, r5, r6, r7}
 802037a:	3801      	subs	r0, #1
 802037c:	4770      	bx	lr
 802037e:	bf00      	nop

08020380 <__aeabi_uldivmod>:
 8020380:	b953      	cbnz	r3, 8020398 <__aeabi_uldivmod+0x18>
 8020382:	b94a      	cbnz	r2, 8020398 <__aeabi_uldivmod+0x18>
 8020384:	2900      	cmp	r1, #0
 8020386:	bf08      	it	eq
 8020388:	2800      	cmpeq	r0, #0
 802038a:	bf1c      	itt	ne
 802038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020394:	f000 b974 	b.w	8020680 <__aeabi_idiv0>
 8020398:	f1ad 0c08 	sub.w	ip, sp, #8
 802039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203a0:	f000 f806 	bl	80203b0 <__udivmoddi4>
 80203a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ac:	b004      	add	sp, #16
 80203ae:	4770      	bx	lr

080203b0 <__udivmoddi4>:
 80203b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b4:	9d08      	ldr	r5, [sp, #32]
 80203b6:	4604      	mov	r4, r0
 80203b8:	468e      	mov	lr, r1
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d14d      	bne.n	802045a <__udivmoddi4+0xaa>
 80203be:	428a      	cmp	r2, r1
 80203c0:	4694      	mov	ip, r2
 80203c2:	d969      	bls.n	8020498 <__udivmoddi4+0xe8>
 80203c4:	fab2 f282 	clz	r2, r2
 80203c8:	b152      	cbz	r2, 80203e0 <__udivmoddi4+0x30>
 80203ca:	fa01 f302 	lsl.w	r3, r1, r2
 80203ce:	f1c2 0120 	rsb	r1, r2, #32
 80203d2:	fa20 f101 	lsr.w	r1, r0, r1
 80203d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203da:	ea41 0e03 	orr.w	lr, r1, r3
 80203de:	4094      	lsls	r4, r2
 80203e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203e4:	0c21      	lsrs	r1, r4, #16
 80203e6:	fbbe f6f8 	udiv	r6, lr, r8
 80203ea:	fa1f f78c 	uxth.w	r7, ip
 80203ee:	fb08 e316 	mls	r3, r8, r6, lr
 80203f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80203f6:	fb06 f107 	mul.w	r1, r6, r7
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d90a      	bls.n	8020414 <__udivmoddi4+0x64>
 80203fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020406:	f080 811f 	bcs.w	8020648 <__udivmoddi4+0x298>
 802040a:	4299      	cmp	r1, r3
 802040c:	f240 811c 	bls.w	8020648 <__udivmoddi4+0x298>
 8020410:	3e02      	subs	r6, #2
 8020412:	4463      	add	r3, ip
 8020414:	1a5b      	subs	r3, r3, r1
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb3 f0f8 	udiv	r0, r3, r8
 802041c:	fb08 3310 	mls	r3, r8, r0, r3
 8020420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020424:	fb00 f707 	mul.w	r7, r0, r7
 8020428:	42a7      	cmp	r7, r4
 802042a:	d90a      	bls.n	8020442 <__udivmoddi4+0x92>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020434:	f080 810a 	bcs.w	802064c <__udivmoddi4+0x29c>
 8020438:	42a7      	cmp	r7, r4
 802043a:	f240 8107 	bls.w	802064c <__udivmoddi4+0x29c>
 802043e:	4464      	add	r4, ip
 8020440:	3802      	subs	r0, #2
 8020442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020446:	1be4      	subs	r4, r4, r7
 8020448:	2600      	movs	r6, #0
 802044a:	b11d      	cbz	r5, 8020454 <__udivmoddi4+0xa4>
 802044c:	40d4      	lsrs	r4, r2
 802044e:	2300      	movs	r3, #0
 8020450:	e9c5 4300 	strd	r4, r3, [r5]
 8020454:	4631      	mov	r1, r6
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	428b      	cmp	r3, r1
 802045c:	d909      	bls.n	8020472 <__udivmoddi4+0xc2>
 802045e:	2d00      	cmp	r5, #0
 8020460:	f000 80ef 	beq.w	8020642 <__udivmoddi4+0x292>
 8020464:	2600      	movs	r6, #0
 8020466:	e9c5 0100 	strd	r0, r1, [r5]
 802046a:	4630      	mov	r0, r6
 802046c:	4631      	mov	r1, r6
 802046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020472:	fab3 f683 	clz	r6, r3
 8020476:	2e00      	cmp	r6, #0
 8020478:	d14a      	bne.n	8020510 <__udivmoddi4+0x160>
 802047a:	428b      	cmp	r3, r1
 802047c:	d302      	bcc.n	8020484 <__udivmoddi4+0xd4>
 802047e:	4282      	cmp	r2, r0
 8020480:	f200 80f9 	bhi.w	8020676 <__udivmoddi4+0x2c6>
 8020484:	1a84      	subs	r4, r0, r2
 8020486:	eb61 0303 	sbc.w	r3, r1, r3
 802048a:	2001      	movs	r0, #1
 802048c:	469e      	mov	lr, r3
 802048e:	2d00      	cmp	r5, #0
 8020490:	d0e0      	beq.n	8020454 <__udivmoddi4+0xa4>
 8020492:	e9c5 4e00 	strd	r4, lr, [r5]
 8020496:	e7dd      	b.n	8020454 <__udivmoddi4+0xa4>
 8020498:	b902      	cbnz	r2, 802049c <__udivmoddi4+0xec>
 802049a:	deff      	udf	#255	; 0xff
 802049c:	fab2 f282 	clz	r2, r2
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f040 8092 	bne.w	80205ca <__udivmoddi4+0x21a>
 80204a6:	eba1 010c 	sub.w	r1, r1, ip
 80204aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204ae:	fa1f fe8c 	uxth.w	lr, ip
 80204b2:	2601      	movs	r6, #1
 80204b4:	0c20      	lsrs	r0, r4, #16
 80204b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ba:	fb07 1113 	mls	r1, r7, r3, r1
 80204be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204c2:	fb0e f003 	mul.w	r0, lr, r3
 80204c6:	4288      	cmp	r0, r1
 80204c8:	d908      	bls.n	80204dc <__udivmoddi4+0x12c>
 80204ca:	eb1c 0101 	adds.w	r1, ip, r1
 80204ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80204d2:	d202      	bcs.n	80204da <__udivmoddi4+0x12a>
 80204d4:	4288      	cmp	r0, r1
 80204d6:	f200 80cb 	bhi.w	8020670 <__udivmoddi4+0x2c0>
 80204da:	4643      	mov	r3, r8
 80204dc:	1a09      	subs	r1, r1, r0
 80204de:	b2a4      	uxth	r4, r4
 80204e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204e4:	fb07 1110 	mls	r1, r7, r0, r1
 80204e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204ec:	fb0e fe00 	mul.w	lr, lr, r0
 80204f0:	45a6      	cmp	lr, r4
 80204f2:	d908      	bls.n	8020506 <__udivmoddi4+0x156>
 80204f4:	eb1c 0404 	adds.w	r4, ip, r4
 80204f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80204fc:	d202      	bcs.n	8020504 <__udivmoddi4+0x154>
 80204fe:	45a6      	cmp	lr, r4
 8020500:	f200 80bb 	bhi.w	802067a <__udivmoddi4+0x2ca>
 8020504:	4608      	mov	r0, r1
 8020506:	eba4 040e 	sub.w	r4, r4, lr
 802050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802050e:	e79c      	b.n	802044a <__udivmoddi4+0x9a>
 8020510:	f1c6 0720 	rsb	r7, r6, #32
 8020514:	40b3      	lsls	r3, r6
 8020516:	fa22 fc07 	lsr.w	ip, r2, r7
 802051a:	ea4c 0c03 	orr.w	ip, ip, r3
 802051e:	fa20 f407 	lsr.w	r4, r0, r7
 8020522:	fa01 f306 	lsl.w	r3, r1, r6
 8020526:	431c      	orrs	r4, r3
 8020528:	40f9      	lsrs	r1, r7
 802052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802052e:	fa00 f306 	lsl.w	r3, r0, r6
 8020532:	fbb1 f8f9 	udiv	r8, r1, r9
 8020536:	0c20      	lsrs	r0, r4, #16
 8020538:	fa1f fe8c 	uxth.w	lr, ip
 802053c:	fb09 1118 	mls	r1, r9, r8, r1
 8020540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020544:	fb08 f00e 	mul.w	r0, r8, lr
 8020548:	4288      	cmp	r0, r1
 802054a:	fa02 f206 	lsl.w	r2, r2, r6
 802054e:	d90b      	bls.n	8020568 <__udivmoddi4+0x1b8>
 8020550:	eb1c 0101 	adds.w	r1, ip, r1
 8020554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020558:	f080 8088 	bcs.w	802066c <__udivmoddi4+0x2bc>
 802055c:	4288      	cmp	r0, r1
 802055e:	f240 8085 	bls.w	802066c <__udivmoddi4+0x2bc>
 8020562:	f1a8 0802 	sub.w	r8, r8, #2
 8020566:	4461      	add	r1, ip
 8020568:	1a09      	subs	r1, r1, r0
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020570:	fb09 1110 	mls	r1, r9, r0, r1
 8020574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	458e      	cmp	lr, r1
 802057e:	d908      	bls.n	8020592 <__udivmoddi4+0x1e2>
 8020580:	eb1c 0101 	adds.w	r1, ip, r1
 8020584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020588:	d26c      	bcs.n	8020664 <__udivmoddi4+0x2b4>
 802058a:	458e      	cmp	lr, r1
 802058c:	d96a      	bls.n	8020664 <__udivmoddi4+0x2b4>
 802058e:	3802      	subs	r0, #2
 8020590:	4461      	add	r1, ip
 8020592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020596:	fba0 9402 	umull	r9, r4, r0, r2
 802059a:	eba1 010e 	sub.w	r1, r1, lr
 802059e:	42a1      	cmp	r1, r4
 80205a0:	46c8      	mov	r8, r9
 80205a2:	46a6      	mov	lr, r4
 80205a4:	d356      	bcc.n	8020654 <__udivmoddi4+0x2a4>
 80205a6:	d053      	beq.n	8020650 <__udivmoddi4+0x2a0>
 80205a8:	b15d      	cbz	r5, 80205c2 <__udivmoddi4+0x212>
 80205aa:	ebb3 0208 	subs.w	r2, r3, r8
 80205ae:	eb61 010e 	sbc.w	r1, r1, lr
 80205b2:	fa01 f707 	lsl.w	r7, r1, r7
 80205b6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ba:	40f1      	lsrs	r1, r6
 80205bc:	431f      	orrs	r7, r3
 80205be:	e9c5 7100 	strd	r7, r1, [r5]
 80205c2:	2600      	movs	r6, #0
 80205c4:	4631      	mov	r1, r6
 80205c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	40d8      	lsrs	r0, r3
 80205d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205d4:	fa21 f303 	lsr.w	r3, r1, r3
 80205d8:	4091      	lsls	r1, r2
 80205da:	4301      	orrs	r1, r0
 80205dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205e0:	fa1f fe8c 	uxth.w	lr, ip
 80205e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205e8:	fb07 3610 	mls	r6, r7, r0, r3
 80205ec:	0c0b      	lsrs	r3, r1, #16
 80205ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80205f2:	fb00 f60e 	mul.w	r6, r0, lr
 80205f6:	429e      	cmp	r6, r3
 80205f8:	fa04 f402 	lsl.w	r4, r4, r2
 80205fc:	d908      	bls.n	8020610 <__udivmoddi4+0x260>
 80205fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020606:	d22f      	bcs.n	8020668 <__udivmoddi4+0x2b8>
 8020608:	429e      	cmp	r6, r3
 802060a:	d92d      	bls.n	8020668 <__udivmoddi4+0x2b8>
 802060c:	3802      	subs	r0, #2
 802060e:	4463      	add	r3, ip
 8020610:	1b9b      	subs	r3, r3, r6
 8020612:	b289      	uxth	r1, r1
 8020614:	fbb3 f6f7 	udiv	r6, r3, r7
 8020618:	fb07 3316 	mls	r3, r7, r6, r3
 802061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020620:	fb06 f30e 	mul.w	r3, r6, lr
 8020624:	428b      	cmp	r3, r1
 8020626:	d908      	bls.n	802063a <__udivmoddi4+0x28a>
 8020628:	eb1c 0101 	adds.w	r1, ip, r1
 802062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020630:	d216      	bcs.n	8020660 <__udivmoddi4+0x2b0>
 8020632:	428b      	cmp	r3, r1
 8020634:	d914      	bls.n	8020660 <__udivmoddi4+0x2b0>
 8020636:	3e02      	subs	r6, #2
 8020638:	4461      	add	r1, ip
 802063a:	1ac9      	subs	r1, r1, r3
 802063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020640:	e738      	b.n	80204b4 <__udivmoddi4+0x104>
 8020642:	462e      	mov	r6, r5
 8020644:	4628      	mov	r0, r5
 8020646:	e705      	b.n	8020454 <__udivmoddi4+0xa4>
 8020648:	4606      	mov	r6, r0
 802064a:	e6e3      	b.n	8020414 <__udivmoddi4+0x64>
 802064c:	4618      	mov	r0, r3
 802064e:	e6f8      	b.n	8020442 <__udivmoddi4+0x92>
 8020650:	454b      	cmp	r3, r9
 8020652:	d2a9      	bcs.n	80205a8 <__udivmoddi4+0x1f8>
 8020654:	ebb9 0802 	subs.w	r8, r9, r2
 8020658:	eb64 0e0c 	sbc.w	lr, r4, ip
 802065c:	3801      	subs	r0, #1
 802065e:	e7a3      	b.n	80205a8 <__udivmoddi4+0x1f8>
 8020660:	4646      	mov	r6, r8
 8020662:	e7ea      	b.n	802063a <__udivmoddi4+0x28a>
 8020664:	4620      	mov	r0, r4
 8020666:	e794      	b.n	8020592 <__udivmoddi4+0x1e2>
 8020668:	4640      	mov	r0, r8
 802066a:	e7d1      	b.n	8020610 <__udivmoddi4+0x260>
 802066c:	46d0      	mov	r8, sl
 802066e:	e77b      	b.n	8020568 <__udivmoddi4+0x1b8>
 8020670:	3b02      	subs	r3, #2
 8020672:	4461      	add	r1, ip
 8020674:	e732      	b.n	80204dc <__udivmoddi4+0x12c>
 8020676:	4630      	mov	r0, r6
 8020678:	e709      	b.n	802048e <__udivmoddi4+0xde>
 802067a:	4464      	add	r4, ip
 802067c:	3802      	subs	r0, #2
 802067e:	e742      	b.n	8020506 <__udivmoddi4+0x156>

08020680 <__aeabi_idiv0>:
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop

08020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8020684:	b580      	push	{r7, lr}
 8020686:	b082      	sub	sp, #8
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
 802068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	683a      	ldr	r2, [r7, #0]
 8020692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
	assert(spiHandle);
 8020696:	683b      	ldr	r3, [r7, #0]
 8020698:	2b00      	cmp	r3, #0
 802069a:	d105      	bne.n	80206a8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x24>
 802069c:	4b05      	ldr	r3, [pc, #20]	; (80206b4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x30>)
 802069e:	4a06      	ldr	r2, [pc, #24]	; (80206b8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x34>)
 80206a0:	210c      	movs	r1, #12
 80206a2:	4806      	ldr	r0, [pc, #24]	; (80206bc <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x38>)
 80206a4:	f01c fef0 	bl	803d488 <__assert_func>
}
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	4618      	mov	r0, r3
 80206ac:	3708      	adds	r7, #8
 80206ae:	46bd      	mov	sp, r7
 80206b0:	bd80      	pop	{r7, pc}
 80206b2:	bf00      	nop
 80206b4:	0803e548 	.word	0x0803e548
 80206b8:	0803e554 	.word	0x0803e554
 80206bc:	0803e580 	.word	0x0803e580

080206c0 <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80206c0:	b590      	push	{r4, r7, lr}
 80206c2:	b08b      	sub	sp, #44	; 0x2c
 80206c4:	af04      	add	r7, sp, #16
 80206c6:	60f8      	str	r0, [r7, #12]
 80206c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80206cc:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80206ce:	2300      	movs	r3, #0
 80206d0:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80206d2:	230c      	movs	r3, #12
 80206d4:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80206d6:	2300      	movs	r3, #0
 80206d8:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80206da:	68fb      	ldr	r3, [r7, #12]
 80206dc:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80206e0:	4618      	mov	r0, r3
 80206e2:	f000 faab 	bl	8020c3c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	9302      	str	r3, [sp, #8]
 80206ea:	2300      	movs	r3, #0
 80206ec:	9301      	str	r3, [sp, #4]
 80206ee:	2340      	movs	r3, #64	; 0x40
 80206f0:	9300      	str	r3, [sp, #0]
 80206f2:	4b99      	ldr	r3, [pc, #612]	; (8020958 <_ZN10BHYWrapper4InitEfm+0x298>)
 80206f4:	4a99      	ldr	r2, [pc, #612]	; (802095c <_ZN10BHYWrapper4InitEfm+0x29c>)
 80206f6:	499a      	ldr	r1, [pc, #616]	; (8020960 <_ZN10BHYWrapper4InitEfm+0x2a0>)
 80206f8:	2001      	movs	r0, #1
 80206fa:	f008 fe92 	bl	8029422 <bhy2_init>
 80206fe:	4603      	mov	r3, r0
 8020700:	2b00      	cmp	r3, #0
 8020702:	bf14      	ite	ne
 8020704:	2301      	movne	r3, #1
 8020706:	2300      	moveq	r3, #0
 8020708:	b2db      	uxtb	r3, r3
 802070a:	2b00      	cmp	r3, #0
 802070c:	d001      	beq.n	8020712 <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 802070e:	2301      	movs	r3, #1
 8020710:	e11d      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 8020712:	68fb      	ldr	r3, [r7, #12]
 8020714:	4618      	mov	r0, r3
 8020716:	f008 fe6c 	bl	80293f2 <bhy2_soft_reset>
 802071a:	4603      	mov	r3, r0
 802071c:	2b00      	cmp	r3, #0
 802071e:	bf14      	ite	ne
 8020720:	2301      	movne	r3, #1
 8020722:	2300      	moveq	r3, #0
 8020724:	b2db      	uxtb	r3, r3
 8020726:	2b00      	cmp	r3, #0
 8020728:	d001      	beq.n	802072e <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 802072a:	2302      	movs	r3, #2
 802072c:	e10f      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 802072e:	68fa      	ldr	r2, [r7, #12]
 8020730:	f107 0316 	add.w	r3, r7, #22
 8020734:	4611      	mov	r1, r2
 8020736:	4618      	mov	r0, r3
 8020738:	f008 fd47 	bl	80291ca <bhy2_get_product_id>
 802073c:	4603      	mov	r3, r0
 802073e:	2b00      	cmp	r3, #0
 8020740:	bf14      	ite	ne
 8020742:	2301      	movne	r3, #1
 8020744:	2300      	moveq	r3, #0
 8020746:	b2db      	uxtb	r3, r3
 8020748:	2b00      	cmp	r3, #0
 802074a:	d001      	beq.n	8020750 <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 802074c:	2303      	movs	r3, #3
 802074e:	e0fe      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 8020750:	7dbb      	ldrb	r3, [r7, #22]
 8020752:	2b89      	cmp	r3, #137	; 0x89
 8020754:	d001      	beq.n	802075a <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8020756:	2304      	movs	r3, #4
 8020758:	e0f9      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 802075a:	7cfb      	ldrb	r3, [r7, #19]
 802075c:	68fa      	ldr	r2, [r7, #12]
 802075e:	4611      	mov	r1, r2
 8020760:	4618      	mov	r0, r3
 8020762:	f008 fdd9 	bl	8029318 <bhy2_set_host_interrupt_ctrl>
 8020766:	4603      	mov	r3, r0
 8020768:	2b00      	cmp	r3, #0
 802076a:	bf14      	ite	ne
 802076c:	2301      	movne	r3, #1
 802076e:	2300      	moveq	r3, #0
 8020770:	b2db      	uxtb	r3, r3
 8020772:	2b00      	cmp	r3, #0
 8020774:	d001      	beq.n	802077a <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8020776:	2305      	movs	r3, #5
 8020778:	e0e9      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 802077a:	68fa      	ldr	r2, [r7, #12]
 802077c:	f107 0313 	add.w	r3, r7, #19
 8020780:	4611      	mov	r1, r2
 8020782:	4618      	mov	r0, r3
 8020784:	f008 fde4 	bl	8029350 <bhy2_get_host_interrupt_ctrl>
 8020788:	4603      	mov	r3, r0
 802078a:	2b00      	cmp	r3, #0
 802078c:	bf14      	ite	ne
 802078e:	2301      	movne	r3, #1
 8020790:	2300      	moveq	r3, #0
 8020792:	b2db      	uxtb	r3, r3
 8020794:	2b00      	cmp	r3, #0
 8020796:	d001      	beq.n	802079c <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 8020798:	2306      	movs	r3, #6
 802079a:	e0d8      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 802079c:	68fa      	ldr	r2, [r7, #12]
 802079e:	7dfb      	ldrb	r3, [r7, #23]
 80207a0:	4611      	mov	r1, r2
 80207a2:	4618      	mov	r0, r3
 80207a4:	f008 fe09 	bl	80293ba <bhy2_set_host_intf_ctrl>
 80207a8:	4603      	mov	r3, r0
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	bf14      	ite	ne
 80207ae:	2301      	movne	r3, #1
 80207b0:	2300      	moveq	r3, #0
 80207b2:	b2db      	uxtb	r3, r3
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d001      	beq.n	80207bc <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80207b8:	2307      	movs	r3, #7
 80207ba:	e0c8      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80207bc:	68fa      	ldr	r2, [r7, #12]
 80207be:	f107 0312 	add.w	r3, r7, #18
 80207c2:	4611      	mov	r1, r2
 80207c4:	4618      	mov	r0, r3
 80207c6:	f008 fd34 	bl	8029232 <bhy2_get_boot_status>
 80207ca:	4603      	mov	r3, r0
 80207cc:	2b00      	cmp	r3, #0
 80207ce:	bf14      	ite	ne
 80207d0:	2301      	movne	r3, #1
 80207d2:	2300      	moveq	r3, #0
 80207d4:	b2db      	uxtb	r3, r3
 80207d6:	2b00      	cmp	r3, #0
 80207d8:	d001      	beq.n	80207de <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80207da:	2308      	movs	r3, #8
 80207dc:	e0b7      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80207de:	7cbb      	ldrb	r3, [r7, #18]
 80207e0:	f003 0310 	and.w	r3, r3, #16
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	d101      	bne.n	80207ec <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80207e8:	2309      	movs	r3, #9
 80207ea:	e0b0      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80207ec:	68fb      	ldr	r3, [r7, #12]
 80207ee:	461a      	mov	r2, r3
 80207f0:	495c      	ldr	r1, [pc, #368]	; (8020964 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80207f2:	485d      	ldr	r0, [pc, #372]	; (8020968 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 80207f4:	f008 fd59 	bl	80292aa <bhy2_upload_firmware_to_ram>
 80207f8:	4603      	mov	r3, r0
 80207fa:	2b00      	cmp	r3, #0
 80207fc:	bf14      	ite	ne
 80207fe:	2301      	movne	r3, #1
 8020800:	2300      	moveq	r3, #0
 8020802:	b2db      	uxtb	r3, r3
 8020804:	2b00      	cmp	r3, #0
 8020806:	d001      	beq.n	802080c <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8020808:	2309      	movs	r3, #9
 802080a:	e0a0      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 802080c:	68fa      	ldr	r2, [r7, #12]
 802080e:	f107 0311 	add.w	r3, r7, #17
 8020812:	4611      	mov	r1, r2
 8020814:	4618      	mov	r0, r3
 8020816:	f008 feeb 	bl	80295f0 <bhy2_get_error_value>
 802081a:	4603      	mov	r3, r0
 802081c:	2b00      	cmp	r3, #0
 802081e:	bf14      	ite	ne
 8020820:	2301      	movne	r3, #1
 8020822:	2300      	moveq	r3, #0
 8020824:	b2db      	uxtb	r3, r3
 8020826:	2b00      	cmp	r3, #0
 8020828:	d001      	beq.n	802082e <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 802082a:	230a      	movs	r3, #10
 802082c:	e08f      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 802082e:	7c7b      	ldrb	r3, [r7, #17]
 8020830:	2b00      	cmp	r3, #0
 8020832:	d001      	beq.n	8020838 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8020834:	230b      	movs	r3, #11
 8020836:	e08a      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8020838:	68fb      	ldr	r3, [r7, #12]
 802083a:	4618      	mov	r0, r3
 802083c:	f008 fd54 	bl	80292e8 <bhy2_boot_from_ram>
 8020840:	4603      	mov	r3, r0
 8020842:	2b00      	cmp	r3, #0
 8020844:	bf14      	ite	ne
 8020846:	2301      	movne	r3, #1
 8020848:	2300      	moveq	r3, #0
 802084a:	b2db      	uxtb	r3, r3
 802084c:	2b00      	cmp	r3, #0
 802084e:	d001      	beq.n	8020854 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 8020850:	230c      	movs	r3, #12
 8020852:	e07c      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020854:	68fa      	ldr	r2, [r7, #12]
 8020856:	f107 0311 	add.w	r3, r7, #17
 802085a:	4611      	mov	r1, r2
 802085c:	4618      	mov	r0, r3
 802085e:	f008 fec7 	bl	80295f0 <bhy2_get_error_value>
 8020862:	4603      	mov	r3, r0
 8020864:	2b00      	cmp	r3, #0
 8020866:	bf14      	ite	ne
 8020868:	2301      	movne	r3, #1
 802086a:	2300      	moveq	r3, #0
 802086c:	b2db      	uxtb	r3, r3
 802086e:	2b00      	cmp	r3, #0
 8020870:	d001      	beq.n	8020876 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 8020872:	230d      	movs	r3, #13
 8020874:	e06b      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8020876:	7c7b      	ldrb	r3, [r7, #17]
 8020878:	2b00      	cmp	r3, #0
 802087a:	d001      	beq.n	8020880 <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 802087c:	230e      	movs	r3, #14
 802087e:	e066      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 8020880:	68fa      	ldr	r2, [r7, #12]
 8020882:	f107 0314 	add.w	r3, r7, #20
 8020886:	4611      	mov	r1, r2
 8020888:	4618      	mov	r0, r3
 802088a:	f008 fcb8 	bl	80291fe <bhy2_get_kernel_version>
 802088e:	4603      	mov	r3, r0
 8020890:	2b00      	cmp	r3, #0
 8020892:	bf14      	ite	ne
 8020894:	2301      	movne	r3, #1
 8020896:	2300      	moveq	r3, #0
 8020898:	b2db      	uxtb	r3, r3
 802089a:	2b00      	cmp	r3, #0
 802089c:	d001      	beq.n	80208a2 <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 802089e:	230f      	movs	r3, #15
 80208a0:	e055      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80208a2:	8abb      	ldrh	r3, [r7, #20]
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	d101      	bne.n	80208ac <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80208a8:	2310      	movs	r3, #16
 80208aa:	e050      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80208ac:	68fb      	ldr	r3, [r7, #12]
 80208ae:	f241 123c 	movw	r2, #4412	; 0x113c
 80208b2:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80208b4:	68fb      	ldr	r3, [r7, #12]
 80208b6:	492d      	ldr	r1, [pc, #180]	; (802096c <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80208b8:	2025      	movs	r0, #37	; 0x25
 80208ba:	f008 fddc 	bl	8029476 <bhy2_register_fifo_parse_callback>
 80208be:	4603      	mov	r3, r0
 80208c0:	2b00      	cmp	r3, #0
 80208c2:	bf14      	ite	ne
 80208c4:	2301      	movne	r3, #1
 80208c6:	2300      	moveq	r3, #0
 80208c8:	b2db      	uxtb	r3, r3
 80208ca:	2b00      	cmp	r3, #0
 80208cc:	d001      	beq.n	80208d2 <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80208ce:	2311      	movs	r3, #17
 80208d0:	e03d      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80208d2:	68fb      	ldr	r3, [r7, #12]
 80208d4:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208d8:	4618      	mov	r0, r3
 80208da:	f000 f98b 	bl	8020bf4 <_ZNSt5arrayIhLj2048EE4dataEv>
 80208de:	4604      	mov	r4, r0
 80208e0:	68fb      	ldr	r3, [r7, #12]
 80208e2:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208e6:	4618      	mov	r0, r3
 80208e8:	f000 f991 	bl	8020c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80208ec:	4601      	mov	r1, r0
 80208ee:	68fb      	ldr	r3, [r7, #12]
 80208f0:	461a      	mov	r2, r3
 80208f2:	4620      	mov	r0, r4
 80208f4:	f008 fb17 	bl	8028f26 <bhy2_get_and_process_fifo>
 80208f8:	4603      	mov	r3, r0
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	bf14      	ite	ne
 80208fe:	2301      	movne	r3, #1
 8020900:	2300      	moveq	r3, #0
 8020902:	b2db      	uxtb	r3, r3
 8020904:	2b00      	cmp	r3, #0
 8020906:	d001      	beq.n	802090c <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8020908:	2312      	movs	r3, #18
 802090a:	e020      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 802090c:	68fb      	ldr	r3, [r7, #12]
 802090e:	4618      	mov	r0, r3
 8020910:	f008 fde0 	bl	80294d4 <bhy2_update_virtual_sensor_list>
 8020914:	4603      	mov	r3, r0
 8020916:	2b00      	cmp	r3, #0
 8020918:	bf14      	ite	ne
 802091a:	2301      	movne	r3, #1
 802091c:	2300      	moveq	r3, #0
 802091e:	b2db      	uxtb	r3, r3
 8020920:	2b00      	cmp	r3, #0
 8020922:	d001      	beq.n	8020928 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8020924:	2310      	movs	r3, #16
 8020926:	e012      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8020928:	68fb      	ldr	r3, [r7, #12]
 802092a:	461a      	mov	r2, r3
 802092c:	6879      	ldr	r1, [r7, #4]
 802092e:	ed97 0a02 	vldr	s0, [r7, #8]
 8020932:	2025      	movs	r0, #37	; 0x25
 8020934:	f008 fc28 	bl	8029188 <bhy2_set_virt_sensor_cfg>
 8020938:	4603      	mov	r3, r0
 802093a:	2b00      	cmp	r3, #0
 802093c:	bf14      	ite	ne
 802093e:	2301      	movne	r3, #1
 8020940:	2300      	moveq	r3, #0
 8020942:	b2db      	uxtb	r3, r3
 8020944:	2b00      	cmp	r3, #0
 8020946:	d001      	beq.n	802094c <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8020948:	2311      	movs	r3, #17
 802094a:	e000      	b.n	802094e <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 802094c:	2300      	movs	r3, #0
}
 802094e:	4618      	mov	r0, r3
 8020950:	371c      	adds	r7, #28
 8020952:	46bd      	mov	sp, r7
 8020954:	bd90      	pop	{r4, r7, pc}
 8020956:	bf00      	nop
 8020958:	08020e0d 	.word	0x08020e0d
 802095c:	08020d89 	.word	0x08020d89
 8020960:	08020d0d 	.word	0x08020d0d
 8020964:	0001a66c 	.word	0x0001a66c
 8020968:	0803eef0 	.word	0x0803eef0
 802096c:	08020a11 	.word	0x08020a11

08020970 <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 8020970:	b590      	push	{r4, r7, lr}
 8020972:	b085      	sub	sp, #20
 8020974:	af00      	add	r7, sp, #0
 8020976:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8020978:	2300      	movs	r3, #0
 802097a:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 802097c:	687a      	ldr	r2, [r7, #4]
 802097e:	f107 030f 	add.w	r3, r7, #15
 8020982:	4611      	mov	r1, r2
 8020984:	4618      	mov	r0, r3
 8020986:	f008 fcfe 	bl	8029386 <bhy2_get_interrupt_status>

	if (interruptStatus) {
 802098a:	7bfb      	ldrb	r3, [r7, #15]
 802098c:	2b00      	cmp	r3, #0
 802098e:	d01d      	beq.n	80209cc <_ZN10BHYWrapper4PollEv+0x5c>
		assert(
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 8020996:	4618      	mov	r0, r3
 8020998:	f000 f92c 	bl	8020bf4 <_ZNSt5arrayIhLj2048EE4dataEv>
 802099c:	4604      	mov	r4, r0
 802099e:	687b      	ldr	r3, [r7, #4]
 80209a0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209a4:	4618      	mov	r0, r3
 80209a6:	f000 f932 	bl	8020c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80209aa:	4601      	mov	r1, r0
 80209ac:	687b      	ldr	r3, [r7, #4]
 80209ae:	461a      	mov	r2, r3
 80209b0:	4620      	mov	r0, r4
 80209b2:	f008 fab8 	bl	8028f26 <bhy2_get_and_process_fifo>
 80209b6:	4603      	mov	r3, r0
 80209b8:	2b00      	cmp	r3, #0
 80209ba:	d005      	beq.n	80209c8 <_ZN10BHYWrapper4PollEv+0x58>
 80209bc:	4b06      	ldr	r3, [pc, #24]	; (80209d8 <_ZN10BHYWrapper4PollEv+0x68>)
 80209be:	4a07      	ldr	r2, [pc, #28]	; (80209dc <_ZN10BHYWrapper4PollEv+0x6c>)
 80209c0:	2166      	movs	r1, #102	; 0x66
 80209c2:	4807      	ldr	r0, [pc, #28]	; (80209e0 <_ZN10BHYWrapper4PollEv+0x70>)
 80209c4:	f01c fd60 	bl	803d488 <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		return true;
 80209c8:	2301      	movs	r3, #1
 80209ca:	e000      	b.n	80209ce <_ZN10BHYWrapper4PollEv+0x5e>
	}

	return false;
 80209cc:	2300      	movs	r3, #0
}
 80209ce:	4618      	mov	r0, r3
 80209d0:	3714      	adds	r7, #20
 80209d2:	46bd      	mov	sp, r7
 80209d4:	bd90      	pop	{r4, r7, pc}
 80209d6:	bf00      	nop
 80209d8:	0803e59c 	.word	0x0803e59c
 80209dc:	0803e5f0 	.word	0x0803e5f0
 80209e0:	0803e580 	.word	0x0803e580

080209e4 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 80209e4:	b4b0      	push	{r4, r5, r7}
 80209e6:	b083      	sub	sp, #12
 80209e8:	af00      	add	r7, sp, #0
 80209ea:	6078      	str	r0, [r7, #4]
 80209ec:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 80209ee:	687a      	ldr	r2, [r7, #4]
 80209f0:	683b      	ldr	r3, [r7, #0]
 80209f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80209f6:	4615      	mov	r5, r2
 80209f8:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 80209fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80209fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020a00:	6823      	ldr	r3, [r4, #0]
 8020a02:	602b      	str	r3, [r5, #0]
}
 8020a04:	6878      	ldr	r0, [r7, #4]
 8020a06:	370c      	adds	r7, #12
 8020a08:	46bd      	mov	sp, r7
 8020a0a:	bcb0      	pop	{r4, r5, r7}
 8020a0c:	4770      	bx	lr
	...

08020a10 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8020a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020a14:	b08e      	sub	sp, #56	; 0x38
 8020a16:	af00      	add	r7, sp, #0
 8020a18:	60f8      	str	r0, [r7, #12]
 8020a1a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8020a1c:	68bb      	ldr	r3, [r7, #8]
 8020a1e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8020a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	d105      	bne.n	8020a32 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8020a26:	4b40      	ldr	r3, [pc, #256]	; (8020b28 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8020a28:	4a40      	ldr	r2, [pc, #256]	; (8020b2c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8020a2a:	2177      	movs	r1, #119	; 0x77
 8020a2c:	4840      	ldr	r0, [pc, #256]	; (8020b30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8020a2e:	f01c fd2b 	bl	803d488 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8020a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a34:	3308      	adds	r3, #8
 8020a36:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8020a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8020a3c:	68fb      	ldr	r3, [r7, #12]
 8020a3e:	789b      	ldrb	r3, [r3, #2]
 8020a40:	2b0b      	cmp	r3, #11
 8020a42:	d167      	bne.n	8020b14 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8020a44:	68fb      	ldr	r3, [r7, #12]
 8020a46:	685b      	ldr	r3, [r3, #4]
 8020a48:	f107 0214 	add.w	r2, r7, #20
 8020a4c:	4611      	mov	r1, r2
 8020a4e:	4618      	mov	r0, r3
 8020a50:	f009 ff55 	bl	802a8fe <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8020a54:	68fb      	ldr	r3, [r7, #12]
 8020a56:	781a      	ldrb	r2, [r3, #0]
 8020a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a5a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	689b      	ldr	r3, [r3, #8]
 8020a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020a64:	4602      	mov	r2, r0
 8020a66:	460b      	mov	r3, r1
 8020a68:	f04f 0a00 	mov.w	sl, #0
 8020a6c:	f04f 0b00 	mov.w	fp, #0
 8020a70:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8020a74:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8020a78:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8020a7c:	4652      	mov	r2, sl
 8020a7e:	465b      	mov	r3, fp
 8020a80:	ebb2 0800 	subs.w	r8, r2, r0
 8020a84:	eb63 0901 	sbc.w	r9, r3, r1
 8020a88:	f04f 0200 	mov.w	r2, #0
 8020a8c:	f04f 0300 	mov.w	r3, #0
 8020a90:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8020a94:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8020a98:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8020a9c:	ebb2 0408 	subs.w	r4, r2, r8
 8020aa0:	eb63 0509 	sbc.w	r5, r3, r9
 8020aa4:	f04f 0200 	mov.w	r2, #0
 8020aa8:	f04f 0300 	mov.w	r3, #0
 8020aac:	00eb      	lsls	r3, r5, #3
 8020aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020ab2:	00e2      	lsls	r2, r4, #3
 8020ab4:	4614      	mov	r4, r2
 8020ab6:	461d      	mov	r5, r3
 8020ab8:	1823      	adds	r3, r4, r0
 8020aba:	603b      	str	r3, [r7, #0]
 8020abc:	eb45 0301 	adc.w	r3, r5, r1
 8020ac0:	607b      	str	r3, [r7, #4]
 8020ac2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020ac6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8020aca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020ace:	a314      	add	r3, pc, #80	; (adr r3, 8020b20 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8020ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ad4:	f7ff fc54 	bl	8020380 <__aeabi_uldivmod>
 8020ad8:	4602      	mov	r2, r0
 8020ada:	460b      	mov	r3, r1
 8020adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ade:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8020ae0:	6a3a      	ldr	r2, [r7, #32]
 8020ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	4913      	ldr	r1, [pc, #76]	; (8020b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8020ae8:	fb01 f303 	mul.w	r3, r1, r3
 8020aec:	1ad2      	subs	r2, r2, r3
 8020aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020af0:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8020af2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020af8:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8020afa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b00:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8020b02:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8020b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b08:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8020b0a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8020b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b10:	80da      	strh	r2, [r3, #6]
 8020b12:	e000      	b.n	8020b16 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8020b14:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8020b16:	3738      	adds	r7, #56	; 0x38
 8020b18:	46bd      	mov	sp, r7
 8020b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020b1e:	bf00      	nop
 8020b20:	3b9aca00 	.word	0x3b9aca00
 8020b24:	00000000 	.word	0x00000000
 8020b28:	0803e608 	.word	0x0803e608
 8020b2c:	0803e610 	.word	0x0803e610
 8020b30:	0803e580 	.word	0x0803e580
 8020b34:	3b9aca00 	.word	0x3b9aca00

08020b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8020b38:	b580      	push	{r7, lr}
 8020b3a:	b086      	sub	sp, #24
 8020b3c:	af00      	add	r7, sp, #0
 8020b3e:	60f8      	str	r0, [r7, #12]
 8020b40:	60b9      	str	r1, [r7, #8]
 8020b42:	607a      	str	r2, [r7, #4]
	assert(dest);
 8020b44:	68bb      	ldr	r3, [r7, #8]
 8020b46:	2b00      	cmp	r3, #0
 8020b48:	d105      	bne.n	8020b56 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8020b4a:	4b26      	ldr	r3, [pc, #152]	; (8020be4 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8020b4c:	4a26      	ldr	r2, [pc, #152]	; (8020be8 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b4e:	2190      	movs	r1, #144	; 0x90
 8020b50:	4826      	ldr	r0, [pc, #152]	; (8020bec <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b52:	f01c fc99 	bl	803d488 <__assert_func>
	assert(size);
 8020b56:	687b      	ldr	r3, [r7, #4]
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d105      	bne.n	8020b68 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8020b5c:	4b24      	ldr	r3, [pc, #144]	; (8020bf0 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8020b5e:	4a22      	ldr	r2, [pc, #136]	; (8020be8 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b60:	2191      	movs	r1, #145	; 0x91
 8020b62:	4822      	ldr	r0, [pc, #136]	; (8020bec <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b64:	f01c fc90 	bl	803d488 <__assert_func>

	uint8_t *ptr = dest;
 8020b68:	68bb      	ldr	r3, [r7, #8]
 8020b6a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8020b6c:	68fb      	ldr	r3, [r7, #12]
 8020b6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020b72:	697b      	ldr	r3, [r7, #20]
 8020b74:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b76:	697b      	ldr	r3, [r7, #20]
 8020b78:	3302      	adds	r3, #2
 8020b7a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8020b7c:	68fb      	ldr	r3, [r7, #12]
 8020b7e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020b82:	697b      	ldr	r3, [r7, #20]
 8020b84:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b86:	697b      	ldr	r3, [r7, #20]
 8020b88:	3302      	adds	r3, #2
 8020b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b96:	697b      	ldr	r3, [r7, #20]
 8020b98:	3302      	adds	r3, #2
 8020b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020ba2:	697b      	ldr	r3, [r7, #20]
 8020ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	3302      	adds	r3, #2
 8020baa:	617b      	str	r3, [r7, #20]
	 /*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8020bac:	68fb      	ldr	r3, [r7, #12]
 8020bae:	689a      	ldr	r2, [r3, #8]
 8020bb0:	697b      	ldr	r3, [r7, #20]
 8020bb2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020bb4:	697b      	ldr	r3, [r7, #20]
 8020bb6:	3304      	adds	r3, #4
 8020bb8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8020bba:	68fb      	ldr	r3, [r7, #12]
 8020bbc:	68da      	ldr	r2, [r3, #12]
 8020bbe:	697b      	ldr	r3, [r7, #20]
 8020bc0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	3304      	adds	r3, #4
 8020bc6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8020bc8:	68fb      	ldr	r3, [r7, #12]
 8020bca:	7c1a      	ldrb	r2, [r3, #16]
 8020bcc:	697b      	ldr	r3, [r7, #20]
 8020bce:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8020bd0:	697b      	ldr	r3, [r7, #20]
 8020bd2:	3301      	adds	r3, #1
 8020bd4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8020bd6:	687b      	ldr	r3, [r7, #4]
 8020bd8:	2211      	movs	r2, #17
 8020bda:	701a      	strb	r2, [r3, #0]
}
 8020bdc:	bf00      	nop
 8020bde:	3718      	adds	r7, #24
 8020be0:	46bd      	mov	sp, r7
 8020be2:	bd80      	pop	{r7, pc}
 8020be4:	0803e65c 	.word	0x0803e65c
 8020be8:	0803e664 	.word	0x0803e664
 8020bec:	0803e580 	.word	0x0803e580
 8020bf0:	0803e6a0 	.word	0x0803e6a0

08020bf4 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8020bf4:	b580      	push	{r7, lr}
 8020bf6:	b082      	sub	sp, #8
 8020bf8:	af00      	add	r7, sp, #0
 8020bfa:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8020bfc:	687b      	ldr	r3, [r7, #4]
 8020bfe:	4618      	mov	r0, r3
 8020c00:	f000 f811 	bl	8020c26 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8020c04:	4603      	mov	r3, r0
 8020c06:	4618      	mov	r0, r3
 8020c08:	3708      	adds	r7, #8
 8020c0a:	46bd      	mov	sp, r7
 8020c0c:	bd80      	pop	{r7, pc}

08020c0e <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8020c0e:	b480      	push	{r7}
 8020c10:	b083      	sub	sp, #12
 8020c12:	af00      	add	r7, sp, #0
 8020c14:	6078      	str	r0, [r7, #4]
 8020c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c1a:	4618      	mov	r0, r3
 8020c1c:	370c      	adds	r7, #12
 8020c1e:	46bd      	mov	sp, r7
 8020c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c24:	4770      	bx	lr

08020c26 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8020c26:	b480      	push	{r7}
 8020c28:	b083      	sub	sp, #12
 8020c2a:	af00      	add	r7, sp, #0
 8020c2c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8020c2e:	687b      	ldr	r3, [r7, #4]
 8020c30:	4618      	mov	r0, r3
 8020c32:	370c      	adds	r7, #12
 8020c34:	46bd      	mov	sp, r7
 8020c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c3a:	4770      	bx	lr

08020c3c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8020c3c:	b480      	push	{r7}
 8020c3e:	b083      	sub	sp, #12
 8020c40:	af00      	add	r7, sp, #0
 8020c42:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8020c44:	4a04      	ldr	r2, [pc, #16]	; (8020c58 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8020c46:	687b      	ldr	r3, [r7, #4]
 8020c48:	6013      	str	r3, [r2, #0]
}
 8020c4a:	bf00      	nop
 8020c4c:	370c      	adds	r7, #12
 8020c4e:	46bd      	mov	sp, r7
 8020c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c54:	4770      	bx	lr
 8020c56:	bf00      	nop
 8020c58:	24000184 	.word	0x24000184

08020c5c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8020c5c:	b580      	push	{r7, lr}
 8020c5e:	b082      	sub	sp, #8
 8020c60:	af00      	add	r7, sp, #0
 8020c62:	6078      	str	r0, [r7, #4]
 8020c64:	460b      	mov	r3, r1
 8020c66:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8020c68:	4b11      	ldr	r3, [pc, #68]	; (8020cb0 <_Z11spiTransmitPht+0x54>)
 8020c6a:	681b      	ldr	r3, [r3, #0]
 8020c6c:	887a      	ldrh	r2, [r7, #2]
 8020c6e:	6879      	ldr	r1, [r7, #4]
 8020c70:	4618      	mov	r0, r3
 8020c72:	f013 ff9f 	bl	8034bb4 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020c76:	4b0e      	ldr	r3, [pc, #56]	; (8020cb0 <_Z11spiTransmitPht+0x54>)
 8020c78:	681b      	ldr	r3, [r3, #0]
 8020c7a:	4618      	mov	r0, r3
 8020c7c:	f014 fe28 	bl	80358d0 <HAL_SPI_GetState>
 8020c80:	4603      	mov	r3, r0
 8020c82:	2b01      	cmp	r3, #1
 8020c84:	bf14      	ite	ne
 8020c86:	2301      	movne	r3, #1
 8020c88:	2300      	moveq	r3, #0
 8020c8a:	b2db      	uxtb	r3, r3
 8020c8c:	2b00      	cmp	r3, #0
 8020c8e:	d000      	beq.n	8020c92 <_Z11spiTransmitPht+0x36>
 8020c90:	e7f1      	b.n	8020c76 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020c92:	4b07      	ldr	r3, [pc, #28]	; (8020cb0 <_Z11spiTransmitPht+0x54>)
 8020c94:	681b      	ldr	r3, [r3, #0]
 8020c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020c9a:	2b00      	cmp	r3, #0
 8020c9c:	bf0c      	ite	eq
 8020c9e:	2301      	moveq	r3, #1
 8020ca0:	2300      	movne	r3, #0
 8020ca2:	b2db      	uxtb	r3, r3
 8020ca4:	b25b      	sxtb	r3, r3
  }
 8020ca6:	4618      	mov	r0, r3
 8020ca8:	3708      	adds	r7, #8
 8020caa:	46bd      	mov	sp, r7
 8020cac:	bd80      	pop	{r7, pc}
 8020cae:	bf00      	nop
 8020cb0:	24000184 	.word	0x24000184

08020cb4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8020cb4:	b580      	push	{r7, lr}
 8020cb6:	b082      	sub	sp, #8
 8020cb8:	af00      	add	r7, sp, #0
 8020cba:	6078      	str	r0, [r7, #4]
 8020cbc:	460b      	mov	r3, r1
 8020cbe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8020cc0:	4b11      	ldr	r3, [pc, #68]	; (8020d08 <_Z9spiReceivPht+0x54>)
 8020cc2:	681b      	ldr	r3, [r3, #0]
 8020cc4:	887a      	ldrh	r2, [r7, #2]
 8020cc6:	6879      	ldr	r1, [r7, #4]
 8020cc8:	4618      	mov	r0, r3
 8020cca:	f014 f8bd 	bl	8034e48 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020cce:	4b0e      	ldr	r3, [pc, #56]	; (8020d08 <_Z9spiReceivPht+0x54>)
 8020cd0:	681b      	ldr	r3, [r3, #0]
 8020cd2:	4618      	mov	r0, r3
 8020cd4:	f014 fdfc 	bl	80358d0 <HAL_SPI_GetState>
 8020cd8:	4603      	mov	r3, r0
 8020cda:	2b01      	cmp	r3, #1
 8020cdc:	bf14      	ite	ne
 8020cde:	2301      	movne	r3, #1
 8020ce0:	2300      	moveq	r3, #0
 8020ce2:	b2db      	uxtb	r3, r3
 8020ce4:	2b00      	cmp	r3, #0
 8020ce6:	d000      	beq.n	8020cea <_Z9spiReceivPht+0x36>
 8020ce8:	e7f1      	b.n	8020cce <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020cea:	4b07      	ldr	r3, [pc, #28]	; (8020d08 <_Z9spiReceivPht+0x54>)
 8020cec:	681b      	ldr	r3, [r3, #0]
 8020cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020cf2:	2b00      	cmp	r3, #0
 8020cf4:	bf0c      	ite	eq
 8020cf6:	2301      	moveq	r3, #1
 8020cf8:	2300      	movne	r3, #0
 8020cfa:	b2db      	uxtb	r3, r3
 8020cfc:	b25b      	sxtb	r3, r3
  }
 8020cfe:	4618      	mov	r0, r3
 8020d00:	3708      	adds	r7, #8
 8020d02:	46bd      	mov	sp, r7
 8020d04:	bd80      	pop	{r7, pc}
 8020d06:	bf00      	nop
 8020d08:	24000184 	.word	0x24000184

08020d0c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020d0c:	b580      	push	{r7, lr}
 8020d0e:	b084      	sub	sp, #16
 8020d10:	af00      	add	r7, sp, #0
 8020d12:	60b9      	str	r1, [r7, #8]
 8020d14:	607a      	str	r2, [r7, #4]
 8020d16:	603b      	str	r3, [r7, #0]
 8020d18:	4603      	mov	r3, r0
 8020d1a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020d1c:	4b19      	ldr	r3, [pc, #100]	; (8020d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020d22:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8020d24:	f107 030f 	add.w	r3, r7, #15
 8020d28:	2101      	movs	r1, #1
 8020d2a:	4618      	mov	r0, r3
 8020d2c:	f7ff ff96 	bl	8020c5c <_Z11spiTransmitPht>
 8020d30:	4603      	mov	r3, r0
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	bf0c      	ite	eq
 8020d36:	2301      	moveq	r3, #1
 8020d38:	2300      	movne	r3, #0
 8020d3a:	b2db      	uxtb	r3, r3
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	d002      	beq.n	8020d46 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8020d40:	f06f 0301 	mvn.w	r3, #1
 8020d44:	e019      	b.n	8020d7a <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8020d46:	687b      	ldr	r3, [r7, #4]
 8020d48:	b29b      	uxth	r3, r3
 8020d4a:	4619      	mov	r1, r3
 8020d4c:	68b8      	ldr	r0, [r7, #8]
 8020d4e:	f7ff ffb1 	bl	8020cb4 <_Z9spiReceivPht>
 8020d52:	4603      	mov	r3, r0
 8020d54:	2b00      	cmp	r3, #0
 8020d56:	bf14      	ite	ne
 8020d58:	2301      	movne	r3, #1
 8020d5a:	2300      	moveq	r3, #0
 8020d5c:	b2db      	uxtb	r3, r3
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d005      	beq.n	8020d6e <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020d62:	4b08      	ldr	r3, [pc, #32]	; (8020d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020d68:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8020d6a:	2300      	movs	r3, #0
 8020d6c:	e005      	b.n	8020d7a <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020d6e:	4b05      	ldr	r3, [pc, #20]	; (8020d84 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020d74:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8020d76:	f06f 0301 	mvn.w	r3, #1
  }
 8020d7a:	4618      	mov	r0, r3
 8020d7c:	3710      	adds	r7, #16
 8020d7e:	46bd      	mov	sp, r7
 8020d80:	bd80      	pop	{r7, pc}
 8020d82:	bf00      	nop
 8020d84:	58021000 	.word	0x58021000

08020d88 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020d88:	b580      	push	{r7, lr}
 8020d8a:	b084      	sub	sp, #16
 8020d8c:	af00      	add	r7, sp, #0
 8020d8e:	60b9      	str	r1, [r7, #8]
 8020d90:	607a      	str	r2, [r7, #4]
 8020d92:	603b      	str	r3, [r7, #0]
 8020d94:	4603      	mov	r3, r0
 8020d96:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8020d98:	687b      	ldr	r3, [r7, #4]
 8020d9a:	2b40      	cmp	r3, #64	; 0x40
 8020d9c:	d902      	bls.n	8020da4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8020d9e:	f06f 0303 	mvn.w	r3, #3
 8020da2:	e028      	b.n	8020df6 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8020da4:	4a16      	ldr	r2, [pc, #88]	; (8020e00 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020da6:	7bfb      	ldrb	r3, [r7, #15]
 8020da8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8020daa:	4b16      	ldr	r3, [pc, #88]	; (8020e04 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8020dac:	687a      	ldr	r2, [r7, #4]
 8020dae:	68b9      	ldr	r1, [r7, #8]
 8020db0:	4618      	mov	r0, r3
 8020db2:	f01c fbd3 	bl	803d55c <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020db6:	4b14      	ldr	r3, [pc, #80]	; (8020e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020dbc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	b29b      	uxth	r3, r3
 8020dc2:	3301      	adds	r3, #1
 8020dc4:	b29b      	uxth	r3, r3
 8020dc6:	4619      	mov	r1, r3
 8020dc8:	480d      	ldr	r0, [pc, #52]	; (8020e00 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020dca:	f7ff ff47 	bl	8020c5c <_Z11spiTransmitPht>
 8020dce:	4603      	mov	r3, r0
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	bf14      	ite	ne
 8020dd4:	2301      	movne	r3, #1
 8020dd6:	2300      	moveq	r3, #0
 8020dd8:	b2db      	uxtb	r3, r3
 8020dda:	2b00      	cmp	r3, #0
 8020ddc:	d005      	beq.n	8020dea <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020dde:	4b0a      	ldr	r3, [pc, #40]	; (8020e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020de0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020de4:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8020de6:	2300      	movs	r3, #0
 8020de8:	e005      	b.n	8020df6 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020dea:	4b07      	ldr	r3, [pc, #28]	; (8020e08 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020dec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020df0:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8020df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8020df6:	4618      	mov	r0, r3
 8020df8:	3710      	adds	r7, #16
 8020dfa:	46bd      	mov	sp, r7
 8020dfc:	bd80      	pop	{r7, pc}
 8020dfe:	bf00      	nop
 8020e00:	24000188 	.word	0x24000188
 8020e04:	24000189 	.word	0x24000189
 8020e08:	58021000 	.word	0x58021000

08020e0c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8020e0c:	b580      	push	{r7, lr}
 8020e0e:	b082      	sub	sp, #8
 8020e10:	af00      	add	r7, sp, #0
 8020e12:	6078      	str	r0, [r7, #4]
 8020e14:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8020e16:	687b      	ldr	r3, [r7, #4]
 8020e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8020e1c:	d308      	bcc.n	8020e30 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8020e1e:	687b      	ldr	r3, [r7, #4]
 8020e20:	4a0b      	ldr	r2, [pc, #44]	; (8020e50 <_Z13bhy2_delay_usmPv+0x44>)
 8020e22:	fba2 2303 	umull	r2, r3, r2, r3
 8020e26:	099b      	lsrs	r3, r3, #6
 8020e28:	4618      	mov	r0, r3
 8020e2a:	f00b fabf 	bl	802c3ac <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8020e2e:	e00b      	b.n	8020e48 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	1e5a      	subs	r2, r3, #1
 8020e34:	607a      	str	r2, [r7, #4]
 8020e36:	2b00      	cmp	r3, #0
 8020e38:	bf14      	ite	ne
 8020e3a:	2301      	movne	r3, #1
 8020e3c:	2300      	moveq	r3, #0
 8020e3e:	b2db      	uxtb	r3, r3
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d001      	beq.n	8020e48 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8020e44:	bf00      	nop
    while( us-- ) {
 8020e46:	e7f3      	b.n	8020e30 <_Z13bhy2_delay_usmPv+0x24>
  }
 8020e48:	bf00      	nop
 8020e4a:	3708      	adds	r7, #8
 8020e4c:	46bd      	mov	sp, r7
 8020e4e:	bd80      	pop	{r7, pc}
 8020e50:	10624dd3 	.word	0x10624dd3

08020e54 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8020e54:	b480      	push	{r7}
 8020e56:	b083      	sub	sp, #12
 8020e58:	af00      	add	r7, sp, #0
 8020e5a:	6078      	str	r0, [r7, #4]
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	4618      	mov	r0, r3
 8020e60:	370c      	adds	r7, #12
 8020e62:	46bd      	mov	sp, r7
 8020e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e68:	4770      	bx	lr

08020e6a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8020e6a:	b480      	push	{r7}
 8020e6c:	b083      	sub	sp, #12
 8020e6e:	af00      	add	r7, sp, #0
 8020e70:	6078      	str	r0, [r7, #4]
 8020e72:	6039      	str	r1, [r7, #0]
 8020e74:	683b      	ldr	r3, [r7, #0]
 8020e76:	4618      	mov	r0, r3
 8020e78:	370c      	adds	r7, #12
 8020e7a:	46bd      	mov	sp, r7
 8020e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e80:	4770      	bx	lr

08020e82 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8020e82:	b480      	push	{r7}
 8020e84:	b083      	sub	sp, #12
 8020e86:	af00      	add	r7, sp, #0
 8020e88:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8020e8a:	687b      	ldr	r3, [r7, #4]
 8020e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020e90:	d205      	bcs.n	8020e9e <_ZSt16__deque_buf_sizej+0x1c>
 8020e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020e96:	687b      	ldr	r3, [r7, #4]
 8020e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8020e9c:	e000      	b.n	8020ea0 <_ZSt16__deque_buf_sizej+0x1e>
 8020e9e:	2301      	movs	r3, #1
 8020ea0:	4618      	mov	r0, r3
 8020ea2:	370c      	adds	r7, #12
 8020ea4:	46bd      	mov	sp, r7
 8020ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eaa:	4770      	bx	lr

08020eac <_ZN11QueueSender11MessageMode9SerializeEh>:
		using Type = uint8_t;
		static constexpr Type Sync = 0;
		static constexpr Type Async = 1;
		static constexpr Type Info = 2;

		static uint8_t Serialize(Type mode) {
 8020eac:	b480      	push	{r7}
 8020eae:	b083      	sub	sp, #12
 8020eb0:	af00      	add	r7, sp, #0
 8020eb2:	4603      	mov	r3, r0
 8020eb4:	71fb      	strb	r3, [r7, #7]
			return mode;
 8020eb6:	79fb      	ldrb	r3, [r7, #7]
		}
 8020eb8:	4618      	mov	r0, r3
 8020eba:	370c      	adds	r7, #12
 8020ebc:	46bd      	mov	sp, r7
 8020ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec2:	4770      	bx	lr

08020ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static Type Deserialize(uint8_t val) {
 8020ec4:	b480      	push	{r7}
 8020ec6:	b083      	sub	sp, #12
 8020ec8:	af00      	add	r7, sp, #0
 8020eca:	4603      	mov	r3, r0
 8020ecc:	71fb      	strb	r3, [r7, #7]
			return val;
 8020ece:	79fb      	ldrb	r3, [r7, #7]
		}
 8020ed0:	4618      	mov	r0, r3
 8020ed2:	370c      	adds	r7, #12
 8020ed4:	46bd      	mov	sp, r7
 8020ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eda:	4770      	bx	lr

08020edc <_ZN11QueueSender9ErrorCode9SerializeEh>:
		static constexpr Type Success = 0;
		static constexpr Type Timeout = 1;
		static constexpr Type NACK = 2;
		static constexpr Type Unknown = 3;

		static uint8_t Serialize(Type error) {
 8020edc:	b480      	push	{r7}
 8020ede:	b083      	sub	sp, #12
 8020ee0:	af00      	add	r7, sp, #0
 8020ee2:	4603      	mov	r3, r0
 8020ee4:	71fb      	strb	r3, [r7, #7]
			return error;
 8020ee6:	79fb      	ldrb	r3, [r7, #7]
		}
 8020ee8:	4618      	mov	r0, r3
 8020eea:	370c      	adds	r7, #12
 8020eec:	46bd      	mov	sp, r7
 8020eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ef2:	4770      	bx	lr

08020ef4 <_ZN11QueueSender4Info11SerializeToEPPh>:
		uint16_t NumRequests;
		uint16_t NumResponces;

		static constexpr size_t Size = 2 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8020ef4:	b580      	push	{r7, lr}
 8020ef6:	b082      	sub	sp, #8
 8020ef8:	af00      	add	r7, sp, #0
 8020efa:	6078      	str	r0, [r7, #4]
 8020efc:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8020efe:	683b      	ldr	r3, [r7, #0]
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	d105      	bne.n	8020f10 <_ZN11QueueSender4Info11SerializeToEPPh+0x1c>
 8020f04:	4b13      	ldr	r3, [pc, #76]	; (8020f54 <_ZN11QueueSender4Info11SerializeToEPPh+0x60>)
 8020f06:	4a14      	ldr	r2, [pc, #80]	; (8020f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f08:	2168      	movs	r1, #104	; 0x68
 8020f0a:	4814      	ldr	r0, [pc, #80]	; (8020f5c <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f0c:	f01c fabc 	bl	803d488 <__assert_func>
			assert(*ptr);
 8020f10:	683b      	ldr	r3, [r7, #0]
 8020f12:	681b      	ldr	r3, [r3, #0]
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d105      	bne.n	8020f24 <_ZN11QueueSender4Info11SerializeToEPPh+0x30>
 8020f18:	4b11      	ldr	r3, [pc, #68]	; (8020f60 <_ZN11QueueSender4Info11SerializeToEPPh+0x6c>)
 8020f1a:	4a0f      	ldr	r2, [pc, #60]	; (8020f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f1c:	2169      	movs	r1, #105	; 0x69
 8020f1e:	480f      	ldr	r0, [pc, #60]	; (8020f5c <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f20:	f01c fab2 	bl	803d488 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = NumRequests;
 8020f24:	683b      	ldr	r3, [r7, #0]
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	687a      	ldr	r2, [r7, #4]
 8020f2a:	8812      	ldrh	r2, [r2, #0]
 8020f2c:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f2e:	683b      	ldr	r3, [r7, #0]
 8020f30:	681b      	ldr	r3, [r3, #0]
 8020f32:	1c9a      	adds	r2, r3, #2
 8020f34:	683b      	ldr	r3, [r7, #0]
 8020f36:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumResponces;
 8020f38:	683b      	ldr	r3, [r7, #0]
 8020f3a:	681b      	ldr	r3, [r3, #0]
 8020f3c:	687a      	ldr	r2, [r7, #4]
 8020f3e:	8852      	ldrh	r2, [r2, #2]
 8020f40:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f42:	683b      	ldr	r3, [r7, #0]
 8020f44:	681b      	ldr	r3, [r3, #0]
 8020f46:	1c9a      	adds	r2, r3, #2
 8020f48:	683b      	ldr	r3, [r7, #0]
 8020f4a:	601a      	str	r2, [r3, #0]
		}
 8020f4c:	bf00      	nop
 8020f4e:	3708      	adds	r7, #8
 8020f50:	46bd      	mov	sp, r7
 8020f52:	bd80      	pop	{r7, pc}
 8020f54:	0803e6a8 	.word	0x0803e6a8
 8020f58:	0803e6ac 	.word	0x0803e6ac
 8020f5c:	0803e6dc 	.word	0x0803e6dc
 8020f60:	0803e6f8 	.word	0x0803e6f8

08020f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8020f64:	b580      	push	{r7, lr}
 8020f66:	b082      	sub	sp, #8
 8020f68:	af00      	add	r7, sp, #0
 8020f6a:	6078      	str	r0, [r7, #4]
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	4618      	mov	r0, r3
 8020f70:	f001 fd74 	bl	8022a5c <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	4618      	mov	r0, r3
 8020f78:	3708      	adds	r7, #8
 8020f7a:	46bd      	mov	sp, r7
 8020f7c:	bd80      	pop	{r7, pc}

08020f7e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8020f7e:	b580      	push	{r7, lr}
 8020f80:	b082      	sub	sp, #8
 8020f82:	af00      	add	r7, sp, #0
 8020f84:	6078      	str	r0, [r7, #4]
 8020f86:	687b      	ldr	r3, [r7, #4]
 8020f88:	4618      	mov	r0, r3
 8020f8a:	f001 fde0 	bl	8022b4e <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>
 8020f8e:	687b      	ldr	r3, [r7, #4]
 8020f90:	4618      	mov	r0, r3
 8020f92:	3708      	adds	r7, #8
 8020f94:	46bd      	mov	sp, r7
 8020f96:	bd80      	pop	{r7, pc}

08020f98 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8020f98:	b580      	push	{r7, lr}
 8020f9a:	b082      	sub	sp, #8
 8020f9c:	af00      	add	r7, sp, #0
 8020f9e:	6078      	str	r0, [r7, #4]
 8020fa0:	6878      	ldr	r0, [r7, #4]
 8020fa2:	f001 fe09 	bl	8022bb8 <_ZNSaIhED1Ev>
 8020fa6:	687b      	ldr	r3, [r7, #4]
 8020fa8:	4618      	mov	r0, r3
 8020faa:	3708      	adds	r7, #8
 8020fac:	46bd      	mov	sp, r7
 8020fae:	bd80      	pop	{r7, pc}

08020fb0 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8020fb0:	b580      	push	{r7, lr}
 8020fb2:	b082      	sub	sp, #8
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	6078      	str	r0, [r7, #4]
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	4618      	mov	r0, r3
 8020fbc:	f001 fdec 	bl	8022b98 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	4618      	mov	r0, r3
 8020fc4:	3708      	adds	r7, #8
 8020fc6:	46bd      	mov	sp, r7
 8020fc8:	bd80      	pop	{r7, pc}

08020fca <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8020fca:	b580      	push	{r7, lr}
 8020fcc:	b082      	sub	sp, #8
 8020fce:	af00      	add	r7, sp, #0
 8020fd0:	6078      	str	r0, [r7, #4]
 8020fd2:	687b      	ldr	r3, [r7, #4]
 8020fd4:	4618      	mov	r0, r3
 8020fd6:	f7ff ffeb 	bl	8020fb0 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8020fda:	687b      	ldr	r3, [r7, #4]
 8020fdc:	4618      	mov	r0, r3
 8020fde:	3708      	adds	r7, #8
 8020fe0:	46bd      	mov	sp, r7
 8020fe2:	bd80      	pop	{r7, pc}

08020fe4 <_ZN7RequestC1Ev>:
struct Request {
 8020fe4:	b580      	push	{r7, lr}
 8020fe6:	b082      	sub	sp, #8
 8020fe8:	af00      	add	r7, sp, #0
 8020fea:	6078      	str	r0, [r7, #4]
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	4618      	mov	r0, r3
 8020ff0:	f7ff ffeb 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	4618      	mov	r0, r3
 8020ff8:	3708      	adds	r7, #8
 8020ffa:	46bd      	mov	sp, r7
 8020ffc:	bd80      	pop	{r7, pc}

08020ffe <_ZN7RequestD1Ev>:
 8020ffe:	b580      	push	{r7, lr}
 8021000:	b082      	sub	sp, #8
 8021002:	af00      	add	r7, sp, #0
 8021004:	6078      	str	r0, [r7, #4]
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	4618      	mov	r0, r3
 802100a:	f001 fdf9 	bl	8022c00 <_ZNSt6vectorIhSaIhEED1Ev>
 802100e:	687b      	ldr	r3, [r7, #4]
 8021010:	4618      	mov	r0, r3
 8021012:	3708      	adds	r7, #8
 8021014:	46bd      	mov	sp, r7
 8021016:	bd80      	pop	{r7, pc}

08021018 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>:
	};

public:
	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS) :
 8021018:	b580      	push	{r7, lr}
 802101a:	b084      	sub	sp, #16
 802101c:	af00      	add	r7, sp, #0
 802101e:	60f8      	str	r0, [r7, #12]
 8021020:	60b9      	str	r1, [r7, #8]
 8021022:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8021024:	68fb      	ldr	r3, [r7, #12]
 8021026:	4618      	mov	r0, r3
 8021028:	f7ff ff9c 	bl	8020f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 802102c:	68fb      	ldr	r3, [r7, #12]
 802102e:	3328      	adds	r3, #40	; 0x28
 8021030:	4618      	mov	r0, r3
 8021032:	f001 fd78 	bl	8022b26 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8021036:	68fb      	ldr	r3, [r7, #12]
 8021038:	3350      	adds	r3, #80	; 0x50
 802103a:	4618      	mov	r0, r3
 802103c:	f7ff ffd2 	bl	8020fe4 <_ZN7RequestC1Ev>
 8021040:	68fb      	ldr	r3, [r7, #12]
 8021042:	2200      	movs	r2, #0
 8021044:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8021048:	68fb      	ldr	r3, [r7, #12]
 802104a:	2200      	movs	r2, #0
 802104c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8021050:	68fb      	ldr	r3, [r7, #12]
 8021052:	3368      	adds	r3, #104	; 0x68
 8021054:	4618      	mov	r0, r3
 8021056:	f7ff ffb8 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 802105a:	68fb      	ldr	r3, [r7, #12]
 802105c:	68ba      	ldr	r2, [r7, #8]
 802105e:	675a      	str	r2, [r3, #116]	; 0x74
 8021060:	68fb      	ldr	r3, [r7, #12]
 8021062:	687a      	ldr	r2, [r7, #4]
 8021064:	679a      	str	r2, [r3, #120]	; 0x78
 8021066:	68fb      	ldr	r3, [r7, #12]
 8021068:	2201      	movs	r2, #1
 802106a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 802106e:	68fb      	ldr	r3, [r7, #12]
 8021070:	2200      	movs	r2, #0
 8021072:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		assert(uart != NULL);
 8021076:	68bb      	ldr	r3, [r7, #8]
 8021078:	2b00      	cmp	r3, #0
 802107a:	d105      	bne.n	8021088 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x70>
 802107c:	4b05      	ldr	r3, [pc, #20]	; (8021094 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x7c>)
 802107e:	4a06      	ldr	r2, [pc, #24]	; (8021098 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x80>)
 8021080:	2178      	movs	r1, #120	; 0x78
 8021082:	4806      	ldr	r0, [pc, #24]	; (802109c <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x84>)
 8021084:	f01c fa00 	bl	803d488 <__assert_func>
	}
 8021088:	68fb      	ldr	r3, [r7, #12]
 802108a:	4618      	mov	r0, r3
 802108c:	3710      	adds	r7, #16
 802108e:	46bd      	mov	sp, r7
 8021090:	bd80      	pop	{r7, pc}
 8021092:	bf00      	nop
 8021094:	0803e700 	.word	0x0803e700
 8021098:	0803e710 	.word	0x0803e710
 802109c:	0803e6dc 	.word	0x0803e6dc

080210a0 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 80210a0:	b480      	push	{r7}
 80210a2:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 80210a4:	2301      	movs	r3, #1
 80210a6:	4618      	mov	r0, r3
 80210a8:	46bd      	mov	sp, r7
 80210aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ae:	4770      	bx	lr

080210b0 <_ZN7RequestaSEOS_>:
struct Request {
 80210b0:	b580      	push	{r7, lr}
 80210b2:	b082      	sub	sp, #8
 80210b4:	af00      	add	r7, sp, #0
 80210b6:	6078      	str	r0, [r7, #4]
 80210b8:	6039      	str	r1, [r7, #0]
 80210ba:	687b      	ldr	r3, [r7, #4]
 80210bc:	683a      	ldr	r2, [r7, #0]
 80210be:	4611      	mov	r1, r2
 80210c0:	4618      	mov	r0, r3
 80210c2:	f001 fdee 	bl	8022ca2 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 80210c6:	683b      	ldr	r3, [r7, #0]
 80210c8:	68da      	ldr	r2, [r3, #12]
 80210ca:	687b      	ldr	r3, [r7, #4]
 80210cc:	60da      	str	r2, [r3, #12]
 80210ce:	683b      	ldr	r3, [r7, #0]
 80210d0:	7c1a      	ldrb	r2, [r3, #16]
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	741a      	strb	r2, [r3, #16]
 80210d6:	683b      	ldr	r3, [r7, #0]
 80210d8:	7c5a      	ldrb	r2, [r3, #17]
 80210da:	687b      	ldr	r3, [r7, #4]
 80210dc:	745a      	strb	r2, [r3, #17]
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	4618      	mov	r0, r3
 80210e2:	3708      	adds	r7, #8
 80210e4:	46bd      	mov	sp, r7
 80210e6:	bd80      	pop	{r7, pc}

080210e8 <_ZN8ResponceD1Ev>:
struct Responce {
 80210e8:	b580      	push	{r7, lr}
 80210ea:	b082      	sub	sp, #8
 80210ec:	af00      	add	r7, sp, #0
 80210ee:	6078      	str	r0, [r7, #4]
 80210f0:	687b      	ldr	r3, [r7, #4]
 80210f2:	4618      	mov	r0, r3
 80210f4:	f001 fd84 	bl	8022c00 <_ZNSt6vectorIhSaIhEED1Ev>
 80210f8:	687b      	ldr	r3, [r7, #4]
 80210fa:	4618      	mov	r0, r3
 80210fc:	3708      	adds	r7, #8
 80210fe:	46bd      	mov	sp, r7
 8021100:	bd80      	pop	{r7, pc}

08021102 <_ZN11QueueSender10AddRequestEO7Request>:

	void AddRequest(Request &&request) {
 8021102:	b590      	push	{r4, r7, lr}
 8021104:	b087      	sub	sp, #28
 8021106:	af00      	add	r7, sp, #0
 8021108:	6078      	str	r0, [r7, #4]
 802110a:	6039      	str	r1, [r7, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 802110c:	683b      	ldr	r3, [r7, #0]
 802110e:	7c1b      	ldrb	r3, [r3, #16]
 8021110:	4618      	mov	r0, r3
 8021112:	f7ff fed7 	bl	8020ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021116:	4603      	mov	r3, r0
 8021118:	2b02      	cmp	r3, #2
 802111a:	d027      	beq.n	802116c <_ZN11QueueSender10AddRequestEO7Request+0x6a>
 802111c:	2b02      	cmp	r3, #2
 802111e:	dc3b      	bgt.n	8021198 <_ZN11QueueSender10AddRequestEO7Request+0x96>
 8021120:	2b00      	cmp	r3, #0
 8021122:	d00b      	beq.n	802113c <_ZN11QueueSender10AddRequestEO7Request+0x3a>
 8021124:	2b01      	cmp	r3, #1
 8021126:	d137      	bne.n	8021198 <_ZN11QueueSender10AddRequestEO7Request+0x96>
		case MessageMode::Async:
			Requests.emplace_back(std::move(request));
 8021128:	687c      	ldr	r4, [r7, #4]
 802112a:	6838      	ldr	r0, [r7, #0]
 802112c:	f001 fd83 	bl	8022c36 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8021130:	4603      	mov	r3, r0
 8021132:	4619      	mov	r1, r3
 8021134:	4620      	mov	r0, r4
 8021136:	f001 fd89 	bl	8022c4c <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
			break;
 802113a:	e02d      	b.n	8021198 <_ZN11QueueSender10AddRequestEO7Request+0x96>
		case MessageMode::Sync:
			if (!HasPriorityRequest) {
 802113c:	687b      	ldr	r3, [r7, #4]
 802113e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8021142:	f083 0301 	eor.w	r3, r3, #1
 8021146:	b2db      	uxtb	r3, r3
 8021148:	2b00      	cmp	r3, #0
 802114a:	d024      	beq.n	8021196 <_ZN11QueueSender10AddRequestEO7Request+0x94>
				PriorityRequest = std::move(request);
 802114c:	687b      	ldr	r3, [r7, #4]
 802114e:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8021152:	6838      	ldr	r0, [r7, #0]
 8021154:	f001 fd6f 	bl	8022c36 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8021158:	4603      	mov	r3, r0
 802115a:	4619      	mov	r1, r3
 802115c:	4620      	mov	r0, r4
 802115e:	f7ff ffa7 	bl	80210b0 <_ZN7RequestaSEOS_>
				HasPriorityRequest = true;
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	2201      	movs	r2, #1
 8021166:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			}
			break;
 802116a:	e014      	b.n	8021196 <_ZN11QueueSender10AddRequestEO7Request+0x94>

		case MessageMode::Info:
			Responces.emplace(CreateInfoResponce());
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8021172:	f107 0308 	add.w	r3, r7, #8
 8021176:	6879      	ldr	r1, [r7, #4]
 8021178:	4618      	mov	r0, r3
 802117a:	f000 fad7 	bl	802172c <_ZNK11QueueSender18CreateInfoResponceEv>
 802117e:	f107 0308 	add.w	r3, r7, #8
 8021182:	4619      	mov	r1, r3
 8021184:	4620      	mov	r0, r4
 8021186:	f001 fda1 	bl	8022ccc <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
 802118a:	f107 0308 	add.w	r3, r7, #8
 802118e:	4618      	mov	r0, r3
 8021190:	f7ff ffaa 	bl	80210e8 <_ZN8ResponceD1Ev>
			break;
 8021194:	e000      	b.n	8021198 <_ZN11QueueSender10AddRequestEO7Request+0x96>
			break;
 8021196:	bf00      	nop
		}
	}
 8021198:	bf00      	nop
 802119a:	371c      	adds	r7, #28
 802119c:	46bd      	mov	sp, r7
 802119e:	bd90      	pop	{r4, r7, pc}

080211a0 <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 80211a0:	b580      	push	{r7, lr}
 80211a2:	b082      	sub	sp, #8
 80211a4:	af00      	add	r7, sp, #0
 80211a6:	6078      	str	r0, [r7, #4]
		return !Responces.empty();
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	3328      	adds	r3, #40	; 0x28
 80211ac:	4618      	mov	r0, r3
 80211ae:	f001 fd9f 	bl	8022cf0 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>
 80211b2:	4603      	mov	r3, r0
 80211b4:	f083 0301 	eor.w	r3, r3, #1
 80211b8:	b2db      	uxtb	r3, r3
	}
 80211ba:	4618      	mov	r0, r3
 80211bc:	3708      	adds	r7, #8
 80211be:	46bd      	mov	sp, r7
 80211c0:	bd80      	pop	{r7, pc}

080211c2 <_ZN11QueueSender9TickTimerEv>:

	void TickTimer() {
 80211c2:	b480      	push	{r7}
 80211c4:	b083      	sub	sp, #12
 80211c6:	af00      	add	r7, sp, #0
 80211c8:	6078      	str	r0, [r7, #4]
		TimerReady = true;
 80211ca:	687b      	ldr	r3, [r7, #4]
 80211cc:	2201      	movs	r2, #1
 80211ce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	}
 80211d2:	bf00      	nop
 80211d4:	370c      	adds	r7, #12
 80211d6:	46bd      	mov	sp, r7
 80211d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211dc:	4770      	bx	lr

080211de <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 80211de:	b580      	push	{r7, lr}
 80211e0:	b082      	sub	sp, #8
 80211e2:	af00      	add	r7, sp, #0
 80211e4:	6078      	str	r0, [r7, #4]
 80211e6:	6039      	str	r1, [r7, #0]
 80211e8:	687b      	ldr	r3, [r7, #4]
 80211ea:	683a      	ldr	r2, [r7, #0]
 80211ec:	4611      	mov	r1, r2
 80211ee:	4618      	mov	r0, r3
 80211f0:	f001 fda3 	bl	8022d3a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 80211f4:	687b      	ldr	r3, [r7, #4]
 80211f6:	4618      	mov	r0, r3
 80211f8:	3708      	adds	r7, #8
 80211fa:	46bd      	mov	sp, r7
 80211fc:	bd80      	pop	{r7, pc}

080211fe <_ZNSt6vectorIhSaIhEEC1EOS1_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 80211fe:	b580      	push	{r7, lr}
 8021200:	b082      	sub	sp, #8
 8021202:	af00      	add	r7, sp, #0
 8021204:	6078      	str	r0, [r7, #4]
 8021206:	6039      	str	r1, [r7, #0]
 8021208:	687b      	ldr	r3, [r7, #4]
 802120a:	683a      	ldr	r2, [r7, #0]
 802120c:	4611      	mov	r1, r2
 802120e:	4618      	mov	r0, r3
 8021210:	f7ff ffe5 	bl	80211de <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 8021214:	687b      	ldr	r3, [r7, #4]
 8021216:	4618      	mov	r0, r3
 8021218:	3708      	adds	r7, #8
 802121a:	46bd      	mov	sp, r7
 802121c:	bd80      	pop	{r7, pc}

0802121e <_ZN8ResponceC1EOS_>:
struct Responce {
 802121e:	b580      	push	{r7, lr}
 8021220:	b082      	sub	sp, #8
 8021222:	af00      	add	r7, sp, #0
 8021224:	6078      	str	r0, [r7, #4]
 8021226:	6039      	str	r1, [r7, #0]
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	683a      	ldr	r2, [r7, #0]
 802122c:	4611      	mov	r1, r2
 802122e:	4618      	mov	r0, r3
 8021230:	f7ff ffe5 	bl	80211fe <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8021234:	683b      	ldr	r3, [r7, #0]
 8021236:	7b1a      	ldrb	r2, [r3, #12]
 8021238:	687b      	ldr	r3, [r7, #4]
 802123a:	731a      	strb	r2, [r3, #12]
 802123c:	683b      	ldr	r3, [r7, #0]
 802123e:	7b5a      	ldrb	r2, [r3, #13]
 8021240:	687b      	ldr	r3, [r7, #4]
 8021242:	735a      	strb	r2, [r3, #13]
 8021244:	683b      	ldr	r3, [r7, #0]
 8021246:	7b9a      	ldrb	r2, [r3, #14]
 8021248:	687b      	ldr	r3, [r7, #4]
 802124a:	739a      	strb	r2, [r3, #14]
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	4618      	mov	r0, r3
 8021250:	3708      	adds	r7, #8
 8021252:	46bd      	mov	sp, r7
 8021254:	bd80      	pop	{r7, pc}
	...

08021258 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 8021258:	b580      	push	{r7, lr}
 802125a:	b082      	sub	sp, #8
 802125c:	af00      	add	r7, sp, #0
 802125e:	6078      	str	r0, [r7, #4]
 8021260:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 8021262:	6838      	ldr	r0, [r7, #0]
 8021264:	f7ff ff9c 	bl	80211a0 <_ZNK11QueueSender11HasResponceEv>
 8021268:	4603      	mov	r3, r0
 802126a:	2b00      	cmp	r3, #0
 802126c:	d105      	bne.n	802127a <_ZN11QueueSender11GetResponceEv+0x22>
 802126e:	4b0f      	ldr	r3, [pc, #60]	; (80212ac <_ZN11QueueSender11GetResponceEv+0x54>)
 8021270:	4a0f      	ldr	r2, [pc, #60]	; (80212b0 <_ZN11QueueSender11GetResponceEv+0x58>)
 8021272:	2196      	movs	r1, #150	; 0x96
 8021274:	480f      	ldr	r0, [pc, #60]	; (80212b4 <_ZN11QueueSender11GetResponceEv+0x5c>)
 8021276:	f01c f907 	bl	803d488 <__assert_func>
		auto responce = std::move(Responces.front());
 802127a:	683b      	ldr	r3, [r7, #0]
 802127c:	3328      	adds	r3, #40	; 0x28
 802127e:	4618      	mov	r0, r3
 8021280:	f001 fd43 	bl	8022d0a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>
 8021284:	4603      	mov	r3, r0
 8021286:	4618      	mov	r0, r3
 8021288:	f001 fd4c 	bl	8022d24 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>
 802128c:	4603      	mov	r3, r0
 802128e:	4619      	mov	r1, r3
 8021290:	6878      	ldr	r0, [r7, #4]
 8021292:	f7ff ffc4 	bl	802121e <_ZN8ResponceC1EOS_>
		Responces.pop();
 8021296:	683b      	ldr	r3, [r7, #0]
 8021298:	3328      	adds	r3, #40	; 0x28
 802129a:	4618      	mov	r0, r3
 802129c:	f001 fd68 	bl	8022d70 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>
		return responce;
 80212a0:	bf00      	nop
	}
 80212a2:	6878      	ldr	r0, [r7, #4]
 80212a4:	3708      	adds	r7, #8
 80212a6:	46bd      	mov	sp, r7
 80212a8:	bd80      	pop	{r7, pc}
 80212aa:	bf00      	nop
 80212ac:	0803e748 	.word	0x0803e748
 80212b0:	0803e758 	.word	0x0803e758
 80212b4:	0803e6dc 	.word	0x0803e6dc

080212b8 <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 80212b8:	b5b0      	push	{r4, r5, r7, lr}
 80212ba:	b08e      	sub	sp, #56	; 0x38
 80212bc:	af02      	add	r7, sp, #8
 80212be:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80212c0:	b672      	cpsid	i
}
 80212c2:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce && TransmitComplete) {
 80212c4:	687b      	ldr	r3, [r7, #4]
 80212c6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	f000 8096 	beq.w	80213fc <_ZN11QueueSender22ProcessPriorityRequestEv+0x144>
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80212d6:	f083 0301 	eor.w	r3, r3, #1
 80212da:	b2db      	uxtb	r3, r3
 80212dc:	2b00      	cmp	r3, #0
 80212de:	f000 808d 	beq.w	80213fc <_ZN11QueueSender22ProcessPriorityRequestEv+0x144>
 80212e2:	687b      	ldr	r3, [r7, #4]
 80212e4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	f000 8087 	beq.w	80213fc <_ZN11QueueSender22ProcessPriorityRequestEv+0x144>
			HasPriorityRequest = false;
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	2200      	movs	r2, #0
 80212f2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			WaitResponce = true;
 80212f6:	687b      	ldr	r3, [r7, #4]
 80212f8:	2201      	movs	r2, #1
 80212fa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 80212fe:	b662      	cpsie	i
}
 8021300:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 8021302:	687b      	ldr	r3, [r7, #4]
 8021304:	3350      	adds	r3, #80	; 0x50
 8021306:	62fb      	str	r3, [r7, #44]	; 0x2c
			auto &data = request.Data;
 8021308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802130a:	62bb      	str	r3, [r7, #40]	; 0x28

			assert(
 802130c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802130e:	7c1b      	ldrb	r3, [r3, #16]
 8021310:	4618      	mov	r0, r3
 8021312:	f7ff fdd7 	bl	8020ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021316:	4603      	mov	r3, r0
 8021318:	2b00      	cmp	r3, #0
 802131a:	d005      	beq.n	8021328 <_ZN11QueueSender22ProcessPriorityRequestEv+0x70>
 802131c:	4b3a      	ldr	r3, [pc, #232]	; (8021408 <_ZN11QueueSender22ProcessPriorityRequestEv+0x150>)
 802131e:	4a3b      	ldr	r2, [pc, #236]	; (802140c <_ZN11QueueSender22ProcessPriorityRequestEv+0x154>)
 8021320:	21a6      	movs	r1, #166	; 0xa6
 8021322:	483b      	ldr	r0, [pc, #236]	; (8021410 <_ZN11QueueSender22ProcessPriorityRequestEv+0x158>)
 8021324:	f01c f8b0 	bl	803d488 <__assert_func>
  __ASM volatile ("cpsid i" : : : "memory");
 8021328:	b672      	cpsid	i
}
 802132a:	bf00      	nop
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Sync);
			__disable_irq();
			TransmitComplete = false;
 802132c:	687b      	ldr	r3, [r7, #4]
 802132e:	2200      	movs	r2, #0
 8021330:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  __ASM volatile ("cpsie i" : : : "memory");
 8021334:	b662      	cpsie	i
}
 8021336:	bf00      	nop
			__enable_irq();
			assert(
 8021338:	687b      	ldr	r3, [r7, #4]
 802133a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 802133c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802133e:	f001 fd23 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021342:	4605      	mov	r5, r0
 8021344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021346:	f001 fd2e 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802134a:	4603      	mov	r3, r0
 802134c:	b29b      	uxth	r3, r3
 802134e:	461a      	mov	r2, r3
 8021350:	4629      	mov	r1, r5
 8021352:	4620      	mov	r0, r4
 8021354:	f015 fa6c 	bl	8036830 <HAL_UART_Transmit_IT>
 8021358:	4603      	mov	r3, r0
 802135a:	2b00      	cmp	r3, #0
 802135c:	d005      	beq.n	802136a <_ZN11QueueSender22ProcessPriorityRequestEv+0xb2>
 802135e:	4b2d      	ldr	r3, [pc, #180]	; (8021414 <_ZN11QueueSender22ProcessPriorityRequestEv+0x15c>)
 8021360:	4a2a      	ldr	r2, [pc, #168]	; (802140c <_ZN11QueueSender22ProcessPriorityRequestEv+0x154>)
 8021362:	21ac      	movs	r1, #172	; 0xac
 8021364:	482a      	ldr	r0, [pc, #168]	; (8021410 <_ZN11QueueSender22ProcessPriorityRequestEv+0x158>)
 8021366:	f01c f88f 	bl	803d488 <__assert_func>
					HAL_UART_Transmit_IT(UartHandle, data.data(), data.size())
							== HAL_OK);


			while (!TransmitComplete)
 802136a:	687b      	ldr	r3, [r7, #4]
 802136c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8021370:	2b00      	cmp	r3, #0
 8021372:	d100      	bne.n	8021376 <_ZN11QueueSender22ProcessPriorityRequestEv+0xbe>
 8021374:	e7f9      	b.n	802136a <_ZN11QueueSender22ProcessPriorityRequestEv+0xb2>
				;

			ErrorCode::Type error = Receive(request.ResponceSize);
 8021376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021378:	68db      	ldr	r3, [r3, #12]
 802137a:	b2db      	uxtb	r3, r3
 802137c:	4619      	mov	r1, r3
 802137e:	6878      	ldr	r0, [r7, #4]
 8021380:	f000 f8fe 	bl	8021580 <_ZN11QueueSender7ReceiveEh>
 8021384:	4603      	mov	r3, r0
 8021386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (error == ErrorCode::NACK) {
 802138a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802138e:	2b02      	cmp	r3, #2
 8021390:	d115      	bne.n	80213be <_ZN11QueueSender22ProcessPriorityRequestEv+0x106>
				uint32_t delayMS = 5;
 8021392:	2305      	movs	r3, #5
 8021394:	623b      	str	r3, [r7, #32]
				HAL_Delay(delayMS);
 8021396:	6a38      	ldr	r0, [r7, #32]
 8021398:	f00b f808 	bl	802c3ac <HAL_Delay>

				uint8_t dummy;
				while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 802139c:	687b      	ldr	r3, [r7, #4]
 802139e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80213a0:	f107 010f 	add.w	r1, r7, #15
 80213a4:	2300      	movs	r3, #0
 80213a6:	2201      	movs	r2, #1
 80213a8:	f015 f96e 	bl	8036688 <HAL_UART_Receive>
 80213ac:	4603      	mov	r3, r0
 80213ae:	2b00      	cmp	r3, #0
 80213b0:	bf0c      	ite	eq
 80213b2:	2301      	moveq	r3, #1
 80213b4:	2300      	movne	r3, #0
 80213b6:	b2db      	uxtb	r3, r3
 80213b8:	2b00      	cmp	r3, #0
 80213ba:	d000      	beq.n	80213be <_ZN11QueueSender22ProcessPriorityRequestEv+0x106>
 80213bc:	e7ee      	b.n	802139c <_ZN11QueueSender22ProcessPriorityRequestEv+0xe4>
					;
			}

			Responces.emplace(
 80213be:	687b      	ldr	r3, [r7, #4]
 80213c0:	f103 0428 	add.w	r4, r3, #40	; 0x28
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync,
 80213c4:	687b      	ldr	r3, [r7, #4]
 80213c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80213ca:	f107 0010 	add.w	r0, r7, #16
 80213ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80213d2:	9300      	str	r3, [sp, #0]
 80213d4:	2300      	movs	r3, #0
 80213d6:	6879      	ldr	r1, [r7, #4]
 80213d8:	f000 f981 	bl	80216de <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
			Responces.emplace(
 80213dc:	f107 0310 	add.w	r3, r7, #16
 80213e0:	4619      	mov	r1, r3
 80213e2:	4620      	mov	r0, r4
 80213e4:	f001 fc72 	bl	8022ccc <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync,
 80213e8:	f107 0310 	add.w	r3, r7, #16
 80213ec:	4618      	mov	r0, r3
 80213ee:	f7ff fe7b 	bl	80210e8 <_ZN8ResponceD1Ev>
							error));

			WaitResponce = false;
 80213f2:	687b      	ldr	r3, [r7, #4]
 80213f4:	2200      	movs	r2, #0
 80213f6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80213fa:	e001      	b.n	8021400 <_ZN11QueueSender22ProcessPriorityRequestEv+0x148>
  __ASM volatile ("cpsie i" : : : "memory");
 80213fc:	b662      	cpsie	i
}
 80213fe:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 8021400:	bf00      	nop
 8021402:	3730      	adds	r7, #48	; 0x30
 8021404:	46bd      	mov	sp, r7
 8021406:	bdb0      	pop	{r4, r5, r7, pc}
 8021408:	0803e77c 	.word	0x0803e77c
 802140c:	0803e7bc 	.word	0x0803e7bc
 8021410:	0803e6dc 	.word	0x0803e6dc
 8021414:	0803e7e8 	.word	0x0803e7e8

08021418 <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 8021418:	b5b0      	push	{r4, r5, r7, lr}
 802141a:	b088      	sub	sp, #32
 802141c:	af00      	add	r7, sp, #0
 802141e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8021420:	b672      	cpsid	i
}
 8021422:	bf00      	nop
		__disable_irq();
		if (TimerReady && !Requests.empty() && !WaitResponce && TransmitComplete) {
 8021424:	687b      	ldr	r3, [r7, #4]
 8021426:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 802142a:	2b00      	cmp	r3, #0
 802142c:	d018      	beq.n	8021460 <_ZN11QueueSender15ProcessRequestsEv+0x48>
 802142e:	687b      	ldr	r3, [r7, #4]
 8021430:	4618      	mov	r0, r3
 8021432:	f001 fcc7 	bl	8022dc4 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8021436:	4603      	mov	r3, r0
 8021438:	f083 0301 	eor.w	r3, r3, #1
 802143c:	b2db      	uxtb	r3, r3
 802143e:	2b00      	cmp	r3, #0
 8021440:	d00e      	beq.n	8021460 <_ZN11QueueSender15ProcessRequestsEv+0x48>
 8021442:	687b      	ldr	r3, [r7, #4]
 8021444:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8021448:	f083 0301 	eor.w	r3, r3, #1
 802144c:	b2db      	uxtb	r3, r3
 802144e:	2b00      	cmp	r3, #0
 8021450:	d006      	beq.n	8021460 <_ZN11QueueSender15ProcessRequestsEv+0x48>
 8021452:	687b      	ldr	r3, [r7, #4]
 8021454:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8021458:	2b00      	cmp	r3, #0
 802145a:	d001      	beq.n	8021460 <_ZN11QueueSender15ProcessRequestsEv+0x48>
 802145c:	2301      	movs	r3, #1
 802145e:	e000      	b.n	8021462 <_ZN11QueueSender15ProcessRequestsEv+0x4a>
 8021460:	2300      	movs	r3, #0
 8021462:	2b00      	cmp	r3, #0
 8021464:	d07e      	beq.n	8021564 <_ZN11QueueSender15ProcessRequestsEv+0x14c>
			WaitResponce = true;
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	2201      	movs	r2, #1
 802146a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 802146e:	b662      	cpsie	i
}
 8021470:	bf00      	nop
			__enable_irq();

			auto &request = Requests.front();
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	4618      	mov	r0, r3
 8021476:	f001 fcb7 	bl	8022de8 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 802147a:	61b8      	str	r0, [r7, #24]
			auto &data = request.Data;
 802147c:	69bb      	ldr	r3, [r7, #24]
 802147e:	617b      	str	r3, [r7, #20]

			assert(
 8021480:	69bb      	ldr	r3, [r7, #24]
 8021482:	7c1b      	ldrb	r3, [r3, #16]
 8021484:	4618      	mov	r0, r3
 8021486:	f7ff fd1d 	bl	8020ec4 <_ZN11QueueSender11MessageMode11DeserializeEh>
 802148a:	4603      	mov	r3, r0
 802148c:	2b01      	cmp	r3, #1
 802148e:	d005      	beq.n	802149c <_ZN11QueueSender15ProcessRequestsEv+0x84>
 8021490:	4b37      	ldr	r3, [pc, #220]	; (8021570 <_ZN11QueueSender15ProcessRequestsEv+0x158>)
 8021492:	4a38      	ldr	r2, [pc, #224]	; (8021574 <_ZN11QueueSender15ProcessRequestsEv+0x15c>)
 8021494:	21d2      	movs	r1, #210	; 0xd2
 8021496:	4838      	ldr	r0, [pc, #224]	; (8021578 <_ZN11QueueSender15ProcessRequestsEv+0x160>)
 8021498:	f01b fff6 	bl	803d488 <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Async);

			const size_t nAttempts = 5;
 802149c:	2305      	movs	r3, #5
 802149e:	613b      	str	r3, [r7, #16]
			const uint32_t delayMS = 5;
 80214a0:	2305      	movs	r3, #5
 80214a2:	60fb      	str	r3, [r7, #12]
			size_t i = 0;
 80214a4:	2300      	movs	r3, #0
 80214a6:	61fb      	str	r3, [r7, #28]

			while (i++ < nAttempts) {
 80214a8:	69fb      	ldr	r3, [r7, #28]
 80214aa:	1c5a      	adds	r2, r3, #1
 80214ac:	61fa      	str	r2, [r7, #28]
 80214ae:	2b04      	cmp	r3, #4
 80214b0:	bf94      	ite	ls
 80214b2:	2301      	movls	r3, #1
 80214b4:	2300      	movhi	r3, #0
 80214b6:	b2db      	uxtb	r3, r3
 80214b8:	2b00      	cmp	r3, #0
 80214ba:	d046      	beq.n	802154a <_ZN11QueueSender15ProcessRequestsEv+0x132>

				TransmitComplete = false;
 80214bc:	687b      	ldr	r3, [r7, #4]
 80214be:	2200      	movs	r2, #0
 80214c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

				assert(
 80214c4:	687b      	ldr	r3, [r7, #4]
 80214c6:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 80214c8:	6978      	ldr	r0, [r7, #20]
 80214ca:	f001 fc5d 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 80214ce:	4605      	mov	r5, r0
 80214d0:	6978      	ldr	r0, [r7, #20]
 80214d2:	f001 fc68 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80214d6:	4603      	mov	r3, r0
 80214d8:	b29b      	uxth	r3, r3
 80214da:	461a      	mov	r2, r3
 80214dc:	4629      	mov	r1, r5
 80214de:	4620      	mov	r0, r4
 80214e0:	f015 f9a6 	bl	8036830 <HAL_UART_Transmit_IT>
 80214e4:	4603      	mov	r3, r0
 80214e6:	2b00      	cmp	r3, #0
 80214e8:	d005      	beq.n	80214f6 <_ZN11QueueSender15ProcessRequestsEv+0xde>
 80214ea:	4b24      	ldr	r3, [pc, #144]	; (802157c <_ZN11QueueSender15ProcessRequestsEv+0x164>)
 80214ec:	4a21      	ldr	r2, [pc, #132]	; (8021574 <_ZN11QueueSender15ProcessRequestsEv+0x15c>)
 80214ee:	21de      	movs	r1, #222	; 0xde
 80214f0:	4821      	ldr	r0, [pc, #132]	; (8021578 <_ZN11QueueSender15ProcessRequestsEv+0x160>)
 80214f2:	f01b ffc9 	bl	803d488 <__assert_func>
						HAL_UART_Transmit_IT(UartHandle, data.data(),
								data.size()) == HAL_OK);

				while (!TransmitComplete)
 80214f6:	687b      	ldr	r3, [r7, #4]
 80214f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	d100      	bne.n	8021502 <_ZN11QueueSender15ProcessRequestsEv+0xea>
 8021500:	e7f9      	b.n	80214f6 <_ZN11QueueSender15ProcessRequestsEv+0xde>
					;

				ErrorCode::Type error = Receive(request.ResponceSize);
 8021502:	69bb      	ldr	r3, [r7, #24]
 8021504:	68db      	ldr	r3, [r3, #12]
 8021506:	b2db      	uxtb	r3, r3
 8021508:	4619      	mov	r1, r3
 802150a:	6878      	ldr	r0, [r7, #4]
 802150c:	f000 f838 	bl	8021580 <_ZN11QueueSender7ReceiveEh>
 8021510:	4603      	mov	r3, r0
 8021512:	72fb      	strb	r3, [r7, #11]
				if (error == ErrorCode::Success)
 8021514:	7afb      	ldrb	r3, [r7, #11]
 8021516:	2b00      	cmp	r3, #0
 8021518:	d016      	beq.n	8021548 <_ZN11QueueSender15ProcessRequestsEv+0x130>
					break;
				HAL_Delay(delayMS);
 802151a:	2005      	movs	r0, #5
 802151c:	f00a ff46 	bl	802c3ac <HAL_Delay>
				if (error == ErrorCode::NACK) {
 8021520:	7afb      	ldrb	r3, [r7, #11]
 8021522:	2b02      	cmp	r3, #2
 8021524:	d1c0      	bne.n	80214a8 <_ZN11QueueSender15ProcessRequestsEv+0x90>
					uint8_t dummy;
					while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 8021526:	687b      	ldr	r3, [r7, #4]
 8021528:	6f58      	ldr	r0, [r3, #116]	; 0x74
 802152a:	f107 010a 	add.w	r1, r7, #10
 802152e:	2300      	movs	r3, #0
 8021530:	2201      	movs	r2, #1
 8021532:	f015 f8a9 	bl	8036688 <HAL_UART_Receive>
 8021536:	4603      	mov	r3, r0
 8021538:	2b00      	cmp	r3, #0
 802153a:	bf0c      	ite	eq
 802153c:	2301      	moveq	r3, #1
 802153e:	2300      	movne	r3, #0
 8021540:	b2db      	uxtb	r3, r3
 8021542:	2b00      	cmp	r3, #0
 8021544:	d0b0      	beq.n	80214a8 <_ZN11QueueSender15ProcessRequestsEv+0x90>
 8021546:	e7ee      	b.n	8021526 <_ZN11QueueSender15ProcessRequestsEv+0x10e>
					break;
 8021548:	bf00      	nop
									;
				}
			}

			Requests.pop_front();
 802154a:	687b      	ldr	r3, [r7, #4]
 802154c:	4618      	mov	r0, r3
 802154e:	f001 fc5f 	bl	8022e10 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
			WaitResponce = false;
 8021552:	687b      	ldr	r3, [r7, #4]
 8021554:	2200      	movs	r2, #0
 8021556:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			TimerReady = false;
 802155a:	687b      	ldr	r3, [r7, #4]
 802155c:	2200      	movs	r2, #0
 802155e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		} else {
			__enable_irq();
		}
	}
 8021562:	e001      	b.n	8021568 <_ZN11QueueSender15ProcessRequestsEv+0x150>
  __ASM volatile ("cpsie i" : : : "memory");
 8021564:	b662      	cpsie	i
}
 8021566:	bf00      	nop
 8021568:	bf00      	nop
 802156a:	3720      	adds	r7, #32
 802156c:	46bd      	mov	sp, r7
 802156e:	bdb0      	pop	{r4, r5, r7, pc}
 8021570:	0803e830 	.word	0x0803e830
 8021574:	0803e874 	.word	0x0803e874
 8021578:	0803e6dc 	.word	0x0803e6dc
 802157c:	0803e7e8 	.word	0x0803e7e8

08021580 <_ZN11QueueSender7ReceiveEh>:

	ErrorCode::Type Receive(uint8_t size) {
 8021580:	b590      	push	{r4, r7, lr}
 8021582:	b085      	sub	sp, #20
 8021584:	af00      	add	r7, sp, #0
 8021586:	6078      	str	r0, [r7, #4]
 8021588:	460b      	mov	r3, r1
 802158a:	70fb      	strb	r3, [r7, #3]
		assert(size >= 4);
 802158c:	78fb      	ldrb	r3, [r7, #3]
 802158e:	2b03      	cmp	r3, #3
 8021590:	d805      	bhi.n	802159e <_ZN11QueueSender7ReceiveEh+0x1e>
 8021592:	4b2f      	ldr	r3, [pc, #188]	; (8021650 <_ZN11QueueSender7ReceiveEh+0xd0>)
 8021594:	4a2f      	ldr	r2, [pc, #188]	; (8021654 <_ZN11QueueSender7ReceiveEh+0xd4>)
 8021596:	21f9      	movs	r1, #249	; 0xf9
 8021598:	482f      	ldr	r0, [pc, #188]	; (8021658 <_ZN11QueueSender7ReceiveEh+0xd8>)
 802159a:	f01b ff75 	bl	803d488 <__assert_func>
		CurrentResponceBuffer.resize(size);
 802159e:	687b      	ldr	r3, [r7, #4]
 80215a0:	3368      	adds	r3, #104	; 0x68
 80215a2:	78fa      	ldrb	r2, [r7, #3]
 80215a4:	4611      	mov	r1, r2
 80215a6:	4618      	mov	r0, r3
 80215a8:	f001 fc56 	bl	8022e58 <_ZNSt6vectorIhSaIhEE6resizeEj>

		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	3368      	adds	r3, #104	; 0x68
 80215b4:	4618      	mov	r0, r3
 80215b6:	f001 fbe7 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 80215ba:	4601      	mov	r1, r0
				TimeoutS);
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 80215c0:	2204      	movs	r2, #4
 80215c2:	4620      	mov	r0, r4
 80215c4:	f015 f860 	bl	8036688 <HAL_UART_Receive>
 80215c8:	4603      	mov	r3, r0
 80215ca:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 80215cc:	7bfb      	ldrb	r3, [r7, #15]
 80215ce:	2b03      	cmp	r3, #3
 80215d0:	d101      	bne.n	80215d6 <_ZN11QueueSender7ReceiveEh+0x56>
			return ErrorCode::Timeout;
 80215d2:	2301      	movs	r3, #1
 80215d4:	e037      	b.n	8021646 <_ZN11QueueSender7ReceiveEh+0xc6>

		if (IsNack(CurrentResponceBuffer.data()))
 80215d6:	687b      	ldr	r3, [r7, #4]
 80215d8:	3368      	adds	r3, #104	; 0x68
 80215da:	4618      	mov	r0, r3
 80215dc:	f001 fbd4 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 80215e0:	4603      	mov	r3, r0
 80215e2:	4619      	mov	r1, r3
 80215e4:	6878      	ldr	r0, [r7, #4]
 80215e6:	f000 f839 	bl	802165c <_ZN11QueueSender6IsNackEPKh>
 80215ea:	4603      	mov	r3, r0
 80215ec:	2b00      	cmp	r3, #0
 80215ee:	d001      	beq.n	80215f4 <_ZN11QueueSender7ReceiveEh+0x74>
			return ErrorCode::NACK;
 80215f0:	2302      	movs	r3, #2
 80215f2:	e028      	b.n	8021646 <_ZN11QueueSender7ReceiveEh+0xc6>

		if (ret != HAL_OK)
 80215f4:	7bfb      	ldrb	r3, [r7, #15]
 80215f6:	2b00      	cmp	r3, #0
 80215f8:	d001      	beq.n	80215fe <_ZN11QueueSender7ReceiveEh+0x7e>
			return ErrorCode::Unknown;
 80215fa:	2303      	movs	r3, #3
 80215fc:	e023      	b.n	8021646 <_ZN11QueueSender7ReceiveEh+0xc6>

		if (size == 4)
 80215fe:	78fb      	ldrb	r3, [r7, #3]
 8021600:	2b04      	cmp	r3, #4
 8021602:	d101      	bne.n	8021608 <_ZN11QueueSender7ReceiveEh+0x88>
			return ErrorCode::Success;
 8021604:	2300      	movs	r3, #0
 8021606:	e01e      	b.n	8021646 <_ZN11QueueSender7ReceiveEh+0xc6>

		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 8021608:	687b      	ldr	r3, [r7, #4]
 802160a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 802160c:	687b      	ldr	r3, [r7, #4]
 802160e:	3368      	adds	r3, #104	; 0x68
 8021610:	4618      	mov	r0, r3
 8021612:	f001 fbb9 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021616:	4603      	mov	r3, r0
 8021618:	1d19      	adds	r1, r3, #4
 802161a:	78fb      	ldrb	r3, [r7, #3]
 802161c:	b29b      	uxth	r3, r3
 802161e:	3b04      	subs	r3, #4
 8021620:	b29a      	uxth	r2, r3
				size - 4, TimeoutS);
 8021622:	687b      	ldr	r3, [r7, #4]
 8021624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 8021626:	4620      	mov	r0, r4
 8021628:	f015 f82e 	bl	8036688 <HAL_UART_Receive>
 802162c:	4603      	mov	r3, r0
 802162e:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 8021630:	7bfb      	ldrb	r3, [r7, #15]
 8021632:	2b03      	cmp	r3, #3
 8021634:	d101      	bne.n	802163a <_ZN11QueueSender7ReceiveEh+0xba>
			return ErrorCode::Timeout;
 8021636:	2301      	movs	r3, #1
 8021638:	e005      	b.n	8021646 <_ZN11QueueSender7ReceiveEh+0xc6>

		if (ret != HAL_OK)
 802163a:	7bfb      	ldrb	r3, [r7, #15]
 802163c:	2b00      	cmp	r3, #0
 802163e:	d001      	beq.n	8021644 <_ZN11QueueSender7ReceiveEh+0xc4>
			return ErrorCode::Unknown;
 8021640:	2303      	movs	r3, #3
 8021642:	e000      	b.n	8021646 <_ZN11QueueSender7ReceiveEh+0xc6>

		return ErrorCode::Success;
 8021644:	2300      	movs	r3, #0
	}
 8021646:	4618      	mov	r0, r3
 8021648:	3714      	adds	r7, #20
 802164a:	46bd      	mov	sp, r7
 802164c:	bd90      	pop	{r4, r7, pc}
 802164e:	bf00      	nop
 8021650:	0803e898 	.word	0x0803e898
 8021654:	0803e8a4 	.word	0x0803e8a4
 8021658:	0803e6dc 	.word	0x0803e6dc

0802165c <_ZN11QueueSender6IsNackEPKh>:

	bool IsNack(const uint8_t *data) {
 802165c:	b580      	push	{r7, lr}
 802165e:	b084      	sub	sp, #16
 8021660:	af00      	add	r7, sp, #0
 8021662:	6078      	str	r0, [r7, #4]
 8021664:	6039      	str	r1, [r7, #0]
		assert(data);
 8021666:	683b      	ldr	r3, [r7, #0]
 8021668:	2b00      	cmp	r3, #0
 802166a:	d106      	bne.n	802167a <_ZN11QueueSender6IsNackEPKh+0x1e>
 802166c:	4b11      	ldr	r3, [pc, #68]	; (80216b4 <_ZN11QueueSender6IsNackEPKh+0x58>)
 802166e:	4a12      	ldr	r2, [pc, #72]	; (80216b8 <_ZN11QueueSender6IsNackEPKh+0x5c>)
 8021670:	f44f 718c 	mov.w	r1, #280	; 0x118
 8021674:	4811      	ldr	r0, [pc, #68]	; (80216bc <_ZN11QueueSender6IsNackEPKh+0x60>)
 8021676:	f01b ff07 	bl	803d488 <__assert_func>
		uint8_t kondoNACK[4] = { 0x4, 0xFE, 0x15, 0x17 };
 802167a:	4b11      	ldr	r3, [pc, #68]	; (80216c0 <_ZN11QueueSender6IsNackEPKh+0x64>)
 802167c:	60bb      	str	r3, [r7, #8]

		for (int i = 0; i < 4; ++i)
 802167e:	2300      	movs	r3, #0
 8021680:	60fb      	str	r3, [r7, #12]
 8021682:	68fb      	ldr	r3, [r7, #12]
 8021684:	2b03      	cmp	r3, #3
 8021686:	dc10      	bgt.n	80216aa <_ZN11QueueSender6IsNackEPKh+0x4e>
			if (data[i] != kondoNACK[i])
 8021688:	68fb      	ldr	r3, [r7, #12]
 802168a:	683a      	ldr	r2, [r7, #0]
 802168c:	4413      	add	r3, r2
 802168e:	781a      	ldrb	r2, [r3, #0]
 8021690:	f107 0108 	add.w	r1, r7, #8
 8021694:	68fb      	ldr	r3, [r7, #12]
 8021696:	440b      	add	r3, r1
 8021698:	781b      	ldrb	r3, [r3, #0]
 802169a:	429a      	cmp	r2, r3
 802169c:	d001      	beq.n	80216a2 <_ZN11QueueSender6IsNackEPKh+0x46>
				return false;
 802169e:	2300      	movs	r3, #0
 80216a0:	e004      	b.n	80216ac <_ZN11QueueSender6IsNackEPKh+0x50>
		for (int i = 0; i < 4; ++i)
 80216a2:	68fb      	ldr	r3, [r7, #12]
 80216a4:	3301      	adds	r3, #1
 80216a6:	60fb      	str	r3, [r7, #12]
 80216a8:	e7eb      	b.n	8021682 <_ZN11QueueSender6IsNackEPKh+0x26>

		return true;
 80216aa:	2301      	movs	r3, #1
	}
 80216ac:	4618      	mov	r0, r3
 80216ae:	3710      	adds	r7, #16
 80216b0:	46bd      	mov	sp, r7
 80216b2:	bd80      	pop	{r7, pc}
 80216b4:	0803e8e0 	.word	0x0803e8e0
 80216b8:	0803e8e8 	.word	0x0803e8e8
 80216bc:	0803e6dc 	.word	0x0803e6dc
 80216c0:	1715fe04 	.word	0x1715fe04

080216c4 <_ZN8ResponceC1Ev>:
struct Responce {
 80216c4:	b580      	push	{r7, lr}
 80216c6:	b082      	sub	sp, #8
 80216c8:	af00      	add	r7, sp, #0
 80216ca:	6078      	str	r0, [r7, #4]
 80216cc:	687b      	ldr	r3, [r7, #4]
 80216ce:	4618      	mov	r0, r3
 80216d0:	f7ff fc7b 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 80216d4:	687b      	ldr	r3, [r7, #4]
 80216d6:	4618      	mov	r0, r3
 80216d8:	3708      	adds	r7, #8
 80216da:	46bd      	mov	sp, r7
 80216dc:	bd80      	pop	{r7, pc}

080216de <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>:

	Responce CreateResponce(const std::vector<uint8_t> &data,
 80216de:	b580      	push	{r7, lr}
 80216e0:	b084      	sub	sp, #16
 80216e2:	af00      	add	r7, sp, #0
 80216e4:	60f8      	str	r0, [r7, #12]
 80216e6:	60b9      	str	r1, [r7, #8]
 80216e8:	607a      	str	r2, [r7, #4]
 80216ea:	70fb      	strb	r3, [r7, #3]
			MessageMode::Type messageMode, ErrorCode::Type error) const {
		Responce responce;
 80216ec:	68f8      	ldr	r0, [r7, #12]
 80216ee:	f7ff ffe9 	bl	80216c4 <_ZN8ResponceC1Ev>
		responce.Data = data;
 80216f2:	68fb      	ldr	r3, [r7, #12]
 80216f4:	6879      	ldr	r1, [r7, #4]
 80216f6:	4618      	mov	r0, r3
 80216f8:	f001 fbea 	bl	8022ed0 <_ZNSt6vectorIhSaIhEEaSERKS1_>
		responce.PeripheryID = Periphery::Body;
 80216fc:	68fb      	ldr	r3, [r7, #12]
 80216fe:	2200      	movs	r2, #0
 8021700:	731a      	strb	r2, [r3, #12]
		responce.Error = ErrorCode::Serialize(error);
 8021702:	7e3b      	ldrb	r3, [r7, #24]
 8021704:	4618      	mov	r0, r3
 8021706:	f7ff fbe9 	bl	8020edc <_ZN11QueueSender9ErrorCode9SerializeEh>
 802170a:	4603      	mov	r3, r0
 802170c:	461a      	mov	r2, r3
 802170e:	68fb      	ldr	r3, [r7, #12]
 8021710:	739a      	strb	r2, [r3, #14]
		responce.MetaInfo = MessageMode::Serialize(messageMode);
 8021712:	78fb      	ldrb	r3, [r7, #3]
 8021714:	4618      	mov	r0, r3
 8021716:	f7ff fbc9 	bl	8020eac <_ZN11QueueSender11MessageMode9SerializeEh>
 802171a:	4603      	mov	r3, r0
 802171c:	461a      	mov	r2, r3
 802171e:	68fb      	ldr	r3, [r7, #12]
 8021720:	735a      	strb	r2, [r3, #13]
		return responce;
 8021722:	bf00      	nop
	}
 8021724:	68f8      	ldr	r0, [r7, #12]
 8021726:	3710      	adds	r7, #16
 8021728:	46bd      	mov	sp, r7
 802172a:	bd80      	pop	{r7, pc}

0802172c <_ZNK11QueueSender18CreateInfoResponceEv>:

	Responce CreateInfoResponce() const {
 802172c:	b580      	push	{r7, lr}
 802172e:	b08a      	sub	sp, #40	; 0x28
 8021730:	af02      	add	r7, sp, #8
 8021732:	6078      	str	r0, [r7, #4]
 8021734:	6039      	str	r1, [r7, #0]
		std::vector<uint8_t> data;
 8021736:	f107 0310 	add.w	r3, r7, #16
 802173a:	4618      	mov	r0, r3
 802173c:	f7ff fc45 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
		data.resize(Info::Size);
 8021740:	f107 0310 	add.w	r3, r7, #16
 8021744:	2104      	movs	r1, #4
 8021746:	4618      	mov	r0, r3
 8021748:	f001 fb86 	bl	8022e58 <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = data.data();
 802174c:	f107 0310 	add.w	r3, r7, #16
 8021750:	4618      	mov	r0, r3
 8021752:	f001 fb19 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021756:	4603      	mov	r3, r0
 8021758:	60fb      	str	r3, [r7, #12]
		GetInfo().SerializeTo(&ptr);
 802175a:	6838      	ldr	r0, [r7, #0]
 802175c:	f000 f835 	bl	80217ca <_ZNK11QueueSender7GetInfoEv>
 8021760:	4603      	mov	r3, r0
 8021762:	61fb      	str	r3, [r7, #28]
 8021764:	f107 020c 	add.w	r2, r7, #12
 8021768:	f107 031c 	add.w	r3, r7, #28
 802176c:	4611      	mov	r1, r2
 802176e:	4618      	mov	r0, r3
 8021770:	f7ff fbc0 	bl	8020ef4 <_ZN11QueueSender4Info11SerializeToEPPh>

		return CreateResponce(data, MessageMode::Info, ErrorCode::Success);
 8021774:	6878      	ldr	r0, [r7, #4]
 8021776:	f107 0210 	add.w	r2, r7, #16
 802177a:	2300      	movs	r3, #0
 802177c:	9300      	str	r3, [sp, #0]
 802177e:	2302      	movs	r3, #2
 8021780:	6839      	ldr	r1, [r7, #0]
 8021782:	f7ff ffac 	bl	80216de <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
		std::vector<uint8_t> data;
 8021786:	f107 0310 	add.w	r3, r7, #16
 802178a:	4618      	mov	r0, r3
 802178c:	f001 fa38 	bl	8022c00 <_ZNSt6vectorIhSaIhEED1Ev>
		return CreateResponce(data, MessageMode::Info, ErrorCode::Success);
 8021790:	bf00      	nop
	}
 8021792:	6878      	ldr	r0, [r7, #4]
 8021794:	3720      	adds	r7, #32
 8021796:	46bd      	mov	sp, r7
 8021798:	bd80      	pop	{r7, pc}

0802179a <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 802179a:	b480      	push	{r7}
 802179c:	b083      	sub	sp, #12
 802179e:	af00      	add	r7, sp, #0
 80217a0:	6078      	str	r0, [r7, #4]
		//WaitResponce = false;
	}
 80217a2:	bf00      	nop
 80217a4:	370c      	adds	r7, #12
 80217a6:	46bd      	mov	sp, r7
 80217a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217ac:	4770      	bx	lr

080217ae <_ZN11QueueSender14FinishTransmitEv>:

	void FinishTransmit() {
 80217ae:	b480      	push	{r7}
 80217b0:	b083      	sub	sp, #12
 80217b2:	af00      	add	r7, sp, #0
 80217b4:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 80217b6:	687b      	ldr	r3, [r7, #4]
 80217b8:	2201      	movs	r2, #1
 80217ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	}
 80217be:	bf00      	nop
 80217c0:	370c      	adds	r7, #12
 80217c2:	46bd      	mov	sp, r7
 80217c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217c8:	4770      	bx	lr

080217ca <_ZNK11QueueSender7GetInfoEv>:

	Info GetInfo() const {
 80217ca:	b580      	push	{r7, lr}
 80217cc:	b084      	sub	sp, #16
 80217ce:	af00      	add	r7, sp, #0
 80217d0:	6078      	str	r0, [r7, #4]
		return {Requests.size(), Responces.size()};
 80217d2:	687b      	ldr	r3, [r7, #4]
 80217d4:	4618      	mov	r0, r3
 80217d6:	f001 fc6a 	bl	80230ae <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 80217da:	4603      	mov	r3, r0
 80217dc:	b29b      	uxth	r3, r3
 80217de:	81bb      	strh	r3, [r7, #12]
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	3328      	adds	r3, #40	; 0x28
 80217e4:	4618      	mov	r0, r3
 80217e6:	f001 fc74 	bl	80230d2 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE4sizeEv>
 80217ea:	4603      	mov	r3, r0
 80217ec:	b29b      	uxth	r3, r3
 80217ee:	81fb      	strh	r3, [r7, #14]
 80217f0:	2300      	movs	r3, #0
 80217f2:	89ba      	ldrh	r2, [r7, #12]
 80217f4:	f362 030f 	bfi	r3, r2, #0, #16
 80217f8:	89fa      	ldrh	r2, [r7, #14]
 80217fa:	f362 431f 	bfi	r3, r2, #16, #16
	}
 80217fe:	4618      	mov	r0, r3
 8021800:	3710      	adds	r7, #16
 8021802:	46bd      	mov	sp, r7
 8021804:	bd80      	pop	{r7, pc}

08021806 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>:
 8021806:	b580      	push	{r7, lr}
 8021808:	b082      	sub	sp, #8
 802180a:	af00      	add	r7, sp, #0
 802180c:	6078      	str	r0, [r7, #4]
 802180e:	687b      	ldr	r3, [r7, #4]
 8021810:	4618      	mov	r0, r3
 8021812:	f001 f956 	bl	8022ac2 <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 8021816:	687b      	ldr	r3, [r7, #4]
 8021818:	4618      	mov	r0, r3
 802181a:	3708      	adds	r7, #8
 802181c:	46bd      	mov	sp, r7
 802181e:	bd80      	pop	{r7, pc}

08021820 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;

	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 8021820:	b580      	push	{r7, lr}
 8021822:	b084      	sub	sp, #16
 8021824:	af00      	add	r7, sp, #0
 8021826:	60f8      	str	r0, [r7, #12]
 8021828:	60b9      	str	r1, [r7, #8]
 802182a:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 802182c:	68fb      	ldr	r3, [r7, #12]
 802182e:	4618      	mov	r0, r3
 8021830:	f001 fc5c 	bl	80230ec <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8021834:	68fb      	ldr	r3, [r7, #12]
 8021836:	3334      	adds	r3, #52	; 0x34
 8021838:	4618      	mov	r0, r3
 802183a:	f7ff fbd3 	bl	8020fe4 <_ZN7RequestC1Ev>
 802183e:	68fb      	ldr	r3, [r7, #12]
 8021840:	3348      	adds	r3, #72	; 0x48
 8021842:	4618      	mov	r0, r3
 8021844:	f7ff fbc1 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 8021848:	68fb      	ldr	r3, [r7, #12]
 802184a:	68ba      	ldr	r2, [r7, #8]
 802184c:	655a      	str	r2, [r3, #84]	; 0x54
 802184e:	68fb      	ldr	r3, [r7, #12]
 8021850:	687a      	ldr	r2, [r7, #4]
 8021852:	659a      	str	r2, [r3, #88]	; 0x58
 8021854:	68fb      	ldr	r3, [r7, #12]
 8021856:	2201      	movs	r2, #1
 8021858:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		assert(uart != NULL);
 802185c:	68bb      	ldr	r3, [r7, #8]
 802185e:	2b00      	cmp	r3, #0
 8021860:	d106      	bne.n	8021870 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>
 8021862:	4b06      	ldr	r3, [pc, #24]	; (802187c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x5c>)
 8021864:	4a06      	ldr	r2, [pc, #24]	; (8021880 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x60>)
 8021866:	f44f 71b0 	mov.w	r1, #352	; 0x160
 802186a:	4806      	ldr	r0, [pc, #24]	; (8021884 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x64>)
 802186c:	f01b fe0c 	bl	803d488 <__assert_func>
	}
 8021870:	68fb      	ldr	r3, [r7, #12]
 8021872:	4618      	mov	r0, r3
 8021874:	3710      	adds	r7, #16
 8021876:	46bd      	mov	sp, r7
 8021878:	bd80      	pop	{r7, pc}
 802187a:	bf00      	nop
 802187c:	0803e700 	.word	0x0803e700
 8021880:	0803e914 	.word	0x0803e914
 8021884:	0803e6dc 	.word	0x0803e6dc

08021888 <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 8021888:	b580      	push	{r7, lr}
 802188a:	b082      	sub	sp, #8
 802188c:	af00      	add	r7, sp, #0
 802188e:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8021890:	687b      	ldr	r3, [r7, #4]
 8021892:	2200      	movs	r2, #0
 8021894:	631a      	str	r2, [r3, #48]	; 0x30
		assert(HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1) == HAL_OK);
 8021896:	687b      	ldr	r3, [r7, #4]
 8021898:	6d58      	ldr	r0, [r3, #84]	; 0x54
 802189a:	687b      	ldr	r3, [r7, #4]
 802189c:	3328      	adds	r3, #40	; 0x28
 802189e:	2201      	movs	r2, #1
 80218a0:	4619      	mov	r1, r3
 80218a2:	f015 f86d 	bl	8036980 <HAL_UART_Receive_IT>
 80218a6:	4603      	mov	r3, r0
 80218a8:	2b00      	cmp	r3, #0
 80218aa:	d006      	beq.n	80218ba <_ZN13HeadInterface14ResetReadStateEv+0x32>
 80218ac:	4b05      	ldr	r3, [pc, #20]	; (80218c4 <_ZN13HeadInterface14ResetReadStateEv+0x3c>)
 80218ae:	4a06      	ldr	r2, [pc, #24]	; (80218c8 <_ZN13HeadInterface14ResetReadStateEv+0x40>)
 80218b0:	f240 1165 	movw	r1, #357	; 0x165
 80218b4:	4805      	ldr	r0, [pc, #20]	; (80218cc <_ZN13HeadInterface14ResetReadStateEv+0x44>)
 80218b6:	f01b fde7 	bl	803d488 <__assert_func>
	}
 80218ba:	bf00      	nop
 80218bc:	3708      	adds	r7, #8
 80218be:	46bd      	mov	sp, r7
 80218c0:	bd80      	pop	{r7, pc}
 80218c2:	bf00      	nop
 80218c4:	0803e950 	.word	0x0803e950
 80218c8:	0803e98c 	.word	0x0803e98c
 80218cc:	0803e6dc 	.word	0x0803e6dc

080218d0 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 80218d0:	b580      	push	{r7, lr}
 80218d2:	b082      	sub	sp, #8
 80218d4:	af00      	add	r7, sp, #0
 80218d6:	6078      	str	r0, [r7, #4]
		return !Requests.empty();
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	4618      	mov	r0, r3
 80218dc:	f001 fc1a 	bl	8023114 <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>
 80218e0:	4603      	mov	r3, r0
 80218e2:	f083 0301 	eor.w	r3, r3, #1
 80218e6:	b2db      	uxtb	r3, r3
	}
 80218e8:	4618      	mov	r0, r3
 80218ea:	3708      	adds	r7, #8
 80218ec:	46bd      	mov	sp, r7
 80218ee:	bd80      	pop	{r7, pc}

080218f0 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 80218f0:	b590      	push	{r4, r7, lr}
 80218f2:	b097      	sub	sp, #92	; 0x5c
 80218f4:	af00      	add	r7, sp, #0
 80218f6:	6078      	str	r0, [r7, #4]
 80218f8:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 80218fa:	687b      	ldr	r3, [r7, #4]
 80218fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8021900:	2b00      	cmp	r3, #0
 8021902:	d100      	bne.n	8021906 <_ZN13HeadInterface4SendERK8Responce+0x16>
 8021904:	e7f9      	b.n	80218fa <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		size_t size = responce.Data.size() + 3 + 3;
 8021906:	683b      	ldr	r3, [r7, #0]
 8021908:	4618      	mov	r0, r3
 802190a:	f001 fa4c 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802190e:	4603      	mov	r3, r0
 8021910:	3306      	adds	r3, #6
 8021912:	657b      	str	r3, [r7, #84]	; 0x54
		CurrentResponceBuffer.resize(size);
 8021914:	687b      	ldr	r3, [r7, #4]
 8021916:	3348      	adds	r3, #72	; 0x48
 8021918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802191a:	4618      	mov	r0, r3
 802191c:	f001 fa9c 	bl	8022e58 <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = CurrentResponceBuffer.data();
 8021920:	687b      	ldr	r3, [r7, #4]
 8021922:	3348      	adds	r3, #72	; 0x48
 8021924:	4618      	mov	r0, r3
 8021926:	f001 fa2f 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 802192a:	6538      	str	r0, [r7, #80]	; 0x50

		*(ptr++) = SOM1Val;
 802192c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802192e:	1c5a      	adds	r2, r3, #1
 8021930:	653a      	str	r2, [r7, #80]	; 0x50
 8021932:	22ff      	movs	r2, #255	; 0xff
 8021934:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8021936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021938:	1c5a      	adds	r2, r3, #1
 802193a:	653a      	str	r2, [r7, #80]	; 0x50
 802193c:	22aa      	movs	r2, #170	; 0xaa
 802193e:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 8021940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021942:	1c5a      	adds	r2, r3, #1
 8021944:	653a      	str	r2, [r7, #80]	; 0x50
 8021946:	683a      	ldr	r2, [r7, #0]
 8021948:	7b12      	ldrb	r2, [r2, #12]
 802194a:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 802194c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802194e:	1c5a      	adds	r2, r3, #1
 8021950:	653a      	str	r2, [r7, #80]	; 0x50
 8021952:	683a      	ldr	r2, [r7, #0]
 8021954:	7b52      	ldrb	r2, [r2, #13]
 8021956:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 8021958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802195a:	1c5a      	adds	r2, r3, #1
 802195c:	653a      	str	r2, [r7, #80]	; 0x50
 802195e:	683a      	ldr	r2, [r7, #0]
 8021960:	7b92      	ldrb	r2, [r2, #14]
 8021962:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.Data.size());
 8021964:	683b      	ldr	r3, [r7, #0]
 8021966:	4618      	mov	r0, r3
 8021968:	f001 fbe1 	bl	802312e <_ZNKSt6vectorIhSaIhEE4dataEv>
 802196c:	4604      	mov	r4, r0
 802196e:	683b      	ldr	r3, [r7, #0]
 8021970:	4618      	mov	r0, r3
 8021972:	f001 fa18 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021976:	4603      	mov	r3, r0
 8021978:	461a      	mov	r2, r3
 802197a:	4621      	mov	r1, r4
 802197c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 802197e:	f01b fded 	bl	803d55c <memcpy>

		ptr += responce.Data.size();
 8021982:	683b      	ldr	r3, [r7, #0]
 8021984:	4618      	mov	r0, r3
 8021986:	f001 fa0e 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802198a:	4602      	mov	r2, r0
 802198c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802198e:	4413      	add	r3, r2
 8021990:	653b      	str	r3, [r7, #80]	; 0x50

		*ptr = SOM3Val;
 8021992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021994:	22af      	movs	r2, #175	; 0xaf
 8021996:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 8021998:	687b      	ldr	r3, [r7, #4]
 802199a:	2200      	movs	r2, #0
 802199c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		size_t sz = CurrentResponceBuffer.size();
 80219a0:	687b      	ldr	r3, [r7, #4]
 80219a2:	3348      	adds	r3, #72	; 0x48
 80219a4:	4618      	mov	r0, r3
 80219a6:	f001 f9fe 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80219aa:	64f8      	str	r0, [r7, #76]	; 0x4c

		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 80219ac:	687b      	ldr	r3, [r7, #4]
 80219ae:	3348      	adds	r3, #72	; 0x48
 80219b0:	4618      	mov	r0, r3
 80219b2:	f001 f9e9 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 80219b6:	4601      	mov	r1, r0
 80219b8:	f107 030c 	add.w	r3, r7, #12
 80219bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80219be:	4618      	mov	r0, r3
 80219c0:	f01b fdcc 	bl	803d55c <memcpy>

		assert(
 80219c4:	687b      	ldr	r3, [r7, #4]
 80219c6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80219c8:	687b      	ldr	r3, [r7, #4]
 80219ca:	3348      	adds	r3, #72	; 0x48
 80219cc:	4618      	mov	r0, r3
 80219ce:	f001 f9db 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 80219d2:	4601      	mov	r1, r0
 80219d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80219d6:	b29b      	uxth	r3, r3
 80219d8:	461a      	mov	r2, r3
 80219da:	4620      	mov	r0, r4
 80219dc:	f014 ff28 	bl	8036830 <HAL_UART_Transmit_IT>
 80219e0:	4603      	mov	r3, r0
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	d006      	beq.n	80219f4 <_ZN13HeadInterface4SendERK8Responce+0x104>
 80219e6:	4b05      	ldr	r3, [pc, #20]	; (80219fc <_ZN13HeadInterface4SendERK8Responce+0x10c>)
 80219e8:	4a05      	ldr	r2, [pc, #20]	; (8021a00 <_ZN13HeadInterface4SendERK8Responce+0x110>)
 80219ea:	f240 118b 	movw	r1, #395	; 0x18b
 80219ee:	4805      	ldr	r0, [pc, #20]	; (8021a04 <_ZN13HeadInterface4SendERK8Responce+0x114>)
 80219f0:	f01b fd4a 	bl	803d488 <__assert_func>
				HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(),
						sz) == HAL_OK);
	}
 80219f4:	bf00      	nop
 80219f6:	375c      	adds	r7, #92	; 0x5c
 80219f8:	46bd      	mov	sp, r7
 80219fa:	bd90      	pop	{r4, r7, pc}
 80219fc:	0803e9b4 	.word	0x0803e9b4
 8021a00:	0803ea04 	.word	0x0803ea04
 8021a04:	0803e6dc 	.word	0x0803e6dc

08021a08 <_ZN7RequestC1EOS_>:
struct Request {
 8021a08:	b580      	push	{r7, lr}
 8021a0a:	b082      	sub	sp, #8
 8021a0c:	af00      	add	r7, sp, #0
 8021a0e:	6078      	str	r0, [r7, #4]
 8021a10:	6039      	str	r1, [r7, #0]
 8021a12:	687b      	ldr	r3, [r7, #4]
 8021a14:	683a      	ldr	r2, [r7, #0]
 8021a16:	4611      	mov	r1, r2
 8021a18:	4618      	mov	r0, r3
 8021a1a:	f7ff fbf0 	bl	80211fe <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8021a1e:	683b      	ldr	r3, [r7, #0]
 8021a20:	68da      	ldr	r2, [r3, #12]
 8021a22:	687b      	ldr	r3, [r7, #4]
 8021a24:	60da      	str	r2, [r3, #12]
 8021a26:	683b      	ldr	r3, [r7, #0]
 8021a28:	7c1a      	ldrb	r2, [r3, #16]
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	741a      	strb	r2, [r3, #16]
 8021a2e:	683b      	ldr	r3, [r7, #0]
 8021a30:	7c5a      	ldrb	r2, [r3, #17]
 8021a32:	687b      	ldr	r3, [r7, #4]
 8021a34:	745a      	strb	r2, [r3, #17]
 8021a36:	687b      	ldr	r3, [r7, #4]
 8021a38:	4618      	mov	r0, r3
 8021a3a:	3708      	adds	r7, #8
 8021a3c:	46bd      	mov	sp, r7
 8021a3e:	bd80      	pop	{r7, pc}

08021a40 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 8021a40:	b580      	push	{r7, lr}
 8021a42:	b082      	sub	sp, #8
 8021a44:	af00      	add	r7, sp, #0
 8021a46:	6078      	str	r0, [r7, #4]
 8021a48:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 8021a4a:	6838      	ldr	r0, [r7, #0]
 8021a4c:	f7ff ff40 	bl	80218d0 <_ZNK13HeadInterface10HasRequestEv>
 8021a50:	4603      	mov	r3, r0
 8021a52:	2b00      	cmp	r3, #0
 8021a54:	d106      	bne.n	8021a64 <_ZN13HeadInterface10GetRequestEv+0x24>
 8021a56:	4b0e      	ldr	r3, [pc, #56]	; (8021a90 <_ZN13HeadInterface10GetRequestEv+0x50>)
 8021a58:	4a0e      	ldr	r2, [pc, #56]	; (8021a94 <_ZN13HeadInterface10GetRequestEv+0x54>)
 8021a5a:	f240 1191 	movw	r1, #401	; 0x191
 8021a5e:	480e      	ldr	r0, [pc, #56]	; (8021a98 <_ZN13HeadInterface10GetRequestEv+0x58>)
 8021a60:	f01b fd12 	bl	803d488 <__assert_func>
		auto request = std::move(Requests.front());
 8021a64:	683b      	ldr	r3, [r7, #0]
 8021a66:	4618      	mov	r0, r3
 8021a68:	f001 fb70 	bl	802314c <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>
 8021a6c:	4603      	mov	r3, r0
 8021a6e:	4618      	mov	r0, r3
 8021a70:	f001 f8e1 	bl	8022c36 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8021a74:	4603      	mov	r3, r0
 8021a76:	4619      	mov	r1, r3
 8021a78:	6878      	ldr	r0, [r7, #4]
 8021a7a:	f7ff ffc5 	bl	8021a08 <_ZN7RequestC1EOS_>
		Requests.pop();
 8021a7e:	683b      	ldr	r3, [r7, #0]
 8021a80:	4618      	mov	r0, r3
 8021a82:	f001 fb70 	bl	8023166 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>
		return request;
 8021a86:	bf00      	nop
	}
 8021a88:	6878      	ldr	r0, [r7, #4]
 8021a8a:	3708      	adds	r7, #8
 8021a8c:	46bd      	mov	sp, r7
 8021a8e:	bd80      	pop	{r7, pc}
 8021a90:	0803ea30 	.word	0x0803ea30
 8021a94:	0803ea40 	.word	0x0803ea40
 8021a98:	0803e6dc 	.word	0x0803e6dc

08021a9c <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8021a9c:	b480      	push	{r7}
 8021a9e:	b083      	sub	sp, #12
 8021aa0:	af00      	add	r7, sp, #0
 8021aa2:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	2201      	movs	r2, #1
 8021aa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
 8021aac:	bf00      	nop
 8021aae:	370c      	adds	r7, #12
 8021ab0:	46bd      	mov	sp, r7
 8021ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ab6:	4770      	bx	lr

08021ab8 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8021ab8:	b590      	push	{r4, r7, lr}
 8021aba:	b089      	sub	sp, #36	; 0x24
 8021abc:	af00      	add	r7, sp, #0
 8021abe:	6078      	str	r0, [r7, #4]
		switch (CurrentState) {
 8021ac0:	687b      	ldr	r3, [r7, #4]
 8021ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ac4:	2b07      	cmp	r3, #7
 8021ac6:	f200 80d6 	bhi.w	8021c76 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1be>
 8021aca:	a201      	add	r2, pc, #4	; (adr r2, 8021ad0 <_ZN13HeadInterface19ProcessRecievedDataEv+0x18>)
 8021acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021ad0:	08021af1 	.word	0x08021af1
 8021ad4:	08021b1b 	.word	0x08021b1b
 8021ad8:	08021b45 	.word	0x08021b45
 8021adc:	08021b69 	.word	0x08021b69
 8021ae0:	08021b9f 	.word	0x08021b9f
 8021ae4:	08021bc3 	.word	0x08021bc3
 8021ae8:	08021bf5 	.word	0x08021bf5
 8021aec:	08021c0d 	.word	0x08021c0d
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 8021af0:	687b      	ldr	r3, [r7, #4]
 8021af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021af6:	2bff      	cmp	r3, #255	; 0xff
 8021af8:	d10b      	bne.n	8021b12 <_ZN13HeadInterface19ProcessRecievedDataEv+0x5a>
				CurrentState = ReadState::SOM2;
 8021afa:	687b      	ldr	r3, [r7, #4]
 8021afc:	2201      	movs	r2, #1
 8021afe:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021b00:	687b      	ldr	r3, [r7, #4]
 8021b02:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021b04:	687b      	ldr	r3, [r7, #4]
 8021b06:	3328      	adds	r3, #40	; 0x28
 8021b08:	2201      	movs	r2, #1
 8021b0a:	4619      	mov	r1, r3
 8021b0c:	f014 ff38 	bl	8036980 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021b10:	e0b5      	b.n	8021c7e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8021b12:	6878      	ldr	r0, [r7, #4]
 8021b14:	f7ff feb8 	bl	8021888 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021b18:	e0b1      	b.n	8021c7e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 8021b1a:	687b      	ldr	r3, [r7, #4]
 8021b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021b20:	2baa      	cmp	r3, #170	; 0xaa
 8021b22:	d10b      	bne.n	8021b3c <_ZN13HeadInterface19ProcessRecievedDataEv+0x84>
				CurrentState = ReadState::PERIPHERY_ID;
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	2202      	movs	r2, #2
 8021b28:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	3328      	adds	r3, #40	; 0x28
 8021b32:	2201      	movs	r2, #1
 8021b34:	4619      	mov	r1, r3
 8021b36:	f014 ff23 	bl	8036980 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021b3a:	e0a0      	b.n	8021c7e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8021b3c:	6878      	ldr	r0, [r7, #4]
 8021b3e:	f7ff fea3 	bl	8021888 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021b42:	e09c      	b.n	8021c7e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8021b44:	687b      	ldr	r3, [r7, #4]
 8021b46:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8021b4a:	687b      	ldr	r3, [r7, #4]
 8021b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			CurrentState = ReadState::REQUEST_SIZE;
 8021b50:	687b      	ldr	r3, [r7, #4]
 8021b52:	2203      	movs	r2, #3
 8021b54:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021b5a:	687b      	ldr	r3, [r7, #4]
 8021b5c:	3328      	adds	r3, #40	; 0x28
 8021b5e:	2201      	movs	r2, #1
 8021b60:	4619      	mov	r1, r3
 8021b62:	f014 ff0d 	bl	8036980 <HAL_UART_Receive_IT>
			break;
 8021b66:	e08a      	b.n	8021c7e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::REQUEST_SIZE: {
			RequestSize = CurrentValue;
 8021b68:	687b      	ldr	r3, [r7, #4]
 8021b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021b6e:	461a      	mov	r2, r3
 8021b70:	687b      	ldr	r3, [r7, #4]
 8021b72:	62da      	str	r2, [r3, #44]	; 0x2c
			CurrentRequest.Data.resize(RequestSize);
 8021b74:	687b      	ldr	r3, [r7, #4]
 8021b76:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8021b7a:	687b      	ldr	r3, [r7, #4]
 8021b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b7e:	4619      	mov	r1, r3
 8021b80:	4610      	mov	r0, r2
 8021b82:	f001 f969 	bl	8022e58 <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentState = ReadState::RESPONCE_SIZE;
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	2204      	movs	r2, #4
 8021b8a:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021b8c:	687b      	ldr	r3, [r7, #4]
 8021b8e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021b90:	687b      	ldr	r3, [r7, #4]
 8021b92:	3328      	adds	r3, #40	; 0x28
 8021b94:	2201      	movs	r2, #1
 8021b96:	4619      	mov	r1, r3
 8021b98:	f014 fef2 	bl	8036980 <HAL_UART_Receive_IT>
			break;
 8021b9c:	e06f      	b.n	8021c7e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 8021b9e:	687b      	ldr	r3, [r7, #4]
 8021ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021ba4:	461a      	mov	r2, r3
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	641a      	str	r2, [r3, #64]	; 0x40
			CurrentState = ReadState::META;
 8021baa:	687b      	ldr	r3, [r7, #4]
 8021bac:	2205      	movs	r2, #5
 8021bae:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021bb0:	687b      	ldr	r3, [r7, #4]
 8021bb2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021bb4:	687b      	ldr	r3, [r7, #4]
 8021bb6:	3328      	adds	r3, #40	; 0x28
 8021bb8:	2201      	movs	r2, #1
 8021bba:	4619      	mov	r1, r3
 8021bbc:	f014 fee0 	bl	8036980 <HAL_UART_Receive_IT>
			break;
 8021bc0:	e05d      	b.n	8021c7e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8021bc8:	687b      	ldr	r3, [r7, #4]
 8021bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			CurrentState = ReadState::DATA;
 8021bce:	687b      	ldr	r3, [r7, #4]
 8021bd0:	2206      	movs	r2, #6
 8021bd2:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8021bd4:	687b      	ldr	r3, [r7, #4]
 8021bd6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	3334      	adds	r3, #52	; 0x34
 8021bdc:	4618      	mov	r0, r3
 8021bde:	f001 f8d3 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021be2:	4601      	mov	r1, r0
					RequestSize);
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8021be8:	b29b      	uxth	r3, r3
 8021bea:	461a      	mov	r2, r3
 8021bec:	4620      	mov	r0, r4
 8021bee:	f014 fec7 	bl	8036980 <HAL_UART_Receive_IT>
			break;
 8021bf2:	e044      	b.n	8021c7e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 8021bf4:	687b      	ldr	r3, [r7, #4]
 8021bf6:	2207      	movs	r2, #7
 8021bf8:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021bfa:	687b      	ldr	r3, [r7, #4]
 8021bfc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	3328      	adds	r3, #40	; 0x28
 8021c02:	2201      	movs	r2, #1
 8021c04:	4619      	mov	r1, r3
 8021c06:	f014 febb 	bl	8036980 <HAL_UART_Receive_IT>
			break;
 8021c0a:	e038      	b.n	8021c7e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021c12:	2baf      	cmp	r3, #175	; 0xaf
 8021c14:	d12b      	bne.n	8021c6e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b6>
				Requests.emplace(std::move(CurrentRequest));
 8021c16:	687c      	ldr	r4, [r7, #4]
 8021c18:	687b      	ldr	r3, [r7, #4]
 8021c1a:	3334      	adds	r3, #52	; 0x34
 8021c1c:	4618      	mov	r0, r3
 8021c1e:	f001 f80a 	bl	8022c36 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8021c22:	4603      	mov	r3, r0
 8021c24:	4619      	mov	r1, r3
 8021c26:	4620      	mov	r0, r4
 8021c28:	f001 faa9 	bl	802317e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
				CurrentRequest = { };
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8021c32:	f107 030c 	add.w	r3, r7, #12
 8021c36:	2200      	movs	r2, #0
 8021c38:	601a      	str	r2, [r3, #0]
 8021c3a:	605a      	str	r2, [r3, #4]
 8021c3c:	609a      	str	r2, [r3, #8]
 8021c3e:	60da      	str	r2, [r3, #12]
 8021c40:	611a      	str	r2, [r3, #16]
 8021c42:	2300      	movs	r3, #0
 8021c44:	60fb      	str	r3, [r7, #12]
 8021c46:	2300      	movs	r3, #0
 8021c48:	613b      	str	r3, [r7, #16]
 8021c4a:	2300      	movs	r3, #0
 8021c4c:	617b      	str	r3, [r7, #20]
 8021c4e:	f107 030c 	add.w	r3, r7, #12
 8021c52:	4618      	mov	r0, r3
 8021c54:	f7ff f9b9 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 8021c58:	f107 030c 	add.w	r3, r7, #12
 8021c5c:	4619      	mov	r1, r3
 8021c5e:	4620      	mov	r0, r4
 8021c60:	f7ff fa26 	bl	80210b0 <_ZN7RequestaSEOS_>
 8021c64:	f107 030c 	add.w	r3, r7, #12
 8021c68:	4618      	mov	r0, r3
 8021c6a:	f7ff f9c8 	bl	8020ffe <_ZN7RequestD1Ev>
			}
			ResetReadState();
 8021c6e:	6878      	ldr	r0, [r7, #4]
 8021c70:	f7ff fe0a 	bl	8021888 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021c74:	e003      	b.n	8021c7e <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		default:
			ResetReadState();
 8021c76:	6878      	ldr	r0, [r7, #4]
 8021c78:	f7ff fe06 	bl	8021888 <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 8021c7c:	bf00      	nop
 8021c7e:	bf00      	nop
 8021c80:	3724      	adds	r7, #36	; 0x24
 8021c82:	46bd      	mov	sp, r7
 8021c84:	bd90      	pop	{r4, r7, pc}
 8021c86:	bf00      	nop

08021c88 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>:
		uint16_t NumAv;
		uint16_t MaxFrames;

		static constexpr size_t Size = 3 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8021c88:	b580      	push	{r7, lr}
 8021c8a:	b082      	sub	sp, #8
 8021c8c:	af00      	add	r7, sp, #0
 8021c8e:	6078      	str	r0, [r7, #4]
 8021c90:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8021c92:	683b      	ldr	r3, [r7, #0]
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	d106      	bne.n	8021ca6 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x1e>
 8021c98:	4b19      	ldr	r3, [pc, #100]	; (8021d00 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x78>)
 8021c9a:	4a1a      	ldr	r2, [pc, #104]	; (8021d04 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8021c9c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8021ca0:	4819      	ldr	r0, [pc, #100]	; (8021d08 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8021ca2:	f01b fbf1 	bl	803d488 <__assert_func>
			assert(*ptr);
 8021ca6:	683b      	ldr	r3, [r7, #0]
 8021ca8:	681b      	ldr	r3, [r3, #0]
 8021caa:	2b00      	cmp	r3, #0
 8021cac:	d106      	bne.n	8021cbc <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x34>
 8021cae:	4b17      	ldr	r3, [pc, #92]	; (8021d0c <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x84>)
 8021cb0:	4a14      	ldr	r2, [pc, #80]	; (8021d04 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8021cb2:	f240 11eb 	movw	r1, #491	; 0x1eb
 8021cb6:	4814      	ldr	r0, [pc, #80]	; (8021d08 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8021cb8:	f01b fbe6 	bl	803d488 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = First;
 8021cbc:	683b      	ldr	r3, [r7, #0]
 8021cbe:	681b      	ldr	r3, [r3, #0]
 8021cc0:	687a      	ldr	r2, [r7, #4]
 8021cc2:	8812      	ldrh	r2, [r2, #0]
 8021cc4:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021cc6:	683b      	ldr	r3, [r7, #0]
 8021cc8:	681b      	ldr	r3, [r3, #0]
 8021cca:	1c9a      	adds	r2, r3, #2
 8021ccc:	683b      	ldr	r3, [r7, #0]
 8021cce:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 8021cd0:	683b      	ldr	r3, [r7, #0]
 8021cd2:	681b      	ldr	r3, [r3, #0]
 8021cd4:	687a      	ldr	r2, [r7, #4]
 8021cd6:	8852      	ldrh	r2, [r2, #2]
 8021cd8:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021cda:	683b      	ldr	r3, [r7, #0]
 8021cdc:	681b      	ldr	r3, [r3, #0]
 8021cde:	1c9a      	adds	r2, r3, #2
 8021ce0:	683b      	ldr	r3, [r7, #0]
 8021ce2:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 8021ce4:	683b      	ldr	r3, [r7, #0]
 8021ce6:	681b      	ldr	r3, [r3, #0]
 8021ce8:	687a      	ldr	r2, [r7, #4]
 8021cea:	8892      	ldrh	r2, [r2, #4]
 8021cec:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021cee:	683b      	ldr	r3, [r7, #0]
 8021cf0:	681b      	ldr	r3, [r3, #0]
 8021cf2:	1c9a      	adds	r2, r3, #2
 8021cf4:	683b      	ldr	r3, [r7, #0]
 8021cf6:	601a      	str	r2, [r3, #0]
		}
 8021cf8:	bf00      	nop
 8021cfa:	3708      	adds	r7, #8
 8021cfc:	46bd      	mov	sp, r7
 8021cfe:	bd80      	pop	{r7, pc}
 8021d00:	0803e6a8 	.word	0x0803e6a8
 8021d04:	0803ea64 	.word	0x0803ea64
 8021d08:	0803e6dc 	.word	0x0803e6dc
 8021d0c:	0803e6f8 	.word	0x0803e6f8

08021d10 <_ZN17IMUFrameContainer5ResetEv>:
	};

public:
	void Reset() {
 8021d10:	b580      	push	{r7, lr}
 8021d12:	b084      	sub	sp, #16
 8021d14:	af00      	add	r7, sp, #0
 8021d16:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 8021d18:	6878      	ldr	r0, [r7, #4]
 8021d1a:	2300      	movs	r3, #0
 8021d1c:	60bb      	str	r3, [r7, #8]
 8021d1e:	2300      	movs	r3, #0
 8021d20:	60fb      	str	r3, [r7, #12]
 8021d22:	f107 0308 	add.w	r3, r7, #8
 8021d26:	e893 0006 	ldmia.w	r3, {r1, r2}
 8021d2a:	f001 fa3a 	bl	80231a2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>
		FirstSeq = 0;
 8021d2e:	687b      	ldr	r3, [r7, #4]
 8021d30:	2200      	movs	r2, #0
 8021d32:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8021d34:	bf00      	nop
 8021d36:	3710      	adds	r7, #16
 8021d38:	46bd      	mov	sp, r7
 8021d3a:	bd80      	pop	{r7, pc}

08021d3c <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 8021d3c:	b580      	push	{r7, lr}
 8021d3e:	b082      	sub	sp, #8
 8021d40:	af00      	add	r7, sp, #0
 8021d42:	6078      	str	r0, [r7, #4]
 8021d44:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	6839      	ldr	r1, [r7, #0]
 8021d4a:	4618      	mov	r0, r3
 8021d4c:	f001 fa44 	bl	80231d8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>
		if (FrameQueue.size() > MaxFrames)
 8021d50:	687b      	ldr	r3, [r7, #4]
 8021d52:	4618      	mov	r0, r3
 8021d54:	f001 fa62 	bl	802321c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021d58:	4602      	mov	r2, r0
 8021d5a:	687b      	ldr	r3, [r7, #4]
 8021d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d5e:	429a      	cmp	r2, r3
 8021d60:	bf8c      	ite	hi
 8021d62:	2301      	movhi	r3, #1
 8021d64:	2300      	movls	r3, #0
 8021d66:	b2db      	uxtb	r3, r3
 8021d68:	2b00      	cmp	r3, #0
 8021d6a:	d002      	beq.n	8021d72 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE+0x36>
			Remove();
 8021d6c:	6878      	ldr	r0, [r7, #4]
 8021d6e:	f000 f804 	bl	8021d7a <_ZN17IMUFrameContainer6RemoveEv>
	}
 8021d72:	bf00      	nop
 8021d74:	3708      	adds	r7, #8
 8021d76:	46bd      	mov	sp, r7
 8021d78:	bd80      	pop	{r7, pc}

08021d7a <_ZN17IMUFrameContainer6RemoveEv>:

	void Remove() {
 8021d7a:	b580      	push	{r7, lr}
 8021d7c:	b082      	sub	sp, #8
 8021d7e:	af00      	add	r7, sp, #0
 8021d80:	6078      	str	r0, [r7, #4]
		FrameQueue.pop_back();
 8021d82:	687b      	ldr	r3, [r7, #4]
 8021d84:	4618      	mov	r0, r3
 8021d86:	f001 fa5b 	bl	8023240 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
		FirstSeq++;
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021d8e:	1c5a      	adds	r2, r3, #1
 8021d90:	687b      	ldr	r3, [r7, #4]
 8021d92:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8021d94:	bf00      	nop
 8021d96:	3708      	adds	r7, #8
 8021d98:	46bd      	mov	sp, r7
 8021d9a:	bd80      	pop	{r7, pc}

08021d9c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 8021d9c:	b5b0      	push	{r4, r5, r7, lr}
 8021d9e:	b08a      	sub	sp, #40	; 0x28
 8021da0:	af00      	add	r7, sp, #0
 8021da2:	60f8      	str	r0, [r7, #12]
 8021da4:	60b9      	str	r1, [r7, #8]
 8021da6:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8021da8:	68fb      	ldr	r3, [r7, #12]
 8021daa:	4618      	mov	r0, r3
 8021dac:	f001 fa6b 	bl	8023286 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8021db0:	4603      	mov	r3, r0
 8021db2:	2b00      	cmp	r3, #0
 8021db4:	d001      	beq.n	8021dba <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 8021db6:	2300      	movs	r3, #0
 8021db8:	e038      	b.n	8021e2c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 8021dba:	68fb      	ldr	r3, [r7, #12]
 8021dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021dbe:	68ba      	ldr	r2, [r7, #8]
 8021dc0:	429a      	cmp	r2, r3
 8021dc2:	d30b      	bcc.n	8021ddc <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 8021dc4:	68fb      	ldr	r3, [r7, #12]
 8021dc6:	4618      	mov	r0, r3
 8021dc8:	f001 fa28 	bl	802321c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021dcc:	4602      	mov	r2, r0
 8021dce:	68fb      	ldr	r3, [r7, #12]
 8021dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021dd2:	4413      	add	r3, r2
 8021dd4:	3b01      	subs	r3, #1
 8021dd6:	68ba      	ldr	r2, [r7, #8]
 8021dd8:	429a      	cmp	r2, r3
 8021dda:	d901      	bls.n	8021de0 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 8021ddc:	2301      	movs	r3, #1
 8021dde:	e000      	b.n	8021de2 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 8021de0:	2300      	movs	r3, #0
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	d001      	beq.n	8021dea <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 8021de6:	2300      	movs	r3, #0
 8021de8:	e020      	b.n	8021e2c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 8021dea:	68fc      	ldr	r4, [r7, #12]
 8021dec:	68fb      	ldr	r3, [r7, #12]
 8021dee:	4618      	mov	r0, r3
 8021df0:	f001 fa14 	bl	802321c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021df4:	4601      	mov	r1, r0
 8021df6:	68fb      	ldr	r3, [r7, #12]
 8021df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021dfa:	68bb      	ldr	r3, [r7, #8]
 8021dfc:	1ad3      	subs	r3, r2, r3
 8021dfe:	440b      	add	r3, r1
 8021e00:	3b01      	subs	r3, #1
 8021e02:	4619      	mov	r1, r3
 8021e04:	4620      	mov	r0, r4
 8021e06:	f001 fa50 	bl	80232aa <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8021e0a:	4603      	mov	r3, r0
 8021e0c:	f107 0414 	add.w	r4, r7, #20
 8021e10:	461d      	mov	r5, r3
 8021e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021e16:	682b      	ldr	r3, [r5, #0]
 8021e18:	6023      	str	r3, [r4, #0]
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 8021e1a:	687b      	ldr	r3, [r7, #4]
 8021e1c:	461d      	mov	r5, r3
 8021e1e:	f107 0414 	add.w	r4, r7, #20
 8021e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021e26:	6823      	ldr	r3, [r4, #0]
 8021e28:	602b      	str	r3, [r5, #0]
		return true;
 8021e2a:	2301      	movs	r3, #1
	}
 8021e2c:	4618      	mov	r0, r3
 8021e2e:	3728      	adds	r7, #40	; 0x28
 8021e30:	46bd      	mov	sp, r7
 8021e32:	bdb0      	pop	{r4, r5, r7, pc}

08021e34 <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 8021e34:	b580      	push	{r7, lr}
 8021e36:	b082      	sub	sp, #8
 8021e38:	af00      	add	r7, sp, #0
 8021e3a:	6078      	str	r0, [r7, #4]
 8021e3c:	6039      	str	r1, [r7, #0]
		return {FirstSeq, FrameQueue.size(), MaxFrames};
 8021e3e:	683b      	ldr	r3, [r7, #0]
 8021e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e42:	b29a      	uxth	r2, r3
 8021e44:	687b      	ldr	r3, [r7, #4]
 8021e46:	801a      	strh	r2, [r3, #0]
 8021e48:	683b      	ldr	r3, [r7, #0]
 8021e4a:	4618      	mov	r0, r3
 8021e4c:	f001 f9e6 	bl	802321c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021e50:	4603      	mov	r3, r0
 8021e52:	b29a      	uxth	r2, r3
 8021e54:	687b      	ldr	r3, [r7, #4]
 8021e56:	805a      	strh	r2, [r3, #2]
 8021e58:	683b      	ldr	r3, [r7, #0]
 8021e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e5c:	b29a      	uxth	r2, r3
 8021e5e:	687b      	ldr	r3, [r7, #4]
 8021e60:	809a      	strh	r2, [r3, #4]
	}
 8021e62:	6878      	ldr	r0, [r7, #4]
 8021e64:	3708      	adds	r7, #8
 8021e66:	46bd      	mov	sp, r7
 8021e68:	bd80      	pop	{r7, pc}

08021e6a <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type FrameBySeq = 0;
		static constexpr Type Info = 1;
		static constexpr Type LatestFrame = 2;
		static constexpr Type Reset = 3;

		static uint8_t Serialize(Type mode) {
 8021e6a:	b480      	push	{r7}
 8021e6c:	b083      	sub	sp, #12
 8021e6e:	af00      	add	r7, sp, #0
 8021e70:	4603      	mov	r3, r0
 8021e72:	71fb      	strb	r3, [r7, #7]
			return mode;
 8021e74:	79fb      	ldrb	r3, [r7, #7]
		}
 8021e76:	4618      	mov	r0, r3
 8021e78:	370c      	adds	r7, #12
 8021e7a:	46bd      	mov	sp, r7
 8021e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e80:	4770      	bx	lr

08021e82 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 8021e82:	b480      	push	{r7}
 8021e84:	b083      	sub	sp, #12
 8021e86:	af00      	add	r7, sp, #0
 8021e88:	4603      	mov	r3, r0
 8021e8a:	71fb      	strb	r3, [r7, #7]
			return meta;
 8021e8c:	79fb      	ldrb	r3, [r7, #7]
		}
 8021e8e:	4618      	mov	r0, r3
 8021e90:	370c      	adds	r7, #12
 8021e92:	46bd      	mov	sp, r7
 8021e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e98:	4770      	bx	lr
	...

08021e9c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type UnknownMode = 2;
		static constexpr Type BadRequest = 3;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 8021e9c:	b580      	push	{r7, lr}
 8021e9e:	b08c      	sub	sp, #48	; 0x30
 8021ea0:	af00      	add	r7, sp, #0
 8021ea2:	60f8      	str	r0, [r7, #12]
 8021ea4:	60b9      	str	r1, [r7, #8]
 8021ea6:	607a      	str	r2, [r7, #4]
 8021ea8:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 8021eaa:	687b      	ldr	r3, [r7, #4]
 8021eac:	7c1b      	ldrb	r3, [r3, #16]
 8021eae:	4618      	mov	r0, r3
 8021eb0:	f7ff ffe7 	bl	8021e82 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8021eb4:	4603      	mov	r3, r0
 8021eb6:	2b00      	cmp	r3, #0
 8021eb8:	d006      	beq.n	8021ec8 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2c>
 8021eba:	4b2c      	ldr	r3, [pc, #176]	; (8021f6c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd0>)
 8021ebc:	4a2c      	ldr	r2, [pc, #176]	; (8021f70 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd4>)
 8021ebe:	f240 213e 	movw	r1, #574	; 0x23e
 8021ec2:	482c      	ldr	r0, [pc, #176]	; (8021f74 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd8>)
 8021ec4:	f01b fae0 	bl	803d488 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
 8021ec8:	68f8      	ldr	r0, [r7, #12]
 8021eca:	f7ff fbfb 	bl	80216c4 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8021ece:	68fb      	ldr	r3, [r7, #12]
 8021ed0:	2201      	movs	r2, #1
 8021ed2:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 8021ed4:	2000      	movs	r0, #0
 8021ed6:	f7ff ffc8 	bl	8021e6a <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8021eda:	4603      	mov	r3, r0
 8021edc:	461a      	mov	r2, r3
 8021ede:	68fb      	ldr	r3, [r7, #12]
 8021ee0:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 8021ee2:	68fb      	ldr	r3, [r7, #12]
 8021ee4:	2111      	movs	r1, #17
 8021ee6:	4618      	mov	r0, r3
 8021ee8:	f000 ffb6 	bl	8022e58 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 2) {
 8021eec:	687b      	ldr	r3, [r7, #4]
 8021eee:	4618      	mov	r0, r3
 8021ef0:	f000 ff59 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021ef4:	4603      	mov	r3, r0
 8021ef6:	2b02      	cmp	r3, #2
 8021ef8:	bf14      	ite	ne
 8021efa:	2301      	movne	r3, #1
 8021efc:	2300      	moveq	r3, #0
 8021efe:	b2db      	uxtb	r3, r3
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	d002      	beq.n	8021f0a <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8021f04:	68fb      	ldr	r3, [r7, #12]
 8021f06:	2203      	movs	r2, #3
 8021f08:	739a      	strb	r2, [r3, #14]
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	4618      	mov	r0, r3
 8021f0e:	f001 f90e 	bl	802312e <_ZNKSt6vectorIhSaIhEE4dataEv>
 8021f12:	4603      	mov	r3, r0
 8021f14:	881b      	ldrh	r3, [r3, #0]
 8021f16:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 8021f18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8021f1a:	f107 0218 	add.w	r2, r7, #24
 8021f1e:	4619      	mov	r1, r3
 8021f20:	6838      	ldr	r0, [r7, #0]
 8021f22:	f7ff ff3b 	bl	8021d9c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 8021f26:	4603      	mov	r3, r0
 8021f28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 8021f2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8021f30:	f083 0301 	eor.w	r3, r3, #1
 8021f34:	b2db      	uxtb	r3, r3
 8021f36:	2b00      	cmp	r3, #0
 8021f38:	d003      	beq.n	8021f42 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xa6>
			responce.Error = ErrorCodes::FrameUnavailable;
 8021f3a:	68fb      	ldr	r3, [r7, #12]
 8021f3c:	2201      	movs	r2, #1
 8021f3e:	739a      	strb	r2, [r3, #14]
			return responce;
 8021f40:	e00f      	b.n	8021f62 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc6>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8021f42:	68fb      	ldr	r3, [r7, #12]
 8021f44:	4618      	mov	r0, r3
 8021f46:	f000 ff1f 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021f4a:	4601      	mov	r1, r0
 8021f4c:	f107 0217 	add.w	r2, r7, #23
 8021f50:	f107 0318 	add.w	r3, r7, #24
 8021f54:	4618      	mov	r0, r3
 8021f56:	f7fe fdef 	bl	8020b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 8021f5a:	68fb      	ldr	r3, [r7, #12]
 8021f5c:	2200      	movs	r2, #0
 8021f5e:	739a      	strb	r2, [r3, #14]

		return responce;
 8021f60:	bf00      	nop
	}
 8021f62:	68f8      	ldr	r0, [r7, #12]
 8021f64:	3730      	adds	r7, #48	; 0x30
 8021f66:	46bd      	mov	sp, r7
 8021f68:	bd80      	pop	{r7, pc}
 8021f6a:	bf00      	nop
 8021f6c:	0803ea9c 	.word	0x0803ea9c
 8021f70:	0803eae4 	.word	0x0803eae4
 8021f74:	0803e6dc 	.word	0x0803e6dc

08021f78 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 8021f78:	b580      	push	{r7, lr}
 8021f7a:	b088      	sub	sp, #32
 8021f7c:	af00      	add	r7, sp, #0
 8021f7e:	60f8      	str	r0, [r7, #12]
 8021f80:	60b9      	str	r1, [r7, #8]
 8021f82:	607a      	str	r2, [r7, #4]
 8021f84:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	7c1b      	ldrb	r3, [r3, #16]
 8021f8a:	4618      	mov	r0, r3
 8021f8c:	f7ff ff79 	bl	8021e82 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8021f90:	4603      	mov	r3, r0
 8021f92:	2b01      	cmp	r3, #1
 8021f94:	d006      	beq.n	8021fa4 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2c>
 8021f96:	4b22      	ldr	r3, [pc, #136]	; (8022020 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa8>)
 8021f98:	4a22      	ldr	r2, [pc, #136]	; (8022024 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xac>)
 8021f9a:	f240 215f 	movw	r1, #607	; 0x25f
 8021f9e:	4822      	ldr	r0, [pc, #136]	; (8022028 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xb0>)
 8021fa0:	f01b fa72 	bl	803d488 <__assert_func>

		Responce responce;
 8021fa4:	68f8      	ldr	r0, [r7, #12]
 8021fa6:	f7ff fb8d 	bl	80216c4 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8021faa:	68fb      	ldr	r3, [r7, #12]
 8021fac:	2201      	movs	r2, #1
 8021fae:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 8021fb0:	2001      	movs	r0, #1
 8021fb2:	f7ff ff5a 	bl	8021e6a <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8021fb6:	4603      	mov	r3, r0
 8021fb8:	461a      	mov	r2, r3
 8021fba:	68fb      	ldr	r3, [r7, #12]
 8021fbc:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(IMUFrameContainer::Info::Size);
 8021fbe:	68fb      	ldr	r3, [r7, #12]
 8021fc0:	2106      	movs	r1, #6
 8021fc2:	4618      	mov	r0, r3
 8021fc4:	f000 ff48 	bl	8022e58 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8021fc8:	687b      	ldr	r3, [r7, #4]
 8021fca:	4618      	mov	r0, r3
 8021fcc:	f000 feeb 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021fd0:	4603      	mov	r3, r0
 8021fd2:	2b01      	cmp	r3, #1
 8021fd4:	bf14      	ite	ne
 8021fd6:	2301      	movne	r3, #1
 8021fd8:	2300      	moveq	r3, #0
 8021fda:	b2db      	uxtb	r3, r3
 8021fdc:	2b00      	cmp	r3, #0
 8021fde:	d002      	beq.n	8021fe6 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8021fe0:	68fb      	ldr	r3, [r7, #12]
 8021fe2:	2203      	movs	r2, #3
 8021fe4:	739a      	strb	r2, [r3, #14]
		}

		uint8_t *ptr = responce.Data.data();
 8021fe6:	68fb      	ldr	r3, [r7, #12]
 8021fe8:	4618      	mov	r0, r3
 8021fea:	f000 fecd 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021fee:	4603      	mov	r3, r0
 8021ff0:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 8021ff2:	f107 0314 	add.w	r3, r7, #20
 8021ff6:	6839      	ldr	r1, [r7, #0]
 8021ff8:	4618      	mov	r0, r3
 8021ffa:	f7ff ff1b 	bl	8021e34 <_ZNK17IMUFrameContainer7GetInfoEv>

		info.SerializeTo(&ptr);
 8021ffe:	f107 021c 	add.w	r2, r7, #28
 8022002:	f107 0314 	add.w	r3, r7, #20
 8022006:	4611      	mov	r1, r2
 8022008:	4618      	mov	r0, r3
 802200a:	f7ff fe3d 	bl	8021c88 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>

		responce.Error = ErrorCodes::Success;
 802200e:	68fb      	ldr	r3, [r7, #12]
 8022010:	2200      	movs	r2, #0
 8022012:	739a      	strb	r2, [r3, #14]

		return responce;
 8022014:	bf00      	nop
	}
 8022016:	68f8      	ldr	r0, [r7, #12]
 8022018:	3720      	adds	r7, #32
 802201a:	46bd      	mov	sp, r7
 802201c:	bd80      	pop	{r7, pc}
 802201e:	bf00      	nop
 8022020:	0803eb38 	.word	0x0803eb38
 8022024:	0803eb78 	.word	0x0803eb78
 8022028:	0803e6dc 	.word	0x0803e6dc

0802202c <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 802202c:	b580      	push	{r7, lr}
 802202e:	b08a      	sub	sp, #40	; 0x28
 8022030:	af00      	add	r7, sp, #0
 8022032:	60f8      	str	r0, [r7, #12]
 8022034:	60b9      	str	r1, [r7, #8]
 8022036:	607a      	str	r2, [r7, #4]
 8022038:	603b      	str	r3, [r7, #0]
		assert(
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	7c1b      	ldrb	r3, [r3, #16]
 802203e:	4618      	mov	r0, r3
 8022040:	f7ff ff1f 	bl	8021e82 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022044:	4603      	mov	r3, r0
 8022046:	2b02      	cmp	r3, #2
 8022048:	d006      	beq.n	8022058 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2c>
 802204a:	4b21      	ldr	r3, [pc, #132]	; (80220d0 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa4>)
 802204c:	4a21      	ldr	r2, [pc, #132]	; (80220d4 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa8>)
 802204e:	f240 2175 	movw	r1, #629	; 0x275
 8022052:	4821      	ldr	r0, [pc, #132]	; (80220d8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xac>)
 8022054:	f01b fa18 	bl	803d488 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
 8022058:	68f8      	ldr	r0, [r7, #12]
 802205a:	f7ff fb33 	bl	80216c4 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 802205e:	68fb      	ldr	r3, [r7, #12]
 8022060:	2201      	movs	r2, #1
 8022062:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 8022064:	2002      	movs	r0, #2
 8022066:	f7ff ff00 	bl	8021e6a <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 802206a:	4603      	mov	r3, r0
 802206c:	461a      	mov	r2, r3
 802206e:	68fb      	ldr	r3, [r7, #12]
 8022070:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 8022072:	68fb      	ldr	r3, [r7, #12]
 8022074:	2111      	movs	r1, #17
 8022076:	4618      	mov	r0, r3
 8022078:	f000 feee 	bl	8022e58 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	4618      	mov	r0, r3
 8022080:	f000 fe91 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022084:	4603      	mov	r3, r0
 8022086:	2b01      	cmp	r3, #1
 8022088:	bf14      	ite	ne
 802208a:	2301      	movne	r3, #1
 802208c:	2300      	moveq	r3, #0
 802208e:	b2db      	uxtb	r3, r3
 8022090:	2b00      	cmp	r3, #0
 8022092:	d002      	beq.n	802209a <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8022094:	68fb      	ldr	r3, [r7, #12]
 8022096:	2203      	movs	r2, #3
 8022098:	739a      	strb	r2, [r3, #14]
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 802209a:	f107 0314 	add.w	r3, r7, #20
 802209e:	6839      	ldr	r1, [r7, #0]
 80220a0:	4618      	mov	r0, r3
 80220a2:	f7fe fc9f 	bl	80209e4 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 80220a6:	68fb      	ldr	r3, [r7, #12]
 80220a8:	4618      	mov	r0, r3
 80220aa:	f000 fe6d 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 80220ae:	4601      	mov	r1, r0
 80220b0:	f107 0213 	add.w	r2, r7, #19
 80220b4:	f107 0314 	add.w	r3, r7, #20
 80220b8:	4618      	mov	r0, r3
 80220ba:	f7fe fd3d 	bl	8020b38 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>

		responce.Error = ErrorCodes::Success;
 80220be:	68fb      	ldr	r3, [r7, #12]
 80220c0:	2200      	movs	r2, #0
 80220c2:	739a      	strb	r2, [r3, #14]

		return responce;
 80220c4:	bf00      	nop
	}
 80220c6:	68f8      	ldr	r0, [r7, #12]
 80220c8:	3728      	adds	r7, #40	; 0x28
 80220ca:	46bd      	mov	sp, r7
 80220cc:	bd80      	pop	{r7, pc}
 80220ce:	bf00      	nop
 80220d0:	0803ebc8 	.word	0x0803ebc8
 80220d4:	0803ec10 	.word	0x0803ec10
 80220d8:	0803e6dc 	.word	0x0803e6dc

080220dc <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>:

	Responce DoReset(const Request &request, IMUFrameContainer &container) {
 80220dc:	b580      	push	{r7, lr}
 80220de:	b084      	sub	sp, #16
 80220e0:	af00      	add	r7, sp, #0
 80220e2:	60f8      	str	r0, [r7, #12]
 80220e4:	60b9      	str	r1, [r7, #8]
 80220e6:	607a      	str	r2, [r7, #4]
 80220e8:	603b      	str	r3, [r7, #0]
		assert(
 80220ea:	687b      	ldr	r3, [r7, #4]
 80220ec:	7c1b      	ldrb	r3, [r3, #16]
 80220ee:	4618      	mov	r0, r3
 80220f0:	f7ff fec7 	bl	8021e82 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80220f4:	4603      	mov	r3, r0
 80220f6:	2b03      	cmp	r3, #3
 80220f8:	d006      	beq.n	8022108 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x2c>
 80220fa:	4b19      	ldr	r3, [pc, #100]	; (8022160 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x84>)
 80220fc:	4a19      	ldr	r2, [pc, #100]	; (8022164 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x88>)
 80220fe:	f240 218d 	movw	r1, #653	; 0x28d
 8022102:	4819      	ldr	r0, [pc, #100]	; (8022168 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x8c>)
 8022104:	f01b f9c0 	bl	803d488 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::Reset);

		Responce responce;
 8022108:	68f8      	ldr	r0, [r7, #12]
 802210a:	f7ff fadb 	bl	80216c4 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 802210e:	68fb      	ldr	r3, [r7, #12]
 8022110:	2201      	movs	r2, #1
 8022112:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 8022114:	2003      	movs	r0, #3
 8022116:	f7ff fea8 	bl	8021e6a <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 802211a:	4603      	mov	r3, r0
 802211c:	461a      	mov	r2, r3
 802211e:	68fb      	ldr	r3, [r7, #12]
 8022120:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 8022122:	68fb      	ldr	r3, [r7, #12]
 8022124:	2101      	movs	r1, #1
 8022126:	4618      	mov	r0, r3
 8022128:	f000 fe96 	bl	8022e58 <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	4618      	mov	r0, r3
 8022130:	f000 fe39 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022134:	4603      	mov	r3, r0
 8022136:	2b01      	cmp	r3, #1
 8022138:	bf14      	ite	ne
 802213a:	2301      	movne	r3, #1
 802213c:	2300      	moveq	r3, #0
 802213e:	b2db      	uxtb	r3, r3
 8022140:	2b00      	cmp	r3, #0
 8022142:	d002      	beq.n	802214a <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer+0x6e>
			responce.Error = ErrorCodes::BadRequest;
 8022144:	68fb      	ldr	r3, [r7, #12]
 8022146:	2203      	movs	r2, #3
 8022148:	739a      	strb	r2, [r3, #14]
		}

		container.Reset();
 802214a:	6838      	ldr	r0, [r7, #0]
 802214c:	f7ff fde0 	bl	8021d10 <_ZN17IMUFrameContainer5ResetEv>
		responce.Error = ErrorCodes::Success;
 8022150:	68fb      	ldr	r3, [r7, #12]
 8022152:	2200      	movs	r2, #0
 8022154:	739a      	strb	r2, [r3, #14]

		return responce;
 8022156:	bf00      	nop
	}
 8022158:	68f8      	ldr	r0, [r7, #12]
 802215a:	3710      	adds	r7, #16
 802215c:	46bd      	mov	sp, r7
 802215e:	bd80      	pop	{r7, pc}
 8022160:	0803ec60 	.word	0x0803ec60
 8022164:	0803eca4 	.word	0x0803eca4
 8022168:	0803e6dc 	.word	0x0803e6dc

0802216c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper>:

public:
	Responce Handle(const Request &request, IMUFrameContainer &container,
 802216c:	b580      	push	{r7, lr}
 802216e:	b084      	sub	sp, #16
 8022170:	af00      	add	r7, sp, #0
 8022172:	60f8      	str	r0, [r7, #12]
 8022174:	60b9      	str	r1, [r7, #8]
 8022176:	607a      	str	r2, [r7, #4]
 8022178:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU) {
		assert(request.PeripheryID == Periphery::Imu);
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	7c5b      	ldrb	r3, [r3, #17]
 802217e:	2b01      	cmp	r3, #1
 8022180:	d006      	beq.n	8022190 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x24>
 8022182:	4b21      	ldr	r3, [pc, #132]	; (8022208 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x9c>)
 8022184:	4a21      	ldr	r2, [pc, #132]	; (802220c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa0>)
 8022186:	f240 21a3 	movw	r1, #675	; 0x2a3
 802218a:	4821      	ldr	r0, [pc, #132]	; (8022210 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa4>)
 802218c:	f01b f97c 	bl	803d488 <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 8022190:	687b      	ldr	r3, [r7, #4]
 8022192:	7c1b      	ldrb	r3, [r3, #16]
 8022194:	4618      	mov	r0, r3
 8022196:	f7ff fe74 	bl	8021e82 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802219a:	4603      	mov	r3, r0
 802219c:	2b03      	cmp	r3, #3
 802219e:	d827      	bhi.n	80221f0 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x84>
 80221a0:	a201      	add	r2, pc, #4	; (adr r2, 80221a8 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x3c>)
 80221a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80221a6:	bf00      	nop
 80221a8:	080221b9 	.word	0x080221b9
 80221ac:	080221c7 	.word	0x080221c7
 80221b0:	080221d5 	.word	0x080221d5
 80221b4:	080221e3 	.word	0x080221e3
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 80221b8:	68f8      	ldr	r0, [r7, #12]
 80221ba:	683b      	ldr	r3, [r7, #0]
 80221bc:	687a      	ldr	r2, [r7, #4]
 80221be:	68b9      	ldr	r1, [r7, #8]
 80221c0:	f7ff fe6c 	bl	8021e9c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 80221c4:	e01b      	b.n	80221fe <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::Info:
			return GetInfo(request, container);
 80221c6:	68f8      	ldr	r0, [r7, #12]
 80221c8:	683b      	ldr	r3, [r7, #0]
 80221ca:	687a      	ldr	r2, [r7, #4]
 80221cc:	68b9      	ldr	r1, [r7, #8]
 80221ce:	f7ff fed3 	bl	8021f78 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 80221d2:	e014      	b.n	80221fe <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 80221d4:	68f8      	ldr	r0, [r7, #12]
 80221d6:	69bb      	ldr	r3, [r7, #24]
 80221d8:	687a      	ldr	r2, [r7, #4]
 80221da:	68b9      	ldr	r1, [r7, #8]
 80221dc:	f7ff ff26 	bl	802202c <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 80221e0:	e00d      	b.n	80221fe <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		case RequestMode::Reset:
			return DoReset(request, container);
 80221e2:	68f8      	ldr	r0, [r7, #12]
 80221e4:	683b      	ldr	r3, [r7, #0]
 80221e6:	687a      	ldr	r2, [r7, #4]
 80221e8:	68b9      	ldr	r1, [r7, #8]
 80221ea:	f7ff ff77 	bl	80220dc <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainer>
 80221ee:	e006      	b.n	80221fe <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0x92>
		default:
			assert(0 && "Unknown Mode");
 80221f0:	4b08      	ldr	r3, [pc, #32]	; (8022214 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa8>)
 80221f2:	4a06      	ldr	r2, [pc, #24]	; (802220c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa0>)
 80221f4:	f240 21af 	movw	r1, #687	; 0x2af
 80221f8:	4805      	ldr	r0, [pc, #20]	; (8022210 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper+0xa4>)
 80221fa:	f01b f945 	bl	803d488 <__assert_func>
		}
	}
 80221fe:	68f8      	ldr	r0, [r7, #12]
 8022200:	3710      	adds	r7, #16
 8022202:	46bd      	mov	sp, r7
 8022204:	bd80      	pop	{r7, pc}
 8022206:	bf00      	nop
 8022208:	0803ecec 	.word	0x0803ecec
 802220c:	0803ed14 	.word	0x0803ed14
 8022210:	0803e6dc 	.word	0x0803e6dc
 8022214:	0803ed70 	.word	0x0803ed70

08022218 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>:
private:
	struct Version {
		uint8_t Major;
		uint8_t Minor;

		void SerializeTo(uint8_t **ptr) {
 8022218:	b580      	push	{r7, lr}
 802221a:	b082      	sub	sp, #8
 802221c:	af00      	add	r7, sp, #0
 802221e:	6078      	str	r0, [r7, #4]
 8022220:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8022222:	683b      	ldr	r3, [r7, #0]
 8022224:	2b00      	cmp	r3, #0
 8022226:	d106      	bne.n	8022236 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x1e>
 8022228:	4b14      	ldr	r3, [pc, #80]	; (802227c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x64>)
 802222a:	4a15      	ldr	r2, [pc, #84]	; (8022280 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 802222c:	f240 21bb 	movw	r1, #699	; 0x2bb
 8022230:	4814      	ldr	r0, [pc, #80]	; (8022284 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8022232:	f01b f929 	bl	803d488 <__assert_func>
			assert(*ptr);
 8022236:	683b      	ldr	r3, [r7, #0]
 8022238:	681b      	ldr	r3, [r3, #0]
 802223a:	2b00      	cmp	r3, #0
 802223c:	d106      	bne.n	802224c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x34>
 802223e:	4b12      	ldr	r3, [pc, #72]	; (8022288 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x70>)
 8022240:	4a0f      	ldr	r2, [pc, #60]	; (8022280 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 8022242:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8022246:	480f      	ldr	r0, [pc, #60]	; (8022284 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8022248:	f01b f91e 	bl	803d488 <__assert_func>

			**ptr = Major;
 802224c:	683b      	ldr	r3, [r7, #0]
 802224e:	681b      	ldr	r3, [r3, #0]
 8022250:	687a      	ldr	r2, [r7, #4]
 8022252:	7812      	ldrb	r2, [r2, #0]
 8022254:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022256:	683b      	ldr	r3, [r7, #0]
 8022258:	681b      	ldr	r3, [r3, #0]
 802225a:	1c5a      	adds	r2, r3, #1
 802225c:	683b      	ldr	r3, [r7, #0]
 802225e:	601a      	str	r2, [r3, #0]

			**ptr = Minor;
 8022260:	683b      	ldr	r3, [r7, #0]
 8022262:	681b      	ldr	r3, [r3, #0]
 8022264:	687a      	ldr	r2, [r7, #4]
 8022266:	7852      	ldrb	r2, [r2, #1]
 8022268:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 802226a:	683b      	ldr	r3, [r7, #0]
 802226c:	681b      	ldr	r3, [r3, #0]
 802226e:	1c5a      	adds	r2, r3, #1
 8022270:	683b      	ldr	r3, [r7, #0]
 8022272:	601a      	str	r2, [r3, #0]
		}
 8022274:	bf00      	nop
 8022276:	3708      	adds	r7, #8
 8022278:	46bd      	mov	sp, r7
 802227a:	bd80      	pop	{r7, pc}
 802227c:	0803e6a8 	.word	0x0803e6a8
 8022280:	0803ed84 	.word	0x0803ed84
 8022284:	0803e6dc 	.word	0x0803e6dc
 8022288:	0803e6f8 	.word	0x0803e6f8

0802228c <_ZN18AcknowledgeHandlerC1Ehh>:
	};

	Version CurrentVersion;

public:
	AcknowledgeHandler(uint8_t versionMaj, uint8_t versionMin) {
 802228c:	b480      	push	{r7}
 802228e:	b083      	sub	sp, #12
 8022290:	af00      	add	r7, sp, #0
 8022292:	6078      	str	r0, [r7, #4]
 8022294:	460b      	mov	r3, r1
 8022296:	70fb      	strb	r3, [r7, #3]
 8022298:	4613      	mov	r3, r2
 802229a:	70bb      	strb	r3, [r7, #2]
		CurrentVersion.Major = versionMaj;
 802229c:	687b      	ldr	r3, [r7, #4]
 802229e:	78fa      	ldrb	r2, [r7, #3]
 80222a0:	701a      	strb	r2, [r3, #0]
		CurrentVersion.Minor = versionMin;
 80222a2:	687b      	ldr	r3, [r7, #4]
 80222a4:	78ba      	ldrb	r2, [r7, #2]
 80222a6:	705a      	strb	r2, [r3, #1]
	}
 80222a8:	687b      	ldr	r3, [r7, #4]
 80222aa:	4618      	mov	r0, r3
 80222ac:	370c      	adds	r7, #12
 80222ae:	46bd      	mov	sp, r7
 80222b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222b4:	4770      	bx	lr
	...

080222b8 <_ZN18AcknowledgeHandler6HandleERK7Request>:

	Responce Handle(const Request &request) {
 80222b8:	b580      	push	{r7, lr}
 80222ba:	b086      	sub	sp, #24
 80222bc:	af00      	add	r7, sp, #0
 80222be:	60f8      	str	r0, [r7, #12]
 80222c0:	60b9      	str	r1, [r7, #8]
 80222c2:	607a      	str	r2, [r7, #4]
		assert(request.PeripheryID == Periphery::Ack);
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	7c5b      	ldrb	r3, [r3, #17]
 80222c8:	2b02      	cmp	r3, #2
 80222ca:	d006      	beq.n	80222da <_ZN18AcknowledgeHandler6HandleERK7Request+0x22>
 80222cc:	4b14      	ldr	r3, [pc, #80]	; (8022320 <_ZN18AcknowledgeHandler6HandleERK7Request+0x68>)
 80222ce:	4a15      	ldr	r2, [pc, #84]	; (8022324 <_ZN18AcknowledgeHandler6HandleERK7Request+0x6c>)
 80222d0:	f240 21cf 	movw	r1, #719	; 0x2cf
 80222d4:	4814      	ldr	r0, [pc, #80]	; (8022328 <_ZN18AcknowledgeHandler6HandleERK7Request+0x70>)
 80222d6:	f01b f8d7 	bl	803d488 <__assert_func>

		Responce responce;
 80222da:	68f8      	ldr	r0, [r7, #12]
 80222dc:	f7ff f9f2 	bl	80216c4 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Ack;
 80222e0:	68fb      	ldr	r3, [r7, #12]
 80222e2:	2202      	movs	r2, #2
 80222e4:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = 0;
 80222e6:	68fb      	ldr	r3, [r7, #12]
 80222e8:	2200      	movs	r2, #0
 80222ea:	735a      	strb	r2, [r3, #13]
		responce.Error = 0;
 80222ec:	68fb      	ldr	r3, [r7, #12]
 80222ee:	2200      	movs	r2, #0
 80222f0:	739a      	strb	r2, [r3, #14]
		responce.Data.resize(2);
 80222f2:	68fb      	ldr	r3, [r7, #12]
 80222f4:	2102      	movs	r1, #2
 80222f6:	4618      	mov	r0, r3
 80222f8:	f000 fdae 	bl	8022e58 <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = responce.Data.data();
 80222fc:	68fb      	ldr	r3, [r7, #12]
 80222fe:	4618      	mov	r0, r3
 8022300:	f000 fd42 	bl	8022d88 <_ZNSt6vectorIhSaIhEE4dataEv>
 8022304:	4603      	mov	r3, r0
 8022306:	617b      	str	r3, [r7, #20]
		CurrentVersion.SerializeTo(&ptr);
 8022308:	68bb      	ldr	r3, [r7, #8]
 802230a:	f107 0214 	add.w	r2, r7, #20
 802230e:	4611      	mov	r1, r2
 8022310:	4618      	mov	r0, r3
 8022312:	f7ff ff81 	bl	8022218 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>

		return responce;
 8022316:	bf00      	nop
	}
 8022318:	68f8      	ldr	r0, [r7, #12]
 802231a:	3718      	adds	r7, #24
 802231c:	46bd      	mov	sp, r7
 802231e:	bd80      	pop	{r7, pc}
 8022320:	0803edc0 	.word	0x0803edc0
 8022324:	0803ede8 	.word	0x0803ede8
 8022328:	0803e6dc 	.word	0x0803e6dc

0802232c <_ZN13HeadInterfaceD1Ev>:
struct HeadInterface {
 802232c:	b580      	push	{r7, lr}
 802232e:	b082      	sub	sp, #8
 8022330:	af00      	add	r7, sp, #0
 8022332:	6078      	str	r0, [r7, #4]
 8022334:	687b      	ldr	r3, [r7, #4]
 8022336:	3348      	adds	r3, #72	; 0x48
 8022338:	4618      	mov	r0, r3
 802233a:	f000 fc61 	bl	8022c00 <_ZNSt6vectorIhSaIhEED1Ev>
 802233e:	687b      	ldr	r3, [r7, #4]
 8022340:	3334      	adds	r3, #52	; 0x34
 8022342:	4618      	mov	r0, r3
 8022344:	f7fe fe5b 	bl	8020ffe <_ZN7RequestD1Ev>
 8022348:	687b      	ldr	r3, [r7, #4]
 802234a:	4618      	mov	r0, r3
 802234c:	f7ff fa5b 	bl	8021806 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	4618      	mov	r0, r3
 8022354:	3708      	adds	r7, #8
 8022356:	46bd      	mov	sp, r7
 8022358:	bd80      	pop	{r7, pc}

0802235a <_ZN11QueueSenderD1Ev>:
struct QueueSender {
 802235a:	b580      	push	{r7, lr}
 802235c:	b082      	sub	sp, #8
 802235e:	af00      	add	r7, sp, #0
 8022360:	6078      	str	r0, [r7, #4]
 8022362:	687b      	ldr	r3, [r7, #4]
 8022364:	3368      	adds	r3, #104	; 0x68
 8022366:	4618      	mov	r0, r3
 8022368:	f000 fc4a 	bl	8022c00 <_ZNSt6vectorIhSaIhEED1Ev>
 802236c:	687b      	ldr	r3, [r7, #4]
 802236e:	3350      	adds	r3, #80	; 0x50
 8022370:	4618      	mov	r0, r3
 8022372:	f7fe fe44 	bl	8020ffe <_ZN7RequestD1Ev>
 8022376:	687b      	ldr	r3, [r7, #4]
 8022378:	3328      	adds	r3, #40	; 0x28
 802237a:	4618      	mov	r0, r3
 802237c:	f7fe fdff 	bl	8020f7e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>
 8022380:	687b      	ldr	r3, [r7, #4]
 8022382:	4618      	mov	r0, r3
 8022384:	f000 fb9d 	bl	8022ac2 <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 8022388:	687b      	ldr	r3, [r7, #4]
 802238a:	4618      	mov	r0, r3
 802238c:	3708      	adds	r7, #8
 802238e:	46bd      	mov	sp, r7
 8022390:	bd80      	pop	{r7, pc}

08022392 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
 8022392:	b580      	push	{r7, lr}
 8022394:	b082      	sub	sp, #8
 8022396:	af00      	add	r7, sp, #0
 8022398:	6078      	str	r0, [r7, #4]
 802239a:	687b      	ldr	r3, [r7, #4]
 802239c:	4618      	mov	r0, r3
 802239e:	f000 ffa1 	bl	80232e4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 80223a2:	687b      	ldr	r3, [r7, #4]
 80223a4:	4618      	mov	r0, r3
 80223a6:	3708      	adds	r7, #8
 80223a8:	46bd      	mov	sp, r7
 80223aa:	bd80      	pop	{r7, pc}

080223ac <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 80223ac:	b580      	push	{r7, lr}
 80223ae:	b082      	sub	sp, #8
 80223b0:	af00      	add	r7, sp, #0
 80223b2:	6078      	str	r0, [r7, #4]
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	4618      	mov	r0, r3
 80223b8:	f7ff ffeb 	bl	8022392 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 80223bc:	687b      	ldr	r3, [r7, #4]
 80223be:	2200      	movs	r2, #0
 80223c0:	629a      	str	r2, [r3, #40]	; 0x28
 80223c2:	687b      	ldr	r3, [r7, #4]
 80223c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80223c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	4618      	mov	r0, r3
 80223ce:	3708      	adds	r7, #8
 80223d0:	46bd      	mov	sp, r7
 80223d2:	bd80      	pop	{r7, pc}

080223d4 <_ZN17IMUFrameContainerD1Ev>:
 80223d4:	b580      	push	{r7, lr}
 80223d6:	b082      	sub	sp, #8
 80223d8:	af00      	add	r7, sp, #0
 80223da:	6078      	str	r0, [r7, #4]
 80223dc:	687b      	ldr	r3, [r7, #4]
 80223de:	4618      	mov	r0, r3
 80223e0:	f000 ffb3 	bl	802334a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 80223e4:	687b      	ldr	r3, [r7, #4]
 80223e6:	4618      	mov	r0, r3
 80223e8:	3708      	adds	r7, #8
 80223ea:	46bd      	mov	sp, r7
 80223ec:	bd80      	pop	{r7, pc}

080223ee <_ZN18MotherboardContextC1E17MotherboardConfig>:
	BHYWrapper IMU;
	IMURequestHandler IMUHandler;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 80223ee:	b084      	sub	sp, #16
 80223f0:	b580      	push	{r7, lr}
 80223f2:	b082      	sub	sp, #8
 80223f4:	af00      	add	r7, sp, #0
 80223f6:	6078      	str	r0, [r7, #4]
 80223f8:	f107 0014 	add.w	r0, r7, #20
 80223fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			HeadService { conf.HeadServiceUart, conf.HeadTimeout }, HeadStream {
					conf.HeadStreamUart, conf.HeadTimeout }, Body {
					conf.BodyUart, conf.BodyTimeout }, FrameContainer { }, IMU {
					conf.IMUSpi }, IMUHandler { }, AckHandler {
					conf.VersionMajor, conf.VersionMinor } {
 8022400:	687b      	ldr	r3, [r7, #4]
 8022402:	6979      	ldr	r1, [r7, #20]
 8022404:	69fa      	ldr	r2, [r7, #28]
 8022406:	4618      	mov	r0, r3
 8022408:	f7ff fa0a 	bl	8021820 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	3360      	adds	r3, #96	; 0x60
 8022410:	69b9      	ldr	r1, [r7, #24]
 8022412:	69fa      	ldr	r2, [r7, #28]
 8022414:	4618      	mov	r0, r3
 8022416:	f7ff fa03 	bl	8021820 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 802241a:	687b      	ldr	r3, [r7, #4]
 802241c:	33c0      	adds	r3, #192	; 0xc0
 802241e:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8022422:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8022426:	4618      	mov	r0, r3
 8022428:	f7ff ff30 	bl	802228c <_ZN18AcknowledgeHandlerC1Ehh>
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	33c4      	adds	r3, #196	; 0xc4
 8022430:	6a39      	ldr	r1, [r7, #32]
 8022432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022434:	4618      	mov	r0, r3
 8022436:	f7fe fdef 	bl	8021018 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>
 802243a:	687b      	ldr	r3, [r7, #4]
 802243c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022440:	2230      	movs	r2, #48	; 0x30
 8022442:	2100      	movs	r1, #0
 8022444:	4618      	mov	r0, r3
 8022446:	f01b f8b1 	bl	803d5ac <memset>
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022450:	4618      	mov	r0, r3
 8022452:	f7ff ffab 	bl	80223ac <_ZN17IMUFrameContainerC1Ev>
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 802245c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802245e:	4611      	mov	r1, r2
 8022460:	4618      	mov	r0, r3
 8022462:	f7fe f90f 	bl	8020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802246c:	2200      	movs	r2, #0
 802246e:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
	}
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	4618      	mov	r0, r3
 8022476:	3708      	adds	r7, #8
 8022478:	46bd      	mov	sp, r7
 802247a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802247e:	b004      	add	sp, #16
 8022480:	4770      	bx	lr

08022482 <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8022482:	b580      	push	{r7, lr}
 8022484:	b082      	sub	sp, #8
 8022486:	af00      	add	r7, sp, #0
 8022488:	6078      	str	r0, [r7, #4]
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	4618      	mov	r0, r3
 802248e:	f000 fe2d 	bl	80230ec <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8022492:	687b      	ldr	r3, [r7, #4]
 8022494:	3334      	adds	r3, #52	; 0x34
 8022496:	4618      	mov	r0, r3
 8022498:	f7fe fda4 	bl	8020fe4 <_ZN7RequestC1Ev>
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	3348      	adds	r3, #72	; 0x48
 80224a0:	4618      	mov	r0, r3
 80224a2:	f7fe fd92 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 80224a6:	687b      	ldr	r3, [r7, #4]
 80224a8:	2201      	movs	r2, #1
 80224aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80224ae:	687b      	ldr	r3, [r7, #4]
 80224b0:	4618      	mov	r0, r3
 80224b2:	3708      	adds	r7, #8
 80224b4:	46bd      	mov	sp, r7
 80224b6:	bd80      	pop	{r7, pc}

080224b8 <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 80224b8:	b580      	push	{r7, lr}
 80224ba:	b082      	sub	sp, #8
 80224bc:	af00      	add	r7, sp, #0
 80224be:	6078      	str	r0, [r7, #4]
 80224c0:	687b      	ldr	r3, [r7, #4]
 80224c2:	4618      	mov	r0, r3
 80224c4:	f7fe fd4e 	bl	8020f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 80224c8:	687b      	ldr	r3, [r7, #4]
 80224ca:	3328      	adds	r3, #40	; 0x28
 80224cc:	4618      	mov	r0, r3
 80224ce:	f000 fb2a 	bl	8022b26 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 80224d2:	687b      	ldr	r3, [r7, #4]
 80224d4:	3350      	adds	r3, #80	; 0x50
 80224d6:	4618      	mov	r0, r3
 80224d8:	f7fe fd84 	bl	8020fe4 <_ZN7RequestC1Ev>
 80224dc:	687b      	ldr	r3, [r7, #4]
 80224de:	2200      	movs	r2, #0
 80224e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80224e4:	687b      	ldr	r3, [r7, #4]
 80224e6:	2200      	movs	r2, #0
 80224e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80224ec:	687b      	ldr	r3, [r7, #4]
 80224ee:	3368      	adds	r3, #104	; 0x68
 80224f0:	4618      	mov	r0, r3
 80224f2:	f7fe fd6a 	bl	8020fca <_ZNSt6vectorIhSaIhEEC1Ev>
 80224f6:	687b      	ldr	r3, [r7, #4]
 80224f8:	2201      	movs	r2, #1
 80224fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 80224fe:	687b      	ldr	r3, [r7, #4]
 8022500:	2200      	movs	r2, #0
 8022502:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8022506:	687b      	ldr	r3, [r7, #4]
 8022508:	4618      	mov	r0, r3
 802250a:	3708      	adds	r7, #8
 802250c:	46bd      	mov	sp, r7
 802250e:	bd80      	pop	{r7, pc}

08022510 <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8022510:	b580      	push	{r7, lr}
 8022512:	b082      	sub	sp, #8
 8022514:	af00      	add	r7, sp, #0
 8022516:	6078      	str	r0, [r7, #4]
 8022518:	687b      	ldr	r3, [r7, #4]
 802251a:	4618      	mov	r0, r3
 802251c:	f7ff ffb1 	bl	8022482 <_ZN13HeadInterfaceC1Ev>
 8022520:	687b      	ldr	r3, [r7, #4]
 8022522:	3360      	adds	r3, #96	; 0x60
 8022524:	4618      	mov	r0, r3
 8022526:	f7ff ffac 	bl	8022482 <_ZN13HeadInterfaceC1Ev>
 802252a:	687b      	ldr	r3, [r7, #4]
 802252c:	33c0      	adds	r3, #192	; 0xc0
 802252e:	2200      	movs	r2, #0
 8022530:	2100      	movs	r1, #0
 8022532:	4618      	mov	r0, r3
 8022534:	f7ff feaa 	bl	802228c <_ZN18AcknowledgeHandlerC1Ehh>
 8022538:	687b      	ldr	r3, [r7, #4]
 802253a:	33c4      	adds	r3, #196	; 0xc4
 802253c:	4618      	mov	r0, r3
 802253e:	f7ff ffbb 	bl	80224b8 <_ZN11QueueSenderC1Ev>
 8022542:	687b      	ldr	r3, [r7, #4]
 8022544:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022548:	4618      	mov	r0, r3
 802254a:	f7ff ff2f 	bl	80223ac <_ZN17IMUFrameContainerC1Ev>
 802254e:	687b      	ldr	r3, [r7, #4]
 8022550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022554:	2200      	movs	r2, #0
 8022556:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
 802255a:	687b      	ldr	r3, [r7, #4]
 802255c:	4618      	mov	r0, r3
 802255e:	3708      	adds	r7, #8
 8022560:	46bd      	mov	sp, r7
 8022562:	bd80      	pop	{r7, pc}

08022564 <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8022564:	b580      	push	{r7, lr}
 8022566:	b082      	sub	sp, #8
 8022568:	af00      	add	r7, sp, #0
 802256a:	6078      	str	r0, [r7, #4]
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022572:	4618      	mov	r0, r3
 8022574:	f7ff ff2e 	bl	80223d4 <_ZN17IMUFrameContainerD1Ev>
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	33c4      	adds	r3, #196	; 0xc4
 802257c:	4618      	mov	r0, r3
 802257e:	f7ff feec 	bl	802235a <_ZN11QueueSenderD1Ev>
 8022582:	687b      	ldr	r3, [r7, #4]
 8022584:	3360      	adds	r3, #96	; 0x60
 8022586:	4618      	mov	r0, r3
 8022588:	f7ff fed0 	bl	802232c <_ZN13HeadInterfaceD1Ev>
 802258c:	687b      	ldr	r3, [r7, #4]
 802258e:	4618      	mov	r0, r3
 8022590:	f7ff fecc 	bl	802232c <_ZN13HeadInterfaceD1Ev>
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	4618      	mov	r0, r3
 8022598:	3708      	adds	r7, #8
 802259a:	46bd      	mov	sp, r7
 802259c:	bd80      	pop	{r7, pc}

0802259e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 802259e:	b580      	push	{r7, lr}
 80225a0:	b082      	sub	sp, #8
 80225a2:	af00      	add	r7, sp, #0
 80225a4:	6078      	str	r0, [r7, #4]
 80225a6:	6039      	str	r1, [r7, #0]
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	683a      	ldr	r2, [r7, #0]
 80225ac:	4611      	mov	r1, r2
 80225ae:	4618      	mov	r0, r3
 80225b0:	f000 fef0 	bl	8023394 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 80225b4:	687b      	ldr	r3, [r7, #4]
 80225b6:	4618      	mov	r0, r3
 80225b8:	3708      	adds	r7, #8
 80225ba:	46bd      	mov	sp, r7
 80225bc:	bd80      	pop	{r7, pc}

080225be <_ZN13HeadInterfaceaSEOS_>:
struct HeadInterface {
 80225be:	b580      	push	{r7, lr}
 80225c0:	b082      	sub	sp, #8
 80225c2:	af00      	add	r7, sp, #0
 80225c4:	6078      	str	r0, [r7, #4]
 80225c6:	6039      	str	r1, [r7, #0]
 80225c8:	687b      	ldr	r3, [r7, #4]
 80225ca:	683a      	ldr	r2, [r7, #0]
 80225cc:	4611      	mov	r1, r2
 80225ce:	4618      	mov	r0, r3
 80225d0:	f7ff ffe5 	bl	802259e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>
 80225d4:	683b      	ldr	r3, [r7, #0]
 80225d6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80225da:	687b      	ldr	r3, [r7, #4]
 80225dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80225e0:	683b      	ldr	r3, [r7, #0]
 80225e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80225e8:	683b      	ldr	r3, [r7, #0]
 80225ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80225ec:	687b      	ldr	r3, [r7, #4]
 80225ee:	631a      	str	r2, [r3, #48]	; 0x30
 80225f0:	687b      	ldr	r3, [r7, #4]
 80225f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80225f6:	683b      	ldr	r3, [r7, #0]
 80225f8:	3334      	adds	r3, #52	; 0x34
 80225fa:	4619      	mov	r1, r3
 80225fc:	4610      	mov	r0, r2
 80225fe:	f7fe fd57 	bl	80210b0 <_ZN7RequestaSEOS_>
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8022608:	683b      	ldr	r3, [r7, #0]
 802260a:	3348      	adds	r3, #72	; 0x48
 802260c:	4619      	mov	r1, r3
 802260e:	4610      	mov	r0, r2
 8022610:	f000 fb47 	bl	8022ca2 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8022614:	683b      	ldr	r3, [r7, #0]
 8022616:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8022618:	687b      	ldr	r3, [r7, #4]
 802261a:	655a      	str	r2, [r3, #84]	; 0x54
 802261c:	683b      	ldr	r3, [r7, #0]
 802261e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8022620:	687b      	ldr	r3, [r7, #4]
 8022622:	659a      	str	r2, [r3, #88]	; 0x58
 8022624:	683b      	ldr	r3, [r7, #0]
 8022626:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 802262a:	687b      	ldr	r3, [r7, #4]
 802262c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8022630:	687b      	ldr	r3, [r7, #4]
 8022632:	4618      	mov	r0, r3
 8022634:	3708      	adds	r7, #8
 8022636:	46bd      	mov	sp, r7
 8022638:	bd80      	pop	{r7, pc}

0802263a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 802263a:	b580      	push	{r7, lr}
 802263c:	b082      	sub	sp, #8
 802263e:	af00      	add	r7, sp, #0
 8022640:	6078      	str	r0, [r7, #4]
 8022642:	6039      	str	r1, [r7, #0]
 8022644:	687b      	ldr	r3, [r7, #4]
 8022646:	683a      	ldr	r2, [r7, #0]
 8022648:	4611      	mov	r1, r2
 802264a:	4618      	mov	r0, r3
 802264c:	f000 feb5 	bl	80233ba <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>
 8022650:	687b      	ldr	r3, [r7, #4]
 8022652:	4618      	mov	r0, r3
 8022654:	3708      	adds	r7, #8
 8022656:	46bd      	mov	sp, r7
 8022658:	bd80      	pop	{r7, pc}

0802265a <_ZN11QueueSenderaSEOS_>:
struct QueueSender {
 802265a:	b580      	push	{r7, lr}
 802265c:	b082      	sub	sp, #8
 802265e:	af00      	add	r7, sp, #0
 8022660:	6078      	str	r0, [r7, #4]
 8022662:	6039      	str	r1, [r7, #0]
 8022664:	687b      	ldr	r3, [r7, #4]
 8022666:	683a      	ldr	r2, [r7, #0]
 8022668:	4611      	mov	r1, r2
 802266a:	4618      	mov	r0, r3
 802266c:	f000 fe92 	bl	8023394 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 8022670:	687b      	ldr	r3, [r7, #4]
 8022672:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8022676:	683b      	ldr	r3, [r7, #0]
 8022678:	3328      	adds	r3, #40	; 0x28
 802267a:	4619      	mov	r1, r3
 802267c:	4610      	mov	r0, r2
 802267e:	f7ff ffdc 	bl	802263a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8022688:	683b      	ldr	r3, [r7, #0]
 802268a:	3350      	adds	r3, #80	; 0x50
 802268c:	4619      	mov	r1, r3
 802268e:	4610      	mov	r0, r2
 8022690:	f7fe fd0e 	bl	80210b0 <_ZN7RequestaSEOS_>
 8022694:	683b      	ldr	r3, [r7, #0]
 8022696:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 802269a:	687b      	ldr	r3, [r7, #4]
 802269c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80226a0:	683b      	ldr	r3, [r7, #0]
 80226a2:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 80226a6:	687b      	ldr	r3, [r7, #4]
 80226a8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80226b2:	683b      	ldr	r3, [r7, #0]
 80226b4:	3368      	adds	r3, #104	; 0x68
 80226b6:	4619      	mov	r1, r3
 80226b8:	4610      	mov	r0, r2
 80226ba:	f000 faf2 	bl	8022ca2 <_ZNSt6vectorIhSaIhEEaSEOS1_>
 80226be:	683b      	ldr	r3, [r7, #0]
 80226c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	675a      	str	r2, [r3, #116]	; 0x74
 80226c6:	683b      	ldr	r3, [r7, #0]
 80226c8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80226ca:	687b      	ldr	r3, [r7, #4]
 80226cc:	679a      	str	r2, [r3, #120]	; 0x78
 80226ce:	683b      	ldr	r3, [r7, #0]
 80226d0:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 80226da:	683b      	ldr	r3, [r7, #0]
 80226dc:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 80226e6:	687b      	ldr	r3, [r7, #4]
 80226e8:	4618      	mov	r0, r3
 80226ea:	3708      	adds	r7, #8
 80226ec:	46bd      	mov	sp, r7
 80226ee:	bd80      	pop	{r7, pc}

080226f0 <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 80226f0:	b580      	push	{r7, lr}
 80226f2:	b082      	sub	sp, #8
 80226f4:	af00      	add	r7, sp, #0
 80226f6:	6078      	str	r0, [r7, #4]
 80226f8:	6039      	str	r1, [r7, #0]
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	683a      	ldr	r2, [r7, #0]
 80226fe:	4611      	mov	r1, r2
 8022700:	4618      	mov	r0, r3
 8022702:	f000 fe6d 	bl	80233e0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 8022706:	683b      	ldr	r3, [r7, #0]
 8022708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802270a:	687b      	ldr	r3, [r7, #4]
 802270c:	629a      	str	r2, [r3, #40]	; 0x28
 802270e:	683b      	ldr	r3, [r7, #0]
 8022710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022712:	687b      	ldr	r3, [r7, #4]
 8022714:	62da      	str	r2, [r3, #44]	; 0x2c
 8022716:	687b      	ldr	r3, [r7, #4]
 8022718:	4618      	mov	r0, r3
 802271a:	3708      	adds	r7, #8
 802271c:	46bd      	mov	sp, r7
 802271e:	bd80      	pop	{r7, pc}

08022720 <_ZN18MotherboardContextaSEOS_>:
 8022720:	b580      	push	{r7, lr}
 8022722:	b082      	sub	sp, #8
 8022724:	af00      	add	r7, sp, #0
 8022726:	6078      	str	r0, [r7, #4]
 8022728:	6039      	str	r1, [r7, #0]
 802272a:	687b      	ldr	r3, [r7, #4]
 802272c:	683a      	ldr	r2, [r7, #0]
 802272e:	4611      	mov	r1, r2
 8022730:	4618      	mov	r0, r3
 8022732:	f7ff ff44 	bl	80225be <_ZN13HeadInterfaceaSEOS_>
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	f103 0260 	add.w	r2, r3, #96	; 0x60
 802273c:	683b      	ldr	r3, [r7, #0]
 802273e:	3360      	adds	r3, #96	; 0x60
 8022740:	4619      	mov	r1, r3
 8022742:	4610      	mov	r0, r2
 8022744:	f7ff ff3b 	bl	80225be <_ZN13HeadInterfaceaSEOS_>
 8022748:	687b      	ldr	r3, [r7, #4]
 802274a:	683a      	ldr	r2, [r7, #0]
 802274c:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8022750:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8022754:	687b      	ldr	r3, [r7, #4]
 8022756:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 802275a:	683b      	ldr	r3, [r7, #0]
 802275c:	33c4      	adds	r3, #196	; 0xc4
 802275e:	4619      	mov	r1, r3
 8022760:	4610      	mov	r0, r2
 8022762:	f7ff ff7a 	bl	802265a <_ZN11QueueSenderaSEOS_>
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 802276c:	683b      	ldr	r3, [r7, #0]
 802276e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022772:	4619      	mov	r1, r3
 8022774:	4610      	mov	r0, r2
 8022776:	f7ff ffbb 	bl	80226f0 <_ZN17IMUFrameContaineraSEOS_>
 802277a:	687a      	ldr	r2, [r7, #4]
 802277c:	683b      	ldr	r3, [r7, #0]
 802277e:	f502 70bc 	add.w	r0, r2, #376	; 0x178
 8022782:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8022786:	f241 1250 	movw	r2, #4432	; 0x1150
 802278a:	4619      	mov	r1, r3
 802278c:	f01a fee6 	bl	803d55c <memcpy>
 8022790:	683b      	ldr	r3, [r7, #0]
 8022792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022796:	f893 22c9 	ldrb.w	r2, [r3, #713]	; 0x2c9
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80227a0:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	4618      	mov	r0, r3
 80227a8:	3708      	adds	r7, #8
 80227aa:	46bd      	mov	sp, r7
 80227ac:	bd80      	pop	{r7, pc}
	...

080227b0 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 80227b0:	b084      	sub	sp, #16
 80227b2:	b5b0      	push	{r4, r5, r7, lr}
 80227b4:	f5ad 5d97 	sub.w	sp, sp, #4832	; 0x12e0
 80227b8:	af04      	add	r7, sp, #16
 80227ba:	f507 5497 	add.w	r4, r7, #4832	; 0x12e0
 80227be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 80227c2:	4c1d      	ldr	r4, [pc, #116]	; (8022838 <MotherboardInit+0x88>)
 80227c4:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80227c8:	4423      	add	r3, r4
 80227ca:	19dc      	adds	r4, r3, r7
 80227cc:	466d      	mov	r5, sp
 80227ce:	f241 23ec 	movw	r3, #4844	; 0x12ec
 80227d2:	443b      	add	r3, r7
 80227d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80227d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80227da:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80227de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80227e0:	4620      	mov	r0, r4
 80227e2:	f7ff fe04 	bl	80223ee <_ZN18MotherboardContextC1E17MotherboardConfig>
 80227e6:	4b14      	ldr	r3, [pc, #80]	; (8022838 <MotherboardInit+0x88>)
 80227e8:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 80227ec:	f103 0310 	add.w	r3, r3, #16
 80227f0:	443b      	add	r3, r7
 80227f2:	4619      	mov	r1, r3
 80227f4:	4811      	ldr	r0, [pc, #68]	; (802283c <MotherboardInit+0x8c>)
 80227f6:	f7ff ff93 	bl	8022720 <_ZN18MotherboardContextaSEOS_>
 80227fa:	4b0f      	ldr	r3, [pc, #60]	; (8022838 <MotherboardInit+0x88>)
 80227fc:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8022800:	f103 0310 	add.w	r3, r3, #16
 8022804:	443b      	add	r3, r7
 8022806:	4618      	mov	r0, r3
 8022808:	f7ff feac 	bl	8022564 <_ZN18MotherboardContextD1Ev>

	mbctx.HeadService.ResetReadState();
 802280c:	480b      	ldr	r0, [pc, #44]	; (802283c <MotherboardInit+0x8c>)
 802280e:	f7ff f83b 	bl	8021888 <_ZN13HeadInterface14ResetReadStateEv>
	mbctx.HeadStream.ResetReadState();
 8022812:	480b      	ldr	r0, [pc, #44]	; (8022840 <MotherboardInit+0x90>)
 8022814:	f7ff f838 	bl	8021888 <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 8022818:	2100      	movs	r1, #0
 802281a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8022844 <MotherboardInit+0x94>
 802281e:	480a      	ldr	r0, [pc, #40]	; (8022848 <MotherboardInit+0x98>)
 8022820:	f7fd ff4e 	bl	80206c0 <_ZN10BHYWrapper4InitEfm>
 8022824:	4603      	mov	r3, r0
}
 8022826:	4618      	mov	r0, r3
 8022828:	f507 5796 	add.w	r7, r7, #4800	; 0x12c0
 802282c:	3710      	adds	r7, #16
 802282e:	46bd      	mov	sp, r7
 8022830:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8022834:	b004      	add	sp, #16
 8022836:	4770      	bx	lr
 8022838:	ffffed30 	.word	0xffffed30
 802283c:	240001d0 	.word	0x240001d0
 8022840:	24000230 	.word	0x24000230
 8022844:	44480000 	.word	0x44480000
 8022848:	24000348 	.word	0x24000348

0802284c <MotherboardTick>:

int MotherboardTick() {
 802284c:	b580      	push	{r7, lr}
 802284e:	b094      	sub	sp, #80	; 0x50
 8022850:	af02      	add	r7, sp, #8
	if (mbctx.UpdateIMU)
 8022852:	4b40      	ldr	r3, [pc, #256]	; (8022954 <MotherboardTick+0x108>)
 8022854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022858:	f893 32c9 	ldrb.w	r3, [r3, #713]	; 0x2c9
 802285c:	2b00      	cmp	r3, #0
 802285e:	d00b      	beq.n	8022878 <MotherboardTick+0x2c>
		mbctx.UpdateIMU = !mbctx.IMU.Poll();
 8022860:	483d      	ldr	r0, [pc, #244]	; (8022958 <MotherboardTick+0x10c>)
 8022862:	f7fe f885 	bl	8020970 <_ZN10BHYWrapper4PollEv>
 8022866:	4603      	mov	r3, r0
 8022868:	f083 0301 	eor.w	r3, r3, #1
 802286c:	b2da      	uxtb	r2, r3
 802286e:	4b39      	ldr	r3, [pc, #228]	; (8022954 <MotherboardTick+0x108>)
 8022870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022874:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9

	if (mbctx.HeadService.HasRequest()) {
 8022878:	4836      	ldr	r0, [pc, #216]	; (8022954 <MotherboardTick+0x108>)
 802287a:	f7ff f829 	bl	80218d0 <_ZNK13HeadInterface10HasRequestEv>
 802287e:	4603      	mov	r3, r0
 8022880:	2b00      	cmp	r3, #0
 8022882:	d044      	beq.n	802290e <MotherboardTick+0xc2>
		auto request = mbctx.HeadService.GetRequest();
 8022884:	1d3b      	adds	r3, r7, #4
 8022886:	4933      	ldr	r1, [pc, #204]	; (8022954 <MotherboardTick+0x108>)
 8022888:	4618      	mov	r0, r3
 802288a:	f7ff f8d9 	bl	8021a40 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 802288e:	7d7b      	ldrb	r3, [r7, #21]
 8022890:	2b02      	cmp	r3, #2
 8022892:	d006      	beq.n	80228a2 <MotherboardTick+0x56>
 8022894:	2b02      	cmp	r3, #2
 8022896:	dc36      	bgt.n	8022906 <MotherboardTick+0xba>
 8022898:	2b00      	cmp	r3, #0
 802289a:	d015      	beq.n	80228c8 <MotherboardTick+0x7c>
 802289c:	2b01      	cmp	r3, #1
 802289e:	d01d      	beq.n	80228dc <MotherboardTick+0x90>
 80228a0:	e031      	b.n	8022906 <MotherboardTick+0xba>
		case Periphery::Ack:
			mbctx.HeadService.Send(mbctx.AckHandler.Handle(request));
 80228a2:	f107 0318 	add.w	r3, r7, #24
 80228a6:	1d3a      	adds	r2, r7, #4
 80228a8:	492c      	ldr	r1, [pc, #176]	; (802295c <MotherboardTick+0x110>)
 80228aa:	4618      	mov	r0, r3
 80228ac:	f7ff fd04 	bl	80222b8 <_ZN18AcknowledgeHandler6HandleERK7Request>
 80228b0:	f107 0318 	add.w	r3, r7, #24
 80228b4:	4619      	mov	r1, r3
 80228b6:	4827      	ldr	r0, [pc, #156]	; (8022954 <MotherboardTick+0x108>)
 80228b8:	f7ff f81a 	bl	80218f0 <_ZN13HeadInterface4SendERK8Responce>
 80228bc:	f107 0318 	add.w	r3, r7, #24
 80228c0:	4618      	mov	r0, r3
 80228c2:	f7fe fc11 	bl	80210e8 <_ZN8ResponceD1Ev>
			break;
 80228c6:	e01e      	b.n	8022906 <MotherboardTick+0xba>

		case Periphery::Body:
			mbctx.Body.AddRequest(std::move(request));
 80228c8:	1d3b      	adds	r3, r7, #4
 80228ca:	4618      	mov	r0, r3
 80228cc:	f000 f9b3 	bl	8022c36 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80228d0:	4603      	mov	r3, r0
 80228d2:	4619      	mov	r1, r3
 80228d4:	4822      	ldr	r0, [pc, #136]	; (8022960 <MotherboardTick+0x114>)
 80228d6:	f7fe fc14 	bl	8021102 <_ZN11QueueSender10AddRequestEO7Request>
			break;
 80228da:	e014      	b.n	8022906 <MotherboardTick+0xba>
		case Periphery::Imu:
			mbctx.HeadService.Send(
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
 80228dc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80228e0:	1d3a      	adds	r2, r7, #4
 80228e2:	4b1d      	ldr	r3, [pc, #116]	; (8022958 <MotherboardTick+0x10c>)
 80228e4:	9300      	str	r3, [sp, #0]
 80228e6:	4b1f      	ldr	r3, [pc, #124]	; (8022964 <MotherboardTick+0x118>)
 80228e8:	491f      	ldr	r1, [pc, #124]	; (8022968 <MotherboardTick+0x11c>)
 80228ea:	f7ff fc3f 	bl	802216c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapper>
			mbctx.HeadService.Send(
 80228ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80228f2:	4619      	mov	r1, r3
 80228f4:	4817      	ldr	r0, [pc, #92]	; (8022954 <MotherboardTick+0x108>)
 80228f6:	f7fe fffb 	bl	80218f0 <_ZN13HeadInterface4SendERK8Responce>
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
 80228fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80228fe:	4618      	mov	r0, r3
 8022900:	f7fe fbf2 	bl	80210e8 <_ZN8ResponceD1Ev>
							mbctx.IMU));
			break;
 8022904:	bf00      	nop
		auto request = mbctx.HeadService.GetRequest();
 8022906:	1d3b      	adds	r3, r7, #4
 8022908:	4618      	mov	r0, r3
 802290a:	f7fe fb78 	bl	8020ffe <_ZN7RequestD1Ev>
		}
	}

	if (mbctx.Body.HasResponce()) {
 802290e:	4814      	ldr	r0, [pc, #80]	; (8022960 <MotherboardTick+0x114>)
 8022910:	f7fe fc46 	bl	80211a0 <_ZNK11QueueSender11HasResponceEv>
 8022914:	4603      	mov	r3, r0
 8022916:	2b00      	cmp	r3, #0
 8022918:	d010      	beq.n	802293c <MotherboardTick+0xf0>
		mbctx.HeadService.Send(mbctx.Body.GetResponce());
 802291a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802291e:	4910      	ldr	r1, [pc, #64]	; (8022960 <MotherboardTick+0x114>)
 8022920:	4618      	mov	r0, r3
 8022922:	f7fe fc99 	bl	8021258 <_ZN11QueueSender11GetResponceEv>
 8022926:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802292a:	4619      	mov	r1, r3
 802292c:	4809      	ldr	r0, [pc, #36]	; (8022954 <MotherboardTick+0x108>)
 802292e:	f7fe ffdf 	bl	80218f0 <_ZN13HeadInterface4SendERK8Responce>
 8022932:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8022936:	4618      	mov	r0, r3
 8022938:	f7fe fbd6 	bl	80210e8 <_ZN8ResponceD1Ev>
	}

	mbctx.Body.ProcessPriorityRequest();
 802293c:	4808      	ldr	r0, [pc, #32]	; (8022960 <MotherboardTick+0x114>)
 802293e:	f7fe fcbb 	bl	80212b8 <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbctx.Body.ProcessRequests();
 8022942:	4807      	ldr	r0, [pc, #28]	; (8022960 <MotherboardTick+0x114>)
 8022944:	f7fe fd68 	bl	8021418 <_ZN11QueueSender15ProcessRequestsEv>

	return 0;
 8022948:	2300      	movs	r3, #0
}
 802294a:	4618      	mov	r0, r3
 802294c:	3748      	adds	r7, #72	; 0x48
 802294e:	46bd      	mov	sp, r7
 8022950:	bd80      	pop	{r7, pc}
 8022952:	bf00      	nop
 8022954:	240001d0 	.word	0x240001d0
 8022958:	24000348 	.word	0x24000348
 802295c:	24000290 	.word	0x24000290
 8022960:	24000294 	.word	0x24000294
 8022964:	24000314 	.word	0x24000314
 8022968:	24001498 	.word	0x24001498

0802296c <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 802296c:	b580      	push	{r7, lr}
 802296e:	b086      	sub	sp, #24
 8022970:	af00      	add	r7, sp, #0
	mbctx.FrameContainer.Add(mbctx.IMU.GetFrame());
 8022972:	1d3b      	adds	r3, r7, #4
 8022974:	4906      	ldr	r1, [pc, #24]	; (8022990 <MotherboardOnStrobe+0x24>)
 8022976:	4618      	mov	r0, r3
 8022978:	f7fe f834 	bl	80209e4 <_ZNK10BHYWrapper8GetFrameEv>
 802297c:	1d3b      	adds	r3, r7, #4
 802297e:	4619      	mov	r1, r3
 8022980:	4804      	ldr	r0, [pc, #16]	; (8022994 <MotherboardOnStrobe+0x28>)
 8022982:	f7ff f9db 	bl	8021d3c <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
}
 8022986:	bf00      	nop
 8022988:	3718      	adds	r7, #24
 802298a:	46bd      	mov	sp, r7
 802298c:	bd80      	pop	{r7, pc}
 802298e:	bf00      	nop
 8022990:	24000348 	.word	0x24000348
 8022994:	24000314 	.word	0x24000314

08022998 <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 8022998:	b580      	push	{r7, lr}
 802299a:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessResponces();
 802299c:	4802      	ldr	r0, [pc, #8]	; (80229a8 <MotherboardOnBodyRecieveComplete+0x10>)
 802299e:	f7fe fefc 	bl	802179a <_ZN11QueueSender16ProcessResponcesEv>
}
 80229a2:	bf00      	nop
 80229a4:	bd80      	pop	{r7, pc}
 80229a6:	bf00      	nop
 80229a8:	24000294 	.word	0x24000294

080229ac <MotherboardOnHeadServiceRecieveComplete>:

void MotherboardOnHeadServiceRecieveComplete() {
 80229ac:	b580      	push	{r7, lr}
 80229ae:	af00      	add	r7, sp, #0
	mbctx.HeadService.ProcessRecievedData();
 80229b0:	4802      	ldr	r0, [pc, #8]	; (80229bc <MotherboardOnHeadServiceRecieveComplete+0x10>)
 80229b2:	f7ff f881 	bl	8021ab8 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80229b6:	bf00      	nop
 80229b8:	bd80      	pop	{r7, pc}
 80229ba:	bf00      	nop
 80229bc:	240001d0 	.word	0x240001d0

080229c0 <MotherboardOnHeadStreamRecieveComplete>:

void MotherboardOnHeadStreamRecieveComplete() {
 80229c0:	b580      	push	{r7, lr}
 80229c2:	af00      	add	r7, sp, #0
	mbctx.HeadStream.ProcessRecievedData();
 80229c4:	4802      	ldr	r0, [pc, #8]	; (80229d0 <MotherboardOnHeadStreamRecieveComplete+0x10>)
 80229c6:	f7ff f877 	bl	8021ab8 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80229ca:	bf00      	nop
 80229cc:	bd80      	pop	{r7, pc}
 80229ce:	bf00      	nop
 80229d0:	24000230 	.word	0x24000230

080229d4 <MotherboardOnHeadServiceTransmitComplete>:

void MotherboardOnHeadServiceTransmitComplete() {
 80229d4:	b580      	push	{r7, lr}
 80229d6:	af00      	add	r7, sp, #0
	mbctx.HeadService.FinishTransmit();
 80229d8:	4802      	ldr	r0, [pc, #8]	; (80229e4 <MotherboardOnHeadServiceTransmitComplete+0x10>)
 80229da:	f7ff f85f 	bl	8021a9c <_ZN13HeadInterface14FinishTransmitEv>
}
 80229de:	bf00      	nop
 80229e0:	bd80      	pop	{r7, pc}
 80229e2:	bf00      	nop
 80229e4:	240001d0 	.word	0x240001d0

080229e8 <MotherboardOnHeadStreamTransmitComplete>:

void MotherboardOnHeadStreamTransmitComplete() {
 80229e8:	b580      	push	{r7, lr}
 80229ea:	af00      	add	r7, sp, #0
	mbctx.HeadStream.FinishTransmit();
 80229ec:	4802      	ldr	r0, [pc, #8]	; (80229f8 <MotherboardOnHeadStreamTransmitComplete+0x10>)
 80229ee:	f7ff f855 	bl	8021a9c <_ZN13HeadInterface14FinishTransmitEv>
}
 80229f2:	bf00      	nop
 80229f4:	bd80      	pop	{r7, pc}
 80229f6:	bf00      	nop
 80229f8:	24000230 	.word	0x24000230

080229fc <MotherboardOnBodyTransmitComplete>:

void MotherboardOnBodyTransmitComplete() {
 80229fc:	b580      	push	{r7, lr}
 80229fe:	af00      	add	r7, sp, #0
	mbctx.Body.FinishTransmit();
 8022a00:	4802      	ldr	r0, [pc, #8]	; (8022a0c <MotherboardOnBodyTransmitComplete+0x10>)
 8022a02:	f7fe fed4 	bl	80217ae <_ZN11QueueSender14FinishTransmitEv>
}
 8022a06:	bf00      	nop
 8022a08:	bd80      	pop	{r7, pc}
 8022a0a:	bf00      	nop
 8022a0c:	24000294 	.word	0x24000294

08022a10 <MotherboardOnBodyTimerTick>:
void MotherboardOnBodyTimerTick() {
 8022a10:	b580      	push	{r7, lr}
 8022a12:	af00      	add	r7, sp, #0
	mbctx.Body.TickTimer();
 8022a14:	4802      	ldr	r0, [pc, #8]	; (8022a20 <MotherboardOnBodyTimerTick+0x10>)
 8022a16:	f7fe fbd4 	bl	80211c2 <_ZN11QueueSender9TickTimerEv>
}
 8022a1a:	bf00      	nop
 8022a1c:	bd80      	pop	{r7, pc}
 8022a1e:	bf00      	nop
 8022a20:	24000294 	.word	0x24000294

08022a24 <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 8022a24:	b480      	push	{r7}
 8022a26:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 8022a28:	4b05      	ldr	r3, [pc, #20]	; (8022a40 <MotherboardOnImuTimerTick+0x1c>)
 8022a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022a2e:	2201      	movs	r2, #1
 8022a30:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
}
 8022a34:	bf00      	nop
 8022a36:	46bd      	mov	sp, r7
 8022a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a3c:	4770      	bx	lr
 8022a3e:	bf00      	nop
 8022a40:	240001d0 	.word	0x240001d0

08022a44 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8022a44:	b580      	push	{r7, lr}
 8022a46:	b082      	sub	sp, #8
 8022a48:	af00      	add	r7, sp, #0
 8022a4a:	6078      	str	r0, [r7, #4]
 8022a4c:	6878      	ldr	r0, [r7, #4]
 8022a4e:	f000 fcea 	bl	8023426 <_ZNSaI7RequestED1Ev>
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	4618      	mov	r0, r3
 8022a56:	3708      	adds	r7, #8
 8022a58:	46bd      	mov	sp, r7
 8022a5a:	bd80      	pop	{r7, pc}

08022a5c <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>:
      _Deque_base()
 8022a5c:	b580      	push	{r7, lr}
 8022a5e:	b082      	sub	sp, #8
 8022a60:	af00      	add	r7, sp, #0
 8022a62:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8022a64:	687b      	ldr	r3, [r7, #4]
 8022a66:	4618      	mov	r0, r3
 8022a68:	f000 fccd 	bl	8023406 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8022a6c:	2100      	movs	r1, #0
 8022a6e:	6878      	ldr	r0, [r7, #4]
 8022a70:	f000 fce5 	bl	802343e <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>
 8022a74:	687b      	ldr	r3, [r7, #4]
 8022a76:	4618      	mov	r0, r3
 8022a78:	3708      	adds	r7, #8
 8022a7a:	46bd      	mov	sp, r7
 8022a7c:	bd80      	pop	{r7, pc}

08022a7e <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8022a7e:	b580      	push	{r7, lr}
 8022a80:	b082      	sub	sp, #8
 8022a82:	af00      	add	r7, sp, #0
 8022a84:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8022a86:	687b      	ldr	r3, [r7, #4]
 8022a88:	681b      	ldr	r3, [r3, #0]
 8022a8a:	2b00      	cmp	r3, #0
 8022a8c:	d010      	beq.n	8022ab0 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8022a8e:	687b      	ldr	r3, [r7, #4]
 8022a90:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8022a92:	687b      	ldr	r3, [r7, #4]
 8022a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8022a96:	3304      	adds	r3, #4
 8022a98:	461a      	mov	r2, r3
 8022a9a:	6878      	ldr	r0, [r7, #4]
 8022a9c:	f000 fd35 	bl	802350a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8022aa0:	687b      	ldr	r3, [r7, #4]
 8022aa2:	6819      	ldr	r1, [r3, #0]
 8022aa4:	687b      	ldr	r3, [r7, #4]
 8022aa6:	685b      	ldr	r3, [r3, #4]
 8022aa8:	461a      	mov	r2, r3
 8022aaa:	6878      	ldr	r0, [r7, #4]
 8022aac:	f000 fd47 	bl	802353e <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8022ab0:	687b      	ldr	r3, [r7, #4]
 8022ab2:	4618      	mov	r0, r3
 8022ab4:	f7ff ffc6 	bl	8022a44 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>
 8022ab8:	687b      	ldr	r3, [r7, #4]
 8022aba:	4618      	mov	r0, r3
 8022abc:	3708      	adds	r7, #8
 8022abe:	46bd      	mov	sp, r7
 8022ac0:	bd80      	pop	{r7, pc}

08022ac2 <_ZNSt5dequeI7RequestSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8022ac2:	b580      	push	{r7, lr}
 8022ac4:	b08a      	sub	sp, #40	; 0x28
 8022ac6:	af00      	add	r7, sp, #0
 8022ac8:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8022aca:	f107 0308 	add.w	r3, r7, #8
 8022ace:	6879      	ldr	r1, [r7, #4]
 8022ad0:	4618      	mov	r0, r3
 8022ad2:	f000 fd50 	bl	8023576 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8022ad6:	f107 0318 	add.w	r3, r7, #24
 8022ada:	6879      	ldr	r1, [r7, #4]
 8022adc:	4618      	mov	r0, r3
 8022ade:	f000 fd59 	bl	8023594 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 8022ae2:	687b      	ldr	r3, [r7, #4]
 8022ae4:	4618      	mov	r0, r3
 8022ae6:	f000 fd64 	bl	80235b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8022aea:	4603      	mov	r3, r0
 8022aec:	f107 0218 	add.w	r2, r7, #24
 8022af0:	f107 0108 	add.w	r1, r7, #8
 8022af4:	6878      	ldr	r0, [r7, #4]
 8022af6:	f000 fd83 	bl	8023600 <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8022afa:	687b      	ldr	r3, [r7, #4]
 8022afc:	4618      	mov	r0, r3
 8022afe:	f7ff ffbe 	bl	8022a7e <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	4618      	mov	r0, r3
 8022b06:	3728      	adds	r7, #40	; 0x28
 8022b08:	46bd      	mov	sp, r7
 8022b0a:	bd80      	pop	{r7, pc}

08022b0c <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>:
      deque() = default;
 8022b0c:	b580      	push	{r7, lr}
 8022b0e:	b082      	sub	sp, #8
 8022b10:	af00      	add	r7, sp, #0
 8022b12:	6078      	str	r0, [r7, #4]
 8022b14:	687b      	ldr	r3, [r7, #4]
 8022b16:	4618      	mov	r0, r3
 8022b18:	f000 fd9d 	bl	8023656 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>
 8022b1c:	687b      	ldr	r3, [r7, #4]
 8022b1e:	4618      	mov	r0, r3
 8022b20:	3708      	adds	r7, #8
 8022b22:	46bd      	mov	sp, r7
 8022b24:	bd80      	pop	{r7, pc}

08022b26 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8022b26:	b580      	push	{r7, lr}
 8022b28:	b082      	sub	sp, #8
 8022b2a:	af00      	add	r7, sp, #0
 8022b2c:	6078      	str	r0, [r7, #4]
	: c() { }
 8022b2e:	687b      	ldr	r3, [r7, #4]
 8022b30:	4618      	mov	r0, r3
 8022b32:	2328      	movs	r3, #40	; 0x28
 8022b34:	461a      	mov	r2, r3
 8022b36:	2100      	movs	r1, #0
 8022b38:	f01a fd38 	bl	803d5ac <memset>
 8022b3c:	687b      	ldr	r3, [r7, #4]
 8022b3e:	4618      	mov	r0, r3
 8022b40:	f7ff ffe4 	bl	8022b0c <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>
 8022b44:	687b      	ldr	r3, [r7, #4]
 8022b46:	4618      	mov	r0, r3
 8022b48:	3708      	adds	r7, #8
 8022b4a:	46bd      	mov	sp, r7
 8022b4c:	bd80      	pop	{r7, pc}

08022b4e <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>:
      ~deque()
 8022b4e:	b580      	push	{r7, lr}
 8022b50:	b08a      	sub	sp, #40	; 0x28
 8022b52:	af00      	add	r7, sp, #0
 8022b54:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8022b56:	f107 0308 	add.w	r3, r7, #8
 8022b5a:	6879      	ldr	r1, [r7, #4]
 8022b5c:	4618      	mov	r0, r3
 8022b5e:	f000 fdad 	bl	80236bc <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8022b62:	f107 0318 	add.w	r3, r7, #24
 8022b66:	6879      	ldr	r1, [r7, #4]
 8022b68:	4618      	mov	r0, r3
 8022b6a:	f000 fdb6 	bl	80236da <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 8022b6e:	687b      	ldr	r3, [r7, #4]
 8022b70:	4618      	mov	r0, r3
 8022b72:	f000 fdc1 	bl	80236f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8022b76:	4603      	mov	r3, r0
 8022b78:	f107 0218 	add.w	r2, r7, #24
 8022b7c:	f107 0108 	add.w	r1, r7, #8
 8022b80:	6878      	ldr	r0, [r7, #4]
 8022b82:	f000 fde0 	bl	8023746 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8022b86:	687b      	ldr	r3, [r7, #4]
 8022b88:	4618      	mov	r0, r3
 8022b8a:	f000 fd75 	bl	8023678 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>
 8022b8e:	687b      	ldr	r3, [r7, #4]
 8022b90:	4618      	mov	r0, r3
 8022b92:	3728      	adds	r7, #40	; 0x28
 8022b94:	46bd      	mov	sp, r7
 8022b96:	bd80      	pop	{r7, pc}

08022b98 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8022b98:	b580      	push	{r7, lr}
 8022b9a:	b082      	sub	sp, #8
 8022b9c:	af00      	add	r7, sp, #0
 8022b9e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8022ba0:	6878      	ldr	r0, [r7, #4]
 8022ba2:	f000 fdef 	bl	8023784 <_ZNSaIhEC1Ev>
 8022ba6:	687b      	ldr	r3, [r7, #4]
 8022ba8:	4618      	mov	r0, r3
 8022baa:	f000 fdf7 	bl	802379c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8022bae:	687b      	ldr	r3, [r7, #4]
 8022bb0:	4618      	mov	r0, r3
 8022bb2:	3708      	adds	r7, #8
 8022bb4:	46bd      	mov	sp, r7
 8022bb6:	bd80      	pop	{r7, pc}

08022bb8 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8022bb8:	b580      	push	{r7, lr}
 8022bba:	b082      	sub	sp, #8
 8022bbc:	af00      	add	r7, sp, #0
 8022bbe:	6078      	str	r0, [r7, #4]
 8022bc0:	6878      	ldr	r0, [r7, #4]
 8022bc2:	f000 fdff 	bl	80237c4 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8022bc6:	687b      	ldr	r3, [r7, #4]
 8022bc8:	4618      	mov	r0, r3
 8022bca:	3708      	adds	r7, #8
 8022bcc:	46bd      	mov	sp, r7
 8022bce:	bd80      	pop	{r7, pc}

08022bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8022bd0:	b580      	push	{r7, lr}
 8022bd2:	b082      	sub	sp, #8
 8022bd4:	af00      	add	r7, sp, #0
 8022bd6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8022bd8:	687b      	ldr	r3, [r7, #4]
 8022bda:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8022bdc:	687b      	ldr	r3, [r7, #4]
 8022bde:	689a      	ldr	r2, [r3, #8]
 8022be0:	687b      	ldr	r3, [r7, #4]
 8022be2:	681b      	ldr	r3, [r3, #0]
 8022be4:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8022be6:	461a      	mov	r2, r3
 8022be8:	6878      	ldr	r0, [r7, #4]
 8022bea:	f000 fdf6 	bl	80237da <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 8022bee:	687b      	ldr	r3, [r7, #4]
 8022bf0:	4618      	mov	r0, r3
 8022bf2:	f7fe f9d1 	bl	8020f98 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8022bf6:	687b      	ldr	r3, [r7, #4]
 8022bf8:	4618      	mov	r0, r3
 8022bfa:	3708      	adds	r7, #8
 8022bfc:	46bd      	mov	sp, r7
 8022bfe:	bd80      	pop	{r7, pc}

08022c00 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8022c00:	b5b0      	push	{r4, r5, r7, lr}
 8022c02:	b082      	sub	sp, #8
 8022c04:	af00      	add	r7, sp, #0
 8022c06:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	681c      	ldr	r4, [r3, #0]
 8022c0c:	687b      	ldr	r3, [r7, #4]
 8022c0e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8022c10:	687b      	ldr	r3, [r7, #4]
 8022c12:	4618      	mov	r0, r3
 8022c14:	f000 fdf4 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022c18:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8022c1a:	461a      	mov	r2, r3
 8022c1c:	4629      	mov	r1, r5
 8022c1e:	4620      	mov	r0, r4
 8022c20:	f000 fdf9 	bl	8023816 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8022c24:	687b      	ldr	r3, [r7, #4]
 8022c26:	4618      	mov	r0, r3
 8022c28:	f7ff ffd2 	bl	8022bd0 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8022c2c:	687b      	ldr	r3, [r7, #4]
 8022c2e:	4618      	mov	r0, r3
 8022c30:	3708      	adds	r7, #8
 8022c32:	46bd      	mov	sp, r7
 8022c34:	bdb0      	pop	{r4, r5, r7, pc}

08022c36 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8022c36:	b480      	push	{r7}
 8022c38:	b083      	sub	sp, #12
 8022c3a:	af00      	add	r7, sp, #0
 8022c3c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8022c3e:	687b      	ldr	r3, [r7, #4]
 8022c40:	4618      	mov	r0, r3
 8022c42:	370c      	adds	r7, #12
 8022c44:	46bd      	mov	sp, r7
 8022c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c4a:	4770      	bx	lr

08022c4c <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8022c4c:	b5b0      	push	{r4, r5, r7, lr}
 8022c4e:	b082      	sub	sp, #8
 8022c50:	af00      	add	r7, sp, #0
 8022c52:	6078      	str	r0, [r7, #4]
 8022c54:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8022c56:	687b      	ldr	r3, [r7, #4]
 8022c58:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	6a1b      	ldr	r3, [r3, #32]
 8022c5e:	3b14      	subs	r3, #20
	if (this->_M_impl._M_finish._M_cur
 8022c60:	429a      	cmp	r2, r3
 8022c62:	d012      	beq.n	8022c8a <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8022c64:	687c      	ldr	r4, [r7, #4]
 8022c66:	687b      	ldr	r3, [r7, #4]
 8022c68:	699d      	ldr	r5, [r3, #24]
 8022c6a:	6838      	ldr	r0, [r7, #0]
 8022c6c:	f000 fde1 	bl	8023832 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8022c70:	4603      	mov	r3, r0
 8022c72:	461a      	mov	r2, r3
 8022c74:	4629      	mov	r1, r5
 8022c76:	4620      	mov	r0, r4
 8022c78:	f000 fde6 	bl	8023848 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8022c7c:	687b      	ldr	r3, [r7, #4]
 8022c7e:	699b      	ldr	r3, [r3, #24]
 8022c80:	f103 0214 	add.w	r2, r3, #20
 8022c84:	687b      	ldr	r3, [r7, #4]
 8022c86:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8022c88:	e007      	b.n	8022c9a <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8022c8a:	6838      	ldr	r0, [r7, #0]
 8022c8c:	f000 fdd1 	bl	8023832 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8022c90:	4603      	mov	r3, r0
 8022c92:	4619      	mov	r1, r3
 8022c94:	6878      	ldr	r0, [r7, #4]
 8022c96:	f000 fdeb 	bl	8023870 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 8022c9a:	bf00      	nop
 8022c9c:	3708      	adds	r7, #8
 8022c9e:	46bd      	mov	sp, r7
 8022ca0:	bdb0      	pop	{r4, r5, r7, pc}

08022ca2 <_ZNSt6vectorIhSaIhEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8022ca2:	b590      	push	{r4, r7, lr}
 8022ca4:	b085      	sub	sp, #20
 8022ca6:	af00      	add	r7, sp, #0
 8022ca8:	6078      	str	r0, [r7, #4]
 8022caa:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8022cac:	2301      	movs	r3, #1
 8022cae:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8022cb0:	6838      	ldr	r0, [r7, #0]
 8022cb2:	f000 fe21 	bl	80238f8 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8022cb6:	4603      	mov	r3, r0
 8022cb8:	4622      	mov	r2, r4
 8022cba:	4619      	mov	r1, r3
 8022cbc:	6878      	ldr	r0, [r7, #4]
 8022cbe:	f000 fe26 	bl	802390e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8022cc2:	687b      	ldr	r3, [r7, #4]
      }
 8022cc4:	4618      	mov	r0, r3
 8022cc6:	3714      	adds	r7, #20
 8022cc8:	46bd      	mov	sp, r7
 8022cca:	bd90      	pop	{r4, r7, pc}

08022ccc <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
	{ return c.emplace_back(std::forward<_Args>(__args)...); }
#else
      template<typename... _Args>
	void
	emplace(_Args&&... __args)
 8022ccc:	b590      	push	{r4, r7, lr}
 8022cce:	b083      	sub	sp, #12
 8022cd0:	af00      	add	r7, sp, #0
 8022cd2:	6078      	str	r0, [r7, #4]
 8022cd4:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 8022cd6:	687c      	ldr	r4, [r7, #4]
 8022cd8:	6838      	ldr	r0, [r7, #0]
 8022cda:	f000 fe56 	bl	802398a <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8022cde:	4603      	mov	r3, r0
 8022ce0:	4619      	mov	r1, r3
 8022ce2:	4620      	mov	r0, r4
 8022ce4:	f000 fe5c 	bl	80239a0 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8022ce8:	bf00      	nop
 8022cea:	370c      	adds	r7, #12
 8022cec:	46bd      	mov	sp, r7
 8022cee:	bd90      	pop	{r4, r7, pc}

08022cf0 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 8022cf0:	b580      	push	{r7, lr}
 8022cf2:	b082      	sub	sp, #8
 8022cf4:	af00      	add	r7, sp, #0
 8022cf6:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8022cf8:	687b      	ldr	r3, [r7, #4]
 8022cfa:	4618      	mov	r0, r3
 8022cfc:	f000 fe7b 	bl	80239f6 <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>
 8022d00:	4603      	mov	r3, r0
 8022d02:	4618      	mov	r0, r3
 8022d04:	3708      	adds	r7, #8
 8022d06:	46bd      	mov	sp, r7
 8022d08:	bd80      	pop	{r7, pc}

08022d0a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 8022d0a:	b580      	push	{r7, lr}
 8022d0c:	b082      	sub	sp, #8
 8022d0e:	af00      	add	r7, sp, #0
 8022d10:	6078      	str	r0, [r7, #4]
	return c.front();
 8022d12:	687b      	ldr	r3, [r7, #4]
 8022d14:	4618      	mov	r0, r3
 8022d16:	f000 fe80 	bl	8023a1a <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>
 8022d1a:	4603      	mov	r3, r0
      }
 8022d1c:	4618      	mov	r0, r3
 8022d1e:	3708      	adds	r7, #8
 8022d20:	46bd      	mov	sp, r7
 8022d22:	bd80      	pop	{r7, pc}

08022d24 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8022d24:	b480      	push	{r7}
 8022d26:	b083      	sub	sp, #12
 8022d28:	af00      	add	r7, sp, #0
 8022d2a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8022d2c:	687b      	ldr	r3, [r7, #4]
 8022d2e:	4618      	mov	r0, r3
 8022d30:	370c      	adds	r7, #12
 8022d32:	46bd      	mov	sp, r7
 8022d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d38:	4770      	bx	lr

08022d3a <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8022d3a:	b590      	push	{r4, r7, lr}
 8022d3c:	b083      	sub	sp, #12
 8022d3e:	af00      	add	r7, sp, #0
 8022d40:	6078      	str	r0, [r7, #4]
 8022d42:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8022d44:	6838      	ldr	r0, [r7, #0]
 8022d46:	f000 fe7c 	bl	8023a42 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8022d4a:	4603      	mov	r3, r0
 8022d4c:	4619      	mov	r1, r3
 8022d4e:	6878      	ldr	r0, [r7, #4]
 8022d50:	f000 fe82 	bl	8023a58 <_ZNSaIhEC1ERKS_>
 8022d54:	687c      	ldr	r4, [r7, #4]
 8022d56:	6838      	ldr	r0, [r7, #0]
 8022d58:	f000 fe73 	bl	8023a42 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8022d5c:	4603      	mov	r3, r0
 8022d5e:	4619      	mov	r1, r3
 8022d60:	4620      	mov	r0, r4
 8022d62:	f000 fe87 	bl	8023a74 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 8022d66:	687b      	ldr	r3, [r7, #4]
 8022d68:	4618      	mov	r0, r3
 8022d6a:	370c      	adds	r7, #12
 8022d6c:	46bd      	mov	sp, r7
 8022d6e:	bd90      	pop	{r4, r7, pc}

08022d70 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8022d70:	b580      	push	{r7, lr}
 8022d72:	b082      	sub	sp, #8
 8022d74:	af00      	add	r7, sp, #0
 8022d76:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8022d78:	687b      	ldr	r3, [r7, #4]
 8022d7a:	4618      	mov	r0, r3
 8022d7c:	f000 fe9d 	bl	8023aba <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>
      }
 8022d80:	bf00      	nop
 8022d82:	3708      	adds	r7, #8
 8022d84:	46bd      	mov	sp, r7
 8022d86:	bd80      	pop	{r7, pc}

08022d88 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8022d88:	b580      	push	{r7, lr}
 8022d8a:	b082      	sub	sp, #8
 8022d8c:	af00      	add	r7, sp, #0
 8022d8e:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8022d90:	687b      	ldr	r3, [r7, #4]
 8022d92:	681b      	ldr	r3, [r3, #0]
 8022d94:	4619      	mov	r1, r3
 8022d96:	6878      	ldr	r0, [r7, #4]
 8022d98:	f000 feb3 	bl	8023b02 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8022d9c:	4603      	mov	r3, r0
 8022d9e:	4618      	mov	r0, r3
 8022da0:	3708      	adds	r7, #8
 8022da2:	46bd      	mov	sp, r7
 8022da4:	bd80      	pop	{r7, pc}

08022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8022da6:	b480      	push	{r7}
 8022da8:	b083      	sub	sp, #12
 8022daa:	af00      	add	r7, sp, #0
 8022dac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8022dae:	687b      	ldr	r3, [r7, #4]
 8022db0:	685a      	ldr	r2, [r3, #4]
 8022db2:	687b      	ldr	r3, [r7, #4]
 8022db4:	681b      	ldr	r3, [r3, #0]
 8022db6:	1ad3      	subs	r3, r2, r3
 8022db8:	4618      	mov	r0, r3
 8022dba:	370c      	adds	r7, #12
 8022dbc:	46bd      	mov	sp, r7
 8022dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dc2:	4770      	bx	lr

08022dc4 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8022dc4:	b580      	push	{r7, lr}
 8022dc6:	b082      	sub	sp, #8
 8022dc8:	af00      	add	r7, sp, #0
 8022dca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8022dcc:	687b      	ldr	r3, [r7, #4]
 8022dce:	f103 0218 	add.w	r2, r3, #24
 8022dd2:	687b      	ldr	r3, [r7, #4]
 8022dd4:	3308      	adds	r3, #8
 8022dd6:	4619      	mov	r1, r3
 8022dd8:	4610      	mov	r0, r2
 8022dda:	f000 fe9e 	bl	8023b1a <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 8022dde:	4603      	mov	r3, r0
 8022de0:	4618      	mov	r0, r3
 8022de2:	3708      	adds	r7, #8
 8022de4:	46bd      	mov	sp, r7
 8022de6:	bd80      	pop	{r7, pc}

08022de8 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8022de8:	b580      	push	{r7, lr}
 8022dea:	b086      	sub	sp, #24
 8022dec:	af00      	add	r7, sp, #0
 8022dee:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8022df0:	f107 0308 	add.w	r3, r7, #8
 8022df4:	6879      	ldr	r1, [r7, #4]
 8022df6:	4618      	mov	r0, r3
 8022df8:	f000 fbbd 	bl	8023576 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8022dfc:	f107 0308 	add.w	r3, r7, #8
 8022e00:	4618      	mov	r0, r3
 8022e02:	f000 fe9e 	bl	8023b42 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>
 8022e06:	4603      	mov	r3, r0
      }
 8022e08:	4618      	mov	r0, r3
 8022e0a:	3718      	adds	r7, #24
 8022e0c:	46bd      	mov	sp, r7
 8022e0e:	bd80      	pop	{r7, pc}

08022e10 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8022e10:	b580      	push	{r7, lr}
 8022e12:	b082      	sub	sp, #8
 8022e14:	af00      	add	r7, sp, #0
 8022e16:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8022e18:	687b      	ldr	r3, [r7, #4]
 8022e1a:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8022e1c:	687b      	ldr	r3, [r7, #4]
 8022e1e:	691b      	ldr	r3, [r3, #16]
 8022e20:	3b14      	subs	r3, #20
	if (this->_M_impl._M_start._M_cur
 8022e22:	429a      	cmp	r2, r3
 8022e24:	d011      	beq.n	8022e4a <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8022e26:	687b      	ldr	r3, [r7, #4]
 8022e28:	4618      	mov	r0, r3
 8022e2a:	f000 fbc2 	bl	80235b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8022e2e:	4602      	mov	r2, r0
 8022e30:	687b      	ldr	r3, [r7, #4]
 8022e32:	689b      	ldr	r3, [r3, #8]
 8022e34:	4619      	mov	r1, r3
 8022e36:	4610      	mov	r0, r2
 8022e38:	f000 fe8f 	bl	8023b5a <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8022e3c:	687b      	ldr	r3, [r7, #4]
 8022e3e:	689b      	ldr	r3, [r3, #8]
 8022e40:	f103 0214 	add.w	r2, r3, #20
 8022e44:	687b      	ldr	r3, [r7, #4]
 8022e46:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8022e48:	e002      	b.n	8022e50 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8022e4a:	6878      	ldr	r0, [r7, #4]
 8022e4c:	f000 fe92 	bl	8023b74 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>
      }
 8022e50:	bf00      	nop
 8022e52:	3708      	adds	r7, #8
 8022e54:	46bd      	mov	sp, r7
 8022e56:	bd80      	pop	{r7, pc}

08022e58 <_ZNSt6vectorIhSaIhEE6resizeEj>:
      resize(size_type __new_size)
 8022e58:	b580      	push	{r7, lr}
 8022e5a:	b082      	sub	sp, #8
 8022e5c:	af00      	add	r7, sp, #0
 8022e5e:	6078      	str	r0, [r7, #4]
 8022e60:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 8022e62:	6878      	ldr	r0, [r7, #4]
 8022e64:	f7ff ff9f 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022e68:	4602      	mov	r2, r0
 8022e6a:	683b      	ldr	r3, [r7, #0]
 8022e6c:	4293      	cmp	r3, r2
 8022e6e:	bf8c      	ite	hi
 8022e70:	2301      	movhi	r3, #1
 8022e72:	2300      	movls	r3, #0
 8022e74:	b2db      	uxtb	r3, r3
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	d00a      	beq.n	8022e90 <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8022e7a:	6878      	ldr	r0, [r7, #4]
 8022e7c:	f7ff ff93 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022e80:	4602      	mov	r2, r0
 8022e82:	683b      	ldr	r3, [r7, #0]
 8022e84:	1a9b      	subs	r3, r3, r2
 8022e86:	4619      	mov	r1, r3
 8022e88:	6878      	ldr	r0, [r7, #4]
 8022e8a:	f000 feb1 	bl	8023bf0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
      }
 8022e8e:	e013      	b.n	8022eb8 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 8022e90:	6878      	ldr	r0, [r7, #4]
 8022e92:	f7ff ff88 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022e96:	4602      	mov	r2, r0
 8022e98:	683b      	ldr	r3, [r7, #0]
 8022e9a:	4293      	cmp	r3, r2
 8022e9c:	bf34      	ite	cc
 8022e9e:	2301      	movcc	r3, #1
 8022ea0:	2300      	movcs	r3, #0
 8022ea2:	b2db      	uxtb	r3, r3
 8022ea4:	2b00      	cmp	r3, #0
 8022ea6:	d007      	beq.n	8022eb8 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	681a      	ldr	r2, [r3, #0]
 8022eac:	683b      	ldr	r3, [r7, #0]
 8022eae:	4413      	add	r3, r2
 8022eb0:	4619      	mov	r1, r3
 8022eb2:	6878      	ldr	r0, [r7, #4]
 8022eb4:	f000 ff54 	bl	8023d60 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 8022eb8:	bf00      	nop
 8022eba:	3708      	adds	r7, #8
 8022ebc:	46bd      	mov	sp, r7
 8022ebe:	bd80      	pop	{r7, pc}

08022ec0 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 8022ec0:	b480      	push	{r7}
 8022ec2:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8022ec4:	2300      	movs	r3, #0
 8022ec6:	4618      	mov	r0, r3
 8022ec8:	46bd      	mov	sp, r7
 8022eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ece:	4770      	bx	lr

08022ed0 <_ZNSt6vectorIhSaIhEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 8022ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022ed2:	b085      	sub	sp, #20
 8022ed4:	af00      	add	r7, sp, #0
 8022ed6:	6078      	str	r0, [r7, #4]
 8022ed8:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 8022eda:	683a      	ldr	r2, [r7, #0]
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	429a      	cmp	r2, r3
 8022ee0:	f000 80e0 	beq.w	80230a4 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1d4>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8022ee4:	f7ff ffec 	bl	8022ec0 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>
 8022ee8:	4603      	mov	r3, r0
 8022eea:	2b00      	cmp	r3, #0
 8022eec:	d042      	beq.n	8022f74 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa4>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 8022eee:	f7fe f8d7 	bl	80210a0 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>
 8022ef2:	4603      	mov	r3, r0
 8022ef4:	f083 0301 	eor.w	r3, r3, #1
 8022ef8:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d012      	beq.n	8022f24 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 8022efe:	687b      	ldr	r3, [r7, #4]
 8022f00:	4618      	mov	r0, r3
 8022f02:	f000 fc7d 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022f06:	4604      	mov	r4, r0
 8022f08:	683b      	ldr	r3, [r7, #0]
 8022f0a:	4618      	mov	r0, r3
 8022f0c:	f000 ff48 	bl	8023da0 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022f10:	4603      	mov	r3, r0
 8022f12:	4619      	mov	r1, r3
 8022f14:	4620      	mov	r0, r4
 8022f16:	f000 ff4e 	bl	8023db6 <_ZStneRKSaIhES1_>
 8022f1a:	4603      	mov	r3, r0
 8022f1c:	2b00      	cmp	r3, #0
 8022f1e:	d001      	beq.n	8022f24 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 8022f20:	2301      	movs	r3, #1
 8022f22:	e000      	b.n	8022f26 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x56>
 8022f24:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8022f26:	2b00      	cmp	r3, #0
 8022f28:	d016      	beq.n	8022f58 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x88>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8022f2a:	6878      	ldr	r0, [r7, #4]
 8022f2c:	f000 ff4f 	bl	8023dce <_ZNSt6vectorIhSaIhEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8022f30:	6878      	ldr	r0, [r7, #4]
 8022f32:	687b      	ldr	r3, [r7, #4]
 8022f34:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8022f36:	687b      	ldr	r3, [r7, #4]
 8022f38:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8022f3a:	687b      	ldr	r3, [r7, #4]
 8022f3c:	681b      	ldr	r3, [r3, #0]
 8022f3e:	1ad3      	subs	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 8022f40:	461a      	mov	r2, r3
 8022f42:	f000 fc4a 	bl	80237da <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  this->_M_impl._M_start = nullptr;
 8022f46:	687b      	ldr	r3, [r7, #4]
 8022f48:	2200      	movs	r2, #0
 8022f4a:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8022f4c:	687b      	ldr	r3, [r7, #4]
 8022f4e:	2200      	movs	r2, #0
 8022f50:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8022f52:	687b      	ldr	r3, [r7, #4]
 8022f54:	2200      	movs	r2, #0
 8022f56:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8022f58:	687b      	ldr	r3, [r7, #4]
 8022f5a:	4618      	mov	r0, r3
 8022f5c:	f000 fc50 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022f60:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 8022f62:	683b      	ldr	r3, [r7, #0]
 8022f64:	4618      	mov	r0, r3
 8022f66:	f000 ff1b 	bl	8023da0 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022f6a:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8022f6c:	4619      	mov	r1, r3
 8022f6e:	4620      	mov	r0, r4
 8022f70:	f000 ff3b 	bl	8023dea <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 8022f74:	6838      	ldr	r0, [r7, #0]
 8022f76:	f7ff ff16 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022f7a:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8022f7c:	6878      	ldr	r0, [r7, #4]
 8022f7e:	f000 ff42 	bl	8023e06 <_ZNKSt6vectorIhSaIhEE8capacityEv>
 8022f82:	4602      	mov	r2, r0
 8022f84:	68fb      	ldr	r3, [r7, #12]
 8022f86:	4293      	cmp	r3, r2
 8022f88:	bf8c      	ite	hi
 8022f8a:	2301      	movhi	r3, #1
 8022f8c:	2300      	movls	r3, #0
 8022f8e:	b2db      	uxtb	r3, r3
 8022f90:	2b00      	cmp	r3, #0
 8022f92:	d030      	beq.n	8022ff6 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x126>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8022f94:	6838      	ldr	r0, [r7, #0]
 8022f96:	f000 ff45 	bl	8023e24 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8022f9a:	4604      	mov	r4, r0
 8022f9c:	6838      	ldr	r0, [r7, #0]
 8022f9e:	f000 ff51 	bl	8023e44 <_ZNKSt6vectorIhSaIhEE3endEv>
 8022fa2:	4603      	mov	r3, r0
 8022fa4:	4622      	mov	r2, r4
 8022fa6:	68f9      	ldr	r1, [r7, #12]
 8022fa8:	6878      	ldr	r0, [r7, #4]
 8022faa:	f000 ff5c 	bl	8023e66 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 8022fae:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	681c      	ldr	r4, [r3, #0]
 8022fb4:	687b      	ldr	r3, [r7, #4]
 8022fb6:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8022fb8:	687b      	ldr	r3, [r7, #4]
 8022fba:	4618      	mov	r0, r3
 8022fbc:	f000 fc20 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8022fc0:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8022fc2:	461a      	mov	r2, r3
 8022fc4:	4629      	mov	r1, r5
 8022fc6:	4620      	mov	r0, r4
 8022fc8:	f000 fc25 	bl	8023816 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8022fcc:	6878      	ldr	r0, [r7, #4]
 8022fce:	687b      	ldr	r3, [r7, #4]
 8022fd0:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8022fd2:	687b      	ldr	r3, [r7, #4]
 8022fd4:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8022fd6:	687b      	ldr	r3, [r7, #4]
 8022fd8:	681b      	ldr	r3, [r3, #0]
 8022fda:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8022fdc:	461a      	mov	r2, r3
 8022fde:	f000 fbfc 	bl	80237da <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 8022fe2:	687b      	ldr	r3, [r7, #4]
 8022fe4:	68ba      	ldr	r2, [r7, #8]
 8022fe6:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8022fe8:	687b      	ldr	r3, [r7, #4]
 8022fea:	681a      	ldr	r2, [r3, #0]
 8022fec:	68fb      	ldr	r3, [r7, #12]
 8022fee:	441a      	add	r2, r3
 8022ff0:	687b      	ldr	r3, [r7, #4]
 8022ff2:	609a      	str	r2, [r3, #8]
 8022ff4:	e050      	b.n	8023098 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else if (size() >= __xlen)
 8022ff6:	6878      	ldr	r0, [r7, #4]
 8022ff8:	f7ff fed5 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022ffc:	4602      	mov	r2, r0
 8022ffe:	68fb      	ldr	r3, [r7, #12]
 8023000:	4293      	cmp	r3, r2
 8023002:	bf94      	ite	ls
 8023004:	2301      	movls	r3, #1
 8023006:	2300      	movhi	r3, #0
 8023008:	b2db      	uxtb	r3, r3
 802300a:	2b00      	cmp	r3, #0
 802300c:	d020      	beq.n	8023050 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x180>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 802300e:	6838      	ldr	r0, [r7, #0]
 8023010:	f000 ff08 	bl	8023e24 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8023014:	4604      	mov	r4, r0
 8023016:	6838      	ldr	r0, [r7, #0]
 8023018:	f000 ff14 	bl	8023e44 <_ZNKSt6vectorIhSaIhEE3endEv>
 802301c:	4605      	mov	r5, r0
 802301e:	6878      	ldr	r0, [r7, #4]
 8023020:	f000 ff3d 	bl	8023e9e <_ZNSt6vectorIhSaIhEE5beginEv>
 8023024:	4603      	mov	r3, r0
 8023026:	461a      	mov	r2, r3
 8023028:	4629      	mov	r1, r5
 802302a:	4620      	mov	r0, r4
 802302c:	f000 ff47 	bl	8023ebe <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 8023030:	4604      	mov	r4, r0
 8023032:	6878      	ldr	r0, [r7, #4]
 8023034:	f000 ff5b 	bl	8023eee <_ZNSt6vectorIhSaIhEE3endEv>
 8023038:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 802303a:	687b      	ldr	r3, [r7, #4]
 802303c:	4618      	mov	r0, r3
 802303e:	f000 fbdf 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023042:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8023044:	461a      	mov	r2, r3
 8023046:	4629      	mov	r1, r5
 8023048:	4620      	mov	r0, r4
 802304a:	f000 ff61 	bl	8023f10 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 802304e:	e023      	b.n	8023098 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8023050:	683b      	ldr	r3, [r7, #0]
 8023052:	681d      	ldr	r5, [r3, #0]
 8023054:	683b      	ldr	r3, [r7, #0]
 8023056:	681c      	ldr	r4, [r3, #0]
 8023058:	6878      	ldr	r0, [r7, #4]
 802305a:	f7ff fea4 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802305e:	4603      	mov	r3, r0
 8023060:	18e1      	adds	r1, r4, r3
 8023062:	687b      	ldr	r3, [r7, #4]
 8023064:	681b      	ldr	r3, [r3, #0]
 8023066:	461a      	mov	r2, r3
 8023068:	4628      	mov	r0, r5
 802306a:	f000 ff5f 	bl	8023f2c <_ZSt4copyIPhS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 802306e:	683b      	ldr	r3, [r7, #0]
 8023070:	681c      	ldr	r4, [r3, #0]
 8023072:	6878      	ldr	r0, [r7, #4]
 8023074:	f7ff fe97 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023078:	4603      	mov	r3, r0
 802307a:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 802307c:	683b      	ldr	r3, [r7, #0]
 802307e:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8023080:	687b      	ldr	r3, [r7, #4]
 8023082:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 8023084:	687b      	ldr	r3, [r7, #4]
 8023086:	4618      	mov	r0, r3
 8023088:	f000 fbba 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802308c:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 802308e:	4632      	mov	r2, r6
 8023090:	4629      	mov	r1, r5
 8023092:	4620      	mov	r0, r4
 8023094:	f000 ff62 	bl	8023f5c <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8023098:	687b      	ldr	r3, [r7, #4]
 802309a:	681a      	ldr	r2, [r3, #0]
 802309c:	68fb      	ldr	r3, [r7, #12]
 802309e:	441a      	add	r2, r3
 80230a0:	687b      	ldr	r3, [r7, #4]
 80230a2:	605a      	str	r2, [r3, #4]
	}
      return *this;
 80230a4:	687b      	ldr	r3, [r7, #4]
    }
 80230a6:	4618      	mov	r0, r3
 80230a8:	3714      	adds	r7, #20
 80230aa:	46bd      	mov	sp, r7
 80230ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080230ae <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80230ae:	b580      	push	{r7, lr}
 80230b0:	b082      	sub	sp, #8
 80230b2:	af00      	add	r7, sp, #0
 80230b4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80230b6:	687b      	ldr	r3, [r7, #4]
 80230b8:	f103 0218 	add.w	r2, r3, #24
 80230bc:	687b      	ldr	r3, [r7, #4]
 80230be:	3308      	adds	r3, #8
 80230c0:	4619      	mov	r1, r3
 80230c2:	4610      	mov	r0, r2
 80230c4:	f000 ff5c 	bl	8023f80 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 80230c8:	4603      	mov	r3, r0
 80230ca:	4618      	mov	r0, r3
 80230cc:	3708      	adds	r7, #8
 80230ce:	46bd      	mov	sp, r7
 80230d0:	bd80      	pop	{r7, pc}

080230d2 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE4sizeEv>:
      size() const
 80230d2:	b580      	push	{r7, lr}
 80230d4:	b082      	sub	sp, #8
 80230d6:	af00      	add	r7, sp, #0
 80230d8:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 80230da:	687b      	ldr	r3, [r7, #4]
 80230dc:	4618      	mov	r0, r3
 80230de:	f000 ff7b 	bl	8023fd8 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 80230e2:	4603      	mov	r3, r0
 80230e4:	4618      	mov	r0, r3
 80230e6:	3708      	adds	r7, #8
 80230e8:	46bd      	mov	sp, r7
 80230ea:	bd80      	pop	{r7, pc}

080230ec <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
	queue()
 80230ec:	b580      	push	{r7, lr}
 80230ee:	b082      	sub	sp, #8
 80230f0:	af00      	add	r7, sp, #0
 80230f2:	6078      	str	r0, [r7, #4]
	: c() { }
 80230f4:	687b      	ldr	r3, [r7, #4]
 80230f6:	4618      	mov	r0, r3
 80230f8:	2328      	movs	r3, #40	; 0x28
 80230fa:	461a      	mov	r2, r3
 80230fc:	2100      	movs	r1, #0
 80230fe:	f01a fa55 	bl	803d5ac <memset>
 8023102:	687b      	ldr	r3, [r7, #4]
 8023104:	4618      	mov	r0, r3
 8023106:	f7fd ff2d 	bl	8020f64 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 802310a:	687b      	ldr	r3, [r7, #4]
 802310c:	4618      	mov	r0, r3
 802310e:	3708      	adds	r7, #8
 8023110:	46bd      	mov	sp, r7
 8023112:	bd80      	pop	{r7, pc}

08023114 <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 8023114:	b580      	push	{r7, lr}
 8023116:	b082      	sub	sp, #8
 8023118:	af00      	add	r7, sp, #0
 802311a:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 802311c:	687b      	ldr	r3, [r7, #4]
 802311e:	4618      	mov	r0, r3
 8023120:	f7ff fe50 	bl	8022dc4 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8023124:	4603      	mov	r3, r0
 8023126:	4618      	mov	r0, r3
 8023128:	3708      	adds	r7, #8
 802312a:	46bd      	mov	sp, r7
 802312c:	bd80      	pop	{r7, pc}

0802312e <_ZNKSt6vectorIhSaIhEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 802312e:	b580      	push	{r7, lr}
 8023130:	b082      	sub	sp, #8
 8023132:	af00      	add	r7, sp, #0
 8023134:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8023136:	687b      	ldr	r3, [r7, #4]
 8023138:	681b      	ldr	r3, [r3, #0]
 802313a:	4619      	mov	r1, r3
 802313c:	6878      	ldr	r0, [r7, #4]
 802313e:	f000 fce0 	bl	8023b02 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8023142:	4603      	mov	r3, r0
 8023144:	4618      	mov	r0, r3
 8023146:	3708      	adds	r7, #8
 8023148:	46bd      	mov	sp, r7
 802314a:	bd80      	pop	{r7, pc}

0802314c <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 802314c:	b580      	push	{r7, lr}
 802314e:	b082      	sub	sp, #8
 8023150:	af00      	add	r7, sp, #0
 8023152:	6078      	str	r0, [r7, #4]
	return c.front();
 8023154:	687b      	ldr	r3, [r7, #4]
 8023156:	4618      	mov	r0, r3
 8023158:	f7ff fe46 	bl	8022de8 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 802315c:	4603      	mov	r3, r0
      }
 802315e:	4618      	mov	r0, r3
 8023160:	3708      	adds	r7, #8
 8023162:	46bd      	mov	sp, r7
 8023164:	bd80      	pop	{r7, pc}

08023166 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>:
      pop()
 8023166:	b580      	push	{r7, lr}
 8023168:	b082      	sub	sp, #8
 802316a:	af00      	add	r7, sp, #0
 802316c:	6078      	str	r0, [r7, #4]
	c.pop_front();
 802316e:	687b      	ldr	r3, [r7, #4]
 8023170:	4618      	mov	r0, r3
 8023172:	f7ff fe4d 	bl	8022e10 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
      }
 8023176:	bf00      	nop
 8023178:	3708      	adds	r7, #8
 802317a:	46bd      	mov	sp, r7
 802317c:	bd80      	pop	{r7, pc}

0802317e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
 802317e:	b590      	push	{r4, r7, lr}
 8023180:	b083      	sub	sp, #12
 8023182:	af00      	add	r7, sp, #0
 8023184:	6078      	str	r0, [r7, #4]
 8023186:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 8023188:	687c      	ldr	r4, [r7, #4]
 802318a:	6838      	ldr	r0, [r7, #0]
 802318c:	f000 fb51 	bl	8023832 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8023190:	4603      	mov	r3, r0
 8023192:	4619      	mov	r1, r3
 8023194:	4620      	mov	r0, r4
 8023196:	f7ff fd59 	bl	8022c4c <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 802319a:	bf00      	nop
 802319c:	370c      	adds	r7, #12
 802319e:	46bd      	mov	sp, r7
 80231a0:	bd90      	pop	{r4, r7, pc}

080231a2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>:
      operator=(initializer_list<value_type> __l)
 80231a2:	b5b0      	push	{r4, r5, r7, lr}
 80231a4:	b086      	sub	sp, #24
 80231a6:	af00      	add	r7, sp, #0
 80231a8:	60f8      	str	r0, [r7, #12]
 80231aa:	1d3b      	adds	r3, r7, #4
 80231ac:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_assign_aux(__l.begin(), __l.end(),
 80231b0:	1d3b      	adds	r3, r7, #4
 80231b2:	4618      	mov	r0, r3
 80231b4:	f000 ff22 	bl	8023ffc <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 80231b8:	4604      	mov	r4, r0
 80231ba:	1d3b      	adds	r3, r7, #4
 80231bc:	4618      	mov	r0, r3
 80231be:	f000 ff29 	bl	8024014 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>
 80231c2:	4602      	mov	r2, r0
 80231c4:	462b      	mov	r3, r5
 80231c6:	4621      	mov	r1, r4
 80231c8:	68f8      	ldr	r0, [r7, #12]
 80231ca:	f000 ff38 	bl	802403e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
	return *this;
 80231ce:	68fb      	ldr	r3, [r7, #12]
      }
 80231d0:	4618      	mov	r0, r3
 80231d2:	3718      	adds	r7, #24
 80231d4:	46bd      	mov	sp, r7
 80231d6:	bdb0      	pop	{r4, r5, r7, pc}

080231d8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>:
      push_front(const value_type& __x)
 80231d8:	b580      	push	{r7, lr}
 80231da:	b082      	sub	sp, #8
 80231dc:	af00      	add	r7, sp, #0
 80231de:	6078      	str	r0, [r7, #4]
 80231e0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 80231e2:	687b      	ldr	r3, [r7, #4]
 80231e4:	689a      	ldr	r2, [r3, #8]
 80231e6:	687b      	ldr	r3, [r7, #4]
 80231e8:	68db      	ldr	r3, [r3, #12]
 80231ea:	429a      	cmp	r2, r3
 80231ec:	d00e      	beq.n	802320c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 80231ee:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 80231f0:	687b      	ldr	r3, [r7, #4]
 80231f2:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 80231f4:	3b14      	subs	r3, #20
 80231f6:	683a      	ldr	r2, [r7, #0]
 80231f8:	4619      	mov	r1, r3
 80231fa:	f000 ff85 	bl	8024108 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 80231fe:	687b      	ldr	r3, [r7, #4]
 8023200:	689b      	ldr	r3, [r3, #8]
 8023202:	f1a3 0214 	sub.w	r2, r3, #20
 8023206:	687b      	ldr	r3, [r7, #4]
 8023208:	609a      	str	r2, [r3, #8]
      }
 802320a:	e003      	b.n	8023214 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x3c>
	  _M_push_front_aux(__x);
 802320c:	6839      	ldr	r1, [r7, #0]
 802320e:	6878      	ldr	r0, [r7, #4]
 8023210:	f000 ff8e 	bl	8024130 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>
      }
 8023214:	bf00      	nop
 8023216:	3708      	adds	r7, #8
 8023218:	46bd      	mov	sp, r7
 802321a:	bd80      	pop	{r7, pc}

0802321c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 802321c:	b580      	push	{r7, lr}
 802321e:	b082      	sub	sp, #8
 8023220:	af00      	add	r7, sp, #0
 8023222:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8023224:	687b      	ldr	r3, [r7, #4]
 8023226:	f103 0218 	add.w	r2, r3, #24
 802322a:	687b      	ldr	r3, [r7, #4]
 802322c:	3308      	adds	r3, #8
 802322e:	4619      	mov	r1, r3
 8023230:	4610      	mov	r0, r2
 8023232:	f000 ffc3 	bl	80241bc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023236:	4603      	mov	r3, r0
 8023238:	4618      	mov	r0, r3
 802323a:	3708      	adds	r7, #8
 802323c:	46bd      	mov	sp, r7
 802323e:	bd80      	pop	{r7, pc}

08023240 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8023240:	b580      	push	{r7, lr}
 8023242:	b082      	sub	sp, #8
 8023244:	af00      	add	r7, sp, #0
 8023246:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 8023248:	687b      	ldr	r3, [r7, #4]
 802324a:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 802324c:	687b      	ldr	r3, [r7, #4]
 802324e:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8023250:	429a      	cmp	r2, r3
 8023252:	d011      	beq.n	8023278 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 8023254:	687b      	ldr	r3, [r7, #4]
 8023256:	699b      	ldr	r3, [r3, #24]
 8023258:	f1a3 0214 	sub.w	r2, r3, #20
 802325c:	687b      	ldr	r3, [r7, #4]
 802325e:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	4618      	mov	r0, r3
 8023264:	f000 ffd6 	bl	8024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023268:	4602      	mov	r2, r0
 802326a:	687b      	ldr	r3, [r7, #4]
 802326c:	699b      	ldr	r3, [r3, #24]
 802326e:	4619      	mov	r1, r3
 8023270:	4610      	mov	r0, r2
 8023272:	f000 ffda 	bl	802422a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 8023276:	e002      	b.n	802327e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 8023278:	6878      	ldr	r0, [r7, #4]
 802327a:	f000 ffe3 	bl	8024244 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>
      }
 802327e:	bf00      	nop
 8023280:	3708      	adds	r7, #8
 8023282:	46bd      	mov	sp, r7
 8023284:	bd80      	pop	{r7, pc}

08023286 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8023286:	b580      	push	{r7, lr}
 8023288:	b082      	sub	sp, #8
 802328a:	af00      	add	r7, sp, #0
 802328c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 802328e:	687b      	ldr	r3, [r7, #4]
 8023290:	f103 0218 	add.w	r2, r3, #24
 8023294:	687b      	ldr	r3, [r7, #4]
 8023296:	3308      	adds	r3, #8
 8023298:	4619      	mov	r1, r3
 802329a:	4610      	mov	r0, r2
 802329c:	f000 fffc 	bl	8024298 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 80232a0:	4603      	mov	r3, r0
 80232a2:	4618      	mov	r0, r3
 80232a4:	3708      	adds	r7, #8
 80232a6:	46bd      	mov	sp, r7
 80232a8:	bd80      	pop	{r7, pc}

080232aa <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 80232aa:	b580      	push	{r7, lr}
 80232ac:	b082      	sub	sp, #8
 80232ae:	af00      	add	r7, sp, #0
 80232b0:	6078      	str	r0, [r7, #4]
 80232b2:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 80232b4:	687b      	ldr	r3, [r7, #4]
 80232b6:	3308      	adds	r3, #8
 80232b8:	683a      	ldr	r2, [r7, #0]
 80232ba:	4611      	mov	r1, r2
 80232bc:	4618      	mov	r0, r3
 80232be:	f000 ffff 	bl	80242c0 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>
 80232c2:	4603      	mov	r3, r0
      }
 80232c4:	4618      	mov	r0, r3
 80232c6:	3708      	adds	r7, #8
 80232c8:	46bd      	mov	sp, r7
 80232ca:	bd80      	pop	{r7, pc}

080232cc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80232cc:	b580      	push	{r7, lr}
 80232ce:	b082      	sub	sp, #8
 80232d0:	af00      	add	r7, sp, #0
 80232d2:	6078      	str	r0, [r7, #4]
 80232d4:	6878      	ldr	r0, [r7, #4]
 80232d6:	f001 f819 	bl	802430c <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>
 80232da:	687b      	ldr	r3, [r7, #4]
 80232dc:	4618      	mov	r0, r3
 80232de:	3708      	adds	r7, #8
 80232e0:	46bd      	mov	sp, r7
 80232e2:	bd80      	pop	{r7, pc}

080232e4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
      _Deque_base()
 80232e4:	b580      	push	{r7, lr}
 80232e6:	b082      	sub	sp, #8
 80232e8:	af00      	add	r7, sp, #0
 80232ea:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80232ec:	687b      	ldr	r3, [r7, #4]
 80232ee:	4618      	mov	r0, r3
 80232f0:	f000 fffc 	bl	80242ec <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80232f4:	2100      	movs	r1, #0
 80232f6:	6878      	ldr	r0, [r7, #4]
 80232f8:	f001 f814 	bl	8024324 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>
 80232fc:	687b      	ldr	r3, [r7, #4]
 80232fe:	4618      	mov	r0, r3
 8023300:	3708      	adds	r7, #8
 8023302:	46bd      	mov	sp, r7
 8023304:	bd80      	pop	{r7, pc}

08023306 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8023306:	b580      	push	{r7, lr}
 8023308:	b082      	sub	sp, #8
 802330a:	af00      	add	r7, sp, #0
 802330c:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 802330e:	687b      	ldr	r3, [r7, #4]
 8023310:	681b      	ldr	r3, [r3, #0]
 8023312:	2b00      	cmp	r3, #0
 8023314:	d010      	beq.n	8023338 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023316:	687b      	ldr	r3, [r7, #4]
 8023318:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 802331a:	687b      	ldr	r3, [r7, #4]
 802331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 802331e:	3304      	adds	r3, #4
 8023320:	461a      	mov	r2, r3
 8023322:	6878      	ldr	r0, [r7, #4]
 8023324:	f001 f864 	bl	80243f0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8023328:	687b      	ldr	r3, [r7, #4]
 802332a:	6819      	ldr	r1, [r3, #0]
 802332c:	687b      	ldr	r3, [r7, #4]
 802332e:	685b      	ldr	r3, [r3, #4]
 8023330:	461a      	mov	r2, r3
 8023332:	6878      	ldr	r0, [r7, #4]
 8023334:	f001 f876 	bl	8024424 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8023338:	687b      	ldr	r3, [r7, #4]
 802333a:	4618      	mov	r0, r3
 802333c:	f7ff ffc6 	bl	80232cc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>
 8023340:	687b      	ldr	r3, [r7, #4]
 8023342:	4618      	mov	r0, r3
 8023344:	3708      	adds	r7, #8
 8023346:	46bd      	mov	sp, r7
 8023348:	bd80      	pop	{r7, pc}

0802334a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
      ~deque()
 802334a:	b580      	push	{r7, lr}
 802334c:	b08a      	sub	sp, #40	; 0x28
 802334e:	af00      	add	r7, sp, #0
 8023350:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023352:	f107 0308 	add.w	r3, r7, #8
 8023356:	6879      	ldr	r1, [r7, #4]
 8023358:	4618      	mov	r0, r3
 802335a:	f001 f87f 	bl	802445c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 802335e:	f107 0318 	add.w	r3, r7, #24
 8023362:	6879      	ldr	r1, [r7, #4]
 8023364:	4618      	mov	r0, r3
 8023366:	f001 f888 	bl	802447a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 802336a:	687b      	ldr	r3, [r7, #4]
 802336c:	4618      	mov	r0, r3
 802336e:	f000 ff51 	bl	8024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023372:	4603      	mov	r3, r0
 8023374:	f107 0218 	add.w	r2, r7, #24
 8023378:	f107 0108 	add.w	r1, r7, #8
 802337c:	6878      	ldr	r0, [r7, #4]
 802337e:	f001 f8a7 	bl	80244d0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8023382:	687b      	ldr	r3, [r7, #4]
 8023384:	4618      	mov	r0, r3
 8023386:	f7ff ffbe 	bl	8023306 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 802338a:	687b      	ldr	r3, [r7, #4]
 802338c:	4618      	mov	r0, r3
 802338e:	3728      	adds	r7, #40	; 0x28
 8023390:	46bd      	mov	sp, r7
 8023392:	bd80      	pop	{r7, pc}

08023394 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023394:	b590      	push	{r4, r7, lr}
 8023396:	b083      	sub	sp, #12
 8023398:	af00      	add	r7, sp, #0
 802339a:	6078      	str	r0, [r7, #4]
 802339c:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 802339e:	6838      	ldr	r0, [r7, #0]
 80233a0:	f001 f8a3 	bl	80244ea <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 80233a4:	4603      	mov	r3, r0
 80233a6:	4622      	mov	r2, r4
 80233a8:	4619      	mov	r1, r3
 80233aa:	6878      	ldr	r0, [r7, #4]
 80233ac:	f001 f8a8 	bl	8024500 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 80233b0:	687b      	ldr	r3, [r7, #4]
      }
 80233b2:	4618      	mov	r0, r3
 80233b4:	370c      	adds	r7, #12
 80233b6:	46bd      	mov	sp, r7
 80233b8:	bd90      	pop	{r4, r7, pc}

080233ba <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 80233ba:	b590      	push	{r4, r7, lr}
 80233bc:	b083      	sub	sp, #12
 80233be:	af00      	add	r7, sp, #0
 80233c0:	6078      	str	r0, [r7, #4]
 80233c2:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 80233c4:	6838      	ldr	r0, [r7, #0]
 80233c6:	f001 f8bc 	bl	8024542 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 80233ca:	4603      	mov	r3, r0
 80233cc:	4622      	mov	r2, r4
 80233ce:	4619      	mov	r1, r3
 80233d0:	6878      	ldr	r0, [r7, #4]
 80233d2:	f001 f8c1 	bl	8024558 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 80233d6:	687b      	ldr	r3, [r7, #4]
      }
 80233d8:	4618      	mov	r0, r3
 80233da:	370c      	adds	r7, #12
 80233dc:	46bd      	mov	sp, r7
 80233de:	bd90      	pop	{r4, r7, pc}

080233e0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 80233e0:	b590      	push	{r4, r7, lr}
 80233e2:	b083      	sub	sp, #12
 80233e4:	af00      	add	r7, sp, #0
 80233e6:	6078      	str	r0, [r7, #4]
 80233e8:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 80233ea:	6838      	ldr	r0, [r7, #0]
 80233ec:	f001 f8d5 	bl	802459a <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80233f0:	4603      	mov	r3, r0
 80233f2:	4622      	mov	r2, r4
 80233f4:	4619      	mov	r1, r3
 80233f6:	6878      	ldr	r0, [r7, #4]
 80233f8:	f001 f8da 	bl	80245b0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>
	return *this;
 80233fc:	687b      	ldr	r3, [r7, #4]
      }
 80233fe:	4618      	mov	r0, r3
 8023400:	370c      	adds	r7, #12
 8023402:	46bd      	mov	sp, r7
 8023404:	bd90      	pop	{r4, r7, pc}

08023406 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8023406:	b580      	push	{r7, lr}
 8023408:	b082      	sub	sp, #8
 802340a:	af00      	add	r7, sp, #0
 802340c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 802340e:	6878      	ldr	r0, [r7, #4]
 8023410:	f001 f8ef 	bl	80245f2 <_ZNSaI7RequestEC1Ev>
 8023414:	687b      	ldr	r3, [r7, #4]
 8023416:	4618      	mov	r0, r3
 8023418:	f001 f8f7 	bl	802460a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 802341c:	687b      	ldr	r3, [r7, #4]
 802341e:	4618      	mov	r0, r3
 8023420:	3708      	adds	r7, #8
 8023422:	46bd      	mov	sp, r7
 8023424:	bd80      	pop	{r7, pc}

08023426 <_ZNSaI7RequestED1Ev>:
 8023426:	b580      	push	{r7, lr}
 8023428:	b082      	sub	sp, #8
 802342a:	af00      	add	r7, sp, #0
 802342c:	6078      	str	r0, [r7, #4]
 802342e:	6878      	ldr	r0, [r7, #4]
 8023430:	f001 f904 	bl	802463c <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>
 8023434:	687b      	ldr	r3, [r7, #4]
 8023436:	4618      	mov	r0, r3
 8023438:	3708      	adds	r7, #8
 802343a:	46bd      	mov	sp, r7
 802343c:	bd80      	pop	{r7, pc}

0802343e <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 802343e:	b590      	push	{r4, r7, lr}
 8023440:	b089      	sub	sp, #36	; 0x24
 8023442:	af00      	add	r7, sp, #0
 8023444:	6078      	str	r0, [r7, #4]
 8023446:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8023448:	2014      	movs	r0, #20
 802344a:	f7fd fd1a 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 802344e:	4602      	mov	r2, r0
 8023450:	683b      	ldr	r3, [r7, #0]
 8023452:	fbb3 f3f2 	udiv	r3, r3, r2
 8023456:	3301      	adds	r3, #1
 8023458:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802345a:	2308      	movs	r3, #8
 802345c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 802345e:	69fb      	ldr	r3, [r7, #28]
 8023460:	3302      	adds	r3, #2
 8023462:	613b      	str	r3, [r7, #16]
 8023464:	f107 0210 	add.w	r2, r7, #16
 8023468:	f107 030c 	add.w	r3, r7, #12
 802346c:	4611      	mov	r1, r2
 802346e:	4618      	mov	r0, r3
 8023470:	f001 f8ef 	bl	8024652 <_ZSt3maxIjERKT_S2_S2_>
 8023474:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8023476:	681a      	ldr	r2, [r3, #0]
 8023478:	687b      	ldr	r3, [r7, #4]
 802347a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 802347c:	687b      	ldr	r3, [r7, #4]
 802347e:	685b      	ldr	r3, [r3, #4]
 8023480:	4619      	mov	r1, r3
 8023482:	6878      	ldr	r0, [r7, #4]
 8023484:	f001 f8f9 	bl	802467a <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8023488:	4602      	mov	r2, r0
 802348a:	687b      	ldr	r3, [r7, #4]
 802348c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 802348e:	687b      	ldr	r3, [r7, #4]
 8023490:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8023492:	687b      	ldr	r3, [r7, #4]
 8023494:	6859      	ldr	r1, [r3, #4]
 8023496:	69fb      	ldr	r3, [r7, #28]
 8023498:	1acb      	subs	r3, r1, r3
 802349a:	085b      	lsrs	r3, r3, #1
 802349c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 802349e:	4413      	add	r3, r2
 80234a0:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80234a2:	69fb      	ldr	r3, [r7, #28]
 80234a4:	009b      	lsls	r3, r3, #2
 80234a6:	69ba      	ldr	r2, [r7, #24]
 80234a8:	4413      	add	r3, r2
 80234aa:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80234ac:	697a      	ldr	r2, [r7, #20]
 80234ae:	69b9      	ldr	r1, [r7, #24]
 80234b0:	6878      	ldr	r0, [r7, #4]
 80234b2:	f001 f8ff 	bl	80246b4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80234b6:	687b      	ldr	r3, [r7, #4]
 80234b8:	3308      	adds	r3, #8
 80234ba:	69b9      	ldr	r1, [r7, #24]
 80234bc:	4618      	mov	r0, r3
 80234be:	f001 f913 	bl	80246e8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80234c2:	687b      	ldr	r3, [r7, #4]
 80234c4:	f103 0218 	add.w	r2, r3, #24
 80234c8:	697b      	ldr	r3, [r7, #20]
 80234ca:	3b04      	subs	r3, #4
 80234cc:	4619      	mov	r1, r3
 80234ce:	4610      	mov	r0, r2
 80234d0:	f001 f90a 	bl	80246e8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80234d4:	687b      	ldr	r3, [r7, #4]
 80234d6:	68da      	ldr	r2, [r3, #12]
 80234d8:	687b      	ldr	r3, [r7, #4]
 80234da:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80234dc:	687b      	ldr	r3, [r7, #4]
 80234de:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80234e0:	2014      	movs	r0, #20
 80234e2:	f7fd fcce 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80234e6:	4602      	mov	r2, r0
 80234e8:	683b      	ldr	r3, [r7, #0]
 80234ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80234ee:	fb01 f202 	mul.w	r2, r1, r2
 80234f2:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 80234f4:	4613      	mov	r3, r2
 80234f6:	009b      	lsls	r3, r3, #2
 80234f8:	4413      	add	r3, r2
 80234fa:	009b      	lsls	r3, r3, #2
 80234fc:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80234fe:	687b      	ldr	r3, [r7, #4]
 8023500:	619a      	str	r2, [r3, #24]
    }
 8023502:	bf00      	nop
 8023504:	3724      	adds	r7, #36	; 0x24
 8023506:	46bd      	mov	sp, r7
 8023508:	bd90      	pop	{r4, r7, pc}

0802350a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 802350a:	b580      	push	{r7, lr}
 802350c:	b086      	sub	sp, #24
 802350e:	af00      	add	r7, sp, #0
 8023510:	60f8      	str	r0, [r7, #12]
 8023512:	60b9      	str	r1, [r7, #8]
 8023514:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8023516:	68bb      	ldr	r3, [r7, #8]
 8023518:	617b      	str	r3, [r7, #20]
 802351a:	697a      	ldr	r2, [r7, #20]
 802351c:	687b      	ldr	r3, [r7, #4]
 802351e:	429a      	cmp	r2, r3
 8023520:	d209      	bcs.n	8023536 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8023522:	697b      	ldr	r3, [r7, #20]
 8023524:	681b      	ldr	r3, [r3, #0]
 8023526:	4619      	mov	r1, r3
 8023528:	68f8      	ldr	r0, [r7, #12]
 802352a:	f001 f8f9 	bl	8024720 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 802352e:	697b      	ldr	r3, [r7, #20]
 8023530:	3304      	adds	r3, #4
 8023532:	617b      	str	r3, [r7, #20]
 8023534:	e7f1      	b.n	802351a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8023536:	bf00      	nop
 8023538:	3718      	adds	r7, #24
 802353a:	46bd      	mov	sp, r7
 802353c:	bd80      	pop	{r7, pc}

0802353e <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 802353e:	b580      	push	{r7, lr}
 8023540:	b086      	sub	sp, #24
 8023542:	af00      	add	r7, sp, #0
 8023544:	60f8      	str	r0, [r7, #12]
 8023546:	60b9      	str	r1, [r7, #8]
 8023548:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802354a:	f107 0314 	add.w	r3, r7, #20
 802354e:	68f9      	ldr	r1, [r7, #12]
 8023550:	4618      	mov	r0, r3
 8023552:	f001 f8f8 	bl	8024746 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8023556:	f107 0314 	add.w	r3, r7, #20
 802355a:	687a      	ldr	r2, [r7, #4]
 802355c:	68b9      	ldr	r1, [r7, #8]
 802355e:	4618      	mov	r0, r3
 8023560:	f001 f90e 	bl	8024780 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8023564:	f107 0314 	add.w	r3, r7, #20
 8023568:	4618      	mov	r0, r3
 802356a:	f001 f8fd 	bl	8024768 <_ZNSaIP7RequestED1Ev>
      }
 802356e:	bf00      	nop
 8023570:	3718      	adds	r7, #24
 8023572:	46bd      	mov	sp, r7
 8023574:	bd80      	pop	{r7, pc}

08023576 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8023576:	b580      	push	{r7, lr}
 8023578:	b082      	sub	sp, #8
 802357a:	af00      	add	r7, sp, #0
 802357c:	6078      	str	r0, [r7, #4]
 802357e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8023580:	683b      	ldr	r3, [r7, #0]
 8023582:	3308      	adds	r3, #8
 8023584:	4619      	mov	r1, r3
 8023586:	6878      	ldr	r0, [r7, #4]
 8023588:	f000 f81e 	bl	80235c8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 802358c:	6878      	ldr	r0, [r7, #4]
 802358e:	3708      	adds	r7, #8
 8023590:	46bd      	mov	sp, r7
 8023592:	bd80      	pop	{r7, pc}

08023594 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8023594:	b580      	push	{r7, lr}
 8023596:	b082      	sub	sp, #8
 8023598:	af00      	add	r7, sp, #0
 802359a:	6078      	str	r0, [r7, #4]
 802359c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 802359e:	683b      	ldr	r3, [r7, #0]
 80235a0:	3318      	adds	r3, #24
 80235a2:	4619      	mov	r1, r3
 80235a4:	6878      	ldr	r0, [r7, #4]
 80235a6:	f000 f80f 	bl	80235c8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80235aa:	6878      	ldr	r0, [r7, #4]
 80235ac:	3708      	adds	r7, #8
 80235ae:	46bd      	mov	sp, r7
 80235b0:	bd80      	pop	{r7, pc}

080235b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80235b2:	b480      	push	{r7}
 80235b4:	b083      	sub	sp, #12
 80235b6:	af00      	add	r7, sp, #0
 80235b8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80235ba:	687b      	ldr	r3, [r7, #4]
 80235bc:	4618      	mov	r0, r3
 80235be:	370c      	adds	r7, #12
 80235c0:	46bd      	mov	sp, r7
 80235c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235c6:	4770      	bx	lr

080235c8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80235c8:	b480      	push	{r7}
 80235ca:	b083      	sub	sp, #12
 80235cc:	af00      	add	r7, sp, #0
 80235ce:	6078      	str	r0, [r7, #4]
 80235d0:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80235d2:	683b      	ldr	r3, [r7, #0]
 80235d4:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80235d6:	687b      	ldr	r3, [r7, #4]
 80235d8:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80235da:	683b      	ldr	r3, [r7, #0]
 80235dc:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80235de:	687b      	ldr	r3, [r7, #4]
 80235e0:	605a      	str	r2, [r3, #4]
 80235e2:	683b      	ldr	r3, [r7, #0]
 80235e4:	689a      	ldr	r2, [r3, #8]
 80235e6:	687b      	ldr	r3, [r7, #4]
 80235e8:	609a      	str	r2, [r3, #8]
 80235ea:	683b      	ldr	r3, [r7, #0]
 80235ec:	68da      	ldr	r2, [r3, #12]
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	60da      	str	r2, [r3, #12]
 80235f2:	687b      	ldr	r3, [r7, #4]
 80235f4:	4618      	mov	r0, r3
 80235f6:	370c      	adds	r7, #12
 80235f8:	46bd      	mov	sp, r7
 80235fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235fe:	4770      	bx	lr

08023600 <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8023600:	b580      	push	{r7, lr}
 8023602:	b08c      	sub	sp, #48	; 0x30
 8023604:	af00      	add	r7, sp, #0
 8023606:	60f8      	str	r0, [r7, #12]
 8023608:	60b9      	str	r1, [r7, #8]
 802360a:	607a      	str	r2, [r7, #4]
 802360c:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 802360e:	f107 0310 	add.w	r3, r7, #16
 8023612:	68b9      	ldr	r1, [r7, #8]
 8023614:	4618      	mov	r0, r3
 8023616:	f7ff ffd7 	bl	80235c8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 802361a:	f107 0320 	add.w	r3, r7, #32
 802361e:	6879      	ldr	r1, [r7, #4]
 8023620:	4618      	mov	r0, r3
 8023622:	f7ff ffd1 	bl	80235c8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8023626:	f107 0220 	add.w	r2, r7, #32
 802362a:	f107 0310 	add.w	r3, r7, #16
 802362e:	4619      	mov	r1, r3
 8023630:	68f8      	ldr	r0, [r7, #12]
 8023632:	f001 f8b4 	bl	802479e <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8023636:	bf00      	nop
 8023638:	3730      	adds	r7, #48	; 0x30
 802363a:	46bd      	mov	sp, r7
 802363c:	bd80      	pop	{r7, pc}

0802363e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 802363e:	b580      	push	{r7, lr}
 8023640:	b082      	sub	sp, #8
 8023642:	af00      	add	r7, sp, #0
 8023644:	6078      	str	r0, [r7, #4]
 8023646:	6878      	ldr	r0, [r7, #4]
 8023648:	f001 f917 	bl	802487a <_ZNSaI8ResponceED1Ev>
 802364c:	687b      	ldr	r3, [r7, #4]
 802364e:	4618      	mov	r0, r3
 8023650:	3708      	adds	r7, #8
 8023652:	46bd      	mov	sp, r7
 8023654:	bd80      	pop	{r7, pc}

08023656 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>:
      _Deque_base()
 8023656:	b580      	push	{r7, lr}
 8023658:	b082      	sub	sp, #8
 802365a:	af00      	add	r7, sp, #0
 802365c:	6078      	str	r0, [r7, #4]
      : _M_impl()
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	4618      	mov	r0, r3
 8023662:	f001 f8fa 	bl	802485a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8023666:	2100      	movs	r1, #0
 8023668:	6878      	ldr	r0, [r7, #4]
 802366a:	f001 f912 	bl	8024892 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>
 802366e:	687b      	ldr	r3, [r7, #4]
 8023670:	4618      	mov	r0, r3
 8023672:	3708      	adds	r7, #8
 8023674:	46bd      	mov	sp, r7
 8023676:	bd80      	pop	{r7, pc}

08023678 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8023678:	b580      	push	{r7, lr}
 802367a:	b082      	sub	sp, #8
 802367c:	af00      	add	r7, sp, #0
 802367e:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8023680:	687b      	ldr	r3, [r7, #4]
 8023682:	681b      	ldr	r3, [r3, #0]
 8023684:	2b00      	cmp	r3, #0
 8023686:	d010      	beq.n	80236aa <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023688:	687b      	ldr	r3, [r7, #4]
 802368a:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 802368c:	687b      	ldr	r3, [r7, #4]
 802368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023690:	3304      	adds	r3, #4
 8023692:	461a      	mov	r2, r3
 8023694:	6878      	ldr	r0, [r7, #4]
 8023696:	f001 f95f 	bl	8024958 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 802369a:	687b      	ldr	r3, [r7, #4]
 802369c:	6819      	ldr	r1, [r3, #0]
 802369e:	687b      	ldr	r3, [r7, #4]
 80236a0:	685b      	ldr	r3, [r3, #4]
 80236a2:	461a      	mov	r2, r3
 80236a4:	6878      	ldr	r0, [r7, #4]
 80236a6:	f001 f971 	bl	802498c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 80236aa:	687b      	ldr	r3, [r7, #4]
 80236ac:	4618      	mov	r0, r3
 80236ae:	f7ff ffc6 	bl	802363e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>
 80236b2:	687b      	ldr	r3, [r7, #4]
 80236b4:	4618      	mov	r0, r3
 80236b6:	3708      	adds	r7, #8
 80236b8:	46bd      	mov	sp, r7
 80236ba:	bd80      	pop	{r7, pc}

080236bc <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80236bc:	b580      	push	{r7, lr}
 80236be:	b082      	sub	sp, #8
 80236c0:	af00      	add	r7, sp, #0
 80236c2:	6078      	str	r0, [r7, #4]
 80236c4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80236c6:	683b      	ldr	r3, [r7, #0]
 80236c8:	3308      	adds	r3, #8
 80236ca:	4619      	mov	r1, r3
 80236cc:	6878      	ldr	r0, [r7, #4]
 80236ce:	f000 f81e 	bl	802370e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80236d2:	6878      	ldr	r0, [r7, #4]
 80236d4:	3708      	adds	r7, #8
 80236d6:	46bd      	mov	sp, r7
 80236d8:	bd80      	pop	{r7, pc}

080236da <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80236da:	b580      	push	{r7, lr}
 80236dc:	b082      	sub	sp, #8
 80236de:	af00      	add	r7, sp, #0
 80236e0:	6078      	str	r0, [r7, #4]
 80236e2:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80236e4:	683b      	ldr	r3, [r7, #0]
 80236e6:	3318      	adds	r3, #24
 80236e8:	4619      	mov	r1, r3
 80236ea:	6878      	ldr	r0, [r7, #4]
 80236ec:	f000 f80f 	bl	802370e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80236f0:	6878      	ldr	r0, [r7, #4]
 80236f2:	3708      	adds	r7, #8
 80236f4:	46bd      	mov	sp, r7
 80236f6:	bd80      	pop	{r7, pc}

080236f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80236f8:	b480      	push	{r7}
 80236fa:	b083      	sub	sp, #12
 80236fc:	af00      	add	r7, sp, #0
 80236fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8023700:	687b      	ldr	r3, [r7, #4]
 8023702:	4618      	mov	r0, r3
 8023704:	370c      	adds	r7, #12
 8023706:	46bd      	mov	sp, r7
 8023708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802370c:	4770      	bx	lr

0802370e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 802370e:	b480      	push	{r7}
 8023710:	b083      	sub	sp, #12
 8023712:	af00      	add	r7, sp, #0
 8023714:	6078      	str	r0, [r7, #4]
 8023716:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8023718:	683b      	ldr	r3, [r7, #0]
 802371a:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 802371c:	687b      	ldr	r3, [r7, #4]
 802371e:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8023720:	683b      	ldr	r3, [r7, #0]
 8023722:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8023724:	687b      	ldr	r3, [r7, #4]
 8023726:	605a      	str	r2, [r3, #4]
 8023728:	683b      	ldr	r3, [r7, #0]
 802372a:	689a      	ldr	r2, [r3, #8]
 802372c:	687b      	ldr	r3, [r7, #4]
 802372e:	609a      	str	r2, [r3, #8]
 8023730:	683b      	ldr	r3, [r7, #0]
 8023732:	68da      	ldr	r2, [r3, #12]
 8023734:	687b      	ldr	r3, [r7, #4]
 8023736:	60da      	str	r2, [r3, #12]
 8023738:	687b      	ldr	r3, [r7, #4]
 802373a:	4618      	mov	r0, r3
 802373c:	370c      	adds	r7, #12
 802373e:	46bd      	mov	sp, r7
 8023740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023744:	4770      	bx	lr

08023746 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8023746:	b580      	push	{r7, lr}
 8023748:	b08c      	sub	sp, #48	; 0x30
 802374a:	af00      	add	r7, sp, #0
 802374c:	60f8      	str	r0, [r7, #12]
 802374e:	60b9      	str	r1, [r7, #8]
 8023750:	607a      	str	r2, [r7, #4]
 8023752:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 8023754:	f107 0310 	add.w	r3, r7, #16
 8023758:	68b9      	ldr	r1, [r7, #8]
 802375a:	4618      	mov	r0, r3
 802375c:	f7ff ffd7 	bl	802370e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8023760:	f107 0320 	add.w	r3, r7, #32
 8023764:	6879      	ldr	r1, [r7, #4]
 8023766:	4618      	mov	r0, r3
 8023768:	f7ff ffd1 	bl	802370e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 802376c:	f107 0220 	add.w	r2, r7, #32
 8023770:	f107 0310 	add.w	r3, r7, #16
 8023774:	4619      	mov	r1, r3
 8023776:	68f8      	ldr	r0, [r7, #12]
 8023778:	f001 f924 	bl	80249c4 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 802377c:	bf00      	nop
 802377e:	3730      	adds	r7, #48	; 0x30
 8023780:	46bd      	mov	sp, r7
 8023782:	bd80      	pop	{r7, pc}

08023784 <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8023784:	b580      	push	{r7, lr}
 8023786:	b082      	sub	sp, #8
 8023788:	af00      	add	r7, sp, #0
 802378a:	6078      	str	r0, [r7, #4]
 802378c:	6878      	ldr	r0, [r7, #4]
 802378e:	f001 f974 	bl	8024a7a <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8023792:	687b      	ldr	r3, [r7, #4]
 8023794:	4618      	mov	r0, r3
 8023796:	3708      	adds	r7, #8
 8023798:	46bd      	mov	sp, r7
 802379a:	bd80      	pop	{r7, pc}

0802379c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 802379c:	b480      	push	{r7}
 802379e:	b083      	sub	sp, #12
 80237a0:	af00      	add	r7, sp, #0
 80237a2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80237a4:	687b      	ldr	r3, [r7, #4]
 80237a6:	2200      	movs	r2, #0
 80237a8:	601a      	str	r2, [r3, #0]
 80237aa:	687b      	ldr	r3, [r7, #4]
 80237ac:	2200      	movs	r2, #0
 80237ae:	605a      	str	r2, [r3, #4]
 80237b0:	687b      	ldr	r3, [r7, #4]
 80237b2:	2200      	movs	r2, #0
 80237b4:	609a      	str	r2, [r3, #8]
	{ }
 80237b6:	687b      	ldr	r3, [r7, #4]
 80237b8:	4618      	mov	r0, r3
 80237ba:	370c      	adds	r7, #12
 80237bc:	46bd      	mov	sp, r7
 80237be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237c2:	4770      	bx	lr

080237c4 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80237c4:	b480      	push	{r7}
 80237c6:	b083      	sub	sp, #12
 80237c8:	af00      	add	r7, sp, #0
 80237ca:	6078      	str	r0, [r7, #4]
 80237cc:	687b      	ldr	r3, [r7, #4]
 80237ce:	4618      	mov	r0, r3
 80237d0:	370c      	adds	r7, #12
 80237d2:	46bd      	mov	sp, r7
 80237d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237d8:	4770      	bx	lr

080237da <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 80237da:	b580      	push	{r7, lr}
 80237dc:	b084      	sub	sp, #16
 80237de:	af00      	add	r7, sp, #0
 80237e0:	60f8      	str	r0, [r7, #12]
 80237e2:	60b9      	str	r1, [r7, #8]
 80237e4:	607a      	str	r2, [r7, #4]
	if (__p)
 80237e6:	68bb      	ldr	r3, [r7, #8]
 80237e8:	2b00      	cmp	r3, #0
 80237ea:	d005      	beq.n	80237f8 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80237ec:	68fb      	ldr	r3, [r7, #12]
 80237ee:	687a      	ldr	r2, [r7, #4]
 80237f0:	68b9      	ldr	r1, [r7, #8]
 80237f2:	4618      	mov	r0, r3
 80237f4:	f001 f94c 	bl	8024a90 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 80237f8:	bf00      	nop
 80237fa:	3710      	adds	r7, #16
 80237fc:	46bd      	mov	sp, r7
 80237fe:	bd80      	pop	{r7, pc}

08023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8023800:	b480      	push	{r7}
 8023802:	b083      	sub	sp, #12
 8023804:	af00      	add	r7, sp, #0
 8023806:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8023808:	687b      	ldr	r3, [r7, #4]
 802380a:	4618      	mov	r0, r3
 802380c:	370c      	adds	r7, #12
 802380e:	46bd      	mov	sp, r7
 8023810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023814:	4770      	bx	lr

08023816 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8023816:	b580      	push	{r7, lr}
 8023818:	b084      	sub	sp, #16
 802381a:	af00      	add	r7, sp, #0
 802381c:	60f8      	str	r0, [r7, #12]
 802381e:	60b9      	str	r1, [r7, #8]
 8023820:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8023822:	68b9      	ldr	r1, [r7, #8]
 8023824:	68f8      	ldr	r0, [r7, #12]
 8023826:	f001 f942 	bl	8024aae <_ZSt8_DestroyIPhEvT_S1_>
    }
 802382a:	bf00      	nop
 802382c:	3710      	adds	r7, #16
 802382e:	46bd      	mov	sp, r7
 8023830:	bd80      	pop	{r7, pc}

08023832 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8023832:	b480      	push	{r7}
 8023834:	b083      	sub	sp, #12
 8023836:	af00      	add	r7, sp, #0
 8023838:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 802383a:	687b      	ldr	r3, [r7, #4]
 802383c:	4618      	mov	r0, r3
 802383e:	370c      	adds	r7, #12
 8023840:	46bd      	mov	sp, r7
 8023842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023846:	4770      	bx	lr

08023848 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8023848:	b580      	push	{r7, lr}
 802384a:	b084      	sub	sp, #16
 802384c:	af00      	add	r7, sp, #0
 802384e:	60f8      	str	r0, [r7, #12]
 8023850:	60b9      	str	r1, [r7, #8]
 8023852:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8023854:	6878      	ldr	r0, [r7, #4]
 8023856:	f7ff ffec 	bl	8023832 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 802385a:	4603      	mov	r3, r0
 802385c:	461a      	mov	r2, r3
 802385e:	68b9      	ldr	r1, [r7, #8]
 8023860:	68f8      	ldr	r0, [r7, #12]
 8023862:	f001 f931 	bl	8024ac8 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8023866:	bf00      	nop
 8023868:	3710      	adds	r7, #16
 802386a:	46bd      	mov	sp, r7
 802386c:	bd80      	pop	{r7, pc}
	...

08023870 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8023870:	b5b0      	push	{r4, r5, r7, lr}
 8023872:	b082      	sub	sp, #8
 8023874:	af00      	add	r7, sp, #0
 8023876:	6078      	str	r0, [r7, #4]
 8023878:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 802387a:	6878      	ldr	r0, [r7, #4]
 802387c:	f7ff fc17 	bl	80230ae <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8023880:	4604      	mov	r4, r0
 8023882:	6878      	ldr	r0, [r7, #4]
 8023884:	f001 f938 	bl	8024af8 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8023888:	4603      	mov	r3, r0
 802388a:	429c      	cmp	r4, r3
 802388c:	bf0c      	ite	eq
 802388e:	2301      	moveq	r3, #1
 8023890:	2300      	movne	r3, #0
 8023892:	b2db      	uxtb	r3, r3
 8023894:	2b00      	cmp	r3, #0
 8023896:	d002      	beq.n	802389e <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8023898:	4816      	ldr	r0, [pc, #88]	; (80238f4 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 802389a:	f019 fddf 	bl	803d45c <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 802389e:	2101      	movs	r1, #1
 80238a0:	6878      	ldr	r0, [r7, #4]
 80238a2:	f001 f93a 	bl	8024b1a <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80238a6:	687a      	ldr	r2, [r7, #4]
 80238a8:	687b      	ldr	r3, [r7, #4]
 80238aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80238ac:	1d1c      	adds	r4, r3, #4
 80238ae:	4610      	mov	r0, r2
 80238b0:	f001 f94e 	bl	8024b50 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 80238b4:	4603      	mov	r3, r0
 80238b6:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80238b8:	687c      	ldr	r4, [r7, #4]
 80238ba:	687b      	ldr	r3, [r7, #4]
 80238bc:	699d      	ldr	r5, [r3, #24]
 80238be:	6838      	ldr	r0, [r7, #0]
 80238c0:	f7ff ffb7 	bl	8023832 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80238c4:	4603      	mov	r3, r0
 80238c6:	461a      	mov	r2, r3
 80238c8:	4629      	mov	r1, r5
 80238ca:	4620      	mov	r0, r4
 80238cc:	f7ff ffbc 	bl	8023848 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80238d0:	687b      	ldr	r3, [r7, #4]
 80238d2:	f103 0218 	add.w	r2, r3, #24
 80238d6:	687b      	ldr	r3, [r7, #4]
 80238d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80238da:	3304      	adds	r3, #4
 80238dc:	4619      	mov	r1, r3
 80238de:	4610      	mov	r0, r2
 80238e0:	f000 ff02 	bl	80246e8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80238e4:	687b      	ldr	r3, [r7, #4]
 80238e6:	69da      	ldr	r2, [r3, #28]
 80238e8:	687b      	ldr	r3, [r7, #4]
 80238ea:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 80238ec:	bf00      	nop
 80238ee:	3708      	adds	r7, #8
 80238f0:	46bd      	mov	sp, r7
 80238f2:	bdb0      	pop	{r4, r5, r7, pc}
 80238f4:	0803ee1c 	.word	0x0803ee1c

080238f8 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80238f8:	b480      	push	{r7}
 80238fa:	b083      	sub	sp, #12
 80238fc:	af00      	add	r7, sp, #0
 80238fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8023900:	687b      	ldr	r3, [r7, #4]
 8023902:	4618      	mov	r0, r3
 8023904:	370c      	adds	r7, #12
 8023906:	46bd      	mov	sp, r7
 8023908:	f85d 7b04 	ldr.w	r7, [sp], #4
 802390c:	4770      	bx	lr

0802390e <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 802390e:	b590      	push	{r4, r7, lr}
 8023910:	b089      	sub	sp, #36	; 0x24
 8023912:	af00      	add	r7, sp, #0
 8023914:	60f8      	str	r0, [r7, #12]
 8023916:	60b9      	str	r1, [r7, #8]
 8023918:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 802391a:	68fa      	ldr	r2, [r7, #12]
 802391c:	f107 031c 	add.w	r3, r7, #28
 8023920:	4611      	mov	r1, r2
 8023922:	4618      	mov	r0, r3
 8023924:	f001 f926 	bl	8024b74 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 8023928:	f107 021c 	add.w	r2, r7, #28
 802392c:	f107 0310 	add.w	r3, r7, #16
 8023930:	4611      	mov	r1, r2
 8023932:	4618      	mov	r0, r3
 8023934:	f001 f92f 	bl	8024b96 <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 8023938:	f107 031c 	add.w	r3, r7, #28
 802393c:	4618      	mov	r0, r3
 802393e:	f7ff f93b 	bl	8022bb8 <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8023942:	68fb      	ldr	r3, [r7, #12]
 8023944:	68ba      	ldr	r2, [r7, #8]
 8023946:	4611      	mov	r1, r2
 8023948:	4618      	mov	r0, r3
 802394a:	f001 f933 	bl	8024bb4 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 802394e:	68ba      	ldr	r2, [r7, #8]
 8023950:	f107 0310 	add.w	r3, r7, #16
 8023954:	4611      	mov	r1, r2
 8023956:	4618      	mov	r0, r3
 8023958:	f001 f92c 	bl	8024bb4 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 802395c:	68fb      	ldr	r3, [r7, #12]
 802395e:	4618      	mov	r0, r3
 8023960:	f7ff ff4e 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023964:	4604      	mov	r4, r0
 8023966:	68bb      	ldr	r3, [r7, #8]
 8023968:	4618      	mov	r0, r3
 802396a:	f7ff ff49 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802396e:	4603      	mov	r3, r0
 8023970:	4619      	mov	r1, r3
 8023972:	4620      	mov	r0, r4
 8023974:	f001 f93c 	bl	8024bf0 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 8023978:	f107 0310 	add.w	r3, r7, #16
 802397c:	4618      	mov	r0, r3
 802397e:	f7ff f93f 	bl	8022c00 <_ZNSt6vectorIhSaIhEED1Ev>
      }
 8023982:	bf00      	nop
 8023984:	3724      	adds	r7, #36	; 0x24
 8023986:	46bd      	mov	sp, r7
 8023988:	bd90      	pop	{r4, r7, pc}

0802398a <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 802398a:	b480      	push	{r7}
 802398c:	b083      	sub	sp, #12
 802398e:	af00      	add	r7, sp, #0
 8023990:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	4618      	mov	r0, r3
 8023996:	370c      	adds	r7, #12
 8023998:	46bd      	mov	sp, r7
 802399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802399e:	4770      	bx	lr

080239a0 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80239a0:	b5b0      	push	{r4, r5, r7, lr}
 80239a2:	b082      	sub	sp, #8
 80239a4:	af00      	add	r7, sp, #0
 80239a6:	6078      	str	r0, [r7, #4]
 80239a8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80239aa:	687b      	ldr	r3, [r7, #4]
 80239ac:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80239ae:	687b      	ldr	r3, [r7, #4]
 80239b0:	6a1b      	ldr	r3, [r3, #32]
 80239b2:	3b10      	subs	r3, #16
	if (this->_M_impl._M_finish._M_cur
 80239b4:	429a      	cmp	r2, r3
 80239b6:	d012      	beq.n	80239de <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 80239b8:	687c      	ldr	r4, [r7, #4]
 80239ba:	687b      	ldr	r3, [r7, #4]
 80239bc:	699d      	ldr	r5, [r3, #24]
 80239be:	6838      	ldr	r0, [r7, #0]
 80239c0:	f7ff ffe3 	bl	802398a <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80239c4:	4603      	mov	r3, r0
 80239c6:	461a      	mov	r2, r3
 80239c8:	4629      	mov	r1, r5
 80239ca:	4620      	mov	r0, r4
 80239cc:	f001 f91e 	bl	8024c0c <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80239d0:	687b      	ldr	r3, [r7, #4]
 80239d2:	699b      	ldr	r3, [r3, #24]
 80239d4:	f103 0210 	add.w	r2, r3, #16
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	619a      	str	r2, [r3, #24]
      }
 80239dc:	e007      	b.n	80239ee <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 80239de:	6838      	ldr	r0, [r7, #0]
 80239e0:	f7ff ffd3 	bl	802398a <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 80239e4:	4603      	mov	r3, r0
 80239e6:	4619      	mov	r1, r3
 80239e8:	6878      	ldr	r0, [r7, #4]
 80239ea:	f001 f923 	bl	8024c34 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 80239ee:	bf00      	nop
 80239f0:	3708      	adds	r7, #8
 80239f2:	46bd      	mov	sp, r7
 80239f4:	bdb0      	pop	{r4, r5, r7, pc}

080239f6 <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80239f6:	b580      	push	{r7, lr}
 80239f8:	b082      	sub	sp, #8
 80239fa:	af00      	add	r7, sp, #0
 80239fc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80239fe:	687b      	ldr	r3, [r7, #4]
 8023a00:	f103 0218 	add.w	r2, r3, #24
 8023a04:	687b      	ldr	r3, [r7, #4]
 8023a06:	3308      	adds	r3, #8
 8023a08:	4619      	mov	r1, r3
 8023a0a:	4610      	mov	r0, r2
 8023a0c:	f001 f956 	bl	8024cbc <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8023a10:	4603      	mov	r3, r0
 8023a12:	4618      	mov	r0, r3
 8023a14:	3708      	adds	r7, #8
 8023a16:	46bd      	mov	sp, r7
 8023a18:	bd80      	pop	{r7, pc}

08023a1a <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8023a1a:	b580      	push	{r7, lr}
 8023a1c:	b086      	sub	sp, #24
 8023a1e:	af00      	add	r7, sp, #0
 8023a20:	6078      	str	r0, [r7, #4]
	return *begin();
 8023a22:	f107 0308 	add.w	r3, r7, #8
 8023a26:	6879      	ldr	r1, [r7, #4]
 8023a28:	4618      	mov	r0, r3
 8023a2a:	f7ff fe47 	bl	80236bc <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8023a2e:	f107 0308 	add.w	r3, r7, #8
 8023a32:	4618      	mov	r0, r3
 8023a34:	f001 f956 	bl	8024ce4 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>
 8023a38:	4603      	mov	r3, r0
      }
 8023a3a:	4618      	mov	r0, r3
 8023a3c:	3718      	adds	r7, #24
 8023a3e:	46bd      	mov	sp, r7
 8023a40:	bd80      	pop	{r7, pc}

08023a42 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8023a42:	b480      	push	{r7}
 8023a44:	b083      	sub	sp, #12
 8023a46:	af00      	add	r7, sp, #0
 8023a48:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	4618      	mov	r0, r3
 8023a4e:	370c      	adds	r7, #12
 8023a50:	46bd      	mov	sp, r7
 8023a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a56:	4770      	bx	lr

08023a58 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8023a58:	b580      	push	{r7, lr}
 8023a5a:	b082      	sub	sp, #8
 8023a5c:	af00      	add	r7, sp, #0
 8023a5e:	6078      	str	r0, [r7, #4]
 8023a60:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8023a62:	6839      	ldr	r1, [r7, #0]
 8023a64:	6878      	ldr	r0, [r7, #4]
 8023a66:	f001 f949 	bl	8024cfc <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8023a6a:	687b      	ldr	r3, [r7, #4]
 8023a6c:	4618      	mov	r0, r3
 8023a6e:	3708      	adds	r7, #8
 8023a70:	46bd      	mov	sp, r7
 8023a72:	bd80      	pop	{r7, pc}

08023a74 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 8023a74:	b480      	push	{r7}
 8023a76:	b083      	sub	sp, #12
 8023a78:	af00      	add	r7, sp, #0
 8023a7a:	6078      	str	r0, [r7, #4]
 8023a7c:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8023a7e:	683b      	ldr	r3, [r7, #0]
 8023a80:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 8023a82:	687b      	ldr	r3, [r7, #4]
 8023a84:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8023a86:	683b      	ldr	r3, [r7, #0]
 8023a88:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8023a8a:	687b      	ldr	r3, [r7, #4]
 8023a8c:	605a      	str	r2, [r3, #4]
 8023a8e:	683b      	ldr	r3, [r7, #0]
 8023a90:	689a      	ldr	r2, [r3, #8]
 8023a92:	687b      	ldr	r3, [r7, #4]
 8023a94:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8023a96:	683b      	ldr	r3, [r7, #0]
 8023a98:	2200      	movs	r2, #0
 8023a9a:	609a      	str	r2, [r3, #8]
 8023a9c:	683b      	ldr	r3, [r7, #0]
 8023a9e:	689a      	ldr	r2, [r3, #8]
 8023aa0:	683b      	ldr	r3, [r7, #0]
 8023aa2:	605a      	str	r2, [r3, #4]
 8023aa4:	683b      	ldr	r3, [r7, #0]
 8023aa6:	685a      	ldr	r2, [r3, #4]
 8023aa8:	683b      	ldr	r3, [r7, #0]
 8023aaa:	601a      	str	r2, [r3, #0]
 8023aac:	687b      	ldr	r3, [r7, #4]
 8023aae:	4618      	mov	r0, r3
 8023ab0:	370c      	adds	r7, #12
 8023ab2:	46bd      	mov	sp, r7
 8023ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ab8:	4770      	bx	lr

08023aba <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8023aba:	b580      	push	{r7, lr}
 8023abc:	b082      	sub	sp, #8
 8023abe:	af00      	add	r7, sp, #0
 8023ac0:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8023ac2:	687b      	ldr	r3, [r7, #4]
 8023ac4:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8023ac6:	687b      	ldr	r3, [r7, #4]
 8023ac8:	691b      	ldr	r3, [r3, #16]
 8023aca:	3b10      	subs	r3, #16
	if (this->_M_impl._M_start._M_cur
 8023acc:	429a      	cmp	r2, r3
 8023ace:	d011      	beq.n	8023af4 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023ad0:	687b      	ldr	r3, [r7, #4]
 8023ad2:	4618      	mov	r0, r3
 8023ad4:	f7ff fe10 	bl	80236f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8023ad8:	4602      	mov	r2, r0
 8023ada:	687b      	ldr	r3, [r7, #4]
 8023adc:	689b      	ldr	r3, [r3, #8]
 8023ade:	4619      	mov	r1, r3
 8023ae0:	4610      	mov	r0, r2
 8023ae2:	f001 f917 	bl	8024d14 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8023ae6:	687b      	ldr	r3, [r7, #4]
 8023ae8:	689b      	ldr	r3, [r3, #8]
 8023aea:	f103 0210 	add.w	r2, r3, #16
 8023aee:	687b      	ldr	r3, [r7, #4]
 8023af0:	609a      	str	r2, [r3, #8]
      }
 8023af2:	e002      	b.n	8023afa <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8023af4:	6878      	ldr	r0, [r7, #4]
 8023af6:	f001 f91a 	bl	8024d2e <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>
      }
 8023afa:	bf00      	nop
 8023afc:	3708      	adds	r7, #8
 8023afe:	46bd      	mov	sp, r7
 8023b00:	bd80      	pop	{r7, pc}

08023b02 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 8023b02:	b480      	push	{r7}
 8023b04:	b083      	sub	sp, #12
 8023b06:	af00      	add	r7, sp, #0
 8023b08:	6078      	str	r0, [r7, #4]
 8023b0a:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8023b0c:	683b      	ldr	r3, [r7, #0]
 8023b0e:	4618      	mov	r0, r3
 8023b10:	370c      	adds	r7, #12
 8023b12:	46bd      	mov	sp, r7
 8023b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b18:	4770      	bx	lr

08023b1a <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023b1a:	b480      	push	{r7}
 8023b1c:	b083      	sub	sp, #12
 8023b1e:	af00      	add	r7, sp, #0
 8023b20:	6078      	str	r0, [r7, #4]
 8023b22:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	681a      	ldr	r2, [r3, #0]
 8023b28:	683b      	ldr	r3, [r7, #0]
 8023b2a:	681b      	ldr	r3, [r3, #0]
 8023b2c:	429a      	cmp	r2, r3
 8023b2e:	bf0c      	ite	eq
 8023b30:	2301      	moveq	r3, #1
 8023b32:	2300      	movne	r3, #0
 8023b34:	b2db      	uxtb	r3, r3
 8023b36:	4618      	mov	r0, r3
 8023b38:	370c      	adds	r7, #12
 8023b3a:	46bd      	mov	sp, r7
 8023b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b40:	4770      	bx	lr

08023b42 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8023b42:	b480      	push	{r7}
 8023b44:	b083      	sub	sp, #12
 8023b46:	af00      	add	r7, sp, #0
 8023b48:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8023b4a:	687b      	ldr	r3, [r7, #4]
 8023b4c:	681b      	ldr	r3, [r3, #0]
 8023b4e:	4618      	mov	r0, r3
 8023b50:	370c      	adds	r7, #12
 8023b52:	46bd      	mov	sp, r7
 8023b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b58:	4770      	bx	lr

08023b5a <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8023b5a:	b580      	push	{r7, lr}
 8023b5c:	b082      	sub	sp, #8
 8023b5e:	af00      	add	r7, sp, #0
 8023b60:	6078      	str	r0, [r7, #4]
 8023b62:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8023b64:	6839      	ldr	r1, [r7, #0]
 8023b66:	6878      	ldr	r0, [r7, #4]
 8023b68:	f001 f909 	bl	8024d7e <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>
	}
 8023b6c:	bf00      	nop
 8023b6e:	3708      	adds	r7, #8
 8023b70:	46bd      	mov	sp, r7
 8023b72:	bd80      	pop	{r7, pc}

08023b74 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8023b74:	b580      	push	{r7, lr}
 8023b76:	b082      	sub	sp, #8
 8023b78:	af00      	add	r7, sp, #0
 8023b7a:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	4618      	mov	r0, r3
 8023b80:	f7ff fd17 	bl	80235b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8023b84:	4602      	mov	r2, r0
 8023b86:	687b      	ldr	r3, [r7, #4]
 8023b88:	689b      	ldr	r3, [r3, #8]
 8023b8a:	4619      	mov	r1, r3
 8023b8c:	4610      	mov	r0, r2
 8023b8e:	f7ff ffe4 	bl	8023b5a <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8023b92:	687a      	ldr	r2, [r7, #4]
 8023b94:	687b      	ldr	r3, [r7, #4]
 8023b96:	68db      	ldr	r3, [r3, #12]
 8023b98:	4619      	mov	r1, r3
 8023b9a:	4610      	mov	r0, r2
 8023b9c:	f000 fdc0 	bl	8024720 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8023ba0:	687b      	ldr	r3, [r7, #4]
 8023ba2:	f103 0208 	add.w	r2, r3, #8
 8023ba6:	687b      	ldr	r3, [r7, #4]
 8023ba8:	695b      	ldr	r3, [r3, #20]
 8023baa:	3304      	adds	r3, #4
 8023bac:	4619      	mov	r1, r3
 8023bae:	4610      	mov	r0, r2
 8023bb0:	f000 fd9a 	bl	80246e8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8023bb4:	687b      	ldr	r3, [r7, #4]
 8023bb6:	68da      	ldr	r2, [r3, #12]
 8023bb8:	687b      	ldr	r3, [r7, #4]
 8023bba:	609a      	str	r2, [r3, #8]
    }
 8023bbc:	bf00      	nop
 8023bbe:	3708      	adds	r7, #8
 8023bc0:	46bd      	mov	sp, r7
 8023bc2:	bd80      	pop	{r7, pc}

08023bc4 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 8023bc4:	b580      	push	{r7, lr}
 8023bc6:	b082      	sub	sp, #8
 8023bc8:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8023bca:	4618      	mov	r0, r3
 8023bcc:	f000 f805 	bl	8023bda <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8023bd0:	4603      	mov	r3, r0
      }
 8023bd2:	4618      	mov	r0, r3
 8023bd4:	3708      	adds	r7, #8
 8023bd6:	46bd      	mov	sp, r7
 8023bd8:	bd80      	pop	{r7, pc}

08023bda <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8023bda:	b480      	push	{r7}
 8023bdc:	b083      	sub	sp, #12
 8023bde:	af00      	add	r7, sp, #0
 8023be0:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8023be2:	2301      	movs	r3, #1
      }
 8023be4:	4618      	mov	r0, r3
 8023be6:	370c      	adds	r7, #12
 8023be8:	46bd      	mov	sp, r7
 8023bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bee:	4770      	bx	lr

08023bf0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8023bf0:	b5b0      	push	{r4, r5, r7, lr}
 8023bf2:	b088      	sub	sp, #32
 8023bf4:	af00      	add	r7, sp, #0
 8023bf6:	6078      	str	r0, [r7, #4]
 8023bf8:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 8023bfa:	683b      	ldr	r3, [r7, #0]
 8023bfc:	2b00      	cmp	r3, #0
 8023bfe:	f000 80a8 	beq.w	8023d52 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
	{
	  const size_type __size = size();
 8023c02:	6878      	ldr	r0, [r7, #4]
 8023c04:	f7ff f8cf 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023c08:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8023c0a:	687b      	ldr	r3, [r7, #4]
 8023c0c:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 8023c0e:	687b      	ldr	r3, [r7, #4]
 8023c10:	685b      	ldr	r3, [r3, #4]
 8023c12:	1ad3      	subs	r3, r2, r3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8023c14:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 8023c16:	6878      	ldr	r0, [r7, #4]
 8023c18:	f001 f8bd 	bl	8024d96 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8023c1c:	4602      	mov	r2, r0
 8023c1e:	69fb      	ldr	r3, [r7, #28]
 8023c20:	4293      	cmp	r3, r2
 8023c22:	d808      	bhi.n	8023c36 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x46>
 8023c24:	6878      	ldr	r0, [r7, #4]
 8023c26:	f001 f8b6 	bl	8024d96 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8023c2a:	4602      	mov	r2, r0
 8023c2c:	69fb      	ldr	r3, [r7, #28]
 8023c2e:	1ad3      	subs	r3, r2, r3
 8023c30:	69ba      	ldr	r2, [r7, #24]
 8023c32:	429a      	cmp	r2, r3
 8023c34:	d901      	bls.n	8023c3a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4a>
 8023c36:	2301      	movs	r3, #1
 8023c38:	e000      	b.n	8023c3c <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
 8023c3a:	2300      	movs	r3, #0
 8023c3c:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 8023c3e:	69ba      	ldr	r2, [r7, #24]
 8023c40:	683b      	ldr	r3, [r7, #0]
 8023c42:	429a      	cmp	r2, r3
 8023c44:	d30f      	bcc.n	8023c66 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x76>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8023c46:	687b      	ldr	r3, [r7, #4]
 8023c48:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8023c4a:	687b      	ldr	r3, [r7, #4]
 8023c4c:	4618      	mov	r0, r3
 8023c4e:	f7ff fdd7 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023c52:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8023c54:	461a      	mov	r2, r3
 8023c56:	6839      	ldr	r1, [r7, #0]
 8023c58:	4620      	mov	r0, r4
 8023c5a:	f001 f8ad 	bl	8024db8 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 8023c5e:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 8023c60:	687b      	ldr	r3, [r7, #4]
 8023c62:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 8023c64:	e075      	b.n	8023d52 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
		_M_check_len(__n, "vector::_M_default_append");
 8023c66:	4a3d      	ldr	r2, [pc, #244]	; (8023d5c <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x16c>)
 8023c68:	6839      	ldr	r1, [r7, #0]
 8023c6a:	6878      	ldr	r0, [r7, #4]
 8023c6c:	f001 f8b3 	bl	8024dd6 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8023c70:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 8023c72:	687b      	ldr	r3, [r7, #4]
 8023c74:	6979      	ldr	r1, [r7, #20]
 8023c76:	4618      	mov	r0, r3
 8023c78:	f001 f8f4 	bl	8024e64 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8023c7c:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8023c7e:	f7ff ffa1 	bl	8023bc4 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8023c82:	4603      	mov	r3, r0
 8023c84:	2b00      	cmp	r3, #0
 8023c86:	d01b      	beq.n	8023cc0 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd0>
		      std::__uninitialized_default_n_a(__new_start + __size,
 8023c88:	693a      	ldr	r2, [r7, #16]
 8023c8a:	69fb      	ldr	r3, [r7, #28]
 8023c8c:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 8023c8e:	687b      	ldr	r3, [r7, #4]
 8023c90:	4618      	mov	r0, r3
 8023c92:	f7ff fdb5 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023c96:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 8023c98:	461a      	mov	r2, r3
 8023c9a:	6839      	ldr	r1, [r7, #0]
 8023c9c:	4620      	mov	r0, r4
 8023c9e:	f001 f88b 	bl	8024db8 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8023ca2:	687b      	ldr	r3, [r7, #4]
 8023ca4:	681c      	ldr	r4, [r3, #0]
 8023ca6:	687b      	ldr	r3, [r7, #4]
 8023ca8:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 8023caa:	687b      	ldr	r3, [r7, #4]
 8023cac:	4618      	mov	r0, r3
 8023cae:	f7ff fda7 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023cb2:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8023cb4:	693a      	ldr	r2, [r7, #16]
 8023cb6:	4629      	mov	r1, r5
 8023cb8:	4620      	mov	r0, r4
 8023cba:	f001 f8e7 	bl	8024e8c <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8023cbe:	e02e      	b.n	8023d1e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x12e>
		  pointer __destroy_from = pointer();
 8023cc0:	2300      	movs	r3, #0
 8023cc2:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 8023cc4:	693a      	ldr	r2, [r7, #16]
 8023cc6:	69fb      	ldr	r3, [r7, #28]
 8023cc8:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 8023cca:	687b      	ldr	r3, [r7, #4]
 8023ccc:	4618      	mov	r0, r3
 8023cce:	f7ff fd97 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023cd2:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 8023cd4:	461a      	mov	r2, r3
 8023cd6:	6839      	ldr	r1, [r7, #0]
 8023cd8:	4620      	mov	r0, r4
 8023cda:	f001 f86d 	bl	8024db8 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		      __destroy_from = __new_start + __size;
 8023cde:	693a      	ldr	r2, [r7, #16]
 8023ce0:	69fb      	ldr	r3, [r7, #28]
 8023ce2:	4413      	add	r3, r2
 8023ce4:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 8023ce6:	687b      	ldr	r3, [r7, #4]
 8023ce8:	681c      	ldr	r4, [r3, #0]
 8023cea:	687b      	ldr	r3, [r7, #4]
 8023cec:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 8023cee:	687b      	ldr	r3, [r7, #4]
 8023cf0:	4618      	mov	r0, r3
 8023cf2:	f7ff fd85 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023cf6:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 8023cf8:	693a      	ldr	r2, [r7, #16]
 8023cfa:	4629      	mov	r1, r5
 8023cfc:	4620      	mov	r0, r4
 8023cfe:	f001 f8d9 	bl	8024eb4 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8023d02:	687b      	ldr	r3, [r7, #4]
 8023d04:	681c      	ldr	r4, [r3, #0]
 8023d06:	687b      	ldr	r3, [r7, #4]
 8023d08:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 8023d0a:	687b      	ldr	r3, [r7, #4]
 8023d0c:	4618      	mov	r0, r3
 8023d0e:	f7ff fd77 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023d12:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8023d14:	461a      	mov	r2, r3
 8023d16:	4629      	mov	r1, r5
 8023d18:	4620      	mov	r0, r4
 8023d1a:	f7ff fd7c 	bl	8023816 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8023d1e:	6878      	ldr	r0, [r7, #4]
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8023d24:	687b      	ldr	r3, [r7, #4]
 8023d26:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8023d28:	687b      	ldr	r3, [r7, #4]
 8023d2a:	681b      	ldr	r3, [r3, #0]
 8023d2c:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8023d2e:	461a      	mov	r2, r3
 8023d30:	f7ff fd53 	bl	80237da <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 8023d34:	687b      	ldr	r3, [r7, #4]
 8023d36:	693a      	ldr	r2, [r7, #16]
 8023d38:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8023d3a:	69fa      	ldr	r2, [r7, #28]
 8023d3c:	683b      	ldr	r3, [r7, #0]
 8023d3e:	4413      	add	r3, r2
 8023d40:	693a      	ldr	r2, [r7, #16]
 8023d42:	441a      	add	r2, r3
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8023d48:	693a      	ldr	r2, [r7, #16]
 8023d4a:	697b      	ldr	r3, [r7, #20]
 8023d4c:	441a      	add	r2, r3
 8023d4e:	687b      	ldr	r3, [r7, #4]
 8023d50:	609a      	str	r2, [r3, #8]
    }
 8023d52:	bf00      	nop
 8023d54:	3720      	adds	r7, #32
 8023d56:	46bd      	mov	sp, r7
 8023d58:	bdb0      	pop	{r4, r5, r7, pc}
 8023d5a:	bf00      	nop
 8023d5c:	0803ee4c 	.word	0x0803ee4c

08023d60 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8023d60:	b590      	push	{r4, r7, lr}
 8023d62:	b085      	sub	sp, #20
 8023d64:	af00      	add	r7, sp, #0
 8023d66:	6078      	str	r0, [r7, #4]
 8023d68:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8023d6a:	687b      	ldr	r3, [r7, #4]
 8023d6c:	685a      	ldr	r2, [r3, #4]
 8023d6e:	683b      	ldr	r3, [r7, #0]
 8023d70:	1ad3      	subs	r3, r2, r3
 8023d72:	60fb      	str	r3, [r7, #12]
 8023d74:	68fb      	ldr	r3, [r7, #12]
 8023d76:	2b00      	cmp	r3, #0
 8023d78:	d00e      	beq.n	8023d98 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8023d7a:	687b      	ldr	r3, [r7, #4]
 8023d7c:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8023d7e:	687b      	ldr	r3, [r7, #4]
 8023d80:	4618      	mov	r0, r3
 8023d82:	f7ff fd3d 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023d86:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8023d88:	461a      	mov	r2, r3
 8023d8a:	4621      	mov	r1, r4
 8023d8c:	6838      	ldr	r0, [r7, #0]
 8023d8e:	f7ff fd42 	bl	8023816 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8023d92:	687b      	ldr	r3, [r7, #4]
 8023d94:	683a      	ldr	r2, [r7, #0]
 8023d96:	605a      	str	r2, [r3, #4]
      }
 8023d98:	bf00      	nop
 8023d9a:	3714      	adds	r7, #20
 8023d9c:	46bd      	mov	sp, r7
 8023d9e:	bd90      	pop	{r4, r7, pc}

08023da0 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8023da0:	b480      	push	{r7}
 8023da2:	b083      	sub	sp, #12
 8023da4:	af00      	add	r7, sp, #0
 8023da6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8023da8:	687b      	ldr	r3, [r7, #4]
 8023daa:	4618      	mov	r0, r3
 8023dac:	370c      	adds	r7, #12
 8023dae:	46bd      	mov	sp, r7
 8023db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023db4:	4770      	bx	lr

08023db6 <_ZStneRKSaIhES1_>:
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

#if __cpp_impl_three_way_comparison < 201907L
      friend _GLIBCXX20_CONSTEXPR bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8023db6:	b480      	push	{r7}
 8023db8:	b083      	sub	sp, #12
 8023dba:	af00      	add	r7, sp, #0
 8023dbc:	6078      	str	r0, [r7, #4]
 8023dbe:	6039      	str	r1, [r7, #0]
      { return false; }
 8023dc0:	2300      	movs	r3, #0
 8023dc2:	4618      	mov	r0, r3
 8023dc4:	370c      	adds	r7, #12
 8023dc6:	46bd      	mov	sp, r7
 8023dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dcc:	4770      	bx	lr

08023dce <_ZNSt6vectorIhSaIhEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8023dce:	b580      	push	{r7, lr}
 8023dd0:	b082      	sub	sp, #8
 8023dd2:	af00      	add	r7, sp, #0
 8023dd4:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8023dd6:	687b      	ldr	r3, [r7, #4]
 8023dd8:	681b      	ldr	r3, [r3, #0]
 8023dda:	4619      	mov	r1, r3
 8023ddc:	6878      	ldr	r0, [r7, #4]
 8023dde:	f7ff ffbf 	bl	8023d60 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8023de2:	bf00      	nop
 8023de4:	3708      	adds	r7, #8
 8023de6:	46bd      	mov	sp, r7
 8023de8:	bd80      	pop	{r7, pc}

08023dea <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8023dea:	b580      	push	{r7, lr}
 8023dec:	b082      	sub	sp, #8
 8023dee:	af00      	add	r7, sp, #0
 8023df0:	6078      	str	r0, [r7, #4]
 8023df2:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 8023df4:	461a      	mov	r2, r3
 8023df6:	6839      	ldr	r1, [r7, #0]
 8023df8:	6878      	ldr	r0, [r7, #4]
 8023dfa:	f001 f874 	bl	8024ee6 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8023dfe:	bf00      	nop
 8023e00:	3708      	adds	r7, #8
 8023e02:	46bd      	mov	sp, r7
 8023e04:	bd80      	pop	{r7, pc}

08023e06 <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8023e06:	b480      	push	{r7}
 8023e08:	b083      	sub	sp, #12
 8023e0a:	af00      	add	r7, sp, #0
 8023e0c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8023e0e:	687b      	ldr	r3, [r7, #4]
 8023e10:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8023e12:	687b      	ldr	r3, [r7, #4]
 8023e14:	681b      	ldr	r3, [r3, #0]
 8023e16:	1ad3      	subs	r3, r2, r3
 8023e18:	4618      	mov	r0, r3
 8023e1a:	370c      	adds	r7, #12
 8023e1c:	46bd      	mov	sp, r7
 8023e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e22:	4770      	bx	lr

08023e24 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8023e24:	b580      	push	{r7, lr}
 8023e26:	b084      	sub	sp, #16
 8023e28:	af00      	add	r7, sp, #0
 8023e2a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8023e2c:	687a      	ldr	r2, [r7, #4]
 8023e2e:	f107 030c 	add.w	r3, r7, #12
 8023e32:	4611      	mov	r1, r2
 8023e34:	4618      	mov	r0, r3
 8023e36:	f001 f862 	bl	8024efe <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8023e3a:	68fb      	ldr	r3, [r7, #12]
 8023e3c:	4618      	mov	r0, r3
 8023e3e:	3710      	adds	r7, #16
 8023e40:	46bd      	mov	sp, r7
 8023e42:	bd80      	pop	{r7, pc}

08023e44 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8023e44:	b580      	push	{r7, lr}
 8023e46:	b084      	sub	sp, #16
 8023e48:	af00      	add	r7, sp, #0
 8023e4a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8023e4c:	687b      	ldr	r3, [r7, #4]
 8023e4e:	1d1a      	adds	r2, r3, #4
 8023e50:	f107 030c 	add.w	r3, r7, #12
 8023e54:	4611      	mov	r1, r2
 8023e56:	4618      	mov	r0, r3
 8023e58:	f001 f851 	bl	8024efe <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8023e5c:	68fb      	ldr	r3, [r7, #12]
 8023e5e:	4618      	mov	r0, r3
 8023e60:	3710      	adds	r7, #16
 8023e62:	46bd      	mov	sp, r7
 8023e64:	bd80      	pop	{r7, pc}

08023e66 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8023e66:	b580      	push	{r7, lr}
 8023e68:	b086      	sub	sp, #24
 8023e6a:	af00      	add	r7, sp, #0
 8023e6c:	60f8      	str	r0, [r7, #12]
 8023e6e:	60b9      	str	r1, [r7, #8]
 8023e70:	607a      	str	r2, [r7, #4]
 8023e72:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8023e74:	68fb      	ldr	r3, [r7, #12]
 8023e76:	68b9      	ldr	r1, [r7, #8]
 8023e78:	4618      	mov	r0, r3
 8023e7a:	f000 fff3 	bl	8024e64 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8023e7e:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8023e80:	68fb      	ldr	r3, [r7, #12]
 8023e82:	4618      	mov	r0, r3
 8023e84:	f7ff fcbc 	bl	8023800 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023e88:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8023e8a:	697a      	ldr	r2, [r7, #20]
 8023e8c:	6839      	ldr	r1, [r7, #0]
 8023e8e:	6878      	ldr	r0, [r7, #4]
 8023e90:	f001 f845 	bl	8024f1e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8023e94:	697b      	ldr	r3, [r7, #20]
	}
 8023e96:	4618      	mov	r0, r3
 8023e98:	3718      	adds	r7, #24
 8023e9a:	46bd      	mov	sp, r7
 8023e9c:	bd80      	pop	{r7, pc}

08023e9e <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8023e9e:	b580      	push	{r7, lr}
 8023ea0:	b084      	sub	sp, #16
 8023ea2:	af00      	add	r7, sp, #0
 8023ea4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8023ea6:	687a      	ldr	r2, [r7, #4]
 8023ea8:	f107 030c 	add.w	r3, r7, #12
 8023eac:	4611      	mov	r1, r2
 8023eae:	4618      	mov	r0, r3
 8023eb0:	f001 f846 	bl	8024f40 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8023eb4:	68fb      	ldr	r3, [r7, #12]
 8023eb6:	4618      	mov	r0, r3
 8023eb8:	3710      	adds	r7, #16
 8023eba:	46bd      	mov	sp, r7
 8023ebc:	bd80      	pop	{r7, pc}

08023ebe <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8023ebe:	b590      	push	{r4, r7, lr}
 8023ec0:	b085      	sub	sp, #20
 8023ec2:	af00      	add	r7, sp, #0
 8023ec4:	60f8      	str	r0, [r7, #12]
 8023ec6:	60b9      	str	r1, [r7, #8]
 8023ec8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8023eca:	68f8      	ldr	r0, [r7, #12]
 8023ecc:	f001 f848 	bl	8024f60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8023ed0:	4604      	mov	r4, r0
 8023ed2:	68b8      	ldr	r0, [r7, #8]
 8023ed4:	f001 f844 	bl	8024f60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8023ed8:	4603      	mov	r3, r0
 8023eda:	687a      	ldr	r2, [r7, #4]
 8023edc:	4619      	mov	r1, r3
 8023ede:	4620      	mov	r0, r4
 8023ee0:	f001 f849 	bl	8024f76 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 8023ee4:	4603      	mov	r3, r0
    }
 8023ee6:	4618      	mov	r0, r3
 8023ee8:	3714      	adds	r7, #20
 8023eea:	46bd      	mov	sp, r7
 8023eec:	bd90      	pop	{r4, r7, pc}

08023eee <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8023eee:	b580      	push	{r7, lr}
 8023ef0:	b084      	sub	sp, #16
 8023ef2:	af00      	add	r7, sp, #0
 8023ef4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8023ef6:	687b      	ldr	r3, [r7, #4]
 8023ef8:	1d1a      	adds	r2, r3, #4
 8023efa:	f107 030c 	add.w	r3, r7, #12
 8023efe:	4611      	mov	r1, r2
 8023f00:	4618      	mov	r0, r3
 8023f02:	f001 f81d 	bl	8024f40 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8023f06:	68fb      	ldr	r3, [r7, #12]
 8023f08:	4618      	mov	r0, r3
 8023f0a:	3710      	adds	r7, #16
 8023f0c:	46bd      	mov	sp, r7
 8023f0e:	bd80      	pop	{r7, pc}

08023f10 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8023f10:	b580      	push	{r7, lr}
 8023f12:	b084      	sub	sp, #16
 8023f14:	af00      	add	r7, sp, #0
 8023f16:	60f8      	str	r0, [r7, #12]
 8023f18:	60b9      	str	r1, [r7, #8]
 8023f1a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8023f1c:	68b9      	ldr	r1, [r7, #8]
 8023f1e:	68f8      	ldr	r0, [r7, #12]
 8023f20:	f001 f84a 	bl	8024fb8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 8023f24:	bf00      	nop
 8023f26:	3710      	adds	r7, #16
 8023f28:	46bd      	mov	sp, r7
 8023f2a:	bd80      	pop	{r7, pc}

08023f2c <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8023f2c:	b590      	push	{r4, r7, lr}
 8023f2e:	b085      	sub	sp, #20
 8023f30:	af00      	add	r7, sp, #0
 8023f32:	60f8      	str	r0, [r7, #12]
 8023f34:	60b9      	str	r1, [r7, #8]
 8023f36:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8023f38:	68f8      	ldr	r0, [r7, #12]
 8023f3a:	f001 f84a 	bl	8024fd2 <_ZSt12__miter_baseIPhET_S1_>
 8023f3e:	4604      	mov	r4, r0
 8023f40:	68b8      	ldr	r0, [r7, #8]
 8023f42:	f001 f846 	bl	8024fd2 <_ZSt12__miter_baseIPhET_S1_>
 8023f46:	4603      	mov	r3, r0
 8023f48:	687a      	ldr	r2, [r7, #4]
 8023f4a:	4619      	mov	r1, r3
 8023f4c:	4620      	mov	r0, r4
 8023f4e:	f001 f84b 	bl	8024fe8 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8023f52:	4603      	mov	r3, r0
    }
 8023f54:	4618      	mov	r0, r3
 8023f56:	3714      	adds	r7, #20
 8023f58:	46bd      	mov	sp, r7
 8023f5a:	bd90      	pop	{r4, r7, pc}

08023f5c <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8023f5c:	b580      	push	{r7, lr}
 8023f5e:	b084      	sub	sp, #16
 8023f60:	af00      	add	r7, sp, #0
 8023f62:	60f8      	str	r0, [r7, #12]
 8023f64:	60b9      	str	r1, [r7, #8]
 8023f66:	607a      	str	r2, [r7, #4]
 8023f68:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8023f6a:	687a      	ldr	r2, [r7, #4]
 8023f6c:	68b9      	ldr	r1, [r7, #8]
 8023f6e:	68f8      	ldr	r0, [r7, #12]
 8023f70:	f001 f85d 	bl	802502e <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 8023f74:	4603      	mov	r3, r0
 8023f76:	4618      	mov	r0, r3
 8023f78:	3710      	adds	r7, #16
 8023f7a:	46bd      	mov	sp, r7
 8023f7c:	bd80      	pop	{r7, pc}
	...

08023f80 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023f80:	b580      	push	{r7, lr}
 8023f82:	b082      	sub	sp, #8
 8023f84:	af00      	add	r7, sp, #0
 8023f86:	6078      	str	r0, [r7, #4]
 8023f88:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8023f8a:	f001 f862 	bl	8025052 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8023f8e:	4603      	mov	r3, r0
 8023f90:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8023f92:	687b      	ldr	r3, [r7, #4]
 8023f94:	68da      	ldr	r2, [r3, #12]
 8023f96:	683b      	ldr	r3, [r7, #0]
 8023f98:	68db      	ldr	r3, [r3, #12]
 8023f9a:	1ad3      	subs	r3, r2, r3
 8023f9c:	109b      	asrs	r3, r3, #2
 8023f9e:	3b01      	subs	r3, #1
 8023fa0:	fb01 f303 	mul.w	r3, r1, r3
 8023fa4:	687a      	ldr	r2, [r7, #4]
 8023fa6:	6811      	ldr	r1, [r2, #0]
 8023fa8:	687a      	ldr	r2, [r7, #4]
 8023faa:	6852      	ldr	r2, [r2, #4]
 8023fac:	1a8a      	subs	r2, r1, r2
 8023fae:	1092      	asrs	r2, r2, #2
 8023fb0:	4908      	ldr	r1, [pc, #32]	; (8023fd4 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8023fb2:	fb01 f202 	mul.w	r2, r1, r2
 8023fb6:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8023fb8:	683a      	ldr	r2, [r7, #0]
 8023fba:	6891      	ldr	r1, [r2, #8]
 8023fbc:	683a      	ldr	r2, [r7, #0]
 8023fbe:	6812      	ldr	r2, [r2, #0]
 8023fc0:	1a8a      	subs	r2, r1, r2
 8023fc2:	1092      	asrs	r2, r2, #2
 8023fc4:	4903      	ldr	r1, [pc, #12]	; (8023fd4 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8023fc6:	fb01 f202 	mul.w	r2, r1, r2
 8023fca:	4413      	add	r3, r2
      }
 8023fcc:	4618      	mov	r0, r3
 8023fce:	3708      	adds	r7, #8
 8023fd0:	46bd      	mov	sp, r7
 8023fd2:	bd80      	pop	{r7, pc}
 8023fd4:	cccccccd 	.word	0xcccccccd

08023fd8 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8023fd8:	b580      	push	{r7, lr}
 8023fda:	b082      	sub	sp, #8
 8023fdc:	af00      	add	r7, sp, #0
 8023fde:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8023fe0:	687b      	ldr	r3, [r7, #4]
 8023fe2:	f103 0218 	add.w	r2, r3, #24
 8023fe6:	687b      	ldr	r3, [r7, #4]
 8023fe8:	3308      	adds	r3, #8
 8023fea:	4619      	mov	r1, r3
 8023fec:	4610      	mov	r0, r2
 8023fee:	f001 f838 	bl	8025062 <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8023ff2:	4603      	mov	r3, r0
 8023ff4:	4618      	mov	r0, r3
 8023ff6:	3708      	adds	r7, #8
 8023ff8:	46bd      	mov	sp, r7
 8023ffa:	bd80      	pop	{r7, pc}

08023ffc <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8023ffc:	b480      	push	{r7}
 8023ffe:	b083      	sub	sp, #12
 8024000:	af00      	add	r7, sp, #0
 8024002:	6078      	str	r0, [r7, #4]
 8024004:	687b      	ldr	r3, [r7, #4]
 8024006:	681b      	ldr	r3, [r3, #0]
 8024008:	4618      	mov	r0, r3
 802400a:	370c      	adds	r7, #12
 802400c:	46bd      	mov	sp, r7
 802400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024012:	4770      	bx	lr

08024014 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8024014:	b590      	push	{r4, r7, lr}
 8024016:	b083      	sub	sp, #12
 8024018:	af00      	add	r7, sp, #0
 802401a:	6078      	str	r0, [r7, #4]
 802401c:	6878      	ldr	r0, [r7, #4]
 802401e:	f7ff ffed 	bl	8023ffc <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8024022:	4604      	mov	r4, r0
 8024024:	6878      	ldr	r0, [r7, #4]
 8024026:	f001 f840 	bl	80250aa <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>
 802402a:	4602      	mov	r2, r0
 802402c:	4613      	mov	r3, r2
 802402e:	009b      	lsls	r3, r3, #2
 8024030:	4413      	add	r3, r2
 8024032:	009b      	lsls	r3, r3, #2
 8024034:	4423      	add	r3, r4
 8024036:	4618      	mov	r0, r3
 8024038:	370c      	adds	r7, #12
 802403a:	46bd      	mov	sp, r7
 802403c:	bd90      	pop	{r4, r7, pc}

0802403e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 802403e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024040:	b09f      	sub	sp, #124	; 0x7c
 8024042:	af02      	add	r7, sp, #8
 8024044:	60f8      	str	r0, [r7, #12]
 8024046:	60b9      	str	r1, [r7, #8]
 8024048:	607a      	str	r2, [r7, #4]
 802404a:	703b      	strb	r3, [r7, #0]
	  const size_type __len = std::distance(__first, __last);
 802404c:	68bb      	ldr	r3, [r7, #8]
 802404e:	6879      	ldr	r1, [r7, #4]
 8024050:	4618      	mov	r0, r3
 8024052:	f001 f836 	bl	80250c2 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8024056:	4603      	mov	r3, r0
 8024058:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 802405a:	68f8      	ldr	r0, [r7, #12]
 802405c:	f7ff f8de 	bl	802321c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8024060:	4602      	mov	r2, r0
 8024062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024064:	4293      	cmp	r3, r2
 8024066:	bf8c      	ite	hi
 8024068:	2301      	movhi	r3, #1
 802406a:	2300      	movls	r3, #0
 802406c:	b2db      	uxtb	r3, r3
 802406e:	2b00      	cmp	r3, #0
 8024070:	d031      	beq.n	80240d6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x98>
	      _ForwardIterator __mid = __first;
 8024072:	68bb      	ldr	r3, [r7, #8]
 8024074:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 8024076:	68f8      	ldr	r0, [r7, #12]
 8024078:	f7ff f8d0 	bl	802321c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 802407c:	4602      	mov	r2, r0
 802407e:	f107 0314 	add.w	r3, r7, #20
 8024082:	4611      	mov	r1, r2
 8024084:	4618      	mov	r0, r3
 8024086:	f001 f830 	bl	80250ea <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>
	      std::copy(__first, __mid, begin());
 802408a:	68bc      	ldr	r4, [r7, #8]
 802408c:	697d      	ldr	r5, [r7, #20]
 802408e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8024092:	68f9      	ldr	r1, [r7, #12]
 8024094:	4618      	mov	r0, r3
 8024096:	f000 f9e1 	bl	802445c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 802409a:	f107 0018 	add.w	r0, r7, #24
 802409e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80240a2:	462a      	mov	r2, r5
 80240a4:	4621      	mov	r1, r4
 80240a6:	f001 f833 	bl	8025110 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_range_insert_aux(end(), __mid, __last,
 80240aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80240ae:	68f9      	ldr	r1, [r7, #12]
 80240b0:	4618      	mov	r0, r3
 80240b2:	f000 f9e2 	bl	802447a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 80240b6:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 80240b8:	f107 0308 	add.w	r3, r7, #8
 80240bc:	4618      	mov	r0, r3
 80240be:	f001 f847 	bl	8025150 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
	      _M_range_insert_aux(end(), __mid, __last,
 80240c2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80240c6:	f88d 6000 	strb.w	r6, [sp]
 80240ca:	687b      	ldr	r3, [r7, #4]
 80240cc:	4622      	mov	r2, r4
 80240ce:	68f8      	ldr	r0, [r7, #12]
 80240d0:	f001 f849 	bl	8025166 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>
	}
 80240d4:	e014      	b.n	8024100 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 80240d6:	68bc      	ldr	r4, [r7, #8]
 80240d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80240dc:	68f9      	ldr	r1, [r7, #12]
 80240de:	4618      	mov	r0, r3
 80240e0:	f000 f9bc 	bl	802445c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 80240e4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80240e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80240ec:	687a      	ldr	r2, [r7, #4]
 80240ee:	4621      	mov	r1, r4
 80240f0:	f001 f80e 	bl	8025110 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 80240f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80240f8:	4619      	mov	r1, r3
 80240fa:	68f8      	ldr	r0, [r7, #12]
 80240fc:	f001 f8b0 	bl	8025260 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
	}
 8024100:	bf00      	nop
 8024102:	3774      	adds	r7, #116	; 0x74
 8024104:	46bd      	mov	sp, r7
 8024106:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024108 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8024108:	b580      	push	{r7, lr}
 802410a:	b084      	sub	sp, #16
 802410c:	af00      	add	r7, sp, #0
 802410e:	60f8      	str	r0, [r7, #12]
 8024110:	60b9      	str	r1, [r7, #8]
 8024112:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8024114:	6878      	ldr	r0, [r7, #4]
 8024116:	f001 f8d6 	bl	80252c6 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 802411a:	4603      	mov	r3, r0
 802411c:	461a      	mov	r2, r3
 802411e:	68b9      	ldr	r1, [r7, #8]
 8024120:	68f8      	ldr	r0, [r7, #12]
 8024122:	f001 f8db 	bl	80252dc <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8024126:	bf00      	nop
 8024128:	3710      	adds	r7, #16
 802412a:	46bd      	mov	sp, r7
 802412c:	bd80      	pop	{r7, pc}
	...

08024130 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8024130:	b5b0      	push	{r4, r5, r7, lr}
 8024132:	b082      	sub	sp, #8
 8024134:	af00      	add	r7, sp, #0
 8024136:	6078      	str	r0, [r7, #4]
 8024138:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 802413a:	6878      	ldr	r0, [r7, #4]
 802413c:	f7ff f86e 	bl	802321c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8024140:	4604      	mov	r4, r0
 8024142:	6878      	ldr	r0, [r7, #4]
 8024144:	f001 f8e3 	bl	802530e <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8024148:	4603      	mov	r3, r0
 802414a:	429c      	cmp	r4, r3
 802414c:	bf0c      	ite	eq
 802414e:	2301      	moveq	r3, #1
 8024150:	2300      	movne	r3, #0
 8024152:	b2db      	uxtb	r3, r3
 8024154:	2b00      	cmp	r3, #0
 8024156:	d002      	beq.n	802415e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8024158:	4817      	ldr	r0, [pc, #92]	; (80241b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x88>)
 802415a:	f019 f97f 	bl	803d45c <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 802415e:	2101      	movs	r1, #1
 8024160:	6878      	ldr	r0, [r7, #4]
 8024162:	f001 f8e5 	bl	8025330 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8024166:	687a      	ldr	r2, [r7, #4]
 8024168:	687b      	ldr	r3, [r7, #4]
 802416a:	695b      	ldr	r3, [r3, #20]
 802416c:	1f1c      	subs	r4, r3, #4
 802416e:	4610      	mov	r0, r2
 8024170:	f001 f8f6 	bl	8025360 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8024174:	4603      	mov	r3, r0
 8024176:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8024178:	687b      	ldr	r3, [r7, #4]
 802417a:	f103 0208 	add.w	r2, r3, #8
 802417e:	687b      	ldr	r3, [r7, #4]
 8024180:	695b      	ldr	r3, [r3, #20]
 8024182:	3b04      	subs	r3, #4
 8024184:	4619      	mov	r1, r3
 8024186:	4610      	mov	r0, r2
 8024188:	f001 f8fc 	bl	8025384 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 802418c:	687b      	ldr	r3, [r7, #4]
 802418e:	691b      	ldr	r3, [r3, #16]
 8024190:	f1a3 0214 	sub.w	r2, r3, #20
 8024194:	687b      	ldr	r3, [r7, #4]
 8024196:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8024198:	687c      	ldr	r4, [r7, #4]
 802419a:	687b      	ldr	r3, [r7, #4]
 802419c:	689d      	ldr	r5, [r3, #8]
 802419e:	6838      	ldr	r0, [r7, #0]
 80241a0:	f001 f891 	bl	80252c6 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 80241a4:	4603      	mov	r3, r0
 80241a6:	461a      	mov	r2, r3
 80241a8:	4629      	mov	r1, r5
 80241aa:	4620      	mov	r0, r4
 80241ac:	f7ff ffac 	bl	8024108 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
      }
 80241b0:	bf00      	nop
 80241b2:	3708      	adds	r7, #8
 80241b4:	46bd      	mov	sp, r7
 80241b6:	bdb0      	pop	{r4, r5, r7, pc}
 80241b8:	0803ee1c 	.word	0x0803ee1c

080241bc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80241bc:	b580      	push	{r7, lr}
 80241be:	b082      	sub	sp, #8
 80241c0:	af00      	add	r7, sp, #0
 80241c2:	6078      	str	r0, [r7, #4]
 80241c4:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80241c6:	f001 f90c 	bl	80253e2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80241ca:	4603      	mov	r3, r0
 80241cc:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80241ce:	687b      	ldr	r3, [r7, #4]
 80241d0:	68da      	ldr	r2, [r3, #12]
 80241d2:	683b      	ldr	r3, [r7, #0]
 80241d4:	68db      	ldr	r3, [r3, #12]
 80241d6:	1ad3      	subs	r3, r2, r3
 80241d8:	109b      	asrs	r3, r3, #2
 80241da:	3b01      	subs	r3, #1
 80241dc:	fb01 f303 	mul.w	r3, r1, r3
 80241e0:	687a      	ldr	r2, [r7, #4]
 80241e2:	6811      	ldr	r1, [r2, #0]
 80241e4:	687a      	ldr	r2, [r7, #4]
 80241e6:	6852      	ldr	r2, [r2, #4]
 80241e8:	1a8a      	subs	r2, r1, r2
 80241ea:	1092      	asrs	r2, r2, #2
 80241ec:	4908      	ldr	r1, [pc, #32]	; (8024210 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 80241ee:	fb01 f202 	mul.w	r2, r1, r2
 80241f2:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80241f4:	683a      	ldr	r2, [r7, #0]
 80241f6:	6891      	ldr	r1, [r2, #8]
 80241f8:	683a      	ldr	r2, [r7, #0]
 80241fa:	6812      	ldr	r2, [r2, #0]
 80241fc:	1a8a      	subs	r2, r1, r2
 80241fe:	1092      	asrs	r2, r2, #2
 8024200:	4903      	ldr	r1, [pc, #12]	; (8024210 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8024202:	fb01 f202 	mul.w	r2, r1, r2
 8024206:	4413      	add	r3, r2
      }
 8024208:	4618      	mov	r0, r3
 802420a:	3708      	adds	r7, #8
 802420c:	46bd      	mov	sp, r7
 802420e:	bd80      	pop	{r7, pc}
 8024210:	cccccccd 	.word	0xcccccccd

08024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8024214:	b480      	push	{r7}
 8024216:	b083      	sub	sp, #12
 8024218:	af00      	add	r7, sp, #0
 802421a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802421c:	687b      	ldr	r3, [r7, #4]
 802421e:	4618      	mov	r0, r3
 8024220:	370c      	adds	r7, #12
 8024222:	46bd      	mov	sp, r7
 8024224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024228:	4770      	bx	lr

0802422a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 802422a:	b580      	push	{r7, lr}
 802422c:	b082      	sub	sp, #8
 802422e:	af00      	add	r7, sp, #0
 8024230:	6078      	str	r0, [r7, #4]
 8024232:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8024234:	6839      	ldr	r1, [r7, #0]
 8024236:	6878      	ldr	r0, [r7, #4]
 8024238:	f001 f8db 	bl	80253f2 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>
	}
 802423c:	bf00      	nop
 802423e:	3708      	adds	r7, #8
 8024240:	46bd      	mov	sp, r7
 8024242:	bd80      	pop	{r7, pc}

08024244 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 8024244:	b580      	push	{r7, lr}
 8024246:	b082      	sub	sp, #8
 8024248:	af00      	add	r7, sp, #0
 802424a:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 802424c:	687a      	ldr	r2, [r7, #4]
 802424e:	687b      	ldr	r3, [r7, #4]
 8024250:	69db      	ldr	r3, [r3, #28]
 8024252:	4619      	mov	r1, r3
 8024254:	4610      	mov	r0, r2
 8024256:	f001 f8b1 	bl	80253bc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 802425a:	687b      	ldr	r3, [r7, #4]
 802425c:	f103 0218 	add.w	r2, r3, #24
 8024260:	687b      	ldr	r3, [r7, #4]
 8024262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024264:	3b04      	subs	r3, #4
 8024266:	4619      	mov	r1, r3
 8024268:	4610      	mov	r0, r2
 802426a:	f001 f88b 	bl	8025384 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 802426e:	687b      	ldr	r3, [r7, #4]
 8024270:	6a1b      	ldr	r3, [r3, #32]
 8024272:	f1a3 0214 	sub.w	r2, r3, #20
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 802427a:	687b      	ldr	r3, [r7, #4]
 802427c:	4618      	mov	r0, r3
 802427e:	f7ff ffc9 	bl	8024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024282:	4602      	mov	r2, r0
 8024284:	687b      	ldr	r3, [r7, #4]
 8024286:	699b      	ldr	r3, [r3, #24]
 8024288:	4619      	mov	r1, r3
 802428a:	4610      	mov	r0, r2
 802428c:	f7ff ffcd 	bl	802422a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
    }
 8024290:	bf00      	nop
 8024292:	3708      	adds	r7, #8
 8024294:	46bd      	mov	sp, r7
 8024296:	bd80      	pop	{r7, pc}

08024298 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024298:	b480      	push	{r7}
 802429a:	b083      	sub	sp, #12
 802429c:	af00      	add	r7, sp, #0
 802429e:	6078      	str	r0, [r7, #4]
 80242a0:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80242a2:	687b      	ldr	r3, [r7, #4]
 80242a4:	681a      	ldr	r2, [r3, #0]
 80242a6:	683b      	ldr	r3, [r7, #0]
 80242a8:	681b      	ldr	r3, [r3, #0]
 80242aa:	429a      	cmp	r2, r3
 80242ac:	bf0c      	ite	eq
 80242ae:	2301      	moveq	r3, #1
 80242b0:	2300      	movne	r3, #0
 80242b2:	b2db      	uxtb	r3, r3
 80242b4:	4618      	mov	r0, r3
 80242b6:	370c      	adds	r7, #12
 80242b8:	46bd      	mov	sp, r7
 80242ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242be:	4770      	bx	lr

080242c0 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 80242c0:	b580      	push	{r7, lr}
 80242c2:	b086      	sub	sp, #24
 80242c4:	af00      	add	r7, sp, #0
 80242c6:	6078      	str	r0, [r7, #4]
 80242c8:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 80242ca:	f107 0308 	add.w	r3, r7, #8
 80242ce:	683a      	ldr	r2, [r7, #0]
 80242d0:	6879      	ldr	r1, [r7, #4]
 80242d2:	4618      	mov	r0, r3
 80242d4:	f001 f898 	bl	8025408 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80242d8:	f107 0308 	add.w	r3, r7, #8
 80242dc:	4618      	mov	r0, r3
 80242de:	f001 f8a6 	bl	802542e <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>
 80242e2:	4603      	mov	r3, r0
 80242e4:	4618      	mov	r0, r3
 80242e6:	3718      	adds	r7, #24
 80242e8:	46bd      	mov	sp, r7
 80242ea:	bd80      	pop	{r7, pc}

080242ec <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80242ec:	b580      	push	{r7, lr}
 80242ee:	b082      	sub	sp, #8
 80242f0:	af00      	add	r7, sp, #0
 80242f2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80242f4:	6878      	ldr	r0, [r7, #4]
 80242f6:	f001 f8a6 	bl	8025446 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>
 80242fa:	687b      	ldr	r3, [r7, #4]
 80242fc:	4618      	mov	r0, r3
 80242fe:	f001 f8ae 	bl	802545e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 8024302:	687b      	ldr	r3, [r7, #4]
 8024304:	4618      	mov	r0, r3
 8024306:	3708      	adds	r7, #8
 8024308:	46bd      	mov	sp, r7
 802430a:	bd80      	pop	{r7, pc}

0802430c <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 802430c:	b580      	push	{r7, lr}
 802430e:	b082      	sub	sp, #8
 8024310:	af00      	add	r7, sp, #0
 8024312:	6078      	str	r0, [r7, #4]
 8024314:	6878      	ldr	r0, [r7, #4]
 8024316:	f001 f8bb 	bl	8025490 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>
 802431a:	687b      	ldr	r3, [r7, #4]
 802431c:	4618      	mov	r0, r3
 802431e:	3708      	adds	r7, #8
 8024320:	46bd      	mov	sp, r7
 8024322:	bd80      	pop	{r7, pc}

08024324 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8024324:	b590      	push	{r4, r7, lr}
 8024326:	b089      	sub	sp, #36	; 0x24
 8024328:	af00      	add	r7, sp, #0
 802432a:	6078      	str	r0, [r7, #4]
 802432c:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 802432e:	2014      	movs	r0, #20
 8024330:	f7fc fda7 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8024334:	4602      	mov	r2, r0
 8024336:	683b      	ldr	r3, [r7, #0]
 8024338:	fbb3 f3f2 	udiv	r3, r3, r2
 802433c:	3301      	adds	r3, #1
 802433e:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024340:	2308      	movs	r3, #8
 8024342:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8024344:	69fb      	ldr	r3, [r7, #28]
 8024346:	3302      	adds	r3, #2
 8024348:	613b      	str	r3, [r7, #16]
 802434a:	f107 0210 	add.w	r2, r7, #16
 802434e:	f107 030c 	add.w	r3, r7, #12
 8024352:	4611      	mov	r1, r2
 8024354:	4618      	mov	r0, r3
 8024356:	f000 f97c 	bl	8024652 <_ZSt3maxIjERKT_S2_S2_>
 802435a:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802435c:	681a      	ldr	r2, [r3, #0]
 802435e:	687b      	ldr	r3, [r7, #4]
 8024360:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8024362:	687b      	ldr	r3, [r7, #4]
 8024364:	685b      	ldr	r3, [r3, #4]
 8024366:	4619      	mov	r1, r3
 8024368:	6878      	ldr	r0, [r7, #4]
 802436a:	f001 f89c 	bl	80254a6 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 802436e:	4602      	mov	r2, r0
 8024370:	687b      	ldr	r3, [r7, #4]
 8024372:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024374:	687b      	ldr	r3, [r7, #4]
 8024376:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8024378:	687b      	ldr	r3, [r7, #4]
 802437a:	6859      	ldr	r1, [r3, #4]
 802437c:	69fb      	ldr	r3, [r7, #28]
 802437e:	1acb      	subs	r3, r1, r3
 8024380:	085b      	lsrs	r3, r3, #1
 8024382:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024384:	4413      	add	r3, r2
 8024386:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8024388:	69fb      	ldr	r3, [r7, #28]
 802438a:	009b      	lsls	r3, r3, #2
 802438c:	69ba      	ldr	r2, [r7, #24]
 802438e:	4413      	add	r3, r2
 8024390:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8024392:	697a      	ldr	r2, [r7, #20]
 8024394:	69b9      	ldr	r1, [r7, #24]
 8024396:	6878      	ldr	r0, [r7, #4]
 8024398:	f001 f8a2 	bl	80254e0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 802439c:	687b      	ldr	r3, [r7, #4]
 802439e:	3308      	adds	r3, #8
 80243a0:	69b9      	ldr	r1, [r7, #24]
 80243a2:	4618      	mov	r0, r3
 80243a4:	f000 ffee 	bl	8025384 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80243a8:	687b      	ldr	r3, [r7, #4]
 80243aa:	f103 0218 	add.w	r2, r3, #24
 80243ae:	697b      	ldr	r3, [r7, #20]
 80243b0:	3b04      	subs	r3, #4
 80243b2:	4619      	mov	r1, r3
 80243b4:	4610      	mov	r0, r2
 80243b6:	f000 ffe5 	bl	8025384 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80243ba:	687b      	ldr	r3, [r7, #4]
 80243bc:	68da      	ldr	r2, [r3, #12]
 80243be:	687b      	ldr	r3, [r7, #4]
 80243c0:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80243c2:	687b      	ldr	r3, [r7, #4]
 80243c4:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80243c6:	2014      	movs	r0, #20
 80243c8:	f7fc fd5b 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80243cc:	4602      	mov	r2, r0
 80243ce:	683b      	ldr	r3, [r7, #0]
 80243d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80243d4:	fb01 f202 	mul.w	r2, r1, r2
 80243d8:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 80243da:	4613      	mov	r3, r2
 80243dc:	009b      	lsls	r3, r3, #2
 80243de:	4413      	add	r3, r2
 80243e0:	009b      	lsls	r3, r3, #2
 80243e2:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80243e4:	687b      	ldr	r3, [r7, #4]
 80243e6:	619a      	str	r2, [r3, #24]
    }
 80243e8:	bf00      	nop
 80243ea:	3724      	adds	r7, #36	; 0x24
 80243ec:	46bd      	mov	sp, r7
 80243ee:	bd90      	pop	{r4, r7, pc}

080243f0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 80243f0:	b580      	push	{r7, lr}
 80243f2:	b086      	sub	sp, #24
 80243f4:	af00      	add	r7, sp, #0
 80243f6:	60f8      	str	r0, [r7, #12]
 80243f8:	60b9      	str	r1, [r7, #8]
 80243fa:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80243fc:	68bb      	ldr	r3, [r7, #8]
 80243fe:	617b      	str	r3, [r7, #20]
 8024400:	697a      	ldr	r2, [r7, #20]
 8024402:	687b      	ldr	r3, [r7, #4]
 8024404:	429a      	cmp	r2, r3
 8024406:	d209      	bcs.n	802441c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8024408:	697b      	ldr	r3, [r7, #20]
 802440a:	681b      	ldr	r3, [r3, #0]
 802440c:	4619      	mov	r1, r3
 802440e:	68f8      	ldr	r0, [r7, #12]
 8024410:	f000 ffd4 	bl	80253bc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024414:	697b      	ldr	r3, [r7, #20]
 8024416:	3304      	adds	r3, #4
 8024418:	617b      	str	r3, [r7, #20]
 802441a:	e7f1      	b.n	8024400 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 802441c:	bf00      	nop
 802441e:	3718      	adds	r7, #24
 8024420:	46bd      	mov	sp, r7
 8024422:	bd80      	pop	{r7, pc}

08024424 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8024424:	b580      	push	{r7, lr}
 8024426:	b086      	sub	sp, #24
 8024428:	af00      	add	r7, sp, #0
 802442a:	60f8      	str	r0, [r7, #12]
 802442c:	60b9      	str	r1, [r7, #8]
 802442e:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024430:	f107 0314 	add.w	r3, r7, #20
 8024434:	68f9      	ldr	r1, [r7, #12]
 8024436:	4618      	mov	r0, r3
 8024438:	f001 f86c 	bl	8025514 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 802443c:	f107 0314 	add.w	r3, r7, #20
 8024440:	687a      	ldr	r2, [r7, #4]
 8024442:	68b9      	ldr	r1, [r7, #8]
 8024444:	4618      	mov	r0, r3
 8024446:	f001 f882 	bl	802554e <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802444a:	f107 0314 	add.w	r3, r7, #20
 802444e:	4618      	mov	r0, r3
 8024450:	f001 f871 	bl	8025536 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
      }
 8024454:	bf00      	nop
 8024456:	3718      	adds	r7, #24
 8024458:	46bd      	mov	sp, r7
 802445a:	bd80      	pop	{r7, pc}

0802445c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 802445c:	b580      	push	{r7, lr}
 802445e:	b082      	sub	sp, #8
 8024460:	af00      	add	r7, sp, #0
 8024462:	6078      	str	r0, [r7, #4]
 8024464:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024466:	683b      	ldr	r3, [r7, #0]
 8024468:	3308      	adds	r3, #8
 802446a:	4619      	mov	r1, r3
 802446c:	6878      	ldr	r0, [r7, #4]
 802446e:	f000 f813 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024472:	6878      	ldr	r0, [r7, #4]
 8024474:	3708      	adds	r7, #8
 8024476:	46bd      	mov	sp, r7
 8024478:	bd80      	pop	{r7, pc}

0802447a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 802447a:	b580      	push	{r7, lr}
 802447c:	b082      	sub	sp, #8
 802447e:	af00      	add	r7, sp, #0
 8024480:	6078      	str	r0, [r7, #4]
 8024482:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8024484:	683b      	ldr	r3, [r7, #0]
 8024486:	3318      	adds	r3, #24
 8024488:	4619      	mov	r1, r3
 802448a:	6878      	ldr	r0, [r7, #4]
 802448c:	f000 f804 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024490:	6878      	ldr	r0, [r7, #4]
 8024492:	3708      	adds	r7, #8
 8024494:	46bd      	mov	sp, r7
 8024496:	bd80      	pop	{r7, pc}

08024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8024498:	b480      	push	{r7}
 802449a:	b083      	sub	sp, #12
 802449c:	af00      	add	r7, sp, #0
 802449e:	6078      	str	r0, [r7, #4]
 80244a0:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80244a2:	683b      	ldr	r3, [r7, #0]
 80244a4:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80244a6:	687b      	ldr	r3, [r7, #4]
 80244a8:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80244aa:	683b      	ldr	r3, [r7, #0]
 80244ac:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80244ae:	687b      	ldr	r3, [r7, #4]
 80244b0:	605a      	str	r2, [r3, #4]
 80244b2:	683b      	ldr	r3, [r7, #0]
 80244b4:	689a      	ldr	r2, [r3, #8]
 80244b6:	687b      	ldr	r3, [r7, #4]
 80244b8:	609a      	str	r2, [r3, #8]
 80244ba:	683b      	ldr	r3, [r7, #0]
 80244bc:	68da      	ldr	r2, [r3, #12]
 80244be:	687b      	ldr	r3, [r7, #4]
 80244c0:	60da      	str	r2, [r3, #12]
 80244c2:	687b      	ldr	r3, [r7, #4]
 80244c4:	4618      	mov	r0, r3
 80244c6:	370c      	adds	r7, #12
 80244c8:	46bd      	mov	sp, r7
 80244ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244ce:	4770      	bx	lr

080244d0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
      _M_destroy_data(iterator __first, iterator __last,
 80244d0:	b480      	push	{r7}
 80244d2:	b08d      	sub	sp, #52	; 0x34
 80244d4:	af00      	add	r7, sp, #0
 80244d6:	60f8      	str	r0, [r7, #12]
 80244d8:	60b9      	str	r1, [r7, #8]
 80244da:	607a      	str	r2, [r7, #4]
 80244dc:	603b      	str	r3, [r7, #0]
      }
 80244de:	bf00      	nop
 80244e0:	3734      	adds	r7, #52	; 0x34
 80244e2:	46bd      	mov	sp, r7
 80244e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244e8:	4770      	bx	lr

080244ea <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80244ea:	b480      	push	{r7}
 80244ec:	b083      	sub	sp, #12
 80244ee:	af00      	add	r7, sp, #0
 80244f0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80244f2:	687b      	ldr	r3, [r7, #4]
 80244f4:	4618      	mov	r0, r3
 80244f6:	370c      	adds	r7, #12
 80244f8:	46bd      	mov	sp, r7
 80244fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244fe:	4770      	bx	lr

08024500 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8024500:	b590      	push	{r4, r7, lr}
 8024502:	b085      	sub	sp, #20
 8024504:	af00      	add	r7, sp, #0
 8024506:	60f8      	str	r0, [r7, #12]
 8024508:	60b9      	str	r1, [r7, #8]
 802450a:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 802450c:	68fb      	ldr	r3, [r7, #12]
 802450e:	68ba      	ldr	r2, [r7, #8]
 8024510:	4611      	mov	r1, r2
 8024512:	4618      	mov	r0, r3
 8024514:	f001 f82a 	bl	802556c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8024518:	68b8      	ldr	r0, [r7, #8]
 802451a:	f001 f834 	bl	8025586 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 802451e:	68fb      	ldr	r3, [r7, #12]
 8024520:	4618      	mov	r0, r3
 8024522:	f7ff f846 	bl	80235b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8024526:	4604      	mov	r4, r0
 8024528:	68bb      	ldr	r3, [r7, #8]
 802452a:	4618      	mov	r0, r3
 802452c:	f7ff f841 	bl	80235b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8024530:	4603      	mov	r3, r0
 8024532:	4619      	mov	r1, r3
 8024534:	4620      	mov	r0, r4
 8024536:	f001 f83a 	bl	80255ae <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>
      }
 802453a:	bf00      	nop
 802453c:	3714      	adds	r7, #20
 802453e:	46bd      	mov	sp, r7
 8024540:	bd90      	pop	{r4, r7, pc}

08024542 <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8024542:	b480      	push	{r7}
 8024544:	b083      	sub	sp, #12
 8024546:	af00      	add	r7, sp, #0
 8024548:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802454a:	687b      	ldr	r3, [r7, #4]
 802454c:	4618      	mov	r0, r3
 802454e:	370c      	adds	r7, #12
 8024550:	46bd      	mov	sp, r7
 8024552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024556:	4770      	bx	lr

08024558 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8024558:	b590      	push	{r4, r7, lr}
 802455a:	b085      	sub	sp, #20
 802455c:	af00      	add	r7, sp, #0
 802455e:	60f8      	str	r0, [r7, #12]
 8024560:	60b9      	str	r1, [r7, #8]
 8024562:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8024564:	68fb      	ldr	r3, [r7, #12]
 8024566:	68ba      	ldr	r2, [r7, #8]
 8024568:	4611      	mov	r1, r2
 802456a:	4618      	mov	r0, r3
 802456c:	f001 f82d 	bl	80255ca <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8024570:	68b8      	ldr	r0, [r7, #8]
 8024572:	f001 f837 	bl	80255e4 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8024576:	68fb      	ldr	r3, [r7, #12]
 8024578:	4618      	mov	r0, r3
 802457a:	f7ff f8bd 	bl	80236f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 802457e:	4604      	mov	r4, r0
 8024580:	68bb      	ldr	r3, [r7, #8]
 8024582:	4618      	mov	r0, r3
 8024584:	f7ff f8b8 	bl	80236f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8024588:	4603      	mov	r3, r0
 802458a:	4619      	mov	r1, r3
 802458c:	4620      	mov	r0, r4
 802458e:	f001 f83d 	bl	802560c <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>
      }
 8024592:	bf00      	nop
 8024594:	3714      	adds	r7, #20
 8024596:	46bd      	mov	sp, r7
 8024598:	bd90      	pop	{r4, r7, pc}

0802459a <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 802459a:	b480      	push	{r7}
 802459c:	b083      	sub	sp, #12
 802459e:	af00      	add	r7, sp, #0
 80245a0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80245a2:	687b      	ldr	r3, [r7, #4]
 80245a4:	4618      	mov	r0, r3
 80245a6:	370c      	adds	r7, #12
 80245a8:	46bd      	mov	sp, r7
 80245aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245ae:	4770      	bx	lr

080245b0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80245b0:	b590      	push	{r4, r7, lr}
 80245b2:	b085      	sub	sp, #20
 80245b4:	af00      	add	r7, sp, #0
 80245b6:	60f8      	str	r0, [r7, #12]
 80245b8:	60b9      	str	r1, [r7, #8]
 80245ba:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 80245bc:	68fb      	ldr	r3, [r7, #12]
 80245be:	68ba      	ldr	r2, [r7, #8]
 80245c0:	4611      	mov	r1, r2
 80245c2:	4618      	mov	r0, r3
 80245c4:	f001 f830 	bl	8025628 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>
	__x.clear();
 80245c8:	68b8      	ldr	r0, [r7, #8]
 80245ca:	f001 f83a 	bl	8025642 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80245ce:	68fb      	ldr	r3, [r7, #12]
 80245d0:	4618      	mov	r0, r3
 80245d2:	f7ff fe1f 	bl	8024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80245d6:	4604      	mov	r4, r0
 80245d8:	68bb      	ldr	r3, [r7, #8]
 80245da:	4618      	mov	r0, r3
 80245dc:	f7ff fe1a 	bl	8024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80245e0:	4603      	mov	r3, r0
 80245e2:	4619      	mov	r1, r3
 80245e4:	4620      	mov	r0, r4
 80245e6:	f001 f840 	bl	802566a <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>
      }
 80245ea:	bf00      	nop
 80245ec:	3714      	adds	r7, #20
 80245ee:	46bd      	mov	sp, r7
 80245f0:	bd90      	pop	{r4, r7, pc}

080245f2 <_ZNSaI7RequestEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80245f2:	b580      	push	{r7, lr}
 80245f4:	b082      	sub	sp, #8
 80245f6:	af00      	add	r7, sp, #0
 80245f8:	6078      	str	r0, [r7, #4]
 80245fa:	6878      	ldr	r0, [r7, #4]
 80245fc:	f001 f843 	bl	8025686 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>
 8024600:	687b      	ldr	r3, [r7, #4]
 8024602:	4618      	mov	r0, r3
 8024604:	3708      	adds	r7, #8
 8024606:	46bd      	mov	sp, r7
 8024608:	bd80      	pop	{r7, pc}

0802460a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 802460a:	b580      	push	{r7, lr}
 802460c:	b082      	sub	sp, #8
 802460e:	af00      	add	r7, sp, #0
 8024610:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8024612:	687b      	ldr	r3, [r7, #4]
 8024614:	2200      	movs	r2, #0
 8024616:	601a      	str	r2, [r3, #0]
 8024618:	687b      	ldr	r3, [r7, #4]
 802461a:	2200      	movs	r2, #0
 802461c:	605a      	str	r2, [r3, #4]
 802461e:	687b      	ldr	r3, [r7, #4]
 8024620:	3308      	adds	r3, #8
 8024622:	4618      	mov	r0, r3
 8024624:	f001 f83a 	bl	802569c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
 8024628:	687b      	ldr	r3, [r7, #4]
 802462a:	3318      	adds	r3, #24
 802462c:	4618      	mov	r0, r3
 802462e:	f001 f835 	bl	802569c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
	{ }
 8024632:	687b      	ldr	r3, [r7, #4]
 8024634:	4618      	mov	r0, r3
 8024636:	3708      	adds	r7, #8
 8024638:	46bd      	mov	sp, r7
 802463a:	bd80      	pop	{r7, pc}

0802463c <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>:
 802463c:	b480      	push	{r7}
 802463e:	b083      	sub	sp, #12
 8024640:	af00      	add	r7, sp, #0
 8024642:	6078      	str	r0, [r7, #4]
 8024644:	687b      	ldr	r3, [r7, #4]
 8024646:	4618      	mov	r0, r3
 8024648:	370c      	adds	r7, #12
 802464a:	46bd      	mov	sp, r7
 802464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024650:	4770      	bx	lr

08024652 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8024652:	b480      	push	{r7}
 8024654:	b083      	sub	sp, #12
 8024656:	af00      	add	r7, sp, #0
 8024658:	6078      	str	r0, [r7, #4]
 802465a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 802465c:	687b      	ldr	r3, [r7, #4]
 802465e:	681a      	ldr	r2, [r3, #0]
 8024660:	683b      	ldr	r3, [r7, #0]
 8024662:	681b      	ldr	r3, [r3, #0]
 8024664:	429a      	cmp	r2, r3
 8024666:	d201      	bcs.n	802466c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8024668:	683b      	ldr	r3, [r7, #0]
 802466a:	e000      	b.n	802466e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 802466c:	687b      	ldr	r3, [r7, #4]
    }
 802466e:	4618      	mov	r0, r3
 8024670:	370c      	adds	r7, #12
 8024672:	46bd      	mov	sp, r7
 8024674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024678:	4770      	bx	lr

0802467a <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 802467a:	b590      	push	{r4, r7, lr}
 802467c:	b085      	sub	sp, #20
 802467e:	af00      	add	r7, sp, #0
 8024680:	6078      	str	r0, [r7, #4]
 8024682:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024684:	f107 030c 	add.w	r3, r7, #12
 8024688:	6879      	ldr	r1, [r7, #4]
 802468a:	4618      	mov	r0, r3
 802468c:	f000 f85b 	bl	8024746 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8024690:	f107 030c 	add.w	r3, r7, #12
 8024694:	6839      	ldr	r1, [r7, #0]
 8024696:	4618      	mov	r0, r3
 8024698:	f001 f817 	bl	80256ca <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>
 802469c:	4604      	mov	r4, r0
 802469e:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80246a0:	f107 030c 	add.w	r3, r7, #12
 80246a4:	4618      	mov	r0, r3
 80246a6:	f000 f85f 	bl	8024768 <_ZNSaIP7RequestED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80246aa:	4623      	mov	r3, r4
      }
 80246ac:	4618      	mov	r0, r3
 80246ae:	3714      	adds	r7, #20
 80246b0:	46bd      	mov	sp, r7
 80246b2:	bd90      	pop	{r4, r7, pc}

080246b4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80246b4:	b580      	push	{r7, lr}
 80246b6:	b086      	sub	sp, #24
 80246b8:	af00      	add	r7, sp, #0
 80246ba:	60f8      	str	r0, [r7, #12]
 80246bc:	60b9      	str	r1, [r7, #8]
 80246be:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80246c0:	68bb      	ldr	r3, [r7, #8]
 80246c2:	617b      	str	r3, [r7, #20]
 80246c4:	697a      	ldr	r2, [r7, #20]
 80246c6:	687b      	ldr	r3, [r7, #4]
 80246c8:	429a      	cmp	r2, r3
 80246ca:	d209      	bcs.n	80246e0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 80246cc:	68f8      	ldr	r0, [r7, #12]
 80246ce:	f000 fa3f 	bl	8024b50 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 80246d2:	4602      	mov	r2, r0
 80246d4:	697b      	ldr	r3, [r7, #20]
 80246d6:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80246d8:	697b      	ldr	r3, [r7, #20]
 80246da:	3304      	adds	r3, #4
 80246dc:	617b      	str	r3, [r7, #20]
 80246de:	e7f1      	b.n	80246c4 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 80246e0:	bf00      	nop
 80246e2:	3718      	adds	r7, #24
 80246e4:	46bd      	mov	sp, r7
 80246e6:	bd80      	pop	{r7, pc}

080246e8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80246e8:	b590      	push	{r4, r7, lr}
 80246ea:	b083      	sub	sp, #12
 80246ec:	af00      	add	r7, sp, #0
 80246ee:	6078      	str	r0, [r7, #4]
 80246f0:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80246f2:	687b      	ldr	r3, [r7, #4]
 80246f4:	683a      	ldr	r2, [r7, #0]
 80246f6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80246f8:	683b      	ldr	r3, [r7, #0]
 80246fa:	681a      	ldr	r2, [r3, #0]
 80246fc:	687b      	ldr	r3, [r7, #4]
 80246fe:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8024700:	687b      	ldr	r3, [r7, #4]
 8024702:	685c      	ldr	r4, [r3, #4]
 8024704:	f000 fca5 	bl	8025052 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8024708:	4602      	mov	r2, r0
 802470a:	4613      	mov	r3, r2
 802470c:	009b      	lsls	r3, r3, #2
 802470e:	4413      	add	r3, r2
 8024710:	009b      	lsls	r3, r3, #2
 8024712:	18e2      	adds	r2, r4, r3
 8024714:	687b      	ldr	r3, [r7, #4]
 8024716:	609a      	str	r2, [r3, #8]
      }
 8024718:	bf00      	nop
 802471a:	370c      	adds	r7, #12
 802471c:	46bd      	mov	sp, r7
 802471e:	bd90      	pop	{r4, r7, pc}

08024720 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8024720:	b590      	push	{r4, r7, lr}
 8024722:	b083      	sub	sp, #12
 8024724:	af00      	add	r7, sp, #0
 8024726:	6078      	str	r0, [r7, #4]
 8024728:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 802472a:	687c      	ldr	r4, [r7, #4]
 802472c:	2014      	movs	r0, #20
 802472e:	f7fc fba8 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8024732:	4603      	mov	r3, r0
 8024734:	461a      	mov	r2, r3
 8024736:	6839      	ldr	r1, [r7, #0]
 8024738:	4620      	mov	r0, r4
 802473a:	f000 ffd5 	bl	80256e8 <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>
      }
 802473e:	bf00      	nop
 8024740:	370c      	adds	r7, #12
 8024742:	46bd      	mov	sp, r7
 8024744:	bd90      	pop	{r4, r7, pc}

08024746 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8024746:	b580      	push	{r7, lr}
 8024748:	b082      	sub	sp, #8
 802474a:	af00      	add	r7, sp, #0
 802474c:	6078      	str	r0, [r7, #4]
 802474e:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8024750:	6838      	ldr	r0, [r7, #0]
 8024752:	f000 ffd8 	bl	8025706 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8024756:	4603      	mov	r3, r0
 8024758:	4619      	mov	r1, r3
 802475a:	6878      	ldr	r0, [r7, #4]
 802475c:	f000 ffde 	bl	802571c <_ZNSaIP7RequestEC1IS_EERKSaIT_E>
 8024760:	6878      	ldr	r0, [r7, #4]
 8024762:	3708      	adds	r7, #8
 8024764:	46bd      	mov	sp, r7
 8024766:	bd80      	pop	{r7, pc}

08024768 <_ZNSaIP7RequestED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8024768:	b580      	push	{r7, lr}
 802476a:	b082      	sub	sp, #8
 802476c:	af00      	add	r7, sp, #0
 802476e:	6078      	str	r0, [r7, #4]
 8024770:	6878      	ldr	r0, [r7, #4]
 8024772:	f000 ffe0 	bl	8025736 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>
 8024776:	687b      	ldr	r3, [r7, #4]
 8024778:	4618      	mov	r0, r3
 802477a:	3708      	adds	r7, #8
 802477c:	46bd      	mov	sp, r7
 802477e:	bd80      	pop	{r7, pc}

08024780 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8024780:	b580      	push	{r7, lr}
 8024782:	b084      	sub	sp, #16
 8024784:	af00      	add	r7, sp, #0
 8024786:	60f8      	str	r0, [r7, #12]
 8024788:	60b9      	str	r1, [r7, #8]
 802478a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802478c:	687a      	ldr	r2, [r7, #4]
 802478e:	68b9      	ldr	r1, [r7, #8]
 8024790:	68f8      	ldr	r0, [r7, #12]
 8024792:	f000 ffdb 	bl	802574c <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>
 8024796:	bf00      	nop
 8024798:	3710      	adds	r7, #16
 802479a:	46bd      	mov	sp, r7
 802479c:	bd80      	pop	{r7, pc}

0802479e <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 802479e:	b5b0      	push	{r4, r5, r7, lr}
 80247a0:	b086      	sub	sp, #24
 80247a2:	af00      	add	r7, sp, #0
 80247a4:	60f8      	str	r0, [r7, #12]
 80247a6:	60b9      	str	r1, [r7, #8]
 80247a8:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 80247aa:	68bb      	ldr	r3, [r7, #8]
 80247ac:	68db      	ldr	r3, [r3, #12]
 80247ae:	3304      	adds	r3, #4
 80247b0:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 80247b2:	687b      	ldr	r3, [r7, #4]
 80247b4:	68db      	ldr	r3, [r3, #12]
 80247b6:	697a      	ldr	r2, [r7, #20]
 80247b8:	429a      	cmp	r2, r3
 80247ba:	d219      	bcs.n	80247f0 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80247bc:	697b      	ldr	r3, [r7, #20]
 80247be:	681d      	ldr	r5, [r3, #0]
 80247c0:	697b      	ldr	r3, [r7, #20]
 80247c2:	681c      	ldr	r4, [r3, #0]
 80247c4:	f000 ffd2 	bl	802576c <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>
 80247c8:	4602      	mov	r2, r0
 80247ca:	4613      	mov	r3, r2
 80247cc:	009b      	lsls	r3, r3, #2
 80247ce:	4413      	add	r3, r2
 80247d0:	009b      	lsls	r3, r3, #2
 80247d2:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 80247d4:	68fb      	ldr	r3, [r7, #12]
 80247d6:	4618      	mov	r0, r3
 80247d8:	f7fe feeb 	bl	80235b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80247dc:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80247de:	461a      	mov	r2, r3
 80247e0:	4621      	mov	r1, r4
 80247e2:	4628      	mov	r0, r5
 80247e4:	f000 ffca 	bl	802577c <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 80247e8:	697b      	ldr	r3, [r7, #20]
 80247ea:	3304      	adds	r3, #4
 80247ec:	617b      	str	r3, [r7, #20]
 80247ee:	e7e0      	b.n	80247b2 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>

       if (__first._M_node != __last._M_node)
 80247f0:	68bb      	ldr	r3, [r7, #8]
 80247f2:	68da      	ldr	r2, [r3, #12]
 80247f4:	687b      	ldr	r3, [r7, #4]
 80247f6:	68db      	ldr	r3, [r3, #12]
 80247f8:	429a      	cmp	r2, r3
 80247fa:	d01c      	beq.n	8024836 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 80247fc:	68bb      	ldr	r3, [r7, #8]
 80247fe:	681c      	ldr	r4, [r3, #0]
 8024800:	68bb      	ldr	r3, [r7, #8]
 8024802:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8024804:	68fb      	ldr	r3, [r7, #12]
 8024806:	4618      	mov	r0, r3
 8024808:	f7fe fed3 	bl	80235b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 802480c:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 802480e:	461a      	mov	r2, r3
 8024810:	4629      	mov	r1, r5
 8024812:	4620      	mov	r0, r4
 8024814:	f000 ffb2 	bl	802577c <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8024818:	687b      	ldr	r3, [r7, #4]
 802481a:	685c      	ldr	r4, [r3, #4]
 802481c:	687b      	ldr	r3, [r7, #4]
 802481e:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8024820:	68fb      	ldr	r3, [r7, #12]
 8024822:	4618      	mov	r0, r3
 8024824:	f7fe fec5 	bl	80235b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8024828:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 802482a:	461a      	mov	r2, r3
 802482c:	4629      	mov	r1, r5
 802482e:	4620      	mov	r0, r4
 8024830:	f000 ffa4 	bl	802577c <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8024834:	e00d      	b.n	8024852 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8024836:	68bb      	ldr	r3, [r7, #8]
 8024838:	681c      	ldr	r4, [r3, #0]
 802483a:	687b      	ldr	r3, [r7, #4]
 802483c:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 802483e:	68fb      	ldr	r3, [r7, #12]
 8024840:	4618      	mov	r0, r3
 8024842:	f7fe feb6 	bl	80235b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8024846:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8024848:	461a      	mov	r2, r3
 802484a:	4629      	mov	r1, r5
 802484c:	4620      	mov	r0, r4
 802484e:	f000 ff95 	bl	802577c <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
     }
 8024852:	bf00      	nop
 8024854:	3718      	adds	r7, #24
 8024856:	46bd      	mov	sp, r7
 8024858:	bdb0      	pop	{r4, r5, r7, pc}

0802485a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 802485a:	b580      	push	{r7, lr}
 802485c:	b082      	sub	sp, #8
 802485e:	af00      	add	r7, sp, #0
 8024860:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8024862:	6878      	ldr	r0, [r7, #4]
 8024864:	f000 ff98 	bl	8025798 <_ZNSaI8ResponceEC1Ev>
 8024868:	687b      	ldr	r3, [r7, #4]
 802486a:	4618      	mov	r0, r3
 802486c:	f000 ffa0 	bl	80257b0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8024870:	687b      	ldr	r3, [r7, #4]
 8024872:	4618      	mov	r0, r3
 8024874:	3708      	adds	r7, #8
 8024876:	46bd      	mov	sp, r7
 8024878:	bd80      	pop	{r7, pc}

0802487a <_ZNSaI8ResponceED1Ev>:
 802487a:	b580      	push	{r7, lr}
 802487c:	b082      	sub	sp, #8
 802487e:	af00      	add	r7, sp, #0
 8024880:	6078      	str	r0, [r7, #4]
 8024882:	6878      	ldr	r0, [r7, #4]
 8024884:	f000 ffad 	bl	80257e2 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>
 8024888:	687b      	ldr	r3, [r7, #4]
 802488a:	4618      	mov	r0, r3
 802488c:	3708      	adds	r7, #8
 802488e:	46bd      	mov	sp, r7
 8024890:	bd80      	pop	{r7, pc}

08024892 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8024892:	b590      	push	{r4, r7, lr}
 8024894:	b089      	sub	sp, #36	; 0x24
 8024896:	af00      	add	r7, sp, #0
 8024898:	6078      	str	r0, [r7, #4]
 802489a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 802489c:	2010      	movs	r0, #16
 802489e:	f7fc faf0 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80248a2:	4602      	mov	r2, r0
 80248a4:	683b      	ldr	r3, [r7, #0]
 80248a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80248aa:	3301      	adds	r3, #1
 80248ac:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80248ae:	2308      	movs	r3, #8
 80248b0:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80248b2:	69fb      	ldr	r3, [r7, #28]
 80248b4:	3302      	adds	r3, #2
 80248b6:	613b      	str	r3, [r7, #16]
 80248b8:	f107 0210 	add.w	r2, r7, #16
 80248bc:	f107 030c 	add.w	r3, r7, #12
 80248c0:	4611      	mov	r1, r2
 80248c2:	4618      	mov	r0, r3
 80248c4:	f7ff fec5 	bl	8024652 <_ZSt3maxIjERKT_S2_S2_>
 80248c8:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80248ca:	681a      	ldr	r2, [r3, #0]
 80248cc:	687b      	ldr	r3, [r7, #4]
 80248ce:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80248d0:	687b      	ldr	r3, [r7, #4]
 80248d2:	685b      	ldr	r3, [r3, #4]
 80248d4:	4619      	mov	r1, r3
 80248d6:	6878      	ldr	r0, [r7, #4]
 80248d8:	f000 ff8e 	bl	80257f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 80248dc:	4602      	mov	r2, r0
 80248de:	687b      	ldr	r3, [r7, #4]
 80248e0:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80248e2:	687b      	ldr	r3, [r7, #4]
 80248e4:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80248e6:	687b      	ldr	r3, [r7, #4]
 80248e8:	6859      	ldr	r1, [r3, #4]
 80248ea:	69fb      	ldr	r3, [r7, #28]
 80248ec:	1acb      	subs	r3, r1, r3
 80248ee:	085b      	lsrs	r3, r3, #1
 80248f0:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80248f2:	4413      	add	r3, r2
 80248f4:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80248f6:	69fb      	ldr	r3, [r7, #28]
 80248f8:	009b      	lsls	r3, r3, #2
 80248fa:	69ba      	ldr	r2, [r7, #24]
 80248fc:	4413      	add	r3, r2
 80248fe:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8024900:	697a      	ldr	r2, [r7, #20]
 8024902:	69b9      	ldr	r1, [r7, #24]
 8024904:	6878      	ldr	r0, [r7, #4]
 8024906:	f000 ff94 	bl	8025832 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 802490a:	687b      	ldr	r3, [r7, #4]
 802490c:	3308      	adds	r3, #8
 802490e:	69b9      	ldr	r1, [r7, #24]
 8024910:	4618      	mov	r0, r3
 8024912:	f000 ffa8 	bl	8025866 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8024916:	687b      	ldr	r3, [r7, #4]
 8024918:	f103 0218 	add.w	r2, r3, #24
 802491c:	697b      	ldr	r3, [r7, #20]
 802491e:	3b04      	subs	r3, #4
 8024920:	4619      	mov	r1, r3
 8024922:	4610      	mov	r0, r2
 8024924:	f000 ff9f 	bl	8025866 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8024928:	687b      	ldr	r3, [r7, #4]
 802492a:	68da      	ldr	r2, [r3, #12]
 802492c:	687b      	ldr	r3, [r7, #4]
 802492e:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024930:	687b      	ldr	r3, [r7, #4]
 8024932:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8024934:	2010      	movs	r0, #16
 8024936:	f7fc faa4 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 802493a:	4602      	mov	r2, r0
 802493c:	683b      	ldr	r3, [r7, #0]
 802493e:	fbb3 f1f2 	udiv	r1, r3, r2
 8024942:	fb01 f202 	mul.w	r2, r1, r2
 8024946:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8024948:	011b      	lsls	r3, r3, #4
 802494a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 802494c:	687b      	ldr	r3, [r7, #4]
 802494e:	619a      	str	r2, [r3, #24]
    }
 8024950:	bf00      	nop
 8024952:	3724      	adds	r7, #36	; 0x24
 8024954:	46bd      	mov	sp, r7
 8024956:	bd90      	pop	{r4, r7, pc}

08024958 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8024958:	b580      	push	{r7, lr}
 802495a:	b086      	sub	sp, #24
 802495c:	af00      	add	r7, sp, #0
 802495e:	60f8      	str	r0, [r7, #12]
 8024960:	60b9      	str	r1, [r7, #8]
 8024962:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024964:	68bb      	ldr	r3, [r7, #8]
 8024966:	617b      	str	r3, [r7, #20]
 8024968:	697a      	ldr	r2, [r7, #20]
 802496a:	687b      	ldr	r3, [r7, #4]
 802496c:	429a      	cmp	r2, r3
 802496e:	d209      	bcs.n	8024984 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8024970:	697b      	ldr	r3, [r7, #20]
 8024972:	681b      	ldr	r3, [r3, #0]
 8024974:	4619      	mov	r1, r3
 8024976:	68f8      	ldr	r0, [r7, #12]
 8024978:	f000 ff8e 	bl	8025898 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 802497c:	697b      	ldr	r3, [r7, #20]
 802497e:	3304      	adds	r3, #4
 8024980:	617b      	str	r3, [r7, #20]
 8024982:	e7f1      	b.n	8024968 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8024984:	bf00      	nop
 8024986:	3718      	adds	r7, #24
 8024988:	46bd      	mov	sp, r7
 802498a:	bd80      	pop	{r7, pc}

0802498c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 802498c:	b580      	push	{r7, lr}
 802498e:	b086      	sub	sp, #24
 8024990:	af00      	add	r7, sp, #0
 8024992:	60f8      	str	r0, [r7, #12]
 8024994:	60b9      	str	r1, [r7, #8]
 8024996:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024998:	f107 0314 	add.w	r3, r7, #20
 802499c:	68f9      	ldr	r1, [r7, #12]
 802499e:	4618      	mov	r0, r3
 80249a0:	f000 ff8d 	bl	80258be <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80249a4:	f107 0314 	add.w	r3, r7, #20
 80249a8:	687a      	ldr	r2, [r7, #4]
 80249aa:	68b9      	ldr	r1, [r7, #8]
 80249ac:	4618      	mov	r0, r3
 80249ae:	f000 ffa3 	bl	80258f8 <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80249b2:	f107 0314 	add.w	r3, r7, #20
 80249b6:	4618      	mov	r0, r3
 80249b8:	f000 ff92 	bl	80258e0 <_ZNSaIP8ResponceED1Ev>
      }
 80249bc:	bf00      	nop
 80249be:	3718      	adds	r7, #24
 80249c0:	46bd      	mov	sp, r7
 80249c2:	bd80      	pop	{r7, pc}

080249c4 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
     deque<_Tp, _Alloc>::
 80249c4:	b5b0      	push	{r4, r5, r7, lr}
 80249c6:	b086      	sub	sp, #24
 80249c8:	af00      	add	r7, sp, #0
 80249ca:	60f8      	str	r0, [r7, #12]
 80249cc:	60b9      	str	r1, [r7, #8]
 80249ce:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 80249d0:	68bb      	ldr	r3, [r7, #8]
 80249d2:	68db      	ldr	r3, [r3, #12]
 80249d4:	3304      	adds	r3, #4
 80249d6:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 80249d8:	687b      	ldr	r3, [r7, #4]
 80249da:	68db      	ldr	r3, [r3, #12]
 80249dc:	697a      	ldr	r2, [r7, #20]
 80249de:	429a      	cmp	r2, r3
 80249e0:	d216      	bcs.n	8024a10 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80249e2:	697b      	ldr	r3, [r7, #20]
 80249e4:	681d      	ldr	r5, [r3, #0]
 80249e6:	697b      	ldr	r3, [r7, #20]
 80249e8:	681c      	ldr	r4, [r3, #0]
 80249ea:	f000 ff94 	bl	8025916 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>
 80249ee:	4603      	mov	r3, r0
 80249f0:	011b      	lsls	r3, r3, #4
 80249f2:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 80249f4:	68fb      	ldr	r3, [r7, #12]
 80249f6:	4618      	mov	r0, r3
 80249f8:	f7fe fe7e 	bl	80236f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80249fc:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 80249fe:	461a      	mov	r2, r3
 8024a00:	4621      	mov	r1, r4
 8024a02:	4628      	mov	r0, r5
 8024a04:	f000 ff8f 	bl	8025926 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8024a08:	697b      	ldr	r3, [r7, #20]
 8024a0a:	3304      	adds	r3, #4
 8024a0c:	617b      	str	r3, [r7, #20]
 8024a0e:	e7e3      	b.n	80249d8 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>
       if (__first._M_node != __last._M_node)
 8024a10:	68bb      	ldr	r3, [r7, #8]
 8024a12:	68da      	ldr	r2, [r3, #12]
 8024a14:	687b      	ldr	r3, [r7, #4]
 8024a16:	68db      	ldr	r3, [r3, #12]
 8024a18:	429a      	cmp	r2, r3
 8024a1a:	d01c      	beq.n	8024a56 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 8024a1c:	68bb      	ldr	r3, [r7, #8]
 8024a1e:	681c      	ldr	r4, [r3, #0]
 8024a20:	68bb      	ldr	r3, [r7, #8]
 8024a22:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8024a24:	68fb      	ldr	r3, [r7, #12]
 8024a26:	4618      	mov	r0, r3
 8024a28:	f7fe fe66 	bl	80236f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8024a2c:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8024a2e:	461a      	mov	r2, r3
 8024a30:	4629      	mov	r1, r5
 8024a32:	4620      	mov	r0, r4
 8024a34:	f000 ff77 	bl	8025926 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8024a38:	687b      	ldr	r3, [r7, #4]
 8024a3a:	685c      	ldr	r4, [r3, #4]
 8024a3c:	687b      	ldr	r3, [r7, #4]
 8024a3e:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8024a40:	68fb      	ldr	r3, [r7, #12]
 8024a42:	4618      	mov	r0, r3
 8024a44:	f7fe fe58 	bl	80236f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8024a48:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8024a4a:	461a      	mov	r2, r3
 8024a4c:	4629      	mov	r1, r5
 8024a4e:	4620      	mov	r0, r4
 8024a50:	f000 ff69 	bl	8025926 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8024a54:	e00d      	b.n	8024a72 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8024a56:	68bb      	ldr	r3, [r7, #8]
 8024a58:	681c      	ldr	r4, [r3, #0]
 8024a5a:	687b      	ldr	r3, [r7, #4]
 8024a5c:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8024a5e:	68fb      	ldr	r3, [r7, #12]
 8024a60:	4618      	mov	r0, r3
 8024a62:	f7fe fe49 	bl	80236f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8024a66:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8024a68:	461a      	mov	r2, r3
 8024a6a:	4629      	mov	r1, r5
 8024a6c:	4620      	mov	r0, r4
 8024a6e:	f000 ff5a 	bl	8025926 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8024a72:	bf00      	nop
 8024a74:	3718      	adds	r7, #24
 8024a76:	46bd      	mov	sp, r7
 8024a78:	bdb0      	pop	{r4, r5, r7, pc}

08024a7a <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8024a7a:	b480      	push	{r7}
 8024a7c:	b083      	sub	sp, #12
 8024a7e:	af00      	add	r7, sp, #0
 8024a80:	6078      	str	r0, [r7, #4]
 8024a82:	687b      	ldr	r3, [r7, #4]
 8024a84:	4618      	mov	r0, r3
 8024a86:	370c      	adds	r7, #12
 8024a88:	46bd      	mov	sp, r7
 8024a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a8e:	4770      	bx	lr

08024a90 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8024a90:	b580      	push	{r7, lr}
 8024a92:	b084      	sub	sp, #16
 8024a94:	af00      	add	r7, sp, #0
 8024a96:	60f8      	str	r0, [r7, #12]
 8024a98:	60b9      	str	r1, [r7, #8]
 8024a9a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8024a9c:	687a      	ldr	r2, [r7, #4]
 8024a9e:	68b9      	ldr	r1, [r7, #8]
 8024aa0:	68f8      	ldr	r0, [r7, #12]
 8024aa2:	f000 ff4e 	bl	8025942 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8024aa6:	bf00      	nop
 8024aa8:	3710      	adds	r7, #16
 8024aaa:	46bd      	mov	sp, r7
 8024aac:	bd80      	pop	{r7, pc}

08024aae <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8024aae:	b580      	push	{r7, lr}
 8024ab0:	b082      	sub	sp, #8
 8024ab2:	af00      	add	r7, sp, #0
 8024ab4:	6078      	str	r0, [r7, #4]
 8024ab6:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8024ab8:	6839      	ldr	r1, [r7, #0]
 8024aba:	6878      	ldr	r0, [r7, #4]
 8024abc:	f000 ff4f 	bl	802595e <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8024ac0:	bf00      	nop
 8024ac2:	3708      	adds	r7, #8
 8024ac4:	46bd      	mov	sp, r7
 8024ac6:	bd80      	pop	{r7, pc}

08024ac8 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8024ac8:	b590      	push	{r4, r7, lr}
 8024aca:	b085      	sub	sp, #20
 8024acc:	af00      	add	r7, sp, #0
 8024ace:	60f8      	str	r0, [r7, #12]
 8024ad0:	60b9      	str	r1, [r7, #8]
 8024ad2:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8024ad4:	6878      	ldr	r0, [r7, #4]
 8024ad6:	f7fe feac 	bl	8023832 <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8024ada:	4604      	mov	r4, r0
 8024adc:	68bb      	ldr	r3, [r7, #8]
 8024ade:	4619      	mov	r1, r3
 8024ae0:	2014      	movs	r0, #20
 8024ae2:	f7fc f9c2 	bl	8020e6a <_ZnwjPv>
 8024ae6:	4603      	mov	r3, r0
 8024ae8:	4621      	mov	r1, r4
 8024aea:	4618      	mov	r0, r3
 8024aec:	f7fc ff8c 	bl	8021a08 <_ZN7RequestC1EOS_>
 8024af0:	bf00      	nop
 8024af2:	3714      	adds	r7, #20
 8024af4:	46bd      	mov	sp, r7
 8024af6:	bd90      	pop	{r4, r7, pc}

08024af8 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8024af8:	b580      	push	{r7, lr}
 8024afa:	b082      	sub	sp, #8
 8024afc:	af00      	add	r7, sp, #0
 8024afe:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8024b00:	687b      	ldr	r3, [r7, #4]
 8024b02:	4618      	mov	r0, r3
 8024b04:	f000 fdff 	bl	8025706 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8024b08:	4603      	mov	r3, r0
 8024b0a:	4618      	mov	r0, r3
 8024b0c:	f000 ff32 	bl	8025974 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>
 8024b10:	4603      	mov	r3, r0
 8024b12:	4618      	mov	r0, r3
 8024b14:	3708      	adds	r7, #8
 8024b16:	46bd      	mov	sp, r7
 8024b18:	bd80      	pop	{r7, pc}

08024b1a <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8024b1a:	b580      	push	{r7, lr}
 8024b1c:	b082      	sub	sp, #8
 8024b1e:	af00      	add	r7, sp, #0
 8024b20:	6078      	str	r0, [r7, #4]
 8024b22:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8024b24:	683b      	ldr	r3, [r7, #0]
 8024b26:	1c5a      	adds	r2, r3, #1
 8024b28:	687b      	ldr	r3, [r7, #4]
 8024b2a:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8024b2c:	6879      	ldr	r1, [r7, #4]
 8024b2e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8024b30:	6879      	ldr	r1, [r7, #4]
 8024b32:	6809      	ldr	r1, [r1, #0]
 8024b34:	1a41      	subs	r1, r0, r1
 8024b36:	1089      	asrs	r1, r1, #2
 8024b38:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8024b3a:	429a      	cmp	r2, r3
 8024b3c:	d904      	bls.n	8024b48 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8024b3e:	2200      	movs	r2, #0
 8024b40:	6839      	ldr	r1, [r7, #0]
 8024b42:	6878      	ldr	r0, [r7, #4]
 8024b44:	f000 ff30 	bl	80259a8 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 8024b48:	bf00      	nop
 8024b4a:	3708      	adds	r7, #8
 8024b4c:	46bd      	mov	sp, r7
 8024b4e:	bd80      	pop	{r7, pc}

08024b50 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8024b50:	b590      	push	{r4, r7, lr}
 8024b52:	b083      	sub	sp, #12
 8024b54:	af00      	add	r7, sp, #0
 8024b56:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8024b58:	687c      	ldr	r4, [r7, #4]
 8024b5a:	2014      	movs	r0, #20
 8024b5c:	f7fc f991 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8024b60:	4603      	mov	r3, r0
 8024b62:	4619      	mov	r1, r3
 8024b64:	4620      	mov	r0, r4
 8024b66:	f000 ffb9 	bl	8025adc <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>
 8024b6a:	4603      	mov	r3, r0
      }
 8024b6c:	4618      	mov	r0, r3
 8024b6e:	370c      	adds	r7, #12
 8024b70:	46bd      	mov	sp, r7
 8024b72:	bd90      	pop	{r4, r7, pc}

08024b74 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8024b74:	b580      	push	{r7, lr}
 8024b76:	b082      	sub	sp, #8
 8024b78:	af00      	add	r7, sp, #0
 8024b7a:	6078      	str	r0, [r7, #4]
 8024b7c:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8024b7e:	6838      	ldr	r0, [r7, #0]
 8024b80:	f7ff f90e 	bl	8023da0 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8024b84:	4603      	mov	r3, r0
 8024b86:	4619      	mov	r1, r3
 8024b88:	6878      	ldr	r0, [r7, #4]
 8024b8a:	f7fe ff65 	bl	8023a58 <_ZNSaIhEC1ERKS_>
 8024b8e:	6878      	ldr	r0, [r7, #4]
 8024b90:	3708      	adds	r7, #8
 8024b92:	46bd      	mov	sp, r7
 8024b94:	bd80      	pop	{r7, pc}

08024b96 <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8024b96:	b580      	push	{r7, lr}
 8024b98:	b082      	sub	sp, #8
 8024b9a:	af00      	add	r7, sp, #0
 8024b9c:	6078      	str	r0, [r7, #4]
 8024b9e:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8024ba0:	687b      	ldr	r3, [r7, #4]
 8024ba2:	6839      	ldr	r1, [r7, #0]
 8024ba4:	4618      	mov	r0, r3
 8024ba6:	f000 ffa8 	bl	8025afa <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 8024baa:	687b      	ldr	r3, [r7, #4]
 8024bac:	4618      	mov	r0, r3
 8024bae:	3708      	adds	r7, #8
 8024bb0:	46bd      	mov	sp, r7
 8024bb2:	bd80      	pop	{r7, pc}

08024bb4 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8024bb4:	b580      	push	{r7, lr}
 8024bb6:	b086      	sub	sp, #24
 8024bb8:	af00      	add	r7, sp, #0
 8024bba:	6078      	str	r0, [r7, #4]
 8024bbc:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8024bbe:	f107 030c 	add.w	r3, r7, #12
 8024bc2:	4618      	mov	r0, r3
 8024bc4:	f7fe fdea 	bl	802379c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8024bc8:	f107 030c 	add.w	r3, r7, #12
 8024bcc:	6879      	ldr	r1, [r7, #4]
 8024bce:	4618      	mov	r0, r3
 8024bd0:	f000 ffa2 	bl	8025b18 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8024bd4:	6839      	ldr	r1, [r7, #0]
 8024bd6:	6878      	ldr	r0, [r7, #4]
 8024bd8:	f000 ff9e 	bl	8025b18 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8024bdc:	f107 030c 	add.w	r3, r7, #12
 8024be0:	4619      	mov	r1, r3
 8024be2:	6838      	ldr	r0, [r7, #0]
 8024be4:	f000 ff98 	bl	8025b18 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8024be8:	bf00      	nop
 8024bea:	3718      	adds	r7, #24
 8024bec:	46bd      	mov	sp, r7
 8024bee:	bd80      	pop	{r7, pc}

08024bf0 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8024bf0:	b580      	push	{r7, lr}
 8024bf2:	b082      	sub	sp, #8
 8024bf4:	af00      	add	r7, sp, #0
 8024bf6:	6078      	str	r0, [r7, #4]
 8024bf8:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8024bfa:	461a      	mov	r2, r3
 8024bfc:	6839      	ldr	r1, [r7, #0]
 8024bfe:	6878      	ldr	r0, [r7, #4]
 8024c00:	f000 ffa1 	bl	8025b46 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8024c04:	bf00      	nop
 8024c06:	3708      	adds	r7, #8
 8024c08:	46bd      	mov	sp, r7
 8024c0a:	bd80      	pop	{r7, pc}

08024c0c <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8024c0c:	b580      	push	{r7, lr}
 8024c0e:	b084      	sub	sp, #16
 8024c10:	af00      	add	r7, sp, #0
 8024c12:	60f8      	str	r0, [r7, #12]
 8024c14:	60b9      	str	r1, [r7, #8]
 8024c16:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8024c18:	6878      	ldr	r0, [r7, #4]
 8024c1a:	f7fe feb6 	bl	802398a <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8024c1e:	4603      	mov	r3, r0
 8024c20:	461a      	mov	r2, r3
 8024c22:	68b9      	ldr	r1, [r7, #8]
 8024c24:	68f8      	ldr	r0, [r7, #12]
 8024c26:	f000 ff9b 	bl	8025b60 <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8024c2a:	bf00      	nop
 8024c2c:	3710      	adds	r7, #16
 8024c2e:	46bd      	mov	sp, r7
 8024c30:	bd80      	pop	{r7, pc}
	...

08024c34 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8024c34:	b5b0      	push	{r4, r5, r7, lr}
 8024c36:	b082      	sub	sp, #8
 8024c38:	af00      	add	r7, sp, #0
 8024c3a:	6078      	str	r0, [r7, #4]
 8024c3c:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8024c3e:	6878      	ldr	r0, [r7, #4]
 8024c40:	f7ff f9ca 	bl	8023fd8 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 8024c44:	4604      	mov	r4, r0
 8024c46:	6878      	ldr	r0, [r7, #4]
 8024c48:	f000 ffa2 	bl	8025b90 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>
 8024c4c:	4603      	mov	r3, r0
 8024c4e:	429c      	cmp	r4, r3
 8024c50:	bf0c      	ite	eq
 8024c52:	2301      	moveq	r3, #1
 8024c54:	2300      	movne	r3, #0
 8024c56:	b2db      	uxtb	r3, r3
 8024c58:	2b00      	cmp	r3, #0
 8024c5a:	d002      	beq.n	8024c62 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8024c5c:	4816      	ldr	r0, [pc, #88]	; (8024cb8 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 8024c5e:	f018 fbfd 	bl	803d45c <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8024c62:	2101      	movs	r1, #1
 8024c64:	6878      	ldr	r0, [r7, #4]
 8024c66:	f000 ffa4 	bl	8025bb2 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8024c6a:	687a      	ldr	r2, [r7, #4]
 8024c6c:	687b      	ldr	r3, [r7, #4]
 8024c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024c70:	1d1c      	adds	r4, r3, #4
 8024c72:	4610      	mov	r0, r2
 8024c74:	f000 ffb8 	bl	8025be8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 8024c78:	4603      	mov	r3, r0
 8024c7a:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8024c7c:	687c      	ldr	r4, [r7, #4]
 8024c7e:	687b      	ldr	r3, [r7, #4]
 8024c80:	699d      	ldr	r5, [r3, #24]
 8024c82:	6838      	ldr	r0, [r7, #0]
 8024c84:	f7fe fe81 	bl	802398a <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8024c88:	4603      	mov	r3, r0
 8024c8a:	461a      	mov	r2, r3
 8024c8c:	4629      	mov	r1, r5
 8024c8e:	4620      	mov	r0, r4
 8024c90:	f7ff ffbc 	bl	8024c0c <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8024c94:	687b      	ldr	r3, [r7, #4]
 8024c96:	f103 0218 	add.w	r2, r3, #24
 8024c9a:	687b      	ldr	r3, [r7, #4]
 8024c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024c9e:	3304      	adds	r3, #4
 8024ca0:	4619      	mov	r1, r3
 8024ca2:	4610      	mov	r0, r2
 8024ca4:	f000 fddf 	bl	8025866 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8024ca8:	687b      	ldr	r3, [r7, #4]
 8024caa:	69da      	ldr	r2, [r3, #28]
 8024cac:	687b      	ldr	r3, [r7, #4]
 8024cae:	619a      	str	r2, [r3, #24]
      }
 8024cb0:	bf00      	nop
 8024cb2:	3708      	adds	r7, #8
 8024cb4:	46bd      	mov	sp, r7
 8024cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8024cb8:	0803ee1c 	.word	0x0803ee1c

08024cbc <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024cbc:	b480      	push	{r7}
 8024cbe:	b083      	sub	sp, #12
 8024cc0:	af00      	add	r7, sp, #0
 8024cc2:	6078      	str	r0, [r7, #4]
 8024cc4:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8024cc6:	687b      	ldr	r3, [r7, #4]
 8024cc8:	681a      	ldr	r2, [r3, #0]
 8024cca:	683b      	ldr	r3, [r7, #0]
 8024ccc:	681b      	ldr	r3, [r3, #0]
 8024cce:	429a      	cmp	r2, r3
 8024cd0:	bf0c      	ite	eq
 8024cd2:	2301      	moveq	r3, #1
 8024cd4:	2300      	movne	r3, #0
 8024cd6:	b2db      	uxtb	r3, r3
 8024cd8:	4618      	mov	r0, r3
 8024cda:	370c      	adds	r7, #12
 8024cdc:	46bd      	mov	sp, r7
 8024cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ce2:	4770      	bx	lr

08024ce4 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8024ce4:	b480      	push	{r7}
 8024ce6:	b083      	sub	sp, #12
 8024ce8:	af00      	add	r7, sp, #0
 8024cea:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8024cec:	687b      	ldr	r3, [r7, #4]
 8024cee:	681b      	ldr	r3, [r3, #0]
 8024cf0:	4618      	mov	r0, r3
 8024cf2:	370c      	adds	r7, #12
 8024cf4:	46bd      	mov	sp, r7
 8024cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cfa:	4770      	bx	lr

08024cfc <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8024cfc:	b480      	push	{r7}
 8024cfe:	b083      	sub	sp, #12
 8024d00:	af00      	add	r7, sp, #0
 8024d02:	6078      	str	r0, [r7, #4]
 8024d04:	6039      	str	r1, [r7, #0]
 8024d06:	687b      	ldr	r3, [r7, #4]
 8024d08:	4618      	mov	r0, r3
 8024d0a:	370c      	adds	r7, #12
 8024d0c:	46bd      	mov	sp, r7
 8024d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d12:	4770      	bx	lr

08024d14 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8024d14:	b580      	push	{r7, lr}
 8024d16:	b082      	sub	sp, #8
 8024d18:	af00      	add	r7, sp, #0
 8024d1a:	6078      	str	r0, [r7, #4]
 8024d1c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8024d1e:	6839      	ldr	r1, [r7, #0]
 8024d20:	6878      	ldr	r0, [r7, #4]
 8024d22:	f000 ff73 	bl	8025c0c <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>
	}
 8024d26:	bf00      	nop
 8024d28:	3708      	adds	r7, #8
 8024d2a:	46bd      	mov	sp, r7
 8024d2c:	bd80      	pop	{r7, pc}

08024d2e <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8024d2e:	b580      	push	{r7, lr}
 8024d30:	b082      	sub	sp, #8
 8024d32:	af00      	add	r7, sp, #0
 8024d34:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8024d36:	687b      	ldr	r3, [r7, #4]
 8024d38:	4618      	mov	r0, r3
 8024d3a:	f7fe fcdd 	bl	80236f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8024d3e:	4602      	mov	r2, r0
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	689b      	ldr	r3, [r3, #8]
 8024d44:	4619      	mov	r1, r3
 8024d46:	4610      	mov	r0, r2
 8024d48:	f7ff ffe4 	bl	8024d14 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8024d4c:	687a      	ldr	r2, [r7, #4]
 8024d4e:	687b      	ldr	r3, [r7, #4]
 8024d50:	68db      	ldr	r3, [r3, #12]
 8024d52:	4619      	mov	r1, r3
 8024d54:	4610      	mov	r0, r2
 8024d56:	f000 fd9f 	bl	8025898 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8024d5a:	687b      	ldr	r3, [r7, #4]
 8024d5c:	f103 0208 	add.w	r2, r3, #8
 8024d60:	687b      	ldr	r3, [r7, #4]
 8024d62:	695b      	ldr	r3, [r3, #20]
 8024d64:	3304      	adds	r3, #4
 8024d66:	4619      	mov	r1, r3
 8024d68:	4610      	mov	r0, r2
 8024d6a:	f000 fd7c 	bl	8025866 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8024d6e:	687b      	ldr	r3, [r7, #4]
 8024d70:	68da      	ldr	r2, [r3, #12]
 8024d72:	687b      	ldr	r3, [r7, #4]
 8024d74:	609a      	str	r2, [r3, #8]
    }
 8024d76:	bf00      	nop
 8024d78:	3708      	adds	r7, #8
 8024d7a:	46bd      	mov	sp, r7
 8024d7c:	bd80      	pop	{r7, pc}

08024d7e <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8024d7e:	b580      	push	{r7, lr}
 8024d80:	b082      	sub	sp, #8
 8024d82:	af00      	add	r7, sp, #0
 8024d84:	6078      	str	r0, [r7, #4]
 8024d86:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8024d88:	6838      	ldr	r0, [r7, #0]
 8024d8a:	f7fc f938 	bl	8020ffe <_ZN7RequestD1Ev>
 8024d8e:	bf00      	nop
 8024d90:	3708      	adds	r7, #8
 8024d92:	46bd      	mov	sp, r7
 8024d94:	bd80      	pop	{r7, pc}

08024d96 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8024d96:	b580      	push	{r7, lr}
 8024d98:	b082      	sub	sp, #8
 8024d9a:	af00      	add	r7, sp, #0
 8024d9c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8024d9e:	687b      	ldr	r3, [r7, #4]
 8024da0:	4618      	mov	r0, r3
 8024da2:	f7fe fffd 	bl	8023da0 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8024da6:	4603      	mov	r3, r0
 8024da8:	4618      	mov	r0, r3
 8024daa:	f000 ff3b 	bl	8025c24 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8024dae:	4603      	mov	r3, r0
 8024db0:	4618      	mov	r0, r3
 8024db2:	3708      	adds	r7, #8
 8024db4:	46bd      	mov	sp, r7
 8024db6:	bd80      	pop	{r7, pc}

08024db8 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8024db8:	b580      	push	{r7, lr}
 8024dba:	b084      	sub	sp, #16
 8024dbc:	af00      	add	r7, sp, #0
 8024dbe:	60f8      	str	r0, [r7, #12]
 8024dc0:	60b9      	str	r1, [r7, #8]
 8024dc2:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8024dc4:	68b9      	ldr	r1, [r7, #8]
 8024dc6:	68f8      	ldr	r0, [r7, #12]
 8024dc8:	f000 ff46 	bl	8025c58 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8024dcc:	4603      	mov	r3, r0
 8024dce:	4618      	mov	r0, r3
 8024dd0:	3710      	adds	r7, #16
 8024dd2:	46bd      	mov	sp, r7
 8024dd4:	bd80      	pop	{r7, pc}

08024dd6 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8024dd6:	b590      	push	{r4, r7, lr}
 8024dd8:	b087      	sub	sp, #28
 8024dda:	af00      	add	r7, sp, #0
 8024ddc:	60f8      	str	r0, [r7, #12]
 8024dde:	60b9      	str	r1, [r7, #8]
 8024de0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8024de2:	68f8      	ldr	r0, [r7, #12]
 8024de4:	f7ff ffd7 	bl	8024d96 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8024de8:	4604      	mov	r4, r0
 8024dea:	68f8      	ldr	r0, [r7, #12]
 8024dec:	f7fd ffdb 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8024df0:	4603      	mov	r3, r0
 8024df2:	1ae2      	subs	r2, r4, r3
 8024df4:	68bb      	ldr	r3, [r7, #8]
 8024df6:	429a      	cmp	r2, r3
 8024df8:	bf34      	ite	cc
 8024dfa:	2301      	movcc	r3, #1
 8024dfc:	2300      	movcs	r3, #0
 8024dfe:	b2db      	uxtb	r3, r3
 8024e00:	2b00      	cmp	r3, #0
 8024e02:	d002      	beq.n	8024e0a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8024e04:	6878      	ldr	r0, [r7, #4]
 8024e06:	f018 fb29 	bl	803d45c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8024e0a:	68f8      	ldr	r0, [r7, #12]
 8024e0c:	f7fd ffcb 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8024e10:	4604      	mov	r4, r0
 8024e12:	68f8      	ldr	r0, [r7, #12]
 8024e14:	f7fd ffc7 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8024e18:	4603      	mov	r3, r0
 8024e1a:	613b      	str	r3, [r7, #16]
 8024e1c:	f107 0208 	add.w	r2, r7, #8
 8024e20:	f107 0310 	add.w	r3, r7, #16
 8024e24:	4611      	mov	r1, r2
 8024e26:	4618      	mov	r0, r3
 8024e28:	f7ff fc13 	bl	8024652 <_ZSt3maxIjERKT_S2_S2_>
 8024e2c:	4603      	mov	r3, r0
 8024e2e:	681b      	ldr	r3, [r3, #0]
 8024e30:	4423      	add	r3, r4
 8024e32:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8024e34:	68f8      	ldr	r0, [r7, #12]
 8024e36:	f7fd ffb6 	bl	8022da6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8024e3a:	4602      	mov	r2, r0
 8024e3c:	697b      	ldr	r3, [r7, #20]
 8024e3e:	4293      	cmp	r3, r2
 8024e40:	d306      	bcc.n	8024e50 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 8024e42:	68f8      	ldr	r0, [r7, #12]
 8024e44:	f7ff ffa7 	bl	8024d96 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8024e48:	4602      	mov	r2, r0
 8024e4a:	697b      	ldr	r3, [r7, #20]
 8024e4c:	4293      	cmp	r3, r2
 8024e4e:	d904      	bls.n	8024e5a <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 8024e50:	68f8      	ldr	r0, [r7, #12]
 8024e52:	f7ff ffa0 	bl	8024d96 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8024e56:	4603      	mov	r3, r0
 8024e58:	e000      	b.n	8024e5c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8024e5a:	697b      	ldr	r3, [r7, #20]
      }
 8024e5c:	4618      	mov	r0, r3
 8024e5e:	371c      	adds	r7, #28
 8024e60:	46bd      	mov	sp, r7
 8024e62:	bd90      	pop	{r4, r7, pc}

08024e64 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8024e64:	b580      	push	{r7, lr}
 8024e66:	b082      	sub	sp, #8
 8024e68:	af00      	add	r7, sp, #0
 8024e6a:	6078      	str	r0, [r7, #4]
 8024e6c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8024e6e:	683b      	ldr	r3, [r7, #0]
 8024e70:	2b00      	cmp	r3, #0
 8024e72:	d006      	beq.n	8024e82 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8024e74:	687b      	ldr	r3, [r7, #4]
 8024e76:	6839      	ldr	r1, [r7, #0]
 8024e78:	4618      	mov	r0, r3
 8024e7a:	f000 fefd 	bl	8025c78 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8024e7e:	4603      	mov	r3, r0
 8024e80:	e000      	b.n	8024e84 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8024e82:	2300      	movs	r3, #0
      }
 8024e84:	4618      	mov	r0, r3
 8024e86:	3708      	adds	r7, #8
 8024e88:	46bd      	mov	sp, r7
 8024e8a:	bd80      	pop	{r7, pc}

08024e8c <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8024e8c:	b590      	push	{r4, r7, lr}
 8024e8e:	b087      	sub	sp, #28
 8024e90:	af02      	add	r7, sp, #8
 8024e92:	60f8      	str	r0, [r7, #12]
 8024e94:	60b9      	str	r1, [r7, #8]
 8024e96:	607a      	str	r2, [r7, #4]
 8024e98:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8024e9a:	f88d 4000 	strb.w	r4, [sp]
 8024e9e:	683b      	ldr	r3, [r7, #0]
 8024ea0:	687a      	ldr	r2, [r7, #4]
 8024ea2:	68b9      	ldr	r1, [r7, #8]
 8024ea4:	68f8      	ldr	r0, [r7, #12]
 8024ea6:	f000 fef6 	bl	8025c96 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8024eaa:	4603      	mov	r3, r0
      }
 8024eac:	4618      	mov	r0, r3
 8024eae:	3714      	adds	r7, #20
 8024eb0:	46bd      	mov	sp, r7
 8024eb2:	bd90      	pop	{r4, r7, pc}

08024eb4 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8024eb4:	b590      	push	{r4, r7, lr}
 8024eb6:	b085      	sub	sp, #20
 8024eb8:	af00      	add	r7, sp, #0
 8024eba:	60f8      	str	r0, [r7, #12]
 8024ebc:	60b9      	str	r1, [r7, #8]
 8024ebe:	607a      	str	r2, [r7, #4]
 8024ec0:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8024ec2:	68f8      	ldr	r0, [r7, #12]
 8024ec4:	f000 fef9 	bl	8025cba <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8024ec8:	4604      	mov	r4, r0
 8024eca:	68b8      	ldr	r0, [r7, #8]
 8024ecc:	f000 fef5 	bl	8025cba <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8024ed0:	4601      	mov	r1, r0
 8024ed2:	683b      	ldr	r3, [r7, #0]
 8024ed4:	687a      	ldr	r2, [r7, #4]
 8024ed6:	4620      	mov	r0, r4
 8024ed8:	f000 fefe 	bl	8025cd8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8024edc:	4603      	mov	r3, r0
    }
 8024ede:	4618      	mov	r0, r3
 8024ee0:	3714      	adds	r7, #20
 8024ee2:	46bd      	mov	sp, r7
 8024ee4:	bd90      	pop	{r4, r7, pc}

08024ee6 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8024ee6:	b480      	push	{r7}
 8024ee8:	b085      	sub	sp, #20
 8024eea:	af00      	add	r7, sp, #0
 8024eec:	60f8      	str	r0, [r7, #12]
 8024eee:	60b9      	str	r1, [r7, #8]
 8024ef0:	713a      	strb	r2, [r7, #4]
    { }
 8024ef2:	bf00      	nop
 8024ef4:	3714      	adds	r7, #20
 8024ef6:	46bd      	mov	sp, r7
 8024ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024efc:	4770      	bx	lr

08024efe <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8024efe:	b480      	push	{r7}
 8024f00:	b083      	sub	sp, #12
 8024f02:	af00      	add	r7, sp, #0
 8024f04:	6078      	str	r0, [r7, #4]
 8024f06:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8024f08:	683b      	ldr	r3, [r7, #0]
 8024f0a:	681a      	ldr	r2, [r3, #0]
 8024f0c:	687b      	ldr	r3, [r7, #4]
 8024f0e:	601a      	str	r2, [r3, #0]
 8024f10:	687b      	ldr	r3, [r7, #4]
 8024f12:	4618      	mov	r0, r3
 8024f14:	370c      	adds	r7, #12
 8024f16:	46bd      	mov	sp, r7
 8024f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f1c:	4770      	bx	lr

08024f1e <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8024f1e:	b580      	push	{r7, lr}
 8024f20:	b084      	sub	sp, #16
 8024f22:	af00      	add	r7, sp, #0
 8024f24:	60f8      	str	r0, [r7, #12]
 8024f26:	60b9      	str	r1, [r7, #8]
 8024f28:	607a      	str	r2, [r7, #4]
 8024f2a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8024f2c:	687a      	ldr	r2, [r7, #4]
 8024f2e:	68b9      	ldr	r1, [r7, #8]
 8024f30:	68f8      	ldr	r0, [r7, #12]
 8024f32:	f000 fee2 	bl	8025cfa <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8024f36:	4603      	mov	r3, r0
 8024f38:	4618      	mov	r0, r3
 8024f3a:	3710      	adds	r7, #16
 8024f3c:	46bd      	mov	sp, r7
 8024f3e:	bd80      	pop	{r7, pc}

08024f40 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8024f40:	b480      	push	{r7}
 8024f42:	b083      	sub	sp, #12
 8024f44:	af00      	add	r7, sp, #0
 8024f46:	6078      	str	r0, [r7, #4]
 8024f48:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8024f4a:	683b      	ldr	r3, [r7, #0]
 8024f4c:	681a      	ldr	r2, [r3, #0]
 8024f4e:	687b      	ldr	r3, [r7, #4]
 8024f50:	601a      	str	r2, [r3, #0]
 8024f52:	687b      	ldr	r3, [r7, #4]
 8024f54:	4618      	mov	r0, r3
 8024f56:	370c      	adds	r7, #12
 8024f58:	46bd      	mov	sp, r7
 8024f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f5e:	4770      	bx	lr

08024f60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8024f60:	b480      	push	{r7}
 8024f62:	b083      	sub	sp, #12
 8024f64:	af00      	add	r7, sp, #0
 8024f66:	6078      	str	r0, [r7, #4]
    { return __it; }
 8024f68:	687b      	ldr	r3, [r7, #4]
 8024f6a:	4618      	mov	r0, r3
 8024f6c:	370c      	adds	r7, #12
 8024f6e:	46bd      	mov	sp, r7
 8024f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f74:	4770      	bx	lr

08024f76 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8024f76:	b5b0      	push	{r4, r5, r7, lr}
 8024f78:	b084      	sub	sp, #16
 8024f7a:	af00      	add	r7, sp, #0
 8024f7c:	60f8      	str	r0, [r7, #12]
 8024f7e:	60b9      	str	r1, [r7, #8]
 8024f80:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8024f82:	68f8      	ldr	r0, [r7, #12]
 8024f84:	f000 fecb 	bl	8025d1e <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8024f88:	4604      	mov	r4, r0
 8024f8a:	68b8      	ldr	r0, [r7, #8]
 8024f8c:	f000 fec7 	bl	8025d1e <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8024f90:	4605      	mov	r5, r0
 8024f92:	6878      	ldr	r0, [r7, #4]
 8024f94:	f000 fed1 	bl	8025d3a <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8024f98:	4603      	mov	r3, r0
 8024f9a:	461a      	mov	r2, r3
 8024f9c:	4629      	mov	r1, r5
 8024f9e:	4620      	mov	r0, r4
 8024fa0:	f000 fed9 	bl	8025d56 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8024fa4:	4603      	mov	r3, r0
 8024fa6:	4619      	mov	r1, r3
 8024fa8:	6878      	ldr	r0, [r7, #4]
 8024faa:	f000 fee4 	bl	8025d76 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>
 8024fae:	4603      	mov	r3, r0
    }
 8024fb0:	4618      	mov	r0, r3
 8024fb2:	3710      	adds	r7, #16
 8024fb4:	46bd      	mov	sp, r7
 8024fb6:	bdb0      	pop	{r4, r5, r7, pc}

08024fb8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8024fb8:	b580      	push	{r7, lr}
 8024fba:	b082      	sub	sp, #8
 8024fbc:	af00      	add	r7, sp, #0
 8024fbe:	6078      	str	r0, [r7, #4]
 8024fc0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8024fc2:	6839      	ldr	r1, [r7, #0]
 8024fc4:	6878      	ldr	r0, [r7, #4]
 8024fc6:	f000 feeb 	bl	8025da0 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 8024fca:	bf00      	nop
 8024fcc:	3708      	adds	r7, #8
 8024fce:	46bd      	mov	sp, r7
 8024fd0:	bd80      	pop	{r7, pc}

08024fd2 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 8024fd2:	b480      	push	{r7}
 8024fd4:	b083      	sub	sp, #12
 8024fd6:	af00      	add	r7, sp, #0
 8024fd8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8024fda:	687b      	ldr	r3, [r7, #4]
 8024fdc:	4618      	mov	r0, r3
 8024fde:	370c      	adds	r7, #12
 8024fe0:	46bd      	mov	sp, r7
 8024fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fe6:	4770      	bx	lr

08024fe8 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8024fe8:	b5b0      	push	{r4, r5, r7, lr}
 8024fea:	b084      	sub	sp, #16
 8024fec:	af00      	add	r7, sp, #0
 8024fee:	60f8      	str	r0, [r7, #12]
 8024ff0:	60b9      	str	r1, [r7, #8]
 8024ff2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8024ff4:	68f8      	ldr	r0, [r7, #12]
 8024ff6:	f000 fede 	bl	8025db6 <_ZSt12__niter_baseIPhET_S1_>
 8024ffa:	4604      	mov	r4, r0
 8024ffc:	68b8      	ldr	r0, [r7, #8]
 8024ffe:	f000 feda 	bl	8025db6 <_ZSt12__niter_baseIPhET_S1_>
 8025002:	4605      	mov	r5, r0
 8025004:	687b      	ldr	r3, [r7, #4]
 8025006:	4618      	mov	r0, r3
 8025008:	f000 fed5 	bl	8025db6 <_ZSt12__niter_baseIPhET_S1_>
 802500c:	4603      	mov	r3, r0
 802500e:	461a      	mov	r2, r3
 8025010:	4629      	mov	r1, r5
 8025012:	4620      	mov	r0, r4
 8025014:	f000 feda 	bl	8025dcc <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8025018:	4602      	mov	r2, r0
 802501a:	1d3b      	adds	r3, r7, #4
 802501c:	4611      	mov	r1, r2
 802501e:	4618      	mov	r0, r3
 8025020:	f000 fee4 	bl	8025dec <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8025024:	4603      	mov	r3, r0
    }
 8025026:	4618      	mov	r0, r3
 8025028:	3710      	adds	r7, #16
 802502a:	46bd      	mov	sp, r7
 802502c:	bdb0      	pop	{r4, r5, r7, pc}

0802502e <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 802502e:	b580      	push	{r7, lr}
 8025030:	b086      	sub	sp, #24
 8025032:	af00      	add	r7, sp, #0
 8025034:	60f8      	str	r0, [r7, #12]
 8025036:	60b9      	str	r1, [r7, #8]
 8025038:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 802503a:	2301      	movs	r3, #1
 802503c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 802503e:	687a      	ldr	r2, [r7, #4]
 8025040:	68b9      	ldr	r1, [r7, #8]
 8025042:	68f8      	ldr	r0, [r7, #12]
 8025044:	f000 fede 	bl	8025e04 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 8025048:	4603      	mov	r3, r0
    }
 802504a:	4618      	mov	r0, r3
 802504c:	3718      	adds	r7, #24
 802504e:	46bd      	mov	sp, r7
 8025050:	bd80      	pop	{r7, pc}

08025052 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8025052:	b580      	push	{r7, lr}
 8025054:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025056:	2014      	movs	r0, #20
 8025058:	f7fb ff13 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 802505c:	4603      	mov	r3, r0
 802505e:	4618      	mov	r0, r3
 8025060:	bd80      	pop	{r7, pc}

08025062 <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8025062:	b580      	push	{r7, lr}
 8025064:	b082      	sub	sp, #8
 8025066:	af00      	add	r7, sp, #0
 8025068:	6078      	str	r0, [r7, #4]
 802506a:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 802506c:	f000 feda 	bl	8025e24 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8025070:	4603      	mov	r3, r0
 8025072:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8025074:	687b      	ldr	r3, [r7, #4]
 8025076:	68da      	ldr	r2, [r3, #12]
 8025078:	683b      	ldr	r3, [r7, #0]
 802507a:	68db      	ldr	r3, [r3, #12]
 802507c:	1ad3      	subs	r3, r2, r3
 802507e:	109b      	asrs	r3, r3, #2
 8025080:	3b01      	subs	r3, #1
 8025082:	fb01 f303 	mul.w	r3, r1, r3
 8025086:	687a      	ldr	r2, [r7, #4]
 8025088:	6811      	ldr	r1, [r2, #0]
 802508a:	687a      	ldr	r2, [r7, #4]
 802508c:	6852      	ldr	r2, [r2, #4]
 802508e:	1a8a      	subs	r2, r1, r2
 8025090:	1112      	asrs	r2, r2, #4
 8025092:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8025094:	683a      	ldr	r2, [r7, #0]
 8025096:	6891      	ldr	r1, [r2, #8]
 8025098:	683a      	ldr	r2, [r7, #0]
 802509a:	6812      	ldr	r2, [r2, #0]
 802509c:	1a8a      	subs	r2, r1, r2
 802509e:	1112      	asrs	r2, r2, #4
 80250a0:	4413      	add	r3, r2
      }
 80250a2:	4618      	mov	r0, r3
 80250a4:	3708      	adds	r7, #8
 80250a6:	46bd      	mov	sp, r7
 80250a8:	bd80      	pop	{r7, pc}

080250aa <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>:
      size() const noexcept { return _M_len; }
 80250aa:	b480      	push	{r7}
 80250ac:	b083      	sub	sp, #12
 80250ae:	af00      	add	r7, sp, #0
 80250b0:	6078      	str	r0, [r7, #4]
 80250b2:	687b      	ldr	r3, [r7, #4]
 80250b4:	685b      	ldr	r3, [r3, #4]
 80250b6:	4618      	mov	r0, r3
 80250b8:	370c      	adds	r7, #12
 80250ba:	46bd      	mov	sp, r7
 80250bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250c0:	4770      	bx	lr

080250c2 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80250c2:	b5b0      	push	{r4, r5, r7, lr}
 80250c4:	b082      	sub	sp, #8
 80250c6:	af00      	add	r7, sp, #0
 80250c8:	6078      	str	r0, [r7, #4]
 80250ca:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80250cc:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80250ce:	1d3b      	adds	r3, r7, #4
 80250d0:	4618      	mov	r0, r3
 80250d2:	f000 f83d 	bl	8025150 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 80250d6:	462a      	mov	r2, r5
 80250d8:	6839      	ldr	r1, [r7, #0]
 80250da:	4620      	mov	r0, r4
 80250dc:	f000 feaa 	bl	8025e34 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 80250e0:	4603      	mov	r3, r0
    }
 80250e2:	4618      	mov	r0, r3
 80250e4:	3708      	adds	r7, #8
 80250e6:	46bd      	mov	sp, r7
 80250e8:	bdb0      	pop	{r4, r5, r7, pc}

080250ea <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 80250ea:	b590      	push	{r4, r7, lr}
 80250ec:	b085      	sub	sp, #20
 80250ee:	af00      	add	r7, sp, #0
 80250f0:	6078      	str	r0, [r7, #4]
 80250f2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 80250f4:	683b      	ldr	r3, [r7, #0]
 80250f6:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 80250f8:	6878      	ldr	r0, [r7, #4]
 80250fa:	f000 f829 	bl	8025150 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 80250fe:	4622      	mov	r2, r4
 8025100:	68f9      	ldr	r1, [r7, #12]
 8025102:	6878      	ldr	r0, [r7, #4]
 8025104:	f000 feac 	bl	8025e60 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 8025108:	bf00      	nop
 802510a:	3714      	adds	r7, #20
 802510c:	46bd      	mov	sp, r7
 802510e:	bd90      	pop	{r4, r7, pc}

08025110 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 8025110:	b5b0      	push	{r4, r5, r7, lr}
 8025112:	b088      	sub	sp, #32
 8025114:	af00      	add	r7, sp, #0
 8025116:	60f8      	str	r0, [r7, #12]
 8025118:	60b9      	str	r1, [r7, #8]
 802511a:	607a      	str	r2, [r7, #4]
 802511c:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802511e:	68b8      	ldr	r0, [r7, #8]
 8025120:	f000 feb4 	bl	8025e8c <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8025124:	4604      	mov	r4, r0
 8025126:	6878      	ldr	r0, [r7, #4]
 8025128:	f000 feb0 	bl	8025e8c <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 802512c:	4605      	mov	r5, r0
 802512e:	f107 0310 	add.w	r3, r7, #16
 8025132:	6839      	ldr	r1, [r7, #0]
 8025134:	4618      	mov	r0, r3
 8025136:	f7ff f9af 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802513a:	68f8      	ldr	r0, [r7, #12]
 802513c:	f107 0310 	add.w	r3, r7, #16
 8025140:	462a      	mov	r2, r5
 8025142:	4621      	mov	r1, r4
 8025144:	f000 fead 	bl	8025ea2 <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>
    }
 8025148:	68f8      	ldr	r0, [r7, #12]
 802514a:	3720      	adds	r7, #32
 802514c:	46bd      	mov	sp, r7
 802514e:	bdb0      	pop	{r4, r5, r7, pc}

08025150 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8025150:	b480      	push	{r7}
 8025152:	b083      	sub	sp, #12
 8025154:	af00      	add	r7, sp, #0
 8025156:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8025158:	bf00      	nop
 802515a:	4618      	mov	r0, r3
 802515c:	370c      	adds	r7, #12
 802515e:	46bd      	mov	sp, r7
 8025160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025164:	4770      	bx	lr

08025166 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>:
      deque<_Tp, _Alloc>::
 8025166:	b590      	push	{r4, r7, lr}
 8025168:	b0a5      	sub	sp, #148	; 0x94
 802516a:	af02      	add	r7, sp, #8
 802516c:	60f8      	str	r0, [r7, #12]
 802516e:	60b9      	str	r1, [r7, #8]
 8025170:	607a      	str	r2, [r7, #4]
 8025172:	603b      	str	r3, [r7, #0]
	const size_type __n = std::distance(__first, __last);
 8025174:	6839      	ldr	r1, [r7, #0]
 8025176:	6878      	ldr	r0, [r7, #4]
 8025178:	f7ff ffa3 	bl	80250c2 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 802517c:	4603      	mov	r3, r0
 802517e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 8025182:	68bb      	ldr	r3, [r7, #8]
 8025184:	681a      	ldr	r2, [r3, #0]
 8025186:	68fb      	ldr	r3, [r7, #12]
 8025188:	689b      	ldr	r3, [r3, #8]
 802518a:	429a      	cmp	r2, r3
 802518c:	d126      	bne.n	80251dc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0x76>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 802518e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8025192:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8025196:	68f9      	ldr	r1, [r7, #12]
 8025198:	4618      	mov	r0, r3
 802519a:	f000 feb3 	bl	8025f04 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
		std::__uninitialized_copy_a(__first, __last, __new_start,
 802519e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80251a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80251a6:	4611      	mov	r1, r2
 80251a8:	4618      	mov	r0, r3
 80251aa:	f7ff f975 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 80251ae:	68fb      	ldr	r3, [r7, #12]
 80251b0:	4618      	mov	r0, r3
 80251b2:	f7ff f82f 	bl	8024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80251b6:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 80251b8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80251bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80251c0:	9200      	str	r2, [sp, #0]
 80251c2:	683a      	ldr	r2, [r7, #0]
 80251c4:	6879      	ldr	r1, [r7, #4]
 80251c6:	f000 fec7 	bl	8025f58 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 80251ca:	68fb      	ldr	r3, [r7, #12]
 80251cc:	f103 0408 	add.w	r4, r3, #8
 80251d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80251d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80251d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80251da:	e03d      	b.n	8025258 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 80251dc:	68bb      	ldr	r3, [r7, #8]
 80251de:	681a      	ldr	r2, [r3, #0]
 80251e0:	68fb      	ldr	r3, [r7, #12]
 80251e2:	699b      	ldr	r3, [r3, #24]
 80251e4:	429a      	cmp	r2, r3
 80251e6:	d127      	bne.n	8025238 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 80251e8:	f107 0314 	add.w	r3, r7, #20
 80251ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80251f0:	68f9      	ldr	r1, [r7, #12]
 80251f2:	4618      	mov	r0, r3
 80251f4:	f000 fec8 	bl	8025f88 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 80251f8:	68fb      	ldr	r3, [r7, #12]
 80251fa:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 80251fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8025202:	4611      	mov	r1, r2
 8025204:	4618      	mov	r0, r3
 8025206:	f7ff f947 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 802520a:	68fb      	ldr	r3, [r7, #12]
 802520c:	4618      	mov	r0, r3
 802520e:	f7ff f801 	bl	8024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025212:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 8025214:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8025218:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802521c:	9200      	str	r2, [sp, #0]
 802521e:	683a      	ldr	r2, [r7, #0]
 8025220:	6879      	ldr	r1, [r7, #4]
 8025222:	f000 fe99 	bl	8025f58 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 8025226:	68fb      	ldr	r3, [r7, #12]
 8025228:	f103 0418 	add.w	r4, r3, #24
 802522c:	f107 0314 	add.w	r3, r7, #20
 8025230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025232:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8025236:	e00f      	b.n	8025258 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 8025238:	f107 0374 	add.w	r3, r7, #116	; 0x74
 802523c:	68b9      	ldr	r1, [r7, #8]
 802523e:	4618      	mov	r0, r3
 8025240:	f7ff f92a 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025244:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8025248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802524c:	9300      	str	r3, [sp, #0]
 802524e:	683b      	ldr	r3, [r7, #0]
 8025250:	687a      	ldr	r2, [r7, #4]
 8025252:	68f8      	ldr	r0, [r7, #12]
 8025254:	f000 fec2 	bl	8025fdc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>
      }
 8025258:	bf00      	nop
 802525a:	378c      	adds	r7, #140	; 0x8c
 802525c:	46bd      	mov	sp, r7
 802525e:	bd90      	pop	{r4, r7, pc}

08025260 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>:
      _M_erase_at_end(iterator __pos)
 8025260:	b590      	push	{r4, r7, lr}
 8025262:	b08b      	sub	sp, #44	; 0x2c
 8025264:	af00      	add	r7, sp, #0
 8025266:	6078      	str	r0, [r7, #4]
 8025268:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 802526a:	f107 0308 	add.w	r3, r7, #8
 802526e:	6839      	ldr	r1, [r7, #0]
 8025270:	4618      	mov	r0, r3
 8025272:	f7ff f911 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025276:	f107 0318 	add.w	r3, r7, #24
 802527a:	6879      	ldr	r1, [r7, #4]
 802527c:	4618      	mov	r0, r3
 802527e:	f7ff f8fc 	bl	802447a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8025282:	687b      	ldr	r3, [r7, #4]
 8025284:	4618      	mov	r0, r3
 8025286:	f7fe ffc5 	bl	8024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802528a:	4603      	mov	r3, r0
 802528c:	f107 0218 	add.w	r2, r7, #24
 8025290:	f107 0108 	add.w	r1, r7, #8
 8025294:	6878      	ldr	r0, [r7, #4]
 8025296:	f7ff f91b 	bl	80244d0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
	_M_destroy_nodes(__pos._M_node + 1,
 802529a:	6878      	ldr	r0, [r7, #4]
 802529c:	683b      	ldr	r3, [r7, #0]
 802529e:	68db      	ldr	r3, [r3, #12]
 80252a0:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80252a2:	687b      	ldr	r3, [r7, #4]
 80252a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80252a6:	3304      	adds	r3, #4
 80252a8:	461a      	mov	r2, r3
 80252aa:	f7ff f8a1 	bl	80243f0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	this->_M_impl._M_finish = __pos;
 80252ae:	687b      	ldr	r3, [r7, #4]
 80252b0:	683a      	ldr	r2, [r7, #0]
 80252b2:	f103 0418 	add.w	r4, r3, #24
 80252b6:	4613      	mov	r3, r2
 80252b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80252ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80252be:	bf00      	nop
 80252c0:	372c      	adds	r7, #44	; 0x2c
 80252c2:	46bd      	mov	sp, r7
 80252c4:	bd90      	pop	{r4, r7, pc}

080252c6 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80252c6:	b480      	push	{r7}
 80252c8:	b083      	sub	sp, #12
 80252ca:	af00      	add	r7, sp, #0
 80252cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80252ce:	687b      	ldr	r3, [r7, #4]
 80252d0:	4618      	mov	r0, r3
 80252d2:	370c      	adds	r7, #12
 80252d4:	46bd      	mov	sp, r7
 80252d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252da:	4770      	bx	lr

080252dc <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80252dc:	b5b0      	push	{r4, r5, r7, lr}
 80252de:	b084      	sub	sp, #16
 80252e0:	af00      	add	r7, sp, #0
 80252e2:	60f8      	str	r0, [r7, #12]
 80252e4:	60b9      	str	r1, [r7, #8]
 80252e6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80252e8:	6878      	ldr	r0, [r7, #4]
 80252ea:	f7ff ffec 	bl	80252c6 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 80252ee:	4605      	mov	r5, r0
 80252f0:	68bb      	ldr	r3, [r7, #8]
 80252f2:	4619      	mov	r1, r3
 80252f4:	2014      	movs	r0, #20
 80252f6:	f7fb fdb8 	bl	8020e6a <_ZnwjPv>
 80252fa:	4603      	mov	r3, r0
 80252fc:	461c      	mov	r4, r3
 80252fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025302:	682b      	ldr	r3, [r5, #0]
 8025304:	6023      	str	r3, [r4, #0]
 8025306:	bf00      	nop
 8025308:	3710      	adds	r7, #16
 802530a:	46bd      	mov	sp, r7
 802530c:	bdb0      	pop	{r4, r5, r7, pc}

0802530e <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 802530e:	b580      	push	{r7, lr}
 8025310:	b082      	sub	sp, #8
 8025312:	af00      	add	r7, sp, #0
 8025314:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8025316:	687b      	ldr	r3, [r7, #4]
 8025318:	4618      	mov	r0, r3
 802531a:	f001 f96c 	bl	80265f6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802531e:	4603      	mov	r3, r0
 8025320:	4618      	mov	r0, r3
 8025322:	f001 f94e 	bl	80265c2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>
 8025326:	4603      	mov	r3, r0
 8025328:	4618      	mov	r0, r3
 802532a:	3708      	adds	r7, #8
 802532c:	46bd      	mov	sp, r7
 802532e:	bd80      	pop	{r7, pc}

08025330 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8025330:	b580      	push	{r7, lr}
 8025332:	b082      	sub	sp, #8
 8025334:	af00      	add	r7, sp, #0
 8025336:	6078      	str	r0, [r7, #4]
 8025338:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 802533a:	687b      	ldr	r3, [r7, #4]
 802533c:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 802533e:	687b      	ldr	r3, [r7, #4]
 8025340:	681b      	ldr	r3, [r3, #0]
 8025342:	1ad3      	subs	r3, r2, r3
 8025344:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8025346:	461a      	mov	r2, r3
 8025348:	683b      	ldr	r3, [r7, #0]
 802534a:	4293      	cmp	r3, r2
 802534c:	d904      	bls.n	8025358 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 802534e:	2201      	movs	r2, #1
 8025350:	6839      	ldr	r1, [r7, #0]
 8025352:	6878      	ldr	r0, [r7, #4]
 8025354:	f001 f95a 	bl	802660c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8025358:	bf00      	nop
 802535a:	3708      	adds	r7, #8
 802535c:	46bd      	mov	sp, r7
 802535e:	bd80      	pop	{r7, pc}

08025360 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8025360:	b590      	push	{r4, r7, lr}
 8025362:	b083      	sub	sp, #12
 8025364:	af00      	add	r7, sp, #0
 8025366:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8025368:	687c      	ldr	r4, [r7, #4]
 802536a:	2014      	movs	r0, #20
 802536c:	f7fb fd89 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8025370:	4603      	mov	r3, r0
 8025372:	4619      	mov	r1, r3
 8025374:	4620      	mov	r0, r4
 8025376:	f001 f9e3 	bl	8026740 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>
 802537a:	4603      	mov	r3, r0
      }
 802537c:	4618      	mov	r0, r3
 802537e:	370c      	adds	r7, #12
 8025380:	46bd      	mov	sp, r7
 8025382:	bd90      	pop	{r4, r7, pc}

08025384 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8025384:	b590      	push	{r4, r7, lr}
 8025386:	b083      	sub	sp, #12
 8025388:	af00      	add	r7, sp, #0
 802538a:	6078      	str	r0, [r7, #4]
 802538c:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 802538e:	687b      	ldr	r3, [r7, #4]
 8025390:	683a      	ldr	r2, [r7, #0]
 8025392:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8025394:	683b      	ldr	r3, [r7, #0]
 8025396:	681a      	ldr	r2, [r3, #0]
 8025398:	687b      	ldr	r3, [r7, #4]
 802539a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 802539c:	687b      	ldr	r3, [r7, #4]
 802539e:	685c      	ldr	r4, [r3, #4]
 80253a0:	f000 f81f 	bl	80253e2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80253a4:	4602      	mov	r2, r0
 80253a6:	4613      	mov	r3, r2
 80253a8:	009b      	lsls	r3, r3, #2
 80253aa:	4413      	add	r3, r2
 80253ac:	009b      	lsls	r3, r3, #2
 80253ae:	18e2      	adds	r2, r4, r3
 80253b0:	687b      	ldr	r3, [r7, #4]
 80253b2:	609a      	str	r2, [r3, #8]
      }
 80253b4:	bf00      	nop
 80253b6:	370c      	adds	r7, #12
 80253b8:	46bd      	mov	sp, r7
 80253ba:	bd90      	pop	{r4, r7, pc}

080253bc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80253bc:	b590      	push	{r4, r7, lr}
 80253be:	b083      	sub	sp, #12
 80253c0:	af00      	add	r7, sp, #0
 80253c2:	6078      	str	r0, [r7, #4]
 80253c4:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80253c6:	687c      	ldr	r4, [r7, #4]
 80253c8:	2014      	movs	r0, #20
 80253ca:	f7fb fd5a 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80253ce:	4603      	mov	r3, r0
 80253d0:	461a      	mov	r2, r3
 80253d2:	6839      	ldr	r1, [r7, #0]
 80253d4:	4620      	mov	r0, r4
 80253d6:	f001 f9c2 	bl	802675e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>
      }
 80253da:	bf00      	nop
 80253dc:	370c      	adds	r7, #12
 80253de:	46bd      	mov	sp, r7
 80253e0:	bd90      	pop	{r4, r7, pc}

080253e2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80253e2:	b580      	push	{r7, lr}
 80253e4:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80253e6:	2014      	movs	r0, #20
 80253e8:	f7fb fd4b 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80253ec:	4603      	mov	r3, r0
 80253ee:	4618      	mov	r0, r3
 80253f0:	bd80      	pop	{r7, pc}

080253f2 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 80253f2:	b480      	push	{r7}
 80253f4:	b083      	sub	sp, #12
 80253f6:	af00      	add	r7, sp, #0
 80253f8:	6078      	str	r0, [r7, #4]
 80253fa:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80253fc:	bf00      	nop
 80253fe:	370c      	adds	r7, #12
 8025400:	46bd      	mov	sp, r7
 8025402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025406:	4770      	bx	lr

08025408 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8025408:	b580      	push	{r7, lr}
 802540a:	b084      	sub	sp, #16
 802540c:	af00      	add	r7, sp, #0
 802540e:	60f8      	str	r0, [r7, #12]
 8025410:	60b9      	str	r1, [r7, #8]
 8025412:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8025414:	68b9      	ldr	r1, [r7, #8]
 8025416:	68f8      	ldr	r0, [r7, #12]
 8025418:	f7ff f83e 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp += __n;
 802541c:	6879      	ldr	r1, [r7, #4]
 802541e:	68f8      	ldr	r0, [r7, #12]
 8025420:	f001 f9ac 	bl	802677c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	return __tmp;
 8025424:	bf00      	nop
      }
 8025426:	68f8      	ldr	r0, [r7, #12]
 8025428:	3710      	adds	r7, #16
 802542a:	46bd      	mov	sp, r7
 802542c:	bd80      	pop	{r7, pc}

0802542e <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 802542e:	b480      	push	{r7}
 8025430:	b083      	sub	sp, #12
 8025432:	af00      	add	r7, sp, #0
 8025434:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8025436:	687b      	ldr	r3, [r7, #4]
 8025438:	681b      	ldr	r3, [r3, #0]
 802543a:	4618      	mov	r0, r3
 802543c:	370c      	adds	r7, #12
 802543e:	46bd      	mov	sp, r7
 8025440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025444:	4770      	bx	lr

08025446 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8025446:	b580      	push	{r7, lr}
 8025448:	b082      	sub	sp, #8
 802544a:	af00      	add	r7, sp, #0
 802544c:	6078      	str	r0, [r7, #4]
 802544e:	6878      	ldr	r0, [r7, #4]
 8025450:	f001 f9f8 	bl	8026844 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>
 8025454:	687b      	ldr	r3, [r7, #4]
 8025456:	4618      	mov	r0, r3
 8025458:	3708      	adds	r7, #8
 802545a:	46bd      	mov	sp, r7
 802545c:	bd80      	pop	{r7, pc}

0802545e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 802545e:	b580      	push	{r7, lr}
 8025460:	b082      	sub	sp, #8
 8025462:	af00      	add	r7, sp, #0
 8025464:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8025466:	687b      	ldr	r3, [r7, #4]
 8025468:	2200      	movs	r2, #0
 802546a:	601a      	str	r2, [r3, #0]
 802546c:	687b      	ldr	r3, [r7, #4]
 802546e:	2200      	movs	r2, #0
 8025470:	605a      	str	r2, [r3, #4]
 8025472:	687b      	ldr	r3, [r7, #4]
 8025474:	3308      	adds	r3, #8
 8025476:	4618      	mov	r0, r3
 8025478:	f001 f9ef 	bl	802685a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
 802547c:	687b      	ldr	r3, [r7, #4]
 802547e:	3318      	adds	r3, #24
 8025480:	4618      	mov	r0, r3
 8025482:	f001 f9ea 	bl	802685a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
	{ }
 8025486:	687b      	ldr	r3, [r7, #4]
 8025488:	4618      	mov	r0, r3
 802548a:	3708      	adds	r7, #8
 802548c:	46bd      	mov	sp, r7
 802548e:	bd80      	pop	{r7, pc}

08025490 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025490:	b480      	push	{r7}
 8025492:	b083      	sub	sp, #12
 8025494:	af00      	add	r7, sp, #0
 8025496:	6078      	str	r0, [r7, #4]
 8025498:	687b      	ldr	r3, [r7, #4]
 802549a:	4618      	mov	r0, r3
 802549c:	370c      	adds	r7, #12
 802549e:	46bd      	mov	sp, r7
 80254a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254a4:	4770      	bx	lr

080254a6 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80254a6:	b590      	push	{r4, r7, lr}
 80254a8:	b085      	sub	sp, #20
 80254aa:	af00      	add	r7, sp, #0
 80254ac:	6078      	str	r0, [r7, #4]
 80254ae:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80254b0:	f107 030c 	add.w	r3, r7, #12
 80254b4:	6879      	ldr	r1, [r7, #4]
 80254b6:	4618      	mov	r0, r3
 80254b8:	f000 f82c 	bl	8025514 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80254bc:	f107 030c 	add.w	r3, r7, #12
 80254c0:	6839      	ldr	r1, [r7, #0]
 80254c2:	4618      	mov	r0, r3
 80254c4:	f001 f9e0 	bl	8026888 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>
 80254c8:	4604      	mov	r4, r0
 80254ca:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80254cc:	f107 030c 	add.w	r3, r7, #12
 80254d0:	4618      	mov	r0, r3
 80254d2:	f000 f830 	bl	8025536 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80254d6:	4623      	mov	r3, r4
      }
 80254d8:	4618      	mov	r0, r3
 80254da:	3714      	adds	r7, #20
 80254dc:	46bd      	mov	sp, r7
 80254de:	bd90      	pop	{r4, r7, pc}

080254e0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 80254e0:	b580      	push	{r7, lr}
 80254e2:	b086      	sub	sp, #24
 80254e4:	af00      	add	r7, sp, #0
 80254e6:	60f8      	str	r0, [r7, #12]
 80254e8:	60b9      	str	r1, [r7, #8]
 80254ea:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80254ec:	68bb      	ldr	r3, [r7, #8]
 80254ee:	617b      	str	r3, [r7, #20]
 80254f0:	697a      	ldr	r2, [r7, #20]
 80254f2:	687b      	ldr	r3, [r7, #4]
 80254f4:	429a      	cmp	r2, r3
 80254f6:	d209      	bcs.n	802550c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 80254f8:	68f8      	ldr	r0, [r7, #12]
 80254fa:	f7ff ff31 	bl	8025360 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 80254fe:	4602      	mov	r2, r0
 8025500:	697b      	ldr	r3, [r7, #20]
 8025502:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025504:	697b      	ldr	r3, [r7, #20]
 8025506:	3304      	adds	r3, #4
 8025508:	617b      	str	r3, [r7, #20]
 802550a:	e7f1      	b.n	80254f0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 802550c:	bf00      	nop
 802550e:	3718      	adds	r7, #24
 8025510:	46bd      	mov	sp, r7
 8025512:	bd80      	pop	{r7, pc}

08025514 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8025514:	b580      	push	{r7, lr}
 8025516:	b082      	sub	sp, #8
 8025518:	af00      	add	r7, sp, #0
 802551a:	6078      	str	r0, [r7, #4]
 802551c:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 802551e:	6838      	ldr	r0, [r7, #0]
 8025520:	f001 f869 	bl	80265f6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025524:	4603      	mov	r3, r0
 8025526:	4619      	mov	r1, r3
 8025528:	6878      	ldr	r0, [r7, #4]
 802552a:	f001 f9bc 	bl	80268a6 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>
 802552e:	6878      	ldr	r0, [r7, #4]
 8025530:	3708      	adds	r7, #8
 8025532:	46bd      	mov	sp, r7
 8025534:	bd80      	pop	{r7, pc}

08025536 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8025536:	b580      	push	{r7, lr}
 8025538:	b082      	sub	sp, #8
 802553a:	af00      	add	r7, sp, #0
 802553c:	6078      	str	r0, [r7, #4]
 802553e:	6878      	ldr	r0, [r7, #4]
 8025540:	f001 f9be 	bl	80268c0 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>
 8025544:	687b      	ldr	r3, [r7, #4]
 8025546:	4618      	mov	r0, r3
 8025548:	3708      	adds	r7, #8
 802554a:	46bd      	mov	sp, r7
 802554c:	bd80      	pop	{r7, pc}

0802554e <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802554e:	b580      	push	{r7, lr}
 8025550:	b084      	sub	sp, #16
 8025552:	af00      	add	r7, sp, #0
 8025554:	60f8      	str	r0, [r7, #12]
 8025556:	60b9      	str	r1, [r7, #8]
 8025558:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802555a:	687a      	ldr	r2, [r7, #4]
 802555c:	68b9      	ldr	r1, [r7, #8]
 802555e:	68f8      	ldr	r0, [r7, #12]
 8025560:	f001 f9b9 	bl	80268d6 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>
 8025564:	bf00      	nop
 8025566:	3710      	adds	r7, #16
 8025568:	46bd      	mov	sp, r7
 802556a:	bd80      	pop	{r7, pc}

0802556c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 802556c:	b580      	push	{r7, lr}
 802556e:	b082      	sub	sp, #8
 8025570:	af00      	add	r7, sp, #0
 8025572:	6078      	str	r0, [r7, #4]
 8025574:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8025576:	6839      	ldr	r1, [r7, #0]
 8025578:	6878      	ldr	r0, [r7, #4]
 802557a:	f001 f9c4 	bl	8026906 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 802557e:	bf00      	nop
 8025580:	3708      	adds	r7, #8
 8025582:	46bd      	mov	sp, r7
 8025584:	bd80      	pop	{r7, pc}

08025586 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8025586:	b580      	push	{r7, lr}
 8025588:	b086      	sub	sp, #24
 802558a:	af00      	add	r7, sp, #0
 802558c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 802558e:	f107 0308 	add.w	r3, r7, #8
 8025592:	6879      	ldr	r1, [r7, #4]
 8025594:	4618      	mov	r0, r3
 8025596:	f7fd ffee 	bl	8023576 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 802559a:	f107 0308 	add.w	r3, r7, #8
 802559e:	4619      	mov	r1, r3
 80255a0:	6878      	ldr	r0, [r7, #4]
 80255a2:	f001 f9e3 	bl	802696c <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 80255a6:	bf00      	nop
 80255a8:	3718      	adds	r7, #24
 80255aa:	46bd      	mov	sp, r7
 80255ac:	bd80      	pop	{r7, pc}

080255ae <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80255ae:	b580      	push	{r7, lr}
 80255b0:	b082      	sub	sp, #8
 80255b2:	af00      	add	r7, sp, #0
 80255b4:	6078      	str	r0, [r7, #4]
 80255b6:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 80255b8:	461a      	mov	r2, r3
 80255ba:	6839      	ldr	r1, [r7, #0]
 80255bc:	6878      	ldr	r0, [r7, #4]
 80255be:	f001 fa08 	bl	80269d2 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>
    }
 80255c2:	bf00      	nop
 80255c4:	3708      	adds	r7, #8
 80255c6:	46bd      	mov	sp, r7
 80255c8:	bd80      	pop	{r7, pc}

080255ca <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 80255ca:	b580      	push	{r7, lr}
 80255cc:	b082      	sub	sp, #8
 80255ce:	af00      	add	r7, sp, #0
 80255d0:	6078      	str	r0, [r7, #4]
 80255d2:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 80255d4:	6839      	ldr	r1, [r7, #0]
 80255d6:	6878      	ldr	r0, [r7, #4]
 80255d8:	f001 fa08 	bl	80269ec <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 80255dc:	bf00      	nop
 80255de:	3708      	adds	r7, #8
 80255e0:	46bd      	mov	sp, r7
 80255e2:	bd80      	pop	{r7, pc}

080255e4 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80255e4:	b580      	push	{r7, lr}
 80255e6:	b086      	sub	sp, #24
 80255e8:	af00      	add	r7, sp, #0
 80255ea:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 80255ec:	f107 0308 	add.w	r3, r7, #8
 80255f0:	6879      	ldr	r1, [r7, #4]
 80255f2:	4618      	mov	r0, r3
 80255f4:	f7fe f862 	bl	80236bc <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 80255f8:	f107 0308 	add.w	r3, r7, #8
 80255fc:	4619      	mov	r1, r3
 80255fe:	6878      	ldr	r0, [r7, #4]
 8025600:	f001 fa27 	bl	8026a52 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8025604:	bf00      	nop
 8025606:	3718      	adds	r7, #24
 8025608:	46bd      	mov	sp, r7
 802560a:	bd80      	pop	{r7, pc}

0802560c <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 802560c:	b580      	push	{r7, lr}
 802560e:	b082      	sub	sp, #8
 8025610:	af00      	add	r7, sp, #0
 8025612:	6078      	str	r0, [r7, #4]
 8025614:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8025616:	461a      	mov	r2, r3
 8025618:	6839      	ldr	r1, [r7, #0]
 802561a:	6878      	ldr	r0, [r7, #4]
 802561c:	f001 fa4c 	bl	8026ab8 <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8025620:	bf00      	nop
 8025622:	3708      	adds	r7, #8
 8025624:	46bd      	mov	sp, r7
 8025626:	bd80      	pop	{r7, pc}

08025628 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8025628:	b580      	push	{r7, lr}
 802562a:	b082      	sub	sp, #8
 802562c:	af00      	add	r7, sp, #0
 802562e:	6078      	str	r0, [r7, #4]
 8025630:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8025632:	6839      	ldr	r1, [r7, #0]
 8025634:	6878      	ldr	r0, [r7, #4]
 8025636:	f001 fa4c 	bl	8026ad2 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
	}
 802563a:	bf00      	nop
 802563c:	3708      	adds	r7, #8
 802563e:	46bd      	mov	sp, r7
 8025640:	bd80      	pop	{r7, pc}

08025642 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8025642:	b580      	push	{r7, lr}
 8025644:	b086      	sub	sp, #24
 8025646:	af00      	add	r7, sp, #0
 8025648:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 802564a:	f107 0308 	add.w	r3, r7, #8
 802564e:	6879      	ldr	r1, [r7, #4]
 8025650:	4618      	mov	r0, r3
 8025652:	f7fe ff03 	bl	802445c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8025656:	f107 0308 	add.w	r3, r7, #8
 802565a:	4619      	mov	r1, r3
 802565c:	6878      	ldr	r0, [r7, #4]
 802565e:	f7ff fdff 	bl	8025260 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
 8025662:	bf00      	nop
 8025664:	3718      	adds	r7, #24
 8025666:	46bd      	mov	sp, r7
 8025668:	bd80      	pop	{r7, pc}

0802566a <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 802566a:	b580      	push	{r7, lr}
 802566c:	b082      	sub	sp, #8
 802566e:	af00      	add	r7, sp, #0
 8025670:	6078      	str	r0, [r7, #4]
 8025672:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8025674:	461a      	mov	r2, r3
 8025676:	6839      	ldr	r1, [r7, #0]
 8025678:	6878      	ldr	r0, [r7, #4]
 802567a:	f001 fa5d 	bl	8026b38 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>
    }
 802567e:	bf00      	nop
 8025680:	3708      	adds	r7, #8
 8025682:	46bd      	mov	sp, r7
 8025684:	bd80      	pop	{r7, pc}

08025686 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025686:	b480      	push	{r7}
 8025688:	b083      	sub	sp, #12
 802568a:	af00      	add	r7, sp, #0
 802568c:	6078      	str	r0, [r7, #4]
 802568e:	687b      	ldr	r3, [r7, #4]
 8025690:	4618      	mov	r0, r3
 8025692:	370c      	adds	r7, #12
 8025694:	46bd      	mov	sp, r7
 8025696:	f85d 7b04 	ldr.w	r7, [sp], #4
 802569a:	4770      	bx	lr

0802569c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 802569c:	b480      	push	{r7}
 802569e:	b083      	sub	sp, #12
 80256a0:	af00      	add	r7, sp, #0
 80256a2:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80256a4:	687b      	ldr	r3, [r7, #4]
 80256a6:	2200      	movs	r2, #0
 80256a8:	601a      	str	r2, [r3, #0]
 80256aa:	687b      	ldr	r3, [r7, #4]
 80256ac:	2200      	movs	r2, #0
 80256ae:	605a      	str	r2, [r3, #4]
 80256b0:	687b      	ldr	r3, [r7, #4]
 80256b2:	2200      	movs	r2, #0
 80256b4:	609a      	str	r2, [r3, #8]
 80256b6:	687b      	ldr	r3, [r7, #4]
 80256b8:	2200      	movs	r2, #0
 80256ba:	60da      	str	r2, [r3, #12]
 80256bc:	687b      	ldr	r3, [r7, #4]
 80256be:	4618      	mov	r0, r3
 80256c0:	370c      	adds	r7, #12
 80256c2:	46bd      	mov	sp, r7
 80256c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256c8:	4770      	bx	lr

080256ca <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80256ca:	b580      	push	{r7, lr}
 80256cc:	b082      	sub	sp, #8
 80256ce:	af00      	add	r7, sp, #0
 80256d0:	6078      	str	r0, [r7, #4]
 80256d2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80256d4:	2200      	movs	r2, #0
 80256d6:	6839      	ldr	r1, [r7, #0]
 80256d8:	6878      	ldr	r0, [r7, #4]
 80256da:	f001 fa3a 	bl	8026b52 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>
 80256de:	4603      	mov	r3, r0
 80256e0:	4618      	mov	r0, r3
 80256e2:	3708      	adds	r7, #8
 80256e4:	46bd      	mov	sp, r7
 80256e6:	bd80      	pop	{r7, pc}

080256e8 <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80256e8:	b580      	push	{r7, lr}
 80256ea:	b084      	sub	sp, #16
 80256ec:	af00      	add	r7, sp, #0
 80256ee:	60f8      	str	r0, [r7, #12]
 80256f0:	60b9      	str	r1, [r7, #8]
 80256f2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80256f4:	687a      	ldr	r2, [r7, #4]
 80256f6:	68b9      	ldr	r1, [r7, #8]
 80256f8:	68f8      	ldr	r0, [r7, #12]
 80256fa:	f001 fa48 	bl	8026b8e <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>
 80256fe:	bf00      	nop
 8025700:	3710      	adds	r7, #16
 8025702:	46bd      	mov	sp, r7
 8025704:	bd80      	pop	{r7, pc}

08025706 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8025706:	b480      	push	{r7}
 8025708:	b083      	sub	sp, #12
 802570a:	af00      	add	r7, sp, #0
 802570c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802570e:	687b      	ldr	r3, [r7, #4]
 8025710:	4618      	mov	r0, r3
 8025712:	370c      	adds	r7, #12
 8025714:	46bd      	mov	sp, r7
 8025716:	f85d 7b04 	ldr.w	r7, [sp], #4
 802571a:	4770      	bx	lr

0802571c <_ZNSaIP7RequestEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 802571c:	b580      	push	{r7, lr}
 802571e:	b082      	sub	sp, #8
 8025720:	af00      	add	r7, sp, #0
 8025722:	6078      	str	r0, [r7, #4]
 8025724:	6039      	str	r1, [r7, #0]
 8025726:	6878      	ldr	r0, [r7, #4]
 8025728:	f001 fa44 	bl	8026bb4 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>
 802572c:	687b      	ldr	r3, [r7, #4]
 802572e:	4618      	mov	r0, r3
 8025730:	3708      	adds	r7, #8
 8025732:	46bd      	mov	sp, r7
 8025734:	bd80      	pop	{r7, pc}

08025736 <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025736:	b480      	push	{r7}
 8025738:	b083      	sub	sp, #12
 802573a:	af00      	add	r7, sp, #0
 802573c:	6078      	str	r0, [r7, #4]
 802573e:	687b      	ldr	r3, [r7, #4]
 8025740:	4618      	mov	r0, r3
 8025742:	370c      	adds	r7, #12
 8025744:	46bd      	mov	sp, r7
 8025746:	f85d 7b04 	ldr.w	r7, [sp], #4
 802574a:	4770      	bx	lr

0802574c <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 802574c:	b580      	push	{r7, lr}
 802574e:	b084      	sub	sp, #16
 8025750:	af00      	add	r7, sp, #0
 8025752:	60f8      	str	r0, [r7, #12]
 8025754:	60b9      	str	r1, [r7, #8]
 8025756:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8025758:	687b      	ldr	r3, [r7, #4]
 802575a:	009b      	lsls	r3, r3, #2
 802575c:	4619      	mov	r1, r3
 802575e:	68b8      	ldr	r0, [r7, #8]
 8025760:	f017 fe66 	bl	803d430 <_ZdlPvj>
      }
 8025764:	bf00      	nop
 8025766:	3710      	adds	r7, #16
 8025768:	46bd      	mov	sp, r7
 802576a:	bd80      	pop	{r7, pc}

0802576c <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 802576c:	b580      	push	{r7, lr}
 802576e:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025770:	2014      	movs	r0, #20
 8025772:	f7fb fb86 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8025776:	4603      	mov	r3, r0
 8025778:	4618      	mov	r0, r3
 802577a:	bd80      	pop	{r7, pc}

0802577c <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 802577c:	b580      	push	{r7, lr}
 802577e:	b084      	sub	sp, #16
 8025780:	af00      	add	r7, sp, #0
 8025782:	60f8      	str	r0, [r7, #12]
 8025784:	60b9      	str	r1, [r7, #8]
 8025786:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8025788:	68b9      	ldr	r1, [r7, #8]
 802578a:	68f8      	ldr	r0, [r7, #12]
 802578c:	f001 fa1d 	bl	8026bca <_ZSt8_DestroyIP7RequestEvT_S2_>
    }
 8025790:	bf00      	nop
 8025792:	3710      	adds	r7, #16
 8025794:	46bd      	mov	sp, r7
 8025796:	bd80      	pop	{r7, pc}

08025798 <_ZNSaI8ResponceEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8025798:	b580      	push	{r7, lr}
 802579a:	b082      	sub	sp, #8
 802579c:	af00      	add	r7, sp, #0
 802579e:	6078      	str	r0, [r7, #4]
 80257a0:	6878      	ldr	r0, [r7, #4]
 80257a2:	f001 fa1f 	bl	8026be4 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>
 80257a6:	687b      	ldr	r3, [r7, #4]
 80257a8:	4618      	mov	r0, r3
 80257aa:	3708      	adds	r7, #8
 80257ac:	46bd      	mov	sp, r7
 80257ae:	bd80      	pop	{r7, pc}

080257b0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80257b0:	b580      	push	{r7, lr}
 80257b2:	b082      	sub	sp, #8
 80257b4:	af00      	add	r7, sp, #0
 80257b6:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80257b8:	687b      	ldr	r3, [r7, #4]
 80257ba:	2200      	movs	r2, #0
 80257bc:	601a      	str	r2, [r3, #0]
 80257be:	687b      	ldr	r3, [r7, #4]
 80257c0:	2200      	movs	r2, #0
 80257c2:	605a      	str	r2, [r3, #4]
 80257c4:	687b      	ldr	r3, [r7, #4]
 80257c6:	3308      	adds	r3, #8
 80257c8:	4618      	mov	r0, r3
 80257ca:	f001 fa16 	bl	8026bfa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
 80257ce:	687b      	ldr	r3, [r7, #4]
 80257d0:	3318      	adds	r3, #24
 80257d2:	4618      	mov	r0, r3
 80257d4:	f001 fa11 	bl	8026bfa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
	{ }
 80257d8:	687b      	ldr	r3, [r7, #4]
 80257da:	4618      	mov	r0, r3
 80257dc:	3708      	adds	r7, #8
 80257de:	46bd      	mov	sp, r7
 80257e0:	bd80      	pop	{r7, pc}

080257e2 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80257e2:	b480      	push	{r7}
 80257e4:	b083      	sub	sp, #12
 80257e6:	af00      	add	r7, sp, #0
 80257e8:	6078      	str	r0, [r7, #4]
 80257ea:	687b      	ldr	r3, [r7, #4]
 80257ec:	4618      	mov	r0, r3
 80257ee:	370c      	adds	r7, #12
 80257f0:	46bd      	mov	sp, r7
 80257f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257f6:	4770      	bx	lr

080257f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80257f8:	b590      	push	{r4, r7, lr}
 80257fa:	b085      	sub	sp, #20
 80257fc:	af00      	add	r7, sp, #0
 80257fe:	6078      	str	r0, [r7, #4]
 8025800:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025802:	f107 030c 	add.w	r3, r7, #12
 8025806:	6879      	ldr	r1, [r7, #4]
 8025808:	4618      	mov	r0, r3
 802580a:	f000 f858 	bl	80258be <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 802580e:	f107 030c 	add.w	r3, r7, #12
 8025812:	6839      	ldr	r1, [r7, #0]
 8025814:	4618      	mov	r0, r3
 8025816:	f001 fa07 	bl	8026c28 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>
 802581a:	4604      	mov	r4, r0
 802581c:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802581e:	f107 030c 	add.w	r3, r7, #12
 8025822:	4618      	mov	r0, r3
 8025824:	f000 f85c 	bl	80258e0 <_ZNSaIP8ResponceED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8025828:	4623      	mov	r3, r4
      }
 802582a:	4618      	mov	r0, r3
 802582c:	3714      	adds	r7, #20
 802582e:	46bd      	mov	sp, r7
 8025830:	bd90      	pop	{r4, r7, pc}

08025832 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8025832:	b580      	push	{r7, lr}
 8025834:	b086      	sub	sp, #24
 8025836:	af00      	add	r7, sp, #0
 8025838:	60f8      	str	r0, [r7, #12]
 802583a:	60b9      	str	r1, [r7, #8]
 802583c:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 802583e:	68bb      	ldr	r3, [r7, #8]
 8025840:	617b      	str	r3, [r7, #20]
 8025842:	697a      	ldr	r2, [r7, #20]
 8025844:	687b      	ldr	r3, [r7, #4]
 8025846:	429a      	cmp	r2, r3
 8025848:	d209      	bcs.n	802585e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 802584a:	68f8      	ldr	r0, [r7, #12]
 802584c:	f000 f9cc 	bl	8025be8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 8025850:	4602      	mov	r2, r0
 8025852:	697b      	ldr	r3, [r7, #20]
 8025854:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025856:	697b      	ldr	r3, [r7, #20]
 8025858:	3304      	adds	r3, #4
 802585a:	617b      	str	r3, [r7, #20]
 802585c:	e7f1      	b.n	8025842 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 802585e:	bf00      	nop
 8025860:	3718      	adds	r7, #24
 8025862:	46bd      	mov	sp, r7
 8025864:	bd80      	pop	{r7, pc}

08025866 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8025866:	b590      	push	{r4, r7, lr}
 8025868:	b083      	sub	sp, #12
 802586a:	af00      	add	r7, sp, #0
 802586c:	6078      	str	r0, [r7, #4]
 802586e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8025870:	687b      	ldr	r3, [r7, #4]
 8025872:	683a      	ldr	r2, [r7, #0]
 8025874:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8025876:	683b      	ldr	r3, [r7, #0]
 8025878:	681a      	ldr	r2, [r3, #0]
 802587a:	687b      	ldr	r3, [r7, #4]
 802587c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 802587e:	687b      	ldr	r3, [r7, #4]
 8025880:	685c      	ldr	r4, [r3, #4]
 8025882:	f000 facf 	bl	8025e24 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8025886:	4603      	mov	r3, r0
 8025888:	011b      	lsls	r3, r3, #4
 802588a:	18e2      	adds	r2, r4, r3
 802588c:	687b      	ldr	r3, [r7, #4]
 802588e:	609a      	str	r2, [r3, #8]
      }
 8025890:	bf00      	nop
 8025892:	370c      	adds	r7, #12
 8025894:	46bd      	mov	sp, r7
 8025896:	bd90      	pop	{r4, r7, pc}

08025898 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8025898:	b590      	push	{r4, r7, lr}
 802589a:	b083      	sub	sp, #12
 802589c:	af00      	add	r7, sp, #0
 802589e:	6078      	str	r0, [r7, #4]
 80258a0:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80258a2:	687c      	ldr	r4, [r7, #4]
 80258a4:	2010      	movs	r0, #16
 80258a6:	f7fb faec 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 80258aa:	4603      	mov	r3, r0
 80258ac:	461a      	mov	r2, r3
 80258ae:	6839      	ldr	r1, [r7, #0]
 80258b0:	4620      	mov	r0, r4
 80258b2:	f001 f9c8 	bl	8026c46 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>
      }
 80258b6:	bf00      	nop
 80258b8:	370c      	adds	r7, #12
 80258ba:	46bd      	mov	sp, r7
 80258bc:	bd90      	pop	{r4, r7, pc}

080258be <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80258be:	b580      	push	{r7, lr}
 80258c0:	b082      	sub	sp, #8
 80258c2:	af00      	add	r7, sp, #0
 80258c4:	6078      	str	r0, [r7, #4]
 80258c6:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80258c8:	6838      	ldr	r0, [r7, #0]
 80258ca:	f001 f9cb 	bl	8026c64 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80258ce:	4603      	mov	r3, r0
 80258d0:	4619      	mov	r1, r3
 80258d2:	6878      	ldr	r0, [r7, #4]
 80258d4:	f001 f9d1 	bl	8026c7a <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>
 80258d8:	6878      	ldr	r0, [r7, #4]
 80258da:	3708      	adds	r7, #8
 80258dc:	46bd      	mov	sp, r7
 80258de:	bd80      	pop	{r7, pc}

080258e0 <_ZNSaIP8ResponceED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80258e0:	b580      	push	{r7, lr}
 80258e2:	b082      	sub	sp, #8
 80258e4:	af00      	add	r7, sp, #0
 80258e6:	6078      	str	r0, [r7, #4]
 80258e8:	6878      	ldr	r0, [r7, #4]
 80258ea:	f001 f9d3 	bl	8026c94 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>
 80258ee:	687b      	ldr	r3, [r7, #4]
 80258f0:	4618      	mov	r0, r3
 80258f2:	3708      	adds	r7, #8
 80258f4:	46bd      	mov	sp, r7
 80258f6:	bd80      	pop	{r7, pc}

080258f8 <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80258f8:	b580      	push	{r7, lr}
 80258fa:	b084      	sub	sp, #16
 80258fc:	af00      	add	r7, sp, #0
 80258fe:	60f8      	str	r0, [r7, #12]
 8025900:	60b9      	str	r1, [r7, #8]
 8025902:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025904:	687a      	ldr	r2, [r7, #4]
 8025906:	68b9      	ldr	r1, [r7, #8]
 8025908:	68f8      	ldr	r0, [r7, #12]
 802590a:	f001 f9ce 	bl	8026caa <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>
 802590e:	bf00      	nop
 8025910:	3710      	adds	r7, #16
 8025912:	46bd      	mov	sp, r7
 8025914:	bd80      	pop	{r7, pc}

08025916 <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8025916:	b580      	push	{r7, lr}
 8025918:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 802591a:	2010      	movs	r0, #16
 802591c:	f7fb fab1 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8025920:	4603      	mov	r3, r0
 8025922:	4618      	mov	r0, r3
 8025924:	bd80      	pop	{r7, pc}

08025926 <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8025926:	b580      	push	{r7, lr}
 8025928:	b084      	sub	sp, #16
 802592a:	af00      	add	r7, sp, #0
 802592c:	60f8      	str	r0, [r7, #12]
 802592e:	60b9      	str	r1, [r7, #8]
 8025930:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8025932:	68b9      	ldr	r1, [r7, #8]
 8025934:	68f8      	ldr	r0, [r7, #12]
 8025936:	f001 f9c8 	bl	8026cca <_ZSt8_DestroyIP8ResponceEvT_S2_>
    }
 802593a:	bf00      	nop
 802593c:	3710      	adds	r7, #16
 802593e:	46bd      	mov	sp, r7
 8025940:	bd80      	pop	{r7, pc}

08025942 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 8025942:	b580      	push	{r7, lr}
 8025944:	b084      	sub	sp, #16
 8025946:	af00      	add	r7, sp, #0
 8025948:	60f8      	str	r0, [r7, #12]
 802594a:	60b9      	str	r1, [r7, #8]
 802594c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 802594e:	6879      	ldr	r1, [r7, #4]
 8025950:	68b8      	ldr	r0, [r7, #8]
 8025952:	f017 fd6d 	bl	803d430 <_ZdlPvj>
      }
 8025956:	bf00      	nop
 8025958:	3710      	adds	r7, #16
 802595a:	46bd      	mov	sp, r7
 802595c:	bd80      	pop	{r7, pc}

0802595e <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 802595e:	b480      	push	{r7}
 8025960:	b083      	sub	sp, #12
 8025962:	af00      	add	r7, sp, #0
 8025964:	6078      	str	r0, [r7, #4]
 8025966:	6039      	str	r1, [r7, #0]
 8025968:	bf00      	nop
 802596a:	370c      	adds	r7, #12
 802596c:	46bd      	mov	sp, r7
 802596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025972:	4770      	bx	lr

08025974 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8025974:	b580      	push	{r7, lr}
 8025976:	b084      	sub	sp, #16
 8025978:	af00      	add	r7, sp, #0
 802597a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 802597c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025980:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8025982:	6878      	ldr	r0, [r7, #4]
 8025984:	f001 f9ae 	bl	8026ce4 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>
 8025988:	4603      	mov	r3, r0
 802598a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 802598c:	f107 0208 	add.w	r2, r7, #8
 8025990:	f107 030c 	add.w	r3, r7, #12
 8025994:	4611      	mov	r1, r2
 8025996:	4618      	mov	r0, r3
 8025998:	f001 f9b0 	bl	8026cfc <_ZSt3minIjERKT_S2_S2_>
 802599c:	4603      	mov	r3, r0
 802599e:	681b      	ldr	r3, [r3, #0]
      }
 80259a0:	4618      	mov	r0, r3
 80259a2:	3710      	adds	r7, #16
 80259a4:	46bd      	mov	sp, r7
 80259a6:	bd80      	pop	{r7, pc}

080259a8 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80259a8:	b590      	push	{r4, r7, lr}
 80259aa:	b08b      	sub	sp, #44	; 0x2c
 80259ac:	af00      	add	r7, sp, #0
 80259ae:	60f8      	str	r0, [r7, #12]
 80259b0:	60b9      	str	r1, [r7, #8]
 80259b2:	4613      	mov	r3, r2
 80259b4:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80259b6:	68fb      	ldr	r3, [r7, #12]
 80259b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80259ba:	68fb      	ldr	r3, [r7, #12]
 80259bc:	695b      	ldr	r3, [r3, #20]
 80259be:	1ad3      	subs	r3, r2, r3
 80259c0:	109b      	asrs	r3, r3, #2
 80259c2:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80259c4:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80259c6:	68bb      	ldr	r3, [r7, #8]
 80259c8:	6a3a      	ldr	r2, [r7, #32]
 80259ca:	4413      	add	r3, r2
 80259cc:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80259ce:	68fb      	ldr	r3, [r7, #12]
 80259d0:	685a      	ldr	r2, [r3, #4]
 80259d2:	69fb      	ldr	r3, [r7, #28]
 80259d4:	005b      	lsls	r3, r3, #1
 80259d6:	429a      	cmp	r2, r3
 80259d8:	d92d      	bls.n	8025a36 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80259da:	68fb      	ldr	r3, [r7, #12]
 80259dc:	681a      	ldr	r2, [r3, #0]
 80259de:	68fb      	ldr	r3, [r7, #12]
 80259e0:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80259e2:	69fb      	ldr	r3, [r7, #28]
 80259e4:	1acb      	subs	r3, r1, r3
 80259e6:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80259e8:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80259ea:	79fb      	ldrb	r3, [r7, #7]
 80259ec:	2b00      	cmp	r3, #0
 80259ee:	d002      	beq.n	80259f6 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 80259f0:	68bb      	ldr	r3, [r7, #8]
 80259f2:	009b      	lsls	r3, r3, #2
 80259f4:	e000      	b.n	80259f8 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x50>
 80259f6:	2300      	movs	r3, #0
 80259f8:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80259fa:	4413      	add	r3, r2
 80259fc:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80259fe:	68fb      	ldr	r3, [r7, #12]
 8025a00:	695b      	ldr	r3, [r3, #20]
 8025a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025a04:	429a      	cmp	r2, r3
 8025a06:	d209      	bcs.n	8025a1c <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8025a08:	68fb      	ldr	r3, [r7, #12]
 8025a0a:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8025a0c:	68fb      	ldr	r3, [r7, #12]
 8025a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8025a10:	3304      	adds	r3, #4
 8025a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025a14:	4619      	mov	r1, r3
 8025a16:	f001 f985 	bl	8026d24 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
 8025a1a:	e048      	b.n	8025aae <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8025a1c:	68fb      	ldr	r3, [r7, #12]
 8025a1e:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8025a20:	68fb      	ldr	r3, [r7, #12]
 8025a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8025a24:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8025a26:	6a3b      	ldr	r3, [r7, #32]
 8025a28:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8025a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025a2c:	4413      	add	r3, r2
 8025a2e:	461a      	mov	r2, r3
 8025a30:	f001 f990 	bl	8026d54 <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>
 8025a34:	e03b      	b.n	8025aae <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8025a36:	68fb      	ldr	r3, [r7, #12]
 8025a38:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8025a3a:	68fb      	ldr	r3, [r7, #12]
 8025a3c:	3304      	adds	r3, #4
 8025a3e:	f107 0208 	add.w	r2, r7, #8
 8025a42:	4611      	mov	r1, r2
 8025a44:	4618      	mov	r0, r3
 8025a46:	f7fe fe04 	bl	8024652 <_ZSt3maxIjERKT_S2_S2_>
 8025a4a:	4603      	mov	r3, r0
 8025a4c:	681b      	ldr	r3, [r3, #0]
 8025a4e:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8025a50:	3302      	adds	r3, #2
 8025a52:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8025a54:	68fb      	ldr	r3, [r7, #12]
 8025a56:	69b9      	ldr	r1, [r7, #24]
 8025a58:	4618      	mov	r0, r3
 8025a5a:	f7fe fe0e 	bl	802467a <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8025a5e:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8025a60:	69ba      	ldr	r2, [r7, #24]
 8025a62:	69fb      	ldr	r3, [r7, #28]
 8025a64:	1ad3      	subs	r3, r2, r3
 8025a66:	085b      	lsrs	r3, r3, #1
 8025a68:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8025a6a:	79fb      	ldrb	r3, [r7, #7]
 8025a6c:	2b00      	cmp	r3, #0
 8025a6e:	d002      	beq.n	8025a76 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8025a70:	68bb      	ldr	r3, [r7, #8]
 8025a72:	009b      	lsls	r3, r3, #2
 8025a74:	e000      	b.n	8025a78 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8025a76:	2300      	movs	r3, #0
 8025a78:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8025a7a:	697a      	ldr	r2, [r7, #20]
 8025a7c:	4413      	add	r3, r2
 8025a7e:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8025a80:	68fb      	ldr	r3, [r7, #12]
 8025a82:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8025a84:	68fb      	ldr	r3, [r7, #12]
 8025a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8025a88:	3304      	adds	r3, #4
 8025a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025a8c:	4619      	mov	r1, r3
 8025a8e:	f001 f949 	bl	8026d24 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8025a92:	68f8      	ldr	r0, [r7, #12]
 8025a94:	68fb      	ldr	r3, [r7, #12]
 8025a96:	6819      	ldr	r1, [r3, #0]
 8025a98:	68fb      	ldr	r3, [r7, #12]
 8025a9a:	685b      	ldr	r3, [r3, #4]
 8025a9c:	461a      	mov	r2, r3
 8025a9e:	f7fd fd4e 	bl	802353e <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 8025aa2:	68fb      	ldr	r3, [r7, #12]
 8025aa4:	697a      	ldr	r2, [r7, #20]
 8025aa6:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8025aa8:	68fb      	ldr	r3, [r7, #12]
 8025aaa:	69ba      	ldr	r2, [r7, #24]
 8025aac:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8025aae:	68fb      	ldr	r3, [r7, #12]
 8025ab0:	3308      	adds	r3, #8
 8025ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025ab4:	4618      	mov	r0, r3
 8025ab6:	f7fe fe17 	bl	80246e8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8025aba:	68fb      	ldr	r3, [r7, #12]
 8025abc:	f103 0018 	add.w	r0, r3, #24
 8025ac0:	6a3a      	ldr	r2, [r7, #32]
 8025ac2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8025ac6:	4413      	add	r3, r2
 8025ac8:	009b      	lsls	r3, r3, #2
 8025aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025acc:	4413      	add	r3, r2
 8025ace:	4619      	mov	r1, r3
 8025ad0:	f7fe fe0a 	bl	80246e8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8025ad4:	bf00      	nop
 8025ad6:	372c      	adds	r7, #44	; 0x2c
 8025ad8:	46bd      	mov	sp, r7
 8025ada:	bd90      	pop	{r4, r7, pc}

08025adc <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8025adc:	b580      	push	{r7, lr}
 8025ade:	b082      	sub	sp, #8
 8025ae0:	af00      	add	r7, sp, #0
 8025ae2:	6078      	str	r0, [r7, #4]
 8025ae4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8025ae6:	2200      	movs	r2, #0
 8025ae8:	6839      	ldr	r1, [r7, #0]
 8025aea:	6878      	ldr	r0, [r7, #4]
 8025aec:	f001 f94a 	bl	8026d84 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>
 8025af0:	4603      	mov	r3, r0
 8025af2:	4618      	mov	r0, r3
 8025af4:	3708      	adds	r7, #8
 8025af6:	46bd      	mov	sp, r7
 8025af8:	bd80      	pop	{r7, pc}

08025afa <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8025afa:	b580      	push	{r7, lr}
 8025afc:	b082      	sub	sp, #8
 8025afe:	af00      	add	r7, sp, #0
 8025b00:	6078      	str	r0, [r7, #4]
 8025b02:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8025b04:	687b      	ldr	r3, [r7, #4]
 8025b06:	6839      	ldr	r1, [r7, #0]
 8025b08:	4618      	mov	r0, r3
 8025b0a:	f001 f95c 	bl	8026dc6 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8025b0e:	687b      	ldr	r3, [r7, #4]
 8025b10:	4618      	mov	r0, r3
 8025b12:	3708      	adds	r7, #8
 8025b14:	46bd      	mov	sp, r7
 8025b16:	bd80      	pop	{r7, pc}

08025b18 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8025b18:	b480      	push	{r7}
 8025b1a:	b083      	sub	sp, #12
 8025b1c:	af00      	add	r7, sp, #0
 8025b1e:	6078      	str	r0, [r7, #4]
 8025b20:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8025b22:	683b      	ldr	r3, [r7, #0]
 8025b24:	681a      	ldr	r2, [r3, #0]
 8025b26:	687b      	ldr	r3, [r7, #4]
 8025b28:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8025b2a:	683b      	ldr	r3, [r7, #0]
 8025b2c:	685a      	ldr	r2, [r3, #4]
 8025b2e:	687b      	ldr	r3, [r7, #4]
 8025b30:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8025b32:	683b      	ldr	r3, [r7, #0]
 8025b34:	689a      	ldr	r2, [r3, #8]
 8025b36:	687b      	ldr	r3, [r7, #4]
 8025b38:	609a      	str	r2, [r3, #8]
	}
 8025b3a:	bf00      	nop
 8025b3c:	370c      	adds	r7, #12
 8025b3e:	46bd      	mov	sp, r7
 8025b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b44:	4770      	bx	lr

08025b46 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8025b46:	b580      	push	{r7, lr}
 8025b48:	b084      	sub	sp, #16
 8025b4a:	af00      	add	r7, sp, #0
 8025b4c:	60f8      	str	r0, [r7, #12]
 8025b4e:	60b9      	str	r1, [r7, #8]
 8025b50:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8025b52:	68b8      	ldr	r0, [r7, #8]
 8025b54:	f001 f949 	bl	8026dea <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8025b58:	bf00      	nop
 8025b5a:	3710      	adds	r7, #16
 8025b5c:	46bd      	mov	sp, r7
 8025b5e:	bd80      	pop	{r7, pc}

08025b60 <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8025b60:	b590      	push	{r4, r7, lr}
 8025b62:	b085      	sub	sp, #20
 8025b64:	af00      	add	r7, sp, #0
 8025b66:	60f8      	str	r0, [r7, #12]
 8025b68:	60b9      	str	r1, [r7, #8]
 8025b6a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8025b6c:	6878      	ldr	r0, [r7, #4]
 8025b6e:	f7fd ff0c 	bl	802398a <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8025b72:	4604      	mov	r4, r0
 8025b74:	68bb      	ldr	r3, [r7, #8]
 8025b76:	4619      	mov	r1, r3
 8025b78:	2010      	movs	r0, #16
 8025b7a:	f7fb f976 	bl	8020e6a <_ZnwjPv>
 8025b7e:	4603      	mov	r3, r0
 8025b80:	4621      	mov	r1, r4
 8025b82:	4618      	mov	r0, r3
 8025b84:	f7fb fb4b 	bl	802121e <_ZN8ResponceC1EOS_>
 8025b88:	bf00      	nop
 8025b8a:	3714      	adds	r7, #20
 8025b8c:	46bd      	mov	sp, r7
 8025b8e:	bd90      	pop	{r4, r7, pc}

08025b90 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8025b90:	b580      	push	{r7, lr}
 8025b92:	b082      	sub	sp, #8
 8025b94:	af00      	add	r7, sp, #0
 8025b96:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8025b98:	687b      	ldr	r3, [r7, #4]
 8025b9a:	4618      	mov	r0, r3
 8025b9c:	f001 f862 	bl	8026c64 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025ba0:	4603      	mov	r3, r0
 8025ba2:	4618      	mov	r0, r3
 8025ba4:	f001 f92c 	bl	8026e00 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>
 8025ba8:	4603      	mov	r3, r0
 8025baa:	4618      	mov	r0, r3
 8025bac:	3708      	adds	r7, #8
 8025bae:	46bd      	mov	sp, r7
 8025bb0:	bd80      	pop	{r7, pc}

08025bb2 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8025bb2:	b580      	push	{r7, lr}
 8025bb4:	b082      	sub	sp, #8
 8025bb6:	af00      	add	r7, sp, #0
 8025bb8:	6078      	str	r0, [r7, #4]
 8025bba:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8025bbc:	683b      	ldr	r3, [r7, #0]
 8025bbe:	1c5a      	adds	r2, r3, #1
 8025bc0:	687b      	ldr	r3, [r7, #4]
 8025bc2:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8025bc4:	6879      	ldr	r1, [r7, #4]
 8025bc6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8025bc8:	6879      	ldr	r1, [r7, #4]
 8025bca:	6809      	ldr	r1, [r1, #0]
 8025bcc:	1a41      	subs	r1, r0, r1
 8025bce:	1089      	asrs	r1, r1, #2
 8025bd0:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8025bd2:	429a      	cmp	r2, r3
 8025bd4:	d904      	bls.n	8025be0 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8025bd6:	2200      	movs	r2, #0
 8025bd8:	6839      	ldr	r1, [r7, #0]
 8025bda:	6878      	ldr	r0, [r7, #4]
 8025bdc:	f001 f92a 	bl	8026e34 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>
      }
 8025be0:	bf00      	nop
 8025be2:	3708      	adds	r7, #8
 8025be4:	46bd      	mov	sp, r7
 8025be6:	bd80      	pop	{r7, pc}

08025be8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8025be8:	b590      	push	{r4, r7, lr}
 8025bea:	b083      	sub	sp, #12
 8025bec:	af00      	add	r7, sp, #0
 8025bee:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8025bf0:	687c      	ldr	r4, [r7, #4]
 8025bf2:	2010      	movs	r0, #16
 8025bf4:	f7fb f945 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8025bf8:	4603      	mov	r3, r0
 8025bfa:	4619      	mov	r1, r3
 8025bfc:	4620      	mov	r0, r4
 8025bfe:	f001 f9b3 	bl	8026f68 <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>
 8025c02:	4603      	mov	r3, r0
      }
 8025c04:	4618      	mov	r0, r3
 8025c06:	370c      	adds	r7, #12
 8025c08:	46bd      	mov	sp, r7
 8025c0a:	bd90      	pop	{r4, r7, pc}

08025c0c <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8025c0c:	b580      	push	{r7, lr}
 8025c0e:	b082      	sub	sp, #8
 8025c10:	af00      	add	r7, sp, #0
 8025c12:	6078      	str	r0, [r7, #4]
 8025c14:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8025c16:	6838      	ldr	r0, [r7, #0]
 8025c18:	f7fb fa66 	bl	80210e8 <_ZN8ResponceD1Ev>
 8025c1c:	bf00      	nop
 8025c1e:	3708      	adds	r7, #8
 8025c20:	46bd      	mov	sp, r7
 8025c22:	bd80      	pop	{r7, pc}

08025c24 <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8025c24:	b580      	push	{r7, lr}
 8025c26:	b084      	sub	sp, #16
 8025c28:	af00      	add	r7, sp, #0
 8025c2a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8025c2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8025c30:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8025c32:	6878      	ldr	r0, [r7, #4]
 8025c34:	f001 f9a7 	bl	8026f86 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8025c38:	4603      	mov	r3, r0
 8025c3a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8025c3c:	f107 0208 	add.w	r2, r7, #8
 8025c40:	f107 030c 	add.w	r3, r7, #12
 8025c44:	4611      	mov	r1, r2
 8025c46:	4618      	mov	r0, r3
 8025c48:	f001 f858 	bl	8026cfc <_ZSt3minIjERKT_S2_S2_>
 8025c4c:	4603      	mov	r3, r0
 8025c4e:	681b      	ldr	r3, [r3, #0]
      }
 8025c50:	4618      	mov	r0, r3
 8025c52:	3710      	adds	r7, #16
 8025c54:	46bd      	mov	sp, r7
 8025c56:	bd80      	pop	{r7, pc}

08025c58 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8025c58:	b580      	push	{r7, lr}
 8025c5a:	b084      	sub	sp, #16
 8025c5c:	af00      	add	r7, sp, #0
 8025c5e:	6078      	str	r0, [r7, #4]
 8025c60:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8025c62:	2301      	movs	r3, #1
 8025c64:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8025c66:	6839      	ldr	r1, [r7, #0]
 8025c68:	6878      	ldr	r0, [r7, #4]
 8025c6a:	f001 f998 	bl	8026f9e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 8025c6e:	4603      	mov	r3, r0
    }
 8025c70:	4618      	mov	r0, r3
 8025c72:	3710      	adds	r7, #16
 8025c74:	46bd      	mov	sp, r7
 8025c76:	bd80      	pop	{r7, pc}

08025c78 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8025c78:	b580      	push	{r7, lr}
 8025c7a:	b082      	sub	sp, #8
 8025c7c:	af00      	add	r7, sp, #0
 8025c7e:	6078      	str	r0, [r7, #4]
 8025c80:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8025c82:	2200      	movs	r2, #0
 8025c84:	6839      	ldr	r1, [r7, #0]
 8025c86:	6878      	ldr	r0, [r7, #4]
 8025c88:	f001 f99c 	bl	8026fc4 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8025c8c:	4603      	mov	r3, r0
 8025c8e:	4618      	mov	r0, r3
 8025c90:	3708      	adds	r7, #8
 8025c92:	46bd      	mov	sp, r7
 8025c94:	bd80      	pop	{r7, pc}

08025c96 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8025c96:	b580      	push	{r7, lr}
 8025c98:	b084      	sub	sp, #16
 8025c9a:	af00      	add	r7, sp, #0
 8025c9c:	60f8      	str	r0, [r7, #12]
 8025c9e:	60b9      	str	r1, [r7, #8]
 8025ca0:	607a      	str	r2, [r7, #4]
 8025ca2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8025ca4:	683b      	ldr	r3, [r7, #0]
 8025ca6:	687a      	ldr	r2, [r7, #4]
 8025ca8:	68b9      	ldr	r1, [r7, #8]
 8025caa:	68f8      	ldr	r0, [r7, #12]
 8025cac:	f001 f9a6 	bl	8026ffc <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8025cb0:	4603      	mov	r3, r0
      }
 8025cb2:	4618      	mov	r0, r3
 8025cb4:	3710      	adds	r7, #16
 8025cb6:	46bd      	mov	sp, r7
 8025cb8:	bd80      	pop	{r7, pc}

08025cba <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8025cba:	b580      	push	{r7, lr}
 8025cbc:	b084      	sub	sp, #16
 8025cbe:	af00      	add	r7, sp, #0
 8025cc0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8025cc2:	f107 030c 	add.w	r3, r7, #12
 8025cc6:	6879      	ldr	r1, [r7, #4]
 8025cc8:	4618      	mov	r0, r3
 8025cca:	f001 f9b4 	bl	8027036 <_ZNSt13move_iteratorIPhEC1ES0_>
 8025cce:	68fb      	ldr	r3, [r7, #12]
 8025cd0:	4618      	mov	r0, r3
 8025cd2:	3710      	adds	r7, #16
 8025cd4:	46bd      	mov	sp, r7
 8025cd6:	bd80      	pop	{r7, pc}

08025cd8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8025cd8:	b580      	push	{r7, lr}
 8025cda:	b084      	sub	sp, #16
 8025cdc:	af00      	add	r7, sp, #0
 8025cde:	60f8      	str	r0, [r7, #12]
 8025ce0:	60b9      	str	r1, [r7, #8]
 8025ce2:	607a      	str	r2, [r7, #4]
 8025ce4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8025ce6:	687a      	ldr	r2, [r7, #4]
 8025ce8:	68b9      	ldr	r1, [r7, #8]
 8025cea:	68f8      	ldr	r0, [r7, #12]
 8025cec:	f001 f9b5 	bl	802705a <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8025cf0:	4603      	mov	r3, r0
 8025cf2:	4618      	mov	r0, r3
 8025cf4:	3710      	adds	r7, #16
 8025cf6:	46bd      	mov	sp, r7
 8025cf8:	bd80      	pop	{r7, pc}

08025cfa <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8025cfa:	b580      	push	{r7, lr}
 8025cfc:	b086      	sub	sp, #24
 8025cfe:	af00      	add	r7, sp, #0
 8025d00:	60f8      	str	r0, [r7, #12]
 8025d02:	60b9      	str	r1, [r7, #8]
 8025d04:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8025d06:	2301      	movs	r3, #1
 8025d08:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8025d0a:	687a      	ldr	r2, [r7, #4]
 8025d0c:	68b9      	ldr	r1, [r7, #8]
 8025d0e:	68f8      	ldr	r0, [r7, #12]
 8025d10:	f001 f9b5 	bl	802707e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 8025d14:	4603      	mov	r3, r0
    }
 8025d16:	4618      	mov	r0, r3
 8025d18:	3718      	adds	r7, #24
 8025d1a:	46bd      	mov	sp, r7
 8025d1c:	bd80      	pop	{r7, pc}

08025d1e <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8025d1e:	b580      	push	{r7, lr}
 8025d20:	b082      	sub	sp, #8
 8025d22:	af00      	add	r7, sp, #0
 8025d24:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8025d26:	1d3b      	adds	r3, r7, #4
 8025d28:	4618      	mov	r0, r3
 8025d2a:	f001 f9b8 	bl	802709e <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8025d2e:	4603      	mov	r3, r0
 8025d30:	681b      	ldr	r3, [r3, #0]
 8025d32:	4618      	mov	r0, r3
 8025d34:	3708      	adds	r7, #8
 8025d36:	46bd      	mov	sp, r7
 8025d38:	bd80      	pop	{r7, pc}

08025d3a <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8025d3a:	b580      	push	{r7, lr}
 8025d3c:	b082      	sub	sp, #8
 8025d3e:	af00      	add	r7, sp, #0
 8025d40:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8025d42:	1d3b      	adds	r3, r7, #4
 8025d44:	4618      	mov	r0, r3
 8025d46:	f001 f9b5 	bl	80270b4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8025d4a:	4603      	mov	r3, r0
 8025d4c:	681b      	ldr	r3, [r3, #0]
 8025d4e:	4618      	mov	r0, r3
 8025d50:	3708      	adds	r7, #8
 8025d52:	46bd      	mov	sp, r7
 8025d54:	bd80      	pop	{r7, pc}

08025d56 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8025d56:	b580      	push	{r7, lr}
 8025d58:	b084      	sub	sp, #16
 8025d5a:	af00      	add	r7, sp, #0
 8025d5c:	60f8      	str	r0, [r7, #12]
 8025d5e:	60b9      	str	r1, [r7, #8]
 8025d60:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8025d62:	687a      	ldr	r2, [r7, #4]
 8025d64:	68b9      	ldr	r1, [r7, #8]
 8025d66:	68f8      	ldr	r0, [r7, #12]
 8025d68:	f001 f9af 	bl	80270ca <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 8025d6c:	4603      	mov	r3, r0
 8025d6e:	4618      	mov	r0, r3
 8025d70:	3710      	adds	r7, #16
 8025d72:	46bd      	mov	sp, r7
 8025d74:	bd80      	pop	{r7, pc}

08025d76 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8025d76:	b580      	push	{r7, lr}
 8025d78:	b082      	sub	sp, #8
 8025d7a:	af00      	add	r7, sp, #0
 8025d7c:	6078      	str	r0, [r7, #4]
 8025d7e:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8025d80:	6878      	ldr	r0, [r7, #4]
 8025d82:	f7ff ffda 	bl	8025d3a <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8025d86:	4602      	mov	r2, r0
 8025d88:	683b      	ldr	r3, [r7, #0]
 8025d8a:	1a9a      	subs	r2, r3, r2
 8025d8c:	1d3b      	adds	r3, r7, #4
 8025d8e:	4611      	mov	r1, r2
 8025d90:	4618      	mov	r0, r3
 8025d92:	f001 f9aa 	bl	80270ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 8025d96:	4603      	mov	r3, r0
 8025d98:	4618      	mov	r0, r3
 8025d9a:	3708      	adds	r7, #8
 8025d9c:	46bd      	mov	sp, r7
 8025d9e:	bd80      	pop	{r7, pc}

08025da0 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
 8025da0:	b480      	push	{r7}
 8025da2:	b083      	sub	sp, #12
 8025da4:	af00      	add	r7, sp, #0
 8025da6:	6078      	str	r0, [r7, #4]
 8025da8:	6039      	str	r1, [r7, #0]
 8025daa:	bf00      	nop
 8025dac:	370c      	adds	r7, #12
 8025dae:	46bd      	mov	sp, r7
 8025db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025db4:	4770      	bx	lr

08025db6 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8025db6:	b480      	push	{r7}
 8025db8:	b083      	sub	sp, #12
 8025dba:	af00      	add	r7, sp, #0
 8025dbc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8025dbe:	687b      	ldr	r3, [r7, #4]
 8025dc0:	4618      	mov	r0, r3
 8025dc2:	370c      	adds	r7, #12
 8025dc4:	46bd      	mov	sp, r7
 8025dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dca:	4770      	bx	lr

08025dcc <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8025dcc:	b580      	push	{r7, lr}
 8025dce:	b084      	sub	sp, #16
 8025dd0:	af00      	add	r7, sp, #0
 8025dd2:	60f8      	str	r0, [r7, #12]
 8025dd4:	60b9      	str	r1, [r7, #8]
 8025dd6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8025dd8:	687a      	ldr	r2, [r7, #4]
 8025dda:	68b9      	ldr	r1, [r7, #8]
 8025ddc:	68f8      	ldr	r0, [r7, #12]
 8025dde:	f001 f99b 	bl	8027118 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8025de2:	4603      	mov	r3, r0
 8025de4:	4618      	mov	r0, r3
 8025de6:	3710      	adds	r7, #16
 8025de8:	46bd      	mov	sp, r7
 8025dea:	bd80      	pop	{r7, pc}

08025dec <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8025dec:	b480      	push	{r7}
 8025dee:	b083      	sub	sp, #12
 8025df0:	af00      	add	r7, sp, #0
 8025df2:	6078      	str	r0, [r7, #4]
 8025df4:	6039      	str	r1, [r7, #0]
    { return __res; }
 8025df6:	683b      	ldr	r3, [r7, #0]
 8025df8:	4618      	mov	r0, r3
 8025dfa:	370c      	adds	r7, #12
 8025dfc:	46bd      	mov	sp, r7
 8025dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e02:	4770      	bx	lr

08025e04 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8025e04:	b580      	push	{r7, lr}
 8025e06:	b084      	sub	sp, #16
 8025e08:	af00      	add	r7, sp, #0
 8025e0a:	60f8      	str	r0, [r7, #12]
 8025e0c:	60b9      	str	r1, [r7, #8]
 8025e0e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8025e10:	687a      	ldr	r2, [r7, #4]
 8025e12:	68b9      	ldr	r1, [r7, #8]
 8025e14:	68f8      	ldr	r0, [r7, #12]
 8025e16:	f7fe f889 	bl	8023f2c <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8025e1a:	4603      	mov	r3, r0
 8025e1c:	4618      	mov	r0, r3
 8025e1e:	3710      	adds	r7, #16
 8025e20:	46bd      	mov	sp, r7
 8025e22:	bd80      	pop	{r7, pc}

08025e24 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8025e24:	b580      	push	{r7, lr}
 8025e26:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025e28:	2010      	movs	r0, #16
 8025e2a:	f7fb f82a 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8025e2e:	4603      	mov	r3, r0
 8025e30:	4618      	mov	r0, r3
 8025e32:	bd80      	pop	{r7, pc}

08025e34 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8025e34:	b480      	push	{r7}
 8025e36:	b085      	sub	sp, #20
 8025e38:	af00      	add	r7, sp, #0
 8025e3a:	60f8      	str	r0, [r7, #12]
 8025e3c:	60b9      	str	r1, [r7, #8]
 8025e3e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8025e40:	68ba      	ldr	r2, [r7, #8]
 8025e42:	68fb      	ldr	r3, [r7, #12]
 8025e44:	1ad3      	subs	r3, r2, r3
 8025e46:	109b      	asrs	r3, r3, #2
 8025e48:	4a04      	ldr	r2, [pc, #16]	; (8025e5c <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag+0x28>)
 8025e4a:	fb02 f303 	mul.w	r3, r2, r3
    }
 8025e4e:	4618      	mov	r0, r3
 8025e50:	3714      	adds	r7, #20
 8025e52:	46bd      	mov	sp, r7
 8025e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e58:	4770      	bx	lr
 8025e5a:	bf00      	nop
 8025e5c:	cccccccd 	.word	0xcccccccd

08025e60 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8025e60:	b480      	push	{r7}
 8025e62:	b085      	sub	sp, #20
 8025e64:	af00      	add	r7, sp, #0
 8025e66:	60f8      	str	r0, [r7, #12]
 8025e68:	60b9      	str	r1, [r7, #8]
 8025e6a:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8025e6c:	68fb      	ldr	r3, [r7, #12]
 8025e6e:	6819      	ldr	r1, [r3, #0]
 8025e70:	68ba      	ldr	r2, [r7, #8]
 8025e72:	4613      	mov	r3, r2
 8025e74:	009b      	lsls	r3, r3, #2
 8025e76:	4413      	add	r3, r2
 8025e78:	009b      	lsls	r3, r3, #2
 8025e7a:	18ca      	adds	r2, r1, r3
 8025e7c:	68fb      	ldr	r3, [r7, #12]
 8025e7e:	601a      	str	r2, [r3, #0]
    }
 8025e80:	bf00      	nop
 8025e82:	3714      	adds	r7, #20
 8025e84:	46bd      	mov	sp, r7
 8025e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e8a:	4770      	bx	lr

08025e8c <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8025e8c:	b480      	push	{r7}
 8025e8e:	b083      	sub	sp, #12
 8025e90:	af00      	add	r7, sp, #0
 8025e92:	6078      	str	r0, [r7, #4]
    { return __it; }
 8025e94:	687b      	ldr	r3, [r7, #4]
 8025e96:	4618      	mov	r0, r3
 8025e98:	370c      	adds	r7, #12
 8025e9a:	46bd      	mov	sp, r7
 8025e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ea0:	4770      	bx	lr

08025ea2 <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8025ea2:	b5b0      	push	{r4, r5, r7, lr}
 8025ea4:	b090      	sub	sp, #64	; 0x40
 8025ea6:	af00      	add	r7, sp, #0
 8025ea8:	60f8      	str	r0, [r7, #12]
 8025eaa:	60b9      	str	r1, [r7, #8]
 8025eac:	607a      	str	r2, [r7, #4]
 8025eae:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8025eb0:	68b8      	ldr	r0, [r7, #8]
 8025eb2:	f001 f941 	bl	8027138 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8025eb6:	4604      	mov	r4, r0
 8025eb8:	6878      	ldr	r0, [r7, #4]
 8025eba:	f001 f93d 	bl	8027138 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8025ebe:	4605      	mov	r5, r0
 8025ec0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8025ec4:	6839      	ldr	r1, [r7, #0]
 8025ec6:	4618      	mov	r0, r3
 8025ec8:	f7fe fae6 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025ecc:	f107 0320 	add.w	r3, r7, #32
 8025ed0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8025ed4:	4611      	mov	r1, r2
 8025ed6:	4618      	mov	r0, r3
 8025ed8:	f001 f939 	bl	802714e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8025edc:	f107 0010 	add.w	r0, r7, #16
 8025ee0:	f107 0320 	add.w	r3, r7, #32
 8025ee4:	462a      	mov	r2, r5
 8025ee6:	4621      	mov	r1, r4
 8025ee8:	f001 f952 	bl	8027190 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>
 8025eec:	68fb      	ldr	r3, [r7, #12]
 8025eee:	f107 0210 	add.w	r2, r7, #16
 8025ef2:	6839      	ldr	r1, [r7, #0]
 8025ef4:	4618      	mov	r0, r3
 8025ef6:	f001 f99d 	bl	8027234 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8025efa:	68f8      	ldr	r0, [r7, #12]
 8025efc:	3740      	adds	r7, #64	; 0x40
 8025efe:	46bd      	mov	sp, r7
 8025f00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08025f04 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8025f04:	b580      	push	{r7, lr}
 8025f06:	b086      	sub	sp, #24
 8025f08:	af00      	add	r7, sp, #0
 8025f0a:	60f8      	str	r0, [r7, #12]
 8025f0c:	60b9      	str	r1, [r7, #8]
 8025f0e:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8025f10:	68bb      	ldr	r3, [r7, #8]
 8025f12:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8025f14:	68bb      	ldr	r3, [r7, #8]
 8025f16:	68db      	ldr	r3, [r3, #12]
 8025f18:	1ad3      	subs	r3, r2, r3
 8025f1a:	109b      	asrs	r3, r3, #2
 8025f1c:	4a0d      	ldr	r2, [pc, #52]	; (8025f54 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x50>)
 8025f1e:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8025f22:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8025f24:	687a      	ldr	r2, [r7, #4]
 8025f26:	697b      	ldr	r3, [r7, #20]
 8025f28:	429a      	cmp	r2, r3
 8025f2a:	d906      	bls.n	8025f3a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 8025f2c:	687a      	ldr	r2, [r7, #4]
 8025f2e:	697b      	ldr	r3, [r7, #20]
 8025f30:	1ad3      	subs	r3, r2, r3
 8025f32:	4619      	mov	r1, r3
 8025f34:	68b8      	ldr	r0, [r7, #8]
 8025f36:	f001 f98b 	bl	8027250 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 8025f3a:	68bb      	ldr	r3, [r7, #8]
 8025f3c:	f103 0108 	add.w	r1, r3, #8
 8025f40:	687a      	ldr	r2, [r7, #4]
 8025f42:	68fb      	ldr	r3, [r7, #12]
 8025f44:	4618      	mov	r0, r3
 8025f46:	f001 f9c9 	bl	80272dc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8025f4a:	68f8      	ldr	r0, [r7, #12]
 8025f4c:	3718      	adds	r7, #24
 8025f4e:	46bd      	mov	sp, r7
 8025f50:	bd80      	pop	{r7, pc}
 8025f52:	bf00      	nop
 8025f54:	cccccccd 	.word	0xcccccccd

08025f58 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8025f58:	b580      	push	{r7, lr}
 8025f5a:	b088      	sub	sp, #32
 8025f5c:	af00      	add	r7, sp, #0
 8025f5e:	60f8      	str	r0, [r7, #12]
 8025f60:	60b9      	str	r1, [r7, #8]
 8025f62:	607a      	str	r2, [r7, #4]
 8025f64:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8025f66:	f107 0310 	add.w	r3, r7, #16
 8025f6a:	6839      	ldr	r1, [r7, #0]
 8025f6c:	4618      	mov	r0, r3
 8025f6e:	f7fe fa93 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f72:	68f8      	ldr	r0, [r7, #12]
 8025f74:	f107 0310 	add.w	r3, r7, #16
 8025f78:	687a      	ldr	r2, [r7, #4]
 8025f7a:	68b9      	ldr	r1, [r7, #8]
 8025f7c:	f001 f9c1 	bl	8027302 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8025f80:	68f8      	ldr	r0, [r7, #12]
 8025f82:	3720      	adds	r7, #32
 8025f84:	46bd      	mov	sp, r7
 8025f86:	bd80      	pop	{r7, pc}

08025f88 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8025f88:	b580      	push	{r7, lr}
 8025f8a:	b086      	sub	sp, #24
 8025f8c:	af00      	add	r7, sp, #0
 8025f8e:	60f8      	str	r0, [r7, #12]
 8025f90:	60b9      	str	r1, [r7, #8]
 8025f92:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8025f94:	68bb      	ldr	r3, [r7, #8]
 8025f96:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 8025f98:	68bb      	ldr	r3, [r7, #8]
 8025f9a:	699b      	ldr	r3, [r3, #24]
 8025f9c:	1ad3      	subs	r3, r2, r3
 8025f9e:	109b      	asrs	r3, r3, #2
 8025fa0:	4a0d      	ldr	r2, [pc, #52]	; (8025fd8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x50>)
 8025fa2:	fb02 f303 	mul.w	r3, r2, r3
 8025fa6:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8025fa8:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8025faa:	687a      	ldr	r2, [r7, #4]
 8025fac:	697b      	ldr	r3, [r7, #20]
 8025fae:	429a      	cmp	r2, r3
 8025fb0:	d906      	bls.n	8025fc0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 8025fb2:	687a      	ldr	r2, [r7, #4]
 8025fb4:	697b      	ldr	r3, [r7, #20]
 8025fb6:	1ad3      	subs	r3, r2, r3
 8025fb8:	4619      	mov	r1, r3
 8025fba:	68b8      	ldr	r0, [r7, #8]
 8025fbc:	f001 f9bc 	bl	8027338 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 8025fc0:	68bb      	ldr	r3, [r7, #8]
 8025fc2:	f103 0118 	add.w	r1, r3, #24
 8025fc6:	687a      	ldr	r2, [r7, #4]
 8025fc8:	68fb      	ldr	r3, [r7, #12]
 8025fca:	4618      	mov	r0, r3
 8025fcc:	f7ff fa1c 	bl	8025408 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8025fd0:	68f8      	ldr	r0, [r7, #12]
 8025fd2:	3718      	adds	r7, #24
 8025fd4:	46bd      	mov	sp, r7
 8025fd6:	bd80      	pop	{r7, pc}
 8025fd8:	cccccccd 	.word	0xcccccccd

08025fdc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>:
      deque<_Tp, _Alloc>::
 8025fdc:	b5b0      	push	{r4, r5, r7, lr}
 8025fde:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8025fe2:	af04      	add	r7, sp, #16
 8025fe4:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8025fe8:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 8025fec:	6020      	str	r0, [r4, #0]
 8025fee:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8025ff2:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8025ff6:	6001      	str	r1, [r0, #0]
 8025ff8:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8025ffc:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8026000:	600a      	str	r2, [r1, #0]
 8026002:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8026006:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802600a:	6013      	str	r3, [r2, #0]
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 802600c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026010:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026014:	681b      	ldr	r3, [r3, #0]
 8026016:	f103 0208 	add.w	r2, r3, #8
 802601a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802601e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8026022:	4611      	mov	r1, r2
 8026024:	6818      	ldr	r0, [r3, #0]
 8026026:	f7fe f8c9 	bl	80241bc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 802602a:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 802602e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026032:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026036:	6818      	ldr	r0, [r3, #0]
 8026038:	f7fd f8f0 	bl	802321c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 802603c:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 8026040:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8026044:	085a      	lsrs	r2, r3, #1
 8026046:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 802604a:	429a      	cmp	r2, r3
 802604c:	f240 8158 	bls.w	8026300 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x324>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8026050:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026054:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8026058:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802605c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026060:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8026064:	6819      	ldr	r1, [r3, #0]
 8026066:	f7ff ff4d 	bl	8025f04 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 802606a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802606e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026072:	681b      	ldr	r3, [r3, #0]
 8026074:	f103 0208 	add.w	r2, r3, #8
 8026078:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802607c:	4611      	mov	r1, r2
 802607e:	4618      	mov	r0, r3
 8026080:	f7fe fa0a 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 8026084:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026088:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802608c:	681b      	ldr	r3, [r3, #0]
 802608e:	f103 0108 	add.w	r1, r3, #8
 8026092:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026096:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 802609a:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 802609e:	4618      	mov	r0, r3
 80260a0:	f7ff f9b2 	bl	8025408 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80260a4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80260a8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80260ac:	681a      	ldr	r2, [r3, #0]
 80260ae:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80260b2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80260b6:	4614      	mov	r4, r2
 80260b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80260ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (__elemsbefore >= difference_type(__n))
 80260be:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80260c2:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80260c6:	429a      	cmp	r2, r3
 80260c8:	f2c0 8098 	blt.w	80261fc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x220>
		    iterator __start_n = (this->_M_impl._M_start
 80260cc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80260d0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80260d4:	681b      	ldr	r3, [r3, #0]
 80260d6:	f103 0108 	add.w	r1, r3, #8
 80260da:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80260de:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80260e2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80260e6:	4618      	mov	r0, r3
 80260e8:	f7ff f98e 	bl	8025408 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 80260ec:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80260f0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80260f4:	681b      	ldr	r3, [r3, #0]
 80260f6:	f103 0208 	add.w	r2, r3, #8
 80260fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80260fe:	4611      	mov	r1, r2
 8026100:	4618      	mov	r0, r3
 8026102:	f7fe f9c9 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026106:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802610a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802610e:	4611      	mov	r1, r2
 8026110:	4618      	mov	r0, r3
 8026112:	f7fe f9c1 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026116:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802611a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 802611e:	4611      	mov	r1, r2
 8026120:	4618      	mov	r0, r3
 8026122:	f7fe f9b9 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						_M_get_Tp_allocator());
 8026126:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802612a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802612e:	681b      	ldr	r3, [r3, #0]
 8026130:	4618      	mov	r0, r3
 8026132:	f7fe f86f 	bl	8024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8026136:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8026138:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802613c:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 8026140:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8026144:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8026148:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 802614c:	9400      	str	r4, [sp, #0]
 802614e:	f001 f937 	bl	80273c0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		    this->_M_impl._M_start = __new_start;
 8026152:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026156:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802615a:	681b      	ldr	r3, [r3, #0]
 802615c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8026160:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8026164:	f103 0408 	add.w	r4, r3, #8
 8026168:	4613      	mov	r3, r2
 802616a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802616c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 8026170:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8026174:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8026178:	4611      	mov	r1, r2
 802617a:	4618      	mov	r0, r3
 802617c:	f7fe f98c 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026180:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026184:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8026188:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 802618c:	6819      	ldr	r1, [r3, #0]
 802618e:	4610      	mov	r0, r2
 8026190:	f7fe f982 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026194:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8026198:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 802619c:	4611      	mov	r1, r2
 802619e:	4618      	mov	r0, r3
 80261a0:	f7fe f97a 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261a4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80261a8:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 80261ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80261b0:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80261b4:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 80261b8:	f001 f93b 	bl	8027432 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 80261bc:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80261c0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80261c4:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 80261c8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80261cc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80261d0:	6819      	ldr	r1, [r3, #0]
 80261d2:	f001 f883 	bl	80272dc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80261d6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80261da:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80261de:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80261e2:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80261e6:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80261ea:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80261ee:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80261f2:	6812      	ldr	r2, [r2, #0]
 80261f4:	6809      	ldr	r1, [r1, #0]
 80261f6:	f7fe ff8b 	bl	8025110 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80261fa:	e1dd      	b.n	80265b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		    _ForwardIterator __mid = __first;
 80261fc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026200:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8026204:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8026208:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 802620c:	6812      	ldr	r2, [r2, #0]
 802620e:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 8026210:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8026214:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8026218:	1ad2      	subs	r2, r2, r3
 802621a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802621e:	4611      	mov	r1, r2
 8026220:	4618      	mov	r0, r3
 8026222:	f001 f93c 	bl	802749e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8026226:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802622a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802622e:	681b      	ldr	r3, [r3, #0]
 8026230:	f103 0208 	add.w	r2, r3, #8
 8026234:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8026238:	4611      	mov	r1, r2
 802623a:	4618      	mov	r0, r3
 802623c:	f7fe f92c 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026240:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026244:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8026248:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 802624c:	6819      	ldr	r1, [r3, #0]
 802624e:	4610      	mov	r0, r2
 8026250:	f7fe f922 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026254:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026258:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 802625c:	681c      	ldr	r4, [r3, #0]
 802625e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8026262:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8026266:	4611      	mov	r1, r2
 8026268:	4618      	mov	r0, r3
 802626a:	f7fe f915 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						   _M_get_Tp_allocator());
 802626e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026272:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026276:	681b      	ldr	r3, [r3, #0]
 8026278:	4618      	mov	r0, r3
 802627a:	f7fd ffcb 	bl	8024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802627e:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8026280:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026284:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8026288:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802628c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8026290:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 8026294:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8026298:	9202      	str	r2, [sp, #8]
 802629a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 802629e:	9201      	str	r2, [sp, #4]
 80262a0:	9400      	str	r4, [sp, #0]
 80262a2:	681b      	ldr	r3, [r3, #0]
 80262a4:	462a      	mov	r2, r5
 80262a6:	f001 f90d 	bl	80274c4 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>
		    this->_M_impl._M_start = __new_start;
 80262aa:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80262ae:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80262b2:	681b      	ldr	r3, [r3, #0]
 80262b4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80262b8:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 80262bc:	f103 0408 	add.w	r4, r3, #8
 80262c0:	4613      	mov	r3, r2
 80262c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80262c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 80262c8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80262cc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80262d0:	681c      	ldr	r4, [r3, #0]
 80262d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80262d6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80262da:	4611      	mov	r1, r2
 80262dc:	4618      	mov	r0, r3
 80262de:	f7fe f8db 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80262e2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80262e6:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80262ea:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80262ee:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80262f2:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80262f6:	6812      	ldr	r2, [r2, #0]
 80262f8:	4621      	mov	r1, r4
 80262fa:	f7fe ff09 	bl	8025110 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80262fe:	e15b      	b.n	80265b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 8026300:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026304:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 8026308:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802630c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026310:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8026314:	6819      	ldr	r1, [r3, #0]
 8026316:	f7ff fe37 	bl	8025f88 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 802631a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802631e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026322:	681b      	ldr	r3, [r3, #0]
 8026324:	f103 0218 	add.w	r2, r3, #24
 8026328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802632c:	4611      	mov	r1, r2
 802632e:	4618      	mov	r0, r3
 8026330:	f7fe f8b2 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    difference_type(__length) - __elemsbefore;
 8026334:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 8026338:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 802633c:	1ad3      	subs	r3, r2, r3
 802633e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 8026342:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026346:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802634a:	681b      	ldr	r3, [r3, #0]
 802634c:	f103 0118 	add.w	r1, r3, #24
 8026350:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026354:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8026358:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 802635c:	4618      	mov	r0, r3
 802635e:	f000 ffbd 	bl	80272dc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8026362:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026366:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802636a:	681a      	ldr	r2, [r3, #0]
 802636c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026370:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8026374:	4614      	mov	r4, r2
 8026376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026378:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 802637c:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8026380:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8026384:	429a      	cmp	r2, r3
 8026386:	f340 8096 	ble.w	80264b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 802638a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802638e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026392:	681b      	ldr	r3, [r3, #0]
 8026394:	f103 0118 	add.w	r1, r3, #24
 8026398:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 802639c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80263a0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80263a4:	4618      	mov	r0, r3
 80263a6:	f000 ff99 	bl	80272dc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		  std::__uninitialized_move_a(__finish_n,
 80263aa:	f107 0218 	add.w	r2, r7, #24
 80263ae:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80263b2:	4611      	mov	r1, r2
 80263b4:	4618      	mov	r0, r3
 80263b6:	f7fe f86f 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 80263ba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80263be:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80263c2:	681b      	ldr	r3, [r3, #0]
 80263c4:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 80263c8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80263cc:	4611      	mov	r1, r2
 80263ce:	4618      	mov	r0, r3
 80263d0:	f7fe f862 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 80263d4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80263d8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80263dc:	681b      	ldr	r3, [r3, #0]
 80263de:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 80263e2:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80263e6:	4611      	mov	r1, r2
 80263e8:	4618      	mov	r0, r3
 80263ea:	f7fe f855 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      _M_get_Tp_allocator());
 80263ee:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80263f2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80263f6:	681b      	ldr	r3, [r3, #0]
 80263f8:	4618      	mov	r0, r3
 80263fa:	f7fd ff0b 	bl	8024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80263fe:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 8026400:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026404:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8026408:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 802640c:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8026410:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8026414:	9400      	str	r4, [sp, #0]
 8026416:	f000 ffd3 	bl	80273c0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 802641a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802641e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026422:	681b      	ldr	r3, [r3, #0]
 8026424:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8026428:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 802642c:	f103 0418 	add.w	r4, r3, #24
 8026430:	4613      	mov	r3, r2
 8026432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 8026438:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802643c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8026440:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8026444:	6819      	ldr	r1, [r3, #0]
 8026446:	4610      	mov	r0, r2
 8026448:	f7fe f826 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802644c:	f107 0218 	add.w	r2, r7, #24
 8026450:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8026454:	4611      	mov	r1, r2
 8026456:	4618      	mov	r0, r3
 8026458:	f7fe f81e 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802645c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8026460:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8026464:	4611      	mov	r1, r2
 8026466:	4618      	mov	r0, r3
 8026468:	f7fe f816 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802646c:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8026470:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8026474:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8026478:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 802647c:	f001 f862 	bl	8027544 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		  std::copy(__first, __last, __pos);
 8026480:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026484:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8026488:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 802648c:	6819      	ldr	r1, [r3, #0]
 802648e:	4610      	mov	r0, r2
 8026490:	f7fe f802 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026494:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8026498:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 802649c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80264a0:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80264a4:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80264a8:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80264ac:	6812      	ldr	r2, [r2, #0]
 80264ae:	6809      	ldr	r1, [r1, #0]
 80264b0:	f7fe fe2e 	bl	8025110 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80264b4:	e080      	b.n	80265b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		  _ForwardIterator __mid = __first;
 80264b6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80264ba:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80264be:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80264c2:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80264c6:	6812      	ldr	r2, [r2, #0]
 80264c8:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 80264ca:	f107 0314 	add.w	r3, r7, #20
 80264ce:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 80264d2:	4618      	mov	r0, r3
 80264d4:	f000 ffe3 	bl	802749e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80264d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80264dc:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80264e0:	681c      	ldr	r4, [r3, #0]
 80264e2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80264e6:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80264ea:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80264ee:	6819      	ldr	r1, [r3, #0]
 80264f0:	4610      	mov	r0, r2
 80264f2:	f7fd ffd1 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 80264f6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80264fa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80264fe:	681b      	ldr	r3, [r3, #0]
 8026500:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8026504:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8026508:	4611      	mov	r1, r2
 802650a:	4618      	mov	r0, r3
 802650c:	f7fd ffc4 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 8026510:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026514:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026518:	681b      	ldr	r3, [r3, #0]
 802651a:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 802651e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8026522:	4611      	mov	r1, r2
 8026524:	4618      	mov	r0, r3
 8026526:	f7fd ffb7 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 _M_get_Tp_allocator());
 802652a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802652e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8026532:	681b      	ldr	r3, [r3, #0]
 8026534:	4618      	mov	r0, r3
 8026536:	f7fd fe6d 	bl	8024214 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802653a:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 802653c:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8026540:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8026544:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8026548:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802654c:	9302      	str	r3, [sp, #8]
 802654e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8026552:	9301      	str	r3, [sp, #4]
 8026554:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8026558:	9300      	str	r3, [sp, #0]
 802655a:	460b      	mov	r3, r1
 802655c:	6812      	ldr	r2, [r2, #0]
 802655e:	4621      	mov	r1, r4
 8026560:	f001 f826 	bl	80275b0 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8026564:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026568:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802656c:	681b      	ldr	r3, [r3, #0]
 802656e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8026572:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8026576:	f103 0418 	add.w	r4, r3, #24
 802657a:	4613      	mov	r3, r2
 802657c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802657e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 8026582:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026586:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 802658a:	681c      	ldr	r4, [r3, #0]
 802658c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8026590:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8026594:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8026598:	6819      	ldr	r1, [r3, #0]
 802659a:	4610      	mov	r0, r2
 802659c:	f7fd ff7c 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80265a0:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 80265a4:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80265a8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80265ac:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 80265b0:	4622      	mov	r2, r4
 80265b2:	6809      	ldr	r1, [r1, #0]
 80265b4:	f7fe fdac 	bl	8025110 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80265b8:	bf00      	nop
 80265ba:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 80265be:	46bd      	mov	sp, r7
 80265c0:	bdb0      	pop	{r4, r5, r7, pc}

080265c2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80265c2:	b580      	push	{r7, lr}
 80265c4:	b084      	sub	sp, #16
 80265c6:	af00      	add	r7, sp, #0
 80265c8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80265ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80265ce:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80265d0:	6878      	ldr	r0, [r7, #4]
 80265d2:	f001 f82d 	bl	8027630 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>
 80265d6:	4603      	mov	r3, r0
 80265d8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80265da:	f107 0208 	add.w	r2, r7, #8
 80265de:	f107 030c 	add.w	r3, r7, #12
 80265e2:	4611      	mov	r1, r2
 80265e4:	4618      	mov	r0, r3
 80265e6:	f000 fb89 	bl	8026cfc <_ZSt3minIjERKT_S2_S2_>
 80265ea:	4603      	mov	r3, r0
 80265ec:	681b      	ldr	r3, [r3, #0]
      }
 80265ee:	4618      	mov	r0, r3
 80265f0:	3710      	adds	r7, #16
 80265f2:	46bd      	mov	sp, r7
 80265f4:	bd80      	pop	{r7, pc}

080265f6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80265f6:	b480      	push	{r7}
 80265f8:	b083      	sub	sp, #12
 80265fa:	af00      	add	r7, sp, #0
 80265fc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80265fe:	687b      	ldr	r3, [r7, #4]
 8026600:	4618      	mov	r0, r3
 8026602:	370c      	adds	r7, #12
 8026604:	46bd      	mov	sp, r7
 8026606:	f85d 7b04 	ldr.w	r7, [sp], #4
 802660a:	4770      	bx	lr

0802660c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 802660c:	b590      	push	{r4, r7, lr}
 802660e:	b08b      	sub	sp, #44	; 0x2c
 8026610:	af00      	add	r7, sp, #0
 8026612:	60f8      	str	r0, [r7, #12]
 8026614:	60b9      	str	r1, [r7, #8]
 8026616:	4613      	mov	r3, r2
 8026618:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 802661a:	68fb      	ldr	r3, [r7, #12]
 802661c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802661e:	68fb      	ldr	r3, [r7, #12]
 8026620:	695b      	ldr	r3, [r3, #20]
 8026622:	1ad3      	subs	r3, r2, r3
 8026624:	109b      	asrs	r3, r3, #2
 8026626:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8026628:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 802662a:	68bb      	ldr	r3, [r7, #8]
 802662c:	6a3a      	ldr	r2, [r7, #32]
 802662e:	4413      	add	r3, r2
 8026630:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8026632:	68fb      	ldr	r3, [r7, #12]
 8026634:	685a      	ldr	r2, [r3, #4]
 8026636:	69fb      	ldr	r3, [r7, #28]
 8026638:	005b      	lsls	r3, r3, #1
 802663a:	429a      	cmp	r2, r3
 802663c:	d92d      	bls.n	802669a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802663e:	68fb      	ldr	r3, [r7, #12]
 8026640:	681a      	ldr	r2, [r3, #0]
 8026642:	68fb      	ldr	r3, [r7, #12]
 8026644:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8026646:	69fb      	ldr	r3, [r7, #28]
 8026648:	1acb      	subs	r3, r1, r3
 802664a:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802664c:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802664e:	79fb      	ldrb	r3, [r7, #7]
 8026650:	2b00      	cmp	r3, #0
 8026652:	d002      	beq.n	802665a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8026654:	68bb      	ldr	r3, [r7, #8]
 8026656:	009b      	lsls	r3, r3, #2
 8026658:	e000      	b.n	802665c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x50>
 802665a:	2300      	movs	r3, #0
 802665c:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802665e:	4413      	add	r3, r2
 8026660:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8026662:	68fb      	ldr	r3, [r7, #12]
 8026664:	695b      	ldr	r3, [r3, #20]
 8026666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026668:	429a      	cmp	r2, r3
 802666a:	d209      	bcs.n	8026680 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 802666c:	68fb      	ldr	r3, [r7, #12]
 802666e:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8026670:	68fb      	ldr	r3, [r7, #12]
 8026672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8026674:	3304      	adds	r3, #4
 8026676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026678:	4619      	mov	r1, r3
 802667a:	f000 ffe5 	bl	8027648 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 802667e:	e048      	b.n	8026712 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026680:	68fb      	ldr	r3, [r7, #12]
 8026682:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8026684:	68fb      	ldr	r3, [r7, #12]
 8026686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026688:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 802668a:	6a3b      	ldr	r3, [r7, #32]
 802668c:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802668e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026690:	4413      	add	r3, r2
 8026692:	461a      	mov	r2, r3
 8026694:	f000 fff0 	bl	8027678 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 8026698:	e03b      	b.n	8026712 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 802669a:	68fb      	ldr	r3, [r7, #12]
 802669c:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 802669e:	68fb      	ldr	r3, [r7, #12]
 80266a0:	3304      	adds	r3, #4
 80266a2:	f107 0208 	add.w	r2, r7, #8
 80266a6:	4611      	mov	r1, r2
 80266a8:	4618      	mov	r0, r3
 80266aa:	f7fd ffd2 	bl	8024652 <_ZSt3maxIjERKT_S2_S2_>
 80266ae:	4603      	mov	r3, r0
 80266b0:	681b      	ldr	r3, [r3, #0]
 80266b2:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80266b4:	3302      	adds	r3, #2
 80266b6:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80266b8:	68fb      	ldr	r3, [r7, #12]
 80266ba:	69b9      	ldr	r1, [r7, #24]
 80266bc:	4618      	mov	r0, r3
 80266be:	f7fe fef2 	bl	80254a6 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 80266c2:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80266c4:	69ba      	ldr	r2, [r7, #24]
 80266c6:	69fb      	ldr	r3, [r7, #28]
 80266c8:	1ad3      	subs	r3, r2, r3
 80266ca:	085b      	lsrs	r3, r3, #1
 80266cc:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80266ce:	79fb      	ldrb	r3, [r7, #7]
 80266d0:	2b00      	cmp	r3, #0
 80266d2:	d002      	beq.n	80266da <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xce>
 80266d4:	68bb      	ldr	r3, [r7, #8]
 80266d6:	009b      	lsls	r3, r3, #2
 80266d8:	e000      	b.n	80266dc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 80266da:	2300      	movs	r3, #0
 80266dc:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80266de:	697a      	ldr	r2, [r7, #20]
 80266e0:	4413      	add	r3, r2
 80266e2:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80266e4:	68fb      	ldr	r3, [r7, #12]
 80266e6:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80266e8:	68fb      	ldr	r3, [r7, #12]
 80266ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80266ec:	3304      	adds	r3, #4
 80266ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80266f0:	4619      	mov	r1, r3
 80266f2:	f000 ffa9 	bl	8027648 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80266f6:	68f8      	ldr	r0, [r7, #12]
 80266f8:	68fb      	ldr	r3, [r7, #12]
 80266fa:	6819      	ldr	r1, [r3, #0]
 80266fc:	68fb      	ldr	r3, [r7, #12]
 80266fe:	685b      	ldr	r3, [r3, #4]
 8026700:	461a      	mov	r2, r3
 8026702:	f7fd fe8f 	bl	8024424 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
	  this->_M_impl._M_map = __new_map;
 8026706:	68fb      	ldr	r3, [r7, #12]
 8026708:	697a      	ldr	r2, [r7, #20]
 802670a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 802670c:	68fb      	ldr	r3, [r7, #12]
 802670e:	69ba      	ldr	r2, [r7, #24]
 8026710:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8026712:	68fb      	ldr	r3, [r7, #12]
 8026714:	3308      	adds	r3, #8
 8026716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026718:	4618      	mov	r0, r3
 802671a:	f7fe fe33 	bl	8025384 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 802671e:	68fb      	ldr	r3, [r7, #12]
 8026720:	f103 0018 	add.w	r0, r3, #24
 8026724:	6a3a      	ldr	r2, [r7, #32]
 8026726:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 802672a:	4413      	add	r3, r2
 802672c:	009b      	lsls	r3, r3, #2
 802672e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026730:	4413      	add	r3, r2
 8026732:	4619      	mov	r1, r3
 8026734:	f7fe fe26 	bl	8025384 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
    }
 8026738:	bf00      	nop
 802673a:	372c      	adds	r7, #44	; 0x2c
 802673c:	46bd      	mov	sp, r7
 802673e:	bd90      	pop	{r4, r7, pc}

08026740 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8026740:	b580      	push	{r7, lr}
 8026742:	b082      	sub	sp, #8
 8026744:	af00      	add	r7, sp, #0
 8026746:	6078      	str	r0, [r7, #4]
 8026748:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 802674a:	2200      	movs	r2, #0
 802674c:	6839      	ldr	r1, [r7, #0]
 802674e:	6878      	ldr	r0, [r7, #4]
 8026750:	f000 ffaa 	bl	80276a8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8026754:	4603      	mov	r3, r0
 8026756:	4618      	mov	r0, r3
 8026758:	3708      	adds	r7, #8
 802675a:	46bd      	mov	sp, r7
 802675c:	bd80      	pop	{r7, pc}

0802675e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802675e:	b580      	push	{r7, lr}
 8026760:	b084      	sub	sp, #16
 8026762:	af00      	add	r7, sp, #0
 8026764:	60f8      	str	r0, [r7, #12]
 8026766:	60b9      	str	r1, [r7, #8]
 8026768:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802676a:	687a      	ldr	r2, [r7, #4]
 802676c:	68b9      	ldr	r1, [r7, #8]
 802676e:	68f8      	ldr	r0, [r7, #12]
 8026770:	f000 ffbb 	bl	80276ea <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>
 8026774:	bf00      	nop
 8026776:	3710      	adds	r7, #16
 8026778:	46bd      	mov	sp, r7
 802677a:	bd80      	pop	{r7, pc}

0802677c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 802677c:	b590      	push	{r4, r7, lr}
 802677e:	b085      	sub	sp, #20
 8026780:	af00      	add	r7, sp, #0
 8026782:	6078      	str	r0, [r7, #4]
 8026784:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8026786:	687b      	ldr	r3, [r7, #4]
 8026788:	681a      	ldr	r2, [r3, #0]
 802678a:	687b      	ldr	r3, [r7, #4]
 802678c:	685b      	ldr	r3, [r3, #4]
 802678e:	1ad3      	subs	r3, r2, r3
 8026790:	109b      	asrs	r3, r3, #2
 8026792:	4a2b      	ldr	r2, [pc, #172]	; (8026840 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xc4>)
 8026794:	fb02 f303 	mul.w	r3, r2, r3
 8026798:	461a      	mov	r2, r3
 802679a:	683b      	ldr	r3, [r7, #0]
 802679c:	4413      	add	r3, r2
 802679e:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 80267a0:	68fb      	ldr	r3, [r7, #12]
 80267a2:	2b00      	cmp	r3, #0
 80267a4:	db08      	blt.n	80267b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 80267a6:	f7fe fe1c 	bl	80253e2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80267aa:	4603      	mov	r3, r0
 80267ac:	461a      	mov	r2, r3
 80267ae:	68fb      	ldr	r3, [r7, #12]
 80267b0:	4293      	cmp	r3, r2
 80267b2:	da01      	bge.n	80267b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 80267b4:	2301      	movs	r3, #1
 80267b6:	e000      	b.n	80267ba <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3e>
 80267b8:	2300      	movs	r3, #0
 80267ba:	2b00      	cmp	r3, #0
 80267bc:	d00a      	beq.n	80267d4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x58>
	  _M_cur += __n;
 80267be:	687b      	ldr	r3, [r7, #4]
 80267c0:	6819      	ldr	r1, [r3, #0]
 80267c2:	683a      	ldr	r2, [r7, #0]
 80267c4:	4613      	mov	r3, r2
 80267c6:	009b      	lsls	r3, r3, #2
 80267c8:	4413      	add	r3, r2
 80267ca:	009b      	lsls	r3, r3, #2
 80267cc:	18ca      	adds	r2, r1, r3
 80267ce:	687b      	ldr	r3, [r7, #4]
 80267d0:	601a      	str	r2, [r3, #0]
 80267d2:	e02f      	b.n	8026834 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80267d4:	68fb      	ldr	r3, [r7, #12]
 80267d6:	2b00      	cmp	r3, #0
 80267d8:	dd07      	ble.n	80267ea <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x6e>
 80267da:	f7fe fe02 	bl	80253e2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80267de:	4603      	mov	r3, r0
 80267e0:	461a      	mov	r2, r3
 80267e2:	68fb      	ldr	r3, [r7, #12]
 80267e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80267e8:	e007      	b.n	80267fa <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 80267ea:	68fb      	ldr	r3, [r7, #12]
 80267ec:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 80267ee:	f7fe fdf8 	bl	80253e2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80267f2:	4603      	mov	r3, r0
 80267f4:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80267f8:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 80267fa:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 80267fc:	687b      	ldr	r3, [r7, #4]
 80267fe:	68da      	ldr	r2, [r3, #12]
 8026800:	68bb      	ldr	r3, [r7, #8]
 8026802:	009b      	lsls	r3, r3, #2
 8026804:	4413      	add	r3, r2
 8026806:	4619      	mov	r1, r3
 8026808:	6878      	ldr	r0, [r7, #4]
 802680a:	f7fe fdbb 	bl	8025384 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first + (__offset - __node_offset
 802680e:	687b      	ldr	r3, [r7, #4]
 8026810:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8026812:	f7fe fde6 	bl	80253e2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8026816:	4603      	mov	r3, r0
 8026818:	461a      	mov	r2, r3
 802681a:	68bb      	ldr	r3, [r7, #8]
 802681c:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8026820:	68fa      	ldr	r2, [r7, #12]
 8026822:	1ad3      	subs	r3, r2, r3
 8026824:	461a      	mov	r2, r3
 8026826:	4613      	mov	r3, r2
 8026828:	009b      	lsls	r3, r3, #2
 802682a:	4413      	add	r3, r2
 802682c:	009b      	lsls	r3, r3, #2
 802682e:	18e2      	adds	r2, r4, r3
 8026830:	687b      	ldr	r3, [r7, #4]
 8026832:	601a      	str	r2, [r3, #0]
	return *this;
 8026834:	687b      	ldr	r3, [r7, #4]
      }
 8026836:	4618      	mov	r0, r3
 8026838:	3714      	adds	r7, #20
 802683a:	46bd      	mov	sp, r7
 802683c:	bd90      	pop	{r4, r7, pc}
 802683e:	bf00      	nop
 8026840:	cccccccd 	.word	0xcccccccd

08026844 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026844:	b480      	push	{r7}
 8026846:	b083      	sub	sp, #12
 8026848:	af00      	add	r7, sp, #0
 802684a:	6078      	str	r0, [r7, #4]
 802684c:	687b      	ldr	r3, [r7, #4]
 802684e:	4618      	mov	r0, r3
 8026850:	370c      	adds	r7, #12
 8026852:	46bd      	mov	sp, r7
 8026854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026858:	4770      	bx	lr

0802685a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 802685a:	b480      	push	{r7}
 802685c:	b083      	sub	sp, #12
 802685e:	af00      	add	r7, sp, #0
 8026860:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8026862:	687b      	ldr	r3, [r7, #4]
 8026864:	2200      	movs	r2, #0
 8026866:	601a      	str	r2, [r3, #0]
 8026868:	687b      	ldr	r3, [r7, #4]
 802686a:	2200      	movs	r2, #0
 802686c:	605a      	str	r2, [r3, #4]
 802686e:	687b      	ldr	r3, [r7, #4]
 8026870:	2200      	movs	r2, #0
 8026872:	609a      	str	r2, [r3, #8]
 8026874:	687b      	ldr	r3, [r7, #4]
 8026876:	2200      	movs	r2, #0
 8026878:	60da      	str	r2, [r3, #12]
 802687a:	687b      	ldr	r3, [r7, #4]
 802687c:	4618      	mov	r0, r3
 802687e:	370c      	adds	r7, #12
 8026880:	46bd      	mov	sp, r7
 8026882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026886:	4770      	bx	lr

08026888 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8026888:	b580      	push	{r7, lr}
 802688a:	b082      	sub	sp, #8
 802688c:	af00      	add	r7, sp, #0
 802688e:	6078      	str	r0, [r7, #4]
 8026890:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8026892:	2200      	movs	r2, #0
 8026894:	6839      	ldr	r1, [r7, #0]
 8026896:	6878      	ldr	r0, [r7, #4]
 8026898:	f000 ff3a 	bl	8027710 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 802689c:	4603      	mov	r3, r0
 802689e:	4618      	mov	r0, r3
 80268a0:	3708      	adds	r7, #8
 80268a2:	46bd      	mov	sp, r7
 80268a4:	bd80      	pop	{r7, pc}

080268a6 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80268a6:	b580      	push	{r7, lr}
 80268a8:	b082      	sub	sp, #8
 80268aa:	af00      	add	r7, sp, #0
 80268ac:	6078      	str	r0, [r7, #4]
 80268ae:	6039      	str	r1, [r7, #0]
 80268b0:	6878      	ldr	r0, [r7, #4]
 80268b2:	f000 ff4b 	bl	802774c <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>
 80268b6:	687b      	ldr	r3, [r7, #4]
 80268b8:	4618      	mov	r0, r3
 80268ba:	3708      	adds	r7, #8
 80268bc:	46bd      	mov	sp, r7
 80268be:	bd80      	pop	{r7, pc}

080268c0 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80268c0:	b480      	push	{r7}
 80268c2:	b083      	sub	sp, #12
 80268c4:	af00      	add	r7, sp, #0
 80268c6:	6078      	str	r0, [r7, #4]
 80268c8:	687b      	ldr	r3, [r7, #4]
 80268ca:	4618      	mov	r0, r3
 80268cc:	370c      	adds	r7, #12
 80268ce:	46bd      	mov	sp, r7
 80268d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268d4:	4770      	bx	lr

080268d6 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 80268d6:	b580      	push	{r7, lr}
 80268d8:	b084      	sub	sp, #16
 80268da:	af00      	add	r7, sp, #0
 80268dc:	60f8      	str	r0, [r7, #12]
 80268de:	60b9      	str	r1, [r7, #8]
 80268e0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80268e2:	687b      	ldr	r3, [r7, #4]
 80268e4:	009b      	lsls	r3, r3, #2
 80268e6:	4619      	mov	r1, r3
 80268e8:	68b8      	ldr	r0, [r7, #8]
 80268ea:	f016 fda1 	bl	803d430 <_ZdlPvj>
      }
 80268ee:	bf00      	nop
 80268f0:	3710      	adds	r7, #16
 80268f2:	46bd      	mov	sp, r7
 80268f4:	bd80      	pop	{r7, pc}

080268f6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80268f6:	b580      	push	{r7, lr}
 80268f8:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80268fa:	2014      	movs	r0, #20
 80268fc:	f7fa fac1 	bl	8020e82 <_ZSt16__deque_buf_sizej>
 8026900:	4603      	mov	r3, r0
 8026902:	4618      	mov	r0, r3
 8026904:	bd80      	pop	{r7, pc}

08026906 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8026906:	b5b0      	push	{r4, r5, r7, lr}
 8026908:	b08c      	sub	sp, #48	; 0x30
 802690a:	af00      	add	r7, sp, #0
 802690c:	6078      	str	r0, [r7, #4]
 802690e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8026910:	6878      	ldr	r0, [r7, #4]
 8026912:	f000 ff26 	bl	8027762 <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8026916:	4602      	mov	r2, r0
 8026918:	f107 0308 	add.w	r3, r7, #8
 802691c:	4611      	mov	r1, r2
 802691e:	4618      	mov	r0, r3
 8026920:	f000 ff4e 	bl	80277c0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8026924:	6838      	ldr	r0, [r7, #0]
 8026926:	f000 ff1c 	bl	8027762 <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 802692a:	4602      	mov	r2, r0
 802692c:	687b      	ldr	r3, [r7, #4]
 802692e:	461c      	mov	r4, r3
 8026930:	4615      	mov	r5, r2
 8026932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802693a:	e895 0003 	ldmia.w	r5, {r0, r1}
 802693e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8026942:	f107 0308 	add.w	r3, r7, #8
 8026946:	4618      	mov	r0, r3
 8026948:	f000 ff0b 	bl	8027762 <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 802694c:	4602      	mov	r2, r0
 802694e:	683b      	ldr	r3, [r7, #0]
 8026950:	461c      	mov	r4, r3
 8026952:	4615      	mov	r5, r2
 8026954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802695a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802695c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026960:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8026964:	bf00      	nop
 8026966:	3730      	adds	r7, #48	; 0x30
 8026968:	46bd      	mov	sp, r7
 802696a:	bdb0      	pop	{r4, r5, r7, pc}

0802696c <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 802696c:	b590      	push	{r4, r7, lr}
 802696e:	b08b      	sub	sp, #44	; 0x2c
 8026970:	af00      	add	r7, sp, #0
 8026972:	6078      	str	r0, [r7, #4]
 8026974:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8026976:	f107 0308 	add.w	r3, r7, #8
 802697a:	6839      	ldr	r1, [r7, #0]
 802697c:	4618      	mov	r0, r3
 802697e:	f7fc fe23 	bl	80235c8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8026982:	f107 0318 	add.w	r3, r7, #24
 8026986:	6879      	ldr	r1, [r7, #4]
 8026988:	4618      	mov	r0, r3
 802698a:	f7fc fe03 	bl	8023594 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 802698e:	687b      	ldr	r3, [r7, #4]
 8026990:	4618      	mov	r0, r3
 8026992:	f7fc fe0e 	bl	80235b2 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8026996:	4603      	mov	r3, r0
 8026998:	f107 0218 	add.w	r2, r7, #24
 802699c:	f107 0108 	add.w	r1, r7, #8
 80269a0:	6878      	ldr	r0, [r7, #4]
 80269a2:	f7fc fe2d 	bl	8023600 <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80269a6:	6878      	ldr	r0, [r7, #4]
 80269a8:	683b      	ldr	r3, [r7, #0]
 80269aa:	68db      	ldr	r3, [r3, #12]
 80269ac:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80269ae:	687b      	ldr	r3, [r7, #4]
 80269b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80269b2:	3304      	adds	r3, #4
 80269b4:	461a      	mov	r2, r3
 80269b6:	f7fc fda8 	bl	802350a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 80269ba:	687b      	ldr	r3, [r7, #4]
 80269bc:	683a      	ldr	r2, [r7, #0]
 80269be:	f103 0418 	add.w	r4, r3, #24
 80269c2:	4613      	mov	r3, r2
 80269c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80269c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80269ca:	bf00      	nop
 80269cc:	372c      	adds	r7, #44	; 0x2c
 80269ce:	46bd      	mov	sp, r7
 80269d0:	bd90      	pop	{r4, r7, pc}

080269d2 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80269d2:	b580      	push	{r7, lr}
 80269d4:	b084      	sub	sp, #16
 80269d6:	af00      	add	r7, sp, #0
 80269d8:	60f8      	str	r0, [r7, #12]
 80269da:	60b9      	str	r1, [r7, #8]
 80269dc:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80269de:	68b8      	ldr	r0, [r7, #8]
 80269e0:	f000 ff0d 	bl	80277fe <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>
 80269e4:	bf00      	nop
 80269e6:	3710      	adds	r7, #16
 80269e8:	46bd      	mov	sp, r7
 80269ea:	bd80      	pop	{r7, pc}

080269ec <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80269ec:	b5b0      	push	{r4, r5, r7, lr}
 80269ee:	b08c      	sub	sp, #48	; 0x30
 80269f0:	af00      	add	r7, sp, #0
 80269f2:	6078      	str	r0, [r7, #4]
 80269f4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80269f6:	6878      	ldr	r0, [r7, #4]
 80269f8:	f000 ff0c 	bl	8027814 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80269fc:	4602      	mov	r2, r0
 80269fe:	f107 0308 	add.w	r3, r7, #8
 8026a02:	4611      	mov	r1, r2
 8026a04:	4618      	mov	r0, r3
 8026a06:	f000 ff34 	bl	8027872 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8026a0a:	6838      	ldr	r0, [r7, #0]
 8026a0c:	f000 ff02 	bl	8027814 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8026a10:	4602      	mov	r2, r0
 8026a12:	687b      	ldr	r3, [r7, #4]
 8026a14:	461c      	mov	r4, r3
 8026a16:	4615      	mov	r5, r2
 8026a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026a20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026a24:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8026a28:	f107 0308 	add.w	r3, r7, #8
 8026a2c:	4618      	mov	r0, r3
 8026a2e:	f000 fef1 	bl	8027814 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8026a32:	4602      	mov	r2, r0
 8026a34:	683b      	ldr	r3, [r7, #0]
 8026a36:	461c      	mov	r4, r3
 8026a38:	4615      	mov	r5, r2
 8026a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026a42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026a46:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8026a4a:	bf00      	nop
 8026a4c:	3730      	adds	r7, #48	; 0x30
 8026a4e:	46bd      	mov	sp, r7
 8026a50:	bdb0      	pop	{r4, r5, r7, pc}

08026a52 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8026a52:	b590      	push	{r4, r7, lr}
 8026a54:	b08b      	sub	sp, #44	; 0x2c
 8026a56:	af00      	add	r7, sp, #0
 8026a58:	6078      	str	r0, [r7, #4]
 8026a5a:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8026a5c:	f107 0308 	add.w	r3, r7, #8
 8026a60:	6839      	ldr	r1, [r7, #0]
 8026a62:	4618      	mov	r0, r3
 8026a64:	f7fc fe53 	bl	802370e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8026a68:	f107 0318 	add.w	r3, r7, #24
 8026a6c:	6879      	ldr	r1, [r7, #4]
 8026a6e:	4618      	mov	r0, r3
 8026a70:	f7fc fe33 	bl	80236da <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 8026a74:	687b      	ldr	r3, [r7, #4]
 8026a76:	4618      	mov	r0, r3
 8026a78:	f7fc fe3e 	bl	80236f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8026a7c:	4603      	mov	r3, r0
 8026a7e:	f107 0218 	add.w	r2, r7, #24
 8026a82:	f107 0108 	add.w	r1, r7, #8
 8026a86:	6878      	ldr	r0, [r7, #4]
 8026a88:	f7fc fe5d 	bl	8023746 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8026a8c:	6878      	ldr	r0, [r7, #4]
 8026a8e:	683b      	ldr	r3, [r7, #0]
 8026a90:	68db      	ldr	r3, [r3, #12]
 8026a92:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8026a94:	687b      	ldr	r3, [r7, #4]
 8026a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8026a98:	3304      	adds	r3, #4
 8026a9a:	461a      	mov	r2, r3
 8026a9c:	f7fd ff5c 	bl	8024958 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8026aa0:	687b      	ldr	r3, [r7, #4]
 8026aa2:	683a      	ldr	r2, [r7, #0]
 8026aa4:	f103 0418 	add.w	r4, r3, #24
 8026aa8:	4613      	mov	r3, r2
 8026aaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8026ab0:	bf00      	nop
 8026ab2:	372c      	adds	r7, #44	; 0x2c
 8026ab4:	46bd      	mov	sp, r7
 8026ab6:	bd90      	pop	{r4, r7, pc}

08026ab8 <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8026ab8:	b580      	push	{r7, lr}
 8026aba:	b084      	sub	sp, #16
 8026abc:	af00      	add	r7, sp, #0
 8026abe:	60f8      	str	r0, [r7, #12]
 8026ac0:	60b9      	str	r1, [r7, #8]
 8026ac2:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8026ac4:	68b8      	ldr	r0, [r7, #8]
 8026ac6:	f000 fef3 	bl	80278b0 <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>
 8026aca:	bf00      	nop
 8026acc:	3710      	adds	r7, #16
 8026ace:	46bd      	mov	sp, r7
 8026ad0:	bd80      	pop	{r7, pc}

08026ad2 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8026ad2:	b5b0      	push	{r4, r5, r7, lr}
 8026ad4:	b08c      	sub	sp, #48	; 0x30
 8026ad6:	af00      	add	r7, sp, #0
 8026ad8:	6078      	str	r0, [r7, #4]
 8026ada:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8026adc:	6878      	ldr	r0, [r7, #4]
 8026ade:	f000 fef2 	bl	80278c6 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8026ae2:	4602      	mov	r2, r0
 8026ae4:	f107 0308 	add.w	r3, r7, #8
 8026ae8:	4611      	mov	r1, r2
 8026aea:	4618      	mov	r0, r3
 8026aec:	f000 ff1a 	bl	8027924 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>
      __a = _GLIBCXX_MOVE(__b);
 8026af0:	6838      	ldr	r0, [r7, #0]
 8026af2:	f000 fee8 	bl	80278c6 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8026af6:	4602      	mov	r2, r0
 8026af8:	687b      	ldr	r3, [r7, #4]
 8026afa:	461c      	mov	r4, r3
 8026afc:	4615      	mov	r5, r2
 8026afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026b06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026b0a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8026b0e:	f107 0308 	add.w	r3, r7, #8
 8026b12:	4618      	mov	r0, r3
 8026b14:	f000 fed7 	bl	80278c6 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8026b18:	4602      	mov	r2, r0
 8026b1a:	683b      	ldr	r3, [r7, #0]
 8026b1c:	461c      	mov	r4, r3
 8026b1e:	4615      	mov	r5, r2
 8026b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026b28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026b2c:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8026b30:	bf00      	nop
 8026b32:	3730      	adds	r7, #48	; 0x30
 8026b34:	46bd      	mov	sp, r7
 8026b36:	bdb0      	pop	{r4, r5, r7, pc}

08026b38 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8026b38:	b580      	push	{r7, lr}
 8026b3a:	b084      	sub	sp, #16
 8026b3c:	af00      	add	r7, sp, #0
 8026b3e:	60f8      	str	r0, [r7, #12]
 8026b40:	60b9      	str	r1, [r7, #8]
 8026b42:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8026b44:	68b8      	ldr	r0, [r7, #8]
 8026b46:	f000 ff0c 	bl	8027962 <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>
 8026b4a:	bf00      	nop
 8026b4c:	3710      	adds	r7, #16
 8026b4e:	46bd      	mov	sp, r7
 8026b50:	bd80      	pop	{r7, pc}

08026b52 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026b52:	b580      	push	{r7, lr}
 8026b54:	b084      	sub	sp, #16
 8026b56:	af00      	add	r7, sp, #0
 8026b58:	60f8      	str	r0, [r7, #12]
 8026b5a:	60b9      	str	r1, [r7, #8]
 8026b5c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026b5e:	68f8      	ldr	r0, [r7, #12]
 8026b60:	f000 ff0a 	bl	8027978 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>
 8026b64:	4602      	mov	r2, r0
 8026b66:	68bb      	ldr	r3, [r7, #8]
 8026b68:	4293      	cmp	r3, r2
 8026b6a:	bf8c      	ite	hi
 8026b6c:	2301      	movhi	r3, #1
 8026b6e:	2300      	movls	r3, #0
 8026b70:	b2db      	uxtb	r3, r3
 8026b72:	2b00      	cmp	r3, #0
 8026b74:	d001      	beq.n	8026b7a <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026b76:	f016 fc6e 	bl	803d456 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026b7a:	68bb      	ldr	r3, [r7, #8]
 8026b7c:	009b      	lsls	r3, r3, #2
 8026b7e:	4618      	mov	r0, r3
 8026b80:	f016 fc58 	bl	803d434 <_Znwj>
 8026b84:	4603      	mov	r3, r0
      }
 8026b86:	4618      	mov	r0, r3
 8026b88:	3710      	adds	r7, #16
 8026b8a:	46bd      	mov	sp, r7
 8026b8c:	bd80      	pop	{r7, pc}

08026b8e <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8026b8e:	b580      	push	{r7, lr}
 8026b90:	b084      	sub	sp, #16
 8026b92:	af00      	add	r7, sp, #0
 8026b94:	60f8      	str	r0, [r7, #12]
 8026b96:	60b9      	str	r1, [r7, #8]
 8026b98:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8026b9a:	687a      	ldr	r2, [r7, #4]
 8026b9c:	4613      	mov	r3, r2
 8026b9e:	009b      	lsls	r3, r3, #2
 8026ba0:	4413      	add	r3, r2
 8026ba2:	009b      	lsls	r3, r3, #2
 8026ba4:	4619      	mov	r1, r3
 8026ba6:	68b8      	ldr	r0, [r7, #8]
 8026ba8:	f016 fc42 	bl	803d430 <_ZdlPvj>
      }
 8026bac:	bf00      	nop
 8026bae:	3710      	adds	r7, #16
 8026bb0:	46bd      	mov	sp, r7
 8026bb2:	bd80      	pop	{r7, pc}

08026bb4 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026bb4:	b480      	push	{r7}
 8026bb6:	b083      	sub	sp, #12
 8026bb8:	af00      	add	r7, sp, #0
 8026bba:	6078      	str	r0, [r7, #4]
 8026bbc:	687b      	ldr	r3, [r7, #4]
 8026bbe:	4618      	mov	r0, r3
 8026bc0:	370c      	adds	r7, #12
 8026bc2:	46bd      	mov	sp, r7
 8026bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bc8:	4770      	bx	lr

08026bca <_ZSt8_DestroyIP7RequestEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8026bca:	b580      	push	{r7, lr}
 8026bcc:	b082      	sub	sp, #8
 8026bce:	af00      	add	r7, sp, #0
 8026bd0:	6078      	str	r0, [r7, #4]
 8026bd2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8026bd4:	6839      	ldr	r1, [r7, #0]
 8026bd6:	6878      	ldr	r0, [r7, #4]
 8026bd8:	f000 feda 	bl	8027990 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>
    }
 8026bdc:	bf00      	nop
 8026bde:	3708      	adds	r7, #8
 8026be0:	46bd      	mov	sp, r7
 8026be2:	bd80      	pop	{r7, pc}

08026be4 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>:
 8026be4:	b480      	push	{r7}
 8026be6:	b083      	sub	sp, #12
 8026be8:	af00      	add	r7, sp, #0
 8026bea:	6078      	str	r0, [r7, #4]
 8026bec:	687b      	ldr	r3, [r7, #4]
 8026bee:	4618      	mov	r0, r3
 8026bf0:	370c      	adds	r7, #12
 8026bf2:	46bd      	mov	sp, r7
 8026bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bf8:	4770      	bx	lr

08026bfa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8026bfa:	b480      	push	{r7}
 8026bfc:	b083      	sub	sp, #12
 8026bfe:	af00      	add	r7, sp, #0
 8026c00:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8026c02:	687b      	ldr	r3, [r7, #4]
 8026c04:	2200      	movs	r2, #0
 8026c06:	601a      	str	r2, [r3, #0]
 8026c08:	687b      	ldr	r3, [r7, #4]
 8026c0a:	2200      	movs	r2, #0
 8026c0c:	605a      	str	r2, [r3, #4]
 8026c0e:	687b      	ldr	r3, [r7, #4]
 8026c10:	2200      	movs	r2, #0
 8026c12:	609a      	str	r2, [r3, #8]
 8026c14:	687b      	ldr	r3, [r7, #4]
 8026c16:	2200      	movs	r2, #0
 8026c18:	60da      	str	r2, [r3, #12]
 8026c1a:	687b      	ldr	r3, [r7, #4]
 8026c1c:	4618      	mov	r0, r3
 8026c1e:	370c      	adds	r7, #12
 8026c20:	46bd      	mov	sp, r7
 8026c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c26:	4770      	bx	lr

08026c28 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8026c28:	b580      	push	{r7, lr}
 8026c2a:	b082      	sub	sp, #8
 8026c2c:	af00      	add	r7, sp, #0
 8026c2e:	6078      	str	r0, [r7, #4]
 8026c30:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8026c32:	2200      	movs	r2, #0
 8026c34:	6839      	ldr	r1, [r7, #0]
 8026c36:	6878      	ldr	r0, [r7, #4]
 8026c38:	f000 fec2 	bl	80279c0 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>
 8026c3c:	4603      	mov	r3, r0
 8026c3e:	4618      	mov	r0, r3
 8026c40:	3708      	adds	r7, #8
 8026c42:	46bd      	mov	sp, r7
 8026c44:	bd80      	pop	{r7, pc}

08026c46 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8026c46:	b580      	push	{r7, lr}
 8026c48:	b084      	sub	sp, #16
 8026c4a:	af00      	add	r7, sp, #0
 8026c4c:	60f8      	str	r0, [r7, #12]
 8026c4e:	60b9      	str	r1, [r7, #8]
 8026c50:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8026c52:	687a      	ldr	r2, [r7, #4]
 8026c54:	68b9      	ldr	r1, [r7, #8]
 8026c56:	68f8      	ldr	r0, [r7, #12]
 8026c58:	f000 fed0 	bl	80279fc <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>
 8026c5c:	bf00      	nop
 8026c5e:	3710      	adds	r7, #16
 8026c60:	46bd      	mov	sp, r7
 8026c62:	bd80      	pop	{r7, pc}

08026c64 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8026c64:	b480      	push	{r7}
 8026c66:	b083      	sub	sp, #12
 8026c68:	af00      	add	r7, sp, #0
 8026c6a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8026c6c:	687b      	ldr	r3, [r7, #4]
 8026c6e:	4618      	mov	r0, r3
 8026c70:	370c      	adds	r7, #12
 8026c72:	46bd      	mov	sp, r7
 8026c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c78:	4770      	bx	lr

08026c7a <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>:
 8026c7a:	b580      	push	{r7, lr}
 8026c7c:	b082      	sub	sp, #8
 8026c7e:	af00      	add	r7, sp, #0
 8026c80:	6078      	str	r0, [r7, #4]
 8026c82:	6039      	str	r1, [r7, #0]
 8026c84:	6878      	ldr	r0, [r7, #4]
 8026c86:	f000 fec9 	bl	8027a1c <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>
 8026c8a:	687b      	ldr	r3, [r7, #4]
 8026c8c:	4618      	mov	r0, r3
 8026c8e:	3708      	adds	r7, #8
 8026c90:	46bd      	mov	sp, r7
 8026c92:	bd80      	pop	{r7, pc}

08026c94 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026c94:	b480      	push	{r7}
 8026c96:	b083      	sub	sp, #12
 8026c98:	af00      	add	r7, sp, #0
 8026c9a:	6078      	str	r0, [r7, #4]
 8026c9c:	687b      	ldr	r3, [r7, #4]
 8026c9e:	4618      	mov	r0, r3
 8026ca0:	370c      	adds	r7, #12
 8026ca2:	46bd      	mov	sp, r7
 8026ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ca8:	4770      	bx	lr

08026caa <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8026caa:	b580      	push	{r7, lr}
 8026cac:	b084      	sub	sp, #16
 8026cae:	af00      	add	r7, sp, #0
 8026cb0:	60f8      	str	r0, [r7, #12]
 8026cb2:	60b9      	str	r1, [r7, #8]
 8026cb4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8026cb6:	687b      	ldr	r3, [r7, #4]
 8026cb8:	009b      	lsls	r3, r3, #2
 8026cba:	4619      	mov	r1, r3
 8026cbc:	68b8      	ldr	r0, [r7, #8]
 8026cbe:	f016 fbb7 	bl	803d430 <_ZdlPvj>
      }
 8026cc2:	bf00      	nop
 8026cc4:	3710      	adds	r7, #16
 8026cc6:	46bd      	mov	sp, r7
 8026cc8:	bd80      	pop	{r7, pc}

08026cca <_ZSt8_DestroyIP8ResponceEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8026cca:	b580      	push	{r7, lr}
 8026ccc:	b082      	sub	sp, #8
 8026cce:	af00      	add	r7, sp, #0
 8026cd0:	6078      	str	r0, [r7, #4]
 8026cd2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8026cd4:	6839      	ldr	r1, [r7, #0]
 8026cd6:	6878      	ldr	r0, [r7, #4]
 8026cd8:	f000 feab 	bl	8027a32 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>
    }
 8026cdc:	bf00      	nop
 8026cde:	3708      	adds	r7, #8
 8026ce0:	46bd      	mov	sp, r7
 8026ce2:	bd80      	pop	{r7, pc}

08026ce4 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8026ce4:	b580      	push	{r7, lr}
 8026ce6:	b082      	sub	sp, #8
 8026ce8:	af00      	add	r7, sp, #0
 8026cea:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8026cec:	6878      	ldr	r0, [r7, #4]
 8026cee:	f000 feb8 	bl	8027a62 <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>
 8026cf2:	4603      	mov	r3, r0
      }
 8026cf4:	4618      	mov	r0, r3
 8026cf6:	3708      	adds	r7, #8
 8026cf8:	46bd      	mov	sp, r7
 8026cfa:	bd80      	pop	{r7, pc}

08026cfc <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8026cfc:	b480      	push	{r7}
 8026cfe:	b083      	sub	sp, #12
 8026d00:	af00      	add	r7, sp, #0
 8026d02:	6078      	str	r0, [r7, #4]
 8026d04:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8026d06:	683b      	ldr	r3, [r7, #0]
 8026d08:	681a      	ldr	r2, [r3, #0]
 8026d0a:	687b      	ldr	r3, [r7, #4]
 8026d0c:	681b      	ldr	r3, [r3, #0]
 8026d0e:	429a      	cmp	r2, r3
 8026d10:	d201      	bcs.n	8026d16 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8026d12:	683b      	ldr	r3, [r7, #0]
 8026d14:	e000      	b.n	8026d18 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8026d16:	687b      	ldr	r3, [r7, #4]
    }
 8026d18:	4618      	mov	r0, r3
 8026d1a:	370c      	adds	r7, #12
 8026d1c:	46bd      	mov	sp, r7
 8026d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d22:	4770      	bx	lr

08026d24 <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8026d24:	b590      	push	{r4, r7, lr}
 8026d26:	b085      	sub	sp, #20
 8026d28:	af00      	add	r7, sp, #0
 8026d2a:	60f8      	str	r0, [r7, #12]
 8026d2c:	60b9      	str	r1, [r7, #8]
 8026d2e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026d30:	68f8      	ldr	r0, [r7, #12]
 8026d32:	f000 fea2 	bl	8027a7a <_ZSt12__miter_baseIPP7RequestET_S3_>
 8026d36:	4604      	mov	r4, r0
 8026d38:	68b8      	ldr	r0, [r7, #8]
 8026d3a:	f000 fe9e 	bl	8027a7a <_ZSt12__miter_baseIPP7RequestET_S3_>
 8026d3e:	4603      	mov	r3, r0
 8026d40:	687a      	ldr	r2, [r7, #4]
 8026d42:	4619      	mov	r1, r3
 8026d44:	4620      	mov	r0, r4
 8026d46:	f000 fea3 	bl	8027a90 <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8026d4a:	4603      	mov	r3, r0
    }
 8026d4c:	4618      	mov	r0, r3
 8026d4e:	3714      	adds	r7, #20
 8026d50:	46bd      	mov	sp, r7
 8026d52:	bd90      	pop	{r4, r7, pc}

08026d54 <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026d54:	b590      	push	{r4, r7, lr}
 8026d56:	b085      	sub	sp, #20
 8026d58:	af00      	add	r7, sp, #0
 8026d5a:	60f8      	str	r0, [r7, #12]
 8026d5c:	60b9      	str	r1, [r7, #8]
 8026d5e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026d60:	68f8      	ldr	r0, [r7, #12]
 8026d62:	f000 fe8a 	bl	8027a7a <_ZSt12__miter_baseIPP7RequestET_S3_>
 8026d66:	4604      	mov	r4, r0
 8026d68:	68b8      	ldr	r0, [r7, #8]
 8026d6a:	f000 fe86 	bl	8027a7a <_ZSt12__miter_baseIPP7RequestET_S3_>
 8026d6e:	4603      	mov	r3, r0
 8026d70:	687a      	ldr	r2, [r7, #4]
 8026d72:	4619      	mov	r1, r3
 8026d74:	4620      	mov	r0, r4
 8026d76:	f000 feae 	bl	8027ad6 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8026d7a:	4603      	mov	r3, r0
    }
 8026d7c:	4618      	mov	r0, r3
 8026d7e:	3714      	adds	r7, #20
 8026d80:	46bd      	mov	sp, r7
 8026d82:	bd90      	pop	{r4, r7, pc}

08026d84 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026d84:	b580      	push	{r7, lr}
 8026d86:	b084      	sub	sp, #16
 8026d88:	af00      	add	r7, sp, #0
 8026d8a:	60f8      	str	r0, [r7, #12]
 8026d8c:	60b9      	str	r1, [r7, #8]
 8026d8e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026d90:	68f8      	ldr	r0, [r7, #12]
 8026d92:	f000 fec3 	bl	8027b1c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 8026d96:	4602      	mov	r2, r0
 8026d98:	68bb      	ldr	r3, [r7, #8]
 8026d9a:	4293      	cmp	r3, r2
 8026d9c:	bf8c      	ite	hi
 8026d9e:	2301      	movhi	r3, #1
 8026da0:	2300      	movls	r3, #0
 8026da2:	b2db      	uxtb	r3, r3
 8026da4:	2b00      	cmp	r3, #0
 8026da6:	d001      	beq.n	8026dac <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026da8:	f016 fb55 	bl	803d456 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026dac:	68ba      	ldr	r2, [r7, #8]
 8026dae:	4613      	mov	r3, r2
 8026db0:	009b      	lsls	r3, r3, #2
 8026db2:	4413      	add	r3, r2
 8026db4:	009b      	lsls	r3, r3, #2
 8026db6:	4618      	mov	r0, r3
 8026db8:	f016 fb3c 	bl	803d434 <_Znwj>
 8026dbc:	4603      	mov	r3, r0
      }
 8026dbe:	4618      	mov	r0, r3
 8026dc0:	3710      	adds	r7, #16
 8026dc2:	46bd      	mov	sp, r7
 8026dc4:	bd80      	pop	{r7, pc}

08026dc6 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8026dc6:	b580      	push	{r7, lr}
 8026dc8:	b082      	sub	sp, #8
 8026dca:	af00      	add	r7, sp, #0
 8026dcc:	6078      	str	r0, [r7, #4]
 8026dce:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8026dd0:	6839      	ldr	r1, [r7, #0]
 8026dd2:	6878      	ldr	r0, [r7, #4]
 8026dd4:	f7fc fe40 	bl	8023a58 <_ZNSaIhEC1ERKS_>
 8026dd8:	687b      	ldr	r3, [r7, #4]
 8026dda:	4618      	mov	r0, r3
 8026ddc:	f7fc fcde 	bl	802379c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8026de0:	687b      	ldr	r3, [r7, #4]
 8026de2:	4618      	mov	r0, r3
 8026de4:	3708      	adds	r7, #8
 8026de6:	46bd      	mov	sp, r7
 8026de8:	bd80      	pop	{r7, pc}

08026dea <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8026dea:	b480      	push	{r7}
 8026dec:	b083      	sub	sp, #12
 8026dee:	af00      	add	r7, sp, #0
 8026df0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026df2:	687b      	ldr	r3, [r7, #4]
 8026df4:	4618      	mov	r0, r3
 8026df6:	370c      	adds	r7, #12
 8026df8:	46bd      	mov	sp, r7
 8026dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dfe:	4770      	bx	lr

08026e00 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8026e00:	b580      	push	{r7, lr}
 8026e02:	b084      	sub	sp, #16
 8026e04:	af00      	add	r7, sp, #0
 8026e06:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8026e08:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8026e0c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8026e0e:	6878      	ldr	r0, [r7, #4]
 8026e10:	f000 fe92 	bl	8027b38 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>
 8026e14:	4603      	mov	r3, r0
 8026e16:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8026e18:	f107 0208 	add.w	r2, r7, #8
 8026e1c:	f107 030c 	add.w	r3, r7, #12
 8026e20:	4611      	mov	r1, r2
 8026e22:	4618      	mov	r0, r3
 8026e24:	f7ff ff6a 	bl	8026cfc <_ZSt3minIjERKT_S2_S2_>
 8026e28:	4603      	mov	r3, r0
 8026e2a:	681b      	ldr	r3, [r3, #0]
      }
 8026e2c:	4618      	mov	r0, r3
 8026e2e:	3710      	adds	r7, #16
 8026e30:	46bd      	mov	sp, r7
 8026e32:	bd80      	pop	{r7, pc}

08026e34 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8026e34:	b590      	push	{r4, r7, lr}
 8026e36:	b08b      	sub	sp, #44	; 0x2c
 8026e38:	af00      	add	r7, sp, #0
 8026e3a:	60f8      	str	r0, [r7, #12]
 8026e3c:	60b9      	str	r1, [r7, #8]
 8026e3e:	4613      	mov	r3, r2
 8026e40:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8026e42:	68fb      	ldr	r3, [r7, #12]
 8026e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026e46:	68fb      	ldr	r3, [r7, #12]
 8026e48:	695b      	ldr	r3, [r3, #20]
 8026e4a:	1ad3      	subs	r3, r2, r3
 8026e4c:	109b      	asrs	r3, r3, #2
 8026e4e:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8026e50:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8026e52:	68bb      	ldr	r3, [r7, #8]
 8026e54:	6a3a      	ldr	r2, [r7, #32]
 8026e56:	4413      	add	r3, r2
 8026e58:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8026e5a:	68fb      	ldr	r3, [r7, #12]
 8026e5c:	685a      	ldr	r2, [r3, #4]
 8026e5e:	69fb      	ldr	r3, [r7, #28]
 8026e60:	005b      	lsls	r3, r3, #1
 8026e62:	429a      	cmp	r2, r3
 8026e64:	d92d      	bls.n	8026ec2 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026e66:	68fb      	ldr	r3, [r7, #12]
 8026e68:	681a      	ldr	r2, [r3, #0]
 8026e6a:	68fb      	ldr	r3, [r7, #12]
 8026e6c:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8026e6e:	69fb      	ldr	r3, [r7, #28]
 8026e70:	1acb      	subs	r3, r1, r3
 8026e72:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026e74:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8026e76:	79fb      	ldrb	r3, [r7, #7]
 8026e78:	2b00      	cmp	r3, #0
 8026e7a:	d002      	beq.n	8026e82 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8026e7c:	68bb      	ldr	r3, [r7, #8]
 8026e7e:	009b      	lsls	r3, r3, #2
 8026e80:	e000      	b.n	8026e84 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8026e82:	2300      	movs	r3, #0
 8026e84:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026e86:	4413      	add	r3, r2
 8026e88:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8026e8a:	68fb      	ldr	r3, [r7, #12]
 8026e8c:	695b      	ldr	r3, [r3, #20]
 8026e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026e90:	429a      	cmp	r2, r3
 8026e92:	d209      	bcs.n	8026ea8 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8026e94:	68fb      	ldr	r3, [r7, #12]
 8026e96:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8026e98:	68fb      	ldr	r3, [r7, #12]
 8026e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8026e9c:	3304      	adds	r3, #4
 8026e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026ea0:	4619      	mov	r1, r3
 8026ea2:	f000 fe55 	bl	8027b50 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
 8026ea6:	e048      	b.n	8026f3a <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026ea8:	68fb      	ldr	r3, [r7, #12]
 8026eaa:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8026eac:	68fb      	ldr	r3, [r7, #12]
 8026eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026eb0:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8026eb2:	6a3b      	ldr	r3, [r7, #32]
 8026eb4:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026eb8:	4413      	add	r3, r2
 8026eba:	461a      	mov	r2, r3
 8026ebc:	f000 fe60 	bl	8027b80 <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>
 8026ec0:	e03b      	b.n	8026f3a <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026ec2:	68fb      	ldr	r3, [r7, #12]
 8026ec4:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8026ec6:	68fb      	ldr	r3, [r7, #12]
 8026ec8:	3304      	adds	r3, #4
 8026eca:	f107 0208 	add.w	r2, r7, #8
 8026ece:	4611      	mov	r1, r2
 8026ed0:	4618      	mov	r0, r3
 8026ed2:	f7fd fbbe 	bl	8024652 <_ZSt3maxIjERKT_S2_S2_>
 8026ed6:	4603      	mov	r3, r0
 8026ed8:	681b      	ldr	r3, [r3, #0]
 8026eda:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026edc:	3302      	adds	r3, #2
 8026ede:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8026ee0:	68fb      	ldr	r3, [r7, #12]
 8026ee2:	69b9      	ldr	r1, [r7, #24]
 8026ee4:	4618      	mov	r0, r3
 8026ee6:	f7fe fc87 	bl	80257f8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 8026eea:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026eec:	69ba      	ldr	r2, [r7, #24]
 8026eee:	69fb      	ldr	r3, [r7, #28]
 8026ef0:	1ad3      	subs	r3, r2, r3
 8026ef2:	085b      	lsrs	r3, r3, #1
 8026ef4:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8026ef6:	79fb      	ldrb	r3, [r7, #7]
 8026ef8:	2b00      	cmp	r3, #0
 8026efa:	d002      	beq.n	8026f02 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8026efc:	68bb      	ldr	r3, [r7, #8]
 8026efe:	009b      	lsls	r3, r3, #2
 8026f00:	e000      	b.n	8026f04 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8026f02:	2300      	movs	r3, #0
 8026f04:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026f06:	697a      	ldr	r2, [r7, #20]
 8026f08:	4413      	add	r3, r2
 8026f0a:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026f0c:	68fb      	ldr	r3, [r7, #12]
 8026f0e:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8026f10:	68fb      	ldr	r3, [r7, #12]
 8026f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026f14:	3304      	adds	r3, #4
 8026f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026f18:	4619      	mov	r1, r3
 8026f1a:	f000 fe19 	bl	8027b50 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8026f1e:	68f8      	ldr	r0, [r7, #12]
 8026f20:	68fb      	ldr	r3, [r7, #12]
 8026f22:	6819      	ldr	r1, [r3, #0]
 8026f24:	68fb      	ldr	r3, [r7, #12]
 8026f26:	685b      	ldr	r3, [r3, #4]
 8026f28:	461a      	mov	r2, r3
 8026f2a:	f7fd fd2f 	bl	802498c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 8026f2e:	68fb      	ldr	r3, [r7, #12]
 8026f30:	697a      	ldr	r2, [r7, #20]
 8026f32:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8026f34:	68fb      	ldr	r3, [r7, #12]
 8026f36:	69ba      	ldr	r2, [r7, #24]
 8026f38:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8026f3a:	68fb      	ldr	r3, [r7, #12]
 8026f3c:	3308      	adds	r3, #8
 8026f3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026f40:	4618      	mov	r0, r3
 8026f42:	f7fe fc90 	bl	8025866 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8026f46:	68fb      	ldr	r3, [r7, #12]
 8026f48:	f103 0018 	add.w	r0, r3, #24
 8026f4c:	6a3a      	ldr	r2, [r7, #32]
 8026f4e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8026f52:	4413      	add	r3, r2
 8026f54:	009b      	lsls	r3, r3, #2
 8026f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026f58:	4413      	add	r3, r2
 8026f5a:	4619      	mov	r1, r3
 8026f5c:	f7fe fc83 	bl	8025866 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8026f60:	bf00      	nop
 8026f62:	372c      	adds	r7, #44	; 0x2c
 8026f64:	46bd      	mov	sp, r7
 8026f66:	bd90      	pop	{r4, r7, pc}

08026f68 <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8026f68:	b580      	push	{r7, lr}
 8026f6a:	b082      	sub	sp, #8
 8026f6c:	af00      	add	r7, sp, #0
 8026f6e:	6078      	str	r0, [r7, #4]
 8026f70:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8026f72:	2200      	movs	r2, #0
 8026f74:	6839      	ldr	r1, [r7, #0]
 8026f76:	6878      	ldr	r0, [r7, #4]
 8026f78:	f000 fe1a 	bl	8027bb0 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>
 8026f7c:	4603      	mov	r3, r0
 8026f7e:	4618      	mov	r0, r3
 8026f80:	3708      	adds	r7, #8
 8026f82:	46bd      	mov	sp, r7
 8026f84:	bd80      	pop	{r7, pc}

08026f86 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8026f86:	b580      	push	{r7, lr}
 8026f88:	b082      	sub	sp, #8
 8026f8a:	af00      	add	r7, sp, #0
 8026f8c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8026f8e:	6878      	ldr	r0, [r7, #4]
 8026f90:	f000 fe2c 	bl	8027bec <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8026f94:	4603      	mov	r3, r0
      }
 8026f96:	4618      	mov	r0, r3
 8026f98:	3708      	adds	r7, #8
 8026f9a:	46bd      	mov	sp, r7
 8026f9c:	bd80      	pop	{r7, pc}

08026f9e <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 8026f9e:	b580      	push	{r7, lr}
 8026fa0:	b084      	sub	sp, #16
 8026fa2:	af00      	add	r7, sp, #0
 8026fa4:	6078      	str	r0, [r7, #4]
 8026fa6:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8026fa8:	2300      	movs	r3, #0
 8026faa:	73fb      	strb	r3, [r7, #15]
 8026fac:	f107 030f 	add.w	r3, r7, #15
 8026fb0:	461a      	mov	r2, r3
 8026fb2:	6839      	ldr	r1, [r7, #0]
 8026fb4:	6878      	ldr	r0, [r7, #4]
 8026fb6:	f000 fe25 	bl	8027c04 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8026fba:	4603      	mov	r3, r0
	}
 8026fbc:	4618      	mov	r0, r3
 8026fbe:	3710      	adds	r7, #16
 8026fc0:	46bd      	mov	sp, r7
 8026fc2:	bd80      	pop	{r7, pc}

08026fc4 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026fc4:	b580      	push	{r7, lr}
 8026fc6:	b084      	sub	sp, #16
 8026fc8:	af00      	add	r7, sp, #0
 8026fca:	60f8      	str	r0, [r7, #12]
 8026fcc:	60b9      	str	r1, [r7, #8]
 8026fce:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026fd0:	68f8      	ldr	r0, [r7, #12]
 8026fd2:	f000 fe32 	bl	8027c3a <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8026fd6:	4602      	mov	r2, r0
 8026fd8:	68bb      	ldr	r3, [r7, #8]
 8026fda:	4293      	cmp	r3, r2
 8026fdc:	bf8c      	ite	hi
 8026fde:	2301      	movhi	r3, #1
 8026fe0:	2300      	movls	r3, #0
 8026fe2:	b2db      	uxtb	r3, r3
 8026fe4:	2b00      	cmp	r3, #0
 8026fe6:	d001      	beq.n	8026fec <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026fe8:	f016 fa35 	bl	803d456 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026fec:	68b8      	ldr	r0, [r7, #8]
 8026fee:	f016 fa21 	bl	803d434 <_Znwj>
 8026ff2:	4603      	mov	r3, r0
      }
 8026ff4:	4618      	mov	r0, r3
 8026ff6:	3710      	adds	r7, #16
 8026ff8:	46bd      	mov	sp, r7
 8026ffa:	bd80      	pop	{r7, pc}

08026ffc <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8026ffc:	b5b0      	push	{r4, r5, r7, lr}
 8026ffe:	b084      	sub	sp, #16
 8027000:	af00      	add	r7, sp, #0
 8027002:	60f8      	str	r0, [r7, #12]
 8027004:	60b9      	str	r1, [r7, #8]
 8027006:	607a      	str	r2, [r7, #4]
 8027008:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 802700a:	68f8      	ldr	r0, [r7, #12]
 802700c:	f7fe fed3 	bl	8025db6 <_ZSt12__niter_baseIPhET_S1_>
 8027010:	4604      	mov	r4, r0
 8027012:	68b8      	ldr	r0, [r7, #8]
 8027014:	f7fe fecf 	bl	8025db6 <_ZSt12__niter_baseIPhET_S1_>
 8027018:	4605      	mov	r5, r0
 802701a:	6878      	ldr	r0, [r7, #4]
 802701c:	f7fe fecb 	bl	8025db6 <_ZSt12__niter_baseIPhET_S1_>
 8027020:	4602      	mov	r2, r0
 8027022:	683b      	ldr	r3, [r7, #0]
 8027024:	4629      	mov	r1, r5
 8027026:	4620      	mov	r0, r4
 8027028:	f000 fe13 	bl	8027c52 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 802702c:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 802702e:	4618      	mov	r0, r3
 8027030:	3710      	adds	r7, #16
 8027032:	46bd      	mov	sp, r7
 8027034:	bdb0      	pop	{r4, r5, r7, pc}

08027036 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8027036:	b580      	push	{r7, lr}
 8027038:	b082      	sub	sp, #8
 802703a:	af00      	add	r7, sp, #0
 802703c:	6078      	str	r0, [r7, #4]
 802703e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8027040:	463b      	mov	r3, r7
 8027042:	4618      	mov	r0, r3
 8027044:	f000 fe20 	bl	8027c88 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 8027048:	4603      	mov	r3, r0
 802704a:	681a      	ldr	r2, [r3, #0]
 802704c:	687b      	ldr	r3, [r7, #4]
 802704e:	601a      	str	r2, [r3, #0]
 8027050:	687b      	ldr	r3, [r7, #4]
 8027052:	4618      	mov	r0, r3
 8027054:	3708      	adds	r7, #8
 8027056:	46bd      	mov	sp, r7
 8027058:	bd80      	pop	{r7, pc}

0802705a <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 802705a:	b580      	push	{r7, lr}
 802705c:	b086      	sub	sp, #24
 802705e:	af00      	add	r7, sp, #0
 8027060:	60f8      	str	r0, [r7, #12]
 8027062:	60b9      	str	r1, [r7, #8]
 8027064:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8027066:	2301      	movs	r3, #1
 8027068:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 802706a:	687a      	ldr	r2, [r7, #4]
 802706c:	68b9      	ldr	r1, [r7, #8]
 802706e:	68f8      	ldr	r0, [r7, #12]
 8027070:	f000 fe15 	bl	8027c9e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 8027074:	4603      	mov	r3, r0
    }
 8027076:	4618      	mov	r0, r3
 8027078:	3718      	adds	r7, #24
 802707a:	46bd      	mov	sp, r7
 802707c:	bd80      	pop	{r7, pc}

0802707e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 802707e:	b580      	push	{r7, lr}
 8027080:	b084      	sub	sp, #16
 8027082:	af00      	add	r7, sp, #0
 8027084:	60f8      	str	r0, [r7, #12]
 8027086:	60b9      	str	r1, [r7, #8]
 8027088:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 802708a:	687a      	ldr	r2, [r7, #4]
 802708c:	68b9      	ldr	r1, [r7, #8]
 802708e:	68f8      	ldr	r0, [r7, #12]
 8027090:	f000 fe15 	bl	8027cbe <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8027094:	4603      	mov	r3, r0
 8027096:	4618      	mov	r0, r3
 8027098:	3710      	adds	r7, #16
 802709a:	46bd      	mov	sp, r7
 802709c:	bd80      	pop	{r7, pc}

0802709e <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 802709e:	b480      	push	{r7}
 80270a0:	b083      	sub	sp, #12
 80270a2:	af00      	add	r7, sp, #0
 80270a4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80270a6:	687b      	ldr	r3, [r7, #4]
 80270a8:	4618      	mov	r0, r3
 80270aa:	370c      	adds	r7, #12
 80270ac:	46bd      	mov	sp, r7
 80270ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270b2:	4770      	bx	lr

080270b4 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80270b4:	b480      	push	{r7}
 80270b6:	b083      	sub	sp, #12
 80270b8:	af00      	add	r7, sp, #0
 80270ba:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80270bc:	687b      	ldr	r3, [r7, #4]
 80270be:	4618      	mov	r0, r3
 80270c0:	370c      	adds	r7, #12
 80270c2:	46bd      	mov	sp, r7
 80270c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270c8:	4770      	bx	lr

080270ca <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80270ca:	b580      	push	{r7, lr}
 80270cc:	b084      	sub	sp, #16
 80270ce:	af00      	add	r7, sp, #0
 80270d0:	60f8      	str	r0, [r7, #12]
 80270d2:	60b9      	str	r1, [r7, #8]
 80270d4:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80270d6:	687a      	ldr	r2, [r7, #4]
 80270d8:	68b9      	ldr	r1, [r7, #8]
 80270da:	68f8      	ldr	r0, [r7, #12]
 80270dc:	f000 fe07 	bl	8027cee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80270e0:	4603      	mov	r3, r0
    }
 80270e2:	4618      	mov	r0, r3
 80270e4:	3710      	adds	r7, #16
 80270e6:	46bd      	mov	sp, r7
 80270e8:	bd80      	pop	{r7, pc}

080270ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80270ea:	b580      	push	{r7, lr}
 80270ec:	b084      	sub	sp, #16
 80270ee:	af00      	add	r7, sp, #0
 80270f0:	6078      	str	r0, [r7, #4]
 80270f2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80270f4:	687b      	ldr	r3, [r7, #4]
 80270f6:	681a      	ldr	r2, [r3, #0]
 80270f8:	683b      	ldr	r3, [r7, #0]
 80270fa:	4413      	add	r3, r2
 80270fc:	60fb      	str	r3, [r7, #12]
 80270fe:	f107 020c 	add.w	r2, r7, #12
 8027102:	f107 0308 	add.w	r3, r7, #8
 8027106:	4611      	mov	r1, r2
 8027108:	4618      	mov	r0, r3
 802710a:	f7fd ff19 	bl	8024f40 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 802710e:	68bb      	ldr	r3, [r7, #8]
 8027110:	4618      	mov	r0, r3
 8027112:	3710      	adds	r7, #16
 8027114:	46bd      	mov	sp, r7
 8027116:	bd80      	pop	{r7, pc}

08027118 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8027118:	b580      	push	{r7, lr}
 802711a:	b084      	sub	sp, #16
 802711c:	af00      	add	r7, sp, #0
 802711e:	60f8      	str	r0, [r7, #12]
 8027120:	60b9      	str	r1, [r7, #8]
 8027122:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8027124:	687a      	ldr	r2, [r7, #4]
 8027126:	68b9      	ldr	r1, [r7, #8]
 8027128:	68f8      	ldr	r0, [r7, #12]
 802712a:	f000 fde0 	bl	8027cee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 802712e:	4603      	mov	r3, r0
    }
 8027130:	4618      	mov	r0, r3
 8027132:	3710      	adds	r7, #16
 8027134:	46bd      	mov	sp, r7
 8027136:	bd80      	pop	{r7, pc}

08027138 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8027138:	b480      	push	{r7}
 802713a:	b083      	sub	sp, #12
 802713c:	af00      	add	r7, sp, #0
 802713e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027140:	687b      	ldr	r3, [r7, #4]
 8027142:	4618      	mov	r0, r3
 8027144:	370c      	adds	r7, #12
 8027146:	46bd      	mov	sp, r7
 8027148:	f85d 7b04 	ldr.w	r7, [sp], #4
 802714c:	4770      	bx	lr

0802714e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __niter_base(_Iterator __it)
 802714e:	b580      	push	{r7, lr}
 8027150:	b082      	sub	sp, #8
 8027152:	af00      	add	r7, sp, #0
 8027154:	6078      	str	r0, [r7, #4]
 8027156:	6039      	str	r1, [r7, #0]
    { return __it; }
 8027158:	6839      	ldr	r1, [r7, #0]
 802715a:	6878      	ldr	r0, [r7, #4]
 802715c:	f7fd f99c 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027160:	6878      	ldr	r0, [r7, #4]
 8027162:	3708      	adds	r7, #8
 8027164:	46bd      	mov	sp, r7
 8027166:	bd80      	pop	{r7, pc}

08027168 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8027168:	b480      	push	{r7}
 802716a:	b083      	sub	sp, #12
 802716c:	af00      	add	r7, sp, #0
 802716e:	6078      	str	r0, [r7, #4]
 8027170:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8027172:	683b      	ldr	r3, [r7, #0]
 8027174:	681a      	ldr	r2, [r3, #0]
 8027176:	687b      	ldr	r3, [r7, #4]
 8027178:	681b      	ldr	r3, [r3, #0]
 802717a:	429a      	cmp	r2, r3
 802717c:	da01      	bge.n	8027182 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 802717e:	683b      	ldr	r3, [r7, #0]
 8027180:	e000      	b.n	8027184 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8027182:	687b      	ldr	r3, [r7, #4]
    }
 8027184:	4618      	mov	r0, r3
 8027186:	370c      	adds	r7, #12
 8027188:	46bd      	mov	sp, r7
 802718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802718e:	4770      	bx	lr

08027190 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8027190:	b580      	push	{r7, lr}
 8027192:	b088      	sub	sp, #32
 8027194:	af00      	add	r7, sp, #0
 8027196:	60f8      	str	r0, [r7, #12]
 8027198:	60b9      	str	r1, [r7, #8]
 802719a:	607a      	str	r2, [r7, #4]
 802719c:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 802719e:	687a      	ldr	r2, [r7, #4]
 80271a0:	68bb      	ldr	r3, [r7, #8]
 80271a2:	1ad3      	subs	r3, r2, r3
 80271a4:	109b      	asrs	r3, r3, #2
 80271a6:	4a22      	ldr	r2, [pc, #136]	; (8027230 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 80271a8:	fb02 f303 	mul.w	r3, r2, r3
 80271ac:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80271ae:	697b      	ldr	r3, [r7, #20]
 80271b0:	2b00      	cmp	r3, #0
 80271b2:	dd34      	ble.n	802721e <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 80271b4:	683b      	ldr	r3, [r7, #0]
 80271b6:	689a      	ldr	r2, [r3, #8]
 80271b8:	683b      	ldr	r3, [r7, #0]
 80271ba:	681b      	ldr	r3, [r3, #0]
 80271bc:	1ad3      	subs	r3, r2, r3
 80271be:	109b      	asrs	r3, r3, #2
 80271c0:	4a1b      	ldr	r2, [pc, #108]	; (8027230 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 80271c2:	fb02 f303 	mul.w	r3, r2, r3
 80271c6:	61bb      	str	r3, [r7, #24]
 80271c8:	f107 0218 	add.w	r2, r7, #24
 80271cc:	f107 0314 	add.w	r3, r7, #20
 80271d0:	4611      	mov	r1, r2
 80271d2:	4618      	mov	r0, r3
 80271d4:	f7ff ffc8 	bl	8027168 <_ZSt3minIiERKT_S2_S2_>
 80271d8:	4603      	mov	r3, r0
	  const difference_type __clen
 80271da:	681b      	ldr	r3, [r3, #0]
 80271dc:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 80271de:	69fa      	ldr	r2, [r7, #28]
 80271e0:	4613      	mov	r3, r2
 80271e2:	009b      	lsls	r3, r3, #2
 80271e4:	4413      	add	r3, r2
 80271e6:	009b      	lsls	r3, r3, #2
 80271e8:	461a      	mov	r2, r3
 80271ea:	68bb      	ldr	r3, [r7, #8]
 80271ec:	1899      	adds	r1, r3, r2
 80271ee:	683b      	ldr	r3, [r7, #0]
 80271f0:	681b      	ldr	r3, [r3, #0]
 80271f2:	461a      	mov	r2, r3
 80271f4:	68b8      	ldr	r0, [r7, #8]
 80271f6:	f000 fd94 	bl	8027d22 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
				       __result._M_cur);

	  __first += __clen;
 80271fa:	69fa      	ldr	r2, [r7, #28]
 80271fc:	4613      	mov	r3, r2
 80271fe:	009b      	lsls	r3, r3, #2
 8027200:	4413      	add	r3, r2
 8027202:	009b      	lsls	r3, r3, #2
 8027204:	461a      	mov	r2, r3
 8027206:	68bb      	ldr	r3, [r7, #8]
 8027208:	4413      	add	r3, r2
 802720a:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 802720c:	69f9      	ldr	r1, [r7, #28]
 802720e:	6838      	ldr	r0, [r7, #0]
 8027210:	f7ff fab4 	bl	802677c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8027214:	697a      	ldr	r2, [r7, #20]
 8027216:	69fb      	ldr	r3, [r7, #28]
 8027218:	1ad3      	subs	r3, r2, r3
 802721a:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802721c:	e7c7      	b.n	80271ae <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x1e>
	}

      return __result;
 802721e:	6839      	ldr	r1, [r7, #0]
 8027220:	68f8      	ldr	r0, [r7, #12]
 8027222:	f7fd f939 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8027226:	68f8      	ldr	r0, [r7, #12]
 8027228:	3720      	adds	r7, #32
 802722a:	46bd      	mov	sp, r7
 802722c:	bd80      	pop	{r7, pc}
 802722e:	bf00      	nop
 8027230:	cccccccd 	.word	0xcccccccd

08027234 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8027234:	b580      	push	{r7, lr}
 8027236:	b084      	sub	sp, #16
 8027238:	af00      	add	r7, sp, #0
 802723a:	60f8      	str	r0, [r7, #12]
 802723c:	60b9      	str	r1, [r7, #8]
 802723e:	607a      	str	r2, [r7, #4]
    { return __res; }
 8027240:	6879      	ldr	r1, [r7, #4]
 8027242:	68f8      	ldr	r0, [r7, #12]
 8027244:	f7fd f928 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027248:	68f8      	ldr	r0, [r7, #12]
 802724a:	3710      	adds	r7, #16
 802724c:	46bd      	mov	sp, r7
 802724e:	bd80      	pop	{r7, pc}

08027250 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8027250:	b590      	push	{r4, r7, lr}
 8027252:	b085      	sub	sp, #20
 8027254:	af00      	add	r7, sp, #0
 8027256:	6078      	str	r0, [r7, #4]
 8027258:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 802725a:	6878      	ldr	r0, [r7, #4]
 802725c:	f7fe f857 	bl	802530e <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8027260:	4604      	mov	r4, r0
 8027262:	6878      	ldr	r0, [r7, #4]
 8027264:	f7fb ffda 	bl	802321c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8027268:	4603      	mov	r3, r0
 802726a:	1ae3      	subs	r3, r4, r3
 802726c:	683a      	ldr	r2, [r7, #0]
 802726e:	429a      	cmp	r2, r3
 8027270:	bf8c      	ite	hi
 8027272:	2301      	movhi	r3, #1
 8027274:	2300      	movls	r3, #0
 8027276:	b2db      	uxtb	r3, r3
 8027278:	2b00      	cmp	r3, #0
 802727a:	d002      	beq.n	8027282 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 802727c:	4816      	ldr	r0, [pc, #88]	; (80272d8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x88>)
 802727e:	f016 f8ed 	bl	803d45c <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8027282:	f7ff fb38 	bl	80268f6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8027286:	4602      	mov	r2, r0
 8027288:	683b      	ldr	r3, [r7, #0]
 802728a:	4413      	add	r3, r2
 802728c:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 802728e:	f7ff fb32 	bl	80268f6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8027292:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8027294:	fbb4 f3f3 	udiv	r3, r4, r3
 8027298:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 802729a:	68b9      	ldr	r1, [r7, #8]
 802729c:	6878      	ldr	r0, [r7, #4]
 802729e:	f7fe f847 	bl	8025330 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 80272a2:	2301      	movs	r3, #1
 80272a4:	60fb      	str	r3, [r7, #12]
 80272a6:	68fa      	ldr	r2, [r7, #12]
 80272a8:	68bb      	ldr	r3, [r7, #8]
 80272aa:	429a      	cmp	r2, r3
 80272ac:	d80f      	bhi.n	80272ce <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 80272ae:	6879      	ldr	r1, [r7, #4]
 80272b0:	687b      	ldr	r3, [r7, #4]
 80272b2:	695a      	ldr	r2, [r3, #20]
 80272b4:	68fb      	ldr	r3, [r7, #12]
 80272b6:	009b      	lsls	r3, r3, #2
 80272b8:	425b      	negs	r3, r3
 80272ba:	18d4      	adds	r4, r2, r3
 80272bc:	4608      	mov	r0, r1
 80272be:	f7fe f84f 	bl	8025360 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 80272c2:	4603      	mov	r3, r0
 80272c4:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 80272c6:	68fb      	ldr	r3, [r7, #12]
 80272c8:	3301      	adds	r3, #1
 80272ca:	60fb      	str	r3, [r7, #12]
 80272cc:	e7eb      	b.n	80272a6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x56>
    }
 80272ce:	bf00      	nop
 80272d0:	3714      	adds	r7, #20
 80272d2:	46bd      	mov	sp, r7
 80272d4:	bd90      	pop	{r4, r7, pc}
 80272d6:	bf00      	nop
 80272d8:	0803ee68 	.word	0x0803ee68

080272dc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 80272dc:	b580      	push	{r7, lr}
 80272de:	b084      	sub	sp, #16
 80272e0:	af00      	add	r7, sp, #0
 80272e2:	60f8      	str	r0, [r7, #12]
 80272e4:	60b9      	str	r1, [r7, #8]
 80272e6:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 80272e8:	68b9      	ldr	r1, [r7, #8]
 80272ea:	68f8      	ldr	r0, [r7, #12]
 80272ec:	f7fd f8d4 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp -= __n;
 80272f0:	6879      	ldr	r1, [r7, #4]
 80272f2:	68f8      	ldr	r0, [r7, #12]
 80272f4:	f000 fd25 	bl	8027d42 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	return __tmp;
 80272f8:	bf00      	nop
      }
 80272fa:	68f8      	ldr	r0, [r7, #12]
 80272fc:	3710      	adds	r7, #16
 80272fe:	46bd      	mov	sp, r7
 8027300:	bd80      	pop	{r7, pc}

08027302 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8027302:	b580      	push	{r7, lr}
 8027304:	b08a      	sub	sp, #40	; 0x28
 8027306:	af00      	add	r7, sp, #0
 8027308:	60f8      	str	r0, [r7, #12]
 802730a:	60b9      	str	r1, [r7, #8]
 802730c:	607a      	str	r2, [r7, #4]
 802730e:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8027310:	2301      	movs	r3, #1
 8027312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8027316:	f107 0314 	add.w	r3, r7, #20
 802731a:	6839      	ldr	r1, [r7, #0]
 802731c:	4618      	mov	r0, r3
 802731e:	f7fd f8bb 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027322:	68f8      	ldr	r0, [r7, #12]
 8027324:	f107 0314 	add.w	r3, r7, #20
 8027328:	687a      	ldr	r2, [r7, #4]
 802732a:	68b9      	ldr	r1, [r7, #8]
 802732c:	f000 fd19 	bl	8027d62 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>
    }
 8027330:	68f8      	ldr	r0, [r7, #12]
 8027332:	3728      	adds	r7, #40	; 0x28
 8027334:	46bd      	mov	sp, r7
 8027336:	bd80      	pop	{r7, pc}

08027338 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8027338:	b590      	push	{r4, r7, lr}
 802733a:	b085      	sub	sp, #20
 802733c:	af00      	add	r7, sp, #0
 802733e:	6078      	str	r0, [r7, #4]
 8027340:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8027342:	6878      	ldr	r0, [r7, #4]
 8027344:	f7fd ffe3 	bl	802530e <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8027348:	4604      	mov	r4, r0
 802734a:	6878      	ldr	r0, [r7, #4]
 802734c:	f7fb ff66 	bl	802321c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8027350:	4603      	mov	r3, r0
 8027352:	1ae3      	subs	r3, r4, r3
 8027354:	683a      	ldr	r2, [r7, #0]
 8027356:	429a      	cmp	r2, r3
 8027358:	bf8c      	ite	hi
 802735a:	2301      	movhi	r3, #1
 802735c:	2300      	movls	r3, #0
 802735e:	b2db      	uxtb	r3, r3
 8027360:	2b00      	cmp	r3, #0
 8027362:	d002      	beq.n	802736a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8027364:	4815      	ldr	r0, [pc, #84]	; (80273bc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x84>)
 8027366:	f016 f879 	bl	803d45c <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 802736a:	f7ff fac4 	bl	80268f6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 802736e:	4602      	mov	r2, r0
 8027370:	683b      	ldr	r3, [r7, #0]
 8027372:	4413      	add	r3, r2
 8027374:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8027376:	f7ff fabe 	bl	80268f6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 802737a:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 802737c:	fbb4 f3f3 	udiv	r3, r4, r3
 8027380:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8027382:	68b9      	ldr	r1, [r7, #8]
 8027384:	6878      	ldr	r0, [r7, #4]
 8027386:	f000 fd04 	bl	8027d92 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 802738a:	2301      	movs	r3, #1
 802738c:	60fb      	str	r3, [r7, #12]
 802738e:	68fa      	ldr	r2, [r7, #12]
 8027390:	68bb      	ldr	r3, [r7, #8]
 8027392:	429a      	cmp	r2, r3
 8027394:	d80e      	bhi.n	80273b4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8027396:	6879      	ldr	r1, [r7, #4]
 8027398:	687b      	ldr	r3, [r7, #4]
 802739a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802739c:	68fb      	ldr	r3, [r7, #12]
 802739e:	009b      	lsls	r3, r3, #2
 80273a0:	18d4      	adds	r4, r2, r3
 80273a2:	4608      	mov	r0, r1
 80273a4:	f7fd ffdc 	bl	8025360 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 80273a8:	4603      	mov	r3, r0
 80273aa:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 80273ac:	68fb      	ldr	r3, [r7, #12]
 80273ae:	3301      	adds	r3, #1
 80273b0:	60fb      	str	r3, [r7, #12]
 80273b2:	e7ec      	b.n	802738e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x56>
    }
 80273b4:	bf00      	nop
 80273b6:	3714      	adds	r7, #20
 80273b8:	46bd      	mov	sp, r7
 80273ba:	bd90      	pop	{r4, r7, pc}
 80273bc:	0803ee88 	.word	0x0803ee88

080273c0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 80273c0:	b590      	push	{r4, r7, lr}
 80273c2:	b09b      	sub	sp, #108	; 0x6c
 80273c4:	af02      	add	r7, sp, #8
 80273c6:	60f8      	str	r0, [r7, #12]
 80273c8:	60b9      	str	r1, [r7, #8]
 80273ca:	607a      	str	r2, [r7, #4]
 80273cc:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 80273ce:	f107 0320 	add.w	r3, r7, #32
 80273d2:	68b9      	ldr	r1, [r7, #8]
 80273d4:	4618      	mov	r0, r3
 80273d6:	f7fd f85f 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80273da:	f107 0310 	add.w	r3, r7, #16
 80273de:	f107 0220 	add.w	r2, r7, #32
 80273e2:	4611      	mov	r1, r2
 80273e4:	4618      	mov	r0, r3
 80273e6:	f000 fcef 	bl	8027dc8 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 80273ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80273ee:	6879      	ldr	r1, [r7, #4]
 80273f0:	4618      	mov	r0, r3
 80273f2:	f7fd f851 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80273f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80273fa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80273fe:	4611      	mov	r1, r2
 8027400:	4618      	mov	r0, r3
 8027402:	f000 fce1 	bl	8027dc8 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8027406:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802740a:	6839      	ldr	r1, [r7, #0]
 802740c:	4618      	mov	r0, r3
 802740e:	f7fd f843 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027412:	68f8      	ldr	r0, [r7, #12]
 8027414:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8027418:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802741c:	f107 0110 	add.w	r1, r7, #16
 8027420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027422:	9300      	str	r3, [sp, #0]
 8027424:	4623      	mov	r3, r4
 8027426:	f000 fcf8 	bl	8027e1a <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>
    }
 802742a:	68f8      	ldr	r0, [r7, #12]
 802742c:	3764      	adds	r7, #100	; 0x64
 802742e:	46bd      	mov	sp, r7
 8027430:	bd90      	pop	{r4, r7, pc}

08027432 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
    move(_II __first, _II __last, _OI __result)
 8027432:	b580      	push	{r7, lr}
 8027434:	b098      	sub	sp, #96	; 0x60
 8027436:	af00      	add	r7, sp, #0
 8027438:	60f8      	str	r0, [r7, #12]
 802743a:	60b9      	str	r1, [r7, #8]
 802743c:	607a      	str	r2, [r7, #4]
 802743e:	603b      	str	r3, [r7, #0]
				      std::__miter_base(__last), __result);
 8027440:	f107 0320 	add.w	r3, r7, #32
 8027444:	68b9      	ldr	r1, [r7, #8]
 8027446:	4618      	mov	r0, r3
 8027448:	f7fd f826 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802744c:	f107 0310 	add.w	r3, r7, #16
 8027450:	f107 0220 	add.w	r2, r7, #32
 8027454:	4611      	mov	r1, r2
 8027456:	4618      	mov	r0, r3
 8027458:	f000 fd05 	bl	8027e66 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802745c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027460:	6879      	ldr	r1, [r7, #4]
 8027462:	4618      	mov	r0, r3
 8027464:	f7fd f818 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027468:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802746c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027470:	4611      	mov	r1, r2
 8027472:	4618      	mov	r0, r3
 8027474:	f000 fcf7 	bl	8027e66 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027478:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802747c:	6839      	ldr	r1, [r7, #0]
 802747e:	4618      	mov	r0, r3
 8027480:	f7fd f80a 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027484:	68f8      	ldr	r0, [r7, #12]
 8027486:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802748a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802748e:	f107 0110 	add.w	r1, r7, #16
 8027492:	f000 fcf5 	bl	8027e80 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8027496:	68f8      	ldr	r0, [r7, #12]
 8027498:	3760      	adds	r7, #96	; 0x60
 802749a:	46bd      	mov	sp, r7
 802749c:	bd80      	pop	{r7, pc}

0802749e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 802749e:	b590      	push	{r4, r7, lr}
 80274a0:	b085      	sub	sp, #20
 80274a2:	af00      	add	r7, sp, #0
 80274a4:	6078      	str	r0, [r7, #4]
 80274a6:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 80274a8:	683b      	ldr	r3, [r7, #0]
 80274aa:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 80274ac:	6878      	ldr	r0, [r7, #4]
 80274ae:	f7fd fe4f 	bl	8025150 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 80274b2:	4622      	mov	r2, r4
 80274b4:	68f9      	ldr	r1, [r7, #12]
 80274b6:	6878      	ldr	r0, [r7, #4]
 80274b8:	f7fe fcd2 	bl	8025e60 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 80274bc:	bf00      	nop
 80274be:	3714      	adds	r7, #20
 80274c0:	46bd      	mov	sp, r7
 80274c2:	bd90      	pop	{r4, r7, pc}

080274c4 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_move_copy(_InputIterator1 __first1,
 80274c4:	b590      	push	{r4, r7, lr}
 80274c6:	b0a3      	sub	sp, #140	; 0x8c
 80274c8:	af02      	add	r7, sp, #8
 80274ca:	60f8      	str	r0, [r7, #12]
 80274cc:	60b9      	str	r1, [r7, #8]
 80274ce:	607a      	str	r2, [r7, #4]
 80274d0:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 80274d2:	f107 0320 	add.w	r3, r7, #32
 80274d6:	68b9      	ldr	r1, [r7, #8]
 80274d8:	4618      	mov	r0, r3
 80274da:	f7fc ffdd 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80274de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80274e2:	6879      	ldr	r1, [r7, #4]
 80274e4:	4618      	mov	r0, r3
 80274e6:	f7fc ffd7 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80274ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80274ee:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80274f2:	4618      	mov	r0, r3
 80274f4:	f7fc ffd0 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80274f8:	f107 0010 	add.w	r0, r7, #16
 80274fc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8027500:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8027504:	f107 0120 	add.w	r1, r7, #32
 8027508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802750c:	9300      	str	r3, [sp, #0]
 802750e:	4623      	mov	r3, r4
 8027510:	f7ff ff56 	bl	80273c0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 8027514:	f107 0210 	add.w	r2, r7, #16
 8027518:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802751c:	4611      	mov	r1, r2
 802751e:	4618      	mov	r0, r3
 8027520:	f7fc ffba 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027524:	68f8      	ldr	r0, [r7, #12]
 8027526:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802752a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802752e:	9300      	str	r3, [sp, #0]
 8027530:	4613      	mov	r3, r2
 8027532:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8027536:	6839      	ldr	r1, [r7, #0]
 8027538:	f7fe fd0e 	bl	8025f58 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
    }
 802753c:	68f8      	ldr	r0, [r7, #12]
 802753e:	3784      	adds	r7, #132	; 0x84
 8027540:	46bd      	mov	sp, r7
 8027542:	bd90      	pop	{r4, r7, pc}

08027544 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8027544:	b580      	push	{r7, lr}
 8027546:	b098      	sub	sp, #96	; 0x60
 8027548:	af00      	add	r7, sp, #0
 802754a:	60f8      	str	r0, [r7, #12]
 802754c:	60b9      	str	r1, [r7, #8]
 802754e:	607a      	str	r2, [r7, #4]
 8027550:	603b      	str	r3, [r7, #0]
					       __result);
 8027552:	f107 0320 	add.w	r3, r7, #32
 8027556:	68b9      	ldr	r1, [r7, #8]
 8027558:	4618      	mov	r0, r3
 802755a:	f7fc ff9d 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802755e:	f107 0310 	add.w	r3, r7, #16
 8027562:	f107 0220 	add.w	r2, r7, #32
 8027566:	4611      	mov	r1, r2
 8027568:	4618      	mov	r0, r3
 802756a:	f000 fc7c 	bl	8027e66 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802756e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027572:	6879      	ldr	r1, [r7, #4]
 8027574:	4618      	mov	r0, r3
 8027576:	f7fc ff8f 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802757a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802757e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027582:	4611      	mov	r1, r2
 8027584:	4618      	mov	r0, r3
 8027586:	f000 fc6e 	bl	8027e66 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802758a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802758e:	6839      	ldr	r1, [r7, #0]
 8027590:	4618      	mov	r0, r3
 8027592:	f7fc ff81 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027596:	68f8      	ldr	r0, [r7, #12]
 8027598:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802759c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80275a0:	f107 0110 	add.w	r1, r7, #16
 80275a4:	f000 fcb2 	bl	8027f0c <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 80275a8:	68f8      	ldr	r0, [r7, #12]
 80275aa:	3760      	adds	r7, #96	; 0x60
 80275ac:	46bd      	mov	sp, r7
 80275ae:	bd80      	pop	{r7, pc}

080275b0 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 80275b0:	b590      	push	{r4, r7, lr}
 80275b2:	b0a3      	sub	sp, #140	; 0x8c
 80275b4:	af02      	add	r7, sp, #8
 80275b6:	60f8      	str	r0, [r7, #12]
 80275b8:	60b9      	str	r1, [r7, #8]
 80275ba:	607a      	str	r2, [r7, #4]
 80275bc:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 80275be:	f107 0320 	add.w	r3, r7, #32
 80275c2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80275c6:	4618      	mov	r0, r3
 80275c8:	f7fc ff66 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80275cc:	f107 0010 	add.w	r0, r7, #16
 80275d0:	f107 0220 	add.w	r2, r7, #32
 80275d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80275d8:	9300      	str	r3, [sp, #0]
 80275da:	4613      	mov	r3, r2
 80275dc:	687a      	ldr	r2, [r7, #4]
 80275de:	68b9      	ldr	r1, [r7, #8]
 80275e0:	f7fe fcba 	bl	8025f58 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 80275e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80275e8:	6839      	ldr	r1, [r7, #0]
 80275ea:	4618      	mov	r0, r3
 80275ec:	f7fc ff54 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80275f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80275f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80275f8:	4618      	mov	r0, r3
 80275fa:	f7fc ff4d 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80275fe:	f107 0210 	add.w	r2, r7, #16
 8027602:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8027606:	4611      	mov	r1, r2
 8027608:	4618      	mov	r0, r3
 802760a:	f7fc ff45 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802760e:	68f8      	ldr	r0, [r7, #12]
 8027610:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8027614:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027618:	f107 0130 	add.w	r1, r7, #48	; 0x30
 802761c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8027620:	9300      	str	r3, [sp, #0]
 8027622:	4623      	mov	r3, r4
 8027624:	f7ff fecc 	bl	80273c0 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
    }
 8027628:	68f8      	ldr	r0, [r7, #12]
 802762a:	3784      	adds	r7, #132	; 0x84
 802762c:	46bd      	mov	sp, r7
 802762e:	bd90      	pop	{r4, r7, pc}

08027630 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8027630:	b580      	push	{r7, lr}
 8027632:	b082      	sub	sp, #8
 8027634:	af00      	add	r7, sp, #0
 8027636:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8027638:	6878      	ldr	r0, [r7, #4]
 802763a:	f000 fcad 	bl	8027f98 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>
 802763e:	4603      	mov	r3, r0
      }
 8027640:	4618      	mov	r0, r3
 8027642:	3708      	adds	r7, #8
 8027644:	46bd      	mov	sp, r7
 8027646:	bd80      	pop	{r7, pc}

08027648 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8027648:	b590      	push	{r4, r7, lr}
 802764a:	b085      	sub	sp, #20
 802764c:	af00      	add	r7, sp, #0
 802764e:	60f8      	str	r0, [r7, #12]
 8027650:	60b9      	str	r1, [r7, #8]
 8027652:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8027654:	68f8      	ldr	r0, [r7, #12]
 8027656:	f000 fcab 	bl	8027fb0 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802765a:	4604      	mov	r4, r0
 802765c:	68b8      	ldr	r0, [r7, #8]
 802765e:	f000 fca7 	bl	8027fb0 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027662:	4603      	mov	r3, r0
 8027664:	687a      	ldr	r2, [r7, #4]
 8027666:	4619      	mov	r1, r3
 8027668:	4620      	mov	r0, r4
 802766a:	f000 fcac 	bl	8027fc6 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802766e:	4603      	mov	r3, r0
    }
 8027670:	4618      	mov	r0, r3
 8027672:	3714      	adds	r7, #20
 8027674:	46bd      	mov	sp, r7
 8027676:	bd90      	pop	{r4, r7, pc}

08027678 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8027678:	b590      	push	{r4, r7, lr}
 802767a:	b085      	sub	sp, #20
 802767c:	af00      	add	r7, sp, #0
 802767e:	60f8      	str	r0, [r7, #12]
 8027680:	60b9      	str	r1, [r7, #8]
 8027682:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8027684:	68f8      	ldr	r0, [r7, #12]
 8027686:	f000 fc93 	bl	8027fb0 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802768a:	4604      	mov	r4, r0
 802768c:	68b8      	ldr	r0, [r7, #8]
 802768e:	f000 fc8f 	bl	8027fb0 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027692:	4603      	mov	r3, r0
 8027694:	687a      	ldr	r2, [r7, #4]
 8027696:	4619      	mov	r1, r3
 8027698:	4620      	mov	r0, r4
 802769a:	f000 fcb7 	bl	802800c <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802769e:	4603      	mov	r3, r0
    }
 80276a0:	4618      	mov	r0, r3
 80276a2:	3714      	adds	r7, #20
 80276a4:	46bd      	mov	sp, r7
 80276a6:	bd90      	pop	{r4, r7, pc}

080276a8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80276a8:	b580      	push	{r7, lr}
 80276aa:	b084      	sub	sp, #16
 80276ac:	af00      	add	r7, sp, #0
 80276ae:	60f8      	str	r0, [r7, #12]
 80276b0:	60b9      	str	r1, [r7, #8]
 80276b2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80276b4:	68f8      	ldr	r0, [r7, #12]
 80276b6:	f000 fccd 	bl	8028054 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 80276ba:	4602      	mov	r2, r0
 80276bc:	68bb      	ldr	r3, [r7, #8]
 80276be:	4293      	cmp	r3, r2
 80276c0:	bf8c      	ite	hi
 80276c2:	2301      	movhi	r3, #1
 80276c4:	2300      	movls	r3, #0
 80276c6:	b2db      	uxtb	r3, r3
 80276c8:	2b00      	cmp	r3, #0
 80276ca:	d001      	beq.n	80276d0 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80276cc:	f015 fec3 	bl	803d456 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80276d0:	68ba      	ldr	r2, [r7, #8]
 80276d2:	4613      	mov	r3, r2
 80276d4:	009b      	lsls	r3, r3, #2
 80276d6:	4413      	add	r3, r2
 80276d8:	009b      	lsls	r3, r3, #2
 80276da:	4618      	mov	r0, r3
 80276dc:	f015 feaa 	bl	803d434 <_Znwj>
 80276e0:	4603      	mov	r3, r0
      }
 80276e2:	4618      	mov	r0, r3
 80276e4:	3710      	adds	r7, #16
 80276e6:	46bd      	mov	sp, r7
 80276e8:	bd80      	pop	{r7, pc}

080276ea <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80276ea:	b580      	push	{r7, lr}
 80276ec:	b084      	sub	sp, #16
 80276ee:	af00      	add	r7, sp, #0
 80276f0:	60f8      	str	r0, [r7, #12]
 80276f2:	60b9      	str	r1, [r7, #8]
 80276f4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80276f6:	687a      	ldr	r2, [r7, #4]
 80276f8:	4613      	mov	r3, r2
 80276fa:	009b      	lsls	r3, r3, #2
 80276fc:	4413      	add	r3, r2
 80276fe:	009b      	lsls	r3, r3, #2
 8027700:	4619      	mov	r1, r3
 8027702:	68b8      	ldr	r0, [r7, #8]
 8027704:	f015 fe94 	bl	803d430 <_ZdlPvj>
      }
 8027708:	bf00      	nop
 802770a:	3710      	adds	r7, #16
 802770c:	46bd      	mov	sp, r7
 802770e:	bd80      	pop	{r7, pc}

08027710 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8027710:	b580      	push	{r7, lr}
 8027712:	b084      	sub	sp, #16
 8027714:	af00      	add	r7, sp, #0
 8027716:	60f8      	str	r0, [r7, #12]
 8027718:	60b9      	str	r1, [r7, #8]
 802771a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802771c:	68f8      	ldr	r0, [r7, #12]
 802771e:	f000 fca7 	bl	8028070 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8027722:	4602      	mov	r2, r0
 8027724:	68bb      	ldr	r3, [r7, #8]
 8027726:	4293      	cmp	r3, r2
 8027728:	bf8c      	ite	hi
 802772a:	2301      	movhi	r3, #1
 802772c:	2300      	movls	r3, #0
 802772e:	b2db      	uxtb	r3, r3
 8027730:	2b00      	cmp	r3, #0
 8027732:	d001      	beq.n	8027738 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8027734:	f015 fe8f 	bl	803d456 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8027738:	68bb      	ldr	r3, [r7, #8]
 802773a:	009b      	lsls	r3, r3, #2
 802773c:	4618      	mov	r0, r3
 802773e:	f015 fe79 	bl	803d434 <_Znwj>
 8027742:	4603      	mov	r3, r0
      }
 8027744:	4618      	mov	r0, r3
 8027746:	3710      	adds	r7, #16
 8027748:	46bd      	mov	sp, r7
 802774a:	bd80      	pop	{r7, pc}

0802774c <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802774c:	b480      	push	{r7}
 802774e:	b083      	sub	sp, #12
 8027750:	af00      	add	r7, sp, #0
 8027752:	6078      	str	r0, [r7, #4]
 8027754:	687b      	ldr	r3, [r7, #4]
 8027756:	4618      	mov	r0, r3
 8027758:	370c      	adds	r7, #12
 802775a:	46bd      	mov	sp, r7
 802775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027760:	4770      	bx	lr

08027762 <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8027762:	b480      	push	{r7}
 8027764:	b083      	sub	sp, #12
 8027766:	af00      	add	r7, sp, #0
 8027768:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802776a:	687b      	ldr	r3, [r7, #4]
 802776c:	4618      	mov	r0, r3
 802776e:	370c      	adds	r7, #12
 8027770:	46bd      	mov	sp, r7
 8027772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027776:	4770      	bx	lr

08027778 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8027778:	b580      	push	{r7, lr}
 802777a:	b082      	sub	sp, #8
 802777c:	af00      	add	r7, sp, #0
 802777e:	6078      	str	r0, [r7, #4]
 8027780:	6039      	str	r1, [r7, #0]
 8027782:	683b      	ldr	r3, [r7, #0]
 8027784:	681a      	ldr	r2, [r3, #0]
 8027786:	687b      	ldr	r3, [r7, #4]
 8027788:	601a      	str	r2, [r3, #0]
 802778a:	683b      	ldr	r3, [r7, #0]
 802778c:	685a      	ldr	r2, [r3, #4]
 802778e:	687b      	ldr	r3, [r7, #4]
 8027790:	605a      	str	r2, [r3, #4]
 8027792:	687b      	ldr	r3, [r7, #4]
 8027794:	f103 0208 	add.w	r2, r3, #8
 8027798:	683b      	ldr	r3, [r7, #0]
 802779a:	3308      	adds	r3, #8
 802779c:	4619      	mov	r1, r3
 802779e:	4610      	mov	r0, r2
 80277a0:	f7fb ff12 	bl	80235c8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80277a4:	687b      	ldr	r3, [r7, #4]
 80277a6:	f103 0218 	add.w	r2, r3, #24
 80277aa:	683b      	ldr	r3, [r7, #0]
 80277ac:	3318      	adds	r3, #24
 80277ae:	4619      	mov	r1, r3
 80277b0:	4610      	mov	r0, r2
 80277b2:	f7fb ff09 	bl	80235c8 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80277b6:	687b      	ldr	r3, [r7, #4]
 80277b8:	4618      	mov	r0, r3
 80277ba:	3708      	adds	r7, #8
 80277bc:	46bd      	mov	sp, r7
 80277be:	bd80      	pop	{r7, pc}

080277c0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 80277c0:	b5b0      	push	{r4, r5, r7, lr}
 80277c2:	b08c      	sub	sp, #48	; 0x30
 80277c4:	af00      	add	r7, sp, #0
 80277c6:	6078      	str	r0, [r7, #4]
 80277c8:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80277ca:	6839      	ldr	r1, [r7, #0]
 80277cc:	6878      	ldr	r0, [r7, #4]
 80277ce:	f7ff ffd3 	bl	8027778 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 80277d2:	f107 0308 	add.w	r3, r7, #8
 80277d6:	4618      	mov	r0, r3
 80277d8:	f7fc ff17 	bl	802460a <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
 80277dc:	683b      	ldr	r3, [r7, #0]
 80277de:	461d      	mov	r5, r3
 80277e0:	f107 0408 	add.w	r4, r7, #8
 80277e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80277e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80277e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80277ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80277ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80277f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80277f4:	687b      	ldr	r3, [r7, #4]
 80277f6:	4618      	mov	r0, r3
 80277f8:	3730      	adds	r7, #48	; 0x30
 80277fa:	46bd      	mov	sp, r7
 80277fc:	bdb0      	pop	{r4, r5, r7, pc}

080277fe <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80277fe:	b480      	push	{r7}
 8027800:	b083      	sub	sp, #12
 8027802:	af00      	add	r7, sp, #0
 8027804:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8027806:	687b      	ldr	r3, [r7, #4]
 8027808:	4618      	mov	r0, r3
 802780a:	370c      	adds	r7, #12
 802780c:	46bd      	mov	sp, r7
 802780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027812:	4770      	bx	lr

08027814 <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8027814:	b480      	push	{r7}
 8027816:	b083      	sub	sp, #12
 8027818:	af00      	add	r7, sp, #0
 802781a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802781c:	687b      	ldr	r3, [r7, #4]
 802781e:	4618      	mov	r0, r3
 8027820:	370c      	adds	r7, #12
 8027822:	46bd      	mov	sp, r7
 8027824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027828:	4770      	bx	lr

0802782a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 802782a:	b580      	push	{r7, lr}
 802782c:	b082      	sub	sp, #8
 802782e:	af00      	add	r7, sp, #0
 8027830:	6078      	str	r0, [r7, #4]
 8027832:	6039      	str	r1, [r7, #0]
 8027834:	683b      	ldr	r3, [r7, #0]
 8027836:	681a      	ldr	r2, [r3, #0]
 8027838:	687b      	ldr	r3, [r7, #4]
 802783a:	601a      	str	r2, [r3, #0]
 802783c:	683b      	ldr	r3, [r7, #0]
 802783e:	685a      	ldr	r2, [r3, #4]
 8027840:	687b      	ldr	r3, [r7, #4]
 8027842:	605a      	str	r2, [r3, #4]
 8027844:	687b      	ldr	r3, [r7, #4]
 8027846:	f103 0208 	add.w	r2, r3, #8
 802784a:	683b      	ldr	r3, [r7, #0]
 802784c:	3308      	adds	r3, #8
 802784e:	4619      	mov	r1, r3
 8027850:	4610      	mov	r0, r2
 8027852:	f7fb ff5c 	bl	802370e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8027856:	687b      	ldr	r3, [r7, #4]
 8027858:	f103 0218 	add.w	r2, r3, #24
 802785c:	683b      	ldr	r3, [r7, #0]
 802785e:	3318      	adds	r3, #24
 8027860:	4619      	mov	r1, r3
 8027862:	4610      	mov	r0, r2
 8027864:	f7fb ff53 	bl	802370e <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8027868:	687b      	ldr	r3, [r7, #4]
 802786a:	4618      	mov	r0, r3
 802786c:	3708      	adds	r7, #8
 802786e:	46bd      	mov	sp, r7
 8027870:	bd80      	pop	{r7, pc}

08027872 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8027872:	b5b0      	push	{r4, r5, r7, lr}
 8027874:	b08c      	sub	sp, #48	; 0x30
 8027876:	af00      	add	r7, sp, #0
 8027878:	6078      	str	r0, [r7, #4]
 802787a:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 802787c:	6839      	ldr	r1, [r7, #0]
 802787e:	6878      	ldr	r0, [r7, #4]
 8027880:	f7ff ffd3 	bl	802782a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8027884:	f107 0308 	add.w	r3, r7, #8
 8027888:	4618      	mov	r0, r3
 802788a:	f7fd ff91 	bl	80257b0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
 802788e:	683b      	ldr	r3, [r7, #0]
 8027890:	461d      	mov	r5, r3
 8027892:	f107 0408 	add.w	r4, r7, #8
 8027896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8027898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802789a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802789c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802789e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80278a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80278a6:	687b      	ldr	r3, [r7, #4]
 80278a8:	4618      	mov	r0, r3
 80278aa:	3730      	adds	r7, #48	; 0x30
 80278ac:	46bd      	mov	sp, r7
 80278ae:	bdb0      	pop	{r4, r5, r7, pc}

080278b0 <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80278b0:	b480      	push	{r7}
 80278b2:	b083      	sub	sp, #12
 80278b4:	af00      	add	r7, sp, #0
 80278b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80278b8:	687b      	ldr	r3, [r7, #4]
 80278ba:	4618      	mov	r0, r3
 80278bc:	370c      	adds	r7, #12
 80278be:	46bd      	mov	sp, r7
 80278c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278c4:	4770      	bx	lr

080278c6 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80278c6:	b480      	push	{r7}
 80278c8:	b083      	sub	sp, #12
 80278ca:	af00      	add	r7, sp, #0
 80278cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80278ce:	687b      	ldr	r3, [r7, #4]
 80278d0:	4618      	mov	r0, r3
 80278d2:	370c      	adds	r7, #12
 80278d4:	46bd      	mov	sp, r7
 80278d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278da:	4770      	bx	lr

080278dc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 80278dc:	b580      	push	{r7, lr}
 80278de:	b082      	sub	sp, #8
 80278e0:	af00      	add	r7, sp, #0
 80278e2:	6078      	str	r0, [r7, #4]
 80278e4:	6039      	str	r1, [r7, #0]
 80278e6:	683b      	ldr	r3, [r7, #0]
 80278e8:	681a      	ldr	r2, [r3, #0]
 80278ea:	687b      	ldr	r3, [r7, #4]
 80278ec:	601a      	str	r2, [r3, #0]
 80278ee:	683b      	ldr	r3, [r7, #0]
 80278f0:	685a      	ldr	r2, [r3, #4]
 80278f2:	687b      	ldr	r3, [r7, #4]
 80278f4:	605a      	str	r2, [r3, #4]
 80278f6:	687b      	ldr	r3, [r7, #4]
 80278f8:	f103 0208 	add.w	r2, r3, #8
 80278fc:	683b      	ldr	r3, [r7, #0]
 80278fe:	3308      	adds	r3, #8
 8027900:	4619      	mov	r1, r3
 8027902:	4610      	mov	r0, r2
 8027904:	f7fc fdc8 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027908:	687b      	ldr	r3, [r7, #4]
 802790a:	f103 0218 	add.w	r2, r3, #24
 802790e:	683b      	ldr	r3, [r7, #0]
 8027910:	3318      	adds	r3, #24
 8027912:	4619      	mov	r1, r3
 8027914:	4610      	mov	r0, r2
 8027916:	f7fc fdbf 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802791a:	687b      	ldr	r3, [r7, #4]
 802791c:	4618      	mov	r0, r3
 802791e:	3708      	adds	r7, #8
 8027920:	46bd      	mov	sp, r7
 8027922:	bd80      	pop	{r7, pc}

08027924 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8027924:	b5b0      	push	{r4, r5, r7, lr}
 8027926:	b08c      	sub	sp, #48	; 0x30
 8027928:	af00      	add	r7, sp, #0
 802792a:	6078      	str	r0, [r7, #4]
 802792c:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 802792e:	6839      	ldr	r1, [r7, #0]
 8027930:	6878      	ldr	r0, [r7, #4]
 8027932:	f7ff ffd3 	bl	80278dc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>
	{ __x = _Deque_impl_data(); }
 8027936:	f107 0308 	add.w	r3, r7, #8
 802793a:	4618      	mov	r0, r3
 802793c:	f7fd fd8f 	bl	802545e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
 8027940:	683b      	ldr	r3, [r7, #0]
 8027942:	461d      	mov	r5, r3
 8027944:	f107 0408 	add.w	r4, r7, #8
 8027948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802794a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802794c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802794e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8027950:	e894 0003 	ldmia.w	r4, {r0, r1}
 8027954:	e885 0003 	stmia.w	r5, {r0, r1}
 8027958:	687b      	ldr	r3, [r7, #4]
 802795a:	4618      	mov	r0, r3
 802795c:	3730      	adds	r7, #48	; 0x30
 802795e:	46bd      	mov	sp, r7
 8027960:	bdb0      	pop	{r4, r5, r7, pc}

08027962 <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8027962:	b480      	push	{r7}
 8027964:	b083      	sub	sp, #12
 8027966:	af00      	add	r7, sp, #0
 8027968:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802796a:	687b      	ldr	r3, [r7, #4]
 802796c:	4618      	mov	r0, r3
 802796e:	370c      	adds	r7, #12
 8027970:	46bd      	mov	sp, r7
 8027972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027976:	4770      	bx	lr

08027978 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8027978:	b480      	push	{r7}
 802797a:	b083      	sub	sp, #12
 802797c:	af00      	add	r7, sp, #0
 802797e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8027980:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8027984:	4618      	mov	r0, r3
 8027986:	370c      	adds	r7, #12
 8027988:	46bd      	mov	sp, r7
 802798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802798e:	4770      	bx	lr

08027990 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8027990:	b580      	push	{r7, lr}
 8027992:	b082      	sub	sp, #8
 8027994:	af00      	add	r7, sp, #0
 8027996:	6078      	str	r0, [r7, #4]
 8027998:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 802799a:	687a      	ldr	r2, [r7, #4]
 802799c:	683b      	ldr	r3, [r7, #0]
 802799e:	429a      	cmp	r2, r3
 80279a0:	d00a      	beq.n	80279b8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80279a2:	6878      	ldr	r0, [r7, #4]
 80279a4:	f000 fb70 	bl	8028088 <_ZSt11__addressofI7RequestEPT_RS1_>
 80279a8:	4603      	mov	r3, r0
 80279aa:	4618      	mov	r0, r3
 80279ac:	f000 fb77 	bl	802809e <_ZSt8_DestroyI7RequestEvPT_>
	  for (; __first != __last; ++__first)
 80279b0:	687b      	ldr	r3, [r7, #4]
 80279b2:	3314      	adds	r3, #20
 80279b4:	607b      	str	r3, [r7, #4]
 80279b6:	e7f0      	b.n	802799a <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0xa>
	}
 80279b8:	bf00      	nop
 80279ba:	3708      	adds	r7, #8
 80279bc:	46bd      	mov	sp, r7
 80279be:	bd80      	pop	{r7, pc}

080279c0 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80279c0:	b580      	push	{r7, lr}
 80279c2:	b084      	sub	sp, #16
 80279c4:	af00      	add	r7, sp, #0
 80279c6:	60f8      	str	r0, [r7, #12]
 80279c8:	60b9      	str	r1, [r7, #8]
 80279ca:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80279cc:	68f8      	ldr	r0, [r7, #12]
 80279ce:	f000 fb71 	bl	80280b4 <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>
 80279d2:	4602      	mov	r2, r0
 80279d4:	68bb      	ldr	r3, [r7, #8]
 80279d6:	4293      	cmp	r3, r2
 80279d8:	bf8c      	ite	hi
 80279da:	2301      	movhi	r3, #1
 80279dc:	2300      	movls	r3, #0
 80279de:	b2db      	uxtb	r3, r3
 80279e0:	2b00      	cmp	r3, #0
 80279e2:	d001      	beq.n	80279e8 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80279e4:	f015 fd37 	bl	803d456 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80279e8:	68bb      	ldr	r3, [r7, #8]
 80279ea:	009b      	lsls	r3, r3, #2
 80279ec:	4618      	mov	r0, r3
 80279ee:	f015 fd21 	bl	803d434 <_Znwj>
 80279f2:	4603      	mov	r3, r0
      }
 80279f4:	4618      	mov	r0, r3
 80279f6:	3710      	adds	r7, #16
 80279f8:	46bd      	mov	sp, r7
 80279fa:	bd80      	pop	{r7, pc}

080279fc <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80279fc:	b580      	push	{r7, lr}
 80279fe:	b084      	sub	sp, #16
 8027a00:	af00      	add	r7, sp, #0
 8027a02:	60f8      	str	r0, [r7, #12]
 8027a04:	60b9      	str	r1, [r7, #8]
 8027a06:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8027a08:	687b      	ldr	r3, [r7, #4]
 8027a0a:	011b      	lsls	r3, r3, #4
 8027a0c:	4619      	mov	r1, r3
 8027a0e:	68b8      	ldr	r0, [r7, #8]
 8027a10:	f015 fd0e 	bl	803d430 <_ZdlPvj>
      }
 8027a14:	bf00      	nop
 8027a16:	3710      	adds	r7, #16
 8027a18:	46bd      	mov	sp, r7
 8027a1a:	bd80      	pop	{r7, pc}

08027a1c <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8027a1c:	b480      	push	{r7}
 8027a1e:	b083      	sub	sp, #12
 8027a20:	af00      	add	r7, sp, #0
 8027a22:	6078      	str	r0, [r7, #4]
 8027a24:	687b      	ldr	r3, [r7, #4]
 8027a26:	4618      	mov	r0, r3
 8027a28:	370c      	adds	r7, #12
 8027a2a:	46bd      	mov	sp, r7
 8027a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a30:	4770      	bx	lr

08027a32 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8027a32:	b580      	push	{r7, lr}
 8027a34:	b082      	sub	sp, #8
 8027a36:	af00      	add	r7, sp, #0
 8027a38:	6078      	str	r0, [r7, #4]
 8027a3a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8027a3c:	687a      	ldr	r2, [r7, #4]
 8027a3e:	683b      	ldr	r3, [r7, #0]
 8027a40:	429a      	cmp	r2, r3
 8027a42:	d00a      	beq.n	8027a5a <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8027a44:	6878      	ldr	r0, [r7, #4]
 8027a46:	f000 fb41 	bl	80280cc <_ZSt11__addressofI8ResponceEPT_RS1_>
 8027a4a:	4603      	mov	r3, r0
 8027a4c:	4618      	mov	r0, r3
 8027a4e:	f000 fb48 	bl	80280e2 <_ZSt8_DestroyI8ResponceEvPT_>
	  for (; __first != __last; ++__first)
 8027a52:	687b      	ldr	r3, [r7, #4]
 8027a54:	3310      	adds	r3, #16
 8027a56:	607b      	str	r3, [r7, #4]
 8027a58:	e7f0      	b.n	8027a3c <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0xa>
	}
 8027a5a:	bf00      	nop
 8027a5c:	3708      	adds	r7, #8
 8027a5e:	46bd      	mov	sp, r7
 8027a60:	bd80      	pop	{r7, pc}

08027a62 <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8027a62:	b580      	push	{r7, lr}
 8027a64:	b082      	sub	sp, #8
 8027a66:	af00      	add	r7, sp, #0
 8027a68:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8027a6a:	6878      	ldr	r0, [r7, #4]
 8027a6c:	f000 f856 	bl	8027b1c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 8027a70:	4603      	mov	r3, r0
 8027a72:	4618      	mov	r0, r3
 8027a74:	3708      	adds	r7, #8
 8027a76:	46bd      	mov	sp, r7
 8027a78:	bd80      	pop	{r7, pc}

08027a7a <_ZSt12__miter_baseIPP7RequestET_S3_>:
    __miter_base(_Iterator __it)
 8027a7a:	b480      	push	{r7}
 8027a7c:	b083      	sub	sp, #12
 8027a7e:	af00      	add	r7, sp, #0
 8027a80:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027a82:	687b      	ldr	r3, [r7, #4]
 8027a84:	4618      	mov	r0, r3
 8027a86:	370c      	adds	r7, #12
 8027a88:	46bd      	mov	sp, r7
 8027a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a8e:	4770      	bx	lr

08027a90 <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8027a90:	b5b0      	push	{r4, r5, r7, lr}
 8027a92:	b084      	sub	sp, #16
 8027a94:	af00      	add	r7, sp, #0
 8027a96:	60f8      	str	r0, [r7, #12]
 8027a98:	60b9      	str	r1, [r7, #8]
 8027a9a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8027a9c:	68f8      	ldr	r0, [r7, #12]
 8027a9e:	f000 fb2b 	bl	80280f8 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8027aa2:	4604      	mov	r4, r0
 8027aa4:	68b8      	ldr	r0, [r7, #8]
 8027aa6:	f000 fb27 	bl	80280f8 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8027aaa:	4605      	mov	r5, r0
 8027aac:	687b      	ldr	r3, [r7, #4]
 8027aae:	4618      	mov	r0, r3
 8027ab0:	f000 fb22 	bl	80280f8 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8027ab4:	4603      	mov	r3, r0
 8027ab6:	461a      	mov	r2, r3
 8027ab8:	4629      	mov	r1, r5
 8027aba:	4620      	mov	r0, r4
 8027abc:	f000 fb27 	bl	802810e <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8027ac0:	4602      	mov	r2, r0
 8027ac2:	1d3b      	adds	r3, r7, #4
 8027ac4:	4611      	mov	r1, r2
 8027ac6:	4618      	mov	r0, r3
 8027ac8:	f000 fb31 	bl	802812e <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 8027acc:	4603      	mov	r3, r0
    }
 8027ace:	4618      	mov	r0, r3
 8027ad0:	3710      	adds	r7, #16
 8027ad2:	46bd      	mov	sp, r7
 8027ad4:	bdb0      	pop	{r4, r5, r7, pc}

08027ad6 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8027ad6:	b5b0      	push	{r4, r5, r7, lr}
 8027ad8:	b084      	sub	sp, #16
 8027ada:	af00      	add	r7, sp, #0
 8027adc:	60f8      	str	r0, [r7, #12]
 8027ade:	60b9      	str	r1, [r7, #8]
 8027ae0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8027ae2:	68f8      	ldr	r0, [r7, #12]
 8027ae4:	f000 fb08 	bl	80280f8 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8027ae8:	4604      	mov	r4, r0
 8027aea:	68b8      	ldr	r0, [r7, #8]
 8027aec:	f000 fb04 	bl	80280f8 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8027af0:	4605      	mov	r5, r0
 8027af2:	687b      	ldr	r3, [r7, #4]
 8027af4:	4618      	mov	r0, r3
 8027af6:	f000 faff 	bl	80280f8 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8027afa:	4603      	mov	r3, r0
 8027afc:	461a      	mov	r2, r3
 8027afe:	4629      	mov	r1, r5
 8027b00:	4620      	mov	r0, r4
 8027b02:	f000 fb20 	bl	8028146 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8027b06:	4602      	mov	r2, r0
 8027b08:	1d3b      	adds	r3, r7, #4
 8027b0a:	4611      	mov	r1, r2
 8027b0c:	4618      	mov	r0, r3
 8027b0e:	f000 fb0e 	bl	802812e <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 8027b12:	4603      	mov	r3, r0
    }
 8027b14:	4618      	mov	r0, r3
 8027b16:	3710      	adds	r7, #16
 8027b18:	46bd      	mov	sp, r7
 8027b1a:	bdb0      	pop	{r4, r5, r7, pc}

08027b1c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8027b1c:	b480      	push	{r7}
 8027b1e:	b083      	sub	sp, #12
 8027b20:	af00      	add	r7, sp, #0
 8027b22:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8027b24:	4b03      	ldr	r3, [pc, #12]	; (8027b34 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv+0x18>)
      }
 8027b26:	4618      	mov	r0, r3
 8027b28:	370c      	adds	r7, #12
 8027b2a:	46bd      	mov	sp, r7
 8027b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b30:	4770      	bx	lr
 8027b32:	bf00      	nop
 8027b34:	06666666 	.word	0x06666666

08027b38 <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8027b38:	b580      	push	{r7, lr}
 8027b3a:	b082      	sub	sp, #8
 8027b3c:	af00      	add	r7, sp, #0
 8027b3e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8027b40:	6878      	ldr	r0, [r7, #4]
 8027b42:	f000 fb10 	bl	8028166 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>
 8027b46:	4603      	mov	r3, r0
      }
 8027b48:	4618      	mov	r0, r3
 8027b4a:	3708      	adds	r7, #8
 8027b4c:	46bd      	mov	sp, r7
 8027b4e:	bd80      	pop	{r7, pc}

08027b50 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8027b50:	b590      	push	{r4, r7, lr}
 8027b52:	b085      	sub	sp, #20
 8027b54:	af00      	add	r7, sp, #0
 8027b56:	60f8      	str	r0, [r7, #12]
 8027b58:	60b9      	str	r1, [r7, #8]
 8027b5a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8027b5c:	68f8      	ldr	r0, [r7, #12]
 8027b5e:	f000 fb0e 	bl	802817e <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8027b62:	4604      	mov	r4, r0
 8027b64:	68b8      	ldr	r0, [r7, #8]
 8027b66:	f000 fb0a 	bl	802817e <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8027b6a:	4603      	mov	r3, r0
 8027b6c:	687a      	ldr	r2, [r7, #4]
 8027b6e:	4619      	mov	r1, r3
 8027b70:	4620      	mov	r0, r4
 8027b72:	f000 fb0f 	bl	8028194 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8027b76:	4603      	mov	r3, r0
    }
 8027b78:	4618      	mov	r0, r3
 8027b7a:	3714      	adds	r7, #20
 8027b7c:	46bd      	mov	sp, r7
 8027b7e:	bd90      	pop	{r4, r7, pc}

08027b80 <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8027b80:	b590      	push	{r4, r7, lr}
 8027b82:	b085      	sub	sp, #20
 8027b84:	af00      	add	r7, sp, #0
 8027b86:	60f8      	str	r0, [r7, #12]
 8027b88:	60b9      	str	r1, [r7, #8]
 8027b8a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8027b8c:	68f8      	ldr	r0, [r7, #12]
 8027b8e:	f000 faf6 	bl	802817e <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8027b92:	4604      	mov	r4, r0
 8027b94:	68b8      	ldr	r0, [r7, #8]
 8027b96:	f000 faf2 	bl	802817e <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8027b9a:	4603      	mov	r3, r0
 8027b9c:	687a      	ldr	r2, [r7, #4]
 8027b9e:	4619      	mov	r1, r3
 8027ba0:	4620      	mov	r0, r4
 8027ba2:	f000 fb1a 	bl	80281da <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8027ba6:	4603      	mov	r3, r0
    }
 8027ba8:	4618      	mov	r0, r3
 8027baa:	3714      	adds	r7, #20
 8027bac:	46bd      	mov	sp, r7
 8027bae:	bd90      	pop	{r4, r7, pc}

08027bb0 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8027bb0:	b580      	push	{r7, lr}
 8027bb2:	b084      	sub	sp, #16
 8027bb4:	af00      	add	r7, sp, #0
 8027bb6:	60f8      	str	r0, [r7, #12]
 8027bb8:	60b9      	str	r1, [r7, #8]
 8027bba:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8027bbc:	68f8      	ldr	r0, [r7, #12]
 8027bbe:	f000 fb2f 	bl	8028220 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 8027bc2:	4602      	mov	r2, r0
 8027bc4:	68bb      	ldr	r3, [r7, #8]
 8027bc6:	4293      	cmp	r3, r2
 8027bc8:	bf8c      	ite	hi
 8027bca:	2301      	movhi	r3, #1
 8027bcc:	2300      	movls	r3, #0
 8027bce:	b2db      	uxtb	r3, r3
 8027bd0:	2b00      	cmp	r3, #0
 8027bd2:	d001      	beq.n	8027bd8 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8027bd4:	f015 fc3f 	bl	803d456 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8027bd8:	68bb      	ldr	r3, [r7, #8]
 8027bda:	011b      	lsls	r3, r3, #4
 8027bdc:	4618      	mov	r0, r3
 8027bde:	f015 fc29 	bl	803d434 <_Znwj>
 8027be2:	4603      	mov	r3, r0
      }
 8027be4:	4618      	mov	r0, r3
 8027be6:	3710      	adds	r7, #16
 8027be8:	46bd      	mov	sp, r7
 8027bea:	bd80      	pop	{r7, pc}

08027bec <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8027bec:	b580      	push	{r7, lr}
 8027bee:	b082      	sub	sp, #8
 8027bf0:	af00      	add	r7, sp, #0
 8027bf2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8027bf4:	6878      	ldr	r0, [r7, #4]
 8027bf6:	f000 f820 	bl	8027c3a <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8027bfa:	4603      	mov	r3, r0
 8027bfc:	4618      	mov	r0, r3
 8027bfe:	3708      	adds	r7, #8
 8027c00:	46bd      	mov	sp, r7
 8027c02:	bd80      	pop	{r7, pc}

08027c04 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8027c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027c06:	b085      	sub	sp, #20
 8027c08:	af00      	add	r7, sp, #0
 8027c0a:	60f8      	str	r0, [r7, #12]
 8027c0c:	60b9      	str	r1, [r7, #8]
 8027c0e:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8027c10:	68fc      	ldr	r4, [r7, #12]
 8027c12:	68b8      	ldr	r0, [r7, #8]
 8027c14:	f7f9 f91e 	bl	8020e54 <_ZSt17__size_to_integerj>
 8027c18:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8027c1a:	f107 030c 	add.w	r3, r7, #12
 8027c1e:	4618      	mov	r0, r3
 8027c20:	f000 fb0a 	bl	8028238 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8027c24:	4633      	mov	r3, r6
 8027c26:	687a      	ldr	r2, [r7, #4]
 8027c28:	4629      	mov	r1, r5
 8027c2a:	4620      	mov	r0, r4
 8027c2c:	f000 fb0f 	bl	802824e <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 8027c30:	4603      	mov	r3, r0
    }
 8027c32:	4618      	mov	r0, r3
 8027c34:	3714      	adds	r7, #20
 8027c36:	46bd      	mov	sp, r7
 8027c38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027c3a <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8027c3a:	b480      	push	{r7}
 8027c3c:	b083      	sub	sp, #12
 8027c3e:	af00      	add	r7, sp, #0
 8027c40:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8027c42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8027c46:	4618      	mov	r0, r3
 8027c48:	370c      	adds	r7, #12
 8027c4a:	46bd      	mov	sp, r7
 8027c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c50:	4770      	bx	lr

08027c52 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8027c52:	b580      	push	{r7, lr}
 8027c54:	b086      	sub	sp, #24
 8027c56:	af00      	add	r7, sp, #0
 8027c58:	60f8      	str	r0, [r7, #12]
 8027c5a:	60b9      	str	r1, [r7, #8]
 8027c5c:	607a      	str	r2, [r7, #4]
 8027c5e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8027c60:	68ba      	ldr	r2, [r7, #8]
 8027c62:	68fb      	ldr	r3, [r7, #12]
 8027c64:	1ad3      	subs	r3, r2, r3
 8027c66:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8027c68:	697b      	ldr	r3, [r7, #20]
 8027c6a:	2b00      	cmp	r3, #0
 8027c6c:	dd05      	ble.n	8027c7a <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8027c6e:	697b      	ldr	r3, [r7, #20]
 8027c70:	461a      	mov	r2, r3
 8027c72:	68f9      	ldr	r1, [r7, #12]
 8027c74:	6878      	ldr	r0, [r7, #4]
 8027c76:	f015 fc7f 	bl	803d578 <memmove>
      return __result + __count;
 8027c7a:	697b      	ldr	r3, [r7, #20]
 8027c7c:	687a      	ldr	r2, [r7, #4]
 8027c7e:	4413      	add	r3, r2
    }
 8027c80:	4618      	mov	r0, r3
 8027c82:	3718      	adds	r7, #24
 8027c84:	46bd      	mov	sp, r7
 8027c86:	bd80      	pop	{r7, pc}

08027c88 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8027c88:	b480      	push	{r7}
 8027c8a:	b083      	sub	sp, #12
 8027c8c:	af00      	add	r7, sp, #0
 8027c8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8027c90:	687b      	ldr	r3, [r7, #4]
 8027c92:	4618      	mov	r0, r3
 8027c94:	370c      	adds	r7, #12
 8027c96:	46bd      	mov	sp, r7
 8027c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c9c:	4770      	bx	lr

08027c9e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8027c9e:	b580      	push	{r7, lr}
 8027ca0:	b084      	sub	sp, #16
 8027ca2:	af00      	add	r7, sp, #0
 8027ca4:	60f8      	str	r0, [r7, #12]
 8027ca6:	60b9      	str	r1, [r7, #8]
 8027ca8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8027caa:	687a      	ldr	r2, [r7, #4]
 8027cac:	68b9      	ldr	r1, [r7, #8]
 8027cae:	68f8      	ldr	r0, [r7, #12]
 8027cb0:	f000 fae8 	bl	8028284 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8027cb4:	4603      	mov	r3, r0
 8027cb6:	4618      	mov	r0, r3
 8027cb8:	3710      	adds	r7, #16
 8027cba:	46bd      	mov	sp, r7
 8027cbc:	bd80      	pop	{r7, pc}

08027cbe <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8027cbe:	b590      	push	{r4, r7, lr}
 8027cc0:	b085      	sub	sp, #20
 8027cc2:	af00      	add	r7, sp, #0
 8027cc4:	60f8      	str	r0, [r7, #12]
 8027cc6:	60b9      	str	r1, [r7, #8]
 8027cc8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8027cca:	68f8      	ldr	r0, [r7, #12]
 8027ccc:	f7fd f948 	bl	8024f60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8027cd0:	4604      	mov	r4, r0
 8027cd2:	68b8      	ldr	r0, [r7, #8]
 8027cd4:	f7fd f944 	bl	8024f60 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8027cd8:	4603      	mov	r3, r0
 8027cda:	687a      	ldr	r2, [r7, #4]
 8027cdc:	4619      	mov	r1, r3
 8027cde:	4620      	mov	r0, r4
 8027ce0:	f000 fae8 	bl	80282b4 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 8027ce4:	4603      	mov	r3, r0
    }
 8027ce6:	4618      	mov	r0, r3
 8027ce8:	3714      	adds	r7, #20
 8027cea:	46bd      	mov	sp, r7
 8027cec:	bd90      	pop	{r4, r7, pc}

08027cee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8027cee:	b580      	push	{r7, lr}
 8027cf0:	b086      	sub	sp, #24
 8027cf2:	af00      	add	r7, sp, #0
 8027cf4:	60f8      	str	r0, [r7, #12]
 8027cf6:	60b9      	str	r1, [r7, #8]
 8027cf8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8027cfa:	68ba      	ldr	r2, [r7, #8]
 8027cfc:	68fb      	ldr	r3, [r7, #12]
 8027cfe:	1ad3      	subs	r3, r2, r3
 8027d00:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027d02:	697b      	ldr	r3, [r7, #20]
 8027d04:	2b00      	cmp	r3, #0
 8027d06:	d005      	beq.n	8027d14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8027d08:	697b      	ldr	r3, [r7, #20]
 8027d0a:	461a      	mov	r2, r3
 8027d0c:	68f9      	ldr	r1, [r7, #12]
 8027d0e:	6878      	ldr	r0, [r7, #4]
 8027d10:	f015 fc32 	bl	803d578 <memmove>
	  return __result + _Num;
 8027d14:	697b      	ldr	r3, [r7, #20]
 8027d16:	687a      	ldr	r2, [r7, #4]
 8027d18:	4413      	add	r3, r2
	}
 8027d1a:	4618      	mov	r0, r3
 8027d1c:	3718      	adds	r7, #24
 8027d1e:	46bd      	mov	sp, r7
 8027d20:	bd80      	pop	{r7, pc}

08027d22 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8027d22:	b580      	push	{r7, lr}
 8027d24:	b084      	sub	sp, #16
 8027d26:	af00      	add	r7, sp, #0
 8027d28:	60f8      	str	r0, [r7, #12]
 8027d2a:	60b9      	str	r1, [r7, #8]
 8027d2c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8027d2e:	687a      	ldr	r2, [r7, #4]
 8027d30:	68b9      	ldr	r1, [r7, #8]
 8027d32:	68f8      	ldr	r0, [r7, #12]
 8027d34:	f000 fae1 	bl	80282fa <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
 8027d38:	4603      	mov	r3, r0
 8027d3a:	4618      	mov	r0, r3
 8027d3c:	3710      	adds	r7, #16
 8027d3e:	46bd      	mov	sp, r7
 8027d40:	bd80      	pop	{r7, pc}

08027d42 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 8027d42:	b580      	push	{r7, lr}
 8027d44:	b082      	sub	sp, #8
 8027d46:	af00      	add	r7, sp, #0
 8027d48:	6078      	str	r0, [r7, #4]
 8027d4a:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 8027d4c:	683b      	ldr	r3, [r7, #0]
 8027d4e:	425b      	negs	r3, r3
 8027d50:	4619      	mov	r1, r3
 8027d52:	6878      	ldr	r0, [r7, #4]
 8027d54:	f7fe fd12 	bl	802677c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
 8027d58:	4603      	mov	r3, r0
 8027d5a:	4618      	mov	r0, r3
 8027d5c:	3708      	adds	r7, #8
 8027d5e:	46bd      	mov	sp, r7
 8027d60:	bd80      	pop	{r7, pc}

08027d62 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8027d62:	b580      	push	{r7, lr}
 8027d64:	b088      	sub	sp, #32
 8027d66:	af00      	add	r7, sp, #0
 8027d68:	60f8      	str	r0, [r7, #12]
 8027d6a:	60b9      	str	r1, [r7, #8]
 8027d6c:	607a      	str	r2, [r7, #4]
 8027d6e:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8027d70:	f107 0310 	add.w	r3, r7, #16
 8027d74:	6839      	ldr	r1, [r7, #0]
 8027d76:	4618      	mov	r0, r3
 8027d78:	f7fc fb8e 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027d7c:	68f8      	ldr	r0, [r7, #12]
 8027d7e:	f107 0310 	add.w	r3, r7, #16
 8027d82:	687a      	ldr	r2, [r7, #4]
 8027d84:	68b9      	ldr	r1, [r7, #8]
 8027d86:	f7fd f9c3 	bl	8025110 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8027d8a:	68f8      	ldr	r0, [r7, #12]
 8027d8c:	3720      	adds	r7, #32
 8027d8e:	46bd      	mov	sp, r7
 8027d90:	bd80      	pop	{r7, pc}

08027d92 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8027d92:	b580      	push	{r7, lr}
 8027d94:	b082      	sub	sp, #8
 8027d96:	af00      	add	r7, sp, #0
 8027d98:	6078      	str	r0, [r7, #4]
 8027d9a:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8027d9c:	683b      	ldr	r3, [r7, #0]
 8027d9e:	1c5a      	adds	r2, r3, #1
 8027da0:	687b      	ldr	r3, [r7, #4]
 8027da2:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8027da4:	6879      	ldr	r1, [r7, #4]
 8027da6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8027da8:	6879      	ldr	r1, [r7, #4]
 8027daa:	6809      	ldr	r1, [r1, #0]
 8027dac:	1a41      	subs	r1, r0, r1
 8027dae:	1089      	asrs	r1, r1, #2
 8027db0:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8027db2:	429a      	cmp	r2, r3
 8027db4:	d904      	bls.n	8027dc0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8027db6:	2200      	movs	r2, #0
 8027db8:	6839      	ldr	r1, [r7, #0]
 8027dba:	6878      	ldr	r0, [r7, #4]
 8027dbc:	f7fe fc26 	bl	802660c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8027dc0:	bf00      	nop
 8027dc2:	3708      	adds	r7, #8
 8027dc4:	46bd      	mov	sp, r7
 8027dc6:	bd80      	pop	{r7, pc}

08027dc8 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>:
    make_move_iterator(_Iterator __i)
 8027dc8:	b580      	push	{r7, lr}
 8027dca:	b086      	sub	sp, #24
 8027dcc:	af00      	add	r7, sp, #0
 8027dce:	6078      	str	r0, [r7, #4]
 8027dd0:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8027dd2:	6838      	ldr	r0, [r7, #0]
 8027dd4:	f000 faa1 	bl	802831a <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8027dd8:	4602      	mov	r2, r0
 8027dda:	f107 0308 	add.w	r3, r7, #8
 8027dde:	4611      	mov	r1, r2
 8027de0:	4618      	mov	r0, r3
 8027de2:	f7fc fb59 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027de6:	f107 0308 	add.w	r3, r7, #8
 8027dea:	4619      	mov	r1, r3
 8027dec:	6878      	ldr	r0, [r7, #4]
 8027dee:	f000 fa9f 	bl	8028330 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>
 8027df2:	6878      	ldr	r0, [r7, #4]
 8027df4:	3718      	adds	r7, #24
 8027df6:	46bd      	mov	sp, r7
 8027df8:	bd80      	pop	{r7, pc}

08027dfa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>:
    class move_iterator
 8027dfa:	b580      	push	{r7, lr}
 8027dfc:	b082      	sub	sp, #8
 8027dfe:	af00      	add	r7, sp, #0
 8027e00:	6078      	str	r0, [r7, #4]
 8027e02:	6039      	str	r1, [r7, #0]
 8027e04:	687b      	ldr	r3, [r7, #4]
 8027e06:	683a      	ldr	r2, [r7, #0]
 8027e08:	4611      	mov	r1, r2
 8027e0a:	4618      	mov	r0, r3
 8027e0c:	f7fc fb44 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027e10:	687b      	ldr	r3, [r7, #4]
 8027e12:	4618      	mov	r0, r3
 8027e14:	3708      	adds	r7, #8
 8027e16:	46bd      	mov	sp, r7
 8027e18:	bd80      	pop	{r7, pc}

08027e1a <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8027e1a:	b580      	push	{r7, lr}
 8027e1c:	b090      	sub	sp, #64	; 0x40
 8027e1e:	af00      	add	r7, sp, #0
 8027e20:	60f8      	str	r0, [r7, #12]
 8027e22:	60b9      	str	r1, [r7, #8]
 8027e24:	607a      	str	r2, [r7, #4]
 8027e26:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8027e28:	f107 0310 	add.w	r3, r7, #16
 8027e2c:	68b9      	ldr	r1, [r7, #8]
 8027e2e:	4618      	mov	r0, r3
 8027e30:	f7ff ffe3 	bl	8027dfa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8027e34:	f107 0320 	add.w	r3, r7, #32
 8027e38:	6879      	ldr	r1, [r7, #4]
 8027e3a:	4618      	mov	r0, r3
 8027e3c:	f7ff ffdd 	bl	8027dfa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8027e40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027e44:	6839      	ldr	r1, [r7, #0]
 8027e46:	4618      	mov	r0, r3
 8027e48:	f7fc fb26 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027e4c:	68f8      	ldr	r0, [r7, #12]
 8027e4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027e52:	f107 0220 	add.w	r2, r7, #32
 8027e56:	f107 0110 	add.w	r1, r7, #16
 8027e5a:	f000 fa7c 	bl	8028356 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 8027e5e:	68f8      	ldr	r0, [r7, #12]
 8027e60:	3740      	adds	r7, #64	; 0x40
 8027e62:	46bd      	mov	sp, r7
 8027e64:	bd80      	pop	{r7, pc}

08027e66 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __miter_base(_Iterator __it)
 8027e66:	b580      	push	{r7, lr}
 8027e68:	b082      	sub	sp, #8
 8027e6a:	af00      	add	r7, sp, #0
 8027e6c:	6078      	str	r0, [r7, #4]
 8027e6e:	6039      	str	r1, [r7, #0]
    { return __it; }
 8027e70:	6839      	ldr	r1, [r7, #0]
 8027e72:	6878      	ldr	r0, [r7, #4]
 8027e74:	f7fc fb10 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027e78:	6878      	ldr	r0, [r7, #4]
 8027e7a:	3708      	adds	r7, #8
 8027e7c:	46bd      	mov	sp, r7
 8027e7e:	bd80      	pop	{r7, pc}

08027e80 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8027e80:	b580      	push	{r7, lr}
 8027e82:	b0a0      	sub	sp, #128	; 0x80
 8027e84:	af00      	add	r7, sp, #0
 8027e86:	60f8      	str	r0, [r7, #12]
 8027e88:	60b9      	str	r1, [r7, #8]
 8027e8a:	607a      	str	r2, [r7, #4]
 8027e8c:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8027e8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027e92:	68b9      	ldr	r1, [r7, #8]
 8027e94:	4618      	mov	r0, r3
 8027e96:	f7fc faff 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027e9a:	f107 0320 	add.w	r3, r7, #32
 8027e9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8027ea2:	4611      	mov	r1, r2
 8027ea4:	4618      	mov	r0, r3
 8027ea6:	f7ff f952 	bl	802714e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8027eae:	6879      	ldr	r1, [r7, #4]
 8027eb0:	4618      	mov	r0, r3
 8027eb2:	f7fc faf1 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027eb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027eba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8027ebe:	4611      	mov	r1, r2
 8027ec0:	4618      	mov	r0, r3
 8027ec2:	f7ff f944 	bl	802714e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027ec6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8027eca:	6839      	ldr	r1, [r7, #0]
 8027ecc:	4618      	mov	r0, r3
 8027ece:	f7fc fae3 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027ed2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8027ed6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8027eda:	4611      	mov	r1, r2
 8027edc:	4618      	mov	r0, r3
 8027ede:	f7ff f936 	bl	802714e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027ee2:	f107 0010 	add.w	r0, r7, #16
 8027ee6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8027eea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027eee:	f107 0120 	add.w	r1, r7, #32
 8027ef2:	f000 fa59 	bl	80283a8 <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8027ef6:	68fb      	ldr	r3, [r7, #12]
 8027ef8:	f107 0210 	add.w	r2, r7, #16
 8027efc:	6839      	ldr	r1, [r7, #0]
 8027efe:	4618      	mov	r0, r3
 8027f00:	f7ff f998 	bl	8027234 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8027f04:	68f8      	ldr	r0, [r7, #12]
 8027f06:	3780      	adds	r7, #128	; 0x80
 8027f08:	46bd      	mov	sp, r7
 8027f0a:	bd80      	pop	{r7, pc}

08027f0c <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8027f0c:	b580      	push	{r7, lr}
 8027f0e:	b0a0      	sub	sp, #128	; 0x80
 8027f10:	af00      	add	r7, sp, #0
 8027f12:	60f8      	str	r0, [r7, #12]
 8027f14:	60b9      	str	r1, [r7, #8]
 8027f16:	607a      	str	r2, [r7, #4]
 8027f18:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 8027f1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027f1e:	68b9      	ldr	r1, [r7, #8]
 8027f20:	4618      	mov	r0, r3
 8027f22:	f7fc fab9 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027f26:	f107 0320 	add.w	r3, r7, #32
 8027f2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8027f2e:	4611      	mov	r1, r2
 8027f30:	4618      	mov	r0, r3
 8027f32:	f7ff f90c 	bl	802714e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027f36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8027f3a:	6879      	ldr	r1, [r7, #4]
 8027f3c:	4618      	mov	r0, r3
 8027f3e:	f7fc faab 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027f42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027f46:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8027f4a:	4611      	mov	r1, r2
 8027f4c:	4618      	mov	r0, r3
 8027f4e:	f7ff f8fe 	bl	802714e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027f52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8027f56:	6839      	ldr	r1, [r7, #0]
 8027f58:	4618      	mov	r0, r3
 8027f5a:	f7fc fa9d 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027f5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8027f62:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8027f66:	4611      	mov	r1, r2
 8027f68:	4618      	mov	r0, r3
 8027f6a:	f7ff f8f0 	bl	802714e <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027f6e:	f107 0010 	add.w	r0, r7, #16
 8027f72:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8027f76:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027f7a:	f107 0120 	add.w	r1, r7, #32
 8027f7e:	f000 fa39 	bl	80283f4 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8027f82:	68fb      	ldr	r3, [r7, #12]
 8027f84:	f107 0210 	add.w	r2, r7, #16
 8027f88:	6839      	ldr	r1, [r7, #0]
 8027f8a:	4618      	mov	r0, r3
 8027f8c:	f7ff f952 	bl	8027234 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8027f90:	68f8      	ldr	r0, [r7, #12]
 8027f92:	3780      	adds	r7, #128	; 0x80
 8027f94:	46bd      	mov	sp, r7
 8027f96:	bd80      	pop	{r7, pc}

08027f98 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8027f98:	b580      	push	{r7, lr}
 8027f9a:	b082      	sub	sp, #8
 8027f9c:	af00      	add	r7, sp, #0
 8027f9e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8027fa0:	6878      	ldr	r0, [r7, #4]
 8027fa2:	f000 f857 	bl	8028054 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8027fa6:	4603      	mov	r3, r0
 8027fa8:	4618      	mov	r0, r3
 8027faa:	3708      	adds	r7, #8
 8027fac:	46bd      	mov	sp, r7
 8027fae:	bd80      	pop	{r7, pc}

08027fb0 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8027fb0:	b480      	push	{r7}
 8027fb2:	b083      	sub	sp, #12
 8027fb4:	af00      	add	r7, sp, #0
 8027fb6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027fb8:	687b      	ldr	r3, [r7, #4]
 8027fba:	4618      	mov	r0, r3
 8027fbc:	370c      	adds	r7, #12
 8027fbe:	46bd      	mov	sp, r7
 8027fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fc4:	4770      	bx	lr

08027fc6 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8027fc6:	b5b0      	push	{r4, r5, r7, lr}
 8027fc8:	b084      	sub	sp, #16
 8027fca:	af00      	add	r7, sp, #0
 8027fcc:	60f8      	str	r0, [r7, #12]
 8027fce:	60b9      	str	r1, [r7, #8]
 8027fd0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8027fd2:	68f8      	ldr	r0, [r7, #12]
 8027fd4:	f000 fa34 	bl	8028440 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027fd8:	4604      	mov	r4, r0
 8027fda:	68b8      	ldr	r0, [r7, #8]
 8027fdc:	f000 fa30 	bl	8028440 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027fe0:	4605      	mov	r5, r0
 8027fe2:	687b      	ldr	r3, [r7, #4]
 8027fe4:	4618      	mov	r0, r3
 8027fe6:	f000 fa2b 	bl	8028440 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027fea:	4603      	mov	r3, r0
 8027fec:	461a      	mov	r2, r3
 8027fee:	4629      	mov	r1, r5
 8027ff0:	4620      	mov	r0, r4
 8027ff2:	f000 fa30 	bl	8028456 <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8027ff6:	4602      	mov	r2, r0
 8027ff8:	1d3b      	adds	r3, r7, #4
 8027ffa:	4611      	mov	r1, r2
 8027ffc:	4618      	mov	r0, r3
 8027ffe:	f000 fa3a 	bl	8028476 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8028002:	4603      	mov	r3, r0
    }
 8028004:	4618      	mov	r0, r3
 8028006:	3710      	adds	r7, #16
 8028008:	46bd      	mov	sp, r7
 802800a:	bdb0      	pop	{r4, r5, r7, pc}

0802800c <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 802800c:	b5b0      	push	{r4, r5, r7, lr}
 802800e:	b084      	sub	sp, #16
 8028010:	af00      	add	r7, sp, #0
 8028012:	60f8      	str	r0, [r7, #12]
 8028014:	60b9      	str	r1, [r7, #8]
 8028016:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8028018:	68f8      	ldr	r0, [r7, #12]
 802801a:	f000 fa11 	bl	8028440 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802801e:	4604      	mov	r4, r0
 8028020:	68b8      	ldr	r0, [r7, #8]
 8028022:	f000 fa0d 	bl	8028440 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8028026:	4605      	mov	r5, r0
 8028028:	687b      	ldr	r3, [r7, #4]
 802802a:	4618      	mov	r0, r3
 802802c:	f000 fa08 	bl	8028440 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8028030:	4603      	mov	r3, r0
 8028032:	461a      	mov	r2, r3
 8028034:	4629      	mov	r1, r5
 8028036:	4620      	mov	r0, r4
 8028038:	f000 fa29 	bl	802848e <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802803c:	4602      	mov	r2, r0
 802803e:	1d3b      	adds	r3, r7, #4
 8028040:	4611      	mov	r1, r2
 8028042:	4618      	mov	r0, r3
 8028044:	f000 fa17 	bl	8028476 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8028048:	4603      	mov	r3, r0
    }
 802804a:	4618      	mov	r0, r3
 802804c:	3710      	adds	r7, #16
 802804e:	46bd      	mov	sp, r7
 8028050:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028054 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8028054:	b480      	push	{r7}
 8028056:	b083      	sub	sp, #12
 8028058:	af00      	add	r7, sp, #0
 802805a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802805c:	4b03      	ldr	r3, [pc, #12]	; (802806c <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv+0x18>)
      }
 802805e:	4618      	mov	r0, r3
 8028060:	370c      	adds	r7, #12
 8028062:	46bd      	mov	sp, r7
 8028064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028068:	4770      	bx	lr
 802806a:	bf00      	nop
 802806c:	06666666 	.word	0x06666666

08028070 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8028070:	b480      	push	{r7}
 8028072:	b083      	sub	sp, #12
 8028074:	af00      	add	r7, sp, #0
 8028076:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8028078:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 802807c:	4618      	mov	r0, r3
 802807e:	370c      	adds	r7, #12
 8028080:	46bd      	mov	sp, r7
 8028082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028086:	4770      	bx	lr

08028088 <_ZSt11__addressofI7RequestEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8028088:	b480      	push	{r7}
 802808a:	b083      	sub	sp, #12
 802808c:	af00      	add	r7, sp, #0
 802808e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8028090:	687b      	ldr	r3, [r7, #4]
 8028092:	4618      	mov	r0, r3
 8028094:	370c      	adds	r7, #12
 8028096:	46bd      	mov	sp, r7
 8028098:	f85d 7b04 	ldr.w	r7, [sp], #4
 802809c:	4770      	bx	lr

0802809e <_ZSt8_DestroyI7RequestEvPT_>:
    _Destroy(_Tp* __pointer)
 802809e:	b580      	push	{r7, lr}
 80280a0:	b082      	sub	sp, #8
 80280a2:	af00      	add	r7, sp, #0
 80280a4:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80280a6:	6878      	ldr	r0, [r7, #4]
 80280a8:	f7f8 ffa9 	bl	8020ffe <_ZN7RequestD1Ev>
    }
 80280ac:	bf00      	nop
 80280ae:	3708      	adds	r7, #8
 80280b0:	46bd      	mov	sp, r7
 80280b2:	bd80      	pop	{r7, pc}

080280b4 <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80280b4:	b480      	push	{r7}
 80280b6:	b083      	sub	sp, #12
 80280b8:	af00      	add	r7, sp, #0
 80280ba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80280bc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80280c0:	4618      	mov	r0, r3
 80280c2:	370c      	adds	r7, #12
 80280c4:	46bd      	mov	sp, r7
 80280c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280ca:	4770      	bx	lr

080280cc <_ZSt11__addressofI8ResponceEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80280cc:	b480      	push	{r7}
 80280ce:	b083      	sub	sp, #12
 80280d0:	af00      	add	r7, sp, #0
 80280d2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80280d4:	687b      	ldr	r3, [r7, #4]
 80280d6:	4618      	mov	r0, r3
 80280d8:	370c      	adds	r7, #12
 80280da:	46bd      	mov	sp, r7
 80280dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280e0:	4770      	bx	lr

080280e2 <_ZSt8_DestroyI8ResponceEvPT_>:
    _Destroy(_Tp* __pointer)
 80280e2:	b580      	push	{r7, lr}
 80280e4:	b082      	sub	sp, #8
 80280e6:	af00      	add	r7, sp, #0
 80280e8:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80280ea:	6878      	ldr	r0, [r7, #4]
 80280ec:	f7f8 fffc 	bl	80210e8 <_ZN8ResponceD1Ev>
    }
 80280f0:	bf00      	nop
 80280f2:	3708      	adds	r7, #8
 80280f4:	46bd      	mov	sp, r7
 80280f6:	bd80      	pop	{r7, pc}

080280f8 <_ZSt12__niter_baseIPP7RequestET_S3_>:
    __niter_base(_Iterator __it)
 80280f8:	b480      	push	{r7}
 80280fa:	b083      	sub	sp, #12
 80280fc:	af00      	add	r7, sp, #0
 80280fe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8028100:	687b      	ldr	r3, [r7, #4]
 8028102:	4618      	mov	r0, r3
 8028104:	370c      	adds	r7, #12
 8028106:	46bd      	mov	sp, r7
 8028108:	f85d 7b04 	ldr.w	r7, [sp], #4
 802810c:	4770      	bx	lr

0802810e <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802810e:	b580      	push	{r7, lr}
 8028110:	b084      	sub	sp, #16
 8028112:	af00      	add	r7, sp, #0
 8028114:	60f8      	str	r0, [r7, #12]
 8028116:	60b9      	str	r1, [r7, #8]
 8028118:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802811a:	687a      	ldr	r2, [r7, #4]
 802811c:	68b9      	ldr	r1, [r7, #8]
 802811e:	68f8      	ldr	r0, [r7, #12]
 8028120:	f000 f9c5 	bl	80284ae <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8028124:	4603      	mov	r3, r0
 8028126:	4618      	mov	r0, r3
 8028128:	3710      	adds	r7, #16
 802812a:	46bd      	mov	sp, r7
 802812c:	bd80      	pop	{r7, pc}

0802812e <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802812e:	b480      	push	{r7}
 8028130:	b083      	sub	sp, #12
 8028132:	af00      	add	r7, sp, #0
 8028134:	6078      	str	r0, [r7, #4]
 8028136:	6039      	str	r1, [r7, #0]
    { return __res; }
 8028138:	683b      	ldr	r3, [r7, #0]
 802813a:	4618      	mov	r0, r3
 802813c:	370c      	adds	r7, #12
 802813e:	46bd      	mov	sp, r7
 8028140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028144:	4770      	bx	lr

08028146 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8028146:	b580      	push	{r7, lr}
 8028148:	b084      	sub	sp, #16
 802814a:	af00      	add	r7, sp, #0
 802814c:	60f8      	str	r0, [r7, #12]
 802814e:	60b9      	str	r1, [r7, #8]
 8028150:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8028152:	687a      	ldr	r2, [r7, #4]
 8028154:	68b9      	ldr	r1, [r7, #8]
 8028156:	68f8      	ldr	r0, [r7, #12]
 8028158:	f000 f9b9 	bl	80284ce <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 802815c:	4603      	mov	r3, r0
 802815e:	4618      	mov	r0, r3
 8028160:	3710      	adds	r7, #16
 8028162:	46bd      	mov	sp, r7
 8028164:	bd80      	pop	{r7, pc}

08028166 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8028166:	b580      	push	{r7, lr}
 8028168:	b082      	sub	sp, #8
 802816a:	af00      	add	r7, sp, #0
 802816c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 802816e:	6878      	ldr	r0, [r7, #4]
 8028170:	f000 f856 	bl	8028220 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 8028174:	4603      	mov	r3, r0
 8028176:	4618      	mov	r0, r3
 8028178:	3708      	adds	r7, #8
 802817a:	46bd      	mov	sp, r7
 802817c:	bd80      	pop	{r7, pc}

0802817e <_ZSt12__miter_baseIPP8ResponceET_S3_>:
    __miter_base(_Iterator __it)
 802817e:	b480      	push	{r7}
 8028180:	b083      	sub	sp, #12
 8028182:	af00      	add	r7, sp, #0
 8028184:	6078      	str	r0, [r7, #4]
    { return __it; }
 8028186:	687b      	ldr	r3, [r7, #4]
 8028188:	4618      	mov	r0, r3
 802818a:	370c      	adds	r7, #12
 802818c:	46bd      	mov	sp, r7
 802818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028192:	4770      	bx	lr

08028194 <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8028194:	b5b0      	push	{r4, r5, r7, lr}
 8028196:	b084      	sub	sp, #16
 8028198:	af00      	add	r7, sp, #0
 802819a:	60f8      	str	r0, [r7, #12]
 802819c:	60b9      	str	r1, [r7, #8]
 802819e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80281a0:	68f8      	ldr	r0, [r7, #12]
 80281a2:	f000 f9a4 	bl	80284ee <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80281a6:	4604      	mov	r4, r0
 80281a8:	68b8      	ldr	r0, [r7, #8]
 80281aa:	f000 f9a0 	bl	80284ee <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80281ae:	4605      	mov	r5, r0
 80281b0:	687b      	ldr	r3, [r7, #4]
 80281b2:	4618      	mov	r0, r3
 80281b4:	f000 f99b 	bl	80284ee <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80281b8:	4603      	mov	r3, r0
 80281ba:	461a      	mov	r2, r3
 80281bc:	4629      	mov	r1, r5
 80281be:	4620      	mov	r0, r4
 80281c0:	f000 f9a0 	bl	8028504 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80281c4:	4602      	mov	r2, r0
 80281c6:	1d3b      	adds	r3, r7, #4
 80281c8:	4611      	mov	r1, r2
 80281ca:	4618      	mov	r0, r3
 80281cc:	f000 f9aa 	bl	8028524 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 80281d0:	4603      	mov	r3, r0
    }
 80281d2:	4618      	mov	r0, r3
 80281d4:	3710      	adds	r7, #16
 80281d6:	46bd      	mov	sp, r7
 80281d8:	bdb0      	pop	{r4, r5, r7, pc}

080281da <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80281da:	b5b0      	push	{r4, r5, r7, lr}
 80281dc:	b084      	sub	sp, #16
 80281de:	af00      	add	r7, sp, #0
 80281e0:	60f8      	str	r0, [r7, #12]
 80281e2:	60b9      	str	r1, [r7, #8]
 80281e4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80281e6:	68f8      	ldr	r0, [r7, #12]
 80281e8:	f000 f981 	bl	80284ee <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80281ec:	4604      	mov	r4, r0
 80281ee:	68b8      	ldr	r0, [r7, #8]
 80281f0:	f000 f97d 	bl	80284ee <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80281f4:	4605      	mov	r5, r0
 80281f6:	687b      	ldr	r3, [r7, #4]
 80281f8:	4618      	mov	r0, r3
 80281fa:	f000 f978 	bl	80284ee <_ZSt12__niter_baseIPP8ResponceET_S3_>
 80281fe:	4603      	mov	r3, r0
 8028200:	461a      	mov	r2, r3
 8028202:	4629      	mov	r1, r5
 8028204:	4620      	mov	r0, r4
 8028206:	f000 f999 	bl	802853c <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 802820a:	4602      	mov	r2, r0
 802820c:	1d3b      	adds	r3, r7, #4
 802820e:	4611      	mov	r1, r2
 8028210:	4618      	mov	r0, r3
 8028212:	f000 f987 	bl	8028524 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8028216:	4603      	mov	r3, r0
    }
 8028218:	4618      	mov	r0, r3
 802821a:	3710      	adds	r7, #16
 802821c:	46bd      	mov	sp, r7
 802821e:	bdb0      	pop	{r4, r5, r7, pc}

08028220 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8028220:	b480      	push	{r7}
 8028222:	b083      	sub	sp, #12
 8028224:	af00      	add	r7, sp, #0
 8028226:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8028228:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 802822c:	4618      	mov	r0, r3
 802822e:	370c      	adds	r7, #12
 8028230:	46bd      	mov	sp, r7
 8028232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028236:	4770      	bx	lr

08028238 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8028238:	b480      	push	{r7}
 802823a:	b083      	sub	sp, #12
 802823c:	af00      	add	r7, sp, #0
 802823e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8028240:	bf00      	nop
 8028242:	4618      	mov	r0, r3
 8028244:	370c      	adds	r7, #12
 8028246:	46bd      	mov	sp, r7
 8028248:	f85d 7b04 	ldr.w	r7, [sp], #4
 802824c:	4770      	bx	lr

0802824e <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 802824e:	b580      	push	{r7, lr}
 8028250:	b084      	sub	sp, #16
 8028252:	af00      	add	r7, sp, #0
 8028254:	60f8      	str	r0, [r7, #12]
 8028256:	60b9      	str	r1, [r7, #8]
 8028258:	607a      	str	r2, [r7, #4]
 802825a:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 802825c:	68bb      	ldr	r3, [r7, #8]
 802825e:	2b00      	cmp	r3, #0
 8028260:	d101      	bne.n	8028266 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8028262:	68fb      	ldr	r3, [r7, #12]
 8028264:	e00a      	b.n	802827c <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8028266:	68fa      	ldr	r2, [r7, #12]
 8028268:	68bb      	ldr	r3, [r7, #8]
 802826a:	4413      	add	r3, r2
 802826c:	687a      	ldr	r2, [r7, #4]
 802826e:	4619      	mov	r1, r3
 8028270:	68f8      	ldr	r0, [r7, #12]
 8028272:	f000 f973 	bl	802855c <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 8028276:	68fa      	ldr	r2, [r7, #12]
 8028278:	68bb      	ldr	r3, [r7, #8]
 802827a:	4413      	add	r3, r2
    }
 802827c:	4618      	mov	r0, r3
 802827e:	3710      	adds	r7, #16
 8028280:	46bd      	mov	sp, r7
 8028282:	bd80      	pop	{r7, pc}

08028284 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8028284:	b590      	push	{r4, r7, lr}
 8028286:	b085      	sub	sp, #20
 8028288:	af00      	add	r7, sp, #0
 802828a:	60f8      	str	r0, [r7, #12]
 802828c:	60b9      	str	r1, [r7, #8]
 802828e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028290:	68f8      	ldr	r0, [r7, #12]
 8028292:	f000 f972 	bl	802857a <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8028296:	4604      	mov	r4, r0
 8028298:	68b8      	ldr	r0, [r7, #8]
 802829a:	f000 f96e 	bl	802857a <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 802829e:	4603      	mov	r3, r0
 80282a0:	687a      	ldr	r2, [r7, #4]
 80282a2:	4619      	mov	r1, r3
 80282a4:	4620      	mov	r0, r4
 80282a6:	f000 f979 	bl	802859c <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 80282aa:	4603      	mov	r3, r0
    }
 80282ac:	4618      	mov	r0, r3
 80282ae:	3714      	adds	r7, #20
 80282b0:	46bd      	mov	sp, r7
 80282b2:	bd90      	pop	{r4, r7, pc}

080282b4 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80282b4:	b5b0      	push	{r4, r5, r7, lr}
 80282b6:	b084      	sub	sp, #16
 80282b8:	af00      	add	r7, sp, #0
 80282ba:	60f8      	str	r0, [r7, #12]
 80282bc:	60b9      	str	r1, [r7, #8]
 80282be:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80282c0:	68f8      	ldr	r0, [r7, #12]
 80282c2:	f7fd fd2c 	bl	8025d1e <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80282c6:	4604      	mov	r4, r0
 80282c8:	68b8      	ldr	r0, [r7, #8]
 80282ca:	f7fd fd28 	bl	8025d1e <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80282ce:	4605      	mov	r5, r0
 80282d0:	687b      	ldr	r3, [r7, #4]
 80282d2:	4618      	mov	r0, r3
 80282d4:	f7fd fd6f 	bl	8025db6 <_ZSt12__niter_baseIPhET_S1_>
 80282d8:	4603      	mov	r3, r0
 80282da:	461a      	mov	r2, r3
 80282dc:	4629      	mov	r1, r5
 80282de:	4620      	mov	r0, r4
 80282e0:	f7fd fd39 	bl	8025d56 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 80282e4:	4602      	mov	r2, r0
 80282e6:	1d3b      	adds	r3, r7, #4
 80282e8:	4611      	mov	r1, r2
 80282ea:	4618      	mov	r0, r3
 80282ec:	f7fd fd7e 	bl	8025dec <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80282f0:	4603      	mov	r3, r0
    }
 80282f2:	4618      	mov	r0, r3
 80282f4:	3710      	adds	r7, #16
 80282f6:	46bd      	mov	sp, r7
 80282f8:	bdb0      	pop	{r4, r5, r7, pc}

080282fa <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80282fa:	b580      	push	{r7, lr}
 80282fc:	b084      	sub	sp, #16
 80282fe:	af00      	add	r7, sp, #0
 8028300:	60f8      	str	r0, [r7, #12]
 8028302:	60b9      	str	r1, [r7, #8]
 8028304:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8028306:	687a      	ldr	r2, [r7, #4]
 8028308:	68b9      	ldr	r1, [r7, #8]
 802830a:	68f8      	ldr	r0, [r7, #12]
 802830c:	f000 f96a 	bl	80285e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8028310:	4603      	mov	r3, r0
    }
 8028312:	4618      	mov	r0, r3
 8028314:	3710      	adds	r7, #16
 8028316:	46bd      	mov	sp, r7
 8028318:	bd80      	pop	{r7, pc}

0802831a <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 802831a:	b480      	push	{r7}
 802831c:	b083      	sub	sp, #12
 802831e:	af00      	add	r7, sp, #0
 8028320:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028322:	687b      	ldr	r3, [r7, #4]
 8028324:	4618      	mov	r0, r3
 8028326:	370c      	adds	r7, #12
 8028328:	46bd      	mov	sp, r7
 802832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802832e:	4770      	bx	lr

08028330 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>:
      move_iterator(iterator_type __i)
 8028330:	b590      	push	{r4, r7, lr}
 8028332:	b083      	sub	sp, #12
 8028334:	af00      	add	r7, sp, #0
 8028336:	6078      	str	r0, [r7, #4]
 8028338:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 802833a:	687c      	ldr	r4, [r7, #4]
 802833c:	6838      	ldr	r0, [r7, #0]
 802833e:	f7ff ffec 	bl	802831a <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8028342:	4603      	mov	r3, r0
 8028344:	4619      	mov	r1, r3
 8028346:	4620      	mov	r0, r4
 8028348:	f7fc f8a6 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802834c:	687b      	ldr	r3, [r7, #4]
 802834e:	4618      	mov	r0, r3
 8028350:	370c      	adds	r7, #12
 8028352:	46bd      	mov	sp, r7
 8028354:	bd90      	pop	{r4, r7, pc}

08028356 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8028356:	b580      	push	{r7, lr}
 8028358:	b092      	sub	sp, #72	; 0x48
 802835a:	af00      	add	r7, sp, #0
 802835c:	60f8      	str	r0, [r7, #12]
 802835e:	60b9      	str	r1, [r7, #8]
 8028360:	607a      	str	r2, [r7, #4]
 8028362:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8028364:	2301      	movs	r3, #1
 8028366:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 802836a:	f107 0314 	add.w	r3, r7, #20
 802836e:	68b9      	ldr	r1, [r7, #8]
 8028370:	4618      	mov	r0, r3
 8028372:	f7ff fd42 	bl	8027dfa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8028376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802837a:	6879      	ldr	r1, [r7, #4]
 802837c:	4618      	mov	r0, r3
 802837e:	f7ff fd3c 	bl	8027dfa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8028382:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8028386:	6839      	ldr	r1, [r7, #0]
 8028388:	4618      	mov	r0, r3
 802838a:	f7fc f885 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802838e:	68f8      	ldr	r0, [r7, #12]
 8028390:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8028394:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8028398:	f107 0114 	add.w	r1, r7, #20
 802839c:	f000 f94c 	bl	8028638 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>
    }
 80283a0:	68f8      	ldr	r0, [r7, #12]
 80283a2:	3748      	adds	r7, #72	; 0x48
 80283a4:	46bd      	mov	sp, r7
 80283a6:	bd80      	pop	{r7, pc}

080283a8 <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 80283a8:	b580      	push	{r7, lr}
 80283aa:	b090      	sub	sp, #64	; 0x40
 80283ac:	af00      	add	r7, sp, #0
 80283ae:	60f8      	str	r0, [r7, #12]
 80283b0:	60b9      	str	r1, [r7, #8]
 80283b2:	607a      	str	r2, [r7, #4]
 80283b4:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 80283b6:	f107 0310 	add.w	r3, r7, #16
 80283ba:	68b9      	ldr	r1, [r7, #8]
 80283bc:	4618      	mov	r0, r3
 80283be:	f7fc f86b 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80283c2:	f107 0320 	add.w	r3, r7, #32
 80283c6:	6879      	ldr	r1, [r7, #4]
 80283c8:	4618      	mov	r0, r3
 80283ca:	f7fc f865 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80283ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80283d2:	6839      	ldr	r1, [r7, #0]
 80283d4:	4618      	mov	r0, r3
 80283d6:	f7fc f85f 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80283da:	68f8      	ldr	r0, [r7, #12]
 80283dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80283e0:	f107 0220 	add.w	r2, r7, #32
 80283e4:	f107 0110 	add.w	r1, r7, #16
 80283e8:	f000 f94c 	bl	8028684 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 80283ec:	68f8      	ldr	r0, [r7, #12]
 80283ee:	3740      	adds	r7, #64	; 0x40
 80283f0:	46bd      	mov	sp, r7
 80283f2:	bd80      	pop	{r7, pc}

080283f4 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 80283f4:	b580      	push	{r7, lr}
 80283f6:	b090      	sub	sp, #64	; 0x40
 80283f8:	af00      	add	r7, sp, #0
 80283fa:	60f8      	str	r0, [r7, #12]
 80283fc:	60b9      	str	r1, [r7, #8]
 80283fe:	607a      	str	r2, [r7, #4]
 8028400:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 8028402:	f107 0310 	add.w	r3, r7, #16
 8028406:	68b9      	ldr	r1, [r7, #8]
 8028408:	4618      	mov	r0, r3
 802840a:	f7fc f845 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802840e:	f107 0320 	add.w	r3, r7, #32
 8028412:	6879      	ldr	r1, [r7, #4]
 8028414:	4618      	mov	r0, r3
 8028416:	f7fc f83f 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802841a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802841e:	6839      	ldr	r1, [r7, #0]
 8028420:	4618      	mov	r0, r3
 8028422:	f7fc f839 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028426:	68f8      	ldr	r0, [r7, #12]
 8028428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802842c:	f107 0220 	add.w	r2, r7, #32
 8028430:	f107 0110 	add.w	r1, r7, #16
 8028434:	f000 f9a1 	bl	802877a <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8028438:	68f8      	ldr	r0, [r7, #12]
 802843a:	3740      	adds	r7, #64	; 0x40
 802843c:	46bd      	mov	sp, r7
 802843e:	bd80      	pop	{r7, pc}

08028440 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8028440:	b480      	push	{r7}
 8028442:	b083      	sub	sp, #12
 8028444:	af00      	add	r7, sp, #0
 8028446:	6078      	str	r0, [r7, #4]
    { return __it; }
 8028448:	687b      	ldr	r3, [r7, #4]
 802844a:	4618      	mov	r0, r3
 802844c:	370c      	adds	r7, #12
 802844e:	46bd      	mov	sp, r7
 8028450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028454:	4770      	bx	lr

08028456 <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8028456:	b580      	push	{r7, lr}
 8028458:	b084      	sub	sp, #16
 802845a:	af00      	add	r7, sp, #0
 802845c:	60f8      	str	r0, [r7, #12]
 802845e:	60b9      	str	r1, [r7, #8]
 8028460:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8028462:	687a      	ldr	r2, [r7, #4]
 8028464:	68b9      	ldr	r1, [r7, #8]
 8028466:	68f8      	ldr	r0, [r7, #12]
 8028468:	f000 fa02 	bl	8028870 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802846c:	4603      	mov	r3, r0
 802846e:	4618      	mov	r0, r3
 8028470:	3710      	adds	r7, #16
 8028472:	46bd      	mov	sp, r7
 8028474:	bd80      	pop	{r7, pc}

08028476 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8028476:	b480      	push	{r7}
 8028478:	b083      	sub	sp, #12
 802847a:	af00      	add	r7, sp, #0
 802847c:	6078      	str	r0, [r7, #4]
 802847e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8028480:	683b      	ldr	r3, [r7, #0]
 8028482:	4618      	mov	r0, r3
 8028484:	370c      	adds	r7, #12
 8028486:	46bd      	mov	sp, r7
 8028488:	f85d 7b04 	ldr.w	r7, [sp], #4
 802848c:	4770      	bx	lr

0802848e <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802848e:	b580      	push	{r7, lr}
 8028490:	b084      	sub	sp, #16
 8028492:	af00      	add	r7, sp, #0
 8028494:	60f8      	str	r0, [r7, #12]
 8028496:	60b9      	str	r1, [r7, #8]
 8028498:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802849a:	687a      	ldr	r2, [r7, #4]
 802849c:	68b9      	ldr	r1, [r7, #8]
 802849e:	68f8      	ldr	r0, [r7, #12]
 80284a0:	f000 f9f6 	bl	8028890 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 80284a4:	4603      	mov	r3, r0
 80284a6:	4618      	mov	r0, r3
 80284a8:	3710      	adds	r7, #16
 80284aa:	46bd      	mov	sp, r7
 80284ac:	bd80      	pop	{r7, pc}

080284ae <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80284ae:	b580      	push	{r7, lr}
 80284b0:	b084      	sub	sp, #16
 80284b2:	af00      	add	r7, sp, #0
 80284b4:	60f8      	str	r0, [r7, #12]
 80284b6:	60b9      	str	r1, [r7, #8]
 80284b8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80284ba:	687a      	ldr	r2, [r7, #4]
 80284bc:	68b9      	ldr	r1, [r7, #8]
 80284be:	68f8      	ldr	r0, [r7, #12]
 80284c0:	f000 f9f6 	bl	80288b0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>
 80284c4:	4603      	mov	r3, r0
    }
 80284c6:	4618      	mov	r0, r3
 80284c8:	3710      	adds	r7, #16
 80284ca:	46bd      	mov	sp, r7
 80284cc:	bd80      	pop	{r7, pc}

080284ce <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80284ce:	b580      	push	{r7, lr}
 80284d0:	b084      	sub	sp, #16
 80284d2:	af00      	add	r7, sp, #0
 80284d4:	60f8      	str	r0, [r7, #12]
 80284d6:	60b9      	str	r1, [r7, #8]
 80284d8:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80284da:	687a      	ldr	r2, [r7, #4]
 80284dc:	68b9      	ldr	r1, [r7, #8]
 80284de:	68f8      	ldr	r0, [r7, #12]
 80284e0:	f000 fa03 	bl	80288ea <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>
 80284e4:	4603      	mov	r3, r0
    }
 80284e6:	4618      	mov	r0, r3
 80284e8:	3710      	adds	r7, #16
 80284ea:	46bd      	mov	sp, r7
 80284ec:	bd80      	pop	{r7, pc}

080284ee <_ZSt12__niter_baseIPP8ResponceET_S3_>:
    __niter_base(_Iterator __it)
 80284ee:	b480      	push	{r7}
 80284f0:	b083      	sub	sp, #12
 80284f2:	af00      	add	r7, sp, #0
 80284f4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80284f6:	687b      	ldr	r3, [r7, #4]
 80284f8:	4618      	mov	r0, r3
 80284fa:	370c      	adds	r7, #12
 80284fc:	46bd      	mov	sp, r7
 80284fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028502:	4770      	bx	lr

08028504 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8028504:	b580      	push	{r7, lr}
 8028506:	b084      	sub	sp, #16
 8028508:	af00      	add	r7, sp, #0
 802850a:	60f8      	str	r0, [r7, #12]
 802850c:	60b9      	str	r1, [r7, #8]
 802850e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8028510:	687a      	ldr	r2, [r7, #4]
 8028512:	68b9      	ldr	r1, [r7, #8]
 8028514:	68f8      	ldr	r0, [r7, #12]
 8028516:	f000 fa0a 	bl	802892e <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 802851a:	4603      	mov	r3, r0
 802851c:	4618      	mov	r0, r3
 802851e:	3710      	adds	r7, #16
 8028520:	46bd      	mov	sp, r7
 8028522:	bd80      	pop	{r7, pc}

08028524 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8028524:	b480      	push	{r7}
 8028526:	b083      	sub	sp, #12
 8028528:	af00      	add	r7, sp, #0
 802852a:	6078      	str	r0, [r7, #4]
 802852c:	6039      	str	r1, [r7, #0]
    { return __res; }
 802852e:	683b      	ldr	r3, [r7, #0]
 8028530:	4618      	mov	r0, r3
 8028532:	370c      	adds	r7, #12
 8028534:	46bd      	mov	sp, r7
 8028536:	f85d 7b04 	ldr.w	r7, [sp], #4
 802853a:	4770      	bx	lr

0802853c <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802853c:	b580      	push	{r7, lr}
 802853e:	b084      	sub	sp, #16
 8028540:	af00      	add	r7, sp, #0
 8028542:	60f8      	str	r0, [r7, #12]
 8028544:	60b9      	str	r1, [r7, #8]
 8028546:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8028548:	687a      	ldr	r2, [r7, #4]
 802854a:	68b9      	ldr	r1, [r7, #8]
 802854c:	68f8      	ldr	r0, [r7, #12]
 802854e:	f000 f9fe 	bl	802894e <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8028552:	4603      	mov	r3, r0
 8028554:	4618      	mov	r0, r3
 8028556:	3710      	adds	r7, #16
 8028558:	46bd      	mov	sp, r7
 802855a:	bd80      	pop	{r7, pc}

0802855c <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 802855c:	b580      	push	{r7, lr}
 802855e:	b084      	sub	sp, #16
 8028560:	af00      	add	r7, sp, #0
 8028562:	60f8      	str	r0, [r7, #12]
 8028564:	60b9      	str	r1, [r7, #8]
 8028566:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8028568:	687a      	ldr	r2, [r7, #4]
 802856a:	68b9      	ldr	r1, [r7, #8]
 802856c:	68f8      	ldr	r0, [r7, #12]
 802856e:	f000 f9fe 	bl	802896e <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8028572:	bf00      	nop
 8028574:	3710      	adds	r7, #16
 8028576:	46bd      	mov	sp, r7
 8028578:	bd80      	pop	{r7, pc}

0802857a <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 802857a:	b580      	push	{r7, lr}
 802857c:	b082      	sub	sp, #8
 802857e:	af00      	add	r7, sp, #0
 8028580:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8028582:	1d3b      	adds	r3, r7, #4
 8028584:	4618      	mov	r0, r3
 8028586:	f000 fa0c 	bl	80289a2 <_ZNKSt13move_iteratorIPhE4baseEv>
 802858a:	4603      	mov	r3, r0
 802858c:	4618      	mov	r0, r3
 802858e:	f7fc fd20 	bl	8024fd2 <_ZSt12__miter_baseIPhET_S1_>
 8028592:	4603      	mov	r3, r0
 8028594:	4618      	mov	r0, r3
 8028596:	3708      	adds	r7, #8
 8028598:	46bd      	mov	sp, r7
 802859a:	bd80      	pop	{r7, pc}

0802859c <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 802859c:	b5b0      	push	{r4, r5, r7, lr}
 802859e:	b084      	sub	sp, #16
 80285a0:	af00      	add	r7, sp, #0
 80285a2:	60f8      	str	r0, [r7, #12]
 80285a4:	60b9      	str	r1, [r7, #8]
 80285a6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80285a8:	68f8      	ldr	r0, [r7, #12]
 80285aa:	f7fd fc04 	bl	8025db6 <_ZSt12__niter_baseIPhET_S1_>
 80285ae:	4604      	mov	r4, r0
 80285b0:	68b8      	ldr	r0, [r7, #8]
 80285b2:	f7fd fc00 	bl	8025db6 <_ZSt12__niter_baseIPhET_S1_>
 80285b6:	4605      	mov	r5, r0
 80285b8:	687b      	ldr	r3, [r7, #4]
 80285ba:	4618      	mov	r0, r3
 80285bc:	f7fd fbfb 	bl	8025db6 <_ZSt12__niter_baseIPhET_S1_>
 80285c0:	4603      	mov	r3, r0
 80285c2:	461a      	mov	r2, r3
 80285c4:	4629      	mov	r1, r5
 80285c6:	4620      	mov	r0, r4
 80285c8:	f000 f9f7 	bl	80289ba <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 80285cc:	4602      	mov	r2, r0
 80285ce:	1d3b      	adds	r3, r7, #4
 80285d0:	4611      	mov	r1, r2
 80285d2:	4618      	mov	r0, r3
 80285d4:	f7fd fc0a 	bl	8025dec <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 80285d8:	4603      	mov	r3, r0
    }
 80285da:	4618      	mov	r0, r3
 80285dc:	3710      	adds	r7, #16
 80285de:	46bd      	mov	sp, r7
 80285e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080285e4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80285e4:	b580      	push	{r7, lr}
 80285e6:	b086      	sub	sp, #24
 80285e8:	af00      	add	r7, sp, #0
 80285ea:	60f8      	str	r0, [r7, #12]
 80285ec:	60b9      	str	r1, [r7, #8]
 80285ee:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80285f0:	68ba      	ldr	r2, [r7, #8]
 80285f2:	68fb      	ldr	r3, [r7, #12]
 80285f4:	1ad3      	subs	r3, r2, r3
 80285f6:	109b      	asrs	r3, r3, #2
 80285f8:	4a0e      	ldr	r2, [pc, #56]	; (8028634 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 80285fa:	fb02 f303 	mul.w	r3, r2, r3
 80285fe:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028600:	697b      	ldr	r3, [r7, #20]
 8028602:	2b00      	cmp	r3, #0
 8028604:	d009      	beq.n	802861a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8028606:	697a      	ldr	r2, [r7, #20]
 8028608:	4613      	mov	r3, r2
 802860a:	009b      	lsls	r3, r3, #2
 802860c:	4413      	add	r3, r2
 802860e:	009b      	lsls	r3, r3, #2
 8028610:	461a      	mov	r2, r3
 8028612:	68f9      	ldr	r1, [r7, #12]
 8028614:	6878      	ldr	r0, [r7, #4]
 8028616:	f014 ffaf 	bl	803d578 <memmove>
	  return __result + _Num;
 802861a:	697a      	ldr	r2, [r7, #20]
 802861c:	4613      	mov	r3, r2
 802861e:	009b      	lsls	r3, r3, #2
 8028620:	4413      	add	r3, r2
 8028622:	009b      	lsls	r3, r3, #2
 8028624:	461a      	mov	r2, r3
 8028626:	687b      	ldr	r3, [r7, #4]
 8028628:	4413      	add	r3, r2
	}
 802862a:	4618      	mov	r0, r3
 802862c:	3718      	adds	r7, #24
 802862e:	46bd      	mov	sp, r7
 8028630:	bd80      	pop	{r7, pc}
 8028632:	bf00      	nop
 8028634:	cccccccd 	.word	0xcccccccd

08028638 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8028638:	b580      	push	{r7, lr}
 802863a:	b090      	sub	sp, #64	; 0x40
 802863c:	af00      	add	r7, sp, #0
 802863e:	60f8      	str	r0, [r7, #12]
 8028640:	60b9      	str	r1, [r7, #8]
 8028642:	607a      	str	r2, [r7, #4]
 8028644:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8028646:	f107 0310 	add.w	r3, r7, #16
 802864a:	68b9      	ldr	r1, [r7, #8]
 802864c:	4618      	mov	r0, r3
 802864e:	f7ff fbd4 	bl	8027dfa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8028652:	f107 0320 	add.w	r3, r7, #32
 8028656:	6879      	ldr	r1, [r7, #4]
 8028658:	4618      	mov	r0, r3
 802865a:	f7ff fbce 	bl	8027dfa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802865e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028662:	6839      	ldr	r1, [r7, #0]
 8028664:	4618      	mov	r0, r3
 8028666:	f7fb ff17 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802866a:	68f8      	ldr	r0, [r7, #12]
 802866c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028670:	f107 0220 	add.w	r2, r7, #32
 8028674:	f107 0110 	add.w	r1, r7, #16
 8028678:	f000 f9af 	bl	80289da <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 802867c:	68f8      	ldr	r0, [r7, #12]
 802867e:	3740      	adds	r7, #64	; 0x40
 8028680:	46bd      	mov	sp, r7
 8028682:	bd80      	pop	{r7, pc}

08028684 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 8028684:	b5b0      	push	{r4, r5, r7, lr}
 8028686:	b09e      	sub	sp, #120	; 0x78
 8028688:	af00      	add	r7, sp, #0
 802868a:	60f8      	str	r0, [r7, #12]
 802868c:	60b9      	str	r1, [r7, #8]
 802868e:	607a      	str	r2, [r7, #4]
 8028690:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8028692:	68bb      	ldr	r3, [r7, #8]
 8028694:	68da      	ldr	r2, [r3, #12]
 8028696:	687b      	ldr	r3, [r7, #4]
 8028698:	68db      	ldr	r3, [r3, #12]
 802869a:	429a      	cmp	r2, r3
 802869c:	d058      	beq.n	8028750 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result
 802869e:	68bb      	ldr	r3, [r7, #8]
 80286a0:	681c      	ldr	r4, [r3, #0]
 80286a2:	68bb      	ldr	r3, [r7, #8]
 80286a4:	689d      	ldr	r5, [r3, #8]
 80286a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80286aa:	6839      	ldr	r1, [r7, #0]
 80286ac:	4618      	mov	r0, r3
 80286ae:	f7fb fef3 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80286b2:	f107 0014 	add.w	r0, r7, #20
 80286b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80286ba:	462a      	mov	r2, r5
 80286bc:	4621      	mov	r1, r4
 80286be:	f000 f9c3 	bl	8028a48 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80286c2:	683b      	ldr	r3, [r7, #0]
 80286c4:	461c      	mov	r4, r3
 80286c6:	f107 0314 	add.w	r3, r7, #20
 80286ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80286cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 80286d0:	68bb      	ldr	r3, [r7, #8]
 80286d2:	68db      	ldr	r3, [r3, #12]
 80286d4:	3304      	adds	r3, #4
 80286d6:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 80286d8:	687b      	ldr	r3, [r7, #4]
 80286da:	68db      	ldr	r3, [r3, #12]
 80286dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80286de:	429a      	cmp	r2, r3
 80286e0:	d024      	beq.n	802872c <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result
 80286e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80286e4:	681d      	ldr	r5, [r3, #0]
 80286e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80286e8:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 80286ea:	f7fc fe7a 	bl	80253e2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80286ee:	4602      	mov	r2, r0
 80286f0:	4613      	mov	r3, r2
 80286f2:	009b      	lsls	r3, r3, #2
 80286f4:	4413      	add	r3, r2
 80286f6:	009b      	lsls	r3, r3, #2
	    __result
 80286f8:	441c      	add	r4, r3
 80286fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80286fe:	6839      	ldr	r1, [r7, #0]
 8028700:	4618      	mov	r0, r3
 8028702:	f7fb fec9 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028706:	f107 0034 	add.w	r0, r7, #52	; 0x34
 802870a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802870e:	4622      	mov	r2, r4
 8028710:	4629      	mov	r1, r5
 8028712:	f000 f999 	bl	8028a48 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8028716:	683b      	ldr	r3, [r7, #0]
 8028718:	461c      	mov	r4, r3
 802871a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802871e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8028724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028726:	3304      	adds	r3, #4
 8028728:	677b      	str	r3, [r7, #116]	; 0x74
 802872a:	e7d5      	b.n	80286d8 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
					      __result);
 802872c:	687b      	ldr	r3, [r7, #4]
 802872e:	685c      	ldr	r4, [r3, #4]
 8028730:	687b      	ldr	r3, [r7, #4]
 8028732:	681d      	ldr	r5, [r3, #0]
 8028734:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8028738:	6839      	ldr	r1, [r7, #0]
 802873a:	4618      	mov	r0, r3
 802873c:	f7fb feac 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028740:	68f8      	ldr	r0, [r7, #12]
 8028742:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8028746:	462a      	mov	r2, r5
 8028748:	4621      	mov	r1, r4
 802874a:	f000 f97d 	bl	8028a48 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802874e:	e010      	b.n	8028772 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
					  __result);
 8028750:	68bb      	ldr	r3, [r7, #8]
 8028752:	681c      	ldr	r4, [r3, #0]
 8028754:	687b      	ldr	r3, [r7, #4]
 8028756:	681d      	ldr	r5, [r3, #0]
 8028758:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802875c:	6839      	ldr	r1, [r7, #0]
 802875e:	4618      	mov	r0, r3
 8028760:	f7fb fe9a 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028764:	68f8      	ldr	r0, [r7, #12]
 8028766:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802876a:	462a      	mov	r2, r5
 802876c:	4621      	mov	r1, r4
 802876e:	f000 f96b 	bl	8028a48 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8028772:	68f8      	ldr	r0, [r7, #12]
 8028774:	3778      	adds	r7, #120	; 0x78
 8028776:	46bd      	mov	sp, r7
 8028778:	bdb0      	pop	{r4, r5, r7, pc}

0802877a <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_backward_dit(
 802877a:	b5b0      	push	{r4, r5, r7, lr}
 802877c:	b09e      	sub	sp, #120	; 0x78
 802877e:	af00      	add	r7, sp, #0
 8028780:	60f8      	str	r0, [r7, #12]
 8028782:	60b9      	str	r1, [r7, #8]
 8028784:	607a      	str	r2, [r7, #4]
 8028786:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8028788:	68bb      	ldr	r3, [r7, #8]
 802878a:	68da      	ldr	r2, [r3, #12]
 802878c:	687b      	ldr	r3, [r7, #4]
 802878e:	68db      	ldr	r3, [r3, #12]
 8028790:	429a      	cmp	r2, r3
 8028792:	d058      	beq.n	8028846 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 8028794:	687b      	ldr	r3, [r7, #4]
 8028796:	685c      	ldr	r4, [r3, #4]
 8028798:	687b      	ldr	r3, [r7, #4]
 802879a:	681d      	ldr	r5, [r3, #0]
 802879c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80287a0:	6839      	ldr	r1, [r7, #0]
 80287a2:	4618      	mov	r0, r3
 80287a4:	f7fb fe78 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80287a8:	f107 0014 	add.w	r0, r7, #20
 80287ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80287b0:	462a      	mov	r2, r5
 80287b2:	4621      	mov	r1, r4
 80287b4:	f000 f99a 	bl	8028aec <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80287b8:	683b      	ldr	r3, [r7, #0]
 80287ba:	461c      	mov	r4, r3
 80287bc:	f107 0314 	add.w	r3, r7, #20
 80287c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80287c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 80287c6:	687b      	ldr	r3, [r7, #4]
 80287c8:	68db      	ldr	r3, [r3, #12]
 80287ca:	3b04      	subs	r3, #4
 80287cc:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 80287ce:	68bb      	ldr	r3, [r7, #8]
 80287d0:	68db      	ldr	r3, [r3, #12]
 80287d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80287d4:	429a      	cmp	r2, r3
 80287d6:	d024      	beq.n	8028822 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 80287d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80287da:	681d      	ldr	r5, [r3, #0]
 80287dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80287de:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 80287e0:	f7fc fdff 	bl	80253e2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80287e4:	4602      	mov	r2, r0
 80287e6:	4613      	mov	r3, r2
 80287e8:	009b      	lsls	r3, r3, #2
 80287ea:	4413      	add	r3, r2
 80287ec:	009b      	lsls	r3, r3, #2
	    __result = std::__copy_move_backward_a1<_IsMove>(
 80287ee:	441c      	add	r4, r3
 80287f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80287f4:	6839      	ldr	r1, [r7, #0]
 80287f6:	4618      	mov	r0, r3
 80287f8:	f7fb fe4e 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80287fc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8028800:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8028804:	4622      	mov	r2, r4
 8028806:	4629      	mov	r1, r5
 8028808:	f000 f970 	bl	8028aec <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802880c:	683b      	ldr	r3, [r7, #0]
 802880e:	461c      	mov	r4, r3
 8028810:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8028814:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028816:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 802881a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802881c:	3b04      	subs	r3, #4
 802881e:	677b      	str	r3, [r7, #116]	; 0x74
 8028820:	e7d5      	b.n	80287ce <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
			__first._M_cur, __first._M_last, __result);
 8028822:	68bb      	ldr	r3, [r7, #8]
 8028824:	681c      	ldr	r4, [r3, #0]
 8028826:	68bb      	ldr	r3, [r7, #8]
 8028828:	689d      	ldr	r5, [r3, #8]
 802882a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802882e:	6839      	ldr	r1, [r7, #0]
 8028830:	4618      	mov	r0, r3
 8028832:	f7fb fe31 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028836:	68f8      	ldr	r0, [r7, #12]
 8028838:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802883c:	462a      	mov	r2, r5
 802883e:	4621      	mov	r1, r4
 8028840:	f000 f954 	bl	8028aec <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8028844:	e010      	b.n	8028868 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
		__first._M_cur, __last._M_cur, __result);
 8028846:	68bb      	ldr	r3, [r7, #8]
 8028848:	681c      	ldr	r4, [r3, #0]
 802884a:	687b      	ldr	r3, [r7, #4]
 802884c:	681d      	ldr	r5, [r3, #0]
 802884e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8028852:	6839      	ldr	r1, [r7, #0]
 8028854:	4618      	mov	r0, r3
 8028856:	f7fb fe1f 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802885a:	68f8      	ldr	r0, [r7, #12]
 802885c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8028860:	462a      	mov	r2, r5
 8028862:	4621      	mov	r1, r4
 8028864:	f000 f942 	bl	8028aec <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8028868:	68f8      	ldr	r0, [r7, #12]
 802886a:	3778      	adds	r7, #120	; 0x78
 802886c:	46bd      	mov	sp, r7
 802886e:	bdb0      	pop	{r4, r5, r7, pc}

08028870 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8028870:	b580      	push	{r7, lr}
 8028872:	b084      	sub	sp, #16
 8028874:	af00      	add	r7, sp, #0
 8028876:	60f8      	str	r0, [r7, #12]
 8028878:	60b9      	str	r1, [r7, #8]
 802887a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802887c:	687a      	ldr	r2, [r7, #4]
 802887e:	68b9      	ldr	r1, [r7, #8]
 8028880:	68f8      	ldr	r0, [r7, #12]
 8028882:	f000 f999 	bl	8028bb8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 8028886:	4603      	mov	r3, r0
    }
 8028888:	4618      	mov	r0, r3
 802888a:	3710      	adds	r7, #16
 802888c:	46bd      	mov	sp, r7
 802888e:	bd80      	pop	{r7, pc}

08028890 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8028890:	b580      	push	{r7, lr}
 8028892:	b084      	sub	sp, #16
 8028894:	af00      	add	r7, sp, #0
 8028896:	60f8      	str	r0, [r7, #12]
 8028898:	60b9      	str	r1, [r7, #8]
 802889a:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802889c:	687a      	ldr	r2, [r7, #4]
 802889e:	68b9      	ldr	r1, [r7, #8]
 80288a0:	68f8      	ldr	r0, [r7, #12]
 80288a2:	f000 f9a6 	bl	8028bf2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 80288a6:	4603      	mov	r3, r0
    }
 80288a8:	4618      	mov	r0, r3
 80288aa:	3710      	adds	r7, #16
 80288ac:	46bd      	mov	sp, r7
 80288ae:	bd80      	pop	{r7, pc}

080288b0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80288b0:	b580      	push	{r7, lr}
 80288b2:	b086      	sub	sp, #24
 80288b4:	af00      	add	r7, sp, #0
 80288b6:	60f8      	str	r0, [r7, #12]
 80288b8:	60b9      	str	r1, [r7, #8]
 80288ba:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80288bc:	68ba      	ldr	r2, [r7, #8]
 80288be:	68fb      	ldr	r3, [r7, #12]
 80288c0:	1ad3      	subs	r3, r2, r3
 80288c2:	109b      	asrs	r3, r3, #2
 80288c4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80288c6:	697b      	ldr	r3, [r7, #20]
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	d006      	beq.n	80288da <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80288cc:	697b      	ldr	r3, [r7, #20]
 80288ce:	009b      	lsls	r3, r3, #2
 80288d0:	461a      	mov	r2, r3
 80288d2:	68f9      	ldr	r1, [r7, #12]
 80288d4:	6878      	ldr	r0, [r7, #4]
 80288d6:	f014 fe4f 	bl	803d578 <memmove>
	  return __result + _Num;
 80288da:	697b      	ldr	r3, [r7, #20]
 80288dc:	009b      	lsls	r3, r3, #2
 80288de:	687a      	ldr	r2, [r7, #4]
 80288e0:	4413      	add	r3, r2
	}
 80288e2:	4618      	mov	r0, r3
 80288e4:	3718      	adds	r7, #24
 80288e6:	46bd      	mov	sp, r7
 80288e8:	bd80      	pop	{r7, pc}

080288ea <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80288ea:	b580      	push	{r7, lr}
 80288ec:	b086      	sub	sp, #24
 80288ee:	af00      	add	r7, sp, #0
 80288f0:	60f8      	str	r0, [r7, #12]
 80288f2:	60b9      	str	r1, [r7, #8]
 80288f4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80288f6:	68ba      	ldr	r2, [r7, #8]
 80288f8:	68fb      	ldr	r3, [r7, #12]
 80288fa:	1ad3      	subs	r3, r2, r3
 80288fc:	109b      	asrs	r3, r3, #2
 80288fe:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028900:	697b      	ldr	r3, [r7, #20]
 8028902:	2b00      	cmp	r3, #0
 8028904:	d00a      	beq.n	802891c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8028906:	697b      	ldr	r3, [r7, #20]
 8028908:	009b      	lsls	r3, r3, #2
 802890a:	425b      	negs	r3, r3
 802890c:	687a      	ldr	r2, [r7, #4]
 802890e:	18d0      	adds	r0, r2, r3
 8028910:	697b      	ldr	r3, [r7, #20]
 8028912:	009b      	lsls	r3, r3, #2
 8028914:	461a      	mov	r2, r3
 8028916:	68f9      	ldr	r1, [r7, #12]
 8028918:	f014 fe2e 	bl	803d578 <memmove>
	  return __result - _Num;
 802891c:	697b      	ldr	r3, [r7, #20]
 802891e:	009b      	lsls	r3, r3, #2
 8028920:	425b      	negs	r3, r3
 8028922:	687a      	ldr	r2, [r7, #4]
 8028924:	4413      	add	r3, r2
	}
 8028926:	4618      	mov	r0, r3
 8028928:	3718      	adds	r7, #24
 802892a:	46bd      	mov	sp, r7
 802892c:	bd80      	pop	{r7, pc}

0802892e <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802892e:	b580      	push	{r7, lr}
 8028930:	b084      	sub	sp, #16
 8028932:	af00      	add	r7, sp, #0
 8028934:	60f8      	str	r0, [r7, #12]
 8028936:	60b9      	str	r1, [r7, #8]
 8028938:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802893a:	687a      	ldr	r2, [r7, #4]
 802893c:	68b9      	ldr	r1, [r7, #8]
 802893e:	68f8      	ldr	r0, [r7, #12]
 8028940:	f000 f979 	bl	8028c36 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>
 8028944:	4603      	mov	r3, r0
    }
 8028946:	4618      	mov	r0, r3
 8028948:	3710      	adds	r7, #16
 802894a:	46bd      	mov	sp, r7
 802894c:	bd80      	pop	{r7, pc}

0802894e <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802894e:	b580      	push	{r7, lr}
 8028950:	b084      	sub	sp, #16
 8028952:	af00      	add	r7, sp, #0
 8028954:	60f8      	str	r0, [r7, #12]
 8028956:	60b9      	str	r1, [r7, #8]
 8028958:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802895a:	687a      	ldr	r2, [r7, #4]
 802895c:	68b9      	ldr	r1, [r7, #8]
 802895e:	68f8      	ldr	r0, [r7, #12]
 8028960:	f000 f986 	bl	8028c70 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>
 8028964:	4603      	mov	r3, r0
    }
 8028966:	4618      	mov	r0, r3
 8028968:	3710      	adds	r7, #16
 802896a:	46bd      	mov	sp, r7
 802896c:	bd80      	pop	{r7, pc}

0802896e <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 802896e:	b580      	push	{r7, lr}
 8028970:	b086      	sub	sp, #24
 8028972:	af00      	add	r7, sp, #0
 8028974:	60f8      	str	r0, [r7, #12]
 8028976:	60b9      	str	r1, [r7, #8]
 8028978:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 802897a:	687b      	ldr	r3, [r7, #4]
 802897c:	781b      	ldrb	r3, [r3, #0]
 802897e:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 8028980:	68ba      	ldr	r2, [r7, #8]
 8028982:	68fb      	ldr	r3, [r7, #12]
 8028984:	1ad3      	subs	r3, r2, r3
 8028986:	613b      	str	r3, [r7, #16]
 8028988:	693b      	ldr	r3, [r7, #16]
 802898a:	2b00      	cmp	r3, #0
 802898c:	d005      	beq.n	802899a <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 802898e:	7dfb      	ldrb	r3, [r7, #23]
 8028990:	693a      	ldr	r2, [r7, #16]
 8028992:	4619      	mov	r1, r3
 8028994:	68f8      	ldr	r0, [r7, #12]
 8028996:	f014 fe09 	bl	803d5ac <memset>
    }
 802899a:	bf00      	nop
 802899c:	3718      	adds	r7, #24
 802899e:	46bd      	mov	sp, r7
 80289a0:	bd80      	pop	{r7, pc}

080289a2 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 80289a2:	b480      	push	{r7}
 80289a4:	b083      	sub	sp, #12
 80289a6:	af00      	add	r7, sp, #0
 80289a8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80289aa:	687b      	ldr	r3, [r7, #4]
 80289ac:	681b      	ldr	r3, [r3, #0]
 80289ae:	4618      	mov	r0, r3
 80289b0:	370c      	adds	r7, #12
 80289b2:	46bd      	mov	sp, r7
 80289b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289b8:	4770      	bx	lr

080289ba <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80289ba:	b580      	push	{r7, lr}
 80289bc:	b084      	sub	sp, #16
 80289be:	af00      	add	r7, sp, #0
 80289c0:	60f8      	str	r0, [r7, #12]
 80289c2:	60b9      	str	r1, [r7, #8]
 80289c4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80289c6:	687a      	ldr	r2, [r7, #4]
 80289c8:	68b9      	ldr	r1, [r7, #8]
 80289ca:	68f8      	ldr	r0, [r7, #12]
 80289cc:	f000 f972 	bl	8028cb4 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 80289d0:	4603      	mov	r3, r0
 80289d2:	4618      	mov	r0, r3
 80289d4:	3710      	adds	r7, #16
 80289d6:	46bd      	mov	sp, r7
 80289d8:	bd80      	pop	{r7, pc}

080289da <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 80289da:	b580      	push	{r7, lr}
 80289dc:	b098      	sub	sp, #96	; 0x60
 80289de:	af00      	add	r7, sp, #0
 80289e0:	60f8      	str	r0, [r7, #12]
 80289e2:	60b9      	str	r1, [r7, #8]
 80289e4:	607a      	str	r2, [r7, #4]
 80289e6:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80289e8:	f107 0320 	add.w	r3, r7, #32
 80289ec:	68b9      	ldr	r1, [r7, #8]
 80289ee:	4618      	mov	r0, r3
 80289f0:	f7ff fa03 	bl	8027dfa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80289f4:	f107 0310 	add.w	r3, r7, #16
 80289f8:	f107 0220 	add.w	r2, r7, #32
 80289fc:	4611      	mov	r1, r2
 80289fe:	4618      	mov	r0, r3
 8028a00:	f000 f968 	bl	8028cd4 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8028a04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8028a08:	6879      	ldr	r1, [r7, #4]
 8028a0a:	4618      	mov	r0, r3
 8028a0c:	f7ff f9f5 	bl	8027dfa <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8028a10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028a14:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8028a18:	4611      	mov	r1, r2
 8028a1a:	4618      	mov	r0, r3
 8028a1c:	f000 f95a 	bl	8028cd4 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8028a20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028a24:	6839      	ldr	r1, [r7, #0]
 8028a26:	4618      	mov	r0, r3
 8028a28:	f7fb fd36 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028a2c:	68f8      	ldr	r0, [r7, #12]
 8028a2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028a32:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8028a36:	f107 0110 	add.w	r1, r7, #16
 8028a3a:	f7ff fa21 	bl	8027e80 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8028a3e:	68f8      	ldr	r0, [r7, #12]
 8028a40:	3760      	adds	r7, #96	; 0x60
 8028a42:	46bd      	mov	sp, r7
 8028a44:	bd80      	pop	{r7, pc}
	...

08028a48 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:
    __copy_move_a1(_II __first, _II __last,
 8028a48:	b580      	push	{r7, lr}
 8028a4a:	b088      	sub	sp, #32
 8028a4c:	af00      	add	r7, sp, #0
 8028a4e:	60f8      	str	r0, [r7, #12]
 8028a50:	60b9      	str	r1, [r7, #8]
 8028a52:	607a      	str	r2, [r7, #4]
 8028a54:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 8028a56:	687a      	ldr	r2, [r7, #4]
 8028a58:	68bb      	ldr	r3, [r7, #8]
 8028a5a:	1ad3      	subs	r3, r2, r3
 8028a5c:	109b      	asrs	r3, r3, #2
 8028a5e:	4a22      	ldr	r2, [pc, #136]	; (8028ae8 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8028a60:	fb02 f303 	mul.w	r3, r2, r3
 8028a64:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8028a66:	697b      	ldr	r3, [r7, #20]
 8028a68:	2b00      	cmp	r3, #0
 8028a6a:	dd34      	ble.n	8028ad6 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 8028a6c:	683b      	ldr	r3, [r7, #0]
 8028a6e:	689a      	ldr	r2, [r3, #8]
 8028a70:	683b      	ldr	r3, [r7, #0]
 8028a72:	681b      	ldr	r3, [r3, #0]
 8028a74:	1ad3      	subs	r3, r2, r3
 8028a76:	109b      	asrs	r3, r3, #2
 8028a78:	4a1b      	ldr	r2, [pc, #108]	; (8028ae8 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8028a7a:	fb02 f303 	mul.w	r3, r2, r3
 8028a7e:	61bb      	str	r3, [r7, #24]
 8028a80:	f107 0218 	add.w	r2, r7, #24
 8028a84:	f107 0314 	add.w	r3, r7, #20
 8028a88:	4611      	mov	r1, r2
 8028a8a:	4618      	mov	r0, r3
 8028a8c:	f7fe fb6c 	bl	8027168 <_ZSt3minIiERKT_S2_S2_>
 8028a90:	4603      	mov	r3, r0
	  const difference_type __clen
 8028a92:	681b      	ldr	r3, [r3, #0]
 8028a94:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8028a96:	69fa      	ldr	r2, [r7, #28]
 8028a98:	4613      	mov	r3, r2
 8028a9a:	009b      	lsls	r3, r3, #2
 8028a9c:	4413      	add	r3, r2
 8028a9e:	009b      	lsls	r3, r3, #2
 8028aa0:	461a      	mov	r2, r3
 8028aa2:	68bb      	ldr	r3, [r7, #8]
 8028aa4:	1899      	adds	r1, r3, r2
 8028aa6:	683b      	ldr	r3, [r7, #0]
 8028aa8:	681b      	ldr	r3, [r3, #0]
 8028aaa:	461a      	mov	r2, r3
 8028aac:	68b8      	ldr	r0, [r7, #8]
 8028aae:	f000 f927 	bl	8028d00 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
	  __first += __clen;
 8028ab2:	69fa      	ldr	r2, [r7, #28]
 8028ab4:	4613      	mov	r3, r2
 8028ab6:	009b      	lsls	r3, r3, #2
 8028ab8:	4413      	add	r3, r2
 8028aba:	009b      	lsls	r3, r3, #2
 8028abc:	461a      	mov	r2, r3
 8028abe:	68bb      	ldr	r3, [r7, #8]
 8028ac0:	4413      	add	r3, r2
 8028ac2:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8028ac4:	69f9      	ldr	r1, [r7, #28]
 8028ac6:	6838      	ldr	r0, [r7, #0]
 8028ac8:	f7fd fe58 	bl	802677c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8028acc:	697a      	ldr	r2, [r7, #20]
 8028ace:	69fb      	ldr	r3, [r7, #28]
 8028ad0:	1ad3      	subs	r3, r2, r3
 8028ad2:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8028ad4:	e7c7      	b.n	8028a66 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
      return __result;
 8028ad6:	6839      	ldr	r1, [r7, #0]
 8028ad8:	68f8      	ldr	r0, [r7, #12]
 8028ada:	f7fb fcdd 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8028ade:	68f8      	ldr	r0, [r7, #12]
 8028ae0:	3720      	adds	r7, #32
 8028ae2:	46bd      	mov	sp, r7
 8028ae4:	bd80      	pop	{r7, pc}
 8028ae6:	bf00      	nop
 8028ae8:	cccccccd 	.word	0xcccccccd

08028aec <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 8028aec:	b580      	push	{r7, lr}
 8028aee:	b088      	sub	sp, #32
 8028af0:	af00      	add	r7, sp, #0
 8028af2:	60f8      	str	r0, [r7, #12]
 8028af4:	60b9      	str	r1, [r7, #8]
 8028af6:	607a      	str	r2, [r7, #4]
 8028af8:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8028afa:	687a      	ldr	r2, [r7, #4]
 8028afc:	68bb      	ldr	r3, [r7, #8]
 8028afe:	1ad3      	subs	r3, r2, r3
 8028b00:	109b      	asrs	r3, r3, #2
 8028b02:	4a2c      	ldr	r2, [pc, #176]	; (8028bb4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 8028b04:	fb02 f303 	mul.w	r3, r2, r3
 8028b08:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8028b0a:	697b      	ldr	r3, [r7, #20]
 8028b0c:	2b00      	cmp	r3, #0
 8028b0e:	dd49      	ble.n	8028ba4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 8028b10:	683b      	ldr	r3, [r7, #0]
 8028b12:	681a      	ldr	r2, [r3, #0]
 8028b14:	683b      	ldr	r3, [r7, #0]
 8028b16:	685b      	ldr	r3, [r3, #4]
 8028b18:	1ad3      	subs	r3, r2, r3
 8028b1a:	109b      	asrs	r3, r3, #2
 8028b1c:	4a25      	ldr	r2, [pc, #148]	; (8028bb4 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 8028b1e:	fb02 f303 	mul.w	r3, r2, r3
 8028b22:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 8028b24:	683b      	ldr	r3, [r7, #0]
 8028b26:	681b      	ldr	r3, [r3, #0]
 8028b28:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 8028b2a:	693b      	ldr	r3, [r7, #16]
 8028b2c:	2b00      	cmp	r3, #0
 8028b2e:	d10f      	bne.n	8028b50 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 8028b30:	f7fc fc57 	bl	80253e2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8028b34:	4603      	mov	r3, r0
 8028b36:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 8028b38:	683b      	ldr	r3, [r7, #0]
 8028b3a:	68db      	ldr	r3, [r3, #12]
 8028b3c:	3b04      	subs	r3, #4
 8028b3e:	681a      	ldr	r2, [r3, #0]
 8028b40:	693b      	ldr	r3, [r7, #16]
 8028b42:	4619      	mov	r1, r3
 8028b44:	460b      	mov	r3, r1
 8028b46:	009b      	lsls	r3, r3, #2
 8028b48:	440b      	add	r3, r1
 8028b4a:	009b      	lsls	r3, r3, #2
 8028b4c:	4413      	add	r3, r2
 8028b4e:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 8028b50:	f107 0210 	add.w	r2, r7, #16
 8028b54:	f107 0314 	add.w	r3, r7, #20
 8028b58:	4611      	mov	r1, r2
 8028b5a:	4618      	mov	r0, r3
 8028b5c:	f7fe fb04 	bl	8027168 <_ZSt3minIiERKT_S2_S2_>
 8028b60:	4603      	mov	r3, r0
 8028b62:	681b      	ldr	r3, [r3, #0]
 8028b64:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 8028b66:	69ba      	ldr	r2, [r7, #24]
 8028b68:	4613      	mov	r3, r2
 8028b6a:	009b      	lsls	r3, r3, #2
 8028b6c:	4413      	add	r3, r2
 8028b6e:	009b      	lsls	r3, r3, #2
 8028b70:	425b      	negs	r3, r3
 8028b72:	687a      	ldr	r2, [r7, #4]
 8028b74:	4413      	add	r3, r2
 8028b76:	69fa      	ldr	r2, [r7, #28]
 8028b78:	6879      	ldr	r1, [r7, #4]
 8028b7a:	4618      	mov	r0, r3
 8028b7c:	f000 f8d0 	bl	8028d20 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>

	  __last -= __clen;
 8028b80:	69ba      	ldr	r2, [r7, #24]
 8028b82:	4613      	mov	r3, r2
 8028b84:	009b      	lsls	r3, r3, #2
 8028b86:	4413      	add	r3, r2
 8028b88:	009b      	lsls	r3, r3, #2
 8028b8a:	425b      	negs	r3, r3
 8028b8c:	687a      	ldr	r2, [r7, #4]
 8028b8e:	4413      	add	r3, r2
 8028b90:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 8028b92:	69b9      	ldr	r1, [r7, #24]
 8028b94:	6838      	ldr	r0, [r7, #0]
 8028b96:	f7ff f8d4 	bl	8027d42 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	  __len -= __clen;
 8028b9a:	697a      	ldr	r2, [r7, #20]
 8028b9c:	69bb      	ldr	r3, [r7, #24]
 8028b9e:	1ad3      	subs	r3, r2, r3
 8028ba0:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8028ba2:	e7b2      	b.n	8028b0a <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 8028ba4:	6839      	ldr	r1, [r7, #0]
 8028ba6:	68f8      	ldr	r0, [r7, #12]
 8028ba8:	f7fb fc76 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8028bac:	68f8      	ldr	r0, [r7, #12]
 8028bae:	3720      	adds	r7, #32
 8028bb0:	46bd      	mov	sp, r7
 8028bb2:	bd80      	pop	{r7, pc}
 8028bb4:	cccccccd 	.word	0xcccccccd

08028bb8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028bb8:	b580      	push	{r7, lr}
 8028bba:	b086      	sub	sp, #24
 8028bbc:	af00      	add	r7, sp, #0
 8028bbe:	60f8      	str	r0, [r7, #12]
 8028bc0:	60b9      	str	r1, [r7, #8]
 8028bc2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028bc4:	68ba      	ldr	r2, [r7, #8]
 8028bc6:	68fb      	ldr	r3, [r7, #12]
 8028bc8:	1ad3      	subs	r3, r2, r3
 8028bca:	109b      	asrs	r3, r3, #2
 8028bcc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028bce:	697b      	ldr	r3, [r7, #20]
 8028bd0:	2b00      	cmp	r3, #0
 8028bd2:	d006      	beq.n	8028be2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8028bd4:	697b      	ldr	r3, [r7, #20]
 8028bd6:	009b      	lsls	r3, r3, #2
 8028bd8:	461a      	mov	r2, r3
 8028bda:	68f9      	ldr	r1, [r7, #12]
 8028bdc:	6878      	ldr	r0, [r7, #4]
 8028bde:	f014 fccb 	bl	803d578 <memmove>
	  return __result + _Num;
 8028be2:	697b      	ldr	r3, [r7, #20]
 8028be4:	009b      	lsls	r3, r3, #2
 8028be6:	687a      	ldr	r2, [r7, #4]
 8028be8:	4413      	add	r3, r2
	}
 8028bea:	4618      	mov	r0, r3
 8028bec:	3718      	adds	r7, #24
 8028bee:	46bd      	mov	sp, r7
 8028bf0:	bd80      	pop	{r7, pc}

08028bf2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028bf2:	b580      	push	{r7, lr}
 8028bf4:	b086      	sub	sp, #24
 8028bf6:	af00      	add	r7, sp, #0
 8028bf8:	60f8      	str	r0, [r7, #12]
 8028bfa:	60b9      	str	r1, [r7, #8]
 8028bfc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028bfe:	68ba      	ldr	r2, [r7, #8]
 8028c00:	68fb      	ldr	r3, [r7, #12]
 8028c02:	1ad3      	subs	r3, r2, r3
 8028c04:	109b      	asrs	r3, r3, #2
 8028c06:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028c08:	697b      	ldr	r3, [r7, #20]
 8028c0a:	2b00      	cmp	r3, #0
 8028c0c:	d00a      	beq.n	8028c24 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8028c0e:	697b      	ldr	r3, [r7, #20]
 8028c10:	009b      	lsls	r3, r3, #2
 8028c12:	425b      	negs	r3, r3
 8028c14:	687a      	ldr	r2, [r7, #4]
 8028c16:	18d0      	adds	r0, r2, r3
 8028c18:	697b      	ldr	r3, [r7, #20]
 8028c1a:	009b      	lsls	r3, r3, #2
 8028c1c:	461a      	mov	r2, r3
 8028c1e:	68f9      	ldr	r1, [r7, #12]
 8028c20:	f014 fcaa 	bl	803d578 <memmove>
	  return __result - _Num;
 8028c24:	697b      	ldr	r3, [r7, #20]
 8028c26:	009b      	lsls	r3, r3, #2
 8028c28:	425b      	negs	r3, r3
 8028c2a:	687a      	ldr	r2, [r7, #4]
 8028c2c:	4413      	add	r3, r2
	}
 8028c2e:	4618      	mov	r0, r3
 8028c30:	3718      	adds	r7, #24
 8028c32:	46bd      	mov	sp, r7
 8028c34:	bd80      	pop	{r7, pc}

08028c36 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028c36:	b580      	push	{r7, lr}
 8028c38:	b086      	sub	sp, #24
 8028c3a:	af00      	add	r7, sp, #0
 8028c3c:	60f8      	str	r0, [r7, #12]
 8028c3e:	60b9      	str	r1, [r7, #8]
 8028c40:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028c42:	68ba      	ldr	r2, [r7, #8]
 8028c44:	68fb      	ldr	r3, [r7, #12]
 8028c46:	1ad3      	subs	r3, r2, r3
 8028c48:	109b      	asrs	r3, r3, #2
 8028c4a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028c4c:	697b      	ldr	r3, [r7, #20]
 8028c4e:	2b00      	cmp	r3, #0
 8028c50:	d006      	beq.n	8028c60 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8028c52:	697b      	ldr	r3, [r7, #20]
 8028c54:	009b      	lsls	r3, r3, #2
 8028c56:	461a      	mov	r2, r3
 8028c58:	68f9      	ldr	r1, [r7, #12]
 8028c5a:	6878      	ldr	r0, [r7, #4]
 8028c5c:	f014 fc8c 	bl	803d578 <memmove>
	  return __result + _Num;
 8028c60:	697b      	ldr	r3, [r7, #20]
 8028c62:	009b      	lsls	r3, r3, #2
 8028c64:	687a      	ldr	r2, [r7, #4]
 8028c66:	4413      	add	r3, r2
	}
 8028c68:	4618      	mov	r0, r3
 8028c6a:	3718      	adds	r7, #24
 8028c6c:	46bd      	mov	sp, r7
 8028c6e:	bd80      	pop	{r7, pc}

08028c70 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028c70:	b580      	push	{r7, lr}
 8028c72:	b086      	sub	sp, #24
 8028c74:	af00      	add	r7, sp, #0
 8028c76:	60f8      	str	r0, [r7, #12]
 8028c78:	60b9      	str	r1, [r7, #8]
 8028c7a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028c7c:	68ba      	ldr	r2, [r7, #8]
 8028c7e:	68fb      	ldr	r3, [r7, #12]
 8028c80:	1ad3      	subs	r3, r2, r3
 8028c82:	109b      	asrs	r3, r3, #2
 8028c84:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028c86:	697b      	ldr	r3, [r7, #20]
 8028c88:	2b00      	cmp	r3, #0
 8028c8a:	d00a      	beq.n	8028ca2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8028c8c:	697b      	ldr	r3, [r7, #20]
 8028c8e:	009b      	lsls	r3, r3, #2
 8028c90:	425b      	negs	r3, r3
 8028c92:	687a      	ldr	r2, [r7, #4]
 8028c94:	18d0      	adds	r0, r2, r3
 8028c96:	697b      	ldr	r3, [r7, #20]
 8028c98:	009b      	lsls	r3, r3, #2
 8028c9a:	461a      	mov	r2, r3
 8028c9c:	68f9      	ldr	r1, [r7, #12]
 8028c9e:	f014 fc6b 	bl	803d578 <memmove>
	  return __result - _Num;
 8028ca2:	697b      	ldr	r3, [r7, #20]
 8028ca4:	009b      	lsls	r3, r3, #2
 8028ca6:	425b      	negs	r3, r3
 8028ca8:	687a      	ldr	r2, [r7, #4]
 8028caa:	4413      	add	r3, r2
	}
 8028cac:	4618      	mov	r0, r3
 8028cae:	3718      	adds	r7, #24
 8028cb0:	46bd      	mov	sp, r7
 8028cb2:	bd80      	pop	{r7, pc}

08028cb4 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8028cb4:	b580      	push	{r7, lr}
 8028cb6:	b084      	sub	sp, #16
 8028cb8:	af00      	add	r7, sp, #0
 8028cba:	60f8      	str	r0, [r7, #12]
 8028cbc:	60b9      	str	r1, [r7, #8]
 8028cbe:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8028cc0:	687a      	ldr	r2, [r7, #4]
 8028cc2:	68b9      	ldr	r1, [r7, #8]
 8028cc4:	68f8      	ldr	r0, [r7, #12]
 8028cc6:	f000 f83b 	bl	8028d40 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8028cca:	4603      	mov	r3, r0
    }
 8028ccc:	4618      	mov	r0, r3
 8028cce:	3710      	adds	r7, #16
 8028cd0:	46bd      	mov	sp, r7
 8028cd2:	bd80      	pop	{r7, pc}

08028cd4 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8028cd4:	b580      	push	{r7, lr}
 8028cd6:	b086      	sub	sp, #24
 8028cd8:	af00      	add	r7, sp, #0
 8028cda:	6078      	str	r0, [r7, #4]
 8028cdc:	6039      	str	r1, [r7, #0]
    { return __miter_base(__it.base()); }
 8028cde:	f107 0308 	add.w	r3, r7, #8
 8028ce2:	6839      	ldr	r1, [r7, #0]
 8028ce4:	4618      	mov	r0, r3
 8028ce6:	f000 f845 	bl	8028d74 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>
 8028cea:	687b      	ldr	r3, [r7, #4]
 8028cec:	f107 0208 	add.w	r2, r7, #8
 8028cf0:	4611      	mov	r1, r2
 8028cf2:	4618      	mov	r0, r3
 8028cf4:	f7ff f8b7 	bl	8027e66 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8028cf8:	6878      	ldr	r0, [r7, #4]
 8028cfa:	3718      	adds	r7, #24
 8028cfc:	46bd      	mov	sp, r7
 8028cfe:	bd80      	pop	{r7, pc}

08028d00 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8028d00:	b580      	push	{r7, lr}
 8028d02:	b084      	sub	sp, #16
 8028d04:	af00      	add	r7, sp, #0
 8028d06:	60f8      	str	r0, [r7, #12]
 8028d08:	60b9      	str	r1, [r7, #8]
 8028d0a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8028d0c:	687a      	ldr	r2, [r7, #4]
 8028d0e:	68b9      	ldr	r1, [r7, #8]
 8028d10:	68f8      	ldr	r0, [r7, #12]
 8028d12:	f000 f83d 	bl	8028d90 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 8028d16:	4603      	mov	r3, r0
 8028d18:	4618      	mov	r0, r3
 8028d1a:	3710      	adds	r7, #16
 8028d1c:	46bd      	mov	sp, r7
 8028d1e:	bd80      	pop	{r7, pc}

08028d20 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8028d20:	b580      	push	{r7, lr}
 8028d22:	b084      	sub	sp, #16
 8028d24:	af00      	add	r7, sp, #0
 8028d26:	60f8      	str	r0, [r7, #12]
 8028d28:	60b9      	str	r1, [r7, #8]
 8028d2a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8028d2c:	687a      	ldr	r2, [r7, #4]
 8028d2e:	68b9      	ldr	r1, [r7, #8]
 8028d30:	68f8      	ldr	r0, [r7, #12]
 8028d32:	f000 f83d 	bl	8028db0 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 8028d36:	4603      	mov	r3, r0
 8028d38:	4618      	mov	r0, r3
 8028d3a:	3710      	adds	r7, #16
 8028d3c:	46bd      	mov	sp, r7
 8028d3e:	bd80      	pop	{r7, pc}

08028d40 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028d40:	b580      	push	{r7, lr}
 8028d42:	b086      	sub	sp, #24
 8028d44:	af00      	add	r7, sp, #0
 8028d46:	60f8      	str	r0, [r7, #12]
 8028d48:	60b9      	str	r1, [r7, #8]
 8028d4a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028d4c:	68ba      	ldr	r2, [r7, #8]
 8028d4e:	68fb      	ldr	r3, [r7, #12]
 8028d50:	1ad3      	subs	r3, r2, r3
 8028d52:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028d54:	697b      	ldr	r3, [r7, #20]
 8028d56:	2b00      	cmp	r3, #0
 8028d58:	d005      	beq.n	8028d66 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8028d5a:	697b      	ldr	r3, [r7, #20]
 8028d5c:	461a      	mov	r2, r3
 8028d5e:	68f9      	ldr	r1, [r7, #12]
 8028d60:	6878      	ldr	r0, [r7, #4]
 8028d62:	f014 fc09 	bl	803d578 <memmove>
	  return __result + _Num;
 8028d66:	697b      	ldr	r3, [r7, #20]
 8028d68:	687a      	ldr	r2, [r7, #4]
 8028d6a:	4413      	add	r3, r2
	}
 8028d6c:	4618      	mov	r0, r3
 8028d6e:	3718      	adds	r7, #24
 8028d70:	46bd      	mov	sp, r7
 8028d72:	bd80      	pop	{r7, pc}

08028d74 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>:
      base() const
 8028d74:	b580      	push	{r7, lr}
 8028d76:	b082      	sub	sp, #8
 8028d78:	af00      	add	r7, sp, #0
 8028d7a:	6078      	str	r0, [r7, #4]
 8028d7c:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 8028d7e:	683b      	ldr	r3, [r7, #0]
 8028d80:	4619      	mov	r1, r3
 8028d82:	6878      	ldr	r0, [r7, #4]
 8028d84:	f7fb fb88 	bl	8024498 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028d88:	6878      	ldr	r0, [r7, #4]
 8028d8a:	3708      	adds	r7, #8
 8028d8c:	46bd      	mov	sp, r7
 8028d8e:	bd80      	pop	{r7, pc}

08028d90 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8028d90:	b580      	push	{r7, lr}
 8028d92:	b084      	sub	sp, #16
 8028d94:	af00      	add	r7, sp, #0
 8028d96:	60f8      	str	r0, [r7, #12]
 8028d98:	60b9      	str	r1, [r7, #8]
 8028d9a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8028d9c:	687a      	ldr	r2, [r7, #4]
 8028d9e:	68b9      	ldr	r1, [r7, #8]
 8028da0:	68f8      	ldr	r0, [r7, #12]
 8028da2:	f000 f815 	bl	8028dd0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8028da6:	4603      	mov	r3, r0
    }
 8028da8:	4618      	mov	r0, r3
 8028daa:	3710      	adds	r7, #16
 8028dac:	46bd      	mov	sp, r7
 8028dae:	bd80      	pop	{r7, pc}

08028db0 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8028db0:	b580      	push	{r7, lr}
 8028db2:	b084      	sub	sp, #16
 8028db4:	af00      	add	r7, sp, #0
 8028db6:	60f8      	str	r0, [r7, #12]
 8028db8:	60b9      	str	r1, [r7, #8]
 8028dba:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8028dbc:	687a      	ldr	r2, [r7, #4]
 8028dbe:	68b9      	ldr	r1, [r7, #8]
 8028dc0:	68f8      	ldr	r0, [r7, #12]
 8028dc2:	f000 f82f 	bl	8028e24 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8028dc6:	4603      	mov	r3, r0
    }
 8028dc8:	4618      	mov	r0, r3
 8028dca:	3710      	adds	r7, #16
 8028dcc:	46bd      	mov	sp, r7
 8028dce:	bd80      	pop	{r7, pc}

08028dd0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028dd0:	b580      	push	{r7, lr}
 8028dd2:	b086      	sub	sp, #24
 8028dd4:	af00      	add	r7, sp, #0
 8028dd6:	60f8      	str	r0, [r7, #12]
 8028dd8:	60b9      	str	r1, [r7, #8]
 8028dda:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028ddc:	68ba      	ldr	r2, [r7, #8]
 8028dde:	68fb      	ldr	r3, [r7, #12]
 8028de0:	1ad3      	subs	r3, r2, r3
 8028de2:	109b      	asrs	r3, r3, #2
 8028de4:	4a0e      	ldr	r2, [pc, #56]	; (8028e20 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 8028de6:	fb02 f303 	mul.w	r3, r2, r3
 8028dea:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028dec:	697b      	ldr	r3, [r7, #20]
 8028dee:	2b00      	cmp	r3, #0
 8028df0:	d009      	beq.n	8028e06 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8028df2:	697a      	ldr	r2, [r7, #20]
 8028df4:	4613      	mov	r3, r2
 8028df6:	009b      	lsls	r3, r3, #2
 8028df8:	4413      	add	r3, r2
 8028dfa:	009b      	lsls	r3, r3, #2
 8028dfc:	461a      	mov	r2, r3
 8028dfe:	68f9      	ldr	r1, [r7, #12]
 8028e00:	6878      	ldr	r0, [r7, #4]
 8028e02:	f014 fbb9 	bl	803d578 <memmove>
	  return __result + _Num;
 8028e06:	697a      	ldr	r2, [r7, #20]
 8028e08:	4613      	mov	r3, r2
 8028e0a:	009b      	lsls	r3, r3, #2
 8028e0c:	4413      	add	r3, r2
 8028e0e:	009b      	lsls	r3, r3, #2
 8028e10:	461a      	mov	r2, r3
 8028e12:	687b      	ldr	r3, [r7, #4]
 8028e14:	4413      	add	r3, r2
	}
 8028e16:	4618      	mov	r0, r3
 8028e18:	3718      	adds	r7, #24
 8028e1a:	46bd      	mov	sp, r7
 8028e1c:	bd80      	pop	{r7, pc}
 8028e1e:	bf00      	nop
 8028e20:	cccccccd 	.word	0xcccccccd

08028e24 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8028e24:	b580      	push	{r7, lr}
 8028e26:	b086      	sub	sp, #24
 8028e28:	af00      	add	r7, sp, #0
 8028e2a:	60f8      	str	r0, [r7, #12]
 8028e2c:	60b9      	str	r1, [r7, #8]
 8028e2e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8028e30:	68ba      	ldr	r2, [r7, #8]
 8028e32:	68fb      	ldr	r3, [r7, #12]
 8028e34:	1ad3      	subs	r3, r2, r3
 8028e36:	109b      	asrs	r3, r3, #2
 8028e38:	4a11      	ldr	r2, [pc, #68]	; (8028e80 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x5c>)
 8028e3a:	fb02 f303 	mul.w	r3, r2, r3
 8028e3e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8028e40:	697b      	ldr	r3, [r7, #20]
 8028e42:	2b00      	cmp	r3, #0
 8028e44:	d010      	beq.n	8028e68 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8028e46:	697a      	ldr	r2, [r7, #20]
 8028e48:	4613      	mov	r3, r2
 8028e4a:	009b      	lsls	r3, r3, #2
 8028e4c:	4413      	add	r3, r2
 8028e4e:	009b      	lsls	r3, r3, #2
 8028e50:	425b      	negs	r3, r3
 8028e52:	687a      	ldr	r2, [r7, #4]
 8028e54:	18d0      	adds	r0, r2, r3
 8028e56:	697a      	ldr	r2, [r7, #20]
 8028e58:	4613      	mov	r3, r2
 8028e5a:	009b      	lsls	r3, r3, #2
 8028e5c:	4413      	add	r3, r2
 8028e5e:	009b      	lsls	r3, r3, #2
 8028e60:	461a      	mov	r2, r3
 8028e62:	68f9      	ldr	r1, [r7, #12]
 8028e64:	f014 fb88 	bl	803d578 <memmove>
	  return __result - _Num;
 8028e68:	697a      	ldr	r2, [r7, #20]
 8028e6a:	4613      	mov	r3, r2
 8028e6c:	009b      	lsls	r3, r3, #2
 8028e6e:	4413      	add	r3, r2
 8028e70:	009b      	lsls	r3, r3, #2
 8028e72:	425b      	negs	r3, r3
 8028e74:	687a      	ldr	r2, [r7, #4]
 8028e76:	4413      	add	r3, r2
	}
 8028e78:	4618      	mov	r0, r3
 8028e7a:	3718      	adds	r7, #24
 8028e7c:	46bd      	mov	sp, r7
 8028e7e:	bd80      	pop	{r7, pc}
 8028e80:	cccccccd 	.word	0xcccccccd

08028e84 <_Z41__static_initialization_and_destruction_0ii>:
 8028e84:	b580      	push	{r7, lr}
 8028e86:	b082      	sub	sp, #8
 8028e88:	af00      	add	r7, sp, #0
 8028e8a:	6078      	str	r0, [r7, #4]
 8028e8c:	6039      	str	r1, [r7, #0]
 8028e8e:	687b      	ldr	r3, [r7, #4]
 8028e90:	2b01      	cmp	r3, #1
 8028e92:	d107      	bne.n	8028ea4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8028e94:	683b      	ldr	r3, [r7, #0]
 8028e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8028e9a:	4293      	cmp	r3, r2
 8028e9c:	d102      	bne.n	8028ea4 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 8028e9e:	4809      	ldr	r0, [pc, #36]	; (8028ec4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8028ea0:	f7f9 fb36 	bl	8022510 <_ZN18MotherboardContextC1Ev>
 8028ea4:	687b      	ldr	r3, [r7, #4]
 8028ea6:	2b00      	cmp	r3, #0
 8028ea8:	d107      	bne.n	8028eba <_Z41__static_initialization_and_destruction_0ii+0x36>
 8028eaa:	683b      	ldr	r3, [r7, #0]
 8028eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8028eb0:	4293      	cmp	r3, r2
 8028eb2:	d102      	bne.n	8028eba <_Z41__static_initialization_and_destruction_0ii+0x36>
 8028eb4:	4803      	ldr	r0, [pc, #12]	; (8028ec4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8028eb6:	f7f9 fb55 	bl	8022564 <_ZN18MotherboardContextD1Ev>
}
 8028eba:	bf00      	nop
 8028ebc:	3708      	adds	r7, #8
 8028ebe:	46bd      	mov	sp, r7
 8028ec0:	bd80      	pop	{r7, pc}
 8028ec2:	bf00      	nop
 8028ec4:	240001d0 	.word	0x240001d0

08028ec8 <_GLOBAL__sub_I_MotherboardInit>:
 8028ec8:	b580      	push	{r7, lr}
 8028eca:	af00      	add	r7, sp, #0
 8028ecc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8028ed0:	2001      	movs	r0, #1
 8028ed2:	f7ff ffd7 	bl	8028e84 <_Z41__static_initialization_and_destruction_0ii>
 8028ed6:	bd80      	pop	{r7, pc}

08028ed8 <_GLOBAL__sub_D_MotherboardInit>:
 8028ed8:	b580      	push	{r7, lr}
 8028eda:	af00      	add	r7, sp, #0
 8028edc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8028ee0:	2000      	movs	r0, #0
 8028ee2:	f7ff ffcf 	bl	8028e84 <_Z41__static_initialization_and_destruction_0ii>
 8028ee6:	bd80      	pop	{r7, pc}

08028ee8 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 8028ee8:	b580      	push	{r7, lr}
 8028eea:	b086      	sub	sp, #24
 8028eec:	af00      	add	r7, sp, #0
 8028eee:	60b9      	str	r1, [r7, #8]
 8028ef0:	607b      	str	r3, [r7, #4]
 8028ef2:	4603      	mov	r3, r0
 8028ef4:	73fb      	strb	r3, [r7, #15]
 8028ef6:	4613      	mov	r3, r2
 8028ef8:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 8028efa:	2300      	movs	r3, #0
 8028efc:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8028efe:	687b      	ldr	r3, [r7, #4]
 8028f00:	2b00      	cmp	r3, #0
 8028f02:	d008      	beq.n	8028f16 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 8028f04:	89ba      	ldrh	r2, [r7, #12]
 8028f06:	687b      	ldr	r3, [r7, #4]
 8028f08:	7bf8      	ldrb	r0, [r7, #15]
 8028f0a:	68b9      	ldr	r1, [r7, #8]
 8028f0c:	f001 f925 	bl	802a15a <bhy2_hif_get_regs>
 8028f10:	4603      	mov	r3, r0
 8028f12:	75fb      	strb	r3, [r7, #23]
 8028f14:	e001      	b.n	8028f1a <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028f16:	23ff      	movs	r3, #255	; 0xff
 8028f18:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028f1e:	4618      	mov	r0, r3
 8028f20:	3718      	adds	r7, #24
 8028f22:	46bd      	mov	sp, r7
 8028f24:	bd80      	pop	{r7, pc}

08028f26 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 8028f26:	b590      	push	{r4, r7, lr}
 8028f28:	b08f      	sub	sp, #60	; 0x3c
 8028f2a:	af02      	add	r7, sp, #8
 8028f2c:	60f8      	str	r0, [r7, #12]
 8028f2e:	60b9      	str	r1, [r7, #8]
 8028f30:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 8028f32:	2300      	movs	r3, #0
 8028f34:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 8028f36:	687b      	ldr	r3, [r7, #4]
 8028f38:	2b00      	cmp	r3, #0
 8028f3a:	d002      	beq.n	8028f42 <bhy2_get_and_process_fifo+0x1c>
 8028f3c:	68fb      	ldr	r3, [r7, #12]
 8028f3e:	2b00      	cmp	r3, #0
 8028f40:	d102      	bne.n	8028f48 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 8028f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8028f46:	e11b      	b.n	8029180 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 8028f48:	68bb      	ldr	r3, [r7, #8]
 8028f4a:	2b00      	cmp	r3, #0
 8028f4c:	d102      	bne.n	8028f54 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 8028f4e:	f06f 0305 	mvn.w	r3, #5
 8028f52:	e115      	b.n	8029180 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 8028f54:	68ba      	ldr	r2, [r7, #8]
 8028f56:	2100      	movs	r1, #0
 8028f58:	68f8      	ldr	r0, [r7, #12]
 8028f5a:	f014 fb27 	bl	803d5ac <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 8028f5e:	f107 0314 	add.w	r3, r7, #20
 8028f62:	2214      	movs	r2, #20
 8028f64:	2100      	movs	r1, #0
 8028f66:	4618      	mov	r0, r3
 8028f68:	f014 fb20 	bl	803d5ac <memset>

    fifos.buffer = work_buffer;
 8028f6c:	68fb      	ldr	r3, [r7, #12]
 8028f6e:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 8028f70:	68bb      	ldr	r3, [r7, #8]
 8028f72:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 8028f74:	687a      	ldr	r2, [r7, #4]
 8028f76:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8028f7a:	4611      	mov	r1, r2
 8028f7c:	4618      	mov	r0, r3
 8028f7e:	f001 fa5f 	bl	802a440 <bhy2_hif_get_interrupt_status>
 8028f82:	4603      	mov	r3, r0
 8028f84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 8028f88:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028f8c:	2b00      	cmp	r3, #0
 8028f8e:	d002      	beq.n	8028f96 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 8028f90:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028f94:	e0f4      	b.n	8029180 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 8028f96:	2300      	movs	r3, #0
 8028f98:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8028f9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8028f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8028fa2:	e042      	b.n	802902a <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8028fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028fa8:	f003 0306 	and.w	r3, r3, #6
 8028fac:	2b02      	cmp	r3, #2
 8028fae:	d00e      	beq.n	8028fce <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8028fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028fb4:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8028fb8:	2b04      	cmp	r3, #4
 8028fba:	d008      	beq.n	8028fce <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8028fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028fc0:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8028fc4:	2b06      	cmp	r3, #6
 8028fc6:	d002      	beq.n	8028fce <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8028fc8:	69fb      	ldr	r3, [r7, #28]
 8028fca:	2b00      	cmp	r3, #0
 8028fcc:	d020      	beq.n	8029010 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8028fce:	2300      	movs	r3, #0
 8028fd0:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8028fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028fd4:	69bb      	ldr	r3, [r7, #24]
 8028fd6:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 8028fd8:	6a3a      	ldr	r2, [r7, #32]
 8028fda:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8028fdc:	1ad1      	subs	r1, r2, r3
 8028fde:	687b      	ldr	r3, [r7, #4]
 8028fe0:	f107 0214 	add.w	r2, r7, #20
 8028fe4:	f102 0408 	add.w	r4, r2, #8
 8028fe8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8028fec:	9300      	str	r3, [sp, #0]
 8028fee:	4623      	mov	r3, r4
 8028ff0:	f001 fad7 	bl	802a5a2 <bhy2_hif_get_wakeup_fifo>
 8028ff4:	4603      	mov	r3, r0
 8028ff6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 8028ffa:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8028ffe:	2b00      	cmp	r3, #0
 8029000:	d002      	beq.n	8029008 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 8029002:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8029006:	e0bb      	b.n	8029180 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8029008:	69ba      	ldr	r2, [r7, #24]
 802900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802900c:	4413      	add	r3, r2
 802900e:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 8029010:	f107 0314 	add.w	r3, r7, #20
 8029014:	687a      	ldr	r2, [r7, #4]
 8029016:	4619      	mov	r1, r3
 8029018:	2000      	movs	r0, #0
 802901a:	f000 fbad 	bl	8029778 <parse_fifo>
 802901e:	4603      	mov	r3, r0
 8029020:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8029024:	2300      	movs	r3, #0
 8029026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802902a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802902e:	2b00      	cmp	r3, #0
 8029030:	d102      	bne.n	8029038 <bhy2_get_and_process_fifo+0x112>
 8029032:	69fb      	ldr	r3, [r7, #28]
 8029034:	2b00      	cmp	r3, #0
 8029036:	d003      	beq.n	8029040 <bhy2_get_and_process_fifo+0x11a>
 8029038:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802903c:	2b00      	cmp	r3, #0
 802903e:	d0b1      	beq.n	8028fa4 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 8029040:	2300      	movs	r3, #0
 8029042:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8029044:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8029048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802904c:	e042      	b.n	80290d4 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 802904e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8029052:	f003 0318 	and.w	r3, r3, #24
 8029056:	2b08      	cmp	r3, #8
 8029058:	d00e      	beq.n	8029078 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 802905a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802905e:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8029062:	2b10      	cmp	r3, #16
 8029064:	d008      	beq.n	8029078 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8029066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802906a:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 802906e:	2b18      	cmp	r3, #24
 8029070:	d002      	beq.n	8029078 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 8029072:	69fb      	ldr	r3, [r7, #28]
 8029074:	2b00      	cmp	r3, #0
 8029076:	d020      	beq.n	80290ba <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8029078:	2300      	movs	r3, #0
 802907a:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 802907c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802907e:	69bb      	ldr	r3, [r7, #24]
 8029080:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8029082:	6a3a      	ldr	r2, [r7, #32]
 8029084:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8029086:	1ad1      	subs	r1, r2, r3
 8029088:	687b      	ldr	r3, [r7, #4]
 802908a:	f107 0214 	add.w	r2, r7, #20
 802908e:	f102 0408 	add.w	r4, r2, #8
 8029092:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8029096:	9300      	str	r3, [sp, #0]
 8029098:	4623      	mov	r3, r4
 802909a:	f001 fa98 	bl	802a5ce <bhy2_hif_get_nonwakeup_fifo>
 802909e:	4603      	mov	r3, r0
 80290a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 80290a4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80290a8:	2b00      	cmp	r3, #0
 80290aa:	d002      	beq.n	80290b2 <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 80290ac:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80290b0:	e066      	b.n	8029180 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 80290b2:	69ba      	ldr	r2, [r7, #24]
 80290b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80290b6:	4413      	add	r3, r2
 80290b8:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 80290ba:	f107 0314 	add.w	r3, r7, #20
 80290be:	687a      	ldr	r2, [r7, #4]
 80290c0:	4619      	mov	r1, r3
 80290c2:	2001      	movs	r0, #1
 80290c4:	f000 fb58 	bl	8029778 <parse_fifo>
 80290c8:	4603      	mov	r3, r0
 80290ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 80290ce:	2300      	movs	r3, #0
 80290d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80290d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80290d8:	2b00      	cmp	r3, #0
 80290da:	d102      	bne.n	80290e2 <bhy2_get_and_process_fifo+0x1bc>
 80290dc:	69fb      	ldr	r3, [r7, #28]
 80290de:	2b00      	cmp	r3, #0
 80290e0:	d003      	beq.n	80290ea <bhy2_get_and_process_fifo+0x1c4>
 80290e2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80290e6:	2b00      	cmp	r3, #0
 80290e8:	d0b1      	beq.n	802904e <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 80290ea:	2300      	movs	r3, #0
 80290ec:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80290ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80290f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80290f6:	e036      	b.n	8029166 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 80290f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80290fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029100:	2b00      	cmp	r3, #0
 8029102:	d102      	bne.n	802910a <bhy2_get_and_process_fifo+0x1e4>
 8029104:	69fb      	ldr	r3, [r7, #28]
 8029106:	2b00      	cmp	r3, #0
 8029108:	d020      	beq.n	802914c <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 802910a:	2300      	movs	r3, #0
 802910c:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 802910e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029110:	69bb      	ldr	r3, [r7, #24]
 8029112:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8029114:	6a3a      	ldr	r2, [r7, #32]
 8029116:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8029118:	1ad1      	subs	r1, r2, r3
 802911a:	687b      	ldr	r3, [r7, #4]
 802911c:	f107 0214 	add.w	r2, r7, #20
 8029120:	f102 0408 	add.w	r4, r2, #8
 8029124:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8029128:	9300      	str	r3, [sp, #0]
 802912a:	4623      	mov	r3, r4
 802912c:	f001 fab0 	bl	802a690 <bhy2_hif_get_status_fifo_async>
 8029130:	4603      	mov	r3, r0
 8029132:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8029136:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802913a:	2b00      	cmp	r3, #0
 802913c:	d002      	beq.n	8029144 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 802913e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8029142:	e01d      	b.n	8029180 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8029144:	69ba      	ldr	r2, [r7, #24]
 8029146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029148:	4413      	add	r3, r2
 802914a:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 802914c:	f107 0314 	add.w	r3, r7, #20
 8029150:	687a      	ldr	r2, [r7, #4]
 8029152:	4619      	mov	r1, r3
 8029154:	2002      	movs	r0, #2
 8029156:	f000 fb0f 	bl	8029778 <parse_fifo>
 802915a:	4603      	mov	r3, r0
 802915c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8029160:	2300      	movs	r3, #0
 8029162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8029166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802916a:	2b00      	cmp	r3, #0
 802916c:	d102      	bne.n	8029174 <bhy2_get_and_process_fifo+0x24e>
 802916e:	69fb      	ldr	r3, [r7, #28]
 8029170:	2b00      	cmp	r3, #0
 8029172:	d003      	beq.n	802917c <bhy2_get_and_process_fifo+0x256>
 8029174:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8029178:	2b00      	cmp	r3, #0
 802917a:	d0bd      	beq.n	80290f8 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 802917c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8029180:	4618      	mov	r0, r3
 8029182:	3734      	adds	r7, #52	; 0x34
 8029184:	46bd      	mov	sp, r7
 8029186:	bd90      	pop	{r4, r7, pc}

08029188 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8029188:	b580      	push	{r7, lr}
 802918a:	b086      	sub	sp, #24
 802918c:	af00      	add	r7, sp, #0
 802918e:	4603      	mov	r3, r0
 8029190:	ed87 0a02 	vstr	s0, [r7, #8]
 8029194:	6079      	str	r1, [r7, #4]
 8029196:	603a      	str	r2, [r7, #0]
 8029198:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802919a:	2300      	movs	r3, #0
 802919c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 802919e:	683b      	ldr	r3, [r7, #0]
 80291a0:	2b00      	cmp	r3, #0
 80291a2:	d00a      	beq.n	80291ba <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 80291a4:	683a      	ldr	r2, [r7, #0]
 80291a6:	7bfb      	ldrb	r3, [r7, #15]
 80291a8:	6879      	ldr	r1, [r7, #4]
 80291aa:	ed97 0a02 	vldr	s0, [r7, #8]
 80291ae:	4618      	mov	r0, r3
 80291b0:	f001 fa84 	bl	802a6bc <bhy2_hif_exec_sensor_conf_cmd>
 80291b4:	4603      	mov	r3, r0
 80291b6:	75fb      	strb	r3, [r7, #23]
 80291b8:	e001      	b.n	80291be <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80291ba:	23ff      	movs	r3, #255	; 0xff
 80291bc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80291be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80291c2:	4618      	mov	r0, r3
 80291c4:	3718      	adds	r7, #24
 80291c6:	46bd      	mov	sp, r7
 80291c8:	bd80      	pop	{r7, pc}

080291ca <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 80291ca:	b580      	push	{r7, lr}
 80291cc:	b084      	sub	sp, #16
 80291ce:	af00      	add	r7, sp, #0
 80291d0:	6078      	str	r0, [r7, #4]
 80291d2:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 80291d4:	2300      	movs	r3, #0
 80291d6:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 80291d8:	683b      	ldr	r3, [r7, #0]
 80291da:	2b00      	cmp	r3, #0
 80291dc:	d007      	beq.n	80291ee <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 80291de:	683b      	ldr	r3, [r7, #0]
 80291e0:	4619      	mov	r1, r3
 80291e2:	6878      	ldr	r0, [r7, #4]
 80291e4:	f001 f8e8 	bl	802a3b8 <bhy2_hif_get_product_id>
 80291e8:	4603      	mov	r3, r0
 80291ea:	73fb      	strb	r3, [r7, #15]
 80291ec:	e001      	b.n	80291f2 <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80291ee:	23ff      	movs	r3, #255	; 0xff
 80291f0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80291f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80291f6:	4618      	mov	r0, r3
 80291f8:	3710      	adds	r7, #16
 80291fa:	46bd      	mov	sp, r7
 80291fc:	bd80      	pop	{r7, pc}

080291fe <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 80291fe:	b580      	push	{r7, lr}
 8029200:	b084      	sub	sp, #16
 8029202:	af00      	add	r7, sp, #0
 8029204:	6078      	str	r0, [r7, #4]
 8029206:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8029208:	2300      	movs	r3, #0
 802920a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802920c:	683b      	ldr	r3, [r7, #0]
 802920e:	2b00      	cmp	r3, #0
 8029210:	d007      	beq.n	8029222 <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8029212:	683b      	ldr	r3, [r7, #0]
 8029214:	4619      	mov	r1, r3
 8029216:	6878      	ldr	r0, [r7, #4]
 8029218:	f001 f8de 	bl	802a3d8 <bhy2_hif_get_kernel_version>
 802921c:	4603      	mov	r3, r0
 802921e:	73fb      	strb	r3, [r7, #15]
 8029220:	e001      	b.n	8029226 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029222:	23ff      	movs	r3, #255	; 0xff
 8029224:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8029226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802922a:	4618      	mov	r0, r3
 802922c:	3710      	adds	r7, #16
 802922e:	46bd      	mov	sp, r7
 8029230:	bd80      	pop	{r7, pc}

08029232 <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8029232:	b580      	push	{r7, lr}
 8029234:	b084      	sub	sp, #16
 8029236:	af00      	add	r7, sp, #0
 8029238:	6078      	str	r0, [r7, #4]
 802923a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802923c:	2300      	movs	r3, #0
 802923e:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8029240:	683b      	ldr	r3, [r7, #0]
 8029242:	2b00      	cmp	r3, #0
 8029244:	d007      	beq.n	8029256 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8029246:	683b      	ldr	r3, [r7, #0]
 8029248:	4619      	mov	r1, r3
 802924a:	6878      	ldr	r0, [r7, #4]
 802924c:	f001 f8e8 	bl	802a420 <bhy2_hif_get_boot_status>
 8029250:	4603      	mov	r3, r0
 8029252:	73fb      	strb	r3, [r7, #15]
 8029254:	e001      	b.n	802925a <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029256:	23ff      	movs	r3, #255	; 0xff
 8029258:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802925a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802925e:	4618      	mov	r0, r3
 8029260:	3710      	adds	r7, #16
 8029262:	46bd      	mov	sp, r7
 8029264:	bd80      	pop	{r7, pc}

08029266 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8029266:	b580      	push	{r7, lr}
 8029268:	b086      	sub	sp, #24
 802926a:	af02      	add	r7, sp, #8
 802926c:	6078      	str	r0, [r7, #4]
 802926e:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8029270:	2300      	movs	r3, #0
 8029272:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8029274:	2300      	movs	r3, #0
 8029276:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8029278:	683b      	ldr	r3, [r7, #0]
 802927a:	2b00      	cmp	r3, #0
 802927c:	d00d      	beq.n	802929a <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 802927e:	683b      	ldr	r3, [r7, #0]
 8029280:	f107 0208 	add.w	r2, r7, #8
 8029284:	9300      	str	r3, [sp, #0]
 8029286:	4613      	mov	r3, r2
 8029288:	2220      	movs	r2, #32
 802928a:	6879      	ldr	r1, [r7, #4]
 802928c:	f240 101f 	movw	r0, #287	; 0x11f
 8029290:	f001 f80a 	bl	802a2a8 <bhy2_hif_get_parameter>
 8029294:	4603      	mov	r3, r0
 8029296:	73fb      	strb	r3, [r7, #15]
 8029298:	e001      	b.n	802929e <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802929a:	23ff      	movs	r3, #255	; 0xff
 802929c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802929e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80292a2:	4618      	mov	r0, r3
 80292a4:	3710      	adds	r7, #16
 80292a6:	46bd      	mov	sp, r7
 80292a8:	bd80      	pop	{r7, pc}

080292aa <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 80292aa:	b580      	push	{r7, lr}
 80292ac:	b086      	sub	sp, #24
 80292ae:	af00      	add	r7, sp, #0
 80292b0:	60f8      	str	r0, [r7, #12]
 80292b2:	60b9      	str	r1, [r7, #8]
 80292b4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 80292b6:	2300      	movs	r3, #0
 80292b8:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 80292ba:	687b      	ldr	r3, [r7, #4]
 80292bc:	2b00      	cmp	r3, #0
 80292be:	d002      	beq.n	80292c6 <bhy2_upload_firmware_to_ram+0x1c>
 80292c0:	68fb      	ldr	r3, [r7, #12]
 80292c2:	2b00      	cmp	r3, #0
 80292c4:	d102      	bne.n	80292cc <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 80292c6:	23ff      	movs	r3, #255	; 0xff
 80292c8:	75fb      	strb	r3, [r7, #23]
 80292ca:	e007      	b.n	80292dc <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 80292cc:	687b      	ldr	r3, [r7, #4]
 80292ce:	461a      	mov	r2, r3
 80292d0:	68b9      	ldr	r1, [r7, #8]
 80292d2:	68f8      	ldr	r0, [r7, #12]
 80292d4:	f001 f90d 	bl	802a4f2 <bhy2_hif_upload_firmware_to_ram>
 80292d8:	4603      	mov	r3, r0
 80292da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80292dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80292e0:	4618      	mov	r0, r3
 80292e2:	3718      	adds	r7, #24
 80292e4:	46bd      	mov	sp, r7
 80292e6:	bd80      	pop	{r7, pc}

080292e8 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 80292e8:	b580      	push	{r7, lr}
 80292ea:	b084      	sub	sp, #16
 80292ec:	af00      	add	r7, sp, #0
 80292ee:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 80292f0:	2300      	movs	r3, #0
 80292f2:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 80292f4:	687b      	ldr	r3, [r7, #4]
 80292f6:	2b00      	cmp	r3, #0
 80292f8:	d102      	bne.n	8029300 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 80292fa:	23ff      	movs	r3, #255	; 0xff
 80292fc:	73fb      	strb	r3, [r7, #15]
 80292fe:	e005      	b.n	802930c <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8029300:	687b      	ldr	r3, [r7, #4]
 8029302:	4618      	mov	r0, r3
 8029304:	f001 f932 	bl	802a56c <bhy2_hif_boot_program_ram>
 8029308:	4603      	mov	r3, r0
 802930a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802930c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8029310:	4618      	mov	r0, r3
 8029312:	3710      	adds	r7, #16
 8029314:	46bd      	mov	sp, r7
 8029316:	bd80      	pop	{r7, pc}

08029318 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8029318:	b580      	push	{r7, lr}
 802931a:	b084      	sub	sp, #16
 802931c:	af00      	add	r7, sp, #0
 802931e:	4603      	mov	r3, r0
 8029320:	6039      	str	r1, [r7, #0]
 8029322:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8029324:	2300      	movs	r3, #0
 8029326:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8029328:	683b      	ldr	r3, [r7, #0]
 802932a:	2b00      	cmp	r3, #0
 802932c:	d102      	bne.n	8029334 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 802932e:	23ff      	movs	r3, #255	; 0xff
 8029330:	73fb      	strb	r3, [r7, #15]
 8029332:	e007      	b.n	8029344 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8029334:	683b      	ldr	r3, [r7, #0]
 8029336:	1df9      	adds	r1, r7, #7
 8029338:	2201      	movs	r2, #1
 802933a:	2007      	movs	r0, #7
 802933c:	f000 ff45 	bl	802a1ca <bhy2_hif_set_regs>
 8029340:	4603      	mov	r3, r0
 8029342:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8029344:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8029348:	4618      	mov	r0, r3
 802934a:	3710      	adds	r7, #16
 802934c:	46bd      	mov	sp, r7
 802934e:	bd80      	pop	{r7, pc}

08029350 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8029350:	b580      	push	{r7, lr}
 8029352:	b084      	sub	sp, #16
 8029354:	af00      	add	r7, sp, #0
 8029356:	6078      	str	r0, [r7, #4]
 8029358:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802935a:	2300      	movs	r3, #0
 802935c:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802935e:	683b      	ldr	r3, [r7, #0]
 8029360:	2b00      	cmp	r3, #0
 8029362:	d102      	bne.n	802936a <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8029364:	23ff      	movs	r3, #255	; 0xff
 8029366:	73fb      	strb	r3, [r7, #15]
 8029368:	e007      	b.n	802937a <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 802936a:	683b      	ldr	r3, [r7, #0]
 802936c:	2201      	movs	r2, #1
 802936e:	6879      	ldr	r1, [r7, #4]
 8029370:	2007      	movs	r0, #7
 8029372:	f000 fef2 	bl	802a15a <bhy2_hif_get_regs>
 8029376:	4603      	mov	r3, r0
 8029378:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802937a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802937e:	4618      	mov	r0, r3
 8029380:	3710      	adds	r7, #16
 8029382:	46bd      	mov	sp, r7
 8029384:	bd80      	pop	{r7, pc}

08029386 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8029386:	b580      	push	{r7, lr}
 8029388:	b084      	sub	sp, #16
 802938a:	af00      	add	r7, sp, #0
 802938c:	6078      	str	r0, [r7, #4]
 802938e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8029390:	2300      	movs	r3, #0
 8029392:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8029394:	683b      	ldr	r3, [r7, #0]
 8029396:	2b00      	cmp	r3, #0
 8029398:	d102      	bne.n	80293a0 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 802939a:	23ff      	movs	r3, #255	; 0xff
 802939c:	73fb      	strb	r3, [r7, #15]
 802939e:	e006      	b.n	80293ae <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 80293a0:	683b      	ldr	r3, [r7, #0]
 80293a2:	4619      	mov	r1, r3
 80293a4:	6878      	ldr	r0, [r7, #4]
 80293a6:	f001 f84b 	bl	802a440 <bhy2_hif_get_interrupt_status>
 80293aa:	4603      	mov	r3, r0
 80293ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80293ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80293b2:	4618      	mov	r0, r3
 80293b4:	3710      	adds	r7, #16
 80293b6:	46bd      	mov	sp, r7
 80293b8:	bd80      	pop	{r7, pc}

080293ba <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 80293ba:	b580      	push	{r7, lr}
 80293bc:	b084      	sub	sp, #16
 80293be:	af00      	add	r7, sp, #0
 80293c0:	4603      	mov	r3, r0
 80293c2:	6039      	str	r1, [r7, #0]
 80293c4:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 80293c6:	2300      	movs	r3, #0
 80293c8:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 80293ca:	683b      	ldr	r3, [r7, #0]
 80293cc:	2b00      	cmp	r3, #0
 80293ce:	d102      	bne.n	80293d6 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 80293d0:	23ff      	movs	r3, #255	; 0xff
 80293d2:	73fb      	strb	r3, [r7, #15]
 80293d4:	e007      	b.n	80293e6 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 80293d6:	683b      	ldr	r3, [r7, #0]
 80293d8:	1df9      	adds	r1, r7, #7
 80293da:	2201      	movs	r2, #1
 80293dc:	2006      	movs	r0, #6
 80293de:	f000 fef4 	bl	802a1ca <bhy2_hif_set_regs>
 80293e2:	4603      	mov	r3, r0
 80293e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80293e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80293ea:	4618      	mov	r0, r3
 80293ec:	3710      	adds	r7, #16
 80293ee:	46bd      	mov	sp, r7
 80293f0:	bd80      	pop	{r7, pc}

080293f2 <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 80293f2:	b580      	push	{r7, lr}
 80293f4:	b084      	sub	sp, #16
 80293f6:	af00      	add	r7, sp, #0
 80293f8:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 80293fa:	2300      	movs	r3, #0
 80293fc:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 80293fe:	687b      	ldr	r3, [r7, #4]
 8029400:	2b00      	cmp	r3, #0
 8029402:	d102      	bne.n	802940a <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8029404:	23ff      	movs	r3, #255	; 0xff
 8029406:	73fb      	strb	r3, [r7, #15]
 8029408:	e005      	b.n	8029416 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 802940a:	687b      	ldr	r3, [r7, #4]
 802940c:	4618      	mov	r0, r3
 802940e:	f001 f827 	bl	802a460 <bhy2_hif_reset>
 8029412:	4603      	mov	r3, r0
 8029414:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8029416:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802941a:	4618      	mov	r0, r3
 802941c:	3710      	adds	r7, #16
 802941e:	46bd      	mov	sp, r7
 8029420:	bd80      	pop	{r7, pc}

08029422 <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8029422:	b580      	push	{r7, lr}
 8029424:	b08a      	sub	sp, #40	; 0x28
 8029426:	af04      	add	r7, sp, #16
 8029428:	60b9      	str	r1, [r7, #8]
 802942a:	607a      	str	r2, [r7, #4]
 802942c:	603b      	str	r3, [r7, #0]
 802942e:	4603      	mov	r3, r0
 8029430:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8029432:	2300      	movs	r3, #0
 8029434:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8029436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029438:	2b00      	cmp	r3, #0
 802943a:	d014      	beq.n	8029466 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 802943c:	f640 1238 	movw	r2, #2360	; 0x938
 8029440:	2100      	movs	r1, #0
 8029442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8029444:	f014 f8b2 	bl	803d5ac <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8029448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802944a:	7bf8      	ldrb	r0, [r7, #15]
 802944c:	9302      	str	r3, [sp, #8]
 802944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029450:	9301      	str	r3, [sp, #4]
 8029452:	6a3b      	ldr	r3, [r7, #32]
 8029454:	9300      	str	r3, [sp, #0]
 8029456:	683b      	ldr	r3, [r7, #0]
 8029458:	687a      	ldr	r2, [r7, #4]
 802945a:	68b9      	ldr	r1, [r7, #8]
 802945c:	f000 fe3e 	bl	802a0dc <bhy2_hif_init>
 8029460:	4603      	mov	r3, r0
 8029462:	75fb      	strb	r3, [r7, #23]
 8029464:	e001      	b.n	802946a <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029466:	23ff      	movs	r3, #255	; 0xff
 8029468:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802946a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802946e:	4618      	mov	r0, r3
 8029470:	3718      	adds	r7, #24
 8029472:	46bd      	mov	sp, r7
 8029474:	bd80      	pop	{r7, pc}

08029476 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8029476:	b480      	push	{r7}
 8029478:	b087      	sub	sp, #28
 802947a:	af00      	add	r7, sp, #0
 802947c:	60b9      	str	r1, [r7, #8]
 802947e:	607a      	str	r2, [r7, #4]
 8029480:	603b      	str	r3, [r7, #0]
 8029482:	4603      	mov	r3, r0
 8029484:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8029486:	2300      	movs	r3, #0
 8029488:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 802948a:	683b      	ldr	r3, [r7, #0]
 802948c:	2b00      	cmp	r3, #0
 802948e:	d002      	beq.n	8029496 <bhy2_register_fifo_parse_callback+0x20>
 8029490:	68bb      	ldr	r3, [r7, #8]
 8029492:	2b00      	cmp	r3, #0
 8029494:	d102      	bne.n	802949c <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8029496:	23ff      	movs	r3, #255	; 0xff
 8029498:	75fb      	strb	r3, [r7, #23]
 802949a:	e013      	b.n	80294c4 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 802949c:	7bfa      	ldrb	r2, [r7, #15]
 802949e:	6839      	ldr	r1, [r7, #0]
 80294a0:	4613      	mov	r3, r2
 80294a2:	00db      	lsls	r3, r3, #3
 80294a4:	4413      	add	r3, r2
 80294a6:	440b      	add	r3, r1
 80294a8:	3318      	adds	r3, #24
 80294aa:	68ba      	ldr	r2, [r7, #8]
 80294ac:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 80294b0:	7bfa      	ldrb	r2, [r7, #15]
 80294b2:	6839      	ldr	r1, [r7, #0]
 80294b4:	4613      	mov	r3, r2
 80294b6:	00db      	lsls	r3, r3, #3
 80294b8:	4413      	add	r3, r2
 80294ba:	440b      	add	r3, r1
 80294bc:	3318      	adds	r3, #24
 80294be:	687a      	ldr	r2, [r7, #4]
 80294c0:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 80294c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80294c8:	4618      	mov	r0, r3
 80294ca:	371c      	adds	r7, #28
 80294cc:	46bd      	mov	sp, r7
 80294ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294d2:	4770      	bx	lr

080294d4 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 80294d4:	b580      	push	{r7, lr}
 80294d6:	b092      	sub	sp, #72	; 0x48
 80294d8:	af00      	add	r7, sp, #0
 80294da:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 80294dc:	687b      	ldr	r3, [r7, #4]
 80294de:	2b00      	cmp	r3, #0
 80294e0:	d103      	bne.n	80294ea <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 80294e2:	23ff      	movs	r3, #255	; 0xff
 80294e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80294e8:	e079      	b.n	80295de <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 80294ea:	f107 0308 	add.w	r3, r7, #8
 80294ee:	6879      	ldr	r1, [r7, #4]
 80294f0:	4618      	mov	r0, r3
 80294f2:	f7ff feb8 	bl	8029266 <bhy2_get_virt_sensor_list>
 80294f6:	4603      	mov	r3, r0
 80294f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 80294fc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8029500:	2b00      	cmp	r3, #0
 8029502:	d16c      	bne.n	80295de <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8029504:	687b      	ldr	r3, [r7, #4]
 8029506:	2201      	movs	r2, #1
 8029508:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 802950a:	2301      	movs	r3, #1
 802950c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8029510:	e041      	b.n	8029596 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8029512:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8029516:	08db      	lsrs	r3, r3, #3
 8029518:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 802951c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8029520:	f003 0307 	and.w	r3, r3, #7
 8029524:	2201      	movs	r2, #1
 8029526:	fa02 f303 	lsl.w	r3, r2, r3
 802952a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 802952e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8029532:	3348      	adds	r3, #72	; 0x48
 8029534:	443b      	add	r3, r7
 8029536:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 802953a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 802953e:	4013      	ands	r3, r2
 8029540:	b2db      	uxtb	r3, r3
 8029542:	2b00      	cmp	r3, #0
 8029544:	d022      	beq.n	802958c <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8029546:	687a      	ldr	r2, [r7, #4]
 8029548:	f107 0128 	add.w	r1, r7, #40	; 0x28
 802954c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8029550:	4618      	mov	r0, r3
 8029552:	f001 f8e6 	bl	802a722 <bhy2_hif_get_sensor_info>
 8029556:	4603      	mov	r3, r0
 8029558:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 802955c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8029560:	2b00      	cmp	r3, #0
 8029562:	d113      	bne.n	802958c <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8029564:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8029568:	2b00      	cmp	r3, #0
 802956a:	d103      	bne.n	8029574 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 802956c:	23f8      	movs	r3, #248	; 0xf8
 802956e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8029572:	e018      	b.n	80295a6 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8029574:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8029578:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 802957c:	6879      	ldr	r1, [r7, #4]
 802957e:	4613      	mov	r3, r2
 8029580:	00db      	lsls	r3, r3, #3
 8029582:	4413      	add	r3, r2
 8029584:	440b      	add	r3, r1
 8029586:	331c      	adds	r3, #28
 8029588:	4602      	mov	r2, r0
 802958a:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 802958c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8029590:	3301      	adds	r3, #1
 8029592:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8029596:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802959a:	2bf4      	cmp	r3, #244	; 0xf4
 802959c:	d803      	bhi.n	80295a6 <bhy2_update_virtual_sensor_list+0xd2>
 802959e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80295a2:	2b00      	cmp	r3, #0
 80295a4:	d0b5      	beq.n	8029512 <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 80295a6:	23ff      	movs	r3, #255	; 0xff
 80295a8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80295ac:	e013      	b.n	80295d6 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 80295ae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80295b2:	3bf5      	subs	r3, #245	; 0xf5
 80295b4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80295b8:	490c      	ldr	r1, [pc, #48]	; (80295ec <bhy2_update_virtual_sensor_list+0x118>)
 80295ba:	5cc8      	ldrb	r0, [r1, r3]
 80295bc:	6879      	ldr	r1, [r7, #4]
 80295be:	4613      	mov	r3, r2
 80295c0:	00db      	lsls	r3, r3, #3
 80295c2:	4413      	add	r3, r2
 80295c4:	440b      	add	r3, r1
 80295c6:	331c      	adds	r3, #28
 80295c8:	4602      	mov	r2, r0
 80295ca:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 80295cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80295d0:	3b01      	subs	r3, #1
 80295d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80295d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80295da:	2bf4      	cmp	r3, #244	; 0xf4
 80295dc:	d8e7      	bhi.n	80295ae <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 80295de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80295e2:	4618      	mov	r0, r3
 80295e4:	3748      	adds	r7, #72	; 0x48
 80295e6:	46bd      	mov	sp, r7
 80295e8:	bd80      	pop	{r7, pc}
 80295ea:	bf00      	nop
 80295ec:	0805955c 	.word	0x0805955c

080295f0 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 80295f0:	b580      	push	{r7, lr}
 80295f2:	b084      	sub	sp, #16
 80295f4:	af00      	add	r7, sp, #0
 80295f6:	6078      	str	r0, [r7, #4]
 80295f8:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 80295fa:	2300      	movs	r3, #0
 80295fc:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 80295fe:	683b      	ldr	r3, [r7, #0]
 8029600:	2b00      	cmp	r3, #0
 8029602:	d002      	beq.n	802960a <bhy2_get_error_value+0x1a>
 8029604:	687b      	ldr	r3, [r7, #4]
 8029606:	2b00      	cmp	r3, #0
 8029608:	d102      	bne.n	8029610 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 802960a:	23ff      	movs	r3, #255	; 0xff
 802960c:	73fb      	strb	r3, [r7, #15]
 802960e:	e007      	b.n	8029620 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8029610:	683b      	ldr	r3, [r7, #0]
 8029612:	2201      	movs	r2, #1
 8029614:	6879      	ldr	r1, [r7, #4]
 8029616:	202e      	movs	r0, #46	; 0x2e
 8029618:	f7ff fc66 	bl	8028ee8 <bhy2_get_regs>
 802961c:	4603      	mov	r3, r0
 802961e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8029620:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8029624:	4618      	mov	r0, r3
 8029626:	3710      	adds	r7, #16
 8029628:	46bd      	mov	sp, r7
 802962a:	bd80      	pop	{r7, pc}

0802962c <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 802962c:	b480      	push	{r7}
 802962e:	b087      	sub	sp, #28
 8029630:	af00      	add	r7, sp, #0
 8029632:	4603      	mov	r3, r0
 8029634:	60b9      	str	r1, [r7, #8]
 8029636:	607a      	str	r2, [r7, #4]
 8029638:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 802963a:	2300      	movs	r3, #0
 802963c:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 802963e:	687b      	ldr	r3, [r7, #4]
 8029640:	2b00      	cmp	r3, #0
 8029642:	d04e      	beq.n	80296e2 <get_callback_info+0xb6>
 8029644:	68bb      	ldr	r3, [r7, #8]
 8029646:	2b00      	cmp	r3, #0
 8029648:	d04b      	beq.n	80296e2 <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 802964a:	7bfa      	ldrb	r2, [r7, #15]
 802964c:	68b8      	ldr	r0, [r7, #8]
 802964e:	6879      	ldr	r1, [r7, #4]
 8029650:	4613      	mov	r3, r2
 8029652:	00db      	lsls	r3, r3, #3
 8029654:	4413      	add	r3, r2
 8029656:	440b      	add	r3, r1
 8029658:	3318      	adds	r3, #24
 802965a:	4602      	mov	r2, r0
 802965c:	3304      	adds	r3, #4
 802965e:	6818      	ldr	r0, [r3, #0]
 8029660:	6859      	ldr	r1, [r3, #4]
 8029662:	6010      	str	r0, [r2, #0]
 8029664:	6051      	str	r1, [r2, #4]
 8029666:	7a1b      	ldrb	r3, [r3, #8]
 8029668:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 802966a:	7bfb      	ldrb	r3, [r7, #15]
 802966c:	2bf4      	cmp	r3, #244	; 0xf4
 802966e:	d91b      	bls.n	80296a8 <get_callback_info+0x7c>
 8029670:	68bb      	ldr	r3, [r7, #8]
 8029672:	781b      	ldrb	r3, [r3, #0]
 8029674:	2b00      	cmp	r3, #0
 8029676:	d117      	bne.n	80296a8 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8029678:	68bb      	ldr	r3, [r7, #8]
 802967a:	2200      	movs	r2, #0
 802967c:	705a      	strb	r2, [r3, #1]
 802967e:	2200      	movs	r2, #0
 8029680:	709a      	strb	r2, [r3, #2]
 8029682:	2200      	movs	r2, #0
 8029684:	70da      	strb	r2, [r3, #3]
 8029686:	2200      	movs	r2, #0
 8029688:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 802968a:	68bb      	ldr	r3, [r7, #8]
 802968c:	2200      	movs	r2, #0
 802968e:	715a      	strb	r2, [r3, #5]
 8029690:	2200      	movs	r2, #0
 8029692:	719a      	strb	r2, [r3, #6]
 8029694:	2200      	movs	r2, #0
 8029696:	71da      	strb	r2, [r3, #7]
 8029698:	2200      	movs	r2, #0
 802969a:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 802969c:	7bfb      	ldrb	r3, [r7, #15]
 802969e:	3bf5      	subs	r3, #245	; 0xf5
 80296a0:	4a16      	ldr	r2, [pc, #88]	; (80296fc <get_callback_info+0xd0>)
 80296a2:	5cd2      	ldrb	r2, [r2, r3]
 80296a4:	68bb      	ldr	r3, [r7, #8]
 80296a6:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 80296a8:	7bfb      	ldrb	r3, [r7, #15]
 80296aa:	2b00      	cmp	r3, #0
 80296ac:	d11c      	bne.n	80296e8 <get_callback_info+0xbc>
 80296ae:	68bb      	ldr	r3, [r7, #8]
 80296b0:	781b      	ldrb	r3, [r3, #0]
 80296b2:	2b00      	cmp	r3, #0
 80296b4:	d118      	bne.n	80296e8 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 80296b6:	68bb      	ldr	r3, [r7, #8]
 80296b8:	2200      	movs	r2, #0
 80296ba:	705a      	strb	r2, [r3, #1]
 80296bc:	2200      	movs	r2, #0
 80296be:	709a      	strb	r2, [r3, #2]
 80296c0:	2200      	movs	r2, #0
 80296c2:	70da      	strb	r2, [r3, #3]
 80296c4:	2200      	movs	r2, #0
 80296c6:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 80296c8:	68bb      	ldr	r3, [r7, #8]
 80296ca:	2200      	movs	r2, #0
 80296cc:	715a      	strb	r2, [r3, #5]
 80296ce:	2200      	movs	r2, #0
 80296d0:	719a      	strb	r2, [r3, #6]
 80296d2:	2200      	movs	r2, #0
 80296d4:	71da      	strb	r2, [r3, #7]
 80296d6:	2200      	movs	r2, #0
 80296d8:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 80296da:	68bb      	ldr	r3, [r7, #8]
 80296dc:	2201      	movs	r2, #1
 80296de:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 80296e0:	e002      	b.n	80296e8 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80296e2:	23ff      	movs	r3, #255	; 0xff
 80296e4:	75fb      	strb	r3, [r7, #23]
 80296e6:	e000      	b.n	80296ea <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 80296e8:	bf00      	nop
    }

    return rslt;
 80296ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80296ee:	4618      	mov	r0, r3
 80296f0:	371c      	adds	r7, #28
 80296f2:	46bd      	mov	sp, r7
 80296f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80296f8:	4770      	bx	lr
 80296fa:	bf00      	nop
 80296fc:	0805955c 	.word	0x0805955c

08029700 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 8029700:	b480      	push	{r7}
 8029702:	b085      	sub	sp, #20
 8029704:	af00      	add	r7, sp, #0
 8029706:	60f8      	str	r0, [r7, #12]
 8029708:	460b      	mov	r3, r1
 802970a:	607a      	str	r2, [r7, #4]
 802970c:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 802970e:	68fb      	ldr	r3, [r7, #12]
 8029710:	681a      	ldr	r2, [r3, #0]
 8029712:	7afb      	ldrb	r3, [r7, #11]
 8029714:	441a      	add	r2, r3
 8029716:	68fb      	ldr	r3, [r7, #12]
 8029718:	685b      	ldr	r3, [r3, #4]
 802971a:	429a      	cmp	r2, r3
 802971c:	d803      	bhi.n	8029726 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 802971e:	687b      	ldr	r3, [r7, #4]
 8029720:	2200      	movs	r2, #0
 8029722:	701a      	strb	r2, [r3, #0]
 8029724:	e002      	b.n	802972c <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 8029726:	687b      	ldr	r3, [r7, #4]
 8029728:	2201      	movs	r2, #1
 802972a:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 802972c:	2300      	movs	r3, #0
}
 802972e:	4618      	mov	r0, r3
 8029730:	3714      	adds	r7, #20
 8029732:	46bd      	mov	sp, r7
 8029734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029738:	4770      	bx	lr

0802973a <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 802973a:	b480      	push	{r7}
 802973c:	b087      	sub	sp, #28
 802973e:	af00      	add	r7, sp, #0
 8029740:	4603      	mov	r3, r0
 8029742:	60b9      	str	r1, [r7, #8]
 8029744:	607a      	str	r2, [r7, #4]
 8029746:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8029748:	2300      	movs	r3, #0
 802974a:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 802974c:	7bfb      	ldrb	r3, [r7, #15]
 802974e:	2b02      	cmp	r3, #2
 8029750:	d808      	bhi.n	8029764 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 8029752:	7bfb      	ldrb	r3, [r7, #15]
 8029754:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8029758:	00db      	lsls	r3, r3, #3
 802975a:	687a      	ldr	r2, [r7, #4]
 802975c:	441a      	add	r2, r3
 802975e:	68bb      	ldr	r3, [r7, #8]
 8029760:	601a      	str	r2, [r3, #0]
 8029762:	e001      	b.n	8029768 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 8029764:	23f9      	movs	r3, #249	; 0xf9
 8029766:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8029768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802976c:	4618      	mov	r0, r3
 802976e:	371c      	adds	r7, #28
 8029770:	46bd      	mov	sp, r7
 8029772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029776:	4770      	bx	lr

08029778 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 8029778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802977c:	b099      	sub	sp, #100	; 0x64
 802977e:	af00      	add	r7, sp, #0
 8029780:	4603      	mov	r3, r0
 8029782:	62b9      	str	r1, [r7, #40]	; 0x28
 8029784:	627a      	str	r2, [r7, #36]	; 0x24
 8029786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 802978a:	2300      	movs	r3, #0
 802978c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 8029790:	2300      	movs	r3, #0
 8029792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 8029796:	2300      	movs	r3, #0
 8029798:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 802979c:	2300      	movs	r3, #0
 802979e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 80297a2:	e16a      	b.n	8029a7a <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 80297a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80297a6:	681b      	ldr	r3, [r3, #0]
 80297a8:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 80297aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80297ac:	691a      	ldr	r2, [r3, #16]
 80297ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80297b0:	4413      	add	r3, r2
 80297b2:	781b      	ldrb	r3, [r3, #0]
 80297b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 80297b8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80297bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80297c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80297c2:	4618      	mov	r0, r3
 80297c4:	f7ff ffb9 	bl	802973a <get_time_stamp>
 80297c8:	4603      	mov	r3, r0
 80297ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 80297ce:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80297d2:	2b00      	cmp	r3, #0
 80297d4:	d002      	beq.n	80297dc <parse_fifo+0x64>
        {
            return rslt;
 80297d6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80297da:	e191      	b.n	8029b00 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 80297dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80297e0:	2b00      	cmp	r3, #0
 80297e2:	d025      	beq.n	8029830 <parse_fifo+0xb8>
 80297e4:	2b00      	cmp	r3, #0
 80297e6:	f2c0 80f6 	blt.w	80299d6 <parse_fifo+0x25e>
 80297ea:	2bff      	cmp	r3, #255	; 0xff
 80297ec:	f300 80f3 	bgt.w	80299d6 <parse_fifo+0x25e>
 80297f0:	2bf5      	cmp	r3, #245	; 0xf5
 80297f2:	f2c0 80f0 	blt.w	80299d6 <parse_fifo+0x25e>
 80297f6:	3bf5      	subs	r3, #245	; 0xf5
 80297f8:	2b0a      	cmp	r3, #10
 80297fa:	f200 80ec 	bhi.w	80299d6 <parse_fifo+0x25e>
 80297fe:	a201      	add	r2, pc, #4	; (adr r2, 8029804 <parse_fifo+0x8c>)
 8029800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029804:	0802983d 	.word	0x0802983d
 8029808:	080298a5 	.word	0x080298a5
 802980c:	08029923 	.word	0x08029923
 8029810:	080299d7 	.word	0x080299d7
 8029814:	080299d7 	.word	0x080299d7
 8029818:	080299d7 	.word	0x080299d7
 802981c:	0802983d 	.word	0x0802983d
 8029820:	080298a5 	.word	0x080298a5
 8029824:	08029923 	.word	0x08029923
 8029828:	080299d7 	.word	0x080299d7
 802982c:	08029831 	.word	0x08029831
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 8029830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029832:	681b      	ldr	r3, [r3, #0]
 8029834:	1c5a      	adds	r2, r3, #1
 8029836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029838:	601a      	str	r2, [r3, #0]
                break;
 802983a:	e11e      	b.n	8029a7a <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 802983c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8029840:	461a      	mov	r2, r3
 8029842:	2102      	movs	r1, #2
 8029844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8029846:	f7ff ff5b 	bl	8029700 <get_buffer_status>
 802984a:	4603      	mov	r3, r0
 802984c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8029850:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8029854:	2b00      	cmp	r3, #0
 8029856:	d002      	beq.n	802985e <parse_fifo+0xe6>
                {
                    return rslt;
 8029858:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802985c:	e150      	b.n	8029b00 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802985e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8029862:	2b00      	cmp	r3, #0
 8029864:	d000      	beq.n	8029868 <parse_fifo+0xf0>
                {
                    break;
 8029866:	e108      	b.n	8029a7a <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 8029868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802986a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029870:	691a      	ldr	r2, [r3, #16]
 8029872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029874:	3301      	adds	r3, #1
 8029876:	4413      	add	r3, r2
 8029878:	781b      	ldrb	r3, [r3, #0]
 802987a:	b2db      	uxtb	r3, r3
 802987c:	2200      	movs	r2, #0
 802987e:	469a      	mov	sl, r3
 8029880:	4693      	mov	fp, r2
 8029882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029884:	eb10 020a 	adds.w	r2, r0, sl
 8029888:	61ba      	str	r2, [r7, #24]
 802988a:	eb41 020b 	adc.w	r2, r1, fp
 802988e:	61fa      	str	r2, [r7, #28]
 8029890:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8029894:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 8029898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802989a:	681b      	ldr	r3, [r3, #0]
 802989c:	1c9a      	adds	r2, r3, #2
 802989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80298a0:	601a      	str	r2, [r3, #0]
                break;
 80298a2:	e0ea      	b.n	8029a7a <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 80298a4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80298a8:	461a      	mov	r2, r3
 80298aa:	2103      	movs	r1, #3
 80298ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80298ae:	f7ff ff27 	bl	8029700 <get_buffer_status>
 80298b2:	4603      	mov	r3, r0
 80298b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80298b8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80298bc:	2b00      	cmp	r3, #0
 80298be:	d002      	beq.n	80298c6 <parse_fifo+0x14e>
                {
                    return rslt;
 80298c0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80298c4:	e11c      	b.n	8029b00 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80298c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80298ca:	2b00      	cmp	r3, #0
 80298cc:	d000      	beq.n	80298d0 <parse_fifo+0x158>
                {
                    break;
 80298ce:	e0d4      	b.n	8029a7a <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 80298d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80298d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80298d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80298d8:	691a      	ldr	r2, [r3, #16]
 80298da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80298dc:	3301      	adds	r3, #1
 80298de:	4413      	add	r3, r2
 80298e0:	781b      	ldrb	r3, [r3, #0]
 80298e2:	b21c      	sxth	r4, r3
 80298e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80298e6:	691a      	ldr	r2, [r3, #16]
 80298e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80298ea:	3302      	adds	r3, #2
 80298ec:	4413      	add	r3, r2
 80298ee:	781b      	ldrb	r3, [r3, #0]
 80298f0:	021b      	lsls	r3, r3, #8
 80298f2:	b21b      	sxth	r3, r3
 80298f4:	4323      	orrs	r3, r4
 80298f6:	b21b      	sxth	r3, r3
 80298f8:	b29b      	uxth	r3, r3
 80298fa:	b29b      	uxth	r3, r3
 80298fc:	2200      	movs	r2, #0
 80298fe:	461d      	mov	r5, r3
 8029900:	4616      	mov	r6, r2
 8029902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029904:	1942      	adds	r2, r0, r5
 8029906:	613a      	str	r2, [r7, #16]
 8029908:	eb41 0206 	adc.w	r2, r1, r6
 802990c:	617a      	str	r2, [r7, #20]
 802990e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8029912:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 8029916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029918:	681b      	ldr	r3, [r3, #0]
 802991a:	1cda      	adds	r2, r3, #3
 802991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802991e:	601a      	str	r2, [r3, #0]
                break;
 8029920:	e0ab      	b.n	8029a7a <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 8029922:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8029926:	461a      	mov	r2, r3
 8029928:	2106      	movs	r1, #6
 802992a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802992c:	f7ff fee8 	bl	8029700 <get_buffer_status>
 8029930:	4603      	mov	r3, r0
 8029932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8029936:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802993a:	2b00      	cmp	r3, #0
 802993c:	d002      	beq.n	8029944 <parse_fifo+0x1cc>
                {
                    return rslt;
 802993e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8029942:	e0dd      	b.n	8029b00 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8029944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8029948:	2b00      	cmp	r3, #0
 802994a:	d000      	beq.n	802994e <parse_fifo+0x1d6>
                {
                    break;
 802994c:	e095      	b.n	8029a7a <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 802994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029950:	691a      	ldr	r2, [r3, #16]
 8029952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029954:	3301      	adds	r3, #1
 8029956:	4413      	add	r3, r2
 8029958:	781b      	ldrb	r3, [r3, #0]
 802995a:	4619      	mov	r1, r3
 802995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802995e:	691a      	ldr	r2, [r3, #16]
 8029960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029962:	3302      	adds	r3, #2
 8029964:	4413      	add	r3, r2
 8029966:	781b      	ldrb	r3, [r3, #0]
 8029968:	021b      	lsls	r3, r3, #8
 802996a:	4319      	orrs	r1, r3
 802996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802996e:	691a      	ldr	r2, [r3, #16]
 8029970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029972:	3303      	adds	r3, #3
 8029974:	4413      	add	r3, r2
 8029976:	781b      	ldrb	r3, [r3, #0]
 8029978:	041b      	lsls	r3, r3, #16
 802997a:	4319      	orrs	r1, r3
 802997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802997e:	691a      	ldr	r2, [r3, #16]
 8029980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029982:	3304      	adds	r3, #4
 8029984:	4413      	add	r3, r2
 8029986:	781b      	ldrb	r3, [r3, #0]
 8029988:	061b      	lsls	r3, r3, #24
 802998a:	430b      	orrs	r3, r1
 802998c:	2200      	movs	r2, #0
 802998e:	4698      	mov	r8, r3
 8029990:	4691      	mov	r9, r2
 8029992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029994:	691a      	ldr	r2, [r3, #16]
 8029996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029998:	3305      	adds	r3, #5
 802999a:	4413      	add	r3, r2
 802999c:	781b      	ldrb	r3, [r3, #0]
 802999e:	b2db      	uxtb	r3, r3
 80299a0:	2200      	movs	r2, #0
 80299a2:	60bb      	str	r3, [r7, #8]
 80299a4:	60fa      	str	r2, [r7, #12]
 80299a6:	f04f 0200 	mov.w	r2, #0
 80299aa:	f04f 0300 	mov.w	r3, #0
 80299ae:	68b9      	ldr	r1, [r7, #8]
 80299b0:	000b      	movs	r3, r1
 80299b2:	2200      	movs	r2, #0
 80299b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80299b6:	ea48 0002 	orr.w	r0, r8, r2
 80299ba:	6038      	str	r0, [r7, #0]
 80299bc:	ea49 0303 	orr.w	r3, r9, r3
 80299c0:	607b      	str	r3, [r7, #4]
 80299c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80299c6:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 80299ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80299cc:	681b      	ldr	r3, [r3, #0]
 80299ce:	1d9a      	adds	r2, r3, #6
 80299d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80299d2:	601a      	str	r2, [r3, #0]
                break;
 80299d4:	e051      	b.n	8029a7a <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 80299d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80299da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80299de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80299e0:	4618      	mov	r0, r3
 80299e2:	f7ff fe23 	bl	802962c <get_callback_info>
 80299e6:	4603      	mov	r3, r0
 80299e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 80299ec:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80299f0:	2b00      	cmp	r3, #0
 80299f2:	d002      	beq.n	80299fa <parse_fifo+0x282>
                {
                    return rslt;
 80299f4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80299f8:	e082      	b.n	8029b00 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 80299fa:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 80299fe:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8029a02:	461a      	mov	r2, r3
 8029a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8029a06:	f7ff fe7b 	bl	8029700 <get_buffer_status>
 8029a0a:	4603      	mov	r3, r0
 8029a0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8029a10:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8029a14:	2b00      	cmp	r3, #0
 8029a16:	d002      	beq.n	8029a1e <parse_fifo+0x2a6>
                {
                    return rslt;
 8029a18:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8029a1c:	e070      	b.n	8029b00 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8029a1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8029a22:	2b00      	cmp	r3, #0
 8029a24:	d000      	beq.n	8029a28 <parse_fifo+0x2b0>
                {
                    break;
 8029a26:	e028      	b.n	8029a7a <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 8029a28:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 8029a2c:	2b00      	cmp	r3, #0
 8029a2e:	d01c      	beq.n	8029a6a <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 8029a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029a32:	691a      	ldr	r2, [r3, #16]
 8029a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029a36:	3301      	adds	r3, #1
 8029a38:	4413      	add	r3, r2
 8029a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 8029a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8029a40:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 8029a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029a46:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 8029a48:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8029a4c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 8029a50:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8029a54:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 8029a58:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 8029a5c:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 8029a60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8029a64:	4611      	mov	r1, r2
 8029a66:	4618      	mov	r0, r3
 8029a68:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 8029a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029a6c:	681a      	ldr	r2, [r3, #0]
 8029a6e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8029a72:	441a      	add	r2, r3
 8029a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029a76:	601a      	str	r2, [r3, #0]
                break;
 8029a78:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8029a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029a7c:	681a      	ldr	r2, [r3, #0]
 8029a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029a80:	685b      	ldr	r3, [r3, #4]
 8029a82:	429a      	cmp	r2, r3
 8029a84:	d204      	bcs.n	8029a90 <parse_fifo+0x318>
 8029a86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8029a8a:	2b00      	cmp	r3, #0
 8029a8c:	f43f ae8a 	beq.w	80297a4 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 8029a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029a92:	685b      	ldr	r3, [r3, #4]
 8029a94:	2b00      	cmp	r3, #0
 8029a96:	d031      	beq.n	8029afc <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 8029a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029a9a:	685a      	ldr	r2, [r3, #4]
 8029a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029a9e:	681b      	ldr	r3, [r3, #0]
 8029aa0:	429a      	cmp	r2, r3
 8029aa2:	d202      	bcs.n	8029aaa <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 8029aa4:	f06f 0301 	mvn.w	r3, #1
 8029aa8:	e02a      	b.n	8029b00 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 8029aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029aac:	685a      	ldr	r2, [r3, #4]
 8029aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029ab0:	681b      	ldr	r3, [r3, #0]
 8029ab2:	1ad2      	subs	r2, r2, r3
 8029ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029ab6:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 8029ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029aba:	685b      	ldr	r3, [r3, #4]
 8029abc:	2b00      	cmp	r3, #0
 8029abe:	d01d      	beq.n	8029afc <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 8029ac0:	2300      	movs	r3, #0
 8029ac2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8029ac6:	e013      	b.n	8029af0 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 8029ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029aca:	691a      	ldr	r2, [r3, #16]
 8029acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029ace:	6819      	ldr	r1, [r3, #0]
 8029ad0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8029ad4:	440b      	add	r3, r1
 8029ad6:	441a      	add	r2, r3
 8029ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029ada:	6919      	ldr	r1, [r3, #16]
 8029adc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8029ae0:	440b      	add	r3, r1
 8029ae2:	7812      	ldrb	r2, [r2, #0]
 8029ae4:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 8029ae6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8029aea:	3301      	adds	r3, #1
 8029aec:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8029af0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8029af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029af6:	685b      	ldr	r3, [r3, #4]
 8029af8:	429a      	cmp	r2, r3
 8029afa:	d3e5      	bcc.n	8029ac8 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 8029afc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8029b00:	4618      	mov	r0, r3
 8029b02:	3764      	adds	r7, #100	; 0x64
 8029b04:	46bd      	mov	sp, r7
 8029b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029b0a:	bf00      	nop

08029b0c <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 8029b0c:	b590      	push	{r4, r7, lr}
 8029b0e:	b0cf      	sub	sp, #316	; 0x13c
 8029b10:	af00      	add	r7, sp, #0
 8029b12:	4604      	mov	r4, r0
 8029b14:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8029b18:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8029b1c:	6001      	str	r1, [r0, #0]
 8029b1e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8029b22:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8029b26:	600a      	str	r2, [r1, #0]
 8029b28:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8029b2c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8029b30:	6013      	str	r3, [r2, #0]
 8029b32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029b36:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8029b3a:	4622      	mov	r2, r4
 8029b3c:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 8029b3e:	2300      	movs	r3, #0
 8029b40:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 8029b44:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8029b48:	2b00      	cmp	r3, #0
 8029b4a:	f000 81af 	beq.w	8029eac <bhy2_hif_exec_cmd_generic+0x3a0>
 8029b4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029b52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029b56:	681b      	ldr	r3, [r3, #0]
 8029b58:	2b00      	cmp	r3, #0
 8029b5a:	d007      	beq.n	8029b6c <bhy2_hif_exec_cmd_generic+0x60>
 8029b5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8029b64:	681b      	ldr	r3, [r3, #0]
 8029b66:	2b00      	cmp	r3, #0
 8029b68:	f000 81a0 	beq.w	8029eac <bhy2_hif_exec_cmd_generic+0x3a0>
 8029b6c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8029b70:	2b00      	cmp	r3, #0
 8029b72:	d007      	beq.n	8029b84 <bhy2_hif_exec_cmd_generic+0x78>
 8029b74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029b78:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8029b7c:	681b      	ldr	r3, [r3, #0]
 8029b7e:	2b00      	cmp	r3, #0
 8029b80:	f000 8194 	beq.w	8029eac <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 8029b84:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8029b88:	699b      	ldr	r3, [r3, #24]
 8029b8a:	2b00      	cmp	r3, #0
 8029b8c:	f000 8188 	beq.w	8029ea0 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 8029b90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029b94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029b98:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8029b9c:	681b      	ldr	r3, [r3, #0]
 8029b9e:	4413      	add	r3, r2
 8029ba0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 8029ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8029ba8:	2b00      	cmp	r3, #0
 8029baa:	d007      	beq.n	8029bbc <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 8029bac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8029bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8029bb4:	4413      	add	r3, r2
 8029bb6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8029bba:	e003      	b.n	8029bc4 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 8029bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8029bc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 8029bc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8029bc8:	f003 0303 	and.w	r3, r3, #3
 8029bcc:	2b00      	cmp	r3, #0
 8029bce:	d006      	beq.n	8029bde <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 8029bd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8029bd4:	089b      	lsrs	r3, r3, #2
 8029bd6:	3301      	adds	r3, #1
 8029bd8:	009b      	lsls	r3, r3, #2
 8029bda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 8029bde:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029be2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8029be6:	881b      	ldrh	r3, [r3, #0]
 8029be8:	b2da      	uxtb	r2, r3
 8029bea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029bee:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8029bf2:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 8029bf4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029bf8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8029bfc:	881b      	ldrh	r3, [r3, #0]
 8029bfe:	0a1b      	lsrs	r3, r3, #8
 8029c00:	b29b      	uxth	r3, r3
 8029c02:	b2da      	uxtb	r2, r3
 8029c04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029c08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8029c0c:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 8029c0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029c12:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8029c16:	881b      	ldrh	r3, [r3, #0]
 8029c18:	2b02      	cmp	r3, #2
 8029c1a:	d113      	bne.n	8029c44 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 8029c1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8029c20:	089b      	lsrs	r3, r3, #2
 8029c22:	b2da      	uxtb	r2, r3
 8029c24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029c28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8029c2c:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 8029c2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8029c32:	089b      	lsrs	r3, r3, #2
 8029c34:	0a1b      	lsrs	r3, r3, #8
 8029c36:	b2da      	uxtb	r2, r3
 8029c38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029c3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8029c40:	70da      	strb	r2, [r3, #3]
 8029c42:	e010      	b.n	8029c66 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 8029c44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8029c48:	b2da      	uxtb	r2, r3
 8029c4a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029c4e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8029c52:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 8029c54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8029c58:	0a1b      	lsrs	r3, r3, #8
 8029c5a:	b2da      	uxtb	r2, r3
 8029c5c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029c60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8029c64:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 8029c66:	2304      	movs	r3, #4
 8029c68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 8029c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8029c70:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 8029c74:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029c78:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029c7c:	4413      	add	r3, r2
 8029c7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 8029c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8029c86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 8029c8a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8029c8e:	699b      	ldr	r3, [r3, #24]
 8029c90:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8029c94:	429a      	cmp	r2, r3
 8029c96:	f240 80f9 	bls.w	8029e8c <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 8029c9a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8029c9e:	699b      	ldr	r3, [r3, #24]
 8029ca0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8029ca4:	e0f2      	b.n	8029e8c <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 8029ca6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029caa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029cae:	4413      	add	r3, r2
 8029cb0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8029cb4:	429a      	cmp	r2, r3
 8029cb6:	d20b      	bcs.n	8029cd0 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 8029cb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8029cbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 8029cc0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8029cc4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029cc8:	1ad3      	subs	r3, r2, r3
 8029cca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8029cce:	e020      	b.n	8029d12 <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 8029cd0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029cd4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029cd8:	4413      	add	r3, r2
 8029cda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 8029cde:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029ce2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 8029ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8029cea:	f003 0303 	and.w	r3, r3, #3
 8029cee:	2b00      	cmp	r3, #0
 8029cf0:	d006      	beq.n	8029d00 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 8029cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8029cf6:	089b      	lsrs	r3, r3, #2
 8029cf8:	3301      	adds	r3, #1
 8029cfa:	009b      	lsls	r3, r3, #2
 8029cfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 8029d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8029d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029d08:	d903      	bls.n	8029d12 <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 8029d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8029d0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 8029d12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029d16:	2b00      	cmp	r3, #0
 8029d18:	d07e      	beq.n	8029e18 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 8029d1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029d1e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029d22:	681a      	ldr	r2, [r3, #0]
 8029d24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029d28:	4413      	add	r3, r2
 8029d2a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029d2e:	429a      	cmp	r2, r3
 8029d30:	d315      	bcc.n	8029d5e <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 8029d32:	f107 0214 	add.w	r2, r7, #20
 8029d36:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029d3a:	18d0      	adds	r0, r2, r3
 8029d3c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8029d40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029d44:	1ad3      	subs	r3, r2, r3
 8029d46:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8029d4a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8029d4e:	6812      	ldr	r2, [r2, #0]
 8029d50:	4413      	add	r3, r2
 8029d52:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8029d56:	4619      	mov	r1, r3
 8029d58:	f013 fc00 	bl	803d55c <memcpy>
 8029d5c:	e05c      	b.n	8029e18 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 8029d5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029d62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029d66:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029d6a:	681b      	ldr	r3, [r3, #0]
 8029d6c:	429a      	cmp	r2, r3
 8029d6e:	d93b      	bls.n	8029de8 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 8029d70:	f107 0214 	add.w	r2, r7, #20
 8029d74:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029d78:	18d0      	adds	r0, r2, r3
 8029d7a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8029d7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029d82:	1ad3      	subs	r3, r2, r3
 8029d84:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8029d88:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8029d8c:	6812      	ldr	r2, [r2, #0]
 8029d8e:	18d1      	adds	r1, r2, r3
 8029d90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029d94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029d98:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029d9c:	681b      	ldr	r3, [r3, #0]
 8029d9e:	1ad3      	subs	r3, r2, r3
 8029da0:	461a      	mov	r2, r3
 8029da2:	f013 fbdb 	bl	803d55c <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 8029da6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8029daa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029dae:	441a      	add	r2, r3
 8029db0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029db4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029db8:	681b      	ldr	r3, [r3, #0]
 8029dba:	1ad3      	subs	r3, r2, r3
 8029dbc:	f107 0214 	add.w	r2, r7, #20
 8029dc0:	18d0      	adds	r0, r2, r3
 8029dc2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029dc6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029dca:	681a      	ldr	r2, [r3, #0]
 8029dcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029dd0:	1ad2      	subs	r2, r2, r3
 8029dd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029dd6:	441a      	add	r2, r3
 8029dd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8029de0:	6819      	ldr	r1, [r3, #0]
 8029de2:	f013 fbbb 	bl	803d55c <memcpy>
 8029de6:	e017      	b.n	8029e18 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 8029de8:	f107 0214 	add.w	r2, r7, #20
 8029dec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8029df0:	18d0      	adds	r0, r2, r3
 8029df2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8029df6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8029dfa:	681a      	ldr	r2, [r3, #0]
 8029dfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029e00:	1ad3      	subs	r3, r2, r3
 8029e02:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8029e06:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8029e0a:	6812      	ldr	r2, [r2, #0]
 8029e0c:	4413      	add	r3, r2
 8029e0e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8029e12:	4619      	mov	r1, r3
 8029e14:	f013 fba2 	bl	803d55c <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8029e18:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8029e1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029e20:	4413      	add	r3, r2
 8029e22:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8029e26:	429a      	cmp	r2, r3
 8029e28:	d012      	beq.n	8029e50 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 8029e2a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8029e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029e32:	4413      	add	r3, r2
 8029e34:	f107 0214 	add.w	r2, r7, #20
 8029e38:	18d0      	adds	r0, r2, r3
 8029e3a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8029e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029e42:	4413      	add	r3, r2
 8029e44:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8029e48:	461a      	mov	r2, r3
 8029e4a:	2100      	movs	r1, #0
 8029e4c:	f013 fbae 	bl	803d5ac <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 8029e50:	f107 0114 	add.w	r1, r7, #20
 8029e54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8029e58:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8029e5c:	2000      	movs	r0, #0
 8029e5e:	f000 f9b4 	bl	802a1ca <bhy2_hif_set_regs>
 8029e62:	4603      	mov	r3, r0
 8029e64:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 8029e68:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8029e6c:	2b00      	cmp	r3, #0
 8029e6e:	d11b      	bne.n	8029ea8 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 8029e70:	2300      	movs	r3, #0
 8029e72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 8029e76:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8029e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8029e7e:	1ad3      	subs	r3, r2, r3
 8029e80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 8029e84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8029e88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8029e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8029e90:	2b00      	cmp	r3, #0
 8029e92:	d00f      	beq.n	8029eb4 <bhy2_hif_exec_cmd_generic+0x3a8>
 8029e94:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8029e98:	2b00      	cmp	r3, #0
 8029e9a:	f43f af04 	beq.w	8029ca6 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 8029e9e:	e009      	b.n	8029eb4 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 8029ea0:	23fe      	movs	r3, #254	; 0xfe
 8029ea2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 8029ea6:	e005      	b.n	8029eb4 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 8029ea8:	bf00      	nop
        if (hif->read_write_len != 0)
 8029eaa:	e003      	b.n	8029eb4 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8029eac:	23ff      	movs	r3, #255	; 0xff
 8029eae:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8029eb2:	e000      	b.n	8029eb6 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 8029eb4:	bf00      	nop
    }

    return rslt;
 8029eb6:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 8029eba:	4618      	mov	r0, r3
 8029ebc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8029ec0:	46bd      	mov	sp, r7
 8029ec2:	bd90      	pop	{r4, r7, pc}

08029ec4 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 8029ec4:	b580      	push	{r7, lr}
 8029ec6:	b084      	sub	sp, #16
 8029ec8:	af00      	add	r7, sp, #0
 8029eca:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8029ecc:	2300      	movs	r3, #0
 8029ece:	81fb      	strh	r3, [r7, #14]
 8029ed0:	e027      	b.n	8029f22 <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 8029ed2:	f107 030c 	add.w	r3, r7, #12
 8029ed6:	6879      	ldr	r1, [r7, #4]
 8029ed8:	4618      	mov	r0, r3
 8029eda:	f000 fab1 	bl	802a440 <bhy2_hif_get_interrupt_status>
 8029ede:	4603      	mov	r3, r0
 8029ee0:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 8029ee2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029ee6:	2b00      	cmp	r3, #0
 8029ee8:	d115      	bne.n	8029f16 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 8029eea:	7b3b      	ldrb	r3, [r7, #12]
 8029eec:	f003 0320 	and.w	r3, r3, #32
 8029ef0:	2b00      	cmp	r3, #0
 8029ef2:	d002      	beq.n	8029efa <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 8029ef4:	2300      	movs	r3, #0
 8029ef6:	737b      	strb	r3, [r7, #13]
                break;
 8029ef8:	e017      	b.n	8029f2a <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 8029efa:	6879      	ldr	r1, [r7, #4]
 8029efc:	f242 7010 	movw	r0, #10000	; 0x2710
 8029f00:	f000 f99b 	bl	802a23a <bhy2_hif_delay_us>
 8029f04:	4603      	mov	r3, r0
 8029f06:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8029f08:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029f0c:	2b00      	cmp	r3, #0
 8029f0e:	d005      	beq.n	8029f1c <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 8029f10:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029f14:	e00b      	b.n	8029f2e <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 8029f16:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029f1a:	e008      	b.n	8029f2e <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8029f1c:	89fb      	ldrh	r3, [r7, #14]
 8029f1e:	3301      	adds	r3, #1
 8029f20:	81fb      	strh	r3, [r7, #14]
 8029f22:	89fb      	ldrh	r3, [r7, #14]
 8029f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8029f28:	d3d3      	bcc.n	8029ed2 <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8029f2a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8029f2e:	4618      	mov	r0, r3
 8029f30:	3710      	adds	r7, #16
 8029f32:	46bd      	mov	sp, r7
 8029f34:	bd80      	pop	{r7, pc}

08029f36 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 8029f36:	b580      	push	{r7, lr}
 8029f38:	b084      	sub	sp, #16
 8029f3a:	af00      	add	r7, sp, #0
 8029f3c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8029f3e:	2300      	movs	r3, #0
 8029f40:	81fb      	strh	r3, [r7, #14]
 8029f42:	e02f      	b.n	8029fa4 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 8029f44:	6879      	ldr	r1, [r7, #4]
 8029f46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8029f4a:	f000 f976 	bl	802a23a <bhy2_hif_delay_us>
 8029f4e:	4603      	mov	r3, r0
 8029f50:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8029f52:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029f56:	2b00      	cmp	r3, #0
 8029f58:	da02      	bge.n	8029f60 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 8029f5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029f5e:	e02d      	b.n	8029fbc <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 8029f60:	f107 010c 	add.w	r1, r7, #12
 8029f64:	687b      	ldr	r3, [r7, #4]
 8029f66:	2201      	movs	r2, #1
 8029f68:	2025      	movs	r0, #37	; 0x25
 8029f6a:	f000 f8f6 	bl	802a15a <bhy2_hif_get_regs>
 8029f6e:	4603      	mov	r3, r0
 8029f70:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 8029f72:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029f76:	2b00      	cmp	r3, #0
 8029f78:	da02      	bge.n	8029f80 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 8029f7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8029f7e:	e01d      	b.n	8029fbc <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8029f80:	7b3b      	ldrb	r3, [r7, #12]
 8029f82:	f003 0310 	and.w	r3, r3, #16
 8029f86:	2b00      	cmp	r3, #0
 8029f88:	d009      	beq.n	8029f9e <bhy2_hif_check_boot_status_ram+0x68>
 8029f8a:	7b3b      	ldrb	r3, [r7, #12]
 8029f8c:	f003 0320 	and.w	r3, r3, #32
 8029f90:	2b00      	cmp	r3, #0
 8029f92:	d004      	beq.n	8029f9e <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 8029f94:	7b3b      	ldrb	r3, [r7, #12]
 8029f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8029f9a:	2b00      	cmp	r3, #0
 8029f9c:	d006      	beq.n	8029fac <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8029f9e:	89fb      	ldrh	r3, [r7, #14]
 8029fa0:	3301      	adds	r3, #1
 8029fa2:	81fb      	strh	r3, [r7, #14]
 8029fa4:	89fb      	ldrh	r3, [r7, #14]
 8029fa6:	2b63      	cmp	r3, #99	; 0x63
 8029fa8:	d9cc      	bls.n	8029f44 <bhy2_hif_check_boot_status_ram+0xe>
 8029faa:	e000      	b.n	8029fae <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 8029fac:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 8029fae:	89fb      	ldrh	r3, [r7, #14]
 8029fb0:	2b64      	cmp	r3, #100	; 0x64
 8029fb2:	d102      	bne.n	8029fba <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 8029fb4:	f06f 0304 	mvn.w	r3, #4
 8029fb8:	e000      	b.n	8029fbc <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 8029fba:	2300      	movs	r3, #0
}
 8029fbc:	4618      	mov	r0, r3
 8029fbe:	3710      	adds	r7, #16
 8029fc0:	46bd      	mov	sp, r7
 8029fc2:	bd80      	pop	{r7, pc}

08029fc4 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8029fc4:	b580      	push	{r7, lr}
 8029fc6:	b08a      	sub	sp, #40	; 0x28
 8029fc8:	af00      	add	r7, sp, #0
 8029fca:	60b9      	str	r1, [r7, #8]
 8029fcc:	607a      	str	r2, [r7, #4]
 8029fce:	603b      	str	r3, [r7, #0]
 8029fd0:	4603      	mov	r3, r0
 8029fd2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8029fd4:	2300      	movs	r3, #0
 8029fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 8029fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029fdc:	2b00      	cmp	r3, #0
 8029fde:	d072      	beq.n	802a0c6 <bhy2_hif_get_fifo+0x102>
 8029fe0:	68bb      	ldr	r3, [r7, #8]
 8029fe2:	2b00      	cmp	r3, #0
 8029fe4:	d06f      	beq.n	802a0c6 <bhy2_hif_get_fifo+0x102>
 8029fe6:	683b      	ldr	r3, [r7, #0]
 8029fe8:	2b00      	cmp	r3, #0
 8029fea:	d06c      	beq.n	802a0c6 <bhy2_hif_get_fifo+0x102>
 8029fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029fee:	2b00      	cmp	r3, #0
 8029ff0:	d069      	beq.n	802a0c6 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 8029ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029ff4:	699b      	ldr	r3, [r3, #24]
 8029ff6:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8029ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029ffa:	681b      	ldr	r3, [r3, #0]
 8029ffc:	2b00      	cmp	r3, #0
 8029ffe:	d114      	bne.n	802a02a <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 802a000:	f107 0114 	add.w	r1, r7, #20
 802a004:	7bf8      	ldrb	r0, [r7, #15]
 802a006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a008:	2202      	movs	r2, #2
 802a00a:	f000 f8a6 	bl	802a15a <bhy2_hif_get_regs>
 802a00e:	4603      	mov	r3, r0
 802a010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 802a014:	7d3b      	ldrb	r3, [r7, #20]
 802a016:	b21a      	sxth	r2, r3
 802a018:	7d7b      	ldrb	r3, [r7, #21]
 802a01a:	021b      	lsls	r3, r3, #8
 802a01c:	b21b      	sxth	r3, r3
 802a01e:	4313      	orrs	r3, r2
 802a020:	b21b      	sxth	r3, r3
 802a022:	b29b      	uxth	r3, r3
 802a024:	461a      	mov	r2, r3
 802a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a028:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 802a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a02c:	681b      	ldr	r3, [r3, #0]
 802a02e:	2b00      	cmp	r3, #0
 802a030:	d04d      	beq.n	802a0ce <bhy2_hif_get_fifo+0x10a>
 802a032:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802a036:	2b00      	cmp	r3, #0
 802a038:	d149      	bne.n	802a0ce <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 802a03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a03c:	681b      	ldr	r3, [r3, #0]
 802a03e:	687a      	ldr	r2, [r7, #4]
 802a040:	429a      	cmp	r2, r3
 802a042:	d203      	bcs.n	802a04c <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 802a044:	683b      	ldr	r3, [r7, #0]
 802a046:	687a      	ldr	r2, [r7, #4]
 802a048:	601a      	str	r2, [r3, #0]
 802a04a:	e003      	b.n	802a054 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 802a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a04e:	681a      	ldr	r2, [r3, #0]
 802a050:	683b      	ldr	r3, [r7, #0]
 802a052:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 802a054:	683b      	ldr	r3, [r7, #0]
 802a056:	681b      	ldr	r3, [r3, #0]
 802a058:	623b      	str	r3, [r7, #32]
            offset = 0;
 802a05a:	2300      	movs	r3, #0
 802a05c:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 802a05e:	e016      	b.n	802a08e <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 802a060:	68ba      	ldr	r2, [r7, #8]
 802a062:	69fb      	ldr	r3, [r7, #28]
 802a064:	18d1      	adds	r1, r2, r3
 802a066:	7bf8      	ldrb	r0, [r7, #15]
 802a068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a06a:	69ba      	ldr	r2, [r7, #24]
 802a06c:	f000 f875 	bl	802a15a <bhy2_hif_get_regs>
 802a070:	4603      	mov	r3, r0
 802a072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 802a076:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802a07a:	2b00      	cmp	r3, #0
 802a07c:	d10c      	bne.n	802a098 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 802a07e:	6a3a      	ldr	r2, [r7, #32]
 802a080:	69bb      	ldr	r3, [r7, #24]
 802a082:	1ad3      	subs	r3, r2, r3
 802a084:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 802a086:	69fa      	ldr	r2, [r7, #28]
 802a088:	69bb      	ldr	r3, [r7, #24]
 802a08a:	4413      	add	r3, r2
 802a08c:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 802a08e:	6a3a      	ldr	r2, [r7, #32]
 802a090:	69bb      	ldr	r3, [r7, #24]
 802a092:	429a      	cmp	r2, r3
 802a094:	d8e4      	bhi.n	802a060 <bhy2_hif_get_fifo+0x9c>
 802a096:	e000      	b.n	802a09a <bhy2_hif_get_fifo+0xd6>
                    break;
 802a098:	bf00      	nop
            }

            if (read_len != 0)
 802a09a:	6a3b      	ldr	r3, [r7, #32]
 802a09c:	2b00      	cmp	r3, #0
 802a09e:	d00a      	beq.n	802a0b6 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 802a0a0:	68ba      	ldr	r2, [r7, #8]
 802a0a2:	69fb      	ldr	r3, [r7, #28]
 802a0a4:	18d1      	adds	r1, r2, r3
 802a0a6:	7bf8      	ldrb	r0, [r7, #15]
 802a0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a0aa:	6a3a      	ldr	r2, [r7, #32]
 802a0ac:	f000 f855 	bl	802a15a <bhy2_hif_get_regs>
 802a0b0:	4603      	mov	r3, r0
 802a0b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 802a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a0b8:	681a      	ldr	r2, [r3, #0]
 802a0ba:	683b      	ldr	r3, [r7, #0]
 802a0bc:	681b      	ldr	r3, [r3, #0]
 802a0be:	1ad2      	subs	r2, r2, r3
 802a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a0c2:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 802a0c4:	e003      	b.n	802a0ce <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a0c6:	23ff      	movs	r3, #255	; 0xff
 802a0c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802a0cc:	e000      	b.n	802a0d0 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 802a0ce:	bf00      	nop
    }

    return rslt;
 802a0d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 802a0d4:	4618      	mov	r0, r3
 802a0d6:	3728      	adds	r7, #40	; 0x28
 802a0d8:	46bd      	mov	sp, r7
 802a0da:	bd80      	pop	{r7, pc}

0802a0dc <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 802a0dc:	b480      	push	{r7}
 802a0de:	b087      	sub	sp, #28
 802a0e0:	af00      	add	r7, sp, #0
 802a0e2:	60b9      	str	r1, [r7, #8]
 802a0e4:	607a      	str	r2, [r7, #4]
 802a0e6:	603b      	str	r3, [r7, #0]
 802a0e8:	4603      	mov	r3, r0
 802a0ea:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802a0ec:	2300      	movs	r3, #0
 802a0ee:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 802a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a0f2:	2b00      	cmp	r3, #0
 802a0f4:	d027      	beq.n	802a146 <bhy2_hif_init+0x6a>
 802a0f6:	68bb      	ldr	r3, [r7, #8]
 802a0f8:	2b00      	cmp	r3, #0
 802a0fa:	d024      	beq.n	802a146 <bhy2_hif_init+0x6a>
 802a0fc:	687b      	ldr	r3, [r7, #4]
 802a0fe:	2b00      	cmp	r3, #0
 802a100:	d021      	beq.n	802a146 <bhy2_hif_init+0x6a>
 802a102:	683b      	ldr	r3, [r7, #0]
 802a104:	2b00      	cmp	r3, #0
 802a106:	d01e      	beq.n	802a146 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 802a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a10a:	68ba      	ldr	r2, [r7, #8]
 802a10c:	601a      	str	r2, [r3, #0]
        hif->write = write;
 802a10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a110:	687a      	ldr	r2, [r7, #4]
 802a112:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 802a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a116:	683a      	ldr	r2, [r7, #0]
 802a118:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 802a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a11e:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 802a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a122:	7bfa      	ldrb	r2, [r7, #15]
 802a124:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 802a126:	6a3b      	ldr	r3, [r7, #32]
 802a128:	f003 0303 	and.w	r3, r3, #3
 802a12c:	2b00      	cmp	r3, #0
 802a12e:	d006      	beq.n	802a13e <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 802a130:	6a3b      	ldr	r3, [r7, #32]
 802a132:	089b      	lsrs	r3, r3, #2
 802a134:	3301      	adds	r3, #1
 802a136:	009a      	lsls	r2, r3, #2
 802a138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a13a:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 802a13c:	e005      	b.n	802a14a <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 802a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a140:	6a3a      	ldr	r2, [r7, #32]
 802a142:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 802a144:	e001      	b.n	802a14a <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a146:	23ff      	movs	r3, #255	; 0xff
 802a148:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802a14a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802a14e:	4618      	mov	r0, r3
 802a150:	371c      	adds	r7, #28
 802a152:	46bd      	mov	sp, r7
 802a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a158:	4770      	bx	lr

0802a15a <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 802a15a:	b590      	push	{r4, r7, lr}
 802a15c:	b087      	sub	sp, #28
 802a15e:	af00      	add	r7, sp, #0
 802a160:	60b9      	str	r1, [r7, #8]
 802a162:	607a      	str	r2, [r7, #4]
 802a164:	603b      	str	r3, [r7, #0]
 802a166:	4603      	mov	r3, r0
 802a168:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802a16a:	2300      	movs	r3, #0
 802a16c:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 802a16e:	683b      	ldr	r3, [r7, #0]
 802a170:	2b00      	cmp	r3, #0
 802a172:	d022      	beq.n	802a1ba <bhy2_hif_get_regs+0x60>
 802a174:	683b      	ldr	r3, [r7, #0]
 802a176:	681b      	ldr	r3, [r3, #0]
 802a178:	2b00      	cmp	r3, #0
 802a17a:	d01e      	beq.n	802a1ba <bhy2_hif_get_regs+0x60>
 802a17c:	68bb      	ldr	r3, [r7, #8]
 802a17e:	2b00      	cmp	r3, #0
 802a180:	d01b      	beq.n	802a1ba <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 802a182:	683b      	ldr	r3, [r7, #0]
 802a184:	7b1b      	ldrb	r3, [r3, #12]
 802a186:	2b01      	cmp	r3, #1
 802a188:	d103      	bne.n	802a192 <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 802a18a:	7bfb      	ldrb	r3, [r7, #15]
 802a18c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802a190:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 802a192:	683b      	ldr	r3, [r7, #0]
 802a194:	681c      	ldr	r4, [r3, #0]
 802a196:	683b      	ldr	r3, [r7, #0]
 802a198:	691b      	ldr	r3, [r3, #16]
 802a19a:	7bf8      	ldrb	r0, [r7, #15]
 802a19c:	687a      	ldr	r2, [r7, #4]
 802a19e:	68b9      	ldr	r1, [r7, #8]
 802a1a0:	47a0      	blx	r4
 802a1a2:	4603      	mov	r3, r0
 802a1a4:	461a      	mov	r2, r3
 802a1a6:	683b      	ldr	r3, [r7, #0]
 802a1a8:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802a1aa:	683b      	ldr	r3, [r7, #0]
 802a1ac:	f993 3014 	ldrsb.w	r3, [r3, #20]
 802a1b0:	2b00      	cmp	r3, #0
 802a1b2:	d004      	beq.n	802a1be <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 802a1b4:	23fd      	movs	r3, #253	; 0xfd
 802a1b6:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802a1b8:	e001      	b.n	802a1be <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a1ba:	23ff      	movs	r3, #255	; 0xff
 802a1bc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802a1be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802a1c2:	4618      	mov	r0, r3
 802a1c4:	371c      	adds	r7, #28
 802a1c6:	46bd      	mov	sp, r7
 802a1c8:	bd90      	pop	{r4, r7, pc}

0802a1ca <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 802a1ca:	b590      	push	{r4, r7, lr}
 802a1cc:	b087      	sub	sp, #28
 802a1ce:	af00      	add	r7, sp, #0
 802a1d0:	60b9      	str	r1, [r7, #8]
 802a1d2:	607a      	str	r2, [r7, #4]
 802a1d4:	603b      	str	r3, [r7, #0]
 802a1d6:	4603      	mov	r3, r0
 802a1d8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802a1da:	2300      	movs	r3, #0
 802a1dc:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 802a1de:	683b      	ldr	r3, [r7, #0]
 802a1e0:	2b00      	cmp	r3, #0
 802a1e2:	d022      	beq.n	802a22a <bhy2_hif_set_regs+0x60>
 802a1e4:	683b      	ldr	r3, [r7, #0]
 802a1e6:	681b      	ldr	r3, [r3, #0]
 802a1e8:	2b00      	cmp	r3, #0
 802a1ea:	d01e      	beq.n	802a22a <bhy2_hif_set_regs+0x60>
 802a1ec:	68bb      	ldr	r3, [r7, #8]
 802a1ee:	2b00      	cmp	r3, #0
 802a1f0:	d01b      	beq.n	802a22a <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 802a1f2:	683b      	ldr	r3, [r7, #0]
 802a1f4:	7b1b      	ldrb	r3, [r3, #12]
 802a1f6:	2b01      	cmp	r3, #1
 802a1f8:	d103      	bne.n	802a202 <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 802a1fa:	7bfb      	ldrb	r3, [r7, #15]
 802a1fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a200:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 802a202:	683b      	ldr	r3, [r7, #0]
 802a204:	685c      	ldr	r4, [r3, #4]
 802a206:	683b      	ldr	r3, [r7, #0]
 802a208:	691b      	ldr	r3, [r3, #16]
 802a20a:	7bf8      	ldrb	r0, [r7, #15]
 802a20c:	687a      	ldr	r2, [r7, #4]
 802a20e:	68b9      	ldr	r1, [r7, #8]
 802a210:	47a0      	blx	r4
 802a212:	4603      	mov	r3, r0
 802a214:	461a      	mov	r2, r3
 802a216:	683b      	ldr	r3, [r7, #0]
 802a218:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802a21a:	683b      	ldr	r3, [r7, #0]
 802a21c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 802a220:	2b00      	cmp	r3, #0
 802a222:	d004      	beq.n	802a22e <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 802a224:	23fd      	movs	r3, #253	; 0xfd
 802a226:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802a228:	e001      	b.n	802a22e <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a22a:	23ff      	movs	r3, #255	; 0xff
 802a22c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802a22e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802a232:	4618      	mov	r0, r3
 802a234:	371c      	adds	r7, #28
 802a236:	46bd      	mov	sp, r7
 802a238:	bd90      	pop	{r4, r7, pc}

0802a23a <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 802a23a:	b580      	push	{r7, lr}
 802a23c:	b084      	sub	sp, #16
 802a23e:	af00      	add	r7, sp, #0
 802a240:	6078      	str	r0, [r7, #4]
 802a242:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802a244:	2300      	movs	r3, #0
 802a246:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 802a248:	683b      	ldr	r3, [r7, #0]
 802a24a:	2b00      	cmp	r3, #0
 802a24c:	d00b      	beq.n	802a266 <bhy2_hif_delay_us+0x2c>
 802a24e:	683b      	ldr	r3, [r7, #0]
 802a250:	689b      	ldr	r3, [r3, #8]
 802a252:	2b00      	cmp	r3, #0
 802a254:	d007      	beq.n	802a266 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 802a256:	683b      	ldr	r3, [r7, #0]
 802a258:	689b      	ldr	r3, [r3, #8]
 802a25a:	683a      	ldr	r2, [r7, #0]
 802a25c:	6912      	ldr	r2, [r2, #16]
 802a25e:	4611      	mov	r1, r2
 802a260:	6878      	ldr	r0, [r7, #4]
 802a262:	4798      	blx	r3
 802a264:	e001      	b.n	802a26a <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a266:	23ff      	movs	r3, #255	; 0xff
 802a268:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802a26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802a26e:	4618      	mov	r0, r3
 802a270:	3710      	adds	r7, #16
 802a272:	46bd      	mov	sp, r7
 802a274:	bd80      	pop	{r7, pc}

0802a276 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 802a276:	b580      	push	{r7, lr}
 802a278:	b088      	sub	sp, #32
 802a27a:	af04      	add	r7, sp, #16
 802a27c:	60b9      	str	r1, [r7, #8]
 802a27e:	607a      	str	r2, [r7, #4]
 802a280:	603b      	str	r3, [r7, #0]
 802a282:	4603      	mov	r3, r0
 802a284:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 802a286:	89f8      	ldrh	r0, [r7, #14]
 802a288:	683b      	ldr	r3, [r7, #0]
 802a28a:	9302      	str	r3, [sp, #8]
 802a28c:	2300      	movs	r3, #0
 802a28e:	9301      	str	r3, [sp, #4]
 802a290:	2300      	movs	r3, #0
 802a292:	9300      	str	r3, [sp, #0]
 802a294:	2300      	movs	r3, #0
 802a296:	687a      	ldr	r2, [r7, #4]
 802a298:	68b9      	ldr	r1, [r7, #8]
 802a29a:	f7ff fc37 	bl	8029b0c <bhy2_hif_exec_cmd_generic>
 802a29e:	4603      	mov	r3, r0
}
 802a2a0:	4618      	mov	r0, r3
 802a2a2:	3710      	adds	r7, #16
 802a2a4:	46bd      	mov	sp, r7
 802a2a6:	bd80      	pop	{r7, pc}

0802a2a8 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 802a2a8:	b580      	push	{r7, lr}
 802a2aa:	b088      	sub	sp, #32
 802a2ac:	af02      	add	r7, sp, #8
 802a2ae:	60b9      	str	r1, [r7, #8]
 802a2b0:	607a      	str	r2, [r7, #4]
 802a2b2:	603b      	str	r3, [r7, #0]
 802a2b4:	4603      	mov	r3, r0
 802a2b6:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 802a2b8:	2300      	movs	r3, #0
 802a2ba:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 802a2bc:	2300      	movs	r3, #0
 802a2be:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 802a2c0:	6a3b      	ldr	r3, [r7, #32]
 802a2c2:	2b00      	cmp	r3, #0
 802a2c4:	d06e      	beq.n	802a3a4 <bhy2_hif_get_parameter+0xfc>
 802a2c6:	68bb      	ldr	r3, [r7, #8]
 802a2c8:	2b00      	cmp	r3, #0
 802a2ca:	d06b      	beq.n	802a3a4 <bhy2_hif_get_parameter+0xfc>
 802a2cc:	683b      	ldr	r3, [r7, #0]
 802a2ce:	2b00      	cmp	r3, #0
 802a2d0:	d068      	beq.n	802a3a4 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 802a2d2:	683b      	ldr	r3, [r7, #0]
 802a2d4:	2200      	movs	r2, #0
 802a2d6:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802a2d8:	f107 0113 	add.w	r1, r7, #19
 802a2dc:	6a3b      	ldr	r3, [r7, #32]
 802a2de:	2201      	movs	r2, #1
 802a2e0:	2006      	movs	r0, #6
 802a2e2:	f7ff ff3a 	bl	802a15a <bhy2_hif_get_regs>
 802a2e6:	4603      	mov	r3, r0
 802a2e8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 802a2ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a2ee:	2b00      	cmp	r3, #0
 802a2f0:	d15b      	bne.n	802a3aa <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 802a2f2:	7cfb      	ldrb	r3, [r7, #19]
 802a2f4:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 802a2f6:	7cfb      	ldrb	r3, [r7, #19]
 802a2f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a2fc:	b2db      	uxtb	r3, r3
 802a2fe:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 802a300:	7cfb      	ldrb	r3, [r7, #19]
 802a302:	7dba      	ldrb	r2, [r7, #22]
 802a304:	429a      	cmp	r2, r3
 802a306:	d008      	beq.n	802a31a <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802a308:	f107 0113 	add.w	r1, r7, #19
 802a30c:	6a3b      	ldr	r3, [r7, #32]
 802a30e:	2201      	movs	r2, #1
 802a310:	2006      	movs	r0, #6
 802a312:	f7ff ff5a 	bl	802a1ca <bhy2_hif_set_regs>
 802a316:	4603      	mov	r3, r0
 802a318:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 802a31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a31e:	2b00      	cmp	r3, #0
 802a320:	d143      	bne.n	802a3aa <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 802a322:	89fb      	ldrh	r3, [r7, #14]
 802a324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802a328:	b298      	uxth	r0, r3
 802a32a:	6a3b      	ldr	r3, [r7, #32]
 802a32c:	2200      	movs	r2, #0
 802a32e:	2100      	movs	r1, #0
 802a330:	f7ff ffa1 	bl	802a276 <bhy2_hif_exec_cmd>
 802a334:	4603      	mov	r3, r0
 802a336:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 802a338:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a33c:	2b00      	cmp	r3, #0
 802a33e:	d134      	bne.n	802a3aa <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 802a340:	6a38      	ldr	r0, [r7, #32]
 802a342:	f7ff fdbf 	bl	8029ec4 <bhy2_wait_status_ready>
 802a346:	4603      	mov	r3, r0
 802a348:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 802a34a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a34e:	2b00      	cmp	r3, #0
 802a350:	d12b      	bne.n	802a3aa <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 802a352:	f107 0014 	add.w	r0, r7, #20
 802a356:	6a3b      	ldr	r3, [r7, #32]
 802a358:	9300      	str	r3, [sp, #0]
 802a35a:	683b      	ldr	r3, [r7, #0]
 802a35c:	687a      	ldr	r2, [r7, #4]
 802a35e:	68b9      	ldr	r1, [r7, #8]
 802a360:	f000 f94b 	bl	802a5fa <bhy2_hif_get_status_fifo>
 802a364:	4603      	mov	r3, r0
 802a366:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 802a368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a36c:	2b00      	cmp	r3, #0
 802a36e:	d11c      	bne.n	802a3aa <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 802a370:	7cfb      	ldrb	r3, [r7, #19]
 802a372:	7dba      	ldrb	r2, [r7, #22]
 802a374:	429a      	cmp	r2, r3
 802a376:	d00a      	beq.n	802a38e <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 802a378:	7dbb      	ldrb	r3, [r7, #22]
 802a37a:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802a37c:	f107 0113 	add.w	r1, r7, #19
 802a380:	6a3b      	ldr	r3, [r7, #32]
 802a382:	2201      	movs	r2, #1
 802a384:	2006      	movs	r0, #6
 802a386:	f7ff ff20 	bl	802a1ca <bhy2_hif_set_regs>
 802a38a:	4603      	mov	r3, r0
 802a38c:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 802a38e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a392:	2b00      	cmp	r3, #0
 802a394:	d109      	bne.n	802a3aa <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 802a396:	8abb      	ldrh	r3, [r7, #20]
 802a398:	89fa      	ldrh	r2, [r7, #14]
 802a39a:	429a      	cmp	r2, r3
 802a39c:	d005      	beq.n	802a3aa <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 802a39e:	23fb      	movs	r3, #251	; 0xfb
 802a3a0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 802a3a2:	e002      	b.n	802a3aa <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a3a4:	23ff      	movs	r3, #255	; 0xff
 802a3a6:	75fb      	strb	r3, [r7, #23]
 802a3a8:	e000      	b.n	802a3ac <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 802a3aa:	bf00      	nop
    }

    return rslt;
 802a3ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802a3b0:	4618      	mov	r0, r3
 802a3b2:	3718      	adds	r7, #24
 802a3b4:	46bd      	mov	sp, r7
 802a3b6:	bd80      	pop	{r7, pc}

0802a3b8 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 802a3b8:	b580      	push	{r7, lr}
 802a3ba:	b082      	sub	sp, #8
 802a3bc:	af00      	add	r7, sp, #0
 802a3be:	6078      	str	r0, [r7, #4]
 802a3c0:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 802a3c2:	683b      	ldr	r3, [r7, #0]
 802a3c4:	2201      	movs	r2, #1
 802a3c6:	6879      	ldr	r1, [r7, #4]
 802a3c8:	201c      	movs	r0, #28
 802a3ca:	f7ff fec6 	bl	802a15a <bhy2_hif_get_regs>
 802a3ce:	4603      	mov	r3, r0
}
 802a3d0:	4618      	mov	r0, r3
 802a3d2:	3708      	adds	r7, #8
 802a3d4:	46bd      	mov	sp, r7
 802a3d6:	bd80      	pop	{r7, pc}

0802a3d8 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 802a3d8:	b580      	push	{r7, lr}
 802a3da:	b084      	sub	sp, #16
 802a3dc:	af00      	add	r7, sp, #0
 802a3de:	6078      	str	r0, [r7, #4]
 802a3e0:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 802a3e2:	687b      	ldr	r3, [r7, #4]
 802a3e4:	2b00      	cmp	r3, #0
 802a3e6:	d013      	beq.n	802a410 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 802a3e8:	f107 010c 	add.w	r1, r7, #12
 802a3ec:	683b      	ldr	r3, [r7, #0]
 802a3ee:	2202      	movs	r2, #2
 802a3f0:	2020      	movs	r0, #32
 802a3f2:	f7ff feb2 	bl	802a15a <bhy2_hif_get_regs>
 802a3f6:	4603      	mov	r3, r0
 802a3f8:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 802a3fa:	7b3b      	ldrb	r3, [r7, #12]
 802a3fc:	b21a      	sxth	r2, r3
 802a3fe:	7b7b      	ldrb	r3, [r7, #13]
 802a400:	021b      	lsls	r3, r3, #8
 802a402:	b21b      	sxth	r3, r3
 802a404:	4313      	orrs	r3, r2
 802a406:	b21b      	sxth	r3, r3
 802a408:	b29a      	uxth	r2, r3
 802a40a:	687b      	ldr	r3, [r7, #4]
 802a40c:	801a      	strh	r2, [r3, #0]
 802a40e:	e001      	b.n	802a414 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a410:	23ff      	movs	r3, #255	; 0xff
 802a412:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802a414:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802a418:	4618      	mov	r0, r3
 802a41a:	3710      	adds	r7, #16
 802a41c:	46bd      	mov	sp, r7
 802a41e:	bd80      	pop	{r7, pc}

0802a420 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 802a420:	b580      	push	{r7, lr}
 802a422:	b082      	sub	sp, #8
 802a424:	af00      	add	r7, sp, #0
 802a426:	6078      	str	r0, [r7, #4]
 802a428:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 802a42a:	683b      	ldr	r3, [r7, #0]
 802a42c:	2201      	movs	r2, #1
 802a42e:	6879      	ldr	r1, [r7, #4]
 802a430:	2025      	movs	r0, #37	; 0x25
 802a432:	f7ff fe92 	bl	802a15a <bhy2_hif_get_regs>
 802a436:	4603      	mov	r3, r0
}
 802a438:	4618      	mov	r0, r3
 802a43a:	3708      	adds	r7, #8
 802a43c:	46bd      	mov	sp, r7
 802a43e:	bd80      	pop	{r7, pc}

0802a440 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 802a440:	b580      	push	{r7, lr}
 802a442:	b082      	sub	sp, #8
 802a444:	af00      	add	r7, sp, #0
 802a446:	6078      	str	r0, [r7, #4]
 802a448:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 802a44a:	683b      	ldr	r3, [r7, #0]
 802a44c:	2201      	movs	r2, #1
 802a44e:	6879      	ldr	r1, [r7, #4]
 802a450:	202d      	movs	r0, #45	; 0x2d
 802a452:	f7ff fe82 	bl	802a15a <bhy2_hif_get_regs>
 802a456:	4603      	mov	r3, r0
}
 802a458:	4618      	mov	r0, r3
 802a45a:	3708      	adds	r7, #8
 802a45c:	46bd      	mov	sp, r7
 802a45e:	bd80      	pop	{r7, pc}

0802a460 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 802a460:	b580      	push	{r7, lr}
 802a462:	b084      	sub	sp, #16
 802a464:	af00      	add	r7, sp, #0
 802a466:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 802a468:	2301      	movs	r3, #1
 802a46a:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 802a46c:	2300      	movs	r3, #0
 802a46e:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 802a470:	230f      	movs	r3, #15
 802a472:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 802a474:	f107 010b 	add.w	r1, r7, #11
 802a478:	687b      	ldr	r3, [r7, #4]
 802a47a:	2201      	movs	r2, #1
 802a47c:	2014      	movs	r0, #20
 802a47e:	f7ff fea4 	bl	802a1ca <bhy2_hif_set_regs>
 802a482:	4603      	mov	r3, r0
 802a484:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 802a486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a48a:	2b00      	cmp	r3, #0
 802a48c:	d12b      	bne.n	802a4e6 <bhy2_hif_reset+0x86>
    {
        while (count--)
 802a48e:	e01c      	b.n	802a4ca <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 802a490:	6879      	ldr	r1, [r7, #4]
 802a492:	f242 7010 	movw	r0, #10000	; 0x2710
 802a496:	f7ff fed0 	bl	802a23a <bhy2_hif_delay_us>
 802a49a:	4603      	mov	r3, r0
 802a49c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 802a49e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a4a2:	2b00      	cmp	r3, #0
 802a4a4:	d111      	bne.n	802a4ca <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 802a4a6:	f107 010a 	add.w	r1, r7, #10
 802a4aa:	687b      	ldr	r3, [r7, #4]
 802a4ac:	2201      	movs	r2, #1
 802a4ae:	2025      	movs	r0, #37	; 0x25
 802a4b0:	f7ff fe53 	bl	802a15a <bhy2_hif_get_regs>
 802a4b4:	4603      	mov	r3, r0
 802a4b6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 802a4b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a4bc:	2b00      	cmp	r3, #0
 802a4be:	d104      	bne.n	802a4ca <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 802a4c0:	7abb      	ldrb	r3, [r7, #10]
 802a4c2:	f003 0310 	and.w	r3, r3, #16
 802a4c6:	2b00      	cmp	r3, #0
 802a4c8:	d105      	bne.n	802a4d6 <bhy2_hif_reset+0x76>
        while (count--)
 802a4ca:	89bb      	ldrh	r3, [r7, #12]
 802a4cc:	1e5a      	subs	r2, r3, #1
 802a4ce:	81ba      	strh	r2, [r7, #12]
 802a4d0:	2b00      	cmp	r3, #0
 802a4d2:	d1dd      	bne.n	802a490 <bhy2_hif_reset+0x30>
 802a4d4:	e000      	b.n	802a4d8 <bhy2_hif_reset+0x78>
                    {
                        break;
 802a4d6:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 802a4d8:	7abb      	ldrb	r3, [r7, #10]
 802a4da:	f003 0310 	and.w	r3, r3, #16
 802a4de:	2b00      	cmp	r3, #0
 802a4e0:	d101      	bne.n	802a4e6 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 802a4e2:	23fb      	movs	r3, #251	; 0xfb
 802a4e4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 802a4e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802a4ea:	4618      	mov	r0, r3
 802a4ec:	3710      	adds	r7, #16
 802a4ee:	46bd      	mov	sp, r7
 802a4f0:	bd80      	pop	{r7, pc}

0802a4f2 <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 802a4f2:	b580      	push	{r7, lr}
 802a4f4:	b086      	sub	sp, #24
 802a4f6:	af00      	add	r7, sp, #0
 802a4f8:	60f8      	str	r0, [r7, #12]
 802a4fa:	60b9      	str	r1, [r7, #8]
 802a4fc:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 802a4fe:	2300      	movs	r3, #0
 802a500:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 802a502:	687b      	ldr	r3, [r7, #4]
 802a504:	2b00      	cmp	r3, #0
 802a506:	d027      	beq.n	802a558 <bhy2_hif_upload_firmware_to_ram+0x66>
 802a508:	68fb      	ldr	r3, [r7, #12]
 802a50a:	2b00      	cmp	r3, #0
 802a50c:	d024      	beq.n	802a558 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 802a50e:	68fb      	ldr	r3, [r7, #12]
 802a510:	781b      	ldrb	r3, [r3, #0]
 802a512:	b21a      	sxth	r2, r3
 802a514:	68fb      	ldr	r3, [r7, #12]
 802a516:	3301      	adds	r3, #1
 802a518:	781b      	ldrb	r3, [r3, #0]
 802a51a:	021b      	lsls	r3, r3, #8
 802a51c:	b21b      	sxth	r3, r3
 802a51e:	4313      	orrs	r3, r2
 802a520:	b21b      	sxth	r3, r3
 802a522:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 802a524:	8abb      	ldrh	r3, [r7, #20]
 802a526:	f246 622b 	movw	r2, #26155	; 0x662b
 802a52a:	4293      	cmp	r3, r2
 802a52c:	d002      	beq.n	802a534 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 802a52e:	23fc      	movs	r3, #252	; 0xfc
 802a530:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 802a532:	e014      	b.n	802a55e <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 802a534:	687b      	ldr	r3, [r7, #4]
 802a536:	68ba      	ldr	r2, [r7, #8]
 802a538:	68f9      	ldr	r1, [r7, #12]
 802a53a:	2002      	movs	r0, #2
 802a53c:	f7ff fe9b 	bl	802a276 <bhy2_hif_exec_cmd>
 802a540:	4603      	mov	r3, r0
 802a542:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 802a544:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a548:	2b00      	cmp	r3, #0
 802a54a:	d108      	bne.n	802a55e <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 802a54c:	6878      	ldr	r0, [r7, #4]
 802a54e:	f7ff fcf2 	bl	8029f36 <bhy2_hif_check_boot_status_ram>
 802a552:	4603      	mov	r3, r0
 802a554:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 802a556:	e002      	b.n	802a55e <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a558:	23ff      	movs	r3, #255	; 0xff
 802a55a:	75fb      	strb	r3, [r7, #23]
 802a55c:	e000      	b.n	802a560 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 802a55e:	bf00      	nop
    }

    return rslt;
 802a560:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802a564:	4618      	mov	r0, r3
 802a566:	3718      	adds	r7, #24
 802a568:	46bd      	mov	sp, r7
 802a56a:	bd80      	pop	{r7, pc}

0802a56c <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 802a56c:	b580      	push	{r7, lr}
 802a56e:	b084      	sub	sp, #16
 802a570:	af00      	add	r7, sp, #0
 802a572:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 802a574:	687b      	ldr	r3, [r7, #4]
 802a576:	2200      	movs	r2, #0
 802a578:	2100      	movs	r1, #0
 802a57a:	2003      	movs	r0, #3
 802a57c:	f7ff fe7b 	bl	802a276 <bhy2_hif_exec_cmd>
 802a580:	4603      	mov	r3, r0
 802a582:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 802a584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802a588:	2b00      	cmp	r3, #0
 802a58a:	d104      	bne.n	802a596 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 802a58c:	6878      	ldr	r0, [r7, #4]
 802a58e:	f7ff fcd2 	bl	8029f36 <bhy2_hif_check_boot_status_ram>
 802a592:	4603      	mov	r3, r0
 802a594:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802a596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802a59a:	4618      	mov	r0, r3
 802a59c:	3710      	adds	r7, #16
 802a59e:	46bd      	mov	sp, r7
 802a5a0:	bd80      	pop	{r7, pc}

0802a5a2 <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802a5a2:	b580      	push	{r7, lr}
 802a5a4:	b086      	sub	sp, #24
 802a5a6:	af02      	add	r7, sp, #8
 802a5a8:	60f8      	str	r0, [r7, #12]
 802a5aa:	60b9      	str	r1, [r7, #8]
 802a5ac:	607a      	str	r2, [r7, #4]
 802a5ae:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802a5b0:	69bb      	ldr	r3, [r7, #24]
 802a5b2:	9301      	str	r3, [sp, #4]
 802a5b4:	683b      	ldr	r3, [r7, #0]
 802a5b6:	9300      	str	r3, [sp, #0]
 802a5b8:	687b      	ldr	r3, [r7, #4]
 802a5ba:	68ba      	ldr	r2, [r7, #8]
 802a5bc:	68f9      	ldr	r1, [r7, #12]
 802a5be:	2001      	movs	r0, #1
 802a5c0:	f7ff fd00 	bl	8029fc4 <bhy2_hif_get_fifo>
 802a5c4:	4603      	mov	r3, r0
}
 802a5c6:	4618      	mov	r0, r3
 802a5c8:	3710      	adds	r7, #16
 802a5ca:	46bd      	mov	sp, r7
 802a5cc:	bd80      	pop	{r7, pc}

0802a5ce <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 802a5ce:	b580      	push	{r7, lr}
 802a5d0:	b086      	sub	sp, #24
 802a5d2:	af02      	add	r7, sp, #8
 802a5d4:	60f8      	str	r0, [r7, #12]
 802a5d6:	60b9      	str	r1, [r7, #8]
 802a5d8:	607a      	str	r2, [r7, #4]
 802a5da:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802a5dc:	69bb      	ldr	r3, [r7, #24]
 802a5de:	9301      	str	r3, [sp, #4]
 802a5e0:	683b      	ldr	r3, [r7, #0]
 802a5e2:	9300      	str	r3, [sp, #0]
 802a5e4:	687b      	ldr	r3, [r7, #4]
 802a5e6:	68ba      	ldr	r2, [r7, #8]
 802a5e8:	68f9      	ldr	r1, [r7, #12]
 802a5ea:	2002      	movs	r0, #2
 802a5ec:	f7ff fcea 	bl	8029fc4 <bhy2_hif_get_fifo>
 802a5f0:	4603      	mov	r3, r0
}
 802a5f2:	4618      	mov	r0, r3
 802a5f4:	3710      	adds	r7, #16
 802a5f6:	46bd      	mov	sp, r7
 802a5f8:	bd80      	pop	{r7, pc}

0802a5fa <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802a5fa:	b580      	push	{r7, lr}
 802a5fc:	b086      	sub	sp, #24
 802a5fe:	af00      	add	r7, sp, #0
 802a600:	60f8      	str	r0, [r7, #12]
 802a602:	60b9      	str	r1, [r7, #8]
 802a604:	607a      	str	r2, [r7, #4]
 802a606:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 802a608:	f107 0110 	add.w	r1, r7, #16
 802a60c:	6a3b      	ldr	r3, [r7, #32]
 802a60e:	2204      	movs	r2, #4
 802a610:	2003      	movs	r0, #3
 802a612:	f7ff fda2 	bl	802a15a <bhy2_hif_get_regs>
 802a616:	4603      	mov	r3, r0
 802a618:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 802a61a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802a61e:	2b00      	cmp	r3, #0
 802a620:	d130      	bne.n	802a684 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 802a622:	7c3b      	ldrb	r3, [r7, #16]
 802a624:	b21a      	sxth	r2, r3
 802a626:	f107 0310 	add.w	r3, r7, #16
 802a62a:	3301      	adds	r3, #1
 802a62c:	781b      	ldrb	r3, [r3, #0]
 802a62e:	021b      	lsls	r3, r3, #8
 802a630:	b21b      	sxth	r3, r3
 802a632:	4313      	orrs	r3, r2
 802a634:	b21b      	sxth	r3, r3
 802a636:	b29a      	uxth	r2, r3
 802a638:	68fb      	ldr	r3, [r7, #12]
 802a63a:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 802a63c:	7cbb      	ldrb	r3, [r7, #18]
 802a63e:	b21a      	sxth	r2, r3
 802a640:	f107 0310 	add.w	r3, r7, #16
 802a644:	3302      	adds	r3, #2
 802a646:	3301      	adds	r3, #1
 802a648:	781b      	ldrb	r3, [r3, #0]
 802a64a:	021b      	lsls	r3, r3, #8
 802a64c:	b21b      	sxth	r3, r3
 802a64e:	4313      	orrs	r3, r2
 802a650:	b21b      	sxth	r3, r3
 802a652:	b29b      	uxth	r3, r3
 802a654:	461a      	mov	r2, r3
 802a656:	683b      	ldr	r3, [r7, #0]
 802a658:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 802a65a:	683b      	ldr	r3, [r7, #0]
 802a65c:	681b      	ldr	r3, [r3, #0]
 802a65e:	2b00      	cmp	r3, #0
 802a660:	d010      	beq.n	802a684 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 802a662:	683b      	ldr	r3, [r7, #0]
 802a664:	681b      	ldr	r3, [r3, #0]
 802a666:	687a      	ldr	r2, [r7, #4]
 802a668:	429a      	cmp	r2, r3
 802a66a:	d202      	bcs.n	802a672 <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 802a66c:	23fa      	movs	r3, #250	; 0xfa
 802a66e:	75fb      	strb	r3, [r7, #23]
 802a670:	e008      	b.n	802a684 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 802a672:	683b      	ldr	r3, [r7, #0]
 802a674:	681a      	ldr	r2, [r3, #0]
 802a676:	6a3b      	ldr	r3, [r7, #32]
 802a678:	68b9      	ldr	r1, [r7, #8]
 802a67a:	2003      	movs	r0, #3
 802a67c:	f7ff fd6d 	bl	802a15a <bhy2_hif_get_regs>
 802a680:	4603      	mov	r3, r0
 802a682:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 802a684:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802a688:	4618      	mov	r0, r3
 802a68a:	3718      	adds	r7, #24
 802a68c:	46bd      	mov	sp, r7
 802a68e:	bd80      	pop	{r7, pc}

0802a690 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 802a690:	b580      	push	{r7, lr}
 802a692:	b086      	sub	sp, #24
 802a694:	af02      	add	r7, sp, #8
 802a696:	60f8      	str	r0, [r7, #12]
 802a698:	60b9      	str	r1, [r7, #8]
 802a69a:	607a      	str	r2, [r7, #4]
 802a69c:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802a69e:	69bb      	ldr	r3, [r7, #24]
 802a6a0:	9301      	str	r3, [sp, #4]
 802a6a2:	683b      	ldr	r3, [r7, #0]
 802a6a4:	9300      	str	r3, [sp, #0]
 802a6a6:	687b      	ldr	r3, [r7, #4]
 802a6a8:	68ba      	ldr	r2, [r7, #8]
 802a6aa:	68f9      	ldr	r1, [r7, #12]
 802a6ac:	2003      	movs	r0, #3
 802a6ae:	f7ff fc89 	bl	8029fc4 <bhy2_hif_get_fifo>
 802a6b2:	4603      	mov	r3, r0
}
 802a6b4:	4618      	mov	r0, r3
 802a6b6:	3710      	adds	r7, #16
 802a6b8:	46bd      	mov	sp, r7
 802a6ba:	bd80      	pop	{r7, pc}

0802a6bc <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 802a6bc:	b580      	push	{r7, lr}
 802a6be:	b088      	sub	sp, #32
 802a6c0:	af00      	add	r7, sp, #0
 802a6c2:	4603      	mov	r3, r0
 802a6c4:	ed87 0a02 	vstr	s0, [r7, #8]
 802a6c8:	6079      	str	r1, [r7, #4]
 802a6ca:	603a      	str	r2, [r7, #0]
 802a6cc:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 802a6ce:	68bb      	ldr	r3, [r7, #8]
 802a6d0:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 802a6d2:	7bfb      	ldrb	r3, [r7, #15]
 802a6d4:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 802a6d6:	697b      	ldr	r3, [r7, #20]
 802a6d8:	b2db      	uxtb	r3, r3
 802a6da:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 802a6dc:	697b      	ldr	r3, [r7, #20]
 802a6de:	0a1b      	lsrs	r3, r3, #8
 802a6e0:	b2db      	uxtb	r3, r3
 802a6e2:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 802a6e4:	697b      	ldr	r3, [r7, #20]
 802a6e6:	0c1b      	lsrs	r3, r3, #16
 802a6e8:	b2db      	uxtb	r3, r3
 802a6ea:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 802a6ec:	697b      	ldr	r3, [r7, #20]
 802a6ee:	0e1b      	lsrs	r3, r3, #24
 802a6f0:	b2db      	uxtb	r3, r3
 802a6f2:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 802a6f4:	687b      	ldr	r3, [r7, #4]
 802a6f6:	b2db      	uxtb	r3, r3
 802a6f8:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 802a6fa:	687b      	ldr	r3, [r7, #4]
 802a6fc:	0a1b      	lsrs	r3, r3, #8
 802a6fe:	b2db      	uxtb	r3, r3
 802a700:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 802a702:	687b      	ldr	r3, [r7, #4]
 802a704:	0c1b      	lsrs	r3, r3, #16
 802a706:	b2db      	uxtb	r3, r3
 802a708:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 802a70a:	f107 0118 	add.w	r1, r7, #24
 802a70e:	683b      	ldr	r3, [r7, #0]
 802a710:	2208      	movs	r2, #8
 802a712:	200d      	movs	r0, #13
 802a714:	f7ff fdaf 	bl	802a276 <bhy2_hif_exec_cmd>
 802a718:	4603      	mov	r3, r0
}
 802a71a:	4618      	mov	r0, r3
 802a71c:	3720      	adds	r7, #32
 802a71e:	46bd      	mov	sp, r7
 802a720:	bd80      	pop	{r7, pc}

0802a722 <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 802a722:	b580      	push	{r7, lr}
 802a724:	b090      	sub	sp, #64	; 0x40
 802a726:	af02      	add	r7, sp, #8
 802a728:	4603      	mov	r3, r0
 802a72a:	60b9      	str	r1, [r7, #8]
 802a72c:	607a      	str	r2, [r7, #4]
 802a72e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 802a730:	68bb      	ldr	r3, [r7, #8]
 802a732:	2b00      	cmp	r3, #0
 802a734:	f000 80da 	beq.w	802a8ec <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 802a738:	7bfb      	ldrb	r3, [r7, #15]
 802a73a:	2bf5      	cmp	r3, #245	; 0xf5
 802a73c:	d903      	bls.n	802a746 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 802a73e:	23fe      	movs	r3, #254	; 0xfe
 802a740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802a744:	e0d5      	b.n	802a8f2 <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 802a746:	7bfb      	ldrb	r3, [r7, #15]
 802a748:	b29b      	uxth	r3, r3
 802a74a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 802a74e:	b298      	uxth	r0, r3
 802a750:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802a754:	f107 0114 	add.w	r1, r7, #20
 802a758:	687b      	ldr	r3, [r7, #4]
 802a75a:	9300      	str	r3, [sp, #0]
 802a75c:	4613      	mov	r3, r2
 802a75e:	221c      	movs	r2, #28
 802a760:	f7ff fda2 	bl	802a2a8 <bhy2_hif_get_parameter>
 802a764:	4603      	mov	r3, r0
 802a766:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 802a76a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 802a76e:	2b00      	cmp	r3, #0
 802a770:	f040 80bf 	bne.w	802a8f2 <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 802a774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a776:	2b1c      	cmp	r3, #28
 802a778:	d003      	beq.n	802a782 <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 802a77a:	23fe      	movs	r3, #254	; 0xfe
 802a77c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802a780:	e0b7      	b.n	802a8f2 <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 802a782:	7d3a      	ldrb	r2, [r7, #20]
 802a784:	68bb      	ldr	r3, [r7, #8]
 802a786:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 802a788:	7d7a      	ldrb	r2, [r7, #21]
 802a78a:	68bb      	ldr	r3, [r7, #8]
 802a78c:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 802a78e:	7dba      	ldrb	r2, [r7, #22]
 802a790:	68bb      	ldr	r3, [r7, #8]
 802a792:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 802a794:	7dfa      	ldrb	r2, [r7, #23]
 802a796:	68bb      	ldr	r3, [r7, #8]
 802a798:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 802a79a:	7e3a      	ldrb	r2, [r7, #24]
 802a79c:	68bb      	ldr	r3, [r7, #8]
 802a79e:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 802a7a0:	7e7a      	ldrb	r2, [r7, #25]
 802a7a2:	68bb      	ldr	r3, [r7, #8]
 802a7a4:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 802a7a6:	7eba      	ldrb	r2, [r7, #26]
 802a7a8:	68bb      	ldr	r3, [r7, #8]
 802a7aa:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 802a7ac:	7efa      	ldrb	r2, [r7, #27]
 802a7ae:	68bb      	ldr	r3, [r7, #8]
 802a7b0:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 802a7b2:	7f3a      	ldrb	r2, [r7, #28]
 802a7b4:	68bb      	ldr	r3, [r7, #8]
 802a7b6:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 802a7b8:	7f7a      	ldrb	r2, [r7, #29]
 802a7ba:	68bb      	ldr	r3, [r7, #8]
 802a7bc:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 802a7be:	7fba      	ldrb	r2, [r7, #30]
 802a7c0:	68bb      	ldr	r3, [r7, #8]
 802a7c2:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 802a7c4:	7ffa      	ldrb	r2, [r7, #31]
 802a7c6:	68bb      	ldr	r3, [r7, #8]
 802a7c8:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 802a7ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 802a7ce:	68bb      	ldr	r3, [r7, #8]
 802a7d0:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 802a7d2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 802a7d6:	68bb      	ldr	r3, [r7, #8]
 802a7d8:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 802a7da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 802a7de:	68bb      	ldr	r3, [r7, #8]
 802a7e0:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 802a7e2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 802a7e6:	68bb      	ldr	r3, [r7, #8]
 802a7e8:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 802a7ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802a7ee:	68bb      	ldr	r3, [r7, #8]
 802a7f0:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 802a7f2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 802a7f6:	68bb      	ldr	r3, [r7, #8]
 802a7f8:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 802a7fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802a7fe:	68bb      	ldr	r3, [r7, #8]
 802a800:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 802a802:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802a806:	68bb      	ldr	r3, [r7, #8]
 802a808:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 802a80a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802a80e:	68bb      	ldr	r3, [r7, #8]
 802a810:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 802a812:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 802a816:	68bb      	ldr	r3, [r7, #8]
 802a818:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 802a81a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 802a81e:	68bb      	ldr	r3, [r7, #8]
 802a820:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 802a822:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 802a826:	68bb      	ldr	r3, [r7, #8]
 802a828:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 802a82a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802a82e:	68bb      	ldr	r3, [r7, #8]
 802a830:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 802a832:	68bb      	ldr	r3, [r7, #8]
 802a834:	791b      	ldrb	r3, [r3, #4]
 802a836:	b21a      	sxth	r2, r3
 802a838:	68bb      	ldr	r3, [r7, #8]
 802a83a:	795b      	ldrb	r3, [r3, #5]
 802a83c:	021b      	lsls	r3, r3, #8
 802a83e:	b21b      	sxth	r3, r3
 802a840:	4313      	orrs	r3, r2
 802a842:	b21b      	sxth	r3, r3
 802a844:	b29a      	uxth	r2, r3
 802a846:	68bb      	ldr	r3, [r7, #8]
 802a848:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 802a84a:	68bb      	ldr	r3, [r7, #8]
 802a84c:	799b      	ldrb	r3, [r3, #6]
 802a84e:	b21a      	sxth	r2, r3
 802a850:	68bb      	ldr	r3, [r7, #8]
 802a852:	79db      	ldrb	r3, [r3, #7]
 802a854:	021b      	lsls	r3, r3, #8
 802a856:	b21b      	sxth	r3, r3
 802a858:	4313      	orrs	r3, r2
 802a85a:	b21b      	sxth	r3, r3
 802a85c:	b29a      	uxth	r2, r3
 802a85e:	68bb      	ldr	r3, [r7, #8]
 802a860:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 802a862:	68bb      	ldr	r3, [r7, #8]
 802a864:	7a1b      	ldrb	r3, [r3, #8]
 802a866:	461a      	mov	r2, r3
 802a868:	68bb      	ldr	r3, [r7, #8]
 802a86a:	7a5b      	ldrb	r3, [r3, #9]
 802a86c:	021b      	lsls	r3, r3, #8
 802a86e:	431a      	orrs	r2, r3
 802a870:	68bb      	ldr	r3, [r7, #8]
 802a872:	7a9b      	ldrb	r3, [r3, #10]
 802a874:	041b      	lsls	r3, r3, #16
 802a876:	431a      	orrs	r2, r3
 802a878:	68bb      	ldr	r3, [r7, #8]
 802a87a:	7adb      	ldrb	r3, [r3, #11]
 802a87c:	061b      	lsls	r3, r3, #24
 802a87e:	431a      	orrs	r2, r3
 802a880:	68bb      	ldr	r3, [r7, #8]
 802a882:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 802a884:	68bb      	ldr	r3, [r7, #8]
 802a886:	7b1b      	ldrb	r3, [r3, #12]
 802a888:	461a      	mov	r2, r3
 802a88a:	68bb      	ldr	r3, [r7, #8]
 802a88c:	7b5b      	ldrb	r3, [r3, #13]
 802a88e:	021b      	lsls	r3, r3, #8
 802a890:	431a      	orrs	r2, r3
 802a892:	68bb      	ldr	r3, [r7, #8]
 802a894:	7b9b      	ldrb	r3, [r3, #14]
 802a896:	041b      	lsls	r3, r3, #16
 802a898:	431a      	orrs	r2, r3
 802a89a:	68bb      	ldr	r3, [r7, #8]
 802a89c:	7bdb      	ldrb	r3, [r3, #15]
 802a89e:	061b      	lsls	r3, r3, #24
 802a8a0:	431a      	orrs	r2, r3
 802a8a2:	68bb      	ldr	r3, [r7, #8]
 802a8a4:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 802a8a6:	68bb      	ldr	r3, [r7, #8]
 802a8a8:	7c1b      	ldrb	r3, [r3, #16]
 802a8aa:	461a      	mov	r2, r3
 802a8ac:	68bb      	ldr	r3, [r7, #8]
 802a8ae:	7c5b      	ldrb	r3, [r3, #17]
 802a8b0:	021b      	lsls	r3, r3, #8
 802a8b2:	431a      	orrs	r2, r3
 802a8b4:	68bb      	ldr	r3, [r7, #8]
 802a8b6:	7c9b      	ldrb	r3, [r3, #18]
 802a8b8:	041b      	lsls	r3, r3, #16
 802a8ba:	431a      	orrs	r2, r3
 802a8bc:	68bb      	ldr	r3, [r7, #8]
 802a8be:	7cdb      	ldrb	r3, [r3, #19]
 802a8c0:	061b      	lsls	r3, r3, #24
 802a8c2:	431a      	orrs	r2, r3
 802a8c4:	68bb      	ldr	r3, [r7, #8]
 802a8c6:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 802a8c8:	68bb      	ldr	r3, [r7, #8]
 802a8ca:	7e1b      	ldrb	r3, [r3, #24]
 802a8cc:	461a      	mov	r2, r3
 802a8ce:	68bb      	ldr	r3, [r7, #8]
 802a8d0:	7e5b      	ldrb	r3, [r3, #25]
 802a8d2:	021b      	lsls	r3, r3, #8
 802a8d4:	431a      	orrs	r2, r3
 802a8d6:	68bb      	ldr	r3, [r7, #8]
 802a8d8:	7e9b      	ldrb	r3, [r3, #26]
 802a8da:	041b      	lsls	r3, r3, #16
 802a8dc:	431a      	orrs	r2, r3
 802a8de:	68bb      	ldr	r3, [r7, #8]
 802a8e0:	7edb      	ldrb	r3, [r3, #27]
 802a8e2:	061b      	lsls	r3, r3, #24
 802a8e4:	431a      	orrs	r2, r3
 802a8e6:	68bb      	ldr	r3, [r7, #8]
 802a8e8:	619a      	str	r2, [r3, #24]
 802a8ea:	e002      	b.n	802a8f2 <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802a8ec:	23ff      	movs	r3, #255	; 0xff
 802a8ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 802a8f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 802a8f6:	4618      	mov	r0, r3
 802a8f8:	3738      	adds	r7, #56	; 0x38
 802a8fa:	46bd      	mov	sp, r7
 802a8fc:	bd80      	pop	{r7, pc}

0802a8fe <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 802a8fe:	b480      	push	{r7}
 802a900:	b083      	sub	sp, #12
 802a902:	af00      	add	r7, sp, #0
 802a904:	6078      	str	r0, [r7, #4]
 802a906:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 802a908:	687b      	ldr	r3, [r7, #4]
 802a90a:	781b      	ldrb	r3, [r3, #0]
 802a90c:	b21a      	sxth	r2, r3
 802a90e:	687b      	ldr	r3, [r7, #4]
 802a910:	3301      	adds	r3, #1
 802a912:	781b      	ldrb	r3, [r3, #0]
 802a914:	021b      	lsls	r3, r3, #8
 802a916:	b21b      	sxth	r3, r3
 802a918:	4313      	orrs	r3, r2
 802a91a:	b21a      	sxth	r2, r3
 802a91c:	683b      	ldr	r3, [r7, #0]
 802a91e:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 802a920:	687b      	ldr	r3, [r7, #4]
 802a922:	3302      	adds	r3, #2
 802a924:	781b      	ldrb	r3, [r3, #0]
 802a926:	b21a      	sxth	r2, r3
 802a928:	687b      	ldr	r3, [r7, #4]
 802a92a:	3303      	adds	r3, #3
 802a92c:	781b      	ldrb	r3, [r3, #0]
 802a92e:	021b      	lsls	r3, r3, #8
 802a930:	b21b      	sxth	r3, r3
 802a932:	4313      	orrs	r3, r2
 802a934:	b21a      	sxth	r2, r3
 802a936:	683b      	ldr	r3, [r7, #0]
 802a938:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 802a93a:	687b      	ldr	r3, [r7, #4]
 802a93c:	3304      	adds	r3, #4
 802a93e:	781b      	ldrb	r3, [r3, #0]
 802a940:	b21a      	sxth	r2, r3
 802a942:	687b      	ldr	r3, [r7, #4]
 802a944:	3305      	adds	r3, #5
 802a946:	781b      	ldrb	r3, [r3, #0]
 802a948:	021b      	lsls	r3, r3, #8
 802a94a:	b21b      	sxth	r3, r3
 802a94c:	4313      	orrs	r3, r2
 802a94e:	b21a      	sxth	r2, r3
 802a950:	683b      	ldr	r3, [r7, #0]
 802a952:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 802a954:	687b      	ldr	r3, [r7, #4]
 802a956:	3306      	adds	r3, #6
 802a958:	781b      	ldrb	r3, [r3, #0]
 802a95a:	b21a      	sxth	r2, r3
 802a95c:	687b      	ldr	r3, [r7, #4]
 802a95e:	3307      	adds	r3, #7
 802a960:	781b      	ldrb	r3, [r3, #0]
 802a962:	021b      	lsls	r3, r3, #8
 802a964:	b21b      	sxth	r3, r3
 802a966:	4313      	orrs	r3, r2
 802a968:	b21a      	sxth	r2, r3
 802a96a:	683b      	ldr	r3, [r7, #0]
 802a96c:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 802a96e:	687b      	ldr	r3, [r7, #4]
 802a970:	3308      	adds	r3, #8
 802a972:	781b      	ldrb	r3, [r3, #0]
 802a974:	b21a      	sxth	r2, r3
 802a976:	687b      	ldr	r3, [r7, #4]
 802a978:	3309      	adds	r3, #9
 802a97a:	781b      	ldrb	r3, [r3, #0]
 802a97c:	021b      	lsls	r3, r3, #8
 802a97e:	b21b      	sxth	r3, r3
 802a980:	4313      	orrs	r3, r2
 802a982:	b21b      	sxth	r3, r3
 802a984:	b29a      	uxth	r2, r3
 802a986:	683b      	ldr	r3, [r7, #0]
 802a988:	811a      	strh	r2, [r3, #8]
}
 802a98a:	bf00      	nop
 802a98c:	370c      	adds	r7, #12
 802a98e:	46bd      	mov	sp, r7
 802a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a994:	4770      	bx	lr
	...

0802a998 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 802a998:	b580      	push	{r7, lr}
 802a99a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 802a99c:	4b12      	ldr	r3, [pc, #72]	; (802a9e8 <MX_COMP2_Init+0x50>)
 802a99e:	4a13      	ldr	r2, [pc, #76]	; (802a9ec <MX_COMP2_Init+0x54>)
 802a9a0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 802a9a2:	4b11      	ldr	r3, [pc, #68]	; (802a9e8 <MX_COMP2_Init+0x50>)
 802a9a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 802a9a8:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 802a9aa:	4b0f      	ldr	r3, [pc, #60]	; (802a9e8 <MX_COMP2_Init+0x50>)
 802a9ac:	2200      	movs	r2, #0
 802a9ae:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 802a9b0:	4b0d      	ldr	r3, [pc, #52]	; (802a9e8 <MX_COMP2_Init+0x50>)
 802a9b2:	2200      	movs	r2, #0
 802a9b4:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 802a9b6:	4b0c      	ldr	r3, [pc, #48]	; (802a9e8 <MX_COMP2_Init+0x50>)
 802a9b8:	2200      	movs	r2, #0
 802a9ba:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 802a9bc:	4b0a      	ldr	r3, [pc, #40]	; (802a9e8 <MX_COMP2_Init+0x50>)
 802a9be:	2200      	movs	r2, #0
 802a9c0:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 802a9c2:	4b09      	ldr	r3, [pc, #36]	; (802a9e8 <MX_COMP2_Init+0x50>)
 802a9c4:	2200      	movs	r2, #0
 802a9c6:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 802a9c8:	4b07      	ldr	r3, [pc, #28]	; (802a9e8 <MX_COMP2_Init+0x50>)
 802a9ca:	2200      	movs	r2, #0
 802a9cc:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 802a9ce:	4b06      	ldr	r3, [pc, #24]	; (802a9e8 <MX_COMP2_Init+0x50>)
 802a9d0:	2211      	movs	r2, #17
 802a9d2:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 802a9d4:	4804      	ldr	r0, [pc, #16]	; (802a9e8 <MX_COMP2_Init+0x50>)
 802a9d6:	f001 fd19 	bl	802c40c <HAL_COMP_Init>
 802a9da:	4603      	mov	r3, r0
 802a9dc:	2b00      	cmp	r3, #0
 802a9de:	d001      	beq.n	802a9e4 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 802a9e0:	f000 fc22 	bl	802b228 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 802a9e4:	bf00      	nop
 802a9e6:	bd80      	pop	{r7, pc}
 802a9e8:	240014a0 	.word	0x240014a0
 802a9ec:	58003810 	.word	0x58003810

0802a9f0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 802a9f0:	b580      	push	{r7, lr}
 802a9f2:	b08a      	sub	sp, #40	; 0x28
 802a9f4:	af00      	add	r7, sp, #0
 802a9f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802a9f8:	f107 0314 	add.w	r3, r7, #20
 802a9fc:	2200      	movs	r2, #0
 802a9fe:	601a      	str	r2, [r3, #0]
 802aa00:	605a      	str	r2, [r3, #4]
 802aa02:	609a      	str	r2, [r3, #8]
 802aa04:	60da      	str	r2, [r3, #12]
 802aa06:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 802aa08:	687b      	ldr	r3, [r7, #4]
 802aa0a:	681b      	ldr	r3, [r3, #0]
 802aa0c:	4a1c      	ldr	r2, [pc, #112]	; (802aa80 <HAL_COMP_MspInit+0x90>)
 802aa0e:	4293      	cmp	r3, r2
 802aa10:	d132      	bne.n	802aa78 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 802aa12:	4b1c      	ldr	r3, [pc, #112]	; (802aa84 <HAL_COMP_MspInit+0x94>)
 802aa14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802aa18:	4a1a      	ldr	r2, [pc, #104]	; (802aa84 <HAL_COMP_MspInit+0x94>)
 802aa1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802aa1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802aa22:	4b18      	ldr	r3, [pc, #96]	; (802aa84 <HAL_COMP_MspInit+0x94>)
 802aa24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802aa28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802aa2c:	613b      	str	r3, [r7, #16]
 802aa2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 802aa30:	4b14      	ldr	r3, [pc, #80]	; (802aa84 <HAL_COMP_MspInit+0x94>)
 802aa32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802aa36:	4a13      	ldr	r2, [pc, #76]	; (802aa84 <HAL_COMP_MspInit+0x94>)
 802aa38:	f043 0310 	orr.w	r3, r3, #16
 802aa3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802aa40:	4b10      	ldr	r3, [pc, #64]	; (802aa84 <HAL_COMP_MspInit+0x94>)
 802aa42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802aa46:	f003 0310 	and.w	r3, r3, #16
 802aa4a:	60fb      	str	r3, [r7, #12]
 802aa4c:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 802aa4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 802aa52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802aa54:	2303      	movs	r3, #3
 802aa56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802aa58:	2300      	movs	r3, #0
 802aa5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802aa5c:	f107 0314 	add.w	r3, r7, #20
 802aa60:	4619      	mov	r1, r3
 802aa62:	4809      	ldr	r0, [pc, #36]	; (802aa88 <HAL_COMP_MspInit+0x98>)
 802aa64:	f004 ffe8 	bl	802fa38 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 802aa68:	2200      	movs	r2, #0
 802aa6a:	2100      	movs	r1, #0
 802aa6c:	2089      	movs	r0, #137	; 0x89
 802aa6e:	f001 ff90 	bl	802c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 802aa72:	2089      	movs	r0, #137	; 0x89
 802aa74:	f001 ffa7 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 802aa78:	bf00      	nop
 802aa7a:	3728      	adds	r7, #40	; 0x28
 802aa7c:	46bd      	mov	sp, r7
 802aa7e:	bd80      	pop	{r7, pc}
 802aa80:	58003810 	.word	0x58003810
 802aa84:	58024400 	.word	0x58024400
 802aa88:	58021000 	.word	0x58021000

0802aa8c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 802aa8c:	b580      	push	{r7, lr}
 802aa8e:	b08a      	sub	sp, #40	; 0x28
 802aa90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 802aa92:	1d3b      	adds	r3, r7, #4
 802aa94:	2224      	movs	r2, #36	; 0x24
 802aa96:	2100      	movs	r1, #0
 802aa98:	4618      	mov	r0, r3
 802aa9a:	f012 fd87 	bl	803d5ac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 802aa9e:	4b12      	ldr	r3, [pc, #72]	; (802aae8 <MX_DAC1_Init+0x5c>)
 802aaa0:	4a12      	ldr	r2, [pc, #72]	; (802aaec <MX_DAC1_Init+0x60>)
 802aaa2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 802aaa4:	4810      	ldr	r0, [pc, #64]	; (802aae8 <MX_DAC1_Init+0x5c>)
 802aaa6:	f001 ffa8 	bl	802c9fa <HAL_DAC_Init>
 802aaaa:	4603      	mov	r3, r0
 802aaac:	2b00      	cmp	r3, #0
 802aaae:	d001      	beq.n	802aab4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 802aab0:	f000 fbba 	bl	802b228 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 802aab4:	2300      	movs	r3, #0
 802aab6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 802aab8:	2300      	movs	r3, #0
 802aaba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 802aabc:	2302      	movs	r3, #2
 802aabe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 802aac0:	2302      	movs	r3, #2
 802aac2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 802aac4:	2300      	movs	r3, #0
 802aac6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 802aac8:	1d3b      	adds	r3, r7, #4
 802aaca:	2200      	movs	r2, #0
 802aacc:	4619      	mov	r1, r3
 802aace:	4806      	ldr	r0, [pc, #24]	; (802aae8 <MX_DAC1_Init+0x5c>)
 802aad0:	f002 f82c 	bl	802cb2c <HAL_DAC_ConfigChannel>
 802aad4:	4603      	mov	r3, r0
 802aad6:	2b00      	cmp	r3, #0
 802aad8:	d001      	beq.n	802aade <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 802aada:	f000 fba5 	bl	802b228 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 802aade:	bf00      	nop
 802aae0:	3728      	adds	r7, #40	; 0x28
 802aae2:	46bd      	mov	sp, r7
 802aae4:	bd80      	pop	{r7, pc}
 802aae6:	bf00      	nop
 802aae8:	240014cc 	.word	0x240014cc
 802aaec:	40007400 	.word	0x40007400

0802aaf0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 802aaf0:	b480      	push	{r7}
 802aaf2:	b085      	sub	sp, #20
 802aaf4:	af00      	add	r7, sp, #0
 802aaf6:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 802aaf8:	687b      	ldr	r3, [r7, #4]
 802aafa:	681b      	ldr	r3, [r3, #0]
 802aafc:	4a0b      	ldr	r2, [pc, #44]	; (802ab2c <HAL_DAC_MspInit+0x3c>)
 802aafe:	4293      	cmp	r3, r2
 802ab00:	d10e      	bne.n	802ab20 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 802ab02:	4b0b      	ldr	r3, [pc, #44]	; (802ab30 <HAL_DAC_MspInit+0x40>)
 802ab04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ab08:	4a09      	ldr	r2, [pc, #36]	; (802ab30 <HAL_DAC_MspInit+0x40>)
 802ab0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802ab0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802ab12:	4b07      	ldr	r3, [pc, #28]	; (802ab30 <HAL_DAC_MspInit+0x40>)
 802ab14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ab18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802ab1c:	60fb      	str	r3, [r7, #12]
 802ab1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 802ab20:	bf00      	nop
 802ab22:	3714      	adds	r7, #20
 802ab24:	46bd      	mov	sp, r7
 802ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab2a:	4770      	bx	lr
 802ab2c:	40007400 	.word	0x40007400
 802ab30:	58024400 	.word	0x58024400

0802ab34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 802ab34:	b580      	push	{r7, lr}
 802ab36:	b082      	sub	sp, #8
 802ab38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 802ab3a:	4b19      	ldr	r3, [pc, #100]	; (802aba0 <MX_DMA_Init+0x6c>)
 802ab3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802ab40:	4a17      	ldr	r2, [pc, #92]	; (802aba0 <MX_DMA_Init+0x6c>)
 802ab42:	f043 0301 	orr.w	r3, r3, #1
 802ab46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 802ab4a:	4b15      	ldr	r3, [pc, #84]	; (802aba0 <MX_DMA_Init+0x6c>)
 802ab4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802ab50:	f003 0301 	and.w	r3, r3, #1
 802ab54:	607b      	str	r3, [r7, #4]
 802ab56:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 802ab58:	2200      	movs	r2, #0
 802ab5a:	2100      	movs	r1, #0
 802ab5c:	200b      	movs	r0, #11
 802ab5e:	f001 ff18 	bl	802c992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 802ab62:	200b      	movs	r0, #11
 802ab64:	f001 ff2f 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 802ab68:	2200      	movs	r2, #0
 802ab6a:	2100      	movs	r1, #0
 802ab6c:	200c      	movs	r0, #12
 802ab6e:	f001 ff10 	bl	802c992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 802ab72:	200c      	movs	r0, #12
 802ab74:	f001 ff27 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 802ab78:	2200      	movs	r2, #0
 802ab7a:	2100      	movs	r1, #0
 802ab7c:	200f      	movs	r0, #15
 802ab7e:	f001 ff08 	bl	802c992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 802ab82:	200f      	movs	r0, #15
 802ab84:	f001 ff1f 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 802ab88:	2200      	movs	r2, #0
 802ab8a:	2100      	movs	r1, #0
 802ab8c:	2010      	movs	r0, #16
 802ab8e:	f001 ff00 	bl	802c992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 802ab92:	2010      	movs	r0, #16
 802ab94:	f001 ff17 	bl	802c9c6 <HAL_NVIC_EnableIRQ>

}
 802ab98:	bf00      	nop
 802ab9a:	3708      	adds	r7, #8
 802ab9c:	46bd      	mov	sp, r7
 802ab9e:	bd80      	pop	{r7, pc}
 802aba0:	58024400 	.word	0x58024400

0802aba4 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 802aba4:	b580      	push	{r7, lr}
 802aba6:	b08a      	sub	sp, #40	; 0x28
 802aba8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802abaa:	f107 0314 	add.w	r3, r7, #20
 802abae:	2200      	movs	r2, #0
 802abb0:	601a      	str	r2, [r3, #0]
 802abb2:	605a      	str	r2, [r3, #4]
 802abb4:	609a      	str	r2, [r3, #8]
 802abb6:	60da      	str	r2, [r3, #12]
 802abb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802abba:	4b3b      	ldr	r3, [pc, #236]	; (802aca8 <MX_GPIO_Init+0x104>)
 802abbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802abc0:	4a39      	ldr	r2, [pc, #228]	; (802aca8 <MX_GPIO_Init+0x104>)
 802abc2:	f043 0304 	orr.w	r3, r3, #4
 802abc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802abca:	4b37      	ldr	r3, [pc, #220]	; (802aca8 <MX_GPIO_Init+0x104>)
 802abcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802abd0:	f003 0304 	and.w	r3, r3, #4
 802abd4:	613b      	str	r3, [r7, #16]
 802abd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802abd8:	4b33      	ldr	r3, [pc, #204]	; (802aca8 <MX_GPIO_Init+0x104>)
 802abda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802abde:	4a32      	ldr	r2, [pc, #200]	; (802aca8 <MX_GPIO_Init+0x104>)
 802abe0:	f043 0301 	orr.w	r3, r3, #1
 802abe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802abe8:	4b2f      	ldr	r3, [pc, #188]	; (802aca8 <MX_GPIO_Init+0x104>)
 802abea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802abee:	f003 0301 	and.w	r3, r3, #1
 802abf2:	60fb      	str	r3, [r7, #12]
 802abf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802abf6:	4b2c      	ldr	r3, [pc, #176]	; (802aca8 <MX_GPIO_Init+0x104>)
 802abf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802abfc:	4a2a      	ldr	r2, [pc, #168]	; (802aca8 <MX_GPIO_Init+0x104>)
 802abfe:	f043 0310 	orr.w	r3, r3, #16
 802ac02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802ac06:	4b28      	ldr	r3, [pc, #160]	; (802aca8 <MX_GPIO_Init+0x104>)
 802ac08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ac0c:	f003 0310 	and.w	r3, r3, #16
 802ac10:	60bb      	str	r3, [r7, #8]
 802ac12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802ac14:	4b24      	ldr	r3, [pc, #144]	; (802aca8 <MX_GPIO_Init+0x104>)
 802ac16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ac1a:	4a23      	ldr	r2, [pc, #140]	; (802aca8 <MX_GPIO_Init+0x104>)
 802ac1c:	f043 0302 	orr.w	r3, r3, #2
 802ac20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802ac24:	4b20      	ldr	r3, [pc, #128]	; (802aca8 <MX_GPIO_Init+0x104>)
 802ac26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ac2a:	f003 0302 	and.w	r3, r3, #2
 802ac2e:	607b      	str	r3, [r7, #4]
 802ac30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802ac32:	4b1d      	ldr	r3, [pc, #116]	; (802aca8 <MX_GPIO_Init+0x104>)
 802ac34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ac38:	4a1b      	ldr	r2, [pc, #108]	; (802aca8 <MX_GPIO_Init+0x104>)
 802ac3a:	f043 0308 	orr.w	r3, r3, #8
 802ac3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802ac42:	4b19      	ldr	r3, [pc, #100]	; (802aca8 <MX_GPIO_Init+0x104>)
 802ac44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ac48:	f003 0308 	and.w	r3, r3, #8
 802ac4c:	603b      	str	r3, [r7, #0]
 802ac4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 802ac50:	2200      	movs	r2, #0
 802ac52:	2101      	movs	r1, #1
 802ac54:	4815      	ldr	r0, [pc, #84]	; (802acac <MX_GPIO_Init+0x108>)
 802ac56:	f005 f89f 	bl	802fd98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 802ac5a:	2200      	movs	r2, #0
 802ac5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802ac60:	4813      	ldr	r0, [pc, #76]	; (802acb0 <MX_GPIO_Init+0x10c>)
 802ac62:	f005 f899 	bl	802fd98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 802ac66:	2301      	movs	r3, #1
 802ac68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802ac6a:	2301      	movs	r3, #1
 802ac6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802ac6e:	2302      	movs	r3, #2
 802ac70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802ac72:	2303      	movs	r3, #3
 802ac74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 802ac76:	f107 0314 	add.w	r3, r7, #20
 802ac7a:	4619      	mov	r1, r3
 802ac7c:	480b      	ldr	r0, [pc, #44]	; (802acac <MX_GPIO_Init+0x108>)
 802ac7e:	f004 fedb 	bl	802fa38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 802ac82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802ac86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802ac88:	2301      	movs	r3, #1
 802ac8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802ac8c:	2302      	movs	r3, #2
 802ac8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802ac90:	2303      	movs	r3, #3
 802ac92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 802ac94:	f107 0314 	add.w	r3, r7, #20
 802ac98:	4619      	mov	r1, r3
 802ac9a:	4805      	ldr	r0, [pc, #20]	; (802acb0 <MX_GPIO_Init+0x10c>)
 802ac9c:	f004 fecc 	bl	802fa38 <HAL_GPIO_Init>

}
 802aca0:	bf00      	nop
 802aca2:	3728      	adds	r7, #40	; 0x28
 802aca4:	46bd      	mov	sp, r7
 802aca6:	bd80      	pop	{r7, pc}
 802aca8:	58024400 	.word	0x58024400
 802acac:	58020800 	.word	0x58020800
 802acb0:	58021000 	.word	0x58021000

0802acb4 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 802acb4:	b580      	push	{r7, lr}
 802acb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 802acb8:	4b1b      	ldr	r3, [pc, #108]	; (802ad28 <MX_I2C2_Init+0x74>)
 802acba:	4a1c      	ldr	r2, [pc, #112]	; (802ad2c <MX_I2C2_Init+0x78>)
 802acbc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 802acbe:	4b1a      	ldr	r3, [pc, #104]	; (802ad28 <MX_I2C2_Init+0x74>)
 802acc0:	4a1b      	ldr	r2, [pc, #108]	; (802ad30 <MX_I2C2_Init+0x7c>)
 802acc2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 802acc4:	4b18      	ldr	r3, [pc, #96]	; (802ad28 <MX_I2C2_Init+0x74>)
 802acc6:	2200      	movs	r2, #0
 802acc8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802acca:	4b17      	ldr	r3, [pc, #92]	; (802ad28 <MX_I2C2_Init+0x74>)
 802accc:	2201      	movs	r2, #1
 802acce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 802acd0:	4b15      	ldr	r3, [pc, #84]	; (802ad28 <MX_I2C2_Init+0x74>)
 802acd2:	2200      	movs	r2, #0
 802acd4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 802acd6:	4b14      	ldr	r3, [pc, #80]	; (802ad28 <MX_I2C2_Init+0x74>)
 802acd8:	2200      	movs	r2, #0
 802acda:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 802acdc:	4b12      	ldr	r3, [pc, #72]	; (802ad28 <MX_I2C2_Init+0x74>)
 802acde:	2200      	movs	r2, #0
 802ace0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802ace2:	4b11      	ldr	r3, [pc, #68]	; (802ad28 <MX_I2C2_Init+0x74>)
 802ace4:	2200      	movs	r2, #0
 802ace6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802ace8:	4b0f      	ldr	r3, [pc, #60]	; (802ad28 <MX_I2C2_Init+0x74>)
 802acea:	2200      	movs	r2, #0
 802acec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 802acee:	480e      	ldr	r0, [pc, #56]	; (802ad28 <MX_I2C2_Init+0x74>)
 802acf0:	f005 f86c 	bl	802fdcc <HAL_I2C_Init>
 802acf4:	4603      	mov	r3, r0
 802acf6:	2b00      	cmp	r3, #0
 802acf8:	d001      	beq.n	802acfe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 802acfa:	f000 fa95 	bl	802b228 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 802acfe:	2100      	movs	r1, #0
 802ad00:	4809      	ldr	r0, [pc, #36]	; (802ad28 <MX_I2C2_Init+0x74>)
 802ad02:	f005 ff78 	bl	8030bf6 <HAL_I2CEx_ConfigAnalogFilter>
 802ad06:	4603      	mov	r3, r0
 802ad08:	2b00      	cmp	r3, #0
 802ad0a:	d001      	beq.n	802ad10 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 802ad0c:	f000 fa8c 	bl	802b228 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 802ad10:	2100      	movs	r1, #0
 802ad12:	4805      	ldr	r0, [pc, #20]	; (802ad28 <MX_I2C2_Init+0x74>)
 802ad14:	f005 ffba 	bl	8030c8c <HAL_I2CEx_ConfigDigitalFilter>
 802ad18:	4603      	mov	r3, r0
 802ad1a:	2b00      	cmp	r3, #0
 802ad1c:	d001      	beq.n	802ad22 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 802ad1e:	f000 fa83 	bl	802b228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 802ad22:	bf00      	nop
 802ad24:	bd80      	pop	{r7, pc}
 802ad26:	bf00      	nop
 802ad28:	240014e0 	.word	0x240014e0
 802ad2c:	40005800 	.word	0x40005800
 802ad30:	00b03fdb 	.word	0x00b03fdb

0802ad34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 802ad34:	b580      	push	{r7, lr}
 802ad36:	b0b8      	sub	sp, #224	; 0xe0
 802ad38:	af00      	add	r7, sp, #0
 802ad3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802ad3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802ad40:	2200      	movs	r2, #0
 802ad42:	601a      	str	r2, [r3, #0]
 802ad44:	605a      	str	r2, [r3, #4]
 802ad46:	609a      	str	r2, [r3, #8]
 802ad48:	60da      	str	r2, [r3, #12]
 802ad4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802ad4c:	f107 0310 	add.w	r3, r7, #16
 802ad50:	22bc      	movs	r2, #188	; 0xbc
 802ad52:	2100      	movs	r1, #0
 802ad54:	4618      	mov	r0, r3
 802ad56:	f012 fc29 	bl	803d5ac <memset>
  if(i2cHandle->Instance==I2C2)
 802ad5a:	687b      	ldr	r3, [r7, #4]
 802ad5c:	681b      	ldr	r3, [r3, #0]
 802ad5e:	4a5a      	ldr	r2, [pc, #360]	; (802aec8 <HAL_I2C_MspInit+0x194>)
 802ad60:	4293      	cmp	r3, r2
 802ad62:	f040 80ad 	bne.w	802aec0 <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 802ad66:	2308      	movs	r3, #8
 802ad68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 802ad6a:	2300      	movs	r3, #0
 802ad6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802ad70:	f107 0310 	add.w	r3, r7, #16
 802ad74:	4618      	mov	r0, r3
 802ad76:	f008 faaf 	bl	80332d8 <HAL_RCCEx_PeriphCLKConfig>
 802ad7a:	4603      	mov	r3, r0
 802ad7c:	2b00      	cmp	r3, #0
 802ad7e:	d001      	beq.n	802ad84 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 802ad80:	f000 fa52 	bl	802b228 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802ad84:	4b51      	ldr	r3, [pc, #324]	; (802aecc <HAL_I2C_MspInit+0x198>)
 802ad86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ad8a:	4a50      	ldr	r2, [pc, #320]	; (802aecc <HAL_I2C_MspInit+0x198>)
 802ad8c:	f043 0302 	orr.w	r3, r3, #2
 802ad90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802ad94:	4b4d      	ldr	r3, [pc, #308]	; (802aecc <HAL_I2C_MspInit+0x198>)
 802ad96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ad9a:	f003 0302 	and.w	r3, r3, #2
 802ad9e:	60fb      	str	r3, [r7, #12]
 802ada0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802ada2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802ada6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802adaa:	2312      	movs	r3, #18
 802adac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802adb0:	2300      	movs	r3, #0
 802adb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802adb6:	2300      	movs	r3, #0
 802adb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 802adbc:	2304      	movs	r3, #4
 802adbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802adc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802adc6:	4619      	mov	r1, r3
 802adc8:	4841      	ldr	r0, [pc, #260]	; (802aed0 <HAL_I2C_MspInit+0x19c>)
 802adca:	f004 fe35 	bl	802fa38 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 802adce:	4b3f      	ldr	r3, [pc, #252]	; (802aecc <HAL_I2C_MspInit+0x198>)
 802add0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802add4:	4a3d      	ldr	r2, [pc, #244]	; (802aecc <HAL_I2C_MspInit+0x198>)
 802add6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802adda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802adde:	4b3b      	ldr	r3, [pc, #236]	; (802aecc <HAL_I2C_MspInit+0x198>)
 802ade0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ade4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802ade8:	60bb      	str	r3, [r7, #8]
 802adea:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 802adec:	4b39      	ldr	r3, [pc, #228]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802adee:	4a3a      	ldr	r2, [pc, #232]	; (802aed8 <HAL_I2C_MspInit+0x1a4>)
 802adf0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 802adf2:	4b38      	ldr	r3, [pc, #224]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802adf4:	2223      	movs	r2, #35	; 0x23
 802adf6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802adf8:	4b36      	ldr	r3, [pc, #216]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802adfa:	2200      	movs	r2, #0
 802adfc:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802adfe:	4b35      	ldr	r3, [pc, #212]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802ae00:	2200      	movs	r2, #0
 802ae02:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 802ae04:	4b33      	ldr	r3, [pc, #204]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802ae06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802ae0a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802ae0c:	4b31      	ldr	r3, [pc, #196]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802ae0e:	2200      	movs	r2, #0
 802ae10:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802ae12:	4b30      	ldr	r3, [pc, #192]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802ae14:	2200      	movs	r2, #0
 802ae16:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 802ae18:	4b2e      	ldr	r3, [pc, #184]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802ae1a:	2200      	movs	r2, #0
 802ae1c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 802ae1e:	4b2d      	ldr	r3, [pc, #180]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802ae20:	2200      	movs	r2, #0
 802ae22:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802ae24:	4b2b      	ldr	r3, [pc, #172]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802ae26:	2200      	movs	r2, #0
 802ae28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 802ae2a:	482a      	ldr	r0, [pc, #168]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802ae2c:	f001 ffae 	bl	802cd8c <HAL_DMA_Init>
 802ae30:	4603      	mov	r3, r0
 802ae32:	2b00      	cmp	r3, #0
 802ae34:	d001      	beq.n	802ae3a <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 802ae36:	f000 f9f7 	bl	802b228 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 802ae3a:	687b      	ldr	r3, [r7, #4]
 802ae3c:	4a25      	ldr	r2, [pc, #148]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802ae3e:	63da      	str	r2, [r3, #60]	; 0x3c
 802ae40:	4a24      	ldr	r2, [pc, #144]	; (802aed4 <HAL_I2C_MspInit+0x1a0>)
 802ae42:	687b      	ldr	r3, [r7, #4]
 802ae44:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 802ae46:	4b25      	ldr	r3, [pc, #148]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae48:	4a25      	ldr	r2, [pc, #148]	; (802aee0 <HAL_I2C_MspInit+0x1ac>)
 802ae4a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 802ae4c:	4b23      	ldr	r3, [pc, #140]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae4e:	2224      	movs	r2, #36	; 0x24
 802ae50:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802ae52:	4b22      	ldr	r3, [pc, #136]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae54:	2240      	movs	r2, #64	; 0x40
 802ae56:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802ae58:	4b20      	ldr	r3, [pc, #128]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae5a:	2200      	movs	r2, #0
 802ae5c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 802ae5e:	4b1f      	ldr	r3, [pc, #124]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802ae64:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802ae66:	4b1d      	ldr	r3, [pc, #116]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae68:	2200      	movs	r2, #0
 802ae6a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802ae6c:	4b1b      	ldr	r3, [pc, #108]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae6e:	2200      	movs	r2, #0
 802ae70:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 802ae72:	4b1a      	ldr	r3, [pc, #104]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae74:	2200      	movs	r2, #0
 802ae76:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 802ae78:	4b18      	ldr	r3, [pc, #96]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae7a:	2200      	movs	r2, #0
 802ae7c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802ae7e:	4b17      	ldr	r3, [pc, #92]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae80:	2200      	movs	r2, #0
 802ae82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 802ae84:	4815      	ldr	r0, [pc, #84]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae86:	f001 ff81 	bl	802cd8c <HAL_DMA_Init>
 802ae8a:	4603      	mov	r3, r0
 802ae8c:	2b00      	cmp	r3, #0
 802ae8e:	d001      	beq.n	802ae94 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 802ae90:	f000 f9ca 	bl	802b228 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 802ae94:	687b      	ldr	r3, [r7, #4]
 802ae96:	4a11      	ldr	r2, [pc, #68]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae98:	639a      	str	r2, [r3, #56]	; 0x38
 802ae9a:	4a10      	ldr	r2, [pc, #64]	; (802aedc <HAL_I2C_MspInit+0x1a8>)
 802ae9c:	687b      	ldr	r3, [r7, #4]
 802ae9e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 802aea0:	2200      	movs	r2, #0
 802aea2:	2100      	movs	r1, #0
 802aea4:	2021      	movs	r0, #33	; 0x21
 802aea6:	f001 fd74 	bl	802c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 802aeaa:	2021      	movs	r0, #33	; 0x21
 802aeac:	f001 fd8b 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 802aeb0:	2200      	movs	r2, #0
 802aeb2:	2100      	movs	r1, #0
 802aeb4:	2022      	movs	r0, #34	; 0x22
 802aeb6:	f001 fd6c 	bl	802c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 802aeba:	2022      	movs	r0, #34	; 0x22
 802aebc:	f001 fd83 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 802aec0:	bf00      	nop
 802aec2:	37e0      	adds	r7, #224	; 0xe0
 802aec4:	46bd      	mov	sp, r7
 802aec6:	bd80      	pop	{r7, pc}
 802aec8:	40005800 	.word	0x40005800
 802aecc:	58024400 	.word	0x58024400
 802aed0:	58020400 	.word	0x58020400
 802aed4:	2400152c 	.word	0x2400152c
 802aed8:	40020010 	.word	0x40020010
 802aedc:	240015a4 	.word	0x240015a4
 802aee0:	40020028 	.word	0x40020028

0802aee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802aee4:	b590      	push	{r4, r7, lr}
 802aee6:	b08d      	sub	sp, #52	; 0x34
 802aee8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (FLASH_BASE | 0x20000);
 802aeea:	4b30      	ldr	r3, [pc, #192]	; (802afac <main+0xc8>)
 802aeec:	4a30      	ldr	r2, [pc, #192]	; (802afb0 <main+0xcc>)
 802aeee:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802aef0:	f001 f9ca 	bl	802c288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802aef4:	f000 f86e 	bl	802afd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802aef8:	f7ff fe54 	bl	802aba4 <MX_GPIO_Init>
  MX_DMA_Init();
 802aefc:	f7ff fe1a 	bl	802ab34 <MX_DMA_Init>
  MX_I2C2_Init();
 802af00:	f7ff fed8 	bl	802acb4 <MX_I2C2_Init>
  MX_SPI1_Init();
 802af04:	f000 f996 	bl	802b234 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 802af08:	f011 fd72 	bl	803c9f0 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 802af0c:	f000 ff44 	bl	802bd98 <MX_USART2_UART_Init>
  MX_UART4_Init();
 802af10:	f000 fe4c 	bl	802bbac <MX_UART4_Init>
  MX_UART7_Init();
 802af14:	f000 fe9c 	bl	802bc50 <MX_UART7_Init>
  MX_UART8_Init();
 802af18:	f000 fee8 	bl	802bcec <MX_UART8_Init>
  MX_USART3_UART_Init();
 802af1c:	f000 ff88 	bl	802be30 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 802af20:	f000 fd44 	bl	802b9ac <MX_TIM3_Init>
  MX_TIM2_Init();
 802af24:	f000 fcf4 	bl	802b910 <MX_TIM2_Init>
  MX_TIM4_Init();
 802af28:	f000 fd8e 	bl	802ba48 <MX_TIM4_Init>
  MX_COMP2_Init();
 802af2c:	f7ff fd34 	bl	802a998 <MX_COMP2_Init>
  MX_DAC1_Init();
 802af30:	f7ff fdac 	bl	802aa8c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 802af34:	2100      	movs	r1, #0
 802af36:	481f      	ldr	r0, [pc, #124]	; (802afb4 <main+0xd0>)
 802af38:	f001 fd81 	bl	802ca3e <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 802af3c:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 802af40:	2200      	movs	r2, #0
 802af42:	2100      	movs	r1, #0
 802af44:	481b      	ldr	r0, [pc, #108]	; (802afb4 <main+0xd0>)
 802af46:	f001 fdcc 	bl	802cae2 <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 802af4a:	481b      	ldr	r0, [pc, #108]	; (802afb8 <main+0xd4>)
 802af4c:	f00a feb0 	bl	8035cb0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 802af50:	481a      	ldr	r0, [pc, #104]	; (802afbc <main+0xd8>)
 802af52:	f00a fead 	bl	8035cb0 <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 802af56:	481a      	ldr	r0, [pc, #104]	; (802afc0 <main+0xdc>)
 802af58:	f001 fb82 	bl	802c660 <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 802af5c:	4b19      	ldr	r3, [pc, #100]	; (802afc4 <main+0xe0>)
 802af5e:	607b      	str	r3, [r7, #4]
	config.HeadStreamUart = &huart4;
 802af60:	4b19      	ldr	r3, [pc, #100]	; (802afc8 <main+0xe4>)
 802af62:	60bb      	str	r3, [r7, #8]

	config.HeadTimeout = 10;
 802af64:	230a      	movs	r3, #10
 802af66:	60fb      	str	r3, [r7, #12]

	config.BodyUart = &huart8;
 802af68:	4b18      	ldr	r3, [pc, #96]	; (802afcc <main+0xe8>)
 802af6a:	613b      	str	r3, [r7, #16]
	config.BodyTimeout = 10;
 802af6c:	230a      	movs	r3, #10
 802af6e:	617b      	str	r3, [r7, #20]

	config.IMUSpi = &hspi1;
 802af70:	4b17      	ldr	r3, [pc, #92]	; (802afd0 <main+0xec>)
 802af72:	61bb      	str	r3, [r7, #24]

	config.VersionMajor = 0;
 802af74:	2300      	movs	r3, #0
 802af76:	773b      	strb	r3, [r7, #28]
	config.VersionMinor = 1;
 802af78:	2301      	movs	r3, #1
 802af7a:	777b      	strb	r3, [r7, #29]

	if (MotherboardInit(config))
 802af7c:	466c      	mov	r4, sp
 802af7e:	f107 0314 	add.w	r3, r7, #20
 802af82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802af86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 802af8a:	1d3b      	adds	r3, r7, #4
 802af8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802af8e:	f7f7 fc0f 	bl	80227b0 <MotherboardInit>
 802af92:	4603      	mov	r3, r0
 802af94:	2b00      	cmp	r3, #0
 802af96:	d001      	beq.n	802af9c <main+0xb8>
		return 1;
 802af98:	2301      	movs	r3, #1
 802af9a:	e002      	b.n	802afa2 <main+0xbe>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 802af9c:	f7f7 fc56 	bl	802284c <MotherboardTick>
 802afa0:	e7fc      	b.n	802af9c <main+0xb8>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 802afa2:	4618      	mov	r0, r3
 802afa4:	3724      	adds	r7, #36	; 0x24
 802afa6:	46bd      	mov	sp, r7
 802afa8:	bd90      	pop	{r4, r7, pc}
 802afaa:	bf00      	nop
 802afac:	e000ed00 	.word	0xe000ed00
 802afb0:	08020000 	.word	0x08020000
 802afb4:	240014cc 	.word	0x240014cc
 802afb8:	240017e4 	.word	0x240017e4
 802afbc:	24001798 	.word	0x24001798
 802afc0:	240014a0 	.word	0x240014a0
 802afc4:	24001abc 	.word	0x24001abc
 802afc8:	2400187c 	.word	0x2400187c
 802afcc:	2400199c 	.word	0x2400199c
 802afd0:	2400161c 	.word	0x2400161c

0802afd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802afd4:	b580      	push	{r7, lr}
 802afd6:	b09e      	sub	sp, #120	; 0x78
 802afd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802afda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802afde:	224c      	movs	r2, #76	; 0x4c
 802afe0:	2100      	movs	r1, #0
 802afe2:	4618      	mov	r0, r3
 802afe4:	f012 fae2 	bl	803d5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802afe8:	f107 030c 	add.w	r3, r7, #12
 802afec:	2220      	movs	r2, #32
 802afee:	2100      	movs	r1, #0
 802aff0:	4618      	mov	r0, r3
 802aff2:	f012 fadb 	bl	803d5ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 802aff6:	2002      	movs	r0, #2
 802aff8:	f007 f96a 	bl	80322d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802affc:	2300      	movs	r3, #0
 802affe:	60bb      	str	r3, [r7, #8]
 802b000:	4b4d      	ldr	r3, [pc, #308]	; (802b138 <SystemClock_Config+0x164>)
 802b002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b004:	4a4c      	ldr	r2, [pc, #304]	; (802b138 <SystemClock_Config+0x164>)
 802b006:	f023 0301 	bic.w	r3, r3, #1
 802b00a:	62d3      	str	r3, [r2, #44]	; 0x2c
 802b00c:	4b4a      	ldr	r3, [pc, #296]	; (802b138 <SystemClock_Config+0x164>)
 802b00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b010:	f003 0301 	and.w	r3, r3, #1
 802b014:	60bb      	str	r3, [r7, #8]
 802b016:	4b49      	ldr	r3, [pc, #292]	; (802b13c <SystemClock_Config+0x168>)
 802b018:	699b      	ldr	r3, [r3, #24]
 802b01a:	4a48      	ldr	r2, [pc, #288]	; (802b13c <SystemClock_Config+0x168>)
 802b01c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802b020:	6193      	str	r3, [r2, #24]
 802b022:	4b46      	ldr	r3, [pc, #280]	; (802b13c <SystemClock_Config+0x168>)
 802b024:	699b      	ldr	r3, [r3, #24]
 802b026:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802b02a:	60bb      	str	r3, [r7, #8]
 802b02c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 802b02e:	bf00      	nop
 802b030:	4b42      	ldr	r3, [pc, #264]	; (802b13c <SystemClock_Config+0x168>)
 802b032:	699b      	ldr	r3, [r3, #24]
 802b034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802b038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802b03c:	d1f8      	bne.n	802b030 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802b03e:	4b40      	ldr	r3, [pc, #256]	; (802b140 <SystemClock_Config+0x16c>)
 802b040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802b044:	4a3e      	ldr	r2, [pc, #248]	; (802b140 <SystemClock_Config+0x16c>)
 802b046:	f043 0302 	orr.w	r3, r3, #2
 802b04a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802b04e:	4b3c      	ldr	r3, [pc, #240]	; (802b140 <SystemClock_Config+0x16c>)
 802b050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802b054:	f003 0302 	and.w	r3, r3, #2
 802b058:	607b      	str	r3, [r7, #4]
 802b05a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 802b05c:	2300      	movs	r3, #0
 802b05e:	603b      	str	r3, [r7, #0]
 802b060:	4b36      	ldr	r3, [pc, #216]	; (802b13c <SystemClock_Config+0x168>)
 802b062:	699b      	ldr	r3, [r3, #24]
 802b064:	4a35      	ldr	r2, [pc, #212]	; (802b13c <SystemClock_Config+0x168>)
 802b066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802b06a:	6193      	str	r3, [r2, #24]
 802b06c:	4b33      	ldr	r3, [pc, #204]	; (802b13c <SystemClock_Config+0x168>)
 802b06e:	699b      	ldr	r3, [r3, #24]
 802b070:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802b074:	603b      	str	r3, [r7, #0]
 802b076:	4b30      	ldr	r3, [pc, #192]	; (802b138 <SystemClock_Config+0x164>)
 802b078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b07a:	4a2f      	ldr	r2, [pc, #188]	; (802b138 <SystemClock_Config+0x164>)
 802b07c:	f043 0301 	orr.w	r3, r3, #1
 802b080:	62d3      	str	r3, [r2, #44]	; 0x2c
 802b082:	4b2d      	ldr	r3, [pc, #180]	; (802b138 <SystemClock_Config+0x164>)
 802b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b086:	f003 0301 	and.w	r3, r3, #1
 802b08a:	603b      	str	r3, [r7, #0]
 802b08c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 802b08e:	bf00      	nop
 802b090:	4b2a      	ldr	r3, [pc, #168]	; (802b13c <SystemClock_Config+0x168>)
 802b092:	699b      	ldr	r3, [r3, #24]
 802b094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802b098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802b09c:	d1f8      	bne.n	802b090 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 802b09e:	4b28      	ldr	r3, [pc, #160]	; (802b140 <SystemClock_Config+0x16c>)
 802b0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b0a2:	4a27      	ldr	r2, [pc, #156]	; (802b140 <SystemClock_Config+0x16c>)
 802b0a4:	f023 0303 	bic.w	r3, r3, #3
 802b0a8:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 802b0aa:	2322      	movs	r3, #34	; 0x22
 802b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 802b0ae:	2301      	movs	r3, #1
 802b0b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 802b0b2:	2340      	movs	r3, #64	; 0x40
 802b0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 802b0b6:	2301      	movs	r3, #1
 802b0b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802b0ba:	2302      	movs	r3, #2
 802b0bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 802b0be:	2300      	movs	r3, #0
 802b0c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 802b0c2:	2304      	movs	r3, #4
 802b0c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 802b0c6:	233c      	movs	r3, #60	; 0x3c
 802b0c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 802b0ca:	2302      	movs	r3, #2
 802b0cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 802b0ce:	2305      	movs	r3, #5
 802b0d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 802b0d2:	2302      	movs	r3, #2
 802b0d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 802b0d6:	230c      	movs	r3, #12
 802b0d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 802b0da:	2300      	movs	r3, #0
 802b0dc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 802b0de:	2300      	movs	r3, #0
 802b0e0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802b0e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802b0e6:	4618      	mov	r0, r3
 802b0e8:	f007 f93c 	bl	8032364 <HAL_RCC_OscConfig>
 802b0ec:	4603      	mov	r3, r0
 802b0ee:	2b00      	cmp	r3, #0
 802b0f0:	d001      	beq.n	802b0f6 <SystemClock_Config+0x122>
  {
    Error_Handler();
 802b0f2:	f000 f899 	bl	802b228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802b0f6:	233f      	movs	r3, #63	; 0x3f
 802b0f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802b0fa:	2303      	movs	r3, #3
 802b0fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 802b0fe:	2300      	movs	r3, #0
 802b100:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 802b102:	2308      	movs	r3, #8
 802b104:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 802b106:	2340      	movs	r3, #64	; 0x40
 802b108:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 802b10a:	2340      	movs	r3, #64	; 0x40
 802b10c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 802b10e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b112:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 802b114:	2340      	movs	r3, #64	; 0x40
 802b116:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 802b118:	f107 030c 	add.w	r3, r7, #12
 802b11c:	2104      	movs	r1, #4
 802b11e:	4618      	mov	r0, r3
 802b120:	f007 fd4e 	bl	8032bc0 <HAL_RCC_ClockConfig>
 802b124:	4603      	mov	r3, r0
 802b126:	2b00      	cmp	r3, #0
 802b128:	d001      	beq.n	802b12e <SystemClock_Config+0x15a>
  {
    Error_Handler();
 802b12a:	f000 f87d 	bl	802b228 <Error_Handler>
  }
}
 802b12e:	bf00      	nop
 802b130:	3778      	adds	r7, #120	; 0x78
 802b132:	46bd      	mov	sp, r7
 802b134:	bd80      	pop	{r7, pc}
 802b136:	bf00      	nop
 802b138:	58000400 	.word	0x58000400
 802b13c:	58024800 	.word	0x58024800
 802b140:	58024400 	.word	0x58024400

0802b144 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 802b144:	b580      	push	{r7, lr}
 802b146:	b082      	sub	sp, #8
 802b148:	af00      	add	r7, sp, #0
 802b14a:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 802b14c:	687b      	ldr	r3, [r7, #4]
 802b14e:	681b      	ldr	r3, [r3, #0]
 802b150:	4a04      	ldr	r2, [pc, #16]	; (802b164 <HAL_COMP_TriggerCallback+0x20>)
 802b152:	4293      	cmp	r3, r2
 802b154:	d101      	bne.n	802b15a <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 802b156:	f7f7 fc09 	bl	802296c <MotherboardOnStrobe>
	}
}
 802b15a:	bf00      	nop
 802b15c:	3708      	adds	r7, #8
 802b15e:	46bd      	mov	sp, r7
 802b160:	bd80      	pop	{r7, pc}
 802b162:	bf00      	nop
 802b164:	58003810 	.word	0x58003810

0802b168 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 802b168:	b580      	push	{r7, lr}
 802b16a:	b082      	sub	sp, #8
 802b16c:	af00      	add	r7, sp, #0
 802b16e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 802b170:	687b      	ldr	r3, [r7, #4]
 802b172:	681b      	ldr	r3, [r3, #0]
 802b174:	4a0b      	ldr	r2, [pc, #44]	; (802b1a4 <HAL_UART_RxCpltCallback+0x3c>)
 802b176:	4293      	cmp	r3, r2
 802b178:	d101      	bne.n	802b17e <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadServiceRecieveComplete();
 802b17a:	f7f7 fc17 	bl	80229ac <MotherboardOnHeadServiceRecieveComplete>
	}
	if (huart->Instance == UART4) {
 802b17e:	687b      	ldr	r3, [r7, #4]
 802b180:	681b      	ldr	r3, [r3, #0]
 802b182:	4a09      	ldr	r2, [pc, #36]	; (802b1a8 <HAL_UART_RxCpltCallback+0x40>)
 802b184:	4293      	cmp	r3, r2
 802b186:	d101      	bne.n	802b18c <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnHeadStreamRecieveComplete();
 802b188:	f7f7 fc1a 	bl	80229c0 <MotherboardOnHeadStreamRecieveComplete>
	}
	if (huart->Instance == UART8) {
 802b18c:	687b      	ldr	r3, [r7, #4]
 802b18e:	681b      	ldr	r3, [r3, #0]
 802b190:	4a06      	ldr	r2, [pc, #24]	; (802b1ac <HAL_UART_RxCpltCallback+0x44>)
 802b192:	4293      	cmp	r3, r2
 802b194:	d101      	bne.n	802b19a <HAL_UART_RxCpltCallback+0x32>
		MotherboardOnBodyRecieveComplete();
 802b196:	f7f7 fbff 	bl	8022998 <MotherboardOnBodyRecieveComplete>
	}
}
 802b19a:	bf00      	nop
 802b19c:	3708      	adds	r7, #8
 802b19e:	46bd      	mov	sp, r7
 802b1a0:	bd80      	pop	{r7, pc}
 802b1a2:	bf00      	nop
 802b1a4:	40004800 	.word	0x40004800
 802b1a8:	40004c00 	.word	0x40004c00
 802b1ac:	40007c00 	.word	0x40007c00

0802b1b0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 802b1b0:	b580      	push	{r7, lr}
 802b1b2:	b082      	sub	sp, #8
 802b1b4:	af00      	add	r7, sp, #0
 802b1b6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 802b1b8:	687b      	ldr	r3, [r7, #4]
 802b1ba:	681b      	ldr	r3, [r3, #0]
 802b1bc:	4a0b      	ldr	r2, [pc, #44]	; (802b1ec <HAL_UART_TxCpltCallback+0x3c>)
 802b1be:	4293      	cmp	r3, r2
 802b1c0:	d101      	bne.n	802b1c6 <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadServiceTransmitComplete();
 802b1c2:	f7f7 fc07 	bl	80229d4 <MotherboardOnHeadServiceTransmitComplete>
	}
	if (huart->Instance == UART4) {
 802b1c6:	687b      	ldr	r3, [r7, #4]
 802b1c8:	681b      	ldr	r3, [r3, #0]
 802b1ca:	4a09      	ldr	r2, [pc, #36]	; (802b1f0 <HAL_UART_TxCpltCallback+0x40>)
 802b1cc:	4293      	cmp	r3, r2
 802b1ce:	d101      	bne.n	802b1d4 <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnHeadStreamTransmitComplete();
 802b1d0:	f7f7 fc0a 	bl	80229e8 <MotherboardOnHeadStreamTransmitComplete>
	}
	if (huart->Instance == UART8) {
 802b1d4:	687b      	ldr	r3, [r7, #4]
 802b1d6:	681b      	ldr	r3, [r3, #0]
 802b1d8:	4a06      	ldr	r2, [pc, #24]	; (802b1f4 <HAL_UART_TxCpltCallback+0x44>)
 802b1da:	4293      	cmp	r3, r2
 802b1dc:	d101      	bne.n	802b1e2 <HAL_UART_TxCpltCallback+0x32>
		MotherboardOnBodyTransmitComplete();
 802b1de:	f7f7 fc0d 	bl	80229fc <MotherboardOnBodyTransmitComplete>
	}
}
 802b1e2:	bf00      	nop
 802b1e4:	3708      	adds	r7, #8
 802b1e6:	46bd      	mov	sp, r7
 802b1e8:	bd80      	pop	{r7, pc}
 802b1ea:	bf00      	nop
 802b1ec:	40004800 	.word	0x40004800
 802b1f0:	40004c00 	.word	0x40004c00
 802b1f4:	40007c00 	.word	0x40007c00

0802b1f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 802b1f8:	b580      	push	{r7, lr}
 802b1fa:	b082      	sub	sp, #8
 802b1fc:	af00      	add	r7, sp, #0
 802b1fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 802b200:	687b      	ldr	r3, [r7, #4]
 802b202:	681b      	ldr	r3, [r3, #0]
 802b204:	4a07      	ldr	r2, [pc, #28]	; (802b224 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 802b206:	4293      	cmp	r3, r2
 802b208:	d101      	bne.n	802b20e <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 802b20a:	f7f7 fc01 	bl	8022a10 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 802b20e:	687b      	ldr	r3, [r7, #4]
 802b210:	681b      	ldr	r3, [r3, #0]
 802b212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802b216:	d101      	bne.n	802b21c <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 802b218:	f7f7 fc04 	bl	8022a24 <MotherboardOnImuTimerTick>
}
 802b21c:	bf00      	nop
 802b21e:	3708      	adds	r7, #8
 802b220:	46bd      	mov	sp, r7
 802b222:	bd80      	pop	{r7, pc}
 802b224:	40000400 	.word	0x40000400

0802b228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802b228:	b480      	push	{r7}
 802b22a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 802b22c:	b672      	cpsid	i
}
 802b22e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 802b230:	e7fe      	b.n	802b230 <Error_Handler+0x8>
	...

0802b234 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 802b234:	b580      	push	{r7, lr}
 802b236:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 802b238:	4b28      	ldr	r3, [pc, #160]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b23a:	4a29      	ldr	r2, [pc, #164]	; (802b2e0 <MX_SPI1_Init+0xac>)
 802b23c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 802b23e:	4b27      	ldr	r3, [pc, #156]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b240:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 802b244:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 802b246:	4b25      	ldr	r3, [pc, #148]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b248:	2200      	movs	r2, #0
 802b24a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 802b24c:	4b23      	ldr	r3, [pc, #140]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b24e:	2207      	movs	r2, #7
 802b250:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 802b252:	4b22      	ldr	r3, [pc, #136]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802b258:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 802b25a:	4b20      	ldr	r3, [pc, #128]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b25c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802b260:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 802b262:	4b1e      	ldr	r3, [pc, #120]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b264:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 802b268:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 802b26a:	4b1c      	ldr	r3, [pc, #112]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b26c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802b270:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802b272:	4b1a      	ldr	r3, [pc, #104]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b274:	2200      	movs	r2, #0
 802b276:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 802b278:	4b18      	ldr	r3, [pc, #96]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b27a:	2200      	movs	r2, #0
 802b27c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802b27e:	4b17      	ldr	r3, [pc, #92]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b280:	2200      	movs	r2, #0
 802b282:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 802b284:	4b15      	ldr	r3, [pc, #84]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b286:	2200      	movs	r2, #0
 802b288:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 802b28a:	4b14      	ldr	r3, [pc, #80]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b28c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802b290:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 802b292:	4b12      	ldr	r3, [pc, #72]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b294:	2200      	movs	r2, #0
 802b296:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 802b298:	4b10      	ldr	r3, [pc, #64]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b29a:	2200      	movs	r2, #0
 802b29c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 802b29e:	4b0f      	ldr	r3, [pc, #60]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b2a0:	2200      	movs	r2, #0
 802b2a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 802b2a4:	4b0d      	ldr	r3, [pc, #52]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b2a6:	2200      	movs	r2, #0
 802b2a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 802b2aa:	4b0c      	ldr	r3, [pc, #48]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b2ac:	2200      	movs	r2, #0
 802b2ae:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 802b2b0:	4b0a      	ldr	r3, [pc, #40]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b2b2:	2200      	movs	r2, #0
 802b2b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 802b2b6:	4b09      	ldr	r3, [pc, #36]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b2b8:	2200      	movs	r2, #0
 802b2ba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 802b2bc:	4b07      	ldr	r3, [pc, #28]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b2be:	2200      	movs	r2, #0
 802b2c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 802b2c2:	4b06      	ldr	r3, [pc, #24]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b2c4:	2200      	movs	r2, #0
 802b2c6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 802b2c8:	4804      	ldr	r0, [pc, #16]	; (802b2dc <MX_SPI1_Init+0xa8>)
 802b2ca:	f009 fb6d 	bl	80349a8 <HAL_SPI_Init>
 802b2ce:	4603      	mov	r3, r0
 802b2d0:	2b00      	cmp	r3, #0
 802b2d2:	d001      	beq.n	802b2d8 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 802b2d4:	f7ff ffa8 	bl	802b228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 802b2d8:	bf00      	nop
 802b2da:	bd80      	pop	{r7, pc}
 802b2dc:	2400161c 	.word	0x2400161c
 802b2e0:	40013000 	.word	0x40013000

0802b2e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 802b2e4:	b580      	push	{r7, lr}
 802b2e6:	b0b8      	sub	sp, #224	; 0xe0
 802b2e8:	af00      	add	r7, sp, #0
 802b2ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b2ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802b2f0:	2200      	movs	r2, #0
 802b2f2:	601a      	str	r2, [r3, #0]
 802b2f4:	605a      	str	r2, [r3, #4]
 802b2f6:	609a      	str	r2, [r3, #8]
 802b2f8:	60da      	str	r2, [r3, #12]
 802b2fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802b2fc:	f107 0310 	add.w	r3, r7, #16
 802b300:	22bc      	movs	r2, #188	; 0xbc
 802b302:	2100      	movs	r1, #0
 802b304:	4618      	mov	r0, r3
 802b306:	f012 f951 	bl	803d5ac <memset>
  if(spiHandle->Instance==SPI1)
 802b30a:	687b      	ldr	r3, [r7, #4]
 802b30c:	681b      	ldr	r3, [r3, #0]
 802b30e:	4a60      	ldr	r2, [pc, #384]	; (802b490 <HAL_SPI_MspInit+0x1ac>)
 802b310:	4293      	cmp	r3, r2
 802b312:	f040 80b8 	bne.w	802b486 <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 802b316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802b31a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 802b31c:	2320      	movs	r3, #32
 802b31e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 802b320:	2381      	movs	r3, #129	; 0x81
 802b322:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 802b324:	2302      	movs	r3, #2
 802b326:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 802b328:	2302      	movs	r3, #2
 802b32a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 802b32c:	2302      	movs	r3, #2
 802b32e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 802b330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b334:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 802b336:	2300      	movs	r3, #0
 802b338:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 802b33a:	2300      	movs	r3, #0
 802b33c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 802b33e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802b342:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802b344:	f107 0310 	add.w	r3, r7, #16
 802b348:	4618      	mov	r0, r3
 802b34a:	f007 ffc5 	bl	80332d8 <HAL_RCCEx_PeriphCLKConfig>
 802b34e:	4603      	mov	r3, r0
 802b350:	2b00      	cmp	r3, #0
 802b352:	d001      	beq.n	802b358 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 802b354:	f7ff ff68 	bl	802b228 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 802b358:	4b4e      	ldr	r3, [pc, #312]	; (802b494 <HAL_SPI_MspInit+0x1b0>)
 802b35a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802b35e:	4a4d      	ldr	r2, [pc, #308]	; (802b494 <HAL_SPI_MspInit+0x1b0>)
 802b360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802b364:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 802b368:	4b4a      	ldr	r3, [pc, #296]	; (802b494 <HAL_SPI_MspInit+0x1b0>)
 802b36a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802b36e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802b372:	60fb      	str	r3, [r7, #12]
 802b374:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802b376:	4b47      	ldr	r3, [pc, #284]	; (802b494 <HAL_SPI_MspInit+0x1b0>)
 802b378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802b37c:	4a45      	ldr	r2, [pc, #276]	; (802b494 <HAL_SPI_MspInit+0x1b0>)
 802b37e:	f043 0301 	orr.w	r3, r3, #1
 802b382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802b386:	4b43      	ldr	r3, [pc, #268]	; (802b494 <HAL_SPI_MspInit+0x1b0>)
 802b388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802b38c:	f003 0301 	and.w	r3, r3, #1
 802b390:	60bb      	str	r3, [r7, #8]
 802b392:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 802b394:	23e0      	movs	r3, #224	; 0xe0
 802b396:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802b39a:	2302      	movs	r3, #2
 802b39c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b3a0:	2300      	movs	r3, #0
 802b3a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802b3a6:	2300      	movs	r3, #0
 802b3a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802b3ac:	2305      	movs	r3, #5
 802b3ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802b3b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802b3b6:	4619      	mov	r1, r3
 802b3b8:	4837      	ldr	r0, [pc, #220]	; (802b498 <HAL_SPI_MspInit+0x1b4>)
 802b3ba:	f004 fb3d 	bl	802fa38 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 802b3be:	4b37      	ldr	r3, [pc, #220]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b3c0:	4a37      	ldr	r2, [pc, #220]	; (802b4a0 <HAL_SPI_MspInit+0x1bc>)
 802b3c2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 802b3c4:	4b35      	ldr	r3, [pc, #212]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b3c6:	2226      	movs	r2, #38	; 0x26
 802b3c8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802b3ca:	4b34      	ldr	r3, [pc, #208]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b3cc:	2240      	movs	r2, #64	; 0x40
 802b3ce:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802b3d0:	4b32      	ldr	r3, [pc, #200]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b3d2:	2200      	movs	r2, #0
 802b3d4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 802b3d6:	4b31      	ldr	r3, [pc, #196]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b3d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802b3dc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802b3de:	4b2f      	ldr	r3, [pc, #188]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b3e0:	2200      	movs	r2, #0
 802b3e2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802b3e4:	4b2d      	ldr	r3, [pc, #180]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b3e6:	2200      	movs	r2, #0
 802b3e8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 802b3ea:	4b2c      	ldr	r3, [pc, #176]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b3ec:	2200      	movs	r2, #0
 802b3ee:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 802b3f0:	4b2a      	ldr	r3, [pc, #168]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b3f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802b3f6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802b3f8:	4b28      	ldr	r3, [pc, #160]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b3fa:	2200      	movs	r2, #0
 802b3fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 802b3fe:	4827      	ldr	r0, [pc, #156]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b400:	f001 fcc4 	bl	802cd8c <HAL_DMA_Init>
 802b404:	4603      	mov	r3, r0
 802b406:	2b00      	cmp	r3, #0
 802b408:	d001      	beq.n	802b40e <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 802b40a:	f7ff ff0d 	bl	802b228 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 802b40e:	687b      	ldr	r3, [r7, #4]
 802b410:	4a22      	ldr	r2, [pc, #136]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b412:	679a      	str	r2, [r3, #120]	; 0x78
 802b414:	4a21      	ldr	r2, [pc, #132]	; (802b49c <HAL_SPI_MspInit+0x1b8>)
 802b416:	687b      	ldr	r3, [r7, #4]
 802b418:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 802b41a:	4b22      	ldr	r3, [pc, #136]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b41c:	4a22      	ldr	r2, [pc, #136]	; (802b4a8 <HAL_SPI_MspInit+0x1c4>)
 802b41e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 802b420:	4b20      	ldr	r3, [pc, #128]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b422:	2225      	movs	r2, #37	; 0x25
 802b424:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802b426:	4b1f      	ldr	r3, [pc, #124]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b428:	2200      	movs	r2, #0
 802b42a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802b42c:	4b1d      	ldr	r3, [pc, #116]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b42e:	2200      	movs	r2, #0
 802b430:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 802b432:	4b1c      	ldr	r3, [pc, #112]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802b438:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802b43a:	4b1a      	ldr	r3, [pc, #104]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b43c:	2200      	movs	r2, #0
 802b43e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802b440:	4b18      	ldr	r3, [pc, #96]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b442:	2200      	movs	r2, #0
 802b444:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 802b446:	4b17      	ldr	r3, [pc, #92]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b448:	2200      	movs	r2, #0
 802b44a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 802b44c:	4b15      	ldr	r3, [pc, #84]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b44e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802b452:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802b454:	4b13      	ldr	r3, [pc, #76]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b456:	2200      	movs	r2, #0
 802b458:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 802b45a:	4812      	ldr	r0, [pc, #72]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b45c:	f001 fc96 	bl	802cd8c <HAL_DMA_Init>
 802b460:	4603      	mov	r3, r0
 802b462:	2b00      	cmp	r3, #0
 802b464:	d001      	beq.n	802b46a <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 802b466:	f7ff fedf 	bl	802b228 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 802b46a:	687b      	ldr	r3, [r7, #4]
 802b46c:	4a0d      	ldr	r2, [pc, #52]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b46e:	67da      	str	r2, [r3, #124]	; 0x7c
 802b470:	4a0c      	ldr	r2, [pc, #48]	; (802b4a4 <HAL_SPI_MspInit+0x1c0>)
 802b472:	687b      	ldr	r3, [r7, #4]
 802b474:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 802b476:	2200      	movs	r2, #0
 802b478:	2100      	movs	r1, #0
 802b47a:	2023      	movs	r0, #35	; 0x23
 802b47c:	f001 fa89 	bl	802c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 802b480:	2023      	movs	r0, #35	; 0x23
 802b482:	f001 faa0 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 802b486:	bf00      	nop
 802b488:	37e0      	adds	r7, #224	; 0xe0
 802b48a:	46bd      	mov	sp, r7
 802b48c:	bd80      	pop	{r7, pc}
 802b48e:	bf00      	nop
 802b490:	40013000 	.word	0x40013000
 802b494:	58024400 	.word	0x58024400
 802b498:	58020000 	.word	0x58020000
 802b49c:	240016a4 	.word	0x240016a4
 802b4a0:	40020070 	.word	0x40020070
 802b4a4:	2400171c 	.word	0x2400171c
 802b4a8:	40020088 	.word	0x40020088

0802b4ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802b4ac:	b480      	push	{r7}
 802b4ae:	b083      	sub	sp, #12
 802b4b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802b4b2:	4b0a      	ldr	r3, [pc, #40]	; (802b4dc <HAL_MspInit+0x30>)
 802b4b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802b4b8:	4a08      	ldr	r2, [pc, #32]	; (802b4dc <HAL_MspInit+0x30>)
 802b4ba:	f043 0302 	orr.w	r3, r3, #2
 802b4be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802b4c2:	4b06      	ldr	r3, [pc, #24]	; (802b4dc <HAL_MspInit+0x30>)
 802b4c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802b4c8:	f003 0302 	and.w	r3, r3, #2
 802b4cc:	607b      	str	r3, [r7, #4]
 802b4ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802b4d0:	bf00      	nop
 802b4d2:	370c      	adds	r7, #12
 802b4d4:	46bd      	mov	sp, r7
 802b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4da:	4770      	bx	lr
 802b4dc:	58024400 	.word	0x58024400

0802b4e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802b4e0:	b480      	push	{r7}
 802b4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 802b4e4:	e7fe      	b.n	802b4e4 <NMI_Handler+0x4>

0802b4e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802b4e6:	b480      	push	{r7}
 802b4e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802b4ea:	e7fe      	b.n	802b4ea <HardFault_Handler+0x4>

0802b4ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802b4ec:	b480      	push	{r7}
 802b4ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802b4f0:	e7fe      	b.n	802b4f0 <MemManage_Handler+0x4>

0802b4f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802b4f2:	b480      	push	{r7}
 802b4f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802b4f6:	e7fe      	b.n	802b4f6 <BusFault_Handler+0x4>

0802b4f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802b4f8:	b480      	push	{r7}
 802b4fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802b4fc:	e7fe      	b.n	802b4fc <UsageFault_Handler+0x4>

0802b4fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802b4fe:	b480      	push	{r7}
 802b500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802b502:	bf00      	nop
 802b504:	46bd      	mov	sp, r7
 802b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b50a:	4770      	bx	lr

0802b50c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802b50c:	b480      	push	{r7}
 802b50e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802b510:	bf00      	nop
 802b512:	46bd      	mov	sp, r7
 802b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b518:	4770      	bx	lr

0802b51a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802b51a:	b480      	push	{r7}
 802b51c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802b51e:	bf00      	nop
 802b520:	46bd      	mov	sp, r7
 802b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b526:	4770      	bx	lr

0802b528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802b528:	b580      	push	{r7, lr}
 802b52a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802b52c:	f000 ff1e 	bl	802c36c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802b530:	bf00      	nop
 802b532:	bd80      	pop	{r7, pc}

0802b534 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 802b534:	b580      	push	{r7, lr}
 802b536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 802b538:	4802      	ldr	r0, [pc, #8]	; (802b544 <DMA1_Stream0_IRQHandler+0x10>)
 802b53a:	f002 ff51 	bl	802e3e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 802b53e:	bf00      	nop
 802b540:	bd80      	pop	{r7, pc}
 802b542:	bf00      	nop
 802b544:	2400152c 	.word	0x2400152c

0802b548 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 802b548:	b580      	push	{r7, lr}
 802b54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 802b54c:	4802      	ldr	r0, [pc, #8]	; (802b558 <DMA1_Stream1_IRQHandler+0x10>)
 802b54e:	f002 ff47 	bl	802e3e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 802b552:	bf00      	nop
 802b554:	bd80      	pop	{r7, pc}
 802b556:	bf00      	nop
 802b558:	240015a4 	.word	0x240015a4

0802b55c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 802b55c:	b580      	push	{r7, lr}
 802b55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 802b560:	4802      	ldr	r0, [pc, #8]	; (802b56c <DMA1_Stream4_IRQHandler+0x10>)
 802b562:	f002 ff3d 	bl	802e3e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 802b566:	bf00      	nop
 802b568:	bd80      	pop	{r7, pc}
 802b56a:	bf00      	nop
 802b56c:	240016a4 	.word	0x240016a4

0802b570 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 802b570:	b580      	push	{r7, lr}
 802b572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 802b574:	4802      	ldr	r0, [pc, #8]	; (802b580 <DMA1_Stream5_IRQHandler+0x10>)
 802b576:	f002 ff33 	bl	802e3e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 802b57a:	bf00      	nop
 802b57c:	bd80      	pop	{r7, pc}
 802b57e:	bf00      	nop
 802b580:	2400171c 	.word	0x2400171c

0802b584 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 802b584:	b580      	push	{r7, lr}
 802b586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 802b588:	4802      	ldr	r0, [pc, #8]	; (802b594 <TIM2_IRQHandler+0x10>)
 802b58a:	f00a fc09 	bl	8035da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 802b58e:	bf00      	nop
 802b590:	bd80      	pop	{r7, pc}
 802b592:	bf00      	nop
 802b594:	24001798 	.word	0x24001798

0802b598 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 802b598:	b580      	push	{r7, lr}
 802b59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 802b59c:	4802      	ldr	r0, [pc, #8]	; (802b5a8 <TIM3_IRQHandler+0x10>)
 802b59e:	f00a fbff 	bl	8035da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 802b5a2:	bf00      	nop
 802b5a4:	bd80      	pop	{r7, pc}
 802b5a6:	bf00      	nop
 802b5a8:	240017e4 	.word	0x240017e4

0802b5ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 802b5ac:	b580      	push	{r7, lr}
 802b5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 802b5b0:	4802      	ldr	r0, [pc, #8]	; (802b5bc <TIM4_IRQHandler+0x10>)
 802b5b2:	f00a fbf5 	bl	8035da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 802b5b6:	bf00      	nop
 802b5b8:	bd80      	pop	{r7, pc}
 802b5ba:	bf00      	nop
 802b5bc:	24001830 	.word	0x24001830

0802b5c0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 802b5c0:	b580      	push	{r7, lr}
 802b5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 802b5c4:	4802      	ldr	r0, [pc, #8]	; (802b5d0 <I2C2_EV_IRQHandler+0x10>)
 802b5c6:	f004 fc91 	bl	802feec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 802b5ca:	bf00      	nop
 802b5cc:	bd80      	pop	{r7, pc}
 802b5ce:	bf00      	nop
 802b5d0:	240014e0 	.word	0x240014e0

0802b5d4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 802b5d4:	b580      	push	{r7, lr}
 802b5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 802b5d8:	4802      	ldr	r0, [pc, #8]	; (802b5e4 <I2C2_ER_IRQHandler+0x10>)
 802b5da:	f004 fca1 	bl	802ff20 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 802b5de:	bf00      	nop
 802b5e0:	bd80      	pop	{r7, pc}
 802b5e2:	bf00      	nop
 802b5e4:	240014e0 	.word	0x240014e0

0802b5e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 802b5e8:	b580      	push	{r7, lr}
 802b5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802b5ec:	4802      	ldr	r0, [pc, #8]	; (802b5f8 <SPI1_IRQHandler+0x10>)
 802b5ee:	f009 ff5d 	bl	80354ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 802b5f2:	bf00      	nop
 802b5f4:	bd80      	pop	{r7, pc}
 802b5f6:	bf00      	nop
 802b5f8:	2400161c 	.word	0x2400161c

0802b5fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 802b5fc:	b580      	push	{r7, lr}
 802b5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 802b600:	4802      	ldr	r0, [pc, #8]	; (802b60c <USART3_IRQHandler+0x10>)
 802b602:	f00b fa13 	bl	8036a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 802b606:	bf00      	nop
 802b608:	bd80      	pop	{r7, pc}
 802b60a:	bf00      	nop
 802b60c:	24001abc 	.word	0x24001abc

0802b610 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 802b610:	b580      	push	{r7, lr}
 802b612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 802b614:	4802      	ldr	r0, [pc, #8]	; (802b620 <UART4_IRQHandler+0x10>)
 802b616:	f00b fa09 	bl	8036a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 802b61a:	bf00      	nop
 802b61c:	bd80      	pop	{r7, pc}
 802b61e:	bf00      	nop
 802b620:	2400187c 	.word	0x2400187c

0802b624 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 802b624:	b580      	push	{r7, lr}
 802b626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 802b628:	4802      	ldr	r0, [pc, #8]	; (802b634 <UART8_IRQHandler+0x10>)
 802b62a:	f00b f9ff 	bl	8036a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 802b62e:	bf00      	nop
 802b630:	bd80      	pop	{r7, pc}
 802b632:	bf00      	nop
 802b634:	2400199c 	.word	0x2400199c

0802b638 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 802b638:	b580      	push	{r7, lr}
 802b63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 802b63c:	4802      	ldr	r0, [pc, #8]	; (802b648 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 802b63e:	f005 fcc8 	bl	8030fd2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 802b642:	bf00      	nop
 802b644:	bd80      	pop	{r7, pc}
 802b646:	bf00      	nop
 802b648:	24003030 	.word	0x24003030

0802b64c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 802b64c:	b580      	push	{r7, lr}
 802b64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 802b650:	4802      	ldr	r0, [pc, #8]	; (802b65c <OTG_FS_IRQHandler+0x10>)
 802b652:	f005 fcbe 	bl	8030fd2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 802b656:	bf00      	nop
 802b658:	bd80      	pop	{r7, pc}
 802b65a:	bf00      	nop
 802b65c:	24003030 	.word	0x24003030

0802b660 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 802b660:	b580      	push	{r7, lr}
 802b662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 802b664:	4802      	ldr	r0, [pc, #8]	; (802b670 <COMP1_IRQHandler+0x10>)
 802b666:	f001 f845 	bl	802c6f4 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 802b66a:	bf00      	nop
 802b66c:	bd80      	pop	{r7, pc}
 802b66e:	bf00      	nop
 802b670:	240014a0 	.word	0x240014a0

0802b674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 802b674:	b480      	push	{r7}
 802b676:	af00      	add	r7, sp, #0
	return 1;
 802b678:	2301      	movs	r3, #1
}
 802b67a:	4618      	mov	r0, r3
 802b67c:	46bd      	mov	sp, r7
 802b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b682:	4770      	bx	lr

0802b684 <_kill>:

int _kill(int pid, int sig)
{
 802b684:	b580      	push	{r7, lr}
 802b686:	b082      	sub	sp, #8
 802b688:	af00      	add	r7, sp, #0
 802b68a:	6078      	str	r0, [r7, #4]
 802b68c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 802b68e:	f011 ff19 	bl	803d4c4 <__errno>
 802b692:	4603      	mov	r3, r0
 802b694:	2216      	movs	r2, #22
 802b696:	601a      	str	r2, [r3, #0]
	return -1;
 802b698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802b69c:	4618      	mov	r0, r3
 802b69e:	3708      	adds	r7, #8
 802b6a0:	46bd      	mov	sp, r7
 802b6a2:	bd80      	pop	{r7, pc}

0802b6a4 <_exit>:

void _exit (int status)
{
 802b6a4:	b580      	push	{r7, lr}
 802b6a6:	b082      	sub	sp, #8
 802b6a8:	af00      	add	r7, sp, #0
 802b6aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 802b6ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802b6b0:	6878      	ldr	r0, [r7, #4]
 802b6b2:	f7ff ffe7 	bl	802b684 <_kill>
	while (1) {}		/* Make sure we hang here */
 802b6b6:	e7fe      	b.n	802b6b6 <_exit+0x12>

0802b6b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802b6b8:	b580      	push	{r7, lr}
 802b6ba:	b086      	sub	sp, #24
 802b6bc:	af00      	add	r7, sp, #0
 802b6be:	60f8      	str	r0, [r7, #12]
 802b6c0:	60b9      	str	r1, [r7, #8]
 802b6c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802b6c4:	2300      	movs	r3, #0
 802b6c6:	617b      	str	r3, [r7, #20]
 802b6c8:	e00a      	b.n	802b6e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 802b6ca:	f3af 8000 	nop.w
 802b6ce:	4601      	mov	r1, r0
 802b6d0:	68bb      	ldr	r3, [r7, #8]
 802b6d2:	1c5a      	adds	r2, r3, #1
 802b6d4:	60ba      	str	r2, [r7, #8]
 802b6d6:	b2ca      	uxtb	r2, r1
 802b6d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802b6da:	697b      	ldr	r3, [r7, #20]
 802b6dc:	3301      	adds	r3, #1
 802b6de:	617b      	str	r3, [r7, #20]
 802b6e0:	697a      	ldr	r2, [r7, #20]
 802b6e2:	687b      	ldr	r3, [r7, #4]
 802b6e4:	429a      	cmp	r2, r3
 802b6e6:	dbf0      	blt.n	802b6ca <_read+0x12>
	}

return len;
 802b6e8:	687b      	ldr	r3, [r7, #4]
}
 802b6ea:	4618      	mov	r0, r3
 802b6ec:	3718      	adds	r7, #24
 802b6ee:	46bd      	mov	sp, r7
 802b6f0:	bd80      	pop	{r7, pc}

0802b6f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802b6f2:	b580      	push	{r7, lr}
 802b6f4:	b086      	sub	sp, #24
 802b6f6:	af00      	add	r7, sp, #0
 802b6f8:	60f8      	str	r0, [r7, #12]
 802b6fa:	60b9      	str	r1, [r7, #8]
 802b6fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802b6fe:	2300      	movs	r3, #0
 802b700:	617b      	str	r3, [r7, #20]
 802b702:	e009      	b.n	802b718 <_write+0x26>
	{
		__io_putchar(*ptr++);
 802b704:	68bb      	ldr	r3, [r7, #8]
 802b706:	1c5a      	adds	r2, r3, #1
 802b708:	60ba      	str	r2, [r7, #8]
 802b70a:	781b      	ldrb	r3, [r3, #0]
 802b70c:	4618      	mov	r0, r3
 802b70e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802b712:	697b      	ldr	r3, [r7, #20]
 802b714:	3301      	adds	r3, #1
 802b716:	617b      	str	r3, [r7, #20]
 802b718:	697a      	ldr	r2, [r7, #20]
 802b71a:	687b      	ldr	r3, [r7, #4]
 802b71c:	429a      	cmp	r2, r3
 802b71e:	dbf1      	blt.n	802b704 <_write+0x12>
	}
	return len;
 802b720:	687b      	ldr	r3, [r7, #4]
}
 802b722:	4618      	mov	r0, r3
 802b724:	3718      	adds	r7, #24
 802b726:	46bd      	mov	sp, r7
 802b728:	bd80      	pop	{r7, pc}

0802b72a <_close>:

int _close(int file)
{
 802b72a:	b480      	push	{r7}
 802b72c:	b083      	sub	sp, #12
 802b72e:	af00      	add	r7, sp, #0
 802b730:	6078      	str	r0, [r7, #4]
	return -1;
 802b732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802b736:	4618      	mov	r0, r3
 802b738:	370c      	adds	r7, #12
 802b73a:	46bd      	mov	sp, r7
 802b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b740:	4770      	bx	lr

0802b742 <_fstat>:


int _fstat(int file, struct stat *st)
{
 802b742:	b480      	push	{r7}
 802b744:	b083      	sub	sp, #12
 802b746:	af00      	add	r7, sp, #0
 802b748:	6078      	str	r0, [r7, #4]
 802b74a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 802b74c:	683b      	ldr	r3, [r7, #0]
 802b74e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802b752:	605a      	str	r2, [r3, #4]
	return 0;
 802b754:	2300      	movs	r3, #0
}
 802b756:	4618      	mov	r0, r3
 802b758:	370c      	adds	r7, #12
 802b75a:	46bd      	mov	sp, r7
 802b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b760:	4770      	bx	lr

0802b762 <_isatty>:

int _isatty(int file)
{
 802b762:	b480      	push	{r7}
 802b764:	b083      	sub	sp, #12
 802b766:	af00      	add	r7, sp, #0
 802b768:	6078      	str	r0, [r7, #4]
	return 1;
 802b76a:	2301      	movs	r3, #1
}
 802b76c:	4618      	mov	r0, r3
 802b76e:	370c      	adds	r7, #12
 802b770:	46bd      	mov	sp, r7
 802b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b776:	4770      	bx	lr

0802b778 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802b778:	b480      	push	{r7}
 802b77a:	b085      	sub	sp, #20
 802b77c:	af00      	add	r7, sp, #0
 802b77e:	60f8      	str	r0, [r7, #12]
 802b780:	60b9      	str	r1, [r7, #8]
 802b782:	607a      	str	r2, [r7, #4]
	return 0;
 802b784:	2300      	movs	r3, #0
}
 802b786:	4618      	mov	r0, r3
 802b788:	3714      	adds	r7, #20
 802b78a:	46bd      	mov	sp, r7
 802b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b790:	4770      	bx	lr
	...

0802b794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802b794:	b580      	push	{r7, lr}
 802b796:	b086      	sub	sp, #24
 802b798:	af00      	add	r7, sp, #0
 802b79a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802b79c:	4a14      	ldr	r2, [pc, #80]	; (802b7f0 <_sbrk+0x5c>)
 802b79e:	4b15      	ldr	r3, [pc, #84]	; (802b7f4 <_sbrk+0x60>)
 802b7a0:	1ad3      	subs	r3, r2, r3
 802b7a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802b7a4:	697b      	ldr	r3, [r7, #20]
 802b7a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802b7a8:	4b13      	ldr	r3, [pc, #76]	; (802b7f8 <_sbrk+0x64>)
 802b7aa:	681b      	ldr	r3, [r3, #0]
 802b7ac:	2b00      	cmp	r3, #0
 802b7ae:	d102      	bne.n	802b7b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802b7b0:	4b11      	ldr	r3, [pc, #68]	; (802b7f8 <_sbrk+0x64>)
 802b7b2:	4a12      	ldr	r2, [pc, #72]	; (802b7fc <_sbrk+0x68>)
 802b7b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802b7b6:	4b10      	ldr	r3, [pc, #64]	; (802b7f8 <_sbrk+0x64>)
 802b7b8:	681a      	ldr	r2, [r3, #0]
 802b7ba:	687b      	ldr	r3, [r7, #4]
 802b7bc:	4413      	add	r3, r2
 802b7be:	693a      	ldr	r2, [r7, #16]
 802b7c0:	429a      	cmp	r2, r3
 802b7c2:	d207      	bcs.n	802b7d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 802b7c4:	f011 fe7e 	bl	803d4c4 <__errno>
 802b7c8:	4603      	mov	r3, r0
 802b7ca:	220c      	movs	r2, #12
 802b7cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802b7ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802b7d2:	e009      	b.n	802b7e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802b7d4:	4b08      	ldr	r3, [pc, #32]	; (802b7f8 <_sbrk+0x64>)
 802b7d6:	681b      	ldr	r3, [r3, #0]
 802b7d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802b7da:	4b07      	ldr	r3, [pc, #28]	; (802b7f8 <_sbrk+0x64>)
 802b7dc:	681a      	ldr	r2, [r3, #0]
 802b7de:	687b      	ldr	r3, [r7, #4]
 802b7e0:	4413      	add	r3, r2
 802b7e2:	4a05      	ldr	r2, [pc, #20]	; (802b7f8 <_sbrk+0x64>)
 802b7e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802b7e6:	68fb      	ldr	r3, [r7, #12]
}
 802b7e8:	4618      	mov	r0, r3
 802b7ea:	3718      	adds	r7, #24
 802b7ec:	46bd      	mov	sp, r7
 802b7ee:	bd80      	pop	{r7, pc}
 802b7f0:	24080000 	.word	0x24080000
 802b7f4:	00000400 	.word	0x00000400
 802b7f8:	24001794 	.word	0x24001794
 802b7fc:	24003770 	.word	0x24003770

0802b800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 802b800:	b480      	push	{r7}
 802b802:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 802b804:	4b37      	ldr	r3, [pc, #220]	; (802b8e4 <SystemInit+0xe4>)
 802b806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802b80a:	4a36      	ldr	r2, [pc, #216]	; (802b8e4 <SystemInit+0xe4>)
 802b80c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802b810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802b814:	4b34      	ldr	r3, [pc, #208]	; (802b8e8 <SystemInit+0xe8>)
 802b816:	681b      	ldr	r3, [r3, #0]
 802b818:	f003 030f 	and.w	r3, r3, #15
 802b81c:	2b06      	cmp	r3, #6
 802b81e:	d807      	bhi.n	802b830 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802b820:	4b31      	ldr	r3, [pc, #196]	; (802b8e8 <SystemInit+0xe8>)
 802b822:	681b      	ldr	r3, [r3, #0]
 802b824:	f023 030f 	bic.w	r3, r3, #15
 802b828:	4a2f      	ldr	r2, [pc, #188]	; (802b8e8 <SystemInit+0xe8>)
 802b82a:	f043 0307 	orr.w	r3, r3, #7
 802b82e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 802b830:	4b2e      	ldr	r3, [pc, #184]	; (802b8ec <SystemInit+0xec>)
 802b832:	681b      	ldr	r3, [r3, #0]
 802b834:	4a2d      	ldr	r2, [pc, #180]	; (802b8ec <SystemInit+0xec>)
 802b836:	f043 0301 	orr.w	r3, r3, #1
 802b83a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 802b83c:	4b2b      	ldr	r3, [pc, #172]	; (802b8ec <SystemInit+0xec>)
 802b83e:	2200      	movs	r2, #0
 802b840:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 802b842:	4b2a      	ldr	r3, [pc, #168]	; (802b8ec <SystemInit+0xec>)
 802b844:	681a      	ldr	r2, [r3, #0]
 802b846:	4929      	ldr	r1, [pc, #164]	; (802b8ec <SystemInit+0xec>)
 802b848:	4b29      	ldr	r3, [pc, #164]	; (802b8f0 <SystemInit+0xf0>)
 802b84a:	4013      	ands	r3, r2
 802b84c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802b84e:	4b26      	ldr	r3, [pc, #152]	; (802b8e8 <SystemInit+0xe8>)
 802b850:	681b      	ldr	r3, [r3, #0]
 802b852:	f003 0308 	and.w	r3, r3, #8
 802b856:	2b00      	cmp	r3, #0
 802b858:	d007      	beq.n	802b86a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802b85a:	4b23      	ldr	r3, [pc, #140]	; (802b8e8 <SystemInit+0xe8>)
 802b85c:	681b      	ldr	r3, [r3, #0]
 802b85e:	f023 030f 	bic.w	r3, r3, #15
 802b862:	4a21      	ldr	r2, [pc, #132]	; (802b8e8 <SystemInit+0xe8>)
 802b864:	f043 0307 	orr.w	r3, r3, #7
 802b868:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 802b86a:	4b20      	ldr	r3, [pc, #128]	; (802b8ec <SystemInit+0xec>)
 802b86c:	2200      	movs	r2, #0
 802b86e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 802b870:	4b1e      	ldr	r3, [pc, #120]	; (802b8ec <SystemInit+0xec>)
 802b872:	2200      	movs	r2, #0
 802b874:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 802b876:	4b1d      	ldr	r3, [pc, #116]	; (802b8ec <SystemInit+0xec>)
 802b878:	2200      	movs	r2, #0
 802b87a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 802b87c:	4b1b      	ldr	r3, [pc, #108]	; (802b8ec <SystemInit+0xec>)
 802b87e:	4a1d      	ldr	r2, [pc, #116]	; (802b8f4 <SystemInit+0xf4>)
 802b880:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802b882:	4b1a      	ldr	r3, [pc, #104]	; (802b8ec <SystemInit+0xec>)
 802b884:	4a1c      	ldr	r2, [pc, #112]	; (802b8f8 <SystemInit+0xf8>)
 802b886:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 802b888:	4b18      	ldr	r3, [pc, #96]	; (802b8ec <SystemInit+0xec>)
 802b88a:	4a1c      	ldr	r2, [pc, #112]	; (802b8fc <SystemInit+0xfc>)
 802b88c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802b88e:	4b17      	ldr	r3, [pc, #92]	; (802b8ec <SystemInit+0xec>)
 802b890:	2200      	movs	r2, #0
 802b892:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 802b894:	4b15      	ldr	r3, [pc, #84]	; (802b8ec <SystemInit+0xec>)
 802b896:	4a19      	ldr	r2, [pc, #100]	; (802b8fc <SystemInit+0xfc>)
 802b898:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 802b89a:	4b14      	ldr	r3, [pc, #80]	; (802b8ec <SystemInit+0xec>)
 802b89c:	2200      	movs	r2, #0
 802b89e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 802b8a0:	4b12      	ldr	r3, [pc, #72]	; (802b8ec <SystemInit+0xec>)
 802b8a2:	4a16      	ldr	r2, [pc, #88]	; (802b8fc <SystemInit+0xfc>)
 802b8a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 802b8a6:	4b11      	ldr	r3, [pc, #68]	; (802b8ec <SystemInit+0xec>)
 802b8a8:	2200      	movs	r2, #0
 802b8aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 802b8ac:	4b0f      	ldr	r3, [pc, #60]	; (802b8ec <SystemInit+0xec>)
 802b8ae:	681b      	ldr	r3, [r3, #0]
 802b8b0:	4a0e      	ldr	r2, [pc, #56]	; (802b8ec <SystemInit+0xec>)
 802b8b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802b8b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 802b8b8:	4b0c      	ldr	r3, [pc, #48]	; (802b8ec <SystemInit+0xec>)
 802b8ba:	2200      	movs	r2, #0
 802b8bc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 802b8be:	4b10      	ldr	r3, [pc, #64]	; (802b900 <SystemInit+0x100>)
 802b8c0:	681a      	ldr	r2, [r3, #0]
 802b8c2:	4b10      	ldr	r3, [pc, #64]	; (802b904 <SystemInit+0x104>)
 802b8c4:	4013      	ands	r3, r2
 802b8c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802b8ca:	d202      	bcs.n	802b8d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 802b8cc:	4b0e      	ldr	r3, [pc, #56]	; (802b908 <SystemInit+0x108>)
 802b8ce:	2201      	movs	r2, #1
 802b8d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 802b8d2:	4b0e      	ldr	r3, [pc, #56]	; (802b90c <SystemInit+0x10c>)
 802b8d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 802b8d8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 802b8da:	bf00      	nop
 802b8dc:	46bd      	mov	sp, r7
 802b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8e2:	4770      	bx	lr
 802b8e4:	e000ed00 	.word	0xe000ed00
 802b8e8:	52002000 	.word	0x52002000
 802b8ec:	58024400 	.word	0x58024400
 802b8f0:	eaf6ed7f 	.word	0xeaf6ed7f
 802b8f4:	02020200 	.word	0x02020200
 802b8f8:	01ff0000 	.word	0x01ff0000
 802b8fc:	01010280 	.word	0x01010280
 802b900:	5c001000 	.word	0x5c001000
 802b904:	ffff0000 	.word	0xffff0000
 802b908:	51008108 	.word	0x51008108
 802b90c:	52004000 	.word	0x52004000

0802b910 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 802b910:	b580      	push	{r7, lr}
 802b912:	b088      	sub	sp, #32
 802b914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802b916:	f107 0310 	add.w	r3, r7, #16
 802b91a:	2200      	movs	r2, #0
 802b91c:	601a      	str	r2, [r3, #0]
 802b91e:	605a      	str	r2, [r3, #4]
 802b920:	609a      	str	r2, [r3, #8]
 802b922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802b924:	1d3b      	adds	r3, r7, #4
 802b926:	2200      	movs	r2, #0
 802b928:	601a      	str	r2, [r3, #0]
 802b92a:	605a      	str	r2, [r3, #4]
 802b92c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 802b92e:	4b1e      	ldr	r3, [pc, #120]	; (802b9a8 <MX_TIM2_Init+0x98>)
 802b930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802b934:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 802b936:	4b1c      	ldr	r3, [pc, #112]	; (802b9a8 <MX_TIM2_Init+0x98>)
 802b938:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802b93c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802b93e:	4b1a      	ldr	r3, [pc, #104]	; (802b9a8 <MX_TIM2_Init+0x98>)
 802b940:	2200      	movs	r2, #0
 802b942:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 802b944:	4b18      	ldr	r3, [pc, #96]	; (802b9a8 <MX_TIM2_Init+0x98>)
 802b946:	2264      	movs	r2, #100	; 0x64
 802b948:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802b94a:	4b17      	ldr	r3, [pc, #92]	; (802b9a8 <MX_TIM2_Init+0x98>)
 802b94c:	2200      	movs	r2, #0
 802b94e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802b950:	4b15      	ldr	r3, [pc, #84]	; (802b9a8 <MX_TIM2_Init+0x98>)
 802b952:	2200      	movs	r2, #0
 802b954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802b956:	4814      	ldr	r0, [pc, #80]	; (802b9a8 <MX_TIM2_Init+0x98>)
 802b958:	f00a f953 	bl	8035c02 <HAL_TIM_Base_Init>
 802b95c:	4603      	mov	r3, r0
 802b95e:	2b00      	cmp	r3, #0
 802b960:	d001      	beq.n	802b966 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 802b962:	f7ff fc61 	bl	802b228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802b966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802b96a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802b96c:	f107 0310 	add.w	r3, r7, #16
 802b970:	4619      	mov	r1, r3
 802b972:	480d      	ldr	r0, [pc, #52]	; (802b9a8 <MX_TIM2_Init+0x98>)
 802b974:	f00a fb34 	bl	8035fe0 <HAL_TIM_ConfigClockSource>
 802b978:	4603      	mov	r3, r0
 802b97a:	2b00      	cmp	r3, #0
 802b97c:	d001      	beq.n	802b982 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 802b97e:	f7ff fc53 	bl	802b228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802b982:	2300      	movs	r3, #0
 802b984:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802b986:	2300      	movs	r3, #0
 802b988:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802b98a:	1d3b      	adds	r3, r7, #4
 802b98c:	4619      	mov	r1, r3
 802b98e:	4806      	ldr	r0, [pc, #24]	; (802b9a8 <MX_TIM2_Init+0x98>)
 802b990:	f00a fd7e 	bl	8036490 <HAL_TIMEx_MasterConfigSynchronization>
 802b994:	4603      	mov	r3, r0
 802b996:	2b00      	cmp	r3, #0
 802b998:	d001      	beq.n	802b99e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 802b99a:	f7ff fc45 	bl	802b228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802b99e:	bf00      	nop
 802b9a0:	3720      	adds	r7, #32
 802b9a2:	46bd      	mov	sp, r7
 802b9a4:	bd80      	pop	{r7, pc}
 802b9a6:	bf00      	nop
 802b9a8:	24001798 	.word	0x24001798

0802b9ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 802b9ac:	b580      	push	{r7, lr}
 802b9ae:	b088      	sub	sp, #32
 802b9b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802b9b2:	f107 0310 	add.w	r3, r7, #16
 802b9b6:	2200      	movs	r2, #0
 802b9b8:	601a      	str	r2, [r3, #0]
 802b9ba:	605a      	str	r2, [r3, #4]
 802b9bc:	609a      	str	r2, [r3, #8]
 802b9be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802b9c0:	1d3b      	adds	r3, r7, #4
 802b9c2:	2200      	movs	r2, #0
 802b9c4:	601a      	str	r2, [r3, #0]
 802b9c6:	605a      	str	r2, [r3, #4]
 802b9c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802b9ca:	4b1d      	ldr	r3, [pc, #116]	; (802ba40 <MX_TIM3_Init+0x94>)
 802b9cc:	4a1d      	ldr	r2, [pc, #116]	; (802ba44 <MX_TIM3_Init+0x98>)
 802b9ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 802b9d0:	4b1b      	ldr	r3, [pc, #108]	; (802ba40 <MX_TIM3_Init+0x94>)
 802b9d2:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802b9d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802b9d8:	4b19      	ldr	r3, [pc, #100]	; (802ba40 <MX_TIM3_Init+0x94>)
 802b9da:	2200      	movs	r2, #0
 802b9dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 802b9de:	4b18      	ldr	r3, [pc, #96]	; (802ba40 <MX_TIM3_Init+0x94>)
 802b9e0:	2264      	movs	r2, #100	; 0x64
 802b9e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802b9e4:	4b16      	ldr	r3, [pc, #88]	; (802ba40 <MX_TIM3_Init+0x94>)
 802b9e6:	2200      	movs	r2, #0
 802b9e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802b9ea:	4b15      	ldr	r3, [pc, #84]	; (802ba40 <MX_TIM3_Init+0x94>)
 802b9ec:	2200      	movs	r2, #0
 802b9ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 802b9f0:	4813      	ldr	r0, [pc, #76]	; (802ba40 <MX_TIM3_Init+0x94>)
 802b9f2:	f00a f906 	bl	8035c02 <HAL_TIM_Base_Init>
 802b9f6:	4603      	mov	r3, r0
 802b9f8:	2b00      	cmp	r3, #0
 802b9fa:	d001      	beq.n	802ba00 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 802b9fc:	f7ff fc14 	bl	802b228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802ba00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802ba04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 802ba06:	f107 0310 	add.w	r3, r7, #16
 802ba0a:	4619      	mov	r1, r3
 802ba0c:	480c      	ldr	r0, [pc, #48]	; (802ba40 <MX_TIM3_Init+0x94>)
 802ba0e:	f00a fae7 	bl	8035fe0 <HAL_TIM_ConfigClockSource>
 802ba12:	4603      	mov	r3, r0
 802ba14:	2b00      	cmp	r3, #0
 802ba16:	d001      	beq.n	802ba1c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 802ba18:	f7ff fc06 	bl	802b228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802ba1c:	2300      	movs	r3, #0
 802ba1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802ba20:	2300      	movs	r3, #0
 802ba22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 802ba24:	1d3b      	adds	r3, r7, #4
 802ba26:	4619      	mov	r1, r3
 802ba28:	4805      	ldr	r0, [pc, #20]	; (802ba40 <MX_TIM3_Init+0x94>)
 802ba2a:	f00a fd31 	bl	8036490 <HAL_TIMEx_MasterConfigSynchronization>
 802ba2e:	4603      	mov	r3, r0
 802ba30:	2b00      	cmp	r3, #0
 802ba32:	d001      	beq.n	802ba38 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 802ba34:	f7ff fbf8 	bl	802b228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 802ba38:	bf00      	nop
 802ba3a:	3720      	adds	r7, #32
 802ba3c:	46bd      	mov	sp, r7
 802ba3e:	bd80      	pop	{r7, pc}
 802ba40:	240017e4 	.word	0x240017e4
 802ba44:	40000400 	.word	0x40000400

0802ba48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 802ba48:	b580      	push	{r7, lr}
 802ba4a:	b088      	sub	sp, #32
 802ba4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802ba4e:	f107 0310 	add.w	r3, r7, #16
 802ba52:	2200      	movs	r2, #0
 802ba54:	601a      	str	r2, [r3, #0]
 802ba56:	605a      	str	r2, [r3, #4]
 802ba58:	609a      	str	r2, [r3, #8]
 802ba5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802ba5c:	1d3b      	adds	r3, r7, #4
 802ba5e:	2200      	movs	r2, #0
 802ba60:	601a      	str	r2, [r3, #0]
 802ba62:	605a      	str	r2, [r3, #4]
 802ba64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 802ba66:	4b1d      	ldr	r3, [pc, #116]	; (802badc <MX_TIM4_Init+0x94>)
 802ba68:	4a1d      	ldr	r2, [pc, #116]	; (802bae0 <MX_TIM4_Init+0x98>)
 802ba6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 802ba6c:	4b1b      	ldr	r3, [pc, #108]	; (802badc <MX_TIM4_Init+0x94>)
 802ba6e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802ba72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 802ba74:	4b19      	ldr	r3, [pc, #100]	; (802badc <MX_TIM4_Init+0x94>)
 802ba76:	2200      	movs	r2, #0
 802ba78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 802ba7a:	4b18      	ldr	r3, [pc, #96]	; (802badc <MX_TIM4_Init+0x94>)
 802ba7c:	2264      	movs	r2, #100	; 0x64
 802ba7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802ba80:	4b16      	ldr	r3, [pc, #88]	; (802badc <MX_TIM4_Init+0x94>)
 802ba82:	2200      	movs	r2, #0
 802ba84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802ba86:	4b15      	ldr	r3, [pc, #84]	; (802badc <MX_TIM4_Init+0x94>)
 802ba88:	2200      	movs	r2, #0
 802ba8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 802ba8c:	4813      	ldr	r0, [pc, #76]	; (802badc <MX_TIM4_Init+0x94>)
 802ba8e:	f00a f8b8 	bl	8035c02 <HAL_TIM_Base_Init>
 802ba92:	4603      	mov	r3, r0
 802ba94:	2b00      	cmp	r3, #0
 802ba96:	d001      	beq.n	802ba9c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 802ba98:	f7ff fbc6 	bl	802b228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802ba9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802baa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 802baa2:	f107 0310 	add.w	r3, r7, #16
 802baa6:	4619      	mov	r1, r3
 802baa8:	480c      	ldr	r0, [pc, #48]	; (802badc <MX_TIM4_Init+0x94>)
 802baaa:	f00a fa99 	bl	8035fe0 <HAL_TIM_ConfigClockSource>
 802baae:	4603      	mov	r3, r0
 802bab0:	2b00      	cmp	r3, #0
 802bab2:	d001      	beq.n	802bab8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 802bab4:	f7ff fbb8 	bl	802b228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802bab8:	2300      	movs	r3, #0
 802baba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802babc:	2300      	movs	r3, #0
 802babe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802bac0:	1d3b      	adds	r3, r7, #4
 802bac2:	4619      	mov	r1, r3
 802bac4:	4805      	ldr	r0, [pc, #20]	; (802badc <MX_TIM4_Init+0x94>)
 802bac6:	f00a fce3 	bl	8036490 <HAL_TIMEx_MasterConfigSynchronization>
 802baca:	4603      	mov	r3, r0
 802bacc:	2b00      	cmp	r3, #0
 802bace:	d001      	beq.n	802bad4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 802bad0:	f7ff fbaa 	bl	802b228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802bad4:	bf00      	nop
 802bad6:	3720      	adds	r7, #32
 802bad8:	46bd      	mov	sp, r7
 802bada:	bd80      	pop	{r7, pc}
 802badc:	24001830 	.word	0x24001830
 802bae0:	40000800 	.word	0x40000800

0802bae4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 802bae4:	b580      	push	{r7, lr}
 802bae6:	b086      	sub	sp, #24
 802bae8:	af00      	add	r7, sp, #0
 802baea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 802baec:	687b      	ldr	r3, [r7, #4]
 802baee:	681b      	ldr	r3, [r3, #0]
 802baf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802baf4:	d117      	bne.n	802bb26 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802baf6:	4b2a      	ldr	r3, [pc, #168]	; (802bba0 <HAL_TIM_Base_MspInit+0xbc>)
 802baf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bafc:	4a28      	ldr	r2, [pc, #160]	; (802bba0 <HAL_TIM_Base_MspInit+0xbc>)
 802bafe:	f043 0301 	orr.w	r3, r3, #1
 802bb02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802bb06:	4b26      	ldr	r3, [pc, #152]	; (802bba0 <HAL_TIM_Base_MspInit+0xbc>)
 802bb08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bb0c:	f003 0301 	and.w	r3, r3, #1
 802bb10:	617b      	str	r3, [r7, #20]
 802bb12:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 802bb14:	2200      	movs	r2, #0
 802bb16:	2100      	movs	r1, #0
 802bb18:	201c      	movs	r0, #28
 802bb1a:	f000 ff3a 	bl	802c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802bb1e:	201c      	movs	r0, #28
 802bb20:	f000 ff51 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 802bb24:	e038      	b.n	802bb98 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 802bb26:	687b      	ldr	r3, [r7, #4]
 802bb28:	681b      	ldr	r3, [r3, #0]
 802bb2a:	4a1e      	ldr	r2, [pc, #120]	; (802bba4 <HAL_TIM_Base_MspInit+0xc0>)
 802bb2c:	4293      	cmp	r3, r2
 802bb2e:	d117      	bne.n	802bb60 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802bb30:	4b1b      	ldr	r3, [pc, #108]	; (802bba0 <HAL_TIM_Base_MspInit+0xbc>)
 802bb32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bb36:	4a1a      	ldr	r2, [pc, #104]	; (802bba0 <HAL_TIM_Base_MspInit+0xbc>)
 802bb38:	f043 0302 	orr.w	r3, r3, #2
 802bb3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802bb40:	4b17      	ldr	r3, [pc, #92]	; (802bba0 <HAL_TIM_Base_MspInit+0xbc>)
 802bb42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bb46:	f003 0302 	and.w	r3, r3, #2
 802bb4a:	613b      	str	r3, [r7, #16]
 802bb4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 802bb4e:	2200      	movs	r2, #0
 802bb50:	2101      	movs	r1, #1
 802bb52:	201d      	movs	r0, #29
 802bb54:	f000 ff1d 	bl	802c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 802bb58:	201d      	movs	r0, #29
 802bb5a:	f000 ff34 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
}
 802bb5e:	e01b      	b.n	802bb98 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 802bb60:	687b      	ldr	r3, [r7, #4]
 802bb62:	681b      	ldr	r3, [r3, #0]
 802bb64:	4a10      	ldr	r2, [pc, #64]	; (802bba8 <HAL_TIM_Base_MspInit+0xc4>)
 802bb66:	4293      	cmp	r3, r2
 802bb68:	d116      	bne.n	802bb98 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 802bb6a:	4b0d      	ldr	r3, [pc, #52]	; (802bba0 <HAL_TIM_Base_MspInit+0xbc>)
 802bb6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bb70:	4a0b      	ldr	r2, [pc, #44]	; (802bba0 <HAL_TIM_Base_MspInit+0xbc>)
 802bb72:	f043 0304 	orr.w	r3, r3, #4
 802bb76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802bb7a:	4b09      	ldr	r3, [pc, #36]	; (802bba0 <HAL_TIM_Base_MspInit+0xbc>)
 802bb7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bb80:	f003 0304 	and.w	r3, r3, #4
 802bb84:	60fb      	str	r3, [r7, #12]
 802bb86:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 802bb88:	2200      	movs	r2, #0
 802bb8a:	2100      	movs	r1, #0
 802bb8c:	201e      	movs	r0, #30
 802bb8e:	f000 ff00 	bl	802c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 802bb92:	201e      	movs	r0, #30
 802bb94:	f000 ff17 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
}
 802bb98:	bf00      	nop
 802bb9a:	3718      	adds	r7, #24
 802bb9c:	46bd      	mov	sp, r7
 802bb9e:	bd80      	pop	{r7, pc}
 802bba0:	58024400 	.word	0x58024400
 802bba4:	40000400 	.word	0x40000400
 802bba8:	40000800 	.word	0x40000800

0802bbac <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 802bbac:	b580      	push	{r7, lr}
 802bbae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 802bbb0:	4b25      	ldr	r3, [pc, #148]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bbb2:	4a26      	ldr	r2, [pc, #152]	; (802bc4c <MX_UART4_Init+0xa0>)
 802bbb4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 802bbb6:	4b24      	ldr	r3, [pc, #144]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bbb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802bbbc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 802bbbe:	4b22      	ldr	r3, [pc, #136]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bbc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802bbc4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 802bbc6:	4b20      	ldr	r3, [pc, #128]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bbc8:	2200      	movs	r2, #0
 802bbca:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 802bbcc:	4b1e      	ldr	r3, [pc, #120]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bbce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802bbd2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 802bbd4:	4b1c      	ldr	r3, [pc, #112]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bbd6:	220c      	movs	r2, #12
 802bbd8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802bbda:	4b1b      	ldr	r3, [pc, #108]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bbdc:	2200      	movs	r2, #0
 802bbde:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802bbe0:	4b19      	ldr	r3, [pc, #100]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bbe2:	2200      	movs	r2, #0
 802bbe4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802bbe6:	4b18      	ldr	r3, [pc, #96]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bbe8:	2200      	movs	r2, #0
 802bbea:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802bbec:	4b16      	ldr	r3, [pc, #88]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bbee:	2200      	movs	r2, #0
 802bbf0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802bbf2:	4b15      	ldr	r3, [pc, #84]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bbf4:	2220      	movs	r2, #32
 802bbf6:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802bbf8:	4b13      	ldr	r3, [pc, #76]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bbfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802bbfe:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 802bc00:	4811      	ldr	r0, [pc, #68]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bc02:	f00a fcf1 	bl	80365e8 <HAL_UART_Init>
 802bc06:	4603      	mov	r3, r0
 802bc08:	2b00      	cmp	r3, #0
 802bc0a:	d001      	beq.n	802bc10 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 802bc0c:	f7ff fb0c 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802bc10:	2100      	movs	r1, #0
 802bc12:	480d      	ldr	r0, [pc, #52]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bc14:	f00d fa3e 	bl	8039094 <HAL_UARTEx_SetTxFifoThreshold>
 802bc18:	4603      	mov	r3, r0
 802bc1a:	2b00      	cmp	r3, #0
 802bc1c:	d001      	beq.n	802bc22 <MX_UART4_Init+0x76>
  {
    Error_Handler();
 802bc1e:	f7ff fb03 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802bc22:	2100      	movs	r1, #0
 802bc24:	4808      	ldr	r0, [pc, #32]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bc26:	f00d fa73 	bl	8039110 <HAL_UARTEx_SetRxFifoThreshold>
 802bc2a:	4603      	mov	r3, r0
 802bc2c:	2b00      	cmp	r3, #0
 802bc2e:	d001      	beq.n	802bc34 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 802bc30:	f7ff fafa 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 802bc34:	4804      	ldr	r0, [pc, #16]	; (802bc48 <MX_UART4_Init+0x9c>)
 802bc36:	f00d f9f4 	bl	8039022 <HAL_UARTEx_DisableFifoMode>
 802bc3a:	4603      	mov	r3, r0
 802bc3c:	2b00      	cmp	r3, #0
 802bc3e:	d001      	beq.n	802bc44 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 802bc40:	f7ff faf2 	bl	802b228 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 802bc44:	bf00      	nop
 802bc46:	bd80      	pop	{r7, pc}
 802bc48:	2400187c 	.word	0x2400187c
 802bc4c:	40004c00 	.word	0x40004c00

0802bc50 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 802bc50:	b580      	push	{r7, lr}
 802bc52:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 802bc54:	4b22      	ldr	r3, [pc, #136]	; (802bce0 <MX_UART7_Init+0x90>)
 802bc56:	4a23      	ldr	r2, [pc, #140]	; (802bce4 <MX_UART7_Init+0x94>)
 802bc58:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 802bc5a:	4b21      	ldr	r3, [pc, #132]	; (802bce0 <MX_UART7_Init+0x90>)
 802bc5c:	4a22      	ldr	r2, [pc, #136]	; (802bce8 <MX_UART7_Init+0x98>)
 802bc5e:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 802bc60:	4b1f      	ldr	r3, [pc, #124]	; (802bce0 <MX_UART7_Init+0x90>)
 802bc62:	2200      	movs	r2, #0
 802bc64:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 802bc66:	4b1e      	ldr	r3, [pc, #120]	; (802bce0 <MX_UART7_Init+0x90>)
 802bc68:	2200      	movs	r2, #0
 802bc6a:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 802bc6c:	4b1c      	ldr	r3, [pc, #112]	; (802bce0 <MX_UART7_Init+0x90>)
 802bc6e:	2200      	movs	r2, #0
 802bc70:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 802bc72:	4b1b      	ldr	r3, [pc, #108]	; (802bce0 <MX_UART7_Init+0x90>)
 802bc74:	220c      	movs	r2, #12
 802bc76:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802bc78:	4b19      	ldr	r3, [pc, #100]	; (802bce0 <MX_UART7_Init+0x90>)
 802bc7a:	2200      	movs	r2, #0
 802bc7c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 802bc7e:	4b18      	ldr	r3, [pc, #96]	; (802bce0 <MX_UART7_Init+0x90>)
 802bc80:	2200      	movs	r2, #0
 802bc82:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802bc84:	4b16      	ldr	r3, [pc, #88]	; (802bce0 <MX_UART7_Init+0x90>)
 802bc86:	2200      	movs	r2, #0
 802bc88:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802bc8a:	4b15      	ldr	r3, [pc, #84]	; (802bce0 <MX_UART7_Init+0x90>)
 802bc8c:	2200      	movs	r2, #0
 802bc8e:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802bc90:	4b13      	ldr	r3, [pc, #76]	; (802bce0 <MX_UART7_Init+0x90>)
 802bc92:	2200      	movs	r2, #0
 802bc94:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 802bc96:	4812      	ldr	r0, [pc, #72]	; (802bce0 <MX_UART7_Init+0x90>)
 802bc98:	f00a fca6 	bl	80365e8 <HAL_UART_Init>
 802bc9c:	4603      	mov	r3, r0
 802bc9e:	2b00      	cmp	r3, #0
 802bca0:	d001      	beq.n	802bca6 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 802bca2:	f7ff fac1 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802bca6:	2100      	movs	r1, #0
 802bca8:	480d      	ldr	r0, [pc, #52]	; (802bce0 <MX_UART7_Init+0x90>)
 802bcaa:	f00d f9f3 	bl	8039094 <HAL_UARTEx_SetTxFifoThreshold>
 802bcae:	4603      	mov	r3, r0
 802bcb0:	2b00      	cmp	r3, #0
 802bcb2:	d001      	beq.n	802bcb8 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 802bcb4:	f7ff fab8 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802bcb8:	2100      	movs	r1, #0
 802bcba:	4809      	ldr	r0, [pc, #36]	; (802bce0 <MX_UART7_Init+0x90>)
 802bcbc:	f00d fa28 	bl	8039110 <HAL_UARTEx_SetRxFifoThreshold>
 802bcc0:	4603      	mov	r3, r0
 802bcc2:	2b00      	cmp	r3, #0
 802bcc4:	d001      	beq.n	802bcca <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 802bcc6:	f7ff faaf 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 802bcca:	4805      	ldr	r0, [pc, #20]	; (802bce0 <MX_UART7_Init+0x90>)
 802bccc:	f00d f9a9 	bl	8039022 <HAL_UARTEx_DisableFifoMode>
 802bcd0:	4603      	mov	r3, r0
 802bcd2:	2b00      	cmp	r3, #0
 802bcd4:	d001      	beq.n	802bcda <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 802bcd6:	f7ff faa7 	bl	802b228 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 802bcda:	bf00      	nop
 802bcdc:	bd80      	pop	{r7, pc}
 802bcde:	bf00      	nop
 802bce0:	2400190c 	.word	0x2400190c
 802bce4:	40007800 	.word	0x40007800
 802bce8:	001312d0 	.word	0x001312d0

0802bcec <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 802bcec:	b580      	push	{r7, lr}
 802bcee:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 802bcf0:	4b26      	ldr	r3, [pc, #152]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bcf2:	4a27      	ldr	r2, [pc, #156]	; (802bd90 <MX_UART8_Init+0xa4>)
 802bcf4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 802bcf6:	4b25      	ldr	r3, [pc, #148]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bcf8:	4a26      	ldr	r2, [pc, #152]	; (802bd94 <MX_UART8_Init+0xa8>)
 802bcfa:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 802bcfc:	4b23      	ldr	r3, [pc, #140]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bcfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802bd02:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 802bd04:	4b21      	ldr	r3, [pc, #132]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd06:	2200      	movs	r2, #0
 802bd08:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 802bd0a:	4b20      	ldr	r3, [pc, #128]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802bd10:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 802bd12:	4b1e      	ldr	r3, [pc, #120]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd14:	220c      	movs	r2, #12
 802bd16:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802bd18:	4b1c      	ldr	r3, [pc, #112]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd1a:	2200      	movs	r2, #0
 802bd1c:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 802bd1e:	4b1b      	ldr	r3, [pc, #108]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd20:	2200      	movs	r2, #0
 802bd22:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802bd24:	4b19      	ldr	r3, [pc, #100]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd26:	2200      	movs	r2, #0
 802bd28:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802bd2a:	4b18      	ldr	r3, [pc, #96]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd2c:	2200      	movs	r2, #0
 802bd2e:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802bd30:	4b16      	ldr	r3, [pc, #88]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd32:	2220      	movs	r2, #32
 802bd34:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802bd36:	4b15      	ldr	r3, [pc, #84]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802bd3c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 802bd3e:	4813      	ldr	r0, [pc, #76]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd40:	f00a fc52 	bl	80365e8 <HAL_UART_Init>
 802bd44:	4603      	mov	r3, r0
 802bd46:	2b00      	cmp	r3, #0
 802bd48:	d001      	beq.n	802bd4e <MX_UART8_Init+0x62>
  {
    Error_Handler();
 802bd4a:	f7ff fa6d 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802bd4e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802bd52:	480e      	ldr	r0, [pc, #56]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd54:	f00d f99e 	bl	8039094 <HAL_UARTEx_SetTxFifoThreshold>
 802bd58:	4603      	mov	r3, r0
 802bd5a:	2b00      	cmp	r3, #0
 802bd5c:	d001      	beq.n	802bd62 <MX_UART8_Init+0x76>
  {
    Error_Handler();
 802bd5e:	f7ff fa63 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802bd62:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802bd66:	4809      	ldr	r0, [pc, #36]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd68:	f00d f9d2 	bl	8039110 <HAL_UARTEx_SetRxFifoThreshold>
 802bd6c:	4603      	mov	r3, r0
 802bd6e:	2b00      	cmp	r3, #0
 802bd70:	d001      	beq.n	802bd76 <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 802bd72:	f7ff fa59 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 802bd76:	4805      	ldr	r0, [pc, #20]	; (802bd8c <MX_UART8_Init+0xa0>)
 802bd78:	f00d f918 	bl	8038fac <HAL_UARTEx_EnableFifoMode>
 802bd7c:	4603      	mov	r3, r0
 802bd7e:	2b00      	cmp	r3, #0
 802bd80:	d001      	beq.n	802bd86 <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 802bd82:	f7ff fa51 	bl	802b228 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 802bd86:	bf00      	nop
 802bd88:	bd80      	pop	{r7, pc}
 802bd8a:	bf00      	nop
 802bd8c:	2400199c 	.word	0x2400199c
 802bd90:	40007c00 	.word	0x40007c00
 802bd94:	001312d0 	.word	0x001312d0

0802bd98 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 802bd98:	b580      	push	{r7, lr}
 802bd9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802bd9c:	4b22      	ldr	r3, [pc, #136]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bd9e:	4a23      	ldr	r2, [pc, #140]	; (802be2c <MX_USART2_UART_Init+0x94>)
 802bda0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 802bda2:	4b21      	ldr	r3, [pc, #132]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bda4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802bda8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802bdaa:	4b1f      	ldr	r3, [pc, #124]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bdac:	2200      	movs	r2, #0
 802bdae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802bdb0:	4b1d      	ldr	r3, [pc, #116]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bdb2:	2200      	movs	r2, #0
 802bdb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802bdb6:	4b1c      	ldr	r3, [pc, #112]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bdb8:	2200      	movs	r2, #0
 802bdba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802bdbc:	4b1a      	ldr	r3, [pc, #104]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bdbe:	220c      	movs	r2, #12
 802bdc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802bdc2:	4b19      	ldr	r3, [pc, #100]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bdc4:	2200      	movs	r2, #0
 802bdc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802bdc8:	4b17      	ldr	r3, [pc, #92]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bdca:	2200      	movs	r2, #0
 802bdcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802bdce:	4b16      	ldr	r3, [pc, #88]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bdd0:	2200      	movs	r2, #0
 802bdd2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802bdd4:	4b14      	ldr	r3, [pc, #80]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bdd6:	2200      	movs	r2, #0
 802bdd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802bdda:	4b13      	ldr	r3, [pc, #76]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bddc:	2200      	movs	r2, #0
 802bdde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802bde0:	4811      	ldr	r0, [pc, #68]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bde2:	f00a fc01 	bl	80365e8 <HAL_UART_Init>
 802bde6:	4603      	mov	r3, r0
 802bde8:	2b00      	cmp	r3, #0
 802bdea:	d001      	beq.n	802bdf0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 802bdec:	f7ff fa1c 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802bdf0:	2100      	movs	r1, #0
 802bdf2:	480d      	ldr	r0, [pc, #52]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802bdf4:	f00d f94e 	bl	8039094 <HAL_UARTEx_SetTxFifoThreshold>
 802bdf8:	4603      	mov	r3, r0
 802bdfa:	2b00      	cmp	r3, #0
 802bdfc:	d001      	beq.n	802be02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 802bdfe:	f7ff fa13 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802be02:	2100      	movs	r1, #0
 802be04:	4808      	ldr	r0, [pc, #32]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802be06:	f00d f983 	bl	8039110 <HAL_UARTEx_SetRxFifoThreshold>
 802be0a:	4603      	mov	r3, r0
 802be0c:	2b00      	cmp	r3, #0
 802be0e:	d001      	beq.n	802be14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 802be10:	f7ff fa0a 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 802be14:	4804      	ldr	r0, [pc, #16]	; (802be28 <MX_USART2_UART_Init+0x90>)
 802be16:	f00d f904 	bl	8039022 <HAL_UARTEx_DisableFifoMode>
 802be1a:	4603      	mov	r3, r0
 802be1c:	2b00      	cmp	r3, #0
 802be1e:	d001      	beq.n	802be24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 802be20:	f7ff fa02 	bl	802b228 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802be24:	bf00      	nop
 802be26:	bd80      	pop	{r7, pc}
 802be28:	24001a2c 	.word	0x24001a2c
 802be2c:	40004400 	.word	0x40004400

0802be30 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 802be30:	b580      	push	{r7, lr}
 802be32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 802be34:	4b26      	ldr	r3, [pc, #152]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be36:	4a27      	ldr	r2, [pc, #156]	; (802bed4 <MX_USART3_UART_Init+0xa4>)
 802be38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 802be3a:	4b25      	ldr	r3, [pc, #148]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be3c:	4a26      	ldr	r2, [pc, #152]	; (802bed8 <MX_USART3_UART_Init+0xa8>)
 802be3e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 802be40:	4b23      	ldr	r3, [pc, #140]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802be46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 802be48:	4b21      	ldr	r3, [pc, #132]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be4a:	2200      	movs	r2, #0
 802be4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 802be4e:	4b20      	ldr	r3, [pc, #128]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802be54:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 802be56:	4b1e      	ldr	r3, [pc, #120]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be58:	220c      	movs	r2, #12
 802be5a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802be5c:	4b1c      	ldr	r3, [pc, #112]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be5e:	2200      	movs	r2, #0
 802be60:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 802be62:	4b1b      	ldr	r3, [pc, #108]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be64:	2200      	movs	r2, #0
 802be66:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802be68:	4b19      	ldr	r3, [pc, #100]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be6a:	2200      	movs	r2, #0
 802be6c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802be6e:	4b18      	ldr	r3, [pc, #96]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be70:	2200      	movs	r2, #0
 802be72:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802be74:	4b16      	ldr	r3, [pc, #88]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be76:	2220      	movs	r2, #32
 802be78:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802be7a:	4b15      	ldr	r3, [pc, #84]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802be80:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 802be82:	4813      	ldr	r0, [pc, #76]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be84:	f00a fbb0 	bl	80365e8 <HAL_UART_Init>
 802be88:	4603      	mov	r3, r0
 802be8a:	2b00      	cmp	r3, #0
 802be8c:	d001      	beq.n	802be92 <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 802be8e:	f7ff f9cb 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802be92:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802be96:	480e      	ldr	r0, [pc, #56]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802be98:	f00d f8fc 	bl	8039094 <HAL_UARTEx_SetTxFifoThreshold>
 802be9c:	4603      	mov	r3, r0
 802be9e:	2b00      	cmp	r3, #0
 802bea0:	d001      	beq.n	802bea6 <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 802bea2:	f7ff f9c1 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802bea6:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802beaa:	4809      	ldr	r0, [pc, #36]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802beac:	f00d f930 	bl	8039110 <HAL_UARTEx_SetRxFifoThreshold>
 802beb0:	4603      	mov	r3, r0
 802beb2:	2b00      	cmp	r3, #0
 802beb4:	d001      	beq.n	802beba <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 802beb6:	f7ff f9b7 	bl	802b228 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 802beba:	4805      	ldr	r0, [pc, #20]	; (802bed0 <MX_USART3_UART_Init+0xa0>)
 802bebc:	f00d f876 	bl	8038fac <HAL_UARTEx_EnableFifoMode>
 802bec0:	4603      	mov	r3, r0
 802bec2:	2b00      	cmp	r3, #0
 802bec4:	d001      	beq.n	802beca <MX_USART3_UART_Init+0x9a>
  {
    Error_Handler();
 802bec6:	f7ff f9af 	bl	802b228 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 802beca:	bf00      	nop
 802becc:	bd80      	pop	{r7, pc}
 802bece:	bf00      	nop
 802bed0:	24001abc 	.word	0x24001abc
 802bed4:	40004800 	.word	0x40004800
 802bed8:	001312d0 	.word	0x001312d0

0802bedc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 802bedc:	b580      	push	{r7, lr}
 802bede:	b0c0      	sub	sp, #256	; 0x100
 802bee0:	af00      	add	r7, sp, #0
 802bee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802bee4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802bee8:	2200      	movs	r2, #0
 802beea:	601a      	str	r2, [r3, #0]
 802beec:	605a      	str	r2, [r3, #4]
 802beee:	609a      	str	r2, [r3, #8]
 802bef0:	60da      	str	r2, [r3, #12]
 802bef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802bef4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802bef8:	22bc      	movs	r2, #188	; 0xbc
 802befa:	2100      	movs	r1, #0
 802befc:	4618      	mov	r0, r3
 802befe:	f011 fb55 	bl	803d5ac <memset>
  if(uartHandle->Instance==UART4)
 802bf02:	687b      	ldr	r3, [r7, #4]
 802bf04:	681b      	ldr	r3, [r3, #0]
 802bf06:	4ac2      	ldr	r2, [pc, #776]	; (802c210 <HAL_UART_MspInit+0x334>)
 802bf08:	4293      	cmp	r3, r2
 802bf0a:	d14a      	bne.n	802bfa2 <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 802bf0c:	2302      	movs	r3, #2
 802bf0e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802bf10:	2300      	movs	r3, #0
 802bf12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802bf16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802bf1a:	4618      	mov	r0, r3
 802bf1c:	f007 f9dc 	bl	80332d8 <HAL_RCCEx_PeriphCLKConfig>
 802bf20:	4603      	mov	r3, r0
 802bf22:	2b00      	cmp	r3, #0
 802bf24:	d001      	beq.n	802bf2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 802bf26:	f7ff f97f 	bl	802b228 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 802bf2a:	4bba      	ldr	r3, [pc, #744]	; (802c214 <HAL_UART_MspInit+0x338>)
 802bf2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bf30:	4ab8      	ldr	r2, [pc, #736]	; (802c214 <HAL_UART_MspInit+0x338>)
 802bf32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802bf36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802bf3a:	4bb6      	ldr	r3, [pc, #728]	; (802c214 <HAL_UART_MspInit+0x338>)
 802bf3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bf40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802bf44:	62fb      	str	r3, [r7, #44]	; 0x2c
 802bf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802bf48:	4bb2      	ldr	r3, [pc, #712]	; (802c214 <HAL_UART_MspInit+0x338>)
 802bf4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802bf4e:	4ab1      	ldr	r2, [pc, #708]	; (802c214 <HAL_UART_MspInit+0x338>)
 802bf50:	f043 0301 	orr.w	r3, r3, #1
 802bf54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802bf58:	4bae      	ldr	r3, [pc, #696]	; (802c214 <HAL_UART_MspInit+0x338>)
 802bf5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802bf5e:	f003 0301 	and.w	r3, r3, #1
 802bf62:	62bb      	str	r3, [r7, #40]	; 0x28
 802bf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802bf66:	2303      	movs	r3, #3
 802bf68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802bf6c:	2302      	movs	r3, #2
 802bf6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802bf72:	2300      	movs	r3, #0
 802bf74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802bf78:	2300      	movs	r3, #0
 802bf7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802bf7e:	2308      	movs	r3, #8
 802bf80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802bf84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802bf88:	4619      	mov	r1, r3
 802bf8a:	48a3      	ldr	r0, [pc, #652]	; (802c218 <HAL_UART_MspInit+0x33c>)
 802bf8c:	f003 fd54 	bl	802fa38 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 802bf90:	2200      	movs	r2, #0
 802bf92:	2100      	movs	r1, #0
 802bf94:	2034      	movs	r0, #52	; 0x34
 802bf96:	f000 fcfc 	bl	802c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 802bf9a:	2034      	movs	r0, #52	; 0x34
 802bf9c:	f000 fd13 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 802bfa0:	e130      	b.n	802c204 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 802bfa2:	687b      	ldr	r3, [r7, #4]
 802bfa4:	681b      	ldr	r3, [r3, #0]
 802bfa6:	4a9d      	ldr	r2, [pc, #628]	; (802c21c <HAL_UART_MspInit+0x340>)
 802bfa8:	4293      	cmp	r3, r2
 802bfaa:	d143      	bne.n	802c034 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 802bfac:	2302      	movs	r3, #2
 802bfae:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802bfb0:	2300      	movs	r3, #0
 802bfb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802bfb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802bfba:	4618      	mov	r0, r3
 802bfbc:	f007 f98c 	bl	80332d8 <HAL_RCCEx_PeriphCLKConfig>
 802bfc0:	4603      	mov	r3, r0
 802bfc2:	2b00      	cmp	r3, #0
 802bfc4:	d001      	beq.n	802bfca <HAL_UART_MspInit+0xee>
      Error_Handler();
 802bfc6:	f7ff f92f 	bl	802b228 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 802bfca:	4b92      	ldr	r3, [pc, #584]	; (802c214 <HAL_UART_MspInit+0x338>)
 802bfcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bfd0:	4a90      	ldr	r2, [pc, #576]	; (802c214 <HAL_UART_MspInit+0x338>)
 802bfd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802bfd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802bfda:	4b8e      	ldr	r3, [pc, #568]	; (802c214 <HAL_UART_MspInit+0x338>)
 802bfdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802bfe0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802bfe4:	627b      	str	r3, [r7, #36]	; 0x24
 802bfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802bfe8:	4b8a      	ldr	r3, [pc, #552]	; (802c214 <HAL_UART_MspInit+0x338>)
 802bfea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802bfee:	4a89      	ldr	r2, [pc, #548]	; (802c214 <HAL_UART_MspInit+0x338>)
 802bff0:	f043 0310 	orr.w	r3, r3, #16
 802bff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802bff8:	4b86      	ldr	r3, [pc, #536]	; (802c214 <HAL_UART_MspInit+0x338>)
 802bffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802bffe:	f003 0310 	and.w	r3, r3, #16
 802c002:	623b      	str	r3, [r7, #32]
 802c004:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 802c006:	f44f 73c0 	mov.w	r3, #384	; 0x180
 802c00a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802c00e:	2302      	movs	r3, #2
 802c010:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802c014:	2300      	movs	r3, #0
 802c016:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802c01a:	2300      	movs	r3, #0
 802c01c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 802c020:	2307      	movs	r3, #7
 802c022:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802c026:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802c02a:	4619      	mov	r1, r3
 802c02c:	487c      	ldr	r0, [pc, #496]	; (802c220 <HAL_UART_MspInit+0x344>)
 802c02e:	f003 fd03 	bl	802fa38 <HAL_GPIO_Init>
}
 802c032:	e0e7      	b.n	802c204 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 802c034:	687b      	ldr	r3, [r7, #4]
 802c036:	681b      	ldr	r3, [r3, #0]
 802c038:	4a7a      	ldr	r2, [pc, #488]	; (802c224 <HAL_UART_MspInit+0x348>)
 802c03a:	4293      	cmp	r3, r2
 802c03c:	d14a      	bne.n	802c0d4 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 802c03e:	2302      	movs	r3, #2
 802c040:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802c042:	2300      	movs	r3, #0
 802c044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802c048:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802c04c:	4618      	mov	r0, r3
 802c04e:	f007 f943 	bl	80332d8 <HAL_RCCEx_PeriphCLKConfig>
 802c052:	4603      	mov	r3, r0
 802c054:	2b00      	cmp	r3, #0
 802c056:	d001      	beq.n	802c05c <HAL_UART_MspInit+0x180>
      Error_Handler();
 802c058:	f7ff f8e6 	bl	802b228 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 802c05c:	4b6d      	ldr	r3, [pc, #436]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c05e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802c062:	4a6c      	ldr	r2, [pc, #432]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802c068:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802c06c:	4b69      	ldr	r3, [pc, #420]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c06e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802c072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c076:	61fb      	str	r3, [r7, #28]
 802c078:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802c07a:	4b66      	ldr	r3, [pc, #408]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c07c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c080:	4a64      	ldr	r2, [pc, #400]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c082:	f043 0310 	orr.w	r3, r3, #16
 802c086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802c08a:	4b62      	ldr	r3, [pc, #392]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c08c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c090:	f003 0310 	and.w	r3, r3, #16
 802c094:	61bb      	str	r3, [r7, #24]
 802c096:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802c098:	2303      	movs	r3, #3
 802c09a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802c09e:	2302      	movs	r3, #2
 802c0a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802c0a4:	2300      	movs	r3, #0
 802c0a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802c0aa:	2300      	movs	r3, #0
 802c0ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 802c0b0:	2308      	movs	r3, #8
 802c0b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802c0b6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802c0ba:	4619      	mov	r1, r3
 802c0bc:	4858      	ldr	r0, [pc, #352]	; (802c220 <HAL_UART_MspInit+0x344>)
 802c0be:	f003 fcbb 	bl	802fa38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 802c0c2:	2200      	movs	r2, #0
 802c0c4:	2102      	movs	r1, #2
 802c0c6:	2053      	movs	r0, #83	; 0x53
 802c0c8:	f000 fc63 	bl	802c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 802c0cc:	2053      	movs	r0, #83	; 0x53
 802c0ce:	f000 fc7a 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
}
 802c0d2:	e097      	b.n	802c204 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 802c0d4:	687b      	ldr	r3, [r7, #4]
 802c0d6:	681b      	ldr	r3, [r3, #0]
 802c0d8:	4a53      	ldr	r2, [pc, #332]	; (802c228 <HAL_UART_MspInit+0x34c>)
 802c0da:	4293      	cmp	r3, r2
 802c0dc:	d142      	bne.n	802c164 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 802c0de:	2302      	movs	r3, #2
 802c0e0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802c0e2:	2300      	movs	r3, #0
 802c0e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802c0e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802c0ec:	4618      	mov	r0, r3
 802c0ee:	f007 f8f3 	bl	80332d8 <HAL_RCCEx_PeriphCLKConfig>
 802c0f2:	4603      	mov	r3, r0
 802c0f4:	2b00      	cmp	r3, #0
 802c0f6:	d001      	beq.n	802c0fc <HAL_UART_MspInit+0x220>
      Error_Handler();
 802c0f8:	f7ff f896 	bl	802b228 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 802c0fc:	4b45      	ldr	r3, [pc, #276]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c0fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802c102:	4a44      	ldr	r2, [pc, #272]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802c108:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802c10c:	4b41      	ldr	r3, [pc, #260]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c10e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802c112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802c116:	617b      	str	r3, [r7, #20]
 802c118:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802c11a:	4b3e      	ldr	r3, [pc, #248]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c11c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c120:	4a3c      	ldr	r2, [pc, #240]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c122:	f043 0301 	orr.w	r3, r3, #1
 802c126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802c12a:	4b3a      	ldr	r3, [pc, #232]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c12c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c130:	f003 0301 	and.w	r3, r3, #1
 802c134:	613b      	str	r3, [r7, #16]
 802c136:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802c138:	230c      	movs	r3, #12
 802c13a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802c13e:	2302      	movs	r3, #2
 802c140:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802c144:	2300      	movs	r3, #0
 802c146:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802c14a:	2300      	movs	r3, #0
 802c14c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802c150:	2307      	movs	r3, #7
 802c152:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802c156:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802c15a:	4619      	mov	r1, r3
 802c15c:	482e      	ldr	r0, [pc, #184]	; (802c218 <HAL_UART_MspInit+0x33c>)
 802c15e:	f003 fc6b 	bl	802fa38 <HAL_GPIO_Init>
}
 802c162:	e04f      	b.n	802c204 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 802c164:	687b      	ldr	r3, [r7, #4]
 802c166:	681b      	ldr	r3, [r3, #0]
 802c168:	4a30      	ldr	r2, [pc, #192]	; (802c22c <HAL_UART_MspInit+0x350>)
 802c16a:	4293      	cmp	r3, r2
 802c16c:	d14a      	bne.n	802c204 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 802c16e:	2302      	movs	r3, #2
 802c170:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802c172:	2300      	movs	r3, #0
 802c174:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802c178:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802c17c:	4618      	mov	r0, r3
 802c17e:	f007 f8ab 	bl	80332d8 <HAL_RCCEx_PeriphCLKConfig>
 802c182:	4603      	mov	r3, r0
 802c184:	2b00      	cmp	r3, #0
 802c186:	d001      	beq.n	802c18c <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 802c188:	f7ff f84e 	bl	802b228 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 802c18c:	4b21      	ldr	r3, [pc, #132]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c18e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802c192:	4a20      	ldr	r2, [pc, #128]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802c198:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802c19c:	4b1d      	ldr	r3, [pc, #116]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c19e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802c1a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802c1a6:	60fb      	str	r3, [r7, #12]
 802c1a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802c1aa:	4b1a      	ldr	r3, [pc, #104]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c1ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c1b0:	4a18      	ldr	r2, [pc, #96]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c1b2:	f043 0308 	orr.w	r3, r3, #8
 802c1b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802c1ba:	4b16      	ldr	r3, [pc, #88]	; (802c214 <HAL_UART_MspInit+0x338>)
 802c1bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c1c0:	f003 0308 	and.w	r3, r3, #8
 802c1c4:	60bb      	str	r3, [r7, #8]
 802c1c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 802c1c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 802c1cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802c1d0:	2302      	movs	r3, #2
 802c1d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802c1d6:	2300      	movs	r3, #0
 802c1d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802c1dc:	2300      	movs	r3, #0
 802c1de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 802c1e2:	2307      	movs	r3, #7
 802c1e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802c1e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802c1ec:	4619      	mov	r1, r3
 802c1ee:	4810      	ldr	r0, [pc, #64]	; (802c230 <HAL_UART_MspInit+0x354>)
 802c1f0:	f003 fc22 	bl	802fa38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 802c1f4:	2200      	movs	r2, #0
 802c1f6:	2100      	movs	r1, #0
 802c1f8:	2027      	movs	r0, #39	; 0x27
 802c1fa:	f000 fbca 	bl	802c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 802c1fe:	2027      	movs	r0, #39	; 0x27
 802c200:	f000 fbe1 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
}
 802c204:	bf00      	nop
 802c206:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802c20a:	46bd      	mov	sp, r7
 802c20c:	bd80      	pop	{r7, pc}
 802c20e:	bf00      	nop
 802c210:	40004c00 	.word	0x40004c00
 802c214:	58024400 	.word	0x58024400
 802c218:	58020000 	.word	0x58020000
 802c21c:	40007800 	.word	0x40007800
 802c220:	58021000 	.word	0x58021000
 802c224:	40007c00 	.word	0x40007c00
 802c228:	40004400 	.word	0x40004400
 802c22c:	40004800 	.word	0x40004800
 802c230:	58020c00 	.word	0x58020c00

0802c234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 802c234:	f8df d034 	ldr.w	sp, [pc, #52]	; 802c26c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 802c238:	f7ff fae2 	bl	802b800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802c23c:	480c      	ldr	r0, [pc, #48]	; (802c270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802c23e:	490d      	ldr	r1, [pc, #52]	; (802c274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802c240:	4a0d      	ldr	r2, [pc, #52]	; (802c278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 802c242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802c244:	e002      	b.n	802c24c <LoopCopyDataInit>

0802c246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802c246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802c248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802c24a:	3304      	adds	r3, #4

0802c24c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802c24c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802c24e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802c250:	d3f9      	bcc.n	802c246 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802c252:	4a0a      	ldr	r2, [pc, #40]	; (802c27c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802c254:	4c0a      	ldr	r4, [pc, #40]	; (802c280 <LoopFillZerobss+0x22>)
  movs r3, #0
 802c256:	2300      	movs	r3, #0
  b LoopFillZerobss
 802c258:	e001      	b.n	802c25e <LoopFillZerobss>

0802c25a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802c25a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802c25c:	3204      	adds	r2, #4

0802c25e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802c25e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802c260:	d3fb      	bcc.n	802c25a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802c262:	f011 f947 	bl	803d4f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802c266:	f7fe fe3d 	bl	802aee4 <main>
  bx  lr
 802c26a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 802c26c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 802c270:	24000000 	.word	0x24000000
  ldr r1, =_edata
 802c274:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 802c278:	08059694 	.word	0x08059694
  ldr r2, =_sbss
 802c27c:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 802c280:	24003770 	.word	0x24003770

0802c284 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802c284:	e7fe      	b.n	802c284 <ADC3_IRQHandler>
	...

0802c288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802c288:	b580      	push	{r7, lr}
 802c28a:	b082      	sub	sp, #8
 802c28c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802c28e:	2003      	movs	r0, #3
 802c290:	f000 fb74 	bl	802c97c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802c294:	f006 fe4a 	bl	8032f2c <HAL_RCC_GetSysClockFreq>
 802c298:	4602      	mov	r2, r0
 802c29a:	4b15      	ldr	r3, [pc, #84]	; (802c2f0 <HAL_Init+0x68>)
 802c29c:	699b      	ldr	r3, [r3, #24]
 802c29e:	0a1b      	lsrs	r3, r3, #8
 802c2a0:	f003 030f 	and.w	r3, r3, #15
 802c2a4:	4913      	ldr	r1, [pc, #76]	; (802c2f4 <HAL_Init+0x6c>)
 802c2a6:	5ccb      	ldrb	r3, [r1, r3]
 802c2a8:	f003 031f 	and.w	r3, r3, #31
 802c2ac:	fa22 f303 	lsr.w	r3, r2, r3
 802c2b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802c2b2:	4b0f      	ldr	r3, [pc, #60]	; (802c2f0 <HAL_Init+0x68>)
 802c2b4:	699b      	ldr	r3, [r3, #24]
 802c2b6:	f003 030f 	and.w	r3, r3, #15
 802c2ba:	4a0e      	ldr	r2, [pc, #56]	; (802c2f4 <HAL_Init+0x6c>)
 802c2bc:	5cd3      	ldrb	r3, [r2, r3]
 802c2be:	f003 031f 	and.w	r3, r3, #31
 802c2c2:	687a      	ldr	r2, [r7, #4]
 802c2c4:	fa22 f303 	lsr.w	r3, r2, r3
 802c2c8:	4a0b      	ldr	r2, [pc, #44]	; (802c2f8 <HAL_Init+0x70>)
 802c2ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802c2cc:	4a0b      	ldr	r2, [pc, #44]	; (802c2fc <HAL_Init+0x74>)
 802c2ce:	687b      	ldr	r3, [r7, #4]
 802c2d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802c2d2:	200f      	movs	r0, #15
 802c2d4:	f000 f814 	bl	802c300 <HAL_InitTick>
 802c2d8:	4603      	mov	r3, r0
 802c2da:	2b00      	cmp	r3, #0
 802c2dc:	d001      	beq.n	802c2e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802c2de:	2301      	movs	r3, #1
 802c2e0:	e002      	b.n	802c2e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802c2e2:	f7ff f8e3 	bl	802b4ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802c2e6:	2300      	movs	r3, #0
}
 802c2e8:	4618      	mov	r0, r3
 802c2ea:	3708      	adds	r7, #8
 802c2ec:	46bd      	mov	sp, r7
 802c2ee:	bd80      	pop	{r7, pc}
 802c2f0:	58024400 	.word	0x58024400
 802c2f4:	08059568 	.word	0x08059568
 802c2f8:	24000004 	.word	0x24000004
 802c2fc:	24000000 	.word	0x24000000

0802c300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802c300:	b580      	push	{r7, lr}
 802c302:	b082      	sub	sp, #8
 802c304:	af00      	add	r7, sp, #0
 802c306:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802c308:	4b15      	ldr	r3, [pc, #84]	; (802c360 <HAL_InitTick+0x60>)
 802c30a:	781b      	ldrb	r3, [r3, #0]
 802c30c:	2b00      	cmp	r3, #0
 802c30e:	d101      	bne.n	802c314 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802c310:	2301      	movs	r3, #1
 802c312:	e021      	b.n	802c358 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 802c314:	4b13      	ldr	r3, [pc, #76]	; (802c364 <HAL_InitTick+0x64>)
 802c316:	681a      	ldr	r2, [r3, #0]
 802c318:	4b11      	ldr	r3, [pc, #68]	; (802c360 <HAL_InitTick+0x60>)
 802c31a:	781b      	ldrb	r3, [r3, #0]
 802c31c:	4619      	mov	r1, r3
 802c31e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802c322:	fbb3 f3f1 	udiv	r3, r3, r1
 802c326:	fbb2 f3f3 	udiv	r3, r2, r3
 802c32a:	4618      	mov	r0, r3
 802c32c:	f000 fb59 	bl	802c9e2 <HAL_SYSTICK_Config>
 802c330:	4603      	mov	r3, r0
 802c332:	2b00      	cmp	r3, #0
 802c334:	d001      	beq.n	802c33a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802c336:	2301      	movs	r3, #1
 802c338:	e00e      	b.n	802c358 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802c33a:	687b      	ldr	r3, [r7, #4]
 802c33c:	2b0f      	cmp	r3, #15
 802c33e:	d80a      	bhi.n	802c356 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802c340:	2200      	movs	r2, #0
 802c342:	6879      	ldr	r1, [r7, #4]
 802c344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c348:	f000 fb23 	bl	802c992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802c34c:	4a06      	ldr	r2, [pc, #24]	; (802c368 <HAL_InitTick+0x68>)
 802c34e:	687b      	ldr	r3, [r7, #4]
 802c350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802c352:	2300      	movs	r3, #0
 802c354:	e000      	b.n	802c358 <HAL_InitTick+0x58>
    return HAL_ERROR;
 802c356:	2301      	movs	r3, #1
}
 802c358:	4618      	mov	r0, r3
 802c35a:	3708      	adds	r7, #8
 802c35c:	46bd      	mov	sp, r7
 802c35e:	bd80      	pop	{r7, pc}
 802c360:	2400000c 	.word	0x2400000c
 802c364:	24000000 	.word	0x24000000
 802c368:	24000008 	.word	0x24000008

0802c36c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802c36c:	b480      	push	{r7}
 802c36e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802c370:	4b06      	ldr	r3, [pc, #24]	; (802c38c <HAL_IncTick+0x20>)
 802c372:	781b      	ldrb	r3, [r3, #0]
 802c374:	461a      	mov	r2, r3
 802c376:	4b06      	ldr	r3, [pc, #24]	; (802c390 <HAL_IncTick+0x24>)
 802c378:	681b      	ldr	r3, [r3, #0]
 802c37a:	4413      	add	r3, r2
 802c37c:	4a04      	ldr	r2, [pc, #16]	; (802c390 <HAL_IncTick+0x24>)
 802c37e:	6013      	str	r3, [r2, #0]
}
 802c380:	bf00      	nop
 802c382:	46bd      	mov	sp, r7
 802c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c388:	4770      	bx	lr
 802c38a:	bf00      	nop
 802c38c:	2400000c 	.word	0x2400000c
 802c390:	24001b4c 	.word	0x24001b4c

0802c394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802c394:	b480      	push	{r7}
 802c396:	af00      	add	r7, sp, #0
  return uwTick;
 802c398:	4b03      	ldr	r3, [pc, #12]	; (802c3a8 <HAL_GetTick+0x14>)
 802c39a:	681b      	ldr	r3, [r3, #0]
}
 802c39c:	4618      	mov	r0, r3
 802c39e:	46bd      	mov	sp, r7
 802c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c3a4:	4770      	bx	lr
 802c3a6:	bf00      	nop
 802c3a8:	24001b4c 	.word	0x24001b4c

0802c3ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802c3ac:	b580      	push	{r7, lr}
 802c3ae:	b084      	sub	sp, #16
 802c3b0:	af00      	add	r7, sp, #0
 802c3b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802c3b4:	f7ff ffee 	bl	802c394 <HAL_GetTick>
 802c3b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802c3ba:	687b      	ldr	r3, [r7, #4]
 802c3bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802c3be:	68fb      	ldr	r3, [r7, #12]
 802c3c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802c3c4:	d005      	beq.n	802c3d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802c3c6:	4b0a      	ldr	r3, [pc, #40]	; (802c3f0 <HAL_Delay+0x44>)
 802c3c8:	781b      	ldrb	r3, [r3, #0]
 802c3ca:	461a      	mov	r2, r3
 802c3cc:	68fb      	ldr	r3, [r7, #12]
 802c3ce:	4413      	add	r3, r2
 802c3d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802c3d2:	bf00      	nop
 802c3d4:	f7ff ffde 	bl	802c394 <HAL_GetTick>
 802c3d8:	4602      	mov	r2, r0
 802c3da:	68bb      	ldr	r3, [r7, #8]
 802c3dc:	1ad3      	subs	r3, r2, r3
 802c3de:	68fa      	ldr	r2, [r7, #12]
 802c3e0:	429a      	cmp	r2, r3
 802c3e2:	d8f7      	bhi.n	802c3d4 <HAL_Delay+0x28>
  {
  }
}
 802c3e4:	bf00      	nop
 802c3e6:	bf00      	nop
 802c3e8:	3710      	adds	r7, #16
 802c3ea:	46bd      	mov	sp, r7
 802c3ec:	bd80      	pop	{r7, pc}
 802c3ee:	bf00      	nop
 802c3f0:	2400000c 	.word	0x2400000c

0802c3f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 802c3f4:	b480      	push	{r7}
 802c3f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 802c3f8:	4b03      	ldr	r3, [pc, #12]	; (802c408 <HAL_GetREVID+0x14>)
 802c3fa:	681b      	ldr	r3, [r3, #0]
 802c3fc:	0c1b      	lsrs	r3, r3, #16
}
 802c3fe:	4618      	mov	r0, r3
 802c400:	46bd      	mov	sp, r7
 802c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c406:	4770      	bx	lr
 802c408:	5c001000 	.word	0x5c001000

0802c40c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 802c40c:	b580      	push	{r7, lr}
 802c40e:	b088      	sub	sp, #32
 802c410:	af00      	add	r7, sp, #0
 802c412:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 802c414:	2300      	movs	r3, #0
 802c416:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 802c418:	2300      	movs	r3, #0
 802c41a:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802c41c:	687b      	ldr	r3, [r7, #4]
 802c41e:	2b00      	cmp	r3, #0
 802c420:	d102      	bne.n	802c428 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 802c422:	2301      	movs	r3, #1
 802c424:	77fb      	strb	r3, [r7, #31]
 802c426:	e10e      	b.n	802c646 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802c428:	687b      	ldr	r3, [r7, #4]
 802c42a:	681b      	ldr	r3, [r3, #0]
 802c42c:	681b      	ldr	r3, [r3, #0]
 802c42e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802c436:	d102      	bne.n	802c43e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 802c438:	2301      	movs	r3, #1
 802c43a:	77fb      	strb	r3, [r7, #31]
 802c43c:	e103      	b.n	802c646 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 802c43e:	687b      	ldr	r3, [r7, #4]
 802c440:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802c444:	b2db      	uxtb	r3, r3
 802c446:	2b00      	cmp	r3, #0
 802c448:	d109      	bne.n	802c45e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 802c44a:	687b      	ldr	r3, [r7, #4]
 802c44c:	2200      	movs	r2, #0
 802c44e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 802c452:	687b      	ldr	r3, [r7, #4]
 802c454:	2200      	movs	r2, #0
 802c456:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 802c458:	6878      	ldr	r0, [r7, #4]
 802c45a:	f7fe fac9 	bl	802a9f0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 802c45e:	687b      	ldr	r3, [r7, #4]
 802c460:	681b      	ldr	r3, [r3, #0]
 802c462:	681b      	ldr	r3, [r3, #0]
 802c464:	f003 0304 	and.w	r3, r3, #4
 802c468:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802c46a:	687b      	ldr	r3, [r7, #4]
 802c46c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 802c46e:	687b      	ldr	r3, [r7, #4]
 802c470:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802c472:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 802c474:	687b      	ldr	r3, [r7, #4]
 802c476:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 802c478:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 802c47a:	687b      	ldr	r3, [r7, #4]
 802c47c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 802c47e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 802c480:	687b      	ldr	r3, [r7, #4]
 802c482:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 802c484:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 802c486:	687b      	ldr	r3, [r7, #4]
 802c488:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802c48a:	4313      	orrs	r3, r2
 802c48c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 802c48e:	687b      	ldr	r3, [r7, #4]
 802c490:	681b      	ldr	r3, [r3, #0]
 802c492:	681a      	ldr	r2, [r3, #0]
 802c494:	4b6e      	ldr	r3, [pc, #440]	; (802c650 <HAL_COMP_Init+0x244>)
 802c496:	4013      	ands	r3, r2
 802c498:	687a      	ldr	r2, [r7, #4]
 802c49a:	6812      	ldr	r2, [r2, #0]
 802c49c:	6979      	ldr	r1, [r7, #20]
 802c49e:	430b      	orrs	r3, r1
 802c4a0:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 802c4a2:	687b      	ldr	r3, [r7, #4]
 802c4a4:	685b      	ldr	r3, [r3, #4]
 802c4a6:	2b10      	cmp	r3, #16
 802c4a8:	d108      	bne.n	802c4bc <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802c4aa:	687b      	ldr	r3, [r7, #4]
 802c4ac:	681b      	ldr	r3, [r3, #0]
 802c4ae:	681a      	ldr	r2, [r3, #0]
 802c4b0:	687b      	ldr	r3, [r7, #4]
 802c4b2:	681b      	ldr	r3, [r3, #0]
 802c4b4:	f042 0210 	orr.w	r2, r2, #16
 802c4b8:	601a      	str	r2, [r3, #0]
 802c4ba:	e007      	b.n	802c4cc <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802c4bc:	687b      	ldr	r3, [r7, #4]
 802c4be:	681b      	ldr	r3, [r3, #0]
 802c4c0:	681a      	ldr	r2, [r3, #0]
 802c4c2:	687b      	ldr	r3, [r7, #4]
 802c4c4:	681b      	ldr	r3, [r3, #0]
 802c4c6:	f022 0210 	bic.w	r2, r2, #16
 802c4ca:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 802c4cc:	687b      	ldr	r3, [r7, #4]
 802c4ce:	681b      	ldr	r3, [r3, #0]
 802c4d0:	681b      	ldr	r3, [r3, #0]
 802c4d2:	f003 0304 	and.w	r3, r3, #4
 802c4d6:	2b00      	cmp	r3, #0
 802c4d8:	d016      	beq.n	802c508 <HAL_COMP_Init+0xfc>
 802c4da:	69bb      	ldr	r3, [r7, #24]
 802c4dc:	2b00      	cmp	r3, #0
 802c4de:	d013      	beq.n	802c508 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802c4e0:	4b5c      	ldr	r3, [pc, #368]	; (802c654 <HAL_COMP_Init+0x248>)
 802c4e2:	681b      	ldr	r3, [r3, #0]
 802c4e4:	099b      	lsrs	r3, r3, #6
 802c4e6:	4a5c      	ldr	r2, [pc, #368]	; (802c658 <HAL_COMP_Init+0x24c>)
 802c4e8:	fba2 2303 	umull	r2, r3, r2, r3
 802c4ec:	099b      	lsrs	r3, r3, #6
 802c4ee:	1c5a      	adds	r2, r3, #1
 802c4f0:	4613      	mov	r3, r2
 802c4f2:	009b      	lsls	r3, r3, #2
 802c4f4:	4413      	add	r3, r2
 802c4f6:	009b      	lsls	r3, r3, #2
 802c4f8:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 802c4fa:	e002      	b.n	802c502 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 802c4fc:	68fb      	ldr	r3, [r7, #12]
 802c4fe:	3b01      	subs	r3, #1
 802c500:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 802c502:	68fb      	ldr	r3, [r7, #12]
 802c504:	2b00      	cmp	r3, #0
 802c506:	d1f9      	bne.n	802c4fc <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802c508:	687b      	ldr	r3, [r7, #4]
 802c50a:	681b      	ldr	r3, [r3, #0]
 802c50c:	4a53      	ldr	r2, [pc, #332]	; (802c65c <HAL_COMP_Init+0x250>)
 802c50e:	4293      	cmp	r3, r2
 802c510:	d102      	bne.n	802c518 <HAL_COMP_Init+0x10c>
 802c512:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802c516:	e001      	b.n	802c51c <HAL_COMP_Init+0x110>
 802c518:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802c51c:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 802c51e:	687b      	ldr	r3, [r7, #4]
 802c520:	6a1b      	ldr	r3, [r3, #32]
 802c522:	f003 0303 	and.w	r3, r3, #3
 802c526:	2b00      	cmp	r3, #0
 802c528:	d06d      	beq.n	802c606 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 802c52a:	687b      	ldr	r3, [r7, #4]
 802c52c:	6a1b      	ldr	r3, [r3, #32]
 802c52e:	f003 0310 	and.w	r3, r3, #16
 802c532:	2b00      	cmp	r3, #0
 802c534:	d008      	beq.n	802c548 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 802c536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c53a:	681a      	ldr	r2, [r3, #0]
 802c53c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c540:	693b      	ldr	r3, [r7, #16]
 802c542:	4313      	orrs	r3, r2
 802c544:	600b      	str	r3, [r1, #0]
 802c546:	e008      	b.n	802c55a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 802c548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c54c:	681a      	ldr	r2, [r3, #0]
 802c54e:	693b      	ldr	r3, [r7, #16]
 802c550:	43db      	mvns	r3, r3
 802c552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c556:	4013      	ands	r3, r2
 802c558:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 802c55a:	687b      	ldr	r3, [r7, #4]
 802c55c:	6a1b      	ldr	r3, [r3, #32]
 802c55e:	f003 0320 	and.w	r3, r3, #32
 802c562:	2b00      	cmp	r3, #0
 802c564:	d008      	beq.n	802c578 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 802c566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c56a:	685a      	ldr	r2, [r3, #4]
 802c56c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c570:	693b      	ldr	r3, [r7, #16]
 802c572:	4313      	orrs	r3, r2
 802c574:	604b      	str	r3, [r1, #4]
 802c576:	e008      	b.n	802c58a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 802c578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c57c:	685a      	ldr	r2, [r3, #4]
 802c57e:	693b      	ldr	r3, [r7, #16]
 802c580:	43db      	mvns	r3, r3
 802c582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c586:	4013      	ands	r3, r2
 802c588:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 802c58a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802c58e:	693b      	ldr	r3, [r7, #16]
 802c590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 802c594:	687b      	ldr	r3, [r7, #4]
 802c596:	6a1b      	ldr	r3, [r3, #32]
 802c598:	f003 0302 	and.w	r3, r3, #2
 802c59c:	2b00      	cmp	r3, #0
 802c59e:	d00a      	beq.n	802c5b6 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 802c5a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c5a4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802c5a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c5ac:	693b      	ldr	r3, [r7, #16]
 802c5ae:	4313      	orrs	r3, r2
 802c5b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802c5b4:	e00a      	b.n	802c5cc <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 802c5b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c5ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802c5be:	693b      	ldr	r3, [r7, #16]
 802c5c0:	43db      	mvns	r3, r3
 802c5c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c5c6:	4013      	ands	r3, r2
 802c5c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 802c5cc:	687b      	ldr	r3, [r7, #4]
 802c5ce:	6a1b      	ldr	r3, [r3, #32]
 802c5d0:	f003 0301 	and.w	r3, r3, #1
 802c5d4:	2b00      	cmp	r3, #0
 802c5d6:	d00a      	beq.n	802c5ee <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 802c5d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c5dc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802c5e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c5e4:	693b      	ldr	r3, [r7, #16]
 802c5e6:	4313      	orrs	r3, r2
 802c5e8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802c5ec:	e021      	b.n	802c632 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 802c5ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c5f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802c5f6:	693b      	ldr	r3, [r7, #16]
 802c5f8:	43db      	mvns	r3, r3
 802c5fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c5fe:	4013      	ands	r3, r2
 802c600:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802c604:	e015      	b.n	802c632 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 802c606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c60a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802c60e:	693b      	ldr	r3, [r7, #16]
 802c610:	43db      	mvns	r3, r3
 802c612:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c616:	4013      	ands	r3, r2
 802c618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 802c61c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c620:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802c624:	693b      	ldr	r3, [r7, #16]
 802c626:	43db      	mvns	r3, r3
 802c628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802c62c:	4013      	ands	r3, r2
 802c62e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 802c632:	687b      	ldr	r3, [r7, #4]
 802c634:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802c638:	b2db      	uxtb	r3, r3
 802c63a:	2b00      	cmp	r3, #0
 802c63c:	d103      	bne.n	802c646 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 802c63e:	687b      	ldr	r3, [r7, #4]
 802c640:	2201      	movs	r2, #1
 802c642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 802c646:	7ffb      	ldrb	r3, [r7, #31]
}
 802c648:	4618      	mov	r0, r3
 802c64a:	3720      	adds	r7, #32
 802c64c:	46bd      	mov	sp, r7
 802c64e:	bd80      	pop	{r7, pc}
 802c650:	f0e8cce1 	.word	0xf0e8cce1
 802c654:	24000000 	.word	0x24000000
 802c658:	053e2d63 	.word	0x053e2d63
 802c65c:	5800380c 	.word	0x5800380c

0802c660 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 802c660:	b480      	push	{r7}
 802c662:	b085      	sub	sp, #20
 802c664:	af00      	add	r7, sp, #0
 802c666:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 802c668:	2300      	movs	r3, #0
 802c66a:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 802c66c:	2300      	movs	r3, #0
 802c66e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802c670:	687b      	ldr	r3, [r7, #4]
 802c672:	2b00      	cmp	r3, #0
 802c674:	d102      	bne.n	802c67c <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 802c676:	2301      	movs	r3, #1
 802c678:	73fb      	strb	r3, [r7, #15]
 802c67a:	e030      	b.n	802c6de <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802c67c:	687b      	ldr	r3, [r7, #4]
 802c67e:	681b      	ldr	r3, [r3, #0]
 802c680:	681b      	ldr	r3, [r3, #0]
 802c682:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802c686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802c68a:	d102      	bne.n	802c692 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 802c68c:	2301      	movs	r3, #1
 802c68e:	73fb      	strb	r3, [r7, #15]
 802c690:	e025      	b.n	802c6de <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 802c692:	687b      	ldr	r3, [r7, #4]
 802c694:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802c698:	b2db      	uxtb	r3, r3
 802c69a:	2b01      	cmp	r3, #1
 802c69c:	d11d      	bne.n	802c6da <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 802c69e:	687b      	ldr	r3, [r7, #4]
 802c6a0:	681b      	ldr	r3, [r3, #0]
 802c6a2:	681a      	ldr	r2, [r3, #0]
 802c6a4:	687b      	ldr	r3, [r7, #4]
 802c6a6:	681b      	ldr	r3, [r3, #0]
 802c6a8:	f042 0201 	orr.w	r2, r2, #1
 802c6ac:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 802c6ae:	687b      	ldr	r3, [r7, #4]
 802c6b0:	2202      	movs	r2, #2
 802c6b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802c6b6:	4b0d      	ldr	r3, [pc, #52]	; (802c6ec <HAL_COMP_Start+0x8c>)
 802c6b8:	681b      	ldr	r3, [r3, #0]
 802c6ba:	099b      	lsrs	r3, r3, #6
 802c6bc:	4a0c      	ldr	r2, [pc, #48]	; (802c6f0 <HAL_COMP_Start+0x90>)
 802c6be:	fba2 2303 	umull	r2, r3, r2, r3
 802c6c2:	099b      	lsrs	r3, r3, #6
 802c6c4:	3301      	adds	r3, #1
 802c6c6:	00db      	lsls	r3, r3, #3
 802c6c8:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802c6ca:	e002      	b.n	802c6d2 <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 802c6cc:	68bb      	ldr	r3, [r7, #8]
 802c6ce:	3b01      	subs	r3, #1
 802c6d0:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802c6d2:	68bb      	ldr	r3, [r7, #8]
 802c6d4:	2b00      	cmp	r3, #0
 802c6d6:	d1f9      	bne.n	802c6cc <HAL_COMP_Start+0x6c>
 802c6d8:	e001      	b.n	802c6de <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 802c6da:	2301      	movs	r3, #1
 802c6dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802c6de:	7bfb      	ldrb	r3, [r7, #15]
}
 802c6e0:	4618      	mov	r0, r3
 802c6e2:	3714      	adds	r7, #20
 802c6e4:	46bd      	mov	sp, r7
 802c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c6ea:	4770      	bx	lr
 802c6ec:	24000000 	.word	0x24000000
 802c6f0:	053e2d63 	.word	0x053e2d63

0802c6f4 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 802c6f4:	b580      	push	{r7, lr}
 802c6f6:	b084      	sub	sp, #16
 802c6f8:	af00      	add	r7, sp, #0
 802c6fa:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802c6fc:	687b      	ldr	r3, [r7, #4]
 802c6fe:	681b      	ldr	r3, [r3, #0]
 802c700:	4a33      	ldr	r2, [pc, #204]	; (802c7d0 <HAL_COMP_IRQHandler+0xdc>)
 802c702:	4293      	cmp	r3, r2
 802c704:	d102      	bne.n	802c70c <HAL_COMP_IRQHandler+0x18>
 802c706:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802c70a:	e001      	b.n	802c710 <HAL_COMP_IRQHandler+0x1c>
 802c70c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802c710:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 802c712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c716:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802c71a:	68fb      	ldr	r3, [r7, #12]
 802c71c:	4013      	ands	r3, r2
 802c71e:	2b00      	cmp	r3, #0
 802c720:	d014      	beq.n	802c74c <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 802c722:	4b2c      	ldr	r3, [pc, #176]	; (802c7d4 <HAL_COMP_IRQHandler+0xe0>)
 802c724:	681b      	ldr	r3, [r3, #0]
 802c726:	f003 0310 	and.w	r3, r3, #16
 802c72a:	2b00      	cmp	r3, #0
 802c72c:	d006      	beq.n	802c73c <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 802c72e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802c732:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 802c736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 802c73a:	e004      	b.n	802c746 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 802c73c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802c740:	68fb      	ldr	r3, [r7, #12]
 802c742:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802c746:	6878      	ldr	r0, [r7, #4]
 802c748:	f7fe fcfc 	bl	802b144 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 802c74c:	687b      	ldr	r3, [r7, #4]
 802c74e:	681b      	ldr	r3, [r3, #0]
 802c750:	681b      	ldr	r3, [r3, #0]
 802c752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c756:	2b40      	cmp	r3, #64	; 0x40
 802c758:	d136      	bne.n	802c7c8 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 802c75a:	4b1f      	ldr	r3, [pc, #124]	; (802c7d8 <HAL_COMP_IRQHandler+0xe4>)
 802c75c:	681b      	ldr	r3, [r3, #0]
 802c75e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802c762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802c766:	d101      	bne.n	802c76c <HAL_COMP_IRQHandler+0x78>
 802c768:	2301      	movs	r3, #1
 802c76a:	e000      	b.n	802c76e <HAL_COMP_IRQHandler+0x7a>
 802c76c:	2300      	movs	r3, #0
 802c76e:	2b00      	cmp	r3, #0
 802c770:	d00b      	beq.n	802c78a <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 802c772:	4b19      	ldr	r3, [pc, #100]	; (802c7d8 <HAL_COMP_IRQHandler+0xe4>)
 802c774:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802c778:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802c77a:	687b      	ldr	r3, [r7, #4]
 802c77c:	681b      	ldr	r3, [r3, #0]
 802c77e:	681a      	ldr	r2, [r3, #0]
 802c780:	687b      	ldr	r3, [r7, #4]
 802c782:	681b      	ldr	r3, [r3, #0]
 802c784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802c788:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 802c78a:	4b13      	ldr	r3, [pc, #76]	; (802c7d8 <HAL_COMP_IRQHandler+0xe4>)
 802c78c:	681b      	ldr	r3, [r3, #0]
 802c78e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802c792:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802c796:	d101      	bne.n	802c79c <HAL_COMP_IRQHandler+0xa8>
 802c798:	2301      	movs	r3, #1
 802c79a:	e000      	b.n	802c79e <HAL_COMP_IRQHandler+0xaa>
 802c79c:	2300      	movs	r3, #0
 802c79e:	2b00      	cmp	r3, #0
 802c7a0:	d00b      	beq.n	802c7ba <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 802c7a2:	4b0d      	ldr	r3, [pc, #52]	; (802c7d8 <HAL_COMP_IRQHandler+0xe4>)
 802c7a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802c7a8:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802c7aa:	687b      	ldr	r3, [r7, #4]
 802c7ac:	681b      	ldr	r3, [r3, #0]
 802c7ae:	681a      	ldr	r2, [r3, #0]
 802c7b0:	687b      	ldr	r3, [r7, #4]
 802c7b2:	681b      	ldr	r3, [r3, #0]
 802c7b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802c7b8:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 802c7ba:	687b      	ldr	r3, [r7, #4]
 802c7bc:	2201      	movs	r2, #1
 802c7be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802c7c2:	6878      	ldr	r0, [r7, #4]
 802c7c4:	f7fe fcbe 	bl	802b144 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 802c7c8:	bf00      	nop
 802c7ca:	3710      	adds	r7, #16
 802c7cc:	46bd      	mov	sp, r7
 802c7ce:	bd80      	pop	{r7, pc}
 802c7d0:	5800380c 	.word	0x5800380c
 802c7d4:	58003810 	.word	0x58003810
 802c7d8:	58003800 	.word	0x58003800

0802c7dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802c7dc:	b480      	push	{r7}
 802c7de:	b085      	sub	sp, #20
 802c7e0:	af00      	add	r7, sp, #0
 802c7e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802c7e4:	687b      	ldr	r3, [r7, #4]
 802c7e6:	f003 0307 	and.w	r3, r3, #7
 802c7ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802c7ec:	4b0b      	ldr	r3, [pc, #44]	; (802c81c <__NVIC_SetPriorityGrouping+0x40>)
 802c7ee:	68db      	ldr	r3, [r3, #12]
 802c7f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802c7f2:	68ba      	ldr	r2, [r7, #8]
 802c7f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802c7f8:	4013      	ands	r3, r2
 802c7fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802c7fc:	68fb      	ldr	r3, [r7, #12]
 802c7fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802c800:	68bb      	ldr	r3, [r7, #8]
 802c802:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802c804:	4b06      	ldr	r3, [pc, #24]	; (802c820 <__NVIC_SetPriorityGrouping+0x44>)
 802c806:	4313      	orrs	r3, r2
 802c808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802c80a:	4a04      	ldr	r2, [pc, #16]	; (802c81c <__NVIC_SetPriorityGrouping+0x40>)
 802c80c:	68bb      	ldr	r3, [r7, #8]
 802c80e:	60d3      	str	r3, [r2, #12]
}
 802c810:	bf00      	nop
 802c812:	3714      	adds	r7, #20
 802c814:	46bd      	mov	sp, r7
 802c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c81a:	4770      	bx	lr
 802c81c:	e000ed00 	.word	0xe000ed00
 802c820:	05fa0000 	.word	0x05fa0000

0802c824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802c824:	b480      	push	{r7}
 802c826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802c828:	4b04      	ldr	r3, [pc, #16]	; (802c83c <__NVIC_GetPriorityGrouping+0x18>)
 802c82a:	68db      	ldr	r3, [r3, #12]
 802c82c:	0a1b      	lsrs	r3, r3, #8
 802c82e:	f003 0307 	and.w	r3, r3, #7
}
 802c832:	4618      	mov	r0, r3
 802c834:	46bd      	mov	sp, r7
 802c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c83a:	4770      	bx	lr
 802c83c:	e000ed00 	.word	0xe000ed00

0802c840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802c840:	b480      	push	{r7}
 802c842:	b083      	sub	sp, #12
 802c844:	af00      	add	r7, sp, #0
 802c846:	4603      	mov	r3, r0
 802c848:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802c84a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802c84e:	2b00      	cmp	r3, #0
 802c850:	db0b      	blt.n	802c86a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802c852:	88fb      	ldrh	r3, [r7, #6]
 802c854:	f003 021f 	and.w	r2, r3, #31
 802c858:	4907      	ldr	r1, [pc, #28]	; (802c878 <__NVIC_EnableIRQ+0x38>)
 802c85a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802c85e:	095b      	lsrs	r3, r3, #5
 802c860:	2001      	movs	r0, #1
 802c862:	fa00 f202 	lsl.w	r2, r0, r2
 802c866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802c86a:	bf00      	nop
 802c86c:	370c      	adds	r7, #12
 802c86e:	46bd      	mov	sp, r7
 802c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c874:	4770      	bx	lr
 802c876:	bf00      	nop
 802c878:	e000e100 	.word	0xe000e100

0802c87c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802c87c:	b480      	push	{r7}
 802c87e:	b083      	sub	sp, #12
 802c880:	af00      	add	r7, sp, #0
 802c882:	4603      	mov	r3, r0
 802c884:	6039      	str	r1, [r7, #0]
 802c886:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802c888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802c88c:	2b00      	cmp	r3, #0
 802c88e:	db0a      	blt.n	802c8a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802c890:	683b      	ldr	r3, [r7, #0]
 802c892:	b2da      	uxtb	r2, r3
 802c894:	490c      	ldr	r1, [pc, #48]	; (802c8c8 <__NVIC_SetPriority+0x4c>)
 802c896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802c89a:	0112      	lsls	r2, r2, #4
 802c89c:	b2d2      	uxtb	r2, r2
 802c89e:	440b      	add	r3, r1
 802c8a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802c8a4:	e00a      	b.n	802c8bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802c8a6:	683b      	ldr	r3, [r7, #0]
 802c8a8:	b2da      	uxtb	r2, r3
 802c8aa:	4908      	ldr	r1, [pc, #32]	; (802c8cc <__NVIC_SetPriority+0x50>)
 802c8ac:	88fb      	ldrh	r3, [r7, #6]
 802c8ae:	f003 030f 	and.w	r3, r3, #15
 802c8b2:	3b04      	subs	r3, #4
 802c8b4:	0112      	lsls	r2, r2, #4
 802c8b6:	b2d2      	uxtb	r2, r2
 802c8b8:	440b      	add	r3, r1
 802c8ba:	761a      	strb	r2, [r3, #24]
}
 802c8bc:	bf00      	nop
 802c8be:	370c      	adds	r7, #12
 802c8c0:	46bd      	mov	sp, r7
 802c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c8c6:	4770      	bx	lr
 802c8c8:	e000e100 	.word	0xe000e100
 802c8cc:	e000ed00 	.word	0xe000ed00

0802c8d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802c8d0:	b480      	push	{r7}
 802c8d2:	b089      	sub	sp, #36	; 0x24
 802c8d4:	af00      	add	r7, sp, #0
 802c8d6:	60f8      	str	r0, [r7, #12]
 802c8d8:	60b9      	str	r1, [r7, #8]
 802c8da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802c8dc:	68fb      	ldr	r3, [r7, #12]
 802c8de:	f003 0307 	and.w	r3, r3, #7
 802c8e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802c8e4:	69fb      	ldr	r3, [r7, #28]
 802c8e6:	f1c3 0307 	rsb	r3, r3, #7
 802c8ea:	2b04      	cmp	r3, #4
 802c8ec:	bf28      	it	cs
 802c8ee:	2304      	movcs	r3, #4
 802c8f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802c8f2:	69fb      	ldr	r3, [r7, #28]
 802c8f4:	3304      	adds	r3, #4
 802c8f6:	2b06      	cmp	r3, #6
 802c8f8:	d902      	bls.n	802c900 <NVIC_EncodePriority+0x30>
 802c8fa:	69fb      	ldr	r3, [r7, #28]
 802c8fc:	3b03      	subs	r3, #3
 802c8fe:	e000      	b.n	802c902 <NVIC_EncodePriority+0x32>
 802c900:	2300      	movs	r3, #0
 802c902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802c904:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802c908:	69bb      	ldr	r3, [r7, #24]
 802c90a:	fa02 f303 	lsl.w	r3, r2, r3
 802c90e:	43da      	mvns	r2, r3
 802c910:	68bb      	ldr	r3, [r7, #8]
 802c912:	401a      	ands	r2, r3
 802c914:	697b      	ldr	r3, [r7, #20]
 802c916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802c918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802c91c:	697b      	ldr	r3, [r7, #20]
 802c91e:	fa01 f303 	lsl.w	r3, r1, r3
 802c922:	43d9      	mvns	r1, r3
 802c924:	687b      	ldr	r3, [r7, #4]
 802c926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802c928:	4313      	orrs	r3, r2
         );
}
 802c92a:	4618      	mov	r0, r3
 802c92c:	3724      	adds	r7, #36	; 0x24
 802c92e:	46bd      	mov	sp, r7
 802c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c934:	4770      	bx	lr
	...

0802c938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802c938:	b580      	push	{r7, lr}
 802c93a:	b082      	sub	sp, #8
 802c93c:	af00      	add	r7, sp, #0
 802c93e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802c940:	687b      	ldr	r3, [r7, #4]
 802c942:	3b01      	subs	r3, #1
 802c944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802c948:	d301      	bcc.n	802c94e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802c94a:	2301      	movs	r3, #1
 802c94c:	e00f      	b.n	802c96e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802c94e:	4a0a      	ldr	r2, [pc, #40]	; (802c978 <SysTick_Config+0x40>)
 802c950:	687b      	ldr	r3, [r7, #4]
 802c952:	3b01      	subs	r3, #1
 802c954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802c956:	210f      	movs	r1, #15
 802c958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c95c:	f7ff ff8e 	bl	802c87c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802c960:	4b05      	ldr	r3, [pc, #20]	; (802c978 <SysTick_Config+0x40>)
 802c962:	2200      	movs	r2, #0
 802c964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802c966:	4b04      	ldr	r3, [pc, #16]	; (802c978 <SysTick_Config+0x40>)
 802c968:	2207      	movs	r2, #7
 802c96a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802c96c:	2300      	movs	r3, #0
}
 802c96e:	4618      	mov	r0, r3
 802c970:	3708      	adds	r7, #8
 802c972:	46bd      	mov	sp, r7
 802c974:	bd80      	pop	{r7, pc}
 802c976:	bf00      	nop
 802c978:	e000e010 	.word	0xe000e010

0802c97c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802c97c:	b580      	push	{r7, lr}
 802c97e:	b082      	sub	sp, #8
 802c980:	af00      	add	r7, sp, #0
 802c982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802c984:	6878      	ldr	r0, [r7, #4]
 802c986:	f7ff ff29 	bl	802c7dc <__NVIC_SetPriorityGrouping>
}
 802c98a:	bf00      	nop
 802c98c:	3708      	adds	r7, #8
 802c98e:	46bd      	mov	sp, r7
 802c990:	bd80      	pop	{r7, pc}

0802c992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802c992:	b580      	push	{r7, lr}
 802c994:	b086      	sub	sp, #24
 802c996:	af00      	add	r7, sp, #0
 802c998:	4603      	mov	r3, r0
 802c99a:	60b9      	str	r1, [r7, #8]
 802c99c:	607a      	str	r2, [r7, #4]
 802c99e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802c9a0:	f7ff ff40 	bl	802c824 <__NVIC_GetPriorityGrouping>
 802c9a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802c9a6:	687a      	ldr	r2, [r7, #4]
 802c9a8:	68b9      	ldr	r1, [r7, #8]
 802c9aa:	6978      	ldr	r0, [r7, #20]
 802c9ac:	f7ff ff90 	bl	802c8d0 <NVIC_EncodePriority>
 802c9b0:	4602      	mov	r2, r0
 802c9b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802c9b6:	4611      	mov	r1, r2
 802c9b8:	4618      	mov	r0, r3
 802c9ba:	f7ff ff5f 	bl	802c87c <__NVIC_SetPriority>
}
 802c9be:	bf00      	nop
 802c9c0:	3718      	adds	r7, #24
 802c9c2:	46bd      	mov	sp, r7
 802c9c4:	bd80      	pop	{r7, pc}

0802c9c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802c9c6:	b580      	push	{r7, lr}
 802c9c8:	b082      	sub	sp, #8
 802c9ca:	af00      	add	r7, sp, #0
 802c9cc:	4603      	mov	r3, r0
 802c9ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802c9d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802c9d4:	4618      	mov	r0, r3
 802c9d6:	f7ff ff33 	bl	802c840 <__NVIC_EnableIRQ>
}
 802c9da:	bf00      	nop
 802c9dc:	3708      	adds	r7, #8
 802c9de:	46bd      	mov	sp, r7
 802c9e0:	bd80      	pop	{r7, pc}

0802c9e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802c9e2:	b580      	push	{r7, lr}
 802c9e4:	b082      	sub	sp, #8
 802c9e6:	af00      	add	r7, sp, #0
 802c9e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802c9ea:	6878      	ldr	r0, [r7, #4]
 802c9ec:	f7ff ffa4 	bl	802c938 <SysTick_Config>
 802c9f0:	4603      	mov	r3, r0
}
 802c9f2:	4618      	mov	r0, r3
 802c9f4:	3708      	adds	r7, #8
 802c9f6:	46bd      	mov	sp, r7
 802c9f8:	bd80      	pop	{r7, pc}

0802c9fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 802c9fa:	b580      	push	{r7, lr}
 802c9fc:	b082      	sub	sp, #8
 802c9fe:	af00      	add	r7, sp, #0
 802ca00:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 802ca02:	687b      	ldr	r3, [r7, #4]
 802ca04:	2b00      	cmp	r3, #0
 802ca06:	d101      	bne.n	802ca0c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 802ca08:	2301      	movs	r3, #1
 802ca0a:	e014      	b.n	802ca36 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 802ca0c:	687b      	ldr	r3, [r7, #4]
 802ca0e:	791b      	ldrb	r3, [r3, #4]
 802ca10:	b2db      	uxtb	r3, r3
 802ca12:	2b00      	cmp	r3, #0
 802ca14:	d105      	bne.n	802ca22 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 802ca16:	687b      	ldr	r3, [r7, #4]
 802ca18:	2200      	movs	r2, #0
 802ca1a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 802ca1c:	6878      	ldr	r0, [r7, #4]
 802ca1e:	f7fe f867 	bl	802aaf0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 802ca22:	687b      	ldr	r3, [r7, #4]
 802ca24:	2202      	movs	r2, #2
 802ca26:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 802ca28:	687b      	ldr	r3, [r7, #4]
 802ca2a:	2200      	movs	r2, #0
 802ca2c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 802ca2e:	687b      	ldr	r3, [r7, #4]
 802ca30:	2201      	movs	r2, #1
 802ca32:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 802ca34:	2300      	movs	r3, #0
}
 802ca36:	4618      	mov	r0, r3
 802ca38:	3708      	adds	r7, #8
 802ca3a:	46bd      	mov	sp, r7
 802ca3c:	bd80      	pop	{r7, pc}

0802ca3e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 802ca3e:	b480      	push	{r7}
 802ca40:	b083      	sub	sp, #12
 802ca42:	af00      	add	r7, sp, #0
 802ca44:	6078      	str	r0, [r7, #4]
 802ca46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802ca48:	687b      	ldr	r3, [r7, #4]
 802ca4a:	795b      	ldrb	r3, [r3, #5]
 802ca4c:	2b01      	cmp	r3, #1
 802ca4e:	d101      	bne.n	802ca54 <HAL_DAC_Start+0x16>
 802ca50:	2302      	movs	r3, #2
 802ca52:	e040      	b.n	802cad6 <HAL_DAC_Start+0x98>
 802ca54:	687b      	ldr	r3, [r7, #4]
 802ca56:	2201      	movs	r2, #1
 802ca58:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802ca5a:	687b      	ldr	r3, [r7, #4]
 802ca5c:	2202      	movs	r2, #2
 802ca5e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 802ca60:	687b      	ldr	r3, [r7, #4]
 802ca62:	681b      	ldr	r3, [r3, #0]
 802ca64:	6819      	ldr	r1, [r3, #0]
 802ca66:	683b      	ldr	r3, [r7, #0]
 802ca68:	f003 0310 	and.w	r3, r3, #16
 802ca6c:	2201      	movs	r2, #1
 802ca6e:	409a      	lsls	r2, r3
 802ca70:	687b      	ldr	r3, [r7, #4]
 802ca72:	681b      	ldr	r3, [r3, #0]
 802ca74:	430a      	orrs	r2, r1
 802ca76:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 802ca78:	683b      	ldr	r3, [r7, #0]
 802ca7a:	2b00      	cmp	r3, #0
 802ca7c:	d10f      	bne.n	802ca9e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 802ca7e:	687b      	ldr	r3, [r7, #4]
 802ca80:	681b      	ldr	r3, [r3, #0]
 802ca82:	681b      	ldr	r3, [r3, #0]
 802ca84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802ca88:	2b02      	cmp	r3, #2
 802ca8a:	d11d      	bne.n	802cac8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 802ca8c:	687b      	ldr	r3, [r7, #4]
 802ca8e:	681b      	ldr	r3, [r3, #0]
 802ca90:	685a      	ldr	r2, [r3, #4]
 802ca92:	687b      	ldr	r3, [r7, #4]
 802ca94:	681b      	ldr	r3, [r3, #0]
 802ca96:	f042 0201 	orr.w	r2, r2, #1
 802ca9a:	605a      	str	r2, [r3, #4]
 802ca9c:	e014      	b.n	802cac8 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 802ca9e:	687b      	ldr	r3, [r7, #4]
 802caa0:	681b      	ldr	r3, [r3, #0]
 802caa2:	681b      	ldr	r3, [r3, #0]
 802caa4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 802caa8:	683b      	ldr	r3, [r7, #0]
 802caaa:	f003 0310 	and.w	r3, r3, #16
 802caae:	2102      	movs	r1, #2
 802cab0:	fa01 f303 	lsl.w	r3, r1, r3
 802cab4:	429a      	cmp	r2, r3
 802cab6:	d107      	bne.n	802cac8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 802cab8:	687b      	ldr	r3, [r7, #4]
 802caba:	681b      	ldr	r3, [r3, #0]
 802cabc:	685a      	ldr	r2, [r3, #4]
 802cabe:	687b      	ldr	r3, [r7, #4]
 802cac0:	681b      	ldr	r3, [r3, #0]
 802cac2:	f042 0202 	orr.w	r2, r2, #2
 802cac6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802cac8:	687b      	ldr	r3, [r7, #4]
 802caca:	2201      	movs	r2, #1
 802cacc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802cace:	687b      	ldr	r3, [r7, #4]
 802cad0:	2200      	movs	r2, #0
 802cad2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802cad4:	2300      	movs	r3, #0
}
 802cad6:	4618      	mov	r0, r3
 802cad8:	370c      	adds	r7, #12
 802cada:	46bd      	mov	sp, r7
 802cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cae0:	4770      	bx	lr

0802cae2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 802cae2:	b480      	push	{r7}
 802cae4:	b087      	sub	sp, #28
 802cae6:	af00      	add	r7, sp, #0
 802cae8:	60f8      	str	r0, [r7, #12]
 802caea:	60b9      	str	r1, [r7, #8]
 802caec:	607a      	str	r2, [r7, #4]
 802caee:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 802caf0:	2300      	movs	r3, #0
 802caf2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 802caf4:	68fb      	ldr	r3, [r7, #12]
 802caf6:	681b      	ldr	r3, [r3, #0]
 802caf8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 802cafa:	68bb      	ldr	r3, [r7, #8]
 802cafc:	2b00      	cmp	r3, #0
 802cafe:	d105      	bne.n	802cb0c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 802cb00:	697a      	ldr	r2, [r7, #20]
 802cb02:	687b      	ldr	r3, [r7, #4]
 802cb04:	4413      	add	r3, r2
 802cb06:	3308      	adds	r3, #8
 802cb08:	617b      	str	r3, [r7, #20]
 802cb0a:	e004      	b.n	802cb16 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 802cb0c:	697a      	ldr	r2, [r7, #20]
 802cb0e:	687b      	ldr	r3, [r7, #4]
 802cb10:	4413      	add	r3, r2
 802cb12:	3314      	adds	r3, #20
 802cb14:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 802cb16:	697b      	ldr	r3, [r7, #20]
 802cb18:	461a      	mov	r2, r3
 802cb1a:	683b      	ldr	r3, [r7, #0]
 802cb1c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 802cb1e:	2300      	movs	r3, #0
}
 802cb20:	4618      	mov	r0, r3
 802cb22:	371c      	adds	r7, #28
 802cb24:	46bd      	mov	sp, r7
 802cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb2a:	4770      	bx	lr

0802cb2c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 802cb2c:	b580      	push	{r7, lr}
 802cb2e:	b088      	sub	sp, #32
 802cb30:	af00      	add	r7, sp, #0
 802cb32:	60f8      	str	r0, [r7, #12]
 802cb34:	60b9      	str	r1, [r7, #8]
 802cb36:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802cb38:	68fb      	ldr	r3, [r7, #12]
 802cb3a:	795b      	ldrb	r3, [r3, #5]
 802cb3c:	2b01      	cmp	r3, #1
 802cb3e:	d101      	bne.n	802cb44 <HAL_DAC_ConfigChannel+0x18>
 802cb40:	2302      	movs	r3, #2
 802cb42:	e11d      	b.n	802cd80 <HAL_DAC_ConfigChannel+0x254>
 802cb44:	68fb      	ldr	r3, [r7, #12]
 802cb46:	2201      	movs	r2, #1
 802cb48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802cb4a:	68fb      	ldr	r3, [r7, #12]
 802cb4c:	2202      	movs	r2, #2
 802cb4e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 802cb50:	68bb      	ldr	r3, [r7, #8]
 802cb52:	681b      	ldr	r3, [r3, #0]
 802cb54:	2b04      	cmp	r3, #4
 802cb56:	d174      	bne.n	802cc42 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 802cb58:	f7ff fc1c 	bl	802c394 <HAL_GetTick>
 802cb5c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 802cb5e:	687b      	ldr	r3, [r7, #4]
 802cb60:	2b00      	cmp	r3, #0
 802cb62:	d134      	bne.n	802cbce <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802cb64:	e011      	b.n	802cb8a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802cb66:	f7ff fc15 	bl	802c394 <HAL_GetTick>
 802cb6a:	4602      	mov	r2, r0
 802cb6c:	69bb      	ldr	r3, [r7, #24]
 802cb6e:	1ad3      	subs	r3, r2, r3
 802cb70:	2b01      	cmp	r3, #1
 802cb72:	d90a      	bls.n	802cb8a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802cb74:	68fb      	ldr	r3, [r7, #12]
 802cb76:	691b      	ldr	r3, [r3, #16]
 802cb78:	f043 0208 	orr.w	r2, r3, #8
 802cb7c:	68fb      	ldr	r3, [r7, #12]
 802cb7e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802cb80:	68fb      	ldr	r3, [r7, #12]
 802cb82:	2203      	movs	r2, #3
 802cb84:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802cb86:	2303      	movs	r3, #3
 802cb88:	e0fa      	b.n	802cd80 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802cb8a:	68fb      	ldr	r3, [r7, #12]
 802cb8c:	681b      	ldr	r3, [r3, #0]
 802cb8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802cb90:	4b7d      	ldr	r3, [pc, #500]	; (802cd88 <HAL_DAC_ConfigChannel+0x25c>)
 802cb92:	4013      	ands	r3, r2
 802cb94:	2b00      	cmp	r3, #0
 802cb96:	d1e6      	bne.n	802cb66 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 802cb98:	2001      	movs	r0, #1
 802cb9a:	f7ff fc07 	bl	802c3ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802cb9e:	68fb      	ldr	r3, [r7, #12]
 802cba0:	681b      	ldr	r3, [r3, #0]
 802cba2:	68ba      	ldr	r2, [r7, #8]
 802cba4:	6992      	ldr	r2, [r2, #24]
 802cba6:	641a      	str	r2, [r3, #64]	; 0x40
 802cba8:	e01e      	b.n	802cbe8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802cbaa:	f7ff fbf3 	bl	802c394 <HAL_GetTick>
 802cbae:	4602      	mov	r2, r0
 802cbb0:	69bb      	ldr	r3, [r7, #24]
 802cbb2:	1ad3      	subs	r3, r2, r3
 802cbb4:	2b01      	cmp	r3, #1
 802cbb6:	d90a      	bls.n	802cbce <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802cbb8:	68fb      	ldr	r3, [r7, #12]
 802cbba:	691b      	ldr	r3, [r3, #16]
 802cbbc:	f043 0208 	orr.w	r2, r3, #8
 802cbc0:	68fb      	ldr	r3, [r7, #12]
 802cbc2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802cbc4:	68fb      	ldr	r3, [r7, #12]
 802cbc6:	2203      	movs	r2, #3
 802cbc8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802cbca:	2303      	movs	r3, #3
 802cbcc:	e0d8      	b.n	802cd80 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 802cbce:	68fb      	ldr	r3, [r7, #12]
 802cbd0:	681b      	ldr	r3, [r3, #0]
 802cbd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802cbd4:	2b00      	cmp	r3, #0
 802cbd6:	dbe8      	blt.n	802cbaa <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 802cbd8:	2001      	movs	r0, #1
 802cbda:	f7ff fbe7 	bl	802c3ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802cbde:	68fb      	ldr	r3, [r7, #12]
 802cbe0:	681b      	ldr	r3, [r3, #0]
 802cbe2:	68ba      	ldr	r2, [r7, #8]
 802cbe4:	6992      	ldr	r2, [r2, #24]
 802cbe6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 802cbe8:	68fb      	ldr	r3, [r7, #12]
 802cbea:	681b      	ldr	r3, [r3, #0]
 802cbec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802cbee:	687b      	ldr	r3, [r7, #4]
 802cbf0:	f003 0310 	and.w	r3, r3, #16
 802cbf4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802cbf8:	fa01 f303 	lsl.w	r3, r1, r3
 802cbfc:	43db      	mvns	r3, r3
 802cbfe:	ea02 0103 	and.w	r1, r2, r3
 802cc02:	68bb      	ldr	r3, [r7, #8]
 802cc04:	69da      	ldr	r2, [r3, #28]
 802cc06:	687b      	ldr	r3, [r7, #4]
 802cc08:	f003 0310 	and.w	r3, r3, #16
 802cc0c:	409a      	lsls	r2, r3
 802cc0e:	68fb      	ldr	r3, [r7, #12]
 802cc10:	681b      	ldr	r3, [r3, #0]
 802cc12:	430a      	orrs	r2, r1
 802cc14:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 802cc16:	68fb      	ldr	r3, [r7, #12]
 802cc18:	681b      	ldr	r3, [r3, #0]
 802cc1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802cc1c:	687b      	ldr	r3, [r7, #4]
 802cc1e:	f003 0310 	and.w	r3, r3, #16
 802cc22:	21ff      	movs	r1, #255	; 0xff
 802cc24:	fa01 f303 	lsl.w	r3, r1, r3
 802cc28:	43db      	mvns	r3, r3
 802cc2a:	ea02 0103 	and.w	r1, r2, r3
 802cc2e:	68bb      	ldr	r3, [r7, #8]
 802cc30:	6a1a      	ldr	r2, [r3, #32]
 802cc32:	687b      	ldr	r3, [r7, #4]
 802cc34:	f003 0310 	and.w	r3, r3, #16
 802cc38:	409a      	lsls	r2, r3
 802cc3a:	68fb      	ldr	r3, [r7, #12]
 802cc3c:	681b      	ldr	r3, [r3, #0]
 802cc3e:	430a      	orrs	r2, r1
 802cc40:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 802cc42:	68bb      	ldr	r3, [r7, #8]
 802cc44:	691b      	ldr	r3, [r3, #16]
 802cc46:	2b01      	cmp	r3, #1
 802cc48:	d11d      	bne.n	802cc86 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 802cc4a:	68fb      	ldr	r3, [r7, #12]
 802cc4c:	681b      	ldr	r3, [r3, #0]
 802cc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cc50:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 802cc52:	687b      	ldr	r3, [r7, #4]
 802cc54:	f003 0310 	and.w	r3, r3, #16
 802cc58:	221f      	movs	r2, #31
 802cc5a:	fa02 f303 	lsl.w	r3, r2, r3
 802cc5e:	43db      	mvns	r3, r3
 802cc60:	697a      	ldr	r2, [r7, #20]
 802cc62:	4013      	ands	r3, r2
 802cc64:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 802cc66:	68bb      	ldr	r3, [r7, #8]
 802cc68:	695b      	ldr	r3, [r3, #20]
 802cc6a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802cc6c:	687b      	ldr	r3, [r7, #4]
 802cc6e:	f003 0310 	and.w	r3, r3, #16
 802cc72:	693a      	ldr	r2, [r7, #16]
 802cc74:	fa02 f303 	lsl.w	r3, r2, r3
 802cc78:	697a      	ldr	r2, [r7, #20]
 802cc7a:	4313      	orrs	r3, r2
 802cc7c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 802cc7e:	68fb      	ldr	r3, [r7, #12]
 802cc80:	681b      	ldr	r3, [r3, #0]
 802cc82:	697a      	ldr	r2, [r7, #20]
 802cc84:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 802cc86:	68fb      	ldr	r3, [r7, #12]
 802cc88:	681b      	ldr	r3, [r3, #0]
 802cc8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802cc8c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 802cc8e:	687b      	ldr	r3, [r7, #4]
 802cc90:	f003 0310 	and.w	r3, r3, #16
 802cc94:	2207      	movs	r2, #7
 802cc96:	fa02 f303 	lsl.w	r3, r2, r3
 802cc9a:	43db      	mvns	r3, r3
 802cc9c:	697a      	ldr	r2, [r7, #20]
 802cc9e:	4013      	ands	r3, r2
 802cca0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 802cca2:	68bb      	ldr	r3, [r7, #8]
 802cca4:	68db      	ldr	r3, [r3, #12]
 802cca6:	2b01      	cmp	r3, #1
 802cca8:	d102      	bne.n	802ccb0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 802ccaa:	2300      	movs	r3, #0
 802ccac:	61fb      	str	r3, [r7, #28]
 802ccae:	e00f      	b.n	802ccd0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 802ccb0:	68bb      	ldr	r3, [r7, #8]
 802ccb2:	68db      	ldr	r3, [r3, #12]
 802ccb4:	2b02      	cmp	r3, #2
 802ccb6:	d102      	bne.n	802ccbe <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 802ccb8:	2301      	movs	r3, #1
 802ccba:	61fb      	str	r3, [r7, #28]
 802ccbc:	e008      	b.n	802ccd0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 802ccbe:	68bb      	ldr	r3, [r7, #8]
 802ccc0:	689b      	ldr	r3, [r3, #8]
 802ccc2:	2b00      	cmp	r3, #0
 802ccc4:	d102      	bne.n	802cccc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 802ccc6:	2301      	movs	r3, #1
 802ccc8:	61fb      	str	r3, [r7, #28]
 802ccca:	e001      	b.n	802ccd0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 802cccc:	2300      	movs	r3, #0
 802ccce:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 802ccd0:	68bb      	ldr	r3, [r7, #8]
 802ccd2:	681a      	ldr	r2, [r3, #0]
 802ccd4:	68bb      	ldr	r3, [r7, #8]
 802ccd6:	689b      	ldr	r3, [r3, #8]
 802ccd8:	4313      	orrs	r3, r2
 802ccda:	69fa      	ldr	r2, [r7, #28]
 802ccdc:	4313      	orrs	r3, r2
 802ccde:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802cce0:	687b      	ldr	r3, [r7, #4]
 802cce2:	f003 0310 	and.w	r3, r3, #16
 802cce6:	693a      	ldr	r2, [r7, #16]
 802cce8:	fa02 f303 	lsl.w	r3, r2, r3
 802ccec:	697a      	ldr	r2, [r7, #20]
 802ccee:	4313      	orrs	r3, r2
 802ccf0:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 802ccf2:	68fb      	ldr	r3, [r7, #12]
 802ccf4:	681b      	ldr	r3, [r3, #0]
 802ccf6:	697a      	ldr	r2, [r7, #20]
 802ccf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 802ccfa:	68fb      	ldr	r3, [r7, #12]
 802ccfc:	681b      	ldr	r3, [r3, #0]
 802ccfe:	6819      	ldr	r1, [r3, #0]
 802cd00:	687b      	ldr	r3, [r7, #4]
 802cd02:	f003 0310 	and.w	r3, r3, #16
 802cd06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802cd0a:	fa02 f303 	lsl.w	r3, r2, r3
 802cd0e:	43da      	mvns	r2, r3
 802cd10:	68fb      	ldr	r3, [r7, #12]
 802cd12:	681b      	ldr	r3, [r3, #0]
 802cd14:	400a      	ands	r2, r1
 802cd16:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 802cd18:	68fb      	ldr	r3, [r7, #12]
 802cd1a:	681b      	ldr	r3, [r3, #0]
 802cd1c:	681b      	ldr	r3, [r3, #0]
 802cd1e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 802cd20:	687b      	ldr	r3, [r7, #4]
 802cd22:	f003 0310 	and.w	r3, r3, #16
 802cd26:	f640 72fe 	movw	r2, #4094	; 0xffe
 802cd2a:	fa02 f303 	lsl.w	r3, r2, r3
 802cd2e:	43db      	mvns	r3, r3
 802cd30:	697a      	ldr	r2, [r7, #20]
 802cd32:	4013      	ands	r3, r2
 802cd34:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 802cd36:	68bb      	ldr	r3, [r7, #8]
 802cd38:	685b      	ldr	r3, [r3, #4]
 802cd3a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802cd3c:	687b      	ldr	r3, [r7, #4]
 802cd3e:	f003 0310 	and.w	r3, r3, #16
 802cd42:	693a      	ldr	r2, [r7, #16]
 802cd44:	fa02 f303 	lsl.w	r3, r2, r3
 802cd48:	697a      	ldr	r2, [r7, #20]
 802cd4a:	4313      	orrs	r3, r2
 802cd4c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 802cd4e:	68fb      	ldr	r3, [r7, #12]
 802cd50:	681b      	ldr	r3, [r3, #0]
 802cd52:	697a      	ldr	r2, [r7, #20]
 802cd54:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 802cd56:	68fb      	ldr	r3, [r7, #12]
 802cd58:	681b      	ldr	r3, [r3, #0]
 802cd5a:	6819      	ldr	r1, [r3, #0]
 802cd5c:	687b      	ldr	r3, [r7, #4]
 802cd5e:	f003 0310 	and.w	r3, r3, #16
 802cd62:	22c0      	movs	r2, #192	; 0xc0
 802cd64:	fa02 f303 	lsl.w	r3, r2, r3
 802cd68:	43da      	mvns	r2, r3
 802cd6a:	68fb      	ldr	r3, [r7, #12]
 802cd6c:	681b      	ldr	r3, [r3, #0]
 802cd6e:	400a      	ands	r2, r1
 802cd70:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802cd72:	68fb      	ldr	r3, [r7, #12]
 802cd74:	2201      	movs	r2, #1
 802cd76:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802cd78:	68fb      	ldr	r3, [r7, #12]
 802cd7a:	2200      	movs	r2, #0
 802cd7c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802cd7e:	2300      	movs	r3, #0
}
 802cd80:	4618      	mov	r0, r3
 802cd82:	3720      	adds	r7, #32
 802cd84:	46bd      	mov	sp, r7
 802cd86:	bd80      	pop	{r7, pc}
 802cd88:	20008000 	.word	0x20008000

0802cd8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802cd8c:	b580      	push	{r7, lr}
 802cd8e:	b086      	sub	sp, #24
 802cd90:	af00      	add	r7, sp, #0
 802cd92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 802cd94:	f7ff fafe 	bl	802c394 <HAL_GetTick>
 802cd98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802cd9a:	687b      	ldr	r3, [r7, #4]
 802cd9c:	2b00      	cmp	r3, #0
 802cd9e:	d101      	bne.n	802cda4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 802cda0:	2301      	movs	r3, #1
 802cda2:	e316      	b.n	802d3d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802cda4:	687b      	ldr	r3, [r7, #4]
 802cda6:	681b      	ldr	r3, [r3, #0]
 802cda8:	4a66      	ldr	r2, [pc, #408]	; (802cf44 <HAL_DMA_Init+0x1b8>)
 802cdaa:	4293      	cmp	r3, r2
 802cdac:	d04a      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802cdae:	687b      	ldr	r3, [r7, #4]
 802cdb0:	681b      	ldr	r3, [r3, #0]
 802cdb2:	4a65      	ldr	r2, [pc, #404]	; (802cf48 <HAL_DMA_Init+0x1bc>)
 802cdb4:	4293      	cmp	r3, r2
 802cdb6:	d045      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802cdb8:	687b      	ldr	r3, [r7, #4]
 802cdba:	681b      	ldr	r3, [r3, #0]
 802cdbc:	4a63      	ldr	r2, [pc, #396]	; (802cf4c <HAL_DMA_Init+0x1c0>)
 802cdbe:	4293      	cmp	r3, r2
 802cdc0:	d040      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802cdc2:	687b      	ldr	r3, [r7, #4]
 802cdc4:	681b      	ldr	r3, [r3, #0]
 802cdc6:	4a62      	ldr	r2, [pc, #392]	; (802cf50 <HAL_DMA_Init+0x1c4>)
 802cdc8:	4293      	cmp	r3, r2
 802cdca:	d03b      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802cdcc:	687b      	ldr	r3, [r7, #4]
 802cdce:	681b      	ldr	r3, [r3, #0]
 802cdd0:	4a60      	ldr	r2, [pc, #384]	; (802cf54 <HAL_DMA_Init+0x1c8>)
 802cdd2:	4293      	cmp	r3, r2
 802cdd4:	d036      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802cdd6:	687b      	ldr	r3, [r7, #4]
 802cdd8:	681b      	ldr	r3, [r3, #0]
 802cdda:	4a5f      	ldr	r2, [pc, #380]	; (802cf58 <HAL_DMA_Init+0x1cc>)
 802cddc:	4293      	cmp	r3, r2
 802cdde:	d031      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802cde0:	687b      	ldr	r3, [r7, #4]
 802cde2:	681b      	ldr	r3, [r3, #0]
 802cde4:	4a5d      	ldr	r2, [pc, #372]	; (802cf5c <HAL_DMA_Init+0x1d0>)
 802cde6:	4293      	cmp	r3, r2
 802cde8:	d02c      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802cdea:	687b      	ldr	r3, [r7, #4]
 802cdec:	681b      	ldr	r3, [r3, #0]
 802cdee:	4a5c      	ldr	r2, [pc, #368]	; (802cf60 <HAL_DMA_Init+0x1d4>)
 802cdf0:	4293      	cmp	r3, r2
 802cdf2:	d027      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802cdf4:	687b      	ldr	r3, [r7, #4]
 802cdf6:	681b      	ldr	r3, [r3, #0]
 802cdf8:	4a5a      	ldr	r2, [pc, #360]	; (802cf64 <HAL_DMA_Init+0x1d8>)
 802cdfa:	4293      	cmp	r3, r2
 802cdfc:	d022      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802cdfe:	687b      	ldr	r3, [r7, #4]
 802ce00:	681b      	ldr	r3, [r3, #0]
 802ce02:	4a59      	ldr	r2, [pc, #356]	; (802cf68 <HAL_DMA_Init+0x1dc>)
 802ce04:	4293      	cmp	r3, r2
 802ce06:	d01d      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802ce08:	687b      	ldr	r3, [r7, #4]
 802ce0a:	681b      	ldr	r3, [r3, #0]
 802ce0c:	4a57      	ldr	r2, [pc, #348]	; (802cf6c <HAL_DMA_Init+0x1e0>)
 802ce0e:	4293      	cmp	r3, r2
 802ce10:	d018      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802ce12:	687b      	ldr	r3, [r7, #4]
 802ce14:	681b      	ldr	r3, [r3, #0]
 802ce16:	4a56      	ldr	r2, [pc, #344]	; (802cf70 <HAL_DMA_Init+0x1e4>)
 802ce18:	4293      	cmp	r3, r2
 802ce1a:	d013      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802ce1c:	687b      	ldr	r3, [r7, #4]
 802ce1e:	681b      	ldr	r3, [r3, #0]
 802ce20:	4a54      	ldr	r2, [pc, #336]	; (802cf74 <HAL_DMA_Init+0x1e8>)
 802ce22:	4293      	cmp	r3, r2
 802ce24:	d00e      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802ce26:	687b      	ldr	r3, [r7, #4]
 802ce28:	681b      	ldr	r3, [r3, #0]
 802ce2a:	4a53      	ldr	r2, [pc, #332]	; (802cf78 <HAL_DMA_Init+0x1ec>)
 802ce2c:	4293      	cmp	r3, r2
 802ce2e:	d009      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802ce30:	687b      	ldr	r3, [r7, #4]
 802ce32:	681b      	ldr	r3, [r3, #0]
 802ce34:	4a51      	ldr	r2, [pc, #324]	; (802cf7c <HAL_DMA_Init+0x1f0>)
 802ce36:	4293      	cmp	r3, r2
 802ce38:	d004      	beq.n	802ce44 <HAL_DMA_Init+0xb8>
 802ce3a:	687b      	ldr	r3, [r7, #4]
 802ce3c:	681b      	ldr	r3, [r3, #0]
 802ce3e:	4a50      	ldr	r2, [pc, #320]	; (802cf80 <HAL_DMA_Init+0x1f4>)
 802ce40:	4293      	cmp	r3, r2
 802ce42:	d101      	bne.n	802ce48 <HAL_DMA_Init+0xbc>
 802ce44:	2301      	movs	r3, #1
 802ce46:	e000      	b.n	802ce4a <HAL_DMA_Init+0xbe>
 802ce48:	2300      	movs	r3, #0
 802ce4a:	2b00      	cmp	r3, #0
 802ce4c:	f000 813b 	beq.w	802d0c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802ce50:	687b      	ldr	r3, [r7, #4]
 802ce52:	2202      	movs	r2, #2
 802ce54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802ce58:	687b      	ldr	r3, [r7, #4]
 802ce5a:	2200      	movs	r2, #0
 802ce5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802ce60:	687b      	ldr	r3, [r7, #4]
 802ce62:	681b      	ldr	r3, [r3, #0]
 802ce64:	4a37      	ldr	r2, [pc, #220]	; (802cf44 <HAL_DMA_Init+0x1b8>)
 802ce66:	4293      	cmp	r3, r2
 802ce68:	d04a      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802ce6a:	687b      	ldr	r3, [r7, #4]
 802ce6c:	681b      	ldr	r3, [r3, #0]
 802ce6e:	4a36      	ldr	r2, [pc, #216]	; (802cf48 <HAL_DMA_Init+0x1bc>)
 802ce70:	4293      	cmp	r3, r2
 802ce72:	d045      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802ce74:	687b      	ldr	r3, [r7, #4]
 802ce76:	681b      	ldr	r3, [r3, #0]
 802ce78:	4a34      	ldr	r2, [pc, #208]	; (802cf4c <HAL_DMA_Init+0x1c0>)
 802ce7a:	4293      	cmp	r3, r2
 802ce7c:	d040      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802ce7e:	687b      	ldr	r3, [r7, #4]
 802ce80:	681b      	ldr	r3, [r3, #0]
 802ce82:	4a33      	ldr	r2, [pc, #204]	; (802cf50 <HAL_DMA_Init+0x1c4>)
 802ce84:	4293      	cmp	r3, r2
 802ce86:	d03b      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802ce88:	687b      	ldr	r3, [r7, #4]
 802ce8a:	681b      	ldr	r3, [r3, #0]
 802ce8c:	4a31      	ldr	r2, [pc, #196]	; (802cf54 <HAL_DMA_Init+0x1c8>)
 802ce8e:	4293      	cmp	r3, r2
 802ce90:	d036      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802ce92:	687b      	ldr	r3, [r7, #4]
 802ce94:	681b      	ldr	r3, [r3, #0]
 802ce96:	4a30      	ldr	r2, [pc, #192]	; (802cf58 <HAL_DMA_Init+0x1cc>)
 802ce98:	4293      	cmp	r3, r2
 802ce9a:	d031      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802ce9c:	687b      	ldr	r3, [r7, #4]
 802ce9e:	681b      	ldr	r3, [r3, #0]
 802cea0:	4a2e      	ldr	r2, [pc, #184]	; (802cf5c <HAL_DMA_Init+0x1d0>)
 802cea2:	4293      	cmp	r3, r2
 802cea4:	d02c      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802cea6:	687b      	ldr	r3, [r7, #4]
 802cea8:	681b      	ldr	r3, [r3, #0]
 802ceaa:	4a2d      	ldr	r2, [pc, #180]	; (802cf60 <HAL_DMA_Init+0x1d4>)
 802ceac:	4293      	cmp	r3, r2
 802ceae:	d027      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802ceb0:	687b      	ldr	r3, [r7, #4]
 802ceb2:	681b      	ldr	r3, [r3, #0]
 802ceb4:	4a2b      	ldr	r2, [pc, #172]	; (802cf64 <HAL_DMA_Init+0x1d8>)
 802ceb6:	4293      	cmp	r3, r2
 802ceb8:	d022      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802ceba:	687b      	ldr	r3, [r7, #4]
 802cebc:	681b      	ldr	r3, [r3, #0]
 802cebe:	4a2a      	ldr	r2, [pc, #168]	; (802cf68 <HAL_DMA_Init+0x1dc>)
 802cec0:	4293      	cmp	r3, r2
 802cec2:	d01d      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802cec4:	687b      	ldr	r3, [r7, #4]
 802cec6:	681b      	ldr	r3, [r3, #0]
 802cec8:	4a28      	ldr	r2, [pc, #160]	; (802cf6c <HAL_DMA_Init+0x1e0>)
 802ceca:	4293      	cmp	r3, r2
 802cecc:	d018      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802cece:	687b      	ldr	r3, [r7, #4]
 802ced0:	681b      	ldr	r3, [r3, #0]
 802ced2:	4a27      	ldr	r2, [pc, #156]	; (802cf70 <HAL_DMA_Init+0x1e4>)
 802ced4:	4293      	cmp	r3, r2
 802ced6:	d013      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802ced8:	687b      	ldr	r3, [r7, #4]
 802ceda:	681b      	ldr	r3, [r3, #0]
 802cedc:	4a25      	ldr	r2, [pc, #148]	; (802cf74 <HAL_DMA_Init+0x1e8>)
 802cede:	4293      	cmp	r3, r2
 802cee0:	d00e      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802cee2:	687b      	ldr	r3, [r7, #4]
 802cee4:	681b      	ldr	r3, [r3, #0]
 802cee6:	4a24      	ldr	r2, [pc, #144]	; (802cf78 <HAL_DMA_Init+0x1ec>)
 802cee8:	4293      	cmp	r3, r2
 802ceea:	d009      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802ceec:	687b      	ldr	r3, [r7, #4]
 802ceee:	681b      	ldr	r3, [r3, #0]
 802cef0:	4a22      	ldr	r2, [pc, #136]	; (802cf7c <HAL_DMA_Init+0x1f0>)
 802cef2:	4293      	cmp	r3, r2
 802cef4:	d004      	beq.n	802cf00 <HAL_DMA_Init+0x174>
 802cef6:	687b      	ldr	r3, [r7, #4]
 802cef8:	681b      	ldr	r3, [r3, #0]
 802cefa:	4a21      	ldr	r2, [pc, #132]	; (802cf80 <HAL_DMA_Init+0x1f4>)
 802cefc:	4293      	cmp	r3, r2
 802cefe:	d108      	bne.n	802cf12 <HAL_DMA_Init+0x186>
 802cf00:	687b      	ldr	r3, [r7, #4]
 802cf02:	681b      	ldr	r3, [r3, #0]
 802cf04:	681a      	ldr	r2, [r3, #0]
 802cf06:	687b      	ldr	r3, [r7, #4]
 802cf08:	681b      	ldr	r3, [r3, #0]
 802cf0a:	f022 0201 	bic.w	r2, r2, #1
 802cf0e:	601a      	str	r2, [r3, #0]
 802cf10:	e007      	b.n	802cf22 <HAL_DMA_Init+0x196>
 802cf12:	687b      	ldr	r3, [r7, #4]
 802cf14:	681b      	ldr	r3, [r3, #0]
 802cf16:	681a      	ldr	r2, [r3, #0]
 802cf18:	687b      	ldr	r3, [r7, #4]
 802cf1a:	681b      	ldr	r3, [r3, #0]
 802cf1c:	f022 0201 	bic.w	r2, r2, #1
 802cf20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802cf22:	e02f      	b.n	802cf84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802cf24:	f7ff fa36 	bl	802c394 <HAL_GetTick>
 802cf28:	4602      	mov	r2, r0
 802cf2a:	693b      	ldr	r3, [r7, #16]
 802cf2c:	1ad3      	subs	r3, r2, r3
 802cf2e:	2b05      	cmp	r3, #5
 802cf30:	d928      	bls.n	802cf84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802cf32:	687b      	ldr	r3, [r7, #4]
 802cf34:	2220      	movs	r2, #32
 802cf36:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802cf38:	687b      	ldr	r3, [r7, #4]
 802cf3a:	2203      	movs	r2, #3
 802cf3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 802cf40:	2301      	movs	r3, #1
 802cf42:	e246      	b.n	802d3d2 <HAL_DMA_Init+0x646>
 802cf44:	40020010 	.word	0x40020010
 802cf48:	40020028 	.word	0x40020028
 802cf4c:	40020040 	.word	0x40020040
 802cf50:	40020058 	.word	0x40020058
 802cf54:	40020070 	.word	0x40020070
 802cf58:	40020088 	.word	0x40020088
 802cf5c:	400200a0 	.word	0x400200a0
 802cf60:	400200b8 	.word	0x400200b8
 802cf64:	40020410 	.word	0x40020410
 802cf68:	40020428 	.word	0x40020428
 802cf6c:	40020440 	.word	0x40020440
 802cf70:	40020458 	.word	0x40020458
 802cf74:	40020470 	.word	0x40020470
 802cf78:	40020488 	.word	0x40020488
 802cf7c:	400204a0 	.word	0x400204a0
 802cf80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802cf84:	687b      	ldr	r3, [r7, #4]
 802cf86:	681b      	ldr	r3, [r3, #0]
 802cf88:	681b      	ldr	r3, [r3, #0]
 802cf8a:	f003 0301 	and.w	r3, r3, #1
 802cf8e:	2b00      	cmp	r3, #0
 802cf90:	d1c8      	bne.n	802cf24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 802cf92:	687b      	ldr	r3, [r7, #4]
 802cf94:	681b      	ldr	r3, [r3, #0]
 802cf96:	681b      	ldr	r3, [r3, #0]
 802cf98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802cf9a:	697a      	ldr	r2, [r7, #20]
 802cf9c:	4b83      	ldr	r3, [pc, #524]	; (802d1ac <HAL_DMA_Init+0x420>)
 802cf9e:	4013      	ands	r3, r2
 802cfa0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 802cfa2:	687b      	ldr	r3, [r7, #4]
 802cfa4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802cfa6:	687b      	ldr	r3, [r7, #4]
 802cfa8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 802cfaa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802cfac:	687b      	ldr	r3, [r7, #4]
 802cfae:	691b      	ldr	r3, [r3, #16]
 802cfb0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802cfb2:	687b      	ldr	r3, [r7, #4]
 802cfb4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802cfb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802cfb8:	687b      	ldr	r3, [r7, #4]
 802cfba:	699b      	ldr	r3, [r3, #24]
 802cfbc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802cfbe:	687b      	ldr	r3, [r7, #4]
 802cfc0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802cfc2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802cfc4:	687b      	ldr	r3, [r7, #4]
 802cfc6:	6a1b      	ldr	r3, [r3, #32]
 802cfc8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 802cfca:	697a      	ldr	r2, [r7, #20]
 802cfcc:	4313      	orrs	r3, r2
 802cfce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802cfd0:	687b      	ldr	r3, [r7, #4]
 802cfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cfd4:	2b04      	cmp	r3, #4
 802cfd6:	d107      	bne.n	802cfe8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802cfd8:	687b      	ldr	r3, [r7, #4]
 802cfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802cfdc:	687b      	ldr	r3, [r7, #4]
 802cfde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cfe0:	4313      	orrs	r3, r2
 802cfe2:	697a      	ldr	r2, [r7, #20]
 802cfe4:	4313      	orrs	r3, r2
 802cfe6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 802cfe8:	4b71      	ldr	r3, [pc, #452]	; (802d1b0 <HAL_DMA_Init+0x424>)
 802cfea:	681a      	ldr	r2, [r3, #0]
 802cfec:	4b71      	ldr	r3, [pc, #452]	; (802d1b4 <HAL_DMA_Init+0x428>)
 802cfee:	4013      	ands	r3, r2
 802cff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802cff4:	d328      	bcc.n	802d048 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 802cff6:	687b      	ldr	r3, [r7, #4]
 802cff8:	685b      	ldr	r3, [r3, #4]
 802cffa:	2b28      	cmp	r3, #40	; 0x28
 802cffc:	d903      	bls.n	802d006 <HAL_DMA_Init+0x27a>
 802cffe:	687b      	ldr	r3, [r7, #4]
 802d000:	685b      	ldr	r3, [r3, #4]
 802d002:	2b2e      	cmp	r3, #46	; 0x2e
 802d004:	d917      	bls.n	802d036 <HAL_DMA_Init+0x2aa>
 802d006:	687b      	ldr	r3, [r7, #4]
 802d008:	685b      	ldr	r3, [r3, #4]
 802d00a:	2b3e      	cmp	r3, #62	; 0x3e
 802d00c:	d903      	bls.n	802d016 <HAL_DMA_Init+0x28a>
 802d00e:	687b      	ldr	r3, [r7, #4]
 802d010:	685b      	ldr	r3, [r3, #4]
 802d012:	2b42      	cmp	r3, #66	; 0x42
 802d014:	d90f      	bls.n	802d036 <HAL_DMA_Init+0x2aa>
 802d016:	687b      	ldr	r3, [r7, #4]
 802d018:	685b      	ldr	r3, [r3, #4]
 802d01a:	2b46      	cmp	r3, #70	; 0x46
 802d01c:	d903      	bls.n	802d026 <HAL_DMA_Init+0x29a>
 802d01e:	687b      	ldr	r3, [r7, #4]
 802d020:	685b      	ldr	r3, [r3, #4]
 802d022:	2b48      	cmp	r3, #72	; 0x48
 802d024:	d907      	bls.n	802d036 <HAL_DMA_Init+0x2aa>
 802d026:	687b      	ldr	r3, [r7, #4]
 802d028:	685b      	ldr	r3, [r3, #4]
 802d02a:	2b4e      	cmp	r3, #78	; 0x4e
 802d02c:	d905      	bls.n	802d03a <HAL_DMA_Init+0x2ae>
 802d02e:	687b      	ldr	r3, [r7, #4]
 802d030:	685b      	ldr	r3, [r3, #4]
 802d032:	2b52      	cmp	r3, #82	; 0x52
 802d034:	d801      	bhi.n	802d03a <HAL_DMA_Init+0x2ae>
 802d036:	2301      	movs	r3, #1
 802d038:	e000      	b.n	802d03c <HAL_DMA_Init+0x2b0>
 802d03a:	2300      	movs	r3, #0
 802d03c:	2b00      	cmp	r3, #0
 802d03e:	d003      	beq.n	802d048 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 802d040:	697b      	ldr	r3, [r7, #20]
 802d042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802d046:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 802d048:	687b      	ldr	r3, [r7, #4]
 802d04a:	681b      	ldr	r3, [r3, #0]
 802d04c:	697a      	ldr	r2, [r7, #20]
 802d04e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 802d050:	687b      	ldr	r3, [r7, #4]
 802d052:	681b      	ldr	r3, [r3, #0]
 802d054:	695b      	ldr	r3, [r3, #20]
 802d056:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802d058:	697b      	ldr	r3, [r7, #20]
 802d05a:	f023 0307 	bic.w	r3, r3, #7
 802d05e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 802d060:	687b      	ldr	r3, [r7, #4]
 802d062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d064:	697a      	ldr	r2, [r7, #20]
 802d066:	4313      	orrs	r3, r2
 802d068:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802d06a:	687b      	ldr	r3, [r7, #4]
 802d06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802d06e:	2b04      	cmp	r3, #4
 802d070:	d117      	bne.n	802d0a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 802d072:	687b      	ldr	r3, [r7, #4]
 802d074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d076:	697a      	ldr	r2, [r7, #20]
 802d078:	4313      	orrs	r3, r2
 802d07a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802d07c:	687b      	ldr	r3, [r7, #4]
 802d07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d080:	2b00      	cmp	r3, #0
 802d082:	d00e      	beq.n	802d0a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802d084:	6878      	ldr	r0, [r7, #4]
 802d086:	f002 fb4d 	bl	802f724 <DMA_CheckFifoParam>
 802d08a:	4603      	mov	r3, r0
 802d08c:	2b00      	cmp	r3, #0
 802d08e:	d008      	beq.n	802d0a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802d090:	687b      	ldr	r3, [r7, #4]
 802d092:	2240      	movs	r2, #64	; 0x40
 802d094:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802d096:	687b      	ldr	r3, [r7, #4]
 802d098:	2201      	movs	r2, #1
 802d09a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 802d09e:	2301      	movs	r3, #1
 802d0a0:	e197      	b.n	802d3d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 802d0a2:	687b      	ldr	r3, [r7, #4]
 802d0a4:	681b      	ldr	r3, [r3, #0]
 802d0a6:	697a      	ldr	r2, [r7, #20]
 802d0a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802d0aa:	6878      	ldr	r0, [r7, #4]
 802d0ac:	f002 fa88 	bl	802f5c0 <DMA_CalcBaseAndBitshift>
 802d0b0:	4603      	mov	r3, r0
 802d0b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802d0b4:	687b      	ldr	r3, [r7, #4]
 802d0b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d0b8:	f003 031f 	and.w	r3, r3, #31
 802d0bc:	223f      	movs	r2, #63	; 0x3f
 802d0be:	409a      	lsls	r2, r3
 802d0c0:	68bb      	ldr	r3, [r7, #8]
 802d0c2:	609a      	str	r2, [r3, #8]
 802d0c4:	e0cd      	b.n	802d262 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802d0c6:	687b      	ldr	r3, [r7, #4]
 802d0c8:	681b      	ldr	r3, [r3, #0]
 802d0ca:	4a3b      	ldr	r2, [pc, #236]	; (802d1b8 <HAL_DMA_Init+0x42c>)
 802d0cc:	4293      	cmp	r3, r2
 802d0ce:	d022      	beq.n	802d116 <HAL_DMA_Init+0x38a>
 802d0d0:	687b      	ldr	r3, [r7, #4]
 802d0d2:	681b      	ldr	r3, [r3, #0]
 802d0d4:	4a39      	ldr	r2, [pc, #228]	; (802d1bc <HAL_DMA_Init+0x430>)
 802d0d6:	4293      	cmp	r3, r2
 802d0d8:	d01d      	beq.n	802d116 <HAL_DMA_Init+0x38a>
 802d0da:	687b      	ldr	r3, [r7, #4]
 802d0dc:	681b      	ldr	r3, [r3, #0]
 802d0de:	4a38      	ldr	r2, [pc, #224]	; (802d1c0 <HAL_DMA_Init+0x434>)
 802d0e0:	4293      	cmp	r3, r2
 802d0e2:	d018      	beq.n	802d116 <HAL_DMA_Init+0x38a>
 802d0e4:	687b      	ldr	r3, [r7, #4]
 802d0e6:	681b      	ldr	r3, [r3, #0]
 802d0e8:	4a36      	ldr	r2, [pc, #216]	; (802d1c4 <HAL_DMA_Init+0x438>)
 802d0ea:	4293      	cmp	r3, r2
 802d0ec:	d013      	beq.n	802d116 <HAL_DMA_Init+0x38a>
 802d0ee:	687b      	ldr	r3, [r7, #4]
 802d0f0:	681b      	ldr	r3, [r3, #0]
 802d0f2:	4a35      	ldr	r2, [pc, #212]	; (802d1c8 <HAL_DMA_Init+0x43c>)
 802d0f4:	4293      	cmp	r3, r2
 802d0f6:	d00e      	beq.n	802d116 <HAL_DMA_Init+0x38a>
 802d0f8:	687b      	ldr	r3, [r7, #4]
 802d0fa:	681b      	ldr	r3, [r3, #0]
 802d0fc:	4a33      	ldr	r2, [pc, #204]	; (802d1cc <HAL_DMA_Init+0x440>)
 802d0fe:	4293      	cmp	r3, r2
 802d100:	d009      	beq.n	802d116 <HAL_DMA_Init+0x38a>
 802d102:	687b      	ldr	r3, [r7, #4]
 802d104:	681b      	ldr	r3, [r3, #0]
 802d106:	4a32      	ldr	r2, [pc, #200]	; (802d1d0 <HAL_DMA_Init+0x444>)
 802d108:	4293      	cmp	r3, r2
 802d10a:	d004      	beq.n	802d116 <HAL_DMA_Init+0x38a>
 802d10c:	687b      	ldr	r3, [r7, #4]
 802d10e:	681b      	ldr	r3, [r3, #0]
 802d110:	4a30      	ldr	r2, [pc, #192]	; (802d1d4 <HAL_DMA_Init+0x448>)
 802d112:	4293      	cmp	r3, r2
 802d114:	d101      	bne.n	802d11a <HAL_DMA_Init+0x38e>
 802d116:	2301      	movs	r3, #1
 802d118:	e000      	b.n	802d11c <HAL_DMA_Init+0x390>
 802d11a:	2300      	movs	r3, #0
 802d11c:	2b00      	cmp	r3, #0
 802d11e:	f000 8097 	beq.w	802d250 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802d122:	687b      	ldr	r3, [r7, #4]
 802d124:	681b      	ldr	r3, [r3, #0]
 802d126:	4a24      	ldr	r2, [pc, #144]	; (802d1b8 <HAL_DMA_Init+0x42c>)
 802d128:	4293      	cmp	r3, r2
 802d12a:	d021      	beq.n	802d170 <HAL_DMA_Init+0x3e4>
 802d12c:	687b      	ldr	r3, [r7, #4]
 802d12e:	681b      	ldr	r3, [r3, #0]
 802d130:	4a22      	ldr	r2, [pc, #136]	; (802d1bc <HAL_DMA_Init+0x430>)
 802d132:	4293      	cmp	r3, r2
 802d134:	d01c      	beq.n	802d170 <HAL_DMA_Init+0x3e4>
 802d136:	687b      	ldr	r3, [r7, #4]
 802d138:	681b      	ldr	r3, [r3, #0]
 802d13a:	4a21      	ldr	r2, [pc, #132]	; (802d1c0 <HAL_DMA_Init+0x434>)
 802d13c:	4293      	cmp	r3, r2
 802d13e:	d017      	beq.n	802d170 <HAL_DMA_Init+0x3e4>
 802d140:	687b      	ldr	r3, [r7, #4]
 802d142:	681b      	ldr	r3, [r3, #0]
 802d144:	4a1f      	ldr	r2, [pc, #124]	; (802d1c4 <HAL_DMA_Init+0x438>)
 802d146:	4293      	cmp	r3, r2
 802d148:	d012      	beq.n	802d170 <HAL_DMA_Init+0x3e4>
 802d14a:	687b      	ldr	r3, [r7, #4]
 802d14c:	681b      	ldr	r3, [r3, #0]
 802d14e:	4a1e      	ldr	r2, [pc, #120]	; (802d1c8 <HAL_DMA_Init+0x43c>)
 802d150:	4293      	cmp	r3, r2
 802d152:	d00d      	beq.n	802d170 <HAL_DMA_Init+0x3e4>
 802d154:	687b      	ldr	r3, [r7, #4]
 802d156:	681b      	ldr	r3, [r3, #0]
 802d158:	4a1c      	ldr	r2, [pc, #112]	; (802d1cc <HAL_DMA_Init+0x440>)
 802d15a:	4293      	cmp	r3, r2
 802d15c:	d008      	beq.n	802d170 <HAL_DMA_Init+0x3e4>
 802d15e:	687b      	ldr	r3, [r7, #4]
 802d160:	681b      	ldr	r3, [r3, #0]
 802d162:	4a1b      	ldr	r2, [pc, #108]	; (802d1d0 <HAL_DMA_Init+0x444>)
 802d164:	4293      	cmp	r3, r2
 802d166:	d003      	beq.n	802d170 <HAL_DMA_Init+0x3e4>
 802d168:	687b      	ldr	r3, [r7, #4]
 802d16a:	681b      	ldr	r3, [r3, #0]
 802d16c:	4a19      	ldr	r2, [pc, #100]	; (802d1d4 <HAL_DMA_Init+0x448>)
 802d16e:	4293      	cmp	r3, r2
 802d170:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802d172:	687b      	ldr	r3, [r7, #4]
 802d174:	2202      	movs	r2, #2
 802d176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802d17a:	687b      	ldr	r3, [r7, #4]
 802d17c:	2200      	movs	r2, #0
 802d17e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 802d182:	687b      	ldr	r3, [r7, #4]
 802d184:	681b      	ldr	r3, [r3, #0]
 802d186:	681b      	ldr	r3, [r3, #0]
 802d188:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 802d18a:	697a      	ldr	r2, [r7, #20]
 802d18c:	4b12      	ldr	r3, [pc, #72]	; (802d1d8 <HAL_DMA_Init+0x44c>)
 802d18e:	4013      	ands	r3, r2
 802d190:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802d192:	687b      	ldr	r3, [r7, #4]
 802d194:	689b      	ldr	r3, [r3, #8]
 802d196:	2b40      	cmp	r3, #64	; 0x40
 802d198:	d020      	beq.n	802d1dc <HAL_DMA_Init+0x450>
 802d19a:	687b      	ldr	r3, [r7, #4]
 802d19c:	689b      	ldr	r3, [r3, #8]
 802d19e:	2b80      	cmp	r3, #128	; 0x80
 802d1a0:	d102      	bne.n	802d1a8 <HAL_DMA_Init+0x41c>
 802d1a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802d1a6:	e01a      	b.n	802d1de <HAL_DMA_Init+0x452>
 802d1a8:	2300      	movs	r3, #0
 802d1aa:	e018      	b.n	802d1de <HAL_DMA_Init+0x452>
 802d1ac:	fe10803f 	.word	0xfe10803f
 802d1b0:	5c001000 	.word	0x5c001000
 802d1b4:	ffff0000 	.word	0xffff0000
 802d1b8:	58025408 	.word	0x58025408
 802d1bc:	5802541c 	.word	0x5802541c
 802d1c0:	58025430 	.word	0x58025430
 802d1c4:	58025444 	.word	0x58025444
 802d1c8:	58025458 	.word	0x58025458
 802d1cc:	5802546c 	.word	0x5802546c
 802d1d0:	58025480 	.word	0x58025480
 802d1d4:	58025494 	.word	0x58025494
 802d1d8:	fffe000f 	.word	0xfffe000f
 802d1dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802d1de:	687a      	ldr	r2, [r7, #4]
 802d1e0:	68d2      	ldr	r2, [r2, #12]
 802d1e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802d1e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802d1e6:	687b      	ldr	r3, [r7, #4]
 802d1e8:	691b      	ldr	r3, [r3, #16]
 802d1ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802d1ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802d1ee:	687b      	ldr	r3, [r7, #4]
 802d1f0:	695b      	ldr	r3, [r3, #20]
 802d1f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802d1f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802d1f6:	687b      	ldr	r3, [r7, #4]
 802d1f8:	699b      	ldr	r3, [r3, #24]
 802d1fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802d1fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802d1fe:	687b      	ldr	r3, [r7, #4]
 802d200:	69db      	ldr	r3, [r3, #28]
 802d202:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802d204:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 802d206:	687b      	ldr	r3, [r7, #4]
 802d208:	6a1b      	ldr	r3, [r3, #32]
 802d20a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802d20c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802d20e:	697a      	ldr	r2, [r7, #20]
 802d210:	4313      	orrs	r3, r2
 802d212:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 802d214:	687b      	ldr	r3, [r7, #4]
 802d216:	681b      	ldr	r3, [r3, #0]
 802d218:	697a      	ldr	r2, [r7, #20]
 802d21a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 802d21c:	687b      	ldr	r3, [r7, #4]
 802d21e:	681b      	ldr	r3, [r3, #0]
 802d220:	461a      	mov	r2, r3
 802d222:	4b6e      	ldr	r3, [pc, #440]	; (802d3dc <HAL_DMA_Init+0x650>)
 802d224:	4413      	add	r3, r2
 802d226:	4a6e      	ldr	r2, [pc, #440]	; (802d3e0 <HAL_DMA_Init+0x654>)
 802d228:	fba2 2303 	umull	r2, r3, r2, r3
 802d22c:	091b      	lsrs	r3, r3, #4
 802d22e:	009a      	lsls	r2, r3, #2
 802d230:	687b      	ldr	r3, [r7, #4]
 802d232:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802d234:	6878      	ldr	r0, [r7, #4]
 802d236:	f002 f9c3 	bl	802f5c0 <DMA_CalcBaseAndBitshift>
 802d23a:	4603      	mov	r3, r0
 802d23c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802d23e:	687b      	ldr	r3, [r7, #4]
 802d240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d242:	f003 031f 	and.w	r3, r3, #31
 802d246:	2201      	movs	r2, #1
 802d248:	409a      	lsls	r2, r3
 802d24a:	68fb      	ldr	r3, [r7, #12]
 802d24c:	605a      	str	r2, [r3, #4]
 802d24e:	e008      	b.n	802d262 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802d250:	687b      	ldr	r3, [r7, #4]
 802d252:	2240      	movs	r2, #64	; 0x40
 802d254:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 802d256:	687b      	ldr	r3, [r7, #4]
 802d258:	2203      	movs	r2, #3
 802d25a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 802d25e:	2301      	movs	r3, #1
 802d260:	e0b7      	b.n	802d3d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802d262:	687b      	ldr	r3, [r7, #4]
 802d264:	681b      	ldr	r3, [r3, #0]
 802d266:	4a5f      	ldr	r2, [pc, #380]	; (802d3e4 <HAL_DMA_Init+0x658>)
 802d268:	4293      	cmp	r3, r2
 802d26a:	d072      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d26c:	687b      	ldr	r3, [r7, #4]
 802d26e:	681b      	ldr	r3, [r3, #0]
 802d270:	4a5d      	ldr	r2, [pc, #372]	; (802d3e8 <HAL_DMA_Init+0x65c>)
 802d272:	4293      	cmp	r3, r2
 802d274:	d06d      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d276:	687b      	ldr	r3, [r7, #4]
 802d278:	681b      	ldr	r3, [r3, #0]
 802d27a:	4a5c      	ldr	r2, [pc, #368]	; (802d3ec <HAL_DMA_Init+0x660>)
 802d27c:	4293      	cmp	r3, r2
 802d27e:	d068      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d280:	687b      	ldr	r3, [r7, #4]
 802d282:	681b      	ldr	r3, [r3, #0]
 802d284:	4a5a      	ldr	r2, [pc, #360]	; (802d3f0 <HAL_DMA_Init+0x664>)
 802d286:	4293      	cmp	r3, r2
 802d288:	d063      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d28a:	687b      	ldr	r3, [r7, #4]
 802d28c:	681b      	ldr	r3, [r3, #0]
 802d28e:	4a59      	ldr	r2, [pc, #356]	; (802d3f4 <HAL_DMA_Init+0x668>)
 802d290:	4293      	cmp	r3, r2
 802d292:	d05e      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d294:	687b      	ldr	r3, [r7, #4]
 802d296:	681b      	ldr	r3, [r3, #0]
 802d298:	4a57      	ldr	r2, [pc, #348]	; (802d3f8 <HAL_DMA_Init+0x66c>)
 802d29a:	4293      	cmp	r3, r2
 802d29c:	d059      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d29e:	687b      	ldr	r3, [r7, #4]
 802d2a0:	681b      	ldr	r3, [r3, #0]
 802d2a2:	4a56      	ldr	r2, [pc, #344]	; (802d3fc <HAL_DMA_Init+0x670>)
 802d2a4:	4293      	cmp	r3, r2
 802d2a6:	d054      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d2a8:	687b      	ldr	r3, [r7, #4]
 802d2aa:	681b      	ldr	r3, [r3, #0]
 802d2ac:	4a54      	ldr	r2, [pc, #336]	; (802d400 <HAL_DMA_Init+0x674>)
 802d2ae:	4293      	cmp	r3, r2
 802d2b0:	d04f      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d2b2:	687b      	ldr	r3, [r7, #4]
 802d2b4:	681b      	ldr	r3, [r3, #0]
 802d2b6:	4a53      	ldr	r2, [pc, #332]	; (802d404 <HAL_DMA_Init+0x678>)
 802d2b8:	4293      	cmp	r3, r2
 802d2ba:	d04a      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d2bc:	687b      	ldr	r3, [r7, #4]
 802d2be:	681b      	ldr	r3, [r3, #0]
 802d2c0:	4a51      	ldr	r2, [pc, #324]	; (802d408 <HAL_DMA_Init+0x67c>)
 802d2c2:	4293      	cmp	r3, r2
 802d2c4:	d045      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d2c6:	687b      	ldr	r3, [r7, #4]
 802d2c8:	681b      	ldr	r3, [r3, #0]
 802d2ca:	4a50      	ldr	r2, [pc, #320]	; (802d40c <HAL_DMA_Init+0x680>)
 802d2cc:	4293      	cmp	r3, r2
 802d2ce:	d040      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d2d0:	687b      	ldr	r3, [r7, #4]
 802d2d2:	681b      	ldr	r3, [r3, #0]
 802d2d4:	4a4e      	ldr	r2, [pc, #312]	; (802d410 <HAL_DMA_Init+0x684>)
 802d2d6:	4293      	cmp	r3, r2
 802d2d8:	d03b      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d2da:	687b      	ldr	r3, [r7, #4]
 802d2dc:	681b      	ldr	r3, [r3, #0]
 802d2de:	4a4d      	ldr	r2, [pc, #308]	; (802d414 <HAL_DMA_Init+0x688>)
 802d2e0:	4293      	cmp	r3, r2
 802d2e2:	d036      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d2e4:	687b      	ldr	r3, [r7, #4]
 802d2e6:	681b      	ldr	r3, [r3, #0]
 802d2e8:	4a4b      	ldr	r2, [pc, #300]	; (802d418 <HAL_DMA_Init+0x68c>)
 802d2ea:	4293      	cmp	r3, r2
 802d2ec:	d031      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d2ee:	687b      	ldr	r3, [r7, #4]
 802d2f0:	681b      	ldr	r3, [r3, #0]
 802d2f2:	4a4a      	ldr	r2, [pc, #296]	; (802d41c <HAL_DMA_Init+0x690>)
 802d2f4:	4293      	cmp	r3, r2
 802d2f6:	d02c      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d2f8:	687b      	ldr	r3, [r7, #4]
 802d2fa:	681b      	ldr	r3, [r3, #0]
 802d2fc:	4a48      	ldr	r2, [pc, #288]	; (802d420 <HAL_DMA_Init+0x694>)
 802d2fe:	4293      	cmp	r3, r2
 802d300:	d027      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d302:	687b      	ldr	r3, [r7, #4]
 802d304:	681b      	ldr	r3, [r3, #0]
 802d306:	4a47      	ldr	r2, [pc, #284]	; (802d424 <HAL_DMA_Init+0x698>)
 802d308:	4293      	cmp	r3, r2
 802d30a:	d022      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d30c:	687b      	ldr	r3, [r7, #4]
 802d30e:	681b      	ldr	r3, [r3, #0]
 802d310:	4a45      	ldr	r2, [pc, #276]	; (802d428 <HAL_DMA_Init+0x69c>)
 802d312:	4293      	cmp	r3, r2
 802d314:	d01d      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d316:	687b      	ldr	r3, [r7, #4]
 802d318:	681b      	ldr	r3, [r3, #0]
 802d31a:	4a44      	ldr	r2, [pc, #272]	; (802d42c <HAL_DMA_Init+0x6a0>)
 802d31c:	4293      	cmp	r3, r2
 802d31e:	d018      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d320:	687b      	ldr	r3, [r7, #4]
 802d322:	681b      	ldr	r3, [r3, #0]
 802d324:	4a42      	ldr	r2, [pc, #264]	; (802d430 <HAL_DMA_Init+0x6a4>)
 802d326:	4293      	cmp	r3, r2
 802d328:	d013      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d32a:	687b      	ldr	r3, [r7, #4]
 802d32c:	681b      	ldr	r3, [r3, #0]
 802d32e:	4a41      	ldr	r2, [pc, #260]	; (802d434 <HAL_DMA_Init+0x6a8>)
 802d330:	4293      	cmp	r3, r2
 802d332:	d00e      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d334:	687b      	ldr	r3, [r7, #4]
 802d336:	681b      	ldr	r3, [r3, #0]
 802d338:	4a3f      	ldr	r2, [pc, #252]	; (802d438 <HAL_DMA_Init+0x6ac>)
 802d33a:	4293      	cmp	r3, r2
 802d33c:	d009      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d33e:	687b      	ldr	r3, [r7, #4]
 802d340:	681b      	ldr	r3, [r3, #0]
 802d342:	4a3e      	ldr	r2, [pc, #248]	; (802d43c <HAL_DMA_Init+0x6b0>)
 802d344:	4293      	cmp	r3, r2
 802d346:	d004      	beq.n	802d352 <HAL_DMA_Init+0x5c6>
 802d348:	687b      	ldr	r3, [r7, #4]
 802d34a:	681b      	ldr	r3, [r3, #0]
 802d34c:	4a3c      	ldr	r2, [pc, #240]	; (802d440 <HAL_DMA_Init+0x6b4>)
 802d34e:	4293      	cmp	r3, r2
 802d350:	d101      	bne.n	802d356 <HAL_DMA_Init+0x5ca>
 802d352:	2301      	movs	r3, #1
 802d354:	e000      	b.n	802d358 <HAL_DMA_Init+0x5cc>
 802d356:	2300      	movs	r3, #0
 802d358:	2b00      	cmp	r3, #0
 802d35a:	d032      	beq.n	802d3c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 802d35c:	6878      	ldr	r0, [r7, #4]
 802d35e:	f002 fa5d 	bl	802f81c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 802d362:	687b      	ldr	r3, [r7, #4]
 802d364:	689b      	ldr	r3, [r3, #8]
 802d366:	2b80      	cmp	r3, #128	; 0x80
 802d368:	d102      	bne.n	802d370 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 802d36a:	687b      	ldr	r3, [r7, #4]
 802d36c:	2200      	movs	r2, #0
 802d36e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 802d370:	687b      	ldr	r3, [r7, #4]
 802d372:	685a      	ldr	r2, [r3, #4]
 802d374:	687b      	ldr	r3, [r7, #4]
 802d376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802d378:	b2d2      	uxtb	r2, r2
 802d37a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802d37c:	687b      	ldr	r3, [r7, #4]
 802d37e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802d380:	687a      	ldr	r2, [r7, #4]
 802d382:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802d384:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 802d386:	687b      	ldr	r3, [r7, #4]
 802d388:	685b      	ldr	r3, [r3, #4]
 802d38a:	2b00      	cmp	r3, #0
 802d38c:	d010      	beq.n	802d3b0 <HAL_DMA_Init+0x624>
 802d38e:	687b      	ldr	r3, [r7, #4]
 802d390:	685b      	ldr	r3, [r3, #4]
 802d392:	2b08      	cmp	r3, #8
 802d394:	d80c      	bhi.n	802d3b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 802d396:	6878      	ldr	r0, [r7, #4]
 802d398:	f002 fada 	bl	802f950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 802d39c:	687b      	ldr	r3, [r7, #4]
 802d39e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d3a0:	2200      	movs	r2, #0
 802d3a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802d3a4:	687b      	ldr	r3, [r7, #4]
 802d3a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802d3a8:	687a      	ldr	r2, [r7, #4]
 802d3aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802d3ac:	605a      	str	r2, [r3, #4]
 802d3ae:	e008      	b.n	802d3c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 802d3b0:	687b      	ldr	r3, [r7, #4]
 802d3b2:	2200      	movs	r2, #0
 802d3b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 802d3b6:	687b      	ldr	r3, [r7, #4]
 802d3b8:	2200      	movs	r2, #0
 802d3ba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 802d3bc:	687b      	ldr	r3, [r7, #4]
 802d3be:	2200      	movs	r2, #0
 802d3c0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802d3c2:	687b      	ldr	r3, [r7, #4]
 802d3c4:	2200      	movs	r2, #0
 802d3c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802d3c8:	687b      	ldr	r3, [r7, #4]
 802d3ca:	2201      	movs	r2, #1
 802d3cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802d3d0:	2300      	movs	r3, #0
}
 802d3d2:	4618      	mov	r0, r3
 802d3d4:	3718      	adds	r7, #24
 802d3d6:	46bd      	mov	sp, r7
 802d3d8:	bd80      	pop	{r7, pc}
 802d3da:	bf00      	nop
 802d3dc:	a7fdabf8 	.word	0xa7fdabf8
 802d3e0:	cccccccd 	.word	0xcccccccd
 802d3e4:	40020010 	.word	0x40020010
 802d3e8:	40020028 	.word	0x40020028
 802d3ec:	40020040 	.word	0x40020040
 802d3f0:	40020058 	.word	0x40020058
 802d3f4:	40020070 	.word	0x40020070
 802d3f8:	40020088 	.word	0x40020088
 802d3fc:	400200a0 	.word	0x400200a0
 802d400:	400200b8 	.word	0x400200b8
 802d404:	40020410 	.word	0x40020410
 802d408:	40020428 	.word	0x40020428
 802d40c:	40020440 	.word	0x40020440
 802d410:	40020458 	.word	0x40020458
 802d414:	40020470 	.word	0x40020470
 802d418:	40020488 	.word	0x40020488
 802d41c:	400204a0 	.word	0x400204a0
 802d420:	400204b8 	.word	0x400204b8
 802d424:	58025408 	.word	0x58025408
 802d428:	5802541c 	.word	0x5802541c
 802d42c:	58025430 	.word	0x58025430
 802d430:	58025444 	.word	0x58025444
 802d434:	58025458 	.word	0x58025458
 802d438:	5802546c 	.word	0x5802546c
 802d43c:	58025480 	.word	0x58025480
 802d440:	58025494 	.word	0x58025494

0802d444 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802d444:	b580      	push	{r7, lr}
 802d446:	b086      	sub	sp, #24
 802d448:	af00      	add	r7, sp, #0
 802d44a:	60f8      	str	r0, [r7, #12]
 802d44c:	60b9      	str	r1, [r7, #8]
 802d44e:	607a      	str	r2, [r7, #4]
 802d450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802d452:	2300      	movs	r3, #0
 802d454:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802d456:	68fb      	ldr	r3, [r7, #12]
 802d458:	2b00      	cmp	r3, #0
 802d45a:	d101      	bne.n	802d460 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 802d45c:	2301      	movs	r3, #1
 802d45e:	e226      	b.n	802d8ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 802d460:	68fb      	ldr	r3, [r7, #12]
 802d462:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802d466:	2b01      	cmp	r3, #1
 802d468:	d101      	bne.n	802d46e <HAL_DMA_Start_IT+0x2a>
 802d46a:	2302      	movs	r3, #2
 802d46c:	e21f      	b.n	802d8ae <HAL_DMA_Start_IT+0x46a>
 802d46e:	68fb      	ldr	r3, [r7, #12]
 802d470:	2201      	movs	r2, #1
 802d472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 802d476:	68fb      	ldr	r3, [r7, #12]
 802d478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802d47c:	b2db      	uxtb	r3, r3
 802d47e:	2b01      	cmp	r3, #1
 802d480:	f040 820a 	bne.w	802d898 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802d484:	68fb      	ldr	r3, [r7, #12]
 802d486:	2202      	movs	r2, #2
 802d488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802d48c:	68fb      	ldr	r3, [r7, #12]
 802d48e:	2200      	movs	r2, #0
 802d490:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802d492:	68fb      	ldr	r3, [r7, #12]
 802d494:	681b      	ldr	r3, [r3, #0]
 802d496:	4a68      	ldr	r2, [pc, #416]	; (802d638 <HAL_DMA_Start_IT+0x1f4>)
 802d498:	4293      	cmp	r3, r2
 802d49a:	d04a      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d49c:	68fb      	ldr	r3, [r7, #12]
 802d49e:	681b      	ldr	r3, [r3, #0]
 802d4a0:	4a66      	ldr	r2, [pc, #408]	; (802d63c <HAL_DMA_Start_IT+0x1f8>)
 802d4a2:	4293      	cmp	r3, r2
 802d4a4:	d045      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d4a6:	68fb      	ldr	r3, [r7, #12]
 802d4a8:	681b      	ldr	r3, [r3, #0]
 802d4aa:	4a65      	ldr	r2, [pc, #404]	; (802d640 <HAL_DMA_Start_IT+0x1fc>)
 802d4ac:	4293      	cmp	r3, r2
 802d4ae:	d040      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d4b0:	68fb      	ldr	r3, [r7, #12]
 802d4b2:	681b      	ldr	r3, [r3, #0]
 802d4b4:	4a63      	ldr	r2, [pc, #396]	; (802d644 <HAL_DMA_Start_IT+0x200>)
 802d4b6:	4293      	cmp	r3, r2
 802d4b8:	d03b      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d4ba:	68fb      	ldr	r3, [r7, #12]
 802d4bc:	681b      	ldr	r3, [r3, #0]
 802d4be:	4a62      	ldr	r2, [pc, #392]	; (802d648 <HAL_DMA_Start_IT+0x204>)
 802d4c0:	4293      	cmp	r3, r2
 802d4c2:	d036      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d4c4:	68fb      	ldr	r3, [r7, #12]
 802d4c6:	681b      	ldr	r3, [r3, #0]
 802d4c8:	4a60      	ldr	r2, [pc, #384]	; (802d64c <HAL_DMA_Start_IT+0x208>)
 802d4ca:	4293      	cmp	r3, r2
 802d4cc:	d031      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d4ce:	68fb      	ldr	r3, [r7, #12]
 802d4d0:	681b      	ldr	r3, [r3, #0]
 802d4d2:	4a5f      	ldr	r2, [pc, #380]	; (802d650 <HAL_DMA_Start_IT+0x20c>)
 802d4d4:	4293      	cmp	r3, r2
 802d4d6:	d02c      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d4d8:	68fb      	ldr	r3, [r7, #12]
 802d4da:	681b      	ldr	r3, [r3, #0]
 802d4dc:	4a5d      	ldr	r2, [pc, #372]	; (802d654 <HAL_DMA_Start_IT+0x210>)
 802d4de:	4293      	cmp	r3, r2
 802d4e0:	d027      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d4e2:	68fb      	ldr	r3, [r7, #12]
 802d4e4:	681b      	ldr	r3, [r3, #0]
 802d4e6:	4a5c      	ldr	r2, [pc, #368]	; (802d658 <HAL_DMA_Start_IT+0x214>)
 802d4e8:	4293      	cmp	r3, r2
 802d4ea:	d022      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d4ec:	68fb      	ldr	r3, [r7, #12]
 802d4ee:	681b      	ldr	r3, [r3, #0]
 802d4f0:	4a5a      	ldr	r2, [pc, #360]	; (802d65c <HAL_DMA_Start_IT+0x218>)
 802d4f2:	4293      	cmp	r3, r2
 802d4f4:	d01d      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d4f6:	68fb      	ldr	r3, [r7, #12]
 802d4f8:	681b      	ldr	r3, [r3, #0]
 802d4fa:	4a59      	ldr	r2, [pc, #356]	; (802d660 <HAL_DMA_Start_IT+0x21c>)
 802d4fc:	4293      	cmp	r3, r2
 802d4fe:	d018      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d500:	68fb      	ldr	r3, [r7, #12]
 802d502:	681b      	ldr	r3, [r3, #0]
 802d504:	4a57      	ldr	r2, [pc, #348]	; (802d664 <HAL_DMA_Start_IT+0x220>)
 802d506:	4293      	cmp	r3, r2
 802d508:	d013      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d50a:	68fb      	ldr	r3, [r7, #12]
 802d50c:	681b      	ldr	r3, [r3, #0]
 802d50e:	4a56      	ldr	r2, [pc, #344]	; (802d668 <HAL_DMA_Start_IT+0x224>)
 802d510:	4293      	cmp	r3, r2
 802d512:	d00e      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d514:	68fb      	ldr	r3, [r7, #12]
 802d516:	681b      	ldr	r3, [r3, #0]
 802d518:	4a54      	ldr	r2, [pc, #336]	; (802d66c <HAL_DMA_Start_IT+0x228>)
 802d51a:	4293      	cmp	r3, r2
 802d51c:	d009      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d51e:	68fb      	ldr	r3, [r7, #12]
 802d520:	681b      	ldr	r3, [r3, #0]
 802d522:	4a53      	ldr	r2, [pc, #332]	; (802d670 <HAL_DMA_Start_IT+0x22c>)
 802d524:	4293      	cmp	r3, r2
 802d526:	d004      	beq.n	802d532 <HAL_DMA_Start_IT+0xee>
 802d528:	68fb      	ldr	r3, [r7, #12]
 802d52a:	681b      	ldr	r3, [r3, #0]
 802d52c:	4a51      	ldr	r2, [pc, #324]	; (802d674 <HAL_DMA_Start_IT+0x230>)
 802d52e:	4293      	cmp	r3, r2
 802d530:	d108      	bne.n	802d544 <HAL_DMA_Start_IT+0x100>
 802d532:	68fb      	ldr	r3, [r7, #12]
 802d534:	681b      	ldr	r3, [r3, #0]
 802d536:	681a      	ldr	r2, [r3, #0]
 802d538:	68fb      	ldr	r3, [r7, #12]
 802d53a:	681b      	ldr	r3, [r3, #0]
 802d53c:	f022 0201 	bic.w	r2, r2, #1
 802d540:	601a      	str	r2, [r3, #0]
 802d542:	e007      	b.n	802d554 <HAL_DMA_Start_IT+0x110>
 802d544:	68fb      	ldr	r3, [r7, #12]
 802d546:	681b      	ldr	r3, [r3, #0]
 802d548:	681a      	ldr	r2, [r3, #0]
 802d54a:	68fb      	ldr	r3, [r7, #12]
 802d54c:	681b      	ldr	r3, [r3, #0]
 802d54e:	f022 0201 	bic.w	r2, r2, #1
 802d552:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802d554:	683b      	ldr	r3, [r7, #0]
 802d556:	687a      	ldr	r2, [r7, #4]
 802d558:	68b9      	ldr	r1, [r7, #8]
 802d55a:	68f8      	ldr	r0, [r7, #12]
 802d55c:	f001 fe84 	bl	802f268 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802d560:	68fb      	ldr	r3, [r7, #12]
 802d562:	681b      	ldr	r3, [r3, #0]
 802d564:	4a34      	ldr	r2, [pc, #208]	; (802d638 <HAL_DMA_Start_IT+0x1f4>)
 802d566:	4293      	cmp	r3, r2
 802d568:	d04a      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d56a:	68fb      	ldr	r3, [r7, #12]
 802d56c:	681b      	ldr	r3, [r3, #0]
 802d56e:	4a33      	ldr	r2, [pc, #204]	; (802d63c <HAL_DMA_Start_IT+0x1f8>)
 802d570:	4293      	cmp	r3, r2
 802d572:	d045      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d574:	68fb      	ldr	r3, [r7, #12]
 802d576:	681b      	ldr	r3, [r3, #0]
 802d578:	4a31      	ldr	r2, [pc, #196]	; (802d640 <HAL_DMA_Start_IT+0x1fc>)
 802d57a:	4293      	cmp	r3, r2
 802d57c:	d040      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d57e:	68fb      	ldr	r3, [r7, #12]
 802d580:	681b      	ldr	r3, [r3, #0]
 802d582:	4a30      	ldr	r2, [pc, #192]	; (802d644 <HAL_DMA_Start_IT+0x200>)
 802d584:	4293      	cmp	r3, r2
 802d586:	d03b      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d588:	68fb      	ldr	r3, [r7, #12]
 802d58a:	681b      	ldr	r3, [r3, #0]
 802d58c:	4a2e      	ldr	r2, [pc, #184]	; (802d648 <HAL_DMA_Start_IT+0x204>)
 802d58e:	4293      	cmp	r3, r2
 802d590:	d036      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d592:	68fb      	ldr	r3, [r7, #12]
 802d594:	681b      	ldr	r3, [r3, #0]
 802d596:	4a2d      	ldr	r2, [pc, #180]	; (802d64c <HAL_DMA_Start_IT+0x208>)
 802d598:	4293      	cmp	r3, r2
 802d59a:	d031      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d59c:	68fb      	ldr	r3, [r7, #12]
 802d59e:	681b      	ldr	r3, [r3, #0]
 802d5a0:	4a2b      	ldr	r2, [pc, #172]	; (802d650 <HAL_DMA_Start_IT+0x20c>)
 802d5a2:	4293      	cmp	r3, r2
 802d5a4:	d02c      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d5a6:	68fb      	ldr	r3, [r7, #12]
 802d5a8:	681b      	ldr	r3, [r3, #0]
 802d5aa:	4a2a      	ldr	r2, [pc, #168]	; (802d654 <HAL_DMA_Start_IT+0x210>)
 802d5ac:	4293      	cmp	r3, r2
 802d5ae:	d027      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d5b0:	68fb      	ldr	r3, [r7, #12]
 802d5b2:	681b      	ldr	r3, [r3, #0]
 802d5b4:	4a28      	ldr	r2, [pc, #160]	; (802d658 <HAL_DMA_Start_IT+0x214>)
 802d5b6:	4293      	cmp	r3, r2
 802d5b8:	d022      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d5ba:	68fb      	ldr	r3, [r7, #12]
 802d5bc:	681b      	ldr	r3, [r3, #0]
 802d5be:	4a27      	ldr	r2, [pc, #156]	; (802d65c <HAL_DMA_Start_IT+0x218>)
 802d5c0:	4293      	cmp	r3, r2
 802d5c2:	d01d      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d5c4:	68fb      	ldr	r3, [r7, #12]
 802d5c6:	681b      	ldr	r3, [r3, #0]
 802d5c8:	4a25      	ldr	r2, [pc, #148]	; (802d660 <HAL_DMA_Start_IT+0x21c>)
 802d5ca:	4293      	cmp	r3, r2
 802d5cc:	d018      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d5ce:	68fb      	ldr	r3, [r7, #12]
 802d5d0:	681b      	ldr	r3, [r3, #0]
 802d5d2:	4a24      	ldr	r2, [pc, #144]	; (802d664 <HAL_DMA_Start_IT+0x220>)
 802d5d4:	4293      	cmp	r3, r2
 802d5d6:	d013      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d5d8:	68fb      	ldr	r3, [r7, #12]
 802d5da:	681b      	ldr	r3, [r3, #0]
 802d5dc:	4a22      	ldr	r2, [pc, #136]	; (802d668 <HAL_DMA_Start_IT+0x224>)
 802d5de:	4293      	cmp	r3, r2
 802d5e0:	d00e      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d5e2:	68fb      	ldr	r3, [r7, #12]
 802d5e4:	681b      	ldr	r3, [r3, #0]
 802d5e6:	4a21      	ldr	r2, [pc, #132]	; (802d66c <HAL_DMA_Start_IT+0x228>)
 802d5e8:	4293      	cmp	r3, r2
 802d5ea:	d009      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d5ec:	68fb      	ldr	r3, [r7, #12]
 802d5ee:	681b      	ldr	r3, [r3, #0]
 802d5f0:	4a1f      	ldr	r2, [pc, #124]	; (802d670 <HAL_DMA_Start_IT+0x22c>)
 802d5f2:	4293      	cmp	r3, r2
 802d5f4:	d004      	beq.n	802d600 <HAL_DMA_Start_IT+0x1bc>
 802d5f6:	68fb      	ldr	r3, [r7, #12]
 802d5f8:	681b      	ldr	r3, [r3, #0]
 802d5fa:	4a1e      	ldr	r2, [pc, #120]	; (802d674 <HAL_DMA_Start_IT+0x230>)
 802d5fc:	4293      	cmp	r3, r2
 802d5fe:	d101      	bne.n	802d604 <HAL_DMA_Start_IT+0x1c0>
 802d600:	2301      	movs	r3, #1
 802d602:	e000      	b.n	802d606 <HAL_DMA_Start_IT+0x1c2>
 802d604:	2300      	movs	r3, #0
 802d606:	2b00      	cmp	r3, #0
 802d608:	d036      	beq.n	802d678 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 802d60a:	68fb      	ldr	r3, [r7, #12]
 802d60c:	681b      	ldr	r3, [r3, #0]
 802d60e:	681b      	ldr	r3, [r3, #0]
 802d610:	f023 021e 	bic.w	r2, r3, #30
 802d614:	68fb      	ldr	r3, [r7, #12]
 802d616:	681b      	ldr	r3, [r3, #0]
 802d618:	f042 0216 	orr.w	r2, r2, #22
 802d61c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802d61e:	68fb      	ldr	r3, [r7, #12]
 802d620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d622:	2b00      	cmp	r3, #0
 802d624:	d03e      	beq.n	802d6a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 802d626:	68fb      	ldr	r3, [r7, #12]
 802d628:	681b      	ldr	r3, [r3, #0]
 802d62a:	681a      	ldr	r2, [r3, #0]
 802d62c:	68fb      	ldr	r3, [r7, #12]
 802d62e:	681b      	ldr	r3, [r3, #0]
 802d630:	f042 0208 	orr.w	r2, r2, #8
 802d634:	601a      	str	r2, [r3, #0]
 802d636:	e035      	b.n	802d6a4 <HAL_DMA_Start_IT+0x260>
 802d638:	40020010 	.word	0x40020010
 802d63c:	40020028 	.word	0x40020028
 802d640:	40020040 	.word	0x40020040
 802d644:	40020058 	.word	0x40020058
 802d648:	40020070 	.word	0x40020070
 802d64c:	40020088 	.word	0x40020088
 802d650:	400200a0 	.word	0x400200a0
 802d654:	400200b8 	.word	0x400200b8
 802d658:	40020410 	.word	0x40020410
 802d65c:	40020428 	.word	0x40020428
 802d660:	40020440 	.word	0x40020440
 802d664:	40020458 	.word	0x40020458
 802d668:	40020470 	.word	0x40020470
 802d66c:	40020488 	.word	0x40020488
 802d670:	400204a0 	.word	0x400204a0
 802d674:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 802d678:	68fb      	ldr	r3, [r7, #12]
 802d67a:	681b      	ldr	r3, [r3, #0]
 802d67c:	681b      	ldr	r3, [r3, #0]
 802d67e:	f023 020e 	bic.w	r2, r3, #14
 802d682:	68fb      	ldr	r3, [r7, #12]
 802d684:	681b      	ldr	r3, [r3, #0]
 802d686:	f042 020a 	orr.w	r2, r2, #10
 802d68a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802d68c:	68fb      	ldr	r3, [r7, #12]
 802d68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d690:	2b00      	cmp	r3, #0
 802d692:	d007      	beq.n	802d6a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 802d694:	68fb      	ldr	r3, [r7, #12]
 802d696:	681b      	ldr	r3, [r3, #0]
 802d698:	681a      	ldr	r2, [r3, #0]
 802d69a:	68fb      	ldr	r3, [r7, #12]
 802d69c:	681b      	ldr	r3, [r3, #0]
 802d69e:	f042 0204 	orr.w	r2, r2, #4
 802d6a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802d6a4:	68fb      	ldr	r3, [r7, #12]
 802d6a6:	681b      	ldr	r3, [r3, #0]
 802d6a8:	4a83      	ldr	r2, [pc, #524]	; (802d8b8 <HAL_DMA_Start_IT+0x474>)
 802d6aa:	4293      	cmp	r3, r2
 802d6ac:	d072      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d6ae:	68fb      	ldr	r3, [r7, #12]
 802d6b0:	681b      	ldr	r3, [r3, #0]
 802d6b2:	4a82      	ldr	r2, [pc, #520]	; (802d8bc <HAL_DMA_Start_IT+0x478>)
 802d6b4:	4293      	cmp	r3, r2
 802d6b6:	d06d      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d6b8:	68fb      	ldr	r3, [r7, #12]
 802d6ba:	681b      	ldr	r3, [r3, #0]
 802d6bc:	4a80      	ldr	r2, [pc, #512]	; (802d8c0 <HAL_DMA_Start_IT+0x47c>)
 802d6be:	4293      	cmp	r3, r2
 802d6c0:	d068      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d6c2:	68fb      	ldr	r3, [r7, #12]
 802d6c4:	681b      	ldr	r3, [r3, #0]
 802d6c6:	4a7f      	ldr	r2, [pc, #508]	; (802d8c4 <HAL_DMA_Start_IT+0x480>)
 802d6c8:	4293      	cmp	r3, r2
 802d6ca:	d063      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d6cc:	68fb      	ldr	r3, [r7, #12]
 802d6ce:	681b      	ldr	r3, [r3, #0]
 802d6d0:	4a7d      	ldr	r2, [pc, #500]	; (802d8c8 <HAL_DMA_Start_IT+0x484>)
 802d6d2:	4293      	cmp	r3, r2
 802d6d4:	d05e      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d6d6:	68fb      	ldr	r3, [r7, #12]
 802d6d8:	681b      	ldr	r3, [r3, #0]
 802d6da:	4a7c      	ldr	r2, [pc, #496]	; (802d8cc <HAL_DMA_Start_IT+0x488>)
 802d6dc:	4293      	cmp	r3, r2
 802d6de:	d059      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d6e0:	68fb      	ldr	r3, [r7, #12]
 802d6e2:	681b      	ldr	r3, [r3, #0]
 802d6e4:	4a7a      	ldr	r2, [pc, #488]	; (802d8d0 <HAL_DMA_Start_IT+0x48c>)
 802d6e6:	4293      	cmp	r3, r2
 802d6e8:	d054      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d6ea:	68fb      	ldr	r3, [r7, #12]
 802d6ec:	681b      	ldr	r3, [r3, #0]
 802d6ee:	4a79      	ldr	r2, [pc, #484]	; (802d8d4 <HAL_DMA_Start_IT+0x490>)
 802d6f0:	4293      	cmp	r3, r2
 802d6f2:	d04f      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d6f4:	68fb      	ldr	r3, [r7, #12]
 802d6f6:	681b      	ldr	r3, [r3, #0]
 802d6f8:	4a77      	ldr	r2, [pc, #476]	; (802d8d8 <HAL_DMA_Start_IT+0x494>)
 802d6fa:	4293      	cmp	r3, r2
 802d6fc:	d04a      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d6fe:	68fb      	ldr	r3, [r7, #12]
 802d700:	681b      	ldr	r3, [r3, #0]
 802d702:	4a76      	ldr	r2, [pc, #472]	; (802d8dc <HAL_DMA_Start_IT+0x498>)
 802d704:	4293      	cmp	r3, r2
 802d706:	d045      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d708:	68fb      	ldr	r3, [r7, #12]
 802d70a:	681b      	ldr	r3, [r3, #0]
 802d70c:	4a74      	ldr	r2, [pc, #464]	; (802d8e0 <HAL_DMA_Start_IT+0x49c>)
 802d70e:	4293      	cmp	r3, r2
 802d710:	d040      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d712:	68fb      	ldr	r3, [r7, #12]
 802d714:	681b      	ldr	r3, [r3, #0]
 802d716:	4a73      	ldr	r2, [pc, #460]	; (802d8e4 <HAL_DMA_Start_IT+0x4a0>)
 802d718:	4293      	cmp	r3, r2
 802d71a:	d03b      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d71c:	68fb      	ldr	r3, [r7, #12]
 802d71e:	681b      	ldr	r3, [r3, #0]
 802d720:	4a71      	ldr	r2, [pc, #452]	; (802d8e8 <HAL_DMA_Start_IT+0x4a4>)
 802d722:	4293      	cmp	r3, r2
 802d724:	d036      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d726:	68fb      	ldr	r3, [r7, #12]
 802d728:	681b      	ldr	r3, [r3, #0]
 802d72a:	4a70      	ldr	r2, [pc, #448]	; (802d8ec <HAL_DMA_Start_IT+0x4a8>)
 802d72c:	4293      	cmp	r3, r2
 802d72e:	d031      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d730:	68fb      	ldr	r3, [r7, #12]
 802d732:	681b      	ldr	r3, [r3, #0]
 802d734:	4a6e      	ldr	r2, [pc, #440]	; (802d8f0 <HAL_DMA_Start_IT+0x4ac>)
 802d736:	4293      	cmp	r3, r2
 802d738:	d02c      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d73a:	68fb      	ldr	r3, [r7, #12]
 802d73c:	681b      	ldr	r3, [r3, #0]
 802d73e:	4a6d      	ldr	r2, [pc, #436]	; (802d8f4 <HAL_DMA_Start_IT+0x4b0>)
 802d740:	4293      	cmp	r3, r2
 802d742:	d027      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d744:	68fb      	ldr	r3, [r7, #12]
 802d746:	681b      	ldr	r3, [r3, #0]
 802d748:	4a6b      	ldr	r2, [pc, #428]	; (802d8f8 <HAL_DMA_Start_IT+0x4b4>)
 802d74a:	4293      	cmp	r3, r2
 802d74c:	d022      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d74e:	68fb      	ldr	r3, [r7, #12]
 802d750:	681b      	ldr	r3, [r3, #0]
 802d752:	4a6a      	ldr	r2, [pc, #424]	; (802d8fc <HAL_DMA_Start_IT+0x4b8>)
 802d754:	4293      	cmp	r3, r2
 802d756:	d01d      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d758:	68fb      	ldr	r3, [r7, #12]
 802d75a:	681b      	ldr	r3, [r3, #0]
 802d75c:	4a68      	ldr	r2, [pc, #416]	; (802d900 <HAL_DMA_Start_IT+0x4bc>)
 802d75e:	4293      	cmp	r3, r2
 802d760:	d018      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d762:	68fb      	ldr	r3, [r7, #12]
 802d764:	681b      	ldr	r3, [r3, #0]
 802d766:	4a67      	ldr	r2, [pc, #412]	; (802d904 <HAL_DMA_Start_IT+0x4c0>)
 802d768:	4293      	cmp	r3, r2
 802d76a:	d013      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d76c:	68fb      	ldr	r3, [r7, #12]
 802d76e:	681b      	ldr	r3, [r3, #0]
 802d770:	4a65      	ldr	r2, [pc, #404]	; (802d908 <HAL_DMA_Start_IT+0x4c4>)
 802d772:	4293      	cmp	r3, r2
 802d774:	d00e      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d776:	68fb      	ldr	r3, [r7, #12]
 802d778:	681b      	ldr	r3, [r3, #0]
 802d77a:	4a64      	ldr	r2, [pc, #400]	; (802d90c <HAL_DMA_Start_IT+0x4c8>)
 802d77c:	4293      	cmp	r3, r2
 802d77e:	d009      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d780:	68fb      	ldr	r3, [r7, #12]
 802d782:	681b      	ldr	r3, [r3, #0]
 802d784:	4a62      	ldr	r2, [pc, #392]	; (802d910 <HAL_DMA_Start_IT+0x4cc>)
 802d786:	4293      	cmp	r3, r2
 802d788:	d004      	beq.n	802d794 <HAL_DMA_Start_IT+0x350>
 802d78a:	68fb      	ldr	r3, [r7, #12]
 802d78c:	681b      	ldr	r3, [r3, #0]
 802d78e:	4a61      	ldr	r2, [pc, #388]	; (802d914 <HAL_DMA_Start_IT+0x4d0>)
 802d790:	4293      	cmp	r3, r2
 802d792:	d101      	bne.n	802d798 <HAL_DMA_Start_IT+0x354>
 802d794:	2301      	movs	r3, #1
 802d796:	e000      	b.n	802d79a <HAL_DMA_Start_IT+0x356>
 802d798:	2300      	movs	r3, #0
 802d79a:	2b00      	cmp	r3, #0
 802d79c:	d01a      	beq.n	802d7d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 802d79e:	68fb      	ldr	r3, [r7, #12]
 802d7a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802d7a2:	681b      	ldr	r3, [r3, #0]
 802d7a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d7a8:	2b00      	cmp	r3, #0
 802d7aa:	d007      	beq.n	802d7bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 802d7ac:	68fb      	ldr	r3, [r7, #12]
 802d7ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802d7b0:	681a      	ldr	r2, [r3, #0]
 802d7b2:	68fb      	ldr	r3, [r7, #12]
 802d7b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802d7b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802d7ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 802d7bc:	68fb      	ldr	r3, [r7, #12]
 802d7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d7c0:	2b00      	cmp	r3, #0
 802d7c2:	d007      	beq.n	802d7d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 802d7c4:	68fb      	ldr	r3, [r7, #12]
 802d7c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d7c8:	681a      	ldr	r2, [r3, #0]
 802d7ca:	68fb      	ldr	r3, [r7, #12]
 802d7cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802d7ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802d7d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802d7d4:	68fb      	ldr	r3, [r7, #12]
 802d7d6:	681b      	ldr	r3, [r3, #0]
 802d7d8:	4a37      	ldr	r2, [pc, #220]	; (802d8b8 <HAL_DMA_Start_IT+0x474>)
 802d7da:	4293      	cmp	r3, r2
 802d7dc:	d04a      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d7de:	68fb      	ldr	r3, [r7, #12]
 802d7e0:	681b      	ldr	r3, [r3, #0]
 802d7e2:	4a36      	ldr	r2, [pc, #216]	; (802d8bc <HAL_DMA_Start_IT+0x478>)
 802d7e4:	4293      	cmp	r3, r2
 802d7e6:	d045      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d7e8:	68fb      	ldr	r3, [r7, #12]
 802d7ea:	681b      	ldr	r3, [r3, #0]
 802d7ec:	4a34      	ldr	r2, [pc, #208]	; (802d8c0 <HAL_DMA_Start_IT+0x47c>)
 802d7ee:	4293      	cmp	r3, r2
 802d7f0:	d040      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d7f2:	68fb      	ldr	r3, [r7, #12]
 802d7f4:	681b      	ldr	r3, [r3, #0]
 802d7f6:	4a33      	ldr	r2, [pc, #204]	; (802d8c4 <HAL_DMA_Start_IT+0x480>)
 802d7f8:	4293      	cmp	r3, r2
 802d7fa:	d03b      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d7fc:	68fb      	ldr	r3, [r7, #12]
 802d7fe:	681b      	ldr	r3, [r3, #0]
 802d800:	4a31      	ldr	r2, [pc, #196]	; (802d8c8 <HAL_DMA_Start_IT+0x484>)
 802d802:	4293      	cmp	r3, r2
 802d804:	d036      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d806:	68fb      	ldr	r3, [r7, #12]
 802d808:	681b      	ldr	r3, [r3, #0]
 802d80a:	4a30      	ldr	r2, [pc, #192]	; (802d8cc <HAL_DMA_Start_IT+0x488>)
 802d80c:	4293      	cmp	r3, r2
 802d80e:	d031      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d810:	68fb      	ldr	r3, [r7, #12]
 802d812:	681b      	ldr	r3, [r3, #0]
 802d814:	4a2e      	ldr	r2, [pc, #184]	; (802d8d0 <HAL_DMA_Start_IT+0x48c>)
 802d816:	4293      	cmp	r3, r2
 802d818:	d02c      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d81a:	68fb      	ldr	r3, [r7, #12]
 802d81c:	681b      	ldr	r3, [r3, #0]
 802d81e:	4a2d      	ldr	r2, [pc, #180]	; (802d8d4 <HAL_DMA_Start_IT+0x490>)
 802d820:	4293      	cmp	r3, r2
 802d822:	d027      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d824:	68fb      	ldr	r3, [r7, #12]
 802d826:	681b      	ldr	r3, [r3, #0]
 802d828:	4a2b      	ldr	r2, [pc, #172]	; (802d8d8 <HAL_DMA_Start_IT+0x494>)
 802d82a:	4293      	cmp	r3, r2
 802d82c:	d022      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d82e:	68fb      	ldr	r3, [r7, #12]
 802d830:	681b      	ldr	r3, [r3, #0]
 802d832:	4a2a      	ldr	r2, [pc, #168]	; (802d8dc <HAL_DMA_Start_IT+0x498>)
 802d834:	4293      	cmp	r3, r2
 802d836:	d01d      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d838:	68fb      	ldr	r3, [r7, #12]
 802d83a:	681b      	ldr	r3, [r3, #0]
 802d83c:	4a28      	ldr	r2, [pc, #160]	; (802d8e0 <HAL_DMA_Start_IT+0x49c>)
 802d83e:	4293      	cmp	r3, r2
 802d840:	d018      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d842:	68fb      	ldr	r3, [r7, #12]
 802d844:	681b      	ldr	r3, [r3, #0]
 802d846:	4a27      	ldr	r2, [pc, #156]	; (802d8e4 <HAL_DMA_Start_IT+0x4a0>)
 802d848:	4293      	cmp	r3, r2
 802d84a:	d013      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d84c:	68fb      	ldr	r3, [r7, #12]
 802d84e:	681b      	ldr	r3, [r3, #0]
 802d850:	4a25      	ldr	r2, [pc, #148]	; (802d8e8 <HAL_DMA_Start_IT+0x4a4>)
 802d852:	4293      	cmp	r3, r2
 802d854:	d00e      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d856:	68fb      	ldr	r3, [r7, #12]
 802d858:	681b      	ldr	r3, [r3, #0]
 802d85a:	4a24      	ldr	r2, [pc, #144]	; (802d8ec <HAL_DMA_Start_IT+0x4a8>)
 802d85c:	4293      	cmp	r3, r2
 802d85e:	d009      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d860:	68fb      	ldr	r3, [r7, #12]
 802d862:	681b      	ldr	r3, [r3, #0]
 802d864:	4a22      	ldr	r2, [pc, #136]	; (802d8f0 <HAL_DMA_Start_IT+0x4ac>)
 802d866:	4293      	cmp	r3, r2
 802d868:	d004      	beq.n	802d874 <HAL_DMA_Start_IT+0x430>
 802d86a:	68fb      	ldr	r3, [r7, #12]
 802d86c:	681b      	ldr	r3, [r3, #0]
 802d86e:	4a21      	ldr	r2, [pc, #132]	; (802d8f4 <HAL_DMA_Start_IT+0x4b0>)
 802d870:	4293      	cmp	r3, r2
 802d872:	d108      	bne.n	802d886 <HAL_DMA_Start_IT+0x442>
 802d874:	68fb      	ldr	r3, [r7, #12]
 802d876:	681b      	ldr	r3, [r3, #0]
 802d878:	681a      	ldr	r2, [r3, #0]
 802d87a:	68fb      	ldr	r3, [r7, #12]
 802d87c:	681b      	ldr	r3, [r3, #0]
 802d87e:	f042 0201 	orr.w	r2, r2, #1
 802d882:	601a      	str	r2, [r3, #0]
 802d884:	e012      	b.n	802d8ac <HAL_DMA_Start_IT+0x468>
 802d886:	68fb      	ldr	r3, [r7, #12]
 802d888:	681b      	ldr	r3, [r3, #0]
 802d88a:	681a      	ldr	r2, [r3, #0]
 802d88c:	68fb      	ldr	r3, [r7, #12]
 802d88e:	681b      	ldr	r3, [r3, #0]
 802d890:	f042 0201 	orr.w	r2, r2, #1
 802d894:	601a      	str	r2, [r3, #0]
 802d896:	e009      	b.n	802d8ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 802d898:	68fb      	ldr	r3, [r7, #12]
 802d89a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802d89e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 802d8a0:	68fb      	ldr	r3, [r7, #12]
 802d8a2:	2200      	movs	r2, #0
 802d8a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 802d8a8:	2301      	movs	r3, #1
 802d8aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 802d8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 802d8ae:	4618      	mov	r0, r3
 802d8b0:	3718      	adds	r7, #24
 802d8b2:	46bd      	mov	sp, r7
 802d8b4:	bd80      	pop	{r7, pc}
 802d8b6:	bf00      	nop
 802d8b8:	40020010 	.word	0x40020010
 802d8bc:	40020028 	.word	0x40020028
 802d8c0:	40020040 	.word	0x40020040
 802d8c4:	40020058 	.word	0x40020058
 802d8c8:	40020070 	.word	0x40020070
 802d8cc:	40020088 	.word	0x40020088
 802d8d0:	400200a0 	.word	0x400200a0
 802d8d4:	400200b8 	.word	0x400200b8
 802d8d8:	40020410 	.word	0x40020410
 802d8dc:	40020428 	.word	0x40020428
 802d8e0:	40020440 	.word	0x40020440
 802d8e4:	40020458 	.word	0x40020458
 802d8e8:	40020470 	.word	0x40020470
 802d8ec:	40020488 	.word	0x40020488
 802d8f0:	400204a0 	.word	0x400204a0
 802d8f4:	400204b8 	.word	0x400204b8
 802d8f8:	58025408 	.word	0x58025408
 802d8fc:	5802541c 	.word	0x5802541c
 802d900:	58025430 	.word	0x58025430
 802d904:	58025444 	.word	0x58025444
 802d908:	58025458 	.word	0x58025458
 802d90c:	5802546c 	.word	0x5802546c
 802d910:	58025480 	.word	0x58025480
 802d914:	58025494 	.word	0x58025494

0802d918 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802d918:	b580      	push	{r7, lr}
 802d91a:	b086      	sub	sp, #24
 802d91c:	af00      	add	r7, sp, #0
 802d91e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 802d920:	f7fe fd38 	bl	802c394 <HAL_GetTick>
 802d924:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802d926:	687b      	ldr	r3, [r7, #4]
 802d928:	2b00      	cmp	r3, #0
 802d92a:	d101      	bne.n	802d930 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 802d92c:	2301      	movs	r3, #1
 802d92e:	e2dc      	b.n	802deea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802d930:	687b      	ldr	r3, [r7, #4]
 802d932:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802d936:	b2db      	uxtb	r3, r3
 802d938:	2b02      	cmp	r3, #2
 802d93a:	d008      	beq.n	802d94e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802d93c:	687b      	ldr	r3, [r7, #4]
 802d93e:	2280      	movs	r2, #128	; 0x80
 802d940:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802d942:	687b      	ldr	r3, [r7, #4]
 802d944:	2200      	movs	r2, #0
 802d946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 802d94a:	2301      	movs	r3, #1
 802d94c:	e2cd      	b.n	802deea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802d94e:	687b      	ldr	r3, [r7, #4]
 802d950:	681b      	ldr	r3, [r3, #0]
 802d952:	4a76      	ldr	r2, [pc, #472]	; (802db2c <HAL_DMA_Abort+0x214>)
 802d954:	4293      	cmp	r3, r2
 802d956:	d04a      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d958:	687b      	ldr	r3, [r7, #4]
 802d95a:	681b      	ldr	r3, [r3, #0]
 802d95c:	4a74      	ldr	r2, [pc, #464]	; (802db30 <HAL_DMA_Abort+0x218>)
 802d95e:	4293      	cmp	r3, r2
 802d960:	d045      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d962:	687b      	ldr	r3, [r7, #4]
 802d964:	681b      	ldr	r3, [r3, #0]
 802d966:	4a73      	ldr	r2, [pc, #460]	; (802db34 <HAL_DMA_Abort+0x21c>)
 802d968:	4293      	cmp	r3, r2
 802d96a:	d040      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d96c:	687b      	ldr	r3, [r7, #4]
 802d96e:	681b      	ldr	r3, [r3, #0]
 802d970:	4a71      	ldr	r2, [pc, #452]	; (802db38 <HAL_DMA_Abort+0x220>)
 802d972:	4293      	cmp	r3, r2
 802d974:	d03b      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d976:	687b      	ldr	r3, [r7, #4]
 802d978:	681b      	ldr	r3, [r3, #0]
 802d97a:	4a70      	ldr	r2, [pc, #448]	; (802db3c <HAL_DMA_Abort+0x224>)
 802d97c:	4293      	cmp	r3, r2
 802d97e:	d036      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d980:	687b      	ldr	r3, [r7, #4]
 802d982:	681b      	ldr	r3, [r3, #0]
 802d984:	4a6e      	ldr	r2, [pc, #440]	; (802db40 <HAL_DMA_Abort+0x228>)
 802d986:	4293      	cmp	r3, r2
 802d988:	d031      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d98a:	687b      	ldr	r3, [r7, #4]
 802d98c:	681b      	ldr	r3, [r3, #0]
 802d98e:	4a6d      	ldr	r2, [pc, #436]	; (802db44 <HAL_DMA_Abort+0x22c>)
 802d990:	4293      	cmp	r3, r2
 802d992:	d02c      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d994:	687b      	ldr	r3, [r7, #4]
 802d996:	681b      	ldr	r3, [r3, #0]
 802d998:	4a6b      	ldr	r2, [pc, #428]	; (802db48 <HAL_DMA_Abort+0x230>)
 802d99a:	4293      	cmp	r3, r2
 802d99c:	d027      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d99e:	687b      	ldr	r3, [r7, #4]
 802d9a0:	681b      	ldr	r3, [r3, #0]
 802d9a2:	4a6a      	ldr	r2, [pc, #424]	; (802db4c <HAL_DMA_Abort+0x234>)
 802d9a4:	4293      	cmp	r3, r2
 802d9a6:	d022      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d9a8:	687b      	ldr	r3, [r7, #4]
 802d9aa:	681b      	ldr	r3, [r3, #0]
 802d9ac:	4a68      	ldr	r2, [pc, #416]	; (802db50 <HAL_DMA_Abort+0x238>)
 802d9ae:	4293      	cmp	r3, r2
 802d9b0:	d01d      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d9b2:	687b      	ldr	r3, [r7, #4]
 802d9b4:	681b      	ldr	r3, [r3, #0]
 802d9b6:	4a67      	ldr	r2, [pc, #412]	; (802db54 <HAL_DMA_Abort+0x23c>)
 802d9b8:	4293      	cmp	r3, r2
 802d9ba:	d018      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d9bc:	687b      	ldr	r3, [r7, #4]
 802d9be:	681b      	ldr	r3, [r3, #0]
 802d9c0:	4a65      	ldr	r2, [pc, #404]	; (802db58 <HAL_DMA_Abort+0x240>)
 802d9c2:	4293      	cmp	r3, r2
 802d9c4:	d013      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d9c6:	687b      	ldr	r3, [r7, #4]
 802d9c8:	681b      	ldr	r3, [r3, #0]
 802d9ca:	4a64      	ldr	r2, [pc, #400]	; (802db5c <HAL_DMA_Abort+0x244>)
 802d9cc:	4293      	cmp	r3, r2
 802d9ce:	d00e      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d9d0:	687b      	ldr	r3, [r7, #4]
 802d9d2:	681b      	ldr	r3, [r3, #0]
 802d9d4:	4a62      	ldr	r2, [pc, #392]	; (802db60 <HAL_DMA_Abort+0x248>)
 802d9d6:	4293      	cmp	r3, r2
 802d9d8:	d009      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d9da:	687b      	ldr	r3, [r7, #4]
 802d9dc:	681b      	ldr	r3, [r3, #0]
 802d9de:	4a61      	ldr	r2, [pc, #388]	; (802db64 <HAL_DMA_Abort+0x24c>)
 802d9e0:	4293      	cmp	r3, r2
 802d9e2:	d004      	beq.n	802d9ee <HAL_DMA_Abort+0xd6>
 802d9e4:	687b      	ldr	r3, [r7, #4]
 802d9e6:	681b      	ldr	r3, [r3, #0]
 802d9e8:	4a5f      	ldr	r2, [pc, #380]	; (802db68 <HAL_DMA_Abort+0x250>)
 802d9ea:	4293      	cmp	r3, r2
 802d9ec:	d101      	bne.n	802d9f2 <HAL_DMA_Abort+0xda>
 802d9ee:	2301      	movs	r3, #1
 802d9f0:	e000      	b.n	802d9f4 <HAL_DMA_Abort+0xdc>
 802d9f2:	2300      	movs	r3, #0
 802d9f4:	2b00      	cmp	r3, #0
 802d9f6:	d013      	beq.n	802da20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 802d9f8:	687b      	ldr	r3, [r7, #4]
 802d9fa:	681b      	ldr	r3, [r3, #0]
 802d9fc:	681a      	ldr	r2, [r3, #0]
 802d9fe:	687b      	ldr	r3, [r7, #4]
 802da00:	681b      	ldr	r3, [r3, #0]
 802da02:	f022 021e 	bic.w	r2, r2, #30
 802da06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802da08:	687b      	ldr	r3, [r7, #4]
 802da0a:	681b      	ldr	r3, [r3, #0]
 802da0c:	695a      	ldr	r2, [r3, #20]
 802da0e:	687b      	ldr	r3, [r7, #4]
 802da10:	681b      	ldr	r3, [r3, #0]
 802da12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802da16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 802da18:	687b      	ldr	r3, [r7, #4]
 802da1a:	681b      	ldr	r3, [r3, #0]
 802da1c:	617b      	str	r3, [r7, #20]
 802da1e:	e00a      	b.n	802da36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802da20:	687b      	ldr	r3, [r7, #4]
 802da22:	681b      	ldr	r3, [r3, #0]
 802da24:	681a      	ldr	r2, [r3, #0]
 802da26:	687b      	ldr	r3, [r7, #4]
 802da28:	681b      	ldr	r3, [r3, #0]
 802da2a:	f022 020e 	bic.w	r2, r2, #14
 802da2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 802da30:	687b      	ldr	r3, [r7, #4]
 802da32:	681b      	ldr	r3, [r3, #0]
 802da34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802da36:	687b      	ldr	r3, [r7, #4]
 802da38:	681b      	ldr	r3, [r3, #0]
 802da3a:	4a3c      	ldr	r2, [pc, #240]	; (802db2c <HAL_DMA_Abort+0x214>)
 802da3c:	4293      	cmp	r3, r2
 802da3e:	d072      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802da40:	687b      	ldr	r3, [r7, #4]
 802da42:	681b      	ldr	r3, [r3, #0]
 802da44:	4a3a      	ldr	r2, [pc, #232]	; (802db30 <HAL_DMA_Abort+0x218>)
 802da46:	4293      	cmp	r3, r2
 802da48:	d06d      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802da4a:	687b      	ldr	r3, [r7, #4]
 802da4c:	681b      	ldr	r3, [r3, #0]
 802da4e:	4a39      	ldr	r2, [pc, #228]	; (802db34 <HAL_DMA_Abort+0x21c>)
 802da50:	4293      	cmp	r3, r2
 802da52:	d068      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802da54:	687b      	ldr	r3, [r7, #4]
 802da56:	681b      	ldr	r3, [r3, #0]
 802da58:	4a37      	ldr	r2, [pc, #220]	; (802db38 <HAL_DMA_Abort+0x220>)
 802da5a:	4293      	cmp	r3, r2
 802da5c:	d063      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802da5e:	687b      	ldr	r3, [r7, #4]
 802da60:	681b      	ldr	r3, [r3, #0]
 802da62:	4a36      	ldr	r2, [pc, #216]	; (802db3c <HAL_DMA_Abort+0x224>)
 802da64:	4293      	cmp	r3, r2
 802da66:	d05e      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802da68:	687b      	ldr	r3, [r7, #4]
 802da6a:	681b      	ldr	r3, [r3, #0]
 802da6c:	4a34      	ldr	r2, [pc, #208]	; (802db40 <HAL_DMA_Abort+0x228>)
 802da6e:	4293      	cmp	r3, r2
 802da70:	d059      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802da72:	687b      	ldr	r3, [r7, #4]
 802da74:	681b      	ldr	r3, [r3, #0]
 802da76:	4a33      	ldr	r2, [pc, #204]	; (802db44 <HAL_DMA_Abort+0x22c>)
 802da78:	4293      	cmp	r3, r2
 802da7a:	d054      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802da7c:	687b      	ldr	r3, [r7, #4]
 802da7e:	681b      	ldr	r3, [r3, #0]
 802da80:	4a31      	ldr	r2, [pc, #196]	; (802db48 <HAL_DMA_Abort+0x230>)
 802da82:	4293      	cmp	r3, r2
 802da84:	d04f      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802da86:	687b      	ldr	r3, [r7, #4]
 802da88:	681b      	ldr	r3, [r3, #0]
 802da8a:	4a30      	ldr	r2, [pc, #192]	; (802db4c <HAL_DMA_Abort+0x234>)
 802da8c:	4293      	cmp	r3, r2
 802da8e:	d04a      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802da90:	687b      	ldr	r3, [r7, #4]
 802da92:	681b      	ldr	r3, [r3, #0]
 802da94:	4a2e      	ldr	r2, [pc, #184]	; (802db50 <HAL_DMA_Abort+0x238>)
 802da96:	4293      	cmp	r3, r2
 802da98:	d045      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802da9a:	687b      	ldr	r3, [r7, #4]
 802da9c:	681b      	ldr	r3, [r3, #0]
 802da9e:	4a2d      	ldr	r2, [pc, #180]	; (802db54 <HAL_DMA_Abort+0x23c>)
 802daa0:	4293      	cmp	r3, r2
 802daa2:	d040      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802daa4:	687b      	ldr	r3, [r7, #4]
 802daa6:	681b      	ldr	r3, [r3, #0]
 802daa8:	4a2b      	ldr	r2, [pc, #172]	; (802db58 <HAL_DMA_Abort+0x240>)
 802daaa:	4293      	cmp	r3, r2
 802daac:	d03b      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802daae:	687b      	ldr	r3, [r7, #4]
 802dab0:	681b      	ldr	r3, [r3, #0]
 802dab2:	4a2a      	ldr	r2, [pc, #168]	; (802db5c <HAL_DMA_Abort+0x244>)
 802dab4:	4293      	cmp	r3, r2
 802dab6:	d036      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802dab8:	687b      	ldr	r3, [r7, #4]
 802daba:	681b      	ldr	r3, [r3, #0]
 802dabc:	4a28      	ldr	r2, [pc, #160]	; (802db60 <HAL_DMA_Abort+0x248>)
 802dabe:	4293      	cmp	r3, r2
 802dac0:	d031      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802dac2:	687b      	ldr	r3, [r7, #4]
 802dac4:	681b      	ldr	r3, [r3, #0]
 802dac6:	4a27      	ldr	r2, [pc, #156]	; (802db64 <HAL_DMA_Abort+0x24c>)
 802dac8:	4293      	cmp	r3, r2
 802daca:	d02c      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802dacc:	687b      	ldr	r3, [r7, #4]
 802dace:	681b      	ldr	r3, [r3, #0]
 802dad0:	4a25      	ldr	r2, [pc, #148]	; (802db68 <HAL_DMA_Abort+0x250>)
 802dad2:	4293      	cmp	r3, r2
 802dad4:	d027      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802dad6:	687b      	ldr	r3, [r7, #4]
 802dad8:	681b      	ldr	r3, [r3, #0]
 802dada:	4a24      	ldr	r2, [pc, #144]	; (802db6c <HAL_DMA_Abort+0x254>)
 802dadc:	4293      	cmp	r3, r2
 802dade:	d022      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802dae0:	687b      	ldr	r3, [r7, #4]
 802dae2:	681b      	ldr	r3, [r3, #0]
 802dae4:	4a22      	ldr	r2, [pc, #136]	; (802db70 <HAL_DMA_Abort+0x258>)
 802dae6:	4293      	cmp	r3, r2
 802dae8:	d01d      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802daea:	687b      	ldr	r3, [r7, #4]
 802daec:	681b      	ldr	r3, [r3, #0]
 802daee:	4a21      	ldr	r2, [pc, #132]	; (802db74 <HAL_DMA_Abort+0x25c>)
 802daf0:	4293      	cmp	r3, r2
 802daf2:	d018      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802daf4:	687b      	ldr	r3, [r7, #4]
 802daf6:	681b      	ldr	r3, [r3, #0]
 802daf8:	4a1f      	ldr	r2, [pc, #124]	; (802db78 <HAL_DMA_Abort+0x260>)
 802dafa:	4293      	cmp	r3, r2
 802dafc:	d013      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802dafe:	687b      	ldr	r3, [r7, #4]
 802db00:	681b      	ldr	r3, [r3, #0]
 802db02:	4a1e      	ldr	r2, [pc, #120]	; (802db7c <HAL_DMA_Abort+0x264>)
 802db04:	4293      	cmp	r3, r2
 802db06:	d00e      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802db08:	687b      	ldr	r3, [r7, #4]
 802db0a:	681b      	ldr	r3, [r3, #0]
 802db0c:	4a1c      	ldr	r2, [pc, #112]	; (802db80 <HAL_DMA_Abort+0x268>)
 802db0e:	4293      	cmp	r3, r2
 802db10:	d009      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802db12:	687b      	ldr	r3, [r7, #4]
 802db14:	681b      	ldr	r3, [r3, #0]
 802db16:	4a1b      	ldr	r2, [pc, #108]	; (802db84 <HAL_DMA_Abort+0x26c>)
 802db18:	4293      	cmp	r3, r2
 802db1a:	d004      	beq.n	802db26 <HAL_DMA_Abort+0x20e>
 802db1c:	687b      	ldr	r3, [r7, #4]
 802db1e:	681b      	ldr	r3, [r3, #0]
 802db20:	4a19      	ldr	r2, [pc, #100]	; (802db88 <HAL_DMA_Abort+0x270>)
 802db22:	4293      	cmp	r3, r2
 802db24:	d132      	bne.n	802db8c <HAL_DMA_Abort+0x274>
 802db26:	2301      	movs	r3, #1
 802db28:	e031      	b.n	802db8e <HAL_DMA_Abort+0x276>
 802db2a:	bf00      	nop
 802db2c:	40020010 	.word	0x40020010
 802db30:	40020028 	.word	0x40020028
 802db34:	40020040 	.word	0x40020040
 802db38:	40020058 	.word	0x40020058
 802db3c:	40020070 	.word	0x40020070
 802db40:	40020088 	.word	0x40020088
 802db44:	400200a0 	.word	0x400200a0
 802db48:	400200b8 	.word	0x400200b8
 802db4c:	40020410 	.word	0x40020410
 802db50:	40020428 	.word	0x40020428
 802db54:	40020440 	.word	0x40020440
 802db58:	40020458 	.word	0x40020458
 802db5c:	40020470 	.word	0x40020470
 802db60:	40020488 	.word	0x40020488
 802db64:	400204a0 	.word	0x400204a0
 802db68:	400204b8 	.word	0x400204b8
 802db6c:	58025408 	.word	0x58025408
 802db70:	5802541c 	.word	0x5802541c
 802db74:	58025430 	.word	0x58025430
 802db78:	58025444 	.word	0x58025444
 802db7c:	58025458 	.word	0x58025458
 802db80:	5802546c 	.word	0x5802546c
 802db84:	58025480 	.word	0x58025480
 802db88:	58025494 	.word	0x58025494
 802db8c:	2300      	movs	r3, #0
 802db8e:	2b00      	cmp	r3, #0
 802db90:	d007      	beq.n	802dba2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802db92:	687b      	ldr	r3, [r7, #4]
 802db94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802db96:	681a      	ldr	r2, [r3, #0]
 802db98:	687b      	ldr	r3, [r7, #4]
 802db9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802db9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802dba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802dba2:	687b      	ldr	r3, [r7, #4]
 802dba4:	681b      	ldr	r3, [r3, #0]
 802dba6:	4a6d      	ldr	r2, [pc, #436]	; (802dd5c <HAL_DMA_Abort+0x444>)
 802dba8:	4293      	cmp	r3, r2
 802dbaa:	d04a      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dbac:	687b      	ldr	r3, [r7, #4]
 802dbae:	681b      	ldr	r3, [r3, #0]
 802dbb0:	4a6b      	ldr	r2, [pc, #428]	; (802dd60 <HAL_DMA_Abort+0x448>)
 802dbb2:	4293      	cmp	r3, r2
 802dbb4:	d045      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dbb6:	687b      	ldr	r3, [r7, #4]
 802dbb8:	681b      	ldr	r3, [r3, #0]
 802dbba:	4a6a      	ldr	r2, [pc, #424]	; (802dd64 <HAL_DMA_Abort+0x44c>)
 802dbbc:	4293      	cmp	r3, r2
 802dbbe:	d040      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dbc0:	687b      	ldr	r3, [r7, #4]
 802dbc2:	681b      	ldr	r3, [r3, #0]
 802dbc4:	4a68      	ldr	r2, [pc, #416]	; (802dd68 <HAL_DMA_Abort+0x450>)
 802dbc6:	4293      	cmp	r3, r2
 802dbc8:	d03b      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dbca:	687b      	ldr	r3, [r7, #4]
 802dbcc:	681b      	ldr	r3, [r3, #0]
 802dbce:	4a67      	ldr	r2, [pc, #412]	; (802dd6c <HAL_DMA_Abort+0x454>)
 802dbd0:	4293      	cmp	r3, r2
 802dbd2:	d036      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dbd4:	687b      	ldr	r3, [r7, #4]
 802dbd6:	681b      	ldr	r3, [r3, #0]
 802dbd8:	4a65      	ldr	r2, [pc, #404]	; (802dd70 <HAL_DMA_Abort+0x458>)
 802dbda:	4293      	cmp	r3, r2
 802dbdc:	d031      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dbde:	687b      	ldr	r3, [r7, #4]
 802dbe0:	681b      	ldr	r3, [r3, #0]
 802dbe2:	4a64      	ldr	r2, [pc, #400]	; (802dd74 <HAL_DMA_Abort+0x45c>)
 802dbe4:	4293      	cmp	r3, r2
 802dbe6:	d02c      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dbe8:	687b      	ldr	r3, [r7, #4]
 802dbea:	681b      	ldr	r3, [r3, #0]
 802dbec:	4a62      	ldr	r2, [pc, #392]	; (802dd78 <HAL_DMA_Abort+0x460>)
 802dbee:	4293      	cmp	r3, r2
 802dbf0:	d027      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dbf2:	687b      	ldr	r3, [r7, #4]
 802dbf4:	681b      	ldr	r3, [r3, #0]
 802dbf6:	4a61      	ldr	r2, [pc, #388]	; (802dd7c <HAL_DMA_Abort+0x464>)
 802dbf8:	4293      	cmp	r3, r2
 802dbfa:	d022      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dbfc:	687b      	ldr	r3, [r7, #4]
 802dbfe:	681b      	ldr	r3, [r3, #0]
 802dc00:	4a5f      	ldr	r2, [pc, #380]	; (802dd80 <HAL_DMA_Abort+0x468>)
 802dc02:	4293      	cmp	r3, r2
 802dc04:	d01d      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dc06:	687b      	ldr	r3, [r7, #4]
 802dc08:	681b      	ldr	r3, [r3, #0]
 802dc0a:	4a5e      	ldr	r2, [pc, #376]	; (802dd84 <HAL_DMA_Abort+0x46c>)
 802dc0c:	4293      	cmp	r3, r2
 802dc0e:	d018      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dc10:	687b      	ldr	r3, [r7, #4]
 802dc12:	681b      	ldr	r3, [r3, #0]
 802dc14:	4a5c      	ldr	r2, [pc, #368]	; (802dd88 <HAL_DMA_Abort+0x470>)
 802dc16:	4293      	cmp	r3, r2
 802dc18:	d013      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dc1a:	687b      	ldr	r3, [r7, #4]
 802dc1c:	681b      	ldr	r3, [r3, #0]
 802dc1e:	4a5b      	ldr	r2, [pc, #364]	; (802dd8c <HAL_DMA_Abort+0x474>)
 802dc20:	4293      	cmp	r3, r2
 802dc22:	d00e      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dc24:	687b      	ldr	r3, [r7, #4]
 802dc26:	681b      	ldr	r3, [r3, #0]
 802dc28:	4a59      	ldr	r2, [pc, #356]	; (802dd90 <HAL_DMA_Abort+0x478>)
 802dc2a:	4293      	cmp	r3, r2
 802dc2c:	d009      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dc2e:	687b      	ldr	r3, [r7, #4]
 802dc30:	681b      	ldr	r3, [r3, #0]
 802dc32:	4a58      	ldr	r2, [pc, #352]	; (802dd94 <HAL_DMA_Abort+0x47c>)
 802dc34:	4293      	cmp	r3, r2
 802dc36:	d004      	beq.n	802dc42 <HAL_DMA_Abort+0x32a>
 802dc38:	687b      	ldr	r3, [r7, #4]
 802dc3a:	681b      	ldr	r3, [r3, #0]
 802dc3c:	4a56      	ldr	r2, [pc, #344]	; (802dd98 <HAL_DMA_Abort+0x480>)
 802dc3e:	4293      	cmp	r3, r2
 802dc40:	d108      	bne.n	802dc54 <HAL_DMA_Abort+0x33c>
 802dc42:	687b      	ldr	r3, [r7, #4]
 802dc44:	681b      	ldr	r3, [r3, #0]
 802dc46:	681a      	ldr	r2, [r3, #0]
 802dc48:	687b      	ldr	r3, [r7, #4]
 802dc4a:	681b      	ldr	r3, [r3, #0]
 802dc4c:	f022 0201 	bic.w	r2, r2, #1
 802dc50:	601a      	str	r2, [r3, #0]
 802dc52:	e007      	b.n	802dc64 <HAL_DMA_Abort+0x34c>
 802dc54:	687b      	ldr	r3, [r7, #4]
 802dc56:	681b      	ldr	r3, [r3, #0]
 802dc58:	681a      	ldr	r2, [r3, #0]
 802dc5a:	687b      	ldr	r3, [r7, #4]
 802dc5c:	681b      	ldr	r3, [r3, #0]
 802dc5e:	f022 0201 	bic.w	r2, r2, #1
 802dc62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802dc64:	e013      	b.n	802dc8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802dc66:	f7fe fb95 	bl	802c394 <HAL_GetTick>
 802dc6a:	4602      	mov	r2, r0
 802dc6c:	693b      	ldr	r3, [r7, #16]
 802dc6e:	1ad3      	subs	r3, r2, r3
 802dc70:	2b05      	cmp	r3, #5
 802dc72:	d90c      	bls.n	802dc8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802dc74:	687b      	ldr	r3, [r7, #4]
 802dc76:	2220      	movs	r2, #32
 802dc78:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802dc7a:	687b      	ldr	r3, [r7, #4]
 802dc7c:	2203      	movs	r2, #3
 802dc7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802dc82:	687b      	ldr	r3, [r7, #4]
 802dc84:	2200      	movs	r2, #0
 802dc86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 802dc8a:	2301      	movs	r3, #1
 802dc8c:	e12d      	b.n	802deea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802dc8e:	697b      	ldr	r3, [r7, #20]
 802dc90:	681b      	ldr	r3, [r3, #0]
 802dc92:	f003 0301 	and.w	r3, r3, #1
 802dc96:	2b00      	cmp	r3, #0
 802dc98:	d1e5      	bne.n	802dc66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802dc9a:	687b      	ldr	r3, [r7, #4]
 802dc9c:	681b      	ldr	r3, [r3, #0]
 802dc9e:	4a2f      	ldr	r2, [pc, #188]	; (802dd5c <HAL_DMA_Abort+0x444>)
 802dca0:	4293      	cmp	r3, r2
 802dca2:	d04a      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dca4:	687b      	ldr	r3, [r7, #4]
 802dca6:	681b      	ldr	r3, [r3, #0]
 802dca8:	4a2d      	ldr	r2, [pc, #180]	; (802dd60 <HAL_DMA_Abort+0x448>)
 802dcaa:	4293      	cmp	r3, r2
 802dcac:	d045      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dcae:	687b      	ldr	r3, [r7, #4]
 802dcb0:	681b      	ldr	r3, [r3, #0]
 802dcb2:	4a2c      	ldr	r2, [pc, #176]	; (802dd64 <HAL_DMA_Abort+0x44c>)
 802dcb4:	4293      	cmp	r3, r2
 802dcb6:	d040      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dcb8:	687b      	ldr	r3, [r7, #4]
 802dcba:	681b      	ldr	r3, [r3, #0]
 802dcbc:	4a2a      	ldr	r2, [pc, #168]	; (802dd68 <HAL_DMA_Abort+0x450>)
 802dcbe:	4293      	cmp	r3, r2
 802dcc0:	d03b      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dcc2:	687b      	ldr	r3, [r7, #4]
 802dcc4:	681b      	ldr	r3, [r3, #0]
 802dcc6:	4a29      	ldr	r2, [pc, #164]	; (802dd6c <HAL_DMA_Abort+0x454>)
 802dcc8:	4293      	cmp	r3, r2
 802dcca:	d036      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dccc:	687b      	ldr	r3, [r7, #4]
 802dcce:	681b      	ldr	r3, [r3, #0]
 802dcd0:	4a27      	ldr	r2, [pc, #156]	; (802dd70 <HAL_DMA_Abort+0x458>)
 802dcd2:	4293      	cmp	r3, r2
 802dcd4:	d031      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dcd6:	687b      	ldr	r3, [r7, #4]
 802dcd8:	681b      	ldr	r3, [r3, #0]
 802dcda:	4a26      	ldr	r2, [pc, #152]	; (802dd74 <HAL_DMA_Abort+0x45c>)
 802dcdc:	4293      	cmp	r3, r2
 802dcde:	d02c      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dce0:	687b      	ldr	r3, [r7, #4]
 802dce2:	681b      	ldr	r3, [r3, #0]
 802dce4:	4a24      	ldr	r2, [pc, #144]	; (802dd78 <HAL_DMA_Abort+0x460>)
 802dce6:	4293      	cmp	r3, r2
 802dce8:	d027      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dcea:	687b      	ldr	r3, [r7, #4]
 802dcec:	681b      	ldr	r3, [r3, #0]
 802dcee:	4a23      	ldr	r2, [pc, #140]	; (802dd7c <HAL_DMA_Abort+0x464>)
 802dcf0:	4293      	cmp	r3, r2
 802dcf2:	d022      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dcf4:	687b      	ldr	r3, [r7, #4]
 802dcf6:	681b      	ldr	r3, [r3, #0]
 802dcf8:	4a21      	ldr	r2, [pc, #132]	; (802dd80 <HAL_DMA_Abort+0x468>)
 802dcfa:	4293      	cmp	r3, r2
 802dcfc:	d01d      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dcfe:	687b      	ldr	r3, [r7, #4]
 802dd00:	681b      	ldr	r3, [r3, #0]
 802dd02:	4a20      	ldr	r2, [pc, #128]	; (802dd84 <HAL_DMA_Abort+0x46c>)
 802dd04:	4293      	cmp	r3, r2
 802dd06:	d018      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dd08:	687b      	ldr	r3, [r7, #4]
 802dd0a:	681b      	ldr	r3, [r3, #0]
 802dd0c:	4a1e      	ldr	r2, [pc, #120]	; (802dd88 <HAL_DMA_Abort+0x470>)
 802dd0e:	4293      	cmp	r3, r2
 802dd10:	d013      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dd12:	687b      	ldr	r3, [r7, #4]
 802dd14:	681b      	ldr	r3, [r3, #0]
 802dd16:	4a1d      	ldr	r2, [pc, #116]	; (802dd8c <HAL_DMA_Abort+0x474>)
 802dd18:	4293      	cmp	r3, r2
 802dd1a:	d00e      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dd1c:	687b      	ldr	r3, [r7, #4]
 802dd1e:	681b      	ldr	r3, [r3, #0]
 802dd20:	4a1b      	ldr	r2, [pc, #108]	; (802dd90 <HAL_DMA_Abort+0x478>)
 802dd22:	4293      	cmp	r3, r2
 802dd24:	d009      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dd26:	687b      	ldr	r3, [r7, #4]
 802dd28:	681b      	ldr	r3, [r3, #0]
 802dd2a:	4a1a      	ldr	r2, [pc, #104]	; (802dd94 <HAL_DMA_Abort+0x47c>)
 802dd2c:	4293      	cmp	r3, r2
 802dd2e:	d004      	beq.n	802dd3a <HAL_DMA_Abort+0x422>
 802dd30:	687b      	ldr	r3, [r7, #4]
 802dd32:	681b      	ldr	r3, [r3, #0]
 802dd34:	4a18      	ldr	r2, [pc, #96]	; (802dd98 <HAL_DMA_Abort+0x480>)
 802dd36:	4293      	cmp	r3, r2
 802dd38:	d101      	bne.n	802dd3e <HAL_DMA_Abort+0x426>
 802dd3a:	2301      	movs	r3, #1
 802dd3c:	e000      	b.n	802dd40 <HAL_DMA_Abort+0x428>
 802dd3e:	2300      	movs	r3, #0
 802dd40:	2b00      	cmp	r3, #0
 802dd42:	d02b      	beq.n	802dd9c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802dd44:	687b      	ldr	r3, [r7, #4]
 802dd46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802dd48:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802dd4a:	687b      	ldr	r3, [r7, #4]
 802dd4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dd4e:	f003 031f 	and.w	r3, r3, #31
 802dd52:	223f      	movs	r2, #63	; 0x3f
 802dd54:	409a      	lsls	r2, r3
 802dd56:	68bb      	ldr	r3, [r7, #8]
 802dd58:	609a      	str	r2, [r3, #8]
 802dd5a:	e02a      	b.n	802ddb2 <HAL_DMA_Abort+0x49a>
 802dd5c:	40020010 	.word	0x40020010
 802dd60:	40020028 	.word	0x40020028
 802dd64:	40020040 	.word	0x40020040
 802dd68:	40020058 	.word	0x40020058
 802dd6c:	40020070 	.word	0x40020070
 802dd70:	40020088 	.word	0x40020088
 802dd74:	400200a0 	.word	0x400200a0
 802dd78:	400200b8 	.word	0x400200b8
 802dd7c:	40020410 	.word	0x40020410
 802dd80:	40020428 	.word	0x40020428
 802dd84:	40020440 	.word	0x40020440
 802dd88:	40020458 	.word	0x40020458
 802dd8c:	40020470 	.word	0x40020470
 802dd90:	40020488 	.word	0x40020488
 802dd94:	400204a0 	.word	0x400204a0
 802dd98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802dd9c:	687b      	ldr	r3, [r7, #4]
 802dd9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802dda0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802dda2:	687b      	ldr	r3, [r7, #4]
 802dda4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dda6:	f003 031f 	and.w	r3, r3, #31
 802ddaa:	2201      	movs	r2, #1
 802ddac:	409a      	lsls	r2, r3
 802ddae:	68fb      	ldr	r3, [r7, #12]
 802ddb0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802ddb2:	687b      	ldr	r3, [r7, #4]
 802ddb4:	681b      	ldr	r3, [r3, #0]
 802ddb6:	4a4f      	ldr	r2, [pc, #316]	; (802def4 <HAL_DMA_Abort+0x5dc>)
 802ddb8:	4293      	cmp	r3, r2
 802ddba:	d072      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802ddbc:	687b      	ldr	r3, [r7, #4]
 802ddbe:	681b      	ldr	r3, [r3, #0]
 802ddc0:	4a4d      	ldr	r2, [pc, #308]	; (802def8 <HAL_DMA_Abort+0x5e0>)
 802ddc2:	4293      	cmp	r3, r2
 802ddc4:	d06d      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802ddc6:	687b      	ldr	r3, [r7, #4]
 802ddc8:	681b      	ldr	r3, [r3, #0]
 802ddca:	4a4c      	ldr	r2, [pc, #304]	; (802defc <HAL_DMA_Abort+0x5e4>)
 802ddcc:	4293      	cmp	r3, r2
 802ddce:	d068      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802ddd0:	687b      	ldr	r3, [r7, #4]
 802ddd2:	681b      	ldr	r3, [r3, #0]
 802ddd4:	4a4a      	ldr	r2, [pc, #296]	; (802df00 <HAL_DMA_Abort+0x5e8>)
 802ddd6:	4293      	cmp	r3, r2
 802ddd8:	d063      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802ddda:	687b      	ldr	r3, [r7, #4]
 802dddc:	681b      	ldr	r3, [r3, #0]
 802ddde:	4a49      	ldr	r2, [pc, #292]	; (802df04 <HAL_DMA_Abort+0x5ec>)
 802dde0:	4293      	cmp	r3, r2
 802dde2:	d05e      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802dde4:	687b      	ldr	r3, [r7, #4]
 802dde6:	681b      	ldr	r3, [r3, #0]
 802dde8:	4a47      	ldr	r2, [pc, #284]	; (802df08 <HAL_DMA_Abort+0x5f0>)
 802ddea:	4293      	cmp	r3, r2
 802ddec:	d059      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802ddee:	687b      	ldr	r3, [r7, #4]
 802ddf0:	681b      	ldr	r3, [r3, #0]
 802ddf2:	4a46      	ldr	r2, [pc, #280]	; (802df0c <HAL_DMA_Abort+0x5f4>)
 802ddf4:	4293      	cmp	r3, r2
 802ddf6:	d054      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802ddf8:	687b      	ldr	r3, [r7, #4]
 802ddfa:	681b      	ldr	r3, [r3, #0]
 802ddfc:	4a44      	ldr	r2, [pc, #272]	; (802df10 <HAL_DMA_Abort+0x5f8>)
 802ddfe:	4293      	cmp	r3, r2
 802de00:	d04f      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de02:	687b      	ldr	r3, [r7, #4]
 802de04:	681b      	ldr	r3, [r3, #0]
 802de06:	4a43      	ldr	r2, [pc, #268]	; (802df14 <HAL_DMA_Abort+0x5fc>)
 802de08:	4293      	cmp	r3, r2
 802de0a:	d04a      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de0c:	687b      	ldr	r3, [r7, #4]
 802de0e:	681b      	ldr	r3, [r3, #0]
 802de10:	4a41      	ldr	r2, [pc, #260]	; (802df18 <HAL_DMA_Abort+0x600>)
 802de12:	4293      	cmp	r3, r2
 802de14:	d045      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de16:	687b      	ldr	r3, [r7, #4]
 802de18:	681b      	ldr	r3, [r3, #0]
 802de1a:	4a40      	ldr	r2, [pc, #256]	; (802df1c <HAL_DMA_Abort+0x604>)
 802de1c:	4293      	cmp	r3, r2
 802de1e:	d040      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de20:	687b      	ldr	r3, [r7, #4]
 802de22:	681b      	ldr	r3, [r3, #0]
 802de24:	4a3e      	ldr	r2, [pc, #248]	; (802df20 <HAL_DMA_Abort+0x608>)
 802de26:	4293      	cmp	r3, r2
 802de28:	d03b      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de2a:	687b      	ldr	r3, [r7, #4]
 802de2c:	681b      	ldr	r3, [r3, #0]
 802de2e:	4a3d      	ldr	r2, [pc, #244]	; (802df24 <HAL_DMA_Abort+0x60c>)
 802de30:	4293      	cmp	r3, r2
 802de32:	d036      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de34:	687b      	ldr	r3, [r7, #4]
 802de36:	681b      	ldr	r3, [r3, #0]
 802de38:	4a3b      	ldr	r2, [pc, #236]	; (802df28 <HAL_DMA_Abort+0x610>)
 802de3a:	4293      	cmp	r3, r2
 802de3c:	d031      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de3e:	687b      	ldr	r3, [r7, #4]
 802de40:	681b      	ldr	r3, [r3, #0]
 802de42:	4a3a      	ldr	r2, [pc, #232]	; (802df2c <HAL_DMA_Abort+0x614>)
 802de44:	4293      	cmp	r3, r2
 802de46:	d02c      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de48:	687b      	ldr	r3, [r7, #4]
 802de4a:	681b      	ldr	r3, [r3, #0]
 802de4c:	4a38      	ldr	r2, [pc, #224]	; (802df30 <HAL_DMA_Abort+0x618>)
 802de4e:	4293      	cmp	r3, r2
 802de50:	d027      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de52:	687b      	ldr	r3, [r7, #4]
 802de54:	681b      	ldr	r3, [r3, #0]
 802de56:	4a37      	ldr	r2, [pc, #220]	; (802df34 <HAL_DMA_Abort+0x61c>)
 802de58:	4293      	cmp	r3, r2
 802de5a:	d022      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de5c:	687b      	ldr	r3, [r7, #4]
 802de5e:	681b      	ldr	r3, [r3, #0]
 802de60:	4a35      	ldr	r2, [pc, #212]	; (802df38 <HAL_DMA_Abort+0x620>)
 802de62:	4293      	cmp	r3, r2
 802de64:	d01d      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de66:	687b      	ldr	r3, [r7, #4]
 802de68:	681b      	ldr	r3, [r3, #0]
 802de6a:	4a34      	ldr	r2, [pc, #208]	; (802df3c <HAL_DMA_Abort+0x624>)
 802de6c:	4293      	cmp	r3, r2
 802de6e:	d018      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de70:	687b      	ldr	r3, [r7, #4]
 802de72:	681b      	ldr	r3, [r3, #0]
 802de74:	4a32      	ldr	r2, [pc, #200]	; (802df40 <HAL_DMA_Abort+0x628>)
 802de76:	4293      	cmp	r3, r2
 802de78:	d013      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de7a:	687b      	ldr	r3, [r7, #4]
 802de7c:	681b      	ldr	r3, [r3, #0]
 802de7e:	4a31      	ldr	r2, [pc, #196]	; (802df44 <HAL_DMA_Abort+0x62c>)
 802de80:	4293      	cmp	r3, r2
 802de82:	d00e      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de84:	687b      	ldr	r3, [r7, #4]
 802de86:	681b      	ldr	r3, [r3, #0]
 802de88:	4a2f      	ldr	r2, [pc, #188]	; (802df48 <HAL_DMA_Abort+0x630>)
 802de8a:	4293      	cmp	r3, r2
 802de8c:	d009      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de8e:	687b      	ldr	r3, [r7, #4]
 802de90:	681b      	ldr	r3, [r3, #0]
 802de92:	4a2e      	ldr	r2, [pc, #184]	; (802df4c <HAL_DMA_Abort+0x634>)
 802de94:	4293      	cmp	r3, r2
 802de96:	d004      	beq.n	802dea2 <HAL_DMA_Abort+0x58a>
 802de98:	687b      	ldr	r3, [r7, #4]
 802de9a:	681b      	ldr	r3, [r3, #0]
 802de9c:	4a2c      	ldr	r2, [pc, #176]	; (802df50 <HAL_DMA_Abort+0x638>)
 802de9e:	4293      	cmp	r3, r2
 802dea0:	d101      	bne.n	802dea6 <HAL_DMA_Abort+0x58e>
 802dea2:	2301      	movs	r3, #1
 802dea4:	e000      	b.n	802dea8 <HAL_DMA_Abort+0x590>
 802dea6:	2300      	movs	r3, #0
 802dea8:	2b00      	cmp	r3, #0
 802deaa:	d015      	beq.n	802ded8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802deac:	687b      	ldr	r3, [r7, #4]
 802deae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802deb0:	687a      	ldr	r2, [r7, #4]
 802deb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802deb4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 802deb6:	687b      	ldr	r3, [r7, #4]
 802deb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802deba:	2b00      	cmp	r3, #0
 802debc:	d00c      	beq.n	802ded8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802debe:	687b      	ldr	r3, [r7, #4]
 802dec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dec2:	681a      	ldr	r2, [r3, #0]
 802dec4:	687b      	ldr	r3, [r7, #4]
 802dec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802decc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802dece:	687b      	ldr	r3, [r7, #4]
 802ded0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802ded2:	687a      	ldr	r2, [r7, #4]
 802ded4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802ded6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 802ded8:	687b      	ldr	r3, [r7, #4]
 802deda:	2201      	movs	r2, #1
 802dedc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802dee0:	687b      	ldr	r3, [r7, #4]
 802dee2:	2200      	movs	r2, #0
 802dee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 802dee8:	2300      	movs	r3, #0
}
 802deea:	4618      	mov	r0, r3
 802deec:	3718      	adds	r7, #24
 802deee:	46bd      	mov	sp, r7
 802def0:	bd80      	pop	{r7, pc}
 802def2:	bf00      	nop
 802def4:	40020010 	.word	0x40020010
 802def8:	40020028 	.word	0x40020028
 802defc:	40020040 	.word	0x40020040
 802df00:	40020058 	.word	0x40020058
 802df04:	40020070 	.word	0x40020070
 802df08:	40020088 	.word	0x40020088
 802df0c:	400200a0 	.word	0x400200a0
 802df10:	400200b8 	.word	0x400200b8
 802df14:	40020410 	.word	0x40020410
 802df18:	40020428 	.word	0x40020428
 802df1c:	40020440 	.word	0x40020440
 802df20:	40020458 	.word	0x40020458
 802df24:	40020470 	.word	0x40020470
 802df28:	40020488 	.word	0x40020488
 802df2c:	400204a0 	.word	0x400204a0
 802df30:	400204b8 	.word	0x400204b8
 802df34:	58025408 	.word	0x58025408
 802df38:	5802541c 	.word	0x5802541c
 802df3c:	58025430 	.word	0x58025430
 802df40:	58025444 	.word	0x58025444
 802df44:	58025458 	.word	0x58025458
 802df48:	5802546c 	.word	0x5802546c
 802df4c:	58025480 	.word	0x58025480
 802df50:	58025494 	.word	0x58025494

0802df54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802df54:	b580      	push	{r7, lr}
 802df56:	b084      	sub	sp, #16
 802df58:	af00      	add	r7, sp, #0
 802df5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802df5c:	687b      	ldr	r3, [r7, #4]
 802df5e:	2b00      	cmp	r3, #0
 802df60:	d101      	bne.n	802df66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 802df62:	2301      	movs	r3, #1
 802df64:	e237      	b.n	802e3d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 802df66:	687b      	ldr	r3, [r7, #4]
 802df68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802df6c:	b2db      	uxtb	r3, r3
 802df6e:	2b02      	cmp	r3, #2
 802df70:	d004      	beq.n	802df7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802df72:	687b      	ldr	r3, [r7, #4]
 802df74:	2280      	movs	r2, #128	; 0x80
 802df76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802df78:	2301      	movs	r3, #1
 802df7a:	e22c      	b.n	802e3d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802df7c:	687b      	ldr	r3, [r7, #4]
 802df7e:	681b      	ldr	r3, [r3, #0]
 802df80:	4a5c      	ldr	r2, [pc, #368]	; (802e0f4 <HAL_DMA_Abort_IT+0x1a0>)
 802df82:	4293      	cmp	r3, r2
 802df84:	d04a      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802df86:	687b      	ldr	r3, [r7, #4]
 802df88:	681b      	ldr	r3, [r3, #0]
 802df8a:	4a5b      	ldr	r2, [pc, #364]	; (802e0f8 <HAL_DMA_Abort_IT+0x1a4>)
 802df8c:	4293      	cmp	r3, r2
 802df8e:	d045      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802df90:	687b      	ldr	r3, [r7, #4]
 802df92:	681b      	ldr	r3, [r3, #0]
 802df94:	4a59      	ldr	r2, [pc, #356]	; (802e0fc <HAL_DMA_Abort_IT+0x1a8>)
 802df96:	4293      	cmp	r3, r2
 802df98:	d040      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802df9a:	687b      	ldr	r3, [r7, #4]
 802df9c:	681b      	ldr	r3, [r3, #0]
 802df9e:	4a58      	ldr	r2, [pc, #352]	; (802e100 <HAL_DMA_Abort_IT+0x1ac>)
 802dfa0:	4293      	cmp	r3, r2
 802dfa2:	d03b      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802dfa4:	687b      	ldr	r3, [r7, #4]
 802dfa6:	681b      	ldr	r3, [r3, #0]
 802dfa8:	4a56      	ldr	r2, [pc, #344]	; (802e104 <HAL_DMA_Abort_IT+0x1b0>)
 802dfaa:	4293      	cmp	r3, r2
 802dfac:	d036      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802dfae:	687b      	ldr	r3, [r7, #4]
 802dfb0:	681b      	ldr	r3, [r3, #0]
 802dfb2:	4a55      	ldr	r2, [pc, #340]	; (802e108 <HAL_DMA_Abort_IT+0x1b4>)
 802dfb4:	4293      	cmp	r3, r2
 802dfb6:	d031      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802dfb8:	687b      	ldr	r3, [r7, #4]
 802dfba:	681b      	ldr	r3, [r3, #0]
 802dfbc:	4a53      	ldr	r2, [pc, #332]	; (802e10c <HAL_DMA_Abort_IT+0x1b8>)
 802dfbe:	4293      	cmp	r3, r2
 802dfc0:	d02c      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802dfc2:	687b      	ldr	r3, [r7, #4]
 802dfc4:	681b      	ldr	r3, [r3, #0]
 802dfc6:	4a52      	ldr	r2, [pc, #328]	; (802e110 <HAL_DMA_Abort_IT+0x1bc>)
 802dfc8:	4293      	cmp	r3, r2
 802dfca:	d027      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802dfcc:	687b      	ldr	r3, [r7, #4]
 802dfce:	681b      	ldr	r3, [r3, #0]
 802dfd0:	4a50      	ldr	r2, [pc, #320]	; (802e114 <HAL_DMA_Abort_IT+0x1c0>)
 802dfd2:	4293      	cmp	r3, r2
 802dfd4:	d022      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802dfd6:	687b      	ldr	r3, [r7, #4]
 802dfd8:	681b      	ldr	r3, [r3, #0]
 802dfda:	4a4f      	ldr	r2, [pc, #316]	; (802e118 <HAL_DMA_Abort_IT+0x1c4>)
 802dfdc:	4293      	cmp	r3, r2
 802dfde:	d01d      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802dfe0:	687b      	ldr	r3, [r7, #4]
 802dfe2:	681b      	ldr	r3, [r3, #0]
 802dfe4:	4a4d      	ldr	r2, [pc, #308]	; (802e11c <HAL_DMA_Abort_IT+0x1c8>)
 802dfe6:	4293      	cmp	r3, r2
 802dfe8:	d018      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802dfea:	687b      	ldr	r3, [r7, #4]
 802dfec:	681b      	ldr	r3, [r3, #0]
 802dfee:	4a4c      	ldr	r2, [pc, #304]	; (802e120 <HAL_DMA_Abort_IT+0x1cc>)
 802dff0:	4293      	cmp	r3, r2
 802dff2:	d013      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802dff4:	687b      	ldr	r3, [r7, #4]
 802dff6:	681b      	ldr	r3, [r3, #0]
 802dff8:	4a4a      	ldr	r2, [pc, #296]	; (802e124 <HAL_DMA_Abort_IT+0x1d0>)
 802dffa:	4293      	cmp	r3, r2
 802dffc:	d00e      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802dffe:	687b      	ldr	r3, [r7, #4]
 802e000:	681b      	ldr	r3, [r3, #0]
 802e002:	4a49      	ldr	r2, [pc, #292]	; (802e128 <HAL_DMA_Abort_IT+0x1d4>)
 802e004:	4293      	cmp	r3, r2
 802e006:	d009      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802e008:	687b      	ldr	r3, [r7, #4]
 802e00a:	681b      	ldr	r3, [r3, #0]
 802e00c:	4a47      	ldr	r2, [pc, #284]	; (802e12c <HAL_DMA_Abort_IT+0x1d8>)
 802e00e:	4293      	cmp	r3, r2
 802e010:	d004      	beq.n	802e01c <HAL_DMA_Abort_IT+0xc8>
 802e012:	687b      	ldr	r3, [r7, #4]
 802e014:	681b      	ldr	r3, [r3, #0]
 802e016:	4a46      	ldr	r2, [pc, #280]	; (802e130 <HAL_DMA_Abort_IT+0x1dc>)
 802e018:	4293      	cmp	r3, r2
 802e01a:	d101      	bne.n	802e020 <HAL_DMA_Abort_IT+0xcc>
 802e01c:	2301      	movs	r3, #1
 802e01e:	e000      	b.n	802e022 <HAL_DMA_Abort_IT+0xce>
 802e020:	2300      	movs	r3, #0
 802e022:	2b00      	cmp	r3, #0
 802e024:	f000 8086 	beq.w	802e134 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 802e028:	687b      	ldr	r3, [r7, #4]
 802e02a:	2204      	movs	r2, #4
 802e02c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802e030:	687b      	ldr	r3, [r7, #4]
 802e032:	681b      	ldr	r3, [r3, #0]
 802e034:	4a2f      	ldr	r2, [pc, #188]	; (802e0f4 <HAL_DMA_Abort_IT+0x1a0>)
 802e036:	4293      	cmp	r3, r2
 802e038:	d04a      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e03a:	687b      	ldr	r3, [r7, #4]
 802e03c:	681b      	ldr	r3, [r3, #0]
 802e03e:	4a2e      	ldr	r2, [pc, #184]	; (802e0f8 <HAL_DMA_Abort_IT+0x1a4>)
 802e040:	4293      	cmp	r3, r2
 802e042:	d045      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e044:	687b      	ldr	r3, [r7, #4]
 802e046:	681b      	ldr	r3, [r3, #0]
 802e048:	4a2c      	ldr	r2, [pc, #176]	; (802e0fc <HAL_DMA_Abort_IT+0x1a8>)
 802e04a:	4293      	cmp	r3, r2
 802e04c:	d040      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e04e:	687b      	ldr	r3, [r7, #4]
 802e050:	681b      	ldr	r3, [r3, #0]
 802e052:	4a2b      	ldr	r2, [pc, #172]	; (802e100 <HAL_DMA_Abort_IT+0x1ac>)
 802e054:	4293      	cmp	r3, r2
 802e056:	d03b      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e058:	687b      	ldr	r3, [r7, #4]
 802e05a:	681b      	ldr	r3, [r3, #0]
 802e05c:	4a29      	ldr	r2, [pc, #164]	; (802e104 <HAL_DMA_Abort_IT+0x1b0>)
 802e05e:	4293      	cmp	r3, r2
 802e060:	d036      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e062:	687b      	ldr	r3, [r7, #4]
 802e064:	681b      	ldr	r3, [r3, #0]
 802e066:	4a28      	ldr	r2, [pc, #160]	; (802e108 <HAL_DMA_Abort_IT+0x1b4>)
 802e068:	4293      	cmp	r3, r2
 802e06a:	d031      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e06c:	687b      	ldr	r3, [r7, #4]
 802e06e:	681b      	ldr	r3, [r3, #0]
 802e070:	4a26      	ldr	r2, [pc, #152]	; (802e10c <HAL_DMA_Abort_IT+0x1b8>)
 802e072:	4293      	cmp	r3, r2
 802e074:	d02c      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e076:	687b      	ldr	r3, [r7, #4]
 802e078:	681b      	ldr	r3, [r3, #0]
 802e07a:	4a25      	ldr	r2, [pc, #148]	; (802e110 <HAL_DMA_Abort_IT+0x1bc>)
 802e07c:	4293      	cmp	r3, r2
 802e07e:	d027      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e080:	687b      	ldr	r3, [r7, #4]
 802e082:	681b      	ldr	r3, [r3, #0]
 802e084:	4a23      	ldr	r2, [pc, #140]	; (802e114 <HAL_DMA_Abort_IT+0x1c0>)
 802e086:	4293      	cmp	r3, r2
 802e088:	d022      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e08a:	687b      	ldr	r3, [r7, #4]
 802e08c:	681b      	ldr	r3, [r3, #0]
 802e08e:	4a22      	ldr	r2, [pc, #136]	; (802e118 <HAL_DMA_Abort_IT+0x1c4>)
 802e090:	4293      	cmp	r3, r2
 802e092:	d01d      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e094:	687b      	ldr	r3, [r7, #4]
 802e096:	681b      	ldr	r3, [r3, #0]
 802e098:	4a20      	ldr	r2, [pc, #128]	; (802e11c <HAL_DMA_Abort_IT+0x1c8>)
 802e09a:	4293      	cmp	r3, r2
 802e09c:	d018      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e09e:	687b      	ldr	r3, [r7, #4]
 802e0a0:	681b      	ldr	r3, [r3, #0]
 802e0a2:	4a1f      	ldr	r2, [pc, #124]	; (802e120 <HAL_DMA_Abort_IT+0x1cc>)
 802e0a4:	4293      	cmp	r3, r2
 802e0a6:	d013      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e0a8:	687b      	ldr	r3, [r7, #4]
 802e0aa:	681b      	ldr	r3, [r3, #0]
 802e0ac:	4a1d      	ldr	r2, [pc, #116]	; (802e124 <HAL_DMA_Abort_IT+0x1d0>)
 802e0ae:	4293      	cmp	r3, r2
 802e0b0:	d00e      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e0b2:	687b      	ldr	r3, [r7, #4]
 802e0b4:	681b      	ldr	r3, [r3, #0]
 802e0b6:	4a1c      	ldr	r2, [pc, #112]	; (802e128 <HAL_DMA_Abort_IT+0x1d4>)
 802e0b8:	4293      	cmp	r3, r2
 802e0ba:	d009      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e0bc:	687b      	ldr	r3, [r7, #4]
 802e0be:	681b      	ldr	r3, [r3, #0]
 802e0c0:	4a1a      	ldr	r2, [pc, #104]	; (802e12c <HAL_DMA_Abort_IT+0x1d8>)
 802e0c2:	4293      	cmp	r3, r2
 802e0c4:	d004      	beq.n	802e0d0 <HAL_DMA_Abort_IT+0x17c>
 802e0c6:	687b      	ldr	r3, [r7, #4]
 802e0c8:	681b      	ldr	r3, [r3, #0]
 802e0ca:	4a19      	ldr	r2, [pc, #100]	; (802e130 <HAL_DMA_Abort_IT+0x1dc>)
 802e0cc:	4293      	cmp	r3, r2
 802e0ce:	d108      	bne.n	802e0e2 <HAL_DMA_Abort_IT+0x18e>
 802e0d0:	687b      	ldr	r3, [r7, #4]
 802e0d2:	681b      	ldr	r3, [r3, #0]
 802e0d4:	681a      	ldr	r2, [r3, #0]
 802e0d6:	687b      	ldr	r3, [r7, #4]
 802e0d8:	681b      	ldr	r3, [r3, #0]
 802e0da:	f022 0201 	bic.w	r2, r2, #1
 802e0de:	601a      	str	r2, [r3, #0]
 802e0e0:	e178      	b.n	802e3d4 <HAL_DMA_Abort_IT+0x480>
 802e0e2:	687b      	ldr	r3, [r7, #4]
 802e0e4:	681b      	ldr	r3, [r3, #0]
 802e0e6:	681a      	ldr	r2, [r3, #0]
 802e0e8:	687b      	ldr	r3, [r7, #4]
 802e0ea:	681b      	ldr	r3, [r3, #0]
 802e0ec:	f022 0201 	bic.w	r2, r2, #1
 802e0f0:	601a      	str	r2, [r3, #0]
 802e0f2:	e16f      	b.n	802e3d4 <HAL_DMA_Abort_IT+0x480>
 802e0f4:	40020010 	.word	0x40020010
 802e0f8:	40020028 	.word	0x40020028
 802e0fc:	40020040 	.word	0x40020040
 802e100:	40020058 	.word	0x40020058
 802e104:	40020070 	.word	0x40020070
 802e108:	40020088 	.word	0x40020088
 802e10c:	400200a0 	.word	0x400200a0
 802e110:	400200b8 	.word	0x400200b8
 802e114:	40020410 	.word	0x40020410
 802e118:	40020428 	.word	0x40020428
 802e11c:	40020440 	.word	0x40020440
 802e120:	40020458 	.word	0x40020458
 802e124:	40020470 	.word	0x40020470
 802e128:	40020488 	.word	0x40020488
 802e12c:	400204a0 	.word	0x400204a0
 802e130:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802e134:	687b      	ldr	r3, [r7, #4]
 802e136:	681b      	ldr	r3, [r3, #0]
 802e138:	681a      	ldr	r2, [r3, #0]
 802e13a:	687b      	ldr	r3, [r7, #4]
 802e13c:	681b      	ldr	r3, [r3, #0]
 802e13e:	f022 020e 	bic.w	r2, r2, #14
 802e142:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 802e144:	687b      	ldr	r3, [r7, #4]
 802e146:	681b      	ldr	r3, [r3, #0]
 802e148:	4a6c      	ldr	r2, [pc, #432]	; (802e2fc <HAL_DMA_Abort_IT+0x3a8>)
 802e14a:	4293      	cmp	r3, r2
 802e14c:	d04a      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e14e:	687b      	ldr	r3, [r7, #4]
 802e150:	681b      	ldr	r3, [r3, #0]
 802e152:	4a6b      	ldr	r2, [pc, #428]	; (802e300 <HAL_DMA_Abort_IT+0x3ac>)
 802e154:	4293      	cmp	r3, r2
 802e156:	d045      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e158:	687b      	ldr	r3, [r7, #4]
 802e15a:	681b      	ldr	r3, [r3, #0]
 802e15c:	4a69      	ldr	r2, [pc, #420]	; (802e304 <HAL_DMA_Abort_IT+0x3b0>)
 802e15e:	4293      	cmp	r3, r2
 802e160:	d040      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e162:	687b      	ldr	r3, [r7, #4]
 802e164:	681b      	ldr	r3, [r3, #0]
 802e166:	4a68      	ldr	r2, [pc, #416]	; (802e308 <HAL_DMA_Abort_IT+0x3b4>)
 802e168:	4293      	cmp	r3, r2
 802e16a:	d03b      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e16c:	687b      	ldr	r3, [r7, #4]
 802e16e:	681b      	ldr	r3, [r3, #0]
 802e170:	4a66      	ldr	r2, [pc, #408]	; (802e30c <HAL_DMA_Abort_IT+0x3b8>)
 802e172:	4293      	cmp	r3, r2
 802e174:	d036      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e176:	687b      	ldr	r3, [r7, #4]
 802e178:	681b      	ldr	r3, [r3, #0]
 802e17a:	4a65      	ldr	r2, [pc, #404]	; (802e310 <HAL_DMA_Abort_IT+0x3bc>)
 802e17c:	4293      	cmp	r3, r2
 802e17e:	d031      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e180:	687b      	ldr	r3, [r7, #4]
 802e182:	681b      	ldr	r3, [r3, #0]
 802e184:	4a63      	ldr	r2, [pc, #396]	; (802e314 <HAL_DMA_Abort_IT+0x3c0>)
 802e186:	4293      	cmp	r3, r2
 802e188:	d02c      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e18a:	687b      	ldr	r3, [r7, #4]
 802e18c:	681b      	ldr	r3, [r3, #0]
 802e18e:	4a62      	ldr	r2, [pc, #392]	; (802e318 <HAL_DMA_Abort_IT+0x3c4>)
 802e190:	4293      	cmp	r3, r2
 802e192:	d027      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e194:	687b      	ldr	r3, [r7, #4]
 802e196:	681b      	ldr	r3, [r3, #0]
 802e198:	4a60      	ldr	r2, [pc, #384]	; (802e31c <HAL_DMA_Abort_IT+0x3c8>)
 802e19a:	4293      	cmp	r3, r2
 802e19c:	d022      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e19e:	687b      	ldr	r3, [r7, #4]
 802e1a0:	681b      	ldr	r3, [r3, #0]
 802e1a2:	4a5f      	ldr	r2, [pc, #380]	; (802e320 <HAL_DMA_Abort_IT+0x3cc>)
 802e1a4:	4293      	cmp	r3, r2
 802e1a6:	d01d      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e1a8:	687b      	ldr	r3, [r7, #4]
 802e1aa:	681b      	ldr	r3, [r3, #0]
 802e1ac:	4a5d      	ldr	r2, [pc, #372]	; (802e324 <HAL_DMA_Abort_IT+0x3d0>)
 802e1ae:	4293      	cmp	r3, r2
 802e1b0:	d018      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e1b2:	687b      	ldr	r3, [r7, #4]
 802e1b4:	681b      	ldr	r3, [r3, #0]
 802e1b6:	4a5c      	ldr	r2, [pc, #368]	; (802e328 <HAL_DMA_Abort_IT+0x3d4>)
 802e1b8:	4293      	cmp	r3, r2
 802e1ba:	d013      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e1bc:	687b      	ldr	r3, [r7, #4]
 802e1be:	681b      	ldr	r3, [r3, #0]
 802e1c0:	4a5a      	ldr	r2, [pc, #360]	; (802e32c <HAL_DMA_Abort_IT+0x3d8>)
 802e1c2:	4293      	cmp	r3, r2
 802e1c4:	d00e      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e1c6:	687b      	ldr	r3, [r7, #4]
 802e1c8:	681b      	ldr	r3, [r3, #0]
 802e1ca:	4a59      	ldr	r2, [pc, #356]	; (802e330 <HAL_DMA_Abort_IT+0x3dc>)
 802e1cc:	4293      	cmp	r3, r2
 802e1ce:	d009      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e1d0:	687b      	ldr	r3, [r7, #4]
 802e1d2:	681b      	ldr	r3, [r3, #0]
 802e1d4:	4a57      	ldr	r2, [pc, #348]	; (802e334 <HAL_DMA_Abort_IT+0x3e0>)
 802e1d6:	4293      	cmp	r3, r2
 802e1d8:	d004      	beq.n	802e1e4 <HAL_DMA_Abort_IT+0x290>
 802e1da:	687b      	ldr	r3, [r7, #4]
 802e1dc:	681b      	ldr	r3, [r3, #0]
 802e1de:	4a56      	ldr	r2, [pc, #344]	; (802e338 <HAL_DMA_Abort_IT+0x3e4>)
 802e1e0:	4293      	cmp	r3, r2
 802e1e2:	d108      	bne.n	802e1f6 <HAL_DMA_Abort_IT+0x2a2>
 802e1e4:	687b      	ldr	r3, [r7, #4]
 802e1e6:	681b      	ldr	r3, [r3, #0]
 802e1e8:	681a      	ldr	r2, [r3, #0]
 802e1ea:	687b      	ldr	r3, [r7, #4]
 802e1ec:	681b      	ldr	r3, [r3, #0]
 802e1ee:	f022 0201 	bic.w	r2, r2, #1
 802e1f2:	601a      	str	r2, [r3, #0]
 802e1f4:	e007      	b.n	802e206 <HAL_DMA_Abort_IT+0x2b2>
 802e1f6:	687b      	ldr	r3, [r7, #4]
 802e1f8:	681b      	ldr	r3, [r3, #0]
 802e1fa:	681a      	ldr	r2, [r3, #0]
 802e1fc:	687b      	ldr	r3, [r7, #4]
 802e1fe:	681b      	ldr	r3, [r3, #0]
 802e200:	f022 0201 	bic.w	r2, r2, #1
 802e204:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802e206:	687b      	ldr	r3, [r7, #4]
 802e208:	681b      	ldr	r3, [r3, #0]
 802e20a:	4a3c      	ldr	r2, [pc, #240]	; (802e2fc <HAL_DMA_Abort_IT+0x3a8>)
 802e20c:	4293      	cmp	r3, r2
 802e20e:	d072      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e210:	687b      	ldr	r3, [r7, #4]
 802e212:	681b      	ldr	r3, [r3, #0]
 802e214:	4a3a      	ldr	r2, [pc, #232]	; (802e300 <HAL_DMA_Abort_IT+0x3ac>)
 802e216:	4293      	cmp	r3, r2
 802e218:	d06d      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e21a:	687b      	ldr	r3, [r7, #4]
 802e21c:	681b      	ldr	r3, [r3, #0]
 802e21e:	4a39      	ldr	r2, [pc, #228]	; (802e304 <HAL_DMA_Abort_IT+0x3b0>)
 802e220:	4293      	cmp	r3, r2
 802e222:	d068      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e224:	687b      	ldr	r3, [r7, #4]
 802e226:	681b      	ldr	r3, [r3, #0]
 802e228:	4a37      	ldr	r2, [pc, #220]	; (802e308 <HAL_DMA_Abort_IT+0x3b4>)
 802e22a:	4293      	cmp	r3, r2
 802e22c:	d063      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e22e:	687b      	ldr	r3, [r7, #4]
 802e230:	681b      	ldr	r3, [r3, #0]
 802e232:	4a36      	ldr	r2, [pc, #216]	; (802e30c <HAL_DMA_Abort_IT+0x3b8>)
 802e234:	4293      	cmp	r3, r2
 802e236:	d05e      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e238:	687b      	ldr	r3, [r7, #4]
 802e23a:	681b      	ldr	r3, [r3, #0]
 802e23c:	4a34      	ldr	r2, [pc, #208]	; (802e310 <HAL_DMA_Abort_IT+0x3bc>)
 802e23e:	4293      	cmp	r3, r2
 802e240:	d059      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e242:	687b      	ldr	r3, [r7, #4]
 802e244:	681b      	ldr	r3, [r3, #0]
 802e246:	4a33      	ldr	r2, [pc, #204]	; (802e314 <HAL_DMA_Abort_IT+0x3c0>)
 802e248:	4293      	cmp	r3, r2
 802e24a:	d054      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e24c:	687b      	ldr	r3, [r7, #4]
 802e24e:	681b      	ldr	r3, [r3, #0]
 802e250:	4a31      	ldr	r2, [pc, #196]	; (802e318 <HAL_DMA_Abort_IT+0x3c4>)
 802e252:	4293      	cmp	r3, r2
 802e254:	d04f      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e256:	687b      	ldr	r3, [r7, #4]
 802e258:	681b      	ldr	r3, [r3, #0]
 802e25a:	4a30      	ldr	r2, [pc, #192]	; (802e31c <HAL_DMA_Abort_IT+0x3c8>)
 802e25c:	4293      	cmp	r3, r2
 802e25e:	d04a      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e260:	687b      	ldr	r3, [r7, #4]
 802e262:	681b      	ldr	r3, [r3, #0]
 802e264:	4a2e      	ldr	r2, [pc, #184]	; (802e320 <HAL_DMA_Abort_IT+0x3cc>)
 802e266:	4293      	cmp	r3, r2
 802e268:	d045      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e26a:	687b      	ldr	r3, [r7, #4]
 802e26c:	681b      	ldr	r3, [r3, #0]
 802e26e:	4a2d      	ldr	r2, [pc, #180]	; (802e324 <HAL_DMA_Abort_IT+0x3d0>)
 802e270:	4293      	cmp	r3, r2
 802e272:	d040      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e274:	687b      	ldr	r3, [r7, #4]
 802e276:	681b      	ldr	r3, [r3, #0]
 802e278:	4a2b      	ldr	r2, [pc, #172]	; (802e328 <HAL_DMA_Abort_IT+0x3d4>)
 802e27a:	4293      	cmp	r3, r2
 802e27c:	d03b      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e27e:	687b      	ldr	r3, [r7, #4]
 802e280:	681b      	ldr	r3, [r3, #0]
 802e282:	4a2a      	ldr	r2, [pc, #168]	; (802e32c <HAL_DMA_Abort_IT+0x3d8>)
 802e284:	4293      	cmp	r3, r2
 802e286:	d036      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e288:	687b      	ldr	r3, [r7, #4]
 802e28a:	681b      	ldr	r3, [r3, #0]
 802e28c:	4a28      	ldr	r2, [pc, #160]	; (802e330 <HAL_DMA_Abort_IT+0x3dc>)
 802e28e:	4293      	cmp	r3, r2
 802e290:	d031      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e292:	687b      	ldr	r3, [r7, #4]
 802e294:	681b      	ldr	r3, [r3, #0]
 802e296:	4a27      	ldr	r2, [pc, #156]	; (802e334 <HAL_DMA_Abort_IT+0x3e0>)
 802e298:	4293      	cmp	r3, r2
 802e29a:	d02c      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e29c:	687b      	ldr	r3, [r7, #4]
 802e29e:	681b      	ldr	r3, [r3, #0]
 802e2a0:	4a25      	ldr	r2, [pc, #148]	; (802e338 <HAL_DMA_Abort_IT+0x3e4>)
 802e2a2:	4293      	cmp	r3, r2
 802e2a4:	d027      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e2a6:	687b      	ldr	r3, [r7, #4]
 802e2a8:	681b      	ldr	r3, [r3, #0]
 802e2aa:	4a24      	ldr	r2, [pc, #144]	; (802e33c <HAL_DMA_Abort_IT+0x3e8>)
 802e2ac:	4293      	cmp	r3, r2
 802e2ae:	d022      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e2b0:	687b      	ldr	r3, [r7, #4]
 802e2b2:	681b      	ldr	r3, [r3, #0]
 802e2b4:	4a22      	ldr	r2, [pc, #136]	; (802e340 <HAL_DMA_Abort_IT+0x3ec>)
 802e2b6:	4293      	cmp	r3, r2
 802e2b8:	d01d      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e2ba:	687b      	ldr	r3, [r7, #4]
 802e2bc:	681b      	ldr	r3, [r3, #0]
 802e2be:	4a21      	ldr	r2, [pc, #132]	; (802e344 <HAL_DMA_Abort_IT+0x3f0>)
 802e2c0:	4293      	cmp	r3, r2
 802e2c2:	d018      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e2c4:	687b      	ldr	r3, [r7, #4]
 802e2c6:	681b      	ldr	r3, [r3, #0]
 802e2c8:	4a1f      	ldr	r2, [pc, #124]	; (802e348 <HAL_DMA_Abort_IT+0x3f4>)
 802e2ca:	4293      	cmp	r3, r2
 802e2cc:	d013      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e2ce:	687b      	ldr	r3, [r7, #4]
 802e2d0:	681b      	ldr	r3, [r3, #0]
 802e2d2:	4a1e      	ldr	r2, [pc, #120]	; (802e34c <HAL_DMA_Abort_IT+0x3f8>)
 802e2d4:	4293      	cmp	r3, r2
 802e2d6:	d00e      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e2d8:	687b      	ldr	r3, [r7, #4]
 802e2da:	681b      	ldr	r3, [r3, #0]
 802e2dc:	4a1c      	ldr	r2, [pc, #112]	; (802e350 <HAL_DMA_Abort_IT+0x3fc>)
 802e2de:	4293      	cmp	r3, r2
 802e2e0:	d009      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e2e2:	687b      	ldr	r3, [r7, #4]
 802e2e4:	681b      	ldr	r3, [r3, #0]
 802e2e6:	4a1b      	ldr	r2, [pc, #108]	; (802e354 <HAL_DMA_Abort_IT+0x400>)
 802e2e8:	4293      	cmp	r3, r2
 802e2ea:	d004      	beq.n	802e2f6 <HAL_DMA_Abort_IT+0x3a2>
 802e2ec:	687b      	ldr	r3, [r7, #4]
 802e2ee:	681b      	ldr	r3, [r3, #0]
 802e2f0:	4a19      	ldr	r2, [pc, #100]	; (802e358 <HAL_DMA_Abort_IT+0x404>)
 802e2f2:	4293      	cmp	r3, r2
 802e2f4:	d132      	bne.n	802e35c <HAL_DMA_Abort_IT+0x408>
 802e2f6:	2301      	movs	r3, #1
 802e2f8:	e031      	b.n	802e35e <HAL_DMA_Abort_IT+0x40a>
 802e2fa:	bf00      	nop
 802e2fc:	40020010 	.word	0x40020010
 802e300:	40020028 	.word	0x40020028
 802e304:	40020040 	.word	0x40020040
 802e308:	40020058 	.word	0x40020058
 802e30c:	40020070 	.word	0x40020070
 802e310:	40020088 	.word	0x40020088
 802e314:	400200a0 	.word	0x400200a0
 802e318:	400200b8 	.word	0x400200b8
 802e31c:	40020410 	.word	0x40020410
 802e320:	40020428 	.word	0x40020428
 802e324:	40020440 	.word	0x40020440
 802e328:	40020458 	.word	0x40020458
 802e32c:	40020470 	.word	0x40020470
 802e330:	40020488 	.word	0x40020488
 802e334:	400204a0 	.word	0x400204a0
 802e338:	400204b8 	.word	0x400204b8
 802e33c:	58025408 	.word	0x58025408
 802e340:	5802541c 	.word	0x5802541c
 802e344:	58025430 	.word	0x58025430
 802e348:	58025444 	.word	0x58025444
 802e34c:	58025458 	.word	0x58025458
 802e350:	5802546c 	.word	0x5802546c
 802e354:	58025480 	.word	0x58025480
 802e358:	58025494 	.word	0x58025494
 802e35c:	2300      	movs	r3, #0
 802e35e:	2b00      	cmp	r3, #0
 802e360:	d028      	beq.n	802e3b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802e362:	687b      	ldr	r3, [r7, #4]
 802e364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802e366:	681a      	ldr	r2, [r3, #0]
 802e368:	687b      	ldr	r3, [r7, #4]
 802e36a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802e36c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802e370:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802e372:	687b      	ldr	r3, [r7, #4]
 802e374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e376:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802e378:	687b      	ldr	r3, [r7, #4]
 802e37a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e37c:	f003 031f 	and.w	r3, r3, #31
 802e380:	2201      	movs	r2, #1
 802e382:	409a      	lsls	r2, r3
 802e384:	68fb      	ldr	r3, [r7, #12]
 802e386:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802e388:	687b      	ldr	r3, [r7, #4]
 802e38a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802e38c:	687a      	ldr	r2, [r7, #4]
 802e38e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802e390:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 802e392:	687b      	ldr	r3, [r7, #4]
 802e394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e396:	2b00      	cmp	r3, #0
 802e398:	d00c      	beq.n	802e3b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802e39a:	687b      	ldr	r3, [r7, #4]
 802e39c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e39e:	681a      	ldr	r2, [r3, #0]
 802e3a0:	687b      	ldr	r3, [r7, #4]
 802e3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802e3a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802e3a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802e3aa:	687b      	ldr	r3, [r7, #4]
 802e3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802e3ae:	687a      	ldr	r2, [r7, #4]
 802e3b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802e3b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802e3b4:	687b      	ldr	r3, [r7, #4]
 802e3b6:	2201      	movs	r2, #1
 802e3b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802e3bc:	687b      	ldr	r3, [r7, #4]
 802e3be:	2200      	movs	r2, #0
 802e3c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 802e3c4:	687b      	ldr	r3, [r7, #4]
 802e3c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e3c8:	2b00      	cmp	r3, #0
 802e3ca:	d003      	beq.n	802e3d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 802e3cc:	687b      	ldr	r3, [r7, #4]
 802e3ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802e3d0:	6878      	ldr	r0, [r7, #4]
 802e3d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 802e3d4:	2300      	movs	r3, #0
}
 802e3d6:	4618      	mov	r0, r3
 802e3d8:	3710      	adds	r7, #16
 802e3da:	46bd      	mov	sp, r7
 802e3dc:	bd80      	pop	{r7, pc}
 802e3de:	bf00      	nop

0802e3e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802e3e0:	b580      	push	{r7, lr}
 802e3e2:	b08a      	sub	sp, #40	; 0x28
 802e3e4:	af00      	add	r7, sp, #0
 802e3e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 802e3e8:	2300      	movs	r3, #0
 802e3ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 802e3ec:	4b67      	ldr	r3, [pc, #412]	; (802e58c <HAL_DMA_IRQHandler+0x1ac>)
 802e3ee:	681b      	ldr	r3, [r3, #0]
 802e3f0:	4a67      	ldr	r2, [pc, #412]	; (802e590 <HAL_DMA_IRQHandler+0x1b0>)
 802e3f2:	fba2 2303 	umull	r2, r3, r2, r3
 802e3f6:	0a9b      	lsrs	r3, r3, #10
 802e3f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802e3fa:	687b      	ldr	r3, [r7, #4]
 802e3fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e3fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802e400:	687b      	ldr	r3, [r7, #4]
 802e402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802e404:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 802e406:	6a3b      	ldr	r3, [r7, #32]
 802e408:	681b      	ldr	r3, [r3, #0]
 802e40a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 802e40c:	69fb      	ldr	r3, [r7, #28]
 802e40e:	681b      	ldr	r3, [r3, #0]
 802e410:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 802e412:	687b      	ldr	r3, [r7, #4]
 802e414:	681b      	ldr	r3, [r3, #0]
 802e416:	4a5f      	ldr	r2, [pc, #380]	; (802e594 <HAL_DMA_IRQHandler+0x1b4>)
 802e418:	4293      	cmp	r3, r2
 802e41a:	d04a      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e41c:	687b      	ldr	r3, [r7, #4]
 802e41e:	681b      	ldr	r3, [r3, #0]
 802e420:	4a5d      	ldr	r2, [pc, #372]	; (802e598 <HAL_DMA_IRQHandler+0x1b8>)
 802e422:	4293      	cmp	r3, r2
 802e424:	d045      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e426:	687b      	ldr	r3, [r7, #4]
 802e428:	681b      	ldr	r3, [r3, #0]
 802e42a:	4a5c      	ldr	r2, [pc, #368]	; (802e59c <HAL_DMA_IRQHandler+0x1bc>)
 802e42c:	4293      	cmp	r3, r2
 802e42e:	d040      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e430:	687b      	ldr	r3, [r7, #4]
 802e432:	681b      	ldr	r3, [r3, #0]
 802e434:	4a5a      	ldr	r2, [pc, #360]	; (802e5a0 <HAL_DMA_IRQHandler+0x1c0>)
 802e436:	4293      	cmp	r3, r2
 802e438:	d03b      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e43a:	687b      	ldr	r3, [r7, #4]
 802e43c:	681b      	ldr	r3, [r3, #0]
 802e43e:	4a59      	ldr	r2, [pc, #356]	; (802e5a4 <HAL_DMA_IRQHandler+0x1c4>)
 802e440:	4293      	cmp	r3, r2
 802e442:	d036      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e444:	687b      	ldr	r3, [r7, #4]
 802e446:	681b      	ldr	r3, [r3, #0]
 802e448:	4a57      	ldr	r2, [pc, #348]	; (802e5a8 <HAL_DMA_IRQHandler+0x1c8>)
 802e44a:	4293      	cmp	r3, r2
 802e44c:	d031      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e44e:	687b      	ldr	r3, [r7, #4]
 802e450:	681b      	ldr	r3, [r3, #0]
 802e452:	4a56      	ldr	r2, [pc, #344]	; (802e5ac <HAL_DMA_IRQHandler+0x1cc>)
 802e454:	4293      	cmp	r3, r2
 802e456:	d02c      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e458:	687b      	ldr	r3, [r7, #4]
 802e45a:	681b      	ldr	r3, [r3, #0]
 802e45c:	4a54      	ldr	r2, [pc, #336]	; (802e5b0 <HAL_DMA_IRQHandler+0x1d0>)
 802e45e:	4293      	cmp	r3, r2
 802e460:	d027      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e462:	687b      	ldr	r3, [r7, #4]
 802e464:	681b      	ldr	r3, [r3, #0]
 802e466:	4a53      	ldr	r2, [pc, #332]	; (802e5b4 <HAL_DMA_IRQHandler+0x1d4>)
 802e468:	4293      	cmp	r3, r2
 802e46a:	d022      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e46c:	687b      	ldr	r3, [r7, #4]
 802e46e:	681b      	ldr	r3, [r3, #0]
 802e470:	4a51      	ldr	r2, [pc, #324]	; (802e5b8 <HAL_DMA_IRQHandler+0x1d8>)
 802e472:	4293      	cmp	r3, r2
 802e474:	d01d      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e476:	687b      	ldr	r3, [r7, #4]
 802e478:	681b      	ldr	r3, [r3, #0]
 802e47a:	4a50      	ldr	r2, [pc, #320]	; (802e5bc <HAL_DMA_IRQHandler+0x1dc>)
 802e47c:	4293      	cmp	r3, r2
 802e47e:	d018      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e480:	687b      	ldr	r3, [r7, #4]
 802e482:	681b      	ldr	r3, [r3, #0]
 802e484:	4a4e      	ldr	r2, [pc, #312]	; (802e5c0 <HAL_DMA_IRQHandler+0x1e0>)
 802e486:	4293      	cmp	r3, r2
 802e488:	d013      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e48a:	687b      	ldr	r3, [r7, #4]
 802e48c:	681b      	ldr	r3, [r3, #0]
 802e48e:	4a4d      	ldr	r2, [pc, #308]	; (802e5c4 <HAL_DMA_IRQHandler+0x1e4>)
 802e490:	4293      	cmp	r3, r2
 802e492:	d00e      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e494:	687b      	ldr	r3, [r7, #4]
 802e496:	681b      	ldr	r3, [r3, #0]
 802e498:	4a4b      	ldr	r2, [pc, #300]	; (802e5c8 <HAL_DMA_IRQHandler+0x1e8>)
 802e49a:	4293      	cmp	r3, r2
 802e49c:	d009      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e49e:	687b      	ldr	r3, [r7, #4]
 802e4a0:	681b      	ldr	r3, [r3, #0]
 802e4a2:	4a4a      	ldr	r2, [pc, #296]	; (802e5cc <HAL_DMA_IRQHandler+0x1ec>)
 802e4a4:	4293      	cmp	r3, r2
 802e4a6:	d004      	beq.n	802e4b2 <HAL_DMA_IRQHandler+0xd2>
 802e4a8:	687b      	ldr	r3, [r7, #4]
 802e4aa:	681b      	ldr	r3, [r3, #0]
 802e4ac:	4a48      	ldr	r2, [pc, #288]	; (802e5d0 <HAL_DMA_IRQHandler+0x1f0>)
 802e4ae:	4293      	cmp	r3, r2
 802e4b0:	d101      	bne.n	802e4b6 <HAL_DMA_IRQHandler+0xd6>
 802e4b2:	2301      	movs	r3, #1
 802e4b4:	e000      	b.n	802e4b8 <HAL_DMA_IRQHandler+0xd8>
 802e4b6:	2300      	movs	r3, #0
 802e4b8:	2b00      	cmp	r3, #0
 802e4ba:	f000 842b 	beq.w	802ed14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802e4be:	687b      	ldr	r3, [r7, #4]
 802e4c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e4c2:	f003 031f 	and.w	r3, r3, #31
 802e4c6:	2208      	movs	r2, #8
 802e4c8:	409a      	lsls	r2, r3
 802e4ca:	69bb      	ldr	r3, [r7, #24]
 802e4cc:	4013      	ands	r3, r2
 802e4ce:	2b00      	cmp	r3, #0
 802e4d0:	f000 80a2 	beq.w	802e618 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 802e4d4:	687b      	ldr	r3, [r7, #4]
 802e4d6:	681b      	ldr	r3, [r3, #0]
 802e4d8:	4a2e      	ldr	r2, [pc, #184]	; (802e594 <HAL_DMA_IRQHandler+0x1b4>)
 802e4da:	4293      	cmp	r3, r2
 802e4dc:	d04a      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e4de:	687b      	ldr	r3, [r7, #4]
 802e4e0:	681b      	ldr	r3, [r3, #0]
 802e4e2:	4a2d      	ldr	r2, [pc, #180]	; (802e598 <HAL_DMA_IRQHandler+0x1b8>)
 802e4e4:	4293      	cmp	r3, r2
 802e4e6:	d045      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e4e8:	687b      	ldr	r3, [r7, #4]
 802e4ea:	681b      	ldr	r3, [r3, #0]
 802e4ec:	4a2b      	ldr	r2, [pc, #172]	; (802e59c <HAL_DMA_IRQHandler+0x1bc>)
 802e4ee:	4293      	cmp	r3, r2
 802e4f0:	d040      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e4f2:	687b      	ldr	r3, [r7, #4]
 802e4f4:	681b      	ldr	r3, [r3, #0]
 802e4f6:	4a2a      	ldr	r2, [pc, #168]	; (802e5a0 <HAL_DMA_IRQHandler+0x1c0>)
 802e4f8:	4293      	cmp	r3, r2
 802e4fa:	d03b      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e4fc:	687b      	ldr	r3, [r7, #4]
 802e4fe:	681b      	ldr	r3, [r3, #0]
 802e500:	4a28      	ldr	r2, [pc, #160]	; (802e5a4 <HAL_DMA_IRQHandler+0x1c4>)
 802e502:	4293      	cmp	r3, r2
 802e504:	d036      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e506:	687b      	ldr	r3, [r7, #4]
 802e508:	681b      	ldr	r3, [r3, #0]
 802e50a:	4a27      	ldr	r2, [pc, #156]	; (802e5a8 <HAL_DMA_IRQHandler+0x1c8>)
 802e50c:	4293      	cmp	r3, r2
 802e50e:	d031      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e510:	687b      	ldr	r3, [r7, #4]
 802e512:	681b      	ldr	r3, [r3, #0]
 802e514:	4a25      	ldr	r2, [pc, #148]	; (802e5ac <HAL_DMA_IRQHandler+0x1cc>)
 802e516:	4293      	cmp	r3, r2
 802e518:	d02c      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e51a:	687b      	ldr	r3, [r7, #4]
 802e51c:	681b      	ldr	r3, [r3, #0]
 802e51e:	4a24      	ldr	r2, [pc, #144]	; (802e5b0 <HAL_DMA_IRQHandler+0x1d0>)
 802e520:	4293      	cmp	r3, r2
 802e522:	d027      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e524:	687b      	ldr	r3, [r7, #4]
 802e526:	681b      	ldr	r3, [r3, #0]
 802e528:	4a22      	ldr	r2, [pc, #136]	; (802e5b4 <HAL_DMA_IRQHandler+0x1d4>)
 802e52a:	4293      	cmp	r3, r2
 802e52c:	d022      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e52e:	687b      	ldr	r3, [r7, #4]
 802e530:	681b      	ldr	r3, [r3, #0]
 802e532:	4a21      	ldr	r2, [pc, #132]	; (802e5b8 <HAL_DMA_IRQHandler+0x1d8>)
 802e534:	4293      	cmp	r3, r2
 802e536:	d01d      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e538:	687b      	ldr	r3, [r7, #4]
 802e53a:	681b      	ldr	r3, [r3, #0]
 802e53c:	4a1f      	ldr	r2, [pc, #124]	; (802e5bc <HAL_DMA_IRQHandler+0x1dc>)
 802e53e:	4293      	cmp	r3, r2
 802e540:	d018      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e542:	687b      	ldr	r3, [r7, #4]
 802e544:	681b      	ldr	r3, [r3, #0]
 802e546:	4a1e      	ldr	r2, [pc, #120]	; (802e5c0 <HAL_DMA_IRQHandler+0x1e0>)
 802e548:	4293      	cmp	r3, r2
 802e54a:	d013      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e54c:	687b      	ldr	r3, [r7, #4]
 802e54e:	681b      	ldr	r3, [r3, #0]
 802e550:	4a1c      	ldr	r2, [pc, #112]	; (802e5c4 <HAL_DMA_IRQHandler+0x1e4>)
 802e552:	4293      	cmp	r3, r2
 802e554:	d00e      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e556:	687b      	ldr	r3, [r7, #4]
 802e558:	681b      	ldr	r3, [r3, #0]
 802e55a:	4a1b      	ldr	r2, [pc, #108]	; (802e5c8 <HAL_DMA_IRQHandler+0x1e8>)
 802e55c:	4293      	cmp	r3, r2
 802e55e:	d009      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e560:	687b      	ldr	r3, [r7, #4]
 802e562:	681b      	ldr	r3, [r3, #0]
 802e564:	4a19      	ldr	r2, [pc, #100]	; (802e5cc <HAL_DMA_IRQHandler+0x1ec>)
 802e566:	4293      	cmp	r3, r2
 802e568:	d004      	beq.n	802e574 <HAL_DMA_IRQHandler+0x194>
 802e56a:	687b      	ldr	r3, [r7, #4]
 802e56c:	681b      	ldr	r3, [r3, #0]
 802e56e:	4a18      	ldr	r2, [pc, #96]	; (802e5d0 <HAL_DMA_IRQHandler+0x1f0>)
 802e570:	4293      	cmp	r3, r2
 802e572:	d12f      	bne.n	802e5d4 <HAL_DMA_IRQHandler+0x1f4>
 802e574:	687b      	ldr	r3, [r7, #4]
 802e576:	681b      	ldr	r3, [r3, #0]
 802e578:	681b      	ldr	r3, [r3, #0]
 802e57a:	f003 0304 	and.w	r3, r3, #4
 802e57e:	2b00      	cmp	r3, #0
 802e580:	bf14      	ite	ne
 802e582:	2301      	movne	r3, #1
 802e584:	2300      	moveq	r3, #0
 802e586:	b2db      	uxtb	r3, r3
 802e588:	e02e      	b.n	802e5e8 <HAL_DMA_IRQHandler+0x208>
 802e58a:	bf00      	nop
 802e58c:	24000000 	.word	0x24000000
 802e590:	1b4e81b5 	.word	0x1b4e81b5
 802e594:	40020010 	.word	0x40020010
 802e598:	40020028 	.word	0x40020028
 802e59c:	40020040 	.word	0x40020040
 802e5a0:	40020058 	.word	0x40020058
 802e5a4:	40020070 	.word	0x40020070
 802e5a8:	40020088 	.word	0x40020088
 802e5ac:	400200a0 	.word	0x400200a0
 802e5b0:	400200b8 	.word	0x400200b8
 802e5b4:	40020410 	.word	0x40020410
 802e5b8:	40020428 	.word	0x40020428
 802e5bc:	40020440 	.word	0x40020440
 802e5c0:	40020458 	.word	0x40020458
 802e5c4:	40020470 	.word	0x40020470
 802e5c8:	40020488 	.word	0x40020488
 802e5cc:	400204a0 	.word	0x400204a0
 802e5d0:	400204b8 	.word	0x400204b8
 802e5d4:	687b      	ldr	r3, [r7, #4]
 802e5d6:	681b      	ldr	r3, [r3, #0]
 802e5d8:	681b      	ldr	r3, [r3, #0]
 802e5da:	f003 0308 	and.w	r3, r3, #8
 802e5de:	2b00      	cmp	r3, #0
 802e5e0:	bf14      	ite	ne
 802e5e2:	2301      	movne	r3, #1
 802e5e4:	2300      	moveq	r3, #0
 802e5e6:	b2db      	uxtb	r3, r3
 802e5e8:	2b00      	cmp	r3, #0
 802e5ea:	d015      	beq.n	802e618 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 802e5ec:	687b      	ldr	r3, [r7, #4]
 802e5ee:	681b      	ldr	r3, [r3, #0]
 802e5f0:	681a      	ldr	r2, [r3, #0]
 802e5f2:	687b      	ldr	r3, [r7, #4]
 802e5f4:	681b      	ldr	r3, [r3, #0]
 802e5f6:	f022 0204 	bic.w	r2, r2, #4
 802e5fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802e5fc:	687b      	ldr	r3, [r7, #4]
 802e5fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e600:	f003 031f 	and.w	r3, r3, #31
 802e604:	2208      	movs	r2, #8
 802e606:	409a      	lsls	r2, r3
 802e608:	6a3b      	ldr	r3, [r7, #32]
 802e60a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802e60c:	687b      	ldr	r3, [r7, #4]
 802e60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e610:	f043 0201 	orr.w	r2, r3, #1
 802e614:	687b      	ldr	r3, [r7, #4]
 802e616:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802e618:	687b      	ldr	r3, [r7, #4]
 802e61a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e61c:	f003 031f 	and.w	r3, r3, #31
 802e620:	69ba      	ldr	r2, [r7, #24]
 802e622:	fa22 f303 	lsr.w	r3, r2, r3
 802e626:	f003 0301 	and.w	r3, r3, #1
 802e62a:	2b00      	cmp	r3, #0
 802e62c:	d06e      	beq.n	802e70c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 802e62e:	687b      	ldr	r3, [r7, #4]
 802e630:	681b      	ldr	r3, [r3, #0]
 802e632:	4a69      	ldr	r2, [pc, #420]	; (802e7d8 <HAL_DMA_IRQHandler+0x3f8>)
 802e634:	4293      	cmp	r3, r2
 802e636:	d04a      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e638:	687b      	ldr	r3, [r7, #4]
 802e63a:	681b      	ldr	r3, [r3, #0]
 802e63c:	4a67      	ldr	r2, [pc, #412]	; (802e7dc <HAL_DMA_IRQHandler+0x3fc>)
 802e63e:	4293      	cmp	r3, r2
 802e640:	d045      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e642:	687b      	ldr	r3, [r7, #4]
 802e644:	681b      	ldr	r3, [r3, #0]
 802e646:	4a66      	ldr	r2, [pc, #408]	; (802e7e0 <HAL_DMA_IRQHandler+0x400>)
 802e648:	4293      	cmp	r3, r2
 802e64a:	d040      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e64c:	687b      	ldr	r3, [r7, #4]
 802e64e:	681b      	ldr	r3, [r3, #0]
 802e650:	4a64      	ldr	r2, [pc, #400]	; (802e7e4 <HAL_DMA_IRQHandler+0x404>)
 802e652:	4293      	cmp	r3, r2
 802e654:	d03b      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e656:	687b      	ldr	r3, [r7, #4]
 802e658:	681b      	ldr	r3, [r3, #0]
 802e65a:	4a63      	ldr	r2, [pc, #396]	; (802e7e8 <HAL_DMA_IRQHandler+0x408>)
 802e65c:	4293      	cmp	r3, r2
 802e65e:	d036      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e660:	687b      	ldr	r3, [r7, #4]
 802e662:	681b      	ldr	r3, [r3, #0]
 802e664:	4a61      	ldr	r2, [pc, #388]	; (802e7ec <HAL_DMA_IRQHandler+0x40c>)
 802e666:	4293      	cmp	r3, r2
 802e668:	d031      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e66a:	687b      	ldr	r3, [r7, #4]
 802e66c:	681b      	ldr	r3, [r3, #0]
 802e66e:	4a60      	ldr	r2, [pc, #384]	; (802e7f0 <HAL_DMA_IRQHandler+0x410>)
 802e670:	4293      	cmp	r3, r2
 802e672:	d02c      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e674:	687b      	ldr	r3, [r7, #4]
 802e676:	681b      	ldr	r3, [r3, #0]
 802e678:	4a5e      	ldr	r2, [pc, #376]	; (802e7f4 <HAL_DMA_IRQHandler+0x414>)
 802e67a:	4293      	cmp	r3, r2
 802e67c:	d027      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e67e:	687b      	ldr	r3, [r7, #4]
 802e680:	681b      	ldr	r3, [r3, #0]
 802e682:	4a5d      	ldr	r2, [pc, #372]	; (802e7f8 <HAL_DMA_IRQHandler+0x418>)
 802e684:	4293      	cmp	r3, r2
 802e686:	d022      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e688:	687b      	ldr	r3, [r7, #4]
 802e68a:	681b      	ldr	r3, [r3, #0]
 802e68c:	4a5b      	ldr	r2, [pc, #364]	; (802e7fc <HAL_DMA_IRQHandler+0x41c>)
 802e68e:	4293      	cmp	r3, r2
 802e690:	d01d      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e692:	687b      	ldr	r3, [r7, #4]
 802e694:	681b      	ldr	r3, [r3, #0]
 802e696:	4a5a      	ldr	r2, [pc, #360]	; (802e800 <HAL_DMA_IRQHandler+0x420>)
 802e698:	4293      	cmp	r3, r2
 802e69a:	d018      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e69c:	687b      	ldr	r3, [r7, #4]
 802e69e:	681b      	ldr	r3, [r3, #0]
 802e6a0:	4a58      	ldr	r2, [pc, #352]	; (802e804 <HAL_DMA_IRQHandler+0x424>)
 802e6a2:	4293      	cmp	r3, r2
 802e6a4:	d013      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e6a6:	687b      	ldr	r3, [r7, #4]
 802e6a8:	681b      	ldr	r3, [r3, #0]
 802e6aa:	4a57      	ldr	r2, [pc, #348]	; (802e808 <HAL_DMA_IRQHandler+0x428>)
 802e6ac:	4293      	cmp	r3, r2
 802e6ae:	d00e      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e6b0:	687b      	ldr	r3, [r7, #4]
 802e6b2:	681b      	ldr	r3, [r3, #0]
 802e6b4:	4a55      	ldr	r2, [pc, #340]	; (802e80c <HAL_DMA_IRQHandler+0x42c>)
 802e6b6:	4293      	cmp	r3, r2
 802e6b8:	d009      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e6ba:	687b      	ldr	r3, [r7, #4]
 802e6bc:	681b      	ldr	r3, [r3, #0]
 802e6be:	4a54      	ldr	r2, [pc, #336]	; (802e810 <HAL_DMA_IRQHandler+0x430>)
 802e6c0:	4293      	cmp	r3, r2
 802e6c2:	d004      	beq.n	802e6ce <HAL_DMA_IRQHandler+0x2ee>
 802e6c4:	687b      	ldr	r3, [r7, #4]
 802e6c6:	681b      	ldr	r3, [r3, #0]
 802e6c8:	4a52      	ldr	r2, [pc, #328]	; (802e814 <HAL_DMA_IRQHandler+0x434>)
 802e6ca:	4293      	cmp	r3, r2
 802e6cc:	d10a      	bne.n	802e6e4 <HAL_DMA_IRQHandler+0x304>
 802e6ce:	687b      	ldr	r3, [r7, #4]
 802e6d0:	681b      	ldr	r3, [r3, #0]
 802e6d2:	695b      	ldr	r3, [r3, #20]
 802e6d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802e6d8:	2b00      	cmp	r3, #0
 802e6da:	bf14      	ite	ne
 802e6dc:	2301      	movne	r3, #1
 802e6de:	2300      	moveq	r3, #0
 802e6e0:	b2db      	uxtb	r3, r3
 802e6e2:	e003      	b.n	802e6ec <HAL_DMA_IRQHandler+0x30c>
 802e6e4:	687b      	ldr	r3, [r7, #4]
 802e6e6:	681b      	ldr	r3, [r3, #0]
 802e6e8:	681b      	ldr	r3, [r3, #0]
 802e6ea:	2300      	movs	r3, #0
 802e6ec:	2b00      	cmp	r3, #0
 802e6ee:	d00d      	beq.n	802e70c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802e6f0:	687b      	ldr	r3, [r7, #4]
 802e6f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e6f4:	f003 031f 	and.w	r3, r3, #31
 802e6f8:	2201      	movs	r2, #1
 802e6fa:	409a      	lsls	r2, r3
 802e6fc:	6a3b      	ldr	r3, [r7, #32]
 802e6fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802e700:	687b      	ldr	r3, [r7, #4]
 802e702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e704:	f043 0202 	orr.w	r2, r3, #2
 802e708:	687b      	ldr	r3, [r7, #4]
 802e70a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802e70c:	687b      	ldr	r3, [r7, #4]
 802e70e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e710:	f003 031f 	and.w	r3, r3, #31
 802e714:	2204      	movs	r2, #4
 802e716:	409a      	lsls	r2, r3
 802e718:	69bb      	ldr	r3, [r7, #24]
 802e71a:	4013      	ands	r3, r2
 802e71c:	2b00      	cmp	r3, #0
 802e71e:	f000 808f 	beq.w	802e840 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 802e722:	687b      	ldr	r3, [r7, #4]
 802e724:	681b      	ldr	r3, [r3, #0]
 802e726:	4a2c      	ldr	r2, [pc, #176]	; (802e7d8 <HAL_DMA_IRQHandler+0x3f8>)
 802e728:	4293      	cmp	r3, r2
 802e72a:	d04a      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e72c:	687b      	ldr	r3, [r7, #4]
 802e72e:	681b      	ldr	r3, [r3, #0]
 802e730:	4a2a      	ldr	r2, [pc, #168]	; (802e7dc <HAL_DMA_IRQHandler+0x3fc>)
 802e732:	4293      	cmp	r3, r2
 802e734:	d045      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e736:	687b      	ldr	r3, [r7, #4]
 802e738:	681b      	ldr	r3, [r3, #0]
 802e73a:	4a29      	ldr	r2, [pc, #164]	; (802e7e0 <HAL_DMA_IRQHandler+0x400>)
 802e73c:	4293      	cmp	r3, r2
 802e73e:	d040      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e740:	687b      	ldr	r3, [r7, #4]
 802e742:	681b      	ldr	r3, [r3, #0]
 802e744:	4a27      	ldr	r2, [pc, #156]	; (802e7e4 <HAL_DMA_IRQHandler+0x404>)
 802e746:	4293      	cmp	r3, r2
 802e748:	d03b      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e74a:	687b      	ldr	r3, [r7, #4]
 802e74c:	681b      	ldr	r3, [r3, #0]
 802e74e:	4a26      	ldr	r2, [pc, #152]	; (802e7e8 <HAL_DMA_IRQHandler+0x408>)
 802e750:	4293      	cmp	r3, r2
 802e752:	d036      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e754:	687b      	ldr	r3, [r7, #4]
 802e756:	681b      	ldr	r3, [r3, #0]
 802e758:	4a24      	ldr	r2, [pc, #144]	; (802e7ec <HAL_DMA_IRQHandler+0x40c>)
 802e75a:	4293      	cmp	r3, r2
 802e75c:	d031      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e75e:	687b      	ldr	r3, [r7, #4]
 802e760:	681b      	ldr	r3, [r3, #0]
 802e762:	4a23      	ldr	r2, [pc, #140]	; (802e7f0 <HAL_DMA_IRQHandler+0x410>)
 802e764:	4293      	cmp	r3, r2
 802e766:	d02c      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e768:	687b      	ldr	r3, [r7, #4]
 802e76a:	681b      	ldr	r3, [r3, #0]
 802e76c:	4a21      	ldr	r2, [pc, #132]	; (802e7f4 <HAL_DMA_IRQHandler+0x414>)
 802e76e:	4293      	cmp	r3, r2
 802e770:	d027      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e772:	687b      	ldr	r3, [r7, #4]
 802e774:	681b      	ldr	r3, [r3, #0]
 802e776:	4a20      	ldr	r2, [pc, #128]	; (802e7f8 <HAL_DMA_IRQHandler+0x418>)
 802e778:	4293      	cmp	r3, r2
 802e77a:	d022      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e77c:	687b      	ldr	r3, [r7, #4]
 802e77e:	681b      	ldr	r3, [r3, #0]
 802e780:	4a1e      	ldr	r2, [pc, #120]	; (802e7fc <HAL_DMA_IRQHandler+0x41c>)
 802e782:	4293      	cmp	r3, r2
 802e784:	d01d      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e786:	687b      	ldr	r3, [r7, #4]
 802e788:	681b      	ldr	r3, [r3, #0]
 802e78a:	4a1d      	ldr	r2, [pc, #116]	; (802e800 <HAL_DMA_IRQHandler+0x420>)
 802e78c:	4293      	cmp	r3, r2
 802e78e:	d018      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e790:	687b      	ldr	r3, [r7, #4]
 802e792:	681b      	ldr	r3, [r3, #0]
 802e794:	4a1b      	ldr	r2, [pc, #108]	; (802e804 <HAL_DMA_IRQHandler+0x424>)
 802e796:	4293      	cmp	r3, r2
 802e798:	d013      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e79a:	687b      	ldr	r3, [r7, #4]
 802e79c:	681b      	ldr	r3, [r3, #0]
 802e79e:	4a1a      	ldr	r2, [pc, #104]	; (802e808 <HAL_DMA_IRQHandler+0x428>)
 802e7a0:	4293      	cmp	r3, r2
 802e7a2:	d00e      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e7a4:	687b      	ldr	r3, [r7, #4]
 802e7a6:	681b      	ldr	r3, [r3, #0]
 802e7a8:	4a18      	ldr	r2, [pc, #96]	; (802e80c <HAL_DMA_IRQHandler+0x42c>)
 802e7aa:	4293      	cmp	r3, r2
 802e7ac:	d009      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e7ae:	687b      	ldr	r3, [r7, #4]
 802e7b0:	681b      	ldr	r3, [r3, #0]
 802e7b2:	4a17      	ldr	r2, [pc, #92]	; (802e810 <HAL_DMA_IRQHandler+0x430>)
 802e7b4:	4293      	cmp	r3, r2
 802e7b6:	d004      	beq.n	802e7c2 <HAL_DMA_IRQHandler+0x3e2>
 802e7b8:	687b      	ldr	r3, [r7, #4]
 802e7ba:	681b      	ldr	r3, [r3, #0]
 802e7bc:	4a15      	ldr	r2, [pc, #84]	; (802e814 <HAL_DMA_IRQHandler+0x434>)
 802e7be:	4293      	cmp	r3, r2
 802e7c0:	d12a      	bne.n	802e818 <HAL_DMA_IRQHandler+0x438>
 802e7c2:	687b      	ldr	r3, [r7, #4]
 802e7c4:	681b      	ldr	r3, [r3, #0]
 802e7c6:	681b      	ldr	r3, [r3, #0]
 802e7c8:	f003 0302 	and.w	r3, r3, #2
 802e7cc:	2b00      	cmp	r3, #0
 802e7ce:	bf14      	ite	ne
 802e7d0:	2301      	movne	r3, #1
 802e7d2:	2300      	moveq	r3, #0
 802e7d4:	b2db      	uxtb	r3, r3
 802e7d6:	e023      	b.n	802e820 <HAL_DMA_IRQHandler+0x440>
 802e7d8:	40020010 	.word	0x40020010
 802e7dc:	40020028 	.word	0x40020028
 802e7e0:	40020040 	.word	0x40020040
 802e7e4:	40020058 	.word	0x40020058
 802e7e8:	40020070 	.word	0x40020070
 802e7ec:	40020088 	.word	0x40020088
 802e7f0:	400200a0 	.word	0x400200a0
 802e7f4:	400200b8 	.word	0x400200b8
 802e7f8:	40020410 	.word	0x40020410
 802e7fc:	40020428 	.word	0x40020428
 802e800:	40020440 	.word	0x40020440
 802e804:	40020458 	.word	0x40020458
 802e808:	40020470 	.word	0x40020470
 802e80c:	40020488 	.word	0x40020488
 802e810:	400204a0 	.word	0x400204a0
 802e814:	400204b8 	.word	0x400204b8
 802e818:	687b      	ldr	r3, [r7, #4]
 802e81a:	681b      	ldr	r3, [r3, #0]
 802e81c:	681b      	ldr	r3, [r3, #0]
 802e81e:	2300      	movs	r3, #0
 802e820:	2b00      	cmp	r3, #0
 802e822:	d00d      	beq.n	802e840 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802e824:	687b      	ldr	r3, [r7, #4]
 802e826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e828:	f003 031f 	and.w	r3, r3, #31
 802e82c:	2204      	movs	r2, #4
 802e82e:	409a      	lsls	r2, r3
 802e830:	6a3b      	ldr	r3, [r7, #32]
 802e832:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802e834:	687b      	ldr	r3, [r7, #4]
 802e836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e838:	f043 0204 	orr.w	r2, r3, #4
 802e83c:	687b      	ldr	r3, [r7, #4]
 802e83e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802e840:	687b      	ldr	r3, [r7, #4]
 802e842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e844:	f003 031f 	and.w	r3, r3, #31
 802e848:	2210      	movs	r2, #16
 802e84a:	409a      	lsls	r2, r3
 802e84c:	69bb      	ldr	r3, [r7, #24]
 802e84e:	4013      	ands	r3, r2
 802e850:	2b00      	cmp	r3, #0
 802e852:	f000 80a6 	beq.w	802e9a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 802e856:	687b      	ldr	r3, [r7, #4]
 802e858:	681b      	ldr	r3, [r3, #0]
 802e85a:	4a85      	ldr	r2, [pc, #532]	; (802ea70 <HAL_DMA_IRQHandler+0x690>)
 802e85c:	4293      	cmp	r3, r2
 802e85e:	d04a      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e860:	687b      	ldr	r3, [r7, #4]
 802e862:	681b      	ldr	r3, [r3, #0]
 802e864:	4a83      	ldr	r2, [pc, #524]	; (802ea74 <HAL_DMA_IRQHandler+0x694>)
 802e866:	4293      	cmp	r3, r2
 802e868:	d045      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e86a:	687b      	ldr	r3, [r7, #4]
 802e86c:	681b      	ldr	r3, [r3, #0]
 802e86e:	4a82      	ldr	r2, [pc, #520]	; (802ea78 <HAL_DMA_IRQHandler+0x698>)
 802e870:	4293      	cmp	r3, r2
 802e872:	d040      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e874:	687b      	ldr	r3, [r7, #4]
 802e876:	681b      	ldr	r3, [r3, #0]
 802e878:	4a80      	ldr	r2, [pc, #512]	; (802ea7c <HAL_DMA_IRQHandler+0x69c>)
 802e87a:	4293      	cmp	r3, r2
 802e87c:	d03b      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e87e:	687b      	ldr	r3, [r7, #4]
 802e880:	681b      	ldr	r3, [r3, #0]
 802e882:	4a7f      	ldr	r2, [pc, #508]	; (802ea80 <HAL_DMA_IRQHandler+0x6a0>)
 802e884:	4293      	cmp	r3, r2
 802e886:	d036      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e888:	687b      	ldr	r3, [r7, #4]
 802e88a:	681b      	ldr	r3, [r3, #0]
 802e88c:	4a7d      	ldr	r2, [pc, #500]	; (802ea84 <HAL_DMA_IRQHandler+0x6a4>)
 802e88e:	4293      	cmp	r3, r2
 802e890:	d031      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e892:	687b      	ldr	r3, [r7, #4]
 802e894:	681b      	ldr	r3, [r3, #0]
 802e896:	4a7c      	ldr	r2, [pc, #496]	; (802ea88 <HAL_DMA_IRQHandler+0x6a8>)
 802e898:	4293      	cmp	r3, r2
 802e89a:	d02c      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e89c:	687b      	ldr	r3, [r7, #4]
 802e89e:	681b      	ldr	r3, [r3, #0]
 802e8a0:	4a7a      	ldr	r2, [pc, #488]	; (802ea8c <HAL_DMA_IRQHandler+0x6ac>)
 802e8a2:	4293      	cmp	r3, r2
 802e8a4:	d027      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e8a6:	687b      	ldr	r3, [r7, #4]
 802e8a8:	681b      	ldr	r3, [r3, #0]
 802e8aa:	4a79      	ldr	r2, [pc, #484]	; (802ea90 <HAL_DMA_IRQHandler+0x6b0>)
 802e8ac:	4293      	cmp	r3, r2
 802e8ae:	d022      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e8b0:	687b      	ldr	r3, [r7, #4]
 802e8b2:	681b      	ldr	r3, [r3, #0]
 802e8b4:	4a77      	ldr	r2, [pc, #476]	; (802ea94 <HAL_DMA_IRQHandler+0x6b4>)
 802e8b6:	4293      	cmp	r3, r2
 802e8b8:	d01d      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e8ba:	687b      	ldr	r3, [r7, #4]
 802e8bc:	681b      	ldr	r3, [r3, #0]
 802e8be:	4a76      	ldr	r2, [pc, #472]	; (802ea98 <HAL_DMA_IRQHandler+0x6b8>)
 802e8c0:	4293      	cmp	r3, r2
 802e8c2:	d018      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e8c4:	687b      	ldr	r3, [r7, #4]
 802e8c6:	681b      	ldr	r3, [r3, #0]
 802e8c8:	4a74      	ldr	r2, [pc, #464]	; (802ea9c <HAL_DMA_IRQHandler+0x6bc>)
 802e8ca:	4293      	cmp	r3, r2
 802e8cc:	d013      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e8ce:	687b      	ldr	r3, [r7, #4]
 802e8d0:	681b      	ldr	r3, [r3, #0]
 802e8d2:	4a73      	ldr	r2, [pc, #460]	; (802eaa0 <HAL_DMA_IRQHandler+0x6c0>)
 802e8d4:	4293      	cmp	r3, r2
 802e8d6:	d00e      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e8d8:	687b      	ldr	r3, [r7, #4]
 802e8da:	681b      	ldr	r3, [r3, #0]
 802e8dc:	4a71      	ldr	r2, [pc, #452]	; (802eaa4 <HAL_DMA_IRQHandler+0x6c4>)
 802e8de:	4293      	cmp	r3, r2
 802e8e0:	d009      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e8e2:	687b      	ldr	r3, [r7, #4]
 802e8e4:	681b      	ldr	r3, [r3, #0]
 802e8e6:	4a70      	ldr	r2, [pc, #448]	; (802eaa8 <HAL_DMA_IRQHandler+0x6c8>)
 802e8e8:	4293      	cmp	r3, r2
 802e8ea:	d004      	beq.n	802e8f6 <HAL_DMA_IRQHandler+0x516>
 802e8ec:	687b      	ldr	r3, [r7, #4]
 802e8ee:	681b      	ldr	r3, [r3, #0]
 802e8f0:	4a6e      	ldr	r2, [pc, #440]	; (802eaac <HAL_DMA_IRQHandler+0x6cc>)
 802e8f2:	4293      	cmp	r3, r2
 802e8f4:	d10a      	bne.n	802e90c <HAL_DMA_IRQHandler+0x52c>
 802e8f6:	687b      	ldr	r3, [r7, #4]
 802e8f8:	681b      	ldr	r3, [r3, #0]
 802e8fa:	681b      	ldr	r3, [r3, #0]
 802e8fc:	f003 0308 	and.w	r3, r3, #8
 802e900:	2b00      	cmp	r3, #0
 802e902:	bf14      	ite	ne
 802e904:	2301      	movne	r3, #1
 802e906:	2300      	moveq	r3, #0
 802e908:	b2db      	uxtb	r3, r3
 802e90a:	e009      	b.n	802e920 <HAL_DMA_IRQHandler+0x540>
 802e90c:	687b      	ldr	r3, [r7, #4]
 802e90e:	681b      	ldr	r3, [r3, #0]
 802e910:	681b      	ldr	r3, [r3, #0]
 802e912:	f003 0304 	and.w	r3, r3, #4
 802e916:	2b00      	cmp	r3, #0
 802e918:	bf14      	ite	ne
 802e91a:	2301      	movne	r3, #1
 802e91c:	2300      	moveq	r3, #0
 802e91e:	b2db      	uxtb	r3, r3
 802e920:	2b00      	cmp	r3, #0
 802e922:	d03e      	beq.n	802e9a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 802e924:	687b      	ldr	r3, [r7, #4]
 802e926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e928:	f003 031f 	and.w	r3, r3, #31
 802e92c:	2210      	movs	r2, #16
 802e92e:	409a      	lsls	r2, r3
 802e930:	6a3b      	ldr	r3, [r7, #32]
 802e932:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802e934:	687b      	ldr	r3, [r7, #4]
 802e936:	681b      	ldr	r3, [r3, #0]
 802e938:	681b      	ldr	r3, [r3, #0]
 802e93a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802e93e:	2b00      	cmp	r3, #0
 802e940:	d018      	beq.n	802e974 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802e942:	687b      	ldr	r3, [r7, #4]
 802e944:	681b      	ldr	r3, [r3, #0]
 802e946:	681b      	ldr	r3, [r3, #0]
 802e948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802e94c:	2b00      	cmp	r3, #0
 802e94e:	d108      	bne.n	802e962 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 802e950:	687b      	ldr	r3, [r7, #4]
 802e952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e954:	2b00      	cmp	r3, #0
 802e956:	d024      	beq.n	802e9a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 802e958:	687b      	ldr	r3, [r7, #4]
 802e95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e95c:	6878      	ldr	r0, [r7, #4]
 802e95e:	4798      	blx	r3
 802e960:	e01f      	b.n	802e9a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 802e962:	687b      	ldr	r3, [r7, #4]
 802e964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e966:	2b00      	cmp	r3, #0
 802e968:	d01b      	beq.n	802e9a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 802e96a:	687b      	ldr	r3, [r7, #4]
 802e96c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e96e:	6878      	ldr	r0, [r7, #4]
 802e970:	4798      	blx	r3
 802e972:	e016      	b.n	802e9a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802e974:	687b      	ldr	r3, [r7, #4]
 802e976:	681b      	ldr	r3, [r3, #0]
 802e978:	681b      	ldr	r3, [r3, #0]
 802e97a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e97e:	2b00      	cmp	r3, #0
 802e980:	d107      	bne.n	802e992 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802e982:	687b      	ldr	r3, [r7, #4]
 802e984:	681b      	ldr	r3, [r3, #0]
 802e986:	681a      	ldr	r2, [r3, #0]
 802e988:	687b      	ldr	r3, [r7, #4]
 802e98a:	681b      	ldr	r3, [r3, #0]
 802e98c:	f022 0208 	bic.w	r2, r2, #8
 802e990:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 802e992:	687b      	ldr	r3, [r7, #4]
 802e994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e996:	2b00      	cmp	r3, #0
 802e998:	d003      	beq.n	802e9a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802e99a:	687b      	ldr	r3, [r7, #4]
 802e99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e99e:	6878      	ldr	r0, [r7, #4]
 802e9a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802e9a2:	687b      	ldr	r3, [r7, #4]
 802e9a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802e9a6:	f003 031f 	and.w	r3, r3, #31
 802e9aa:	2220      	movs	r2, #32
 802e9ac:	409a      	lsls	r2, r3
 802e9ae:	69bb      	ldr	r3, [r7, #24]
 802e9b0:	4013      	ands	r3, r2
 802e9b2:	2b00      	cmp	r3, #0
 802e9b4:	f000 8110 	beq.w	802ebd8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 802e9b8:	687b      	ldr	r3, [r7, #4]
 802e9ba:	681b      	ldr	r3, [r3, #0]
 802e9bc:	4a2c      	ldr	r2, [pc, #176]	; (802ea70 <HAL_DMA_IRQHandler+0x690>)
 802e9be:	4293      	cmp	r3, r2
 802e9c0:	d04a      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802e9c2:	687b      	ldr	r3, [r7, #4]
 802e9c4:	681b      	ldr	r3, [r3, #0]
 802e9c6:	4a2b      	ldr	r2, [pc, #172]	; (802ea74 <HAL_DMA_IRQHandler+0x694>)
 802e9c8:	4293      	cmp	r3, r2
 802e9ca:	d045      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802e9cc:	687b      	ldr	r3, [r7, #4]
 802e9ce:	681b      	ldr	r3, [r3, #0]
 802e9d0:	4a29      	ldr	r2, [pc, #164]	; (802ea78 <HAL_DMA_IRQHandler+0x698>)
 802e9d2:	4293      	cmp	r3, r2
 802e9d4:	d040      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802e9d6:	687b      	ldr	r3, [r7, #4]
 802e9d8:	681b      	ldr	r3, [r3, #0]
 802e9da:	4a28      	ldr	r2, [pc, #160]	; (802ea7c <HAL_DMA_IRQHandler+0x69c>)
 802e9dc:	4293      	cmp	r3, r2
 802e9de:	d03b      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802e9e0:	687b      	ldr	r3, [r7, #4]
 802e9e2:	681b      	ldr	r3, [r3, #0]
 802e9e4:	4a26      	ldr	r2, [pc, #152]	; (802ea80 <HAL_DMA_IRQHandler+0x6a0>)
 802e9e6:	4293      	cmp	r3, r2
 802e9e8:	d036      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802e9ea:	687b      	ldr	r3, [r7, #4]
 802e9ec:	681b      	ldr	r3, [r3, #0]
 802e9ee:	4a25      	ldr	r2, [pc, #148]	; (802ea84 <HAL_DMA_IRQHandler+0x6a4>)
 802e9f0:	4293      	cmp	r3, r2
 802e9f2:	d031      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802e9f4:	687b      	ldr	r3, [r7, #4]
 802e9f6:	681b      	ldr	r3, [r3, #0]
 802e9f8:	4a23      	ldr	r2, [pc, #140]	; (802ea88 <HAL_DMA_IRQHandler+0x6a8>)
 802e9fa:	4293      	cmp	r3, r2
 802e9fc:	d02c      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802e9fe:	687b      	ldr	r3, [r7, #4]
 802ea00:	681b      	ldr	r3, [r3, #0]
 802ea02:	4a22      	ldr	r2, [pc, #136]	; (802ea8c <HAL_DMA_IRQHandler+0x6ac>)
 802ea04:	4293      	cmp	r3, r2
 802ea06:	d027      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802ea08:	687b      	ldr	r3, [r7, #4]
 802ea0a:	681b      	ldr	r3, [r3, #0]
 802ea0c:	4a20      	ldr	r2, [pc, #128]	; (802ea90 <HAL_DMA_IRQHandler+0x6b0>)
 802ea0e:	4293      	cmp	r3, r2
 802ea10:	d022      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802ea12:	687b      	ldr	r3, [r7, #4]
 802ea14:	681b      	ldr	r3, [r3, #0]
 802ea16:	4a1f      	ldr	r2, [pc, #124]	; (802ea94 <HAL_DMA_IRQHandler+0x6b4>)
 802ea18:	4293      	cmp	r3, r2
 802ea1a:	d01d      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802ea1c:	687b      	ldr	r3, [r7, #4]
 802ea1e:	681b      	ldr	r3, [r3, #0]
 802ea20:	4a1d      	ldr	r2, [pc, #116]	; (802ea98 <HAL_DMA_IRQHandler+0x6b8>)
 802ea22:	4293      	cmp	r3, r2
 802ea24:	d018      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802ea26:	687b      	ldr	r3, [r7, #4]
 802ea28:	681b      	ldr	r3, [r3, #0]
 802ea2a:	4a1c      	ldr	r2, [pc, #112]	; (802ea9c <HAL_DMA_IRQHandler+0x6bc>)
 802ea2c:	4293      	cmp	r3, r2
 802ea2e:	d013      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802ea30:	687b      	ldr	r3, [r7, #4]
 802ea32:	681b      	ldr	r3, [r3, #0]
 802ea34:	4a1a      	ldr	r2, [pc, #104]	; (802eaa0 <HAL_DMA_IRQHandler+0x6c0>)
 802ea36:	4293      	cmp	r3, r2
 802ea38:	d00e      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802ea3a:	687b      	ldr	r3, [r7, #4]
 802ea3c:	681b      	ldr	r3, [r3, #0]
 802ea3e:	4a19      	ldr	r2, [pc, #100]	; (802eaa4 <HAL_DMA_IRQHandler+0x6c4>)
 802ea40:	4293      	cmp	r3, r2
 802ea42:	d009      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802ea44:	687b      	ldr	r3, [r7, #4]
 802ea46:	681b      	ldr	r3, [r3, #0]
 802ea48:	4a17      	ldr	r2, [pc, #92]	; (802eaa8 <HAL_DMA_IRQHandler+0x6c8>)
 802ea4a:	4293      	cmp	r3, r2
 802ea4c:	d004      	beq.n	802ea58 <HAL_DMA_IRQHandler+0x678>
 802ea4e:	687b      	ldr	r3, [r7, #4]
 802ea50:	681b      	ldr	r3, [r3, #0]
 802ea52:	4a16      	ldr	r2, [pc, #88]	; (802eaac <HAL_DMA_IRQHandler+0x6cc>)
 802ea54:	4293      	cmp	r3, r2
 802ea56:	d12b      	bne.n	802eab0 <HAL_DMA_IRQHandler+0x6d0>
 802ea58:	687b      	ldr	r3, [r7, #4]
 802ea5a:	681b      	ldr	r3, [r3, #0]
 802ea5c:	681b      	ldr	r3, [r3, #0]
 802ea5e:	f003 0310 	and.w	r3, r3, #16
 802ea62:	2b00      	cmp	r3, #0
 802ea64:	bf14      	ite	ne
 802ea66:	2301      	movne	r3, #1
 802ea68:	2300      	moveq	r3, #0
 802ea6a:	b2db      	uxtb	r3, r3
 802ea6c:	e02a      	b.n	802eac4 <HAL_DMA_IRQHandler+0x6e4>
 802ea6e:	bf00      	nop
 802ea70:	40020010 	.word	0x40020010
 802ea74:	40020028 	.word	0x40020028
 802ea78:	40020040 	.word	0x40020040
 802ea7c:	40020058 	.word	0x40020058
 802ea80:	40020070 	.word	0x40020070
 802ea84:	40020088 	.word	0x40020088
 802ea88:	400200a0 	.word	0x400200a0
 802ea8c:	400200b8 	.word	0x400200b8
 802ea90:	40020410 	.word	0x40020410
 802ea94:	40020428 	.word	0x40020428
 802ea98:	40020440 	.word	0x40020440
 802ea9c:	40020458 	.word	0x40020458
 802eaa0:	40020470 	.word	0x40020470
 802eaa4:	40020488 	.word	0x40020488
 802eaa8:	400204a0 	.word	0x400204a0
 802eaac:	400204b8 	.word	0x400204b8
 802eab0:	687b      	ldr	r3, [r7, #4]
 802eab2:	681b      	ldr	r3, [r3, #0]
 802eab4:	681b      	ldr	r3, [r3, #0]
 802eab6:	f003 0302 	and.w	r3, r3, #2
 802eaba:	2b00      	cmp	r3, #0
 802eabc:	bf14      	ite	ne
 802eabe:	2301      	movne	r3, #1
 802eac0:	2300      	moveq	r3, #0
 802eac2:	b2db      	uxtb	r3, r3
 802eac4:	2b00      	cmp	r3, #0
 802eac6:	f000 8087 	beq.w	802ebd8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 802eaca:	687b      	ldr	r3, [r7, #4]
 802eacc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802eace:	f003 031f 	and.w	r3, r3, #31
 802ead2:	2220      	movs	r2, #32
 802ead4:	409a      	lsls	r2, r3
 802ead6:	6a3b      	ldr	r3, [r7, #32]
 802ead8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 802eada:	687b      	ldr	r3, [r7, #4]
 802eadc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802eae0:	b2db      	uxtb	r3, r3
 802eae2:	2b04      	cmp	r3, #4
 802eae4:	d139      	bne.n	802eb5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802eae6:	687b      	ldr	r3, [r7, #4]
 802eae8:	681b      	ldr	r3, [r3, #0]
 802eaea:	681a      	ldr	r2, [r3, #0]
 802eaec:	687b      	ldr	r3, [r7, #4]
 802eaee:	681b      	ldr	r3, [r3, #0]
 802eaf0:	f022 0216 	bic.w	r2, r2, #22
 802eaf4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802eaf6:	687b      	ldr	r3, [r7, #4]
 802eaf8:	681b      	ldr	r3, [r3, #0]
 802eafa:	695a      	ldr	r2, [r3, #20]
 802eafc:	687b      	ldr	r3, [r7, #4]
 802eafe:	681b      	ldr	r3, [r3, #0]
 802eb00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802eb04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802eb06:	687b      	ldr	r3, [r7, #4]
 802eb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802eb0a:	2b00      	cmp	r3, #0
 802eb0c:	d103      	bne.n	802eb16 <HAL_DMA_IRQHandler+0x736>
 802eb0e:	687b      	ldr	r3, [r7, #4]
 802eb10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802eb12:	2b00      	cmp	r3, #0
 802eb14:	d007      	beq.n	802eb26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802eb16:	687b      	ldr	r3, [r7, #4]
 802eb18:	681b      	ldr	r3, [r3, #0]
 802eb1a:	681a      	ldr	r2, [r3, #0]
 802eb1c:	687b      	ldr	r3, [r7, #4]
 802eb1e:	681b      	ldr	r3, [r3, #0]
 802eb20:	f022 0208 	bic.w	r2, r2, #8
 802eb24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802eb26:	687b      	ldr	r3, [r7, #4]
 802eb28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802eb2a:	f003 031f 	and.w	r3, r3, #31
 802eb2e:	223f      	movs	r2, #63	; 0x3f
 802eb30:	409a      	lsls	r2, r3
 802eb32:	6a3b      	ldr	r3, [r7, #32]
 802eb34:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802eb36:	687b      	ldr	r3, [r7, #4]
 802eb38:	2201      	movs	r2, #1
 802eb3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802eb3e:	687b      	ldr	r3, [r7, #4]
 802eb40:	2200      	movs	r2, #0
 802eb42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 802eb46:	687b      	ldr	r3, [r7, #4]
 802eb48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802eb4a:	2b00      	cmp	r3, #0
 802eb4c:	f000 834a 	beq.w	802f1e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 802eb50:	687b      	ldr	r3, [r7, #4]
 802eb52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802eb54:	6878      	ldr	r0, [r7, #4]
 802eb56:	4798      	blx	r3
          }
          return;
 802eb58:	e344      	b.n	802f1e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802eb5a:	687b      	ldr	r3, [r7, #4]
 802eb5c:	681b      	ldr	r3, [r3, #0]
 802eb5e:	681b      	ldr	r3, [r3, #0]
 802eb60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802eb64:	2b00      	cmp	r3, #0
 802eb66:	d018      	beq.n	802eb9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802eb68:	687b      	ldr	r3, [r7, #4]
 802eb6a:	681b      	ldr	r3, [r3, #0]
 802eb6c:	681b      	ldr	r3, [r3, #0]
 802eb6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802eb72:	2b00      	cmp	r3, #0
 802eb74:	d108      	bne.n	802eb88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 802eb76:	687b      	ldr	r3, [r7, #4]
 802eb78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802eb7a:	2b00      	cmp	r3, #0
 802eb7c:	d02c      	beq.n	802ebd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 802eb7e:	687b      	ldr	r3, [r7, #4]
 802eb80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802eb82:	6878      	ldr	r0, [r7, #4]
 802eb84:	4798      	blx	r3
 802eb86:	e027      	b.n	802ebd8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 802eb88:	687b      	ldr	r3, [r7, #4]
 802eb8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eb8c:	2b00      	cmp	r3, #0
 802eb8e:	d023      	beq.n	802ebd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 802eb90:	687b      	ldr	r3, [r7, #4]
 802eb92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eb94:	6878      	ldr	r0, [r7, #4]
 802eb96:	4798      	blx	r3
 802eb98:	e01e      	b.n	802ebd8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802eb9a:	687b      	ldr	r3, [r7, #4]
 802eb9c:	681b      	ldr	r3, [r3, #0]
 802eb9e:	681b      	ldr	r3, [r3, #0]
 802eba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802eba4:	2b00      	cmp	r3, #0
 802eba6:	d10f      	bne.n	802ebc8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 802eba8:	687b      	ldr	r3, [r7, #4]
 802ebaa:	681b      	ldr	r3, [r3, #0]
 802ebac:	681a      	ldr	r2, [r3, #0]
 802ebae:	687b      	ldr	r3, [r7, #4]
 802ebb0:	681b      	ldr	r3, [r3, #0]
 802ebb2:	f022 0210 	bic.w	r2, r2, #16
 802ebb6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 802ebb8:	687b      	ldr	r3, [r7, #4]
 802ebba:	2201      	movs	r2, #1
 802ebbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 802ebc0:	687b      	ldr	r3, [r7, #4]
 802ebc2:	2200      	movs	r2, #0
 802ebc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 802ebc8:	687b      	ldr	r3, [r7, #4]
 802ebca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ebcc:	2b00      	cmp	r3, #0
 802ebce:	d003      	beq.n	802ebd8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 802ebd0:	687b      	ldr	r3, [r7, #4]
 802ebd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ebd4:	6878      	ldr	r0, [r7, #4]
 802ebd6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802ebd8:	687b      	ldr	r3, [r7, #4]
 802ebda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ebdc:	2b00      	cmp	r3, #0
 802ebde:	f000 8306 	beq.w	802f1ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 802ebe2:	687b      	ldr	r3, [r7, #4]
 802ebe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ebe6:	f003 0301 	and.w	r3, r3, #1
 802ebea:	2b00      	cmp	r3, #0
 802ebec:	f000 8088 	beq.w	802ed00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 802ebf0:	687b      	ldr	r3, [r7, #4]
 802ebf2:	2204      	movs	r2, #4
 802ebf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 802ebf8:	687b      	ldr	r3, [r7, #4]
 802ebfa:	681b      	ldr	r3, [r3, #0]
 802ebfc:	4a7a      	ldr	r2, [pc, #488]	; (802ede8 <HAL_DMA_IRQHandler+0xa08>)
 802ebfe:	4293      	cmp	r3, r2
 802ec00:	d04a      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec02:	687b      	ldr	r3, [r7, #4]
 802ec04:	681b      	ldr	r3, [r3, #0]
 802ec06:	4a79      	ldr	r2, [pc, #484]	; (802edec <HAL_DMA_IRQHandler+0xa0c>)
 802ec08:	4293      	cmp	r3, r2
 802ec0a:	d045      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec0c:	687b      	ldr	r3, [r7, #4]
 802ec0e:	681b      	ldr	r3, [r3, #0]
 802ec10:	4a77      	ldr	r2, [pc, #476]	; (802edf0 <HAL_DMA_IRQHandler+0xa10>)
 802ec12:	4293      	cmp	r3, r2
 802ec14:	d040      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec16:	687b      	ldr	r3, [r7, #4]
 802ec18:	681b      	ldr	r3, [r3, #0]
 802ec1a:	4a76      	ldr	r2, [pc, #472]	; (802edf4 <HAL_DMA_IRQHandler+0xa14>)
 802ec1c:	4293      	cmp	r3, r2
 802ec1e:	d03b      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec20:	687b      	ldr	r3, [r7, #4]
 802ec22:	681b      	ldr	r3, [r3, #0]
 802ec24:	4a74      	ldr	r2, [pc, #464]	; (802edf8 <HAL_DMA_IRQHandler+0xa18>)
 802ec26:	4293      	cmp	r3, r2
 802ec28:	d036      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec2a:	687b      	ldr	r3, [r7, #4]
 802ec2c:	681b      	ldr	r3, [r3, #0]
 802ec2e:	4a73      	ldr	r2, [pc, #460]	; (802edfc <HAL_DMA_IRQHandler+0xa1c>)
 802ec30:	4293      	cmp	r3, r2
 802ec32:	d031      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec34:	687b      	ldr	r3, [r7, #4]
 802ec36:	681b      	ldr	r3, [r3, #0]
 802ec38:	4a71      	ldr	r2, [pc, #452]	; (802ee00 <HAL_DMA_IRQHandler+0xa20>)
 802ec3a:	4293      	cmp	r3, r2
 802ec3c:	d02c      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec3e:	687b      	ldr	r3, [r7, #4]
 802ec40:	681b      	ldr	r3, [r3, #0]
 802ec42:	4a70      	ldr	r2, [pc, #448]	; (802ee04 <HAL_DMA_IRQHandler+0xa24>)
 802ec44:	4293      	cmp	r3, r2
 802ec46:	d027      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec48:	687b      	ldr	r3, [r7, #4]
 802ec4a:	681b      	ldr	r3, [r3, #0]
 802ec4c:	4a6e      	ldr	r2, [pc, #440]	; (802ee08 <HAL_DMA_IRQHandler+0xa28>)
 802ec4e:	4293      	cmp	r3, r2
 802ec50:	d022      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec52:	687b      	ldr	r3, [r7, #4]
 802ec54:	681b      	ldr	r3, [r3, #0]
 802ec56:	4a6d      	ldr	r2, [pc, #436]	; (802ee0c <HAL_DMA_IRQHandler+0xa2c>)
 802ec58:	4293      	cmp	r3, r2
 802ec5a:	d01d      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec5c:	687b      	ldr	r3, [r7, #4]
 802ec5e:	681b      	ldr	r3, [r3, #0]
 802ec60:	4a6b      	ldr	r2, [pc, #428]	; (802ee10 <HAL_DMA_IRQHandler+0xa30>)
 802ec62:	4293      	cmp	r3, r2
 802ec64:	d018      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec66:	687b      	ldr	r3, [r7, #4]
 802ec68:	681b      	ldr	r3, [r3, #0]
 802ec6a:	4a6a      	ldr	r2, [pc, #424]	; (802ee14 <HAL_DMA_IRQHandler+0xa34>)
 802ec6c:	4293      	cmp	r3, r2
 802ec6e:	d013      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec70:	687b      	ldr	r3, [r7, #4]
 802ec72:	681b      	ldr	r3, [r3, #0]
 802ec74:	4a68      	ldr	r2, [pc, #416]	; (802ee18 <HAL_DMA_IRQHandler+0xa38>)
 802ec76:	4293      	cmp	r3, r2
 802ec78:	d00e      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec7a:	687b      	ldr	r3, [r7, #4]
 802ec7c:	681b      	ldr	r3, [r3, #0]
 802ec7e:	4a67      	ldr	r2, [pc, #412]	; (802ee1c <HAL_DMA_IRQHandler+0xa3c>)
 802ec80:	4293      	cmp	r3, r2
 802ec82:	d009      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec84:	687b      	ldr	r3, [r7, #4]
 802ec86:	681b      	ldr	r3, [r3, #0]
 802ec88:	4a65      	ldr	r2, [pc, #404]	; (802ee20 <HAL_DMA_IRQHandler+0xa40>)
 802ec8a:	4293      	cmp	r3, r2
 802ec8c:	d004      	beq.n	802ec98 <HAL_DMA_IRQHandler+0x8b8>
 802ec8e:	687b      	ldr	r3, [r7, #4]
 802ec90:	681b      	ldr	r3, [r3, #0]
 802ec92:	4a64      	ldr	r2, [pc, #400]	; (802ee24 <HAL_DMA_IRQHandler+0xa44>)
 802ec94:	4293      	cmp	r3, r2
 802ec96:	d108      	bne.n	802ecaa <HAL_DMA_IRQHandler+0x8ca>
 802ec98:	687b      	ldr	r3, [r7, #4]
 802ec9a:	681b      	ldr	r3, [r3, #0]
 802ec9c:	681a      	ldr	r2, [r3, #0]
 802ec9e:	687b      	ldr	r3, [r7, #4]
 802eca0:	681b      	ldr	r3, [r3, #0]
 802eca2:	f022 0201 	bic.w	r2, r2, #1
 802eca6:	601a      	str	r2, [r3, #0]
 802eca8:	e007      	b.n	802ecba <HAL_DMA_IRQHandler+0x8da>
 802ecaa:	687b      	ldr	r3, [r7, #4]
 802ecac:	681b      	ldr	r3, [r3, #0]
 802ecae:	681a      	ldr	r2, [r3, #0]
 802ecb0:	687b      	ldr	r3, [r7, #4]
 802ecb2:	681b      	ldr	r3, [r3, #0]
 802ecb4:	f022 0201 	bic.w	r2, r2, #1
 802ecb8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 802ecba:	68fb      	ldr	r3, [r7, #12]
 802ecbc:	3301      	adds	r3, #1
 802ecbe:	60fb      	str	r3, [r7, #12]
 802ecc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ecc2:	429a      	cmp	r2, r3
 802ecc4:	d307      	bcc.n	802ecd6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 802ecc6:	687b      	ldr	r3, [r7, #4]
 802ecc8:	681b      	ldr	r3, [r3, #0]
 802ecca:	681b      	ldr	r3, [r3, #0]
 802eccc:	f003 0301 	and.w	r3, r3, #1
 802ecd0:	2b00      	cmp	r3, #0
 802ecd2:	d1f2      	bne.n	802ecba <HAL_DMA_IRQHandler+0x8da>
 802ecd4:	e000      	b.n	802ecd8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 802ecd6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802ecd8:	687b      	ldr	r3, [r7, #4]
 802ecda:	681b      	ldr	r3, [r3, #0]
 802ecdc:	681b      	ldr	r3, [r3, #0]
 802ecde:	f003 0301 	and.w	r3, r3, #1
 802ece2:	2b00      	cmp	r3, #0
 802ece4:	d004      	beq.n	802ecf0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 802ece6:	687b      	ldr	r3, [r7, #4]
 802ece8:	2203      	movs	r2, #3
 802ecea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802ecee:	e003      	b.n	802ecf8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 802ecf0:	687b      	ldr	r3, [r7, #4]
 802ecf2:	2201      	movs	r2, #1
 802ecf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802ecf8:	687b      	ldr	r3, [r7, #4]
 802ecfa:	2200      	movs	r2, #0
 802ecfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 802ed00:	687b      	ldr	r3, [r7, #4]
 802ed02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802ed04:	2b00      	cmp	r3, #0
 802ed06:	f000 8272 	beq.w	802f1ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802ed0a:	687b      	ldr	r3, [r7, #4]
 802ed0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802ed0e:	6878      	ldr	r0, [r7, #4]
 802ed10:	4798      	blx	r3
 802ed12:	e26c      	b.n	802f1ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 802ed14:	687b      	ldr	r3, [r7, #4]
 802ed16:	681b      	ldr	r3, [r3, #0]
 802ed18:	4a43      	ldr	r2, [pc, #268]	; (802ee28 <HAL_DMA_IRQHandler+0xa48>)
 802ed1a:	4293      	cmp	r3, r2
 802ed1c:	d022      	beq.n	802ed64 <HAL_DMA_IRQHandler+0x984>
 802ed1e:	687b      	ldr	r3, [r7, #4]
 802ed20:	681b      	ldr	r3, [r3, #0]
 802ed22:	4a42      	ldr	r2, [pc, #264]	; (802ee2c <HAL_DMA_IRQHandler+0xa4c>)
 802ed24:	4293      	cmp	r3, r2
 802ed26:	d01d      	beq.n	802ed64 <HAL_DMA_IRQHandler+0x984>
 802ed28:	687b      	ldr	r3, [r7, #4]
 802ed2a:	681b      	ldr	r3, [r3, #0]
 802ed2c:	4a40      	ldr	r2, [pc, #256]	; (802ee30 <HAL_DMA_IRQHandler+0xa50>)
 802ed2e:	4293      	cmp	r3, r2
 802ed30:	d018      	beq.n	802ed64 <HAL_DMA_IRQHandler+0x984>
 802ed32:	687b      	ldr	r3, [r7, #4]
 802ed34:	681b      	ldr	r3, [r3, #0]
 802ed36:	4a3f      	ldr	r2, [pc, #252]	; (802ee34 <HAL_DMA_IRQHandler+0xa54>)
 802ed38:	4293      	cmp	r3, r2
 802ed3a:	d013      	beq.n	802ed64 <HAL_DMA_IRQHandler+0x984>
 802ed3c:	687b      	ldr	r3, [r7, #4]
 802ed3e:	681b      	ldr	r3, [r3, #0]
 802ed40:	4a3d      	ldr	r2, [pc, #244]	; (802ee38 <HAL_DMA_IRQHandler+0xa58>)
 802ed42:	4293      	cmp	r3, r2
 802ed44:	d00e      	beq.n	802ed64 <HAL_DMA_IRQHandler+0x984>
 802ed46:	687b      	ldr	r3, [r7, #4]
 802ed48:	681b      	ldr	r3, [r3, #0]
 802ed4a:	4a3c      	ldr	r2, [pc, #240]	; (802ee3c <HAL_DMA_IRQHandler+0xa5c>)
 802ed4c:	4293      	cmp	r3, r2
 802ed4e:	d009      	beq.n	802ed64 <HAL_DMA_IRQHandler+0x984>
 802ed50:	687b      	ldr	r3, [r7, #4]
 802ed52:	681b      	ldr	r3, [r3, #0]
 802ed54:	4a3a      	ldr	r2, [pc, #232]	; (802ee40 <HAL_DMA_IRQHandler+0xa60>)
 802ed56:	4293      	cmp	r3, r2
 802ed58:	d004      	beq.n	802ed64 <HAL_DMA_IRQHandler+0x984>
 802ed5a:	687b      	ldr	r3, [r7, #4]
 802ed5c:	681b      	ldr	r3, [r3, #0]
 802ed5e:	4a39      	ldr	r2, [pc, #228]	; (802ee44 <HAL_DMA_IRQHandler+0xa64>)
 802ed60:	4293      	cmp	r3, r2
 802ed62:	d101      	bne.n	802ed68 <HAL_DMA_IRQHandler+0x988>
 802ed64:	2301      	movs	r3, #1
 802ed66:	e000      	b.n	802ed6a <HAL_DMA_IRQHandler+0x98a>
 802ed68:	2300      	movs	r3, #0
 802ed6a:	2b00      	cmp	r3, #0
 802ed6c:	f000 823f 	beq.w	802f1ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 802ed70:	687b      	ldr	r3, [r7, #4]
 802ed72:	681b      	ldr	r3, [r3, #0]
 802ed74:	681b      	ldr	r3, [r3, #0]
 802ed76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 802ed78:	687b      	ldr	r3, [r7, #4]
 802ed7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ed7c:	f003 031f 	and.w	r3, r3, #31
 802ed80:	2204      	movs	r2, #4
 802ed82:	409a      	lsls	r2, r3
 802ed84:	697b      	ldr	r3, [r7, #20]
 802ed86:	4013      	ands	r3, r2
 802ed88:	2b00      	cmp	r3, #0
 802ed8a:	f000 80cd 	beq.w	802ef28 <HAL_DMA_IRQHandler+0xb48>
 802ed8e:	693b      	ldr	r3, [r7, #16]
 802ed90:	f003 0304 	and.w	r3, r3, #4
 802ed94:	2b00      	cmp	r3, #0
 802ed96:	f000 80c7 	beq.w	802ef28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 802ed9a:	687b      	ldr	r3, [r7, #4]
 802ed9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ed9e:	f003 031f 	and.w	r3, r3, #31
 802eda2:	2204      	movs	r2, #4
 802eda4:	409a      	lsls	r2, r3
 802eda6:	69fb      	ldr	r3, [r7, #28]
 802eda8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802edaa:	693b      	ldr	r3, [r7, #16]
 802edac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802edb0:	2b00      	cmp	r3, #0
 802edb2:	d049      	beq.n	802ee48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802edb4:	693b      	ldr	r3, [r7, #16]
 802edb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802edba:	2b00      	cmp	r3, #0
 802edbc:	d109      	bne.n	802edd2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802edbe:	687b      	ldr	r3, [r7, #4]
 802edc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802edc2:	2b00      	cmp	r3, #0
 802edc4:	f000 8210 	beq.w	802f1e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 802edc8:	687b      	ldr	r3, [r7, #4]
 802edca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802edcc:	6878      	ldr	r0, [r7, #4]
 802edce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802edd0:	e20a      	b.n	802f1e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802edd2:	687b      	ldr	r3, [r7, #4]
 802edd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802edd6:	2b00      	cmp	r3, #0
 802edd8:	f000 8206 	beq.w	802f1e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 802eddc:	687b      	ldr	r3, [r7, #4]
 802edde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ede0:	6878      	ldr	r0, [r7, #4]
 802ede2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802ede4:	e200      	b.n	802f1e8 <HAL_DMA_IRQHandler+0xe08>
 802ede6:	bf00      	nop
 802ede8:	40020010 	.word	0x40020010
 802edec:	40020028 	.word	0x40020028
 802edf0:	40020040 	.word	0x40020040
 802edf4:	40020058 	.word	0x40020058
 802edf8:	40020070 	.word	0x40020070
 802edfc:	40020088 	.word	0x40020088
 802ee00:	400200a0 	.word	0x400200a0
 802ee04:	400200b8 	.word	0x400200b8
 802ee08:	40020410 	.word	0x40020410
 802ee0c:	40020428 	.word	0x40020428
 802ee10:	40020440 	.word	0x40020440
 802ee14:	40020458 	.word	0x40020458
 802ee18:	40020470 	.word	0x40020470
 802ee1c:	40020488 	.word	0x40020488
 802ee20:	400204a0 	.word	0x400204a0
 802ee24:	400204b8 	.word	0x400204b8
 802ee28:	58025408 	.word	0x58025408
 802ee2c:	5802541c 	.word	0x5802541c
 802ee30:	58025430 	.word	0x58025430
 802ee34:	58025444 	.word	0x58025444
 802ee38:	58025458 	.word	0x58025458
 802ee3c:	5802546c 	.word	0x5802546c
 802ee40:	58025480 	.word	0x58025480
 802ee44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802ee48:	693b      	ldr	r3, [r7, #16]
 802ee4a:	f003 0320 	and.w	r3, r3, #32
 802ee4e:	2b00      	cmp	r3, #0
 802ee50:	d160      	bne.n	802ef14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 802ee52:	687b      	ldr	r3, [r7, #4]
 802ee54:	681b      	ldr	r3, [r3, #0]
 802ee56:	4a7f      	ldr	r2, [pc, #508]	; (802f054 <HAL_DMA_IRQHandler+0xc74>)
 802ee58:	4293      	cmp	r3, r2
 802ee5a:	d04a      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802ee5c:	687b      	ldr	r3, [r7, #4]
 802ee5e:	681b      	ldr	r3, [r3, #0]
 802ee60:	4a7d      	ldr	r2, [pc, #500]	; (802f058 <HAL_DMA_IRQHandler+0xc78>)
 802ee62:	4293      	cmp	r3, r2
 802ee64:	d045      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802ee66:	687b      	ldr	r3, [r7, #4]
 802ee68:	681b      	ldr	r3, [r3, #0]
 802ee6a:	4a7c      	ldr	r2, [pc, #496]	; (802f05c <HAL_DMA_IRQHandler+0xc7c>)
 802ee6c:	4293      	cmp	r3, r2
 802ee6e:	d040      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802ee70:	687b      	ldr	r3, [r7, #4]
 802ee72:	681b      	ldr	r3, [r3, #0]
 802ee74:	4a7a      	ldr	r2, [pc, #488]	; (802f060 <HAL_DMA_IRQHandler+0xc80>)
 802ee76:	4293      	cmp	r3, r2
 802ee78:	d03b      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802ee7a:	687b      	ldr	r3, [r7, #4]
 802ee7c:	681b      	ldr	r3, [r3, #0]
 802ee7e:	4a79      	ldr	r2, [pc, #484]	; (802f064 <HAL_DMA_IRQHandler+0xc84>)
 802ee80:	4293      	cmp	r3, r2
 802ee82:	d036      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802ee84:	687b      	ldr	r3, [r7, #4]
 802ee86:	681b      	ldr	r3, [r3, #0]
 802ee88:	4a77      	ldr	r2, [pc, #476]	; (802f068 <HAL_DMA_IRQHandler+0xc88>)
 802ee8a:	4293      	cmp	r3, r2
 802ee8c:	d031      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802ee8e:	687b      	ldr	r3, [r7, #4]
 802ee90:	681b      	ldr	r3, [r3, #0]
 802ee92:	4a76      	ldr	r2, [pc, #472]	; (802f06c <HAL_DMA_IRQHandler+0xc8c>)
 802ee94:	4293      	cmp	r3, r2
 802ee96:	d02c      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802ee98:	687b      	ldr	r3, [r7, #4]
 802ee9a:	681b      	ldr	r3, [r3, #0]
 802ee9c:	4a74      	ldr	r2, [pc, #464]	; (802f070 <HAL_DMA_IRQHandler+0xc90>)
 802ee9e:	4293      	cmp	r3, r2
 802eea0:	d027      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802eea2:	687b      	ldr	r3, [r7, #4]
 802eea4:	681b      	ldr	r3, [r3, #0]
 802eea6:	4a73      	ldr	r2, [pc, #460]	; (802f074 <HAL_DMA_IRQHandler+0xc94>)
 802eea8:	4293      	cmp	r3, r2
 802eeaa:	d022      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802eeac:	687b      	ldr	r3, [r7, #4]
 802eeae:	681b      	ldr	r3, [r3, #0]
 802eeb0:	4a71      	ldr	r2, [pc, #452]	; (802f078 <HAL_DMA_IRQHandler+0xc98>)
 802eeb2:	4293      	cmp	r3, r2
 802eeb4:	d01d      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802eeb6:	687b      	ldr	r3, [r7, #4]
 802eeb8:	681b      	ldr	r3, [r3, #0]
 802eeba:	4a70      	ldr	r2, [pc, #448]	; (802f07c <HAL_DMA_IRQHandler+0xc9c>)
 802eebc:	4293      	cmp	r3, r2
 802eebe:	d018      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802eec0:	687b      	ldr	r3, [r7, #4]
 802eec2:	681b      	ldr	r3, [r3, #0]
 802eec4:	4a6e      	ldr	r2, [pc, #440]	; (802f080 <HAL_DMA_IRQHandler+0xca0>)
 802eec6:	4293      	cmp	r3, r2
 802eec8:	d013      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802eeca:	687b      	ldr	r3, [r7, #4]
 802eecc:	681b      	ldr	r3, [r3, #0]
 802eece:	4a6d      	ldr	r2, [pc, #436]	; (802f084 <HAL_DMA_IRQHandler+0xca4>)
 802eed0:	4293      	cmp	r3, r2
 802eed2:	d00e      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802eed4:	687b      	ldr	r3, [r7, #4]
 802eed6:	681b      	ldr	r3, [r3, #0]
 802eed8:	4a6b      	ldr	r2, [pc, #428]	; (802f088 <HAL_DMA_IRQHandler+0xca8>)
 802eeda:	4293      	cmp	r3, r2
 802eedc:	d009      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802eede:	687b      	ldr	r3, [r7, #4]
 802eee0:	681b      	ldr	r3, [r3, #0]
 802eee2:	4a6a      	ldr	r2, [pc, #424]	; (802f08c <HAL_DMA_IRQHandler+0xcac>)
 802eee4:	4293      	cmp	r3, r2
 802eee6:	d004      	beq.n	802eef2 <HAL_DMA_IRQHandler+0xb12>
 802eee8:	687b      	ldr	r3, [r7, #4]
 802eeea:	681b      	ldr	r3, [r3, #0]
 802eeec:	4a68      	ldr	r2, [pc, #416]	; (802f090 <HAL_DMA_IRQHandler+0xcb0>)
 802eeee:	4293      	cmp	r3, r2
 802eef0:	d108      	bne.n	802ef04 <HAL_DMA_IRQHandler+0xb24>
 802eef2:	687b      	ldr	r3, [r7, #4]
 802eef4:	681b      	ldr	r3, [r3, #0]
 802eef6:	681a      	ldr	r2, [r3, #0]
 802eef8:	687b      	ldr	r3, [r7, #4]
 802eefa:	681b      	ldr	r3, [r3, #0]
 802eefc:	f022 0208 	bic.w	r2, r2, #8
 802ef00:	601a      	str	r2, [r3, #0]
 802ef02:	e007      	b.n	802ef14 <HAL_DMA_IRQHandler+0xb34>
 802ef04:	687b      	ldr	r3, [r7, #4]
 802ef06:	681b      	ldr	r3, [r3, #0]
 802ef08:	681a      	ldr	r2, [r3, #0]
 802ef0a:	687b      	ldr	r3, [r7, #4]
 802ef0c:	681b      	ldr	r3, [r3, #0]
 802ef0e:	f022 0204 	bic.w	r2, r2, #4
 802ef12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 802ef14:	687b      	ldr	r3, [r7, #4]
 802ef16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ef18:	2b00      	cmp	r3, #0
 802ef1a:	f000 8165 	beq.w	802f1e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802ef1e:	687b      	ldr	r3, [r7, #4]
 802ef20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ef22:	6878      	ldr	r0, [r7, #4]
 802ef24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802ef26:	e15f      	b.n	802f1e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 802ef28:	687b      	ldr	r3, [r7, #4]
 802ef2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ef2c:	f003 031f 	and.w	r3, r3, #31
 802ef30:	2202      	movs	r2, #2
 802ef32:	409a      	lsls	r2, r3
 802ef34:	697b      	ldr	r3, [r7, #20]
 802ef36:	4013      	ands	r3, r2
 802ef38:	2b00      	cmp	r3, #0
 802ef3a:	f000 80c5 	beq.w	802f0c8 <HAL_DMA_IRQHandler+0xce8>
 802ef3e:	693b      	ldr	r3, [r7, #16]
 802ef40:	f003 0302 	and.w	r3, r3, #2
 802ef44:	2b00      	cmp	r3, #0
 802ef46:	f000 80bf 	beq.w	802f0c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 802ef4a:	687b      	ldr	r3, [r7, #4]
 802ef4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ef4e:	f003 031f 	and.w	r3, r3, #31
 802ef52:	2202      	movs	r2, #2
 802ef54:	409a      	lsls	r2, r3
 802ef56:	69fb      	ldr	r3, [r7, #28]
 802ef58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802ef5a:	693b      	ldr	r3, [r7, #16]
 802ef5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802ef60:	2b00      	cmp	r3, #0
 802ef62:	d018      	beq.n	802ef96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802ef64:	693b      	ldr	r3, [r7, #16]
 802ef66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802ef6a:	2b00      	cmp	r3, #0
 802ef6c:	d109      	bne.n	802ef82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802ef6e:	687b      	ldr	r3, [r7, #4]
 802ef70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ef72:	2b00      	cmp	r3, #0
 802ef74:	f000 813a 	beq.w	802f1ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 802ef78:	687b      	ldr	r3, [r7, #4]
 802ef7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ef7c:	6878      	ldr	r0, [r7, #4]
 802ef7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802ef80:	e134      	b.n	802f1ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802ef82:	687b      	ldr	r3, [r7, #4]
 802ef84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef86:	2b00      	cmp	r3, #0
 802ef88:	f000 8130 	beq.w	802f1ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 802ef8c:	687b      	ldr	r3, [r7, #4]
 802ef8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef90:	6878      	ldr	r0, [r7, #4]
 802ef92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802ef94:	e12a      	b.n	802f1ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802ef96:	693b      	ldr	r3, [r7, #16]
 802ef98:	f003 0320 	and.w	r3, r3, #32
 802ef9c:	2b00      	cmp	r3, #0
 802ef9e:	f040 8089 	bne.w	802f0b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 802efa2:	687b      	ldr	r3, [r7, #4]
 802efa4:	681b      	ldr	r3, [r3, #0]
 802efa6:	4a2b      	ldr	r2, [pc, #172]	; (802f054 <HAL_DMA_IRQHandler+0xc74>)
 802efa8:	4293      	cmp	r3, r2
 802efaa:	d04a      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802efac:	687b      	ldr	r3, [r7, #4]
 802efae:	681b      	ldr	r3, [r3, #0]
 802efb0:	4a29      	ldr	r2, [pc, #164]	; (802f058 <HAL_DMA_IRQHandler+0xc78>)
 802efb2:	4293      	cmp	r3, r2
 802efb4:	d045      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802efb6:	687b      	ldr	r3, [r7, #4]
 802efb8:	681b      	ldr	r3, [r3, #0]
 802efba:	4a28      	ldr	r2, [pc, #160]	; (802f05c <HAL_DMA_IRQHandler+0xc7c>)
 802efbc:	4293      	cmp	r3, r2
 802efbe:	d040      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802efc0:	687b      	ldr	r3, [r7, #4]
 802efc2:	681b      	ldr	r3, [r3, #0]
 802efc4:	4a26      	ldr	r2, [pc, #152]	; (802f060 <HAL_DMA_IRQHandler+0xc80>)
 802efc6:	4293      	cmp	r3, r2
 802efc8:	d03b      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802efca:	687b      	ldr	r3, [r7, #4]
 802efcc:	681b      	ldr	r3, [r3, #0]
 802efce:	4a25      	ldr	r2, [pc, #148]	; (802f064 <HAL_DMA_IRQHandler+0xc84>)
 802efd0:	4293      	cmp	r3, r2
 802efd2:	d036      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802efd4:	687b      	ldr	r3, [r7, #4]
 802efd6:	681b      	ldr	r3, [r3, #0]
 802efd8:	4a23      	ldr	r2, [pc, #140]	; (802f068 <HAL_DMA_IRQHandler+0xc88>)
 802efda:	4293      	cmp	r3, r2
 802efdc:	d031      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802efde:	687b      	ldr	r3, [r7, #4]
 802efe0:	681b      	ldr	r3, [r3, #0]
 802efe2:	4a22      	ldr	r2, [pc, #136]	; (802f06c <HAL_DMA_IRQHandler+0xc8c>)
 802efe4:	4293      	cmp	r3, r2
 802efe6:	d02c      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802efe8:	687b      	ldr	r3, [r7, #4]
 802efea:	681b      	ldr	r3, [r3, #0]
 802efec:	4a20      	ldr	r2, [pc, #128]	; (802f070 <HAL_DMA_IRQHandler+0xc90>)
 802efee:	4293      	cmp	r3, r2
 802eff0:	d027      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802eff2:	687b      	ldr	r3, [r7, #4]
 802eff4:	681b      	ldr	r3, [r3, #0]
 802eff6:	4a1f      	ldr	r2, [pc, #124]	; (802f074 <HAL_DMA_IRQHandler+0xc94>)
 802eff8:	4293      	cmp	r3, r2
 802effa:	d022      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802effc:	687b      	ldr	r3, [r7, #4]
 802effe:	681b      	ldr	r3, [r3, #0]
 802f000:	4a1d      	ldr	r2, [pc, #116]	; (802f078 <HAL_DMA_IRQHandler+0xc98>)
 802f002:	4293      	cmp	r3, r2
 802f004:	d01d      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802f006:	687b      	ldr	r3, [r7, #4]
 802f008:	681b      	ldr	r3, [r3, #0]
 802f00a:	4a1c      	ldr	r2, [pc, #112]	; (802f07c <HAL_DMA_IRQHandler+0xc9c>)
 802f00c:	4293      	cmp	r3, r2
 802f00e:	d018      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802f010:	687b      	ldr	r3, [r7, #4]
 802f012:	681b      	ldr	r3, [r3, #0]
 802f014:	4a1a      	ldr	r2, [pc, #104]	; (802f080 <HAL_DMA_IRQHandler+0xca0>)
 802f016:	4293      	cmp	r3, r2
 802f018:	d013      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802f01a:	687b      	ldr	r3, [r7, #4]
 802f01c:	681b      	ldr	r3, [r3, #0]
 802f01e:	4a19      	ldr	r2, [pc, #100]	; (802f084 <HAL_DMA_IRQHandler+0xca4>)
 802f020:	4293      	cmp	r3, r2
 802f022:	d00e      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802f024:	687b      	ldr	r3, [r7, #4]
 802f026:	681b      	ldr	r3, [r3, #0]
 802f028:	4a17      	ldr	r2, [pc, #92]	; (802f088 <HAL_DMA_IRQHandler+0xca8>)
 802f02a:	4293      	cmp	r3, r2
 802f02c:	d009      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802f02e:	687b      	ldr	r3, [r7, #4]
 802f030:	681b      	ldr	r3, [r3, #0]
 802f032:	4a16      	ldr	r2, [pc, #88]	; (802f08c <HAL_DMA_IRQHandler+0xcac>)
 802f034:	4293      	cmp	r3, r2
 802f036:	d004      	beq.n	802f042 <HAL_DMA_IRQHandler+0xc62>
 802f038:	687b      	ldr	r3, [r7, #4]
 802f03a:	681b      	ldr	r3, [r3, #0]
 802f03c:	4a14      	ldr	r2, [pc, #80]	; (802f090 <HAL_DMA_IRQHandler+0xcb0>)
 802f03e:	4293      	cmp	r3, r2
 802f040:	d128      	bne.n	802f094 <HAL_DMA_IRQHandler+0xcb4>
 802f042:	687b      	ldr	r3, [r7, #4]
 802f044:	681b      	ldr	r3, [r3, #0]
 802f046:	681a      	ldr	r2, [r3, #0]
 802f048:	687b      	ldr	r3, [r7, #4]
 802f04a:	681b      	ldr	r3, [r3, #0]
 802f04c:	f022 0214 	bic.w	r2, r2, #20
 802f050:	601a      	str	r2, [r3, #0]
 802f052:	e027      	b.n	802f0a4 <HAL_DMA_IRQHandler+0xcc4>
 802f054:	40020010 	.word	0x40020010
 802f058:	40020028 	.word	0x40020028
 802f05c:	40020040 	.word	0x40020040
 802f060:	40020058 	.word	0x40020058
 802f064:	40020070 	.word	0x40020070
 802f068:	40020088 	.word	0x40020088
 802f06c:	400200a0 	.word	0x400200a0
 802f070:	400200b8 	.word	0x400200b8
 802f074:	40020410 	.word	0x40020410
 802f078:	40020428 	.word	0x40020428
 802f07c:	40020440 	.word	0x40020440
 802f080:	40020458 	.word	0x40020458
 802f084:	40020470 	.word	0x40020470
 802f088:	40020488 	.word	0x40020488
 802f08c:	400204a0 	.word	0x400204a0
 802f090:	400204b8 	.word	0x400204b8
 802f094:	687b      	ldr	r3, [r7, #4]
 802f096:	681b      	ldr	r3, [r3, #0]
 802f098:	681a      	ldr	r2, [r3, #0]
 802f09a:	687b      	ldr	r3, [r7, #4]
 802f09c:	681b      	ldr	r3, [r3, #0]
 802f09e:	f022 020a 	bic.w	r2, r2, #10
 802f0a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802f0a4:	687b      	ldr	r3, [r7, #4]
 802f0a6:	2201      	movs	r2, #1
 802f0a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802f0ac:	687b      	ldr	r3, [r7, #4]
 802f0ae:	2200      	movs	r2, #0
 802f0b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 802f0b4:	687b      	ldr	r3, [r7, #4]
 802f0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f0b8:	2b00      	cmp	r3, #0
 802f0ba:	f000 8097 	beq.w	802f1ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802f0be:	687b      	ldr	r3, [r7, #4]
 802f0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f0c2:	6878      	ldr	r0, [r7, #4]
 802f0c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802f0c6:	e091      	b.n	802f1ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 802f0c8:	687b      	ldr	r3, [r7, #4]
 802f0ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f0cc:	f003 031f 	and.w	r3, r3, #31
 802f0d0:	2208      	movs	r2, #8
 802f0d2:	409a      	lsls	r2, r3
 802f0d4:	697b      	ldr	r3, [r7, #20]
 802f0d6:	4013      	ands	r3, r2
 802f0d8:	2b00      	cmp	r3, #0
 802f0da:	f000 8088 	beq.w	802f1ee <HAL_DMA_IRQHandler+0xe0e>
 802f0de:	693b      	ldr	r3, [r7, #16]
 802f0e0:	f003 0308 	and.w	r3, r3, #8
 802f0e4:	2b00      	cmp	r3, #0
 802f0e6:	f000 8082 	beq.w	802f1ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 802f0ea:	687b      	ldr	r3, [r7, #4]
 802f0ec:	681b      	ldr	r3, [r3, #0]
 802f0ee:	4a41      	ldr	r2, [pc, #260]	; (802f1f4 <HAL_DMA_IRQHandler+0xe14>)
 802f0f0:	4293      	cmp	r3, r2
 802f0f2:	d04a      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f0f4:	687b      	ldr	r3, [r7, #4]
 802f0f6:	681b      	ldr	r3, [r3, #0]
 802f0f8:	4a3f      	ldr	r2, [pc, #252]	; (802f1f8 <HAL_DMA_IRQHandler+0xe18>)
 802f0fa:	4293      	cmp	r3, r2
 802f0fc:	d045      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f0fe:	687b      	ldr	r3, [r7, #4]
 802f100:	681b      	ldr	r3, [r3, #0]
 802f102:	4a3e      	ldr	r2, [pc, #248]	; (802f1fc <HAL_DMA_IRQHandler+0xe1c>)
 802f104:	4293      	cmp	r3, r2
 802f106:	d040      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f108:	687b      	ldr	r3, [r7, #4]
 802f10a:	681b      	ldr	r3, [r3, #0]
 802f10c:	4a3c      	ldr	r2, [pc, #240]	; (802f200 <HAL_DMA_IRQHandler+0xe20>)
 802f10e:	4293      	cmp	r3, r2
 802f110:	d03b      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f112:	687b      	ldr	r3, [r7, #4]
 802f114:	681b      	ldr	r3, [r3, #0]
 802f116:	4a3b      	ldr	r2, [pc, #236]	; (802f204 <HAL_DMA_IRQHandler+0xe24>)
 802f118:	4293      	cmp	r3, r2
 802f11a:	d036      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f11c:	687b      	ldr	r3, [r7, #4]
 802f11e:	681b      	ldr	r3, [r3, #0]
 802f120:	4a39      	ldr	r2, [pc, #228]	; (802f208 <HAL_DMA_IRQHandler+0xe28>)
 802f122:	4293      	cmp	r3, r2
 802f124:	d031      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f126:	687b      	ldr	r3, [r7, #4]
 802f128:	681b      	ldr	r3, [r3, #0]
 802f12a:	4a38      	ldr	r2, [pc, #224]	; (802f20c <HAL_DMA_IRQHandler+0xe2c>)
 802f12c:	4293      	cmp	r3, r2
 802f12e:	d02c      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f130:	687b      	ldr	r3, [r7, #4]
 802f132:	681b      	ldr	r3, [r3, #0]
 802f134:	4a36      	ldr	r2, [pc, #216]	; (802f210 <HAL_DMA_IRQHandler+0xe30>)
 802f136:	4293      	cmp	r3, r2
 802f138:	d027      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f13a:	687b      	ldr	r3, [r7, #4]
 802f13c:	681b      	ldr	r3, [r3, #0]
 802f13e:	4a35      	ldr	r2, [pc, #212]	; (802f214 <HAL_DMA_IRQHandler+0xe34>)
 802f140:	4293      	cmp	r3, r2
 802f142:	d022      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f144:	687b      	ldr	r3, [r7, #4]
 802f146:	681b      	ldr	r3, [r3, #0]
 802f148:	4a33      	ldr	r2, [pc, #204]	; (802f218 <HAL_DMA_IRQHandler+0xe38>)
 802f14a:	4293      	cmp	r3, r2
 802f14c:	d01d      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f14e:	687b      	ldr	r3, [r7, #4]
 802f150:	681b      	ldr	r3, [r3, #0]
 802f152:	4a32      	ldr	r2, [pc, #200]	; (802f21c <HAL_DMA_IRQHandler+0xe3c>)
 802f154:	4293      	cmp	r3, r2
 802f156:	d018      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f158:	687b      	ldr	r3, [r7, #4]
 802f15a:	681b      	ldr	r3, [r3, #0]
 802f15c:	4a30      	ldr	r2, [pc, #192]	; (802f220 <HAL_DMA_IRQHandler+0xe40>)
 802f15e:	4293      	cmp	r3, r2
 802f160:	d013      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f162:	687b      	ldr	r3, [r7, #4]
 802f164:	681b      	ldr	r3, [r3, #0]
 802f166:	4a2f      	ldr	r2, [pc, #188]	; (802f224 <HAL_DMA_IRQHandler+0xe44>)
 802f168:	4293      	cmp	r3, r2
 802f16a:	d00e      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f16c:	687b      	ldr	r3, [r7, #4]
 802f16e:	681b      	ldr	r3, [r3, #0]
 802f170:	4a2d      	ldr	r2, [pc, #180]	; (802f228 <HAL_DMA_IRQHandler+0xe48>)
 802f172:	4293      	cmp	r3, r2
 802f174:	d009      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f176:	687b      	ldr	r3, [r7, #4]
 802f178:	681b      	ldr	r3, [r3, #0]
 802f17a:	4a2c      	ldr	r2, [pc, #176]	; (802f22c <HAL_DMA_IRQHandler+0xe4c>)
 802f17c:	4293      	cmp	r3, r2
 802f17e:	d004      	beq.n	802f18a <HAL_DMA_IRQHandler+0xdaa>
 802f180:	687b      	ldr	r3, [r7, #4]
 802f182:	681b      	ldr	r3, [r3, #0]
 802f184:	4a2a      	ldr	r2, [pc, #168]	; (802f230 <HAL_DMA_IRQHandler+0xe50>)
 802f186:	4293      	cmp	r3, r2
 802f188:	d108      	bne.n	802f19c <HAL_DMA_IRQHandler+0xdbc>
 802f18a:	687b      	ldr	r3, [r7, #4]
 802f18c:	681b      	ldr	r3, [r3, #0]
 802f18e:	681a      	ldr	r2, [r3, #0]
 802f190:	687b      	ldr	r3, [r7, #4]
 802f192:	681b      	ldr	r3, [r3, #0]
 802f194:	f022 021c 	bic.w	r2, r2, #28
 802f198:	601a      	str	r2, [r3, #0]
 802f19a:	e007      	b.n	802f1ac <HAL_DMA_IRQHandler+0xdcc>
 802f19c:	687b      	ldr	r3, [r7, #4]
 802f19e:	681b      	ldr	r3, [r3, #0]
 802f1a0:	681a      	ldr	r2, [r3, #0]
 802f1a2:	687b      	ldr	r3, [r7, #4]
 802f1a4:	681b      	ldr	r3, [r3, #0]
 802f1a6:	f022 020e 	bic.w	r2, r2, #14
 802f1aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802f1ac:	687b      	ldr	r3, [r7, #4]
 802f1ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f1b0:	f003 031f 	and.w	r3, r3, #31
 802f1b4:	2201      	movs	r2, #1
 802f1b6:	409a      	lsls	r2, r3
 802f1b8:	69fb      	ldr	r3, [r7, #28]
 802f1ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 802f1bc:	687b      	ldr	r3, [r7, #4]
 802f1be:	2201      	movs	r2, #1
 802f1c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802f1c2:	687b      	ldr	r3, [r7, #4]
 802f1c4:	2201      	movs	r2, #1
 802f1c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802f1ca:	687b      	ldr	r3, [r7, #4]
 802f1cc:	2200      	movs	r2, #0
 802f1ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 802f1d2:	687b      	ldr	r3, [r7, #4]
 802f1d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802f1d6:	2b00      	cmp	r3, #0
 802f1d8:	d009      	beq.n	802f1ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802f1da:	687b      	ldr	r3, [r7, #4]
 802f1dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802f1de:	6878      	ldr	r0, [r7, #4]
 802f1e0:	4798      	blx	r3
 802f1e2:	e004      	b.n	802f1ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 802f1e4:	bf00      	nop
 802f1e6:	e002      	b.n	802f1ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802f1e8:	bf00      	nop
 802f1ea:	e000      	b.n	802f1ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802f1ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 802f1ee:	3728      	adds	r7, #40	; 0x28
 802f1f0:	46bd      	mov	sp, r7
 802f1f2:	bd80      	pop	{r7, pc}
 802f1f4:	40020010 	.word	0x40020010
 802f1f8:	40020028 	.word	0x40020028
 802f1fc:	40020040 	.word	0x40020040
 802f200:	40020058 	.word	0x40020058
 802f204:	40020070 	.word	0x40020070
 802f208:	40020088 	.word	0x40020088
 802f20c:	400200a0 	.word	0x400200a0
 802f210:	400200b8 	.word	0x400200b8
 802f214:	40020410 	.word	0x40020410
 802f218:	40020428 	.word	0x40020428
 802f21c:	40020440 	.word	0x40020440
 802f220:	40020458 	.word	0x40020458
 802f224:	40020470 	.word	0x40020470
 802f228:	40020488 	.word	0x40020488
 802f22c:	400204a0 	.word	0x400204a0
 802f230:	400204b8 	.word	0x400204b8

0802f234 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 802f234:	b480      	push	{r7}
 802f236:	b083      	sub	sp, #12
 802f238:	af00      	add	r7, sp, #0
 802f23a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 802f23c:	687b      	ldr	r3, [r7, #4]
 802f23e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802f242:	b2db      	uxtb	r3, r3
}
 802f244:	4618      	mov	r0, r3
 802f246:	370c      	adds	r7, #12
 802f248:	46bd      	mov	sp, r7
 802f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f24e:	4770      	bx	lr

0802f250 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 802f250:	b480      	push	{r7}
 802f252:	b083      	sub	sp, #12
 802f254:	af00      	add	r7, sp, #0
 802f256:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 802f258:	687b      	ldr	r3, [r7, #4]
 802f25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 802f25c:	4618      	mov	r0, r3
 802f25e:	370c      	adds	r7, #12
 802f260:	46bd      	mov	sp, r7
 802f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f266:	4770      	bx	lr

0802f268 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802f268:	b480      	push	{r7}
 802f26a:	b087      	sub	sp, #28
 802f26c:	af00      	add	r7, sp, #0
 802f26e:	60f8      	str	r0, [r7, #12]
 802f270:	60b9      	str	r1, [r7, #8]
 802f272:	607a      	str	r2, [r7, #4]
 802f274:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802f276:	68fb      	ldr	r3, [r7, #12]
 802f278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f27a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802f27c:	68fb      	ldr	r3, [r7, #12]
 802f27e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802f280:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802f282:	68fb      	ldr	r3, [r7, #12]
 802f284:	681b      	ldr	r3, [r3, #0]
 802f286:	4a7f      	ldr	r2, [pc, #508]	; (802f484 <DMA_SetConfig+0x21c>)
 802f288:	4293      	cmp	r3, r2
 802f28a:	d072      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f28c:	68fb      	ldr	r3, [r7, #12]
 802f28e:	681b      	ldr	r3, [r3, #0]
 802f290:	4a7d      	ldr	r2, [pc, #500]	; (802f488 <DMA_SetConfig+0x220>)
 802f292:	4293      	cmp	r3, r2
 802f294:	d06d      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f296:	68fb      	ldr	r3, [r7, #12]
 802f298:	681b      	ldr	r3, [r3, #0]
 802f29a:	4a7c      	ldr	r2, [pc, #496]	; (802f48c <DMA_SetConfig+0x224>)
 802f29c:	4293      	cmp	r3, r2
 802f29e:	d068      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f2a0:	68fb      	ldr	r3, [r7, #12]
 802f2a2:	681b      	ldr	r3, [r3, #0]
 802f2a4:	4a7a      	ldr	r2, [pc, #488]	; (802f490 <DMA_SetConfig+0x228>)
 802f2a6:	4293      	cmp	r3, r2
 802f2a8:	d063      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f2aa:	68fb      	ldr	r3, [r7, #12]
 802f2ac:	681b      	ldr	r3, [r3, #0]
 802f2ae:	4a79      	ldr	r2, [pc, #484]	; (802f494 <DMA_SetConfig+0x22c>)
 802f2b0:	4293      	cmp	r3, r2
 802f2b2:	d05e      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f2b4:	68fb      	ldr	r3, [r7, #12]
 802f2b6:	681b      	ldr	r3, [r3, #0]
 802f2b8:	4a77      	ldr	r2, [pc, #476]	; (802f498 <DMA_SetConfig+0x230>)
 802f2ba:	4293      	cmp	r3, r2
 802f2bc:	d059      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f2be:	68fb      	ldr	r3, [r7, #12]
 802f2c0:	681b      	ldr	r3, [r3, #0]
 802f2c2:	4a76      	ldr	r2, [pc, #472]	; (802f49c <DMA_SetConfig+0x234>)
 802f2c4:	4293      	cmp	r3, r2
 802f2c6:	d054      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f2c8:	68fb      	ldr	r3, [r7, #12]
 802f2ca:	681b      	ldr	r3, [r3, #0]
 802f2cc:	4a74      	ldr	r2, [pc, #464]	; (802f4a0 <DMA_SetConfig+0x238>)
 802f2ce:	4293      	cmp	r3, r2
 802f2d0:	d04f      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f2d2:	68fb      	ldr	r3, [r7, #12]
 802f2d4:	681b      	ldr	r3, [r3, #0]
 802f2d6:	4a73      	ldr	r2, [pc, #460]	; (802f4a4 <DMA_SetConfig+0x23c>)
 802f2d8:	4293      	cmp	r3, r2
 802f2da:	d04a      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f2dc:	68fb      	ldr	r3, [r7, #12]
 802f2de:	681b      	ldr	r3, [r3, #0]
 802f2e0:	4a71      	ldr	r2, [pc, #452]	; (802f4a8 <DMA_SetConfig+0x240>)
 802f2e2:	4293      	cmp	r3, r2
 802f2e4:	d045      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f2e6:	68fb      	ldr	r3, [r7, #12]
 802f2e8:	681b      	ldr	r3, [r3, #0]
 802f2ea:	4a70      	ldr	r2, [pc, #448]	; (802f4ac <DMA_SetConfig+0x244>)
 802f2ec:	4293      	cmp	r3, r2
 802f2ee:	d040      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f2f0:	68fb      	ldr	r3, [r7, #12]
 802f2f2:	681b      	ldr	r3, [r3, #0]
 802f2f4:	4a6e      	ldr	r2, [pc, #440]	; (802f4b0 <DMA_SetConfig+0x248>)
 802f2f6:	4293      	cmp	r3, r2
 802f2f8:	d03b      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f2fa:	68fb      	ldr	r3, [r7, #12]
 802f2fc:	681b      	ldr	r3, [r3, #0]
 802f2fe:	4a6d      	ldr	r2, [pc, #436]	; (802f4b4 <DMA_SetConfig+0x24c>)
 802f300:	4293      	cmp	r3, r2
 802f302:	d036      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f304:	68fb      	ldr	r3, [r7, #12]
 802f306:	681b      	ldr	r3, [r3, #0]
 802f308:	4a6b      	ldr	r2, [pc, #428]	; (802f4b8 <DMA_SetConfig+0x250>)
 802f30a:	4293      	cmp	r3, r2
 802f30c:	d031      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f30e:	68fb      	ldr	r3, [r7, #12]
 802f310:	681b      	ldr	r3, [r3, #0]
 802f312:	4a6a      	ldr	r2, [pc, #424]	; (802f4bc <DMA_SetConfig+0x254>)
 802f314:	4293      	cmp	r3, r2
 802f316:	d02c      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f318:	68fb      	ldr	r3, [r7, #12]
 802f31a:	681b      	ldr	r3, [r3, #0]
 802f31c:	4a68      	ldr	r2, [pc, #416]	; (802f4c0 <DMA_SetConfig+0x258>)
 802f31e:	4293      	cmp	r3, r2
 802f320:	d027      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f322:	68fb      	ldr	r3, [r7, #12]
 802f324:	681b      	ldr	r3, [r3, #0]
 802f326:	4a67      	ldr	r2, [pc, #412]	; (802f4c4 <DMA_SetConfig+0x25c>)
 802f328:	4293      	cmp	r3, r2
 802f32a:	d022      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f32c:	68fb      	ldr	r3, [r7, #12]
 802f32e:	681b      	ldr	r3, [r3, #0]
 802f330:	4a65      	ldr	r2, [pc, #404]	; (802f4c8 <DMA_SetConfig+0x260>)
 802f332:	4293      	cmp	r3, r2
 802f334:	d01d      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f336:	68fb      	ldr	r3, [r7, #12]
 802f338:	681b      	ldr	r3, [r3, #0]
 802f33a:	4a64      	ldr	r2, [pc, #400]	; (802f4cc <DMA_SetConfig+0x264>)
 802f33c:	4293      	cmp	r3, r2
 802f33e:	d018      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f340:	68fb      	ldr	r3, [r7, #12]
 802f342:	681b      	ldr	r3, [r3, #0]
 802f344:	4a62      	ldr	r2, [pc, #392]	; (802f4d0 <DMA_SetConfig+0x268>)
 802f346:	4293      	cmp	r3, r2
 802f348:	d013      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f34a:	68fb      	ldr	r3, [r7, #12]
 802f34c:	681b      	ldr	r3, [r3, #0]
 802f34e:	4a61      	ldr	r2, [pc, #388]	; (802f4d4 <DMA_SetConfig+0x26c>)
 802f350:	4293      	cmp	r3, r2
 802f352:	d00e      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f354:	68fb      	ldr	r3, [r7, #12]
 802f356:	681b      	ldr	r3, [r3, #0]
 802f358:	4a5f      	ldr	r2, [pc, #380]	; (802f4d8 <DMA_SetConfig+0x270>)
 802f35a:	4293      	cmp	r3, r2
 802f35c:	d009      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f35e:	68fb      	ldr	r3, [r7, #12]
 802f360:	681b      	ldr	r3, [r3, #0]
 802f362:	4a5e      	ldr	r2, [pc, #376]	; (802f4dc <DMA_SetConfig+0x274>)
 802f364:	4293      	cmp	r3, r2
 802f366:	d004      	beq.n	802f372 <DMA_SetConfig+0x10a>
 802f368:	68fb      	ldr	r3, [r7, #12]
 802f36a:	681b      	ldr	r3, [r3, #0]
 802f36c:	4a5c      	ldr	r2, [pc, #368]	; (802f4e0 <DMA_SetConfig+0x278>)
 802f36e:	4293      	cmp	r3, r2
 802f370:	d101      	bne.n	802f376 <DMA_SetConfig+0x10e>
 802f372:	2301      	movs	r3, #1
 802f374:	e000      	b.n	802f378 <DMA_SetConfig+0x110>
 802f376:	2300      	movs	r3, #0
 802f378:	2b00      	cmp	r3, #0
 802f37a:	d00d      	beq.n	802f398 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802f37c:	68fb      	ldr	r3, [r7, #12]
 802f37e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802f380:	68fa      	ldr	r2, [r7, #12]
 802f382:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802f384:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 802f386:	68fb      	ldr	r3, [r7, #12]
 802f388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f38a:	2b00      	cmp	r3, #0
 802f38c:	d004      	beq.n	802f398 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802f38e:	68fb      	ldr	r3, [r7, #12]
 802f390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802f392:	68fa      	ldr	r2, [r7, #12]
 802f394:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802f396:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802f398:	68fb      	ldr	r3, [r7, #12]
 802f39a:	681b      	ldr	r3, [r3, #0]
 802f39c:	4a39      	ldr	r2, [pc, #228]	; (802f484 <DMA_SetConfig+0x21c>)
 802f39e:	4293      	cmp	r3, r2
 802f3a0:	d04a      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f3a2:	68fb      	ldr	r3, [r7, #12]
 802f3a4:	681b      	ldr	r3, [r3, #0]
 802f3a6:	4a38      	ldr	r2, [pc, #224]	; (802f488 <DMA_SetConfig+0x220>)
 802f3a8:	4293      	cmp	r3, r2
 802f3aa:	d045      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f3ac:	68fb      	ldr	r3, [r7, #12]
 802f3ae:	681b      	ldr	r3, [r3, #0]
 802f3b0:	4a36      	ldr	r2, [pc, #216]	; (802f48c <DMA_SetConfig+0x224>)
 802f3b2:	4293      	cmp	r3, r2
 802f3b4:	d040      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f3b6:	68fb      	ldr	r3, [r7, #12]
 802f3b8:	681b      	ldr	r3, [r3, #0]
 802f3ba:	4a35      	ldr	r2, [pc, #212]	; (802f490 <DMA_SetConfig+0x228>)
 802f3bc:	4293      	cmp	r3, r2
 802f3be:	d03b      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f3c0:	68fb      	ldr	r3, [r7, #12]
 802f3c2:	681b      	ldr	r3, [r3, #0]
 802f3c4:	4a33      	ldr	r2, [pc, #204]	; (802f494 <DMA_SetConfig+0x22c>)
 802f3c6:	4293      	cmp	r3, r2
 802f3c8:	d036      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f3ca:	68fb      	ldr	r3, [r7, #12]
 802f3cc:	681b      	ldr	r3, [r3, #0]
 802f3ce:	4a32      	ldr	r2, [pc, #200]	; (802f498 <DMA_SetConfig+0x230>)
 802f3d0:	4293      	cmp	r3, r2
 802f3d2:	d031      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f3d4:	68fb      	ldr	r3, [r7, #12]
 802f3d6:	681b      	ldr	r3, [r3, #0]
 802f3d8:	4a30      	ldr	r2, [pc, #192]	; (802f49c <DMA_SetConfig+0x234>)
 802f3da:	4293      	cmp	r3, r2
 802f3dc:	d02c      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f3de:	68fb      	ldr	r3, [r7, #12]
 802f3e0:	681b      	ldr	r3, [r3, #0]
 802f3e2:	4a2f      	ldr	r2, [pc, #188]	; (802f4a0 <DMA_SetConfig+0x238>)
 802f3e4:	4293      	cmp	r3, r2
 802f3e6:	d027      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f3e8:	68fb      	ldr	r3, [r7, #12]
 802f3ea:	681b      	ldr	r3, [r3, #0]
 802f3ec:	4a2d      	ldr	r2, [pc, #180]	; (802f4a4 <DMA_SetConfig+0x23c>)
 802f3ee:	4293      	cmp	r3, r2
 802f3f0:	d022      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f3f2:	68fb      	ldr	r3, [r7, #12]
 802f3f4:	681b      	ldr	r3, [r3, #0]
 802f3f6:	4a2c      	ldr	r2, [pc, #176]	; (802f4a8 <DMA_SetConfig+0x240>)
 802f3f8:	4293      	cmp	r3, r2
 802f3fa:	d01d      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f3fc:	68fb      	ldr	r3, [r7, #12]
 802f3fe:	681b      	ldr	r3, [r3, #0]
 802f400:	4a2a      	ldr	r2, [pc, #168]	; (802f4ac <DMA_SetConfig+0x244>)
 802f402:	4293      	cmp	r3, r2
 802f404:	d018      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f406:	68fb      	ldr	r3, [r7, #12]
 802f408:	681b      	ldr	r3, [r3, #0]
 802f40a:	4a29      	ldr	r2, [pc, #164]	; (802f4b0 <DMA_SetConfig+0x248>)
 802f40c:	4293      	cmp	r3, r2
 802f40e:	d013      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f410:	68fb      	ldr	r3, [r7, #12]
 802f412:	681b      	ldr	r3, [r3, #0]
 802f414:	4a27      	ldr	r2, [pc, #156]	; (802f4b4 <DMA_SetConfig+0x24c>)
 802f416:	4293      	cmp	r3, r2
 802f418:	d00e      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f41a:	68fb      	ldr	r3, [r7, #12]
 802f41c:	681b      	ldr	r3, [r3, #0]
 802f41e:	4a26      	ldr	r2, [pc, #152]	; (802f4b8 <DMA_SetConfig+0x250>)
 802f420:	4293      	cmp	r3, r2
 802f422:	d009      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f424:	68fb      	ldr	r3, [r7, #12]
 802f426:	681b      	ldr	r3, [r3, #0]
 802f428:	4a24      	ldr	r2, [pc, #144]	; (802f4bc <DMA_SetConfig+0x254>)
 802f42a:	4293      	cmp	r3, r2
 802f42c:	d004      	beq.n	802f438 <DMA_SetConfig+0x1d0>
 802f42e:	68fb      	ldr	r3, [r7, #12]
 802f430:	681b      	ldr	r3, [r3, #0]
 802f432:	4a23      	ldr	r2, [pc, #140]	; (802f4c0 <DMA_SetConfig+0x258>)
 802f434:	4293      	cmp	r3, r2
 802f436:	d101      	bne.n	802f43c <DMA_SetConfig+0x1d4>
 802f438:	2301      	movs	r3, #1
 802f43a:	e000      	b.n	802f43e <DMA_SetConfig+0x1d6>
 802f43c:	2300      	movs	r3, #0
 802f43e:	2b00      	cmp	r3, #0
 802f440:	d059      	beq.n	802f4f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802f442:	68fb      	ldr	r3, [r7, #12]
 802f444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f446:	f003 031f 	and.w	r3, r3, #31
 802f44a:	223f      	movs	r2, #63	; 0x3f
 802f44c:	409a      	lsls	r2, r3
 802f44e:	697b      	ldr	r3, [r7, #20]
 802f450:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802f452:	68fb      	ldr	r3, [r7, #12]
 802f454:	681b      	ldr	r3, [r3, #0]
 802f456:	681a      	ldr	r2, [r3, #0]
 802f458:	68fb      	ldr	r3, [r7, #12]
 802f45a:	681b      	ldr	r3, [r3, #0]
 802f45c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802f460:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 802f462:	68fb      	ldr	r3, [r7, #12]
 802f464:	681b      	ldr	r3, [r3, #0]
 802f466:	683a      	ldr	r2, [r7, #0]
 802f468:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802f46a:	68fb      	ldr	r3, [r7, #12]
 802f46c:	689b      	ldr	r3, [r3, #8]
 802f46e:	2b40      	cmp	r3, #64	; 0x40
 802f470:	d138      	bne.n	802f4e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 802f472:	68fb      	ldr	r3, [r7, #12]
 802f474:	681b      	ldr	r3, [r3, #0]
 802f476:	687a      	ldr	r2, [r7, #4]
 802f478:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 802f47a:	68fb      	ldr	r3, [r7, #12]
 802f47c:	681b      	ldr	r3, [r3, #0]
 802f47e:	68ba      	ldr	r2, [r7, #8]
 802f480:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 802f482:	e086      	b.n	802f592 <DMA_SetConfig+0x32a>
 802f484:	40020010 	.word	0x40020010
 802f488:	40020028 	.word	0x40020028
 802f48c:	40020040 	.word	0x40020040
 802f490:	40020058 	.word	0x40020058
 802f494:	40020070 	.word	0x40020070
 802f498:	40020088 	.word	0x40020088
 802f49c:	400200a0 	.word	0x400200a0
 802f4a0:	400200b8 	.word	0x400200b8
 802f4a4:	40020410 	.word	0x40020410
 802f4a8:	40020428 	.word	0x40020428
 802f4ac:	40020440 	.word	0x40020440
 802f4b0:	40020458 	.word	0x40020458
 802f4b4:	40020470 	.word	0x40020470
 802f4b8:	40020488 	.word	0x40020488
 802f4bc:	400204a0 	.word	0x400204a0
 802f4c0:	400204b8 	.word	0x400204b8
 802f4c4:	58025408 	.word	0x58025408
 802f4c8:	5802541c 	.word	0x5802541c
 802f4cc:	58025430 	.word	0x58025430
 802f4d0:	58025444 	.word	0x58025444
 802f4d4:	58025458 	.word	0x58025458
 802f4d8:	5802546c 	.word	0x5802546c
 802f4dc:	58025480 	.word	0x58025480
 802f4e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 802f4e4:	68fb      	ldr	r3, [r7, #12]
 802f4e6:	681b      	ldr	r3, [r3, #0]
 802f4e8:	68ba      	ldr	r2, [r7, #8]
 802f4ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 802f4ec:	68fb      	ldr	r3, [r7, #12]
 802f4ee:	681b      	ldr	r3, [r3, #0]
 802f4f0:	687a      	ldr	r2, [r7, #4]
 802f4f2:	60da      	str	r2, [r3, #12]
}
 802f4f4:	e04d      	b.n	802f592 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802f4f6:	68fb      	ldr	r3, [r7, #12]
 802f4f8:	681b      	ldr	r3, [r3, #0]
 802f4fa:	4a29      	ldr	r2, [pc, #164]	; (802f5a0 <DMA_SetConfig+0x338>)
 802f4fc:	4293      	cmp	r3, r2
 802f4fe:	d022      	beq.n	802f546 <DMA_SetConfig+0x2de>
 802f500:	68fb      	ldr	r3, [r7, #12]
 802f502:	681b      	ldr	r3, [r3, #0]
 802f504:	4a27      	ldr	r2, [pc, #156]	; (802f5a4 <DMA_SetConfig+0x33c>)
 802f506:	4293      	cmp	r3, r2
 802f508:	d01d      	beq.n	802f546 <DMA_SetConfig+0x2de>
 802f50a:	68fb      	ldr	r3, [r7, #12]
 802f50c:	681b      	ldr	r3, [r3, #0]
 802f50e:	4a26      	ldr	r2, [pc, #152]	; (802f5a8 <DMA_SetConfig+0x340>)
 802f510:	4293      	cmp	r3, r2
 802f512:	d018      	beq.n	802f546 <DMA_SetConfig+0x2de>
 802f514:	68fb      	ldr	r3, [r7, #12]
 802f516:	681b      	ldr	r3, [r3, #0]
 802f518:	4a24      	ldr	r2, [pc, #144]	; (802f5ac <DMA_SetConfig+0x344>)
 802f51a:	4293      	cmp	r3, r2
 802f51c:	d013      	beq.n	802f546 <DMA_SetConfig+0x2de>
 802f51e:	68fb      	ldr	r3, [r7, #12]
 802f520:	681b      	ldr	r3, [r3, #0]
 802f522:	4a23      	ldr	r2, [pc, #140]	; (802f5b0 <DMA_SetConfig+0x348>)
 802f524:	4293      	cmp	r3, r2
 802f526:	d00e      	beq.n	802f546 <DMA_SetConfig+0x2de>
 802f528:	68fb      	ldr	r3, [r7, #12]
 802f52a:	681b      	ldr	r3, [r3, #0]
 802f52c:	4a21      	ldr	r2, [pc, #132]	; (802f5b4 <DMA_SetConfig+0x34c>)
 802f52e:	4293      	cmp	r3, r2
 802f530:	d009      	beq.n	802f546 <DMA_SetConfig+0x2de>
 802f532:	68fb      	ldr	r3, [r7, #12]
 802f534:	681b      	ldr	r3, [r3, #0]
 802f536:	4a20      	ldr	r2, [pc, #128]	; (802f5b8 <DMA_SetConfig+0x350>)
 802f538:	4293      	cmp	r3, r2
 802f53a:	d004      	beq.n	802f546 <DMA_SetConfig+0x2de>
 802f53c:	68fb      	ldr	r3, [r7, #12]
 802f53e:	681b      	ldr	r3, [r3, #0]
 802f540:	4a1e      	ldr	r2, [pc, #120]	; (802f5bc <DMA_SetConfig+0x354>)
 802f542:	4293      	cmp	r3, r2
 802f544:	d101      	bne.n	802f54a <DMA_SetConfig+0x2e2>
 802f546:	2301      	movs	r3, #1
 802f548:	e000      	b.n	802f54c <DMA_SetConfig+0x2e4>
 802f54a:	2300      	movs	r3, #0
 802f54c:	2b00      	cmp	r3, #0
 802f54e:	d020      	beq.n	802f592 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802f550:	68fb      	ldr	r3, [r7, #12]
 802f552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f554:	f003 031f 	and.w	r3, r3, #31
 802f558:	2201      	movs	r2, #1
 802f55a:	409a      	lsls	r2, r3
 802f55c:	693b      	ldr	r3, [r7, #16]
 802f55e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 802f560:	68fb      	ldr	r3, [r7, #12]
 802f562:	681b      	ldr	r3, [r3, #0]
 802f564:	683a      	ldr	r2, [r7, #0]
 802f566:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802f568:	68fb      	ldr	r3, [r7, #12]
 802f56a:	689b      	ldr	r3, [r3, #8]
 802f56c:	2b40      	cmp	r3, #64	; 0x40
 802f56e:	d108      	bne.n	802f582 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 802f570:	68fb      	ldr	r3, [r7, #12]
 802f572:	681b      	ldr	r3, [r3, #0]
 802f574:	687a      	ldr	r2, [r7, #4]
 802f576:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 802f578:	68fb      	ldr	r3, [r7, #12]
 802f57a:	681b      	ldr	r3, [r3, #0]
 802f57c:	68ba      	ldr	r2, [r7, #8]
 802f57e:	60da      	str	r2, [r3, #12]
}
 802f580:	e007      	b.n	802f592 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 802f582:	68fb      	ldr	r3, [r7, #12]
 802f584:	681b      	ldr	r3, [r3, #0]
 802f586:	68ba      	ldr	r2, [r7, #8]
 802f588:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 802f58a:	68fb      	ldr	r3, [r7, #12]
 802f58c:	681b      	ldr	r3, [r3, #0]
 802f58e:	687a      	ldr	r2, [r7, #4]
 802f590:	60da      	str	r2, [r3, #12]
}
 802f592:	bf00      	nop
 802f594:	371c      	adds	r7, #28
 802f596:	46bd      	mov	sp, r7
 802f598:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f59c:	4770      	bx	lr
 802f59e:	bf00      	nop
 802f5a0:	58025408 	.word	0x58025408
 802f5a4:	5802541c 	.word	0x5802541c
 802f5a8:	58025430 	.word	0x58025430
 802f5ac:	58025444 	.word	0x58025444
 802f5b0:	58025458 	.word	0x58025458
 802f5b4:	5802546c 	.word	0x5802546c
 802f5b8:	58025480 	.word	0x58025480
 802f5bc:	58025494 	.word	0x58025494

0802f5c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802f5c0:	b480      	push	{r7}
 802f5c2:	b085      	sub	sp, #20
 802f5c4:	af00      	add	r7, sp, #0
 802f5c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802f5c8:	687b      	ldr	r3, [r7, #4]
 802f5ca:	681b      	ldr	r3, [r3, #0]
 802f5cc:	4a42      	ldr	r2, [pc, #264]	; (802f6d8 <DMA_CalcBaseAndBitshift+0x118>)
 802f5ce:	4293      	cmp	r3, r2
 802f5d0:	d04a      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f5d2:	687b      	ldr	r3, [r7, #4]
 802f5d4:	681b      	ldr	r3, [r3, #0]
 802f5d6:	4a41      	ldr	r2, [pc, #260]	; (802f6dc <DMA_CalcBaseAndBitshift+0x11c>)
 802f5d8:	4293      	cmp	r3, r2
 802f5da:	d045      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f5dc:	687b      	ldr	r3, [r7, #4]
 802f5de:	681b      	ldr	r3, [r3, #0]
 802f5e0:	4a3f      	ldr	r2, [pc, #252]	; (802f6e0 <DMA_CalcBaseAndBitshift+0x120>)
 802f5e2:	4293      	cmp	r3, r2
 802f5e4:	d040      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f5e6:	687b      	ldr	r3, [r7, #4]
 802f5e8:	681b      	ldr	r3, [r3, #0]
 802f5ea:	4a3e      	ldr	r2, [pc, #248]	; (802f6e4 <DMA_CalcBaseAndBitshift+0x124>)
 802f5ec:	4293      	cmp	r3, r2
 802f5ee:	d03b      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f5f0:	687b      	ldr	r3, [r7, #4]
 802f5f2:	681b      	ldr	r3, [r3, #0]
 802f5f4:	4a3c      	ldr	r2, [pc, #240]	; (802f6e8 <DMA_CalcBaseAndBitshift+0x128>)
 802f5f6:	4293      	cmp	r3, r2
 802f5f8:	d036      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f5fa:	687b      	ldr	r3, [r7, #4]
 802f5fc:	681b      	ldr	r3, [r3, #0]
 802f5fe:	4a3b      	ldr	r2, [pc, #236]	; (802f6ec <DMA_CalcBaseAndBitshift+0x12c>)
 802f600:	4293      	cmp	r3, r2
 802f602:	d031      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f604:	687b      	ldr	r3, [r7, #4]
 802f606:	681b      	ldr	r3, [r3, #0]
 802f608:	4a39      	ldr	r2, [pc, #228]	; (802f6f0 <DMA_CalcBaseAndBitshift+0x130>)
 802f60a:	4293      	cmp	r3, r2
 802f60c:	d02c      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f60e:	687b      	ldr	r3, [r7, #4]
 802f610:	681b      	ldr	r3, [r3, #0]
 802f612:	4a38      	ldr	r2, [pc, #224]	; (802f6f4 <DMA_CalcBaseAndBitshift+0x134>)
 802f614:	4293      	cmp	r3, r2
 802f616:	d027      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f618:	687b      	ldr	r3, [r7, #4]
 802f61a:	681b      	ldr	r3, [r3, #0]
 802f61c:	4a36      	ldr	r2, [pc, #216]	; (802f6f8 <DMA_CalcBaseAndBitshift+0x138>)
 802f61e:	4293      	cmp	r3, r2
 802f620:	d022      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f622:	687b      	ldr	r3, [r7, #4]
 802f624:	681b      	ldr	r3, [r3, #0]
 802f626:	4a35      	ldr	r2, [pc, #212]	; (802f6fc <DMA_CalcBaseAndBitshift+0x13c>)
 802f628:	4293      	cmp	r3, r2
 802f62a:	d01d      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f62c:	687b      	ldr	r3, [r7, #4]
 802f62e:	681b      	ldr	r3, [r3, #0]
 802f630:	4a33      	ldr	r2, [pc, #204]	; (802f700 <DMA_CalcBaseAndBitshift+0x140>)
 802f632:	4293      	cmp	r3, r2
 802f634:	d018      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f636:	687b      	ldr	r3, [r7, #4]
 802f638:	681b      	ldr	r3, [r3, #0]
 802f63a:	4a32      	ldr	r2, [pc, #200]	; (802f704 <DMA_CalcBaseAndBitshift+0x144>)
 802f63c:	4293      	cmp	r3, r2
 802f63e:	d013      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f640:	687b      	ldr	r3, [r7, #4]
 802f642:	681b      	ldr	r3, [r3, #0]
 802f644:	4a30      	ldr	r2, [pc, #192]	; (802f708 <DMA_CalcBaseAndBitshift+0x148>)
 802f646:	4293      	cmp	r3, r2
 802f648:	d00e      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f64a:	687b      	ldr	r3, [r7, #4]
 802f64c:	681b      	ldr	r3, [r3, #0]
 802f64e:	4a2f      	ldr	r2, [pc, #188]	; (802f70c <DMA_CalcBaseAndBitshift+0x14c>)
 802f650:	4293      	cmp	r3, r2
 802f652:	d009      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f654:	687b      	ldr	r3, [r7, #4]
 802f656:	681b      	ldr	r3, [r3, #0]
 802f658:	4a2d      	ldr	r2, [pc, #180]	; (802f710 <DMA_CalcBaseAndBitshift+0x150>)
 802f65a:	4293      	cmp	r3, r2
 802f65c:	d004      	beq.n	802f668 <DMA_CalcBaseAndBitshift+0xa8>
 802f65e:	687b      	ldr	r3, [r7, #4]
 802f660:	681b      	ldr	r3, [r3, #0]
 802f662:	4a2c      	ldr	r2, [pc, #176]	; (802f714 <DMA_CalcBaseAndBitshift+0x154>)
 802f664:	4293      	cmp	r3, r2
 802f666:	d101      	bne.n	802f66c <DMA_CalcBaseAndBitshift+0xac>
 802f668:	2301      	movs	r3, #1
 802f66a:	e000      	b.n	802f66e <DMA_CalcBaseAndBitshift+0xae>
 802f66c:	2300      	movs	r3, #0
 802f66e:	2b00      	cmp	r3, #0
 802f670:	d024      	beq.n	802f6bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802f672:	687b      	ldr	r3, [r7, #4]
 802f674:	681b      	ldr	r3, [r3, #0]
 802f676:	b2db      	uxtb	r3, r3
 802f678:	3b10      	subs	r3, #16
 802f67a:	4a27      	ldr	r2, [pc, #156]	; (802f718 <DMA_CalcBaseAndBitshift+0x158>)
 802f67c:	fba2 2303 	umull	r2, r3, r2, r3
 802f680:	091b      	lsrs	r3, r3, #4
 802f682:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 802f684:	68fb      	ldr	r3, [r7, #12]
 802f686:	f003 0307 	and.w	r3, r3, #7
 802f68a:	4a24      	ldr	r2, [pc, #144]	; (802f71c <DMA_CalcBaseAndBitshift+0x15c>)
 802f68c:	5cd3      	ldrb	r3, [r2, r3]
 802f68e:	461a      	mov	r2, r3
 802f690:	687b      	ldr	r3, [r7, #4]
 802f692:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 802f694:	68fb      	ldr	r3, [r7, #12]
 802f696:	2b03      	cmp	r3, #3
 802f698:	d908      	bls.n	802f6ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 802f69a:	687b      	ldr	r3, [r7, #4]
 802f69c:	681b      	ldr	r3, [r3, #0]
 802f69e:	461a      	mov	r2, r3
 802f6a0:	4b1f      	ldr	r3, [pc, #124]	; (802f720 <DMA_CalcBaseAndBitshift+0x160>)
 802f6a2:	4013      	ands	r3, r2
 802f6a4:	1d1a      	adds	r2, r3, #4
 802f6a6:	687b      	ldr	r3, [r7, #4]
 802f6a8:	659a      	str	r2, [r3, #88]	; 0x58
 802f6aa:	e00d      	b.n	802f6c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 802f6ac:	687b      	ldr	r3, [r7, #4]
 802f6ae:	681b      	ldr	r3, [r3, #0]
 802f6b0:	461a      	mov	r2, r3
 802f6b2:	4b1b      	ldr	r3, [pc, #108]	; (802f720 <DMA_CalcBaseAndBitshift+0x160>)
 802f6b4:	4013      	ands	r3, r2
 802f6b6:	687a      	ldr	r2, [r7, #4]
 802f6b8:	6593      	str	r3, [r2, #88]	; 0x58
 802f6ba:	e005      	b.n	802f6c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 802f6bc:	687b      	ldr	r3, [r7, #4]
 802f6be:	681b      	ldr	r3, [r3, #0]
 802f6c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802f6c4:	687b      	ldr	r3, [r7, #4]
 802f6c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 802f6c8:	687b      	ldr	r3, [r7, #4]
 802f6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 802f6cc:	4618      	mov	r0, r3
 802f6ce:	3714      	adds	r7, #20
 802f6d0:	46bd      	mov	sp, r7
 802f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f6d6:	4770      	bx	lr
 802f6d8:	40020010 	.word	0x40020010
 802f6dc:	40020028 	.word	0x40020028
 802f6e0:	40020040 	.word	0x40020040
 802f6e4:	40020058 	.word	0x40020058
 802f6e8:	40020070 	.word	0x40020070
 802f6ec:	40020088 	.word	0x40020088
 802f6f0:	400200a0 	.word	0x400200a0
 802f6f4:	400200b8 	.word	0x400200b8
 802f6f8:	40020410 	.word	0x40020410
 802f6fc:	40020428 	.word	0x40020428
 802f700:	40020440 	.word	0x40020440
 802f704:	40020458 	.word	0x40020458
 802f708:	40020470 	.word	0x40020470
 802f70c:	40020488 	.word	0x40020488
 802f710:	400204a0 	.word	0x400204a0
 802f714:	400204b8 	.word	0x400204b8
 802f718:	aaaaaaab 	.word	0xaaaaaaab
 802f71c:	08059578 	.word	0x08059578
 802f720:	fffffc00 	.word	0xfffffc00

0802f724 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802f724:	b480      	push	{r7}
 802f726:	b085      	sub	sp, #20
 802f728:	af00      	add	r7, sp, #0
 802f72a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802f72c:	2300      	movs	r3, #0
 802f72e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802f730:	687b      	ldr	r3, [r7, #4]
 802f732:	699b      	ldr	r3, [r3, #24]
 802f734:	2b00      	cmp	r3, #0
 802f736:	d120      	bne.n	802f77a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 802f738:	687b      	ldr	r3, [r7, #4]
 802f73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f73c:	2b03      	cmp	r3, #3
 802f73e:	d858      	bhi.n	802f7f2 <DMA_CheckFifoParam+0xce>
 802f740:	a201      	add	r2, pc, #4	; (adr r2, 802f748 <DMA_CheckFifoParam+0x24>)
 802f742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f746:	bf00      	nop
 802f748:	0802f759 	.word	0x0802f759
 802f74c:	0802f76b 	.word	0x0802f76b
 802f750:	0802f759 	.word	0x0802f759
 802f754:	0802f7f3 	.word	0x0802f7f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802f758:	687b      	ldr	r3, [r7, #4]
 802f75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f75c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802f760:	2b00      	cmp	r3, #0
 802f762:	d048      	beq.n	802f7f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 802f764:	2301      	movs	r3, #1
 802f766:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802f768:	e045      	b.n	802f7f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802f76a:	687b      	ldr	r3, [r7, #4]
 802f76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f76e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802f772:	d142      	bne.n	802f7fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 802f774:	2301      	movs	r3, #1
 802f776:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802f778:	e03f      	b.n	802f7fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802f77a:	687b      	ldr	r3, [r7, #4]
 802f77c:	699b      	ldr	r3, [r3, #24]
 802f77e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802f782:	d123      	bne.n	802f7cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 802f784:	687b      	ldr	r3, [r7, #4]
 802f786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f788:	2b03      	cmp	r3, #3
 802f78a:	d838      	bhi.n	802f7fe <DMA_CheckFifoParam+0xda>
 802f78c:	a201      	add	r2, pc, #4	; (adr r2, 802f794 <DMA_CheckFifoParam+0x70>)
 802f78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f792:	bf00      	nop
 802f794:	0802f7a5 	.word	0x0802f7a5
 802f798:	0802f7ab 	.word	0x0802f7ab
 802f79c:	0802f7a5 	.word	0x0802f7a5
 802f7a0:	0802f7bd 	.word	0x0802f7bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 802f7a4:	2301      	movs	r3, #1
 802f7a6:	73fb      	strb	r3, [r7, #15]
        break;
 802f7a8:	e030      	b.n	802f80c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802f7aa:	687b      	ldr	r3, [r7, #4]
 802f7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f7ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802f7b2:	2b00      	cmp	r3, #0
 802f7b4:	d025      	beq.n	802f802 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 802f7b6:	2301      	movs	r3, #1
 802f7b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802f7ba:	e022      	b.n	802f802 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802f7bc:	687b      	ldr	r3, [r7, #4]
 802f7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f7c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802f7c4:	d11f      	bne.n	802f806 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 802f7c6:	2301      	movs	r3, #1
 802f7c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802f7ca:	e01c      	b.n	802f806 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 802f7cc:	687b      	ldr	r3, [r7, #4]
 802f7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f7d0:	2b02      	cmp	r3, #2
 802f7d2:	d902      	bls.n	802f7da <DMA_CheckFifoParam+0xb6>
 802f7d4:	2b03      	cmp	r3, #3
 802f7d6:	d003      	beq.n	802f7e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 802f7d8:	e018      	b.n	802f80c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 802f7da:	2301      	movs	r3, #1
 802f7dc:	73fb      	strb	r3, [r7, #15]
        break;
 802f7de:	e015      	b.n	802f80c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802f7e0:	687b      	ldr	r3, [r7, #4]
 802f7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f7e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802f7e8:	2b00      	cmp	r3, #0
 802f7ea:	d00e      	beq.n	802f80a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 802f7ec:	2301      	movs	r3, #1
 802f7ee:	73fb      	strb	r3, [r7, #15]
    break;
 802f7f0:	e00b      	b.n	802f80a <DMA_CheckFifoParam+0xe6>
        break;
 802f7f2:	bf00      	nop
 802f7f4:	e00a      	b.n	802f80c <DMA_CheckFifoParam+0xe8>
        break;
 802f7f6:	bf00      	nop
 802f7f8:	e008      	b.n	802f80c <DMA_CheckFifoParam+0xe8>
        break;
 802f7fa:	bf00      	nop
 802f7fc:	e006      	b.n	802f80c <DMA_CheckFifoParam+0xe8>
        break;
 802f7fe:	bf00      	nop
 802f800:	e004      	b.n	802f80c <DMA_CheckFifoParam+0xe8>
        break;
 802f802:	bf00      	nop
 802f804:	e002      	b.n	802f80c <DMA_CheckFifoParam+0xe8>
        break;
 802f806:	bf00      	nop
 802f808:	e000      	b.n	802f80c <DMA_CheckFifoParam+0xe8>
    break;
 802f80a:	bf00      	nop
    }
  }

  return status;
 802f80c:	7bfb      	ldrb	r3, [r7, #15]
}
 802f80e:	4618      	mov	r0, r3
 802f810:	3714      	adds	r7, #20
 802f812:	46bd      	mov	sp, r7
 802f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f818:	4770      	bx	lr
 802f81a:	bf00      	nop

0802f81c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802f81c:	b480      	push	{r7}
 802f81e:	b085      	sub	sp, #20
 802f820:	af00      	add	r7, sp, #0
 802f822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 802f824:	687b      	ldr	r3, [r7, #4]
 802f826:	681b      	ldr	r3, [r3, #0]
 802f828:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802f82a:	687b      	ldr	r3, [r7, #4]
 802f82c:	681b      	ldr	r3, [r3, #0]
 802f82e:	4a38      	ldr	r2, [pc, #224]	; (802f910 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 802f830:	4293      	cmp	r3, r2
 802f832:	d022      	beq.n	802f87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f834:	687b      	ldr	r3, [r7, #4]
 802f836:	681b      	ldr	r3, [r3, #0]
 802f838:	4a36      	ldr	r2, [pc, #216]	; (802f914 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 802f83a:	4293      	cmp	r3, r2
 802f83c:	d01d      	beq.n	802f87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f83e:	687b      	ldr	r3, [r7, #4]
 802f840:	681b      	ldr	r3, [r3, #0]
 802f842:	4a35      	ldr	r2, [pc, #212]	; (802f918 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 802f844:	4293      	cmp	r3, r2
 802f846:	d018      	beq.n	802f87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f848:	687b      	ldr	r3, [r7, #4]
 802f84a:	681b      	ldr	r3, [r3, #0]
 802f84c:	4a33      	ldr	r2, [pc, #204]	; (802f91c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 802f84e:	4293      	cmp	r3, r2
 802f850:	d013      	beq.n	802f87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f852:	687b      	ldr	r3, [r7, #4]
 802f854:	681b      	ldr	r3, [r3, #0]
 802f856:	4a32      	ldr	r2, [pc, #200]	; (802f920 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 802f858:	4293      	cmp	r3, r2
 802f85a:	d00e      	beq.n	802f87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f85c:	687b      	ldr	r3, [r7, #4]
 802f85e:	681b      	ldr	r3, [r3, #0]
 802f860:	4a30      	ldr	r2, [pc, #192]	; (802f924 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 802f862:	4293      	cmp	r3, r2
 802f864:	d009      	beq.n	802f87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f866:	687b      	ldr	r3, [r7, #4]
 802f868:	681b      	ldr	r3, [r3, #0]
 802f86a:	4a2f      	ldr	r2, [pc, #188]	; (802f928 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 802f86c:	4293      	cmp	r3, r2
 802f86e:	d004      	beq.n	802f87a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802f870:	687b      	ldr	r3, [r7, #4]
 802f872:	681b      	ldr	r3, [r3, #0]
 802f874:	4a2d      	ldr	r2, [pc, #180]	; (802f92c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 802f876:	4293      	cmp	r3, r2
 802f878:	d101      	bne.n	802f87e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 802f87a:	2301      	movs	r3, #1
 802f87c:	e000      	b.n	802f880 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 802f87e:	2300      	movs	r3, #0
 802f880:	2b00      	cmp	r3, #0
 802f882:	d01a      	beq.n	802f8ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 802f884:	687b      	ldr	r3, [r7, #4]
 802f886:	681b      	ldr	r3, [r3, #0]
 802f888:	b2db      	uxtb	r3, r3
 802f88a:	3b08      	subs	r3, #8
 802f88c:	4a28      	ldr	r2, [pc, #160]	; (802f930 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 802f88e:	fba2 2303 	umull	r2, r3, r2, r3
 802f892:	091b      	lsrs	r3, r3, #4
 802f894:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 802f896:	68fa      	ldr	r2, [r7, #12]
 802f898:	4b26      	ldr	r3, [pc, #152]	; (802f934 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 802f89a:	4413      	add	r3, r2
 802f89c:	009b      	lsls	r3, r3, #2
 802f89e:	461a      	mov	r2, r3
 802f8a0:	687b      	ldr	r3, [r7, #4]
 802f8a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 802f8a4:	687b      	ldr	r3, [r7, #4]
 802f8a6:	4a24      	ldr	r2, [pc, #144]	; (802f938 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 802f8a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802f8aa:	68fb      	ldr	r3, [r7, #12]
 802f8ac:	f003 031f 	and.w	r3, r3, #31
 802f8b0:	2201      	movs	r2, #1
 802f8b2:	409a      	lsls	r2, r3
 802f8b4:	687b      	ldr	r3, [r7, #4]
 802f8b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 802f8b8:	e024      	b.n	802f904 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802f8ba:	687b      	ldr	r3, [r7, #4]
 802f8bc:	681b      	ldr	r3, [r3, #0]
 802f8be:	b2db      	uxtb	r3, r3
 802f8c0:	3b10      	subs	r3, #16
 802f8c2:	4a1e      	ldr	r2, [pc, #120]	; (802f93c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 802f8c4:	fba2 2303 	umull	r2, r3, r2, r3
 802f8c8:	091b      	lsrs	r3, r3, #4
 802f8ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 802f8cc:	68bb      	ldr	r3, [r7, #8]
 802f8ce:	4a1c      	ldr	r2, [pc, #112]	; (802f940 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 802f8d0:	4293      	cmp	r3, r2
 802f8d2:	d806      	bhi.n	802f8e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 802f8d4:	68bb      	ldr	r3, [r7, #8]
 802f8d6:	4a1b      	ldr	r2, [pc, #108]	; (802f944 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 802f8d8:	4293      	cmp	r3, r2
 802f8da:	d902      	bls.n	802f8e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 802f8dc:	68fb      	ldr	r3, [r7, #12]
 802f8de:	3308      	adds	r3, #8
 802f8e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 802f8e2:	68fa      	ldr	r2, [r7, #12]
 802f8e4:	4b18      	ldr	r3, [pc, #96]	; (802f948 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 802f8e6:	4413      	add	r3, r2
 802f8e8:	009b      	lsls	r3, r3, #2
 802f8ea:	461a      	mov	r2, r3
 802f8ec:	687b      	ldr	r3, [r7, #4]
 802f8ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 802f8f0:	687b      	ldr	r3, [r7, #4]
 802f8f2:	4a16      	ldr	r2, [pc, #88]	; (802f94c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 802f8f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802f8f6:	68fb      	ldr	r3, [r7, #12]
 802f8f8:	f003 031f 	and.w	r3, r3, #31
 802f8fc:	2201      	movs	r2, #1
 802f8fe:	409a      	lsls	r2, r3
 802f900:	687b      	ldr	r3, [r7, #4]
 802f902:	669a      	str	r2, [r3, #104]	; 0x68
}
 802f904:	bf00      	nop
 802f906:	3714      	adds	r7, #20
 802f908:	46bd      	mov	sp, r7
 802f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f90e:	4770      	bx	lr
 802f910:	58025408 	.word	0x58025408
 802f914:	5802541c 	.word	0x5802541c
 802f918:	58025430 	.word	0x58025430
 802f91c:	58025444 	.word	0x58025444
 802f920:	58025458 	.word	0x58025458
 802f924:	5802546c 	.word	0x5802546c
 802f928:	58025480 	.word	0x58025480
 802f92c:	58025494 	.word	0x58025494
 802f930:	cccccccd 	.word	0xcccccccd
 802f934:	16009600 	.word	0x16009600
 802f938:	58025880 	.word	0x58025880
 802f93c:	aaaaaaab 	.word	0xaaaaaaab
 802f940:	400204b8 	.word	0x400204b8
 802f944:	4002040f 	.word	0x4002040f
 802f948:	10008200 	.word	0x10008200
 802f94c:	40020880 	.word	0x40020880

0802f950 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802f950:	b480      	push	{r7}
 802f952:	b085      	sub	sp, #20
 802f954:	af00      	add	r7, sp, #0
 802f956:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 802f958:	687b      	ldr	r3, [r7, #4]
 802f95a:	685b      	ldr	r3, [r3, #4]
 802f95c:	b2db      	uxtb	r3, r3
 802f95e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 802f960:	68fb      	ldr	r3, [r7, #12]
 802f962:	2b00      	cmp	r3, #0
 802f964:	d04a      	beq.n	802f9fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 802f966:	68fb      	ldr	r3, [r7, #12]
 802f968:	2b08      	cmp	r3, #8
 802f96a:	d847      	bhi.n	802f9fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802f96c:	687b      	ldr	r3, [r7, #4]
 802f96e:	681b      	ldr	r3, [r3, #0]
 802f970:	4a25      	ldr	r2, [pc, #148]	; (802fa08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 802f972:	4293      	cmp	r3, r2
 802f974:	d022      	beq.n	802f9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f976:	687b      	ldr	r3, [r7, #4]
 802f978:	681b      	ldr	r3, [r3, #0]
 802f97a:	4a24      	ldr	r2, [pc, #144]	; (802fa0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 802f97c:	4293      	cmp	r3, r2
 802f97e:	d01d      	beq.n	802f9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f980:	687b      	ldr	r3, [r7, #4]
 802f982:	681b      	ldr	r3, [r3, #0]
 802f984:	4a22      	ldr	r2, [pc, #136]	; (802fa10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 802f986:	4293      	cmp	r3, r2
 802f988:	d018      	beq.n	802f9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f98a:	687b      	ldr	r3, [r7, #4]
 802f98c:	681b      	ldr	r3, [r3, #0]
 802f98e:	4a21      	ldr	r2, [pc, #132]	; (802fa14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 802f990:	4293      	cmp	r3, r2
 802f992:	d013      	beq.n	802f9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f994:	687b      	ldr	r3, [r7, #4]
 802f996:	681b      	ldr	r3, [r3, #0]
 802f998:	4a1f      	ldr	r2, [pc, #124]	; (802fa18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 802f99a:	4293      	cmp	r3, r2
 802f99c:	d00e      	beq.n	802f9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f99e:	687b      	ldr	r3, [r7, #4]
 802f9a0:	681b      	ldr	r3, [r3, #0]
 802f9a2:	4a1e      	ldr	r2, [pc, #120]	; (802fa1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 802f9a4:	4293      	cmp	r3, r2
 802f9a6:	d009      	beq.n	802f9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f9a8:	687b      	ldr	r3, [r7, #4]
 802f9aa:	681b      	ldr	r3, [r3, #0]
 802f9ac:	4a1c      	ldr	r2, [pc, #112]	; (802fa20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 802f9ae:	4293      	cmp	r3, r2
 802f9b0:	d004      	beq.n	802f9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802f9b2:	687b      	ldr	r3, [r7, #4]
 802f9b4:	681b      	ldr	r3, [r3, #0]
 802f9b6:	4a1b      	ldr	r2, [pc, #108]	; (802fa24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 802f9b8:	4293      	cmp	r3, r2
 802f9ba:	d101      	bne.n	802f9c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 802f9bc:	2301      	movs	r3, #1
 802f9be:	e000      	b.n	802f9c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 802f9c0:	2300      	movs	r3, #0
 802f9c2:	2b00      	cmp	r3, #0
 802f9c4:	d00a      	beq.n	802f9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 802f9c6:	68fa      	ldr	r2, [r7, #12]
 802f9c8:	4b17      	ldr	r3, [pc, #92]	; (802fa28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 802f9ca:	4413      	add	r3, r2
 802f9cc:	009b      	lsls	r3, r3, #2
 802f9ce:	461a      	mov	r2, r3
 802f9d0:	687b      	ldr	r3, [r7, #4]
 802f9d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 802f9d4:	687b      	ldr	r3, [r7, #4]
 802f9d6:	4a15      	ldr	r2, [pc, #84]	; (802fa2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 802f9d8:	671a      	str	r2, [r3, #112]	; 0x70
 802f9da:	e009      	b.n	802f9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 802f9dc:	68fa      	ldr	r2, [r7, #12]
 802f9de:	4b14      	ldr	r3, [pc, #80]	; (802fa30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 802f9e0:	4413      	add	r3, r2
 802f9e2:	009b      	lsls	r3, r3, #2
 802f9e4:	461a      	mov	r2, r3
 802f9e6:	687b      	ldr	r3, [r7, #4]
 802f9e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 802f9ea:	687b      	ldr	r3, [r7, #4]
 802f9ec:	4a11      	ldr	r2, [pc, #68]	; (802fa34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 802f9ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 802f9f0:	68fb      	ldr	r3, [r7, #12]
 802f9f2:	3b01      	subs	r3, #1
 802f9f4:	2201      	movs	r2, #1
 802f9f6:	409a      	lsls	r2, r3
 802f9f8:	687b      	ldr	r3, [r7, #4]
 802f9fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 802f9fc:	bf00      	nop
 802f9fe:	3714      	adds	r7, #20
 802fa00:	46bd      	mov	sp, r7
 802fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fa06:	4770      	bx	lr
 802fa08:	58025408 	.word	0x58025408
 802fa0c:	5802541c 	.word	0x5802541c
 802fa10:	58025430 	.word	0x58025430
 802fa14:	58025444 	.word	0x58025444
 802fa18:	58025458 	.word	0x58025458
 802fa1c:	5802546c 	.word	0x5802546c
 802fa20:	58025480 	.word	0x58025480
 802fa24:	58025494 	.word	0x58025494
 802fa28:	1600963f 	.word	0x1600963f
 802fa2c:	58025940 	.word	0x58025940
 802fa30:	1000823f 	.word	0x1000823f
 802fa34:	40020940 	.word	0x40020940

0802fa38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802fa38:	b480      	push	{r7}
 802fa3a:	b089      	sub	sp, #36	; 0x24
 802fa3c:	af00      	add	r7, sp, #0
 802fa3e:	6078      	str	r0, [r7, #4]
 802fa40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 802fa42:	2300      	movs	r3, #0
 802fa44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 802fa46:	4b89      	ldr	r3, [pc, #548]	; (802fc6c <HAL_GPIO_Init+0x234>)
 802fa48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802fa4a:	e194      	b.n	802fd76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 802fa4c:	683b      	ldr	r3, [r7, #0]
 802fa4e:	681a      	ldr	r2, [r3, #0]
 802fa50:	2101      	movs	r1, #1
 802fa52:	69fb      	ldr	r3, [r7, #28]
 802fa54:	fa01 f303 	lsl.w	r3, r1, r3
 802fa58:	4013      	ands	r3, r2
 802fa5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 802fa5c:	693b      	ldr	r3, [r7, #16]
 802fa5e:	2b00      	cmp	r3, #0
 802fa60:	f000 8186 	beq.w	802fd70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 802fa64:	683b      	ldr	r3, [r7, #0]
 802fa66:	685b      	ldr	r3, [r3, #4]
 802fa68:	f003 0303 	and.w	r3, r3, #3
 802fa6c:	2b01      	cmp	r3, #1
 802fa6e:	d005      	beq.n	802fa7c <HAL_GPIO_Init+0x44>
 802fa70:	683b      	ldr	r3, [r7, #0]
 802fa72:	685b      	ldr	r3, [r3, #4]
 802fa74:	f003 0303 	and.w	r3, r3, #3
 802fa78:	2b02      	cmp	r3, #2
 802fa7a:	d130      	bne.n	802fade <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 802fa7c:	687b      	ldr	r3, [r7, #4]
 802fa7e:	689b      	ldr	r3, [r3, #8]
 802fa80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 802fa82:	69fb      	ldr	r3, [r7, #28]
 802fa84:	005b      	lsls	r3, r3, #1
 802fa86:	2203      	movs	r2, #3
 802fa88:	fa02 f303 	lsl.w	r3, r2, r3
 802fa8c:	43db      	mvns	r3, r3
 802fa8e:	69ba      	ldr	r2, [r7, #24]
 802fa90:	4013      	ands	r3, r2
 802fa92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802fa94:	683b      	ldr	r3, [r7, #0]
 802fa96:	68da      	ldr	r2, [r3, #12]
 802fa98:	69fb      	ldr	r3, [r7, #28]
 802fa9a:	005b      	lsls	r3, r3, #1
 802fa9c:	fa02 f303 	lsl.w	r3, r2, r3
 802faa0:	69ba      	ldr	r2, [r7, #24]
 802faa2:	4313      	orrs	r3, r2
 802faa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802faa6:	687b      	ldr	r3, [r7, #4]
 802faa8:	69ba      	ldr	r2, [r7, #24]
 802faaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802faac:	687b      	ldr	r3, [r7, #4]
 802faae:	685b      	ldr	r3, [r3, #4]
 802fab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 802fab2:	2201      	movs	r2, #1
 802fab4:	69fb      	ldr	r3, [r7, #28]
 802fab6:	fa02 f303 	lsl.w	r3, r2, r3
 802faba:	43db      	mvns	r3, r3
 802fabc:	69ba      	ldr	r2, [r7, #24]
 802fabe:	4013      	ands	r3, r2
 802fac0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802fac2:	683b      	ldr	r3, [r7, #0]
 802fac4:	685b      	ldr	r3, [r3, #4]
 802fac6:	091b      	lsrs	r3, r3, #4
 802fac8:	f003 0201 	and.w	r2, r3, #1
 802facc:	69fb      	ldr	r3, [r7, #28]
 802face:	fa02 f303 	lsl.w	r3, r2, r3
 802fad2:	69ba      	ldr	r2, [r7, #24]
 802fad4:	4313      	orrs	r3, r2
 802fad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802fad8:	687b      	ldr	r3, [r7, #4]
 802fada:	69ba      	ldr	r2, [r7, #24]
 802fadc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802fade:	683b      	ldr	r3, [r7, #0]
 802fae0:	685b      	ldr	r3, [r3, #4]
 802fae2:	f003 0303 	and.w	r3, r3, #3
 802fae6:	2b03      	cmp	r3, #3
 802fae8:	d017      	beq.n	802fb1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802faea:	687b      	ldr	r3, [r7, #4]
 802faec:	68db      	ldr	r3, [r3, #12]
 802faee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 802faf0:	69fb      	ldr	r3, [r7, #28]
 802faf2:	005b      	lsls	r3, r3, #1
 802faf4:	2203      	movs	r2, #3
 802faf6:	fa02 f303 	lsl.w	r3, r2, r3
 802fafa:	43db      	mvns	r3, r3
 802fafc:	69ba      	ldr	r2, [r7, #24]
 802fafe:	4013      	ands	r3, r2
 802fb00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802fb02:	683b      	ldr	r3, [r7, #0]
 802fb04:	689a      	ldr	r2, [r3, #8]
 802fb06:	69fb      	ldr	r3, [r7, #28]
 802fb08:	005b      	lsls	r3, r3, #1
 802fb0a:	fa02 f303 	lsl.w	r3, r2, r3
 802fb0e:	69ba      	ldr	r2, [r7, #24]
 802fb10:	4313      	orrs	r3, r2
 802fb12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802fb14:	687b      	ldr	r3, [r7, #4]
 802fb16:	69ba      	ldr	r2, [r7, #24]
 802fb18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802fb1a:	683b      	ldr	r3, [r7, #0]
 802fb1c:	685b      	ldr	r3, [r3, #4]
 802fb1e:	f003 0303 	and.w	r3, r3, #3
 802fb22:	2b02      	cmp	r3, #2
 802fb24:	d123      	bne.n	802fb6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802fb26:	69fb      	ldr	r3, [r7, #28]
 802fb28:	08da      	lsrs	r2, r3, #3
 802fb2a:	687b      	ldr	r3, [r7, #4]
 802fb2c:	3208      	adds	r2, #8
 802fb2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fb32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 802fb34:	69fb      	ldr	r3, [r7, #28]
 802fb36:	f003 0307 	and.w	r3, r3, #7
 802fb3a:	009b      	lsls	r3, r3, #2
 802fb3c:	220f      	movs	r2, #15
 802fb3e:	fa02 f303 	lsl.w	r3, r2, r3
 802fb42:	43db      	mvns	r3, r3
 802fb44:	69ba      	ldr	r2, [r7, #24]
 802fb46:	4013      	ands	r3, r2
 802fb48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 802fb4a:	683b      	ldr	r3, [r7, #0]
 802fb4c:	691a      	ldr	r2, [r3, #16]
 802fb4e:	69fb      	ldr	r3, [r7, #28]
 802fb50:	f003 0307 	and.w	r3, r3, #7
 802fb54:	009b      	lsls	r3, r3, #2
 802fb56:	fa02 f303 	lsl.w	r3, r2, r3
 802fb5a:	69ba      	ldr	r2, [r7, #24]
 802fb5c:	4313      	orrs	r3, r2
 802fb5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802fb60:	69fb      	ldr	r3, [r7, #28]
 802fb62:	08da      	lsrs	r2, r3, #3
 802fb64:	687b      	ldr	r3, [r7, #4]
 802fb66:	3208      	adds	r2, #8
 802fb68:	69b9      	ldr	r1, [r7, #24]
 802fb6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802fb6e:	687b      	ldr	r3, [r7, #4]
 802fb70:	681b      	ldr	r3, [r3, #0]
 802fb72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 802fb74:	69fb      	ldr	r3, [r7, #28]
 802fb76:	005b      	lsls	r3, r3, #1
 802fb78:	2203      	movs	r2, #3
 802fb7a:	fa02 f303 	lsl.w	r3, r2, r3
 802fb7e:	43db      	mvns	r3, r3
 802fb80:	69ba      	ldr	r2, [r7, #24]
 802fb82:	4013      	ands	r3, r2
 802fb84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802fb86:	683b      	ldr	r3, [r7, #0]
 802fb88:	685b      	ldr	r3, [r3, #4]
 802fb8a:	f003 0203 	and.w	r2, r3, #3
 802fb8e:	69fb      	ldr	r3, [r7, #28]
 802fb90:	005b      	lsls	r3, r3, #1
 802fb92:	fa02 f303 	lsl.w	r3, r2, r3
 802fb96:	69ba      	ldr	r2, [r7, #24]
 802fb98:	4313      	orrs	r3, r2
 802fb9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802fb9c:	687b      	ldr	r3, [r7, #4]
 802fb9e:	69ba      	ldr	r2, [r7, #24]
 802fba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802fba2:	683b      	ldr	r3, [r7, #0]
 802fba4:	685b      	ldr	r3, [r3, #4]
 802fba6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802fbaa:	2b00      	cmp	r3, #0
 802fbac:	f000 80e0 	beq.w	802fd70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802fbb0:	4b2f      	ldr	r3, [pc, #188]	; (802fc70 <HAL_GPIO_Init+0x238>)
 802fbb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802fbb6:	4a2e      	ldr	r2, [pc, #184]	; (802fc70 <HAL_GPIO_Init+0x238>)
 802fbb8:	f043 0302 	orr.w	r3, r3, #2
 802fbbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802fbc0:	4b2b      	ldr	r3, [pc, #172]	; (802fc70 <HAL_GPIO_Init+0x238>)
 802fbc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802fbc6:	f003 0302 	and.w	r3, r3, #2
 802fbca:	60fb      	str	r3, [r7, #12]
 802fbcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802fbce:	4a29      	ldr	r2, [pc, #164]	; (802fc74 <HAL_GPIO_Init+0x23c>)
 802fbd0:	69fb      	ldr	r3, [r7, #28]
 802fbd2:	089b      	lsrs	r3, r3, #2
 802fbd4:	3302      	adds	r3, #2
 802fbd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802fbda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 802fbdc:	69fb      	ldr	r3, [r7, #28]
 802fbde:	f003 0303 	and.w	r3, r3, #3
 802fbe2:	009b      	lsls	r3, r3, #2
 802fbe4:	220f      	movs	r2, #15
 802fbe6:	fa02 f303 	lsl.w	r3, r2, r3
 802fbea:	43db      	mvns	r3, r3
 802fbec:	69ba      	ldr	r2, [r7, #24]
 802fbee:	4013      	ands	r3, r2
 802fbf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 802fbf2:	687b      	ldr	r3, [r7, #4]
 802fbf4:	4a20      	ldr	r2, [pc, #128]	; (802fc78 <HAL_GPIO_Init+0x240>)
 802fbf6:	4293      	cmp	r3, r2
 802fbf8:	d052      	beq.n	802fca0 <HAL_GPIO_Init+0x268>
 802fbfa:	687b      	ldr	r3, [r7, #4]
 802fbfc:	4a1f      	ldr	r2, [pc, #124]	; (802fc7c <HAL_GPIO_Init+0x244>)
 802fbfe:	4293      	cmp	r3, r2
 802fc00:	d031      	beq.n	802fc66 <HAL_GPIO_Init+0x22e>
 802fc02:	687b      	ldr	r3, [r7, #4]
 802fc04:	4a1e      	ldr	r2, [pc, #120]	; (802fc80 <HAL_GPIO_Init+0x248>)
 802fc06:	4293      	cmp	r3, r2
 802fc08:	d02b      	beq.n	802fc62 <HAL_GPIO_Init+0x22a>
 802fc0a:	687b      	ldr	r3, [r7, #4]
 802fc0c:	4a1d      	ldr	r2, [pc, #116]	; (802fc84 <HAL_GPIO_Init+0x24c>)
 802fc0e:	4293      	cmp	r3, r2
 802fc10:	d025      	beq.n	802fc5e <HAL_GPIO_Init+0x226>
 802fc12:	687b      	ldr	r3, [r7, #4]
 802fc14:	4a1c      	ldr	r2, [pc, #112]	; (802fc88 <HAL_GPIO_Init+0x250>)
 802fc16:	4293      	cmp	r3, r2
 802fc18:	d01f      	beq.n	802fc5a <HAL_GPIO_Init+0x222>
 802fc1a:	687b      	ldr	r3, [r7, #4]
 802fc1c:	4a1b      	ldr	r2, [pc, #108]	; (802fc8c <HAL_GPIO_Init+0x254>)
 802fc1e:	4293      	cmp	r3, r2
 802fc20:	d019      	beq.n	802fc56 <HAL_GPIO_Init+0x21e>
 802fc22:	687b      	ldr	r3, [r7, #4]
 802fc24:	4a1a      	ldr	r2, [pc, #104]	; (802fc90 <HAL_GPIO_Init+0x258>)
 802fc26:	4293      	cmp	r3, r2
 802fc28:	d013      	beq.n	802fc52 <HAL_GPIO_Init+0x21a>
 802fc2a:	687b      	ldr	r3, [r7, #4]
 802fc2c:	4a19      	ldr	r2, [pc, #100]	; (802fc94 <HAL_GPIO_Init+0x25c>)
 802fc2e:	4293      	cmp	r3, r2
 802fc30:	d00d      	beq.n	802fc4e <HAL_GPIO_Init+0x216>
 802fc32:	687b      	ldr	r3, [r7, #4]
 802fc34:	4a18      	ldr	r2, [pc, #96]	; (802fc98 <HAL_GPIO_Init+0x260>)
 802fc36:	4293      	cmp	r3, r2
 802fc38:	d007      	beq.n	802fc4a <HAL_GPIO_Init+0x212>
 802fc3a:	687b      	ldr	r3, [r7, #4]
 802fc3c:	4a17      	ldr	r2, [pc, #92]	; (802fc9c <HAL_GPIO_Init+0x264>)
 802fc3e:	4293      	cmp	r3, r2
 802fc40:	d101      	bne.n	802fc46 <HAL_GPIO_Init+0x20e>
 802fc42:	2309      	movs	r3, #9
 802fc44:	e02d      	b.n	802fca2 <HAL_GPIO_Init+0x26a>
 802fc46:	230a      	movs	r3, #10
 802fc48:	e02b      	b.n	802fca2 <HAL_GPIO_Init+0x26a>
 802fc4a:	2308      	movs	r3, #8
 802fc4c:	e029      	b.n	802fca2 <HAL_GPIO_Init+0x26a>
 802fc4e:	2307      	movs	r3, #7
 802fc50:	e027      	b.n	802fca2 <HAL_GPIO_Init+0x26a>
 802fc52:	2306      	movs	r3, #6
 802fc54:	e025      	b.n	802fca2 <HAL_GPIO_Init+0x26a>
 802fc56:	2305      	movs	r3, #5
 802fc58:	e023      	b.n	802fca2 <HAL_GPIO_Init+0x26a>
 802fc5a:	2304      	movs	r3, #4
 802fc5c:	e021      	b.n	802fca2 <HAL_GPIO_Init+0x26a>
 802fc5e:	2303      	movs	r3, #3
 802fc60:	e01f      	b.n	802fca2 <HAL_GPIO_Init+0x26a>
 802fc62:	2302      	movs	r3, #2
 802fc64:	e01d      	b.n	802fca2 <HAL_GPIO_Init+0x26a>
 802fc66:	2301      	movs	r3, #1
 802fc68:	e01b      	b.n	802fca2 <HAL_GPIO_Init+0x26a>
 802fc6a:	bf00      	nop
 802fc6c:	58000080 	.word	0x58000080
 802fc70:	58024400 	.word	0x58024400
 802fc74:	58000400 	.word	0x58000400
 802fc78:	58020000 	.word	0x58020000
 802fc7c:	58020400 	.word	0x58020400
 802fc80:	58020800 	.word	0x58020800
 802fc84:	58020c00 	.word	0x58020c00
 802fc88:	58021000 	.word	0x58021000
 802fc8c:	58021400 	.word	0x58021400
 802fc90:	58021800 	.word	0x58021800
 802fc94:	58021c00 	.word	0x58021c00
 802fc98:	58022000 	.word	0x58022000
 802fc9c:	58022400 	.word	0x58022400
 802fca0:	2300      	movs	r3, #0
 802fca2:	69fa      	ldr	r2, [r7, #28]
 802fca4:	f002 0203 	and.w	r2, r2, #3
 802fca8:	0092      	lsls	r2, r2, #2
 802fcaa:	4093      	lsls	r3, r2
 802fcac:	69ba      	ldr	r2, [r7, #24]
 802fcae:	4313      	orrs	r3, r2
 802fcb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802fcb2:	4938      	ldr	r1, [pc, #224]	; (802fd94 <HAL_GPIO_Init+0x35c>)
 802fcb4:	69fb      	ldr	r3, [r7, #28]
 802fcb6:	089b      	lsrs	r3, r3, #2
 802fcb8:	3302      	adds	r3, #2
 802fcba:	69ba      	ldr	r2, [r7, #24]
 802fcbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 802fcc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802fcc4:	681b      	ldr	r3, [r3, #0]
 802fcc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802fcc8:	693b      	ldr	r3, [r7, #16]
 802fcca:	43db      	mvns	r3, r3
 802fccc:	69ba      	ldr	r2, [r7, #24]
 802fcce:	4013      	ands	r3, r2
 802fcd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802fcd2:	683b      	ldr	r3, [r7, #0]
 802fcd4:	685b      	ldr	r3, [r3, #4]
 802fcd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802fcda:	2b00      	cmp	r3, #0
 802fcdc:	d003      	beq.n	802fce6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 802fcde:	69ba      	ldr	r2, [r7, #24]
 802fce0:	693b      	ldr	r3, [r7, #16]
 802fce2:	4313      	orrs	r3, r2
 802fce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 802fce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802fcea:	69bb      	ldr	r3, [r7, #24]
 802fcec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 802fcee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802fcf2:	685b      	ldr	r3, [r3, #4]
 802fcf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802fcf6:	693b      	ldr	r3, [r7, #16]
 802fcf8:	43db      	mvns	r3, r3
 802fcfa:	69ba      	ldr	r2, [r7, #24]
 802fcfc:	4013      	ands	r3, r2
 802fcfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802fd00:	683b      	ldr	r3, [r7, #0]
 802fd02:	685b      	ldr	r3, [r3, #4]
 802fd04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802fd08:	2b00      	cmp	r3, #0
 802fd0a:	d003      	beq.n	802fd14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802fd0c:	69ba      	ldr	r2, [r7, #24]
 802fd0e:	693b      	ldr	r3, [r7, #16]
 802fd10:	4313      	orrs	r3, r2
 802fd12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 802fd14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802fd18:	69bb      	ldr	r3, [r7, #24]
 802fd1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 802fd1c:	697b      	ldr	r3, [r7, #20]
 802fd1e:	685b      	ldr	r3, [r3, #4]
 802fd20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802fd22:	693b      	ldr	r3, [r7, #16]
 802fd24:	43db      	mvns	r3, r3
 802fd26:	69ba      	ldr	r2, [r7, #24]
 802fd28:	4013      	ands	r3, r2
 802fd2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802fd2c:	683b      	ldr	r3, [r7, #0]
 802fd2e:	685b      	ldr	r3, [r3, #4]
 802fd30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802fd34:	2b00      	cmp	r3, #0
 802fd36:	d003      	beq.n	802fd40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 802fd38:	69ba      	ldr	r2, [r7, #24]
 802fd3a:	693b      	ldr	r3, [r7, #16]
 802fd3c:	4313      	orrs	r3, r2
 802fd3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 802fd40:	697b      	ldr	r3, [r7, #20]
 802fd42:	69ba      	ldr	r2, [r7, #24]
 802fd44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 802fd46:	697b      	ldr	r3, [r7, #20]
 802fd48:	681b      	ldr	r3, [r3, #0]
 802fd4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802fd4c:	693b      	ldr	r3, [r7, #16]
 802fd4e:	43db      	mvns	r3, r3
 802fd50:	69ba      	ldr	r2, [r7, #24]
 802fd52:	4013      	ands	r3, r2
 802fd54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802fd56:	683b      	ldr	r3, [r7, #0]
 802fd58:	685b      	ldr	r3, [r3, #4]
 802fd5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802fd5e:	2b00      	cmp	r3, #0
 802fd60:	d003      	beq.n	802fd6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 802fd62:	69ba      	ldr	r2, [r7, #24]
 802fd64:	693b      	ldr	r3, [r7, #16]
 802fd66:	4313      	orrs	r3, r2
 802fd68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 802fd6a:	697b      	ldr	r3, [r7, #20]
 802fd6c:	69ba      	ldr	r2, [r7, #24]
 802fd6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 802fd70:	69fb      	ldr	r3, [r7, #28]
 802fd72:	3301      	adds	r3, #1
 802fd74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802fd76:	683b      	ldr	r3, [r7, #0]
 802fd78:	681a      	ldr	r2, [r3, #0]
 802fd7a:	69fb      	ldr	r3, [r7, #28]
 802fd7c:	fa22 f303 	lsr.w	r3, r2, r3
 802fd80:	2b00      	cmp	r3, #0
 802fd82:	f47f ae63 	bne.w	802fa4c <HAL_GPIO_Init+0x14>
  }
}
 802fd86:	bf00      	nop
 802fd88:	bf00      	nop
 802fd8a:	3724      	adds	r7, #36	; 0x24
 802fd8c:	46bd      	mov	sp, r7
 802fd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fd92:	4770      	bx	lr
 802fd94:	58000400 	.word	0x58000400

0802fd98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802fd98:	b480      	push	{r7}
 802fd9a:	b083      	sub	sp, #12
 802fd9c:	af00      	add	r7, sp, #0
 802fd9e:	6078      	str	r0, [r7, #4]
 802fda0:	460b      	mov	r3, r1
 802fda2:	807b      	strh	r3, [r7, #2]
 802fda4:	4613      	mov	r3, r2
 802fda6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 802fda8:	787b      	ldrb	r3, [r7, #1]
 802fdaa:	2b00      	cmp	r3, #0
 802fdac:	d003      	beq.n	802fdb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802fdae:	887a      	ldrh	r2, [r7, #2]
 802fdb0:	687b      	ldr	r3, [r7, #4]
 802fdb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 802fdb4:	e003      	b.n	802fdbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802fdb6:	887b      	ldrh	r3, [r7, #2]
 802fdb8:	041a      	lsls	r2, r3, #16
 802fdba:	687b      	ldr	r3, [r7, #4]
 802fdbc:	619a      	str	r2, [r3, #24]
}
 802fdbe:	bf00      	nop
 802fdc0:	370c      	adds	r7, #12
 802fdc2:	46bd      	mov	sp, r7
 802fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fdc8:	4770      	bx	lr
	...

0802fdcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802fdcc:	b580      	push	{r7, lr}
 802fdce:	b082      	sub	sp, #8
 802fdd0:	af00      	add	r7, sp, #0
 802fdd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802fdd4:	687b      	ldr	r3, [r7, #4]
 802fdd6:	2b00      	cmp	r3, #0
 802fdd8:	d101      	bne.n	802fdde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802fdda:	2301      	movs	r3, #1
 802fddc:	e07f      	b.n	802fede <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802fdde:	687b      	ldr	r3, [r7, #4]
 802fde0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802fde4:	b2db      	uxtb	r3, r3
 802fde6:	2b00      	cmp	r3, #0
 802fde8:	d106      	bne.n	802fdf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802fdea:	687b      	ldr	r3, [r7, #4]
 802fdec:	2200      	movs	r2, #0
 802fdee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 802fdf2:	6878      	ldr	r0, [r7, #4]
 802fdf4:	f7fa ff9e 	bl	802ad34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802fdf8:	687b      	ldr	r3, [r7, #4]
 802fdfa:	2224      	movs	r2, #36	; 0x24
 802fdfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802fe00:	687b      	ldr	r3, [r7, #4]
 802fe02:	681b      	ldr	r3, [r3, #0]
 802fe04:	681a      	ldr	r2, [r3, #0]
 802fe06:	687b      	ldr	r3, [r7, #4]
 802fe08:	681b      	ldr	r3, [r3, #0]
 802fe0a:	f022 0201 	bic.w	r2, r2, #1
 802fe0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 802fe10:	687b      	ldr	r3, [r7, #4]
 802fe12:	685a      	ldr	r2, [r3, #4]
 802fe14:	687b      	ldr	r3, [r7, #4]
 802fe16:	681b      	ldr	r3, [r3, #0]
 802fe18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802fe1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 802fe1e:	687b      	ldr	r3, [r7, #4]
 802fe20:	681b      	ldr	r3, [r3, #0]
 802fe22:	689a      	ldr	r2, [r3, #8]
 802fe24:	687b      	ldr	r3, [r7, #4]
 802fe26:	681b      	ldr	r3, [r3, #0]
 802fe28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802fe2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802fe2e:	687b      	ldr	r3, [r7, #4]
 802fe30:	68db      	ldr	r3, [r3, #12]
 802fe32:	2b01      	cmp	r3, #1
 802fe34:	d107      	bne.n	802fe46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 802fe36:	687b      	ldr	r3, [r7, #4]
 802fe38:	689a      	ldr	r2, [r3, #8]
 802fe3a:	687b      	ldr	r3, [r7, #4]
 802fe3c:	681b      	ldr	r3, [r3, #0]
 802fe3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802fe42:	609a      	str	r2, [r3, #8]
 802fe44:	e006      	b.n	802fe54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 802fe46:	687b      	ldr	r3, [r7, #4]
 802fe48:	689a      	ldr	r2, [r3, #8]
 802fe4a:	687b      	ldr	r3, [r7, #4]
 802fe4c:	681b      	ldr	r3, [r3, #0]
 802fe4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 802fe52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802fe54:	687b      	ldr	r3, [r7, #4]
 802fe56:	68db      	ldr	r3, [r3, #12]
 802fe58:	2b02      	cmp	r3, #2
 802fe5a:	d104      	bne.n	802fe66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 802fe5c:	687b      	ldr	r3, [r7, #4]
 802fe5e:	681b      	ldr	r3, [r3, #0]
 802fe60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802fe64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 802fe66:	687b      	ldr	r3, [r7, #4]
 802fe68:	681b      	ldr	r3, [r3, #0]
 802fe6a:	6859      	ldr	r1, [r3, #4]
 802fe6c:	687b      	ldr	r3, [r7, #4]
 802fe6e:	681a      	ldr	r2, [r3, #0]
 802fe70:	4b1d      	ldr	r3, [pc, #116]	; (802fee8 <HAL_I2C_Init+0x11c>)
 802fe72:	430b      	orrs	r3, r1
 802fe74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 802fe76:	687b      	ldr	r3, [r7, #4]
 802fe78:	681b      	ldr	r3, [r3, #0]
 802fe7a:	68da      	ldr	r2, [r3, #12]
 802fe7c:	687b      	ldr	r3, [r7, #4]
 802fe7e:	681b      	ldr	r3, [r3, #0]
 802fe80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802fe84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802fe86:	687b      	ldr	r3, [r7, #4]
 802fe88:	691a      	ldr	r2, [r3, #16]
 802fe8a:	687b      	ldr	r3, [r7, #4]
 802fe8c:	695b      	ldr	r3, [r3, #20]
 802fe8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 802fe92:	687b      	ldr	r3, [r7, #4]
 802fe94:	699b      	ldr	r3, [r3, #24]
 802fe96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802fe98:	687b      	ldr	r3, [r7, #4]
 802fe9a:	681b      	ldr	r3, [r3, #0]
 802fe9c:	430a      	orrs	r2, r1
 802fe9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 802fea0:	687b      	ldr	r3, [r7, #4]
 802fea2:	69d9      	ldr	r1, [r3, #28]
 802fea4:	687b      	ldr	r3, [r7, #4]
 802fea6:	6a1a      	ldr	r2, [r3, #32]
 802fea8:	687b      	ldr	r3, [r7, #4]
 802feaa:	681b      	ldr	r3, [r3, #0]
 802feac:	430a      	orrs	r2, r1
 802feae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802feb0:	687b      	ldr	r3, [r7, #4]
 802feb2:	681b      	ldr	r3, [r3, #0]
 802feb4:	681a      	ldr	r2, [r3, #0]
 802feb6:	687b      	ldr	r3, [r7, #4]
 802feb8:	681b      	ldr	r3, [r3, #0]
 802feba:	f042 0201 	orr.w	r2, r2, #1
 802febe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802fec0:	687b      	ldr	r3, [r7, #4]
 802fec2:	2200      	movs	r2, #0
 802fec4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 802fec6:	687b      	ldr	r3, [r7, #4]
 802fec8:	2220      	movs	r2, #32
 802feca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 802fece:	687b      	ldr	r3, [r7, #4]
 802fed0:	2200      	movs	r2, #0
 802fed2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802fed4:	687b      	ldr	r3, [r7, #4]
 802fed6:	2200      	movs	r2, #0
 802fed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 802fedc:	2300      	movs	r3, #0
}
 802fede:	4618      	mov	r0, r3
 802fee0:	3708      	adds	r7, #8
 802fee2:	46bd      	mov	sp, r7
 802fee4:	bd80      	pop	{r7, pc}
 802fee6:	bf00      	nop
 802fee8:	02008000 	.word	0x02008000

0802feec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802feec:	b580      	push	{r7, lr}
 802feee:	b084      	sub	sp, #16
 802fef0:	af00      	add	r7, sp, #0
 802fef2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802fef4:	687b      	ldr	r3, [r7, #4]
 802fef6:	681b      	ldr	r3, [r3, #0]
 802fef8:	699b      	ldr	r3, [r3, #24]
 802fefa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802fefc:	687b      	ldr	r3, [r7, #4]
 802fefe:	681b      	ldr	r3, [r3, #0]
 802ff00:	681b      	ldr	r3, [r3, #0]
 802ff02:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 802ff04:	687b      	ldr	r3, [r7, #4]
 802ff06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802ff08:	2b00      	cmp	r3, #0
 802ff0a:	d005      	beq.n	802ff18 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 802ff0c:	687b      	ldr	r3, [r7, #4]
 802ff0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802ff10:	68ba      	ldr	r2, [r7, #8]
 802ff12:	68f9      	ldr	r1, [r7, #12]
 802ff14:	6878      	ldr	r0, [r7, #4]
 802ff16:	4798      	blx	r3
  }
}
 802ff18:	bf00      	nop
 802ff1a:	3710      	adds	r7, #16
 802ff1c:	46bd      	mov	sp, r7
 802ff1e:	bd80      	pop	{r7, pc}

0802ff20 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802ff20:	b580      	push	{r7, lr}
 802ff22:	b086      	sub	sp, #24
 802ff24:	af00      	add	r7, sp, #0
 802ff26:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802ff28:	687b      	ldr	r3, [r7, #4]
 802ff2a:	681b      	ldr	r3, [r3, #0]
 802ff2c:	699b      	ldr	r3, [r3, #24]
 802ff2e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802ff30:	687b      	ldr	r3, [r7, #4]
 802ff32:	681b      	ldr	r3, [r3, #0]
 802ff34:	681b      	ldr	r3, [r3, #0]
 802ff36:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802ff38:	697b      	ldr	r3, [r7, #20]
 802ff3a:	0a1b      	lsrs	r3, r3, #8
 802ff3c:	f003 0301 	and.w	r3, r3, #1
 802ff40:	2b00      	cmp	r3, #0
 802ff42:	d010      	beq.n	802ff66 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802ff44:	693b      	ldr	r3, [r7, #16]
 802ff46:	09db      	lsrs	r3, r3, #7
 802ff48:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802ff4c:	2b00      	cmp	r3, #0
 802ff4e:	d00a      	beq.n	802ff66 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 802ff50:	687b      	ldr	r3, [r7, #4]
 802ff52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ff54:	f043 0201 	orr.w	r2, r3, #1
 802ff58:	687b      	ldr	r3, [r7, #4]
 802ff5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 802ff5c:	687b      	ldr	r3, [r7, #4]
 802ff5e:	681b      	ldr	r3, [r3, #0]
 802ff60:	f44f 7280 	mov.w	r2, #256	; 0x100
 802ff64:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802ff66:	697b      	ldr	r3, [r7, #20]
 802ff68:	0a9b      	lsrs	r3, r3, #10
 802ff6a:	f003 0301 	and.w	r3, r3, #1
 802ff6e:	2b00      	cmp	r3, #0
 802ff70:	d010      	beq.n	802ff94 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802ff72:	693b      	ldr	r3, [r7, #16]
 802ff74:	09db      	lsrs	r3, r3, #7
 802ff76:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802ff7a:	2b00      	cmp	r3, #0
 802ff7c:	d00a      	beq.n	802ff94 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 802ff7e:	687b      	ldr	r3, [r7, #4]
 802ff80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ff82:	f043 0208 	orr.w	r2, r3, #8
 802ff86:	687b      	ldr	r3, [r7, #4]
 802ff88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 802ff8a:	687b      	ldr	r3, [r7, #4]
 802ff8c:	681b      	ldr	r3, [r3, #0]
 802ff8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802ff92:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802ff94:	697b      	ldr	r3, [r7, #20]
 802ff96:	0a5b      	lsrs	r3, r3, #9
 802ff98:	f003 0301 	and.w	r3, r3, #1
 802ff9c:	2b00      	cmp	r3, #0
 802ff9e:	d010      	beq.n	802ffc2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802ffa0:	693b      	ldr	r3, [r7, #16]
 802ffa2:	09db      	lsrs	r3, r3, #7
 802ffa4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802ffa8:	2b00      	cmp	r3, #0
 802ffaa:	d00a      	beq.n	802ffc2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 802ffac:	687b      	ldr	r3, [r7, #4]
 802ffae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ffb0:	f043 0202 	orr.w	r2, r3, #2
 802ffb4:	687b      	ldr	r3, [r7, #4]
 802ffb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 802ffb8:	687b      	ldr	r3, [r7, #4]
 802ffba:	681b      	ldr	r3, [r3, #0]
 802ffbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 802ffc0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 802ffc2:	687b      	ldr	r3, [r7, #4]
 802ffc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ffc6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 802ffc8:	68fb      	ldr	r3, [r7, #12]
 802ffca:	f003 030b 	and.w	r3, r3, #11
 802ffce:	2b00      	cmp	r3, #0
 802ffd0:	d003      	beq.n	802ffda <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 802ffd2:	68f9      	ldr	r1, [r7, #12]
 802ffd4:	6878      	ldr	r0, [r7, #4]
 802ffd6:	f000 fc77 	bl	80308c8 <I2C_ITError>
  }
}
 802ffda:	bf00      	nop
 802ffdc:	3718      	adds	r7, #24
 802ffde:	46bd      	mov	sp, r7
 802ffe0:	bd80      	pop	{r7, pc}

0802ffe2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802ffe2:	b480      	push	{r7}
 802ffe4:	b083      	sub	sp, #12
 802ffe6:	af00      	add	r7, sp, #0
 802ffe8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 802ffea:	bf00      	nop
 802ffec:	370c      	adds	r7, #12
 802ffee:	46bd      	mov	sp, r7
 802fff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fff4:	4770      	bx	lr

0802fff6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802fff6:	b480      	push	{r7}
 802fff8:	b083      	sub	sp, #12
 802fffa:	af00      	add	r7, sp, #0
 802fffc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 802fffe:	bf00      	nop
 8030000:	370c      	adds	r7, #12
 8030002:	46bd      	mov	sp, r7
 8030004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030008:	4770      	bx	lr

0803000a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 803000a:	b480      	push	{r7}
 803000c:	b083      	sub	sp, #12
 803000e:	af00      	add	r7, sp, #0
 8030010:	6078      	str	r0, [r7, #4]
 8030012:	460b      	mov	r3, r1
 8030014:	70fb      	strb	r3, [r7, #3]
 8030016:	4613      	mov	r3, r2
 8030018:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 803001a:	bf00      	nop
 803001c:	370c      	adds	r7, #12
 803001e:	46bd      	mov	sp, r7
 8030020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030024:	4770      	bx	lr

08030026 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8030026:	b480      	push	{r7}
 8030028:	b083      	sub	sp, #12
 803002a:	af00      	add	r7, sp, #0
 803002c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 803002e:	bf00      	nop
 8030030:	370c      	adds	r7, #12
 8030032:	46bd      	mov	sp, r7
 8030034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030038:	4770      	bx	lr

0803003a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 803003a:	b480      	push	{r7}
 803003c:	b083      	sub	sp, #12
 803003e:	af00      	add	r7, sp, #0
 8030040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8030042:	bf00      	nop
 8030044:	370c      	adds	r7, #12
 8030046:	46bd      	mov	sp, r7
 8030048:	f85d 7b04 	ldr.w	r7, [sp], #4
 803004c:	4770      	bx	lr

0803004e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 803004e:	b480      	push	{r7}
 8030050:	b083      	sub	sp, #12
 8030052:	af00      	add	r7, sp, #0
 8030054:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8030056:	bf00      	nop
 8030058:	370c      	adds	r7, #12
 803005a:	46bd      	mov	sp, r7
 803005c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030060:	4770      	bx	lr

08030062 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8030062:	b580      	push	{r7, lr}
 8030064:	b086      	sub	sp, #24
 8030066:	af00      	add	r7, sp, #0
 8030068:	60f8      	str	r0, [r7, #12]
 803006a:	60b9      	str	r1, [r7, #8]
 803006c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 803006e:	68fb      	ldr	r3, [r7, #12]
 8030070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8030072:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8030074:	68bb      	ldr	r3, [r7, #8]
 8030076:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8030078:	68fb      	ldr	r3, [r7, #12]
 803007a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 803007e:	2b01      	cmp	r3, #1
 8030080:	d101      	bne.n	8030086 <I2C_Slave_ISR_IT+0x24>
 8030082:	2302      	movs	r3, #2
 8030084:	e0ec      	b.n	8030260 <I2C_Slave_ISR_IT+0x1fe>
 8030086:	68fb      	ldr	r3, [r7, #12]
 8030088:	2201      	movs	r2, #1
 803008a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 803008e:	693b      	ldr	r3, [r7, #16]
 8030090:	095b      	lsrs	r3, r3, #5
 8030092:	f003 0301 	and.w	r3, r3, #1
 8030096:	2b00      	cmp	r3, #0
 8030098:	d009      	beq.n	80300ae <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 803009a:	687b      	ldr	r3, [r7, #4]
 803009c:	095b      	lsrs	r3, r3, #5
 803009e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80300a2:	2b00      	cmp	r3, #0
 80300a4:	d003      	beq.n	80300ae <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80300a6:	6939      	ldr	r1, [r7, #16]
 80300a8:	68f8      	ldr	r0, [r7, #12]
 80300aa:	f000 f9bf 	bl	803042c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80300ae:	693b      	ldr	r3, [r7, #16]
 80300b0:	091b      	lsrs	r3, r3, #4
 80300b2:	f003 0301 	and.w	r3, r3, #1
 80300b6:	2b00      	cmp	r3, #0
 80300b8:	d04d      	beq.n	8030156 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80300ba:	687b      	ldr	r3, [r7, #4]
 80300bc:	091b      	lsrs	r3, r3, #4
 80300be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80300c2:	2b00      	cmp	r3, #0
 80300c4:	d047      	beq.n	8030156 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80300c6:	68fb      	ldr	r3, [r7, #12]
 80300c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80300ca:	b29b      	uxth	r3, r3
 80300cc:	2b00      	cmp	r3, #0
 80300ce:	d128      	bne.n	8030122 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80300d0:	68fb      	ldr	r3, [r7, #12]
 80300d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80300d6:	b2db      	uxtb	r3, r3
 80300d8:	2b28      	cmp	r3, #40	; 0x28
 80300da:	d108      	bne.n	80300ee <I2C_Slave_ISR_IT+0x8c>
 80300dc:	697b      	ldr	r3, [r7, #20]
 80300de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80300e2:	d104      	bne.n	80300ee <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80300e4:	6939      	ldr	r1, [r7, #16]
 80300e6:	68f8      	ldr	r0, [r7, #12]
 80300e8:	f000 fb98 	bl	803081c <I2C_ITListenCplt>
 80300ec:	e032      	b.n	8030154 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80300ee:	68fb      	ldr	r3, [r7, #12]
 80300f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80300f4:	b2db      	uxtb	r3, r3
 80300f6:	2b29      	cmp	r3, #41	; 0x29
 80300f8:	d10e      	bne.n	8030118 <I2C_Slave_ISR_IT+0xb6>
 80300fa:	697b      	ldr	r3, [r7, #20]
 80300fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8030100:	d00a      	beq.n	8030118 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8030102:	68fb      	ldr	r3, [r7, #12]
 8030104:	681b      	ldr	r3, [r3, #0]
 8030106:	2210      	movs	r2, #16
 8030108:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 803010a:	68f8      	ldr	r0, [r7, #12]
 803010c:	f000 fcd3 	bl	8030ab6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8030110:	68f8      	ldr	r0, [r7, #12]
 8030112:	f000 f92d 	bl	8030370 <I2C_ITSlaveSeqCplt>
 8030116:	e01d      	b.n	8030154 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8030118:	68fb      	ldr	r3, [r7, #12]
 803011a:	681b      	ldr	r3, [r3, #0]
 803011c:	2210      	movs	r2, #16
 803011e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8030120:	e096      	b.n	8030250 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8030122:	68fb      	ldr	r3, [r7, #12]
 8030124:	681b      	ldr	r3, [r3, #0]
 8030126:	2210      	movs	r2, #16
 8030128:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 803012a:	68fb      	ldr	r3, [r7, #12]
 803012c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803012e:	f043 0204 	orr.w	r2, r3, #4
 8030132:	68fb      	ldr	r3, [r7, #12]
 8030134:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8030136:	697b      	ldr	r3, [r7, #20]
 8030138:	2b00      	cmp	r3, #0
 803013a:	d004      	beq.n	8030146 <I2C_Slave_ISR_IT+0xe4>
 803013c:	697b      	ldr	r3, [r7, #20]
 803013e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8030142:	f040 8085 	bne.w	8030250 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8030146:	68fb      	ldr	r3, [r7, #12]
 8030148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803014a:	4619      	mov	r1, r3
 803014c:	68f8      	ldr	r0, [r7, #12]
 803014e:	f000 fbbb 	bl	80308c8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8030152:	e07d      	b.n	8030250 <I2C_Slave_ISR_IT+0x1ee>
 8030154:	e07c      	b.n	8030250 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8030156:	693b      	ldr	r3, [r7, #16]
 8030158:	089b      	lsrs	r3, r3, #2
 803015a:	f003 0301 	and.w	r3, r3, #1
 803015e:	2b00      	cmp	r3, #0
 8030160:	d030      	beq.n	80301c4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8030162:	687b      	ldr	r3, [r7, #4]
 8030164:	089b      	lsrs	r3, r3, #2
 8030166:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 803016a:	2b00      	cmp	r3, #0
 803016c:	d02a      	beq.n	80301c4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 803016e:	68fb      	ldr	r3, [r7, #12]
 8030170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030172:	b29b      	uxth	r3, r3
 8030174:	2b00      	cmp	r3, #0
 8030176:	d018      	beq.n	80301aa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8030178:	68fb      	ldr	r3, [r7, #12]
 803017a:	681b      	ldr	r3, [r3, #0]
 803017c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 803017e:	68fb      	ldr	r3, [r7, #12]
 8030180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030182:	b2d2      	uxtb	r2, r2
 8030184:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8030186:	68fb      	ldr	r3, [r7, #12]
 8030188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803018a:	1c5a      	adds	r2, r3, #1
 803018c:	68fb      	ldr	r3, [r7, #12]
 803018e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8030190:	68fb      	ldr	r3, [r7, #12]
 8030192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030194:	3b01      	subs	r3, #1
 8030196:	b29a      	uxth	r2, r3
 8030198:	68fb      	ldr	r3, [r7, #12]
 803019a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 803019c:	68fb      	ldr	r3, [r7, #12]
 803019e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80301a0:	b29b      	uxth	r3, r3
 80301a2:	3b01      	subs	r3, #1
 80301a4:	b29a      	uxth	r2, r3
 80301a6:	68fb      	ldr	r3, [r7, #12]
 80301a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80301aa:	68fb      	ldr	r3, [r7, #12]
 80301ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80301ae:	b29b      	uxth	r3, r3
 80301b0:	2b00      	cmp	r3, #0
 80301b2:	d14f      	bne.n	8030254 <I2C_Slave_ISR_IT+0x1f2>
 80301b4:	697b      	ldr	r3, [r7, #20]
 80301b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80301ba:	d04b      	beq.n	8030254 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80301bc:	68f8      	ldr	r0, [r7, #12]
 80301be:	f000 f8d7 	bl	8030370 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80301c2:	e047      	b.n	8030254 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80301c4:	693b      	ldr	r3, [r7, #16]
 80301c6:	08db      	lsrs	r3, r3, #3
 80301c8:	f003 0301 	and.w	r3, r3, #1
 80301cc:	2b00      	cmp	r3, #0
 80301ce:	d00a      	beq.n	80301e6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80301d0:	687b      	ldr	r3, [r7, #4]
 80301d2:	08db      	lsrs	r3, r3, #3
 80301d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80301d8:	2b00      	cmp	r3, #0
 80301da:	d004      	beq.n	80301e6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80301dc:	6939      	ldr	r1, [r7, #16]
 80301de:	68f8      	ldr	r0, [r7, #12]
 80301e0:	f000 f842 	bl	8030268 <I2C_ITAddrCplt>
 80301e4:	e037      	b.n	8030256 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80301e6:	693b      	ldr	r3, [r7, #16]
 80301e8:	085b      	lsrs	r3, r3, #1
 80301ea:	f003 0301 	and.w	r3, r3, #1
 80301ee:	2b00      	cmp	r3, #0
 80301f0:	d031      	beq.n	8030256 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80301f2:	687b      	ldr	r3, [r7, #4]
 80301f4:	085b      	lsrs	r3, r3, #1
 80301f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80301fa:	2b00      	cmp	r3, #0
 80301fc:	d02b      	beq.n	8030256 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80301fe:	68fb      	ldr	r3, [r7, #12]
 8030200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030202:	b29b      	uxth	r3, r3
 8030204:	2b00      	cmp	r3, #0
 8030206:	d018      	beq.n	803023a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8030208:	68fb      	ldr	r3, [r7, #12]
 803020a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803020c:	781a      	ldrb	r2, [r3, #0]
 803020e:	68fb      	ldr	r3, [r7, #12]
 8030210:	681b      	ldr	r3, [r3, #0]
 8030212:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8030214:	68fb      	ldr	r3, [r7, #12]
 8030216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030218:	1c5a      	adds	r2, r3, #1
 803021a:	68fb      	ldr	r3, [r7, #12]
 803021c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 803021e:	68fb      	ldr	r3, [r7, #12]
 8030220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030222:	b29b      	uxth	r3, r3
 8030224:	3b01      	subs	r3, #1
 8030226:	b29a      	uxth	r2, r3
 8030228:	68fb      	ldr	r3, [r7, #12]
 803022a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 803022c:	68fb      	ldr	r3, [r7, #12]
 803022e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030230:	3b01      	subs	r3, #1
 8030232:	b29a      	uxth	r2, r3
 8030234:	68fb      	ldr	r3, [r7, #12]
 8030236:	851a      	strh	r2, [r3, #40]	; 0x28
 8030238:	e00d      	b.n	8030256 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 803023a:	697b      	ldr	r3, [r7, #20]
 803023c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8030240:	d002      	beq.n	8030248 <I2C_Slave_ISR_IT+0x1e6>
 8030242:	697b      	ldr	r3, [r7, #20]
 8030244:	2b00      	cmp	r3, #0
 8030246:	d106      	bne.n	8030256 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8030248:	68f8      	ldr	r0, [r7, #12]
 803024a:	f000 f891 	bl	8030370 <I2C_ITSlaveSeqCplt>
 803024e:	e002      	b.n	8030256 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8030250:	bf00      	nop
 8030252:	e000      	b.n	8030256 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8030254:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8030256:	68fb      	ldr	r3, [r7, #12]
 8030258:	2200      	movs	r2, #0
 803025a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 803025e:	2300      	movs	r3, #0
}
 8030260:	4618      	mov	r0, r3
 8030262:	3718      	adds	r7, #24
 8030264:	46bd      	mov	sp, r7
 8030266:	bd80      	pop	{r7, pc}

08030268 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8030268:	b580      	push	{r7, lr}
 803026a:	b084      	sub	sp, #16
 803026c:	af00      	add	r7, sp, #0
 803026e:	6078      	str	r0, [r7, #4]
 8030270:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8030272:	687b      	ldr	r3, [r7, #4]
 8030274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030278:	b2db      	uxtb	r3, r3
 803027a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 803027e:	2b28      	cmp	r3, #40	; 0x28
 8030280:	d16a      	bne.n	8030358 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8030282:	687b      	ldr	r3, [r7, #4]
 8030284:	681b      	ldr	r3, [r3, #0]
 8030286:	699b      	ldr	r3, [r3, #24]
 8030288:	0c1b      	lsrs	r3, r3, #16
 803028a:	b2db      	uxtb	r3, r3
 803028c:	f003 0301 	and.w	r3, r3, #1
 8030290:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8030292:	687b      	ldr	r3, [r7, #4]
 8030294:	681b      	ldr	r3, [r3, #0]
 8030296:	699b      	ldr	r3, [r3, #24]
 8030298:	0c1b      	lsrs	r3, r3, #16
 803029a:	b29b      	uxth	r3, r3
 803029c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80302a0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80302a2:	687b      	ldr	r3, [r7, #4]
 80302a4:	681b      	ldr	r3, [r3, #0]
 80302a6:	689b      	ldr	r3, [r3, #8]
 80302a8:	b29b      	uxth	r3, r3
 80302aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80302ae:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80302b0:	687b      	ldr	r3, [r7, #4]
 80302b2:	681b      	ldr	r3, [r3, #0]
 80302b4:	68db      	ldr	r3, [r3, #12]
 80302b6:	b29b      	uxth	r3, r3
 80302b8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80302bc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80302be:	687b      	ldr	r3, [r7, #4]
 80302c0:	68db      	ldr	r3, [r3, #12]
 80302c2:	2b02      	cmp	r3, #2
 80302c4:	d138      	bne.n	8030338 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80302c6:	897b      	ldrh	r3, [r7, #10]
 80302c8:	09db      	lsrs	r3, r3, #7
 80302ca:	b29a      	uxth	r2, r3
 80302cc:	89bb      	ldrh	r3, [r7, #12]
 80302ce:	4053      	eors	r3, r2
 80302d0:	b29b      	uxth	r3, r3
 80302d2:	f003 0306 	and.w	r3, r3, #6
 80302d6:	2b00      	cmp	r3, #0
 80302d8:	d11c      	bne.n	8030314 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80302da:	897b      	ldrh	r3, [r7, #10]
 80302dc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80302de:	687b      	ldr	r3, [r7, #4]
 80302e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80302e2:	1c5a      	adds	r2, r3, #1
 80302e4:	687b      	ldr	r3, [r7, #4]
 80302e6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80302e8:	687b      	ldr	r3, [r7, #4]
 80302ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80302ec:	2b02      	cmp	r3, #2
 80302ee:	d13b      	bne.n	8030368 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80302f0:	687b      	ldr	r3, [r7, #4]
 80302f2:	2200      	movs	r2, #0
 80302f4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80302f6:	687b      	ldr	r3, [r7, #4]
 80302f8:	681b      	ldr	r3, [r3, #0]
 80302fa:	2208      	movs	r2, #8
 80302fc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80302fe:	687b      	ldr	r3, [r7, #4]
 8030300:	2200      	movs	r2, #0
 8030302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8030306:	89ba      	ldrh	r2, [r7, #12]
 8030308:	7bfb      	ldrb	r3, [r7, #15]
 803030a:	4619      	mov	r1, r3
 803030c:	6878      	ldr	r0, [r7, #4]
 803030e:	f7ff fe7c 	bl	803000a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8030312:	e029      	b.n	8030368 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8030314:	893b      	ldrh	r3, [r7, #8]
 8030316:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8030318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 803031c:	6878      	ldr	r0, [r7, #4]
 803031e:	f000 fc0c 	bl	8030b3a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8030322:	687b      	ldr	r3, [r7, #4]
 8030324:	2200      	movs	r2, #0
 8030326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 803032a:	89ba      	ldrh	r2, [r7, #12]
 803032c:	7bfb      	ldrb	r3, [r7, #15]
 803032e:	4619      	mov	r1, r3
 8030330:	6878      	ldr	r0, [r7, #4]
 8030332:	f7ff fe6a 	bl	803000a <HAL_I2C_AddrCallback>
}
 8030336:	e017      	b.n	8030368 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8030338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 803033c:	6878      	ldr	r0, [r7, #4]
 803033e:	f000 fbfc 	bl	8030b3a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8030342:	687b      	ldr	r3, [r7, #4]
 8030344:	2200      	movs	r2, #0
 8030346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 803034a:	89ba      	ldrh	r2, [r7, #12]
 803034c:	7bfb      	ldrb	r3, [r7, #15]
 803034e:	4619      	mov	r1, r3
 8030350:	6878      	ldr	r0, [r7, #4]
 8030352:	f7ff fe5a 	bl	803000a <HAL_I2C_AddrCallback>
}
 8030356:	e007      	b.n	8030368 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8030358:	687b      	ldr	r3, [r7, #4]
 803035a:	681b      	ldr	r3, [r3, #0]
 803035c:	2208      	movs	r2, #8
 803035e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8030360:	687b      	ldr	r3, [r7, #4]
 8030362:	2200      	movs	r2, #0
 8030364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8030368:	bf00      	nop
 803036a:	3710      	adds	r7, #16
 803036c:	46bd      	mov	sp, r7
 803036e:	bd80      	pop	{r7, pc}

08030370 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8030370:	b580      	push	{r7, lr}
 8030372:	b084      	sub	sp, #16
 8030374:	af00      	add	r7, sp, #0
 8030376:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8030378:	687b      	ldr	r3, [r7, #4]
 803037a:	681b      	ldr	r3, [r3, #0]
 803037c:	681b      	ldr	r3, [r3, #0]
 803037e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8030380:	687b      	ldr	r3, [r7, #4]
 8030382:	2200      	movs	r2, #0
 8030384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8030388:	68fb      	ldr	r3, [r7, #12]
 803038a:	0b9b      	lsrs	r3, r3, #14
 803038c:	f003 0301 	and.w	r3, r3, #1
 8030390:	2b00      	cmp	r3, #0
 8030392:	d008      	beq.n	80303a6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8030394:	687b      	ldr	r3, [r7, #4]
 8030396:	681b      	ldr	r3, [r3, #0]
 8030398:	681a      	ldr	r2, [r3, #0]
 803039a:	687b      	ldr	r3, [r7, #4]
 803039c:	681b      	ldr	r3, [r3, #0]
 803039e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80303a2:	601a      	str	r2, [r3, #0]
 80303a4:	e00d      	b.n	80303c2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80303a6:	68fb      	ldr	r3, [r7, #12]
 80303a8:	0bdb      	lsrs	r3, r3, #15
 80303aa:	f003 0301 	and.w	r3, r3, #1
 80303ae:	2b00      	cmp	r3, #0
 80303b0:	d007      	beq.n	80303c2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80303b2:	687b      	ldr	r3, [r7, #4]
 80303b4:	681b      	ldr	r3, [r3, #0]
 80303b6:	681a      	ldr	r2, [r3, #0]
 80303b8:	687b      	ldr	r3, [r7, #4]
 80303ba:	681b      	ldr	r3, [r3, #0]
 80303bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80303c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80303c2:	687b      	ldr	r3, [r7, #4]
 80303c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80303c8:	b2db      	uxtb	r3, r3
 80303ca:	2b29      	cmp	r3, #41	; 0x29
 80303cc:	d112      	bne.n	80303f4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80303ce:	687b      	ldr	r3, [r7, #4]
 80303d0:	2228      	movs	r2, #40	; 0x28
 80303d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80303d6:	687b      	ldr	r3, [r7, #4]
 80303d8:	2221      	movs	r2, #33	; 0x21
 80303da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80303dc:	2101      	movs	r1, #1
 80303de:	6878      	ldr	r0, [r7, #4]
 80303e0:	f000 fbab 	bl	8030b3a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80303e4:	687b      	ldr	r3, [r7, #4]
 80303e6:	2200      	movs	r2, #0
 80303e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80303ec:	6878      	ldr	r0, [r7, #4]
 80303ee:	f7ff fdf8 	bl	802ffe2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80303f2:	e017      	b.n	8030424 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80303f4:	687b      	ldr	r3, [r7, #4]
 80303f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80303fa:	b2db      	uxtb	r3, r3
 80303fc:	2b2a      	cmp	r3, #42	; 0x2a
 80303fe:	d111      	bne.n	8030424 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8030400:	687b      	ldr	r3, [r7, #4]
 8030402:	2228      	movs	r2, #40	; 0x28
 8030404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8030408:	687b      	ldr	r3, [r7, #4]
 803040a:	2222      	movs	r2, #34	; 0x22
 803040c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 803040e:	2102      	movs	r1, #2
 8030410:	6878      	ldr	r0, [r7, #4]
 8030412:	f000 fb92 	bl	8030b3a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8030416:	687b      	ldr	r3, [r7, #4]
 8030418:	2200      	movs	r2, #0
 803041a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 803041e:	6878      	ldr	r0, [r7, #4]
 8030420:	f7ff fde9 	bl	802fff6 <HAL_I2C_SlaveRxCpltCallback>
}
 8030424:	bf00      	nop
 8030426:	3710      	adds	r7, #16
 8030428:	46bd      	mov	sp, r7
 803042a:	bd80      	pop	{r7, pc}

0803042c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 803042c:	b580      	push	{r7, lr}
 803042e:	b086      	sub	sp, #24
 8030430:	af00      	add	r7, sp, #0
 8030432:	6078      	str	r0, [r7, #4]
 8030434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8030436:	687b      	ldr	r3, [r7, #4]
 8030438:	681b      	ldr	r3, [r3, #0]
 803043a:	681b      	ldr	r3, [r3, #0]
 803043c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 803043e:	683b      	ldr	r3, [r7, #0]
 8030440:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8030442:	687b      	ldr	r3, [r7, #4]
 8030444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030448:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 803044a:	687b      	ldr	r3, [r7, #4]
 803044c:	681b      	ldr	r3, [r3, #0]
 803044e:	2220      	movs	r2, #32
 8030450:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8030452:	7bfb      	ldrb	r3, [r7, #15]
 8030454:	2b21      	cmp	r3, #33	; 0x21
 8030456:	d002      	beq.n	803045e <I2C_ITSlaveCplt+0x32>
 8030458:	7bfb      	ldrb	r3, [r7, #15]
 803045a:	2b29      	cmp	r3, #41	; 0x29
 803045c:	d108      	bne.n	8030470 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 803045e:	f248 0101 	movw	r1, #32769	; 0x8001
 8030462:	6878      	ldr	r0, [r7, #4]
 8030464:	f000 fb69 	bl	8030b3a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8030468:	687b      	ldr	r3, [r7, #4]
 803046a:	2221      	movs	r2, #33	; 0x21
 803046c:	631a      	str	r2, [r3, #48]	; 0x30
 803046e:	e00d      	b.n	803048c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8030470:	7bfb      	ldrb	r3, [r7, #15]
 8030472:	2b22      	cmp	r3, #34	; 0x22
 8030474:	d002      	beq.n	803047c <I2C_ITSlaveCplt+0x50>
 8030476:	7bfb      	ldrb	r3, [r7, #15]
 8030478:	2b2a      	cmp	r3, #42	; 0x2a
 803047a:	d107      	bne.n	803048c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 803047c:	f248 0102 	movw	r1, #32770	; 0x8002
 8030480:	6878      	ldr	r0, [r7, #4]
 8030482:	f000 fb5a 	bl	8030b3a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8030486:	687b      	ldr	r3, [r7, #4]
 8030488:	2222      	movs	r2, #34	; 0x22
 803048a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 803048c:	687b      	ldr	r3, [r7, #4]
 803048e:	681b      	ldr	r3, [r3, #0]
 8030490:	685a      	ldr	r2, [r3, #4]
 8030492:	687b      	ldr	r3, [r7, #4]
 8030494:	681b      	ldr	r3, [r3, #0]
 8030496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 803049a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 803049c:	687b      	ldr	r3, [r7, #4]
 803049e:	681b      	ldr	r3, [r3, #0]
 80304a0:	6859      	ldr	r1, [r3, #4]
 80304a2:	687b      	ldr	r3, [r7, #4]
 80304a4:	681a      	ldr	r2, [r3, #0]
 80304a6:	4b80      	ldr	r3, [pc, #512]	; (80306a8 <I2C_ITSlaveCplt+0x27c>)
 80304a8:	400b      	ands	r3, r1
 80304aa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80304ac:	6878      	ldr	r0, [r7, #4]
 80304ae:	f000 fb02 	bl	8030ab6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80304b2:	693b      	ldr	r3, [r7, #16]
 80304b4:	0b9b      	lsrs	r3, r3, #14
 80304b6:	f003 0301 	and.w	r3, r3, #1
 80304ba:	2b00      	cmp	r3, #0
 80304bc:	d07a      	beq.n	80305b4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80304be:	687b      	ldr	r3, [r7, #4]
 80304c0:	681b      	ldr	r3, [r3, #0]
 80304c2:	681a      	ldr	r2, [r3, #0]
 80304c4:	687b      	ldr	r3, [r7, #4]
 80304c6:	681b      	ldr	r3, [r3, #0]
 80304c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80304cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80304ce:	687b      	ldr	r3, [r7, #4]
 80304d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80304d2:	2b00      	cmp	r3, #0
 80304d4:	f000 8111 	beq.w	80306fa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80304d8:	687b      	ldr	r3, [r7, #4]
 80304da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80304dc:	681b      	ldr	r3, [r3, #0]
 80304de:	4a73      	ldr	r2, [pc, #460]	; (80306ac <I2C_ITSlaveCplt+0x280>)
 80304e0:	4293      	cmp	r3, r2
 80304e2:	d059      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 80304e4:	687b      	ldr	r3, [r7, #4]
 80304e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80304e8:	681b      	ldr	r3, [r3, #0]
 80304ea:	4a71      	ldr	r2, [pc, #452]	; (80306b0 <I2C_ITSlaveCplt+0x284>)
 80304ec:	4293      	cmp	r3, r2
 80304ee:	d053      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 80304f0:	687b      	ldr	r3, [r7, #4]
 80304f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80304f4:	681b      	ldr	r3, [r3, #0]
 80304f6:	4a6f      	ldr	r2, [pc, #444]	; (80306b4 <I2C_ITSlaveCplt+0x288>)
 80304f8:	4293      	cmp	r3, r2
 80304fa:	d04d      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 80304fc:	687b      	ldr	r3, [r7, #4]
 80304fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030500:	681b      	ldr	r3, [r3, #0]
 8030502:	4a6d      	ldr	r2, [pc, #436]	; (80306b8 <I2C_ITSlaveCplt+0x28c>)
 8030504:	4293      	cmp	r3, r2
 8030506:	d047      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 8030508:	687b      	ldr	r3, [r7, #4]
 803050a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803050c:	681b      	ldr	r3, [r3, #0]
 803050e:	4a6b      	ldr	r2, [pc, #428]	; (80306bc <I2C_ITSlaveCplt+0x290>)
 8030510:	4293      	cmp	r3, r2
 8030512:	d041      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 8030514:	687b      	ldr	r3, [r7, #4]
 8030516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030518:	681b      	ldr	r3, [r3, #0]
 803051a:	4a69      	ldr	r2, [pc, #420]	; (80306c0 <I2C_ITSlaveCplt+0x294>)
 803051c:	4293      	cmp	r3, r2
 803051e:	d03b      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 8030520:	687b      	ldr	r3, [r7, #4]
 8030522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030524:	681b      	ldr	r3, [r3, #0]
 8030526:	4a67      	ldr	r2, [pc, #412]	; (80306c4 <I2C_ITSlaveCplt+0x298>)
 8030528:	4293      	cmp	r3, r2
 803052a:	d035      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 803052c:	687b      	ldr	r3, [r7, #4]
 803052e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030530:	681b      	ldr	r3, [r3, #0]
 8030532:	4a65      	ldr	r2, [pc, #404]	; (80306c8 <I2C_ITSlaveCplt+0x29c>)
 8030534:	4293      	cmp	r3, r2
 8030536:	d02f      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 8030538:	687b      	ldr	r3, [r7, #4]
 803053a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803053c:	681b      	ldr	r3, [r3, #0]
 803053e:	4a63      	ldr	r2, [pc, #396]	; (80306cc <I2C_ITSlaveCplt+0x2a0>)
 8030540:	4293      	cmp	r3, r2
 8030542:	d029      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 8030544:	687b      	ldr	r3, [r7, #4]
 8030546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030548:	681b      	ldr	r3, [r3, #0]
 803054a:	4a61      	ldr	r2, [pc, #388]	; (80306d0 <I2C_ITSlaveCplt+0x2a4>)
 803054c:	4293      	cmp	r3, r2
 803054e:	d023      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 8030550:	687b      	ldr	r3, [r7, #4]
 8030552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030554:	681b      	ldr	r3, [r3, #0]
 8030556:	4a5f      	ldr	r2, [pc, #380]	; (80306d4 <I2C_ITSlaveCplt+0x2a8>)
 8030558:	4293      	cmp	r3, r2
 803055a:	d01d      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 803055c:	687b      	ldr	r3, [r7, #4]
 803055e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030560:	681b      	ldr	r3, [r3, #0]
 8030562:	4a5d      	ldr	r2, [pc, #372]	; (80306d8 <I2C_ITSlaveCplt+0x2ac>)
 8030564:	4293      	cmp	r3, r2
 8030566:	d017      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 8030568:	687b      	ldr	r3, [r7, #4]
 803056a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803056c:	681b      	ldr	r3, [r3, #0]
 803056e:	4a5b      	ldr	r2, [pc, #364]	; (80306dc <I2C_ITSlaveCplt+0x2b0>)
 8030570:	4293      	cmp	r3, r2
 8030572:	d011      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 8030574:	687b      	ldr	r3, [r7, #4]
 8030576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030578:	681b      	ldr	r3, [r3, #0]
 803057a:	4a59      	ldr	r2, [pc, #356]	; (80306e0 <I2C_ITSlaveCplt+0x2b4>)
 803057c:	4293      	cmp	r3, r2
 803057e:	d00b      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 8030580:	687b      	ldr	r3, [r7, #4]
 8030582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030584:	681b      	ldr	r3, [r3, #0]
 8030586:	4a57      	ldr	r2, [pc, #348]	; (80306e4 <I2C_ITSlaveCplt+0x2b8>)
 8030588:	4293      	cmp	r3, r2
 803058a:	d005      	beq.n	8030598 <I2C_ITSlaveCplt+0x16c>
 803058c:	687b      	ldr	r3, [r7, #4]
 803058e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030590:	681b      	ldr	r3, [r3, #0]
 8030592:	4a55      	ldr	r2, [pc, #340]	; (80306e8 <I2C_ITSlaveCplt+0x2bc>)
 8030594:	4293      	cmp	r3, r2
 8030596:	d105      	bne.n	80305a4 <I2C_ITSlaveCplt+0x178>
 8030598:	687b      	ldr	r3, [r7, #4]
 803059a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803059c:	681b      	ldr	r3, [r3, #0]
 803059e:	685b      	ldr	r3, [r3, #4]
 80305a0:	b29b      	uxth	r3, r3
 80305a2:	e004      	b.n	80305ae <I2C_ITSlaveCplt+0x182>
 80305a4:	687b      	ldr	r3, [r7, #4]
 80305a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80305a8:	681b      	ldr	r3, [r3, #0]
 80305aa:	685b      	ldr	r3, [r3, #4]
 80305ac:	b29b      	uxth	r3, r3
 80305ae:	687a      	ldr	r2, [r7, #4]
 80305b0:	8553      	strh	r3, [r2, #42]	; 0x2a
 80305b2:	e0a2      	b.n	80306fa <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80305b4:	693b      	ldr	r3, [r7, #16]
 80305b6:	0bdb      	lsrs	r3, r3, #15
 80305b8:	f003 0301 	and.w	r3, r3, #1
 80305bc:	2b00      	cmp	r3, #0
 80305be:	f000 809c 	beq.w	80306fa <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80305c2:	687b      	ldr	r3, [r7, #4]
 80305c4:	681b      	ldr	r3, [r3, #0]
 80305c6:	681a      	ldr	r2, [r3, #0]
 80305c8:	687b      	ldr	r3, [r7, #4]
 80305ca:	681b      	ldr	r3, [r3, #0]
 80305cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80305d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80305d2:	687b      	ldr	r3, [r7, #4]
 80305d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80305d6:	2b00      	cmp	r3, #0
 80305d8:	f000 808f 	beq.w	80306fa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80305dc:	687b      	ldr	r3, [r7, #4]
 80305de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80305e0:	681b      	ldr	r3, [r3, #0]
 80305e2:	4a32      	ldr	r2, [pc, #200]	; (80306ac <I2C_ITSlaveCplt+0x280>)
 80305e4:	4293      	cmp	r3, r2
 80305e6:	d059      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 80305e8:	687b      	ldr	r3, [r7, #4]
 80305ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80305ec:	681b      	ldr	r3, [r3, #0]
 80305ee:	4a30      	ldr	r2, [pc, #192]	; (80306b0 <I2C_ITSlaveCplt+0x284>)
 80305f0:	4293      	cmp	r3, r2
 80305f2:	d053      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 80305f4:	687b      	ldr	r3, [r7, #4]
 80305f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80305f8:	681b      	ldr	r3, [r3, #0]
 80305fa:	4a2e      	ldr	r2, [pc, #184]	; (80306b4 <I2C_ITSlaveCplt+0x288>)
 80305fc:	4293      	cmp	r3, r2
 80305fe:	d04d      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 8030600:	687b      	ldr	r3, [r7, #4]
 8030602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030604:	681b      	ldr	r3, [r3, #0]
 8030606:	4a2c      	ldr	r2, [pc, #176]	; (80306b8 <I2C_ITSlaveCplt+0x28c>)
 8030608:	4293      	cmp	r3, r2
 803060a:	d047      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 803060c:	687b      	ldr	r3, [r7, #4]
 803060e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030610:	681b      	ldr	r3, [r3, #0]
 8030612:	4a2a      	ldr	r2, [pc, #168]	; (80306bc <I2C_ITSlaveCplt+0x290>)
 8030614:	4293      	cmp	r3, r2
 8030616:	d041      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 8030618:	687b      	ldr	r3, [r7, #4]
 803061a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803061c:	681b      	ldr	r3, [r3, #0]
 803061e:	4a28      	ldr	r2, [pc, #160]	; (80306c0 <I2C_ITSlaveCplt+0x294>)
 8030620:	4293      	cmp	r3, r2
 8030622:	d03b      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 8030624:	687b      	ldr	r3, [r7, #4]
 8030626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030628:	681b      	ldr	r3, [r3, #0]
 803062a:	4a26      	ldr	r2, [pc, #152]	; (80306c4 <I2C_ITSlaveCplt+0x298>)
 803062c:	4293      	cmp	r3, r2
 803062e:	d035      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 8030630:	687b      	ldr	r3, [r7, #4]
 8030632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030634:	681b      	ldr	r3, [r3, #0]
 8030636:	4a24      	ldr	r2, [pc, #144]	; (80306c8 <I2C_ITSlaveCplt+0x29c>)
 8030638:	4293      	cmp	r3, r2
 803063a:	d02f      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 803063c:	687b      	ldr	r3, [r7, #4]
 803063e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030640:	681b      	ldr	r3, [r3, #0]
 8030642:	4a22      	ldr	r2, [pc, #136]	; (80306cc <I2C_ITSlaveCplt+0x2a0>)
 8030644:	4293      	cmp	r3, r2
 8030646:	d029      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 8030648:	687b      	ldr	r3, [r7, #4]
 803064a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803064c:	681b      	ldr	r3, [r3, #0]
 803064e:	4a20      	ldr	r2, [pc, #128]	; (80306d0 <I2C_ITSlaveCplt+0x2a4>)
 8030650:	4293      	cmp	r3, r2
 8030652:	d023      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 8030654:	687b      	ldr	r3, [r7, #4]
 8030656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030658:	681b      	ldr	r3, [r3, #0]
 803065a:	4a1e      	ldr	r2, [pc, #120]	; (80306d4 <I2C_ITSlaveCplt+0x2a8>)
 803065c:	4293      	cmp	r3, r2
 803065e:	d01d      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 8030660:	687b      	ldr	r3, [r7, #4]
 8030662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030664:	681b      	ldr	r3, [r3, #0]
 8030666:	4a1c      	ldr	r2, [pc, #112]	; (80306d8 <I2C_ITSlaveCplt+0x2ac>)
 8030668:	4293      	cmp	r3, r2
 803066a:	d017      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 803066c:	687b      	ldr	r3, [r7, #4]
 803066e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030670:	681b      	ldr	r3, [r3, #0]
 8030672:	4a1a      	ldr	r2, [pc, #104]	; (80306dc <I2C_ITSlaveCplt+0x2b0>)
 8030674:	4293      	cmp	r3, r2
 8030676:	d011      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 8030678:	687b      	ldr	r3, [r7, #4]
 803067a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803067c:	681b      	ldr	r3, [r3, #0]
 803067e:	4a18      	ldr	r2, [pc, #96]	; (80306e0 <I2C_ITSlaveCplt+0x2b4>)
 8030680:	4293      	cmp	r3, r2
 8030682:	d00b      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 8030684:	687b      	ldr	r3, [r7, #4]
 8030686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030688:	681b      	ldr	r3, [r3, #0]
 803068a:	4a16      	ldr	r2, [pc, #88]	; (80306e4 <I2C_ITSlaveCplt+0x2b8>)
 803068c:	4293      	cmp	r3, r2
 803068e:	d005      	beq.n	803069c <I2C_ITSlaveCplt+0x270>
 8030690:	687b      	ldr	r3, [r7, #4]
 8030692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030694:	681b      	ldr	r3, [r3, #0]
 8030696:	4a14      	ldr	r2, [pc, #80]	; (80306e8 <I2C_ITSlaveCplt+0x2bc>)
 8030698:	4293      	cmp	r3, r2
 803069a:	d127      	bne.n	80306ec <I2C_ITSlaveCplt+0x2c0>
 803069c:	687b      	ldr	r3, [r7, #4]
 803069e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80306a0:	681b      	ldr	r3, [r3, #0]
 80306a2:	685b      	ldr	r3, [r3, #4]
 80306a4:	b29b      	uxth	r3, r3
 80306a6:	e026      	b.n	80306f6 <I2C_ITSlaveCplt+0x2ca>
 80306a8:	fe00e800 	.word	0xfe00e800
 80306ac:	40020010 	.word	0x40020010
 80306b0:	40020028 	.word	0x40020028
 80306b4:	40020040 	.word	0x40020040
 80306b8:	40020058 	.word	0x40020058
 80306bc:	40020070 	.word	0x40020070
 80306c0:	40020088 	.word	0x40020088
 80306c4:	400200a0 	.word	0x400200a0
 80306c8:	400200b8 	.word	0x400200b8
 80306cc:	40020410 	.word	0x40020410
 80306d0:	40020428 	.word	0x40020428
 80306d4:	40020440 	.word	0x40020440
 80306d8:	40020458 	.word	0x40020458
 80306dc:	40020470 	.word	0x40020470
 80306e0:	40020488 	.word	0x40020488
 80306e4:	400204a0 	.word	0x400204a0
 80306e8:	400204b8 	.word	0x400204b8
 80306ec:	687b      	ldr	r3, [r7, #4]
 80306ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80306f0:	681b      	ldr	r3, [r3, #0]
 80306f2:	685b      	ldr	r3, [r3, #4]
 80306f4:	b29b      	uxth	r3, r3
 80306f6:	687a      	ldr	r2, [r7, #4]
 80306f8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80306fa:	697b      	ldr	r3, [r7, #20]
 80306fc:	089b      	lsrs	r3, r3, #2
 80306fe:	f003 0301 	and.w	r3, r3, #1
 8030702:	2b00      	cmp	r3, #0
 8030704:	d020      	beq.n	8030748 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8030706:	697b      	ldr	r3, [r7, #20]
 8030708:	f023 0304 	bic.w	r3, r3, #4
 803070c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 803070e:	687b      	ldr	r3, [r7, #4]
 8030710:	681b      	ldr	r3, [r3, #0]
 8030712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8030714:	687b      	ldr	r3, [r7, #4]
 8030716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030718:	b2d2      	uxtb	r2, r2
 803071a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 803071c:	687b      	ldr	r3, [r7, #4]
 803071e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030720:	1c5a      	adds	r2, r3, #1
 8030722:	687b      	ldr	r3, [r7, #4]
 8030724:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8030726:	687b      	ldr	r3, [r7, #4]
 8030728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803072a:	2b00      	cmp	r3, #0
 803072c:	d00c      	beq.n	8030748 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 803072e:	687b      	ldr	r3, [r7, #4]
 8030730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030732:	3b01      	subs	r3, #1
 8030734:	b29a      	uxth	r2, r3
 8030736:	687b      	ldr	r3, [r7, #4]
 8030738:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 803073a:	687b      	ldr	r3, [r7, #4]
 803073c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803073e:	b29b      	uxth	r3, r3
 8030740:	3b01      	subs	r3, #1
 8030742:	b29a      	uxth	r2, r3
 8030744:	687b      	ldr	r3, [r7, #4]
 8030746:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8030748:	687b      	ldr	r3, [r7, #4]
 803074a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803074c:	b29b      	uxth	r3, r3
 803074e:	2b00      	cmp	r3, #0
 8030750:	d005      	beq.n	803075e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8030752:	687b      	ldr	r3, [r7, #4]
 8030754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030756:	f043 0204 	orr.w	r2, r3, #4
 803075a:	687b      	ldr	r3, [r7, #4]
 803075c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 803075e:	687b      	ldr	r3, [r7, #4]
 8030760:	2200      	movs	r2, #0
 8030762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8030766:	687b      	ldr	r3, [r7, #4]
 8030768:	2200      	movs	r2, #0
 803076a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 803076c:	687b      	ldr	r3, [r7, #4]
 803076e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030770:	2b00      	cmp	r3, #0
 8030772:	d010      	beq.n	8030796 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8030774:	687b      	ldr	r3, [r7, #4]
 8030776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030778:	4619      	mov	r1, r3
 803077a:	6878      	ldr	r0, [r7, #4]
 803077c:	f000 f8a4 	bl	80308c8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8030780:	687b      	ldr	r3, [r7, #4]
 8030782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030786:	b2db      	uxtb	r3, r3
 8030788:	2b28      	cmp	r3, #40	; 0x28
 803078a:	d141      	bne.n	8030810 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 803078c:	6979      	ldr	r1, [r7, #20]
 803078e:	6878      	ldr	r0, [r7, #4]
 8030790:	f000 f844 	bl	803081c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8030794:	e03c      	b.n	8030810 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8030796:	687b      	ldr	r3, [r7, #4]
 8030798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803079a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 803079e:	d014      	beq.n	80307ca <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80307a0:	6878      	ldr	r0, [r7, #4]
 80307a2:	f7ff fde5 	bl	8030370 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80307a6:	687b      	ldr	r3, [r7, #4]
 80307a8:	4a1b      	ldr	r2, [pc, #108]	; (8030818 <I2C_ITSlaveCplt+0x3ec>)
 80307aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80307ac:	687b      	ldr	r3, [r7, #4]
 80307ae:	2220      	movs	r2, #32
 80307b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80307b4:	687b      	ldr	r3, [r7, #4]
 80307b6:	2200      	movs	r2, #0
 80307b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80307ba:	687b      	ldr	r3, [r7, #4]
 80307bc:	2200      	movs	r2, #0
 80307be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80307c2:	6878      	ldr	r0, [r7, #4]
 80307c4:	f7ff fc2f 	bl	8030026 <HAL_I2C_ListenCpltCallback>
}
 80307c8:	e022      	b.n	8030810 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80307ca:	687b      	ldr	r3, [r7, #4]
 80307cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80307d0:	b2db      	uxtb	r3, r3
 80307d2:	2b22      	cmp	r3, #34	; 0x22
 80307d4:	d10e      	bne.n	80307f4 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 80307d6:	687b      	ldr	r3, [r7, #4]
 80307d8:	2220      	movs	r2, #32
 80307da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80307de:	687b      	ldr	r3, [r7, #4]
 80307e0:	2200      	movs	r2, #0
 80307e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80307e4:	687b      	ldr	r3, [r7, #4]
 80307e6:	2200      	movs	r2, #0
 80307e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80307ec:	6878      	ldr	r0, [r7, #4]
 80307ee:	f7ff fc02 	bl	802fff6 <HAL_I2C_SlaveRxCpltCallback>
}
 80307f2:	e00d      	b.n	8030810 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80307f4:	687b      	ldr	r3, [r7, #4]
 80307f6:	2220      	movs	r2, #32
 80307f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80307fc:	687b      	ldr	r3, [r7, #4]
 80307fe:	2200      	movs	r2, #0
 8030800:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8030802:	687b      	ldr	r3, [r7, #4]
 8030804:	2200      	movs	r2, #0
 8030806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 803080a:	6878      	ldr	r0, [r7, #4]
 803080c:	f7ff fbe9 	bl	802ffe2 <HAL_I2C_SlaveTxCpltCallback>
}
 8030810:	bf00      	nop
 8030812:	3718      	adds	r7, #24
 8030814:	46bd      	mov	sp, r7
 8030816:	bd80      	pop	{r7, pc}
 8030818:	ffff0000 	.word	0xffff0000

0803081c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 803081c:	b580      	push	{r7, lr}
 803081e:	b082      	sub	sp, #8
 8030820:	af00      	add	r7, sp, #0
 8030822:	6078      	str	r0, [r7, #4]
 8030824:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8030826:	687b      	ldr	r3, [r7, #4]
 8030828:	4a26      	ldr	r2, [pc, #152]	; (80308c4 <I2C_ITListenCplt+0xa8>)
 803082a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 803082c:	687b      	ldr	r3, [r7, #4]
 803082e:	2200      	movs	r2, #0
 8030830:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8030832:	687b      	ldr	r3, [r7, #4]
 8030834:	2220      	movs	r2, #32
 8030836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 803083a:	687b      	ldr	r3, [r7, #4]
 803083c:	2200      	movs	r2, #0
 803083e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8030842:	687b      	ldr	r3, [r7, #4]
 8030844:	2200      	movs	r2, #0
 8030846:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8030848:	683b      	ldr	r3, [r7, #0]
 803084a:	089b      	lsrs	r3, r3, #2
 803084c:	f003 0301 	and.w	r3, r3, #1
 8030850:	2b00      	cmp	r3, #0
 8030852:	d022      	beq.n	803089a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8030854:	687b      	ldr	r3, [r7, #4]
 8030856:	681b      	ldr	r3, [r3, #0]
 8030858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 803085a:	687b      	ldr	r3, [r7, #4]
 803085c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803085e:	b2d2      	uxtb	r2, r2
 8030860:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8030862:	687b      	ldr	r3, [r7, #4]
 8030864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030866:	1c5a      	adds	r2, r3, #1
 8030868:	687b      	ldr	r3, [r7, #4]
 803086a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 803086c:	687b      	ldr	r3, [r7, #4]
 803086e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030870:	2b00      	cmp	r3, #0
 8030872:	d012      	beq.n	803089a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8030874:	687b      	ldr	r3, [r7, #4]
 8030876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8030878:	3b01      	subs	r3, #1
 803087a:	b29a      	uxth	r2, r3
 803087c:	687b      	ldr	r3, [r7, #4]
 803087e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8030880:	687b      	ldr	r3, [r7, #4]
 8030882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8030884:	b29b      	uxth	r3, r3
 8030886:	3b01      	subs	r3, #1
 8030888:	b29a      	uxth	r2, r3
 803088a:	687b      	ldr	r3, [r7, #4]
 803088c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 803088e:	687b      	ldr	r3, [r7, #4]
 8030890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030892:	f043 0204 	orr.w	r2, r3, #4
 8030896:	687b      	ldr	r3, [r7, #4]
 8030898:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 803089a:	f248 0103 	movw	r1, #32771	; 0x8003
 803089e:	6878      	ldr	r0, [r7, #4]
 80308a0:	f000 f94b 	bl	8030b3a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80308a4:	687b      	ldr	r3, [r7, #4]
 80308a6:	681b      	ldr	r3, [r3, #0]
 80308a8:	2210      	movs	r2, #16
 80308aa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80308ac:	687b      	ldr	r3, [r7, #4]
 80308ae:	2200      	movs	r2, #0
 80308b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80308b4:	6878      	ldr	r0, [r7, #4]
 80308b6:	f7ff fbb6 	bl	8030026 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80308ba:	bf00      	nop
 80308bc:	3708      	adds	r7, #8
 80308be:	46bd      	mov	sp, r7
 80308c0:	bd80      	pop	{r7, pc}
 80308c2:	bf00      	nop
 80308c4:	ffff0000 	.word	0xffff0000

080308c8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80308c8:	b580      	push	{r7, lr}
 80308ca:	b084      	sub	sp, #16
 80308cc:	af00      	add	r7, sp, #0
 80308ce:	6078      	str	r0, [r7, #4]
 80308d0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80308d2:	687b      	ldr	r3, [r7, #4]
 80308d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80308d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80308da:	687b      	ldr	r3, [r7, #4]
 80308dc:	2200      	movs	r2, #0
 80308de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80308e2:	687b      	ldr	r3, [r7, #4]
 80308e4:	4a5d      	ldr	r2, [pc, #372]	; (8030a5c <I2C_ITError+0x194>)
 80308e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80308e8:	687b      	ldr	r3, [r7, #4]
 80308ea:	2200      	movs	r2, #0
 80308ec:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80308ee:	687b      	ldr	r3, [r7, #4]
 80308f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80308f2:	683b      	ldr	r3, [r7, #0]
 80308f4:	431a      	orrs	r2, r3
 80308f6:	687b      	ldr	r3, [r7, #4]
 80308f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80308fa:	7bfb      	ldrb	r3, [r7, #15]
 80308fc:	2b28      	cmp	r3, #40	; 0x28
 80308fe:	d005      	beq.n	803090c <I2C_ITError+0x44>
 8030900:	7bfb      	ldrb	r3, [r7, #15]
 8030902:	2b29      	cmp	r3, #41	; 0x29
 8030904:	d002      	beq.n	803090c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8030906:	7bfb      	ldrb	r3, [r7, #15]
 8030908:	2b2a      	cmp	r3, #42	; 0x2a
 803090a:	d10b      	bne.n	8030924 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 803090c:	2103      	movs	r1, #3
 803090e:	6878      	ldr	r0, [r7, #4]
 8030910:	f000 f913 	bl	8030b3a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8030914:	687b      	ldr	r3, [r7, #4]
 8030916:	2228      	movs	r2, #40	; 0x28
 8030918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 803091c:	687b      	ldr	r3, [r7, #4]
 803091e:	4a50      	ldr	r2, [pc, #320]	; (8030a60 <I2C_ITError+0x198>)
 8030920:	635a      	str	r2, [r3, #52]	; 0x34
 8030922:	e011      	b.n	8030948 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8030924:	f248 0103 	movw	r1, #32771	; 0x8003
 8030928:	6878      	ldr	r0, [r7, #4]
 803092a:	f000 f906 	bl	8030b3a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 803092e:	687b      	ldr	r3, [r7, #4]
 8030930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030934:	b2db      	uxtb	r3, r3
 8030936:	2b60      	cmp	r3, #96	; 0x60
 8030938:	d003      	beq.n	8030942 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 803093a:	687b      	ldr	r3, [r7, #4]
 803093c:	2220      	movs	r2, #32
 803093e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8030942:	687b      	ldr	r3, [r7, #4]
 8030944:	2200      	movs	r2, #0
 8030946:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8030948:	687b      	ldr	r3, [r7, #4]
 803094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803094c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 803094e:	687b      	ldr	r3, [r7, #4]
 8030950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030952:	2b00      	cmp	r3, #0
 8030954:	d039      	beq.n	80309ca <I2C_ITError+0x102>
 8030956:	68bb      	ldr	r3, [r7, #8]
 8030958:	2b11      	cmp	r3, #17
 803095a:	d002      	beq.n	8030962 <I2C_ITError+0x9a>
 803095c:	68bb      	ldr	r3, [r7, #8]
 803095e:	2b21      	cmp	r3, #33	; 0x21
 8030960:	d133      	bne.n	80309ca <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8030962:	687b      	ldr	r3, [r7, #4]
 8030964:	681b      	ldr	r3, [r3, #0]
 8030966:	681b      	ldr	r3, [r3, #0]
 8030968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 803096c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8030970:	d107      	bne.n	8030982 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8030972:	687b      	ldr	r3, [r7, #4]
 8030974:	681b      	ldr	r3, [r3, #0]
 8030976:	681a      	ldr	r2, [r3, #0]
 8030978:	687b      	ldr	r3, [r7, #4]
 803097a:	681b      	ldr	r3, [r3, #0]
 803097c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8030980:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8030982:	687b      	ldr	r3, [r7, #4]
 8030984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030986:	4618      	mov	r0, r3
 8030988:	f7fe fc54 	bl	802f234 <HAL_DMA_GetState>
 803098c:	4603      	mov	r3, r0
 803098e:	2b01      	cmp	r3, #1
 8030990:	d017      	beq.n	80309c2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8030992:	687b      	ldr	r3, [r7, #4]
 8030994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030996:	4a33      	ldr	r2, [pc, #204]	; (8030a64 <I2C_ITError+0x19c>)
 8030998:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 803099a:	687b      	ldr	r3, [r7, #4]
 803099c:	2200      	movs	r2, #0
 803099e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80309a2:	687b      	ldr	r3, [r7, #4]
 80309a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80309a6:	4618      	mov	r0, r3
 80309a8:	f7fd fad4 	bl	802df54 <HAL_DMA_Abort_IT>
 80309ac:	4603      	mov	r3, r0
 80309ae:	2b00      	cmp	r3, #0
 80309b0:	d04d      	beq.n	8030a4e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80309b2:	687b      	ldr	r3, [r7, #4]
 80309b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80309b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80309b8:	687a      	ldr	r2, [r7, #4]
 80309ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80309bc:	4610      	mov	r0, r2
 80309be:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80309c0:	e045      	b.n	8030a4e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80309c2:	6878      	ldr	r0, [r7, #4]
 80309c4:	f000 f850 	bl	8030a68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80309c8:	e041      	b.n	8030a4e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80309ca:	687b      	ldr	r3, [r7, #4]
 80309cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80309ce:	2b00      	cmp	r3, #0
 80309d0:	d039      	beq.n	8030a46 <I2C_ITError+0x17e>
 80309d2:	68bb      	ldr	r3, [r7, #8]
 80309d4:	2b12      	cmp	r3, #18
 80309d6:	d002      	beq.n	80309de <I2C_ITError+0x116>
 80309d8:	68bb      	ldr	r3, [r7, #8]
 80309da:	2b22      	cmp	r3, #34	; 0x22
 80309dc:	d133      	bne.n	8030a46 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80309de:	687b      	ldr	r3, [r7, #4]
 80309e0:	681b      	ldr	r3, [r3, #0]
 80309e2:	681b      	ldr	r3, [r3, #0]
 80309e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80309e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80309ec:	d107      	bne.n	80309fe <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80309ee:	687b      	ldr	r3, [r7, #4]
 80309f0:	681b      	ldr	r3, [r3, #0]
 80309f2:	681a      	ldr	r2, [r3, #0]
 80309f4:	687b      	ldr	r3, [r7, #4]
 80309f6:	681b      	ldr	r3, [r3, #0]
 80309f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80309fc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80309fe:	687b      	ldr	r3, [r7, #4]
 8030a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030a02:	4618      	mov	r0, r3
 8030a04:	f7fe fc16 	bl	802f234 <HAL_DMA_GetState>
 8030a08:	4603      	mov	r3, r0
 8030a0a:	2b01      	cmp	r3, #1
 8030a0c:	d017      	beq.n	8030a3e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8030a0e:	687b      	ldr	r3, [r7, #4]
 8030a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030a12:	4a14      	ldr	r2, [pc, #80]	; (8030a64 <I2C_ITError+0x19c>)
 8030a14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8030a16:	687b      	ldr	r3, [r7, #4]
 8030a18:	2200      	movs	r2, #0
 8030a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8030a1e:	687b      	ldr	r3, [r7, #4]
 8030a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030a22:	4618      	mov	r0, r3
 8030a24:	f7fd fa96 	bl	802df54 <HAL_DMA_Abort_IT>
 8030a28:	4603      	mov	r3, r0
 8030a2a:	2b00      	cmp	r3, #0
 8030a2c:	d011      	beq.n	8030a52 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8030a2e:	687b      	ldr	r3, [r7, #4]
 8030a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8030a34:	687a      	ldr	r2, [r7, #4]
 8030a36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8030a38:	4610      	mov	r0, r2
 8030a3a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8030a3c:	e009      	b.n	8030a52 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8030a3e:	6878      	ldr	r0, [r7, #4]
 8030a40:	f000 f812 	bl	8030a68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8030a44:	e005      	b.n	8030a52 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8030a46:	6878      	ldr	r0, [r7, #4]
 8030a48:	f000 f80e 	bl	8030a68 <I2C_TreatErrorCallback>
  }
}
 8030a4c:	e002      	b.n	8030a54 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8030a4e:	bf00      	nop
 8030a50:	e000      	b.n	8030a54 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8030a52:	bf00      	nop
}
 8030a54:	bf00      	nop
 8030a56:	3710      	adds	r7, #16
 8030a58:	46bd      	mov	sp, r7
 8030a5a:	bd80      	pop	{r7, pc}
 8030a5c:	ffff0000 	.word	0xffff0000
 8030a60:	08030063 	.word	0x08030063
 8030a64:	08030aff 	.word	0x08030aff

08030a68 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8030a68:	b580      	push	{r7, lr}
 8030a6a:	b082      	sub	sp, #8
 8030a6c:	af00      	add	r7, sp, #0
 8030a6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8030a70:	687b      	ldr	r3, [r7, #4]
 8030a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030a76:	b2db      	uxtb	r3, r3
 8030a78:	2b60      	cmp	r3, #96	; 0x60
 8030a7a:	d10e      	bne.n	8030a9a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8030a7c:	687b      	ldr	r3, [r7, #4]
 8030a7e:	2220      	movs	r2, #32
 8030a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8030a84:	687b      	ldr	r3, [r7, #4]
 8030a86:	2200      	movs	r2, #0
 8030a88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030a8a:	687b      	ldr	r3, [r7, #4]
 8030a8c:	2200      	movs	r2, #0
 8030a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8030a92:	6878      	ldr	r0, [r7, #4]
 8030a94:	f7ff fadb 	bl	803004e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8030a98:	e009      	b.n	8030aae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8030a9a:	687b      	ldr	r3, [r7, #4]
 8030a9c:	2200      	movs	r2, #0
 8030a9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8030aa0:	687b      	ldr	r3, [r7, #4]
 8030aa2:	2200      	movs	r2, #0
 8030aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8030aa8:	6878      	ldr	r0, [r7, #4]
 8030aaa:	f7ff fac6 	bl	803003a <HAL_I2C_ErrorCallback>
}
 8030aae:	bf00      	nop
 8030ab0:	3708      	adds	r7, #8
 8030ab2:	46bd      	mov	sp, r7
 8030ab4:	bd80      	pop	{r7, pc}

08030ab6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8030ab6:	b480      	push	{r7}
 8030ab8:	b083      	sub	sp, #12
 8030aba:	af00      	add	r7, sp, #0
 8030abc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8030abe:	687b      	ldr	r3, [r7, #4]
 8030ac0:	681b      	ldr	r3, [r3, #0]
 8030ac2:	699b      	ldr	r3, [r3, #24]
 8030ac4:	f003 0302 	and.w	r3, r3, #2
 8030ac8:	2b02      	cmp	r3, #2
 8030aca:	d103      	bne.n	8030ad4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8030acc:	687b      	ldr	r3, [r7, #4]
 8030ace:	681b      	ldr	r3, [r3, #0]
 8030ad0:	2200      	movs	r2, #0
 8030ad2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8030ad4:	687b      	ldr	r3, [r7, #4]
 8030ad6:	681b      	ldr	r3, [r3, #0]
 8030ad8:	699b      	ldr	r3, [r3, #24]
 8030ada:	f003 0301 	and.w	r3, r3, #1
 8030ade:	2b01      	cmp	r3, #1
 8030ae0:	d007      	beq.n	8030af2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8030ae2:	687b      	ldr	r3, [r7, #4]
 8030ae4:	681b      	ldr	r3, [r3, #0]
 8030ae6:	699a      	ldr	r2, [r3, #24]
 8030ae8:	687b      	ldr	r3, [r7, #4]
 8030aea:	681b      	ldr	r3, [r3, #0]
 8030aec:	f042 0201 	orr.w	r2, r2, #1
 8030af0:	619a      	str	r2, [r3, #24]
  }
}
 8030af2:	bf00      	nop
 8030af4:	370c      	adds	r7, #12
 8030af6:	46bd      	mov	sp, r7
 8030af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030afc:	4770      	bx	lr

08030afe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8030afe:	b580      	push	{r7, lr}
 8030b00:	b084      	sub	sp, #16
 8030b02:	af00      	add	r7, sp, #0
 8030b04:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8030b06:	687b      	ldr	r3, [r7, #4]
 8030b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030b0a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8030b0c:	68fb      	ldr	r3, [r7, #12]
 8030b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030b10:	2b00      	cmp	r3, #0
 8030b12:	d003      	beq.n	8030b1c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8030b14:	68fb      	ldr	r3, [r7, #12]
 8030b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030b18:	2200      	movs	r2, #0
 8030b1a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8030b1c:	68fb      	ldr	r3, [r7, #12]
 8030b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030b20:	2b00      	cmp	r3, #0
 8030b22:	d003      	beq.n	8030b2c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8030b24:	68fb      	ldr	r3, [r7, #12]
 8030b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030b28:	2200      	movs	r2, #0
 8030b2a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8030b2c:	68f8      	ldr	r0, [r7, #12]
 8030b2e:	f7ff ff9b 	bl	8030a68 <I2C_TreatErrorCallback>
}
 8030b32:	bf00      	nop
 8030b34:	3710      	adds	r7, #16
 8030b36:	46bd      	mov	sp, r7
 8030b38:	bd80      	pop	{r7, pc}

08030b3a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8030b3a:	b480      	push	{r7}
 8030b3c:	b085      	sub	sp, #20
 8030b3e:	af00      	add	r7, sp, #0
 8030b40:	6078      	str	r0, [r7, #4]
 8030b42:	460b      	mov	r3, r1
 8030b44:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8030b46:	2300      	movs	r3, #0
 8030b48:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8030b4a:	887b      	ldrh	r3, [r7, #2]
 8030b4c:	f003 0301 	and.w	r3, r3, #1
 8030b50:	2b00      	cmp	r3, #0
 8030b52:	d00f      	beq.n	8030b74 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8030b54:	68fb      	ldr	r3, [r7, #12]
 8030b56:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8030b5a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8030b5c:	687b      	ldr	r3, [r7, #4]
 8030b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030b62:	b2db      	uxtb	r3, r3
 8030b64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8030b68:	2b28      	cmp	r3, #40	; 0x28
 8030b6a:	d003      	beq.n	8030b74 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8030b6c:	68fb      	ldr	r3, [r7, #12]
 8030b6e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8030b72:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8030b74:	887b      	ldrh	r3, [r7, #2]
 8030b76:	f003 0302 	and.w	r3, r3, #2
 8030b7a:	2b00      	cmp	r3, #0
 8030b7c:	d00f      	beq.n	8030b9e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8030b7e:	68fb      	ldr	r3, [r7, #12]
 8030b80:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8030b84:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8030b86:	687b      	ldr	r3, [r7, #4]
 8030b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030b8c:	b2db      	uxtb	r3, r3
 8030b8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8030b92:	2b28      	cmp	r3, #40	; 0x28
 8030b94:	d003      	beq.n	8030b9e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8030b96:	68fb      	ldr	r3, [r7, #12]
 8030b98:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8030b9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8030b9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8030ba2:	2b00      	cmp	r3, #0
 8030ba4:	da03      	bge.n	8030bae <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8030ba6:	68fb      	ldr	r3, [r7, #12]
 8030ba8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8030bac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8030bae:	887b      	ldrh	r3, [r7, #2]
 8030bb0:	2b10      	cmp	r3, #16
 8030bb2:	d103      	bne.n	8030bbc <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8030bb4:	68fb      	ldr	r3, [r7, #12]
 8030bb6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8030bba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8030bbc:	887b      	ldrh	r3, [r7, #2]
 8030bbe:	2b20      	cmp	r3, #32
 8030bc0:	d103      	bne.n	8030bca <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8030bc2:	68fb      	ldr	r3, [r7, #12]
 8030bc4:	f043 0320 	orr.w	r3, r3, #32
 8030bc8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8030bca:	887b      	ldrh	r3, [r7, #2]
 8030bcc:	2b40      	cmp	r3, #64	; 0x40
 8030bce:	d103      	bne.n	8030bd8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8030bd0:	68fb      	ldr	r3, [r7, #12]
 8030bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8030bd8:	687b      	ldr	r3, [r7, #4]
 8030bda:	681b      	ldr	r3, [r3, #0]
 8030bdc:	6819      	ldr	r1, [r3, #0]
 8030bde:	68fb      	ldr	r3, [r7, #12]
 8030be0:	43da      	mvns	r2, r3
 8030be2:	687b      	ldr	r3, [r7, #4]
 8030be4:	681b      	ldr	r3, [r3, #0]
 8030be6:	400a      	ands	r2, r1
 8030be8:	601a      	str	r2, [r3, #0]
}
 8030bea:	bf00      	nop
 8030bec:	3714      	adds	r7, #20
 8030bee:	46bd      	mov	sp, r7
 8030bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030bf4:	4770      	bx	lr

08030bf6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8030bf6:	b480      	push	{r7}
 8030bf8:	b083      	sub	sp, #12
 8030bfa:	af00      	add	r7, sp, #0
 8030bfc:	6078      	str	r0, [r7, #4]
 8030bfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8030c00:	687b      	ldr	r3, [r7, #4]
 8030c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030c06:	b2db      	uxtb	r3, r3
 8030c08:	2b20      	cmp	r3, #32
 8030c0a:	d138      	bne.n	8030c7e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8030c0c:	687b      	ldr	r3, [r7, #4]
 8030c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8030c12:	2b01      	cmp	r3, #1
 8030c14:	d101      	bne.n	8030c1a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8030c16:	2302      	movs	r3, #2
 8030c18:	e032      	b.n	8030c80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8030c1a:	687b      	ldr	r3, [r7, #4]
 8030c1c:	2201      	movs	r2, #1
 8030c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8030c22:	687b      	ldr	r3, [r7, #4]
 8030c24:	2224      	movs	r2, #36	; 0x24
 8030c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8030c2a:	687b      	ldr	r3, [r7, #4]
 8030c2c:	681b      	ldr	r3, [r3, #0]
 8030c2e:	681a      	ldr	r2, [r3, #0]
 8030c30:	687b      	ldr	r3, [r7, #4]
 8030c32:	681b      	ldr	r3, [r3, #0]
 8030c34:	f022 0201 	bic.w	r2, r2, #1
 8030c38:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8030c3a:	687b      	ldr	r3, [r7, #4]
 8030c3c:	681b      	ldr	r3, [r3, #0]
 8030c3e:	681a      	ldr	r2, [r3, #0]
 8030c40:	687b      	ldr	r3, [r7, #4]
 8030c42:	681b      	ldr	r3, [r3, #0]
 8030c44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8030c48:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8030c4a:	687b      	ldr	r3, [r7, #4]
 8030c4c:	681b      	ldr	r3, [r3, #0]
 8030c4e:	6819      	ldr	r1, [r3, #0]
 8030c50:	687b      	ldr	r3, [r7, #4]
 8030c52:	681b      	ldr	r3, [r3, #0]
 8030c54:	683a      	ldr	r2, [r7, #0]
 8030c56:	430a      	orrs	r2, r1
 8030c58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8030c5a:	687b      	ldr	r3, [r7, #4]
 8030c5c:	681b      	ldr	r3, [r3, #0]
 8030c5e:	681a      	ldr	r2, [r3, #0]
 8030c60:	687b      	ldr	r3, [r7, #4]
 8030c62:	681b      	ldr	r3, [r3, #0]
 8030c64:	f042 0201 	orr.w	r2, r2, #1
 8030c68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8030c6a:	687b      	ldr	r3, [r7, #4]
 8030c6c:	2220      	movs	r2, #32
 8030c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030c72:	687b      	ldr	r3, [r7, #4]
 8030c74:	2200      	movs	r2, #0
 8030c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8030c7a:	2300      	movs	r3, #0
 8030c7c:	e000      	b.n	8030c80 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8030c7e:	2302      	movs	r3, #2
  }
}
 8030c80:	4618      	mov	r0, r3
 8030c82:	370c      	adds	r7, #12
 8030c84:	46bd      	mov	sp, r7
 8030c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030c8a:	4770      	bx	lr

08030c8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8030c8c:	b480      	push	{r7}
 8030c8e:	b085      	sub	sp, #20
 8030c90:	af00      	add	r7, sp, #0
 8030c92:	6078      	str	r0, [r7, #4]
 8030c94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8030c96:	687b      	ldr	r3, [r7, #4]
 8030c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8030c9c:	b2db      	uxtb	r3, r3
 8030c9e:	2b20      	cmp	r3, #32
 8030ca0:	d139      	bne.n	8030d16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8030ca2:	687b      	ldr	r3, [r7, #4]
 8030ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8030ca8:	2b01      	cmp	r3, #1
 8030caa:	d101      	bne.n	8030cb0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8030cac:	2302      	movs	r3, #2
 8030cae:	e033      	b.n	8030d18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8030cb0:	687b      	ldr	r3, [r7, #4]
 8030cb2:	2201      	movs	r2, #1
 8030cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8030cb8:	687b      	ldr	r3, [r7, #4]
 8030cba:	2224      	movs	r2, #36	; 0x24
 8030cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8030cc0:	687b      	ldr	r3, [r7, #4]
 8030cc2:	681b      	ldr	r3, [r3, #0]
 8030cc4:	681a      	ldr	r2, [r3, #0]
 8030cc6:	687b      	ldr	r3, [r7, #4]
 8030cc8:	681b      	ldr	r3, [r3, #0]
 8030cca:	f022 0201 	bic.w	r2, r2, #1
 8030cce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8030cd0:	687b      	ldr	r3, [r7, #4]
 8030cd2:	681b      	ldr	r3, [r3, #0]
 8030cd4:	681b      	ldr	r3, [r3, #0]
 8030cd6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8030cd8:	68fb      	ldr	r3, [r7, #12]
 8030cda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8030cde:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8030ce0:	683b      	ldr	r3, [r7, #0]
 8030ce2:	021b      	lsls	r3, r3, #8
 8030ce4:	68fa      	ldr	r2, [r7, #12]
 8030ce6:	4313      	orrs	r3, r2
 8030ce8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8030cea:	687b      	ldr	r3, [r7, #4]
 8030cec:	681b      	ldr	r3, [r3, #0]
 8030cee:	68fa      	ldr	r2, [r7, #12]
 8030cf0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8030cf2:	687b      	ldr	r3, [r7, #4]
 8030cf4:	681b      	ldr	r3, [r3, #0]
 8030cf6:	681a      	ldr	r2, [r3, #0]
 8030cf8:	687b      	ldr	r3, [r7, #4]
 8030cfa:	681b      	ldr	r3, [r3, #0]
 8030cfc:	f042 0201 	orr.w	r2, r2, #1
 8030d00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8030d02:	687b      	ldr	r3, [r7, #4]
 8030d04:	2220      	movs	r2, #32
 8030d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8030d0a:	687b      	ldr	r3, [r7, #4]
 8030d0c:	2200      	movs	r2, #0
 8030d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8030d12:	2300      	movs	r3, #0
 8030d14:	e000      	b.n	8030d18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8030d16:	2302      	movs	r3, #2
  }
}
 8030d18:	4618      	mov	r0, r3
 8030d1a:	3714      	adds	r7, #20
 8030d1c:	46bd      	mov	sp, r7
 8030d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030d22:	4770      	bx	lr

08030d24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8030d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8030d26:	b08f      	sub	sp, #60	; 0x3c
 8030d28:	af0a      	add	r7, sp, #40	; 0x28
 8030d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8030d2c:	687b      	ldr	r3, [r7, #4]
 8030d2e:	2b00      	cmp	r3, #0
 8030d30:	d101      	bne.n	8030d36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8030d32:	2301      	movs	r3, #1
 8030d34:	e116      	b.n	8030f64 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8030d36:	687b      	ldr	r3, [r7, #4]
 8030d38:	681b      	ldr	r3, [r3, #0]
 8030d3a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8030d3c:	687b      	ldr	r3, [r7, #4]
 8030d3e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8030d42:	b2db      	uxtb	r3, r3
 8030d44:	2b00      	cmp	r3, #0
 8030d46:	d106      	bne.n	8030d56 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8030d48:	687b      	ldr	r3, [r7, #4]
 8030d4a:	2200      	movs	r2, #0
 8030d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8030d50:	6878      	ldr	r0, [r7, #4]
 8030d52:	f00c f82f 	bl	803cdb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8030d56:	687b      	ldr	r3, [r7, #4]
 8030d58:	2203      	movs	r2, #3
 8030d5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8030d5e:	68bb      	ldr	r3, [r7, #8]
 8030d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030d66:	2b00      	cmp	r3, #0
 8030d68:	d102      	bne.n	8030d70 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8030d6a:	687b      	ldr	r3, [r7, #4]
 8030d6c:	2200      	movs	r2, #0
 8030d6e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8030d70:	687b      	ldr	r3, [r7, #4]
 8030d72:	681b      	ldr	r3, [r3, #0]
 8030d74:	4618      	mov	r0, r3
 8030d76:	f008 fb78 	bl	803946a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8030d7a:	687b      	ldr	r3, [r7, #4]
 8030d7c:	681b      	ldr	r3, [r3, #0]
 8030d7e:	603b      	str	r3, [r7, #0]
 8030d80:	687e      	ldr	r6, [r7, #4]
 8030d82:	466d      	mov	r5, sp
 8030d84:	f106 0410 	add.w	r4, r6, #16
 8030d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8030d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8030d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8030d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8030d90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8030d94:	e885 0003 	stmia.w	r5, {r0, r1}
 8030d98:	1d33      	adds	r3, r6, #4
 8030d9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8030d9c:	6838      	ldr	r0, [r7, #0]
 8030d9e:	f008 fa43 	bl	8039228 <USB_CoreInit>
 8030da2:	4603      	mov	r3, r0
 8030da4:	2b00      	cmp	r3, #0
 8030da6:	d005      	beq.n	8030db4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8030da8:	687b      	ldr	r3, [r7, #4]
 8030daa:	2202      	movs	r2, #2
 8030dac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8030db0:	2301      	movs	r3, #1
 8030db2:	e0d7      	b.n	8030f64 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8030db4:	687b      	ldr	r3, [r7, #4]
 8030db6:	681b      	ldr	r3, [r3, #0]
 8030db8:	2100      	movs	r1, #0
 8030dba:	4618      	mov	r0, r3
 8030dbc:	f008 fb66 	bl	803948c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8030dc0:	2300      	movs	r3, #0
 8030dc2:	73fb      	strb	r3, [r7, #15]
 8030dc4:	e04a      	b.n	8030e5c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8030dc6:	7bfa      	ldrb	r2, [r7, #15]
 8030dc8:	6879      	ldr	r1, [r7, #4]
 8030dca:	4613      	mov	r3, r2
 8030dcc:	00db      	lsls	r3, r3, #3
 8030dce:	4413      	add	r3, r2
 8030dd0:	009b      	lsls	r3, r3, #2
 8030dd2:	440b      	add	r3, r1
 8030dd4:	333d      	adds	r3, #61	; 0x3d
 8030dd6:	2201      	movs	r2, #1
 8030dd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8030dda:	7bfa      	ldrb	r2, [r7, #15]
 8030ddc:	6879      	ldr	r1, [r7, #4]
 8030dde:	4613      	mov	r3, r2
 8030de0:	00db      	lsls	r3, r3, #3
 8030de2:	4413      	add	r3, r2
 8030de4:	009b      	lsls	r3, r3, #2
 8030de6:	440b      	add	r3, r1
 8030de8:	333c      	adds	r3, #60	; 0x3c
 8030dea:	7bfa      	ldrb	r2, [r7, #15]
 8030dec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8030dee:	7bfa      	ldrb	r2, [r7, #15]
 8030df0:	7bfb      	ldrb	r3, [r7, #15]
 8030df2:	b298      	uxth	r0, r3
 8030df4:	6879      	ldr	r1, [r7, #4]
 8030df6:	4613      	mov	r3, r2
 8030df8:	00db      	lsls	r3, r3, #3
 8030dfa:	4413      	add	r3, r2
 8030dfc:	009b      	lsls	r3, r3, #2
 8030dfe:	440b      	add	r3, r1
 8030e00:	3344      	adds	r3, #68	; 0x44
 8030e02:	4602      	mov	r2, r0
 8030e04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8030e06:	7bfa      	ldrb	r2, [r7, #15]
 8030e08:	6879      	ldr	r1, [r7, #4]
 8030e0a:	4613      	mov	r3, r2
 8030e0c:	00db      	lsls	r3, r3, #3
 8030e0e:	4413      	add	r3, r2
 8030e10:	009b      	lsls	r3, r3, #2
 8030e12:	440b      	add	r3, r1
 8030e14:	3340      	adds	r3, #64	; 0x40
 8030e16:	2200      	movs	r2, #0
 8030e18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8030e1a:	7bfa      	ldrb	r2, [r7, #15]
 8030e1c:	6879      	ldr	r1, [r7, #4]
 8030e1e:	4613      	mov	r3, r2
 8030e20:	00db      	lsls	r3, r3, #3
 8030e22:	4413      	add	r3, r2
 8030e24:	009b      	lsls	r3, r3, #2
 8030e26:	440b      	add	r3, r1
 8030e28:	3348      	adds	r3, #72	; 0x48
 8030e2a:	2200      	movs	r2, #0
 8030e2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8030e2e:	7bfa      	ldrb	r2, [r7, #15]
 8030e30:	6879      	ldr	r1, [r7, #4]
 8030e32:	4613      	mov	r3, r2
 8030e34:	00db      	lsls	r3, r3, #3
 8030e36:	4413      	add	r3, r2
 8030e38:	009b      	lsls	r3, r3, #2
 8030e3a:	440b      	add	r3, r1
 8030e3c:	334c      	adds	r3, #76	; 0x4c
 8030e3e:	2200      	movs	r2, #0
 8030e40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8030e42:	7bfa      	ldrb	r2, [r7, #15]
 8030e44:	6879      	ldr	r1, [r7, #4]
 8030e46:	4613      	mov	r3, r2
 8030e48:	00db      	lsls	r3, r3, #3
 8030e4a:	4413      	add	r3, r2
 8030e4c:	009b      	lsls	r3, r3, #2
 8030e4e:	440b      	add	r3, r1
 8030e50:	3354      	adds	r3, #84	; 0x54
 8030e52:	2200      	movs	r2, #0
 8030e54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8030e56:	7bfb      	ldrb	r3, [r7, #15]
 8030e58:	3301      	adds	r3, #1
 8030e5a:	73fb      	strb	r3, [r7, #15]
 8030e5c:	7bfa      	ldrb	r2, [r7, #15]
 8030e5e:	687b      	ldr	r3, [r7, #4]
 8030e60:	685b      	ldr	r3, [r3, #4]
 8030e62:	429a      	cmp	r2, r3
 8030e64:	d3af      	bcc.n	8030dc6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8030e66:	2300      	movs	r3, #0
 8030e68:	73fb      	strb	r3, [r7, #15]
 8030e6a:	e044      	b.n	8030ef6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8030e6c:	7bfa      	ldrb	r2, [r7, #15]
 8030e6e:	6879      	ldr	r1, [r7, #4]
 8030e70:	4613      	mov	r3, r2
 8030e72:	00db      	lsls	r3, r3, #3
 8030e74:	4413      	add	r3, r2
 8030e76:	009b      	lsls	r3, r3, #2
 8030e78:	440b      	add	r3, r1
 8030e7a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8030e7e:	2200      	movs	r2, #0
 8030e80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8030e82:	7bfa      	ldrb	r2, [r7, #15]
 8030e84:	6879      	ldr	r1, [r7, #4]
 8030e86:	4613      	mov	r3, r2
 8030e88:	00db      	lsls	r3, r3, #3
 8030e8a:	4413      	add	r3, r2
 8030e8c:	009b      	lsls	r3, r3, #2
 8030e8e:	440b      	add	r3, r1
 8030e90:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8030e94:	7bfa      	ldrb	r2, [r7, #15]
 8030e96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8030e98:	7bfa      	ldrb	r2, [r7, #15]
 8030e9a:	6879      	ldr	r1, [r7, #4]
 8030e9c:	4613      	mov	r3, r2
 8030e9e:	00db      	lsls	r3, r3, #3
 8030ea0:	4413      	add	r3, r2
 8030ea2:	009b      	lsls	r3, r3, #2
 8030ea4:	440b      	add	r3, r1
 8030ea6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8030eaa:	2200      	movs	r2, #0
 8030eac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8030eae:	7bfa      	ldrb	r2, [r7, #15]
 8030eb0:	6879      	ldr	r1, [r7, #4]
 8030eb2:	4613      	mov	r3, r2
 8030eb4:	00db      	lsls	r3, r3, #3
 8030eb6:	4413      	add	r3, r2
 8030eb8:	009b      	lsls	r3, r3, #2
 8030eba:	440b      	add	r3, r1
 8030ebc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8030ec0:	2200      	movs	r2, #0
 8030ec2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8030ec4:	7bfa      	ldrb	r2, [r7, #15]
 8030ec6:	6879      	ldr	r1, [r7, #4]
 8030ec8:	4613      	mov	r3, r2
 8030eca:	00db      	lsls	r3, r3, #3
 8030ecc:	4413      	add	r3, r2
 8030ece:	009b      	lsls	r3, r3, #2
 8030ed0:	440b      	add	r3, r1
 8030ed2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8030ed6:	2200      	movs	r2, #0
 8030ed8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8030eda:	7bfa      	ldrb	r2, [r7, #15]
 8030edc:	6879      	ldr	r1, [r7, #4]
 8030ede:	4613      	mov	r3, r2
 8030ee0:	00db      	lsls	r3, r3, #3
 8030ee2:	4413      	add	r3, r2
 8030ee4:	009b      	lsls	r3, r3, #2
 8030ee6:	440b      	add	r3, r1
 8030ee8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8030eec:	2200      	movs	r2, #0
 8030eee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8030ef0:	7bfb      	ldrb	r3, [r7, #15]
 8030ef2:	3301      	adds	r3, #1
 8030ef4:	73fb      	strb	r3, [r7, #15]
 8030ef6:	7bfa      	ldrb	r2, [r7, #15]
 8030ef8:	687b      	ldr	r3, [r7, #4]
 8030efa:	685b      	ldr	r3, [r3, #4]
 8030efc:	429a      	cmp	r2, r3
 8030efe:	d3b5      	bcc.n	8030e6c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8030f00:	687b      	ldr	r3, [r7, #4]
 8030f02:	681b      	ldr	r3, [r3, #0]
 8030f04:	603b      	str	r3, [r7, #0]
 8030f06:	687e      	ldr	r6, [r7, #4]
 8030f08:	466d      	mov	r5, sp
 8030f0a:	f106 0410 	add.w	r4, r6, #16
 8030f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8030f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8030f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8030f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8030f16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8030f1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8030f1e:	1d33      	adds	r3, r6, #4
 8030f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8030f22:	6838      	ldr	r0, [r7, #0]
 8030f24:	f008 fafe 	bl	8039524 <USB_DevInit>
 8030f28:	4603      	mov	r3, r0
 8030f2a:	2b00      	cmp	r3, #0
 8030f2c:	d005      	beq.n	8030f3a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8030f2e:	687b      	ldr	r3, [r7, #4]
 8030f30:	2202      	movs	r2, #2
 8030f32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8030f36:	2301      	movs	r3, #1
 8030f38:	e014      	b.n	8030f64 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8030f3a:	687b      	ldr	r3, [r7, #4]
 8030f3c:	2200      	movs	r2, #0
 8030f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8030f42:	687b      	ldr	r3, [r7, #4]
 8030f44:	2201      	movs	r2, #1
 8030f46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8030f4a:	687b      	ldr	r3, [r7, #4]
 8030f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030f4e:	2b01      	cmp	r3, #1
 8030f50:	d102      	bne.n	8030f58 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8030f52:	6878      	ldr	r0, [r7, #4]
 8030f54:	f001 f98c 	bl	8032270 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8030f58:	687b      	ldr	r3, [r7, #4]
 8030f5a:	681b      	ldr	r3, [r3, #0]
 8030f5c:	4618      	mov	r0, r3
 8030f5e:	f009 fc4c 	bl	803a7fa <USB_DevDisconnect>

  return HAL_OK;
 8030f62:	2300      	movs	r3, #0
}
 8030f64:	4618      	mov	r0, r3
 8030f66:	3714      	adds	r7, #20
 8030f68:	46bd      	mov	sp, r7
 8030f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08030f6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8030f6c:	b580      	push	{r7, lr}
 8030f6e:	b084      	sub	sp, #16
 8030f70:	af00      	add	r7, sp, #0
 8030f72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030f74:	687b      	ldr	r3, [r7, #4]
 8030f76:	681b      	ldr	r3, [r3, #0]
 8030f78:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8030f7a:	687b      	ldr	r3, [r7, #4]
 8030f7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8030f80:	2b01      	cmp	r3, #1
 8030f82:	d101      	bne.n	8030f88 <HAL_PCD_Start+0x1c>
 8030f84:	2302      	movs	r3, #2
 8030f86:	e020      	b.n	8030fca <HAL_PCD_Start+0x5e>
 8030f88:	687b      	ldr	r3, [r7, #4]
 8030f8a:	2201      	movs	r2, #1
 8030f8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8030f90:	687b      	ldr	r3, [r7, #4]
 8030f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030f94:	2b01      	cmp	r3, #1
 8030f96:	d109      	bne.n	8030fac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8030f98:	687b      	ldr	r3, [r7, #4]
 8030f9a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8030f9c:	2b01      	cmp	r3, #1
 8030f9e:	d005      	beq.n	8030fac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8030fa0:	68fb      	ldr	r3, [r7, #12]
 8030fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030fa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8030fa8:	68fb      	ldr	r3, [r7, #12]
 8030faa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8030fac:	687b      	ldr	r3, [r7, #4]
 8030fae:	681b      	ldr	r3, [r3, #0]
 8030fb0:	4618      	mov	r0, r3
 8030fb2:	f008 fa49 	bl	8039448 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8030fb6:	687b      	ldr	r3, [r7, #4]
 8030fb8:	681b      	ldr	r3, [r3, #0]
 8030fba:	4618      	mov	r0, r3
 8030fbc:	f009 fbfc 	bl	803a7b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8030fc0:	687b      	ldr	r3, [r7, #4]
 8030fc2:	2200      	movs	r2, #0
 8030fc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8030fc8:	2300      	movs	r3, #0
}
 8030fca:	4618      	mov	r0, r3
 8030fcc:	3710      	adds	r7, #16
 8030fce:	46bd      	mov	sp, r7
 8030fd0:	bd80      	pop	{r7, pc}

08030fd2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8030fd2:	b590      	push	{r4, r7, lr}
 8030fd4:	b08d      	sub	sp, #52	; 0x34
 8030fd6:	af00      	add	r7, sp, #0
 8030fd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030fda:	687b      	ldr	r3, [r7, #4]
 8030fdc:	681b      	ldr	r3, [r3, #0]
 8030fde:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030fe0:	6a3b      	ldr	r3, [r7, #32]
 8030fe2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8030fe4:	687b      	ldr	r3, [r7, #4]
 8030fe6:	681b      	ldr	r3, [r3, #0]
 8030fe8:	4618      	mov	r0, r3
 8030fea:	f009 fcba 	bl	803a962 <USB_GetMode>
 8030fee:	4603      	mov	r3, r0
 8030ff0:	2b00      	cmp	r3, #0
 8030ff2:	f040 84b7 	bne.w	8031964 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8030ff6:	687b      	ldr	r3, [r7, #4]
 8030ff8:	681b      	ldr	r3, [r3, #0]
 8030ffa:	4618      	mov	r0, r3
 8030ffc:	f009 fc1e 	bl	803a83c <USB_ReadInterrupts>
 8031000:	4603      	mov	r3, r0
 8031002:	2b00      	cmp	r3, #0
 8031004:	f000 84ad 	beq.w	8031962 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8031008:	69fb      	ldr	r3, [r7, #28]
 803100a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803100e:	689b      	ldr	r3, [r3, #8]
 8031010:	0a1b      	lsrs	r3, r3, #8
 8031012:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8031016:	687b      	ldr	r3, [r7, #4]
 8031018:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 803101c:	687b      	ldr	r3, [r7, #4]
 803101e:	681b      	ldr	r3, [r3, #0]
 8031020:	4618      	mov	r0, r3
 8031022:	f009 fc0b 	bl	803a83c <USB_ReadInterrupts>
 8031026:	4603      	mov	r3, r0
 8031028:	f003 0302 	and.w	r3, r3, #2
 803102c:	2b02      	cmp	r3, #2
 803102e:	d107      	bne.n	8031040 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8031030:	687b      	ldr	r3, [r7, #4]
 8031032:	681b      	ldr	r3, [r3, #0]
 8031034:	695a      	ldr	r2, [r3, #20]
 8031036:	687b      	ldr	r3, [r7, #4]
 8031038:	681b      	ldr	r3, [r3, #0]
 803103a:	f002 0202 	and.w	r2, r2, #2
 803103e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8031040:	687b      	ldr	r3, [r7, #4]
 8031042:	681b      	ldr	r3, [r3, #0]
 8031044:	4618      	mov	r0, r3
 8031046:	f009 fbf9 	bl	803a83c <USB_ReadInterrupts>
 803104a:	4603      	mov	r3, r0
 803104c:	f003 0310 	and.w	r3, r3, #16
 8031050:	2b10      	cmp	r3, #16
 8031052:	d161      	bne.n	8031118 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8031054:	687b      	ldr	r3, [r7, #4]
 8031056:	681b      	ldr	r3, [r3, #0]
 8031058:	699a      	ldr	r2, [r3, #24]
 803105a:	687b      	ldr	r3, [r7, #4]
 803105c:	681b      	ldr	r3, [r3, #0]
 803105e:	f022 0210 	bic.w	r2, r2, #16
 8031062:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8031064:	6a3b      	ldr	r3, [r7, #32]
 8031066:	6a1b      	ldr	r3, [r3, #32]
 8031068:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 803106a:	69bb      	ldr	r3, [r7, #24]
 803106c:	f003 020f 	and.w	r2, r3, #15
 8031070:	4613      	mov	r3, r2
 8031072:	00db      	lsls	r3, r3, #3
 8031074:	4413      	add	r3, r2
 8031076:	009b      	lsls	r3, r3, #2
 8031078:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803107c:	687a      	ldr	r2, [r7, #4]
 803107e:	4413      	add	r3, r2
 8031080:	3304      	adds	r3, #4
 8031082:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8031084:	69bb      	ldr	r3, [r7, #24]
 8031086:	0c5b      	lsrs	r3, r3, #17
 8031088:	f003 030f 	and.w	r3, r3, #15
 803108c:	2b02      	cmp	r3, #2
 803108e:	d124      	bne.n	80310da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8031090:	69ba      	ldr	r2, [r7, #24]
 8031092:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8031096:	4013      	ands	r3, r2
 8031098:	2b00      	cmp	r3, #0
 803109a:	d035      	beq.n	8031108 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 803109c:	697b      	ldr	r3, [r7, #20]
 803109e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80310a0:	69bb      	ldr	r3, [r7, #24]
 80310a2:	091b      	lsrs	r3, r3, #4
 80310a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80310a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80310aa:	b29b      	uxth	r3, r3
 80310ac:	461a      	mov	r2, r3
 80310ae:	6a38      	ldr	r0, [r7, #32]
 80310b0:	f009 fa30 	bl	803a514 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80310b4:	697b      	ldr	r3, [r7, #20]
 80310b6:	691a      	ldr	r2, [r3, #16]
 80310b8:	69bb      	ldr	r3, [r7, #24]
 80310ba:	091b      	lsrs	r3, r3, #4
 80310bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80310c0:	441a      	add	r2, r3
 80310c2:	697b      	ldr	r3, [r7, #20]
 80310c4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80310c6:	697b      	ldr	r3, [r7, #20]
 80310c8:	6a1a      	ldr	r2, [r3, #32]
 80310ca:	69bb      	ldr	r3, [r7, #24]
 80310cc:	091b      	lsrs	r3, r3, #4
 80310ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80310d2:	441a      	add	r2, r3
 80310d4:	697b      	ldr	r3, [r7, #20]
 80310d6:	621a      	str	r2, [r3, #32]
 80310d8:	e016      	b.n	8031108 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80310da:	69bb      	ldr	r3, [r7, #24]
 80310dc:	0c5b      	lsrs	r3, r3, #17
 80310de:	f003 030f 	and.w	r3, r3, #15
 80310e2:	2b06      	cmp	r3, #6
 80310e4:	d110      	bne.n	8031108 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80310e6:	687b      	ldr	r3, [r7, #4]
 80310e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80310ec:	2208      	movs	r2, #8
 80310ee:	4619      	mov	r1, r3
 80310f0:	6a38      	ldr	r0, [r7, #32]
 80310f2:	f009 fa0f 	bl	803a514 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80310f6:	697b      	ldr	r3, [r7, #20]
 80310f8:	6a1a      	ldr	r2, [r3, #32]
 80310fa:	69bb      	ldr	r3, [r7, #24]
 80310fc:	091b      	lsrs	r3, r3, #4
 80310fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8031102:	441a      	add	r2, r3
 8031104:	697b      	ldr	r3, [r7, #20]
 8031106:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8031108:	687b      	ldr	r3, [r7, #4]
 803110a:	681b      	ldr	r3, [r3, #0]
 803110c:	699a      	ldr	r2, [r3, #24]
 803110e:	687b      	ldr	r3, [r7, #4]
 8031110:	681b      	ldr	r3, [r3, #0]
 8031112:	f042 0210 	orr.w	r2, r2, #16
 8031116:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8031118:	687b      	ldr	r3, [r7, #4]
 803111a:	681b      	ldr	r3, [r3, #0]
 803111c:	4618      	mov	r0, r3
 803111e:	f009 fb8d 	bl	803a83c <USB_ReadInterrupts>
 8031122:	4603      	mov	r3, r0
 8031124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8031128:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 803112c:	f040 80a7 	bne.w	803127e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8031130:	2300      	movs	r3, #0
 8031132:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8031134:	687b      	ldr	r3, [r7, #4]
 8031136:	681b      	ldr	r3, [r3, #0]
 8031138:	4618      	mov	r0, r3
 803113a:	f009 fb92 	bl	803a862 <USB_ReadDevAllOutEpInterrupt>
 803113e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8031140:	e099      	b.n	8031276 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8031142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031144:	f003 0301 	and.w	r3, r3, #1
 8031148:	2b00      	cmp	r3, #0
 803114a:	f000 808e 	beq.w	803126a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 803114e:	687b      	ldr	r3, [r7, #4]
 8031150:	681b      	ldr	r3, [r3, #0]
 8031152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031154:	b2d2      	uxtb	r2, r2
 8031156:	4611      	mov	r1, r2
 8031158:	4618      	mov	r0, r3
 803115a:	f009 fbb6 	bl	803a8ca <USB_ReadDevOutEPInterrupt>
 803115e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8031160:	693b      	ldr	r3, [r7, #16]
 8031162:	f003 0301 	and.w	r3, r3, #1
 8031166:	2b00      	cmp	r3, #0
 8031168:	d00c      	beq.n	8031184 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 803116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803116c:	015a      	lsls	r2, r3, #5
 803116e:	69fb      	ldr	r3, [r7, #28]
 8031170:	4413      	add	r3, r2
 8031172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031176:	461a      	mov	r2, r3
 8031178:	2301      	movs	r3, #1
 803117a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 803117c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803117e:	6878      	ldr	r0, [r7, #4]
 8031180:	f000 fef0 	bl	8031f64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8031184:	693b      	ldr	r3, [r7, #16]
 8031186:	f003 0308 	and.w	r3, r3, #8
 803118a:	2b00      	cmp	r3, #0
 803118c:	d00c      	beq.n	80311a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 803118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031190:	015a      	lsls	r2, r3, #5
 8031192:	69fb      	ldr	r3, [r7, #28]
 8031194:	4413      	add	r3, r2
 8031196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803119a:	461a      	mov	r2, r3
 803119c:	2308      	movs	r3, #8
 803119e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80311a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80311a2:	6878      	ldr	r0, [r7, #4]
 80311a4:	f000 ffc6 	bl	8032134 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80311a8:	693b      	ldr	r3, [r7, #16]
 80311aa:	f003 0310 	and.w	r3, r3, #16
 80311ae:	2b00      	cmp	r3, #0
 80311b0:	d008      	beq.n	80311c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80311b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80311b4:	015a      	lsls	r2, r3, #5
 80311b6:	69fb      	ldr	r3, [r7, #28]
 80311b8:	4413      	add	r3, r2
 80311ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80311be:	461a      	mov	r2, r3
 80311c0:	2310      	movs	r3, #16
 80311c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80311c4:	693b      	ldr	r3, [r7, #16]
 80311c6:	f003 0302 	and.w	r3, r3, #2
 80311ca:	2b00      	cmp	r3, #0
 80311cc:	d030      	beq.n	8031230 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80311ce:	6a3b      	ldr	r3, [r7, #32]
 80311d0:	695b      	ldr	r3, [r3, #20]
 80311d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80311d6:	2b80      	cmp	r3, #128	; 0x80
 80311d8:	d109      	bne.n	80311ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80311da:	69fb      	ldr	r3, [r7, #28]
 80311dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80311e0:	685b      	ldr	r3, [r3, #4]
 80311e2:	69fa      	ldr	r2, [r7, #28]
 80311e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80311e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80311ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80311ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80311f0:	4613      	mov	r3, r2
 80311f2:	00db      	lsls	r3, r3, #3
 80311f4:	4413      	add	r3, r2
 80311f6:	009b      	lsls	r3, r3, #2
 80311f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80311fc:	687a      	ldr	r2, [r7, #4]
 80311fe:	4413      	add	r3, r2
 8031200:	3304      	adds	r3, #4
 8031202:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8031204:	697b      	ldr	r3, [r7, #20]
 8031206:	78db      	ldrb	r3, [r3, #3]
 8031208:	2b01      	cmp	r3, #1
 803120a:	d108      	bne.n	803121e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 803120c:	697b      	ldr	r3, [r7, #20]
 803120e:	2200      	movs	r2, #0
 8031210:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8031212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031214:	b2db      	uxtb	r3, r3
 8031216:	4619      	mov	r1, r3
 8031218:	6878      	ldr	r0, [r7, #4]
 803121a:	f00b fef7 	bl	803d00c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 803121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031220:	015a      	lsls	r2, r3, #5
 8031222:	69fb      	ldr	r3, [r7, #28]
 8031224:	4413      	add	r3, r2
 8031226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803122a:	461a      	mov	r2, r3
 803122c:	2302      	movs	r3, #2
 803122e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8031230:	693b      	ldr	r3, [r7, #16]
 8031232:	f003 0320 	and.w	r3, r3, #32
 8031236:	2b00      	cmp	r3, #0
 8031238:	d008      	beq.n	803124c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 803123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803123c:	015a      	lsls	r2, r3, #5
 803123e:	69fb      	ldr	r3, [r7, #28]
 8031240:	4413      	add	r3, r2
 8031242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031246:	461a      	mov	r2, r3
 8031248:	2320      	movs	r3, #32
 803124a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 803124c:	693b      	ldr	r3, [r7, #16]
 803124e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8031252:	2b00      	cmp	r3, #0
 8031254:	d009      	beq.n	803126a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8031256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031258:	015a      	lsls	r2, r3, #5
 803125a:	69fb      	ldr	r3, [r7, #28]
 803125c:	4413      	add	r3, r2
 803125e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031262:	461a      	mov	r2, r3
 8031264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8031268:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 803126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803126c:	3301      	adds	r3, #1
 803126e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8031270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031272:	085b      	lsrs	r3, r3, #1
 8031274:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8031276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031278:	2b00      	cmp	r3, #0
 803127a:	f47f af62 	bne.w	8031142 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 803127e:	687b      	ldr	r3, [r7, #4]
 8031280:	681b      	ldr	r3, [r3, #0]
 8031282:	4618      	mov	r0, r3
 8031284:	f009 fada 	bl	803a83c <USB_ReadInterrupts>
 8031288:	4603      	mov	r3, r0
 803128a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 803128e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8031292:	f040 80db 	bne.w	803144c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8031296:	687b      	ldr	r3, [r7, #4]
 8031298:	681b      	ldr	r3, [r3, #0]
 803129a:	4618      	mov	r0, r3
 803129c:	f009 fafb 	bl	803a896 <USB_ReadDevAllInEpInterrupt>
 80312a0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80312a2:	2300      	movs	r3, #0
 80312a4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80312a6:	e0cd      	b.n	8031444 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80312a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80312aa:	f003 0301 	and.w	r3, r3, #1
 80312ae:	2b00      	cmp	r3, #0
 80312b0:	f000 80c2 	beq.w	8031438 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80312b4:	687b      	ldr	r3, [r7, #4]
 80312b6:	681b      	ldr	r3, [r3, #0]
 80312b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80312ba:	b2d2      	uxtb	r2, r2
 80312bc:	4611      	mov	r1, r2
 80312be:	4618      	mov	r0, r3
 80312c0:	f009 fb21 	bl	803a906 <USB_ReadDevInEPInterrupt>
 80312c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80312c6:	693b      	ldr	r3, [r7, #16]
 80312c8:	f003 0301 	and.w	r3, r3, #1
 80312cc:	2b00      	cmp	r3, #0
 80312ce:	d057      	beq.n	8031380 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80312d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80312d2:	f003 030f 	and.w	r3, r3, #15
 80312d6:	2201      	movs	r2, #1
 80312d8:	fa02 f303 	lsl.w	r3, r2, r3
 80312dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80312de:	69fb      	ldr	r3, [r7, #28]
 80312e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80312e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80312e6:	68fb      	ldr	r3, [r7, #12]
 80312e8:	43db      	mvns	r3, r3
 80312ea:	69f9      	ldr	r1, [r7, #28]
 80312ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80312f0:	4013      	ands	r3, r2
 80312f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80312f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80312f6:	015a      	lsls	r2, r3, #5
 80312f8:	69fb      	ldr	r3, [r7, #28]
 80312fa:	4413      	add	r3, r2
 80312fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031300:	461a      	mov	r2, r3
 8031302:	2301      	movs	r3, #1
 8031304:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8031306:	687b      	ldr	r3, [r7, #4]
 8031308:	691b      	ldr	r3, [r3, #16]
 803130a:	2b01      	cmp	r3, #1
 803130c:	d132      	bne.n	8031374 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 803130e:	6879      	ldr	r1, [r7, #4]
 8031310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031312:	4613      	mov	r3, r2
 8031314:	00db      	lsls	r3, r3, #3
 8031316:	4413      	add	r3, r2
 8031318:	009b      	lsls	r3, r3, #2
 803131a:	440b      	add	r3, r1
 803131c:	334c      	adds	r3, #76	; 0x4c
 803131e:	6819      	ldr	r1, [r3, #0]
 8031320:	6878      	ldr	r0, [r7, #4]
 8031322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031324:	4613      	mov	r3, r2
 8031326:	00db      	lsls	r3, r3, #3
 8031328:	4413      	add	r3, r2
 803132a:	009b      	lsls	r3, r3, #2
 803132c:	4403      	add	r3, r0
 803132e:	3348      	adds	r3, #72	; 0x48
 8031330:	681b      	ldr	r3, [r3, #0]
 8031332:	4419      	add	r1, r3
 8031334:	6878      	ldr	r0, [r7, #4]
 8031336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031338:	4613      	mov	r3, r2
 803133a:	00db      	lsls	r3, r3, #3
 803133c:	4413      	add	r3, r2
 803133e:	009b      	lsls	r3, r3, #2
 8031340:	4403      	add	r3, r0
 8031342:	334c      	adds	r3, #76	; 0x4c
 8031344:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8031346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031348:	2b00      	cmp	r3, #0
 803134a:	d113      	bne.n	8031374 <HAL_PCD_IRQHandler+0x3a2>
 803134c:	6879      	ldr	r1, [r7, #4]
 803134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031350:	4613      	mov	r3, r2
 8031352:	00db      	lsls	r3, r3, #3
 8031354:	4413      	add	r3, r2
 8031356:	009b      	lsls	r3, r3, #2
 8031358:	440b      	add	r3, r1
 803135a:	3354      	adds	r3, #84	; 0x54
 803135c:	681b      	ldr	r3, [r3, #0]
 803135e:	2b00      	cmp	r3, #0
 8031360:	d108      	bne.n	8031374 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8031362:	687b      	ldr	r3, [r7, #4]
 8031364:	6818      	ldr	r0, [r3, #0]
 8031366:	687b      	ldr	r3, [r7, #4]
 8031368:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803136c:	461a      	mov	r2, r3
 803136e:	2101      	movs	r1, #1
 8031370:	f009 fb2a 	bl	803a9c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8031374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031376:	b2db      	uxtb	r3, r3
 8031378:	4619      	mov	r1, r3
 803137a:	6878      	ldr	r0, [r7, #4]
 803137c:	f00b fdc1 	bl	803cf02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8031380:	693b      	ldr	r3, [r7, #16]
 8031382:	f003 0308 	and.w	r3, r3, #8
 8031386:	2b00      	cmp	r3, #0
 8031388:	d008      	beq.n	803139c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 803138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803138c:	015a      	lsls	r2, r3, #5
 803138e:	69fb      	ldr	r3, [r7, #28]
 8031390:	4413      	add	r3, r2
 8031392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031396:	461a      	mov	r2, r3
 8031398:	2308      	movs	r3, #8
 803139a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 803139c:	693b      	ldr	r3, [r7, #16]
 803139e:	f003 0310 	and.w	r3, r3, #16
 80313a2:	2b00      	cmp	r3, #0
 80313a4:	d008      	beq.n	80313b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80313a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80313a8:	015a      	lsls	r2, r3, #5
 80313aa:	69fb      	ldr	r3, [r7, #28]
 80313ac:	4413      	add	r3, r2
 80313ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80313b2:	461a      	mov	r2, r3
 80313b4:	2310      	movs	r3, #16
 80313b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80313b8:	693b      	ldr	r3, [r7, #16]
 80313ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80313be:	2b00      	cmp	r3, #0
 80313c0:	d008      	beq.n	80313d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80313c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80313c4:	015a      	lsls	r2, r3, #5
 80313c6:	69fb      	ldr	r3, [r7, #28]
 80313c8:	4413      	add	r3, r2
 80313ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80313ce:	461a      	mov	r2, r3
 80313d0:	2340      	movs	r3, #64	; 0x40
 80313d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80313d4:	693b      	ldr	r3, [r7, #16]
 80313d6:	f003 0302 	and.w	r3, r3, #2
 80313da:	2b00      	cmp	r3, #0
 80313dc:	d023      	beq.n	8031426 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80313de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80313e0:	6a38      	ldr	r0, [r7, #32]
 80313e2:	f008 f9fd 	bl	80397e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80313e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80313e8:	4613      	mov	r3, r2
 80313ea:	00db      	lsls	r3, r3, #3
 80313ec:	4413      	add	r3, r2
 80313ee:	009b      	lsls	r3, r3, #2
 80313f0:	3338      	adds	r3, #56	; 0x38
 80313f2:	687a      	ldr	r2, [r7, #4]
 80313f4:	4413      	add	r3, r2
 80313f6:	3304      	adds	r3, #4
 80313f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80313fa:	697b      	ldr	r3, [r7, #20]
 80313fc:	78db      	ldrb	r3, [r3, #3]
 80313fe:	2b01      	cmp	r3, #1
 8031400:	d108      	bne.n	8031414 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8031402:	697b      	ldr	r3, [r7, #20]
 8031404:	2200      	movs	r2, #0
 8031406:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8031408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803140a:	b2db      	uxtb	r3, r3
 803140c:	4619      	mov	r1, r3
 803140e:	6878      	ldr	r0, [r7, #4]
 8031410:	f00b fe0e 	bl	803d030 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8031414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031416:	015a      	lsls	r2, r3, #5
 8031418:	69fb      	ldr	r3, [r7, #28]
 803141a:	4413      	add	r3, r2
 803141c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031420:	461a      	mov	r2, r3
 8031422:	2302      	movs	r3, #2
 8031424:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8031426:	693b      	ldr	r3, [r7, #16]
 8031428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803142c:	2b00      	cmp	r3, #0
 803142e:	d003      	beq.n	8031438 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8031430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8031432:	6878      	ldr	r0, [r7, #4]
 8031434:	f000 fd08 	bl	8031e48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8031438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803143a:	3301      	adds	r3, #1
 803143c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 803143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031440:	085b      	lsrs	r3, r3, #1
 8031442:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8031444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031446:	2b00      	cmp	r3, #0
 8031448:	f47f af2e 	bne.w	80312a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 803144c:	687b      	ldr	r3, [r7, #4]
 803144e:	681b      	ldr	r3, [r3, #0]
 8031450:	4618      	mov	r0, r3
 8031452:	f009 f9f3 	bl	803a83c <USB_ReadInterrupts>
 8031456:	4603      	mov	r3, r0
 8031458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803145c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8031460:	d122      	bne.n	80314a8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8031462:	69fb      	ldr	r3, [r7, #28]
 8031464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031468:	685b      	ldr	r3, [r3, #4]
 803146a:	69fa      	ldr	r2, [r7, #28]
 803146c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8031470:	f023 0301 	bic.w	r3, r3, #1
 8031474:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8031476:	687b      	ldr	r3, [r7, #4]
 8031478:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 803147c:	2b01      	cmp	r3, #1
 803147e:	d108      	bne.n	8031492 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8031480:	687b      	ldr	r3, [r7, #4]
 8031482:	2200      	movs	r2, #0
 8031484:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8031488:	2100      	movs	r1, #0
 803148a:	6878      	ldr	r0, [r7, #4]
 803148c:	f000 ff14 	bl	80322b8 <HAL_PCDEx_LPM_Callback>
 8031490:	e002      	b.n	8031498 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8031492:	6878      	ldr	r0, [r7, #4]
 8031494:	f00b fdac 	bl	803cff0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8031498:	687b      	ldr	r3, [r7, #4]
 803149a:	681b      	ldr	r3, [r3, #0]
 803149c:	695a      	ldr	r2, [r3, #20]
 803149e:	687b      	ldr	r3, [r7, #4]
 80314a0:	681b      	ldr	r3, [r3, #0]
 80314a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80314a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80314a8:	687b      	ldr	r3, [r7, #4]
 80314aa:	681b      	ldr	r3, [r3, #0]
 80314ac:	4618      	mov	r0, r3
 80314ae:	f009 f9c5 	bl	803a83c <USB_ReadInterrupts>
 80314b2:	4603      	mov	r3, r0
 80314b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80314b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80314bc:	d112      	bne.n	80314e4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80314be:	69fb      	ldr	r3, [r7, #28]
 80314c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80314c4:	689b      	ldr	r3, [r3, #8]
 80314c6:	f003 0301 	and.w	r3, r3, #1
 80314ca:	2b01      	cmp	r3, #1
 80314cc:	d102      	bne.n	80314d4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80314ce:	6878      	ldr	r0, [r7, #4]
 80314d0:	f00b fd68 	bl	803cfa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80314d4:	687b      	ldr	r3, [r7, #4]
 80314d6:	681b      	ldr	r3, [r3, #0]
 80314d8:	695a      	ldr	r2, [r3, #20]
 80314da:	687b      	ldr	r3, [r7, #4]
 80314dc:	681b      	ldr	r3, [r3, #0]
 80314de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80314e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80314e4:	687b      	ldr	r3, [r7, #4]
 80314e6:	681b      	ldr	r3, [r3, #0]
 80314e8:	4618      	mov	r0, r3
 80314ea:	f009 f9a7 	bl	803a83c <USB_ReadInterrupts>
 80314ee:	4603      	mov	r3, r0
 80314f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80314f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80314f8:	d121      	bne.n	803153e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80314fa:	687b      	ldr	r3, [r7, #4]
 80314fc:	681b      	ldr	r3, [r3, #0]
 80314fe:	695a      	ldr	r2, [r3, #20]
 8031500:	687b      	ldr	r3, [r7, #4]
 8031502:	681b      	ldr	r3, [r3, #0]
 8031504:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8031508:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 803150a:	687b      	ldr	r3, [r7, #4]
 803150c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8031510:	2b00      	cmp	r3, #0
 8031512:	d111      	bne.n	8031538 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8031514:	687b      	ldr	r3, [r7, #4]
 8031516:	2201      	movs	r2, #1
 8031518:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 803151c:	687b      	ldr	r3, [r7, #4]
 803151e:	681b      	ldr	r3, [r3, #0]
 8031520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031522:	089b      	lsrs	r3, r3, #2
 8031524:	f003 020f 	and.w	r2, r3, #15
 8031528:	687b      	ldr	r3, [r7, #4]
 803152a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 803152e:	2101      	movs	r1, #1
 8031530:	6878      	ldr	r0, [r7, #4]
 8031532:	f000 fec1 	bl	80322b8 <HAL_PCDEx_LPM_Callback>
 8031536:	e002      	b.n	803153e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8031538:	6878      	ldr	r0, [r7, #4]
 803153a:	f00b fd33 	bl	803cfa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 803153e:	687b      	ldr	r3, [r7, #4]
 8031540:	681b      	ldr	r3, [r3, #0]
 8031542:	4618      	mov	r0, r3
 8031544:	f009 f97a 	bl	803a83c <USB_ReadInterrupts>
 8031548:	4603      	mov	r3, r0
 803154a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 803154e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8031552:	f040 80b7 	bne.w	80316c4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8031556:	69fb      	ldr	r3, [r7, #28]
 8031558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803155c:	685b      	ldr	r3, [r3, #4]
 803155e:	69fa      	ldr	r2, [r7, #28]
 8031560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8031564:	f023 0301 	bic.w	r3, r3, #1
 8031568:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 803156a:	687b      	ldr	r3, [r7, #4]
 803156c:	681b      	ldr	r3, [r3, #0]
 803156e:	2110      	movs	r1, #16
 8031570:	4618      	mov	r0, r3
 8031572:	f008 f935 	bl	80397e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8031576:	2300      	movs	r3, #0
 8031578:	62fb      	str	r3, [r7, #44]	; 0x2c
 803157a:	e046      	b.n	803160a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 803157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803157e:	015a      	lsls	r2, r3, #5
 8031580:	69fb      	ldr	r3, [r7, #28]
 8031582:	4413      	add	r3, r2
 8031584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031588:	461a      	mov	r2, r3
 803158a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803158e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8031590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031592:	015a      	lsls	r2, r3, #5
 8031594:	69fb      	ldr	r3, [r7, #28]
 8031596:	4413      	add	r3, r2
 8031598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803159c:	681b      	ldr	r3, [r3, #0]
 803159e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80315a0:	0151      	lsls	r1, r2, #5
 80315a2:	69fa      	ldr	r2, [r7, #28]
 80315a4:	440a      	add	r2, r1
 80315a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80315aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80315ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80315b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80315b2:	015a      	lsls	r2, r3, #5
 80315b4:	69fb      	ldr	r3, [r7, #28]
 80315b6:	4413      	add	r3, r2
 80315b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80315bc:	461a      	mov	r2, r3
 80315be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80315c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80315c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80315c6:	015a      	lsls	r2, r3, #5
 80315c8:	69fb      	ldr	r3, [r7, #28]
 80315ca:	4413      	add	r3, r2
 80315cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80315d0:	681b      	ldr	r3, [r3, #0]
 80315d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80315d4:	0151      	lsls	r1, r2, #5
 80315d6:	69fa      	ldr	r2, [r7, #28]
 80315d8:	440a      	add	r2, r1
 80315da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80315de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80315e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80315e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80315e6:	015a      	lsls	r2, r3, #5
 80315e8:	69fb      	ldr	r3, [r7, #28]
 80315ea:	4413      	add	r3, r2
 80315ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80315f0:	681b      	ldr	r3, [r3, #0]
 80315f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80315f4:	0151      	lsls	r1, r2, #5
 80315f6:	69fa      	ldr	r2, [r7, #28]
 80315f8:	440a      	add	r2, r1
 80315fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80315fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8031602:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8031604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031606:	3301      	adds	r3, #1
 8031608:	62fb      	str	r3, [r7, #44]	; 0x2c
 803160a:	687b      	ldr	r3, [r7, #4]
 803160c:	685b      	ldr	r3, [r3, #4]
 803160e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8031610:	429a      	cmp	r2, r3
 8031612:	d3b3      	bcc.n	803157c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8031614:	69fb      	ldr	r3, [r7, #28]
 8031616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803161a:	69db      	ldr	r3, [r3, #28]
 803161c:	69fa      	ldr	r2, [r7, #28]
 803161e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8031622:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8031626:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8031628:	687b      	ldr	r3, [r7, #4]
 803162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803162c:	2b00      	cmp	r3, #0
 803162e:	d016      	beq.n	803165e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8031630:	69fb      	ldr	r3, [r7, #28]
 8031632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803163a:	69fa      	ldr	r2, [r7, #28]
 803163c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8031640:	f043 030b 	orr.w	r3, r3, #11
 8031644:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8031648:	69fb      	ldr	r3, [r7, #28]
 803164a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031650:	69fa      	ldr	r2, [r7, #28]
 8031652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8031656:	f043 030b 	orr.w	r3, r3, #11
 803165a:	6453      	str	r3, [r2, #68]	; 0x44
 803165c:	e015      	b.n	803168a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 803165e:	69fb      	ldr	r3, [r7, #28]
 8031660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031664:	695a      	ldr	r2, [r3, #20]
 8031666:	69fb      	ldr	r3, [r7, #28]
 8031668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803166c:	4619      	mov	r1, r3
 803166e:	f242 032b 	movw	r3, #8235	; 0x202b
 8031672:	4313      	orrs	r3, r2
 8031674:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8031676:	69fb      	ldr	r3, [r7, #28]
 8031678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803167c:	691b      	ldr	r3, [r3, #16]
 803167e:	69fa      	ldr	r2, [r7, #28]
 8031680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8031684:	f043 030b 	orr.w	r3, r3, #11
 8031688:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 803168a:	69fb      	ldr	r3, [r7, #28]
 803168c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031690:	681b      	ldr	r3, [r3, #0]
 8031692:	69fa      	ldr	r2, [r7, #28]
 8031694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8031698:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 803169c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 803169e:	687b      	ldr	r3, [r7, #4]
 80316a0:	6818      	ldr	r0, [r3, #0]
 80316a2:	687b      	ldr	r3, [r7, #4]
 80316a4:	691b      	ldr	r3, [r3, #16]
 80316a6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80316a8:	687b      	ldr	r3, [r7, #4]
 80316aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80316ae:	461a      	mov	r2, r3
 80316b0:	f009 f98a 	bl	803a9c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80316b4:	687b      	ldr	r3, [r7, #4]
 80316b6:	681b      	ldr	r3, [r3, #0]
 80316b8:	695a      	ldr	r2, [r3, #20]
 80316ba:	687b      	ldr	r3, [r7, #4]
 80316bc:	681b      	ldr	r3, [r3, #0]
 80316be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80316c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80316c4:	687b      	ldr	r3, [r7, #4]
 80316c6:	681b      	ldr	r3, [r3, #0]
 80316c8:	4618      	mov	r0, r3
 80316ca:	f009 f8b7 	bl	803a83c <USB_ReadInterrupts>
 80316ce:	4603      	mov	r3, r0
 80316d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80316d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80316d8:	d124      	bne.n	8031724 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80316da:	687b      	ldr	r3, [r7, #4]
 80316dc:	681b      	ldr	r3, [r3, #0]
 80316de:	4618      	mov	r0, r3
 80316e0:	f009 f94e 	bl	803a980 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80316e4:	687b      	ldr	r3, [r7, #4]
 80316e6:	681b      	ldr	r3, [r3, #0]
 80316e8:	4618      	mov	r0, r3
 80316ea:	f008 f8f6 	bl	80398da <USB_GetDevSpeed>
 80316ee:	4603      	mov	r3, r0
 80316f0:	461a      	mov	r2, r3
 80316f2:	687b      	ldr	r3, [r7, #4]
 80316f4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80316f6:	687b      	ldr	r3, [r7, #4]
 80316f8:	681c      	ldr	r4, [r3, #0]
 80316fa:	f001 fd91 	bl	8033220 <HAL_RCC_GetHCLKFreq>
 80316fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8031700:	687b      	ldr	r3, [r7, #4]
 8031702:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8031704:	b2db      	uxtb	r3, r3
 8031706:	461a      	mov	r2, r3
 8031708:	4620      	mov	r0, r4
 803170a:	f007 fdfb 	bl	8039304 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 803170e:	6878      	ldr	r0, [r7, #4]
 8031710:	f00b fc1f 	bl	803cf52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8031714:	687b      	ldr	r3, [r7, #4]
 8031716:	681b      	ldr	r3, [r3, #0]
 8031718:	695a      	ldr	r2, [r3, #20]
 803171a:	687b      	ldr	r3, [r7, #4]
 803171c:	681b      	ldr	r3, [r3, #0]
 803171e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8031722:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8031724:	687b      	ldr	r3, [r7, #4]
 8031726:	681b      	ldr	r3, [r3, #0]
 8031728:	4618      	mov	r0, r3
 803172a:	f009 f887 	bl	803a83c <USB_ReadInterrupts>
 803172e:	4603      	mov	r3, r0
 8031730:	f003 0308 	and.w	r3, r3, #8
 8031734:	2b08      	cmp	r3, #8
 8031736:	d10a      	bne.n	803174e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8031738:	6878      	ldr	r0, [r7, #4]
 803173a:	f00b fbfc 	bl	803cf36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 803173e:	687b      	ldr	r3, [r7, #4]
 8031740:	681b      	ldr	r3, [r3, #0]
 8031742:	695a      	ldr	r2, [r3, #20]
 8031744:	687b      	ldr	r3, [r7, #4]
 8031746:	681b      	ldr	r3, [r3, #0]
 8031748:	f002 0208 	and.w	r2, r2, #8
 803174c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 803174e:	687b      	ldr	r3, [r7, #4]
 8031750:	681b      	ldr	r3, [r3, #0]
 8031752:	4618      	mov	r0, r3
 8031754:	f009 f872 	bl	803a83c <USB_ReadInterrupts>
 8031758:	4603      	mov	r3, r0
 803175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803175e:	2b80      	cmp	r3, #128	; 0x80
 8031760:	d122      	bne.n	80317a8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8031762:	6a3b      	ldr	r3, [r7, #32]
 8031764:	699b      	ldr	r3, [r3, #24]
 8031766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 803176a:	6a3b      	ldr	r3, [r7, #32]
 803176c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803176e:	2301      	movs	r3, #1
 8031770:	627b      	str	r3, [r7, #36]	; 0x24
 8031772:	e014      	b.n	803179e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8031774:	6879      	ldr	r1, [r7, #4]
 8031776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031778:	4613      	mov	r3, r2
 803177a:	00db      	lsls	r3, r3, #3
 803177c:	4413      	add	r3, r2
 803177e:	009b      	lsls	r3, r3, #2
 8031780:	440b      	add	r3, r1
 8031782:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8031786:	781b      	ldrb	r3, [r3, #0]
 8031788:	2b01      	cmp	r3, #1
 803178a:	d105      	bne.n	8031798 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 803178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803178e:	b2db      	uxtb	r3, r3
 8031790:	4619      	mov	r1, r3
 8031792:	6878      	ldr	r0, [r7, #4]
 8031794:	f000 fb27 	bl	8031de6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8031798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803179a:	3301      	adds	r3, #1
 803179c:	627b      	str	r3, [r7, #36]	; 0x24
 803179e:	687b      	ldr	r3, [r7, #4]
 80317a0:	685b      	ldr	r3, [r3, #4]
 80317a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80317a4:	429a      	cmp	r2, r3
 80317a6:	d3e5      	bcc.n	8031774 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80317a8:	687b      	ldr	r3, [r7, #4]
 80317aa:	681b      	ldr	r3, [r3, #0]
 80317ac:	4618      	mov	r0, r3
 80317ae:	f009 f845 	bl	803a83c <USB_ReadInterrupts>
 80317b2:	4603      	mov	r3, r0
 80317b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80317b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80317bc:	d13b      	bne.n	8031836 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80317be:	2301      	movs	r3, #1
 80317c0:	627b      	str	r3, [r7, #36]	; 0x24
 80317c2:	e02b      	b.n	803181c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80317c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80317c6:	015a      	lsls	r2, r3, #5
 80317c8:	69fb      	ldr	r3, [r7, #28]
 80317ca:	4413      	add	r3, r2
 80317cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80317d0:	681b      	ldr	r3, [r3, #0]
 80317d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80317d4:	6879      	ldr	r1, [r7, #4]
 80317d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80317d8:	4613      	mov	r3, r2
 80317da:	00db      	lsls	r3, r3, #3
 80317dc:	4413      	add	r3, r2
 80317de:	009b      	lsls	r3, r3, #2
 80317e0:	440b      	add	r3, r1
 80317e2:	3340      	adds	r3, #64	; 0x40
 80317e4:	781b      	ldrb	r3, [r3, #0]
 80317e6:	2b01      	cmp	r3, #1
 80317e8:	d115      	bne.n	8031816 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80317ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80317ec:	2b00      	cmp	r3, #0
 80317ee:	da12      	bge.n	8031816 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80317f0:	6879      	ldr	r1, [r7, #4]
 80317f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80317f4:	4613      	mov	r3, r2
 80317f6:	00db      	lsls	r3, r3, #3
 80317f8:	4413      	add	r3, r2
 80317fa:	009b      	lsls	r3, r3, #2
 80317fc:	440b      	add	r3, r1
 80317fe:	333f      	adds	r3, #63	; 0x3f
 8031800:	2201      	movs	r2, #1
 8031802:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8031804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031806:	b2db      	uxtb	r3, r3
 8031808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803180c:	b2db      	uxtb	r3, r3
 803180e:	4619      	mov	r1, r3
 8031810:	6878      	ldr	r0, [r7, #4]
 8031812:	f000 fae8 	bl	8031de6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8031816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031818:	3301      	adds	r3, #1
 803181a:	627b      	str	r3, [r7, #36]	; 0x24
 803181c:	687b      	ldr	r3, [r7, #4]
 803181e:	685b      	ldr	r3, [r3, #4]
 8031820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031822:	429a      	cmp	r2, r3
 8031824:	d3ce      	bcc.n	80317c4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8031826:	687b      	ldr	r3, [r7, #4]
 8031828:	681b      	ldr	r3, [r3, #0]
 803182a:	695a      	ldr	r2, [r3, #20]
 803182c:	687b      	ldr	r3, [r7, #4]
 803182e:	681b      	ldr	r3, [r3, #0]
 8031830:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8031834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8031836:	687b      	ldr	r3, [r7, #4]
 8031838:	681b      	ldr	r3, [r3, #0]
 803183a:	4618      	mov	r0, r3
 803183c:	f008 fffe 	bl	803a83c <USB_ReadInterrupts>
 8031840:	4603      	mov	r3, r0
 8031842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8031846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803184a:	d155      	bne.n	80318f8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803184c:	2301      	movs	r3, #1
 803184e:	627b      	str	r3, [r7, #36]	; 0x24
 8031850:	e045      	b.n	80318de <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8031852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031854:	015a      	lsls	r2, r3, #5
 8031856:	69fb      	ldr	r3, [r7, #28]
 8031858:	4413      	add	r3, r2
 803185a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803185e:	681b      	ldr	r3, [r3, #0]
 8031860:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8031862:	6879      	ldr	r1, [r7, #4]
 8031864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031866:	4613      	mov	r3, r2
 8031868:	00db      	lsls	r3, r3, #3
 803186a:	4413      	add	r3, r2
 803186c:	009b      	lsls	r3, r3, #2
 803186e:	440b      	add	r3, r1
 8031870:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8031874:	781b      	ldrb	r3, [r3, #0]
 8031876:	2b01      	cmp	r3, #1
 8031878:	d12e      	bne.n	80318d8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 803187a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 803187c:	2b00      	cmp	r3, #0
 803187e:	da2b      	bge.n	80318d8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8031880:	69bb      	ldr	r3, [r7, #24]
 8031882:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8031886:	687b      	ldr	r3, [r7, #4]
 8031888:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 803188c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8031890:	429a      	cmp	r2, r3
 8031892:	d121      	bne.n	80318d8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8031894:	6879      	ldr	r1, [r7, #4]
 8031896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031898:	4613      	mov	r3, r2
 803189a:	00db      	lsls	r3, r3, #3
 803189c:	4413      	add	r3, r2
 803189e:	009b      	lsls	r3, r3, #2
 80318a0:	440b      	add	r3, r1
 80318a2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80318a6:	2201      	movs	r2, #1
 80318a8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80318aa:	6a3b      	ldr	r3, [r7, #32]
 80318ac:	699b      	ldr	r3, [r3, #24]
 80318ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80318b2:	6a3b      	ldr	r3, [r7, #32]
 80318b4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80318b6:	6a3b      	ldr	r3, [r7, #32]
 80318b8:	695b      	ldr	r3, [r3, #20]
 80318ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80318be:	2b00      	cmp	r3, #0
 80318c0:	d10a      	bne.n	80318d8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80318c2:	69fb      	ldr	r3, [r7, #28]
 80318c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80318c8:	685b      	ldr	r3, [r3, #4]
 80318ca:	69fa      	ldr	r2, [r7, #28]
 80318cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80318d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80318d4:	6053      	str	r3, [r2, #4]
            break;
 80318d6:	e007      	b.n	80318e8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80318d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80318da:	3301      	adds	r3, #1
 80318dc:	627b      	str	r3, [r7, #36]	; 0x24
 80318de:	687b      	ldr	r3, [r7, #4]
 80318e0:	685b      	ldr	r3, [r3, #4]
 80318e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80318e4:	429a      	cmp	r2, r3
 80318e6:	d3b4      	bcc.n	8031852 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80318e8:	687b      	ldr	r3, [r7, #4]
 80318ea:	681b      	ldr	r3, [r3, #0]
 80318ec:	695a      	ldr	r2, [r3, #20]
 80318ee:	687b      	ldr	r3, [r7, #4]
 80318f0:	681b      	ldr	r3, [r3, #0]
 80318f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80318f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80318f8:	687b      	ldr	r3, [r7, #4]
 80318fa:	681b      	ldr	r3, [r3, #0]
 80318fc:	4618      	mov	r0, r3
 80318fe:	f008 ff9d 	bl	803a83c <USB_ReadInterrupts>
 8031902:	4603      	mov	r3, r0
 8031904:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8031908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803190c:	d10a      	bne.n	8031924 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 803190e:	6878      	ldr	r0, [r7, #4]
 8031910:	f00b fba0 	bl	803d054 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8031914:	687b      	ldr	r3, [r7, #4]
 8031916:	681b      	ldr	r3, [r3, #0]
 8031918:	695a      	ldr	r2, [r3, #20]
 803191a:	687b      	ldr	r3, [r7, #4]
 803191c:	681b      	ldr	r3, [r3, #0]
 803191e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8031922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8031924:	687b      	ldr	r3, [r7, #4]
 8031926:	681b      	ldr	r3, [r3, #0]
 8031928:	4618      	mov	r0, r3
 803192a:	f008 ff87 	bl	803a83c <USB_ReadInterrupts>
 803192e:	4603      	mov	r3, r0
 8031930:	f003 0304 	and.w	r3, r3, #4
 8031934:	2b04      	cmp	r3, #4
 8031936:	d115      	bne.n	8031964 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8031938:	687b      	ldr	r3, [r7, #4]
 803193a:	681b      	ldr	r3, [r3, #0]
 803193c:	685b      	ldr	r3, [r3, #4]
 803193e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8031940:	69bb      	ldr	r3, [r7, #24]
 8031942:	f003 0304 	and.w	r3, r3, #4
 8031946:	2b00      	cmp	r3, #0
 8031948:	d002      	beq.n	8031950 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 803194a:	6878      	ldr	r0, [r7, #4]
 803194c:	f00b fb90 	bl	803d070 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8031950:	687b      	ldr	r3, [r7, #4]
 8031952:	681b      	ldr	r3, [r3, #0]
 8031954:	6859      	ldr	r1, [r3, #4]
 8031956:	687b      	ldr	r3, [r7, #4]
 8031958:	681b      	ldr	r3, [r3, #0]
 803195a:	69ba      	ldr	r2, [r7, #24]
 803195c:	430a      	orrs	r2, r1
 803195e:	605a      	str	r2, [r3, #4]
 8031960:	e000      	b.n	8031964 <HAL_PCD_IRQHandler+0x992>
      return;
 8031962:	bf00      	nop
    }
  }
}
 8031964:	3734      	adds	r7, #52	; 0x34
 8031966:	46bd      	mov	sp, r7
 8031968:	bd90      	pop	{r4, r7, pc}

0803196a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 803196a:	b580      	push	{r7, lr}
 803196c:	b082      	sub	sp, #8
 803196e:	af00      	add	r7, sp, #0
 8031970:	6078      	str	r0, [r7, #4]
 8031972:	460b      	mov	r3, r1
 8031974:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8031976:	687b      	ldr	r3, [r7, #4]
 8031978:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 803197c:	2b01      	cmp	r3, #1
 803197e:	d101      	bne.n	8031984 <HAL_PCD_SetAddress+0x1a>
 8031980:	2302      	movs	r3, #2
 8031982:	e013      	b.n	80319ac <HAL_PCD_SetAddress+0x42>
 8031984:	687b      	ldr	r3, [r7, #4]
 8031986:	2201      	movs	r2, #1
 8031988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 803198c:	687b      	ldr	r3, [r7, #4]
 803198e:	78fa      	ldrb	r2, [r7, #3]
 8031990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8031994:	687b      	ldr	r3, [r7, #4]
 8031996:	681b      	ldr	r3, [r3, #0]
 8031998:	78fa      	ldrb	r2, [r7, #3]
 803199a:	4611      	mov	r1, r2
 803199c:	4618      	mov	r0, r3
 803199e:	f008 fee5 	bl	803a76c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80319a2:	687b      	ldr	r3, [r7, #4]
 80319a4:	2200      	movs	r2, #0
 80319a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80319aa:	2300      	movs	r3, #0
}
 80319ac:	4618      	mov	r0, r3
 80319ae:	3708      	adds	r7, #8
 80319b0:	46bd      	mov	sp, r7
 80319b2:	bd80      	pop	{r7, pc}

080319b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80319b4:	b580      	push	{r7, lr}
 80319b6:	b084      	sub	sp, #16
 80319b8:	af00      	add	r7, sp, #0
 80319ba:	6078      	str	r0, [r7, #4]
 80319bc:	4608      	mov	r0, r1
 80319be:	4611      	mov	r1, r2
 80319c0:	461a      	mov	r2, r3
 80319c2:	4603      	mov	r3, r0
 80319c4:	70fb      	strb	r3, [r7, #3]
 80319c6:	460b      	mov	r3, r1
 80319c8:	803b      	strh	r3, [r7, #0]
 80319ca:	4613      	mov	r3, r2
 80319cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80319ce:	2300      	movs	r3, #0
 80319d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80319d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80319d6:	2b00      	cmp	r3, #0
 80319d8:	da0f      	bge.n	80319fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80319da:	78fb      	ldrb	r3, [r7, #3]
 80319dc:	f003 020f 	and.w	r2, r3, #15
 80319e0:	4613      	mov	r3, r2
 80319e2:	00db      	lsls	r3, r3, #3
 80319e4:	4413      	add	r3, r2
 80319e6:	009b      	lsls	r3, r3, #2
 80319e8:	3338      	adds	r3, #56	; 0x38
 80319ea:	687a      	ldr	r2, [r7, #4]
 80319ec:	4413      	add	r3, r2
 80319ee:	3304      	adds	r3, #4
 80319f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80319f2:	68fb      	ldr	r3, [r7, #12]
 80319f4:	2201      	movs	r2, #1
 80319f6:	705a      	strb	r2, [r3, #1]
 80319f8:	e00f      	b.n	8031a1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80319fa:	78fb      	ldrb	r3, [r7, #3]
 80319fc:	f003 020f 	and.w	r2, r3, #15
 8031a00:	4613      	mov	r3, r2
 8031a02:	00db      	lsls	r3, r3, #3
 8031a04:	4413      	add	r3, r2
 8031a06:	009b      	lsls	r3, r3, #2
 8031a08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8031a0c:	687a      	ldr	r2, [r7, #4]
 8031a0e:	4413      	add	r3, r2
 8031a10:	3304      	adds	r3, #4
 8031a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8031a14:	68fb      	ldr	r3, [r7, #12]
 8031a16:	2200      	movs	r2, #0
 8031a18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8031a1a:	78fb      	ldrb	r3, [r7, #3]
 8031a1c:	f003 030f 	and.w	r3, r3, #15
 8031a20:	b2da      	uxtb	r2, r3
 8031a22:	68fb      	ldr	r3, [r7, #12]
 8031a24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8031a26:	883a      	ldrh	r2, [r7, #0]
 8031a28:	68fb      	ldr	r3, [r7, #12]
 8031a2a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8031a2c:	68fb      	ldr	r3, [r7, #12]
 8031a2e:	78ba      	ldrb	r2, [r7, #2]
 8031a30:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8031a32:	68fb      	ldr	r3, [r7, #12]
 8031a34:	785b      	ldrb	r3, [r3, #1]
 8031a36:	2b00      	cmp	r3, #0
 8031a38:	d004      	beq.n	8031a44 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8031a3a:	68fb      	ldr	r3, [r7, #12]
 8031a3c:	781b      	ldrb	r3, [r3, #0]
 8031a3e:	b29a      	uxth	r2, r3
 8031a40:	68fb      	ldr	r3, [r7, #12]
 8031a42:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8031a44:	78bb      	ldrb	r3, [r7, #2]
 8031a46:	2b02      	cmp	r3, #2
 8031a48:	d102      	bne.n	8031a50 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8031a4a:	68fb      	ldr	r3, [r7, #12]
 8031a4c:	2200      	movs	r2, #0
 8031a4e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8031a50:	687b      	ldr	r3, [r7, #4]
 8031a52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8031a56:	2b01      	cmp	r3, #1
 8031a58:	d101      	bne.n	8031a5e <HAL_PCD_EP_Open+0xaa>
 8031a5a:	2302      	movs	r3, #2
 8031a5c:	e00e      	b.n	8031a7c <HAL_PCD_EP_Open+0xc8>
 8031a5e:	687b      	ldr	r3, [r7, #4]
 8031a60:	2201      	movs	r2, #1
 8031a62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8031a66:	687b      	ldr	r3, [r7, #4]
 8031a68:	681b      	ldr	r3, [r3, #0]
 8031a6a:	68f9      	ldr	r1, [r7, #12]
 8031a6c:	4618      	mov	r0, r3
 8031a6e:	f007 ff59 	bl	8039924 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8031a72:	687b      	ldr	r3, [r7, #4]
 8031a74:	2200      	movs	r2, #0
 8031a76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8031a7a:	7afb      	ldrb	r3, [r7, #11]
}
 8031a7c:	4618      	mov	r0, r3
 8031a7e:	3710      	adds	r7, #16
 8031a80:	46bd      	mov	sp, r7
 8031a82:	bd80      	pop	{r7, pc}

08031a84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8031a84:	b580      	push	{r7, lr}
 8031a86:	b084      	sub	sp, #16
 8031a88:	af00      	add	r7, sp, #0
 8031a8a:	6078      	str	r0, [r7, #4]
 8031a8c:	460b      	mov	r3, r1
 8031a8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8031a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8031a94:	2b00      	cmp	r3, #0
 8031a96:	da0f      	bge.n	8031ab8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8031a98:	78fb      	ldrb	r3, [r7, #3]
 8031a9a:	f003 020f 	and.w	r2, r3, #15
 8031a9e:	4613      	mov	r3, r2
 8031aa0:	00db      	lsls	r3, r3, #3
 8031aa2:	4413      	add	r3, r2
 8031aa4:	009b      	lsls	r3, r3, #2
 8031aa6:	3338      	adds	r3, #56	; 0x38
 8031aa8:	687a      	ldr	r2, [r7, #4]
 8031aaa:	4413      	add	r3, r2
 8031aac:	3304      	adds	r3, #4
 8031aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8031ab0:	68fb      	ldr	r3, [r7, #12]
 8031ab2:	2201      	movs	r2, #1
 8031ab4:	705a      	strb	r2, [r3, #1]
 8031ab6:	e00f      	b.n	8031ad8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8031ab8:	78fb      	ldrb	r3, [r7, #3]
 8031aba:	f003 020f 	and.w	r2, r3, #15
 8031abe:	4613      	mov	r3, r2
 8031ac0:	00db      	lsls	r3, r3, #3
 8031ac2:	4413      	add	r3, r2
 8031ac4:	009b      	lsls	r3, r3, #2
 8031ac6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8031aca:	687a      	ldr	r2, [r7, #4]
 8031acc:	4413      	add	r3, r2
 8031ace:	3304      	adds	r3, #4
 8031ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8031ad2:	68fb      	ldr	r3, [r7, #12]
 8031ad4:	2200      	movs	r2, #0
 8031ad6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8031ad8:	78fb      	ldrb	r3, [r7, #3]
 8031ada:	f003 030f 	and.w	r3, r3, #15
 8031ade:	b2da      	uxtb	r2, r3
 8031ae0:	68fb      	ldr	r3, [r7, #12]
 8031ae2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8031ae4:	687b      	ldr	r3, [r7, #4]
 8031ae6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8031aea:	2b01      	cmp	r3, #1
 8031aec:	d101      	bne.n	8031af2 <HAL_PCD_EP_Close+0x6e>
 8031aee:	2302      	movs	r3, #2
 8031af0:	e00e      	b.n	8031b10 <HAL_PCD_EP_Close+0x8c>
 8031af2:	687b      	ldr	r3, [r7, #4]
 8031af4:	2201      	movs	r2, #1
 8031af6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8031afa:	687b      	ldr	r3, [r7, #4]
 8031afc:	681b      	ldr	r3, [r3, #0]
 8031afe:	68f9      	ldr	r1, [r7, #12]
 8031b00:	4618      	mov	r0, r3
 8031b02:	f007 ff97 	bl	8039a34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8031b06:	687b      	ldr	r3, [r7, #4]
 8031b08:	2200      	movs	r2, #0
 8031b0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8031b0e:	2300      	movs	r3, #0
}
 8031b10:	4618      	mov	r0, r3
 8031b12:	3710      	adds	r7, #16
 8031b14:	46bd      	mov	sp, r7
 8031b16:	bd80      	pop	{r7, pc}

08031b18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8031b18:	b580      	push	{r7, lr}
 8031b1a:	b086      	sub	sp, #24
 8031b1c:	af00      	add	r7, sp, #0
 8031b1e:	60f8      	str	r0, [r7, #12]
 8031b20:	607a      	str	r2, [r7, #4]
 8031b22:	603b      	str	r3, [r7, #0]
 8031b24:	460b      	mov	r3, r1
 8031b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8031b28:	7afb      	ldrb	r3, [r7, #11]
 8031b2a:	f003 020f 	and.w	r2, r3, #15
 8031b2e:	4613      	mov	r3, r2
 8031b30:	00db      	lsls	r3, r3, #3
 8031b32:	4413      	add	r3, r2
 8031b34:	009b      	lsls	r3, r3, #2
 8031b36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8031b3a:	68fa      	ldr	r2, [r7, #12]
 8031b3c:	4413      	add	r3, r2
 8031b3e:	3304      	adds	r3, #4
 8031b40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8031b42:	697b      	ldr	r3, [r7, #20]
 8031b44:	687a      	ldr	r2, [r7, #4]
 8031b46:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8031b48:	697b      	ldr	r3, [r7, #20]
 8031b4a:	683a      	ldr	r2, [r7, #0]
 8031b4c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8031b4e:	697b      	ldr	r3, [r7, #20]
 8031b50:	2200      	movs	r2, #0
 8031b52:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8031b54:	697b      	ldr	r3, [r7, #20]
 8031b56:	2200      	movs	r2, #0
 8031b58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8031b5a:	7afb      	ldrb	r3, [r7, #11]
 8031b5c:	f003 030f 	and.w	r3, r3, #15
 8031b60:	b2da      	uxtb	r2, r3
 8031b62:	697b      	ldr	r3, [r7, #20]
 8031b64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8031b66:	68fb      	ldr	r3, [r7, #12]
 8031b68:	691b      	ldr	r3, [r3, #16]
 8031b6a:	2b01      	cmp	r3, #1
 8031b6c:	d102      	bne.n	8031b74 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8031b6e:	687a      	ldr	r2, [r7, #4]
 8031b70:	697b      	ldr	r3, [r7, #20]
 8031b72:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8031b74:	7afb      	ldrb	r3, [r7, #11]
 8031b76:	f003 030f 	and.w	r3, r3, #15
 8031b7a:	2b00      	cmp	r3, #0
 8031b7c:	d109      	bne.n	8031b92 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8031b7e:	68fb      	ldr	r3, [r7, #12]
 8031b80:	6818      	ldr	r0, [r3, #0]
 8031b82:	68fb      	ldr	r3, [r7, #12]
 8031b84:	691b      	ldr	r3, [r3, #16]
 8031b86:	b2db      	uxtb	r3, r3
 8031b88:	461a      	mov	r2, r3
 8031b8a:	6979      	ldr	r1, [r7, #20]
 8031b8c:	f008 fa7e 	bl	803a08c <USB_EP0StartXfer>
 8031b90:	e008      	b.n	8031ba4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8031b92:	68fb      	ldr	r3, [r7, #12]
 8031b94:	6818      	ldr	r0, [r3, #0]
 8031b96:	68fb      	ldr	r3, [r7, #12]
 8031b98:	691b      	ldr	r3, [r3, #16]
 8031b9a:	b2db      	uxtb	r3, r3
 8031b9c:	461a      	mov	r2, r3
 8031b9e:	6979      	ldr	r1, [r7, #20]
 8031ba0:	f008 f824 	bl	8039bec <USB_EPStartXfer>
  }

  return HAL_OK;
 8031ba4:	2300      	movs	r3, #0
}
 8031ba6:	4618      	mov	r0, r3
 8031ba8:	3718      	adds	r7, #24
 8031baa:	46bd      	mov	sp, r7
 8031bac:	bd80      	pop	{r7, pc}

08031bae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8031bae:	b480      	push	{r7}
 8031bb0:	b083      	sub	sp, #12
 8031bb2:	af00      	add	r7, sp, #0
 8031bb4:	6078      	str	r0, [r7, #4]
 8031bb6:	460b      	mov	r3, r1
 8031bb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8031bba:	78fb      	ldrb	r3, [r7, #3]
 8031bbc:	f003 020f 	and.w	r2, r3, #15
 8031bc0:	6879      	ldr	r1, [r7, #4]
 8031bc2:	4613      	mov	r3, r2
 8031bc4:	00db      	lsls	r3, r3, #3
 8031bc6:	4413      	add	r3, r2
 8031bc8:	009b      	lsls	r3, r3, #2
 8031bca:	440b      	add	r3, r1
 8031bcc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8031bd0:	681b      	ldr	r3, [r3, #0]
}
 8031bd2:	4618      	mov	r0, r3
 8031bd4:	370c      	adds	r7, #12
 8031bd6:	46bd      	mov	sp, r7
 8031bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031bdc:	4770      	bx	lr

08031bde <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8031bde:	b580      	push	{r7, lr}
 8031be0:	b086      	sub	sp, #24
 8031be2:	af00      	add	r7, sp, #0
 8031be4:	60f8      	str	r0, [r7, #12]
 8031be6:	607a      	str	r2, [r7, #4]
 8031be8:	603b      	str	r3, [r7, #0]
 8031bea:	460b      	mov	r3, r1
 8031bec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8031bee:	7afb      	ldrb	r3, [r7, #11]
 8031bf0:	f003 020f 	and.w	r2, r3, #15
 8031bf4:	4613      	mov	r3, r2
 8031bf6:	00db      	lsls	r3, r3, #3
 8031bf8:	4413      	add	r3, r2
 8031bfa:	009b      	lsls	r3, r3, #2
 8031bfc:	3338      	adds	r3, #56	; 0x38
 8031bfe:	68fa      	ldr	r2, [r7, #12]
 8031c00:	4413      	add	r3, r2
 8031c02:	3304      	adds	r3, #4
 8031c04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8031c06:	697b      	ldr	r3, [r7, #20]
 8031c08:	687a      	ldr	r2, [r7, #4]
 8031c0a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8031c0c:	697b      	ldr	r3, [r7, #20]
 8031c0e:	683a      	ldr	r2, [r7, #0]
 8031c10:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8031c12:	697b      	ldr	r3, [r7, #20]
 8031c14:	2200      	movs	r2, #0
 8031c16:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8031c18:	697b      	ldr	r3, [r7, #20]
 8031c1a:	2201      	movs	r2, #1
 8031c1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8031c1e:	7afb      	ldrb	r3, [r7, #11]
 8031c20:	f003 030f 	and.w	r3, r3, #15
 8031c24:	b2da      	uxtb	r2, r3
 8031c26:	697b      	ldr	r3, [r7, #20]
 8031c28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8031c2a:	68fb      	ldr	r3, [r7, #12]
 8031c2c:	691b      	ldr	r3, [r3, #16]
 8031c2e:	2b01      	cmp	r3, #1
 8031c30:	d102      	bne.n	8031c38 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8031c32:	687a      	ldr	r2, [r7, #4]
 8031c34:	697b      	ldr	r3, [r7, #20]
 8031c36:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8031c38:	7afb      	ldrb	r3, [r7, #11]
 8031c3a:	f003 030f 	and.w	r3, r3, #15
 8031c3e:	2b00      	cmp	r3, #0
 8031c40:	d109      	bne.n	8031c56 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8031c42:	68fb      	ldr	r3, [r7, #12]
 8031c44:	6818      	ldr	r0, [r3, #0]
 8031c46:	68fb      	ldr	r3, [r7, #12]
 8031c48:	691b      	ldr	r3, [r3, #16]
 8031c4a:	b2db      	uxtb	r3, r3
 8031c4c:	461a      	mov	r2, r3
 8031c4e:	6979      	ldr	r1, [r7, #20]
 8031c50:	f008 fa1c 	bl	803a08c <USB_EP0StartXfer>
 8031c54:	e008      	b.n	8031c68 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8031c56:	68fb      	ldr	r3, [r7, #12]
 8031c58:	6818      	ldr	r0, [r3, #0]
 8031c5a:	68fb      	ldr	r3, [r7, #12]
 8031c5c:	691b      	ldr	r3, [r3, #16]
 8031c5e:	b2db      	uxtb	r3, r3
 8031c60:	461a      	mov	r2, r3
 8031c62:	6979      	ldr	r1, [r7, #20]
 8031c64:	f007 ffc2 	bl	8039bec <USB_EPStartXfer>
  }

  return HAL_OK;
 8031c68:	2300      	movs	r3, #0
}
 8031c6a:	4618      	mov	r0, r3
 8031c6c:	3718      	adds	r7, #24
 8031c6e:	46bd      	mov	sp, r7
 8031c70:	bd80      	pop	{r7, pc}

08031c72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8031c72:	b580      	push	{r7, lr}
 8031c74:	b084      	sub	sp, #16
 8031c76:	af00      	add	r7, sp, #0
 8031c78:	6078      	str	r0, [r7, #4]
 8031c7a:	460b      	mov	r3, r1
 8031c7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8031c7e:	78fb      	ldrb	r3, [r7, #3]
 8031c80:	f003 020f 	and.w	r2, r3, #15
 8031c84:	687b      	ldr	r3, [r7, #4]
 8031c86:	685b      	ldr	r3, [r3, #4]
 8031c88:	429a      	cmp	r2, r3
 8031c8a:	d901      	bls.n	8031c90 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8031c8c:	2301      	movs	r3, #1
 8031c8e:	e050      	b.n	8031d32 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8031c90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8031c94:	2b00      	cmp	r3, #0
 8031c96:	da0f      	bge.n	8031cb8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8031c98:	78fb      	ldrb	r3, [r7, #3]
 8031c9a:	f003 020f 	and.w	r2, r3, #15
 8031c9e:	4613      	mov	r3, r2
 8031ca0:	00db      	lsls	r3, r3, #3
 8031ca2:	4413      	add	r3, r2
 8031ca4:	009b      	lsls	r3, r3, #2
 8031ca6:	3338      	adds	r3, #56	; 0x38
 8031ca8:	687a      	ldr	r2, [r7, #4]
 8031caa:	4413      	add	r3, r2
 8031cac:	3304      	adds	r3, #4
 8031cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8031cb0:	68fb      	ldr	r3, [r7, #12]
 8031cb2:	2201      	movs	r2, #1
 8031cb4:	705a      	strb	r2, [r3, #1]
 8031cb6:	e00d      	b.n	8031cd4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8031cb8:	78fa      	ldrb	r2, [r7, #3]
 8031cba:	4613      	mov	r3, r2
 8031cbc:	00db      	lsls	r3, r3, #3
 8031cbe:	4413      	add	r3, r2
 8031cc0:	009b      	lsls	r3, r3, #2
 8031cc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8031cc6:	687a      	ldr	r2, [r7, #4]
 8031cc8:	4413      	add	r3, r2
 8031cca:	3304      	adds	r3, #4
 8031ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8031cce:	68fb      	ldr	r3, [r7, #12]
 8031cd0:	2200      	movs	r2, #0
 8031cd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8031cd4:	68fb      	ldr	r3, [r7, #12]
 8031cd6:	2201      	movs	r2, #1
 8031cd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8031cda:	78fb      	ldrb	r3, [r7, #3]
 8031cdc:	f003 030f 	and.w	r3, r3, #15
 8031ce0:	b2da      	uxtb	r2, r3
 8031ce2:	68fb      	ldr	r3, [r7, #12]
 8031ce4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8031ce6:	687b      	ldr	r3, [r7, #4]
 8031ce8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8031cec:	2b01      	cmp	r3, #1
 8031cee:	d101      	bne.n	8031cf4 <HAL_PCD_EP_SetStall+0x82>
 8031cf0:	2302      	movs	r3, #2
 8031cf2:	e01e      	b.n	8031d32 <HAL_PCD_EP_SetStall+0xc0>
 8031cf4:	687b      	ldr	r3, [r7, #4]
 8031cf6:	2201      	movs	r2, #1
 8031cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8031cfc:	687b      	ldr	r3, [r7, #4]
 8031cfe:	681b      	ldr	r3, [r3, #0]
 8031d00:	68f9      	ldr	r1, [r7, #12]
 8031d02:	4618      	mov	r0, r3
 8031d04:	f008 fc5e 	bl	803a5c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8031d08:	78fb      	ldrb	r3, [r7, #3]
 8031d0a:	f003 030f 	and.w	r3, r3, #15
 8031d0e:	2b00      	cmp	r3, #0
 8031d10:	d10a      	bne.n	8031d28 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8031d12:	687b      	ldr	r3, [r7, #4]
 8031d14:	6818      	ldr	r0, [r3, #0]
 8031d16:	687b      	ldr	r3, [r7, #4]
 8031d18:	691b      	ldr	r3, [r3, #16]
 8031d1a:	b2d9      	uxtb	r1, r3
 8031d1c:	687b      	ldr	r3, [r7, #4]
 8031d1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8031d22:	461a      	mov	r2, r3
 8031d24:	f008 fe50 	bl	803a9c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8031d28:	687b      	ldr	r3, [r7, #4]
 8031d2a:	2200      	movs	r2, #0
 8031d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8031d30:	2300      	movs	r3, #0
}
 8031d32:	4618      	mov	r0, r3
 8031d34:	3710      	adds	r7, #16
 8031d36:	46bd      	mov	sp, r7
 8031d38:	bd80      	pop	{r7, pc}

08031d3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8031d3a:	b580      	push	{r7, lr}
 8031d3c:	b084      	sub	sp, #16
 8031d3e:	af00      	add	r7, sp, #0
 8031d40:	6078      	str	r0, [r7, #4]
 8031d42:	460b      	mov	r3, r1
 8031d44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8031d46:	78fb      	ldrb	r3, [r7, #3]
 8031d48:	f003 020f 	and.w	r2, r3, #15
 8031d4c:	687b      	ldr	r3, [r7, #4]
 8031d4e:	685b      	ldr	r3, [r3, #4]
 8031d50:	429a      	cmp	r2, r3
 8031d52:	d901      	bls.n	8031d58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8031d54:	2301      	movs	r3, #1
 8031d56:	e042      	b.n	8031dde <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8031d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8031d5c:	2b00      	cmp	r3, #0
 8031d5e:	da0f      	bge.n	8031d80 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8031d60:	78fb      	ldrb	r3, [r7, #3]
 8031d62:	f003 020f 	and.w	r2, r3, #15
 8031d66:	4613      	mov	r3, r2
 8031d68:	00db      	lsls	r3, r3, #3
 8031d6a:	4413      	add	r3, r2
 8031d6c:	009b      	lsls	r3, r3, #2
 8031d6e:	3338      	adds	r3, #56	; 0x38
 8031d70:	687a      	ldr	r2, [r7, #4]
 8031d72:	4413      	add	r3, r2
 8031d74:	3304      	adds	r3, #4
 8031d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8031d78:	68fb      	ldr	r3, [r7, #12]
 8031d7a:	2201      	movs	r2, #1
 8031d7c:	705a      	strb	r2, [r3, #1]
 8031d7e:	e00f      	b.n	8031da0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8031d80:	78fb      	ldrb	r3, [r7, #3]
 8031d82:	f003 020f 	and.w	r2, r3, #15
 8031d86:	4613      	mov	r3, r2
 8031d88:	00db      	lsls	r3, r3, #3
 8031d8a:	4413      	add	r3, r2
 8031d8c:	009b      	lsls	r3, r3, #2
 8031d8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8031d92:	687a      	ldr	r2, [r7, #4]
 8031d94:	4413      	add	r3, r2
 8031d96:	3304      	adds	r3, #4
 8031d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8031d9a:	68fb      	ldr	r3, [r7, #12]
 8031d9c:	2200      	movs	r2, #0
 8031d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8031da0:	68fb      	ldr	r3, [r7, #12]
 8031da2:	2200      	movs	r2, #0
 8031da4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8031da6:	78fb      	ldrb	r3, [r7, #3]
 8031da8:	f003 030f 	and.w	r3, r3, #15
 8031dac:	b2da      	uxtb	r2, r3
 8031dae:	68fb      	ldr	r3, [r7, #12]
 8031db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8031db2:	687b      	ldr	r3, [r7, #4]
 8031db4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8031db8:	2b01      	cmp	r3, #1
 8031dba:	d101      	bne.n	8031dc0 <HAL_PCD_EP_ClrStall+0x86>
 8031dbc:	2302      	movs	r3, #2
 8031dbe:	e00e      	b.n	8031dde <HAL_PCD_EP_ClrStall+0xa4>
 8031dc0:	687b      	ldr	r3, [r7, #4]
 8031dc2:	2201      	movs	r2, #1
 8031dc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8031dc8:	687b      	ldr	r3, [r7, #4]
 8031dca:	681b      	ldr	r3, [r3, #0]
 8031dcc:	68f9      	ldr	r1, [r7, #12]
 8031dce:	4618      	mov	r0, r3
 8031dd0:	f008 fc66 	bl	803a6a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8031dd4:	687b      	ldr	r3, [r7, #4]
 8031dd6:	2200      	movs	r2, #0
 8031dd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8031ddc:	2300      	movs	r3, #0
}
 8031dde:	4618      	mov	r0, r3
 8031de0:	3710      	adds	r7, #16
 8031de2:	46bd      	mov	sp, r7
 8031de4:	bd80      	pop	{r7, pc}

08031de6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8031de6:	b580      	push	{r7, lr}
 8031de8:	b084      	sub	sp, #16
 8031dea:	af00      	add	r7, sp, #0
 8031dec:	6078      	str	r0, [r7, #4]
 8031dee:	460b      	mov	r3, r1
 8031df0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8031df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8031df6:	2b00      	cmp	r3, #0
 8031df8:	da0c      	bge.n	8031e14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8031dfa:	78fb      	ldrb	r3, [r7, #3]
 8031dfc:	f003 020f 	and.w	r2, r3, #15
 8031e00:	4613      	mov	r3, r2
 8031e02:	00db      	lsls	r3, r3, #3
 8031e04:	4413      	add	r3, r2
 8031e06:	009b      	lsls	r3, r3, #2
 8031e08:	3338      	adds	r3, #56	; 0x38
 8031e0a:	687a      	ldr	r2, [r7, #4]
 8031e0c:	4413      	add	r3, r2
 8031e0e:	3304      	adds	r3, #4
 8031e10:	60fb      	str	r3, [r7, #12]
 8031e12:	e00c      	b.n	8031e2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8031e14:	78fb      	ldrb	r3, [r7, #3]
 8031e16:	f003 020f 	and.w	r2, r3, #15
 8031e1a:	4613      	mov	r3, r2
 8031e1c:	00db      	lsls	r3, r3, #3
 8031e1e:	4413      	add	r3, r2
 8031e20:	009b      	lsls	r3, r3, #2
 8031e22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8031e26:	687a      	ldr	r2, [r7, #4]
 8031e28:	4413      	add	r3, r2
 8031e2a:	3304      	adds	r3, #4
 8031e2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8031e2e:	687b      	ldr	r3, [r7, #4]
 8031e30:	681b      	ldr	r3, [r3, #0]
 8031e32:	68f9      	ldr	r1, [r7, #12]
 8031e34:	4618      	mov	r0, r3
 8031e36:	f008 fa85 	bl	803a344 <USB_EPStopXfer>
 8031e3a:	4603      	mov	r3, r0
 8031e3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8031e3e:	7afb      	ldrb	r3, [r7, #11]
}
 8031e40:	4618      	mov	r0, r3
 8031e42:	3710      	adds	r7, #16
 8031e44:	46bd      	mov	sp, r7
 8031e46:	bd80      	pop	{r7, pc}

08031e48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8031e48:	b580      	push	{r7, lr}
 8031e4a:	b08a      	sub	sp, #40	; 0x28
 8031e4c:	af02      	add	r7, sp, #8
 8031e4e:	6078      	str	r0, [r7, #4]
 8031e50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8031e52:	687b      	ldr	r3, [r7, #4]
 8031e54:	681b      	ldr	r3, [r3, #0]
 8031e56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8031e58:	697b      	ldr	r3, [r7, #20]
 8031e5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8031e5c:	683a      	ldr	r2, [r7, #0]
 8031e5e:	4613      	mov	r3, r2
 8031e60:	00db      	lsls	r3, r3, #3
 8031e62:	4413      	add	r3, r2
 8031e64:	009b      	lsls	r3, r3, #2
 8031e66:	3338      	adds	r3, #56	; 0x38
 8031e68:	687a      	ldr	r2, [r7, #4]
 8031e6a:	4413      	add	r3, r2
 8031e6c:	3304      	adds	r3, #4
 8031e6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8031e70:	68fb      	ldr	r3, [r7, #12]
 8031e72:	6a1a      	ldr	r2, [r3, #32]
 8031e74:	68fb      	ldr	r3, [r7, #12]
 8031e76:	699b      	ldr	r3, [r3, #24]
 8031e78:	429a      	cmp	r2, r3
 8031e7a:	d901      	bls.n	8031e80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8031e7c:	2301      	movs	r3, #1
 8031e7e:	e06c      	b.n	8031f5a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8031e80:	68fb      	ldr	r3, [r7, #12]
 8031e82:	699a      	ldr	r2, [r3, #24]
 8031e84:	68fb      	ldr	r3, [r7, #12]
 8031e86:	6a1b      	ldr	r3, [r3, #32]
 8031e88:	1ad3      	subs	r3, r2, r3
 8031e8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8031e8c:	68fb      	ldr	r3, [r7, #12]
 8031e8e:	68db      	ldr	r3, [r3, #12]
 8031e90:	69fa      	ldr	r2, [r7, #28]
 8031e92:	429a      	cmp	r2, r3
 8031e94:	d902      	bls.n	8031e9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8031e96:	68fb      	ldr	r3, [r7, #12]
 8031e98:	68db      	ldr	r3, [r3, #12]
 8031e9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8031e9c:	69fb      	ldr	r3, [r7, #28]
 8031e9e:	3303      	adds	r3, #3
 8031ea0:	089b      	lsrs	r3, r3, #2
 8031ea2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8031ea4:	e02b      	b.n	8031efe <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8031ea6:	68fb      	ldr	r3, [r7, #12]
 8031ea8:	699a      	ldr	r2, [r3, #24]
 8031eaa:	68fb      	ldr	r3, [r7, #12]
 8031eac:	6a1b      	ldr	r3, [r3, #32]
 8031eae:	1ad3      	subs	r3, r2, r3
 8031eb0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8031eb2:	68fb      	ldr	r3, [r7, #12]
 8031eb4:	68db      	ldr	r3, [r3, #12]
 8031eb6:	69fa      	ldr	r2, [r7, #28]
 8031eb8:	429a      	cmp	r2, r3
 8031eba:	d902      	bls.n	8031ec2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8031ebc:	68fb      	ldr	r3, [r7, #12]
 8031ebe:	68db      	ldr	r3, [r3, #12]
 8031ec0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8031ec2:	69fb      	ldr	r3, [r7, #28]
 8031ec4:	3303      	adds	r3, #3
 8031ec6:	089b      	lsrs	r3, r3, #2
 8031ec8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8031eca:	68fb      	ldr	r3, [r7, #12]
 8031ecc:	6919      	ldr	r1, [r3, #16]
 8031ece:	683b      	ldr	r3, [r7, #0]
 8031ed0:	b2da      	uxtb	r2, r3
 8031ed2:	69fb      	ldr	r3, [r7, #28]
 8031ed4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8031ed6:	687b      	ldr	r3, [r7, #4]
 8031ed8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8031eda:	b2db      	uxtb	r3, r3
 8031edc:	9300      	str	r3, [sp, #0]
 8031ede:	4603      	mov	r3, r0
 8031ee0:	6978      	ldr	r0, [r7, #20]
 8031ee2:	f008 fad9 	bl	803a498 <USB_WritePacket>

    ep->xfer_buff  += len;
 8031ee6:	68fb      	ldr	r3, [r7, #12]
 8031ee8:	691a      	ldr	r2, [r3, #16]
 8031eea:	69fb      	ldr	r3, [r7, #28]
 8031eec:	441a      	add	r2, r3
 8031eee:	68fb      	ldr	r3, [r7, #12]
 8031ef0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8031ef2:	68fb      	ldr	r3, [r7, #12]
 8031ef4:	6a1a      	ldr	r2, [r3, #32]
 8031ef6:	69fb      	ldr	r3, [r7, #28]
 8031ef8:	441a      	add	r2, r3
 8031efa:	68fb      	ldr	r3, [r7, #12]
 8031efc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8031efe:	683b      	ldr	r3, [r7, #0]
 8031f00:	015a      	lsls	r2, r3, #5
 8031f02:	693b      	ldr	r3, [r7, #16]
 8031f04:	4413      	add	r3, r2
 8031f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8031f0a:	699b      	ldr	r3, [r3, #24]
 8031f0c:	b29b      	uxth	r3, r3
 8031f0e:	69ba      	ldr	r2, [r7, #24]
 8031f10:	429a      	cmp	r2, r3
 8031f12:	d809      	bhi.n	8031f28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8031f14:	68fb      	ldr	r3, [r7, #12]
 8031f16:	6a1a      	ldr	r2, [r3, #32]
 8031f18:	68fb      	ldr	r3, [r7, #12]
 8031f1a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8031f1c:	429a      	cmp	r2, r3
 8031f1e:	d203      	bcs.n	8031f28 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8031f20:	68fb      	ldr	r3, [r7, #12]
 8031f22:	699b      	ldr	r3, [r3, #24]
 8031f24:	2b00      	cmp	r3, #0
 8031f26:	d1be      	bne.n	8031ea6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8031f28:	68fb      	ldr	r3, [r7, #12]
 8031f2a:	699a      	ldr	r2, [r3, #24]
 8031f2c:	68fb      	ldr	r3, [r7, #12]
 8031f2e:	6a1b      	ldr	r3, [r3, #32]
 8031f30:	429a      	cmp	r2, r3
 8031f32:	d811      	bhi.n	8031f58 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8031f34:	683b      	ldr	r3, [r7, #0]
 8031f36:	f003 030f 	and.w	r3, r3, #15
 8031f3a:	2201      	movs	r2, #1
 8031f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8031f40:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8031f42:	693b      	ldr	r3, [r7, #16]
 8031f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8031f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8031f4a:	68bb      	ldr	r3, [r7, #8]
 8031f4c:	43db      	mvns	r3, r3
 8031f4e:	6939      	ldr	r1, [r7, #16]
 8031f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8031f54:	4013      	ands	r3, r2
 8031f56:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8031f58:	2300      	movs	r3, #0
}
 8031f5a:	4618      	mov	r0, r3
 8031f5c:	3720      	adds	r7, #32
 8031f5e:	46bd      	mov	sp, r7
 8031f60:	bd80      	pop	{r7, pc}
	...

08031f64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8031f64:	b580      	push	{r7, lr}
 8031f66:	b088      	sub	sp, #32
 8031f68:	af00      	add	r7, sp, #0
 8031f6a:	6078      	str	r0, [r7, #4]
 8031f6c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8031f6e:	687b      	ldr	r3, [r7, #4]
 8031f70:	681b      	ldr	r3, [r3, #0]
 8031f72:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8031f74:	69fb      	ldr	r3, [r7, #28]
 8031f76:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8031f78:	69fb      	ldr	r3, [r7, #28]
 8031f7a:	333c      	adds	r3, #60	; 0x3c
 8031f7c:	3304      	adds	r3, #4
 8031f7e:	681b      	ldr	r3, [r3, #0]
 8031f80:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8031f82:	683b      	ldr	r3, [r7, #0]
 8031f84:	015a      	lsls	r2, r3, #5
 8031f86:	69bb      	ldr	r3, [r7, #24]
 8031f88:	4413      	add	r3, r2
 8031f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031f8e:	689b      	ldr	r3, [r3, #8]
 8031f90:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8031f92:	687b      	ldr	r3, [r7, #4]
 8031f94:	691b      	ldr	r3, [r3, #16]
 8031f96:	2b01      	cmp	r3, #1
 8031f98:	d17b      	bne.n	8032092 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8031f9a:	693b      	ldr	r3, [r7, #16]
 8031f9c:	f003 0308 	and.w	r3, r3, #8
 8031fa0:	2b00      	cmp	r3, #0
 8031fa2:	d015      	beq.n	8031fd0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8031fa4:	697b      	ldr	r3, [r7, #20]
 8031fa6:	4a61      	ldr	r2, [pc, #388]	; (803212c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8031fa8:	4293      	cmp	r3, r2
 8031faa:	f240 80b9 	bls.w	8032120 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8031fae:	693b      	ldr	r3, [r7, #16]
 8031fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8031fb4:	2b00      	cmp	r3, #0
 8031fb6:	f000 80b3 	beq.w	8032120 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8031fba:	683b      	ldr	r3, [r7, #0]
 8031fbc:	015a      	lsls	r2, r3, #5
 8031fbe:	69bb      	ldr	r3, [r7, #24]
 8031fc0:	4413      	add	r3, r2
 8031fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031fc6:	461a      	mov	r2, r3
 8031fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8031fcc:	6093      	str	r3, [r2, #8]
 8031fce:	e0a7      	b.n	8032120 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8031fd0:	693b      	ldr	r3, [r7, #16]
 8031fd2:	f003 0320 	and.w	r3, r3, #32
 8031fd6:	2b00      	cmp	r3, #0
 8031fd8:	d009      	beq.n	8031fee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8031fda:	683b      	ldr	r3, [r7, #0]
 8031fdc:	015a      	lsls	r2, r3, #5
 8031fde:	69bb      	ldr	r3, [r7, #24]
 8031fe0:	4413      	add	r3, r2
 8031fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8031fe6:	461a      	mov	r2, r3
 8031fe8:	2320      	movs	r3, #32
 8031fea:	6093      	str	r3, [r2, #8]
 8031fec:	e098      	b.n	8032120 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8031fee:	693b      	ldr	r3, [r7, #16]
 8031ff0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8031ff4:	2b00      	cmp	r3, #0
 8031ff6:	f040 8093 	bne.w	8032120 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8031ffa:	697b      	ldr	r3, [r7, #20]
 8031ffc:	4a4b      	ldr	r2, [pc, #300]	; (803212c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8031ffe:	4293      	cmp	r3, r2
 8032000:	d90f      	bls.n	8032022 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8032002:	693b      	ldr	r3, [r7, #16]
 8032004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8032008:	2b00      	cmp	r3, #0
 803200a:	d00a      	beq.n	8032022 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 803200c:	683b      	ldr	r3, [r7, #0]
 803200e:	015a      	lsls	r2, r3, #5
 8032010:	69bb      	ldr	r3, [r7, #24]
 8032012:	4413      	add	r3, r2
 8032014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032018:	461a      	mov	r2, r3
 803201a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 803201e:	6093      	str	r3, [r2, #8]
 8032020:	e07e      	b.n	8032120 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8032022:	683a      	ldr	r2, [r7, #0]
 8032024:	4613      	mov	r3, r2
 8032026:	00db      	lsls	r3, r3, #3
 8032028:	4413      	add	r3, r2
 803202a:	009b      	lsls	r3, r3, #2
 803202c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8032030:	687a      	ldr	r2, [r7, #4]
 8032032:	4413      	add	r3, r2
 8032034:	3304      	adds	r3, #4
 8032036:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8032038:	68fb      	ldr	r3, [r7, #12]
 803203a:	69da      	ldr	r2, [r3, #28]
 803203c:	683b      	ldr	r3, [r7, #0]
 803203e:	0159      	lsls	r1, r3, #5
 8032040:	69bb      	ldr	r3, [r7, #24]
 8032042:	440b      	add	r3, r1
 8032044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032048:	691b      	ldr	r3, [r3, #16]
 803204a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803204e:	1ad2      	subs	r2, r2, r3
 8032050:	68fb      	ldr	r3, [r7, #12]
 8032052:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8032054:	683b      	ldr	r3, [r7, #0]
 8032056:	2b00      	cmp	r3, #0
 8032058:	d114      	bne.n	8032084 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 803205a:	68fb      	ldr	r3, [r7, #12]
 803205c:	699b      	ldr	r3, [r3, #24]
 803205e:	2b00      	cmp	r3, #0
 8032060:	d109      	bne.n	8032076 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8032062:	687b      	ldr	r3, [r7, #4]
 8032064:	6818      	ldr	r0, [r3, #0]
 8032066:	687b      	ldr	r3, [r7, #4]
 8032068:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803206c:	461a      	mov	r2, r3
 803206e:	2101      	movs	r1, #1
 8032070:	f008 fcaa 	bl	803a9c8 <USB_EP0_OutStart>
 8032074:	e006      	b.n	8032084 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8032076:	68fb      	ldr	r3, [r7, #12]
 8032078:	691a      	ldr	r2, [r3, #16]
 803207a:	68fb      	ldr	r3, [r7, #12]
 803207c:	6a1b      	ldr	r3, [r3, #32]
 803207e:	441a      	add	r2, r3
 8032080:	68fb      	ldr	r3, [r7, #12]
 8032082:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8032084:	683b      	ldr	r3, [r7, #0]
 8032086:	b2db      	uxtb	r3, r3
 8032088:	4619      	mov	r1, r3
 803208a:	6878      	ldr	r0, [r7, #4]
 803208c:	f00a ff1e 	bl	803cecc <HAL_PCD_DataOutStageCallback>
 8032090:	e046      	b.n	8032120 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8032092:	697b      	ldr	r3, [r7, #20]
 8032094:	4a26      	ldr	r2, [pc, #152]	; (8032130 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8032096:	4293      	cmp	r3, r2
 8032098:	d124      	bne.n	80320e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 803209a:	693b      	ldr	r3, [r7, #16]
 803209c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80320a0:	2b00      	cmp	r3, #0
 80320a2:	d00a      	beq.n	80320ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80320a4:	683b      	ldr	r3, [r7, #0]
 80320a6:	015a      	lsls	r2, r3, #5
 80320a8:	69bb      	ldr	r3, [r7, #24]
 80320aa:	4413      	add	r3, r2
 80320ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80320b0:	461a      	mov	r2, r3
 80320b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80320b6:	6093      	str	r3, [r2, #8]
 80320b8:	e032      	b.n	8032120 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80320ba:	693b      	ldr	r3, [r7, #16]
 80320bc:	f003 0320 	and.w	r3, r3, #32
 80320c0:	2b00      	cmp	r3, #0
 80320c2:	d008      	beq.n	80320d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80320c4:	683b      	ldr	r3, [r7, #0]
 80320c6:	015a      	lsls	r2, r3, #5
 80320c8:	69bb      	ldr	r3, [r7, #24]
 80320ca:	4413      	add	r3, r2
 80320cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80320d0:	461a      	mov	r2, r3
 80320d2:	2320      	movs	r3, #32
 80320d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80320d6:	683b      	ldr	r3, [r7, #0]
 80320d8:	b2db      	uxtb	r3, r3
 80320da:	4619      	mov	r1, r3
 80320dc:	6878      	ldr	r0, [r7, #4]
 80320de:	f00a fef5 	bl	803cecc <HAL_PCD_DataOutStageCallback>
 80320e2:	e01d      	b.n	8032120 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80320e4:	683b      	ldr	r3, [r7, #0]
 80320e6:	2b00      	cmp	r3, #0
 80320e8:	d114      	bne.n	8032114 <PCD_EP_OutXfrComplete_int+0x1b0>
 80320ea:	6879      	ldr	r1, [r7, #4]
 80320ec:	683a      	ldr	r2, [r7, #0]
 80320ee:	4613      	mov	r3, r2
 80320f0:	00db      	lsls	r3, r3, #3
 80320f2:	4413      	add	r3, r2
 80320f4:	009b      	lsls	r3, r3, #2
 80320f6:	440b      	add	r3, r1
 80320f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80320fc:	681b      	ldr	r3, [r3, #0]
 80320fe:	2b00      	cmp	r3, #0
 8032100:	d108      	bne.n	8032114 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8032102:	687b      	ldr	r3, [r7, #4]
 8032104:	6818      	ldr	r0, [r3, #0]
 8032106:	687b      	ldr	r3, [r7, #4]
 8032108:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803210c:	461a      	mov	r2, r3
 803210e:	2100      	movs	r1, #0
 8032110:	f008 fc5a 	bl	803a9c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8032114:	683b      	ldr	r3, [r7, #0]
 8032116:	b2db      	uxtb	r3, r3
 8032118:	4619      	mov	r1, r3
 803211a:	6878      	ldr	r0, [r7, #4]
 803211c:	f00a fed6 	bl	803cecc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8032120:	2300      	movs	r3, #0
}
 8032122:	4618      	mov	r0, r3
 8032124:	3720      	adds	r7, #32
 8032126:	46bd      	mov	sp, r7
 8032128:	bd80      	pop	{r7, pc}
 803212a:	bf00      	nop
 803212c:	4f54300a 	.word	0x4f54300a
 8032130:	4f54310a 	.word	0x4f54310a

08032134 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8032134:	b580      	push	{r7, lr}
 8032136:	b086      	sub	sp, #24
 8032138:	af00      	add	r7, sp, #0
 803213a:	6078      	str	r0, [r7, #4]
 803213c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 803213e:	687b      	ldr	r3, [r7, #4]
 8032140:	681b      	ldr	r3, [r3, #0]
 8032142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8032144:	697b      	ldr	r3, [r7, #20]
 8032146:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8032148:	697b      	ldr	r3, [r7, #20]
 803214a:	333c      	adds	r3, #60	; 0x3c
 803214c:	3304      	adds	r3, #4
 803214e:	681b      	ldr	r3, [r3, #0]
 8032150:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8032152:	683b      	ldr	r3, [r7, #0]
 8032154:	015a      	lsls	r2, r3, #5
 8032156:	693b      	ldr	r3, [r7, #16]
 8032158:	4413      	add	r3, r2
 803215a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803215e:	689b      	ldr	r3, [r3, #8]
 8032160:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8032162:	68fb      	ldr	r3, [r7, #12]
 8032164:	4a15      	ldr	r2, [pc, #84]	; (80321bc <PCD_EP_OutSetupPacket_int+0x88>)
 8032166:	4293      	cmp	r3, r2
 8032168:	d90e      	bls.n	8032188 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 803216a:	68bb      	ldr	r3, [r7, #8]
 803216c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8032170:	2b00      	cmp	r3, #0
 8032172:	d009      	beq.n	8032188 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8032174:	683b      	ldr	r3, [r7, #0]
 8032176:	015a      	lsls	r2, r3, #5
 8032178:	693b      	ldr	r3, [r7, #16]
 803217a:	4413      	add	r3, r2
 803217c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8032180:	461a      	mov	r2, r3
 8032182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8032186:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8032188:	6878      	ldr	r0, [r7, #4]
 803218a:	f00a fe8d 	bl	803cea8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 803218e:	68fb      	ldr	r3, [r7, #12]
 8032190:	4a0a      	ldr	r2, [pc, #40]	; (80321bc <PCD_EP_OutSetupPacket_int+0x88>)
 8032192:	4293      	cmp	r3, r2
 8032194:	d90c      	bls.n	80321b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8032196:	687b      	ldr	r3, [r7, #4]
 8032198:	691b      	ldr	r3, [r3, #16]
 803219a:	2b01      	cmp	r3, #1
 803219c:	d108      	bne.n	80321b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 803219e:	687b      	ldr	r3, [r7, #4]
 80321a0:	6818      	ldr	r0, [r3, #0]
 80321a2:	687b      	ldr	r3, [r7, #4]
 80321a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80321a8:	461a      	mov	r2, r3
 80321aa:	2101      	movs	r1, #1
 80321ac:	f008 fc0c 	bl	803a9c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80321b0:	2300      	movs	r3, #0
}
 80321b2:	4618      	mov	r0, r3
 80321b4:	3718      	adds	r7, #24
 80321b6:	46bd      	mov	sp, r7
 80321b8:	bd80      	pop	{r7, pc}
 80321ba:	bf00      	nop
 80321bc:	4f54300a 	.word	0x4f54300a

080321c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80321c0:	b480      	push	{r7}
 80321c2:	b085      	sub	sp, #20
 80321c4:	af00      	add	r7, sp, #0
 80321c6:	6078      	str	r0, [r7, #4]
 80321c8:	460b      	mov	r3, r1
 80321ca:	70fb      	strb	r3, [r7, #3]
 80321cc:	4613      	mov	r3, r2
 80321ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80321d0:	687b      	ldr	r3, [r7, #4]
 80321d2:	681b      	ldr	r3, [r3, #0]
 80321d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80321d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80321d8:	78fb      	ldrb	r3, [r7, #3]
 80321da:	2b00      	cmp	r3, #0
 80321dc:	d107      	bne.n	80321ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80321de:	883b      	ldrh	r3, [r7, #0]
 80321e0:	0419      	lsls	r1, r3, #16
 80321e2:	687b      	ldr	r3, [r7, #4]
 80321e4:	681b      	ldr	r3, [r3, #0]
 80321e6:	68ba      	ldr	r2, [r7, #8]
 80321e8:	430a      	orrs	r2, r1
 80321ea:	629a      	str	r2, [r3, #40]	; 0x28
 80321ec:	e028      	b.n	8032240 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80321ee:	687b      	ldr	r3, [r7, #4]
 80321f0:	681b      	ldr	r3, [r3, #0]
 80321f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80321f4:	0c1b      	lsrs	r3, r3, #16
 80321f6:	68ba      	ldr	r2, [r7, #8]
 80321f8:	4413      	add	r3, r2
 80321fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80321fc:	2300      	movs	r3, #0
 80321fe:	73fb      	strb	r3, [r7, #15]
 8032200:	e00d      	b.n	803221e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8032202:	687b      	ldr	r3, [r7, #4]
 8032204:	681a      	ldr	r2, [r3, #0]
 8032206:	7bfb      	ldrb	r3, [r7, #15]
 8032208:	3340      	adds	r3, #64	; 0x40
 803220a:	009b      	lsls	r3, r3, #2
 803220c:	4413      	add	r3, r2
 803220e:	685b      	ldr	r3, [r3, #4]
 8032210:	0c1b      	lsrs	r3, r3, #16
 8032212:	68ba      	ldr	r2, [r7, #8]
 8032214:	4413      	add	r3, r2
 8032216:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8032218:	7bfb      	ldrb	r3, [r7, #15]
 803221a:	3301      	adds	r3, #1
 803221c:	73fb      	strb	r3, [r7, #15]
 803221e:	7bfa      	ldrb	r2, [r7, #15]
 8032220:	78fb      	ldrb	r3, [r7, #3]
 8032222:	3b01      	subs	r3, #1
 8032224:	429a      	cmp	r2, r3
 8032226:	d3ec      	bcc.n	8032202 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8032228:	883b      	ldrh	r3, [r7, #0]
 803222a:	0418      	lsls	r0, r3, #16
 803222c:	687b      	ldr	r3, [r7, #4]
 803222e:	6819      	ldr	r1, [r3, #0]
 8032230:	78fb      	ldrb	r3, [r7, #3]
 8032232:	3b01      	subs	r3, #1
 8032234:	68ba      	ldr	r2, [r7, #8]
 8032236:	4302      	orrs	r2, r0
 8032238:	3340      	adds	r3, #64	; 0x40
 803223a:	009b      	lsls	r3, r3, #2
 803223c:	440b      	add	r3, r1
 803223e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8032240:	2300      	movs	r3, #0
}
 8032242:	4618      	mov	r0, r3
 8032244:	3714      	adds	r7, #20
 8032246:	46bd      	mov	sp, r7
 8032248:	f85d 7b04 	ldr.w	r7, [sp], #4
 803224c:	4770      	bx	lr

0803224e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 803224e:	b480      	push	{r7}
 8032250:	b083      	sub	sp, #12
 8032252:	af00      	add	r7, sp, #0
 8032254:	6078      	str	r0, [r7, #4]
 8032256:	460b      	mov	r3, r1
 8032258:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 803225a:	687b      	ldr	r3, [r7, #4]
 803225c:	681b      	ldr	r3, [r3, #0]
 803225e:	887a      	ldrh	r2, [r7, #2]
 8032260:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8032262:	2300      	movs	r3, #0
}
 8032264:	4618      	mov	r0, r3
 8032266:	370c      	adds	r7, #12
 8032268:	46bd      	mov	sp, r7
 803226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803226e:	4770      	bx	lr

08032270 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8032270:	b480      	push	{r7}
 8032272:	b085      	sub	sp, #20
 8032274:	af00      	add	r7, sp, #0
 8032276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8032278:	687b      	ldr	r3, [r7, #4]
 803227a:	681b      	ldr	r3, [r3, #0]
 803227c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 803227e:	687b      	ldr	r3, [r7, #4]
 8032280:	2201      	movs	r2, #1
 8032282:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8032286:	687b      	ldr	r3, [r7, #4]
 8032288:	2200      	movs	r2, #0
 803228a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 803228e:	68fb      	ldr	r3, [r7, #12]
 8032290:	699b      	ldr	r3, [r3, #24]
 8032292:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8032296:	68fb      	ldr	r3, [r7, #12]
 8032298:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 803229a:	68fb      	ldr	r3, [r7, #12]
 803229c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 803229e:	4b05      	ldr	r3, [pc, #20]	; (80322b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80322a0:	4313      	orrs	r3, r2
 80322a2:	68fa      	ldr	r2, [r7, #12]
 80322a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80322a6:	2300      	movs	r3, #0
}
 80322a8:	4618      	mov	r0, r3
 80322aa:	3714      	adds	r7, #20
 80322ac:	46bd      	mov	sp, r7
 80322ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80322b2:	4770      	bx	lr
 80322b4:	10000003 	.word	0x10000003

080322b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80322b8:	b480      	push	{r7}
 80322ba:	b083      	sub	sp, #12
 80322bc:	af00      	add	r7, sp, #0
 80322be:	6078      	str	r0, [r7, #4]
 80322c0:	460b      	mov	r3, r1
 80322c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80322c4:	bf00      	nop
 80322c6:	370c      	adds	r7, #12
 80322c8:	46bd      	mov	sp, r7
 80322ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80322ce:	4770      	bx	lr

080322d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80322d0:	b580      	push	{r7, lr}
 80322d2:	b084      	sub	sp, #16
 80322d4:	af00      	add	r7, sp, #0
 80322d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80322d8:	4b19      	ldr	r3, [pc, #100]	; (8032340 <HAL_PWREx_ConfigSupply+0x70>)
 80322da:	68db      	ldr	r3, [r3, #12]
 80322dc:	f003 0304 	and.w	r3, r3, #4
 80322e0:	2b04      	cmp	r3, #4
 80322e2:	d00a      	beq.n	80322fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80322e4:	4b16      	ldr	r3, [pc, #88]	; (8032340 <HAL_PWREx_ConfigSupply+0x70>)
 80322e6:	68db      	ldr	r3, [r3, #12]
 80322e8:	f003 0307 	and.w	r3, r3, #7
 80322ec:	687a      	ldr	r2, [r7, #4]
 80322ee:	429a      	cmp	r2, r3
 80322f0:	d001      	beq.n	80322f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80322f2:	2301      	movs	r3, #1
 80322f4:	e01f      	b.n	8032336 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80322f6:	2300      	movs	r3, #0
 80322f8:	e01d      	b.n	8032336 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80322fa:	4b11      	ldr	r3, [pc, #68]	; (8032340 <HAL_PWREx_ConfigSupply+0x70>)
 80322fc:	68db      	ldr	r3, [r3, #12]
 80322fe:	f023 0207 	bic.w	r2, r3, #7
 8032302:	490f      	ldr	r1, [pc, #60]	; (8032340 <HAL_PWREx_ConfigSupply+0x70>)
 8032304:	687b      	ldr	r3, [r7, #4]
 8032306:	4313      	orrs	r3, r2
 8032308:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 803230a:	f7fa f843 	bl	802c394 <HAL_GetTick>
 803230e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8032310:	e009      	b.n	8032326 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8032312:	f7fa f83f 	bl	802c394 <HAL_GetTick>
 8032316:	4602      	mov	r2, r0
 8032318:	68fb      	ldr	r3, [r7, #12]
 803231a:	1ad3      	subs	r3, r2, r3
 803231c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8032320:	d901      	bls.n	8032326 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8032322:	2301      	movs	r3, #1
 8032324:	e007      	b.n	8032336 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8032326:	4b06      	ldr	r3, [pc, #24]	; (8032340 <HAL_PWREx_ConfigSupply+0x70>)
 8032328:	685b      	ldr	r3, [r3, #4]
 803232a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 803232e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8032332:	d1ee      	bne.n	8032312 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8032334:	2300      	movs	r3, #0
}
 8032336:	4618      	mov	r0, r3
 8032338:	3710      	adds	r7, #16
 803233a:	46bd      	mov	sp, r7
 803233c:	bd80      	pop	{r7, pc}
 803233e:	bf00      	nop
 8032340:	58024800 	.word	0x58024800

08032344 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8032344:	b480      	push	{r7}
 8032346:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8032348:	4b05      	ldr	r3, [pc, #20]	; (8032360 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 803234a:	68db      	ldr	r3, [r3, #12]
 803234c:	4a04      	ldr	r2, [pc, #16]	; (8032360 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 803234e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8032352:	60d3      	str	r3, [r2, #12]
}
 8032354:	bf00      	nop
 8032356:	46bd      	mov	sp, r7
 8032358:	f85d 7b04 	ldr.w	r7, [sp], #4
 803235c:	4770      	bx	lr
 803235e:	bf00      	nop
 8032360:	58024800 	.word	0x58024800

08032364 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8032364:	b580      	push	{r7, lr}
 8032366:	b08c      	sub	sp, #48	; 0x30
 8032368:	af00      	add	r7, sp, #0
 803236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 803236c:	687b      	ldr	r3, [r7, #4]
 803236e:	2b00      	cmp	r3, #0
 8032370:	d102      	bne.n	8032378 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8032372:	2301      	movs	r3, #1
 8032374:	f000 bc1d 	b.w	8032bb2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8032378:	687b      	ldr	r3, [r7, #4]
 803237a:	681b      	ldr	r3, [r3, #0]
 803237c:	f003 0301 	and.w	r3, r3, #1
 8032380:	2b00      	cmp	r3, #0
 8032382:	f000 8087 	beq.w	8032494 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8032386:	4b99      	ldr	r3, [pc, #612]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032388:	691b      	ldr	r3, [r3, #16]
 803238a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803238e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8032390:	4b96      	ldr	r3, [pc, #600]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032394:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8032396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8032398:	2b10      	cmp	r3, #16
 803239a:	d007      	beq.n	80323ac <HAL_RCC_OscConfig+0x48>
 803239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803239e:	2b18      	cmp	r3, #24
 80323a0:	d110      	bne.n	80323c4 <HAL_RCC_OscConfig+0x60>
 80323a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80323a4:	f003 0303 	and.w	r3, r3, #3
 80323a8:	2b02      	cmp	r3, #2
 80323aa:	d10b      	bne.n	80323c4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80323ac:	4b8f      	ldr	r3, [pc, #572]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80323ae:	681b      	ldr	r3, [r3, #0]
 80323b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80323b4:	2b00      	cmp	r3, #0
 80323b6:	d06c      	beq.n	8032492 <HAL_RCC_OscConfig+0x12e>
 80323b8:	687b      	ldr	r3, [r7, #4]
 80323ba:	685b      	ldr	r3, [r3, #4]
 80323bc:	2b00      	cmp	r3, #0
 80323be:	d168      	bne.n	8032492 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80323c0:	2301      	movs	r3, #1
 80323c2:	e3f6      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80323c4:	687b      	ldr	r3, [r7, #4]
 80323c6:	685b      	ldr	r3, [r3, #4]
 80323c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80323cc:	d106      	bne.n	80323dc <HAL_RCC_OscConfig+0x78>
 80323ce:	4b87      	ldr	r3, [pc, #540]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80323d0:	681b      	ldr	r3, [r3, #0]
 80323d2:	4a86      	ldr	r2, [pc, #536]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80323d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80323d8:	6013      	str	r3, [r2, #0]
 80323da:	e02e      	b.n	803243a <HAL_RCC_OscConfig+0xd6>
 80323dc:	687b      	ldr	r3, [r7, #4]
 80323de:	685b      	ldr	r3, [r3, #4]
 80323e0:	2b00      	cmp	r3, #0
 80323e2:	d10c      	bne.n	80323fe <HAL_RCC_OscConfig+0x9a>
 80323e4:	4b81      	ldr	r3, [pc, #516]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80323e6:	681b      	ldr	r3, [r3, #0]
 80323e8:	4a80      	ldr	r2, [pc, #512]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80323ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80323ee:	6013      	str	r3, [r2, #0]
 80323f0:	4b7e      	ldr	r3, [pc, #504]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80323f2:	681b      	ldr	r3, [r3, #0]
 80323f4:	4a7d      	ldr	r2, [pc, #500]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80323f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80323fa:	6013      	str	r3, [r2, #0]
 80323fc:	e01d      	b.n	803243a <HAL_RCC_OscConfig+0xd6>
 80323fe:	687b      	ldr	r3, [r7, #4]
 8032400:	685b      	ldr	r3, [r3, #4]
 8032402:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8032406:	d10c      	bne.n	8032422 <HAL_RCC_OscConfig+0xbe>
 8032408:	4b78      	ldr	r3, [pc, #480]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 803240a:	681b      	ldr	r3, [r3, #0]
 803240c:	4a77      	ldr	r2, [pc, #476]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 803240e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8032412:	6013      	str	r3, [r2, #0]
 8032414:	4b75      	ldr	r3, [pc, #468]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032416:	681b      	ldr	r3, [r3, #0]
 8032418:	4a74      	ldr	r2, [pc, #464]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 803241a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 803241e:	6013      	str	r3, [r2, #0]
 8032420:	e00b      	b.n	803243a <HAL_RCC_OscConfig+0xd6>
 8032422:	4b72      	ldr	r3, [pc, #456]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032424:	681b      	ldr	r3, [r3, #0]
 8032426:	4a71      	ldr	r2, [pc, #452]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 803242c:	6013      	str	r3, [r2, #0]
 803242e:	4b6f      	ldr	r3, [pc, #444]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032430:	681b      	ldr	r3, [r3, #0]
 8032432:	4a6e      	ldr	r2, [pc, #440]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8032438:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 803243a:	687b      	ldr	r3, [r7, #4]
 803243c:	685b      	ldr	r3, [r3, #4]
 803243e:	2b00      	cmp	r3, #0
 8032440:	d013      	beq.n	803246a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032442:	f7f9 ffa7 	bl	802c394 <HAL_GetTick>
 8032446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8032448:	e008      	b.n	803245c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 803244a:	f7f9 ffa3 	bl	802c394 <HAL_GetTick>
 803244e:	4602      	mov	r2, r0
 8032450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032452:	1ad3      	subs	r3, r2, r3
 8032454:	2b64      	cmp	r3, #100	; 0x64
 8032456:	d901      	bls.n	803245c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8032458:	2303      	movs	r3, #3
 803245a:	e3aa      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 803245c:	4b63      	ldr	r3, [pc, #396]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 803245e:	681b      	ldr	r3, [r3, #0]
 8032460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032464:	2b00      	cmp	r3, #0
 8032466:	d0f0      	beq.n	803244a <HAL_RCC_OscConfig+0xe6>
 8032468:	e014      	b.n	8032494 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803246a:	f7f9 ff93 	bl	802c394 <HAL_GetTick>
 803246e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8032470:	e008      	b.n	8032484 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8032472:	f7f9 ff8f 	bl	802c394 <HAL_GetTick>
 8032476:	4602      	mov	r2, r0
 8032478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803247a:	1ad3      	subs	r3, r2, r3
 803247c:	2b64      	cmp	r3, #100	; 0x64
 803247e:	d901      	bls.n	8032484 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8032480:	2303      	movs	r3, #3
 8032482:	e396      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8032484:	4b59      	ldr	r3, [pc, #356]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032486:	681b      	ldr	r3, [r3, #0]
 8032488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 803248c:	2b00      	cmp	r3, #0
 803248e:	d1f0      	bne.n	8032472 <HAL_RCC_OscConfig+0x10e>
 8032490:	e000      	b.n	8032494 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8032492:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8032494:	687b      	ldr	r3, [r7, #4]
 8032496:	681b      	ldr	r3, [r3, #0]
 8032498:	f003 0302 	and.w	r3, r3, #2
 803249c:	2b00      	cmp	r3, #0
 803249e:	f000 80cb 	beq.w	8032638 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80324a2:	4b52      	ldr	r3, [pc, #328]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80324a4:	691b      	ldr	r3, [r3, #16]
 80324a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80324aa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80324ac:	4b4f      	ldr	r3, [pc, #316]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80324ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80324b0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80324b2:	6a3b      	ldr	r3, [r7, #32]
 80324b4:	2b00      	cmp	r3, #0
 80324b6:	d007      	beq.n	80324c8 <HAL_RCC_OscConfig+0x164>
 80324b8:	6a3b      	ldr	r3, [r7, #32]
 80324ba:	2b18      	cmp	r3, #24
 80324bc:	d156      	bne.n	803256c <HAL_RCC_OscConfig+0x208>
 80324be:	69fb      	ldr	r3, [r7, #28]
 80324c0:	f003 0303 	and.w	r3, r3, #3
 80324c4:	2b00      	cmp	r3, #0
 80324c6:	d151      	bne.n	803256c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80324c8:	4b48      	ldr	r3, [pc, #288]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80324ca:	681b      	ldr	r3, [r3, #0]
 80324cc:	f003 0304 	and.w	r3, r3, #4
 80324d0:	2b00      	cmp	r3, #0
 80324d2:	d005      	beq.n	80324e0 <HAL_RCC_OscConfig+0x17c>
 80324d4:	687b      	ldr	r3, [r7, #4]
 80324d6:	68db      	ldr	r3, [r3, #12]
 80324d8:	2b00      	cmp	r3, #0
 80324da:	d101      	bne.n	80324e0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80324dc:	2301      	movs	r3, #1
 80324de:	e368      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80324e0:	4b42      	ldr	r3, [pc, #264]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80324e2:	681b      	ldr	r3, [r3, #0]
 80324e4:	f023 0219 	bic.w	r2, r3, #25
 80324e8:	687b      	ldr	r3, [r7, #4]
 80324ea:	68db      	ldr	r3, [r3, #12]
 80324ec:	493f      	ldr	r1, [pc, #252]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80324ee:	4313      	orrs	r3, r2
 80324f0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80324f2:	f7f9 ff4f 	bl	802c394 <HAL_GetTick>
 80324f6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80324f8:	e008      	b.n	803250c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80324fa:	f7f9 ff4b 	bl	802c394 <HAL_GetTick>
 80324fe:	4602      	mov	r2, r0
 8032500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032502:	1ad3      	subs	r3, r2, r3
 8032504:	2b02      	cmp	r3, #2
 8032506:	d901      	bls.n	803250c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8032508:	2303      	movs	r3, #3
 803250a:	e352      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 803250c:	4b37      	ldr	r3, [pc, #220]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 803250e:	681b      	ldr	r3, [r3, #0]
 8032510:	f003 0304 	and.w	r3, r3, #4
 8032514:	2b00      	cmp	r3, #0
 8032516:	d0f0      	beq.n	80324fa <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8032518:	f7f9 ff6c 	bl	802c3f4 <HAL_GetREVID>
 803251c:	4603      	mov	r3, r0
 803251e:	f241 0203 	movw	r2, #4099	; 0x1003
 8032522:	4293      	cmp	r3, r2
 8032524:	d817      	bhi.n	8032556 <HAL_RCC_OscConfig+0x1f2>
 8032526:	687b      	ldr	r3, [r7, #4]
 8032528:	691b      	ldr	r3, [r3, #16]
 803252a:	2b40      	cmp	r3, #64	; 0x40
 803252c:	d108      	bne.n	8032540 <HAL_RCC_OscConfig+0x1dc>
 803252e:	4b2f      	ldr	r3, [pc, #188]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032530:	685b      	ldr	r3, [r3, #4]
 8032532:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8032536:	4a2d      	ldr	r2, [pc, #180]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803253c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 803253e:	e07b      	b.n	8032638 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8032540:	4b2a      	ldr	r3, [pc, #168]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032542:	685b      	ldr	r3, [r3, #4]
 8032544:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8032548:	687b      	ldr	r3, [r7, #4]
 803254a:	691b      	ldr	r3, [r3, #16]
 803254c:	031b      	lsls	r3, r3, #12
 803254e:	4927      	ldr	r1, [pc, #156]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032550:	4313      	orrs	r3, r2
 8032552:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8032554:	e070      	b.n	8032638 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8032556:	4b25      	ldr	r3, [pc, #148]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032558:	685b      	ldr	r3, [r3, #4]
 803255a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 803255e:	687b      	ldr	r3, [r7, #4]
 8032560:	691b      	ldr	r3, [r3, #16]
 8032562:	061b      	lsls	r3, r3, #24
 8032564:	4921      	ldr	r1, [pc, #132]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032566:	4313      	orrs	r3, r2
 8032568:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 803256a:	e065      	b.n	8032638 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 803256c:	687b      	ldr	r3, [r7, #4]
 803256e:	68db      	ldr	r3, [r3, #12]
 8032570:	2b00      	cmp	r3, #0
 8032572:	d048      	beq.n	8032606 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8032574:	4b1d      	ldr	r3, [pc, #116]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032576:	681b      	ldr	r3, [r3, #0]
 8032578:	f023 0219 	bic.w	r2, r3, #25
 803257c:	687b      	ldr	r3, [r7, #4]
 803257e:	68db      	ldr	r3, [r3, #12]
 8032580:	491a      	ldr	r1, [pc, #104]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 8032582:	4313      	orrs	r3, r2
 8032584:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032586:	f7f9 ff05 	bl	802c394 <HAL_GetTick>
 803258a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 803258c:	e008      	b.n	80325a0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 803258e:	f7f9 ff01 	bl	802c394 <HAL_GetTick>
 8032592:	4602      	mov	r2, r0
 8032594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032596:	1ad3      	subs	r3, r2, r3
 8032598:	2b02      	cmp	r3, #2
 803259a:	d901      	bls.n	80325a0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 803259c:	2303      	movs	r3, #3
 803259e:	e308      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80325a0:	4b12      	ldr	r3, [pc, #72]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80325a2:	681b      	ldr	r3, [r3, #0]
 80325a4:	f003 0304 	and.w	r3, r3, #4
 80325a8:	2b00      	cmp	r3, #0
 80325aa:	d0f0      	beq.n	803258e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80325ac:	f7f9 ff22 	bl	802c3f4 <HAL_GetREVID>
 80325b0:	4603      	mov	r3, r0
 80325b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80325b6:	4293      	cmp	r3, r2
 80325b8:	d81a      	bhi.n	80325f0 <HAL_RCC_OscConfig+0x28c>
 80325ba:	687b      	ldr	r3, [r7, #4]
 80325bc:	691b      	ldr	r3, [r3, #16]
 80325be:	2b40      	cmp	r3, #64	; 0x40
 80325c0:	d108      	bne.n	80325d4 <HAL_RCC_OscConfig+0x270>
 80325c2:	4b0a      	ldr	r3, [pc, #40]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80325c4:	685b      	ldr	r3, [r3, #4]
 80325c6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80325ca:	4a08      	ldr	r2, [pc, #32]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80325cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80325d0:	6053      	str	r3, [r2, #4]
 80325d2:	e031      	b.n	8032638 <HAL_RCC_OscConfig+0x2d4>
 80325d4:	4b05      	ldr	r3, [pc, #20]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80325d6:	685b      	ldr	r3, [r3, #4]
 80325d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80325dc:	687b      	ldr	r3, [r7, #4]
 80325de:	691b      	ldr	r3, [r3, #16]
 80325e0:	031b      	lsls	r3, r3, #12
 80325e2:	4902      	ldr	r1, [pc, #8]	; (80325ec <HAL_RCC_OscConfig+0x288>)
 80325e4:	4313      	orrs	r3, r2
 80325e6:	604b      	str	r3, [r1, #4]
 80325e8:	e026      	b.n	8032638 <HAL_RCC_OscConfig+0x2d4>
 80325ea:	bf00      	nop
 80325ec:	58024400 	.word	0x58024400
 80325f0:	4b9a      	ldr	r3, [pc, #616]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80325f2:	685b      	ldr	r3, [r3, #4]
 80325f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80325f8:	687b      	ldr	r3, [r7, #4]
 80325fa:	691b      	ldr	r3, [r3, #16]
 80325fc:	061b      	lsls	r3, r3, #24
 80325fe:	4997      	ldr	r1, [pc, #604]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 8032600:	4313      	orrs	r3, r2
 8032602:	604b      	str	r3, [r1, #4]
 8032604:	e018      	b.n	8032638 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8032606:	4b95      	ldr	r3, [pc, #596]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 8032608:	681b      	ldr	r3, [r3, #0]
 803260a:	4a94      	ldr	r2, [pc, #592]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 803260c:	f023 0301 	bic.w	r3, r3, #1
 8032610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032612:	f7f9 febf 	bl	802c394 <HAL_GetTick>
 8032616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8032618:	e008      	b.n	803262c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 803261a:	f7f9 febb 	bl	802c394 <HAL_GetTick>
 803261e:	4602      	mov	r2, r0
 8032620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032622:	1ad3      	subs	r3, r2, r3
 8032624:	2b02      	cmp	r3, #2
 8032626:	d901      	bls.n	803262c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8032628:	2303      	movs	r3, #3
 803262a:	e2c2      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 803262c:	4b8b      	ldr	r3, [pc, #556]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 803262e:	681b      	ldr	r3, [r3, #0]
 8032630:	f003 0304 	and.w	r3, r3, #4
 8032634:	2b00      	cmp	r3, #0
 8032636:	d1f0      	bne.n	803261a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8032638:	687b      	ldr	r3, [r7, #4]
 803263a:	681b      	ldr	r3, [r3, #0]
 803263c:	f003 0310 	and.w	r3, r3, #16
 8032640:	2b00      	cmp	r3, #0
 8032642:	f000 80a9 	beq.w	8032798 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8032646:	4b85      	ldr	r3, [pc, #532]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 8032648:	691b      	ldr	r3, [r3, #16]
 803264a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803264e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8032650:	4b82      	ldr	r3, [pc, #520]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 8032652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032654:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8032656:	69bb      	ldr	r3, [r7, #24]
 8032658:	2b08      	cmp	r3, #8
 803265a:	d007      	beq.n	803266c <HAL_RCC_OscConfig+0x308>
 803265c:	69bb      	ldr	r3, [r7, #24]
 803265e:	2b18      	cmp	r3, #24
 8032660:	d13a      	bne.n	80326d8 <HAL_RCC_OscConfig+0x374>
 8032662:	697b      	ldr	r3, [r7, #20]
 8032664:	f003 0303 	and.w	r3, r3, #3
 8032668:	2b01      	cmp	r3, #1
 803266a:	d135      	bne.n	80326d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 803266c:	4b7b      	ldr	r3, [pc, #492]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 803266e:	681b      	ldr	r3, [r3, #0]
 8032670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032674:	2b00      	cmp	r3, #0
 8032676:	d005      	beq.n	8032684 <HAL_RCC_OscConfig+0x320>
 8032678:	687b      	ldr	r3, [r7, #4]
 803267a:	69db      	ldr	r3, [r3, #28]
 803267c:	2b80      	cmp	r3, #128	; 0x80
 803267e:	d001      	beq.n	8032684 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8032680:	2301      	movs	r3, #1
 8032682:	e296      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8032684:	f7f9 feb6 	bl	802c3f4 <HAL_GetREVID>
 8032688:	4603      	mov	r3, r0
 803268a:	f241 0203 	movw	r2, #4099	; 0x1003
 803268e:	4293      	cmp	r3, r2
 8032690:	d817      	bhi.n	80326c2 <HAL_RCC_OscConfig+0x35e>
 8032692:	687b      	ldr	r3, [r7, #4]
 8032694:	6a1b      	ldr	r3, [r3, #32]
 8032696:	2b20      	cmp	r3, #32
 8032698:	d108      	bne.n	80326ac <HAL_RCC_OscConfig+0x348>
 803269a:	4b70      	ldr	r3, [pc, #448]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 803269c:	685b      	ldr	r3, [r3, #4]
 803269e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80326a2:	4a6e      	ldr	r2, [pc, #440]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80326a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80326a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80326aa:	e075      	b.n	8032798 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80326ac:	4b6b      	ldr	r3, [pc, #428]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80326ae:	685b      	ldr	r3, [r3, #4]
 80326b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80326b4:	687b      	ldr	r3, [r7, #4]
 80326b6:	6a1b      	ldr	r3, [r3, #32]
 80326b8:	069b      	lsls	r3, r3, #26
 80326ba:	4968      	ldr	r1, [pc, #416]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80326bc:	4313      	orrs	r3, r2
 80326be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80326c0:	e06a      	b.n	8032798 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80326c2:	4b66      	ldr	r3, [pc, #408]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80326c4:	68db      	ldr	r3, [r3, #12]
 80326c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80326ca:	687b      	ldr	r3, [r7, #4]
 80326cc:	6a1b      	ldr	r3, [r3, #32]
 80326ce:	061b      	lsls	r3, r3, #24
 80326d0:	4962      	ldr	r1, [pc, #392]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80326d2:	4313      	orrs	r3, r2
 80326d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80326d6:	e05f      	b.n	8032798 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80326d8:	687b      	ldr	r3, [r7, #4]
 80326da:	69db      	ldr	r3, [r3, #28]
 80326dc:	2b00      	cmp	r3, #0
 80326de:	d042      	beq.n	8032766 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80326e0:	4b5e      	ldr	r3, [pc, #376]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80326e2:	681b      	ldr	r3, [r3, #0]
 80326e4:	4a5d      	ldr	r2, [pc, #372]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80326e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80326ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80326ec:	f7f9 fe52 	bl	802c394 <HAL_GetTick>
 80326f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80326f2:	e008      	b.n	8032706 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80326f4:	f7f9 fe4e 	bl	802c394 <HAL_GetTick>
 80326f8:	4602      	mov	r2, r0
 80326fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80326fc:	1ad3      	subs	r3, r2, r3
 80326fe:	2b02      	cmp	r3, #2
 8032700:	d901      	bls.n	8032706 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8032702:	2303      	movs	r3, #3
 8032704:	e255      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8032706:	4b55      	ldr	r3, [pc, #340]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 8032708:	681b      	ldr	r3, [r3, #0]
 803270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803270e:	2b00      	cmp	r3, #0
 8032710:	d0f0      	beq.n	80326f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8032712:	f7f9 fe6f 	bl	802c3f4 <HAL_GetREVID>
 8032716:	4603      	mov	r3, r0
 8032718:	f241 0203 	movw	r2, #4099	; 0x1003
 803271c:	4293      	cmp	r3, r2
 803271e:	d817      	bhi.n	8032750 <HAL_RCC_OscConfig+0x3ec>
 8032720:	687b      	ldr	r3, [r7, #4]
 8032722:	6a1b      	ldr	r3, [r3, #32]
 8032724:	2b20      	cmp	r3, #32
 8032726:	d108      	bne.n	803273a <HAL_RCC_OscConfig+0x3d6>
 8032728:	4b4c      	ldr	r3, [pc, #304]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 803272a:	685b      	ldr	r3, [r3, #4]
 803272c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8032730:	4a4a      	ldr	r2, [pc, #296]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 8032732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8032736:	6053      	str	r3, [r2, #4]
 8032738:	e02e      	b.n	8032798 <HAL_RCC_OscConfig+0x434>
 803273a:	4b48      	ldr	r3, [pc, #288]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 803273c:	685b      	ldr	r3, [r3, #4]
 803273e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8032742:	687b      	ldr	r3, [r7, #4]
 8032744:	6a1b      	ldr	r3, [r3, #32]
 8032746:	069b      	lsls	r3, r3, #26
 8032748:	4944      	ldr	r1, [pc, #272]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 803274a:	4313      	orrs	r3, r2
 803274c:	604b      	str	r3, [r1, #4]
 803274e:	e023      	b.n	8032798 <HAL_RCC_OscConfig+0x434>
 8032750:	4b42      	ldr	r3, [pc, #264]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 8032752:	68db      	ldr	r3, [r3, #12]
 8032754:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8032758:	687b      	ldr	r3, [r7, #4]
 803275a:	6a1b      	ldr	r3, [r3, #32]
 803275c:	061b      	lsls	r3, r3, #24
 803275e:	493f      	ldr	r1, [pc, #252]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 8032760:	4313      	orrs	r3, r2
 8032762:	60cb      	str	r3, [r1, #12]
 8032764:	e018      	b.n	8032798 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8032766:	4b3d      	ldr	r3, [pc, #244]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 8032768:	681b      	ldr	r3, [r3, #0]
 803276a:	4a3c      	ldr	r2, [pc, #240]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 803276c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8032770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032772:	f7f9 fe0f 	bl	802c394 <HAL_GetTick>
 8032776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8032778:	e008      	b.n	803278c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 803277a:	f7f9 fe0b 	bl	802c394 <HAL_GetTick>
 803277e:	4602      	mov	r2, r0
 8032780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032782:	1ad3      	subs	r3, r2, r3
 8032784:	2b02      	cmp	r3, #2
 8032786:	d901      	bls.n	803278c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8032788:	2303      	movs	r3, #3
 803278a:	e212      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 803278c:	4b33      	ldr	r3, [pc, #204]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 803278e:	681b      	ldr	r3, [r3, #0]
 8032790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032794:	2b00      	cmp	r3, #0
 8032796:	d1f0      	bne.n	803277a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8032798:	687b      	ldr	r3, [r7, #4]
 803279a:	681b      	ldr	r3, [r3, #0]
 803279c:	f003 0308 	and.w	r3, r3, #8
 80327a0:	2b00      	cmp	r3, #0
 80327a2:	d036      	beq.n	8032812 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80327a4:	687b      	ldr	r3, [r7, #4]
 80327a6:	695b      	ldr	r3, [r3, #20]
 80327a8:	2b00      	cmp	r3, #0
 80327aa:	d019      	beq.n	80327e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80327ac:	4b2b      	ldr	r3, [pc, #172]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80327ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80327b0:	4a2a      	ldr	r2, [pc, #168]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80327b2:	f043 0301 	orr.w	r3, r3, #1
 80327b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80327b8:	f7f9 fdec 	bl	802c394 <HAL_GetTick>
 80327bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80327be:	e008      	b.n	80327d2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80327c0:	f7f9 fde8 	bl	802c394 <HAL_GetTick>
 80327c4:	4602      	mov	r2, r0
 80327c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80327c8:	1ad3      	subs	r3, r2, r3
 80327ca:	2b02      	cmp	r3, #2
 80327cc:	d901      	bls.n	80327d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80327ce:	2303      	movs	r3, #3
 80327d0:	e1ef      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80327d2:	4b22      	ldr	r3, [pc, #136]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80327d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80327d6:	f003 0302 	and.w	r3, r3, #2
 80327da:	2b00      	cmp	r3, #0
 80327dc:	d0f0      	beq.n	80327c0 <HAL_RCC_OscConfig+0x45c>
 80327de:	e018      	b.n	8032812 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80327e0:	4b1e      	ldr	r3, [pc, #120]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80327e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80327e4:	4a1d      	ldr	r2, [pc, #116]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 80327e6:	f023 0301 	bic.w	r3, r3, #1
 80327ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80327ec:	f7f9 fdd2 	bl	802c394 <HAL_GetTick>
 80327f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80327f2:	e008      	b.n	8032806 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80327f4:	f7f9 fdce 	bl	802c394 <HAL_GetTick>
 80327f8:	4602      	mov	r2, r0
 80327fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80327fc:	1ad3      	subs	r3, r2, r3
 80327fe:	2b02      	cmp	r3, #2
 8032800:	d901      	bls.n	8032806 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8032802:	2303      	movs	r3, #3
 8032804:	e1d5      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8032806:	4b15      	ldr	r3, [pc, #84]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 8032808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803280a:	f003 0302 	and.w	r3, r3, #2
 803280e:	2b00      	cmp	r3, #0
 8032810:	d1f0      	bne.n	80327f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8032812:	687b      	ldr	r3, [r7, #4]
 8032814:	681b      	ldr	r3, [r3, #0]
 8032816:	f003 0320 	and.w	r3, r3, #32
 803281a:	2b00      	cmp	r3, #0
 803281c:	d039      	beq.n	8032892 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 803281e:	687b      	ldr	r3, [r7, #4]
 8032820:	699b      	ldr	r3, [r3, #24]
 8032822:	2b00      	cmp	r3, #0
 8032824:	d01c      	beq.n	8032860 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8032826:	4b0d      	ldr	r3, [pc, #52]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 8032828:	681b      	ldr	r3, [r3, #0]
 803282a:	4a0c      	ldr	r2, [pc, #48]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 803282c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8032830:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8032832:	f7f9 fdaf 	bl	802c394 <HAL_GetTick>
 8032836:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8032838:	e008      	b.n	803284c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 803283a:	f7f9 fdab 	bl	802c394 <HAL_GetTick>
 803283e:	4602      	mov	r2, r0
 8032840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032842:	1ad3      	subs	r3, r2, r3
 8032844:	2b02      	cmp	r3, #2
 8032846:	d901      	bls.n	803284c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8032848:	2303      	movs	r3, #3
 803284a:	e1b2      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 803284c:	4b03      	ldr	r3, [pc, #12]	; (803285c <HAL_RCC_OscConfig+0x4f8>)
 803284e:	681b      	ldr	r3, [r3, #0]
 8032850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8032854:	2b00      	cmp	r3, #0
 8032856:	d0f0      	beq.n	803283a <HAL_RCC_OscConfig+0x4d6>
 8032858:	e01b      	b.n	8032892 <HAL_RCC_OscConfig+0x52e>
 803285a:	bf00      	nop
 803285c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8032860:	4b9b      	ldr	r3, [pc, #620]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032862:	681b      	ldr	r3, [r3, #0]
 8032864:	4a9a      	ldr	r2, [pc, #616]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803286a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 803286c:	f7f9 fd92 	bl	802c394 <HAL_GetTick>
 8032870:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8032872:	e008      	b.n	8032886 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8032874:	f7f9 fd8e 	bl	802c394 <HAL_GetTick>
 8032878:	4602      	mov	r2, r0
 803287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803287c:	1ad3      	subs	r3, r2, r3
 803287e:	2b02      	cmp	r3, #2
 8032880:	d901      	bls.n	8032886 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8032882:	2303      	movs	r3, #3
 8032884:	e195      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8032886:	4b92      	ldr	r3, [pc, #584]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032888:	681b      	ldr	r3, [r3, #0]
 803288a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 803288e:	2b00      	cmp	r3, #0
 8032890:	d1f0      	bne.n	8032874 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8032892:	687b      	ldr	r3, [r7, #4]
 8032894:	681b      	ldr	r3, [r3, #0]
 8032896:	f003 0304 	and.w	r3, r3, #4
 803289a:	2b00      	cmp	r3, #0
 803289c:	f000 8081 	beq.w	80329a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80328a0:	4b8c      	ldr	r3, [pc, #560]	; (8032ad4 <HAL_RCC_OscConfig+0x770>)
 80328a2:	681b      	ldr	r3, [r3, #0]
 80328a4:	4a8b      	ldr	r2, [pc, #556]	; (8032ad4 <HAL_RCC_OscConfig+0x770>)
 80328a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80328aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80328ac:	f7f9 fd72 	bl	802c394 <HAL_GetTick>
 80328b0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80328b2:	e008      	b.n	80328c6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80328b4:	f7f9 fd6e 	bl	802c394 <HAL_GetTick>
 80328b8:	4602      	mov	r2, r0
 80328ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80328bc:	1ad3      	subs	r3, r2, r3
 80328be:	2b64      	cmp	r3, #100	; 0x64
 80328c0:	d901      	bls.n	80328c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80328c2:	2303      	movs	r3, #3
 80328c4:	e175      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80328c6:	4b83      	ldr	r3, [pc, #524]	; (8032ad4 <HAL_RCC_OscConfig+0x770>)
 80328c8:	681b      	ldr	r3, [r3, #0]
 80328ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80328ce:	2b00      	cmp	r3, #0
 80328d0:	d0f0      	beq.n	80328b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80328d2:	687b      	ldr	r3, [r7, #4]
 80328d4:	689b      	ldr	r3, [r3, #8]
 80328d6:	2b01      	cmp	r3, #1
 80328d8:	d106      	bne.n	80328e8 <HAL_RCC_OscConfig+0x584>
 80328da:	4b7d      	ldr	r3, [pc, #500]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 80328dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80328de:	4a7c      	ldr	r2, [pc, #496]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 80328e0:	f043 0301 	orr.w	r3, r3, #1
 80328e4:	6713      	str	r3, [r2, #112]	; 0x70
 80328e6:	e02d      	b.n	8032944 <HAL_RCC_OscConfig+0x5e0>
 80328e8:	687b      	ldr	r3, [r7, #4]
 80328ea:	689b      	ldr	r3, [r3, #8]
 80328ec:	2b00      	cmp	r3, #0
 80328ee:	d10c      	bne.n	803290a <HAL_RCC_OscConfig+0x5a6>
 80328f0:	4b77      	ldr	r3, [pc, #476]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 80328f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80328f4:	4a76      	ldr	r2, [pc, #472]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 80328f6:	f023 0301 	bic.w	r3, r3, #1
 80328fa:	6713      	str	r3, [r2, #112]	; 0x70
 80328fc:	4b74      	ldr	r3, [pc, #464]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 80328fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032900:	4a73      	ldr	r2, [pc, #460]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032902:	f023 0304 	bic.w	r3, r3, #4
 8032906:	6713      	str	r3, [r2, #112]	; 0x70
 8032908:	e01c      	b.n	8032944 <HAL_RCC_OscConfig+0x5e0>
 803290a:	687b      	ldr	r3, [r7, #4]
 803290c:	689b      	ldr	r3, [r3, #8]
 803290e:	2b05      	cmp	r3, #5
 8032910:	d10c      	bne.n	803292c <HAL_RCC_OscConfig+0x5c8>
 8032912:	4b6f      	ldr	r3, [pc, #444]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032916:	4a6e      	ldr	r2, [pc, #440]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032918:	f043 0304 	orr.w	r3, r3, #4
 803291c:	6713      	str	r3, [r2, #112]	; 0x70
 803291e:	4b6c      	ldr	r3, [pc, #432]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032922:	4a6b      	ldr	r2, [pc, #428]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032924:	f043 0301 	orr.w	r3, r3, #1
 8032928:	6713      	str	r3, [r2, #112]	; 0x70
 803292a:	e00b      	b.n	8032944 <HAL_RCC_OscConfig+0x5e0>
 803292c:	4b68      	ldr	r3, [pc, #416]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 803292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032930:	4a67      	ldr	r2, [pc, #412]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032932:	f023 0301 	bic.w	r3, r3, #1
 8032936:	6713      	str	r3, [r2, #112]	; 0x70
 8032938:	4b65      	ldr	r3, [pc, #404]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 803293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803293c:	4a64      	ldr	r2, [pc, #400]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 803293e:	f023 0304 	bic.w	r3, r3, #4
 8032942:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8032944:	687b      	ldr	r3, [r7, #4]
 8032946:	689b      	ldr	r3, [r3, #8]
 8032948:	2b00      	cmp	r3, #0
 803294a:	d015      	beq.n	8032978 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 803294c:	f7f9 fd22 	bl	802c394 <HAL_GetTick>
 8032950:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8032952:	e00a      	b.n	803296a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8032954:	f7f9 fd1e 	bl	802c394 <HAL_GetTick>
 8032958:	4602      	mov	r2, r0
 803295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803295c:	1ad3      	subs	r3, r2, r3
 803295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8032962:	4293      	cmp	r3, r2
 8032964:	d901      	bls.n	803296a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8032966:	2303      	movs	r3, #3
 8032968:	e123      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 803296a:	4b59      	ldr	r3, [pc, #356]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 803296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803296e:	f003 0302 	and.w	r3, r3, #2
 8032972:	2b00      	cmp	r3, #0
 8032974:	d0ee      	beq.n	8032954 <HAL_RCC_OscConfig+0x5f0>
 8032976:	e014      	b.n	80329a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8032978:	f7f9 fd0c 	bl	802c394 <HAL_GetTick>
 803297c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 803297e:	e00a      	b.n	8032996 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8032980:	f7f9 fd08 	bl	802c394 <HAL_GetTick>
 8032984:	4602      	mov	r2, r0
 8032986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032988:	1ad3      	subs	r3, r2, r3
 803298a:	f241 3288 	movw	r2, #5000	; 0x1388
 803298e:	4293      	cmp	r3, r2
 8032990:	d901      	bls.n	8032996 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8032992:	2303      	movs	r3, #3
 8032994:	e10d      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8032996:	4b4e      	ldr	r3, [pc, #312]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803299a:	f003 0302 	and.w	r3, r3, #2
 803299e:	2b00      	cmp	r3, #0
 80329a0:	d1ee      	bne.n	8032980 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80329a2:	687b      	ldr	r3, [r7, #4]
 80329a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80329a6:	2b00      	cmp	r3, #0
 80329a8:	f000 8102 	beq.w	8032bb0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80329ac:	4b48      	ldr	r3, [pc, #288]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 80329ae:	691b      	ldr	r3, [r3, #16]
 80329b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80329b4:	2b18      	cmp	r3, #24
 80329b6:	f000 80bd 	beq.w	8032b34 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80329ba:	687b      	ldr	r3, [r7, #4]
 80329bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80329be:	2b02      	cmp	r3, #2
 80329c0:	f040 809e 	bne.w	8032b00 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80329c4:	4b42      	ldr	r3, [pc, #264]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 80329c6:	681b      	ldr	r3, [r3, #0]
 80329c8:	4a41      	ldr	r2, [pc, #260]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 80329ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80329ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80329d0:	f7f9 fce0 	bl	802c394 <HAL_GetTick>
 80329d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80329d6:	e008      	b.n	80329ea <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80329d8:	f7f9 fcdc 	bl	802c394 <HAL_GetTick>
 80329dc:	4602      	mov	r2, r0
 80329de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80329e0:	1ad3      	subs	r3, r2, r3
 80329e2:	2b02      	cmp	r3, #2
 80329e4:	d901      	bls.n	80329ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80329e6:	2303      	movs	r3, #3
 80329e8:	e0e3      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80329ea:	4b39      	ldr	r3, [pc, #228]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 80329ec:	681b      	ldr	r3, [r3, #0]
 80329ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80329f2:	2b00      	cmp	r3, #0
 80329f4:	d1f0      	bne.n	80329d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80329f6:	4b36      	ldr	r3, [pc, #216]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 80329f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80329fa:	4b37      	ldr	r3, [pc, #220]	; (8032ad8 <HAL_RCC_OscConfig+0x774>)
 80329fc:	4013      	ands	r3, r2
 80329fe:	687a      	ldr	r2, [r7, #4]
 8032a00:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8032a02:	687a      	ldr	r2, [r7, #4]
 8032a04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8032a06:	0112      	lsls	r2, r2, #4
 8032a08:	430a      	orrs	r2, r1
 8032a0a:	4931      	ldr	r1, [pc, #196]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a0c:	4313      	orrs	r3, r2
 8032a0e:	628b      	str	r3, [r1, #40]	; 0x28
 8032a10:	687b      	ldr	r3, [r7, #4]
 8032a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032a14:	3b01      	subs	r3, #1
 8032a16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8032a1a:	687b      	ldr	r3, [r7, #4]
 8032a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032a1e:	3b01      	subs	r3, #1
 8032a20:	025b      	lsls	r3, r3, #9
 8032a22:	b29b      	uxth	r3, r3
 8032a24:	431a      	orrs	r2, r3
 8032a26:	687b      	ldr	r3, [r7, #4]
 8032a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a2a:	3b01      	subs	r3, #1
 8032a2c:	041b      	lsls	r3, r3, #16
 8032a2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8032a32:	431a      	orrs	r2, r3
 8032a34:	687b      	ldr	r3, [r7, #4]
 8032a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032a38:	3b01      	subs	r3, #1
 8032a3a:	061b      	lsls	r3, r3, #24
 8032a3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8032a40:	4923      	ldr	r1, [pc, #140]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a42:	4313      	orrs	r3, r2
 8032a44:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8032a46:	4b22      	ldr	r3, [pc, #136]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032a4a:	4a21      	ldr	r2, [pc, #132]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a4c:	f023 0301 	bic.w	r3, r3, #1
 8032a50:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8032a52:	4b1f      	ldr	r3, [pc, #124]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8032a56:	4b21      	ldr	r3, [pc, #132]	; (8032adc <HAL_RCC_OscConfig+0x778>)
 8032a58:	4013      	ands	r3, r2
 8032a5a:	687a      	ldr	r2, [r7, #4]
 8032a5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8032a5e:	00d2      	lsls	r2, r2, #3
 8032a60:	491b      	ldr	r1, [pc, #108]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a62:	4313      	orrs	r3, r2
 8032a64:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8032a66:	4b1a      	ldr	r3, [pc, #104]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032a6a:	f023 020c 	bic.w	r2, r3, #12
 8032a6e:	687b      	ldr	r3, [r7, #4]
 8032a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032a72:	4917      	ldr	r1, [pc, #92]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a74:	4313      	orrs	r3, r2
 8032a76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8032a78:	4b15      	ldr	r3, [pc, #84]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032a7c:	f023 0202 	bic.w	r2, r3, #2
 8032a80:	687b      	ldr	r3, [r7, #4]
 8032a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032a84:	4912      	ldr	r1, [pc, #72]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a86:	4313      	orrs	r3, r2
 8032a88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8032a8a:	4b11      	ldr	r3, [pc, #68]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032a8e:	4a10      	ldr	r2, [pc, #64]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8032a94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8032a96:	4b0e      	ldr	r3, [pc, #56]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032a9a:	4a0d      	ldr	r2, [pc, #52]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8032aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8032aa2:	4b0b      	ldr	r3, [pc, #44]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032aa6:	4a0a      	ldr	r2, [pc, #40]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8032aac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8032aae:	4b08      	ldr	r3, [pc, #32]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032ab2:	4a07      	ldr	r2, [pc, #28]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032ab4:	f043 0301 	orr.w	r3, r3, #1
 8032ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8032aba:	4b05      	ldr	r3, [pc, #20]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032abc:	681b      	ldr	r3, [r3, #0]
 8032abe:	4a04      	ldr	r2, [pc, #16]	; (8032ad0 <HAL_RCC_OscConfig+0x76c>)
 8032ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8032ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032ac6:	f7f9 fc65 	bl	802c394 <HAL_GetTick>
 8032aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8032acc:	e011      	b.n	8032af2 <HAL_RCC_OscConfig+0x78e>
 8032ace:	bf00      	nop
 8032ad0:	58024400 	.word	0x58024400
 8032ad4:	58024800 	.word	0x58024800
 8032ad8:	fffffc0c 	.word	0xfffffc0c
 8032adc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8032ae0:	f7f9 fc58 	bl	802c394 <HAL_GetTick>
 8032ae4:	4602      	mov	r2, r0
 8032ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032ae8:	1ad3      	subs	r3, r2, r3
 8032aea:	2b02      	cmp	r3, #2
 8032aec:	d901      	bls.n	8032af2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8032aee:	2303      	movs	r3, #3
 8032af0:	e05f      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8032af2:	4b32      	ldr	r3, [pc, #200]	; (8032bbc <HAL_RCC_OscConfig+0x858>)
 8032af4:	681b      	ldr	r3, [r3, #0]
 8032af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8032afa:	2b00      	cmp	r3, #0
 8032afc:	d0f0      	beq.n	8032ae0 <HAL_RCC_OscConfig+0x77c>
 8032afe:	e057      	b.n	8032bb0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8032b00:	4b2e      	ldr	r3, [pc, #184]	; (8032bbc <HAL_RCC_OscConfig+0x858>)
 8032b02:	681b      	ldr	r3, [r3, #0]
 8032b04:	4a2d      	ldr	r2, [pc, #180]	; (8032bbc <HAL_RCC_OscConfig+0x858>)
 8032b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8032b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032b0c:	f7f9 fc42 	bl	802c394 <HAL_GetTick>
 8032b10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8032b12:	e008      	b.n	8032b26 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8032b14:	f7f9 fc3e 	bl	802c394 <HAL_GetTick>
 8032b18:	4602      	mov	r2, r0
 8032b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032b1c:	1ad3      	subs	r3, r2, r3
 8032b1e:	2b02      	cmp	r3, #2
 8032b20:	d901      	bls.n	8032b26 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8032b22:	2303      	movs	r3, #3
 8032b24:	e045      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8032b26:	4b25      	ldr	r3, [pc, #148]	; (8032bbc <HAL_RCC_OscConfig+0x858>)
 8032b28:	681b      	ldr	r3, [r3, #0]
 8032b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8032b2e:	2b00      	cmp	r3, #0
 8032b30:	d1f0      	bne.n	8032b14 <HAL_RCC_OscConfig+0x7b0>
 8032b32:	e03d      	b.n	8032bb0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8032b34:	4b21      	ldr	r3, [pc, #132]	; (8032bbc <HAL_RCC_OscConfig+0x858>)
 8032b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032b38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8032b3a:	4b20      	ldr	r3, [pc, #128]	; (8032bbc <HAL_RCC_OscConfig+0x858>)
 8032b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032b3e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8032b40:	687b      	ldr	r3, [r7, #4]
 8032b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032b44:	2b01      	cmp	r3, #1
 8032b46:	d031      	beq.n	8032bac <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8032b48:	693b      	ldr	r3, [r7, #16]
 8032b4a:	f003 0203 	and.w	r2, r3, #3
 8032b4e:	687b      	ldr	r3, [r7, #4]
 8032b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8032b52:	429a      	cmp	r2, r3
 8032b54:	d12a      	bne.n	8032bac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8032b56:	693b      	ldr	r3, [r7, #16]
 8032b58:	091b      	lsrs	r3, r3, #4
 8032b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8032b5e:	687b      	ldr	r3, [r7, #4]
 8032b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8032b62:	429a      	cmp	r2, r3
 8032b64:	d122      	bne.n	8032bac <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8032b66:	68fb      	ldr	r3, [r7, #12]
 8032b68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8032b6c:	687b      	ldr	r3, [r7, #4]
 8032b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032b70:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8032b72:	429a      	cmp	r2, r3
 8032b74:	d11a      	bne.n	8032bac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8032b76:	68fb      	ldr	r3, [r7, #12]
 8032b78:	0a5b      	lsrs	r3, r3, #9
 8032b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8032b7e:	687b      	ldr	r3, [r7, #4]
 8032b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032b82:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8032b84:	429a      	cmp	r2, r3
 8032b86:	d111      	bne.n	8032bac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8032b88:	68fb      	ldr	r3, [r7, #12]
 8032b8a:	0c1b      	lsrs	r3, r3, #16
 8032b8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8032b90:	687b      	ldr	r3, [r7, #4]
 8032b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032b94:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8032b96:	429a      	cmp	r2, r3
 8032b98:	d108      	bne.n	8032bac <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8032b9a:	68fb      	ldr	r3, [r7, #12]
 8032b9c:	0e1b      	lsrs	r3, r3, #24
 8032b9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8032ba2:	687b      	ldr	r3, [r7, #4]
 8032ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032ba6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8032ba8:	429a      	cmp	r2, r3
 8032baa:	d001      	beq.n	8032bb0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8032bac:	2301      	movs	r3, #1
 8032bae:	e000      	b.n	8032bb2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8032bb0:	2300      	movs	r3, #0
}
 8032bb2:	4618      	mov	r0, r3
 8032bb4:	3730      	adds	r7, #48	; 0x30
 8032bb6:	46bd      	mov	sp, r7
 8032bb8:	bd80      	pop	{r7, pc}
 8032bba:	bf00      	nop
 8032bbc:	58024400 	.word	0x58024400

08032bc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8032bc0:	b580      	push	{r7, lr}
 8032bc2:	b086      	sub	sp, #24
 8032bc4:	af00      	add	r7, sp, #0
 8032bc6:	6078      	str	r0, [r7, #4]
 8032bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8032bca:	687b      	ldr	r3, [r7, #4]
 8032bcc:	2b00      	cmp	r3, #0
 8032bce:	d101      	bne.n	8032bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8032bd0:	2301      	movs	r3, #1
 8032bd2:	e19c      	b.n	8032f0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8032bd4:	4b8a      	ldr	r3, [pc, #552]	; (8032e00 <HAL_RCC_ClockConfig+0x240>)
 8032bd6:	681b      	ldr	r3, [r3, #0]
 8032bd8:	f003 030f 	and.w	r3, r3, #15
 8032bdc:	683a      	ldr	r2, [r7, #0]
 8032bde:	429a      	cmp	r2, r3
 8032be0:	d910      	bls.n	8032c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8032be2:	4b87      	ldr	r3, [pc, #540]	; (8032e00 <HAL_RCC_ClockConfig+0x240>)
 8032be4:	681b      	ldr	r3, [r3, #0]
 8032be6:	f023 020f 	bic.w	r2, r3, #15
 8032bea:	4985      	ldr	r1, [pc, #532]	; (8032e00 <HAL_RCC_ClockConfig+0x240>)
 8032bec:	683b      	ldr	r3, [r7, #0]
 8032bee:	4313      	orrs	r3, r2
 8032bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8032bf2:	4b83      	ldr	r3, [pc, #524]	; (8032e00 <HAL_RCC_ClockConfig+0x240>)
 8032bf4:	681b      	ldr	r3, [r3, #0]
 8032bf6:	f003 030f 	and.w	r3, r3, #15
 8032bfa:	683a      	ldr	r2, [r7, #0]
 8032bfc:	429a      	cmp	r2, r3
 8032bfe:	d001      	beq.n	8032c04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8032c00:	2301      	movs	r3, #1
 8032c02:	e184      	b.n	8032f0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8032c04:	687b      	ldr	r3, [r7, #4]
 8032c06:	681b      	ldr	r3, [r3, #0]
 8032c08:	f003 0304 	and.w	r3, r3, #4
 8032c0c:	2b00      	cmp	r3, #0
 8032c0e:	d010      	beq.n	8032c32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8032c10:	687b      	ldr	r3, [r7, #4]
 8032c12:	691a      	ldr	r2, [r3, #16]
 8032c14:	4b7b      	ldr	r3, [pc, #492]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032c16:	699b      	ldr	r3, [r3, #24]
 8032c18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8032c1c:	429a      	cmp	r2, r3
 8032c1e:	d908      	bls.n	8032c32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8032c20:	4b78      	ldr	r3, [pc, #480]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032c22:	699b      	ldr	r3, [r3, #24]
 8032c24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8032c28:	687b      	ldr	r3, [r7, #4]
 8032c2a:	691b      	ldr	r3, [r3, #16]
 8032c2c:	4975      	ldr	r1, [pc, #468]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032c2e:	4313      	orrs	r3, r2
 8032c30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8032c32:	687b      	ldr	r3, [r7, #4]
 8032c34:	681b      	ldr	r3, [r3, #0]
 8032c36:	f003 0308 	and.w	r3, r3, #8
 8032c3a:	2b00      	cmp	r3, #0
 8032c3c:	d010      	beq.n	8032c60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8032c3e:	687b      	ldr	r3, [r7, #4]
 8032c40:	695a      	ldr	r2, [r3, #20]
 8032c42:	4b70      	ldr	r3, [pc, #448]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032c44:	69db      	ldr	r3, [r3, #28]
 8032c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8032c4a:	429a      	cmp	r2, r3
 8032c4c:	d908      	bls.n	8032c60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8032c4e:	4b6d      	ldr	r3, [pc, #436]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032c50:	69db      	ldr	r3, [r3, #28]
 8032c52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8032c56:	687b      	ldr	r3, [r7, #4]
 8032c58:	695b      	ldr	r3, [r3, #20]
 8032c5a:	496a      	ldr	r1, [pc, #424]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032c5c:	4313      	orrs	r3, r2
 8032c5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8032c60:	687b      	ldr	r3, [r7, #4]
 8032c62:	681b      	ldr	r3, [r3, #0]
 8032c64:	f003 0310 	and.w	r3, r3, #16
 8032c68:	2b00      	cmp	r3, #0
 8032c6a:	d010      	beq.n	8032c8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8032c6c:	687b      	ldr	r3, [r7, #4]
 8032c6e:	699a      	ldr	r2, [r3, #24]
 8032c70:	4b64      	ldr	r3, [pc, #400]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032c72:	69db      	ldr	r3, [r3, #28]
 8032c74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8032c78:	429a      	cmp	r2, r3
 8032c7a:	d908      	bls.n	8032c8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8032c7c:	4b61      	ldr	r3, [pc, #388]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032c7e:	69db      	ldr	r3, [r3, #28]
 8032c80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8032c84:	687b      	ldr	r3, [r7, #4]
 8032c86:	699b      	ldr	r3, [r3, #24]
 8032c88:	495e      	ldr	r1, [pc, #376]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032c8a:	4313      	orrs	r3, r2
 8032c8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8032c8e:	687b      	ldr	r3, [r7, #4]
 8032c90:	681b      	ldr	r3, [r3, #0]
 8032c92:	f003 0320 	and.w	r3, r3, #32
 8032c96:	2b00      	cmp	r3, #0
 8032c98:	d010      	beq.n	8032cbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8032c9a:	687b      	ldr	r3, [r7, #4]
 8032c9c:	69da      	ldr	r2, [r3, #28]
 8032c9e:	4b59      	ldr	r3, [pc, #356]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032ca0:	6a1b      	ldr	r3, [r3, #32]
 8032ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8032ca6:	429a      	cmp	r2, r3
 8032ca8:	d908      	bls.n	8032cbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8032caa:	4b56      	ldr	r3, [pc, #344]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032cac:	6a1b      	ldr	r3, [r3, #32]
 8032cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8032cb2:	687b      	ldr	r3, [r7, #4]
 8032cb4:	69db      	ldr	r3, [r3, #28]
 8032cb6:	4953      	ldr	r1, [pc, #332]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032cb8:	4313      	orrs	r3, r2
 8032cba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8032cbc:	687b      	ldr	r3, [r7, #4]
 8032cbe:	681b      	ldr	r3, [r3, #0]
 8032cc0:	f003 0302 	and.w	r3, r3, #2
 8032cc4:	2b00      	cmp	r3, #0
 8032cc6:	d010      	beq.n	8032cea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8032cc8:	687b      	ldr	r3, [r7, #4]
 8032cca:	68da      	ldr	r2, [r3, #12]
 8032ccc:	4b4d      	ldr	r3, [pc, #308]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032cce:	699b      	ldr	r3, [r3, #24]
 8032cd0:	f003 030f 	and.w	r3, r3, #15
 8032cd4:	429a      	cmp	r2, r3
 8032cd6:	d908      	bls.n	8032cea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8032cd8:	4b4a      	ldr	r3, [pc, #296]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032cda:	699b      	ldr	r3, [r3, #24]
 8032cdc:	f023 020f 	bic.w	r2, r3, #15
 8032ce0:	687b      	ldr	r3, [r7, #4]
 8032ce2:	68db      	ldr	r3, [r3, #12]
 8032ce4:	4947      	ldr	r1, [pc, #284]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032ce6:	4313      	orrs	r3, r2
 8032ce8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8032cea:	687b      	ldr	r3, [r7, #4]
 8032cec:	681b      	ldr	r3, [r3, #0]
 8032cee:	f003 0301 	and.w	r3, r3, #1
 8032cf2:	2b00      	cmp	r3, #0
 8032cf4:	d055      	beq.n	8032da2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8032cf6:	4b43      	ldr	r3, [pc, #268]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032cf8:	699b      	ldr	r3, [r3, #24]
 8032cfa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8032cfe:	687b      	ldr	r3, [r7, #4]
 8032d00:	689b      	ldr	r3, [r3, #8]
 8032d02:	4940      	ldr	r1, [pc, #256]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032d04:	4313      	orrs	r3, r2
 8032d06:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8032d08:	687b      	ldr	r3, [r7, #4]
 8032d0a:	685b      	ldr	r3, [r3, #4]
 8032d0c:	2b02      	cmp	r3, #2
 8032d0e:	d107      	bne.n	8032d20 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8032d10:	4b3c      	ldr	r3, [pc, #240]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032d12:	681b      	ldr	r3, [r3, #0]
 8032d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032d18:	2b00      	cmp	r3, #0
 8032d1a:	d121      	bne.n	8032d60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8032d1c:	2301      	movs	r3, #1
 8032d1e:	e0f6      	b.n	8032f0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8032d20:	687b      	ldr	r3, [r7, #4]
 8032d22:	685b      	ldr	r3, [r3, #4]
 8032d24:	2b03      	cmp	r3, #3
 8032d26:	d107      	bne.n	8032d38 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8032d28:	4b36      	ldr	r3, [pc, #216]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032d2a:	681b      	ldr	r3, [r3, #0]
 8032d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8032d30:	2b00      	cmp	r3, #0
 8032d32:	d115      	bne.n	8032d60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8032d34:	2301      	movs	r3, #1
 8032d36:	e0ea      	b.n	8032f0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8032d38:	687b      	ldr	r3, [r7, #4]
 8032d3a:	685b      	ldr	r3, [r3, #4]
 8032d3c:	2b01      	cmp	r3, #1
 8032d3e:	d107      	bne.n	8032d50 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8032d40:	4b30      	ldr	r3, [pc, #192]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032d42:	681b      	ldr	r3, [r3, #0]
 8032d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032d48:	2b00      	cmp	r3, #0
 8032d4a:	d109      	bne.n	8032d60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8032d4c:	2301      	movs	r3, #1
 8032d4e:	e0de      	b.n	8032f0e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8032d50:	4b2c      	ldr	r3, [pc, #176]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032d52:	681b      	ldr	r3, [r3, #0]
 8032d54:	f003 0304 	and.w	r3, r3, #4
 8032d58:	2b00      	cmp	r3, #0
 8032d5a:	d101      	bne.n	8032d60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8032d5c:	2301      	movs	r3, #1
 8032d5e:	e0d6      	b.n	8032f0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8032d60:	4b28      	ldr	r3, [pc, #160]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032d62:	691b      	ldr	r3, [r3, #16]
 8032d64:	f023 0207 	bic.w	r2, r3, #7
 8032d68:	687b      	ldr	r3, [r7, #4]
 8032d6a:	685b      	ldr	r3, [r3, #4]
 8032d6c:	4925      	ldr	r1, [pc, #148]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032d6e:	4313      	orrs	r3, r2
 8032d70:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8032d72:	f7f9 fb0f 	bl	802c394 <HAL_GetTick>
 8032d76:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8032d78:	e00a      	b.n	8032d90 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8032d7a:	f7f9 fb0b 	bl	802c394 <HAL_GetTick>
 8032d7e:	4602      	mov	r2, r0
 8032d80:	697b      	ldr	r3, [r7, #20]
 8032d82:	1ad3      	subs	r3, r2, r3
 8032d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8032d88:	4293      	cmp	r3, r2
 8032d8a:	d901      	bls.n	8032d90 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8032d8c:	2303      	movs	r3, #3
 8032d8e:	e0be      	b.n	8032f0e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8032d90:	4b1c      	ldr	r3, [pc, #112]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032d92:	691b      	ldr	r3, [r3, #16]
 8032d94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8032d98:	687b      	ldr	r3, [r7, #4]
 8032d9a:	685b      	ldr	r3, [r3, #4]
 8032d9c:	00db      	lsls	r3, r3, #3
 8032d9e:	429a      	cmp	r2, r3
 8032da0:	d1eb      	bne.n	8032d7a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8032da2:	687b      	ldr	r3, [r7, #4]
 8032da4:	681b      	ldr	r3, [r3, #0]
 8032da6:	f003 0302 	and.w	r3, r3, #2
 8032daa:	2b00      	cmp	r3, #0
 8032dac:	d010      	beq.n	8032dd0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8032dae:	687b      	ldr	r3, [r7, #4]
 8032db0:	68da      	ldr	r2, [r3, #12]
 8032db2:	4b14      	ldr	r3, [pc, #80]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032db4:	699b      	ldr	r3, [r3, #24]
 8032db6:	f003 030f 	and.w	r3, r3, #15
 8032dba:	429a      	cmp	r2, r3
 8032dbc:	d208      	bcs.n	8032dd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8032dbe:	4b11      	ldr	r3, [pc, #68]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032dc0:	699b      	ldr	r3, [r3, #24]
 8032dc2:	f023 020f 	bic.w	r2, r3, #15
 8032dc6:	687b      	ldr	r3, [r7, #4]
 8032dc8:	68db      	ldr	r3, [r3, #12]
 8032dca:	490e      	ldr	r1, [pc, #56]	; (8032e04 <HAL_RCC_ClockConfig+0x244>)
 8032dcc:	4313      	orrs	r3, r2
 8032dce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8032dd0:	4b0b      	ldr	r3, [pc, #44]	; (8032e00 <HAL_RCC_ClockConfig+0x240>)
 8032dd2:	681b      	ldr	r3, [r3, #0]
 8032dd4:	f003 030f 	and.w	r3, r3, #15
 8032dd8:	683a      	ldr	r2, [r7, #0]
 8032dda:	429a      	cmp	r2, r3
 8032ddc:	d214      	bcs.n	8032e08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8032dde:	4b08      	ldr	r3, [pc, #32]	; (8032e00 <HAL_RCC_ClockConfig+0x240>)
 8032de0:	681b      	ldr	r3, [r3, #0]
 8032de2:	f023 020f 	bic.w	r2, r3, #15
 8032de6:	4906      	ldr	r1, [pc, #24]	; (8032e00 <HAL_RCC_ClockConfig+0x240>)
 8032de8:	683b      	ldr	r3, [r7, #0]
 8032dea:	4313      	orrs	r3, r2
 8032dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8032dee:	4b04      	ldr	r3, [pc, #16]	; (8032e00 <HAL_RCC_ClockConfig+0x240>)
 8032df0:	681b      	ldr	r3, [r3, #0]
 8032df2:	f003 030f 	and.w	r3, r3, #15
 8032df6:	683a      	ldr	r2, [r7, #0]
 8032df8:	429a      	cmp	r2, r3
 8032dfa:	d005      	beq.n	8032e08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8032dfc:	2301      	movs	r3, #1
 8032dfe:	e086      	b.n	8032f0e <HAL_RCC_ClockConfig+0x34e>
 8032e00:	52002000 	.word	0x52002000
 8032e04:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8032e08:	687b      	ldr	r3, [r7, #4]
 8032e0a:	681b      	ldr	r3, [r3, #0]
 8032e0c:	f003 0304 	and.w	r3, r3, #4
 8032e10:	2b00      	cmp	r3, #0
 8032e12:	d010      	beq.n	8032e36 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8032e14:	687b      	ldr	r3, [r7, #4]
 8032e16:	691a      	ldr	r2, [r3, #16]
 8032e18:	4b3f      	ldr	r3, [pc, #252]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032e1a:	699b      	ldr	r3, [r3, #24]
 8032e1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8032e20:	429a      	cmp	r2, r3
 8032e22:	d208      	bcs.n	8032e36 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8032e24:	4b3c      	ldr	r3, [pc, #240]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032e26:	699b      	ldr	r3, [r3, #24]
 8032e28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8032e2c:	687b      	ldr	r3, [r7, #4]
 8032e2e:	691b      	ldr	r3, [r3, #16]
 8032e30:	4939      	ldr	r1, [pc, #228]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032e32:	4313      	orrs	r3, r2
 8032e34:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8032e36:	687b      	ldr	r3, [r7, #4]
 8032e38:	681b      	ldr	r3, [r3, #0]
 8032e3a:	f003 0308 	and.w	r3, r3, #8
 8032e3e:	2b00      	cmp	r3, #0
 8032e40:	d010      	beq.n	8032e64 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8032e42:	687b      	ldr	r3, [r7, #4]
 8032e44:	695a      	ldr	r2, [r3, #20]
 8032e46:	4b34      	ldr	r3, [pc, #208]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032e48:	69db      	ldr	r3, [r3, #28]
 8032e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8032e4e:	429a      	cmp	r2, r3
 8032e50:	d208      	bcs.n	8032e64 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8032e52:	4b31      	ldr	r3, [pc, #196]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032e54:	69db      	ldr	r3, [r3, #28]
 8032e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8032e5a:	687b      	ldr	r3, [r7, #4]
 8032e5c:	695b      	ldr	r3, [r3, #20]
 8032e5e:	492e      	ldr	r1, [pc, #184]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032e60:	4313      	orrs	r3, r2
 8032e62:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8032e64:	687b      	ldr	r3, [r7, #4]
 8032e66:	681b      	ldr	r3, [r3, #0]
 8032e68:	f003 0310 	and.w	r3, r3, #16
 8032e6c:	2b00      	cmp	r3, #0
 8032e6e:	d010      	beq.n	8032e92 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8032e70:	687b      	ldr	r3, [r7, #4]
 8032e72:	699a      	ldr	r2, [r3, #24]
 8032e74:	4b28      	ldr	r3, [pc, #160]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032e76:	69db      	ldr	r3, [r3, #28]
 8032e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8032e7c:	429a      	cmp	r2, r3
 8032e7e:	d208      	bcs.n	8032e92 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8032e80:	4b25      	ldr	r3, [pc, #148]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032e82:	69db      	ldr	r3, [r3, #28]
 8032e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8032e88:	687b      	ldr	r3, [r7, #4]
 8032e8a:	699b      	ldr	r3, [r3, #24]
 8032e8c:	4922      	ldr	r1, [pc, #136]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032e8e:	4313      	orrs	r3, r2
 8032e90:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8032e92:	687b      	ldr	r3, [r7, #4]
 8032e94:	681b      	ldr	r3, [r3, #0]
 8032e96:	f003 0320 	and.w	r3, r3, #32
 8032e9a:	2b00      	cmp	r3, #0
 8032e9c:	d010      	beq.n	8032ec0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8032e9e:	687b      	ldr	r3, [r7, #4]
 8032ea0:	69da      	ldr	r2, [r3, #28]
 8032ea2:	4b1d      	ldr	r3, [pc, #116]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032ea4:	6a1b      	ldr	r3, [r3, #32]
 8032ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8032eaa:	429a      	cmp	r2, r3
 8032eac:	d208      	bcs.n	8032ec0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8032eae:	4b1a      	ldr	r3, [pc, #104]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032eb0:	6a1b      	ldr	r3, [r3, #32]
 8032eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8032eb6:	687b      	ldr	r3, [r7, #4]
 8032eb8:	69db      	ldr	r3, [r3, #28]
 8032eba:	4917      	ldr	r1, [pc, #92]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032ebc:	4313      	orrs	r3, r2
 8032ebe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8032ec0:	f000 f834 	bl	8032f2c <HAL_RCC_GetSysClockFreq>
 8032ec4:	4602      	mov	r2, r0
 8032ec6:	4b14      	ldr	r3, [pc, #80]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032ec8:	699b      	ldr	r3, [r3, #24]
 8032eca:	0a1b      	lsrs	r3, r3, #8
 8032ecc:	f003 030f 	and.w	r3, r3, #15
 8032ed0:	4912      	ldr	r1, [pc, #72]	; (8032f1c <HAL_RCC_ClockConfig+0x35c>)
 8032ed2:	5ccb      	ldrb	r3, [r1, r3]
 8032ed4:	f003 031f 	and.w	r3, r3, #31
 8032ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8032edc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8032ede:	4b0e      	ldr	r3, [pc, #56]	; (8032f18 <HAL_RCC_ClockConfig+0x358>)
 8032ee0:	699b      	ldr	r3, [r3, #24]
 8032ee2:	f003 030f 	and.w	r3, r3, #15
 8032ee6:	4a0d      	ldr	r2, [pc, #52]	; (8032f1c <HAL_RCC_ClockConfig+0x35c>)
 8032ee8:	5cd3      	ldrb	r3, [r2, r3]
 8032eea:	f003 031f 	and.w	r3, r3, #31
 8032eee:	693a      	ldr	r2, [r7, #16]
 8032ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8032ef4:	4a0a      	ldr	r2, [pc, #40]	; (8032f20 <HAL_RCC_ClockConfig+0x360>)
 8032ef6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8032ef8:	4a0a      	ldr	r2, [pc, #40]	; (8032f24 <HAL_RCC_ClockConfig+0x364>)
 8032efa:	693b      	ldr	r3, [r7, #16]
 8032efc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8032efe:	4b0a      	ldr	r3, [pc, #40]	; (8032f28 <HAL_RCC_ClockConfig+0x368>)
 8032f00:	681b      	ldr	r3, [r3, #0]
 8032f02:	4618      	mov	r0, r3
 8032f04:	f7f9 f9fc 	bl	802c300 <HAL_InitTick>
 8032f08:	4603      	mov	r3, r0
 8032f0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8032f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8032f0e:	4618      	mov	r0, r3
 8032f10:	3718      	adds	r7, #24
 8032f12:	46bd      	mov	sp, r7
 8032f14:	bd80      	pop	{r7, pc}
 8032f16:	bf00      	nop
 8032f18:	58024400 	.word	0x58024400
 8032f1c:	08059568 	.word	0x08059568
 8032f20:	24000004 	.word	0x24000004
 8032f24:	24000000 	.word	0x24000000
 8032f28:	24000008 	.word	0x24000008

08032f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8032f2c:	b480      	push	{r7}
 8032f2e:	b089      	sub	sp, #36	; 0x24
 8032f30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8032f32:	4bb3      	ldr	r3, [pc, #716]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032f34:	691b      	ldr	r3, [r3, #16]
 8032f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8032f3a:	2b18      	cmp	r3, #24
 8032f3c:	f200 8155 	bhi.w	80331ea <HAL_RCC_GetSysClockFreq+0x2be>
 8032f40:	a201      	add	r2, pc, #4	; (adr r2, 8032f48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8032f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032f46:	bf00      	nop
 8032f48:	08032fad 	.word	0x08032fad
 8032f4c:	080331eb 	.word	0x080331eb
 8032f50:	080331eb 	.word	0x080331eb
 8032f54:	080331eb 	.word	0x080331eb
 8032f58:	080331eb 	.word	0x080331eb
 8032f5c:	080331eb 	.word	0x080331eb
 8032f60:	080331eb 	.word	0x080331eb
 8032f64:	080331eb 	.word	0x080331eb
 8032f68:	08032fd3 	.word	0x08032fd3
 8032f6c:	080331eb 	.word	0x080331eb
 8032f70:	080331eb 	.word	0x080331eb
 8032f74:	080331eb 	.word	0x080331eb
 8032f78:	080331eb 	.word	0x080331eb
 8032f7c:	080331eb 	.word	0x080331eb
 8032f80:	080331eb 	.word	0x080331eb
 8032f84:	080331eb 	.word	0x080331eb
 8032f88:	08032fd9 	.word	0x08032fd9
 8032f8c:	080331eb 	.word	0x080331eb
 8032f90:	080331eb 	.word	0x080331eb
 8032f94:	080331eb 	.word	0x080331eb
 8032f98:	080331eb 	.word	0x080331eb
 8032f9c:	080331eb 	.word	0x080331eb
 8032fa0:	080331eb 	.word	0x080331eb
 8032fa4:	080331eb 	.word	0x080331eb
 8032fa8:	08032fdf 	.word	0x08032fdf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8032fac:	4b94      	ldr	r3, [pc, #592]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032fae:	681b      	ldr	r3, [r3, #0]
 8032fb0:	f003 0320 	and.w	r3, r3, #32
 8032fb4:	2b00      	cmp	r3, #0
 8032fb6:	d009      	beq.n	8032fcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8032fb8:	4b91      	ldr	r3, [pc, #580]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032fba:	681b      	ldr	r3, [r3, #0]
 8032fbc:	08db      	lsrs	r3, r3, #3
 8032fbe:	f003 0303 	and.w	r3, r3, #3
 8032fc2:	4a90      	ldr	r2, [pc, #576]	; (8033204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8032fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8032fc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8032fca:	e111      	b.n	80331f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8032fcc:	4b8d      	ldr	r3, [pc, #564]	; (8033204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8032fce:	61bb      	str	r3, [r7, #24]
    break;
 8032fd0:	e10e      	b.n	80331f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8032fd2:	4b8d      	ldr	r3, [pc, #564]	; (8033208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8032fd4:	61bb      	str	r3, [r7, #24]
    break;
 8032fd6:	e10b      	b.n	80331f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8032fd8:	4b8c      	ldr	r3, [pc, #560]	; (803320c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8032fda:	61bb      	str	r3, [r7, #24]
    break;
 8032fdc:	e108      	b.n	80331f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8032fde:	4b88      	ldr	r3, [pc, #544]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032fe2:	f003 0303 	and.w	r3, r3, #3
 8032fe6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8032fe8:	4b85      	ldr	r3, [pc, #532]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032fec:	091b      	lsrs	r3, r3, #4
 8032fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032ff2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8032ff4:	4b82      	ldr	r3, [pc, #520]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8032ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032ff8:	f003 0301 	and.w	r3, r3, #1
 8032ffc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8032ffe:	4b80      	ldr	r3, [pc, #512]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8033000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033002:	08db      	lsrs	r3, r3, #3
 8033004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8033008:	68fa      	ldr	r2, [r7, #12]
 803300a:	fb02 f303 	mul.w	r3, r2, r3
 803300e:	ee07 3a90 	vmov	s15, r3
 8033012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8033016:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 803301a:	693b      	ldr	r3, [r7, #16]
 803301c:	2b00      	cmp	r3, #0
 803301e:	f000 80e1 	beq.w	80331e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8033022:	697b      	ldr	r3, [r7, #20]
 8033024:	2b02      	cmp	r3, #2
 8033026:	f000 8083 	beq.w	8033130 <HAL_RCC_GetSysClockFreq+0x204>
 803302a:	697b      	ldr	r3, [r7, #20]
 803302c:	2b02      	cmp	r3, #2
 803302e:	f200 80a1 	bhi.w	8033174 <HAL_RCC_GetSysClockFreq+0x248>
 8033032:	697b      	ldr	r3, [r7, #20]
 8033034:	2b00      	cmp	r3, #0
 8033036:	d003      	beq.n	8033040 <HAL_RCC_GetSysClockFreq+0x114>
 8033038:	697b      	ldr	r3, [r7, #20]
 803303a:	2b01      	cmp	r3, #1
 803303c:	d056      	beq.n	80330ec <HAL_RCC_GetSysClockFreq+0x1c0>
 803303e:	e099      	b.n	8033174 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8033040:	4b6f      	ldr	r3, [pc, #444]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8033042:	681b      	ldr	r3, [r3, #0]
 8033044:	f003 0320 	and.w	r3, r3, #32
 8033048:	2b00      	cmp	r3, #0
 803304a:	d02d      	beq.n	80330a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 803304c:	4b6c      	ldr	r3, [pc, #432]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803304e:	681b      	ldr	r3, [r3, #0]
 8033050:	08db      	lsrs	r3, r3, #3
 8033052:	f003 0303 	and.w	r3, r3, #3
 8033056:	4a6b      	ldr	r2, [pc, #428]	; (8033204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8033058:	fa22 f303 	lsr.w	r3, r2, r3
 803305c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 803305e:	687b      	ldr	r3, [r7, #4]
 8033060:	ee07 3a90 	vmov	s15, r3
 8033064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8033068:	693b      	ldr	r3, [r7, #16]
 803306a:	ee07 3a90 	vmov	s15, r3
 803306e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8033072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8033076:	4b62      	ldr	r3, [pc, #392]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8033078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803307a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803307e:	ee07 3a90 	vmov	s15, r3
 8033082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8033086:	ed97 6a02 	vldr	s12, [r7, #8]
 803308a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8033210 <HAL_RCC_GetSysClockFreq+0x2e4>
 803308e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8033092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8033096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803309a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803309e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80330a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80330a6:	e087      	b.n	80331b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80330a8:	693b      	ldr	r3, [r7, #16]
 80330aa:	ee07 3a90 	vmov	s15, r3
 80330ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80330b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8033214 <HAL_RCC_GetSysClockFreq+0x2e8>
 80330b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80330ba:	4b51      	ldr	r3, [pc, #324]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80330bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80330be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80330c2:	ee07 3a90 	vmov	s15, r3
 80330c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80330ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80330ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8033210 <HAL_RCC_GetSysClockFreq+0x2e4>
 80330d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80330d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80330da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80330de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80330e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80330e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80330ea:	e065      	b.n	80331b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80330ec:	693b      	ldr	r3, [r7, #16]
 80330ee:	ee07 3a90 	vmov	s15, r3
 80330f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80330f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8033218 <HAL_RCC_GetSysClockFreq+0x2ec>
 80330fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80330fe:	4b40      	ldr	r3, [pc, #256]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8033100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8033106:	ee07 3a90 	vmov	s15, r3
 803310a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803310e:	ed97 6a02 	vldr	s12, [r7, #8]
 8033112:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8033210 <HAL_RCC_GetSysClockFreq+0x2e4>
 8033116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803311a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803311e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8033122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8033126:	ee67 7a27 	vmul.f32	s15, s14, s15
 803312a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 803312e:	e043      	b.n	80331b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8033130:	693b      	ldr	r3, [r7, #16]
 8033132:	ee07 3a90 	vmov	s15, r3
 8033136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803313a:	eddf 6a38 	vldr	s13, [pc, #224]	; 803321c <HAL_RCC_GetSysClockFreq+0x2f0>
 803313e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8033142:	4b2f      	ldr	r3, [pc, #188]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8033144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803314a:	ee07 3a90 	vmov	s15, r3
 803314e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8033152:	ed97 6a02 	vldr	s12, [r7, #8]
 8033156:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8033210 <HAL_RCC_GetSysClockFreq+0x2e4>
 803315a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803315e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8033162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8033166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803316a:	ee67 7a27 	vmul.f32	s15, s14, s15
 803316e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8033172:	e021      	b.n	80331b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8033174:	693b      	ldr	r3, [r7, #16]
 8033176:	ee07 3a90 	vmov	s15, r3
 803317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803317e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8033218 <HAL_RCC_GetSysClockFreq+0x2ec>
 8033182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8033186:	4b1e      	ldr	r3, [pc, #120]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8033188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803318e:	ee07 3a90 	vmov	s15, r3
 8033192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8033196:	ed97 6a02 	vldr	s12, [r7, #8]
 803319a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8033210 <HAL_RCC_GetSysClockFreq+0x2e4>
 803319e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80331a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80331a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80331aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80331ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80331b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80331b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80331b8:	4b11      	ldr	r3, [pc, #68]	; (8033200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80331ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80331bc:	0a5b      	lsrs	r3, r3, #9
 80331be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80331c2:	3301      	adds	r3, #1
 80331c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80331c6:	683b      	ldr	r3, [r7, #0]
 80331c8:	ee07 3a90 	vmov	s15, r3
 80331cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80331d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80331d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80331d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80331dc:	ee17 3a90 	vmov	r3, s15
 80331e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80331e2:	e005      	b.n	80331f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80331e4:	2300      	movs	r3, #0
 80331e6:	61bb      	str	r3, [r7, #24]
    break;
 80331e8:	e002      	b.n	80331f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80331ea:	4b07      	ldr	r3, [pc, #28]	; (8033208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80331ec:	61bb      	str	r3, [r7, #24]
    break;
 80331ee:	bf00      	nop
  }

  return sysclockfreq;
 80331f0:	69bb      	ldr	r3, [r7, #24]
}
 80331f2:	4618      	mov	r0, r3
 80331f4:	3724      	adds	r7, #36	; 0x24
 80331f6:	46bd      	mov	sp, r7
 80331f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80331fc:	4770      	bx	lr
 80331fe:	bf00      	nop
 8033200:	58024400 	.word	0x58024400
 8033204:	03d09000 	.word	0x03d09000
 8033208:	003d0900 	.word	0x003d0900
 803320c:	017d7840 	.word	0x017d7840
 8033210:	46000000 	.word	0x46000000
 8033214:	4c742400 	.word	0x4c742400
 8033218:	4a742400 	.word	0x4a742400
 803321c:	4bbebc20 	.word	0x4bbebc20

08033220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8033220:	b580      	push	{r7, lr}
 8033222:	b082      	sub	sp, #8
 8033224:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8033226:	f7ff fe81 	bl	8032f2c <HAL_RCC_GetSysClockFreq>
 803322a:	4602      	mov	r2, r0
 803322c:	4b10      	ldr	r3, [pc, #64]	; (8033270 <HAL_RCC_GetHCLKFreq+0x50>)
 803322e:	699b      	ldr	r3, [r3, #24]
 8033230:	0a1b      	lsrs	r3, r3, #8
 8033232:	f003 030f 	and.w	r3, r3, #15
 8033236:	490f      	ldr	r1, [pc, #60]	; (8033274 <HAL_RCC_GetHCLKFreq+0x54>)
 8033238:	5ccb      	ldrb	r3, [r1, r3]
 803323a:	f003 031f 	and.w	r3, r3, #31
 803323e:	fa22 f303 	lsr.w	r3, r2, r3
 8033242:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8033244:	4b0a      	ldr	r3, [pc, #40]	; (8033270 <HAL_RCC_GetHCLKFreq+0x50>)
 8033246:	699b      	ldr	r3, [r3, #24]
 8033248:	f003 030f 	and.w	r3, r3, #15
 803324c:	4a09      	ldr	r2, [pc, #36]	; (8033274 <HAL_RCC_GetHCLKFreq+0x54>)
 803324e:	5cd3      	ldrb	r3, [r2, r3]
 8033250:	f003 031f 	and.w	r3, r3, #31
 8033254:	687a      	ldr	r2, [r7, #4]
 8033256:	fa22 f303 	lsr.w	r3, r2, r3
 803325a:	4a07      	ldr	r2, [pc, #28]	; (8033278 <HAL_RCC_GetHCLKFreq+0x58>)
 803325c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 803325e:	4a07      	ldr	r2, [pc, #28]	; (803327c <HAL_RCC_GetHCLKFreq+0x5c>)
 8033260:	687b      	ldr	r3, [r7, #4]
 8033262:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8033264:	4b04      	ldr	r3, [pc, #16]	; (8033278 <HAL_RCC_GetHCLKFreq+0x58>)
 8033266:	681b      	ldr	r3, [r3, #0]
}
 8033268:	4618      	mov	r0, r3
 803326a:	3708      	adds	r7, #8
 803326c:	46bd      	mov	sp, r7
 803326e:	bd80      	pop	{r7, pc}
 8033270:	58024400 	.word	0x58024400
 8033274:	08059568 	.word	0x08059568
 8033278:	24000004 	.word	0x24000004
 803327c:	24000000 	.word	0x24000000

08033280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8033280:	b580      	push	{r7, lr}
 8033282:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8033284:	f7ff ffcc 	bl	8033220 <HAL_RCC_GetHCLKFreq>
 8033288:	4602      	mov	r2, r0
 803328a:	4b06      	ldr	r3, [pc, #24]	; (80332a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 803328c:	69db      	ldr	r3, [r3, #28]
 803328e:	091b      	lsrs	r3, r3, #4
 8033290:	f003 0307 	and.w	r3, r3, #7
 8033294:	4904      	ldr	r1, [pc, #16]	; (80332a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8033296:	5ccb      	ldrb	r3, [r1, r3]
 8033298:	f003 031f 	and.w	r3, r3, #31
 803329c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80332a0:	4618      	mov	r0, r3
 80332a2:	bd80      	pop	{r7, pc}
 80332a4:	58024400 	.word	0x58024400
 80332a8:	08059568 	.word	0x08059568

080332ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80332ac:	b580      	push	{r7, lr}
 80332ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80332b0:	f7ff ffb6 	bl	8033220 <HAL_RCC_GetHCLKFreq>
 80332b4:	4602      	mov	r2, r0
 80332b6:	4b06      	ldr	r3, [pc, #24]	; (80332d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80332b8:	69db      	ldr	r3, [r3, #28]
 80332ba:	0a1b      	lsrs	r3, r3, #8
 80332bc:	f003 0307 	and.w	r3, r3, #7
 80332c0:	4904      	ldr	r1, [pc, #16]	; (80332d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80332c2:	5ccb      	ldrb	r3, [r1, r3]
 80332c4:	f003 031f 	and.w	r3, r3, #31
 80332c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80332cc:	4618      	mov	r0, r3
 80332ce:	bd80      	pop	{r7, pc}
 80332d0:	58024400 	.word	0x58024400
 80332d4:	08059568 	.word	0x08059568

080332d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80332d8:	b580      	push	{r7, lr}
 80332da:	b086      	sub	sp, #24
 80332dc:	af00      	add	r7, sp, #0
 80332de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80332e0:	2300      	movs	r3, #0
 80332e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80332e4:	2300      	movs	r3, #0
 80332e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80332e8:	687b      	ldr	r3, [r7, #4]
 80332ea:	681b      	ldr	r3, [r3, #0]
 80332ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80332f0:	2b00      	cmp	r3, #0
 80332f2:	d03f      	beq.n	8033374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80332f4:	687b      	ldr	r3, [r7, #4]
 80332f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80332f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80332fc:	d02a      	beq.n	8033354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80332fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8033302:	d824      	bhi.n	803334e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8033304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8033308:	d018      	beq.n	803333c <HAL_RCCEx_PeriphCLKConfig+0x64>
 803330a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803330e:	d81e      	bhi.n	803334e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8033310:	2b00      	cmp	r3, #0
 8033312:	d003      	beq.n	803331c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8033314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8033318:	d007      	beq.n	803332a <HAL_RCCEx_PeriphCLKConfig+0x52>
 803331a:	e018      	b.n	803334e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803331c:	4ba3      	ldr	r3, [pc, #652]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033320:	4aa2      	ldr	r2, [pc, #648]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033326:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8033328:	e015      	b.n	8033356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 803332a:	687b      	ldr	r3, [r7, #4]
 803332c:	3304      	adds	r3, #4
 803332e:	2102      	movs	r1, #2
 8033330:	4618      	mov	r0, r3
 8033332:	f001 f9d5 	bl	80346e0 <RCCEx_PLL2_Config>
 8033336:	4603      	mov	r3, r0
 8033338:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 803333a:	e00c      	b.n	8033356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 803333c:	687b      	ldr	r3, [r7, #4]
 803333e:	3324      	adds	r3, #36	; 0x24
 8033340:	2102      	movs	r1, #2
 8033342:	4618      	mov	r0, r3
 8033344:	f001 fa7e 	bl	8034844 <RCCEx_PLL3_Config>
 8033348:	4603      	mov	r3, r0
 803334a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 803334c:	e003      	b.n	8033356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803334e:	2301      	movs	r3, #1
 8033350:	75fb      	strb	r3, [r7, #23]
      break;
 8033352:	e000      	b.n	8033356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8033354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033356:	7dfb      	ldrb	r3, [r7, #23]
 8033358:	2b00      	cmp	r3, #0
 803335a:	d109      	bne.n	8033370 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 803335c:	4b93      	ldr	r3, [pc, #588]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803335e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8033360:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8033364:	687b      	ldr	r3, [r7, #4]
 8033366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033368:	4990      	ldr	r1, [pc, #576]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803336a:	4313      	orrs	r3, r2
 803336c:	650b      	str	r3, [r1, #80]	; 0x50
 803336e:	e001      	b.n	8033374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033370:	7dfb      	ldrb	r3, [r7, #23]
 8033372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8033374:	687b      	ldr	r3, [r7, #4]
 8033376:	681b      	ldr	r3, [r3, #0]
 8033378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803337c:	2b00      	cmp	r3, #0
 803337e:	d03d      	beq.n	80333fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8033380:	687b      	ldr	r3, [r7, #4]
 8033382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8033384:	2b04      	cmp	r3, #4
 8033386:	d826      	bhi.n	80333d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8033388:	a201      	add	r2, pc, #4	; (adr r2, 8033390 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 803338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803338e:	bf00      	nop
 8033390:	080333a5 	.word	0x080333a5
 8033394:	080333b3 	.word	0x080333b3
 8033398:	080333c5 	.word	0x080333c5
 803339c:	080333dd 	.word	0x080333dd
 80333a0:	080333dd 	.word	0x080333dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80333a4:	4b81      	ldr	r3, [pc, #516]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80333a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80333a8:	4a80      	ldr	r2, [pc, #512]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80333aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80333ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80333b0:	e015      	b.n	80333de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80333b2:	687b      	ldr	r3, [r7, #4]
 80333b4:	3304      	adds	r3, #4
 80333b6:	2100      	movs	r1, #0
 80333b8:	4618      	mov	r0, r3
 80333ba:	f001 f991 	bl	80346e0 <RCCEx_PLL2_Config>
 80333be:	4603      	mov	r3, r0
 80333c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80333c2:	e00c      	b.n	80333de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80333c4:	687b      	ldr	r3, [r7, #4]
 80333c6:	3324      	adds	r3, #36	; 0x24
 80333c8:	2100      	movs	r1, #0
 80333ca:	4618      	mov	r0, r3
 80333cc:	f001 fa3a 	bl	8034844 <RCCEx_PLL3_Config>
 80333d0:	4603      	mov	r3, r0
 80333d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80333d4:	e003      	b.n	80333de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80333d6:	2301      	movs	r3, #1
 80333d8:	75fb      	strb	r3, [r7, #23]
      break;
 80333da:	e000      	b.n	80333de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80333dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80333de:	7dfb      	ldrb	r3, [r7, #23]
 80333e0:	2b00      	cmp	r3, #0
 80333e2:	d109      	bne.n	80333f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80333e4:	4b71      	ldr	r3, [pc, #452]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80333e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80333e8:	f023 0207 	bic.w	r2, r3, #7
 80333ec:	687b      	ldr	r3, [r7, #4]
 80333ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80333f0:	496e      	ldr	r1, [pc, #440]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80333f2:	4313      	orrs	r3, r2
 80333f4:	650b      	str	r3, [r1, #80]	; 0x50
 80333f6:	e001      	b.n	80333fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80333f8:	7dfb      	ldrb	r3, [r7, #23]
 80333fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80333fc:	687b      	ldr	r3, [r7, #4]
 80333fe:	681b      	ldr	r3, [r3, #0]
 8033400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8033404:	2b00      	cmp	r3, #0
 8033406:	d042      	beq.n	803348e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8033408:	687b      	ldr	r3, [r7, #4]
 803340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803340c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033410:	d02b      	beq.n	803346a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8033412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033416:	d825      	bhi.n	8033464 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8033418:	2bc0      	cmp	r3, #192	; 0xc0
 803341a:	d028      	beq.n	803346e <HAL_RCCEx_PeriphCLKConfig+0x196>
 803341c:	2bc0      	cmp	r3, #192	; 0xc0
 803341e:	d821      	bhi.n	8033464 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8033420:	2b80      	cmp	r3, #128	; 0x80
 8033422:	d016      	beq.n	8033452 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8033424:	2b80      	cmp	r3, #128	; 0x80
 8033426:	d81d      	bhi.n	8033464 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8033428:	2b00      	cmp	r3, #0
 803342a:	d002      	beq.n	8033432 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 803342c:	2b40      	cmp	r3, #64	; 0x40
 803342e:	d007      	beq.n	8033440 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8033430:	e018      	b.n	8033464 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8033432:	4b5e      	ldr	r3, [pc, #376]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033436:	4a5d      	ldr	r2, [pc, #372]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803343c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 803343e:	e017      	b.n	8033470 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8033440:	687b      	ldr	r3, [r7, #4]
 8033442:	3304      	adds	r3, #4
 8033444:	2100      	movs	r1, #0
 8033446:	4618      	mov	r0, r3
 8033448:	f001 f94a 	bl	80346e0 <RCCEx_PLL2_Config>
 803344c:	4603      	mov	r3, r0
 803344e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8033450:	e00e      	b.n	8033470 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8033452:	687b      	ldr	r3, [r7, #4]
 8033454:	3324      	adds	r3, #36	; 0x24
 8033456:	2100      	movs	r1, #0
 8033458:	4618      	mov	r0, r3
 803345a:	f001 f9f3 	bl	8034844 <RCCEx_PLL3_Config>
 803345e:	4603      	mov	r3, r0
 8033460:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8033462:	e005      	b.n	8033470 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033464:	2301      	movs	r3, #1
 8033466:	75fb      	strb	r3, [r7, #23]
      break;
 8033468:	e002      	b.n	8033470 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 803346a:	bf00      	nop
 803346c:	e000      	b.n	8033470 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 803346e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033470:	7dfb      	ldrb	r3, [r7, #23]
 8033472:	2b00      	cmp	r3, #0
 8033474:	d109      	bne.n	803348a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8033476:	4b4d      	ldr	r3, [pc, #308]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803347a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 803347e:	687b      	ldr	r3, [r7, #4]
 8033480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033482:	494a      	ldr	r1, [pc, #296]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033484:	4313      	orrs	r3, r2
 8033486:	650b      	str	r3, [r1, #80]	; 0x50
 8033488:	e001      	b.n	803348e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803348a:	7dfb      	ldrb	r3, [r7, #23]
 803348c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 803348e:	687b      	ldr	r3, [r7, #4]
 8033490:	681b      	ldr	r3, [r3, #0]
 8033492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8033496:	2b00      	cmp	r3, #0
 8033498:	d049      	beq.n	803352e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 803349a:	687b      	ldr	r3, [r7, #4]
 803349c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80334a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80334a4:	d030      	beq.n	8033508 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80334a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80334aa:	d82a      	bhi.n	8033502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80334ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80334b0:	d02c      	beq.n	803350c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80334b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80334b6:	d824      	bhi.n	8033502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80334b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80334bc:	d018      	beq.n	80334f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80334be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80334c2:	d81e      	bhi.n	8033502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80334c4:	2b00      	cmp	r3, #0
 80334c6:	d003      	beq.n	80334d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80334c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80334cc:	d007      	beq.n	80334de <HAL_RCCEx_PeriphCLKConfig+0x206>
 80334ce:	e018      	b.n	8033502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80334d0:	4b36      	ldr	r3, [pc, #216]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80334d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80334d4:	4a35      	ldr	r2, [pc, #212]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80334d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80334da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80334dc:	e017      	b.n	803350e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80334de:	687b      	ldr	r3, [r7, #4]
 80334e0:	3304      	adds	r3, #4
 80334e2:	2100      	movs	r1, #0
 80334e4:	4618      	mov	r0, r3
 80334e6:	f001 f8fb 	bl	80346e0 <RCCEx_PLL2_Config>
 80334ea:	4603      	mov	r3, r0
 80334ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80334ee:	e00e      	b.n	803350e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80334f0:	687b      	ldr	r3, [r7, #4]
 80334f2:	3324      	adds	r3, #36	; 0x24
 80334f4:	2100      	movs	r1, #0
 80334f6:	4618      	mov	r0, r3
 80334f8:	f001 f9a4 	bl	8034844 <RCCEx_PLL3_Config>
 80334fc:	4603      	mov	r3, r0
 80334fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8033500:	e005      	b.n	803350e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8033502:	2301      	movs	r3, #1
 8033504:	75fb      	strb	r3, [r7, #23]
      break;
 8033506:	e002      	b.n	803350e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8033508:	bf00      	nop
 803350a:	e000      	b.n	803350e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 803350c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803350e:	7dfb      	ldrb	r3, [r7, #23]
 8033510:	2b00      	cmp	r3, #0
 8033512:	d10a      	bne.n	803352a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8033514:	4b25      	ldr	r3, [pc, #148]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033518:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 803351c:	687b      	ldr	r3, [r7, #4]
 803351e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8033522:	4922      	ldr	r1, [pc, #136]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033524:	4313      	orrs	r3, r2
 8033526:	658b      	str	r3, [r1, #88]	; 0x58
 8033528:	e001      	b.n	803352e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803352a:	7dfb      	ldrb	r3, [r7, #23]
 803352c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 803352e:	687b      	ldr	r3, [r7, #4]
 8033530:	681b      	ldr	r3, [r3, #0]
 8033532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8033536:	2b00      	cmp	r3, #0
 8033538:	d04b      	beq.n	80335d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 803353a:	687b      	ldr	r3, [r7, #4]
 803353c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8033540:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8033544:	d030      	beq.n	80335a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8033546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 803354a:	d82a      	bhi.n	80335a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 803354c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8033550:	d02e      	beq.n	80335b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8033552:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8033556:	d824      	bhi.n	80335a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8033558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 803355c:	d018      	beq.n	8033590 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 803355e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8033562:	d81e      	bhi.n	80335a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8033564:	2b00      	cmp	r3, #0
 8033566:	d003      	beq.n	8033570 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8033568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 803356c:	d007      	beq.n	803357e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 803356e:	e018      	b.n	80335a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8033570:	4b0e      	ldr	r3, [pc, #56]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033574:	4a0d      	ldr	r2, [pc, #52]	; (80335ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8033576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803357a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 803357c:	e019      	b.n	80335b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803357e:	687b      	ldr	r3, [r7, #4]
 8033580:	3304      	adds	r3, #4
 8033582:	2100      	movs	r1, #0
 8033584:	4618      	mov	r0, r3
 8033586:	f001 f8ab 	bl	80346e0 <RCCEx_PLL2_Config>
 803358a:	4603      	mov	r3, r0
 803358c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 803358e:	e010      	b.n	80335b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8033590:	687b      	ldr	r3, [r7, #4]
 8033592:	3324      	adds	r3, #36	; 0x24
 8033594:	2100      	movs	r1, #0
 8033596:	4618      	mov	r0, r3
 8033598:	f001 f954 	bl	8034844 <RCCEx_PLL3_Config>
 803359c:	4603      	mov	r3, r0
 803359e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80335a0:	e007      	b.n	80335b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80335a2:	2301      	movs	r3, #1
 80335a4:	75fb      	strb	r3, [r7, #23]
      break;
 80335a6:	e004      	b.n	80335b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80335a8:	bf00      	nop
 80335aa:	e002      	b.n	80335b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80335ac:	58024400 	.word	0x58024400
      break;
 80335b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80335b2:	7dfb      	ldrb	r3, [r7, #23]
 80335b4:	2b00      	cmp	r3, #0
 80335b6:	d10a      	bne.n	80335ce <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80335b8:	4b99      	ldr	r3, [pc, #612]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80335ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80335bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80335c0:	687b      	ldr	r3, [r7, #4]
 80335c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80335c6:	4996      	ldr	r1, [pc, #600]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80335c8:	4313      	orrs	r3, r2
 80335ca:	658b      	str	r3, [r1, #88]	; 0x58
 80335cc:	e001      	b.n	80335d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80335ce:	7dfb      	ldrb	r3, [r7, #23]
 80335d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80335d2:	687b      	ldr	r3, [r7, #4]
 80335d4:	681b      	ldr	r3, [r3, #0]
 80335d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80335da:	2b00      	cmp	r3, #0
 80335dc:	d032      	beq.n	8033644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80335de:	687b      	ldr	r3, [r7, #4]
 80335e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80335e2:	2b30      	cmp	r3, #48	; 0x30
 80335e4:	d01c      	beq.n	8033620 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80335e6:	2b30      	cmp	r3, #48	; 0x30
 80335e8:	d817      	bhi.n	803361a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80335ea:	2b20      	cmp	r3, #32
 80335ec:	d00c      	beq.n	8033608 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80335ee:	2b20      	cmp	r3, #32
 80335f0:	d813      	bhi.n	803361a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80335f2:	2b00      	cmp	r3, #0
 80335f4:	d016      	beq.n	8033624 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80335f6:	2b10      	cmp	r3, #16
 80335f8:	d10f      	bne.n	803361a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80335fa:	4b89      	ldr	r3, [pc, #548]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80335fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80335fe:	4a88      	ldr	r2, [pc, #544]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8033600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033604:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8033606:	e00e      	b.n	8033626 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8033608:	687b      	ldr	r3, [r7, #4]
 803360a:	3304      	adds	r3, #4
 803360c:	2102      	movs	r1, #2
 803360e:	4618      	mov	r0, r3
 8033610:	f001 f866 	bl	80346e0 <RCCEx_PLL2_Config>
 8033614:	4603      	mov	r3, r0
 8033616:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8033618:	e005      	b.n	8033626 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 803361a:	2301      	movs	r3, #1
 803361c:	75fb      	strb	r3, [r7, #23]
      break;
 803361e:	e002      	b.n	8033626 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8033620:	bf00      	nop
 8033622:	e000      	b.n	8033626 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8033624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033626:	7dfb      	ldrb	r3, [r7, #23]
 8033628:	2b00      	cmp	r3, #0
 803362a:	d109      	bne.n	8033640 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 803362c:	4b7c      	ldr	r3, [pc, #496]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033630:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8033634:	687b      	ldr	r3, [r7, #4]
 8033636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8033638:	4979      	ldr	r1, [pc, #484]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803363a:	4313      	orrs	r3, r2
 803363c:	64cb      	str	r3, [r1, #76]	; 0x4c
 803363e:	e001      	b.n	8033644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033640:	7dfb      	ldrb	r3, [r7, #23]
 8033642:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8033644:	687b      	ldr	r3, [r7, #4]
 8033646:	681b      	ldr	r3, [r3, #0]
 8033648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 803364c:	2b00      	cmp	r3, #0
 803364e:	d047      	beq.n	80336e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8033650:	687b      	ldr	r3, [r7, #4]
 8033652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033658:	d030      	beq.n	80336bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 803365a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803365e:	d82a      	bhi.n	80336b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8033660:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8033664:	d02c      	beq.n	80336c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8033666:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 803366a:	d824      	bhi.n	80336b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 803366c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033670:	d018      	beq.n	80336a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8033672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033676:	d81e      	bhi.n	80336b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8033678:	2b00      	cmp	r3, #0
 803367a:	d003      	beq.n	8033684 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 803367c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8033680:	d007      	beq.n	8033692 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8033682:	e018      	b.n	80336b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8033684:	4b66      	ldr	r3, [pc, #408]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8033686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033688:	4a65      	ldr	r2, [pc, #404]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803368a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803368e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8033690:	e017      	b.n	80336c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8033692:	687b      	ldr	r3, [r7, #4]
 8033694:	3304      	adds	r3, #4
 8033696:	2100      	movs	r1, #0
 8033698:	4618      	mov	r0, r3
 803369a:	f001 f821 	bl	80346e0 <RCCEx_PLL2_Config>
 803369e:	4603      	mov	r3, r0
 80336a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80336a2:	e00e      	b.n	80336c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80336a4:	687b      	ldr	r3, [r7, #4]
 80336a6:	3324      	adds	r3, #36	; 0x24
 80336a8:	2100      	movs	r1, #0
 80336aa:	4618      	mov	r0, r3
 80336ac:	f001 f8ca 	bl	8034844 <RCCEx_PLL3_Config>
 80336b0:	4603      	mov	r3, r0
 80336b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80336b4:	e005      	b.n	80336c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80336b6:	2301      	movs	r3, #1
 80336b8:	75fb      	strb	r3, [r7, #23]
      break;
 80336ba:	e002      	b.n	80336c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80336bc:	bf00      	nop
 80336be:	e000      	b.n	80336c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80336c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80336c2:	7dfb      	ldrb	r3, [r7, #23]
 80336c4:	2b00      	cmp	r3, #0
 80336c6:	d109      	bne.n	80336dc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80336c8:	4b55      	ldr	r3, [pc, #340]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80336ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80336cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80336d0:	687b      	ldr	r3, [r7, #4]
 80336d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80336d4:	4952      	ldr	r1, [pc, #328]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80336d6:	4313      	orrs	r3, r2
 80336d8:	650b      	str	r3, [r1, #80]	; 0x50
 80336da:	e001      	b.n	80336e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80336dc:	7dfb      	ldrb	r3, [r7, #23]
 80336de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80336e0:	687b      	ldr	r3, [r7, #4]
 80336e2:	681b      	ldr	r3, [r3, #0]
 80336e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80336e8:	2b00      	cmp	r3, #0
 80336ea:	d049      	beq.n	8033780 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80336ec:	687b      	ldr	r3, [r7, #4]
 80336ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80336f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80336f4:	d02e      	beq.n	8033754 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80336f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80336fa:	d828      	bhi.n	803374e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80336fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8033700:	d02a      	beq.n	8033758 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8033702:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8033706:	d822      	bhi.n	803374e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8033708:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 803370c:	d026      	beq.n	803375c <HAL_RCCEx_PeriphCLKConfig+0x484>
 803370e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8033712:	d81c      	bhi.n	803374e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8033714:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8033718:	d010      	beq.n	803373c <HAL_RCCEx_PeriphCLKConfig+0x464>
 803371a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 803371e:	d816      	bhi.n	803374e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8033720:	2b00      	cmp	r3, #0
 8033722:	d01d      	beq.n	8033760 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8033724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8033728:	d111      	bne.n	803374e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 803372a:	687b      	ldr	r3, [r7, #4]
 803372c:	3304      	adds	r3, #4
 803372e:	2101      	movs	r1, #1
 8033730:	4618      	mov	r0, r3
 8033732:	f000 ffd5 	bl	80346e0 <RCCEx_PLL2_Config>
 8033736:	4603      	mov	r3, r0
 8033738:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 803373a:	e012      	b.n	8033762 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803373c:	687b      	ldr	r3, [r7, #4]
 803373e:	3324      	adds	r3, #36	; 0x24
 8033740:	2101      	movs	r1, #1
 8033742:	4618      	mov	r0, r3
 8033744:	f001 f87e 	bl	8034844 <RCCEx_PLL3_Config>
 8033748:	4603      	mov	r3, r0
 803374a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 803374c:	e009      	b.n	8033762 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803374e:	2301      	movs	r3, #1
 8033750:	75fb      	strb	r3, [r7, #23]
      break;
 8033752:	e006      	b.n	8033762 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8033754:	bf00      	nop
 8033756:	e004      	b.n	8033762 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8033758:	bf00      	nop
 803375a:	e002      	b.n	8033762 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 803375c:	bf00      	nop
 803375e:	e000      	b.n	8033762 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8033760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033762:	7dfb      	ldrb	r3, [r7, #23]
 8033764:	2b00      	cmp	r3, #0
 8033766:	d109      	bne.n	803377c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8033768:	4b2d      	ldr	r3, [pc, #180]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803376c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8033770:	687b      	ldr	r3, [r7, #4]
 8033772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8033774:	492a      	ldr	r1, [pc, #168]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8033776:	4313      	orrs	r3, r2
 8033778:	650b      	str	r3, [r1, #80]	; 0x50
 803377a:	e001      	b.n	8033780 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803377c:	7dfb      	ldrb	r3, [r7, #23]
 803377e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8033780:	687b      	ldr	r3, [r7, #4]
 8033782:	681b      	ldr	r3, [r3, #0]
 8033784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8033788:	2b00      	cmp	r3, #0
 803378a:	d04d      	beq.n	8033828 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 803378c:	687b      	ldr	r3, [r7, #4]
 803378e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8033792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8033796:	d02e      	beq.n	80337f6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8033798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 803379c:	d828      	bhi.n	80337f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 803379e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80337a2:	d02a      	beq.n	80337fa <HAL_RCCEx_PeriphCLKConfig+0x522>
 80337a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80337a8:	d822      	bhi.n	80337f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80337aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80337ae:	d026      	beq.n	80337fe <HAL_RCCEx_PeriphCLKConfig+0x526>
 80337b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80337b4:	d81c      	bhi.n	80337f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80337b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80337ba:	d010      	beq.n	80337de <HAL_RCCEx_PeriphCLKConfig+0x506>
 80337bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80337c0:	d816      	bhi.n	80337f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80337c2:	2b00      	cmp	r3, #0
 80337c4:	d01d      	beq.n	8033802 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80337c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80337ca:	d111      	bne.n	80337f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80337cc:	687b      	ldr	r3, [r7, #4]
 80337ce:	3304      	adds	r3, #4
 80337d0:	2101      	movs	r1, #1
 80337d2:	4618      	mov	r0, r3
 80337d4:	f000 ff84 	bl	80346e0 <RCCEx_PLL2_Config>
 80337d8:	4603      	mov	r3, r0
 80337da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80337dc:	e012      	b.n	8033804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80337de:	687b      	ldr	r3, [r7, #4]
 80337e0:	3324      	adds	r3, #36	; 0x24
 80337e2:	2101      	movs	r1, #1
 80337e4:	4618      	mov	r0, r3
 80337e6:	f001 f82d 	bl	8034844 <RCCEx_PLL3_Config>
 80337ea:	4603      	mov	r3, r0
 80337ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80337ee:	e009      	b.n	8033804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80337f0:	2301      	movs	r3, #1
 80337f2:	75fb      	strb	r3, [r7, #23]
      break;
 80337f4:	e006      	b.n	8033804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80337f6:	bf00      	nop
 80337f8:	e004      	b.n	8033804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80337fa:	bf00      	nop
 80337fc:	e002      	b.n	8033804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80337fe:	bf00      	nop
 8033800:	e000      	b.n	8033804 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8033802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033804:	7dfb      	ldrb	r3, [r7, #23]
 8033806:	2b00      	cmp	r3, #0
 8033808:	d10c      	bne.n	8033824 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 803380a:	4b05      	ldr	r3, [pc, #20]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803380e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8033812:	687b      	ldr	r3, [r7, #4]
 8033814:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8033818:	4901      	ldr	r1, [pc, #4]	; (8033820 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803381a:	4313      	orrs	r3, r2
 803381c:	658b      	str	r3, [r1, #88]	; 0x58
 803381e:	e003      	b.n	8033828 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8033820:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033824:	7dfb      	ldrb	r3, [r7, #23]
 8033826:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8033828:	687b      	ldr	r3, [r7, #4]
 803382a:	681b      	ldr	r3, [r3, #0]
 803382c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8033830:	2b00      	cmp	r3, #0
 8033832:	d02f      	beq.n	8033894 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8033834:	687b      	ldr	r3, [r7, #4]
 8033836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803383c:	d00e      	beq.n	803385c <HAL_RCCEx_PeriphCLKConfig+0x584>
 803383e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8033842:	d814      	bhi.n	803386e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8033844:	2b00      	cmp	r3, #0
 8033846:	d015      	beq.n	8033874 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8033848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803384c:	d10f      	bne.n	803386e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803384e:	4baf      	ldr	r3, [pc, #700]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033852:	4aae      	ldr	r2, [pc, #696]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 803385a:	e00c      	b.n	8033876 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 803385c:	687b      	ldr	r3, [r7, #4]
 803385e:	3304      	adds	r3, #4
 8033860:	2101      	movs	r1, #1
 8033862:	4618      	mov	r0, r3
 8033864:	f000 ff3c 	bl	80346e0 <RCCEx_PLL2_Config>
 8033868:	4603      	mov	r3, r0
 803386a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 803386c:	e003      	b.n	8033876 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803386e:	2301      	movs	r3, #1
 8033870:	75fb      	strb	r3, [r7, #23]
      break;
 8033872:	e000      	b.n	8033876 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8033874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033876:	7dfb      	ldrb	r3, [r7, #23]
 8033878:	2b00      	cmp	r3, #0
 803387a:	d109      	bne.n	8033890 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 803387c:	4ba3      	ldr	r3, [pc, #652]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803387e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8033880:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8033884:	687b      	ldr	r3, [r7, #4]
 8033886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033888:	49a0      	ldr	r1, [pc, #640]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803388a:	4313      	orrs	r3, r2
 803388c:	650b      	str	r3, [r1, #80]	; 0x50
 803388e:	e001      	b.n	8033894 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033890:	7dfb      	ldrb	r3, [r7, #23]
 8033892:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8033894:	687b      	ldr	r3, [r7, #4]
 8033896:	681b      	ldr	r3, [r3, #0]
 8033898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 803389c:	2b00      	cmp	r3, #0
 803389e:	d032      	beq.n	8033906 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80338a0:	687b      	ldr	r3, [r7, #4]
 80338a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80338a4:	2b03      	cmp	r3, #3
 80338a6:	d81b      	bhi.n	80338e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80338a8:	a201      	add	r2, pc, #4	; (adr r2, 80338b0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80338aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80338ae:	bf00      	nop
 80338b0:	080338e7 	.word	0x080338e7
 80338b4:	080338c1 	.word	0x080338c1
 80338b8:	080338cf 	.word	0x080338cf
 80338bc:	080338e7 	.word	0x080338e7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80338c0:	4b92      	ldr	r3, [pc, #584]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80338c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80338c4:	4a91      	ldr	r2, [pc, #580]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80338c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80338ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80338cc:	e00c      	b.n	80338e8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80338ce:	687b      	ldr	r3, [r7, #4]
 80338d0:	3304      	adds	r3, #4
 80338d2:	2102      	movs	r1, #2
 80338d4:	4618      	mov	r0, r3
 80338d6:	f000 ff03 	bl	80346e0 <RCCEx_PLL2_Config>
 80338da:	4603      	mov	r3, r0
 80338dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80338de:	e003      	b.n	80338e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80338e0:	2301      	movs	r3, #1
 80338e2:	75fb      	strb	r3, [r7, #23]
      break;
 80338e4:	e000      	b.n	80338e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80338e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80338e8:	7dfb      	ldrb	r3, [r7, #23]
 80338ea:	2b00      	cmp	r3, #0
 80338ec:	d109      	bne.n	8033902 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80338ee:	4b87      	ldr	r3, [pc, #540]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80338f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80338f2:	f023 0203 	bic.w	r2, r3, #3
 80338f6:	687b      	ldr	r3, [r7, #4]
 80338f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80338fa:	4984      	ldr	r1, [pc, #528]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80338fc:	4313      	orrs	r3, r2
 80338fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8033900:	e001      	b.n	8033906 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033902:	7dfb      	ldrb	r3, [r7, #23]
 8033904:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8033906:	687b      	ldr	r3, [r7, #4]
 8033908:	681b      	ldr	r3, [r3, #0]
 803390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803390e:	2b00      	cmp	r3, #0
 8033910:	f000 8086 	beq.w	8033a20 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8033914:	4b7e      	ldr	r3, [pc, #504]	; (8033b10 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8033916:	681b      	ldr	r3, [r3, #0]
 8033918:	4a7d      	ldr	r2, [pc, #500]	; (8033b10 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 803391a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803391e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8033920:	f7f8 fd38 	bl	802c394 <HAL_GetTick>
 8033924:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8033926:	e009      	b.n	803393c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8033928:	f7f8 fd34 	bl	802c394 <HAL_GetTick>
 803392c:	4602      	mov	r2, r0
 803392e:	693b      	ldr	r3, [r7, #16]
 8033930:	1ad3      	subs	r3, r2, r3
 8033932:	2b64      	cmp	r3, #100	; 0x64
 8033934:	d902      	bls.n	803393c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8033936:	2303      	movs	r3, #3
 8033938:	75fb      	strb	r3, [r7, #23]
        break;
 803393a:	e005      	b.n	8033948 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 803393c:	4b74      	ldr	r3, [pc, #464]	; (8033b10 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 803393e:	681b      	ldr	r3, [r3, #0]
 8033940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8033944:	2b00      	cmp	r3, #0
 8033946:	d0ef      	beq.n	8033928 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8033948:	7dfb      	ldrb	r3, [r7, #23]
 803394a:	2b00      	cmp	r3, #0
 803394c:	d166      	bne.n	8033a1c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 803394e:	4b6f      	ldr	r3, [pc, #444]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033950:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8033952:	687b      	ldr	r3, [r7, #4]
 8033954:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8033958:	4053      	eors	r3, r2
 803395a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 803395e:	2b00      	cmp	r3, #0
 8033960:	d013      	beq.n	803398a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8033962:	4b6a      	ldr	r3, [pc, #424]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 803396a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 803396c:	4b67      	ldr	r3, [pc, #412]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033970:	4a66      	ldr	r2, [pc, #408]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8033976:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8033978:	4b64      	ldr	r3, [pc, #400]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803397c:	4a63      	ldr	r2, [pc, #396]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803397e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8033982:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8033984:	4a61      	ldr	r2, [pc, #388]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033986:	68fb      	ldr	r3, [r7, #12]
 8033988:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 803398a:	687b      	ldr	r3, [r7, #4]
 803398c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8033990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033994:	d115      	bne.n	80339c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8033996:	f7f8 fcfd 	bl	802c394 <HAL_GetTick>
 803399a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 803399c:	e00b      	b.n	80339b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 803399e:	f7f8 fcf9 	bl	802c394 <HAL_GetTick>
 80339a2:	4602      	mov	r2, r0
 80339a4:	693b      	ldr	r3, [r7, #16]
 80339a6:	1ad3      	subs	r3, r2, r3
 80339a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80339ac:	4293      	cmp	r3, r2
 80339ae:	d902      	bls.n	80339b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80339b0:	2303      	movs	r3, #3
 80339b2:	75fb      	strb	r3, [r7, #23]
            break;
 80339b4:	e005      	b.n	80339c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80339b6:	4b55      	ldr	r3, [pc, #340]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80339b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80339ba:	f003 0302 	and.w	r3, r3, #2
 80339be:	2b00      	cmp	r3, #0
 80339c0:	d0ed      	beq.n	803399e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80339c2:	7dfb      	ldrb	r3, [r7, #23]
 80339c4:	2b00      	cmp	r3, #0
 80339c6:	d126      	bne.n	8033a16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80339c8:	687b      	ldr	r3, [r7, #4]
 80339ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80339ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80339d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80339d6:	d10d      	bne.n	80339f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80339d8:	4b4c      	ldr	r3, [pc, #304]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80339da:	691b      	ldr	r3, [r3, #16]
 80339dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80339e0:	687b      	ldr	r3, [r7, #4]
 80339e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80339e6:	0919      	lsrs	r1, r3, #4
 80339e8:	4b4a      	ldr	r3, [pc, #296]	; (8033b14 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80339ea:	400b      	ands	r3, r1
 80339ec:	4947      	ldr	r1, [pc, #284]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80339ee:	4313      	orrs	r3, r2
 80339f0:	610b      	str	r3, [r1, #16]
 80339f2:	e005      	b.n	8033a00 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80339f4:	4b45      	ldr	r3, [pc, #276]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80339f6:	691b      	ldr	r3, [r3, #16]
 80339f8:	4a44      	ldr	r2, [pc, #272]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80339fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80339fe:	6113      	str	r3, [r2, #16]
 8033a00:	4b42      	ldr	r3, [pc, #264]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8033a04:	687b      	ldr	r3, [r7, #4]
 8033a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8033a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8033a0e:	493f      	ldr	r1, [pc, #252]	; (8033b0c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8033a10:	4313      	orrs	r3, r2
 8033a12:	670b      	str	r3, [r1, #112]	; 0x70
 8033a14:	e004      	b.n	8033a20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8033a16:	7dfb      	ldrb	r3, [r7, #23]
 8033a18:	75bb      	strb	r3, [r7, #22]
 8033a1a:	e001      	b.n	8033a20 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033a1c:	7dfb      	ldrb	r3, [r7, #23]
 8033a1e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8033a20:	687b      	ldr	r3, [r7, #4]
 8033a22:	681b      	ldr	r3, [r3, #0]
 8033a24:	f003 0301 	and.w	r3, r3, #1
 8033a28:	2b00      	cmp	r3, #0
 8033a2a:	f000 8085 	beq.w	8033b38 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8033a2e:	687b      	ldr	r3, [r7, #4]
 8033a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033a32:	2b28      	cmp	r3, #40	; 0x28
 8033a34:	d866      	bhi.n	8033b04 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8033a36:	a201      	add	r2, pc, #4	; (adr r2, 8033a3c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8033a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8033a3c:	08033b19 	.word	0x08033b19
 8033a40:	08033b05 	.word	0x08033b05
 8033a44:	08033b05 	.word	0x08033b05
 8033a48:	08033b05 	.word	0x08033b05
 8033a4c:	08033b05 	.word	0x08033b05
 8033a50:	08033b05 	.word	0x08033b05
 8033a54:	08033b05 	.word	0x08033b05
 8033a58:	08033b05 	.word	0x08033b05
 8033a5c:	08033ae1 	.word	0x08033ae1
 8033a60:	08033b05 	.word	0x08033b05
 8033a64:	08033b05 	.word	0x08033b05
 8033a68:	08033b05 	.word	0x08033b05
 8033a6c:	08033b05 	.word	0x08033b05
 8033a70:	08033b05 	.word	0x08033b05
 8033a74:	08033b05 	.word	0x08033b05
 8033a78:	08033b05 	.word	0x08033b05
 8033a7c:	08033af3 	.word	0x08033af3
 8033a80:	08033b05 	.word	0x08033b05
 8033a84:	08033b05 	.word	0x08033b05
 8033a88:	08033b05 	.word	0x08033b05
 8033a8c:	08033b05 	.word	0x08033b05
 8033a90:	08033b05 	.word	0x08033b05
 8033a94:	08033b05 	.word	0x08033b05
 8033a98:	08033b05 	.word	0x08033b05
 8033a9c:	08033b19 	.word	0x08033b19
 8033aa0:	08033b05 	.word	0x08033b05
 8033aa4:	08033b05 	.word	0x08033b05
 8033aa8:	08033b05 	.word	0x08033b05
 8033aac:	08033b05 	.word	0x08033b05
 8033ab0:	08033b05 	.word	0x08033b05
 8033ab4:	08033b05 	.word	0x08033b05
 8033ab8:	08033b05 	.word	0x08033b05
 8033abc:	08033b19 	.word	0x08033b19
 8033ac0:	08033b05 	.word	0x08033b05
 8033ac4:	08033b05 	.word	0x08033b05
 8033ac8:	08033b05 	.word	0x08033b05
 8033acc:	08033b05 	.word	0x08033b05
 8033ad0:	08033b05 	.word	0x08033b05
 8033ad4:	08033b05 	.word	0x08033b05
 8033ad8:	08033b05 	.word	0x08033b05
 8033adc:	08033b19 	.word	0x08033b19
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8033ae0:	687b      	ldr	r3, [r7, #4]
 8033ae2:	3304      	adds	r3, #4
 8033ae4:	2101      	movs	r1, #1
 8033ae6:	4618      	mov	r0, r3
 8033ae8:	f000 fdfa 	bl	80346e0 <RCCEx_PLL2_Config>
 8033aec:	4603      	mov	r3, r0
 8033aee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8033af0:	e013      	b.n	8033b1a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8033af2:	687b      	ldr	r3, [r7, #4]
 8033af4:	3324      	adds	r3, #36	; 0x24
 8033af6:	2101      	movs	r1, #1
 8033af8:	4618      	mov	r0, r3
 8033afa:	f000 fea3 	bl	8034844 <RCCEx_PLL3_Config>
 8033afe:	4603      	mov	r3, r0
 8033b00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8033b02:	e00a      	b.n	8033b1a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033b04:	2301      	movs	r3, #1
 8033b06:	75fb      	strb	r3, [r7, #23]
      break;
 8033b08:	e007      	b.n	8033b1a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8033b0a:	bf00      	nop
 8033b0c:	58024400 	.word	0x58024400
 8033b10:	58024800 	.word	0x58024800
 8033b14:	00ffffcf 	.word	0x00ffffcf
      break;
 8033b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033b1a:	7dfb      	ldrb	r3, [r7, #23]
 8033b1c:	2b00      	cmp	r3, #0
 8033b1e:	d109      	bne.n	8033b34 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8033b20:	4b96      	ldr	r3, [pc, #600]	; (8033d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8033b24:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8033b28:	687b      	ldr	r3, [r7, #4]
 8033b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033b2c:	4993      	ldr	r1, [pc, #588]	; (8033d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033b2e:	4313      	orrs	r3, r2
 8033b30:	654b      	str	r3, [r1, #84]	; 0x54
 8033b32:	e001      	b.n	8033b38 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033b34:	7dfb      	ldrb	r3, [r7, #23]
 8033b36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8033b38:	687b      	ldr	r3, [r7, #4]
 8033b3a:	681b      	ldr	r3, [r3, #0]
 8033b3c:	f003 0302 	and.w	r3, r3, #2
 8033b40:	2b00      	cmp	r3, #0
 8033b42:	d038      	beq.n	8033bb6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8033b44:	687b      	ldr	r3, [r7, #4]
 8033b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033b48:	2b05      	cmp	r3, #5
 8033b4a:	d821      	bhi.n	8033b90 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8033b4c:	a201      	add	r2, pc, #4	; (adr r2, 8033b54 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8033b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8033b52:	bf00      	nop
 8033b54:	08033b97 	.word	0x08033b97
 8033b58:	08033b6d 	.word	0x08033b6d
 8033b5c:	08033b7f 	.word	0x08033b7f
 8033b60:	08033b97 	.word	0x08033b97
 8033b64:	08033b97 	.word	0x08033b97
 8033b68:	08033b97 	.word	0x08033b97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8033b6c:	687b      	ldr	r3, [r7, #4]
 8033b6e:	3304      	adds	r3, #4
 8033b70:	2101      	movs	r1, #1
 8033b72:	4618      	mov	r0, r3
 8033b74:	f000 fdb4 	bl	80346e0 <RCCEx_PLL2_Config>
 8033b78:	4603      	mov	r3, r0
 8033b7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8033b7c:	e00c      	b.n	8033b98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8033b7e:	687b      	ldr	r3, [r7, #4]
 8033b80:	3324      	adds	r3, #36	; 0x24
 8033b82:	2101      	movs	r1, #1
 8033b84:	4618      	mov	r0, r3
 8033b86:	f000 fe5d 	bl	8034844 <RCCEx_PLL3_Config>
 8033b8a:	4603      	mov	r3, r0
 8033b8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8033b8e:	e003      	b.n	8033b98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033b90:	2301      	movs	r3, #1
 8033b92:	75fb      	strb	r3, [r7, #23]
      break;
 8033b94:	e000      	b.n	8033b98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8033b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033b98:	7dfb      	ldrb	r3, [r7, #23]
 8033b9a:	2b00      	cmp	r3, #0
 8033b9c:	d109      	bne.n	8033bb2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8033b9e:	4b77      	ldr	r3, [pc, #476]	; (8033d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8033ba2:	f023 0207 	bic.w	r2, r3, #7
 8033ba6:	687b      	ldr	r3, [r7, #4]
 8033ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033baa:	4974      	ldr	r1, [pc, #464]	; (8033d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033bac:	4313      	orrs	r3, r2
 8033bae:	654b      	str	r3, [r1, #84]	; 0x54
 8033bb0:	e001      	b.n	8033bb6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033bb2:	7dfb      	ldrb	r3, [r7, #23]
 8033bb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8033bb6:	687b      	ldr	r3, [r7, #4]
 8033bb8:	681b      	ldr	r3, [r3, #0]
 8033bba:	f003 0304 	and.w	r3, r3, #4
 8033bbe:	2b00      	cmp	r3, #0
 8033bc0:	d03a      	beq.n	8033c38 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8033bc2:	687b      	ldr	r3, [r7, #4]
 8033bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8033bc8:	2b05      	cmp	r3, #5
 8033bca:	d821      	bhi.n	8033c10 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8033bcc:	a201      	add	r2, pc, #4	; (adr r2, 8033bd4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8033bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8033bd2:	bf00      	nop
 8033bd4:	08033c17 	.word	0x08033c17
 8033bd8:	08033bed 	.word	0x08033bed
 8033bdc:	08033bff 	.word	0x08033bff
 8033be0:	08033c17 	.word	0x08033c17
 8033be4:	08033c17 	.word	0x08033c17
 8033be8:	08033c17 	.word	0x08033c17
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8033bec:	687b      	ldr	r3, [r7, #4]
 8033bee:	3304      	adds	r3, #4
 8033bf0:	2101      	movs	r1, #1
 8033bf2:	4618      	mov	r0, r3
 8033bf4:	f000 fd74 	bl	80346e0 <RCCEx_PLL2_Config>
 8033bf8:	4603      	mov	r3, r0
 8033bfa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8033bfc:	e00c      	b.n	8033c18 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8033bfe:	687b      	ldr	r3, [r7, #4]
 8033c00:	3324      	adds	r3, #36	; 0x24
 8033c02:	2101      	movs	r1, #1
 8033c04:	4618      	mov	r0, r3
 8033c06:	f000 fe1d 	bl	8034844 <RCCEx_PLL3_Config>
 8033c0a:	4603      	mov	r3, r0
 8033c0c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8033c0e:	e003      	b.n	8033c18 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033c10:	2301      	movs	r3, #1
 8033c12:	75fb      	strb	r3, [r7, #23]
      break;
 8033c14:	e000      	b.n	8033c18 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8033c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033c18:	7dfb      	ldrb	r3, [r7, #23]
 8033c1a:	2b00      	cmp	r3, #0
 8033c1c:	d10a      	bne.n	8033c34 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8033c1e:	4b57      	ldr	r3, [pc, #348]	; (8033d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033c22:	f023 0207 	bic.w	r2, r3, #7
 8033c26:	687b      	ldr	r3, [r7, #4]
 8033c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8033c2c:	4953      	ldr	r1, [pc, #332]	; (8033d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033c2e:	4313      	orrs	r3, r2
 8033c30:	658b      	str	r3, [r1, #88]	; 0x58
 8033c32:	e001      	b.n	8033c38 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033c34:	7dfb      	ldrb	r3, [r7, #23]
 8033c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8033c38:	687b      	ldr	r3, [r7, #4]
 8033c3a:	681b      	ldr	r3, [r3, #0]
 8033c3c:	f003 0320 	and.w	r3, r3, #32
 8033c40:	2b00      	cmp	r3, #0
 8033c42:	d04b      	beq.n	8033cdc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8033c44:	687b      	ldr	r3, [r7, #4]
 8033c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8033c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8033c4e:	d02e      	beq.n	8033cae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8033c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8033c54:	d828      	bhi.n	8033ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8033c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8033c5a:	d02a      	beq.n	8033cb2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8033c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8033c60:	d822      	bhi.n	8033ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8033c62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8033c66:	d026      	beq.n	8033cb6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8033c68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8033c6c:	d81c      	bhi.n	8033ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8033c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8033c72:	d010      	beq.n	8033c96 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8033c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8033c78:	d816      	bhi.n	8033ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8033c7a:	2b00      	cmp	r3, #0
 8033c7c:	d01d      	beq.n	8033cba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8033c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8033c82:	d111      	bne.n	8033ca8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8033c84:	687b      	ldr	r3, [r7, #4]
 8033c86:	3304      	adds	r3, #4
 8033c88:	2100      	movs	r1, #0
 8033c8a:	4618      	mov	r0, r3
 8033c8c:	f000 fd28 	bl	80346e0 <RCCEx_PLL2_Config>
 8033c90:	4603      	mov	r3, r0
 8033c92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8033c94:	e012      	b.n	8033cbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8033c96:	687b      	ldr	r3, [r7, #4]
 8033c98:	3324      	adds	r3, #36	; 0x24
 8033c9a:	2102      	movs	r1, #2
 8033c9c:	4618      	mov	r0, r3
 8033c9e:	f000 fdd1 	bl	8034844 <RCCEx_PLL3_Config>
 8033ca2:	4603      	mov	r3, r0
 8033ca4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8033ca6:	e009      	b.n	8033cbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033ca8:	2301      	movs	r3, #1
 8033caa:	75fb      	strb	r3, [r7, #23]
      break;
 8033cac:	e006      	b.n	8033cbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8033cae:	bf00      	nop
 8033cb0:	e004      	b.n	8033cbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8033cb2:	bf00      	nop
 8033cb4:	e002      	b.n	8033cbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8033cb6:	bf00      	nop
 8033cb8:	e000      	b.n	8033cbc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8033cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033cbc:	7dfb      	ldrb	r3, [r7, #23]
 8033cbe:	2b00      	cmp	r3, #0
 8033cc0:	d10a      	bne.n	8033cd8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8033cc2:	4b2e      	ldr	r3, [pc, #184]	; (8033d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8033cc6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8033cca:	687b      	ldr	r3, [r7, #4]
 8033ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8033cd0:	492a      	ldr	r1, [pc, #168]	; (8033d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033cd2:	4313      	orrs	r3, r2
 8033cd4:	654b      	str	r3, [r1, #84]	; 0x54
 8033cd6:	e001      	b.n	8033cdc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033cd8:	7dfb      	ldrb	r3, [r7, #23]
 8033cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8033cdc:	687b      	ldr	r3, [r7, #4]
 8033cde:	681b      	ldr	r3, [r3, #0]
 8033ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033ce4:	2b00      	cmp	r3, #0
 8033ce6:	d04d      	beq.n	8033d84 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8033ce8:	687b      	ldr	r3, [r7, #4]
 8033cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8033cee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8033cf2:	d02e      	beq.n	8033d52 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8033cf4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8033cf8:	d828      	bhi.n	8033d4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8033cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8033cfe:	d02a      	beq.n	8033d56 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8033d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8033d04:	d822      	bhi.n	8033d4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8033d06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8033d0a:	d026      	beq.n	8033d5a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8033d0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8033d10:	d81c      	bhi.n	8033d4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8033d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8033d16:	d010      	beq.n	8033d3a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8033d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8033d1c:	d816      	bhi.n	8033d4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8033d1e:	2b00      	cmp	r3, #0
 8033d20:	d01d      	beq.n	8033d5e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8033d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8033d26:	d111      	bne.n	8033d4c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8033d28:	687b      	ldr	r3, [r7, #4]
 8033d2a:	3304      	adds	r3, #4
 8033d2c:	2100      	movs	r1, #0
 8033d2e:	4618      	mov	r0, r3
 8033d30:	f000 fcd6 	bl	80346e0 <RCCEx_PLL2_Config>
 8033d34:	4603      	mov	r3, r0
 8033d36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8033d38:	e012      	b.n	8033d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8033d3a:	687b      	ldr	r3, [r7, #4]
 8033d3c:	3324      	adds	r3, #36	; 0x24
 8033d3e:	2102      	movs	r1, #2
 8033d40:	4618      	mov	r0, r3
 8033d42:	f000 fd7f 	bl	8034844 <RCCEx_PLL3_Config>
 8033d46:	4603      	mov	r3, r0
 8033d48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8033d4a:	e009      	b.n	8033d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033d4c:	2301      	movs	r3, #1
 8033d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8033d50:	e006      	b.n	8033d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8033d52:	bf00      	nop
 8033d54:	e004      	b.n	8033d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8033d56:	bf00      	nop
 8033d58:	e002      	b.n	8033d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8033d5a:	bf00      	nop
 8033d5c:	e000      	b.n	8033d60 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8033d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033d60:	7dfb      	ldrb	r3, [r7, #23]
 8033d62:	2b00      	cmp	r3, #0
 8033d64:	d10c      	bne.n	8033d80 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8033d66:	4b05      	ldr	r3, [pc, #20]	; (8033d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033d6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8033d6e:	687b      	ldr	r3, [r7, #4]
 8033d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8033d74:	4901      	ldr	r1, [pc, #4]	; (8033d7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8033d76:	4313      	orrs	r3, r2
 8033d78:	658b      	str	r3, [r1, #88]	; 0x58
 8033d7a:	e003      	b.n	8033d84 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8033d7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033d80:	7dfb      	ldrb	r3, [r7, #23]
 8033d82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8033d84:	687b      	ldr	r3, [r7, #4]
 8033d86:	681b      	ldr	r3, [r3, #0]
 8033d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8033d8c:	2b00      	cmp	r3, #0
 8033d8e:	d04b      	beq.n	8033e28 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8033d90:	687b      	ldr	r3, [r7, #4]
 8033d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8033d96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8033d9a:	d02e      	beq.n	8033dfa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8033d9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8033da0:	d828      	bhi.n	8033df4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8033da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8033da6:	d02a      	beq.n	8033dfe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8033da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8033dac:	d822      	bhi.n	8033df4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8033dae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8033db2:	d026      	beq.n	8033e02 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8033db4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8033db8:	d81c      	bhi.n	8033df4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8033dba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033dbe:	d010      	beq.n	8033de2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8033dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033dc4:	d816      	bhi.n	8033df4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8033dc6:	2b00      	cmp	r3, #0
 8033dc8:	d01d      	beq.n	8033e06 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8033dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033dce:	d111      	bne.n	8033df4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8033dd0:	687b      	ldr	r3, [r7, #4]
 8033dd2:	3304      	adds	r3, #4
 8033dd4:	2100      	movs	r1, #0
 8033dd6:	4618      	mov	r0, r3
 8033dd8:	f000 fc82 	bl	80346e0 <RCCEx_PLL2_Config>
 8033ddc:	4603      	mov	r3, r0
 8033dde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8033de0:	e012      	b.n	8033e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8033de2:	687b      	ldr	r3, [r7, #4]
 8033de4:	3324      	adds	r3, #36	; 0x24
 8033de6:	2102      	movs	r1, #2
 8033de8:	4618      	mov	r0, r3
 8033dea:	f000 fd2b 	bl	8034844 <RCCEx_PLL3_Config>
 8033dee:	4603      	mov	r3, r0
 8033df0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8033df2:	e009      	b.n	8033e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033df4:	2301      	movs	r3, #1
 8033df6:	75fb      	strb	r3, [r7, #23]
      break;
 8033df8:	e006      	b.n	8033e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8033dfa:	bf00      	nop
 8033dfc:	e004      	b.n	8033e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8033dfe:	bf00      	nop
 8033e00:	e002      	b.n	8033e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8033e02:	bf00      	nop
 8033e04:	e000      	b.n	8033e08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8033e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033e08:	7dfb      	ldrb	r3, [r7, #23]
 8033e0a:	2b00      	cmp	r3, #0
 8033e0c:	d10a      	bne.n	8033e24 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8033e0e:	4b9d      	ldr	r3, [pc, #628]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8033e16:	687b      	ldr	r3, [r7, #4]
 8033e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8033e1c:	4999      	ldr	r1, [pc, #612]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033e1e:	4313      	orrs	r3, r2
 8033e20:	658b      	str	r3, [r1, #88]	; 0x58
 8033e22:	e001      	b.n	8033e28 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033e24:	7dfb      	ldrb	r3, [r7, #23]
 8033e26:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8033e28:	687b      	ldr	r3, [r7, #4]
 8033e2a:	681b      	ldr	r3, [r3, #0]
 8033e2c:	f003 0308 	and.w	r3, r3, #8
 8033e30:	2b00      	cmp	r3, #0
 8033e32:	d01a      	beq.n	8033e6a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8033e34:	687b      	ldr	r3, [r7, #4]
 8033e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8033e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8033e3e:	d10a      	bne.n	8033e56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8033e40:	687b      	ldr	r3, [r7, #4]
 8033e42:	3324      	adds	r3, #36	; 0x24
 8033e44:	2102      	movs	r1, #2
 8033e46:	4618      	mov	r0, r3
 8033e48:	f000 fcfc 	bl	8034844 <RCCEx_PLL3_Config>
 8033e4c:	4603      	mov	r3, r0
 8033e4e:	2b00      	cmp	r3, #0
 8033e50:	d001      	beq.n	8033e56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8033e52:	2301      	movs	r3, #1
 8033e54:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8033e56:	4b8b      	ldr	r3, [pc, #556]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8033e5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8033e5e:	687b      	ldr	r3, [r7, #4]
 8033e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8033e64:	4987      	ldr	r1, [pc, #540]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033e66:	4313      	orrs	r3, r2
 8033e68:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8033e6a:	687b      	ldr	r3, [r7, #4]
 8033e6c:	681b      	ldr	r3, [r3, #0]
 8033e6e:	f003 0310 	and.w	r3, r3, #16
 8033e72:	2b00      	cmp	r3, #0
 8033e74:	d01a      	beq.n	8033eac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8033e76:	687b      	ldr	r3, [r7, #4]
 8033e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8033e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033e80:	d10a      	bne.n	8033e98 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8033e82:	687b      	ldr	r3, [r7, #4]
 8033e84:	3324      	adds	r3, #36	; 0x24
 8033e86:	2102      	movs	r1, #2
 8033e88:	4618      	mov	r0, r3
 8033e8a:	f000 fcdb 	bl	8034844 <RCCEx_PLL3_Config>
 8033e8e:	4603      	mov	r3, r0
 8033e90:	2b00      	cmp	r3, #0
 8033e92:	d001      	beq.n	8033e98 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8033e94:	2301      	movs	r3, #1
 8033e96:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8033e98:	4b7a      	ldr	r3, [pc, #488]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8033ea0:	687b      	ldr	r3, [r7, #4]
 8033ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8033ea6:	4977      	ldr	r1, [pc, #476]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033ea8:	4313      	orrs	r3, r2
 8033eaa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8033eac:	687b      	ldr	r3, [r7, #4]
 8033eae:	681b      	ldr	r3, [r3, #0]
 8033eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8033eb4:	2b00      	cmp	r3, #0
 8033eb6:	d034      	beq.n	8033f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8033eb8:	687b      	ldr	r3, [r7, #4]
 8033eba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8033ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8033ec2:	d01d      	beq.n	8033f00 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8033ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8033ec8:	d817      	bhi.n	8033efa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8033eca:	2b00      	cmp	r3, #0
 8033ecc:	d003      	beq.n	8033ed6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8033ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8033ed2:	d009      	beq.n	8033ee8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8033ed4:	e011      	b.n	8033efa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8033ed6:	687b      	ldr	r3, [r7, #4]
 8033ed8:	3304      	adds	r3, #4
 8033eda:	2100      	movs	r1, #0
 8033edc:	4618      	mov	r0, r3
 8033ede:	f000 fbff 	bl	80346e0 <RCCEx_PLL2_Config>
 8033ee2:	4603      	mov	r3, r0
 8033ee4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8033ee6:	e00c      	b.n	8033f02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8033ee8:	687b      	ldr	r3, [r7, #4]
 8033eea:	3324      	adds	r3, #36	; 0x24
 8033eec:	2102      	movs	r1, #2
 8033eee:	4618      	mov	r0, r3
 8033ef0:	f000 fca8 	bl	8034844 <RCCEx_PLL3_Config>
 8033ef4:	4603      	mov	r3, r0
 8033ef6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8033ef8:	e003      	b.n	8033f02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033efa:	2301      	movs	r3, #1
 8033efc:	75fb      	strb	r3, [r7, #23]
      break;
 8033efe:	e000      	b.n	8033f02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8033f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033f02:	7dfb      	ldrb	r3, [r7, #23]
 8033f04:	2b00      	cmp	r3, #0
 8033f06:	d10a      	bne.n	8033f1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8033f08:	4b5e      	ldr	r3, [pc, #376]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033f0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8033f10:	687b      	ldr	r3, [r7, #4]
 8033f12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8033f16:	495b      	ldr	r1, [pc, #364]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033f18:	4313      	orrs	r3, r2
 8033f1a:	658b      	str	r3, [r1, #88]	; 0x58
 8033f1c:	e001      	b.n	8033f22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033f1e:	7dfb      	ldrb	r3, [r7, #23]
 8033f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8033f22:	687b      	ldr	r3, [r7, #4]
 8033f24:	681b      	ldr	r3, [r3, #0]
 8033f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8033f2a:	2b00      	cmp	r3, #0
 8033f2c:	d033      	beq.n	8033f96 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8033f2e:	687b      	ldr	r3, [r7, #4]
 8033f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033f34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8033f38:	d01c      	beq.n	8033f74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8033f3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8033f3e:	d816      	bhi.n	8033f6e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8033f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8033f44:	d003      	beq.n	8033f4e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8033f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8033f4a:	d007      	beq.n	8033f5c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8033f4c:	e00f      	b.n	8033f6e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8033f4e:	4b4d      	ldr	r3, [pc, #308]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033f52:	4a4c      	ldr	r2, [pc, #304]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8033f5a:	e00c      	b.n	8033f76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8033f5c:	687b      	ldr	r3, [r7, #4]
 8033f5e:	3324      	adds	r3, #36	; 0x24
 8033f60:	2101      	movs	r1, #1
 8033f62:	4618      	mov	r0, r3
 8033f64:	f000 fc6e 	bl	8034844 <RCCEx_PLL3_Config>
 8033f68:	4603      	mov	r3, r0
 8033f6a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8033f6c:	e003      	b.n	8033f76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8033f6e:	2301      	movs	r3, #1
 8033f70:	75fb      	strb	r3, [r7, #23]
      break;
 8033f72:	e000      	b.n	8033f76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8033f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033f76:	7dfb      	ldrb	r3, [r7, #23]
 8033f78:	2b00      	cmp	r3, #0
 8033f7a:	d10a      	bne.n	8033f92 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8033f7c:	4b41      	ldr	r3, [pc, #260]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8033f80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8033f84:	687b      	ldr	r3, [r7, #4]
 8033f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033f8a:	493e      	ldr	r1, [pc, #248]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033f8c:	4313      	orrs	r3, r2
 8033f8e:	654b      	str	r3, [r1, #84]	; 0x54
 8033f90:	e001      	b.n	8033f96 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033f92:	7dfb      	ldrb	r3, [r7, #23]
 8033f94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8033f96:	687b      	ldr	r3, [r7, #4]
 8033f98:	681b      	ldr	r3, [r3, #0]
 8033f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8033f9e:	2b00      	cmp	r3, #0
 8033fa0:	d029      	beq.n	8033ff6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8033fa2:	687b      	ldr	r3, [r7, #4]
 8033fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033fa6:	2b00      	cmp	r3, #0
 8033fa8:	d003      	beq.n	8033fb2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8033faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8033fae:	d007      	beq.n	8033fc0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8033fb0:	e00f      	b.n	8033fd2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8033fb2:	4b34      	ldr	r3, [pc, #208]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033fb6:	4a33      	ldr	r2, [pc, #204]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8033fbe:	e00b      	b.n	8033fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8033fc0:	687b      	ldr	r3, [r7, #4]
 8033fc2:	3304      	adds	r3, #4
 8033fc4:	2102      	movs	r1, #2
 8033fc6:	4618      	mov	r0, r3
 8033fc8:	f000 fb8a 	bl	80346e0 <RCCEx_PLL2_Config>
 8033fcc:	4603      	mov	r3, r0
 8033fce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8033fd0:	e002      	b.n	8033fd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8033fd2:	2301      	movs	r3, #1
 8033fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8033fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8033fd8:	7dfb      	ldrb	r3, [r7, #23]
 8033fda:	2b00      	cmp	r3, #0
 8033fdc:	d109      	bne.n	8033ff2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8033fde:	4b29      	ldr	r3, [pc, #164]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033fe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8033fe6:	687b      	ldr	r3, [r7, #4]
 8033fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033fea:	4926      	ldr	r1, [pc, #152]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8033fec:	4313      	orrs	r3, r2
 8033fee:	64cb      	str	r3, [r1, #76]	; 0x4c
 8033ff0:	e001      	b.n	8033ff6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8033ff2:	7dfb      	ldrb	r3, [r7, #23]
 8033ff4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8033ff6:	687b      	ldr	r3, [r7, #4]
 8033ff8:	681b      	ldr	r3, [r3, #0]
 8033ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8033ffe:	2b00      	cmp	r3, #0
 8034000:	d00a      	beq.n	8034018 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8034002:	687b      	ldr	r3, [r7, #4]
 8034004:	3324      	adds	r3, #36	; 0x24
 8034006:	2102      	movs	r1, #2
 8034008:	4618      	mov	r0, r3
 803400a:	f000 fc1b 	bl	8034844 <RCCEx_PLL3_Config>
 803400e:	4603      	mov	r3, r0
 8034010:	2b00      	cmp	r3, #0
 8034012:	d001      	beq.n	8034018 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8034014:	2301      	movs	r3, #1
 8034016:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8034018:	687b      	ldr	r3, [r7, #4]
 803401a:	681b      	ldr	r3, [r3, #0]
 803401c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8034020:	2b00      	cmp	r3, #0
 8034022:	d033      	beq.n	803408c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8034024:	687b      	ldr	r3, [r7, #4]
 8034026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803402c:	d017      	beq.n	803405e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 803402e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8034032:	d811      	bhi.n	8034058 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8034034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8034038:	d013      	beq.n	8034062 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 803403a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803403e:	d80b      	bhi.n	8034058 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8034040:	2b00      	cmp	r3, #0
 8034042:	d010      	beq.n	8034066 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8034044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034048:	d106      	bne.n	8034058 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803404a:	4b0e      	ldr	r3, [pc, #56]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803404e:	4a0d      	ldr	r2, [pc, #52]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8034050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8034054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8034056:	e007      	b.n	8034068 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8034058:	2301      	movs	r3, #1
 803405a:	75fb      	strb	r3, [r7, #23]
      break;
 803405c:	e004      	b.n	8034068 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 803405e:	bf00      	nop
 8034060:	e002      	b.n	8034068 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8034062:	bf00      	nop
 8034064:	e000      	b.n	8034068 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8034066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8034068:	7dfb      	ldrb	r3, [r7, #23]
 803406a:	2b00      	cmp	r3, #0
 803406c:	d10c      	bne.n	8034088 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 803406e:	4b05      	ldr	r3, [pc, #20]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8034070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8034072:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8034076:	687b      	ldr	r3, [r7, #4]
 8034078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803407a:	4902      	ldr	r1, [pc, #8]	; (8034084 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803407c:	4313      	orrs	r3, r2
 803407e:	654b      	str	r3, [r1, #84]	; 0x54
 8034080:	e004      	b.n	803408c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8034082:	bf00      	nop
 8034084:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8034088:	7dfb      	ldrb	r3, [r7, #23]
 803408a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 803408c:	687b      	ldr	r3, [r7, #4]
 803408e:	681b      	ldr	r3, [r3, #0]
 8034090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8034094:	2b00      	cmp	r3, #0
 8034096:	d008      	beq.n	80340aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8034098:	4b31      	ldr	r3, [pc, #196]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803409c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80340a0:	687b      	ldr	r3, [r7, #4]
 80340a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80340a4:	492e      	ldr	r1, [pc, #184]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80340a6:	4313      	orrs	r3, r2
 80340a8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80340aa:	687b      	ldr	r3, [r7, #4]
 80340ac:	681b      	ldr	r3, [r3, #0]
 80340ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80340b2:	2b00      	cmp	r3, #0
 80340b4:	d009      	beq.n	80340ca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80340b6:	4b2a      	ldr	r3, [pc, #168]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80340b8:	691b      	ldr	r3, [r3, #16]
 80340ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80340be:	687b      	ldr	r3, [r7, #4]
 80340c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80340c4:	4926      	ldr	r1, [pc, #152]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80340c6:	4313      	orrs	r3, r2
 80340c8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80340ca:	687b      	ldr	r3, [r7, #4]
 80340cc:	681b      	ldr	r3, [r3, #0]
 80340ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80340d2:	2b00      	cmp	r3, #0
 80340d4:	d008      	beq.n	80340e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80340d6:	4b22      	ldr	r3, [pc, #136]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80340d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80340da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80340de:	687b      	ldr	r3, [r7, #4]
 80340e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80340e2:	491f      	ldr	r1, [pc, #124]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80340e4:	4313      	orrs	r3, r2
 80340e6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80340e8:	687b      	ldr	r3, [r7, #4]
 80340ea:	681b      	ldr	r3, [r3, #0]
 80340ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80340f0:	2b00      	cmp	r3, #0
 80340f2:	d00d      	beq.n	8034110 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80340f4:	4b1a      	ldr	r3, [pc, #104]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80340f6:	691b      	ldr	r3, [r3, #16]
 80340f8:	4a19      	ldr	r2, [pc, #100]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80340fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80340fe:	6113      	str	r3, [r2, #16]
 8034100:	4b17      	ldr	r3, [pc, #92]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8034102:	691a      	ldr	r2, [r3, #16]
 8034104:	687b      	ldr	r3, [r7, #4]
 8034106:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 803410a:	4915      	ldr	r1, [pc, #84]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803410c:	4313      	orrs	r3, r2
 803410e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8034110:	687b      	ldr	r3, [r7, #4]
 8034112:	681b      	ldr	r3, [r3, #0]
 8034114:	2b00      	cmp	r3, #0
 8034116:	da08      	bge.n	803412a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8034118:	4b11      	ldr	r3, [pc, #68]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803411a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803411c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8034120:	687b      	ldr	r3, [r7, #4]
 8034122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8034124:	490e      	ldr	r1, [pc, #56]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8034126:	4313      	orrs	r3, r2
 8034128:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 803412a:	687b      	ldr	r3, [r7, #4]
 803412c:	681b      	ldr	r3, [r3, #0]
 803412e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8034132:	2b00      	cmp	r3, #0
 8034134:	d009      	beq.n	803414a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8034136:	4b0a      	ldr	r3, [pc, #40]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8034138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803413a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 803413e:	687b      	ldr	r3, [r7, #4]
 8034140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8034144:	4906      	ldr	r1, [pc, #24]	; (8034160 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8034146:	4313      	orrs	r3, r2
 8034148:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 803414a:	7dbb      	ldrb	r3, [r7, #22]
 803414c:	2b00      	cmp	r3, #0
 803414e:	d101      	bne.n	8034154 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8034150:	2300      	movs	r3, #0
 8034152:	e000      	b.n	8034156 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8034154:	2301      	movs	r3, #1
}
 8034156:	4618      	mov	r0, r3
 8034158:	3718      	adds	r7, #24
 803415a:	46bd      	mov	sp, r7
 803415c:	bd80      	pop	{r7, pc}
 803415e:	bf00      	nop
 8034160:	58024400 	.word	0x58024400

08034164 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8034164:	b580      	push	{r7, lr}
 8034166:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8034168:	f7ff f85a 	bl	8033220 <HAL_RCC_GetHCLKFreq>
 803416c:	4602      	mov	r2, r0
 803416e:	4b06      	ldr	r3, [pc, #24]	; (8034188 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8034170:	6a1b      	ldr	r3, [r3, #32]
 8034172:	091b      	lsrs	r3, r3, #4
 8034174:	f003 0307 	and.w	r3, r3, #7
 8034178:	4904      	ldr	r1, [pc, #16]	; (803418c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 803417a:	5ccb      	ldrb	r3, [r1, r3]
 803417c:	f003 031f 	and.w	r3, r3, #31
 8034180:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8034184:	4618      	mov	r0, r3
 8034186:	bd80      	pop	{r7, pc}
 8034188:	58024400 	.word	0x58024400
 803418c:	08059568 	.word	0x08059568

08034190 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8034190:	b480      	push	{r7}
 8034192:	b089      	sub	sp, #36	; 0x24
 8034194:	af00      	add	r7, sp, #0
 8034196:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8034198:	4ba1      	ldr	r3, [pc, #644]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 803419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803419c:	f003 0303 	and.w	r3, r3, #3
 80341a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80341a2:	4b9f      	ldr	r3, [pc, #636]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80341a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80341a6:	0b1b      	lsrs	r3, r3, #12
 80341a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80341ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80341ae:	4b9c      	ldr	r3, [pc, #624]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80341b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80341b2:	091b      	lsrs	r3, r3, #4
 80341b4:	f003 0301 	and.w	r3, r3, #1
 80341b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80341ba:	4b99      	ldr	r3, [pc, #612]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80341bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80341be:	08db      	lsrs	r3, r3, #3
 80341c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80341c4:	693a      	ldr	r2, [r7, #16]
 80341c6:	fb02 f303 	mul.w	r3, r2, r3
 80341ca:	ee07 3a90 	vmov	s15, r3
 80341ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80341d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80341d6:	697b      	ldr	r3, [r7, #20]
 80341d8:	2b00      	cmp	r3, #0
 80341da:	f000 8111 	beq.w	8034400 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80341de:	69bb      	ldr	r3, [r7, #24]
 80341e0:	2b02      	cmp	r3, #2
 80341e2:	f000 8083 	beq.w	80342ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80341e6:	69bb      	ldr	r3, [r7, #24]
 80341e8:	2b02      	cmp	r3, #2
 80341ea:	f200 80a1 	bhi.w	8034330 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80341ee:	69bb      	ldr	r3, [r7, #24]
 80341f0:	2b00      	cmp	r3, #0
 80341f2:	d003      	beq.n	80341fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80341f4:	69bb      	ldr	r3, [r7, #24]
 80341f6:	2b01      	cmp	r3, #1
 80341f8:	d056      	beq.n	80342a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80341fa:	e099      	b.n	8034330 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80341fc:	4b88      	ldr	r3, [pc, #544]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80341fe:	681b      	ldr	r3, [r3, #0]
 8034200:	f003 0320 	and.w	r3, r3, #32
 8034204:	2b00      	cmp	r3, #0
 8034206:	d02d      	beq.n	8034264 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8034208:	4b85      	ldr	r3, [pc, #532]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 803420a:	681b      	ldr	r3, [r3, #0]
 803420c:	08db      	lsrs	r3, r3, #3
 803420e:	f003 0303 	and.w	r3, r3, #3
 8034212:	4a84      	ldr	r2, [pc, #528]	; (8034424 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8034214:	fa22 f303 	lsr.w	r3, r2, r3
 8034218:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 803421a:	68bb      	ldr	r3, [r7, #8]
 803421c:	ee07 3a90 	vmov	s15, r3
 8034220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034224:	697b      	ldr	r3, [r7, #20]
 8034226:	ee07 3a90 	vmov	s15, r3
 803422a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803422e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034232:	4b7b      	ldr	r3, [pc, #492]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8034234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803423a:	ee07 3a90 	vmov	s15, r3
 803423e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034242:	ed97 6a03 	vldr	s12, [r7, #12]
 8034246:	eddf 5a78 	vldr	s11, [pc, #480]	; 8034428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 803424a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803424e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803425a:	ee67 7a27 	vmul.f32	s15, s14, s15
 803425e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8034262:	e087      	b.n	8034374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8034264:	697b      	ldr	r3, [r7, #20]
 8034266:	ee07 3a90 	vmov	s15, r3
 803426a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803426e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 803442c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8034272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034276:	4b6a      	ldr	r3, [pc, #424]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8034278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803427a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803427e:	ee07 3a90 	vmov	s15, r3
 8034282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034286:	ed97 6a03 	vldr	s12, [r7, #12]
 803428a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8034428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 803428e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8034292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803429a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803429e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80342a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80342a6:	e065      	b.n	8034374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80342a8:	697b      	ldr	r3, [r7, #20]
 80342aa:	ee07 3a90 	vmov	s15, r3
 80342ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80342b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8034430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80342b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80342ba:	4b59      	ldr	r3, [pc, #356]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80342bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80342be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80342c2:	ee07 3a90 	vmov	s15, r3
 80342c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80342ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80342ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8034428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80342d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80342d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80342da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80342de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80342e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80342e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80342ea:	e043      	b.n	8034374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80342ec:	697b      	ldr	r3, [r7, #20]
 80342ee:	ee07 3a90 	vmov	s15, r3
 80342f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80342f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8034434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80342fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80342fe:	4b48      	ldr	r3, [pc, #288]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8034300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8034306:	ee07 3a90 	vmov	s15, r3
 803430a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803430e:	ed97 6a03 	vldr	s12, [r7, #12]
 8034312:	eddf 5a45 	vldr	s11, [pc, #276]	; 8034428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8034316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803431a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803431e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8034326:	ee67 7a27 	vmul.f32	s15, s14, s15
 803432a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803432e:	e021      	b.n	8034374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8034330:	697b      	ldr	r3, [r7, #20]
 8034332:	ee07 3a90 	vmov	s15, r3
 8034336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803433a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8034430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 803433e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034342:	4b37      	ldr	r3, [pc, #220]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8034344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803434a:	ee07 3a90 	vmov	s15, r3
 803434e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034352:	ed97 6a03 	vldr	s12, [r7, #12]
 8034356:	eddf 5a34 	vldr	s11, [pc, #208]	; 8034428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 803435a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803435e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803436a:	ee67 7a27 	vmul.f32	s15, s14, s15
 803436e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8034372:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8034374:	4b2a      	ldr	r3, [pc, #168]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8034376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034378:	0a5b      	lsrs	r3, r3, #9
 803437a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803437e:	ee07 3a90 	vmov	s15, r3
 8034382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 803438a:	ee37 7a87 	vadd.f32	s14, s15, s14
 803438e:	edd7 6a07 	vldr	s13, [r7, #28]
 8034392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8034396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 803439a:	ee17 2a90 	vmov	r2, s15
 803439e:	687b      	ldr	r3, [r7, #4]
 80343a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80343a2:	4b1f      	ldr	r3, [pc, #124]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80343a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80343a6:	0c1b      	lsrs	r3, r3, #16
 80343a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80343ac:	ee07 3a90 	vmov	s15, r3
 80343b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80343b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80343b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80343bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80343c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80343c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80343c8:	ee17 2a90 	vmov	r2, s15
 80343cc:	687b      	ldr	r3, [r7, #4]
 80343ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80343d0:	4b13      	ldr	r3, [pc, #76]	; (8034420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80343d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80343d4:	0e1b      	lsrs	r3, r3, #24
 80343d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80343da:	ee07 3a90 	vmov	s15, r3
 80343de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80343e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80343e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80343ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80343ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80343f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80343f6:	ee17 2a90 	vmov	r2, s15
 80343fa:	687b      	ldr	r3, [r7, #4]
 80343fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80343fe:	e008      	b.n	8034412 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8034400:	687b      	ldr	r3, [r7, #4]
 8034402:	2200      	movs	r2, #0
 8034404:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8034406:	687b      	ldr	r3, [r7, #4]
 8034408:	2200      	movs	r2, #0
 803440a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 803440c:	687b      	ldr	r3, [r7, #4]
 803440e:	2200      	movs	r2, #0
 8034410:	609a      	str	r2, [r3, #8]
}
 8034412:	bf00      	nop
 8034414:	3724      	adds	r7, #36	; 0x24
 8034416:	46bd      	mov	sp, r7
 8034418:	f85d 7b04 	ldr.w	r7, [sp], #4
 803441c:	4770      	bx	lr
 803441e:	bf00      	nop
 8034420:	58024400 	.word	0x58024400
 8034424:	03d09000 	.word	0x03d09000
 8034428:	46000000 	.word	0x46000000
 803442c:	4c742400 	.word	0x4c742400
 8034430:	4a742400 	.word	0x4a742400
 8034434:	4bbebc20 	.word	0x4bbebc20

08034438 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8034438:	b480      	push	{r7}
 803443a:	b089      	sub	sp, #36	; 0x24
 803443c:	af00      	add	r7, sp, #0
 803443e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8034440:	4ba1      	ldr	r3, [pc, #644]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8034442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034444:	f003 0303 	and.w	r3, r3, #3
 8034448:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 803444a:	4b9f      	ldr	r3, [pc, #636]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803444e:	0d1b      	lsrs	r3, r3, #20
 8034450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034454:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8034456:	4b9c      	ldr	r3, [pc, #624]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8034458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803445a:	0a1b      	lsrs	r3, r3, #8
 803445c:	f003 0301 	and.w	r3, r3, #1
 8034460:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8034462:	4b99      	ldr	r3, [pc, #612]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8034464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034466:	08db      	lsrs	r3, r3, #3
 8034468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 803446c:	693a      	ldr	r2, [r7, #16]
 803446e:	fb02 f303 	mul.w	r3, r2, r3
 8034472:	ee07 3a90 	vmov	s15, r3
 8034476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803447a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 803447e:	697b      	ldr	r3, [r7, #20]
 8034480:	2b00      	cmp	r3, #0
 8034482:	f000 8111 	beq.w	80346a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8034486:	69bb      	ldr	r3, [r7, #24]
 8034488:	2b02      	cmp	r3, #2
 803448a:	f000 8083 	beq.w	8034594 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 803448e:	69bb      	ldr	r3, [r7, #24]
 8034490:	2b02      	cmp	r3, #2
 8034492:	f200 80a1 	bhi.w	80345d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8034496:	69bb      	ldr	r3, [r7, #24]
 8034498:	2b00      	cmp	r3, #0
 803449a:	d003      	beq.n	80344a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 803449c:	69bb      	ldr	r3, [r7, #24]
 803449e:	2b01      	cmp	r3, #1
 80344a0:	d056      	beq.n	8034550 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80344a2:	e099      	b.n	80345d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80344a4:	4b88      	ldr	r3, [pc, #544]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80344a6:	681b      	ldr	r3, [r3, #0]
 80344a8:	f003 0320 	and.w	r3, r3, #32
 80344ac:	2b00      	cmp	r3, #0
 80344ae:	d02d      	beq.n	803450c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80344b0:	4b85      	ldr	r3, [pc, #532]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80344b2:	681b      	ldr	r3, [r3, #0]
 80344b4:	08db      	lsrs	r3, r3, #3
 80344b6:	f003 0303 	and.w	r3, r3, #3
 80344ba:	4a84      	ldr	r2, [pc, #528]	; (80346cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80344bc:	fa22 f303 	lsr.w	r3, r2, r3
 80344c0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80344c2:	68bb      	ldr	r3, [r7, #8]
 80344c4:	ee07 3a90 	vmov	s15, r3
 80344c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80344cc:	697b      	ldr	r3, [r7, #20]
 80344ce:	ee07 3a90 	vmov	s15, r3
 80344d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80344d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80344da:	4b7b      	ldr	r3, [pc, #492]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80344dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80344de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80344e2:	ee07 3a90 	vmov	s15, r3
 80344e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80344ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80344ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80346d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80344f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80344f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80344fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80344fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8034502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8034506:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 803450a:	e087      	b.n	803461c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 803450c:	697b      	ldr	r3, [r7, #20]
 803450e:	ee07 3a90 	vmov	s15, r3
 8034512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034516:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80346d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 803451a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803451e:	4b6a      	ldr	r3, [pc, #424]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8034520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8034526:	ee07 3a90 	vmov	s15, r3
 803452a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803452e:	ed97 6a03 	vldr	s12, [r7, #12]
 8034532:	eddf 5a67 	vldr	s11, [pc, #412]	; 80346d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8034536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803453a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803453e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8034546:	ee67 7a27 	vmul.f32	s15, s14, s15
 803454a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803454e:	e065      	b.n	803461c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8034550:	697b      	ldr	r3, [r7, #20]
 8034552:	ee07 3a90 	vmov	s15, r3
 8034556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803455a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80346d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 803455e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034562:	4b59      	ldr	r3, [pc, #356]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8034564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803456a:	ee07 3a90 	vmov	s15, r3
 803456e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034572:	ed97 6a03 	vldr	s12, [r7, #12]
 8034576:	eddf 5a56 	vldr	s11, [pc, #344]	; 80346d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 803457a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803457e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803458a:	ee67 7a27 	vmul.f32	s15, s14, s15
 803458e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8034592:	e043      	b.n	803461c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8034594:	697b      	ldr	r3, [r7, #20]
 8034596:	ee07 3a90 	vmov	s15, r3
 803459a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803459e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80346dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80345a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80345a6:	4b48      	ldr	r3, [pc, #288]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80345a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80345aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80345ae:	ee07 3a90 	vmov	s15, r3
 80345b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80345b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80345ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80346d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80345be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80345c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80345c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80345ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80345ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80345d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80345d6:	e021      	b.n	803461c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80345d8:	697b      	ldr	r3, [r7, #20]
 80345da:	ee07 3a90 	vmov	s15, r3
 80345de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80345e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80346d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80345e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80345ea:	4b37      	ldr	r3, [pc, #220]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80345ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80345ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80345f2:	ee07 3a90 	vmov	s15, r3
 80345f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80345fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80345fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80346d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8034602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8034606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803460a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803460e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8034612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8034616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803461a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 803461c:	4b2a      	ldr	r3, [pc, #168]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034620:	0a5b      	lsrs	r3, r3, #9
 8034622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034626:	ee07 3a90 	vmov	s15, r3
 803462a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803462e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8034632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8034636:	edd7 6a07 	vldr	s13, [r7, #28]
 803463a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 803463e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8034642:	ee17 2a90 	vmov	r2, s15
 8034646:	687b      	ldr	r3, [r7, #4]
 8034648:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 803464a:	4b1f      	ldr	r3, [pc, #124]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803464e:	0c1b      	lsrs	r3, r3, #16
 8034650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034654:	ee07 3a90 	vmov	s15, r3
 8034658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803465c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8034660:	ee37 7a87 	vadd.f32	s14, s15, s14
 8034664:	edd7 6a07 	vldr	s13, [r7, #28]
 8034668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 803466c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8034670:	ee17 2a90 	vmov	r2, s15
 8034674:	687b      	ldr	r3, [r7, #4]
 8034676:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8034678:	4b13      	ldr	r3, [pc, #76]	; (80346c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803467c:	0e1b      	lsrs	r3, r3, #24
 803467e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034682:	ee07 3a90 	vmov	s15, r3
 8034686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803468a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 803468e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8034692:	edd7 6a07 	vldr	s13, [r7, #28]
 8034696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 803469a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 803469e:	ee17 2a90 	vmov	r2, s15
 80346a2:	687b      	ldr	r3, [r7, #4]
 80346a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80346a6:	e008      	b.n	80346ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80346a8:	687b      	ldr	r3, [r7, #4]
 80346aa:	2200      	movs	r2, #0
 80346ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80346ae:	687b      	ldr	r3, [r7, #4]
 80346b0:	2200      	movs	r2, #0
 80346b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80346b4:	687b      	ldr	r3, [r7, #4]
 80346b6:	2200      	movs	r2, #0
 80346b8:	609a      	str	r2, [r3, #8]
}
 80346ba:	bf00      	nop
 80346bc:	3724      	adds	r7, #36	; 0x24
 80346be:	46bd      	mov	sp, r7
 80346c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80346c4:	4770      	bx	lr
 80346c6:	bf00      	nop
 80346c8:	58024400 	.word	0x58024400
 80346cc:	03d09000 	.word	0x03d09000
 80346d0:	46000000 	.word	0x46000000
 80346d4:	4c742400 	.word	0x4c742400
 80346d8:	4a742400 	.word	0x4a742400
 80346dc:	4bbebc20 	.word	0x4bbebc20

080346e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80346e0:	b580      	push	{r7, lr}
 80346e2:	b084      	sub	sp, #16
 80346e4:	af00      	add	r7, sp, #0
 80346e6:	6078      	str	r0, [r7, #4]
 80346e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80346ea:	2300      	movs	r3, #0
 80346ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80346ee:	4b53      	ldr	r3, [pc, #332]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80346f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80346f2:	f003 0303 	and.w	r3, r3, #3
 80346f6:	2b03      	cmp	r3, #3
 80346f8:	d101      	bne.n	80346fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80346fa:	2301      	movs	r3, #1
 80346fc:	e099      	b.n	8034832 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80346fe:	4b4f      	ldr	r3, [pc, #316]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 8034700:	681b      	ldr	r3, [r3, #0]
 8034702:	4a4e      	ldr	r2, [pc, #312]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 8034704:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8034708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803470a:	f7f7 fe43 	bl	802c394 <HAL_GetTick>
 803470e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8034710:	e008      	b.n	8034724 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8034712:	f7f7 fe3f 	bl	802c394 <HAL_GetTick>
 8034716:	4602      	mov	r2, r0
 8034718:	68bb      	ldr	r3, [r7, #8]
 803471a:	1ad3      	subs	r3, r2, r3
 803471c:	2b02      	cmp	r3, #2
 803471e:	d901      	bls.n	8034724 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8034720:	2303      	movs	r3, #3
 8034722:	e086      	b.n	8034832 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8034724:	4b45      	ldr	r3, [pc, #276]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 8034726:	681b      	ldr	r3, [r3, #0]
 8034728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803472c:	2b00      	cmp	r3, #0
 803472e:	d1f0      	bne.n	8034712 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8034730:	4b42      	ldr	r3, [pc, #264]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 8034732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034734:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8034738:	687b      	ldr	r3, [r7, #4]
 803473a:	681b      	ldr	r3, [r3, #0]
 803473c:	031b      	lsls	r3, r3, #12
 803473e:	493f      	ldr	r1, [pc, #252]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 8034740:	4313      	orrs	r3, r2
 8034742:	628b      	str	r3, [r1, #40]	; 0x28
 8034744:	687b      	ldr	r3, [r7, #4]
 8034746:	685b      	ldr	r3, [r3, #4]
 8034748:	3b01      	subs	r3, #1
 803474a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803474e:	687b      	ldr	r3, [r7, #4]
 8034750:	689b      	ldr	r3, [r3, #8]
 8034752:	3b01      	subs	r3, #1
 8034754:	025b      	lsls	r3, r3, #9
 8034756:	b29b      	uxth	r3, r3
 8034758:	431a      	orrs	r2, r3
 803475a:	687b      	ldr	r3, [r7, #4]
 803475c:	68db      	ldr	r3, [r3, #12]
 803475e:	3b01      	subs	r3, #1
 8034760:	041b      	lsls	r3, r3, #16
 8034762:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8034766:	431a      	orrs	r2, r3
 8034768:	687b      	ldr	r3, [r7, #4]
 803476a:	691b      	ldr	r3, [r3, #16]
 803476c:	3b01      	subs	r3, #1
 803476e:	061b      	lsls	r3, r3, #24
 8034770:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8034774:	4931      	ldr	r1, [pc, #196]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 8034776:	4313      	orrs	r3, r2
 8034778:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 803477a:	4b30      	ldr	r3, [pc, #192]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 803477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803477e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8034782:	687b      	ldr	r3, [r7, #4]
 8034784:	695b      	ldr	r3, [r3, #20]
 8034786:	492d      	ldr	r1, [pc, #180]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 8034788:	4313      	orrs	r3, r2
 803478a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 803478c:	4b2b      	ldr	r3, [pc, #172]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 803478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034790:	f023 0220 	bic.w	r2, r3, #32
 8034794:	687b      	ldr	r3, [r7, #4]
 8034796:	699b      	ldr	r3, [r3, #24]
 8034798:	4928      	ldr	r1, [pc, #160]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 803479a:	4313      	orrs	r3, r2
 803479c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 803479e:	4b27      	ldr	r3, [pc, #156]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80347a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80347a2:	4a26      	ldr	r2, [pc, #152]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80347a4:	f023 0310 	bic.w	r3, r3, #16
 80347a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80347aa:	4b24      	ldr	r3, [pc, #144]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80347ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80347ae:	4b24      	ldr	r3, [pc, #144]	; (8034840 <RCCEx_PLL2_Config+0x160>)
 80347b0:	4013      	ands	r3, r2
 80347b2:	687a      	ldr	r2, [r7, #4]
 80347b4:	69d2      	ldr	r2, [r2, #28]
 80347b6:	00d2      	lsls	r2, r2, #3
 80347b8:	4920      	ldr	r1, [pc, #128]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80347ba:	4313      	orrs	r3, r2
 80347bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80347be:	4b1f      	ldr	r3, [pc, #124]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80347c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80347c2:	4a1e      	ldr	r2, [pc, #120]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80347c4:	f043 0310 	orr.w	r3, r3, #16
 80347c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80347ca:	683b      	ldr	r3, [r7, #0]
 80347cc:	2b00      	cmp	r3, #0
 80347ce:	d106      	bne.n	80347de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80347d0:	4b1a      	ldr	r3, [pc, #104]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80347d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80347d4:	4a19      	ldr	r2, [pc, #100]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80347d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80347da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80347dc:	e00f      	b.n	80347fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80347de:	683b      	ldr	r3, [r7, #0]
 80347e0:	2b01      	cmp	r3, #1
 80347e2:	d106      	bne.n	80347f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80347e4:	4b15      	ldr	r3, [pc, #84]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80347e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80347e8:	4a14      	ldr	r2, [pc, #80]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80347ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80347ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80347f0:	e005      	b.n	80347fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80347f2:	4b12      	ldr	r3, [pc, #72]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80347f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80347f6:	4a11      	ldr	r2, [pc, #68]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 80347f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80347fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80347fe:	4b0f      	ldr	r3, [pc, #60]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 8034800:	681b      	ldr	r3, [r3, #0]
 8034802:	4a0e      	ldr	r2, [pc, #56]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 8034804:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8034808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803480a:	f7f7 fdc3 	bl	802c394 <HAL_GetTick>
 803480e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8034810:	e008      	b.n	8034824 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8034812:	f7f7 fdbf 	bl	802c394 <HAL_GetTick>
 8034816:	4602      	mov	r2, r0
 8034818:	68bb      	ldr	r3, [r7, #8]
 803481a:	1ad3      	subs	r3, r2, r3
 803481c:	2b02      	cmp	r3, #2
 803481e:	d901      	bls.n	8034824 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8034820:	2303      	movs	r3, #3
 8034822:	e006      	b.n	8034832 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8034824:	4b05      	ldr	r3, [pc, #20]	; (803483c <RCCEx_PLL2_Config+0x15c>)
 8034826:	681b      	ldr	r3, [r3, #0]
 8034828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803482c:	2b00      	cmp	r3, #0
 803482e:	d0f0      	beq.n	8034812 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8034830:	7bfb      	ldrb	r3, [r7, #15]
}
 8034832:	4618      	mov	r0, r3
 8034834:	3710      	adds	r7, #16
 8034836:	46bd      	mov	sp, r7
 8034838:	bd80      	pop	{r7, pc}
 803483a:	bf00      	nop
 803483c:	58024400 	.word	0x58024400
 8034840:	ffff0007 	.word	0xffff0007

08034844 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8034844:	b580      	push	{r7, lr}
 8034846:	b084      	sub	sp, #16
 8034848:	af00      	add	r7, sp, #0
 803484a:	6078      	str	r0, [r7, #4]
 803484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 803484e:	2300      	movs	r3, #0
 8034850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8034852:	4b53      	ldr	r3, [pc, #332]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034856:	f003 0303 	and.w	r3, r3, #3
 803485a:	2b03      	cmp	r3, #3
 803485c:	d101      	bne.n	8034862 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 803485e:	2301      	movs	r3, #1
 8034860:	e099      	b.n	8034996 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8034862:	4b4f      	ldr	r3, [pc, #316]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034864:	681b      	ldr	r3, [r3, #0]
 8034866:	4a4e      	ldr	r2, [pc, #312]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803486c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803486e:	f7f7 fd91 	bl	802c394 <HAL_GetTick>
 8034872:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8034874:	e008      	b.n	8034888 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8034876:	f7f7 fd8d 	bl	802c394 <HAL_GetTick>
 803487a:	4602      	mov	r2, r0
 803487c:	68bb      	ldr	r3, [r7, #8]
 803487e:	1ad3      	subs	r3, r2, r3
 8034880:	2b02      	cmp	r3, #2
 8034882:	d901      	bls.n	8034888 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8034884:	2303      	movs	r3, #3
 8034886:	e086      	b.n	8034996 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8034888:	4b45      	ldr	r3, [pc, #276]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 803488a:	681b      	ldr	r3, [r3, #0]
 803488c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8034890:	2b00      	cmp	r3, #0
 8034892:	d1f0      	bne.n	8034876 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8034894:	4b42      	ldr	r3, [pc, #264]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034898:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 803489c:	687b      	ldr	r3, [r7, #4]
 803489e:	681b      	ldr	r3, [r3, #0]
 80348a0:	051b      	lsls	r3, r3, #20
 80348a2:	493f      	ldr	r1, [pc, #252]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 80348a4:	4313      	orrs	r3, r2
 80348a6:	628b      	str	r3, [r1, #40]	; 0x28
 80348a8:	687b      	ldr	r3, [r7, #4]
 80348aa:	685b      	ldr	r3, [r3, #4]
 80348ac:	3b01      	subs	r3, #1
 80348ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80348b2:	687b      	ldr	r3, [r7, #4]
 80348b4:	689b      	ldr	r3, [r3, #8]
 80348b6:	3b01      	subs	r3, #1
 80348b8:	025b      	lsls	r3, r3, #9
 80348ba:	b29b      	uxth	r3, r3
 80348bc:	431a      	orrs	r2, r3
 80348be:	687b      	ldr	r3, [r7, #4]
 80348c0:	68db      	ldr	r3, [r3, #12]
 80348c2:	3b01      	subs	r3, #1
 80348c4:	041b      	lsls	r3, r3, #16
 80348c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80348ca:	431a      	orrs	r2, r3
 80348cc:	687b      	ldr	r3, [r7, #4]
 80348ce:	691b      	ldr	r3, [r3, #16]
 80348d0:	3b01      	subs	r3, #1
 80348d2:	061b      	lsls	r3, r3, #24
 80348d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80348d8:	4931      	ldr	r1, [pc, #196]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 80348da:	4313      	orrs	r3, r2
 80348dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80348de:	4b30      	ldr	r3, [pc, #192]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 80348e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80348e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80348e6:	687b      	ldr	r3, [r7, #4]
 80348e8:	695b      	ldr	r3, [r3, #20]
 80348ea:	492d      	ldr	r1, [pc, #180]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 80348ec:	4313      	orrs	r3, r2
 80348ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80348f0:	4b2b      	ldr	r3, [pc, #172]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 80348f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80348f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80348f8:	687b      	ldr	r3, [r7, #4]
 80348fa:	699b      	ldr	r3, [r3, #24]
 80348fc:	4928      	ldr	r1, [pc, #160]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 80348fe:	4313      	orrs	r3, r2
 8034900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8034902:	4b27      	ldr	r3, [pc, #156]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034906:	4a26      	ldr	r2, [pc, #152]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803490c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 803490e:	4b24      	ldr	r3, [pc, #144]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8034912:	4b24      	ldr	r3, [pc, #144]	; (80349a4 <RCCEx_PLL3_Config+0x160>)
 8034914:	4013      	ands	r3, r2
 8034916:	687a      	ldr	r2, [r7, #4]
 8034918:	69d2      	ldr	r2, [r2, #28]
 803491a:	00d2      	lsls	r2, r2, #3
 803491c:	4920      	ldr	r1, [pc, #128]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 803491e:	4313      	orrs	r3, r2
 8034920:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8034922:	4b1f      	ldr	r3, [pc, #124]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034926:	4a1e      	ldr	r2, [pc, #120]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803492c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 803492e:	683b      	ldr	r3, [r7, #0]
 8034930:	2b00      	cmp	r3, #0
 8034932:	d106      	bne.n	8034942 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8034934:	4b1a      	ldr	r3, [pc, #104]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034938:	4a19      	ldr	r2, [pc, #100]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 803493a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 803493e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8034940:	e00f      	b.n	8034962 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8034942:	683b      	ldr	r3, [r7, #0]
 8034944:	2b01      	cmp	r3, #1
 8034946:	d106      	bne.n	8034956 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8034948:	4b15      	ldr	r3, [pc, #84]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 803494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803494c:	4a14      	ldr	r2, [pc, #80]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 803494e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8034952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8034954:	e005      	b.n	8034962 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8034956:	4b12      	ldr	r3, [pc, #72]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803495a:	4a11      	ldr	r2, [pc, #68]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 803495c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8034960:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8034962:	4b0f      	ldr	r3, [pc, #60]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034964:	681b      	ldr	r3, [r3, #0]
 8034966:	4a0e      	ldr	r2, [pc, #56]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 8034968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803496c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803496e:	f7f7 fd11 	bl	802c394 <HAL_GetTick>
 8034972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8034974:	e008      	b.n	8034988 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8034976:	f7f7 fd0d 	bl	802c394 <HAL_GetTick>
 803497a:	4602      	mov	r2, r0
 803497c:	68bb      	ldr	r3, [r7, #8]
 803497e:	1ad3      	subs	r3, r2, r3
 8034980:	2b02      	cmp	r3, #2
 8034982:	d901      	bls.n	8034988 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8034984:	2303      	movs	r3, #3
 8034986:	e006      	b.n	8034996 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8034988:	4b05      	ldr	r3, [pc, #20]	; (80349a0 <RCCEx_PLL3_Config+0x15c>)
 803498a:	681b      	ldr	r3, [r3, #0]
 803498c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8034990:	2b00      	cmp	r3, #0
 8034992:	d0f0      	beq.n	8034976 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8034994:	7bfb      	ldrb	r3, [r7, #15]
}
 8034996:	4618      	mov	r0, r3
 8034998:	3710      	adds	r7, #16
 803499a:	46bd      	mov	sp, r7
 803499c:	bd80      	pop	{r7, pc}
 803499e:	bf00      	nop
 80349a0:	58024400 	.word	0x58024400
 80349a4:	ffff0007 	.word	0xffff0007

080349a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80349a8:	b580      	push	{r7, lr}
 80349aa:	b084      	sub	sp, #16
 80349ac:	af00      	add	r7, sp, #0
 80349ae:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80349b0:	687b      	ldr	r3, [r7, #4]
 80349b2:	2b00      	cmp	r3, #0
 80349b4:	d101      	bne.n	80349ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80349b6:	2301      	movs	r3, #1
 80349b8:	e0f1      	b.n	8034b9e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80349ba:	687b      	ldr	r3, [r7, #4]
 80349bc:	2200      	movs	r2, #0
 80349be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80349c0:	687b      	ldr	r3, [r7, #4]
 80349c2:	681b      	ldr	r3, [r3, #0]
 80349c4:	4a78      	ldr	r2, [pc, #480]	; (8034ba8 <HAL_SPI_Init+0x200>)
 80349c6:	4293      	cmp	r3, r2
 80349c8:	d00f      	beq.n	80349ea <HAL_SPI_Init+0x42>
 80349ca:	687b      	ldr	r3, [r7, #4]
 80349cc:	681b      	ldr	r3, [r3, #0]
 80349ce:	4a77      	ldr	r2, [pc, #476]	; (8034bac <HAL_SPI_Init+0x204>)
 80349d0:	4293      	cmp	r3, r2
 80349d2:	d00a      	beq.n	80349ea <HAL_SPI_Init+0x42>
 80349d4:	687b      	ldr	r3, [r7, #4]
 80349d6:	681b      	ldr	r3, [r3, #0]
 80349d8:	4a75      	ldr	r2, [pc, #468]	; (8034bb0 <HAL_SPI_Init+0x208>)
 80349da:	4293      	cmp	r3, r2
 80349dc:	d005      	beq.n	80349ea <HAL_SPI_Init+0x42>
 80349de:	687b      	ldr	r3, [r7, #4]
 80349e0:	68db      	ldr	r3, [r3, #12]
 80349e2:	2b0f      	cmp	r3, #15
 80349e4:	d901      	bls.n	80349ea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80349e6:	2301      	movs	r3, #1
 80349e8:	e0d9      	b.n	8034b9e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80349ea:	6878      	ldr	r0, [r7, #4]
 80349ec:	f001 f8ee 	bl	8035bcc <SPI_GetPacketSize>
 80349f0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80349f2:	687b      	ldr	r3, [r7, #4]
 80349f4:	681b      	ldr	r3, [r3, #0]
 80349f6:	4a6c      	ldr	r2, [pc, #432]	; (8034ba8 <HAL_SPI_Init+0x200>)
 80349f8:	4293      	cmp	r3, r2
 80349fa:	d00c      	beq.n	8034a16 <HAL_SPI_Init+0x6e>
 80349fc:	687b      	ldr	r3, [r7, #4]
 80349fe:	681b      	ldr	r3, [r3, #0]
 8034a00:	4a6a      	ldr	r2, [pc, #424]	; (8034bac <HAL_SPI_Init+0x204>)
 8034a02:	4293      	cmp	r3, r2
 8034a04:	d007      	beq.n	8034a16 <HAL_SPI_Init+0x6e>
 8034a06:	687b      	ldr	r3, [r7, #4]
 8034a08:	681b      	ldr	r3, [r3, #0]
 8034a0a:	4a69      	ldr	r2, [pc, #420]	; (8034bb0 <HAL_SPI_Init+0x208>)
 8034a0c:	4293      	cmp	r3, r2
 8034a0e:	d002      	beq.n	8034a16 <HAL_SPI_Init+0x6e>
 8034a10:	68fb      	ldr	r3, [r7, #12]
 8034a12:	2b08      	cmp	r3, #8
 8034a14:	d811      	bhi.n	8034a3a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8034a16:	687b      	ldr	r3, [r7, #4]
 8034a18:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8034a1a:	4a63      	ldr	r2, [pc, #396]	; (8034ba8 <HAL_SPI_Init+0x200>)
 8034a1c:	4293      	cmp	r3, r2
 8034a1e:	d009      	beq.n	8034a34 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8034a20:	687b      	ldr	r3, [r7, #4]
 8034a22:	681b      	ldr	r3, [r3, #0]
 8034a24:	4a61      	ldr	r2, [pc, #388]	; (8034bac <HAL_SPI_Init+0x204>)
 8034a26:	4293      	cmp	r3, r2
 8034a28:	d004      	beq.n	8034a34 <HAL_SPI_Init+0x8c>
 8034a2a:	687b      	ldr	r3, [r7, #4]
 8034a2c:	681b      	ldr	r3, [r3, #0]
 8034a2e:	4a60      	ldr	r2, [pc, #384]	; (8034bb0 <HAL_SPI_Init+0x208>)
 8034a30:	4293      	cmp	r3, r2
 8034a32:	d104      	bne.n	8034a3e <HAL_SPI_Init+0x96>
 8034a34:	68fb      	ldr	r3, [r7, #12]
 8034a36:	2b10      	cmp	r3, #16
 8034a38:	d901      	bls.n	8034a3e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8034a3a:	2301      	movs	r3, #1
 8034a3c:	e0af      	b.n	8034b9e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8034a3e:	687b      	ldr	r3, [r7, #4]
 8034a40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034a44:	b2db      	uxtb	r3, r3
 8034a46:	2b00      	cmp	r3, #0
 8034a48:	d106      	bne.n	8034a58 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8034a4a:	687b      	ldr	r3, [r7, #4]
 8034a4c:	2200      	movs	r2, #0
 8034a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8034a52:	6878      	ldr	r0, [r7, #4]
 8034a54:	f7f6 fc46 	bl	802b2e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8034a58:	687b      	ldr	r3, [r7, #4]
 8034a5a:	2202      	movs	r2, #2
 8034a5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8034a60:	687b      	ldr	r3, [r7, #4]
 8034a62:	681b      	ldr	r3, [r3, #0]
 8034a64:	681a      	ldr	r2, [r3, #0]
 8034a66:	687b      	ldr	r3, [r7, #4]
 8034a68:	681b      	ldr	r3, [r3, #0]
 8034a6a:	f022 0201 	bic.w	r2, r2, #1
 8034a6e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8034a70:	687b      	ldr	r3, [r7, #4]
 8034a72:	681b      	ldr	r3, [r3, #0]
 8034a74:	689b      	ldr	r3, [r3, #8]
 8034a76:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8034a7a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8034a7c:	687b      	ldr	r3, [r7, #4]
 8034a7e:	699b      	ldr	r3, [r3, #24]
 8034a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8034a84:	d119      	bne.n	8034aba <HAL_SPI_Init+0x112>
 8034a86:	687b      	ldr	r3, [r7, #4]
 8034a88:	685b      	ldr	r3, [r3, #4]
 8034a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034a8e:	d103      	bne.n	8034a98 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8034a90:	687b      	ldr	r3, [r7, #4]
 8034a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8034a94:	2b00      	cmp	r3, #0
 8034a96:	d008      	beq.n	8034aaa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8034a98:	687b      	ldr	r3, [r7, #4]
 8034a9a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8034a9c:	2b00      	cmp	r3, #0
 8034a9e:	d10c      	bne.n	8034aba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8034aa0:	687b      	ldr	r3, [r7, #4]
 8034aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8034aa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8034aa8:	d107      	bne.n	8034aba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8034aaa:	687b      	ldr	r3, [r7, #4]
 8034aac:	681b      	ldr	r3, [r3, #0]
 8034aae:	681a      	ldr	r2, [r3, #0]
 8034ab0:	687b      	ldr	r3, [r7, #4]
 8034ab2:	681b      	ldr	r3, [r3, #0]
 8034ab4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8034ab8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8034aba:	687b      	ldr	r3, [r7, #4]
 8034abc:	69da      	ldr	r2, [r3, #28]
 8034abe:	687b      	ldr	r3, [r7, #4]
 8034ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034ac2:	431a      	orrs	r2, r3
 8034ac4:	68bb      	ldr	r3, [r7, #8]
 8034ac6:	431a      	orrs	r2, r3
 8034ac8:	687b      	ldr	r3, [r7, #4]
 8034aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8034acc:	ea42 0103 	orr.w	r1, r2, r3
 8034ad0:	687b      	ldr	r3, [r7, #4]
 8034ad2:	68da      	ldr	r2, [r3, #12]
 8034ad4:	687b      	ldr	r3, [r7, #4]
 8034ad6:	681b      	ldr	r3, [r3, #0]
 8034ad8:	430a      	orrs	r2, r1
 8034ada:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8034adc:	687b      	ldr	r3, [r7, #4]
 8034ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8034ae0:	687b      	ldr	r3, [r7, #4]
 8034ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034ae4:	431a      	orrs	r2, r3
 8034ae6:	687b      	ldr	r3, [r7, #4]
 8034ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034aea:	431a      	orrs	r2, r3
 8034aec:	687b      	ldr	r3, [r7, #4]
 8034aee:	699b      	ldr	r3, [r3, #24]
 8034af0:	431a      	orrs	r2, r3
 8034af2:	687b      	ldr	r3, [r7, #4]
 8034af4:	691b      	ldr	r3, [r3, #16]
 8034af6:	431a      	orrs	r2, r3
 8034af8:	687b      	ldr	r3, [r7, #4]
 8034afa:	695b      	ldr	r3, [r3, #20]
 8034afc:	431a      	orrs	r2, r3
 8034afe:	687b      	ldr	r3, [r7, #4]
 8034b00:	6a1b      	ldr	r3, [r3, #32]
 8034b02:	431a      	orrs	r2, r3
 8034b04:	687b      	ldr	r3, [r7, #4]
 8034b06:	685b      	ldr	r3, [r3, #4]
 8034b08:	431a      	orrs	r2, r3
 8034b0a:	687b      	ldr	r3, [r7, #4]
 8034b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8034b0e:	431a      	orrs	r2, r3
 8034b10:	687b      	ldr	r3, [r7, #4]
 8034b12:	689b      	ldr	r3, [r3, #8]
 8034b14:	431a      	orrs	r2, r3
 8034b16:	687b      	ldr	r3, [r7, #4]
 8034b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8034b1a:	ea42 0103 	orr.w	r1, r2, r3
 8034b1e:	687b      	ldr	r3, [r7, #4]
 8034b20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8034b22:	687b      	ldr	r3, [r7, #4]
 8034b24:	681b      	ldr	r3, [r3, #0]
 8034b26:	430a      	orrs	r2, r1
 8034b28:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8034b2a:	687b      	ldr	r3, [r7, #4]
 8034b2c:	685b      	ldr	r3, [r3, #4]
 8034b2e:	2b00      	cmp	r3, #0
 8034b30:	d113      	bne.n	8034b5a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8034b32:	687b      	ldr	r3, [r7, #4]
 8034b34:	681b      	ldr	r3, [r3, #0]
 8034b36:	689b      	ldr	r3, [r3, #8]
 8034b38:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8034b3c:	687b      	ldr	r3, [r7, #4]
 8034b3e:	681b      	ldr	r3, [r3, #0]
 8034b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8034b44:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8034b46:	687b      	ldr	r3, [r7, #4]
 8034b48:	681b      	ldr	r3, [r3, #0]
 8034b4a:	689b      	ldr	r3, [r3, #8]
 8034b4c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8034b50:	687b      	ldr	r3, [r7, #4]
 8034b52:	681b      	ldr	r3, [r3, #0]
 8034b54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8034b58:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8034b5a:	687b      	ldr	r3, [r7, #4]
 8034b5c:	681b      	ldr	r3, [r3, #0]
 8034b5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8034b60:	687b      	ldr	r3, [r7, #4]
 8034b62:	681b      	ldr	r3, [r3, #0]
 8034b64:	f022 0201 	bic.w	r2, r2, #1
 8034b68:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8034b6a:	687b      	ldr	r3, [r7, #4]
 8034b6c:	685b      	ldr	r3, [r3, #4]
 8034b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8034b72:	2b00      	cmp	r3, #0
 8034b74:	d00a      	beq.n	8034b8c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8034b76:	687b      	ldr	r3, [r7, #4]
 8034b78:	681b      	ldr	r3, [r3, #0]
 8034b7a:	68db      	ldr	r3, [r3, #12]
 8034b7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8034b80:	687b      	ldr	r3, [r7, #4]
 8034b82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8034b84:	687b      	ldr	r3, [r7, #4]
 8034b86:	681b      	ldr	r3, [r3, #0]
 8034b88:	430a      	orrs	r2, r1
 8034b8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8034b8c:	687b      	ldr	r3, [r7, #4]
 8034b8e:	2200      	movs	r2, #0
 8034b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8034b94:	687b      	ldr	r3, [r7, #4]
 8034b96:	2201      	movs	r2, #1
 8034b98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8034b9c:	2300      	movs	r3, #0
}
 8034b9e:	4618      	mov	r0, r3
 8034ba0:	3710      	adds	r7, #16
 8034ba2:	46bd      	mov	sp, r7
 8034ba4:	bd80      	pop	{r7, pc}
 8034ba6:	bf00      	nop
 8034ba8:	40013000 	.word	0x40013000
 8034bac:	40003800 	.word	0x40003800
 8034bb0:	40003c00 	.word	0x40003c00

08034bb4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8034bb4:	b580      	push	{r7, lr}
 8034bb6:	b086      	sub	sp, #24
 8034bb8:	af00      	add	r7, sp, #0
 8034bba:	60f8      	str	r0, [r7, #12]
 8034bbc:	60b9      	str	r1, [r7, #8]
 8034bbe:	4613      	mov	r3, r2
 8034bc0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8034bc2:	2300      	movs	r3, #0
 8034bc4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8034bc6:	68fb      	ldr	r3, [r7, #12]
 8034bc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8034bcc:	2b01      	cmp	r3, #1
 8034bce:	d101      	bne.n	8034bd4 <HAL_SPI_Transmit_DMA+0x20>
 8034bd0:	2302      	movs	r3, #2
 8034bd2:	e12c      	b.n	8034e2e <HAL_SPI_Transmit_DMA+0x27a>
 8034bd4:	68fb      	ldr	r3, [r7, #12]
 8034bd6:	2201      	movs	r2, #1
 8034bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8034bdc:	68fb      	ldr	r3, [r7, #12]
 8034bde:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034be2:	b2db      	uxtb	r3, r3
 8034be4:	2b01      	cmp	r3, #1
 8034be6:	d007      	beq.n	8034bf8 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8034be8:	2302      	movs	r3, #2
 8034bea:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034bec:	68fb      	ldr	r3, [r7, #12]
 8034bee:	2200      	movs	r2, #0
 8034bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034bf4:	7dfb      	ldrb	r3, [r7, #23]
 8034bf6:	e11a      	b.n	8034e2e <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8034bf8:	68bb      	ldr	r3, [r7, #8]
 8034bfa:	2b00      	cmp	r3, #0
 8034bfc:	d002      	beq.n	8034c04 <HAL_SPI_Transmit_DMA+0x50>
 8034bfe:	88fb      	ldrh	r3, [r7, #6]
 8034c00:	2b00      	cmp	r3, #0
 8034c02:	d107      	bne.n	8034c14 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8034c04:	2301      	movs	r3, #1
 8034c06:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034c08:	68fb      	ldr	r3, [r7, #12]
 8034c0a:	2200      	movs	r2, #0
 8034c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034c10:	7dfb      	ldrb	r3, [r7, #23]
 8034c12:	e10c      	b.n	8034e2e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8034c14:	68fb      	ldr	r3, [r7, #12]
 8034c16:	2203      	movs	r2, #3
 8034c18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8034c1c:	68fb      	ldr	r3, [r7, #12]
 8034c1e:	2200      	movs	r2, #0
 8034c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8034c24:	68fb      	ldr	r3, [r7, #12]
 8034c26:	68ba      	ldr	r2, [r7, #8]
 8034c28:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8034c2a:	68fb      	ldr	r3, [r7, #12]
 8034c2c:	88fa      	ldrh	r2, [r7, #6]
 8034c2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8034c32:	68fb      	ldr	r3, [r7, #12]
 8034c34:	88fa      	ldrh	r2, [r7, #6]
 8034c36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8034c3a:	68fb      	ldr	r3, [r7, #12]
 8034c3c:	2200      	movs	r2, #0
 8034c3e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8034c40:	68fb      	ldr	r3, [r7, #12]
 8034c42:	2200      	movs	r2, #0
 8034c44:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8034c46:	68fb      	ldr	r3, [r7, #12]
 8034c48:	2200      	movs	r2, #0
 8034c4a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8034c4c:	68fb      	ldr	r3, [r7, #12]
 8034c4e:	2200      	movs	r2, #0
 8034c50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8034c54:	68fb      	ldr	r3, [r7, #12]
 8034c56:	2200      	movs	r2, #0
 8034c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8034c5c:	68fb      	ldr	r3, [r7, #12]
 8034c5e:	689b      	ldr	r3, [r3, #8]
 8034c60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8034c64:	d107      	bne.n	8034c76 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8034c66:	68fb      	ldr	r3, [r7, #12]
 8034c68:	681b      	ldr	r3, [r3, #0]
 8034c6a:	681a      	ldr	r2, [r3, #0]
 8034c6c:	68fb      	ldr	r3, [r7, #12]
 8034c6e:	681b      	ldr	r3, [r3, #0]
 8034c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8034c74:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8034c76:	68fb      	ldr	r3, [r7, #12]
 8034c78:	68db      	ldr	r3, [r3, #12]
 8034c7a:	2b0f      	cmp	r3, #15
 8034c7c:	d905      	bls.n	8034c8a <HAL_SPI_Transmit_DMA+0xd6>
 8034c7e:	68fb      	ldr	r3, [r7, #12]
 8034c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034c82:	699b      	ldr	r3, [r3, #24]
 8034c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034c88:	d10f      	bne.n	8034caa <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034c8a:	68fb      	ldr	r3, [r7, #12]
 8034c8c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8034c8e:	2b07      	cmp	r3, #7
 8034c90:	d913      	bls.n	8034cba <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034c92:	68fb      	ldr	r3, [r7, #12]
 8034c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034c96:	699b      	ldr	r3, [r3, #24]
 8034c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034c9c:	d00d      	beq.n	8034cba <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8034c9e:	68fb      	ldr	r3, [r7, #12]
 8034ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034ca2:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034ca8:	d007      	beq.n	8034cba <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8034caa:	2301      	movs	r3, #1
 8034cac:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034cae:	68fb      	ldr	r3, [r7, #12]
 8034cb0:	2200      	movs	r2, #0
 8034cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034cb6:	7dfb      	ldrb	r3, [r7, #23]
 8034cb8:	e0b9      	b.n	8034e2e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8034cba:	68fb      	ldr	r3, [r7, #12]
 8034cbc:	68db      	ldr	r3, [r3, #12]
 8034cbe:	2b07      	cmp	r3, #7
 8034cc0:	d820      	bhi.n	8034d04 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8034cc2:	68fb      	ldr	r3, [r7, #12]
 8034cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034cc6:	699b      	ldr	r3, [r3, #24]
 8034cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034ccc:	d109      	bne.n	8034ce2 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8034cce:	68fb      	ldr	r3, [r7, #12]
 8034cd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8034cd4:	b29b      	uxth	r3, r3
 8034cd6:	3301      	adds	r3, #1
 8034cd8:	105b      	asrs	r3, r3, #1
 8034cda:	b29a      	uxth	r2, r3
 8034cdc:	68fb      	ldr	r3, [r7, #12]
 8034cde:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8034ce2:	68fb      	ldr	r3, [r7, #12]
 8034ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034ce6:	699b      	ldr	r3, [r3, #24]
 8034ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034cec:	d11e      	bne.n	8034d2c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8034cee:	68fb      	ldr	r3, [r7, #12]
 8034cf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8034cf4:	b29b      	uxth	r3, r3
 8034cf6:	3303      	adds	r3, #3
 8034cf8:	109b      	asrs	r3, r3, #2
 8034cfa:	b29a      	uxth	r2, r3
 8034cfc:	68fb      	ldr	r3, [r7, #12]
 8034cfe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8034d02:	e013      	b.n	8034d2c <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8034d04:	68fb      	ldr	r3, [r7, #12]
 8034d06:	68db      	ldr	r3, [r3, #12]
 8034d08:	2b0f      	cmp	r3, #15
 8034d0a:	d80f      	bhi.n	8034d2c <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8034d0c:	68fb      	ldr	r3, [r7, #12]
 8034d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034d10:	699b      	ldr	r3, [r3, #24]
 8034d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034d16:	d109      	bne.n	8034d2c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8034d18:	68fb      	ldr	r3, [r7, #12]
 8034d1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8034d1e:	b29b      	uxth	r3, r3
 8034d20:	3301      	adds	r3, #1
 8034d22:	105b      	asrs	r3, r3, #1
 8034d24:	b29a      	uxth	r2, r3
 8034d26:	68fb      	ldr	r3, [r7, #12]
 8034d28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8034d2c:	68fb      	ldr	r3, [r7, #12]
 8034d2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034d30:	4a41      	ldr	r2, [pc, #260]	; (8034e38 <HAL_SPI_Transmit_DMA+0x284>)
 8034d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8034d34:	68fb      	ldr	r3, [r7, #12]
 8034d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034d38:	4a40      	ldr	r2, [pc, #256]	; (8034e3c <HAL_SPI_Transmit_DMA+0x288>)
 8034d3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8034d3c:	68fb      	ldr	r3, [r7, #12]
 8034d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034d40:	4a3f      	ldr	r2, [pc, #252]	; (8034e40 <HAL_SPI_Transmit_DMA+0x28c>)
 8034d42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8034d44:	68fb      	ldr	r3, [r7, #12]
 8034d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034d48:	2200      	movs	r2, #0
 8034d4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8034d4c:	68fb      	ldr	r3, [r7, #12]
 8034d4e:	681b      	ldr	r3, [r3, #0]
 8034d50:	689a      	ldr	r2, [r3, #8]
 8034d52:	68fb      	ldr	r3, [r7, #12]
 8034d54:	681b      	ldr	r3, [r3, #0]
 8034d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8034d5a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8034d5c:	68fb      	ldr	r3, [r7, #12]
 8034d5e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8034d60:	68fb      	ldr	r3, [r7, #12]
 8034d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8034d64:	4619      	mov	r1, r3
 8034d66:	68fb      	ldr	r3, [r7, #12]
 8034d68:	681b      	ldr	r3, [r3, #0]
 8034d6a:	3320      	adds	r3, #32
 8034d6c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8034d6e:	68fb      	ldr	r3, [r7, #12]
 8034d70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8034d74:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8034d76:	f7f8 fb65 	bl	802d444 <HAL_DMA_Start_IT>
 8034d7a:	4603      	mov	r3, r0
 8034d7c:	2b00      	cmp	r3, #0
 8034d7e:	d013      	beq.n	8034da8 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8034d80:	68fb      	ldr	r3, [r7, #12]
 8034d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034d86:	f043 0210 	orr.w	r2, r3, #16
 8034d8a:	68fb      	ldr	r3, [r7, #12]
 8034d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8034d90:	68fb      	ldr	r3, [r7, #12]
 8034d92:	2200      	movs	r2, #0
 8034d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8034d98:	68fb      	ldr	r3, [r7, #12]
 8034d9a:	2201      	movs	r2, #1
 8034d9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8034da0:	2301      	movs	r3, #1
 8034da2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8034da4:	7dfb      	ldrb	r3, [r7, #23]
 8034da6:	e042      	b.n	8034e2e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8034da8:	68fb      	ldr	r3, [r7, #12]
 8034daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8034dac:	69db      	ldr	r3, [r3, #28]
 8034dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034db2:	d108      	bne.n	8034dc6 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8034db4:	68fb      	ldr	r3, [r7, #12]
 8034db6:	681b      	ldr	r3, [r3, #0]
 8034db8:	6859      	ldr	r1, [r3, #4]
 8034dba:	68fb      	ldr	r3, [r7, #12]
 8034dbc:	681a      	ldr	r2, [r3, #0]
 8034dbe:	4b21      	ldr	r3, [pc, #132]	; (8034e44 <HAL_SPI_Transmit_DMA+0x290>)
 8034dc0:	400b      	ands	r3, r1
 8034dc2:	6053      	str	r3, [r2, #4]
 8034dc4:	e009      	b.n	8034dda <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8034dc6:	68fb      	ldr	r3, [r7, #12]
 8034dc8:	681b      	ldr	r3, [r3, #0]
 8034dca:	685a      	ldr	r2, [r3, #4]
 8034dcc:	4b1d      	ldr	r3, [pc, #116]	; (8034e44 <HAL_SPI_Transmit_DMA+0x290>)
 8034dce:	4013      	ands	r3, r2
 8034dd0:	88f9      	ldrh	r1, [r7, #6]
 8034dd2:	68fa      	ldr	r2, [r7, #12]
 8034dd4:	6812      	ldr	r2, [r2, #0]
 8034dd6:	430b      	orrs	r3, r1
 8034dd8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8034dda:	68fb      	ldr	r3, [r7, #12]
 8034ddc:	681b      	ldr	r3, [r3, #0]
 8034dde:	689a      	ldr	r2, [r3, #8]
 8034de0:	68fb      	ldr	r3, [r7, #12]
 8034de2:	681b      	ldr	r3, [r3, #0]
 8034de4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8034de8:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8034dea:	68fb      	ldr	r3, [r7, #12]
 8034dec:	681b      	ldr	r3, [r3, #0]
 8034dee:	691a      	ldr	r2, [r3, #16]
 8034df0:	68fb      	ldr	r3, [r7, #12]
 8034df2:	681b      	ldr	r3, [r3, #0]
 8034df4:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8034df8:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8034dfa:	68fb      	ldr	r3, [r7, #12]
 8034dfc:	681b      	ldr	r3, [r3, #0]
 8034dfe:	681a      	ldr	r2, [r3, #0]
 8034e00:	68fb      	ldr	r3, [r7, #12]
 8034e02:	681b      	ldr	r3, [r3, #0]
 8034e04:	f042 0201 	orr.w	r2, r2, #1
 8034e08:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8034e0a:	68fb      	ldr	r3, [r7, #12]
 8034e0c:	685b      	ldr	r3, [r3, #4]
 8034e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034e12:	d107      	bne.n	8034e24 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8034e14:	68fb      	ldr	r3, [r7, #12]
 8034e16:	681b      	ldr	r3, [r3, #0]
 8034e18:	681a      	ldr	r2, [r3, #0]
 8034e1a:	68fb      	ldr	r3, [r7, #12]
 8034e1c:	681b      	ldr	r3, [r3, #0]
 8034e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8034e22:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8034e24:	68fb      	ldr	r3, [r7, #12]
 8034e26:	2200      	movs	r2, #0
 8034e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8034e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8034e2e:	4618      	mov	r0, r3
 8034e30:	3718      	adds	r7, #24
 8034e32:	46bd      	mov	sp, r7
 8034e34:	bd80      	pop	{r7, pc}
 8034e36:	bf00      	nop
 8034e38:	080359bf 	.word	0x080359bf
 8034e3c:	080358ed 	.word	0x080358ed
 8034e40:	08035a13 	.word	0x08035a13
 8034e44:	ffff0000 	.word	0xffff0000

08034e48 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8034e48:	b580      	push	{r7, lr}
 8034e4a:	b086      	sub	sp, #24
 8034e4c:	af00      	add	r7, sp, #0
 8034e4e:	60f8      	str	r0, [r7, #12]
 8034e50:	60b9      	str	r1, [r7, #8]
 8034e52:	4613      	mov	r3, r2
 8034e54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8034e56:	2300      	movs	r3, #0
 8034e58:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8034e5a:	68fb      	ldr	r3, [r7, #12]
 8034e5c:	689b      	ldr	r3, [r3, #8]
 8034e5e:	2b00      	cmp	r3, #0
 8034e60:	d110      	bne.n	8034e84 <HAL_SPI_Receive_DMA+0x3c>
 8034e62:	68fb      	ldr	r3, [r7, #12]
 8034e64:	685b      	ldr	r3, [r3, #4]
 8034e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8034e6a:	d10b      	bne.n	8034e84 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8034e6c:	68fb      	ldr	r3, [r7, #12]
 8034e6e:	2204      	movs	r2, #4
 8034e70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8034e74:	88fb      	ldrh	r3, [r7, #6]
 8034e76:	68ba      	ldr	r2, [r7, #8]
 8034e78:	68b9      	ldr	r1, [r7, #8]
 8034e7a:	68f8      	ldr	r0, [r7, #12]
 8034e7c:	f000 f940 	bl	8035100 <HAL_SPI_TransmitReceive_DMA>
 8034e80:	4603      	mov	r3, r0
 8034e82:	e130      	b.n	80350e6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8034e84:	68fb      	ldr	r3, [r7, #12]
 8034e86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8034e8a:	2b01      	cmp	r3, #1
 8034e8c:	d101      	bne.n	8034e92 <HAL_SPI_Receive_DMA+0x4a>
 8034e8e:	2302      	movs	r3, #2
 8034e90:	e129      	b.n	80350e6 <HAL_SPI_Receive_DMA+0x29e>
 8034e92:	68fb      	ldr	r3, [r7, #12]
 8034e94:	2201      	movs	r2, #1
 8034e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8034e9a:	68fb      	ldr	r3, [r7, #12]
 8034e9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034ea0:	b2db      	uxtb	r3, r3
 8034ea2:	2b01      	cmp	r3, #1
 8034ea4:	d007      	beq.n	8034eb6 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 8034ea6:	2302      	movs	r3, #2
 8034ea8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034eaa:	68fb      	ldr	r3, [r7, #12]
 8034eac:	2200      	movs	r2, #0
 8034eae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034eb2:	7dfb      	ldrb	r3, [r7, #23]
 8034eb4:	e117      	b.n	80350e6 <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8034eb6:	68bb      	ldr	r3, [r7, #8]
 8034eb8:	2b00      	cmp	r3, #0
 8034eba:	d002      	beq.n	8034ec2 <HAL_SPI_Receive_DMA+0x7a>
 8034ebc:	88fb      	ldrh	r3, [r7, #6]
 8034ebe:	2b00      	cmp	r3, #0
 8034ec0:	d107      	bne.n	8034ed2 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 8034ec2:	2301      	movs	r3, #1
 8034ec4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034ec6:	68fb      	ldr	r3, [r7, #12]
 8034ec8:	2200      	movs	r2, #0
 8034eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034ece:	7dfb      	ldrb	r3, [r7, #23]
 8034ed0:	e109      	b.n	80350e6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8034ed2:	68fb      	ldr	r3, [r7, #12]
 8034ed4:	2204      	movs	r2, #4
 8034ed6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8034eda:	68fb      	ldr	r3, [r7, #12]
 8034edc:	2200      	movs	r2, #0
 8034ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8034ee2:	68fb      	ldr	r3, [r7, #12]
 8034ee4:	68ba      	ldr	r2, [r7, #8]
 8034ee6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8034ee8:	68fb      	ldr	r3, [r7, #12]
 8034eea:	88fa      	ldrh	r2, [r7, #6]
 8034eec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8034ef0:	68fb      	ldr	r3, [r7, #12]
 8034ef2:	88fa      	ldrh	r2, [r7, #6]
 8034ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8034ef8:	68fb      	ldr	r3, [r7, #12]
 8034efa:	2200      	movs	r2, #0
 8034efc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8034efe:	68fb      	ldr	r3, [r7, #12]
 8034f00:	2200      	movs	r2, #0
 8034f02:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8034f04:	68fb      	ldr	r3, [r7, #12]
 8034f06:	2200      	movs	r2, #0
 8034f08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8034f0c:	68fb      	ldr	r3, [r7, #12]
 8034f0e:	2200      	movs	r2, #0
 8034f10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8034f14:	68fb      	ldr	r3, [r7, #12]
 8034f16:	689b      	ldr	r3, [r3, #8]
 8034f18:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8034f1c:	d107      	bne.n	8034f2e <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8034f1e:	68fb      	ldr	r3, [r7, #12]
 8034f20:	681b      	ldr	r3, [r3, #0]
 8034f22:	681a      	ldr	r2, [r3, #0]
 8034f24:	68fb      	ldr	r3, [r7, #12]
 8034f26:	681b      	ldr	r3, [r3, #0]
 8034f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8034f2c:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8034f2e:	68fb      	ldr	r3, [r7, #12]
 8034f30:	68db      	ldr	r3, [r3, #12]
 8034f32:	2b0f      	cmp	r3, #15
 8034f34:	d905      	bls.n	8034f42 <HAL_SPI_Receive_DMA+0xfa>
 8034f36:	68fb      	ldr	r3, [r7, #12]
 8034f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034f3a:	699b      	ldr	r3, [r3, #24]
 8034f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034f40:	d10f      	bne.n	8034f62 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034f42:	68fb      	ldr	r3, [r7, #12]
 8034f44:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8034f46:	2b07      	cmp	r3, #7
 8034f48:	d913      	bls.n	8034f72 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034f4a:	68fb      	ldr	r3, [r7, #12]
 8034f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034f4e:	699b      	ldr	r3, [r3, #24]
 8034f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034f54:	d00d      	beq.n	8034f72 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8034f56:	68fb      	ldr	r3, [r7, #12]
 8034f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034f5a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8034f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034f60:	d007      	beq.n	8034f72 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8034f62:	2301      	movs	r3, #1
 8034f64:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8034f66:	68fb      	ldr	r3, [r7, #12]
 8034f68:	2200      	movs	r2, #0
 8034f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8034f6e:	7dfb      	ldrb	r3, [r7, #23]
 8034f70:	e0b9      	b.n	80350e6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8034f72:	68fb      	ldr	r3, [r7, #12]
 8034f74:	681b      	ldr	r3, [r3, #0]
 8034f76:	689a      	ldr	r2, [r3, #8]
 8034f78:	68fb      	ldr	r3, [r7, #12]
 8034f7a:	681b      	ldr	r3, [r3, #0]
 8034f7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8034f80:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8034f82:	68fb      	ldr	r3, [r7, #12]
 8034f84:	68db      	ldr	r3, [r3, #12]
 8034f86:	2b07      	cmp	r3, #7
 8034f88:	d820      	bhi.n	8034fcc <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8034f8a:	68fb      	ldr	r3, [r7, #12]
 8034f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034f8e:	699b      	ldr	r3, [r3, #24]
 8034f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034f94:	d109      	bne.n	8034faa <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8034f96:	68fb      	ldr	r3, [r7, #12]
 8034f98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8034f9c:	b29b      	uxth	r3, r3
 8034f9e:	3301      	adds	r3, #1
 8034fa0:	105b      	asrs	r3, r3, #1
 8034fa2:	b29a      	uxth	r2, r3
 8034fa4:	68fb      	ldr	r3, [r7, #12]
 8034fa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8034faa:	68fb      	ldr	r3, [r7, #12]
 8034fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034fae:	699b      	ldr	r3, [r3, #24]
 8034fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034fb4:	d11e      	bne.n	8034ff4 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8034fb6:	68fb      	ldr	r3, [r7, #12]
 8034fb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8034fbc:	b29b      	uxth	r3, r3
 8034fbe:	3303      	adds	r3, #3
 8034fc0:	109b      	asrs	r3, r3, #2
 8034fc2:	b29a      	uxth	r2, r3
 8034fc4:	68fb      	ldr	r3, [r7, #12]
 8034fc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8034fca:	e013      	b.n	8034ff4 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8034fcc:	68fb      	ldr	r3, [r7, #12]
 8034fce:	68db      	ldr	r3, [r3, #12]
 8034fd0:	2b0f      	cmp	r3, #15
 8034fd2:	d80f      	bhi.n	8034ff4 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8034fd4:	68fb      	ldr	r3, [r7, #12]
 8034fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034fd8:	699b      	ldr	r3, [r3, #24]
 8034fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8034fde:	d109      	bne.n	8034ff4 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8034fe0:	68fb      	ldr	r3, [r7, #12]
 8034fe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8034fe6:	b29b      	uxth	r3, r3
 8034fe8:	3301      	adds	r3, #1
 8034fea:	105b      	asrs	r3, r3, #1
 8034fec:	b29a      	uxth	r2, r3
 8034fee:	68fb      	ldr	r3, [r7, #12]
 8034ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8034ff4:	68fb      	ldr	r3, [r7, #12]
 8034ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034ff8:	4a3d      	ldr	r2, [pc, #244]	; (80350f0 <HAL_SPI_Receive_DMA+0x2a8>)
 8034ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8034ffc:	68fb      	ldr	r3, [r7, #12]
 8034ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035000:	4a3c      	ldr	r2, [pc, #240]	; (80350f4 <HAL_SPI_Receive_DMA+0x2ac>)
 8035002:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8035004:	68fb      	ldr	r3, [r7, #12]
 8035006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035008:	4a3b      	ldr	r2, [pc, #236]	; (80350f8 <HAL_SPI_Receive_DMA+0x2b0>)
 803500a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 803500c:	68fb      	ldr	r3, [r7, #12]
 803500e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035010:	2200      	movs	r2, #0
 8035012:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8035014:	68fb      	ldr	r3, [r7, #12]
 8035016:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8035018:	68fb      	ldr	r3, [r7, #12]
 803501a:	681b      	ldr	r3, [r3, #0]
 803501c:	3330      	adds	r3, #48	; 0x30
 803501e:	4619      	mov	r1, r3
 8035020:	68fb      	ldr	r3, [r7, #12]
 8035022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8035024:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8035026:	68fb      	ldr	r3, [r7, #12]
 8035028:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803502c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 803502e:	f7f8 fa09 	bl	802d444 <HAL_DMA_Start_IT>
 8035032:	4603      	mov	r3, r0
 8035034:	2b00      	cmp	r3, #0
 8035036:	d013      	beq.n	8035060 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8035038:	68fb      	ldr	r3, [r7, #12]
 803503a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803503e:	f043 0210 	orr.w	r2, r3, #16
 8035042:	68fb      	ldr	r3, [r7, #12]
 8035044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8035048:	68fb      	ldr	r3, [r7, #12]
 803504a:	2200      	movs	r2, #0
 803504c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8035050:	68fb      	ldr	r3, [r7, #12]
 8035052:	2201      	movs	r2, #1
 8035054:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8035058:	2301      	movs	r3, #1
 803505a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 803505c:	7dfb      	ldrb	r3, [r7, #23]
 803505e:	e042      	b.n	80350e6 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8035060:	68fb      	ldr	r3, [r7, #12]
 8035062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035064:	69db      	ldr	r3, [r3, #28]
 8035066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803506a:	d108      	bne.n	803507e <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 803506c:	68fb      	ldr	r3, [r7, #12]
 803506e:	681b      	ldr	r3, [r3, #0]
 8035070:	6859      	ldr	r1, [r3, #4]
 8035072:	68fb      	ldr	r3, [r7, #12]
 8035074:	681a      	ldr	r2, [r3, #0]
 8035076:	4b21      	ldr	r3, [pc, #132]	; (80350fc <HAL_SPI_Receive_DMA+0x2b4>)
 8035078:	400b      	ands	r3, r1
 803507a:	6053      	str	r3, [r2, #4]
 803507c:	e009      	b.n	8035092 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 803507e:	68fb      	ldr	r3, [r7, #12]
 8035080:	681b      	ldr	r3, [r3, #0]
 8035082:	685a      	ldr	r2, [r3, #4]
 8035084:	4b1d      	ldr	r3, [pc, #116]	; (80350fc <HAL_SPI_Receive_DMA+0x2b4>)
 8035086:	4013      	ands	r3, r2
 8035088:	88f9      	ldrh	r1, [r7, #6]
 803508a:	68fa      	ldr	r2, [r7, #12]
 803508c:	6812      	ldr	r2, [r2, #0]
 803508e:	430b      	orrs	r3, r1
 8035090:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8035092:	68fb      	ldr	r3, [r7, #12]
 8035094:	681b      	ldr	r3, [r3, #0]
 8035096:	689a      	ldr	r2, [r3, #8]
 8035098:	68fb      	ldr	r3, [r7, #12]
 803509a:	681b      	ldr	r3, [r3, #0]
 803509c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80350a0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80350a2:	68fb      	ldr	r3, [r7, #12]
 80350a4:	681b      	ldr	r3, [r3, #0]
 80350a6:	691a      	ldr	r2, [r3, #16]
 80350a8:	68fb      	ldr	r3, [r7, #12]
 80350aa:	681b      	ldr	r3, [r3, #0]
 80350ac:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80350b0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80350b2:	68fb      	ldr	r3, [r7, #12]
 80350b4:	681b      	ldr	r3, [r3, #0]
 80350b6:	681a      	ldr	r2, [r3, #0]
 80350b8:	68fb      	ldr	r3, [r7, #12]
 80350ba:	681b      	ldr	r3, [r3, #0]
 80350bc:	f042 0201 	orr.w	r2, r2, #1
 80350c0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80350c2:	68fb      	ldr	r3, [r7, #12]
 80350c4:	685b      	ldr	r3, [r3, #4]
 80350c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80350ca:	d107      	bne.n	80350dc <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80350cc:	68fb      	ldr	r3, [r7, #12]
 80350ce:	681b      	ldr	r3, [r3, #0]
 80350d0:	681a      	ldr	r2, [r3, #0]
 80350d2:	68fb      	ldr	r3, [r7, #12]
 80350d4:	681b      	ldr	r3, [r3, #0]
 80350d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80350da:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80350dc:	68fb      	ldr	r3, [r7, #12]
 80350de:	2200      	movs	r2, #0
 80350e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80350e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80350e6:	4618      	mov	r0, r3
 80350e8:	3718      	adds	r7, #24
 80350ea:	46bd      	mov	sp, r7
 80350ec:	bd80      	pop	{r7, pc}
 80350ee:	bf00      	nop
 80350f0:	080359db 	.word	0x080359db
 80350f4:	08035933 	.word	0x08035933
 80350f8:	08035a13 	.word	0x08035a13
 80350fc:	ffff0000 	.word	0xffff0000

08035100 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8035100:	b580      	push	{r7, lr}
 8035102:	b086      	sub	sp, #24
 8035104:	af00      	add	r7, sp, #0
 8035106:	60f8      	str	r0, [r7, #12]
 8035108:	60b9      	str	r1, [r7, #8]
 803510a:	607a      	str	r2, [r7, #4]
 803510c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 803510e:	2300      	movs	r3, #0
 8035110:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8035112:	68fb      	ldr	r3, [r7, #12]
 8035114:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8035118:	2b01      	cmp	r3, #1
 803511a:	d101      	bne.n	8035120 <HAL_SPI_TransmitReceive_DMA+0x20>
 803511c:	2302      	movs	r3, #2
 803511e:	e1b4      	b.n	803548a <HAL_SPI_TransmitReceive_DMA+0x38a>
 8035120:	68fb      	ldr	r3, [r7, #12]
 8035122:	2201      	movs	r2, #1
 8035124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8035128:	68fb      	ldr	r3, [r7, #12]
 803512a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803512e:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8035130:	68fb      	ldr	r3, [r7, #12]
 8035132:	685b      	ldr	r3, [r3, #4]
 8035134:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8035136:	7dbb      	ldrb	r3, [r7, #22]
 8035138:	2b01      	cmp	r3, #1
 803513a:	d012      	beq.n	8035162 <HAL_SPI_TransmitReceive_DMA+0x62>
 803513c:	693b      	ldr	r3, [r7, #16]
 803513e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8035142:	d106      	bne.n	8035152 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8035144:	68fb      	ldr	r3, [r7, #12]
 8035146:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8035148:	2b00      	cmp	r3, #0
 803514a:	d102      	bne.n	8035152 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 803514c:	7dbb      	ldrb	r3, [r7, #22]
 803514e:	2b04      	cmp	r3, #4
 8035150:	d007      	beq.n	8035162 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8035152:	2302      	movs	r3, #2
 8035154:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8035156:	68fb      	ldr	r3, [r7, #12]
 8035158:	2200      	movs	r2, #0
 803515a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 803515e:	7dfb      	ldrb	r3, [r7, #23]
 8035160:	e193      	b.n	803548a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8035162:	68bb      	ldr	r3, [r7, #8]
 8035164:	2b00      	cmp	r3, #0
 8035166:	d005      	beq.n	8035174 <HAL_SPI_TransmitReceive_DMA+0x74>
 8035168:	687b      	ldr	r3, [r7, #4]
 803516a:	2b00      	cmp	r3, #0
 803516c:	d002      	beq.n	8035174 <HAL_SPI_TransmitReceive_DMA+0x74>
 803516e:	887b      	ldrh	r3, [r7, #2]
 8035170:	2b00      	cmp	r3, #0
 8035172:	d107      	bne.n	8035184 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8035174:	2301      	movs	r3, #1
 8035176:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8035178:	68fb      	ldr	r3, [r7, #12]
 803517a:	2200      	movs	r2, #0
 803517c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8035180:	7dfb      	ldrb	r3, [r7, #23]
 8035182:	e182      	b.n	803548a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8035184:	68fb      	ldr	r3, [r7, #12]
 8035186:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803518a:	b2db      	uxtb	r3, r3
 803518c:	2b04      	cmp	r3, #4
 803518e:	d003      	beq.n	8035198 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8035190:	68fb      	ldr	r3, [r7, #12]
 8035192:	2205      	movs	r2, #5
 8035194:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8035198:	68fb      	ldr	r3, [r7, #12]
 803519a:	2200      	movs	r2, #0
 803519c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80351a0:	68fb      	ldr	r3, [r7, #12]
 80351a2:	68ba      	ldr	r2, [r7, #8]
 80351a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80351a6:	68fb      	ldr	r3, [r7, #12]
 80351a8:	887a      	ldrh	r2, [r7, #2]
 80351aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80351ae:	68fb      	ldr	r3, [r7, #12]
 80351b0:	887a      	ldrh	r2, [r7, #2]
 80351b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80351b6:	68fb      	ldr	r3, [r7, #12]
 80351b8:	687a      	ldr	r2, [r7, #4]
 80351ba:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80351bc:	68fb      	ldr	r3, [r7, #12]
 80351be:	887a      	ldrh	r2, [r7, #2]
 80351c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80351c4:	68fb      	ldr	r3, [r7, #12]
 80351c6:	887a      	ldrh	r2, [r7, #2]
 80351c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80351cc:	68fb      	ldr	r3, [r7, #12]
 80351ce:	2200      	movs	r2, #0
 80351d0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80351d2:	68fb      	ldr	r3, [r7, #12]
 80351d4:	2200      	movs	r2, #0
 80351d6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80351d8:	68fb      	ldr	r3, [r7, #12]
 80351da:	681b      	ldr	r3, [r3, #0]
 80351dc:	689a      	ldr	r2, [r3, #8]
 80351de:	68fb      	ldr	r3, [r7, #12]
 80351e0:	681b      	ldr	r3, [r3, #0]
 80351e2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80351e6:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80351e8:	68fb      	ldr	r3, [r7, #12]
 80351ea:	68db      	ldr	r3, [r3, #12]
 80351ec:	2b0f      	cmp	r3, #15
 80351ee:	d905      	bls.n	80351fc <HAL_SPI_TransmitReceive_DMA+0xfc>
 80351f0:	68fb      	ldr	r3, [r7, #12]
 80351f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80351f4:	699b      	ldr	r3, [r3, #24]
 80351f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80351fa:	d10f      	bne.n	803521c <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80351fc:	68fb      	ldr	r3, [r7, #12]
 80351fe:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8035200:	2b07      	cmp	r3, #7
 8035202:	d913      	bls.n	803522c <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8035204:	68fb      	ldr	r3, [r7, #12]
 8035206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035208:	699b      	ldr	r3, [r3, #24]
 803520a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803520e:	d00d      	beq.n	803522c <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8035210:	68fb      	ldr	r3, [r7, #12]
 8035212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035214:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8035216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803521a:	d007      	beq.n	803522c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 803521c:	2301      	movs	r3, #1
 803521e:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8035220:	68fb      	ldr	r3, [r7, #12]
 8035222:	2200      	movs	r2, #0
 8035224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8035228:	7dfb      	ldrb	r3, [r7, #23]
 803522a:	e12e      	b.n	803548a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 803522c:	68fb      	ldr	r3, [r7, #12]
 803522e:	68db      	ldr	r3, [r3, #12]
 8035230:	2b07      	cmp	r3, #7
 8035232:	d840      	bhi.n	80352b6 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8035234:	68fb      	ldr	r3, [r7, #12]
 8035236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035238:	699b      	ldr	r3, [r3, #24]
 803523a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803523e:	d109      	bne.n	8035254 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8035240:	68fb      	ldr	r3, [r7, #12]
 8035242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8035246:	b29b      	uxth	r3, r3
 8035248:	3301      	adds	r3, #1
 803524a:	105b      	asrs	r3, r3, #1
 803524c:	b29a      	uxth	r2, r3
 803524e:	68fb      	ldr	r3, [r7, #12]
 8035250:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8035254:	68fb      	ldr	r3, [r7, #12]
 8035256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035258:	699b      	ldr	r3, [r3, #24]
 803525a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803525e:	d109      	bne.n	8035274 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8035260:	68fb      	ldr	r3, [r7, #12]
 8035262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8035266:	b29b      	uxth	r3, r3
 8035268:	3303      	adds	r3, #3
 803526a:	109b      	asrs	r3, r3, #2
 803526c:	b29a      	uxth	r2, r3
 803526e:	68fb      	ldr	r3, [r7, #12]
 8035270:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8035274:	68fb      	ldr	r3, [r7, #12]
 8035276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035278:	699b      	ldr	r3, [r3, #24]
 803527a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803527e:	d109      	bne.n	8035294 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8035280:	68fb      	ldr	r3, [r7, #12]
 8035282:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8035286:	b29b      	uxth	r3, r3
 8035288:	3301      	adds	r3, #1
 803528a:	105b      	asrs	r3, r3, #1
 803528c:	b29a      	uxth	r2, r3
 803528e:	68fb      	ldr	r3, [r7, #12]
 8035290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8035294:	68fb      	ldr	r3, [r7, #12]
 8035296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035298:	699b      	ldr	r3, [r3, #24]
 803529a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803529e:	d12e      	bne.n	80352fe <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80352a0:	68fb      	ldr	r3, [r7, #12]
 80352a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80352a6:	b29b      	uxth	r3, r3
 80352a8:	3303      	adds	r3, #3
 80352aa:	109b      	asrs	r3, r3, #2
 80352ac:	b29a      	uxth	r2, r3
 80352ae:	68fb      	ldr	r3, [r7, #12]
 80352b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80352b4:	e023      	b.n	80352fe <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80352b6:	68fb      	ldr	r3, [r7, #12]
 80352b8:	68db      	ldr	r3, [r3, #12]
 80352ba:	2b0f      	cmp	r3, #15
 80352bc:	d81f      	bhi.n	80352fe <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80352be:	68fb      	ldr	r3, [r7, #12]
 80352c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80352c2:	699b      	ldr	r3, [r3, #24]
 80352c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80352c8:	d109      	bne.n	80352de <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80352ca:	68fb      	ldr	r3, [r7, #12]
 80352cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80352d0:	b29b      	uxth	r3, r3
 80352d2:	3301      	adds	r3, #1
 80352d4:	105b      	asrs	r3, r3, #1
 80352d6:	b29a      	uxth	r2, r3
 80352d8:	68fb      	ldr	r3, [r7, #12]
 80352da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80352de:	68fb      	ldr	r3, [r7, #12]
 80352e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80352e2:	699b      	ldr	r3, [r3, #24]
 80352e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80352e8:	d109      	bne.n	80352fe <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80352ea:	68fb      	ldr	r3, [r7, #12]
 80352ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80352f0:	b29b      	uxth	r3, r3
 80352f2:	3301      	adds	r3, #1
 80352f4:	105b      	asrs	r3, r3, #1
 80352f6:	b29a      	uxth	r2, r3
 80352f8:	68fb      	ldr	r3, [r7, #12]
 80352fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80352fe:	68fb      	ldr	r3, [r7, #12]
 8035300:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8035304:	b2db      	uxtb	r3, r3
 8035306:	2b04      	cmp	r3, #4
 8035308:	d108      	bne.n	803531c <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 803530a:	68fb      	ldr	r3, [r7, #12]
 803530c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803530e:	4a61      	ldr	r2, [pc, #388]	; (8035494 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8035310:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8035312:	68fb      	ldr	r3, [r7, #12]
 8035314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035316:	4a60      	ldr	r2, [pc, #384]	; (8035498 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8035318:	63da      	str	r2, [r3, #60]	; 0x3c
 803531a:	e007      	b.n	803532c <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 803531c:	68fb      	ldr	r3, [r7, #12]
 803531e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035320:	4a5e      	ldr	r2, [pc, #376]	; (803549c <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8035322:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8035324:	68fb      	ldr	r3, [r7, #12]
 8035326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035328:	4a5d      	ldr	r2, [pc, #372]	; (80354a0 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 803532a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 803532c:	68fb      	ldr	r3, [r7, #12]
 803532e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035330:	4a5c      	ldr	r2, [pc, #368]	; (80354a4 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8035332:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8035334:	68fb      	ldr	r3, [r7, #12]
 8035336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035338:	2200      	movs	r2, #0
 803533a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 803533c:	68fb      	ldr	r3, [r7, #12]
 803533e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8035340:	68fb      	ldr	r3, [r7, #12]
 8035342:	681b      	ldr	r3, [r3, #0]
 8035344:	3330      	adds	r3, #48	; 0x30
 8035346:	4619      	mov	r1, r3
 8035348:	68fb      	ldr	r3, [r7, #12]
 803534a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803534c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 803534e:	68fb      	ldr	r3, [r7, #12]
 8035350:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8035354:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8035356:	f7f8 f875 	bl	802d444 <HAL_DMA_Start_IT>
 803535a:	4603      	mov	r3, r0
 803535c:	2b00      	cmp	r3, #0
 803535e:	d013      	beq.n	8035388 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8035360:	68fb      	ldr	r3, [r7, #12]
 8035362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035366:	f043 0210 	orr.w	r2, r3, #16
 803536a:	68fb      	ldr	r3, [r7, #12]
 803536c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8035370:	68fb      	ldr	r3, [r7, #12]
 8035372:	2200      	movs	r2, #0
 8035374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8035378:	68fb      	ldr	r3, [r7, #12]
 803537a:	2201      	movs	r2, #1
 803537c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8035380:	2301      	movs	r3, #1
 8035382:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8035384:	7dfb      	ldrb	r3, [r7, #23]
 8035386:	e080      	b.n	803548a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8035388:	68fb      	ldr	r3, [r7, #12]
 803538a:	681b      	ldr	r3, [r3, #0]
 803538c:	689a      	ldr	r2, [r3, #8]
 803538e:	68fb      	ldr	r3, [r7, #12]
 8035390:	681b      	ldr	r3, [r3, #0]
 8035392:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8035396:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8035398:	68fb      	ldr	r3, [r7, #12]
 803539a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803539c:	2200      	movs	r2, #0
 803539e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80353a0:	68fb      	ldr	r3, [r7, #12]
 80353a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80353a4:	2200      	movs	r2, #0
 80353a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80353a8:	68fb      	ldr	r3, [r7, #12]
 80353aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80353ac:	2200      	movs	r2, #0
 80353ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80353b0:	68fb      	ldr	r3, [r7, #12]
 80353b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80353b4:	2200      	movs	r2, #0
 80353b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80353b8:	68fb      	ldr	r3, [r7, #12]
 80353ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80353bc:	68fb      	ldr	r3, [r7, #12]
 80353be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80353c0:	4619      	mov	r1, r3
 80353c2:	68fb      	ldr	r3, [r7, #12]
 80353c4:	681b      	ldr	r3, [r3, #0]
 80353c6:	3320      	adds	r3, #32
 80353c8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80353ca:	68fb      	ldr	r3, [r7, #12]
 80353cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80353d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80353d2:	f7f8 f837 	bl	802d444 <HAL_DMA_Start_IT>
 80353d6:	4603      	mov	r3, r0
 80353d8:	2b00      	cmp	r3, #0
 80353da:	d013      	beq.n	8035404 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80353dc:	68fb      	ldr	r3, [r7, #12]
 80353de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80353e2:	f043 0210 	orr.w	r2, r3, #16
 80353e6:	68fb      	ldr	r3, [r7, #12]
 80353e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80353ec:	68fb      	ldr	r3, [r7, #12]
 80353ee:	2200      	movs	r2, #0
 80353f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80353f4:	68fb      	ldr	r3, [r7, #12]
 80353f6:	2201      	movs	r2, #1
 80353f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80353fc:	2301      	movs	r3, #1
 80353fe:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8035400:	7dfb      	ldrb	r3, [r7, #23]
 8035402:	e042      	b.n	803548a <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8035404:	68fb      	ldr	r3, [r7, #12]
 8035406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035408:	69db      	ldr	r3, [r3, #28]
 803540a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803540e:	d108      	bne.n	8035422 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8035410:	68fb      	ldr	r3, [r7, #12]
 8035412:	681b      	ldr	r3, [r3, #0]
 8035414:	6859      	ldr	r1, [r3, #4]
 8035416:	68fb      	ldr	r3, [r7, #12]
 8035418:	681a      	ldr	r2, [r3, #0]
 803541a:	4b23      	ldr	r3, [pc, #140]	; (80354a8 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 803541c:	400b      	ands	r3, r1
 803541e:	6053      	str	r3, [r2, #4]
 8035420:	e009      	b.n	8035436 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8035422:	68fb      	ldr	r3, [r7, #12]
 8035424:	681b      	ldr	r3, [r3, #0]
 8035426:	685a      	ldr	r2, [r3, #4]
 8035428:	4b1f      	ldr	r3, [pc, #124]	; (80354a8 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 803542a:	4013      	ands	r3, r2
 803542c:	8879      	ldrh	r1, [r7, #2]
 803542e:	68fa      	ldr	r2, [r7, #12]
 8035430:	6812      	ldr	r2, [r2, #0]
 8035432:	430b      	orrs	r3, r1
 8035434:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8035436:	68fb      	ldr	r3, [r7, #12]
 8035438:	681b      	ldr	r3, [r3, #0]
 803543a:	689a      	ldr	r2, [r3, #8]
 803543c:	68fb      	ldr	r3, [r7, #12]
 803543e:	681b      	ldr	r3, [r3, #0]
 8035440:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8035444:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8035446:	68fb      	ldr	r3, [r7, #12]
 8035448:	681b      	ldr	r3, [r3, #0]
 803544a:	691a      	ldr	r2, [r3, #16]
 803544c:	68fb      	ldr	r3, [r7, #12]
 803544e:	681b      	ldr	r3, [r3, #0]
 8035450:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8035454:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8035456:	68fb      	ldr	r3, [r7, #12]
 8035458:	681b      	ldr	r3, [r3, #0]
 803545a:	681a      	ldr	r2, [r3, #0]
 803545c:	68fb      	ldr	r3, [r7, #12]
 803545e:	681b      	ldr	r3, [r3, #0]
 8035460:	f042 0201 	orr.w	r2, r2, #1
 8035464:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8035466:	68fb      	ldr	r3, [r7, #12]
 8035468:	685b      	ldr	r3, [r3, #4]
 803546a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803546e:	d107      	bne.n	8035480 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8035470:	68fb      	ldr	r3, [r7, #12]
 8035472:	681b      	ldr	r3, [r3, #0]
 8035474:	681a      	ldr	r2, [r3, #0]
 8035476:	68fb      	ldr	r3, [r7, #12]
 8035478:	681b      	ldr	r3, [r3, #0]
 803547a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803547e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8035480:	68fb      	ldr	r3, [r7, #12]
 8035482:	2200      	movs	r2, #0
 8035484:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8035488:	7dfb      	ldrb	r3, [r7, #23]
}
 803548a:	4618      	mov	r0, r3
 803548c:	3718      	adds	r7, #24
 803548e:	46bd      	mov	sp, r7
 8035490:	bd80      	pop	{r7, pc}
 8035492:	bf00      	nop
 8035494:	080359db 	.word	0x080359db
 8035498:	08035933 	.word	0x08035933
 803549c:	080359f7 	.word	0x080359f7
 80354a0:	08035979 	.word	0x08035979
 80354a4:	08035a13 	.word	0x08035a13
 80354a8:	ffff0000 	.word	0xffff0000

080354ac <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80354ac:	b580      	push	{r7, lr}
 80354ae:	b08a      	sub	sp, #40	; 0x28
 80354b0:	af00      	add	r7, sp, #0
 80354b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80354b4:	687b      	ldr	r3, [r7, #4]
 80354b6:	681b      	ldr	r3, [r3, #0]
 80354b8:	691b      	ldr	r3, [r3, #16]
 80354ba:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80354bc:	687b      	ldr	r3, [r7, #4]
 80354be:	681b      	ldr	r3, [r3, #0]
 80354c0:	695b      	ldr	r3, [r3, #20]
 80354c2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80354c4:	6a3a      	ldr	r2, [r7, #32]
 80354c6:	69fb      	ldr	r3, [r7, #28]
 80354c8:	4013      	ands	r3, r2
 80354ca:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80354cc:	687b      	ldr	r3, [r7, #4]
 80354ce:	681b      	ldr	r3, [r3, #0]
 80354d0:	689b      	ldr	r3, [r3, #8]
 80354d2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80354d4:	2300      	movs	r3, #0
 80354d6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80354d8:	687b      	ldr	r3, [r7, #4]
 80354da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80354de:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80354e0:	687b      	ldr	r3, [r7, #4]
 80354e2:	681b      	ldr	r3, [r3, #0]
 80354e4:	3330      	adds	r3, #48	; 0x30
 80354e6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80354e8:	69bb      	ldr	r3, [r7, #24]
 80354ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80354ee:	2b00      	cmp	r3, #0
 80354f0:	d113      	bne.n	803551a <HAL_SPI_IRQHandler+0x6e>
 80354f2:	69bb      	ldr	r3, [r7, #24]
 80354f4:	f003 0320 	and.w	r3, r3, #32
 80354f8:	2b00      	cmp	r3, #0
 80354fa:	d10e      	bne.n	803551a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80354fc:	69bb      	ldr	r3, [r7, #24]
 80354fe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8035502:	2b00      	cmp	r3, #0
 8035504:	d009      	beq.n	803551a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8035506:	687b      	ldr	r3, [r7, #4]
 8035508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803550a:	6878      	ldr	r0, [r7, #4]
 803550c:	4798      	blx	r3
    hspi->RxISR(hspi);
 803550e:	687b      	ldr	r3, [r7, #4]
 8035510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035512:	6878      	ldr	r0, [r7, #4]
 8035514:	4798      	blx	r3
    handled = 1UL;
 8035516:	2301      	movs	r3, #1
 8035518:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 803551a:	69bb      	ldr	r3, [r7, #24]
 803551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035520:	2b00      	cmp	r3, #0
 8035522:	d10f      	bne.n	8035544 <HAL_SPI_IRQHandler+0x98>
 8035524:	69bb      	ldr	r3, [r7, #24]
 8035526:	f003 0301 	and.w	r3, r3, #1
 803552a:	2b00      	cmp	r3, #0
 803552c:	d00a      	beq.n	8035544 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 803552e:	69bb      	ldr	r3, [r7, #24]
 8035530:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8035534:	2b00      	cmp	r3, #0
 8035536:	d105      	bne.n	8035544 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8035538:	687b      	ldr	r3, [r7, #4]
 803553a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803553c:	6878      	ldr	r0, [r7, #4]
 803553e:	4798      	blx	r3
    handled = 1UL;
 8035540:	2301      	movs	r3, #1
 8035542:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8035544:	69bb      	ldr	r3, [r7, #24]
 8035546:	f003 0320 	and.w	r3, r3, #32
 803554a:	2b00      	cmp	r3, #0
 803554c:	d10f      	bne.n	803556e <HAL_SPI_IRQHandler+0xc2>
 803554e:	69bb      	ldr	r3, [r7, #24]
 8035550:	f003 0302 	and.w	r3, r3, #2
 8035554:	2b00      	cmp	r3, #0
 8035556:	d00a      	beq.n	803556e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8035558:	69bb      	ldr	r3, [r7, #24]
 803555a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 803555e:	2b00      	cmp	r3, #0
 8035560:	d105      	bne.n	803556e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8035562:	687b      	ldr	r3, [r7, #4]
 8035564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8035566:	6878      	ldr	r0, [r7, #4]
 8035568:	4798      	blx	r3
    handled = 1UL;
 803556a:	2301      	movs	r3, #1
 803556c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 803556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035570:	2b00      	cmp	r3, #0
 8035572:	f040 815a 	bne.w	803582a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8035576:	69bb      	ldr	r3, [r7, #24]
 8035578:	f003 0308 	and.w	r3, r3, #8
 803557c:	2b00      	cmp	r3, #0
 803557e:	f000 808b 	beq.w	8035698 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8035582:	687b      	ldr	r3, [r7, #4]
 8035584:	681b      	ldr	r3, [r3, #0]
 8035586:	699a      	ldr	r2, [r3, #24]
 8035588:	687b      	ldr	r3, [r7, #4]
 803558a:	681b      	ldr	r3, [r3, #0]
 803558c:	f042 0208 	orr.w	r2, r2, #8
 8035590:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8035592:	687b      	ldr	r3, [r7, #4]
 8035594:	681b      	ldr	r3, [r3, #0]
 8035596:	699a      	ldr	r2, [r3, #24]
 8035598:	687b      	ldr	r3, [r7, #4]
 803559a:	681b      	ldr	r3, [r3, #0]
 803559c:	f042 0210 	orr.w	r2, r2, #16
 80355a0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80355a2:	687b      	ldr	r3, [r7, #4]
 80355a4:	681b      	ldr	r3, [r3, #0]
 80355a6:	699a      	ldr	r2, [r3, #24]
 80355a8:	687b      	ldr	r3, [r7, #4]
 80355aa:	681b      	ldr	r3, [r3, #0]
 80355ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80355b0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80355b2:	687b      	ldr	r3, [r7, #4]
 80355b4:	681b      	ldr	r3, [r3, #0]
 80355b6:	691a      	ldr	r2, [r3, #16]
 80355b8:	687b      	ldr	r3, [r7, #4]
 80355ba:	681b      	ldr	r3, [r3, #0]
 80355bc:	f022 0208 	bic.w	r2, r2, #8
 80355c0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80355c2:	687b      	ldr	r3, [r7, #4]
 80355c4:	681b      	ldr	r3, [r3, #0]
 80355c6:	689b      	ldr	r3, [r3, #8]
 80355c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80355cc:	2b00      	cmp	r3, #0
 80355ce:	d13d      	bne.n	803564c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80355d0:	e036      	b.n	8035640 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80355d2:	687b      	ldr	r3, [r7, #4]
 80355d4:	68db      	ldr	r3, [r3, #12]
 80355d6:	2b0f      	cmp	r3, #15
 80355d8:	d90b      	bls.n	80355f2 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80355da:	687b      	ldr	r3, [r7, #4]
 80355dc:	681a      	ldr	r2, [r3, #0]
 80355de:	687b      	ldr	r3, [r7, #4]
 80355e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80355e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80355e4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80355e6:	687b      	ldr	r3, [r7, #4]
 80355e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80355ea:	1d1a      	adds	r2, r3, #4
 80355ec:	687b      	ldr	r3, [r7, #4]
 80355ee:	665a      	str	r2, [r3, #100]	; 0x64
 80355f0:	e01d      	b.n	803562e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80355f2:	687b      	ldr	r3, [r7, #4]
 80355f4:	68db      	ldr	r3, [r3, #12]
 80355f6:	2b07      	cmp	r3, #7
 80355f8:	d90b      	bls.n	8035612 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80355fa:	687b      	ldr	r3, [r7, #4]
 80355fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80355fe:	68fa      	ldr	r2, [r7, #12]
 8035600:	8812      	ldrh	r2, [r2, #0]
 8035602:	b292      	uxth	r2, r2
 8035604:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8035606:	687b      	ldr	r3, [r7, #4]
 8035608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803560a:	1c9a      	adds	r2, r3, #2
 803560c:	687b      	ldr	r3, [r7, #4]
 803560e:	665a      	str	r2, [r3, #100]	; 0x64
 8035610:	e00d      	b.n	803562e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8035612:	687b      	ldr	r3, [r7, #4]
 8035614:	681b      	ldr	r3, [r3, #0]
 8035616:	f103 0230 	add.w	r2, r3, #48	; 0x30
 803561a:	687b      	ldr	r3, [r7, #4]
 803561c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803561e:	7812      	ldrb	r2, [r2, #0]
 8035620:	b2d2      	uxtb	r2, r2
 8035622:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8035624:	687b      	ldr	r3, [r7, #4]
 8035626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8035628:	1c5a      	adds	r2, r3, #1
 803562a:	687b      	ldr	r3, [r7, #4]
 803562c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 803562e:	687b      	ldr	r3, [r7, #4]
 8035630:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8035634:	b29b      	uxth	r3, r3
 8035636:	3b01      	subs	r3, #1
 8035638:	b29a      	uxth	r2, r3
 803563a:	687b      	ldr	r3, [r7, #4]
 803563c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8035640:	687b      	ldr	r3, [r7, #4]
 8035642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8035646:	b29b      	uxth	r3, r3
 8035648:	2b00      	cmp	r3, #0
 803564a:	d1c2      	bne.n	80355d2 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 803564c:	6878      	ldr	r0, [r7, #4]
 803564e:	f000 fa1d 	bl	8035a8c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8035652:	687b      	ldr	r3, [r7, #4]
 8035654:	2201      	movs	r2, #1
 8035656:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 803565a:	687b      	ldr	r3, [r7, #4]
 803565c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035660:	2b00      	cmp	r3, #0
 8035662:	d003      	beq.n	803566c <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8035664:	6878      	ldr	r0, [r7, #4]
 8035666:	f000 f929 	bl	80358bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 803566a:	e0e3      	b.n	8035834 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 803566c:	7cfb      	ldrb	r3, [r7, #19]
 803566e:	2b05      	cmp	r3, #5
 8035670:	d103      	bne.n	803567a <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8035672:	6878      	ldr	r0, [r7, #4]
 8035674:	f000 f8fa 	bl	803586c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8035678:	e0d9      	b.n	803582e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 803567a:	7cfb      	ldrb	r3, [r7, #19]
 803567c:	2b04      	cmp	r3, #4
 803567e:	d103      	bne.n	8035688 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8035680:	6878      	ldr	r0, [r7, #4]
 8035682:	f000 f8e9 	bl	8035858 <HAL_SPI_RxCpltCallback>
    return;
 8035686:	e0d2      	b.n	803582e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8035688:	7cfb      	ldrb	r3, [r7, #19]
 803568a:	2b03      	cmp	r3, #3
 803568c:	f040 80cf 	bne.w	803582e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8035690:	6878      	ldr	r0, [r7, #4]
 8035692:	f000 f8d7 	bl	8035844 <HAL_SPI_TxCpltCallback>
    return;
 8035696:	e0ca      	b.n	803582e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8035698:	69fb      	ldr	r3, [r7, #28]
 803569a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 803569e:	2b00      	cmp	r3, #0
 80356a0:	d00d      	beq.n	80356be <HAL_SPI_IRQHandler+0x212>
 80356a2:	6a3b      	ldr	r3, [r7, #32]
 80356a4:	f003 0308 	and.w	r3, r3, #8
 80356a8:	2b00      	cmp	r3, #0
 80356aa:	d008      	beq.n	80356be <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80356ac:	687b      	ldr	r3, [r7, #4]
 80356ae:	681b      	ldr	r3, [r3, #0]
 80356b0:	699a      	ldr	r2, [r3, #24]
 80356b2:	687b      	ldr	r3, [r7, #4]
 80356b4:	681b      	ldr	r3, [r3, #0]
 80356b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80356ba:	619a      	str	r2, [r3, #24]

    return;
 80356bc:	e0ba      	b.n	8035834 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80356be:	69bb      	ldr	r3, [r7, #24]
 80356c0:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80356c4:	2b00      	cmp	r3, #0
 80356c6:	f000 80b5 	beq.w	8035834 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80356ca:	69bb      	ldr	r3, [r7, #24]
 80356cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80356d0:	2b00      	cmp	r3, #0
 80356d2:	d00f      	beq.n	80356f4 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80356d4:	687b      	ldr	r3, [r7, #4]
 80356d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80356da:	f043 0204 	orr.w	r2, r3, #4
 80356de:	687b      	ldr	r3, [r7, #4]
 80356e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80356e4:	687b      	ldr	r3, [r7, #4]
 80356e6:	681b      	ldr	r3, [r3, #0]
 80356e8:	699a      	ldr	r2, [r3, #24]
 80356ea:	687b      	ldr	r3, [r7, #4]
 80356ec:	681b      	ldr	r3, [r3, #0]
 80356ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80356f2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80356f4:	69bb      	ldr	r3, [r7, #24]
 80356f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80356fa:	2b00      	cmp	r3, #0
 80356fc:	d00f      	beq.n	803571e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80356fe:	687b      	ldr	r3, [r7, #4]
 8035700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035704:	f043 0201 	orr.w	r2, r3, #1
 8035708:	687b      	ldr	r3, [r7, #4]
 803570a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 803570e:	687b      	ldr	r3, [r7, #4]
 8035710:	681b      	ldr	r3, [r3, #0]
 8035712:	699a      	ldr	r2, [r3, #24]
 8035714:	687b      	ldr	r3, [r7, #4]
 8035716:	681b      	ldr	r3, [r3, #0]
 8035718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803571c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 803571e:	69bb      	ldr	r3, [r7, #24]
 8035720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8035724:	2b00      	cmp	r3, #0
 8035726:	d00f      	beq.n	8035748 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8035728:	687b      	ldr	r3, [r7, #4]
 803572a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803572e:	f043 0208 	orr.w	r2, r3, #8
 8035732:	687b      	ldr	r3, [r7, #4]
 8035734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8035738:	687b      	ldr	r3, [r7, #4]
 803573a:	681b      	ldr	r3, [r3, #0]
 803573c:	699a      	ldr	r2, [r3, #24]
 803573e:	687b      	ldr	r3, [r7, #4]
 8035740:	681b      	ldr	r3, [r3, #0]
 8035742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8035746:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8035748:	69bb      	ldr	r3, [r7, #24]
 803574a:	f003 0320 	and.w	r3, r3, #32
 803574e:	2b00      	cmp	r3, #0
 8035750:	d00f      	beq.n	8035772 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8035752:	687b      	ldr	r3, [r7, #4]
 8035754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035758:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 803575c:	687b      	ldr	r3, [r7, #4]
 803575e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8035762:	687b      	ldr	r3, [r7, #4]
 8035764:	681b      	ldr	r3, [r3, #0]
 8035766:	699a      	ldr	r2, [r3, #24]
 8035768:	687b      	ldr	r3, [r7, #4]
 803576a:	681b      	ldr	r3, [r3, #0]
 803576c:	f042 0220 	orr.w	r2, r2, #32
 8035770:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8035772:	687b      	ldr	r3, [r7, #4]
 8035774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035778:	2b00      	cmp	r3, #0
 803577a:	d05a      	beq.n	8035832 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 803577c:	687b      	ldr	r3, [r7, #4]
 803577e:	681b      	ldr	r3, [r3, #0]
 8035780:	681a      	ldr	r2, [r3, #0]
 8035782:	687b      	ldr	r3, [r7, #4]
 8035784:	681b      	ldr	r3, [r3, #0]
 8035786:	f022 0201 	bic.w	r2, r2, #1
 803578a:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 803578c:	687b      	ldr	r3, [r7, #4]
 803578e:	681b      	ldr	r3, [r3, #0]
 8035790:	6919      	ldr	r1, [r3, #16]
 8035792:	687b      	ldr	r3, [r7, #4]
 8035794:	681a      	ldr	r2, [r3, #0]
 8035796:	4b29      	ldr	r3, [pc, #164]	; (803583c <HAL_SPI_IRQHandler+0x390>)
 8035798:	400b      	ands	r3, r1
 803579a:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 803579c:	697b      	ldr	r3, [r7, #20]
 803579e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80357a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80357a6:	d138      	bne.n	803581a <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80357a8:	687b      	ldr	r3, [r7, #4]
 80357aa:	681b      	ldr	r3, [r3, #0]
 80357ac:	689a      	ldr	r2, [r3, #8]
 80357ae:	687b      	ldr	r3, [r7, #4]
 80357b0:	681b      	ldr	r3, [r3, #0]
 80357b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80357b6:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80357b8:	687b      	ldr	r3, [r7, #4]
 80357ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80357bc:	2b00      	cmp	r3, #0
 80357be:	d013      	beq.n	80357e8 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80357c0:	687b      	ldr	r3, [r7, #4]
 80357c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80357c4:	4a1e      	ldr	r2, [pc, #120]	; (8035840 <HAL_SPI_IRQHandler+0x394>)
 80357c6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80357c8:	687b      	ldr	r3, [r7, #4]
 80357ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80357cc:	4618      	mov	r0, r3
 80357ce:	f7f8 fbc1 	bl	802df54 <HAL_DMA_Abort_IT>
 80357d2:	4603      	mov	r3, r0
 80357d4:	2b00      	cmp	r3, #0
 80357d6:	d007      	beq.n	80357e8 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80357d8:	687b      	ldr	r3, [r7, #4]
 80357da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80357de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80357e2:	687b      	ldr	r3, [r7, #4]
 80357e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80357e8:	687b      	ldr	r3, [r7, #4]
 80357ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80357ec:	2b00      	cmp	r3, #0
 80357ee:	d020      	beq.n	8035832 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80357f0:	687b      	ldr	r3, [r7, #4]
 80357f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80357f4:	4a12      	ldr	r2, [pc, #72]	; (8035840 <HAL_SPI_IRQHandler+0x394>)
 80357f6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80357f8:	687b      	ldr	r3, [r7, #4]
 80357fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80357fc:	4618      	mov	r0, r3
 80357fe:	f7f8 fba9 	bl	802df54 <HAL_DMA_Abort_IT>
 8035802:	4603      	mov	r3, r0
 8035804:	2b00      	cmp	r3, #0
 8035806:	d014      	beq.n	8035832 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8035808:	687b      	ldr	r3, [r7, #4]
 803580a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803580e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8035812:	687b      	ldr	r3, [r7, #4]
 8035814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8035818:	e00b      	b.n	8035832 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 803581a:	687b      	ldr	r3, [r7, #4]
 803581c:	2201      	movs	r2, #1
 803581e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8035822:	6878      	ldr	r0, [r7, #4]
 8035824:	f000 f84a 	bl	80358bc <HAL_SPI_ErrorCallback>
    return;
 8035828:	e003      	b.n	8035832 <HAL_SPI_IRQHandler+0x386>
    return;
 803582a:	bf00      	nop
 803582c:	e002      	b.n	8035834 <HAL_SPI_IRQHandler+0x388>
    return;
 803582e:	bf00      	nop
 8035830:	e000      	b.n	8035834 <HAL_SPI_IRQHandler+0x388>
    return;
 8035832:	bf00      	nop
  }
}
 8035834:	3728      	adds	r7, #40	; 0x28
 8035836:	46bd      	mov	sp, r7
 8035838:	bd80      	pop	{r7, pc}
 803583a:	bf00      	nop
 803583c:	fffffc94 	.word	0xfffffc94
 8035840:	08035a59 	.word	0x08035a59

08035844 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8035844:	b480      	push	{r7}
 8035846:	b083      	sub	sp, #12
 8035848:	af00      	add	r7, sp, #0
 803584a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 803584c:	bf00      	nop
 803584e:	370c      	adds	r7, #12
 8035850:	46bd      	mov	sp, r7
 8035852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035856:	4770      	bx	lr

08035858 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8035858:	b480      	push	{r7}
 803585a:	b083      	sub	sp, #12
 803585c:	af00      	add	r7, sp, #0
 803585e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8035860:	bf00      	nop
 8035862:	370c      	adds	r7, #12
 8035864:	46bd      	mov	sp, r7
 8035866:	f85d 7b04 	ldr.w	r7, [sp], #4
 803586a:	4770      	bx	lr

0803586c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 803586c:	b480      	push	{r7}
 803586e:	b083      	sub	sp, #12
 8035870:	af00      	add	r7, sp, #0
 8035872:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8035874:	bf00      	nop
 8035876:	370c      	adds	r7, #12
 8035878:	46bd      	mov	sp, r7
 803587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803587e:	4770      	bx	lr

08035880 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8035880:	b480      	push	{r7}
 8035882:	b083      	sub	sp, #12
 8035884:	af00      	add	r7, sp, #0
 8035886:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8035888:	bf00      	nop
 803588a:	370c      	adds	r7, #12
 803588c:	46bd      	mov	sp, r7
 803588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035892:	4770      	bx	lr

08035894 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8035894:	b480      	push	{r7}
 8035896:	b083      	sub	sp, #12
 8035898:	af00      	add	r7, sp, #0
 803589a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 803589c:	bf00      	nop
 803589e:	370c      	adds	r7, #12
 80358a0:	46bd      	mov	sp, r7
 80358a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80358a6:	4770      	bx	lr

080358a8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80358a8:	b480      	push	{r7}
 80358aa:	b083      	sub	sp, #12
 80358ac:	af00      	add	r7, sp, #0
 80358ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80358b0:	bf00      	nop
 80358b2:	370c      	adds	r7, #12
 80358b4:	46bd      	mov	sp, r7
 80358b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80358ba:	4770      	bx	lr

080358bc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80358bc:	b480      	push	{r7}
 80358be:	b083      	sub	sp, #12
 80358c0:	af00      	add	r7, sp, #0
 80358c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80358c4:	bf00      	nop
 80358c6:	370c      	adds	r7, #12
 80358c8:	46bd      	mov	sp, r7
 80358ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80358ce:	4770      	bx	lr

080358d0 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80358d0:	b480      	push	{r7}
 80358d2:	b083      	sub	sp, #12
 80358d4:	af00      	add	r7, sp, #0
 80358d6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80358d8:	687b      	ldr	r3, [r7, #4]
 80358da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80358de:	b2db      	uxtb	r3, r3
}
 80358e0:	4618      	mov	r0, r3
 80358e2:	370c      	adds	r7, #12
 80358e4:	46bd      	mov	sp, r7
 80358e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80358ea:	4770      	bx	lr

080358ec <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80358ec:	b580      	push	{r7, lr}
 80358ee:	b084      	sub	sp, #16
 80358f0:	af00      	add	r7, sp, #0
 80358f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80358f4:	687b      	ldr	r3, [r7, #4]
 80358f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80358f8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80358fa:	68fb      	ldr	r3, [r7, #12]
 80358fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8035900:	b2db      	uxtb	r3, r3
 8035902:	2b07      	cmp	r3, #7
 8035904:	d011      	beq.n	803592a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8035906:	68fb      	ldr	r3, [r7, #12]
 8035908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803590a:	69db      	ldr	r3, [r3, #28]
 803590c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035910:	d103      	bne.n	803591a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8035912:	68f8      	ldr	r0, [r7, #12]
 8035914:	f7ff ff96 	bl	8035844 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8035918:	e007      	b.n	803592a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 803591a:	68fb      	ldr	r3, [r7, #12]
 803591c:	681b      	ldr	r3, [r3, #0]
 803591e:	691a      	ldr	r2, [r3, #16]
 8035920:	68fb      	ldr	r3, [r7, #12]
 8035922:	681b      	ldr	r3, [r3, #0]
 8035924:	f042 0208 	orr.w	r2, r2, #8
 8035928:	611a      	str	r2, [r3, #16]
}
 803592a:	bf00      	nop
 803592c:	3710      	adds	r7, #16
 803592e:	46bd      	mov	sp, r7
 8035930:	bd80      	pop	{r7, pc}

08035932 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8035932:	b580      	push	{r7, lr}
 8035934:	b084      	sub	sp, #16
 8035936:	af00      	add	r7, sp, #0
 8035938:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803593a:	687b      	ldr	r3, [r7, #4]
 803593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803593e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8035940:	68fb      	ldr	r3, [r7, #12]
 8035942:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8035946:	b2db      	uxtb	r3, r3
 8035948:	2b07      	cmp	r3, #7
 803594a:	d011      	beq.n	8035970 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 803594c:	68fb      	ldr	r3, [r7, #12]
 803594e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035950:	69db      	ldr	r3, [r3, #28]
 8035952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035956:	d103      	bne.n	8035960 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8035958:	68f8      	ldr	r0, [r7, #12]
 803595a:	f7ff ff7d 	bl	8035858 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 803595e:	e007      	b.n	8035970 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8035960:	68fb      	ldr	r3, [r7, #12]
 8035962:	681b      	ldr	r3, [r3, #0]
 8035964:	691a      	ldr	r2, [r3, #16]
 8035966:	68fb      	ldr	r3, [r7, #12]
 8035968:	681b      	ldr	r3, [r3, #0]
 803596a:	f042 0208 	orr.w	r2, r2, #8
 803596e:	611a      	str	r2, [r3, #16]
}
 8035970:	bf00      	nop
 8035972:	3710      	adds	r7, #16
 8035974:	46bd      	mov	sp, r7
 8035976:	bd80      	pop	{r7, pc}

08035978 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8035978:	b580      	push	{r7, lr}
 803597a:	b084      	sub	sp, #16
 803597c:	af00      	add	r7, sp, #0
 803597e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8035980:	687b      	ldr	r3, [r7, #4]
 8035982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035984:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8035986:	68fb      	ldr	r3, [r7, #12]
 8035988:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803598c:	b2db      	uxtb	r3, r3
 803598e:	2b07      	cmp	r3, #7
 8035990:	d011      	beq.n	80359b6 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8035992:	68fb      	ldr	r3, [r7, #12]
 8035994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035996:	69db      	ldr	r3, [r3, #28]
 8035998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803599c:	d103      	bne.n	80359a6 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 803599e:	68f8      	ldr	r0, [r7, #12]
 80359a0:	f7ff ff64 	bl	803586c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80359a4:	e007      	b.n	80359b6 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80359a6:	68fb      	ldr	r3, [r7, #12]
 80359a8:	681b      	ldr	r3, [r3, #0]
 80359aa:	691a      	ldr	r2, [r3, #16]
 80359ac:	68fb      	ldr	r3, [r7, #12]
 80359ae:	681b      	ldr	r3, [r3, #0]
 80359b0:	f042 0208 	orr.w	r2, r2, #8
 80359b4:	611a      	str	r2, [r3, #16]
}
 80359b6:	bf00      	nop
 80359b8:	3710      	adds	r7, #16
 80359ba:	46bd      	mov	sp, r7
 80359bc:	bd80      	pop	{r7, pc}

080359be <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80359be:	b580      	push	{r7, lr}
 80359c0:	b084      	sub	sp, #16
 80359c2:	af00      	add	r7, sp, #0
 80359c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80359c6:	687b      	ldr	r3, [r7, #4]
 80359c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80359ca:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80359cc:	68f8      	ldr	r0, [r7, #12]
 80359ce:	f7ff ff57 	bl	8035880 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80359d2:	bf00      	nop
 80359d4:	3710      	adds	r7, #16
 80359d6:	46bd      	mov	sp, r7
 80359d8:	bd80      	pop	{r7, pc}

080359da <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80359da:	b580      	push	{r7, lr}
 80359dc:	b084      	sub	sp, #16
 80359de:	af00      	add	r7, sp, #0
 80359e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80359e2:	687b      	ldr	r3, [r7, #4]
 80359e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80359e6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80359e8:	68f8      	ldr	r0, [r7, #12]
 80359ea:	f7ff ff53 	bl	8035894 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80359ee:	bf00      	nop
 80359f0:	3710      	adds	r7, #16
 80359f2:	46bd      	mov	sp, r7
 80359f4:	bd80      	pop	{r7, pc}

080359f6 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80359f6:	b580      	push	{r7, lr}
 80359f8:	b084      	sub	sp, #16
 80359fa:	af00      	add	r7, sp, #0
 80359fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80359fe:	687b      	ldr	r3, [r7, #4]
 8035a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035a02:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8035a04:	68f8      	ldr	r0, [r7, #12]
 8035a06:	f7ff ff4f 	bl	80358a8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8035a0a:	bf00      	nop
 8035a0c:	3710      	adds	r7, #16
 8035a0e:	46bd      	mov	sp, r7
 8035a10:	bd80      	pop	{r7, pc}

08035a12 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8035a12:	b580      	push	{r7, lr}
 8035a14:	b084      	sub	sp, #16
 8035a16:	af00      	add	r7, sp, #0
 8035a18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8035a1a:	687b      	ldr	r3, [r7, #4]
 8035a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035a1e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8035a20:	6878      	ldr	r0, [r7, #4]
 8035a22:	f7f9 fc15 	bl	802f250 <HAL_DMA_GetError>
 8035a26:	4603      	mov	r3, r0
 8035a28:	2b02      	cmp	r3, #2
 8035a2a:	d011      	beq.n	8035a50 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8035a2c:	68f8      	ldr	r0, [r7, #12]
 8035a2e:	f000 f82d 	bl	8035a8c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8035a32:	68fb      	ldr	r3, [r7, #12]
 8035a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035a38:	f043 0210 	orr.w	r2, r3, #16
 8035a3c:	68fb      	ldr	r3, [r7, #12]
 8035a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8035a42:	68fb      	ldr	r3, [r7, #12]
 8035a44:	2201      	movs	r2, #1
 8035a46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8035a4a:	68f8      	ldr	r0, [r7, #12]
 8035a4c:	f7ff ff36 	bl	80358bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8035a50:	bf00      	nop
 8035a52:	3710      	adds	r7, #16
 8035a54:	46bd      	mov	sp, r7
 8035a56:	bd80      	pop	{r7, pc}

08035a58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8035a58:	b580      	push	{r7, lr}
 8035a5a:	b084      	sub	sp, #16
 8035a5c:	af00      	add	r7, sp, #0
 8035a5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8035a60:	687b      	ldr	r3, [r7, #4]
 8035a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035a64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8035a66:	68fb      	ldr	r3, [r7, #12]
 8035a68:	2200      	movs	r2, #0
 8035a6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8035a6e:	68fb      	ldr	r3, [r7, #12]
 8035a70:	2200      	movs	r2, #0
 8035a72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8035a76:	68fb      	ldr	r3, [r7, #12]
 8035a78:	2201      	movs	r2, #1
 8035a7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8035a7e:	68f8      	ldr	r0, [r7, #12]
 8035a80:	f7ff ff1c 	bl	80358bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8035a84:	bf00      	nop
 8035a86:	3710      	adds	r7, #16
 8035a88:	46bd      	mov	sp, r7
 8035a8a:	bd80      	pop	{r7, pc}

08035a8c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8035a8c:	b480      	push	{r7}
 8035a8e:	b085      	sub	sp, #20
 8035a90:	af00      	add	r7, sp, #0
 8035a92:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8035a94:	687b      	ldr	r3, [r7, #4]
 8035a96:	681b      	ldr	r3, [r3, #0]
 8035a98:	695b      	ldr	r3, [r3, #20]
 8035a9a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8035a9c:	687b      	ldr	r3, [r7, #4]
 8035a9e:	681b      	ldr	r3, [r3, #0]
 8035aa0:	699a      	ldr	r2, [r3, #24]
 8035aa2:	687b      	ldr	r3, [r7, #4]
 8035aa4:	681b      	ldr	r3, [r3, #0]
 8035aa6:	f042 0208 	orr.w	r2, r2, #8
 8035aaa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8035aac:	687b      	ldr	r3, [r7, #4]
 8035aae:	681b      	ldr	r3, [r3, #0]
 8035ab0:	699a      	ldr	r2, [r3, #24]
 8035ab2:	687b      	ldr	r3, [r7, #4]
 8035ab4:	681b      	ldr	r3, [r3, #0]
 8035ab6:	f042 0210 	orr.w	r2, r2, #16
 8035aba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8035abc:	687b      	ldr	r3, [r7, #4]
 8035abe:	681b      	ldr	r3, [r3, #0]
 8035ac0:	681a      	ldr	r2, [r3, #0]
 8035ac2:	687b      	ldr	r3, [r7, #4]
 8035ac4:	681b      	ldr	r3, [r3, #0]
 8035ac6:	f022 0201 	bic.w	r2, r2, #1
 8035aca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8035acc:	687b      	ldr	r3, [r7, #4]
 8035ace:	681b      	ldr	r3, [r3, #0]
 8035ad0:	6919      	ldr	r1, [r3, #16]
 8035ad2:	687b      	ldr	r3, [r7, #4]
 8035ad4:	681a      	ldr	r2, [r3, #0]
 8035ad6:	4b3c      	ldr	r3, [pc, #240]	; (8035bc8 <SPI_CloseTransfer+0x13c>)
 8035ad8:	400b      	ands	r3, r1
 8035ada:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8035adc:	687b      	ldr	r3, [r7, #4]
 8035ade:	681b      	ldr	r3, [r3, #0]
 8035ae0:	689a      	ldr	r2, [r3, #8]
 8035ae2:	687b      	ldr	r3, [r7, #4]
 8035ae4:	681b      	ldr	r3, [r3, #0]
 8035ae6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8035aea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8035aec:	687b      	ldr	r3, [r7, #4]
 8035aee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8035af2:	b2db      	uxtb	r3, r3
 8035af4:	2b04      	cmp	r3, #4
 8035af6:	d014      	beq.n	8035b22 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8035af8:	68fb      	ldr	r3, [r7, #12]
 8035afa:	f003 0320 	and.w	r3, r3, #32
 8035afe:	2b00      	cmp	r3, #0
 8035b00:	d00f      	beq.n	8035b22 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8035b02:	687b      	ldr	r3, [r7, #4]
 8035b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035b08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8035b0c:	687b      	ldr	r3, [r7, #4]
 8035b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8035b12:	687b      	ldr	r3, [r7, #4]
 8035b14:	681b      	ldr	r3, [r3, #0]
 8035b16:	699a      	ldr	r2, [r3, #24]
 8035b18:	687b      	ldr	r3, [r7, #4]
 8035b1a:	681b      	ldr	r3, [r3, #0]
 8035b1c:	f042 0220 	orr.w	r2, r2, #32
 8035b20:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8035b22:	687b      	ldr	r3, [r7, #4]
 8035b24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8035b28:	b2db      	uxtb	r3, r3
 8035b2a:	2b03      	cmp	r3, #3
 8035b2c:	d014      	beq.n	8035b58 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8035b2e:	68fb      	ldr	r3, [r7, #12]
 8035b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035b34:	2b00      	cmp	r3, #0
 8035b36:	d00f      	beq.n	8035b58 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8035b38:	687b      	ldr	r3, [r7, #4]
 8035b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035b3e:	f043 0204 	orr.w	r2, r3, #4
 8035b42:	687b      	ldr	r3, [r7, #4]
 8035b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8035b48:	687b      	ldr	r3, [r7, #4]
 8035b4a:	681b      	ldr	r3, [r3, #0]
 8035b4c:	699a      	ldr	r2, [r3, #24]
 8035b4e:	687b      	ldr	r3, [r7, #4]
 8035b50:	681b      	ldr	r3, [r3, #0]
 8035b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8035b56:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8035b58:	68fb      	ldr	r3, [r7, #12]
 8035b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8035b5e:	2b00      	cmp	r3, #0
 8035b60:	d00f      	beq.n	8035b82 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8035b62:	687b      	ldr	r3, [r7, #4]
 8035b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035b68:	f043 0201 	orr.w	r2, r3, #1
 8035b6c:	687b      	ldr	r3, [r7, #4]
 8035b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8035b72:	687b      	ldr	r3, [r7, #4]
 8035b74:	681b      	ldr	r3, [r3, #0]
 8035b76:	699a      	ldr	r2, [r3, #24]
 8035b78:	687b      	ldr	r3, [r7, #4]
 8035b7a:	681b      	ldr	r3, [r3, #0]
 8035b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8035b80:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8035b82:	68fb      	ldr	r3, [r7, #12]
 8035b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8035b88:	2b00      	cmp	r3, #0
 8035b8a:	d00f      	beq.n	8035bac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8035b8c:	687b      	ldr	r3, [r7, #4]
 8035b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035b92:	f043 0208 	orr.w	r2, r3, #8
 8035b96:	687b      	ldr	r3, [r7, #4]
 8035b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8035b9c:	687b      	ldr	r3, [r7, #4]
 8035b9e:	681b      	ldr	r3, [r3, #0]
 8035ba0:	699a      	ldr	r2, [r3, #24]
 8035ba2:	687b      	ldr	r3, [r7, #4]
 8035ba4:	681b      	ldr	r3, [r3, #0]
 8035ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8035baa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8035bac:	687b      	ldr	r3, [r7, #4]
 8035bae:	2200      	movs	r2, #0
 8035bb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8035bb4:	687b      	ldr	r3, [r7, #4]
 8035bb6:	2200      	movs	r2, #0
 8035bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8035bbc:	bf00      	nop
 8035bbe:	3714      	adds	r7, #20
 8035bc0:	46bd      	mov	sp, r7
 8035bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035bc6:	4770      	bx	lr
 8035bc8:	fffffc90 	.word	0xfffffc90

08035bcc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8035bcc:	b480      	push	{r7}
 8035bce:	b085      	sub	sp, #20
 8035bd0:	af00      	add	r7, sp, #0
 8035bd2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8035bd4:	687b      	ldr	r3, [r7, #4]
 8035bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8035bd8:	095b      	lsrs	r3, r3, #5
 8035bda:	3301      	adds	r3, #1
 8035bdc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8035bde:	687b      	ldr	r3, [r7, #4]
 8035be0:	68db      	ldr	r3, [r3, #12]
 8035be2:	3301      	adds	r3, #1
 8035be4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8035be6:	68bb      	ldr	r3, [r7, #8]
 8035be8:	3307      	adds	r3, #7
 8035bea:	08db      	lsrs	r3, r3, #3
 8035bec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8035bee:	68bb      	ldr	r3, [r7, #8]
 8035bf0:	68fa      	ldr	r2, [r7, #12]
 8035bf2:	fb02 f303 	mul.w	r3, r2, r3
}
 8035bf6:	4618      	mov	r0, r3
 8035bf8:	3714      	adds	r7, #20
 8035bfa:	46bd      	mov	sp, r7
 8035bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035c00:	4770      	bx	lr

08035c02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8035c02:	b580      	push	{r7, lr}
 8035c04:	b082      	sub	sp, #8
 8035c06:	af00      	add	r7, sp, #0
 8035c08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8035c0a:	687b      	ldr	r3, [r7, #4]
 8035c0c:	2b00      	cmp	r3, #0
 8035c0e:	d101      	bne.n	8035c14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8035c10:	2301      	movs	r3, #1
 8035c12:	e049      	b.n	8035ca8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8035c14:	687b      	ldr	r3, [r7, #4]
 8035c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035c1a:	b2db      	uxtb	r3, r3
 8035c1c:	2b00      	cmp	r3, #0
 8035c1e:	d106      	bne.n	8035c2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8035c20:	687b      	ldr	r3, [r7, #4]
 8035c22:	2200      	movs	r2, #0
 8035c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8035c28:	6878      	ldr	r0, [r7, #4]
 8035c2a:	f7f5 ff5b 	bl	802bae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8035c2e:	687b      	ldr	r3, [r7, #4]
 8035c30:	2202      	movs	r2, #2
 8035c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8035c36:	687b      	ldr	r3, [r7, #4]
 8035c38:	681a      	ldr	r2, [r3, #0]
 8035c3a:	687b      	ldr	r3, [r7, #4]
 8035c3c:	3304      	adds	r3, #4
 8035c3e:	4619      	mov	r1, r3
 8035c40:	4610      	mov	r0, r2
 8035c42:	f000 faed 	bl	8036220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8035c46:	687b      	ldr	r3, [r7, #4]
 8035c48:	2201      	movs	r2, #1
 8035c4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8035c4e:	687b      	ldr	r3, [r7, #4]
 8035c50:	2201      	movs	r2, #1
 8035c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8035c56:	687b      	ldr	r3, [r7, #4]
 8035c58:	2201      	movs	r2, #1
 8035c5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8035c5e:	687b      	ldr	r3, [r7, #4]
 8035c60:	2201      	movs	r2, #1
 8035c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8035c66:	687b      	ldr	r3, [r7, #4]
 8035c68:	2201      	movs	r2, #1
 8035c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8035c6e:	687b      	ldr	r3, [r7, #4]
 8035c70:	2201      	movs	r2, #1
 8035c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8035c76:	687b      	ldr	r3, [r7, #4]
 8035c78:	2201      	movs	r2, #1
 8035c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8035c7e:	687b      	ldr	r3, [r7, #4]
 8035c80:	2201      	movs	r2, #1
 8035c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8035c86:	687b      	ldr	r3, [r7, #4]
 8035c88:	2201      	movs	r2, #1
 8035c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8035c8e:	687b      	ldr	r3, [r7, #4]
 8035c90:	2201      	movs	r2, #1
 8035c92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8035c96:	687b      	ldr	r3, [r7, #4]
 8035c98:	2201      	movs	r2, #1
 8035c9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8035c9e:	687b      	ldr	r3, [r7, #4]
 8035ca0:	2201      	movs	r2, #1
 8035ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8035ca6:	2300      	movs	r3, #0
}
 8035ca8:	4618      	mov	r0, r3
 8035caa:	3708      	adds	r7, #8
 8035cac:	46bd      	mov	sp, r7
 8035cae:	bd80      	pop	{r7, pc}

08035cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8035cb0:	b480      	push	{r7}
 8035cb2:	b085      	sub	sp, #20
 8035cb4:	af00      	add	r7, sp, #0
 8035cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8035cb8:	687b      	ldr	r3, [r7, #4]
 8035cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035cbe:	b2db      	uxtb	r3, r3
 8035cc0:	2b01      	cmp	r3, #1
 8035cc2:	d001      	beq.n	8035cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8035cc4:	2301      	movs	r3, #1
 8035cc6:	e054      	b.n	8035d72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8035cc8:	687b      	ldr	r3, [r7, #4]
 8035cca:	2202      	movs	r2, #2
 8035ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8035cd0:	687b      	ldr	r3, [r7, #4]
 8035cd2:	681b      	ldr	r3, [r3, #0]
 8035cd4:	68da      	ldr	r2, [r3, #12]
 8035cd6:	687b      	ldr	r3, [r7, #4]
 8035cd8:	681b      	ldr	r3, [r3, #0]
 8035cda:	f042 0201 	orr.w	r2, r2, #1
 8035cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8035ce0:	687b      	ldr	r3, [r7, #4]
 8035ce2:	681b      	ldr	r3, [r3, #0]
 8035ce4:	4a26      	ldr	r2, [pc, #152]	; (8035d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8035ce6:	4293      	cmp	r3, r2
 8035ce8:	d022      	beq.n	8035d30 <HAL_TIM_Base_Start_IT+0x80>
 8035cea:	687b      	ldr	r3, [r7, #4]
 8035cec:	681b      	ldr	r3, [r3, #0]
 8035cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8035cf2:	d01d      	beq.n	8035d30 <HAL_TIM_Base_Start_IT+0x80>
 8035cf4:	687b      	ldr	r3, [r7, #4]
 8035cf6:	681b      	ldr	r3, [r3, #0]
 8035cf8:	4a22      	ldr	r2, [pc, #136]	; (8035d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8035cfa:	4293      	cmp	r3, r2
 8035cfc:	d018      	beq.n	8035d30 <HAL_TIM_Base_Start_IT+0x80>
 8035cfe:	687b      	ldr	r3, [r7, #4]
 8035d00:	681b      	ldr	r3, [r3, #0]
 8035d02:	4a21      	ldr	r2, [pc, #132]	; (8035d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8035d04:	4293      	cmp	r3, r2
 8035d06:	d013      	beq.n	8035d30 <HAL_TIM_Base_Start_IT+0x80>
 8035d08:	687b      	ldr	r3, [r7, #4]
 8035d0a:	681b      	ldr	r3, [r3, #0]
 8035d0c:	4a1f      	ldr	r2, [pc, #124]	; (8035d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8035d0e:	4293      	cmp	r3, r2
 8035d10:	d00e      	beq.n	8035d30 <HAL_TIM_Base_Start_IT+0x80>
 8035d12:	687b      	ldr	r3, [r7, #4]
 8035d14:	681b      	ldr	r3, [r3, #0]
 8035d16:	4a1e      	ldr	r2, [pc, #120]	; (8035d90 <HAL_TIM_Base_Start_IT+0xe0>)
 8035d18:	4293      	cmp	r3, r2
 8035d1a:	d009      	beq.n	8035d30 <HAL_TIM_Base_Start_IT+0x80>
 8035d1c:	687b      	ldr	r3, [r7, #4]
 8035d1e:	681b      	ldr	r3, [r3, #0]
 8035d20:	4a1c      	ldr	r2, [pc, #112]	; (8035d94 <HAL_TIM_Base_Start_IT+0xe4>)
 8035d22:	4293      	cmp	r3, r2
 8035d24:	d004      	beq.n	8035d30 <HAL_TIM_Base_Start_IT+0x80>
 8035d26:	687b      	ldr	r3, [r7, #4]
 8035d28:	681b      	ldr	r3, [r3, #0]
 8035d2a:	4a1b      	ldr	r2, [pc, #108]	; (8035d98 <HAL_TIM_Base_Start_IT+0xe8>)
 8035d2c:	4293      	cmp	r3, r2
 8035d2e:	d115      	bne.n	8035d5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8035d30:	687b      	ldr	r3, [r7, #4]
 8035d32:	681b      	ldr	r3, [r3, #0]
 8035d34:	689a      	ldr	r2, [r3, #8]
 8035d36:	4b19      	ldr	r3, [pc, #100]	; (8035d9c <HAL_TIM_Base_Start_IT+0xec>)
 8035d38:	4013      	ands	r3, r2
 8035d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8035d3c:	68fb      	ldr	r3, [r7, #12]
 8035d3e:	2b06      	cmp	r3, #6
 8035d40:	d015      	beq.n	8035d6e <HAL_TIM_Base_Start_IT+0xbe>
 8035d42:	68fb      	ldr	r3, [r7, #12]
 8035d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8035d48:	d011      	beq.n	8035d6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8035d4a:	687b      	ldr	r3, [r7, #4]
 8035d4c:	681b      	ldr	r3, [r3, #0]
 8035d4e:	681a      	ldr	r2, [r3, #0]
 8035d50:	687b      	ldr	r3, [r7, #4]
 8035d52:	681b      	ldr	r3, [r3, #0]
 8035d54:	f042 0201 	orr.w	r2, r2, #1
 8035d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8035d5a:	e008      	b.n	8035d6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8035d5c:	687b      	ldr	r3, [r7, #4]
 8035d5e:	681b      	ldr	r3, [r3, #0]
 8035d60:	681a      	ldr	r2, [r3, #0]
 8035d62:	687b      	ldr	r3, [r7, #4]
 8035d64:	681b      	ldr	r3, [r3, #0]
 8035d66:	f042 0201 	orr.w	r2, r2, #1
 8035d6a:	601a      	str	r2, [r3, #0]
 8035d6c:	e000      	b.n	8035d70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8035d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8035d70:	2300      	movs	r3, #0
}
 8035d72:	4618      	mov	r0, r3
 8035d74:	3714      	adds	r7, #20
 8035d76:	46bd      	mov	sp, r7
 8035d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035d7c:	4770      	bx	lr
 8035d7e:	bf00      	nop
 8035d80:	40010000 	.word	0x40010000
 8035d84:	40000400 	.word	0x40000400
 8035d88:	40000800 	.word	0x40000800
 8035d8c:	40000c00 	.word	0x40000c00
 8035d90:	40010400 	.word	0x40010400
 8035d94:	40001800 	.word	0x40001800
 8035d98:	40014000 	.word	0x40014000
 8035d9c:	00010007 	.word	0x00010007

08035da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8035da0:	b580      	push	{r7, lr}
 8035da2:	b082      	sub	sp, #8
 8035da4:	af00      	add	r7, sp, #0
 8035da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8035da8:	687b      	ldr	r3, [r7, #4]
 8035daa:	681b      	ldr	r3, [r3, #0]
 8035dac:	691b      	ldr	r3, [r3, #16]
 8035dae:	f003 0302 	and.w	r3, r3, #2
 8035db2:	2b02      	cmp	r3, #2
 8035db4:	d122      	bne.n	8035dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8035db6:	687b      	ldr	r3, [r7, #4]
 8035db8:	681b      	ldr	r3, [r3, #0]
 8035dba:	68db      	ldr	r3, [r3, #12]
 8035dbc:	f003 0302 	and.w	r3, r3, #2
 8035dc0:	2b02      	cmp	r3, #2
 8035dc2:	d11b      	bne.n	8035dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8035dc4:	687b      	ldr	r3, [r7, #4]
 8035dc6:	681b      	ldr	r3, [r3, #0]
 8035dc8:	f06f 0202 	mvn.w	r2, #2
 8035dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8035dce:	687b      	ldr	r3, [r7, #4]
 8035dd0:	2201      	movs	r2, #1
 8035dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8035dd4:	687b      	ldr	r3, [r7, #4]
 8035dd6:	681b      	ldr	r3, [r3, #0]
 8035dd8:	699b      	ldr	r3, [r3, #24]
 8035dda:	f003 0303 	and.w	r3, r3, #3
 8035dde:	2b00      	cmp	r3, #0
 8035de0:	d003      	beq.n	8035dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8035de2:	6878      	ldr	r0, [r7, #4]
 8035de4:	f000 f9fe 	bl	80361e4 <HAL_TIM_IC_CaptureCallback>
 8035de8:	e005      	b.n	8035df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8035dea:	6878      	ldr	r0, [r7, #4]
 8035dec:	f000 f9f0 	bl	80361d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035df0:	6878      	ldr	r0, [r7, #4]
 8035df2:	f000 fa01 	bl	80361f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035df6:	687b      	ldr	r3, [r7, #4]
 8035df8:	2200      	movs	r2, #0
 8035dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8035dfc:	687b      	ldr	r3, [r7, #4]
 8035dfe:	681b      	ldr	r3, [r3, #0]
 8035e00:	691b      	ldr	r3, [r3, #16]
 8035e02:	f003 0304 	and.w	r3, r3, #4
 8035e06:	2b04      	cmp	r3, #4
 8035e08:	d122      	bne.n	8035e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8035e0a:	687b      	ldr	r3, [r7, #4]
 8035e0c:	681b      	ldr	r3, [r3, #0]
 8035e0e:	68db      	ldr	r3, [r3, #12]
 8035e10:	f003 0304 	and.w	r3, r3, #4
 8035e14:	2b04      	cmp	r3, #4
 8035e16:	d11b      	bne.n	8035e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8035e18:	687b      	ldr	r3, [r7, #4]
 8035e1a:	681b      	ldr	r3, [r3, #0]
 8035e1c:	f06f 0204 	mvn.w	r2, #4
 8035e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8035e22:	687b      	ldr	r3, [r7, #4]
 8035e24:	2202      	movs	r2, #2
 8035e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8035e28:	687b      	ldr	r3, [r7, #4]
 8035e2a:	681b      	ldr	r3, [r3, #0]
 8035e2c:	699b      	ldr	r3, [r3, #24]
 8035e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8035e32:	2b00      	cmp	r3, #0
 8035e34:	d003      	beq.n	8035e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8035e36:	6878      	ldr	r0, [r7, #4]
 8035e38:	f000 f9d4 	bl	80361e4 <HAL_TIM_IC_CaptureCallback>
 8035e3c:	e005      	b.n	8035e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8035e3e:	6878      	ldr	r0, [r7, #4]
 8035e40:	f000 f9c6 	bl	80361d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035e44:	6878      	ldr	r0, [r7, #4]
 8035e46:	f000 f9d7 	bl	80361f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035e4a:	687b      	ldr	r3, [r7, #4]
 8035e4c:	2200      	movs	r2, #0
 8035e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8035e50:	687b      	ldr	r3, [r7, #4]
 8035e52:	681b      	ldr	r3, [r3, #0]
 8035e54:	691b      	ldr	r3, [r3, #16]
 8035e56:	f003 0308 	and.w	r3, r3, #8
 8035e5a:	2b08      	cmp	r3, #8
 8035e5c:	d122      	bne.n	8035ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8035e5e:	687b      	ldr	r3, [r7, #4]
 8035e60:	681b      	ldr	r3, [r3, #0]
 8035e62:	68db      	ldr	r3, [r3, #12]
 8035e64:	f003 0308 	and.w	r3, r3, #8
 8035e68:	2b08      	cmp	r3, #8
 8035e6a:	d11b      	bne.n	8035ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8035e6c:	687b      	ldr	r3, [r7, #4]
 8035e6e:	681b      	ldr	r3, [r3, #0]
 8035e70:	f06f 0208 	mvn.w	r2, #8
 8035e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8035e76:	687b      	ldr	r3, [r7, #4]
 8035e78:	2204      	movs	r2, #4
 8035e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8035e7c:	687b      	ldr	r3, [r7, #4]
 8035e7e:	681b      	ldr	r3, [r3, #0]
 8035e80:	69db      	ldr	r3, [r3, #28]
 8035e82:	f003 0303 	and.w	r3, r3, #3
 8035e86:	2b00      	cmp	r3, #0
 8035e88:	d003      	beq.n	8035e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8035e8a:	6878      	ldr	r0, [r7, #4]
 8035e8c:	f000 f9aa 	bl	80361e4 <HAL_TIM_IC_CaptureCallback>
 8035e90:	e005      	b.n	8035e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8035e92:	6878      	ldr	r0, [r7, #4]
 8035e94:	f000 f99c 	bl	80361d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035e98:	6878      	ldr	r0, [r7, #4]
 8035e9a:	f000 f9ad 	bl	80361f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035e9e:	687b      	ldr	r3, [r7, #4]
 8035ea0:	2200      	movs	r2, #0
 8035ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8035ea4:	687b      	ldr	r3, [r7, #4]
 8035ea6:	681b      	ldr	r3, [r3, #0]
 8035ea8:	691b      	ldr	r3, [r3, #16]
 8035eaa:	f003 0310 	and.w	r3, r3, #16
 8035eae:	2b10      	cmp	r3, #16
 8035eb0:	d122      	bne.n	8035ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8035eb2:	687b      	ldr	r3, [r7, #4]
 8035eb4:	681b      	ldr	r3, [r3, #0]
 8035eb6:	68db      	ldr	r3, [r3, #12]
 8035eb8:	f003 0310 	and.w	r3, r3, #16
 8035ebc:	2b10      	cmp	r3, #16
 8035ebe:	d11b      	bne.n	8035ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8035ec0:	687b      	ldr	r3, [r7, #4]
 8035ec2:	681b      	ldr	r3, [r3, #0]
 8035ec4:	f06f 0210 	mvn.w	r2, #16
 8035ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8035eca:	687b      	ldr	r3, [r7, #4]
 8035ecc:	2208      	movs	r2, #8
 8035ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8035ed0:	687b      	ldr	r3, [r7, #4]
 8035ed2:	681b      	ldr	r3, [r3, #0]
 8035ed4:	69db      	ldr	r3, [r3, #28]
 8035ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8035eda:	2b00      	cmp	r3, #0
 8035edc:	d003      	beq.n	8035ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8035ede:	6878      	ldr	r0, [r7, #4]
 8035ee0:	f000 f980 	bl	80361e4 <HAL_TIM_IC_CaptureCallback>
 8035ee4:	e005      	b.n	8035ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8035ee6:	6878      	ldr	r0, [r7, #4]
 8035ee8:	f000 f972 	bl	80361d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8035eec:	6878      	ldr	r0, [r7, #4]
 8035eee:	f000 f983 	bl	80361f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8035ef2:	687b      	ldr	r3, [r7, #4]
 8035ef4:	2200      	movs	r2, #0
 8035ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8035ef8:	687b      	ldr	r3, [r7, #4]
 8035efa:	681b      	ldr	r3, [r3, #0]
 8035efc:	691b      	ldr	r3, [r3, #16]
 8035efe:	f003 0301 	and.w	r3, r3, #1
 8035f02:	2b01      	cmp	r3, #1
 8035f04:	d10e      	bne.n	8035f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8035f06:	687b      	ldr	r3, [r7, #4]
 8035f08:	681b      	ldr	r3, [r3, #0]
 8035f0a:	68db      	ldr	r3, [r3, #12]
 8035f0c:	f003 0301 	and.w	r3, r3, #1
 8035f10:	2b01      	cmp	r3, #1
 8035f12:	d107      	bne.n	8035f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8035f14:	687b      	ldr	r3, [r7, #4]
 8035f16:	681b      	ldr	r3, [r3, #0]
 8035f18:	f06f 0201 	mvn.w	r2, #1
 8035f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8035f1e:	6878      	ldr	r0, [r7, #4]
 8035f20:	f7f5 f96a 	bl	802b1f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8035f24:	687b      	ldr	r3, [r7, #4]
 8035f26:	681b      	ldr	r3, [r3, #0]
 8035f28:	691b      	ldr	r3, [r3, #16]
 8035f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035f2e:	2b80      	cmp	r3, #128	; 0x80
 8035f30:	d10e      	bne.n	8035f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8035f32:	687b      	ldr	r3, [r7, #4]
 8035f34:	681b      	ldr	r3, [r3, #0]
 8035f36:	68db      	ldr	r3, [r3, #12]
 8035f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035f3c:	2b80      	cmp	r3, #128	; 0x80
 8035f3e:	d107      	bne.n	8035f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8035f40:	687b      	ldr	r3, [r7, #4]
 8035f42:	681b      	ldr	r3, [r3, #0]
 8035f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8035f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8035f4a:	6878      	ldr	r0, [r7, #4]
 8035f4c:	f000 fb38 	bl	80365c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8035f50:	687b      	ldr	r3, [r7, #4]
 8035f52:	681b      	ldr	r3, [r3, #0]
 8035f54:	691b      	ldr	r3, [r3, #16]
 8035f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8035f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035f5e:	d10e      	bne.n	8035f7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8035f60:	687b      	ldr	r3, [r7, #4]
 8035f62:	681b      	ldr	r3, [r3, #0]
 8035f64:	68db      	ldr	r3, [r3, #12]
 8035f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035f6a:	2b80      	cmp	r3, #128	; 0x80
 8035f6c:	d107      	bne.n	8035f7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8035f6e:	687b      	ldr	r3, [r7, #4]
 8035f70:	681b      	ldr	r3, [r3, #0]
 8035f72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8035f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8035f78:	6878      	ldr	r0, [r7, #4]
 8035f7a:	f000 fb2b 	bl	80365d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8035f7e:	687b      	ldr	r3, [r7, #4]
 8035f80:	681b      	ldr	r3, [r3, #0]
 8035f82:	691b      	ldr	r3, [r3, #16]
 8035f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035f88:	2b40      	cmp	r3, #64	; 0x40
 8035f8a:	d10e      	bne.n	8035faa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8035f8c:	687b      	ldr	r3, [r7, #4]
 8035f8e:	681b      	ldr	r3, [r3, #0]
 8035f90:	68db      	ldr	r3, [r3, #12]
 8035f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035f96:	2b40      	cmp	r3, #64	; 0x40
 8035f98:	d107      	bne.n	8035faa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8035f9a:	687b      	ldr	r3, [r7, #4]
 8035f9c:	681b      	ldr	r3, [r3, #0]
 8035f9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8035fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8035fa4:	6878      	ldr	r0, [r7, #4]
 8035fa6:	f000 f931 	bl	803620c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8035faa:	687b      	ldr	r3, [r7, #4]
 8035fac:	681b      	ldr	r3, [r3, #0]
 8035fae:	691b      	ldr	r3, [r3, #16]
 8035fb0:	f003 0320 	and.w	r3, r3, #32
 8035fb4:	2b20      	cmp	r3, #32
 8035fb6:	d10e      	bne.n	8035fd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8035fb8:	687b      	ldr	r3, [r7, #4]
 8035fba:	681b      	ldr	r3, [r3, #0]
 8035fbc:	68db      	ldr	r3, [r3, #12]
 8035fbe:	f003 0320 	and.w	r3, r3, #32
 8035fc2:	2b20      	cmp	r3, #32
 8035fc4:	d107      	bne.n	8035fd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8035fc6:	687b      	ldr	r3, [r7, #4]
 8035fc8:	681b      	ldr	r3, [r3, #0]
 8035fca:	f06f 0220 	mvn.w	r2, #32
 8035fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8035fd0:	6878      	ldr	r0, [r7, #4]
 8035fd2:	f000 faeb 	bl	80365ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8035fd6:	bf00      	nop
 8035fd8:	3708      	adds	r7, #8
 8035fda:	46bd      	mov	sp, r7
 8035fdc:	bd80      	pop	{r7, pc}
	...

08035fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8035fe0:	b580      	push	{r7, lr}
 8035fe2:	b084      	sub	sp, #16
 8035fe4:	af00      	add	r7, sp, #0
 8035fe6:	6078      	str	r0, [r7, #4]
 8035fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8035fea:	2300      	movs	r3, #0
 8035fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8035fee:	687b      	ldr	r3, [r7, #4]
 8035ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8035ff4:	2b01      	cmp	r3, #1
 8035ff6:	d101      	bne.n	8035ffc <HAL_TIM_ConfigClockSource+0x1c>
 8035ff8:	2302      	movs	r3, #2
 8035ffa:	e0dc      	b.n	80361b6 <HAL_TIM_ConfigClockSource+0x1d6>
 8035ffc:	687b      	ldr	r3, [r7, #4]
 8035ffe:	2201      	movs	r2, #1
 8036000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8036004:	687b      	ldr	r3, [r7, #4]
 8036006:	2202      	movs	r2, #2
 8036008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 803600c:	687b      	ldr	r3, [r7, #4]
 803600e:	681b      	ldr	r3, [r3, #0]
 8036010:	689b      	ldr	r3, [r3, #8]
 8036012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8036014:	68ba      	ldr	r2, [r7, #8]
 8036016:	4b6a      	ldr	r3, [pc, #424]	; (80361c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8036018:	4013      	ands	r3, r2
 803601a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 803601c:	68bb      	ldr	r3, [r7, #8]
 803601e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8036022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8036024:	687b      	ldr	r3, [r7, #4]
 8036026:	681b      	ldr	r3, [r3, #0]
 8036028:	68ba      	ldr	r2, [r7, #8]
 803602a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 803602c:	683b      	ldr	r3, [r7, #0]
 803602e:	681b      	ldr	r3, [r3, #0]
 8036030:	4a64      	ldr	r2, [pc, #400]	; (80361c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8036032:	4293      	cmp	r3, r2
 8036034:	f000 80a9 	beq.w	803618a <HAL_TIM_ConfigClockSource+0x1aa>
 8036038:	4a62      	ldr	r2, [pc, #392]	; (80361c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 803603a:	4293      	cmp	r3, r2
 803603c:	f200 80ae 	bhi.w	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 8036040:	4a61      	ldr	r2, [pc, #388]	; (80361c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8036042:	4293      	cmp	r3, r2
 8036044:	f000 80a1 	beq.w	803618a <HAL_TIM_ConfigClockSource+0x1aa>
 8036048:	4a5f      	ldr	r2, [pc, #380]	; (80361c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 803604a:	4293      	cmp	r3, r2
 803604c:	f200 80a6 	bhi.w	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 8036050:	4a5e      	ldr	r2, [pc, #376]	; (80361cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8036052:	4293      	cmp	r3, r2
 8036054:	f000 8099 	beq.w	803618a <HAL_TIM_ConfigClockSource+0x1aa>
 8036058:	4a5c      	ldr	r2, [pc, #368]	; (80361cc <HAL_TIM_ConfigClockSource+0x1ec>)
 803605a:	4293      	cmp	r3, r2
 803605c:	f200 809e 	bhi.w	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 8036060:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8036064:	f000 8091 	beq.w	803618a <HAL_TIM_ConfigClockSource+0x1aa>
 8036068:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 803606c:	f200 8096 	bhi.w	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 8036070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8036074:	f000 8089 	beq.w	803618a <HAL_TIM_ConfigClockSource+0x1aa>
 8036078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803607c:	f200 808e 	bhi.w	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 8036080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8036084:	d03e      	beq.n	8036104 <HAL_TIM_ConfigClockSource+0x124>
 8036086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803608a:	f200 8087 	bhi.w	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 803608e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036092:	f000 8086 	beq.w	80361a2 <HAL_TIM_ConfigClockSource+0x1c2>
 8036096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803609a:	d87f      	bhi.n	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 803609c:	2b70      	cmp	r3, #112	; 0x70
 803609e:	d01a      	beq.n	80360d6 <HAL_TIM_ConfigClockSource+0xf6>
 80360a0:	2b70      	cmp	r3, #112	; 0x70
 80360a2:	d87b      	bhi.n	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 80360a4:	2b60      	cmp	r3, #96	; 0x60
 80360a6:	d050      	beq.n	803614a <HAL_TIM_ConfigClockSource+0x16a>
 80360a8:	2b60      	cmp	r3, #96	; 0x60
 80360aa:	d877      	bhi.n	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 80360ac:	2b50      	cmp	r3, #80	; 0x50
 80360ae:	d03c      	beq.n	803612a <HAL_TIM_ConfigClockSource+0x14a>
 80360b0:	2b50      	cmp	r3, #80	; 0x50
 80360b2:	d873      	bhi.n	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 80360b4:	2b40      	cmp	r3, #64	; 0x40
 80360b6:	d058      	beq.n	803616a <HAL_TIM_ConfigClockSource+0x18a>
 80360b8:	2b40      	cmp	r3, #64	; 0x40
 80360ba:	d86f      	bhi.n	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 80360bc:	2b30      	cmp	r3, #48	; 0x30
 80360be:	d064      	beq.n	803618a <HAL_TIM_ConfigClockSource+0x1aa>
 80360c0:	2b30      	cmp	r3, #48	; 0x30
 80360c2:	d86b      	bhi.n	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 80360c4:	2b20      	cmp	r3, #32
 80360c6:	d060      	beq.n	803618a <HAL_TIM_ConfigClockSource+0x1aa>
 80360c8:	2b20      	cmp	r3, #32
 80360ca:	d867      	bhi.n	803619c <HAL_TIM_ConfigClockSource+0x1bc>
 80360cc:	2b00      	cmp	r3, #0
 80360ce:	d05c      	beq.n	803618a <HAL_TIM_ConfigClockSource+0x1aa>
 80360d0:	2b10      	cmp	r3, #16
 80360d2:	d05a      	beq.n	803618a <HAL_TIM_ConfigClockSource+0x1aa>
 80360d4:	e062      	b.n	803619c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80360d6:	687b      	ldr	r3, [r7, #4]
 80360d8:	6818      	ldr	r0, [r3, #0]
 80360da:	683b      	ldr	r3, [r7, #0]
 80360dc:	6899      	ldr	r1, [r3, #8]
 80360de:	683b      	ldr	r3, [r7, #0]
 80360e0:	685a      	ldr	r2, [r3, #4]
 80360e2:	683b      	ldr	r3, [r7, #0]
 80360e4:	68db      	ldr	r3, [r3, #12]
 80360e6:	f000 f9b3 	bl	8036450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80360ea:	687b      	ldr	r3, [r7, #4]
 80360ec:	681b      	ldr	r3, [r3, #0]
 80360ee:	689b      	ldr	r3, [r3, #8]
 80360f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80360f2:	68bb      	ldr	r3, [r7, #8]
 80360f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80360f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80360fa:	687b      	ldr	r3, [r7, #4]
 80360fc:	681b      	ldr	r3, [r3, #0]
 80360fe:	68ba      	ldr	r2, [r7, #8]
 8036100:	609a      	str	r2, [r3, #8]
      break;
 8036102:	e04f      	b.n	80361a4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8036104:	687b      	ldr	r3, [r7, #4]
 8036106:	6818      	ldr	r0, [r3, #0]
 8036108:	683b      	ldr	r3, [r7, #0]
 803610a:	6899      	ldr	r1, [r3, #8]
 803610c:	683b      	ldr	r3, [r7, #0]
 803610e:	685a      	ldr	r2, [r3, #4]
 8036110:	683b      	ldr	r3, [r7, #0]
 8036112:	68db      	ldr	r3, [r3, #12]
 8036114:	f000 f99c 	bl	8036450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8036118:	687b      	ldr	r3, [r7, #4]
 803611a:	681b      	ldr	r3, [r3, #0]
 803611c:	689a      	ldr	r2, [r3, #8]
 803611e:	687b      	ldr	r3, [r7, #4]
 8036120:	681b      	ldr	r3, [r3, #0]
 8036122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8036126:	609a      	str	r2, [r3, #8]
      break;
 8036128:	e03c      	b.n	80361a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 803612a:	687b      	ldr	r3, [r7, #4]
 803612c:	6818      	ldr	r0, [r3, #0]
 803612e:	683b      	ldr	r3, [r7, #0]
 8036130:	6859      	ldr	r1, [r3, #4]
 8036132:	683b      	ldr	r3, [r7, #0]
 8036134:	68db      	ldr	r3, [r3, #12]
 8036136:	461a      	mov	r2, r3
 8036138:	f000 f90c 	bl	8036354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 803613c:	687b      	ldr	r3, [r7, #4]
 803613e:	681b      	ldr	r3, [r3, #0]
 8036140:	2150      	movs	r1, #80	; 0x50
 8036142:	4618      	mov	r0, r3
 8036144:	f000 f966 	bl	8036414 <TIM_ITRx_SetConfig>
      break;
 8036148:	e02c      	b.n	80361a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 803614a:	687b      	ldr	r3, [r7, #4]
 803614c:	6818      	ldr	r0, [r3, #0]
 803614e:	683b      	ldr	r3, [r7, #0]
 8036150:	6859      	ldr	r1, [r3, #4]
 8036152:	683b      	ldr	r3, [r7, #0]
 8036154:	68db      	ldr	r3, [r3, #12]
 8036156:	461a      	mov	r2, r3
 8036158:	f000 f92b 	bl	80363b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 803615c:	687b      	ldr	r3, [r7, #4]
 803615e:	681b      	ldr	r3, [r3, #0]
 8036160:	2160      	movs	r1, #96	; 0x60
 8036162:	4618      	mov	r0, r3
 8036164:	f000 f956 	bl	8036414 <TIM_ITRx_SetConfig>
      break;
 8036168:	e01c      	b.n	80361a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 803616a:	687b      	ldr	r3, [r7, #4]
 803616c:	6818      	ldr	r0, [r3, #0]
 803616e:	683b      	ldr	r3, [r7, #0]
 8036170:	6859      	ldr	r1, [r3, #4]
 8036172:	683b      	ldr	r3, [r7, #0]
 8036174:	68db      	ldr	r3, [r3, #12]
 8036176:	461a      	mov	r2, r3
 8036178:	f000 f8ec 	bl	8036354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 803617c:	687b      	ldr	r3, [r7, #4]
 803617e:	681b      	ldr	r3, [r3, #0]
 8036180:	2140      	movs	r1, #64	; 0x40
 8036182:	4618      	mov	r0, r3
 8036184:	f000 f946 	bl	8036414 <TIM_ITRx_SetConfig>
      break;
 8036188:	e00c      	b.n	80361a4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 803618a:	687b      	ldr	r3, [r7, #4]
 803618c:	681a      	ldr	r2, [r3, #0]
 803618e:	683b      	ldr	r3, [r7, #0]
 8036190:	681b      	ldr	r3, [r3, #0]
 8036192:	4619      	mov	r1, r3
 8036194:	4610      	mov	r0, r2
 8036196:	f000 f93d 	bl	8036414 <TIM_ITRx_SetConfig>
      break;
 803619a:	e003      	b.n	80361a4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 803619c:	2301      	movs	r3, #1
 803619e:	73fb      	strb	r3, [r7, #15]
      break;
 80361a0:	e000      	b.n	80361a4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80361a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80361a4:	687b      	ldr	r3, [r7, #4]
 80361a6:	2201      	movs	r2, #1
 80361a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80361ac:	687b      	ldr	r3, [r7, #4]
 80361ae:	2200      	movs	r2, #0
 80361b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80361b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80361b6:	4618      	mov	r0, r3
 80361b8:	3710      	adds	r7, #16
 80361ba:	46bd      	mov	sp, r7
 80361bc:	bd80      	pop	{r7, pc}
 80361be:	bf00      	nop
 80361c0:	ffceff88 	.word	0xffceff88
 80361c4:	00100040 	.word	0x00100040
 80361c8:	00100030 	.word	0x00100030
 80361cc:	00100020 	.word	0x00100020

080361d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80361d0:	b480      	push	{r7}
 80361d2:	b083      	sub	sp, #12
 80361d4:	af00      	add	r7, sp, #0
 80361d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80361d8:	bf00      	nop
 80361da:	370c      	adds	r7, #12
 80361dc:	46bd      	mov	sp, r7
 80361de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80361e2:	4770      	bx	lr

080361e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80361e4:	b480      	push	{r7}
 80361e6:	b083      	sub	sp, #12
 80361e8:	af00      	add	r7, sp, #0
 80361ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80361ec:	bf00      	nop
 80361ee:	370c      	adds	r7, #12
 80361f0:	46bd      	mov	sp, r7
 80361f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80361f6:	4770      	bx	lr

080361f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80361f8:	b480      	push	{r7}
 80361fa:	b083      	sub	sp, #12
 80361fc:	af00      	add	r7, sp, #0
 80361fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8036200:	bf00      	nop
 8036202:	370c      	adds	r7, #12
 8036204:	46bd      	mov	sp, r7
 8036206:	f85d 7b04 	ldr.w	r7, [sp], #4
 803620a:	4770      	bx	lr

0803620c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 803620c:	b480      	push	{r7}
 803620e:	b083      	sub	sp, #12
 8036210:	af00      	add	r7, sp, #0
 8036212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8036214:	bf00      	nop
 8036216:	370c      	adds	r7, #12
 8036218:	46bd      	mov	sp, r7
 803621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803621e:	4770      	bx	lr

08036220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8036220:	b480      	push	{r7}
 8036222:	b085      	sub	sp, #20
 8036224:	af00      	add	r7, sp, #0
 8036226:	6078      	str	r0, [r7, #4]
 8036228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 803622a:	687b      	ldr	r3, [r7, #4]
 803622c:	681b      	ldr	r3, [r3, #0]
 803622e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8036230:	687b      	ldr	r3, [r7, #4]
 8036232:	4a40      	ldr	r2, [pc, #256]	; (8036334 <TIM_Base_SetConfig+0x114>)
 8036234:	4293      	cmp	r3, r2
 8036236:	d013      	beq.n	8036260 <TIM_Base_SetConfig+0x40>
 8036238:	687b      	ldr	r3, [r7, #4]
 803623a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803623e:	d00f      	beq.n	8036260 <TIM_Base_SetConfig+0x40>
 8036240:	687b      	ldr	r3, [r7, #4]
 8036242:	4a3d      	ldr	r2, [pc, #244]	; (8036338 <TIM_Base_SetConfig+0x118>)
 8036244:	4293      	cmp	r3, r2
 8036246:	d00b      	beq.n	8036260 <TIM_Base_SetConfig+0x40>
 8036248:	687b      	ldr	r3, [r7, #4]
 803624a:	4a3c      	ldr	r2, [pc, #240]	; (803633c <TIM_Base_SetConfig+0x11c>)
 803624c:	4293      	cmp	r3, r2
 803624e:	d007      	beq.n	8036260 <TIM_Base_SetConfig+0x40>
 8036250:	687b      	ldr	r3, [r7, #4]
 8036252:	4a3b      	ldr	r2, [pc, #236]	; (8036340 <TIM_Base_SetConfig+0x120>)
 8036254:	4293      	cmp	r3, r2
 8036256:	d003      	beq.n	8036260 <TIM_Base_SetConfig+0x40>
 8036258:	687b      	ldr	r3, [r7, #4]
 803625a:	4a3a      	ldr	r2, [pc, #232]	; (8036344 <TIM_Base_SetConfig+0x124>)
 803625c:	4293      	cmp	r3, r2
 803625e:	d108      	bne.n	8036272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8036260:	68fb      	ldr	r3, [r7, #12]
 8036262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8036266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8036268:	683b      	ldr	r3, [r7, #0]
 803626a:	685b      	ldr	r3, [r3, #4]
 803626c:	68fa      	ldr	r2, [r7, #12]
 803626e:	4313      	orrs	r3, r2
 8036270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8036272:	687b      	ldr	r3, [r7, #4]
 8036274:	4a2f      	ldr	r2, [pc, #188]	; (8036334 <TIM_Base_SetConfig+0x114>)
 8036276:	4293      	cmp	r3, r2
 8036278:	d01f      	beq.n	80362ba <TIM_Base_SetConfig+0x9a>
 803627a:	687b      	ldr	r3, [r7, #4]
 803627c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8036280:	d01b      	beq.n	80362ba <TIM_Base_SetConfig+0x9a>
 8036282:	687b      	ldr	r3, [r7, #4]
 8036284:	4a2c      	ldr	r2, [pc, #176]	; (8036338 <TIM_Base_SetConfig+0x118>)
 8036286:	4293      	cmp	r3, r2
 8036288:	d017      	beq.n	80362ba <TIM_Base_SetConfig+0x9a>
 803628a:	687b      	ldr	r3, [r7, #4]
 803628c:	4a2b      	ldr	r2, [pc, #172]	; (803633c <TIM_Base_SetConfig+0x11c>)
 803628e:	4293      	cmp	r3, r2
 8036290:	d013      	beq.n	80362ba <TIM_Base_SetConfig+0x9a>
 8036292:	687b      	ldr	r3, [r7, #4]
 8036294:	4a2a      	ldr	r2, [pc, #168]	; (8036340 <TIM_Base_SetConfig+0x120>)
 8036296:	4293      	cmp	r3, r2
 8036298:	d00f      	beq.n	80362ba <TIM_Base_SetConfig+0x9a>
 803629a:	687b      	ldr	r3, [r7, #4]
 803629c:	4a29      	ldr	r2, [pc, #164]	; (8036344 <TIM_Base_SetConfig+0x124>)
 803629e:	4293      	cmp	r3, r2
 80362a0:	d00b      	beq.n	80362ba <TIM_Base_SetConfig+0x9a>
 80362a2:	687b      	ldr	r3, [r7, #4]
 80362a4:	4a28      	ldr	r2, [pc, #160]	; (8036348 <TIM_Base_SetConfig+0x128>)
 80362a6:	4293      	cmp	r3, r2
 80362a8:	d007      	beq.n	80362ba <TIM_Base_SetConfig+0x9a>
 80362aa:	687b      	ldr	r3, [r7, #4]
 80362ac:	4a27      	ldr	r2, [pc, #156]	; (803634c <TIM_Base_SetConfig+0x12c>)
 80362ae:	4293      	cmp	r3, r2
 80362b0:	d003      	beq.n	80362ba <TIM_Base_SetConfig+0x9a>
 80362b2:	687b      	ldr	r3, [r7, #4]
 80362b4:	4a26      	ldr	r2, [pc, #152]	; (8036350 <TIM_Base_SetConfig+0x130>)
 80362b6:	4293      	cmp	r3, r2
 80362b8:	d108      	bne.n	80362cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80362ba:	68fb      	ldr	r3, [r7, #12]
 80362bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80362c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80362c2:	683b      	ldr	r3, [r7, #0]
 80362c4:	68db      	ldr	r3, [r3, #12]
 80362c6:	68fa      	ldr	r2, [r7, #12]
 80362c8:	4313      	orrs	r3, r2
 80362ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80362cc:	68fb      	ldr	r3, [r7, #12]
 80362ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80362d2:	683b      	ldr	r3, [r7, #0]
 80362d4:	695b      	ldr	r3, [r3, #20]
 80362d6:	4313      	orrs	r3, r2
 80362d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80362da:	687b      	ldr	r3, [r7, #4]
 80362dc:	68fa      	ldr	r2, [r7, #12]
 80362de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80362e0:	683b      	ldr	r3, [r7, #0]
 80362e2:	689a      	ldr	r2, [r3, #8]
 80362e4:	687b      	ldr	r3, [r7, #4]
 80362e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80362e8:	683b      	ldr	r3, [r7, #0]
 80362ea:	681a      	ldr	r2, [r3, #0]
 80362ec:	687b      	ldr	r3, [r7, #4]
 80362ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80362f0:	687b      	ldr	r3, [r7, #4]
 80362f2:	4a10      	ldr	r2, [pc, #64]	; (8036334 <TIM_Base_SetConfig+0x114>)
 80362f4:	4293      	cmp	r3, r2
 80362f6:	d00f      	beq.n	8036318 <TIM_Base_SetConfig+0xf8>
 80362f8:	687b      	ldr	r3, [r7, #4]
 80362fa:	4a12      	ldr	r2, [pc, #72]	; (8036344 <TIM_Base_SetConfig+0x124>)
 80362fc:	4293      	cmp	r3, r2
 80362fe:	d00b      	beq.n	8036318 <TIM_Base_SetConfig+0xf8>
 8036300:	687b      	ldr	r3, [r7, #4]
 8036302:	4a11      	ldr	r2, [pc, #68]	; (8036348 <TIM_Base_SetConfig+0x128>)
 8036304:	4293      	cmp	r3, r2
 8036306:	d007      	beq.n	8036318 <TIM_Base_SetConfig+0xf8>
 8036308:	687b      	ldr	r3, [r7, #4]
 803630a:	4a10      	ldr	r2, [pc, #64]	; (803634c <TIM_Base_SetConfig+0x12c>)
 803630c:	4293      	cmp	r3, r2
 803630e:	d003      	beq.n	8036318 <TIM_Base_SetConfig+0xf8>
 8036310:	687b      	ldr	r3, [r7, #4]
 8036312:	4a0f      	ldr	r2, [pc, #60]	; (8036350 <TIM_Base_SetConfig+0x130>)
 8036314:	4293      	cmp	r3, r2
 8036316:	d103      	bne.n	8036320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8036318:	683b      	ldr	r3, [r7, #0]
 803631a:	691a      	ldr	r2, [r3, #16]
 803631c:	687b      	ldr	r3, [r7, #4]
 803631e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8036320:	687b      	ldr	r3, [r7, #4]
 8036322:	2201      	movs	r2, #1
 8036324:	615a      	str	r2, [r3, #20]
}
 8036326:	bf00      	nop
 8036328:	3714      	adds	r7, #20
 803632a:	46bd      	mov	sp, r7
 803632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036330:	4770      	bx	lr
 8036332:	bf00      	nop
 8036334:	40010000 	.word	0x40010000
 8036338:	40000400 	.word	0x40000400
 803633c:	40000800 	.word	0x40000800
 8036340:	40000c00 	.word	0x40000c00
 8036344:	40010400 	.word	0x40010400
 8036348:	40014000 	.word	0x40014000
 803634c:	40014400 	.word	0x40014400
 8036350:	40014800 	.word	0x40014800

08036354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8036354:	b480      	push	{r7}
 8036356:	b087      	sub	sp, #28
 8036358:	af00      	add	r7, sp, #0
 803635a:	60f8      	str	r0, [r7, #12]
 803635c:	60b9      	str	r1, [r7, #8]
 803635e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8036360:	68fb      	ldr	r3, [r7, #12]
 8036362:	6a1b      	ldr	r3, [r3, #32]
 8036364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8036366:	68fb      	ldr	r3, [r7, #12]
 8036368:	6a1b      	ldr	r3, [r3, #32]
 803636a:	f023 0201 	bic.w	r2, r3, #1
 803636e:	68fb      	ldr	r3, [r7, #12]
 8036370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8036372:	68fb      	ldr	r3, [r7, #12]
 8036374:	699b      	ldr	r3, [r3, #24]
 8036376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8036378:	693b      	ldr	r3, [r7, #16]
 803637a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 803637e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8036380:	687b      	ldr	r3, [r7, #4]
 8036382:	011b      	lsls	r3, r3, #4
 8036384:	693a      	ldr	r2, [r7, #16]
 8036386:	4313      	orrs	r3, r2
 8036388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 803638a:	697b      	ldr	r3, [r7, #20]
 803638c:	f023 030a 	bic.w	r3, r3, #10
 8036390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8036392:	697a      	ldr	r2, [r7, #20]
 8036394:	68bb      	ldr	r3, [r7, #8]
 8036396:	4313      	orrs	r3, r2
 8036398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 803639a:	68fb      	ldr	r3, [r7, #12]
 803639c:	693a      	ldr	r2, [r7, #16]
 803639e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80363a0:	68fb      	ldr	r3, [r7, #12]
 80363a2:	697a      	ldr	r2, [r7, #20]
 80363a4:	621a      	str	r2, [r3, #32]
}
 80363a6:	bf00      	nop
 80363a8:	371c      	adds	r7, #28
 80363aa:	46bd      	mov	sp, r7
 80363ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80363b0:	4770      	bx	lr

080363b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80363b2:	b480      	push	{r7}
 80363b4:	b087      	sub	sp, #28
 80363b6:	af00      	add	r7, sp, #0
 80363b8:	60f8      	str	r0, [r7, #12]
 80363ba:	60b9      	str	r1, [r7, #8]
 80363bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80363be:	68fb      	ldr	r3, [r7, #12]
 80363c0:	6a1b      	ldr	r3, [r3, #32]
 80363c2:	f023 0210 	bic.w	r2, r3, #16
 80363c6:	68fb      	ldr	r3, [r7, #12]
 80363c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80363ca:	68fb      	ldr	r3, [r7, #12]
 80363cc:	699b      	ldr	r3, [r3, #24]
 80363ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80363d0:	68fb      	ldr	r3, [r7, #12]
 80363d2:	6a1b      	ldr	r3, [r3, #32]
 80363d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80363d6:	697b      	ldr	r3, [r7, #20]
 80363d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80363dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80363de:	687b      	ldr	r3, [r7, #4]
 80363e0:	031b      	lsls	r3, r3, #12
 80363e2:	697a      	ldr	r2, [r7, #20]
 80363e4:	4313      	orrs	r3, r2
 80363e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80363e8:	693b      	ldr	r3, [r7, #16]
 80363ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80363ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80363f0:	68bb      	ldr	r3, [r7, #8]
 80363f2:	011b      	lsls	r3, r3, #4
 80363f4:	693a      	ldr	r2, [r7, #16]
 80363f6:	4313      	orrs	r3, r2
 80363f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80363fa:	68fb      	ldr	r3, [r7, #12]
 80363fc:	697a      	ldr	r2, [r7, #20]
 80363fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8036400:	68fb      	ldr	r3, [r7, #12]
 8036402:	693a      	ldr	r2, [r7, #16]
 8036404:	621a      	str	r2, [r3, #32]
}
 8036406:	bf00      	nop
 8036408:	371c      	adds	r7, #28
 803640a:	46bd      	mov	sp, r7
 803640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036410:	4770      	bx	lr
	...

08036414 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8036414:	b480      	push	{r7}
 8036416:	b085      	sub	sp, #20
 8036418:	af00      	add	r7, sp, #0
 803641a:	6078      	str	r0, [r7, #4]
 803641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 803641e:	687b      	ldr	r3, [r7, #4]
 8036420:	689b      	ldr	r3, [r3, #8]
 8036422:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8036424:	68fa      	ldr	r2, [r7, #12]
 8036426:	4b09      	ldr	r3, [pc, #36]	; (803644c <TIM_ITRx_SetConfig+0x38>)
 8036428:	4013      	ands	r3, r2
 803642a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 803642c:	683a      	ldr	r2, [r7, #0]
 803642e:	68fb      	ldr	r3, [r7, #12]
 8036430:	4313      	orrs	r3, r2
 8036432:	f043 0307 	orr.w	r3, r3, #7
 8036436:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8036438:	687b      	ldr	r3, [r7, #4]
 803643a:	68fa      	ldr	r2, [r7, #12]
 803643c:	609a      	str	r2, [r3, #8]
}
 803643e:	bf00      	nop
 8036440:	3714      	adds	r7, #20
 8036442:	46bd      	mov	sp, r7
 8036444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036448:	4770      	bx	lr
 803644a:	bf00      	nop
 803644c:	ffcfff8f 	.word	0xffcfff8f

08036450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8036450:	b480      	push	{r7}
 8036452:	b087      	sub	sp, #28
 8036454:	af00      	add	r7, sp, #0
 8036456:	60f8      	str	r0, [r7, #12]
 8036458:	60b9      	str	r1, [r7, #8]
 803645a:	607a      	str	r2, [r7, #4]
 803645c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 803645e:	68fb      	ldr	r3, [r7, #12]
 8036460:	689b      	ldr	r3, [r3, #8]
 8036462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8036464:	697b      	ldr	r3, [r7, #20]
 8036466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 803646a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 803646c:	683b      	ldr	r3, [r7, #0]
 803646e:	021a      	lsls	r2, r3, #8
 8036470:	687b      	ldr	r3, [r7, #4]
 8036472:	431a      	orrs	r2, r3
 8036474:	68bb      	ldr	r3, [r7, #8]
 8036476:	4313      	orrs	r3, r2
 8036478:	697a      	ldr	r2, [r7, #20]
 803647a:	4313      	orrs	r3, r2
 803647c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 803647e:	68fb      	ldr	r3, [r7, #12]
 8036480:	697a      	ldr	r2, [r7, #20]
 8036482:	609a      	str	r2, [r3, #8]
}
 8036484:	bf00      	nop
 8036486:	371c      	adds	r7, #28
 8036488:	46bd      	mov	sp, r7
 803648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803648e:	4770      	bx	lr

08036490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8036490:	b480      	push	{r7}
 8036492:	b085      	sub	sp, #20
 8036494:	af00      	add	r7, sp, #0
 8036496:	6078      	str	r0, [r7, #4]
 8036498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 803649a:	687b      	ldr	r3, [r7, #4]
 803649c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80364a0:	2b01      	cmp	r3, #1
 80364a2:	d101      	bne.n	80364a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80364a4:	2302      	movs	r3, #2
 80364a6:	e06d      	b.n	8036584 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80364a8:	687b      	ldr	r3, [r7, #4]
 80364aa:	2201      	movs	r2, #1
 80364ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80364b0:	687b      	ldr	r3, [r7, #4]
 80364b2:	2202      	movs	r2, #2
 80364b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80364b8:	687b      	ldr	r3, [r7, #4]
 80364ba:	681b      	ldr	r3, [r3, #0]
 80364bc:	685b      	ldr	r3, [r3, #4]
 80364be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80364c0:	687b      	ldr	r3, [r7, #4]
 80364c2:	681b      	ldr	r3, [r3, #0]
 80364c4:	689b      	ldr	r3, [r3, #8]
 80364c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80364c8:	687b      	ldr	r3, [r7, #4]
 80364ca:	681b      	ldr	r3, [r3, #0]
 80364cc:	4a30      	ldr	r2, [pc, #192]	; (8036590 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80364ce:	4293      	cmp	r3, r2
 80364d0:	d004      	beq.n	80364dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80364d2:	687b      	ldr	r3, [r7, #4]
 80364d4:	681b      	ldr	r3, [r3, #0]
 80364d6:	4a2f      	ldr	r2, [pc, #188]	; (8036594 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80364d8:	4293      	cmp	r3, r2
 80364da:	d108      	bne.n	80364ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80364dc:	68fb      	ldr	r3, [r7, #12]
 80364de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80364e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80364e4:	683b      	ldr	r3, [r7, #0]
 80364e6:	685b      	ldr	r3, [r3, #4]
 80364e8:	68fa      	ldr	r2, [r7, #12]
 80364ea:	4313      	orrs	r3, r2
 80364ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80364ee:	68fb      	ldr	r3, [r7, #12]
 80364f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80364f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80364f6:	683b      	ldr	r3, [r7, #0]
 80364f8:	681b      	ldr	r3, [r3, #0]
 80364fa:	68fa      	ldr	r2, [r7, #12]
 80364fc:	4313      	orrs	r3, r2
 80364fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8036500:	687b      	ldr	r3, [r7, #4]
 8036502:	681b      	ldr	r3, [r3, #0]
 8036504:	68fa      	ldr	r2, [r7, #12]
 8036506:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8036508:	687b      	ldr	r3, [r7, #4]
 803650a:	681b      	ldr	r3, [r3, #0]
 803650c:	4a20      	ldr	r2, [pc, #128]	; (8036590 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 803650e:	4293      	cmp	r3, r2
 8036510:	d022      	beq.n	8036558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8036512:	687b      	ldr	r3, [r7, #4]
 8036514:	681b      	ldr	r3, [r3, #0]
 8036516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803651a:	d01d      	beq.n	8036558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 803651c:	687b      	ldr	r3, [r7, #4]
 803651e:	681b      	ldr	r3, [r3, #0]
 8036520:	4a1d      	ldr	r2, [pc, #116]	; (8036598 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8036522:	4293      	cmp	r3, r2
 8036524:	d018      	beq.n	8036558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8036526:	687b      	ldr	r3, [r7, #4]
 8036528:	681b      	ldr	r3, [r3, #0]
 803652a:	4a1c      	ldr	r2, [pc, #112]	; (803659c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 803652c:	4293      	cmp	r3, r2
 803652e:	d013      	beq.n	8036558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8036530:	687b      	ldr	r3, [r7, #4]
 8036532:	681b      	ldr	r3, [r3, #0]
 8036534:	4a1a      	ldr	r2, [pc, #104]	; (80365a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8036536:	4293      	cmp	r3, r2
 8036538:	d00e      	beq.n	8036558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 803653a:	687b      	ldr	r3, [r7, #4]
 803653c:	681b      	ldr	r3, [r3, #0]
 803653e:	4a15      	ldr	r2, [pc, #84]	; (8036594 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8036540:	4293      	cmp	r3, r2
 8036542:	d009      	beq.n	8036558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8036544:	687b      	ldr	r3, [r7, #4]
 8036546:	681b      	ldr	r3, [r3, #0]
 8036548:	4a16      	ldr	r2, [pc, #88]	; (80365a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 803654a:	4293      	cmp	r3, r2
 803654c:	d004      	beq.n	8036558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 803654e:	687b      	ldr	r3, [r7, #4]
 8036550:	681b      	ldr	r3, [r3, #0]
 8036552:	4a15      	ldr	r2, [pc, #84]	; (80365a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8036554:	4293      	cmp	r3, r2
 8036556:	d10c      	bne.n	8036572 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8036558:	68bb      	ldr	r3, [r7, #8]
 803655a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 803655e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8036560:	683b      	ldr	r3, [r7, #0]
 8036562:	689b      	ldr	r3, [r3, #8]
 8036564:	68ba      	ldr	r2, [r7, #8]
 8036566:	4313      	orrs	r3, r2
 8036568:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 803656a:	687b      	ldr	r3, [r7, #4]
 803656c:	681b      	ldr	r3, [r3, #0]
 803656e:	68ba      	ldr	r2, [r7, #8]
 8036570:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8036572:	687b      	ldr	r3, [r7, #4]
 8036574:	2201      	movs	r2, #1
 8036576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 803657a:	687b      	ldr	r3, [r7, #4]
 803657c:	2200      	movs	r2, #0
 803657e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8036582:	2300      	movs	r3, #0
}
 8036584:	4618      	mov	r0, r3
 8036586:	3714      	adds	r7, #20
 8036588:	46bd      	mov	sp, r7
 803658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803658e:	4770      	bx	lr
 8036590:	40010000 	.word	0x40010000
 8036594:	40010400 	.word	0x40010400
 8036598:	40000400 	.word	0x40000400
 803659c:	40000800 	.word	0x40000800
 80365a0:	40000c00 	.word	0x40000c00
 80365a4:	40001800 	.word	0x40001800
 80365a8:	40014000 	.word	0x40014000

080365ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80365ac:	b480      	push	{r7}
 80365ae:	b083      	sub	sp, #12
 80365b0:	af00      	add	r7, sp, #0
 80365b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80365b4:	bf00      	nop
 80365b6:	370c      	adds	r7, #12
 80365b8:	46bd      	mov	sp, r7
 80365ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80365be:	4770      	bx	lr

080365c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80365c0:	b480      	push	{r7}
 80365c2:	b083      	sub	sp, #12
 80365c4:	af00      	add	r7, sp, #0
 80365c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80365c8:	bf00      	nop
 80365ca:	370c      	adds	r7, #12
 80365cc:	46bd      	mov	sp, r7
 80365ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80365d2:	4770      	bx	lr

080365d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80365d4:	b480      	push	{r7}
 80365d6:	b083      	sub	sp, #12
 80365d8:	af00      	add	r7, sp, #0
 80365da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80365dc:	bf00      	nop
 80365de:	370c      	adds	r7, #12
 80365e0:	46bd      	mov	sp, r7
 80365e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80365e6:	4770      	bx	lr

080365e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80365e8:	b580      	push	{r7, lr}
 80365ea:	b082      	sub	sp, #8
 80365ec:	af00      	add	r7, sp, #0
 80365ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80365f0:	687b      	ldr	r3, [r7, #4]
 80365f2:	2b00      	cmp	r3, #0
 80365f4:	d101      	bne.n	80365fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80365f6:	2301      	movs	r3, #1
 80365f8:	e042      	b.n	8036680 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80365fa:	687b      	ldr	r3, [r7, #4]
 80365fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036600:	2b00      	cmp	r3, #0
 8036602:	d106      	bne.n	8036612 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8036604:	687b      	ldr	r3, [r7, #4]
 8036606:	2200      	movs	r2, #0
 8036608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 803660c:	6878      	ldr	r0, [r7, #4]
 803660e:	f7f5 fc65 	bl	802bedc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8036612:	687b      	ldr	r3, [r7, #4]
 8036614:	2224      	movs	r2, #36	; 0x24
 8036616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 803661a:	687b      	ldr	r3, [r7, #4]
 803661c:	681b      	ldr	r3, [r3, #0]
 803661e:	681a      	ldr	r2, [r3, #0]
 8036620:	687b      	ldr	r3, [r7, #4]
 8036622:	681b      	ldr	r3, [r3, #0]
 8036624:	f022 0201 	bic.w	r2, r2, #1
 8036628:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 803662a:	6878      	ldr	r0, [r7, #4]
 803662c:	f000 fdb2 	bl	8037194 <UART_SetConfig>
 8036630:	4603      	mov	r3, r0
 8036632:	2b01      	cmp	r3, #1
 8036634:	d101      	bne.n	803663a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8036636:	2301      	movs	r3, #1
 8036638:	e022      	b.n	8036680 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 803663a:	687b      	ldr	r3, [r7, #4]
 803663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803663e:	2b00      	cmp	r3, #0
 8036640:	d002      	beq.n	8036648 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8036642:	6878      	ldr	r0, [r7, #4]
 8036644:	f001 fb0e 	bl	8037c64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8036648:	687b      	ldr	r3, [r7, #4]
 803664a:	681b      	ldr	r3, [r3, #0]
 803664c:	685a      	ldr	r2, [r3, #4]
 803664e:	687b      	ldr	r3, [r7, #4]
 8036650:	681b      	ldr	r3, [r3, #0]
 8036652:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8036656:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8036658:	687b      	ldr	r3, [r7, #4]
 803665a:	681b      	ldr	r3, [r3, #0]
 803665c:	689a      	ldr	r2, [r3, #8]
 803665e:	687b      	ldr	r3, [r7, #4]
 8036660:	681b      	ldr	r3, [r3, #0]
 8036662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8036666:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8036668:	687b      	ldr	r3, [r7, #4]
 803666a:	681b      	ldr	r3, [r3, #0]
 803666c:	681a      	ldr	r2, [r3, #0]
 803666e:	687b      	ldr	r3, [r7, #4]
 8036670:	681b      	ldr	r3, [r3, #0]
 8036672:	f042 0201 	orr.w	r2, r2, #1
 8036676:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8036678:	6878      	ldr	r0, [r7, #4]
 803667a:	f001 fb95 	bl	8037da8 <UART_CheckIdleState>
 803667e:	4603      	mov	r3, r0
}
 8036680:	4618      	mov	r0, r3
 8036682:	3708      	adds	r7, #8
 8036684:	46bd      	mov	sp, r7
 8036686:	bd80      	pop	{r7, pc}

08036688 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8036688:	b580      	push	{r7, lr}
 803668a:	b08a      	sub	sp, #40	; 0x28
 803668c:	af02      	add	r7, sp, #8
 803668e:	60f8      	str	r0, [r7, #12]
 8036690:	60b9      	str	r1, [r7, #8]
 8036692:	603b      	str	r3, [r7, #0]
 8036694:	4613      	mov	r3, r2
 8036696:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8036698:	68fb      	ldr	r3, [r7, #12]
 803669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803669e:	2b20      	cmp	r3, #32
 80366a0:	f040 80c0 	bne.w	8036824 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80366a4:	68bb      	ldr	r3, [r7, #8]
 80366a6:	2b00      	cmp	r3, #0
 80366a8:	d002      	beq.n	80366b0 <HAL_UART_Receive+0x28>
 80366aa:	88fb      	ldrh	r3, [r7, #6]
 80366ac:	2b00      	cmp	r3, #0
 80366ae:	d101      	bne.n	80366b4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80366b0:	2301      	movs	r3, #1
 80366b2:	e0b8      	b.n	8036826 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80366b4:	68fb      	ldr	r3, [r7, #12]
 80366b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80366ba:	2b01      	cmp	r3, #1
 80366bc:	d101      	bne.n	80366c2 <HAL_UART_Receive+0x3a>
 80366be:	2302      	movs	r3, #2
 80366c0:	e0b1      	b.n	8036826 <HAL_UART_Receive+0x19e>
 80366c2:	68fb      	ldr	r3, [r7, #12]
 80366c4:	2201      	movs	r2, #1
 80366c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80366ca:	68fb      	ldr	r3, [r7, #12]
 80366cc:	2200      	movs	r2, #0
 80366ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80366d2:	68fb      	ldr	r3, [r7, #12]
 80366d4:	2222      	movs	r2, #34	; 0x22
 80366d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80366da:	68fb      	ldr	r3, [r7, #12]
 80366dc:	2200      	movs	r2, #0
 80366de:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80366e0:	f7f5 fe58 	bl	802c394 <HAL_GetTick>
 80366e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80366e6:	68fb      	ldr	r3, [r7, #12]
 80366e8:	88fa      	ldrh	r2, [r7, #6]
 80366ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80366ee:	68fb      	ldr	r3, [r7, #12]
 80366f0:	88fa      	ldrh	r2, [r7, #6]
 80366f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80366f6:	68fb      	ldr	r3, [r7, #12]
 80366f8:	689b      	ldr	r3, [r3, #8]
 80366fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80366fe:	d10e      	bne.n	803671e <HAL_UART_Receive+0x96>
 8036700:	68fb      	ldr	r3, [r7, #12]
 8036702:	691b      	ldr	r3, [r3, #16]
 8036704:	2b00      	cmp	r3, #0
 8036706:	d105      	bne.n	8036714 <HAL_UART_Receive+0x8c>
 8036708:	68fb      	ldr	r3, [r7, #12]
 803670a:	f240 12ff 	movw	r2, #511	; 0x1ff
 803670e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036712:	e02d      	b.n	8036770 <HAL_UART_Receive+0xe8>
 8036714:	68fb      	ldr	r3, [r7, #12]
 8036716:	22ff      	movs	r2, #255	; 0xff
 8036718:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803671c:	e028      	b.n	8036770 <HAL_UART_Receive+0xe8>
 803671e:	68fb      	ldr	r3, [r7, #12]
 8036720:	689b      	ldr	r3, [r3, #8]
 8036722:	2b00      	cmp	r3, #0
 8036724:	d10d      	bne.n	8036742 <HAL_UART_Receive+0xba>
 8036726:	68fb      	ldr	r3, [r7, #12]
 8036728:	691b      	ldr	r3, [r3, #16]
 803672a:	2b00      	cmp	r3, #0
 803672c:	d104      	bne.n	8036738 <HAL_UART_Receive+0xb0>
 803672e:	68fb      	ldr	r3, [r7, #12]
 8036730:	22ff      	movs	r2, #255	; 0xff
 8036732:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036736:	e01b      	b.n	8036770 <HAL_UART_Receive+0xe8>
 8036738:	68fb      	ldr	r3, [r7, #12]
 803673a:	227f      	movs	r2, #127	; 0x7f
 803673c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036740:	e016      	b.n	8036770 <HAL_UART_Receive+0xe8>
 8036742:	68fb      	ldr	r3, [r7, #12]
 8036744:	689b      	ldr	r3, [r3, #8]
 8036746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803674a:	d10d      	bne.n	8036768 <HAL_UART_Receive+0xe0>
 803674c:	68fb      	ldr	r3, [r7, #12]
 803674e:	691b      	ldr	r3, [r3, #16]
 8036750:	2b00      	cmp	r3, #0
 8036752:	d104      	bne.n	803675e <HAL_UART_Receive+0xd6>
 8036754:	68fb      	ldr	r3, [r7, #12]
 8036756:	227f      	movs	r2, #127	; 0x7f
 8036758:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803675c:	e008      	b.n	8036770 <HAL_UART_Receive+0xe8>
 803675e:	68fb      	ldr	r3, [r7, #12]
 8036760:	223f      	movs	r2, #63	; 0x3f
 8036762:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036766:	e003      	b.n	8036770 <HAL_UART_Receive+0xe8>
 8036768:	68fb      	ldr	r3, [r7, #12]
 803676a:	2200      	movs	r2, #0
 803676c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8036770:	68fb      	ldr	r3, [r7, #12]
 8036772:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8036776:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036778:	68fb      	ldr	r3, [r7, #12]
 803677a:	689b      	ldr	r3, [r3, #8]
 803677c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036780:	d108      	bne.n	8036794 <HAL_UART_Receive+0x10c>
 8036782:	68fb      	ldr	r3, [r7, #12]
 8036784:	691b      	ldr	r3, [r3, #16]
 8036786:	2b00      	cmp	r3, #0
 8036788:	d104      	bne.n	8036794 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 803678a:	2300      	movs	r3, #0
 803678c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 803678e:	68bb      	ldr	r3, [r7, #8]
 8036790:	61bb      	str	r3, [r7, #24]
 8036792:	e003      	b.n	803679c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8036794:	68bb      	ldr	r3, [r7, #8]
 8036796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8036798:	2300      	movs	r3, #0
 803679a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 803679c:	68fb      	ldr	r3, [r7, #12]
 803679e:	2200      	movs	r2, #0
 80367a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80367a4:	e032      	b.n	803680c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80367a6:	683b      	ldr	r3, [r7, #0]
 80367a8:	9300      	str	r3, [sp, #0]
 80367aa:	697b      	ldr	r3, [r7, #20]
 80367ac:	2200      	movs	r2, #0
 80367ae:	2120      	movs	r1, #32
 80367b0:	68f8      	ldr	r0, [r7, #12]
 80367b2:	f001 fb44 	bl	8037e3e <UART_WaitOnFlagUntilTimeout>
 80367b6:	4603      	mov	r3, r0
 80367b8:	2b00      	cmp	r3, #0
 80367ba:	d001      	beq.n	80367c0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80367bc:	2303      	movs	r3, #3
 80367be:	e032      	b.n	8036826 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80367c0:	69fb      	ldr	r3, [r7, #28]
 80367c2:	2b00      	cmp	r3, #0
 80367c4:	d10c      	bne.n	80367e0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80367c6:	68fb      	ldr	r3, [r7, #12]
 80367c8:	681b      	ldr	r3, [r3, #0]
 80367ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80367cc:	b29a      	uxth	r2, r3
 80367ce:	8a7b      	ldrh	r3, [r7, #18]
 80367d0:	4013      	ands	r3, r2
 80367d2:	b29a      	uxth	r2, r3
 80367d4:	69bb      	ldr	r3, [r7, #24]
 80367d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80367d8:	69bb      	ldr	r3, [r7, #24]
 80367da:	3302      	adds	r3, #2
 80367dc:	61bb      	str	r3, [r7, #24]
 80367de:	e00c      	b.n	80367fa <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80367e0:	68fb      	ldr	r3, [r7, #12]
 80367e2:	681b      	ldr	r3, [r3, #0]
 80367e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80367e6:	b2da      	uxtb	r2, r3
 80367e8:	8a7b      	ldrh	r3, [r7, #18]
 80367ea:	b2db      	uxtb	r3, r3
 80367ec:	4013      	ands	r3, r2
 80367ee:	b2da      	uxtb	r2, r3
 80367f0:	69fb      	ldr	r3, [r7, #28]
 80367f2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80367f4:	69fb      	ldr	r3, [r7, #28]
 80367f6:	3301      	adds	r3, #1
 80367f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80367fa:	68fb      	ldr	r3, [r7, #12]
 80367fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036800:	b29b      	uxth	r3, r3
 8036802:	3b01      	subs	r3, #1
 8036804:	b29a      	uxth	r2, r3
 8036806:	68fb      	ldr	r3, [r7, #12]
 8036808:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 803680c:	68fb      	ldr	r3, [r7, #12]
 803680e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036812:	b29b      	uxth	r3, r3
 8036814:	2b00      	cmp	r3, #0
 8036816:	d1c6      	bne.n	80367a6 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8036818:	68fb      	ldr	r3, [r7, #12]
 803681a:	2220      	movs	r2, #32
 803681c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8036820:	2300      	movs	r3, #0
 8036822:	e000      	b.n	8036826 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8036824:	2302      	movs	r3, #2
  }
}
 8036826:	4618      	mov	r0, r3
 8036828:	3720      	adds	r7, #32
 803682a:	46bd      	mov	sp, r7
 803682c:	bd80      	pop	{r7, pc}
	...

08036830 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8036830:	b480      	push	{r7}
 8036832:	b091      	sub	sp, #68	; 0x44
 8036834:	af00      	add	r7, sp, #0
 8036836:	60f8      	str	r0, [r7, #12]
 8036838:	60b9      	str	r1, [r7, #8]
 803683a:	4613      	mov	r3, r2
 803683c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 803683e:	68fb      	ldr	r3, [r7, #12]
 8036840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036844:	2b20      	cmp	r3, #32
 8036846:	f040 808c 	bne.w	8036962 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 803684a:	68bb      	ldr	r3, [r7, #8]
 803684c:	2b00      	cmp	r3, #0
 803684e:	d002      	beq.n	8036856 <HAL_UART_Transmit_IT+0x26>
 8036850:	88fb      	ldrh	r3, [r7, #6]
 8036852:	2b00      	cmp	r3, #0
 8036854:	d101      	bne.n	803685a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8036856:	2301      	movs	r3, #1
 8036858:	e084      	b.n	8036964 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 803685a:	68fb      	ldr	r3, [r7, #12]
 803685c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8036860:	2b01      	cmp	r3, #1
 8036862:	d101      	bne.n	8036868 <HAL_UART_Transmit_IT+0x38>
 8036864:	2302      	movs	r3, #2
 8036866:	e07d      	b.n	8036964 <HAL_UART_Transmit_IT+0x134>
 8036868:	68fb      	ldr	r3, [r7, #12]
 803686a:	2201      	movs	r2, #1
 803686c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8036870:	68fb      	ldr	r3, [r7, #12]
 8036872:	68ba      	ldr	r2, [r7, #8]
 8036874:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8036876:	68fb      	ldr	r3, [r7, #12]
 8036878:	88fa      	ldrh	r2, [r7, #6]
 803687a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 803687e:	68fb      	ldr	r3, [r7, #12]
 8036880:	88fa      	ldrh	r2, [r7, #6]
 8036882:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8036886:	68fb      	ldr	r3, [r7, #12]
 8036888:	2200      	movs	r2, #0
 803688a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 803688c:	68fb      	ldr	r3, [r7, #12]
 803688e:	2200      	movs	r2, #0
 8036890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8036894:	68fb      	ldr	r3, [r7, #12]
 8036896:	2221      	movs	r2, #33	; 0x21
 8036898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 803689c:	68fb      	ldr	r3, [r7, #12]
 803689e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80368a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80368a4:	d12e      	bne.n	8036904 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80368a6:	68fb      	ldr	r3, [r7, #12]
 80368a8:	689b      	ldr	r3, [r3, #8]
 80368aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80368ae:	d107      	bne.n	80368c0 <HAL_UART_Transmit_IT+0x90>
 80368b0:	68fb      	ldr	r3, [r7, #12]
 80368b2:	691b      	ldr	r3, [r3, #16]
 80368b4:	2b00      	cmp	r3, #0
 80368b6:	d103      	bne.n	80368c0 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80368b8:	68fb      	ldr	r3, [r7, #12]
 80368ba:	4a2d      	ldr	r2, [pc, #180]	; (8036970 <HAL_UART_Transmit_IT+0x140>)
 80368bc:	675a      	str	r2, [r3, #116]	; 0x74
 80368be:	e002      	b.n	80368c6 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80368c0:	68fb      	ldr	r3, [r7, #12]
 80368c2:	4a2c      	ldr	r2, [pc, #176]	; (8036974 <HAL_UART_Transmit_IT+0x144>)
 80368c4:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80368c6:	68fb      	ldr	r3, [r7, #12]
 80368c8:	2200      	movs	r2, #0
 80368ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80368ce:	68fb      	ldr	r3, [r7, #12]
 80368d0:	681b      	ldr	r3, [r3, #0]
 80368d2:	3308      	adds	r3, #8
 80368d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80368d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80368d8:	e853 3f00 	ldrex	r3, [r3]
 80368dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80368de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80368e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80368e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80368e6:	68fb      	ldr	r3, [r7, #12]
 80368e8:	681b      	ldr	r3, [r3, #0]
 80368ea:	3308      	adds	r3, #8
 80368ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80368ee:	637a      	str	r2, [r7, #52]	; 0x34
 80368f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80368f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80368f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80368f6:	e841 2300 	strex	r3, r2, [r1]
 80368fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80368fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80368fe:	2b00      	cmp	r3, #0
 8036900:	d1e5      	bne.n	80368ce <HAL_UART_Transmit_IT+0x9e>
 8036902:	e02c      	b.n	803695e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036904:	68fb      	ldr	r3, [r7, #12]
 8036906:	689b      	ldr	r3, [r3, #8]
 8036908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803690c:	d107      	bne.n	803691e <HAL_UART_Transmit_IT+0xee>
 803690e:	68fb      	ldr	r3, [r7, #12]
 8036910:	691b      	ldr	r3, [r3, #16]
 8036912:	2b00      	cmp	r3, #0
 8036914:	d103      	bne.n	803691e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8036916:	68fb      	ldr	r3, [r7, #12]
 8036918:	4a17      	ldr	r2, [pc, #92]	; (8036978 <HAL_UART_Transmit_IT+0x148>)
 803691a:	675a      	str	r2, [r3, #116]	; 0x74
 803691c:	e002      	b.n	8036924 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 803691e:	68fb      	ldr	r3, [r7, #12]
 8036920:	4a16      	ldr	r2, [pc, #88]	; (803697c <HAL_UART_Transmit_IT+0x14c>)
 8036922:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8036924:	68fb      	ldr	r3, [r7, #12]
 8036926:	2200      	movs	r2, #0
 8036928:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 803692c:	68fb      	ldr	r3, [r7, #12]
 803692e:	681b      	ldr	r3, [r3, #0]
 8036930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036932:	697b      	ldr	r3, [r7, #20]
 8036934:	e853 3f00 	ldrex	r3, [r3]
 8036938:	613b      	str	r3, [r7, #16]
   return(result);
 803693a:	693b      	ldr	r3, [r7, #16]
 803693c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8036940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8036942:	68fb      	ldr	r3, [r7, #12]
 8036944:	681b      	ldr	r3, [r3, #0]
 8036946:	461a      	mov	r2, r3
 8036948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803694a:	623b      	str	r3, [r7, #32]
 803694c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803694e:	69f9      	ldr	r1, [r7, #28]
 8036950:	6a3a      	ldr	r2, [r7, #32]
 8036952:	e841 2300 	strex	r3, r2, [r1]
 8036956:	61bb      	str	r3, [r7, #24]
   return(result);
 8036958:	69bb      	ldr	r3, [r7, #24]
 803695a:	2b00      	cmp	r3, #0
 803695c:	d1e6      	bne.n	803692c <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 803695e:	2300      	movs	r3, #0
 8036960:	e000      	b.n	8036964 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8036962:	2302      	movs	r3, #2
  }
}
 8036964:	4618      	mov	r0, r3
 8036966:	3744      	adds	r7, #68	; 0x44
 8036968:	46bd      	mov	sp, r7
 803696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803696e:	4770      	bx	lr
 8036970:	08038577 	.word	0x08038577
 8036974:	08038497 	.word	0x08038497
 8036978:	080383d5 	.word	0x080383d5
 803697c:	0803831d 	.word	0x0803831d

08036980 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8036980:	b580      	push	{r7, lr}
 8036982:	b08a      	sub	sp, #40	; 0x28
 8036984:	af00      	add	r7, sp, #0
 8036986:	60f8      	str	r0, [r7, #12]
 8036988:	60b9      	str	r1, [r7, #8]
 803698a:	4613      	mov	r3, r2
 803698c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 803698e:	68fb      	ldr	r3, [r7, #12]
 8036990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8036994:	2b20      	cmp	r3, #32
 8036996:	d142      	bne.n	8036a1e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8036998:	68bb      	ldr	r3, [r7, #8]
 803699a:	2b00      	cmp	r3, #0
 803699c:	d002      	beq.n	80369a4 <HAL_UART_Receive_IT+0x24>
 803699e:	88fb      	ldrh	r3, [r7, #6]
 80369a0:	2b00      	cmp	r3, #0
 80369a2:	d101      	bne.n	80369a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80369a4:	2301      	movs	r3, #1
 80369a6:	e03b      	b.n	8036a20 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80369a8:	68fb      	ldr	r3, [r7, #12]
 80369aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80369ae:	2b01      	cmp	r3, #1
 80369b0:	d101      	bne.n	80369b6 <HAL_UART_Receive_IT+0x36>
 80369b2:	2302      	movs	r3, #2
 80369b4:	e034      	b.n	8036a20 <HAL_UART_Receive_IT+0xa0>
 80369b6:	68fb      	ldr	r3, [r7, #12]
 80369b8:	2201      	movs	r2, #1
 80369ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80369be:	68fb      	ldr	r3, [r7, #12]
 80369c0:	2200      	movs	r2, #0
 80369c2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80369c4:	68fb      	ldr	r3, [r7, #12]
 80369c6:	681b      	ldr	r3, [r3, #0]
 80369c8:	4a17      	ldr	r2, [pc, #92]	; (8036a28 <HAL_UART_Receive_IT+0xa8>)
 80369ca:	4293      	cmp	r3, r2
 80369cc:	d01f      	beq.n	8036a0e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80369ce:	68fb      	ldr	r3, [r7, #12]
 80369d0:	681b      	ldr	r3, [r3, #0]
 80369d2:	685b      	ldr	r3, [r3, #4]
 80369d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80369d8:	2b00      	cmp	r3, #0
 80369da:	d018      	beq.n	8036a0e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80369dc:	68fb      	ldr	r3, [r7, #12]
 80369de:	681b      	ldr	r3, [r3, #0]
 80369e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80369e2:	697b      	ldr	r3, [r7, #20]
 80369e4:	e853 3f00 	ldrex	r3, [r3]
 80369e8:	613b      	str	r3, [r7, #16]
   return(result);
 80369ea:	693b      	ldr	r3, [r7, #16]
 80369ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80369f0:	627b      	str	r3, [r7, #36]	; 0x24
 80369f2:	68fb      	ldr	r3, [r7, #12]
 80369f4:	681b      	ldr	r3, [r3, #0]
 80369f6:	461a      	mov	r2, r3
 80369f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80369fa:	623b      	str	r3, [r7, #32]
 80369fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80369fe:	69f9      	ldr	r1, [r7, #28]
 8036a00:	6a3a      	ldr	r2, [r7, #32]
 8036a02:	e841 2300 	strex	r3, r2, [r1]
 8036a06:	61bb      	str	r3, [r7, #24]
   return(result);
 8036a08:	69bb      	ldr	r3, [r7, #24]
 8036a0a:	2b00      	cmp	r3, #0
 8036a0c:	d1e6      	bne.n	80369dc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8036a0e:	88fb      	ldrh	r3, [r7, #6]
 8036a10:	461a      	mov	r2, r3
 8036a12:	68b9      	ldr	r1, [r7, #8]
 8036a14:	68f8      	ldr	r0, [r7, #12]
 8036a16:	f001 fadb 	bl	8037fd0 <UART_Start_Receive_IT>
 8036a1a:	4603      	mov	r3, r0
 8036a1c:	e000      	b.n	8036a20 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8036a1e:	2302      	movs	r3, #2
  }
}
 8036a20:	4618      	mov	r0, r3
 8036a22:	3728      	adds	r7, #40	; 0x28
 8036a24:	46bd      	mov	sp, r7
 8036a26:	bd80      	pop	{r7, pc}
 8036a28:	58000c00 	.word	0x58000c00

08036a2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8036a2c:	b580      	push	{r7, lr}
 8036a2e:	b0ba      	sub	sp, #232	; 0xe8
 8036a30:	af00      	add	r7, sp, #0
 8036a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8036a34:	687b      	ldr	r3, [r7, #4]
 8036a36:	681b      	ldr	r3, [r3, #0]
 8036a38:	69db      	ldr	r3, [r3, #28]
 8036a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8036a3e:	687b      	ldr	r3, [r7, #4]
 8036a40:	681b      	ldr	r3, [r3, #0]
 8036a42:	681b      	ldr	r3, [r3, #0]
 8036a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8036a48:	687b      	ldr	r3, [r7, #4]
 8036a4a:	681b      	ldr	r3, [r3, #0]
 8036a4c:	689b      	ldr	r3, [r3, #8]
 8036a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8036a52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8036a56:	f640 030f 	movw	r3, #2063	; 0x80f
 8036a5a:	4013      	ands	r3, r2
 8036a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8036a60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8036a64:	2b00      	cmp	r3, #0
 8036a66:	d11b      	bne.n	8036aa0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8036a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036a6c:	f003 0320 	and.w	r3, r3, #32
 8036a70:	2b00      	cmp	r3, #0
 8036a72:	d015      	beq.n	8036aa0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8036a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036a78:	f003 0320 	and.w	r3, r3, #32
 8036a7c:	2b00      	cmp	r3, #0
 8036a7e:	d105      	bne.n	8036a8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8036a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8036a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8036a88:	2b00      	cmp	r3, #0
 8036a8a:	d009      	beq.n	8036aa0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8036a8c:	687b      	ldr	r3, [r7, #4]
 8036a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036a90:	2b00      	cmp	r3, #0
 8036a92:	f000 835a 	beq.w	803714a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8036a96:	687b      	ldr	r3, [r7, #4]
 8036a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036a9a:	6878      	ldr	r0, [r7, #4]
 8036a9c:	4798      	blx	r3
      }
      return;
 8036a9e:	e354      	b.n	803714a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8036aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8036aa4:	2b00      	cmp	r3, #0
 8036aa6:	f000 811f 	beq.w	8036ce8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8036aaa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8036aae:	4b8b      	ldr	r3, [pc, #556]	; (8036cdc <HAL_UART_IRQHandler+0x2b0>)
 8036ab0:	4013      	ands	r3, r2
 8036ab2:	2b00      	cmp	r3, #0
 8036ab4:	d106      	bne.n	8036ac4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8036ab6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8036aba:	4b89      	ldr	r3, [pc, #548]	; (8036ce0 <HAL_UART_IRQHandler+0x2b4>)
 8036abc:	4013      	ands	r3, r2
 8036abe:	2b00      	cmp	r3, #0
 8036ac0:	f000 8112 	beq.w	8036ce8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8036ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036ac8:	f003 0301 	and.w	r3, r3, #1
 8036acc:	2b00      	cmp	r3, #0
 8036ace:	d011      	beq.n	8036af4 <HAL_UART_IRQHandler+0xc8>
 8036ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8036ad8:	2b00      	cmp	r3, #0
 8036ada:	d00b      	beq.n	8036af4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8036adc:	687b      	ldr	r3, [r7, #4]
 8036ade:	681b      	ldr	r3, [r3, #0]
 8036ae0:	2201      	movs	r2, #1
 8036ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8036ae4:	687b      	ldr	r3, [r7, #4]
 8036ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036aea:	f043 0201 	orr.w	r2, r3, #1
 8036aee:	687b      	ldr	r3, [r7, #4]
 8036af0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8036af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036af8:	f003 0302 	and.w	r3, r3, #2
 8036afc:	2b00      	cmp	r3, #0
 8036afe:	d011      	beq.n	8036b24 <HAL_UART_IRQHandler+0xf8>
 8036b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8036b04:	f003 0301 	and.w	r3, r3, #1
 8036b08:	2b00      	cmp	r3, #0
 8036b0a:	d00b      	beq.n	8036b24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8036b0c:	687b      	ldr	r3, [r7, #4]
 8036b0e:	681b      	ldr	r3, [r3, #0]
 8036b10:	2202      	movs	r2, #2
 8036b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8036b14:	687b      	ldr	r3, [r7, #4]
 8036b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036b1a:	f043 0204 	orr.w	r2, r3, #4
 8036b1e:	687b      	ldr	r3, [r7, #4]
 8036b20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8036b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036b28:	f003 0304 	and.w	r3, r3, #4
 8036b2c:	2b00      	cmp	r3, #0
 8036b2e:	d011      	beq.n	8036b54 <HAL_UART_IRQHandler+0x128>
 8036b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8036b34:	f003 0301 	and.w	r3, r3, #1
 8036b38:	2b00      	cmp	r3, #0
 8036b3a:	d00b      	beq.n	8036b54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8036b3c:	687b      	ldr	r3, [r7, #4]
 8036b3e:	681b      	ldr	r3, [r3, #0]
 8036b40:	2204      	movs	r2, #4
 8036b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8036b44:	687b      	ldr	r3, [r7, #4]
 8036b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036b4a:	f043 0202 	orr.w	r2, r3, #2
 8036b4e:	687b      	ldr	r3, [r7, #4]
 8036b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8036b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036b58:	f003 0308 	and.w	r3, r3, #8
 8036b5c:	2b00      	cmp	r3, #0
 8036b5e:	d017      	beq.n	8036b90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8036b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036b64:	f003 0320 	and.w	r3, r3, #32
 8036b68:	2b00      	cmp	r3, #0
 8036b6a:	d105      	bne.n	8036b78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8036b6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8036b70:	4b5a      	ldr	r3, [pc, #360]	; (8036cdc <HAL_UART_IRQHandler+0x2b0>)
 8036b72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8036b74:	2b00      	cmp	r3, #0
 8036b76:	d00b      	beq.n	8036b90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8036b78:	687b      	ldr	r3, [r7, #4]
 8036b7a:	681b      	ldr	r3, [r3, #0]
 8036b7c:	2208      	movs	r2, #8
 8036b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8036b80:	687b      	ldr	r3, [r7, #4]
 8036b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036b86:	f043 0208 	orr.w	r2, r3, #8
 8036b8a:	687b      	ldr	r3, [r7, #4]
 8036b8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8036b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8036b98:	2b00      	cmp	r3, #0
 8036b9a:	d012      	beq.n	8036bc2 <HAL_UART_IRQHandler+0x196>
 8036b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036ba0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8036ba4:	2b00      	cmp	r3, #0
 8036ba6:	d00c      	beq.n	8036bc2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8036ba8:	687b      	ldr	r3, [r7, #4]
 8036baa:	681b      	ldr	r3, [r3, #0]
 8036bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8036bb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8036bb2:	687b      	ldr	r3, [r7, #4]
 8036bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036bb8:	f043 0220 	orr.w	r2, r3, #32
 8036bbc:	687b      	ldr	r3, [r7, #4]
 8036bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8036bc2:	687b      	ldr	r3, [r7, #4]
 8036bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036bc8:	2b00      	cmp	r3, #0
 8036bca:	f000 82c0 	beq.w	803714e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8036bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036bd2:	f003 0320 	and.w	r3, r3, #32
 8036bd6:	2b00      	cmp	r3, #0
 8036bd8:	d013      	beq.n	8036c02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8036bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036bde:	f003 0320 	and.w	r3, r3, #32
 8036be2:	2b00      	cmp	r3, #0
 8036be4:	d105      	bne.n	8036bf2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8036be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8036bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8036bee:	2b00      	cmp	r3, #0
 8036bf0:	d007      	beq.n	8036c02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8036bf2:	687b      	ldr	r3, [r7, #4]
 8036bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036bf6:	2b00      	cmp	r3, #0
 8036bf8:	d003      	beq.n	8036c02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8036bfa:	687b      	ldr	r3, [r7, #4]
 8036bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036bfe:	6878      	ldr	r0, [r7, #4]
 8036c00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8036c02:	687b      	ldr	r3, [r7, #4]
 8036c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036c08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8036c0c:	687b      	ldr	r3, [r7, #4]
 8036c0e:	681b      	ldr	r3, [r3, #0]
 8036c10:	689b      	ldr	r3, [r3, #8]
 8036c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036c16:	2b40      	cmp	r3, #64	; 0x40
 8036c18:	d005      	beq.n	8036c26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8036c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8036c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8036c22:	2b00      	cmp	r3, #0
 8036c24:	d04f      	beq.n	8036cc6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8036c26:	6878      	ldr	r0, [r7, #4]
 8036c28:	f001 fafc 	bl	8038224 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036c2c:	687b      	ldr	r3, [r7, #4]
 8036c2e:	681b      	ldr	r3, [r3, #0]
 8036c30:	689b      	ldr	r3, [r3, #8]
 8036c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036c36:	2b40      	cmp	r3, #64	; 0x40
 8036c38:	d141      	bne.n	8036cbe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8036c3a:	687b      	ldr	r3, [r7, #4]
 8036c3c:	681b      	ldr	r3, [r3, #0]
 8036c3e:	3308      	adds	r3, #8
 8036c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8036c48:	e853 3f00 	ldrex	r3, [r3]
 8036c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8036c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8036c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8036c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8036c5c:	687b      	ldr	r3, [r7, #4]
 8036c5e:	681b      	ldr	r3, [r3, #0]
 8036c60:	3308      	adds	r3, #8
 8036c62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8036c66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8036c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8036c72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8036c76:	e841 2300 	strex	r3, r2, [r1]
 8036c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8036c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8036c82:	2b00      	cmp	r3, #0
 8036c84:	d1d9      	bne.n	8036c3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8036c86:	687b      	ldr	r3, [r7, #4]
 8036c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036c8a:	2b00      	cmp	r3, #0
 8036c8c:	d013      	beq.n	8036cb6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8036c8e:	687b      	ldr	r3, [r7, #4]
 8036c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036c92:	4a14      	ldr	r2, [pc, #80]	; (8036ce4 <HAL_UART_IRQHandler+0x2b8>)
 8036c94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8036c96:	687b      	ldr	r3, [r7, #4]
 8036c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036c9a:	4618      	mov	r0, r3
 8036c9c:	f7f7 f95a 	bl	802df54 <HAL_DMA_Abort_IT>
 8036ca0:	4603      	mov	r3, r0
 8036ca2:	2b00      	cmp	r3, #0
 8036ca4:	d017      	beq.n	8036cd6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8036ca6:	687b      	ldr	r3, [r7, #4]
 8036ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036cac:	687a      	ldr	r2, [r7, #4]
 8036cae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8036cb0:	4610      	mov	r0, r2
 8036cb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036cb4:	e00f      	b.n	8036cd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8036cb6:	6878      	ldr	r0, [r7, #4]
 8036cb8:	f000 fa56 	bl	8037168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036cbc:	e00b      	b.n	8036cd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8036cbe:	6878      	ldr	r0, [r7, #4]
 8036cc0:	f000 fa52 	bl	8037168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036cc4:	e007      	b.n	8036cd6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8036cc6:	6878      	ldr	r0, [r7, #4]
 8036cc8:	f000 fa4e 	bl	8037168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036ccc:	687b      	ldr	r3, [r7, #4]
 8036cce:	2200      	movs	r2, #0
 8036cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8036cd4:	e23b      	b.n	803714e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036cd6:	bf00      	nop
    return;
 8036cd8:	e239      	b.n	803714e <HAL_UART_IRQHandler+0x722>
 8036cda:	bf00      	nop
 8036cdc:	10000001 	.word	0x10000001
 8036ce0:	04000120 	.word	0x04000120
 8036ce4:	080382f1 	.word	0x080382f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8036ce8:	687b      	ldr	r3, [r7, #4]
 8036cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8036cec:	2b01      	cmp	r3, #1
 8036cee:	f040 81ce 	bne.w	803708e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8036cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036cf6:	f003 0310 	and.w	r3, r3, #16
 8036cfa:	2b00      	cmp	r3, #0
 8036cfc:	f000 81c7 	beq.w	803708e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8036d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036d04:	f003 0310 	and.w	r3, r3, #16
 8036d08:	2b00      	cmp	r3, #0
 8036d0a:	f000 81c0 	beq.w	803708e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8036d0e:	687b      	ldr	r3, [r7, #4]
 8036d10:	681b      	ldr	r3, [r3, #0]
 8036d12:	2210      	movs	r2, #16
 8036d14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036d16:	687b      	ldr	r3, [r7, #4]
 8036d18:	681b      	ldr	r3, [r3, #0]
 8036d1a:	689b      	ldr	r3, [r3, #8]
 8036d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036d20:	2b40      	cmp	r3, #64	; 0x40
 8036d22:	f040 813b 	bne.w	8036f9c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8036d26:	687b      	ldr	r3, [r7, #4]
 8036d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d2a:	681b      	ldr	r3, [r3, #0]
 8036d2c:	4a8b      	ldr	r2, [pc, #556]	; (8036f5c <HAL_UART_IRQHandler+0x530>)
 8036d2e:	4293      	cmp	r3, r2
 8036d30:	d059      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036d32:	687b      	ldr	r3, [r7, #4]
 8036d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d36:	681b      	ldr	r3, [r3, #0]
 8036d38:	4a89      	ldr	r2, [pc, #548]	; (8036f60 <HAL_UART_IRQHandler+0x534>)
 8036d3a:	4293      	cmp	r3, r2
 8036d3c:	d053      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036d3e:	687b      	ldr	r3, [r7, #4]
 8036d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d42:	681b      	ldr	r3, [r3, #0]
 8036d44:	4a87      	ldr	r2, [pc, #540]	; (8036f64 <HAL_UART_IRQHandler+0x538>)
 8036d46:	4293      	cmp	r3, r2
 8036d48:	d04d      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036d4a:	687b      	ldr	r3, [r7, #4]
 8036d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d4e:	681b      	ldr	r3, [r3, #0]
 8036d50:	4a85      	ldr	r2, [pc, #532]	; (8036f68 <HAL_UART_IRQHandler+0x53c>)
 8036d52:	4293      	cmp	r3, r2
 8036d54:	d047      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036d56:	687b      	ldr	r3, [r7, #4]
 8036d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d5a:	681b      	ldr	r3, [r3, #0]
 8036d5c:	4a83      	ldr	r2, [pc, #524]	; (8036f6c <HAL_UART_IRQHandler+0x540>)
 8036d5e:	4293      	cmp	r3, r2
 8036d60:	d041      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036d62:	687b      	ldr	r3, [r7, #4]
 8036d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d66:	681b      	ldr	r3, [r3, #0]
 8036d68:	4a81      	ldr	r2, [pc, #516]	; (8036f70 <HAL_UART_IRQHandler+0x544>)
 8036d6a:	4293      	cmp	r3, r2
 8036d6c:	d03b      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036d6e:	687b      	ldr	r3, [r7, #4]
 8036d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d72:	681b      	ldr	r3, [r3, #0]
 8036d74:	4a7f      	ldr	r2, [pc, #508]	; (8036f74 <HAL_UART_IRQHandler+0x548>)
 8036d76:	4293      	cmp	r3, r2
 8036d78:	d035      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036d7a:	687b      	ldr	r3, [r7, #4]
 8036d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d7e:	681b      	ldr	r3, [r3, #0]
 8036d80:	4a7d      	ldr	r2, [pc, #500]	; (8036f78 <HAL_UART_IRQHandler+0x54c>)
 8036d82:	4293      	cmp	r3, r2
 8036d84:	d02f      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036d86:	687b      	ldr	r3, [r7, #4]
 8036d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d8a:	681b      	ldr	r3, [r3, #0]
 8036d8c:	4a7b      	ldr	r2, [pc, #492]	; (8036f7c <HAL_UART_IRQHandler+0x550>)
 8036d8e:	4293      	cmp	r3, r2
 8036d90:	d029      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036d92:	687b      	ldr	r3, [r7, #4]
 8036d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d96:	681b      	ldr	r3, [r3, #0]
 8036d98:	4a79      	ldr	r2, [pc, #484]	; (8036f80 <HAL_UART_IRQHandler+0x554>)
 8036d9a:	4293      	cmp	r3, r2
 8036d9c:	d023      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036d9e:	687b      	ldr	r3, [r7, #4]
 8036da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036da2:	681b      	ldr	r3, [r3, #0]
 8036da4:	4a77      	ldr	r2, [pc, #476]	; (8036f84 <HAL_UART_IRQHandler+0x558>)
 8036da6:	4293      	cmp	r3, r2
 8036da8:	d01d      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036daa:	687b      	ldr	r3, [r7, #4]
 8036dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036dae:	681b      	ldr	r3, [r3, #0]
 8036db0:	4a75      	ldr	r2, [pc, #468]	; (8036f88 <HAL_UART_IRQHandler+0x55c>)
 8036db2:	4293      	cmp	r3, r2
 8036db4:	d017      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036db6:	687b      	ldr	r3, [r7, #4]
 8036db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036dba:	681b      	ldr	r3, [r3, #0]
 8036dbc:	4a73      	ldr	r2, [pc, #460]	; (8036f8c <HAL_UART_IRQHandler+0x560>)
 8036dbe:	4293      	cmp	r3, r2
 8036dc0:	d011      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036dc2:	687b      	ldr	r3, [r7, #4]
 8036dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036dc6:	681b      	ldr	r3, [r3, #0]
 8036dc8:	4a71      	ldr	r2, [pc, #452]	; (8036f90 <HAL_UART_IRQHandler+0x564>)
 8036dca:	4293      	cmp	r3, r2
 8036dcc:	d00b      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036dce:	687b      	ldr	r3, [r7, #4]
 8036dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036dd2:	681b      	ldr	r3, [r3, #0]
 8036dd4:	4a6f      	ldr	r2, [pc, #444]	; (8036f94 <HAL_UART_IRQHandler+0x568>)
 8036dd6:	4293      	cmp	r3, r2
 8036dd8:	d005      	beq.n	8036de6 <HAL_UART_IRQHandler+0x3ba>
 8036dda:	687b      	ldr	r3, [r7, #4]
 8036ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036dde:	681b      	ldr	r3, [r3, #0]
 8036de0:	4a6d      	ldr	r2, [pc, #436]	; (8036f98 <HAL_UART_IRQHandler+0x56c>)
 8036de2:	4293      	cmp	r3, r2
 8036de4:	d105      	bne.n	8036df2 <HAL_UART_IRQHandler+0x3c6>
 8036de6:	687b      	ldr	r3, [r7, #4]
 8036de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036dea:	681b      	ldr	r3, [r3, #0]
 8036dec:	685b      	ldr	r3, [r3, #4]
 8036dee:	b29b      	uxth	r3, r3
 8036df0:	e004      	b.n	8036dfc <HAL_UART_IRQHandler+0x3d0>
 8036df2:	687b      	ldr	r3, [r7, #4]
 8036df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036df6:	681b      	ldr	r3, [r3, #0]
 8036df8:	685b      	ldr	r3, [r3, #4]
 8036dfa:	b29b      	uxth	r3, r3
 8036dfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8036e00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8036e04:	2b00      	cmp	r3, #0
 8036e06:	f000 81a4 	beq.w	8037152 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8036e0a:	687b      	ldr	r3, [r7, #4]
 8036e0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8036e10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8036e14:	429a      	cmp	r2, r3
 8036e16:	f080 819c 	bcs.w	8037152 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8036e1a:	687b      	ldr	r3, [r7, #4]
 8036e1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8036e20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8036e24:	687b      	ldr	r3, [r7, #4]
 8036e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036e28:	69db      	ldr	r3, [r3, #28]
 8036e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8036e2e:	f000 8086 	beq.w	8036f3e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8036e32:	687b      	ldr	r3, [r7, #4]
 8036e34:	681b      	ldr	r3, [r3, #0]
 8036e36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036e3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8036e3e:	e853 3f00 	ldrex	r3, [r3]
 8036e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8036e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8036e4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8036e4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8036e52:	687b      	ldr	r3, [r7, #4]
 8036e54:	681b      	ldr	r3, [r3, #0]
 8036e56:	461a      	mov	r2, r3
 8036e58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8036e5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8036e60:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036e64:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8036e68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8036e6c:	e841 2300 	strex	r3, r2, [r1]
 8036e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8036e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8036e78:	2b00      	cmp	r3, #0
 8036e7a:	d1da      	bne.n	8036e32 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036e7c:	687b      	ldr	r3, [r7, #4]
 8036e7e:	681b      	ldr	r3, [r3, #0]
 8036e80:	3308      	adds	r3, #8
 8036e82:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8036e86:	e853 3f00 	ldrex	r3, [r3]
 8036e8a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8036e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8036e8e:	f023 0301 	bic.w	r3, r3, #1
 8036e92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8036e96:	687b      	ldr	r3, [r7, #4]
 8036e98:	681b      	ldr	r3, [r3, #0]
 8036e9a:	3308      	adds	r3, #8
 8036e9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8036ea0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8036ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036ea6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8036ea8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8036eac:	e841 2300 	strex	r3, r2, [r1]
 8036eb0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8036eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036eb4:	2b00      	cmp	r3, #0
 8036eb6:	d1e1      	bne.n	8036e7c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8036eb8:	687b      	ldr	r3, [r7, #4]
 8036eba:	681b      	ldr	r3, [r3, #0]
 8036ebc:	3308      	adds	r3, #8
 8036ebe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036ec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8036ec2:	e853 3f00 	ldrex	r3, [r3]
 8036ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8036ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8036eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8036ece:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8036ed2:	687b      	ldr	r3, [r7, #4]
 8036ed4:	681b      	ldr	r3, [r3, #0]
 8036ed6:	3308      	adds	r3, #8
 8036ed8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8036edc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8036ede:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036ee0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8036ee2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8036ee4:	e841 2300 	strex	r3, r2, [r1]
 8036ee8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8036eea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8036eec:	2b00      	cmp	r3, #0
 8036eee:	d1e3      	bne.n	8036eb8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8036ef0:	687b      	ldr	r3, [r7, #4]
 8036ef2:	2220      	movs	r2, #32
 8036ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036ef8:	687b      	ldr	r3, [r7, #4]
 8036efa:	2200      	movs	r2, #0
 8036efc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036efe:	687b      	ldr	r3, [r7, #4]
 8036f00:	681b      	ldr	r3, [r3, #0]
 8036f02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036f06:	e853 3f00 	ldrex	r3, [r3]
 8036f0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8036f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8036f0e:	f023 0310 	bic.w	r3, r3, #16
 8036f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8036f16:	687b      	ldr	r3, [r7, #4]
 8036f18:	681b      	ldr	r3, [r3, #0]
 8036f1a:	461a      	mov	r2, r3
 8036f1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8036f20:	65bb      	str	r3, [r7, #88]	; 0x58
 8036f22:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036f24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8036f26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8036f28:	e841 2300 	strex	r3, r2, [r1]
 8036f2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8036f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8036f30:	2b00      	cmp	r3, #0
 8036f32:	d1e4      	bne.n	8036efe <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8036f34:	687b      	ldr	r3, [r7, #4]
 8036f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036f38:	4618      	mov	r0, r3
 8036f3a:	f7f6 fced 	bl	802d918 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8036f3e:	687b      	ldr	r3, [r7, #4]
 8036f40:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8036f44:	687b      	ldr	r3, [r7, #4]
 8036f46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036f4a:	b29b      	uxth	r3, r3
 8036f4c:	1ad3      	subs	r3, r2, r3
 8036f4e:	b29b      	uxth	r3, r3
 8036f50:	4619      	mov	r1, r3
 8036f52:	6878      	ldr	r0, [r7, #4]
 8036f54:	f000 f912 	bl	803717c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8036f58:	e0fb      	b.n	8037152 <HAL_UART_IRQHandler+0x726>
 8036f5a:	bf00      	nop
 8036f5c:	40020010 	.word	0x40020010
 8036f60:	40020028 	.word	0x40020028
 8036f64:	40020040 	.word	0x40020040
 8036f68:	40020058 	.word	0x40020058
 8036f6c:	40020070 	.word	0x40020070
 8036f70:	40020088 	.word	0x40020088
 8036f74:	400200a0 	.word	0x400200a0
 8036f78:	400200b8 	.word	0x400200b8
 8036f7c:	40020410 	.word	0x40020410
 8036f80:	40020428 	.word	0x40020428
 8036f84:	40020440 	.word	0x40020440
 8036f88:	40020458 	.word	0x40020458
 8036f8c:	40020470 	.word	0x40020470
 8036f90:	40020488 	.word	0x40020488
 8036f94:	400204a0 	.word	0x400204a0
 8036f98:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8036f9c:	687b      	ldr	r3, [r7, #4]
 8036f9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8036fa2:	687b      	ldr	r3, [r7, #4]
 8036fa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036fa8:	b29b      	uxth	r3, r3
 8036faa:	1ad3      	subs	r3, r2, r3
 8036fac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8036fb0:	687b      	ldr	r3, [r7, #4]
 8036fb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036fb6:	b29b      	uxth	r3, r3
 8036fb8:	2b00      	cmp	r3, #0
 8036fba:	f000 80cc 	beq.w	8037156 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8036fbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8036fc2:	2b00      	cmp	r3, #0
 8036fc4:	f000 80c7 	beq.w	8037156 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8036fc8:	687b      	ldr	r3, [r7, #4]
 8036fca:	681b      	ldr	r3, [r3, #0]
 8036fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036fd0:	e853 3f00 	ldrex	r3, [r3]
 8036fd4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8036fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036fd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8036fe0:	687b      	ldr	r3, [r7, #4]
 8036fe2:	681b      	ldr	r3, [r3, #0]
 8036fe4:	461a      	mov	r2, r3
 8036fe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8036fea:	647b      	str	r3, [r7, #68]	; 0x44
 8036fec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036fee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8036ff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8036ff2:	e841 2300 	strex	r3, r2, [r1]
 8036ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8036ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036ffa:	2b00      	cmp	r3, #0
 8036ffc:	d1e4      	bne.n	8036fc8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8036ffe:	687b      	ldr	r3, [r7, #4]
 8037000:	681b      	ldr	r3, [r3, #0]
 8037002:	3308      	adds	r3, #8
 8037004:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037008:	e853 3f00 	ldrex	r3, [r3]
 803700c:	623b      	str	r3, [r7, #32]
   return(result);
 803700e:	6a3a      	ldr	r2, [r7, #32]
 8037010:	4b54      	ldr	r3, [pc, #336]	; (8037164 <HAL_UART_IRQHandler+0x738>)
 8037012:	4013      	ands	r3, r2
 8037014:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8037018:	687b      	ldr	r3, [r7, #4]
 803701a:	681b      	ldr	r3, [r3, #0]
 803701c:	3308      	adds	r3, #8
 803701e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8037022:	633a      	str	r2, [r7, #48]	; 0x30
 8037024:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8037028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803702a:	e841 2300 	strex	r3, r2, [r1]
 803702e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8037030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037032:	2b00      	cmp	r3, #0
 8037034:	d1e3      	bne.n	8036ffe <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8037036:	687b      	ldr	r3, [r7, #4]
 8037038:	2220      	movs	r2, #32
 803703a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803703e:	687b      	ldr	r3, [r7, #4]
 8037040:	2200      	movs	r2, #0
 8037042:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8037044:	687b      	ldr	r3, [r7, #4]
 8037046:	2200      	movs	r2, #0
 8037048:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803704a:	687b      	ldr	r3, [r7, #4]
 803704c:	681b      	ldr	r3, [r3, #0]
 803704e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037050:	693b      	ldr	r3, [r7, #16]
 8037052:	e853 3f00 	ldrex	r3, [r3]
 8037056:	60fb      	str	r3, [r7, #12]
   return(result);
 8037058:	68fb      	ldr	r3, [r7, #12]
 803705a:	f023 0310 	bic.w	r3, r3, #16
 803705e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8037062:	687b      	ldr	r3, [r7, #4]
 8037064:	681b      	ldr	r3, [r3, #0]
 8037066:	461a      	mov	r2, r3
 8037068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 803706c:	61fb      	str	r3, [r7, #28]
 803706e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037070:	69b9      	ldr	r1, [r7, #24]
 8037072:	69fa      	ldr	r2, [r7, #28]
 8037074:	e841 2300 	strex	r3, r2, [r1]
 8037078:	617b      	str	r3, [r7, #20]
   return(result);
 803707a:	697b      	ldr	r3, [r7, #20]
 803707c:	2b00      	cmp	r3, #0
 803707e:	d1e4      	bne.n	803704a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8037080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8037084:	4619      	mov	r1, r3
 8037086:	6878      	ldr	r0, [r7, #4]
 8037088:	f000 f878 	bl	803717c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 803708c:	e063      	b.n	8037156 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 803708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8037092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8037096:	2b00      	cmp	r3, #0
 8037098:	d00e      	beq.n	80370b8 <HAL_UART_IRQHandler+0x68c>
 803709a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803709e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80370a2:	2b00      	cmp	r3, #0
 80370a4:	d008      	beq.n	80370b8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80370a6:	687b      	ldr	r3, [r7, #4]
 80370a8:	681b      	ldr	r3, [r3, #0]
 80370aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80370ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80370b0:	6878      	ldr	r0, [r7, #4]
 80370b2:	f001 ff5d 	bl	8038f70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80370b6:	e051      	b.n	803715c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80370b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80370bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80370c0:	2b00      	cmp	r3, #0
 80370c2:	d014      	beq.n	80370ee <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80370c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80370c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80370cc:	2b00      	cmp	r3, #0
 80370ce:	d105      	bne.n	80370dc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80370d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80370d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80370d8:	2b00      	cmp	r3, #0
 80370da:	d008      	beq.n	80370ee <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80370dc:	687b      	ldr	r3, [r7, #4]
 80370de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80370e0:	2b00      	cmp	r3, #0
 80370e2:	d03a      	beq.n	803715a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80370e4:	687b      	ldr	r3, [r7, #4]
 80370e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80370e8:	6878      	ldr	r0, [r7, #4]
 80370ea:	4798      	blx	r3
    }
    return;
 80370ec:	e035      	b.n	803715a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80370ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80370f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80370f6:	2b00      	cmp	r3, #0
 80370f8:	d009      	beq.n	803710e <HAL_UART_IRQHandler+0x6e2>
 80370fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80370fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8037102:	2b00      	cmp	r3, #0
 8037104:	d003      	beq.n	803710e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8037106:	6878      	ldr	r0, [r7, #4]
 8037108:	f001 faaa 	bl	8038660 <UART_EndTransmit_IT>
    return;
 803710c:	e026      	b.n	803715c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 803710e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8037112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8037116:	2b00      	cmp	r3, #0
 8037118:	d009      	beq.n	803712e <HAL_UART_IRQHandler+0x702>
 803711a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803711e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8037122:	2b00      	cmp	r3, #0
 8037124:	d003      	beq.n	803712e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8037126:	6878      	ldr	r0, [r7, #4]
 8037128:	f001 ff36 	bl	8038f98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 803712c:	e016      	b.n	803715c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 803712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8037132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8037136:	2b00      	cmp	r3, #0
 8037138:	d010      	beq.n	803715c <HAL_UART_IRQHandler+0x730>
 803713a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803713e:	2b00      	cmp	r3, #0
 8037140:	da0c      	bge.n	803715c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8037142:	6878      	ldr	r0, [r7, #4]
 8037144:	f001 ff1e 	bl	8038f84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8037148:	e008      	b.n	803715c <HAL_UART_IRQHandler+0x730>
      return;
 803714a:	bf00      	nop
 803714c:	e006      	b.n	803715c <HAL_UART_IRQHandler+0x730>
    return;
 803714e:	bf00      	nop
 8037150:	e004      	b.n	803715c <HAL_UART_IRQHandler+0x730>
      return;
 8037152:	bf00      	nop
 8037154:	e002      	b.n	803715c <HAL_UART_IRQHandler+0x730>
      return;
 8037156:	bf00      	nop
 8037158:	e000      	b.n	803715c <HAL_UART_IRQHandler+0x730>
    return;
 803715a:	bf00      	nop
  }
}
 803715c:	37e8      	adds	r7, #232	; 0xe8
 803715e:	46bd      	mov	sp, r7
 8037160:	bd80      	pop	{r7, pc}
 8037162:	bf00      	nop
 8037164:	effffffe 	.word	0xeffffffe

08037168 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8037168:	b480      	push	{r7}
 803716a:	b083      	sub	sp, #12
 803716c:	af00      	add	r7, sp, #0
 803716e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8037170:	bf00      	nop
 8037172:	370c      	adds	r7, #12
 8037174:	46bd      	mov	sp, r7
 8037176:	f85d 7b04 	ldr.w	r7, [sp], #4
 803717a:	4770      	bx	lr

0803717c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 803717c:	b480      	push	{r7}
 803717e:	b083      	sub	sp, #12
 8037180:	af00      	add	r7, sp, #0
 8037182:	6078      	str	r0, [r7, #4]
 8037184:	460b      	mov	r3, r1
 8037186:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8037188:	bf00      	nop
 803718a:	370c      	adds	r7, #12
 803718c:	46bd      	mov	sp, r7
 803718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037192:	4770      	bx	lr

08037194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8037194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8037198:	b092      	sub	sp, #72	; 0x48
 803719a:	af00      	add	r7, sp, #0
 803719c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 803719e:	2300      	movs	r3, #0
 80371a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80371a4:	697b      	ldr	r3, [r7, #20]
 80371a6:	689a      	ldr	r2, [r3, #8]
 80371a8:	697b      	ldr	r3, [r7, #20]
 80371aa:	691b      	ldr	r3, [r3, #16]
 80371ac:	431a      	orrs	r2, r3
 80371ae:	697b      	ldr	r3, [r7, #20]
 80371b0:	695b      	ldr	r3, [r3, #20]
 80371b2:	431a      	orrs	r2, r3
 80371b4:	697b      	ldr	r3, [r7, #20]
 80371b6:	69db      	ldr	r3, [r3, #28]
 80371b8:	4313      	orrs	r3, r2
 80371ba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80371bc:	697b      	ldr	r3, [r7, #20]
 80371be:	681b      	ldr	r3, [r3, #0]
 80371c0:	681a      	ldr	r2, [r3, #0]
 80371c2:	4bbe      	ldr	r3, [pc, #760]	; (80374bc <UART_SetConfig+0x328>)
 80371c4:	4013      	ands	r3, r2
 80371c6:	697a      	ldr	r2, [r7, #20]
 80371c8:	6812      	ldr	r2, [r2, #0]
 80371ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80371cc:	430b      	orrs	r3, r1
 80371ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80371d0:	697b      	ldr	r3, [r7, #20]
 80371d2:	681b      	ldr	r3, [r3, #0]
 80371d4:	685b      	ldr	r3, [r3, #4]
 80371d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80371da:	697b      	ldr	r3, [r7, #20]
 80371dc:	68da      	ldr	r2, [r3, #12]
 80371de:	697b      	ldr	r3, [r7, #20]
 80371e0:	681b      	ldr	r3, [r3, #0]
 80371e2:	430a      	orrs	r2, r1
 80371e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80371e6:	697b      	ldr	r3, [r7, #20]
 80371e8:	699b      	ldr	r3, [r3, #24]
 80371ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80371ec:	697b      	ldr	r3, [r7, #20]
 80371ee:	681b      	ldr	r3, [r3, #0]
 80371f0:	4ab3      	ldr	r2, [pc, #716]	; (80374c0 <UART_SetConfig+0x32c>)
 80371f2:	4293      	cmp	r3, r2
 80371f4:	d004      	beq.n	8037200 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80371f6:	697b      	ldr	r3, [r7, #20]
 80371f8:	6a1b      	ldr	r3, [r3, #32]
 80371fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80371fc:	4313      	orrs	r3, r2
 80371fe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8037200:	697b      	ldr	r3, [r7, #20]
 8037202:	681b      	ldr	r3, [r3, #0]
 8037204:	689a      	ldr	r2, [r3, #8]
 8037206:	4baf      	ldr	r3, [pc, #700]	; (80374c4 <UART_SetConfig+0x330>)
 8037208:	4013      	ands	r3, r2
 803720a:	697a      	ldr	r2, [r7, #20]
 803720c:	6812      	ldr	r2, [r2, #0]
 803720e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8037210:	430b      	orrs	r3, r1
 8037212:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8037214:	697b      	ldr	r3, [r7, #20]
 8037216:	681b      	ldr	r3, [r3, #0]
 8037218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803721a:	f023 010f 	bic.w	r1, r3, #15
 803721e:	697b      	ldr	r3, [r7, #20]
 8037220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8037222:	697b      	ldr	r3, [r7, #20]
 8037224:	681b      	ldr	r3, [r3, #0]
 8037226:	430a      	orrs	r2, r1
 8037228:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 803722a:	697b      	ldr	r3, [r7, #20]
 803722c:	681b      	ldr	r3, [r3, #0]
 803722e:	4aa6      	ldr	r2, [pc, #664]	; (80374c8 <UART_SetConfig+0x334>)
 8037230:	4293      	cmp	r3, r2
 8037232:	d177      	bne.n	8037324 <UART_SetConfig+0x190>
 8037234:	4ba5      	ldr	r3, [pc, #660]	; (80374cc <UART_SetConfig+0x338>)
 8037236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8037238:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803723c:	2b28      	cmp	r3, #40	; 0x28
 803723e:	d86d      	bhi.n	803731c <UART_SetConfig+0x188>
 8037240:	a201      	add	r2, pc, #4	; (adr r2, 8037248 <UART_SetConfig+0xb4>)
 8037242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8037246:	bf00      	nop
 8037248:	080372ed 	.word	0x080372ed
 803724c:	0803731d 	.word	0x0803731d
 8037250:	0803731d 	.word	0x0803731d
 8037254:	0803731d 	.word	0x0803731d
 8037258:	0803731d 	.word	0x0803731d
 803725c:	0803731d 	.word	0x0803731d
 8037260:	0803731d 	.word	0x0803731d
 8037264:	0803731d 	.word	0x0803731d
 8037268:	080372f5 	.word	0x080372f5
 803726c:	0803731d 	.word	0x0803731d
 8037270:	0803731d 	.word	0x0803731d
 8037274:	0803731d 	.word	0x0803731d
 8037278:	0803731d 	.word	0x0803731d
 803727c:	0803731d 	.word	0x0803731d
 8037280:	0803731d 	.word	0x0803731d
 8037284:	0803731d 	.word	0x0803731d
 8037288:	080372fd 	.word	0x080372fd
 803728c:	0803731d 	.word	0x0803731d
 8037290:	0803731d 	.word	0x0803731d
 8037294:	0803731d 	.word	0x0803731d
 8037298:	0803731d 	.word	0x0803731d
 803729c:	0803731d 	.word	0x0803731d
 80372a0:	0803731d 	.word	0x0803731d
 80372a4:	0803731d 	.word	0x0803731d
 80372a8:	08037305 	.word	0x08037305
 80372ac:	0803731d 	.word	0x0803731d
 80372b0:	0803731d 	.word	0x0803731d
 80372b4:	0803731d 	.word	0x0803731d
 80372b8:	0803731d 	.word	0x0803731d
 80372bc:	0803731d 	.word	0x0803731d
 80372c0:	0803731d 	.word	0x0803731d
 80372c4:	0803731d 	.word	0x0803731d
 80372c8:	0803730d 	.word	0x0803730d
 80372cc:	0803731d 	.word	0x0803731d
 80372d0:	0803731d 	.word	0x0803731d
 80372d4:	0803731d 	.word	0x0803731d
 80372d8:	0803731d 	.word	0x0803731d
 80372dc:	0803731d 	.word	0x0803731d
 80372e0:	0803731d 	.word	0x0803731d
 80372e4:	0803731d 	.word	0x0803731d
 80372e8:	08037315 	.word	0x08037315
 80372ec:	2301      	movs	r3, #1
 80372ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80372f2:	e222      	b.n	803773a <UART_SetConfig+0x5a6>
 80372f4:	2304      	movs	r3, #4
 80372f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80372fa:	e21e      	b.n	803773a <UART_SetConfig+0x5a6>
 80372fc:	2308      	movs	r3, #8
 80372fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037302:	e21a      	b.n	803773a <UART_SetConfig+0x5a6>
 8037304:	2310      	movs	r3, #16
 8037306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803730a:	e216      	b.n	803773a <UART_SetConfig+0x5a6>
 803730c:	2320      	movs	r3, #32
 803730e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037312:	e212      	b.n	803773a <UART_SetConfig+0x5a6>
 8037314:	2340      	movs	r3, #64	; 0x40
 8037316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803731a:	e20e      	b.n	803773a <UART_SetConfig+0x5a6>
 803731c:	2380      	movs	r3, #128	; 0x80
 803731e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037322:	e20a      	b.n	803773a <UART_SetConfig+0x5a6>
 8037324:	697b      	ldr	r3, [r7, #20]
 8037326:	681b      	ldr	r3, [r3, #0]
 8037328:	4a69      	ldr	r2, [pc, #420]	; (80374d0 <UART_SetConfig+0x33c>)
 803732a:	4293      	cmp	r3, r2
 803732c:	d130      	bne.n	8037390 <UART_SetConfig+0x1fc>
 803732e:	4b67      	ldr	r3, [pc, #412]	; (80374cc <UART_SetConfig+0x338>)
 8037330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8037332:	f003 0307 	and.w	r3, r3, #7
 8037336:	2b05      	cmp	r3, #5
 8037338:	d826      	bhi.n	8037388 <UART_SetConfig+0x1f4>
 803733a:	a201      	add	r2, pc, #4	; (adr r2, 8037340 <UART_SetConfig+0x1ac>)
 803733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8037340:	08037359 	.word	0x08037359
 8037344:	08037361 	.word	0x08037361
 8037348:	08037369 	.word	0x08037369
 803734c:	08037371 	.word	0x08037371
 8037350:	08037379 	.word	0x08037379
 8037354:	08037381 	.word	0x08037381
 8037358:	2300      	movs	r3, #0
 803735a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803735e:	e1ec      	b.n	803773a <UART_SetConfig+0x5a6>
 8037360:	2304      	movs	r3, #4
 8037362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037366:	e1e8      	b.n	803773a <UART_SetConfig+0x5a6>
 8037368:	2308      	movs	r3, #8
 803736a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803736e:	e1e4      	b.n	803773a <UART_SetConfig+0x5a6>
 8037370:	2310      	movs	r3, #16
 8037372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037376:	e1e0      	b.n	803773a <UART_SetConfig+0x5a6>
 8037378:	2320      	movs	r3, #32
 803737a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803737e:	e1dc      	b.n	803773a <UART_SetConfig+0x5a6>
 8037380:	2340      	movs	r3, #64	; 0x40
 8037382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037386:	e1d8      	b.n	803773a <UART_SetConfig+0x5a6>
 8037388:	2380      	movs	r3, #128	; 0x80
 803738a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803738e:	e1d4      	b.n	803773a <UART_SetConfig+0x5a6>
 8037390:	697b      	ldr	r3, [r7, #20]
 8037392:	681b      	ldr	r3, [r3, #0]
 8037394:	4a4f      	ldr	r2, [pc, #316]	; (80374d4 <UART_SetConfig+0x340>)
 8037396:	4293      	cmp	r3, r2
 8037398:	d130      	bne.n	80373fc <UART_SetConfig+0x268>
 803739a:	4b4c      	ldr	r3, [pc, #304]	; (80374cc <UART_SetConfig+0x338>)
 803739c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803739e:	f003 0307 	and.w	r3, r3, #7
 80373a2:	2b05      	cmp	r3, #5
 80373a4:	d826      	bhi.n	80373f4 <UART_SetConfig+0x260>
 80373a6:	a201      	add	r2, pc, #4	; (adr r2, 80373ac <UART_SetConfig+0x218>)
 80373a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80373ac:	080373c5 	.word	0x080373c5
 80373b0:	080373cd 	.word	0x080373cd
 80373b4:	080373d5 	.word	0x080373d5
 80373b8:	080373dd 	.word	0x080373dd
 80373bc:	080373e5 	.word	0x080373e5
 80373c0:	080373ed 	.word	0x080373ed
 80373c4:	2300      	movs	r3, #0
 80373c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373ca:	e1b6      	b.n	803773a <UART_SetConfig+0x5a6>
 80373cc:	2304      	movs	r3, #4
 80373ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373d2:	e1b2      	b.n	803773a <UART_SetConfig+0x5a6>
 80373d4:	2308      	movs	r3, #8
 80373d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373da:	e1ae      	b.n	803773a <UART_SetConfig+0x5a6>
 80373dc:	2310      	movs	r3, #16
 80373de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373e2:	e1aa      	b.n	803773a <UART_SetConfig+0x5a6>
 80373e4:	2320      	movs	r3, #32
 80373e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373ea:	e1a6      	b.n	803773a <UART_SetConfig+0x5a6>
 80373ec:	2340      	movs	r3, #64	; 0x40
 80373ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373f2:	e1a2      	b.n	803773a <UART_SetConfig+0x5a6>
 80373f4:	2380      	movs	r3, #128	; 0x80
 80373f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80373fa:	e19e      	b.n	803773a <UART_SetConfig+0x5a6>
 80373fc:	697b      	ldr	r3, [r7, #20]
 80373fe:	681b      	ldr	r3, [r3, #0]
 8037400:	4a35      	ldr	r2, [pc, #212]	; (80374d8 <UART_SetConfig+0x344>)
 8037402:	4293      	cmp	r3, r2
 8037404:	d130      	bne.n	8037468 <UART_SetConfig+0x2d4>
 8037406:	4b31      	ldr	r3, [pc, #196]	; (80374cc <UART_SetConfig+0x338>)
 8037408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803740a:	f003 0307 	and.w	r3, r3, #7
 803740e:	2b05      	cmp	r3, #5
 8037410:	d826      	bhi.n	8037460 <UART_SetConfig+0x2cc>
 8037412:	a201      	add	r2, pc, #4	; (adr r2, 8037418 <UART_SetConfig+0x284>)
 8037414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8037418:	08037431 	.word	0x08037431
 803741c:	08037439 	.word	0x08037439
 8037420:	08037441 	.word	0x08037441
 8037424:	08037449 	.word	0x08037449
 8037428:	08037451 	.word	0x08037451
 803742c:	08037459 	.word	0x08037459
 8037430:	2300      	movs	r3, #0
 8037432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037436:	e180      	b.n	803773a <UART_SetConfig+0x5a6>
 8037438:	2304      	movs	r3, #4
 803743a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803743e:	e17c      	b.n	803773a <UART_SetConfig+0x5a6>
 8037440:	2308      	movs	r3, #8
 8037442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037446:	e178      	b.n	803773a <UART_SetConfig+0x5a6>
 8037448:	2310      	movs	r3, #16
 803744a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803744e:	e174      	b.n	803773a <UART_SetConfig+0x5a6>
 8037450:	2320      	movs	r3, #32
 8037452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037456:	e170      	b.n	803773a <UART_SetConfig+0x5a6>
 8037458:	2340      	movs	r3, #64	; 0x40
 803745a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803745e:	e16c      	b.n	803773a <UART_SetConfig+0x5a6>
 8037460:	2380      	movs	r3, #128	; 0x80
 8037462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037466:	e168      	b.n	803773a <UART_SetConfig+0x5a6>
 8037468:	697b      	ldr	r3, [r7, #20]
 803746a:	681b      	ldr	r3, [r3, #0]
 803746c:	4a1b      	ldr	r2, [pc, #108]	; (80374dc <UART_SetConfig+0x348>)
 803746e:	4293      	cmp	r3, r2
 8037470:	d142      	bne.n	80374f8 <UART_SetConfig+0x364>
 8037472:	4b16      	ldr	r3, [pc, #88]	; (80374cc <UART_SetConfig+0x338>)
 8037474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8037476:	f003 0307 	and.w	r3, r3, #7
 803747a:	2b05      	cmp	r3, #5
 803747c:	d838      	bhi.n	80374f0 <UART_SetConfig+0x35c>
 803747e:	a201      	add	r2, pc, #4	; (adr r2, 8037484 <UART_SetConfig+0x2f0>)
 8037480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8037484:	0803749d 	.word	0x0803749d
 8037488:	080374a5 	.word	0x080374a5
 803748c:	080374ad 	.word	0x080374ad
 8037490:	080374b5 	.word	0x080374b5
 8037494:	080374e1 	.word	0x080374e1
 8037498:	080374e9 	.word	0x080374e9
 803749c:	2300      	movs	r3, #0
 803749e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80374a2:	e14a      	b.n	803773a <UART_SetConfig+0x5a6>
 80374a4:	2304      	movs	r3, #4
 80374a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80374aa:	e146      	b.n	803773a <UART_SetConfig+0x5a6>
 80374ac:	2308      	movs	r3, #8
 80374ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80374b2:	e142      	b.n	803773a <UART_SetConfig+0x5a6>
 80374b4:	2310      	movs	r3, #16
 80374b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80374ba:	e13e      	b.n	803773a <UART_SetConfig+0x5a6>
 80374bc:	cfff69f3 	.word	0xcfff69f3
 80374c0:	58000c00 	.word	0x58000c00
 80374c4:	11fff4ff 	.word	0x11fff4ff
 80374c8:	40011000 	.word	0x40011000
 80374cc:	58024400 	.word	0x58024400
 80374d0:	40004400 	.word	0x40004400
 80374d4:	40004800 	.word	0x40004800
 80374d8:	40004c00 	.word	0x40004c00
 80374dc:	40005000 	.word	0x40005000
 80374e0:	2320      	movs	r3, #32
 80374e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80374e6:	e128      	b.n	803773a <UART_SetConfig+0x5a6>
 80374e8:	2340      	movs	r3, #64	; 0x40
 80374ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80374ee:	e124      	b.n	803773a <UART_SetConfig+0x5a6>
 80374f0:	2380      	movs	r3, #128	; 0x80
 80374f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80374f6:	e120      	b.n	803773a <UART_SetConfig+0x5a6>
 80374f8:	697b      	ldr	r3, [r7, #20]
 80374fa:	681b      	ldr	r3, [r3, #0]
 80374fc:	4acb      	ldr	r2, [pc, #812]	; (803782c <UART_SetConfig+0x698>)
 80374fe:	4293      	cmp	r3, r2
 8037500:	d176      	bne.n	80375f0 <UART_SetConfig+0x45c>
 8037502:	4bcb      	ldr	r3, [pc, #812]	; (8037830 <UART_SetConfig+0x69c>)
 8037504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8037506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803750a:	2b28      	cmp	r3, #40	; 0x28
 803750c:	d86c      	bhi.n	80375e8 <UART_SetConfig+0x454>
 803750e:	a201      	add	r2, pc, #4	; (adr r2, 8037514 <UART_SetConfig+0x380>)
 8037510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8037514:	080375b9 	.word	0x080375b9
 8037518:	080375e9 	.word	0x080375e9
 803751c:	080375e9 	.word	0x080375e9
 8037520:	080375e9 	.word	0x080375e9
 8037524:	080375e9 	.word	0x080375e9
 8037528:	080375e9 	.word	0x080375e9
 803752c:	080375e9 	.word	0x080375e9
 8037530:	080375e9 	.word	0x080375e9
 8037534:	080375c1 	.word	0x080375c1
 8037538:	080375e9 	.word	0x080375e9
 803753c:	080375e9 	.word	0x080375e9
 8037540:	080375e9 	.word	0x080375e9
 8037544:	080375e9 	.word	0x080375e9
 8037548:	080375e9 	.word	0x080375e9
 803754c:	080375e9 	.word	0x080375e9
 8037550:	080375e9 	.word	0x080375e9
 8037554:	080375c9 	.word	0x080375c9
 8037558:	080375e9 	.word	0x080375e9
 803755c:	080375e9 	.word	0x080375e9
 8037560:	080375e9 	.word	0x080375e9
 8037564:	080375e9 	.word	0x080375e9
 8037568:	080375e9 	.word	0x080375e9
 803756c:	080375e9 	.word	0x080375e9
 8037570:	080375e9 	.word	0x080375e9
 8037574:	080375d1 	.word	0x080375d1
 8037578:	080375e9 	.word	0x080375e9
 803757c:	080375e9 	.word	0x080375e9
 8037580:	080375e9 	.word	0x080375e9
 8037584:	080375e9 	.word	0x080375e9
 8037588:	080375e9 	.word	0x080375e9
 803758c:	080375e9 	.word	0x080375e9
 8037590:	080375e9 	.word	0x080375e9
 8037594:	080375d9 	.word	0x080375d9
 8037598:	080375e9 	.word	0x080375e9
 803759c:	080375e9 	.word	0x080375e9
 80375a0:	080375e9 	.word	0x080375e9
 80375a4:	080375e9 	.word	0x080375e9
 80375a8:	080375e9 	.word	0x080375e9
 80375ac:	080375e9 	.word	0x080375e9
 80375b0:	080375e9 	.word	0x080375e9
 80375b4:	080375e1 	.word	0x080375e1
 80375b8:	2301      	movs	r3, #1
 80375ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80375be:	e0bc      	b.n	803773a <UART_SetConfig+0x5a6>
 80375c0:	2304      	movs	r3, #4
 80375c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80375c6:	e0b8      	b.n	803773a <UART_SetConfig+0x5a6>
 80375c8:	2308      	movs	r3, #8
 80375ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80375ce:	e0b4      	b.n	803773a <UART_SetConfig+0x5a6>
 80375d0:	2310      	movs	r3, #16
 80375d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80375d6:	e0b0      	b.n	803773a <UART_SetConfig+0x5a6>
 80375d8:	2320      	movs	r3, #32
 80375da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80375de:	e0ac      	b.n	803773a <UART_SetConfig+0x5a6>
 80375e0:	2340      	movs	r3, #64	; 0x40
 80375e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80375e6:	e0a8      	b.n	803773a <UART_SetConfig+0x5a6>
 80375e8:	2380      	movs	r3, #128	; 0x80
 80375ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80375ee:	e0a4      	b.n	803773a <UART_SetConfig+0x5a6>
 80375f0:	697b      	ldr	r3, [r7, #20]
 80375f2:	681b      	ldr	r3, [r3, #0]
 80375f4:	4a8f      	ldr	r2, [pc, #572]	; (8037834 <UART_SetConfig+0x6a0>)
 80375f6:	4293      	cmp	r3, r2
 80375f8:	d130      	bne.n	803765c <UART_SetConfig+0x4c8>
 80375fa:	4b8d      	ldr	r3, [pc, #564]	; (8037830 <UART_SetConfig+0x69c>)
 80375fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80375fe:	f003 0307 	and.w	r3, r3, #7
 8037602:	2b05      	cmp	r3, #5
 8037604:	d826      	bhi.n	8037654 <UART_SetConfig+0x4c0>
 8037606:	a201      	add	r2, pc, #4	; (adr r2, 803760c <UART_SetConfig+0x478>)
 8037608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803760c:	08037625 	.word	0x08037625
 8037610:	0803762d 	.word	0x0803762d
 8037614:	08037635 	.word	0x08037635
 8037618:	0803763d 	.word	0x0803763d
 803761c:	08037645 	.word	0x08037645
 8037620:	0803764d 	.word	0x0803764d
 8037624:	2300      	movs	r3, #0
 8037626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803762a:	e086      	b.n	803773a <UART_SetConfig+0x5a6>
 803762c:	2304      	movs	r3, #4
 803762e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037632:	e082      	b.n	803773a <UART_SetConfig+0x5a6>
 8037634:	2308      	movs	r3, #8
 8037636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803763a:	e07e      	b.n	803773a <UART_SetConfig+0x5a6>
 803763c:	2310      	movs	r3, #16
 803763e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037642:	e07a      	b.n	803773a <UART_SetConfig+0x5a6>
 8037644:	2320      	movs	r3, #32
 8037646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803764a:	e076      	b.n	803773a <UART_SetConfig+0x5a6>
 803764c:	2340      	movs	r3, #64	; 0x40
 803764e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037652:	e072      	b.n	803773a <UART_SetConfig+0x5a6>
 8037654:	2380      	movs	r3, #128	; 0x80
 8037656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803765a:	e06e      	b.n	803773a <UART_SetConfig+0x5a6>
 803765c:	697b      	ldr	r3, [r7, #20]
 803765e:	681b      	ldr	r3, [r3, #0]
 8037660:	4a75      	ldr	r2, [pc, #468]	; (8037838 <UART_SetConfig+0x6a4>)
 8037662:	4293      	cmp	r3, r2
 8037664:	d130      	bne.n	80376c8 <UART_SetConfig+0x534>
 8037666:	4b72      	ldr	r3, [pc, #456]	; (8037830 <UART_SetConfig+0x69c>)
 8037668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803766a:	f003 0307 	and.w	r3, r3, #7
 803766e:	2b05      	cmp	r3, #5
 8037670:	d826      	bhi.n	80376c0 <UART_SetConfig+0x52c>
 8037672:	a201      	add	r2, pc, #4	; (adr r2, 8037678 <UART_SetConfig+0x4e4>)
 8037674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8037678:	08037691 	.word	0x08037691
 803767c:	08037699 	.word	0x08037699
 8037680:	080376a1 	.word	0x080376a1
 8037684:	080376a9 	.word	0x080376a9
 8037688:	080376b1 	.word	0x080376b1
 803768c:	080376b9 	.word	0x080376b9
 8037690:	2300      	movs	r3, #0
 8037692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037696:	e050      	b.n	803773a <UART_SetConfig+0x5a6>
 8037698:	2304      	movs	r3, #4
 803769a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803769e:	e04c      	b.n	803773a <UART_SetConfig+0x5a6>
 80376a0:	2308      	movs	r3, #8
 80376a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80376a6:	e048      	b.n	803773a <UART_SetConfig+0x5a6>
 80376a8:	2310      	movs	r3, #16
 80376aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80376ae:	e044      	b.n	803773a <UART_SetConfig+0x5a6>
 80376b0:	2320      	movs	r3, #32
 80376b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80376b6:	e040      	b.n	803773a <UART_SetConfig+0x5a6>
 80376b8:	2340      	movs	r3, #64	; 0x40
 80376ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80376be:	e03c      	b.n	803773a <UART_SetConfig+0x5a6>
 80376c0:	2380      	movs	r3, #128	; 0x80
 80376c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80376c6:	e038      	b.n	803773a <UART_SetConfig+0x5a6>
 80376c8:	697b      	ldr	r3, [r7, #20]
 80376ca:	681b      	ldr	r3, [r3, #0]
 80376cc:	4a5b      	ldr	r2, [pc, #364]	; (803783c <UART_SetConfig+0x6a8>)
 80376ce:	4293      	cmp	r3, r2
 80376d0:	d130      	bne.n	8037734 <UART_SetConfig+0x5a0>
 80376d2:	4b57      	ldr	r3, [pc, #348]	; (8037830 <UART_SetConfig+0x69c>)
 80376d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80376d6:	f003 0307 	and.w	r3, r3, #7
 80376da:	2b05      	cmp	r3, #5
 80376dc:	d826      	bhi.n	803772c <UART_SetConfig+0x598>
 80376de:	a201      	add	r2, pc, #4	; (adr r2, 80376e4 <UART_SetConfig+0x550>)
 80376e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80376e4:	080376fd 	.word	0x080376fd
 80376e8:	08037705 	.word	0x08037705
 80376ec:	0803770d 	.word	0x0803770d
 80376f0:	08037715 	.word	0x08037715
 80376f4:	0803771d 	.word	0x0803771d
 80376f8:	08037725 	.word	0x08037725
 80376fc:	2302      	movs	r3, #2
 80376fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037702:	e01a      	b.n	803773a <UART_SetConfig+0x5a6>
 8037704:	2304      	movs	r3, #4
 8037706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803770a:	e016      	b.n	803773a <UART_SetConfig+0x5a6>
 803770c:	2308      	movs	r3, #8
 803770e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037712:	e012      	b.n	803773a <UART_SetConfig+0x5a6>
 8037714:	2310      	movs	r3, #16
 8037716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803771a:	e00e      	b.n	803773a <UART_SetConfig+0x5a6>
 803771c:	2320      	movs	r3, #32
 803771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037722:	e00a      	b.n	803773a <UART_SetConfig+0x5a6>
 8037724:	2340      	movs	r3, #64	; 0x40
 8037726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803772a:	e006      	b.n	803773a <UART_SetConfig+0x5a6>
 803772c:	2380      	movs	r3, #128	; 0x80
 803772e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8037732:	e002      	b.n	803773a <UART_SetConfig+0x5a6>
 8037734:	2380      	movs	r3, #128	; 0x80
 8037736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 803773a:	697b      	ldr	r3, [r7, #20]
 803773c:	681b      	ldr	r3, [r3, #0]
 803773e:	4a3f      	ldr	r2, [pc, #252]	; (803783c <UART_SetConfig+0x6a8>)
 8037740:	4293      	cmp	r3, r2
 8037742:	f040 80f8 	bne.w	8037936 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8037746:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 803774a:	2b20      	cmp	r3, #32
 803774c:	dc46      	bgt.n	80377dc <UART_SetConfig+0x648>
 803774e:	2b02      	cmp	r3, #2
 8037750:	f2c0 8082 	blt.w	8037858 <UART_SetConfig+0x6c4>
 8037754:	3b02      	subs	r3, #2
 8037756:	2b1e      	cmp	r3, #30
 8037758:	d87e      	bhi.n	8037858 <UART_SetConfig+0x6c4>
 803775a:	a201      	add	r2, pc, #4	; (adr r2, 8037760 <UART_SetConfig+0x5cc>)
 803775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8037760:	080377e3 	.word	0x080377e3
 8037764:	08037859 	.word	0x08037859
 8037768:	080377eb 	.word	0x080377eb
 803776c:	08037859 	.word	0x08037859
 8037770:	08037859 	.word	0x08037859
 8037774:	08037859 	.word	0x08037859
 8037778:	080377fb 	.word	0x080377fb
 803777c:	08037859 	.word	0x08037859
 8037780:	08037859 	.word	0x08037859
 8037784:	08037859 	.word	0x08037859
 8037788:	08037859 	.word	0x08037859
 803778c:	08037859 	.word	0x08037859
 8037790:	08037859 	.word	0x08037859
 8037794:	08037859 	.word	0x08037859
 8037798:	0803780b 	.word	0x0803780b
 803779c:	08037859 	.word	0x08037859
 80377a0:	08037859 	.word	0x08037859
 80377a4:	08037859 	.word	0x08037859
 80377a8:	08037859 	.word	0x08037859
 80377ac:	08037859 	.word	0x08037859
 80377b0:	08037859 	.word	0x08037859
 80377b4:	08037859 	.word	0x08037859
 80377b8:	08037859 	.word	0x08037859
 80377bc:	08037859 	.word	0x08037859
 80377c0:	08037859 	.word	0x08037859
 80377c4:	08037859 	.word	0x08037859
 80377c8:	08037859 	.word	0x08037859
 80377cc:	08037859 	.word	0x08037859
 80377d0:	08037859 	.word	0x08037859
 80377d4:	08037859 	.word	0x08037859
 80377d8:	0803784b 	.word	0x0803784b
 80377dc:	2b40      	cmp	r3, #64	; 0x40
 80377de:	d037      	beq.n	8037850 <UART_SetConfig+0x6bc>
 80377e0:	e03a      	b.n	8037858 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80377e2:	f7fc fcbf 	bl	8034164 <HAL_RCCEx_GetD3PCLK1Freq>
 80377e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80377e8:	e03c      	b.n	8037864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80377ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80377ee:	4618      	mov	r0, r3
 80377f0:	f7fc fcce 	bl	8034190 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80377f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80377f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80377f8:	e034      	b.n	8037864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80377fa:	f107 0318 	add.w	r3, r7, #24
 80377fe:	4618      	mov	r0, r3
 8037800:	f7fc fe1a 	bl	8034438 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8037804:	69fb      	ldr	r3, [r7, #28]
 8037806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037808:	e02c      	b.n	8037864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 803780a:	4b09      	ldr	r3, [pc, #36]	; (8037830 <UART_SetConfig+0x69c>)
 803780c:	681b      	ldr	r3, [r3, #0]
 803780e:	f003 0320 	and.w	r3, r3, #32
 8037812:	2b00      	cmp	r3, #0
 8037814:	d016      	beq.n	8037844 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8037816:	4b06      	ldr	r3, [pc, #24]	; (8037830 <UART_SetConfig+0x69c>)
 8037818:	681b      	ldr	r3, [r3, #0]
 803781a:	08db      	lsrs	r3, r3, #3
 803781c:	f003 0303 	and.w	r3, r3, #3
 8037820:	4a07      	ldr	r2, [pc, #28]	; (8037840 <UART_SetConfig+0x6ac>)
 8037822:	fa22 f303 	lsr.w	r3, r2, r3
 8037826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8037828:	e01c      	b.n	8037864 <UART_SetConfig+0x6d0>
 803782a:	bf00      	nop
 803782c:	40011400 	.word	0x40011400
 8037830:	58024400 	.word	0x58024400
 8037834:	40007800 	.word	0x40007800
 8037838:	40007c00 	.word	0x40007c00
 803783c:	58000c00 	.word	0x58000c00
 8037840:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8037844:	4b9d      	ldr	r3, [pc, #628]	; (8037abc <UART_SetConfig+0x928>)
 8037846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037848:	e00c      	b.n	8037864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 803784a:	4b9d      	ldr	r3, [pc, #628]	; (8037ac0 <UART_SetConfig+0x92c>)
 803784c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803784e:	e009      	b.n	8037864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8037850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8037854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037856:	e005      	b.n	8037864 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8037858:	2300      	movs	r3, #0
 803785a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 803785c:	2301      	movs	r3, #1
 803785e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8037862:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8037864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037866:	2b00      	cmp	r3, #0
 8037868:	f000 81de 	beq.w	8037c28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 803786c:	697b      	ldr	r3, [r7, #20]
 803786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8037870:	4a94      	ldr	r2, [pc, #592]	; (8037ac4 <UART_SetConfig+0x930>)
 8037872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8037876:	461a      	mov	r2, r3
 8037878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803787a:	fbb3 f3f2 	udiv	r3, r3, r2
 803787e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8037880:	697b      	ldr	r3, [r7, #20]
 8037882:	685a      	ldr	r2, [r3, #4]
 8037884:	4613      	mov	r3, r2
 8037886:	005b      	lsls	r3, r3, #1
 8037888:	4413      	add	r3, r2
 803788a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803788c:	429a      	cmp	r2, r3
 803788e:	d305      	bcc.n	803789c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8037890:	697b      	ldr	r3, [r7, #20]
 8037892:	685b      	ldr	r3, [r3, #4]
 8037894:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8037896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8037898:	429a      	cmp	r2, r3
 803789a:	d903      	bls.n	80378a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 803789c:	2301      	movs	r3, #1
 803789e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80378a2:	e1c1      	b.n	8037c28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80378a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80378a6:	2200      	movs	r2, #0
 80378a8:	60bb      	str	r3, [r7, #8]
 80378aa:	60fa      	str	r2, [r7, #12]
 80378ac:	697b      	ldr	r3, [r7, #20]
 80378ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80378b0:	4a84      	ldr	r2, [pc, #528]	; (8037ac4 <UART_SetConfig+0x930>)
 80378b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80378b6:	b29b      	uxth	r3, r3
 80378b8:	2200      	movs	r2, #0
 80378ba:	603b      	str	r3, [r7, #0]
 80378bc:	607a      	str	r2, [r7, #4]
 80378be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80378c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80378c6:	f7e8 fd5b 	bl	8020380 <__aeabi_uldivmod>
 80378ca:	4602      	mov	r2, r0
 80378cc:	460b      	mov	r3, r1
 80378ce:	4610      	mov	r0, r2
 80378d0:	4619      	mov	r1, r3
 80378d2:	f04f 0200 	mov.w	r2, #0
 80378d6:	f04f 0300 	mov.w	r3, #0
 80378da:	020b      	lsls	r3, r1, #8
 80378dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80378e0:	0202      	lsls	r2, r0, #8
 80378e2:	6979      	ldr	r1, [r7, #20]
 80378e4:	6849      	ldr	r1, [r1, #4]
 80378e6:	0849      	lsrs	r1, r1, #1
 80378e8:	2000      	movs	r0, #0
 80378ea:	460c      	mov	r4, r1
 80378ec:	4605      	mov	r5, r0
 80378ee:	eb12 0804 	adds.w	r8, r2, r4
 80378f2:	eb43 0905 	adc.w	r9, r3, r5
 80378f6:	697b      	ldr	r3, [r7, #20]
 80378f8:	685b      	ldr	r3, [r3, #4]
 80378fa:	2200      	movs	r2, #0
 80378fc:	469a      	mov	sl, r3
 80378fe:	4693      	mov	fp, r2
 8037900:	4652      	mov	r2, sl
 8037902:	465b      	mov	r3, fp
 8037904:	4640      	mov	r0, r8
 8037906:	4649      	mov	r1, r9
 8037908:	f7e8 fd3a 	bl	8020380 <__aeabi_uldivmod>
 803790c:	4602      	mov	r2, r0
 803790e:	460b      	mov	r3, r1
 8037910:	4613      	mov	r3, r2
 8037912:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8037914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803791a:	d308      	bcc.n	803792e <UART_SetConfig+0x79a>
 803791c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803791e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8037922:	d204      	bcs.n	803792e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8037924:	697b      	ldr	r3, [r7, #20]
 8037926:	681b      	ldr	r3, [r3, #0]
 8037928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803792a:	60da      	str	r2, [r3, #12]
 803792c:	e17c      	b.n	8037c28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 803792e:	2301      	movs	r3, #1
 8037930:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8037934:	e178      	b.n	8037c28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8037936:	697b      	ldr	r3, [r7, #20]
 8037938:	69db      	ldr	r3, [r3, #28]
 803793a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803793e:	f040 80c5 	bne.w	8037acc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8037942:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8037946:	2b20      	cmp	r3, #32
 8037948:	dc48      	bgt.n	80379dc <UART_SetConfig+0x848>
 803794a:	2b00      	cmp	r3, #0
 803794c:	db7b      	blt.n	8037a46 <UART_SetConfig+0x8b2>
 803794e:	2b20      	cmp	r3, #32
 8037950:	d879      	bhi.n	8037a46 <UART_SetConfig+0x8b2>
 8037952:	a201      	add	r2, pc, #4	; (adr r2, 8037958 <UART_SetConfig+0x7c4>)
 8037954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8037958:	080379e3 	.word	0x080379e3
 803795c:	080379eb 	.word	0x080379eb
 8037960:	08037a47 	.word	0x08037a47
 8037964:	08037a47 	.word	0x08037a47
 8037968:	080379f3 	.word	0x080379f3
 803796c:	08037a47 	.word	0x08037a47
 8037970:	08037a47 	.word	0x08037a47
 8037974:	08037a47 	.word	0x08037a47
 8037978:	08037a03 	.word	0x08037a03
 803797c:	08037a47 	.word	0x08037a47
 8037980:	08037a47 	.word	0x08037a47
 8037984:	08037a47 	.word	0x08037a47
 8037988:	08037a47 	.word	0x08037a47
 803798c:	08037a47 	.word	0x08037a47
 8037990:	08037a47 	.word	0x08037a47
 8037994:	08037a47 	.word	0x08037a47
 8037998:	08037a13 	.word	0x08037a13
 803799c:	08037a47 	.word	0x08037a47
 80379a0:	08037a47 	.word	0x08037a47
 80379a4:	08037a47 	.word	0x08037a47
 80379a8:	08037a47 	.word	0x08037a47
 80379ac:	08037a47 	.word	0x08037a47
 80379b0:	08037a47 	.word	0x08037a47
 80379b4:	08037a47 	.word	0x08037a47
 80379b8:	08037a47 	.word	0x08037a47
 80379bc:	08037a47 	.word	0x08037a47
 80379c0:	08037a47 	.word	0x08037a47
 80379c4:	08037a47 	.word	0x08037a47
 80379c8:	08037a47 	.word	0x08037a47
 80379cc:	08037a47 	.word	0x08037a47
 80379d0:	08037a47 	.word	0x08037a47
 80379d4:	08037a47 	.word	0x08037a47
 80379d8:	08037a39 	.word	0x08037a39
 80379dc:	2b40      	cmp	r3, #64	; 0x40
 80379de:	d02e      	beq.n	8037a3e <UART_SetConfig+0x8aa>
 80379e0:	e031      	b.n	8037a46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80379e2:	f7fb fc4d 	bl	8033280 <HAL_RCC_GetPCLK1Freq>
 80379e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80379e8:	e033      	b.n	8037a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80379ea:	f7fb fc5f 	bl	80332ac <HAL_RCC_GetPCLK2Freq>
 80379ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80379f0:	e02f      	b.n	8037a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80379f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80379f6:	4618      	mov	r0, r3
 80379f8:	f7fc fbca 	bl	8034190 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80379fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80379fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037a00:	e027      	b.n	8037a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8037a02:	f107 0318 	add.w	r3, r7, #24
 8037a06:	4618      	mov	r0, r3
 8037a08:	f7fc fd16 	bl	8034438 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8037a0c:	69fb      	ldr	r3, [r7, #28]
 8037a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037a10:	e01f      	b.n	8037a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8037a12:	4b2d      	ldr	r3, [pc, #180]	; (8037ac8 <UART_SetConfig+0x934>)
 8037a14:	681b      	ldr	r3, [r3, #0]
 8037a16:	f003 0320 	and.w	r3, r3, #32
 8037a1a:	2b00      	cmp	r3, #0
 8037a1c:	d009      	beq.n	8037a32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8037a1e:	4b2a      	ldr	r3, [pc, #168]	; (8037ac8 <UART_SetConfig+0x934>)
 8037a20:	681b      	ldr	r3, [r3, #0]
 8037a22:	08db      	lsrs	r3, r3, #3
 8037a24:	f003 0303 	and.w	r3, r3, #3
 8037a28:	4a24      	ldr	r2, [pc, #144]	; (8037abc <UART_SetConfig+0x928>)
 8037a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8037a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8037a30:	e00f      	b.n	8037a52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8037a32:	4b22      	ldr	r3, [pc, #136]	; (8037abc <UART_SetConfig+0x928>)
 8037a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037a36:	e00c      	b.n	8037a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8037a38:	4b21      	ldr	r3, [pc, #132]	; (8037ac0 <UART_SetConfig+0x92c>)
 8037a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037a3c:	e009      	b.n	8037a52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8037a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8037a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037a44:	e005      	b.n	8037a52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8037a46:	2300      	movs	r3, #0
 8037a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8037a4a:	2301      	movs	r3, #1
 8037a4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8037a50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8037a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037a54:	2b00      	cmp	r3, #0
 8037a56:	f000 80e7 	beq.w	8037c28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8037a5a:	697b      	ldr	r3, [r7, #20]
 8037a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8037a5e:	4a19      	ldr	r2, [pc, #100]	; (8037ac4 <UART_SetConfig+0x930>)
 8037a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8037a64:	461a      	mov	r2, r3
 8037a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8037a6c:	005a      	lsls	r2, r3, #1
 8037a6e:	697b      	ldr	r3, [r7, #20]
 8037a70:	685b      	ldr	r3, [r3, #4]
 8037a72:	085b      	lsrs	r3, r3, #1
 8037a74:	441a      	add	r2, r3
 8037a76:	697b      	ldr	r3, [r7, #20]
 8037a78:	685b      	ldr	r3, [r3, #4]
 8037a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8037a7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8037a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037a82:	2b0f      	cmp	r3, #15
 8037a84:	d916      	bls.n	8037ab4 <UART_SetConfig+0x920>
 8037a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8037a8c:	d212      	bcs.n	8037ab4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8037a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037a90:	b29b      	uxth	r3, r3
 8037a92:	f023 030f 	bic.w	r3, r3, #15
 8037a96:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8037a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037a9a:	085b      	lsrs	r3, r3, #1
 8037a9c:	b29b      	uxth	r3, r3
 8037a9e:	f003 0307 	and.w	r3, r3, #7
 8037aa2:	b29a      	uxth	r2, r3
 8037aa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8037aa6:	4313      	orrs	r3, r2
 8037aa8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8037aaa:	697b      	ldr	r3, [r7, #20]
 8037aac:	681b      	ldr	r3, [r3, #0]
 8037aae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8037ab0:	60da      	str	r2, [r3, #12]
 8037ab2:	e0b9      	b.n	8037c28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8037ab4:	2301      	movs	r3, #1
 8037ab6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8037aba:	e0b5      	b.n	8037c28 <UART_SetConfig+0xa94>
 8037abc:	03d09000 	.word	0x03d09000
 8037ac0:	003d0900 	.word	0x003d0900
 8037ac4:	08059580 	.word	0x08059580
 8037ac8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8037acc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8037ad0:	2b20      	cmp	r3, #32
 8037ad2:	dc49      	bgt.n	8037b68 <UART_SetConfig+0x9d4>
 8037ad4:	2b00      	cmp	r3, #0
 8037ad6:	db7c      	blt.n	8037bd2 <UART_SetConfig+0xa3e>
 8037ad8:	2b20      	cmp	r3, #32
 8037ada:	d87a      	bhi.n	8037bd2 <UART_SetConfig+0xa3e>
 8037adc:	a201      	add	r2, pc, #4	; (adr r2, 8037ae4 <UART_SetConfig+0x950>)
 8037ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8037ae2:	bf00      	nop
 8037ae4:	08037b6f 	.word	0x08037b6f
 8037ae8:	08037b77 	.word	0x08037b77
 8037aec:	08037bd3 	.word	0x08037bd3
 8037af0:	08037bd3 	.word	0x08037bd3
 8037af4:	08037b7f 	.word	0x08037b7f
 8037af8:	08037bd3 	.word	0x08037bd3
 8037afc:	08037bd3 	.word	0x08037bd3
 8037b00:	08037bd3 	.word	0x08037bd3
 8037b04:	08037b8f 	.word	0x08037b8f
 8037b08:	08037bd3 	.word	0x08037bd3
 8037b0c:	08037bd3 	.word	0x08037bd3
 8037b10:	08037bd3 	.word	0x08037bd3
 8037b14:	08037bd3 	.word	0x08037bd3
 8037b18:	08037bd3 	.word	0x08037bd3
 8037b1c:	08037bd3 	.word	0x08037bd3
 8037b20:	08037bd3 	.word	0x08037bd3
 8037b24:	08037b9f 	.word	0x08037b9f
 8037b28:	08037bd3 	.word	0x08037bd3
 8037b2c:	08037bd3 	.word	0x08037bd3
 8037b30:	08037bd3 	.word	0x08037bd3
 8037b34:	08037bd3 	.word	0x08037bd3
 8037b38:	08037bd3 	.word	0x08037bd3
 8037b3c:	08037bd3 	.word	0x08037bd3
 8037b40:	08037bd3 	.word	0x08037bd3
 8037b44:	08037bd3 	.word	0x08037bd3
 8037b48:	08037bd3 	.word	0x08037bd3
 8037b4c:	08037bd3 	.word	0x08037bd3
 8037b50:	08037bd3 	.word	0x08037bd3
 8037b54:	08037bd3 	.word	0x08037bd3
 8037b58:	08037bd3 	.word	0x08037bd3
 8037b5c:	08037bd3 	.word	0x08037bd3
 8037b60:	08037bd3 	.word	0x08037bd3
 8037b64:	08037bc5 	.word	0x08037bc5
 8037b68:	2b40      	cmp	r3, #64	; 0x40
 8037b6a:	d02e      	beq.n	8037bca <UART_SetConfig+0xa36>
 8037b6c:	e031      	b.n	8037bd2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8037b6e:	f7fb fb87 	bl	8033280 <HAL_RCC_GetPCLK1Freq>
 8037b72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8037b74:	e033      	b.n	8037bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8037b76:	f7fb fb99 	bl	80332ac <HAL_RCC_GetPCLK2Freq>
 8037b7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8037b7c:	e02f      	b.n	8037bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8037b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8037b82:	4618      	mov	r0, r3
 8037b84:	f7fc fb04 	bl	8034190 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8037b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037b8c:	e027      	b.n	8037bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8037b8e:	f107 0318 	add.w	r3, r7, #24
 8037b92:	4618      	mov	r0, r3
 8037b94:	f7fc fc50 	bl	8034438 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8037b98:	69fb      	ldr	r3, [r7, #28]
 8037b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037b9c:	e01f      	b.n	8037bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8037b9e:	4b2d      	ldr	r3, [pc, #180]	; (8037c54 <UART_SetConfig+0xac0>)
 8037ba0:	681b      	ldr	r3, [r3, #0]
 8037ba2:	f003 0320 	and.w	r3, r3, #32
 8037ba6:	2b00      	cmp	r3, #0
 8037ba8:	d009      	beq.n	8037bbe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8037baa:	4b2a      	ldr	r3, [pc, #168]	; (8037c54 <UART_SetConfig+0xac0>)
 8037bac:	681b      	ldr	r3, [r3, #0]
 8037bae:	08db      	lsrs	r3, r3, #3
 8037bb0:	f003 0303 	and.w	r3, r3, #3
 8037bb4:	4a28      	ldr	r2, [pc, #160]	; (8037c58 <UART_SetConfig+0xac4>)
 8037bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8037bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8037bbc:	e00f      	b.n	8037bde <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8037bbe:	4b26      	ldr	r3, [pc, #152]	; (8037c58 <UART_SetConfig+0xac4>)
 8037bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037bc2:	e00c      	b.n	8037bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8037bc4:	4b25      	ldr	r3, [pc, #148]	; (8037c5c <UART_SetConfig+0xac8>)
 8037bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037bc8:	e009      	b.n	8037bde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8037bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8037bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8037bd0:	e005      	b.n	8037bde <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8037bd2:	2300      	movs	r3, #0
 8037bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8037bd6:	2301      	movs	r3, #1
 8037bd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8037bdc:	bf00      	nop
    }

    if (pclk != 0U)
 8037bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037be0:	2b00      	cmp	r3, #0
 8037be2:	d021      	beq.n	8037c28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8037be4:	697b      	ldr	r3, [r7, #20]
 8037be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8037be8:	4a1d      	ldr	r2, [pc, #116]	; (8037c60 <UART_SetConfig+0xacc>)
 8037bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8037bee:	461a      	mov	r2, r3
 8037bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037bf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8037bf6:	697b      	ldr	r3, [r7, #20]
 8037bf8:	685b      	ldr	r3, [r3, #4]
 8037bfa:	085b      	lsrs	r3, r3, #1
 8037bfc:	441a      	add	r2, r3
 8037bfe:	697b      	ldr	r3, [r7, #20]
 8037c00:	685b      	ldr	r3, [r3, #4]
 8037c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8037c06:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8037c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037c0a:	2b0f      	cmp	r3, #15
 8037c0c:	d909      	bls.n	8037c22 <UART_SetConfig+0xa8e>
 8037c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8037c14:	d205      	bcs.n	8037c22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8037c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037c18:	b29a      	uxth	r2, r3
 8037c1a:	697b      	ldr	r3, [r7, #20]
 8037c1c:	681b      	ldr	r3, [r3, #0]
 8037c1e:	60da      	str	r2, [r3, #12]
 8037c20:	e002      	b.n	8037c28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8037c22:	2301      	movs	r3, #1
 8037c24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8037c28:	697b      	ldr	r3, [r7, #20]
 8037c2a:	2201      	movs	r2, #1
 8037c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8037c30:	697b      	ldr	r3, [r7, #20]
 8037c32:	2201      	movs	r2, #1
 8037c34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8037c38:	697b      	ldr	r3, [r7, #20]
 8037c3a:	2200      	movs	r2, #0
 8037c3c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8037c3e:	697b      	ldr	r3, [r7, #20]
 8037c40:	2200      	movs	r2, #0
 8037c42:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8037c44:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8037c48:	4618      	mov	r0, r3
 8037c4a:	3748      	adds	r7, #72	; 0x48
 8037c4c:	46bd      	mov	sp, r7
 8037c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8037c52:	bf00      	nop
 8037c54:	58024400 	.word	0x58024400
 8037c58:	03d09000 	.word	0x03d09000
 8037c5c:	003d0900 	.word	0x003d0900
 8037c60:	08059580 	.word	0x08059580

08037c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8037c64:	b480      	push	{r7}
 8037c66:	b083      	sub	sp, #12
 8037c68:	af00      	add	r7, sp, #0
 8037c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8037c6c:	687b      	ldr	r3, [r7, #4]
 8037c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037c70:	f003 0301 	and.w	r3, r3, #1
 8037c74:	2b00      	cmp	r3, #0
 8037c76:	d00a      	beq.n	8037c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8037c78:	687b      	ldr	r3, [r7, #4]
 8037c7a:	681b      	ldr	r3, [r3, #0]
 8037c7c:	685b      	ldr	r3, [r3, #4]
 8037c7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8037c82:	687b      	ldr	r3, [r7, #4]
 8037c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037c86:	687b      	ldr	r3, [r7, #4]
 8037c88:	681b      	ldr	r3, [r3, #0]
 8037c8a:	430a      	orrs	r2, r1
 8037c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8037c8e:	687b      	ldr	r3, [r7, #4]
 8037c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037c92:	f003 0302 	and.w	r3, r3, #2
 8037c96:	2b00      	cmp	r3, #0
 8037c98:	d00a      	beq.n	8037cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8037c9a:	687b      	ldr	r3, [r7, #4]
 8037c9c:	681b      	ldr	r3, [r3, #0]
 8037c9e:	685b      	ldr	r3, [r3, #4]
 8037ca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8037ca4:	687b      	ldr	r3, [r7, #4]
 8037ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8037ca8:	687b      	ldr	r3, [r7, #4]
 8037caa:	681b      	ldr	r3, [r3, #0]
 8037cac:	430a      	orrs	r2, r1
 8037cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8037cb0:	687b      	ldr	r3, [r7, #4]
 8037cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037cb4:	f003 0304 	and.w	r3, r3, #4
 8037cb8:	2b00      	cmp	r3, #0
 8037cba:	d00a      	beq.n	8037cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8037cbc:	687b      	ldr	r3, [r7, #4]
 8037cbe:	681b      	ldr	r3, [r3, #0]
 8037cc0:	685b      	ldr	r3, [r3, #4]
 8037cc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8037cc6:	687b      	ldr	r3, [r7, #4]
 8037cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8037cca:	687b      	ldr	r3, [r7, #4]
 8037ccc:	681b      	ldr	r3, [r3, #0]
 8037cce:	430a      	orrs	r2, r1
 8037cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8037cd2:	687b      	ldr	r3, [r7, #4]
 8037cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037cd6:	f003 0308 	and.w	r3, r3, #8
 8037cda:	2b00      	cmp	r3, #0
 8037cdc:	d00a      	beq.n	8037cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8037cde:	687b      	ldr	r3, [r7, #4]
 8037ce0:	681b      	ldr	r3, [r3, #0]
 8037ce2:	685b      	ldr	r3, [r3, #4]
 8037ce4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8037ce8:	687b      	ldr	r3, [r7, #4]
 8037cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8037cec:	687b      	ldr	r3, [r7, #4]
 8037cee:	681b      	ldr	r3, [r3, #0]
 8037cf0:	430a      	orrs	r2, r1
 8037cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8037cf4:	687b      	ldr	r3, [r7, #4]
 8037cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037cf8:	f003 0310 	and.w	r3, r3, #16
 8037cfc:	2b00      	cmp	r3, #0
 8037cfe:	d00a      	beq.n	8037d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8037d00:	687b      	ldr	r3, [r7, #4]
 8037d02:	681b      	ldr	r3, [r3, #0]
 8037d04:	689b      	ldr	r3, [r3, #8]
 8037d06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8037d0a:	687b      	ldr	r3, [r7, #4]
 8037d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8037d0e:	687b      	ldr	r3, [r7, #4]
 8037d10:	681b      	ldr	r3, [r3, #0]
 8037d12:	430a      	orrs	r2, r1
 8037d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8037d16:	687b      	ldr	r3, [r7, #4]
 8037d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037d1a:	f003 0320 	and.w	r3, r3, #32
 8037d1e:	2b00      	cmp	r3, #0
 8037d20:	d00a      	beq.n	8037d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8037d22:	687b      	ldr	r3, [r7, #4]
 8037d24:	681b      	ldr	r3, [r3, #0]
 8037d26:	689b      	ldr	r3, [r3, #8]
 8037d28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8037d2c:	687b      	ldr	r3, [r7, #4]
 8037d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8037d30:	687b      	ldr	r3, [r7, #4]
 8037d32:	681b      	ldr	r3, [r3, #0]
 8037d34:	430a      	orrs	r2, r1
 8037d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8037d38:	687b      	ldr	r3, [r7, #4]
 8037d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8037d40:	2b00      	cmp	r3, #0
 8037d42:	d01a      	beq.n	8037d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8037d44:	687b      	ldr	r3, [r7, #4]
 8037d46:	681b      	ldr	r3, [r3, #0]
 8037d48:	685b      	ldr	r3, [r3, #4]
 8037d4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8037d4e:	687b      	ldr	r3, [r7, #4]
 8037d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8037d52:	687b      	ldr	r3, [r7, #4]
 8037d54:	681b      	ldr	r3, [r3, #0]
 8037d56:	430a      	orrs	r2, r1
 8037d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8037d5a:	687b      	ldr	r3, [r7, #4]
 8037d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8037d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8037d62:	d10a      	bne.n	8037d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8037d64:	687b      	ldr	r3, [r7, #4]
 8037d66:	681b      	ldr	r3, [r3, #0]
 8037d68:	685b      	ldr	r3, [r3, #4]
 8037d6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8037d6e:	687b      	ldr	r3, [r7, #4]
 8037d70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8037d72:	687b      	ldr	r3, [r7, #4]
 8037d74:	681b      	ldr	r3, [r3, #0]
 8037d76:	430a      	orrs	r2, r1
 8037d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8037d7a:	687b      	ldr	r3, [r7, #4]
 8037d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8037d82:	2b00      	cmp	r3, #0
 8037d84:	d00a      	beq.n	8037d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8037d86:	687b      	ldr	r3, [r7, #4]
 8037d88:	681b      	ldr	r3, [r3, #0]
 8037d8a:	685b      	ldr	r3, [r3, #4]
 8037d8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8037d90:	687b      	ldr	r3, [r7, #4]
 8037d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8037d94:	687b      	ldr	r3, [r7, #4]
 8037d96:	681b      	ldr	r3, [r3, #0]
 8037d98:	430a      	orrs	r2, r1
 8037d9a:	605a      	str	r2, [r3, #4]
  }
}
 8037d9c:	bf00      	nop
 8037d9e:	370c      	adds	r7, #12
 8037da0:	46bd      	mov	sp, r7
 8037da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037da6:	4770      	bx	lr

08037da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8037da8:	b580      	push	{r7, lr}
 8037daa:	b086      	sub	sp, #24
 8037dac:	af02      	add	r7, sp, #8
 8037dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8037db0:	687b      	ldr	r3, [r7, #4]
 8037db2:	2200      	movs	r2, #0
 8037db4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8037db8:	f7f4 faec 	bl	802c394 <HAL_GetTick>
 8037dbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8037dbe:	687b      	ldr	r3, [r7, #4]
 8037dc0:	681b      	ldr	r3, [r3, #0]
 8037dc2:	681b      	ldr	r3, [r3, #0]
 8037dc4:	f003 0308 	and.w	r3, r3, #8
 8037dc8:	2b08      	cmp	r3, #8
 8037dca:	d10e      	bne.n	8037dea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8037dcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8037dd0:	9300      	str	r3, [sp, #0]
 8037dd2:	68fb      	ldr	r3, [r7, #12]
 8037dd4:	2200      	movs	r2, #0
 8037dd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8037dda:	6878      	ldr	r0, [r7, #4]
 8037ddc:	f000 f82f 	bl	8037e3e <UART_WaitOnFlagUntilTimeout>
 8037de0:	4603      	mov	r3, r0
 8037de2:	2b00      	cmp	r3, #0
 8037de4:	d001      	beq.n	8037dea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8037de6:	2303      	movs	r3, #3
 8037de8:	e025      	b.n	8037e36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8037dea:	687b      	ldr	r3, [r7, #4]
 8037dec:	681b      	ldr	r3, [r3, #0]
 8037dee:	681b      	ldr	r3, [r3, #0]
 8037df0:	f003 0304 	and.w	r3, r3, #4
 8037df4:	2b04      	cmp	r3, #4
 8037df6:	d10e      	bne.n	8037e16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8037df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8037dfc:	9300      	str	r3, [sp, #0]
 8037dfe:	68fb      	ldr	r3, [r7, #12]
 8037e00:	2200      	movs	r2, #0
 8037e02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8037e06:	6878      	ldr	r0, [r7, #4]
 8037e08:	f000 f819 	bl	8037e3e <UART_WaitOnFlagUntilTimeout>
 8037e0c:	4603      	mov	r3, r0
 8037e0e:	2b00      	cmp	r3, #0
 8037e10:	d001      	beq.n	8037e16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8037e12:	2303      	movs	r3, #3
 8037e14:	e00f      	b.n	8037e36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8037e16:	687b      	ldr	r3, [r7, #4]
 8037e18:	2220      	movs	r2, #32
 8037e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8037e1e:	687b      	ldr	r3, [r7, #4]
 8037e20:	2220      	movs	r2, #32
 8037e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8037e26:	687b      	ldr	r3, [r7, #4]
 8037e28:	2200      	movs	r2, #0
 8037e2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8037e2c:	687b      	ldr	r3, [r7, #4]
 8037e2e:	2200      	movs	r2, #0
 8037e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8037e34:	2300      	movs	r3, #0
}
 8037e36:	4618      	mov	r0, r3
 8037e38:	3710      	adds	r7, #16
 8037e3a:	46bd      	mov	sp, r7
 8037e3c:	bd80      	pop	{r7, pc}

08037e3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8037e3e:	b580      	push	{r7, lr}
 8037e40:	b09c      	sub	sp, #112	; 0x70
 8037e42:	af00      	add	r7, sp, #0
 8037e44:	60f8      	str	r0, [r7, #12]
 8037e46:	60b9      	str	r1, [r7, #8]
 8037e48:	603b      	str	r3, [r7, #0]
 8037e4a:	4613      	mov	r3, r2
 8037e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8037e4e:	e0a9      	b.n	8037fa4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8037e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8037e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8037e56:	f000 80a5 	beq.w	8037fa4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8037e5a:	f7f4 fa9b 	bl	802c394 <HAL_GetTick>
 8037e5e:	4602      	mov	r2, r0
 8037e60:	683b      	ldr	r3, [r7, #0]
 8037e62:	1ad3      	subs	r3, r2, r3
 8037e64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8037e66:	429a      	cmp	r2, r3
 8037e68:	d302      	bcc.n	8037e70 <UART_WaitOnFlagUntilTimeout+0x32>
 8037e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8037e6c:	2b00      	cmp	r3, #0
 8037e6e:	d140      	bne.n	8037ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8037e70:	68fb      	ldr	r3, [r7, #12]
 8037e72:	681b      	ldr	r3, [r3, #0]
 8037e74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8037e78:	e853 3f00 	ldrex	r3, [r3]
 8037e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8037e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037e80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8037e84:	667b      	str	r3, [r7, #100]	; 0x64
 8037e86:	68fb      	ldr	r3, [r7, #12]
 8037e88:	681b      	ldr	r3, [r3, #0]
 8037e8a:	461a      	mov	r2, r3
 8037e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8037e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8037e90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037e92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8037e94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8037e96:	e841 2300 	strex	r3, r2, [r1]
 8037e9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8037e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8037e9e:	2b00      	cmp	r3, #0
 8037ea0:	d1e6      	bne.n	8037e70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8037ea2:	68fb      	ldr	r3, [r7, #12]
 8037ea4:	681b      	ldr	r3, [r3, #0]
 8037ea6:	3308      	adds	r3, #8
 8037ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037eac:	e853 3f00 	ldrex	r3, [r3]
 8037eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8037eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037eb4:	f023 0301 	bic.w	r3, r3, #1
 8037eb8:	663b      	str	r3, [r7, #96]	; 0x60
 8037eba:	68fb      	ldr	r3, [r7, #12]
 8037ebc:	681b      	ldr	r3, [r3, #0]
 8037ebe:	3308      	adds	r3, #8
 8037ec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8037ec2:	64ba      	str	r2, [r7, #72]	; 0x48
 8037ec4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037ec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8037ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8037eca:	e841 2300 	strex	r3, r2, [r1]
 8037ece:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8037ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8037ed2:	2b00      	cmp	r3, #0
 8037ed4:	d1e5      	bne.n	8037ea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8037ed6:	68fb      	ldr	r3, [r7, #12]
 8037ed8:	2220      	movs	r2, #32
 8037eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8037ede:	68fb      	ldr	r3, [r7, #12]
 8037ee0:	2220      	movs	r2, #32
 8037ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8037ee6:	68fb      	ldr	r3, [r7, #12]
 8037ee8:	2200      	movs	r2, #0
 8037eea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8037eee:	2303      	movs	r3, #3
 8037ef0:	e069      	b.n	8037fc6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8037ef2:	68fb      	ldr	r3, [r7, #12]
 8037ef4:	681b      	ldr	r3, [r3, #0]
 8037ef6:	681b      	ldr	r3, [r3, #0]
 8037ef8:	f003 0304 	and.w	r3, r3, #4
 8037efc:	2b00      	cmp	r3, #0
 8037efe:	d051      	beq.n	8037fa4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8037f00:	68fb      	ldr	r3, [r7, #12]
 8037f02:	681b      	ldr	r3, [r3, #0]
 8037f04:	69db      	ldr	r3, [r3, #28]
 8037f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8037f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8037f0e:	d149      	bne.n	8037fa4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8037f10:	68fb      	ldr	r3, [r7, #12]
 8037f12:	681b      	ldr	r3, [r3, #0]
 8037f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8037f18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8037f1a:	68fb      	ldr	r3, [r7, #12]
 8037f1c:	681b      	ldr	r3, [r3, #0]
 8037f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037f22:	e853 3f00 	ldrex	r3, [r3]
 8037f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8037f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037f2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8037f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8037f30:	68fb      	ldr	r3, [r7, #12]
 8037f32:	681b      	ldr	r3, [r3, #0]
 8037f34:	461a      	mov	r2, r3
 8037f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8037f38:	637b      	str	r3, [r7, #52]	; 0x34
 8037f3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8037f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8037f40:	e841 2300 	strex	r3, r2, [r1]
 8037f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8037f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037f48:	2b00      	cmp	r3, #0
 8037f4a:	d1e6      	bne.n	8037f1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8037f4c:	68fb      	ldr	r3, [r7, #12]
 8037f4e:	681b      	ldr	r3, [r3, #0]
 8037f50:	3308      	adds	r3, #8
 8037f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037f54:	697b      	ldr	r3, [r7, #20]
 8037f56:	e853 3f00 	ldrex	r3, [r3]
 8037f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8037f5c:	693b      	ldr	r3, [r7, #16]
 8037f5e:	f023 0301 	bic.w	r3, r3, #1
 8037f62:	66bb      	str	r3, [r7, #104]	; 0x68
 8037f64:	68fb      	ldr	r3, [r7, #12]
 8037f66:	681b      	ldr	r3, [r3, #0]
 8037f68:	3308      	adds	r3, #8
 8037f6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8037f6c:	623a      	str	r2, [r7, #32]
 8037f6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037f70:	69f9      	ldr	r1, [r7, #28]
 8037f72:	6a3a      	ldr	r2, [r7, #32]
 8037f74:	e841 2300 	strex	r3, r2, [r1]
 8037f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8037f7a:	69bb      	ldr	r3, [r7, #24]
 8037f7c:	2b00      	cmp	r3, #0
 8037f7e:	d1e5      	bne.n	8037f4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8037f80:	68fb      	ldr	r3, [r7, #12]
 8037f82:	2220      	movs	r2, #32
 8037f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8037f88:	68fb      	ldr	r3, [r7, #12]
 8037f8a:	2220      	movs	r2, #32
 8037f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8037f90:	68fb      	ldr	r3, [r7, #12]
 8037f92:	2220      	movs	r2, #32
 8037f94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8037f98:	68fb      	ldr	r3, [r7, #12]
 8037f9a:	2200      	movs	r2, #0
 8037f9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8037fa0:	2303      	movs	r3, #3
 8037fa2:	e010      	b.n	8037fc6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8037fa4:	68fb      	ldr	r3, [r7, #12]
 8037fa6:	681b      	ldr	r3, [r3, #0]
 8037fa8:	69da      	ldr	r2, [r3, #28]
 8037faa:	68bb      	ldr	r3, [r7, #8]
 8037fac:	4013      	ands	r3, r2
 8037fae:	68ba      	ldr	r2, [r7, #8]
 8037fb0:	429a      	cmp	r2, r3
 8037fb2:	bf0c      	ite	eq
 8037fb4:	2301      	moveq	r3, #1
 8037fb6:	2300      	movne	r3, #0
 8037fb8:	b2db      	uxtb	r3, r3
 8037fba:	461a      	mov	r2, r3
 8037fbc:	79fb      	ldrb	r3, [r7, #7]
 8037fbe:	429a      	cmp	r2, r3
 8037fc0:	f43f af46 	beq.w	8037e50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8037fc4:	2300      	movs	r3, #0
}
 8037fc6:	4618      	mov	r0, r3
 8037fc8:	3770      	adds	r7, #112	; 0x70
 8037fca:	46bd      	mov	sp, r7
 8037fcc:	bd80      	pop	{r7, pc}
	...

08037fd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8037fd0:	b480      	push	{r7}
 8037fd2:	b0a3      	sub	sp, #140	; 0x8c
 8037fd4:	af00      	add	r7, sp, #0
 8037fd6:	60f8      	str	r0, [r7, #12]
 8037fd8:	60b9      	str	r1, [r7, #8]
 8037fda:	4613      	mov	r3, r2
 8037fdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8037fde:	68fb      	ldr	r3, [r7, #12]
 8037fe0:	68ba      	ldr	r2, [r7, #8]
 8037fe2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8037fe4:	68fb      	ldr	r3, [r7, #12]
 8037fe6:	88fa      	ldrh	r2, [r7, #6]
 8037fe8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8037fec:	68fb      	ldr	r3, [r7, #12]
 8037fee:	88fa      	ldrh	r2, [r7, #6]
 8037ff0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8037ff4:	68fb      	ldr	r3, [r7, #12]
 8037ff6:	2200      	movs	r2, #0
 8037ff8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8037ffa:	68fb      	ldr	r3, [r7, #12]
 8037ffc:	689b      	ldr	r3, [r3, #8]
 8037ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8038002:	d10e      	bne.n	8038022 <UART_Start_Receive_IT+0x52>
 8038004:	68fb      	ldr	r3, [r7, #12]
 8038006:	691b      	ldr	r3, [r3, #16]
 8038008:	2b00      	cmp	r3, #0
 803800a:	d105      	bne.n	8038018 <UART_Start_Receive_IT+0x48>
 803800c:	68fb      	ldr	r3, [r7, #12]
 803800e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8038012:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8038016:	e02d      	b.n	8038074 <UART_Start_Receive_IT+0xa4>
 8038018:	68fb      	ldr	r3, [r7, #12]
 803801a:	22ff      	movs	r2, #255	; 0xff
 803801c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8038020:	e028      	b.n	8038074 <UART_Start_Receive_IT+0xa4>
 8038022:	68fb      	ldr	r3, [r7, #12]
 8038024:	689b      	ldr	r3, [r3, #8]
 8038026:	2b00      	cmp	r3, #0
 8038028:	d10d      	bne.n	8038046 <UART_Start_Receive_IT+0x76>
 803802a:	68fb      	ldr	r3, [r7, #12]
 803802c:	691b      	ldr	r3, [r3, #16]
 803802e:	2b00      	cmp	r3, #0
 8038030:	d104      	bne.n	803803c <UART_Start_Receive_IT+0x6c>
 8038032:	68fb      	ldr	r3, [r7, #12]
 8038034:	22ff      	movs	r2, #255	; 0xff
 8038036:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803803a:	e01b      	b.n	8038074 <UART_Start_Receive_IT+0xa4>
 803803c:	68fb      	ldr	r3, [r7, #12]
 803803e:	227f      	movs	r2, #127	; 0x7f
 8038040:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8038044:	e016      	b.n	8038074 <UART_Start_Receive_IT+0xa4>
 8038046:	68fb      	ldr	r3, [r7, #12]
 8038048:	689b      	ldr	r3, [r3, #8]
 803804a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803804e:	d10d      	bne.n	803806c <UART_Start_Receive_IT+0x9c>
 8038050:	68fb      	ldr	r3, [r7, #12]
 8038052:	691b      	ldr	r3, [r3, #16]
 8038054:	2b00      	cmp	r3, #0
 8038056:	d104      	bne.n	8038062 <UART_Start_Receive_IT+0x92>
 8038058:	68fb      	ldr	r3, [r7, #12]
 803805a:	227f      	movs	r2, #127	; 0x7f
 803805c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8038060:	e008      	b.n	8038074 <UART_Start_Receive_IT+0xa4>
 8038062:	68fb      	ldr	r3, [r7, #12]
 8038064:	223f      	movs	r2, #63	; 0x3f
 8038066:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803806a:	e003      	b.n	8038074 <UART_Start_Receive_IT+0xa4>
 803806c:	68fb      	ldr	r3, [r7, #12]
 803806e:	2200      	movs	r2, #0
 8038070:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8038074:	68fb      	ldr	r3, [r7, #12]
 8038076:	2200      	movs	r2, #0
 8038078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 803807c:	68fb      	ldr	r3, [r7, #12]
 803807e:	2222      	movs	r2, #34	; 0x22
 8038080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8038084:	68fb      	ldr	r3, [r7, #12]
 8038086:	681b      	ldr	r3, [r3, #0]
 8038088:	3308      	adds	r3, #8
 803808a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803808c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803808e:	e853 3f00 	ldrex	r3, [r3]
 8038092:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8038094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8038096:	f043 0301 	orr.w	r3, r3, #1
 803809a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 803809e:	68fb      	ldr	r3, [r7, #12]
 80380a0:	681b      	ldr	r3, [r3, #0]
 80380a2:	3308      	adds	r3, #8
 80380a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80380a8:	673a      	str	r2, [r7, #112]	; 0x70
 80380aa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80380ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80380ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80380b0:	e841 2300 	strex	r3, r2, [r1]
 80380b4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80380b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80380b8:	2b00      	cmp	r3, #0
 80380ba:	d1e3      	bne.n	8038084 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80380bc:	68fb      	ldr	r3, [r7, #12]
 80380be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80380c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80380c4:	d153      	bne.n	803816e <UART_Start_Receive_IT+0x19e>
 80380c6:	68fb      	ldr	r3, [r7, #12]
 80380c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80380cc:	88fa      	ldrh	r2, [r7, #6]
 80380ce:	429a      	cmp	r2, r3
 80380d0:	d34d      	bcc.n	803816e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80380d2:	68fb      	ldr	r3, [r7, #12]
 80380d4:	689b      	ldr	r3, [r3, #8]
 80380d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80380da:	d107      	bne.n	80380ec <UART_Start_Receive_IT+0x11c>
 80380dc:	68fb      	ldr	r3, [r7, #12]
 80380de:	691b      	ldr	r3, [r3, #16]
 80380e0:	2b00      	cmp	r3, #0
 80380e2:	d103      	bne.n	80380ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80380e4:	68fb      	ldr	r3, [r7, #12]
 80380e6:	4a4b      	ldr	r2, [pc, #300]	; (8038214 <UART_Start_Receive_IT+0x244>)
 80380e8:	671a      	str	r2, [r3, #112]	; 0x70
 80380ea:	e002      	b.n	80380f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80380ec:	68fb      	ldr	r3, [r7, #12]
 80380ee:	4a4a      	ldr	r2, [pc, #296]	; (8038218 <UART_Start_Receive_IT+0x248>)
 80380f0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80380f2:	68fb      	ldr	r3, [r7, #12]
 80380f4:	2200      	movs	r2, #0
 80380f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80380fa:	68fb      	ldr	r3, [r7, #12]
 80380fc:	691b      	ldr	r3, [r3, #16]
 80380fe:	2b00      	cmp	r3, #0
 8038100:	d01a      	beq.n	8038138 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8038102:	68fb      	ldr	r3, [r7, #12]
 8038104:	681b      	ldr	r3, [r3, #0]
 8038106:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803810a:	e853 3f00 	ldrex	r3, [r3]
 803810e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8038110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8038112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8038116:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803811a:	68fb      	ldr	r3, [r7, #12]
 803811c:	681b      	ldr	r3, [r3, #0]
 803811e:	461a      	mov	r2, r3
 8038120:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8038124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8038126:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038128:	6db9      	ldr	r1, [r7, #88]	; 0x58
 803812a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 803812c:	e841 2300 	strex	r3, r2, [r1]
 8038130:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8038132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8038134:	2b00      	cmp	r3, #0
 8038136:	d1e4      	bne.n	8038102 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8038138:	68fb      	ldr	r3, [r7, #12]
 803813a:	681b      	ldr	r3, [r3, #0]
 803813c:	3308      	adds	r3, #8
 803813e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8038142:	e853 3f00 	ldrex	r3, [r3]
 8038146:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8038148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803814a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803814e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8038150:	68fb      	ldr	r3, [r7, #12]
 8038152:	681b      	ldr	r3, [r3, #0]
 8038154:	3308      	adds	r3, #8
 8038156:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8038158:	64ba      	str	r2, [r7, #72]	; 0x48
 803815a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803815c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 803815e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8038160:	e841 2300 	strex	r3, r2, [r1]
 8038164:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8038166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8038168:	2b00      	cmp	r3, #0
 803816a:	d1e5      	bne.n	8038138 <UART_Start_Receive_IT+0x168>
 803816c:	e04a      	b.n	8038204 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 803816e:	68fb      	ldr	r3, [r7, #12]
 8038170:	689b      	ldr	r3, [r3, #8]
 8038172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8038176:	d107      	bne.n	8038188 <UART_Start_Receive_IT+0x1b8>
 8038178:	68fb      	ldr	r3, [r7, #12]
 803817a:	691b      	ldr	r3, [r3, #16]
 803817c:	2b00      	cmp	r3, #0
 803817e:	d103      	bne.n	8038188 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8038180:	68fb      	ldr	r3, [r7, #12]
 8038182:	4a26      	ldr	r2, [pc, #152]	; (803821c <UART_Start_Receive_IT+0x24c>)
 8038184:	671a      	str	r2, [r3, #112]	; 0x70
 8038186:	e002      	b.n	803818e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8038188:	68fb      	ldr	r3, [r7, #12]
 803818a:	4a25      	ldr	r2, [pc, #148]	; (8038220 <UART_Start_Receive_IT+0x250>)
 803818c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 803818e:	68fb      	ldr	r3, [r7, #12]
 8038190:	2200      	movs	r2, #0
 8038192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8038196:	68fb      	ldr	r3, [r7, #12]
 8038198:	691b      	ldr	r3, [r3, #16]
 803819a:	2b00      	cmp	r3, #0
 803819c:	d019      	beq.n	80381d2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 803819e:	68fb      	ldr	r3, [r7, #12]
 80381a0:	681b      	ldr	r3, [r3, #0]
 80381a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80381a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80381a6:	e853 3f00 	ldrex	r3, [r3]
 80381aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80381ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80381ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80381b2:	677b      	str	r3, [r7, #116]	; 0x74
 80381b4:	68fb      	ldr	r3, [r7, #12]
 80381b6:	681b      	ldr	r3, [r3, #0]
 80381b8:	461a      	mov	r2, r3
 80381ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80381bc:	637b      	str	r3, [r7, #52]	; 0x34
 80381be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80381c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80381c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80381c4:	e841 2300 	strex	r3, r2, [r1]
 80381c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80381ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80381cc:	2b00      	cmp	r3, #0
 80381ce:	d1e6      	bne.n	803819e <UART_Start_Receive_IT+0x1ce>
 80381d0:	e018      	b.n	8038204 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80381d2:	68fb      	ldr	r3, [r7, #12]
 80381d4:	681b      	ldr	r3, [r3, #0]
 80381d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80381d8:	697b      	ldr	r3, [r7, #20]
 80381da:	e853 3f00 	ldrex	r3, [r3]
 80381de:	613b      	str	r3, [r7, #16]
   return(result);
 80381e0:	693b      	ldr	r3, [r7, #16]
 80381e2:	f043 0320 	orr.w	r3, r3, #32
 80381e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80381e8:	68fb      	ldr	r3, [r7, #12]
 80381ea:	681b      	ldr	r3, [r3, #0]
 80381ec:	461a      	mov	r2, r3
 80381ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80381f0:	623b      	str	r3, [r7, #32]
 80381f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80381f4:	69f9      	ldr	r1, [r7, #28]
 80381f6:	6a3a      	ldr	r2, [r7, #32]
 80381f8:	e841 2300 	strex	r3, r2, [r1]
 80381fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80381fe:	69bb      	ldr	r3, [r7, #24]
 8038200:	2b00      	cmp	r3, #0
 8038202:	d1e6      	bne.n	80381d2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8038204:	2300      	movs	r3, #0
}
 8038206:	4618      	mov	r0, r3
 8038208:	378c      	adds	r7, #140	; 0x8c
 803820a:	46bd      	mov	sp, r7
 803820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038210:	4770      	bx	lr
 8038212:	bf00      	nop
 8038214:	08038c71 	.word	0x08038c71
 8038218:	08038979 	.word	0x08038979
 803821c:	08038817 	.word	0x08038817
 8038220:	080386b7 	.word	0x080386b7

08038224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8038224:	b480      	push	{r7}
 8038226:	b095      	sub	sp, #84	; 0x54
 8038228:	af00      	add	r7, sp, #0
 803822a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 803822c:	687b      	ldr	r3, [r7, #4]
 803822e:	681b      	ldr	r3, [r3, #0]
 8038230:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038234:	e853 3f00 	ldrex	r3, [r3]
 8038238:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803823c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8038240:	64fb      	str	r3, [r7, #76]	; 0x4c
 8038242:	687b      	ldr	r3, [r7, #4]
 8038244:	681b      	ldr	r3, [r3, #0]
 8038246:	461a      	mov	r2, r3
 8038248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803824a:	643b      	str	r3, [r7, #64]	; 0x40
 803824c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803824e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8038250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8038252:	e841 2300 	strex	r3, r2, [r1]
 8038256:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8038258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803825a:	2b00      	cmp	r3, #0
 803825c:	d1e6      	bne.n	803822c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 803825e:	687b      	ldr	r3, [r7, #4]
 8038260:	681b      	ldr	r3, [r3, #0]
 8038262:	3308      	adds	r3, #8
 8038264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038266:	6a3b      	ldr	r3, [r7, #32]
 8038268:	e853 3f00 	ldrex	r3, [r3]
 803826c:	61fb      	str	r3, [r7, #28]
   return(result);
 803826e:	69fa      	ldr	r2, [r7, #28]
 8038270:	4b1e      	ldr	r3, [pc, #120]	; (80382ec <UART_EndRxTransfer+0xc8>)
 8038272:	4013      	ands	r3, r2
 8038274:	64bb      	str	r3, [r7, #72]	; 0x48
 8038276:	687b      	ldr	r3, [r7, #4]
 8038278:	681b      	ldr	r3, [r3, #0]
 803827a:	3308      	adds	r3, #8
 803827c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803827e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8038280:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8038284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8038286:	e841 2300 	strex	r3, r2, [r1]
 803828a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803828e:	2b00      	cmp	r3, #0
 8038290:	d1e5      	bne.n	803825e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8038292:	687b      	ldr	r3, [r7, #4]
 8038294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8038296:	2b01      	cmp	r3, #1
 8038298:	d118      	bne.n	80382cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803829a:	687b      	ldr	r3, [r7, #4]
 803829c:	681b      	ldr	r3, [r3, #0]
 803829e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80382a0:	68fb      	ldr	r3, [r7, #12]
 80382a2:	e853 3f00 	ldrex	r3, [r3]
 80382a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80382a8:	68bb      	ldr	r3, [r7, #8]
 80382aa:	f023 0310 	bic.w	r3, r3, #16
 80382ae:	647b      	str	r3, [r7, #68]	; 0x44
 80382b0:	687b      	ldr	r3, [r7, #4]
 80382b2:	681b      	ldr	r3, [r3, #0]
 80382b4:	461a      	mov	r2, r3
 80382b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80382b8:	61bb      	str	r3, [r7, #24]
 80382ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80382bc:	6979      	ldr	r1, [r7, #20]
 80382be:	69ba      	ldr	r2, [r7, #24]
 80382c0:	e841 2300 	strex	r3, r2, [r1]
 80382c4:	613b      	str	r3, [r7, #16]
   return(result);
 80382c6:	693b      	ldr	r3, [r7, #16]
 80382c8:	2b00      	cmp	r3, #0
 80382ca:	d1e6      	bne.n	803829a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80382cc:	687b      	ldr	r3, [r7, #4]
 80382ce:	2220      	movs	r2, #32
 80382d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80382d4:	687b      	ldr	r3, [r7, #4]
 80382d6:	2200      	movs	r2, #0
 80382d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80382da:	687b      	ldr	r3, [r7, #4]
 80382dc:	2200      	movs	r2, #0
 80382de:	671a      	str	r2, [r3, #112]	; 0x70
}
 80382e0:	bf00      	nop
 80382e2:	3754      	adds	r7, #84	; 0x54
 80382e4:	46bd      	mov	sp, r7
 80382e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80382ea:	4770      	bx	lr
 80382ec:	effffffe 	.word	0xeffffffe

080382f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80382f0:	b580      	push	{r7, lr}
 80382f2:	b084      	sub	sp, #16
 80382f4:	af00      	add	r7, sp, #0
 80382f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80382f8:	687b      	ldr	r3, [r7, #4]
 80382fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80382fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80382fe:	68fb      	ldr	r3, [r7, #12]
 8038300:	2200      	movs	r2, #0
 8038302:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8038306:	68fb      	ldr	r3, [r7, #12]
 8038308:	2200      	movs	r2, #0
 803830a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 803830e:	68f8      	ldr	r0, [r7, #12]
 8038310:	f7fe ff2a 	bl	8037168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8038314:	bf00      	nop
 8038316:	3710      	adds	r7, #16
 8038318:	46bd      	mov	sp, r7
 803831a:	bd80      	pop	{r7, pc}

0803831c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 803831c:	b480      	push	{r7}
 803831e:	b08f      	sub	sp, #60	; 0x3c
 8038320:	af00      	add	r7, sp, #0
 8038322:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8038324:	687b      	ldr	r3, [r7, #4]
 8038326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803832a:	2b21      	cmp	r3, #33	; 0x21
 803832c:	d14c      	bne.n	80383c8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 803832e:	687b      	ldr	r3, [r7, #4]
 8038330:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8038334:	b29b      	uxth	r3, r3
 8038336:	2b00      	cmp	r3, #0
 8038338:	d132      	bne.n	80383a0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 803833a:	687b      	ldr	r3, [r7, #4]
 803833c:	681b      	ldr	r3, [r3, #0]
 803833e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038340:	6a3b      	ldr	r3, [r7, #32]
 8038342:	e853 3f00 	ldrex	r3, [r3]
 8038346:	61fb      	str	r3, [r7, #28]
   return(result);
 8038348:	69fb      	ldr	r3, [r7, #28]
 803834a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 803834e:	637b      	str	r3, [r7, #52]	; 0x34
 8038350:	687b      	ldr	r3, [r7, #4]
 8038352:	681b      	ldr	r3, [r3, #0]
 8038354:	461a      	mov	r2, r3
 8038356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038358:	62fb      	str	r3, [r7, #44]	; 0x2c
 803835a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803835c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803835e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8038360:	e841 2300 	strex	r3, r2, [r1]
 8038364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8038366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038368:	2b00      	cmp	r3, #0
 803836a:	d1e6      	bne.n	803833a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803836c:	687b      	ldr	r3, [r7, #4]
 803836e:	681b      	ldr	r3, [r3, #0]
 8038370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038372:	68fb      	ldr	r3, [r7, #12]
 8038374:	e853 3f00 	ldrex	r3, [r3]
 8038378:	60bb      	str	r3, [r7, #8]
   return(result);
 803837a:	68bb      	ldr	r3, [r7, #8]
 803837c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8038380:	633b      	str	r3, [r7, #48]	; 0x30
 8038382:	687b      	ldr	r3, [r7, #4]
 8038384:	681b      	ldr	r3, [r3, #0]
 8038386:	461a      	mov	r2, r3
 8038388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803838a:	61bb      	str	r3, [r7, #24]
 803838c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803838e:	6979      	ldr	r1, [r7, #20]
 8038390:	69ba      	ldr	r2, [r7, #24]
 8038392:	e841 2300 	strex	r3, r2, [r1]
 8038396:	613b      	str	r3, [r7, #16]
   return(result);
 8038398:	693b      	ldr	r3, [r7, #16]
 803839a:	2b00      	cmp	r3, #0
 803839c:	d1e6      	bne.n	803836c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 803839e:	e013      	b.n	80383c8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80383a0:	687b      	ldr	r3, [r7, #4]
 80383a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80383a4:	781a      	ldrb	r2, [r3, #0]
 80383a6:	687b      	ldr	r3, [r7, #4]
 80383a8:	681b      	ldr	r3, [r3, #0]
 80383aa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80383ac:	687b      	ldr	r3, [r7, #4]
 80383ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80383b0:	1c5a      	adds	r2, r3, #1
 80383b2:	687b      	ldr	r3, [r7, #4]
 80383b4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80383b6:	687b      	ldr	r3, [r7, #4]
 80383b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80383bc:	b29b      	uxth	r3, r3
 80383be:	3b01      	subs	r3, #1
 80383c0:	b29a      	uxth	r2, r3
 80383c2:	687b      	ldr	r3, [r7, #4]
 80383c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80383c8:	bf00      	nop
 80383ca:	373c      	adds	r7, #60	; 0x3c
 80383cc:	46bd      	mov	sp, r7
 80383ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80383d2:	4770      	bx	lr

080383d4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80383d4:	b480      	push	{r7}
 80383d6:	b091      	sub	sp, #68	; 0x44
 80383d8:	af00      	add	r7, sp, #0
 80383da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80383dc:	687b      	ldr	r3, [r7, #4]
 80383de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80383e2:	2b21      	cmp	r3, #33	; 0x21
 80383e4:	d151      	bne.n	803848a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80383e6:	687b      	ldr	r3, [r7, #4]
 80383e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80383ec:	b29b      	uxth	r3, r3
 80383ee:	2b00      	cmp	r3, #0
 80383f0:	d132      	bne.n	8038458 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80383f2:	687b      	ldr	r3, [r7, #4]
 80383f4:	681b      	ldr	r3, [r3, #0]
 80383f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80383f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80383fa:	e853 3f00 	ldrex	r3, [r3]
 80383fe:	623b      	str	r3, [r7, #32]
   return(result);
 8038400:	6a3b      	ldr	r3, [r7, #32]
 8038402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8038406:	63bb      	str	r3, [r7, #56]	; 0x38
 8038408:	687b      	ldr	r3, [r7, #4]
 803840a:	681b      	ldr	r3, [r3, #0]
 803840c:	461a      	mov	r2, r3
 803840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038410:	633b      	str	r3, [r7, #48]	; 0x30
 8038412:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038414:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8038416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8038418:	e841 2300 	strex	r3, r2, [r1]
 803841c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038420:	2b00      	cmp	r3, #0
 8038422:	d1e6      	bne.n	80383f2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8038424:	687b      	ldr	r3, [r7, #4]
 8038426:	681b      	ldr	r3, [r3, #0]
 8038428:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803842a:	693b      	ldr	r3, [r7, #16]
 803842c:	e853 3f00 	ldrex	r3, [r3]
 8038430:	60fb      	str	r3, [r7, #12]
   return(result);
 8038432:	68fb      	ldr	r3, [r7, #12]
 8038434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8038438:	637b      	str	r3, [r7, #52]	; 0x34
 803843a:	687b      	ldr	r3, [r7, #4]
 803843c:	681b      	ldr	r3, [r3, #0]
 803843e:	461a      	mov	r2, r3
 8038440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038442:	61fb      	str	r3, [r7, #28]
 8038444:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038446:	69b9      	ldr	r1, [r7, #24]
 8038448:	69fa      	ldr	r2, [r7, #28]
 803844a:	e841 2300 	strex	r3, r2, [r1]
 803844e:	617b      	str	r3, [r7, #20]
   return(result);
 8038450:	697b      	ldr	r3, [r7, #20]
 8038452:	2b00      	cmp	r3, #0
 8038454:	d1e6      	bne.n	8038424 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8038456:	e018      	b.n	803848a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8038458:	687b      	ldr	r3, [r7, #4]
 803845a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803845c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 803845e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8038460:	881b      	ldrh	r3, [r3, #0]
 8038462:	461a      	mov	r2, r3
 8038464:	687b      	ldr	r3, [r7, #4]
 8038466:	681b      	ldr	r3, [r3, #0]
 8038468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 803846c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 803846e:	687b      	ldr	r3, [r7, #4]
 8038470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8038472:	1c9a      	adds	r2, r3, #2
 8038474:	687b      	ldr	r3, [r7, #4]
 8038476:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8038478:	687b      	ldr	r3, [r7, #4]
 803847a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803847e:	b29b      	uxth	r3, r3
 8038480:	3b01      	subs	r3, #1
 8038482:	b29a      	uxth	r2, r3
 8038484:	687b      	ldr	r3, [r7, #4]
 8038486:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 803848a:	bf00      	nop
 803848c:	3744      	adds	r7, #68	; 0x44
 803848e:	46bd      	mov	sp, r7
 8038490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038494:	4770      	bx	lr

08038496 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8038496:	b480      	push	{r7}
 8038498:	b091      	sub	sp, #68	; 0x44
 803849a:	af00      	add	r7, sp, #0
 803849c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 803849e:	687b      	ldr	r3, [r7, #4]
 80384a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80384a4:	2b21      	cmp	r3, #33	; 0x21
 80384a6:	d160      	bne.n	803856a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80384a8:	687b      	ldr	r3, [r7, #4]
 80384aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80384ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80384b0:	e057      	b.n	8038562 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80384b2:	687b      	ldr	r3, [r7, #4]
 80384b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80384b8:	b29b      	uxth	r3, r3
 80384ba:	2b00      	cmp	r3, #0
 80384bc:	d133      	bne.n	8038526 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80384be:	687b      	ldr	r3, [r7, #4]
 80384c0:	681b      	ldr	r3, [r3, #0]
 80384c2:	3308      	adds	r3, #8
 80384c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80384c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80384c8:	e853 3f00 	ldrex	r3, [r3]
 80384cc:	623b      	str	r3, [r7, #32]
   return(result);
 80384ce:	6a3b      	ldr	r3, [r7, #32]
 80384d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80384d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80384d6:	687b      	ldr	r3, [r7, #4]
 80384d8:	681b      	ldr	r3, [r3, #0]
 80384da:	3308      	adds	r3, #8
 80384dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80384de:	633a      	str	r2, [r7, #48]	; 0x30
 80384e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80384e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80384e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80384e6:	e841 2300 	strex	r3, r2, [r1]
 80384ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80384ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80384ee:	2b00      	cmp	r3, #0
 80384f0:	d1e5      	bne.n	80384be <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80384f2:	687b      	ldr	r3, [r7, #4]
 80384f4:	681b      	ldr	r3, [r3, #0]
 80384f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80384f8:	693b      	ldr	r3, [r7, #16]
 80384fa:	e853 3f00 	ldrex	r3, [r3]
 80384fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8038500:	68fb      	ldr	r3, [r7, #12]
 8038502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8038506:	637b      	str	r3, [r7, #52]	; 0x34
 8038508:	687b      	ldr	r3, [r7, #4]
 803850a:	681b      	ldr	r3, [r3, #0]
 803850c:	461a      	mov	r2, r3
 803850e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038510:	61fb      	str	r3, [r7, #28]
 8038512:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038514:	69b9      	ldr	r1, [r7, #24]
 8038516:	69fa      	ldr	r2, [r7, #28]
 8038518:	e841 2300 	strex	r3, r2, [r1]
 803851c:	617b      	str	r3, [r7, #20]
   return(result);
 803851e:	697b      	ldr	r3, [r7, #20]
 8038520:	2b00      	cmp	r3, #0
 8038522:	d1e6      	bne.n	80384f2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8038524:	e021      	b.n	803856a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8038526:	687b      	ldr	r3, [r7, #4]
 8038528:	681b      	ldr	r3, [r3, #0]
 803852a:	69db      	ldr	r3, [r3, #28]
 803852c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8038530:	2b00      	cmp	r3, #0
 8038532:	d013      	beq.n	803855c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8038534:	687b      	ldr	r3, [r7, #4]
 8038536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8038538:	781a      	ldrb	r2, [r3, #0]
 803853a:	687b      	ldr	r3, [r7, #4]
 803853c:	681b      	ldr	r3, [r3, #0]
 803853e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8038540:	687b      	ldr	r3, [r7, #4]
 8038542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8038544:	1c5a      	adds	r2, r3, #1
 8038546:	687b      	ldr	r3, [r7, #4]
 8038548:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 803854a:	687b      	ldr	r3, [r7, #4]
 803854c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8038550:	b29b      	uxth	r3, r3
 8038552:	3b01      	subs	r3, #1
 8038554:	b29a      	uxth	r2, r3
 8038556:	687b      	ldr	r3, [r7, #4]
 8038558:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 803855c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803855e:	3b01      	subs	r3, #1
 8038560:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8038562:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8038564:	2b00      	cmp	r3, #0
 8038566:	d1a4      	bne.n	80384b2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8038568:	e7ff      	b.n	803856a <UART_TxISR_8BIT_FIFOEN+0xd4>
 803856a:	bf00      	nop
 803856c:	3744      	adds	r7, #68	; 0x44
 803856e:	46bd      	mov	sp, r7
 8038570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038574:	4770      	bx	lr

08038576 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8038576:	b480      	push	{r7}
 8038578:	b091      	sub	sp, #68	; 0x44
 803857a:	af00      	add	r7, sp, #0
 803857c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 803857e:	687b      	ldr	r3, [r7, #4]
 8038580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8038584:	2b21      	cmp	r3, #33	; 0x21
 8038586:	d165      	bne.n	8038654 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8038588:	687b      	ldr	r3, [r7, #4]
 803858a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803858e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8038590:	e05c      	b.n	803864c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8038592:	687b      	ldr	r3, [r7, #4]
 8038594:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8038598:	b29b      	uxth	r3, r3
 803859a:	2b00      	cmp	r3, #0
 803859c:	d133      	bne.n	8038606 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 803859e:	687b      	ldr	r3, [r7, #4]
 80385a0:	681b      	ldr	r3, [r3, #0]
 80385a2:	3308      	adds	r3, #8
 80385a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80385a6:	6a3b      	ldr	r3, [r7, #32]
 80385a8:	e853 3f00 	ldrex	r3, [r3]
 80385ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80385ae:	69fb      	ldr	r3, [r7, #28]
 80385b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80385b4:	637b      	str	r3, [r7, #52]	; 0x34
 80385b6:	687b      	ldr	r3, [r7, #4]
 80385b8:	681b      	ldr	r3, [r3, #0]
 80385ba:	3308      	adds	r3, #8
 80385bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80385be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80385c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80385c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80385c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80385c6:	e841 2300 	strex	r3, r2, [r1]
 80385ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80385cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80385ce:	2b00      	cmp	r3, #0
 80385d0:	d1e5      	bne.n	803859e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80385d2:	687b      	ldr	r3, [r7, #4]
 80385d4:	681b      	ldr	r3, [r3, #0]
 80385d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80385d8:	68fb      	ldr	r3, [r7, #12]
 80385da:	e853 3f00 	ldrex	r3, [r3]
 80385de:	60bb      	str	r3, [r7, #8]
   return(result);
 80385e0:	68bb      	ldr	r3, [r7, #8]
 80385e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80385e6:	633b      	str	r3, [r7, #48]	; 0x30
 80385e8:	687b      	ldr	r3, [r7, #4]
 80385ea:	681b      	ldr	r3, [r3, #0]
 80385ec:	461a      	mov	r2, r3
 80385ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80385f0:	61bb      	str	r3, [r7, #24]
 80385f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80385f4:	6979      	ldr	r1, [r7, #20]
 80385f6:	69ba      	ldr	r2, [r7, #24]
 80385f8:	e841 2300 	strex	r3, r2, [r1]
 80385fc:	613b      	str	r3, [r7, #16]
   return(result);
 80385fe:	693b      	ldr	r3, [r7, #16]
 8038600:	2b00      	cmp	r3, #0
 8038602:	d1e6      	bne.n	80385d2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8038604:	e026      	b.n	8038654 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8038606:	687b      	ldr	r3, [r7, #4]
 8038608:	681b      	ldr	r3, [r3, #0]
 803860a:	69db      	ldr	r3, [r3, #28]
 803860c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8038610:	2b00      	cmp	r3, #0
 8038612:	d018      	beq.n	8038646 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8038614:	687b      	ldr	r3, [r7, #4]
 8038616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8038618:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 803861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803861c:	881b      	ldrh	r3, [r3, #0]
 803861e:	461a      	mov	r2, r3
 8038620:	687b      	ldr	r3, [r7, #4]
 8038622:	681b      	ldr	r3, [r3, #0]
 8038624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8038628:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 803862a:	687b      	ldr	r3, [r7, #4]
 803862c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803862e:	1c9a      	adds	r2, r3, #2
 8038630:	687b      	ldr	r3, [r7, #4]
 8038632:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8038634:	687b      	ldr	r3, [r7, #4]
 8038636:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803863a:	b29b      	uxth	r3, r3
 803863c:	3b01      	subs	r3, #1
 803863e:	b29a      	uxth	r2, r3
 8038640:	687b      	ldr	r3, [r7, #4]
 8038642:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8038646:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8038648:	3b01      	subs	r3, #1
 803864a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 803864c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803864e:	2b00      	cmp	r3, #0
 8038650:	d19f      	bne.n	8038592 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8038652:	e7ff      	b.n	8038654 <UART_TxISR_16BIT_FIFOEN+0xde>
 8038654:	bf00      	nop
 8038656:	3744      	adds	r7, #68	; 0x44
 8038658:	46bd      	mov	sp, r7
 803865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803865e:	4770      	bx	lr

08038660 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8038660:	b580      	push	{r7, lr}
 8038662:	b088      	sub	sp, #32
 8038664:	af00      	add	r7, sp, #0
 8038666:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8038668:	687b      	ldr	r3, [r7, #4]
 803866a:	681b      	ldr	r3, [r3, #0]
 803866c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803866e:	68fb      	ldr	r3, [r7, #12]
 8038670:	e853 3f00 	ldrex	r3, [r3]
 8038674:	60bb      	str	r3, [r7, #8]
   return(result);
 8038676:	68bb      	ldr	r3, [r7, #8]
 8038678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803867c:	61fb      	str	r3, [r7, #28]
 803867e:	687b      	ldr	r3, [r7, #4]
 8038680:	681b      	ldr	r3, [r3, #0]
 8038682:	461a      	mov	r2, r3
 8038684:	69fb      	ldr	r3, [r7, #28]
 8038686:	61bb      	str	r3, [r7, #24]
 8038688:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803868a:	6979      	ldr	r1, [r7, #20]
 803868c:	69ba      	ldr	r2, [r7, #24]
 803868e:	e841 2300 	strex	r3, r2, [r1]
 8038692:	613b      	str	r3, [r7, #16]
   return(result);
 8038694:	693b      	ldr	r3, [r7, #16]
 8038696:	2b00      	cmp	r3, #0
 8038698:	d1e6      	bne.n	8038668 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 803869a:	687b      	ldr	r3, [r7, #4]
 803869c:	2220      	movs	r2, #32
 803869e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80386a2:	687b      	ldr	r3, [r7, #4]
 80386a4:	2200      	movs	r2, #0
 80386a6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80386a8:	6878      	ldr	r0, [r7, #4]
 80386aa:	f7f2 fd81 	bl	802b1b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80386ae:	bf00      	nop
 80386b0:	3720      	adds	r7, #32
 80386b2:	46bd      	mov	sp, r7
 80386b4:	bd80      	pop	{r7, pc}

080386b6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80386b6:	b580      	push	{r7, lr}
 80386b8:	b096      	sub	sp, #88	; 0x58
 80386ba:	af00      	add	r7, sp, #0
 80386bc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80386be:	687b      	ldr	r3, [r7, #4]
 80386c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80386c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80386c8:	687b      	ldr	r3, [r7, #4]
 80386ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80386ce:	2b22      	cmp	r3, #34	; 0x22
 80386d0:	f040 8095 	bne.w	80387fe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80386d4:	687b      	ldr	r3, [r7, #4]
 80386d6:	681b      	ldr	r3, [r3, #0]
 80386d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80386da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80386de:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80386e2:	b2d9      	uxtb	r1, r3
 80386e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80386e8:	b2da      	uxtb	r2, r3
 80386ea:	687b      	ldr	r3, [r7, #4]
 80386ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80386ee:	400a      	ands	r2, r1
 80386f0:	b2d2      	uxtb	r2, r2
 80386f2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80386f4:	687b      	ldr	r3, [r7, #4]
 80386f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80386f8:	1c5a      	adds	r2, r3, #1
 80386fa:	687b      	ldr	r3, [r7, #4]
 80386fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80386fe:	687b      	ldr	r3, [r7, #4]
 8038700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038704:	b29b      	uxth	r3, r3
 8038706:	3b01      	subs	r3, #1
 8038708:	b29a      	uxth	r2, r3
 803870a:	687b      	ldr	r3, [r7, #4]
 803870c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8038710:	687b      	ldr	r3, [r7, #4]
 8038712:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038716:	b29b      	uxth	r3, r3
 8038718:	2b00      	cmp	r3, #0
 803871a:	d178      	bne.n	803880e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 803871c:	687b      	ldr	r3, [r7, #4]
 803871e:	681b      	ldr	r3, [r3, #0]
 8038720:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038724:	e853 3f00 	ldrex	r3, [r3]
 8038728:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803872a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803872c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8038730:	653b      	str	r3, [r7, #80]	; 0x50
 8038732:	687b      	ldr	r3, [r7, #4]
 8038734:	681b      	ldr	r3, [r3, #0]
 8038736:	461a      	mov	r2, r3
 8038738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803873a:	647b      	str	r3, [r7, #68]	; 0x44
 803873c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803873e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8038740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8038742:	e841 2300 	strex	r3, r2, [r1]
 8038746:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8038748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803874a:	2b00      	cmp	r3, #0
 803874c:	d1e6      	bne.n	803871c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803874e:	687b      	ldr	r3, [r7, #4]
 8038750:	681b      	ldr	r3, [r3, #0]
 8038752:	3308      	adds	r3, #8
 8038754:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038758:	e853 3f00 	ldrex	r3, [r3]
 803875c:	623b      	str	r3, [r7, #32]
   return(result);
 803875e:	6a3b      	ldr	r3, [r7, #32]
 8038760:	f023 0301 	bic.w	r3, r3, #1
 8038764:	64fb      	str	r3, [r7, #76]	; 0x4c
 8038766:	687b      	ldr	r3, [r7, #4]
 8038768:	681b      	ldr	r3, [r3, #0]
 803876a:	3308      	adds	r3, #8
 803876c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 803876e:	633a      	str	r2, [r7, #48]	; 0x30
 8038770:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8038774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8038776:	e841 2300 	strex	r3, r2, [r1]
 803877a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803877e:	2b00      	cmp	r3, #0
 8038780:	d1e5      	bne.n	803874e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8038782:	687b      	ldr	r3, [r7, #4]
 8038784:	2220      	movs	r2, #32
 8038786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 803878a:	687b      	ldr	r3, [r7, #4]
 803878c:	2200      	movs	r2, #0
 803878e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8038790:	687b      	ldr	r3, [r7, #4]
 8038792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8038794:	2b01      	cmp	r3, #1
 8038796:	d12e      	bne.n	80387f6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8038798:	687b      	ldr	r3, [r7, #4]
 803879a:	2200      	movs	r2, #0
 803879c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803879e:	687b      	ldr	r3, [r7, #4]
 80387a0:	681b      	ldr	r3, [r3, #0]
 80387a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80387a4:	693b      	ldr	r3, [r7, #16]
 80387a6:	e853 3f00 	ldrex	r3, [r3]
 80387aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80387ac:	68fb      	ldr	r3, [r7, #12]
 80387ae:	f023 0310 	bic.w	r3, r3, #16
 80387b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80387b4:	687b      	ldr	r3, [r7, #4]
 80387b6:	681b      	ldr	r3, [r3, #0]
 80387b8:	461a      	mov	r2, r3
 80387ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80387bc:	61fb      	str	r3, [r7, #28]
 80387be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80387c0:	69b9      	ldr	r1, [r7, #24]
 80387c2:	69fa      	ldr	r2, [r7, #28]
 80387c4:	e841 2300 	strex	r3, r2, [r1]
 80387c8:	617b      	str	r3, [r7, #20]
   return(result);
 80387ca:	697b      	ldr	r3, [r7, #20]
 80387cc:	2b00      	cmp	r3, #0
 80387ce:	d1e6      	bne.n	803879e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80387d0:	687b      	ldr	r3, [r7, #4]
 80387d2:	681b      	ldr	r3, [r3, #0]
 80387d4:	69db      	ldr	r3, [r3, #28]
 80387d6:	f003 0310 	and.w	r3, r3, #16
 80387da:	2b10      	cmp	r3, #16
 80387dc:	d103      	bne.n	80387e6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80387de:	687b      	ldr	r3, [r7, #4]
 80387e0:	681b      	ldr	r3, [r3, #0]
 80387e2:	2210      	movs	r2, #16
 80387e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80387e6:	687b      	ldr	r3, [r7, #4]
 80387e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80387ec:	4619      	mov	r1, r3
 80387ee:	6878      	ldr	r0, [r7, #4]
 80387f0:	f7fe fcc4 	bl	803717c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80387f4:	e00b      	b.n	803880e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80387f6:	6878      	ldr	r0, [r7, #4]
 80387f8:	f7f2 fcb6 	bl	802b168 <HAL_UART_RxCpltCallback>
}
 80387fc:	e007      	b.n	803880e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80387fe:	687b      	ldr	r3, [r7, #4]
 8038800:	681b      	ldr	r3, [r3, #0]
 8038802:	699a      	ldr	r2, [r3, #24]
 8038804:	687b      	ldr	r3, [r7, #4]
 8038806:	681b      	ldr	r3, [r3, #0]
 8038808:	f042 0208 	orr.w	r2, r2, #8
 803880c:	619a      	str	r2, [r3, #24]
}
 803880e:	bf00      	nop
 8038810:	3758      	adds	r7, #88	; 0x58
 8038812:	46bd      	mov	sp, r7
 8038814:	bd80      	pop	{r7, pc}

08038816 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8038816:	b580      	push	{r7, lr}
 8038818:	b096      	sub	sp, #88	; 0x58
 803881a:	af00      	add	r7, sp, #0
 803881c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 803881e:	687b      	ldr	r3, [r7, #4]
 8038820:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8038824:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8038828:	687b      	ldr	r3, [r7, #4]
 803882a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803882e:	2b22      	cmp	r3, #34	; 0x22
 8038830:	f040 8095 	bne.w	803895e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8038834:	687b      	ldr	r3, [r7, #4]
 8038836:	681b      	ldr	r3, [r3, #0]
 8038838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803883a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 803883e:	687b      	ldr	r3, [r7, #4]
 8038840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8038842:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8038844:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8038848:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 803884c:	4013      	ands	r3, r2
 803884e:	b29a      	uxth	r2, r3
 8038850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8038852:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8038854:	687b      	ldr	r3, [r7, #4]
 8038856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8038858:	1c9a      	adds	r2, r3, #2
 803885a:	687b      	ldr	r3, [r7, #4]
 803885c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 803885e:	687b      	ldr	r3, [r7, #4]
 8038860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038864:	b29b      	uxth	r3, r3
 8038866:	3b01      	subs	r3, #1
 8038868:	b29a      	uxth	r2, r3
 803886a:	687b      	ldr	r3, [r7, #4]
 803886c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8038870:	687b      	ldr	r3, [r7, #4]
 8038872:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038876:	b29b      	uxth	r3, r3
 8038878:	2b00      	cmp	r3, #0
 803887a:	d178      	bne.n	803896e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 803887c:	687b      	ldr	r3, [r7, #4]
 803887e:	681b      	ldr	r3, [r3, #0]
 8038880:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038884:	e853 3f00 	ldrex	r3, [r3]
 8038888:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803888c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8038890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8038892:	687b      	ldr	r3, [r7, #4]
 8038894:	681b      	ldr	r3, [r3, #0]
 8038896:	461a      	mov	r2, r3
 8038898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803889a:	643b      	str	r3, [r7, #64]	; 0x40
 803889c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803889e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80388a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80388a2:	e841 2300 	strex	r3, r2, [r1]
 80388a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80388a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80388aa:	2b00      	cmp	r3, #0
 80388ac:	d1e6      	bne.n	803887c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80388ae:	687b      	ldr	r3, [r7, #4]
 80388b0:	681b      	ldr	r3, [r3, #0]
 80388b2:	3308      	adds	r3, #8
 80388b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80388b6:	6a3b      	ldr	r3, [r7, #32]
 80388b8:	e853 3f00 	ldrex	r3, [r3]
 80388bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80388be:	69fb      	ldr	r3, [r7, #28]
 80388c0:	f023 0301 	bic.w	r3, r3, #1
 80388c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80388c6:	687b      	ldr	r3, [r7, #4]
 80388c8:	681b      	ldr	r3, [r3, #0]
 80388ca:	3308      	adds	r3, #8
 80388cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80388ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80388d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80388d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80388d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80388d6:	e841 2300 	strex	r3, r2, [r1]
 80388da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80388dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80388de:	2b00      	cmp	r3, #0
 80388e0:	d1e5      	bne.n	80388ae <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80388e2:	687b      	ldr	r3, [r7, #4]
 80388e4:	2220      	movs	r2, #32
 80388e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80388ea:	687b      	ldr	r3, [r7, #4]
 80388ec:	2200      	movs	r2, #0
 80388ee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80388f0:	687b      	ldr	r3, [r7, #4]
 80388f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80388f4:	2b01      	cmp	r3, #1
 80388f6:	d12e      	bne.n	8038956 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80388f8:	687b      	ldr	r3, [r7, #4]
 80388fa:	2200      	movs	r2, #0
 80388fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80388fe:	687b      	ldr	r3, [r7, #4]
 8038900:	681b      	ldr	r3, [r3, #0]
 8038902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038904:	68fb      	ldr	r3, [r7, #12]
 8038906:	e853 3f00 	ldrex	r3, [r3]
 803890a:	60bb      	str	r3, [r7, #8]
   return(result);
 803890c:	68bb      	ldr	r3, [r7, #8]
 803890e:	f023 0310 	bic.w	r3, r3, #16
 8038912:	647b      	str	r3, [r7, #68]	; 0x44
 8038914:	687b      	ldr	r3, [r7, #4]
 8038916:	681b      	ldr	r3, [r3, #0]
 8038918:	461a      	mov	r2, r3
 803891a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803891c:	61bb      	str	r3, [r7, #24]
 803891e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038920:	6979      	ldr	r1, [r7, #20]
 8038922:	69ba      	ldr	r2, [r7, #24]
 8038924:	e841 2300 	strex	r3, r2, [r1]
 8038928:	613b      	str	r3, [r7, #16]
   return(result);
 803892a:	693b      	ldr	r3, [r7, #16]
 803892c:	2b00      	cmp	r3, #0
 803892e:	d1e6      	bne.n	80388fe <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8038930:	687b      	ldr	r3, [r7, #4]
 8038932:	681b      	ldr	r3, [r3, #0]
 8038934:	69db      	ldr	r3, [r3, #28]
 8038936:	f003 0310 	and.w	r3, r3, #16
 803893a:	2b10      	cmp	r3, #16
 803893c:	d103      	bne.n	8038946 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803893e:	687b      	ldr	r3, [r7, #4]
 8038940:	681b      	ldr	r3, [r3, #0]
 8038942:	2210      	movs	r2, #16
 8038944:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8038946:	687b      	ldr	r3, [r7, #4]
 8038948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803894c:	4619      	mov	r1, r3
 803894e:	6878      	ldr	r0, [r7, #4]
 8038950:	f7fe fc14 	bl	803717c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8038954:	e00b      	b.n	803896e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8038956:	6878      	ldr	r0, [r7, #4]
 8038958:	f7f2 fc06 	bl	802b168 <HAL_UART_RxCpltCallback>
}
 803895c:	e007      	b.n	803896e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803895e:	687b      	ldr	r3, [r7, #4]
 8038960:	681b      	ldr	r3, [r3, #0]
 8038962:	699a      	ldr	r2, [r3, #24]
 8038964:	687b      	ldr	r3, [r7, #4]
 8038966:	681b      	ldr	r3, [r3, #0]
 8038968:	f042 0208 	orr.w	r2, r2, #8
 803896c:	619a      	str	r2, [r3, #24]
}
 803896e:	bf00      	nop
 8038970:	3758      	adds	r7, #88	; 0x58
 8038972:	46bd      	mov	sp, r7
 8038974:	bd80      	pop	{r7, pc}
	...

08038978 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8038978:	b580      	push	{r7, lr}
 803897a:	b0a6      	sub	sp, #152	; 0x98
 803897c:	af00      	add	r7, sp, #0
 803897e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8038980:	687b      	ldr	r3, [r7, #4]
 8038982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8038986:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 803898a:	687b      	ldr	r3, [r7, #4]
 803898c:	681b      	ldr	r3, [r3, #0]
 803898e:	69db      	ldr	r3, [r3, #28]
 8038990:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8038994:	687b      	ldr	r3, [r7, #4]
 8038996:	681b      	ldr	r3, [r3, #0]
 8038998:	681b      	ldr	r3, [r3, #0]
 803899a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 803899e:	687b      	ldr	r3, [r7, #4]
 80389a0:	681b      	ldr	r3, [r3, #0]
 80389a2:	689b      	ldr	r3, [r3, #8]
 80389a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80389a8:	687b      	ldr	r3, [r7, #4]
 80389aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80389ae:	2b22      	cmp	r3, #34	; 0x22
 80389b0:	f040 814d 	bne.w	8038c4e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80389b4:	687b      	ldr	r3, [r7, #4]
 80389b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80389ba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80389be:	e0f4      	b.n	8038baa <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80389c0:	687b      	ldr	r3, [r7, #4]
 80389c2:	681b      	ldr	r3, [r3, #0]
 80389c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80389c6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80389ca:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80389ce:	b2d9      	uxtb	r1, r3
 80389d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80389d4:	b2da      	uxtb	r2, r3
 80389d6:	687b      	ldr	r3, [r7, #4]
 80389d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80389da:	400a      	ands	r2, r1
 80389dc:	b2d2      	uxtb	r2, r2
 80389de:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80389e0:	687b      	ldr	r3, [r7, #4]
 80389e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80389e4:	1c5a      	adds	r2, r3, #1
 80389e6:	687b      	ldr	r3, [r7, #4]
 80389e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80389ea:	687b      	ldr	r3, [r7, #4]
 80389ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80389f0:	b29b      	uxth	r3, r3
 80389f2:	3b01      	subs	r3, #1
 80389f4:	b29a      	uxth	r2, r3
 80389f6:	687b      	ldr	r3, [r7, #4]
 80389f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80389fc:	687b      	ldr	r3, [r7, #4]
 80389fe:	681b      	ldr	r3, [r3, #0]
 8038a00:	69db      	ldr	r3, [r3, #28]
 8038a02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8038a06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8038a0a:	f003 0307 	and.w	r3, r3, #7
 8038a0e:	2b00      	cmp	r3, #0
 8038a10:	d053      	beq.n	8038aba <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8038a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8038a16:	f003 0301 	and.w	r3, r3, #1
 8038a1a:	2b00      	cmp	r3, #0
 8038a1c:	d011      	beq.n	8038a42 <UART_RxISR_8BIT_FIFOEN+0xca>
 8038a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8038a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038a26:	2b00      	cmp	r3, #0
 8038a28:	d00b      	beq.n	8038a42 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8038a2a:	687b      	ldr	r3, [r7, #4]
 8038a2c:	681b      	ldr	r3, [r3, #0]
 8038a2e:	2201      	movs	r2, #1
 8038a30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8038a32:	687b      	ldr	r3, [r7, #4]
 8038a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038a38:	f043 0201 	orr.w	r2, r3, #1
 8038a3c:	687b      	ldr	r3, [r7, #4]
 8038a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8038a42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8038a46:	f003 0302 	and.w	r3, r3, #2
 8038a4a:	2b00      	cmp	r3, #0
 8038a4c:	d011      	beq.n	8038a72 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8038a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8038a52:	f003 0301 	and.w	r3, r3, #1
 8038a56:	2b00      	cmp	r3, #0
 8038a58:	d00b      	beq.n	8038a72 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8038a5a:	687b      	ldr	r3, [r7, #4]
 8038a5c:	681b      	ldr	r3, [r3, #0]
 8038a5e:	2202      	movs	r2, #2
 8038a60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8038a62:	687b      	ldr	r3, [r7, #4]
 8038a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038a68:	f043 0204 	orr.w	r2, r3, #4
 8038a6c:	687b      	ldr	r3, [r7, #4]
 8038a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8038a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8038a76:	f003 0304 	and.w	r3, r3, #4
 8038a7a:	2b00      	cmp	r3, #0
 8038a7c:	d011      	beq.n	8038aa2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8038a7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8038a82:	f003 0301 	and.w	r3, r3, #1
 8038a86:	2b00      	cmp	r3, #0
 8038a88:	d00b      	beq.n	8038aa2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8038a8a:	687b      	ldr	r3, [r7, #4]
 8038a8c:	681b      	ldr	r3, [r3, #0]
 8038a8e:	2204      	movs	r2, #4
 8038a90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8038a92:	687b      	ldr	r3, [r7, #4]
 8038a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038a98:	f043 0202 	orr.w	r2, r3, #2
 8038a9c:	687b      	ldr	r3, [r7, #4]
 8038a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8038aa2:	687b      	ldr	r3, [r7, #4]
 8038aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038aa8:	2b00      	cmp	r3, #0
 8038aaa:	d006      	beq.n	8038aba <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8038aac:	6878      	ldr	r0, [r7, #4]
 8038aae:	f7fe fb5b 	bl	8037168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8038ab2:	687b      	ldr	r3, [r7, #4]
 8038ab4:	2200      	movs	r2, #0
 8038ab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8038aba:	687b      	ldr	r3, [r7, #4]
 8038abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038ac0:	b29b      	uxth	r3, r3
 8038ac2:	2b00      	cmp	r3, #0
 8038ac4:	d171      	bne.n	8038baa <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8038ac6:	687b      	ldr	r3, [r7, #4]
 8038ac8:	681b      	ldr	r3, [r3, #0]
 8038aca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8038ace:	e853 3f00 	ldrex	r3, [r3]
 8038ad2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8038ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8038ad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8038ada:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8038ade:	687b      	ldr	r3, [r7, #4]
 8038ae0:	681b      	ldr	r3, [r3, #0]
 8038ae2:	461a      	mov	r2, r3
 8038ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8038ae8:	66bb      	str	r3, [r7, #104]	; 0x68
 8038aea:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038aec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8038aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8038af0:	e841 2300 	strex	r3, r2, [r1]
 8038af4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8038af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8038af8:	2b00      	cmp	r3, #0
 8038afa:	d1e4      	bne.n	8038ac6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8038afc:	687b      	ldr	r3, [r7, #4]
 8038afe:	681b      	ldr	r3, [r3, #0]
 8038b00:	3308      	adds	r3, #8
 8038b02:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8038b06:	e853 3f00 	ldrex	r3, [r3]
 8038b0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8038b0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8038b0e:	4b56      	ldr	r3, [pc, #344]	; (8038c68 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8038b10:	4013      	ands	r3, r2
 8038b12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8038b14:	687b      	ldr	r3, [r7, #4]
 8038b16:	681b      	ldr	r3, [r3, #0]
 8038b18:	3308      	adds	r3, #8
 8038b1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8038b1c:	657a      	str	r2, [r7, #84]	; 0x54
 8038b1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038b20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8038b22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8038b24:	e841 2300 	strex	r3, r2, [r1]
 8038b28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8038b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8038b2c:	2b00      	cmp	r3, #0
 8038b2e:	d1e5      	bne.n	8038afc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8038b30:	687b      	ldr	r3, [r7, #4]
 8038b32:	2220      	movs	r2, #32
 8038b34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8038b38:	687b      	ldr	r3, [r7, #4]
 8038b3a:	2200      	movs	r2, #0
 8038b3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8038b3e:	687b      	ldr	r3, [r7, #4]
 8038b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8038b42:	2b01      	cmp	r3, #1
 8038b44:	d12e      	bne.n	8038ba4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8038b46:	687b      	ldr	r3, [r7, #4]
 8038b48:	2200      	movs	r2, #0
 8038b4a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8038b4c:	687b      	ldr	r3, [r7, #4]
 8038b4e:	681b      	ldr	r3, [r3, #0]
 8038b50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038b54:	e853 3f00 	ldrex	r3, [r3]
 8038b58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8038b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8038b5c:	f023 0310 	bic.w	r3, r3, #16
 8038b60:	67bb      	str	r3, [r7, #120]	; 0x78
 8038b62:	687b      	ldr	r3, [r7, #4]
 8038b64:	681b      	ldr	r3, [r3, #0]
 8038b66:	461a      	mov	r2, r3
 8038b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8038b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8038b6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038b6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8038b70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8038b72:	e841 2300 	strex	r3, r2, [r1]
 8038b76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8038b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038b7a:	2b00      	cmp	r3, #0
 8038b7c:	d1e6      	bne.n	8038b4c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8038b7e:	687b      	ldr	r3, [r7, #4]
 8038b80:	681b      	ldr	r3, [r3, #0]
 8038b82:	69db      	ldr	r3, [r3, #28]
 8038b84:	f003 0310 	and.w	r3, r3, #16
 8038b88:	2b10      	cmp	r3, #16
 8038b8a:	d103      	bne.n	8038b94 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8038b8c:	687b      	ldr	r3, [r7, #4]
 8038b8e:	681b      	ldr	r3, [r3, #0]
 8038b90:	2210      	movs	r2, #16
 8038b92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8038b94:	687b      	ldr	r3, [r7, #4]
 8038b96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8038b9a:	4619      	mov	r1, r3
 8038b9c:	6878      	ldr	r0, [r7, #4]
 8038b9e:	f7fe faed 	bl	803717c <HAL_UARTEx_RxEventCallback>
 8038ba2:	e002      	b.n	8038baa <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8038ba4:	6878      	ldr	r0, [r7, #4]
 8038ba6:	f7f2 fadf 	bl	802b168 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8038baa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8038bae:	2b00      	cmp	r3, #0
 8038bb0:	d006      	beq.n	8038bc0 <UART_RxISR_8BIT_FIFOEN+0x248>
 8038bb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8038bb6:	f003 0320 	and.w	r3, r3, #32
 8038bba:	2b00      	cmp	r3, #0
 8038bbc:	f47f af00 	bne.w	80389c0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8038bc0:	687b      	ldr	r3, [r7, #4]
 8038bc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038bc6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8038bca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8038bce:	2b00      	cmp	r3, #0
 8038bd0:	d045      	beq.n	8038c5e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8038bd2:	687b      	ldr	r3, [r7, #4]
 8038bd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8038bd8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8038bdc:	429a      	cmp	r2, r3
 8038bde:	d23e      	bcs.n	8038c5e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8038be0:	687b      	ldr	r3, [r7, #4]
 8038be2:	681b      	ldr	r3, [r3, #0]
 8038be4:	3308      	adds	r3, #8
 8038be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038be8:	6a3b      	ldr	r3, [r7, #32]
 8038bea:	e853 3f00 	ldrex	r3, [r3]
 8038bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8038bf0:	69fb      	ldr	r3, [r7, #28]
 8038bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8038bf6:	673b      	str	r3, [r7, #112]	; 0x70
 8038bf8:	687b      	ldr	r3, [r7, #4]
 8038bfa:	681b      	ldr	r3, [r3, #0]
 8038bfc:	3308      	adds	r3, #8
 8038bfe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8038c00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8038c02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8038c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8038c08:	e841 2300 	strex	r3, r2, [r1]
 8038c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8038c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038c10:	2b00      	cmp	r3, #0
 8038c12:	d1e5      	bne.n	8038be0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8038c14:	687b      	ldr	r3, [r7, #4]
 8038c16:	4a15      	ldr	r2, [pc, #84]	; (8038c6c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8038c18:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8038c1a:	687b      	ldr	r3, [r7, #4]
 8038c1c:	681b      	ldr	r3, [r3, #0]
 8038c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038c20:	68fb      	ldr	r3, [r7, #12]
 8038c22:	e853 3f00 	ldrex	r3, [r3]
 8038c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8038c28:	68bb      	ldr	r3, [r7, #8]
 8038c2a:	f043 0320 	orr.w	r3, r3, #32
 8038c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8038c30:	687b      	ldr	r3, [r7, #4]
 8038c32:	681b      	ldr	r3, [r3, #0]
 8038c34:	461a      	mov	r2, r3
 8038c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8038c38:	61bb      	str	r3, [r7, #24]
 8038c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038c3c:	6979      	ldr	r1, [r7, #20]
 8038c3e:	69ba      	ldr	r2, [r7, #24]
 8038c40:	e841 2300 	strex	r3, r2, [r1]
 8038c44:	613b      	str	r3, [r7, #16]
   return(result);
 8038c46:	693b      	ldr	r3, [r7, #16]
 8038c48:	2b00      	cmp	r3, #0
 8038c4a:	d1e6      	bne.n	8038c1a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8038c4c:	e007      	b.n	8038c5e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8038c4e:	687b      	ldr	r3, [r7, #4]
 8038c50:	681b      	ldr	r3, [r3, #0]
 8038c52:	699a      	ldr	r2, [r3, #24]
 8038c54:	687b      	ldr	r3, [r7, #4]
 8038c56:	681b      	ldr	r3, [r3, #0]
 8038c58:	f042 0208 	orr.w	r2, r2, #8
 8038c5c:	619a      	str	r2, [r3, #24]
}
 8038c5e:	bf00      	nop
 8038c60:	3798      	adds	r7, #152	; 0x98
 8038c62:	46bd      	mov	sp, r7
 8038c64:	bd80      	pop	{r7, pc}
 8038c66:	bf00      	nop
 8038c68:	effffffe 	.word	0xeffffffe
 8038c6c:	080386b7 	.word	0x080386b7

08038c70 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8038c70:	b580      	push	{r7, lr}
 8038c72:	b0a8      	sub	sp, #160	; 0xa0
 8038c74:	af00      	add	r7, sp, #0
 8038c76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8038c78:	687b      	ldr	r3, [r7, #4]
 8038c7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8038c7e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8038c82:	687b      	ldr	r3, [r7, #4]
 8038c84:	681b      	ldr	r3, [r3, #0]
 8038c86:	69db      	ldr	r3, [r3, #28]
 8038c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8038c8c:	687b      	ldr	r3, [r7, #4]
 8038c8e:	681b      	ldr	r3, [r3, #0]
 8038c90:	681b      	ldr	r3, [r3, #0]
 8038c92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8038c96:	687b      	ldr	r3, [r7, #4]
 8038c98:	681b      	ldr	r3, [r3, #0]
 8038c9a:	689b      	ldr	r3, [r3, #8]
 8038c9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8038ca0:	687b      	ldr	r3, [r7, #4]
 8038ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8038ca6:	2b22      	cmp	r3, #34	; 0x22
 8038ca8:	f040 8151 	bne.w	8038f4e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8038cac:	687b      	ldr	r3, [r7, #4]
 8038cae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8038cb2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8038cb6:	e0f8      	b.n	8038eaa <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8038cb8:	687b      	ldr	r3, [r7, #4]
 8038cba:	681b      	ldr	r3, [r3, #0]
 8038cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8038cbe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8038cc2:	687b      	ldr	r3, [r7, #4]
 8038cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8038cc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8038cca:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8038cce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8038cd2:	4013      	ands	r3, r2
 8038cd4:	b29a      	uxth	r2, r3
 8038cd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8038cda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8038cdc:	687b      	ldr	r3, [r7, #4]
 8038cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8038ce0:	1c9a      	adds	r2, r3, #2
 8038ce2:	687b      	ldr	r3, [r7, #4]
 8038ce4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8038ce6:	687b      	ldr	r3, [r7, #4]
 8038ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038cec:	b29b      	uxth	r3, r3
 8038cee:	3b01      	subs	r3, #1
 8038cf0:	b29a      	uxth	r2, r3
 8038cf2:	687b      	ldr	r3, [r7, #4]
 8038cf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8038cf8:	687b      	ldr	r3, [r7, #4]
 8038cfa:	681b      	ldr	r3, [r3, #0]
 8038cfc:	69db      	ldr	r3, [r3, #28]
 8038cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8038d02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8038d06:	f003 0307 	and.w	r3, r3, #7
 8038d0a:	2b00      	cmp	r3, #0
 8038d0c:	d053      	beq.n	8038db6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8038d0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8038d12:	f003 0301 	and.w	r3, r3, #1
 8038d16:	2b00      	cmp	r3, #0
 8038d18:	d011      	beq.n	8038d3e <UART_RxISR_16BIT_FIFOEN+0xce>
 8038d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8038d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038d22:	2b00      	cmp	r3, #0
 8038d24:	d00b      	beq.n	8038d3e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8038d26:	687b      	ldr	r3, [r7, #4]
 8038d28:	681b      	ldr	r3, [r3, #0]
 8038d2a:	2201      	movs	r2, #1
 8038d2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8038d2e:	687b      	ldr	r3, [r7, #4]
 8038d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038d34:	f043 0201 	orr.w	r2, r3, #1
 8038d38:	687b      	ldr	r3, [r7, #4]
 8038d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8038d3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8038d42:	f003 0302 	and.w	r3, r3, #2
 8038d46:	2b00      	cmp	r3, #0
 8038d48:	d011      	beq.n	8038d6e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8038d4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8038d4e:	f003 0301 	and.w	r3, r3, #1
 8038d52:	2b00      	cmp	r3, #0
 8038d54:	d00b      	beq.n	8038d6e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8038d56:	687b      	ldr	r3, [r7, #4]
 8038d58:	681b      	ldr	r3, [r3, #0]
 8038d5a:	2202      	movs	r2, #2
 8038d5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8038d5e:	687b      	ldr	r3, [r7, #4]
 8038d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038d64:	f043 0204 	orr.w	r2, r3, #4
 8038d68:	687b      	ldr	r3, [r7, #4]
 8038d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8038d6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8038d72:	f003 0304 	and.w	r3, r3, #4
 8038d76:	2b00      	cmp	r3, #0
 8038d78:	d011      	beq.n	8038d9e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8038d7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8038d7e:	f003 0301 	and.w	r3, r3, #1
 8038d82:	2b00      	cmp	r3, #0
 8038d84:	d00b      	beq.n	8038d9e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8038d86:	687b      	ldr	r3, [r7, #4]
 8038d88:	681b      	ldr	r3, [r3, #0]
 8038d8a:	2204      	movs	r2, #4
 8038d8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8038d8e:	687b      	ldr	r3, [r7, #4]
 8038d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038d94:	f043 0202 	orr.w	r2, r3, #2
 8038d98:	687b      	ldr	r3, [r7, #4]
 8038d9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8038d9e:	687b      	ldr	r3, [r7, #4]
 8038da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038da4:	2b00      	cmp	r3, #0
 8038da6:	d006      	beq.n	8038db6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8038da8:	6878      	ldr	r0, [r7, #4]
 8038daa:	f7fe f9dd 	bl	8037168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8038dae:	687b      	ldr	r3, [r7, #4]
 8038db0:	2200      	movs	r2, #0
 8038db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8038db6:	687b      	ldr	r3, [r7, #4]
 8038db8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038dbc:	b29b      	uxth	r3, r3
 8038dbe:	2b00      	cmp	r3, #0
 8038dc0:	d173      	bne.n	8038eaa <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8038dc2:	687b      	ldr	r3, [r7, #4]
 8038dc4:	681b      	ldr	r3, [r3, #0]
 8038dc6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8038dca:	e853 3f00 	ldrex	r3, [r3]
 8038dce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8038dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8038dd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8038dd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8038dda:	687b      	ldr	r3, [r7, #4]
 8038ddc:	681b      	ldr	r3, [r3, #0]
 8038dde:	461a      	mov	r2, r3
 8038de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8038de4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8038de6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038de8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8038dea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8038dec:	e841 2300 	strex	r3, r2, [r1]
 8038df0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8038df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8038df4:	2b00      	cmp	r3, #0
 8038df6:	d1e4      	bne.n	8038dc2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8038df8:	687b      	ldr	r3, [r7, #4]
 8038dfa:	681b      	ldr	r3, [r3, #0]
 8038dfc:	3308      	adds	r3, #8
 8038dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8038e02:	e853 3f00 	ldrex	r3, [r3]
 8038e06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8038e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8038e0a:	4b57      	ldr	r3, [pc, #348]	; (8038f68 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8038e0c:	4013      	ands	r3, r2
 8038e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8038e12:	687b      	ldr	r3, [r7, #4]
 8038e14:	681b      	ldr	r3, [r3, #0]
 8038e16:	3308      	adds	r3, #8
 8038e18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8038e1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8038e1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038e20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8038e22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8038e24:	e841 2300 	strex	r3, r2, [r1]
 8038e28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8038e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8038e2c:	2b00      	cmp	r3, #0
 8038e2e:	d1e3      	bne.n	8038df8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8038e30:	687b      	ldr	r3, [r7, #4]
 8038e32:	2220      	movs	r2, #32
 8038e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8038e38:	687b      	ldr	r3, [r7, #4]
 8038e3a:	2200      	movs	r2, #0
 8038e3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8038e3e:	687b      	ldr	r3, [r7, #4]
 8038e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8038e42:	2b01      	cmp	r3, #1
 8038e44:	d12e      	bne.n	8038ea4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8038e46:	687b      	ldr	r3, [r7, #4]
 8038e48:	2200      	movs	r2, #0
 8038e4a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8038e4c:	687b      	ldr	r3, [r7, #4]
 8038e4e:	681b      	ldr	r3, [r3, #0]
 8038e50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038e54:	e853 3f00 	ldrex	r3, [r3]
 8038e58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8038e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038e5c:	f023 0310 	bic.w	r3, r3, #16
 8038e60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8038e62:	687b      	ldr	r3, [r7, #4]
 8038e64:	681b      	ldr	r3, [r3, #0]
 8038e66:	461a      	mov	r2, r3
 8038e68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8038e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8038e6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038e6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8038e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8038e72:	e841 2300 	strex	r3, r2, [r1]
 8038e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8038e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8038e7a:	2b00      	cmp	r3, #0
 8038e7c:	d1e6      	bne.n	8038e4c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8038e7e:	687b      	ldr	r3, [r7, #4]
 8038e80:	681b      	ldr	r3, [r3, #0]
 8038e82:	69db      	ldr	r3, [r3, #28]
 8038e84:	f003 0310 	and.w	r3, r3, #16
 8038e88:	2b10      	cmp	r3, #16
 8038e8a:	d103      	bne.n	8038e94 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8038e8c:	687b      	ldr	r3, [r7, #4]
 8038e8e:	681b      	ldr	r3, [r3, #0]
 8038e90:	2210      	movs	r2, #16
 8038e92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8038e94:	687b      	ldr	r3, [r7, #4]
 8038e96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8038e9a:	4619      	mov	r1, r3
 8038e9c:	6878      	ldr	r0, [r7, #4]
 8038e9e:	f7fe f96d 	bl	803717c <HAL_UARTEx_RxEventCallback>
 8038ea2:	e002      	b.n	8038eaa <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8038ea4:	6878      	ldr	r0, [r7, #4]
 8038ea6:	f7f2 f95f 	bl	802b168 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8038eaa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8038eae:	2b00      	cmp	r3, #0
 8038eb0:	d006      	beq.n	8038ec0 <UART_RxISR_16BIT_FIFOEN+0x250>
 8038eb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8038eb6:	f003 0320 	and.w	r3, r3, #32
 8038eba:	2b00      	cmp	r3, #0
 8038ebc:	f47f aefc 	bne.w	8038cb8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8038ec0:	687b      	ldr	r3, [r7, #4]
 8038ec2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038ec6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8038eca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8038ece:	2b00      	cmp	r3, #0
 8038ed0:	d045      	beq.n	8038f5e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8038ed2:	687b      	ldr	r3, [r7, #4]
 8038ed4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8038ed8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8038edc:	429a      	cmp	r2, r3
 8038ede:	d23e      	bcs.n	8038f5e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8038ee0:	687b      	ldr	r3, [r7, #4]
 8038ee2:	681b      	ldr	r3, [r3, #0]
 8038ee4:	3308      	adds	r3, #8
 8038ee6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038eea:	e853 3f00 	ldrex	r3, [r3]
 8038eee:	623b      	str	r3, [r7, #32]
   return(result);
 8038ef0:	6a3b      	ldr	r3, [r7, #32]
 8038ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8038ef6:	677b      	str	r3, [r7, #116]	; 0x74
 8038ef8:	687b      	ldr	r3, [r7, #4]
 8038efa:	681b      	ldr	r3, [r3, #0]
 8038efc:	3308      	adds	r3, #8
 8038efe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8038f00:	633a      	str	r2, [r7, #48]	; 0x30
 8038f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038f04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8038f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8038f08:	e841 2300 	strex	r3, r2, [r1]
 8038f0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8038f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038f10:	2b00      	cmp	r3, #0
 8038f12:	d1e5      	bne.n	8038ee0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8038f14:	687b      	ldr	r3, [r7, #4]
 8038f16:	4a15      	ldr	r2, [pc, #84]	; (8038f6c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8038f18:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8038f1a:	687b      	ldr	r3, [r7, #4]
 8038f1c:	681b      	ldr	r3, [r3, #0]
 8038f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038f20:	693b      	ldr	r3, [r7, #16]
 8038f22:	e853 3f00 	ldrex	r3, [r3]
 8038f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8038f28:	68fb      	ldr	r3, [r7, #12]
 8038f2a:	f043 0320 	orr.w	r3, r3, #32
 8038f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8038f30:	687b      	ldr	r3, [r7, #4]
 8038f32:	681b      	ldr	r3, [r3, #0]
 8038f34:	461a      	mov	r2, r3
 8038f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8038f38:	61fb      	str	r3, [r7, #28]
 8038f3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038f3c:	69b9      	ldr	r1, [r7, #24]
 8038f3e:	69fa      	ldr	r2, [r7, #28]
 8038f40:	e841 2300 	strex	r3, r2, [r1]
 8038f44:	617b      	str	r3, [r7, #20]
   return(result);
 8038f46:	697b      	ldr	r3, [r7, #20]
 8038f48:	2b00      	cmp	r3, #0
 8038f4a:	d1e6      	bne.n	8038f1a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8038f4c:	e007      	b.n	8038f5e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8038f4e:	687b      	ldr	r3, [r7, #4]
 8038f50:	681b      	ldr	r3, [r3, #0]
 8038f52:	699a      	ldr	r2, [r3, #24]
 8038f54:	687b      	ldr	r3, [r7, #4]
 8038f56:	681b      	ldr	r3, [r3, #0]
 8038f58:	f042 0208 	orr.w	r2, r2, #8
 8038f5c:	619a      	str	r2, [r3, #24]
}
 8038f5e:	bf00      	nop
 8038f60:	37a0      	adds	r7, #160	; 0xa0
 8038f62:	46bd      	mov	sp, r7
 8038f64:	bd80      	pop	{r7, pc}
 8038f66:	bf00      	nop
 8038f68:	effffffe 	.word	0xeffffffe
 8038f6c:	08038817 	.word	0x08038817

08038f70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8038f70:	b480      	push	{r7}
 8038f72:	b083      	sub	sp, #12
 8038f74:	af00      	add	r7, sp, #0
 8038f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8038f78:	bf00      	nop
 8038f7a:	370c      	adds	r7, #12
 8038f7c:	46bd      	mov	sp, r7
 8038f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f82:	4770      	bx	lr

08038f84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8038f84:	b480      	push	{r7}
 8038f86:	b083      	sub	sp, #12
 8038f88:	af00      	add	r7, sp, #0
 8038f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8038f8c:	bf00      	nop
 8038f8e:	370c      	adds	r7, #12
 8038f90:	46bd      	mov	sp, r7
 8038f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f96:	4770      	bx	lr

08038f98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8038f98:	b480      	push	{r7}
 8038f9a:	b083      	sub	sp, #12
 8038f9c:	af00      	add	r7, sp, #0
 8038f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8038fa0:	bf00      	nop
 8038fa2:	370c      	adds	r7, #12
 8038fa4:	46bd      	mov	sp, r7
 8038fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038faa:	4770      	bx	lr

08038fac <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8038fac:	b580      	push	{r7, lr}
 8038fae:	b084      	sub	sp, #16
 8038fb0:	af00      	add	r7, sp, #0
 8038fb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8038fb4:	687b      	ldr	r3, [r7, #4]
 8038fb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8038fba:	2b01      	cmp	r3, #1
 8038fbc:	d101      	bne.n	8038fc2 <HAL_UARTEx_EnableFifoMode+0x16>
 8038fbe:	2302      	movs	r3, #2
 8038fc0:	e02b      	b.n	803901a <HAL_UARTEx_EnableFifoMode+0x6e>
 8038fc2:	687b      	ldr	r3, [r7, #4]
 8038fc4:	2201      	movs	r2, #1
 8038fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8038fca:	687b      	ldr	r3, [r7, #4]
 8038fcc:	2224      	movs	r2, #36	; 0x24
 8038fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8038fd2:	687b      	ldr	r3, [r7, #4]
 8038fd4:	681b      	ldr	r3, [r3, #0]
 8038fd6:	681b      	ldr	r3, [r3, #0]
 8038fd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8038fda:	687b      	ldr	r3, [r7, #4]
 8038fdc:	681b      	ldr	r3, [r3, #0]
 8038fde:	681a      	ldr	r2, [r3, #0]
 8038fe0:	687b      	ldr	r3, [r7, #4]
 8038fe2:	681b      	ldr	r3, [r3, #0]
 8038fe4:	f022 0201 	bic.w	r2, r2, #1
 8038fe8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8038fea:	68fb      	ldr	r3, [r7, #12]
 8038fec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8038ff0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8038ff2:	687b      	ldr	r3, [r7, #4]
 8038ff4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8038ff8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8038ffa:	687b      	ldr	r3, [r7, #4]
 8038ffc:	681b      	ldr	r3, [r3, #0]
 8038ffe:	68fa      	ldr	r2, [r7, #12]
 8039000:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8039002:	6878      	ldr	r0, [r7, #4]
 8039004:	f000 f8c2 	bl	803918c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8039008:	687b      	ldr	r3, [r7, #4]
 803900a:	2220      	movs	r2, #32
 803900c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8039010:	687b      	ldr	r3, [r7, #4]
 8039012:	2200      	movs	r2, #0
 8039014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8039018:	2300      	movs	r3, #0
}
 803901a:	4618      	mov	r0, r3
 803901c:	3710      	adds	r7, #16
 803901e:	46bd      	mov	sp, r7
 8039020:	bd80      	pop	{r7, pc}

08039022 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8039022:	b480      	push	{r7}
 8039024:	b085      	sub	sp, #20
 8039026:	af00      	add	r7, sp, #0
 8039028:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 803902a:	687b      	ldr	r3, [r7, #4]
 803902c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8039030:	2b01      	cmp	r3, #1
 8039032:	d101      	bne.n	8039038 <HAL_UARTEx_DisableFifoMode+0x16>
 8039034:	2302      	movs	r3, #2
 8039036:	e027      	b.n	8039088 <HAL_UARTEx_DisableFifoMode+0x66>
 8039038:	687b      	ldr	r3, [r7, #4]
 803903a:	2201      	movs	r2, #1
 803903c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8039040:	687b      	ldr	r3, [r7, #4]
 8039042:	2224      	movs	r2, #36	; 0x24
 8039044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8039048:	687b      	ldr	r3, [r7, #4]
 803904a:	681b      	ldr	r3, [r3, #0]
 803904c:	681b      	ldr	r3, [r3, #0]
 803904e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8039050:	687b      	ldr	r3, [r7, #4]
 8039052:	681b      	ldr	r3, [r3, #0]
 8039054:	681a      	ldr	r2, [r3, #0]
 8039056:	687b      	ldr	r3, [r7, #4]
 8039058:	681b      	ldr	r3, [r3, #0]
 803905a:	f022 0201 	bic.w	r2, r2, #1
 803905e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8039060:	68fb      	ldr	r3, [r7, #12]
 8039062:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8039066:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8039068:	687b      	ldr	r3, [r7, #4]
 803906a:	2200      	movs	r2, #0
 803906c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803906e:	687b      	ldr	r3, [r7, #4]
 8039070:	681b      	ldr	r3, [r3, #0]
 8039072:	68fa      	ldr	r2, [r7, #12]
 8039074:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8039076:	687b      	ldr	r3, [r7, #4]
 8039078:	2220      	movs	r2, #32
 803907a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803907e:	687b      	ldr	r3, [r7, #4]
 8039080:	2200      	movs	r2, #0
 8039082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8039086:	2300      	movs	r3, #0
}
 8039088:	4618      	mov	r0, r3
 803908a:	3714      	adds	r7, #20
 803908c:	46bd      	mov	sp, r7
 803908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039092:	4770      	bx	lr

08039094 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8039094:	b580      	push	{r7, lr}
 8039096:	b084      	sub	sp, #16
 8039098:	af00      	add	r7, sp, #0
 803909a:	6078      	str	r0, [r7, #4]
 803909c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803909e:	687b      	ldr	r3, [r7, #4]
 80390a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80390a4:	2b01      	cmp	r3, #1
 80390a6:	d101      	bne.n	80390ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80390a8:	2302      	movs	r3, #2
 80390aa:	e02d      	b.n	8039108 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80390ac:	687b      	ldr	r3, [r7, #4]
 80390ae:	2201      	movs	r2, #1
 80390b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80390b4:	687b      	ldr	r3, [r7, #4]
 80390b6:	2224      	movs	r2, #36	; 0x24
 80390b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80390bc:	687b      	ldr	r3, [r7, #4]
 80390be:	681b      	ldr	r3, [r3, #0]
 80390c0:	681b      	ldr	r3, [r3, #0]
 80390c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80390c4:	687b      	ldr	r3, [r7, #4]
 80390c6:	681b      	ldr	r3, [r3, #0]
 80390c8:	681a      	ldr	r2, [r3, #0]
 80390ca:	687b      	ldr	r3, [r7, #4]
 80390cc:	681b      	ldr	r3, [r3, #0]
 80390ce:	f022 0201 	bic.w	r2, r2, #1
 80390d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80390d4:	687b      	ldr	r3, [r7, #4]
 80390d6:	681b      	ldr	r3, [r3, #0]
 80390d8:	689b      	ldr	r3, [r3, #8]
 80390da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80390de:	687b      	ldr	r3, [r7, #4]
 80390e0:	681b      	ldr	r3, [r3, #0]
 80390e2:	683a      	ldr	r2, [r7, #0]
 80390e4:	430a      	orrs	r2, r1
 80390e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80390e8:	6878      	ldr	r0, [r7, #4]
 80390ea:	f000 f84f 	bl	803918c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80390ee:	687b      	ldr	r3, [r7, #4]
 80390f0:	681b      	ldr	r3, [r3, #0]
 80390f2:	68fa      	ldr	r2, [r7, #12]
 80390f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80390f6:	687b      	ldr	r3, [r7, #4]
 80390f8:	2220      	movs	r2, #32
 80390fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80390fe:	687b      	ldr	r3, [r7, #4]
 8039100:	2200      	movs	r2, #0
 8039102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8039106:	2300      	movs	r3, #0
}
 8039108:	4618      	mov	r0, r3
 803910a:	3710      	adds	r7, #16
 803910c:	46bd      	mov	sp, r7
 803910e:	bd80      	pop	{r7, pc}

08039110 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8039110:	b580      	push	{r7, lr}
 8039112:	b084      	sub	sp, #16
 8039114:	af00      	add	r7, sp, #0
 8039116:	6078      	str	r0, [r7, #4]
 8039118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803911a:	687b      	ldr	r3, [r7, #4]
 803911c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8039120:	2b01      	cmp	r3, #1
 8039122:	d101      	bne.n	8039128 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8039124:	2302      	movs	r3, #2
 8039126:	e02d      	b.n	8039184 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8039128:	687b      	ldr	r3, [r7, #4]
 803912a:	2201      	movs	r2, #1
 803912c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8039130:	687b      	ldr	r3, [r7, #4]
 8039132:	2224      	movs	r2, #36	; 0x24
 8039134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8039138:	687b      	ldr	r3, [r7, #4]
 803913a:	681b      	ldr	r3, [r3, #0]
 803913c:	681b      	ldr	r3, [r3, #0]
 803913e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8039140:	687b      	ldr	r3, [r7, #4]
 8039142:	681b      	ldr	r3, [r3, #0]
 8039144:	681a      	ldr	r2, [r3, #0]
 8039146:	687b      	ldr	r3, [r7, #4]
 8039148:	681b      	ldr	r3, [r3, #0]
 803914a:	f022 0201 	bic.w	r2, r2, #1
 803914e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8039150:	687b      	ldr	r3, [r7, #4]
 8039152:	681b      	ldr	r3, [r3, #0]
 8039154:	689b      	ldr	r3, [r3, #8]
 8039156:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 803915a:	687b      	ldr	r3, [r7, #4]
 803915c:	681b      	ldr	r3, [r3, #0]
 803915e:	683a      	ldr	r2, [r7, #0]
 8039160:	430a      	orrs	r2, r1
 8039162:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8039164:	6878      	ldr	r0, [r7, #4]
 8039166:	f000 f811 	bl	803918c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803916a:	687b      	ldr	r3, [r7, #4]
 803916c:	681b      	ldr	r3, [r3, #0]
 803916e:	68fa      	ldr	r2, [r7, #12]
 8039170:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8039172:	687b      	ldr	r3, [r7, #4]
 8039174:	2220      	movs	r2, #32
 8039176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803917a:	687b      	ldr	r3, [r7, #4]
 803917c:	2200      	movs	r2, #0
 803917e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8039182:	2300      	movs	r3, #0
}
 8039184:	4618      	mov	r0, r3
 8039186:	3710      	adds	r7, #16
 8039188:	46bd      	mov	sp, r7
 803918a:	bd80      	pop	{r7, pc}

0803918c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 803918c:	b480      	push	{r7}
 803918e:	b085      	sub	sp, #20
 8039190:	af00      	add	r7, sp, #0
 8039192:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8039194:	687b      	ldr	r3, [r7, #4]
 8039196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8039198:	2b00      	cmp	r3, #0
 803919a:	d108      	bne.n	80391ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 803919c:	687b      	ldr	r3, [r7, #4]
 803919e:	2201      	movs	r2, #1
 80391a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80391a4:	687b      	ldr	r3, [r7, #4]
 80391a6:	2201      	movs	r2, #1
 80391a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80391ac:	e031      	b.n	8039212 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80391ae:	2310      	movs	r3, #16
 80391b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80391b2:	2310      	movs	r3, #16
 80391b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80391b6:	687b      	ldr	r3, [r7, #4]
 80391b8:	681b      	ldr	r3, [r3, #0]
 80391ba:	689b      	ldr	r3, [r3, #8]
 80391bc:	0e5b      	lsrs	r3, r3, #25
 80391be:	b2db      	uxtb	r3, r3
 80391c0:	f003 0307 	and.w	r3, r3, #7
 80391c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80391c6:	687b      	ldr	r3, [r7, #4]
 80391c8:	681b      	ldr	r3, [r3, #0]
 80391ca:	689b      	ldr	r3, [r3, #8]
 80391cc:	0f5b      	lsrs	r3, r3, #29
 80391ce:	b2db      	uxtb	r3, r3
 80391d0:	f003 0307 	and.w	r3, r3, #7
 80391d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80391d6:	7bbb      	ldrb	r3, [r7, #14]
 80391d8:	7b3a      	ldrb	r2, [r7, #12]
 80391da:	4911      	ldr	r1, [pc, #68]	; (8039220 <UARTEx_SetNbDataToProcess+0x94>)
 80391dc:	5c8a      	ldrb	r2, [r1, r2]
 80391de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80391e2:	7b3a      	ldrb	r2, [r7, #12]
 80391e4:	490f      	ldr	r1, [pc, #60]	; (8039224 <UARTEx_SetNbDataToProcess+0x98>)
 80391e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80391e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80391ec:	b29a      	uxth	r2, r3
 80391ee:	687b      	ldr	r3, [r7, #4]
 80391f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80391f4:	7bfb      	ldrb	r3, [r7, #15]
 80391f6:	7b7a      	ldrb	r2, [r7, #13]
 80391f8:	4909      	ldr	r1, [pc, #36]	; (8039220 <UARTEx_SetNbDataToProcess+0x94>)
 80391fa:	5c8a      	ldrb	r2, [r1, r2]
 80391fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8039200:	7b7a      	ldrb	r2, [r7, #13]
 8039202:	4908      	ldr	r1, [pc, #32]	; (8039224 <UARTEx_SetNbDataToProcess+0x98>)
 8039204:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8039206:	fb93 f3f2 	sdiv	r3, r3, r2
 803920a:	b29a      	uxth	r2, r3
 803920c:	687b      	ldr	r3, [r7, #4]
 803920e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8039212:	bf00      	nop
 8039214:	3714      	adds	r7, #20
 8039216:	46bd      	mov	sp, r7
 8039218:	f85d 7b04 	ldr.w	r7, [sp], #4
 803921c:	4770      	bx	lr
 803921e:	bf00      	nop
 8039220:	08059598 	.word	0x08059598
 8039224:	080595a0 	.word	0x080595a0

08039228 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8039228:	b084      	sub	sp, #16
 803922a:	b580      	push	{r7, lr}
 803922c:	b084      	sub	sp, #16
 803922e:	af00      	add	r7, sp, #0
 8039230:	6078      	str	r0, [r7, #4]
 8039232:	f107 001c 	add.w	r0, r7, #28
 8039236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 803923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803923c:	2b01      	cmp	r3, #1
 803923e:	d120      	bne.n	8039282 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8039240:	687b      	ldr	r3, [r7, #4]
 8039242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8039244:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8039248:	687b      	ldr	r3, [r7, #4]
 803924a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 803924c:	687b      	ldr	r3, [r7, #4]
 803924e:	68da      	ldr	r2, [r3, #12]
 8039250:	4b2a      	ldr	r3, [pc, #168]	; (80392fc <USB_CoreInit+0xd4>)
 8039252:	4013      	ands	r3, r2
 8039254:	687a      	ldr	r2, [r7, #4]
 8039256:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8039258:	687b      	ldr	r3, [r7, #4]
 803925a:	68db      	ldr	r3, [r3, #12]
 803925c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8039260:	687b      	ldr	r3, [r7, #4]
 8039262:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8039264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8039266:	2b01      	cmp	r3, #1
 8039268:	d105      	bne.n	8039276 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 803926a:	687b      	ldr	r3, [r7, #4]
 803926c:	68db      	ldr	r3, [r3, #12]
 803926e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8039272:	687b      	ldr	r3, [r7, #4]
 8039274:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8039276:	6878      	ldr	r0, [r7, #4]
 8039278:	f001 fc04 	bl	803aa84 <USB_CoreReset>
 803927c:	4603      	mov	r3, r0
 803927e:	73fb      	strb	r3, [r7, #15]
 8039280:	e01a      	b.n	80392b8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8039282:	687b      	ldr	r3, [r7, #4]
 8039284:	68db      	ldr	r3, [r3, #12]
 8039286:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803928a:	687b      	ldr	r3, [r7, #4]
 803928c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 803928e:	6878      	ldr	r0, [r7, #4]
 8039290:	f001 fbf8 	bl	803aa84 <USB_CoreReset>
 8039294:	4603      	mov	r3, r0
 8039296:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8039298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803929a:	2b00      	cmp	r3, #0
 803929c:	d106      	bne.n	80392ac <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 803929e:	687b      	ldr	r3, [r7, #4]
 80392a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80392a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80392a6:	687b      	ldr	r3, [r7, #4]
 80392a8:	639a      	str	r2, [r3, #56]	; 0x38
 80392aa:	e005      	b.n	80392b8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80392ac:	687b      	ldr	r3, [r7, #4]
 80392ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80392b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80392b4:	687b      	ldr	r3, [r7, #4]
 80392b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80392b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80392ba:	2b01      	cmp	r3, #1
 80392bc:	d116      	bne.n	80392ec <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80392be:	687b      	ldr	r3, [r7, #4]
 80392c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80392c2:	b29a      	uxth	r2, r3
 80392c4:	687b      	ldr	r3, [r7, #4]
 80392c6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80392c8:	687b      	ldr	r3, [r7, #4]
 80392ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80392cc:	4b0c      	ldr	r3, [pc, #48]	; (8039300 <USB_CoreInit+0xd8>)
 80392ce:	4313      	orrs	r3, r2
 80392d0:	687a      	ldr	r2, [r7, #4]
 80392d2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80392d4:	687b      	ldr	r3, [r7, #4]
 80392d6:	689b      	ldr	r3, [r3, #8]
 80392d8:	f043 0206 	orr.w	r2, r3, #6
 80392dc:	687b      	ldr	r3, [r7, #4]
 80392de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80392e0:	687b      	ldr	r3, [r7, #4]
 80392e2:	689b      	ldr	r3, [r3, #8]
 80392e4:	f043 0220 	orr.w	r2, r3, #32
 80392e8:	687b      	ldr	r3, [r7, #4]
 80392ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80392ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80392ee:	4618      	mov	r0, r3
 80392f0:	3710      	adds	r7, #16
 80392f2:	46bd      	mov	sp, r7
 80392f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80392f8:	b004      	add	sp, #16
 80392fa:	4770      	bx	lr
 80392fc:	ffbdffbf 	.word	0xffbdffbf
 8039300:	03ee0000 	.word	0x03ee0000

08039304 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8039304:	b480      	push	{r7}
 8039306:	b087      	sub	sp, #28
 8039308:	af00      	add	r7, sp, #0
 803930a:	60f8      	str	r0, [r7, #12]
 803930c:	60b9      	str	r1, [r7, #8]
 803930e:	4613      	mov	r3, r2
 8039310:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8039312:	79fb      	ldrb	r3, [r7, #7]
 8039314:	2b02      	cmp	r3, #2
 8039316:	d165      	bne.n	80393e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8039318:	68bb      	ldr	r3, [r7, #8]
 803931a:	4a41      	ldr	r2, [pc, #260]	; (8039420 <USB_SetTurnaroundTime+0x11c>)
 803931c:	4293      	cmp	r3, r2
 803931e:	d906      	bls.n	803932e <USB_SetTurnaroundTime+0x2a>
 8039320:	68bb      	ldr	r3, [r7, #8]
 8039322:	4a40      	ldr	r2, [pc, #256]	; (8039424 <USB_SetTurnaroundTime+0x120>)
 8039324:	4293      	cmp	r3, r2
 8039326:	d202      	bcs.n	803932e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8039328:	230f      	movs	r3, #15
 803932a:	617b      	str	r3, [r7, #20]
 803932c:	e062      	b.n	80393f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 803932e:	68bb      	ldr	r3, [r7, #8]
 8039330:	4a3c      	ldr	r2, [pc, #240]	; (8039424 <USB_SetTurnaroundTime+0x120>)
 8039332:	4293      	cmp	r3, r2
 8039334:	d306      	bcc.n	8039344 <USB_SetTurnaroundTime+0x40>
 8039336:	68bb      	ldr	r3, [r7, #8]
 8039338:	4a3b      	ldr	r2, [pc, #236]	; (8039428 <USB_SetTurnaroundTime+0x124>)
 803933a:	4293      	cmp	r3, r2
 803933c:	d202      	bcs.n	8039344 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 803933e:	230e      	movs	r3, #14
 8039340:	617b      	str	r3, [r7, #20]
 8039342:	e057      	b.n	80393f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8039344:	68bb      	ldr	r3, [r7, #8]
 8039346:	4a38      	ldr	r2, [pc, #224]	; (8039428 <USB_SetTurnaroundTime+0x124>)
 8039348:	4293      	cmp	r3, r2
 803934a:	d306      	bcc.n	803935a <USB_SetTurnaroundTime+0x56>
 803934c:	68bb      	ldr	r3, [r7, #8]
 803934e:	4a37      	ldr	r2, [pc, #220]	; (803942c <USB_SetTurnaroundTime+0x128>)
 8039350:	4293      	cmp	r3, r2
 8039352:	d202      	bcs.n	803935a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8039354:	230d      	movs	r3, #13
 8039356:	617b      	str	r3, [r7, #20]
 8039358:	e04c      	b.n	80393f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 803935a:	68bb      	ldr	r3, [r7, #8]
 803935c:	4a33      	ldr	r2, [pc, #204]	; (803942c <USB_SetTurnaroundTime+0x128>)
 803935e:	4293      	cmp	r3, r2
 8039360:	d306      	bcc.n	8039370 <USB_SetTurnaroundTime+0x6c>
 8039362:	68bb      	ldr	r3, [r7, #8]
 8039364:	4a32      	ldr	r2, [pc, #200]	; (8039430 <USB_SetTurnaroundTime+0x12c>)
 8039366:	4293      	cmp	r3, r2
 8039368:	d802      	bhi.n	8039370 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 803936a:	230c      	movs	r3, #12
 803936c:	617b      	str	r3, [r7, #20]
 803936e:	e041      	b.n	80393f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8039370:	68bb      	ldr	r3, [r7, #8]
 8039372:	4a2f      	ldr	r2, [pc, #188]	; (8039430 <USB_SetTurnaroundTime+0x12c>)
 8039374:	4293      	cmp	r3, r2
 8039376:	d906      	bls.n	8039386 <USB_SetTurnaroundTime+0x82>
 8039378:	68bb      	ldr	r3, [r7, #8]
 803937a:	4a2e      	ldr	r2, [pc, #184]	; (8039434 <USB_SetTurnaroundTime+0x130>)
 803937c:	4293      	cmp	r3, r2
 803937e:	d802      	bhi.n	8039386 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8039380:	230b      	movs	r3, #11
 8039382:	617b      	str	r3, [r7, #20]
 8039384:	e036      	b.n	80393f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8039386:	68bb      	ldr	r3, [r7, #8]
 8039388:	4a2a      	ldr	r2, [pc, #168]	; (8039434 <USB_SetTurnaroundTime+0x130>)
 803938a:	4293      	cmp	r3, r2
 803938c:	d906      	bls.n	803939c <USB_SetTurnaroundTime+0x98>
 803938e:	68bb      	ldr	r3, [r7, #8]
 8039390:	4a29      	ldr	r2, [pc, #164]	; (8039438 <USB_SetTurnaroundTime+0x134>)
 8039392:	4293      	cmp	r3, r2
 8039394:	d802      	bhi.n	803939c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8039396:	230a      	movs	r3, #10
 8039398:	617b      	str	r3, [r7, #20]
 803939a:	e02b      	b.n	80393f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 803939c:	68bb      	ldr	r3, [r7, #8]
 803939e:	4a26      	ldr	r2, [pc, #152]	; (8039438 <USB_SetTurnaroundTime+0x134>)
 80393a0:	4293      	cmp	r3, r2
 80393a2:	d906      	bls.n	80393b2 <USB_SetTurnaroundTime+0xae>
 80393a4:	68bb      	ldr	r3, [r7, #8]
 80393a6:	4a25      	ldr	r2, [pc, #148]	; (803943c <USB_SetTurnaroundTime+0x138>)
 80393a8:	4293      	cmp	r3, r2
 80393aa:	d202      	bcs.n	80393b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80393ac:	2309      	movs	r3, #9
 80393ae:	617b      	str	r3, [r7, #20]
 80393b0:	e020      	b.n	80393f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80393b2:	68bb      	ldr	r3, [r7, #8]
 80393b4:	4a21      	ldr	r2, [pc, #132]	; (803943c <USB_SetTurnaroundTime+0x138>)
 80393b6:	4293      	cmp	r3, r2
 80393b8:	d306      	bcc.n	80393c8 <USB_SetTurnaroundTime+0xc4>
 80393ba:	68bb      	ldr	r3, [r7, #8]
 80393bc:	4a20      	ldr	r2, [pc, #128]	; (8039440 <USB_SetTurnaroundTime+0x13c>)
 80393be:	4293      	cmp	r3, r2
 80393c0:	d802      	bhi.n	80393c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80393c2:	2308      	movs	r3, #8
 80393c4:	617b      	str	r3, [r7, #20]
 80393c6:	e015      	b.n	80393f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80393c8:	68bb      	ldr	r3, [r7, #8]
 80393ca:	4a1d      	ldr	r2, [pc, #116]	; (8039440 <USB_SetTurnaroundTime+0x13c>)
 80393cc:	4293      	cmp	r3, r2
 80393ce:	d906      	bls.n	80393de <USB_SetTurnaroundTime+0xda>
 80393d0:	68bb      	ldr	r3, [r7, #8]
 80393d2:	4a1c      	ldr	r2, [pc, #112]	; (8039444 <USB_SetTurnaroundTime+0x140>)
 80393d4:	4293      	cmp	r3, r2
 80393d6:	d202      	bcs.n	80393de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80393d8:	2307      	movs	r3, #7
 80393da:	617b      	str	r3, [r7, #20]
 80393dc:	e00a      	b.n	80393f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80393de:	2306      	movs	r3, #6
 80393e0:	617b      	str	r3, [r7, #20]
 80393e2:	e007      	b.n	80393f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80393e4:	79fb      	ldrb	r3, [r7, #7]
 80393e6:	2b00      	cmp	r3, #0
 80393e8:	d102      	bne.n	80393f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80393ea:	2309      	movs	r3, #9
 80393ec:	617b      	str	r3, [r7, #20]
 80393ee:	e001      	b.n	80393f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80393f0:	2309      	movs	r3, #9
 80393f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80393f4:	68fb      	ldr	r3, [r7, #12]
 80393f6:	68db      	ldr	r3, [r3, #12]
 80393f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80393fc:	68fb      	ldr	r3, [r7, #12]
 80393fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8039400:	68fb      	ldr	r3, [r7, #12]
 8039402:	68da      	ldr	r2, [r3, #12]
 8039404:	697b      	ldr	r3, [r7, #20]
 8039406:	029b      	lsls	r3, r3, #10
 8039408:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 803940c:	431a      	orrs	r2, r3
 803940e:	68fb      	ldr	r3, [r7, #12]
 8039410:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8039412:	2300      	movs	r3, #0
}
 8039414:	4618      	mov	r0, r3
 8039416:	371c      	adds	r7, #28
 8039418:	46bd      	mov	sp, r7
 803941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803941e:	4770      	bx	lr
 8039420:	00d8acbf 	.word	0x00d8acbf
 8039424:	00e4e1c0 	.word	0x00e4e1c0
 8039428:	00f42400 	.word	0x00f42400
 803942c:	01067380 	.word	0x01067380
 8039430:	011a499f 	.word	0x011a499f
 8039434:	01312cff 	.word	0x01312cff
 8039438:	014ca43f 	.word	0x014ca43f
 803943c:	016e3600 	.word	0x016e3600
 8039440:	01a6ab1f 	.word	0x01a6ab1f
 8039444:	01e84800 	.word	0x01e84800

08039448 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8039448:	b480      	push	{r7}
 803944a:	b083      	sub	sp, #12
 803944c:	af00      	add	r7, sp, #0
 803944e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8039450:	687b      	ldr	r3, [r7, #4]
 8039452:	689b      	ldr	r3, [r3, #8]
 8039454:	f043 0201 	orr.w	r2, r3, #1
 8039458:	687b      	ldr	r3, [r7, #4]
 803945a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 803945c:	2300      	movs	r3, #0
}
 803945e:	4618      	mov	r0, r3
 8039460:	370c      	adds	r7, #12
 8039462:	46bd      	mov	sp, r7
 8039464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039468:	4770      	bx	lr

0803946a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 803946a:	b480      	push	{r7}
 803946c:	b083      	sub	sp, #12
 803946e:	af00      	add	r7, sp, #0
 8039470:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8039472:	687b      	ldr	r3, [r7, #4]
 8039474:	689b      	ldr	r3, [r3, #8]
 8039476:	f023 0201 	bic.w	r2, r3, #1
 803947a:	687b      	ldr	r3, [r7, #4]
 803947c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 803947e:	2300      	movs	r3, #0
}
 8039480:	4618      	mov	r0, r3
 8039482:	370c      	adds	r7, #12
 8039484:	46bd      	mov	sp, r7
 8039486:	f85d 7b04 	ldr.w	r7, [sp], #4
 803948a:	4770      	bx	lr

0803948c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 803948c:	b580      	push	{r7, lr}
 803948e:	b084      	sub	sp, #16
 8039490:	af00      	add	r7, sp, #0
 8039492:	6078      	str	r0, [r7, #4]
 8039494:	460b      	mov	r3, r1
 8039496:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8039498:	2300      	movs	r3, #0
 803949a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 803949c:	687b      	ldr	r3, [r7, #4]
 803949e:	68db      	ldr	r3, [r3, #12]
 80394a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80394a4:	687b      	ldr	r3, [r7, #4]
 80394a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80394a8:	78fb      	ldrb	r3, [r7, #3]
 80394aa:	2b01      	cmp	r3, #1
 80394ac:	d115      	bne.n	80394da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80394ae:	687b      	ldr	r3, [r7, #4]
 80394b0:	68db      	ldr	r3, [r3, #12]
 80394b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80394b6:	687b      	ldr	r3, [r7, #4]
 80394b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80394ba:	2001      	movs	r0, #1
 80394bc:	f7f2 ff76 	bl	802c3ac <HAL_Delay>
      ms++;
 80394c0:	68fb      	ldr	r3, [r7, #12]
 80394c2:	3301      	adds	r3, #1
 80394c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80394c6:	6878      	ldr	r0, [r7, #4]
 80394c8:	f001 fa4b 	bl	803a962 <USB_GetMode>
 80394cc:	4603      	mov	r3, r0
 80394ce:	2b01      	cmp	r3, #1
 80394d0:	d01e      	beq.n	8039510 <USB_SetCurrentMode+0x84>
 80394d2:	68fb      	ldr	r3, [r7, #12]
 80394d4:	2b31      	cmp	r3, #49	; 0x31
 80394d6:	d9f0      	bls.n	80394ba <USB_SetCurrentMode+0x2e>
 80394d8:	e01a      	b.n	8039510 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80394da:	78fb      	ldrb	r3, [r7, #3]
 80394dc:	2b00      	cmp	r3, #0
 80394de:	d115      	bne.n	803950c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80394e0:	687b      	ldr	r3, [r7, #4]
 80394e2:	68db      	ldr	r3, [r3, #12]
 80394e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80394e8:	687b      	ldr	r3, [r7, #4]
 80394ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80394ec:	2001      	movs	r0, #1
 80394ee:	f7f2 ff5d 	bl	802c3ac <HAL_Delay>
      ms++;
 80394f2:	68fb      	ldr	r3, [r7, #12]
 80394f4:	3301      	adds	r3, #1
 80394f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80394f8:	6878      	ldr	r0, [r7, #4]
 80394fa:	f001 fa32 	bl	803a962 <USB_GetMode>
 80394fe:	4603      	mov	r3, r0
 8039500:	2b00      	cmp	r3, #0
 8039502:	d005      	beq.n	8039510 <USB_SetCurrentMode+0x84>
 8039504:	68fb      	ldr	r3, [r7, #12]
 8039506:	2b31      	cmp	r3, #49	; 0x31
 8039508:	d9f0      	bls.n	80394ec <USB_SetCurrentMode+0x60>
 803950a:	e001      	b.n	8039510 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 803950c:	2301      	movs	r3, #1
 803950e:	e005      	b.n	803951c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8039510:	68fb      	ldr	r3, [r7, #12]
 8039512:	2b32      	cmp	r3, #50	; 0x32
 8039514:	d101      	bne.n	803951a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8039516:	2301      	movs	r3, #1
 8039518:	e000      	b.n	803951c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 803951a:	2300      	movs	r3, #0
}
 803951c:	4618      	mov	r0, r3
 803951e:	3710      	adds	r7, #16
 8039520:	46bd      	mov	sp, r7
 8039522:	bd80      	pop	{r7, pc}

08039524 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8039524:	b084      	sub	sp, #16
 8039526:	b580      	push	{r7, lr}
 8039528:	b086      	sub	sp, #24
 803952a:	af00      	add	r7, sp, #0
 803952c:	6078      	str	r0, [r7, #4]
 803952e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8039532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8039536:	2300      	movs	r3, #0
 8039538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803953a:	687b      	ldr	r3, [r7, #4]
 803953c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 803953e:	2300      	movs	r3, #0
 8039540:	613b      	str	r3, [r7, #16]
 8039542:	e009      	b.n	8039558 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8039544:	687a      	ldr	r2, [r7, #4]
 8039546:	693b      	ldr	r3, [r7, #16]
 8039548:	3340      	adds	r3, #64	; 0x40
 803954a:	009b      	lsls	r3, r3, #2
 803954c:	4413      	add	r3, r2
 803954e:	2200      	movs	r2, #0
 8039550:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8039552:	693b      	ldr	r3, [r7, #16]
 8039554:	3301      	adds	r3, #1
 8039556:	613b      	str	r3, [r7, #16]
 8039558:	693b      	ldr	r3, [r7, #16]
 803955a:	2b0e      	cmp	r3, #14
 803955c:	d9f2      	bls.n	8039544 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 803955e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8039560:	2b00      	cmp	r3, #0
 8039562:	d11c      	bne.n	803959e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8039564:	68fb      	ldr	r3, [r7, #12]
 8039566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803956a:	685b      	ldr	r3, [r3, #4]
 803956c:	68fa      	ldr	r2, [r7, #12]
 803956e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8039572:	f043 0302 	orr.w	r3, r3, #2
 8039576:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8039578:	687b      	ldr	r3, [r7, #4]
 803957a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803957c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8039580:	687b      	ldr	r3, [r7, #4]
 8039582:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8039584:	687b      	ldr	r3, [r7, #4]
 8039586:	681b      	ldr	r3, [r3, #0]
 8039588:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803958c:	687b      	ldr	r3, [r7, #4]
 803958e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8039590:	687b      	ldr	r3, [r7, #4]
 8039592:	681b      	ldr	r3, [r3, #0]
 8039594:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8039598:	687b      	ldr	r3, [r7, #4]
 803959a:	601a      	str	r2, [r3, #0]
 803959c:	e005      	b.n	80395aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 803959e:	687b      	ldr	r3, [r7, #4]
 80395a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80395a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80395a6:	687b      	ldr	r3, [r7, #4]
 80395a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80395aa:	68fb      	ldr	r3, [r7, #12]
 80395ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80395b0:	461a      	mov	r2, r3
 80395b2:	2300      	movs	r3, #0
 80395b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80395b6:	68fb      	ldr	r3, [r7, #12]
 80395b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80395bc:	4619      	mov	r1, r3
 80395be:	68fb      	ldr	r3, [r7, #12]
 80395c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80395c4:	461a      	mov	r2, r3
 80395c6:	680b      	ldr	r3, [r1, #0]
 80395c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80395ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80395cc:	2b01      	cmp	r3, #1
 80395ce:	d10c      	bne.n	80395ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80395d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80395d2:	2b00      	cmp	r3, #0
 80395d4:	d104      	bne.n	80395e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80395d6:	2100      	movs	r1, #0
 80395d8:	6878      	ldr	r0, [r7, #4]
 80395da:	f000 f965 	bl	80398a8 <USB_SetDevSpeed>
 80395de:	e008      	b.n	80395f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80395e0:	2101      	movs	r1, #1
 80395e2:	6878      	ldr	r0, [r7, #4]
 80395e4:	f000 f960 	bl	80398a8 <USB_SetDevSpeed>
 80395e8:	e003      	b.n	80395f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80395ea:	2103      	movs	r1, #3
 80395ec:	6878      	ldr	r0, [r7, #4]
 80395ee:	f000 f95b 	bl	80398a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80395f2:	2110      	movs	r1, #16
 80395f4:	6878      	ldr	r0, [r7, #4]
 80395f6:	f000 f8f3 	bl	80397e0 <USB_FlushTxFifo>
 80395fa:	4603      	mov	r3, r0
 80395fc:	2b00      	cmp	r3, #0
 80395fe:	d001      	beq.n	8039604 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8039600:	2301      	movs	r3, #1
 8039602:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8039604:	6878      	ldr	r0, [r7, #4]
 8039606:	f000 f91f 	bl	8039848 <USB_FlushRxFifo>
 803960a:	4603      	mov	r3, r0
 803960c:	2b00      	cmp	r3, #0
 803960e:	d001      	beq.n	8039614 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8039610:	2301      	movs	r3, #1
 8039612:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8039614:	68fb      	ldr	r3, [r7, #12]
 8039616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803961a:	461a      	mov	r2, r3
 803961c:	2300      	movs	r3, #0
 803961e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8039620:	68fb      	ldr	r3, [r7, #12]
 8039622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039626:	461a      	mov	r2, r3
 8039628:	2300      	movs	r3, #0
 803962a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 803962c:	68fb      	ldr	r3, [r7, #12]
 803962e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039632:	461a      	mov	r2, r3
 8039634:	2300      	movs	r3, #0
 8039636:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8039638:	2300      	movs	r3, #0
 803963a:	613b      	str	r3, [r7, #16]
 803963c:	e043      	b.n	80396c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 803963e:	693b      	ldr	r3, [r7, #16]
 8039640:	015a      	lsls	r2, r3, #5
 8039642:	68fb      	ldr	r3, [r7, #12]
 8039644:	4413      	add	r3, r2
 8039646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803964a:	681b      	ldr	r3, [r3, #0]
 803964c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8039650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8039654:	d118      	bne.n	8039688 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8039656:	693b      	ldr	r3, [r7, #16]
 8039658:	2b00      	cmp	r3, #0
 803965a:	d10a      	bne.n	8039672 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 803965c:	693b      	ldr	r3, [r7, #16]
 803965e:	015a      	lsls	r2, r3, #5
 8039660:	68fb      	ldr	r3, [r7, #12]
 8039662:	4413      	add	r3, r2
 8039664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039668:	461a      	mov	r2, r3
 803966a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803966e:	6013      	str	r3, [r2, #0]
 8039670:	e013      	b.n	803969a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8039672:	693b      	ldr	r3, [r7, #16]
 8039674:	015a      	lsls	r2, r3, #5
 8039676:	68fb      	ldr	r3, [r7, #12]
 8039678:	4413      	add	r3, r2
 803967a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803967e:	461a      	mov	r2, r3
 8039680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8039684:	6013      	str	r3, [r2, #0]
 8039686:	e008      	b.n	803969a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8039688:	693b      	ldr	r3, [r7, #16]
 803968a:	015a      	lsls	r2, r3, #5
 803968c:	68fb      	ldr	r3, [r7, #12]
 803968e:	4413      	add	r3, r2
 8039690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039694:	461a      	mov	r2, r3
 8039696:	2300      	movs	r3, #0
 8039698:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 803969a:	693b      	ldr	r3, [r7, #16]
 803969c:	015a      	lsls	r2, r3, #5
 803969e:	68fb      	ldr	r3, [r7, #12]
 80396a0:	4413      	add	r3, r2
 80396a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80396a6:	461a      	mov	r2, r3
 80396a8:	2300      	movs	r3, #0
 80396aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80396ac:	693b      	ldr	r3, [r7, #16]
 80396ae:	015a      	lsls	r2, r3, #5
 80396b0:	68fb      	ldr	r3, [r7, #12]
 80396b2:	4413      	add	r3, r2
 80396b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80396b8:	461a      	mov	r2, r3
 80396ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80396be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80396c0:	693b      	ldr	r3, [r7, #16]
 80396c2:	3301      	adds	r3, #1
 80396c4:	613b      	str	r3, [r7, #16]
 80396c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80396c8:	693a      	ldr	r2, [r7, #16]
 80396ca:	429a      	cmp	r2, r3
 80396cc:	d3b7      	bcc.n	803963e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80396ce:	2300      	movs	r3, #0
 80396d0:	613b      	str	r3, [r7, #16]
 80396d2:	e043      	b.n	803975c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80396d4:	693b      	ldr	r3, [r7, #16]
 80396d6:	015a      	lsls	r2, r3, #5
 80396d8:	68fb      	ldr	r3, [r7, #12]
 80396da:	4413      	add	r3, r2
 80396dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80396e0:	681b      	ldr	r3, [r3, #0]
 80396e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80396e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80396ea:	d118      	bne.n	803971e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80396ec:	693b      	ldr	r3, [r7, #16]
 80396ee:	2b00      	cmp	r3, #0
 80396f0:	d10a      	bne.n	8039708 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80396f2:	693b      	ldr	r3, [r7, #16]
 80396f4:	015a      	lsls	r2, r3, #5
 80396f6:	68fb      	ldr	r3, [r7, #12]
 80396f8:	4413      	add	r3, r2
 80396fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80396fe:	461a      	mov	r2, r3
 8039700:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8039704:	6013      	str	r3, [r2, #0]
 8039706:	e013      	b.n	8039730 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8039708:	693b      	ldr	r3, [r7, #16]
 803970a:	015a      	lsls	r2, r3, #5
 803970c:	68fb      	ldr	r3, [r7, #12]
 803970e:	4413      	add	r3, r2
 8039710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039714:	461a      	mov	r2, r3
 8039716:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 803971a:	6013      	str	r3, [r2, #0]
 803971c:	e008      	b.n	8039730 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 803971e:	693b      	ldr	r3, [r7, #16]
 8039720:	015a      	lsls	r2, r3, #5
 8039722:	68fb      	ldr	r3, [r7, #12]
 8039724:	4413      	add	r3, r2
 8039726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803972a:	461a      	mov	r2, r3
 803972c:	2300      	movs	r3, #0
 803972e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8039730:	693b      	ldr	r3, [r7, #16]
 8039732:	015a      	lsls	r2, r3, #5
 8039734:	68fb      	ldr	r3, [r7, #12]
 8039736:	4413      	add	r3, r2
 8039738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803973c:	461a      	mov	r2, r3
 803973e:	2300      	movs	r3, #0
 8039740:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8039742:	693b      	ldr	r3, [r7, #16]
 8039744:	015a      	lsls	r2, r3, #5
 8039746:	68fb      	ldr	r3, [r7, #12]
 8039748:	4413      	add	r3, r2
 803974a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803974e:	461a      	mov	r2, r3
 8039750:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8039754:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8039756:	693b      	ldr	r3, [r7, #16]
 8039758:	3301      	adds	r3, #1
 803975a:	613b      	str	r3, [r7, #16]
 803975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803975e:	693a      	ldr	r2, [r7, #16]
 8039760:	429a      	cmp	r2, r3
 8039762:	d3b7      	bcc.n	80396d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8039764:	68fb      	ldr	r3, [r7, #12]
 8039766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803976a:	691b      	ldr	r3, [r3, #16]
 803976c:	68fa      	ldr	r2, [r7, #12]
 803976e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8039772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8039776:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8039778:	687b      	ldr	r3, [r7, #4]
 803977a:	2200      	movs	r2, #0
 803977c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 803977e:	687b      	ldr	r3, [r7, #4]
 8039780:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8039784:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8039786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039788:	2b00      	cmp	r3, #0
 803978a:	d105      	bne.n	8039798 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 803978c:	687b      	ldr	r3, [r7, #4]
 803978e:	699b      	ldr	r3, [r3, #24]
 8039790:	f043 0210 	orr.w	r2, r3, #16
 8039794:	687b      	ldr	r3, [r7, #4]
 8039796:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8039798:	687b      	ldr	r3, [r7, #4]
 803979a:	699a      	ldr	r2, [r3, #24]
 803979c:	4b0e      	ldr	r3, [pc, #56]	; (80397d8 <USB_DevInit+0x2b4>)
 803979e:	4313      	orrs	r3, r2
 80397a0:	687a      	ldr	r2, [r7, #4]
 80397a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80397a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80397a6:	2b00      	cmp	r3, #0
 80397a8:	d005      	beq.n	80397b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80397aa:	687b      	ldr	r3, [r7, #4]
 80397ac:	699b      	ldr	r3, [r3, #24]
 80397ae:	f043 0208 	orr.w	r2, r3, #8
 80397b2:	687b      	ldr	r3, [r7, #4]
 80397b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80397b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80397b8:	2b01      	cmp	r3, #1
 80397ba:	d105      	bne.n	80397c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80397bc:	687b      	ldr	r3, [r7, #4]
 80397be:	699a      	ldr	r2, [r3, #24]
 80397c0:	4b06      	ldr	r3, [pc, #24]	; (80397dc <USB_DevInit+0x2b8>)
 80397c2:	4313      	orrs	r3, r2
 80397c4:	687a      	ldr	r2, [r7, #4]
 80397c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80397c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80397ca:	4618      	mov	r0, r3
 80397cc:	3718      	adds	r7, #24
 80397ce:	46bd      	mov	sp, r7
 80397d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80397d4:	b004      	add	sp, #16
 80397d6:	4770      	bx	lr
 80397d8:	803c3800 	.word	0x803c3800
 80397dc:	40000004 	.word	0x40000004

080397e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80397e0:	b480      	push	{r7}
 80397e2:	b085      	sub	sp, #20
 80397e4:	af00      	add	r7, sp, #0
 80397e6:	6078      	str	r0, [r7, #4]
 80397e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80397ea:	2300      	movs	r3, #0
 80397ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80397ee:	68fb      	ldr	r3, [r7, #12]
 80397f0:	3301      	adds	r3, #1
 80397f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80397f4:	68fb      	ldr	r3, [r7, #12]
 80397f6:	4a13      	ldr	r2, [pc, #76]	; (8039844 <USB_FlushTxFifo+0x64>)
 80397f8:	4293      	cmp	r3, r2
 80397fa:	d901      	bls.n	8039800 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80397fc:	2303      	movs	r3, #3
 80397fe:	e01b      	b.n	8039838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8039800:	687b      	ldr	r3, [r7, #4]
 8039802:	691b      	ldr	r3, [r3, #16]
 8039804:	2b00      	cmp	r3, #0
 8039806:	daf2      	bge.n	80397ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8039808:	2300      	movs	r3, #0
 803980a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 803980c:	683b      	ldr	r3, [r7, #0]
 803980e:	019b      	lsls	r3, r3, #6
 8039810:	f043 0220 	orr.w	r2, r3, #32
 8039814:	687b      	ldr	r3, [r7, #4]
 8039816:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8039818:	68fb      	ldr	r3, [r7, #12]
 803981a:	3301      	adds	r3, #1
 803981c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803981e:	68fb      	ldr	r3, [r7, #12]
 8039820:	4a08      	ldr	r2, [pc, #32]	; (8039844 <USB_FlushTxFifo+0x64>)
 8039822:	4293      	cmp	r3, r2
 8039824:	d901      	bls.n	803982a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8039826:	2303      	movs	r3, #3
 8039828:	e006      	b.n	8039838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 803982a:	687b      	ldr	r3, [r7, #4]
 803982c:	691b      	ldr	r3, [r3, #16]
 803982e:	f003 0320 	and.w	r3, r3, #32
 8039832:	2b20      	cmp	r3, #32
 8039834:	d0f0      	beq.n	8039818 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8039836:	2300      	movs	r3, #0
}
 8039838:	4618      	mov	r0, r3
 803983a:	3714      	adds	r7, #20
 803983c:	46bd      	mov	sp, r7
 803983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039842:	4770      	bx	lr
 8039844:	00030d40 	.word	0x00030d40

08039848 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8039848:	b480      	push	{r7}
 803984a:	b085      	sub	sp, #20
 803984c:	af00      	add	r7, sp, #0
 803984e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8039850:	2300      	movs	r3, #0
 8039852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8039854:	68fb      	ldr	r3, [r7, #12]
 8039856:	3301      	adds	r3, #1
 8039858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803985a:	68fb      	ldr	r3, [r7, #12]
 803985c:	4a11      	ldr	r2, [pc, #68]	; (80398a4 <USB_FlushRxFifo+0x5c>)
 803985e:	4293      	cmp	r3, r2
 8039860:	d901      	bls.n	8039866 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8039862:	2303      	movs	r3, #3
 8039864:	e018      	b.n	8039898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8039866:	687b      	ldr	r3, [r7, #4]
 8039868:	691b      	ldr	r3, [r3, #16]
 803986a:	2b00      	cmp	r3, #0
 803986c:	daf2      	bge.n	8039854 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 803986e:	2300      	movs	r3, #0
 8039870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8039872:	687b      	ldr	r3, [r7, #4]
 8039874:	2210      	movs	r2, #16
 8039876:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8039878:	68fb      	ldr	r3, [r7, #12]
 803987a:	3301      	adds	r3, #1
 803987c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803987e:	68fb      	ldr	r3, [r7, #12]
 8039880:	4a08      	ldr	r2, [pc, #32]	; (80398a4 <USB_FlushRxFifo+0x5c>)
 8039882:	4293      	cmp	r3, r2
 8039884:	d901      	bls.n	803988a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8039886:	2303      	movs	r3, #3
 8039888:	e006      	b.n	8039898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 803988a:	687b      	ldr	r3, [r7, #4]
 803988c:	691b      	ldr	r3, [r3, #16]
 803988e:	f003 0310 	and.w	r3, r3, #16
 8039892:	2b10      	cmp	r3, #16
 8039894:	d0f0      	beq.n	8039878 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8039896:	2300      	movs	r3, #0
}
 8039898:	4618      	mov	r0, r3
 803989a:	3714      	adds	r7, #20
 803989c:	46bd      	mov	sp, r7
 803989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80398a2:	4770      	bx	lr
 80398a4:	00030d40 	.word	0x00030d40

080398a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80398a8:	b480      	push	{r7}
 80398aa:	b085      	sub	sp, #20
 80398ac:	af00      	add	r7, sp, #0
 80398ae:	6078      	str	r0, [r7, #4]
 80398b0:	460b      	mov	r3, r1
 80398b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80398b4:	687b      	ldr	r3, [r7, #4]
 80398b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80398b8:	68fb      	ldr	r3, [r7, #12]
 80398ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80398be:	681a      	ldr	r2, [r3, #0]
 80398c0:	78fb      	ldrb	r3, [r7, #3]
 80398c2:	68f9      	ldr	r1, [r7, #12]
 80398c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80398c8:	4313      	orrs	r3, r2
 80398ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80398cc:	2300      	movs	r3, #0
}
 80398ce:	4618      	mov	r0, r3
 80398d0:	3714      	adds	r7, #20
 80398d2:	46bd      	mov	sp, r7
 80398d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80398d8:	4770      	bx	lr

080398da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80398da:	b480      	push	{r7}
 80398dc:	b087      	sub	sp, #28
 80398de:	af00      	add	r7, sp, #0
 80398e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80398e2:	687b      	ldr	r3, [r7, #4]
 80398e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80398e6:	693b      	ldr	r3, [r7, #16]
 80398e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80398ec:	689b      	ldr	r3, [r3, #8]
 80398ee:	f003 0306 	and.w	r3, r3, #6
 80398f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80398f4:	68fb      	ldr	r3, [r7, #12]
 80398f6:	2b00      	cmp	r3, #0
 80398f8:	d102      	bne.n	8039900 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80398fa:	2300      	movs	r3, #0
 80398fc:	75fb      	strb	r3, [r7, #23]
 80398fe:	e00a      	b.n	8039916 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8039900:	68fb      	ldr	r3, [r7, #12]
 8039902:	2b02      	cmp	r3, #2
 8039904:	d002      	beq.n	803990c <USB_GetDevSpeed+0x32>
 8039906:	68fb      	ldr	r3, [r7, #12]
 8039908:	2b06      	cmp	r3, #6
 803990a:	d102      	bne.n	8039912 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 803990c:	2302      	movs	r3, #2
 803990e:	75fb      	strb	r3, [r7, #23]
 8039910:	e001      	b.n	8039916 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8039912:	230f      	movs	r3, #15
 8039914:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8039916:	7dfb      	ldrb	r3, [r7, #23]
}
 8039918:	4618      	mov	r0, r3
 803991a:	371c      	adds	r7, #28
 803991c:	46bd      	mov	sp, r7
 803991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039922:	4770      	bx	lr

08039924 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8039924:	b480      	push	{r7}
 8039926:	b085      	sub	sp, #20
 8039928:	af00      	add	r7, sp, #0
 803992a:	6078      	str	r0, [r7, #4]
 803992c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803992e:	687b      	ldr	r3, [r7, #4]
 8039930:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8039932:	683b      	ldr	r3, [r7, #0]
 8039934:	781b      	ldrb	r3, [r3, #0]
 8039936:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8039938:	683b      	ldr	r3, [r7, #0]
 803993a:	785b      	ldrb	r3, [r3, #1]
 803993c:	2b01      	cmp	r3, #1
 803993e:	d139      	bne.n	80399b4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8039940:	68fb      	ldr	r3, [r7, #12]
 8039942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039946:	69da      	ldr	r2, [r3, #28]
 8039948:	683b      	ldr	r3, [r7, #0]
 803994a:	781b      	ldrb	r3, [r3, #0]
 803994c:	f003 030f 	and.w	r3, r3, #15
 8039950:	2101      	movs	r1, #1
 8039952:	fa01 f303 	lsl.w	r3, r1, r3
 8039956:	b29b      	uxth	r3, r3
 8039958:	68f9      	ldr	r1, [r7, #12]
 803995a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803995e:	4313      	orrs	r3, r2
 8039960:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8039962:	68bb      	ldr	r3, [r7, #8]
 8039964:	015a      	lsls	r2, r3, #5
 8039966:	68fb      	ldr	r3, [r7, #12]
 8039968:	4413      	add	r3, r2
 803996a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803996e:	681b      	ldr	r3, [r3, #0]
 8039970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8039974:	2b00      	cmp	r3, #0
 8039976:	d153      	bne.n	8039a20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8039978:	68bb      	ldr	r3, [r7, #8]
 803997a:	015a      	lsls	r2, r3, #5
 803997c:	68fb      	ldr	r3, [r7, #12]
 803997e:	4413      	add	r3, r2
 8039980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039984:	681a      	ldr	r2, [r3, #0]
 8039986:	683b      	ldr	r3, [r7, #0]
 8039988:	68db      	ldr	r3, [r3, #12]
 803998a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 803998e:	683b      	ldr	r3, [r7, #0]
 8039990:	791b      	ldrb	r3, [r3, #4]
 8039992:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8039994:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8039996:	68bb      	ldr	r3, [r7, #8]
 8039998:	059b      	lsls	r3, r3, #22
 803999a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803999c:	431a      	orrs	r2, r3
 803999e:	68bb      	ldr	r3, [r7, #8]
 80399a0:	0159      	lsls	r1, r3, #5
 80399a2:	68fb      	ldr	r3, [r7, #12]
 80399a4:	440b      	add	r3, r1
 80399a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80399aa:	4619      	mov	r1, r3
 80399ac:	4b20      	ldr	r3, [pc, #128]	; (8039a30 <USB_ActivateEndpoint+0x10c>)
 80399ae:	4313      	orrs	r3, r2
 80399b0:	600b      	str	r3, [r1, #0]
 80399b2:	e035      	b.n	8039a20 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80399b4:	68fb      	ldr	r3, [r7, #12]
 80399b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80399ba:	69da      	ldr	r2, [r3, #28]
 80399bc:	683b      	ldr	r3, [r7, #0]
 80399be:	781b      	ldrb	r3, [r3, #0]
 80399c0:	f003 030f 	and.w	r3, r3, #15
 80399c4:	2101      	movs	r1, #1
 80399c6:	fa01 f303 	lsl.w	r3, r1, r3
 80399ca:	041b      	lsls	r3, r3, #16
 80399cc:	68f9      	ldr	r1, [r7, #12]
 80399ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80399d2:	4313      	orrs	r3, r2
 80399d4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80399d6:	68bb      	ldr	r3, [r7, #8]
 80399d8:	015a      	lsls	r2, r3, #5
 80399da:	68fb      	ldr	r3, [r7, #12]
 80399dc:	4413      	add	r3, r2
 80399de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80399e2:	681b      	ldr	r3, [r3, #0]
 80399e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80399e8:	2b00      	cmp	r3, #0
 80399ea:	d119      	bne.n	8039a20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80399ec:	68bb      	ldr	r3, [r7, #8]
 80399ee:	015a      	lsls	r2, r3, #5
 80399f0:	68fb      	ldr	r3, [r7, #12]
 80399f2:	4413      	add	r3, r2
 80399f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80399f8:	681a      	ldr	r2, [r3, #0]
 80399fa:	683b      	ldr	r3, [r7, #0]
 80399fc:	68db      	ldr	r3, [r3, #12]
 80399fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8039a02:	683b      	ldr	r3, [r7, #0]
 8039a04:	791b      	ldrb	r3, [r3, #4]
 8039a06:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8039a08:	430b      	orrs	r3, r1
 8039a0a:	431a      	orrs	r2, r3
 8039a0c:	68bb      	ldr	r3, [r7, #8]
 8039a0e:	0159      	lsls	r1, r3, #5
 8039a10:	68fb      	ldr	r3, [r7, #12]
 8039a12:	440b      	add	r3, r1
 8039a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039a18:	4619      	mov	r1, r3
 8039a1a:	4b05      	ldr	r3, [pc, #20]	; (8039a30 <USB_ActivateEndpoint+0x10c>)
 8039a1c:	4313      	orrs	r3, r2
 8039a1e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8039a20:	2300      	movs	r3, #0
}
 8039a22:	4618      	mov	r0, r3
 8039a24:	3714      	adds	r7, #20
 8039a26:	46bd      	mov	sp, r7
 8039a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039a2c:	4770      	bx	lr
 8039a2e:	bf00      	nop
 8039a30:	10008000 	.word	0x10008000

08039a34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8039a34:	b480      	push	{r7}
 8039a36:	b085      	sub	sp, #20
 8039a38:	af00      	add	r7, sp, #0
 8039a3a:	6078      	str	r0, [r7, #4]
 8039a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039a3e:	687b      	ldr	r3, [r7, #4]
 8039a40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8039a42:	683b      	ldr	r3, [r7, #0]
 8039a44:	781b      	ldrb	r3, [r3, #0]
 8039a46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8039a48:	683b      	ldr	r3, [r7, #0]
 8039a4a:	785b      	ldrb	r3, [r3, #1]
 8039a4c:	2b01      	cmp	r3, #1
 8039a4e:	d161      	bne.n	8039b14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8039a50:	68bb      	ldr	r3, [r7, #8]
 8039a52:	015a      	lsls	r2, r3, #5
 8039a54:	68fb      	ldr	r3, [r7, #12]
 8039a56:	4413      	add	r3, r2
 8039a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039a5c:	681b      	ldr	r3, [r3, #0]
 8039a5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8039a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8039a66:	d11f      	bne.n	8039aa8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8039a68:	68bb      	ldr	r3, [r7, #8]
 8039a6a:	015a      	lsls	r2, r3, #5
 8039a6c:	68fb      	ldr	r3, [r7, #12]
 8039a6e:	4413      	add	r3, r2
 8039a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039a74:	681b      	ldr	r3, [r3, #0]
 8039a76:	68ba      	ldr	r2, [r7, #8]
 8039a78:	0151      	lsls	r1, r2, #5
 8039a7a:	68fa      	ldr	r2, [r7, #12]
 8039a7c:	440a      	add	r2, r1
 8039a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039a82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8039a86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8039a88:	68bb      	ldr	r3, [r7, #8]
 8039a8a:	015a      	lsls	r2, r3, #5
 8039a8c:	68fb      	ldr	r3, [r7, #12]
 8039a8e:	4413      	add	r3, r2
 8039a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039a94:	681b      	ldr	r3, [r3, #0]
 8039a96:	68ba      	ldr	r2, [r7, #8]
 8039a98:	0151      	lsls	r1, r2, #5
 8039a9a:	68fa      	ldr	r2, [r7, #12]
 8039a9c:	440a      	add	r2, r1
 8039a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039aa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8039aa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8039aa8:	68fb      	ldr	r3, [r7, #12]
 8039aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8039ab0:	683b      	ldr	r3, [r7, #0]
 8039ab2:	781b      	ldrb	r3, [r3, #0]
 8039ab4:	f003 030f 	and.w	r3, r3, #15
 8039ab8:	2101      	movs	r1, #1
 8039aba:	fa01 f303 	lsl.w	r3, r1, r3
 8039abe:	b29b      	uxth	r3, r3
 8039ac0:	43db      	mvns	r3, r3
 8039ac2:	68f9      	ldr	r1, [r7, #12]
 8039ac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8039ac8:	4013      	ands	r3, r2
 8039aca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8039acc:	68fb      	ldr	r3, [r7, #12]
 8039ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039ad2:	69da      	ldr	r2, [r3, #28]
 8039ad4:	683b      	ldr	r3, [r7, #0]
 8039ad6:	781b      	ldrb	r3, [r3, #0]
 8039ad8:	f003 030f 	and.w	r3, r3, #15
 8039adc:	2101      	movs	r1, #1
 8039ade:	fa01 f303 	lsl.w	r3, r1, r3
 8039ae2:	b29b      	uxth	r3, r3
 8039ae4:	43db      	mvns	r3, r3
 8039ae6:	68f9      	ldr	r1, [r7, #12]
 8039ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8039aec:	4013      	ands	r3, r2
 8039aee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8039af0:	68bb      	ldr	r3, [r7, #8]
 8039af2:	015a      	lsls	r2, r3, #5
 8039af4:	68fb      	ldr	r3, [r7, #12]
 8039af6:	4413      	add	r3, r2
 8039af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039afc:	681a      	ldr	r2, [r3, #0]
 8039afe:	68bb      	ldr	r3, [r7, #8]
 8039b00:	0159      	lsls	r1, r3, #5
 8039b02:	68fb      	ldr	r3, [r7, #12]
 8039b04:	440b      	add	r3, r1
 8039b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039b0a:	4619      	mov	r1, r3
 8039b0c:	4b35      	ldr	r3, [pc, #212]	; (8039be4 <USB_DeactivateEndpoint+0x1b0>)
 8039b0e:	4013      	ands	r3, r2
 8039b10:	600b      	str	r3, [r1, #0]
 8039b12:	e060      	b.n	8039bd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8039b14:	68bb      	ldr	r3, [r7, #8]
 8039b16:	015a      	lsls	r2, r3, #5
 8039b18:	68fb      	ldr	r3, [r7, #12]
 8039b1a:	4413      	add	r3, r2
 8039b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039b20:	681b      	ldr	r3, [r3, #0]
 8039b22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8039b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8039b2a:	d11f      	bne.n	8039b6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8039b2c:	68bb      	ldr	r3, [r7, #8]
 8039b2e:	015a      	lsls	r2, r3, #5
 8039b30:	68fb      	ldr	r3, [r7, #12]
 8039b32:	4413      	add	r3, r2
 8039b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039b38:	681b      	ldr	r3, [r3, #0]
 8039b3a:	68ba      	ldr	r2, [r7, #8]
 8039b3c:	0151      	lsls	r1, r2, #5
 8039b3e:	68fa      	ldr	r2, [r7, #12]
 8039b40:	440a      	add	r2, r1
 8039b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039b46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8039b4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8039b4c:	68bb      	ldr	r3, [r7, #8]
 8039b4e:	015a      	lsls	r2, r3, #5
 8039b50:	68fb      	ldr	r3, [r7, #12]
 8039b52:	4413      	add	r3, r2
 8039b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039b58:	681b      	ldr	r3, [r3, #0]
 8039b5a:	68ba      	ldr	r2, [r7, #8]
 8039b5c:	0151      	lsls	r1, r2, #5
 8039b5e:	68fa      	ldr	r2, [r7, #12]
 8039b60:	440a      	add	r2, r1
 8039b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039b66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8039b6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8039b6c:	68fb      	ldr	r3, [r7, #12]
 8039b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8039b74:	683b      	ldr	r3, [r7, #0]
 8039b76:	781b      	ldrb	r3, [r3, #0]
 8039b78:	f003 030f 	and.w	r3, r3, #15
 8039b7c:	2101      	movs	r1, #1
 8039b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8039b82:	041b      	lsls	r3, r3, #16
 8039b84:	43db      	mvns	r3, r3
 8039b86:	68f9      	ldr	r1, [r7, #12]
 8039b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8039b8c:	4013      	ands	r3, r2
 8039b8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8039b90:	68fb      	ldr	r3, [r7, #12]
 8039b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039b96:	69da      	ldr	r2, [r3, #28]
 8039b98:	683b      	ldr	r3, [r7, #0]
 8039b9a:	781b      	ldrb	r3, [r3, #0]
 8039b9c:	f003 030f 	and.w	r3, r3, #15
 8039ba0:	2101      	movs	r1, #1
 8039ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8039ba6:	041b      	lsls	r3, r3, #16
 8039ba8:	43db      	mvns	r3, r3
 8039baa:	68f9      	ldr	r1, [r7, #12]
 8039bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8039bb0:	4013      	ands	r3, r2
 8039bb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8039bb4:	68bb      	ldr	r3, [r7, #8]
 8039bb6:	015a      	lsls	r2, r3, #5
 8039bb8:	68fb      	ldr	r3, [r7, #12]
 8039bba:	4413      	add	r3, r2
 8039bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039bc0:	681a      	ldr	r2, [r3, #0]
 8039bc2:	68bb      	ldr	r3, [r7, #8]
 8039bc4:	0159      	lsls	r1, r3, #5
 8039bc6:	68fb      	ldr	r3, [r7, #12]
 8039bc8:	440b      	add	r3, r1
 8039bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039bce:	4619      	mov	r1, r3
 8039bd0:	4b05      	ldr	r3, [pc, #20]	; (8039be8 <USB_DeactivateEndpoint+0x1b4>)
 8039bd2:	4013      	ands	r3, r2
 8039bd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8039bd6:	2300      	movs	r3, #0
}
 8039bd8:	4618      	mov	r0, r3
 8039bda:	3714      	adds	r7, #20
 8039bdc:	46bd      	mov	sp, r7
 8039bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039be2:	4770      	bx	lr
 8039be4:	ec337800 	.word	0xec337800
 8039be8:	eff37800 	.word	0xeff37800

08039bec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8039bec:	b580      	push	{r7, lr}
 8039bee:	b08a      	sub	sp, #40	; 0x28
 8039bf0:	af02      	add	r7, sp, #8
 8039bf2:	60f8      	str	r0, [r7, #12]
 8039bf4:	60b9      	str	r1, [r7, #8]
 8039bf6:	4613      	mov	r3, r2
 8039bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039bfa:	68fb      	ldr	r3, [r7, #12]
 8039bfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8039bfe:	68bb      	ldr	r3, [r7, #8]
 8039c00:	781b      	ldrb	r3, [r3, #0]
 8039c02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8039c04:	68bb      	ldr	r3, [r7, #8]
 8039c06:	785b      	ldrb	r3, [r3, #1]
 8039c08:	2b01      	cmp	r3, #1
 8039c0a:	f040 8163 	bne.w	8039ed4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8039c0e:	68bb      	ldr	r3, [r7, #8]
 8039c10:	699b      	ldr	r3, [r3, #24]
 8039c12:	2b00      	cmp	r3, #0
 8039c14:	d132      	bne.n	8039c7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8039c16:	69bb      	ldr	r3, [r7, #24]
 8039c18:	015a      	lsls	r2, r3, #5
 8039c1a:	69fb      	ldr	r3, [r7, #28]
 8039c1c:	4413      	add	r3, r2
 8039c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039c22:	691a      	ldr	r2, [r3, #16]
 8039c24:	69bb      	ldr	r3, [r7, #24]
 8039c26:	0159      	lsls	r1, r3, #5
 8039c28:	69fb      	ldr	r3, [r7, #28]
 8039c2a:	440b      	add	r3, r1
 8039c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039c30:	4619      	mov	r1, r3
 8039c32:	4ba5      	ldr	r3, [pc, #660]	; (8039ec8 <USB_EPStartXfer+0x2dc>)
 8039c34:	4013      	ands	r3, r2
 8039c36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8039c38:	69bb      	ldr	r3, [r7, #24]
 8039c3a:	015a      	lsls	r2, r3, #5
 8039c3c:	69fb      	ldr	r3, [r7, #28]
 8039c3e:	4413      	add	r3, r2
 8039c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039c44:	691b      	ldr	r3, [r3, #16]
 8039c46:	69ba      	ldr	r2, [r7, #24]
 8039c48:	0151      	lsls	r1, r2, #5
 8039c4a:	69fa      	ldr	r2, [r7, #28]
 8039c4c:	440a      	add	r2, r1
 8039c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039c52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8039c56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8039c58:	69bb      	ldr	r3, [r7, #24]
 8039c5a:	015a      	lsls	r2, r3, #5
 8039c5c:	69fb      	ldr	r3, [r7, #28]
 8039c5e:	4413      	add	r3, r2
 8039c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039c64:	691a      	ldr	r2, [r3, #16]
 8039c66:	69bb      	ldr	r3, [r7, #24]
 8039c68:	0159      	lsls	r1, r3, #5
 8039c6a:	69fb      	ldr	r3, [r7, #28]
 8039c6c:	440b      	add	r3, r1
 8039c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039c72:	4619      	mov	r1, r3
 8039c74:	4b95      	ldr	r3, [pc, #596]	; (8039ecc <USB_EPStartXfer+0x2e0>)
 8039c76:	4013      	ands	r3, r2
 8039c78:	610b      	str	r3, [r1, #16]
 8039c7a:	e074      	b.n	8039d66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8039c7c:	69bb      	ldr	r3, [r7, #24]
 8039c7e:	015a      	lsls	r2, r3, #5
 8039c80:	69fb      	ldr	r3, [r7, #28]
 8039c82:	4413      	add	r3, r2
 8039c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039c88:	691a      	ldr	r2, [r3, #16]
 8039c8a:	69bb      	ldr	r3, [r7, #24]
 8039c8c:	0159      	lsls	r1, r3, #5
 8039c8e:	69fb      	ldr	r3, [r7, #28]
 8039c90:	440b      	add	r3, r1
 8039c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039c96:	4619      	mov	r1, r3
 8039c98:	4b8c      	ldr	r3, [pc, #560]	; (8039ecc <USB_EPStartXfer+0x2e0>)
 8039c9a:	4013      	ands	r3, r2
 8039c9c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8039c9e:	69bb      	ldr	r3, [r7, #24]
 8039ca0:	015a      	lsls	r2, r3, #5
 8039ca2:	69fb      	ldr	r3, [r7, #28]
 8039ca4:	4413      	add	r3, r2
 8039ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039caa:	691a      	ldr	r2, [r3, #16]
 8039cac:	69bb      	ldr	r3, [r7, #24]
 8039cae:	0159      	lsls	r1, r3, #5
 8039cb0:	69fb      	ldr	r3, [r7, #28]
 8039cb2:	440b      	add	r3, r1
 8039cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039cb8:	4619      	mov	r1, r3
 8039cba:	4b83      	ldr	r3, [pc, #524]	; (8039ec8 <USB_EPStartXfer+0x2dc>)
 8039cbc:	4013      	ands	r3, r2
 8039cbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8039cc0:	69bb      	ldr	r3, [r7, #24]
 8039cc2:	015a      	lsls	r2, r3, #5
 8039cc4:	69fb      	ldr	r3, [r7, #28]
 8039cc6:	4413      	add	r3, r2
 8039cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039ccc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8039cce:	68bb      	ldr	r3, [r7, #8]
 8039cd0:	6999      	ldr	r1, [r3, #24]
 8039cd2:	68bb      	ldr	r3, [r7, #8]
 8039cd4:	68db      	ldr	r3, [r3, #12]
 8039cd6:	440b      	add	r3, r1
 8039cd8:	1e59      	subs	r1, r3, #1
 8039cda:	68bb      	ldr	r3, [r7, #8]
 8039cdc:	68db      	ldr	r3, [r3, #12]
 8039cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8039ce2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8039ce4:	4b7a      	ldr	r3, [pc, #488]	; (8039ed0 <USB_EPStartXfer+0x2e4>)
 8039ce6:	400b      	ands	r3, r1
 8039ce8:	69b9      	ldr	r1, [r7, #24]
 8039cea:	0148      	lsls	r0, r1, #5
 8039cec:	69f9      	ldr	r1, [r7, #28]
 8039cee:	4401      	add	r1, r0
 8039cf0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8039cf4:	4313      	orrs	r3, r2
 8039cf6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8039cf8:	69bb      	ldr	r3, [r7, #24]
 8039cfa:	015a      	lsls	r2, r3, #5
 8039cfc:	69fb      	ldr	r3, [r7, #28]
 8039cfe:	4413      	add	r3, r2
 8039d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039d04:	691a      	ldr	r2, [r3, #16]
 8039d06:	68bb      	ldr	r3, [r7, #8]
 8039d08:	699b      	ldr	r3, [r3, #24]
 8039d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8039d0e:	69b9      	ldr	r1, [r7, #24]
 8039d10:	0148      	lsls	r0, r1, #5
 8039d12:	69f9      	ldr	r1, [r7, #28]
 8039d14:	4401      	add	r1, r0
 8039d16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8039d1a:	4313      	orrs	r3, r2
 8039d1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8039d1e:	68bb      	ldr	r3, [r7, #8]
 8039d20:	791b      	ldrb	r3, [r3, #4]
 8039d22:	2b01      	cmp	r3, #1
 8039d24:	d11f      	bne.n	8039d66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8039d26:	69bb      	ldr	r3, [r7, #24]
 8039d28:	015a      	lsls	r2, r3, #5
 8039d2a:	69fb      	ldr	r3, [r7, #28]
 8039d2c:	4413      	add	r3, r2
 8039d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039d32:	691b      	ldr	r3, [r3, #16]
 8039d34:	69ba      	ldr	r2, [r7, #24]
 8039d36:	0151      	lsls	r1, r2, #5
 8039d38:	69fa      	ldr	r2, [r7, #28]
 8039d3a:	440a      	add	r2, r1
 8039d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039d40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8039d44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8039d46:	69bb      	ldr	r3, [r7, #24]
 8039d48:	015a      	lsls	r2, r3, #5
 8039d4a:	69fb      	ldr	r3, [r7, #28]
 8039d4c:	4413      	add	r3, r2
 8039d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039d52:	691b      	ldr	r3, [r3, #16]
 8039d54:	69ba      	ldr	r2, [r7, #24]
 8039d56:	0151      	lsls	r1, r2, #5
 8039d58:	69fa      	ldr	r2, [r7, #28]
 8039d5a:	440a      	add	r2, r1
 8039d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039d60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8039d64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8039d66:	79fb      	ldrb	r3, [r7, #7]
 8039d68:	2b01      	cmp	r3, #1
 8039d6a:	d14b      	bne.n	8039e04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8039d6c:	68bb      	ldr	r3, [r7, #8]
 8039d6e:	695b      	ldr	r3, [r3, #20]
 8039d70:	2b00      	cmp	r3, #0
 8039d72:	d009      	beq.n	8039d88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8039d74:	69bb      	ldr	r3, [r7, #24]
 8039d76:	015a      	lsls	r2, r3, #5
 8039d78:	69fb      	ldr	r3, [r7, #28]
 8039d7a:	4413      	add	r3, r2
 8039d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039d80:	461a      	mov	r2, r3
 8039d82:	68bb      	ldr	r3, [r7, #8]
 8039d84:	695b      	ldr	r3, [r3, #20]
 8039d86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8039d88:	68bb      	ldr	r3, [r7, #8]
 8039d8a:	791b      	ldrb	r3, [r3, #4]
 8039d8c:	2b01      	cmp	r3, #1
 8039d8e:	d128      	bne.n	8039de2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8039d90:	69fb      	ldr	r3, [r7, #28]
 8039d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039d96:	689b      	ldr	r3, [r3, #8]
 8039d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8039d9c:	2b00      	cmp	r3, #0
 8039d9e:	d110      	bne.n	8039dc2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8039da0:	69bb      	ldr	r3, [r7, #24]
 8039da2:	015a      	lsls	r2, r3, #5
 8039da4:	69fb      	ldr	r3, [r7, #28]
 8039da6:	4413      	add	r3, r2
 8039da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039dac:	681b      	ldr	r3, [r3, #0]
 8039dae:	69ba      	ldr	r2, [r7, #24]
 8039db0:	0151      	lsls	r1, r2, #5
 8039db2:	69fa      	ldr	r2, [r7, #28]
 8039db4:	440a      	add	r2, r1
 8039db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039dba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8039dbe:	6013      	str	r3, [r2, #0]
 8039dc0:	e00f      	b.n	8039de2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8039dc2:	69bb      	ldr	r3, [r7, #24]
 8039dc4:	015a      	lsls	r2, r3, #5
 8039dc6:	69fb      	ldr	r3, [r7, #28]
 8039dc8:	4413      	add	r3, r2
 8039dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039dce:	681b      	ldr	r3, [r3, #0]
 8039dd0:	69ba      	ldr	r2, [r7, #24]
 8039dd2:	0151      	lsls	r1, r2, #5
 8039dd4:	69fa      	ldr	r2, [r7, #28]
 8039dd6:	440a      	add	r2, r1
 8039dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8039de0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8039de2:	69bb      	ldr	r3, [r7, #24]
 8039de4:	015a      	lsls	r2, r3, #5
 8039de6:	69fb      	ldr	r3, [r7, #28]
 8039de8:	4413      	add	r3, r2
 8039dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039dee:	681b      	ldr	r3, [r3, #0]
 8039df0:	69ba      	ldr	r2, [r7, #24]
 8039df2:	0151      	lsls	r1, r2, #5
 8039df4:	69fa      	ldr	r2, [r7, #28]
 8039df6:	440a      	add	r2, r1
 8039df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039dfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8039e00:	6013      	str	r3, [r2, #0]
 8039e02:	e137      	b.n	803a074 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8039e04:	69bb      	ldr	r3, [r7, #24]
 8039e06:	015a      	lsls	r2, r3, #5
 8039e08:	69fb      	ldr	r3, [r7, #28]
 8039e0a:	4413      	add	r3, r2
 8039e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039e10:	681b      	ldr	r3, [r3, #0]
 8039e12:	69ba      	ldr	r2, [r7, #24]
 8039e14:	0151      	lsls	r1, r2, #5
 8039e16:	69fa      	ldr	r2, [r7, #28]
 8039e18:	440a      	add	r2, r1
 8039e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039e1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8039e22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8039e24:	68bb      	ldr	r3, [r7, #8]
 8039e26:	791b      	ldrb	r3, [r3, #4]
 8039e28:	2b01      	cmp	r3, #1
 8039e2a:	d015      	beq.n	8039e58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8039e2c:	68bb      	ldr	r3, [r7, #8]
 8039e2e:	699b      	ldr	r3, [r3, #24]
 8039e30:	2b00      	cmp	r3, #0
 8039e32:	f000 811f 	beq.w	803a074 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8039e36:	69fb      	ldr	r3, [r7, #28]
 8039e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8039e3e:	68bb      	ldr	r3, [r7, #8]
 8039e40:	781b      	ldrb	r3, [r3, #0]
 8039e42:	f003 030f 	and.w	r3, r3, #15
 8039e46:	2101      	movs	r1, #1
 8039e48:	fa01 f303 	lsl.w	r3, r1, r3
 8039e4c:	69f9      	ldr	r1, [r7, #28]
 8039e4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8039e52:	4313      	orrs	r3, r2
 8039e54:	634b      	str	r3, [r1, #52]	; 0x34
 8039e56:	e10d      	b.n	803a074 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8039e58:	69fb      	ldr	r3, [r7, #28]
 8039e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039e5e:	689b      	ldr	r3, [r3, #8]
 8039e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8039e64:	2b00      	cmp	r3, #0
 8039e66:	d110      	bne.n	8039e8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8039e68:	69bb      	ldr	r3, [r7, #24]
 8039e6a:	015a      	lsls	r2, r3, #5
 8039e6c:	69fb      	ldr	r3, [r7, #28]
 8039e6e:	4413      	add	r3, r2
 8039e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039e74:	681b      	ldr	r3, [r3, #0]
 8039e76:	69ba      	ldr	r2, [r7, #24]
 8039e78:	0151      	lsls	r1, r2, #5
 8039e7a:	69fa      	ldr	r2, [r7, #28]
 8039e7c:	440a      	add	r2, r1
 8039e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039e82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8039e86:	6013      	str	r3, [r2, #0]
 8039e88:	e00f      	b.n	8039eaa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8039e8a:	69bb      	ldr	r3, [r7, #24]
 8039e8c:	015a      	lsls	r2, r3, #5
 8039e8e:	69fb      	ldr	r3, [r7, #28]
 8039e90:	4413      	add	r3, r2
 8039e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039e96:	681b      	ldr	r3, [r3, #0]
 8039e98:	69ba      	ldr	r2, [r7, #24]
 8039e9a:	0151      	lsls	r1, r2, #5
 8039e9c:	69fa      	ldr	r2, [r7, #28]
 8039e9e:	440a      	add	r2, r1
 8039ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8039ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8039ea8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8039eaa:	68bb      	ldr	r3, [r7, #8]
 8039eac:	6919      	ldr	r1, [r3, #16]
 8039eae:	68bb      	ldr	r3, [r7, #8]
 8039eb0:	781a      	ldrb	r2, [r3, #0]
 8039eb2:	68bb      	ldr	r3, [r7, #8]
 8039eb4:	699b      	ldr	r3, [r3, #24]
 8039eb6:	b298      	uxth	r0, r3
 8039eb8:	79fb      	ldrb	r3, [r7, #7]
 8039eba:	9300      	str	r3, [sp, #0]
 8039ebc:	4603      	mov	r3, r0
 8039ebe:	68f8      	ldr	r0, [r7, #12]
 8039ec0:	f000 faea 	bl	803a498 <USB_WritePacket>
 8039ec4:	e0d6      	b.n	803a074 <USB_EPStartXfer+0x488>
 8039ec6:	bf00      	nop
 8039ec8:	e007ffff 	.word	0xe007ffff
 8039ecc:	fff80000 	.word	0xfff80000
 8039ed0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8039ed4:	69bb      	ldr	r3, [r7, #24]
 8039ed6:	015a      	lsls	r2, r3, #5
 8039ed8:	69fb      	ldr	r3, [r7, #28]
 8039eda:	4413      	add	r3, r2
 8039edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039ee0:	691a      	ldr	r2, [r3, #16]
 8039ee2:	69bb      	ldr	r3, [r7, #24]
 8039ee4:	0159      	lsls	r1, r3, #5
 8039ee6:	69fb      	ldr	r3, [r7, #28]
 8039ee8:	440b      	add	r3, r1
 8039eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039eee:	4619      	mov	r1, r3
 8039ef0:	4b63      	ldr	r3, [pc, #396]	; (803a080 <USB_EPStartXfer+0x494>)
 8039ef2:	4013      	ands	r3, r2
 8039ef4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8039ef6:	69bb      	ldr	r3, [r7, #24]
 8039ef8:	015a      	lsls	r2, r3, #5
 8039efa:	69fb      	ldr	r3, [r7, #28]
 8039efc:	4413      	add	r3, r2
 8039efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039f02:	691a      	ldr	r2, [r3, #16]
 8039f04:	69bb      	ldr	r3, [r7, #24]
 8039f06:	0159      	lsls	r1, r3, #5
 8039f08:	69fb      	ldr	r3, [r7, #28]
 8039f0a:	440b      	add	r3, r1
 8039f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039f10:	4619      	mov	r1, r3
 8039f12:	4b5c      	ldr	r3, [pc, #368]	; (803a084 <USB_EPStartXfer+0x498>)
 8039f14:	4013      	ands	r3, r2
 8039f16:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8039f18:	68bb      	ldr	r3, [r7, #8]
 8039f1a:	699b      	ldr	r3, [r3, #24]
 8039f1c:	2b00      	cmp	r3, #0
 8039f1e:	d123      	bne.n	8039f68 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8039f20:	69bb      	ldr	r3, [r7, #24]
 8039f22:	015a      	lsls	r2, r3, #5
 8039f24:	69fb      	ldr	r3, [r7, #28]
 8039f26:	4413      	add	r3, r2
 8039f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039f2c:	691a      	ldr	r2, [r3, #16]
 8039f2e:	68bb      	ldr	r3, [r7, #8]
 8039f30:	68db      	ldr	r3, [r3, #12]
 8039f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8039f36:	69b9      	ldr	r1, [r7, #24]
 8039f38:	0148      	lsls	r0, r1, #5
 8039f3a:	69f9      	ldr	r1, [r7, #28]
 8039f3c:	4401      	add	r1, r0
 8039f3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8039f42:	4313      	orrs	r3, r2
 8039f44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8039f46:	69bb      	ldr	r3, [r7, #24]
 8039f48:	015a      	lsls	r2, r3, #5
 8039f4a:	69fb      	ldr	r3, [r7, #28]
 8039f4c:	4413      	add	r3, r2
 8039f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039f52:	691b      	ldr	r3, [r3, #16]
 8039f54:	69ba      	ldr	r2, [r7, #24]
 8039f56:	0151      	lsls	r1, r2, #5
 8039f58:	69fa      	ldr	r2, [r7, #28]
 8039f5a:	440a      	add	r2, r1
 8039f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8039f64:	6113      	str	r3, [r2, #16]
 8039f66:	e037      	b.n	8039fd8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8039f68:	68bb      	ldr	r3, [r7, #8]
 8039f6a:	699a      	ldr	r2, [r3, #24]
 8039f6c:	68bb      	ldr	r3, [r7, #8]
 8039f6e:	68db      	ldr	r3, [r3, #12]
 8039f70:	4413      	add	r3, r2
 8039f72:	1e5a      	subs	r2, r3, #1
 8039f74:	68bb      	ldr	r3, [r7, #8]
 8039f76:	68db      	ldr	r3, [r3, #12]
 8039f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8039f7c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8039f7e:	68bb      	ldr	r3, [r7, #8]
 8039f80:	68db      	ldr	r3, [r3, #12]
 8039f82:	8afa      	ldrh	r2, [r7, #22]
 8039f84:	fb03 f202 	mul.w	r2, r3, r2
 8039f88:	68bb      	ldr	r3, [r7, #8]
 8039f8a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8039f8c:	69bb      	ldr	r3, [r7, #24]
 8039f8e:	015a      	lsls	r2, r3, #5
 8039f90:	69fb      	ldr	r3, [r7, #28]
 8039f92:	4413      	add	r3, r2
 8039f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039f98:	691a      	ldr	r2, [r3, #16]
 8039f9a:	8afb      	ldrh	r3, [r7, #22]
 8039f9c:	04d9      	lsls	r1, r3, #19
 8039f9e:	4b3a      	ldr	r3, [pc, #232]	; (803a088 <USB_EPStartXfer+0x49c>)
 8039fa0:	400b      	ands	r3, r1
 8039fa2:	69b9      	ldr	r1, [r7, #24]
 8039fa4:	0148      	lsls	r0, r1, #5
 8039fa6:	69f9      	ldr	r1, [r7, #28]
 8039fa8:	4401      	add	r1, r0
 8039faa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8039fae:	4313      	orrs	r3, r2
 8039fb0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8039fb2:	69bb      	ldr	r3, [r7, #24]
 8039fb4:	015a      	lsls	r2, r3, #5
 8039fb6:	69fb      	ldr	r3, [r7, #28]
 8039fb8:	4413      	add	r3, r2
 8039fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039fbe:	691a      	ldr	r2, [r3, #16]
 8039fc0:	68bb      	ldr	r3, [r7, #8]
 8039fc2:	69db      	ldr	r3, [r3, #28]
 8039fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8039fc8:	69b9      	ldr	r1, [r7, #24]
 8039fca:	0148      	lsls	r0, r1, #5
 8039fcc:	69f9      	ldr	r1, [r7, #28]
 8039fce:	4401      	add	r1, r0
 8039fd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8039fd4:	4313      	orrs	r3, r2
 8039fd6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8039fd8:	79fb      	ldrb	r3, [r7, #7]
 8039fda:	2b01      	cmp	r3, #1
 8039fdc:	d10d      	bne.n	8039ffa <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8039fde:	68bb      	ldr	r3, [r7, #8]
 8039fe0:	691b      	ldr	r3, [r3, #16]
 8039fe2:	2b00      	cmp	r3, #0
 8039fe4:	d009      	beq.n	8039ffa <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8039fe6:	68bb      	ldr	r3, [r7, #8]
 8039fe8:	6919      	ldr	r1, [r3, #16]
 8039fea:	69bb      	ldr	r3, [r7, #24]
 8039fec:	015a      	lsls	r2, r3, #5
 8039fee:	69fb      	ldr	r3, [r7, #28]
 8039ff0:	4413      	add	r3, r2
 8039ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039ff6:	460a      	mov	r2, r1
 8039ff8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8039ffa:	68bb      	ldr	r3, [r7, #8]
 8039ffc:	791b      	ldrb	r3, [r3, #4]
 8039ffe:	2b01      	cmp	r3, #1
 803a000:	d128      	bne.n	803a054 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803a002:	69fb      	ldr	r3, [r7, #28]
 803a004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a008:	689b      	ldr	r3, [r3, #8]
 803a00a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803a00e:	2b00      	cmp	r3, #0
 803a010:	d110      	bne.n	803a034 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 803a012:	69bb      	ldr	r3, [r7, #24]
 803a014:	015a      	lsls	r2, r3, #5
 803a016:	69fb      	ldr	r3, [r7, #28]
 803a018:	4413      	add	r3, r2
 803a01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a01e:	681b      	ldr	r3, [r3, #0]
 803a020:	69ba      	ldr	r2, [r7, #24]
 803a022:	0151      	lsls	r1, r2, #5
 803a024:	69fa      	ldr	r2, [r7, #28]
 803a026:	440a      	add	r2, r1
 803a028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a02c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803a030:	6013      	str	r3, [r2, #0]
 803a032:	e00f      	b.n	803a054 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 803a034:	69bb      	ldr	r3, [r7, #24]
 803a036:	015a      	lsls	r2, r3, #5
 803a038:	69fb      	ldr	r3, [r7, #28]
 803a03a:	4413      	add	r3, r2
 803a03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a040:	681b      	ldr	r3, [r3, #0]
 803a042:	69ba      	ldr	r2, [r7, #24]
 803a044:	0151      	lsls	r1, r2, #5
 803a046:	69fa      	ldr	r2, [r7, #28]
 803a048:	440a      	add	r2, r1
 803a04a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a04e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803a052:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 803a054:	69bb      	ldr	r3, [r7, #24]
 803a056:	015a      	lsls	r2, r3, #5
 803a058:	69fb      	ldr	r3, [r7, #28]
 803a05a:	4413      	add	r3, r2
 803a05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a060:	681b      	ldr	r3, [r3, #0]
 803a062:	69ba      	ldr	r2, [r7, #24]
 803a064:	0151      	lsls	r1, r2, #5
 803a066:	69fa      	ldr	r2, [r7, #28]
 803a068:	440a      	add	r2, r1
 803a06a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a06e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803a072:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803a074:	2300      	movs	r3, #0
}
 803a076:	4618      	mov	r0, r3
 803a078:	3720      	adds	r7, #32
 803a07a:	46bd      	mov	sp, r7
 803a07c:	bd80      	pop	{r7, pc}
 803a07e:	bf00      	nop
 803a080:	fff80000 	.word	0xfff80000
 803a084:	e007ffff 	.word	0xe007ffff
 803a088:	1ff80000 	.word	0x1ff80000

0803a08c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 803a08c:	b480      	push	{r7}
 803a08e:	b087      	sub	sp, #28
 803a090:	af00      	add	r7, sp, #0
 803a092:	60f8      	str	r0, [r7, #12]
 803a094:	60b9      	str	r1, [r7, #8]
 803a096:	4613      	mov	r3, r2
 803a098:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a09a:	68fb      	ldr	r3, [r7, #12]
 803a09c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 803a09e:	68bb      	ldr	r3, [r7, #8]
 803a0a0:	781b      	ldrb	r3, [r3, #0]
 803a0a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 803a0a4:	68bb      	ldr	r3, [r7, #8]
 803a0a6:	785b      	ldrb	r3, [r3, #1]
 803a0a8:	2b01      	cmp	r3, #1
 803a0aa:	f040 80ce 	bne.w	803a24a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 803a0ae:	68bb      	ldr	r3, [r7, #8]
 803a0b0:	699b      	ldr	r3, [r3, #24]
 803a0b2:	2b00      	cmp	r3, #0
 803a0b4:	d132      	bne.n	803a11c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803a0b6:	693b      	ldr	r3, [r7, #16]
 803a0b8:	015a      	lsls	r2, r3, #5
 803a0ba:	697b      	ldr	r3, [r7, #20]
 803a0bc:	4413      	add	r3, r2
 803a0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a0c2:	691a      	ldr	r2, [r3, #16]
 803a0c4:	693b      	ldr	r3, [r7, #16]
 803a0c6:	0159      	lsls	r1, r3, #5
 803a0c8:	697b      	ldr	r3, [r7, #20]
 803a0ca:	440b      	add	r3, r1
 803a0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a0d0:	4619      	mov	r1, r3
 803a0d2:	4b9a      	ldr	r3, [pc, #616]	; (803a33c <USB_EP0StartXfer+0x2b0>)
 803a0d4:	4013      	ands	r3, r2
 803a0d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803a0d8:	693b      	ldr	r3, [r7, #16]
 803a0da:	015a      	lsls	r2, r3, #5
 803a0dc:	697b      	ldr	r3, [r7, #20]
 803a0de:	4413      	add	r3, r2
 803a0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a0e4:	691b      	ldr	r3, [r3, #16]
 803a0e6:	693a      	ldr	r2, [r7, #16]
 803a0e8:	0151      	lsls	r1, r2, #5
 803a0ea:	697a      	ldr	r2, [r7, #20]
 803a0ec:	440a      	add	r2, r1
 803a0ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a0f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803a0f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803a0f8:	693b      	ldr	r3, [r7, #16]
 803a0fa:	015a      	lsls	r2, r3, #5
 803a0fc:	697b      	ldr	r3, [r7, #20]
 803a0fe:	4413      	add	r3, r2
 803a100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a104:	691a      	ldr	r2, [r3, #16]
 803a106:	693b      	ldr	r3, [r7, #16]
 803a108:	0159      	lsls	r1, r3, #5
 803a10a:	697b      	ldr	r3, [r7, #20]
 803a10c:	440b      	add	r3, r1
 803a10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a112:	4619      	mov	r1, r3
 803a114:	4b8a      	ldr	r3, [pc, #552]	; (803a340 <USB_EP0StartXfer+0x2b4>)
 803a116:	4013      	ands	r3, r2
 803a118:	610b      	str	r3, [r1, #16]
 803a11a:	e04e      	b.n	803a1ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803a11c:	693b      	ldr	r3, [r7, #16]
 803a11e:	015a      	lsls	r2, r3, #5
 803a120:	697b      	ldr	r3, [r7, #20]
 803a122:	4413      	add	r3, r2
 803a124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a128:	691a      	ldr	r2, [r3, #16]
 803a12a:	693b      	ldr	r3, [r7, #16]
 803a12c:	0159      	lsls	r1, r3, #5
 803a12e:	697b      	ldr	r3, [r7, #20]
 803a130:	440b      	add	r3, r1
 803a132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a136:	4619      	mov	r1, r3
 803a138:	4b81      	ldr	r3, [pc, #516]	; (803a340 <USB_EP0StartXfer+0x2b4>)
 803a13a:	4013      	ands	r3, r2
 803a13c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803a13e:	693b      	ldr	r3, [r7, #16]
 803a140:	015a      	lsls	r2, r3, #5
 803a142:	697b      	ldr	r3, [r7, #20]
 803a144:	4413      	add	r3, r2
 803a146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a14a:	691a      	ldr	r2, [r3, #16]
 803a14c:	693b      	ldr	r3, [r7, #16]
 803a14e:	0159      	lsls	r1, r3, #5
 803a150:	697b      	ldr	r3, [r7, #20]
 803a152:	440b      	add	r3, r1
 803a154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a158:	4619      	mov	r1, r3
 803a15a:	4b78      	ldr	r3, [pc, #480]	; (803a33c <USB_EP0StartXfer+0x2b0>)
 803a15c:	4013      	ands	r3, r2
 803a15e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 803a160:	68bb      	ldr	r3, [r7, #8]
 803a162:	699a      	ldr	r2, [r3, #24]
 803a164:	68bb      	ldr	r3, [r7, #8]
 803a166:	68db      	ldr	r3, [r3, #12]
 803a168:	429a      	cmp	r2, r3
 803a16a:	d903      	bls.n	803a174 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 803a16c:	68bb      	ldr	r3, [r7, #8]
 803a16e:	68da      	ldr	r2, [r3, #12]
 803a170:	68bb      	ldr	r3, [r7, #8]
 803a172:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803a174:	693b      	ldr	r3, [r7, #16]
 803a176:	015a      	lsls	r2, r3, #5
 803a178:	697b      	ldr	r3, [r7, #20]
 803a17a:	4413      	add	r3, r2
 803a17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a180:	691b      	ldr	r3, [r3, #16]
 803a182:	693a      	ldr	r2, [r7, #16]
 803a184:	0151      	lsls	r1, r2, #5
 803a186:	697a      	ldr	r2, [r7, #20]
 803a188:	440a      	add	r2, r1
 803a18a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a18e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803a192:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 803a194:	693b      	ldr	r3, [r7, #16]
 803a196:	015a      	lsls	r2, r3, #5
 803a198:	697b      	ldr	r3, [r7, #20]
 803a19a:	4413      	add	r3, r2
 803a19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a1a0:	691a      	ldr	r2, [r3, #16]
 803a1a2:	68bb      	ldr	r3, [r7, #8]
 803a1a4:	699b      	ldr	r3, [r3, #24]
 803a1a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803a1aa:	6939      	ldr	r1, [r7, #16]
 803a1ac:	0148      	lsls	r0, r1, #5
 803a1ae:	6979      	ldr	r1, [r7, #20]
 803a1b0:	4401      	add	r1, r0
 803a1b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803a1b6:	4313      	orrs	r3, r2
 803a1b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 803a1ba:	79fb      	ldrb	r3, [r7, #7]
 803a1bc:	2b01      	cmp	r3, #1
 803a1be:	d11e      	bne.n	803a1fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 803a1c0:	68bb      	ldr	r3, [r7, #8]
 803a1c2:	695b      	ldr	r3, [r3, #20]
 803a1c4:	2b00      	cmp	r3, #0
 803a1c6:	d009      	beq.n	803a1dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 803a1c8:	693b      	ldr	r3, [r7, #16]
 803a1ca:	015a      	lsls	r2, r3, #5
 803a1cc:	697b      	ldr	r3, [r7, #20]
 803a1ce:	4413      	add	r3, r2
 803a1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a1d4:	461a      	mov	r2, r3
 803a1d6:	68bb      	ldr	r3, [r7, #8]
 803a1d8:	695b      	ldr	r3, [r3, #20]
 803a1da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803a1dc:	693b      	ldr	r3, [r7, #16]
 803a1de:	015a      	lsls	r2, r3, #5
 803a1e0:	697b      	ldr	r3, [r7, #20]
 803a1e2:	4413      	add	r3, r2
 803a1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a1e8:	681b      	ldr	r3, [r3, #0]
 803a1ea:	693a      	ldr	r2, [r7, #16]
 803a1ec:	0151      	lsls	r1, r2, #5
 803a1ee:	697a      	ldr	r2, [r7, #20]
 803a1f0:	440a      	add	r2, r1
 803a1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a1f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803a1fa:	6013      	str	r3, [r2, #0]
 803a1fc:	e097      	b.n	803a32e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803a1fe:	693b      	ldr	r3, [r7, #16]
 803a200:	015a      	lsls	r2, r3, #5
 803a202:	697b      	ldr	r3, [r7, #20]
 803a204:	4413      	add	r3, r2
 803a206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a20a:	681b      	ldr	r3, [r3, #0]
 803a20c:	693a      	ldr	r2, [r7, #16]
 803a20e:	0151      	lsls	r1, r2, #5
 803a210:	697a      	ldr	r2, [r7, #20]
 803a212:	440a      	add	r2, r1
 803a214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a218:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803a21c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 803a21e:	68bb      	ldr	r3, [r7, #8]
 803a220:	699b      	ldr	r3, [r3, #24]
 803a222:	2b00      	cmp	r3, #0
 803a224:	f000 8083 	beq.w	803a32e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803a228:	697b      	ldr	r3, [r7, #20]
 803a22a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a22e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803a230:	68bb      	ldr	r3, [r7, #8]
 803a232:	781b      	ldrb	r3, [r3, #0]
 803a234:	f003 030f 	and.w	r3, r3, #15
 803a238:	2101      	movs	r1, #1
 803a23a:	fa01 f303 	lsl.w	r3, r1, r3
 803a23e:	6979      	ldr	r1, [r7, #20]
 803a240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803a244:	4313      	orrs	r3, r2
 803a246:	634b      	str	r3, [r1, #52]	; 0x34
 803a248:	e071      	b.n	803a32e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 803a24a:	693b      	ldr	r3, [r7, #16]
 803a24c:	015a      	lsls	r2, r3, #5
 803a24e:	697b      	ldr	r3, [r7, #20]
 803a250:	4413      	add	r3, r2
 803a252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a256:	691a      	ldr	r2, [r3, #16]
 803a258:	693b      	ldr	r3, [r7, #16]
 803a25a:	0159      	lsls	r1, r3, #5
 803a25c:	697b      	ldr	r3, [r7, #20]
 803a25e:	440b      	add	r3, r1
 803a260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a264:	4619      	mov	r1, r3
 803a266:	4b36      	ldr	r3, [pc, #216]	; (803a340 <USB_EP0StartXfer+0x2b4>)
 803a268:	4013      	ands	r3, r2
 803a26a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 803a26c:	693b      	ldr	r3, [r7, #16]
 803a26e:	015a      	lsls	r2, r3, #5
 803a270:	697b      	ldr	r3, [r7, #20]
 803a272:	4413      	add	r3, r2
 803a274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a278:	691a      	ldr	r2, [r3, #16]
 803a27a:	693b      	ldr	r3, [r7, #16]
 803a27c:	0159      	lsls	r1, r3, #5
 803a27e:	697b      	ldr	r3, [r7, #20]
 803a280:	440b      	add	r3, r1
 803a282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a286:	4619      	mov	r1, r3
 803a288:	4b2c      	ldr	r3, [pc, #176]	; (803a33c <USB_EP0StartXfer+0x2b0>)
 803a28a:	4013      	ands	r3, r2
 803a28c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 803a28e:	68bb      	ldr	r3, [r7, #8]
 803a290:	699b      	ldr	r3, [r3, #24]
 803a292:	2b00      	cmp	r3, #0
 803a294:	d003      	beq.n	803a29e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 803a296:	68bb      	ldr	r3, [r7, #8]
 803a298:	68da      	ldr	r2, [r3, #12]
 803a29a:	68bb      	ldr	r3, [r7, #8]
 803a29c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 803a29e:	68bb      	ldr	r3, [r7, #8]
 803a2a0:	68da      	ldr	r2, [r3, #12]
 803a2a2:	68bb      	ldr	r3, [r7, #8]
 803a2a4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803a2a6:	693b      	ldr	r3, [r7, #16]
 803a2a8:	015a      	lsls	r2, r3, #5
 803a2aa:	697b      	ldr	r3, [r7, #20]
 803a2ac:	4413      	add	r3, r2
 803a2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a2b2:	691b      	ldr	r3, [r3, #16]
 803a2b4:	693a      	ldr	r2, [r7, #16]
 803a2b6:	0151      	lsls	r1, r2, #5
 803a2b8:	697a      	ldr	r2, [r7, #20]
 803a2ba:	440a      	add	r2, r1
 803a2bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a2c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803a2c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 803a2c6:	693b      	ldr	r3, [r7, #16]
 803a2c8:	015a      	lsls	r2, r3, #5
 803a2ca:	697b      	ldr	r3, [r7, #20]
 803a2cc:	4413      	add	r3, r2
 803a2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a2d2:	691a      	ldr	r2, [r3, #16]
 803a2d4:	68bb      	ldr	r3, [r7, #8]
 803a2d6:	69db      	ldr	r3, [r3, #28]
 803a2d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803a2dc:	6939      	ldr	r1, [r7, #16]
 803a2de:	0148      	lsls	r0, r1, #5
 803a2e0:	6979      	ldr	r1, [r7, #20]
 803a2e2:	4401      	add	r1, r0
 803a2e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803a2e8:	4313      	orrs	r3, r2
 803a2ea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 803a2ec:	79fb      	ldrb	r3, [r7, #7]
 803a2ee:	2b01      	cmp	r3, #1
 803a2f0:	d10d      	bne.n	803a30e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 803a2f2:	68bb      	ldr	r3, [r7, #8]
 803a2f4:	691b      	ldr	r3, [r3, #16]
 803a2f6:	2b00      	cmp	r3, #0
 803a2f8:	d009      	beq.n	803a30e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 803a2fa:	68bb      	ldr	r3, [r7, #8]
 803a2fc:	6919      	ldr	r1, [r3, #16]
 803a2fe:	693b      	ldr	r3, [r7, #16]
 803a300:	015a      	lsls	r2, r3, #5
 803a302:	697b      	ldr	r3, [r7, #20]
 803a304:	4413      	add	r3, r2
 803a306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a30a:	460a      	mov	r2, r1
 803a30c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 803a30e:	693b      	ldr	r3, [r7, #16]
 803a310:	015a      	lsls	r2, r3, #5
 803a312:	697b      	ldr	r3, [r7, #20]
 803a314:	4413      	add	r3, r2
 803a316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a31a:	681b      	ldr	r3, [r3, #0]
 803a31c:	693a      	ldr	r2, [r7, #16]
 803a31e:	0151      	lsls	r1, r2, #5
 803a320:	697a      	ldr	r2, [r7, #20]
 803a322:	440a      	add	r2, r1
 803a324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a328:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803a32c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803a32e:	2300      	movs	r3, #0
}
 803a330:	4618      	mov	r0, r3
 803a332:	371c      	adds	r7, #28
 803a334:	46bd      	mov	sp, r7
 803a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a33a:	4770      	bx	lr
 803a33c:	e007ffff 	.word	0xe007ffff
 803a340:	fff80000 	.word	0xfff80000

0803a344 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803a344:	b480      	push	{r7}
 803a346:	b087      	sub	sp, #28
 803a348:	af00      	add	r7, sp, #0
 803a34a:	6078      	str	r0, [r7, #4]
 803a34c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 803a34e:	2300      	movs	r3, #0
 803a350:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 803a352:	2300      	movs	r3, #0
 803a354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a356:	687b      	ldr	r3, [r7, #4]
 803a358:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 803a35a:	683b      	ldr	r3, [r7, #0]
 803a35c:	785b      	ldrb	r3, [r3, #1]
 803a35e:	2b01      	cmp	r3, #1
 803a360:	d14a      	bne.n	803a3f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 803a362:	683b      	ldr	r3, [r7, #0]
 803a364:	781b      	ldrb	r3, [r3, #0]
 803a366:	015a      	lsls	r2, r3, #5
 803a368:	693b      	ldr	r3, [r7, #16]
 803a36a:	4413      	add	r3, r2
 803a36c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a370:	681b      	ldr	r3, [r3, #0]
 803a372:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803a376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803a37a:	f040 8086 	bne.w	803a48a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 803a37e:	683b      	ldr	r3, [r7, #0]
 803a380:	781b      	ldrb	r3, [r3, #0]
 803a382:	015a      	lsls	r2, r3, #5
 803a384:	693b      	ldr	r3, [r7, #16]
 803a386:	4413      	add	r3, r2
 803a388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a38c:	681b      	ldr	r3, [r3, #0]
 803a38e:	683a      	ldr	r2, [r7, #0]
 803a390:	7812      	ldrb	r2, [r2, #0]
 803a392:	0151      	lsls	r1, r2, #5
 803a394:	693a      	ldr	r2, [r7, #16]
 803a396:	440a      	add	r2, r1
 803a398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a39c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803a3a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 803a3a2:	683b      	ldr	r3, [r7, #0]
 803a3a4:	781b      	ldrb	r3, [r3, #0]
 803a3a6:	015a      	lsls	r2, r3, #5
 803a3a8:	693b      	ldr	r3, [r7, #16]
 803a3aa:	4413      	add	r3, r2
 803a3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a3b0:	681b      	ldr	r3, [r3, #0]
 803a3b2:	683a      	ldr	r2, [r7, #0]
 803a3b4:	7812      	ldrb	r2, [r2, #0]
 803a3b6:	0151      	lsls	r1, r2, #5
 803a3b8:	693a      	ldr	r2, [r7, #16]
 803a3ba:	440a      	add	r2, r1
 803a3bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a3c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803a3c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 803a3c6:	68fb      	ldr	r3, [r7, #12]
 803a3c8:	3301      	adds	r3, #1
 803a3ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 803a3cc:	68fb      	ldr	r3, [r7, #12]
 803a3ce:	f242 7210 	movw	r2, #10000	; 0x2710
 803a3d2:	4293      	cmp	r3, r2
 803a3d4:	d902      	bls.n	803a3dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 803a3d6:	2301      	movs	r3, #1
 803a3d8:	75fb      	strb	r3, [r7, #23]
          break;
 803a3da:	e056      	b.n	803a48a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 803a3dc:	683b      	ldr	r3, [r7, #0]
 803a3de:	781b      	ldrb	r3, [r3, #0]
 803a3e0:	015a      	lsls	r2, r3, #5
 803a3e2:	693b      	ldr	r3, [r7, #16]
 803a3e4:	4413      	add	r3, r2
 803a3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a3ea:	681b      	ldr	r3, [r3, #0]
 803a3ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803a3f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803a3f4:	d0e7      	beq.n	803a3c6 <USB_EPStopXfer+0x82>
 803a3f6:	e048      	b.n	803a48a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803a3f8:	683b      	ldr	r3, [r7, #0]
 803a3fa:	781b      	ldrb	r3, [r3, #0]
 803a3fc:	015a      	lsls	r2, r3, #5
 803a3fe:	693b      	ldr	r3, [r7, #16]
 803a400:	4413      	add	r3, r2
 803a402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a406:	681b      	ldr	r3, [r3, #0]
 803a408:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803a40c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803a410:	d13b      	bne.n	803a48a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 803a412:	683b      	ldr	r3, [r7, #0]
 803a414:	781b      	ldrb	r3, [r3, #0]
 803a416:	015a      	lsls	r2, r3, #5
 803a418:	693b      	ldr	r3, [r7, #16]
 803a41a:	4413      	add	r3, r2
 803a41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a420:	681b      	ldr	r3, [r3, #0]
 803a422:	683a      	ldr	r2, [r7, #0]
 803a424:	7812      	ldrb	r2, [r2, #0]
 803a426:	0151      	lsls	r1, r2, #5
 803a428:	693a      	ldr	r2, [r7, #16]
 803a42a:	440a      	add	r2, r1
 803a42c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a430:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803a434:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 803a436:	683b      	ldr	r3, [r7, #0]
 803a438:	781b      	ldrb	r3, [r3, #0]
 803a43a:	015a      	lsls	r2, r3, #5
 803a43c:	693b      	ldr	r3, [r7, #16]
 803a43e:	4413      	add	r3, r2
 803a440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a444:	681b      	ldr	r3, [r3, #0]
 803a446:	683a      	ldr	r2, [r7, #0]
 803a448:	7812      	ldrb	r2, [r2, #0]
 803a44a:	0151      	lsls	r1, r2, #5
 803a44c:	693a      	ldr	r2, [r7, #16]
 803a44e:	440a      	add	r2, r1
 803a450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803a458:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 803a45a:	68fb      	ldr	r3, [r7, #12]
 803a45c:	3301      	adds	r3, #1
 803a45e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 803a460:	68fb      	ldr	r3, [r7, #12]
 803a462:	f242 7210 	movw	r2, #10000	; 0x2710
 803a466:	4293      	cmp	r3, r2
 803a468:	d902      	bls.n	803a470 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 803a46a:	2301      	movs	r3, #1
 803a46c:	75fb      	strb	r3, [r7, #23]
          break;
 803a46e:	e00c      	b.n	803a48a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 803a470:	683b      	ldr	r3, [r7, #0]
 803a472:	781b      	ldrb	r3, [r3, #0]
 803a474:	015a      	lsls	r2, r3, #5
 803a476:	693b      	ldr	r3, [r7, #16]
 803a478:	4413      	add	r3, r2
 803a47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a47e:	681b      	ldr	r3, [r3, #0]
 803a480:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803a484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803a488:	d0e7      	beq.n	803a45a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 803a48a:	7dfb      	ldrb	r3, [r7, #23]
}
 803a48c:	4618      	mov	r0, r3
 803a48e:	371c      	adds	r7, #28
 803a490:	46bd      	mov	sp, r7
 803a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a496:	4770      	bx	lr

0803a498 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 803a498:	b480      	push	{r7}
 803a49a:	b089      	sub	sp, #36	; 0x24
 803a49c:	af00      	add	r7, sp, #0
 803a49e:	60f8      	str	r0, [r7, #12]
 803a4a0:	60b9      	str	r1, [r7, #8]
 803a4a2:	4611      	mov	r1, r2
 803a4a4:	461a      	mov	r2, r3
 803a4a6:	460b      	mov	r3, r1
 803a4a8:	71fb      	strb	r3, [r7, #7]
 803a4aa:	4613      	mov	r3, r2
 803a4ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a4ae:	68fb      	ldr	r3, [r7, #12]
 803a4b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 803a4b2:	68bb      	ldr	r3, [r7, #8]
 803a4b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 803a4b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 803a4ba:	2b00      	cmp	r3, #0
 803a4bc:	d123      	bne.n	803a506 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 803a4be:	88bb      	ldrh	r3, [r7, #4]
 803a4c0:	3303      	adds	r3, #3
 803a4c2:	089b      	lsrs	r3, r3, #2
 803a4c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 803a4c6:	2300      	movs	r3, #0
 803a4c8:	61bb      	str	r3, [r7, #24]
 803a4ca:	e018      	b.n	803a4fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 803a4cc:	79fb      	ldrb	r3, [r7, #7]
 803a4ce:	031a      	lsls	r2, r3, #12
 803a4d0:	697b      	ldr	r3, [r7, #20]
 803a4d2:	4413      	add	r3, r2
 803a4d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803a4d8:	461a      	mov	r2, r3
 803a4da:	69fb      	ldr	r3, [r7, #28]
 803a4dc:	681b      	ldr	r3, [r3, #0]
 803a4de:	6013      	str	r3, [r2, #0]
      pSrc++;
 803a4e0:	69fb      	ldr	r3, [r7, #28]
 803a4e2:	3301      	adds	r3, #1
 803a4e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 803a4e6:	69fb      	ldr	r3, [r7, #28]
 803a4e8:	3301      	adds	r3, #1
 803a4ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 803a4ec:	69fb      	ldr	r3, [r7, #28]
 803a4ee:	3301      	adds	r3, #1
 803a4f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 803a4f2:	69fb      	ldr	r3, [r7, #28]
 803a4f4:	3301      	adds	r3, #1
 803a4f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 803a4f8:	69bb      	ldr	r3, [r7, #24]
 803a4fa:	3301      	adds	r3, #1
 803a4fc:	61bb      	str	r3, [r7, #24]
 803a4fe:	69ba      	ldr	r2, [r7, #24]
 803a500:	693b      	ldr	r3, [r7, #16]
 803a502:	429a      	cmp	r2, r3
 803a504:	d3e2      	bcc.n	803a4cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 803a506:	2300      	movs	r3, #0
}
 803a508:	4618      	mov	r0, r3
 803a50a:	3724      	adds	r7, #36	; 0x24
 803a50c:	46bd      	mov	sp, r7
 803a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a512:	4770      	bx	lr

0803a514 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 803a514:	b480      	push	{r7}
 803a516:	b08b      	sub	sp, #44	; 0x2c
 803a518:	af00      	add	r7, sp, #0
 803a51a:	60f8      	str	r0, [r7, #12]
 803a51c:	60b9      	str	r1, [r7, #8]
 803a51e:	4613      	mov	r3, r2
 803a520:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a522:	68fb      	ldr	r3, [r7, #12]
 803a524:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 803a526:	68bb      	ldr	r3, [r7, #8]
 803a528:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 803a52a:	88fb      	ldrh	r3, [r7, #6]
 803a52c:	089b      	lsrs	r3, r3, #2
 803a52e:	b29b      	uxth	r3, r3
 803a530:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 803a532:	88fb      	ldrh	r3, [r7, #6]
 803a534:	f003 0303 	and.w	r3, r3, #3
 803a538:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 803a53a:	2300      	movs	r3, #0
 803a53c:	623b      	str	r3, [r7, #32]
 803a53e:	e014      	b.n	803a56a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 803a540:	69bb      	ldr	r3, [r7, #24]
 803a542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803a546:	681a      	ldr	r2, [r3, #0]
 803a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a54a:	601a      	str	r2, [r3, #0]
    pDest++;
 803a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a54e:	3301      	adds	r3, #1
 803a550:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a554:	3301      	adds	r3, #1
 803a556:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a55a:	3301      	adds	r3, #1
 803a55c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a560:	3301      	adds	r3, #1
 803a562:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 803a564:	6a3b      	ldr	r3, [r7, #32]
 803a566:	3301      	adds	r3, #1
 803a568:	623b      	str	r3, [r7, #32]
 803a56a:	6a3a      	ldr	r2, [r7, #32]
 803a56c:	697b      	ldr	r3, [r7, #20]
 803a56e:	429a      	cmp	r2, r3
 803a570:	d3e6      	bcc.n	803a540 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 803a572:	8bfb      	ldrh	r3, [r7, #30]
 803a574:	2b00      	cmp	r3, #0
 803a576:	d01e      	beq.n	803a5b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 803a578:	2300      	movs	r3, #0
 803a57a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 803a57c:	69bb      	ldr	r3, [r7, #24]
 803a57e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803a582:	461a      	mov	r2, r3
 803a584:	f107 0310 	add.w	r3, r7, #16
 803a588:	6812      	ldr	r2, [r2, #0]
 803a58a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 803a58c:	693a      	ldr	r2, [r7, #16]
 803a58e:	6a3b      	ldr	r3, [r7, #32]
 803a590:	b2db      	uxtb	r3, r3
 803a592:	00db      	lsls	r3, r3, #3
 803a594:	fa22 f303 	lsr.w	r3, r2, r3
 803a598:	b2da      	uxtb	r2, r3
 803a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a59c:	701a      	strb	r2, [r3, #0]
      i++;
 803a59e:	6a3b      	ldr	r3, [r7, #32]
 803a5a0:	3301      	adds	r3, #1
 803a5a2:	623b      	str	r3, [r7, #32]
      pDest++;
 803a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a5a6:	3301      	adds	r3, #1
 803a5a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 803a5aa:	8bfb      	ldrh	r3, [r7, #30]
 803a5ac:	3b01      	subs	r3, #1
 803a5ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 803a5b0:	8bfb      	ldrh	r3, [r7, #30]
 803a5b2:	2b00      	cmp	r3, #0
 803a5b4:	d1ea      	bne.n	803a58c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 803a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 803a5b8:	4618      	mov	r0, r3
 803a5ba:	372c      	adds	r7, #44	; 0x2c
 803a5bc:	46bd      	mov	sp, r7
 803a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a5c2:	4770      	bx	lr

0803a5c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803a5c4:	b480      	push	{r7}
 803a5c6:	b085      	sub	sp, #20
 803a5c8:	af00      	add	r7, sp, #0
 803a5ca:	6078      	str	r0, [r7, #4]
 803a5cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a5ce:	687b      	ldr	r3, [r7, #4]
 803a5d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803a5d2:	683b      	ldr	r3, [r7, #0]
 803a5d4:	781b      	ldrb	r3, [r3, #0]
 803a5d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803a5d8:	683b      	ldr	r3, [r7, #0]
 803a5da:	785b      	ldrb	r3, [r3, #1]
 803a5dc:	2b01      	cmp	r3, #1
 803a5de:	d12c      	bne.n	803a63a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 803a5e0:	68bb      	ldr	r3, [r7, #8]
 803a5e2:	015a      	lsls	r2, r3, #5
 803a5e4:	68fb      	ldr	r3, [r7, #12]
 803a5e6:	4413      	add	r3, r2
 803a5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a5ec:	681b      	ldr	r3, [r3, #0]
 803a5ee:	2b00      	cmp	r3, #0
 803a5f0:	db12      	blt.n	803a618 <USB_EPSetStall+0x54>
 803a5f2:	68bb      	ldr	r3, [r7, #8]
 803a5f4:	2b00      	cmp	r3, #0
 803a5f6:	d00f      	beq.n	803a618 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 803a5f8:	68bb      	ldr	r3, [r7, #8]
 803a5fa:	015a      	lsls	r2, r3, #5
 803a5fc:	68fb      	ldr	r3, [r7, #12]
 803a5fe:	4413      	add	r3, r2
 803a600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a604:	681b      	ldr	r3, [r3, #0]
 803a606:	68ba      	ldr	r2, [r7, #8]
 803a608:	0151      	lsls	r1, r2, #5
 803a60a:	68fa      	ldr	r2, [r7, #12]
 803a60c:	440a      	add	r2, r1
 803a60e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a612:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 803a616:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 803a618:	68bb      	ldr	r3, [r7, #8]
 803a61a:	015a      	lsls	r2, r3, #5
 803a61c:	68fb      	ldr	r3, [r7, #12]
 803a61e:	4413      	add	r3, r2
 803a620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a624:	681b      	ldr	r3, [r3, #0]
 803a626:	68ba      	ldr	r2, [r7, #8]
 803a628:	0151      	lsls	r1, r2, #5
 803a62a:	68fa      	ldr	r2, [r7, #12]
 803a62c:	440a      	add	r2, r1
 803a62e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 803a636:	6013      	str	r3, [r2, #0]
 803a638:	e02b      	b.n	803a692 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 803a63a:	68bb      	ldr	r3, [r7, #8]
 803a63c:	015a      	lsls	r2, r3, #5
 803a63e:	68fb      	ldr	r3, [r7, #12]
 803a640:	4413      	add	r3, r2
 803a642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a646:	681b      	ldr	r3, [r3, #0]
 803a648:	2b00      	cmp	r3, #0
 803a64a:	db12      	blt.n	803a672 <USB_EPSetStall+0xae>
 803a64c:	68bb      	ldr	r3, [r7, #8]
 803a64e:	2b00      	cmp	r3, #0
 803a650:	d00f      	beq.n	803a672 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 803a652:	68bb      	ldr	r3, [r7, #8]
 803a654:	015a      	lsls	r2, r3, #5
 803a656:	68fb      	ldr	r3, [r7, #12]
 803a658:	4413      	add	r3, r2
 803a65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a65e:	681b      	ldr	r3, [r3, #0]
 803a660:	68ba      	ldr	r2, [r7, #8]
 803a662:	0151      	lsls	r1, r2, #5
 803a664:	68fa      	ldr	r2, [r7, #12]
 803a666:	440a      	add	r2, r1
 803a668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a66c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 803a670:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 803a672:	68bb      	ldr	r3, [r7, #8]
 803a674:	015a      	lsls	r2, r3, #5
 803a676:	68fb      	ldr	r3, [r7, #12]
 803a678:	4413      	add	r3, r2
 803a67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a67e:	681b      	ldr	r3, [r3, #0]
 803a680:	68ba      	ldr	r2, [r7, #8]
 803a682:	0151      	lsls	r1, r2, #5
 803a684:	68fa      	ldr	r2, [r7, #12]
 803a686:	440a      	add	r2, r1
 803a688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a68c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 803a690:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803a692:	2300      	movs	r3, #0
}
 803a694:	4618      	mov	r0, r3
 803a696:	3714      	adds	r7, #20
 803a698:	46bd      	mov	sp, r7
 803a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a69e:	4770      	bx	lr

0803a6a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803a6a0:	b480      	push	{r7}
 803a6a2:	b085      	sub	sp, #20
 803a6a4:	af00      	add	r7, sp, #0
 803a6a6:	6078      	str	r0, [r7, #4]
 803a6a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a6aa:	687b      	ldr	r3, [r7, #4]
 803a6ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803a6ae:	683b      	ldr	r3, [r7, #0]
 803a6b0:	781b      	ldrb	r3, [r3, #0]
 803a6b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803a6b4:	683b      	ldr	r3, [r7, #0]
 803a6b6:	785b      	ldrb	r3, [r3, #1]
 803a6b8:	2b01      	cmp	r3, #1
 803a6ba:	d128      	bne.n	803a70e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 803a6bc:	68bb      	ldr	r3, [r7, #8]
 803a6be:	015a      	lsls	r2, r3, #5
 803a6c0:	68fb      	ldr	r3, [r7, #12]
 803a6c2:	4413      	add	r3, r2
 803a6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a6c8:	681b      	ldr	r3, [r3, #0]
 803a6ca:	68ba      	ldr	r2, [r7, #8]
 803a6cc:	0151      	lsls	r1, r2, #5
 803a6ce:	68fa      	ldr	r2, [r7, #12]
 803a6d0:	440a      	add	r2, r1
 803a6d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a6d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803a6da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 803a6dc:	683b      	ldr	r3, [r7, #0]
 803a6de:	791b      	ldrb	r3, [r3, #4]
 803a6e0:	2b03      	cmp	r3, #3
 803a6e2:	d003      	beq.n	803a6ec <USB_EPClearStall+0x4c>
 803a6e4:	683b      	ldr	r3, [r7, #0]
 803a6e6:	791b      	ldrb	r3, [r3, #4]
 803a6e8:	2b02      	cmp	r3, #2
 803a6ea:	d138      	bne.n	803a75e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 803a6ec:	68bb      	ldr	r3, [r7, #8]
 803a6ee:	015a      	lsls	r2, r3, #5
 803a6f0:	68fb      	ldr	r3, [r7, #12]
 803a6f2:	4413      	add	r3, r2
 803a6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a6f8:	681b      	ldr	r3, [r3, #0]
 803a6fa:	68ba      	ldr	r2, [r7, #8]
 803a6fc:	0151      	lsls	r1, r2, #5
 803a6fe:	68fa      	ldr	r2, [r7, #12]
 803a700:	440a      	add	r2, r1
 803a702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803a706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803a70a:	6013      	str	r3, [r2, #0]
 803a70c:	e027      	b.n	803a75e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 803a70e:	68bb      	ldr	r3, [r7, #8]
 803a710:	015a      	lsls	r2, r3, #5
 803a712:	68fb      	ldr	r3, [r7, #12]
 803a714:	4413      	add	r3, r2
 803a716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a71a:	681b      	ldr	r3, [r3, #0]
 803a71c:	68ba      	ldr	r2, [r7, #8]
 803a71e:	0151      	lsls	r1, r2, #5
 803a720:	68fa      	ldr	r2, [r7, #12]
 803a722:	440a      	add	r2, r1
 803a724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a728:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803a72c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 803a72e:	683b      	ldr	r3, [r7, #0]
 803a730:	791b      	ldrb	r3, [r3, #4]
 803a732:	2b03      	cmp	r3, #3
 803a734:	d003      	beq.n	803a73e <USB_EPClearStall+0x9e>
 803a736:	683b      	ldr	r3, [r7, #0]
 803a738:	791b      	ldrb	r3, [r3, #4]
 803a73a:	2b02      	cmp	r3, #2
 803a73c:	d10f      	bne.n	803a75e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 803a73e:	68bb      	ldr	r3, [r7, #8]
 803a740:	015a      	lsls	r2, r3, #5
 803a742:	68fb      	ldr	r3, [r7, #12]
 803a744:	4413      	add	r3, r2
 803a746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a74a:	681b      	ldr	r3, [r3, #0]
 803a74c:	68ba      	ldr	r2, [r7, #8]
 803a74e:	0151      	lsls	r1, r2, #5
 803a750:	68fa      	ldr	r2, [r7, #12]
 803a752:	440a      	add	r2, r1
 803a754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803a758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803a75c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 803a75e:	2300      	movs	r3, #0
}
 803a760:	4618      	mov	r0, r3
 803a762:	3714      	adds	r7, #20
 803a764:	46bd      	mov	sp, r7
 803a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a76a:	4770      	bx	lr

0803a76c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 803a76c:	b480      	push	{r7}
 803a76e:	b085      	sub	sp, #20
 803a770:	af00      	add	r7, sp, #0
 803a772:	6078      	str	r0, [r7, #4]
 803a774:	460b      	mov	r3, r1
 803a776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a778:	687b      	ldr	r3, [r7, #4]
 803a77a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 803a77c:	68fb      	ldr	r3, [r7, #12]
 803a77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a782:	681b      	ldr	r3, [r3, #0]
 803a784:	68fa      	ldr	r2, [r7, #12]
 803a786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803a78a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 803a78e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 803a790:	68fb      	ldr	r3, [r7, #12]
 803a792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a796:	681a      	ldr	r2, [r3, #0]
 803a798:	78fb      	ldrb	r3, [r7, #3]
 803a79a:	011b      	lsls	r3, r3, #4
 803a79c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 803a7a0:	68f9      	ldr	r1, [r7, #12]
 803a7a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803a7a6:	4313      	orrs	r3, r2
 803a7a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 803a7aa:	2300      	movs	r3, #0
}
 803a7ac:	4618      	mov	r0, r3
 803a7ae:	3714      	adds	r7, #20
 803a7b0:	46bd      	mov	sp, r7
 803a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a7b6:	4770      	bx	lr

0803a7b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 803a7b8:	b480      	push	{r7}
 803a7ba:	b085      	sub	sp, #20
 803a7bc:	af00      	add	r7, sp, #0
 803a7be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a7c0:	687b      	ldr	r3, [r7, #4]
 803a7c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803a7c4:	68fb      	ldr	r3, [r7, #12]
 803a7c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803a7ca:	681b      	ldr	r3, [r3, #0]
 803a7cc:	68fa      	ldr	r2, [r7, #12]
 803a7ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803a7d2:	f023 0303 	bic.w	r3, r3, #3
 803a7d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 803a7d8:	68fb      	ldr	r3, [r7, #12]
 803a7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a7de:	685b      	ldr	r3, [r3, #4]
 803a7e0:	68fa      	ldr	r2, [r7, #12]
 803a7e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803a7e6:	f023 0302 	bic.w	r3, r3, #2
 803a7ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803a7ec:	2300      	movs	r3, #0
}
 803a7ee:	4618      	mov	r0, r3
 803a7f0:	3714      	adds	r7, #20
 803a7f2:	46bd      	mov	sp, r7
 803a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a7f8:	4770      	bx	lr

0803a7fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 803a7fa:	b480      	push	{r7}
 803a7fc:	b085      	sub	sp, #20
 803a7fe:	af00      	add	r7, sp, #0
 803a800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a802:	687b      	ldr	r3, [r7, #4]
 803a804:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803a806:	68fb      	ldr	r3, [r7, #12]
 803a808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803a80c:	681b      	ldr	r3, [r3, #0]
 803a80e:	68fa      	ldr	r2, [r7, #12]
 803a810:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803a814:	f023 0303 	bic.w	r3, r3, #3
 803a818:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 803a81a:	68fb      	ldr	r3, [r7, #12]
 803a81c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a820:	685b      	ldr	r3, [r3, #4]
 803a822:	68fa      	ldr	r2, [r7, #12]
 803a824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803a828:	f043 0302 	orr.w	r3, r3, #2
 803a82c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803a82e:	2300      	movs	r3, #0
}
 803a830:	4618      	mov	r0, r3
 803a832:	3714      	adds	r7, #20
 803a834:	46bd      	mov	sp, r7
 803a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a83a:	4770      	bx	lr

0803a83c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 803a83c:	b480      	push	{r7}
 803a83e:	b085      	sub	sp, #20
 803a840:	af00      	add	r7, sp, #0
 803a842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 803a844:	687b      	ldr	r3, [r7, #4]
 803a846:	695b      	ldr	r3, [r3, #20]
 803a848:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 803a84a:	687b      	ldr	r3, [r7, #4]
 803a84c:	699b      	ldr	r3, [r3, #24]
 803a84e:	68fa      	ldr	r2, [r7, #12]
 803a850:	4013      	ands	r3, r2
 803a852:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 803a854:	68fb      	ldr	r3, [r7, #12]
}
 803a856:	4618      	mov	r0, r3
 803a858:	3714      	adds	r7, #20
 803a85a:	46bd      	mov	sp, r7
 803a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a860:	4770      	bx	lr

0803a862 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803a862:	b480      	push	{r7}
 803a864:	b085      	sub	sp, #20
 803a866:	af00      	add	r7, sp, #0
 803a868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a86a:	687b      	ldr	r3, [r7, #4]
 803a86c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 803a86e:	68fb      	ldr	r3, [r7, #12]
 803a870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a874:	699b      	ldr	r3, [r3, #24]
 803a876:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803a878:	68fb      	ldr	r3, [r7, #12]
 803a87a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a87e:	69db      	ldr	r3, [r3, #28]
 803a880:	68ba      	ldr	r2, [r7, #8]
 803a882:	4013      	ands	r3, r2
 803a884:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 803a886:	68bb      	ldr	r3, [r7, #8]
 803a888:	0c1b      	lsrs	r3, r3, #16
}
 803a88a:	4618      	mov	r0, r3
 803a88c:	3714      	adds	r7, #20
 803a88e:	46bd      	mov	sp, r7
 803a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a894:	4770      	bx	lr

0803a896 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803a896:	b480      	push	{r7}
 803a898:	b085      	sub	sp, #20
 803a89a:	af00      	add	r7, sp, #0
 803a89c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a89e:	687b      	ldr	r3, [r7, #4]
 803a8a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 803a8a2:	68fb      	ldr	r3, [r7, #12]
 803a8a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a8a8:	699b      	ldr	r3, [r3, #24]
 803a8aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803a8ac:	68fb      	ldr	r3, [r7, #12]
 803a8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a8b2:	69db      	ldr	r3, [r3, #28]
 803a8b4:	68ba      	ldr	r2, [r7, #8]
 803a8b6:	4013      	ands	r3, r2
 803a8b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 803a8ba:	68bb      	ldr	r3, [r7, #8]
 803a8bc:	b29b      	uxth	r3, r3
}
 803a8be:	4618      	mov	r0, r3
 803a8c0:	3714      	adds	r7, #20
 803a8c2:	46bd      	mov	sp, r7
 803a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a8c8:	4770      	bx	lr

0803a8ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803a8ca:	b480      	push	{r7}
 803a8cc:	b085      	sub	sp, #20
 803a8ce:	af00      	add	r7, sp, #0
 803a8d0:	6078      	str	r0, [r7, #4]
 803a8d2:	460b      	mov	r3, r1
 803a8d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a8d6:	687b      	ldr	r3, [r7, #4]
 803a8d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 803a8da:	78fb      	ldrb	r3, [r7, #3]
 803a8dc:	015a      	lsls	r2, r3, #5
 803a8de:	68fb      	ldr	r3, [r7, #12]
 803a8e0:	4413      	add	r3, r2
 803a8e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a8e6:	689b      	ldr	r3, [r3, #8]
 803a8e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 803a8ea:	68fb      	ldr	r3, [r7, #12]
 803a8ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a8f0:	695b      	ldr	r3, [r3, #20]
 803a8f2:	68ba      	ldr	r2, [r7, #8]
 803a8f4:	4013      	ands	r3, r2
 803a8f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803a8f8:	68bb      	ldr	r3, [r7, #8]
}
 803a8fa:	4618      	mov	r0, r3
 803a8fc:	3714      	adds	r7, #20
 803a8fe:	46bd      	mov	sp, r7
 803a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a904:	4770      	bx	lr

0803a906 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803a906:	b480      	push	{r7}
 803a908:	b087      	sub	sp, #28
 803a90a:	af00      	add	r7, sp, #0
 803a90c:	6078      	str	r0, [r7, #4]
 803a90e:	460b      	mov	r3, r1
 803a910:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a912:	687b      	ldr	r3, [r7, #4]
 803a914:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 803a916:	697b      	ldr	r3, [r7, #20]
 803a918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a91c:	691b      	ldr	r3, [r3, #16]
 803a91e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 803a920:	697b      	ldr	r3, [r7, #20]
 803a922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803a928:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 803a92a:	78fb      	ldrb	r3, [r7, #3]
 803a92c:	f003 030f 	and.w	r3, r3, #15
 803a930:	68fa      	ldr	r2, [r7, #12]
 803a932:	fa22 f303 	lsr.w	r3, r2, r3
 803a936:	01db      	lsls	r3, r3, #7
 803a938:	b2db      	uxtb	r3, r3
 803a93a:	693a      	ldr	r2, [r7, #16]
 803a93c:	4313      	orrs	r3, r2
 803a93e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 803a940:	78fb      	ldrb	r3, [r7, #3]
 803a942:	015a      	lsls	r2, r3, #5
 803a944:	697b      	ldr	r3, [r7, #20]
 803a946:	4413      	add	r3, r2
 803a948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a94c:	689b      	ldr	r3, [r3, #8]
 803a94e:	693a      	ldr	r2, [r7, #16]
 803a950:	4013      	ands	r3, r2
 803a952:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803a954:	68bb      	ldr	r3, [r7, #8]
}
 803a956:	4618      	mov	r0, r3
 803a958:	371c      	adds	r7, #28
 803a95a:	46bd      	mov	sp, r7
 803a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a960:	4770      	bx	lr

0803a962 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 803a962:	b480      	push	{r7}
 803a964:	b083      	sub	sp, #12
 803a966:	af00      	add	r7, sp, #0
 803a968:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 803a96a:	687b      	ldr	r3, [r7, #4]
 803a96c:	695b      	ldr	r3, [r3, #20]
 803a96e:	f003 0301 	and.w	r3, r3, #1
}
 803a972:	4618      	mov	r0, r3
 803a974:	370c      	adds	r7, #12
 803a976:	46bd      	mov	sp, r7
 803a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a97c:	4770      	bx	lr
	...

0803a980 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 803a980:	b480      	push	{r7}
 803a982:	b085      	sub	sp, #20
 803a984:	af00      	add	r7, sp, #0
 803a986:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a988:	687b      	ldr	r3, [r7, #4]
 803a98a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 803a98c:	68fb      	ldr	r3, [r7, #12]
 803a98e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a992:	681a      	ldr	r2, [r3, #0]
 803a994:	68fb      	ldr	r3, [r7, #12]
 803a996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803a99a:	4619      	mov	r1, r3
 803a99c:	4b09      	ldr	r3, [pc, #36]	; (803a9c4 <USB_ActivateSetup+0x44>)
 803a99e:	4013      	ands	r3, r2
 803a9a0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 803a9a2:	68fb      	ldr	r3, [r7, #12]
 803a9a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803a9a8:	685b      	ldr	r3, [r3, #4]
 803a9aa:	68fa      	ldr	r2, [r7, #12]
 803a9ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803a9b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803a9b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803a9b6:	2300      	movs	r3, #0
}
 803a9b8:	4618      	mov	r0, r3
 803a9ba:	3714      	adds	r7, #20
 803a9bc:	46bd      	mov	sp, r7
 803a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a9c2:	4770      	bx	lr
 803a9c4:	fffff800 	.word	0xfffff800

0803a9c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 803a9c8:	b480      	push	{r7}
 803a9ca:	b087      	sub	sp, #28
 803a9cc:	af00      	add	r7, sp, #0
 803a9ce:	60f8      	str	r0, [r7, #12]
 803a9d0:	460b      	mov	r3, r1
 803a9d2:	607a      	str	r2, [r7, #4]
 803a9d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803a9d6:	68fb      	ldr	r3, [r7, #12]
 803a9d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 803a9da:	68fb      	ldr	r3, [r7, #12]
 803a9dc:	333c      	adds	r3, #60	; 0x3c
 803a9de:	3304      	adds	r3, #4
 803a9e0:	681b      	ldr	r3, [r3, #0]
 803a9e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 803a9e4:	693b      	ldr	r3, [r7, #16]
 803a9e6:	4a26      	ldr	r2, [pc, #152]	; (803aa80 <USB_EP0_OutStart+0xb8>)
 803a9e8:	4293      	cmp	r3, r2
 803a9ea:	d90a      	bls.n	803aa02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803a9ec:	697b      	ldr	r3, [r7, #20]
 803a9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803a9f2:	681b      	ldr	r3, [r3, #0]
 803a9f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803a9f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803a9fc:	d101      	bne.n	803aa02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 803a9fe:	2300      	movs	r3, #0
 803aa00:	e037      	b.n	803aa72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 803aa02:	697b      	ldr	r3, [r7, #20]
 803aa04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803aa08:	461a      	mov	r2, r3
 803aa0a:	2300      	movs	r3, #0
 803aa0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803aa0e:	697b      	ldr	r3, [r7, #20]
 803aa10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803aa14:	691b      	ldr	r3, [r3, #16]
 803aa16:	697a      	ldr	r2, [r7, #20]
 803aa18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803aa1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803aa20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 803aa22:	697b      	ldr	r3, [r7, #20]
 803aa24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803aa28:	691b      	ldr	r3, [r3, #16]
 803aa2a:	697a      	ldr	r2, [r7, #20]
 803aa2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803aa30:	f043 0318 	orr.w	r3, r3, #24
 803aa34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 803aa36:	697b      	ldr	r3, [r7, #20]
 803aa38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803aa3c:	691b      	ldr	r3, [r3, #16]
 803aa3e:	697a      	ldr	r2, [r7, #20]
 803aa40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803aa44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 803aa48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 803aa4a:	7afb      	ldrb	r3, [r7, #11]
 803aa4c:	2b01      	cmp	r3, #1
 803aa4e:	d10f      	bne.n	803aa70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 803aa50:	697b      	ldr	r3, [r7, #20]
 803aa52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803aa56:	461a      	mov	r2, r3
 803aa58:	687b      	ldr	r3, [r7, #4]
 803aa5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 803aa5c:	697b      	ldr	r3, [r7, #20]
 803aa5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803aa62:	681b      	ldr	r3, [r3, #0]
 803aa64:	697a      	ldr	r2, [r7, #20]
 803aa66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803aa6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 803aa6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803aa70:	2300      	movs	r3, #0
}
 803aa72:	4618      	mov	r0, r3
 803aa74:	371c      	adds	r7, #28
 803aa76:	46bd      	mov	sp, r7
 803aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aa7c:	4770      	bx	lr
 803aa7e:	bf00      	nop
 803aa80:	4f54300a 	.word	0x4f54300a

0803aa84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 803aa84:	b480      	push	{r7}
 803aa86:	b085      	sub	sp, #20
 803aa88:	af00      	add	r7, sp, #0
 803aa8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 803aa8c:	2300      	movs	r3, #0
 803aa8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 803aa90:	68fb      	ldr	r3, [r7, #12]
 803aa92:	3301      	adds	r3, #1
 803aa94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803aa96:	68fb      	ldr	r3, [r7, #12]
 803aa98:	4a13      	ldr	r2, [pc, #76]	; (803aae8 <USB_CoreReset+0x64>)
 803aa9a:	4293      	cmp	r3, r2
 803aa9c:	d901      	bls.n	803aaa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 803aa9e:	2303      	movs	r3, #3
 803aaa0:	e01b      	b.n	803aada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803aaa2:	687b      	ldr	r3, [r7, #4]
 803aaa4:	691b      	ldr	r3, [r3, #16]
 803aaa6:	2b00      	cmp	r3, #0
 803aaa8:	daf2      	bge.n	803aa90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 803aaaa:	2300      	movs	r3, #0
 803aaac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 803aaae:	687b      	ldr	r3, [r7, #4]
 803aab0:	691b      	ldr	r3, [r3, #16]
 803aab2:	f043 0201 	orr.w	r2, r3, #1
 803aab6:	687b      	ldr	r3, [r7, #4]
 803aab8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803aaba:	68fb      	ldr	r3, [r7, #12]
 803aabc:	3301      	adds	r3, #1
 803aabe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803aac0:	68fb      	ldr	r3, [r7, #12]
 803aac2:	4a09      	ldr	r2, [pc, #36]	; (803aae8 <USB_CoreReset+0x64>)
 803aac4:	4293      	cmp	r3, r2
 803aac6:	d901      	bls.n	803aacc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 803aac8:	2303      	movs	r3, #3
 803aaca:	e006      	b.n	803aada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 803aacc:	687b      	ldr	r3, [r7, #4]
 803aace:	691b      	ldr	r3, [r3, #16]
 803aad0:	f003 0301 	and.w	r3, r3, #1
 803aad4:	2b01      	cmp	r3, #1
 803aad6:	d0f0      	beq.n	803aaba <USB_CoreReset+0x36>

  return HAL_OK;
 803aad8:	2300      	movs	r3, #0
}
 803aada:	4618      	mov	r0, r3
 803aadc:	3714      	adds	r7, #20
 803aade:	46bd      	mov	sp, r7
 803aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aae4:	4770      	bx	lr
 803aae6:	bf00      	nop
 803aae8:	00030d40 	.word	0x00030d40

0803aaec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803aaec:	b580      	push	{r7, lr}
 803aaee:	b084      	sub	sp, #16
 803aaf0:	af00      	add	r7, sp, #0
 803aaf2:	6078      	str	r0, [r7, #4]
 803aaf4:	460b      	mov	r3, r1
 803aaf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 803aaf8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 803aafc:	f002 fc54 	bl	803d3a8 <USBD_static_malloc>
 803ab00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 803ab02:	68fb      	ldr	r3, [r7, #12]
 803ab04:	2b00      	cmp	r3, #0
 803ab06:	d109      	bne.n	803ab1c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 803ab08:	687b      	ldr	r3, [r7, #4]
 803ab0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ab0e:	687b      	ldr	r3, [r7, #4]
 803ab10:	32b0      	adds	r2, #176	; 0xb0
 803ab12:	2100      	movs	r1, #0
 803ab14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 803ab18:	2302      	movs	r3, #2
 803ab1a:	e0d4      	b.n	803acc6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 803ab1c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 803ab20:	2100      	movs	r1, #0
 803ab22:	68f8      	ldr	r0, [r7, #12]
 803ab24:	f002 fd42 	bl	803d5ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 803ab28:	687b      	ldr	r3, [r7, #4]
 803ab2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ab2e:	687b      	ldr	r3, [r7, #4]
 803ab30:	32b0      	adds	r2, #176	; 0xb0
 803ab32:	68f9      	ldr	r1, [r7, #12]
 803ab34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 803ab38:	687b      	ldr	r3, [r7, #4]
 803ab3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ab3e:	687b      	ldr	r3, [r7, #4]
 803ab40:	32b0      	adds	r2, #176	; 0xb0
 803ab42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 803ab46:	687b      	ldr	r3, [r7, #4]
 803ab48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803ab4c:	687b      	ldr	r3, [r7, #4]
 803ab4e:	7c1b      	ldrb	r3, [r3, #16]
 803ab50:	2b00      	cmp	r3, #0
 803ab52:	d138      	bne.n	803abc6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 803ab54:	4b5e      	ldr	r3, [pc, #376]	; (803acd0 <USBD_CDC_Init+0x1e4>)
 803ab56:	7819      	ldrb	r1, [r3, #0]
 803ab58:	f44f 7300 	mov.w	r3, #512	; 0x200
 803ab5c:	2202      	movs	r2, #2
 803ab5e:	6878      	ldr	r0, [r7, #4]
 803ab60:	f002 faff 	bl	803d162 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803ab64:	4b5a      	ldr	r3, [pc, #360]	; (803acd0 <USBD_CDC_Init+0x1e4>)
 803ab66:	781b      	ldrb	r3, [r3, #0]
 803ab68:	f003 020f 	and.w	r2, r3, #15
 803ab6c:	6879      	ldr	r1, [r7, #4]
 803ab6e:	4613      	mov	r3, r2
 803ab70:	009b      	lsls	r3, r3, #2
 803ab72:	4413      	add	r3, r2
 803ab74:	009b      	lsls	r3, r3, #2
 803ab76:	440b      	add	r3, r1
 803ab78:	3324      	adds	r3, #36	; 0x24
 803ab7a:	2201      	movs	r2, #1
 803ab7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803ab7e:	4b55      	ldr	r3, [pc, #340]	; (803acd4 <USBD_CDC_Init+0x1e8>)
 803ab80:	7819      	ldrb	r1, [r3, #0]
 803ab82:	f44f 7300 	mov.w	r3, #512	; 0x200
 803ab86:	2202      	movs	r2, #2
 803ab88:	6878      	ldr	r0, [r7, #4]
 803ab8a:	f002 faea 	bl	803d162 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803ab8e:	4b51      	ldr	r3, [pc, #324]	; (803acd4 <USBD_CDC_Init+0x1e8>)
 803ab90:	781b      	ldrb	r3, [r3, #0]
 803ab92:	f003 020f 	and.w	r2, r3, #15
 803ab96:	6879      	ldr	r1, [r7, #4]
 803ab98:	4613      	mov	r3, r2
 803ab9a:	009b      	lsls	r3, r3, #2
 803ab9c:	4413      	add	r3, r2
 803ab9e:	009b      	lsls	r3, r3, #2
 803aba0:	440b      	add	r3, r1
 803aba2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803aba6:	2201      	movs	r2, #1
 803aba8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 803abaa:	4b4b      	ldr	r3, [pc, #300]	; (803acd8 <USBD_CDC_Init+0x1ec>)
 803abac:	781b      	ldrb	r3, [r3, #0]
 803abae:	f003 020f 	and.w	r2, r3, #15
 803abb2:	6879      	ldr	r1, [r7, #4]
 803abb4:	4613      	mov	r3, r2
 803abb6:	009b      	lsls	r3, r3, #2
 803abb8:	4413      	add	r3, r2
 803abba:	009b      	lsls	r3, r3, #2
 803abbc:	440b      	add	r3, r1
 803abbe:	3326      	adds	r3, #38	; 0x26
 803abc0:	2210      	movs	r2, #16
 803abc2:	801a      	strh	r2, [r3, #0]
 803abc4:	e035      	b.n	803ac32 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 803abc6:	4b42      	ldr	r3, [pc, #264]	; (803acd0 <USBD_CDC_Init+0x1e4>)
 803abc8:	7819      	ldrb	r1, [r3, #0]
 803abca:	2340      	movs	r3, #64	; 0x40
 803abcc:	2202      	movs	r2, #2
 803abce:	6878      	ldr	r0, [r7, #4]
 803abd0:	f002 fac7 	bl	803d162 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803abd4:	4b3e      	ldr	r3, [pc, #248]	; (803acd0 <USBD_CDC_Init+0x1e4>)
 803abd6:	781b      	ldrb	r3, [r3, #0]
 803abd8:	f003 020f 	and.w	r2, r3, #15
 803abdc:	6879      	ldr	r1, [r7, #4]
 803abde:	4613      	mov	r3, r2
 803abe0:	009b      	lsls	r3, r3, #2
 803abe2:	4413      	add	r3, r2
 803abe4:	009b      	lsls	r3, r3, #2
 803abe6:	440b      	add	r3, r1
 803abe8:	3324      	adds	r3, #36	; 0x24
 803abea:	2201      	movs	r2, #1
 803abec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803abee:	4b39      	ldr	r3, [pc, #228]	; (803acd4 <USBD_CDC_Init+0x1e8>)
 803abf0:	7819      	ldrb	r1, [r3, #0]
 803abf2:	2340      	movs	r3, #64	; 0x40
 803abf4:	2202      	movs	r2, #2
 803abf6:	6878      	ldr	r0, [r7, #4]
 803abf8:	f002 fab3 	bl	803d162 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803abfc:	4b35      	ldr	r3, [pc, #212]	; (803acd4 <USBD_CDC_Init+0x1e8>)
 803abfe:	781b      	ldrb	r3, [r3, #0]
 803ac00:	f003 020f 	and.w	r2, r3, #15
 803ac04:	6879      	ldr	r1, [r7, #4]
 803ac06:	4613      	mov	r3, r2
 803ac08:	009b      	lsls	r3, r3, #2
 803ac0a:	4413      	add	r3, r2
 803ac0c:	009b      	lsls	r3, r3, #2
 803ac0e:	440b      	add	r3, r1
 803ac10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803ac14:	2201      	movs	r2, #1
 803ac16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 803ac18:	4b2f      	ldr	r3, [pc, #188]	; (803acd8 <USBD_CDC_Init+0x1ec>)
 803ac1a:	781b      	ldrb	r3, [r3, #0]
 803ac1c:	f003 020f 	and.w	r2, r3, #15
 803ac20:	6879      	ldr	r1, [r7, #4]
 803ac22:	4613      	mov	r3, r2
 803ac24:	009b      	lsls	r3, r3, #2
 803ac26:	4413      	add	r3, r2
 803ac28:	009b      	lsls	r3, r3, #2
 803ac2a:	440b      	add	r3, r1
 803ac2c:	3326      	adds	r3, #38	; 0x26
 803ac2e:	2210      	movs	r2, #16
 803ac30:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 803ac32:	4b29      	ldr	r3, [pc, #164]	; (803acd8 <USBD_CDC_Init+0x1ec>)
 803ac34:	7819      	ldrb	r1, [r3, #0]
 803ac36:	2308      	movs	r3, #8
 803ac38:	2203      	movs	r2, #3
 803ac3a:	6878      	ldr	r0, [r7, #4]
 803ac3c:	f002 fa91 	bl	803d162 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 803ac40:	4b25      	ldr	r3, [pc, #148]	; (803acd8 <USBD_CDC_Init+0x1ec>)
 803ac42:	781b      	ldrb	r3, [r3, #0]
 803ac44:	f003 020f 	and.w	r2, r3, #15
 803ac48:	6879      	ldr	r1, [r7, #4]
 803ac4a:	4613      	mov	r3, r2
 803ac4c:	009b      	lsls	r3, r3, #2
 803ac4e:	4413      	add	r3, r2
 803ac50:	009b      	lsls	r3, r3, #2
 803ac52:	440b      	add	r3, r1
 803ac54:	3324      	adds	r3, #36	; 0x24
 803ac56:	2201      	movs	r2, #1
 803ac58:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 803ac5a:	68fb      	ldr	r3, [r7, #12]
 803ac5c:	2200      	movs	r2, #0
 803ac5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 803ac62:	687b      	ldr	r3, [r7, #4]
 803ac64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803ac68:	687a      	ldr	r2, [r7, #4]
 803ac6a:	33b0      	adds	r3, #176	; 0xb0
 803ac6c:	009b      	lsls	r3, r3, #2
 803ac6e:	4413      	add	r3, r2
 803ac70:	685b      	ldr	r3, [r3, #4]
 803ac72:	681b      	ldr	r3, [r3, #0]
 803ac74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 803ac76:	68fb      	ldr	r3, [r7, #12]
 803ac78:	2200      	movs	r2, #0
 803ac7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 803ac7e:	68fb      	ldr	r3, [r7, #12]
 803ac80:	2200      	movs	r2, #0
 803ac82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 803ac86:	68fb      	ldr	r3, [r7, #12]
 803ac88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 803ac8c:	2b00      	cmp	r3, #0
 803ac8e:	d101      	bne.n	803ac94 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 803ac90:	2302      	movs	r3, #2
 803ac92:	e018      	b.n	803acc6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803ac94:	687b      	ldr	r3, [r7, #4]
 803ac96:	7c1b      	ldrb	r3, [r3, #16]
 803ac98:	2b00      	cmp	r3, #0
 803ac9a:	d10a      	bne.n	803acb2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803ac9c:	4b0d      	ldr	r3, [pc, #52]	; (803acd4 <USBD_CDC_Init+0x1e8>)
 803ac9e:	7819      	ldrb	r1, [r3, #0]
 803aca0:	68fb      	ldr	r3, [r7, #12]
 803aca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803aca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 803acaa:	6878      	ldr	r0, [r7, #4]
 803acac:	f002 fb48 	bl	803d340 <USBD_LL_PrepareReceive>
 803acb0:	e008      	b.n	803acc4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803acb2:	4b08      	ldr	r3, [pc, #32]	; (803acd4 <USBD_CDC_Init+0x1e8>)
 803acb4:	7819      	ldrb	r1, [r3, #0]
 803acb6:	68fb      	ldr	r3, [r7, #12]
 803acb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803acbc:	2340      	movs	r3, #64	; 0x40
 803acbe:	6878      	ldr	r0, [r7, #4]
 803acc0:	f002 fb3e 	bl	803d340 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 803acc4:	2300      	movs	r3, #0
}
 803acc6:	4618      	mov	r0, r3
 803acc8:	3710      	adds	r7, #16
 803acca:	46bd      	mov	sp, r7
 803accc:	bd80      	pop	{r7, pc}
 803acce:	bf00      	nop
 803acd0:	24000097 	.word	0x24000097
 803acd4:	24000098 	.word	0x24000098
 803acd8:	24000099 	.word	0x24000099

0803acdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803acdc:	b580      	push	{r7, lr}
 803acde:	b082      	sub	sp, #8
 803ace0:	af00      	add	r7, sp, #0
 803ace2:	6078      	str	r0, [r7, #4]
 803ace4:	460b      	mov	r3, r1
 803ace6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 803ace8:	4b3a      	ldr	r3, [pc, #232]	; (803add4 <USBD_CDC_DeInit+0xf8>)
 803acea:	781b      	ldrb	r3, [r3, #0]
 803acec:	4619      	mov	r1, r3
 803acee:	6878      	ldr	r0, [r7, #4]
 803acf0:	f002 fa5d 	bl	803d1ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 803acf4:	4b37      	ldr	r3, [pc, #220]	; (803add4 <USBD_CDC_DeInit+0xf8>)
 803acf6:	781b      	ldrb	r3, [r3, #0]
 803acf8:	f003 020f 	and.w	r2, r3, #15
 803acfc:	6879      	ldr	r1, [r7, #4]
 803acfe:	4613      	mov	r3, r2
 803ad00:	009b      	lsls	r3, r3, #2
 803ad02:	4413      	add	r3, r2
 803ad04:	009b      	lsls	r3, r3, #2
 803ad06:	440b      	add	r3, r1
 803ad08:	3324      	adds	r3, #36	; 0x24
 803ad0a:	2200      	movs	r2, #0
 803ad0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 803ad0e:	4b32      	ldr	r3, [pc, #200]	; (803add8 <USBD_CDC_DeInit+0xfc>)
 803ad10:	781b      	ldrb	r3, [r3, #0]
 803ad12:	4619      	mov	r1, r3
 803ad14:	6878      	ldr	r0, [r7, #4]
 803ad16:	f002 fa4a 	bl	803d1ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 803ad1a:	4b2f      	ldr	r3, [pc, #188]	; (803add8 <USBD_CDC_DeInit+0xfc>)
 803ad1c:	781b      	ldrb	r3, [r3, #0]
 803ad1e:	f003 020f 	and.w	r2, r3, #15
 803ad22:	6879      	ldr	r1, [r7, #4]
 803ad24:	4613      	mov	r3, r2
 803ad26:	009b      	lsls	r3, r3, #2
 803ad28:	4413      	add	r3, r2
 803ad2a:	009b      	lsls	r3, r3, #2
 803ad2c:	440b      	add	r3, r1
 803ad2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803ad32:	2200      	movs	r2, #0
 803ad34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 803ad36:	4b29      	ldr	r3, [pc, #164]	; (803addc <USBD_CDC_DeInit+0x100>)
 803ad38:	781b      	ldrb	r3, [r3, #0]
 803ad3a:	4619      	mov	r1, r3
 803ad3c:	6878      	ldr	r0, [r7, #4]
 803ad3e:	f002 fa36 	bl	803d1ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 803ad42:	4b26      	ldr	r3, [pc, #152]	; (803addc <USBD_CDC_DeInit+0x100>)
 803ad44:	781b      	ldrb	r3, [r3, #0]
 803ad46:	f003 020f 	and.w	r2, r3, #15
 803ad4a:	6879      	ldr	r1, [r7, #4]
 803ad4c:	4613      	mov	r3, r2
 803ad4e:	009b      	lsls	r3, r3, #2
 803ad50:	4413      	add	r3, r2
 803ad52:	009b      	lsls	r3, r3, #2
 803ad54:	440b      	add	r3, r1
 803ad56:	3324      	adds	r3, #36	; 0x24
 803ad58:	2200      	movs	r2, #0
 803ad5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 803ad5c:	4b1f      	ldr	r3, [pc, #124]	; (803addc <USBD_CDC_DeInit+0x100>)
 803ad5e:	781b      	ldrb	r3, [r3, #0]
 803ad60:	f003 020f 	and.w	r2, r3, #15
 803ad64:	6879      	ldr	r1, [r7, #4]
 803ad66:	4613      	mov	r3, r2
 803ad68:	009b      	lsls	r3, r3, #2
 803ad6a:	4413      	add	r3, r2
 803ad6c:	009b      	lsls	r3, r3, #2
 803ad6e:	440b      	add	r3, r1
 803ad70:	3326      	adds	r3, #38	; 0x26
 803ad72:	2200      	movs	r2, #0
 803ad74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 803ad76:	687b      	ldr	r3, [r7, #4]
 803ad78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ad7c:	687b      	ldr	r3, [r7, #4]
 803ad7e:	32b0      	adds	r2, #176	; 0xb0
 803ad80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ad84:	2b00      	cmp	r3, #0
 803ad86:	d01f      	beq.n	803adc8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 803ad88:	687b      	ldr	r3, [r7, #4]
 803ad8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803ad8e:	687a      	ldr	r2, [r7, #4]
 803ad90:	33b0      	adds	r3, #176	; 0xb0
 803ad92:	009b      	lsls	r3, r3, #2
 803ad94:	4413      	add	r3, r2
 803ad96:	685b      	ldr	r3, [r3, #4]
 803ad98:	685b      	ldr	r3, [r3, #4]
 803ad9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 803ad9c:	687b      	ldr	r3, [r7, #4]
 803ad9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ada2:	687b      	ldr	r3, [r7, #4]
 803ada4:	32b0      	adds	r2, #176	; 0xb0
 803ada6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803adaa:	4618      	mov	r0, r3
 803adac:	f002 fb0a 	bl	803d3c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 803adb0:	687b      	ldr	r3, [r7, #4]
 803adb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803adb6:	687b      	ldr	r3, [r7, #4]
 803adb8:	32b0      	adds	r2, #176	; 0xb0
 803adba:	2100      	movs	r1, #0
 803adbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 803adc0:	687b      	ldr	r3, [r7, #4]
 803adc2:	2200      	movs	r2, #0
 803adc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 803adc8:	2300      	movs	r3, #0
}
 803adca:	4618      	mov	r0, r3
 803adcc:	3708      	adds	r7, #8
 803adce:	46bd      	mov	sp, r7
 803add0:	bd80      	pop	{r7, pc}
 803add2:	bf00      	nop
 803add4:	24000097 	.word	0x24000097
 803add8:	24000098 	.word	0x24000098
 803addc:	24000099 	.word	0x24000099

0803ade0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 803ade0:	b580      	push	{r7, lr}
 803ade2:	b086      	sub	sp, #24
 803ade4:	af00      	add	r7, sp, #0
 803ade6:	6078      	str	r0, [r7, #4]
 803ade8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803adea:	687b      	ldr	r3, [r7, #4]
 803adec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803adf0:	687b      	ldr	r3, [r7, #4]
 803adf2:	32b0      	adds	r2, #176	; 0xb0
 803adf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803adf8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 803adfa:	2300      	movs	r3, #0
 803adfc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 803adfe:	2300      	movs	r3, #0
 803ae00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 803ae02:	2300      	movs	r3, #0
 803ae04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 803ae06:	693b      	ldr	r3, [r7, #16]
 803ae08:	2b00      	cmp	r3, #0
 803ae0a:	d101      	bne.n	803ae10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 803ae0c:	2303      	movs	r3, #3
 803ae0e:	e0bf      	b.n	803af90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803ae10:	683b      	ldr	r3, [r7, #0]
 803ae12:	781b      	ldrb	r3, [r3, #0]
 803ae14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803ae18:	2b00      	cmp	r3, #0
 803ae1a:	d050      	beq.n	803aebe <USBD_CDC_Setup+0xde>
 803ae1c:	2b20      	cmp	r3, #32
 803ae1e:	f040 80af 	bne.w	803af80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 803ae22:	683b      	ldr	r3, [r7, #0]
 803ae24:	88db      	ldrh	r3, [r3, #6]
 803ae26:	2b00      	cmp	r3, #0
 803ae28:	d03a      	beq.n	803aea0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 803ae2a:	683b      	ldr	r3, [r7, #0]
 803ae2c:	781b      	ldrb	r3, [r3, #0]
 803ae2e:	b25b      	sxtb	r3, r3
 803ae30:	2b00      	cmp	r3, #0
 803ae32:	da1b      	bge.n	803ae6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803ae34:	687b      	ldr	r3, [r7, #4]
 803ae36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803ae3a:	687a      	ldr	r2, [r7, #4]
 803ae3c:	33b0      	adds	r3, #176	; 0xb0
 803ae3e:	009b      	lsls	r3, r3, #2
 803ae40:	4413      	add	r3, r2
 803ae42:	685b      	ldr	r3, [r3, #4]
 803ae44:	689b      	ldr	r3, [r3, #8]
 803ae46:	683a      	ldr	r2, [r7, #0]
 803ae48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 803ae4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803ae4c:	683a      	ldr	r2, [r7, #0]
 803ae4e:	88d2      	ldrh	r2, [r2, #6]
 803ae50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 803ae52:	683b      	ldr	r3, [r7, #0]
 803ae54:	88db      	ldrh	r3, [r3, #6]
 803ae56:	2b07      	cmp	r3, #7
 803ae58:	bf28      	it	cs
 803ae5a:	2307      	movcs	r3, #7
 803ae5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 803ae5e:	693b      	ldr	r3, [r7, #16]
 803ae60:	89fa      	ldrh	r2, [r7, #14]
 803ae62:	4619      	mov	r1, r3
 803ae64:	6878      	ldr	r0, [r7, #4]
 803ae66:	f001 fd43 	bl	803c8f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 803ae6a:	e090      	b.n	803af8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 803ae6c:	683b      	ldr	r3, [r7, #0]
 803ae6e:	785a      	ldrb	r2, [r3, #1]
 803ae70:	693b      	ldr	r3, [r7, #16]
 803ae72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 803ae76:	683b      	ldr	r3, [r7, #0]
 803ae78:	88db      	ldrh	r3, [r3, #6]
 803ae7a:	2b3f      	cmp	r3, #63	; 0x3f
 803ae7c:	d803      	bhi.n	803ae86 <USBD_CDC_Setup+0xa6>
 803ae7e:	683b      	ldr	r3, [r7, #0]
 803ae80:	88db      	ldrh	r3, [r3, #6]
 803ae82:	b2da      	uxtb	r2, r3
 803ae84:	e000      	b.n	803ae88 <USBD_CDC_Setup+0xa8>
 803ae86:	2240      	movs	r2, #64	; 0x40
 803ae88:	693b      	ldr	r3, [r7, #16]
 803ae8a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 803ae8e:	6939      	ldr	r1, [r7, #16]
 803ae90:	693b      	ldr	r3, [r7, #16]
 803ae92:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 803ae96:	461a      	mov	r2, r3
 803ae98:	6878      	ldr	r0, [r7, #4]
 803ae9a:	f001 fd55 	bl	803c948 <USBD_CtlPrepareRx>
      break;
 803ae9e:	e076      	b.n	803af8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803aea0:	687b      	ldr	r3, [r7, #4]
 803aea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803aea6:	687a      	ldr	r2, [r7, #4]
 803aea8:	33b0      	adds	r3, #176	; 0xb0
 803aeaa:	009b      	lsls	r3, r3, #2
 803aeac:	4413      	add	r3, r2
 803aeae:	685b      	ldr	r3, [r3, #4]
 803aeb0:	689b      	ldr	r3, [r3, #8]
 803aeb2:	683a      	ldr	r2, [r7, #0]
 803aeb4:	7850      	ldrb	r0, [r2, #1]
 803aeb6:	2200      	movs	r2, #0
 803aeb8:	6839      	ldr	r1, [r7, #0]
 803aeba:	4798      	blx	r3
      break;
 803aebc:	e067      	b.n	803af8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803aebe:	683b      	ldr	r3, [r7, #0]
 803aec0:	785b      	ldrb	r3, [r3, #1]
 803aec2:	2b0b      	cmp	r3, #11
 803aec4:	d851      	bhi.n	803af6a <USBD_CDC_Setup+0x18a>
 803aec6:	a201      	add	r2, pc, #4	; (adr r2, 803aecc <USBD_CDC_Setup+0xec>)
 803aec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803aecc:	0803aefd 	.word	0x0803aefd
 803aed0:	0803af79 	.word	0x0803af79
 803aed4:	0803af6b 	.word	0x0803af6b
 803aed8:	0803af6b 	.word	0x0803af6b
 803aedc:	0803af6b 	.word	0x0803af6b
 803aee0:	0803af6b 	.word	0x0803af6b
 803aee4:	0803af6b 	.word	0x0803af6b
 803aee8:	0803af6b 	.word	0x0803af6b
 803aeec:	0803af6b 	.word	0x0803af6b
 803aef0:	0803af6b 	.word	0x0803af6b
 803aef4:	0803af27 	.word	0x0803af27
 803aef8:	0803af51 	.word	0x0803af51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803aefc:	687b      	ldr	r3, [r7, #4]
 803aefe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803af02:	b2db      	uxtb	r3, r3
 803af04:	2b03      	cmp	r3, #3
 803af06:	d107      	bne.n	803af18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 803af08:	f107 030a 	add.w	r3, r7, #10
 803af0c:	2202      	movs	r2, #2
 803af0e:	4619      	mov	r1, r3
 803af10:	6878      	ldr	r0, [r7, #4]
 803af12:	f001 fced 	bl	803c8f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803af16:	e032      	b.n	803af7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803af18:	6839      	ldr	r1, [r7, #0]
 803af1a:	6878      	ldr	r0, [r7, #4]
 803af1c:	f001 fc77 	bl	803c80e <USBD_CtlError>
            ret = USBD_FAIL;
 803af20:	2303      	movs	r3, #3
 803af22:	75fb      	strb	r3, [r7, #23]
          break;
 803af24:	e02b      	b.n	803af7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803af26:	687b      	ldr	r3, [r7, #4]
 803af28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803af2c:	b2db      	uxtb	r3, r3
 803af2e:	2b03      	cmp	r3, #3
 803af30:	d107      	bne.n	803af42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 803af32:	f107 030d 	add.w	r3, r7, #13
 803af36:	2201      	movs	r2, #1
 803af38:	4619      	mov	r1, r3
 803af3a:	6878      	ldr	r0, [r7, #4]
 803af3c:	f001 fcd8 	bl	803c8f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803af40:	e01d      	b.n	803af7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803af42:	6839      	ldr	r1, [r7, #0]
 803af44:	6878      	ldr	r0, [r7, #4]
 803af46:	f001 fc62 	bl	803c80e <USBD_CtlError>
            ret = USBD_FAIL;
 803af4a:	2303      	movs	r3, #3
 803af4c:	75fb      	strb	r3, [r7, #23]
          break;
 803af4e:	e016      	b.n	803af7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 803af50:	687b      	ldr	r3, [r7, #4]
 803af52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803af56:	b2db      	uxtb	r3, r3
 803af58:	2b03      	cmp	r3, #3
 803af5a:	d00f      	beq.n	803af7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 803af5c:	6839      	ldr	r1, [r7, #0]
 803af5e:	6878      	ldr	r0, [r7, #4]
 803af60:	f001 fc55 	bl	803c80e <USBD_CtlError>
            ret = USBD_FAIL;
 803af64:	2303      	movs	r3, #3
 803af66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 803af68:	e008      	b.n	803af7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 803af6a:	6839      	ldr	r1, [r7, #0]
 803af6c:	6878      	ldr	r0, [r7, #4]
 803af6e:	f001 fc4e 	bl	803c80e <USBD_CtlError>
          ret = USBD_FAIL;
 803af72:	2303      	movs	r3, #3
 803af74:	75fb      	strb	r3, [r7, #23]
          break;
 803af76:	e002      	b.n	803af7e <USBD_CDC_Setup+0x19e>
          break;
 803af78:	bf00      	nop
 803af7a:	e008      	b.n	803af8e <USBD_CDC_Setup+0x1ae>
          break;
 803af7c:	bf00      	nop
      }
      break;
 803af7e:	e006      	b.n	803af8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 803af80:	6839      	ldr	r1, [r7, #0]
 803af82:	6878      	ldr	r0, [r7, #4]
 803af84:	f001 fc43 	bl	803c80e <USBD_CtlError>
      ret = USBD_FAIL;
 803af88:	2303      	movs	r3, #3
 803af8a:	75fb      	strb	r3, [r7, #23]
      break;
 803af8c:	bf00      	nop
  }

  return (uint8_t)ret;
 803af8e:	7dfb      	ldrb	r3, [r7, #23]
}
 803af90:	4618      	mov	r0, r3
 803af92:	3718      	adds	r7, #24
 803af94:	46bd      	mov	sp, r7
 803af96:	bd80      	pop	{r7, pc}

0803af98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803af98:	b580      	push	{r7, lr}
 803af9a:	b084      	sub	sp, #16
 803af9c:	af00      	add	r7, sp, #0
 803af9e:	6078      	str	r0, [r7, #4]
 803afa0:	460b      	mov	r3, r1
 803afa2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 803afa4:	687b      	ldr	r3, [r7, #4]
 803afa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803afaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803afac:	687b      	ldr	r3, [r7, #4]
 803afae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803afb2:	687b      	ldr	r3, [r7, #4]
 803afb4:	32b0      	adds	r2, #176	; 0xb0
 803afb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803afba:	2b00      	cmp	r3, #0
 803afbc:	d101      	bne.n	803afc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 803afbe:	2303      	movs	r3, #3
 803afc0:	e065      	b.n	803b08e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803afc2:	687b      	ldr	r3, [r7, #4]
 803afc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803afc8:	687b      	ldr	r3, [r7, #4]
 803afca:	32b0      	adds	r2, #176	; 0xb0
 803afcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803afd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803afd2:	78fb      	ldrb	r3, [r7, #3]
 803afd4:	f003 020f 	and.w	r2, r3, #15
 803afd8:	6879      	ldr	r1, [r7, #4]
 803afda:	4613      	mov	r3, r2
 803afdc:	009b      	lsls	r3, r3, #2
 803afde:	4413      	add	r3, r2
 803afe0:	009b      	lsls	r3, r3, #2
 803afe2:	440b      	add	r3, r1
 803afe4:	3318      	adds	r3, #24
 803afe6:	681b      	ldr	r3, [r3, #0]
 803afe8:	2b00      	cmp	r3, #0
 803afea:	d02f      	beq.n	803b04c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 803afec:	78fb      	ldrb	r3, [r7, #3]
 803afee:	f003 020f 	and.w	r2, r3, #15
 803aff2:	6879      	ldr	r1, [r7, #4]
 803aff4:	4613      	mov	r3, r2
 803aff6:	009b      	lsls	r3, r3, #2
 803aff8:	4413      	add	r3, r2
 803affa:	009b      	lsls	r3, r3, #2
 803affc:	440b      	add	r3, r1
 803affe:	3318      	adds	r3, #24
 803b000:	681a      	ldr	r2, [r3, #0]
 803b002:	78fb      	ldrb	r3, [r7, #3]
 803b004:	f003 010f 	and.w	r1, r3, #15
 803b008:	68f8      	ldr	r0, [r7, #12]
 803b00a:	460b      	mov	r3, r1
 803b00c:	00db      	lsls	r3, r3, #3
 803b00e:	440b      	add	r3, r1
 803b010:	009b      	lsls	r3, r3, #2
 803b012:	4403      	add	r3, r0
 803b014:	3348      	adds	r3, #72	; 0x48
 803b016:	681b      	ldr	r3, [r3, #0]
 803b018:	fbb2 f1f3 	udiv	r1, r2, r3
 803b01c:	fb01 f303 	mul.w	r3, r1, r3
 803b020:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803b022:	2b00      	cmp	r3, #0
 803b024:	d112      	bne.n	803b04c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 803b026:	78fb      	ldrb	r3, [r7, #3]
 803b028:	f003 020f 	and.w	r2, r3, #15
 803b02c:	6879      	ldr	r1, [r7, #4]
 803b02e:	4613      	mov	r3, r2
 803b030:	009b      	lsls	r3, r3, #2
 803b032:	4413      	add	r3, r2
 803b034:	009b      	lsls	r3, r3, #2
 803b036:	440b      	add	r3, r1
 803b038:	3318      	adds	r3, #24
 803b03a:	2200      	movs	r2, #0
 803b03c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 803b03e:	78f9      	ldrb	r1, [r7, #3]
 803b040:	2300      	movs	r3, #0
 803b042:	2200      	movs	r2, #0
 803b044:	6878      	ldr	r0, [r7, #4]
 803b046:	f002 f95a 	bl	803d2fe <USBD_LL_Transmit>
 803b04a:	e01f      	b.n	803b08c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 803b04c:	68bb      	ldr	r3, [r7, #8]
 803b04e:	2200      	movs	r2, #0
 803b050:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 803b054:	687b      	ldr	r3, [r7, #4]
 803b056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803b05a:	687a      	ldr	r2, [r7, #4]
 803b05c:	33b0      	adds	r3, #176	; 0xb0
 803b05e:	009b      	lsls	r3, r3, #2
 803b060:	4413      	add	r3, r2
 803b062:	685b      	ldr	r3, [r3, #4]
 803b064:	691b      	ldr	r3, [r3, #16]
 803b066:	2b00      	cmp	r3, #0
 803b068:	d010      	beq.n	803b08c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 803b06a:	687b      	ldr	r3, [r7, #4]
 803b06c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803b070:	687a      	ldr	r2, [r7, #4]
 803b072:	33b0      	adds	r3, #176	; 0xb0
 803b074:	009b      	lsls	r3, r3, #2
 803b076:	4413      	add	r3, r2
 803b078:	685b      	ldr	r3, [r3, #4]
 803b07a:	691b      	ldr	r3, [r3, #16]
 803b07c:	68ba      	ldr	r2, [r7, #8]
 803b07e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 803b082:	68ba      	ldr	r2, [r7, #8]
 803b084:	f502 7104 	add.w	r1, r2, #528	; 0x210
 803b088:	78fa      	ldrb	r2, [r7, #3]
 803b08a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 803b08c:	2300      	movs	r3, #0
}
 803b08e:	4618      	mov	r0, r3
 803b090:	3710      	adds	r7, #16
 803b092:	46bd      	mov	sp, r7
 803b094:	bd80      	pop	{r7, pc}

0803b096 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803b096:	b580      	push	{r7, lr}
 803b098:	b084      	sub	sp, #16
 803b09a:	af00      	add	r7, sp, #0
 803b09c:	6078      	str	r0, [r7, #4]
 803b09e:	460b      	mov	r3, r1
 803b0a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803b0a2:	687b      	ldr	r3, [r7, #4]
 803b0a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b0a8:	687b      	ldr	r3, [r7, #4]
 803b0aa:	32b0      	adds	r2, #176	; 0xb0
 803b0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b0b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803b0b2:	687b      	ldr	r3, [r7, #4]
 803b0b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b0b8:	687b      	ldr	r3, [r7, #4]
 803b0ba:	32b0      	adds	r2, #176	; 0xb0
 803b0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b0c0:	2b00      	cmp	r3, #0
 803b0c2:	d101      	bne.n	803b0c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 803b0c4:	2303      	movs	r3, #3
 803b0c6:	e01a      	b.n	803b0fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 803b0c8:	78fb      	ldrb	r3, [r7, #3]
 803b0ca:	4619      	mov	r1, r3
 803b0cc:	6878      	ldr	r0, [r7, #4]
 803b0ce:	f002 f958 	bl	803d382 <USBD_LL_GetRxDataSize>
 803b0d2:	4602      	mov	r2, r0
 803b0d4:	68fb      	ldr	r3, [r7, #12]
 803b0d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 803b0da:	687b      	ldr	r3, [r7, #4]
 803b0dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803b0e0:	687a      	ldr	r2, [r7, #4]
 803b0e2:	33b0      	adds	r3, #176	; 0xb0
 803b0e4:	009b      	lsls	r3, r3, #2
 803b0e6:	4413      	add	r3, r2
 803b0e8:	685b      	ldr	r3, [r3, #4]
 803b0ea:	68db      	ldr	r3, [r3, #12]
 803b0ec:	68fa      	ldr	r2, [r7, #12]
 803b0ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 803b0f2:	68fa      	ldr	r2, [r7, #12]
 803b0f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 803b0f8:	4611      	mov	r1, r2
 803b0fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 803b0fc:	2300      	movs	r3, #0
}
 803b0fe:	4618      	mov	r0, r3
 803b100:	3710      	adds	r7, #16
 803b102:	46bd      	mov	sp, r7
 803b104:	bd80      	pop	{r7, pc}

0803b106 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 803b106:	b580      	push	{r7, lr}
 803b108:	b084      	sub	sp, #16
 803b10a:	af00      	add	r7, sp, #0
 803b10c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803b10e:	687b      	ldr	r3, [r7, #4]
 803b110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b114:	687b      	ldr	r3, [r7, #4]
 803b116:	32b0      	adds	r2, #176	; 0xb0
 803b118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b11c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 803b11e:	68fb      	ldr	r3, [r7, #12]
 803b120:	2b00      	cmp	r3, #0
 803b122:	d101      	bne.n	803b128 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 803b124:	2303      	movs	r3, #3
 803b126:	e025      	b.n	803b174 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 803b128:	687b      	ldr	r3, [r7, #4]
 803b12a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803b12e:	687a      	ldr	r2, [r7, #4]
 803b130:	33b0      	adds	r3, #176	; 0xb0
 803b132:	009b      	lsls	r3, r3, #2
 803b134:	4413      	add	r3, r2
 803b136:	685b      	ldr	r3, [r3, #4]
 803b138:	2b00      	cmp	r3, #0
 803b13a:	d01a      	beq.n	803b172 <USBD_CDC_EP0_RxReady+0x6c>
 803b13c:	68fb      	ldr	r3, [r7, #12]
 803b13e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 803b142:	2bff      	cmp	r3, #255	; 0xff
 803b144:	d015      	beq.n	803b172 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803b146:	687b      	ldr	r3, [r7, #4]
 803b148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803b14c:	687a      	ldr	r2, [r7, #4]
 803b14e:	33b0      	adds	r3, #176	; 0xb0
 803b150:	009b      	lsls	r3, r3, #2
 803b152:	4413      	add	r3, r2
 803b154:	685b      	ldr	r3, [r3, #4]
 803b156:	689b      	ldr	r3, [r3, #8]
 803b158:	68fa      	ldr	r2, [r7, #12]
 803b15a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 803b15e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 803b160:	68fa      	ldr	r2, [r7, #12]
 803b162:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803b166:	b292      	uxth	r2, r2
 803b168:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 803b16a:	68fb      	ldr	r3, [r7, #12]
 803b16c:	22ff      	movs	r2, #255	; 0xff
 803b16e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 803b172:	2300      	movs	r3, #0
}
 803b174:	4618      	mov	r0, r3
 803b176:	3710      	adds	r7, #16
 803b178:	46bd      	mov	sp, r7
 803b17a:	bd80      	pop	{r7, pc}

0803b17c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 803b17c:	b580      	push	{r7, lr}
 803b17e:	b086      	sub	sp, #24
 803b180:	af00      	add	r7, sp, #0
 803b182:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803b184:	2182      	movs	r1, #130	; 0x82
 803b186:	4818      	ldr	r0, [pc, #96]	; (803b1e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 803b188:	f000 fd09 	bl	803bb9e <USBD_GetEpDesc>
 803b18c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803b18e:	2101      	movs	r1, #1
 803b190:	4815      	ldr	r0, [pc, #84]	; (803b1e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 803b192:	f000 fd04 	bl	803bb9e <USBD_GetEpDesc>
 803b196:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803b198:	2181      	movs	r1, #129	; 0x81
 803b19a:	4813      	ldr	r0, [pc, #76]	; (803b1e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 803b19c:	f000 fcff 	bl	803bb9e <USBD_GetEpDesc>
 803b1a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803b1a2:	697b      	ldr	r3, [r7, #20]
 803b1a4:	2b00      	cmp	r3, #0
 803b1a6:	d002      	beq.n	803b1ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 803b1a8:	697b      	ldr	r3, [r7, #20]
 803b1aa:	2210      	movs	r2, #16
 803b1ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803b1ae:	693b      	ldr	r3, [r7, #16]
 803b1b0:	2b00      	cmp	r3, #0
 803b1b2:	d006      	beq.n	803b1c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803b1b4:	693b      	ldr	r3, [r7, #16]
 803b1b6:	2200      	movs	r2, #0
 803b1b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803b1bc:	711a      	strb	r2, [r3, #4]
 803b1be:	2200      	movs	r2, #0
 803b1c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803b1c2:	68fb      	ldr	r3, [r7, #12]
 803b1c4:	2b00      	cmp	r3, #0
 803b1c6:	d006      	beq.n	803b1d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803b1c8:	68fb      	ldr	r3, [r7, #12]
 803b1ca:	2200      	movs	r2, #0
 803b1cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803b1d0:	711a      	strb	r2, [r3, #4]
 803b1d2:	2200      	movs	r2, #0
 803b1d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803b1d6:	687b      	ldr	r3, [r7, #4]
 803b1d8:	2243      	movs	r2, #67	; 0x43
 803b1da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803b1dc:	4b02      	ldr	r3, [pc, #8]	; (803b1e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 803b1de:	4618      	mov	r0, r3
 803b1e0:	3718      	adds	r7, #24
 803b1e2:	46bd      	mov	sp, r7
 803b1e4:	bd80      	pop	{r7, pc}
 803b1e6:	bf00      	nop
 803b1e8:	24000054 	.word	0x24000054

0803b1ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 803b1ec:	b580      	push	{r7, lr}
 803b1ee:	b086      	sub	sp, #24
 803b1f0:	af00      	add	r7, sp, #0
 803b1f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803b1f4:	2182      	movs	r1, #130	; 0x82
 803b1f6:	4818      	ldr	r0, [pc, #96]	; (803b258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803b1f8:	f000 fcd1 	bl	803bb9e <USBD_GetEpDesc>
 803b1fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803b1fe:	2101      	movs	r1, #1
 803b200:	4815      	ldr	r0, [pc, #84]	; (803b258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803b202:	f000 fccc 	bl	803bb9e <USBD_GetEpDesc>
 803b206:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803b208:	2181      	movs	r1, #129	; 0x81
 803b20a:	4813      	ldr	r0, [pc, #76]	; (803b258 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803b20c:	f000 fcc7 	bl	803bb9e <USBD_GetEpDesc>
 803b210:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803b212:	697b      	ldr	r3, [r7, #20]
 803b214:	2b00      	cmp	r3, #0
 803b216:	d002      	beq.n	803b21e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 803b218:	697b      	ldr	r3, [r7, #20]
 803b21a:	2210      	movs	r2, #16
 803b21c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803b21e:	693b      	ldr	r3, [r7, #16]
 803b220:	2b00      	cmp	r3, #0
 803b222:	d006      	beq.n	803b232 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 803b224:	693b      	ldr	r3, [r7, #16]
 803b226:	2200      	movs	r2, #0
 803b228:	711a      	strb	r2, [r3, #4]
 803b22a:	2200      	movs	r2, #0
 803b22c:	f042 0202 	orr.w	r2, r2, #2
 803b230:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803b232:	68fb      	ldr	r3, [r7, #12]
 803b234:	2b00      	cmp	r3, #0
 803b236:	d006      	beq.n	803b246 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 803b238:	68fb      	ldr	r3, [r7, #12]
 803b23a:	2200      	movs	r2, #0
 803b23c:	711a      	strb	r2, [r3, #4]
 803b23e:	2200      	movs	r2, #0
 803b240:	f042 0202 	orr.w	r2, r2, #2
 803b244:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803b246:	687b      	ldr	r3, [r7, #4]
 803b248:	2243      	movs	r2, #67	; 0x43
 803b24a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803b24c:	4b02      	ldr	r3, [pc, #8]	; (803b258 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 803b24e:	4618      	mov	r0, r3
 803b250:	3718      	adds	r7, #24
 803b252:	46bd      	mov	sp, r7
 803b254:	bd80      	pop	{r7, pc}
 803b256:	bf00      	nop
 803b258:	24000054 	.word	0x24000054

0803b25c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 803b25c:	b580      	push	{r7, lr}
 803b25e:	b086      	sub	sp, #24
 803b260:	af00      	add	r7, sp, #0
 803b262:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803b264:	2182      	movs	r1, #130	; 0x82
 803b266:	4818      	ldr	r0, [pc, #96]	; (803b2c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803b268:	f000 fc99 	bl	803bb9e <USBD_GetEpDesc>
 803b26c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803b26e:	2101      	movs	r1, #1
 803b270:	4815      	ldr	r0, [pc, #84]	; (803b2c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803b272:	f000 fc94 	bl	803bb9e <USBD_GetEpDesc>
 803b276:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803b278:	2181      	movs	r1, #129	; 0x81
 803b27a:	4813      	ldr	r0, [pc, #76]	; (803b2c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803b27c:	f000 fc8f 	bl	803bb9e <USBD_GetEpDesc>
 803b280:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803b282:	697b      	ldr	r3, [r7, #20]
 803b284:	2b00      	cmp	r3, #0
 803b286:	d002      	beq.n	803b28e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 803b288:	697b      	ldr	r3, [r7, #20]
 803b28a:	2210      	movs	r2, #16
 803b28c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803b28e:	693b      	ldr	r3, [r7, #16]
 803b290:	2b00      	cmp	r3, #0
 803b292:	d006      	beq.n	803b2a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803b294:	693b      	ldr	r3, [r7, #16]
 803b296:	2200      	movs	r2, #0
 803b298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803b29c:	711a      	strb	r2, [r3, #4]
 803b29e:	2200      	movs	r2, #0
 803b2a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803b2a2:	68fb      	ldr	r3, [r7, #12]
 803b2a4:	2b00      	cmp	r3, #0
 803b2a6:	d006      	beq.n	803b2b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803b2a8:	68fb      	ldr	r3, [r7, #12]
 803b2aa:	2200      	movs	r2, #0
 803b2ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803b2b0:	711a      	strb	r2, [r3, #4]
 803b2b2:	2200      	movs	r2, #0
 803b2b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803b2b6:	687b      	ldr	r3, [r7, #4]
 803b2b8:	2243      	movs	r2, #67	; 0x43
 803b2ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803b2bc:	4b02      	ldr	r3, [pc, #8]	; (803b2c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 803b2be:	4618      	mov	r0, r3
 803b2c0:	3718      	adds	r7, #24
 803b2c2:	46bd      	mov	sp, r7
 803b2c4:	bd80      	pop	{r7, pc}
 803b2c6:	bf00      	nop
 803b2c8:	24000054 	.word	0x24000054

0803b2cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 803b2cc:	b480      	push	{r7}
 803b2ce:	b083      	sub	sp, #12
 803b2d0:	af00      	add	r7, sp, #0
 803b2d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 803b2d4:	687b      	ldr	r3, [r7, #4]
 803b2d6:	220a      	movs	r2, #10
 803b2d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 803b2da:	4b03      	ldr	r3, [pc, #12]	; (803b2e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 803b2dc:	4618      	mov	r0, r3
 803b2de:	370c      	adds	r7, #12
 803b2e0:	46bd      	mov	sp, r7
 803b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b2e6:	4770      	bx	lr
 803b2e8:	24000010 	.word	0x24000010

0803b2ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 803b2ec:	b480      	push	{r7}
 803b2ee:	b083      	sub	sp, #12
 803b2f0:	af00      	add	r7, sp, #0
 803b2f2:	6078      	str	r0, [r7, #4]
 803b2f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 803b2f6:	683b      	ldr	r3, [r7, #0]
 803b2f8:	2b00      	cmp	r3, #0
 803b2fa:	d101      	bne.n	803b300 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 803b2fc:	2303      	movs	r3, #3
 803b2fe:	e009      	b.n	803b314 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 803b300:	687b      	ldr	r3, [r7, #4]
 803b302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803b306:	687a      	ldr	r2, [r7, #4]
 803b308:	33b0      	adds	r3, #176	; 0xb0
 803b30a:	009b      	lsls	r3, r3, #2
 803b30c:	4413      	add	r3, r2
 803b30e:	683a      	ldr	r2, [r7, #0]
 803b310:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 803b312:	2300      	movs	r3, #0
}
 803b314:	4618      	mov	r0, r3
 803b316:	370c      	adds	r7, #12
 803b318:	46bd      	mov	sp, r7
 803b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b31e:	4770      	bx	lr

0803b320 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 803b320:	b480      	push	{r7}
 803b322:	b087      	sub	sp, #28
 803b324:	af00      	add	r7, sp, #0
 803b326:	60f8      	str	r0, [r7, #12]
 803b328:	60b9      	str	r1, [r7, #8]
 803b32a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803b32c:	68fb      	ldr	r3, [r7, #12]
 803b32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b332:	68fb      	ldr	r3, [r7, #12]
 803b334:	32b0      	adds	r2, #176	; 0xb0
 803b336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b33a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 803b33c:	697b      	ldr	r3, [r7, #20]
 803b33e:	2b00      	cmp	r3, #0
 803b340:	d101      	bne.n	803b346 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 803b342:	2303      	movs	r3, #3
 803b344:	e008      	b.n	803b358 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 803b346:	697b      	ldr	r3, [r7, #20]
 803b348:	68ba      	ldr	r2, [r7, #8]
 803b34a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 803b34e:	697b      	ldr	r3, [r7, #20]
 803b350:	687a      	ldr	r2, [r7, #4]
 803b352:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 803b356:	2300      	movs	r3, #0
}
 803b358:	4618      	mov	r0, r3
 803b35a:	371c      	adds	r7, #28
 803b35c:	46bd      	mov	sp, r7
 803b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b362:	4770      	bx	lr

0803b364 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 803b364:	b480      	push	{r7}
 803b366:	b085      	sub	sp, #20
 803b368:	af00      	add	r7, sp, #0
 803b36a:	6078      	str	r0, [r7, #4]
 803b36c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803b36e:	687b      	ldr	r3, [r7, #4]
 803b370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b374:	687b      	ldr	r3, [r7, #4]
 803b376:	32b0      	adds	r2, #176	; 0xb0
 803b378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b37c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 803b37e:	68fb      	ldr	r3, [r7, #12]
 803b380:	2b00      	cmp	r3, #0
 803b382:	d101      	bne.n	803b388 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 803b384:	2303      	movs	r3, #3
 803b386:	e004      	b.n	803b392 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 803b388:	68fb      	ldr	r3, [r7, #12]
 803b38a:	683a      	ldr	r2, [r7, #0]
 803b38c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 803b390:	2300      	movs	r3, #0
}
 803b392:	4618      	mov	r0, r3
 803b394:	3714      	adds	r7, #20
 803b396:	46bd      	mov	sp, r7
 803b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b39c:	4770      	bx	lr
	...

0803b3a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 803b3a0:	b580      	push	{r7, lr}
 803b3a2:	b084      	sub	sp, #16
 803b3a4:	af00      	add	r7, sp, #0
 803b3a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803b3a8:	687b      	ldr	r3, [r7, #4]
 803b3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b3ae:	687b      	ldr	r3, [r7, #4]
 803b3b0:	32b0      	adds	r2, #176	; 0xb0
 803b3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b3b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803b3b8:	687b      	ldr	r3, [r7, #4]
 803b3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b3be:	687b      	ldr	r3, [r7, #4]
 803b3c0:	32b0      	adds	r2, #176	; 0xb0
 803b3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b3c6:	2b00      	cmp	r3, #0
 803b3c8:	d101      	bne.n	803b3ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 803b3ca:	2303      	movs	r3, #3
 803b3cc:	e018      	b.n	803b400 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803b3ce:	687b      	ldr	r3, [r7, #4]
 803b3d0:	7c1b      	ldrb	r3, [r3, #16]
 803b3d2:	2b00      	cmp	r3, #0
 803b3d4:	d10a      	bne.n	803b3ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803b3d6:	4b0c      	ldr	r3, [pc, #48]	; (803b408 <USBD_CDC_ReceivePacket+0x68>)
 803b3d8:	7819      	ldrb	r1, [r3, #0]
 803b3da:	68fb      	ldr	r3, [r7, #12]
 803b3dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803b3e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 803b3e4:	6878      	ldr	r0, [r7, #4]
 803b3e6:	f001 ffab 	bl	803d340 <USBD_LL_PrepareReceive>
 803b3ea:	e008      	b.n	803b3fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803b3ec:	4b06      	ldr	r3, [pc, #24]	; (803b408 <USBD_CDC_ReceivePacket+0x68>)
 803b3ee:	7819      	ldrb	r1, [r3, #0]
 803b3f0:	68fb      	ldr	r3, [r7, #12]
 803b3f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803b3f6:	2340      	movs	r3, #64	; 0x40
 803b3f8:	6878      	ldr	r0, [r7, #4]
 803b3fa:	f001 ffa1 	bl	803d340 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 803b3fe:	2300      	movs	r3, #0
}
 803b400:	4618      	mov	r0, r3
 803b402:	3710      	adds	r7, #16
 803b404:	46bd      	mov	sp, r7
 803b406:	bd80      	pop	{r7, pc}
 803b408:	24000098 	.word	0x24000098

0803b40c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 803b40c:	b580      	push	{r7, lr}
 803b40e:	b086      	sub	sp, #24
 803b410:	af00      	add	r7, sp, #0
 803b412:	60f8      	str	r0, [r7, #12]
 803b414:	60b9      	str	r1, [r7, #8]
 803b416:	4613      	mov	r3, r2
 803b418:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 803b41a:	68fb      	ldr	r3, [r7, #12]
 803b41c:	2b00      	cmp	r3, #0
 803b41e:	d101      	bne.n	803b424 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 803b420:	2303      	movs	r3, #3
 803b422:	e01f      	b.n	803b464 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 803b424:	68fb      	ldr	r3, [r7, #12]
 803b426:	2200      	movs	r2, #0
 803b428:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 803b42c:	68fb      	ldr	r3, [r7, #12]
 803b42e:	2200      	movs	r2, #0
 803b430:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 803b434:	68fb      	ldr	r3, [r7, #12]
 803b436:	2200      	movs	r2, #0
 803b438:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 803b43c:	68bb      	ldr	r3, [r7, #8]
 803b43e:	2b00      	cmp	r3, #0
 803b440:	d003      	beq.n	803b44a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 803b442:	68fb      	ldr	r3, [r7, #12]
 803b444:	68ba      	ldr	r2, [r7, #8]
 803b446:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803b44a:	68fb      	ldr	r3, [r7, #12]
 803b44c:	2201      	movs	r2, #1
 803b44e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 803b452:	68fb      	ldr	r3, [r7, #12]
 803b454:	79fa      	ldrb	r2, [r7, #7]
 803b456:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 803b458:	68f8      	ldr	r0, [r7, #12]
 803b45a:	f001 fe17 	bl	803d08c <USBD_LL_Init>
 803b45e:	4603      	mov	r3, r0
 803b460:	75fb      	strb	r3, [r7, #23]

  return ret;
 803b462:	7dfb      	ldrb	r3, [r7, #23]
}
 803b464:	4618      	mov	r0, r3
 803b466:	3718      	adds	r7, #24
 803b468:	46bd      	mov	sp, r7
 803b46a:	bd80      	pop	{r7, pc}

0803b46c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 803b46c:	b580      	push	{r7, lr}
 803b46e:	b084      	sub	sp, #16
 803b470:	af00      	add	r7, sp, #0
 803b472:	6078      	str	r0, [r7, #4]
 803b474:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803b476:	2300      	movs	r3, #0
 803b478:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 803b47a:	683b      	ldr	r3, [r7, #0]
 803b47c:	2b00      	cmp	r3, #0
 803b47e:	d101      	bne.n	803b484 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 803b480:	2303      	movs	r3, #3
 803b482:	e025      	b.n	803b4d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 803b484:	687b      	ldr	r3, [r7, #4]
 803b486:	683a      	ldr	r2, [r7, #0]
 803b488:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 803b48c:	687b      	ldr	r3, [r7, #4]
 803b48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b492:	687b      	ldr	r3, [r7, #4]
 803b494:	32ae      	adds	r2, #174	; 0xae
 803b496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803b49c:	2b00      	cmp	r3, #0
 803b49e:	d00f      	beq.n	803b4c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 803b4a0:	687b      	ldr	r3, [r7, #4]
 803b4a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803b4a6:	687b      	ldr	r3, [r7, #4]
 803b4a8:	32ae      	adds	r2, #174	; 0xae
 803b4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803b4b0:	f107 020e 	add.w	r2, r7, #14
 803b4b4:	4610      	mov	r0, r2
 803b4b6:	4798      	blx	r3
 803b4b8:	4602      	mov	r2, r0
 803b4ba:	687b      	ldr	r3, [r7, #4]
 803b4bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 803b4c0:	687b      	ldr	r3, [r7, #4]
 803b4c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 803b4c6:	1c5a      	adds	r2, r3, #1
 803b4c8:	687b      	ldr	r3, [r7, #4]
 803b4ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 803b4ce:	2300      	movs	r3, #0
}
 803b4d0:	4618      	mov	r0, r3
 803b4d2:	3710      	adds	r7, #16
 803b4d4:	46bd      	mov	sp, r7
 803b4d6:	bd80      	pop	{r7, pc}

0803b4d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 803b4d8:	b580      	push	{r7, lr}
 803b4da:	b082      	sub	sp, #8
 803b4dc:	af00      	add	r7, sp, #0
 803b4de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 803b4e0:	6878      	ldr	r0, [r7, #4]
 803b4e2:	f001 fe23 	bl	803d12c <USBD_LL_Start>
 803b4e6:	4603      	mov	r3, r0
}
 803b4e8:	4618      	mov	r0, r3
 803b4ea:	3708      	adds	r7, #8
 803b4ec:	46bd      	mov	sp, r7
 803b4ee:	bd80      	pop	{r7, pc}

0803b4f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 803b4f0:	b480      	push	{r7}
 803b4f2:	b083      	sub	sp, #12
 803b4f4:	af00      	add	r7, sp, #0
 803b4f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803b4f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 803b4fa:	4618      	mov	r0, r3
 803b4fc:	370c      	adds	r7, #12
 803b4fe:	46bd      	mov	sp, r7
 803b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b504:	4770      	bx	lr

0803b506 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803b506:	b580      	push	{r7, lr}
 803b508:	b084      	sub	sp, #16
 803b50a:	af00      	add	r7, sp, #0
 803b50c:	6078      	str	r0, [r7, #4]
 803b50e:	460b      	mov	r3, r1
 803b510:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 803b512:	2300      	movs	r3, #0
 803b514:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803b516:	687b      	ldr	r3, [r7, #4]
 803b518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b51c:	2b00      	cmp	r3, #0
 803b51e:	d009      	beq.n	803b534 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 803b520:	687b      	ldr	r3, [r7, #4]
 803b522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b526:	681b      	ldr	r3, [r3, #0]
 803b528:	78fa      	ldrb	r2, [r7, #3]
 803b52a:	4611      	mov	r1, r2
 803b52c:	6878      	ldr	r0, [r7, #4]
 803b52e:	4798      	blx	r3
 803b530:	4603      	mov	r3, r0
 803b532:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803b534:	7bfb      	ldrb	r3, [r7, #15]
}
 803b536:	4618      	mov	r0, r3
 803b538:	3710      	adds	r7, #16
 803b53a:	46bd      	mov	sp, r7
 803b53c:	bd80      	pop	{r7, pc}

0803b53e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803b53e:	b580      	push	{r7, lr}
 803b540:	b084      	sub	sp, #16
 803b542:	af00      	add	r7, sp, #0
 803b544:	6078      	str	r0, [r7, #4]
 803b546:	460b      	mov	r3, r1
 803b548:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 803b54a:	2300      	movs	r3, #0
 803b54c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 803b54e:	687b      	ldr	r3, [r7, #4]
 803b550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b554:	685b      	ldr	r3, [r3, #4]
 803b556:	78fa      	ldrb	r2, [r7, #3]
 803b558:	4611      	mov	r1, r2
 803b55a:	6878      	ldr	r0, [r7, #4]
 803b55c:	4798      	blx	r3
 803b55e:	4603      	mov	r3, r0
 803b560:	2b00      	cmp	r3, #0
 803b562:	d001      	beq.n	803b568 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 803b564:	2303      	movs	r3, #3
 803b566:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803b568:	7bfb      	ldrb	r3, [r7, #15]
}
 803b56a:	4618      	mov	r0, r3
 803b56c:	3710      	adds	r7, #16
 803b56e:	46bd      	mov	sp, r7
 803b570:	bd80      	pop	{r7, pc}

0803b572 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 803b572:	b580      	push	{r7, lr}
 803b574:	b084      	sub	sp, #16
 803b576:	af00      	add	r7, sp, #0
 803b578:	6078      	str	r0, [r7, #4]
 803b57a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 803b57c:	687b      	ldr	r3, [r7, #4]
 803b57e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803b582:	6839      	ldr	r1, [r7, #0]
 803b584:	4618      	mov	r0, r3
 803b586:	f001 f908 	bl	803c79a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 803b58a:	687b      	ldr	r3, [r7, #4]
 803b58c:	2201      	movs	r2, #1
 803b58e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 803b592:	687b      	ldr	r3, [r7, #4]
 803b594:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 803b598:	461a      	mov	r2, r3
 803b59a:	687b      	ldr	r3, [r7, #4]
 803b59c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 803b5a0:	687b      	ldr	r3, [r7, #4]
 803b5a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803b5a6:	f003 031f 	and.w	r3, r3, #31
 803b5aa:	2b02      	cmp	r3, #2
 803b5ac:	d01a      	beq.n	803b5e4 <USBD_LL_SetupStage+0x72>
 803b5ae:	2b02      	cmp	r3, #2
 803b5b0:	d822      	bhi.n	803b5f8 <USBD_LL_SetupStage+0x86>
 803b5b2:	2b00      	cmp	r3, #0
 803b5b4:	d002      	beq.n	803b5bc <USBD_LL_SetupStage+0x4a>
 803b5b6:	2b01      	cmp	r3, #1
 803b5b8:	d00a      	beq.n	803b5d0 <USBD_LL_SetupStage+0x5e>
 803b5ba:	e01d      	b.n	803b5f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 803b5bc:	687b      	ldr	r3, [r7, #4]
 803b5be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803b5c2:	4619      	mov	r1, r3
 803b5c4:	6878      	ldr	r0, [r7, #4]
 803b5c6:	f000 fb5f 	bl	803bc88 <USBD_StdDevReq>
 803b5ca:	4603      	mov	r3, r0
 803b5cc:	73fb      	strb	r3, [r7, #15]
      break;
 803b5ce:	e020      	b.n	803b612 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 803b5d0:	687b      	ldr	r3, [r7, #4]
 803b5d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803b5d6:	4619      	mov	r1, r3
 803b5d8:	6878      	ldr	r0, [r7, #4]
 803b5da:	f000 fbc7 	bl	803bd6c <USBD_StdItfReq>
 803b5de:	4603      	mov	r3, r0
 803b5e0:	73fb      	strb	r3, [r7, #15]
      break;
 803b5e2:	e016      	b.n	803b612 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 803b5e4:	687b      	ldr	r3, [r7, #4]
 803b5e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803b5ea:	4619      	mov	r1, r3
 803b5ec:	6878      	ldr	r0, [r7, #4]
 803b5ee:	f000 fc29 	bl	803be44 <USBD_StdEPReq>
 803b5f2:	4603      	mov	r3, r0
 803b5f4:	73fb      	strb	r3, [r7, #15]
      break;
 803b5f6:	e00c      	b.n	803b612 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 803b5f8:	687b      	ldr	r3, [r7, #4]
 803b5fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803b5fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 803b602:	b2db      	uxtb	r3, r3
 803b604:	4619      	mov	r1, r3
 803b606:	6878      	ldr	r0, [r7, #4]
 803b608:	f001 fdf0 	bl	803d1ec <USBD_LL_StallEP>
 803b60c:	4603      	mov	r3, r0
 803b60e:	73fb      	strb	r3, [r7, #15]
      break;
 803b610:	bf00      	nop
  }

  return ret;
 803b612:	7bfb      	ldrb	r3, [r7, #15]
}
 803b614:	4618      	mov	r0, r3
 803b616:	3710      	adds	r7, #16
 803b618:	46bd      	mov	sp, r7
 803b61a:	bd80      	pop	{r7, pc}

0803b61c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 803b61c:	b580      	push	{r7, lr}
 803b61e:	b086      	sub	sp, #24
 803b620:	af00      	add	r7, sp, #0
 803b622:	60f8      	str	r0, [r7, #12]
 803b624:	460b      	mov	r3, r1
 803b626:	607a      	str	r2, [r7, #4]
 803b628:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 803b62a:	2300      	movs	r3, #0
 803b62c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 803b62e:	7afb      	ldrb	r3, [r7, #11]
 803b630:	2b00      	cmp	r3, #0
 803b632:	d16e      	bne.n	803b712 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 803b634:	68fb      	ldr	r3, [r7, #12]
 803b636:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 803b63a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 803b63c:	68fb      	ldr	r3, [r7, #12]
 803b63e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803b642:	2b03      	cmp	r3, #3
 803b644:	f040 8098 	bne.w	803b778 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 803b648:	693b      	ldr	r3, [r7, #16]
 803b64a:	689a      	ldr	r2, [r3, #8]
 803b64c:	693b      	ldr	r3, [r7, #16]
 803b64e:	68db      	ldr	r3, [r3, #12]
 803b650:	429a      	cmp	r2, r3
 803b652:	d913      	bls.n	803b67c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 803b654:	693b      	ldr	r3, [r7, #16]
 803b656:	689a      	ldr	r2, [r3, #8]
 803b658:	693b      	ldr	r3, [r7, #16]
 803b65a:	68db      	ldr	r3, [r3, #12]
 803b65c:	1ad2      	subs	r2, r2, r3
 803b65e:	693b      	ldr	r3, [r7, #16]
 803b660:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 803b662:	693b      	ldr	r3, [r7, #16]
 803b664:	68da      	ldr	r2, [r3, #12]
 803b666:	693b      	ldr	r3, [r7, #16]
 803b668:	689b      	ldr	r3, [r3, #8]
 803b66a:	4293      	cmp	r3, r2
 803b66c:	bf28      	it	cs
 803b66e:	4613      	movcs	r3, r2
 803b670:	461a      	mov	r2, r3
 803b672:	6879      	ldr	r1, [r7, #4]
 803b674:	68f8      	ldr	r0, [r7, #12]
 803b676:	f001 f984 	bl	803c982 <USBD_CtlContinueRx>
 803b67a:	e07d      	b.n	803b778 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 803b67c:	68fb      	ldr	r3, [r7, #12]
 803b67e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803b682:	f003 031f 	and.w	r3, r3, #31
 803b686:	2b02      	cmp	r3, #2
 803b688:	d014      	beq.n	803b6b4 <USBD_LL_DataOutStage+0x98>
 803b68a:	2b02      	cmp	r3, #2
 803b68c:	d81d      	bhi.n	803b6ca <USBD_LL_DataOutStage+0xae>
 803b68e:	2b00      	cmp	r3, #0
 803b690:	d002      	beq.n	803b698 <USBD_LL_DataOutStage+0x7c>
 803b692:	2b01      	cmp	r3, #1
 803b694:	d003      	beq.n	803b69e <USBD_LL_DataOutStage+0x82>
 803b696:	e018      	b.n	803b6ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 803b698:	2300      	movs	r3, #0
 803b69a:	75bb      	strb	r3, [r7, #22]
            break;
 803b69c:	e018      	b.n	803b6d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 803b69e:	68fb      	ldr	r3, [r7, #12]
 803b6a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 803b6a4:	b2db      	uxtb	r3, r3
 803b6a6:	4619      	mov	r1, r3
 803b6a8:	68f8      	ldr	r0, [r7, #12]
 803b6aa:	f000 fa5e 	bl	803bb6a <USBD_CoreFindIF>
 803b6ae:	4603      	mov	r3, r0
 803b6b0:	75bb      	strb	r3, [r7, #22]
            break;
 803b6b2:	e00d      	b.n	803b6d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 803b6b4:	68fb      	ldr	r3, [r7, #12]
 803b6b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 803b6ba:	b2db      	uxtb	r3, r3
 803b6bc:	4619      	mov	r1, r3
 803b6be:	68f8      	ldr	r0, [r7, #12]
 803b6c0:	f000 fa60 	bl	803bb84 <USBD_CoreFindEP>
 803b6c4:	4603      	mov	r3, r0
 803b6c6:	75bb      	strb	r3, [r7, #22]
            break;
 803b6c8:	e002      	b.n	803b6d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 803b6ca:	2300      	movs	r3, #0
 803b6cc:	75bb      	strb	r3, [r7, #22]
            break;
 803b6ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 803b6d0:	7dbb      	ldrb	r3, [r7, #22]
 803b6d2:	2b00      	cmp	r3, #0
 803b6d4:	d119      	bne.n	803b70a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803b6d6:	68fb      	ldr	r3, [r7, #12]
 803b6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b6dc:	b2db      	uxtb	r3, r3
 803b6de:	2b03      	cmp	r3, #3
 803b6e0:	d113      	bne.n	803b70a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 803b6e2:	7dba      	ldrb	r2, [r7, #22]
 803b6e4:	68fb      	ldr	r3, [r7, #12]
 803b6e6:	32ae      	adds	r2, #174	; 0xae
 803b6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b6ec:	691b      	ldr	r3, [r3, #16]
 803b6ee:	2b00      	cmp	r3, #0
 803b6f0:	d00b      	beq.n	803b70a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 803b6f2:	7dba      	ldrb	r2, [r7, #22]
 803b6f4:	68fb      	ldr	r3, [r7, #12]
 803b6f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 803b6fa:	7dba      	ldrb	r2, [r7, #22]
 803b6fc:	68fb      	ldr	r3, [r7, #12]
 803b6fe:	32ae      	adds	r2, #174	; 0xae
 803b700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b704:	691b      	ldr	r3, [r3, #16]
 803b706:	68f8      	ldr	r0, [r7, #12]
 803b708:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 803b70a:	68f8      	ldr	r0, [r7, #12]
 803b70c:	f001 f94a 	bl	803c9a4 <USBD_CtlSendStatus>
 803b710:	e032      	b.n	803b778 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 803b712:	7afb      	ldrb	r3, [r7, #11]
 803b714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803b718:	b2db      	uxtb	r3, r3
 803b71a:	4619      	mov	r1, r3
 803b71c:	68f8      	ldr	r0, [r7, #12]
 803b71e:	f000 fa31 	bl	803bb84 <USBD_CoreFindEP>
 803b722:	4603      	mov	r3, r0
 803b724:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803b726:	7dbb      	ldrb	r3, [r7, #22]
 803b728:	2bff      	cmp	r3, #255	; 0xff
 803b72a:	d025      	beq.n	803b778 <USBD_LL_DataOutStage+0x15c>
 803b72c:	7dbb      	ldrb	r3, [r7, #22]
 803b72e:	2b00      	cmp	r3, #0
 803b730:	d122      	bne.n	803b778 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803b732:	68fb      	ldr	r3, [r7, #12]
 803b734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b738:	b2db      	uxtb	r3, r3
 803b73a:	2b03      	cmp	r3, #3
 803b73c:	d117      	bne.n	803b76e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 803b73e:	7dba      	ldrb	r2, [r7, #22]
 803b740:	68fb      	ldr	r3, [r7, #12]
 803b742:	32ae      	adds	r2, #174	; 0xae
 803b744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b748:	699b      	ldr	r3, [r3, #24]
 803b74a:	2b00      	cmp	r3, #0
 803b74c:	d00f      	beq.n	803b76e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 803b74e:	7dba      	ldrb	r2, [r7, #22]
 803b750:	68fb      	ldr	r3, [r7, #12]
 803b752:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 803b756:	7dba      	ldrb	r2, [r7, #22]
 803b758:	68fb      	ldr	r3, [r7, #12]
 803b75a:	32ae      	adds	r2, #174	; 0xae
 803b75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b760:	699b      	ldr	r3, [r3, #24]
 803b762:	7afa      	ldrb	r2, [r7, #11]
 803b764:	4611      	mov	r1, r2
 803b766:	68f8      	ldr	r0, [r7, #12]
 803b768:	4798      	blx	r3
 803b76a:	4603      	mov	r3, r0
 803b76c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 803b76e:	7dfb      	ldrb	r3, [r7, #23]
 803b770:	2b00      	cmp	r3, #0
 803b772:	d001      	beq.n	803b778 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 803b774:	7dfb      	ldrb	r3, [r7, #23]
 803b776:	e000      	b.n	803b77a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 803b778:	2300      	movs	r3, #0
}
 803b77a:	4618      	mov	r0, r3
 803b77c:	3718      	adds	r7, #24
 803b77e:	46bd      	mov	sp, r7
 803b780:	bd80      	pop	{r7, pc}

0803b782 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 803b782:	b580      	push	{r7, lr}
 803b784:	b086      	sub	sp, #24
 803b786:	af00      	add	r7, sp, #0
 803b788:	60f8      	str	r0, [r7, #12]
 803b78a:	460b      	mov	r3, r1
 803b78c:	607a      	str	r2, [r7, #4]
 803b78e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 803b790:	7afb      	ldrb	r3, [r7, #11]
 803b792:	2b00      	cmp	r3, #0
 803b794:	d16f      	bne.n	803b876 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 803b796:	68fb      	ldr	r3, [r7, #12]
 803b798:	3314      	adds	r3, #20
 803b79a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 803b79c:	68fb      	ldr	r3, [r7, #12]
 803b79e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803b7a2:	2b02      	cmp	r3, #2
 803b7a4:	d15a      	bne.n	803b85c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 803b7a6:	693b      	ldr	r3, [r7, #16]
 803b7a8:	689a      	ldr	r2, [r3, #8]
 803b7aa:	693b      	ldr	r3, [r7, #16]
 803b7ac:	68db      	ldr	r3, [r3, #12]
 803b7ae:	429a      	cmp	r2, r3
 803b7b0:	d914      	bls.n	803b7dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 803b7b2:	693b      	ldr	r3, [r7, #16]
 803b7b4:	689a      	ldr	r2, [r3, #8]
 803b7b6:	693b      	ldr	r3, [r7, #16]
 803b7b8:	68db      	ldr	r3, [r3, #12]
 803b7ba:	1ad2      	subs	r2, r2, r3
 803b7bc:	693b      	ldr	r3, [r7, #16]
 803b7be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 803b7c0:	693b      	ldr	r3, [r7, #16]
 803b7c2:	689b      	ldr	r3, [r3, #8]
 803b7c4:	461a      	mov	r2, r3
 803b7c6:	6879      	ldr	r1, [r7, #4]
 803b7c8:	68f8      	ldr	r0, [r7, #12]
 803b7ca:	f001 f8ac 	bl	803c926 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803b7ce:	2300      	movs	r3, #0
 803b7d0:	2200      	movs	r2, #0
 803b7d2:	2100      	movs	r1, #0
 803b7d4:	68f8      	ldr	r0, [r7, #12]
 803b7d6:	f001 fdb3 	bl	803d340 <USBD_LL_PrepareReceive>
 803b7da:	e03f      	b.n	803b85c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 803b7dc:	693b      	ldr	r3, [r7, #16]
 803b7de:	68da      	ldr	r2, [r3, #12]
 803b7e0:	693b      	ldr	r3, [r7, #16]
 803b7e2:	689b      	ldr	r3, [r3, #8]
 803b7e4:	429a      	cmp	r2, r3
 803b7e6:	d11c      	bne.n	803b822 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 803b7e8:	693b      	ldr	r3, [r7, #16]
 803b7ea:	685a      	ldr	r2, [r3, #4]
 803b7ec:	693b      	ldr	r3, [r7, #16]
 803b7ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 803b7f0:	429a      	cmp	r2, r3
 803b7f2:	d316      	bcc.n	803b822 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 803b7f4:	693b      	ldr	r3, [r7, #16]
 803b7f6:	685a      	ldr	r2, [r3, #4]
 803b7f8:	68fb      	ldr	r3, [r7, #12]
 803b7fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 803b7fe:	429a      	cmp	r2, r3
 803b800:	d20f      	bcs.n	803b822 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 803b802:	2200      	movs	r2, #0
 803b804:	2100      	movs	r1, #0
 803b806:	68f8      	ldr	r0, [r7, #12]
 803b808:	f001 f88d 	bl	803c926 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 803b80c:	68fb      	ldr	r3, [r7, #12]
 803b80e:	2200      	movs	r2, #0
 803b810:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803b814:	2300      	movs	r3, #0
 803b816:	2200      	movs	r2, #0
 803b818:	2100      	movs	r1, #0
 803b81a:	68f8      	ldr	r0, [r7, #12]
 803b81c:	f001 fd90 	bl	803d340 <USBD_LL_PrepareReceive>
 803b820:	e01c      	b.n	803b85c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803b822:	68fb      	ldr	r3, [r7, #12]
 803b824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b828:	b2db      	uxtb	r3, r3
 803b82a:	2b03      	cmp	r3, #3
 803b82c:	d10f      	bne.n	803b84e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 803b82e:	68fb      	ldr	r3, [r7, #12]
 803b830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b834:	68db      	ldr	r3, [r3, #12]
 803b836:	2b00      	cmp	r3, #0
 803b838:	d009      	beq.n	803b84e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 803b83a:	68fb      	ldr	r3, [r7, #12]
 803b83c:	2200      	movs	r2, #0
 803b83e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 803b842:	68fb      	ldr	r3, [r7, #12]
 803b844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b848:	68db      	ldr	r3, [r3, #12]
 803b84a:	68f8      	ldr	r0, [r7, #12]
 803b84c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 803b84e:	2180      	movs	r1, #128	; 0x80
 803b850:	68f8      	ldr	r0, [r7, #12]
 803b852:	f001 fccb 	bl	803d1ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 803b856:	68f8      	ldr	r0, [r7, #12]
 803b858:	f001 f8b7 	bl	803c9ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 803b85c:	68fb      	ldr	r3, [r7, #12]
 803b85e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 803b862:	2b00      	cmp	r3, #0
 803b864:	d03a      	beq.n	803b8dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 803b866:	68f8      	ldr	r0, [r7, #12]
 803b868:	f7ff fe42 	bl	803b4f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 803b86c:	68fb      	ldr	r3, [r7, #12]
 803b86e:	2200      	movs	r2, #0
 803b870:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 803b874:	e032      	b.n	803b8dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 803b876:	7afb      	ldrb	r3, [r7, #11]
 803b878:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803b87c:	b2db      	uxtb	r3, r3
 803b87e:	4619      	mov	r1, r3
 803b880:	68f8      	ldr	r0, [r7, #12]
 803b882:	f000 f97f 	bl	803bb84 <USBD_CoreFindEP>
 803b886:	4603      	mov	r3, r0
 803b888:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803b88a:	7dfb      	ldrb	r3, [r7, #23]
 803b88c:	2bff      	cmp	r3, #255	; 0xff
 803b88e:	d025      	beq.n	803b8dc <USBD_LL_DataInStage+0x15a>
 803b890:	7dfb      	ldrb	r3, [r7, #23]
 803b892:	2b00      	cmp	r3, #0
 803b894:	d122      	bne.n	803b8dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803b896:	68fb      	ldr	r3, [r7, #12]
 803b898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b89c:	b2db      	uxtb	r3, r3
 803b89e:	2b03      	cmp	r3, #3
 803b8a0:	d11c      	bne.n	803b8dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 803b8a2:	7dfa      	ldrb	r2, [r7, #23]
 803b8a4:	68fb      	ldr	r3, [r7, #12]
 803b8a6:	32ae      	adds	r2, #174	; 0xae
 803b8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b8ac:	695b      	ldr	r3, [r3, #20]
 803b8ae:	2b00      	cmp	r3, #0
 803b8b0:	d014      	beq.n	803b8dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 803b8b2:	7dfa      	ldrb	r2, [r7, #23]
 803b8b4:	68fb      	ldr	r3, [r7, #12]
 803b8b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 803b8ba:	7dfa      	ldrb	r2, [r7, #23]
 803b8bc:	68fb      	ldr	r3, [r7, #12]
 803b8be:	32ae      	adds	r2, #174	; 0xae
 803b8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803b8c4:	695b      	ldr	r3, [r3, #20]
 803b8c6:	7afa      	ldrb	r2, [r7, #11]
 803b8c8:	4611      	mov	r1, r2
 803b8ca:	68f8      	ldr	r0, [r7, #12]
 803b8cc:	4798      	blx	r3
 803b8ce:	4603      	mov	r3, r0
 803b8d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 803b8d2:	7dbb      	ldrb	r3, [r7, #22]
 803b8d4:	2b00      	cmp	r3, #0
 803b8d6:	d001      	beq.n	803b8dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 803b8d8:	7dbb      	ldrb	r3, [r7, #22]
 803b8da:	e000      	b.n	803b8de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 803b8dc:	2300      	movs	r3, #0
}
 803b8de:	4618      	mov	r0, r3
 803b8e0:	3718      	adds	r7, #24
 803b8e2:	46bd      	mov	sp, r7
 803b8e4:	bd80      	pop	{r7, pc}

0803b8e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 803b8e6:	b580      	push	{r7, lr}
 803b8e8:	b084      	sub	sp, #16
 803b8ea:	af00      	add	r7, sp, #0
 803b8ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 803b8ee:	2300      	movs	r3, #0
 803b8f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803b8f2:	687b      	ldr	r3, [r7, #4]
 803b8f4:	2201      	movs	r2, #1
 803b8f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 803b8fa:	687b      	ldr	r3, [r7, #4]
 803b8fc:	2200      	movs	r2, #0
 803b8fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 803b902:	687b      	ldr	r3, [r7, #4]
 803b904:	2200      	movs	r2, #0
 803b906:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 803b908:	687b      	ldr	r3, [r7, #4]
 803b90a:	2200      	movs	r2, #0
 803b90c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 803b910:	687b      	ldr	r3, [r7, #4]
 803b912:	2200      	movs	r2, #0
 803b914:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 803b918:	687b      	ldr	r3, [r7, #4]
 803b91a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b91e:	2b00      	cmp	r3, #0
 803b920:	d014      	beq.n	803b94c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 803b922:	687b      	ldr	r3, [r7, #4]
 803b924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b928:	685b      	ldr	r3, [r3, #4]
 803b92a:	2b00      	cmp	r3, #0
 803b92c:	d00e      	beq.n	803b94c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 803b92e:	687b      	ldr	r3, [r7, #4]
 803b930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803b934:	685b      	ldr	r3, [r3, #4]
 803b936:	687a      	ldr	r2, [r7, #4]
 803b938:	6852      	ldr	r2, [r2, #4]
 803b93a:	b2d2      	uxtb	r2, r2
 803b93c:	4611      	mov	r1, r2
 803b93e:	6878      	ldr	r0, [r7, #4]
 803b940:	4798      	blx	r3
 803b942:	4603      	mov	r3, r0
 803b944:	2b00      	cmp	r3, #0
 803b946:	d001      	beq.n	803b94c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 803b948:	2303      	movs	r3, #3
 803b94a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803b94c:	2340      	movs	r3, #64	; 0x40
 803b94e:	2200      	movs	r2, #0
 803b950:	2100      	movs	r1, #0
 803b952:	6878      	ldr	r0, [r7, #4]
 803b954:	f001 fc05 	bl	803d162 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 803b958:	687b      	ldr	r3, [r7, #4]
 803b95a:	2201      	movs	r2, #1
 803b95c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 803b960:	687b      	ldr	r3, [r7, #4]
 803b962:	2240      	movs	r2, #64	; 0x40
 803b964:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803b968:	2340      	movs	r3, #64	; 0x40
 803b96a:	2200      	movs	r2, #0
 803b96c:	2180      	movs	r1, #128	; 0x80
 803b96e:	6878      	ldr	r0, [r7, #4]
 803b970:	f001 fbf7 	bl	803d162 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 803b974:	687b      	ldr	r3, [r7, #4]
 803b976:	2201      	movs	r2, #1
 803b978:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 803b97a:	687b      	ldr	r3, [r7, #4]
 803b97c:	2240      	movs	r2, #64	; 0x40
 803b97e:	621a      	str	r2, [r3, #32]

  return ret;
 803b980:	7bfb      	ldrb	r3, [r7, #15]
}
 803b982:	4618      	mov	r0, r3
 803b984:	3710      	adds	r7, #16
 803b986:	46bd      	mov	sp, r7
 803b988:	bd80      	pop	{r7, pc}

0803b98a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 803b98a:	b480      	push	{r7}
 803b98c:	b083      	sub	sp, #12
 803b98e:	af00      	add	r7, sp, #0
 803b990:	6078      	str	r0, [r7, #4]
 803b992:	460b      	mov	r3, r1
 803b994:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 803b996:	687b      	ldr	r3, [r7, #4]
 803b998:	78fa      	ldrb	r2, [r7, #3]
 803b99a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 803b99c:	2300      	movs	r3, #0
}
 803b99e:	4618      	mov	r0, r3
 803b9a0:	370c      	adds	r7, #12
 803b9a2:	46bd      	mov	sp, r7
 803b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b9a8:	4770      	bx	lr

0803b9aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 803b9aa:	b480      	push	{r7}
 803b9ac:	b083      	sub	sp, #12
 803b9ae:	af00      	add	r7, sp, #0
 803b9b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 803b9b2:	687b      	ldr	r3, [r7, #4]
 803b9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b9b8:	b2da      	uxtb	r2, r3
 803b9ba:	687b      	ldr	r3, [r7, #4]
 803b9bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 803b9c0:	687b      	ldr	r3, [r7, #4]
 803b9c2:	2204      	movs	r2, #4
 803b9c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 803b9c8:	2300      	movs	r3, #0
}
 803b9ca:	4618      	mov	r0, r3
 803b9cc:	370c      	adds	r7, #12
 803b9ce:	46bd      	mov	sp, r7
 803b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b9d4:	4770      	bx	lr

0803b9d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 803b9d6:	b480      	push	{r7}
 803b9d8:	b083      	sub	sp, #12
 803b9da:	af00      	add	r7, sp, #0
 803b9dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 803b9de:	687b      	ldr	r3, [r7, #4]
 803b9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b9e4:	b2db      	uxtb	r3, r3
 803b9e6:	2b04      	cmp	r3, #4
 803b9e8:	d106      	bne.n	803b9f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 803b9ea:	687b      	ldr	r3, [r7, #4]
 803b9ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 803b9f0:	b2da      	uxtb	r2, r3
 803b9f2:	687b      	ldr	r3, [r7, #4]
 803b9f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 803b9f8:	2300      	movs	r3, #0
}
 803b9fa:	4618      	mov	r0, r3
 803b9fc:	370c      	adds	r7, #12
 803b9fe:	46bd      	mov	sp, r7
 803ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ba04:	4770      	bx	lr

0803ba06 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 803ba06:	b580      	push	{r7, lr}
 803ba08:	b082      	sub	sp, #8
 803ba0a:	af00      	add	r7, sp, #0
 803ba0c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ba0e:	687b      	ldr	r3, [r7, #4]
 803ba10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ba14:	b2db      	uxtb	r3, r3
 803ba16:	2b03      	cmp	r3, #3
 803ba18:	d110      	bne.n	803ba3c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 803ba1a:	687b      	ldr	r3, [r7, #4]
 803ba1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803ba20:	2b00      	cmp	r3, #0
 803ba22:	d00b      	beq.n	803ba3c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 803ba24:	687b      	ldr	r3, [r7, #4]
 803ba26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803ba2a:	69db      	ldr	r3, [r3, #28]
 803ba2c:	2b00      	cmp	r3, #0
 803ba2e:	d005      	beq.n	803ba3c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 803ba30:	687b      	ldr	r3, [r7, #4]
 803ba32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803ba36:	69db      	ldr	r3, [r3, #28]
 803ba38:	6878      	ldr	r0, [r7, #4]
 803ba3a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 803ba3c:	2300      	movs	r3, #0
}
 803ba3e:	4618      	mov	r0, r3
 803ba40:	3708      	adds	r7, #8
 803ba42:	46bd      	mov	sp, r7
 803ba44:	bd80      	pop	{r7, pc}

0803ba46 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 803ba46:	b580      	push	{r7, lr}
 803ba48:	b082      	sub	sp, #8
 803ba4a:	af00      	add	r7, sp, #0
 803ba4c:	6078      	str	r0, [r7, #4]
 803ba4e:	460b      	mov	r3, r1
 803ba50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803ba52:	687b      	ldr	r3, [r7, #4]
 803ba54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ba58:	687b      	ldr	r3, [r7, #4]
 803ba5a:	32ae      	adds	r2, #174	; 0xae
 803ba5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ba60:	2b00      	cmp	r3, #0
 803ba62:	d101      	bne.n	803ba68 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 803ba64:	2303      	movs	r3, #3
 803ba66:	e01c      	b.n	803baa2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ba68:	687b      	ldr	r3, [r7, #4]
 803ba6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ba6e:	b2db      	uxtb	r3, r3
 803ba70:	2b03      	cmp	r3, #3
 803ba72:	d115      	bne.n	803baa0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 803ba74:	687b      	ldr	r3, [r7, #4]
 803ba76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ba7a:	687b      	ldr	r3, [r7, #4]
 803ba7c:	32ae      	adds	r2, #174	; 0xae
 803ba7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ba82:	6a1b      	ldr	r3, [r3, #32]
 803ba84:	2b00      	cmp	r3, #0
 803ba86:	d00b      	beq.n	803baa0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 803ba88:	687b      	ldr	r3, [r7, #4]
 803ba8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ba8e:	687b      	ldr	r3, [r7, #4]
 803ba90:	32ae      	adds	r2, #174	; 0xae
 803ba92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ba96:	6a1b      	ldr	r3, [r3, #32]
 803ba98:	78fa      	ldrb	r2, [r7, #3]
 803ba9a:	4611      	mov	r1, r2
 803ba9c:	6878      	ldr	r0, [r7, #4]
 803ba9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803baa0:	2300      	movs	r3, #0
}
 803baa2:	4618      	mov	r0, r3
 803baa4:	3708      	adds	r7, #8
 803baa6:	46bd      	mov	sp, r7
 803baa8:	bd80      	pop	{r7, pc}

0803baaa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 803baaa:	b580      	push	{r7, lr}
 803baac:	b082      	sub	sp, #8
 803baae:	af00      	add	r7, sp, #0
 803bab0:	6078      	str	r0, [r7, #4]
 803bab2:	460b      	mov	r3, r1
 803bab4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803bab6:	687b      	ldr	r3, [r7, #4]
 803bab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803babc:	687b      	ldr	r3, [r7, #4]
 803babe:	32ae      	adds	r2, #174	; 0xae
 803bac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803bac4:	2b00      	cmp	r3, #0
 803bac6:	d101      	bne.n	803bacc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 803bac8:	2303      	movs	r3, #3
 803baca:	e01c      	b.n	803bb06 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803bacc:	687b      	ldr	r3, [r7, #4]
 803bace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803bad2:	b2db      	uxtb	r3, r3
 803bad4:	2b03      	cmp	r3, #3
 803bad6:	d115      	bne.n	803bb04 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 803bad8:	687b      	ldr	r3, [r7, #4]
 803bada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803bade:	687b      	ldr	r3, [r7, #4]
 803bae0:	32ae      	adds	r2, #174	; 0xae
 803bae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803bae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803bae8:	2b00      	cmp	r3, #0
 803baea:	d00b      	beq.n	803bb04 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 803baec:	687b      	ldr	r3, [r7, #4]
 803baee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803baf2:	687b      	ldr	r3, [r7, #4]
 803baf4:	32ae      	adds	r2, #174	; 0xae
 803baf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803bafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803bafc:	78fa      	ldrb	r2, [r7, #3]
 803bafe:	4611      	mov	r1, r2
 803bb00:	6878      	ldr	r0, [r7, #4]
 803bb02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803bb04:	2300      	movs	r3, #0
}
 803bb06:	4618      	mov	r0, r3
 803bb08:	3708      	adds	r7, #8
 803bb0a:	46bd      	mov	sp, r7
 803bb0c:	bd80      	pop	{r7, pc}

0803bb0e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 803bb0e:	b480      	push	{r7}
 803bb10:	b083      	sub	sp, #12
 803bb12:	af00      	add	r7, sp, #0
 803bb14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803bb16:	2300      	movs	r3, #0
}
 803bb18:	4618      	mov	r0, r3
 803bb1a:	370c      	adds	r7, #12
 803bb1c:	46bd      	mov	sp, r7
 803bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bb22:	4770      	bx	lr

0803bb24 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 803bb24:	b580      	push	{r7, lr}
 803bb26:	b084      	sub	sp, #16
 803bb28:	af00      	add	r7, sp, #0
 803bb2a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 803bb2c:	2300      	movs	r3, #0
 803bb2e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803bb30:	687b      	ldr	r3, [r7, #4]
 803bb32:	2201      	movs	r2, #1
 803bb34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803bb38:	687b      	ldr	r3, [r7, #4]
 803bb3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803bb3e:	2b00      	cmp	r3, #0
 803bb40:	d00e      	beq.n	803bb60 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 803bb42:	687b      	ldr	r3, [r7, #4]
 803bb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803bb48:	685b      	ldr	r3, [r3, #4]
 803bb4a:	687a      	ldr	r2, [r7, #4]
 803bb4c:	6852      	ldr	r2, [r2, #4]
 803bb4e:	b2d2      	uxtb	r2, r2
 803bb50:	4611      	mov	r1, r2
 803bb52:	6878      	ldr	r0, [r7, #4]
 803bb54:	4798      	blx	r3
 803bb56:	4603      	mov	r3, r0
 803bb58:	2b00      	cmp	r3, #0
 803bb5a:	d001      	beq.n	803bb60 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 803bb5c:	2303      	movs	r3, #3
 803bb5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803bb60:	7bfb      	ldrb	r3, [r7, #15]
}
 803bb62:	4618      	mov	r0, r3
 803bb64:	3710      	adds	r7, #16
 803bb66:	46bd      	mov	sp, r7
 803bb68:	bd80      	pop	{r7, pc}

0803bb6a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803bb6a:	b480      	push	{r7}
 803bb6c:	b083      	sub	sp, #12
 803bb6e:	af00      	add	r7, sp, #0
 803bb70:	6078      	str	r0, [r7, #4]
 803bb72:	460b      	mov	r3, r1
 803bb74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803bb76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803bb78:	4618      	mov	r0, r3
 803bb7a:	370c      	adds	r7, #12
 803bb7c:	46bd      	mov	sp, r7
 803bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bb82:	4770      	bx	lr

0803bb84 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803bb84:	b480      	push	{r7}
 803bb86:	b083      	sub	sp, #12
 803bb88:	af00      	add	r7, sp, #0
 803bb8a:	6078      	str	r0, [r7, #4]
 803bb8c:	460b      	mov	r3, r1
 803bb8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803bb90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803bb92:	4618      	mov	r0, r3
 803bb94:	370c      	adds	r7, #12
 803bb96:	46bd      	mov	sp, r7
 803bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bb9c:	4770      	bx	lr

0803bb9e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 803bb9e:	b580      	push	{r7, lr}
 803bba0:	b086      	sub	sp, #24
 803bba2:	af00      	add	r7, sp, #0
 803bba4:	6078      	str	r0, [r7, #4]
 803bba6:	460b      	mov	r3, r1
 803bba8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 803bbaa:	687b      	ldr	r3, [r7, #4]
 803bbac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 803bbae:	687b      	ldr	r3, [r7, #4]
 803bbb0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 803bbb2:	2300      	movs	r3, #0
 803bbb4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 803bbb6:	68fb      	ldr	r3, [r7, #12]
 803bbb8:	885b      	ldrh	r3, [r3, #2]
 803bbba:	b29a      	uxth	r2, r3
 803bbbc:	68fb      	ldr	r3, [r7, #12]
 803bbbe:	781b      	ldrb	r3, [r3, #0]
 803bbc0:	b29b      	uxth	r3, r3
 803bbc2:	429a      	cmp	r2, r3
 803bbc4:	d920      	bls.n	803bc08 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 803bbc6:	68fb      	ldr	r3, [r7, #12]
 803bbc8:	781b      	ldrb	r3, [r3, #0]
 803bbca:	b29b      	uxth	r3, r3
 803bbcc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 803bbce:	e013      	b.n	803bbf8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 803bbd0:	f107 030a 	add.w	r3, r7, #10
 803bbd4:	4619      	mov	r1, r3
 803bbd6:	6978      	ldr	r0, [r7, #20]
 803bbd8:	f000 f81b 	bl	803bc12 <USBD_GetNextDesc>
 803bbdc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 803bbde:	697b      	ldr	r3, [r7, #20]
 803bbe0:	785b      	ldrb	r3, [r3, #1]
 803bbe2:	2b05      	cmp	r3, #5
 803bbe4:	d108      	bne.n	803bbf8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 803bbe6:	697b      	ldr	r3, [r7, #20]
 803bbe8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 803bbea:	693b      	ldr	r3, [r7, #16]
 803bbec:	789b      	ldrb	r3, [r3, #2]
 803bbee:	78fa      	ldrb	r2, [r7, #3]
 803bbf0:	429a      	cmp	r2, r3
 803bbf2:	d008      	beq.n	803bc06 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 803bbf4:	2300      	movs	r3, #0
 803bbf6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 803bbf8:	68fb      	ldr	r3, [r7, #12]
 803bbfa:	885b      	ldrh	r3, [r3, #2]
 803bbfc:	b29a      	uxth	r2, r3
 803bbfe:	897b      	ldrh	r3, [r7, #10]
 803bc00:	429a      	cmp	r2, r3
 803bc02:	d8e5      	bhi.n	803bbd0 <USBD_GetEpDesc+0x32>
 803bc04:	e000      	b.n	803bc08 <USBD_GetEpDesc+0x6a>
          break;
 803bc06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 803bc08:	693b      	ldr	r3, [r7, #16]
}
 803bc0a:	4618      	mov	r0, r3
 803bc0c:	3718      	adds	r7, #24
 803bc0e:	46bd      	mov	sp, r7
 803bc10:	bd80      	pop	{r7, pc}

0803bc12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 803bc12:	b480      	push	{r7}
 803bc14:	b085      	sub	sp, #20
 803bc16:	af00      	add	r7, sp, #0
 803bc18:	6078      	str	r0, [r7, #4]
 803bc1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 803bc1c:	687b      	ldr	r3, [r7, #4]
 803bc1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 803bc20:	683b      	ldr	r3, [r7, #0]
 803bc22:	881a      	ldrh	r2, [r3, #0]
 803bc24:	68fb      	ldr	r3, [r7, #12]
 803bc26:	781b      	ldrb	r3, [r3, #0]
 803bc28:	b29b      	uxth	r3, r3
 803bc2a:	4413      	add	r3, r2
 803bc2c:	b29a      	uxth	r2, r3
 803bc2e:	683b      	ldr	r3, [r7, #0]
 803bc30:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 803bc32:	68fb      	ldr	r3, [r7, #12]
 803bc34:	781b      	ldrb	r3, [r3, #0]
 803bc36:	461a      	mov	r2, r3
 803bc38:	687b      	ldr	r3, [r7, #4]
 803bc3a:	4413      	add	r3, r2
 803bc3c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 803bc3e:	68fb      	ldr	r3, [r7, #12]
}
 803bc40:	4618      	mov	r0, r3
 803bc42:	3714      	adds	r7, #20
 803bc44:	46bd      	mov	sp, r7
 803bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bc4a:	4770      	bx	lr

0803bc4c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 803bc4c:	b480      	push	{r7}
 803bc4e:	b087      	sub	sp, #28
 803bc50:	af00      	add	r7, sp, #0
 803bc52:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 803bc54:	687b      	ldr	r3, [r7, #4]
 803bc56:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 803bc58:	697b      	ldr	r3, [r7, #20]
 803bc5a:	781b      	ldrb	r3, [r3, #0]
 803bc5c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 803bc5e:	697b      	ldr	r3, [r7, #20]
 803bc60:	3301      	adds	r3, #1
 803bc62:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 803bc64:	697b      	ldr	r3, [r7, #20]
 803bc66:	781b      	ldrb	r3, [r3, #0]
 803bc68:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 803bc6a:	8a3b      	ldrh	r3, [r7, #16]
 803bc6c:	021b      	lsls	r3, r3, #8
 803bc6e:	b21a      	sxth	r2, r3
 803bc70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803bc74:	4313      	orrs	r3, r2
 803bc76:	b21b      	sxth	r3, r3
 803bc78:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 803bc7a:	89fb      	ldrh	r3, [r7, #14]
}
 803bc7c:	4618      	mov	r0, r3
 803bc7e:	371c      	adds	r7, #28
 803bc80:	46bd      	mov	sp, r7
 803bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bc86:	4770      	bx	lr

0803bc88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803bc88:	b580      	push	{r7, lr}
 803bc8a:	b084      	sub	sp, #16
 803bc8c:	af00      	add	r7, sp, #0
 803bc8e:	6078      	str	r0, [r7, #4]
 803bc90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803bc92:	2300      	movs	r3, #0
 803bc94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803bc96:	683b      	ldr	r3, [r7, #0]
 803bc98:	781b      	ldrb	r3, [r3, #0]
 803bc9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803bc9e:	2b40      	cmp	r3, #64	; 0x40
 803bca0:	d005      	beq.n	803bcae <USBD_StdDevReq+0x26>
 803bca2:	2b40      	cmp	r3, #64	; 0x40
 803bca4:	d857      	bhi.n	803bd56 <USBD_StdDevReq+0xce>
 803bca6:	2b00      	cmp	r3, #0
 803bca8:	d00f      	beq.n	803bcca <USBD_StdDevReq+0x42>
 803bcaa:	2b20      	cmp	r3, #32
 803bcac:	d153      	bne.n	803bd56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 803bcae:	687b      	ldr	r3, [r7, #4]
 803bcb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803bcb4:	687b      	ldr	r3, [r7, #4]
 803bcb6:	32ae      	adds	r2, #174	; 0xae
 803bcb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803bcbc:	689b      	ldr	r3, [r3, #8]
 803bcbe:	6839      	ldr	r1, [r7, #0]
 803bcc0:	6878      	ldr	r0, [r7, #4]
 803bcc2:	4798      	blx	r3
 803bcc4:	4603      	mov	r3, r0
 803bcc6:	73fb      	strb	r3, [r7, #15]
      break;
 803bcc8:	e04a      	b.n	803bd60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803bcca:	683b      	ldr	r3, [r7, #0]
 803bccc:	785b      	ldrb	r3, [r3, #1]
 803bcce:	2b09      	cmp	r3, #9
 803bcd0:	d83b      	bhi.n	803bd4a <USBD_StdDevReq+0xc2>
 803bcd2:	a201      	add	r2, pc, #4	; (adr r2, 803bcd8 <USBD_StdDevReq+0x50>)
 803bcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803bcd8:	0803bd2d 	.word	0x0803bd2d
 803bcdc:	0803bd41 	.word	0x0803bd41
 803bce0:	0803bd4b 	.word	0x0803bd4b
 803bce4:	0803bd37 	.word	0x0803bd37
 803bce8:	0803bd4b 	.word	0x0803bd4b
 803bcec:	0803bd0b 	.word	0x0803bd0b
 803bcf0:	0803bd01 	.word	0x0803bd01
 803bcf4:	0803bd4b 	.word	0x0803bd4b
 803bcf8:	0803bd23 	.word	0x0803bd23
 803bcfc:	0803bd15 	.word	0x0803bd15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 803bd00:	6839      	ldr	r1, [r7, #0]
 803bd02:	6878      	ldr	r0, [r7, #4]
 803bd04:	f000 fa3c 	bl	803c180 <USBD_GetDescriptor>
          break;
 803bd08:	e024      	b.n	803bd54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 803bd0a:	6839      	ldr	r1, [r7, #0]
 803bd0c:	6878      	ldr	r0, [r7, #4]
 803bd0e:	f000 fba1 	bl	803c454 <USBD_SetAddress>
          break;
 803bd12:	e01f      	b.n	803bd54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 803bd14:	6839      	ldr	r1, [r7, #0]
 803bd16:	6878      	ldr	r0, [r7, #4]
 803bd18:	f000 fbe0 	bl	803c4dc <USBD_SetConfig>
 803bd1c:	4603      	mov	r3, r0
 803bd1e:	73fb      	strb	r3, [r7, #15]
          break;
 803bd20:	e018      	b.n	803bd54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 803bd22:	6839      	ldr	r1, [r7, #0]
 803bd24:	6878      	ldr	r0, [r7, #4]
 803bd26:	f000 fc83 	bl	803c630 <USBD_GetConfig>
          break;
 803bd2a:	e013      	b.n	803bd54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 803bd2c:	6839      	ldr	r1, [r7, #0]
 803bd2e:	6878      	ldr	r0, [r7, #4]
 803bd30:	f000 fcb4 	bl	803c69c <USBD_GetStatus>
          break;
 803bd34:	e00e      	b.n	803bd54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 803bd36:	6839      	ldr	r1, [r7, #0]
 803bd38:	6878      	ldr	r0, [r7, #4]
 803bd3a:	f000 fce3 	bl	803c704 <USBD_SetFeature>
          break;
 803bd3e:	e009      	b.n	803bd54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 803bd40:	6839      	ldr	r1, [r7, #0]
 803bd42:	6878      	ldr	r0, [r7, #4]
 803bd44:	f000 fd07 	bl	803c756 <USBD_ClrFeature>
          break;
 803bd48:	e004      	b.n	803bd54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 803bd4a:	6839      	ldr	r1, [r7, #0]
 803bd4c:	6878      	ldr	r0, [r7, #4]
 803bd4e:	f000 fd5e 	bl	803c80e <USBD_CtlError>
          break;
 803bd52:	bf00      	nop
      }
      break;
 803bd54:	e004      	b.n	803bd60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 803bd56:	6839      	ldr	r1, [r7, #0]
 803bd58:	6878      	ldr	r0, [r7, #4]
 803bd5a:	f000 fd58 	bl	803c80e <USBD_CtlError>
      break;
 803bd5e:	bf00      	nop
  }

  return ret;
 803bd60:	7bfb      	ldrb	r3, [r7, #15]
}
 803bd62:	4618      	mov	r0, r3
 803bd64:	3710      	adds	r7, #16
 803bd66:	46bd      	mov	sp, r7
 803bd68:	bd80      	pop	{r7, pc}
 803bd6a:	bf00      	nop

0803bd6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803bd6c:	b580      	push	{r7, lr}
 803bd6e:	b084      	sub	sp, #16
 803bd70:	af00      	add	r7, sp, #0
 803bd72:	6078      	str	r0, [r7, #4]
 803bd74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803bd76:	2300      	movs	r3, #0
 803bd78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803bd7a:	683b      	ldr	r3, [r7, #0]
 803bd7c:	781b      	ldrb	r3, [r3, #0]
 803bd7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803bd82:	2b40      	cmp	r3, #64	; 0x40
 803bd84:	d005      	beq.n	803bd92 <USBD_StdItfReq+0x26>
 803bd86:	2b40      	cmp	r3, #64	; 0x40
 803bd88:	d852      	bhi.n	803be30 <USBD_StdItfReq+0xc4>
 803bd8a:	2b00      	cmp	r3, #0
 803bd8c:	d001      	beq.n	803bd92 <USBD_StdItfReq+0x26>
 803bd8e:	2b20      	cmp	r3, #32
 803bd90:	d14e      	bne.n	803be30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 803bd92:	687b      	ldr	r3, [r7, #4]
 803bd94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803bd98:	b2db      	uxtb	r3, r3
 803bd9a:	3b01      	subs	r3, #1
 803bd9c:	2b02      	cmp	r3, #2
 803bd9e:	d840      	bhi.n	803be22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 803bda0:	683b      	ldr	r3, [r7, #0]
 803bda2:	889b      	ldrh	r3, [r3, #4]
 803bda4:	b2db      	uxtb	r3, r3
 803bda6:	2b01      	cmp	r3, #1
 803bda8:	d836      	bhi.n	803be18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 803bdaa:	683b      	ldr	r3, [r7, #0]
 803bdac:	889b      	ldrh	r3, [r3, #4]
 803bdae:	b2db      	uxtb	r3, r3
 803bdb0:	4619      	mov	r1, r3
 803bdb2:	6878      	ldr	r0, [r7, #4]
 803bdb4:	f7ff fed9 	bl	803bb6a <USBD_CoreFindIF>
 803bdb8:	4603      	mov	r3, r0
 803bdba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803bdbc:	7bbb      	ldrb	r3, [r7, #14]
 803bdbe:	2bff      	cmp	r3, #255	; 0xff
 803bdc0:	d01d      	beq.n	803bdfe <USBD_StdItfReq+0x92>
 803bdc2:	7bbb      	ldrb	r3, [r7, #14]
 803bdc4:	2b00      	cmp	r3, #0
 803bdc6:	d11a      	bne.n	803bdfe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 803bdc8:	7bba      	ldrb	r2, [r7, #14]
 803bdca:	687b      	ldr	r3, [r7, #4]
 803bdcc:	32ae      	adds	r2, #174	; 0xae
 803bdce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803bdd2:	689b      	ldr	r3, [r3, #8]
 803bdd4:	2b00      	cmp	r3, #0
 803bdd6:	d00f      	beq.n	803bdf8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 803bdd8:	7bba      	ldrb	r2, [r7, #14]
 803bdda:	687b      	ldr	r3, [r7, #4]
 803bddc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803bde0:	7bba      	ldrb	r2, [r7, #14]
 803bde2:	687b      	ldr	r3, [r7, #4]
 803bde4:	32ae      	adds	r2, #174	; 0xae
 803bde6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803bdea:	689b      	ldr	r3, [r3, #8]
 803bdec:	6839      	ldr	r1, [r7, #0]
 803bdee:	6878      	ldr	r0, [r7, #4]
 803bdf0:	4798      	blx	r3
 803bdf2:	4603      	mov	r3, r0
 803bdf4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803bdf6:	e004      	b.n	803be02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 803bdf8:	2303      	movs	r3, #3
 803bdfa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803bdfc:	e001      	b.n	803be02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 803bdfe:	2303      	movs	r3, #3
 803be00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 803be02:	683b      	ldr	r3, [r7, #0]
 803be04:	88db      	ldrh	r3, [r3, #6]
 803be06:	2b00      	cmp	r3, #0
 803be08:	d110      	bne.n	803be2c <USBD_StdItfReq+0xc0>
 803be0a:	7bfb      	ldrb	r3, [r7, #15]
 803be0c:	2b00      	cmp	r3, #0
 803be0e:	d10d      	bne.n	803be2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 803be10:	6878      	ldr	r0, [r7, #4]
 803be12:	f000 fdc7 	bl	803c9a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 803be16:	e009      	b.n	803be2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 803be18:	6839      	ldr	r1, [r7, #0]
 803be1a:	6878      	ldr	r0, [r7, #4]
 803be1c:	f000 fcf7 	bl	803c80e <USBD_CtlError>
          break;
 803be20:	e004      	b.n	803be2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 803be22:	6839      	ldr	r1, [r7, #0]
 803be24:	6878      	ldr	r0, [r7, #4]
 803be26:	f000 fcf2 	bl	803c80e <USBD_CtlError>
          break;
 803be2a:	e000      	b.n	803be2e <USBD_StdItfReq+0xc2>
          break;
 803be2c:	bf00      	nop
      }
      break;
 803be2e:	e004      	b.n	803be3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 803be30:	6839      	ldr	r1, [r7, #0]
 803be32:	6878      	ldr	r0, [r7, #4]
 803be34:	f000 fceb 	bl	803c80e <USBD_CtlError>
      break;
 803be38:	bf00      	nop
  }

  return ret;
 803be3a:	7bfb      	ldrb	r3, [r7, #15]
}
 803be3c:	4618      	mov	r0, r3
 803be3e:	3710      	adds	r7, #16
 803be40:	46bd      	mov	sp, r7
 803be42:	bd80      	pop	{r7, pc}

0803be44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803be44:	b580      	push	{r7, lr}
 803be46:	b084      	sub	sp, #16
 803be48:	af00      	add	r7, sp, #0
 803be4a:	6078      	str	r0, [r7, #4]
 803be4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 803be4e:	2300      	movs	r3, #0
 803be50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 803be52:	683b      	ldr	r3, [r7, #0]
 803be54:	889b      	ldrh	r3, [r3, #4]
 803be56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803be58:	683b      	ldr	r3, [r7, #0]
 803be5a:	781b      	ldrb	r3, [r3, #0]
 803be5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803be60:	2b40      	cmp	r3, #64	; 0x40
 803be62:	d007      	beq.n	803be74 <USBD_StdEPReq+0x30>
 803be64:	2b40      	cmp	r3, #64	; 0x40
 803be66:	f200 817f 	bhi.w	803c168 <USBD_StdEPReq+0x324>
 803be6a:	2b00      	cmp	r3, #0
 803be6c:	d02a      	beq.n	803bec4 <USBD_StdEPReq+0x80>
 803be6e:	2b20      	cmp	r3, #32
 803be70:	f040 817a 	bne.w	803c168 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 803be74:	7bbb      	ldrb	r3, [r7, #14]
 803be76:	4619      	mov	r1, r3
 803be78:	6878      	ldr	r0, [r7, #4]
 803be7a:	f7ff fe83 	bl	803bb84 <USBD_CoreFindEP>
 803be7e:	4603      	mov	r3, r0
 803be80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803be82:	7b7b      	ldrb	r3, [r7, #13]
 803be84:	2bff      	cmp	r3, #255	; 0xff
 803be86:	f000 8174 	beq.w	803c172 <USBD_StdEPReq+0x32e>
 803be8a:	7b7b      	ldrb	r3, [r7, #13]
 803be8c:	2b00      	cmp	r3, #0
 803be8e:	f040 8170 	bne.w	803c172 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 803be92:	7b7a      	ldrb	r2, [r7, #13]
 803be94:	687b      	ldr	r3, [r7, #4]
 803be96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 803be9a:	7b7a      	ldrb	r2, [r7, #13]
 803be9c:	687b      	ldr	r3, [r7, #4]
 803be9e:	32ae      	adds	r2, #174	; 0xae
 803bea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803bea4:	689b      	ldr	r3, [r3, #8]
 803bea6:	2b00      	cmp	r3, #0
 803bea8:	f000 8163 	beq.w	803c172 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 803beac:	7b7a      	ldrb	r2, [r7, #13]
 803beae:	687b      	ldr	r3, [r7, #4]
 803beb0:	32ae      	adds	r2, #174	; 0xae
 803beb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803beb6:	689b      	ldr	r3, [r3, #8]
 803beb8:	6839      	ldr	r1, [r7, #0]
 803beba:	6878      	ldr	r0, [r7, #4]
 803bebc:	4798      	blx	r3
 803bebe:	4603      	mov	r3, r0
 803bec0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 803bec2:	e156      	b.n	803c172 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803bec4:	683b      	ldr	r3, [r7, #0]
 803bec6:	785b      	ldrb	r3, [r3, #1]
 803bec8:	2b03      	cmp	r3, #3
 803beca:	d008      	beq.n	803bede <USBD_StdEPReq+0x9a>
 803becc:	2b03      	cmp	r3, #3
 803bece:	f300 8145 	bgt.w	803c15c <USBD_StdEPReq+0x318>
 803bed2:	2b00      	cmp	r3, #0
 803bed4:	f000 809b 	beq.w	803c00e <USBD_StdEPReq+0x1ca>
 803bed8:	2b01      	cmp	r3, #1
 803beda:	d03c      	beq.n	803bf56 <USBD_StdEPReq+0x112>
 803bedc:	e13e      	b.n	803c15c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 803bede:	687b      	ldr	r3, [r7, #4]
 803bee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803bee4:	b2db      	uxtb	r3, r3
 803bee6:	2b02      	cmp	r3, #2
 803bee8:	d002      	beq.n	803bef0 <USBD_StdEPReq+0xac>
 803beea:	2b03      	cmp	r3, #3
 803beec:	d016      	beq.n	803bf1c <USBD_StdEPReq+0xd8>
 803beee:	e02c      	b.n	803bf4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803bef0:	7bbb      	ldrb	r3, [r7, #14]
 803bef2:	2b00      	cmp	r3, #0
 803bef4:	d00d      	beq.n	803bf12 <USBD_StdEPReq+0xce>
 803bef6:	7bbb      	ldrb	r3, [r7, #14]
 803bef8:	2b80      	cmp	r3, #128	; 0x80
 803befa:	d00a      	beq.n	803bf12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803befc:	7bbb      	ldrb	r3, [r7, #14]
 803befe:	4619      	mov	r1, r3
 803bf00:	6878      	ldr	r0, [r7, #4]
 803bf02:	f001 f973 	bl	803d1ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803bf06:	2180      	movs	r1, #128	; 0x80
 803bf08:	6878      	ldr	r0, [r7, #4]
 803bf0a:	f001 f96f 	bl	803d1ec <USBD_LL_StallEP>
 803bf0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803bf10:	e020      	b.n	803bf54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 803bf12:	6839      	ldr	r1, [r7, #0]
 803bf14:	6878      	ldr	r0, [r7, #4]
 803bf16:	f000 fc7a 	bl	803c80e <USBD_CtlError>
              break;
 803bf1a:	e01b      	b.n	803bf54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803bf1c:	683b      	ldr	r3, [r7, #0]
 803bf1e:	885b      	ldrh	r3, [r3, #2]
 803bf20:	2b00      	cmp	r3, #0
 803bf22:	d10e      	bne.n	803bf42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 803bf24:	7bbb      	ldrb	r3, [r7, #14]
 803bf26:	2b00      	cmp	r3, #0
 803bf28:	d00b      	beq.n	803bf42 <USBD_StdEPReq+0xfe>
 803bf2a:	7bbb      	ldrb	r3, [r7, #14]
 803bf2c:	2b80      	cmp	r3, #128	; 0x80
 803bf2e:	d008      	beq.n	803bf42 <USBD_StdEPReq+0xfe>
 803bf30:	683b      	ldr	r3, [r7, #0]
 803bf32:	88db      	ldrh	r3, [r3, #6]
 803bf34:	2b00      	cmp	r3, #0
 803bf36:	d104      	bne.n	803bf42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 803bf38:	7bbb      	ldrb	r3, [r7, #14]
 803bf3a:	4619      	mov	r1, r3
 803bf3c:	6878      	ldr	r0, [r7, #4]
 803bf3e:	f001 f955 	bl	803d1ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 803bf42:	6878      	ldr	r0, [r7, #4]
 803bf44:	f000 fd2e 	bl	803c9a4 <USBD_CtlSendStatus>

              break;
 803bf48:	e004      	b.n	803bf54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 803bf4a:	6839      	ldr	r1, [r7, #0]
 803bf4c:	6878      	ldr	r0, [r7, #4]
 803bf4e:	f000 fc5e 	bl	803c80e <USBD_CtlError>
              break;
 803bf52:	bf00      	nop
          }
          break;
 803bf54:	e107      	b.n	803c166 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 803bf56:	687b      	ldr	r3, [r7, #4]
 803bf58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803bf5c:	b2db      	uxtb	r3, r3
 803bf5e:	2b02      	cmp	r3, #2
 803bf60:	d002      	beq.n	803bf68 <USBD_StdEPReq+0x124>
 803bf62:	2b03      	cmp	r3, #3
 803bf64:	d016      	beq.n	803bf94 <USBD_StdEPReq+0x150>
 803bf66:	e04b      	b.n	803c000 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803bf68:	7bbb      	ldrb	r3, [r7, #14]
 803bf6a:	2b00      	cmp	r3, #0
 803bf6c:	d00d      	beq.n	803bf8a <USBD_StdEPReq+0x146>
 803bf6e:	7bbb      	ldrb	r3, [r7, #14]
 803bf70:	2b80      	cmp	r3, #128	; 0x80
 803bf72:	d00a      	beq.n	803bf8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803bf74:	7bbb      	ldrb	r3, [r7, #14]
 803bf76:	4619      	mov	r1, r3
 803bf78:	6878      	ldr	r0, [r7, #4]
 803bf7a:	f001 f937 	bl	803d1ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803bf7e:	2180      	movs	r1, #128	; 0x80
 803bf80:	6878      	ldr	r0, [r7, #4]
 803bf82:	f001 f933 	bl	803d1ec <USBD_LL_StallEP>
 803bf86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803bf88:	e040      	b.n	803c00c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 803bf8a:	6839      	ldr	r1, [r7, #0]
 803bf8c:	6878      	ldr	r0, [r7, #4]
 803bf8e:	f000 fc3e 	bl	803c80e <USBD_CtlError>
              break;
 803bf92:	e03b      	b.n	803c00c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803bf94:	683b      	ldr	r3, [r7, #0]
 803bf96:	885b      	ldrh	r3, [r3, #2]
 803bf98:	2b00      	cmp	r3, #0
 803bf9a:	d136      	bne.n	803c00a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 803bf9c:	7bbb      	ldrb	r3, [r7, #14]
 803bf9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803bfa2:	2b00      	cmp	r3, #0
 803bfa4:	d004      	beq.n	803bfb0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 803bfa6:	7bbb      	ldrb	r3, [r7, #14]
 803bfa8:	4619      	mov	r1, r3
 803bfaa:	6878      	ldr	r0, [r7, #4]
 803bfac:	f001 f93d 	bl	803d22a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 803bfb0:	6878      	ldr	r0, [r7, #4]
 803bfb2:	f000 fcf7 	bl	803c9a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 803bfb6:	7bbb      	ldrb	r3, [r7, #14]
 803bfb8:	4619      	mov	r1, r3
 803bfba:	6878      	ldr	r0, [r7, #4]
 803bfbc:	f7ff fde2 	bl	803bb84 <USBD_CoreFindEP>
 803bfc0:	4603      	mov	r3, r0
 803bfc2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803bfc4:	7b7b      	ldrb	r3, [r7, #13]
 803bfc6:	2bff      	cmp	r3, #255	; 0xff
 803bfc8:	d01f      	beq.n	803c00a <USBD_StdEPReq+0x1c6>
 803bfca:	7b7b      	ldrb	r3, [r7, #13]
 803bfcc:	2b00      	cmp	r3, #0
 803bfce:	d11c      	bne.n	803c00a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 803bfd0:	7b7a      	ldrb	r2, [r7, #13]
 803bfd2:	687b      	ldr	r3, [r7, #4]
 803bfd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 803bfd8:	7b7a      	ldrb	r2, [r7, #13]
 803bfda:	687b      	ldr	r3, [r7, #4]
 803bfdc:	32ae      	adds	r2, #174	; 0xae
 803bfde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803bfe2:	689b      	ldr	r3, [r3, #8]
 803bfe4:	2b00      	cmp	r3, #0
 803bfe6:	d010      	beq.n	803c00a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803bfe8:	7b7a      	ldrb	r2, [r7, #13]
 803bfea:	687b      	ldr	r3, [r7, #4]
 803bfec:	32ae      	adds	r2, #174	; 0xae
 803bfee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803bff2:	689b      	ldr	r3, [r3, #8]
 803bff4:	6839      	ldr	r1, [r7, #0]
 803bff6:	6878      	ldr	r0, [r7, #4]
 803bff8:	4798      	blx	r3
 803bffa:	4603      	mov	r3, r0
 803bffc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 803bffe:	e004      	b.n	803c00a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 803c000:	6839      	ldr	r1, [r7, #0]
 803c002:	6878      	ldr	r0, [r7, #4]
 803c004:	f000 fc03 	bl	803c80e <USBD_CtlError>
              break;
 803c008:	e000      	b.n	803c00c <USBD_StdEPReq+0x1c8>
              break;
 803c00a:	bf00      	nop
          }
          break;
 803c00c:	e0ab      	b.n	803c166 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 803c00e:	687b      	ldr	r3, [r7, #4]
 803c010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803c014:	b2db      	uxtb	r3, r3
 803c016:	2b02      	cmp	r3, #2
 803c018:	d002      	beq.n	803c020 <USBD_StdEPReq+0x1dc>
 803c01a:	2b03      	cmp	r3, #3
 803c01c:	d032      	beq.n	803c084 <USBD_StdEPReq+0x240>
 803c01e:	e097      	b.n	803c150 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803c020:	7bbb      	ldrb	r3, [r7, #14]
 803c022:	2b00      	cmp	r3, #0
 803c024:	d007      	beq.n	803c036 <USBD_StdEPReq+0x1f2>
 803c026:	7bbb      	ldrb	r3, [r7, #14]
 803c028:	2b80      	cmp	r3, #128	; 0x80
 803c02a:	d004      	beq.n	803c036 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 803c02c:	6839      	ldr	r1, [r7, #0]
 803c02e:	6878      	ldr	r0, [r7, #4]
 803c030:	f000 fbed 	bl	803c80e <USBD_CtlError>
                break;
 803c034:	e091      	b.n	803c15a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803c036:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803c03a:	2b00      	cmp	r3, #0
 803c03c:	da0b      	bge.n	803c056 <USBD_StdEPReq+0x212>
 803c03e:	7bbb      	ldrb	r3, [r7, #14]
 803c040:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803c044:	4613      	mov	r3, r2
 803c046:	009b      	lsls	r3, r3, #2
 803c048:	4413      	add	r3, r2
 803c04a:	009b      	lsls	r3, r3, #2
 803c04c:	3310      	adds	r3, #16
 803c04e:	687a      	ldr	r2, [r7, #4]
 803c050:	4413      	add	r3, r2
 803c052:	3304      	adds	r3, #4
 803c054:	e00b      	b.n	803c06e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803c056:	7bbb      	ldrb	r3, [r7, #14]
 803c058:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803c05c:	4613      	mov	r3, r2
 803c05e:	009b      	lsls	r3, r3, #2
 803c060:	4413      	add	r3, r2
 803c062:	009b      	lsls	r3, r3, #2
 803c064:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803c068:	687a      	ldr	r2, [r7, #4]
 803c06a:	4413      	add	r3, r2
 803c06c:	3304      	adds	r3, #4
 803c06e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 803c070:	68bb      	ldr	r3, [r7, #8]
 803c072:	2200      	movs	r2, #0
 803c074:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803c076:	68bb      	ldr	r3, [r7, #8]
 803c078:	2202      	movs	r2, #2
 803c07a:	4619      	mov	r1, r3
 803c07c:	6878      	ldr	r0, [r7, #4]
 803c07e:	f000 fc37 	bl	803c8f0 <USBD_CtlSendData>
              break;
 803c082:	e06a      	b.n	803c15a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 803c084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803c088:	2b00      	cmp	r3, #0
 803c08a:	da11      	bge.n	803c0b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 803c08c:	7bbb      	ldrb	r3, [r7, #14]
 803c08e:	f003 020f 	and.w	r2, r3, #15
 803c092:	6879      	ldr	r1, [r7, #4]
 803c094:	4613      	mov	r3, r2
 803c096:	009b      	lsls	r3, r3, #2
 803c098:	4413      	add	r3, r2
 803c09a:	009b      	lsls	r3, r3, #2
 803c09c:	440b      	add	r3, r1
 803c09e:	3324      	adds	r3, #36	; 0x24
 803c0a0:	881b      	ldrh	r3, [r3, #0]
 803c0a2:	2b00      	cmp	r3, #0
 803c0a4:	d117      	bne.n	803c0d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803c0a6:	6839      	ldr	r1, [r7, #0]
 803c0a8:	6878      	ldr	r0, [r7, #4]
 803c0aa:	f000 fbb0 	bl	803c80e <USBD_CtlError>
                  break;
 803c0ae:	e054      	b.n	803c15a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 803c0b0:	7bbb      	ldrb	r3, [r7, #14]
 803c0b2:	f003 020f 	and.w	r2, r3, #15
 803c0b6:	6879      	ldr	r1, [r7, #4]
 803c0b8:	4613      	mov	r3, r2
 803c0ba:	009b      	lsls	r3, r3, #2
 803c0bc:	4413      	add	r3, r2
 803c0be:	009b      	lsls	r3, r3, #2
 803c0c0:	440b      	add	r3, r1
 803c0c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803c0c6:	881b      	ldrh	r3, [r3, #0]
 803c0c8:	2b00      	cmp	r3, #0
 803c0ca:	d104      	bne.n	803c0d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803c0cc:	6839      	ldr	r1, [r7, #0]
 803c0ce:	6878      	ldr	r0, [r7, #4]
 803c0d0:	f000 fb9d 	bl	803c80e <USBD_CtlError>
                  break;
 803c0d4:	e041      	b.n	803c15a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803c0d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803c0da:	2b00      	cmp	r3, #0
 803c0dc:	da0b      	bge.n	803c0f6 <USBD_StdEPReq+0x2b2>
 803c0de:	7bbb      	ldrb	r3, [r7, #14]
 803c0e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803c0e4:	4613      	mov	r3, r2
 803c0e6:	009b      	lsls	r3, r3, #2
 803c0e8:	4413      	add	r3, r2
 803c0ea:	009b      	lsls	r3, r3, #2
 803c0ec:	3310      	adds	r3, #16
 803c0ee:	687a      	ldr	r2, [r7, #4]
 803c0f0:	4413      	add	r3, r2
 803c0f2:	3304      	adds	r3, #4
 803c0f4:	e00b      	b.n	803c10e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803c0f6:	7bbb      	ldrb	r3, [r7, #14]
 803c0f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803c0fc:	4613      	mov	r3, r2
 803c0fe:	009b      	lsls	r3, r3, #2
 803c100:	4413      	add	r3, r2
 803c102:	009b      	lsls	r3, r3, #2
 803c104:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803c108:	687a      	ldr	r2, [r7, #4]
 803c10a:	4413      	add	r3, r2
 803c10c:	3304      	adds	r3, #4
 803c10e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 803c110:	7bbb      	ldrb	r3, [r7, #14]
 803c112:	2b00      	cmp	r3, #0
 803c114:	d002      	beq.n	803c11c <USBD_StdEPReq+0x2d8>
 803c116:	7bbb      	ldrb	r3, [r7, #14]
 803c118:	2b80      	cmp	r3, #128	; 0x80
 803c11a:	d103      	bne.n	803c124 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 803c11c:	68bb      	ldr	r3, [r7, #8]
 803c11e:	2200      	movs	r2, #0
 803c120:	601a      	str	r2, [r3, #0]
 803c122:	e00e      	b.n	803c142 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 803c124:	7bbb      	ldrb	r3, [r7, #14]
 803c126:	4619      	mov	r1, r3
 803c128:	6878      	ldr	r0, [r7, #4]
 803c12a:	f001 f89d 	bl	803d268 <USBD_LL_IsStallEP>
 803c12e:	4603      	mov	r3, r0
 803c130:	2b00      	cmp	r3, #0
 803c132:	d003      	beq.n	803c13c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 803c134:	68bb      	ldr	r3, [r7, #8]
 803c136:	2201      	movs	r2, #1
 803c138:	601a      	str	r2, [r3, #0]
 803c13a:	e002      	b.n	803c142 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 803c13c:	68bb      	ldr	r3, [r7, #8]
 803c13e:	2200      	movs	r2, #0
 803c140:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803c142:	68bb      	ldr	r3, [r7, #8]
 803c144:	2202      	movs	r2, #2
 803c146:	4619      	mov	r1, r3
 803c148:	6878      	ldr	r0, [r7, #4]
 803c14a:	f000 fbd1 	bl	803c8f0 <USBD_CtlSendData>
              break;
 803c14e:	e004      	b.n	803c15a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 803c150:	6839      	ldr	r1, [r7, #0]
 803c152:	6878      	ldr	r0, [r7, #4]
 803c154:	f000 fb5b 	bl	803c80e <USBD_CtlError>
              break;
 803c158:	bf00      	nop
          }
          break;
 803c15a:	e004      	b.n	803c166 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 803c15c:	6839      	ldr	r1, [r7, #0]
 803c15e:	6878      	ldr	r0, [r7, #4]
 803c160:	f000 fb55 	bl	803c80e <USBD_CtlError>
          break;
 803c164:	bf00      	nop
      }
      break;
 803c166:	e005      	b.n	803c174 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 803c168:	6839      	ldr	r1, [r7, #0]
 803c16a:	6878      	ldr	r0, [r7, #4]
 803c16c:	f000 fb4f 	bl	803c80e <USBD_CtlError>
      break;
 803c170:	e000      	b.n	803c174 <USBD_StdEPReq+0x330>
      break;
 803c172:	bf00      	nop
  }

  return ret;
 803c174:	7bfb      	ldrb	r3, [r7, #15]
}
 803c176:	4618      	mov	r0, r3
 803c178:	3710      	adds	r7, #16
 803c17a:	46bd      	mov	sp, r7
 803c17c:	bd80      	pop	{r7, pc}
	...

0803c180 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c180:	b580      	push	{r7, lr}
 803c182:	b084      	sub	sp, #16
 803c184:	af00      	add	r7, sp, #0
 803c186:	6078      	str	r0, [r7, #4]
 803c188:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803c18a:	2300      	movs	r3, #0
 803c18c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 803c18e:	2300      	movs	r3, #0
 803c190:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 803c192:	2300      	movs	r3, #0
 803c194:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 803c196:	683b      	ldr	r3, [r7, #0]
 803c198:	885b      	ldrh	r3, [r3, #2]
 803c19a:	0a1b      	lsrs	r3, r3, #8
 803c19c:	b29b      	uxth	r3, r3
 803c19e:	3b01      	subs	r3, #1
 803c1a0:	2b06      	cmp	r3, #6
 803c1a2:	f200 8128 	bhi.w	803c3f6 <USBD_GetDescriptor+0x276>
 803c1a6:	a201      	add	r2, pc, #4	; (adr r2, 803c1ac <USBD_GetDescriptor+0x2c>)
 803c1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803c1ac:	0803c1c9 	.word	0x0803c1c9
 803c1b0:	0803c1e1 	.word	0x0803c1e1
 803c1b4:	0803c221 	.word	0x0803c221
 803c1b8:	0803c3f7 	.word	0x0803c3f7
 803c1bc:	0803c3f7 	.word	0x0803c3f7
 803c1c0:	0803c397 	.word	0x0803c397
 803c1c4:	0803c3c3 	.word	0x0803c3c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 803c1c8:	687b      	ldr	r3, [r7, #4]
 803c1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c1ce:	681b      	ldr	r3, [r3, #0]
 803c1d0:	687a      	ldr	r2, [r7, #4]
 803c1d2:	7c12      	ldrb	r2, [r2, #16]
 803c1d4:	f107 0108 	add.w	r1, r7, #8
 803c1d8:	4610      	mov	r0, r2
 803c1da:	4798      	blx	r3
 803c1dc:	60f8      	str	r0, [r7, #12]
      break;
 803c1de:	e112      	b.n	803c406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803c1e0:	687b      	ldr	r3, [r7, #4]
 803c1e2:	7c1b      	ldrb	r3, [r3, #16]
 803c1e4:	2b00      	cmp	r3, #0
 803c1e6:	d10d      	bne.n	803c204 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 803c1e8:	687b      	ldr	r3, [r7, #4]
 803c1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803c1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803c1f0:	f107 0208 	add.w	r2, r7, #8
 803c1f4:	4610      	mov	r0, r2
 803c1f6:	4798      	blx	r3
 803c1f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803c1fa:	68fb      	ldr	r3, [r7, #12]
 803c1fc:	3301      	adds	r3, #1
 803c1fe:	2202      	movs	r2, #2
 803c200:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 803c202:	e100      	b.n	803c406 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 803c204:	687b      	ldr	r3, [r7, #4]
 803c206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803c20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803c20c:	f107 0208 	add.w	r2, r7, #8
 803c210:	4610      	mov	r0, r2
 803c212:	4798      	blx	r3
 803c214:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803c216:	68fb      	ldr	r3, [r7, #12]
 803c218:	3301      	adds	r3, #1
 803c21a:	2202      	movs	r2, #2
 803c21c:	701a      	strb	r2, [r3, #0]
      break;
 803c21e:	e0f2      	b.n	803c406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 803c220:	683b      	ldr	r3, [r7, #0]
 803c222:	885b      	ldrh	r3, [r3, #2]
 803c224:	b2db      	uxtb	r3, r3
 803c226:	2b05      	cmp	r3, #5
 803c228:	f200 80ac 	bhi.w	803c384 <USBD_GetDescriptor+0x204>
 803c22c:	a201      	add	r2, pc, #4	; (adr r2, 803c234 <USBD_GetDescriptor+0xb4>)
 803c22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803c232:	bf00      	nop
 803c234:	0803c24d 	.word	0x0803c24d
 803c238:	0803c281 	.word	0x0803c281
 803c23c:	0803c2b5 	.word	0x0803c2b5
 803c240:	0803c2e9 	.word	0x0803c2e9
 803c244:	0803c31d 	.word	0x0803c31d
 803c248:	0803c351 	.word	0x0803c351
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 803c24c:	687b      	ldr	r3, [r7, #4]
 803c24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c252:	685b      	ldr	r3, [r3, #4]
 803c254:	2b00      	cmp	r3, #0
 803c256:	d00b      	beq.n	803c270 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 803c258:	687b      	ldr	r3, [r7, #4]
 803c25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c25e:	685b      	ldr	r3, [r3, #4]
 803c260:	687a      	ldr	r2, [r7, #4]
 803c262:	7c12      	ldrb	r2, [r2, #16]
 803c264:	f107 0108 	add.w	r1, r7, #8
 803c268:	4610      	mov	r0, r2
 803c26a:	4798      	blx	r3
 803c26c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803c26e:	e091      	b.n	803c394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803c270:	6839      	ldr	r1, [r7, #0]
 803c272:	6878      	ldr	r0, [r7, #4]
 803c274:	f000 facb 	bl	803c80e <USBD_CtlError>
            err++;
 803c278:	7afb      	ldrb	r3, [r7, #11]
 803c27a:	3301      	adds	r3, #1
 803c27c:	72fb      	strb	r3, [r7, #11]
          break;
 803c27e:	e089      	b.n	803c394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 803c280:	687b      	ldr	r3, [r7, #4]
 803c282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c286:	689b      	ldr	r3, [r3, #8]
 803c288:	2b00      	cmp	r3, #0
 803c28a:	d00b      	beq.n	803c2a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 803c28c:	687b      	ldr	r3, [r7, #4]
 803c28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c292:	689b      	ldr	r3, [r3, #8]
 803c294:	687a      	ldr	r2, [r7, #4]
 803c296:	7c12      	ldrb	r2, [r2, #16]
 803c298:	f107 0108 	add.w	r1, r7, #8
 803c29c:	4610      	mov	r0, r2
 803c29e:	4798      	blx	r3
 803c2a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803c2a2:	e077      	b.n	803c394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803c2a4:	6839      	ldr	r1, [r7, #0]
 803c2a6:	6878      	ldr	r0, [r7, #4]
 803c2a8:	f000 fab1 	bl	803c80e <USBD_CtlError>
            err++;
 803c2ac:	7afb      	ldrb	r3, [r7, #11]
 803c2ae:	3301      	adds	r3, #1
 803c2b0:	72fb      	strb	r3, [r7, #11]
          break;
 803c2b2:	e06f      	b.n	803c394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 803c2b4:	687b      	ldr	r3, [r7, #4]
 803c2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c2ba:	68db      	ldr	r3, [r3, #12]
 803c2bc:	2b00      	cmp	r3, #0
 803c2be:	d00b      	beq.n	803c2d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 803c2c0:	687b      	ldr	r3, [r7, #4]
 803c2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c2c6:	68db      	ldr	r3, [r3, #12]
 803c2c8:	687a      	ldr	r2, [r7, #4]
 803c2ca:	7c12      	ldrb	r2, [r2, #16]
 803c2cc:	f107 0108 	add.w	r1, r7, #8
 803c2d0:	4610      	mov	r0, r2
 803c2d2:	4798      	blx	r3
 803c2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803c2d6:	e05d      	b.n	803c394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803c2d8:	6839      	ldr	r1, [r7, #0]
 803c2da:	6878      	ldr	r0, [r7, #4]
 803c2dc:	f000 fa97 	bl	803c80e <USBD_CtlError>
            err++;
 803c2e0:	7afb      	ldrb	r3, [r7, #11]
 803c2e2:	3301      	adds	r3, #1
 803c2e4:	72fb      	strb	r3, [r7, #11]
          break;
 803c2e6:	e055      	b.n	803c394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 803c2e8:	687b      	ldr	r3, [r7, #4]
 803c2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c2ee:	691b      	ldr	r3, [r3, #16]
 803c2f0:	2b00      	cmp	r3, #0
 803c2f2:	d00b      	beq.n	803c30c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 803c2f4:	687b      	ldr	r3, [r7, #4]
 803c2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c2fa:	691b      	ldr	r3, [r3, #16]
 803c2fc:	687a      	ldr	r2, [r7, #4]
 803c2fe:	7c12      	ldrb	r2, [r2, #16]
 803c300:	f107 0108 	add.w	r1, r7, #8
 803c304:	4610      	mov	r0, r2
 803c306:	4798      	blx	r3
 803c308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803c30a:	e043      	b.n	803c394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803c30c:	6839      	ldr	r1, [r7, #0]
 803c30e:	6878      	ldr	r0, [r7, #4]
 803c310:	f000 fa7d 	bl	803c80e <USBD_CtlError>
            err++;
 803c314:	7afb      	ldrb	r3, [r7, #11]
 803c316:	3301      	adds	r3, #1
 803c318:	72fb      	strb	r3, [r7, #11]
          break;
 803c31a:	e03b      	b.n	803c394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 803c31c:	687b      	ldr	r3, [r7, #4]
 803c31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c322:	695b      	ldr	r3, [r3, #20]
 803c324:	2b00      	cmp	r3, #0
 803c326:	d00b      	beq.n	803c340 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 803c328:	687b      	ldr	r3, [r7, #4]
 803c32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c32e:	695b      	ldr	r3, [r3, #20]
 803c330:	687a      	ldr	r2, [r7, #4]
 803c332:	7c12      	ldrb	r2, [r2, #16]
 803c334:	f107 0108 	add.w	r1, r7, #8
 803c338:	4610      	mov	r0, r2
 803c33a:	4798      	blx	r3
 803c33c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803c33e:	e029      	b.n	803c394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803c340:	6839      	ldr	r1, [r7, #0]
 803c342:	6878      	ldr	r0, [r7, #4]
 803c344:	f000 fa63 	bl	803c80e <USBD_CtlError>
            err++;
 803c348:	7afb      	ldrb	r3, [r7, #11]
 803c34a:	3301      	adds	r3, #1
 803c34c:	72fb      	strb	r3, [r7, #11]
          break;
 803c34e:	e021      	b.n	803c394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 803c350:	687b      	ldr	r3, [r7, #4]
 803c352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c356:	699b      	ldr	r3, [r3, #24]
 803c358:	2b00      	cmp	r3, #0
 803c35a:	d00b      	beq.n	803c374 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 803c35c:	687b      	ldr	r3, [r7, #4]
 803c35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803c362:	699b      	ldr	r3, [r3, #24]
 803c364:	687a      	ldr	r2, [r7, #4]
 803c366:	7c12      	ldrb	r2, [r2, #16]
 803c368:	f107 0108 	add.w	r1, r7, #8
 803c36c:	4610      	mov	r0, r2
 803c36e:	4798      	blx	r3
 803c370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803c372:	e00f      	b.n	803c394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803c374:	6839      	ldr	r1, [r7, #0]
 803c376:	6878      	ldr	r0, [r7, #4]
 803c378:	f000 fa49 	bl	803c80e <USBD_CtlError>
            err++;
 803c37c:	7afb      	ldrb	r3, [r7, #11]
 803c37e:	3301      	adds	r3, #1
 803c380:	72fb      	strb	r3, [r7, #11]
          break;
 803c382:	e007      	b.n	803c394 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 803c384:	6839      	ldr	r1, [r7, #0]
 803c386:	6878      	ldr	r0, [r7, #4]
 803c388:	f000 fa41 	bl	803c80e <USBD_CtlError>
          err++;
 803c38c:	7afb      	ldrb	r3, [r7, #11]
 803c38e:	3301      	adds	r3, #1
 803c390:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 803c392:	bf00      	nop
      }
      break;
 803c394:	e037      	b.n	803c406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803c396:	687b      	ldr	r3, [r7, #4]
 803c398:	7c1b      	ldrb	r3, [r3, #16]
 803c39a:	2b00      	cmp	r3, #0
 803c39c:	d109      	bne.n	803c3b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 803c39e:	687b      	ldr	r3, [r7, #4]
 803c3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803c3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803c3a6:	f107 0208 	add.w	r2, r7, #8
 803c3aa:	4610      	mov	r0, r2
 803c3ac:	4798      	blx	r3
 803c3ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803c3b0:	e029      	b.n	803c406 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803c3b2:	6839      	ldr	r1, [r7, #0]
 803c3b4:	6878      	ldr	r0, [r7, #4]
 803c3b6:	f000 fa2a 	bl	803c80e <USBD_CtlError>
        err++;
 803c3ba:	7afb      	ldrb	r3, [r7, #11]
 803c3bc:	3301      	adds	r3, #1
 803c3be:	72fb      	strb	r3, [r7, #11]
      break;
 803c3c0:	e021      	b.n	803c406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803c3c2:	687b      	ldr	r3, [r7, #4]
 803c3c4:	7c1b      	ldrb	r3, [r3, #16]
 803c3c6:	2b00      	cmp	r3, #0
 803c3c8:	d10d      	bne.n	803c3e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 803c3ca:	687b      	ldr	r3, [r7, #4]
 803c3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803c3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803c3d2:	f107 0208 	add.w	r2, r7, #8
 803c3d6:	4610      	mov	r0, r2
 803c3d8:	4798      	blx	r3
 803c3da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 803c3dc:	68fb      	ldr	r3, [r7, #12]
 803c3de:	3301      	adds	r3, #1
 803c3e0:	2207      	movs	r2, #7
 803c3e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803c3e4:	e00f      	b.n	803c406 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803c3e6:	6839      	ldr	r1, [r7, #0]
 803c3e8:	6878      	ldr	r0, [r7, #4]
 803c3ea:	f000 fa10 	bl	803c80e <USBD_CtlError>
        err++;
 803c3ee:	7afb      	ldrb	r3, [r7, #11]
 803c3f0:	3301      	adds	r3, #1
 803c3f2:	72fb      	strb	r3, [r7, #11]
      break;
 803c3f4:	e007      	b.n	803c406 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 803c3f6:	6839      	ldr	r1, [r7, #0]
 803c3f8:	6878      	ldr	r0, [r7, #4]
 803c3fa:	f000 fa08 	bl	803c80e <USBD_CtlError>
      err++;
 803c3fe:	7afb      	ldrb	r3, [r7, #11]
 803c400:	3301      	adds	r3, #1
 803c402:	72fb      	strb	r3, [r7, #11]
      break;
 803c404:	bf00      	nop
  }

  if (err != 0U)
 803c406:	7afb      	ldrb	r3, [r7, #11]
 803c408:	2b00      	cmp	r3, #0
 803c40a:	d11e      	bne.n	803c44a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 803c40c:	683b      	ldr	r3, [r7, #0]
 803c40e:	88db      	ldrh	r3, [r3, #6]
 803c410:	2b00      	cmp	r3, #0
 803c412:	d016      	beq.n	803c442 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 803c414:	893b      	ldrh	r3, [r7, #8]
 803c416:	2b00      	cmp	r3, #0
 803c418:	d00e      	beq.n	803c438 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 803c41a:	683b      	ldr	r3, [r7, #0]
 803c41c:	88da      	ldrh	r2, [r3, #6]
 803c41e:	893b      	ldrh	r3, [r7, #8]
 803c420:	4293      	cmp	r3, r2
 803c422:	bf28      	it	cs
 803c424:	4613      	movcs	r3, r2
 803c426:	b29b      	uxth	r3, r3
 803c428:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 803c42a:	893b      	ldrh	r3, [r7, #8]
 803c42c:	461a      	mov	r2, r3
 803c42e:	68f9      	ldr	r1, [r7, #12]
 803c430:	6878      	ldr	r0, [r7, #4]
 803c432:	f000 fa5d 	bl	803c8f0 <USBD_CtlSendData>
 803c436:	e009      	b.n	803c44c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 803c438:	6839      	ldr	r1, [r7, #0]
 803c43a:	6878      	ldr	r0, [r7, #4]
 803c43c:	f000 f9e7 	bl	803c80e <USBD_CtlError>
 803c440:	e004      	b.n	803c44c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 803c442:	6878      	ldr	r0, [r7, #4]
 803c444:	f000 faae 	bl	803c9a4 <USBD_CtlSendStatus>
 803c448:	e000      	b.n	803c44c <USBD_GetDescriptor+0x2cc>
    return;
 803c44a:	bf00      	nop
  }
}
 803c44c:	3710      	adds	r7, #16
 803c44e:	46bd      	mov	sp, r7
 803c450:	bd80      	pop	{r7, pc}
 803c452:	bf00      	nop

0803c454 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c454:	b580      	push	{r7, lr}
 803c456:	b084      	sub	sp, #16
 803c458:	af00      	add	r7, sp, #0
 803c45a:	6078      	str	r0, [r7, #4]
 803c45c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803c45e:	683b      	ldr	r3, [r7, #0]
 803c460:	889b      	ldrh	r3, [r3, #4]
 803c462:	2b00      	cmp	r3, #0
 803c464:	d131      	bne.n	803c4ca <USBD_SetAddress+0x76>
 803c466:	683b      	ldr	r3, [r7, #0]
 803c468:	88db      	ldrh	r3, [r3, #6]
 803c46a:	2b00      	cmp	r3, #0
 803c46c:	d12d      	bne.n	803c4ca <USBD_SetAddress+0x76>
 803c46e:	683b      	ldr	r3, [r7, #0]
 803c470:	885b      	ldrh	r3, [r3, #2]
 803c472:	2b7f      	cmp	r3, #127	; 0x7f
 803c474:	d829      	bhi.n	803c4ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 803c476:	683b      	ldr	r3, [r7, #0]
 803c478:	885b      	ldrh	r3, [r3, #2]
 803c47a:	b2db      	uxtb	r3, r3
 803c47c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803c480:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803c482:	687b      	ldr	r3, [r7, #4]
 803c484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803c488:	b2db      	uxtb	r3, r3
 803c48a:	2b03      	cmp	r3, #3
 803c48c:	d104      	bne.n	803c498 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 803c48e:	6839      	ldr	r1, [r7, #0]
 803c490:	6878      	ldr	r0, [r7, #4]
 803c492:	f000 f9bc 	bl	803c80e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803c496:	e01d      	b.n	803c4d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 803c498:	687b      	ldr	r3, [r7, #4]
 803c49a:	7bfa      	ldrb	r2, [r7, #15]
 803c49c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803c4a0:	7bfb      	ldrb	r3, [r7, #15]
 803c4a2:	4619      	mov	r1, r3
 803c4a4:	6878      	ldr	r0, [r7, #4]
 803c4a6:	f000 ff0b 	bl	803d2c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 803c4aa:	6878      	ldr	r0, [r7, #4]
 803c4ac:	f000 fa7a 	bl	803c9a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803c4b0:	7bfb      	ldrb	r3, [r7, #15]
 803c4b2:	2b00      	cmp	r3, #0
 803c4b4:	d004      	beq.n	803c4c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803c4b6:	687b      	ldr	r3, [r7, #4]
 803c4b8:	2202      	movs	r2, #2
 803c4ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803c4be:	e009      	b.n	803c4d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803c4c0:	687b      	ldr	r3, [r7, #4]
 803c4c2:	2201      	movs	r2, #1
 803c4c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803c4c8:	e004      	b.n	803c4d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 803c4ca:	6839      	ldr	r1, [r7, #0]
 803c4cc:	6878      	ldr	r0, [r7, #4]
 803c4ce:	f000 f99e 	bl	803c80e <USBD_CtlError>
  }
}
 803c4d2:	bf00      	nop
 803c4d4:	bf00      	nop
 803c4d6:	3710      	adds	r7, #16
 803c4d8:	46bd      	mov	sp, r7
 803c4da:	bd80      	pop	{r7, pc}

0803c4dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c4dc:	b580      	push	{r7, lr}
 803c4de:	b084      	sub	sp, #16
 803c4e0:	af00      	add	r7, sp, #0
 803c4e2:	6078      	str	r0, [r7, #4]
 803c4e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803c4e6:	2300      	movs	r3, #0
 803c4e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 803c4ea:	683b      	ldr	r3, [r7, #0]
 803c4ec:	885b      	ldrh	r3, [r3, #2]
 803c4ee:	b2da      	uxtb	r2, r3
 803c4f0:	4b4e      	ldr	r3, [pc, #312]	; (803c62c <USBD_SetConfig+0x150>)
 803c4f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 803c4f4:	4b4d      	ldr	r3, [pc, #308]	; (803c62c <USBD_SetConfig+0x150>)
 803c4f6:	781b      	ldrb	r3, [r3, #0]
 803c4f8:	2b01      	cmp	r3, #1
 803c4fa:	d905      	bls.n	803c508 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 803c4fc:	6839      	ldr	r1, [r7, #0]
 803c4fe:	6878      	ldr	r0, [r7, #4]
 803c500:	f000 f985 	bl	803c80e <USBD_CtlError>
    return USBD_FAIL;
 803c504:	2303      	movs	r3, #3
 803c506:	e08c      	b.n	803c622 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 803c508:	687b      	ldr	r3, [r7, #4]
 803c50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803c50e:	b2db      	uxtb	r3, r3
 803c510:	2b02      	cmp	r3, #2
 803c512:	d002      	beq.n	803c51a <USBD_SetConfig+0x3e>
 803c514:	2b03      	cmp	r3, #3
 803c516:	d029      	beq.n	803c56c <USBD_SetConfig+0x90>
 803c518:	e075      	b.n	803c606 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 803c51a:	4b44      	ldr	r3, [pc, #272]	; (803c62c <USBD_SetConfig+0x150>)
 803c51c:	781b      	ldrb	r3, [r3, #0]
 803c51e:	2b00      	cmp	r3, #0
 803c520:	d020      	beq.n	803c564 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803c522:	4b42      	ldr	r3, [pc, #264]	; (803c62c <USBD_SetConfig+0x150>)
 803c524:	781b      	ldrb	r3, [r3, #0]
 803c526:	461a      	mov	r2, r3
 803c528:	687b      	ldr	r3, [r7, #4]
 803c52a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 803c52c:	4b3f      	ldr	r3, [pc, #252]	; (803c62c <USBD_SetConfig+0x150>)
 803c52e:	781b      	ldrb	r3, [r3, #0]
 803c530:	4619      	mov	r1, r3
 803c532:	6878      	ldr	r0, [r7, #4]
 803c534:	f7fe ffe7 	bl	803b506 <USBD_SetClassConfig>
 803c538:	4603      	mov	r3, r0
 803c53a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 803c53c:	7bfb      	ldrb	r3, [r7, #15]
 803c53e:	2b00      	cmp	r3, #0
 803c540:	d008      	beq.n	803c554 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 803c542:	6839      	ldr	r1, [r7, #0]
 803c544:	6878      	ldr	r0, [r7, #4]
 803c546:	f000 f962 	bl	803c80e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803c54a:	687b      	ldr	r3, [r7, #4]
 803c54c:	2202      	movs	r2, #2
 803c54e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803c552:	e065      	b.n	803c620 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803c554:	6878      	ldr	r0, [r7, #4]
 803c556:	f000 fa25 	bl	803c9a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 803c55a:	687b      	ldr	r3, [r7, #4]
 803c55c:	2203      	movs	r2, #3
 803c55e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803c562:	e05d      	b.n	803c620 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803c564:	6878      	ldr	r0, [r7, #4]
 803c566:	f000 fa1d 	bl	803c9a4 <USBD_CtlSendStatus>
      break;
 803c56a:	e059      	b.n	803c620 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 803c56c:	4b2f      	ldr	r3, [pc, #188]	; (803c62c <USBD_SetConfig+0x150>)
 803c56e:	781b      	ldrb	r3, [r3, #0]
 803c570:	2b00      	cmp	r3, #0
 803c572:	d112      	bne.n	803c59a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803c574:	687b      	ldr	r3, [r7, #4]
 803c576:	2202      	movs	r2, #2
 803c578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 803c57c:	4b2b      	ldr	r3, [pc, #172]	; (803c62c <USBD_SetConfig+0x150>)
 803c57e:	781b      	ldrb	r3, [r3, #0]
 803c580:	461a      	mov	r2, r3
 803c582:	687b      	ldr	r3, [r7, #4]
 803c584:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 803c586:	4b29      	ldr	r3, [pc, #164]	; (803c62c <USBD_SetConfig+0x150>)
 803c588:	781b      	ldrb	r3, [r3, #0]
 803c58a:	4619      	mov	r1, r3
 803c58c:	6878      	ldr	r0, [r7, #4]
 803c58e:	f7fe ffd6 	bl	803b53e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 803c592:	6878      	ldr	r0, [r7, #4]
 803c594:	f000 fa06 	bl	803c9a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803c598:	e042      	b.n	803c620 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 803c59a:	4b24      	ldr	r3, [pc, #144]	; (803c62c <USBD_SetConfig+0x150>)
 803c59c:	781b      	ldrb	r3, [r3, #0]
 803c59e:	461a      	mov	r2, r3
 803c5a0:	687b      	ldr	r3, [r7, #4]
 803c5a2:	685b      	ldr	r3, [r3, #4]
 803c5a4:	429a      	cmp	r2, r3
 803c5a6:	d02a      	beq.n	803c5fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803c5a8:	687b      	ldr	r3, [r7, #4]
 803c5aa:	685b      	ldr	r3, [r3, #4]
 803c5ac:	b2db      	uxtb	r3, r3
 803c5ae:	4619      	mov	r1, r3
 803c5b0:	6878      	ldr	r0, [r7, #4]
 803c5b2:	f7fe ffc4 	bl	803b53e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 803c5b6:	4b1d      	ldr	r3, [pc, #116]	; (803c62c <USBD_SetConfig+0x150>)
 803c5b8:	781b      	ldrb	r3, [r3, #0]
 803c5ba:	461a      	mov	r2, r3
 803c5bc:	687b      	ldr	r3, [r7, #4]
 803c5be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 803c5c0:	4b1a      	ldr	r3, [pc, #104]	; (803c62c <USBD_SetConfig+0x150>)
 803c5c2:	781b      	ldrb	r3, [r3, #0]
 803c5c4:	4619      	mov	r1, r3
 803c5c6:	6878      	ldr	r0, [r7, #4]
 803c5c8:	f7fe ff9d 	bl	803b506 <USBD_SetClassConfig>
 803c5cc:	4603      	mov	r3, r0
 803c5ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803c5d0:	7bfb      	ldrb	r3, [r7, #15]
 803c5d2:	2b00      	cmp	r3, #0
 803c5d4:	d00f      	beq.n	803c5f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 803c5d6:	6839      	ldr	r1, [r7, #0]
 803c5d8:	6878      	ldr	r0, [r7, #4]
 803c5da:	f000 f918 	bl	803c80e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803c5de:	687b      	ldr	r3, [r7, #4]
 803c5e0:	685b      	ldr	r3, [r3, #4]
 803c5e2:	b2db      	uxtb	r3, r3
 803c5e4:	4619      	mov	r1, r3
 803c5e6:	6878      	ldr	r0, [r7, #4]
 803c5e8:	f7fe ffa9 	bl	803b53e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803c5ec:	687b      	ldr	r3, [r7, #4]
 803c5ee:	2202      	movs	r2, #2
 803c5f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803c5f4:	e014      	b.n	803c620 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803c5f6:	6878      	ldr	r0, [r7, #4]
 803c5f8:	f000 f9d4 	bl	803c9a4 <USBD_CtlSendStatus>
      break;
 803c5fc:	e010      	b.n	803c620 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803c5fe:	6878      	ldr	r0, [r7, #4]
 803c600:	f000 f9d0 	bl	803c9a4 <USBD_CtlSendStatus>
      break;
 803c604:	e00c      	b.n	803c620 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 803c606:	6839      	ldr	r1, [r7, #0]
 803c608:	6878      	ldr	r0, [r7, #4]
 803c60a:	f000 f900 	bl	803c80e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803c60e:	4b07      	ldr	r3, [pc, #28]	; (803c62c <USBD_SetConfig+0x150>)
 803c610:	781b      	ldrb	r3, [r3, #0]
 803c612:	4619      	mov	r1, r3
 803c614:	6878      	ldr	r0, [r7, #4]
 803c616:	f7fe ff92 	bl	803b53e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 803c61a:	2303      	movs	r3, #3
 803c61c:	73fb      	strb	r3, [r7, #15]
      break;
 803c61e:	bf00      	nop
  }

  return ret;
 803c620:	7bfb      	ldrb	r3, [r7, #15]
}
 803c622:	4618      	mov	r0, r3
 803c624:	3710      	adds	r7, #16
 803c626:	46bd      	mov	sp, r7
 803c628:	bd80      	pop	{r7, pc}
 803c62a:	bf00      	nop
 803c62c:	24001b50 	.word	0x24001b50

0803c630 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c630:	b580      	push	{r7, lr}
 803c632:	b082      	sub	sp, #8
 803c634:	af00      	add	r7, sp, #0
 803c636:	6078      	str	r0, [r7, #4]
 803c638:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 803c63a:	683b      	ldr	r3, [r7, #0]
 803c63c:	88db      	ldrh	r3, [r3, #6]
 803c63e:	2b01      	cmp	r3, #1
 803c640:	d004      	beq.n	803c64c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803c642:	6839      	ldr	r1, [r7, #0]
 803c644:	6878      	ldr	r0, [r7, #4]
 803c646:	f000 f8e2 	bl	803c80e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 803c64a:	e023      	b.n	803c694 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 803c64c:	687b      	ldr	r3, [r7, #4]
 803c64e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803c652:	b2db      	uxtb	r3, r3
 803c654:	2b02      	cmp	r3, #2
 803c656:	dc02      	bgt.n	803c65e <USBD_GetConfig+0x2e>
 803c658:	2b00      	cmp	r3, #0
 803c65a:	dc03      	bgt.n	803c664 <USBD_GetConfig+0x34>
 803c65c:	e015      	b.n	803c68a <USBD_GetConfig+0x5a>
 803c65e:	2b03      	cmp	r3, #3
 803c660:	d00b      	beq.n	803c67a <USBD_GetConfig+0x4a>
 803c662:	e012      	b.n	803c68a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 803c664:	687b      	ldr	r3, [r7, #4]
 803c666:	2200      	movs	r2, #0
 803c668:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803c66a:	687b      	ldr	r3, [r7, #4]
 803c66c:	3308      	adds	r3, #8
 803c66e:	2201      	movs	r2, #1
 803c670:	4619      	mov	r1, r3
 803c672:	6878      	ldr	r0, [r7, #4]
 803c674:	f000 f93c 	bl	803c8f0 <USBD_CtlSendData>
        break;
 803c678:	e00c      	b.n	803c694 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803c67a:	687b      	ldr	r3, [r7, #4]
 803c67c:	3304      	adds	r3, #4
 803c67e:	2201      	movs	r2, #1
 803c680:	4619      	mov	r1, r3
 803c682:	6878      	ldr	r0, [r7, #4]
 803c684:	f000 f934 	bl	803c8f0 <USBD_CtlSendData>
        break;
 803c688:	e004      	b.n	803c694 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 803c68a:	6839      	ldr	r1, [r7, #0]
 803c68c:	6878      	ldr	r0, [r7, #4]
 803c68e:	f000 f8be 	bl	803c80e <USBD_CtlError>
        break;
 803c692:	bf00      	nop
}
 803c694:	bf00      	nop
 803c696:	3708      	adds	r7, #8
 803c698:	46bd      	mov	sp, r7
 803c69a:	bd80      	pop	{r7, pc}

0803c69c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c69c:	b580      	push	{r7, lr}
 803c69e:	b082      	sub	sp, #8
 803c6a0:	af00      	add	r7, sp, #0
 803c6a2:	6078      	str	r0, [r7, #4]
 803c6a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803c6a6:	687b      	ldr	r3, [r7, #4]
 803c6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803c6ac:	b2db      	uxtb	r3, r3
 803c6ae:	3b01      	subs	r3, #1
 803c6b0:	2b02      	cmp	r3, #2
 803c6b2:	d81e      	bhi.n	803c6f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 803c6b4:	683b      	ldr	r3, [r7, #0]
 803c6b6:	88db      	ldrh	r3, [r3, #6]
 803c6b8:	2b02      	cmp	r3, #2
 803c6ba:	d004      	beq.n	803c6c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 803c6bc:	6839      	ldr	r1, [r7, #0]
 803c6be:	6878      	ldr	r0, [r7, #4]
 803c6c0:	f000 f8a5 	bl	803c80e <USBD_CtlError>
        break;
 803c6c4:	e01a      	b.n	803c6fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 803c6c6:	687b      	ldr	r3, [r7, #4]
 803c6c8:	2201      	movs	r2, #1
 803c6ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 803c6cc:	687b      	ldr	r3, [r7, #4]
 803c6ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803c6d2:	2b00      	cmp	r3, #0
 803c6d4:	d005      	beq.n	803c6e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 803c6d6:	687b      	ldr	r3, [r7, #4]
 803c6d8:	68db      	ldr	r3, [r3, #12]
 803c6da:	f043 0202 	orr.w	r2, r3, #2
 803c6de:	687b      	ldr	r3, [r7, #4]
 803c6e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803c6e2:	687b      	ldr	r3, [r7, #4]
 803c6e4:	330c      	adds	r3, #12
 803c6e6:	2202      	movs	r2, #2
 803c6e8:	4619      	mov	r1, r3
 803c6ea:	6878      	ldr	r0, [r7, #4]
 803c6ec:	f000 f900 	bl	803c8f0 <USBD_CtlSendData>
      break;
 803c6f0:	e004      	b.n	803c6fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803c6f2:	6839      	ldr	r1, [r7, #0]
 803c6f4:	6878      	ldr	r0, [r7, #4]
 803c6f6:	f000 f88a 	bl	803c80e <USBD_CtlError>
      break;
 803c6fa:	bf00      	nop
  }
}
 803c6fc:	bf00      	nop
 803c6fe:	3708      	adds	r7, #8
 803c700:	46bd      	mov	sp, r7
 803c702:	bd80      	pop	{r7, pc}

0803c704 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c704:	b580      	push	{r7, lr}
 803c706:	b082      	sub	sp, #8
 803c708:	af00      	add	r7, sp, #0
 803c70a:	6078      	str	r0, [r7, #4]
 803c70c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803c70e:	683b      	ldr	r3, [r7, #0]
 803c710:	885b      	ldrh	r3, [r3, #2]
 803c712:	2b01      	cmp	r3, #1
 803c714:	d107      	bne.n	803c726 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 803c716:	687b      	ldr	r3, [r7, #4]
 803c718:	2201      	movs	r2, #1
 803c71a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803c71e:	6878      	ldr	r0, [r7, #4]
 803c720:	f000 f940 	bl	803c9a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 803c724:	e013      	b.n	803c74e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 803c726:	683b      	ldr	r3, [r7, #0]
 803c728:	885b      	ldrh	r3, [r3, #2]
 803c72a:	2b02      	cmp	r3, #2
 803c72c:	d10b      	bne.n	803c746 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803c72e:	683b      	ldr	r3, [r7, #0]
 803c730:	889b      	ldrh	r3, [r3, #4]
 803c732:	0a1b      	lsrs	r3, r3, #8
 803c734:	b29b      	uxth	r3, r3
 803c736:	b2da      	uxtb	r2, r3
 803c738:	687b      	ldr	r3, [r7, #4]
 803c73a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 803c73e:	6878      	ldr	r0, [r7, #4]
 803c740:	f000 f930 	bl	803c9a4 <USBD_CtlSendStatus>
}
 803c744:	e003      	b.n	803c74e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 803c746:	6839      	ldr	r1, [r7, #0]
 803c748:	6878      	ldr	r0, [r7, #4]
 803c74a:	f000 f860 	bl	803c80e <USBD_CtlError>
}
 803c74e:	bf00      	nop
 803c750:	3708      	adds	r7, #8
 803c752:	46bd      	mov	sp, r7
 803c754:	bd80      	pop	{r7, pc}

0803c756 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c756:	b580      	push	{r7, lr}
 803c758:	b082      	sub	sp, #8
 803c75a:	af00      	add	r7, sp, #0
 803c75c:	6078      	str	r0, [r7, #4]
 803c75e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803c760:	687b      	ldr	r3, [r7, #4]
 803c762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803c766:	b2db      	uxtb	r3, r3
 803c768:	3b01      	subs	r3, #1
 803c76a:	2b02      	cmp	r3, #2
 803c76c:	d80b      	bhi.n	803c786 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803c76e:	683b      	ldr	r3, [r7, #0]
 803c770:	885b      	ldrh	r3, [r3, #2]
 803c772:	2b01      	cmp	r3, #1
 803c774:	d10c      	bne.n	803c790 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 803c776:	687b      	ldr	r3, [r7, #4]
 803c778:	2200      	movs	r2, #0
 803c77a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 803c77e:	6878      	ldr	r0, [r7, #4]
 803c780:	f000 f910 	bl	803c9a4 <USBD_CtlSendStatus>
      }
      break;
 803c784:	e004      	b.n	803c790 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 803c786:	6839      	ldr	r1, [r7, #0]
 803c788:	6878      	ldr	r0, [r7, #4]
 803c78a:	f000 f840 	bl	803c80e <USBD_CtlError>
      break;
 803c78e:	e000      	b.n	803c792 <USBD_ClrFeature+0x3c>
      break;
 803c790:	bf00      	nop
  }
}
 803c792:	bf00      	nop
 803c794:	3708      	adds	r7, #8
 803c796:	46bd      	mov	sp, r7
 803c798:	bd80      	pop	{r7, pc}

0803c79a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803c79a:	b580      	push	{r7, lr}
 803c79c:	b084      	sub	sp, #16
 803c79e:	af00      	add	r7, sp, #0
 803c7a0:	6078      	str	r0, [r7, #4]
 803c7a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 803c7a4:	683b      	ldr	r3, [r7, #0]
 803c7a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 803c7a8:	68fb      	ldr	r3, [r7, #12]
 803c7aa:	781a      	ldrb	r2, [r3, #0]
 803c7ac:	687b      	ldr	r3, [r7, #4]
 803c7ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 803c7b0:	68fb      	ldr	r3, [r7, #12]
 803c7b2:	3301      	adds	r3, #1
 803c7b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 803c7b6:	68fb      	ldr	r3, [r7, #12]
 803c7b8:	781a      	ldrb	r2, [r3, #0]
 803c7ba:	687b      	ldr	r3, [r7, #4]
 803c7bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803c7be:	68fb      	ldr	r3, [r7, #12]
 803c7c0:	3301      	adds	r3, #1
 803c7c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 803c7c4:	68f8      	ldr	r0, [r7, #12]
 803c7c6:	f7ff fa41 	bl	803bc4c <SWAPBYTE>
 803c7ca:	4603      	mov	r3, r0
 803c7cc:	461a      	mov	r2, r3
 803c7ce:	687b      	ldr	r3, [r7, #4]
 803c7d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803c7d2:	68fb      	ldr	r3, [r7, #12]
 803c7d4:	3301      	adds	r3, #1
 803c7d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803c7d8:	68fb      	ldr	r3, [r7, #12]
 803c7da:	3301      	adds	r3, #1
 803c7dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803c7de:	68f8      	ldr	r0, [r7, #12]
 803c7e0:	f7ff fa34 	bl	803bc4c <SWAPBYTE>
 803c7e4:	4603      	mov	r3, r0
 803c7e6:	461a      	mov	r2, r3
 803c7e8:	687b      	ldr	r3, [r7, #4]
 803c7ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 803c7ec:	68fb      	ldr	r3, [r7, #12]
 803c7ee:	3301      	adds	r3, #1
 803c7f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803c7f2:	68fb      	ldr	r3, [r7, #12]
 803c7f4:	3301      	adds	r3, #1
 803c7f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 803c7f8:	68f8      	ldr	r0, [r7, #12]
 803c7fa:	f7ff fa27 	bl	803bc4c <SWAPBYTE>
 803c7fe:	4603      	mov	r3, r0
 803c800:	461a      	mov	r2, r3
 803c802:	687b      	ldr	r3, [r7, #4]
 803c804:	80da      	strh	r2, [r3, #6]
}
 803c806:	bf00      	nop
 803c808:	3710      	adds	r7, #16
 803c80a:	46bd      	mov	sp, r7
 803c80c:	bd80      	pop	{r7, pc}

0803c80e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803c80e:	b580      	push	{r7, lr}
 803c810:	b082      	sub	sp, #8
 803c812:	af00      	add	r7, sp, #0
 803c814:	6078      	str	r0, [r7, #4]
 803c816:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 803c818:	2180      	movs	r1, #128	; 0x80
 803c81a:	6878      	ldr	r0, [r7, #4]
 803c81c:	f000 fce6 	bl	803d1ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803c820:	2100      	movs	r1, #0
 803c822:	6878      	ldr	r0, [r7, #4]
 803c824:	f000 fce2 	bl	803d1ec <USBD_LL_StallEP>
}
 803c828:	bf00      	nop
 803c82a:	3708      	adds	r7, #8
 803c82c:	46bd      	mov	sp, r7
 803c82e:	bd80      	pop	{r7, pc}

0803c830 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803c830:	b580      	push	{r7, lr}
 803c832:	b086      	sub	sp, #24
 803c834:	af00      	add	r7, sp, #0
 803c836:	60f8      	str	r0, [r7, #12]
 803c838:	60b9      	str	r1, [r7, #8]
 803c83a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 803c83c:	2300      	movs	r3, #0
 803c83e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803c840:	68fb      	ldr	r3, [r7, #12]
 803c842:	2b00      	cmp	r3, #0
 803c844:	d036      	beq.n	803c8b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 803c846:	68fb      	ldr	r3, [r7, #12]
 803c848:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 803c84a:	6938      	ldr	r0, [r7, #16]
 803c84c:	f000 f836 	bl	803c8bc <USBD_GetLen>
 803c850:	4603      	mov	r3, r0
 803c852:	3301      	adds	r3, #1
 803c854:	b29b      	uxth	r3, r3
 803c856:	005b      	lsls	r3, r3, #1
 803c858:	b29a      	uxth	r2, r3
 803c85a:	687b      	ldr	r3, [r7, #4]
 803c85c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 803c85e:	7dfb      	ldrb	r3, [r7, #23]
 803c860:	68ba      	ldr	r2, [r7, #8]
 803c862:	4413      	add	r3, r2
 803c864:	687a      	ldr	r2, [r7, #4]
 803c866:	7812      	ldrb	r2, [r2, #0]
 803c868:	701a      	strb	r2, [r3, #0]
  idx++;
 803c86a:	7dfb      	ldrb	r3, [r7, #23]
 803c86c:	3301      	adds	r3, #1
 803c86e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 803c870:	7dfb      	ldrb	r3, [r7, #23]
 803c872:	68ba      	ldr	r2, [r7, #8]
 803c874:	4413      	add	r3, r2
 803c876:	2203      	movs	r2, #3
 803c878:	701a      	strb	r2, [r3, #0]
  idx++;
 803c87a:	7dfb      	ldrb	r3, [r7, #23]
 803c87c:	3301      	adds	r3, #1
 803c87e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 803c880:	e013      	b.n	803c8aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 803c882:	7dfb      	ldrb	r3, [r7, #23]
 803c884:	68ba      	ldr	r2, [r7, #8]
 803c886:	4413      	add	r3, r2
 803c888:	693a      	ldr	r2, [r7, #16]
 803c88a:	7812      	ldrb	r2, [r2, #0]
 803c88c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803c88e:	693b      	ldr	r3, [r7, #16]
 803c890:	3301      	adds	r3, #1
 803c892:	613b      	str	r3, [r7, #16]
    idx++;
 803c894:	7dfb      	ldrb	r3, [r7, #23]
 803c896:	3301      	adds	r3, #1
 803c898:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803c89a:	7dfb      	ldrb	r3, [r7, #23]
 803c89c:	68ba      	ldr	r2, [r7, #8]
 803c89e:	4413      	add	r3, r2
 803c8a0:	2200      	movs	r2, #0
 803c8a2:	701a      	strb	r2, [r3, #0]
    idx++;
 803c8a4:	7dfb      	ldrb	r3, [r7, #23]
 803c8a6:	3301      	adds	r3, #1
 803c8a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803c8aa:	693b      	ldr	r3, [r7, #16]
 803c8ac:	781b      	ldrb	r3, [r3, #0]
 803c8ae:	2b00      	cmp	r3, #0
 803c8b0:	d1e7      	bne.n	803c882 <USBD_GetString+0x52>
 803c8b2:	e000      	b.n	803c8b6 <USBD_GetString+0x86>
    return;
 803c8b4:	bf00      	nop
  }
}
 803c8b6:	3718      	adds	r7, #24
 803c8b8:	46bd      	mov	sp, r7
 803c8ba:	bd80      	pop	{r7, pc}

0803c8bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 803c8bc:	b480      	push	{r7}
 803c8be:	b085      	sub	sp, #20
 803c8c0:	af00      	add	r7, sp, #0
 803c8c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 803c8c4:	2300      	movs	r3, #0
 803c8c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 803c8c8:	687b      	ldr	r3, [r7, #4]
 803c8ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 803c8cc:	e005      	b.n	803c8da <USBD_GetLen+0x1e>
  {
    len++;
 803c8ce:	7bfb      	ldrb	r3, [r7, #15]
 803c8d0:	3301      	adds	r3, #1
 803c8d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 803c8d4:	68bb      	ldr	r3, [r7, #8]
 803c8d6:	3301      	adds	r3, #1
 803c8d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803c8da:	68bb      	ldr	r3, [r7, #8]
 803c8dc:	781b      	ldrb	r3, [r3, #0]
 803c8de:	2b00      	cmp	r3, #0
 803c8e0:	d1f5      	bne.n	803c8ce <USBD_GetLen+0x12>
  }

  return len;
 803c8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 803c8e4:	4618      	mov	r0, r3
 803c8e6:	3714      	adds	r7, #20
 803c8e8:	46bd      	mov	sp, r7
 803c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c8ee:	4770      	bx	lr

0803c8f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803c8f0:	b580      	push	{r7, lr}
 803c8f2:	b084      	sub	sp, #16
 803c8f4:	af00      	add	r7, sp, #0
 803c8f6:	60f8      	str	r0, [r7, #12]
 803c8f8:	60b9      	str	r1, [r7, #8]
 803c8fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 803c8fc:	68fb      	ldr	r3, [r7, #12]
 803c8fe:	2202      	movs	r2, #2
 803c900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 803c904:	68fb      	ldr	r3, [r7, #12]
 803c906:	687a      	ldr	r2, [r7, #4]
 803c908:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 803c90a:	68fb      	ldr	r3, [r7, #12]
 803c90c:	687a      	ldr	r2, [r7, #4]
 803c90e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803c910:	687b      	ldr	r3, [r7, #4]
 803c912:	68ba      	ldr	r2, [r7, #8]
 803c914:	2100      	movs	r1, #0
 803c916:	68f8      	ldr	r0, [r7, #12]
 803c918:	f000 fcf1 	bl	803d2fe <USBD_LL_Transmit>

  return USBD_OK;
 803c91c:	2300      	movs	r3, #0
}
 803c91e:	4618      	mov	r0, r3
 803c920:	3710      	adds	r7, #16
 803c922:	46bd      	mov	sp, r7
 803c924:	bd80      	pop	{r7, pc}

0803c926 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 803c926:	b580      	push	{r7, lr}
 803c928:	b084      	sub	sp, #16
 803c92a:	af00      	add	r7, sp, #0
 803c92c:	60f8      	str	r0, [r7, #12]
 803c92e:	60b9      	str	r1, [r7, #8]
 803c930:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803c932:	687b      	ldr	r3, [r7, #4]
 803c934:	68ba      	ldr	r2, [r7, #8]
 803c936:	2100      	movs	r1, #0
 803c938:	68f8      	ldr	r0, [r7, #12]
 803c93a:	f000 fce0 	bl	803d2fe <USBD_LL_Transmit>

  return USBD_OK;
 803c93e:	2300      	movs	r3, #0
}
 803c940:	4618      	mov	r0, r3
 803c942:	3710      	adds	r7, #16
 803c944:	46bd      	mov	sp, r7
 803c946:	bd80      	pop	{r7, pc}

0803c948 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 803c948:	b580      	push	{r7, lr}
 803c94a:	b084      	sub	sp, #16
 803c94c:	af00      	add	r7, sp, #0
 803c94e:	60f8      	str	r0, [r7, #12]
 803c950:	60b9      	str	r1, [r7, #8]
 803c952:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 803c954:	68fb      	ldr	r3, [r7, #12]
 803c956:	2203      	movs	r2, #3
 803c958:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 803c95c:	68fb      	ldr	r3, [r7, #12]
 803c95e:	687a      	ldr	r2, [r7, #4]
 803c960:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 803c964:	68fb      	ldr	r3, [r7, #12]
 803c966:	687a      	ldr	r2, [r7, #4]
 803c968:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803c96c:	687b      	ldr	r3, [r7, #4]
 803c96e:	68ba      	ldr	r2, [r7, #8]
 803c970:	2100      	movs	r1, #0
 803c972:	68f8      	ldr	r0, [r7, #12]
 803c974:	f000 fce4 	bl	803d340 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803c978:	2300      	movs	r3, #0
}
 803c97a:	4618      	mov	r0, r3
 803c97c:	3710      	adds	r7, #16
 803c97e:	46bd      	mov	sp, r7
 803c980:	bd80      	pop	{r7, pc}

0803c982 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 803c982:	b580      	push	{r7, lr}
 803c984:	b084      	sub	sp, #16
 803c986:	af00      	add	r7, sp, #0
 803c988:	60f8      	str	r0, [r7, #12]
 803c98a:	60b9      	str	r1, [r7, #8]
 803c98c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803c98e:	687b      	ldr	r3, [r7, #4]
 803c990:	68ba      	ldr	r2, [r7, #8]
 803c992:	2100      	movs	r1, #0
 803c994:	68f8      	ldr	r0, [r7, #12]
 803c996:	f000 fcd3 	bl	803d340 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803c99a:	2300      	movs	r3, #0
}
 803c99c:	4618      	mov	r0, r3
 803c99e:	3710      	adds	r7, #16
 803c9a0:	46bd      	mov	sp, r7
 803c9a2:	bd80      	pop	{r7, pc}

0803c9a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 803c9a4:	b580      	push	{r7, lr}
 803c9a6:	b082      	sub	sp, #8
 803c9a8:	af00      	add	r7, sp, #0
 803c9aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 803c9ac:	687b      	ldr	r3, [r7, #4]
 803c9ae:	2204      	movs	r2, #4
 803c9b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 803c9b4:	2300      	movs	r3, #0
 803c9b6:	2200      	movs	r2, #0
 803c9b8:	2100      	movs	r1, #0
 803c9ba:	6878      	ldr	r0, [r7, #4]
 803c9bc:	f000 fc9f 	bl	803d2fe <USBD_LL_Transmit>

  return USBD_OK;
 803c9c0:	2300      	movs	r3, #0
}
 803c9c2:	4618      	mov	r0, r3
 803c9c4:	3708      	adds	r7, #8
 803c9c6:	46bd      	mov	sp, r7
 803c9c8:	bd80      	pop	{r7, pc}

0803c9ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803c9ca:	b580      	push	{r7, lr}
 803c9cc:	b082      	sub	sp, #8
 803c9ce:	af00      	add	r7, sp, #0
 803c9d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803c9d2:	687b      	ldr	r3, [r7, #4]
 803c9d4:	2205      	movs	r2, #5
 803c9d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803c9da:	2300      	movs	r3, #0
 803c9dc:	2200      	movs	r2, #0
 803c9de:	2100      	movs	r1, #0
 803c9e0:	6878      	ldr	r0, [r7, #4]
 803c9e2:	f000 fcad 	bl	803d340 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803c9e6:	2300      	movs	r3, #0
}
 803c9e8:	4618      	mov	r0, r3
 803c9ea:	3708      	adds	r7, #8
 803c9ec:	46bd      	mov	sp, r7
 803c9ee:	bd80      	pop	{r7, pc}

0803c9f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803c9f0:	b580      	push	{r7, lr}
 803c9f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 803c9f4:	2200      	movs	r2, #0
 803c9f6:	4913      	ldr	r1, [pc, #76]	; (803ca44 <MX_USB_DEVICE_Init+0x54>)
 803c9f8:	4813      	ldr	r0, [pc, #76]	; (803ca48 <MX_USB_DEVICE_Init+0x58>)
 803c9fa:	f7fe fd07 	bl	803b40c <USBD_Init>
 803c9fe:	4603      	mov	r3, r0
 803ca00:	2b00      	cmp	r3, #0
 803ca02:	d001      	beq.n	803ca08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 803ca04:	f7ee fc10 	bl	802b228 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 803ca08:	4910      	ldr	r1, [pc, #64]	; (803ca4c <MX_USB_DEVICE_Init+0x5c>)
 803ca0a:	480f      	ldr	r0, [pc, #60]	; (803ca48 <MX_USB_DEVICE_Init+0x58>)
 803ca0c:	f7fe fd2e 	bl	803b46c <USBD_RegisterClass>
 803ca10:	4603      	mov	r3, r0
 803ca12:	2b00      	cmp	r3, #0
 803ca14:	d001      	beq.n	803ca1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 803ca16:	f7ee fc07 	bl	802b228 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 803ca1a:	490d      	ldr	r1, [pc, #52]	; (803ca50 <MX_USB_DEVICE_Init+0x60>)
 803ca1c:	480a      	ldr	r0, [pc, #40]	; (803ca48 <MX_USB_DEVICE_Init+0x58>)
 803ca1e:	f7fe fc65 	bl	803b2ec <USBD_CDC_RegisterInterface>
 803ca22:	4603      	mov	r3, r0
 803ca24:	2b00      	cmp	r3, #0
 803ca26:	d001      	beq.n	803ca2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 803ca28:	f7ee fbfe 	bl	802b228 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 803ca2c:	4806      	ldr	r0, [pc, #24]	; (803ca48 <MX_USB_DEVICE_Init+0x58>)
 803ca2e:	f7fe fd53 	bl	803b4d8 <USBD_Start>
 803ca32:	4603      	mov	r3, r0
 803ca34:	2b00      	cmp	r3, #0
 803ca36:	d001      	beq.n	803ca3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 803ca38:	f7ee fbf6 	bl	802b228 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 803ca3c:	f7f5 fc82 	bl	8032344 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 803ca40:	bf00      	nop
 803ca42:	bd80      	pop	{r7, pc}
 803ca44:	240000b0 	.word	0x240000b0
 803ca48:	24001b54 	.word	0x24001b54
 803ca4c:	2400001c 	.word	0x2400001c
 803ca50:	2400009c 	.word	0x2400009c

0803ca54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 803ca54:	b580      	push	{r7, lr}
 803ca56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 803ca58:	2200      	movs	r2, #0
 803ca5a:	4905      	ldr	r1, [pc, #20]	; (803ca70 <CDC_Init_FS+0x1c>)
 803ca5c:	4805      	ldr	r0, [pc, #20]	; (803ca74 <CDC_Init_FS+0x20>)
 803ca5e:	f7fe fc5f 	bl	803b320 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803ca62:	4905      	ldr	r1, [pc, #20]	; (803ca78 <CDC_Init_FS+0x24>)
 803ca64:	4803      	ldr	r0, [pc, #12]	; (803ca74 <CDC_Init_FS+0x20>)
 803ca66:	f7fe fc7d 	bl	803b364 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 803ca6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 803ca6c:	4618      	mov	r0, r3
 803ca6e:	bd80      	pop	{r7, pc}
 803ca70:	24002630 	.word	0x24002630
 803ca74:	24001b54 	.word	0x24001b54
 803ca78:	24001e30 	.word	0x24001e30

0803ca7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 803ca7c:	b480      	push	{r7}
 803ca7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803ca80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803ca82:	4618      	mov	r0, r3
 803ca84:	46bd      	mov	sp, r7
 803ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ca8a:	4770      	bx	lr

0803ca8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 803ca8c:	b480      	push	{r7}
 803ca8e:	b083      	sub	sp, #12
 803ca90:	af00      	add	r7, sp, #0
 803ca92:	4603      	mov	r3, r0
 803ca94:	6039      	str	r1, [r7, #0]
 803ca96:	71fb      	strb	r3, [r7, #7]
 803ca98:	4613      	mov	r3, r2
 803ca9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 803ca9c:	79fb      	ldrb	r3, [r7, #7]
 803ca9e:	2b23      	cmp	r3, #35	; 0x23
 803caa0:	d84a      	bhi.n	803cb38 <CDC_Control_FS+0xac>
 803caa2:	a201      	add	r2, pc, #4	; (adr r2, 803caa8 <CDC_Control_FS+0x1c>)
 803caa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803caa8:	0803cb39 	.word	0x0803cb39
 803caac:	0803cb39 	.word	0x0803cb39
 803cab0:	0803cb39 	.word	0x0803cb39
 803cab4:	0803cb39 	.word	0x0803cb39
 803cab8:	0803cb39 	.word	0x0803cb39
 803cabc:	0803cb39 	.word	0x0803cb39
 803cac0:	0803cb39 	.word	0x0803cb39
 803cac4:	0803cb39 	.word	0x0803cb39
 803cac8:	0803cb39 	.word	0x0803cb39
 803cacc:	0803cb39 	.word	0x0803cb39
 803cad0:	0803cb39 	.word	0x0803cb39
 803cad4:	0803cb39 	.word	0x0803cb39
 803cad8:	0803cb39 	.word	0x0803cb39
 803cadc:	0803cb39 	.word	0x0803cb39
 803cae0:	0803cb39 	.word	0x0803cb39
 803cae4:	0803cb39 	.word	0x0803cb39
 803cae8:	0803cb39 	.word	0x0803cb39
 803caec:	0803cb39 	.word	0x0803cb39
 803caf0:	0803cb39 	.word	0x0803cb39
 803caf4:	0803cb39 	.word	0x0803cb39
 803caf8:	0803cb39 	.word	0x0803cb39
 803cafc:	0803cb39 	.word	0x0803cb39
 803cb00:	0803cb39 	.word	0x0803cb39
 803cb04:	0803cb39 	.word	0x0803cb39
 803cb08:	0803cb39 	.word	0x0803cb39
 803cb0c:	0803cb39 	.word	0x0803cb39
 803cb10:	0803cb39 	.word	0x0803cb39
 803cb14:	0803cb39 	.word	0x0803cb39
 803cb18:	0803cb39 	.word	0x0803cb39
 803cb1c:	0803cb39 	.word	0x0803cb39
 803cb20:	0803cb39 	.word	0x0803cb39
 803cb24:	0803cb39 	.word	0x0803cb39
 803cb28:	0803cb39 	.word	0x0803cb39
 803cb2c:	0803cb39 	.word	0x0803cb39
 803cb30:	0803cb39 	.word	0x0803cb39
 803cb34:	0803cb39 	.word	0x0803cb39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 803cb38:	bf00      	nop
  }

  return (USBD_OK);
 803cb3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 803cb3c:	4618      	mov	r0, r3
 803cb3e:	370c      	adds	r7, #12
 803cb40:	46bd      	mov	sp, r7
 803cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cb46:	4770      	bx	lr

0803cb48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 803cb48:	b580      	push	{r7, lr}
 803cb4a:	b082      	sub	sp, #8
 803cb4c:	af00      	add	r7, sp, #0
 803cb4e:	6078      	str	r0, [r7, #4]
 803cb50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803cb52:	6879      	ldr	r1, [r7, #4]
 803cb54:	4805      	ldr	r0, [pc, #20]	; (803cb6c <CDC_Receive_FS+0x24>)
 803cb56:	f7fe fc05 	bl	803b364 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 803cb5a:	4804      	ldr	r0, [pc, #16]	; (803cb6c <CDC_Receive_FS+0x24>)
 803cb5c:	f7fe fc20 	bl	803b3a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803cb60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803cb62:	4618      	mov	r0, r3
 803cb64:	3708      	adds	r7, #8
 803cb66:	46bd      	mov	sp, r7
 803cb68:	bd80      	pop	{r7, pc}
 803cb6a:	bf00      	nop
 803cb6c:	24001b54 	.word	0x24001b54

0803cb70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803cb70:	b480      	push	{r7}
 803cb72:	b087      	sub	sp, #28
 803cb74:	af00      	add	r7, sp, #0
 803cb76:	60f8      	str	r0, [r7, #12]
 803cb78:	60b9      	str	r1, [r7, #8]
 803cb7a:	4613      	mov	r3, r2
 803cb7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803cb7e:	2300      	movs	r3, #0
 803cb80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803cb82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803cb86:	4618      	mov	r0, r3
 803cb88:	371c      	adds	r7, #28
 803cb8a:	46bd      	mov	sp, r7
 803cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cb90:	4770      	bx	lr
	...

0803cb94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803cb94:	b480      	push	{r7}
 803cb96:	b083      	sub	sp, #12
 803cb98:	af00      	add	r7, sp, #0
 803cb9a:	4603      	mov	r3, r0
 803cb9c:	6039      	str	r1, [r7, #0]
 803cb9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 803cba0:	683b      	ldr	r3, [r7, #0]
 803cba2:	2212      	movs	r2, #18
 803cba4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 803cba6:	4b03      	ldr	r3, [pc, #12]	; (803cbb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 803cba8:	4618      	mov	r0, r3
 803cbaa:	370c      	adds	r7, #12
 803cbac:	46bd      	mov	sp, r7
 803cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cbb2:	4770      	bx	lr
 803cbb4:	240000cc 	.word	0x240000cc

0803cbb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803cbb8:	b480      	push	{r7}
 803cbba:	b083      	sub	sp, #12
 803cbbc:	af00      	add	r7, sp, #0
 803cbbe:	4603      	mov	r3, r0
 803cbc0:	6039      	str	r1, [r7, #0]
 803cbc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 803cbc4:	683b      	ldr	r3, [r7, #0]
 803cbc6:	2204      	movs	r2, #4
 803cbc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 803cbca:	4b03      	ldr	r3, [pc, #12]	; (803cbd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 803cbcc:	4618      	mov	r0, r3
 803cbce:	370c      	adds	r7, #12
 803cbd0:	46bd      	mov	sp, r7
 803cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cbd6:	4770      	bx	lr
 803cbd8:	240000e0 	.word	0x240000e0

0803cbdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803cbdc:	b580      	push	{r7, lr}
 803cbde:	b082      	sub	sp, #8
 803cbe0:	af00      	add	r7, sp, #0
 803cbe2:	4603      	mov	r3, r0
 803cbe4:	6039      	str	r1, [r7, #0]
 803cbe6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803cbe8:	79fb      	ldrb	r3, [r7, #7]
 803cbea:	2b00      	cmp	r3, #0
 803cbec:	d105      	bne.n	803cbfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803cbee:	683a      	ldr	r2, [r7, #0]
 803cbf0:	4907      	ldr	r1, [pc, #28]	; (803cc10 <USBD_FS_ProductStrDescriptor+0x34>)
 803cbf2:	4808      	ldr	r0, [pc, #32]	; (803cc14 <USBD_FS_ProductStrDescriptor+0x38>)
 803cbf4:	f7ff fe1c 	bl	803c830 <USBD_GetString>
 803cbf8:	e004      	b.n	803cc04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803cbfa:	683a      	ldr	r2, [r7, #0]
 803cbfc:	4904      	ldr	r1, [pc, #16]	; (803cc10 <USBD_FS_ProductStrDescriptor+0x34>)
 803cbfe:	4805      	ldr	r0, [pc, #20]	; (803cc14 <USBD_FS_ProductStrDescriptor+0x38>)
 803cc00:	f7ff fe16 	bl	803c830 <USBD_GetString>
  }
  return USBD_StrDesc;
 803cc04:	4b02      	ldr	r3, [pc, #8]	; (803cc10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 803cc06:	4618      	mov	r0, r3
 803cc08:	3708      	adds	r7, #8
 803cc0a:	46bd      	mov	sp, r7
 803cc0c:	bd80      	pop	{r7, pc}
 803cc0e:	bf00      	nop
 803cc10:	24002e30 	.word	0x24002e30
 803cc14:	0803eea8 	.word	0x0803eea8

0803cc18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803cc18:	b580      	push	{r7, lr}
 803cc1a:	b082      	sub	sp, #8
 803cc1c:	af00      	add	r7, sp, #0
 803cc1e:	4603      	mov	r3, r0
 803cc20:	6039      	str	r1, [r7, #0]
 803cc22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 803cc24:	683a      	ldr	r2, [r7, #0]
 803cc26:	4904      	ldr	r1, [pc, #16]	; (803cc38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 803cc28:	4804      	ldr	r0, [pc, #16]	; (803cc3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 803cc2a:	f7ff fe01 	bl	803c830 <USBD_GetString>
  return USBD_StrDesc;
 803cc2e:	4b02      	ldr	r3, [pc, #8]	; (803cc38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 803cc30:	4618      	mov	r0, r3
 803cc32:	3708      	adds	r7, #8
 803cc34:	46bd      	mov	sp, r7
 803cc36:	bd80      	pop	{r7, pc}
 803cc38:	24002e30 	.word	0x24002e30
 803cc3c:	0803eec0 	.word	0x0803eec0

0803cc40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803cc40:	b580      	push	{r7, lr}
 803cc42:	b082      	sub	sp, #8
 803cc44:	af00      	add	r7, sp, #0
 803cc46:	4603      	mov	r3, r0
 803cc48:	6039      	str	r1, [r7, #0]
 803cc4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 803cc4c:	683b      	ldr	r3, [r7, #0]
 803cc4e:	221a      	movs	r2, #26
 803cc50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803cc52:	f000 f843 	bl	803ccdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 803cc56:	4b02      	ldr	r3, [pc, #8]	; (803cc60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 803cc58:	4618      	mov	r0, r3
 803cc5a:	3708      	adds	r7, #8
 803cc5c:	46bd      	mov	sp, r7
 803cc5e:	bd80      	pop	{r7, pc}
 803cc60:	240000e4 	.word	0x240000e4

0803cc64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803cc64:	b580      	push	{r7, lr}
 803cc66:	b082      	sub	sp, #8
 803cc68:	af00      	add	r7, sp, #0
 803cc6a:	4603      	mov	r3, r0
 803cc6c:	6039      	str	r1, [r7, #0]
 803cc6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 803cc70:	79fb      	ldrb	r3, [r7, #7]
 803cc72:	2b00      	cmp	r3, #0
 803cc74:	d105      	bne.n	803cc82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803cc76:	683a      	ldr	r2, [r7, #0]
 803cc78:	4907      	ldr	r1, [pc, #28]	; (803cc98 <USBD_FS_ConfigStrDescriptor+0x34>)
 803cc7a:	4808      	ldr	r0, [pc, #32]	; (803cc9c <USBD_FS_ConfigStrDescriptor+0x38>)
 803cc7c:	f7ff fdd8 	bl	803c830 <USBD_GetString>
 803cc80:	e004      	b.n	803cc8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803cc82:	683a      	ldr	r2, [r7, #0]
 803cc84:	4904      	ldr	r1, [pc, #16]	; (803cc98 <USBD_FS_ConfigStrDescriptor+0x34>)
 803cc86:	4805      	ldr	r0, [pc, #20]	; (803cc9c <USBD_FS_ConfigStrDescriptor+0x38>)
 803cc88:	f7ff fdd2 	bl	803c830 <USBD_GetString>
  }
  return USBD_StrDesc;
 803cc8c:	4b02      	ldr	r3, [pc, #8]	; (803cc98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 803cc8e:	4618      	mov	r0, r3
 803cc90:	3708      	adds	r7, #8
 803cc92:	46bd      	mov	sp, r7
 803cc94:	bd80      	pop	{r7, pc}
 803cc96:	bf00      	nop
 803cc98:	24002e30 	.word	0x24002e30
 803cc9c:	0803eed4 	.word	0x0803eed4

0803cca0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803cca0:	b580      	push	{r7, lr}
 803cca2:	b082      	sub	sp, #8
 803cca4:	af00      	add	r7, sp, #0
 803cca6:	4603      	mov	r3, r0
 803cca8:	6039      	str	r1, [r7, #0]
 803ccaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803ccac:	79fb      	ldrb	r3, [r7, #7]
 803ccae:	2b00      	cmp	r3, #0
 803ccb0:	d105      	bne.n	803ccbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803ccb2:	683a      	ldr	r2, [r7, #0]
 803ccb4:	4907      	ldr	r1, [pc, #28]	; (803ccd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803ccb6:	4808      	ldr	r0, [pc, #32]	; (803ccd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 803ccb8:	f7ff fdba 	bl	803c830 <USBD_GetString>
 803ccbc:	e004      	b.n	803ccc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803ccbe:	683a      	ldr	r2, [r7, #0]
 803ccc0:	4904      	ldr	r1, [pc, #16]	; (803ccd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803ccc2:	4805      	ldr	r0, [pc, #20]	; (803ccd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 803ccc4:	f7ff fdb4 	bl	803c830 <USBD_GetString>
  }
  return USBD_StrDesc;
 803ccc8:	4b02      	ldr	r3, [pc, #8]	; (803ccd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 803ccca:	4618      	mov	r0, r3
 803cccc:	3708      	adds	r7, #8
 803ccce:	46bd      	mov	sp, r7
 803ccd0:	bd80      	pop	{r7, pc}
 803ccd2:	bf00      	nop
 803ccd4:	24002e30 	.word	0x24002e30
 803ccd8:	0803eee0 	.word	0x0803eee0

0803ccdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 803ccdc:	b580      	push	{r7, lr}
 803ccde:	b084      	sub	sp, #16
 803cce0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 803cce2:	4b0f      	ldr	r3, [pc, #60]	; (803cd20 <Get_SerialNum+0x44>)
 803cce4:	681b      	ldr	r3, [r3, #0]
 803cce6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 803cce8:	4b0e      	ldr	r3, [pc, #56]	; (803cd24 <Get_SerialNum+0x48>)
 803ccea:	681b      	ldr	r3, [r3, #0]
 803ccec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 803ccee:	4b0e      	ldr	r3, [pc, #56]	; (803cd28 <Get_SerialNum+0x4c>)
 803ccf0:	681b      	ldr	r3, [r3, #0]
 803ccf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 803ccf4:	68fa      	ldr	r2, [r7, #12]
 803ccf6:	687b      	ldr	r3, [r7, #4]
 803ccf8:	4413      	add	r3, r2
 803ccfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803ccfc:	68fb      	ldr	r3, [r7, #12]
 803ccfe:	2b00      	cmp	r3, #0
 803cd00:	d009      	beq.n	803cd16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 803cd02:	2208      	movs	r2, #8
 803cd04:	4909      	ldr	r1, [pc, #36]	; (803cd2c <Get_SerialNum+0x50>)
 803cd06:	68f8      	ldr	r0, [r7, #12]
 803cd08:	f000 f814 	bl	803cd34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 803cd0c:	2204      	movs	r2, #4
 803cd0e:	4908      	ldr	r1, [pc, #32]	; (803cd30 <Get_SerialNum+0x54>)
 803cd10:	68b8      	ldr	r0, [r7, #8]
 803cd12:	f000 f80f 	bl	803cd34 <IntToUnicode>
  }
}
 803cd16:	bf00      	nop
 803cd18:	3710      	adds	r7, #16
 803cd1a:	46bd      	mov	sp, r7
 803cd1c:	bd80      	pop	{r7, pc}
 803cd1e:	bf00      	nop
 803cd20:	1ff1e800 	.word	0x1ff1e800
 803cd24:	1ff1e804 	.word	0x1ff1e804
 803cd28:	1ff1e808 	.word	0x1ff1e808
 803cd2c:	240000e6 	.word	0x240000e6
 803cd30:	240000f6 	.word	0x240000f6

0803cd34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 803cd34:	b480      	push	{r7}
 803cd36:	b087      	sub	sp, #28
 803cd38:	af00      	add	r7, sp, #0
 803cd3a:	60f8      	str	r0, [r7, #12]
 803cd3c:	60b9      	str	r1, [r7, #8]
 803cd3e:	4613      	mov	r3, r2
 803cd40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 803cd42:	2300      	movs	r3, #0
 803cd44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 803cd46:	2300      	movs	r3, #0
 803cd48:	75fb      	strb	r3, [r7, #23]
 803cd4a:	e027      	b.n	803cd9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 803cd4c:	68fb      	ldr	r3, [r7, #12]
 803cd4e:	0f1b      	lsrs	r3, r3, #28
 803cd50:	2b09      	cmp	r3, #9
 803cd52:	d80b      	bhi.n	803cd6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 803cd54:	68fb      	ldr	r3, [r7, #12]
 803cd56:	0f1b      	lsrs	r3, r3, #28
 803cd58:	b2da      	uxtb	r2, r3
 803cd5a:	7dfb      	ldrb	r3, [r7, #23]
 803cd5c:	005b      	lsls	r3, r3, #1
 803cd5e:	4619      	mov	r1, r3
 803cd60:	68bb      	ldr	r3, [r7, #8]
 803cd62:	440b      	add	r3, r1
 803cd64:	3230      	adds	r2, #48	; 0x30
 803cd66:	b2d2      	uxtb	r2, r2
 803cd68:	701a      	strb	r2, [r3, #0]
 803cd6a:	e00a      	b.n	803cd82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 803cd6c:	68fb      	ldr	r3, [r7, #12]
 803cd6e:	0f1b      	lsrs	r3, r3, #28
 803cd70:	b2da      	uxtb	r2, r3
 803cd72:	7dfb      	ldrb	r3, [r7, #23]
 803cd74:	005b      	lsls	r3, r3, #1
 803cd76:	4619      	mov	r1, r3
 803cd78:	68bb      	ldr	r3, [r7, #8]
 803cd7a:	440b      	add	r3, r1
 803cd7c:	3237      	adds	r2, #55	; 0x37
 803cd7e:	b2d2      	uxtb	r2, r2
 803cd80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 803cd82:	68fb      	ldr	r3, [r7, #12]
 803cd84:	011b      	lsls	r3, r3, #4
 803cd86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 803cd88:	7dfb      	ldrb	r3, [r7, #23]
 803cd8a:	005b      	lsls	r3, r3, #1
 803cd8c:	3301      	adds	r3, #1
 803cd8e:	68ba      	ldr	r2, [r7, #8]
 803cd90:	4413      	add	r3, r2
 803cd92:	2200      	movs	r2, #0
 803cd94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803cd96:	7dfb      	ldrb	r3, [r7, #23]
 803cd98:	3301      	adds	r3, #1
 803cd9a:	75fb      	strb	r3, [r7, #23]
 803cd9c:	7dfa      	ldrb	r2, [r7, #23]
 803cd9e:	79fb      	ldrb	r3, [r7, #7]
 803cda0:	429a      	cmp	r2, r3
 803cda2:	d3d3      	bcc.n	803cd4c <IntToUnicode+0x18>
  }
}
 803cda4:	bf00      	nop
 803cda6:	bf00      	nop
 803cda8:	371c      	adds	r7, #28
 803cdaa:	46bd      	mov	sp, r7
 803cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cdb0:	4770      	bx	lr
	...

0803cdb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 803cdb4:	b580      	push	{r7, lr}
 803cdb6:	b0b8      	sub	sp, #224	; 0xe0
 803cdb8:	af00      	add	r7, sp, #0
 803cdba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803cdbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803cdc0:	2200      	movs	r2, #0
 803cdc2:	601a      	str	r2, [r3, #0]
 803cdc4:	605a      	str	r2, [r3, #4]
 803cdc6:	609a      	str	r2, [r3, #8]
 803cdc8:	60da      	str	r2, [r3, #12]
 803cdca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 803cdcc:	f107 0310 	add.w	r3, r7, #16
 803cdd0:	22bc      	movs	r2, #188	; 0xbc
 803cdd2:	2100      	movs	r1, #0
 803cdd4:	4618      	mov	r0, r3
 803cdd6:	f000 fbe9 	bl	803d5ac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 803cdda:	687b      	ldr	r3, [r7, #4]
 803cddc:	681b      	ldr	r3, [r3, #0]
 803cdde:	4a2f      	ldr	r2, [pc, #188]	; (803ce9c <HAL_PCD_MspInit+0xe8>)
 803cde0:	4293      	cmp	r3, r2
 803cde2:	d156      	bne.n	803ce92 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 803cde4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803cde8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 803cdea:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 803cdee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 803cdf2:	f107 0310 	add.w	r3, r7, #16
 803cdf6:	4618      	mov	r0, r3
 803cdf8:	f7f6 fa6e 	bl	80332d8 <HAL_RCCEx_PeriphCLKConfig>
 803cdfc:	4603      	mov	r3, r0
 803cdfe:	2b00      	cmp	r3, #0
 803ce00:	d001      	beq.n	803ce06 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 803ce02:	f7ee fa11 	bl	802b228 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 803ce06:	f7f5 fa9d 	bl	8032344 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 803ce0a:	4b25      	ldr	r3, [pc, #148]	; (803cea0 <HAL_PCD_MspInit+0xec>)
 803ce0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803ce10:	4a23      	ldr	r2, [pc, #140]	; (803cea0 <HAL_PCD_MspInit+0xec>)
 803ce12:	f043 0301 	orr.w	r3, r3, #1
 803ce16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 803ce1a:	4b21      	ldr	r3, [pc, #132]	; (803cea0 <HAL_PCD_MspInit+0xec>)
 803ce1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803ce20:	f003 0301 	and.w	r3, r3, #1
 803ce24:	60fb      	str	r3, [r7, #12]
 803ce26:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 803ce28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 803ce2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803ce30:	2302      	movs	r3, #2
 803ce32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803ce36:	2300      	movs	r3, #0
 803ce38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803ce3c:	2300      	movs	r3, #0
 803ce3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 803ce42:	230a      	movs	r3, #10
 803ce44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803ce48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803ce4c:	4619      	mov	r1, r3
 803ce4e:	4815      	ldr	r0, [pc, #84]	; (803cea4 <HAL_PCD_MspInit+0xf0>)
 803ce50:	f7f2 fdf2 	bl	802fa38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 803ce54:	4b12      	ldr	r3, [pc, #72]	; (803cea0 <HAL_PCD_MspInit+0xec>)
 803ce56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803ce5a:	4a11      	ldr	r2, [pc, #68]	; (803cea0 <HAL_PCD_MspInit+0xec>)
 803ce5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803ce60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 803ce64:	4b0e      	ldr	r3, [pc, #56]	; (803cea0 <HAL_PCD_MspInit+0xec>)
 803ce66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803ce6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803ce6e:	60bb      	str	r3, [r7, #8]
 803ce70:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 803ce72:	2200      	movs	r2, #0
 803ce74:	2100      	movs	r1, #0
 803ce76:	2062      	movs	r0, #98	; 0x62
 803ce78:	f7ef fd8b 	bl	802c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 803ce7c:	2062      	movs	r0, #98	; 0x62
 803ce7e:	f7ef fda2 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 803ce82:	2200      	movs	r2, #0
 803ce84:	2100      	movs	r1, #0
 803ce86:	2065      	movs	r0, #101	; 0x65
 803ce88:	f7ef fd83 	bl	802c992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 803ce8c:	2065      	movs	r0, #101	; 0x65
 803ce8e:	f7ef fd9a 	bl	802c9c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 803ce92:	bf00      	nop
 803ce94:	37e0      	adds	r7, #224	; 0xe0
 803ce96:	46bd      	mov	sp, r7
 803ce98:	bd80      	pop	{r7, pc}
 803ce9a:	bf00      	nop
 803ce9c:	40080000 	.word	0x40080000
 803cea0:	58024400 	.word	0x58024400
 803cea4:	58020000 	.word	0x58020000

0803cea8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803cea8:	b580      	push	{r7, lr}
 803ceaa:	b082      	sub	sp, #8
 803ceac:	af00      	add	r7, sp, #0
 803ceae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 803ceb0:	687b      	ldr	r3, [r7, #4]
 803ceb2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 803ceb6:	687b      	ldr	r3, [r7, #4]
 803ceb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803cebc:	4619      	mov	r1, r3
 803cebe:	4610      	mov	r0, r2
 803cec0:	f7fe fb57 	bl	803b572 <USBD_LL_SetupStage>
}
 803cec4:	bf00      	nop
 803cec6:	3708      	adds	r7, #8
 803cec8:	46bd      	mov	sp, r7
 803ceca:	bd80      	pop	{r7, pc}

0803cecc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803cecc:	b580      	push	{r7, lr}
 803cece:	b082      	sub	sp, #8
 803ced0:	af00      	add	r7, sp, #0
 803ced2:	6078      	str	r0, [r7, #4]
 803ced4:	460b      	mov	r3, r1
 803ced6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 803ced8:	687b      	ldr	r3, [r7, #4]
 803ceda:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803cede:	78fa      	ldrb	r2, [r7, #3]
 803cee0:	6879      	ldr	r1, [r7, #4]
 803cee2:	4613      	mov	r3, r2
 803cee4:	00db      	lsls	r3, r3, #3
 803cee6:	4413      	add	r3, r2
 803cee8:	009b      	lsls	r3, r3, #2
 803ceea:	440b      	add	r3, r1
 803ceec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 803cef0:	681a      	ldr	r2, [r3, #0]
 803cef2:	78fb      	ldrb	r3, [r7, #3]
 803cef4:	4619      	mov	r1, r3
 803cef6:	f7fe fb91 	bl	803b61c <USBD_LL_DataOutStage>
}
 803cefa:	bf00      	nop
 803cefc:	3708      	adds	r7, #8
 803cefe:	46bd      	mov	sp, r7
 803cf00:	bd80      	pop	{r7, pc}

0803cf02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803cf02:	b580      	push	{r7, lr}
 803cf04:	b082      	sub	sp, #8
 803cf06:	af00      	add	r7, sp, #0
 803cf08:	6078      	str	r0, [r7, #4]
 803cf0a:	460b      	mov	r3, r1
 803cf0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 803cf0e:	687b      	ldr	r3, [r7, #4]
 803cf10:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803cf14:	78fa      	ldrb	r2, [r7, #3]
 803cf16:	6879      	ldr	r1, [r7, #4]
 803cf18:	4613      	mov	r3, r2
 803cf1a:	00db      	lsls	r3, r3, #3
 803cf1c:	4413      	add	r3, r2
 803cf1e:	009b      	lsls	r3, r3, #2
 803cf20:	440b      	add	r3, r1
 803cf22:	334c      	adds	r3, #76	; 0x4c
 803cf24:	681a      	ldr	r2, [r3, #0]
 803cf26:	78fb      	ldrb	r3, [r7, #3]
 803cf28:	4619      	mov	r1, r3
 803cf2a:	f7fe fc2a 	bl	803b782 <USBD_LL_DataInStage>
}
 803cf2e:	bf00      	nop
 803cf30:	3708      	adds	r7, #8
 803cf32:	46bd      	mov	sp, r7
 803cf34:	bd80      	pop	{r7, pc}

0803cf36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803cf36:	b580      	push	{r7, lr}
 803cf38:	b082      	sub	sp, #8
 803cf3a:	af00      	add	r7, sp, #0
 803cf3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803cf3e:	687b      	ldr	r3, [r7, #4]
 803cf40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803cf44:	4618      	mov	r0, r3
 803cf46:	f7fe fd5e 	bl	803ba06 <USBD_LL_SOF>
}
 803cf4a:	bf00      	nop
 803cf4c:	3708      	adds	r7, #8
 803cf4e:	46bd      	mov	sp, r7
 803cf50:	bd80      	pop	{r7, pc}

0803cf52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803cf52:	b580      	push	{r7, lr}
 803cf54:	b084      	sub	sp, #16
 803cf56:	af00      	add	r7, sp, #0
 803cf58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 803cf5a:	2301      	movs	r3, #1
 803cf5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 803cf5e:	687b      	ldr	r3, [r7, #4]
 803cf60:	68db      	ldr	r3, [r3, #12]
 803cf62:	2b00      	cmp	r3, #0
 803cf64:	d102      	bne.n	803cf6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 803cf66:	2300      	movs	r3, #0
 803cf68:	73fb      	strb	r3, [r7, #15]
 803cf6a:	e008      	b.n	803cf7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 803cf6c:	687b      	ldr	r3, [r7, #4]
 803cf6e:	68db      	ldr	r3, [r3, #12]
 803cf70:	2b02      	cmp	r3, #2
 803cf72:	d102      	bne.n	803cf7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 803cf74:	2301      	movs	r3, #1
 803cf76:	73fb      	strb	r3, [r7, #15]
 803cf78:	e001      	b.n	803cf7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 803cf7a:	f7ee f955 	bl	802b228 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 803cf7e:	687b      	ldr	r3, [r7, #4]
 803cf80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803cf84:	7bfa      	ldrb	r2, [r7, #15]
 803cf86:	4611      	mov	r1, r2
 803cf88:	4618      	mov	r0, r3
 803cf8a:	f7fe fcfe 	bl	803b98a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 803cf8e:	687b      	ldr	r3, [r7, #4]
 803cf90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803cf94:	4618      	mov	r0, r3
 803cf96:	f7fe fca6 	bl	803b8e6 <USBD_LL_Reset>
}
 803cf9a:	bf00      	nop
 803cf9c:	3710      	adds	r7, #16
 803cf9e:	46bd      	mov	sp, r7
 803cfa0:	bd80      	pop	{r7, pc}
	...

0803cfa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803cfa4:	b580      	push	{r7, lr}
 803cfa6:	b082      	sub	sp, #8
 803cfa8:	af00      	add	r7, sp, #0
 803cfaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803cfac:	687b      	ldr	r3, [r7, #4]
 803cfae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803cfb2:	4618      	mov	r0, r3
 803cfb4:	f7fe fcf9 	bl	803b9aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 803cfb8:	687b      	ldr	r3, [r7, #4]
 803cfba:	681b      	ldr	r3, [r3, #0]
 803cfbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803cfc0:	681b      	ldr	r3, [r3, #0]
 803cfc2:	687a      	ldr	r2, [r7, #4]
 803cfc4:	6812      	ldr	r2, [r2, #0]
 803cfc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803cfca:	f043 0301 	orr.w	r3, r3, #1
 803cfce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 803cfd0:	687b      	ldr	r3, [r7, #4]
 803cfd2:	6a1b      	ldr	r3, [r3, #32]
 803cfd4:	2b00      	cmp	r3, #0
 803cfd6:	d005      	beq.n	803cfe4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803cfd8:	4b04      	ldr	r3, [pc, #16]	; (803cfec <HAL_PCD_SuspendCallback+0x48>)
 803cfda:	691b      	ldr	r3, [r3, #16]
 803cfdc:	4a03      	ldr	r2, [pc, #12]	; (803cfec <HAL_PCD_SuspendCallback+0x48>)
 803cfde:	f043 0306 	orr.w	r3, r3, #6
 803cfe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 803cfe4:	bf00      	nop
 803cfe6:	3708      	adds	r7, #8
 803cfe8:	46bd      	mov	sp, r7
 803cfea:	bd80      	pop	{r7, pc}
 803cfec:	e000ed00 	.word	0xe000ed00

0803cff0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803cff0:	b580      	push	{r7, lr}
 803cff2:	b082      	sub	sp, #8
 803cff4:	af00      	add	r7, sp, #0
 803cff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 803cff8:	687b      	ldr	r3, [r7, #4]
 803cffa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803cffe:	4618      	mov	r0, r3
 803d000:	f7fe fce9 	bl	803b9d6 <USBD_LL_Resume>
}
 803d004:	bf00      	nop
 803d006:	3708      	adds	r7, #8
 803d008:	46bd      	mov	sp, r7
 803d00a:	bd80      	pop	{r7, pc}

0803d00c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803d00c:	b580      	push	{r7, lr}
 803d00e:	b082      	sub	sp, #8
 803d010:	af00      	add	r7, sp, #0
 803d012:	6078      	str	r0, [r7, #4]
 803d014:	460b      	mov	r3, r1
 803d016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803d018:	687b      	ldr	r3, [r7, #4]
 803d01a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803d01e:	78fa      	ldrb	r2, [r7, #3]
 803d020:	4611      	mov	r1, r2
 803d022:	4618      	mov	r0, r3
 803d024:	f7fe fd41 	bl	803baaa <USBD_LL_IsoOUTIncomplete>
}
 803d028:	bf00      	nop
 803d02a:	3708      	adds	r7, #8
 803d02c:	46bd      	mov	sp, r7
 803d02e:	bd80      	pop	{r7, pc}

0803d030 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803d030:	b580      	push	{r7, lr}
 803d032:	b082      	sub	sp, #8
 803d034:	af00      	add	r7, sp, #0
 803d036:	6078      	str	r0, [r7, #4]
 803d038:	460b      	mov	r3, r1
 803d03a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803d03c:	687b      	ldr	r3, [r7, #4]
 803d03e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803d042:	78fa      	ldrb	r2, [r7, #3]
 803d044:	4611      	mov	r1, r2
 803d046:	4618      	mov	r0, r3
 803d048:	f7fe fcfd 	bl	803ba46 <USBD_LL_IsoINIncomplete>
}
 803d04c:	bf00      	nop
 803d04e:	3708      	adds	r7, #8
 803d050:	46bd      	mov	sp, r7
 803d052:	bd80      	pop	{r7, pc}

0803d054 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803d054:	b580      	push	{r7, lr}
 803d056:	b082      	sub	sp, #8
 803d058:	af00      	add	r7, sp, #0
 803d05a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 803d05c:	687b      	ldr	r3, [r7, #4]
 803d05e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803d062:	4618      	mov	r0, r3
 803d064:	f7fe fd53 	bl	803bb0e <USBD_LL_DevConnected>
}
 803d068:	bf00      	nop
 803d06a:	3708      	adds	r7, #8
 803d06c:	46bd      	mov	sp, r7
 803d06e:	bd80      	pop	{r7, pc}

0803d070 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803d070:	b580      	push	{r7, lr}
 803d072:	b082      	sub	sp, #8
 803d074:	af00      	add	r7, sp, #0
 803d076:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 803d078:	687b      	ldr	r3, [r7, #4]
 803d07a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803d07e:	4618      	mov	r0, r3
 803d080:	f7fe fd50 	bl	803bb24 <USBD_LL_DevDisconnected>
}
 803d084:	bf00      	nop
 803d086:	3708      	adds	r7, #8
 803d088:	46bd      	mov	sp, r7
 803d08a:	bd80      	pop	{r7, pc}

0803d08c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 803d08c:	b580      	push	{r7, lr}
 803d08e:	b082      	sub	sp, #8
 803d090:	af00      	add	r7, sp, #0
 803d092:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 803d094:	687b      	ldr	r3, [r7, #4]
 803d096:	781b      	ldrb	r3, [r3, #0]
 803d098:	2b00      	cmp	r3, #0
 803d09a:	d13e      	bne.n	803d11a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 803d09c:	4a21      	ldr	r2, [pc, #132]	; (803d124 <USBD_LL_Init+0x98>)
 803d09e:	687b      	ldr	r3, [r7, #4]
 803d0a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 803d0a4:	687b      	ldr	r3, [r7, #4]
 803d0a6:	4a1f      	ldr	r2, [pc, #124]	; (803d124 <USBD_LL_Init+0x98>)
 803d0a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 803d0ac:	4b1d      	ldr	r3, [pc, #116]	; (803d124 <USBD_LL_Init+0x98>)
 803d0ae:	4a1e      	ldr	r2, [pc, #120]	; (803d128 <USBD_LL_Init+0x9c>)
 803d0b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 803d0b2:	4b1c      	ldr	r3, [pc, #112]	; (803d124 <USBD_LL_Init+0x98>)
 803d0b4:	2209      	movs	r2, #9
 803d0b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803d0b8:	4b1a      	ldr	r3, [pc, #104]	; (803d124 <USBD_LL_Init+0x98>)
 803d0ba:	2202      	movs	r2, #2
 803d0bc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 803d0be:	4b19      	ldr	r3, [pc, #100]	; (803d124 <USBD_LL_Init+0x98>)
 803d0c0:	2200      	movs	r2, #0
 803d0c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803d0c4:	4b17      	ldr	r3, [pc, #92]	; (803d124 <USBD_LL_Init+0x98>)
 803d0c6:	2202      	movs	r2, #2
 803d0c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 803d0ca:	4b16      	ldr	r3, [pc, #88]	; (803d124 <USBD_LL_Init+0x98>)
 803d0cc:	2200      	movs	r2, #0
 803d0ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 803d0d0:	4b14      	ldr	r3, [pc, #80]	; (803d124 <USBD_LL_Init+0x98>)
 803d0d2:	2200      	movs	r2, #0
 803d0d4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 803d0d6:	4b13      	ldr	r3, [pc, #76]	; (803d124 <USBD_LL_Init+0x98>)
 803d0d8:	2200      	movs	r2, #0
 803d0da:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 803d0dc:	4b11      	ldr	r3, [pc, #68]	; (803d124 <USBD_LL_Init+0x98>)
 803d0de:	2200      	movs	r2, #0
 803d0e0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 803d0e2:	4b10      	ldr	r3, [pc, #64]	; (803d124 <USBD_LL_Init+0x98>)
 803d0e4:	2200      	movs	r2, #0
 803d0e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 803d0e8:	4b0e      	ldr	r3, [pc, #56]	; (803d124 <USBD_LL_Init+0x98>)
 803d0ea:	2200      	movs	r2, #0
 803d0ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803d0ee:	480d      	ldr	r0, [pc, #52]	; (803d124 <USBD_LL_Init+0x98>)
 803d0f0:	f7f3 fe18 	bl	8030d24 <HAL_PCD_Init>
 803d0f4:	4603      	mov	r3, r0
 803d0f6:	2b00      	cmp	r3, #0
 803d0f8:	d001      	beq.n	803d0fe <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 803d0fa:	f7ee f895 	bl	802b228 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803d0fe:	2180      	movs	r1, #128	; 0x80
 803d100:	4808      	ldr	r0, [pc, #32]	; (803d124 <USBD_LL_Init+0x98>)
 803d102:	f7f5 f8a4 	bl	803224e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 803d106:	2240      	movs	r2, #64	; 0x40
 803d108:	2100      	movs	r1, #0
 803d10a:	4806      	ldr	r0, [pc, #24]	; (803d124 <USBD_LL_Init+0x98>)
 803d10c:	f7f5 f858 	bl	80321c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 803d110:	2280      	movs	r2, #128	; 0x80
 803d112:	2101      	movs	r1, #1
 803d114:	4803      	ldr	r0, [pc, #12]	; (803d124 <USBD_LL_Init+0x98>)
 803d116:	f7f5 f853 	bl	80321c0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 803d11a:	2300      	movs	r3, #0
}
 803d11c:	4618      	mov	r0, r3
 803d11e:	3708      	adds	r7, #8
 803d120:	46bd      	mov	sp, r7
 803d122:	bd80      	pop	{r7, pc}
 803d124:	24003030 	.word	0x24003030
 803d128:	40080000 	.word	0x40080000

0803d12c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 803d12c:	b580      	push	{r7, lr}
 803d12e:	b084      	sub	sp, #16
 803d130:	af00      	add	r7, sp, #0
 803d132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803d134:	2300      	movs	r3, #0
 803d136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803d138:	2300      	movs	r3, #0
 803d13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 803d13c:	687b      	ldr	r3, [r7, #4]
 803d13e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803d142:	4618      	mov	r0, r3
 803d144:	f7f3 ff12 	bl	8030f6c <HAL_PCD_Start>
 803d148:	4603      	mov	r3, r0
 803d14a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803d14c:	7bfb      	ldrb	r3, [r7, #15]
 803d14e:	4618      	mov	r0, r3
 803d150:	f000 f942 	bl	803d3d8 <USBD_Get_USB_Status>
 803d154:	4603      	mov	r3, r0
 803d156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803d158:	7bbb      	ldrb	r3, [r7, #14]
}
 803d15a:	4618      	mov	r0, r3
 803d15c:	3710      	adds	r7, #16
 803d15e:	46bd      	mov	sp, r7
 803d160:	bd80      	pop	{r7, pc}

0803d162 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 803d162:	b580      	push	{r7, lr}
 803d164:	b084      	sub	sp, #16
 803d166:	af00      	add	r7, sp, #0
 803d168:	6078      	str	r0, [r7, #4]
 803d16a:	4608      	mov	r0, r1
 803d16c:	4611      	mov	r1, r2
 803d16e:	461a      	mov	r2, r3
 803d170:	4603      	mov	r3, r0
 803d172:	70fb      	strb	r3, [r7, #3]
 803d174:	460b      	mov	r3, r1
 803d176:	70bb      	strb	r3, [r7, #2]
 803d178:	4613      	mov	r3, r2
 803d17a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803d17c:	2300      	movs	r3, #0
 803d17e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803d180:	2300      	movs	r3, #0
 803d182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 803d184:	687b      	ldr	r3, [r7, #4]
 803d186:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803d18a:	78bb      	ldrb	r3, [r7, #2]
 803d18c:	883a      	ldrh	r2, [r7, #0]
 803d18e:	78f9      	ldrb	r1, [r7, #3]
 803d190:	f7f4 fc10 	bl	80319b4 <HAL_PCD_EP_Open>
 803d194:	4603      	mov	r3, r0
 803d196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803d198:	7bfb      	ldrb	r3, [r7, #15]
 803d19a:	4618      	mov	r0, r3
 803d19c:	f000 f91c 	bl	803d3d8 <USBD_Get_USB_Status>
 803d1a0:	4603      	mov	r3, r0
 803d1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803d1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 803d1a6:	4618      	mov	r0, r3
 803d1a8:	3710      	adds	r7, #16
 803d1aa:	46bd      	mov	sp, r7
 803d1ac:	bd80      	pop	{r7, pc}

0803d1ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803d1ae:	b580      	push	{r7, lr}
 803d1b0:	b084      	sub	sp, #16
 803d1b2:	af00      	add	r7, sp, #0
 803d1b4:	6078      	str	r0, [r7, #4]
 803d1b6:	460b      	mov	r3, r1
 803d1b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803d1ba:	2300      	movs	r3, #0
 803d1bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803d1be:	2300      	movs	r3, #0
 803d1c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 803d1c2:	687b      	ldr	r3, [r7, #4]
 803d1c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803d1c8:	78fa      	ldrb	r2, [r7, #3]
 803d1ca:	4611      	mov	r1, r2
 803d1cc:	4618      	mov	r0, r3
 803d1ce:	f7f4 fc59 	bl	8031a84 <HAL_PCD_EP_Close>
 803d1d2:	4603      	mov	r3, r0
 803d1d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803d1d6:	7bfb      	ldrb	r3, [r7, #15]
 803d1d8:	4618      	mov	r0, r3
 803d1da:	f000 f8fd 	bl	803d3d8 <USBD_Get_USB_Status>
 803d1de:	4603      	mov	r3, r0
 803d1e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803d1e2:	7bbb      	ldrb	r3, [r7, #14]
}
 803d1e4:	4618      	mov	r0, r3
 803d1e6:	3710      	adds	r7, #16
 803d1e8:	46bd      	mov	sp, r7
 803d1ea:	bd80      	pop	{r7, pc}

0803d1ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803d1ec:	b580      	push	{r7, lr}
 803d1ee:	b084      	sub	sp, #16
 803d1f0:	af00      	add	r7, sp, #0
 803d1f2:	6078      	str	r0, [r7, #4]
 803d1f4:	460b      	mov	r3, r1
 803d1f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803d1f8:	2300      	movs	r3, #0
 803d1fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803d1fc:	2300      	movs	r3, #0
 803d1fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 803d200:	687b      	ldr	r3, [r7, #4]
 803d202:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803d206:	78fa      	ldrb	r2, [r7, #3]
 803d208:	4611      	mov	r1, r2
 803d20a:	4618      	mov	r0, r3
 803d20c:	f7f4 fd31 	bl	8031c72 <HAL_PCD_EP_SetStall>
 803d210:	4603      	mov	r3, r0
 803d212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803d214:	7bfb      	ldrb	r3, [r7, #15]
 803d216:	4618      	mov	r0, r3
 803d218:	f000 f8de 	bl	803d3d8 <USBD_Get_USB_Status>
 803d21c:	4603      	mov	r3, r0
 803d21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803d220:	7bbb      	ldrb	r3, [r7, #14]
}
 803d222:	4618      	mov	r0, r3
 803d224:	3710      	adds	r7, #16
 803d226:	46bd      	mov	sp, r7
 803d228:	bd80      	pop	{r7, pc}

0803d22a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803d22a:	b580      	push	{r7, lr}
 803d22c:	b084      	sub	sp, #16
 803d22e:	af00      	add	r7, sp, #0
 803d230:	6078      	str	r0, [r7, #4]
 803d232:	460b      	mov	r3, r1
 803d234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803d236:	2300      	movs	r3, #0
 803d238:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803d23a:	2300      	movs	r3, #0
 803d23c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803d23e:	687b      	ldr	r3, [r7, #4]
 803d240:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803d244:	78fa      	ldrb	r2, [r7, #3]
 803d246:	4611      	mov	r1, r2
 803d248:	4618      	mov	r0, r3
 803d24a:	f7f4 fd76 	bl	8031d3a <HAL_PCD_EP_ClrStall>
 803d24e:	4603      	mov	r3, r0
 803d250:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803d252:	7bfb      	ldrb	r3, [r7, #15]
 803d254:	4618      	mov	r0, r3
 803d256:	f000 f8bf 	bl	803d3d8 <USBD_Get_USB_Status>
 803d25a:	4603      	mov	r3, r0
 803d25c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803d25e:	7bbb      	ldrb	r3, [r7, #14]
}
 803d260:	4618      	mov	r0, r3
 803d262:	3710      	adds	r7, #16
 803d264:	46bd      	mov	sp, r7
 803d266:	bd80      	pop	{r7, pc}

0803d268 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803d268:	b480      	push	{r7}
 803d26a:	b085      	sub	sp, #20
 803d26c:	af00      	add	r7, sp, #0
 803d26e:	6078      	str	r0, [r7, #4]
 803d270:	460b      	mov	r3, r1
 803d272:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 803d274:	687b      	ldr	r3, [r7, #4]
 803d276:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803d27a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 803d27c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803d280:	2b00      	cmp	r3, #0
 803d282:	da0b      	bge.n	803d29c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 803d284:	78fb      	ldrb	r3, [r7, #3]
 803d286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803d28a:	68f9      	ldr	r1, [r7, #12]
 803d28c:	4613      	mov	r3, r2
 803d28e:	00db      	lsls	r3, r3, #3
 803d290:	4413      	add	r3, r2
 803d292:	009b      	lsls	r3, r3, #2
 803d294:	440b      	add	r3, r1
 803d296:	333e      	adds	r3, #62	; 0x3e
 803d298:	781b      	ldrb	r3, [r3, #0]
 803d29a:	e00b      	b.n	803d2b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 803d29c:	78fb      	ldrb	r3, [r7, #3]
 803d29e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803d2a2:	68f9      	ldr	r1, [r7, #12]
 803d2a4:	4613      	mov	r3, r2
 803d2a6:	00db      	lsls	r3, r3, #3
 803d2a8:	4413      	add	r3, r2
 803d2aa:	009b      	lsls	r3, r3, #2
 803d2ac:	440b      	add	r3, r1
 803d2ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 803d2b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 803d2b4:	4618      	mov	r0, r3
 803d2b6:	3714      	adds	r7, #20
 803d2b8:	46bd      	mov	sp, r7
 803d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d2be:	4770      	bx	lr

0803d2c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 803d2c0:	b580      	push	{r7, lr}
 803d2c2:	b084      	sub	sp, #16
 803d2c4:	af00      	add	r7, sp, #0
 803d2c6:	6078      	str	r0, [r7, #4]
 803d2c8:	460b      	mov	r3, r1
 803d2ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803d2cc:	2300      	movs	r3, #0
 803d2ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803d2d0:	2300      	movs	r3, #0
 803d2d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 803d2d4:	687b      	ldr	r3, [r7, #4]
 803d2d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803d2da:	78fa      	ldrb	r2, [r7, #3]
 803d2dc:	4611      	mov	r1, r2
 803d2de:	4618      	mov	r0, r3
 803d2e0:	f7f4 fb43 	bl	803196a <HAL_PCD_SetAddress>
 803d2e4:	4603      	mov	r3, r0
 803d2e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803d2e8:	7bfb      	ldrb	r3, [r7, #15]
 803d2ea:	4618      	mov	r0, r3
 803d2ec:	f000 f874 	bl	803d3d8 <USBD_Get_USB_Status>
 803d2f0:	4603      	mov	r3, r0
 803d2f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803d2f4:	7bbb      	ldrb	r3, [r7, #14]
}
 803d2f6:	4618      	mov	r0, r3
 803d2f8:	3710      	adds	r7, #16
 803d2fa:	46bd      	mov	sp, r7
 803d2fc:	bd80      	pop	{r7, pc}

0803d2fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803d2fe:	b580      	push	{r7, lr}
 803d300:	b086      	sub	sp, #24
 803d302:	af00      	add	r7, sp, #0
 803d304:	60f8      	str	r0, [r7, #12]
 803d306:	607a      	str	r2, [r7, #4]
 803d308:	603b      	str	r3, [r7, #0]
 803d30a:	460b      	mov	r3, r1
 803d30c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803d30e:	2300      	movs	r3, #0
 803d310:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803d312:	2300      	movs	r3, #0
 803d314:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 803d316:	68fb      	ldr	r3, [r7, #12]
 803d318:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803d31c:	7af9      	ldrb	r1, [r7, #11]
 803d31e:	683b      	ldr	r3, [r7, #0]
 803d320:	687a      	ldr	r2, [r7, #4]
 803d322:	f7f4 fc5c 	bl	8031bde <HAL_PCD_EP_Transmit>
 803d326:	4603      	mov	r3, r0
 803d328:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803d32a:	7dfb      	ldrb	r3, [r7, #23]
 803d32c:	4618      	mov	r0, r3
 803d32e:	f000 f853 	bl	803d3d8 <USBD_Get_USB_Status>
 803d332:	4603      	mov	r3, r0
 803d334:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803d336:	7dbb      	ldrb	r3, [r7, #22]
}
 803d338:	4618      	mov	r0, r3
 803d33a:	3718      	adds	r7, #24
 803d33c:	46bd      	mov	sp, r7
 803d33e:	bd80      	pop	{r7, pc}

0803d340 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803d340:	b580      	push	{r7, lr}
 803d342:	b086      	sub	sp, #24
 803d344:	af00      	add	r7, sp, #0
 803d346:	60f8      	str	r0, [r7, #12]
 803d348:	607a      	str	r2, [r7, #4]
 803d34a:	603b      	str	r3, [r7, #0]
 803d34c:	460b      	mov	r3, r1
 803d34e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803d350:	2300      	movs	r3, #0
 803d352:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803d354:	2300      	movs	r3, #0
 803d356:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 803d358:	68fb      	ldr	r3, [r7, #12]
 803d35a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803d35e:	7af9      	ldrb	r1, [r7, #11]
 803d360:	683b      	ldr	r3, [r7, #0]
 803d362:	687a      	ldr	r2, [r7, #4]
 803d364:	f7f4 fbd8 	bl	8031b18 <HAL_PCD_EP_Receive>
 803d368:	4603      	mov	r3, r0
 803d36a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803d36c:	7dfb      	ldrb	r3, [r7, #23]
 803d36e:	4618      	mov	r0, r3
 803d370:	f000 f832 	bl	803d3d8 <USBD_Get_USB_Status>
 803d374:	4603      	mov	r3, r0
 803d376:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803d378:	7dbb      	ldrb	r3, [r7, #22]
}
 803d37a:	4618      	mov	r0, r3
 803d37c:	3718      	adds	r7, #24
 803d37e:	46bd      	mov	sp, r7
 803d380:	bd80      	pop	{r7, pc}

0803d382 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803d382:	b580      	push	{r7, lr}
 803d384:	b082      	sub	sp, #8
 803d386:	af00      	add	r7, sp, #0
 803d388:	6078      	str	r0, [r7, #4]
 803d38a:	460b      	mov	r3, r1
 803d38c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 803d38e:	687b      	ldr	r3, [r7, #4]
 803d390:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803d394:	78fa      	ldrb	r2, [r7, #3]
 803d396:	4611      	mov	r1, r2
 803d398:	4618      	mov	r0, r3
 803d39a:	f7f4 fc08 	bl	8031bae <HAL_PCD_EP_GetRxCount>
 803d39e:	4603      	mov	r3, r0
}
 803d3a0:	4618      	mov	r0, r3
 803d3a2:	3708      	adds	r7, #8
 803d3a4:	46bd      	mov	sp, r7
 803d3a6:	bd80      	pop	{r7, pc}

0803d3a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 803d3a8:	b480      	push	{r7}
 803d3aa:	b083      	sub	sp, #12
 803d3ac:	af00      	add	r7, sp, #0
 803d3ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 803d3b0:	4b03      	ldr	r3, [pc, #12]	; (803d3c0 <USBD_static_malloc+0x18>)
}
 803d3b2:	4618      	mov	r0, r3
 803d3b4:	370c      	adds	r7, #12
 803d3b6:	46bd      	mov	sp, r7
 803d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d3bc:	4770      	bx	lr
 803d3be:	bf00      	nop
 803d3c0:	2400353c 	.word	0x2400353c

0803d3c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 803d3c4:	b480      	push	{r7}
 803d3c6:	b083      	sub	sp, #12
 803d3c8:	af00      	add	r7, sp, #0
 803d3ca:	6078      	str	r0, [r7, #4]

}
 803d3cc:	bf00      	nop
 803d3ce:	370c      	adds	r7, #12
 803d3d0:	46bd      	mov	sp, r7
 803d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d3d6:	4770      	bx	lr

0803d3d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 803d3d8:	b480      	push	{r7}
 803d3da:	b085      	sub	sp, #20
 803d3dc:	af00      	add	r7, sp, #0
 803d3de:	4603      	mov	r3, r0
 803d3e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803d3e2:	2300      	movs	r3, #0
 803d3e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 803d3e6:	79fb      	ldrb	r3, [r7, #7]
 803d3e8:	2b03      	cmp	r3, #3
 803d3ea:	d817      	bhi.n	803d41c <USBD_Get_USB_Status+0x44>
 803d3ec:	a201      	add	r2, pc, #4	; (adr r2, 803d3f4 <USBD_Get_USB_Status+0x1c>)
 803d3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803d3f2:	bf00      	nop
 803d3f4:	0803d405 	.word	0x0803d405
 803d3f8:	0803d40b 	.word	0x0803d40b
 803d3fc:	0803d411 	.word	0x0803d411
 803d400:	0803d417 	.word	0x0803d417
  {
    case HAL_OK :
      usb_status = USBD_OK;
 803d404:	2300      	movs	r3, #0
 803d406:	73fb      	strb	r3, [r7, #15]
    break;
 803d408:	e00b      	b.n	803d422 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 803d40a:	2303      	movs	r3, #3
 803d40c:	73fb      	strb	r3, [r7, #15]
    break;
 803d40e:	e008      	b.n	803d422 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 803d410:	2301      	movs	r3, #1
 803d412:	73fb      	strb	r3, [r7, #15]
    break;
 803d414:	e005      	b.n	803d422 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 803d416:	2303      	movs	r3, #3
 803d418:	73fb      	strb	r3, [r7, #15]
    break;
 803d41a:	e002      	b.n	803d422 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 803d41c:	2303      	movs	r3, #3
 803d41e:	73fb      	strb	r3, [r7, #15]
    break;
 803d420:	bf00      	nop
  }
  return usb_status;
 803d422:	7bfb      	ldrb	r3, [r7, #15]
}
 803d424:	4618      	mov	r0, r3
 803d426:	3714      	adds	r7, #20
 803d428:	46bd      	mov	sp, r7
 803d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d42e:	4770      	bx	lr

0803d430 <_ZdlPvj>:
 803d430:	f000 b817 	b.w	803d462 <_ZdlPv>

0803d434 <_Znwj>:
 803d434:	2801      	cmp	r0, #1
 803d436:	bf38      	it	cc
 803d438:	2001      	movcc	r0, #1
 803d43a:	b510      	push	{r4, lr}
 803d43c:	4604      	mov	r4, r0
 803d43e:	4620      	mov	r0, r4
 803d440:	f000 f87c 	bl	803d53c <malloc>
 803d444:	b930      	cbnz	r0, 803d454 <_Znwj+0x20>
 803d446:	f000 f80f 	bl	803d468 <_ZSt15get_new_handlerv>
 803d44a:	b908      	cbnz	r0, 803d450 <_Znwj+0x1c>
 803d44c:	f000 f814 	bl	803d478 <abort>
 803d450:	4780      	blx	r0
 803d452:	e7f4      	b.n	803d43e <_Znwj+0xa>
 803d454:	bd10      	pop	{r4, pc}

0803d456 <_ZSt17__throw_bad_allocv>:
 803d456:	b508      	push	{r3, lr}
 803d458:	f000 f80e 	bl	803d478 <abort>

0803d45c <_ZSt20__throw_length_errorPKc>:
 803d45c:	b508      	push	{r3, lr}
 803d45e:	f000 f80b 	bl	803d478 <abort>

0803d462 <_ZdlPv>:
 803d462:	f000 b873 	b.w	803d54c <free>
	...

0803d468 <_ZSt15get_new_handlerv>:
 803d468:	4b02      	ldr	r3, [pc, #8]	; (803d474 <_ZSt15get_new_handlerv+0xc>)
 803d46a:	6818      	ldr	r0, [r3, #0]
 803d46c:	f3bf 8f5b 	dmb	ish
 803d470:	4770      	bx	lr
 803d472:	bf00      	nop
 803d474:	2400375c 	.word	0x2400375c

0803d478 <abort>:
 803d478:	b508      	push	{r3, lr}
 803d47a:	2006      	movs	r0, #6
 803d47c:	f000 fca4 	bl	803ddc8 <raise>
 803d480:	2001      	movs	r0, #1
 803d482:	f7ee f90f 	bl	802b6a4 <_exit>
	...

0803d488 <__assert_func>:
 803d488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803d48a:	4614      	mov	r4, r2
 803d48c:	461a      	mov	r2, r3
 803d48e:	4b09      	ldr	r3, [pc, #36]	; (803d4b4 <__assert_func+0x2c>)
 803d490:	681b      	ldr	r3, [r3, #0]
 803d492:	4605      	mov	r5, r0
 803d494:	68d8      	ldr	r0, [r3, #12]
 803d496:	b14c      	cbz	r4, 803d4ac <__assert_func+0x24>
 803d498:	4b07      	ldr	r3, [pc, #28]	; (803d4b8 <__assert_func+0x30>)
 803d49a:	9100      	str	r1, [sp, #0]
 803d49c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803d4a0:	4906      	ldr	r1, [pc, #24]	; (803d4bc <__assert_func+0x34>)
 803d4a2:	462b      	mov	r3, r5
 803d4a4:	f000 f814 	bl	803d4d0 <fiprintf>
 803d4a8:	f7ff ffe6 	bl	803d478 <abort>
 803d4ac:	4b04      	ldr	r3, [pc, #16]	; (803d4c0 <__assert_func+0x38>)
 803d4ae:	461c      	mov	r4, r3
 803d4b0:	e7f3      	b.n	803d49a <__assert_func+0x12>
 803d4b2:	bf00      	nop
 803d4b4:	24000100 	.word	0x24000100
 803d4b8:	080595a8 	.word	0x080595a8
 803d4bc:	080595b5 	.word	0x080595b5
 803d4c0:	080595e3 	.word	0x080595e3

0803d4c4 <__errno>:
 803d4c4:	4b01      	ldr	r3, [pc, #4]	; (803d4cc <__errno+0x8>)
 803d4c6:	6818      	ldr	r0, [r3, #0]
 803d4c8:	4770      	bx	lr
 803d4ca:	bf00      	nop
 803d4cc:	24000100 	.word	0x24000100

0803d4d0 <fiprintf>:
 803d4d0:	b40e      	push	{r1, r2, r3}
 803d4d2:	b503      	push	{r0, r1, lr}
 803d4d4:	4601      	mov	r1, r0
 803d4d6:	ab03      	add	r3, sp, #12
 803d4d8:	4805      	ldr	r0, [pc, #20]	; (803d4f0 <fiprintf+0x20>)
 803d4da:	f853 2b04 	ldr.w	r2, [r3], #4
 803d4de:	6800      	ldr	r0, [r0, #0]
 803d4e0:	9301      	str	r3, [sp, #4]
 803d4e2:	f000 f975 	bl	803d7d0 <_vfiprintf_r>
 803d4e6:	b002      	add	sp, #8
 803d4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 803d4ec:	b003      	add	sp, #12
 803d4ee:	4770      	bx	lr
 803d4f0:	24000100 	.word	0x24000100

0803d4f4 <__libc_init_array>:
 803d4f4:	b570      	push	{r4, r5, r6, lr}
 803d4f6:	4d0d      	ldr	r5, [pc, #52]	; (803d52c <__libc_init_array+0x38>)
 803d4f8:	4c0d      	ldr	r4, [pc, #52]	; (803d530 <__libc_init_array+0x3c>)
 803d4fa:	1b64      	subs	r4, r4, r5
 803d4fc:	10a4      	asrs	r4, r4, #2
 803d4fe:	2600      	movs	r6, #0
 803d500:	42a6      	cmp	r6, r4
 803d502:	d109      	bne.n	803d518 <__libc_init_array+0x24>
 803d504:	4d0b      	ldr	r5, [pc, #44]	; (803d534 <__libc_init_array+0x40>)
 803d506:	4c0c      	ldr	r4, [pc, #48]	; (803d538 <__libc_init_array+0x44>)
 803d508:	f001 f812 	bl	803e530 <_init>
 803d50c:	1b64      	subs	r4, r4, r5
 803d50e:	10a4      	asrs	r4, r4, #2
 803d510:	2600      	movs	r6, #0
 803d512:	42a6      	cmp	r6, r4
 803d514:	d105      	bne.n	803d522 <__libc_init_array+0x2e>
 803d516:	bd70      	pop	{r4, r5, r6, pc}
 803d518:	f855 3b04 	ldr.w	r3, [r5], #4
 803d51c:	4798      	blx	r3
 803d51e:	3601      	adds	r6, #1
 803d520:	e7ee      	b.n	803d500 <__libc_init_array+0xc>
 803d522:	f855 3b04 	ldr.w	r3, [r5], #4
 803d526:	4798      	blx	r3
 803d528:	3601      	adds	r6, #1
 803d52a:	e7f2      	b.n	803d512 <__libc_init_array+0x1e>
 803d52c:	08059684 	.word	0x08059684
 803d530:	08059684 	.word	0x08059684
 803d534:	08059684 	.word	0x08059684
 803d538:	0805968c 	.word	0x0805968c

0803d53c <malloc>:
 803d53c:	4b02      	ldr	r3, [pc, #8]	; (803d548 <malloc+0xc>)
 803d53e:	4601      	mov	r1, r0
 803d540:	6818      	ldr	r0, [r3, #0]
 803d542:	f000 b8a7 	b.w	803d694 <_malloc_r>
 803d546:	bf00      	nop
 803d548:	24000100 	.word	0x24000100

0803d54c <free>:
 803d54c:	4b02      	ldr	r3, [pc, #8]	; (803d558 <free+0xc>)
 803d54e:	4601      	mov	r1, r0
 803d550:	6818      	ldr	r0, [r3, #0]
 803d552:	f000 b833 	b.w	803d5bc <_free_r>
 803d556:	bf00      	nop
 803d558:	24000100 	.word	0x24000100

0803d55c <memcpy>:
 803d55c:	440a      	add	r2, r1
 803d55e:	4291      	cmp	r1, r2
 803d560:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 803d564:	d100      	bne.n	803d568 <memcpy+0xc>
 803d566:	4770      	bx	lr
 803d568:	b510      	push	{r4, lr}
 803d56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 803d56e:	f803 4f01 	strb.w	r4, [r3, #1]!
 803d572:	4291      	cmp	r1, r2
 803d574:	d1f9      	bne.n	803d56a <memcpy+0xe>
 803d576:	bd10      	pop	{r4, pc}

0803d578 <memmove>:
 803d578:	4288      	cmp	r0, r1
 803d57a:	b510      	push	{r4, lr}
 803d57c:	eb01 0402 	add.w	r4, r1, r2
 803d580:	d902      	bls.n	803d588 <memmove+0x10>
 803d582:	4284      	cmp	r4, r0
 803d584:	4623      	mov	r3, r4
 803d586:	d807      	bhi.n	803d598 <memmove+0x20>
 803d588:	1e43      	subs	r3, r0, #1
 803d58a:	42a1      	cmp	r1, r4
 803d58c:	d008      	beq.n	803d5a0 <memmove+0x28>
 803d58e:	f811 2b01 	ldrb.w	r2, [r1], #1
 803d592:	f803 2f01 	strb.w	r2, [r3, #1]!
 803d596:	e7f8      	b.n	803d58a <memmove+0x12>
 803d598:	4402      	add	r2, r0
 803d59a:	4601      	mov	r1, r0
 803d59c:	428a      	cmp	r2, r1
 803d59e:	d100      	bne.n	803d5a2 <memmove+0x2a>
 803d5a0:	bd10      	pop	{r4, pc}
 803d5a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803d5a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803d5aa:	e7f7      	b.n	803d59c <memmove+0x24>

0803d5ac <memset>:
 803d5ac:	4402      	add	r2, r0
 803d5ae:	4603      	mov	r3, r0
 803d5b0:	4293      	cmp	r3, r2
 803d5b2:	d100      	bne.n	803d5b6 <memset+0xa>
 803d5b4:	4770      	bx	lr
 803d5b6:	f803 1b01 	strb.w	r1, [r3], #1
 803d5ba:	e7f9      	b.n	803d5b0 <memset+0x4>

0803d5bc <_free_r>:
 803d5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803d5be:	2900      	cmp	r1, #0
 803d5c0:	d044      	beq.n	803d64c <_free_r+0x90>
 803d5c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803d5c6:	9001      	str	r0, [sp, #4]
 803d5c8:	2b00      	cmp	r3, #0
 803d5ca:	f1a1 0404 	sub.w	r4, r1, #4
 803d5ce:	bfb8      	it	lt
 803d5d0:	18e4      	addlt	r4, r4, r3
 803d5d2:	f000 fef5 	bl	803e3c0 <__malloc_lock>
 803d5d6:	4a1e      	ldr	r2, [pc, #120]	; (803d650 <_free_r+0x94>)
 803d5d8:	9801      	ldr	r0, [sp, #4]
 803d5da:	6813      	ldr	r3, [r2, #0]
 803d5dc:	b933      	cbnz	r3, 803d5ec <_free_r+0x30>
 803d5de:	6063      	str	r3, [r4, #4]
 803d5e0:	6014      	str	r4, [r2, #0]
 803d5e2:	b003      	add	sp, #12
 803d5e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803d5e8:	f000 bef0 	b.w	803e3cc <__malloc_unlock>
 803d5ec:	42a3      	cmp	r3, r4
 803d5ee:	d908      	bls.n	803d602 <_free_r+0x46>
 803d5f0:	6825      	ldr	r5, [r4, #0]
 803d5f2:	1961      	adds	r1, r4, r5
 803d5f4:	428b      	cmp	r3, r1
 803d5f6:	bf01      	itttt	eq
 803d5f8:	6819      	ldreq	r1, [r3, #0]
 803d5fa:	685b      	ldreq	r3, [r3, #4]
 803d5fc:	1949      	addeq	r1, r1, r5
 803d5fe:	6021      	streq	r1, [r4, #0]
 803d600:	e7ed      	b.n	803d5de <_free_r+0x22>
 803d602:	461a      	mov	r2, r3
 803d604:	685b      	ldr	r3, [r3, #4]
 803d606:	b10b      	cbz	r3, 803d60c <_free_r+0x50>
 803d608:	42a3      	cmp	r3, r4
 803d60a:	d9fa      	bls.n	803d602 <_free_r+0x46>
 803d60c:	6811      	ldr	r1, [r2, #0]
 803d60e:	1855      	adds	r5, r2, r1
 803d610:	42a5      	cmp	r5, r4
 803d612:	d10b      	bne.n	803d62c <_free_r+0x70>
 803d614:	6824      	ldr	r4, [r4, #0]
 803d616:	4421      	add	r1, r4
 803d618:	1854      	adds	r4, r2, r1
 803d61a:	42a3      	cmp	r3, r4
 803d61c:	6011      	str	r1, [r2, #0]
 803d61e:	d1e0      	bne.n	803d5e2 <_free_r+0x26>
 803d620:	681c      	ldr	r4, [r3, #0]
 803d622:	685b      	ldr	r3, [r3, #4]
 803d624:	6053      	str	r3, [r2, #4]
 803d626:	4421      	add	r1, r4
 803d628:	6011      	str	r1, [r2, #0]
 803d62a:	e7da      	b.n	803d5e2 <_free_r+0x26>
 803d62c:	d902      	bls.n	803d634 <_free_r+0x78>
 803d62e:	230c      	movs	r3, #12
 803d630:	6003      	str	r3, [r0, #0]
 803d632:	e7d6      	b.n	803d5e2 <_free_r+0x26>
 803d634:	6825      	ldr	r5, [r4, #0]
 803d636:	1961      	adds	r1, r4, r5
 803d638:	428b      	cmp	r3, r1
 803d63a:	bf04      	itt	eq
 803d63c:	6819      	ldreq	r1, [r3, #0]
 803d63e:	685b      	ldreq	r3, [r3, #4]
 803d640:	6063      	str	r3, [r4, #4]
 803d642:	bf04      	itt	eq
 803d644:	1949      	addeq	r1, r1, r5
 803d646:	6021      	streq	r1, [r4, #0]
 803d648:	6054      	str	r4, [r2, #4]
 803d64a:	e7ca      	b.n	803d5e2 <_free_r+0x26>
 803d64c:	b003      	add	sp, #12
 803d64e:	bd30      	pop	{r4, r5, pc}
 803d650:	24003760 	.word	0x24003760

0803d654 <sbrk_aligned>:
 803d654:	b570      	push	{r4, r5, r6, lr}
 803d656:	4e0e      	ldr	r6, [pc, #56]	; (803d690 <sbrk_aligned+0x3c>)
 803d658:	460c      	mov	r4, r1
 803d65a:	6831      	ldr	r1, [r6, #0]
 803d65c:	4605      	mov	r5, r0
 803d65e:	b911      	cbnz	r1, 803d666 <sbrk_aligned+0x12>
 803d660:	f000 fb7a 	bl	803dd58 <_sbrk_r>
 803d664:	6030      	str	r0, [r6, #0]
 803d666:	4621      	mov	r1, r4
 803d668:	4628      	mov	r0, r5
 803d66a:	f000 fb75 	bl	803dd58 <_sbrk_r>
 803d66e:	1c43      	adds	r3, r0, #1
 803d670:	d00a      	beq.n	803d688 <sbrk_aligned+0x34>
 803d672:	1cc4      	adds	r4, r0, #3
 803d674:	f024 0403 	bic.w	r4, r4, #3
 803d678:	42a0      	cmp	r0, r4
 803d67a:	d007      	beq.n	803d68c <sbrk_aligned+0x38>
 803d67c:	1a21      	subs	r1, r4, r0
 803d67e:	4628      	mov	r0, r5
 803d680:	f000 fb6a 	bl	803dd58 <_sbrk_r>
 803d684:	3001      	adds	r0, #1
 803d686:	d101      	bne.n	803d68c <sbrk_aligned+0x38>
 803d688:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803d68c:	4620      	mov	r0, r4
 803d68e:	bd70      	pop	{r4, r5, r6, pc}
 803d690:	24003764 	.word	0x24003764

0803d694 <_malloc_r>:
 803d694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803d698:	1ccd      	adds	r5, r1, #3
 803d69a:	f025 0503 	bic.w	r5, r5, #3
 803d69e:	3508      	adds	r5, #8
 803d6a0:	2d0c      	cmp	r5, #12
 803d6a2:	bf38      	it	cc
 803d6a4:	250c      	movcc	r5, #12
 803d6a6:	2d00      	cmp	r5, #0
 803d6a8:	4607      	mov	r7, r0
 803d6aa:	db01      	blt.n	803d6b0 <_malloc_r+0x1c>
 803d6ac:	42a9      	cmp	r1, r5
 803d6ae:	d905      	bls.n	803d6bc <_malloc_r+0x28>
 803d6b0:	230c      	movs	r3, #12
 803d6b2:	603b      	str	r3, [r7, #0]
 803d6b4:	2600      	movs	r6, #0
 803d6b6:	4630      	mov	r0, r6
 803d6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803d6bc:	4e2e      	ldr	r6, [pc, #184]	; (803d778 <_malloc_r+0xe4>)
 803d6be:	f000 fe7f 	bl	803e3c0 <__malloc_lock>
 803d6c2:	6833      	ldr	r3, [r6, #0]
 803d6c4:	461c      	mov	r4, r3
 803d6c6:	bb34      	cbnz	r4, 803d716 <_malloc_r+0x82>
 803d6c8:	4629      	mov	r1, r5
 803d6ca:	4638      	mov	r0, r7
 803d6cc:	f7ff ffc2 	bl	803d654 <sbrk_aligned>
 803d6d0:	1c43      	adds	r3, r0, #1
 803d6d2:	4604      	mov	r4, r0
 803d6d4:	d14d      	bne.n	803d772 <_malloc_r+0xde>
 803d6d6:	6834      	ldr	r4, [r6, #0]
 803d6d8:	4626      	mov	r6, r4
 803d6da:	2e00      	cmp	r6, #0
 803d6dc:	d140      	bne.n	803d760 <_malloc_r+0xcc>
 803d6de:	6823      	ldr	r3, [r4, #0]
 803d6e0:	4631      	mov	r1, r6
 803d6e2:	4638      	mov	r0, r7
 803d6e4:	eb04 0803 	add.w	r8, r4, r3
 803d6e8:	f000 fb36 	bl	803dd58 <_sbrk_r>
 803d6ec:	4580      	cmp	r8, r0
 803d6ee:	d13a      	bne.n	803d766 <_malloc_r+0xd2>
 803d6f0:	6821      	ldr	r1, [r4, #0]
 803d6f2:	3503      	adds	r5, #3
 803d6f4:	1a6d      	subs	r5, r5, r1
 803d6f6:	f025 0503 	bic.w	r5, r5, #3
 803d6fa:	3508      	adds	r5, #8
 803d6fc:	2d0c      	cmp	r5, #12
 803d6fe:	bf38      	it	cc
 803d700:	250c      	movcc	r5, #12
 803d702:	4629      	mov	r1, r5
 803d704:	4638      	mov	r0, r7
 803d706:	f7ff ffa5 	bl	803d654 <sbrk_aligned>
 803d70a:	3001      	adds	r0, #1
 803d70c:	d02b      	beq.n	803d766 <_malloc_r+0xd2>
 803d70e:	6823      	ldr	r3, [r4, #0]
 803d710:	442b      	add	r3, r5
 803d712:	6023      	str	r3, [r4, #0]
 803d714:	e00e      	b.n	803d734 <_malloc_r+0xa0>
 803d716:	6822      	ldr	r2, [r4, #0]
 803d718:	1b52      	subs	r2, r2, r5
 803d71a:	d41e      	bmi.n	803d75a <_malloc_r+0xc6>
 803d71c:	2a0b      	cmp	r2, #11
 803d71e:	d916      	bls.n	803d74e <_malloc_r+0xba>
 803d720:	1961      	adds	r1, r4, r5
 803d722:	42a3      	cmp	r3, r4
 803d724:	6025      	str	r5, [r4, #0]
 803d726:	bf18      	it	ne
 803d728:	6059      	strne	r1, [r3, #4]
 803d72a:	6863      	ldr	r3, [r4, #4]
 803d72c:	bf08      	it	eq
 803d72e:	6031      	streq	r1, [r6, #0]
 803d730:	5162      	str	r2, [r4, r5]
 803d732:	604b      	str	r3, [r1, #4]
 803d734:	4638      	mov	r0, r7
 803d736:	f104 060b 	add.w	r6, r4, #11
 803d73a:	f000 fe47 	bl	803e3cc <__malloc_unlock>
 803d73e:	f026 0607 	bic.w	r6, r6, #7
 803d742:	1d23      	adds	r3, r4, #4
 803d744:	1af2      	subs	r2, r6, r3
 803d746:	d0b6      	beq.n	803d6b6 <_malloc_r+0x22>
 803d748:	1b9b      	subs	r3, r3, r6
 803d74a:	50a3      	str	r3, [r4, r2]
 803d74c:	e7b3      	b.n	803d6b6 <_malloc_r+0x22>
 803d74e:	6862      	ldr	r2, [r4, #4]
 803d750:	42a3      	cmp	r3, r4
 803d752:	bf0c      	ite	eq
 803d754:	6032      	streq	r2, [r6, #0]
 803d756:	605a      	strne	r2, [r3, #4]
 803d758:	e7ec      	b.n	803d734 <_malloc_r+0xa0>
 803d75a:	4623      	mov	r3, r4
 803d75c:	6864      	ldr	r4, [r4, #4]
 803d75e:	e7b2      	b.n	803d6c6 <_malloc_r+0x32>
 803d760:	4634      	mov	r4, r6
 803d762:	6876      	ldr	r6, [r6, #4]
 803d764:	e7b9      	b.n	803d6da <_malloc_r+0x46>
 803d766:	230c      	movs	r3, #12
 803d768:	603b      	str	r3, [r7, #0]
 803d76a:	4638      	mov	r0, r7
 803d76c:	f000 fe2e 	bl	803e3cc <__malloc_unlock>
 803d770:	e7a1      	b.n	803d6b6 <_malloc_r+0x22>
 803d772:	6025      	str	r5, [r4, #0]
 803d774:	e7de      	b.n	803d734 <_malloc_r+0xa0>
 803d776:	bf00      	nop
 803d778:	24003760 	.word	0x24003760

0803d77c <__sfputc_r>:
 803d77c:	6893      	ldr	r3, [r2, #8]
 803d77e:	3b01      	subs	r3, #1
 803d780:	2b00      	cmp	r3, #0
 803d782:	b410      	push	{r4}
 803d784:	6093      	str	r3, [r2, #8]
 803d786:	da08      	bge.n	803d79a <__sfputc_r+0x1e>
 803d788:	6994      	ldr	r4, [r2, #24]
 803d78a:	42a3      	cmp	r3, r4
 803d78c:	db01      	blt.n	803d792 <__sfputc_r+0x16>
 803d78e:	290a      	cmp	r1, #10
 803d790:	d103      	bne.n	803d79a <__sfputc_r+0x1e>
 803d792:	f85d 4b04 	ldr.w	r4, [sp], #4
 803d796:	f000 bb33 	b.w	803de00 <__swbuf_r>
 803d79a:	6813      	ldr	r3, [r2, #0]
 803d79c:	1c58      	adds	r0, r3, #1
 803d79e:	6010      	str	r0, [r2, #0]
 803d7a0:	7019      	strb	r1, [r3, #0]
 803d7a2:	4608      	mov	r0, r1
 803d7a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 803d7a8:	4770      	bx	lr

0803d7aa <__sfputs_r>:
 803d7aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803d7ac:	4606      	mov	r6, r0
 803d7ae:	460f      	mov	r7, r1
 803d7b0:	4614      	mov	r4, r2
 803d7b2:	18d5      	adds	r5, r2, r3
 803d7b4:	42ac      	cmp	r4, r5
 803d7b6:	d101      	bne.n	803d7bc <__sfputs_r+0x12>
 803d7b8:	2000      	movs	r0, #0
 803d7ba:	e007      	b.n	803d7cc <__sfputs_r+0x22>
 803d7bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d7c0:	463a      	mov	r2, r7
 803d7c2:	4630      	mov	r0, r6
 803d7c4:	f7ff ffda 	bl	803d77c <__sfputc_r>
 803d7c8:	1c43      	adds	r3, r0, #1
 803d7ca:	d1f3      	bne.n	803d7b4 <__sfputs_r+0xa>
 803d7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803d7d0 <_vfiprintf_r>:
 803d7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d7d4:	460d      	mov	r5, r1
 803d7d6:	b09d      	sub	sp, #116	; 0x74
 803d7d8:	4614      	mov	r4, r2
 803d7da:	4698      	mov	r8, r3
 803d7dc:	4606      	mov	r6, r0
 803d7de:	b118      	cbz	r0, 803d7e8 <_vfiprintf_r+0x18>
 803d7e0:	6983      	ldr	r3, [r0, #24]
 803d7e2:	b90b      	cbnz	r3, 803d7e8 <_vfiprintf_r+0x18>
 803d7e4:	f000 fce6 	bl	803e1b4 <__sinit>
 803d7e8:	4b89      	ldr	r3, [pc, #548]	; (803da10 <_vfiprintf_r+0x240>)
 803d7ea:	429d      	cmp	r5, r3
 803d7ec:	d11b      	bne.n	803d826 <_vfiprintf_r+0x56>
 803d7ee:	6875      	ldr	r5, [r6, #4]
 803d7f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803d7f2:	07d9      	lsls	r1, r3, #31
 803d7f4:	d405      	bmi.n	803d802 <_vfiprintf_r+0x32>
 803d7f6:	89ab      	ldrh	r3, [r5, #12]
 803d7f8:	059a      	lsls	r2, r3, #22
 803d7fa:	d402      	bmi.n	803d802 <_vfiprintf_r+0x32>
 803d7fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803d7fe:	f000 fd77 	bl	803e2f0 <__retarget_lock_acquire_recursive>
 803d802:	89ab      	ldrh	r3, [r5, #12]
 803d804:	071b      	lsls	r3, r3, #28
 803d806:	d501      	bpl.n	803d80c <_vfiprintf_r+0x3c>
 803d808:	692b      	ldr	r3, [r5, #16]
 803d80a:	b9eb      	cbnz	r3, 803d848 <_vfiprintf_r+0x78>
 803d80c:	4629      	mov	r1, r5
 803d80e:	4630      	mov	r0, r6
 803d810:	f000 fb48 	bl	803dea4 <__swsetup_r>
 803d814:	b1c0      	cbz	r0, 803d848 <_vfiprintf_r+0x78>
 803d816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803d818:	07dc      	lsls	r4, r3, #31
 803d81a:	d50e      	bpl.n	803d83a <_vfiprintf_r+0x6a>
 803d81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803d820:	b01d      	add	sp, #116	; 0x74
 803d822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d826:	4b7b      	ldr	r3, [pc, #492]	; (803da14 <_vfiprintf_r+0x244>)
 803d828:	429d      	cmp	r5, r3
 803d82a:	d101      	bne.n	803d830 <_vfiprintf_r+0x60>
 803d82c:	68b5      	ldr	r5, [r6, #8]
 803d82e:	e7df      	b.n	803d7f0 <_vfiprintf_r+0x20>
 803d830:	4b79      	ldr	r3, [pc, #484]	; (803da18 <_vfiprintf_r+0x248>)
 803d832:	429d      	cmp	r5, r3
 803d834:	bf08      	it	eq
 803d836:	68f5      	ldreq	r5, [r6, #12]
 803d838:	e7da      	b.n	803d7f0 <_vfiprintf_r+0x20>
 803d83a:	89ab      	ldrh	r3, [r5, #12]
 803d83c:	0598      	lsls	r0, r3, #22
 803d83e:	d4ed      	bmi.n	803d81c <_vfiprintf_r+0x4c>
 803d840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803d842:	f000 fd56 	bl	803e2f2 <__retarget_lock_release_recursive>
 803d846:	e7e9      	b.n	803d81c <_vfiprintf_r+0x4c>
 803d848:	2300      	movs	r3, #0
 803d84a:	9309      	str	r3, [sp, #36]	; 0x24
 803d84c:	2320      	movs	r3, #32
 803d84e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803d852:	f8cd 800c 	str.w	r8, [sp, #12]
 803d856:	2330      	movs	r3, #48	; 0x30
 803d858:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803da1c <_vfiprintf_r+0x24c>
 803d85c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803d860:	f04f 0901 	mov.w	r9, #1
 803d864:	4623      	mov	r3, r4
 803d866:	469a      	mov	sl, r3
 803d868:	f813 2b01 	ldrb.w	r2, [r3], #1
 803d86c:	b10a      	cbz	r2, 803d872 <_vfiprintf_r+0xa2>
 803d86e:	2a25      	cmp	r2, #37	; 0x25
 803d870:	d1f9      	bne.n	803d866 <_vfiprintf_r+0x96>
 803d872:	ebba 0b04 	subs.w	fp, sl, r4
 803d876:	d00b      	beq.n	803d890 <_vfiprintf_r+0xc0>
 803d878:	465b      	mov	r3, fp
 803d87a:	4622      	mov	r2, r4
 803d87c:	4629      	mov	r1, r5
 803d87e:	4630      	mov	r0, r6
 803d880:	f7ff ff93 	bl	803d7aa <__sfputs_r>
 803d884:	3001      	adds	r0, #1
 803d886:	f000 80aa 	beq.w	803d9de <_vfiprintf_r+0x20e>
 803d88a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803d88c:	445a      	add	r2, fp
 803d88e:	9209      	str	r2, [sp, #36]	; 0x24
 803d890:	f89a 3000 	ldrb.w	r3, [sl]
 803d894:	2b00      	cmp	r3, #0
 803d896:	f000 80a2 	beq.w	803d9de <_vfiprintf_r+0x20e>
 803d89a:	2300      	movs	r3, #0
 803d89c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803d8a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803d8a4:	f10a 0a01 	add.w	sl, sl, #1
 803d8a8:	9304      	str	r3, [sp, #16]
 803d8aa:	9307      	str	r3, [sp, #28]
 803d8ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803d8b0:	931a      	str	r3, [sp, #104]	; 0x68
 803d8b2:	4654      	mov	r4, sl
 803d8b4:	2205      	movs	r2, #5
 803d8b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d8ba:	4858      	ldr	r0, [pc, #352]	; (803da1c <_vfiprintf_r+0x24c>)
 803d8bc:	f7e2 fd10 	bl	80202e0 <memchr>
 803d8c0:	9a04      	ldr	r2, [sp, #16]
 803d8c2:	b9d8      	cbnz	r0, 803d8fc <_vfiprintf_r+0x12c>
 803d8c4:	06d1      	lsls	r1, r2, #27
 803d8c6:	bf44      	itt	mi
 803d8c8:	2320      	movmi	r3, #32
 803d8ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803d8ce:	0713      	lsls	r3, r2, #28
 803d8d0:	bf44      	itt	mi
 803d8d2:	232b      	movmi	r3, #43	; 0x2b
 803d8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803d8d8:	f89a 3000 	ldrb.w	r3, [sl]
 803d8dc:	2b2a      	cmp	r3, #42	; 0x2a
 803d8de:	d015      	beq.n	803d90c <_vfiprintf_r+0x13c>
 803d8e0:	9a07      	ldr	r2, [sp, #28]
 803d8e2:	4654      	mov	r4, sl
 803d8e4:	2000      	movs	r0, #0
 803d8e6:	f04f 0c0a 	mov.w	ip, #10
 803d8ea:	4621      	mov	r1, r4
 803d8ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 803d8f0:	3b30      	subs	r3, #48	; 0x30
 803d8f2:	2b09      	cmp	r3, #9
 803d8f4:	d94e      	bls.n	803d994 <_vfiprintf_r+0x1c4>
 803d8f6:	b1b0      	cbz	r0, 803d926 <_vfiprintf_r+0x156>
 803d8f8:	9207      	str	r2, [sp, #28]
 803d8fa:	e014      	b.n	803d926 <_vfiprintf_r+0x156>
 803d8fc:	eba0 0308 	sub.w	r3, r0, r8
 803d900:	fa09 f303 	lsl.w	r3, r9, r3
 803d904:	4313      	orrs	r3, r2
 803d906:	9304      	str	r3, [sp, #16]
 803d908:	46a2      	mov	sl, r4
 803d90a:	e7d2      	b.n	803d8b2 <_vfiprintf_r+0xe2>
 803d90c:	9b03      	ldr	r3, [sp, #12]
 803d90e:	1d19      	adds	r1, r3, #4
 803d910:	681b      	ldr	r3, [r3, #0]
 803d912:	9103      	str	r1, [sp, #12]
 803d914:	2b00      	cmp	r3, #0
 803d916:	bfbb      	ittet	lt
 803d918:	425b      	neglt	r3, r3
 803d91a:	f042 0202 	orrlt.w	r2, r2, #2
 803d91e:	9307      	strge	r3, [sp, #28]
 803d920:	9307      	strlt	r3, [sp, #28]
 803d922:	bfb8      	it	lt
 803d924:	9204      	strlt	r2, [sp, #16]
 803d926:	7823      	ldrb	r3, [r4, #0]
 803d928:	2b2e      	cmp	r3, #46	; 0x2e
 803d92a:	d10c      	bne.n	803d946 <_vfiprintf_r+0x176>
 803d92c:	7863      	ldrb	r3, [r4, #1]
 803d92e:	2b2a      	cmp	r3, #42	; 0x2a
 803d930:	d135      	bne.n	803d99e <_vfiprintf_r+0x1ce>
 803d932:	9b03      	ldr	r3, [sp, #12]
 803d934:	1d1a      	adds	r2, r3, #4
 803d936:	681b      	ldr	r3, [r3, #0]
 803d938:	9203      	str	r2, [sp, #12]
 803d93a:	2b00      	cmp	r3, #0
 803d93c:	bfb8      	it	lt
 803d93e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803d942:	3402      	adds	r4, #2
 803d944:	9305      	str	r3, [sp, #20]
 803d946:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803da2c <_vfiprintf_r+0x25c>
 803d94a:	7821      	ldrb	r1, [r4, #0]
 803d94c:	2203      	movs	r2, #3
 803d94e:	4650      	mov	r0, sl
 803d950:	f7e2 fcc6 	bl	80202e0 <memchr>
 803d954:	b140      	cbz	r0, 803d968 <_vfiprintf_r+0x198>
 803d956:	2340      	movs	r3, #64	; 0x40
 803d958:	eba0 000a 	sub.w	r0, r0, sl
 803d95c:	fa03 f000 	lsl.w	r0, r3, r0
 803d960:	9b04      	ldr	r3, [sp, #16]
 803d962:	4303      	orrs	r3, r0
 803d964:	3401      	adds	r4, #1
 803d966:	9304      	str	r3, [sp, #16]
 803d968:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d96c:	482c      	ldr	r0, [pc, #176]	; (803da20 <_vfiprintf_r+0x250>)
 803d96e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803d972:	2206      	movs	r2, #6
 803d974:	f7e2 fcb4 	bl	80202e0 <memchr>
 803d978:	2800      	cmp	r0, #0
 803d97a:	d03f      	beq.n	803d9fc <_vfiprintf_r+0x22c>
 803d97c:	4b29      	ldr	r3, [pc, #164]	; (803da24 <_vfiprintf_r+0x254>)
 803d97e:	bb1b      	cbnz	r3, 803d9c8 <_vfiprintf_r+0x1f8>
 803d980:	9b03      	ldr	r3, [sp, #12]
 803d982:	3307      	adds	r3, #7
 803d984:	f023 0307 	bic.w	r3, r3, #7
 803d988:	3308      	adds	r3, #8
 803d98a:	9303      	str	r3, [sp, #12]
 803d98c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803d98e:	443b      	add	r3, r7
 803d990:	9309      	str	r3, [sp, #36]	; 0x24
 803d992:	e767      	b.n	803d864 <_vfiprintf_r+0x94>
 803d994:	fb0c 3202 	mla	r2, ip, r2, r3
 803d998:	460c      	mov	r4, r1
 803d99a:	2001      	movs	r0, #1
 803d99c:	e7a5      	b.n	803d8ea <_vfiprintf_r+0x11a>
 803d99e:	2300      	movs	r3, #0
 803d9a0:	3401      	adds	r4, #1
 803d9a2:	9305      	str	r3, [sp, #20]
 803d9a4:	4619      	mov	r1, r3
 803d9a6:	f04f 0c0a 	mov.w	ip, #10
 803d9aa:	4620      	mov	r0, r4
 803d9ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 803d9b0:	3a30      	subs	r2, #48	; 0x30
 803d9b2:	2a09      	cmp	r2, #9
 803d9b4:	d903      	bls.n	803d9be <_vfiprintf_r+0x1ee>
 803d9b6:	2b00      	cmp	r3, #0
 803d9b8:	d0c5      	beq.n	803d946 <_vfiprintf_r+0x176>
 803d9ba:	9105      	str	r1, [sp, #20]
 803d9bc:	e7c3      	b.n	803d946 <_vfiprintf_r+0x176>
 803d9be:	fb0c 2101 	mla	r1, ip, r1, r2
 803d9c2:	4604      	mov	r4, r0
 803d9c4:	2301      	movs	r3, #1
 803d9c6:	e7f0      	b.n	803d9aa <_vfiprintf_r+0x1da>
 803d9c8:	ab03      	add	r3, sp, #12
 803d9ca:	9300      	str	r3, [sp, #0]
 803d9cc:	462a      	mov	r2, r5
 803d9ce:	4b16      	ldr	r3, [pc, #88]	; (803da28 <_vfiprintf_r+0x258>)
 803d9d0:	a904      	add	r1, sp, #16
 803d9d2:	4630      	mov	r0, r6
 803d9d4:	f3af 8000 	nop.w
 803d9d8:	4607      	mov	r7, r0
 803d9da:	1c78      	adds	r0, r7, #1
 803d9dc:	d1d6      	bne.n	803d98c <_vfiprintf_r+0x1bc>
 803d9de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803d9e0:	07d9      	lsls	r1, r3, #31
 803d9e2:	d405      	bmi.n	803d9f0 <_vfiprintf_r+0x220>
 803d9e4:	89ab      	ldrh	r3, [r5, #12]
 803d9e6:	059a      	lsls	r2, r3, #22
 803d9e8:	d402      	bmi.n	803d9f0 <_vfiprintf_r+0x220>
 803d9ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803d9ec:	f000 fc81 	bl	803e2f2 <__retarget_lock_release_recursive>
 803d9f0:	89ab      	ldrh	r3, [r5, #12]
 803d9f2:	065b      	lsls	r3, r3, #25
 803d9f4:	f53f af12 	bmi.w	803d81c <_vfiprintf_r+0x4c>
 803d9f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 803d9fa:	e711      	b.n	803d820 <_vfiprintf_r+0x50>
 803d9fc:	ab03      	add	r3, sp, #12
 803d9fe:	9300      	str	r3, [sp, #0]
 803da00:	462a      	mov	r2, r5
 803da02:	4b09      	ldr	r3, [pc, #36]	; (803da28 <_vfiprintf_r+0x258>)
 803da04:	a904      	add	r1, sp, #16
 803da06:	4630      	mov	r0, r6
 803da08:	f000 f880 	bl	803db0c <_printf_i>
 803da0c:	e7e4      	b.n	803d9d8 <_vfiprintf_r+0x208>
 803da0e:	bf00      	nop
 803da10:	0805963c 	.word	0x0805963c
 803da14:	0805965c 	.word	0x0805965c
 803da18:	0805961c 	.word	0x0805961c
 803da1c:	080595e8 	.word	0x080595e8
 803da20:	080595f2 	.word	0x080595f2
 803da24:	00000000 	.word	0x00000000
 803da28:	0803d7ab 	.word	0x0803d7ab
 803da2c:	080595ee 	.word	0x080595ee

0803da30 <_printf_common>:
 803da30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803da34:	4616      	mov	r6, r2
 803da36:	4699      	mov	r9, r3
 803da38:	688a      	ldr	r2, [r1, #8]
 803da3a:	690b      	ldr	r3, [r1, #16]
 803da3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803da40:	4293      	cmp	r3, r2
 803da42:	bfb8      	it	lt
 803da44:	4613      	movlt	r3, r2
 803da46:	6033      	str	r3, [r6, #0]
 803da48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803da4c:	4607      	mov	r7, r0
 803da4e:	460c      	mov	r4, r1
 803da50:	b10a      	cbz	r2, 803da56 <_printf_common+0x26>
 803da52:	3301      	adds	r3, #1
 803da54:	6033      	str	r3, [r6, #0]
 803da56:	6823      	ldr	r3, [r4, #0]
 803da58:	0699      	lsls	r1, r3, #26
 803da5a:	bf42      	ittt	mi
 803da5c:	6833      	ldrmi	r3, [r6, #0]
 803da5e:	3302      	addmi	r3, #2
 803da60:	6033      	strmi	r3, [r6, #0]
 803da62:	6825      	ldr	r5, [r4, #0]
 803da64:	f015 0506 	ands.w	r5, r5, #6
 803da68:	d106      	bne.n	803da78 <_printf_common+0x48>
 803da6a:	f104 0a19 	add.w	sl, r4, #25
 803da6e:	68e3      	ldr	r3, [r4, #12]
 803da70:	6832      	ldr	r2, [r6, #0]
 803da72:	1a9b      	subs	r3, r3, r2
 803da74:	42ab      	cmp	r3, r5
 803da76:	dc26      	bgt.n	803dac6 <_printf_common+0x96>
 803da78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803da7c:	1e13      	subs	r3, r2, #0
 803da7e:	6822      	ldr	r2, [r4, #0]
 803da80:	bf18      	it	ne
 803da82:	2301      	movne	r3, #1
 803da84:	0692      	lsls	r2, r2, #26
 803da86:	d42b      	bmi.n	803dae0 <_printf_common+0xb0>
 803da88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803da8c:	4649      	mov	r1, r9
 803da8e:	4638      	mov	r0, r7
 803da90:	47c0      	blx	r8
 803da92:	3001      	adds	r0, #1
 803da94:	d01e      	beq.n	803dad4 <_printf_common+0xa4>
 803da96:	6823      	ldr	r3, [r4, #0]
 803da98:	68e5      	ldr	r5, [r4, #12]
 803da9a:	6832      	ldr	r2, [r6, #0]
 803da9c:	f003 0306 	and.w	r3, r3, #6
 803daa0:	2b04      	cmp	r3, #4
 803daa2:	bf08      	it	eq
 803daa4:	1aad      	subeq	r5, r5, r2
 803daa6:	68a3      	ldr	r3, [r4, #8]
 803daa8:	6922      	ldr	r2, [r4, #16]
 803daaa:	bf0c      	ite	eq
 803daac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803dab0:	2500      	movne	r5, #0
 803dab2:	4293      	cmp	r3, r2
 803dab4:	bfc4      	itt	gt
 803dab6:	1a9b      	subgt	r3, r3, r2
 803dab8:	18ed      	addgt	r5, r5, r3
 803daba:	2600      	movs	r6, #0
 803dabc:	341a      	adds	r4, #26
 803dabe:	42b5      	cmp	r5, r6
 803dac0:	d11a      	bne.n	803daf8 <_printf_common+0xc8>
 803dac2:	2000      	movs	r0, #0
 803dac4:	e008      	b.n	803dad8 <_printf_common+0xa8>
 803dac6:	2301      	movs	r3, #1
 803dac8:	4652      	mov	r2, sl
 803daca:	4649      	mov	r1, r9
 803dacc:	4638      	mov	r0, r7
 803dace:	47c0      	blx	r8
 803dad0:	3001      	adds	r0, #1
 803dad2:	d103      	bne.n	803dadc <_printf_common+0xac>
 803dad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803dad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803dadc:	3501      	adds	r5, #1
 803dade:	e7c6      	b.n	803da6e <_printf_common+0x3e>
 803dae0:	18e1      	adds	r1, r4, r3
 803dae2:	1c5a      	adds	r2, r3, #1
 803dae4:	2030      	movs	r0, #48	; 0x30
 803dae6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803daea:	4422      	add	r2, r4
 803daec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803daf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803daf4:	3302      	adds	r3, #2
 803daf6:	e7c7      	b.n	803da88 <_printf_common+0x58>
 803daf8:	2301      	movs	r3, #1
 803dafa:	4622      	mov	r2, r4
 803dafc:	4649      	mov	r1, r9
 803dafe:	4638      	mov	r0, r7
 803db00:	47c0      	blx	r8
 803db02:	3001      	adds	r0, #1
 803db04:	d0e6      	beq.n	803dad4 <_printf_common+0xa4>
 803db06:	3601      	adds	r6, #1
 803db08:	e7d9      	b.n	803dabe <_printf_common+0x8e>
	...

0803db0c <_printf_i>:
 803db0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803db10:	7e0f      	ldrb	r7, [r1, #24]
 803db12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803db14:	2f78      	cmp	r7, #120	; 0x78
 803db16:	4691      	mov	r9, r2
 803db18:	4680      	mov	r8, r0
 803db1a:	460c      	mov	r4, r1
 803db1c:	469a      	mov	sl, r3
 803db1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803db22:	d807      	bhi.n	803db34 <_printf_i+0x28>
 803db24:	2f62      	cmp	r7, #98	; 0x62
 803db26:	d80a      	bhi.n	803db3e <_printf_i+0x32>
 803db28:	2f00      	cmp	r7, #0
 803db2a:	f000 80d8 	beq.w	803dcde <_printf_i+0x1d2>
 803db2e:	2f58      	cmp	r7, #88	; 0x58
 803db30:	f000 80a3 	beq.w	803dc7a <_printf_i+0x16e>
 803db34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803db38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803db3c:	e03a      	b.n	803dbb4 <_printf_i+0xa8>
 803db3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803db42:	2b15      	cmp	r3, #21
 803db44:	d8f6      	bhi.n	803db34 <_printf_i+0x28>
 803db46:	a101      	add	r1, pc, #4	; (adr r1, 803db4c <_printf_i+0x40>)
 803db48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803db4c:	0803dba5 	.word	0x0803dba5
 803db50:	0803dbb9 	.word	0x0803dbb9
 803db54:	0803db35 	.word	0x0803db35
 803db58:	0803db35 	.word	0x0803db35
 803db5c:	0803db35 	.word	0x0803db35
 803db60:	0803db35 	.word	0x0803db35
 803db64:	0803dbb9 	.word	0x0803dbb9
 803db68:	0803db35 	.word	0x0803db35
 803db6c:	0803db35 	.word	0x0803db35
 803db70:	0803db35 	.word	0x0803db35
 803db74:	0803db35 	.word	0x0803db35
 803db78:	0803dcc5 	.word	0x0803dcc5
 803db7c:	0803dbe9 	.word	0x0803dbe9
 803db80:	0803dca7 	.word	0x0803dca7
 803db84:	0803db35 	.word	0x0803db35
 803db88:	0803db35 	.word	0x0803db35
 803db8c:	0803dce7 	.word	0x0803dce7
 803db90:	0803db35 	.word	0x0803db35
 803db94:	0803dbe9 	.word	0x0803dbe9
 803db98:	0803db35 	.word	0x0803db35
 803db9c:	0803db35 	.word	0x0803db35
 803dba0:	0803dcaf 	.word	0x0803dcaf
 803dba4:	682b      	ldr	r3, [r5, #0]
 803dba6:	1d1a      	adds	r2, r3, #4
 803dba8:	681b      	ldr	r3, [r3, #0]
 803dbaa:	602a      	str	r2, [r5, #0]
 803dbac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803dbb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803dbb4:	2301      	movs	r3, #1
 803dbb6:	e0a3      	b.n	803dd00 <_printf_i+0x1f4>
 803dbb8:	6820      	ldr	r0, [r4, #0]
 803dbba:	6829      	ldr	r1, [r5, #0]
 803dbbc:	0606      	lsls	r6, r0, #24
 803dbbe:	f101 0304 	add.w	r3, r1, #4
 803dbc2:	d50a      	bpl.n	803dbda <_printf_i+0xce>
 803dbc4:	680e      	ldr	r6, [r1, #0]
 803dbc6:	602b      	str	r3, [r5, #0]
 803dbc8:	2e00      	cmp	r6, #0
 803dbca:	da03      	bge.n	803dbd4 <_printf_i+0xc8>
 803dbcc:	232d      	movs	r3, #45	; 0x2d
 803dbce:	4276      	negs	r6, r6
 803dbd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803dbd4:	485e      	ldr	r0, [pc, #376]	; (803dd50 <_printf_i+0x244>)
 803dbd6:	230a      	movs	r3, #10
 803dbd8:	e019      	b.n	803dc0e <_printf_i+0x102>
 803dbda:	680e      	ldr	r6, [r1, #0]
 803dbdc:	602b      	str	r3, [r5, #0]
 803dbde:	f010 0f40 	tst.w	r0, #64	; 0x40
 803dbe2:	bf18      	it	ne
 803dbe4:	b236      	sxthne	r6, r6
 803dbe6:	e7ef      	b.n	803dbc8 <_printf_i+0xbc>
 803dbe8:	682b      	ldr	r3, [r5, #0]
 803dbea:	6820      	ldr	r0, [r4, #0]
 803dbec:	1d19      	adds	r1, r3, #4
 803dbee:	6029      	str	r1, [r5, #0]
 803dbf0:	0601      	lsls	r1, r0, #24
 803dbf2:	d501      	bpl.n	803dbf8 <_printf_i+0xec>
 803dbf4:	681e      	ldr	r6, [r3, #0]
 803dbf6:	e002      	b.n	803dbfe <_printf_i+0xf2>
 803dbf8:	0646      	lsls	r6, r0, #25
 803dbfa:	d5fb      	bpl.n	803dbf4 <_printf_i+0xe8>
 803dbfc:	881e      	ldrh	r6, [r3, #0]
 803dbfe:	4854      	ldr	r0, [pc, #336]	; (803dd50 <_printf_i+0x244>)
 803dc00:	2f6f      	cmp	r7, #111	; 0x6f
 803dc02:	bf0c      	ite	eq
 803dc04:	2308      	moveq	r3, #8
 803dc06:	230a      	movne	r3, #10
 803dc08:	2100      	movs	r1, #0
 803dc0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803dc0e:	6865      	ldr	r5, [r4, #4]
 803dc10:	60a5      	str	r5, [r4, #8]
 803dc12:	2d00      	cmp	r5, #0
 803dc14:	bfa2      	ittt	ge
 803dc16:	6821      	ldrge	r1, [r4, #0]
 803dc18:	f021 0104 	bicge.w	r1, r1, #4
 803dc1c:	6021      	strge	r1, [r4, #0]
 803dc1e:	b90e      	cbnz	r6, 803dc24 <_printf_i+0x118>
 803dc20:	2d00      	cmp	r5, #0
 803dc22:	d04d      	beq.n	803dcc0 <_printf_i+0x1b4>
 803dc24:	4615      	mov	r5, r2
 803dc26:	fbb6 f1f3 	udiv	r1, r6, r3
 803dc2a:	fb03 6711 	mls	r7, r3, r1, r6
 803dc2e:	5dc7      	ldrb	r7, [r0, r7]
 803dc30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803dc34:	4637      	mov	r7, r6
 803dc36:	42bb      	cmp	r3, r7
 803dc38:	460e      	mov	r6, r1
 803dc3a:	d9f4      	bls.n	803dc26 <_printf_i+0x11a>
 803dc3c:	2b08      	cmp	r3, #8
 803dc3e:	d10b      	bne.n	803dc58 <_printf_i+0x14c>
 803dc40:	6823      	ldr	r3, [r4, #0]
 803dc42:	07de      	lsls	r6, r3, #31
 803dc44:	d508      	bpl.n	803dc58 <_printf_i+0x14c>
 803dc46:	6923      	ldr	r3, [r4, #16]
 803dc48:	6861      	ldr	r1, [r4, #4]
 803dc4a:	4299      	cmp	r1, r3
 803dc4c:	bfde      	ittt	le
 803dc4e:	2330      	movle	r3, #48	; 0x30
 803dc50:	f805 3c01 	strble.w	r3, [r5, #-1]
 803dc54:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 803dc58:	1b52      	subs	r2, r2, r5
 803dc5a:	6122      	str	r2, [r4, #16]
 803dc5c:	f8cd a000 	str.w	sl, [sp]
 803dc60:	464b      	mov	r3, r9
 803dc62:	aa03      	add	r2, sp, #12
 803dc64:	4621      	mov	r1, r4
 803dc66:	4640      	mov	r0, r8
 803dc68:	f7ff fee2 	bl	803da30 <_printf_common>
 803dc6c:	3001      	adds	r0, #1
 803dc6e:	d14c      	bne.n	803dd0a <_printf_i+0x1fe>
 803dc70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803dc74:	b004      	add	sp, #16
 803dc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803dc7a:	4835      	ldr	r0, [pc, #212]	; (803dd50 <_printf_i+0x244>)
 803dc7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 803dc80:	6829      	ldr	r1, [r5, #0]
 803dc82:	6823      	ldr	r3, [r4, #0]
 803dc84:	f851 6b04 	ldr.w	r6, [r1], #4
 803dc88:	6029      	str	r1, [r5, #0]
 803dc8a:	061d      	lsls	r5, r3, #24
 803dc8c:	d514      	bpl.n	803dcb8 <_printf_i+0x1ac>
 803dc8e:	07df      	lsls	r7, r3, #31
 803dc90:	bf44      	itt	mi
 803dc92:	f043 0320 	orrmi.w	r3, r3, #32
 803dc96:	6023      	strmi	r3, [r4, #0]
 803dc98:	b91e      	cbnz	r6, 803dca2 <_printf_i+0x196>
 803dc9a:	6823      	ldr	r3, [r4, #0]
 803dc9c:	f023 0320 	bic.w	r3, r3, #32
 803dca0:	6023      	str	r3, [r4, #0]
 803dca2:	2310      	movs	r3, #16
 803dca4:	e7b0      	b.n	803dc08 <_printf_i+0xfc>
 803dca6:	6823      	ldr	r3, [r4, #0]
 803dca8:	f043 0320 	orr.w	r3, r3, #32
 803dcac:	6023      	str	r3, [r4, #0]
 803dcae:	2378      	movs	r3, #120	; 0x78
 803dcb0:	4828      	ldr	r0, [pc, #160]	; (803dd54 <_printf_i+0x248>)
 803dcb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803dcb6:	e7e3      	b.n	803dc80 <_printf_i+0x174>
 803dcb8:	0659      	lsls	r1, r3, #25
 803dcba:	bf48      	it	mi
 803dcbc:	b2b6      	uxthmi	r6, r6
 803dcbe:	e7e6      	b.n	803dc8e <_printf_i+0x182>
 803dcc0:	4615      	mov	r5, r2
 803dcc2:	e7bb      	b.n	803dc3c <_printf_i+0x130>
 803dcc4:	682b      	ldr	r3, [r5, #0]
 803dcc6:	6826      	ldr	r6, [r4, #0]
 803dcc8:	6961      	ldr	r1, [r4, #20]
 803dcca:	1d18      	adds	r0, r3, #4
 803dccc:	6028      	str	r0, [r5, #0]
 803dcce:	0635      	lsls	r5, r6, #24
 803dcd0:	681b      	ldr	r3, [r3, #0]
 803dcd2:	d501      	bpl.n	803dcd8 <_printf_i+0x1cc>
 803dcd4:	6019      	str	r1, [r3, #0]
 803dcd6:	e002      	b.n	803dcde <_printf_i+0x1d2>
 803dcd8:	0670      	lsls	r0, r6, #25
 803dcda:	d5fb      	bpl.n	803dcd4 <_printf_i+0x1c8>
 803dcdc:	8019      	strh	r1, [r3, #0]
 803dcde:	2300      	movs	r3, #0
 803dce0:	6123      	str	r3, [r4, #16]
 803dce2:	4615      	mov	r5, r2
 803dce4:	e7ba      	b.n	803dc5c <_printf_i+0x150>
 803dce6:	682b      	ldr	r3, [r5, #0]
 803dce8:	1d1a      	adds	r2, r3, #4
 803dcea:	602a      	str	r2, [r5, #0]
 803dcec:	681d      	ldr	r5, [r3, #0]
 803dcee:	6862      	ldr	r2, [r4, #4]
 803dcf0:	2100      	movs	r1, #0
 803dcf2:	4628      	mov	r0, r5
 803dcf4:	f7e2 faf4 	bl	80202e0 <memchr>
 803dcf8:	b108      	cbz	r0, 803dcfe <_printf_i+0x1f2>
 803dcfa:	1b40      	subs	r0, r0, r5
 803dcfc:	6060      	str	r0, [r4, #4]
 803dcfe:	6863      	ldr	r3, [r4, #4]
 803dd00:	6123      	str	r3, [r4, #16]
 803dd02:	2300      	movs	r3, #0
 803dd04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803dd08:	e7a8      	b.n	803dc5c <_printf_i+0x150>
 803dd0a:	6923      	ldr	r3, [r4, #16]
 803dd0c:	462a      	mov	r2, r5
 803dd0e:	4649      	mov	r1, r9
 803dd10:	4640      	mov	r0, r8
 803dd12:	47d0      	blx	sl
 803dd14:	3001      	adds	r0, #1
 803dd16:	d0ab      	beq.n	803dc70 <_printf_i+0x164>
 803dd18:	6823      	ldr	r3, [r4, #0]
 803dd1a:	079b      	lsls	r3, r3, #30
 803dd1c:	d413      	bmi.n	803dd46 <_printf_i+0x23a>
 803dd1e:	68e0      	ldr	r0, [r4, #12]
 803dd20:	9b03      	ldr	r3, [sp, #12]
 803dd22:	4298      	cmp	r0, r3
 803dd24:	bfb8      	it	lt
 803dd26:	4618      	movlt	r0, r3
 803dd28:	e7a4      	b.n	803dc74 <_printf_i+0x168>
 803dd2a:	2301      	movs	r3, #1
 803dd2c:	4632      	mov	r2, r6
 803dd2e:	4649      	mov	r1, r9
 803dd30:	4640      	mov	r0, r8
 803dd32:	47d0      	blx	sl
 803dd34:	3001      	adds	r0, #1
 803dd36:	d09b      	beq.n	803dc70 <_printf_i+0x164>
 803dd38:	3501      	adds	r5, #1
 803dd3a:	68e3      	ldr	r3, [r4, #12]
 803dd3c:	9903      	ldr	r1, [sp, #12]
 803dd3e:	1a5b      	subs	r3, r3, r1
 803dd40:	42ab      	cmp	r3, r5
 803dd42:	dcf2      	bgt.n	803dd2a <_printf_i+0x21e>
 803dd44:	e7eb      	b.n	803dd1e <_printf_i+0x212>
 803dd46:	2500      	movs	r5, #0
 803dd48:	f104 0619 	add.w	r6, r4, #25
 803dd4c:	e7f5      	b.n	803dd3a <_printf_i+0x22e>
 803dd4e:	bf00      	nop
 803dd50:	080595f9 	.word	0x080595f9
 803dd54:	0805960a 	.word	0x0805960a

0803dd58 <_sbrk_r>:
 803dd58:	b538      	push	{r3, r4, r5, lr}
 803dd5a:	4d06      	ldr	r5, [pc, #24]	; (803dd74 <_sbrk_r+0x1c>)
 803dd5c:	2300      	movs	r3, #0
 803dd5e:	4604      	mov	r4, r0
 803dd60:	4608      	mov	r0, r1
 803dd62:	602b      	str	r3, [r5, #0]
 803dd64:	f7ed fd16 	bl	802b794 <_sbrk>
 803dd68:	1c43      	adds	r3, r0, #1
 803dd6a:	d102      	bne.n	803dd72 <_sbrk_r+0x1a>
 803dd6c:	682b      	ldr	r3, [r5, #0]
 803dd6e:	b103      	cbz	r3, 803dd72 <_sbrk_r+0x1a>
 803dd70:	6023      	str	r3, [r4, #0]
 803dd72:	bd38      	pop	{r3, r4, r5, pc}
 803dd74:	2400376c 	.word	0x2400376c

0803dd78 <_raise_r>:
 803dd78:	291f      	cmp	r1, #31
 803dd7a:	b538      	push	{r3, r4, r5, lr}
 803dd7c:	4604      	mov	r4, r0
 803dd7e:	460d      	mov	r5, r1
 803dd80:	d904      	bls.n	803dd8c <_raise_r+0x14>
 803dd82:	2316      	movs	r3, #22
 803dd84:	6003      	str	r3, [r0, #0]
 803dd86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803dd8a:	bd38      	pop	{r3, r4, r5, pc}
 803dd8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803dd8e:	b112      	cbz	r2, 803dd96 <_raise_r+0x1e>
 803dd90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803dd94:	b94b      	cbnz	r3, 803ddaa <_raise_r+0x32>
 803dd96:	4620      	mov	r0, r4
 803dd98:	f000 f830 	bl	803ddfc <_getpid_r>
 803dd9c:	462a      	mov	r2, r5
 803dd9e:	4601      	mov	r1, r0
 803dda0:	4620      	mov	r0, r4
 803dda2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803dda6:	f000 b817 	b.w	803ddd8 <_kill_r>
 803ddaa:	2b01      	cmp	r3, #1
 803ddac:	d00a      	beq.n	803ddc4 <_raise_r+0x4c>
 803ddae:	1c59      	adds	r1, r3, #1
 803ddb0:	d103      	bne.n	803ddba <_raise_r+0x42>
 803ddb2:	2316      	movs	r3, #22
 803ddb4:	6003      	str	r3, [r0, #0]
 803ddb6:	2001      	movs	r0, #1
 803ddb8:	e7e7      	b.n	803dd8a <_raise_r+0x12>
 803ddba:	2400      	movs	r4, #0
 803ddbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803ddc0:	4628      	mov	r0, r5
 803ddc2:	4798      	blx	r3
 803ddc4:	2000      	movs	r0, #0
 803ddc6:	e7e0      	b.n	803dd8a <_raise_r+0x12>

0803ddc8 <raise>:
 803ddc8:	4b02      	ldr	r3, [pc, #8]	; (803ddd4 <raise+0xc>)
 803ddca:	4601      	mov	r1, r0
 803ddcc:	6818      	ldr	r0, [r3, #0]
 803ddce:	f7ff bfd3 	b.w	803dd78 <_raise_r>
 803ddd2:	bf00      	nop
 803ddd4:	24000100 	.word	0x24000100

0803ddd8 <_kill_r>:
 803ddd8:	b538      	push	{r3, r4, r5, lr}
 803ddda:	4d07      	ldr	r5, [pc, #28]	; (803ddf8 <_kill_r+0x20>)
 803dddc:	2300      	movs	r3, #0
 803ddde:	4604      	mov	r4, r0
 803dde0:	4608      	mov	r0, r1
 803dde2:	4611      	mov	r1, r2
 803dde4:	602b      	str	r3, [r5, #0]
 803dde6:	f7ed fc4d 	bl	802b684 <_kill>
 803ddea:	1c43      	adds	r3, r0, #1
 803ddec:	d102      	bne.n	803ddf4 <_kill_r+0x1c>
 803ddee:	682b      	ldr	r3, [r5, #0]
 803ddf0:	b103      	cbz	r3, 803ddf4 <_kill_r+0x1c>
 803ddf2:	6023      	str	r3, [r4, #0]
 803ddf4:	bd38      	pop	{r3, r4, r5, pc}
 803ddf6:	bf00      	nop
 803ddf8:	2400376c 	.word	0x2400376c

0803ddfc <_getpid_r>:
 803ddfc:	f7ed bc3a 	b.w	802b674 <_getpid>

0803de00 <__swbuf_r>:
 803de00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803de02:	460e      	mov	r6, r1
 803de04:	4614      	mov	r4, r2
 803de06:	4605      	mov	r5, r0
 803de08:	b118      	cbz	r0, 803de12 <__swbuf_r+0x12>
 803de0a:	6983      	ldr	r3, [r0, #24]
 803de0c:	b90b      	cbnz	r3, 803de12 <__swbuf_r+0x12>
 803de0e:	f000 f9d1 	bl	803e1b4 <__sinit>
 803de12:	4b21      	ldr	r3, [pc, #132]	; (803de98 <__swbuf_r+0x98>)
 803de14:	429c      	cmp	r4, r3
 803de16:	d12b      	bne.n	803de70 <__swbuf_r+0x70>
 803de18:	686c      	ldr	r4, [r5, #4]
 803de1a:	69a3      	ldr	r3, [r4, #24]
 803de1c:	60a3      	str	r3, [r4, #8]
 803de1e:	89a3      	ldrh	r3, [r4, #12]
 803de20:	071a      	lsls	r2, r3, #28
 803de22:	d52f      	bpl.n	803de84 <__swbuf_r+0x84>
 803de24:	6923      	ldr	r3, [r4, #16]
 803de26:	b36b      	cbz	r3, 803de84 <__swbuf_r+0x84>
 803de28:	6923      	ldr	r3, [r4, #16]
 803de2a:	6820      	ldr	r0, [r4, #0]
 803de2c:	1ac0      	subs	r0, r0, r3
 803de2e:	6963      	ldr	r3, [r4, #20]
 803de30:	b2f6      	uxtb	r6, r6
 803de32:	4283      	cmp	r3, r0
 803de34:	4637      	mov	r7, r6
 803de36:	dc04      	bgt.n	803de42 <__swbuf_r+0x42>
 803de38:	4621      	mov	r1, r4
 803de3a:	4628      	mov	r0, r5
 803de3c:	f000 f926 	bl	803e08c <_fflush_r>
 803de40:	bb30      	cbnz	r0, 803de90 <__swbuf_r+0x90>
 803de42:	68a3      	ldr	r3, [r4, #8]
 803de44:	3b01      	subs	r3, #1
 803de46:	60a3      	str	r3, [r4, #8]
 803de48:	6823      	ldr	r3, [r4, #0]
 803de4a:	1c5a      	adds	r2, r3, #1
 803de4c:	6022      	str	r2, [r4, #0]
 803de4e:	701e      	strb	r6, [r3, #0]
 803de50:	6963      	ldr	r3, [r4, #20]
 803de52:	3001      	adds	r0, #1
 803de54:	4283      	cmp	r3, r0
 803de56:	d004      	beq.n	803de62 <__swbuf_r+0x62>
 803de58:	89a3      	ldrh	r3, [r4, #12]
 803de5a:	07db      	lsls	r3, r3, #31
 803de5c:	d506      	bpl.n	803de6c <__swbuf_r+0x6c>
 803de5e:	2e0a      	cmp	r6, #10
 803de60:	d104      	bne.n	803de6c <__swbuf_r+0x6c>
 803de62:	4621      	mov	r1, r4
 803de64:	4628      	mov	r0, r5
 803de66:	f000 f911 	bl	803e08c <_fflush_r>
 803de6a:	b988      	cbnz	r0, 803de90 <__swbuf_r+0x90>
 803de6c:	4638      	mov	r0, r7
 803de6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803de70:	4b0a      	ldr	r3, [pc, #40]	; (803de9c <__swbuf_r+0x9c>)
 803de72:	429c      	cmp	r4, r3
 803de74:	d101      	bne.n	803de7a <__swbuf_r+0x7a>
 803de76:	68ac      	ldr	r4, [r5, #8]
 803de78:	e7cf      	b.n	803de1a <__swbuf_r+0x1a>
 803de7a:	4b09      	ldr	r3, [pc, #36]	; (803dea0 <__swbuf_r+0xa0>)
 803de7c:	429c      	cmp	r4, r3
 803de7e:	bf08      	it	eq
 803de80:	68ec      	ldreq	r4, [r5, #12]
 803de82:	e7ca      	b.n	803de1a <__swbuf_r+0x1a>
 803de84:	4621      	mov	r1, r4
 803de86:	4628      	mov	r0, r5
 803de88:	f000 f80c 	bl	803dea4 <__swsetup_r>
 803de8c:	2800      	cmp	r0, #0
 803de8e:	d0cb      	beq.n	803de28 <__swbuf_r+0x28>
 803de90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 803de94:	e7ea      	b.n	803de6c <__swbuf_r+0x6c>
 803de96:	bf00      	nop
 803de98:	0805963c 	.word	0x0805963c
 803de9c:	0805965c 	.word	0x0805965c
 803dea0:	0805961c 	.word	0x0805961c

0803dea4 <__swsetup_r>:
 803dea4:	4b32      	ldr	r3, [pc, #200]	; (803df70 <__swsetup_r+0xcc>)
 803dea6:	b570      	push	{r4, r5, r6, lr}
 803dea8:	681d      	ldr	r5, [r3, #0]
 803deaa:	4606      	mov	r6, r0
 803deac:	460c      	mov	r4, r1
 803deae:	b125      	cbz	r5, 803deba <__swsetup_r+0x16>
 803deb0:	69ab      	ldr	r3, [r5, #24]
 803deb2:	b913      	cbnz	r3, 803deba <__swsetup_r+0x16>
 803deb4:	4628      	mov	r0, r5
 803deb6:	f000 f97d 	bl	803e1b4 <__sinit>
 803deba:	4b2e      	ldr	r3, [pc, #184]	; (803df74 <__swsetup_r+0xd0>)
 803debc:	429c      	cmp	r4, r3
 803debe:	d10f      	bne.n	803dee0 <__swsetup_r+0x3c>
 803dec0:	686c      	ldr	r4, [r5, #4]
 803dec2:	89a3      	ldrh	r3, [r4, #12]
 803dec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803dec8:	0719      	lsls	r1, r3, #28
 803deca:	d42c      	bmi.n	803df26 <__swsetup_r+0x82>
 803decc:	06dd      	lsls	r5, r3, #27
 803dece:	d411      	bmi.n	803def4 <__swsetup_r+0x50>
 803ded0:	2309      	movs	r3, #9
 803ded2:	6033      	str	r3, [r6, #0]
 803ded4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803ded8:	81a3      	strh	r3, [r4, #12]
 803deda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803dede:	e03e      	b.n	803df5e <__swsetup_r+0xba>
 803dee0:	4b25      	ldr	r3, [pc, #148]	; (803df78 <__swsetup_r+0xd4>)
 803dee2:	429c      	cmp	r4, r3
 803dee4:	d101      	bne.n	803deea <__swsetup_r+0x46>
 803dee6:	68ac      	ldr	r4, [r5, #8]
 803dee8:	e7eb      	b.n	803dec2 <__swsetup_r+0x1e>
 803deea:	4b24      	ldr	r3, [pc, #144]	; (803df7c <__swsetup_r+0xd8>)
 803deec:	429c      	cmp	r4, r3
 803deee:	bf08      	it	eq
 803def0:	68ec      	ldreq	r4, [r5, #12]
 803def2:	e7e6      	b.n	803dec2 <__swsetup_r+0x1e>
 803def4:	0758      	lsls	r0, r3, #29
 803def6:	d512      	bpl.n	803df1e <__swsetup_r+0x7a>
 803def8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803defa:	b141      	cbz	r1, 803df0e <__swsetup_r+0x6a>
 803defc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803df00:	4299      	cmp	r1, r3
 803df02:	d002      	beq.n	803df0a <__swsetup_r+0x66>
 803df04:	4630      	mov	r0, r6
 803df06:	f7ff fb59 	bl	803d5bc <_free_r>
 803df0a:	2300      	movs	r3, #0
 803df0c:	6363      	str	r3, [r4, #52]	; 0x34
 803df0e:	89a3      	ldrh	r3, [r4, #12]
 803df10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803df14:	81a3      	strh	r3, [r4, #12]
 803df16:	2300      	movs	r3, #0
 803df18:	6063      	str	r3, [r4, #4]
 803df1a:	6923      	ldr	r3, [r4, #16]
 803df1c:	6023      	str	r3, [r4, #0]
 803df1e:	89a3      	ldrh	r3, [r4, #12]
 803df20:	f043 0308 	orr.w	r3, r3, #8
 803df24:	81a3      	strh	r3, [r4, #12]
 803df26:	6923      	ldr	r3, [r4, #16]
 803df28:	b94b      	cbnz	r3, 803df3e <__swsetup_r+0x9a>
 803df2a:	89a3      	ldrh	r3, [r4, #12]
 803df2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803df30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803df34:	d003      	beq.n	803df3e <__swsetup_r+0x9a>
 803df36:	4621      	mov	r1, r4
 803df38:	4630      	mov	r0, r6
 803df3a:	f000 fa01 	bl	803e340 <__smakebuf_r>
 803df3e:	89a0      	ldrh	r0, [r4, #12]
 803df40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803df44:	f010 0301 	ands.w	r3, r0, #1
 803df48:	d00a      	beq.n	803df60 <__swsetup_r+0xbc>
 803df4a:	2300      	movs	r3, #0
 803df4c:	60a3      	str	r3, [r4, #8]
 803df4e:	6963      	ldr	r3, [r4, #20]
 803df50:	425b      	negs	r3, r3
 803df52:	61a3      	str	r3, [r4, #24]
 803df54:	6923      	ldr	r3, [r4, #16]
 803df56:	b943      	cbnz	r3, 803df6a <__swsetup_r+0xc6>
 803df58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803df5c:	d1ba      	bne.n	803ded4 <__swsetup_r+0x30>
 803df5e:	bd70      	pop	{r4, r5, r6, pc}
 803df60:	0781      	lsls	r1, r0, #30
 803df62:	bf58      	it	pl
 803df64:	6963      	ldrpl	r3, [r4, #20]
 803df66:	60a3      	str	r3, [r4, #8]
 803df68:	e7f4      	b.n	803df54 <__swsetup_r+0xb0>
 803df6a:	2000      	movs	r0, #0
 803df6c:	e7f7      	b.n	803df5e <__swsetup_r+0xba>
 803df6e:	bf00      	nop
 803df70:	24000100 	.word	0x24000100
 803df74:	0805963c 	.word	0x0805963c
 803df78:	0805965c 	.word	0x0805965c
 803df7c:	0805961c 	.word	0x0805961c

0803df80 <__sflush_r>:
 803df80:	898a      	ldrh	r2, [r1, #12]
 803df82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803df86:	4605      	mov	r5, r0
 803df88:	0710      	lsls	r0, r2, #28
 803df8a:	460c      	mov	r4, r1
 803df8c:	d458      	bmi.n	803e040 <__sflush_r+0xc0>
 803df8e:	684b      	ldr	r3, [r1, #4]
 803df90:	2b00      	cmp	r3, #0
 803df92:	dc05      	bgt.n	803dfa0 <__sflush_r+0x20>
 803df94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803df96:	2b00      	cmp	r3, #0
 803df98:	dc02      	bgt.n	803dfa0 <__sflush_r+0x20>
 803df9a:	2000      	movs	r0, #0
 803df9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803dfa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803dfa2:	2e00      	cmp	r6, #0
 803dfa4:	d0f9      	beq.n	803df9a <__sflush_r+0x1a>
 803dfa6:	2300      	movs	r3, #0
 803dfa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803dfac:	682f      	ldr	r7, [r5, #0]
 803dfae:	602b      	str	r3, [r5, #0]
 803dfb0:	d032      	beq.n	803e018 <__sflush_r+0x98>
 803dfb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803dfb4:	89a3      	ldrh	r3, [r4, #12]
 803dfb6:	075a      	lsls	r2, r3, #29
 803dfb8:	d505      	bpl.n	803dfc6 <__sflush_r+0x46>
 803dfba:	6863      	ldr	r3, [r4, #4]
 803dfbc:	1ac0      	subs	r0, r0, r3
 803dfbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803dfc0:	b10b      	cbz	r3, 803dfc6 <__sflush_r+0x46>
 803dfc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803dfc4:	1ac0      	subs	r0, r0, r3
 803dfc6:	2300      	movs	r3, #0
 803dfc8:	4602      	mov	r2, r0
 803dfca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803dfcc:	6a21      	ldr	r1, [r4, #32]
 803dfce:	4628      	mov	r0, r5
 803dfd0:	47b0      	blx	r6
 803dfd2:	1c43      	adds	r3, r0, #1
 803dfd4:	89a3      	ldrh	r3, [r4, #12]
 803dfd6:	d106      	bne.n	803dfe6 <__sflush_r+0x66>
 803dfd8:	6829      	ldr	r1, [r5, #0]
 803dfda:	291d      	cmp	r1, #29
 803dfdc:	d82c      	bhi.n	803e038 <__sflush_r+0xb8>
 803dfde:	4a2a      	ldr	r2, [pc, #168]	; (803e088 <__sflush_r+0x108>)
 803dfe0:	40ca      	lsrs	r2, r1
 803dfe2:	07d6      	lsls	r6, r2, #31
 803dfe4:	d528      	bpl.n	803e038 <__sflush_r+0xb8>
 803dfe6:	2200      	movs	r2, #0
 803dfe8:	6062      	str	r2, [r4, #4]
 803dfea:	04d9      	lsls	r1, r3, #19
 803dfec:	6922      	ldr	r2, [r4, #16]
 803dfee:	6022      	str	r2, [r4, #0]
 803dff0:	d504      	bpl.n	803dffc <__sflush_r+0x7c>
 803dff2:	1c42      	adds	r2, r0, #1
 803dff4:	d101      	bne.n	803dffa <__sflush_r+0x7a>
 803dff6:	682b      	ldr	r3, [r5, #0]
 803dff8:	b903      	cbnz	r3, 803dffc <__sflush_r+0x7c>
 803dffa:	6560      	str	r0, [r4, #84]	; 0x54
 803dffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803dffe:	602f      	str	r7, [r5, #0]
 803e000:	2900      	cmp	r1, #0
 803e002:	d0ca      	beq.n	803df9a <__sflush_r+0x1a>
 803e004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803e008:	4299      	cmp	r1, r3
 803e00a:	d002      	beq.n	803e012 <__sflush_r+0x92>
 803e00c:	4628      	mov	r0, r5
 803e00e:	f7ff fad5 	bl	803d5bc <_free_r>
 803e012:	2000      	movs	r0, #0
 803e014:	6360      	str	r0, [r4, #52]	; 0x34
 803e016:	e7c1      	b.n	803df9c <__sflush_r+0x1c>
 803e018:	6a21      	ldr	r1, [r4, #32]
 803e01a:	2301      	movs	r3, #1
 803e01c:	4628      	mov	r0, r5
 803e01e:	47b0      	blx	r6
 803e020:	1c41      	adds	r1, r0, #1
 803e022:	d1c7      	bne.n	803dfb4 <__sflush_r+0x34>
 803e024:	682b      	ldr	r3, [r5, #0]
 803e026:	2b00      	cmp	r3, #0
 803e028:	d0c4      	beq.n	803dfb4 <__sflush_r+0x34>
 803e02a:	2b1d      	cmp	r3, #29
 803e02c:	d001      	beq.n	803e032 <__sflush_r+0xb2>
 803e02e:	2b16      	cmp	r3, #22
 803e030:	d101      	bne.n	803e036 <__sflush_r+0xb6>
 803e032:	602f      	str	r7, [r5, #0]
 803e034:	e7b1      	b.n	803df9a <__sflush_r+0x1a>
 803e036:	89a3      	ldrh	r3, [r4, #12]
 803e038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803e03c:	81a3      	strh	r3, [r4, #12]
 803e03e:	e7ad      	b.n	803df9c <__sflush_r+0x1c>
 803e040:	690f      	ldr	r7, [r1, #16]
 803e042:	2f00      	cmp	r7, #0
 803e044:	d0a9      	beq.n	803df9a <__sflush_r+0x1a>
 803e046:	0793      	lsls	r3, r2, #30
 803e048:	680e      	ldr	r6, [r1, #0]
 803e04a:	bf08      	it	eq
 803e04c:	694b      	ldreq	r3, [r1, #20]
 803e04e:	600f      	str	r7, [r1, #0]
 803e050:	bf18      	it	ne
 803e052:	2300      	movne	r3, #0
 803e054:	eba6 0807 	sub.w	r8, r6, r7
 803e058:	608b      	str	r3, [r1, #8]
 803e05a:	f1b8 0f00 	cmp.w	r8, #0
 803e05e:	dd9c      	ble.n	803df9a <__sflush_r+0x1a>
 803e060:	6a21      	ldr	r1, [r4, #32]
 803e062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803e064:	4643      	mov	r3, r8
 803e066:	463a      	mov	r2, r7
 803e068:	4628      	mov	r0, r5
 803e06a:	47b0      	blx	r6
 803e06c:	2800      	cmp	r0, #0
 803e06e:	dc06      	bgt.n	803e07e <__sflush_r+0xfe>
 803e070:	89a3      	ldrh	r3, [r4, #12]
 803e072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803e076:	81a3      	strh	r3, [r4, #12]
 803e078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803e07c:	e78e      	b.n	803df9c <__sflush_r+0x1c>
 803e07e:	4407      	add	r7, r0
 803e080:	eba8 0800 	sub.w	r8, r8, r0
 803e084:	e7e9      	b.n	803e05a <__sflush_r+0xda>
 803e086:	bf00      	nop
 803e088:	20400001 	.word	0x20400001

0803e08c <_fflush_r>:
 803e08c:	b538      	push	{r3, r4, r5, lr}
 803e08e:	690b      	ldr	r3, [r1, #16]
 803e090:	4605      	mov	r5, r0
 803e092:	460c      	mov	r4, r1
 803e094:	b913      	cbnz	r3, 803e09c <_fflush_r+0x10>
 803e096:	2500      	movs	r5, #0
 803e098:	4628      	mov	r0, r5
 803e09a:	bd38      	pop	{r3, r4, r5, pc}
 803e09c:	b118      	cbz	r0, 803e0a6 <_fflush_r+0x1a>
 803e09e:	6983      	ldr	r3, [r0, #24]
 803e0a0:	b90b      	cbnz	r3, 803e0a6 <_fflush_r+0x1a>
 803e0a2:	f000 f887 	bl	803e1b4 <__sinit>
 803e0a6:	4b14      	ldr	r3, [pc, #80]	; (803e0f8 <_fflush_r+0x6c>)
 803e0a8:	429c      	cmp	r4, r3
 803e0aa:	d11b      	bne.n	803e0e4 <_fflush_r+0x58>
 803e0ac:	686c      	ldr	r4, [r5, #4]
 803e0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803e0b2:	2b00      	cmp	r3, #0
 803e0b4:	d0ef      	beq.n	803e096 <_fflush_r+0xa>
 803e0b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803e0b8:	07d0      	lsls	r0, r2, #31
 803e0ba:	d404      	bmi.n	803e0c6 <_fflush_r+0x3a>
 803e0bc:	0599      	lsls	r1, r3, #22
 803e0be:	d402      	bmi.n	803e0c6 <_fflush_r+0x3a>
 803e0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803e0c2:	f000 f915 	bl	803e2f0 <__retarget_lock_acquire_recursive>
 803e0c6:	4628      	mov	r0, r5
 803e0c8:	4621      	mov	r1, r4
 803e0ca:	f7ff ff59 	bl	803df80 <__sflush_r>
 803e0ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803e0d0:	07da      	lsls	r2, r3, #31
 803e0d2:	4605      	mov	r5, r0
 803e0d4:	d4e0      	bmi.n	803e098 <_fflush_r+0xc>
 803e0d6:	89a3      	ldrh	r3, [r4, #12]
 803e0d8:	059b      	lsls	r3, r3, #22
 803e0da:	d4dd      	bmi.n	803e098 <_fflush_r+0xc>
 803e0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803e0de:	f000 f908 	bl	803e2f2 <__retarget_lock_release_recursive>
 803e0e2:	e7d9      	b.n	803e098 <_fflush_r+0xc>
 803e0e4:	4b05      	ldr	r3, [pc, #20]	; (803e0fc <_fflush_r+0x70>)
 803e0e6:	429c      	cmp	r4, r3
 803e0e8:	d101      	bne.n	803e0ee <_fflush_r+0x62>
 803e0ea:	68ac      	ldr	r4, [r5, #8]
 803e0ec:	e7df      	b.n	803e0ae <_fflush_r+0x22>
 803e0ee:	4b04      	ldr	r3, [pc, #16]	; (803e100 <_fflush_r+0x74>)
 803e0f0:	429c      	cmp	r4, r3
 803e0f2:	bf08      	it	eq
 803e0f4:	68ec      	ldreq	r4, [r5, #12]
 803e0f6:	e7da      	b.n	803e0ae <_fflush_r+0x22>
 803e0f8:	0805963c 	.word	0x0805963c
 803e0fc:	0805965c 	.word	0x0805965c
 803e100:	0805961c 	.word	0x0805961c

0803e104 <std>:
 803e104:	2300      	movs	r3, #0
 803e106:	b510      	push	{r4, lr}
 803e108:	4604      	mov	r4, r0
 803e10a:	e9c0 3300 	strd	r3, r3, [r0]
 803e10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803e112:	6083      	str	r3, [r0, #8]
 803e114:	8181      	strh	r1, [r0, #12]
 803e116:	6643      	str	r3, [r0, #100]	; 0x64
 803e118:	81c2      	strh	r2, [r0, #14]
 803e11a:	6183      	str	r3, [r0, #24]
 803e11c:	4619      	mov	r1, r3
 803e11e:	2208      	movs	r2, #8
 803e120:	305c      	adds	r0, #92	; 0x5c
 803e122:	f7ff fa43 	bl	803d5ac <memset>
 803e126:	4b05      	ldr	r3, [pc, #20]	; (803e13c <std+0x38>)
 803e128:	6263      	str	r3, [r4, #36]	; 0x24
 803e12a:	4b05      	ldr	r3, [pc, #20]	; (803e140 <std+0x3c>)
 803e12c:	62a3      	str	r3, [r4, #40]	; 0x28
 803e12e:	4b05      	ldr	r3, [pc, #20]	; (803e144 <std+0x40>)
 803e130:	62e3      	str	r3, [r4, #44]	; 0x2c
 803e132:	4b05      	ldr	r3, [pc, #20]	; (803e148 <std+0x44>)
 803e134:	6224      	str	r4, [r4, #32]
 803e136:	6323      	str	r3, [r4, #48]	; 0x30
 803e138:	bd10      	pop	{r4, pc}
 803e13a:	bf00      	nop
 803e13c:	0803e3d9 	.word	0x0803e3d9
 803e140:	0803e3fb 	.word	0x0803e3fb
 803e144:	0803e433 	.word	0x0803e433
 803e148:	0803e457 	.word	0x0803e457

0803e14c <_cleanup_r>:
 803e14c:	4901      	ldr	r1, [pc, #4]	; (803e154 <_cleanup_r+0x8>)
 803e14e:	f000 b8af 	b.w	803e2b0 <_fwalk_reent>
 803e152:	bf00      	nop
 803e154:	0803e08d 	.word	0x0803e08d

0803e158 <__sfmoreglue>:
 803e158:	b570      	push	{r4, r5, r6, lr}
 803e15a:	2268      	movs	r2, #104	; 0x68
 803e15c:	1e4d      	subs	r5, r1, #1
 803e15e:	4355      	muls	r5, r2
 803e160:	460e      	mov	r6, r1
 803e162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803e166:	f7ff fa95 	bl	803d694 <_malloc_r>
 803e16a:	4604      	mov	r4, r0
 803e16c:	b140      	cbz	r0, 803e180 <__sfmoreglue+0x28>
 803e16e:	2100      	movs	r1, #0
 803e170:	e9c0 1600 	strd	r1, r6, [r0]
 803e174:	300c      	adds	r0, #12
 803e176:	60a0      	str	r0, [r4, #8]
 803e178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803e17c:	f7ff fa16 	bl	803d5ac <memset>
 803e180:	4620      	mov	r0, r4
 803e182:	bd70      	pop	{r4, r5, r6, pc}

0803e184 <__sfp_lock_acquire>:
 803e184:	4801      	ldr	r0, [pc, #4]	; (803e18c <__sfp_lock_acquire+0x8>)
 803e186:	f000 b8b3 	b.w	803e2f0 <__retarget_lock_acquire_recursive>
 803e18a:	bf00      	nop
 803e18c:	24003769 	.word	0x24003769

0803e190 <__sfp_lock_release>:
 803e190:	4801      	ldr	r0, [pc, #4]	; (803e198 <__sfp_lock_release+0x8>)
 803e192:	f000 b8ae 	b.w	803e2f2 <__retarget_lock_release_recursive>
 803e196:	bf00      	nop
 803e198:	24003769 	.word	0x24003769

0803e19c <__sinit_lock_acquire>:
 803e19c:	4801      	ldr	r0, [pc, #4]	; (803e1a4 <__sinit_lock_acquire+0x8>)
 803e19e:	f000 b8a7 	b.w	803e2f0 <__retarget_lock_acquire_recursive>
 803e1a2:	bf00      	nop
 803e1a4:	2400376a 	.word	0x2400376a

0803e1a8 <__sinit_lock_release>:
 803e1a8:	4801      	ldr	r0, [pc, #4]	; (803e1b0 <__sinit_lock_release+0x8>)
 803e1aa:	f000 b8a2 	b.w	803e2f2 <__retarget_lock_release_recursive>
 803e1ae:	bf00      	nop
 803e1b0:	2400376a 	.word	0x2400376a

0803e1b4 <__sinit>:
 803e1b4:	b510      	push	{r4, lr}
 803e1b6:	4604      	mov	r4, r0
 803e1b8:	f7ff fff0 	bl	803e19c <__sinit_lock_acquire>
 803e1bc:	69a3      	ldr	r3, [r4, #24]
 803e1be:	b11b      	cbz	r3, 803e1c8 <__sinit+0x14>
 803e1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803e1c4:	f7ff bff0 	b.w	803e1a8 <__sinit_lock_release>
 803e1c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803e1cc:	6523      	str	r3, [r4, #80]	; 0x50
 803e1ce:	4b13      	ldr	r3, [pc, #76]	; (803e21c <__sinit+0x68>)
 803e1d0:	4a13      	ldr	r2, [pc, #76]	; (803e220 <__sinit+0x6c>)
 803e1d2:	681b      	ldr	r3, [r3, #0]
 803e1d4:	62a2      	str	r2, [r4, #40]	; 0x28
 803e1d6:	42a3      	cmp	r3, r4
 803e1d8:	bf04      	itt	eq
 803e1da:	2301      	moveq	r3, #1
 803e1dc:	61a3      	streq	r3, [r4, #24]
 803e1de:	4620      	mov	r0, r4
 803e1e0:	f000 f820 	bl	803e224 <__sfp>
 803e1e4:	6060      	str	r0, [r4, #4]
 803e1e6:	4620      	mov	r0, r4
 803e1e8:	f000 f81c 	bl	803e224 <__sfp>
 803e1ec:	60a0      	str	r0, [r4, #8]
 803e1ee:	4620      	mov	r0, r4
 803e1f0:	f000 f818 	bl	803e224 <__sfp>
 803e1f4:	2200      	movs	r2, #0
 803e1f6:	60e0      	str	r0, [r4, #12]
 803e1f8:	2104      	movs	r1, #4
 803e1fa:	6860      	ldr	r0, [r4, #4]
 803e1fc:	f7ff ff82 	bl	803e104 <std>
 803e200:	68a0      	ldr	r0, [r4, #8]
 803e202:	2201      	movs	r2, #1
 803e204:	2109      	movs	r1, #9
 803e206:	f7ff ff7d 	bl	803e104 <std>
 803e20a:	68e0      	ldr	r0, [r4, #12]
 803e20c:	2202      	movs	r2, #2
 803e20e:	2112      	movs	r1, #18
 803e210:	f7ff ff78 	bl	803e104 <std>
 803e214:	2301      	movs	r3, #1
 803e216:	61a3      	str	r3, [r4, #24]
 803e218:	e7d2      	b.n	803e1c0 <__sinit+0xc>
 803e21a:	bf00      	nop
 803e21c:	080595e4 	.word	0x080595e4
 803e220:	0803e14d 	.word	0x0803e14d

0803e224 <__sfp>:
 803e224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803e226:	4607      	mov	r7, r0
 803e228:	f7ff ffac 	bl	803e184 <__sfp_lock_acquire>
 803e22c:	4b1e      	ldr	r3, [pc, #120]	; (803e2a8 <__sfp+0x84>)
 803e22e:	681e      	ldr	r6, [r3, #0]
 803e230:	69b3      	ldr	r3, [r6, #24]
 803e232:	b913      	cbnz	r3, 803e23a <__sfp+0x16>
 803e234:	4630      	mov	r0, r6
 803e236:	f7ff ffbd 	bl	803e1b4 <__sinit>
 803e23a:	3648      	adds	r6, #72	; 0x48
 803e23c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803e240:	3b01      	subs	r3, #1
 803e242:	d503      	bpl.n	803e24c <__sfp+0x28>
 803e244:	6833      	ldr	r3, [r6, #0]
 803e246:	b30b      	cbz	r3, 803e28c <__sfp+0x68>
 803e248:	6836      	ldr	r6, [r6, #0]
 803e24a:	e7f7      	b.n	803e23c <__sfp+0x18>
 803e24c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803e250:	b9d5      	cbnz	r5, 803e288 <__sfp+0x64>
 803e252:	4b16      	ldr	r3, [pc, #88]	; (803e2ac <__sfp+0x88>)
 803e254:	60e3      	str	r3, [r4, #12]
 803e256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803e25a:	6665      	str	r5, [r4, #100]	; 0x64
 803e25c:	f000 f847 	bl	803e2ee <__retarget_lock_init_recursive>
 803e260:	f7ff ff96 	bl	803e190 <__sfp_lock_release>
 803e264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 803e268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803e26c:	6025      	str	r5, [r4, #0]
 803e26e:	61a5      	str	r5, [r4, #24]
 803e270:	2208      	movs	r2, #8
 803e272:	4629      	mov	r1, r5
 803e274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 803e278:	f7ff f998 	bl	803d5ac <memset>
 803e27c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803e280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 803e284:	4620      	mov	r0, r4
 803e286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803e288:	3468      	adds	r4, #104	; 0x68
 803e28a:	e7d9      	b.n	803e240 <__sfp+0x1c>
 803e28c:	2104      	movs	r1, #4
 803e28e:	4638      	mov	r0, r7
 803e290:	f7ff ff62 	bl	803e158 <__sfmoreglue>
 803e294:	4604      	mov	r4, r0
 803e296:	6030      	str	r0, [r6, #0]
 803e298:	2800      	cmp	r0, #0
 803e29a:	d1d5      	bne.n	803e248 <__sfp+0x24>
 803e29c:	f7ff ff78 	bl	803e190 <__sfp_lock_release>
 803e2a0:	230c      	movs	r3, #12
 803e2a2:	603b      	str	r3, [r7, #0]
 803e2a4:	e7ee      	b.n	803e284 <__sfp+0x60>
 803e2a6:	bf00      	nop
 803e2a8:	080595e4 	.word	0x080595e4
 803e2ac:	ffff0001 	.word	0xffff0001

0803e2b0 <_fwalk_reent>:
 803e2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803e2b4:	4606      	mov	r6, r0
 803e2b6:	4688      	mov	r8, r1
 803e2b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803e2bc:	2700      	movs	r7, #0
 803e2be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803e2c2:	f1b9 0901 	subs.w	r9, r9, #1
 803e2c6:	d505      	bpl.n	803e2d4 <_fwalk_reent+0x24>
 803e2c8:	6824      	ldr	r4, [r4, #0]
 803e2ca:	2c00      	cmp	r4, #0
 803e2cc:	d1f7      	bne.n	803e2be <_fwalk_reent+0xe>
 803e2ce:	4638      	mov	r0, r7
 803e2d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803e2d4:	89ab      	ldrh	r3, [r5, #12]
 803e2d6:	2b01      	cmp	r3, #1
 803e2d8:	d907      	bls.n	803e2ea <_fwalk_reent+0x3a>
 803e2da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803e2de:	3301      	adds	r3, #1
 803e2e0:	d003      	beq.n	803e2ea <_fwalk_reent+0x3a>
 803e2e2:	4629      	mov	r1, r5
 803e2e4:	4630      	mov	r0, r6
 803e2e6:	47c0      	blx	r8
 803e2e8:	4307      	orrs	r7, r0
 803e2ea:	3568      	adds	r5, #104	; 0x68
 803e2ec:	e7e9      	b.n	803e2c2 <_fwalk_reent+0x12>

0803e2ee <__retarget_lock_init_recursive>:
 803e2ee:	4770      	bx	lr

0803e2f0 <__retarget_lock_acquire_recursive>:
 803e2f0:	4770      	bx	lr

0803e2f2 <__retarget_lock_release_recursive>:
 803e2f2:	4770      	bx	lr

0803e2f4 <__swhatbuf_r>:
 803e2f4:	b570      	push	{r4, r5, r6, lr}
 803e2f6:	460e      	mov	r6, r1
 803e2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803e2fc:	2900      	cmp	r1, #0
 803e2fe:	b096      	sub	sp, #88	; 0x58
 803e300:	4614      	mov	r4, r2
 803e302:	461d      	mov	r5, r3
 803e304:	da08      	bge.n	803e318 <__swhatbuf_r+0x24>
 803e306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803e30a:	2200      	movs	r2, #0
 803e30c:	602a      	str	r2, [r5, #0]
 803e30e:	061a      	lsls	r2, r3, #24
 803e310:	d410      	bmi.n	803e334 <__swhatbuf_r+0x40>
 803e312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803e316:	e00e      	b.n	803e336 <__swhatbuf_r+0x42>
 803e318:	466a      	mov	r2, sp
 803e31a:	f000 f8c3 	bl	803e4a4 <_fstat_r>
 803e31e:	2800      	cmp	r0, #0
 803e320:	dbf1      	blt.n	803e306 <__swhatbuf_r+0x12>
 803e322:	9a01      	ldr	r2, [sp, #4]
 803e324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803e328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803e32c:	425a      	negs	r2, r3
 803e32e:	415a      	adcs	r2, r3
 803e330:	602a      	str	r2, [r5, #0]
 803e332:	e7ee      	b.n	803e312 <__swhatbuf_r+0x1e>
 803e334:	2340      	movs	r3, #64	; 0x40
 803e336:	2000      	movs	r0, #0
 803e338:	6023      	str	r3, [r4, #0]
 803e33a:	b016      	add	sp, #88	; 0x58
 803e33c:	bd70      	pop	{r4, r5, r6, pc}
	...

0803e340 <__smakebuf_r>:
 803e340:	898b      	ldrh	r3, [r1, #12]
 803e342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803e344:	079d      	lsls	r5, r3, #30
 803e346:	4606      	mov	r6, r0
 803e348:	460c      	mov	r4, r1
 803e34a:	d507      	bpl.n	803e35c <__smakebuf_r+0x1c>
 803e34c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803e350:	6023      	str	r3, [r4, #0]
 803e352:	6123      	str	r3, [r4, #16]
 803e354:	2301      	movs	r3, #1
 803e356:	6163      	str	r3, [r4, #20]
 803e358:	b002      	add	sp, #8
 803e35a:	bd70      	pop	{r4, r5, r6, pc}
 803e35c:	ab01      	add	r3, sp, #4
 803e35e:	466a      	mov	r2, sp
 803e360:	f7ff ffc8 	bl	803e2f4 <__swhatbuf_r>
 803e364:	9900      	ldr	r1, [sp, #0]
 803e366:	4605      	mov	r5, r0
 803e368:	4630      	mov	r0, r6
 803e36a:	f7ff f993 	bl	803d694 <_malloc_r>
 803e36e:	b948      	cbnz	r0, 803e384 <__smakebuf_r+0x44>
 803e370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803e374:	059a      	lsls	r2, r3, #22
 803e376:	d4ef      	bmi.n	803e358 <__smakebuf_r+0x18>
 803e378:	f023 0303 	bic.w	r3, r3, #3
 803e37c:	f043 0302 	orr.w	r3, r3, #2
 803e380:	81a3      	strh	r3, [r4, #12]
 803e382:	e7e3      	b.n	803e34c <__smakebuf_r+0xc>
 803e384:	4b0d      	ldr	r3, [pc, #52]	; (803e3bc <__smakebuf_r+0x7c>)
 803e386:	62b3      	str	r3, [r6, #40]	; 0x28
 803e388:	89a3      	ldrh	r3, [r4, #12]
 803e38a:	6020      	str	r0, [r4, #0]
 803e38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803e390:	81a3      	strh	r3, [r4, #12]
 803e392:	9b00      	ldr	r3, [sp, #0]
 803e394:	6163      	str	r3, [r4, #20]
 803e396:	9b01      	ldr	r3, [sp, #4]
 803e398:	6120      	str	r0, [r4, #16]
 803e39a:	b15b      	cbz	r3, 803e3b4 <__smakebuf_r+0x74>
 803e39c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803e3a0:	4630      	mov	r0, r6
 803e3a2:	f000 f891 	bl	803e4c8 <_isatty_r>
 803e3a6:	b128      	cbz	r0, 803e3b4 <__smakebuf_r+0x74>
 803e3a8:	89a3      	ldrh	r3, [r4, #12]
 803e3aa:	f023 0303 	bic.w	r3, r3, #3
 803e3ae:	f043 0301 	orr.w	r3, r3, #1
 803e3b2:	81a3      	strh	r3, [r4, #12]
 803e3b4:	89a0      	ldrh	r0, [r4, #12]
 803e3b6:	4305      	orrs	r5, r0
 803e3b8:	81a5      	strh	r5, [r4, #12]
 803e3ba:	e7cd      	b.n	803e358 <__smakebuf_r+0x18>
 803e3bc:	0803e14d 	.word	0x0803e14d

0803e3c0 <__malloc_lock>:
 803e3c0:	4801      	ldr	r0, [pc, #4]	; (803e3c8 <__malloc_lock+0x8>)
 803e3c2:	f7ff bf95 	b.w	803e2f0 <__retarget_lock_acquire_recursive>
 803e3c6:	bf00      	nop
 803e3c8:	24003768 	.word	0x24003768

0803e3cc <__malloc_unlock>:
 803e3cc:	4801      	ldr	r0, [pc, #4]	; (803e3d4 <__malloc_unlock+0x8>)
 803e3ce:	f7ff bf90 	b.w	803e2f2 <__retarget_lock_release_recursive>
 803e3d2:	bf00      	nop
 803e3d4:	24003768 	.word	0x24003768

0803e3d8 <__sread>:
 803e3d8:	b510      	push	{r4, lr}
 803e3da:	460c      	mov	r4, r1
 803e3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803e3e0:	f000 f894 	bl	803e50c <_read_r>
 803e3e4:	2800      	cmp	r0, #0
 803e3e6:	bfab      	itete	ge
 803e3e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803e3ea:	89a3      	ldrhlt	r3, [r4, #12]
 803e3ec:	181b      	addge	r3, r3, r0
 803e3ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803e3f2:	bfac      	ite	ge
 803e3f4:	6563      	strge	r3, [r4, #84]	; 0x54
 803e3f6:	81a3      	strhlt	r3, [r4, #12]
 803e3f8:	bd10      	pop	{r4, pc}

0803e3fa <__swrite>:
 803e3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803e3fe:	461f      	mov	r7, r3
 803e400:	898b      	ldrh	r3, [r1, #12]
 803e402:	05db      	lsls	r3, r3, #23
 803e404:	4605      	mov	r5, r0
 803e406:	460c      	mov	r4, r1
 803e408:	4616      	mov	r6, r2
 803e40a:	d505      	bpl.n	803e418 <__swrite+0x1e>
 803e40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803e410:	2302      	movs	r3, #2
 803e412:	2200      	movs	r2, #0
 803e414:	f000 f868 	bl	803e4e8 <_lseek_r>
 803e418:	89a3      	ldrh	r3, [r4, #12]
 803e41a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803e41e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803e422:	81a3      	strh	r3, [r4, #12]
 803e424:	4632      	mov	r2, r6
 803e426:	463b      	mov	r3, r7
 803e428:	4628      	mov	r0, r5
 803e42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803e42e:	f000 b817 	b.w	803e460 <_write_r>

0803e432 <__sseek>:
 803e432:	b510      	push	{r4, lr}
 803e434:	460c      	mov	r4, r1
 803e436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803e43a:	f000 f855 	bl	803e4e8 <_lseek_r>
 803e43e:	1c43      	adds	r3, r0, #1
 803e440:	89a3      	ldrh	r3, [r4, #12]
 803e442:	bf15      	itete	ne
 803e444:	6560      	strne	r0, [r4, #84]	; 0x54
 803e446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803e44a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803e44e:	81a3      	strheq	r3, [r4, #12]
 803e450:	bf18      	it	ne
 803e452:	81a3      	strhne	r3, [r4, #12]
 803e454:	bd10      	pop	{r4, pc}

0803e456 <__sclose>:
 803e456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803e45a:	f000 b813 	b.w	803e484 <_close_r>
	...

0803e460 <_write_r>:
 803e460:	b538      	push	{r3, r4, r5, lr}
 803e462:	4d07      	ldr	r5, [pc, #28]	; (803e480 <_write_r+0x20>)
 803e464:	4604      	mov	r4, r0
 803e466:	4608      	mov	r0, r1
 803e468:	4611      	mov	r1, r2
 803e46a:	2200      	movs	r2, #0
 803e46c:	602a      	str	r2, [r5, #0]
 803e46e:	461a      	mov	r2, r3
 803e470:	f7ed f93f 	bl	802b6f2 <_write>
 803e474:	1c43      	adds	r3, r0, #1
 803e476:	d102      	bne.n	803e47e <_write_r+0x1e>
 803e478:	682b      	ldr	r3, [r5, #0]
 803e47a:	b103      	cbz	r3, 803e47e <_write_r+0x1e>
 803e47c:	6023      	str	r3, [r4, #0]
 803e47e:	bd38      	pop	{r3, r4, r5, pc}
 803e480:	2400376c 	.word	0x2400376c

0803e484 <_close_r>:
 803e484:	b538      	push	{r3, r4, r5, lr}
 803e486:	4d06      	ldr	r5, [pc, #24]	; (803e4a0 <_close_r+0x1c>)
 803e488:	2300      	movs	r3, #0
 803e48a:	4604      	mov	r4, r0
 803e48c:	4608      	mov	r0, r1
 803e48e:	602b      	str	r3, [r5, #0]
 803e490:	f7ed f94b 	bl	802b72a <_close>
 803e494:	1c43      	adds	r3, r0, #1
 803e496:	d102      	bne.n	803e49e <_close_r+0x1a>
 803e498:	682b      	ldr	r3, [r5, #0]
 803e49a:	b103      	cbz	r3, 803e49e <_close_r+0x1a>
 803e49c:	6023      	str	r3, [r4, #0]
 803e49e:	bd38      	pop	{r3, r4, r5, pc}
 803e4a0:	2400376c 	.word	0x2400376c

0803e4a4 <_fstat_r>:
 803e4a4:	b538      	push	{r3, r4, r5, lr}
 803e4a6:	4d07      	ldr	r5, [pc, #28]	; (803e4c4 <_fstat_r+0x20>)
 803e4a8:	2300      	movs	r3, #0
 803e4aa:	4604      	mov	r4, r0
 803e4ac:	4608      	mov	r0, r1
 803e4ae:	4611      	mov	r1, r2
 803e4b0:	602b      	str	r3, [r5, #0]
 803e4b2:	f7ed f946 	bl	802b742 <_fstat>
 803e4b6:	1c43      	adds	r3, r0, #1
 803e4b8:	d102      	bne.n	803e4c0 <_fstat_r+0x1c>
 803e4ba:	682b      	ldr	r3, [r5, #0]
 803e4bc:	b103      	cbz	r3, 803e4c0 <_fstat_r+0x1c>
 803e4be:	6023      	str	r3, [r4, #0]
 803e4c0:	bd38      	pop	{r3, r4, r5, pc}
 803e4c2:	bf00      	nop
 803e4c4:	2400376c 	.word	0x2400376c

0803e4c8 <_isatty_r>:
 803e4c8:	b538      	push	{r3, r4, r5, lr}
 803e4ca:	4d06      	ldr	r5, [pc, #24]	; (803e4e4 <_isatty_r+0x1c>)
 803e4cc:	2300      	movs	r3, #0
 803e4ce:	4604      	mov	r4, r0
 803e4d0:	4608      	mov	r0, r1
 803e4d2:	602b      	str	r3, [r5, #0]
 803e4d4:	f7ed f945 	bl	802b762 <_isatty>
 803e4d8:	1c43      	adds	r3, r0, #1
 803e4da:	d102      	bne.n	803e4e2 <_isatty_r+0x1a>
 803e4dc:	682b      	ldr	r3, [r5, #0]
 803e4de:	b103      	cbz	r3, 803e4e2 <_isatty_r+0x1a>
 803e4e0:	6023      	str	r3, [r4, #0]
 803e4e2:	bd38      	pop	{r3, r4, r5, pc}
 803e4e4:	2400376c 	.word	0x2400376c

0803e4e8 <_lseek_r>:
 803e4e8:	b538      	push	{r3, r4, r5, lr}
 803e4ea:	4d07      	ldr	r5, [pc, #28]	; (803e508 <_lseek_r+0x20>)
 803e4ec:	4604      	mov	r4, r0
 803e4ee:	4608      	mov	r0, r1
 803e4f0:	4611      	mov	r1, r2
 803e4f2:	2200      	movs	r2, #0
 803e4f4:	602a      	str	r2, [r5, #0]
 803e4f6:	461a      	mov	r2, r3
 803e4f8:	f7ed f93e 	bl	802b778 <_lseek>
 803e4fc:	1c43      	adds	r3, r0, #1
 803e4fe:	d102      	bne.n	803e506 <_lseek_r+0x1e>
 803e500:	682b      	ldr	r3, [r5, #0]
 803e502:	b103      	cbz	r3, 803e506 <_lseek_r+0x1e>
 803e504:	6023      	str	r3, [r4, #0]
 803e506:	bd38      	pop	{r3, r4, r5, pc}
 803e508:	2400376c 	.word	0x2400376c

0803e50c <_read_r>:
 803e50c:	b538      	push	{r3, r4, r5, lr}
 803e50e:	4d07      	ldr	r5, [pc, #28]	; (803e52c <_read_r+0x20>)
 803e510:	4604      	mov	r4, r0
 803e512:	4608      	mov	r0, r1
 803e514:	4611      	mov	r1, r2
 803e516:	2200      	movs	r2, #0
 803e518:	602a      	str	r2, [r5, #0]
 803e51a:	461a      	mov	r2, r3
 803e51c:	f7ed f8cc 	bl	802b6b8 <_read>
 803e520:	1c43      	adds	r3, r0, #1
 803e522:	d102      	bne.n	803e52a <_read_r+0x1e>
 803e524:	682b      	ldr	r3, [r5, #0]
 803e526:	b103      	cbz	r3, 803e52a <_read_r+0x1e>
 803e528:	6023      	str	r3, [r4, #0]
 803e52a:	bd38      	pop	{r3, r4, r5, pc}
 803e52c:	2400376c 	.word	0x2400376c

0803e530 <_init>:
 803e530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803e532:	bf00      	nop
 803e534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803e536:	bc08      	pop	{r3}
 803e538:	469e      	mov	lr, r3
 803e53a:	4770      	bx	lr

0803e53c <_fini>:
 803e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803e53e:	bf00      	nop
 803e540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803e542:	bc08      	pop	{r3}
 803e544:	469e      	mov	lr, r3
 803e546:	4770      	bx	lr
