
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020fe8  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b4a0  08041288  08041288  00031288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0805c728  0805c728  0004c728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0805c730  0805c730  0004c730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0805c738  0805c738  0004c738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  24000000  0805c740  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00025a5c  24000168  0805c8a8  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24025bc4  0805c8a8  00055bc4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050168  2**0
                  CONTENTS, READONLY
 10 .debug_info   00057056  00000000  00000000  00050196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000076e3  00000000  00000000  000a71ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000039a8  00000000  00000000  000ae8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003758  00000000  00000000  000b2278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045523  00000000  00000000  000b59d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c377  00000000  00000000  000faef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00193a66  00000000  00000000  0013726a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002cacd0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00010824  00000000  00000000  002cad20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000168 	.word	0x24000168
 80202bc:	00000000 	.word	0x00000000
 80202c0:	08041270 	.word	0x08041270

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	2400016c 	.word	0x2400016c
 80202dc:	08041270 	.word	0x08041270

080202e0 <memchr>:
 80202e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202e4:	2a10      	cmp	r2, #16
 80202e6:	db2b      	blt.n	8020340 <memchr+0x60>
 80202e8:	f010 0f07 	tst.w	r0, #7
 80202ec:	d008      	beq.n	8020300 <memchr+0x20>
 80202ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202f2:	3a01      	subs	r2, #1
 80202f4:	428b      	cmp	r3, r1
 80202f6:	d02d      	beq.n	8020354 <memchr+0x74>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	b342      	cbz	r2, 8020350 <memchr+0x70>
 80202fe:	d1f6      	bne.n	80202ee <memchr+0xe>
 8020300:	b4f0      	push	{r4, r5, r6, r7}
 8020302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802030a:	f022 0407 	bic.w	r4, r2, #7
 802030e:	f07f 0700 	mvns.w	r7, #0
 8020312:	2300      	movs	r3, #0
 8020314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020318:	3c08      	subs	r4, #8
 802031a:	ea85 0501 	eor.w	r5, r5, r1
 802031e:	ea86 0601 	eor.w	r6, r6, r1
 8020322:	fa85 f547 	uadd8	r5, r5, r7
 8020326:	faa3 f587 	sel	r5, r3, r7
 802032a:	fa86 f647 	uadd8	r6, r6, r7
 802032e:	faa5 f687 	sel	r6, r5, r7
 8020332:	b98e      	cbnz	r6, 8020358 <memchr+0x78>
 8020334:	d1ee      	bne.n	8020314 <memchr+0x34>
 8020336:	bcf0      	pop	{r4, r5, r6, r7}
 8020338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802033c:	f002 0207 	and.w	r2, r2, #7
 8020340:	b132      	cbz	r2, 8020350 <memchr+0x70>
 8020342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020346:	3a01      	subs	r2, #1
 8020348:	ea83 0301 	eor.w	r3, r3, r1
 802034c:	b113      	cbz	r3, 8020354 <memchr+0x74>
 802034e:	d1f8      	bne.n	8020342 <memchr+0x62>
 8020350:	2000      	movs	r0, #0
 8020352:	4770      	bx	lr
 8020354:	3801      	subs	r0, #1
 8020356:	4770      	bx	lr
 8020358:	2d00      	cmp	r5, #0
 802035a:	bf06      	itte	eq
 802035c:	4635      	moveq	r5, r6
 802035e:	3803      	subeq	r0, #3
 8020360:	3807      	subne	r0, #7
 8020362:	f015 0f01 	tst.w	r5, #1
 8020366:	d107      	bne.n	8020378 <memchr+0x98>
 8020368:	3001      	adds	r0, #1
 802036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802036e:	bf02      	ittt	eq
 8020370:	3001      	addeq	r0, #1
 8020372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020376:	3001      	addeq	r0, #1
 8020378:	bcf0      	pop	{r4, r5, r6, r7}
 802037a:	3801      	subs	r0, #1
 802037c:	4770      	bx	lr
 802037e:	bf00      	nop

08020380 <__aeabi_uldivmod>:
 8020380:	b953      	cbnz	r3, 8020398 <__aeabi_uldivmod+0x18>
 8020382:	b94a      	cbnz	r2, 8020398 <__aeabi_uldivmod+0x18>
 8020384:	2900      	cmp	r1, #0
 8020386:	bf08      	it	eq
 8020388:	2800      	cmpeq	r0, #0
 802038a:	bf1c      	itt	ne
 802038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020394:	f000 b974 	b.w	8020680 <__aeabi_idiv0>
 8020398:	f1ad 0c08 	sub.w	ip, sp, #8
 802039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203a0:	f000 f806 	bl	80203b0 <__udivmoddi4>
 80203a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ac:	b004      	add	sp, #16
 80203ae:	4770      	bx	lr

080203b0 <__udivmoddi4>:
 80203b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b4:	9d08      	ldr	r5, [sp, #32]
 80203b6:	4604      	mov	r4, r0
 80203b8:	468e      	mov	lr, r1
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d14d      	bne.n	802045a <__udivmoddi4+0xaa>
 80203be:	428a      	cmp	r2, r1
 80203c0:	4694      	mov	ip, r2
 80203c2:	d969      	bls.n	8020498 <__udivmoddi4+0xe8>
 80203c4:	fab2 f282 	clz	r2, r2
 80203c8:	b152      	cbz	r2, 80203e0 <__udivmoddi4+0x30>
 80203ca:	fa01 f302 	lsl.w	r3, r1, r2
 80203ce:	f1c2 0120 	rsb	r1, r2, #32
 80203d2:	fa20 f101 	lsr.w	r1, r0, r1
 80203d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203da:	ea41 0e03 	orr.w	lr, r1, r3
 80203de:	4094      	lsls	r4, r2
 80203e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203e4:	0c21      	lsrs	r1, r4, #16
 80203e6:	fbbe f6f8 	udiv	r6, lr, r8
 80203ea:	fa1f f78c 	uxth.w	r7, ip
 80203ee:	fb08 e316 	mls	r3, r8, r6, lr
 80203f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80203f6:	fb06 f107 	mul.w	r1, r6, r7
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d90a      	bls.n	8020414 <__udivmoddi4+0x64>
 80203fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020406:	f080 811f 	bcs.w	8020648 <__udivmoddi4+0x298>
 802040a:	4299      	cmp	r1, r3
 802040c:	f240 811c 	bls.w	8020648 <__udivmoddi4+0x298>
 8020410:	3e02      	subs	r6, #2
 8020412:	4463      	add	r3, ip
 8020414:	1a5b      	subs	r3, r3, r1
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb3 f0f8 	udiv	r0, r3, r8
 802041c:	fb08 3310 	mls	r3, r8, r0, r3
 8020420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020424:	fb00 f707 	mul.w	r7, r0, r7
 8020428:	42a7      	cmp	r7, r4
 802042a:	d90a      	bls.n	8020442 <__udivmoddi4+0x92>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020434:	f080 810a 	bcs.w	802064c <__udivmoddi4+0x29c>
 8020438:	42a7      	cmp	r7, r4
 802043a:	f240 8107 	bls.w	802064c <__udivmoddi4+0x29c>
 802043e:	4464      	add	r4, ip
 8020440:	3802      	subs	r0, #2
 8020442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020446:	1be4      	subs	r4, r4, r7
 8020448:	2600      	movs	r6, #0
 802044a:	b11d      	cbz	r5, 8020454 <__udivmoddi4+0xa4>
 802044c:	40d4      	lsrs	r4, r2
 802044e:	2300      	movs	r3, #0
 8020450:	e9c5 4300 	strd	r4, r3, [r5]
 8020454:	4631      	mov	r1, r6
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	428b      	cmp	r3, r1
 802045c:	d909      	bls.n	8020472 <__udivmoddi4+0xc2>
 802045e:	2d00      	cmp	r5, #0
 8020460:	f000 80ef 	beq.w	8020642 <__udivmoddi4+0x292>
 8020464:	2600      	movs	r6, #0
 8020466:	e9c5 0100 	strd	r0, r1, [r5]
 802046a:	4630      	mov	r0, r6
 802046c:	4631      	mov	r1, r6
 802046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020472:	fab3 f683 	clz	r6, r3
 8020476:	2e00      	cmp	r6, #0
 8020478:	d14a      	bne.n	8020510 <__udivmoddi4+0x160>
 802047a:	428b      	cmp	r3, r1
 802047c:	d302      	bcc.n	8020484 <__udivmoddi4+0xd4>
 802047e:	4282      	cmp	r2, r0
 8020480:	f200 80f9 	bhi.w	8020676 <__udivmoddi4+0x2c6>
 8020484:	1a84      	subs	r4, r0, r2
 8020486:	eb61 0303 	sbc.w	r3, r1, r3
 802048a:	2001      	movs	r0, #1
 802048c:	469e      	mov	lr, r3
 802048e:	2d00      	cmp	r5, #0
 8020490:	d0e0      	beq.n	8020454 <__udivmoddi4+0xa4>
 8020492:	e9c5 4e00 	strd	r4, lr, [r5]
 8020496:	e7dd      	b.n	8020454 <__udivmoddi4+0xa4>
 8020498:	b902      	cbnz	r2, 802049c <__udivmoddi4+0xec>
 802049a:	deff      	udf	#255	; 0xff
 802049c:	fab2 f282 	clz	r2, r2
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f040 8092 	bne.w	80205ca <__udivmoddi4+0x21a>
 80204a6:	eba1 010c 	sub.w	r1, r1, ip
 80204aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204ae:	fa1f fe8c 	uxth.w	lr, ip
 80204b2:	2601      	movs	r6, #1
 80204b4:	0c20      	lsrs	r0, r4, #16
 80204b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ba:	fb07 1113 	mls	r1, r7, r3, r1
 80204be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204c2:	fb0e f003 	mul.w	r0, lr, r3
 80204c6:	4288      	cmp	r0, r1
 80204c8:	d908      	bls.n	80204dc <__udivmoddi4+0x12c>
 80204ca:	eb1c 0101 	adds.w	r1, ip, r1
 80204ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80204d2:	d202      	bcs.n	80204da <__udivmoddi4+0x12a>
 80204d4:	4288      	cmp	r0, r1
 80204d6:	f200 80cb 	bhi.w	8020670 <__udivmoddi4+0x2c0>
 80204da:	4643      	mov	r3, r8
 80204dc:	1a09      	subs	r1, r1, r0
 80204de:	b2a4      	uxth	r4, r4
 80204e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204e4:	fb07 1110 	mls	r1, r7, r0, r1
 80204e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204ec:	fb0e fe00 	mul.w	lr, lr, r0
 80204f0:	45a6      	cmp	lr, r4
 80204f2:	d908      	bls.n	8020506 <__udivmoddi4+0x156>
 80204f4:	eb1c 0404 	adds.w	r4, ip, r4
 80204f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80204fc:	d202      	bcs.n	8020504 <__udivmoddi4+0x154>
 80204fe:	45a6      	cmp	lr, r4
 8020500:	f200 80bb 	bhi.w	802067a <__udivmoddi4+0x2ca>
 8020504:	4608      	mov	r0, r1
 8020506:	eba4 040e 	sub.w	r4, r4, lr
 802050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802050e:	e79c      	b.n	802044a <__udivmoddi4+0x9a>
 8020510:	f1c6 0720 	rsb	r7, r6, #32
 8020514:	40b3      	lsls	r3, r6
 8020516:	fa22 fc07 	lsr.w	ip, r2, r7
 802051a:	ea4c 0c03 	orr.w	ip, ip, r3
 802051e:	fa20 f407 	lsr.w	r4, r0, r7
 8020522:	fa01 f306 	lsl.w	r3, r1, r6
 8020526:	431c      	orrs	r4, r3
 8020528:	40f9      	lsrs	r1, r7
 802052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802052e:	fa00 f306 	lsl.w	r3, r0, r6
 8020532:	fbb1 f8f9 	udiv	r8, r1, r9
 8020536:	0c20      	lsrs	r0, r4, #16
 8020538:	fa1f fe8c 	uxth.w	lr, ip
 802053c:	fb09 1118 	mls	r1, r9, r8, r1
 8020540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020544:	fb08 f00e 	mul.w	r0, r8, lr
 8020548:	4288      	cmp	r0, r1
 802054a:	fa02 f206 	lsl.w	r2, r2, r6
 802054e:	d90b      	bls.n	8020568 <__udivmoddi4+0x1b8>
 8020550:	eb1c 0101 	adds.w	r1, ip, r1
 8020554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020558:	f080 8088 	bcs.w	802066c <__udivmoddi4+0x2bc>
 802055c:	4288      	cmp	r0, r1
 802055e:	f240 8085 	bls.w	802066c <__udivmoddi4+0x2bc>
 8020562:	f1a8 0802 	sub.w	r8, r8, #2
 8020566:	4461      	add	r1, ip
 8020568:	1a09      	subs	r1, r1, r0
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020570:	fb09 1110 	mls	r1, r9, r0, r1
 8020574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	458e      	cmp	lr, r1
 802057e:	d908      	bls.n	8020592 <__udivmoddi4+0x1e2>
 8020580:	eb1c 0101 	adds.w	r1, ip, r1
 8020584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020588:	d26c      	bcs.n	8020664 <__udivmoddi4+0x2b4>
 802058a:	458e      	cmp	lr, r1
 802058c:	d96a      	bls.n	8020664 <__udivmoddi4+0x2b4>
 802058e:	3802      	subs	r0, #2
 8020590:	4461      	add	r1, ip
 8020592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020596:	fba0 9402 	umull	r9, r4, r0, r2
 802059a:	eba1 010e 	sub.w	r1, r1, lr
 802059e:	42a1      	cmp	r1, r4
 80205a0:	46c8      	mov	r8, r9
 80205a2:	46a6      	mov	lr, r4
 80205a4:	d356      	bcc.n	8020654 <__udivmoddi4+0x2a4>
 80205a6:	d053      	beq.n	8020650 <__udivmoddi4+0x2a0>
 80205a8:	b15d      	cbz	r5, 80205c2 <__udivmoddi4+0x212>
 80205aa:	ebb3 0208 	subs.w	r2, r3, r8
 80205ae:	eb61 010e 	sbc.w	r1, r1, lr
 80205b2:	fa01 f707 	lsl.w	r7, r1, r7
 80205b6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ba:	40f1      	lsrs	r1, r6
 80205bc:	431f      	orrs	r7, r3
 80205be:	e9c5 7100 	strd	r7, r1, [r5]
 80205c2:	2600      	movs	r6, #0
 80205c4:	4631      	mov	r1, r6
 80205c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	40d8      	lsrs	r0, r3
 80205d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205d4:	fa21 f303 	lsr.w	r3, r1, r3
 80205d8:	4091      	lsls	r1, r2
 80205da:	4301      	orrs	r1, r0
 80205dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205e0:	fa1f fe8c 	uxth.w	lr, ip
 80205e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205e8:	fb07 3610 	mls	r6, r7, r0, r3
 80205ec:	0c0b      	lsrs	r3, r1, #16
 80205ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80205f2:	fb00 f60e 	mul.w	r6, r0, lr
 80205f6:	429e      	cmp	r6, r3
 80205f8:	fa04 f402 	lsl.w	r4, r4, r2
 80205fc:	d908      	bls.n	8020610 <__udivmoddi4+0x260>
 80205fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020606:	d22f      	bcs.n	8020668 <__udivmoddi4+0x2b8>
 8020608:	429e      	cmp	r6, r3
 802060a:	d92d      	bls.n	8020668 <__udivmoddi4+0x2b8>
 802060c:	3802      	subs	r0, #2
 802060e:	4463      	add	r3, ip
 8020610:	1b9b      	subs	r3, r3, r6
 8020612:	b289      	uxth	r1, r1
 8020614:	fbb3 f6f7 	udiv	r6, r3, r7
 8020618:	fb07 3316 	mls	r3, r7, r6, r3
 802061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020620:	fb06 f30e 	mul.w	r3, r6, lr
 8020624:	428b      	cmp	r3, r1
 8020626:	d908      	bls.n	802063a <__udivmoddi4+0x28a>
 8020628:	eb1c 0101 	adds.w	r1, ip, r1
 802062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020630:	d216      	bcs.n	8020660 <__udivmoddi4+0x2b0>
 8020632:	428b      	cmp	r3, r1
 8020634:	d914      	bls.n	8020660 <__udivmoddi4+0x2b0>
 8020636:	3e02      	subs	r6, #2
 8020638:	4461      	add	r1, ip
 802063a:	1ac9      	subs	r1, r1, r3
 802063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020640:	e738      	b.n	80204b4 <__udivmoddi4+0x104>
 8020642:	462e      	mov	r6, r5
 8020644:	4628      	mov	r0, r5
 8020646:	e705      	b.n	8020454 <__udivmoddi4+0xa4>
 8020648:	4606      	mov	r6, r0
 802064a:	e6e3      	b.n	8020414 <__udivmoddi4+0x64>
 802064c:	4618      	mov	r0, r3
 802064e:	e6f8      	b.n	8020442 <__udivmoddi4+0x92>
 8020650:	454b      	cmp	r3, r9
 8020652:	d2a9      	bcs.n	80205a8 <__udivmoddi4+0x1f8>
 8020654:	ebb9 0802 	subs.w	r8, r9, r2
 8020658:	eb64 0e0c 	sbc.w	lr, r4, ip
 802065c:	3801      	subs	r0, #1
 802065e:	e7a3      	b.n	80205a8 <__udivmoddi4+0x1f8>
 8020660:	4646      	mov	r6, r8
 8020662:	e7ea      	b.n	802063a <__udivmoddi4+0x28a>
 8020664:	4620      	mov	r0, r4
 8020666:	e794      	b.n	8020592 <__udivmoddi4+0x1e2>
 8020668:	4640      	mov	r0, r8
 802066a:	e7d1      	b.n	8020610 <__udivmoddi4+0x260>
 802066c:	46d0      	mov	r8, sl
 802066e:	e77b      	b.n	8020568 <__udivmoddi4+0x1b8>
 8020670:	3b02      	subs	r3, #2
 8020672:	4461      	add	r1, ip
 8020674:	e732      	b.n	80204dc <__udivmoddi4+0x12c>
 8020676:	4630      	mov	r0, r6
 8020678:	e709      	b.n	802048e <__udivmoddi4+0xde>
 802067a:	4464      	add	r4, ip
 802067c:	3802      	subs	r0, #2
 802067e:	e742      	b.n	8020506 <__udivmoddi4+0x156>

08020680 <__aeabi_idiv0>:
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop

08020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8020684:	b580      	push	{r7, lr}
 8020686:	b082      	sub	sp, #8
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
 802068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	683a      	ldr	r2, [r7, #0]
 8020692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802069c:	461a      	mov	r2, r3
 802069e:	2300      	movs	r3, #0
 80206a0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
	assert(spiHandle);
 80206a4:	683b      	ldr	r3, [r7, #0]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d105      	bne.n	80206b6 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x32>
 80206aa:	4b05      	ldr	r3, [pc, #20]	; (80206c0 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x3c>)
 80206ac:	4a05      	ldr	r2, [pc, #20]	; (80206c4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x40>)
 80206ae:	210c      	movs	r1, #12
 80206b0:	4805      	ldr	r0, [pc, #20]	; (80206c8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x44>)
 80206b2:	f01f fd89 	bl	80401c8 <__assert_func>
}
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	4618      	mov	r0, r3
 80206ba:	3708      	adds	r7, #8
 80206bc:	46bd      	mov	sp, r7
 80206be:	bd80      	pop	{r7, pc}
 80206c0:	08041288 	.word	0x08041288
 80206c4:	08041294 	.word	0x08041294
 80206c8:	080412c0 	.word	0x080412c0

080206cc <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80206cc:	b590      	push	{r4, r7, lr}
 80206ce:	b08b      	sub	sp, #44	; 0x2c
 80206d0:	af04      	add	r7, sp, #16
 80206d2:	60f8      	str	r0, [r7, #12]
 80206d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80206d8:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80206da:	2300      	movs	r3, #0
 80206dc:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80206de:	230c      	movs	r3, #12
 80206e0:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80206e2:	2300      	movs	r3, #0
 80206e4:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80206ec:	4618      	mov	r0, r3
 80206ee:	f000 fa67 	bl	8020bc0 <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	9302      	str	r3, [sp, #8]
 80206f6:	2300      	movs	r3, #0
 80206f8:	9301      	str	r3, [sp, #4]
 80206fa:	2340      	movs	r3, #64	; 0x40
 80206fc:	9300      	str	r3, [sp, #0]
 80206fe:	4b99      	ldr	r3, [pc, #612]	; (8020964 <_ZN10BHYWrapper4InitEfm+0x298>)
 8020700:	4a99      	ldr	r2, [pc, #612]	; (8020968 <_ZN10BHYWrapper4InitEfm+0x29c>)
 8020702:	499a      	ldr	r1, [pc, #616]	; (802096c <_ZN10BHYWrapper4InitEfm+0x2a0>)
 8020704:	2001      	movs	r0, #1
 8020706:	f00b fd34 	bl	802c172 <bhy2_init>
 802070a:	4603      	mov	r3, r0
 802070c:	2b00      	cmp	r3, #0
 802070e:	bf14      	ite	ne
 8020710:	2301      	movne	r3, #1
 8020712:	2300      	moveq	r3, #0
 8020714:	b2db      	uxtb	r3, r3
 8020716:	2b00      	cmp	r3, #0
 8020718:	d001      	beq.n	802071e <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 802071a:	2301      	movs	r3, #1
 802071c:	e11d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 802071e:	68fb      	ldr	r3, [r7, #12]
 8020720:	4618      	mov	r0, r3
 8020722:	f00b fd0e 	bl	802c142 <bhy2_soft_reset>
 8020726:	4603      	mov	r3, r0
 8020728:	2b00      	cmp	r3, #0
 802072a:	bf14      	ite	ne
 802072c:	2301      	movne	r3, #1
 802072e:	2300      	moveq	r3, #0
 8020730:	b2db      	uxtb	r3, r3
 8020732:	2b00      	cmp	r3, #0
 8020734:	d001      	beq.n	802073a <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 8020736:	2302      	movs	r3, #2
 8020738:	e10f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 802073a:	68fa      	ldr	r2, [r7, #12]
 802073c:	f107 0316 	add.w	r3, r7, #22
 8020740:	4611      	mov	r1, r2
 8020742:	4618      	mov	r0, r3
 8020744:	f00b fbe9 	bl	802bf1a <bhy2_get_product_id>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	bf14      	ite	ne
 802074e:	2301      	movne	r3, #1
 8020750:	2300      	moveq	r3, #0
 8020752:	b2db      	uxtb	r3, r3
 8020754:	2b00      	cmp	r3, #0
 8020756:	d001      	beq.n	802075c <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 8020758:	2303      	movs	r3, #3
 802075a:	e0fe      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 802075c:	7dbb      	ldrb	r3, [r7, #22]
 802075e:	2b89      	cmp	r3, #137	; 0x89
 8020760:	d001      	beq.n	8020766 <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8020762:	2304      	movs	r3, #4
 8020764:	e0f9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 8020766:	7cfb      	ldrb	r3, [r7, #19]
 8020768:	68fa      	ldr	r2, [r7, #12]
 802076a:	4611      	mov	r1, r2
 802076c:	4618      	mov	r0, r3
 802076e:	f00b fc7b 	bl	802c068 <bhy2_set_host_interrupt_ctrl>
 8020772:	4603      	mov	r3, r0
 8020774:	2b00      	cmp	r3, #0
 8020776:	bf14      	ite	ne
 8020778:	2301      	movne	r3, #1
 802077a:	2300      	moveq	r3, #0
 802077c:	b2db      	uxtb	r3, r3
 802077e:	2b00      	cmp	r3, #0
 8020780:	d001      	beq.n	8020786 <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8020782:	2305      	movs	r3, #5
 8020784:	e0e9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 8020786:	68fa      	ldr	r2, [r7, #12]
 8020788:	f107 0313 	add.w	r3, r7, #19
 802078c:	4611      	mov	r1, r2
 802078e:	4618      	mov	r0, r3
 8020790:	f00b fc86 	bl	802c0a0 <bhy2_get_host_interrupt_ctrl>
 8020794:	4603      	mov	r3, r0
 8020796:	2b00      	cmp	r3, #0
 8020798:	bf14      	ite	ne
 802079a:	2301      	movne	r3, #1
 802079c:	2300      	moveq	r3, #0
 802079e:	b2db      	uxtb	r3, r3
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d001      	beq.n	80207a8 <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 80207a4:	2306      	movs	r3, #6
 80207a6:	e0d8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 80207a8:	68fa      	ldr	r2, [r7, #12]
 80207aa:	7dfb      	ldrb	r3, [r7, #23]
 80207ac:	4611      	mov	r1, r2
 80207ae:	4618      	mov	r0, r3
 80207b0:	f00b fcab 	bl	802c10a <bhy2_set_host_intf_ctrl>
 80207b4:	4603      	mov	r3, r0
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	bf14      	ite	ne
 80207ba:	2301      	movne	r3, #1
 80207bc:	2300      	moveq	r3, #0
 80207be:	b2db      	uxtb	r3, r3
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	d001      	beq.n	80207c8 <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80207c4:	2307      	movs	r3, #7
 80207c6:	e0c8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80207c8:	68fa      	ldr	r2, [r7, #12]
 80207ca:	f107 0312 	add.w	r3, r7, #18
 80207ce:	4611      	mov	r1, r2
 80207d0:	4618      	mov	r0, r3
 80207d2:	f00b fbd6 	bl	802bf82 <bhy2_get_boot_status>
 80207d6:	4603      	mov	r3, r0
 80207d8:	2b00      	cmp	r3, #0
 80207da:	bf14      	ite	ne
 80207dc:	2301      	movne	r3, #1
 80207de:	2300      	moveq	r3, #0
 80207e0:	b2db      	uxtb	r3, r3
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d001      	beq.n	80207ea <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80207e6:	2308      	movs	r3, #8
 80207e8:	e0b7      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80207ea:	7cbb      	ldrb	r3, [r7, #18]
 80207ec:	f003 0310 	and.w	r3, r3, #16
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d101      	bne.n	80207f8 <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80207f4:	2309      	movs	r3, #9
 80207f6:	e0b0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80207f8:	68fb      	ldr	r3, [r7, #12]
 80207fa:	461a      	mov	r2, r3
 80207fc:	495c      	ldr	r1, [pc, #368]	; (8020970 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80207fe:	485d      	ldr	r0, [pc, #372]	; (8020974 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 8020800:	f00b fbfb 	bl	802bffa <bhy2_upload_firmware_to_ram>
 8020804:	4603      	mov	r3, r0
 8020806:	2b00      	cmp	r3, #0
 8020808:	bf14      	ite	ne
 802080a:	2301      	movne	r3, #1
 802080c:	2300      	moveq	r3, #0
 802080e:	b2db      	uxtb	r3, r3
 8020810:	2b00      	cmp	r3, #0
 8020812:	d001      	beq.n	8020818 <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8020814:	2309      	movs	r3, #9
 8020816:	e0a0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020818:	68fa      	ldr	r2, [r7, #12]
 802081a:	f107 0311 	add.w	r3, r7, #17
 802081e:	4611      	mov	r1, r2
 8020820:	4618      	mov	r0, r3
 8020822:	f00b fd8d 	bl	802c340 <bhy2_get_error_value>
 8020826:	4603      	mov	r3, r0
 8020828:	2b00      	cmp	r3, #0
 802082a:	bf14      	ite	ne
 802082c:	2301      	movne	r3, #1
 802082e:	2300      	moveq	r3, #0
 8020830:	b2db      	uxtb	r3, r3
 8020832:	2b00      	cmp	r3, #0
 8020834:	d001      	beq.n	802083a <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 8020836:	230a      	movs	r3, #10
 8020838:	e08f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 802083a:	7c7b      	ldrb	r3, [r7, #17]
 802083c:	2b00      	cmp	r3, #0
 802083e:	d001      	beq.n	8020844 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8020840:	230b      	movs	r3, #11
 8020842:	e08a      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	4618      	mov	r0, r3
 8020848:	f00b fbf6 	bl	802c038 <bhy2_boot_from_ram>
 802084c:	4603      	mov	r3, r0
 802084e:	2b00      	cmp	r3, #0
 8020850:	bf14      	ite	ne
 8020852:	2301      	movne	r3, #1
 8020854:	2300      	moveq	r3, #0
 8020856:	b2db      	uxtb	r3, r3
 8020858:	2b00      	cmp	r3, #0
 802085a:	d001      	beq.n	8020860 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 802085c:	230c      	movs	r3, #12
 802085e:	e07c      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020860:	68fa      	ldr	r2, [r7, #12]
 8020862:	f107 0311 	add.w	r3, r7, #17
 8020866:	4611      	mov	r1, r2
 8020868:	4618      	mov	r0, r3
 802086a:	f00b fd69 	bl	802c340 <bhy2_get_error_value>
 802086e:	4603      	mov	r3, r0
 8020870:	2b00      	cmp	r3, #0
 8020872:	bf14      	ite	ne
 8020874:	2301      	movne	r3, #1
 8020876:	2300      	moveq	r3, #0
 8020878:	b2db      	uxtb	r3, r3
 802087a:	2b00      	cmp	r3, #0
 802087c:	d001      	beq.n	8020882 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 802087e:	230d      	movs	r3, #13
 8020880:	e06b      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8020882:	7c7b      	ldrb	r3, [r7, #17]
 8020884:	2b00      	cmp	r3, #0
 8020886:	d001      	beq.n	802088c <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 8020888:	230e      	movs	r3, #14
 802088a:	e066      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 802088c:	68fa      	ldr	r2, [r7, #12]
 802088e:	f107 0314 	add.w	r3, r7, #20
 8020892:	4611      	mov	r1, r2
 8020894:	4618      	mov	r0, r3
 8020896:	f00b fb5a 	bl	802bf4e <bhy2_get_kernel_version>
 802089a:	4603      	mov	r3, r0
 802089c:	2b00      	cmp	r3, #0
 802089e:	bf14      	ite	ne
 80208a0:	2301      	movne	r3, #1
 80208a2:	2300      	moveq	r3, #0
 80208a4:	b2db      	uxtb	r3, r3
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d001      	beq.n	80208ae <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 80208aa:	230f      	movs	r3, #15
 80208ac:	e055      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80208ae:	8abb      	ldrh	r3, [r7, #20]
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d101      	bne.n	80208b8 <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80208b4:	2310      	movs	r3, #16
 80208b6:	e050      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80208b8:	68fb      	ldr	r3, [r7, #12]
 80208ba:	f241 123c 	movw	r2, #4412	; 0x113c
 80208be:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80208c0:	68fb      	ldr	r3, [r7, #12]
 80208c2:	492d      	ldr	r1, [pc, #180]	; (8020978 <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80208c4:	2025      	movs	r0, #37	; 0x25
 80208c6:	f00b fc7e 	bl	802c1c6 <bhy2_register_fifo_parse_callback>
 80208ca:	4603      	mov	r3, r0
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	bf14      	ite	ne
 80208d0:	2301      	movne	r3, #1
 80208d2:	2300      	moveq	r3, #0
 80208d4:	b2db      	uxtb	r3, r3
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d001      	beq.n	80208de <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80208da:	2311      	movs	r3, #17
 80208dc:	e03d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80208de:	68fb      	ldr	r3, [r7, #12]
 80208e0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208e4:	4618      	mov	r0, r3
 80208e6:	f000 f946 	bl	8020b76 <_ZNSt5arrayIhLj2048EE4dataEv>
 80208ea:	4604      	mov	r4, r0
 80208ec:	68fb      	ldr	r3, [r7, #12]
 80208ee:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208f2:	4618      	mov	r0, r3
 80208f4:	f000 f94c 	bl	8020b90 <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80208f8:	4601      	mov	r1, r0
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	461a      	mov	r2, r3
 80208fe:	4620      	mov	r0, r4
 8020900:	f00b f9b9 	bl	802bc76 <bhy2_get_and_process_fifo>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	bf14      	ite	ne
 802090a:	2301      	movne	r3, #1
 802090c:	2300      	moveq	r3, #0
 802090e:	b2db      	uxtb	r3, r3
 8020910:	2b00      	cmp	r3, #0
 8020912:	d001      	beq.n	8020918 <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8020914:	2312      	movs	r3, #18
 8020916:	e020      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	4618      	mov	r0, r3
 802091c:	f00b fc82 	bl	802c224 <bhy2_update_virtual_sensor_list>
 8020920:	4603      	mov	r3, r0
 8020922:	2b00      	cmp	r3, #0
 8020924:	bf14      	ite	ne
 8020926:	2301      	movne	r3, #1
 8020928:	2300      	moveq	r3, #0
 802092a:	b2db      	uxtb	r3, r3
 802092c:	2b00      	cmp	r3, #0
 802092e:	d001      	beq.n	8020934 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8020930:	2310      	movs	r3, #16
 8020932:	e012      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8020934:	68fb      	ldr	r3, [r7, #12]
 8020936:	461a      	mov	r2, r3
 8020938:	6879      	ldr	r1, [r7, #4]
 802093a:	ed97 0a02 	vldr	s0, [r7, #8]
 802093e:	2025      	movs	r0, #37	; 0x25
 8020940:	f00b faca 	bl	802bed8 <bhy2_set_virt_sensor_cfg>
 8020944:	4603      	mov	r3, r0
 8020946:	2b00      	cmp	r3, #0
 8020948:	bf14      	ite	ne
 802094a:	2301      	movne	r3, #1
 802094c:	2300      	moveq	r3, #0
 802094e:	b2db      	uxtb	r3, r3
 8020950:	2b00      	cmp	r3, #0
 8020952:	d001      	beq.n	8020958 <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8020954:	2311      	movs	r3, #17
 8020956:	e000      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 8020958:	2300      	movs	r3, #0
}
 802095a:	4618      	mov	r0, r3
 802095c:	371c      	adds	r7, #28
 802095e:	46bd      	mov	sp, r7
 8020960:	bd90      	pop	{r4, r7, pc}
 8020962:	bf00      	nop
 8020964:	08020d91 	.word	0x08020d91
 8020968:	08020d0d 	.word	0x08020d0d
 802096c:	08020c91 	.word	0x08020c91
 8020970:	0001a66c 	.word	0x0001a66c
 8020974:	08041f8c 	.word	0x08041f8c
 8020978:	08020a31 	.word	0x08020a31

0802097c <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 802097c:	b590      	push	{r4, r7, lr}
 802097e:	b085      	sub	sp, #20
 8020980:	af00      	add	r7, sp, #0
 8020982:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8020984:	2300      	movs	r3, #0
 8020986:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 8020988:	687a      	ldr	r2, [r7, #4]
 802098a:	f107 030f 	add.w	r3, r7, #15
 802098e:	4611      	mov	r1, r2
 8020990:	4618      	mov	r0, r3
 8020992:	f00b fba0 	bl	802c0d6 <bhy2_get_interrupt_status>

	if (interruptStatus) {
 8020996:	7bfb      	ldrb	r3, [r7, #15]
 8020998:	2b00      	cmp	r3, #0
 802099a:	d028      	beq.n	80209ee <_ZN10BHYWrapper4PollEv+0x72>
		assert(
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209a2:	4618      	mov	r0, r3
 80209a4:	f000 f8e7 	bl	8020b76 <_ZNSt5arrayIhLj2048EE4dataEv>
 80209a8:	4604      	mov	r4, r0
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209b0:	4618      	mov	r0, r3
 80209b2:	f000 f8ed 	bl	8020b90 <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80209b6:	4601      	mov	r1, r0
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	461a      	mov	r2, r3
 80209bc:	4620      	mov	r0, r4
 80209be:	f00b f95a 	bl	802bc76 <bhy2_get_and_process_fifo>
 80209c2:	4603      	mov	r3, r0
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	d005      	beq.n	80209d4 <_ZN10BHYWrapper4PollEv+0x58>
 80209c8:	4b0b      	ldr	r3, [pc, #44]	; (80209f8 <_ZN10BHYWrapper4PollEv+0x7c>)
 80209ca:	4a0c      	ldr	r2, [pc, #48]	; (80209fc <_ZN10BHYWrapper4PollEv+0x80>)
 80209cc:	2166      	movs	r1, #102	; 0x66
 80209ce:	480c      	ldr	r0, [pc, #48]	; (8020a00 <_ZN10BHYWrapper4PollEv+0x84>)
 80209d0:	f01f fbfa 	bl	80401c8 <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		frameSeq++;
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80209da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80209de:	3301      	adds	r3, #1
 80209e0:	687a      	ldr	r2, [r7, #4]
 80209e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80209e6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
		return true;
 80209ea:	2301      	movs	r3, #1
 80209ec:	e000      	b.n	80209f0 <_ZN10BHYWrapper4PollEv+0x74>
	}

	return false;
 80209ee:	2300      	movs	r3, #0
}
 80209f0:	4618      	mov	r0, r3
 80209f2:	3714      	adds	r7, #20
 80209f4:	46bd      	mov	sp, r7
 80209f6:	bd90      	pop	{r4, r7, pc}
 80209f8:	080412dc 	.word	0x080412dc
 80209fc:	08041330 	.word	0x08041330
 8020a00:	080412c0 	.word	0x080412c0

08020a04 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 8020a04:	b4b0      	push	{r4, r5, r7}
 8020a06:	b083      	sub	sp, #12
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	6078      	str	r0, [r7, #4]
 8020a0c:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 8020a0e:	687a      	ldr	r2, [r7, #4]
 8020a10:	683b      	ldr	r3, [r7, #0]
 8020a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020a16:	4615      	mov	r5, r2
 8020a18:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 8020a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020a20:	6823      	ldr	r3, [r4, #0]
 8020a22:	602b      	str	r3, [r5, #0]
}
 8020a24:	6878      	ldr	r0, [r7, #4]
 8020a26:	370c      	adds	r7, #12
 8020a28:	46bd      	mov	sp, r7
 8020a2a:	bcb0      	pop	{r4, r5, r7}
 8020a2c:	4770      	bx	lr
	...

08020a30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8020a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020a34:	b08e      	sub	sp, #56	; 0x38
 8020a36:	af00      	add	r7, sp, #0
 8020a38:	60f8      	str	r0, [r7, #12]
 8020a3a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8020a3c:	68bb      	ldr	r3, [r7, #8]
 8020a3e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8020a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d105      	bne.n	8020a52 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8020a46:	4b40      	ldr	r3, [pc, #256]	; (8020b48 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8020a48:	4a40      	ldr	r2, [pc, #256]	; (8020b4c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8020a4a:	2178      	movs	r1, #120	; 0x78
 8020a4c:	4840      	ldr	r0, [pc, #256]	; (8020b50 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8020a4e:	f01f fbbb 	bl	80401c8 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8020a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a54:	3308      	adds	r3, #8
 8020a56:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8020a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	789b      	ldrb	r3, [r3, #2]
 8020a60:	2b0b      	cmp	r3, #11
 8020a62:	d167      	bne.n	8020b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8020a64:	68fb      	ldr	r3, [r7, #12]
 8020a66:	685b      	ldr	r3, [r3, #4]
 8020a68:	f107 0214 	add.w	r2, r7, #20
 8020a6c:	4611      	mov	r1, r2
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f00c fded 	bl	802d64e <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8020a74:	68fb      	ldr	r3, [r7, #12]
 8020a76:	781a      	ldrb	r2, [r3, #0]
 8020a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a7a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8020a7c:	68fb      	ldr	r3, [r7, #12]
 8020a7e:	689b      	ldr	r3, [r3, #8]
 8020a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020a84:	4602      	mov	r2, r0
 8020a86:	460b      	mov	r3, r1
 8020a88:	f04f 0a00 	mov.w	sl, #0
 8020a8c:	f04f 0b00 	mov.w	fp, #0
 8020a90:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8020a94:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8020a98:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8020a9c:	4652      	mov	r2, sl
 8020a9e:	465b      	mov	r3, fp
 8020aa0:	ebb2 0800 	subs.w	r8, r2, r0
 8020aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8020aa8:	f04f 0200 	mov.w	r2, #0
 8020aac:	f04f 0300 	mov.w	r3, #0
 8020ab0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8020ab4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8020ab8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8020abc:	ebb2 0408 	subs.w	r4, r2, r8
 8020ac0:	eb63 0509 	sbc.w	r5, r3, r9
 8020ac4:	f04f 0200 	mov.w	r2, #0
 8020ac8:	f04f 0300 	mov.w	r3, #0
 8020acc:	00eb      	lsls	r3, r5, #3
 8020ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020ad2:	00e2      	lsls	r2, r4, #3
 8020ad4:	4614      	mov	r4, r2
 8020ad6:	461d      	mov	r5, r3
 8020ad8:	1823      	adds	r3, r4, r0
 8020ada:	603b      	str	r3, [r7, #0]
 8020adc:	eb45 0301 	adc.w	r3, r5, r1
 8020ae0:	607b      	str	r3, [r7, #4]
 8020ae2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020ae6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8020aea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020aee:	a314      	add	r3, pc, #80	; (adr r3, 8020b40 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8020af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020af4:	f7ff fc44 	bl	8020380 <__aeabi_uldivmod>
 8020af8:	4602      	mov	r2, r0
 8020afa:	460b      	mov	r3, r1
 8020afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020afe:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8020b00:	6a3a      	ldr	r2, [r7, #32]
 8020b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	4913      	ldr	r1, [pc, #76]	; (8020b54 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8020b08:	fb01 f303 	mul.w	r3, r1, r3
 8020b0c:	1ad2      	subs	r2, r2, r3
 8020b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b10:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8020b12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b18:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8020b1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b20:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8020b22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8020b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b28:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8020b2a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8020b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b30:	80da      	strh	r2, [r3, #6]
 8020b32:	e000      	b.n	8020b36 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8020b34:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8020b36:	3738      	adds	r7, #56	; 0x38
 8020b38:	46bd      	mov	sp, r7
 8020b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020b3e:	bf00      	nop
 8020b40:	3b9aca00 	.word	0x3b9aca00
 8020b44:	00000000 	.word	0x00000000
 8020b48:	08041348 	.word	0x08041348
 8020b4c:	08041350 	.word	0x08041350
 8020b50:	080412c0 	.word	0x080412c0
 8020b54:	3b9aca00 	.word	0x3b9aca00

08020b58 <_ZNK10BHYWrapper6GetSeqEv>:

size_t BHYWrapper::GetSeq() const {
 8020b58:	b480      	push	{r7}
 8020b5a:	b083      	sub	sp, #12
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	6078      	str	r0, [r7, #4]
	return frameSeq;
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020b66:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
}
 8020b6a:	4618      	mov	r0, r3
 8020b6c:	370c      	adds	r7, #12
 8020b6e:	46bd      	mov	sp, r7
 8020b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b74:	4770      	bx	lr

08020b76 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8020b76:	b580      	push	{r7, lr}
 8020b78:	b082      	sub	sp, #8
 8020b7a:	af00      	add	r7, sp, #0
 8020b7c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8020b7e:	687b      	ldr	r3, [r7, #4]
 8020b80:	4618      	mov	r0, r3
 8020b82:	f000 f811 	bl	8020ba8 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8020b86:	4603      	mov	r3, r0
 8020b88:	4618      	mov	r0, r3
 8020b8a:	3708      	adds	r7, #8
 8020b8c:	46bd      	mov	sp, r7
 8020b8e:	bd80      	pop	{r7, pc}

08020b90 <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8020b90:	b480      	push	{r7}
 8020b92:	b083      	sub	sp, #12
 8020b94:	af00      	add	r7, sp, #0
 8020b96:	6078      	str	r0, [r7, #4]
 8020b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020b9c:	4618      	mov	r0, r3
 8020b9e:	370c      	adds	r7, #12
 8020ba0:	46bd      	mov	sp, r7
 8020ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ba6:	4770      	bx	lr

08020ba8 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8020ba8:	b480      	push	{r7}
 8020baa:	b083      	sub	sp, #12
 8020bac:	af00      	add	r7, sp, #0
 8020bae:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8020bb0:	687b      	ldr	r3, [r7, #4]
 8020bb2:	4618      	mov	r0, r3
 8020bb4:	370c      	adds	r7, #12
 8020bb6:	46bd      	mov	sp, r7
 8020bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bbc:	4770      	bx	lr
	...

08020bc0 <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8020bc0:	b480      	push	{r7}
 8020bc2:	b083      	sub	sp, #12
 8020bc4:	af00      	add	r7, sp, #0
 8020bc6:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8020bc8:	4a04      	ldr	r2, [pc, #16]	; (8020bdc <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	6013      	str	r3, [r2, #0]
}
 8020bce:	bf00      	nop
 8020bd0:	370c      	adds	r7, #12
 8020bd2:	46bd      	mov	sp, r7
 8020bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bd8:	4770      	bx	lr
 8020bda:	bf00      	nop
 8020bdc:	24000184 	.word	0x24000184

08020be0 <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8020be0:	b580      	push	{r7, lr}
 8020be2:	b082      	sub	sp, #8
 8020be4:	af00      	add	r7, sp, #0
 8020be6:	6078      	str	r0, [r7, #4]
 8020be8:	460b      	mov	r3, r1
 8020bea:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8020bec:	4b11      	ldr	r3, [pc, #68]	; (8020c34 <_Z11spiTransmitPht+0x54>)
 8020bee:	681b      	ldr	r3, [r3, #0]
 8020bf0:	887a      	ldrh	r2, [r7, #2]
 8020bf2:	6879      	ldr	r1, [r7, #4]
 8020bf4:	4618      	mov	r0, r3
 8020bf6:	f016 fe7d 	bl	80378f4 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020bfa:	4b0e      	ldr	r3, [pc, #56]	; (8020c34 <_Z11spiTransmitPht+0x54>)
 8020bfc:	681b      	ldr	r3, [r3, #0]
 8020bfe:	4618      	mov	r0, r3
 8020c00:	f017 fd06 	bl	8038610 <HAL_SPI_GetState>
 8020c04:	4603      	mov	r3, r0
 8020c06:	2b01      	cmp	r3, #1
 8020c08:	bf14      	ite	ne
 8020c0a:	2301      	movne	r3, #1
 8020c0c:	2300      	moveq	r3, #0
 8020c0e:	b2db      	uxtb	r3, r3
 8020c10:	2b00      	cmp	r3, #0
 8020c12:	d000      	beq.n	8020c16 <_Z11spiTransmitPht+0x36>
 8020c14:	e7f1      	b.n	8020bfa <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020c16:	4b07      	ldr	r3, [pc, #28]	; (8020c34 <_Z11spiTransmitPht+0x54>)
 8020c18:	681b      	ldr	r3, [r3, #0]
 8020c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020c1e:	2b00      	cmp	r3, #0
 8020c20:	bf0c      	ite	eq
 8020c22:	2301      	moveq	r3, #1
 8020c24:	2300      	movne	r3, #0
 8020c26:	b2db      	uxtb	r3, r3
 8020c28:	b25b      	sxtb	r3, r3
  }
 8020c2a:	4618      	mov	r0, r3
 8020c2c:	3708      	adds	r7, #8
 8020c2e:	46bd      	mov	sp, r7
 8020c30:	bd80      	pop	{r7, pc}
 8020c32:	bf00      	nop
 8020c34:	24000184 	.word	0x24000184

08020c38 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8020c38:	b580      	push	{r7, lr}
 8020c3a:	b082      	sub	sp, #8
 8020c3c:	af00      	add	r7, sp, #0
 8020c3e:	6078      	str	r0, [r7, #4]
 8020c40:	460b      	mov	r3, r1
 8020c42:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8020c44:	4b11      	ldr	r3, [pc, #68]	; (8020c8c <_Z9spiReceivPht+0x54>)
 8020c46:	681b      	ldr	r3, [r3, #0]
 8020c48:	887a      	ldrh	r2, [r7, #2]
 8020c4a:	6879      	ldr	r1, [r7, #4]
 8020c4c:	4618      	mov	r0, r3
 8020c4e:	f016 ff9b 	bl	8037b88 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020c52:	4b0e      	ldr	r3, [pc, #56]	; (8020c8c <_Z9spiReceivPht+0x54>)
 8020c54:	681b      	ldr	r3, [r3, #0]
 8020c56:	4618      	mov	r0, r3
 8020c58:	f017 fcda 	bl	8038610 <HAL_SPI_GetState>
 8020c5c:	4603      	mov	r3, r0
 8020c5e:	2b01      	cmp	r3, #1
 8020c60:	bf14      	ite	ne
 8020c62:	2301      	movne	r3, #1
 8020c64:	2300      	moveq	r3, #0
 8020c66:	b2db      	uxtb	r3, r3
 8020c68:	2b00      	cmp	r3, #0
 8020c6a:	d000      	beq.n	8020c6e <_Z9spiReceivPht+0x36>
 8020c6c:	e7f1      	b.n	8020c52 <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020c6e:	4b07      	ldr	r3, [pc, #28]	; (8020c8c <_Z9spiReceivPht+0x54>)
 8020c70:	681b      	ldr	r3, [r3, #0]
 8020c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020c76:	2b00      	cmp	r3, #0
 8020c78:	bf0c      	ite	eq
 8020c7a:	2301      	moveq	r3, #1
 8020c7c:	2300      	movne	r3, #0
 8020c7e:	b2db      	uxtb	r3, r3
 8020c80:	b25b      	sxtb	r3, r3
  }
 8020c82:	4618      	mov	r0, r3
 8020c84:	3708      	adds	r7, #8
 8020c86:	46bd      	mov	sp, r7
 8020c88:	bd80      	pop	{r7, pc}
 8020c8a:	bf00      	nop
 8020c8c:	24000184 	.word	0x24000184

08020c90 <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020c90:	b580      	push	{r7, lr}
 8020c92:	b084      	sub	sp, #16
 8020c94:	af00      	add	r7, sp, #0
 8020c96:	60b9      	str	r1, [r7, #8]
 8020c98:	607a      	str	r2, [r7, #4]
 8020c9a:	603b      	str	r3, [r7, #0]
 8020c9c:	4603      	mov	r3, r0
 8020c9e:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020ca0:	4b19      	ldr	r3, [pc, #100]	; (8020d08 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020ca2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020ca6:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8020ca8:	f107 030f 	add.w	r3, r7, #15
 8020cac:	2101      	movs	r1, #1
 8020cae:	4618      	mov	r0, r3
 8020cb0:	f7ff ff96 	bl	8020be0 <_Z11spiTransmitPht>
 8020cb4:	4603      	mov	r3, r0
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	bf0c      	ite	eq
 8020cba:	2301      	moveq	r3, #1
 8020cbc:	2300      	movne	r3, #0
 8020cbe:	b2db      	uxtb	r3, r3
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	d002      	beq.n	8020cca <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8020cc4:	f06f 0301 	mvn.w	r3, #1
 8020cc8:	e019      	b.n	8020cfe <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	b29b      	uxth	r3, r3
 8020cce:	4619      	mov	r1, r3
 8020cd0:	68b8      	ldr	r0, [r7, #8]
 8020cd2:	f7ff ffb1 	bl	8020c38 <_Z9spiReceivPht>
 8020cd6:	4603      	mov	r3, r0
 8020cd8:	2b00      	cmp	r3, #0
 8020cda:	bf14      	ite	ne
 8020cdc:	2301      	movne	r3, #1
 8020cde:	2300      	moveq	r3, #0
 8020ce0:	b2db      	uxtb	r3, r3
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	d005      	beq.n	8020cf2 <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020ce6:	4b08      	ldr	r3, [pc, #32]	; (8020d08 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020ce8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020cec:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8020cee:	2300      	movs	r3, #0
 8020cf0:	e005      	b.n	8020cfe <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020cf2:	4b05      	ldr	r3, [pc, #20]	; (8020d08 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020cf4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020cf8:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8020cfa:	f06f 0301 	mvn.w	r3, #1
  }
 8020cfe:	4618      	mov	r0, r3
 8020d00:	3710      	adds	r7, #16
 8020d02:	46bd      	mov	sp, r7
 8020d04:	bd80      	pop	{r7, pc}
 8020d06:	bf00      	nop
 8020d08:	58021000 	.word	0x58021000

08020d0c <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020d0c:	b580      	push	{r7, lr}
 8020d0e:	b084      	sub	sp, #16
 8020d10:	af00      	add	r7, sp, #0
 8020d12:	60b9      	str	r1, [r7, #8]
 8020d14:	607a      	str	r2, [r7, #4]
 8020d16:	603b      	str	r3, [r7, #0]
 8020d18:	4603      	mov	r3, r0
 8020d1a:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	2b40      	cmp	r3, #64	; 0x40
 8020d20:	d902      	bls.n	8020d28 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8020d22:	f06f 0303 	mvn.w	r3, #3
 8020d26:	e028      	b.n	8020d7a <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8020d28:	4a16      	ldr	r2, [pc, #88]	; (8020d84 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020d2a:	7bfb      	ldrb	r3, [r7, #15]
 8020d2c:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8020d2e:	4b16      	ldr	r3, [pc, #88]	; (8020d88 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8020d30:	687a      	ldr	r2, [r7, #4]
 8020d32:	68b9      	ldr	r1, [r7, #8]
 8020d34:	4618      	mov	r0, r3
 8020d36:	f01f fab1 	bl	804029c <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020d3a:	4b14      	ldr	r3, [pc, #80]	; (8020d8c <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020d3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020d40:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8020d42:	687b      	ldr	r3, [r7, #4]
 8020d44:	b29b      	uxth	r3, r3
 8020d46:	3301      	adds	r3, #1
 8020d48:	b29b      	uxth	r3, r3
 8020d4a:	4619      	mov	r1, r3
 8020d4c:	480d      	ldr	r0, [pc, #52]	; (8020d84 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020d4e:	f7ff ff47 	bl	8020be0 <_Z11spiTransmitPht>
 8020d52:	4603      	mov	r3, r0
 8020d54:	2b00      	cmp	r3, #0
 8020d56:	bf14      	ite	ne
 8020d58:	2301      	movne	r3, #1
 8020d5a:	2300      	moveq	r3, #0
 8020d5c:	b2db      	uxtb	r3, r3
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d005      	beq.n	8020d6e <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020d62:	4b0a      	ldr	r3, [pc, #40]	; (8020d8c <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020d64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020d68:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8020d6a:	2300      	movs	r3, #0
 8020d6c:	e005      	b.n	8020d7a <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020d6e:	4b07      	ldr	r3, [pc, #28]	; (8020d8c <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020d70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020d74:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8020d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8020d7a:	4618      	mov	r0, r3
 8020d7c:	3710      	adds	r7, #16
 8020d7e:	46bd      	mov	sp, r7
 8020d80:	bd80      	pop	{r7, pc}
 8020d82:	bf00      	nop
 8020d84:	24000188 	.word	0x24000188
 8020d88:	24000189 	.word	0x24000189
 8020d8c:	58021000 	.word	0x58021000

08020d90 <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8020d90:	b580      	push	{r7, lr}
 8020d92:	b082      	sub	sp, #8
 8020d94:	af00      	add	r7, sp, #0
 8020d96:	6078      	str	r0, [r7, #4]
 8020d98:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8020d9a:	687b      	ldr	r3, [r7, #4]
 8020d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8020da0:	d308      	bcc.n	8020db4 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8020da2:	687b      	ldr	r3, [r7, #4]
 8020da4:	4a0b      	ldr	r2, [pc, #44]	; (8020dd4 <_Z13bhy2_delay_usmPv+0x44>)
 8020da6:	fba2 2303 	umull	r2, r3, r2, r3
 8020daa:	099b      	lsrs	r3, r3, #6
 8020dac:	4618      	mov	r0, r3
 8020dae:	f00e f99d 	bl	802f0ec <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8020db2:	e00b      	b.n	8020dcc <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	1e5a      	subs	r2, r3, #1
 8020db8:	607a      	str	r2, [r7, #4]
 8020dba:	2b00      	cmp	r3, #0
 8020dbc:	bf14      	ite	ne
 8020dbe:	2301      	movne	r3, #1
 8020dc0:	2300      	moveq	r3, #0
 8020dc2:	b2db      	uxtb	r3, r3
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	d001      	beq.n	8020dcc <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8020dc8:	bf00      	nop
    while( us-- ) {
 8020dca:	e7f3      	b.n	8020db4 <_Z13bhy2_delay_usmPv+0x24>
  }
 8020dcc:	bf00      	nop
 8020dce:	3708      	adds	r7, #8
 8020dd0:	46bd      	mov	sp, r7
 8020dd2:	bd80      	pop	{r7, pc}
 8020dd4:	10624dd3 	.word	0x10624dd3

08020dd8 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8020dd8:	b480      	push	{r7}
 8020dda:	b083      	sub	sp, #12
 8020ddc:	af00      	add	r7, sp, #0
 8020dde:	6078      	str	r0, [r7, #4]
 8020de0:	687b      	ldr	r3, [r7, #4]
 8020de2:	2b00      	cmp	r3, #0
 8020de4:	bfb8      	it	lt
 8020de6:	425b      	neglt	r3, r3
 8020de8:	4618      	mov	r0, r3
 8020dea:	370c      	adds	r7, #12
 8020dec:	46bd      	mov	sp, r7
 8020dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020df2:	4770      	bx	lr

08020df4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8020df4:	b480      	push	{r7}
 8020df6:	b083      	sub	sp, #12
 8020df8:	af00      	add	r7, sp, #0
 8020dfa:	6078      	str	r0, [r7, #4]
 8020dfc:	6039      	str	r1, [r7, #0]
 8020dfe:	683b      	ldr	r3, [r7, #0]
 8020e00:	4618      	mov	r0, r3
 8020e02:	370c      	adds	r7, #12
 8020e04:	46bd      	mov	sp, r7
 8020e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e0a:	4770      	bx	lr

08020e0c <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8020e0c:	b480      	push	{r7}
 8020e0e:	b083      	sub	sp, #12
 8020e10:	af00      	add	r7, sp, #0
 8020e12:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8020e14:	687b      	ldr	r3, [r7, #4]
 8020e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020e1a:	d205      	bcs.n	8020e28 <_ZSt16__deque_buf_sizej+0x1c>
 8020e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020e20:	687b      	ldr	r3, [r7, #4]
 8020e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8020e26:	e000      	b.n	8020e2a <_ZSt16__deque_buf_sizej+0x1e>
 8020e28:	2301      	movs	r3, #1
 8020e2a:	4618      	mov	r0, r3
 8020e2c:	370c      	adds	r7, #12
 8020e2e:	46bd      	mov	sp, r7
 8020e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e34:	4770      	bx	lr

08020e36 <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static constexpr Type SetPeriod = 3;

		static uint8_t Serialize(Type mode) {
			return mode;
		}
		static Type Deserialize(uint8_t val) {
 8020e36:	b480      	push	{r7}
 8020e38:	b083      	sub	sp, #12
 8020e3a:	af00      	add	r7, sp, #0
 8020e3c:	4603      	mov	r3, r0
 8020e3e:	71fb      	strb	r3, [r7, #7]
			return val;
 8020e40:	79fb      	ldrb	r3, [r7, #7]
		}
 8020e42:	4618      	mov	r0, r3
 8020e44:	370c      	adds	r7, #12
 8020e46:	46bd      	mov	sp, r7
 8020e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e4c:	4770      	bx	lr

08020e4e <_ZN11QueueSender9ErrorCode9SerializeEh>:
		static constexpr Type NACK = 2;
		static constexpr Type Unknown = 3;
		static constexpr Type BadPeriod = 4;
		static constexpr Type QueueFull = 5;

		static uint8_t Serialize(Type error) {
 8020e4e:	b480      	push	{r7}
 8020e50:	b083      	sub	sp, #12
 8020e52:	af00      	add	r7, sp, #0
 8020e54:	4603      	mov	r3, r0
 8020e56:	71fb      	strb	r3, [r7, #7]
			return error;
 8020e58:	79fb      	ldrb	r3, [r7, #7]
		}
 8020e5a:	4618      	mov	r0, r3
 8020e5c:	370c      	adds	r7, #12
 8020e5e:	46bd      	mov	sp, r7
 8020e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e64:	4770      	bx	lr
	...

08020e68 <_ZN11QueueSender4Info11SerializeToEPPh>:
		uint16_t NumRequests;
		uint16_t NumResponces;

		static constexpr size_t Size = 2 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8020e68:	b580      	push	{r7, lr}
 8020e6a:	b082      	sub	sp, #8
 8020e6c:	af00      	add	r7, sp, #0
 8020e6e:	6078      	str	r0, [r7, #4]
 8020e70:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8020e72:	683b      	ldr	r3, [r7, #0]
 8020e74:	2b00      	cmp	r3, #0
 8020e76:	d105      	bne.n	8020e84 <_ZN11QueueSender4Info11SerializeToEPPh+0x1c>
 8020e78:	4b13      	ldr	r3, [pc, #76]	; (8020ec8 <_ZN11QueueSender4Info11SerializeToEPPh+0x60>)
 8020e7a:	4a14      	ldr	r2, [pc, #80]	; (8020ecc <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020e7c:	21a5      	movs	r1, #165	; 0xa5
 8020e7e:	4814      	ldr	r0, [pc, #80]	; (8020ed0 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020e80:	f01f f9a2 	bl	80401c8 <__assert_func>
			assert(*ptr);
 8020e84:	683b      	ldr	r3, [r7, #0]
 8020e86:	681b      	ldr	r3, [r3, #0]
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	d105      	bne.n	8020e98 <_ZN11QueueSender4Info11SerializeToEPPh+0x30>
 8020e8c:	4b11      	ldr	r3, [pc, #68]	; (8020ed4 <_ZN11QueueSender4Info11SerializeToEPPh+0x6c>)
 8020e8e:	4a0f      	ldr	r2, [pc, #60]	; (8020ecc <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020e90:	21a6      	movs	r1, #166	; 0xa6
 8020e92:	480f      	ldr	r0, [pc, #60]	; (8020ed0 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020e94:	f01f f998 	bl	80401c8 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = NumRequests;
 8020e98:	683b      	ldr	r3, [r7, #0]
 8020e9a:	681b      	ldr	r3, [r3, #0]
 8020e9c:	687a      	ldr	r2, [r7, #4]
 8020e9e:	8812      	ldrh	r2, [r2, #0]
 8020ea0:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020ea2:	683b      	ldr	r3, [r7, #0]
 8020ea4:	681b      	ldr	r3, [r3, #0]
 8020ea6:	1c9a      	adds	r2, r3, #2
 8020ea8:	683b      	ldr	r3, [r7, #0]
 8020eaa:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumResponces;
 8020eac:	683b      	ldr	r3, [r7, #0]
 8020eae:	681b      	ldr	r3, [r3, #0]
 8020eb0:	687a      	ldr	r2, [r7, #4]
 8020eb2:	8852      	ldrh	r2, [r2, #2]
 8020eb4:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020eb6:	683b      	ldr	r3, [r7, #0]
 8020eb8:	681b      	ldr	r3, [r3, #0]
 8020eba:	1c9a      	adds	r2, r3, #2
 8020ebc:	683b      	ldr	r3, [r7, #0]
 8020ebe:	601a      	str	r2, [r3, #0]
		}
 8020ec0:	bf00      	nop
 8020ec2:	3708      	adds	r7, #8
 8020ec4:	46bd      	mov	sp, r7
 8020ec6:	bd80      	pop	{r7, pc}
 8020ec8:	0804139c 	.word	0x0804139c
 8020ecc:	080413a0 	.word	0x080413a0
 8020ed0:	080413d0 	.word	0x080413d0
 8020ed4:	080413ec 	.word	0x080413ec

08020ed8 <_ZN10FixedQueueI7RequestLj500EEC1Ev>:
class FixedQueue {
 8020ed8:	b480      	push	{r7}
 8020eda:	b083      	sub	sp, #12
 8020edc:	af00      	add	r7, sp, #0
 8020ede:	6078      	str	r0, [r7, #4]
 8020ee0:	687b      	ldr	r3, [r7, #4]
 8020ee2:	2200      	movs	r2, #0
 8020ee4:	601a      	str	r2, [r3, #0]
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	2200      	movs	r2, #0
 8020eea:	605a      	str	r2, [r3, #4]
 8020eec:	687b      	ldr	r3, [r7, #4]
 8020eee:	2200      	movs	r2, #0
 8020ef0:	609a      	str	r2, [r3, #8]
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	4618      	mov	r0, r3
 8020ef6:	370c      	adds	r7, #12
 8020ef8:	46bd      	mov	sp, r7
 8020efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020efe:	4770      	bx	lr

08020f00 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>:
 8020f00:	b480      	push	{r7}
 8020f02:	b083      	sub	sp, #12
 8020f04:	af00      	add	r7, sp, #0
 8020f06:	6078      	str	r0, [r7, #4]
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	2200      	movs	r2, #0
 8020f0c:	601a      	str	r2, [r3, #0]
 8020f0e:	687b      	ldr	r3, [r7, #4]
 8020f10:	2200      	movs	r2, #0
 8020f12:	605a      	str	r2, [r3, #4]
 8020f14:	687b      	ldr	r3, [r7, #4]
 8020f16:	2200      	movs	r2, #0
 8020f18:	609a      	str	r2, [r3, #8]
 8020f1a:	687b      	ldr	r3, [r7, #4]
 8020f1c:	4618      	mov	r0, r3
 8020f1e:	370c      	adds	r7, #12
 8020f20:	46bd      	mov	sp, r7
 8020f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f26:	4770      	bx	lr

08020f28 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>:
	};

public:
	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS, uint8_t sendPeriod) :
 8020f28:	b580      	push	{r7, lr}
 8020f2a:	b084      	sub	sp, #16
 8020f2c:	af00      	add	r7, sp, #0
 8020f2e:	60f8      	str	r0, [r7, #12]
 8020f30:	60b9      	str	r1, [r7, #8]
 8020f32:	607a      	str	r2, [r7, #4]
 8020f34:	70fb      	strb	r3, [r7, #3]
			UartHandle { uart }, TimeoutS { timeoutS }, SendPeriod { sendPeriod } {
 8020f36:	68fb      	ldr	r3, [r7, #12]
 8020f38:	4618      	mov	r0, r3
 8020f3a:	f7ff ffcd 	bl	8020ed8 <_ZN10FixedQueueI7RequestLj500EEC1Ev>
 8020f3e:	68fa      	ldr	r2, [r7, #12]
 8020f40:	4b22      	ldr	r3, [pc, #136]	; (8020fcc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xa4>)
 8020f42:	4413      	add	r3, r2
 8020f44:	4618      	mov	r0, r3
 8020f46:	f7ff ffdb 	bl	8020f00 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>
 8020f4a:	68fb      	ldr	r3, [r7, #12]
 8020f4c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8020f50:	2200      	movs	r2, #0
 8020f52:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 8020f56:	68fb      	ldr	r3, [r7, #12]
 8020f58:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8020f5c:	2200      	movs	r2, #0
 8020f5e:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8020f62:	68fb      	ldr	r3, [r7, #12]
 8020f64:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8020f68:	461a      	mov	r2, r3
 8020f6a:	68bb      	ldr	r3, [r7, #8]
 8020f6c:	f8c2 37e8 	str.w	r3, [r2, #2024]	; 0x7e8
 8020f70:	68fb      	ldr	r3, [r7, #12]
 8020f72:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8020f76:	461a      	mov	r2, r3
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	f8c2 37ec 	str.w	r3, [r2, #2028]	; 0x7ec
 8020f7e:	68fb      	ldr	r3, [r7, #12]
 8020f80:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8020f84:	461a      	mov	r2, r3
 8020f86:	78fb      	ldrb	r3, [r7, #3]
 8020f88:	f882 37f0 	strb.w	r3, [r2, #2032]	; 0x7f0
 8020f8c:	68fb      	ldr	r3, [r7, #12]
 8020f8e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8020f92:	2200      	movs	r2, #0
 8020f94:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8020f98:	68fb      	ldr	r3, [r7, #12]
 8020f9a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8020f9e:	2201      	movs	r2, #1
 8020fa0:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8020fa4:	68fb      	ldr	r3, [r7, #12]
 8020fa6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8020faa:	2200      	movs	r2, #0
 8020fac:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
		assert(uart != NULL);
 8020fb0:	68bb      	ldr	r3, [r7, #8]
 8020fb2:	2b00      	cmp	r3, #0
 8020fb4:	d105      	bne.n	8020fc2 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0x9a>
 8020fb6:	4b06      	ldr	r3, [pc, #24]	; (8020fd0 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xa8>)
 8020fb8:	4a06      	ldr	r2, [pc, #24]	; (8020fd4 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xac>)
 8020fba:	21b5      	movs	r1, #181	; 0xb5
 8020fbc:	4806      	ldr	r0, [pc, #24]	; (8020fd8 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xb0>)
 8020fbe:	f01f f903 	bl	80401c8 <__assert_func>
	}
 8020fc2:	68fb      	ldr	r3, [r7, #12]
 8020fc4:	4618      	mov	r0, r3
 8020fc6:	3710      	adds	r7, #16
 8020fc8:	46bd      	mov	sp, r7
 8020fca:	bd80      	pop	{r7, pc}
 8020fcc:	00020b7c 	.word	0x00020b7c
 8020fd0:	080413f4 	.word	0x080413f4
 8020fd4:	08041404 	.word	0x08041404
 8020fd8:	080413d0 	.word	0x080413d0

08020fdc <_ZN11QueueSender10AddRequestERK7Request>:

	void AddRequest(const Request &request) {
 8020fdc:	b590      	push	{r4, r7, lr}
 8020fde:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
 8020fe2:	af00      	add	r7, sp, #0
 8020fe4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8020fe8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8020fec:	6018      	str	r0, [r3, #0]
 8020fee:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8020ff2:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8020ff6:	6019      	str	r1, [r3, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 8020ff8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8020ffc:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8021000:	681b      	ldr	r3, [r3, #0]
 8021002:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021006:	4618      	mov	r0, r3
 8021008:	f7ff ff15 	bl	8020e36 <_ZN11QueueSender11MessageMode11DeserializeEh>
 802100c:	4603      	mov	r3, r0
 802100e:	2b03      	cmp	r3, #3
 8021010:	f200 808e 	bhi.w	8021130 <_ZN11QueueSender10AddRequestERK7Request+0x154>
 8021014:	a201      	add	r2, pc, #4	; (adr r2, 802101c <_ZN11QueueSender10AddRequestERK7Request+0x40>)
 8021016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802101a:	bf00      	nop
 802101c:	08021069 	.word	0x08021069
 8021020:	0802102d 	.word	0x0802102d
 8021024:	080210bf 	.word	0x080210bf
 8021028:	080210f3 	.word	0x080210f3
		case MessageMode::Async:
			Responces.Push(CreateAsyncResponce(request));
 802102c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021030:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8021034:	681b      	ldr	r3, [r3, #0]
 8021036:	4c41      	ldr	r4, [pc, #260]	; (802113c <_ZN11QueueSender10AddRequestERK7Request+0x160>)
 8021038:	441c      	add	r4, r3
 802103a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 802103e:	f5a3 7046 	sub.w	r0, r3, #792	; 0x318
 8021042:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021046:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 802104a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 802104e:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8021052:	6812      	ldr	r2, [r2, #0]
 8021054:	6819      	ldr	r1, [r3, #0]
 8021056:	f000 fd81 	bl	8021b5c <_ZN11QueueSender19CreateAsyncResponceERK7Request>
 802105a:	f107 0308 	add.w	r3, r7, #8
 802105e:	4619      	mov	r1, r3
 8021060:	4620      	mov	r0, r4
 8021062:	f002 f9e3 	bl	802342c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 8021066:	e063      	b.n	8021130 <_ZN11QueueSender10AddRequestERK7Request+0x154>
		case MessageMode::Sync:
			if (HasPriorityRequest)
 8021068:	f507 7348 	add.w	r3, r7, #800	; 0x320
 802106c:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8021070:	681b      	ldr	r3, [r3, #0]
 8021072:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021076:	f893 36e4 	ldrb.w	r3, [r3, #1764]	; 0x6e4
 802107a:	2b00      	cmp	r3, #0
 802107c:	d157      	bne.n	802112e <_ZN11QueueSender10AddRequestERK7Request+0x152>
				break;

			PriorityRequest = request;
 802107e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021082:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8021086:	681b      	ldr	r3, [r3, #0]
 8021088:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802108c:	4619      	mov	r1, r3
 802108e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021092:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8021096:	681a      	ldr	r2, [r3, #0]
 8021098:	f501 63bb 	add.w	r3, r1, #1496	; 0x5d8
 802109c:	4611      	mov	r1, r2
 802109e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80210a2:	4618      	mov	r0, r3
 80210a4:	f01f f8fa 	bl	804029c <memcpy>
			HasPriorityRequest = true;
 80210a8:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80210ac:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80210b0:	681b      	ldr	r3, [r3, #0]
 80210b2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80210b6:	2201      	movs	r2, #1
 80210b8:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
			break;
 80210bc:	e038      	b.n	8021130 <_ZN11QueueSender10AddRequestERK7Request+0x154>

		case MessageMode::Info:
			Responces.Push(CreateInfoResponce());
 80210be:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80210c2:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80210c6:	681b      	ldr	r3, [r3, #0]
 80210c8:	4c1c      	ldr	r4, [pc, #112]	; (802113c <_ZN11QueueSender10AddRequestERK7Request+0x160>)
 80210ca:	441c      	add	r4, r3
 80210cc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80210d0:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 80210d4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80210d8:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80210dc:	6819      	ldr	r1, [r3, #0]
 80210de:	4610      	mov	r0, r2
 80210e0:	f000 fc7a 	bl	80219d8 <_ZNK11QueueSender18CreateInfoResponceEv>
 80210e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80210e8:	4619      	mov	r1, r3
 80210ea:	4620      	mov	r0, r4
 80210ec:	f002 f99e 	bl	802342c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 80210f0:	e01e      	b.n	8021130 <_ZN11QueueSender10AddRequestERK7Request+0x154>
		case MessageMode::SetPeriod:
			Responces.Push(ProcessSetPeriodRequest(request));
 80210f2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80210f6:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80210fa:	681b      	ldr	r3, [r3, #0]
 80210fc:	4c0f      	ldr	r4, [pc, #60]	; (802113c <_ZN11QueueSender10AddRequestERK7Request+0x160>)
 80210fe:	441c      	add	r4, r3
 8021100:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021104:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 8021108:	f507 7348 	add.w	r3, r7, #800	; 0x320
 802110c:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 8021110:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021114:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8021118:	6812      	ldr	r2, [r2, #0]
 802111a:	6819      	ldr	r1, [r3, #0]
 802111c:	f000 fcb2 	bl	8021a84 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>
 8021120:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8021124:	4619      	mov	r1, r3
 8021126:	4620      	mov	r0, r4
 8021128:	f002 f980 	bl	802342c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 802112c:	e000      	b.n	8021130 <_ZN11QueueSender10AddRequestERK7Request+0x154>
				break;
 802112e:	bf00      	nop
		}
	}
 8021130:	bf00      	nop
 8021132:	f507 7749 	add.w	r7, r7, #804	; 0x324
 8021136:	46bd      	mov	sp, r7
 8021138:	bd90      	pop	{r4, r7, pc}
 802113a:	bf00      	nop
 802113c:	00020b7c 	.word	0x00020b7c

08021140 <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 8021140:	b580      	push	{r7, lr}
 8021142:	b082      	sub	sp, #8
 8021144:	af00      	add	r7, sp, #0
 8021146:	6078      	str	r0, [r7, #4]
		return !Responces.Empty();
 8021148:	687a      	ldr	r2, [r7, #4]
 802114a:	4b06      	ldr	r3, [pc, #24]	; (8021164 <_ZNK11QueueSender11HasResponceEv+0x24>)
 802114c:	4413      	add	r3, r2
 802114e:	4618      	mov	r0, r3
 8021150:	f002 f9ae 	bl	80234b0 <_ZNK10FixedQueueI8ResponceLj10EE5EmptyEv>
 8021154:	4603      	mov	r3, r0
 8021156:	f083 0301 	eor.w	r3, r3, #1
 802115a:	b2db      	uxtb	r3, r3
	}
 802115c:	4618      	mov	r0, r3
 802115e:	3708      	adds	r7, #8
 8021160:	46bd      	mov	sp, r7
 8021162:	bd80      	pop	{r7, pc}
 8021164:	00020b7c 	.word	0x00020b7c

08021168 <_ZN11QueueSender9TickTimerEv>:

	void TickTimer() {
 8021168:	b480      	push	{r7}
 802116a:	b083      	sub	sp, #12
 802116c:	af00      	add	r7, sp, #0
 802116e:	6078      	str	r0, [r7, #4]
		SendTick = (SendTick + 1) % SendPeriod;
 8021170:	687b      	ldr	r3, [r7, #4]
 8021172:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021176:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 802117a:	3301      	adds	r3, #1
 802117c:	687a      	ldr	r2, [r7, #4]
 802117e:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 8021182:	f892 27f0 	ldrb.w	r2, [r2, #2032]	; 0x7f0
 8021186:	fb93 f1f2 	sdiv	r1, r3, r2
 802118a:	fb01 f202 	mul.w	r2, r1, r2
 802118e:	1a9b      	subs	r3, r3, r2
 8021190:	b2da      	uxtb	r2, r3
 8021192:	687b      	ldr	r3, [r7, #4]
 8021194:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021198:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
		if (SendTick != 0)
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80211a2:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 80211a6:	2b00      	cmp	r3, #0
 80211a8:	d106      	bne.n	80211b8 <_ZN11QueueSender9TickTimerEv+0x50>
			return;

		TimerReady = true;
 80211aa:	687b      	ldr	r3, [r7, #4]
 80211ac:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80211b0:	2201      	movs	r2, #1
 80211b2:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 80211b6:	e000      	b.n	80211ba <_ZN11QueueSender9TickTimerEv+0x52>
			return;
 80211b8:	bf00      	nop
	}
 80211ba:	370c      	adds	r7, #12
 80211bc:	46bd      	mov	sp, r7
 80211be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211c2:	4770      	bx	lr

080211c4 <_ZN11QueueSender13SetSendPeriodEh>:

	void SetSendPeriod(uint8_t periodMs) {
 80211c4:	b580      	push	{r7, lr}
 80211c6:	b082      	sub	sp, #8
 80211c8:	af00      	add	r7, sp, #0
 80211ca:	6078      	str	r0, [r7, #4]
 80211cc:	460b      	mov	r3, r1
 80211ce:	70fb      	strb	r3, [r7, #3]
		assert(periodMs);
 80211d0:	78fb      	ldrb	r3, [r7, #3]
 80211d2:	2b00      	cmp	r3, #0
 80211d4:	d105      	bne.n	80211e2 <_ZN11QueueSender13SetSendPeriodEh+0x1e>
 80211d6:	4b08      	ldr	r3, [pc, #32]	; (80211f8 <_ZN11QueueSender13SetSendPeriodEh+0x34>)
 80211d8:	4a08      	ldr	r2, [pc, #32]	; (80211fc <_ZN11QueueSender13SetSendPeriodEh+0x38>)
 80211da:	21db      	movs	r1, #219	; 0xdb
 80211dc:	4808      	ldr	r0, [pc, #32]	; (8021200 <_ZN11QueueSender13SetSendPeriodEh+0x3c>)
 80211de:	f01e fff3 	bl	80401c8 <__assert_func>
		SendPeriod = periodMs;
 80211e2:	687b      	ldr	r3, [r7, #4]
 80211e4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80211e8:	461a      	mov	r2, r3
 80211ea:	78fb      	ldrb	r3, [r7, #3]
 80211ec:	f882 37f0 	strb.w	r3, [r2, #2032]	; 0x7f0
	}
 80211f0:	bf00      	nop
 80211f2:	3708      	adds	r7, #8
 80211f4:	46bd      	mov	sp, r7
 80211f6:	bd80      	pop	{r7, pc}
 80211f8:	08041444 	.word	0x08041444
 80211fc:	08041450 	.word	0x08041450
 8021200:	080413d0 	.word	0x080413d0

08021204 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 8021204:	b580      	push	{r7, lr}
 8021206:	b082      	sub	sp, #8
 8021208:	af00      	add	r7, sp, #0
 802120a:	6078      	str	r0, [r7, #4]
 802120c:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 802120e:	6838      	ldr	r0, [r7, #0]
 8021210:	f7ff ff96 	bl	8021140 <_ZNK11QueueSender11HasResponceEv>
 8021214:	4603      	mov	r3, r0
 8021216:	2b00      	cmp	r3, #0
 8021218:	d105      	bne.n	8021226 <_ZN11QueueSender11GetResponceEv+0x22>
 802121a:	4b10      	ldr	r3, [pc, #64]	; (802125c <_ZN11QueueSender11GetResponceEv+0x58>)
 802121c:	4a10      	ldr	r2, [pc, #64]	; (8021260 <_ZN11QueueSender11GetResponceEv+0x5c>)
 802121e:	21e0      	movs	r1, #224	; 0xe0
 8021220:	4810      	ldr	r0, [pc, #64]	; (8021264 <_ZN11QueueSender11GetResponceEv+0x60>)
 8021222:	f01e ffd1 	bl	80401c8 <__assert_func>
		Responce responce = Responces.Front();
 8021226:	683a      	ldr	r2, [r7, #0]
 8021228:	4b0f      	ldr	r3, [pc, #60]	; (8021268 <_ZN11QueueSender11GetResponceEv+0x64>)
 802122a:	4413      	add	r3, r2
 802122c:	4618      	mov	r0, r3
 802122e:	f002 f951 	bl	80234d4 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv>
 8021232:	4602      	mov	r2, r0
 8021234:	687b      	ldr	r3, [r7, #4]
 8021236:	4618      	mov	r0, r3
 8021238:	4611      	mov	r1, r2
 802123a:	f44f 7384 	mov.w	r3, #264	; 0x108
 802123e:	461a      	mov	r2, r3
 8021240:	f01f f82c 	bl	804029c <memcpy>
		Responces.Pop();
 8021244:	683a      	ldr	r2, [r7, #0]
 8021246:	4b08      	ldr	r3, [pc, #32]	; (8021268 <_ZN11QueueSender11GetResponceEv+0x64>)
 8021248:	4413      	add	r3, r2
 802124a:	4618      	mov	r0, r3
 802124c:	f002 f964 	bl	8023518 <_ZN10FixedQueueI8ResponceLj10EE3PopEv>
		return responce;
 8021250:	bf00      	nop
	}
 8021252:	6878      	ldr	r0, [r7, #4]
 8021254:	3708      	adds	r7, #8
 8021256:	46bd      	mov	sp, r7
 8021258:	bd80      	pop	{r7, pc}
 802125a:	bf00      	nop
 802125c:	0804147c 	.word	0x0804147c
 8021260:	0804148c 	.word	0x0804148c
 8021264:	080413d0 	.word	0x080413d0
 8021268:	00020b7c 	.word	0x00020b7c

0802126c <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 802126c:	b5b0      	push	{r4, r5, r7, lr}
 802126e:	b0cc      	sub	sp, #304	; 0x130
 8021270:	af02      	add	r7, sp, #8
 8021272:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021276:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802127a:	6018      	str	r0, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802127c:	b672      	cpsid	i
}
 802127e:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce && TransmitComplete) {
 8021280:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021284:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021288:	681b      	ldr	r3, [r3, #0]
 802128a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802128e:	f893 36e4 	ldrb.w	r3, [r3, #1764]	; 0x6e4
 8021292:	2b00      	cmp	r3, #0
 8021294:	f000 80ef 	beq.w	8021476 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20a>
 8021298:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802129c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80212a0:	681b      	ldr	r3, [r3, #0]
 80212a2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212a6:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 80212aa:	f083 0301 	eor.w	r3, r3, #1
 80212ae:	b2db      	uxtb	r3, r3
 80212b0:	2b00      	cmp	r3, #0
 80212b2:	f000 80e0 	beq.w	8021476 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20a>
 80212b6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80212ba:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80212be:	681b      	ldr	r3, [r3, #0]
 80212c0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212c4:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80212c8:	2b00      	cmp	r3, #0
 80212ca:	f000 80d4 	beq.w	8021476 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20a>
			HasPriorityRequest = false;
 80212ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80212d2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80212d6:	681b      	ldr	r3, [r3, #0]
 80212d8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212dc:	2200      	movs	r2, #0
 80212de:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
			WaitResponce = true;
 80212e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80212e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80212ea:	681b      	ldr	r3, [r3, #0]
 80212ec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212f0:	2201      	movs	r2, #1
 80212f2:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
  __ASM volatile ("cpsie i" : : : "memory");
 80212f6:	b662      	cpsie	i
}
 80212f8:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 80212fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80212fe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021302:	681a      	ldr	r2, [r3, #0]
 8021304:	4b5f      	ldr	r3, [pc, #380]	; (8021484 <_ZN11QueueSender22ProcessPriorityRequestEv+0x218>)
 8021306:	4413      	add	r3, r2
 8021308:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			auto &data = request.Data;
 802130c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021310:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

			assert(
 8021314:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021318:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 802131c:	4618      	mov	r0, r3
 802131e:	f7ff fd8a 	bl	8020e36 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021322:	4603      	mov	r3, r0
 8021324:	2b00      	cmp	r3, #0
 8021326:	d005      	beq.n	8021334 <_ZN11QueueSender22ProcessPriorityRequestEv+0xc8>
 8021328:	4b57      	ldr	r3, [pc, #348]	; (8021488 <_ZN11QueueSender22ProcessPriorityRequestEv+0x21c>)
 802132a:	4a58      	ldr	r2, [pc, #352]	; (802148c <_ZN11QueueSender22ProcessPriorityRequestEv+0x220>)
 802132c:	21f0      	movs	r1, #240	; 0xf0
 802132e:	4858      	ldr	r0, [pc, #352]	; (8021490 <_ZN11QueueSender22ProcessPriorityRequestEv+0x224>)
 8021330:	f01e ff4a 	bl	80401c8 <__assert_func>
  __ASM volatile ("cpsid i" : : : "memory");
 8021334:	b672      	cpsid	i
}
 8021336:	bf00      	nop
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Sync);
			__disable_irq();
			TransmitComplete = false;
 8021338:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802133c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021340:	681b      	ldr	r3, [r3, #0]
 8021342:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021346:	2200      	movs	r2, #0
 8021348:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
  __ASM volatile ("cpsie i" : : : "memory");
 802134c:	b662      	cpsie	i
}
 802134e:	bf00      	nop
			__enable_irq();

			assert(
 8021350:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021354:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021358:	681b      	ldr	r3, [r3, #0]
 802135a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802135e:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 8021362:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8021366:	f002 f905 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 802136a:	4601      	mov	r1, r0
 802136c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021370:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021374:	b29b      	uxth	r3, r3
 8021376:	461a      	mov	r2, r3
 8021378:	4620      	mov	r0, r4
 802137a:	f018 f8f9 	bl	8039570 <HAL_UART_Transmit_IT>
 802137e:	4603      	mov	r3, r0
 8021380:	2b00      	cmp	r3, #0
 8021382:	d005      	beq.n	8021390 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
 8021384:	4b43      	ldr	r3, [pc, #268]	; (8021494 <_ZN11QueueSender22ProcessPriorityRequestEv+0x228>)
 8021386:	4a41      	ldr	r2, [pc, #260]	; (802148c <_ZN11QueueSender22ProcessPriorityRequestEv+0x220>)
 8021388:	21f7      	movs	r1, #247	; 0xf7
 802138a:	4841      	ldr	r0, [pc, #260]	; (8021490 <_ZN11QueueSender22ProcessPriorityRequestEv+0x224>)
 802138c:	f01e ff1c 	bl	80401c8 <__assert_func>
					HAL_UART_Transmit_IT(UartHandle, data.data(),
							request.RequestSize) == HAL_OK);

			while (!TransmitComplete)
 8021390:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021394:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021398:	681b      	ldr	r3, [r3, #0]
 802139a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802139e:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80213a2:	2b00      	cmp	r3, #0
 80213a4:	d100      	bne.n	80213a8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x13c>
 80213a6:	e7f3      	b.n	8021390 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
				;

			ErrorCode::Type error = Receive(request.ResponceSize);
 80213a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80213ac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80213b0:	b2da      	uxtb	r2, r3
 80213b2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213b6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213ba:	4611      	mov	r1, r2
 80213bc:	6818      	ldr	r0, [r3, #0]
 80213be:	f000 fa3f 	bl	8021840 <_ZN11QueueSender7ReceiveEh>
 80213c2:	4603      	mov	r3, r0
 80213c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

			if (error == ErrorCode::NACK) {
 80213c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80213cc:	2b02      	cmp	r3, #2
 80213ce:	d11e      	bne.n	802140e <_ZN11QueueSender22ProcessPriorityRequestEv+0x1a2>
				uint32_t delayMS = 5;
 80213d0:	2305      	movs	r3, #5
 80213d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				HAL_Delay(delayMS);
 80213d6:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80213da:	f00d fe87 	bl	802f0ec <HAL_Delay>

				uint8_t dummy;
				while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 80213de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213e2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213e6:	681b      	ldr	r3, [r3, #0]
 80213e8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213ec:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 80213f0:	f107 010f 	add.w	r1, r7, #15
 80213f4:	2300      	movs	r3, #0
 80213f6:	2201      	movs	r2, #1
 80213f8:	f017 ffe6 	bl	80393c8 <HAL_UART_Receive>
 80213fc:	4603      	mov	r3, r0
 80213fe:	2b00      	cmp	r3, #0
 8021400:	bf0c      	ite	eq
 8021402:	2301      	moveq	r3, #1
 8021404:	2300      	movne	r3, #0
 8021406:	b2db      	uxtb	r3, r3
 8021408:	2b00      	cmp	r3, #0
 802140a:	d000      	beq.n	802140e <_ZN11QueueSender22ProcessPriorityRequestEv+0x1a2>
 802140c:	e7e7      	b.n	80213de <_ZN11QueueSender22ProcessPriorityRequestEv+0x172>
					;
			}

			Responces.Push(
 802140e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021412:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021416:	681b      	ldr	r3, [r3, #0]
 8021418:	4c1f      	ldr	r4, [pc, #124]	; (8021498 <_ZN11QueueSender22ProcessPriorityRequestEv+0x22c>)
 802141a:	441c      	add	r4, r3
					CreateResponce(CurrentResponceBuffer, request.ResponceSize,
 802141c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021420:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021424:	681b      	ldr	r3, [r3, #0]
 8021426:	4a1d      	ldr	r2, [pc, #116]	; (802149c <_ZN11QueueSender22ProcessPriorityRequestEv+0x230>)
 8021428:	441a      	add	r2, r3
							MessageMode::Sync, error));
 802142a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802142e:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
 8021432:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021436:	f5a3 708c 	sub.w	r0, r3, #280	; 0x118
 802143a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802143e:	f5a3 7192 	sub.w	r1, r3, #292	; 0x124
 8021442:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8021446:	9301      	str	r3, [sp, #4]
 8021448:	2300      	movs	r3, #0
 802144a:	9300      	str	r3, [sp, #0]
 802144c:	462b      	mov	r3, r5
 802144e:	6809      	ldr	r1, [r1, #0]
 8021450:	f000 faa0 	bl	8021994 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
			Responces.Push(
 8021454:	f107 0310 	add.w	r3, r7, #16
 8021458:	4619      	mov	r1, r3
 802145a:	4620      	mov	r0, r4
 802145c:	f001 ffe6 	bl	802342c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>

			WaitResponce = false;
 8021460:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021464:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021468:	681b      	ldr	r3, [r3, #0]
 802146a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802146e:	2200      	movs	r2, #0
 8021470:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8021474:	e001      	b.n	802147a <_ZN11QueueSender22ProcessPriorityRequestEv+0x20e>
  __ASM volatile ("cpsie i" : : : "memory");
 8021476:	b662      	cpsie	i
}
 8021478:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 802147a:	bf00      	nop
 802147c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8021480:	46bd      	mov	sp, r7
 8021482:	bdb0      	pop	{r4, r5, r7, pc}
 8021484:	000215d8 	.word	0x000215d8
 8021488:	080414b0 	.word	0x080414b0
 802148c:	080414f0 	.word	0x080414f0
 8021490:	080413d0 	.word	0x080413d0
 8021494:	0804151c 	.word	0x0804151c
 8021498:	00020b7c 	.word	0x00020b7c
 802149c:	000216e6 	.word	0x000216e6

080214a0 <_ZN11QueueSender11SendRequestERK7Request>:

	Responce SendRequest(const Request &request) {
 80214a0:	b590      	push	{r4, r7, lr}
 80214a2:	b09b      	sub	sp, #108	; 0x6c
 80214a4:	af02      	add	r7, sp, #8
 80214a6:	60f8      	str	r0, [r7, #12]
 80214a8:	60b9      	str	r1, [r7, #8]
 80214aa:	607a      	str	r2, [r7, #4]
		while (WaitResponce)
 80214ac:	68bb      	ldr	r3, [r7, #8]
 80214ae:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80214b2:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 80214b6:	2b00      	cmp	r3, #0
 80214b8:	d000      	beq.n	80214bc <_ZN11QueueSender11SendRequestERK7Request+0x1c>
 80214ba:	e7f7      	b.n	80214ac <_ZN11QueueSender11SendRequestERK7Request+0xc>
			;
		WaitResponce = true;
 80214bc:	68bb      	ldr	r3, [r7, #8]
 80214be:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80214c2:	2201      	movs	r2, #1
 80214c4:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5

		auto &data = request.Data;
 80214c8:	687b      	ldr	r3, [r7, #4]
 80214ca:	65fb      	str	r3, [r7, #92]	; 0x5c

		assert(TransmitComplete);
 80214cc:	68bb      	ldr	r3, [r7, #8]
 80214ce:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80214d2:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80214d6:	2b00      	cmp	r3, #0
 80214d8:	d106      	bne.n	80214e8 <_ZN11QueueSender11SendRequestERK7Request+0x48>
 80214da:	4b41      	ldr	r3, [pc, #260]	; (80215e0 <_ZN11QueueSender11SendRequestERK7Request+0x140>)
 80214dc:	4a41      	ldr	r2, [pc, #260]	; (80215e4 <_ZN11QueueSender11SendRequestERK7Request+0x144>)
 80214de:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80214e2:	4841      	ldr	r0, [pc, #260]	; (80215e8 <_ZN11QueueSender11SendRequestERK7Request+0x148>)
 80214e4:	f01e fe70 	bl	80401c8 <__assert_func>
  __ASM volatile ("cpsid i" : : : "memory");
 80214e8:	b672      	cpsid	i
}
 80214ea:	bf00      	nop

		__disable_irq();
		TransmitComplete = false;
 80214ec:	68bb      	ldr	r3, [r7, #8]
 80214ee:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80214f2:	2200      	movs	r2, #0
 80214f4:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
  __ASM volatile ("cpsie i" : : : "memory");
 80214f8:	b662      	cpsie	i
}
 80214fa:	bf00      	nop
		__enable_irq();

		uint8_t testBuf[64];
		memcpy(testBuf, data.data(), request.RequestSize);
 80214fc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80214fe:	f002 f846 	bl	802358e <_ZNKSt5arrayIhLj256EE4dataEv>
 8021502:	4601      	mov	r1, r0
 8021504:	687b      	ldr	r3, [r7, #4]
 8021506:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 802150a:	f107 0314 	add.w	r3, r7, #20
 802150e:	4618      	mov	r0, r3
 8021510:	f01e fec4 	bl	804029c <memcpy>

		assert(
 8021514:	68bb      	ldr	r3, [r7, #8]
 8021516:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802151a:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 802151e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8021520:	f002 f835 	bl	802358e <_ZNKSt5arrayIhLj256EE4dataEv>
 8021524:	4601      	mov	r1, r0
 8021526:	687b      	ldr	r3, [r7, #4]
 8021528:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802152c:	b29b      	uxth	r3, r3
 802152e:	461a      	mov	r2, r3
 8021530:	4620      	mov	r0, r4
 8021532:	f018 f81d 	bl	8039570 <HAL_UART_Transmit_IT>
 8021536:	4603      	mov	r3, r0
 8021538:	2b00      	cmp	r3, #0
 802153a:	d006      	beq.n	802154a <_ZN11QueueSender11SendRequestERK7Request+0xaa>
 802153c:	4b2b      	ldr	r3, [pc, #172]	; (80215ec <_ZN11QueueSender11SendRequestERK7Request+0x14c>)
 802153e:	4a29      	ldr	r2, [pc, #164]	; (80215e4 <_ZN11QueueSender11SendRequestERK7Request+0x144>)
 8021540:	f240 1123 	movw	r1, #291	; 0x123
 8021544:	4828      	ldr	r0, [pc, #160]	; (80215e8 <_ZN11QueueSender11SendRequestERK7Request+0x148>)
 8021546:	f01e fe3f 	bl	80401c8 <__assert_func>
				HAL_UART_Transmit_IT(UartHandle, data.data(),
						request.RequestSize) == HAL_OK);

		while (!TransmitComplete)
 802154a:	68bb      	ldr	r3, [r7, #8]
 802154c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021550:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 8021554:	2b00      	cmp	r3, #0
 8021556:	d100      	bne.n	802155a <_ZN11QueueSender11SendRequestERK7Request+0xba>
 8021558:	e7f7      	b.n	802154a <_ZN11QueueSender11SendRequestERK7Request+0xaa>
			;

		ErrorCode::Type error = Receive(request.ResponceSize);
 802155a:	687b      	ldr	r3, [r7, #4]
 802155c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8021560:	b2db      	uxtb	r3, r3
 8021562:	4619      	mov	r1, r3
 8021564:	68b8      	ldr	r0, [r7, #8]
 8021566:	f000 f96b 	bl	8021840 <_ZN11QueueSender7ReceiveEh>
 802156a:	4603      	mov	r3, r0
 802156c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

		if (error == ErrorCode::NACK) {
 8021570:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8021574:	2b02      	cmp	r3, #2
 8021576:	d118      	bne.n	80215aa <_ZN11QueueSender11SendRequestERK7Request+0x10a>
			uint32_t delayMS = 5;
 8021578:	2305      	movs	r3, #5
 802157a:	657b      	str	r3, [r7, #84]	; 0x54
			HAL_Delay(delayMS);
 802157c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802157e:	f00d fdb5 	bl	802f0ec <HAL_Delay>

			uint8_t dummy;
			while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 8021582:	68bb      	ldr	r3, [r7, #8]
 8021584:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021588:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 802158c:	f107 0113 	add.w	r1, r7, #19
 8021590:	2300      	movs	r3, #0
 8021592:	2201      	movs	r2, #1
 8021594:	f017 ff18 	bl	80393c8 <HAL_UART_Receive>
 8021598:	4603      	mov	r3, r0
 802159a:	2b00      	cmp	r3, #0
 802159c:	bf0c      	ite	eq
 802159e:	2301      	moveq	r3, #1
 80215a0:	2300      	movne	r3, #0
 80215a2:	b2db      	uxtb	r3, r3
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d000      	beq.n	80215aa <_ZN11QueueSender11SendRequestERK7Request+0x10a>
 80215a8:	e7eb      	b.n	8021582 <_ZN11QueueSender11SendRequestERK7Request+0xe2>
				;
		}

		auto newResponce = CreateResponce(CurrentResponceBuffer,
 80215aa:	68bb      	ldr	r3, [r7, #8]
 80215ac:	4a10      	ldr	r2, [pc, #64]	; (80215f0 <_ZN11QueueSender11SendRequestERK7Request+0x150>)
 80215ae:	441a      	add	r2, r3
				request.ResponceSize, MessageMode::Sync, error);
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 80215b6:	68f8      	ldr	r0, [r7, #12]
 80215b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80215bc:	9301      	str	r3, [sp, #4]
 80215be:	2300      	movs	r3, #0
 80215c0:	9300      	str	r3, [sp, #0]
 80215c2:	460b      	mov	r3, r1
 80215c4:	68b9      	ldr	r1, [r7, #8]
 80215c6:	f000 f9e5 	bl	8021994 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>

		WaitResponce = false;
 80215ca:	68bb      	ldr	r3, [r7, #8]
 80215cc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215d0:	2200      	movs	r2, #0
 80215d2:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5

		return newResponce;
 80215d6:	bf00      	nop
	}
 80215d8:	68f8      	ldr	r0, [r7, #12]
 80215da:	3764      	adds	r7, #100	; 0x64
 80215dc:	46bd      	mov	sp, r7
 80215de:	bd90      	pop	{r4, r7, pc}
 80215e0:	0804156c 	.word	0x0804156c
 80215e4:	08041580 	.word	0x08041580
 80215e8:	080413d0 	.word	0x080413d0
 80215ec:	0804151c 	.word	0x0804151c
 80215f0:	000216e6 	.word	0x000216e6

080215f4 <_ZN11QueueSender16ServoDataRequestEv>:

	Request ServoDataRequest() {
 80215f4:	b580      	push	{r7, lr}
 80215f6:	b082      	sub	sp, #8
 80215f8:	af00      	add	r7, sp, #0
 80215fa:	6078      	str	r0, [r7, #4]
 80215fc:	6039      	str	r1, [r7, #0]
		Request request;

		memcpy(request.Data.data(), BodyMessages::ServoPosRequest,
 80215fe:	6878      	ldr	r0, [r7, #4]
 8021600:	f001 ffb8 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 8021604:	4603      	mov	r3, r0
 8021606:	490e      	ldr	r1, [pc, #56]	; (8021640 <_ZN11QueueSender16ServoDataRequestEv+0x4c>)
 8021608:	461a      	mov	r2, r3
 802160a:	460b      	mov	r3, r1
 802160c:	cb03      	ldmia	r3!, {r0, r1}
 802160e:	6010      	str	r0, [r2, #0]
 8021610:	6051      	str	r1, [r2, #4]
 8021612:	881b      	ldrh	r3, [r3, #0]
 8021614:	8113      	strh	r3, [r2, #8]
				sizeof(BodyMessages::ServoPosRequest));
		request.RequestSize = sizeof(BodyMessages::ServoPosRequest);
 8021616:	687b      	ldr	r3, [r7, #4]
 8021618:	220a      	movs	r2, #10
 802161a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		request.ResponceSize = BodyMessages::ServoPosResponceSize;
 802161e:	687b      	ldr	r3, [r7, #4]
 8021620:	2221      	movs	r2, #33	; 0x21
 8021622:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

		request.MetaInfo = 0;
 8021626:	687b      	ldr	r3, [r7, #4]
 8021628:	2200      	movs	r2, #0
 802162a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		request.PeripheryID = Periphery::Body;
 802162e:	687b      	ldr	r3, [r7, #4]
 8021630:	2200      	movs	r2, #0
 8021632:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

		return request;
 8021636:	bf00      	nop
	}
 8021638:	6878      	ldr	r0, [r7, #4]
 802163a:	3708      	adds	r7, #8
 802163c:	46bd      	mov	sp, r7
 802163e:	bd80      	pop	{r7, pc}
 8021640:	0805c5fc 	.word	0x0805c5fc

08021644 <_ZN11QueueSender12GetServoDataEv>:

	Responce GetServoData() {
 8021644:	b580      	push	{r7, lr}
 8021646:	b0c6      	sub	sp, #280	; 0x118
 8021648:	af00      	add	r7, sp, #0
 802164a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 802164e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021652:	6018      	str	r0, [r3, #0]
 8021654:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021658:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 802165c:	6019      	str	r1, [r3, #0]
		Request request = ServoDataRequest();
 802165e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021662:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8021666:	f507 738c 	add.w	r3, r7, #280	; 0x118
 802166a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 802166e:	6819      	ldr	r1, [r3, #0]
 8021670:	4610      	mov	r0, r2
 8021672:	f7ff ffbf 	bl	80215f4 <_ZN11QueueSender16ServoDataRequestEv>
		return SendRequest(request);
 8021676:	f507 738c 	add.w	r3, r7, #280	; 0x118
 802167a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 802167e:	6818      	ldr	r0, [r3, #0]
 8021680:	f107 020c 	add.w	r2, r7, #12
 8021684:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021688:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 802168c:	6819      	ldr	r1, [r3, #0]
 802168e:	f7ff ff07 	bl	80214a0 <_ZN11QueueSender11SendRequestERK7Request>
	}
 8021692:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021696:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 802169a:	6818      	ldr	r0, [r3, #0]
 802169c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80216a0:	46bd      	mov	sp, r7
 80216a2:	bd80      	pop	{r7, pc}

080216a4 <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 80216a4:	b590      	push	{r4, r7, lr}
 80216a6:	b089      	sub	sp, #36	; 0x24
 80216a8:	af00      	add	r7, sp, #0
 80216aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80216ac:	b672      	cpsid	i
}
 80216ae:	bf00      	nop
		__disable_irq();
		if (TimerReady && !Requests.Empty() && !WaitResponce
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216b6:	f893 37f3 	ldrb.w	r3, [r3, #2035]	; 0x7f3
				&& TransmitComplete) {
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	d01c      	beq.n	80216f8 <_ZN11QueueSender15ProcessRequestsEv+0x54>
		if (TimerReady && !Requests.Empty() && !WaitResponce
 80216be:	687b      	ldr	r3, [r7, #4]
 80216c0:	4618      	mov	r0, r3
 80216c2:	f001 ff71 	bl	80235a8 <_ZNK10FixedQueueI7RequestLj500EE5EmptyEv>
 80216c6:	4603      	mov	r3, r0
 80216c8:	f083 0301 	eor.w	r3, r3, #1
 80216cc:	b2db      	uxtb	r3, r3
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d012      	beq.n	80216f8 <_ZN11QueueSender15ProcessRequestsEv+0x54>
 80216d2:	687b      	ldr	r3, [r7, #4]
 80216d4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216d8:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 80216dc:	f083 0301 	eor.w	r3, r3, #1
 80216e0:	b2db      	uxtb	r3, r3
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d008      	beq.n	80216f8 <_ZN11QueueSender15ProcessRequestsEv+0x54>
				&& TransmitComplete) {
 80216e6:	687b      	ldr	r3, [r7, #4]
 80216e8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216ec:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80216f0:	2b00      	cmp	r3, #0
 80216f2:	d001      	beq.n	80216f8 <_ZN11QueueSender15ProcessRequestsEv+0x54>
 80216f4:	2301      	movs	r3, #1
 80216f6:	e000      	b.n	80216fa <_ZN11QueueSender15ProcessRequestsEv+0x56>
 80216f8:	2300      	movs	r3, #0
		if (TimerReady && !Requests.Empty() && !WaitResponce
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	f000 8091 	beq.w	8021822 <_ZN11QueueSender15ProcessRequestsEv+0x17e>

			WaitResponce = true;
 8021700:	687b      	ldr	r3, [r7, #4]
 8021702:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021706:	2201      	movs	r2, #1
 8021708:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
  __ASM volatile ("cpsie i" : : : "memory");
 802170c:	b662      	cpsie	i
}
 802170e:	bf00      	nop
			__enable_irq();

			auto &request = Requests.Front();
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	4618      	mov	r0, r3
 8021714:	f001 ff5a 	bl	80235cc <_ZNK10FixedQueueI7RequestLj500EE5FrontEv>
 8021718:	61b8      	str	r0, [r7, #24]
			auto &data = request.Data;
 802171a:	69bb      	ldr	r3, [r7, #24]
 802171c:	617b      	str	r3, [r7, #20]

			assert(
 802171e:	69bb      	ldr	r3, [r7, #24]
 8021720:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021724:	4618      	mov	r0, r3
 8021726:	f7ff fb86 	bl	8020e36 <_ZN11QueueSender11MessageMode11DeserializeEh>
 802172a:	4603      	mov	r3, r0
 802172c:	2b01      	cmp	r3, #1
 802172e:	d006      	beq.n	802173e <_ZN11QueueSender15ProcessRequestsEv+0x9a>
 8021730:	4b3f      	ldr	r3, [pc, #252]	; (8021830 <_ZN11QueueSender15ProcessRequestsEv+0x18c>)
 8021732:	4a40      	ldr	r2, [pc, #256]	; (8021834 <_ZN11QueueSender15ProcessRequestsEv+0x190>)
 8021734:	f240 115b 	movw	r1, #347	; 0x15b
 8021738:	483f      	ldr	r0, [pc, #252]	; (8021838 <_ZN11QueueSender15ProcessRequestsEv+0x194>)
 802173a:	f01e fd45 	bl	80401c8 <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Async);

			const size_t nAttempts = 5;
 802173e:	2305      	movs	r3, #5
 8021740:	613b      	str	r3, [r7, #16]
			const uint32_t delayMS = 5;
 8021742:	2305      	movs	r3, #5
 8021744:	60fb      	str	r3, [r7, #12]
			size_t i = 0;
 8021746:	2300      	movs	r3, #0
 8021748:	61fb      	str	r3, [r7, #28]

			while (i++ < nAttempts) {
 802174a:	69fb      	ldr	r3, [r7, #28]
 802174c:	1c5a      	adds	r2, r3, #1
 802174e:	61fa      	str	r2, [r7, #28]
 8021750:	2b04      	cmp	r3, #4
 8021752:	bf94      	ite	ls
 8021754:	2301      	movls	r3, #1
 8021756:	2300      	movhi	r3, #0
 8021758:	b2db      	uxtb	r3, r3
 802175a:	2b00      	cmp	r3, #0
 802175c:	d050      	beq.n	8021800 <_ZN11QueueSender15ProcessRequestsEv+0x15c>

				TransmitComplete = false;
 802175e:	687b      	ldr	r3, [r7, #4]
 8021760:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021764:	2200      	movs	r2, #0
 8021766:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2

				assert(
 802176a:	687b      	ldr	r3, [r7, #4]
 802176c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021770:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 8021774:	6978      	ldr	r0, [r7, #20]
 8021776:	f001 ff0a 	bl	802358e <_ZNKSt5arrayIhLj256EE4dataEv>
 802177a:	4601      	mov	r1, r0
 802177c:	69bb      	ldr	r3, [r7, #24]
 802177e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021782:	b29b      	uxth	r3, r3
 8021784:	461a      	mov	r2, r3
 8021786:	4620      	mov	r0, r4
 8021788:	f017 fef2 	bl	8039570 <HAL_UART_Transmit_IT>
 802178c:	4603      	mov	r3, r0
 802178e:	2b00      	cmp	r3, #0
 8021790:	d006      	beq.n	80217a0 <_ZN11QueueSender15ProcessRequestsEv+0xfc>
 8021792:	4b2a      	ldr	r3, [pc, #168]	; (802183c <_ZN11QueueSender15ProcessRequestsEv+0x198>)
 8021794:	4a27      	ldr	r2, [pc, #156]	; (8021834 <_ZN11QueueSender15ProcessRequestsEv+0x190>)
 8021796:	f240 1167 	movw	r1, #359	; 0x167
 802179a:	4827      	ldr	r0, [pc, #156]	; (8021838 <_ZN11QueueSender15ProcessRequestsEv+0x194>)
 802179c:	f01e fd14 	bl	80401c8 <__assert_func>
						HAL_UART_Transmit_IT(UartHandle, data.data(),
								request.RequestSize) == HAL_OK);

				while (!TransmitComplete)
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80217a6:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80217aa:	2b00      	cmp	r3, #0
 80217ac:	d100      	bne.n	80217b0 <_ZN11QueueSender15ProcessRequestsEv+0x10c>
 80217ae:	e7f7      	b.n	80217a0 <_ZN11QueueSender15ProcessRequestsEv+0xfc>
					;

				ErrorCode::Type error = Receive(request.ResponceSize);
 80217b0:	69bb      	ldr	r3, [r7, #24]
 80217b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80217b6:	b2db      	uxtb	r3, r3
 80217b8:	4619      	mov	r1, r3
 80217ba:	6878      	ldr	r0, [r7, #4]
 80217bc:	f000 f840 	bl	8021840 <_ZN11QueueSender7ReceiveEh>
 80217c0:	4603      	mov	r3, r0
 80217c2:	72fb      	strb	r3, [r7, #11]
				if (error == ErrorCode::Success)
 80217c4:	7afb      	ldrb	r3, [r7, #11]
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	d019      	beq.n	80217fe <_ZN11QueueSender15ProcessRequestsEv+0x15a>
					break;
				HAL_Delay(delayMS);
 80217ca:	2005      	movs	r0, #5
 80217cc:	f00d fc8e 	bl	802f0ec <HAL_Delay>
				if (error == ErrorCode::NACK) {
 80217d0:	7afb      	ldrb	r3, [r7, #11]
 80217d2:	2b02      	cmp	r3, #2
 80217d4:	d1b9      	bne.n	802174a <_ZN11QueueSender15ProcessRequestsEv+0xa6>
					uint8_t dummy;
					while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 80217d6:	687b      	ldr	r3, [r7, #4]
 80217d8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80217dc:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 80217e0:	f107 010a 	add.w	r1, r7, #10
 80217e4:	2300      	movs	r3, #0
 80217e6:	2201      	movs	r2, #1
 80217e8:	f017 fdee 	bl	80393c8 <HAL_UART_Receive>
 80217ec:	4603      	mov	r3, r0
 80217ee:	2b00      	cmp	r3, #0
 80217f0:	bf0c      	ite	eq
 80217f2:	2301      	moveq	r3, #1
 80217f4:	2300      	movne	r3, #0
 80217f6:	b2db      	uxtb	r3, r3
 80217f8:	2b00      	cmp	r3, #0
 80217fa:	d0a6      	beq.n	802174a <_ZN11QueueSender15ProcessRequestsEv+0xa6>
 80217fc:	e7eb      	b.n	80217d6 <_ZN11QueueSender15ProcessRequestsEv+0x132>
					break;
 80217fe:	bf00      	nop
						;
				}
			}

			Requests.Pop();
 8021800:	687b      	ldr	r3, [r7, #4]
 8021802:	4618      	mov	r0, r3
 8021804:	f001 ff04 	bl	8023610 <_ZN10FixedQueueI7RequestLj500EE3PopEv>
			WaitResponce = false;
 8021808:	687b      	ldr	r3, [r7, #4]
 802180a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802180e:	2200      	movs	r2, #0
 8021810:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
			TimerReady = false;
 8021814:	687b      	ldr	r3, [r7, #4]
 8021816:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802181a:	2200      	movs	r2, #0
 802181c:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
		} else {
			__enable_irq();
		}
	}
 8021820:	e001      	b.n	8021826 <_ZN11QueueSender15ProcessRequestsEv+0x182>
  __ASM volatile ("cpsie i" : : : "memory");
 8021822:	b662      	cpsie	i
}
 8021824:	bf00      	nop
 8021826:	bf00      	nop
 8021828:	3724      	adds	r7, #36	; 0x24
 802182a:	46bd      	mov	sp, r7
 802182c:	bd90      	pop	{r4, r7, pc}
 802182e:	bf00      	nop
 8021830:	080415b4 	.word	0x080415b4
 8021834:	080415f8 	.word	0x080415f8
 8021838:	080413d0 	.word	0x080413d0
 802183c:	0804151c 	.word	0x0804151c

08021840 <_ZN11QueueSender7ReceiveEh>:

	ErrorCode::Type Receive(uint8_t size) {
 8021840:	b590      	push	{r4, r7, lr}
 8021842:	b085      	sub	sp, #20
 8021844:	af00      	add	r7, sp, #0
 8021846:	6078      	str	r0, [r7, #4]
 8021848:	460b      	mov	r3, r1
 802184a:	70fb      	strb	r3, [r7, #3]
		assert(size >= 4);
 802184c:	78fb      	ldrb	r3, [r7, #3]
 802184e:	2b03      	cmp	r3, #3
 8021850:	d806      	bhi.n	8021860 <_ZN11QueueSender7ReceiveEh+0x20>
 8021852:	4b33      	ldr	r3, [pc, #204]	; (8021920 <_ZN11QueueSender7ReceiveEh+0xe0>)
 8021854:	4a33      	ldr	r2, [pc, #204]	; (8021924 <_ZN11QueueSender7ReceiveEh+0xe4>)
 8021856:	f44f 71c1 	mov.w	r1, #386	; 0x182
 802185a:	4833      	ldr	r0, [pc, #204]	; (8021928 <_ZN11QueueSender7ReceiveEh+0xe8>)
 802185c:	f01e fcb4 	bl	80401c8 <__assert_func>

		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 8021860:	687b      	ldr	r3, [r7, #4]
 8021862:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021866:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 802186a:	687a      	ldr	r2, [r7, #4]
 802186c:	4b2f      	ldr	r3, [pc, #188]	; (802192c <_ZN11QueueSender7ReceiveEh+0xec>)
 802186e:	4413      	add	r3, r2
 8021870:	4618      	mov	r0, r3
 8021872:	f001 fe7f 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 8021876:	4601      	mov	r1, r0
				TimeoutS);
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802187e:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 8021882:	2204      	movs	r2, #4
 8021884:	4620      	mov	r0, r4
 8021886:	f017 fd9f 	bl	80393c8 <HAL_UART_Receive>
 802188a:	4603      	mov	r3, r0
 802188c:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 802188e:	7bfb      	ldrb	r3, [r7, #15]
 8021890:	2b03      	cmp	r3, #3
 8021892:	d101      	bne.n	8021898 <_ZN11QueueSender7ReceiveEh+0x58>
			return ErrorCode::Timeout;
 8021894:	2301      	movs	r3, #1
 8021896:	e03f      	b.n	8021918 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (IsNack(CurrentResponceBuffer.data()))
 8021898:	687a      	ldr	r2, [r7, #4]
 802189a:	4b24      	ldr	r3, [pc, #144]	; (802192c <_ZN11QueueSender7ReceiveEh+0xec>)
 802189c:	4413      	add	r3, r2
 802189e:	4618      	mov	r0, r3
 80218a0:	f001 fe68 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 80218a4:	4603      	mov	r3, r0
 80218a6:	4619      	mov	r1, r3
 80218a8:	6878      	ldr	r0, [r7, #4]
 80218aa:	f000 f841 	bl	8021930 <_ZN11QueueSender6IsNackEPKh>
 80218ae:	4603      	mov	r3, r0
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	d001      	beq.n	80218b8 <_ZN11QueueSender7ReceiveEh+0x78>
			return ErrorCode::NACK;
 80218b4:	2302      	movs	r3, #2
 80218b6:	e02f      	b.n	8021918 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (ret != HAL_OK)
 80218b8:	7bfb      	ldrb	r3, [r7, #15]
 80218ba:	2b00      	cmp	r3, #0
 80218bc:	d001      	beq.n	80218c2 <_ZN11QueueSender7ReceiveEh+0x82>
			return ErrorCode::Unknown;
 80218be:	2303      	movs	r3, #3
 80218c0:	e02a      	b.n	8021918 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (size == 4)
 80218c2:	78fb      	ldrb	r3, [r7, #3]
 80218c4:	2b04      	cmp	r3, #4
 80218c6:	d101      	bne.n	80218cc <_ZN11QueueSender7ReceiveEh+0x8c>
			return ErrorCode::Success;
 80218c8:	2300      	movs	r3, #0
 80218ca:	e025      	b.n	8021918 <_ZN11QueueSender7ReceiveEh+0xd8>

		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80218d2:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 80218d6:	687a      	ldr	r2, [r7, #4]
 80218d8:	4b14      	ldr	r3, [pc, #80]	; (802192c <_ZN11QueueSender7ReceiveEh+0xec>)
 80218da:	4413      	add	r3, r2
 80218dc:	4618      	mov	r0, r3
 80218de:	f001 fe49 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 80218e2:	4603      	mov	r3, r0
 80218e4:	1d19      	adds	r1, r3, #4
 80218e6:	78fb      	ldrb	r3, [r7, #3]
 80218e8:	b29b      	uxth	r3, r3
 80218ea:	3b04      	subs	r3, #4
 80218ec:	b29a      	uxth	r2, r3
				size - 4, TimeoutS);
 80218ee:	687b      	ldr	r3, [r7, #4]
 80218f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80218f4:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 80218f8:	4620      	mov	r0, r4
 80218fa:	f017 fd65 	bl	80393c8 <HAL_UART_Receive>
 80218fe:	4603      	mov	r3, r0
 8021900:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 8021902:	7bfb      	ldrb	r3, [r7, #15]
 8021904:	2b03      	cmp	r3, #3
 8021906:	d101      	bne.n	802190c <_ZN11QueueSender7ReceiveEh+0xcc>
			return ErrorCode::Timeout;
 8021908:	2301      	movs	r3, #1
 802190a:	e005      	b.n	8021918 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (ret != HAL_OK)
 802190c:	7bfb      	ldrb	r3, [r7, #15]
 802190e:	2b00      	cmp	r3, #0
 8021910:	d001      	beq.n	8021916 <_ZN11QueueSender7ReceiveEh+0xd6>
			return ErrorCode::Unknown;
 8021912:	2303      	movs	r3, #3
 8021914:	e000      	b.n	8021918 <_ZN11QueueSender7ReceiveEh+0xd8>

		return ErrorCode::Success;
 8021916:	2300      	movs	r3, #0
	}
 8021918:	4618      	mov	r0, r3
 802191a:	3714      	adds	r7, #20
 802191c:	46bd      	mov	sp, r7
 802191e:	bd90      	pop	{r4, r7, pc}
 8021920:	0804161c 	.word	0x0804161c
 8021924:	08041628 	.word	0x08041628
 8021928:	080413d0 	.word	0x080413d0
 802192c:	000216e6 	.word	0x000216e6

08021930 <_ZN11QueueSender6IsNackEPKh>:

	bool IsNack(const uint8_t *data) {
 8021930:	b580      	push	{r7, lr}
 8021932:	b084      	sub	sp, #16
 8021934:	af00      	add	r7, sp, #0
 8021936:	6078      	str	r0, [r7, #4]
 8021938:	6039      	str	r1, [r7, #0]
		assert(data);
 802193a:	683b      	ldr	r3, [r7, #0]
 802193c:	2b00      	cmp	r3, #0
 802193e:	d106      	bne.n	802194e <_ZN11QueueSender6IsNackEPKh+0x1e>
 8021940:	4b10      	ldr	r3, [pc, #64]	; (8021984 <_ZN11QueueSender6IsNackEPKh+0x54>)
 8021942:	4a11      	ldr	r2, [pc, #68]	; (8021988 <_ZN11QueueSender6IsNackEPKh+0x58>)
 8021944:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8021948:	4810      	ldr	r0, [pc, #64]	; (802198c <_ZN11QueueSender6IsNackEPKh+0x5c>)
 802194a:	f01e fc3d 	bl	80401c8 <__assert_func>

		for (size_t i = 0; i < sizeof(BodyMessages::KondoNack); ++i)
 802194e:	2300      	movs	r3, #0
 8021950:	60fb      	str	r3, [r7, #12]
 8021952:	68fb      	ldr	r3, [r7, #12]
 8021954:	2b03      	cmp	r3, #3
 8021956:	d80f      	bhi.n	8021978 <_ZN11QueueSender6IsNackEPKh+0x48>
			if (data[i] != BodyMessages::KondoNack[i])
 8021958:	683a      	ldr	r2, [r7, #0]
 802195a:	68fb      	ldr	r3, [r7, #12]
 802195c:	4413      	add	r3, r2
 802195e:	781a      	ldrb	r2, [r3, #0]
 8021960:	490b      	ldr	r1, [pc, #44]	; (8021990 <_ZN11QueueSender6IsNackEPKh+0x60>)
 8021962:	68fb      	ldr	r3, [r7, #12]
 8021964:	440b      	add	r3, r1
 8021966:	781b      	ldrb	r3, [r3, #0]
 8021968:	429a      	cmp	r2, r3
 802196a:	d001      	beq.n	8021970 <_ZN11QueueSender6IsNackEPKh+0x40>
				return false;
 802196c:	2300      	movs	r3, #0
 802196e:	e004      	b.n	802197a <_ZN11QueueSender6IsNackEPKh+0x4a>
		for (size_t i = 0; i < sizeof(BodyMessages::KondoNack); ++i)
 8021970:	68fb      	ldr	r3, [r7, #12]
 8021972:	3301      	adds	r3, #1
 8021974:	60fb      	str	r3, [r7, #12]
 8021976:	e7ec      	b.n	8021952 <_ZN11QueueSender6IsNackEPKh+0x22>

		return true;
 8021978:	2301      	movs	r3, #1
	}
 802197a:	4618      	mov	r0, r3
 802197c:	3710      	adds	r7, #16
 802197e:	46bd      	mov	sp, r7
 8021980:	bd80      	pop	{r7, pc}
 8021982:	bf00      	nop
 8021984:	08041664 	.word	0x08041664
 8021988:	0804166c 	.word	0x0804166c
 802198c:	080413d0 	.word	0x080413d0
 8021990:	0805c5f8 	.word	0x0805c5f8

08021994 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>:

	Responce CreateResponce(const Responce::BufferT &data, size_t ResponceSize,
 8021994:	b580      	push	{r7, lr}
 8021996:	b084      	sub	sp, #16
 8021998:	af00      	add	r7, sp, #0
 802199a:	60f8      	str	r0, [r7, #12]
 802199c:	60b9      	str	r1, [r7, #8]
 802199e:	607a      	str	r2, [r7, #4]
 80219a0:	603b      	str	r3, [r7, #0]
			MessageMode::Type messageMode, ErrorCode::Type error) const {
		Responce responce;
		responce.Data = data;
 80219a2:	68fa      	ldr	r2, [r7, #12]
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	4610      	mov	r0, r2
 80219a8:	4619      	mov	r1, r3
 80219aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80219ae:	461a      	mov	r2, r3
 80219b0:	f01e fc74 	bl	804029c <memcpy>
		responce.ResponceSize = ResponceSize;
 80219b4:	68fb      	ldr	r3, [r7, #12]
 80219b6:	683a      	ldr	r2, [r7, #0]
 80219b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.Error = ErrorCode::Serialize(error);
 80219bc:	7f3b      	ldrb	r3, [r7, #28]
 80219be:	4618      	mov	r0, r3
 80219c0:	f7ff fa45 	bl	8020e4e <_ZN11QueueSender9ErrorCode9SerializeEh>
 80219c4:	4603      	mov	r3, r0
 80219c6:	461a      	mov	r2, r3
 80219c8:	68fb      	ldr	r3, [r7, #12]
 80219ca:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		return responce;
 80219ce:	bf00      	nop
	}
 80219d0:	68f8      	ldr	r0, [r7, #12]
 80219d2:	3710      	adds	r7, #16
 80219d4:	46bd      	mov	sp, r7
 80219d6:	bd80      	pop	{r7, pc}

080219d8 <_ZNK11QueueSender18CreateInfoResponceEv>:

	Responce CreateInfoResponce() const {
 80219d8:	b580      	push	{r7, lr}
 80219da:	b0c6      	sub	sp, #280	; 0x118
 80219dc:	af02      	add	r7, sp, #8
 80219de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80219e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80219e6:	6018      	str	r0, [r3, #0]
 80219e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80219ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80219f0:	6019      	str	r1, [r3, #0]
		Responce::BufferT data;
		uint8_t *ptr = data.data();
 80219f2:	f107 030c 	add.w	r3, r7, #12
 80219f6:	4618      	mov	r0, r3
 80219f8:	f001 fdbc 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 80219fc:	4602      	mov	r2, r0
 80219fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8021a06:	601a      	str	r2, [r3, #0]
		GetInfo().SerializeTo(&ptr);
 8021a08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021a0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021a10:	6818      	ldr	r0, [r3, #0]
 8021a12:	f000 f931 	bl	8021c78 <_ZNK11QueueSender7GetInfoEv>
 8021a16:	4603      	mov	r3, r0
 8021a18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8021a1c:	f107 0208 	add.w	r2, r7, #8
 8021a20:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8021a24:	4611      	mov	r1, r2
 8021a26:	4618      	mov	r0, r3
 8021a28:	f7ff fa1e 	bl	8020e68 <_ZN11QueueSender4Info11SerializeToEPPh>

		return CreateResponce(data, Info::Size, MessageMode::Info,
				ErrorCode::Success);
 8021a2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021a30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021a34:	6818      	ldr	r0, [r3, #0]
 8021a36:	f107 020c 	add.w	r2, r7, #12
 8021a3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021a3e:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021a42:	2300      	movs	r3, #0
 8021a44:	9301      	str	r3, [sp, #4]
 8021a46:	2302      	movs	r3, #2
 8021a48:	9300      	str	r3, [sp, #0]
 8021a4a:	2304      	movs	r3, #4
 8021a4c:	6809      	ldr	r1, [r1, #0]
 8021a4e:	f7ff ffa1 	bl	8021994 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021a52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021a56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021a5a:	6818      	ldr	r0, [r3, #0]
 8021a5c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8021a60:	46bd      	mov	sp, r7
 8021a62:	bd80      	pop	{r7, pc}

08021a64 <_ZNKSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) const noexcept
 8021a64:	b580      	push	{r7, lr}
 8021a66:	b082      	sub	sp, #8
 8021a68:	af00      	add	r7, sp, #0
 8021a6a:	6078      	str	r0, [r7, #4]
 8021a6c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8021a6e:	687b      	ldr	r3, [r7, #4]
 8021a70:	6839      	ldr	r1, [r7, #0]
 8021a72:	4618      	mov	r0, r3
 8021a74:	f001 fdfa 	bl	802366c <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8021a78:	4603      	mov	r3, r0
 8021a7a:	4618      	mov	r0, r3
 8021a7c:	3708      	adds	r7, #8
 8021a7e:	46bd      	mov	sp, r7
 8021a80:	bd80      	pop	{r7, pc}
	...

08021a84 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>:

	Responce ProcessSetPeriodRequest(const Request &request) {
 8021a84:	b580      	push	{r7, lr}
 8021a86:	b0c8      	sub	sp, #288	; 0x120
 8021a88:	af02      	add	r7, sp, #8
 8021a8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021a92:	6018      	str	r0, [r3, #0]
 8021a94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021a9c:	6019      	str	r1, [r3, #0]
 8021a9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021aa2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021aa6:	601a      	str	r2, [r3, #0]
		assert(
 8021aa8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021aac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021ab0:	681b      	ldr	r3, [r3, #0]
 8021ab2:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021ab6:	4618      	mov	r0, r3
 8021ab8:	f7ff f9bd 	bl	8020e36 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021abc:	4603      	mov	r3, r0
 8021abe:	2b03      	cmp	r3, #3
 8021ac0:	d006      	beq.n	8021ad0 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x4c>
 8021ac2:	4b23      	ldr	r3, [pc, #140]	; (8021b50 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xcc>)
 8021ac4:	4a23      	ldr	r2, [pc, #140]	; (8021b54 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xd0>)
 8021ac6:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8021aca:	4823      	ldr	r0, [pc, #140]	; (8021b58 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xd4>)
 8021acc:	f01e fb7c 	bl	80401c8 <__assert_func>
				MessageMode::Deserialize(request.MetaInfo)
						== MessageMode::SetPeriod);
		Responce::BufferT data;

		uint8_t newPeriod = request.Data[0];
 8021ad0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021ad4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021ad8:	681b      	ldr	r3, [r3, #0]
 8021ada:	2100      	movs	r1, #0
 8021adc:	4618      	mov	r0, r3
 8021ade:	f7ff ffc1 	bl	8021a64 <_ZNKSt5arrayIhLj256EEixEj>
 8021ae2:	4603      	mov	r3, r0
 8021ae4:	781b      	ldrb	r3, [r3, #0]
 8021ae6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

		ErrorCode::Type error = ErrorCode::Success;
 8021aea:	2300      	movs	r3, #0
 8021aec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (newPeriod == 0)
 8021af0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8021af4:	2b00      	cmp	r3, #0
 8021af6:	d103      	bne.n	8021b00 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x7c>
			error = ErrorCode::BadPeriod;
 8021af8:	2304      	movs	r3, #4
 8021afa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8021afe:	e009      	b.n	8021b14 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x90>
		else
			SetSendPeriod(newPeriod);
 8021b00:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8021b04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021b0c:	4611      	mov	r1, r2
 8021b0e:	6818      	ldr	r0, [r3, #0]
 8021b10:	f7ff fb58 	bl	80211c4 <_ZN11QueueSender13SetSendPeriodEh>

		return CreateResponce(data, 1, MessageMode::SetPeriod, error);
 8021b14:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021b1c:	6818      	ldr	r0, [r3, #0]
 8021b1e:	f107 0214 	add.w	r2, r7, #20
 8021b22:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b26:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021b2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8021b2e:	9301      	str	r3, [sp, #4]
 8021b30:	2303      	movs	r3, #3
 8021b32:	9300      	str	r3, [sp, #0]
 8021b34:	2301      	movs	r3, #1
 8021b36:	6809      	ldr	r1, [r1, #0]
 8021b38:	f7ff ff2c 	bl	8021994 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021b3c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021b44:	6818      	ldr	r0, [r3, #0]
 8021b46:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8021b4a:	46bd      	mov	sp, r7
 8021b4c:	bd80      	pop	{r7, pc}
 8021b4e:	bf00      	nop
 8021b50:	08041698 	.word	0x08041698
 8021b54:	080416e0 	.word	0x080416e0
 8021b58:	080413d0 	.word	0x080413d0

08021b5c <_ZN11QueueSender19CreateAsyncResponceERK7Request>:

	Responce CreateAsyncResponce(const Request &request) {
 8021b5c:	b580      	push	{r7, lr}
 8021b5e:	b0c8      	sub	sp, #288	; 0x120
 8021b60:	af02      	add	r7, sp, #8
 8021b62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021b6a:	6018      	str	r0, [r3, #0]
 8021b6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021b74:	6019      	str	r1, [r3, #0]
 8021b76:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b7a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021b7e:	601a      	str	r2, [r3, #0]
		assert(
 8021b80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021b88:	681b      	ldr	r3, [r3, #0]
 8021b8a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021b8e:	4618      	mov	r0, r3
 8021b90:	f7ff f951 	bl	8020e36 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021b94:	4603      	mov	r3, r0
 8021b96:	2b01      	cmp	r3, #1
 8021b98:	d006      	beq.n	8021ba8 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x4c>
 8021b9a:	4b27      	ldr	r3, [pc, #156]	; (8021c38 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xdc>)
 8021b9c:	4a27      	ldr	r2, [pc, #156]	; (8021c3c <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xe0>)
 8021b9e:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8021ba2:	4827      	ldr	r0, [pc, #156]	; (8021c40 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xe4>)
 8021ba4:	f01e fb10 	bl	80401c8 <__assert_func>
				MessageMode::Deserialize(request.MetaInfo)
						== MessageMode::Async);
		ErrorCode::Type error = ErrorCode::Success;
 8021ba8:	2300      	movs	r3, #0
 8021baa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (Requests.Full())
 8021bae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021bb2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021bb6:	681b      	ldr	r3, [r3, #0]
 8021bb8:	4618      	mov	r0, r3
 8021bba:	f001 fd65 	bl	8023688 <_ZNK10FixedQueueI7RequestLj500EE4FullEv>
 8021bbe:	4603      	mov	r3, r0
 8021bc0:	2b00      	cmp	r3, #0
 8021bc2:	d003      	beq.n	8021bcc <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x70>
			error = ErrorCode::QueueFull;
 8021bc4:	2305      	movs	r3, #5
 8021bc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8021bca:	e00c      	b.n	8021be6 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x8a>
		else
			Requests.Push(request);
 8021bcc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021bd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021bd4:	681a      	ldr	r2, [r3, #0]
 8021bd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021bda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021bde:	6819      	ldr	r1, [r3, #0]
 8021be0:	4610      	mov	r0, r2
 8021be2:	f001 fd63 	bl	80236ac <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_>

		return CreateResponce( { 0 }, 1, MessageMode::Async, error);
 8021be6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8021bee:	4618      	mov	r0, r3
 8021bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021bf4:	461a      	mov	r2, r3
 8021bf6:	2100      	movs	r1, #0
 8021bf8:	f01e fb78 	bl	80402ec <memset>
 8021bfc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021c00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021c04:	6818      	ldr	r0, [r3, #0]
 8021c06:	f107 0214 	add.w	r2, r7, #20
 8021c0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021c0e:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021c12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8021c16:	9301      	str	r3, [sp, #4]
 8021c18:	2301      	movs	r3, #1
 8021c1a:	9300      	str	r3, [sp, #0]
 8021c1c:	2301      	movs	r3, #1
 8021c1e:	6809      	ldr	r1, [r1, #0]
 8021c20:	f7ff feb8 	bl	8021994 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021c24:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021c28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021c2c:	6818      	ldr	r0, [r3, #0]
 8021c2e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8021c32:	46bd      	mov	sp, r7
 8021c34:	bd80      	pop	{r7, pc}
 8021c36:	bf00      	nop
 8021c38:	080415b4 	.word	0x080415b4
 8021c3c:	08041720 	.word	0x08041720
 8021c40:	080413d0 	.word	0x080413d0

08021c44 <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 8021c44:	b480      	push	{r7}
 8021c46:	b083      	sub	sp, #12
 8021c48:	af00      	add	r7, sp, #0
 8021c4a:	6078      	str	r0, [r7, #4]
		//WaitResponce = false;
	}
 8021c4c:	bf00      	nop
 8021c4e:	370c      	adds	r7, #12
 8021c50:	46bd      	mov	sp, r7
 8021c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c56:	4770      	bx	lr

08021c58 <_ZN11QueueSender14FinishTransmitEv>:

	void FinishTransmit() {
 8021c58:	b480      	push	{r7}
 8021c5a:	b083      	sub	sp, #12
 8021c5c:	af00      	add	r7, sp, #0
 8021c5e:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021c66:	2201      	movs	r2, #1
 8021c68:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
	}
 8021c6c:	bf00      	nop
 8021c6e:	370c      	adds	r7, #12
 8021c70:	46bd      	mov	sp, r7
 8021c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c76:	4770      	bx	lr

08021c78 <_ZNK11QueueSender7GetInfoEv>:

	Info GetInfo() const {
 8021c78:	b580      	push	{r7, lr}
 8021c7a:	b084      	sub	sp, #16
 8021c7c:	af00      	add	r7, sp, #0
 8021c7e:	6078      	str	r0, [r7, #4]
		uint16_t numRequests = Requests.GetSize();
 8021c80:	687b      	ldr	r3, [r7, #4]
 8021c82:	4618      	mov	r0, r3
 8021c84:	f001 fd54 	bl	8023730 <_ZNK10FixedQueueI7RequestLj500EE7GetSizeEv>
 8021c88:	4603      	mov	r3, r0
 8021c8a:	81fb      	strh	r3, [r7, #14]
		uint16_t numResponces = Responces.GetSize();
 8021c8c:	687a      	ldr	r2, [r7, #4]
 8021c8e:	4b0b      	ldr	r3, [pc, #44]	; (8021cbc <_ZNK11QueueSender7GetInfoEv+0x44>)
 8021c90:	4413      	add	r3, r2
 8021c92:	4618      	mov	r0, r3
 8021c94:	f001 fd58 	bl	8023748 <_ZNK10FixedQueueI8ResponceLj10EE7GetSizeEv>
 8021c98:	4603      	mov	r3, r0
 8021c9a:	81bb      	strh	r3, [r7, #12]
		return {numRequests, numResponces};
 8021c9c:	89fb      	ldrh	r3, [r7, #14]
 8021c9e:	813b      	strh	r3, [r7, #8]
 8021ca0:	89bb      	ldrh	r3, [r7, #12]
 8021ca2:	817b      	strh	r3, [r7, #10]
 8021ca4:	2300      	movs	r3, #0
 8021ca6:	893a      	ldrh	r2, [r7, #8]
 8021ca8:	f362 030f 	bfi	r3, r2, #0, #16
 8021cac:	897a      	ldrh	r2, [r7, #10]
 8021cae:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8021cb2:	4618      	mov	r0, r3
 8021cb4:	3710      	adds	r7, #16
 8021cb6:	46bd      	mov	sp, r7
 8021cb8:	bd80      	pop	{r7, pc}
 8021cba:	bf00      	nop
 8021cbc:	00020b7c 	.word	0x00020b7c

08021cc0 <_ZN10FixedQueueI7RequestLj10EEC1Ev>:
class FixedQueue {
 8021cc0:	b480      	push	{r7}
 8021cc2:	b083      	sub	sp, #12
 8021cc4:	af00      	add	r7, sp, #0
 8021cc6:	6078      	str	r0, [r7, #4]
 8021cc8:	687b      	ldr	r3, [r7, #4]
 8021cca:	2200      	movs	r2, #0
 8021ccc:	601a      	str	r2, [r3, #0]
 8021cce:	687b      	ldr	r3, [r7, #4]
 8021cd0:	2200      	movs	r2, #0
 8021cd2:	605a      	str	r2, [r3, #4]
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	2200      	movs	r2, #0
 8021cd8:	609a      	str	r2, [r3, #8]
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	4618      	mov	r0, r3
 8021cde:	370c      	adds	r7, #12
 8021ce0:	46bd      	mov	sp, r7
 8021ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ce6:	4770      	bx	lr

08021ce8 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;
public:
	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 8021ce8:	b580      	push	{r7, lr}
 8021cea:	b084      	sub	sp, #16
 8021cec:	af00      	add	r7, sp, #0
 8021cee:	60f8      	str	r0, [r7, #12]
 8021cf0:	60b9      	str	r1, [r7, #8]
 8021cf2:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8021cf4:	68fb      	ldr	r3, [r7, #12]
 8021cf6:	4618      	mov	r0, r3
 8021cf8:	f7ff ffe2 	bl	8021cc0 <_ZN10FixedQueueI7RequestLj10EEC1Ev>
 8021cfc:	68fb      	ldr	r3, [r7, #12]
 8021cfe:	68ba      	ldr	r2, [r7, #8]
 8021d00:	f8c3 2a84 	str.w	r2, [r3, #2692]	; 0xa84
 8021d04:	68fb      	ldr	r3, [r7, #12]
 8021d06:	687a      	ldr	r2, [r7, #4]
 8021d08:	f8c3 2a88 	str.w	r2, [r3, #2696]	; 0xa88
 8021d0c:	68fb      	ldr	r3, [r7, #12]
 8021d0e:	2201      	movs	r2, #1
 8021d10:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
		assert(uart != NULL);
 8021d14:	68bb      	ldr	r3, [r7, #8]
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	d106      	bne.n	8021d28 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x40>
 8021d1a:	4b06      	ldr	r3, [pc, #24]	; (8021d34 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x4c>)
 8021d1c:	4a06      	ldr	r2, [pc, #24]	; (8021d38 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>)
 8021d1e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8021d22:	4806      	ldr	r0, [pc, #24]	; (8021d3c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x54>)
 8021d24:	f01e fa50 	bl	80401c8 <__assert_func>
	}
 8021d28:	68fb      	ldr	r3, [r7, #12]
 8021d2a:	4618      	mov	r0, r3
 8021d2c:	3710      	adds	r7, #16
 8021d2e:	46bd      	mov	sp, r7
 8021d30:	bd80      	pop	{r7, pc}
 8021d32:	bf00      	nop
 8021d34:	080413f4 	.word	0x080413f4
 8021d38:	0804175c 	.word	0x0804175c
 8021d3c:	080413d0 	.word	0x080413d0

08021d40 <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 8021d40:	b580      	push	{r7, lr}
 8021d42:	b082      	sub	sp, #8
 8021d44:	af00      	add	r7, sp, #0
 8021d46:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	2200      	movs	r2, #0
 8021d4c:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
		assert(HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1) == HAL_OK);
 8021d50:	687b      	ldr	r3, [r7, #4]
 8021d52:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021d56:	687b      	ldr	r3, [r7, #4]
 8021d58:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021d5c:	2201      	movs	r2, #1
 8021d5e:	4619      	mov	r1, r3
 8021d60:	f017 fcae 	bl	80396c0 <HAL_UART_Receive_IT>
 8021d64:	4603      	mov	r3, r0
 8021d66:	2b00      	cmp	r3, #0
 8021d68:	d006      	beq.n	8021d78 <_ZN13HeadInterface14ResetReadStateEv+0x38>
 8021d6a:	4b05      	ldr	r3, [pc, #20]	; (8021d80 <_ZN13HeadInterface14ResetReadStateEv+0x40>)
 8021d6c:	4a05      	ldr	r2, [pc, #20]	; (8021d84 <_ZN13HeadInterface14ResetReadStateEv+0x44>)
 8021d6e:	f240 2109 	movw	r1, #521	; 0x209
 8021d72:	4805      	ldr	r0, [pc, #20]	; (8021d88 <_ZN13HeadInterface14ResetReadStateEv+0x48>)
 8021d74:	f01e fa28 	bl	80401c8 <__assert_func>
	}
 8021d78:	bf00      	nop
 8021d7a:	3708      	adds	r7, #8
 8021d7c:	46bd      	mov	sp, r7
 8021d7e:	bd80      	pop	{r7, pc}
 8021d80:	08041798 	.word	0x08041798
 8021d84:	080417d4 	.word	0x080417d4
 8021d88:	080413d0 	.word	0x080413d0

08021d8c <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 8021d8c:	b580      	push	{r7, lr}
 8021d8e:	b082      	sub	sp, #8
 8021d90:	af00      	add	r7, sp, #0
 8021d92:	6078      	str	r0, [r7, #4]
		return !Requests.Empty();
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	4618      	mov	r0, r3
 8021d98:	f001 fce2 	bl	8023760 <_ZNK10FixedQueueI7RequestLj10EE5EmptyEv>
 8021d9c:	4603      	mov	r3, r0
 8021d9e:	f083 0301 	eor.w	r3, r3, #1
 8021da2:	b2db      	uxtb	r3, r3
	}
 8021da4:	4618      	mov	r0, r3
 8021da6:	3708      	adds	r7, #8
 8021da8:	46bd      	mov	sp, r7
 8021daa:	bd80      	pop	{r7, pc}

08021dac <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 8021dac:	b590      	push	{r4, r7, lr}
 8021dae:	b095      	sub	sp, #84	; 0x54
 8021db0:	af00      	add	r7, sp, #0
 8021db2:	6078      	str	r0, [r7, #4]
 8021db4:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 8021db6:	687b      	ldr	r3, [r7, #4]
 8021db8:	f893 3ca0 	ldrb.w	r3, [r3, #3232]	; 0xca0
 8021dbc:	2b00      	cmp	r3, #0
 8021dbe:	d100      	bne.n	8021dc2 <_ZN13HeadInterface4SendERK8Responce+0x16>
 8021dc0:	e7f9      	b.n	8021db6 <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		uint8_t *ptr = CurrentResponceBuffer.data();
 8021dc2:	687b      	ldr	r3, [r7, #4]
 8021dc4:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021dc8:	4618      	mov	r0, r3
 8021dca:	f001 fbd3 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 8021dce:	64f8      	str	r0, [r7, #76]	; 0x4c

		*(ptr++) = SOM1Val;
 8021dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021dd2:	1c5a      	adds	r2, r3, #1
 8021dd4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021dd6:	22ff      	movs	r2, #255	; 0xff
 8021dd8:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8021dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021ddc:	1c5a      	adds	r2, r3, #1
 8021dde:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021de0:	22aa      	movs	r2, #170	; 0xaa
 8021de2:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 8021de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021de6:	1c5a      	adds	r2, r3, #1
 8021de8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021dea:	683a      	ldr	r2, [r7, #0]
 8021dec:	f892 2104 	ldrb.w	r2, [r2, #260]	; 0x104
 8021df0:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.ResponceSize);
 8021df2:	683b      	ldr	r3, [r7, #0]
 8021df4:	4618      	mov	r0, r3
 8021df6:	f001 fbca 	bl	802358e <_ZNKSt5arrayIhLj256EE4dataEv>
 8021dfa:	4601      	mov	r1, r0
 8021dfc:	683b      	ldr	r3, [r7, #0]
 8021dfe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021e02:	461a      	mov	r2, r3
 8021e04:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8021e06:	f01e fa49 	bl	804029c <memcpy>

		ptr += responce.ResponceSize;
 8021e0a:	683b      	ldr	r3, [r7, #0]
 8021e0c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021e10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021e12:	4413      	add	r3, r2
 8021e14:	64fb      	str	r3, [r7, #76]	; 0x4c
		*ptr = SOM3Val;
 8021e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021e18:	22af      	movs	r2, #175	; 0xaf
 8021e1a:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 8021e1c:	687b      	ldr	r3, [r7, #4]
 8021e1e:	2200      	movs	r2, #0
 8021e20:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0

		size_t sz = responce.ResponceSize + 3 + 1;
 8021e24:	683b      	ldr	r3, [r7, #0]
 8021e26:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021e2a:	3304      	adds	r3, #4
 8021e2c:	64bb      	str	r3, [r7, #72]	; 0x48
		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 8021e2e:	687b      	ldr	r3, [r7, #4]
 8021e30:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021e34:	4618      	mov	r0, r3
 8021e36:	f001 fb9d 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 8021e3a:	4601      	mov	r1, r0
 8021e3c:	f107 0308 	add.w	r3, r7, #8
 8021e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021e42:	4618      	mov	r0, r3
 8021e44:	f01e fa2a 	bl	804029c <memcpy>

		assert(
 8021e48:	687b      	ldr	r3, [r7, #4]
 8021e4a:	f8d3 4a84 	ldr.w	r4, [r3, #2692]	; 0xa84
 8021e4e:	687b      	ldr	r3, [r7, #4]
 8021e50:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021e54:	4618      	mov	r0, r3
 8021e56:	f001 fb8d 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 8021e5a:	4601      	mov	r1, r0
 8021e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021e5e:	b29b      	uxth	r3, r3
 8021e60:	461a      	mov	r2, r3
 8021e62:	4620      	mov	r0, r4
 8021e64:	f017 fb84 	bl	8039570 <HAL_UART_Transmit_IT>
 8021e68:	4603      	mov	r3, r0
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	d006      	beq.n	8021e7c <_ZN13HeadInterface4SendERK8Responce+0xd0>
 8021e6e:	4b05      	ldr	r3, [pc, #20]	; (8021e84 <_ZN13HeadInterface4SendERK8Responce+0xd8>)
 8021e70:	4a05      	ldr	r2, [pc, #20]	; (8021e88 <_ZN13HeadInterface4SendERK8Responce+0xdc>)
 8021e72:	f44f 710a 	mov.w	r1, #552	; 0x228
 8021e76:	4805      	ldr	r0, [pc, #20]	; (8021e8c <_ZN13HeadInterface4SendERK8Responce+0xe0>)
 8021e78:	f01e f9a6 	bl	80401c8 <__assert_func>
				HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(),
						sz) == HAL_OK);
	}
 8021e7c:	bf00      	nop
 8021e7e:	3754      	adds	r7, #84	; 0x54
 8021e80:	46bd      	mov	sp, r7
 8021e82:	bd90      	pop	{r4, r7, pc}
 8021e84:	080417fc 	.word	0x080417fc
 8021e88:	0804184c 	.word	0x0804184c
 8021e8c:	080413d0 	.word	0x080413d0

08021e90 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 8021e90:	b580      	push	{r7, lr}
 8021e92:	b082      	sub	sp, #8
 8021e94:	af00      	add	r7, sp, #0
 8021e96:	6078      	str	r0, [r7, #4]
 8021e98:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 8021e9a:	6838      	ldr	r0, [r7, #0]
 8021e9c:	f7ff ff76 	bl	8021d8c <_ZNK13HeadInterface10HasRequestEv>
 8021ea0:	4603      	mov	r3, r0
 8021ea2:	2b00      	cmp	r3, #0
 8021ea4:	d106      	bne.n	8021eb4 <_ZN13HeadInterface10GetRequestEv+0x24>
 8021ea6:	4b0e      	ldr	r3, [pc, #56]	; (8021ee0 <_ZN13HeadInterface10GetRequestEv+0x50>)
 8021ea8:	4a0e      	ldr	r2, [pc, #56]	; (8021ee4 <_ZN13HeadInterface10GetRequestEv+0x54>)
 8021eaa:	f240 212e 	movw	r1, #558	; 0x22e
 8021eae:	480e      	ldr	r0, [pc, #56]	; (8021ee8 <_ZN13HeadInterface10GetRequestEv+0x58>)
 8021eb0:	f01e f98a 	bl	80401c8 <__assert_func>
		Request request = Requests.Front();
 8021eb4:	683b      	ldr	r3, [r7, #0]
 8021eb6:	4618      	mov	r0, r3
 8021eb8:	f001 fc64 	bl	8023784 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv>
 8021ebc:	4602      	mov	r2, r0
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	4618      	mov	r0, r3
 8021ec2:	4611      	mov	r1, r2
 8021ec4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8021ec8:	461a      	mov	r2, r3
 8021eca:	f01e f9e7 	bl	804029c <memcpy>
		Requests.Pop();
 8021ece:	683b      	ldr	r3, [r7, #0]
 8021ed0:	4618      	mov	r0, r3
 8021ed2:	f001 fc79 	bl	80237c8 <_ZN10FixedQueueI7RequestLj10EE3PopEv>
		return request;
 8021ed6:	bf00      	nop
	}
 8021ed8:	6878      	ldr	r0, [r7, #4]
 8021eda:	3708      	adds	r7, #8
 8021edc:	46bd      	mov	sp, r7
 8021ede:	bd80      	pop	{r7, pc}
 8021ee0:	08041878 	.word	0x08041878
 8021ee4:	08041888 	.word	0x08041888
 8021ee8:	080413d0 	.word	0x080413d0

08021eec <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8021eec:	b480      	push	{r7}
 8021eee:	b083      	sub	sp, #12
 8021ef0:	af00      	add	r7, sp, #0
 8021ef2:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021ef4:	687b      	ldr	r3, [r7, #4]
 8021ef6:	2201      	movs	r2, #1
 8021ef8:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
	}
 8021efc:	bf00      	nop
 8021efe:	370c      	adds	r7, #12
 8021f00:	46bd      	mov	sp, r7
 8021f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f06:	4770      	bx	lr

08021f08 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8021f08:	b590      	push	{r4, r7, lr}
 8021f0a:	b083      	sub	sp, #12
 8021f0c:	af00      	add	r7, sp, #0
 8021f0e:	6078      	str	r0, [r7, #4]
		static size_t nRequests = 0;

		switch (CurrentState) {
 8021f10:	687b      	ldr	r3, [r7, #4]
 8021f12:	f8d3 3a90 	ldr.w	r3, [r3, #2704]	; 0xa90
 8021f16:	2b07      	cmp	r3, #7
 8021f18:	f200 80c7 	bhi.w	80220aa <_ZN13HeadInterface19ProcessRecievedDataEv+0x1a2>
 8021f1c:	a201      	add	r2, pc, #4	; (adr r2, 8021f24 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c>)
 8021f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021f22:	bf00      	nop
 8021f24:	08021f45 	.word	0x08021f45
 8021f28:	08021f75 	.word	0x08021f75
 8021f2c:	08021fa5 	.word	0x08021fa5
 8021f30:	08021fcf 	.word	0x08021fcf
 8021f34:	08021ffb 	.word	0x08021ffb
 8021f38:	08022027 	.word	0x08022027
 8021f3c:	08022061 	.word	0x08022061
 8021f40:	0802207f 	.word	0x0802207f
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021f4a:	2bff      	cmp	r3, #255	; 0xff
 8021f4c:	d10e      	bne.n	8021f6c <_ZN13HeadInterface19ProcessRecievedDataEv+0x64>
				CurrentState = ReadState::SOM2;
 8021f4e:	687b      	ldr	r3, [r7, #4]
 8021f50:	2201      	movs	r2, #1
 8021f52:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021f62:	2201      	movs	r2, #1
 8021f64:	4619      	mov	r1, r3
 8021f66:	f017 fbab 	bl	80396c0 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021f6a:	e0a2      	b.n	80220b2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1aa>
				ResetReadState();
 8021f6c:	6878      	ldr	r0, [r7, #4]
 8021f6e:	f7ff fee7 	bl	8021d40 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021f72:	e09e      	b.n	80220b2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1aa>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 8021f74:	687b      	ldr	r3, [r7, #4]
 8021f76:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021f7a:	2baa      	cmp	r3, #170	; 0xaa
 8021f7c:	d10e      	bne.n	8021f9c <_ZN13HeadInterface19ProcessRecievedDataEv+0x94>
				CurrentState = ReadState::PERIPHERY_ID;
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	2202      	movs	r2, #2
 8021f82:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021f8c:	687b      	ldr	r3, [r7, #4]
 8021f8e:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021f92:	2201      	movs	r2, #1
 8021f94:	4619      	mov	r1, r3
 8021f96:	f017 fb93 	bl	80396c0 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021f9a:	e08a      	b.n	80220b2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1aa>
				ResetReadState();
 8021f9c:	6878      	ldr	r0, [r7, #4]
 8021f9e:	f7ff fecf 	bl	8021d40 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021fa2:	e086      	b.n	80220b2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1aa>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8021fa4:	687b      	ldr	r3, [r7, #4]
 8021fa6:	f893 2a8c 	ldrb.w	r2, [r3, #2700]	; 0xa8c
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	f883 2b9d 	strb.w	r2, [r3, #2973]	; 0xb9d
			CurrentState = ReadState::REQUEST_SIZE;
 8021fb0:	687b      	ldr	r3, [r7, #4]
 8021fb2:	2203      	movs	r2, #3
 8021fb4:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021fb8:	687b      	ldr	r3, [r7, #4]
 8021fba:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021fbe:	687b      	ldr	r3, [r7, #4]
 8021fc0:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021fc4:	2201      	movs	r2, #1
 8021fc6:	4619      	mov	r1, r3
 8021fc8:	f017 fb7a 	bl	80396c0 <HAL_UART_Receive_IT>
			break;
 8021fcc:	e071      	b.n	80220b2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1aa>
		}
		case ReadState::REQUEST_SIZE: {
			CurrentRequest.RequestSize = CurrentValue;
 8021fce:	687b      	ldr	r3, [r7, #4]
 8021fd0:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021fd4:	461a      	mov	r2, r3
 8021fd6:	687b      	ldr	r3, [r7, #4]
 8021fd8:	f8c3 2b94 	str.w	r2, [r3, #2964]	; 0xb94
			CurrentState = ReadState::RESPONCE_SIZE;
 8021fdc:	687b      	ldr	r3, [r7, #4]
 8021fde:	2204      	movs	r2, #4
 8021fe0:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021fe4:	687b      	ldr	r3, [r7, #4]
 8021fe6:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021fea:	687b      	ldr	r3, [r7, #4]
 8021fec:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021ff0:	2201      	movs	r2, #1
 8021ff2:	4619      	mov	r1, r3
 8021ff4:	f017 fb64 	bl	80396c0 <HAL_UART_Receive_IT>
			break;
 8021ff8:	e05b      	b.n	80220b2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1aa>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 8021ffa:	687b      	ldr	r3, [r7, #4]
 8021ffc:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8022000:	461a      	mov	r2, r3
 8022002:	687b      	ldr	r3, [r7, #4]
 8022004:	f8c3 2b98 	str.w	r2, [r3, #2968]	; 0xb98
			CurrentState = ReadState::META;
 8022008:	687b      	ldr	r3, [r7, #4]
 802200a:	2205      	movs	r2, #5
 802200c:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8022010:	687b      	ldr	r3, [r7, #4]
 8022012:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 802201c:	2201      	movs	r2, #1
 802201e:	4619      	mov	r1, r3
 8022020:	f017 fb4e 	bl	80396c0 <HAL_UART_Receive_IT>
			break;
 8022024:	e045      	b.n	80220b2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1aa>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 8022026:	687b      	ldr	r3, [r7, #4]
 8022028:	f893 2a8c 	ldrb.w	r2, [r3, #2700]	; 0xa8c
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	f883 2b9c 	strb.w	r2, [r3, #2972]	; 0xb9c
			CurrentState = ReadState::DATA;
 8022032:	687b      	ldr	r3, [r7, #4]
 8022034:	2206      	movs	r2, #6
 8022036:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	f8d3 4a84 	ldr.w	r4, [r3, #2692]	; 0xa84
 8022040:	687b      	ldr	r3, [r7, #4]
 8022042:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8022046:	4618      	mov	r0, r3
 8022048:	f001 fa94 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 802204c:	4601      	mov	r1, r0
					CurrentRequest.RequestSize);
 802204e:	687b      	ldr	r3, [r7, #4]
 8022050:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8022054:	b29b      	uxth	r3, r3
 8022056:	461a      	mov	r2, r3
 8022058:	4620      	mov	r0, r4
 802205a:	f017 fb31 	bl	80396c0 <HAL_UART_Receive_IT>
			break;
 802205e:	e028      	b.n	80220b2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1aa>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 8022060:	687b      	ldr	r3, [r7, #4]
 8022062:	2207      	movs	r2, #7
 8022064:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8022068:	687b      	ldr	r3, [r7, #4]
 802206a:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 802206e:	687b      	ldr	r3, [r7, #4]
 8022070:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8022074:	2201      	movs	r2, #1
 8022076:	4619      	mov	r1, r3
 8022078:	f017 fb22 	bl	80396c0 <HAL_UART_Receive_IT>
			break;
 802207c:	e019      	b.n	80220b2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1aa>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8022084:	2baf      	cmp	r3, #175	; 0xaf
 8022086:	d10c      	bne.n	80220a2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x19a>
				Requests.Push(CurrentRequest);
 8022088:	687a      	ldr	r2, [r7, #4]
 802208a:	687b      	ldr	r3, [r7, #4]
 802208c:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8022090:	4619      	mov	r1, r3
 8022092:	4610      	mov	r0, r2
 8022094:	f001 fbc6 	bl	8023824 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_>
				nRequests++;
 8022098:	4b08      	ldr	r3, [pc, #32]	; (80220bc <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>)
 802209a:	681b      	ldr	r3, [r3, #0]
 802209c:	3301      	adds	r3, #1
 802209e:	4a07      	ldr	r2, [pc, #28]	; (80220bc <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>)
 80220a0:	6013      	str	r3, [r2, #0]
			}
			ResetReadState();
 80220a2:	6878      	ldr	r0, [r7, #4]
 80220a4:	f7ff fe4c 	bl	8021d40 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 80220a8:	e003      	b.n	80220b2 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1aa>
		}
		default:
			ResetReadState();
 80220aa:	6878      	ldr	r0, [r7, #4]
 80220ac:	f7ff fe48 	bl	8021d40 <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 80220b0:	bf00      	nop
 80220b2:	bf00      	nop
 80220b4:	370c      	adds	r7, #12
 80220b6:	46bd      	mov	sp, r7
 80220b8:	bd90      	pop	{r4, r7, pc}
 80220ba:	bf00      	nop
 80220bc:	240001cc 	.word	0x240001cc

080220c0 <_ZN14ServoDataFrameC1ERK8Responce>:
	Responce ServoData;
	uint8_t Error;

	static constexpr size_t Size = BodyMessages::ServoPosResponceSize;

	ServoDataFrame(const Responce &servoData) :
 80220c0:	b580      	push	{r7, lr}
 80220c2:	b082      	sub	sp, #8
 80220c4:	af00      	add	r7, sp, #0
 80220c6:	6078      	str	r0, [r7, #4]
 80220c8:	6039      	str	r1, [r7, #0]
			ServoData { servoData }, Error { servoData.Error } {
 80220ca:	687a      	ldr	r2, [r7, #4]
 80220cc:	683b      	ldr	r3, [r7, #0]
 80220ce:	4610      	mov	r0, r2
 80220d0:	4619      	mov	r1, r3
 80220d2:	f44f 7384 	mov.w	r3, #264	; 0x108
 80220d6:	461a      	mov	r2, r3
 80220d8:	f01e f8e0 	bl	804029c <memcpy>
 80220dc:	683b      	ldr	r3, [r7, #0]
 80220de:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80220e2:	687b      	ldr	r3, [r7, #4]
 80220e4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		assert(ServoData.ResponceSize == BodyMessages::ServoPosResponceSize);
 80220e8:	687b      	ldr	r3, [r7, #4]
 80220ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80220ee:	2b21      	cmp	r3, #33	; 0x21
 80220f0:	d006      	beq.n	8022100 <_ZN14ServoDataFrameC1ERK8Responce+0x40>
 80220f2:	4b06      	ldr	r3, [pc, #24]	; (802210c <_ZN14ServoDataFrameC1ERK8Responce+0x4c>)
 80220f4:	4a06      	ldr	r2, [pc, #24]	; (8022110 <_ZN14ServoDataFrameC1ERK8Responce+0x50>)
 80220f6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80220fa:	4806      	ldr	r0, [pc, #24]	; (8022114 <_ZN14ServoDataFrameC1ERK8Responce+0x54>)
 80220fc:	f01e f864 	bl	80401c8 <__assert_func>
	}
 8022100:	687b      	ldr	r3, [r7, #4]
 8022102:	4618      	mov	r0, r3
 8022104:	3708      	adds	r7, #8
 8022106:	46bd      	mov	sp, r7
 8022108:	bd80      	pop	{r7, pc}
 802210a:	bf00      	nop
 802210c:	080418ac 	.word	0x080418ac
 8022110:	080418ec 	.word	0x080418ec
 8022114:	080413d0 	.word	0x080413d0

08022118 <_ZN14ServoDataFrame11SerializeToEPPh>:

	ServoDataFrame() = default;

	void SerializeTo(uint8_t **ptr) {
 8022118:	b590      	push	{r4, r7, lr}
 802211a:	b083      	sub	sp, #12
 802211c:	af00      	add	r7, sp, #0
 802211e:	6078      	str	r0, [r7, #4]
 8022120:	6039      	str	r1, [r7, #0]
		assert(ptr);
 8022122:	683b      	ldr	r3, [r7, #0]
 8022124:	2b00      	cmp	r3, #0
 8022126:	d106      	bne.n	8022136 <_ZN14ServoDataFrame11SerializeToEPPh+0x1e>
 8022128:	4b15      	ldr	r3, [pc, #84]	; (8022180 <_ZN14ServoDataFrame11SerializeToEPPh+0x68>)
 802212a:	4a16      	ldr	r2, [pc, #88]	; (8022184 <_ZN14ServoDataFrame11SerializeToEPPh+0x6c>)
 802212c:	f240 2186 	movw	r1, #646	; 0x286
 8022130:	4815      	ldr	r0, [pc, #84]	; (8022188 <_ZN14ServoDataFrame11SerializeToEPPh+0x70>)
 8022132:	f01e f849 	bl	80401c8 <__assert_func>
		assert(*ptr);
 8022136:	683b      	ldr	r3, [r7, #0]
 8022138:	681b      	ldr	r3, [r3, #0]
 802213a:	2b00      	cmp	r3, #0
 802213c:	d106      	bne.n	802214c <_ZN14ServoDataFrame11SerializeToEPPh+0x34>
 802213e:	4b13      	ldr	r3, [pc, #76]	; (802218c <_ZN14ServoDataFrame11SerializeToEPPh+0x74>)
 8022140:	4a10      	ldr	r2, [pc, #64]	; (8022184 <_ZN14ServoDataFrame11SerializeToEPPh+0x6c>)
 8022142:	f240 2187 	movw	r1, #647	; 0x287
 8022146:	4810      	ldr	r0, [pc, #64]	; (8022188 <_ZN14ServoDataFrame11SerializeToEPPh+0x70>)
 8022148:	f01e f83e 	bl	80401c8 <__assert_func>

		memcpy(*ptr, ServoData.Data.data(), ServoData.ResponceSize);
 802214c:	683b      	ldr	r3, [r7, #0]
 802214e:	681c      	ldr	r4, [r3, #0]
 8022150:	687b      	ldr	r3, [r7, #4]
 8022152:	4618      	mov	r0, r3
 8022154:	f001 fa0e 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 8022158:	4601      	mov	r1, r0
 802215a:	687b      	ldr	r3, [r7, #4]
 802215c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022160:	461a      	mov	r2, r3
 8022162:	4620      	mov	r0, r4
 8022164:	f01e f89a 	bl	804029c <memcpy>

		*ptr += ServoData.ResponceSize;
 8022168:	683b      	ldr	r3, [r7, #0]
 802216a:	681a      	ldr	r2, [r3, #0]
 802216c:	687b      	ldr	r3, [r7, #4]
 802216e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022172:	441a      	add	r2, r3
 8022174:	683b      	ldr	r3, [r7, #0]
 8022176:	601a      	str	r2, [r3, #0]
	}
 8022178:	bf00      	nop
 802217a:	370c      	adds	r7, #12
 802217c:	46bd      	mov	sp, r7
 802217e:	bd90      	pop	{r4, r7, pc}
 8022180:	0804139c 	.word	0x0804139c
 8022184:	0804191c 	.word	0x0804191c
 8022188:	080413d0 	.word	0x080413d0
 802218c:	080413ec 	.word	0x080413ec

08022190 <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameE>:
	uint8_t Error = 0;

	static constexpr size_t Size = 4 * sizeof(int16_t)
			+ /* sizeof(float) + */2 * sizeof(uint32_t) + sizeof(uint8_t);

	IMUFrame(const BHYWrapper::BHYFrame &frame) :
 8022190:	b4b0      	push	{r4, r5, r7}
 8022192:	b083      	sub	sp, #12
 8022194:	af00      	add	r7, sp, #0
 8022196:	6078      	str	r0, [r7, #4]
 8022198:	6039      	str	r1, [r7, #0]
			Frame { frame } {
 802219a:	687a      	ldr	r2, [r7, #4]
 802219c:	683b      	ldr	r3, [r7, #0]
 802219e:	4614      	mov	r4, r2
 80221a0:	461d      	mov	r5, r3
 80221a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80221a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80221a6:	682b      	ldr	r3, [r5, #0]
 80221a8:	6023      	str	r3, [r4, #0]
 80221aa:	687b      	ldr	r3, [r7, #4]
 80221ac:	2200      	movs	r2, #0
 80221ae:	751a      	strb	r2, [r3, #20]
	}
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	4618      	mov	r0, r3
 80221b4:	370c      	adds	r7, #12
 80221b6:	46bd      	mov	sp, r7
 80221b8:	bcb0      	pop	{r4, r5, r7}
 80221ba:	4770      	bx	lr

080221bc <_ZN8IMUFrame11SerializeToEPPh>:

	IMUFrame() = default;

	void SerializeTo(uint8_t **ptr) {
 80221bc:	b580      	push	{r7, lr}
 80221be:	b082      	sub	sp, #8
 80221c0:	af00      	add	r7, sp, #0
 80221c2:	6078      	str	r0, [r7, #4]
 80221c4:	6039      	str	r1, [r7, #0]
		assert(ptr);
 80221c6:	683b      	ldr	r3, [r7, #0]
 80221c8:	2b00      	cmp	r3, #0
 80221ca:	d106      	bne.n	80221da <_ZN8IMUFrame11SerializeToEPPh+0x1e>
 80221cc:	4b2f      	ldr	r3, [pc, #188]	; (802228c <_ZN8IMUFrame11SerializeToEPPh+0xd0>)
 80221ce:	4a30      	ldr	r2, [pc, #192]	; (8022290 <_ZN8IMUFrame11SerializeToEPPh+0xd4>)
 80221d0:	f240 219d 	movw	r1, #669	; 0x29d
 80221d4:	482f      	ldr	r0, [pc, #188]	; (8022294 <_ZN8IMUFrame11SerializeToEPPh+0xd8>)
 80221d6:	f01d fff7 	bl	80401c8 <__assert_func>
		assert(*ptr);
 80221da:	683b      	ldr	r3, [r7, #0]
 80221dc:	681b      	ldr	r3, [r3, #0]
 80221de:	2b00      	cmp	r3, #0
 80221e0:	d106      	bne.n	80221f0 <_ZN8IMUFrame11SerializeToEPPh+0x34>
 80221e2:	4b2d      	ldr	r3, [pc, #180]	; (8022298 <_ZN8IMUFrame11SerializeToEPPh+0xdc>)
 80221e4:	4a2a      	ldr	r2, [pc, #168]	; (8022290 <_ZN8IMUFrame11SerializeToEPPh+0xd4>)
 80221e6:	f240 219e 	movw	r1, #670	; 0x29e
 80221ea:	482a      	ldr	r0, [pc, #168]	; (8022294 <_ZN8IMUFrame11SerializeToEPPh+0xd8>)
 80221ec:	f01d ffec 	bl	80401c8 <__assert_func>

		*reinterpret_cast<int16_t*>(*ptr) = Frame.Orientation.X;
 80221f0:	683b      	ldr	r3, [r7, #0]
 80221f2:	681b      	ldr	r3, [r3, #0]
 80221f4:	687a      	ldr	r2, [r7, #4]
 80221f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80221fa:	801a      	strh	r2, [r3, #0]
		*ptr += sizeof(int16_t);
 80221fc:	683b      	ldr	r3, [r7, #0]
 80221fe:	681b      	ldr	r3, [r3, #0]
 8022200:	1c9a      	adds	r2, r3, #2
 8022202:	683b      	ldr	r3, [r7, #0]
 8022204:	601a      	str	r2, [r3, #0]

		*reinterpret_cast<int16_t*>(*ptr) = Frame.Orientation.Y;
 8022206:	683b      	ldr	r3, [r7, #0]
 8022208:	681b      	ldr	r3, [r3, #0]
 802220a:	687a      	ldr	r2, [r7, #4]
 802220c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8022210:	801a      	strh	r2, [r3, #0]
		*ptr += sizeof(int16_t);
 8022212:	683b      	ldr	r3, [r7, #0]
 8022214:	681b      	ldr	r3, [r3, #0]
 8022216:	1c9a      	adds	r2, r3, #2
 8022218:	683b      	ldr	r3, [r7, #0]
 802221a:	601a      	str	r2, [r3, #0]

		*reinterpret_cast<int16_t*>(*ptr) = Frame.Orientation.Z;
 802221c:	683b      	ldr	r3, [r7, #0]
 802221e:	681b      	ldr	r3, [r3, #0]
 8022220:	687a      	ldr	r2, [r7, #4]
 8022222:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8022226:	801a      	strh	r2, [r3, #0]
		*ptr += sizeof(int16_t);
 8022228:	683b      	ldr	r3, [r7, #0]
 802222a:	681b      	ldr	r3, [r3, #0]
 802222c:	1c9a      	adds	r2, r3, #2
 802222e:	683b      	ldr	r3, [r7, #0]
 8022230:	601a      	str	r2, [r3, #0]

		*reinterpret_cast<int16_t*>(*ptr) = Frame.Orientation.W;
 8022232:	683b      	ldr	r3, [r7, #0]
 8022234:	681b      	ldr	r3, [r3, #0]
 8022236:	687a      	ldr	r2, [r7, #4]
 8022238:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 802223c:	801a      	strh	r2, [r3, #0]
		*ptr += sizeof(int16_t);
 802223e:	683b      	ldr	r3, [r7, #0]
 8022240:	681b      	ldr	r3, [r3, #0]
 8022242:	1c9a      	adds	r2, r3, #2
 8022244:	683b      	ldr	r3, [r7, #0]
 8022246:	601a      	str	r2, [r3, #0]
		/*
		 *reinterpret_cast<float*>(*ptr) = Orientation.Accuracy;
		 *ptr += sizeof(float);
		 */

		*reinterpret_cast<uint32_t*>(*ptr) = Frame.Timestamp.TimeS;
 8022248:	683b      	ldr	r3, [r7, #0]
 802224a:	681b      	ldr	r3, [r3, #0]
 802224c:	687a      	ldr	r2, [r7, #4]
 802224e:	6892      	ldr	r2, [r2, #8]
 8022250:	601a      	str	r2, [r3, #0]
		*ptr += sizeof(uint32_t);
 8022252:	683b      	ldr	r3, [r7, #0]
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	1d1a      	adds	r2, r3, #4
 8022258:	683b      	ldr	r3, [r7, #0]
 802225a:	601a      	str	r2, [r3, #0]

		*reinterpret_cast<uint32_t*>(*ptr) = Frame.Timestamp.TimeNS;
 802225c:	683b      	ldr	r3, [r7, #0]
 802225e:	681b      	ldr	r3, [r3, #0]
 8022260:	687a      	ldr	r2, [r7, #4]
 8022262:	68d2      	ldr	r2, [r2, #12]
 8022264:	601a      	str	r2, [r3, #0]
		*ptr += sizeof(uint32_t);
 8022266:	683b      	ldr	r3, [r7, #0]
 8022268:	681b      	ldr	r3, [r3, #0]
 802226a:	1d1a      	adds	r2, r3, #4
 802226c:	683b      	ldr	r3, [r7, #0]
 802226e:	601a      	str	r2, [r3, #0]

		*reinterpret_cast<uint8_t*>(*ptr) = Frame.SensorId;
 8022270:	683b      	ldr	r3, [r7, #0]
 8022272:	681b      	ldr	r3, [r3, #0]
 8022274:	687a      	ldr	r2, [r7, #4]
 8022276:	7c12      	ldrb	r2, [r2, #16]
 8022278:	701a      	strb	r2, [r3, #0]
		*ptr += sizeof(uint8_t);
 802227a:	683b      	ldr	r3, [r7, #0]
 802227c:	681b      	ldr	r3, [r3, #0]
 802227e:	1c5a      	adds	r2, r3, #1
 8022280:	683b      	ldr	r3, [r7, #0]
 8022282:	601a      	str	r2, [r3, #0]
	}
 8022284:	bf00      	nop
 8022286:	3708      	adds	r7, #8
 8022288:	46bd      	mov	sp, r7
 802228a:	bd80      	pop	{r7, pc}
 802228c:	0804139c 	.word	0x0804139c
 8022290:	08041948 	.word	0x08041948
 8022294:	080413d0 	.word	0x080413d0
 8022298:	080413ec 	.word	0x080413ec

0802229c <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>:

	std::queue<size_t> StrobeQueue;
	size_t CurrentSeq = 0;

public:
	void ProcessStrobe(const BHYWrapper &IMU) {
 802229c:	b580      	push	{r7, lr}
 802229e:	b086      	sub	sp, #24
 80222a0:	af00      	add	r7, sp, #0
 80222a2:	6078      	str	r0, [r7, #4]
 80222a4:	6039      	str	r1, [r7, #0]
		uint32_t currentTime = HAL_GetTick();
 80222a6:	f00c ff15 	bl	802f0d4 <HAL_GetTick>
 80222aa:	6178      	str	r0, [r7, #20]

		switch (State) {
 80222ac:	687b      	ldr	r3, [r7, #4]
 80222ae:	689b      	ldr	r3, [r3, #8]
 80222b0:	2b00      	cmp	r3, #0
 80222b2:	d04e      	beq.n	8022352 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xb6>
 80222b4:	2b01      	cmp	r3, #1
 80222b6:	d154      	bne.n	8022362 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		case PulseState::Down: {
			State = PulseState::Up;
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	2200      	movs	r2, #0
 80222bc:	609a      	str	r2, [r3, #8]

			uint32_t startTime = RiseTime;
 80222be:	687b      	ldr	r3, [r7, #4]
 80222c0:	685b      	ldr	r3, [r3, #4]
 80222c2:	613b      	str	r3, [r7, #16]
			RiseTime = currentTime;
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	697a      	ldr	r2, [r7, #20]
 80222c8:	605a      	str	r2, [r3, #4]

			if (!FallTime || !RiseTime)
 80222ca:	687b      	ldr	r3, [r7, #4]
 80222cc:	681b      	ldr	r3, [r3, #0]
 80222ce:	2b00      	cmp	r3, #0
 80222d0:	d046      	beq.n	8022360 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
 80222d2:	687b      	ldr	r3, [r7, #4]
 80222d4:	685b      	ldr	r3, [r3, #4]
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	d042      	beq.n	8022360 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
				return;

			uint32_t duration = currentTime - startTime;
 80222da:	697a      	ldr	r2, [r7, #20]
 80222dc:	693b      	ldr	r3, [r7, #16]
 80222de:	1ad3      	subs	r3, r2, r3
 80222e0:	60fb      	str	r3, [r7, #12]

			StrobeDuration += duration;
 80222e2:	687b      	ldr	r3, [r7, #4]
 80222e4:	ed93 7a05 	vldr	s14, [r3, #20]
 80222e8:	68fb      	ldr	r3, [r7, #12]
 80222ea:	ee07 3a90 	vmov	s15, r3
 80222ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80222f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80222f6:	687b      	ldr	r3, [r7, #4]
 80222f8:	edc3 7a05 	vstr	s15, [r3, #20]
			StrobeDuration /= 2;
 80222fc:	687b      	ldr	r3, [r7, #4]
 80222fe:	ed93 7a05 	vldr	s14, [r3, #20]
 8022302:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8022306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	edc3 7a05 	vstr	s15, [r3, #20]

			if (std::abs(long(duration - TargetDuration))
 8022310:	687b      	ldr	r3, [r7, #4]
 8022312:	691b      	ldr	r3, [r3, #16]
 8022314:	68fa      	ldr	r2, [r7, #12]
 8022316:	1ad3      	subs	r3, r2, r3
 8022318:	4618      	mov	r0, r3
 802231a:	f7fe fd5d 	bl	8020dd8 <_ZSt3absl>
 802231e:	4602      	mov	r2, r0
					< long(DurationThreshold))
 8022320:	687b      	ldr	r3, [r7, #4]
 8022322:	68db      	ldr	r3, [r3, #12]
 8022324:	429a      	cmp	r2, r3
 8022326:	bfb4      	ite	lt
 8022328:	2301      	movlt	r3, #1
 802232a:	2300      	movge	r3, #0
 802232c:	b2db      	uxtb	r3, r3
			if (std::abs(long(duration - TargetDuration))
 802232e:	2b00      	cmp	r3, #0
 8022330:	d008      	beq.n	8022344 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xa8>
				StrobeQueue.push(CurrentSeq);
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	f103 0218 	add.w	r2, r3, #24
 8022338:	687b      	ldr	r3, [r7, #4]
 802233a:	3340      	adds	r3, #64	; 0x40
 802233c:	4619      	mov	r1, r3
 802233e:	4610      	mov	r0, r2
 8022340:	f001 fab2 	bl	80238a8 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>

			CurrentSeq = IMU.GetSeq();
 8022344:	6838      	ldr	r0, [r7, #0]
 8022346:	f7fe fc07 	bl	8020b58 <_ZNK10BHYWrapper6GetSeqEv>
 802234a:	4602      	mov	r2, r0
 802234c:	687b      	ldr	r3, [r7, #4]
 802234e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8022350:	e007      	b.n	8022362 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		}
		case PulseState::Up:
			State = PulseState::Down;
 8022352:	687b      	ldr	r3, [r7, #4]
 8022354:	2201      	movs	r2, #1
 8022356:	609a      	str	r2, [r3, #8]
			FallTime = currentTime;
 8022358:	687b      	ldr	r3, [r7, #4]
 802235a:	697a      	ldr	r2, [r7, #20]
 802235c:	601a      	str	r2, [r3, #0]
			break;
 802235e:	e000      	b.n	8022362 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
				return;
 8022360:	bf00      	nop
		}
	}
 8022362:	3718      	adds	r7, #24
 8022364:	46bd      	mov	sp, r7
 8022366:	bd80      	pop	{r7, pc}

08022368 <_ZN20StrobeDurationFilter9ConfigureEhh>:

	void Configure(uint8_t targetDuration, uint8_t durationThreshold) {
 8022368:	b480      	push	{r7}
 802236a:	b083      	sub	sp, #12
 802236c:	af00      	add	r7, sp, #0
 802236e:	6078      	str	r0, [r7, #4]
 8022370:	460b      	mov	r3, r1
 8022372:	70fb      	strb	r3, [r7, #3]
 8022374:	4613      	mov	r3, r2
 8022376:	70bb      	strb	r3, [r7, #2]
		TargetDuration = targetDuration;
 8022378:	78fa      	ldrb	r2, [r7, #3]
 802237a:	687b      	ldr	r3, [r7, #4]
 802237c:	611a      	str	r2, [r3, #16]
		DurationThreshold = durationThreshold;
 802237e:	78ba      	ldrb	r2, [r7, #2]
 8022380:	687b      	ldr	r3, [r7, #4]
 8022382:	60da      	str	r2, [r3, #12]
	}
 8022384:	bf00      	nop
 8022386:	370c      	adds	r7, #12
 8022388:	46bd      	mov	sp, r7
 802238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802238e:	4770      	bx	lr

08022390 <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>:

	float GetStrobeDuration() const {
 8022390:	b480      	push	{r7}
 8022392:	b083      	sub	sp, #12
 8022394:	af00      	add	r7, sp, #0
 8022396:	6078      	str	r0, [r7, #4]
		return StrobeDuration;
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	695b      	ldr	r3, [r3, #20]
 802239c:	ee07 3a90 	vmov	s15, r3
	}
 80223a0:	eeb0 0a67 	vmov.f32	s0, s15
 80223a4:	370c      	adds	r7, #12
 80223a6:	46bd      	mov	sp, r7
 80223a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223ac:	4770      	bx	lr
	...

080223b0 <_ZNK20StrobeDurationFilter9GetStrobeEv>:

	void ResetStrobeDuration() {
		StrobeDuration = 1;
	}

	size_t GetStrobe() const {
 80223b0:	b580      	push	{r7, lr}
 80223b2:	b082      	sub	sp, #8
 80223b4:	af00      	add	r7, sp, #0
 80223b6:	6078      	str	r0, [r7, #4]
		assert(HasStrobe());
 80223b8:	6878      	ldr	r0, [r7, #4]
 80223ba:	f000 f81b 	bl	80223f4 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 80223be:	4603      	mov	r3, r0
 80223c0:	2b00      	cmp	r3, #0
 80223c2:	d106      	bne.n	80223d2 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x22>
 80223c4:	4b08      	ldr	r3, [pc, #32]	; (80223e8 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x38>)
 80223c6:	4a09      	ldr	r2, [pc, #36]	; (80223ec <_ZNK20StrobeDurationFilter9GetStrobeEv+0x3c>)
 80223c8:	f240 3141 	movw	r1, #833	; 0x341
 80223cc:	4808      	ldr	r0, [pc, #32]	; (80223f0 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x40>)
 80223ce:	f01d fefb 	bl	80401c8 <__assert_func>
		return StrobeQueue.front();
 80223d2:	687b      	ldr	r3, [r7, #4]
 80223d4:	3318      	adds	r3, #24
 80223d6:	4618      	mov	r0, r3
 80223d8:	f001 fa74 	bl	80238c4 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>
 80223dc:	4603      	mov	r3, r0
 80223de:	681b      	ldr	r3, [r3, #0]
	}
 80223e0:	4618      	mov	r0, r3
 80223e2:	3708      	adds	r7, #8
 80223e4:	46bd      	mov	sp, r7
 80223e6:	bd80      	pop	{r7, pc}
 80223e8:	08041970 	.word	0x08041970
 80223ec:	0804197c 	.word	0x0804197c
 80223f0:	080413d0 	.word	0x080413d0

080223f4 <_ZNK20StrobeDurationFilter9HasStrobeEv>:

	bool HasStrobe() const {
 80223f4:	b580      	push	{r7, lr}
 80223f6:	b082      	sub	sp, #8
 80223f8:	af00      	add	r7, sp, #0
 80223fa:	6078      	str	r0, [r7, #4]
		return !StrobeQueue.empty();
 80223fc:	687b      	ldr	r3, [r7, #4]
 80223fe:	3318      	adds	r3, #24
 8022400:	4618      	mov	r0, r3
 8022402:	f001 fa6c 	bl	80238de <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>
 8022406:	4603      	mov	r3, r0
 8022408:	f083 0301 	eor.w	r3, r3, #1
 802240c:	b2db      	uxtb	r3, r3
	}
 802240e:	4618      	mov	r0, r3
 8022410:	3708      	adds	r7, #8
 8022412:	46bd      	mov	sp, r7
 8022414:	bd80      	pop	{r7, pc}

08022416 <_ZN20StrobeDurationFilter9PopStrobeEv>:

	void PopStrobe() {
 8022416:	b580      	push	{r7, lr}
 8022418:	b082      	sub	sp, #8
 802241a:	af00      	add	r7, sp, #0
 802241c:	6078      	str	r0, [r7, #4]
		StrobeQueue.pop();
 802241e:	687b      	ldr	r3, [r7, #4]
 8022420:	3318      	adds	r3, #24
 8022422:	4618      	mov	r0, r3
 8022424:	f001 fa68 	bl	80238f8 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>
	}
 8022428:	bf00      	nop
 802242a:	3708      	adds	r7, #8
 802242c:	46bd      	mov	sp, r7
 802242e:	bd80      	pop	{r7, pc}

08022430 <_ZN15VersionProvider7Version11SerializeToEPPh>:
		static constexpr uint8_t Size = 2;

		uint8_t Major;
		uint8_t Minor;

		void SerializeTo(uint8_t **ptr) {
 8022430:	b580      	push	{r7, lr}
 8022432:	b082      	sub	sp, #8
 8022434:	af00      	add	r7, sp, #0
 8022436:	6078      	str	r0, [r7, #4]
 8022438:	6039      	str	r1, [r7, #0]
			assert(ptr);
 802243a:	683b      	ldr	r3, [r7, #0]
 802243c:	2b00      	cmp	r3, #0
 802243e:	d106      	bne.n	802244e <_ZN15VersionProvider7Version11SerializeToEPPh+0x1e>
 8022440:	4b14      	ldr	r3, [pc, #80]	; (8022494 <_ZN15VersionProvider7Version11SerializeToEPPh+0x64>)
 8022442:	4a15      	ldr	r2, [pc, #84]	; (8022498 <_ZN15VersionProvider7Version11SerializeToEPPh+0x68>)
 8022444:	f240 3157 	movw	r1, #855	; 0x357
 8022448:	4814      	ldr	r0, [pc, #80]	; (802249c <_ZN15VersionProvider7Version11SerializeToEPPh+0x6c>)
 802244a:	f01d febd 	bl	80401c8 <__assert_func>
			assert(*ptr);
 802244e:	683b      	ldr	r3, [r7, #0]
 8022450:	681b      	ldr	r3, [r3, #0]
 8022452:	2b00      	cmp	r3, #0
 8022454:	d106      	bne.n	8022464 <_ZN15VersionProvider7Version11SerializeToEPPh+0x34>
 8022456:	4b12      	ldr	r3, [pc, #72]	; (80224a0 <_ZN15VersionProvider7Version11SerializeToEPPh+0x70>)
 8022458:	4a0f      	ldr	r2, [pc, #60]	; (8022498 <_ZN15VersionProvider7Version11SerializeToEPPh+0x68>)
 802245a:	f44f 7156 	mov.w	r1, #856	; 0x358
 802245e:	480f      	ldr	r0, [pc, #60]	; (802249c <_ZN15VersionProvider7Version11SerializeToEPPh+0x6c>)
 8022460:	f01d feb2 	bl	80401c8 <__assert_func>

			**ptr = Major;
 8022464:	683b      	ldr	r3, [r7, #0]
 8022466:	681b      	ldr	r3, [r3, #0]
 8022468:	687a      	ldr	r2, [r7, #4]
 802246a:	7812      	ldrb	r2, [r2, #0]
 802246c:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 802246e:	683b      	ldr	r3, [r7, #0]
 8022470:	681b      	ldr	r3, [r3, #0]
 8022472:	1c5a      	adds	r2, r3, #1
 8022474:	683b      	ldr	r3, [r7, #0]
 8022476:	601a      	str	r2, [r3, #0]

			**ptr = Minor;
 8022478:	683b      	ldr	r3, [r7, #0]
 802247a:	681b      	ldr	r3, [r3, #0]
 802247c:	687a      	ldr	r2, [r7, #4]
 802247e:	7852      	ldrb	r2, [r2, #1]
 8022480:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022482:	683b      	ldr	r3, [r7, #0]
 8022484:	681b      	ldr	r3, [r3, #0]
 8022486:	1c5a      	adds	r2, r3, #1
 8022488:	683b      	ldr	r3, [r7, #0]
 802248a:	601a      	str	r2, [r3, #0]
		}
 802248c:	bf00      	nop
 802248e:	3708      	adds	r7, #8
 8022490:	46bd      	mov	sp, r7
 8022492:	bd80      	pop	{r7, pc}
 8022494:	0804139c 	.word	0x0804139c
 8022498:	080419ac 	.word	0x080419ac
 802249c:	080413d0 	.word	0x080413d0
 80224a0:	080413ec 	.word	0x080413ec

080224a4 <_ZN15VersionProviderC1Ehh>:

private:
	Version CurrentVersion;

public:
	VersionProvider(uint8_t versionMaj, uint8_t versionMin) {
 80224a4:	b480      	push	{r7}
 80224a6:	b083      	sub	sp, #12
 80224a8:	af00      	add	r7, sp, #0
 80224aa:	6078      	str	r0, [r7, #4]
 80224ac:	460b      	mov	r3, r1
 80224ae:	70fb      	strb	r3, [r7, #3]
 80224b0:	4613      	mov	r3, r2
 80224b2:	70bb      	strb	r3, [r7, #2]
		CurrentVersion.Major = versionMaj;
 80224b4:	687b      	ldr	r3, [r7, #4]
 80224b6:	78fa      	ldrb	r2, [r7, #3]
 80224b8:	701a      	strb	r2, [r3, #0]
		CurrentVersion.Minor = versionMin;
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	78ba      	ldrb	r2, [r7, #2]
 80224be:	705a      	strb	r2, [r3, #1]
	}
 80224c0:	687b      	ldr	r3, [r7, #4]
 80224c2:	4618      	mov	r0, r3
 80224c4:	370c      	adds	r7, #12
 80224c6:	46bd      	mov	sp, r7
 80224c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224cc:	4770      	bx	lr

080224ce <_ZNK15VersionProvider10GetVersionEv>:

	Version GetVersion() const {
 80224ce:	b480      	push	{r7}
 80224d0:	b085      	sub	sp, #20
 80224d2:	af00      	add	r7, sp, #0
 80224d4:	6078      	str	r0, [r7, #4]
		return CurrentVersion;
 80224d6:	687a      	ldr	r2, [r7, #4]
 80224d8:	f107 030c 	add.w	r3, r7, #12
 80224dc:	8812      	ldrh	r2, [r2, #0]
 80224de:	801a      	strh	r2, [r3, #0]
 80224e0:	2300      	movs	r3, #0
 80224e2:	7b3a      	ldrb	r2, [r7, #12]
 80224e4:	f362 0307 	bfi	r3, r2, #0, #8
 80224e8:	7b7a      	ldrb	r2, [r7, #13]
 80224ea:	f362 230f 	bfi	r3, r2, #8, #8
	}
 80224ee:	4618      	mov	r0, r3
 80224f0:	3714      	adds	r7, #20
 80224f2:	46bd      	mov	sp, r7
 80224f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224f8:	4770      	bx	lr

080224fa <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>:
	std::deque<BHYWrapper::BHYFrame> Queue;
	size_t MaxSize = 800 / 5;
	size_t FirstSeq = 0;

public:
	void Add(const BHYWrapper::BHYFrame &frame, size_t seq) {
 80224fa:	b580      	push	{r7, lr}
 80224fc:	b084      	sub	sp, #16
 80224fe:	af00      	add	r7, sp, #0
 8022500:	60f8      	str	r0, [r7, #12]
 8022502:	60b9      	str	r1, [r7, #8]
 8022504:	607a      	str	r2, [r7, #4]
		if (Queue.empty()) {
 8022506:	68fb      	ldr	r3, [r7, #12]
 8022508:	4618      	mov	r0, r3
 802250a:	f001 fa01 	bl	8023910 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 802250e:	4603      	mov	r3, r0
 8022510:	2b00      	cmp	r3, #0
 8022512:	d002      	beq.n	802251a <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x20>
			FirstSeq = seq;
 8022514:	68fb      	ldr	r3, [r7, #12]
 8022516:	687a      	ldr	r2, [r7, #4]
 8022518:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		Queue.push_front(frame);
 802251a:	68fb      	ldr	r3, [r7, #12]
 802251c:	68b9      	ldr	r1, [r7, #8]
 802251e:	4618      	mov	r0, r3
 8022520:	f001 fa08 	bl	8023934 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>

		if (Queue.size() > MaxSize) {
 8022524:	68fb      	ldr	r3, [r7, #12]
 8022526:	4618      	mov	r0, r3
 8022528:	f001 fa26 	bl	8023978 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 802252c:	4602      	mov	r2, r0
 802252e:	68fb      	ldr	r3, [r7, #12]
 8022530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022532:	429a      	cmp	r2, r3
 8022534:	bf8c      	ite	hi
 8022536:	2301      	movhi	r3, #1
 8022538:	2300      	movls	r3, #0
 802253a:	b2db      	uxtb	r3, r3
 802253c:	2b00      	cmp	r3, #0
 802253e:	d008      	beq.n	8022552 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x58>
			Queue.pop_back();
 8022540:	68fb      	ldr	r3, [r7, #12]
 8022542:	4618      	mov	r0, r3
 8022544:	f001 fa2a 	bl	802399c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
			FirstSeq++;
 8022548:	68fb      	ldr	r3, [r7, #12]
 802254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802254c:	1c5a      	adds	r2, r3, #1
 802254e:	68fb      	ldr	r3, [r7, #12]
 8022550:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
 8022552:	bf00      	nop
 8022554:	3710      	adds	r7, #16
 8022556:	46bd      	mov	sp, r7
 8022558:	bd80      	pop	{r7, pc}

0802255a <_ZNK12IMUFrameMemo3HasEj>:

	bool Has(size_t seq) const {
 802255a:	b590      	push	{r4, r7, lr}
 802255c:	b083      	sub	sp, #12
 802255e:	af00      	add	r7, sp, #0
 8022560:	6078      	str	r0, [r7, #4]
 8022562:	6039      	str	r1, [r7, #0]
		if (Queue.empty())
 8022564:	687b      	ldr	r3, [r7, #4]
 8022566:	4618      	mov	r0, r3
 8022568:	f001 f9d2 	bl	8023910 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 802256c:	4603      	mov	r3, r0
 802256e:	2b00      	cmp	r3, #0
 8022570:	d001      	beq.n	8022576 <_ZNK12IMUFrameMemo3HasEj+0x1c>
			return false;
 8022572:	2300      	movs	r3, #0
 8022574:	e012      	b.n	802259c <_ZNK12IMUFrameMemo3HasEj+0x42>

		if (seq < FirstSeq + Queue.size())
 8022576:	687b      	ldr	r3, [r7, #4]
 8022578:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	4618      	mov	r0, r3
 802257e:	f001 f9fb 	bl	8023978 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022582:	4603      	mov	r3, r0
 8022584:	4423      	add	r3, r4
 8022586:	683a      	ldr	r2, [r7, #0]
 8022588:	429a      	cmp	r2, r3
 802258a:	bf34      	ite	cc
 802258c:	2301      	movcc	r3, #1
 802258e:	2300      	movcs	r3, #0
 8022590:	b2db      	uxtb	r3, r3
 8022592:	2b00      	cmp	r3, #0
 8022594:	d001      	beq.n	802259a <_ZNK12IMUFrameMemo3HasEj+0x40>
			return true;
 8022596:	2301      	movs	r3, #1
 8022598:	e000      	b.n	802259c <_ZNK12IMUFrameMemo3HasEj+0x42>

		return false;
 802259a:	2300      	movs	r3, #0
	}
 802259c:	4618      	mov	r0, r3
 802259e:	370c      	adds	r7, #12
 80225a0:	46bd      	mov	sp, r7
 80225a2:	bd90      	pop	{r4, r7, pc}

080225a4 <_ZNK12IMUFrameMemo3GetEj>:

	BHYWrapper::BHYFrame Get(size_t seq) const {
 80225a4:	b5b0      	push	{r4, r5, r7, lr}
 80225a6:	b084      	sub	sp, #16
 80225a8:	af00      	add	r7, sp, #0
 80225aa:	60f8      	str	r0, [r7, #12]
 80225ac:	60b9      	str	r1, [r7, #8]
 80225ae:	607a      	str	r2, [r7, #4]
		assert(Has(seq));
 80225b0:	6879      	ldr	r1, [r7, #4]
 80225b2:	68b8      	ldr	r0, [r7, #8]
 80225b4:	f7ff ffd1 	bl	802255a <_ZNK12IMUFrameMemo3HasEj>
 80225b8:	4603      	mov	r3, r0
 80225ba:	2b00      	cmp	r3, #0
 80225bc:	d106      	bne.n	80225cc <_ZNK12IMUFrameMemo3GetEj+0x28>
 80225be:	4b1a      	ldr	r3, [pc, #104]	; (8022628 <_ZNK12IMUFrameMemo3GetEj+0x84>)
 80225c0:	4a1a      	ldr	r2, [pc, #104]	; (802262c <_ZNK12IMUFrameMemo3GetEj+0x88>)
 80225c2:	f240 318e 	movw	r1, #910	; 0x38e
 80225c6:	481a      	ldr	r0, [pc, #104]	; (8022630 <_ZNK12IMUFrameMemo3GetEj+0x8c>)
 80225c8:	f01d fdfe 	bl	80401c8 <__assert_func>

		if (seq < FirstSeq) {
 80225cc:	68bb      	ldr	r3, [r7, #8]
 80225ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80225d0:	687a      	ldr	r2, [r7, #4]
 80225d2:	429a      	cmp	r2, r3
 80225d4:	d20c      	bcs.n	80225f0 <_ZNK12IMUFrameMemo3GetEj+0x4c>
			return Queue.front();
 80225d6:	68bb      	ldr	r3, [r7, #8]
 80225d8:	4618      	mov	r0, r3
 80225da:	f001 fa02 	bl	80239e2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>
 80225de:	4602      	mov	r2, r0
 80225e0:	68fb      	ldr	r3, [r7, #12]
 80225e2:	461c      	mov	r4, r3
 80225e4:	4615      	mov	r5, r2
 80225e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80225e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80225ea:	682b      	ldr	r3, [r5, #0]
 80225ec:	6023      	str	r3, [r4, #0]
 80225ee:	e017      	b.n	8022620 <_ZNK12IMUFrameMemo3GetEj+0x7c>
		}

		return Queue[(Queue.size() - 1) - (seq - FirstSeq)];
 80225f0:	68bc      	ldr	r4, [r7, #8]
 80225f2:	68bb      	ldr	r3, [r7, #8]
 80225f4:	4618      	mov	r0, r3
 80225f6:	f001 f9bf 	bl	8023978 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80225fa:	4601      	mov	r1, r0
 80225fc:	68bb      	ldr	r3, [r7, #8]
 80225fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022600:	687b      	ldr	r3, [r7, #4]
 8022602:	1ad3      	subs	r3, r2, r3
 8022604:	440b      	add	r3, r1
 8022606:	3b01      	subs	r3, #1
 8022608:	4619      	mov	r1, r3
 802260a:	4620      	mov	r0, r4
 802260c:	f001 f9fd 	bl	8023a0a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8022610:	4602      	mov	r2, r0
 8022612:	68fb      	ldr	r3, [r7, #12]
 8022614:	461c      	mov	r4, r3
 8022616:	4615      	mov	r5, r2
 8022618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802261a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802261c:	682b      	ldr	r3, [r5, #0]
 802261e:	6023      	str	r3, [r4, #0]
	}
 8022620:	68f8      	ldr	r0, [r7, #12]
 8022622:	3710      	adds	r7, #16
 8022624:	46bd      	mov	sp, r7
 8022626:	bdb0      	pop	{r4, r5, r7, pc}
 8022628:	080419e4 	.word	0x080419e4
 802262c:	080419f0 	.word	0x080419f0
 8022630:	080413d0 	.word	0x080413d0

08022634 <_ZN14FrameContainerI8IMUFrameED1Ev>:
class FrameContainer {
 8022634:	b580      	push	{r7, lr}
 8022636:	b082      	sub	sp, #8
 8022638:	af00      	add	r7, sp, #0
 802263a:	6078      	str	r0, [r7, #4]
 802263c:	687b      	ldr	r3, [r7, #4]
 802263e:	4618      	mov	r0, r3
 8022640:	f001 fa38 	bl	8023ab4 <_ZNSt5dequeI8IMUFrameSaIS0_EED1Ev>
 8022644:	687b      	ldr	r3, [r7, #4]
 8022646:	4618      	mov	r0, r3
 8022648:	3708      	adds	r7, #8
 802264a:	46bd      	mov	sp, r7
 802264c:	bd80      	pop	{r7, pc}

0802264e <_ZN14FrameContainerI14ServoDataFrameED1Ev>:
 802264e:	b580      	push	{r7, lr}
 8022650:	b082      	sub	sp, #8
 8022652:	af00      	add	r7, sp, #0
 8022654:	6078      	str	r0, [r7, #4]
 8022656:	687b      	ldr	r3, [r7, #4]
 8022658:	4618      	mov	r0, r3
 802265a:	f001 fa50 	bl	8023afe <_ZNSt5dequeI14ServoDataFrameSaIS0_EED1Ev>
 802265e:	687b      	ldr	r3, [r7, #4]
 8022660:	4618      	mov	r0, r3
 8022662:	3708      	adds	r7, #8
 8022664:	46bd      	mov	sp, r7
 8022666:	bd80      	pop	{r7, pc}

08022668 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8022668:	b580      	push	{r7, lr}
 802266a:	b082      	sub	sp, #8
 802266c:	af00      	add	r7, sp, #0
 802266e:	6078      	str	r0, [r7, #4]
 8022670:	687b      	ldr	r3, [r7, #4]
 8022672:	4618      	mov	r0, r3
 8022674:	f001 fa74 	bl	8023b60 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022678:	687b      	ldr	r3, [r7, #4]
 802267a:	4618      	mov	r0, r3
 802267c:	3708      	adds	r7, #8
 802267e:	46bd      	mov	sp, r7
 8022680:	bd80      	pop	{r7, pc}

08022682 <_ZN12IMUFrameMemoC1Ev>:
class IMUFrameMemo {
 8022682:	b580      	push	{r7, lr}
 8022684:	b082      	sub	sp, #8
 8022686:	af00      	add	r7, sp, #0
 8022688:	6078      	str	r0, [r7, #4]
 802268a:	687b      	ldr	r3, [r7, #4]
 802268c:	4618      	mov	r0, r3
 802268e:	f7ff ffeb 	bl	8022668 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022692:	687b      	ldr	r3, [r7, #4]
 8022694:	22a0      	movs	r2, #160	; 0xa0
 8022696:	629a      	str	r2, [r3, #40]	; 0x28
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	2200      	movs	r2, #0
 802269c:	62da      	str	r2, [r3, #44]	; 0x2c
 802269e:	687b      	ldr	r3, [r7, #4]
 80226a0:	4618      	mov	r0, r3
 80226a2:	3708      	adds	r7, #8
 80226a4:	46bd      	mov	sp, r7
 80226a6:	bd80      	pop	{r7, pc}

080226a8 <_ZN12IMUFrameMemoD1Ev>:
 80226a8:	b580      	push	{r7, lr}
 80226aa:	b082      	sub	sp, #8
 80226ac:	af00      	add	r7, sp, #0
 80226ae:	6078      	str	r0, [r7, #4]
 80226b0:	687b      	ldr	r3, [r7, #4]
 80226b2:	4618      	mov	r0, r3
 80226b4:	f001 fa87 	bl	8023bc6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 80226b8:	687b      	ldr	r3, [r7, #4]
 80226ba:	4618      	mov	r0, r3
 80226bc:	3708      	adds	r7, #8
 80226be:	46bd      	mov	sp, r7
 80226c0:	bd80      	pop	{r7, pc}

080226c2 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 80226c2:	b580      	push	{r7, lr}
 80226c4:	b082      	sub	sp, #8
 80226c6:	af00      	add	r7, sp, #0
 80226c8:	6078      	str	r0, [r7, #4]
 80226ca:	687b      	ldr	r3, [r7, #4]
 80226cc:	4618      	mov	r0, r3
 80226ce:	f001 fac0 	bl	8023c52 <_ZNSt5dequeIjSaIjEED1Ev>
 80226d2:	687b      	ldr	r3, [r7, #4]
 80226d4:	4618      	mov	r0, r3
 80226d6:	3708      	adds	r7, #8
 80226d8:	46bd      	mov	sp, r7
 80226da:	bd80      	pop	{r7, pc}

080226dc <_ZN20StrobeDurationFilterC1Ev>:
class StrobeDurationFilter {
 80226dc:	b580      	push	{r7, lr}
 80226de:	b082      	sub	sp, #8
 80226e0:	af00      	add	r7, sp, #0
 80226e2:	6078      	str	r0, [r7, #4]
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	2200      	movs	r2, #0
 80226e8:	601a      	str	r2, [r3, #0]
 80226ea:	687b      	ldr	r3, [r7, #4]
 80226ec:	2200      	movs	r2, #0
 80226ee:	605a      	str	r2, [r3, #4]
 80226f0:	687b      	ldr	r3, [r7, #4]
 80226f2:	2201      	movs	r2, #1
 80226f4:	609a      	str	r2, [r3, #8]
 80226f6:	687b      	ldr	r3, [r7, #4]
 80226f8:	2200      	movs	r2, #0
 80226fa:	60da      	str	r2, [r3, #12]
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	2200      	movs	r2, #0
 8022700:	611a      	str	r2, [r3, #16]
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8022708:	615a      	str	r2, [r3, #20]
 802270a:	687b      	ldr	r3, [r7, #4]
 802270c:	3318      	adds	r3, #24
 802270e:	4618      	mov	r0, r3
 8022710:	f001 fa8b 	bl	8023c2a <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 8022714:	687b      	ldr	r3, [r7, #4]
 8022716:	2200      	movs	r2, #0
 8022718:	641a      	str	r2, [r3, #64]	; 0x40
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	4618      	mov	r0, r3
 802271e:	3708      	adds	r7, #8
 8022720:	46bd      	mov	sp, r7
 8022722:	bd80      	pop	{r7, pc}

08022724 <_ZN20StrobeDurationFilterD1Ev>:
 8022724:	b580      	push	{r7, lr}
 8022726:	b082      	sub	sp, #8
 8022728:	af00      	add	r7, sp, #0
 802272a:	6078      	str	r0, [r7, #4]
 802272c:	687b      	ldr	r3, [r7, #4]
 802272e:	3318      	adds	r3, #24
 8022730:	4618      	mov	r0, r3
 8022732:	f7ff ffc6 	bl	80226c2 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	4618      	mov	r0, r3
 802273a:	3708      	adds	r7, #8
 802273c:	46bd      	mov	sp, r7
 802273e:	bd80      	pop	{r7, pc}

08022740 <_ZN18MotherboardContextC1E17MotherboardConfig>:
	std::queue<size_t> IMUStrobes;
	std::queue<size_t> BodyStrobes;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 8022740:	b084      	sub	sp, #16
 8022742:	b580      	push	{r7, lr}
 8022744:	b082      	sub	sp, #8
 8022746:	af00      	add	r7, sp, #0
 8022748:	6078      	str	r0, [r7, #4]
 802274a:	f107 0014 	add.w	r0, r7, #20
 802274e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
					conf.BodyUart, conf.BodyTimeout, conf.BodyPeriod }, IMUFrameContainer {
					conf.FrameContainerCapacity }, BodyFrameContainer {
					conf.FrameContainerCapacity }, IMU { conf.IMUSpi }, Version {
					conf.VersionMajor, conf.VersionMinor }, IMUStrobeOffset {
					conf.IMUStrobeOffset }, BodyStrobeOffset {
					conf.BodyStrobeOffset } {
 8022752:	687b      	ldr	r3, [r7, #4]
 8022754:	6979      	ldr	r1, [r7, #20]
 8022756:	69fa      	ldr	r2, [r7, #28]
 8022758:	4618      	mov	r0, r3
 802275a:	f7ff fac5 	bl	8021ce8 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 802275e:	687b      	ldr	r3, [r7, #4]
 8022760:	f603 40a4 	addw	r0, r3, #3236	; 0xca4
 8022764:	6a39      	ldr	r1, [r7, #32]
 8022766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022768:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802276c:	f7fe fbdc 	bl	8020f28 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>
 8022770:	687a      	ldr	r2, [r7, #4]
 8022772:	4b29      	ldr	r3, [pc, #164]	; (8022818 <_ZN18MotherboardContextC1E17MotherboardConfig+0xd8>)
 8022774:	4413      	add	r3, r2
 8022776:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8022778:	4611      	mov	r1, r2
 802277a:	4618      	mov	r0, r3
 802277c:	f001 f963 	bl	8023a46 <_ZN14FrameContainerI8IMUFrameEC1Et>
 8022780:	687a      	ldr	r2, [r7, #4]
 8022782:	4b26      	ldr	r3, [pc, #152]	; (802281c <_ZN18MotherboardContextC1E17MotherboardConfig+0xdc>)
 8022784:	4413      	add	r3, r2
 8022786:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8022788:	4611      	mov	r1, r2
 802278a:	4618      	mov	r0, r3
 802278c:	f001 f97d 	bl	8023a8a <_ZN14FrameContainerI14ServoDataFrameEC1Et>
 8022790:	687a      	ldr	r2, [r7, #4]
 8022792:	4b23      	ldr	r3, [pc, #140]	; (8022820 <_ZN18MotherboardContextC1E17MotherboardConfig+0xe0>)
 8022794:	4413      	add	r3, r2
 8022796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022798:	4611      	mov	r1, r2
 802279a:	4618      	mov	r0, r3
 802279c:	f7fd ff72 	bl	8020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 80227a0:	687a      	ldr	r2, [r7, #4]
 80227a2:	4b20      	ldr	r3, [pc, #128]	; (8022824 <_ZN18MotherboardContextC1E17MotherboardConfig+0xe4>)
 80227a4:	4413      	add	r3, r2
 80227a6:	f897 103a 	ldrb.w	r1, [r7, #58]	; 0x3a
 80227aa:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80227ae:	4618      	mov	r0, r3
 80227b0:	f7ff fe78 	bl	80224a4 <_ZN15VersionProviderC1Ehh>
 80227b4:	687a      	ldr	r2, [r7, #4]
 80227b6:	4b1c      	ldr	r3, [pc, #112]	; (8022828 <_ZN18MotherboardContextC1E17MotherboardConfig+0xe8>)
 80227b8:	4413      	add	r3, r2
 80227ba:	4618      	mov	r0, r3
 80227bc:	f7ff ff61 	bl	8022682 <_ZN12IMUFrameMemoC1Ev>
 80227c0:	687a      	ldr	r2, [r7, #4]
 80227c2:	4b1a      	ldr	r3, [pc, #104]	; (802282c <_ZN18MotherboardContextC1E17MotherboardConfig+0xec>)
 80227c4:	4413      	add	r3, r2
 80227c6:	4618      	mov	r0, r3
 80227c8:	f7ff ff88 	bl	80226dc <_ZN20StrobeDurationFilterC1Ev>
					conf.IMUStrobeOffset }, BodyStrobeOffset {
 80227cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
					conf.BodyStrobeOffset } {
 80227ce:	687a      	ldr	r2, [r7, #4]
 80227d0:	f502 320c 	add.w	r2, r2, #143360	; 0x23000
 80227d4:	f8c2 36c0 	str.w	r3, [r2, #1728]	; 0x6c0
 80227d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80227da:	687a      	ldr	r2, [r7, #4]
 80227dc:	f502 320c 	add.w	r2, r2, #143360	; 0x23000
 80227e0:	f8c2 36c4 	str.w	r3, [r2, #1732]	; 0x6c4
 80227e4:	687a      	ldr	r2, [r7, #4]
 80227e6:	4b12      	ldr	r3, [pc, #72]	; (8022830 <_ZN18MotherboardContextC1E17MotherboardConfig+0xf0>)
 80227e8:	4413      	add	r3, r2
 80227ea:	4618      	mov	r0, r3
 80227ec:	f001 fa1d 	bl	8023c2a <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 80227f0:	687a      	ldr	r2, [r7, #4]
 80227f2:	4b10      	ldr	r3, [pc, #64]	; (8022834 <_ZN18MotherboardContextC1E17MotherboardConfig+0xf4>)
 80227f4:	4413      	add	r3, r2
 80227f6:	4618      	mov	r0, r3
 80227f8:	f001 fa17 	bl	8023c2a <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 80227fc:	687b      	ldr	r3, [r7, #4]
 80227fe:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8022802:	2200      	movs	r2, #0
 8022804:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
	}
 8022808:	687b      	ldr	r3, [r7, #4]
 802280a:	4618      	mov	r0, r3
 802280c:	3708      	adds	r7, #8
 802280e:	46bd      	mov	sp, r7
 8022810:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022814:	b004      	add	sp, #16
 8022816:	4770      	bx	lr
 8022818:	00022498 	.word	0x00022498
 802281c:	000224c4 	.word	0x000224c4
 8022820:	000224f0 	.word	0x000224f0
 8022824:	00023648 	.word	0x00023648
 8022828:	0002364c 	.word	0x0002364c
 802282c:	0002367c 	.word	0x0002367c
 8022830:	000236c8 	.word	0x000236c8
 8022834:	000236f0 	.word	0x000236f0

08022838 <_ZN25MotherboardRequestHandler11RequestMode11DeserializeEh>:
		static constexpr Type GetVersion = 10;

		static uint8_t Serialize(Type mode) {
			return mode;
		}
		static Type Deserialize(uint8_t meta) {
 8022838:	b480      	push	{r7}
 802283a:	b083      	sub	sp, #12
 802283c:	af00      	add	r7, sp, #0
 802283e:	4603      	mov	r3, r0
 8022840:	71fb      	strb	r3, [r7, #7]
			return meta;
 8022842:	79fb      	ldrb	r3, [r7, #7]
		}
 8022844:	4618      	mov	r0, r3
 8022846:	370c      	adds	r7, #12
 8022848:	46bd      	mov	sp, r7
 802284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802284e:	4770      	bx	lr

08022850 <_ZN25MotherboardRequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:
		responce.Error = ErrorCodes::Success;

		return responce;
	}

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 8022850:	b580      	push	{r7, lr}
 8022852:	b090      	sub	sp, #64	; 0x40
 8022854:	af00      	add	r7, sp, #0
 8022856:	60f8      	str	r0, [r7, #12]
 8022858:	60b9      	str	r1, [r7, #8]
 802285a:	607a      	str	r2, [r7, #4]
 802285c:	603b      	str	r3, [r7, #0]
		Responce responce;
		responce.ResponceSize = IMUFrame::Size;
 802285e:	68fb      	ldr	r3, [r7, #12]
 8022860:	2211      	movs	r2, #17
 8022862:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022866:	687b      	ldr	r3, [r7, #4]
 8022868:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802286c:	2b01      	cmp	r3, #1
 802286e:	d004      	beq.n	802287a <_ZN25MotherboardRequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2a>
			responce.Error = ErrorCodes::BadRequest;
 8022870:	68fb      	ldr	r3, [r7, #12]
 8022872:	2203      	movs	r2, #3
 8022874:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			return responce;
 8022878:	e01f      	b.n	80228ba <_ZN25MotherboardRequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x6a>
		}

		IMUFrame frame { IMU.GetFrame() };
 802287a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802287e:	6839      	ldr	r1, [r7, #0]
 8022880:	4618      	mov	r0, r3
 8022882:	f7fe f8bf 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>
 8022886:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 802288a:	f107 0314 	add.w	r3, r7, #20
 802288e:	4611      	mov	r1, r2
 8022890:	4618      	mov	r0, r3
 8022892:	f7ff fc7d 	bl	8022190 <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameE>

		uint8_t *ptr = responce.Data.data();
 8022896:	68f8      	ldr	r0, [r7, #12]
 8022898:	f000 fe6c 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 802289c:	4603      	mov	r3, r0
 802289e:	613b      	str	r3, [r7, #16]
		frame.SerializeTo(&ptr);
 80228a0:	f107 0210 	add.w	r2, r7, #16
 80228a4:	f107 0314 	add.w	r3, r7, #20
 80228a8:	4611      	mov	r1, r2
 80228aa:	4618      	mov	r0, r3
 80228ac:	f7ff fc86 	bl	80221bc <_ZN8IMUFrame11SerializeToEPPh>

		responce.Error = ErrorCodes::Success;
 80228b0:	68fb      	ldr	r3, [r7, #12]
 80228b2:	2200      	movs	r2, #0
 80228b4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

		return responce;
 80228b8:	bf00      	nop
	}
 80228ba:	68f8      	ldr	r0, [r7, #12]
 80228bc:	3740      	adds	r7, #64	; 0x40
 80228be:	46bd      	mov	sp, r7
 80228c0:	bd80      	pop	{r7, pc}

080228c2 <_ZN25MotherboardRequestHandler7DoResetERK7RequestR14FrameContainerI8IMUFrameERS3_I14ServoDataFrameE>:

	Responce DoReset(const Request &request, FrameContainer<IMUFrame> &imuCont,
 80228c2:	b580      	push	{r7, lr}
 80228c4:	b084      	sub	sp, #16
 80228c6:	af00      	add	r7, sp, #0
 80228c8:	60f8      	str	r0, [r7, #12]
 80228ca:	60b9      	str	r1, [r7, #8]
 80228cc:	607a      	str	r2, [r7, #4]
 80228ce:	603b      	str	r3, [r7, #0]
			FrameContainer<ServoDataFrame> &bodyCont) {
		Responce responce;
		responce.ResponceSize = 1;
 80228d0:	68fb      	ldr	r3, [r7, #12]
 80228d2:	2201      	movs	r2, #1
 80228d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80228de:	2b01      	cmp	r3, #1
 80228e0:	d004      	beq.n	80228ec <_ZN25MotherboardRequestHandler7DoResetERK7RequestR14FrameContainerI8IMUFrameERS3_I14ServoDataFrameE+0x2a>
			responce.Error = ErrorCodes::BadRequest;
 80228e2:	68fb      	ldr	r3, [r7, #12]
 80228e4:	2203      	movs	r2, #3
 80228e6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			return responce;
 80228ea:	e00a      	b.n	8022902 <_ZN25MotherboardRequestHandler7DoResetERK7RequestR14FrameContainerI8IMUFrameERS3_I14ServoDataFrameE+0x40>
		}

		imuCont.Reset();
 80228ec:	6838      	ldr	r0, [r7, #0]
 80228ee:	f001 f9d5 	bl	8023c9c <_ZN14FrameContainerI8IMUFrameE5ResetEv>
		bodyCont.Reset();
 80228f2:	69b8      	ldr	r0, [r7, #24]
 80228f4:	f001 f9e8 	bl	8023cc8 <_ZN14FrameContainerI14ServoDataFrameE5ResetEv>

		responce.Error = ErrorCodes::Success;
 80228f8:	68fb      	ldr	r3, [r7, #12]
 80228fa:	2200      	movs	r2, #0
 80228fc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

		return responce;
 8022900:	bf00      	nop
	}
 8022902:	68f8      	ldr	r0, [r7, #12]
 8022904:	3710      	adds	r7, #16
 8022906:	46bd      	mov	sp, r7
 8022908:	bd80      	pop	{r7, pc}

0802290a <_ZN25MotherboardRequestHandler9SetOffsetERK7RequestRj>:

	Responce SetOffset(const Request &request, size_t &strobeOffset) {
 802290a:	b580      	push	{r7, lr}
 802290c:	b086      	sub	sp, #24
 802290e:	af00      	add	r7, sp, #0
 8022910:	60f8      	str	r0, [r7, #12]
 8022912:	60b9      	str	r1, [r7, #8]
 8022914:	607a      	str	r2, [r7, #4]
 8022916:	603b      	str	r3, [r7, #0]
		Responce responce;
		responce.ResponceSize = 1;
 8022918:	68fb      	ldr	r3, [r7, #12]
 802291a:	2201      	movs	r2, #1
 802291c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022926:	2b01      	cmp	r3, #1
 8022928:	d004      	beq.n	8022934 <_ZN25MotherboardRequestHandler9SetOffsetERK7RequestRj+0x2a>
			responce.Error = ErrorCodes::BadRequest;
 802292a:	68fb      	ldr	r3, [r7, #12]
 802292c:	2203      	movs	r2, #3
 802292e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			return responce;
 8022932:	e00f      	b.n	8022954 <_ZN25MotherboardRequestHandler9SetOffsetERK7RequestRj+0x4a>
		}

		uint8_t newOffset = request.Data[0];
 8022934:	687b      	ldr	r3, [r7, #4]
 8022936:	2100      	movs	r1, #0
 8022938:	4618      	mov	r0, r3
 802293a:	f7ff f893 	bl	8021a64 <_ZNKSt5arrayIhLj256EEixEj>
 802293e:	4603      	mov	r3, r0
 8022940:	781b      	ldrb	r3, [r3, #0]
 8022942:	75fb      	strb	r3, [r7, #23]

		strobeOffset = newOffset;
 8022944:	7dfa      	ldrb	r2, [r7, #23]
 8022946:	683b      	ldr	r3, [r7, #0]
 8022948:	601a      	str	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 802294a:	68fb      	ldr	r3, [r7, #12]
 802294c:	2200      	movs	r2, #0
 802294e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

		return responce;
 8022952:	bf00      	nop
	}
 8022954:	68f8      	ldr	r0, [r7, #12]
 8022956:	3718      	adds	r7, #24
 8022958:	46bd      	mov	sp, r7
 802295a:	bd80      	pop	{r7, pc}

0802295c <_ZN25MotherboardRequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>:

	Responce ConfigureFilter(const Request &request,
 802295c:	b580      	push	{r7, lr}
 802295e:	b086      	sub	sp, #24
 8022960:	af00      	add	r7, sp, #0
 8022962:	60f8      	str	r0, [r7, #12]
 8022964:	60b9      	str	r1, [r7, #8]
 8022966:	607a      	str	r2, [r7, #4]
 8022968:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		Responce responce;
		responce.ResponceSize = 1;
 802296a:	68fb      	ldr	r3, [r7, #12]
 802296c:	2201      	movs	r2, #1
 802296e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 2) {
 8022972:	687b      	ldr	r3, [r7, #4]
 8022974:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022978:	2b02      	cmp	r3, #2
 802297a:	d004      	beq.n	8022986 <_ZN25MotherboardRequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x2a>
			responce.Error = ErrorCodes::BadRequest;
 802297c:	68fb      	ldr	r3, [r7, #12]
 802297e:	2203      	movs	r2, #3
 8022980:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			return responce;
 8022984:	e01a      	b.n	80229bc <_ZN25MotherboardRequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x60>
		}

		uint8_t targetDuration = request.Data[0];
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	2100      	movs	r1, #0
 802298a:	4618      	mov	r0, r3
 802298c:	f7ff f86a 	bl	8021a64 <_ZNKSt5arrayIhLj256EEixEj>
 8022990:	4603      	mov	r3, r0
 8022992:	781b      	ldrb	r3, [r3, #0]
 8022994:	75fb      	strb	r3, [r7, #23]
		uint8_t durationThreshold = request.Data[1];
 8022996:	687b      	ldr	r3, [r7, #4]
 8022998:	2101      	movs	r1, #1
 802299a:	4618      	mov	r0, r3
 802299c:	f7ff f862 	bl	8021a64 <_ZNKSt5arrayIhLj256EEixEj>
 80229a0:	4603      	mov	r3, r0
 80229a2:	781b      	ldrb	r3, [r3, #0]
 80229a4:	75bb      	strb	r3, [r7, #22]

		sFilter.Configure(targetDuration, durationThreshold);
 80229a6:	7dba      	ldrb	r2, [r7, #22]
 80229a8:	7dfb      	ldrb	r3, [r7, #23]
 80229aa:	4619      	mov	r1, r3
 80229ac:	6838      	ldr	r0, [r7, #0]
 80229ae:	f7ff fcdb 	bl	8022368 <_ZN20StrobeDurationFilter9ConfigureEhh>
		responce.Error = ErrorCodes::Success;
 80229b2:	68fb      	ldr	r3, [r7, #12]
 80229b4:	2200      	movs	r2, #0
 80229b6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

		return responce;
 80229ba:	bf00      	nop
	}
 80229bc:	68f8      	ldr	r0, [r7, #12]
 80229be:	3718      	adds	r7, #24
 80229c0:	46bd      	mov	sp, r7
 80229c2:	bd80      	pop	{r7, pc}

080229c4 <_ZN25MotherboardRequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>:

	Responce StrobeWidth(const Request &request,
 80229c4:	b580      	push	{r7, lr}
 80229c6:	b088      	sub	sp, #32
 80229c8:	af00      	add	r7, sp, #0
 80229ca:	6178      	str	r0, [r7, #20]
 80229cc:	6139      	str	r1, [r7, #16]
 80229ce:	60fa      	str	r2, [r7, #12]
 80229d0:	60bb      	str	r3, [r7, #8]
			const StrobeDurationFilter &sFilter) {
		Responce responce;
		responce.ResponceSize = 1;
 80229d2:	697b      	ldr	r3, [r7, #20]
 80229d4:	2201      	movs	r2, #1
 80229d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 80229da:	68fb      	ldr	r3, [r7, #12]
 80229dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80229e0:	2b01      	cmp	r3, #1
 80229e2:	d004      	beq.n	80229ee <_ZN25MotherboardRequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x2a>
			responce.Error = ErrorCodes::BadRequest;
 80229e4:	697b      	ldr	r3, [r7, #20]
 80229e6:	2203      	movs	r2, #3
 80229e8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			return responce;
 80229ec:	e02c      	b.n	8022a48 <_ZN25MotherboardRequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x84>
		}

		float strobeWidth = sFilter.GetStrobeDuration();
 80229ee:	68b8      	ldr	r0, [r7, #8]
 80229f0:	f7ff fcce 	bl	8022390 <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>
 80229f4:	ed87 0a07 	vstr	s0, [r7, #28]

		if (strobeWidth < 0)
 80229f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80229fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a04:	d502      	bpl.n	8022a0c <_ZN25MotherboardRequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x48>
			strobeWidth = 0;
 8022a06:	f04f 0300 	mov.w	r3, #0
 8022a0a:	61fb      	str	r3, [r7, #28]
		if (strobeWidth > 255)
 8022a0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8022a10:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8022a50 <_ZN25MotherboardRequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x8c>
 8022a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a1c:	dd01      	ble.n	8022a22 <_ZN25MotherboardRequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x5e>
			strobeWidth = 255;
 8022a1e:	4b0d      	ldr	r3, [pc, #52]	; (8022a54 <_ZN25MotherboardRequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x90>)
 8022a20:	61fb      	str	r3, [r7, #28]

		responce.Data[0] = static_cast<uint8_t>(strobeWidth);
 8022a22:	2100      	movs	r1, #0
 8022a24:	6978      	ldr	r0, [r7, #20]
 8022a26:	f001 f965 	bl	8023cf4 <_ZNSt5arrayIhLj256EEixEj>
 8022a2a:	4603      	mov	r3, r0
 8022a2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8022a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022a34:	edc7 7a01 	vstr	s15, [r7, #4]
 8022a38:	793a      	ldrb	r2, [r7, #4]
 8022a3a:	b2d2      	uxtb	r2, r2
 8022a3c:	701a      	strb	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 8022a3e:	697b      	ldr	r3, [r7, #20]
 8022a40:	2200      	movs	r2, #0
 8022a42:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

		return responce;
 8022a46:	bf00      	nop
	}
 8022a48:	6978      	ldr	r0, [r7, #20]
 8022a4a:	3720      	adds	r7, #32
 8022a4c:	46bd      	mov	sp, r7
 8022a4e:	bd80      	pop	{r7, pc}
 8022a50:	437f0000 	.word	0x437f0000
 8022a54:	437f0000 	.word	0x437f0000

08022a58 <_ZN25MotherboardRequestHandler19UnknownModeResponceERK7Request>:

	Responce UnknownModeResponce(const Request &request) {
 8022a58:	b480      	push	{r7}
 8022a5a:	b085      	sub	sp, #20
 8022a5c:	af00      	add	r7, sp, #0
 8022a5e:	60f8      	str	r0, [r7, #12]
 8022a60:	60b9      	str	r1, [r7, #8]
 8022a62:	607a      	str	r2, [r7, #4]
		Responce responce;
		responce.ResponceSize = request.ResponceSize;
 8022a64:	687b      	ldr	r3, [r7, #4]
 8022a66:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8022a6a:	68fb      	ldr	r3, [r7, #12]
 8022a6c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.Error = ErrorCodes::UnknownMode;
 8022a70:	68fb      	ldr	r3, [r7, #12]
 8022a72:	2202      	movs	r2, #2
 8022a74:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		return responce;
 8022a78:	bf00      	nop
	}
 8022a7a:	68f8      	ldr	r0, [r7, #12]
 8022a7c:	3714      	adds	r7, #20
 8022a7e:	46bd      	mov	sp, r7
 8022a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a84:	4770      	bx	lr

08022a86 <_ZN25MotherboardRequestHandler10GetVersionERK7RequestRK15VersionProvider>:

	Responce GetVersion(const Request &request,
 8022a86:	b580      	push	{r7, lr}
 8022a88:	b086      	sub	sp, #24
 8022a8a:	af00      	add	r7, sp, #0
 8022a8c:	60f8      	str	r0, [r7, #12]
 8022a8e:	60b9      	str	r1, [r7, #8]
 8022a90:	607a      	str	r2, [r7, #4]
 8022a92:	603b      	str	r3, [r7, #0]
			const VersionProvider &versionProvider) {
		Responce responce;
		responce.ResponceSize = VersionProvider::Version::Size;
 8022a94:	68fb      	ldr	r3, [r7, #12]
 8022a96:	2202      	movs	r2, #2
 8022a98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.Error = ErrorCodes::Success;
 8022a9c:	68fb      	ldr	r3, [r7, #12]
 8022a9e:	2200      	movs	r2, #0
 8022aa0:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

		uint8_t *ptr = responce.Data.data();
 8022aa4:	68f8      	ldr	r0, [r7, #12]
 8022aa6:	f000 fd65 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 8022aaa:	4603      	mov	r3, r0
 8022aac:	613b      	str	r3, [r7, #16]
		versionProvider.GetVersion().SerializeTo(&ptr);
 8022aae:	6838      	ldr	r0, [r7, #0]
 8022ab0:	f7ff fd0d 	bl	80224ce <_ZNK15VersionProvider10GetVersionEv>
 8022ab4:	4603      	mov	r3, r0
 8022ab6:	82bb      	strh	r3, [r7, #20]
 8022ab8:	f107 0210 	add.w	r2, r7, #16
 8022abc:	f107 0314 	add.w	r3, r7, #20
 8022ac0:	4611      	mov	r1, r2
 8022ac2:	4618      	mov	r0, r3
 8022ac4:	f7ff fcb4 	bl	8022430 <_ZN15VersionProvider7Version11SerializeToEPPh>

		return responce;
 8022ac8:	bf00      	nop
	}
 8022aca:	68f8      	ldr	r0, [r7, #12]
 8022acc:	3718      	adds	r7, #24
 8022ace:	46bd      	mov	sp, r7
 8022ad0:	bd80      	pop	{r7, pc}
	...

08022ad4 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext>:

public:
	Responce Handle(const Request &request, MotherboardContext &mbCtx) {
 8022ad4:	b580      	push	{r7, lr}
 8022ad6:	b086      	sub	sp, #24
 8022ad8:	af02      	add	r7, sp, #8
 8022ada:	60f8      	str	r0, [r7, #12]
 8022adc:	60b9      	str	r1, [r7, #8]
 8022ade:	607a      	str	r2, [r7, #4]
 8022ae0:	603b      	str	r3, [r7, #0]
		assert(request.PeripheryID == Periphery::Motherboard);
 8022ae2:	687b      	ldr	r3, [r7, #4]
 8022ae4:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8022ae8:	2b01      	cmp	r3, #1
 8022aea:	d006      	beq.n	8022afa <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x26>
 8022aec:	4b4d      	ldr	r3, [pc, #308]	; (8022c24 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x150>)
 8022aee:	4a4e      	ldr	r2, [pc, #312]	; (8022c28 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x154>)
 8022af0:	f240 418b 	movw	r1, #1163	; 0x48b
 8022af4:	484d      	ldr	r0, [pc, #308]	; (8022c2c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x158>)
 8022af6:	f01d fb67 	bl	80401c8 <__assert_func>

		using M = RequestMode;

		switch (M::Deserialize(request.MetaInfo)) {
 8022afa:	687b      	ldr	r3, [r7, #4]
 8022afc:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022b00:	4618      	mov	r0, r3
 8022b02:	f7ff fe99 	bl	8022838 <_ZN25MotherboardRequestHandler11RequestMode11DeserializeEh>
 8022b06:	4603      	mov	r3, r0
 8022b08:	2b0a      	cmp	r3, #10
 8022b0a:	f200 8081 	bhi.w	8022c10 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x13c>
 8022b0e:	a201      	add	r2, pc, #4	; (adr r2, 8022b14 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x40>)
 8022b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022b14:	08022b41 	.word	0x08022b41
 8022b18:	08022b53 	.word	0x08022b53
 8022b1c:	08022b65 	.word	0x08022b65
 8022b20:	08022b77 	.word	0x08022b77
 8022b24:	08022ba5 	.word	0x08022ba5
 8022b28:	08022b89 	.word	0x08022b89
 8022b2c:	08022bc9 	.word	0x08022bc9
 8022b30:	08022bdb 	.word	0x08022bdb
 8022b34:	08022bed 	.word	0x08022bed
 8022b38:	08022bb7 	.word	0x08022bb7
 8022b3c:	08022bff 	.word	0x08022bff
		case M::IMUFrame:
			return GetFrameBySeq(request, mbCtx.IMUFrameContainer);
 8022b40:	683a      	ldr	r2, [r7, #0]
 8022b42:	4b3b      	ldr	r3, [pc, #236]	; (8022c30 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x15c>)
 8022b44:	4413      	add	r3, r2
 8022b46:	68f8      	ldr	r0, [r7, #12]
 8022b48:	687a      	ldr	r2, [r7, #4]
 8022b4a:	68b9      	ldr	r1, [r7, #8]
 8022b4c:	f001 f8ef 	bl	8023d2e <_ZN25MotherboardRequestHandler13GetFrameBySeqI8IMUFrameEE8ResponceRK7RequestRK14FrameContainerIT_E>
 8022b50:	e064      	b.n	8022c1c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x148>
		case M::BodyFrame:
			return GetFrameBySeq(request, mbCtx.BodyFrameContainer);
 8022b52:	683a      	ldr	r2, [r7, #0]
 8022b54:	4b37      	ldr	r3, [pc, #220]	; (8022c34 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x160>)
 8022b56:	4413      	add	r3, r2
 8022b58:	68f8      	ldr	r0, [r7, #12]
 8022b5a:	687a      	ldr	r2, [r7, #4]
 8022b5c:	68b9      	ldr	r1, [r7, #8]
 8022b5e:	f001 f944 	bl	8023dea <_ZN25MotherboardRequestHandler13GetFrameBySeqI14ServoDataFrameEE8ResponceRK7RequestRK14FrameContainerIT_E>
 8022b62:	e05b      	b.n	8022c1c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x148>
		case M::IMUInfo:
			return GetInfo(request, mbCtx.IMUFrameContainer);
 8022b64:	683a      	ldr	r2, [r7, #0]
 8022b66:	4b32      	ldr	r3, [pc, #200]	; (8022c30 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x15c>)
 8022b68:	4413      	add	r3, r2
 8022b6a:	68f8      	ldr	r0, [r7, #12]
 8022b6c:	687a      	ldr	r2, [r7, #4]
 8022b6e:	68b9      	ldr	r1, [r7, #8]
 8022b70:	f001 f9de 	bl	8023f30 <_ZN25MotherboardRequestHandler7GetInfoI8IMUFrameEE8ResponceRK7RequestRK14FrameContainerIT_E>
 8022b74:	e052      	b.n	8022c1c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x148>
		case M::BodyInfo:
			return GetInfo(request, mbCtx.BodyFrameContainer);
 8022b76:	683a      	ldr	r2, [r7, #0]
 8022b78:	4b2e      	ldr	r3, [pc, #184]	; (8022c34 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x160>)
 8022b7a:	4413      	add	r3, r2
 8022b7c:	68f8      	ldr	r0, [r7, #12]
 8022b7e:	687a      	ldr	r2, [r7, #4]
 8022b80:	68b9      	ldr	r1, [r7, #8]
 8022b82:	f001 fa06 	bl	8023f92 <_ZN25MotherboardRequestHandler7GetInfoI14ServoDataFrameEE8ResponceRK7RequestRK14FrameContainerIT_E>
 8022b86:	e049      	b.n	8022c1c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x148>
		case M::ResetContainers:
			return DoReset(request, mbCtx.IMUFrameContainer,
 8022b88:	683b      	ldr	r3, [r7, #0]
 8022b8a:	4a29      	ldr	r2, [pc, #164]	; (8022c30 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x15c>)
 8022b8c:	441a      	add	r2, r3
					mbCtx.BodyFrameContainer);
 8022b8e:	6839      	ldr	r1, [r7, #0]
 8022b90:	4b28      	ldr	r3, [pc, #160]	; (8022c34 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x160>)
 8022b92:	440b      	add	r3, r1
 8022b94:	68f8      	ldr	r0, [r7, #12]
 8022b96:	9300      	str	r3, [sp, #0]
 8022b98:	4613      	mov	r3, r2
 8022b9a:	687a      	ldr	r2, [r7, #4]
 8022b9c:	68b9      	ldr	r1, [r7, #8]
 8022b9e:	f7ff fe90 	bl	80228c2 <_ZN25MotherboardRequestHandler7DoResetERK7RequestR14FrameContainerI8IMUFrameERS3_I14ServoDataFrameE>
 8022ba2:	e03b      	b.n	8022c1c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x148>
		case M::IMULatest:
			return GetLatestFrame(request, mbCtx.IMU);
 8022ba4:	683a      	ldr	r2, [r7, #0]
 8022ba6:	4b24      	ldr	r3, [pc, #144]	; (8022c38 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x164>)
 8022ba8:	4413      	add	r3, r2
 8022baa:	68f8      	ldr	r0, [r7, #12]
 8022bac:	687a      	ldr	r2, [r7, #4]
 8022bae:	68b9      	ldr	r1, [r7, #8]
 8022bb0:	f7ff fe4e 	bl	8022850 <_ZN25MotherboardRequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 8022bb4:	e032      	b.n	8022c1c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x148>
		case M::ConfigureStrobeFilter:
			return ConfigureFilter(request, mbCtx.StrobeFilter);
 8022bb6:	683a      	ldr	r2, [r7, #0]
 8022bb8:	4b20      	ldr	r3, [pc, #128]	; (8022c3c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x168>)
 8022bba:	4413      	add	r3, r2
 8022bbc:	68f8      	ldr	r0, [r7, #12]
 8022bbe:	687a      	ldr	r2, [r7, #4]
 8022bc0:	68b9      	ldr	r1, [r7, #8]
 8022bc2:	f7ff fecb 	bl	802295c <_ZN25MotherboardRequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>
 8022bc6:	e029      	b.n	8022c1c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x148>
		case M::IMUStrobeOffset:
			return SetOffset(request, mbCtx.IMUStrobeOffset);
 8022bc8:	683a      	ldr	r2, [r7, #0]
 8022bca:	4b1d      	ldr	r3, [pc, #116]	; (8022c40 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x16c>)
 8022bcc:	4413      	add	r3, r2
 8022bce:	68f8      	ldr	r0, [r7, #12]
 8022bd0:	687a      	ldr	r2, [r7, #4]
 8022bd2:	68b9      	ldr	r1, [r7, #8]
 8022bd4:	f7ff fe99 	bl	802290a <_ZN25MotherboardRequestHandler9SetOffsetERK7RequestRj>
 8022bd8:	e020      	b.n	8022c1c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x148>
		case M::BodyStrobeOffset:
			return SetOffset(request, mbCtx.BodyStrobeOffset);
 8022bda:	683a      	ldr	r2, [r7, #0]
 8022bdc:	4b19      	ldr	r3, [pc, #100]	; (8022c44 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x170>)
 8022bde:	4413      	add	r3, r2
 8022be0:	68f8      	ldr	r0, [r7, #12]
 8022be2:	687a      	ldr	r2, [r7, #4]
 8022be4:	68b9      	ldr	r1, [r7, #8]
 8022be6:	f7ff fe90 	bl	802290a <_ZN25MotherboardRequestHandler9SetOffsetERK7RequestRj>
 8022bea:	e017      	b.n	8022c1c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x148>
		case M::GetStrobeWidth:
			return StrobeWidth(request, mbCtx.StrobeFilter);
 8022bec:	683a      	ldr	r2, [r7, #0]
 8022bee:	4b13      	ldr	r3, [pc, #76]	; (8022c3c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x168>)
 8022bf0:	4413      	add	r3, r2
 8022bf2:	68f8      	ldr	r0, [r7, #12]
 8022bf4:	687a      	ldr	r2, [r7, #4]
 8022bf6:	68b9      	ldr	r1, [r7, #8]
 8022bf8:	f7ff fee4 	bl	80229c4 <_ZN25MotherboardRequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>
 8022bfc:	e00e      	b.n	8022c1c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x148>
		case M::GetVersion:
			return GetVersion(request, mbCtx.Version);
 8022bfe:	683a      	ldr	r2, [r7, #0]
 8022c00:	4b11      	ldr	r3, [pc, #68]	; (8022c48 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x174>)
 8022c02:	4413      	add	r3, r2
 8022c04:	68f8      	ldr	r0, [r7, #12]
 8022c06:	687a      	ldr	r2, [r7, #4]
 8022c08:	68b9      	ldr	r1, [r7, #8]
 8022c0a:	f7ff ff3c 	bl	8022a86 <_ZN25MotherboardRequestHandler10GetVersionERK7RequestRK15VersionProvider>
 8022c0e:	e005      	b.n	8022c1c <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext+0x148>

		default:
			return UnknownModeResponce(request);
 8022c10:	68fb      	ldr	r3, [r7, #12]
 8022c12:	687a      	ldr	r2, [r7, #4]
 8022c14:	68b9      	ldr	r1, [r7, #8]
 8022c16:	4618      	mov	r0, r3
 8022c18:	f7ff ff1e 	bl	8022a58 <_ZN25MotherboardRequestHandler19UnknownModeResponceERK7Request>
		}
	}
 8022c1c:	68f8      	ldr	r0, [r7, #12]
 8022c1e:	3710      	adds	r7, #16
 8022c20:	46bd      	mov	sp, r7
 8022c22:	bd80      	pop	{r7, pc}
 8022c24:	08041a28 	.word	0x08041a28
 8022c28:	08041a58 	.word	0x08041a58
 8022c2c:	080413d0 	.word	0x080413d0
 8022c30:	00022498 	.word	0x00022498
 8022c34:	000224c4 	.word	0x000224c4
 8022c38:	000224f0 	.word	0x000224f0
 8022c3c:	0002367c 	.word	0x0002367c
 8022c40:	000236c0 	.word	0x000236c0
 8022c44:	000236c4 	.word	0x000236c4
 8022c48:	00023648 	.word	0x00023648

08022c4c <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8022c4c:	b580      	push	{r7, lr}
 8022c4e:	b082      	sub	sp, #8
 8022c50:	af00      	add	r7, sp, #0
 8022c52:	6078      	str	r0, [r7, #4]
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	4618      	mov	r0, r3
 8022c58:	f7ff f832 	bl	8021cc0 <_ZN10FixedQueueI7RequestLj10EEC1Ev>
 8022c5c:	687b      	ldr	r3, [r7, #4]
 8022c5e:	2201      	movs	r2, #1
 8022c60:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
 8022c64:	687b      	ldr	r3, [r7, #4]
 8022c66:	4618      	mov	r0, r3
 8022c68:	3708      	adds	r7, #8
 8022c6a:	46bd      	mov	sp, r7
 8022c6c:	bd80      	pop	{r7, pc}
	...

08022c70 <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8022c70:	b580      	push	{r7, lr}
 8022c72:	b082      	sub	sp, #8
 8022c74:	af00      	add	r7, sp, #0
 8022c76:	6078      	str	r0, [r7, #4]
 8022c78:	687b      	ldr	r3, [r7, #4]
 8022c7a:	4618      	mov	r0, r3
 8022c7c:	f7fe f92c 	bl	8020ed8 <_ZN10FixedQueueI7RequestLj500EEC1Ev>
 8022c80:	687a      	ldr	r2, [r7, #4]
 8022c82:	4b17      	ldr	r3, [pc, #92]	; (8022ce0 <_ZN11QueueSenderC1Ev+0x70>)
 8022c84:	4413      	add	r3, r2
 8022c86:	4618      	mov	r0, r3
 8022c88:	f7fe f93a 	bl	8020f00 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>
 8022c8c:	687b      	ldr	r3, [r7, #4]
 8022c8e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022c92:	2200      	movs	r2, #0
 8022c94:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 8022c98:	687b      	ldr	r3, [r7, #4]
 8022c9a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022c9e:	2200      	movs	r2, #0
 8022ca0:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8022ca4:	687b      	ldr	r3, [r7, #4]
 8022ca6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022caa:	2201      	movs	r2, #1
 8022cac:	f883 27f0 	strb.w	r2, [r3, #2032]	; 0x7f0
 8022cb0:	687b      	ldr	r3, [r7, #4]
 8022cb2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022cb6:	2200      	movs	r2, #0
 8022cb8:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8022cbc:	687b      	ldr	r3, [r7, #4]
 8022cbe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022cc2:	2201      	movs	r2, #1
 8022cc4:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8022cc8:	687b      	ldr	r3, [r7, #4]
 8022cca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022cce:	2200      	movs	r2, #0
 8022cd0:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	4618      	mov	r0, r3
 8022cd8:	3708      	adds	r7, #8
 8022cda:	46bd      	mov	sp, r7
 8022cdc:	bd80      	pop	{r7, pc}
 8022cde:	bf00      	nop
 8022ce0:	00020b7c 	.word	0x00020b7c

08022ce4 <_ZN10BHYWrapperC1Ev>:

		uint8_t SensorId;
	};

	BHYWrapper(SPI_HandleTypeDef *spiHandle);
	BHYWrapper() = default;
 8022ce4:	b480      	push	{r7}
 8022ce6:	b083      	sub	sp, #12
 8022ce8:	af00      	add	r7, sp, #0
 8022cea:	6078      	str	r0, [r7, #4]
 8022cec:	687b      	ldr	r3, [r7, #4]
 8022cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022cf2:	461a      	mov	r2, r3
 8022cf4:	2300      	movs	r3, #0
 8022cf6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8022cfa:	687b      	ldr	r3, [r7, #4]
 8022cfc:	4618      	mov	r0, r3
 8022cfe:	370c      	adds	r7, #12
 8022d00:	46bd      	mov	sp, r7
 8022d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d06:	4770      	bx	lr

08022d08 <_ZN18MotherboardContextC1Ev>:
	MotherboardContext() = default;
 8022d08:	b580      	push	{r7, lr}
 8022d0a:	b082      	sub	sp, #8
 8022d0c:	af00      	add	r7, sp, #0
 8022d0e:	6078      	str	r0, [r7, #4]
 8022d10:	687b      	ldr	r3, [r7, #4]
 8022d12:	4618      	mov	r0, r3
 8022d14:	f7ff ff9a 	bl	8022c4c <_ZN13HeadInterfaceC1Ev>
 8022d18:	687b      	ldr	r3, [r7, #4]
 8022d1a:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022d1e:	4618      	mov	r0, r3
 8022d20:	f7ff ffa6 	bl	8022c70 <_ZN11QueueSenderC1Ev>
 8022d24:	687a      	ldr	r2, [r7, #4]
 8022d26:	4b20      	ldr	r3, [pc, #128]	; (8022da8 <_ZN18MotherboardContextC1Ev+0xa0>)
 8022d28:	4413      	add	r3, r2
 8022d2a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8022d2e:	4618      	mov	r0, r3
 8022d30:	f000 fe89 	bl	8023a46 <_ZN14FrameContainerI8IMUFrameEC1Et>
 8022d34:	687a      	ldr	r2, [r7, #4]
 8022d36:	4b1d      	ldr	r3, [pc, #116]	; (8022dac <_ZN18MotherboardContextC1Ev+0xa4>)
 8022d38:	4413      	add	r3, r2
 8022d3a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8022d3e:	4618      	mov	r0, r3
 8022d40:	f000 fea3 	bl	8023a8a <_ZN14FrameContainerI14ServoDataFrameEC1Et>
 8022d44:	687a      	ldr	r2, [r7, #4]
 8022d46:	4b1a      	ldr	r3, [pc, #104]	; (8022db0 <_ZN18MotherboardContextC1Ev+0xa8>)
 8022d48:	4413      	add	r3, r2
 8022d4a:	4618      	mov	r0, r3
 8022d4c:	f7ff ffca 	bl	8022ce4 <_ZN10BHYWrapperC1Ev>
 8022d50:	687a      	ldr	r2, [r7, #4]
 8022d52:	4b18      	ldr	r3, [pc, #96]	; (8022db4 <_ZN18MotherboardContextC1Ev+0xac>)
 8022d54:	4413      	add	r3, r2
 8022d56:	2200      	movs	r2, #0
 8022d58:	2100      	movs	r1, #0
 8022d5a:	4618      	mov	r0, r3
 8022d5c:	f7ff fba2 	bl	80224a4 <_ZN15VersionProviderC1Ehh>
 8022d60:	687a      	ldr	r2, [r7, #4]
 8022d62:	4b15      	ldr	r3, [pc, #84]	; (8022db8 <_ZN18MotherboardContextC1Ev+0xb0>)
 8022d64:	4413      	add	r3, r2
 8022d66:	4618      	mov	r0, r3
 8022d68:	f7ff fc8b 	bl	8022682 <_ZN12IMUFrameMemoC1Ev>
 8022d6c:	687a      	ldr	r2, [r7, #4]
 8022d6e:	4b13      	ldr	r3, [pc, #76]	; (8022dbc <_ZN18MotherboardContextC1Ev+0xb4>)
 8022d70:	4413      	add	r3, r2
 8022d72:	4618      	mov	r0, r3
 8022d74:	f7ff fcb2 	bl	80226dc <_ZN20StrobeDurationFilterC1Ev>
 8022d78:	687a      	ldr	r2, [r7, #4]
 8022d7a:	4b11      	ldr	r3, [pc, #68]	; (8022dc0 <_ZN18MotherboardContextC1Ev+0xb8>)
 8022d7c:	4413      	add	r3, r2
 8022d7e:	4618      	mov	r0, r3
 8022d80:	f000 ff53 	bl	8023c2a <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 8022d84:	687a      	ldr	r2, [r7, #4]
 8022d86:	4b0f      	ldr	r3, [pc, #60]	; (8022dc4 <_ZN18MotherboardContextC1Ev+0xbc>)
 8022d88:	4413      	add	r3, r2
 8022d8a:	4618      	mov	r0, r3
 8022d8c:	f000 ff4d 	bl	8023c2a <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 8022d90:	687b      	ldr	r3, [r7, #4]
 8022d92:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8022d96:	2200      	movs	r2, #0
 8022d98:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
 8022d9c:	687b      	ldr	r3, [r7, #4]
 8022d9e:	4618      	mov	r0, r3
 8022da0:	3708      	adds	r7, #8
 8022da2:	46bd      	mov	sp, r7
 8022da4:	bd80      	pop	{r7, pc}
 8022da6:	bf00      	nop
 8022da8:	00022498 	.word	0x00022498
 8022dac:	000224c4 	.word	0x000224c4
 8022db0:	000224f0 	.word	0x000224f0
 8022db4:	00023648 	.word	0x00023648
 8022db8:	0002364c 	.word	0x0002364c
 8022dbc:	0002367c 	.word	0x0002367c
 8022dc0:	000236c8 	.word	0x000236c8
 8022dc4:	000236f0 	.word	0x000236f0

08022dc8 <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8022dc8:	b580      	push	{r7, lr}
 8022dca:	b082      	sub	sp, #8
 8022dcc:	af00      	add	r7, sp, #0
 8022dce:	6078      	str	r0, [r7, #4]
 8022dd0:	687a      	ldr	r2, [r7, #4]
 8022dd2:	4b14      	ldr	r3, [pc, #80]	; (8022e24 <_ZN18MotherboardContextD1Ev+0x5c>)
 8022dd4:	4413      	add	r3, r2
 8022dd6:	4618      	mov	r0, r3
 8022dd8:	f7ff fc73 	bl	80226c2 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>
 8022ddc:	687a      	ldr	r2, [r7, #4]
 8022dde:	4b12      	ldr	r3, [pc, #72]	; (8022e28 <_ZN18MotherboardContextD1Ev+0x60>)
 8022de0:	4413      	add	r3, r2
 8022de2:	4618      	mov	r0, r3
 8022de4:	f7ff fc6d 	bl	80226c2 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>
 8022de8:	687a      	ldr	r2, [r7, #4]
 8022dea:	4b10      	ldr	r3, [pc, #64]	; (8022e2c <_ZN18MotherboardContextD1Ev+0x64>)
 8022dec:	4413      	add	r3, r2
 8022dee:	4618      	mov	r0, r3
 8022df0:	f7ff fc98 	bl	8022724 <_ZN20StrobeDurationFilterD1Ev>
 8022df4:	687a      	ldr	r2, [r7, #4]
 8022df6:	4b0e      	ldr	r3, [pc, #56]	; (8022e30 <_ZN18MotherboardContextD1Ev+0x68>)
 8022df8:	4413      	add	r3, r2
 8022dfa:	4618      	mov	r0, r3
 8022dfc:	f7ff fc54 	bl	80226a8 <_ZN12IMUFrameMemoD1Ev>
 8022e00:	687a      	ldr	r2, [r7, #4]
 8022e02:	4b0c      	ldr	r3, [pc, #48]	; (8022e34 <_ZN18MotherboardContextD1Ev+0x6c>)
 8022e04:	4413      	add	r3, r2
 8022e06:	4618      	mov	r0, r3
 8022e08:	f7ff fc21 	bl	802264e <_ZN14FrameContainerI14ServoDataFrameED1Ev>
 8022e0c:	687a      	ldr	r2, [r7, #4]
 8022e0e:	4b0a      	ldr	r3, [pc, #40]	; (8022e38 <_ZN18MotherboardContextD1Ev+0x70>)
 8022e10:	4413      	add	r3, r2
 8022e12:	4618      	mov	r0, r3
 8022e14:	f7ff fc0e 	bl	8022634 <_ZN14FrameContainerI8IMUFrameED1Ev>
 8022e18:	687b      	ldr	r3, [r7, #4]
 8022e1a:	4618      	mov	r0, r3
 8022e1c:	3708      	adds	r7, #8
 8022e1e:	46bd      	mov	sp, r7
 8022e20:	bd80      	pop	{r7, pc}
 8022e22:	bf00      	nop
 8022e24:	000236f0 	.word	0x000236f0
 8022e28:	000236c8 	.word	0x000236c8
 8022e2c:	0002367c 	.word	0x0002367c
 8022e30:	0002364c 	.word	0x0002364c
 8022e34:	000224c4 	.word	0x000224c4
 8022e38:	00022498 	.word	0x00022498

08022e3c <_ZN14FrameContainerI8IMUFrameEaSEOS1_>:
class FrameContainer {
 8022e3c:	b580      	push	{r7, lr}
 8022e3e:	b082      	sub	sp, #8
 8022e40:	af00      	add	r7, sp, #0
 8022e42:	6078      	str	r0, [r7, #4]
 8022e44:	6039      	str	r1, [r7, #0]
 8022e46:	687b      	ldr	r3, [r7, #4]
 8022e48:	683a      	ldr	r2, [r7, #0]
 8022e4a:	4611      	mov	r1, r2
 8022e4c:	4618      	mov	r0, r3
 8022e4e:	f001 f8d1 	bl	8023ff4 <_ZNSt5dequeI8IMUFrameSaIS0_EEaSEOS2_>
 8022e52:	683b      	ldr	r3, [r7, #0]
 8022e54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8022e56:	687b      	ldr	r3, [r7, #4]
 8022e58:	851a      	strh	r2, [r3, #40]	; 0x28
 8022e5a:	683b      	ldr	r3, [r7, #0]
 8022e5c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8022e5e:	687b      	ldr	r3, [r7, #4]
 8022e60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8022e62:	687b      	ldr	r3, [r7, #4]
 8022e64:	4618      	mov	r0, r3
 8022e66:	3708      	adds	r7, #8
 8022e68:	46bd      	mov	sp, r7
 8022e6a:	bd80      	pop	{r7, pc}

08022e6c <_ZN14FrameContainerI14ServoDataFrameEaSEOS1_>:
 8022e6c:	b580      	push	{r7, lr}
 8022e6e:	b082      	sub	sp, #8
 8022e70:	af00      	add	r7, sp, #0
 8022e72:	6078      	str	r0, [r7, #4]
 8022e74:	6039      	str	r1, [r7, #0]
 8022e76:	687b      	ldr	r3, [r7, #4]
 8022e78:	683a      	ldr	r2, [r7, #0]
 8022e7a:	4611      	mov	r1, r2
 8022e7c:	4618      	mov	r0, r3
 8022e7e:	f001 f8cc 	bl	802401a <_ZNSt5dequeI14ServoDataFrameSaIS0_EEaSEOS2_>
 8022e82:	683b      	ldr	r3, [r7, #0]
 8022e84:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8022e86:	687b      	ldr	r3, [r7, #4]
 8022e88:	851a      	strh	r2, [r3, #40]	; 0x28
 8022e8a:	683b      	ldr	r3, [r7, #0]
 8022e8c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8022e92:	687b      	ldr	r3, [r7, #4]
 8022e94:	4618      	mov	r0, r3
 8022e96:	3708      	adds	r7, #8
 8022e98:	46bd      	mov	sp, r7
 8022e9a:	bd80      	pop	{r7, pc}

08022e9c <_ZN12IMUFrameMemoaSEOS_>:
class IMUFrameMemo {
 8022e9c:	b580      	push	{r7, lr}
 8022e9e:	b082      	sub	sp, #8
 8022ea0:	af00      	add	r7, sp, #0
 8022ea2:	6078      	str	r0, [r7, #4]
 8022ea4:	6039      	str	r1, [r7, #0]
 8022ea6:	687b      	ldr	r3, [r7, #4]
 8022ea8:	683a      	ldr	r2, [r7, #0]
 8022eaa:	4611      	mov	r1, r2
 8022eac:	4618      	mov	r0, r3
 8022eae:	f001 f8c7 	bl	8024040 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 8022eb2:	683b      	ldr	r3, [r7, #0]
 8022eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022eb6:	687b      	ldr	r3, [r7, #4]
 8022eb8:	629a      	str	r2, [r3, #40]	; 0x28
 8022eba:	683b      	ldr	r3, [r7, #0]
 8022ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022ebe:	687b      	ldr	r3, [r7, #4]
 8022ec0:	62da      	str	r2, [r3, #44]	; 0x2c
 8022ec2:	687b      	ldr	r3, [r7, #4]
 8022ec4:	4618      	mov	r0, r3
 8022ec6:	3708      	adds	r7, #8
 8022ec8:	46bd      	mov	sp, r7
 8022eca:	bd80      	pop	{r7, pc}

08022ecc <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>:
 8022ecc:	b580      	push	{r7, lr}
 8022ece:	b082      	sub	sp, #8
 8022ed0:	af00      	add	r7, sp, #0
 8022ed2:	6078      	str	r0, [r7, #4]
 8022ed4:	6039      	str	r1, [r7, #0]
 8022ed6:	687b      	ldr	r3, [r7, #4]
 8022ed8:	683a      	ldr	r2, [r7, #0]
 8022eda:	4611      	mov	r1, r2
 8022edc:	4618      	mov	r0, r3
 8022ede:	f001 f8c2 	bl	8024066 <_ZNSt5dequeIjSaIjEEaSEOS1_>
 8022ee2:	687b      	ldr	r3, [r7, #4]
 8022ee4:	4618      	mov	r0, r3
 8022ee6:	3708      	adds	r7, #8
 8022ee8:	46bd      	mov	sp, r7
 8022eea:	bd80      	pop	{r7, pc}

08022eec <_ZN20StrobeDurationFilteraSEOS_>:
class StrobeDurationFilter {
 8022eec:	b580      	push	{r7, lr}
 8022eee:	b082      	sub	sp, #8
 8022ef0:	af00      	add	r7, sp, #0
 8022ef2:	6078      	str	r0, [r7, #4]
 8022ef4:	6039      	str	r1, [r7, #0]
 8022ef6:	683b      	ldr	r3, [r7, #0]
 8022ef8:	681a      	ldr	r2, [r3, #0]
 8022efa:	687b      	ldr	r3, [r7, #4]
 8022efc:	601a      	str	r2, [r3, #0]
 8022efe:	683b      	ldr	r3, [r7, #0]
 8022f00:	685a      	ldr	r2, [r3, #4]
 8022f02:	687b      	ldr	r3, [r7, #4]
 8022f04:	605a      	str	r2, [r3, #4]
 8022f06:	683b      	ldr	r3, [r7, #0]
 8022f08:	689a      	ldr	r2, [r3, #8]
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	609a      	str	r2, [r3, #8]
 8022f0e:	683b      	ldr	r3, [r7, #0]
 8022f10:	68da      	ldr	r2, [r3, #12]
 8022f12:	687b      	ldr	r3, [r7, #4]
 8022f14:	60da      	str	r2, [r3, #12]
 8022f16:	683b      	ldr	r3, [r7, #0]
 8022f18:	691a      	ldr	r2, [r3, #16]
 8022f1a:	687b      	ldr	r3, [r7, #4]
 8022f1c:	611a      	str	r2, [r3, #16]
 8022f1e:	683b      	ldr	r3, [r7, #0]
 8022f20:	695a      	ldr	r2, [r3, #20]
 8022f22:	687b      	ldr	r3, [r7, #4]
 8022f24:	615a      	str	r2, [r3, #20]
 8022f26:	687b      	ldr	r3, [r7, #4]
 8022f28:	f103 0218 	add.w	r2, r3, #24
 8022f2c:	683b      	ldr	r3, [r7, #0]
 8022f2e:	3318      	adds	r3, #24
 8022f30:	4619      	mov	r1, r3
 8022f32:	4610      	mov	r0, r2
 8022f34:	f7ff ffca 	bl	8022ecc <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>
 8022f38:	683b      	ldr	r3, [r7, #0]
 8022f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8022f3c:	687b      	ldr	r3, [r7, #4]
 8022f3e:	641a      	str	r2, [r3, #64]	; 0x40
 8022f40:	687b      	ldr	r3, [r7, #4]
 8022f42:	4618      	mov	r0, r3
 8022f44:	3708      	adds	r7, #8
 8022f46:	46bd      	mov	sp, r7
 8022f48:	bd80      	pop	{r7, pc}
	...

08022f4c <_ZN18MotherboardContextaSEOS_>:
struct MotherboardContext {
 8022f4c:	b580      	push	{r7, lr}
 8022f4e:	b082      	sub	sp, #8
 8022f50:	af00      	add	r7, sp, #0
 8022f52:	6078      	str	r0, [r7, #4]
 8022f54:	6039      	str	r1, [r7, #0]
 8022f56:	687a      	ldr	r2, [r7, #4]
 8022f58:	683b      	ldr	r3, [r7, #0]
 8022f5a:	4610      	mov	r0, r2
 8022f5c:	4619      	mov	r1, r3
 8022f5e:	f640 43a1 	movw	r3, #3233	; 0xca1
 8022f62:	461a      	mov	r2, r3
 8022f64:	f01d f99a 	bl	804029c <memcpy>
 8022f68:	687a      	ldr	r2, [r7, #4]
 8022f6a:	683b      	ldr	r3, [r7, #0]
 8022f6c:	f602 40a4 	addw	r0, r2, #3236	; 0xca4
 8022f70:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022f74:	4a3f      	ldr	r2, [pc, #252]	; (8023074 <_ZN18MotherboardContextaSEOS_+0x128>)
 8022f76:	4619      	mov	r1, r3
 8022f78:	f01d f990 	bl	804029c <memcpy>
 8022f7c:	687a      	ldr	r2, [r7, #4]
 8022f7e:	4b3e      	ldr	r3, [pc, #248]	; (8023078 <_ZN18MotherboardContextaSEOS_+0x12c>)
 8022f80:	4413      	add	r3, r2
 8022f82:	6839      	ldr	r1, [r7, #0]
 8022f84:	4a3c      	ldr	r2, [pc, #240]	; (8023078 <_ZN18MotherboardContextaSEOS_+0x12c>)
 8022f86:	440a      	add	r2, r1
 8022f88:	4611      	mov	r1, r2
 8022f8a:	4618      	mov	r0, r3
 8022f8c:	f7ff ff56 	bl	8022e3c <_ZN14FrameContainerI8IMUFrameEaSEOS1_>
 8022f90:	687a      	ldr	r2, [r7, #4]
 8022f92:	4b3a      	ldr	r3, [pc, #232]	; (802307c <_ZN18MotherboardContextaSEOS_+0x130>)
 8022f94:	4413      	add	r3, r2
 8022f96:	6839      	ldr	r1, [r7, #0]
 8022f98:	4a38      	ldr	r2, [pc, #224]	; (802307c <_ZN18MotherboardContextaSEOS_+0x130>)
 8022f9a:	440a      	add	r2, r1
 8022f9c:	4611      	mov	r1, r2
 8022f9e:	4618      	mov	r0, r3
 8022fa0:	f7ff ff64 	bl	8022e6c <_ZN14FrameContainerI14ServoDataFrameEaSEOS1_>
 8022fa4:	687b      	ldr	r3, [r7, #4]
 8022fa6:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8022faa:	4619      	mov	r1, r3
 8022fac:	683b      	ldr	r3, [r7, #0]
 8022fae:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8022fb2:	461a      	mov	r2, r3
 8022fb4:	f501 639e 	add.w	r3, r1, #1264	; 0x4f0
 8022fb8:	f502 619e 	add.w	r1, r2, #1264	; 0x4f0
 8022fbc:	f241 1254 	movw	r2, #4436	; 0x1154
 8022fc0:	4618      	mov	r0, r3
 8022fc2:	f01d f96b 	bl	804029c <memcpy>
 8022fc6:	687b      	ldr	r3, [r7, #4]
 8022fc8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8022fcc:	461a      	mov	r2, r3
 8022fce:	683b      	ldr	r3, [r7, #0]
 8022fd0:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8022fd4:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 8022fd8:	f8a2 3648 	strh.w	r3, [r2, #1608]	; 0x648
 8022fdc:	687a      	ldr	r2, [r7, #4]
 8022fde:	4b28      	ldr	r3, [pc, #160]	; (8023080 <_ZN18MotherboardContextaSEOS_+0x134>)
 8022fe0:	4413      	add	r3, r2
 8022fe2:	6839      	ldr	r1, [r7, #0]
 8022fe4:	4a26      	ldr	r2, [pc, #152]	; (8023080 <_ZN18MotherboardContextaSEOS_+0x134>)
 8022fe6:	440a      	add	r2, r1
 8022fe8:	4611      	mov	r1, r2
 8022fea:	4618      	mov	r0, r3
 8022fec:	f7ff ff56 	bl	8022e9c <_ZN12IMUFrameMemoaSEOS_>
 8022ff0:	687a      	ldr	r2, [r7, #4]
 8022ff2:	4b24      	ldr	r3, [pc, #144]	; (8023084 <_ZN18MotherboardContextaSEOS_+0x138>)
 8022ff4:	4413      	add	r3, r2
 8022ff6:	6839      	ldr	r1, [r7, #0]
 8022ff8:	4a22      	ldr	r2, [pc, #136]	; (8023084 <_ZN18MotherboardContextaSEOS_+0x138>)
 8022ffa:	440a      	add	r2, r1
 8022ffc:	4611      	mov	r1, r2
 8022ffe:	4618      	mov	r0, r3
 8023000:	f7ff ff74 	bl	8022eec <_ZN20StrobeDurationFilteraSEOS_>
 8023004:	683b      	ldr	r3, [r7, #0]
 8023006:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 802300a:	f8d3 36c0 	ldr.w	r3, [r3, #1728]	; 0x6c0
 802300e:	687a      	ldr	r2, [r7, #4]
 8023010:	f502 320c 	add.w	r2, r2, #143360	; 0x23000
 8023014:	f8c2 36c0 	str.w	r3, [r2, #1728]	; 0x6c0
 8023018:	683b      	ldr	r3, [r7, #0]
 802301a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 802301e:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	; 0x6c4
 8023022:	687a      	ldr	r2, [r7, #4]
 8023024:	f502 320c 	add.w	r2, r2, #143360	; 0x23000
 8023028:	f8c2 36c4 	str.w	r3, [r2, #1732]	; 0x6c4
 802302c:	687a      	ldr	r2, [r7, #4]
 802302e:	4b16      	ldr	r3, [pc, #88]	; (8023088 <_ZN18MotherboardContextaSEOS_+0x13c>)
 8023030:	4413      	add	r3, r2
 8023032:	6839      	ldr	r1, [r7, #0]
 8023034:	4a14      	ldr	r2, [pc, #80]	; (8023088 <_ZN18MotherboardContextaSEOS_+0x13c>)
 8023036:	440a      	add	r2, r1
 8023038:	4611      	mov	r1, r2
 802303a:	4618      	mov	r0, r3
 802303c:	f7ff ff46 	bl	8022ecc <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>
 8023040:	687a      	ldr	r2, [r7, #4]
 8023042:	4b12      	ldr	r3, [pc, #72]	; (802308c <_ZN18MotherboardContextaSEOS_+0x140>)
 8023044:	4413      	add	r3, r2
 8023046:	6839      	ldr	r1, [r7, #0]
 8023048:	4a10      	ldr	r2, [pc, #64]	; (802308c <_ZN18MotherboardContextaSEOS_+0x140>)
 802304a:	440a      	add	r2, r1
 802304c:	4611      	mov	r1, r2
 802304e:	4618      	mov	r0, r3
 8023050:	f7ff ff3c 	bl	8022ecc <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>
 8023054:	683b      	ldr	r3, [r7, #0]
 8023056:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 802305a:	f893 2718 	ldrb.w	r2, [r3, #1816]	; 0x718
 802305e:	687b      	ldr	r3, [r7, #4]
 8023060:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8023064:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
 8023068:	687b      	ldr	r3, [r7, #4]
 802306a:	4618      	mov	r0, r3
 802306c:	3708      	adds	r7, #8
 802306e:	46bd      	mov	sp, r7
 8023070:	bd80      	pop	{r7, pc}
 8023072:	bf00      	nop
 8023074:	000217f4 	.word	0x000217f4
 8023078:	00022498 	.word	0x00022498
 802307c:	000224c4 	.word	0x000224c4
 8023080:	0002364c 	.word	0x0002364c
 8023084:	0002367c 	.word	0x0002367c
 8023088:	000236c8 	.word	0x000236c8
 802308c:	000236f0 	.word	0x000236f0

08023090 <MotherboardInit>:
#include "Motherboard.hpp"

static MotherboardContext mbCtx;
static MotherboardRequestHandler mbHandler;

int MotherboardInit(MotherboardConfig conf) {
 8023090:	b084      	sub	sp, #16
 8023092:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023094:	f5ad 3d0d 	sub.w	sp, sp, #144384	; 0x23400
 8023098:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 802309c:	af08      	add	r7, sp, #32
 802309e:	4c1f      	ldr	r4, [pc, #124]	; (802311c <MotherboardInit+0x8c>)
 80230a0:	443c      	add	r4, r7
 80230a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbCtx = MotherboardContext { conf };
 80230a6:	4e1e      	ldr	r6, [pc, #120]	; (8023120 <MotherboardInit+0x90>)
 80230a8:	4b1e      	ldr	r3, [pc, #120]	; (8023124 <MotherboardInit+0x94>)
 80230aa:	4433      	add	r3, r6
 80230ac:	19de      	adds	r6, r3, r7
 80230ae:	466d      	mov	r5, sp
 80230b0:	4c1d      	ldr	r4, [pc, #116]	; (8023128 <MotherboardInit+0x98>)
 80230b2:	443c      	add	r4, r7
 80230b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80230b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80230b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80230bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80230c0:	4b16      	ldr	r3, [pc, #88]	; (802311c <MotherboardInit+0x8c>)
 80230c2:	443b      	add	r3, r7
 80230c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80230c6:	4630      	mov	r0, r6
 80230c8:	f7ff fb3a 	bl	8022740 <_ZN18MotherboardContextC1E17MotherboardConfig>
 80230cc:	4b14      	ldr	r3, [pc, #80]	; (8023120 <MotherboardInit+0x90>)
 80230ce:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80230d2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80230d6:	443b      	add	r3, r7
 80230d8:	4619      	mov	r1, r3
 80230da:	4814      	ldr	r0, [pc, #80]	; (802312c <MotherboardInit+0x9c>)
 80230dc:	f7ff ff36 	bl	8022f4c <_ZN18MotherboardContextaSEOS_>
 80230e0:	4b0f      	ldr	r3, [pc, #60]	; (8023120 <MotherboardInit+0x90>)
 80230e2:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80230e6:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80230ea:	443b      	add	r3, r7
 80230ec:	4618      	mov	r0, r3
 80230ee:	f7ff fe6b 	bl	8022dc8 <_ZN18MotherboardContextD1Ev>

	mbCtx.Head.ResetReadState();
 80230f2:	480e      	ldr	r0, [pc, #56]	; (802312c <MotherboardInit+0x9c>)
 80230f4:	f7fe fe24 	bl	8021d40 <_ZN13HeadInterface14ResetReadStateEv>
	return mbCtx.IMU.Init(800, 0);
 80230f8:	2100      	movs	r1, #0
 80230fa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8023130 <MotherboardInit+0xa0>
 80230fe:	480d      	ldr	r0, [pc, #52]	; (8023134 <MotherboardInit+0xa4>)
 8023100:	f7fd fae4 	bl	80206cc <_ZN10BHYWrapper4InitEfm>
 8023104:	4603      	mov	r3, r0
}
 8023106:	4618      	mov	r0, r3
 8023108:	f507 370d 	add.w	r7, r7, #144384	; 0x23400
 802310c:	f507 7749 	add.w	r7, r7, #804	; 0x324
 8023110:	46bd      	mov	sp, r7
 8023112:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023116:	b004      	add	sp, #16
 8023118:	4770      	bx	lr
 802311a:	bf00      	nop
 802311c:	00023738 	.word	0x00023738
 8023120:	fffdc8e0 	.word	0xfffdc8e0
 8023124:	00023720 	.word	0x00023720
 8023128:	00023744 	.word	0x00023744
 802312c:	240001d0 	.word	0x240001d0
 8023130:	44480000 	.word	0x44480000
 8023134:	240226c0 	.word	0x240226c0

08023138 <MotherboardTick>:

int MotherboardTick() {
 8023138:	b580      	push	{r7, lr}
 802313a:	f5ad 6db0 	sub.w	sp, sp, #1408	; 0x580
 802313e:	af00      	add	r7, sp, #0
	if (mbCtx.StrobeFilter.HasStrobe()) {
 8023140:	4884      	ldr	r0, [pc, #528]	; (8023354 <MotherboardTick+0x21c>)
 8023142:	f7ff f957 	bl	80223f4 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 8023146:	4603      	mov	r3, r0
 8023148:	2b00      	cmp	r3, #0
 802314a:	d02c      	beq.n	80231a6 <MotherboardTick+0x6e>
		mbCtx.IMUStrobes.push(
				mbCtx.StrobeFilter.GetStrobe() + mbCtx.IMUStrobeOffset);
 802314c:	4881      	ldr	r0, [pc, #516]	; (8023354 <MotherboardTick+0x21c>)
 802314e:	f7ff f92f 	bl	80223b0 <_ZNK20StrobeDurationFilter9GetStrobeEv>
 8023152:	4602      	mov	r2, r0
 8023154:	4b80      	ldr	r3, [pc, #512]	; (8023358 <MotherboardTick+0x220>)
 8023156:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 802315a:	f8d3 36c0 	ldr.w	r3, [r3, #1728]	; 0x6c0
 802315e:	441a      	add	r2, r3
 8023160:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8023164:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8023168:	601a      	str	r2, [r3, #0]
		mbCtx.IMUStrobes.push(
 802316a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 802316e:	4619      	mov	r1, r3
 8023170:	487a      	ldr	r0, [pc, #488]	; (802335c <MotherboardTick+0x224>)
 8023172:	f000 ff8b 	bl	802408c <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushEOj>
		mbCtx.BodyStrobes.push(
				mbCtx.StrobeFilter.GetStrobe() + mbCtx.BodyStrobeOffset);
 8023176:	4877      	ldr	r0, [pc, #476]	; (8023354 <MotherboardTick+0x21c>)
 8023178:	f7ff f91a 	bl	80223b0 <_ZNK20StrobeDurationFilter9GetStrobeEv>
 802317c:	4602      	mov	r2, r0
 802317e:	4b76      	ldr	r3, [pc, #472]	; (8023358 <MotherboardTick+0x220>)
 8023180:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8023184:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	; 0x6c4
 8023188:	441a      	add	r2, r3
 802318a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 802318e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8023192:	601a      	str	r2, [r3, #0]
		mbCtx.BodyStrobes.push(
 8023194:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8023198:	4619      	mov	r1, r3
 802319a:	4871      	ldr	r0, [pc, #452]	; (8023360 <MotherboardTick+0x228>)
 802319c:	f000 ff76 	bl	802408c <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushEOj>
		mbCtx.StrobeFilter.PopStrobe();
 80231a0:	486c      	ldr	r0, [pc, #432]	; (8023354 <MotherboardTick+0x21c>)
 80231a2:	f7ff f938 	bl	8022416 <_ZN20StrobeDurationFilter9PopStrobeEv>
	}

	if (!mbCtx.IMUStrobes.empty()) {
 80231a6:	486d      	ldr	r0, [pc, #436]	; (802335c <MotherboardTick+0x224>)
 80231a8:	f000 fb99 	bl	80238de <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>
 80231ac:	4603      	mov	r3, r0
 80231ae:	f083 0301 	eor.w	r3, r3, #1
 80231b2:	b2db      	uxtb	r3, r3
 80231b4:	2b00      	cmp	r3, #0
 80231b6:	d026      	beq.n	8023206 <MotherboardTick+0xce>
		size_t seq = mbCtx.IMUStrobes.front();
 80231b8:	4868      	ldr	r0, [pc, #416]	; (802335c <MotherboardTick+0x224>)
 80231ba:	f000 ff79 	bl	80240b0 <_ZNSt5queueIjSt5dequeIjSaIjEEE5frontEv>
 80231be:	4603      	mov	r3, r0
 80231c0:	681b      	ldr	r3, [r3, #0]
 80231c2:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
		if (mbCtx.FrameMemo.Has(seq)) {
 80231c6:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 80231ca:	4866      	ldr	r0, [pc, #408]	; (8023364 <MotherboardTick+0x22c>)
 80231cc:	f7ff f9c5 	bl	802255a <_ZNK12IMUFrameMemo3HasEj>
 80231d0:	4603      	mov	r3, r0
 80231d2:	2b00      	cmp	r3, #0
 80231d4:	d017      	beq.n	8023206 <MotherboardTick+0xce>
			mbCtx.IMUFrameContainer.Add(mbCtx.FrameMemo.Get(seq));
 80231d6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80231da:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 80231de:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 80231e2:	4960      	ldr	r1, [pc, #384]	; (8023364 <MotherboardTick+0x22c>)
 80231e4:	4618      	mov	r0, r3
 80231e6:	f7ff f9dd 	bl	80225a4 <_ZNK12IMUFrameMemo3GetEj>
 80231ea:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 80231ee:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80231f2:	4611      	mov	r1, r2
 80231f4:	4618      	mov	r0, r3
 80231f6:	f7fe ffcb 	bl	8022190 <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameE>
 80231fa:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80231fe:	4619      	mov	r1, r3
 8023200:	4859      	ldr	r0, [pc, #356]	; (8023368 <MotherboardTick+0x230>)
 8023202:	f000 ff62 	bl	80240ca <_ZN14FrameContainerI8IMUFrameE3AddERKS0_>
		}
	}

	if (!mbCtx.BodyStrobes.empty()) {
 8023206:	4856      	ldr	r0, [pc, #344]	; (8023360 <MotherboardTick+0x228>)
 8023208:	f000 fb69 	bl	80238de <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>
 802320c:	4603      	mov	r3, r0
 802320e:	f083 0301 	eor.w	r3, r3, #1
 8023212:	b2db      	uxtb	r3, r3
 8023214:	2b00      	cmp	r3, #0
 8023216:	d024      	beq.n	8023262 <MotherboardTick+0x12a>
		size_t seq = mbCtx.BodyStrobes.front();
 8023218:	4851      	ldr	r0, [pc, #324]	; (8023360 <MotherboardTick+0x228>)
 802321a:	f000 ff49 	bl	80240b0 <_ZNSt5queueIjSt5dequeIjSaIjEEE5frontEv>
 802321e:	4603      	mov	r3, r0
 8023220:	681b      	ldr	r3, [r3, #0]
 8023222:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
		if (mbCtx.FrameMemo.Has(seq)) {
 8023226:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 802322a:	484e      	ldr	r0, [pc, #312]	; (8023364 <MotherboardTick+0x22c>)
 802322c:	f7ff f995 	bl	802255a <_ZNK12IMUFrameMemo3HasEj>
 8023230:	4603      	mov	r3, r0
 8023232:	2b00      	cmp	r3, #0
 8023234:	d015      	beq.n	8023262 <MotherboardTick+0x12a>
			mbCtx.BodyFrameContainer.Add(mbCtx.Body.GetServoData());
 8023236:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 802323a:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 802323e:	494b      	ldr	r1, [pc, #300]	; (802336c <MotherboardTick+0x234>)
 8023240:	4618      	mov	r0, r3
 8023242:	f7fe f9ff 	bl	8021644 <_ZN11QueueSender12GetServoDataEv>
 8023246:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 802324a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 802324e:	4611      	mov	r1, r2
 8023250:	4618      	mov	r0, r3
 8023252:	f7fe ff35 	bl	80220c0 <_ZN14ServoDataFrameC1ERK8Responce>
 8023256:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 802325a:	4619      	mov	r1, r3
 802325c:	4844      	ldr	r0, [pc, #272]	; (8023370 <MotherboardTick+0x238>)
 802325e:	f000 ff53 	bl	8024108 <_ZN14FrameContainerI14ServoDataFrameE3AddERKS0_>
		}
	}

	if (mbCtx.UpdateIMU && mbCtx.IMU.Poll()) {
 8023262:	4b3d      	ldr	r3, [pc, #244]	; (8023358 <MotherboardTick+0x220>)
 8023264:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8023268:	f893 3718 	ldrb.w	r3, [r3, #1816]	; 0x718
 802326c:	2b00      	cmp	r3, #0
 802326e:	d007      	beq.n	8023280 <MotherboardTick+0x148>
 8023270:	4840      	ldr	r0, [pc, #256]	; (8023374 <MotherboardTick+0x23c>)
 8023272:	f7fd fb83 	bl	802097c <_ZN10BHYWrapper4PollEv>
 8023276:	4603      	mov	r3, r0
 8023278:	2b00      	cmp	r3, #0
 802327a:	d001      	beq.n	8023280 <MotherboardTick+0x148>
 802327c:	2301      	movs	r3, #1
 802327e:	e000      	b.n	8023282 <MotherboardTick+0x14a>
 8023280:	2300      	movs	r3, #0
 8023282:	2b00      	cmp	r3, #0
 8023284:	d017      	beq.n	80232b6 <MotherboardTick+0x17e>
		mbCtx.FrameMemo.Add(mbCtx.IMU.GetFrame(), mbCtx.IMU.GetSeq());
 8023286:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 802328a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 802328e:	4939      	ldr	r1, [pc, #228]	; (8023374 <MotherboardTick+0x23c>)
 8023290:	4618      	mov	r0, r3
 8023292:	f7fd fbb7 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>
 8023296:	4837      	ldr	r0, [pc, #220]	; (8023374 <MotherboardTick+0x23c>)
 8023298:	f7fd fc5e 	bl	8020b58 <_ZNK10BHYWrapper6GetSeqEv>
 802329c:	4602      	mov	r2, r0
 802329e:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80232a2:	4619      	mov	r1, r3
 80232a4:	482f      	ldr	r0, [pc, #188]	; (8023364 <MotherboardTick+0x22c>)
 80232a6:	f7ff f928 	bl	80224fa <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>
		mbCtx.UpdateIMU = false;
 80232aa:	4b2b      	ldr	r3, [pc, #172]	; (8023358 <MotherboardTick+0x220>)
 80232ac:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80232b0:	2200      	movs	r2, #0
 80232b2:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
	}

	if (mbCtx.Head.HasRequest()) {
 80232b6:	4828      	ldr	r0, [pc, #160]	; (8023358 <MotherboardTick+0x220>)
 80232b8:	f7fe fd68 	bl	8021d8c <_ZNK13HeadInterface10HasRequestEv>
 80232bc:	4603      	mov	r3, r0
 80232be:	2b00      	cmp	r3, #0
 80232c0:	d028      	beq.n	8023314 <MotherboardTick+0x1dc>
		Request request = mbCtx.Head.GetRequest();
 80232c2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80232c6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80232ca:	4923      	ldr	r1, [pc, #140]	; (8023358 <MotherboardTick+0x220>)
 80232cc:	4618      	mov	r0, r3
 80232ce:	f7fe fddf 	bl	8021e90 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 80232d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80232d6:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80232da:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80232de:	2b00      	cmp	r3, #0
 80232e0:	d002      	beq.n	80232e8 <MotherboardTick+0x1b0>
 80232e2:	2b01      	cmp	r3, #1
 80232e4:	d006      	beq.n	80232f4 <MotherboardTick+0x1bc>
 80232e6:	e015      	b.n	8023314 <MotherboardTick+0x1dc>
		case Periphery::Body:
			mbCtx.Body.AddRequest(request);
 80232e8:	463b      	mov	r3, r7
 80232ea:	4619      	mov	r1, r3
 80232ec:	481f      	ldr	r0, [pc, #124]	; (802336c <MotherboardTick+0x234>)
 80232ee:	f7fd fe75 	bl	8020fdc <_ZN11QueueSender10AddRequestERK7Request>
			break;
 80232f2:	e00f      	b.n	8023314 <MotherboardTick+0x1dc>
		case Periphery::Motherboard:
			mbCtx.Head.Send(mbHandler.Handle(request, mbCtx));
 80232f4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80232f8:	f5a3 7006 	sub.w	r0, r3, #536	; 0x218
 80232fc:	463a      	mov	r2, r7
 80232fe:	4b16      	ldr	r3, [pc, #88]	; (8023358 <MotherboardTick+0x220>)
 8023300:	491d      	ldr	r1, [pc, #116]	; (8023378 <MotherboardTick+0x240>)
 8023302:	f7ff fbe7 	bl	8022ad4 <_ZN25MotherboardRequestHandler6HandleERK7RequestR18MotherboardContext>
 8023306:	f507 735a 	add.w	r3, r7, #872	; 0x368
 802330a:	4619      	mov	r1, r3
 802330c:	4812      	ldr	r0, [pc, #72]	; (8023358 <MotherboardTick+0x220>)
 802330e:	f7fe fd4d 	bl	8021dac <_ZN13HeadInterface4SendERK8Responce>
			break;
 8023312:	bf00      	nop
		}
	}

	if (mbCtx.Body.HasResponce()) {
 8023314:	4815      	ldr	r0, [pc, #84]	; (802336c <MotherboardTick+0x234>)
 8023316:	f7fd ff13 	bl	8021140 <_ZNK11QueueSender11HasResponceEv>
 802331a:	4603      	mov	r3, r0
 802331c:	2b00      	cmp	r3, #0
 802331e:	d00d      	beq.n	802333c <MotherboardTick+0x204>
		mbCtx.Head.Send(mbCtx.Body.GetResponce());
 8023320:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8023324:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8023328:	4910      	ldr	r1, [pc, #64]	; (802336c <MotherboardTick+0x234>)
 802332a:	4618      	mov	r0, r3
 802332c:	f7fd ff6a 	bl	8021204 <_ZN11QueueSender11GetResponceEv>
 8023330:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8023334:	4619      	mov	r1, r3
 8023336:	4808      	ldr	r0, [pc, #32]	; (8023358 <MotherboardTick+0x220>)
 8023338:	f7fe fd38 	bl	8021dac <_ZN13HeadInterface4SendERK8Responce>
	}

	mbCtx.Body.ProcessPriorityRequest();
 802333c:	480b      	ldr	r0, [pc, #44]	; (802336c <MotherboardTick+0x234>)
 802333e:	f7fd ff95 	bl	802126c <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbCtx.Body.ProcessRequests();
 8023342:	480a      	ldr	r0, [pc, #40]	; (802336c <MotherboardTick+0x234>)
 8023344:	f7fe f9ae 	bl	80216a4 <_ZN11QueueSender15ProcessRequestsEv>

	return 0;
 8023348:	2300      	movs	r3, #0
}
 802334a:	4618      	mov	r0, r3
 802334c:	f507 67b0 	add.w	r7, r7, #1408	; 0x580
 8023350:	46bd      	mov	sp, r7
 8023352:	bd80      	pop	{r7, pc}
 8023354:	2402384c 	.word	0x2402384c
 8023358:	240001d0 	.word	0x240001d0
 802335c:	24023898 	.word	0x24023898
 8023360:	240238c0 	.word	0x240238c0
 8023364:	2402381c 	.word	0x2402381c
 8023368:	24022668 	.word	0x24022668
 802336c:	24000e74 	.word	0x24000e74
 8023370:	24022694 	.word	0x24022694
 8023374:	240226c0 	.word	0x240226c0
 8023378:	240238f0 	.word	0x240238f0

0802337c <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 802337c:	b580      	push	{r7, lr}
 802337e:	af00      	add	r7, sp, #0
	static bool firstEntry = true;
	if (firstEntry) {
 8023380:	4b06      	ldr	r3, [pc, #24]	; (802339c <MotherboardOnStrobe+0x20>)
 8023382:	781b      	ldrb	r3, [r3, #0]
 8023384:	2b00      	cmp	r3, #0
 8023386:	d003      	beq.n	8023390 <MotherboardOnStrobe+0x14>
		firstEntry = false;
 8023388:	4b04      	ldr	r3, [pc, #16]	; (802339c <MotherboardOnStrobe+0x20>)
 802338a:	2200      	movs	r2, #0
 802338c:	701a      	strb	r2, [r3, #0]
		return;
 802338e:	e003      	b.n	8023398 <MotherboardOnStrobe+0x1c>
	}

	mbCtx.StrobeFilter.ProcessStrobe(mbCtx.IMU);
 8023390:	4903      	ldr	r1, [pc, #12]	; (80233a0 <MotherboardOnStrobe+0x24>)
 8023392:	4804      	ldr	r0, [pc, #16]	; (80233a4 <MotherboardOnStrobe+0x28>)
 8023394:	f7fe ff82 	bl	802229c <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>
}
 8023398:	bd80      	pop	{r7, pc}
 802339a:	bf00      	nop
 802339c:	24000000 	.word	0x24000000
 80233a0:	240226c0 	.word	0x240226c0
 80233a4:	2402384c 	.word	0x2402384c

080233a8 <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 80233a8:	b580      	push	{r7, lr}
 80233aa:	af00      	add	r7, sp, #0
	mbCtx.Body.ProcessResponces();
 80233ac:	4802      	ldr	r0, [pc, #8]	; (80233b8 <MotherboardOnBodyRecieveComplete+0x10>)
 80233ae:	f7fe fc49 	bl	8021c44 <_ZN11QueueSender16ProcessResponcesEv>
}
 80233b2:	bf00      	nop
 80233b4:	bd80      	pop	{r7, pc}
 80233b6:	bf00      	nop
 80233b8:	24000e74 	.word	0x24000e74

080233bc <MotherboardOnHeadRecieveComplete>:

void MotherboardOnHeadRecieveComplete() {
 80233bc:	b580      	push	{r7, lr}
 80233be:	af00      	add	r7, sp, #0
	mbCtx.Head.ProcessRecievedData();
 80233c0:	4802      	ldr	r0, [pc, #8]	; (80233cc <MotherboardOnHeadRecieveComplete+0x10>)
 80233c2:	f7fe fda1 	bl	8021f08 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80233c6:	bf00      	nop
 80233c8:	bd80      	pop	{r7, pc}
 80233ca:	bf00      	nop
 80233cc:	240001d0 	.word	0x240001d0

080233d0 <MotherboardOnHeadTransmitComplete>:

void MotherboardOnHeadTransmitComplete() {
 80233d0:	b580      	push	{r7, lr}
 80233d2:	af00      	add	r7, sp, #0
	mbCtx.Head.FinishTransmit();
 80233d4:	4802      	ldr	r0, [pc, #8]	; (80233e0 <MotherboardOnHeadTransmitComplete+0x10>)
 80233d6:	f7fe fd89 	bl	8021eec <_ZN13HeadInterface14FinishTransmitEv>
}
 80233da:	bf00      	nop
 80233dc:	bd80      	pop	{r7, pc}
 80233de:	bf00      	nop
 80233e0:	240001d0 	.word	0x240001d0

080233e4 <MotherboardOnBodyTransmitComplete>:

void MotherboardOnBodyTransmitComplete() {
 80233e4:	b580      	push	{r7, lr}
 80233e6:	af00      	add	r7, sp, #0
	mbCtx.Body.FinishTransmit();
 80233e8:	4802      	ldr	r0, [pc, #8]	; (80233f4 <MotherboardOnBodyTransmitComplete+0x10>)
 80233ea:	f7fe fc35 	bl	8021c58 <_ZN11QueueSender14FinishTransmitEv>
}
 80233ee:	bf00      	nop
 80233f0:	bd80      	pop	{r7, pc}
 80233f2:	bf00      	nop
 80233f4:	24000e74 	.word	0x24000e74

080233f8 <MotherboardOnBodyTimerTick>:
void MotherboardOnBodyTimerTick() {
 80233f8:	b580      	push	{r7, lr}
 80233fa:	af00      	add	r7, sp, #0
	mbCtx.Body.TickTimer();
 80233fc:	4802      	ldr	r0, [pc, #8]	; (8023408 <MotherboardOnBodyTimerTick+0x10>)
 80233fe:	f7fd feb3 	bl	8021168 <_ZN11QueueSender9TickTimerEv>
}
 8023402:	bf00      	nop
 8023404:	bd80      	pop	{r7, pc}
 8023406:	bf00      	nop
 8023408:	24000e74 	.word	0x24000e74

0802340c <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 802340c:	b480      	push	{r7}
 802340e:	af00      	add	r7, sp, #0
	mbCtx.UpdateIMU = true;
 8023410:	4b05      	ldr	r3, [pc, #20]	; (8023428 <MotherboardOnImuTimerTick+0x1c>)
 8023412:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8023416:	2201      	movs	r2, #1
 8023418:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
}
 802341c:	bf00      	nop
 802341e:	46bd      	mov	sp, r7
 8023420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023424:	4770      	bx	lr
 8023426:	bf00      	nop
 8023428:	240001d0 	.word	0x240001d0

0802342c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>:
	bool Push(const T &rhs) {
 802342c:	b580      	push	{r7, lr}
 802342e:	b082      	sub	sp, #8
 8023430:	af00      	add	r7, sp, #0
 8023432:	6078      	str	r0, [r7, #4]
 8023434:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 8023436:	687b      	ldr	r3, [r7, #4]
 8023438:	681b      	ldr	r3, [r3, #0]
 802343a:	2b0a      	cmp	r3, #10
 802343c:	d105      	bne.n	802344a <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x1e>
 802343e:	4b18      	ldr	r3, [pc, #96]	; (80234a0 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x74>)
 8023440:	4a18      	ldr	r2, [pc, #96]	; (80234a4 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x78>)
 8023442:	2145      	movs	r1, #69	; 0x45
 8023444:	4818      	ldr	r0, [pc, #96]	; (80234a8 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x7c>)
 8023446:	f01c febf 	bl	80401c8 <__assert_func>
		Buffer[Head] = rhs;
 802344a:	687b      	ldr	r3, [r7, #4]
 802344c:	f103 020c 	add.w	r2, r3, #12
 8023450:	687b      	ldr	r3, [r7, #4]
 8023452:	685b      	ldr	r3, [r3, #4]
 8023454:	4619      	mov	r1, r3
 8023456:	4610      	mov	r0, r2
 8023458:	f000 fe75 	bl	8024146 <_ZNSt5arrayI8ResponceLj10EEixEj>
 802345c:	4602      	mov	r2, r0
 802345e:	683b      	ldr	r3, [r7, #0]
 8023460:	4610      	mov	r0, r2
 8023462:	4619      	mov	r1, r3
 8023464:	f44f 7384 	mov.w	r3, #264	; 0x108
 8023468:	461a      	mov	r2, r3
 802346a:	f01c ff17 	bl	804029c <memcpy>
		Head = (Head + 1) % Capacity;
 802346e:	687b      	ldr	r3, [r7, #4]
 8023470:	685b      	ldr	r3, [r3, #4]
 8023472:	1c59      	adds	r1, r3, #1
 8023474:	4b0d      	ldr	r3, [pc, #52]	; (80234ac <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x80>)
 8023476:	fba3 2301 	umull	r2, r3, r3, r1
 802347a:	08da      	lsrs	r2, r3, #3
 802347c:	4613      	mov	r3, r2
 802347e:	009b      	lsls	r3, r3, #2
 8023480:	4413      	add	r3, r2
 8023482:	005b      	lsls	r3, r3, #1
 8023484:	1aca      	subs	r2, r1, r3
 8023486:	687b      	ldr	r3, [r7, #4]
 8023488:	605a      	str	r2, [r3, #4]
		Size++;
 802348a:	687b      	ldr	r3, [r7, #4]
 802348c:	681b      	ldr	r3, [r3, #0]
 802348e:	1c5a      	adds	r2, r3, #1
 8023490:	687b      	ldr	r3, [r7, #4]
 8023492:	601a      	str	r2, [r3, #0]
		return true;
 8023494:	2301      	movs	r3, #1
	}
 8023496:	4618      	mov	r0, r3
 8023498:	3708      	adds	r7, #8
 802349a:	46bd      	mov	sp, r7
 802349c:	bd80      	pop	{r7, pc}
 802349e:	bf00      	nop
 80234a0:	08041aa8 	.word	0x08041aa8
 80234a4:	08041abc 	.word	0x08041abc
 80234a8:	080413d0 	.word	0x080413d0
 80234ac:	cccccccd 	.word	0xcccccccd

080234b0 <_ZNK10FixedQueueI8ResponceLj10EE5EmptyEv>:
	bool Empty() const {
 80234b0:	b480      	push	{r7}
 80234b2:	b083      	sub	sp, #12
 80234b4:	af00      	add	r7, sp, #0
 80234b6:	6078      	str	r0, [r7, #4]
		return Size == 0;
 80234b8:	687b      	ldr	r3, [r7, #4]
 80234ba:	681b      	ldr	r3, [r3, #0]
 80234bc:	2b00      	cmp	r3, #0
 80234be:	bf0c      	ite	eq
 80234c0:	2301      	moveq	r3, #1
 80234c2:	2300      	movne	r3, #0
 80234c4:	b2db      	uxtb	r3, r3
	}
 80234c6:	4618      	mov	r0, r3
 80234c8:	370c      	adds	r7, #12
 80234ca:	46bd      	mov	sp, r7
 80234cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234d0:	4770      	bx	lr
	...

080234d4 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv>:
	const T& Front() const {
 80234d4:	b580      	push	{r7, lr}
 80234d6:	b082      	sub	sp, #8
 80234d8:	af00      	add	r7, sp, #0
 80234da:	6078      	str	r0, [r7, #4]
		assert(Size);
 80234dc:	687b      	ldr	r3, [r7, #4]
 80234de:	681b      	ldr	r3, [r3, #0]
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d105      	bne.n	80234f0 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x1c>
 80234e4:	4b09      	ldr	r3, [pc, #36]	; (802350c <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x38>)
 80234e6:	4a0a      	ldr	r2, [pc, #40]	; (8023510 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x3c>)
 80234e8:	2156      	movs	r1, #86	; 0x56
 80234ea:	480a      	ldr	r0, [pc, #40]	; (8023514 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x40>)
 80234ec:	f01c fe6c 	bl	80401c8 <__assert_func>
		return Buffer[Tail];
 80234f0:	687b      	ldr	r3, [r7, #4]
 80234f2:	f103 020c 	add.w	r2, r3, #12
 80234f6:	687b      	ldr	r3, [r7, #4]
 80234f8:	689b      	ldr	r3, [r3, #8]
 80234fa:	4619      	mov	r1, r3
 80234fc:	4610      	mov	r0, r2
 80234fe:	f000 fe31 	bl	8024164 <_ZNKSt5arrayI8ResponceLj10EEixEj>
 8023502:	4603      	mov	r3, r0
	}
 8023504:	4618      	mov	r0, r3
 8023506:	3708      	adds	r7, #8
 8023508:	46bd      	mov	sp, r7
 802350a:	bd80      	pop	{r7, pc}
 802350c:	08041b1c 	.word	0x08041b1c
 8023510:	08041b24 	.word	0x08041b24
 8023514:	080413d0 	.word	0x080413d0

08023518 <_ZN10FixedQueueI8ResponceLj10EE3PopEv>:
	bool Pop() {
 8023518:	b580      	push	{r7, lr}
 802351a:	b082      	sub	sp, #8
 802351c:	af00      	add	r7, sp, #0
 802351e:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8023520:	687b      	ldr	r3, [r7, #4]
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	2b00      	cmp	r3, #0
 8023526:	d105      	bne.n	8023534 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x1c>
 8023528:	4b0e      	ldr	r3, [pc, #56]	; (8023564 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x4c>)
 802352a:	4a0f      	ldr	r2, [pc, #60]	; (8023568 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x50>)
 802352c:	214f      	movs	r1, #79	; 0x4f
 802352e:	480f      	ldr	r0, [pc, #60]	; (802356c <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x54>)
 8023530:	f01c fe4a 	bl	80401c8 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8023534:	687b      	ldr	r3, [r7, #4]
 8023536:	689b      	ldr	r3, [r3, #8]
 8023538:	1c59      	adds	r1, r3, #1
 802353a:	4b0d      	ldr	r3, [pc, #52]	; (8023570 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x58>)
 802353c:	fba3 2301 	umull	r2, r3, r3, r1
 8023540:	08da      	lsrs	r2, r3, #3
 8023542:	4613      	mov	r3, r2
 8023544:	009b      	lsls	r3, r3, #2
 8023546:	4413      	add	r3, r2
 8023548:	005b      	lsls	r3, r3, #1
 802354a:	1aca      	subs	r2, r1, r3
 802354c:	687b      	ldr	r3, [r7, #4]
 802354e:	609a      	str	r2, [r3, #8]
		Size--;
 8023550:	687b      	ldr	r3, [r7, #4]
 8023552:	681b      	ldr	r3, [r3, #0]
 8023554:	1e5a      	subs	r2, r3, #1
 8023556:	687b      	ldr	r3, [r7, #4]
 8023558:	601a      	str	r2, [r3, #0]
		return true;
 802355a:	2301      	movs	r3, #1
	}
 802355c:	4618      	mov	r0, r3
 802355e:	3708      	adds	r7, #8
 8023560:	46bd      	mov	sp, r7
 8023562:	bd80      	pop	{r7, pc}
 8023564:	08041b84 	.word	0x08041b84
 8023568:	08041b90 	.word	0x08041b90
 802356c:	080413d0 	.word	0x080413d0
 8023570:	cccccccd 	.word	0xcccccccd

08023574 <_ZNSt5arrayIhLj256EE4dataEv>:
      data() noexcept
 8023574:	b580      	push	{r7, lr}
 8023576:	b082      	sub	sp, #8
 8023578:	af00      	add	r7, sp, #0
 802357a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 802357c:	687b      	ldr	r3, [r7, #4]
 802357e:	4618      	mov	r0, r3
 8023580:	f000 fdff 	bl	8024182 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 8023584:	4603      	mov	r3, r0
 8023586:	4618      	mov	r0, r3
 8023588:	3708      	adds	r7, #8
 802358a:	46bd      	mov	sp, r7
 802358c:	bd80      	pop	{r7, pc}

0802358e <_ZNKSt5arrayIhLj256EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 802358e:	b580      	push	{r7, lr}
 8023590:	b082      	sub	sp, #8
 8023592:	af00      	add	r7, sp, #0
 8023594:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8023596:	687b      	ldr	r3, [r7, #4]
 8023598:	4618      	mov	r0, r3
 802359a:	f000 fdf2 	bl	8024182 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 802359e:	4603      	mov	r3, r0
 80235a0:	4618      	mov	r0, r3
 80235a2:	3708      	adds	r7, #8
 80235a4:	46bd      	mov	sp, r7
 80235a6:	bd80      	pop	{r7, pc}

080235a8 <_ZNK10FixedQueueI7RequestLj500EE5EmptyEv>:
	bool Empty() const {
 80235a8:	b480      	push	{r7}
 80235aa:	b083      	sub	sp, #12
 80235ac:	af00      	add	r7, sp, #0
 80235ae:	6078      	str	r0, [r7, #4]
		return Size == 0;
 80235b0:	687b      	ldr	r3, [r7, #4]
 80235b2:	681b      	ldr	r3, [r3, #0]
 80235b4:	2b00      	cmp	r3, #0
 80235b6:	bf0c      	ite	eq
 80235b8:	2301      	moveq	r3, #1
 80235ba:	2300      	movne	r3, #0
 80235bc:	b2db      	uxtb	r3, r3
	}
 80235be:	4618      	mov	r0, r3
 80235c0:	370c      	adds	r7, #12
 80235c2:	46bd      	mov	sp, r7
 80235c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235c8:	4770      	bx	lr
	...

080235cc <_ZNK10FixedQueueI7RequestLj500EE5FrontEv>:
	const T& Front() const {
 80235cc:	b580      	push	{r7, lr}
 80235ce:	b082      	sub	sp, #8
 80235d0:	af00      	add	r7, sp, #0
 80235d2:	6078      	str	r0, [r7, #4]
		assert(Size);
 80235d4:	687b      	ldr	r3, [r7, #4]
 80235d6:	681b      	ldr	r3, [r3, #0]
 80235d8:	2b00      	cmp	r3, #0
 80235da:	d105      	bne.n	80235e8 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x1c>
 80235dc:	4b09      	ldr	r3, [pc, #36]	; (8023604 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x38>)
 80235de:	4a0a      	ldr	r2, [pc, #40]	; (8023608 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x3c>)
 80235e0:	2156      	movs	r1, #86	; 0x56
 80235e2:	480a      	ldr	r0, [pc, #40]	; (802360c <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x40>)
 80235e4:	f01c fdf0 	bl	80401c8 <__assert_func>
		return Buffer[Tail];
 80235e8:	687b      	ldr	r3, [r7, #4]
 80235ea:	f103 020c 	add.w	r2, r3, #12
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	689b      	ldr	r3, [r3, #8]
 80235f2:	4619      	mov	r1, r3
 80235f4:	4610      	mov	r0, r2
 80235f6:	f000 fdcf 	bl	8024198 <_ZNKSt5arrayI7RequestLj500EEixEj>
 80235fa:	4603      	mov	r3, r0
	}
 80235fc:	4618      	mov	r0, r3
 80235fe:	3708      	adds	r7, #8
 8023600:	46bd      	mov	sp, r7
 8023602:	bd80      	pop	{r7, pc}
 8023604:	08041b1c 	.word	0x08041b1c
 8023608:	08041be4 	.word	0x08041be4
 802360c:	080413d0 	.word	0x080413d0

08023610 <_ZN10FixedQueueI7RequestLj500EE3PopEv>:
	bool Pop() {
 8023610:	b580      	push	{r7, lr}
 8023612:	b082      	sub	sp, #8
 8023614:	af00      	add	r7, sp, #0
 8023616:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8023618:	687b      	ldr	r3, [r7, #4]
 802361a:	681b      	ldr	r3, [r3, #0]
 802361c:	2b00      	cmp	r3, #0
 802361e:	d105      	bne.n	802362c <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x1c>
 8023620:	4b0e      	ldr	r3, [pc, #56]	; (802365c <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x4c>)
 8023622:	4a0f      	ldr	r2, [pc, #60]	; (8023660 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x50>)
 8023624:	214f      	movs	r1, #79	; 0x4f
 8023626:	480f      	ldr	r0, [pc, #60]	; (8023664 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x54>)
 8023628:	f01c fdce 	bl	80401c8 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 802362c:	687b      	ldr	r3, [r7, #4]
 802362e:	689b      	ldr	r3, [r3, #8]
 8023630:	1c5a      	adds	r2, r3, #1
 8023632:	4b0d      	ldr	r3, [pc, #52]	; (8023668 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x58>)
 8023634:	fba3 1302 	umull	r1, r3, r3, r2
 8023638:	095b      	lsrs	r3, r3, #5
 802363a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 802363e:	fb01 f303 	mul.w	r3, r1, r3
 8023642:	1ad3      	subs	r3, r2, r3
 8023644:	687a      	ldr	r2, [r7, #4]
 8023646:	6093      	str	r3, [r2, #8]
		Size--;
 8023648:	687b      	ldr	r3, [r7, #4]
 802364a:	681b      	ldr	r3, [r3, #0]
 802364c:	1e5a      	subs	r2, r3, #1
 802364e:	687b      	ldr	r3, [r7, #4]
 8023650:	601a      	str	r2, [r3, #0]
		return true;
 8023652:	2301      	movs	r3, #1
	}
 8023654:	4618      	mov	r0, r3
 8023656:	3708      	adds	r7, #8
 8023658:	46bd      	mov	sp, r7
 802365a:	bd80      	pop	{r7, pc}
 802365c:	08041b84 	.word	0x08041b84
 8023660:	08041c44 	.word	0x08041c44
 8023664:	080413d0 	.word	0x080413d0
 8023668:	10624dd3 	.word	0x10624dd3

0802366c <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 802366c:	b480      	push	{r7}
 802366e:	b083      	sub	sp, #12
 8023670:	af00      	add	r7, sp, #0
 8023672:	6078      	str	r0, [r7, #4]
 8023674:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8023676:	687a      	ldr	r2, [r7, #4]
 8023678:	683b      	ldr	r3, [r7, #0]
 802367a:	4413      	add	r3, r2
 802367c:	4618      	mov	r0, r3
 802367e:	370c      	adds	r7, #12
 8023680:	46bd      	mov	sp, r7
 8023682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023686:	4770      	bx	lr

08023688 <_ZNK10FixedQueueI7RequestLj500EE4FullEv>:
	bool Full() const {
 8023688:	b480      	push	{r7}
 802368a:	b083      	sub	sp, #12
 802368c:	af00      	add	r7, sp, #0
 802368e:	6078      	str	r0, [r7, #4]
		return Size == Capacity;
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	681b      	ldr	r3, [r3, #0]
 8023694:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8023698:	bf0c      	ite	eq
 802369a:	2301      	moveq	r3, #1
 802369c:	2300      	movne	r3, #0
 802369e:	b2db      	uxtb	r3, r3
	}
 80236a0:	4618      	mov	r0, r3
 80236a2:	370c      	adds	r7, #12
 80236a4:	46bd      	mov	sp, r7
 80236a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236aa:	4770      	bx	lr

080236ac <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_>:
	bool Push(const T &rhs) {
 80236ac:	b580      	push	{r7, lr}
 80236ae:	b082      	sub	sp, #8
 80236b0:	af00      	add	r7, sp, #0
 80236b2:	6078      	str	r0, [r7, #4]
 80236b4:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 80236b6:	687b      	ldr	r3, [r7, #4]
 80236b8:	681b      	ldr	r3, [r3, #0]
 80236ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80236be:	d105      	bne.n	80236cc <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x20>
 80236c0:	4b17      	ldr	r3, [pc, #92]	; (8023720 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x74>)
 80236c2:	4a18      	ldr	r2, [pc, #96]	; (8023724 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x78>)
 80236c4:	2145      	movs	r1, #69	; 0x45
 80236c6:	4818      	ldr	r0, [pc, #96]	; (8023728 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x7c>)
 80236c8:	f01c fd7e 	bl	80401c8 <__assert_func>
		Buffer[Head] = rhs;
 80236cc:	687b      	ldr	r3, [r7, #4]
 80236ce:	f103 020c 	add.w	r2, r3, #12
 80236d2:	687b      	ldr	r3, [r7, #4]
 80236d4:	685b      	ldr	r3, [r3, #4]
 80236d6:	4619      	mov	r1, r3
 80236d8:	4610      	mov	r0, r2
 80236da:	f000 fd6c 	bl	80241b6 <_ZNSt5arrayI7RequestLj500EEixEj>
 80236de:	4602      	mov	r2, r0
 80236e0:	683b      	ldr	r3, [r7, #0]
 80236e2:	4610      	mov	r0, r2
 80236e4:	4619      	mov	r1, r3
 80236e6:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80236ea:	461a      	mov	r2, r3
 80236ec:	f01c fdd6 	bl	804029c <memcpy>
		Head = (Head + 1) % Capacity;
 80236f0:	687b      	ldr	r3, [r7, #4]
 80236f2:	685b      	ldr	r3, [r3, #4]
 80236f4:	1c5a      	adds	r2, r3, #1
 80236f6:	4b0d      	ldr	r3, [pc, #52]	; (802372c <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x80>)
 80236f8:	fba3 1302 	umull	r1, r3, r3, r2
 80236fc:	095b      	lsrs	r3, r3, #5
 80236fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8023702:	fb01 f303 	mul.w	r3, r1, r3
 8023706:	1ad3      	subs	r3, r2, r3
 8023708:	687a      	ldr	r2, [r7, #4]
 802370a:	6053      	str	r3, [r2, #4]
		Size++;
 802370c:	687b      	ldr	r3, [r7, #4]
 802370e:	681b      	ldr	r3, [r3, #0]
 8023710:	1c5a      	adds	r2, r3, #1
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	601a      	str	r2, [r3, #0]
		return true;
 8023716:	2301      	movs	r3, #1
	}
 8023718:	4618      	mov	r0, r3
 802371a:	3708      	adds	r7, #8
 802371c:	46bd      	mov	sp, r7
 802371e:	bd80      	pop	{r7, pc}
 8023720:	08041aa8 	.word	0x08041aa8
 8023724:	08041c98 	.word	0x08041c98
 8023728:	080413d0 	.word	0x080413d0
 802372c:	10624dd3 	.word	0x10624dd3

08023730 <_ZNK10FixedQueueI7RequestLj500EE7GetSizeEv>:
	size_t GetSize() const {
 8023730:	b480      	push	{r7}
 8023732:	b083      	sub	sp, #12
 8023734:	af00      	add	r7, sp, #0
 8023736:	6078      	str	r0, [r7, #4]
		return Size;
 8023738:	687b      	ldr	r3, [r7, #4]
 802373a:	681b      	ldr	r3, [r3, #0]
	}
 802373c:	4618      	mov	r0, r3
 802373e:	370c      	adds	r7, #12
 8023740:	46bd      	mov	sp, r7
 8023742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023746:	4770      	bx	lr

08023748 <_ZNK10FixedQueueI8ResponceLj10EE7GetSizeEv>:
	size_t GetSize() const {
 8023748:	b480      	push	{r7}
 802374a:	b083      	sub	sp, #12
 802374c:	af00      	add	r7, sp, #0
 802374e:	6078      	str	r0, [r7, #4]
		return Size;
 8023750:	687b      	ldr	r3, [r7, #4]
 8023752:	681b      	ldr	r3, [r3, #0]
	}
 8023754:	4618      	mov	r0, r3
 8023756:	370c      	adds	r7, #12
 8023758:	46bd      	mov	sp, r7
 802375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802375e:	4770      	bx	lr

08023760 <_ZNK10FixedQueueI7RequestLj10EE5EmptyEv>:
	bool Empty() const {
 8023760:	b480      	push	{r7}
 8023762:	b083      	sub	sp, #12
 8023764:	af00      	add	r7, sp, #0
 8023766:	6078      	str	r0, [r7, #4]
		return Size == 0;
 8023768:	687b      	ldr	r3, [r7, #4]
 802376a:	681b      	ldr	r3, [r3, #0]
 802376c:	2b00      	cmp	r3, #0
 802376e:	bf0c      	ite	eq
 8023770:	2301      	moveq	r3, #1
 8023772:	2300      	movne	r3, #0
 8023774:	b2db      	uxtb	r3, r3
	}
 8023776:	4618      	mov	r0, r3
 8023778:	370c      	adds	r7, #12
 802377a:	46bd      	mov	sp, r7
 802377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023780:	4770      	bx	lr
	...

08023784 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv>:
	const T& Front() const {
 8023784:	b580      	push	{r7, lr}
 8023786:	b082      	sub	sp, #8
 8023788:	af00      	add	r7, sp, #0
 802378a:	6078      	str	r0, [r7, #4]
		assert(Size);
 802378c:	687b      	ldr	r3, [r7, #4]
 802378e:	681b      	ldr	r3, [r3, #0]
 8023790:	2b00      	cmp	r3, #0
 8023792:	d105      	bne.n	80237a0 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x1c>
 8023794:	4b09      	ldr	r3, [pc, #36]	; (80237bc <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x38>)
 8023796:	4a0a      	ldr	r2, [pc, #40]	; (80237c0 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x3c>)
 8023798:	2156      	movs	r1, #86	; 0x56
 802379a:	480a      	ldr	r0, [pc, #40]	; (80237c4 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x40>)
 802379c:	f01c fd14 	bl	80401c8 <__assert_func>
		return Buffer[Tail];
 80237a0:	687b      	ldr	r3, [r7, #4]
 80237a2:	f103 020c 	add.w	r2, r3, #12
 80237a6:	687b      	ldr	r3, [r7, #4]
 80237a8:	689b      	ldr	r3, [r3, #8]
 80237aa:	4619      	mov	r1, r3
 80237ac:	4610      	mov	r0, r2
 80237ae:	f000 fd11 	bl	80241d4 <_ZNKSt5arrayI7RequestLj10EEixEj>
 80237b2:	4603      	mov	r3, r0
	}
 80237b4:	4618      	mov	r0, r3
 80237b6:	3708      	adds	r7, #8
 80237b8:	46bd      	mov	sp, r7
 80237ba:	bd80      	pop	{r7, pc}
 80237bc:	08041b1c 	.word	0x08041b1c
 80237c0:	08041cf8 	.word	0x08041cf8
 80237c4:	080413d0 	.word	0x080413d0

080237c8 <_ZN10FixedQueueI7RequestLj10EE3PopEv>:
	bool Pop() {
 80237c8:	b580      	push	{r7, lr}
 80237ca:	b082      	sub	sp, #8
 80237cc:	af00      	add	r7, sp, #0
 80237ce:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 80237d0:	687b      	ldr	r3, [r7, #4]
 80237d2:	681b      	ldr	r3, [r3, #0]
 80237d4:	2b00      	cmp	r3, #0
 80237d6:	d105      	bne.n	80237e4 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x1c>
 80237d8:	4b0e      	ldr	r3, [pc, #56]	; (8023814 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x4c>)
 80237da:	4a0f      	ldr	r2, [pc, #60]	; (8023818 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x50>)
 80237dc:	214f      	movs	r1, #79	; 0x4f
 80237de:	480f      	ldr	r0, [pc, #60]	; (802381c <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x54>)
 80237e0:	f01c fcf2 	bl	80401c8 <__assert_func>
		Tail = (Tail + 1) % Capacity;
 80237e4:	687b      	ldr	r3, [r7, #4]
 80237e6:	689b      	ldr	r3, [r3, #8]
 80237e8:	1c59      	adds	r1, r3, #1
 80237ea:	4b0d      	ldr	r3, [pc, #52]	; (8023820 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x58>)
 80237ec:	fba3 2301 	umull	r2, r3, r3, r1
 80237f0:	08da      	lsrs	r2, r3, #3
 80237f2:	4613      	mov	r3, r2
 80237f4:	009b      	lsls	r3, r3, #2
 80237f6:	4413      	add	r3, r2
 80237f8:	005b      	lsls	r3, r3, #1
 80237fa:	1aca      	subs	r2, r1, r3
 80237fc:	687b      	ldr	r3, [r7, #4]
 80237fe:	609a      	str	r2, [r3, #8]
		Size--;
 8023800:	687b      	ldr	r3, [r7, #4]
 8023802:	681b      	ldr	r3, [r3, #0]
 8023804:	1e5a      	subs	r2, r3, #1
 8023806:	687b      	ldr	r3, [r7, #4]
 8023808:	601a      	str	r2, [r3, #0]
		return true;
 802380a:	2301      	movs	r3, #1
	}
 802380c:	4618      	mov	r0, r3
 802380e:	3708      	adds	r7, #8
 8023810:	46bd      	mov	sp, r7
 8023812:	bd80      	pop	{r7, pc}
 8023814:	08041b84 	.word	0x08041b84
 8023818:	08041d58 	.word	0x08041d58
 802381c:	080413d0 	.word	0x080413d0
 8023820:	cccccccd 	.word	0xcccccccd

08023824 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_>:
	bool Push(const T &rhs) {
 8023824:	b580      	push	{r7, lr}
 8023826:	b082      	sub	sp, #8
 8023828:	af00      	add	r7, sp, #0
 802382a:	6078      	str	r0, [r7, #4]
 802382c:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 802382e:	687b      	ldr	r3, [r7, #4]
 8023830:	681b      	ldr	r3, [r3, #0]
 8023832:	2b0a      	cmp	r3, #10
 8023834:	d105      	bne.n	8023842 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x1e>
 8023836:	4b18      	ldr	r3, [pc, #96]	; (8023898 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x74>)
 8023838:	4a18      	ldr	r2, [pc, #96]	; (802389c <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x78>)
 802383a:	2145      	movs	r1, #69	; 0x45
 802383c:	4818      	ldr	r0, [pc, #96]	; (80238a0 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x7c>)
 802383e:	f01c fcc3 	bl	80401c8 <__assert_func>
		Buffer[Head] = rhs;
 8023842:	687b      	ldr	r3, [r7, #4]
 8023844:	f103 020c 	add.w	r2, r3, #12
 8023848:	687b      	ldr	r3, [r7, #4]
 802384a:	685b      	ldr	r3, [r3, #4]
 802384c:	4619      	mov	r1, r3
 802384e:	4610      	mov	r0, r2
 8023850:	f000 fccf 	bl	80241f2 <_ZNSt5arrayI7RequestLj10EEixEj>
 8023854:	4602      	mov	r2, r0
 8023856:	683b      	ldr	r3, [r7, #0]
 8023858:	4610      	mov	r0, r2
 802385a:	4619      	mov	r1, r3
 802385c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8023860:	461a      	mov	r2, r3
 8023862:	f01c fd1b 	bl	804029c <memcpy>
		Head = (Head + 1) % Capacity;
 8023866:	687b      	ldr	r3, [r7, #4]
 8023868:	685b      	ldr	r3, [r3, #4]
 802386a:	1c59      	adds	r1, r3, #1
 802386c:	4b0d      	ldr	r3, [pc, #52]	; (80238a4 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x80>)
 802386e:	fba3 2301 	umull	r2, r3, r3, r1
 8023872:	08da      	lsrs	r2, r3, #3
 8023874:	4613      	mov	r3, r2
 8023876:	009b      	lsls	r3, r3, #2
 8023878:	4413      	add	r3, r2
 802387a:	005b      	lsls	r3, r3, #1
 802387c:	1aca      	subs	r2, r1, r3
 802387e:	687b      	ldr	r3, [r7, #4]
 8023880:	605a      	str	r2, [r3, #4]
		Size++;
 8023882:	687b      	ldr	r3, [r7, #4]
 8023884:	681b      	ldr	r3, [r3, #0]
 8023886:	1c5a      	adds	r2, r3, #1
 8023888:	687b      	ldr	r3, [r7, #4]
 802388a:	601a      	str	r2, [r3, #0]
		return true;
 802388c:	2301      	movs	r3, #1
	}
 802388e:	4618      	mov	r0, r3
 8023890:	3708      	adds	r7, #8
 8023892:	46bd      	mov	sp, r7
 8023894:	bd80      	pop	{r7, pc}
 8023896:	bf00      	nop
 8023898:	08041aa8 	.word	0x08041aa8
 802389c:	08041dac 	.word	0x08041dac
 80238a0:	080413d0 	.word	0x080413d0
 80238a4:	cccccccd 	.word	0xcccccccd

080238a8 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 80238a8:	b580      	push	{r7, lr}
 80238aa:	b082      	sub	sp, #8
 80238ac:	af00      	add	r7, sp, #0
 80238ae:	6078      	str	r0, [r7, #4]
 80238b0:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 80238b2:	687b      	ldr	r3, [r7, #4]
 80238b4:	6839      	ldr	r1, [r7, #0]
 80238b6:	4618      	mov	r0, r3
 80238b8:	f000 fcaa 	bl	8024210 <_ZNSt5dequeIjSaIjEE9push_backERKj>
 80238bc:	bf00      	nop
 80238be:	3708      	adds	r7, #8
 80238c0:	46bd      	mov	sp, r7
 80238c2:	bd80      	pop	{r7, pc}

080238c4 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>:
      front() const
 80238c4:	b580      	push	{r7, lr}
 80238c6:	b082      	sub	sp, #8
 80238c8:	af00      	add	r7, sp, #0
 80238ca:	6078      	str	r0, [r7, #4]
	return c.front();
 80238cc:	687b      	ldr	r3, [r7, #4]
 80238ce:	4618      	mov	r0, r3
 80238d0:	f000 fcbf 	bl	8024252 <_ZNKSt5dequeIjSaIjEE5frontEv>
 80238d4:	4603      	mov	r3, r0
      }
 80238d6:	4618      	mov	r0, r3
 80238d8:	3708      	adds	r7, #8
 80238da:	46bd      	mov	sp, r7
 80238dc:	bd80      	pop	{r7, pc}

080238de <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>:
      empty() const
 80238de:	b580      	push	{r7, lr}
 80238e0:	b082      	sub	sp, #8
 80238e2:	af00      	add	r7, sp, #0
 80238e4:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80238e6:	687b      	ldr	r3, [r7, #4]
 80238e8:	4618      	mov	r0, r3
 80238ea:	f000 fcc6 	bl	802427a <_ZNKSt5dequeIjSaIjEE5emptyEv>
 80238ee:	4603      	mov	r3, r0
 80238f0:	4618      	mov	r0, r3
 80238f2:	3708      	adds	r7, #8
 80238f4:	46bd      	mov	sp, r7
 80238f6:	bd80      	pop	{r7, pc}

080238f8 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80238f8:	b580      	push	{r7, lr}
 80238fa:	b082      	sub	sp, #8
 80238fc:	af00      	add	r7, sp, #0
 80238fe:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8023900:	687b      	ldr	r3, [r7, #4]
 8023902:	4618      	mov	r0, r3
 8023904:	f000 fccb 	bl	802429e <_ZNSt5dequeIjSaIjEE9pop_frontEv>
      }
 8023908:	bf00      	nop
 802390a:	3708      	adds	r7, #8
 802390c:	46bd      	mov	sp, r7
 802390e:	bd80      	pop	{r7, pc}

08023910 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8023910:	b580      	push	{r7, lr}
 8023912:	b082      	sub	sp, #8
 8023914:	af00      	add	r7, sp, #0
 8023916:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8023918:	687b      	ldr	r3, [r7, #4]
 802391a:	f103 0218 	add.w	r2, r3, #24
 802391e:	687b      	ldr	r3, [r7, #4]
 8023920:	3308      	adds	r3, #8
 8023922:	4619      	mov	r1, r3
 8023924:	4610      	mov	r0, r2
 8023926:	f000 fcdd 	bl	80242e4 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 802392a:	4603      	mov	r3, r0
 802392c:	4618      	mov	r0, r3
 802392e:	3708      	adds	r7, #8
 8023930:	46bd      	mov	sp, r7
 8023932:	bd80      	pop	{r7, pc}

08023934 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>:
       *  element at the front of the %deque and assigns the given
       *  data to it.  Due to the nature of a %deque this operation
       *  can be done in constant time.
       */
      void
      push_front(const value_type& __x)
 8023934:	b580      	push	{r7, lr}
 8023936:	b082      	sub	sp, #8
 8023938:	af00      	add	r7, sp, #0
 802393a:	6078      	str	r0, [r7, #4]
 802393c:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 802393e:	687b      	ldr	r3, [r7, #4]
 8023940:	689a      	ldr	r2, [r3, #8]
 8023942:	687b      	ldr	r3, [r7, #4]
 8023944:	68db      	ldr	r3, [r3, #12]
 8023946:	429a      	cmp	r2, r3
 8023948:	d00e      	beq.n	8023968 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x34>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 802394a:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 802394c:	687b      	ldr	r3, [r7, #4]
 802394e:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8023950:	3b14      	subs	r3, #20
 8023952:	683a      	ldr	r2, [r7, #0]
 8023954:	4619      	mov	r1, r3
 8023956:	f000 fcd9 	bl	802430c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    --this->_M_impl._M_start._M_cur;
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	689b      	ldr	r3, [r3, #8]
 802395e:	f1a3 0214 	sub.w	r2, r3, #20
 8023962:	687b      	ldr	r3, [r7, #4]
 8023964:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_push_front_aux(__x);
      }
 8023966:	e003      	b.n	8023970 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x3c>
	  _M_push_front_aux(__x);
 8023968:	6839      	ldr	r1, [r7, #0]
 802396a:	6878      	ldr	r0, [r7, #4]
 802396c:	f000 fce2 	bl	8024334 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>
      }
 8023970:	bf00      	nop
 8023972:	3708      	adds	r7, #8
 8023974:	46bd      	mov	sp, r7
 8023976:	bd80      	pop	{r7, pc}

08023978 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8023978:	b580      	push	{r7, lr}
 802397a:	b082      	sub	sp, #8
 802397c:	af00      	add	r7, sp, #0
 802397e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	f103 0218 	add.w	r2, r3, #24
 8023986:	687b      	ldr	r3, [r7, #4]
 8023988:	3308      	adds	r3, #8
 802398a:	4619      	mov	r1, r3
 802398c:	4610      	mov	r0, r2
 802398e:	f000 fd17 	bl	80243c0 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023992:	4603      	mov	r3, r0
 8023994:	4618      	mov	r0, r3
 8023996:	3708      	adds	r7, #8
 8023998:	46bd      	mov	sp, r7
 802399a:	bd80      	pop	{r7, pc}

0802399c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 802399c:	b580      	push	{r7, lr}
 802399e:	b082      	sub	sp, #8
 80239a0:	af00      	add	r7, sp, #0
 80239a2:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 80239a4:	687b      	ldr	r3, [r7, #4]
 80239a6:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 80239a8:	687b      	ldr	r3, [r7, #4]
 80239aa:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 80239ac:	429a      	cmp	r2, r3
 80239ae:	d011      	beq.n	80239d4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 80239b0:	687b      	ldr	r3, [r7, #4]
 80239b2:	699b      	ldr	r3, [r3, #24]
 80239b4:	f1a3 0214 	sub.w	r2, r3, #20
 80239b8:	687b      	ldr	r3, [r7, #4]
 80239ba:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80239bc:	687b      	ldr	r3, [r7, #4]
 80239be:	4618      	mov	r0, r3
 80239c0:	f000 fd2a 	bl	8024418 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80239c4:	4602      	mov	r2, r0
 80239c6:	687b      	ldr	r3, [r7, #4]
 80239c8:	699b      	ldr	r3, [r3, #24]
 80239ca:	4619      	mov	r1, r3
 80239cc:	4610      	mov	r0, r2
 80239ce:	f000 fd2e 	bl	802442e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 80239d2:	e002      	b.n	80239da <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 80239d4:	6878      	ldr	r0, [r7, #4]
 80239d6:	f000 fd37 	bl	8024448 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>
      }
 80239da:	bf00      	nop
 80239dc:	3708      	adds	r7, #8
 80239de:	46bd      	mov	sp, r7
 80239e0:	bd80      	pop	{r7, pc}

080239e2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 80239e2:	b580      	push	{r7, lr}
 80239e4:	b086      	sub	sp, #24
 80239e6:	af00      	add	r7, sp, #0
 80239e8:	6078      	str	r0, [r7, #4]
	return *begin();
 80239ea:	f107 0308 	add.w	r3, r7, #8
 80239ee:	6879      	ldr	r1, [r7, #4]
 80239f0:	4618      	mov	r0, r3
 80239f2:	f000 fd53 	bl	802449c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 80239f6:	f107 0308 	add.w	r3, r7, #8
 80239fa:	4618      	mov	r0, r3
 80239fc:	f000 fd5d 	bl	80244ba <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>
 8023a00:	4603      	mov	r3, r0
      }
 8023a02:	4618      	mov	r0, r3
 8023a04:	3718      	adds	r7, #24
 8023a06:	46bd      	mov	sp, r7
 8023a08:	bd80      	pop	{r7, pc}

08023a0a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8023a0a:	b580      	push	{r7, lr}
 8023a0c:	b082      	sub	sp, #8
 8023a0e:	af00      	add	r7, sp, #0
 8023a10:	6078      	str	r0, [r7, #4]
 8023a12:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	3308      	adds	r3, #8
 8023a18:	683a      	ldr	r2, [r7, #0]
 8023a1a:	4611      	mov	r1, r2
 8023a1c:	4618      	mov	r0, r3
 8023a1e:	f000 fd58 	bl	80244d2 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>
 8023a22:	4603      	mov	r3, r0
      }
 8023a24:	4618      	mov	r0, r3
 8023a26:	3708      	adds	r7, #8
 8023a28:	46bd      	mov	sp, r7
 8023a2a:	bd80      	pop	{r7, pc}

08023a2c <_ZNSt5dequeI8IMUFrameSaIS0_EEC1Ev>:
      deque() = default;
 8023a2c:	b580      	push	{r7, lr}
 8023a2e:	b082      	sub	sp, #8
 8023a30:	af00      	add	r7, sp, #0
 8023a32:	6078      	str	r0, [r7, #4]
 8023a34:	687b      	ldr	r3, [r7, #4]
 8023a36:	4618      	mov	r0, r3
 8023a38:	f000 fd6d 	bl	8024516 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EEC1Ev>
 8023a3c:	687b      	ldr	r3, [r7, #4]
 8023a3e:	4618      	mov	r0, r3
 8023a40:	3708      	adds	r7, #8
 8023a42:	46bd      	mov	sp, r7
 8023a44:	bd80      	pop	{r7, pc}

08023a46 <_ZN14FrameContainerI8IMUFrameEC1Et>:
	FrameContainer(uint16_t maxFrames) :
 8023a46:	b580      	push	{r7, lr}
 8023a48:	b082      	sub	sp, #8
 8023a4a:	af00      	add	r7, sp, #0
 8023a4c:	6078      	str	r0, [r7, #4]
 8023a4e:	460b      	mov	r3, r1
 8023a50:	807b      	strh	r3, [r7, #2]
			MaxFrames { maxFrames } {
 8023a52:	687b      	ldr	r3, [r7, #4]
 8023a54:	4618      	mov	r0, r3
 8023a56:	f7ff ffe9 	bl	8023a2c <_ZNSt5dequeI8IMUFrameSaIS0_EEC1Ev>
 8023a5a:	687b      	ldr	r3, [r7, #4]
 8023a5c:	2200      	movs	r2, #0
 8023a5e:	851a      	strh	r2, [r3, #40]	; 0x28
 8023a60:	687b      	ldr	r3, [r7, #4]
 8023a62:	887a      	ldrh	r2, [r7, #2]
 8023a64:	855a      	strh	r2, [r3, #42]	; 0x2a
	}
 8023a66:	687b      	ldr	r3, [r7, #4]
 8023a68:	4618      	mov	r0, r3
 8023a6a:	3708      	adds	r7, #8
 8023a6c:	46bd      	mov	sp, r7
 8023a6e:	bd80      	pop	{r7, pc}

08023a70 <_ZNSt5dequeI14ServoDataFrameSaIS0_EEC1Ev>:
 8023a70:	b580      	push	{r7, lr}
 8023a72:	b082      	sub	sp, #8
 8023a74:	af00      	add	r7, sp, #0
 8023a76:	6078      	str	r0, [r7, #4]
 8023a78:	687b      	ldr	r3, [r7, #4]
 8023a7a:	4618      	mov	r0, r3
 8023a7c:	f000 fd8a 	bl	8024594 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EEC1Ev>
 8023a80:	687b      	ldr	r3, [r7, #4]
 8023a82:	4618      	mov	r0, r3
 8023a84:	3708      	adds	r7, #8
 8023a86:	46bd      	mov	sp, r7
 8023a88:	bd80      	pop	{r7, pc}

08023a8a <_ZN14FrameContainerI14ServoDataFrameEC1Et>:
	FrameContainer(uint16_t maxFrames) :
 8023a8a:	b580      	push	{r7, lr}
 8023a8c:	b082      	sub	sp, #8
 8023a8e:	af00      	add	r7, sp, #0
 8023a90:	6078      	str	r0, [r7, #4]
 8023a92:	460b      	mov	r3, r1
 8023a94:	807b      	strh	r3, [r7, #2]
			MaxFrames { maxFrames } {
 8023a96:	687b      	ldr	r3, [r7, #4]
 8023a98:	4618      	mov	r0, r3
 8023a9a:	f7ff ffe9 	bl	8023a70 <_ZNSt5dequeI14ServoDataFrameSaIS0_EEC1Ev>
 8023a9e:	687b      	ldr	r3, [r7, #4]
 8023aa0:	2200      	movs	r2, #0
 8023aa2:	851a      	strh	r2, [r3, #40]	; 0x28
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	887a      	ldrh	r2, [r7, #2]
 8023aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
	}
 8023aaa:	687b      	ldr	r3, [r7, #4]
 8023aac:	4618      	mov	r0, r3
 8023aae:	3708      	adds	r7, #8
 8023ab0:	46bd      	mov	sp, r7
 8023ab2:	bd80      	pop	{r7, pc}

08023ab4 <_ZNSt5dequeI8IMUFrameSaIS0_EED1Ev>:
      ~deque()
 8023ab4:	b580      	push	{r7, lr}
 8023ab6:	b08a      	sub	sp, #40	; 0x28
 8023ab8:	af00      	add	r7, sp, #0
 8023aba:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023abc:	f107 0308 	add.w	r3, r7, #8
 8023ac0:	6879      	ldr	r1, [r7, #4]
 8023ac2:	4618      	mov	r0, r3
 8023ac4:	f000 fd99 	bl	80245fa <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8023ac8:	f107 0318 	add.w	r3, r7, #24
 8023acc:	6879      	ldr	r1, [r7, #4]
 8023ace:	4618      	mov	r0, r3
 8023ad0:	f000 fda2 	bl	8024618 <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 8023ad4:	687b      	ldr	r3, [r7, #4]
 8023ad6:	4618      	mov	r0, r3
 8023ad8:	f000 fdad 	bl	8024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8023adc:	4603      	mov	r3, r0
 8023ade:	f107 0218 	add.w	r2, r7, #24
 8023ae2:	f107 0108 	add.w	r1, r7, #8
 8023ae6:	6878      	ldr	r0, [r7, #4]
 8023ae8:	f000 fdcc 	bl	8024684 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8023aec:	687b      	ldr	r3, [r7, #4]
 8023aee:	4618      	mov	r0, r3
 8023af0:	f000 fd22 	bl	8024538 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev>
 8023af4:	687b      	ldr	r3, [r7, #4]
 8023af6:	4618      	mov	r0, r3
 8023af8:	3728      	adds	r7, #40	; 0x28
 8023afa:	46bd      	mov	sp, r7
 8023afc:	bd80      	pop	{r7, pc}

08023afe <_ZNSt5dequeI14ServoDataFrameSaIS0_EED1Ev>:
      ~deque()
 8023afe:	b580      	push	{r7, lr}
 8023b00:	b08a      	sub	sp, #40	; 0x28
 8023b02:	af00      	add	r7, sp, #0
 8023b04:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023b06:	f107 0308 	add.w	r3, r7, #8
 8023b0a:	6879      	ldr	r1, [r7, #4]
 8023b0c:	4618      	mov	r0, r3
 8023b0e:	f000 fdc6 	bl	802469e <_ZNSt5dequeI14ServoDataFrameSaIS0_EE5beginEv>
 8023b12:	f107 0318 	add.w	r3, r7, #24
 8023b16:	6879      	ldr	r1, [r7, #4]
 8023b18:	4618      	mov	r0, r3
 8023b1a:	f000 fdcf 	bl	80246bc <_ZNSt5dequeI14ServoDataFrameSaIS0_EE3endEv>
 8023b1e:	687b      	ldr	r3, [r7, #4]
 8023b20:	4618      	mov	r0, r3
 8023b22:	f000 fdda 	bl	80246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8023b26:	4603      	mov	r3, r0
 8023b28:	f107 0218 	add.w	r2, r7, #24
 8023b2c:	f107 0108 	add.w	r1, r7, #8
 8023b30:	6878      	ldr	r0, [r7, #4]
 8023b32:	f000 fdf9 	bl	8024728 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8023b36:	687b      	ldr	r3, [r7, #4]
 8023b38:	4618      	mov	r0, r3
 8023b3a:	f000 fd3c 	bl	80245b6 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EED1Ev>
 8023b3e:	687b      	ldr	r3, [r7, #4]
 8023b40:	4618      	mov	r0, r3
 8023b42:	3728      	adds	r7, #40	; 0x28
 8023b44:	46bd      	mov	sp, r7
 8023b46:	bd80      	pop	{r7, pc}

08023b48 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8023b48:	b580      	push	{r7, lr}
 8023b4a:	b082      	sub	sp, #8
 8023b4c:	af00      	add	r7, sp, #0
 8023b4e:	6078      	str	r0, [r7, #4]
 8023b50:	6878      	ldr	r0, [r7, #4]
 8023b52:	f000 fe06 	bl	8024762 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>
 8023b56:	687b      	ldr	r3, [r7, #4]
 8023b58:	4618      	mov	r0, r3
 8023b5a:	3708      	adds	r7, #8
 8023b5c:	46bd      	mov	sp, r7
 8023b5e:	bd80      	pop	{r7, pc}

08023b60 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
      _Deque_base()
 8023b60:	b580      	push	{r7, lr}
 8023b62:	b082      	sub	sp, #8
 8023b64:	af00      	add	r7, sp, #0
 8023b66:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	4618      	mov	r0, r3
 8023b6c:	f000 fde9 	bl	8024742 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8023b70:	2100      	movs	r1, #0
 8023b72:	6878      	ldr	r0, [r7, #4]
 8023b74:	f000 fe01 	bl	802477a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>
 8023b78:	687b      	ldr	r3, [r7, #4]
 8023b7a:	4618      	mov	r0, r3
 8023b7c:	3708      	adds	r7, #8
 8023b7e:	46bd      	mov	sp, r7
 8023b80:	bd80      	pop	{r7, pc}

08023b82 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8023b82:	b580      	push	{r7, lr}
 8023b84:	b082      	sub	sp, #8
 8023b86:	af00      	add	r7, sp, #0
 8023b88:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	681b      	ldr	r3, [r3, #0]
 8023b8e:	2b00      	cmp	r3, #0
 8023b90:	d010      	beq.n	8023bb4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023b92:	687b      	ldr	r3, [r7, #4]
 8023b94:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8023b96:	687b      	ldr	r3, [r7, #4]
 8023b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023b9a:	3304      	adds	r3, #4
 8023b9c:	461a      	mov	r2, r3
 8023b9e:	6878      	ldr	r0, [r7, #4]
 8023ba0:	f000 fe51 	bl	8024846 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8023ba4:	687b      	ldr	r3, [r7, #4]
 8023ba6:	6819      	ldr	r1, [r3, #0]
 8023ba8:	687b      	ldr	r3, [r7, #4]
 8023baa:	685b      	ldr	r3, [r3, #4]
 8023bac:	461a      	mov	r2, r3
 8023bae:	6878      	ldr	r0, [r7, #4]
 8023bb0:	f000 fe63 	bl	802487a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8023bb4:	687b      	ldr	r3, [r7, #4]
 8023bb6:	4618      	mov	r0, r3
 8023bb8:	f7ff ffc6 	bl	8023b48 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>
 8023bbc:	687b      	ldr	r3, [r7, #4]
 8023bbe:	4618      	mov	r0, r3
 8023bc0:	3708      	adds	r7, #8
 8023bc2:	46bd      	mov	sp, r7
 8023bc4:	bd80      	pop	{r7, pc}

08023bc6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
      ~deque()
 8023bc6:	b580      	push	{r7, lr}
 8023bc8:	b08a      	sub	sp, #40	; 0x28
 8023bca:	af00      	add	r7, sp, #0
 8023bcc:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023bce:	f107 0308 	add.w	r3, r7, #8
 8023bd2:	6879      	ldr	r1, [r7, #4]
 8023bd4:	4618      	mov	r0, r3
 8023bd6:	f000 fe6c 	bl	80248b2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023bda:	f107 0318 	add.w	r3, r7, #24
 8023bde:	6879      	ldr	r1, [r7, #4]
 8023be0:	4618      	mov	r0, r3
 8023be2:	f000 fe75 	bl	80248d0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023be6:	687b      	ldr	r3, [r7, #4]
 8023be8:	4618      	mov	r0, r3
 8023bea:	f000 fc15 	bl	8024418 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023bee:	4603      	mov	r3, r0
 8023bf0:	f107 0218 	add.w	r2, r7, #24
 8023bf4:	f107 0108 	add.w	r1, r7, #8
 8023bf8:	6878      	ldr	r0, [r7, #4]
 8023bfa:	f000 fe94 	bl	8024926 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8023bfe:	687b      	ldr	r3, [r7, #4]
 8023c00:	4618      	mov	r0, r3
 8023c02:	f7ff ffbe 	bl	8023b82 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8023c06:	687b      	ldr	r3, [r7, #4]
 8023c08:	4618      	mov	r0, r3
 8023c0a:	3728      	adds	r7, #40	; 0x28
 8023c0c:	46bd      	mov	sp, r7
 8023c0e:	bd80      	pop	{r7, pc}

08023c10 <_ZNSt5dequeIjSaIjEEC1Ev>:
      deque() = default;
 8023c10:	b580      	push	{r7, lr}
 8023c12:	b082      	sub	sp, #8
 8023c14:	af00      	add	r7, sp, #0
 8023c16:	6078      	str	r0, [r7, #4]
 8023c18:	687b      	ldr	r3, [r7, #4]
 8023c1a:	4618      	mov	r0, r3
 8023c1c:	f000 fe9c 	bl	8024958 <_ZNSt11_Deque_baseIjSaIjEEC1Ev>
 8023c20:	687b      	ldr	r3, [r7, #4]
 8023c22:	4618      	mov	r0, r3
 8023c24:	3708      	adds	r7, #8
 8023c26:	46bd      	mov	sp, r7
 8023c28:	bd80      	pop	{r7, pc}

08023c2a <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>:
	queue()
 8023c2a:	b580      	push	{r7, lr}
 8023c2c:	b082      	sub	sp, #8
 8023c2e:	af00      	add	r7, sp, #0
 8023c30:	6078      	str	r0, [r7, #4]
	: c() { }
 8023c32:	687b      	ldr	r3, [r7, #4]
 8023c34:	4618      	mov	r0, r3
 8023c36:	2328      	movs	r3, #40	; 0x28
 8023c38:	461a      	mov	r2, r3
 8023c3a:	2100      	movs	r1, #0
 8023c3c:	f01c fb56 	bl	80402ec <memset>
 8023c40:	687b      	ldr	r3, [r7, #4]
 8023c42:	4618      	mov	r0, r3
 8023c44:	f7ff ffe4 	bl	8023c10 <_ZNSt5dequeIjSaIjEEC1Ev>
 8023c48:	687b      	ldr	r3, [r7, #4]
 8023c4a:	4618      	mov	r0, r3
 8023c4c:	3708      	adds	r7, #8
 8023c4e:	46bd      	mov	sp, r7
 8023c50:	bd80      	pop	{r7, pc}

08023c52 <_ZNSt5dequeIjSaIjEED1Ev>:
      ~deque()
 8023c52:	b580      	push	{r7, lr}
 8023c54:	b08a      	sub	sp, #40	; 0x28
 8023c56:	af00      	add	r7, sp, #0
 8023c58:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023c5a:	f107 0308 	add.w	r3, r7, #8
 8023c5e:	6879      	ldr	r1, [r7, #4]
 8023c60:	4618      	mov	r0, r3
 8023c62:	f000 feac 	bl	80249be <_ZNSt5dequeIjSaIjEE5beginEv>
 8023c66:	f107 0318 	add.w	r3, r7, #24
 8023c6a:	6879      	ldr	r1, [r7, #4]
 8023c6c:	4618      	mov	r0, r3
 8023c6e:	f000 feb5 	bl	80249dc <_ZNSt5dequeIjSaIjEE3endEv>
 8023c72:	687b      	ldr	r3, [r7, #4]
 8023c74:	4618      	mov	r0, r3
 8023c76:	f000 fec0 	bl	80249fa <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8023c7a:	4603      	mov	r3, r0
 8023c7c:	f107 0218 	add.w	r2, r7, #24
 8023c80:	f107 0108 	add.w	r1, r7, #8
 8023c84:	6878      	ldr	r0, [r7, #4]
 8023c86:	f000 fedf 	bl	8024a48 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
 8023c8a:	687b      	ldr	r3, [r7, #4]
 8023c8c:	4618      	mov	r0, r3
 8023c8e:	f000 fe74 	bl	802497a <_ZNSt11_Deque_baseIjSaIjEED1Ev>
 8023c92:	687b      	ldr	r3, [r7, #4]
 8023c94:	4618      	mov	r0, r3
 8023c96:	3728      	adds	r7, #40	; 0x28
 8023c98:	46bd      	mov	sp, r7
 8023c9a:	bd80      	pop	{r7, pc}

08023c9c <_ZN14FrameContainerI8IMUFrameE5ResetEv>:
	void Reset() {
 8023c9c:	b580      	push	{r7, lr}
 8023c9e:	b084      	sub	sp, #16
 8023ca0:	af00      	add	r7, sp, #0
 8023ca2:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 8023ca4:	6878      	ldr	r0, [r7, #4]
 8023ca6:	2300      	movs	r3, #0
 8023ca8:	60bb      	str	r3, [r7, #8]
 8023caa:	2300      	movs	r3, #0
 8023cac:	60fb      	str	r3, [r7, #12]
 8023cae:	f107 0308 	add.w	r3, r7, #8
 8023cb2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8023cb6:	f000 fed4 	bl	8024a62 <_ZNSt5dequeI8IMUFrameSaIS0_EEaSESt16initializer_listIS0_E>
		FirstSeq = 0;
 8023cba:	687b      	ldr	r3, [r7, #4]
 8023cbc:	2200      	movs	r2, #0
 8023cbe:	851a      	strh	r2, [r3, #40]	; 0x28
	}
 8023cc0:	bf00      	nop
 8023cc2:	3710      	adds	r7, #16
 8023cc4:	46bd      	mov	sp, r7
 8023cc6:	bd80      	pop	{r7, pc}

08023cc8 <_ZN14FrameContainerI14ServoDataFrameE5ResetEv>:
	void Reset() {
 8023cc8:	b580      	push	{r7, lr}
 8023cca:	b084      	sub	sp, #16
 8023ccc:	af00      	add	r7, sp, #0
 8023cce:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 8023cd0:	6878      	ldr	r0, [r7, #4]
 8023cd2:	2300      	movs	r3, #0
 8023cd4:	60bb      	str	r3, [r7, #8]
 8023cd6:	2300      	movs	r3, #0
 8023cd8:	60fb      	str	r3, [r7, #12]
 8023cda:	f107 0308 	add.w	r3, r7, #8
 8023cde:	e893 0006 	ldmia.w	r3, {r1, r2}
 8023ce2:	f000 fed9 	bl	8024a98 <_ZNSt5dequeI14ServoDataFrameSaIS0_EEaSESt16initializer_listIS0_E>
		FirstSeq = 0;
 8023ce6:	687b      	ldr	r3, [r7, #4]
 8023ce8:	2200      	movs	r2, #0
 8023cea:	851a      	strh	r2, [r3, #40]	; 0x28
	}
 8023cec:	bf00      	nop
 8023cee:	3710      	adds	r7, #16
 8023cf0:	46bd      	mov	sp, r7
 8023cf2:	bd80      	pop	{r7, pc}

08023cf4 <_ZNSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) noexcept
 8023cf4:	b580      	push	{r7, lr}
 8023cf6:	b082      	sub	sp, #8
 8023cf8:	af00      	add	r7, sp, #0
 8023cfa:	6078      	str	r0, [r7, #4]
 8023cfc:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	6839      	ldr	r1, [r7, #0]
 8023d02:	4618      	mov	r0, r3
 8023d04:	f7ff fcb2 	bl	802366c <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8023d08:	4603      	mov	r3, r0
 8023d0a:	4618      	mov	r0, r3
 8023d0c:	3708      	adds	r7, #8
 8023d0e:	46bd      	mov	sp, r7
 8023d10:	bd80      	pop	{r7, pc}

08023d12 <_ZN8IMUFrameC1Ev>:
	IMUFrame() = default;
 8023d12:	b480      	push	{r7}
 8023d14:	b083      	sub	sp, #12
 8023d16:	af00      	add	r7, sp, #0
 8023d18:	6078      	str	r0, [r7, #4]
 8023d1a:	687b      	ldr	r3, [r7, #4]
 8023d1c:	2200      	movs	r2, #0
 8023d1e:	751a      	strb	r2, [r3, #20]
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	4618      	mov	r0, r3
 8023d24:	370c      	adds	r7, #12
 8023d26:	46bd      	mov	sp, r7
 8023d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d2c:	4770      	bx	lr

08023d2e <_ZN25MotherboardRequestHandler13GetFrameBySeqI8IMUFrameEE8ResponceRK7RequestRK14FrameContainerIT_E>:
	Responce GetFrameBySeq(const Request &request,
 8023d2e:	b580      	push	{r7, lr}
 8023d30:	b08c      	sub	sp, #48	; 0x30
 8023d32:	af00      	add	r7, sp, #0
 8023d34:	60f8      	str	r0, [r7, #12]
 8023d36:	60b9      	str	r1, [r7, #8]
 8023d38:	607a      	str	r2, [r7, #4]
 8023d3a:	603b      	str	r3, [r7, #0]
		responce.ResponceSize = T::Size;
 8023d3c:	68fb      	ldr	r3, [r7, #12]
 8023d3e:	2211      	movs	r2, #17
 8023d40:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (request.RequestSize != 2) {
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8023d4a:	2b02      	cmp	r3, #2
 8023d4c:	d004      	beq.n	8023d58 <_ZN25MotherboardRequestHandler13GetFrameBySeqI8IMUFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0x2a>
			responce.Error = ErrorCodes::BadRequest;
 8023d4e:	68fb      	ldr	r3, [r7, #12]
 8023d50:	2203      	movs	r2, #3
 8023d52:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			return responce;
 8023d56:	e044      	b.n	8023de2 <_ZN25MotherboardRequestHandler13GetFrameBySeqI8IMUFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0xb4>
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 8023d58:	687b      	ldr	r3, [r7, #4]
 8023d5a:	4618      	mov	r0, r3
 8023d5c:	f7ff fc17 	bl	802358e <_ZNKSt5arrayIhLj256EE4dataEv>
 8023d60:	4603      	mov	r3, r0
		uint16_t frameSeq =
 8023d62:	881b      	ldrh	r3, [r3, #0]
 8023d64:	85fb      	strh	r3, [r7, #46]	; 0x2e
		T frame;
 8023d66:	f107 0314 	add.w	r3, r7, #20
 8023d6a:	4618      	mov	r0, r3
 8023d6c:	f7ff ffd1 	bl	8023d12 <_ZN8IMUFrameC1Ev>
		bool ok = container.Get(frameSeq, frame);
 8023d70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8023d72:	f107 0214 	add.w	r2, r7, #20
 8023d76:	4619      	mov	r1, r3
 8023d78:	6838      	ldr	r0, [r7, #0]
 8023d7a:	f000 fea8 	bl	8024ace <_ZNK14FrameContainerI8IMUFrameE3GetEjRS0_>
 8023d7e:	4603      	mov	r3, r0
 8023d80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (!ok) {
 8023d84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8023d88:	f083 0301 	eor.w	r3, r3, #1
 8023d8c:	b2db      	uxtb	r3, r3
 8023d8e:	2b00      	cmp	r3, #0
 8023d90:	d004      	beq.n	8023d9c <_ZN25MotherboardRequestHandler13GetFrameBySeqI8IMUFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0x6e>
			responce.Error = ErrorCodes::FrameUnavailable;
 8023d92:	68fb      	ldr	r3, [r7, #12]
 8023d94:	2201      	movs	r2, #1
 8023d96:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			return responce;
 8023d9a:	e022      	b.n	8023de2 <_ZN25MotherboardRequestHandler13GetFrameBySeqI8IMUFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0xb4>
		if (frame.Error) {
 8023d9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8023da0:	2b00      	cmp	r3, #0
 8023da2:	d00c      	beq.n	8023dbe <_ZN25MotherboardRequestHandler13GetFrameBySeqI8IMUFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0x90>
			responce.Error = ErrorCodes::TargetError;
 8023da4:	68fb      	ldr	r3, [r7, #12]
 8023da6:	2205      	movs	r2, #5
 8023da8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			responce.Data[0] = frame.Error;
 8023dac:	2100      	movs	r1, #0
 8023dae:	68f8      	ldr	r0, [r7, #12]
 8023db0:	f7ff ffa0 	bl	8023cf4 <_ZNSt5arrayIhLj256EEixEj>
 8023db4:	4603      	mov	r3, r0
 8023db6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8023dba:	701a      	strb	r2, [r3, #0]
			return responce;
 8023dbc:	e011      	b.n	8023de2 <_ZN25MotherboardRequestHandler13GetFrameBySeqI8IMUFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0xb4>
		uint8_t *ptr = responce.Data.data();
 8023dbe:	68f8      	ldr	r0, [r7, #12]
 8023dc0:	f7ff fbd8 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 8023dc4:	4603      	mov	r3, r0
 8023dc6:	613b      	str	r3, [r7, #16]
		frame.SerializeTo(&ptr);
 8023dc8:	f107 0210 	add.w	r2, r7, #16
 8023dcc:	f107 0314 	add.w	r3, r7, #20
 8023dd0:	4611      	mov	r1, r2
 8023dd2:	4618      	mov	r0, r3
 8023dd4:	f7fe f9f2 	bl	80221bc <_ZN8IMUFrame11SerializeToEPPh>
		responce.Error = ErrorCodes::Success;
 8023dd8:	68fb      	ldr	r3, [r7, #12]
 8023dda:	2200      	movs	r2, #0
 8023ddc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		return responce;
 8023de0:	bf00      	nop
	}
 8023de2:	68f8      	ldr	r0, [r7, #12]
 8023de4:	3730      	adds	r7, #48	; 0x30
 8023de6:	46bd      	mov	sp, r7
 8023de8:	bd80      	pop	{r7, pc}

08023dea <_ZN25MotherboardRequestHandler13GetFrameBySeqI14ServoDataFrameEE8ResponceRK7RequestRK14FrameContainerIT_E>:
	Responce GetFrameBySeq(const Request &request,
 8023dea:	b590      	push	{r4, r7, lr}
 8023dec:	b0cb      	sub	sp, #300	; 0x12c
 8023dee:	af00      	add	r7, sp, #0
 8023df0:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8023df4:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8023df8:	6020      	str	r0, [r4, #0]
 8023dfa:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8023dfe:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8023e02:	6001      	str	r1, [r0, #0]
 8023e04:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8023e08:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8023e0c:	600a      	str	r2, [r1, #0]
 8023e0e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8023e12:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8023e16:	6013      	str	r3, [r2, #0]
		responce.ResponceSize = T::Size;
 8023e18:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023e1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8023e20:	681b      	ldr	r3, [r3, #0]
 8023e22:	2221      	movs	r2, #33	; 0x21
 8023e24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (request.RequestSize != 2) {
 8023e28:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023e2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8023e30:	681b      	ldr	r3, [r3, #0]
 8023e32:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8023e36:	2b02      	cmp	r3, #2
 8023e38:	d008      	beq.n	8023e4c <_ZN25MotherboardRequestHandler13GetFrameBySeqI14ServoDataFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8023e3a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023e3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8023e42:	681b      	ldr	r3, [r3, #0]
 8023e44:	2203      	movs	r2, #3
 8023e46:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			return responce;
 8023e4a:	e068      	b.n	8023f1e <_ZN25MotherboardRequestHandler13GetFrameBySeqI14ServoDataFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0x134>
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 8023e4c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023e50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8023e54:	681b      	ldr	r3, [r3, #0]
 8023e56:	4618      	mov	r0, r3
 8023e58:	f7ff fb99 	bl	802358e <_ZNKSt5arrayIhLj256EE4dataEv>
 8023e5c:	4603      	mov	r3, r0
		uint16_t frameSeq =
 8023e5e:	881b      	ldrh	r3, [r3, #0]
 8023e60:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
		bool ok = container.Get(frameSeq, frame);
 8023e64:	f8b7 1126 	ldrh.w	r1, [r7, #294]	; 0x126
 8023e68:	f107 0218 	add.w	r2, r7, #24
 8023e6c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023e70:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8023e74:	6818      	ldr	r0, [r3, #0]
 8023e76:	f000 fe76 	bl	8024b66 <_ZNK14FrameContainerI14ServoDataFrameE3GetEjRS0_>
 8023e7a:	4603      	mov	r3, r0
 8023e7c:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
		if (!ok) {
 8023e80:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8023e84:	f083 0301 	eor.w	r3, r3, #1
 8023e88:	b2db      	uxtb	r3, r3
 8023e8a:	2b00      	cmp	r3, #0
 8023e8c:	d008      	beq.n	8023ea0 <_ZN25MotherboardRequestHandler13GetFrameBySeqI14ServoDataFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0xb6>
			responce.Error = ErrorCodes::FrameUnavailable;
 8023e8e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023e92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8023e96:	681b      	ldr	r3, [r3, #0]
 8023e98:	2201      	movs	r2, #1
 8023e9a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			return responce;
 8023e9e:	e03e      	b.n	8023f1e <_ZN25MotherboardRequestHandler13GetFrameBySeqI14ServoDataFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0x134>
		if (frame.Error) {
 8023ea0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023ea4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8023ea8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8023eac:	2b00      	cmp	r3, #0
 8023eae:	d018      	beq.n	8023ee2 <_ZN25MotherboardRequestHandler13GetFrameBySeqI14ServoDataFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0xf8>
			responce.Error = ErrorCodes::TargetError;
 8023eb0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023eb4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8023eb8:	681b      	ldr	r3, [r3, #0]
 8023eba:	2205      	movs	r2, #5
 8023ebc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			responce.Data[0] = frame.Error;
 8023ec0:	2100      	movs	r1, #0
 8023ec2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023ec6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8023eca:	6818      	ldr	r0, [r3, #0]
 8023ecc:	f7ff ff12 	bl	8023cf4 <_ZNSt5arrayIhLj256EEixEj>
 8023ed0:	4602      	mov	r2, r0
 8023ed2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023ed6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8023eda:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8023ede:	7013      	strb	r3, [r2, #0]
			return responce;
 8023ee0:	e01d      	b.n	8023f1e <_ZN25MotherboardRequestHandler13GetFrameBySeqI14ServoDataFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0x134>
		uint8_t *ptr = responce.Data.data();
 8023ee2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023ee6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8023eea:	6818      	ldr	r0, [r3, #0]
 8023eec:	f7ff fb42 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 8023ef0:	4602      	mov	r2, r0
 8023ef2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023ef6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8023efa:	601a      	str	r2, [r3, #0]
		frame.SerializeTo(&ptr);
 8023efc:	f107 0214 	add.w	r2, r7, #20
 8023f00:	f107 0318 	add.w	r3, r7, #24
 8023f04:	4611      	mov	r1, r2
 8023f06:	4618      	mov	r0, r3
 8023f08:	f7fe f906 	bl	8022118 <_ZN14ServoDataFrame11SerializeToEPPh>
		responce.Error = ErrorCodes::Success;
 8023f0c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023f10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8023f14:	681b      	ldr	r3, [r3, #0]
 8023f16:	2200      	movs	r2, #0
 8023f18:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		return responce;
 8023f1c:	bf00      	nop
	}
 8023f1e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8023f22:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8023f26:	6818      	ldr	r0, [r3, #0]
 8023f28:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8023f2c:	46bd      	mov	sp, r7
 8023f2e:	bd90      	pop	{r4, r7, pc}

08023f30 <_ZN25MotherboardRequestHandler7GetInfoI8IMUFrameEE8ResponceRK7RequestRK14FrameContainerIT_E>:
	Responce GetInfo(const Request &request,
 8023f30:	b580      	push	{r7, lr}
 8023f32:	b088      	sub	sp, #32
 8023f34:	af00      	add	r7, sp, #0
 8023f36:	60f8      	str	r0, [r7, #12]
 8023f38:	60b9      	str	r1, [r7, #8]
 8023f3a:	607a      	str	r2, [r7, #4]
 8023f3c:	603b      	str	r3, [r7, #0]
		responce.ResponceSize = FrameContainer<T>::Info::Size;
 8023f3e:	68fb      	ldr	r3, [r7, #12]
 8023f40:	2206      	movs	r2, #6
 8023f42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (request.RequestSize != 1) {
 8023f46:	687b      	ldr	r3, [r7, #4]
 8023f48:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8023f4c:	2b01      	cmp	r3, #1
 8023f4e:	d004      	beq.n	8023f5a <_ZN25MotherboardRequestHandler7GetInfoI8IMUFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0x2a>
			responce.Error = ErrorCodes::BadRequest;
 8023f50:	68fb      	ldr	r3, [r7, #12]
 8023f52:	2203      	movs	r2, #3
 8023f54:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			return responce;
 8023f58:	e017      	b.n	8023f8a <_ZN25MotherboardRequestHandler7GetInfoI8IMUFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0x5a>
		uint8_t *ptr = responce.Data.data();
 8023f5a:	68f8      	ldr	r0, [r7, #12]
 8023f5c:	f7ff fb0a 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 8023f60:	4603      	mov	r3, r0
 8023f62:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 8023f64:	f107 0314 	add.w	r3, r7, #20
 8023f68:	6839      	ldr	r1, [r7, #0]
 8023f6a:	4618      	mov	r0, r3
 8023f6c:	f000 fe42 	bl	8024bf4 <_ZNK14FrameContainerI8IMUFrameE7GetInfoEv>
		info.SerializeTo(&ptr);
 8023f70:	f107 021c 	add.w	r2, r7, #28
 8023f74:	f107 0314 	add.w	r3, r7, #20
 8023f78:	4611      	mov	r1, r2
 8023f7a:	4618      	mov	r0, r3
 8023f7c:	f000 fe54 	bl	8024c28 <_ZN14FrameContainerI8IMUFrameE4Info11SerializeToEPPh>
		responce.Error = ErrorCodes::Success;
 8023f80:	68fb      	ldr	r3, [r7, #12]
 8023f82:	2200      	movs	r2, #0
 8023f84:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		return responce;
 8023f88:	bf00      	nop
	}
 8023f8a:	68f8      	ldr	r0, [r7, #12]
 8023f8c:	3720      	adds	r7, #32
 8023f8e:	46bd      	mov	sp, r7
 8023f90:	bd80      	pop	{r7, pc}

08023f92 <_ZN25MotherboardRequestHandler7GetInfoI14ServoDataFrameEE8ResponceRK7RequestRK14FrameContainerIT_E>:
	Responce GetInfo(const Request &request,
 8023f92:	b580      	push	{r7, lr}
 8023f94:	b088      	sub	sp, #32
 8023f96:	af00      	add	r7, sp, #0
 8023f98:	60f8      	str	r0, [r7, #12]
 8023f9a:	60b9      	str	r1, [r7, #8]
 8023f9c:	607a      	str	r2, [r7, #4]
 8023f9e:	603b      	str	r3, [r7, #0]
		responce.ResponceSize = FrameContainer<T>::Info::Size;
 8023fa0:	68fb      	ldr	r3, [r7, #12]
 8023fa2:	2206      	movs	r2, #6
 8023fa4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (request.RequestSize != 1) {
 8023fa8:	687b      	ldr	r3, [r7, #4]
 8023faa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8023fae:	2b01      	cmp	r3, #1
 8023fb0:	d004      	beq.n	8023fbc <_ZN25MotherboardRequestHandler7GetInfoI14ServoDataFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0x2a>
			responce.Error = ErrorCodes::BadRequest;
 8023fb2:	68fb      	ldr	r3, [r7, #12]
 8023fb4:	2203      	movs	r2, #3
 8023fb6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			return responce;
 8023fba:	e017      	b.n	8023fec <_ZN25MotherboardRequestHandler7GetInfoI14ServoDataFrameEE8ResponceRK7RequestRK14FrameContainerIT_E+0x5a>
		uint8_t *ptr = responce.Data.data();
 8023fbc:	68f8      	ldr	r0, [r7, #12]
 8023fbe:	f7ff fad9 	bl	8023574 <_ZNSt5arrayIhLj256EE4dataEv>
 8023fc2:	4603      	mov	r3, r0
 8023fc4:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 8023fc6:	f107 0314 	add.w	r3, r7, #20
 8023fca:	6839      	ldr	r1, [r7, #0]
 8023fcc:	4618      	mov	r0, r3
 8023fce:	f000 fe6f 	bl	8024cb0 <_ZNK14FrameContainerI14ServoDataFrameE7GetInfoEv>
		info.SerializeTo(&ptr);
 8023fd2:	f107 021c 	add.w	r2, r7, #28
 8023fd6:	f107 0314 	add.w	r3, r7, #20
 8023fda:	4611      	mov	r1, r2
 8023fdc:	4618      	mov	r0, r3
 8023fde:	f000 fe81 	bl	8024ce4 <_ZN14FrameContainerI14ServoDataFrameE4Info11SerializeToEPPh>
		responce.Error = ErrorCodes::Success;
 8023fe2:	68fb      	ldr	r3, [r7, #12]
 8023fe4:	2200      	movs	r2, #0
 8023fe6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		return responce;
 8023fea:	bf00      	nop
	}
 8023fec:	68f8      	ldr	r0, [r7, #12]
 8023fee:	3720      	adds	r7, #32
 8023ff0:	46bd      	mov	sp, r7
 8023ff2:	bd80      	pop	{r7, pc}

08023ff4 <_ZNSt5dequeI8IMUFrameSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023ff4:	b590      	push	{r4, r7, lr}
 8023ff6:	b083      	sub	sp, #12
 8023ff8:	af00      	add	r7, sp, #0
 8023ffa:	6078      	str	r0, [r7, #4]
 8023ffc:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023ffe:	6838      	ldr	r0, [r7, #0]
 8024000:	f000 feb4 	bl	8024d6c <_ZSt4moveIRSt5dequeI8IMUFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8024004:	4603      	mov	r3, r0
 8024006:	4622      	mov	r2, r4
 8024008:	4619      	mov	r1, r3
 802400a:	6878      	ldr	r0, [r7, #4]
 802400c:	f000 feb9 	bl	8024d82 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8024010:	687b      	ldr	r3, [r7, #4]
      }
 8024012:	4618      	mov	r0, r3
 8024014:	370c      	adds	r7, #12
 8024016:	46bd      	mov	sp, r7
 8024018:	bd90      	pop	{r4, r7, pc}

0802401a <_ZNSt5dequeI14ServoDataFrameSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 802401a:	b590      	push	{r4, r7, lr}
 802401c:	b083      	sub	sp, #12
 802401e:	af00      	add	r7, sp, #0
 8024020:	6078      	str	r0, [r7, #4]
 8024022:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8024024:	6838      	ldr	r0, [r7, #0]
 8024026:	f000 fecd 	bl	8024dc4 <_ZSt4moveIRSt5dequeI14ServoDataFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 802402a:	4603      	mov	r3, r0
 802402c:	4622      	mov	r2, r4
 802402e:	4619      	mov	r1, r3
 8024030:	6878      	ldr	r0, [r7, #4]
 8024032:	f000 fed2 	bl	8024dda <_ZNSt5dequeI14ServoDataFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8024036:	687b      	ldr	r3, [r7, #4]
      }
 8024038:	4618      	mov	r0, r3
 802403a:	370c      	adds	r7, #12
 802403c:	46bd      	mov	sp, r7
 802403e:	bd90      	pop	{r4, r7, pc}

08024040 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8024040:	b590      	push	{r4, r7, lr}
 8024042:	b083      	sub	sp, #12
 8024044:	af00      	add	r7, sp, #0
 8024046:	6078      	str	r0, [r7, #4]
 8024048:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 802404a:	6838      	ldr	r0, [r7, #0]
 802404c:	f000 fee6 	bl	8024e1c <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8024050:	4603      	mov	r3, r0
 8024052:	4622      	mov	r2, r4
 8024054:	4619      	mov	r1, r3
 8024056:	6878      	ldr	r0, [r7, #4]
 8024058:	f000 feeb 	bl	8024e32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>
	return *this;
 802405c:	687b      	ldr	r3, [r7, #4]
      }
 802405e:	4618      	mov	r0, r3
 8024060:	370c      	adds	r7, #12
 8024062:	46bd      	mov	sp, r7
 8024064:	bd90      	pop	{r4, r7, pc}

08024066 <_ZNSt5dequeIjSaIjEEaSEOS1_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8024066:	b590      	push	{r4, r7, lr}
 8024068:	b083      	sub	sp, #12
 802406a:	af00      	add	r7, sp, #0
 802406c:	6078      	str	r0, [r7, #4]
 802406e:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8024070:	6838      	ldr	r0, [r7, #0]
 8024072:	f000 feff 	bl	8024e74 <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>
 8024076:	4603      	mov	r3, r0
 8024078:	4622      	mov	r2, r4
 802407a:	4619      	mov	r1, r3
 802407c:	6878      	ldr	r0, [r7, #4]
 802407e:	f000 ff04 	bl	8024e8a <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>
	return *this;
 8024082:	687b      	ldr	r3, [r7, #4]
      }
 8024084:	4618      	mov	r0, r3
 8024086:	370c      	adds	r7, #12
 8024088:	46bd      	mov	sp, r7
 802408a:	bd90      	pop	{r4, r7, pc}

0802408c <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushEOj>:
      push(value_type&& __x)
 802408c:	b590      	push	{r4, r7, lr}
 802408e:	b083      	sub	sp, #12
 8024090:	af00      	add	r7, sp, #0
 8024092:	6078      	str	r0, [r7, #4]
 8024094:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8024096:	687c      	ldr	r4, [r7, #4]
 8024098:	6838      	ldr	r0, [r7, #0]
 802409a:	f000 ff17 	bl	8024ecc <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>
 802409e:	4603      	mov	r3, r0
 80240a0:	4619      	mov	r1, r3
 80240a2:	4620      	mov	r0, r4
 80240a4:	f000 ff1d 	bl	8024ee2 <_ZNSt5dequeIjSaIjEE9push_backEOj>
 80240a8:	bf00      	nop
 80240aa:	370c      	adds	r7, #12
 80240ac:	46bd      	mov	sp, r7
 80240ae:	bd90      	pop	{r4, r7, pc}

080240b0 <_ZNSt5queueIjSt5dequeIjSaIjEEE5frontEv>:
      front()
 80240b0:	b580      	push	{r7, lr}
 80240b2:	b082      	sub	sp, #8
 80240b4:	af00      	add	r7, sp, #0
 80240b6:	6078      	str	r0, [r7, #4]
	return c.front();
 80240b8:	687b      	ldr	r3, [r7, #4]
 80240ba:	4618      	mov	r0, r3
 80240bc:	f000 ff22 	bl	8024f04 <_ZNSt5dequeIjSaIjEE5frontEv>
 80240c0:	4603      	mov	r3, r0
      }
 80240c2:	4618      	mov	r0, r3
 80240c4:	3708      	adds	r7, #8
 80240c6:	46bd      	mov	sp, r7
 80240c8:	bd80      	pop	{r7, pc}

080240ca <_ZN14FrameContainerI8IMUFrameE3AddERKS0_>:
	void Add(const T &frame) {
 80240ca:	b580      	push	{r7, lr}
 80240cc:	b082      	sub	sp, #8
 80240ce:	af00      	add	r7, sp, #0
 80240d0:	6078      	str	r0, [r7, #4]
 80240d2:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 80240d4:	687b      	ldr	r3, [r7, #4]
 80240d6:	6839      	ldr	r1, [r7, #0]
 80240d8:	4618      	mov	r0, r3
 80240da:	f000 ff27 	bl	8024f2c <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontERKS0_>
		if (FrameQueue.size() > MaxFrames)
 80240de:	687b      	ldr	r3, [r7, #4]
 80240e0:	4618      	mov	r0, r3
 80240e2:	f000 ff45 	bl	8024f70 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80240e6:	4602      	mov	r2, r0
 80240e8:	687b      	ldr	r3, [r7, #4]
 80240ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80240ec:	429a      	cmp	r2, r3
 80240ee:	bf8c      	ite	hi
 80240f0:	2301      	movhi	r3, #1
 80240f2:	2300      	movls	r3, #0
 80240f4:	b2db      	uxtb	r3, r3
 80240f6:	2b00      	cmp	r3, #0
 80240f8:	d002      	beq.n	8024100 <_ZN14FrameContainerI8IMUFrameE3AddERKS0_+0x36>
			Remove();
 80240fa:	6878      	ldr	r0, [r7, #4]
 80240fc:	f000 ff4a 	bl	8024f94 <_ZN14FrameContainerI8IMUFrameE6RemoveEv>
	}
 8024100:	bf00      	nop
 8024102:	3708      	adds	r7, #8
 8024104:	46bd      	mov	sp, r7
 8024106:	bd80      	pop	{r7, pc}

08024108 <_ZN14FrameContainerI14ServoDataFrameE3AddERKS0_>:
	void Add(const T &frame) {
 8024108:	b580      	push	{r7, lr}
 802410a:	b082      	sub	sp, #8
 802410c:	af00      	add	r7, sp, #0
 802410e:	6078      	str	r0, [r7, #4]
 8024110:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	6839      	ldr	r1, [r7, #0]
 8024116:	4618      	mov	r0, r3
 8024118:	f000 ff4e 	bl	8024fb8 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE10push_frontERKS0_>
		if (FrameQueue.size() > MaxFrames)
 802411c:	687b      	ldr	r3, [r7, #4]
 802411e:	4618      	mov	r0, r3
 8024120:	f000 ff6d 	bl	8024ffe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE4sizeEv>
 8024124:	4602      	mov	r2, r0
 8024126:	687b      	ldr	r3, [r7, #4]
 8024128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802412a:	429a      	cmp	r2, r3
 802412c:	bf8c      	ite	hi
 802412e:	2301      	movhi	r3, #1
 8024130:	2300      	movls	r3, #0
 8024132:	b2db      	uxtb	r3, r3
 8024134:	2b00      	cmp	r3, #0
 8024136:	d002      	beq.n	802413e <_ZN14FrameContainerI14ServoDataFrameE3AddERKS0_+0x36>
			Remove();
 8024138:	6878      	ldr	r0, [r7, #4]
 802413a:	f000 ff72 	bl	8025022 <_ZN14FrameContainerI14ServoDataFrameE6RemoveEv>
	}
 802413e:	bf00      	nop
 8024140:	3708      	adds	r7, #8
 8024142:	46bd      	mov	sp, r7
 8024144:	bd80      	pop	{r7, pc}

08024146 <_ZNSt5arrayI8ResponceLj10EEixEj>:
      operator[](size_type __n) noexcept
 8024146:	b580      	push	{r7, lr}
 8024148:	b082      	sub	sp, #8
 802414a:	af00      	add	r7, sp, #0
 802414c:	6078      	str	r0, [r7, #4]
 802414e:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8024150:	687b      	ldr	r3, [r7, #4]
 8024152:	6839      	ldr	r1, [r7, #0]
 8024154:	4618      	mov	r0, r3
 8024156:	f000 ff76 	bl	8025046 <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>
 802415a:	4603      	mov	r3, r0
 802415c:	4618      	mov	r0, r3
 802415e:	3708      	adds	r7, #8
 8024160:	46bd      	mov	sp, r7
 8024162:	bd80      	pop	{r7, pc}

08024164 <_ZNKSt5arrayI8ResponceLj10EEixEj>:
      operator[](size_type __n) const noexcept
 8024164:	b580      	push	{r7, lr}
 8024166:	b082      	sub	sp, #8
 8024168:	af00      	add	r7, sp, #0
 802416a:	6078      	str	r0, [r7, #4]
 802416c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 802416e:	687b      	ldr	r3, [r7, #4]
 8024170:	6839      	ldr	r1, [r7, #0]
 8024172:	4618      	mov	r0, r3
 8024174:	f000 ff67 	bl	8025046 <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>
 8024178:	4603      	mov	r3, r0
 802417a:	4618      	mov	r0, r3
 802417c:	3708      	adds	r7, #8
 802417e:	46bd      	mov	sp, r7
 8024180:	bd80      	pop	{r7, pc}

08024182 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8024182:	b480      	push	{r7}
 8024184:	b083      	sub	sp, #12
 8024186:	af00      	add	r7, sp, #0
 8024188:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 802418a:	687b      	ldr	r3, [r7, #4]
 802418c:	4618      	mov	r0, r3
 802418e:	370c      	adds	r7, #12
 8024190:	46bd      	mov	sp, r7
 8024192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024196:	4770      	bx	lr

08024198 <_ZNKSt5arrayI7RequestLj500EEixEj>:
      operator[](size_type __n) const noexcept
 8024198:	b580      	push	{r7, lr}
 802419a:	b082      	sub	sp, #8
 802419c:	af00      	add	r7, sp, #0
 802419e:	6078      	str	r0, [r7, #4]
 80241a0:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80241a2:	687b      	ldr	r3, [r7, #4]
 80241a4:	6839      	ldr	r1, [r7, #0]
 80241a6:	4618      	mov	r0, r3
 80241a8:	f000 ff5f 	bl	802506a <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>
 80241ac:	4603      	mov	r3, r0
 80241ae:	4618      	mov	r0, r3
 80241b0:	3708      	adds	r7, #8
 80241b2:	46bd      	mov	sp, r7
 80241b4:	bd80      	pop	{r7, pc}

080241b6 <_ZNSt5arrayI7RequestLj500EEixEj>:
      operator[](size_type __n) noexcept
 80241b6:	b580      	push	{r7, lr}
 80241b8:	b082      	sub	sp, #8
 80241ba:	af00      	add	r7, sp, #0
 80241bc:	6078      	str	r0, [r7, #4]
 80241be:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80241c0:	687b      	ldr	r3, [r7, #4]
 80241c2:	6839      	ldr	r1, [r7, #0]
 80241c4:	4618      	mov	r0, r3
 80241c6:	f000 ff50 	bl	802506a <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>
 80241ca:	4603      	mov	r3, r0
 80241cc:	4618      	mov	r0, r3
 80241ce:	3708      	adds	r7, #8
 80241d0:	46bd      	mov	sp, r7
 80241d2:	bd80      	pop	{r7, pc}

080241d4 <_ZNKSt5arrayI7RequestLj10EEixEj>:
      operator[](size_type __n) const noexcept
 80241d4:	b580      	push	{r7, lr}
 80241d6:	b082      	sub	sp, #8
 80241d8:	af00      	add	r7, sp, #0
 80241da:	6078      	str	r0, [r7, #4]
 80241dc:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80241de:	687b      	ldr	r3, [r7, #4]
 80241e0:	6839      	ldr	r1, [r7, #0]
 80241e2:	4618      	mov	r0, r3
 80241e4:	f000 ff53 	bl	802508e <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>
 80241e8:	4603      	mov	r3, r0
 80241ea:	4618      	mov	r0, r3
 80241ec:	3708      	adds	r7, #8
 80241ee:	46bd      	mov	sp, r7
 80241f0:	bd80      	pop	{r7, pc}

080241f2 <_ZNSt5arrayI7RequestLj10EEixEj>:
      operator[](size_type __n) noexcept
 80241f2:	b580      	push	{r7, lr}
 80241f4:	b082      	sub	sp, #8
 80241f6:	af00      	add	r7, sp, #0
 80241f8:	6078      	str	r0, [r7, #4]
 80241fa:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80241fc:	687b      	ldr	r3, [r7, #4]
 80241fe:	6839      	ldr	r1, [r7, #0]
 8024200:	4618      	mov	r0, r3
 8024202:	f000 ff44 	bl	802508e <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>
 8024206:	4603      	mov	r3, r0
 8024208:	4618      	mov	r0, r3
 802420a:	3708      	adds	r7, #8
 802420c:	46bd      	mov	sp, r7
 802420e:	bd80      	pop	{r7, pc}

08024210 <_ZNSt5dequeIjSaIjEE9push_backERKj>:
      push_back(const value_type& __x)
 8024210:	b580      	push	{r7, lr}
 8024212:	b082      	sub	sp, #8
 8024214:	af00      	add	r7, sp, #0
 8024216:	6078      	str	r0, [r7, #4]
 8024218:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 802421a:	687b      	ldr	r3, [r7, #4]
 802421c:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 802421e:	687b      	ldr	r3, [r7, #4]
 8024220:	6a1b      	ldr	r3, [r3, #32]
 8024222:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8024224:	429a      	cmp	r2, r3
 8024226:	d00c      	beq.n	8024242 <_ZNSt5dequeIjSaIjEE9push_backERKj+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8024228:	6878      	ldr	r0, [r7, #4]
 802422a:	687b      	ldr	r3, [r7, #4]
 802422c:	699b      	ldr	r3, [r3, #24]
 802422e:	683a      	ldr	r2, [r7, #0]
 8024230:	4619      	mov	r1, r3
 8024232:	f000 ff3e 	bl	80250b2 <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8024236:	687b      	ldr	r3, [r7, #4]
 8024238:	699b      	ldr	r3, [r3, #24]
 802423a:	1d1a      	adds	r2, r3, #4
 802423c:	687b      	ldr	r3, [r7, #4]
 802423e:	619a      	str	r2, [r3, #24]
      }
 8024240:	e003      	b.n	802424a <_ZNSt5dequeIjSaIjEE9push_backERKj+0x3a>
	  _M_push_back_aux(__x);
 8024242:	6839      	ldr	r1, [r7, #0]
 8024244:	6878      	ldr	r0, [r7, #4]
 8024246:	f000 ff47 	bl	80250d8 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>
      }
 802424a:	bf00      	nop
 802424c:	3708      	adds	r7, #8
 802424e:	46bd      	mov	sp, r7
 8024250:	bd80      	pop	{r7, pc}

08024252 <_ZNKSt5dequeIjSaIjEE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 8024252:	b580      	push	{r7, lr}
 8024254:	b086      	sub	sp, #24
 8024256:	af00      	add	r7, sp, #0
 8024258:	6078      	str	r0, [r7, #4]
	return *begin();
 802425a:	f107 0308 	add.w	r3, r7, #8
 802425e:	6879      	ldr	r1, [r7, #4]
 8024260:	4618      	mov	r0, r3
 8024262:	f000 ff7d 	bl	8025160 <_ZNKSt5dequeIjSaIjEE5beginEv>
 8024266:	f107 0308 	add.w	r3, r7, #8
 802426a:	4618      	mov	r0, r3
 802426c:	f000 ff87 	bl	802517e <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>
 8024270:	4603      	mov	r3, r0
      }
 8024272:	4618      	mov	r0, r3
 8024274:	3718      	adds	r7, #24
 8024276:	46bd      	mov	sp, r7
 8024278:	bd80      	pop	{r7, pc}

0802427a <_ZNKSt5dequeIjSaIjEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 802427a:	b580      	push	{r7, lr}
 802427c:	b082      	sub	sp, #8
 802427e:	af00      	add	r7, sp, #0
 8024280:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8024282:	687b      	ldr	r3, [r7, #4]
 8024284:	f103 0218 	add.w	r2, r3, #24
 8024288:	687b      	ldr	r3, [r7, #4]
 802428a:	3308      	adds	r3, #8
 802428c:	4619      	mov	r1, r3
 802428e:	4610      	mov	r0, r2
 8024290:	f000 ff81 	bl	8025196 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>
 8024294:	4603      	mov	r3, r0
 8024296:	4618      	mov	r0, r3
 8024298:	3708      	adds	r7, #8
 802429a:	46bd      	mov	sp, r7
 802429c:	bd80      	pop	{r7, pc}

0802429e <_ZNSt5dequeIjSaIjEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 802429e:	b580      	push	{r7, lr}
 80242a0:	b082      	sub	sp, #8
 80242a2:	af00      	add	r7, sp, #0
 80242a4:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80242a6:	687b      	ldr	r3, [r7, #4]
 80242a8:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80242aa:	687b      	ldr	r3, [r7, #4]
 80242ac:	691b      	ldr	r3, [r3, #16]
 80242ae:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 80242b0:	429a      	cmp	r2, r3
 80242b2:	d010      	beq.n	80242d6 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80242b4:	687b      	ldr	r3, [r7, #4]
 80242b6:	4618      	mov	r0, r3
 80242b8:	f000 fb9f 	bl	80249fa <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80242bc:	4602      	mov	r2, r0
 80242be:	687b      	ldr	r3, [r7, #4]
 80242c0:	689b      	ldr	r3, [r3, #8]
 80242c2:	4619      	mov	r1, r3
 80242c4:	4610      	mov	r0, r2
 80242c6:	f000 ff7a 	bl	80251be <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80242ca:	687b      	ldr	r3, [r7, #4]
 80242cc:	689b      	ldr	r3, [r3, #8]
 80242ce:	1d1a      	adds	r2, r3, #4
 80242d0:	687b      	ldr	r3, [r7, #4]
 80242d2:	609a      	str	r2, [r3, #8]
      }
 80242d4:	e002      	b.n	80242dc <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 80242d6:	6878      	ldr	r0, [r7, #4]
 80242d8:	f000 ff7e 	bl	80251d8 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>
      }
 80242dc:	bf00      	nop
 80242de:	3708      	adds	r7, #8
 80242e0:	46bd      	mov	sp, r7
 80242e2:	bd80      	pop	{r7, pc}

080242e4 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80242e4:	b480      	push	{r7}
 80242e6:	b083      	sub	sp, #12
 80242e8:	af00      	add	r7, sp, #0
 80242ea:	6078      	str	r0, [r7, #4]
 80242ec:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80242ee:	687b      	ldr	r3, [r7, #4]
 80242f0:	681a      	ldr	r2, [r3, #0]
 80242f2:	683b      	ldr	r3, [r7, #0]
 80242f4:	681b      	ldr	r3, [r3, #0]
 80242f6:	429a      	cmp	r2, r3
 80242f8:	bf0c      	ite	eq
 80242fa:	2301      	moveq	r3, #1
 80242fc:	2300      	movne	r3, #0
 80242fe:	b2db      	uxtb	r3, r3
 8024300:	4618      	mov	r0, r3
 8024302:	370c      	adds	r7, #12
 8024304:	46bd      	mov	sp, r7
 8024306:	f85d 7b04 	ldr.w	r7, [sp], #4
 802430a:	4770      	bx	lr

0802430c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 802430c:	b580      	push	{r7, lr}
 802430e:	b084      	sub	sp, #16
 8024310:	af00      	add	r7, sp, #0
 8024312:	60f8      	str	r0, [r7, #12]
 8024314:	60b9      	str	r1, [r7, #8]
 8024316:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8024318:	6878      	ldr	r0, [r7, #4]
 802431a:	f000 ff85 	bl	8025228 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 802431e:	4603      	mov	r3, r0
 8024320:	461a      	mov	r2, r3
 8024322:	68b9      	ldr	r1, [r7, #8]
 8024324:	68f8      	ldr	r0, [r7, #12]
 8024326:	f000 ff8a 	bl	802523e <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 802432a:	bf00      	nop
 802432c:	3710      	adds	r7, #16
 802432e:	46bd      	mov	sp, r7
 8024330:	bd80      	pop	{r7, pc}
	...

08024334 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>:
  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8024334:	b5b0      	push	{r4, r5, r7, lr}
 8024336:	b082      	sub	sp, #8
 8024338:	af00      	add	r7, sp, #0
 802433a:	6078      	str	r0, [r7, #4]
 802433c:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 802433e:	6878      	ldr	r0, [r7, #4]
 8024340:	f7ff fb1a 	bl	8023978 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8024344:	4604      	mov	r4, r0
 8024346:	6878      	ldr	r0, [r7, #4]
 8024348:	f000 ff92 	bl	8025270 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 802434c:	4603      	mov	r3, r0
 802434e:	429c      	cmp	r4, r3
 8024350:	bf0c      	ite	eq
 8024352:	2301      	moveq	r3, #1
 8024354:	2300      	movne	r3, #0
 8024356:	b2db      	uxtb	r3, r3
 8024358:	2b00      	cmp	r3, #0
 802435a:	d002      	beq.n	8024362 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 802435c:	4817      	ldr	r0, [pc, #92]	; (80243bc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x88>)
 802435e:	f01b ff1d 	bl	804019c <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_front();
 8024362:	2101      	movs	r1, #1
 8024364:	6878      	ldr	r0, [r7, #4]
 8024366:	f000 ff94 	bl	8025292 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 802436a:	687a      	ldr	r2, [r7, #4]
 802436c:	687b      	ldr	r3, [r7, #4]
 802436e:	695b      	ldr	r3, [r3, #20]
 8024370:	1f1c      	subs	r4, r3, #4
 8024372:	4610      	mov	r0, r2
 8024374:	f000 ffa5 	bl	80252c2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8024378:	4603      	mov	r3, r0
 802437a:	6023      	str	r3, [r4, #0]
	__try
	  {
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 802437c:	687b      	ldr	r3, [r7, #4]
 802437e:	f103 0208 	add.w	r2, r3, #8
 8024382:	687b      	ldr	r3, [r7, #4]
 8024384:	695b      	ldr	r3, [r3, #20]
 8024386:	3b04      	subs	r3, #4
 8024388:	4619      	mov	r1, r3
 802438a:	4610      	mov	r0, r2
 802438c:	f000 ffab 	bl	80252e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
					       - 1);
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8024390:	687b      	ldr	r3, [r7, #4]
 8024392:	691b      	ldr	r3, [r3, #16]
 8024394:	f1a3 0214 	sub.w	r2, r3, #20
 8024398:	687b      	ldr	r3, [r7, #4]
 802439a:	609a      	str	r2, [r3, #8]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 802439c:	687c      	ldr	r4, [r7, #4]
 802439e:	687b      	ldr	r3, [r7, #4]
 80243a0:	689d      	ldr	r5, [r3, #8]
 80243a2:	6838      	ldr	r0, [r7, #0]
 80243a4:	f000 ff40 	bl	8025228 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 80243a8:	4603      	mov	r3, r0
 80243aa:	461a      	mov	r2, r3
 80243ac:	4629      	mov	r1, r5
 80243ae:	4620      	mov	r0, r4
 80243b0:	f7ff ffac 	bl	802430c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  {
	    ++this->_M_impl._M_start;
	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
	    __throw_exception_again;
	  }
      }
 80243b4:	bf00      	nop
 80243b6:	3708      	adds	r7, #8
 80243b8:	46bd      	mov	sp, r7
 80243ba:	bdb0      	pop	{r4, r5, r7, pc}
 80243bc:	08041e08 	.word	0x08041e08

080243c0 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80243c0:	b580      	push	{r7, lr}
 80243c2:	b082      	sub	sp, #8
 80243c4:	af00      	add	r7, sp, #0
 80243c6:	6078      	str	r0, [r7, #4]
 80243c8:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80243ca:	f000 ffbb 	bl	8025344 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80243ce:	4603      	mov	r3, r0
 80243d0:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80243d2:	687b      	ldr	r3, [r7, #4]
 80243d4:	68da      	ldr	r2, [r3, #12]
 80243d6:	683b      	ldr	r3, [r7, #0]
 80243d8:	68db      	ldr	r3, [r3, #12]
 80243da:	1ad3      	subs	r3, r2, r3
 80243dc:	109b      	asrs	r3, r3, #2
 80243de:	3b01      	subs	r3, #1
 80243e0:	fb01 f303 	mul.w	r3, r1, r3
 80243e4:	687a      	ldr	r2, [r7, #4]
 80243e6:	6811      	ldr	r1, [r2, #0]
 80243e8:	687a      	ldr	r2, [r7, #4]
 80243ea:	6852      	ldr	r2, [r2, #4]
 80243ec:	1a8a      	subs	r2, r1, r2
 80243ee:	1092      	asrs	r2, r2, #2
 80243f0:	4908      	ldr	r1, [pc, #32]	; (8024414 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 80243f2:	fb01 f202 	mul.w	r2, r1, r2
 80243f6:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80243f8:	683a      	ldr	r2, [r7, #0]
 80243fa:	6891      	ldr	r1, [r2, #8]
 80243fc:	683a      	ldr	r2, [r7, #0]
 80243fe:	6812      	ldr	r2, [r2, #0]
 8024400:	1a8a      	subs	r2, r1, r2
 8024402:	1092      	asrs	r2, r2, #2
 8024404:	4903      	ldr	r1, [pc, #12]	; (8024414 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8024406:	fb01 f202 	mul.w	r2, r1, r2
 802440a:	4413      	add	r3, r2
      }
 802440c:	4618      	mov	r0, r3
 802440e:	3708      	adds	r7, #8
 8024410:	46bd      	mov	sp, r7
 8024412:	bd80      	pop	{r7, pc}
 8024414:	cccccccd 	.word	0xcccccccd

08024418 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8024418:	b480      	push	{r7}
 802441a:	b083      	sub	sp, #12
 802441c:	af00      	add	r7, sp, #0
 802441e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8024420:	687b      	ldr	r3, [r7, #4]
 8024422:	4618      	mov	r0, r3
 8024424:	370c      	adds	r7, #12
 8024426:	46bd      	mov	sp, r7
 8024428:	f85d 7b04 	ldr.w	r7, [sp], #4
 802442c:	4770      	bx	lr

0802442e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 802442e:	b580      	push	{r7, lr}
 8024430:	b082      	sub	sp, #8
 8024432:	af00      	add	r7, sp, #0
 8024434:	6078      	str	r0, [r7, #4]
 8024436:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8024438:	6839      	ldr	r1, [r7, #0]
 802443a:	6878      	ldr	r0, [r7, #4]
 802443c:	f000 ff8a 	bl	8025354 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8024440:	bf00      	nop
 8024442:	3708      	adds	r7, #8
 8024444:	46bd      	mov	sp, r7
 8024446:	bd80      	pop	{r7, pc}

08024448 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>:

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8024448:	b580      	push	{r7, lr}
 802444a:	b082      	sub	sp, #8
 802444c:	af00      	add	r7, sp, #0
 802444e:	6078      	str	r0, [r7, #4]
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8024450:	687a      	ldr	r2, [r7, #4]
 8024452:	687b      	ldr	r3, [r7, #4]
 8024454:	69db      	ldr	r3, [r3, #28]
 8024456:	4619      	mov	r1, r3
 8024458:	4610      	mov	r0, r2
 802445a:	f000 ff60 	bl	802531e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 802445e:	687b      	ldr	r3, [r7, #4]
 8024460:	f103 0218 	add.w	r2, r3, #24
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024468:	3b04      	subs	r3, #4
 802446a:	4619      	mov	r1, r3
 802446c:	4610      	mov	r0, r2
 802446e:	f000 ff3a 	bl	80252e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 8024472:	687b      	ldr	r3, [r7, #4]
 8024474:	6a1b      	ldr	r3, [r3, #32]
 8024476:	f1a3 0214 	sub.w	r2, r3, #20
 802447a:	687b      	ldr	r3, [r7, #4]
 802447c:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 802447e:	687b      	ldr	r3, [r7, #4]
 8024480:	4618      	mov	r0, r3
 8024482:	f7ff ffc9 	bl	8024418 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024486:	4602      	mov	r2, r0
 8024488:	687b      	ldr	r3, [r7, #4]
 802448a:	699b      	ldr	r3, [r3, #24]
 802448c:	4619      	mov	r1, r3
 802448e:	4610      	mov	r0, r2
 8024490:	f7ff ffcd 	bl	802442e <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_finish._M_cur);
    }
 8024494:	bf00      	nop
 8024496:	3708      	adds	r7, #8
 8024498:	46bd      	mov	sp, r7
 802449a:	bd80      	pop	{r7, pc}

0802449c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 802449c:	b580      	push	{r7, lr}
 802449e:	b082      	sub	sp, #8
 80244a0:	af00      	add	r7, sp, #0
 80244a2:	6078      	str	r0, [r7, #4]
 80244a4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80244a6:	683b      	ldr	r3, [r7, #0]
 80244a8:	3308      	adds	r3, #8
 80244aa:	4619      	mov	r1, r3
 80244ac:	6878      	ldr	r0, [r7, #4]
 80244ae:	f000 ff5c 	bl	802536a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>
 80244b2:	6878      	ldr	r0, [r7, #4]
 80244b4:	3708      	adds	r7, #8
 80244b6:	46bd      	mov	sp, r7
 80244b8:	bd80      	pop	{r7, pc}

080244ba <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80244ba:	b480      	push	{r7}
 80244bc:	b083      	sub	sp, #12
 80244be:	af00      	add	r7, sp, #0
 80244c0:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80244c2:	687b      	ldr	r3, [r7, #4]
 80244c4:	681b      	ldr	r3, [r3, #0]
 80244c6:	4618      	mov	r0, r3
 80244c8:	370c      	adds	r7, #12
 80244ca:	46bd      	mov	sp, r7
 80244cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244d0:	4770      	bx	lr

080244d2 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 80244d2:	b580      	push	{r7, lr}
 80244d4:	b086      	sub	sp, #24
 80244d6:	af00      	add	r7, sp, #0
 80244d8:	6078      	str	r0, [r7, #4]
 80244da:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 80244dc:	f107 0308 	add.w	r3, r7, #8
 80244e0:	683a      	ldr	r2, [r7, #0]
 80244e2:	6879      	ldr	r1, [r7, #4]
 80244e4:	4618      	mov	r0, r3
 80244e6:	f000 ff5c 	bl	80253a2 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80244ea:	f107 0308 	add.w	r3, r7, #8
 80244ee:	4618      	mov	r0, r3
 80244f0:	f000 ff6a 	bl	80253c8 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>
 80244f4:	4603      	mov	r3, r0
 80244f6:	4618      	mov	r0, r3
 80244f8:	3718      	adds	r7, #24
 80244fa:	46bd      	mov	sp, r7
 80244fc:	bd80      	pop	{r7, pc}

080244fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80244fe:	b580      	push	{r7, lr}
 8024500:	b082      	sub	sp, #8
 8024502:	af00      	add	r7, sp, #0
 8024504:	6078      	str	r0, [r7, #4]
 8024506:	6878      	ldr	r0, [r7, #4]
 8024508:	f000 ff7a 	bl	8025400 <_ZNSaI8IMUFrameED1Ev>
 802450c:	687b      	ldr	r3, [r7, #4]
 802450e:	4618      	mov	r0, r3
 8024510:	3708      	adds	r7, #8
 8024512:	46bd      	mov	sp, r7
 8024514:	bd80      	pop	{r7, pc}

08024516 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EEC1Ev>:
      _Deque_base()
 8024516:	b580      	push	{r7, lr}
 8024518:	b082      	sub	sp, #8
 802451a:	af00      	add	r7, sp, #0
 802451c:	6078      	str	r0, [r7, #4]
      : _M_impl()
 802451e:	687b      	ldr	r3, [r7, #4]
 8024520:	4618      	mov	r0, r3
 8024522:	f000 ff5d 	bl	80253e0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8024526:	2100      	movs	r1, #0
 8024528:	6878      	ldr	r0, [r7, #4]
 802452a:	f000 ff75 	bl	8025418 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_initialize_mapEj>
 802452e:	687b      	ldr	r3, [r7, #4]
 8024530:	4618      	mov	r0, r3
 8024532:	3708      	adds	r7, #8
 8024534:	46bd      	mov	sp, r7
 8024536:	bd80      	pop	{r7, pc}

08024538 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8024538:	b580      	push	{r7, lr}
 802453a:	b082      	sub	sp, #8
 802453c:	af00      	add	r7, sp, #0
 802453e:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8024540:	687b      	ldr	r3, [r7, #4]
 8024542:	681b      	ldr	r3, [r3, #0]
 8024544:	2b00      	cmp	r3, #0
 8024546:	d010      	beq.n	802456a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8024548:	687b      	ldr	r3, [r7, #4]
 802454a:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 802454c:	687b      	ldr	r3, [r7, #4]
 802454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8024550:	3304      	adds	r3, #4
 8024552:	461a      	mov	r2, r3
 8024554:	6878      	ldr	r0, [r7, #4]
 8024556:	f000 ffc5 	bl	80254e4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 802455a:	687b      	ldr	r3, [r7, #4]
 802455c:	6819      	ldr	r1, [r3, #0]
 802455e:	687b      	ldr	r3, [r7, #4]
 8024560:	685b      	ldr	r3, [r3, #4]
 8024562:	461a      	mov	r2, r3
 8024564:	6878      	ldr	r0, [r7, #4]
 8024566:	f000 ffd7 	bl	8025518 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 802456a:	687b      	ldr	r3, [r7, #4]
 802456c:	4618      	mov	r0, r3
 802456e:	f7ff ffc6 	bl	80244fe <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implD1Ev>
 8024572:	687b      	ldr	r3, [r7, #4]
 8024574:	4618      	mov	r0, r3
 8024576:	3708      	adds	r7, #8
 8024578:	46bd      	mov	sp, r7
 802457a:	bd80      	pop	{r7, pc}

0802457c <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 802457c:	b580      	push	{r7, lr}
 802457e:	b082      	sub	sp, #8
 8024580:	af00      	add	r7, sp, #0
 8024582:	6078      	str	r0, [r7, #4]
 8024584:	6878      	ldr	r0, [r7, #4]
 8024586:	f000 fff3 	bl	8025570 <_ZNSaI14ServoDataFrameED1Ev>
 802458a:	687b      	ldr	r3, [r7, #4]
 802458c:	4618      	mov	r0, r3
 802458e:	3708      	adds	r7, #8
 8024590:	46bd      	mov	sp, r7
 8024592:	bd80      	pop	{r7, pc}

08024594 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EEC1Ev>:
      _Deque_base()
 8024594:	b580      	push	{r7, lr}
 8024596:	b082      	sub	sp, #8
 8024598:	af00      	add	r7, sp, #0
 802459a:	6078      	str	r0, [r7, #4]
      : _M_impl()
 802459c:	687b      	ldr	r3, [r7, #4]
 802459e:	4618      	mov	r0, r3
 80245a0:	f000 ffd6 	bl	8025550 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80245a4:	2100      	movs	r1, #0
 80245a6:	6878      	ldr	r0, [r7, #4]
 80245a8:	f000 ffee 	bl	8025588 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE17_M_initialize_mapEj>
 80245ac:	687b      	ldr	r3, [r7, #4]
 80245ae:	4618      	mov	r0, r3
 80245b0:	3708      	adds	r7, #8
 80245b2:	46bd      	mov	sp, r7
 80245b4:	bd80      	pop	{r7, pc}

080245b6 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80245b6:	b580      	push	{r7, lr}
 80245b8:	b082      	sub	sp, #8
 80245ba:	af00      	add	r7, sp, #0
 80245bc:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80245be:	687b      	ldr	r3, [r7, #4]
 80245c0:	681b      	ldr	r3, [r3, #0]
 80245c2:	2b00      	cmp	r3, #0
 80245c4:	d010      	beq.n	80245e8 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80245c6:	687b      	ldr	r3, [r7, #4]
 80245c8:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80245ca:	687b      	ldr	r3, [r7, #4]
 80245cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80245ce:	3304      	adds	r3, #4
 80245d0:	461a      	mov	r2, r3
 80245d2:	6878      	ldr	r0, [r7, #4]
 80245d4:	f001 f840 	bl	8025658 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80245d8:	687b      	ldr	r3, [r7, #4]
 80245da:	6819      	ldr	r1, [r3, #0]
 80245dc:	687b      	ldr	r3, [r7, #4]
 80245de:	685b      	ldr	r3, [r3, #4]
 80245e0:	461a      	mov	r2, r3
 80245e2:	6878      	ldr	r0, [r7, #4]
 80245e4:	f001 f852 	bl	802568c <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 80245e8:	687b      	ldr	r3, [r7, #4]
 80245ea:	4618      	mov	r0, r3
 80245ec:	f7ff ffc6 	bl	802457c <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE11_Deque_implD1Ev>
 80245f0:	687b      	ldr	r3, [r7, #4]
 80245f2:	4618      	mov	r0, r3
 80245f4:	3708      	adds	r7, #8
 80245f6:	46bd      	mov	sp, r7
 80245f8:	bd80      	pop	{r7, pc}

080245fa <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80245fa:	b580      	push	{r7, lr}
 80245fc:	b082      	sub	sp, #8
 80245fe:	af00      	add	r7, sp, #0
 8024600:	6078      	str	r0, [r7, #4]
 8024602:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024604:	683b      	ldr	r3, [r7, #0]
 8024606:	3308      	adds	r3, #8
 8024608:	4619      	mov	r1, r3
 802460a:	6878      	ldr	r0, [r7, #4]
 802460c:	f000 f81e 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8024610:	6878      	ldr	r0, [r7, #4]
 8024612:	3708      	adds	r7, #8
 8024614:	46bd      	mov	sp, r7
 8024616:	bd80      	pop	{r7, pc}

08024618 <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8024618:	b580      	push	{r7, lr}
 802461a:	b082      	sub	sp, #8
 802461c:	af00      	add	r7, sp, #0
 802461e:	6078      	str	r0, [r7, #4]
 8024620:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8024622:	683b      	ldr	r3, [r7, #0]
 8024624:	3318      	adds	r3, #24
 8024626:	4619      	mov	r1, r3
 8024628:	6878      	ldr	r0, [r7, #4]
 802462a:	f000 f80f 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802462e:	6878      	ldr	r0, [r7, #4]
 8024630:	3708      	adds	r7, #8
 8024632:	46bd      	mov	sp, r7
 8024634:	bd80      	pop	{r7, pc}

08024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8024636:	b480      	push	{r7}
 8024638:	b083      	sub	sp, #12
 802463a:	af00      	add	r7, sp, #0
 802463c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802463e:	687b      	ldr	r3, [r7, #4]
 8024640:	4618      	mov	r0, r3
 8024642:	370c      	adds	r7, #12
 8024644:	46bd      	mov	sp, r7
 8024646:	f85d 7b04 	ldr.w	r7, [sp], #4
 802464a:	4770      	bx	lr

0802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 802464c:	b480      	push	{r7}
 802464e:	b083      	sub	sp, #12
 8024650:	af00      	add	r7, sp, #0
 8024652:	6078      	str	r0, [r7, #4]
 8024654:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024656:	683b      	ldr	r3, [r7, #0]
 8024658:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 802465a:	687b      	ldr	r3, [r7, #4]
 802465c:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802465e:	683b      	ldr	r3, [r7, #0]
 8024660:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024662:	687b      	ldr	r3, [r7, #4]
 8024664:	605a      	str	r2, [r3, #4]
 8024666:	683b      	ldr	r3, [r7, #0]
 8024668:	689a      	ldr	r2, [r3, #8]
 802466a:	687b      	ldr	r3, [r7, #4]
 802466c:	609a      	str	r2, [r3, #8]
 802466e:	683b      	ldr	r3, [r7, #0]
 8024670:	68da      	ldr	r2, [r3, #12]
 8024672:	687b      	ldr	r3, [r7, #4]
 8024674:	60da      	str	r2, [r3, #12]
 8024676:	687b      	ldr	r3, [r7, #4]
 8024678:	4618      	mov	r0, r3
 802467a:	370c      	adds	r7, #12
 802467c:	46bd      	mov	sp, r7
 802467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024682:	4770      	bx	lr

08024684 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8024684:	b480      	push	{r7}
 8024686:	b08d      	sub	sp, #52	; 0x34
 8024688:	af00      	add	r7, sp, #0
 802468a:	60f8      	str	r0, [r7, #12]
 802468c:	60b9      	str	r1, [r7, #8]
 802468e:	607a      	str	r2, [r7, #4]
 8024690:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8024692:	bf00      	nop
 8024694:	3734      	adds	r7, #52	; 0x34
 8024696:	46bd      	mov	sp, r7
 8024698:	f85d 7b04 	ldr.w	r7, [sp], #4
 802469c:	4770      	bx	lr

0802469e <_ZNSt5dequeI14ServoDataFrameSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 802469e:	b580      	push	{r7, lr}
 80246a0:	b082      	sub	sp, #8
 80246a2:	af00      	add	r7, sp, #0
 80246a4:	6078      	str	r0, [r7, #4]
 80246a6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80246a8:	683b      	ldr	r3, [r7, #0]
 80246aa:	3308      	adds	r3, #8
 80246ac:	4619      	mov	r1, r3
 80246ae:	6878      	ldr	r0, [r7, #4]
 80246b0:	f000 f81e 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 80246b4:	6878      	ldr	r0, [r7, #4]
 80246b6:	3708      	adds	r7, #8
 80246b8:	46bd      	mov	sp, r7
 80246ba:	bd80      	pop	{r7, pc}

080246bc <_ZNSt5dequeI14ServoDataFrameSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80246bc:	b580      	push	{r7, lr}
 80246be:	b082      	sub	sp, #8
 80246c0:	af00      	add	r7, sp, #0
 80246c2:	6078      	str	r0, [r7, #4]
 80246c4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80246c6:	683b      	ldr	r3, [r7, #0]
 80246c8:	3318      	adds	r3, #24
 80246ca:	4619      	mov	r1, r3
 80246cc:	6878      	ldr	r0, [r7, #4]
 80246ce:	f000 f80f 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 80246d2:	6878      	ldr	r0, [r7, #4]
 80246d4:	3708      	adds	r7, #8
 80246d6:	46bd      	mov	sp, r7
 80246d8:	bd80      	pop	{r7, pc}

080246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80246da:	b480      	push	{r7}
 80246dc:	b083      	sub	sp, #12
 80246de:	af00      	add	r7, sp, #0
 80246e0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80246e2:	687b      	ldr	r3, [r7, #4]
 80246e4:	4618      	mov	r0, r3
 80246e6:	370c      	adds	r7, #12
 80246e8:	46bd      	mov	sp, r7
 80246ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246ee:	4770      	bx	lr

080246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80246f0:	b480      	push	{r7}
 80246f2:	b083      	sub	sp, #12
 80246f4:	af00      	add	r7, sp, #0
 80246f6:	6078      	str	r0, [r7, #4]
 80246f8:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80246fa:	683b      	ldr	r3, [r7, #0]
 80246fc:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80246fe:	687b      	ldr	r3, [r7, #4]
 8024700:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024702:	683b      	ldr	r3, [r7, #0]
 8024704:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024706:	687b      	ldr	r3, [r7, #4]
 8024708:	605a      	str	r2, [r3, #4]
 802470a:	683b      	ldr	r3, [r7, #0]
 802470c:	689a      	ldr	r2, [r3, #8]
 802470e:	687b      	ldr	r3, [r7, #4]
 8024710:	609a      	str	r2, [r3, #8]
 8024712:	683b      	ldr	r3, [r7, #0]
 8024714:	68da      	ldr	r2, [r3, #12]
 8024716:	687b      	ldr	r3, [r7, #4]
 8024718:	60da      	str	r2, [r3, #12]
 802471a:	687b      	ldr	r3, [r7, #4]
 802471c:	4618      	mov	r0, r3
 802471e:	370c      	adds	r7, #12
 8024720:	46bd      	mov	sp, r7
 8024722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024726:	4770      	bx	lr

08024728 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8024728:	b480      	push	{r7}
 802472a:	b08d      	sub	sp, #52	; 0x34
 802472c:	af00      	add	r7, sp, #0
 802472e:	60f8      	str	r0, [r7, #12]
 8024730:	60b9      	str	r1, [r7, #8]
 8024732:	607a      	str	r2, [r7, #4]
 8024734:	603b      	str	r3, [r7, #0]
      }
 8024736:	bf00      	nop
 8024738:	3734      	adds	r7, #52	; 0x34
 802473a:	46bd      	mov	sp, r7
 802473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024740:	4770      	bx	lr

08024742 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8024742:	b580      	push	{r7, lr}
 8024744:	b082      	sub	sp, #8
 8024746:	af00      	add	r7, sp, #0
 8024748:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 802474a:	6878      	ldr	r0, [r7, #4]
 802474c:	f000 ffba 	bl	80256c4 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>
 8024750:	687b      	ldr	r3, [r7, #4]
 8024752:	4618      	mov	r0, r3
 8024754:	f000 ffc2 	bl	80256dc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 8024758:	687b      	ldr	r3, [r7, #4]
 802475a:	4618      	mov	r0, r3
 802475c:	3708      	adds	r7, #8
 802475e:	46bd      	mov	sp, r7
 8024760:	bd80      	pop	{r7, pc}

08024762 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8024762:	b580      	push	{r7, lr}
 8024764:	b082      	sub	sp, #8
 8024766:	af00      	add	r7, sp, #0
 8024768:	6078      	str	r0, [r7, #4]
 802476a:	6878      	ldr	r0, [r7, #4]
 802476c:	f000 ffcf 	bl	802570e <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>
 8024770:	687b      	ldr	r3, [r7, #4]
 8024772:	4618      	mov	r0, r3
 8024774:	3708      	adds	r7, #8
 8024776:	46bd      	mov	sp, r7
 8024778:	bd80      	pop	{r7, pc}

0802477a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 802477a:	b590      	push	{r4, r7, lr}
 802477c:	b089      	sub	sp, #36	; 0x24
 802477e:	af00      	add	r7, sp, #0
 8024780:	6078      	str	r0, [r7, #4]
 8024782:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8024784:	2014      	movs	r0, #20
 8024786:	f7fc fb41 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 802478a:	4602      	mov	r2, r0
 802478c:	683b      	ldr	r3, [r7, #0]
 802478e:	fbb3 f3f2 	udiv	r3, r3, r2
 8024792:	3301      	adds	r3, #1
 8024794:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024796:	2308      	movs	r3, #8
 8024798:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 802479a:	69fb      	ldr	r3, [r7, #28]
 802479c:	3302      	adds	r3, #2
 802479e:	613b      	str	r3, [r7, #16]
 80247a0:	f107 0210 	add.w	r2, r7, #16
 80247a4:	f107 030c 	add.w	r3, r7, #12
 80247a8:	4611      	mov	r1, r2
 80247aa:	4618      	mov	r0, r3
 80247ac:	f000 ffba 	bl	8025724 <_ZSt3maxIjERKT_S2_S2_>
 80247b0:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80247b2:	681a      	ldr	r2, [r3, #0]
 80247b4:	687b      	ldr	r3, [r7, #4]
 80247b6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80247b8:	687b      	ldr	r3, [r7, #4]
 80247ba:	685b      	ldr	r3, [r3, #4]
 80247bc:	4619      	mov	r1, r3
 80247be:	6878      	ldr	r0, [r7, #4]
 80247c0:	f000 ffc4 	bl	802574c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 80247c4:	4602      	mov	r2, r0
 80247c6:	687b      	ldr	r3, [r7, #4]
 80247c8:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80247ca:	687b      	ldr	r3, [r7, #4]
 80247cc:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80247ce:	687b      	ldr	r3, [r7, #4]
 80247d0:	6859      	ldr	r1, [r3, #4]
 80247d2:	69fb      	ldr	r3, [r7, #28]
 80247d4:	1acb      	subs	r3, r1, r3
 80247d6:	085b      	lsrs	r3, r3, #1
 80247d8:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80247da:	4413      	add	r3, r2
 80247dc:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80247de:	69fb      	ldr	r3, [r7, #28]
 80247e0:	009b      	lsls	r3, r3, #2
 80247e2:	69ba      	ldr	r2, [r7, #24]
 80247e4:	4413      	add	r3, r2
 80247e6:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80247e8:	697a      	ldr	r2, [r7, #20]
 80247ea:	69b9      	ldr	r1, [r7, #24]
 80247ec:	6878      	ldr	r0, [r7, #4]
 80247ee:	f000 ffca 	bl	8025786 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80247f2:	687b      	ldr	r3, [r7, #4]
 80247f4:	3308      	adds	r3, #8
 80247f6:	69b9      	ldr	r1, [r7, #24]
 80247f8:	4618      	mov	r0, r3
 80247fa:	f000 fd74 	bl	80252e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80247fe:	687b      	ldr	r3, [r7, #4]
 8024800:	f103 0218 	add.w	r2, r3, #24
 8024804:	697b      	ldr	r3, [r7, #20]
 8024806:	3b04      	subs	r3, #4
 8024808:	4619      	mov	r1, r3
 802480a:	4610      	mov	r0, r2
 802480c:	f000 fd6b 	bl	80252e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8024810:	687b      	ldr	r3, [r7, #4]
 8024812:	68da      	ldr	r2, [r3, #12]
 8024814:	687b      	ldr	r3, [r7, #4]
 8024816:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024818:	687b      	ldr	r3, [r7, #4]
 802481a:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 802481c:	2014      	movs	r0, #20
 802481e:	f7fc faf5 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 8024822:	4602      	mov	r2, r0
 8024824:	683b      	ldr	r3, [r7, #0]
 8024826:	fbb3 f1f2 	udiv	r1, r3, r2
 802482a:	fb01 f202 	mul.w	r2, r1, r2
 802482e:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8024830:	4613      	mov	r3, r2
 8024832:	009b      	lsls	r3, r3, #2
 8024834:	4413      	add	r3, r2
 8024836:	009b      	lsls	r3, r3, #2
 8024838:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 802483a:	687b      	ldr	r3, [r7, #4]
 802483c:	619a      	str	r2, [r3, #24]
    }
 802483e:	bf00      	nop
 8024840:	3724      	adds	r7, #36	; 0x24
 8024842:	46bd      	mov	sp, r7
 8024844:	bd90      	pop	{r4, r7, pc}

08024846 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8024846:	b580      	push	{r7, lr}
 8024848:	b086      	sub	sp, #24
 802484a:	af00      	add	r7, sp, #0
 802484c:	60f8      	str	r0, [r7, #12]
 802484e:	60b9      	str	r1, [r7, #8]
 8024850:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024852:	68bb      	ldr	r3, [r7, #8]
 8024854:	617b      	str	r3, [r7, #20]
 8024856:	697a      	ldr	r2, [r7, #20]
 8024858:	687b      	ldr	r3, [r7, #4]
 802485a:	429a      	cmp	r2, r3
 802485c:	d209      	bcs.n	8024872 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 802485e:	697b      	ldr	r3, [r7, #20]
 8024860:	681b      	ldr	r3, [r3, #0]
 8024862:	4619      	mov	r1, r3
 8024864:	68f8      	ldr	r0, [r7, #12]
 8024866:	f000 fd5a 	bl	802531e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 802486a:	697b      	ldr	r3, [r7, #20]
 802486c:	3304      	adds	r3, #4
 802486e:	617b      	str	r3, [r7, #20]
 8024870:	e7f1      	b.n	8024856 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8024872:	bf00      	nop
 8024874:	3718      	adds	r7, #24
 8024876:	46bd      	mov	sp, r7
 8024878:	bd80      	pop	{r7, pc}

0802487a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 802487a:	b580      	push	{r7, lr}
 802487c:	b086      	sub	sp, #24
 802487e:	af00      	add	r7, sp, #0
 8024880:	60f8      	str	r0, [r7, #12]
 8024882:	60b9      	str	r1, [r7, #8]
 8024884:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024886:	f107 0314 	add.w	r3, r7, #20
 802488a:	68f9      	ldr	r1, [r7, #12]
 802488c:	4618      	mov	r0, r3
 802488e:	f000 ff94 	bl	80257ba <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024892:	f107 0314 	add.w	r3, r7, #20
 8024896:	687a      	ldr	r2, [r7, #4]
 8024898:	68b9      	ldr	r1, [r7, #8]
 802489a:	4618      	mov	r0, r3
 802489c:	f000 ffaa 	bl	80257f4 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80248a0:	f107 0314 	add.w	r3, r7, #20
 80248a4:	4618      	mov	r0, r3
 80248a6:	f000 ff99 	bl	80257dc <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
      }
 80248aa:	bf00      	nop
 80248ac:	3718      	adds	r7, #24
 80248ae:	46bd      	mov	sp, r7
 80248b0:	bd80      	pop	{r7, pc}

080248b2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80248b2:	b580      	push	{r7, lr}
 80248b4:	b082      	sub	sp, #8
 80248b6:	af00      	add	r7, sp, #0
 80248b8:	6078      	str	r0, [r7, #4]
 80248ba:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80248bc:	683b      	ldr	r3, [r7, #0]
 80248be:	3308      	adds	r3, #8
 80248c0:	4619      	mov	r1, r3
 80248c2:	6878      	ldr	r0, [r7, #4]
 80248c4:	f000 f813 	bl	80248ee <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80248c8:	6878      	ldr	r0, [r7, #4]
 80248ca:	3708      	adds	r7, #8
 80248cc:	46bd      	mov	sp, r7
 80248ce:	bd80      	pop	{r7, pc}

080248d0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80248d0:	b580      	push	{r7, lr}
 80248d2:	b082      	sub	sp, #8
 80248d4:	af00      	add	r7, sp, #0
 80248d6:	6078      	str	r0, [r7, #4]
 80248d8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80248da:	683b      	ldr	r3, [r7, #0]
 80248dc:	3318      	adds	r3, #24
 80248de:	4619      	mov	r1, r3
 80248e0:	6878      	ldr	r0, [r7, #4]
 80248e2:	f000 f804 	bl	80248ee <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80248e6:	6878      	ldr	r0, [r7, #4]
 80248e8:	3708      	adds	r7, #8
 80248ea:	46bd      	mov	sp, r7
 80248ec:	bd80      	pop	{r7, pc}

080248ee <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80248ee:	b480      	push	{r7}
 80248f0:	b083      	sub	sp, #12
 80248f2:	af00      	add	r7, sp, #0
 80248f4:	6078      	str	r0, [r7, #4]
 80248f6:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80248f8:	683b      	ldr	r3, [r7, #0]
 80248fa:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80248fc:	687b      	ldr	r3, [r7, #4]
 80248fe:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024900:	683b      	ldr	r3, [r7, #0]
 8024902:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024904:	687b      	ldr	r3, [r7, #4]
 8024906:	605a      	str	r2, [r3, #4]
 8024908:	683b      	ldr	r3, [r7, #0]
 802490a:	689a      	ldr	r2, [r3, #8]
 802490c:	687b      	ldr	r3, [r7, #4]
 802490e:	609a      	str	r2, [r3, #8]
 8024910:	683b      	ldr	r3, [r7, #0]
 8024912:	68da      	ldr	r2, [r3, #12]
 8024914:	687b      	ldr	r3, [r7, #4]
 8024916:	60da      	str	r2, [r3, #12]
 8024918:	687b      	ldr	r3, [r7, #4]
 802491a:	4618      	mov	r0, r3
 802491c:	370c      	adds	r7, #12
 802491e:	46bd      	mov	sp, r7
 8024920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024924:	4770      	bx	lr

08024926 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
      _M_destroy_data(iterator __first, iterator __last,
 8024926:	b480      	push	{r7}
 8024928:	b08d      	sub	sp, #52	; 0x34
 802492a:	af00      	add	r7, sp, #0
 802492c:	60f8      	str	r0, [r7, #12]
 802492e:	60b9      	str	r1, [r7, #8]
 8024930:	607a      	str	r2, [r7, #4]
 8024932:	603b      	str	r3, [r7, #0]
      }
 8024934:	bf00      	nop
 8024936:	3734      	adds	r7, #52	; 0x34
 8024938:	46bd      	mov	sp, r7
 802493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802493e:	4770      	bx	lr

08024940 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8024940:	b580      	push	{r7, lr}
 8024942:	b082      	sub	sp, #8
 8024944:	af00      	add	r7, sp, #0
 8024946:	6078      	str	r0, [r7, #4]
 8024948:	6878      	ldr	r0, [r7, #4]
 802494a:	f000 ff72 	bl	8025832 <_ZNSaIjED1Ev>
 802494e:	687b      	ldr	r3, [r7, #4]
 8024950:	4618      	mov	r0, r3
 8024952:	3708      	adds	r7, #8
 8024954:	46bd      	mov	sp, r7
 8024956:	bd80      	pop	{r7, pc}

08024958 <_ZNSt11_Deque_baseIjSaIjEEC1Ev>:
      _Deque_base()
 8024958:	b580      	push	{r7, lr}
 802495a:	b082      	sub	sp, #8
 802495c:	af00      	add	r7, sp, #0
 802495e:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8024960:	687b      	ldr	r3, [r7, #4]
 8024962:	4618      	mov	r0, r3
 8024964:	f000 ff55 	bl	8025812 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8024968:	2100      	movs	r1, #0
 802496a:	6878      	ldr	r0, [r7, #4]
 802496c:	f000 ff6d 	bl	802584a <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>
 8024970:	687b      	ldr	r3, [r7, #4]
 8024972:	4618      	mov	r0, r3
 8024974:	3708      	adds	r7, #8
 8024976:	46bd      	mov	sp, r7
 8024978:	bd80      	pop	{r7, pc}

0802497a <_ZNSt11_Deque_baseIjSaIjEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 802497a:	b580      	push	{r7, lr}
 802497c:	b082      	sub	sp, #8
 802497e:	af00      	add	r7, sp, #0
 8024980:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8024982:	687b      	ldr	r3, [r7, #4]
 8024984:	681b      	ldr	r3, [r3, #0]
 8024986:	2b00      	cmp	r3, #0
 8024988:	d010      	beq.n	80249ac <_ZNSt11_Deque_baseIjSaIjEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 802498a:	687b      	ldr	r3, [r7, #4]
 802498c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 802498e:	687b      	ldr	r3, [r7, #4]
 8024990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8024992:	3304      	adds	r3, #4
 8024994:	461a      	mov	r2, r3
 8024996:	6878      	ldr	r0, [r7, #4]
 8024998:	f000 ffba 	bl	8025910 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 802499c:	687b      	ldr	r3, [r7, #4]
 802499e:	6819      	ldr	r1, [r3, #0]
 80249a0:	687b      	ldr	r3, [r7, #4]
 80249a2:	685b      	ldr	r3, [r3, #4]
 80249a4:	461a      	mov	r2, r3
 80249a6:	6878      	ldr	r0, [r7, #4]
 80249a8:	f000 ffcc 	bl	8025944 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
    }
 80249ac:	687b      	ldr	r3, [r7, #4]
 80249ae:	4618      	mov	r0, r3
 80249b0:	f7ff ffc6 	bl	8024940 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>
 80249b4:	687b      	ldr	r3, [r7, #4]
 80249b6:	4618      	mov	r0, r3
 80249b8:	3708      	adds	r7, #8
 80249ba:	46bd      	mov	sp, r7
 80249bc:	bd80      	pop	{r7, pc}

080249be <_ZNSt5dequeIjSaIjEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80249be:	b580      	push	{r7, lr}
 80249c0:	b082      	sub	sp, #8
 80249c2:	af00      	add	r7, sp, #0
 80249c4:	6078      	str	r0, [r7, #4]
 80249c6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80249c8:	683b      	ldr	r3, [r7, #0]
 80249ca:	3308      	adds	r3, #8
 80249cc:	4619      	mov	r1, r3
 80249ce:	6878      	ldr	r0, [r7, #4]
 80249d0:	f000 f81e 	bl	8024a10 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80249d4:	6878      	ldr	r0, [r7, #4]
 80249d6:	3708      	adds	r7, #8
 80249d8:	46bd      	mov	sp, r7
 80249da:	bd80      	pop	{r7, pc}

080249dc <_ZNSt5dequeIjSaIjEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80249dc:	b580      	push	{r7, lr}
 80249de:	b082      	sub	sp, #8
 80249e0:	af00      	add	r7, sp, #0
 80249e2:	6078      	str	r0, [r7, #4]
 80249e4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80249e6:	683b      	ldr	r3, [r7, #0]
 80249e8:	3318      	adds	r3, #24
 80249ea:	4619      	mov	r1, r3
 80249ec:	6878      	ldr	r0, [r7, #4]
 80249ee:	f000 f80f 	bl	8024a10 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80249f2:	6878      	ldr	r0, [r7, #4]
 80249f4:	3708      	adds	r7, #8
 80249f6:	46bd      	mov	sp, r7
 80249f8:	bd80      	pop	{r7, pc}

080249fa <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80249fa:	b480      	push	{r7}
 80249fc:	b083      	sub	sp, #12
 80249fe:	af00      	add	r7, sp, #0
 8024a00:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8024a02:	687b      	ldr	r3, [r7, #4]
 8024a04:	4618      	mov	r0, r3
 8024a06:	370c      	adds	r7, #12
 8024a08:	46bd      	mov	sp, r7
 8024a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a0e:	4770      	bx	lr

08024a10 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8024a10:	b480      	push	{r7}
 8024a12:	b083      	sub	sp, #12
 8024a14:	af00      	add	r7, sp, #0
 8024a16:	6078      	str	r0, [r7, #4]
 8024a18:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024a1a:	683b      	ldr	r3, [r7, #0]
 8024a1c:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024a1e:	687b      	ldr	r3, [r7, #4]
 8024a20:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024a22:	683b      	ldr	r3, [r7, #0]
 8024a24:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024a26:	687b      	ldr	r3, [r7, #4]
 8024a28:	605a      	str	r2, [r3, #4]
 8024a2a:	683b      	ldr	r3, [r7, #0]
 8024a2c:	689a      	ldr	r2, [r3, #8]
 8024a2e:	687b      	ldr	r3, [r7, #4]
 8024a30:	609a      	str	r2, [r3, #8]
 8024a32:	683b      	ldr	r3, [r7, #0]
 8024a34:	68da      	ldr	r2, [r3, #12]
 8024a36:	687b      	ldr	r3, [r7, #4]
 8024a38:	60da      	str	r2, [r3, #12]
 8024a3a:	687b      	ldr	r3, [r7, #4]
 8024a3c:	4618      	mov	r0, r3
 8024a3e:	370c      	adds	r7, #12
 8024a40:	46bd      	mov	sp, r7
 8024a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a46:	4770      	bx	lr

08024a48 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 8024a48:	b480      	push	{r7}
 8024a4a:	b08d      	sub	sp, #52	; 0x34
 8024a4c:	af00      	add	r7, sp, #0
 8024a4e:	60f8      	str	r0, [r7, #12]
 8024a50:	60b9      	str	r1, [r7, #8]
 8024a52:	607a      	str	r2, [r7, #4]
 8024a54:	603b      	str	r3, [r7, #0]
      }
 8024a56:	bf00      	nop
 8024a58:	3734      	adds	r7, #52	; 0x34
 8024a5a:	46bd      	mov	sp, r7
 8024a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a60:	4770      	bx	lr

08024a62 <_ZNSt5dequeI8IMUFrameSaIS0_EEaSESt16initializer_listIS0_E>:
      operator=(initializer_list<value_type> __l)
 8024a62:	b5b0      	push	{r4, r5, r7, lr}
 8024a64:	b086      	sub	sp, #24
 8024a66:	af00      	add	r7, sp, #0
 8024a68:	60f8      	str	r0, [r7, #12]
 8024a6a:	1d3b      	adds	r3, r7, #4
 8024a6c:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_assign_aux(__l.begin(), __l.end(),
 8024a70:	1d3b      	adds	r3, r7, #4
 8024a72:	4618      	mov	r0, r3
 8024a74:	f000 ff82 	bl	802597c <_ZNKSt16initializer_listI8IMUFrameE5beginEv>
 8024a78:	4604      	mov	r4, r0
 8024a7a:	1d3b      	adds	r3, r7, #4
 8024a7c:	4618      	mov	r0, r3
 8024a7e:	f000 ff89 	bl	8025994 <_ZNKSt16initializer_listI8IMUFrameE3endEv>
 8024a82:	4602      	mov	r2, r0
 8024a84:	462b      	mov	r3, r5
 8024a86:	4621      	mov	r1, r4
 8024a88:	68f8      	ldr	r0, [r7, #12]
 8024a8a:	f000 ff98 	bl	80259be <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>
	return *this;
 8024a8e:	68fb      	ldr	r3, [r7, #12]
      }
 8024a90:	4618      	mov	r0, r3
 8024a92:	3718      	adds	r7, #24
 8024a94:	46bd      	mov	sp, r7
 8024a96:	bdb0      	pop	{r4, r5, r7, pc}

08024a98 <_ZNSt5dequeI14ServoDataFrameSaIS0_EEaSESt16initializer_listIS0_E>:
      operator=(initializer_list<value_type> __l)
 8024a98:	b5b0      	push	{r4, r5, r7, lr}
 8024a9a:	b086      	sub	sp, #24
 8024a9c:	af00      	add	r7, sp, #0
 8024a9e:	60f8      	str	r0, [r7, #12]
 8024aa0:	1d3b      	adds	r3, r7, #4
 8024aa2:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_assign_aux(__l.begin(), __l.end(),
 8024aa6:	1d3b      	adds	r3, r7, #4
 8024aa8:	4618      	mov	r0, r3
 8024aaa:	f000 ffed 	bl	8025a88 <_ZNKSt16initializer_listI14ServoDataFrameE5beginEv>
 8024aae:	4604      	mov	r4, r0
 8024ab0:	1d3b      	adds	r3, r7, #4
 8024ab2:	4618      	mov	r0, r3
 8024ab4:	f000 fff4 	bl	8025aa0 <_ZNKSt16initializer_listI14ServoDataFrameE3endEv>
 8024ab8:	4602      	mov	r2, r0
 8024aba:	462b      	mov	r3, r5
 8024abc:	4621      	mov	r1, r4
 8024abe:	68f8      	ldr	r0, [r7, #12]
 8024ac0:	f001 f803 	bl	8025aca <_ZNSt5dequeI14ServoDataFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>
	return *this;
 8024ac4:	68fb      	ldr	r3, [r7, #12]
      }
 8024ac6:	4618      	mov	r0, r3
 8024ac8:	3718      	adds	r7, #24
 8024aca:	46bd      	mov	sp, r7
 8024acc:	bdb0      	pop	{r4, r5, r7, pc}

08024ace <_ZNK14FrameContainerI8IMUFrameE3GetEjRS0_>:
	bool Get(size_t seq, T &frame) const {
 8024ace:	b5b0      	push	{r4, r5, r7, lr}
 8024ad0:	b084      	sub	sp, #16
 8024ad2:	af00      	add	r7, sp, #0
 8024ad4:	60f8      	str	r0, [r7, #12]
 8024ad6:	60b9      	str	r1, [r7, #8]
 8024ad8:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8024ada:	68fb      	ldr	r3, [r7, #12]
 8024adc:	4618      	mov	r0, r3
 8024ade:	f001 f859 	bl	8025b94 <_ZNKSt5dequeI8IMUFrameSaIS0_EE5emptyEv>
 8024ae2:	4603      	mov	r3, r0
 8024ae4:	2b00      	cmp	r3, #0
 8024ae6:	d001      	beq.n	8024aec <_ZNK14FrameContainerI8IMUFrameE3GetEjRS0_+0x1e>
			return false;
 8024ae8:	2300      	movs	r3, #0
 8024aea:	e038      	b.n	8024b5e <_ZNK14FrameContainerI8IMUFrameE3GetEjRS0_+0x90>
		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 8024aec:	68fb      	ldr	r3, [r7, #12]
 8024aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024af0:	461a      	mov	r2, r3
 8024af2:	68bb      	ldr	r3, [r7, #8]
 8024af4:	4293      	cmp	r3, r2
 8024af6:	d30b      	bcc.n	8024b10 <_ZNK14FrameContainerI8IMUFrameE3GetEjRS0_+0x42>
 8024af8:	68fb      	ldr	r3, [r7, #12]
 8024afa:	4618      	mov	r0, r3
 8024afc:	f000 fa38 	bl	8024f70 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8024b00:	4602      	mov	r2, r0
 8024b02:	68fb      	ldr	r3, [r7, #12]
 8024b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024b06:	4413      	add	r3, r2
 8024b08:	3b01      	subs	r3, #1
 8024b0a:	68ba      	ldr	r2, [r7, #8]
 8024b0c:	429a      	cmp	r2, r3
 8024b0e:	d901      	bls.n	8024b14 <_ZNK14FrameContainerI8IMUFrameE3GetEjRS0_+0x46>
 8024b10:	2301      	movs	r3, #1
 8024b12:	e000      	b.n	8024b16 <_ZNK14FrameContainerI8IMUFrameE3GetEjRS0_+0x48>
 8024b14:	2300      	movs	r3, #0
 8024b16:	2b00      	cmp	r3, #0
 8024b18:	d001      	beq.n	8024b1e <_ZNK14FrameContainerI8IMUFrameE3GetEjRS0_+0x50>
			return false;
 8024b1a:	2300      	movs	r3, #0
 8024b1c:	e01f      	b.n	8024b5e <_ZNK14FrameContainerI8IMUFrameE3GetEjRS0_+0x90>
		frame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 8024b1e:	68fc      	ldr	r4, [r7, #12]
 8024b20:	68fb      	ldr	r3, [r7, #12]
 8024b22:	4618      	mov	r0, r3
 8024b24:	f000 fa24 	bl	8024f70 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8024b28:	4602      	mov	r2, r0
 8024b2a:	68fb      	ldr	r3, [r7, #12]
 8024b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024b2e:	4619      	mov	r1, r3
 8024b30:	68bb      	ldr	r3, [r7, #8]
 8024b32:	1acb      	subs	r3, r1, r3
 8024b34:	4413      	add	r3, r2
 8024b36:	3b01      	subs	r3, #1
 8024b38:	4619      	mov	r1, r3
 8024b3a:	4620      	mov	r0, r4
 8024b3c:	f001 f83c 	bl	8025bb8 <_ZNKSt5dequeI8IMUFrameSaIS0_EEixEj>
 8024b40:	4602      	mov	r2, r0
 8024b42:	687b      	ldr	r3, [r7, #4]
 8024b44:	6811      	ldr	r1, [r2, #0]
 8024b46:	6855      	ldr	r5, [r2, #4]
 8024b48:	6894      	ldr	r4, [r2, #8]
 8024b4a:	68d0      	ldr	r0, [r2, #12]
 8024b4c:	6019      	str	r1, [r3, #0]
 8024b4e:	605d      	str	r5, [r3, #4]
 8024b50:	609c      	str	r4, [r3, #8]
 8024b52:	60d8      	str	r0, [r3, #12]
 8024b54:	6911      	ldr	r1, [r2, #16]
 8024b56:	6119      	str	r1, [r3, #16]
 8024b58:	7d12      	ldrb	r2, [r2, #20]
 8024b5a:	751a      	strb	r2, [r3, #20]
		return true;
 8024b5c:	2301      	movs	r3, #1
	}
 8024b5e:	4618      	mov	r0, r3
 8024b60:	3710      	adds	r7, #16
 8024b62:	46bd      	mov	sp, r7
 8024b64:	bdb0      	pop	{r4, r5, r7, pc}

08024b66 <_ZNK14FrameContainerI14ServoDataFrameE3GetEjRS0_>:
	bool Get(size_t seq, T &frame) const {
 8024b66:	b590      	push	{r4, r7, lr}
 8024b68:	b085      	sub	sp, #20
 8024b6a:	af00      	add	r7, sp, #0
 8024b6c:	60f8      	str	r0, [r7, #12]
 8024b6e:	60b9      	str	r1, [r7, #8]
 8024b70:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8024b72:	68fb      	ldr	r3, [r7, #12]
 8024b74:	4618      	mov	r0, r3
 8024b76:	f001 f830 	bl	8025bda <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE5emptyEv>
 8024b7a:	4603      	mov	r3, r0
 8024b7c:	2b00      	cmp	r3, #0
 8024b7e:	d001      	beq.n	8024b84 <_ZNK14FrameContainerI14ServoDataFrameE3GetEjRS0_+0x1e>
			return false;
 8024b80:	2300      	movs	r3, #0
 8024b82:	e033      	b.n	8024bec <_ZNK14FrameContainerI14ServoDataFrameE3GetEjRS0_+0x86>
		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 8024b84:	68fb      	ldr	r3, [r7, #12]
 8024b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024b88:	461a      	mov	r2, r3
 8024b8a:	68bb      	ldr	r3, [r7, #8]
 8024b8c:	4293      	cmp	r3, r2
 8024b8e:	d30b      	bcc.n	8024ba8 <_ZNK14FrameContainerI14ServoDataFrameE3GetEjRS0_+0x42>
 8024b90:	68fb      	ldr	r3, [r7, #12]
 8024b92:	4618      	mov	r0, r3
 8024b94:	f000 fa33 	bl	8024ffe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE4sizeEv>
 8024b98:	4602      	mov	r2, r0
 8024b9a:	68fb      	ldr	r3, [r7, #12]
 8024b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024b9e:	4413      	add	r3, r2
 8024ba0:	3b01      	subs	r3, #1
 8024ba2:	68ba      	ldr	r2, [r7, #8]
 8024ba4:	429a      	cmp	r2, r3
 8024ba6:	d901      	bls.n	8024bac <_ZNK14FrameContainerI14ServoDataFrameE3GetEjRS0_+0x46>
 8024ba8:	2301      	movs	r3, #1
 8024baa:	e000      	b.n	8024bae <_ZNK14FrameContainerI14ServoDataFrameE3GetEjRS0_+0x48>
 8024bac:	2300      	movs	r3, #0
 8024bae:	2b00      	cmp	r3, #0
 8024bb0:	d001      	beq.n	8024bb6 <_ZNK14FrameContainerI14ServoDataFrameE3GetEjRS0_+0x50>
			return false;
 8024bb2:	2300      	movs	r3, #0
 8024bb4:	e01a      	b.n	8024bec <_ZNK14FrameContainerI14ServoDataFrameE3GetEjRS0_+0x86>
		frame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 8024bb6:	68fc      	ldr	r4, [r7, #12]
 8024bb8:	68fb      	ldr	r3, [r7, #12]
 8024bba:	4618      	mov	r0, r3
 8024bbc:	f000 fa1f 	bl	8024ffe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE4sizeEv>
 8024bc0:	4602      	mov	r2, r0
 8024bc2:	68fb      	ldr	r3, [r7, #12]
 8024bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024bc6:	4619      	mov	r1, r3
 8024bc8:	68bb      	ldr	r3, [r7, #8]
 8024bca:	1acb      	subs	r3, r1, r3
 8024bcc:	4413      	add	r3, r2
 8024bce:	3b01      	subs	r3, #1
 8024bd0:	4619      	mov	r1, r3
 8024bd2:	4620      	mov	r0, r4
 8024bd4:	f001 f813 	bl	8025bfe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EEixEj>
 8024bd8:	4602      	mov	r2, r0
 8024bda:	687b      	ldr	r3, [r7, #4]
 8024bdc:	4618      	mov	r0, r3
 8024bde:	4611      	mov	r1, r2
 8024be0:	f240 1309 	movw	r3, #265	; 0x109
 8024be4:	461a      	mov	r2, r3
 8024be6:	f01b fb59 	bl	804029c <memcpy>
		return true;
 8024bea:	2301      	movs	r3, #1
	}
 8024bec:	4618      	mov	r0, r3
 8024bee:	3714      	adds	r7, #20
 8024bf0:	46bd      	mov	sp, r7
 8024bf2:	bd90      	pop	{r4, r7, pc}

08024bf4 <_ZNK14FrameContainerI8IMUFrameE7GetInfoEv>:
	Info GetInfo() const {
 8024bf4:	b580      	push	{r7, lr}
 8024bf6:	b084      	sub	sp, #16
 8024bf8:	af00      	add	r7, sp, #0
 8024bfa:	6078      	str	r0, [r7, #4]
 8024bfc:	6039      	str	r1, [r7, #0]
		uint16_t size = FrameQueue.size();
 8024bfe:	683b      	ldr	r3, [r7, #0]
 8024c00:	4618      	mov	r0, r3
 8024c02:	f000 f9b5 	bl	8024f70 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8024c06:	4603      	mov	r3, r0
 8024c08:	81fb      	strh	r3, [r7, #14]
		return {FirstSeq, size, MaxFrames};
 8024c0a:	683b      	ldr	r3, [r7, #0]
 8024c0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8024c0e:	687b      	ldr	r3, [r7, #4]
 8024c10:	801a      	strh	r2, [r3, #0]
 8024c12:	687b      	ldr	r3, [r7, #4]
 8024c14:	89fa      	ldrh	r2, [r7, #14]
 8024c16:	805a      	strh	r2, [r3, #2]
 8024c18:	683b      	ldr	r3, [r7, #0]
 8024c1a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8024c1c:	687b      	ldr	r3, [r7, #4]
 8024c1e:	809a      	strh	r2, [r3, #4]
	}
 8024c20:	6878      	ldr	r0, [r7, #4]
 8024c22:	3710      	adds	r7, #16
 8024c24:	46bd      	mov	sp, r7
 8024c26:	bd80      	pop	{r7, pc}

08024c28 <_ZN14FrameContainerI8IMUFrameE4Info11SerializeToEPPh>:
		void SerializeTo(uint8_t **ptr) {
 8024c28:	b580      	push	{r7, lr}
 8024c2a:	b082      	sub	sp, #8
 8024c2c:	af00      	add	r7, sp, #0
 8024c2e:	6078      	str	r0, [r7, #4]
 8024c30:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8024c32:	683b      	ldr	r3, [r7, #0]
 8024c34:	2b00      	cmp	r3, #0
 8024c36:	d106      	bne.n	8024c46 <_ZN14FrameContainerI8IMUFrameE4Info11SerializeToEPPh+0x1e>
 8024c38:	4b19      	ldr	r3, [pc, #100]	; (8024ca0 <_ZN14FrameContainerI8IMUFrameE4Info11SerializeToEPPh+0x78>)
 8024c3a:	4a1a      	ldr	r2, [pc, #104]	; (8024ca4 <_ZN14FrameContainerI8IMUFrameE4Info11SerializeToEPPh+0x7c>)
 8024c3c:	f240 21cb 	movw	r1, #715	; 0x2cb
 8024c40:	4819      	ldr	r0, [pc, #100]	; (8024ca8 <_ZN14FrameContainerI8IMUFrameE4Info11SerializeToEPPh+0x80>)
 8024c42:	f01b fac1 	bl	80401c8 <__assert_func>
			assert(*ptr);
 8024c46:	683b      	ldr	r3, [r7, #0]
 8024c48:	681b      	ldr	r3, [r3, #0]
 8024c4a:	2b00      	cmp	r3, #0
 8024c4c:	d106      	bne.n	8024c5c <_ZN14FrameContainerI8IMUFrameE4Info11SerializeToEPPh+0x34>
 8024c4e:	4b17      	ldr	r3, [pc, #92]	; (8024cac <_ZN14FrameContainerI8IMUFrameE4Info11SerializeToEPPh+0x84>)
 8024c50:	4a14      	ldr	r2, [pc, #80]	; (8024ca4 <_ZN14FrameContainerI8IMUFrameE4Info11SerializeToEPPh+0x7c>)
 8024c52:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024c56:	4814      	ldr	r0, [pc, #80]	; (8024ca8 <_ZN14FrameContainerI8IMUFrameE4Info11SerializeToEPPh+0x80>)
 8024c58:	f01b fab6 	bl	80401c8 <__assert_func>
			*reinterpret_cast<uint16_t*>(*ptr) = First;
 8024c5c:	683b      	ldr	r3, [r7, #0]
 8024c5e:	681b      	ldr	r3, [r3, #0]
 8024c60:	687a      	ldr	r2, [r7, #4]
 8024c62:	8812      	ldrh	r2, [r2, #0]
 8024c64:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8024c66:	683b      	ldr	r3, [r7, #0]
 8024c68:	681b      	ldr	r3, [r3, #0]
 8024c6a:	1c9a      	adds	r2, r3, #2
 8024c6c:	683b      	ldr	r3, [r7, #0]
 8024c6e:	601a      	str	r2, [r3, #0]
			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 8024c70:	683b      	ldr	r3, [r7, #0]
 8024c72:	681b      	ldr	r3, [r3, #0]
 8024c74:	687a      	ldr	r2, [r7, #4]
 8024c76:	8852      	ldrh	r2, [r2, #2]
 8024c78:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8024c7a:	683b      	ldr	r3, [r7, #0]
 8024c7c:	681b      	ldr	r3, [r3, #0]
 8024c7e:	1c9a      	adds	r2, r3, #2
 8024c80:	683b      	ldr	r3, [r7, #0]
 8024c82:	601a      	str	r2, [r3, #0]
			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 8024c84:	683b      	ldr	r3, [r7, #0]
 8024c86:	681b      	ldr	r3, [r3, #0]
 8024c88:	687a      	ldr	r2, [r7, #4]
 8024c8a:	8892      	ldrh	r2, [r2, #4]
 8024c8c:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8024c8e:	683b      	ldr	r3, [r7, #0]
 8024c90:	681b      	ldr	r3, [r3, #0]
 8024c92:	1c9a      	adds	r2, r3, #2
 8024c94:	683b      	ldr	r3, [r7, #0]
 8024c96:	601a      	str	r2, [r3, #0]
		}
 8024c98:	bf00      	nop
 8024c9a:	3708      	adds	r7, #8
 8024c9c:	46bd      	mov	sp, r7
 8024c9e:	bd80      	pop	{r7, pc}
 8024ca0:	0804139c 	.word	0x0804139c
 8024ca4:	08041e38 	.word	0x08041e38
 8024ca8:	080413d0 	.word	0x080413d0
 8024cac:	080413ec 	.word	0x080413ec

08024cb0 <_ZNK14FrameContainerI14ServoDataFrameE7GetInfoEv>:
	Info GetInfo() const {
 8024cb0:	b580      	push	{r7, lr}
 8024cb2:	b084      	sub	sp, #16
 8024cb4:	af00      	add	r7, sp, #0
 8024cb6:	6078      	str	r0, [r7, #4]
 8024cb8:	6039      	str	r1, [r7, #0]
		uint16_t size = FrameQueue.size();
 8024cba:	683b      	ldr	r3, [r7, #0]
 8024cbc:	4618      	mov	r0, r3
 8024cbe:	f000 f99e 	bl	8024ffe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE4sizeEv>
 8024cc2:	4603      	mov	r3, r0
 8024cc4:	81fb      	strh	r3, [r7, #14]
		return {FirstSeq, size, MaxFrames};
 8024cc6:	683b      	ldr	r3, [r7, #0]
 8024cc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8024cca:	687b      	ldr	r3, [r7, #4]
 8024ccc:	801a      	strh	r2, [r3, #0]
 8024cce:	687b      	ldr	r3, [r7, #4]
 8024cd0:	89fa      	ldrh	r2, [r7, #14]
 8024cd2:	805a      	strh	r2, [r3, #2]
 8024cd4:	683b      	ldr	r3, [r7, #0]
 8024cd6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8024cd8:	687b      	ldr	r3, [r7, #4]
 8024cda:	809a      	strh	r2, [r3, #4]
	}
 8024cdc:	6878      	ldr	r0, [r7, #4]
 8024cde:	3710      	adds	r7, #16
 8024ce0:	46bd      	mov	sp, r7
 8024ce2:	bd80      	pop	{r7, pc}

08024ce4 <_ZN14FrameContainerI14ServoDataFrameE4Info11SerializeToEPPh>:
		void SerializeTo(uint8_t **ptr) {
 8024ce4:	b580      	push	{r7, lr}
 8024ce6:	b082      	sub	sp, #8
 8024ce8:	af00      	add	r7, sp, #0
 8024cea:	6078      	str	r0, [r7, #4]
 8024cec:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8024cee:	683b      	ldr	r3, [r7, #0]
 8024cf0:	2b00      	cmp	r3, #0
 8024cf2:	d106      	bne.n	8024d02 <_ZN14FrameContainerI14ServoDataFrameE4Info11SerializeToEPPh+0x1e>
 8024cf4:	4b19      	ldr	r3, [pc, #100]	; (8024d5c <_ZN14FrameContainerI14ServoDataFrameE4Info11SerializeToEPPh+0x78>)
 8024cf6:	4a1a      	ldr	r2, [pc, #104]	; (8024d60 <_ZN14FrameContainerI14ServoDataFrameE4Info11SerializeToEPPh+0x7c>)
 8024cf8:	f240 21cb 	movw	r1, #715	; 0x2cb
 8024cfc:	4819      	ldr	r0, [pc, #100]	; (8024d64 <_ZN14FrameContainerI14ServoDataFrameE4Info11SerializeToEPPh+0x80>)
 8024cfe:	f01b fa63 	bl	80401c8 <__assert_func>
			assert(*ptr);
 8024d02:	683b      	ldr	r3, [r7, #0]
 8024d04:	681b      	ldr	r3, [r3, #0]
 8024d06:	2b00      	cmp	r3, #0
 8024d08:	d106      	bne.n	8024d18 <_ZN14FrameContainerI14ServoDataFrameE4Info11SerializeToEPPh+0x34>
 8024d0a:	4b17      	ldr	r3, [pc, #92]	; (8024d68 <_ZN14FrameContainerI14ServoDataFrameE4Info11SerializeToEPPh+0x84>)
 8024d0c:	4a14      	ldr	r2, [pc, #80]	; (8024d60 <_ZN14FrameContainerI14ServoDataFrameE4Info11SerializeToEPPh+0x7c>)
 8024d0e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024d12:	4814      	ldr	r0, [pc, #80]	; (8024d64 <_ZN14FrameContainerI14ServoDataFrameE4Info11SerializeToEPPh+0x80>)
 8024d14:	f01b fa58 	bl	80401c8 <__assert_func>
			*reinterpret_cast<uint16_t*>(*ptr) = First;
 8024d18:	683b      	ldr	r3, [r7, #0]
 8024d1a:	681b      	ldr	r3, [r3, #0]
 8024d1c:	687a      	ldr	r2, [r7, #4]
 8024d1e:	8812      	ldrh	r2, [r2, #0]
 8024d20:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8024d22:	683b      	ldr	r3, [r7, #0]
 8024d24:	681b      	ldr	r3, [r3, #0]
 8024d26:	1c9a      	adds	r2, r3, #2
 8024d28:	683b      	ldr	r3, [r7, #0]
 8024d2a:	601a      	str	r2, [r3, #0]
			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 8024d2c:	683b      	ldr	r3, [r7, #0]
 8024d2e:	681b      	ldr	r3, [r3, #0]
 8024d30:	687a      	ldr	r2, [r7, #4]
 8024d32:	8852      	ldrh	r2, [r2, #2]
 8024d34:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8024d36:	683b      	ldr	r3, [r7, #0]
 8024d38:	681b      	ldr	r3, [r3, #0]
 8024d3a:	1c9a      	adds	r2, r3, #2
 8024d3c:	683b      	ldr	r3, [r7, #0]
 8024d3e:	601a      	str	r2, [r3, #0]
			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 8024d40:	683b      	ldr	r3, [r7, #0]
 8024d42:	681b      	ldr	r3, [r3, #0]
 8024d44:	687a      	ldr	r2, [r7, #4]
 8024d46:	8892      	ldrh	r2, [r2, #4]
 8024d48:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8024d4a:	683b      	ldr	r3, [r7, #0]
 8024d4c:	681b      	ldr	r3, [r3, #0]
 8024d4e:	1c9a      	adds	r2, r3, #2
 8024d50:	683b      	ldr	r3, [r7, #0]
 8024d52:	601a      	str	r2, [r3, #0]
		}
 8024d54:	bf00      	nop
 8024d56:	3708      	adds	r7, #8
 8024d58:	46bd      	mov	sp, r7
 8024d5a:	bd80      	pop	{r7, pc}
 8024d5c:	0804139c 	.word	0x0804139c
 8024d60:	08041e9c 	.word	0x08041e9c
 8024d64:	080413d0 	.word	0x080413d0
 8024d68:	080413ec 	.word	0x080413ec

08024d6c <_ZSt4moveIRSt5dequeI8IMUFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8024d6c:	b480      	push	{r7}
 8024d6e:	b083      	sub	sp, #12
 8024d70:	af00      	add	r7, sp, #0
 8024d72:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8024d74:	687b      	ldr	r3, [r7, #4]
 8024d76:	4618      	mov	r0, r3
 8024d78:	370c      	adds	r7, #12
 8024d7a:	46bd      	mov	sp, r7
 8024d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d80:	4770      	bx	lr

08024d82 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8024d82:	b590      	push	{r4, r7, lr}
 8024d84:	b085      	sub	sp, #20
 8024d86:	af00      	add	r7, sp, #0
 8024d88:	60f8      	str	r0, [r7, #12]
 8024d8a:	60b9      	str	r1, [r7, #8]
 8024d8c:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8024d8e:	68fb      	ldr	r3, [r7, #12]
 8024d90:	68ba      	ldr	r2, [r7, #8]
 8024d92:	4611      	mov	r1, r2
 8024d94:	4618      	mov	r0, r3
 8024d96:	f000 ff43 	bl	8025c20 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8024d9a:	68b8      	ldr	r0, [r7, #8]
 8024d9c:	f000 ff4d 	bl	8025c3a <_ZNSt5dequeI8IMUFrameSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8024da0:	68fb      	ldr	r3, [r7, #12]
 8024da2:	4618      	mov	r0, r3
 8024da4:	f7ff fc47 	bl	8024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8024da8:	4604      	mov	r4, r0
 8024daa:	68bb      	ldr	r3, [r7, #8]
 8024dac:	4618      	mov	r0, r3
 8024dae:	f7ff fc42 	bl	8024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8024db2:	4603      	mov	r3, r0
 8024db4:	4619      	mov	r1, r3
 8024db6:	4620      	mov	r0, r4
 8024db8:	f000 ff53 	bl	8025c62 <_ZSt15__alloc_on_moveISaI8IMUFrameEEvRT_S3_>
      }
 8024dbc:	bf00      	nop
 8024dbe:	3714      	adds	r7, #20
 8024dc0:	46bd      	mov	sp, r7
 8024dc2:	bd90      	pop	{r4, r7, pc}

08024dc4 <_ZSt4moveIRSt5dequeI14ServoDataFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8024dc4:	b480      	push	{r7}
 8024dc6:	b083      	sub	sp, #12
 8024dc8:	af00      	add	r7, sp, #0
 8024dca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8024dcc:	687b      	ldr	r3, [r7, #4]
 8024dce:	4618      	mov	r0, r3
 8024dd0:	370c      	adds	r7, #12
 8024dd2:	46bd      	mov	sp, r7
 8024dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dd8:	4770      	bx	lr

08024dda <_ZNSt5dequeI14ServoDataFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8024dda:	b590      	push	{r4, r7, lr}
 8024ddc:	b085      	sub	sp, #20
 8024dde:	af00      	add	r7, sp, #0
 8024de0:	60f8      	str	r0, [r7, #12]
 8024de2:	60b9      	str	r1, [r7, #8]
 8024de4:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8024de6:	68fb      	ldr	r3, [r7, #12]
 8024de8:	68ba      	ldr	r2, [r7, #8]
 8024dea:	4611      	mov	r1, r2
 8024dec:	4618      	mov	r0, r3
 8024dee:	f000 ff46 	bl	8025c7e <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8024df2:	68b8      	ldr	r0, [r7, #8]
 8024df4:	f000 ff50 	bl	8025c98 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8024df8:	68fb      	ldr	r3, [r7, #12]
 8024dfa:	4618      	mov	r0, r3
 8024dfc:	f7ff fc6d 	bl	80246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8024e00:	4604      	mov	r4, r0
 8024e02:	68bb      	ldr	r3, [r7, #8]
 8024e04:	4618      	mov	r0, r3
 8024e06:	f7ff fc68 	bl	80246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8024e0a:	4603      	mov	r3, r0
 8024e0c:	4619      	mov	r1, r3
 8024e0e:	4620      	mov	r0, r4
 8024e10:	f000 ff56 	bl	8025cc0 <_ZSt15__alloc_on_moveISaI14ServoDataFrameEEvRT_S3_>
      }
 8024e14:	bf00      	nop
 8024e16:	3714      	adds	r7, #20
 8024e18:	46bd      	mov	sp, r7
 8024e1a:	bd90      	pop	{r4, r7, pc}

08024e1c <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8024e1c:	b480      	push	{r7}
 8024e1e:	b083      	sub	sp, #12
 8024e20:	af00      	add	r7, sp, #0
 8024e22:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8024e24:	687b      	ldr	r3, [r7, #4]
 8024e26:	4618      	mov	r0, r3
 8024e28:	370c      	adds	r7, #12
 8024e2a:	46bd      	mov	sp, r7
 8024e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e30:	4770      	bx	lr

08024e32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8024e32:	b590      	push	{r4, r7, lr}
 8024e34:	b085      	sub	sp, #20
 8024e36:	af00      	add	r7, sp, #0
 8024e38:	60f8      	str	r0, [r7, #12]
 8024e3a:	60b9      	str	r1, [r7, #8]
 8024e3c:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8024e3e:	68fb      	ldr	r3, [r7, #12]
 8024e40:	68ba      	ldr	r2, [r7, #8]
 8024e42:	4611      	mov	r1, r2
 8024e44:	4618      	mov	r0, r3
 8024e46:	f000 ff49 	bl	8025cdc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>
	__x.clear();
 8024e4a:	68b8      	ldr	r0, [r7, #8]
 8024e4c:	f000 ff53 	bl	8025cf6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8024e50:	68fb      	ldr	r3, [r7, #12]
 8024e52:	4618      	mov	r0, r3
 8024e54:	f7ff fae0 	bl	8024418 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024e58:	4604      	mov	r4, r0
 8024e5a:	68bb      	ldr	r3, [r7, #8]
 8024e5c:	4618      	mov	r0, r3
 8024e5e:	f7ff fadb 	bl	8024418 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024e62:	4603      	mov	r3, r0
 8024e64:	4619      	mov	r1, r3
 8024e66:	4620      	mov	r0, r4
 8024e68:	f000 ff59 	bl	8025d1e <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>
      }
 8024e6c:	bf00      	nop
 8024e6e:	3714      	adds	r7, #20
 8024e70:	46bd      	mov	sp, r7
 8024e72:	bd90      	pop	{r4, r7, pc}

08024e74 <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8024e74:	b480      	push	{r7}
 8024e76:	b083      	sub	sp, #12
 8024e78:	af00      	add	r7, sp, #0
 8024e7a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8024e7c:	687b      	ldr	r3, [r7, #4]
 8024e7e:	4618      	mov	r0, r3
 8024e80:	370c      	adds	r7, #12
 8024e82:	46bd      	mov	sp, r7
 8024e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e88:	4770      	bx	lr

08024e8a <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8024e8a:	b590      	push	{r4, r7, lr}
 8024e8c:	b085      	sub	sp, #20
 8024e8e:	af00      	add	r7, sp, #0
 8024e90:	60f8      	str	r0, [r7, #12]
 8024e92:	60b9      	str	r1, [r7, #8]
 8024e94:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8024e96:	68fb      	ldr	r3, [r7, #12]
 8024e98:	68ba      	ldr	r2, [r7, #8]
 8024e9a:	4611      	mov	r1, r2
 8024e9c:	4618      	mov	r0, r3
 8024e9e:	f000 ff4c 	bl	8025d3a <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>
	__x.clear();
 8024ea2:	68b8      	ldr	r0, [r7, #8]
 8024ea4:	f000 ff56 	bl	8025d54 <_ZNSt5dequeIjSaIjEE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8024ea8:	68fb      	ldr	r3, [r7, #12]
 8024eaa:	4618      	mov	r0, r3
 8024eac:	f7ff fda5 	bl	80249fa <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8024eb0:	4604      	mov	r4, r0
 8024eb2:	68bb      	ldr	r3, [r7, #8]
 8024eb4:	4618      	mov	r0, r3
 8024eb6:	f7ff fda0 	bl	80249fa <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8024eba:	4603      	mov	r3, r0
 8024ebc:	4619      	mov	r1, r3
 8024ebe:	4620      	mov	r0, r4
 8024ec0:	f000 ff5c 	bl	8025d7c <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>
      }
 8024ec4:	bf00      	nop
 8024ec6:	3714      	adds	r7, #20
 8024ec8:	46bd      	mov	sp, r7
 8024eca:	bd90      	pop	{r4, r7, pc}

08024ecc <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8024ecc:	b480      	push	{r7}
 8024ece:	b083      	sub	sp, #12
 8024ed0:	af00      	add	r7, sp, #0
 8024ed2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8024ed4:	687b      	ldr	r3, [r7, #4]
 8024ed6:	4618      	mov	r0, r3
 8024ed8:	370c      	adds	r7, #12
 8024eda:	46bd      	mov	sp, r7
 8024edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ee0:	4770      	bx	lr

08024ee2 <_ZNSt5dequeIjSaIjEE9push_backEOj>:
      push_back(value_type&& __x)
 8024ee2:	b580      	push	{r7, lr}
 8024ee4:	b082      	sub	sp, #8
 8024ee6:	af00      	add	r7, sp, #0
 8024ee8:	6078      	str	r0, [r7, #4]
 8024eea:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8024eec:	6838      	ldr	r0, [r7, #0]
 8024eee:	f7ff ffed 	bl	8024ecc <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>
 8024ef2:	4603      	mov	r3, r0
 8024ef4:	4619      	mov	r1, r3
 8024ef6:	6878      	ldr	r0, [r7, #4]
 8024ef8:	f000 ff4e 	bl	8025d98 <_ZNSt5dequeIjSaIjEE12emplace_backIJjEEEvDpOT_>
 8024efc:	bf00      	nop
 8024efe:	3708      	adds	r7, #8
 8024f00:	46bd      	mov	sp, r7
 8024f02:	bd80      	pop	{r7, pc}

08024f04 <_ZNSt5dequeIjSaIjEE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8024f04:	b580      	push	{r7, lr}
 8024f06:	b086      	sub	sp, #24
 8024f08:	af00      	add	r7, sp, #0
 8024f0a:	6078      	str	r0, [r7, #4]
	return *begin();
 8024f0c:	f107 0308 	add.w	r3, r7, #8
 8024f10:	6879      	ldr	r1, [r7, #4]
 8024f12:	4618      	mov	r0, r3
 8024f14:	f7ff fd53 	bl	80249be <_ZNSt5dequeIjSaIjEE5beginEv>
 8024f18:	f107 0308 	add.w	r3, r7, #8
 8024f1c:	4618      	mov	r0, r3
 8024f1e:	f000 ff65 	bl	8025dec <_ZNKSt15_Deque_iteratorIjRjPjEdeEv>
 8024f22:	4603      	mov	r3, r0
      }
 8024f24:	4618      	mov	r0, r3
 8024f26:	3718      	adds	r7, #24
 8024f28:	46bd      	mov	sp, r7
 8024f2a:	bd80      	pop	{r7, pc}

08024f2c <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontERKS0_>:
      push_front(const value_type& __x)
 8024f2c:	b580      	push	{r7, lr}
 8024f2e:	b082      	sub	sp, #8
 8024f30:	af00      	add	r7, sp, #0
 8024f32:	6078      	str	r0, [r7, #4]
 8024f34:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8024f36:	687b      	ldr	r3, [r7, #4]
 8024f38:	689a      	ldr	r2, [r3, #8]
 8024f3a:	687b      	ldr	r3, [r7, #4]
 8024f3c:	68db      	ldr	r3, [r3, #12]
 8024f3e:	429a      	cmp	r2, r3
 8024f40:	d00e      	beq.n	8024f60 <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontERKS0_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 8024f42:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8024f44:	687b      	ldr	r3, [r7, #4]
 8024f46:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8024f48:	3b18      	subs	r3, #24
 8024f4a:	683a      	ldr	r2, [r7, #0]
 8024f4c:	4619      	mov	r1, r3
 8024f4e:	f000 ff59 	bl	8025e04 <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 8024f52:	687b      	ldr	r3, [r7, #4]
 8024f54:	689b      	ldr	r3, [r3, #8]
 8024f56:	f1a3 0218 	sub.w	r2, r3, #24
 8024f5a:	687b      	ldr	r3, [r7, #4]
 8024f5c:	609a      	str	r2, [r3, #8]
      }
 8024f5e:	e003      	b.n	8024f68 <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontERKS0_+0x3c>
	  _M_push_front_aux(__x);
 8024f60:	6839      	ldr	r1, [r7, #0]
 8024f62:	6878      	ldr	r0, [r7, #4]
 8024f64:	f000 ff62 	bl	8025e2c <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJRKS0_EEEvDpOT_>
      }
 8024f68:	bf00      	nop
 8024f6a:	3708      	adds	r7, #8
 8024f6c:	46bd      	mov	sp, r7
 8024f6e:	bd80      	pop	{r7, pc}

08024f70 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8024f70:	b580      	push	{r7, lr}
 8024f72:	b082      	sub	sp, #8
 8024f74:	af00      	add	r7, sp, #0
 8024f76:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8024f78:	687b      	ldr	r3, [r7, #4]
 8024f7a:	f103 0218 	add.w	r2, r3, #24
 8024f7e:	687b      	ldr	r3, [r7, #4]
 8024f80:	3308      	adds	r3, #8
 8024f82:	4619      	mov	r1, r3
 8024f84:	4610      	mov	r0, r2
 8024f86:	f000 ff97 	bl	8025eb8 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 8024f8a:	4603      	mov	r3, r0
 8024f8c:	4618      	mov	r0, r3
 8024f8e:	3708      	adds	r7, #8
 8024f90:	46bd      	mov	sp, r7
 8024f92:	bd80      	pop	{r7, pc}

08024f94 <_ZN14FrameContainerI8IMUFrameE6RemoveEv>:
	void Remove() {
 8024f94:	b580      	push	{r7, lr}
 8024f96:	b082      	sub	sp, #8
 8024f98:	af00      	add	r7, sp, #0
 8024f9a:	6078      	str	r0, [r7, #4]
		FrameQueue.pop_back();
 8024f9c:	687b      	ldr	r3, [r7, #4]
 8024f9e:	4618      	mov	r0, r3
 8024fa0:	f000 ffb6 	bl	8025f10 <_ZNSt5dequeI8IMUFrameSaIS0_EE8pop_backEv>
		FirstSeq++;
 8024fa4:	687b      	ldr	r3, [r7, #4]
 8024fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024fa8:	3301      	adds	r3, #1
 8024faa:	b29a      	uxth	r2, r3
 8024fac:	687b      	ldr	r3, [r7, #4]
 8024fae:	851a      	strh	r2, [r3, #40]	; 0x28
	}
 8024fb0:	bf00      	nop
 8024fb2:	3708      	adds	r7, #8
 8024fb4:	46bd      	mov	sp, r7
 8024fb6:	bd80      	pop	{r7, pc}

08024fb8 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE10push_frontERKS0_>:
      push_front(const value_type& __x)
 8024fb8:	b580      	push	{r7, lr}
 8024fba:	b082      	sub	sp, #8
 8024fbc:	af00      	add	r7, sp, #0
 8024fbe:	6078      	str	r0, [r7, #4]
 8024fc0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8024fc2:	687b      	ldr	r3, [r7, #4]
 8024fc4:	689a      	ldr	r2, [r3, #8]
 8024fc6:	687b      	ldr	r3, [r7, #4]
 8024fc8:	68db      	ldr	r3, [r3, #12]
 8024fca:	429a      	cmp	r2, r3
 8024fcc:	d00f      	beq.n	8024fee <_ZNSt5dequeI14ServoDataFrameSaIS0_EE10push_frontERKS0_+0x36>
	    _Alloc_traits::construct(this->_M_impl,
 8024fce:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8024fd0:	687b      	ldr	r3, [r7, #4]
 8024fd2:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8024fd4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8024fd8:	683a      	ldr	r2, [r7, #0]
 8024fda:	4619      	mov	r1, r3
 8024fdc:	f000 ffbb 	bl	8025f56 <_ZNSt16allocator_traitsISaI14ServoDataFrameEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 8024fe0:	687b      	ldr	r3, [r7, #4]
 8024fe2:	689b      	ldr	r3, [r3, #8]
 8024fe4:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8024fe8:	687b      	ldr	r3, [r7, #4]
 8024fea:	609a      	str	r2, [r3, #8]
      }
 8024fec:	e003      	b.n	8024ff6 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE10push_frontERKS0_+0x3e>
	  _M_push_front_aux(__x);
 8024fee:	6839      	ldr	r1, [r7, #0]
 8024ff0:	6878      	ldr	r0, [r7, #4]
 8024ff2:	f000 ffc3 	bl	8025f7c <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_push_front_auxIJRKS0_EEEvDpOT_>
      }
 8024ff6:	bf00      	nop
 8024ff8:	3708      	adds	r7, #8
 8024ffa:	46bd      	mov	sp, r7
 8024ffc:	bd80      	pop	{r7, pc}

08024ffe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8024ffe:	b580      	push	{r7, lr}
 8025000:	b082      	sub	sp, #8
 8025002:	af00      	add	r7, sp, #0
 8025004:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8025006:	687b      	ldr	r3, [r7, #4]
 8025008:	f103 0218 	add.w	r2, r3, #24
 802500c:	687b      	ldr	r3, [r7, #4]
 802500e:	3308      	adds	r3, #8
 8025010:	4619      	mov	r1, r3
 8025012:	4610      	mov	r0, r2
 8025014:	f000 fff8 	bl	8026008 <_ZStmiRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_ES5_>
 8025018:	4603      	mov	r3, r0
 802501a:	4618      	mov	r0, r3
 802501c:	3708      	adds	r7, #8
 802501e:	46bd      	mov	sp, r7
 8025020:	bd80      	pop	{r7, pc}

08025022 <_ZN14FrameContainerI14ServoDataFrameE6RemoveEv>:
	void Remove() {
 8025022:	b580      	push	{r7, lr}
 8025024:	b082      	sub	sp, #8
 8025026:	af00      	add	r7, sp, #0
 8025028:	6078      	str	r0, [r7, #4]
		FrameQueue.pop_back();
 802502a:	687b      	ldr	r3, [r7, #4]
 802502c:	4618      	mov	r0, r3
 802502e:	f001 f817 	bl	8026060 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE8pop_backEv>
		FirstSeq++;
 8025032:	687b      	ldr	r3, [r7, #4]
 8025034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025036:	3301      	adds	r3, #1
 8025038:	b29a      	uxth	r2, r3
 802503a:	687b      	ldr	r3, [r7, #4]
 802503c:	851a      	strh	r2, [r3, #40]	; 0x28
	}
 802503e:	bf00      	nop
 8025040:	3708      	adds	r7, #8
 8025042:	46bd      	mov	sp, r7
 8025044:	bd80      	pop	{r7, pc}

08025046 <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8025046:	b480      	push	{r7}
 8025048:	b083      	sub	sp, #12
 802504a:	af00      	add	r7, sp, #0
 802504c:	6078      	str	r0, [r7, #4]
 802504e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8025050:	683a      	ldr	r2, [r7, #0]
 8025052:	4613      	mov	r3, r2
 8025054:	015b      	lsls	r3, r3, #5
 8025056:	4413      	add	r3, r2
 8025058:	00db      	lsls	r3, r3, #3
 802505a:	687a      	ldr	r2, [r7, #4]
 802505c:	4413      	add	r3, r2
 802505e:	4618      	mov	r0, r3
 8025060:	370c      	adds	r7, #12
 8025062:	46bd      	mov	sp, r7
 8025064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025068:	4770      	bx	lr

0802506a <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 802506a:	b480      	push	{r7}
 802506c:	b083      	sub	sp, #12
 802506e:	af00      	add	r7, sp, #0
 8025070:	6078      	str	r0, [r7, #4]
 8025072:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8025074:	683b      	ldr	r3, [r7, #0]
 8025076:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802507a:	fb02 f303 	mul.w	r3, r2, r3
 802507e:	687a      	ldr	r2, [r7, #4]
 8025080:	4413      	add	r3, r2
 8025082:	4618      	mov	r0, r3
 8025084:	370c      	adds	r7, #12
 8025086:	46bd      	mov	sp, r7
 8025088:	f85d 7b04 	ldr.w	r7, [sp], #4
 802508c:	4770      	bx	lr

0802508e <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 802508e:	b480      	push	{r7}
 8025090:	b083      	sub	sp, #12
 8025092:	af00      	add	r7, sp, #0
 8025094:	6078      	str	r0, [r7, #4]
 8025096:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8025098:	683b      	ldr	r3, [r7, #0]
 802509a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802509e:	fb02 f303 	mul.w	r3, r2, r3
 80250a2:	687a      	ldr	r2, [r7, #4]
 80250a4:	4413      	add	r3, r2
 80250a6:	4618      	mov	r0, r3
 80250a8:	370c      	adds	r7, #12
 80250aa:	46bd      	mov	sp, r7
 80250ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250b0:	4770      	bx	lr

080250b2 <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80250b2:	b580      	push	{r7, lr}
 80250b4:	b084      	sub	sp, #16
 80250b6:	af00      	add	r7, sp, #0
 80250b8:	60f8      	str	r0, [r7, #12]
 80250ba:	60b9      	str	r1, [r7, #8]
 80250bc:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80250be:	6878      	ldr	r0, [r7, #4]
 80250c0:	f000 fff1 	bl	80260a6 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 80250c4:	4603      	mov	r3, r0
 80250c6:	461a      	mov	r2, r3
 80250c8:	68b9      	ldr	r1, [r7, #8]
 80250ca:	68f8      	ldr	r0, [r7, #12]
 80250cc:	f000 fff6 	bl	80260bc <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>
	}
 80250d0:	bf00      	nop
 80250d2:	3710      	adds	r7, #16
 80250d4:	46bd      	mov	sp, r7
 80250d6:	bd80      	pop	{r7, pc}

080250d8 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80250d8:	b5b0      	push	{r4, r5, r7, lr}
 80250da:	b082      	sub	sp, #8
 80250dc:	af00      	add	r7, sp, #0
 80250de:	6078      	str	r0, [r7, #4]
 80250e0:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80250e2:	6878      	ldr	r0, [r7, #4]
 80250e4:	f001 f800 	bl	80260e8 <_ZNKSt5dequeIjSaIjEE4sizeEv>
 80250e8:	4604      	mov	r4, r0
 80250ea:	6878      	ldr	r0, [r7, #4]
 80250ec:	f001 f80e 	bl	802610c <_ZNKSt5dequeIjSaIjEE8max_sizeEv>
 80250f0:	4603      	mov	r3, r0
 80250f2:	429c      	cmp	r4, r3
 80250f4:	bf0c      	ite	eq
 80250f6:	2301      	moveq	r3, #1
 80250f8:	2300      	movne	r3, #0
 80250fa:	b2db      	uxtb	r3, r3
 80250fc:	2b00      	cmp	r3, #0
 80250fe:	d002      	beq.n	8025106 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x2e>
	  __throw_length_error(
 8025100:	4816      	ldr	r0, [pc, #88]	; (802515c <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x84>)
 8025102:	f01b f84b 	bl	804019c <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8025106:	2101      	movs	r1, #1
 8025108:	6878      	ldr	r0, [r7, #4]
 802510a:	f001 f810 	bl	802612e <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 802510e:	687a      	ldr	r2, [r7, #4]
 8025110:	687b      	ldr	r3, [r7, #4]
 8025112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025114:	1d1c      	adds	r4, r3, #4
 8025116:	4610      	mov	r0, r2
 8025118:	f001 f824 	bl	8026164 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 802511c:	4603      	mov	r3, r0
 802511e:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8025120:	687c      	ldr	r4, [r7, #4]
 8025122:	687b      	ldr	r3, [r7, #4]
 8025124:	699d      	ldr	r5, [r3, #24]
 8025126:	6838      	ldr	r0, [r7, #0]
 8025128:	f000 ffbd 	bl	80260a6 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 802512c:	4603      	mov	r3, r0
 802512e:	461a      	mov	r2, r3
 8025130:	4629      	mov	r1, r5
 8025132:	4620      	mov	r0, r4
 8025134:	f7ff ffbd 	bl	80250b2 <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8025138:	687b      	ldr	r3, [r7, #4]
 802513a:	f103 0218 	add.w	r2, r3, #24
 802513e:	687b      	ldr	r3, [r7, #4]
 8025140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025142:	3304      	adds	r3, #4
 8025144:	4619      	mov	r1, r3
 8025146:	4610      	mov	r0, r2
 8025148:	f001 f81e 	bl	8026188 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 802514c:	687b      	ldr	r3, [r7, #4]
 802514e:	69da      	ldr	r2, [r3, #28]
 8025150:	687b      	ldr	r3, [r7, #4]
 8025152:	619a      	str	r2, [r3, #24]
      }
 8025154:	bf00      	nop
 8025156:	3708      	adds	r7, #8
 8025158:	46bd      	mov	sp, r7
 802515a:	bdb0      	pop	{r4, r5, r7, pc}
 802515c:	08041e08 	.word	0x08041e08

08025160 <_ZNKSt5dequeIjSaIjEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8025160:	b580      	push	{r7, lr}
 8025162:	b082      	sub	sp, #8
 8025164:	af00      	add	r7, sp, #0
 8025166:	6078      	str	r0, [r7, #4]
 8025168:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 802516a:	683b      	ldr	r3, [r7, #0]
 802516c:	3308      	adds	r3, #8
 802516e:	4619      	mov	r1, r3
 8025170:	6878      	ldr	r0, [r7, #4]
 8025172:	f001 f835 	bl	80261e0 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>
 8025176:	6878      	ldr	r0, [r7, #4]
 8025178:	3708      	adds	r7, #8
 802517a:	46bd      	mov	sp, r7
 802517c:	bd80      	pop	{r7, pc}

0802517e <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 802517e:	b480      	push	{r7}
 8025180:	b083      	sub	sp, #12
 8025182:	af00      	add	r7, sp, #0
 8025184:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8025186:	687b      	ldr	r3, [r7, #4]
 8025188:	681b      	ldr	r3, [r3, #0]
 802518a:	4618      	mov	r0, r3
 802518c:	370c      	adds	r7, #12
 802518e:	46bd      	mov	sp, r7
 8025190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025194:	4770      	bx	lr

08025196 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8025196:	b480      	push	{r7}
 8025198:	b083      	sub	sp, #12
 802519a:	af00      	add	r7, sp, #0
 802519c:	6078      	str	r0, [r7, #4]
 802519e:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80251a0:	687b      	ldr	r3, [r7, #4]
 80251a2:	681a      	ldr	r2, [r3, #0]
 80251a4:	683b      	ldr	r3, [r7, #0]
 80251a6:	681b      	ldr	r3, [r3, #0]
 80251a8:	429a      	cmp	r2, r3
 80251aa:	bf0c      	ite	eq
 80251ac:	2301      	moveq	r3, #1
 80251ae:	2300      	movne	r3, #0
 80251b0:	b2db      	uxtb	r3, r3
 80251b2:	4618      	mov	r0, r3
 80251b4:	370c      	adds	r7, #12
 80251b6:	46bd      	mov	sp, r7
 80251b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251bc:	4770      	bx	lr

080251be <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80251be:	b580      	push	{r7, lr}
 80251c0:	b082      	sub	sp, #8
 80251c2:	af00      	add	r7, sp, #0
 80251c4:	6078      	str	r0, [r7, #4]
 80251c6:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80251c8:	6839      	ldr	r1, [r7, #0]
 80251ca:	6878      	ldr	r0, [r7, #4]
 80251cc:	f001 f824 	bl	8026218 <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>
	}
 80251d0:	bf00      	nop
 80251d2:	3708      	adds	r7, #8
 80251d4:	46bd      	mov	sp, r7
 80251d6:	bd80      	pop	{r7, pc}

080251d8 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 80251d8:	b580      	push	{r7, lr}
 80251da:	b082      	sub	sp, #8
 80251dc:	af00      	add	r7, sp, #0
 80251de:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80251e0:	687b      	ldr	r3, [r7, #4]
 80251e2:	4618      	mov	r0, r3
 80251e4:	f7ff fc09 	bl	80249fa <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80251e8:	4602      	mov	r2, r0
 80251ea:	687b      	ldr	r3, [r7, #4]
 80251ec:	689b      	ldr	r3, [r3, #8]
 80251ee:	4619      	mov	r1, r3
 80251f0:	4610      	mov	r0, r2
 80251f2:	f7ff ffe4 	bl	80251be <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 80251f6:	687a      	ldr	r2, [r7, #4]
 80251f8:	687b      	ldr	r3, [r7, #4]
 80251fa:	68db      	ldr	r3, [r3, #12]
 80251fc:	4619      	mov	r1, r3
 80251fe:	4610      	mov	r0, r2
 8025200:	f000 ffdb 	bl	80261ba <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8025204:	687b      	ldr	r3, [r7, #4]
 8025206:	f103 0208 	add.w	r2, r3, #8
 802520a:	687b      	ldr	r3, [r7, #4]
 802520c:	695b      	ldr	r3, [r3, #20]
 802520e:	3304      	adds	r3, #4
 8025210:	4619      	mov	r1, r3
 8025212:	4610      	mov	r0, r2
 8025214:	f000 ffb8 	bl	8026188 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8025218:	687b      	ldr	r3, [r7, #4]
 802521a:	68da      	ldr	r2, [r3, #12]
 802521c:	687b      	ldr	r3, [r7, #4]
 802521e:	609a      	str	r2, [r3, #8]
    }
 8025220:	bf00      	nop
 8025222:	3708      	adds	r7, #8
 8025224:	46bd      	mov	sp, r7
 8025226:	bd80      	pop	{r7, pc}

08025228 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8025228:	b480      	push	{r7}
 802522a:	b083      	sub	sp, #12
 802522c:	af00      	add	r7, sp, #0
 802522e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8025230:	687b      	ldr	r3, [r7, #4]
 8025232:	4618      	mov	r0, r3
 8025234:	370c      	adds	r7, #12
 8025236:	46bd      	mov	sp, r7
 8025238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802523c:	4770      	bx	lr

0802523e <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 802523e:	b5b0      	push	{r4, r5, r7, lr}
 8025240:	b084      	sub	sp, #16
 8025242:	af00      	add	r7, sp, #0
 8025244:	60f8      	str	r0, [r7, #12]
 8025246:	60b9      	str	r1, [r7, #8]
 8025248:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 802524a:	6878      	ldr	r0, [r7, #4]
 802524c:	f7ff ffec 	bl	8025228 <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8025250:	4605      	mov	r5, r0
 8025252:	68bb      	ldr	r3, [r7, #8]
 8025254:	4619      	mov	r1, r3
 8025256:	2014      	movs	r0, #20
 8025258:	f7fb fdcc 	bl	8020df4 <_ZnwjPv>
 802525c:	4603      	mov	r3, r0
 802525e:	461c      	mov	r4, r3
 8025260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025264:	682b      	ldr	r3, [r5, #0]
 8025266:	6023      	str	r3, [r4, #0]
 8025268:	bf00      	nop
 802526a:	3710      	adds	r7, #16
 802526c:	46bd      	mov	sp, r7
 802526e:	bdb0      	pop	{r4, r5, r7, pc}

08025270 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8025270:	b580      	push	{r7, lr}
 8025272:	b082      	sub	sp, #8
 8025274:	af00      	add	r7, sp, #0
 8025276:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8025278:	687b      	ldr	r3, [r7, #4]
 802527a:	4618      	mov	r0, r3
 802527c:	f000 fff1 	bl	8026262 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025280:	4603      	mov	r3, r0
 8025282:	4618      	mov	r0, r3
 8025284:	f000 ffd3 	bl	802622e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>
 8025288:	4603      	mov	r3, r0
 802528a:	4618      	mov	r0, r3
 802528c:	3708      	adds	r7, #8
 802528e:	46bd      	mov	sp, r7
 8025290:	bd80      	pop	{r7, pc}

08025292 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8025292:	b580      	push	{r7, lr}
 8025294:	b082      	sub	sp, #8
 8025296:	af00      	add	r7, sp, #0
 8025298:	6078      	str	r0, [r7, #4]
 802529a:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 802529c:	687b      	ldr	r3, [r7, #4]
 802529e:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 80252a0:	687b      	ldr	r3, [r7, #4]
 80252a2:	681b      	ldr	r3, [r3, #0]
 80252a4:	1ad3      	subs	r3, r2, r3
 80252a6:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80252a8:	461a      	mov	r2, r3
 80252aa:	683b      	ldr	r3, [r7, #0]
 80252ac:	4293      	cmp	r3, r2
 80252ae:	d904      	bls.n	80252ba <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 80252b0:	2201      	movs	r2, #1
 80252b2:	6839      	ldr	r1, [r7, #0]
 80252b4:	6878      	ldr	r0, [r7, #4]
 80252b6:	f000 ffdf 	bl	8026278 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 80252ba:	bf00      	nop
 80252bc:	3708      	adds	r7, #8
 80252be:	46bd      	mov	sp, r7
 80252c0:	bd80      	pop	{r7, pc}

080252c2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80252c2:	b590      	push	{r4, r7, lr}
 80252c4:	b083      	sub	sp, #12
 80252c6:	af00      	add	r7, sp, #0
 80252c8:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80252ca:	687c      	ldr	r4, [r7, #4]
 80252cc:	2014      	movs	r0, #20
 80252ce:	f7fb fd9d 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 80252d2:	4603      	mov	r3, r0
 80252d4:	4619      	mov	r1, r3
 80252d6:	4620      	mov	r0, r4
 80252d8:	f001 f868 	bl	80263ac <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>
 80252dc:	4603      	mov	r3, r0
      }
 80252de:	4618      	mov	r0, r3
 80252e0:	370c      	adds	r7, #12
 80252e2:	46bd      	mov	sp, r7
 80252e4:	bd90      	pop	{r4, r7, pc}

080252e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80252e6:	b590      	push	{r4, r7, lr}
 80252e8:	b083      	sub	sp, #12
 80252ea:	af00      	add	r7, sp, #0
 80252ec:	6078      	str	r0, [r7, #4]
 80252ee:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80252f0:	687b      	ldr	r3, [r7, #4]
 80252f2:	683a      	ldr	r2, [r7, #0]
 80252f4:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80252f6:	683b      	ldr	r3, [r7, #0]
 80252f8:	681a      	ldr	r2, [r3, #0]
 80252fa:	687b      	ldr	r3, [r7, #4]
 80252fc:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80252fe:	687b      	ldr	r3, [r7, #4]
 8025300:	685c      	ldr	r4, [r3, #4]
 8025302:	f000 f81f 	bl	8025344 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8025306:	4602      	mov	r2, r0
 8025308:	4613      	mov	r3, r2
 802530a:	009b      	lsls	r3, r3, #2
 802530c:	4413      	add	r3, r2
 802530e:	009b      	lsls	r3, r3, #2
 8025310:	18e2      	adds	r2, r4, r3
 8025312:	687b      	ldr	r3, [r7, #4]
 8025314:	609a      	str	r2, [r3, #8]
      }
 8025316:	bf00      	nop
 8025318:	370c      	adds	r7, #12
 802531a:	46bd      	mov	sp, r7
 802531c:	bd90      	pop	{r4, r7, pc}

0802531e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 802531e:	b590      	push	{r4, r7, lr}
 8025320:	b083      	sub	sp, #12
 8025322:	af00      	add	r7, sp, #0
 8025324:	6078      	str	r0, [r7, #4]
 8025326:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8025328:	687c      	ldr	r4, [r7, #4]
 802532a:	2014      	movs	r0, #20
 802532c:	f7fb fd6e 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 8025330:	4603      	mov	r3, r0
 8025332:	461a      	mov	r2, r3
 8025334:	6839      	ldr	r1, [r7, #0]
 8025336:	4620      	mov	r0, r4
 8025338:	f001 f847 	bl	80263ca <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>
      }
 802533c:	bf00      	nop
 802533e:	370c      	adds	r7, #12
 8025340:	46bd      	mov	sp, r7
 8025342:	bd90      	pop	{r4, r7, pc}

08025344 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8025344:	b580      	push	{r7, lr}
 8025346:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025348:	2014      	movs	r0, #20
 802534a:	f7fb fd5f 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 802534e:	4603      	mov	r3, r0
 8025350:	4618      	mov	r0, r3
 8025352:	bd80      	pop	{r7, pc}

08025354 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8025354:	b480      	push	{r7}
 8025356:	b083      	sub	sp, #12
 8025358:	af00      	add	r7, sp, #0
 802535a:	6078      	str	r0, [r7, #4]
 802535c:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 802535e:	bf00      	nop
 8025360:	370c      	adds	r7, #12
 8025362:	46bd      	mov	sp, r7
 8025364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025368:	4770      	bx	lr

0802536a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 802536a:	b480      	push	{r7}
 802536c:	b083      	sub	sp, #12
 802536e:	af00      	add	r7, sp, #0
 8025370:	6078      	str	r0, [r7, #4]
 8025372:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8025374:	683b      	ldr	r3, [r7, #0]
 8025376:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025378:	687b      	ldr	r3, [r7, #4]
 802537a:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802537c:	683b      	ldr	r3, [r7, #0]
 802537e:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025380:	687b      	ldr	r3, [r7, #4]
 8025382:	605a      	str	r2, [r3, #4]
 8025384:	683b      	ldr	r3, [r7, #0]
 8025386:	689a      	ldr	r2, [r3, #8]
 8025388:	687b      	ldr	r3, [r7, #4]
 802538a:	609a      	str	r2, [r3, #8]
 802538c:	683b      	ldr	r3, [r7, #0]
 802538e:	68da      	ldr	r2, [r3, #12]
 8025390:	687b      	ldr	r3, [r7, #4]
 8025392:	60da      	str	r2, [r3, #12]
 8025394:	687b      	ldr	r3, [r7, #4]
 8025396:	4618      	mov	r0, r3
 8025398:	370c      	adds	r7, #12
 802539a:	46bd      	mov	sp, r7
 802539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253a0:	4770      	bx	lr

080253a2 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 80253a2:	b580      	push	{r7, lr}
 80253a4:	b084      	sub	sp, #16
 80253a6:	af00      	add	r7, sp, #0
 80253a8:	60f8      	str	r0, [r7, #12]
 80253aa:	60b9      	str	r1, [r7, #8]
 80253ac:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 80253ae:	68b9      	ldr	r1, [r7, #8]
 80253b0:	68f8      	ldr	r0, [r7, #12]
 80253b2:	f7ff fa9c 	bl	80248ee <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp += __n;
 80253b6:	6879      	ldr	r1, [r7, #4]
 80253b8:	68f8      	ldr	r0, [r7, #12]
 80253ba:	f001 f815 	bl	80263e8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	return __tmp;
 80253be:	bf00      	nop
      }
 80253c0:	68f8      	ldr	r0, [r7, #12]
 80253c2:	3710      	adds	r7, #16
 80253c4:	46bd      	mov	sp, r7
 80253c6:	bd80      	pop	{r7, pc}

080253c8 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80253c8:	b480      	push	{r7}
 80253ca:	b083      	sub	sp, #12
 80253cc:	af00      	add	r7, sp, #0
 80253ce:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80253d0:	687b      	ldr	r3, [r7, #4]
 80253d2:	681b      	ldr	r3, [r3, #0]
 80253d4:	4618      	mov	r0, r3
 80253d6:	370c      	adds	r7, #12
 80253d8:	46bd      	mov	sp, r7
 80253da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253de:	4770      	bx	lr

080253e0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80253e0:	b580      	push	{r7, lr}
 80253e2:	b082      	sub	sp, #8
 80253e4:	af00      	add	r7, sp, #0
 80253e6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80253e8:	6878      	ldr	r0, [r7, #4]
 80253ea:	f001 f861 	bl	80264b0 <_ZNSaI8IMUFrameEC1Ev>
 80253ee:	687b      	ldr	r3, [r7, #4]
 80253f0:	4618      	mov	r0, r3
 80253f2:	f001 f869 	bl	80264c8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 80253f6:	687b      	ldr	r3, [r7, #4]
 80253f8:	4618      	mov	r0, r3
 80253fa:	3708      	adds	r7, #8
 80253fc:	46bd      	mov	sp, r7
 80253fe:	bd80      	pop	{r7, pc}

08025400 <_ZNSaI8IMUFrameED1Ev>:
 8025400:	b580      	push	{r7, lr}
 8025402:	b082      	sub	sp, #8
 8025404:	af00      	add	r7, sp, #0
 8025406:	6078      	str	r0, [r7, #4]
 8025408:	6878      	ldr	r0, [r7, #4]
 802540a:	f001 f876 	bl	80264fa <_ZN9__gnu_cxx13new_allocatorI8IMUFrameED1Ev>
 802540e:	687b      	ldr	r3, [r7, #4]
 8025410:	4618      	mov	r0, r3
 8025412:	3708      	adds	r7, #8
 8025414:	46bd      	mov	sp, r7
 8025416:	bd80      	pop	{r7, pc}

08025418 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8025418:	b590      	push	{r4, r7, lr}
 802541a:	b089      	sub	sp, #36	; 0x24
 802541c:	af00      	add	r7, sp, #0
 802541e:	6078      	str	r0, [r7, #4]
 8025420:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8025422:	2018      	movs	r0, #24
 8025424:	f7fb fcf2 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 8025428:	4602      	mov	r2, r0
 802542a:	683b      	ldr	r3, [r7, #0]
 802542c:	fbb3 f3f2 	udiv	r3, r3, r2
 8025430:	3301      	adds	r3, #1
 8025432:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8025434:	2308      	movs	r3, #8
 8025436:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8025438:	69fb      	ldr	r3, [r7, #28]
 802543a:	3302      	adds	r3, #2
 802543c:	613b      	str	r3, [r7, #16]
 802543e:	f107 0210 	add.w	r2, r7, #16
 8025442:	f107 030c 	add.w	r3, r7, #12
 8025446:	4611      	mov	r1, r2
 8025448:	4618      	mov	r0, r3
 802544a:	f000 f96b 	bl	8025724 <_ZSt3maxIjERKT_S2_S2_>
 802544e:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8025450:	681a      	ldr	r2, [r3, #0]
 8025452:	687b      	ldr	r3, [r7, #4]
 8025454:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8025456:	687b      	ldr	r3, [r7, #4]
 8025458:	685b      	ldr	r3, [r3, #4]
 802545a:	4619      	mov	r1, r3
 802545c:	6878      	ldr	r0, [r7, #4]
 802545e:	f001 f857 	bl	8026510 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>
 8025462:	4602      	mov	r2, r0
 8025464:	687b      	ldr	r3, [r7, #4]
 8025466:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8025468:	687b      	ldr	r3, [r7, #4]
 802546a:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 802546c:	687b      	ldr	r3, [r7, #4]
 802546e:	6859      	ldr	r1, [r3, #4]
 8025470:	69fb      	ldr	r3, [r7, #28]
 8025472:	1acb      	subs	r3, r1, r3
 8025474:	085b      	lsrs	r3, r3, #1
 8025476:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8025478:	4413      	add	r3, r2
 802547a:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 802547c:	69fb      	ldr	r3, [r7, #28]
 802547e:	009b      	lsls	r3, r3, #2
 8025480:	69ba      	ldr	r2, [r7, #24]
 8025482:	4413      	add	r3, r2
 8025484:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8025486:	697a      	ldr	r2, [r7, #20]
 8025488:	69b9      	ldr	r1, [r7, #24]
 802548a:	6878      	ldr	r0, [r7, #4]
 802548c:	f001 f85d 	bl	802654a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8025490:	687b      	ldr	r3, [r7, #4]
 8025492:	3308      	adds	r3, #8
 8025494:	69b9      	ldr	r1, [r7, #24]
 8025496:	4618      	mov	r0, r3
 8025498:	f001 f871 	bl	802657e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 802549c:	687b      	ldr	r3, [r7, #4]
 802549e:	f103 0218 	add.w	r2, r3, #24
 80254a2:	697b      	ldr	r3, [r7, #20]
 80254a4:	3b04      	subs	r3, #4
 80254a6:	4619      	mov	r1, r3
 80254a8:	4610      	mov	r0, r2
 80254aa:	f001 f868 	bl	802657e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80254ae:	687b      	ldr	r3, [r7, #4]
 80254b0:	68da      	ldr	r2, [r3, #12]
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80254b6:	687b      	ldr	r3, [r7, #4]
 80254b8:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80254ba:	2018      	movs	r0, #24
 80254bc:	f7fb fca6 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 80254c0:	4602      	mov	r2, r0
 80254c2:	683b      	ldr	r3, [r7, #0]
 80254c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80254c8:	fb01 f202 	mul.w	r2, r1, r2
 80254cc:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 80254ce:	4613      	mov	r3, r2
 80254d0:	005b      	lsls	r3, r3, #1
 80254d2:	4413      	add	r3, r2
 80254d4:	00db      	lsls	r3, r3, #3
 80254d6:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80254d8:	687b      	ldr	r3, [r7, #4]
 80254da:	619a      	str	r2, [r3, #24]
    }
 80254dc:	bf00      	nop
 80254de:	3724      	adds	r7, #36	; 0x24
 80254e0:	46bd      	mov	sp, r7
 80254e2:	bd90      	pop	{r4, r7, pc}

080254e4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80254e4:	b580      	push	{r7, lr}
 80254e6:	b086      	sub	sp, #24
 80254e8:	af00      	add	r7, sp, #0
 80254ea:	60f8      	str	r0, [r7, #12]
 80254ec:	60b9      	str	r1, [r7, #8]
 80254ee:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80254f0:	68bb      	ldr	r3, [r7, #8]
 80254f2:	617b      	str	r3, [r7, #20]
 80254f4:	697a      	ldr	r2, [r7, #20]
 80254f6:	687b      	ldr	r3, [r7, #4]
 80254f8:	429a      	cmp	r2, r3
 80254fa:	d209      	bcs.n	8025510 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 80254fc:	697b      	ldr	r3, [r7, #20]
 80254fe:	681b      	ldr	r3, [r3, #0]
 8025500:	4619      	mov	r1, r3
 8025502:	68f8      	ldr	r0, [r7, #12]
 8025504:	f001 f857 	bl	80265b6 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8025508:	697b      	ldr	r3, [r7, #20]
 802550a:	3304      	adds	r3, #4
 802550c:	617b      	str	r3, [r7, #20]
 802550e:	e7f1      	b.n	80254f4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8025510:	bf00      	nop
 8025512:	3718      	adds	r7, #24
 8025514:	46bd      	mov	sp, r7
 8025516:	bd80      	pop	{r7, pc}

08025518 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8025518:	b580      	push	{r7, lr}
 802551a:	b086      	sub	sp, #24
 802551c:	af00      	add	r7, sp, #0
 802551e:	60f8      	str	r0, [r7, #12]
 8025520:	60b9      	str	r1, [r7, #8]
 8025522:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025524:	f107 0314 	add.w	r3, r7, #20
 8025528:	68f9      	ldr	r1, [r7, #12]
 802552a:	4618      	mov	r0, r3
 802552c:	f001 f856 	bl	80265dc <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8025530:	f107 0314 	add.w	r3, r7, #20
 8025534:	687a      	ldr	r2, [r7, #4]
 8025536:	68b9      	ldr	r1, [r7, #8]
 8025538:	4618      	mov	r0, r3
 802553a:	f001 f86c 	bl	8026616 <_ZNSt16allocator_traitsISaIP8IMUFrameEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802553e:	f107 0314 	add.w	r3, r7, #20
 8025542:	4618      	mov	r0, r3
 8025544:	f001 f85b 	bl	80265fe <_ZNSaIP8IMUFrameED1Ev>
      }
 8025548:	bf00      	nop
 802554a:	3718      	adds	r7, #24
 802554c:	46bd      	mov	sp, r7
 802554e:	bd80      	pop	{r7, pc}

08025550 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8025550:	b580      	push	{r7, lr}
 8025552:	b082      	sub	sp, #8
 8025554:	af00      	add	r7, sp, #0
 8025556:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8025558:	6878      	ldr	r0, [r7, #4]
 802555a:	f001 f86b 	bl	8026634 <_ZNSaI14ServoDataFrameEC1Ev>
 802555e:	687b      	ldr	r3, [r7, #4]
 8025560:	4618      	mov	r0, r3
 8025562:	f001 f873 	bl	802664c <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8025566:	687b      	ldr	r3, [r7, #4]
 8025568:	4618      	mov	r0, r3
 802556a:	3708      	adds	r7, #8
 802556c:	46bd      	mov	sp, r7
 802556e:	bd80      	pop	{r7, pc}

08025570 <_ZNSaI14ServoDataFrameED1Ev>:
 8025570:	b580      	push	{r7, lr}
 8025572:	b082      	sub	sp, #8
 8025574:	af00      	add	r7, sp, #0
 8025576:	6078      	str	r0, [r7, #4]
 8025578:	6878      	ldr	r0, [r7, #4]
 802557a:	f001 f880 	bl	802667e <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameED1Ev>
 802557e:	687b      	ldr	r3, [r7, #4]
 8025580:	4618      	mov	r0, r3
 8025582:	3708      	adds	r7, #8
 8025584:	46bd      	mov	sp, r7
 8025586:	bd80      	pop	{r7, pc}

08025588 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8025588:	b590      	push	{r4, r7, lr}
 802558a:	b089      	sub	sp, #36	; 0x24
 802558c:	af00      	add	r7, sp, #0
 802558e:	6078      	str	r0, [r7, #4]
 8025590:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8025592:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8025596:	f7fb fc39 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 802559a:	4602      	mov	r2, r0
 802559c:	683b      	ldr	r3, [r7, #0]
 802559e:	fbb3 f3f2 	udiv	r3, r3, r2
 80255a2:	3301      	adds	r3, #1
 80255a4:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80255a6:	2308      	movs	r3, #8
 80255a8:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80255aa:	69fb      	ldr	r3, [r7, #28]
 80255ac:	3302      	adds	r3, #2
 80255ae:	613b      	str	r3, [r7, #16]
 80255b0:	f107 0210 	add.w	r2, r7, #16
 80255b4:	f107 030c 	add.w	r3, r7, #12
 80255b8:	4611      	mov	r1, r2
 80255ba:	4618      	mov	r0, r3
 80255bc:	f000 f8b2 	bl	8025724 <_ZSt3maxIjERKT_S2_S2_>
 80255c0:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80255c2:	681a      	ldr	r2, [r3, #0]
 80255c4:	687b      	ldr	r3, [r7, #4]
 80255c6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80255c8:	687b      	ldr	r3, [r7, #4]
 80255ca:	685b      	ldr	r3, [r3, #4]
 80255cc:	4619      	mov	r1, r3
 80255ce:	6878      	ldr	r0, [r7, #4]
 80255d0:	f001 f860 	bl	8026694 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE15_M_allocate_mapEj>
 80255d4:	4602      	mov	r2, r0
 80255d6:	687b      	ldr	r3, [r7, #4]
 80255d8:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80255da:	687b      	ldr	r3, [r7, #4]
 80255dc:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80255de:	687b      	ldr	r3, [r7, #4]
 80255e0:	6859      	ldr	r1, [r3, #4]
 80255e2:	69fb      	ldr	r3, [r7, #28]
 80255e4:	1acb      	subs	r3, r1, r3
 80255e6:	085b      	lsrs	r3, r3, #1
 80255e8:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80255ea:	4413      	add	r3, r2
 80255ec:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80255ee:	69fb      	ldr	r3, [r7, #28]
 80255f0:	009b      	lsls	r3, r3, #2
 80255f2:	69ba      	ldr	r2, [r7, #24]
 80255f4:	4413      	add	r3, r2
 80255f6:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80255f8:	697a      	ldr	r2, [r7, #20]
 80255fa:	69b9      	ldr	r1, [r7, #24]
 80255fc:	6878      	ldr	r0, [r7, #4]
 80255fe:	f001 f866 	bl	80266ce <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8025602:	687b      	ldr	r3, [r7, #4]
 8025604:	3308      	adds	r3, #8
 8025606:	69b9      	ldr	r1, [r7, #24]
 8025608:	4618      	mov	r0, r3
 802560a:	f001 f87a 	bl	8026702 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 802560e:	687b      	ldr	r3, [r7, #4]
 8025610:	f103 0218 	add.w	r2, r3, #24
 8025614:	697b      	ldr	r3, [r7, #20]
 8025616:	3b04      	subs	r3, #4
 8025618:	4619      	mov	r1, r3
 802561a:	4610      	mov	r0, r2
 802561c:	f001 f871 	bl	8026702 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8025620:	687b      	ldr	r3, [r7, #4]
 8025622:	68da      	ldr	r2, [r3, #12]
 8025624:	687b      	ldr	r3, [r7, #4]
 8025626:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8025628:	687b      	ldr	r3, [r7, #4]
 802562a:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 802562c:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8025630:	f7fb fbec 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 8025634:	4602      	mov	r2, r0
 8025636:	683b      	ldr	r3, [r7, #0]
 8025638:	fbb3 f1f2 	udiv	r1, r3, r2
 802563c:	fb01 f202 	mul.w	r2, r1, r2
 8025640:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8025642:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8025646:	fb02 f303 	mul.w	r3, r2, r3
 802564a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 802564c:	687b      	ldr	r3, [r7, #4]
 802564e:	619a      	str	r2, [r3, #24]
    }
 8025650:	bf00      	nop
 8025652:	3724      	adds	r7, #36	; 0x24
 8025654:	46bd      	mov	sp, r7
 8025656:	bd90      	pop	{r4, r7, pc}

08025658 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8025658:	b580      	push	{r7, lr}
 802565a:	b086      	sub	sp, #24
 802565c:	af00      	add	r7, sp, #0
 802565e:	60f8      	str	r0, [r7, #12]
 8025660:	60b9      	str	r1, [r7, #8]
 8025662:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8025664:	68bb      	ldr	r3, [r7, #8]
 8025666:	617b      	str	r3, [r7, #20]
 8025668:	697a      	ldr	r2, [r7, #20]
 802566a:	687b      	ldr	r3, [r7, #4]
 802566c:	429a      	cmp	r2, r3
 802566e:	d209      	bcs.n	8025684 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8025670:	697b      	ldr	r3, [r7, #20]
 8025672:	681b      	ldr	r3, [r3, #0]
 8025674:	4619      	mov	r1, r3
 8025676:	68f8      	ldr	r0, [r7, #12]
 8025678:	f001 f85f 	bl	802673a <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 802567c:	697b      	ldr	r3, [r7, #20]
 802567e:	3304      	adds	r3, #4
 8025680:	617b      	str	r3, [r7, #20]
 8025682:	e7f1      	b.n	8025668 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8025684:	bf00      	nop
 8025686:	3718      	adds	r7, #24
 8025688:	46bd      	mov	sp, r7
 802568a:	bd80      	pop	{r7, pc}

0802568c <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 802568c:	b580      	push	{r7, lr}
 802568e:	b086      	sub	sp, #24
 8025690:	af00      	add	r7, sp, #0
 8025692:	60f8      	str	r0, [r7, #12]
 8025694:	60b9      	str	r1, [r7, #8]
 8025696:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025698:	f107 0314 	add.w	r3, r7, #20
 802569c:	68f9      	ldr	r1, [r7, #12]
 802569e:	4618      	mov	r0, r3
 80256a0:	f001 f85f 	bl	8026762 <_ZNKSt11_Deque_baseI14ServoDataFrameSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80256a4:	f107 0314 	add.w	r3, r7, #20
 80256a8:	687a      	ldr	r2, [r7, #4]
 80256aa:	68b9      	ldr	r1, [r7, #8]
 80256ac:	4618      	mov	r0, r3
 80256ae:	f001 f875 	bl	802679c <_ZNSt16allocator_traitsISaIP14ServoDataFrameEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80256b2:	f107 0314 	add.w	r3, r7, #20
 80256b6:	4618      	mov	r0, r3
 80256b8:	f001 f864 	bl	8026784 <_ZNSaIP14ServoDataFrameED1Ev>
      }
 80256bc:	bf00      	nop
 80256be:	3718      	adds	r7, #24
 80256c0:	46bd      	mov	sp, r7
 80256c2:	bd80      	pop	{r7, pc}

080256c4 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80256c4:	b580      	push	{r7, lr}
 80256c6:	b082      	sub	sp, #8
 80256c8:	af00      	add	r7, sp, #0
 80256ca:	6078      	str	r0, [r7, #4]
 80256cc:	6878      	ldr	r0, [r7, #4]
 80256ce:	f001 f885 	bl	80267dc <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>
 80256d2:	687b      	ldr	r3, [r7, #4]
 80256d4:	4618      	mov	r0, r3
 80256d6:	3708      	adds	r7, #8
 80256d8:	46bd      	mov	sp, r7
 80256da:	bd80      	pop	{r7, pc}

080256dc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80256dc:	b580      	push	{r7, lr}
 80256de:	b082      	sub	sp, #8
 80256e0:	af00      	add	r7, sp, #0
 80256e2:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80256e4:	687b      	ldr	r3, [r7, #4]
 80256e6:	2200      	movs	r2, #0
 80256e8:	601a      	str	r2, [r3, #0]
 80256ea:	687b      	ldr	r3, [r7, #4]
 80256ec:	2200      	movs	r2, #0
 80256ee:	605a      	str	r2, [r3, #4]
 80256f0:	687b      	ldr	r3, [r7, #4]
 80256f2:	3308      	adds	r3, #8
 80256f4:	4618      	mov	r0, r3
 80256f6:	f001 f87c 	bl	80267f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
 80256fa:	687b      	ldr	r3, [r7, #4]
 80256fc:	3318      	adds	r3, #24
 80256fe:	4618      	mov	r0, r3
 8025700:	f001 f877 	bl	80267f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
	{ }
 8025704:	687b      	ldr	r3, [r7, #4]
 8025706:	4618      	mov	r0, r3
 8025708:	3708      	adds	r7, #8
 802570a:	46bd      	mov	sp, r7
 802570c:	bd80      	pop	{r7, pc}

0802570e <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802570e:	b480      	push	{r7}
 8025710:	b083      	sub	sp, #12
 8025712:	af00      	add	r7, sp, #0
 8025714:	6078      	str	r0, [r7, #4]
 8025716:	687b      	ldr	r3, [r7, #4]
 8025718:	4618      	mov	r0, r3
 802571a:	370c      	adds	r7, #12
 802571c:	46bd      	mov	sp, r7
 802571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025722:	4770      	bx	lr

08025724 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8025724:	b480      	push	{r7}
 8025726:	b083      	sub	sp, #12
 8025728:	af00      	add	r7, sp, #0
 802572a:	6078      	str	r0, [r7, #4]
 802572c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 802572e:	687b      	ldr	r3, [r7, #4]
 8025730:	681a      	ldr	r2, [r3, #0]
 8025732:	683b      	ldr	r3, [r7, #0]
 8025734:	681b      	ldr	r3, [r3, #0]
 8025736:	429a      	cmp	r2, r3
 8025738:	d201      	bcs.n	802573e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 802573a:	683b      	ldr	r3, [r7, #0]
 802573c:	e000      	b.n	8025740 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 802573e:	687b      	ldr	r3, [r7, #4]
    }
 8025740:	4618      	mov	r0, r3
 8025742:	370c      	adds	r7, #12
 8025744:	46bd      	mov	sp, r7
 8025746:	f85d 7b04 	ldr.w	r7, [sp], #4
 802574a:	4770      	bx	lr

0802574c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 802574c:	b590      	push	{r4, r7, lr}
 802574e:	b085      	sub	sp, #20
 8025750:	af00      	add	r7, sp, #0
 8025752:	6078      	str	r0, [r7, #4]
 8025754:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025756:	f107 030c 	add.w	r3, r7, #12
 802575a:	6879      	ldr	r1, [r7, #4]
 802575c:	4618      	mov	r0, r3
 802575e:	f000 f82c 	bl	80257ba <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8025762:	f107 030c 	add.w	r3, r7, #12
 8025766:	6839      	ldr	r1, [r7, #0]
 8025768:	4618      	mov	r0, r3
 802576a:	f001 f859 	bl	8026820 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>
 802576e:	4604      	mov	r4, r0
 8025770:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025772:	f107 030c 	add.w	r3, r7, #12
 8025776:	4618      	mov	r0, r3
 8025778:	f000 f830 	bl	80257dc <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 802577c:	4623      	mov	r3, r4
      }
 802577e:	4618      	mov	r0, r3
 8025780:	3714      	adds	r7, #20
 8025782:	46bd      	mov	sp, r7
 8025784:	bd90      	pop	{r4, r7, pc}

08025786 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8025786:	b580      	push	{r7, lr}
 8025788:	b086      	sub	sp, #24
 802578a:	af00      	add	r7, sp, #0
 802578c:	60f8      	str	r0, [r7, #12]
 802578e:	60b9      	str	r1, [r7, #8]
 8025790:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025792:	68bb      	ldr	r3, [r7, #8]
 8025794:	617b      	str	r3, [r7, #20]
 8025796:	697a      	ldr	r2, [r7, #20]
 8025798:	687b      	ldr	r3, [r7, #4]
 802579a:	429a      	cmp	r2, r3
 802579c:	d209      	bcs.n	80257b2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 802579e:	68f8      	ldr	r0, [r7, #12]
 80257a0:	f7ff fd8f 	bl	80252c2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 80257a4:	4602      	mov	r2, r0
 80257a6:	697b      	ldr	r3, [r7, #20]
 80257a8:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80257aa:	697b      	ldr	r3, [r7, #20]
 80257ac:	3304      	adds	r3, #4
 80257ae:	617b      	str	r3, [r7, #20]
 80257b0:	e7f1      	b.n	8025796 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 80257b2:	bf00      	nop
 80257b4:	3718      	adds	r7, #24
 80257b6:	46bd      	mov	sp, r7
 80257b8:	bd80      	pop	{r7, pc}

080257ba <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80257ba:	b580      	push	{r7, lr}
 80257bc:	b082      	sub	sp, #8
 80257be:	af00      	add	r7, sp, #0
 80257c0:	6078      	str	r0, [r7, #4]
 80257c2:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80257c4:	6838      	ldr	r0, [r7, #0]
 80257c6:	f000 fd4c 	bl	8026262 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80257ca:	4603      	mov	r3, r0
 80257cc:	4619      	mov	r1, r3
 80257ce:	6878      	ldr	r0, [r7, #4]
 80257d0:	f001 f835 	bl	802683e <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>
 80257d4:	6878      	ldr	r0, [r7, #4]
 80257d6:	3708      	adds	r7, #8
 80257d8:	46bd      	mov	sp, r7
 80257da:	bd80      	pop	{r7, pc}

080257dc <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80257dc:	b580      	push	{r7, lr}
 80257de:	b082      	sub	sp, #8
 80257e0:	af00      	add	r7, sp, #0
 80257e2:	6078      	str	r0, [r7, #4]
 80257e4:	6878      	ldr	r0, [r7, #4]
 80257e6:	f001 f837 	bl	8026858 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>
 80257ea:	687b      	ldr	r3, [r7, #4]
 80257ec:	4618      	mov	r0, r3
 80257ee:	3708      	adds	r7, #8
 80257f0:	46bd      	mov	sp, r7
 80257f2:	bd80      	pop	{r7, pc}

080257f4 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80257f4:	b580      	push	{r7, lr}
 80257f6:	b084      	sub	sp, #16
 80257f8:	af00      	add	r7, sp, #0
 80257fa:	60f8      	str	r0, [r7, #12]
 80257fc:	60b9      	str	r1, [r7, #8]
 80257fe:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025800:	687a      	ldr	r2, [r7, #4]
 8025802:	68b9      	ldr	r1, [r7, #8]
 8025804:	68f8      	ldr	r0, [r7, #12]
 8025806:	f001 f832 	bl	802686e <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>
 802580a:	bf00      	nop
 802580c:	3710      	adds	r7, #16
 802580e:	46bd      	mov	sp, r7
 8025810:	bd80      	pop	{r7, pc}

08025812 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8025812:	b580      	push	{r7, lr}
 8025814:	b082      	sub	sp, #8
 8025816:	af00      	add	r7, sp, #0
 8025818:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 802581a:	6878      	ldr	r0, [r7, #4]
 802581c:	f001 f837 	bl	802688e <_ZNSaIjEC1Ev>
 8025820:	687b      	ldr	r3, [r7, #4]
 8025822:	4618      	mov	r0, r3
 8025824:	f001 f83f 	bl	80268a6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
	{ }
 8025828:	687b      	ldr	r3, [r7, #4]
 802582a:	4618      	mov	r0, r3
 802582c:	3708      	adds	r7, #8
 802582e:	46bd      	mov	sp, r7
 8025830:	bd80      	pop	{r7, pc}

08025832 <_ZNSaIjED1Ev>:
 8025832:	b580      	push	{r7, lr}
 8025834:	b082      	sub	sp, #8
 8025836:	af00      	add	r7, sp, #0
 8025838:	6078      	str	r0, [r7, #4]
 802583a:	6878      	ldr	r0, [r7, #4]
 802583c:	f001 f84c 	bl	80268d8 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>
 8025840:	687b      	ldr	r3, [r7, #4]
 8025842:	4618      	mov	r0, r3
 8025844:	3708      	adds	r7, #8
 8025846:	46bd      	mov	sp, r7
 8025848:	bd80      	pop	{r7, pc}

0802584a <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 802584a:	b590      	push	{r4, r7, lr}
 802584c:	b089      	sub	sp, #36	; 0x24
 802584e:	af00      	add	r7, sp, #0
 8025850:	6078      	str	r0, [r7, #4]
 8025852:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8025854:	2004      	movs	r0, #4
 8025856:	f7fb fad9 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 802585a:	4602      	mov	r2, r0
 802585c:	683b      	ldr	r3, [r7, #0]
 802585e:	fbb3 f3f2 	udiv	r3, r3, r2
 8025862:	3301      	adds	r3, #1
 8025864:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8025866:	2308      	movs	r3, #8
 8025868:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 802586a:	69fb      	ldr	r3, [r7, #28]
 802586c:	3302      	adds	r3, #2
 802586e:	613b      	str	r3, [r7, #16]
 8025870:	f107 0210 	add.w	r2, r7, #16
 8025874:	f107 030c 	add.w	r3, r7, #12
 8025878:	4611      	mov	r1, r2
 802587a:	4618      	mov	r0, r3
 802587c:	f7ff ff52 	bl	8025724 <_ZSt3maxIjERKT_S2_S2_>
 8025880:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8025882:	681a      	ldr	r2, [r3, #0]
 8025884:	687b      	ldr	r3, [r7, #4]
 8025886:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8025888:	687b      	ldr	r3, [r7, #4]
 802588a:	685b      	ldr	r3, [r3, #4]
 802588c:	4619      	mov	r1, r3
 802588e:	6878      	ldr	r0, [r7, #4]
 8025890:	f001 f82d 	bl	80268ee <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8025894:	4602      	mov	r2, r0
 8025896:	687b      	ldr	r3, [r7, #4]
 8025898:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 802589a:	687b      	ldr	r3, [r7, #4]
 802589c:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 802589e:	687b      	ldr	r3, [r7, #4]
 80258a0:	6859      	ldr	r1, [r3, #4]
 80258a2:	69fb      	ldr	r3, [r7, #28]
 80258a4:	1acb      	subs	r3, r1, r3
 80258a6:	085b      	lsrs	r3, r3, #1
 80258a8:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80258aa:	4413      	add	r3, r2
 80258ac:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80258ae:	69fb      	ldr	r3, [r7, #28]
 80258b0:	009b      	lsls	r3, r3, #2
 80258b2:	69ba      	ldr	r2, [r7, #24]
 80258b4:	4413      	add	r3, r2
 80258b6:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80258b8:	697a      	ldr	r2, [r7, #20]
 80258ba:	69b9      	ldr	r1, [r7, #24]
 80258bc:	6878      	ldr	r0, [r7, #4]
 80258be:	f001 f833 	bl	8026928 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80258c2:	687b      	ldr	r3, [r7, #4]
 80258c4:	3308      	adds	r3, #8
 80258c6:	69b9      	ldr	r1, [r7, #24]
 80258c8:	4618      	mov	r0, r3
 80258ca:	f000 fc5d 	bl	8026188 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80258ce:	687b      	ldr	r3, [r7, #4]
 80258d0:	f103 0218 	add.w	r2, r3, #24
 80258d4:	697b      	ldr	r3, [r7, #20]
 80258d6:	3b04      	subs	r3, #4
 80258d8:	4619      	mov	r1, r3
 80258da:	4610      	mov	r0, r2
 80258dc:	f000 fc54 	bl	8026188 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80258e0:	687b      	ldr	r3, [r7, #4]
 80258e2:	68da      	ldr	r2, [r3, #12]
 80258e4:	687b      	ldr	r3, [r7, #4]
 80258e6:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80258e8:	687b      	ldr	r3, [r7, #4]
 80258ea:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80258ec:	2004      	movs	r0, #4
 80258ee:	f7fb fa8d 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 80258f2:	4602      	mov	r2, r0
 80258f4:	683b      	ldr	r3, [r7, #0]
 80258f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80258fa:	fb01 f202 	mul.w	r2, r1, r2
 80258fe:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8025900:	009b      	lsls	r3, r3, #2
 8025902:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8025904:	687b      	ldr	r3, [r7, #4]
 8025906:	619a      	str	r2, [r3, #24]
    }
 8025908:	bf00      	nop
 802590a:	3724      	adds	r7, #36	; 0x24
 802590c:	46bd      	mov	sp, r7
 802590e:	bd90      	pop	{r4, r7, pc}

08025910 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8025910:	b580      	push	{r7, lr}
 8025912:	b086      	sub	sp, #24
 8025914:	af00      	add	r7, sp, #0
 8025916:	60f8      	str	r0, [r7, #12]
 8025918:	60b9      	str	r1, [r7, #8]
 802591a:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 802591c:	68bb      	ldr	r3, [r7, #8]
 802591e:	617b      	str	r3, [r7, #20]
 8025920:	697a      	ldr	r2, [r7, #20]
 8025922:	687b      	ldr	r3, [r7, #4]
 8025924:	429a      	cmp	r2, r3
 8025926:	d209      	bcs.n	802593c <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x2c>
	_M_deallocate_node(*__n);
 8025928:	697b      	ldr	r3, [r7, #20]
 802592a:	681b      	ldr	r3, [r3, #0]
 802592c:	4619      	mov	r1, r3
 802592e:	68f8      	ldr	r0, [r7, #12]
 8025930:	f000 fc43 	bl	80261ba <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8025934:	697b      	ldr	r3, [r7, #20]
 8025936:	3304      	adds	r3, #4
 8025938:	617b      	str	r3, [r7, #20]
 802593a:	e7f1      	b.n	8025920 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x10>
    }
 802593c:	bf00      	nop
 802593e:	3718      	adds	r7, #24
 8025940:	46bd      	mov	sp, r7
 8025942:	bd80      	pop	{r7, pc}

08025944 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8025944:	b580      	push	{r7, lr}
 8025946:	b086      	sub	sp, #24
 8025948:	af00      	add	r7, sp, #0
 802594a:	60f8      	str	r0, [r7, #12]
 802594c:	60b9      	str	r1, [r7, #8]
 802594e:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025950:	f107 0314 	add.w	r3, r7, #20
 8025954:	68f9      	ldr	r1, [r7, #12]
 8025956:	4618      	mov	r0, r3
 8025958:	f001 f800 	bl	802695c <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 802595c:	f107 0314 	add.w	r3, r7, #20
 8025960:	687a      	ldr	r2, [r7, #4]
 8025962:	68b9      	ldr	r1, [r7, #8]
 8025964:	4618      	mov	r0, r3
 8025966:	f001 f816 	bl	8026996 <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802596a:	f107 0314 	add.w	r3, r7, #20
 802596e:	4618      	mov	r0, r3
 8025970:	f001 f805 	bl	802697e <_ZNSaIPjED1Ev>
      }
 8025974:	bf00      	nop
 8025976:	3718      	adds	r7, #24
 8025978:	46bd      	mov	sp, r7
 802597a:	bd80      	pop	{r7, pc}

0802597c <_ZNKSt16initializer_listI8IMUFrameE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 802597c:	b480      	push	{r7}
 802597e:	b083      	sub	sp, #12
 8025980:	af00      	add	r7, sp, #0
 8025982:	6078      	str	r0, [r7, #4]
 8025984:	687b      	ldr	r3, [r7, #4]
 8025986:	681b      	ldr	r3, [r3, #0]
 8025988:	4618      	mov	r0, r3
 802598a:	370c      	adds	r7, #12
 802598c:	46bd      	mov	sp, r7
 802598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025992:	4770      	bx	lr

08025994 <_ZNKSt16initializer_listI8IMUFrameE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8025994:	b590      	push	{r4, r7, lr}
 8025996:	b083      	sub	sp, #12
 8025998:	af00      	add	r7, sp, #0
 802599a:	6078      	str	r0, [r7, #4]
 802599c:	6878      	ldr	r0, [r7, #4]
 802599e:	f7ff ffed 	bl	802597c <_ZNKSt16initializer_listI8IMUFrameE5beginEv>
 80259a2:	4604      	mov	r4, r0
 80259a4:	6878      	ldr	r0, [r7, #4]
 80259a6:	f001 f805 	bl	80269b4 <_ZNKSt16initializer_listI8IMUFrameE4sizeEv>
 80259aa:	4602      	mov	r2, r0
 80259ac:	4613      	mov	r3, r2
 80259ae:	005b      	lsls	r3, r3, #1
 80259b0:	4413      	add	r3, r2
 80259b2:	00db      	lsls	r3, r3, #3
 80259b4:	4423      	add	r3, r4
 80259b6:	4618      	mov	r0, r3
 80259b8:	370c      	adds	r7, #12
 80259ba:	46bd      	mov	sp, r7
 80259bc:	bd90      	pop	{r4, r7, pc}

080259be <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 80259be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80259c0:	b09f      	sub	sp, #124	; 0x7c
 80259c2:	af02      	add	r7, sp, #8
 80259c4:	60f8      	str	r0, [r7, #12]
 80259c6:	60b9      	str	r1, [r7, #8]
 80259c8:	607a      	str	r2, [r7, #4]
 80259ca:	703b      	strb	r3, [r7, #0]
	  const size_type __len = std::distance(__first, __last);
 80259cc:	68bb      	ldr	r3, [r7, #8]
 80259ce:	6879      	ldr	r1, [r7, #4]
 80259d0:	4618      	mov	r0, r3
 80259d2:	f000 fffb 	bl	80269cc <_ZSt8distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 80259d6:	4603      	mov	r3, r0
 80259d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 80259da:	68f8      	ldr	r0, [r7, #12]
 80259dc:	f7ff fac8 	bl	8024f70 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80259e0:	4602      	mov	r2, r0
 80259e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80259e4:	4293      	cmp	r3, r2
 80259e6:	bf8c      	ite	hi
 80259e8:	2301      	movhi	r3, #1
 80259ea:	2300      	movls	r3, #0
 80259ec:	b2db      	uxtb	r3, r3
 80259ee:	2b00      	cmp	r3, #0
 80259f0:	d031      	beq.n	8025a56 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0x98>
	      _ForwardIterator __mid = __first;
 80259f2:	68bb      	ldr	r3, [r7, #8]
 80259f4:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 80259f6:	68f8      	ldr	r0, [r7, #12]
 80259f8:	f7ff faba 	bl	8024f70 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80259fc:	4602      	mov	r2, r0
 80259fe:	f107 0314 	add.w	r3, r7, #20
 8025a02:	4611      	mov	r1, r2
 8025a04:	4618      	mov	r0, r3
 8025a06:	f000 fff5 	bl	80269f4 <_ZSt7advanceIPK8IMUFramejEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8025a0a:	68bc      	ldr	r4, [r7, #8]
 8025a0c:	697d      	ldr	r5, [r7, #20]
 8025a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025a12:	68f9      	ldr	r1, [r7, #12]
 8025a14:	4618      	mov	r0, r3
 8025a16:	f7fe fdf0 	bl	80245fa <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8025a1a:	f107 0018 	add.w	r0, r7, #24
 8025a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025a22:	462a      	mov	r2, r5
 8025a24:	4621      	mov	r1, r4
 8025a26:	f000 fff8 	bl	8026a1a <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
	      _M_range_insert_aux(end(), __mid, __last,
 8025a2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025a2e:	68f9      	ldr	r1, [r7, #12]
 8025a30:	4618      	mov	r0, r3
 8025a32:	f7fe fdf1 	bl	8024618 <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 8025a36:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8025a38:	f107 0308 	add.w	r3, r7, #8
 8025a3c:	4618      	mov	r0, r3
 8025a3e:	f001 f80c 	bl	8026a5a <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
	      _M_range_insert_aux(end(), __mid, __last,
 8025a42:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8025a46:	f88d 6000 	strb.w	r6, [sp]
 8025a4a:	687b      	ldr	r3, [r7, #4]
 8025a4c:	4622      	mov	r2, r4
 8025a4e:	68f8      	ldr	r0, [r7, #12]
 8025a50:	f001 f80e 	bl	8026a70 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag>
	}
 8025a54:	e014      	b.n	8025a80 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8025a56:	68bc      	ldr	r4, [r7, #8]
 8025a58:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025a5c:	68f9      	ldr	r1, [r7, #12]
 8025a5e:	4618      	mov	r0, r3
 8025a60:	f7fe fdcb 	bl	80245fa <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8025a64:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8025a68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025a6c:	687a      	ldr	r2, [r7, #4]
 8025a6e:	4621      	mov	r1, r4
 8025a70:	f000 ffd3 	bl	8026a1a <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
 8025a74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8025a78:	4619      	mov	r1, r3
 8025a7a:	68f8      	ldr	r0, [r7, #12]
 8025a7c:	f001 f875 	bl	8026b6a <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
	}
 8025a80:	bf00      	nop
 8025a82:	3774      	adds	r7, #116	; 0x74
 8025a84:	46bd      	mov	sp, r7
 8025a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025a88 <_ZNKSt16initializer_listI14ServoDataFrameE5beginEv>:
      begin() const noexcept { return _M_array; }
 8025a88:	b480      	push	{r7}
 8025a8a:	b083      	sub	sp, #12
 8025a8c:	af00      	add	r7, sp, #0
 8025a8e:	6078      	str	r0, [r7, #4]
 8025a90:	687b      	ldr	r3, [r7, #4]
 8025a92:	681b      	ldr	r3, [r3, #0]
 8025a94:	4618      	mov	r0, r3
 8025a96:	370c      	adds	r7, #12
 8025a98:	46bd      	mov	sp, r7
 8025a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a9e:	4770      	bx	lr

08025aa0 <_ZNKSt16initializer_listI14ServoDataFrameE3endEv>:
      end() const noexcept { return begin() + size(); }
 8025aa0:	b590      	push	{r4, r7, lr}
 8025aa2:	b083      	sub	sp, #12
 8025aa4:	af00      	add	r7, sp, #0
 8025aa6:	6078      	str	r0, [r7, #4]
 8025aa8:	6878      	ldr	r0, [r7, #4]
 8025aaa:	f7ff ffed 	bl	8025a88 <_ZNKSt16initializer_listI14ServoDataFrameE5beginEv>
 8025aae:	4604      	mov	r4, r0
 8025ab0:	6878      	ldr	r0, [r7, #4]
 8025ab2:	f001 f88d 	bl	8026bd0 <_ZNKSt16initializer_listI14ServoDataFrameE4sizeEv>
 8025ab6:	4603      	mov	r3, r0
 8025ab8:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8025abc:	fb02 f303 	mul.w	r3, r2, r3
 8025ac0:	4423      	add	r3, r4
 8025ac2:	4618      	mov	r0, r3
 8025ac4:	370c      	adds	r7, #12
 8025ac6:	46bd      	mov	sp, r7
 8025ac8:	bd90      	pop	{r4, r7, pc}

08025aca <_ZNSt5dequeI14ServoDataFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 8025aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025acc:	b09f      	sub	sp, #124	; 0x7c
 8025ace:	af02      	add	r7, sp, #8
 8025ad0:	60f8      	str	r0, [r7, #12]
 8025ad2:	60b9      	str	r1, [r7, #8]
 8025ad4:	607a      	str	r2, [r7, #4]
 8025ad6:	703b      	strb	r3, [r7, #0]
	  const size_type __len = std::distance(__first, __last);
 8025ad8:	68bb      	ldr	r3, [r7, #8]
 8025ada:	6879      	ldr	r1, [r7, #4]
 8025adc:	4618      	mov	r0, r3
 8025ade:	f001 f883 	bl	8026be8 <_ZSt8distanceIPK14ServoDataFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8025ae2:	4603      	mov	r3, r0
 8025ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 8025ae6:	68f8      	ldr	r0, [r7, #12]
 8025ae8:	f7ff fa89 	bl	8024ffe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE4sizeEv>
 8025aec:	4602      	mov	r2, r0
 8025aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8025af0:	4293      	cmp	r3, r2
 8025af2:	bf8c      	ite	hi
 8025af4:	2301      	movhi	r3, #1
 8025af6:	2300      	movls	r3, #0
 8025af8:	b2db      	uxtb	r3, r3
 8025afa:	2b00      	cmp	r3, #0
 8025afc:	d031      	beq.n	8025b62 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0x98>
	      _ForwardIterator __mid = __first;
 8025afe:	68bb      	ldr	r3, [r7, #8]
 8025b00:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 8025b02:	68f8      	ldr	r0, [r7, #12]
 8025b04:	f7ff fa7b 	bl	8024ffe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE4sizeEv>
 8025b08:	4602      	mov	r2, r0
 8025b0a:	f107 0314 	add.w	r3, r7, #20
 8025b0e:	4611      	mov	r1, r2
 8025b10:	4618      	mov	r0, r3
 8025b12:	f001 f87d 	bl	8026c10 <_ZSt7advanceIPK14ServoDataFramejEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8025b16:	68bc      	ldr	r4, [r7, #8]
 8025b18:	697d      	ldr	r5, [r7, #20]
 8025b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025b1e:	68f9      	ldr	r1, [r7, #12]
 8025b20:	4618      	mov	r0, r3
 8025b22:	f7fe fdbc 	bl	802469e <_ZNSt5dequeI14ServoDataFrameSaIS0_EE5beginEv>
 8025b26:	f107 0018 	add.w	r0, r7, #24
 8025b2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025b2e:	462a      	mov	r2, r5
 8025b30:	4621      	mov	r1, r4
 8025b32:	f001 f880 	bl	8026c36 <_ZSt4copyIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
	      _M_range_insert_aux(end(), __mid, __last,
 8025b36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025b3a:	68f9      	ldr	r1, [r7, #12]
 8025b3c:	4618      	mov	r0, r3
 8025b3e:	f7fe fdbd 	bl	80246bc <_ZNSt5dequeI14ServoDataFrameSaIS0_EE3endEv>
 8025b42:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8025b44:	f107 0308 	add.w	r3, r7, #8
 8025b48:	4618      	mov	r0, r3
 8025b4a:	f001 f894 	bl	8026c76 <_ZSt19__iterator_categoryIPK14ServoDataFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
	      _M_range_insert_aux(end(), __mid, __last,
 8025b4e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8025b52:	f88d 6000 	strb.w	r6, [sp]
 8025b56:	687b      	ldr	r3, [r7, #4]
 8025b58:	4622      	mov	r2, r4
 8025b5a:	68f8      	ldr	r0, [r7, #12]
 8025b5c:	f001 f896 	bl	8026c8c <_ZNSt5dequeI14ServoDataFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag>
	}
 8025b60:	e014      	b.n	8025b8c <_ZNSt5dequeI14ServoDataFrameSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8025b62:	68bc      	ldr	r4, [r7, #8]
 8025b64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025b68:	68f9      	ldr	r1, [r7, #12]
 8025b6a:	4618      	mov	r0, r3
 8025b6c:	f7fe fd97 	bl	802469e <_ZNSt5dequeI14ServoDataFrameSaIS0_EE5beginEv>
 8025b70:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8025b74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025b78:	687a      	ldr	r2, [r7, #4]
 8025b7a:	4621      	mov	r1, r4
 8025b7c:	f001 f85b 	bl	8026c36 <_ZSt4copyIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
 8025b80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8025b84:	4619      	mov	r1, r3
 8025b86:	68f8      	ldr	r0, [r7, #12]
 8025b88:	f001 f8fd 	bl	8026d86 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
	}
 8025b8c:	bf00      	nop
 8025b8e:	3774      	adds	r7, #116	; 0x74
 8025b90:	46bd      	mov	sp, r7
 8025b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025b94 <_ZNKSt5dequeI8IMUFrameSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8025b94:	b580      	push	{r7, lr}
 8025b96:	b082      	sub	sp, #8
 8025b98:	af00      	add	r7, sp, #0
 8025b9a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8025b9c:	687b      	ldr	r3, [r7, #4]
 8025b9e:	f103 0218 	add.w	r2, r3, #24
 8025ba2:	687b      	ldr	r3, [r7, #4]
 8025ba4:	3308      	adds	r3, #8
 8025ba6:	4619      	mov	r1, r3
 8025ba8:	4610      	mov	r0, r2
 8025baa:	f001 f91f 	bl	8026dec <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 8025bae:	4603      	mov	r3, r0
 8025bb0:	4618      	mov	r0, r3
 8025bb2:	3708      	adds	r7, #8
 8025bb4:	46bd      	mov	sp, r7
 8025bb6:	bd80      	pop	{r7, pc}

08025bb8 <_ZNKSt5dequeI8IMUFrameSaIS0_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8025bb8:	b580      	push	{r7, lr}
 8025bba:	b082      	sub	sp, #8
 8025bbc:	af00      	add	r7, sp, #0
 8025bbe:	6078      	str	r0, [r7, #4]
 8025bc0:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8025bc2:	687b      	ldr	r3, [r7, #4]
 8025bc4:	3308      	adds	r3, #8
 8025bc6:	683a      	ldr	r2, [r7, #0]
 8025bc8:	4611      	mov	r1, r2
 8025bca:	4618      	mov	r0, r3
 8025bcc:	f001 f922 	bl	8026e14 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EixEi>
 8025bd0:	4603      	mov	r3, r0
      }
 8025bd2:	4618      	mov	r0, r3
 8025bd4:	3708      	adds	r7, #8
 8025bd6:	46bd      	mov	sp, r7
 8025bd8:	bd80      	pop	{r7, pc}

08025bda <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8025bda:	b580      	push	{r7, lr}
 8025bdc:	b082      	sub	sp, #8
 8025bde:	af00      	add	r7, sp, #0
 8025be0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8025be2:	687b      	ldr	r3, [r7, #4]
 8025be4:	f103 0218 	add.w	r2, r3, #24
 8025be8:	687b      	ldr	r3, [r7, #4]
 8025bea:	3308      	adds	r3, #8
 8025bec:	4619      	mov	r1, r3
 8025bee:	4610      	mov	r0, r2
 8025bf0:	f001 f926 	bl	8026e40 <_ZSteqRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_ES5_>
 8025bf4:	4603      	mov	r3, r0
 8025bf6:	4618      	mov	r0, r3
 8025bf8:	3708      	adds	r7, #8
 8025bfa:	46bd      	mov	sp, r7
 8025bfc:	bd80      	pop	{r7, pc}

08025bfe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8025bfe:	b580      	push	{r7, lr}
 8025c00:	b082      	sub	sp, #8
 8025c02:	af00      	add	r7, sp, #0
 8025c04:	6078      	str	r0, [r7, #4]
 8025c06:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8025c08:	687b      	ldr	r3, [r7, #4]
 8025c0a:	3308      	adds	r3, #8
 8025c0c:	683a      	ldr	r2, [r7, #0]
 8025c0e:	4611      	mov	r1, r2
 8025c10:	4618      	mov	r0, r3
 8025c12:	f001 f929 	bl	8026e68 <_ZNKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EixEi>
 8025c16:	4603      	mov	r3, r0
      }
 8025c18:	4618      	mov	r0, r3
 8025c1a:	3708      	adds	r7, #8
 8025c1c:	46bd      	mov	sp, r7
 8025c1e:	bd80      	pop	{r7, pc}

08025c20 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8025c20:	b580      	push	{r7, lr}
 8025c22:	b082      	sub	sp, #8
 8025c24:	af00      	add	r7, sp, #0
 8025c26:	6078      	str	r0, [r7, #4]
 8025c28:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8025c2a:	6839      	ldr	r1, [r7, #0]
 8025c2c:	6878      	ldr	r0, [r7, #4]
 8025c2e:	f001 f931 	bl	8026e94 <_ZSt4swapINSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8025c32:	bf00      	nop
 8025c34:	3708      	adds	r7, #8
 8025c36:	46bd      	mov	sp, r7
 8025c38:	bd80      	pop	{r7, pc}

08025c3a <_ZNSt5dequeI8IMUFrameSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8025c3a:	b580      	push	{r7, lr}
 8025c3c:	b086      	sub	sp, #24
 8025c3e:	af00      	add	r7, sp, #0
 8025c40:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8025c42:	f107 0308 	add.w	r3, r7, #8
 8025c46:	6879      	ldr	r1, [r7, #4]
 8025c48:	4618      	mov	r0, r3
 8025c4a:	f7fe fcd6 	bl	80245fa <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8025c4e:	f107 0308 	add.w	r3, r7, #8
 8025c52:	4619      	mov	r1, r3
 8025c54:	6878      	ldr	r0, [r7, #4]
 8025c56:	f000 ff88 	bl	8026b6a <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8025c5a:	bf00      	nop
 8025c5c:	3718      	adds	r7, #24
 8025c5e:	46bd      	mov	sp, r7
 8025c60:	bd80      	pop	{r7, pc}

08025c62 <_ZSt15__alloc_on_moveISaI8IMUFrameEEvRT_S3_>:
    { }
#endif

  template<typename _Alloc>
    _GLIBCXX14_CONSTEXPR inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8025c62:	b580      	push	{r7, lr}
 8025c64:	b082      	sub	sp, #8
 8025c66:	af00      	add	r7, sp, #0
 8025c68:	6078      	str	r0, [r7, #4]
 8025c6a:	6039      	str	r1, [r7, #0]
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
#else
      __do_alloc_on_move(__one, __two, __pocma());
 8025c6c:	461a      	mov	r2, r3
 8025c6e:	6839      	ldr	r1, [r7, #0]
 8025c70:	6878      	ldr	r0, [r7, #4]
 8025c72:	f001 f942 	bl	8026efa <_ZSt18__do_alloc_on_moveISaI8IMUFrameEEvRT_S3_St17integral_constantIbLb1EE>
#endif
    }
 8025c76:	bf00      	nop
 8025c78:	3708      	adds	r7, #8
 8025c7a:	46bd      	mov	sp, r7
 8025c7c:	bd80      	pop	{r7, pc}

08025c7e <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8025c7e:	b580      	push	{r7, lr}
 8025c80:	b082      	sub	sp, #8
 8025c82:	af00      	add	r7, sp, #0
 8025c84:	6078      	str	r0, [r7, #4]
 8025c86:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8025c88:	6839      	ldr	r1, [r7, #0]
 8025c8a:	6878      	ldr	r0, [r7, #4]
 8025c8c:	f001 f942 	bl	8026f14 <_ZSt4swapINSt11_Deque_baseI14ServoDataFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8025c90:	bf00      	nop
 8025c92:	3708      	adds	r7, #8
 8025c94:	46bd      	mov	sp, r7
 8025c96:	bd80      	pop	{r7, pc}

08025c98 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8025c98:	b580      	push	{r7, lr}
 8025c9a:	b086      	sub	sp, #24
 8025c9c:	af00      	add	r7, sp, #0
 8025c9e:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8025ca0:	f107 0308 	add.w	r3, r7, #8
 8025ca4:	6879      	ldr	r1, [r7, #4]
 8025ca6:	4618      	mov	r0, r3
 8025ca8:	f7fe fcf9 	bl	802469e <_ZNSt5dequeI14ServoDataFrameSaIS0_EE5beginEv>
 8025cac:	f107 0308 	add.w	r3, r7, #8
 8025cb0:	4619      	mov	r1, r3
 8025cb2:	6878      	ldr	r0, [r7, #4]
 8025cb4:	f001 f867 	bl	8026d86 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8025cb8:	bf00      	nop
 8025cba:	3718      	adds	r7, #24
 8025cbc:	46bd      	mov	sp, r7
 8025cbe:	bd80      	pop	{r7, pc}

08025cc0 <_ZSt15__alloc_on_moveISaI14ServoDataFrameEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8025cc0:	b580      	push	{r7, lr}
 8025cc2:	b082      	sub	sp, #8
 8025cc4:	af00      	add	r7, sp, #0
 8025cc6:	6078      	str	r0, [r7, #4]
 8025cc8:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8025cca:	461a      	mov	r2, r3
 8025ccc:	6839      	ldr	r1, [r7, #0]
 8025cce:	6878      	ldr	r0, [r7, #4]
 8025cd0:	f001 f953 	bl	8026f7a <_ZSt18__do_alloc_on_moveISaI14ServoDataFrameEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8025cd4:	bf00      	nop
 8025cd6:	3708      	adds	r7, #8
 8025cd8:	46bd      	mov	sp, r7
 8025cda:	bd80      	pop	{r7, pc}

08025cdc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8025cdc:	b580      	push	{r7, lr}
 8025cde:	b082      	sub	sp, #8
 8025ce0:	af00      	add	r7, sp, #0
 8025ce2:	6078      	str	r0, [r7, #4]
 8025ce4:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8025ce6:	6839      	ldr	r1, [r7, #0]
 8025ce8:	6878      	ldr	r0, [r7, #4]
 8025cea:	f001 f953 	bl	8026f94 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
	}
 8025cee:	bf00      	nop
 8025cf0:	3708      	adds	r7, #8
 8025cf2:	46bd      	mov	sp, r7
 8025cf4:	bd80      	pop	{r7, pc}

08025cf6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8025cf6:	b580      	push	{r7, lr}
 8025cf8:	b086      	sub	sp, #24
 8025cfa:	af00      	add	r7, sp, #0
 8025cfc:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8025cfe:	f107 0308 	add.w	r3, r7, #8
 8025d02:	6879      	ldr	r1, [r7, #4]
 8025d04:	4618      	mov	r0, r3
 8025d06:	f7fe fdd4 	bl	80248b2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8025d0a:	f107 0308 	add.w	r3, r7, #8
 8025d0e:	4619      	mov	r1, r3
 8025d10:	6878      	ldr	r0, [r7, #4]
 8025d12:	f001 f972 	bl	8026ffa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
 8025d16:	bf00      	nop
 8025d18:	3718      	adds	r7, #24
 8025d1a:	46bd      	mov	sp, r7
 8025d1c:	bd80      	pop	{r7, pc}

08025d1e <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8025d1e:	b580      	push	{r7, lr}
 8025d20:	b082      	sub	sp, #8
 8025d22:	af00      	add	r7, sp, #0
 8025d24:	6078      	str	r0, [r7, #4]
 8025d26:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8025d28:	461a      	mov	r2, r3
 8025d2a:	6839      	ldr	r1, [r7, #0]
 8025d2c:	6878      	ldr	r0, [r7, #4]
 8025d2e:	f001 f997 	bl	8027060 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>
    }
 8025d32:	bf00      	nop
 8025d34:	3708      	adds	r7, #8
 8025d36:	46bd      	mov	sp, r7
 8025d38:	bd80      	pop	{r7, pc}

08025d3a <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8025d3a:	b580      	push	{r7, lr}
 8025d3c:	b082      	sub	sp, #8
 8025d3e:	af00      	add	r7, sp, #0
 8025d40:	6078      	str	r0, [r7, #4]
 8025d42:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8025d44:	6839      	ldr	r1, [r7, #0]
 8025d46:	6878      	ldr	r0, [r7, #4]
 8025d48:	f001 f997 	bl	802707a <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 8025d4c:	bf00      	nop
 8025d4e:	3708      	adds	r7, #8
 8025d50:	46bd      	mov	sp, r7
 8025d52:	bd80      	pop	{r7, pc}

08025d54 <_ZNSt5dequeIjSaIjEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8025d54:	b580      	push	{r7, lr}
 8025d56:	b086      	sub	sp, #24
 8025d58:	af00      	add	r7, sp, #0
 8025d5a:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8025d5c:	f107 0308 	add.w	r3, r7, #8
 8025d60:	6879      	ldr	r1, [r7, #4]
 8025d62:	4618      	mov	r0, r3
 8025d64:	f7fe fe2b 	bl	80249be <_ZNSt5dequeIjSaIjEE5beginEv>
 8025d68:	f107 0308 	add.w	r3, r7, #8
 8025d6c:	4619      	mov	r1, r3
 8025d6e:	6878      	ldr	r0, [r7, #4]
 8025d70:	f001 f9b6 	bl	80270e0 <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>
 8025d74:	bf00      	nop
 8025d76:	3718      	adds	r7, #24
 8025d78:	46bd      	mov	sp, r7
 8025d7a:	bd80      	pop	{r7, pc}

08025d7c <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8025d7c:	b580      	push	{r7, lr}
 8025d7e:	b082      	sub	sp, #8
 8025d80:	af00      	add	r7, sp, #0
 8025d82:	6078      	str	r0, [r7, #4]
 8025d84:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8025d86:	461a      	mov	r2, r3
 8025d88:	6839      	ldr	r1, [r7, #0]
 8025d8a:	6878      	ldr	r0, [r7, #4]
 8025d8c:	f001 f9db 	bl	8027146 <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8025d90:	bf00      	nop
 8025d92:	3708      	adds	r7, #8
 8025d94:	46bd      	mov	sp, r7
 8025d96:	bd80      	pop	{r7, pc}

08025d98 <_ZNSt5dequeIjSaIjEE12emplace_backIJjEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8025d98:	b5b0      	push	{r4, r5, r7, lr}
 8025d9a:	b082      	sub	sp, #8
 8025d9c:	af00      	add	r7, sp, #0
 8025d9e:	6078      	str	r0, [r7, #4]
 8025da0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8025da2:	687b      	ldr	r3, [r7, #4]
 8025da4:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8025da6:	687b      	ldr	r3, [r7, #4]
 8025da8:	6a1b      	ldr	r3, [r3, #32]
 8025daa:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8025dac:	429a      	cmp	r2, r3
 8025dae:	d011      	beq.n	8025dd4 <_ZNSt5dequeIjSaIjEE12emplace_backIJjEEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl,
 8025db0:	687c      	ldr	r4, [r7, #4]
 8025db2:	687b      	ldr	r3, [r7, #4]
 8025db4:	699d      	ldr	r5, [r3, #24]
 8025db6:	6838      	ldr	r0, [r7, #0]
 8025db8:	f001 f9d2 	bl	8027160 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8025dbc:	4603      	mov	r3, r0
 8025dbe:	461a      	mov	r2, r3
 8025dc0:	4629      	mov	r1, r5
 8025dc2:	4620      	mov	r0, r4
 8025dc4:	f001 f9d7 	bl	8027176 <_ZNSt16allocator_traitsISaIjEE9constructIjJjEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8025dc8:	687b      	ldr	r3, [r7, #4]
 8025dca:	699b      	ldr	r3, [r3, #24]
 8025dcc:	1d1a      	adds	r2, r3, #4
 8025dce:	687b      	ldr	r3, [r7, #4]
 8025dd0:	619a      	str	r2, [r3, #24]
      }
 8025dd2:	e007      	b.n	8025de4 <_ZNSt5dequeIjSaIjEE12emplace_backIJjEEEvDpOT_+0x4c>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8025dd4:	6838      	ldr	r0, [r7, #0]
 8025dd6:	f001 f9c3 	bl	8027160 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8025dda:	4603      	mov	r3, r0
 8025ddc:	4619      	mov	r1, r3
 8025dde:	6878      	ldr	r0, [r7, #4]
 8025de0:	f001 f9dc 	bl	802719c <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJjEEEvDpOT_>
      }
 8025de4:	bf00      	nop
 8025de6:	3708      	adds	r7, #8
 8025de8:	46bd      	mov	sp, r7
 8025dea:	bdb0      	pop	{r4, r5, r7, pc}

08025dec <_ZNKSt15_Deque_iteratorIjRjPjEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8025dec:	b480      	push	{r7}
 8025dee:	b083      	sub	sp, #12
 8025df0:	af00      	add	r7, sp, #0
 8025df2:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8025df4:	687b      	ldr	r3, [r7, #4]
 8025df6:	681b      	ldr	r3, [r3, #0]
 8025df8:	4618      	mov	r0, r3
 8025dfa:	370c      	adds	r7, #12
 8025dfc:	46bd      	mov	sp, r7
 8025dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e02:	4770      	bx	lr

08025e04 <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8025e04:	b580      	push	{r7, lr}
 8025e06:	b084      	sub	sp, #16
 8025e08:	af00      	add	r7, sp, #0
 8025e0a:	60f8      	str	r0, [r7, #12]
 8025e0c:	60b9      	str	r1, [r7, #8]
 8025e0e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8025e10:	6878      	ldr	r0, [r7, #4]
 8025e12:	f001 fa07 	bl	8027224 <_ZSt7forwardIRK8IMUFrameEOT_RNSt16remove_referenceIS3_E4typeE>
 8025e16:	4603      	mov	r3, r0
 8025e18:	461a      	mov	r2, r3
 8025e1a:	68b9      	ldr	r1, [r7, #8]
 8025e1c:	68f8      	ldr	r0, [r7, #12]
 8025e1e:	f001 fa0c 	bl	802723a <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 8025e22:	bf00      	nop
 8025e24:	3710      	adds	r7, #16
 8025e26:	46bd      	mov	sp, r7
 8025e28:	bd80      	pop	{r7, pc}
	...

08025e2c <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJRKS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8025e2c:	b5b0      	push	{r4, r5, r7, lr}
 8025e2e:	b082      	sub	sp, #8
 8025e30:	af00      	add	r7, sp, #0
 8025e32:	6078      	str	r0, [r7, #4]
 8025e34:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8025e36:	6878      	ldr	r0, [r7, #4]
 8025e38:	f7ff f89a 	bl	8024f70 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8025e3c:	4604      	mov	r4, r0
 8025e3e:	6878      	ldr	r0, [r7, #4]
 8025e40:	f001 fa16 	bl	8027270 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 8025e44:	4603      	mov	r3, r0
 8025e46:	429c      	cmp	r4, r3
 8025e48:	bf0c      	ite	eq
 8025e4a:	2301      	moveq	r3, #1
 8025e4c:	2300      	movne	r3, #0
 8025e4e:	b2db      	uxtb	r3, r3
 8025e50:	2b00      	cmp	r3, #0
 8025e52:	d002      	beq.n	8025e5a <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJRKS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8025e54:	4817      	ldr	r0, [pc, #92]	; (8025eb4 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJRKS0_EEEvDpOT_+0x88>)
 8025e56:	f01a f9a1 	bl	804019c <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 8025e5a:	2101      	movs	r1, #1
 8025e5c:	6878      	ldr	r0, [r7, #4]
 8025e5e:	f001 fa18 	bl	8027292 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8025e62:	687a      	ldr	r2, [r7, #4]
 8025e64:	687b      	ldr	r3, [r7, #4]
 8025e66:	695b      	ldr	r3, [r3, #20]
 8025e68:	1f1c      	subs	r4, r3, #4
 8025e6a:	4610      	mov	r0, r2
 8025e6c:	f001 fa29 	bl	80272c2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8025e70:	4603      	mov	r3, r0
 8025e72:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8025e74:	687b      	ldr	r3, [r7, #4]
 8025e76:	f103 0208 	add.w	r2, r3, #8
 8025e7a:	687b      	ldr	r3, [r7, #4]
 8025e7c:	695b      	ldr	r3, [r3, #20]
 8025e7e:	3b04      	subs	r3, #4
 8025e80:	4619      	mov	r1, r3
 8025e82:	4610      	mov	r0, r2
 8025e84:	f000 fb7b 	bl	802657e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8025e88:	687b      	ldr	r3, [r7, #4]
 8025e8a:	691b      	ldr	r3, [r3, #16]
 8025e8c:	f1a3 0218 	sub.w	r2, r3, #24
 8025e90:	687b      	ldr	r3, [r7, #4]
 8025e92:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8025e94:	687c      	ldr	r4, [r7, #4]
 8025e96:	687b      	ldr	r3, [r7, #4]
 8025e98:	689d      	ldr	r5, [r3, #8]
 8025e9a:	6838      	ldr	r0, [r7, #0]
 8025e9c:	f001 f9c2 	bl	8027224 <_ZSt7forwardIRK8IMUFrameEOT_RNSt16remove_referenceIS3_E4typeE>
 8025ea0:	4603      	mov	r3, r0
 8025ea2:	461a      	mov	r2, r3
 8025ea4:	4629      	mov	r1, r5
 8025ea6:	4620      	mov	r0, r4
 8025ea8:	f7ff ffac 	bl	8025e04 <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
      }
 8025eac:	bf00      	nop
 8025eae:	3708      	adds	r7, #8
 8025eb0:	46bd      	mov	sp, r7
 8025eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8025eb4:	08041e08 	.word	0x08041e08

08025eb8 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8025eb8:	b580      	push	{r7, lr}
 8025eba:	b082      	sub	sp, #8
 8025ebc:	af00      	add	r7, sp, #0
 8025ebe:	6078      	str	r0, [r7, #4]
 8025ec0:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8025ec2:	f001 fa30 	bl	8027326 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8025ec6:	4603      	mov	r3, r0
 8025ec8:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8025eca:	687b      	ldr	r3, [r7, #4]
 8025ecc:	68da      	ldr	r2, [r3, #12]
 8025ece:	683b      	ldr	r3, [r7, #0]
 8025ed0:	68db      	ldr	r3, [r3, #12]
 8025ed2:	1ad3      	subs	r3, r2, r3
 8025ed4:	109b      	asrs	r3, r3, #2
 8025ed6:	3b01      	subs	r3, #1
 8025ed8:	fb01 f303 	mul.w	r3, r1, r3
 8025edc:	687a      	ldr	r2, [r7, #4]
 8025ede:	6811      	ldr	r1, [r2, #0]
 8025ee0:	687a      	ldr	r2, [r7, #4]
 8025ee2:	6852      	ldr	r2, [r2, #4]
 8025ee4:	1a8a      	subs	r2, r1, r2
 8025ee6:	10d2      	asrs	r2, r2, #3
 8025ee8:	4908      	ldr	r1, [pc, #32]	; (8025f0c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_+0x54>)
 8025eea:	fb01 f202 	mul.w	r2, r1, r2
 8025eee:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8025ef0:	683a      	ldr	r2, [r7, #0]
 8025ef2:	6891      	ldr	r1, [r2, #8]
 8025ef4:	683a      	ldr	r2, [r7, #0]
 8025ef6:	6812      	ldr	r2, [r2, #0]
 8025ef8:	1a8a      	subs	r2, r1, r2
 8025efa:	10d2      	asrs	r2, r2, #3
 8025efc:	4903      	ldr	r1, [pc, #12]	; (8025f0c <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_+0x54>)
 8025efe:	fb01 f202 	mul.w	r2, r1, r2
 8025f02:	4413      	add	r3, r2
      }
 8025f04:	4618      	mov	r0, r3
 8025f06:	3708      	adds	r7, #8
 8025f08:	46bd      	mov	sp, r7
 8025f0a:	bd80      	pop	{r7, pc}
 8025f0c:	aaaaaaab 	.word	0xaaaaaaab

08025f10 <_ZNSt5dequeI8IMUFrameSaIS0_EE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 8025f10:	b580      	push	{r7, lr}
 8025f12:	b082      	sub	sp, #8
 8025f14:	af00      	add	r7, sp, #0
 8025f16:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_finish._M_cur
 8025f18:	687b      	ldr	r3, [r7, #4]
 8025f1a:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8025f1c:	687b      	ldr	r3, [r7, #4]
 8025f1e:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8025f20:	429a      	cmp	r2, r3
 8025f22:	d011      	beq.n	8025f48 <_ZNSt5dequeI8IMUFrameSaIS0_EE8pop_backEv+0x38>
	    --this->_M_impl._M_finish._M_cur;
 8025f24:	687b      	ldr	r3, [r7, #4]
 8025f26:	699b      	ldr	r3, [r3, #24]
 8025f28:	f1a3 0218 	sub.w	r2, r3, #24
 8025f2c:	687b      	ldr	r3, [r7, #4]
 8025f2e:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8025f30:	687b      	ldr	r3, [r7, #4]
 8025f32:	4618      	mov	r0, r3
 8025f34:	f7fe fb7f 	bl	8024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8025f38:	4602      	mov	r2, r0
 8025f3a:	687b      	ldr	r3, [r7, #4]
 8025f3c:	699b      	ldr	r3, [r3, #24]
 8025f3e:	4619      	mov	r1, r3
 8025f40:	4610      	mov	r0, r2
 8025f42:	f001 f9f8 	bl	8027336 <_ZNSt16allocator_traitsISaI8IMUFrameEE7destroyIS0_EEvRS1_PT_>
      }
 8025f46:	e002      	b.n	8025f4e <_ZNSt5dequeI8IMUFrameSaIS0_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 8025f48:	6878      	ldr	r0, [r7, #4]
 8025f4a:	f001 fa01 	bl	8027350 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_pop_back_auxEv>
      }
 8025f4e:	bf00      	nop
 8025f50:	3708      	adds	r7, #8
 8025f52:	46bd      	mov	sp, r7
 8025f54:	bd80      	pop	{r7, pc}

08025f56 <_ZNSt16allocator_traitsISaI14ServoDataFrameEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8025f56:	b580      	push	{r7, lr}
 8025f58:	b084      	sub	sp, #16
 8025f5a:	af00      	add	r7, sp, #0
 8025f5c:	60f8      	str	r0, [r7, #12]
 8025f5e:	60b9      	str	r1, [r7, #8]
 8025f60:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8025f62:	6878      	ldr	r0, [r7, #4]
 8025f64:	f001 fa1e 	bl	80273a4 <_ZSt7forwardIRK14ServoDataFrameEOT_RNSt16remove_referenceIS3_E4typeE>
 8025f68:	4603      	mov	r3, r0
 8025f6a:	461a      	mov	r2, r3
 8025f6c:	68b9      	ldr	r1, [r7, #8]
 8025f6e:	68f8      	ldr	r0, [r7, #12]
 8025f70:	f001 fa23 	bl	80273ba <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 8025f74:	bf00      	nop
 8025f76:	3710      	adds	r7, #16
 8025f78:	46bd      	mov	sp, r7
 8025f7a:	bd80      	pop	{r7, pc}

08025f7c <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_push_front_auxIJRKS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8025f7c:	b5b0      	push	{r4, r5, r7, lr}
 8025f7e:	b082      	sub	sp, #8
 8025f80:	af00      	add	r7, sp, #0
 8025f82:	6078      	str	r0, [r7, #4]
 8025f84:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8025f86:	6878      	ldr	r0, [r7, #4]
 8025f88:	f7ff f839 	bl	8024ffe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE4sizeEv>
 8025f8c:	4604      	mov	r4, r0
 8025f8e:	6878      	ldr	r0, [r7, #4]
 8025f90:	f001 fa2f 	bl	80273f2 <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE8max_sizeEv>
 8025f94:	4603      	mov	r3, r0
 8025f96:	429c      	cmp	r4, r3
 8025f98:	bf0c      	ite	eq
 8025f9a:	2301      	moveq	r3, #1
 8025f9c:	2300      	movne	r3, #0
 8025f9e:	b2db      	uxtb	r3, r3
 8025fa0:	2b00      	cmp	r3, #0
 8025fa2:	d002      	beq.n	8025faa <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_push_front_auxIJRKS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8025fa4:	4817      	ldr	r0, [pc, #92]	; (8026004 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_push_front_auxIJRKS0_EEEvDpOT_+0x88>)
 8025fa6:	f01a f8f9 	bl	804019c <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 8025faa:	2101      	movs	r1, #1
 8025fac:	6878      	ldr	r0, [r7, #4]
 8025fae:	f001 fa31 	bl	8027414 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8025fb2:	687a      	ldr	r2, [r7, #4]
 8025fb4:	687b      	ldr	r3, [r7, #4]
 8025fb6:	695b      	ldr	r3, [r3, #20]
 8025fb8:	1f1c      	subs	r4, r3, #4
 8025fba:	4610      	mov	r0, r2
 8025fbc:	f001 fa42 	bl	8027444 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_M_allocate_nodeEv>
 8025fc0:	4603      	mov	r3, r0
 8025fc2:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8025fc4:	687b      	ldr	r3, [r7, #4]
 8025fc6:	f103 0208 	add.w	r2, r3, #8
 8025fca:	687b      	ldr	r3, [r7, #4]
 8025fcc:	695b      	ldr	r3, [r3, #20]
 8025fce:	3b04      	subs	r3, #4
 8025fd0:	4619      	mov	r1, r3
 8025fd2:	4610      	mov	r0, r2
 8025fd4:	f000 fb95 	bl	8026702 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8025fd8:	687b      	ldr	r3, [r7, #4]
 8025fda:	691b      	ldr	r3, [r3, #16]
 8025fdc:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8025fe0:	687b      	ldr	r3, [r7, #4]
 8025fe2:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8025fe4:	687c      	ldr	r4, [r7, #4]
 8025fe6:	687b      	ldr	r3, [r7, #4]
 8025fe8:	689d      	ldr	r5, [r3, #8]
 8025fea:	6838      	ldr	r0, [r7, #0]
 8025fec:	f001 f9da 	bl	80273a4 <_ZSt7forwardIRK14ServoDataFrameEOT_RNSt16remove_referenceIS3_E4typeE>
 8025ff0:	4603      	mov	r3, r0
 8025ff2:	461a      	mov	r2, r3
 8025ff4:	4629      	mov	r1, r5
 8025ff6:	4620      	mov	r0, r4
 8025ff8:	f7ff ffad 	bl	8025f56 <_ZNSt16allocator_traitsISaI14ServoDataFrameEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
      }
 8025ffc:	bf00      	nop
 8025ffe:	3708      	adds	r7, #8
 8026000:	46bd      	mov	sp, r7
 8026002:	bdb0      	pop	{r4, r5, r7, pc}
 8026004:	08041e08 	.word	0x08041e08

08026008 <_ZStmiRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8026008:	b580      	push	{r7, lr}
 802600a:	b082      	sub	sp, #8
 802600c:	af00      	add	r7, sp, #0
 802600e:	6078      	str	r0, [r7, #4]
 8026010:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8026012:	f001 fa2a 	bl	802746a <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E14_S_buffer_sizeEv>
 8026016:	4603      	mov	r3, r0
 8026018:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 802601a:	687b      	ldr	r3, [r7, #4]
 802601c:	68da      	ldr	r2, [r3, #12]
 802601e:	683b      	ldr	r3, [r7, #0]
 8026020:	68db      	ldr	r3, [r3, #12]
 8026022:	1ad3      	subs	r3, r2, r3
 8026024:	109b      	asrs	r3, r3, #2
 8026026:	3b01      	subs	r3, #1
 8026028:	fb01 f303 	mul.w	r3, r1, r3
 802602c:	687a      	ldr	r2, [r7, #4]
 802602e:	6811      	ldr	r1, [r2, #0]
 8026030:	687a      	ldr	r2, [r7, #4]
 8026032:	6852      	ldr	r2, [r2, #4]
 8026034:	1a8a      	subs	r2, r1, r2
 8026036:	1092      	asrs	r2, r2, #2
 8026038:	4908      	ldr	r1, [pc, #32]	; (802605c <_ZStmiRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_ES5_+0x54>)
 802603a:	fb01 f202 	mul.w	r2, r1, r2
 802603e:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8026040:	683a      	ldr	r2, [r7, #0]
 8026042:	6891      	ldr	r1, [r2, #8]
 8026044:	683a      	ldr	r2, [r7, #0]
 8026046:	6812      	ldr	r2, [r2, #0]
 8026048:	1a8a      	subs	r2, r1, r2
 802604a:	1092      	asrs	r2, r2, #2
 802604c:	4903      	ldr	r1, [pc, #12]	; (802605c <_ZStmiRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_ES5_+0x54>)
 802604e:	fb01 f202 	mul.w	r2, r1, r2
 8026052:	4413      	add	r3, r2
      }
 8026054:	4618      	mov	r0, r3
 8026056:	3708      	adds	r7, #8
 8026058:	46bd      	mov	sp, r7
 802605a:	bd80      	pop	{r7, pc}
 802605c:	07a44c6b 	.word	0x07a44c6b

08026060 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 8026060:	b580      	push	{r7, lr}
 8026062:	b082      	sub	sp, #8
 8026064:	af00      	add	r7, sp, #0
 8026066:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_finish._M_cur
 8026068:	687b      	ldr	r3, [r7, #4]
 802606a:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 802606c:	687b      	ldr	r3, [r7, #4]
 802606e:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8026070:	429a      	cmp	r2, r3
 8026072:	d011      	beq.n	8026098 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE8pop_backEv+0x38>
	    --this->_M_impl._M_finish._M_cur;
 8026074:	687b      	ldr	r3, [r7, #4]
 8026076:	699b      	ldr	r3, [r3, #24]
 8026078:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 802607c:	687b      	ldr	r3, [r7, #4]
 802607e:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8026080:	687b      	ldr	r3, [r7, #4]
 8026082:	4618      	mov	r0, r3
 8026084:	f7fe fb29 	bl	80246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8026088:	4602      	mov	r2, r0
 802608a:	687b      	ldr	r3, [r7, #4]
 802608c:	699b      	ldr	r3, [r3, #24]
 802608e:	4619      	mov	r1, r3
 8026090:	4610      	mov	r0, r2
 8026092:	f001 f9f3 	bl	802747c <_ZNSt16allocator_traitsISaI14ServoDataFrameEE7destroyIS0_EEvRS1_PT_>
      }
 8026096:	e002      	b.n	802609e <_ZNSt5dequeI14ServoDataFrameSaIS0_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 8026098:	6878      	ldr	r0, [r7, #4]
 802609a:	f001 f9fc 	bl	8027496 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE15_M_pop_back_auxEv>
      }
 802609e:	bf00      	nop
 80260a0:	3708      	adds	r7, #8
 80260a2:	46bd      	mov	sp, r7
 80260a4:	bd80      	pop	{r7, pc}

080260a6 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80260a6:	b480      	push	{r7}
 80260a8:	b083      	sub	sp, #12
 80260aa:	af00      	add	r7, sp, #0
 80260ac:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80260ae:	687b      	ldr	r3, [r7, #4]
 80260b0:	4618      	mov	r0, r3
 80260b2:	370c      	adds	r7, #12
 80260b4:	46bd      	mov	sp, r7
 80260b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260ba:	4770      	bx	lr

080260bc <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80260bc:	b590      	push	{r4, r7, lr}
 80260be:	b085      	sub	sp, #20
 80260c0:	af00      	add	r7, sp, #0
 80260c2:	60f8      	str	r0, [r7, #12]
 80260c4:	60b9      	str	r1, [r7, #8]
 80260c6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80260c8:	6878      	ldr	r0, [r7, #4]
 80260ca:	f7ff ffec 	bl	80260a6 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 80260ce:	4603      	mov	r3, r0
 80260d0:	681c      	ldr	r4, [r3, #0]
 80260d2:	68bb      	ldr	r3, [r7, #8]
 80260d4:	4619      	mov	r1, r3
 80260d6:	2004      	movs	r0, #4
 80260d8:	f7fa fe8c 	bl	8020df4 <_ZnwjPv>
 80260dc:	4603      	mov	r3, r0
 80260de:	601c      	str	r4, [r3, #0]
 80260e0:	bf00      	nop
 80260e2:	3714      	adds	r7, #20
 80260e4:	46bd      	mov	sp, r7
 80260e6:	bd90      	pop	{r4, r7, pc}

080260e8 <_ZNKSt5dequeIjSaIjEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80260e8:	b580      	push	{r7, lr}
 80260ea:	b082      	sub	sp, #8
 80260ec:	af00      	add	r7, sp, #0
 80260ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80260f0:	687b      	ldr	r3, [r7, #4]
 80260f2:	f103 0218 	add.w	r2, r3, #24
 80260f6:	687b      	ldr	r3, [r7, #4]
 80260f8:	3308      	adds	r3, #8
 80260fa:	4619      	mov	r1, r3
 80260fc:	4610      	mov	r0, r2
 80260fe:	f001 f9f4 	bl	80274ea <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>
 8026102:	4603      	mov	r3, r0
 8026104:	4618      	mov	r0, r3
 8026106:	3708      	adds	r7, #8
 8026108:	46bd      	mov	sp, r7
 802610a:	bd80      	pop	{r7, pc}

0802610c <_ZNKSt5dequeIjSaIjEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 802610c:	b580      	push	{r7, lr}
 802610e:	b082      	sub	sp, #8
 8026110:	af00      	add	r7, sp, #0
 8026112:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8026114:	687b      	ldr	r3, [r7, #4]
 8026116:	4618      	mov	r0, r3
 8026118:	f001 fa25 	bl	8027566 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 802611c:	4603      	mov	r3, r0
 802611e:	4618      	mov	r0, r3
 8026120:	f001 fa07 	bl	8027532 <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>
 8026124:	4603      	mov	r3, r0
 8026126:	4618      	mov	r0, r3
 8026128:	3708      	adds	r7, #8
 802612a:	46bd      	mov	sp, r7
 802612c:	bd80      	pop	{r7, pc}

0802612e <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 802612e:	b580      	push	{r7, lr}
 8026130:	b082      	sub	sp, #8
 8026132:	af00      	add	r7, sp, #0
 8026134:	6078      	str	r0, [r7, #4]
 8026136:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8026138:	683b      	ldr	r3, [r7, #0]
 802613a:	1c5a      	adds	r2, r3, #1
 802613c:	687b      	ldr	r3, [r7, #4]
 802613e:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8026140:	6879      	ldr	r1, [r7, #4]
 8026142:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8026144:	6879      	ldr	r1, [r7, #4]
 8026146:	6809      	ldr	r1, [r1, #0]
 8026148:	1a41      	subs	r1, r0, r1
 802614a:	1089      	asrs	r1, r1, #2
 802614c:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 802614e:	429a      	cmp	r2, r3
 8026150:	d904      	bls.n	802615c <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8026152:	2200      	movs	r2, #0
 8026154:	6839      	ldr	r1, [r7, #0]
 8026156:	6878      	ldr	r0, [r7, #4]
 8026158:	f001 fa10 	bl	802757c <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>
      }
 802615c:	bf00      	nop
 802615e:	3708      	adds	r7, #8
 8026160:	46bd      	mov	sp, r7
 8026162:	bd80      	pop	{r7, pc}

08026164 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8026164:	b590      	push	{r4, r7, lr}
 8026166:	b083      	sub	sp, #12
 8026168:	af00      	add	r7, sp, #0
 802616a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 802616c:	687c      	ldr	r4, [r7, #4]
 802616e:	2004      	movs	r0, #4
 8026170:	f7fa fe4c 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 8026174:	4603      	mov	r3, r0
 8026176:	4619      	mov	r1, r3
 8026178:	4620      	mov	r0, r4
 802617a:	f001 fa99 	bl	80276b0 <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>
 802617e:	4603      	mov	r3, r0
      }
 8026180:	4618      	mov	r0, r3
 8026182:	370c      	adds	r7, #12
 8026184:	46bd      	mov	sp, r7
 8026186:	bd90      	pop	{r4, r7, pc}

08026188 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8026188:	b590      	push	{r4, r7, lr}
 802618a:	b083      	sub	sp, #12
 802618c:	af00      	add	r7, sp, #0
 802618e:	6078      	str	r0, [r7, #4]
 8026190:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8026192:	687b      	ldr	r3, [r7, #4]
 8026194:	683a      	ldr	r2, [r7, #0]
 8026196:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8026198:	683b      	ldr	r3, [r7, #0]
 802619a:	681a      	ldr	r2, [r3, #0]
 802619c:	687b      	ldr	r3, [r7, #4]
 802619e:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80261a0:	687b      	ldr	r3, [r7, #4]
 80261a2:	685c      	ldr	r4, [r3, #4]
 80261a4:	f001 fa93 	bl	80276ce <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 80261a8:	4603      	mov	r3, r0
 80261aa:	009b      	lsls	r3, r3, #2
 80261ac:	18e2      	adds	r2, r4, r3
 80261ae:	687b      	ldr	r3, [r7, #4]
 80261b0:	609a      	str	r2, [r3, #8]
      }
 80261b2:	bf00      	nop
 80261b4:	370c      	adds	r7, #12
 80261b6:	46bd      	mov	sp, r7
 80261b8:	bd90      	pop	{r4, r7, pc}

080261ba <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80261ba:	b590      	push	{r4, r7, lr}
 80261bc:	b083      	sub	sp, #12
 80261be:	af00      	add	r7, sp, #0
 80261c0:	6078      	str	r0, [r7, #4]
 80261c2:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80261c4:	687c      	ldr	r4, [r7, #4]
 80261c6:	2004      	movs	r0, #4
 80261c8:	f7fa fe20 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 80261cc:	4603      	mov	r3, r0
 80261ce:	461a      	mov	r2, r3
 80261d0:	6839      	ldr	r1, [r7, #0]
 80261d2:	4620      	mov	r0, r4
 80261d4:	f001 fa83 	bl	80276de <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>
      }
 80261d8:	bf00      	nop
 80261da:	370c      	adds	r7, #12
 80261dc:	46bd      	mov	sp, r7
 80261de:	bd90      	pop	{r4, r7, pc}

080261e0 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 80261e0:	b480      	push	{r7}
 80261e2:	b083      	sub	sp, #12
 80261e4:	af00      	add	r7, sp, #0
 80261e6:	6078      	str	r0, [r7, #4]
 80261e8:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80261ea:	683b      	ldr	r3, [r7, #0]
 80261ec:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80261ee:	687b      	ldr	r3, [r7, #4]
 80261f0:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80261f2:	683b      	ldr	r3, [r7, #0]
 80261f4:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80261f6:	687b      	ldr	r3, [r7, #4]
 80261f8:	605a      	str	r2, [r3, #4]
 80261fa:	683b      	ldr	r3, [r7, #0]
 80261fc:	689a      	ldr	r2, [r3, #8]
 80261fe:	687b      	ldr	r3, [r7, #4]
 8026200:	609a      	str	r2, [r3, #8]
 8026202:	683b      	ldr	r3, [r7, #0]
 8026204:	68da      	ldr	r2, [r3, #12]
 8026206:	687b      	ldr	r3, [r7, #4]
 8026208:	60da      	str	r2, [r3, #12]
 802620a:	687b      	ldr	r3, [r7, #4]
 802620c:	4618      	mov	r0, r3
 802620e:	370c      	adds	r7, #12
 8026210:	46bd      	mov	sp, r7
 8026212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026216:	4770      	bx	lr

08026218 <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>:
	destroy(_Up* __p)
 8026218:	b480      	push	{r7}
 802621a:	b083      	sub	sp, #12
 802621c:	af00      	add	r7, sp, #0
 802621e:	6078      	str	r0, [r7, #4]
 8026220:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8026222:	bf00      	nop
 8026224:	370c      	adds	r7, #12
 8026226:	46bd      	mov	sp, r7
 8026228:	f85d 7b04 	ldr.w	r7, [sp], #4
 802622c:	4770      	bx	lr

0802622e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 802622e:	b580      	push	{r7, lr}
 8026230:	b084      	sub	sp, #16
 8026232:	af00      	add	r7, sp, #0
 8026234:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8026236:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802623a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 802623c:	6878      	ldr	r0, [r7, #4]
 802623e:	f001 fa5d 	bl	80276fc <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>
 8026242:	4603      	mov	r3, r0
 8026244:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8026246:	f107 0208 	add.w	r2, r7, #8
 802624a:	f107 030c 	add.w	r3, r7, #12
 802624e:	4611      	mov	r1, r2
 8026250:	4618      	mov	r0, r3
 8026252:	f001 fa5f 	bl	8027714 <_ZSt3minIjERKT_S2_S2_>
 8026256:	4603      	mov	r3, r0
 8026258:	681b      	ldr	r3, [r3, #0]
      }
 802625a:	4618      	mov	r0, r3
 802625c:	3710      	adds	r7, #16
 802625e:	46bd      	mov	sp, r7
 8026260:	bd80      	pop	{r7, pc}

08026262 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8026262:	b480      	push	{r7}
 8026264:	b083      	sub	sp, #12
 8026266:	af00      	add	r7, sp, #0
 8026268:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802626a:	687b      	ldr	r3, [r7, #4]
 802626c:	4618      	mov	r0, r3
 802626e:	370c      	adds	r7, #12
 8026270:	46bd      	mov	sp, r7
 8026272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026276:	4770      	bx	lr

08026278 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8026278:	b590      	push	{r4, r7, lr}
 802627a:	b08b      	sub	sp, #44	; 0x2c
 802627c:	af00      	add	r7, sp, #0
 802627e:	60f8      	str	r0, [r7, #12]
 8026280:	60b9      	str	r1, [r7, #8]
 8026282:	4613      	mov	r3, r2
 8026284:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8026286:	68fb      	ldr	r3, [r7, #12]
 8026288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802628a:	68fb      	ldr	r3, [r7, #12]
 802628c:	695b      	ldr	r3, [r3, #20]
 802628e:	1ad3      	subs	r3, r2, r3
 8026290:	109b      	asrs	r3, r3, #2
 8026292:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8026294:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8026296:	68bb      	ldr	r3, [r7, #8]
 8026298:	6a3a      	ldr	r2, [r7, #32]
 802629a:	4413      	add	r3, r2
 802629c:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 802629e:	68fb      	ldr	r3, [r7, #12]
 80262a0:	685a      	ldr	r2, [r3, #4]
 80262a2:	69fb      	ldr	r3, [r7, #28]
 80262a4:	005b      	lsls	r3, r3, #1
 80262a6:	429a      	cmp	r2, r3
 80262a8:	d92d      	bls.n	8026306 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80262aa:	68fb      	ldr	r3, [r7, #12]
 80262ac:	681a      	ldr	r2, [r3, #0]
 80262ae:	68fb      	ldr	r3, [r7, #12]
 80262b0:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80262b2:	69fb      	ldr	r3, [r7, #28]
 80262b4:	1acb      	subs	r3, r1, r3
 80262b6:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80262b8:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80262ba:	79fb      	ldrb	r3, [r7, #7]
 80262bc:	2b00      	cmp	r3, #0
 80262be:	d002      	beq.n	80262c6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 80262c0:	68bb      	ldr	r3, [r7, #8]
 80262c2:	009b      	lsls	r3, r3, #2
 80262c4:	e000      	b.n	80262c8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x50>
 80262c6:	2300      	movs	r3, #0
 80262c8:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80262ca:	4413      	add	r3, r2
 80262cc:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80262ce:	68fb      	ldr	r3, [r7, #12]
 80262d0:	695b      	ldr	r3, [r3, #20]
 80262d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80262d4:	429a      	cmp	r2, r3
 80262d6:	d209      	bcs.n	80262ec <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80262d8:	68fb      	ldr	r3, [r7, #12]
 80262da:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80262dc:	68fb      	ldr	r3, [r7, #12]
 80262de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80262e0:	3304      	adds	r3, #4
 80262e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80262e4:	4619      	mov	r1, r3
 80262e6:	f001 fa29 	bl	802773c <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 80262ea:	e048      	b.n	802637e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80262ec:	68fb      	ldr	r3, [r7, #12]
 80262ee:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80262f0:	68fb      	ldr	r3, [r7, #12]
 80262f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80262f4:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80262f6:	6a3b      	ldr	r3, [r7, #32]
 80262f8:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80262fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80262fc:	4413      	add	r3, r2
 80262fe:	461a      	mov	r2, r3
 8026300:	f001 fa34 	bl	802776c <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 8026304:	e03b      	b.n	802637e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026306:	68fb      	ldr	r3, [r7, #12]
 8026308:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 802630a:	68fb      	ldr	r3, [r7, #12]
 802630c:	3304      	adds	r3, #4
 802630e:	f107 0208 	add.w	r2, r7, #8
 8026312:	4611      	mov	r1, r2
 8026314:	4618      	mov	r0, r3
 8026316:	f7ff fa05 	bl	8025724 <_ZSt3maxIjERKT_S2_S2_>
 802631a:	4603      	mov	r3, r0
 802631c:	681b      	ldr	r3, [r3, #0]
 802631e:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026320:	3302      	adds	r3, #2
 8026322:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8026324:	68fb      	ldr	r3, [r7, #12]
 8026326:	69b9      	ldr	r1, [r7, #24]
 8026328:	4618      	mov	r0, r3
 802632a:	f7ff fa0f 	bl	802574c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 802632e:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026330:	69ba      	ldr	r2, [r7, #24]
 8026332:	69fb      	ldr	r3, [r7, #28]
 8026334:	1ad3      	subs	r3, r2, r3
 8026336:	085b      	lsrs	r3, r3, #1
 8026338:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802633a:	79fb      	ldrb	r3, [r7, #7]
 802633c:	2b00      	cmp	r3, #0
 802633e:	d002      	beq.n	8026346 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xce>
 8026340:	68bb      	ldr	r3, [r7, #8]
 8026342:	009b      	lsls	r3, r3, #2
 8026344:	e000      	b.n	8026348 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 8026346:	2300      	movs	r3, #0
 8026348:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 802634a:	697a      	ldr	r2, [r7, #20]
 802634c:	4413      	add	r3, r2
 802634e:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026350:	68fb      	ldr	r3, [r7, #12]
 8026352:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8026354:	68fb      	ldr	r3, [r7, #12]
 8026356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026358:	3304      	adds	r3, #4
 802635a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802635c:	4619      	mov	r1, r3
 802635e:	f001 f9ed 	bl	802773c <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8026362:	68f8      	ldr	r0, [r7, #12]
 8026364:	68fb      	ldr	r3, [r7, #12]
 8026366:	6819      	ldr	r1, [r3, #0]
 8026368:	68fb      	ldr	r3, [r7, #12]
 802636a:	685b      	ldr	r3, [r3, #4]
 802636c:	461a      	mov	r2, r3
 802636e:	f7fe fa84 	bl	802487a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 8026372:	68fb      	ldr	r3, [r7, #12]
 8026374:	697a      	ldr	r2, [r7, #20]
 8026376:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8026378:	68fb      	ldr	r3, [r7, #12]
 802637a:	69ba      	ldr	r2, [r7, #24]
 802637c:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 802637e:	68fb      	ldr	r3, [r7, #12]
 8026380:	3308      	adds	r3, #8
 8026382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026384:	4618      	mov	r0, r3
 8026386:	f7fe ffae 	bl	80252e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 802638a:	68fb      	ldr	r3, [r7, #12]
 802638c:	f103 0018 	add.w	r0, r3, #24
 8026390:	6a3a      	ldr	r2, [r7, #32]
 8026392:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8026396:	4413      	add	r3, r2
 8026398:	009b      	lsls	r3, r3, #2
 802639a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802639c:	4413      	add	r3, r2
 802639e:	4619      	mov	r1, r3
 80263a0:	f7fe ffa1 	bl	80252e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
    }
 80263a4:	bf00      	nop
 80263a6:	372c      	adds	r7, #44	; 0x2c
 80263a8:	46bd      	mov	sp, r7
 80263aa:	bd90      	pop	{r4, r7, pc}

080263ac <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80263ac:	b580      	push	{r7, lr}
 80263ae:	b082      	sub	sp, #8
 80263b0:	af00      	add	r7, sp, #0
 80263b2:	6078      	str	r0, [r7, #4]
 80263b4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80263b6:	2200      	movs	r2, #0
 80263b8:	6839      	ldr	r1, [r7, #0]
 80263ba:	6878      	ldr	r0, [r7, #4]
 80263bc:	f001 f9ee 	bl	802779c <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 80263c0:	4603      	mov	r3, r0
 80263c2:	4618      	mov	r0, r3
 80263c4:	3708      	adds	r7, #8
 80263c6:	46bd      	mov	sp, r7
 80263c8:	bd80      	pop	{r7, pc}

080263ca <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80263ca:	b580      	push	{r7, lr}
 80263cc:	b084      	sub	sp, #16
 80263ce:	af00      	add	r7, sp, #0
 80263d0:	60f8      	str	r0, [r7, #12]
 80263d2:	60b9      	str	r1, [r7, #8]
 80263d4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80263d6:	687a      	ldr	r2, [r7, #4]
 80263d8:	68b9      	ldr	r1, [r7, #8]
 80263da:	68f8      	ldr	r0, [r7, #12]
 80263dc:	f001 f9ff 	bl	80277de <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>
 80263e0:	bf00      	nop
 80263e2:	3710      	adds	r7, #16
 80263e4:	46bd      	mov	sp, r7
 80263e6:	bd80      	pop	{r7, pc}

080263e8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 80263e8:	b590      	push	{r4, r7, lr}
 80263ea:	b085      	sub	sp, #20
 80263ec:	af00      	add	r7, sp, #0
 80263ee:	6078      	str	r0, [r7, #4]
 80263f0:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 80263f2:	687b      	ldr	r3, [r7, #4]
 80263f4:	681a      	ldr	r2, [r3, #0]
 80263f6:	687b      	ldr	r3, [r7, #4]
 80263f8:	685b      	ldr	r3, [r3, #4]
 80263fa:	1ad3      	subs	r3, r2, r3
 80263fc:	109b      	asrs	r3, r3, #2
 80263fe:	4a2b      	ldr	r2, [pc, #172]	; (80264ac <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xc4>)
 8026400:	fb02 f303 	mul.w	r3, r2, r3
 8026404:	461a      	mov	r2, r3
 8026406:	683b      	ldr	r3, [r7, #0]
 8026408:	4413      	add	r3, r2
 802640a:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 802640c:	68fb      	ldr	r3, [r7, #12]
 802640e:	2b00      	cmp	r3, #0
 8026410:	db08      	blt.n	8026424 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 8026412:	f7fe ff97 	bl	8025344 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8026416:	4603      	mov	r3, r0
 8026418:	461a      	mov	r2, r3
 802641a:	68fb      	ldr	r3, [r7, #12]
 802641c:	4293      	cmp	r3, r2
 802641e:	da01      	bge.n	8026424 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 8026420:	2301      	movs	r3, #1
 8026422:	e000      	b.n	8026426 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3e>
 8026424:	2300      	movs	r3, #0
 8026426:	2b00      	cmp	r3, #0
 8026428:	d00a      	beq.n	8026440 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x58>
	  _M_cur += __n;
 802642a:	687b      	ldr	r3, [r7, #4]
 802642c:	6819      	ldr	r1, [r3, #0]
 802642e:	683a      	ldr	r2, [r7, #0]
 8026430:	4613      	mov	r3, r2
 8026432:	009b      	lsls	r3, r3, #2
 8026434:	4413      	add	r3, r2
 8026436:	009b      	lsls	r3, r3, #2
 8026438:	18ca      	adds	r2, r1, r3
 802643a:	687b      	ldr	r3, [r7, #4]
 802643c:	601a      	str	r2, [r3, #0]
 802643e:	e02f      	b.n	80264a0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8026440:	68fb      	ldr	r3, [r7, #12]
 8026442:	2b00      	cmp	r3, #0
 8026444:	dd07      	ble.n	8026456 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x6e>
 8026446:	f7fe ff7d 	bl	8025344 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802644a:	4603      	mov	r3, r0
 802644c:	461a      	mov	r2, r3
 802644e:	68fb      	ldr	r3, [r7, #12]
 8026450:	fb93 f3f2 	sdiv	r3, r3, r2
 8026454:	e007      	b.n	8026466 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 8026456:	68fb      	ldr	r3, [r7, #12]
 8026458:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 802645a:	f7fe ff73 	bl	8025344 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802645e:	4603      	mov	r3, r0
 8026460:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8026464:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8026466:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8026468:	687b      	ldr	r3, [r7, #4]
 802646a:	68da      	ldr	r2, [r3, #12]
 802646c:	68bb      	ldr	r3, [r7, #8]
 802646e:	009b      	lsls	r3, r3, #2
 8026470:	4413      	add	r3, r2
 8026472:	4619      	mov	r1, r3
 8026474:	6878      	ldr	r0, [r7, #4]
 8026476:	f7fe ff36 	bl	80252e6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first + (__offset - __node_offset
 802647a:	687b      	ldr	r3, [r7, #4]
 802647c:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 802647e:	f7fe ff61 	bl	8025344 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8026482:	4603      	mov	r3, r0
 8026484:	461a      	mov	r2, r3
 8026486:	68bb      	ldr	r3, [r7, #8]
 8026488:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 802648c:	68fa      	ldr	r2, [r7, #12]
 802648e:	1ad3      	subs	r3, r2, r3
 8026490:	461a      	mov	r2, r3
 8026492:	4613      	mov	r3, r2
 8026494:	009b      	lsls	r3, r3, #2
 8026496:	4413      	add	r3, r2
 8026498:	009b      	lsls	r3, r3, #2
 802649a:	18e2      	adds	r2, r4, r3
 802649c:	687b      	ldr	r3, [r7, #4]
 802649e:	601a      	str	r2, [r3, #0]
	return *this;
 80264a0:	687b      	ldr	r3, [r7, #4]
      }
 80264a2:	4618      	mov	r0, r3
 80264a4:	3714      	adds	r7, #20
 80264a6:	46bd      	mov	sp, r7
 80264a8:	bd90      	pop	{r4, r7, pc}
 80264aa:	bf00      	nop
 80264ac:	cccccccd 	.word	0xcccccccd

080264b0 <_ZNSaI8IMUFrameEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80264b0:	b580      	push	{r7, lr}
 80264b2:	b082      	sub	sp, #8
 80264b4:	af00      	add	r7, sp, #0
 80264b6:	6078      	str	r0, [r7, #4]
 80264b8:	6878      	ldr	r0, [r7, #4]
 80264ba:	f001 f9a3 	bl	8027804 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameEC1Ev>
 80264be:	687b      	ldr	r3, [r7, #4]
 80264c0:	4618      	mov	r0, r3
 80264c2:	3708      	adds	r7, #8
 80264c4:	46bd      	mov	sp, r7
 80264c6:	bd80      	pop	{r7, pc}

080264c8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80264c8:	b580      	push	{r7, lr}
 80264ca:	b082      	sub	sp, #8
 80264cc:	af00      	add	r7, sp, #0
 80264ce:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80264d0:	687b      	ldr	r3, [r7, #4]
 80264d2:	2200      	movs	r2, #0
 80264d4:	601a      	str	r2, [r3, #0]
 80264d6:	687b      	ldr	r3, [r7, #4]
 80264d8:	2200      	movs	r2, #0
 80264da:	605a      	str	r2, [r3, #4]
 80264dc:	687b      	ldr	r3, [r7, #4]
 80264de:	3308      	adds	r3, #8
 80264e0:	4618      	mov	r0, r3
 80264e2:	f001 f99a 	bl	802781a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>
 80264e6:	687b      	ldr	r3, [r7, #4]
 80264e8:	3318      	adds	r3, #24
 80264ea:	4618      	mov	r0, r3
 80264ec:	f001 f995 	bl	802781a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>
	{ }
 80264f0:	687b      	ldr	r3, [r7, #4]
 80264f2:	4618      	mov	r0, r3
 80264f4:	3708      	adds	r7, #8
 80264f6:	46bd      	mov	sp, r7
 80264f8:	bd80      	pop	{r7, pc}

080264fa <_ZN9__gnu_cxx13new_allocatorI8IMUFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80264fa:	b480      	push	{r7}
 80264fc:	b083      	sub	sp, #12
 80264fe:	af00      	add	r7, sp, #0
 8026500:	6078      	str	r0, [r7, #4]
 8026502:	687b      	ldr	r3, [r7, #4]
 8026504:	4618      	mov	r0, r3
 8026506:	370c      	adds	r7, #12
 8026508:	46bd      	mov	sp, r7
 802650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802650e:	4770      	bx	lr

08026510 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8026510:	b590      	push	{r4, r7, lr}
 8026512:	b085      	sub	sp, #20
 8026514:	af00      	add	r7, sp, #0
 8026516:	6078      	str	r0, [r7, #4]
 8026518:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802651a:	f107 030c 	add.w	r3, r7, #12
 802651e:	6879      	ldr	r1, [r7, #4]
 8026520:	4618      	mov	r0, r3
 8026522:	f000 f85b 	bl	80265dc <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8026526:	f107 030c 	add.w	r3, r7, #12
 802652a:	6839      	ldr	r1, [r7, #0]
 802652c:	4618      	mov	r0, r3
 802652e:	f001 f98b 	bl	8027848 <_ZNSt16allocator_traitsISaIP8IMUFrameEE8allocateERS2_j>
 8026532:	4604      	mov	r4, r0
 8026534:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8026536:	f107 030c 	add.w	r3, r7, #12
 802653a:	4618      	mov	r0, r3
 802653c:	f000 f85f 	bl	80265fe <_ZNSaIP8IMUFrameED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8026540:	4623      	mov	r3, r4
      }
 8026542:	4618      	mov	r0, r3
 8026544:	3714      	adds	r7, #20
 8026546:	46bd      	mov	sp, r7
 8026548:	bd90      	pop	{r4, r7, pc}

0802654a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 802654a:	b580      	push	{r7, lr}
 802654c:	b086      	sub	sp, #24
 802654e:	af00      	add	r7, sp, #0
 8026550:	60f8      	str	r0, [r7, #12]
 8026552:	60b9      	str	r1, [r7, #8]
 8026554:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8026556:	68bb      	ldr	r3, [r7, #8]
 8026558:	617b      	str	r3, [r7, #20]
 802655a:	697a      	ldr	r2, [r7, #20]
 802655c:	687b      	ldr	r3, [r7, #4]
 802655e:	429a      	cmp	r2, r3
 8026560:	d209      	bcs.n	8026576 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8026562:	68f8      	ldr	r0, [r7, #12]
 8026564:	f000 fead 	bl	80272c2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8026568:	4602      	mov	r2, r0
 802656a:	697b      	ldr	r3, [r7, #20]
 802656c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 802656e:	697b      	ldr	r3, [r7, #20]
 8026570:	3304      	adds	r3, #4
 8026572:	617b      	str	r3, [r7, #20]
 8026574:	e7f1      	b.n	802655a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8026576:	bf00      	nop
 8026578:	3718      	adds	r7, #24
 802657a:	46bd      	mov	sp, r7
 802657c:	bd80      	pop	{r7, pc}

0802657e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 802657e:	b590      	push	{r4, r7, lr}
 8026580:	b083      	sub	sp, #12
 8026582:	af00      	add	r7, sp, #0
 8026584:	6078      	str	r0, [r7, #4]
 8026586:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8026588:	687b      	ldr	r3, [r7, #4]
 802658a:	683a      	ldr	r2, [r7, #0]
 802658c:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 802658e:	683b      	ldr	r3, [r7, #0]
 8026590:	681a      	ldr	r2, [r3, #0]
 8026592:	687b      	ldr	r3, [r7, #4]
 8026594:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8026596:	687b      	ldr	r3, [r7, #4]
 8026598:	685c      	ldr	r4, [r3, #4]
 802659a:	f000 fec4 	bl	8027326 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 802659e:	4602      	mov	r2, r0
 80265a0:	4613      	mov	r3, r2
 80265a2:	005b      	lsls	r3, r3, #1
 80265a4:	4413      	add	r3, r2
 80265a6:	00db      	lsls	r3, r3, #3
 80265a8:	18e2      	adds	r2, r4, r3
 80265aa:	687b      	ldr	r3, [r7, #4]
 80265ac:	609a      	str	r2, [r3, #8]
      }
 80265ae:	bf00      	nop
 80265b0:	370c      	adds	r7, #12
 80265b2:	46bd      	mov	sp, r7
 80265b4:	bd90      	pop	{r4, r7, pc}

080265b6 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80265b6:	b590      	push	{r4, r7, lr}
 80265b8:	b083      	sub	sp, #12
 80265ba:	af00      	add	r7, sp, #0
 80265bc:	6078      	str	r0, [r7, #4]
 80265be:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80265c0:	687c      	ldr	r4, [r7, #4]
 80265c2:	2018      	movs	r0, #24
 80265c4:	f7fa fc22 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 80265c8:	4603      	mov	r3, r0
 80265ca:	461a      	mov	r2, r3
 80265cc:	6839      	ldr	r1, [r7, #0]
 80265ce:	4620      	mov	r0, r4
 80265d0:	f001 f949 	bl	8027866 <_ZNSt16allocator_traitsISaI8IMUFrameEE10deallocateERS1_PS0_j>
      }
 80265d4:	bf00      	nop
 80265d6:	370c      	adds	r7, #12
 80265d8:	46bd      	mov	sp, r7
 80265da:	bd90      	pop	{r4, r7, pc}

080265dc <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80265dc:	b580      	push	{r7, lr}
 80265de:	b082      	sub	sp, #8
 80265e0:	af00      	add	r7, sp, #0
 80265e2:	6078      	str	r0, [r7, #4]
 80265e4:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80265e6:	6838      	ldr	r0, [r7, #0]
 80265e8:	f001 f94c 	bl	8027884 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80265ec:	4603      	mov	r3, r0
 80265ee:	4619      	mov	r1, r3
 80265f0:	6878      	ldr	r0, [r7, #4]
 80265f2:	f001 f952 	bl	802789a <_ZNSaIP8IMUFrameEC1IS_EERKSaIT_E>
 80265f6:	6878      	ldr	r0, [r7, #4]
 80265f8:	3708      	adds	r7, #8
 80265fa:	46bd      	mov	sp, r7
 80265fc:	bd80      	pop	{r7, pc}

080265fe <_ZNSaIP8IMUFrameED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80265fe:	b580      	push	{r7, lr}
 8026600:	b082      	sub	sp, #8
 8026602:	af00      	add	r7, sp, #0
 8026604:	6078      	str	r0, [r7, #4]
 8026606:	6878      	ldr	r0, [r7, #4]
 8026608:	f001 f954 	bl	80278b4 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameED1Ev>
 802660c:	687b      	ldr	r3, [r7, #4]
 802660e:	4618      	mov	r0, r3
 8026610:	3708      	adds	r7, #8
 8026612:	46bd      	mov	sp, r7
 8026614:	bd80      	pop	{r7, pc}

08026616 <_ZNSt16allocator_traitsISaIP8IMUFrameEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8026616:	b580      	push	{r7, lr}
 8026618:	b084      	sub	sp, #16
 802661a:	af00      	add	r7, sp, #0
 802661c:	60f8      	str	r0, [r7, #12]
 802661e:	60b9      	str	r1, [r7, #8]
 8026620:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8026622:	687a      	ldr	r2, [r7, #4]
 8026624:	68b9      	ldr	r1, [r7, #8]
 8026626:	68f8      	ldr	r0, [r7, #12]
 8026628:	f001 f94f 	bl	80278ca <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE10deallocateEPS2_j>
 802662c:	bf00      	nop
 802662e:	3710      	adds	r7, #16
 8026630:	46bd      	mov	sp, r7
 8026632:	bd80      	pop	{r7, pc}

08026634 <_ZNSaI14ServoDataFrameEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8026634:	b580      	push	{r7, lr}
 8026636:	b082      	sub	sp, #8
 8026638:	af00      	add	r7, sp, #0
 802663a:	6078      	str	r0, [r7, #4]
 802663c:	6878      	ldr	r0, [r7, #4]
 802663e:	f001 f954 	bl	80278ea <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameEC1Ev>
 8026642:	687b      	ldr	r3, [r7, #4]
 8026644:	4618      	mov	r0, r3
 8026646:	3708      	adds	r7, #8
 8026648:	46bd      	mov	sp, r7
 802664a:	bd80      	pop	{r7, pc}

0802664c <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 802664c:	b580      	push	{r7, lr}
 802664e:	b082      	sub	sp, #8
 8026650:	af00      	add	r7, sp, #0
 8026652:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8026654:	687b      	ldr	r3, [r7, #4]
 8026656:	2200      	movs	r2, #0
 8026658:	601a      	str	r2, [r3, #0]
 802665a:	687b      	ldr	r3, [r7, #4]
 802665c:	2200      	movs	r2, #0
 802665e:	605a      	str	r2, [r3, #4]
 8026660:	687b      	ldr	r3, [r7, #4]
 8026662:	3308      	adds	r3, #8
 8026664:	4618      	mov	r0, r3
 8026666:	f001 f94b 	bl	8027900 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1Ev>
 802666a:	687b      	ldr	r3, [r7, #4]
 802666c:	3318      	adds	r3, #24
 802666e:	4618      	mov	r0, r3
 8026670:	f001 f946 	bl	8027900 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1Ev>
	{ }
 8026674:	687b      	ldr	r3, [r7, #4]
 8026676:	4618      	mov	r0, r3
 8026678:	3708      	adds	r7, #8
 802667a:	46bd      	mov	sp, r7
 802667c:	bd80      	pop	{r7, pc}

0802667e <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameED1Ev>:
 802667e:	b480      	push	{r7}
 8026680:	b083      	sub	sp, #12
 8026682:	af00      	add	r7, sp, #0
 8026684:	6078      	str	r0, [r7, #4]
 8026686:	687b      	ldr	r3, [r7, #4]
 8026688:	4618      	mov	r0, r3
 802668a:	370c      	adds	r7, #12
 802668c:	46bd      	mov	sp, r7
 802668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026692:	4770      	bx	lr

08026694 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8026694:	b590      	push	{r4, r7, lr}
 8026696:	b085      	sub	sp, #20
 8026698:	af00      	add	r7, sp, #0
 802669a:	6078      	str	r0, [r7, #4]
 802669c:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802669e:	f107 030c 	add.w	r3, r7, #12
 80266a2:	6879      	ldr	r1, [r7, #4]
 80266a4:	4618      	mov	r0, r3
 80266a6:	f000 f85c 	bl	8026762 <_ZNKSt11_Deque_baseI14ServoDataFrameSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80266aa:	f107 030c 	add.w	r3, r7, #12
 80266ae:	6839      	ldr	r1, [r7, #0]
 80266b0:	4618      	mov	r0, r3
 80266b2:	f001 f93c 	bl	802792e <_ZNSt16allocator_traitsISaIP14ServoDataFrameEE8allocateERS2_j>
 80266b6:	4604      	mov	r4, r0
 80266b8:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80266ba:	f107 030c 	add.w	r3, r7, #12
 80266be:	4618      	mov	r0, r3
 80266c0:	f000 f860 	bl	8026784 <_ZNSaIP14ServoDataFrameED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80266c4:	4623      	mov	r3, r4
      }
 80266c6:	4618      	mov	r0, r3
 80266c8:	3714      	adds	r7, #20
 80266ca:	46bd      	mov	sp, r7
 80266cc:	bd90      	pop	{r4, r7, pc}

080266ce <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80266ce:	b580      	push	{r7, lr}
 80266d0:	b086      	sub	sp, #24
 80266d2:	af00      	add	r7, sp, #0
 80266d4:	60f8      	str	r0, [r7, #12]
 80266d6:	60b9      	str	r1, [r7, #8]
 80266d8:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80266da:	68bb      	ldr	r3, [r7, #8]
 80266dc:	617b      	str	r3, [r7, #20]
 80266de:	697a      	ldr	r2, [r7, #20]
 80266e0:	687b      	ldr	r3, [r7, #4]
 80266e2:	429a      	cmp	r2, r3
 80266e4:	d209      	bcs.n	80266fa <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 80266e6:	68f8      	ldr	r0, [r7, #12]
 80266e8:	f000 feac 	bl	8027444 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_M_allocate_nodeEv>
 80266ec:	4602      	mov	r2, r0
 80266ee:	697b      	ldr	r3, [r7, #20]
 80266f0:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80266f2:	697b      	ldr	r3, [r7, #20]
 80266f4:	3304      	adds	r3, #4
 80266f6:	617b      	str	r3, [r7, #20]
 80266f8:	e7f1      	b.n	80266de <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 80266fa:	bf00      	nop
 80266fc:	3718      	adds	r7, #24
 80266fe:	46bd      	mov	sp, r7
 8026700:	bd80      	pop	{r7, pc}

08026702 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8026702:	b590      	push	{r4, r7, lr}
 8026704:	b083      	sub	sp, #12
 8026706:	af00      	add	r7, sp, #0
 8026708:	6078      	str	r0, [r7, #4]
 802670a:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 802670c:	687b      	ldr	r3, [r7, #4]
 802670e:	683a      	ldr	r2, [r7, #0]
 8026710:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8026712:	683b      	ldr	r3, [r7, #0]
 8026714:	681a      	ldr	r2, [r3, #0]
 8026716:	687b      	ldr	r3, [r7, #4]
 8026718:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 802671a:	687b      	ldr	r3, [r7, #4]
 802671c:	685c      	ldr	r4, [r3, #4]
 802671e:	f000 fea4 	bl	802746a <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E14_S_buffer_sizeEv>
 8026722:	4603      	mov	r3, r0
 8026724:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8026728:	fb02 f303 	mul.w	r3, r2, r3
 802672c:	18e2      	adds	r2, r4, r3
 802672e:	687b      	ldr	r3, [r7, #4]
 8026730:	609a      	str	r2, [r3, #8]
      }
 8026732:	bf00      	nop
 8026734:	370c      	adds	r7, #12
 8026736:	46bd      	mov	sp, r7
 8026738:	bd90      	pop	{r4, r7, pc}

0802673a <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 802673a:	b590      	push	{r4, r7, lr}
 802673c:	b083      	sub	sp, #12
 802673e:	af00      	add	r7, sp, #0
 8026740:	6078      	str	r0, [r7, #4]
 8026742:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8026744:	687c      	ldr	r4, [r7, #4]
 8026746:	f44f 7086 	mov.w	r0, #268	; 0x10c
 802674a:	f7fa fb5f 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 802674e:	4603      	mov	r3, r0
 8026750:	461a      	mov	r2, r3
 8026752:	6839      	ldr	r1, [r7, #0]
 8026754:	4620      	mov	r0, r4
 8026756:	f001 f8f9 	bl	802794c <_ZNSt16allocator_traitsISaI14ServoDataFrameEE10deallocateERS1_PS0_j>
      }
 802675a:	bf00      	nop
 802675c:	370c      	adds	r7, #12
 802675e:	46bd      	mov	sp, r7
 8026760:	bd90      	pop	{r4, r7, pc}

08026762 <_ZNKSt11_Deque_baseI14ServoDataFrameSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8026762:	b580      	push	{r7, lr}
 8026764:	b082      	sub	sp, #8
 8026766:	af00      	add	r7, sp, #0
 8026768:	6078      	str	r0, [r7, #4]
 802676a:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 802676c:	6838      	ldr	r0, [r7, #0]
 802676e:	f001 f8fc 	bl	802796a <_ZNKSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8026772:	4603      	mov	r3, r0
 8026774:	4619      	mov	r1, r3
 8026776:	6878      	ldr	r0, [r7, #4]
 8026778:	f001 f902 	bl	8027980 <_ZNSaIP14ServoDataFrameEC1IS_EERKSaIT_E>
 802677c:	6878      	ldr	r0, [r7, #4]
 802677e:	3708      	adds	r7, #8
 8026780:	46bd      	mov	sp, r7
 8026782:	bd80      	pop	{r7, pc}

08026784 <_ZNSaIP14ServoDataFrameED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8026784:	b580      	push	{r7, lr}
 8026786:	b082      	sub	sp, #8
 8026788:	af00      	add	r7, sp, #0
 802678a:	6078      	str	r0, [r7, #4]
 802678c:	6878      	ldr	r0, [r7, #4]
 802678e:	f001 f904 	bl	802799a <_ZN9__gnu_cxx13new_allocatorIP14ServoDataFrameED1Ev>
 8026792:	687b      	ldr	r3, [r7, #4]
 8026794:	4618      	mov	r0, r3
 8026796:	3708      	adds	r7, #8
 8026798:	46bd      	mov	sp, r7
 802679a:	bd80      	pop	{r7, pc}

0802679c <_ZNSt16allocator_traitsISaIP14ServoDataFrameEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802679c:	b580      	push	{r7, lr}
 802679e:	b084      	sub	sp, #16
 80267a0:	af00      	add	r7, sp, #0
 80267a2:	60f8      	str	r0, [r7, #12]
 80267a4:	60b9      	str	r1, [r7, #8]
 80267a6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80267a8:	687a      	ldr	r2, [r7, #4]
 80267aa:	68b9      	ldr	r1, [r7, #8]
 80267ac:	68f8      	ldr	r0, [r7, #12]
 80267ae:	f001 f8ff 	bl	80279b0 <_ZN9__gnu_cxx13new_allocatorIP14ServoDataFrameE10deallocateEPS2_j>
 80267b2:	bf00      	nop
 80267b4:	3710      	adds	r7, #16
 80267b6:	46bd      	mov	sp, r7
 80267b8:	bd80      	pop	{r7, pc}

080267ba <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80267ba:	b580      	push	{r7, lr}
 80267bc:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80267be:	2018      	movs	r0, #24
 80267c0:	f7fa fb24 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 80267c4:	4603      	mov	r3, r0
 80267c6:	4618      	mov	r0, r3
 80267c8:	bd80      	pop	{r7, pc}

080267ca <_ZNSt5dequeI14ServoDataFrameSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80267ca:	b580      	push	{r7, lr}
 80267cc:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80267ce:	f44f 7086 	mov.w	r0, #268	; 0x10c
 80267d2:	f7fa fb1b 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 80267d6:	4603      	mov	r3, r0
 80267d8:	4618      	mov	r0, r3
 80267da:	bd80      	pop	{r7, pc}

080267dc <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80267dc:	b480      	push	{r7}
 80267de:	b083      	sub	sp, #12
 80267e0:	af00      	add	r7, sp, #0
 80267e2:	6078      	str	r0, [r7, #4]
 80267e4:	687b      	ldr	r3, [r7, #4]
 80267e6:	4618      	mov	r0, r3
 80267e8:	370c      	adds	r7, #12
 80267ea:	46bd      	mov	sp, r7
 80267ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267f0:	4770      	bx	lr

080267f2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80267f2:	b480      	push	{r7}
 80267f4:	b083      	sub	sp, #12
 80267f6:	af00      	add	r7, sp, #0
 80267f8:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80267fa:	687b      	ldr	r3, [r7, #4]
 80267fc:	2200      	movs	r2, #0
 80267fe:	601a      	str	r2, [r3, #0]
 8026800:	687b      	ldr	r3, [r7, #4]
 8026802:	2200      	movs	r2, #0
 8026804:	605a      	str	r2, [r3, #4]
 8026806:	687b      	ldr	r3, [r7, #4]
 8026808:	2200      	movs	r2, #0
 802680a:	609a      	str	r2, [r3, #8]
 802680c:	687b      	ldr	r3, [r7, #4]
 802680e:	2200      	movs	r2, #0
 8026810:	60da      	str	r2, [r3, #12]
 8026812:	687b      	ldr	r3, [r7, #4]
 8026814:	4618      	mov	r0, r3
 8026816:	370c      	adds	r7, #12
 8026818:	46bd      	mov	sp, r7
 802681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802681e:	4770      	bx	lr

08026820 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8026820:	b580      	push	{r7, lr}
 8026822:	b082      	sub	sp, #8
 8026824:	af00      	add	r7, sp, #0
 8026826:	6078      	str	r0, [r7, #4]
 8026828:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 802682a:	2200      	movs	r2, #0
 802682c:	6839      	ldr	r1, [r7, #0]
 802682e:	6878      	ldr	r0, [r7, #4]
 8026830:	f001 f8ce 	bl	80279d0 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8026834:	4603      	mov	r3, r0
 8026836:	4618      	mov	r0, r3
 8026838:	3708      	adds	r7, #8
 802683a:	46bd      	mov	sp, r7
 802683c:	bd80      	pop	{r7, pc}

0802683e <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 802683e:	b580      	push	{r7, lr}
 8026840:	b082      	sub	sp, #8
 8026842:	af00      	add	r7, sp, #0
 8026844:	6078      	str	r0, [r7, #4]
 8026846:	6039      	str	r1, [r7, #0]
 8026848:	6878      	ldr	r0, [r7, #4]
 802684a:	f001 f8df 	bl	8027a0c <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>
 802684e:	687b      	ldr	r3, [r7, #4]
 8026850:	4618      	mov	r0, r3
 8026852:	3708      	adds	r7, #8
 8026854:	46bd      	mov	sp, r7
 8026856:	bd80      	pop	{r7, pc}

08026858 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026858:	b480      	push	{r7}
 802685a:	b083      	sub	sp, #12
 802685c:	af00      	add	r7, sp, #0
 802685e:	6078      	str	r0, [r7, #4]
 8026860:	687b      	ldr	r3, [r7, #4]
 8026862:	4618      	mov	r0, r3
 8026864:	370c      	adds	r7, #12
 8026866:	46bd      	mov	sp, r7
 8026868:	f85d 7b04 	ldr.w	r7, [sp], #4
 802686c:	4770      	bx	lr

0802686e <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 802686e:	b580      	push	{r7, lr}
 8026870:	b084      	sub	sp, #16
 8026872:	af00      	add	r7, sp, #0
 8026874:	60f8      	str	r0, [r7, #12]
 8026876:	60b9      	str	r1, [r7, #8]
 8026878:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 802687a:	687b      	ldr	r3, [r7, #4]
 802687c:	009b      	lsls	r3, r3, #2
 802687e:	4619      	mov	r1, r3
 8026880:	68b8      	ldr	r0, [r7, #8]
 8026882:	f019 fc75 	bl	8040170 <_ZdlPvj>
      }
 8026886:	bf00      	nop
 8026888:	3710      	adds	r7, #16
 802688a:	46bd      	mov	sp, r7
 802688c:	bd80      	pop	{r7, pc}

0802688e <_ZNSaIjEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 802688e:	b580      	push	{r7, lr}
 8026890:	b082      	sub	sp, #8
 8026892:	af00      	add	r7, sp, #0
 8026894:	6078      	str	r0, [r7, #4]
 8026896:	6878      	ldr	r0, [r7, #4]
 8026898:	f001 f8c3 	bl	8027a22 <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>
 802689c:	687b      	ldr	r3, [r7, #4]
 802689e:	4618      	mov	r0, r3
 80268a0:	3708      	adds	r7, #8
 80268a2:	46bd      	mov	sp, r7
 80268a4:	bd80      	pop	{r7, pc}

080268a6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80268a6:	b580      	push	{r7, lr}
 80268a8:	b082      	sub	sp, #8
 80268aa:	af00      	add	r7, sp, #0
 80268ac:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80268ae:	687b      	ldr	r3, [r7, #4]
 80268b0:	2200      	movs	r2, #0
 80268b2:	601a      	str	r2, [r3, #0]
 80268b4:	687b      	ldr	r3, [r7, #4]
 80268b6:	2200      	movs	r2, #0
 80268b8:	605a      	str	r2, [r3, #4]
 80268ba:	687b      	ldr	r3, [r7, #4]
 80268bc:	3308      	adds	r3, #8
 80268be:	4618      	mov	r0, r3
 80268c0:	f001 f8ba 	bl	8027a38 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
 80268c4:	687b      	ldr	r3, [r7, #4]
 80268c6:	3318      	adds	r3, #24
 80268c8:	4618      	mov	r0, r3
 80268ca:	f001 f8b5 	bl	8027a38 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
	{ }
 80268ce:	687b      	ldr	r3, [r7, #4]
 80268d0:	4618      	mov	r0, r3
 80268d2:	3708      	adds	r7, #8
 80268d4:	46bd      	mov	sp, r7
 80268d6:	bd80      	pop	{r7, pc}

080268d8 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80268d8:	b480      	push	{r7}
 80268da:	b083      	sub	sp, #12
 80268dc:	af00      	add	r7, sp, #0
 80268de:	6078      	str	r0, [r7, #4]
 80268e0:	687b      	ldr	r3, [r7, #4]
 80268e2:	4618      	mov	r0, r3
 80268e4:	370c      	adds	r7, #12
 80268e6:	46bd      	mov	sp, r7
 80268e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268ec:	4770      	bx	lr

080268ee <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80268ee:	b590      	push	{r4, r7, lr}
 80268f0:	b085      	sub	sp, #20
 80268f2:	af00      	add	r7, sp, #0
 80268f4:	6078      	str	r0, [r7, #4]
 80268f6:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80268f8:	f107 030c 	add.w	r3, r7, #12
 80268fc:	6879      	ldr	r1, [r7, #4]
 80268fe:	4618      	mov	r0, r3
 8026900:	f000 f82c 	bl	802695c <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8026904:	f107 030c 	add.w	r3, r7, #12
 8026908:	6839      	ldr	r1, [r7, #0]
 802690a:	4618      	mov	r0, r3
 802690c:	f001 f8ab 	bl	8027a66 <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>
 8026910:	4604      	mov	r4, r0
 8026912:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8026914:	f107 030c 	add.w	r3, r7, #12
 8026918:	4618      	mov	r0, r3
 802691a:	f000 f830 	bl	802697e <_ZNSaIPjED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 802691e:	4623      	mov	r3, r4
      }
 8026920:	4618      	mov	r0, r3
 8026922:	3714      	adds	r7, #20
 8026924:	46bd      	mov	sp, r7
 8026926:	bd90      	pop	{r4, r7, pc}

08026928 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8026928:	b580      	push	{r7, lr}
 802692a:	b086      	sub	sp, #24
 802692c:	af00      	add	r7, sp, #0
 802692e:	60f8      	str	r0, [r7, #12]
 8026930:	60b9      	str	r1, [r7, #8]
 8026932:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8026934:	68bb      	ldr	r3, [r7, #8]
 8026936:	617b      	str	r3, [r7, #20]
 8026938:	697a      	ldr	r2, [r7, #20]
 802693a:	687b      	ldr	r3, [r7, #4]
 802693c:	429a      	cmp	r2, r3
 802693e:	d209      	bcs.n	8026954 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8026940:	68f8      	ldr	r0, [r7, #12]
 8026942:	f7ff fc0f 	bl	8026164 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8026946:	4602      	mov	r2, r0
 8026948:	697b      	ldr	r3, [r7, #20]
 802694a:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 802694c:	697b      	ldr	r3, [r7, #20]
 802694e:	3304      	adds	r3, #4
 8026950:	617b      	str	r3, [r7, #20]
 8026952:	e7f1      	b.n	8026938 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x10>
    }
 8026954:	bf00      	nop
 8026956:	3718      	adds	r7, #24
 8026958:	46bd      	mov	sp, r7
 802695a:	bd80      	pop	{r7, pc}

0802695c <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 802695c:	b580      	push	{r7, lr}
 802695e:	b082      	sub	sp, #8
 8026960:	af00      	add	r7, sp, #0
 8026962:	6078      	str	r0, [r7, #4]
 8026964:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8026966:	6838      	ldr	r0, [r7, #0]
 8026968:	f000 fdfd 	bl	8027566 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 802696c:	4603      	mov	r3, r0
 802696e:	4619      	mov	r1, r3
 8026970:	6878      	ldr	r0, [r7, #4]
 8026972:	f001 f887 	bl	8027a84 <_ZNSaIPjEC1IjEERKSaIT_E>
 8026976:	6878      	ldr	r0, [r7, #4]
 8026978:	3708      	adds	r7, #8
 802697a:	46bd      	mov	sp, r7
 802697c:	bd80      	pop	{r7, pc}

0802697e <_ZNSaIPjED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 802697e:	b580      	push	{r7, lr}
 8026980:	b082      	sub	sp, #8
 8026982:	af00      	add	r7, sp, #0
 8026984:	6078      	str	r0, [r7, #4]
 8026986:	6878      	ldr	r0, [r7, #4]
 8026988:	f001 f889 	bl	8027a9e <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>
 802698c:	687b      	ldr	r3, [r7, #4]
 802698e:	4618      	mov	r0, r3
 8026990:	3708      	adds	r7, #8
 8026992:	46bd      	mov	sp, r7
 8026994:	bd80      	pop	{r7, pc}

08026996 <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8026996:	b580      	push	{r7, lr}
 8026998:	b084      	sub	sp, #16
 802699a:	af00      	add	r7, sp, #0
 802699c:	60f8      	str	r0, [r7, #12]
 802699e:	60b9      	str	r1, [r7, #8]
 80269a0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80269a2:	687a      	ldr	r2, [r7, #4]
 80269a4:	68b9      	ldr	r1, [r7, #8]
 80269a6:	68f8      	ldr	r0, [r7, #12]
 80269a8:	f001 f884 	bl	8027ab4 <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>
 80269ac:	bf00      	nop
 80269ae:	3710      	adds	r7, #16
 80269b0:	46bd      	mov	sp, r7
 80269b2:	bd80      	pop	{r7, pc}

080269b4 <_ZNKSt16initializer_listI8IMUFrameE4sizeEv>:
      size() const noexcept { return _M_len; }
 80269b4:	b480      	push	{r7}
 80269b6:	b083      	sub	sp, #12
 80269b8:	af00      	add	r7, sp, #0
 80269ba:	6078      	str	r0, [r7, #4]
 80269bc:	687b      	ldr	r3, [r7, #4]
 80269be:	685b      	ldr	r3, [r3, #4]
 80269c0:	4618      	mov	r0, r3
 80269c2:	370c      	adds	r7, #12
 80269c4:	46bd      	mov	sp, r7
 80269c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269ca:	4770      	bx	lr

080269cc <_ZSt8distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80269cc:	b5b0      	push	{r4, r5, r7, lr}
 80269ce:	b082      	sub	sp, #8
 80269d0:	af00      	add	r7, sp, #0
 80269d2:	6078      	str	r0, [r7, #4]
 80269d4:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80269d6:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80269d8:	1d3b      	adds	r3, r7, #4
 80269da:	4618      	mov	r0, r3
 80269dc:	f000 f83d 	bl	8026a5a <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 80269e0:	462a      	mov	r2, r5
 80269e2:	6839      	ldr	r1, [r7, #0]
 80269e4:	4620      	mov	r0, r4
 80269e6:	f001 f875 	bl	8027ad4 <_ZSt10__distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 80269ea:	4603      	mov	r3, r0
    }
 80269ec:	4618      	mov	r0, r3
 80269ee:	3708      	adds	r7, #8
 80269f0:	46bd      	mov	sp, r7
 80269f2:	bdb0      	pop	{r4, r5, r7, pc}

080269f4 <_ZSt7advanceIPK8IMUFramejEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 80269f4:	b590      	push	{r4, r7, lr}
 80269f6:	b085      	sub	sp, #20
 80269f8:	af00      	add	r7, sp, #0
 80269fa:	6078      	str	r0, [r7, #4]
 80269fc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 80269fe:	683b      	ldr	r3, [r7, #0]
 8026a00:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8026a02:	6878      	ldr	r0, [r7, #4]
 8026a04:	f000 f829 	bl	8026a5a <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 8026a08:	4622      	mov	r2, r4
 8026a0a:	68f9      	ldr	r1, [r7, #12]
 8026a0c:	6878      	ldr	r0, [r7, #4]
 8026a0e:	f001 f877 	bl	8027b00 <_ZSt9__advanceIPK8IMUFrameiEvRT_T0_St26random_access_iterator_tag>
    }
 8026a12:	bf00      	nop
 8026a14:	3714      	adds	r7, #20
 8026a16:	46bd      	mov	sp, r7
 8026a18:	bd90      	pop	{r4, r7, pc}

08026a1a <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8026a1a:	b5b0      	push	{r4, r5, r7, lr}
 8026a1c:	b088      	sub	sp, #32
 8026a1e:	af00      	add	r7, sp, #0
 8026a20:	60f8      	str	r0, [r7, #12]
 8026a22:	60b9      	str	r1, [r7, #8]
 8026a24:	607a      	str	r2, [r7, #4]
 8026a26:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026a28:	68b8      	ldr	r0, [r7, #8]
 8026a2a:	f001 f87f 	bl	8027b2c <_ZSt12__miter_baseIPK8IMUFrameET_S3_>
 8026a2e:	4604      	mov	r4, r0
 8026a30:	6878      	ldr	r0, [r7, #4]
 8026a32:	f001 f87b 	bl	8027b2c <_ZSt12__miter_baseIPK8IMUFrameET_S3_>
 8026a36:	4605      	mov	r5, r0
 8026a38:	f107 0310 	add.w	r3, r7, #16
 8026a3c:	6839      	ldr	r1, [r7, #0]
 8026a3e:	4618      	mov	r0, r3
 8026a40:	f7fd fe04 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8026a44:	68f8      	ldr	r0, [r7, #12]
 8026a46:	f107 0310 	add.w	r3, r7, #16
 8026a4a:	462a      	mov	r2, r5
 8026a4c:	4621      	mov	r1, r4
 8026a4e:	f001 f878 	bl	8027b42 <_ZSt13__copy_move_aILb0EPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET1_T0_S8_S7_>
    }
 8026a52:	68f8      	ldr	r0, [r7, #12]
 8026a54:	3720      	adds	r7, #32
 8026a56:	46bd      	mov	sp, r7
 8026a58:	bdb0      	pop	{r4, r5, r7, pc}

08026a5a <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8026a5a:	b480      	push	{r7}
 8026a5c:	b083      	sub	sp, #12
 8026a5e:	af00      	add	r7, sp, #0
 8026a60:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8026a62:	bf00      	nop
 8026a64:	4618      	mov	r0, r3
 8026a66:	370c      	adds	r7, #12
 8026a68:	46bd      	mov	sp, r7
 8026a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a6e:	4770      	bx	lr

08026a70 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag>:
      deque<_Tp, _Alloc>::
 8026a70:	b590      	push	{r4, r7, lr}
 8026a72:	b0a5      	sub	sp, #148	; 0x94
 8026a74:	af02      	add	r7, sp, #8
 8026a76:	60f8      	str	r0, [r7, #12]
 8026a78:	60b9      	str	r1, [r7, #8]
 8026a7a:	607a      	str	r2, [r7, #4]
 8026a7c:	603b      	str	r3, [r7, #0]
	const size_type __n = std::distance(__first, __last);
 8026a7e:	6839      	ldr	r1, [r7, #0]
 8026a80:	6878      	ldr	r0, [r7, #4]
 8026a82:	f7ff ffa3 	bl	80269cc <_ZSt8distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8026a86:	4603      	mov	r3, r0
 8026a88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 8026a8c:	68bb      	ldr	r3, [r7, #8]
 8026a8e:	681a      	ldr	r2, [r3, #0]
 8026a90:	68fb      	ldr	r3, [r7, #12]
 8026a92:	689b      	ldr	r3, [r3, #8]
 8026a94:	429a      	cmp	r2, r3
 8026a96:	d126      	bne.n	8026ae6 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0x76>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8026a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026a9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8026aa0:	68f9      	ldr	r1, [r7, #12]
 8026aa2:	4618      	mov	r0, r3
 8026aa4:	f001 f87e 	bl	8027ba4 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj>
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8026aa8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8026aac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8026ab0:	4611      	mov	r1, r2
 8026ab2:	4618      	mov	r0, r3
 8026ab4:	f7fd fdca 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					    _M_get_Tp_allocator());
 8026ab8:	68fb      	ldr	r3, [r7, #12]
 8026aba:	4618      	mov	r0, r3
 8026abc:	f7fd fdbb 	bl	8024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8026ac0:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8026ac2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8026ac6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8026aca:	9200      	str	r2, [sp, #0]
 8026acc:	683a      	ldr	r2, [r7, #0]
 8026ace:	6879      	ldr	r1, [r7, #4]
 8026ad0:	f001 f892 	bl	8027bf8 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 8026ad4:	68fb      	ldr	r3, [r7, #12]
 8026ad6:	f103 0408 	add.w	r4, r3, #8
 8026ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026ade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026ae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8026ae4:	e03d      	b.n	8026b62 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 8026ae6:	68bb      	ldr	r3, [r7, #8]
 8026ae8:	681a      	ldr	r2, [r3, #0]
 8026aea:	68fb      	ldr	r3, [r7, #12]
 8026aec:	699b      	ldr	r3, [r3, #24]
 8026aee:	429a      	cmp	r2, r3
 8026af0:	d127      	bne.n	8026b42 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 8026af2:	f107 0314 	add.w	r3, r7, #20
 8026af6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8026afa:	68f9      	ldr	r1, [r7, #12]
 8026afc:	4618      	mov	r0, r3
 8026afe:	f001 f893 	bl	8027c28 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 8026b02:	68fb      	ldr	r3, [r7, #12]
 8026b04:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 8026b08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8026b0c:	4611      	mov	r1, r2
 8026b0e:	4618      	mov	r0, r3
 8026b10:	f7fd fd9c 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					    _M_get_Tp_allocator());
 8026b14:	68fb      	ldr	r3, [r7, #12]
 8026b16:	4618      	mov	r0, r3
 8026b18:	f7fd fd8d 	bl	8024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8026b1c:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 8026b1e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8026b22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8026b26:	9200      	str	r2, [sp, #0]
 8026b28:	683a      	ldr	r2, [r7, #0]
 8026b2a:	6879      	ldr	r1, [r7, #4]
 8026b2c:	f001 f864 	bl	8027bf8 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 8026b30:	68fb      	ldr	r3, [r7, #12]
 8026b32:	f103 0418 	add.w	r4, r3, #24
 8026b36:	f107 0314 	add.w	r3, r7, #20
 8026b3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026b3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8026b40:	e00f      	b.n	8026b62 <_ZNSt5dequeI8IMUFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 8026b42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8026b46:	68b9      	ldr	r1, [r7, #8]
 8026b48:	4618      	mov	r0, r3
 8026b4a:	f7fd fd7f 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8026b4e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8026b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026b56:	9300      	str	r3, [sp, #0]
 8026b58:	683b      	ldr	r3, [r7, #0]
 8026b5a:	687a      	ldr	r2, [r7, #4]
 8026b5c:	68f8      	ldr	r0, [r7, #12]
 8026b5e:	f001 f88d 	bl	8027c7c <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j>
      }
 8026b62:	bf00      	nop
 8026b64:	378c      	adds	r7, #140	; 0x8c
 8026b66:	46bd      	mov	sp, r7
 8026b68:	bd90      	pop	{r4, r7, pc}

08026b6a <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8026b6a:	b590      	push	{r4, r7, lr}
 8026b6c:	b08b      	sub	sp, #44	; 0x2c
 8026b6e:	af00      	add	r7, sp, #0
 8026b70:	6078      	str	r0, [r7, #4]
 8026b72:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8026b74:	f107 0308 	add.w	r3, r7, #8
 8026b78:	6839      	ldr	r1, [r7, #0]
 8026b7a:	4618      	mov	r0, r3
 8026b7c:	f7fd fd66 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8026b80:	f107 0318 	add.w	r3, r7, #24
 8026b84:	6879      	ldr	r1, [r7, #4]
 8026b86:	4618      	mov	r0, r3
 8026b88:	f7fd fd46 	bl	8024618 <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 8026b8c:	687b      	ldr	r3, [r7, #4]
 8026b8e:	4618      	mov	r0, r3
 8026b90:	f7fd fd51 	bl	8024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8026b94:	4603      	mov	r3, r0
 8026b96:	f107 0218 	add.w	r2, r7, #24
 8026b9a:	f107 0108 	add.w	r1, r7, #8
 8026b9e:	6878      	ldr	r0, [r7, #4]
 8026ba0:	f7fd fd70 	bl	8024684 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8026ba4:	6878      	ldr	r0, [r7, #4]
 8026ba6:	683b      	ldr	r3, [r7, #0]
 8026ba8:	68db      	ldr	r3, [r3, #12]
 8026baa:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8026bac:	687b      	ldr	r3, [r7, #4]
 8026bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8026bb0:	3304      	adds	r3, #4
 8026bb2:	461a      	mov	r2, r3
 8026bb4:	f7fe fc96 	bl	80254e4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8026bb8:	687b      	ldr	r3, [r7, #4]
 8026bba:	683a      	ldr	r2, [r7, #0]
 8026bbc:	f103 0418 	add.w	r4, r3, #24
 8026bc0:	4613      	mov	r3, r2
 8026bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026bc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8026bc8:	bf00      	nop
 8026bca:	372c      	adds	r7, #44	; 0x2c
 8026bcc:	46bd      	mov	sp, r7
 8026bce:	bd90      	pop	{r4, r7, pc}

08026bd0 <_ZNKSt16initializer_listI14ServoDataFrameE4sizeEv>:
 8026bd0:	b480      	push	{r7}
 8026bd2:	b083      	sub	sp, #12
 8026bd4:	af00      	add	r7, sp, #0
 8026bd6:	6078      	str	r0, [r7, #4]
 8026bd8:	687b      	ldr	r3, [r7, #4]
 8026bda:	685b      	ldr	r3, [r3, #4]
 8026bdc:	4618      	mov	r0, r3
 8026bde:	370c      	adds	r7, #12
 8026be0:	46bd      	mov	sp, r7
 8026be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026be6:	4770      	bx	lr

08026be8 <_ZSt8distanceIPK14ServoDataFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
    distance(_InputIterator __first, _InputIterator __last)
 8026be8:	b5b0      	push	{r4, r5, r7, lr}
 8026bea:	b082      	sub	sp, #8
 8026bec:	af00      	add	r7, sp, #0
 8026bee:	6078      	str	r0, [r7, #4]
 8026bf0:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8026bf2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8026bf4:	1d3b      	adds	r3, r7, #4
 8026bf6:	4618      	mov	r0, r3
 8026bf8:	f000 f83d 	bl	8026c76 <_ZSt19__iterator_categoryIPK14ServoDataFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 8026bfc:	462a      	mov	r2, r5
 8026bfe:	6839      	ldr	r1, [r7, #0]
 8026c00:	4620      	mov	r0, r4
 8026c02:	f001 fb2f 	bl	8028264 <_ZSt10__distanceIPK14ServoDataFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 8026c06:	4603      	mov	r3, r0
    }
 8026c08:	4618      	mov	r0, r3
 8026c0a:	3708      	adds	r7, #8
 8026c0c:	46bd      	mov	sp, r7
 8026c0e:	bdb0      	pop	{r4, r5, r7, pc}

08026c10 <_ZSt7advanceIPK14ServoDataFramejEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8026c10:	b590      	push	{r4, r7, lr}
 8026c12:	b085      	sub	sp, #20
 8026c14:	af00      	add	r7, sp, #0
 8026c16:	6078      	str	r0, [r7, #4]
 8026c18:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8026c1a:	683b      	ldr	r3, [r7, #0]
 8026c1c:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8026c1e:	6878      	ldr	r0, [r7, #4]
 8026c20:	f000 f829 	bl	8026c76 <_ZSt19__iterator_categoryIPK14ServoDataFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 8026c24:	4622      	mov	r2, r4
 8026c26:	68f9      	ldr	r1, [r7, #12]
 8026c28:	6878      	ldr	r0, [r7, #4]
 8026c2a:	f001 fb31 	bl	8028290 <_ZSt9__advanceIPK14ServoDataFrameiEvRT_T0_St26random_access_iterator_tag>
    }
 8026c2e:	bf00      	nop
 8026c30:	3714      	adds	r7, #20
 8026c32:	46bd      	mov	sp, r7
 8026c34:	bd90      	pop	{r4, r7, pc}

08026c36 <_ZSt4copyIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 8026c36:	b5b0      	push	{r4, r5, r7, lr}
 8026c38:	b088      	sub	sp, #32
 8026c3a:	af00      	add	r7, sp, #0
 8026c3c:	60f8      	str	r0, [r7, #12]
 8026c3e:	60b9      	str	r1, [r7, #8]
 8026c40:	607a      	str	r2, [r7, #4]
 8026c42:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026c44:	68b8      	ldr	r0, [r7, #8]
 8026c46:	f001 fb39 	bl	80282bc <_ZSt12__miter_baseIPK14ServoDataFrameET_S3_>
 8026c4a:	4604      	mov	r4, r0
 8026c4c:	6878      	ldr	r0, [r7, #4]
 8026c4e:	f001 fb35 	bl	80282bc <_ZSt12__miter_baseIPK14ServoDataFrameET_S3_>
 8026c52:	4605      	mov	r5, r0
 8026c54:	f107 0310 	add.w	r3, r7, #16
 8026c58:	6839      	ldr	r1, [r7, #0]
 8026c5a:	4618      	mov	r0, r3
 8026c5c:	f7fd fd48 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8026c60:	68f8      	ldr	r0, [r7, #12]
 8026c62:	f107 0310 	add.w	r3, r7, #16
 8026c66:	462a      	mov	r2, r5
 8026c68:	4621      	mov	r1, r4
 8026c6a:	f001 fb32 	bl	80282d2 <_ZSt13__copy_move_aILb0EPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_EET1_T0_S8_S7_>
    }
 8026c6e:	68f8      	ldr	r0, [r7, #12]
 8026c70:	3720      	adds	r7, #32
 8026c72:	46bd      	mov	sp, r7
 8026c74:	bdb0      	pop	{r4, r5, r7, pc}

08026c76 <_ZSt19__iterator_categoryIPK14ServoDataFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
    __iterator_category(const _Iter&)
 8026c76:	b480      	push	{r7}
 8026c78:	b083      	sub	sp, #12
 8026c7a:	af00      	add	r7, sp, #0
 8026c7c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8026c7e:	bf00      	nop
 8026c80:	4618      	mov	r0, r3
 8026c82:	370c      	adds	r7, #12
 8026c84:	46bd      	mov	sp, r7
 8026c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c8a:	4770      	bx	lr

08026c8c <_ZNSt5dequeI14ServoDataFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag>:
      deque<_Tp, _Alloc>::
 8026c8c:	b590      	push	{r4, r7, lr}
 8026c8e:	b0a5      	sub	sp, #148	; 0x94
 8026c90:	af02      	add	r7, sp, #8
 8026c92:	60f8      	str	r0, [r7, #12]
 8026c94:	60b9      	str	r1, [r7, #8]
 8026c96:	607a      	str	r2, [r7, #4]
 8026c98:	603b      	str	r3, [r7, #0]
	const size_type __n = std::distance(__first, __last);
 8026c9a:	6839      	ldr	r1, [r7, #0]
 8026c9c:	6878      	ldr	r0, [r7, #4]
 8026c9e:	f7ff ffa3 	bl	8026be8 <_ZSt8distanceIPK14ServoDataFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8026ca2:	4603      	mov	r3, r0
 8026ca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 8026ca8:	68bb      	ldr	r3, [r7, #8]
 8026caa:	681a      	ldr	r2, [r3, #0]
 8026cac:	68fb      	ldr	r3, [r7, #12]
 8026cae:	689b      	ldr	r3, [r3, #8]
 8026cb0:	429a      	cmp	r2, r3
 8026cb2:	d126      	bne.n	8026d02 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0x76>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8026cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026cb8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8026cbc:	68f9      	ldr	r1, [r7, #12]
 8026cbe:	4618      	mov	r0, r3
 8026cc0:	f001 fb38 	bl	8028334 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE28_M_reserve_elements_at_frontEj>
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8026cc4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8026cc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8026ccc:	4611      	mov	r1, r2
 8026cce:	4618      	mov	r0, r3
 8026cd0:	f7fd fd0e 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
					    _M_get_Tp_allocator());
 8026cd4:	68fb      	ldr	r3, [r7, #12]
 8026cd6:	4618      	mov	r0, r3
 8026cd8:	f7fd fcff 	bl	80246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8026cdc:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8026cde:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8026ce2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8026ce6:	9200      	str	r2, [sp, #0]
 8026ce8:	683a      	ldr	r2, [r7, #0]
 8026cea:	6879      	ldr	r1, [r7, #4]
 8026cec:	f001 fb4c 	bl	8028388 <_ZSt22__uninitialized_copy_aIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 8026cf0:	68fb      	ldr	r3, [r7, #12]
 8026cf2:	f103 0408 	add.w	r4, r3, #8
 8026cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8026d00:	e03d      	b.n	8026d7e <_ZNSt5dequeI14ServoDataFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 8026d02:	68bb      	ldr	r3, [r7, #8]
 8026d04:	681a      	ldr	r2, [r3, #0]
 8026d06:	68fb      	ldr	r3, [r7, #12]
 8026d08:	699b      	ldr	r3, [r3, #24]
 8026d0a:	429a      	cmp	r2, r3
 8026d0c:	d127      	bne.n	8026d5e <_ZNSt5dequeI14ServoDataFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 8026d0e:	f107 0314 	add.w	r3, r7, #20
 8026d12:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8026d16:	68f9      	ldr	r1, [r7, #12]
 8026d18:	4618      	mov	r0, r3
 8026d1a:	f001 fb4d 	bl	80283b8 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 8026d1e:	68fb      	ldr	r3, [r7, #12]
 8026d20:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 8026d24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8026d28:	4611      	mov	r1, r2
 8026d2a:	4618      	mov	r0, r3
 8026d2c:	f7fd fce0 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
					    _M_get_Tp_allocator());
 8026d30:	68fb      	ldr	r3, [r7, #12]
 8026d32:	4618      	mov	r0, r3
 8026d34:	f7fd fcd1 	bl	80246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8026d38:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 8026d3a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8026d3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8026d42:	9200      	str	r2, [sp, #0]
 8026d44:	683a      	ldr	r2, [r7, #0]
 8026d46:	6879      	ldr	r1, [r7, #4]
 8026d48:	f001 fb1e 	bl	8028388 <_ZSt22__uninitialized_copy_aIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 8026d4c:	68fb      	ldr	r3, [r7, #12]
 8026d4e:	f103 0418 	add.w	r4, r3, #24
 8026d52:	f107 0314 	add.w	r3, r7, #20
 8026d56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8026d5c:	e00f      	b.n	8026d7e <_ZNSt5dequeI14ServoDataFrameSaIS0_EE19_M_range_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 8026d5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8026d62:	68b9      	ldr	r1, [r7, #8]
 8026d64:	4618      	mov	r0, r3
 8026d66:	f7fd fcc3 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8026d6a:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8026d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026d72:	9300      	str	r3, [sp, #0]
 8026d74:	683b      	ldr	r3, [r7, #0]
 8026d76:	687a      	ldr	r2, [r7, #4]
 8026d78:	68f8      	ldr	r0, [r7, #12]
 8026d7a:	f001 fb47 	bl	802840c <_ZNSt5dequeI14ServoDataFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j>
      }
 8026d7e:	bf00      	nop
 8026d80:	378c      	adds	r7, #140	; 0x8c
 8026d82:	46bd      	mov	sp, r7
 8026d84:	bd90      	pop	{r4, r7, pc}

08026d86 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8026d86:	b590      	push	{r4, r7, lr}
 8026d88:	b08b      	sub	sp, #44	; 0x2c
 8026d8a:	af00      	add	r7, sp, #0
 8026d8c:	6078      	str	r0, [r7, #4]
 8026d8e:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8026d90:	f107 0308 	add.w	r3, r7, #8
 8026d94:	6839      	ldr	r1, [r7, #0]
 8026d96:	4618      	mov	r0, r3
 8026d98:	f7fd fcaa 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8026d9c:	f107 0318 	add.w	r3, r7, #24
 8026da0:	6879      	ldr	r1, [r7, #4]
 8026da2:	4618      	mov	r0, r3
 8026da4:	f7fd fc8a 	bl	80246bc <_ZNSt5dequeI14ServoDataFrameSaIS0_EE3endEv>
 8026da8:	687b      	ldr	r3, [r7, #4]
 8026daa:	4618      	mov	r0, r3
 8026dac:	f7fd fc95 	bl	80246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8026db0:	4603      	mov	r3, r0
 8026db2:	f107 0218 	add.w	r2, r7, #24
 8026db6:	f107 0108 	add.w	r1, r7, #8
 8026dba:	6878      	ldr	r0, [r7, #4]
 8026dbc:	f7fd fcb4 	bl	8024728 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8026dc0:	6878      	ldr	r0, [r7, #4]
 8026dc2:	683b      	ldr	r3, [r7, #0]
 8026dc4:	68db      	ldr	r3, [r3, #12]
 8026dc6:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8026dc8:	687b      	ldr	r3, [r7, #4]
 8026dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8026dcc:	3304      	adds	r3, #4
 8026dce:	461a      	mov	r2, r3
 8026dd0:	f7fe fc42 	bl	8025658 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8026dd4:	687b      	ldr	r3, [r7, #4]
 8026dd6:	683a      	ldr	r2, [r7, #0]
 8026dd8:	f103 0418 	add.w	r4, r3, #24
 8026ddc:	4613      	mov	r3, r2
 8026dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8026de4:	bf00      	nop
 8026de6:	372c      	adds	r7, #44	; 0x2c
 8026de8:	46bd      	mov	sp, r7
 8026dea:	bd90      	pop	{r4, r7, pc}

08026dec <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8026dec:	b480      	push	{r7}
 8026dee:	b083      	sub	sp, #12
 8026df0:	af00      	add	r7, sp, #0
 8026df2:	6078      	str	r0, [r7, #4]
 8026df4:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8026df6:	687b      	ldr	r3, [r7, #4]
 8026df8:	681a      	ldr	r2, [r3, #0]
 8026dfa:	683b      	ldr	r3, [r7, #0]
 8026dfc:	681b      	ldr	r3, [r3, #0]
 8026dfe:	429a      	cmp	r2, r3
 8026e00:	bf0c      	ite	eq
 8026e02:	2301      	moveq	r3, #1
 8026e04:	2300      	movne	r3, #0
 8026e06:	b2db      	uxtb	r3, r3
 8026e08:	4618      	mov	r0, r3
 8026e0a:	370c      	adds	r7, #12
 8026e0c:	46bd      	mov	sp, r7
 8026e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e12:	4770      	bx	lr

08026e14 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8026e14:	b580      	push	{r7, lr}
 8026e16:	b086      	sub	sp, #24
 8026e18:	af00      	add	r7, sp, #0
 8026e1a:	6078      	str	r0, [r7, #4]
 8026e1c:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 8026e1e:	f107 0308 	add.w	r3, r7, #8
 8026e22:	683a      	ldr	r2, [r7, #0]
 8026e24:	6879      	ldr	r1, [r7, #4]
 8026e26:	4618      	mov	r0, r3
 8026e28:	f001 fde3 	bl	80289f2 <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8026e2c:	f107 0308 	add.w	r3, r7, #8
 8026e30:	4618      	mov	r0, r3
 8026e32:	f001 fdf1 	bl	8028a18 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 8026e36:	4603      	mov	r3, r0
 8026e38:	4618      	mov	r0, r3
 8026e3a:	3718      	adds	r7, #24
 8026e3c:	46bd      	mov	sp, r7
 8026e3e:	bd80      	pop	{r7, pc}

08026e40 <_ZSteqRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8026e40:	b480      	push	{r7}
 8026e42:	b083      	sub	sp, #12
 8026e44:	af00      	add	r7, sp, #0
 8026e46:	6078      	str	r0, [r7, #4]
 8026e48:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8026e4a:	687b      	ldr	r3, [r7, #4]
 8026e4c:	681a      	ldr	r2, [r3, #0]
 8026e4e:	683b      	ldr	r3, [r7, #0]
 8026e50:	681b      	ldr	r3, [r3, #0]
 8026e52:	429a      	cmp	r2, r3
 8026e54:	bf0c      	ite	eq
 8026e56:	2301      	moveq	r3, #1
 8026e58:	2300      	movne	r3, #0
 8026e5a:	b2db      	uxtb	r3, r3
 8026e5c:	4618      	mov	r0, r3
 8026e5e:	370c      	adds	r7, #12
 8026e60:	46bd      	mov	sp, r7
 8026e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e66:	4770      	bx	lr

08026e68 <_ZNKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8026e68:	b580      	push	{r7, lr}
 8026e6a:	b086      	sub	sp, #24
 8026e6c:	af00      	add	r7, sp, #0
 8026e6e:	6078      	str	r0, [r7, #4]
 8026e70:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 8026e72:	f107 0308 	add.w	r3, r7, #8
 8026e76:	683a      	ldr	r2, [r7, #0]
 8026e78:	6879      	ldr	r1, [r7, #4]
 8026e7a:	4618      	mov	r0, r3
 8026e7c:	f001 fdd8 	bl	8028a30 <_ZStplRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_Ei>
 8026e80:	f107 0308 	add.w	r3, r7, #8
 8026e84:	4618      	mov	r0, r3
 8026e86:	f001 fde6 	bl	8028a56 <_ZNKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EdeEv>
 8026e8a:	4603      	mov	r3, r0
 8026e8c:	4618      	mov	r0, r3
 8026e8e:	3718      	adds	r7, #24
 8026e90:	46bd      	mov	sp, r7
 8026e92:	bd80      	pop	{r7, pc}

08026e94 <_ZSt4swapINSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8026e94:	b5b0      	push	{r4, r5, r7, lr}
 8026e96:	b08c      	sub	sp, #48	; 0x30
 8026e98:	af00      	add	r7, sp, #0
 8026e9a:	6078      	str	r0, [r7, #4]
 8026e9c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8026e9e:	6878      	ldr	r0, [r7, #4]
 8026ea0:	f001 fde5 	bl	8028a6e <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8026ea4:	4602      	mov	r2, r0
 8026ea6:	f107 0308 	add.w	r3, r7, #8
 8026eaa:	4611      	mov	r1, r2
 8026eac:	4618      	mov	r0, r3
 8026eae:	f001 fe0d 	bl	8028acc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8026eb2:	6838      	ldr	r0, [r7, #0]
 8026eb4:	f001 fddb 	bl	8028a6e <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8026eb8:	4602      	mov	r2, r0
 8026eba:	687b      	ldr	r3, [r7, #4]
 8026ebc:	461c      	mov	r4, r3
 8026ebe:	4615      	mov	r5, r2
 8026ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026ec8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026ecc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8026ed0:	f107 0308 	add.w	r3, r7, #8
 8026ed4:	4618      	mov	r0, r3
 8026ed6:	f001 fdca 	bl	8028a6e <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8026eda:	4602      	mov	r2, r0
 8026edc:	683b      	ldr	r3, [r7, #0]
 8026ede:	461c      	mov	r4, r3
 8026ee0:	4615      	mov	r5, r2
 8026ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026eea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026eee:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8026ef2:	bf00      	nop
 8026ef4:	3730      	adds	r7, #48	; 0x30
 8026ef6:	46bd      	mov	sp, r7
 8026ef8:	bdb0      	pop	{r4, r5, r7, pc}

08026efa <_ZSt18__do_alloc_on_moveISaI8IMUFrameEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8026efa:	b580      	push	{r7, lr}
 8026efc:	b084      	sub	sp, #16
 8026efe:	af00      	add	r7, sp, #0
 8026f00:	60f8      	str	r0, [r7, #12]
 8026f02:	60b9      	str	r1, [r7, #8]
 8026f04:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8026f06:	68b8      	ldr	r0, [r7, #8]
 8026f08:	f001 fdff 	bl	8028b0a <_ZSt4moveIRSaI8IMUFrameEEONSt16remove_referenceIT_E4typeEOS4_>
 8026f0c:	bf00      	nop
 8026f0e:	3710      	adds	r7, #16
 8026f10:	46bd      	mov	sp, r7
 8026f12:	bd80      	pop	{r7, pc}

08026f14 <_ZSt4swapINSt11_Deque_baseI14ServoDataFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8026f14:	b5b0      	push	{r4, r5, r7, lr}
 8026f16:	b08c      	sub	sp, #48	; 0x30
 8026f18:	af00      	add	r7, sp, #0
 8026f1a:	6078      	str	r0, [r7, #4]
 8026f1c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8026f1e:	6878      	ldr	r0, [r7, #4]
 8026f20:	f001 fdfe 	bl	8028b20 <_ZSt4moveIRNSt11_Deque_baseI14ServoDataFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8026f24:	4602      	mov	r2, r0
 8026f26:	f107 0308 	add.w	r3, r7, #8
 8026f2a:	4611      	mov	r1, r2
 8026f2c:	4618      	mov	r0, r3
 8026f2e:	f001 fe26 	bl	8028b7e <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8026f32:	6838      	ldr	r0, [r7, #0]
 8026f34:	f001 fdf4 	bl	8028b20 <_ZSt4moveIRNSt11_Deque_baseI14ServoDataFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8026f38:	4602      	mov	r2, r0
 8026f3a:	687b      	ldr	r3, [r7, #4]
 8026f3c:	461c      	mov	r4, r3
 8026f3e:	4615      	mov	r5, r2
 8026f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026f48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026f4c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8026f50:	f107 0308 	add.w	r3, r7, #8
 8026f54:	4618      	mov	r0, r3
 8026f56:	f001 fde3 	bl	8028b20 <_ZSt4moveIRNSt11_Deque_baseI14ServoDataFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8026f5a:	4602      	mov	r2, r0
 8026f5c:	683b      	ldr	r3, [r7, #0]
 8026f5e:	461c      	mov	r4, r3
 8026f60:	4615      	mov	r5, r2
 8026f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026f6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026f6e:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8026f72:	bf00      	nop
 8026f74:	3730      	adds	r7, #48	; 0x30
 8026f76:	46bd      	mov	sp, r7
 8026f78:	bdb0      	pop	{r4, r5, r7, pc}

08026f7a <_ZSt18__do_alloc_on_moveISaI14ServoDataFrameEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8026f7a:	b580      	push	{r7, lr}
 8026f7c:	b084      	sub	sp, #16
 8026f7e:	af00      	add	r7, sp, #0
 8026f80:	60f8      	str	r0, [r7, #12]
 8026f82:	60b9      	str	r1, [r7, #8]
 8026f84:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8026f86:	68b8      	ldr	r0, [r7, #8]
 8026f88:	f001 fe18 	bl	8028bbc <_ZSt4moveIRSaI14ServoDataFrameEEONSt16remove_referenceIT_E4typeEOS4_>
 8026f8c:	bf00      	nop
 8026f8e:	3710      	adds	r7, #16
 8026f90:	46bd      	mov	sp, r7
 8026f92:	bd80      	pop	{r7, pc}

08026f94 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8026f94:	b5b0      	push	{r4, r5, r7, lr}
 8026f96:	b08c      	sub	sp, #48	; 0x30
 8026f98:	af00      	add	r7, sp, #0
 8026f9a:	6078      	str	r0, [r7, #4]
 8026f9c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8026f9e:	6878      	ldr	r0, [r7, #4]
 8026fa0:	f001 fe17 	bl	8028bd2 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8026fa4:	4602      	mov	r2, r0
 8026fa6:	f107 0308 	add.w	r3, r7, #8
 8026faa:	4611      	mov	r1, r2
 8026fac:	4618      	mov	r0, r3
 8026fae:	f001 fe3f 	bl	8028c30 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>
      __a = _GLIBCXX_MOVE(__b);
 8026fb2:	6838      	ldr	r0, [r7, #0]
 8026fb4:	f001 fe0d 	bl	8028bd2 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8026fb8:	4602      	mov	r2, r0
 8026fba:	687b      	ldr	r3, [r7, #4]
 8026fbc:	461c      	mov	r4, r3
 8026fbe:	4615      	mov	r5, r2
 8026fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fc8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026fcc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8026fd0:	f107 0308 	add.w	r3, r7, #8
 8026fd4:	4618      	mov	r0, r3
 8026fd6:	f001 fdfc 	bl	8028bd2 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8026fda:	4602      	mov	r2, r0
 8026fdc:	683b      	ldr	r3, [r7, #0]
 8026fde:	461c      	mov	r4, r3
 8026fe0:	4615      	mov	r5, r2
 8026fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8026fee:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8026ff2:	bf00      	nop
 8026ff4:	3730      	adds	r7, #48	; 0x30
 8026ff6:	46bd      	mov	sp, r7
 8026ff8:	bdb0      	pop	{r4, r5, r7, pc}

08026ffa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>:
      _M_erase_at_end(iterator __pos)
 8026ffa:	b590      	push	{r4, r7, lr}
 8026ffc:	b08b      	sub	sp, #44	; 0x2c
 8026ffe:	af00      	add	r7, sp, #0
 8027000:	6078      	str	r0, [r7, #4]
 8027002:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8027004:	f107 0308 	add.w	r3, r7, #8
 8027008:	6839      	ldr	r1, [r7, #0]
 802700a:	4618      	mov	r0, r3
 802700c:	f7fd fc6f 	bl	80248ee <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027010:	f107 0318 	add.w	r3, r7, #24
 8027014:	6879      	ldr	r1, [r7, #4]
 8027016:	4618      	mov	r0, r3
 8027018:	f7fd fc5a 	bl	80248d0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 802701c:	687b      	ldr	r3, [r7, #4]
 802701e:	4618      	mov	r0, r3
 8027020:	f7fd f9fa 	bl	8024418 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8027024:	4603      	mov	r3, r0
 8027026:	f107 0218 	add.w	r2, r7, #24
 802702a:	f107 0108 	add.w	r1, r7, #8
 802702e:	6878      	ldr	r0, [r7, #4]
 8027030:	f7fd fc79 	bl	8024926 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
	_M_destroy_nodes(__pos._M_node + 1,
 8027034:	6878      	ldr	r0, [r7, #4]
 8027036:	683b      	ldr	r3, [r7, #0]
 8027038:	68db      	ldr	r3, [r3, #12]
 802703a:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 802703c:	687b      	ldr	r3, [r7, #4]
 802703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8027040:	3304      	adds	r3, #4
 8027042:	461a      	mov	r2, r3
 8027044:	f7fd fbff 	bl	8024846 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	this->_M_impl._M_finish = __pos;
 8027048:	687b      	ldr	r3, [r7, #4]
 802704a:	683a      	ldr	r2, [r7, #0]
 802704c:	f103 0418 	add.w	r4, r3, #24
 8027050:	4613      	mov	r3, r2
 8027052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8027058:	bf00      	nop
 802705a:	372c      	adds	r7, #44	; 0x2c
 802705c:	46bd      	mov	sp, r7
 802705e:	bd90      	pop	{r4, r7, pc}

08027060 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8027060:	b580      	push	{r7, lr}
 8027062:	b084      	sub	sp, #16
 8027064:	af00      	add	r7, sp, #0
 8027066:	60f8      	str	r0, [r7, #12]
 8027068:	60b9      	str	r1, [r7, #8]
 802706a:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 802706c:	68b8      	ldr	r0, [r7, #8]
 802706e:	f001 fdfe 	bl	8028c6e <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>
 8027072:	bf00      	nop
 8027074:	3710      	adds	r7, #16
 8027076:	46bd      	mov	sp, r7
 8027078:	bd80      	pop	{r7, pc}

0802707a <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 802707a:	b5b0      	push	{r4, r5, r7, lr}
 802707c:	b08c      	sub	sp, #48	; 0x30
 802707e:	af00      	add	r7, sp, #0
 8027080:	6078      	str	r0, [r7, #4]
 8027082:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8027084:	6878      	ldr	r0, [r7, #4]
 8027086:	f001 fdfd 	bl	8028c84 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 802708a:	4602      	mov	r2, r0
 802708c:	f107 0308 	add.w	r3, r7, #8
 8027090:	4611      	mov	r1, r2
 8027092:	4618      	mov	r0, r3
 8027094:	f001 fe25 	bl	8028ce2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 8027098:	6838      	ldr	r0, [r7, #0]
 802709a:	f001 fdf3 	bl	8028c84 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 802709e:	4602      	mov	r2, r0
 80270a0:	687b      	ldr	r3, [r7, #4]
 80270a2:	461c      	mov	r4, r3
 80270a4:	4615      	mov	r5, r2
 80270a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80270a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80270aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80270ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80270ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80270b2:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80270b6:	f107 0308 	add.w	r3, r7, #8
 80270ba:	4618      	mov	r0, r3
 80270bc:	f001 fde2 	bl	8028c84 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 80270c0:	4602      	mov	r2, r0
 80270c2:	683b      	ldr	r3, [r7, #0]
 80270c4:	461c      	mov	r4, r3
 80270c6:	4615      	mov	r5, r2
 80270c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80270ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80270cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80270ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80270d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80270d4:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80270d8:	bf00      	nop
 80270da:	3730      	adds	r7, #48	; 0x30
 80270dc:	46bd      	mov	sp, r7
 80270de:	bdb0      	pop	{r4, r5, r7, pc}

080270e0 <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>:
      _M_erase_at_end(iterator __pos)
 80270e0:	b590      	push	{r4, r7, lr}
 80270e2:	b08b      	sub	sp, #44	; 0x2c
 80270e4:	af00      	add	r7, sp, #0
 80270e6:	6078      	str	r0, [r7, #4]
 80270e8:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 80270ea:	f107 0308 	add.w	r3, r7, #8
 80270ee:	6839      	ldr	r1, [r7, #0]
 80270f0:	4618      	mov	r0, r3
 80270f2:	f7fd fc8d 	bl	8024a10 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80270f6:	f107 0318 	add.w	r3, r7, #24
 80270fa:	6879      	ldr	r1, [r7, #4]
 80270fc:	4618      	mov	r0, r3
 80270fe:	f7fd fc6d 	bl	80249dc <_ZNSt5dequeIjSaIjEE3endEv>
 8027102:	687b      	ldr	r3, [r7, #4]
 8027104:	4618      	mov	r0, r3
 8027106:	f7fd fc78 	bl	80249fa <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 802710a:	4603      	mov	r3, r0
 802710c:	f107 0218 	add.w	r2, r7, #24
 8027110:	f107 0108 	add.w	r1, r7, #8
 8027114:	6878      	ldr	r0, [r7, #4]
 8027116:	f7fd fc97 	bl	8024a48 <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 802711a:	6878      	ldr	r0, [r7, #4]
 802711c:	683b      	ldr	r3, [r7, #0]
 802711e:	68db      	ldr	r3, [r3, #12]
 8027120:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8027122:	687b      	ldr	r3, [r7, #4]
 8027124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8027126:	3304      	adds	r3, #4
 8027128:	461a      	mov	r2, r3
 802712a:	f7fe fbf1 	bl	8025910 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	this->_M_impl._M_finish = __pos;
 802712e:	687b      	ldr	r3, [r7, #4]
 8027130:	683a      	ldr	r2, [r7, #0]
 8027132:	f103 0418 	add.w	r4, r3, #24
 8027136:	4613      	mov	r3, r2
 8027138:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802713a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 802713e:	bf00      	nop
 8027140:	372c      	adds	r7, #44	; 0x2c
 8027142:	46bd      	mov	sp, r7
 8027144:	bd90      	pop	{r4, r7, pc}

08027146 <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8027146:	b580      	push	{r7, lr}
 8027148:	b084      	sub	sp, #16
 802714a:	af00      	add	r7, sp, #0
 802714c:	60f8      	str	r0, [r7, #12]
 802714e:	60b9      	str	r1, [r7, #8]
 8027150:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8027152:	68b8      	ldr	r0, [r7, #8]
 8027154:	f001 fde4 	bl	8028d20 <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>
 8027158:	bf00      	nop
 802715a:	3710      	adds	r7, #16
 802715c:	46bd      	mov	sp, r7
 802715e:	bd80      	pop	{r7, pc}

08027160 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8027160:	b480      	push	{r7}
 8027162:	b083      	sub	sp, #12
 8027164:	af00      	add	r7, sp, #0
 8027166:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8027168:	687b      	ldr	r3, [r7, #4]
 802716a:	4618      	mov	r0, r3
 802716c:	370c      	adds	r7, #12
 802716e:	46bd      	mov	sp, r7
 8027170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027174:	4770      	bx	lr

08027176 <_ZNSt16allocator_traitsISaIjEE9constructIjJjEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8027176:	b580      	push	{r7, lr}
 8027178:	b084      	sub	sp, #16
 802717a:	af00      	add	r7, sp, #0
 802717c:	60f8      	str	r0, [r7, #12]
 802717e:	60b9      	str	r1, [r7, #8]
 8027180:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8027182:	6878      	ldr	r0, [r7, #4]
 8027184:	f7ff ffec 	bl	8027160 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8027188:	4603      	mov	r3, r0
 802718a:	461a      	mov	r2, r3
 802718c:	68b9      	ldr	r1, [r7, #8]
 802718e:	68f8      	ldr	r0, [r7, #12]
 8027190:	f001 fdd1 	bl	8028d36 <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJjEEEvPT_DpOT0_>
	}
 8027194:	bf00      	nop
 8027196:	3710      	adds	r7, #16
 8027198:	46bd      	mov	sp, r7
 802719a:	bd80      	pop	{r7, pc}

0802719c <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJjEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 802719c:	b5b0      	push	{r4, r5, r7, lr}
 802719e:	b082      	sub	sp, #8
 80271a0:	af00      	add	r7, sp, #0
 80271a2:	6078      	str	r0, [r7, #4]
 80271a4:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80271a6:	6878      	ldr	r0, [r7, #4]
 80271a8:	f7fe ff9e 	bl	80260e8 <_ZNKSt5dequeIjSaIjEE4sizeEv>
 80271ac:	4604      	mov	r4, r0
 80271ae:	6878      	ldr	r0, [r7, #4]
 80271b0:	f7fe ffac 	bl	802610c <_ZNKSt5dequeIjSaIjEE8max_sizeEv>
 80271b4:	4603      	mov	r3, r0
 80271b6:	429c      	cmp	r4, r3
 80271b8:	bf0c      	ite	eq
 80271ba:	2301      	moveq	r3, #1
 80271bc:	2300      	movne	r3, #0
 80271be:	b2db      	uxtb	r3, r3
 80271c0:	2b00      	cmp	r3, #0
 80271c2:	d002      	beq.n	80271ca <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJjEEEvDpOT_+0x2e>
	  __throw_length_error(
 80271c4:	4816      	ldr	r0, [pc, #88]	; (8027220 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJjEEEvDpOT_+0x84>)
 80271c6:	f018 ffe9 	bl	804019c <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 80271ca:	2101      	movs	r1, #1
 80271cc:	6878      	ldr	r0, [r7, #4]
 80271ce:	f7fe ffae 	bl	802612e <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80271d2:	687a      	ldr	r2, [r7, #4]
 80271d4:	687b      	ldr	r3, [r7, #4]
 80271d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80271d8:	1d1c      	adds	r4, r3, #4
 80271da:	4610      	mov	r0, r2
 80271dc:	f7fe ffc2 	bl	8026164 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 80271e0:	4603      	mov	r3, r0
 80271e2:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 80271e4:	687c      	ldr	r4, [r7, #4]
 80271e6:	687b      	ldr	r3, [r7, #4]
 80271e8:	699d      	ldr	r5, [r3, #24]
 80271ea:	6838      	ldr	r0, [r7, #0]
 80271ec:	f7ff ffb8 	bl	8027160 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80271f0:	4603      	mov	r3, r0
 80271f2:	461a      	mov	r2, r3
 80271f4:	4629      	mov	r1, r5
 80271f6:	4620      	mov	r0, r4
 80271f8:	f7ff ffbd 	bl	8027176 <_ZNSt16allocator_traitsISaIjEE9constructIjJjEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80271fc:	687b      	ldr	r3, [r7, #4]
 80271fe:	f103 0218 	add.w	r2, r3, #24
 8027202:	687b      	ldr	r3, [r7, #4]
 8027204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027206:	3304      	adds	r3, #4
 8027208:	4619      	mov	r1, r3
 802720a:	4610      	mov	r0, r2
 802720c:	f7fe ffbc 	bl	8026188 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8027210:	687b      	ldr	r3, [r7, #4]
 8027212:	69da      	ldr	r2, [r3, #28]
 8027214:	687b      	ldr	r3, [r7, #4]
 8027216:	619a      	str	r2, [r3, #24]
      }
 8027218:	bf00      	nop
 802721a:	3708      	adds	r7, #8
 802721c:	46bd      	mov	sp, r7
 802721e:	bdb0      	pop	{r4, r5, r7, pc}
 8027220:	08041e08 	.word	0x08041e08

08027224 <_ZSt7forwardIRK8IMUFrameEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8027224:	b480      	push	{r7}
 8027226:	b083      	sub	sp, #12
 8027228:	af00      	add	r7, sp, #0
 802722a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 802722c:	687b      	ldr	r3, [r7, #4]
 802722e:	4618      	mov	r0, r3
 8027230:	370c      	adds	r7, #12
 8027232:	46bd      	mov	sp, r7
 8027234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027238:	4770      	bx	lr

0802723a <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 802723a:	b5b0      	push	{r4, r5, r7, lr}
 802723c:	b084      	sub	sp, #16
 802723e:	af00      	add	r7, sp, #0
 8027240:	60f8      	str	r0, [r7, #12]
 8027242:	60b9      	str	r1, [r7, #8]
 8027244:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8027246:	6878      	ldr	r0, [r7, #4]
 8027248:	f7ff ffec 	bl	8027224 <_ZSt7forwardIRK8IMUFrameEOT_RNSt16remove_referenceIS3_E4typeE>
 802724c:	4605      	mov	r5, r0
 802724e:	68bb      	ldr	r3, [r7, #8]
 8027250:	4619      	mov	r1, r3
 8027252:	2018      	movs	r0, #24
 8027254:	f7f9 fdce 	bl	8020df4 <_ZnwjPv>
 8027258:	4603      	mov	r3, r0
 802725a:	461c      	mov	r4, r3
 802725c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802725e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027260:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027264:	e884 0003 	stmia.w	r4, {r0, r1}
 8027268:	bf00      	nop
 802726a:	3710      	adds	r7, #16
 802726c:	46bd      	mov	sp, r7
 802726e:	bdb0      	pop	{r4, r5, r7, pc}

08027270 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8027270:	b580      	push	{r7, lr}
 8027272:	b082      	sub	sp, #8
 8027274:	af00      	add	r7, sp, #0
 8027276:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8027278:	687b      	ldr	r3, [r7, #4]
 802727a:	4618      	mov	r0, r3
 802727c:	f000 fb02 	bl	8027884 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8027280:	4603      	mov	r3, r0
 8027282:	4618      	mov	r0, r3
 8027284:	f001 fd6d 	bl	8028d62 <_ZNSt5dequeI8IMUFrameSaIS0_EE11_S_max_sizeERKS1_>
 8027288:	4603      	mov	r3, r0
 802728a:	4618      	mov	r0, r3
 802728c:	3708      	adds	r7, #8
 802728e:	46bd      	mov	sp, r7
 8027290:	bd80      	pop	{r7, pc}

08027292 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8027292:	b580      	push	{r7, lr}
 8027294:	b082      	sub	sp, #8
 8027296:	af00      	add	r7, sp, #0
 8027298:	6078      	str	r0, [r7, #4]
 802729a:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 802729c:	687b      	ldr	r3, [r7, #4]
 802729e:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 80272a0:	687b      	ldr	r3, [r7, #4]
 80272a2:	681b      	ldr	r3, [r3, #0]
 80272a4:	1ad3      	subs	r3, r2, r3
 80272a6:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80272a8:	461a      	mov	r2, r3
 80272aa:	683b      	ldr	r3, [r7, #0]
 80272ac:	4293      	cmp	r3, r2
 80272ae:	d904      	bls.n	80272ba <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 80272b0:	2201      	movs	r2, #1
 80272b2:	6839      	ldr	r1, [r7, #0]
 80272b4:	6878      	ldr	r0, [r7, #4]
 80272b6:	f001 fd6e 	bl	8028d96 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>
      }
 80272ba:	bf00      	nop
 80272bc:	3708      	adds	r7, #8
 80272be:	46bd      	mov	sp, r7
 80272c0:	bd80      	pop	{r7, pc}

080272c2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80272c2:	b590      	push	{r4, r7, lr}
 80272c4:	b083      	sub	sp, #12
 80272c6:	af00      	add	r7, sp, #0
 80272c8:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80272ca:	687c      	ldr	r4, [r7, #4]
 80272cc:	2018      	movs	r0, #24
 80272ce:	f7f9 fd9d 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 80272d2:	4603      	mov	r3, r0
 80272d4:	4619      	mov	r1, r3
 80272d6:	4620      	mov	r0, r4
 80272d8:	f001 fdf7 	bl	8028eca <_ZNSt16allocator_traitsISaI8IMUFrameEE8allocateERS1_j>
 80272dc:	4603      	mov	r3, r0
      }
 80272de:	4618      	mov	r0, r3
 80272e0:	370c      	adds	r7, #12
 80272e2:	46bd      	mov	sp, r7
 80272e4:	bd90      	pop	{r4, r7, pc}

080272e6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80272e6:	b580      	push	{r7, lr}
 80272e8:	b082      	sub	sp, #8
 80272ea:	af00      	add	r7, sp, #0
 80272ec:	6078      	str	r0, [r7, #4]
	++_M_cur;
 80272ee:	687b      	ldr	r3, [r7, #4]
 80272f0:	681b      	ldr	r3, [r3, #0]
 80272f2:	f103 0218 	add.w	r2, r3, #24
 80272f6:	687b      	ldr	r3, [r7, #4]
 80272f8:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 80272fa:	687b      	ldr	r3, [r7, #4]
 80272fc:	681a      	ldr	r2, [r3, #0]
 80272fe:	687b      	ldr	r3, [r7, #4]
 8027300:	689b      	ldr	r3, [r3, #8]
 8027302:	429a      	cmp	r2, r3
 8027304:	d10a      	bne.n	802731c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv+0x36>
	    _M_set_node(_M_node + 1);
 8027306:	687b      	ldr	r3, [r7, #4]
 8027308:	68db      	ldr	r3, [r3, #12]
 802730a:	3304      	adds	r3, #4
 802730c:	4619      	mov	r1, r3
 802730e:	6878      	ldr	r0, [r7, #4]
 8027310:	f7ff f935 	bl	802657e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_first;
 8027314:	687b      	ldr	r3, [r7, #4]
 8027316:	685a      	ldr	r2, [r3, #4]
 8027318:	687b      	ldr	r3, [r7, #4]
 802731a:	601a      	str	r2, [r3, #0]
	return *this;
 802731c:	687b      	ldr	r3, [r7, #4]
      }
 802731e:	4618      	mov	r0, r3
 8027320:	3708      	adds	r7, #8
 8027322:	46bd      	mov	sp, r7
 8027324:	bd80      	pop	{r7, pc}

08027326 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8027326:	b580      	push	{r7, lr}
 8027328:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 802732a:	2018      	movs	r0, #24
 802732c:	f7f9 fd6e 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 8027330:	4603      	mov	r3, r0
 8027332:	4618      	mov	r0, r3
 8027334:	bd80      	pop	{r7, pc}

08027336 <_ZNSt16allocator_traitsISaI8IMUFrameEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8027336:	b580      	push	{r7, lr}
 8027338:	b082      	sub	sp, #8
 802733a:	af00      	add	r7, sp, #0
 802733c:	6078      	str	r0, [r7, #4]
 802733e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8027340:	6839      	ldr	r1, [r7, #0]
 8027342:	6878      	ldr	r0, [r7, #4]
 8027344:	f001 fdd0 	bl	8028ee8 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE7destroyIS1_EEvPT_>
	}
 8027348:	bf00      	nop
 802734a:	3708      	adds	r7, #8
 802734c:	46bd      	mov	sp, r7
 802734e:	bd80      	pop	{r7, pc}

08027350 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 8027350:	b580      	push	{r7, lr}
 8027352:	b082      	sub	sp, #8
 8027354:	af00      	add	r7, sp, #0
 8027356:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8027358:	687a      	ldr	r2, [r7, #4]
 802735a:	687b      	ldr	r3, [r7, #4]
 802735c:	69db      	ldr	r3, [r3, #28]
 802735e:	4619      	mov	r1, r3
 8027360:	4610      	mov	r0, r2
 8027362:	f7ff f928 	bl	80265b6 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8027366:	687b      	ldr	r3, [r7, #4]
 8027368:	f103 0218 	add.w	r2, r3, #24
 802736c:	687b      	ldr	r3, [r7, #4]
 802736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027370:	3b04      	subs	r3, #4
 8027372:	4619      	mov	r1, r3
 8027374:	4610      	mov	r0, r2
 8027376:	f7ff f902 	bl	802657e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 802737a:	687b      	ldr	r3, [r7, #4]
 802737c:	6a1b      	ldr	r3, [r3, #32]
 802737e:	f1a3 0218 	sub.w	r2, r3, #24
 8027382:	687b      	ldr	r3, [r7, #4]
 8027384:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8027386:	687b      	ldr	r3, [r7, #4]
 8027388:	4618      	mov	r0, r3
 802738a:	f7fd f954 	bl	8024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 802738e:	4602      	mov	r2, r0
 8027390:	687b      	ldr	r3, [r7, #4]
 8027392:	699b      	ldr	r3, [r3, #24]
 8027394:	4619      	mov	r1, r3
 8027396:	4610      	mov	r0, r2
 8027398:	f7ff ffcd 	bl	8027336 <_ZNSt16allocator_traitsISaI8IMUFrameEE7destroyIS0_EEvRS1_PT_>
    }
 802739c:	bf00      	nop
 802739e:	3708      	adds	r7, #8
 80273a0:	46bd      	mov	sp, r7
 80273a2:	bd80      	pop	{r7, pc}

080273a4 <_ZSt7forwardIRK14ServoDataFrameEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80273a4:	b480      	push	{r7}
 80273a6:	b083      	sub	sp, #12
 80273a8:	af00      	add	r7, sp, #0
 80273aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80273ac:	687b      	ldr	r3, [r7, #4]
 80273ae:	4618      	mov	r0, r3
 80273b0:	370c      	adds	r7, #12
 80273b2:	46bd      	mov	sp, r7
 80273b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273b8:	4770      	bx	lr

080273ba <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80273ba:	b590      	push	{r4, r7, lr}
 80273bc:	b085      	sub	sp, #20
 80273be:	af00      	add	r7, sp, #0
 80273c0:	60f8      	str	r0, [r7, #12]
 80273c2:	60b9      	str	r1, [r7, #8]
 80273c4:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80273c6:	6878      	ldr	r0, [r7, #4]
 80273c8:	f7ff ffec 	bl	80273a4 <_ZSt7forwardIRK14ServoDataFrameEOT_RNSt16remove_referenceIS3_E4typeE>
 80273cc:	4604      	mov	r4, r0
 80273ce:	68bb      	ldr	r3, [r7, #8]
 80273d0:	4619      	mov	r1, r3
 80273d2:	f44f 7086 	mov.w	r0, #268	; 0x10c
 80273d6:	f7f9 fd0d 	bl	8020df4 <_ZnwjPv>
 80273da:	4603      	mov	r3, r0
 80273dc:	4618      	mov	r0, r3
 80273de:	4621      	mov	r1, r4
 80273e0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80273e4:	461a      	mov	r2, r3
 80273e6:	f018 ff59 	bl	804029c <memcpy>
 80273ea:	bf00      	nop
 80273ec:	3714      	adds	r7, #20
 80273ee:	46bd      	mov	sp, r7
 80273f0:	bd90      	pop	{r4, r7, pc}

080273f2 <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80273f2:	b580      	push	{r7, lr}
 80273f4:	b082      	sub	sp, #8
 80273f6:	af00      	add	r7, sp, #0
 80273f8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80273fa:	687b      	ldr	r3, [r7, #4]
 80273fc:	4618      	mov	r0, r3
 80273fe:	f000 fab4 	bl	802796a <_ZNKSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8027402:	4603      	mov	r3, r0
 8027404:	4618      	mov	r0, r3
 8027406:	f001 fd7a 	bl	8028efe <_ZNSt5dequeI14ServoDataFrameSaIS0_EE11_S_max_sizeERKS1_>
 802740a:	4603      	mov	r3, r0
 802740c:	4618      	mov	r0, r3
 802740e:	3708      	adds	r7, #8
 8027410:	46bd      	mov	sp, r7
 8027412:	bd80      	pop	{r7, pc}

08027414 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8027414:	b580      	push	{r7, lr}
 8027416:	b082      	sub	sp, #8
 8027418:	af00      	add	r7, sp, #0
 802741a:	6078      	str	r0, [r7, #4]
 802741c:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 802741e:	687b      	ldr	r3, [r7, #4]
 8027420:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 8027422:	687b      	ldr	r3, [r7, #4]
 8027424:	681b      	ldr	r3, [r3, #0]
 8027426:	1ad3      	subs	r3, r2, r3
 8027428:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 802742a:	461a      	mov	r2, r3
 802742c:	683b      	ldr	r3, [r7, #0]
 802742e:	4293      	cmp	r3, r2
 8027430:	d904      	bls.n	802743c <_ZNSt5dequeI14ServoDataFrameSaIS0_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 8027432:	2201      	movs	r2, #1
 8027434:	6839      	ldr	r1, [r7, #0]
 8027436:	6878      	ldr	r0, [r7, #4]
 8027438:	f001 fd7b 	bl	8028f32 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_reallocate_mapEjb>
      }
 802743c:	bf00      	nop
 802743e:	3708      	adds	r7, #8
 8027440:	46bd      	mov	sp, r7
 8027442:	bd80      	pop	{r7, pc}

08027444 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8027444:	b590      	push	{r4, r7, lr}
 8027446:	b083      	sub	sp, #12
 8027448:	af00      	add	r7, sp, #0
 802744a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 802744c:	687c      	ldr	r4, [r7, #4]
 802744e:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8027452:	f7f9 fcdb 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 8027456:	4603      	mov	r3, r0
 8027458:	4619      	mov	r1, r3
 802745a:	4620      	mov	r0, r4
 802745c:	f001 fe03 	bl	8029066 <_ZNSt16allocator_traitsISaI14ServoDataFrameEE8allocateERS1_j>
 8027460:	4603      	mov	r3, r0
      }
 8027462:	4618      	mov	r0, r3
 8027464:	370c      	adds	r7, #12
 8027466:	46bd      	mov	sp, r7
 8027468:	bd90      	pop	{r4, r7, pc}

0802746a <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 802746a:	b580      	push	{r7, lr}
 802746c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 802746e:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8027472:	f7f9 fccb 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 8027476:	4603      	mov	r3, r0
 8027478:	4618      	mov	r0, r3
 802747a:	bd80      	pop	{r7, pc}

0802747c <_ZNSt16allocator_traitsISaI14ServoDataFrameEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 802747c:	b580      	push	{r7, lr}
 802747e:	b082      	sub	sp, #8
 8027480:	af00      	add	r7, sp, #0
 8027482:	6078      	str	r0, [r7, #4]
 8027484:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8027486:	6839      	ldr	r1, [r7, #0]
 8027488:	6878      	ldr	r0, [r7, #4]
 802748a:	f001 fdfb 	bl	8029084 <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameE7destroyIS1_EEvPT_>
	}
 802748e:	bf00      	nop
 8027490:	3708      	adds	r7, #8
 8027492:	46bd      	mov	sp, r7
 8027494:	bd80      	pop	{r7, pc}

08027496 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 8027496:	b580      	push	{r7, lr}
 8027498:	b082      	sub	sp, #8
 802749a:	af00      	add	r7, sp, #0
 802749c:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 802749e:	687a      	ldr	r2, [r7, #4]
 80274a0:	687b      	ldr	r3, [r7, #4]
 80274a2:	69db      	ldr	r3, [r3, #28]
 80274a4:	4619      	mov	r1, r3
 80274a6:	4610      	mov	r0, r2
 80274a8:	f7ff f947 	bl	802673a <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 80274ac:	687b      	ldr	r3, [r7, #4]
 80274ae:	f103 0218 	add.w	r2, r3, #24
 80274b2:	687b      	ldr	r3, [r7, #4]
 80274b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80274b6:	3b04      	subs	r3, #4
 80274b8:	4619      	mov	r1, r3
 80274ba:	4610      	mov	r0, r2
 80274bc:	f7ff f921 	bl	8026702 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 80274c0:	687b      	ldr	r3, [r7, #4]
 80274c2:	6a1b      	ldr	r3, [r3, #32]
 80274c4:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80274c8:	687b      	ldr	r3, [r7, #4]
 80274ca:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80274cc:	687b      	ldr	r3, [r7, #4]
 80274ce:	4618      	mov	r0, r3
 80274d0:	f7fd f903 	bl	80246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80274d4:	4602      	mov	r2, r0
 80274d6:	687b      	ldr	r3, [r7, #4]
 80274d8:	699b      	ldr	r3, [r3, #24]
 80274da:	4619      	mov	r1, r3
 80274dc:	4610      	mov	r0, r2
 80274de:	f7ff ffcd 	bl	802747c <_ZNSt16allocator_traitsISaI14ServoDataFrameEE7destroyIS0_EEvRS1_PT_>
    }
 80274e2:	bf00      	nop
 80274e4:	3708      	adds	r7, #8
 80274e6:	46bd      	mov	sp, r7
 80274e8:	bd80      	pop	{r7, pc}

080274ea <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80274ea:	b580      	push	{r7, lr}
 80274ec:	b082      	sub	sp, #8
 80274ee:	af00      	add	r7, sp, #0
 80274f0:	6078      	str	r0, [r7, #4]
 80274f2:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80274f4:	f000 f8eb 	bl	80276ce <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 80274f8:	4603      	mov	r3, r0
 80274fa:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80274fc:	687b      	ldr	r3, [r7, #4]
 80274fe:	68da      	ldr	r2, [r3, #12]
 8027500:	683b      	ldr	r3, [r7, #0]
 8027502:	68db      	ldr	r3, [r3, #12]
 8027504:	1ad3      	subs	r3, r2, r3
 8027506:	109b      	asrs	r3, r3, #2
 8027508:	3b01      	subs	r3, #1
 802750a:	fb01 f303 	mul.w	r3, r1, r3
 802750e:	687a      	ldr	r2, [r7, #4]
 8027510:	6811      	ldr	r1, [r2, #0]
 8027512:	687a      	ldr	r2, [r7, #4]
 8027514:	6852      	ldr	r2, [r2, #4]
 8027516:	1a8a      	subs	r2, r1, r2
 8027518:	1092      	asrs	r2, r2, #2
 802751a:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 802751c:	683a      	ldr	r2, [r7, #0]
 802751e:	6891      	ldr	r1, [r2, #8]
 8027520:	683a      	ldr	r2, [r7, #0]
 8027522:	6812      	ldr	r2, [r2, #0]
 8027524:	1a8a      	subs	r2, r1, r2
 8027526:	1092      	asrs	r2, r2, #2
 8027528:	4413      	add	r3, r2
      }
 802752a:	4618      	mov	r0, r3
 802752c:	3708      	adds	r7, #8
 802752e:	46bd      	mov	sp, r7
 8027530:	bd80      	pop	{r7, pc}

08027532 <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8027532:	b580      	push	{r7, lr}
 8027534:	b084      	sub	sp, #16
 8027536:	af00      	add	r7, sp, #0
 8027538:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 802753a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802753e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8027540:	6878      	ldr	r0, [r7, #4]
 8027542:	f001 fdaa 	bl	802909a <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>
 8027546:	4603      	mov	r3, r0
 8027548:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 802754a:	f107 0208 	add.w	r2, r7, #8
 802754e:	f107 030c 	add.w	r3, r7, #12
 8027552:	4611      	mov	r1, r2
 8027554:	4618      	mov	r0, r3
 8027556:	f000 f8dd 	bl	8027714 <_ZSt3minIjERKT_S2_S2_>
 802755a:	4603      	mov	r3, r0
 802755c:	681b      	ldr	r3, [r3, #0]
      }
 802755e:	4618      	mov	r0, r3
 8027560:	3710      	adds	r7, #16
 8027562:	46bd      	mov	sp, r7
 8027564:	bd80      	pop	{r7, pc}

08027566 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8027566:	b480      	push	{r7}
 8027568:	b083      	sub	sp, #12
 802756a:	af00      	add	r7, sp, #0
 802756c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802756e:	687b      	ldr	r3, [r7, #4]
 8027570:	4618      	mov	r0, r3
 8027572:	370c      	adds	r7, #12
 8027574:	46bd      	mov	sp, r7
 8027576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802757a:	4770      	bx	lr

0802757c <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 802757c:	b590      	push	{r4, r7, lr}
 802757e:	b08b      	sub	sp, #44	; 0x2c
 8027580:	af00      	add	r7, sp, #0
 8027582:	60f8      	str	r0, [r7, #12]
 8027584:	60b9      	str	r1, [r7, #8]
 8027586:	4613      	mov	r3, r2
 8027588:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 802758a:	68fb      	ldr	r3, [r7, #12]
 802758c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802758e:	68fb      	ldr	r3, [r7, #12]
 8027590:	695b      	ldr	r3, [r3, #20]
 8027592:	1ad3      	subs	r3, r2, r3
 8027594:	109b      	asrs	r3, r3, #2
 8027596:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8027598:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 802759a:	68bb      	ldr	r3, [r7, #8]
 802759c:	6a3a      	ldr	r2, [r7, #32]
 802759e:	4413      	add	r3, r2
 80275a0:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80275a2:	68fb      	ldr	r3, [r7, #12]
 80275a4:	685a      	ldr	r2, [r3, #4]
 80275a6:	69fb      	ldr	r3, [r7, #28]
 80275a8:	005b      	lsls	r3, r3, #1
 80275aa:	429a      	cmp	r2, r3
 80275ac:	d92d      	bls.n	802760a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80275ae:	68fb      	ldr	r3, [r7, #12]
 80275b0:	681a      	ldr	r2, [r3, #0]
 80275b2:	68fb      	ldr	r3, [r7, #12]
 80275b4:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80275b6:	69fb      	ldr	r3, [r7, #28]
 80275b8:	1acb      	subs	r3, r1, r3
 80275ba:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80275bc:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80275be:	79fb      	ldrb	r3, [r7, #7]
 80275c0:	2b00      	cmp	r3, #0
 80275c2:	d002      	beq.n	80275ca <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x4e>
 80275c4:	68bb      	ldr	r3, [r7, #8]
 80275c6:	009b      	lsls	r3, r3, #2
 80275c8:	e000      	b.n	80275cc <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x50>
 80275ca:	2300      	movs	r3, #0
 80275cc:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80275ce:	4413      	add	r3, r2
 80275d0:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80275d2:	68fb      	ldr	r3, [r7, #12]
 80275d4:	695b      	ldr	r3, [r3, #20]
 80275d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80275d8:	429a      	cmp	r2, r3
 80275da:	d209      	bcs.n	80275f0 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80275dc:	68fb      	ldr	r3, [r7, #12]
 80275de:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80275e0:	68fb      	ldr	r3, [r7, #12]
 80275e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80275e4:	3304      	adds	r3, #4
 80275e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80275e8:	4619      	mov	r1, r3
 80275ea:	f001 fd62 	bl	80290b2 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
 80275ee:	e048      	b.n	8027682 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80275f0:	68fb      	ldr	r3, [r7, #12]
 80275f2:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80275f4:	68fb      	ldr	r3, [r7, #12]
 80275f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80275f8:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80275fa:	6a3b      	ldr	r3, [r7, #32]
 80275fc:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80275fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027600:	4413      	add	r3, r2
 8027602:	461a      	mov	r2, r3
 8027604:	f001 fd6d 	bl	80290e2 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>
 8027608:	e03b      	b.n	8027682 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 802760a:	68fb      	ldr	r3, [r7, #12]
 802760c:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 802760e:	68fb      	ldr	r3, [r7, #12]
 8027610:	3304      	adds	r3, #4
 8027612:	f107 0208 	add.w	r2, r7, #8
 8027616:	4611      	mov	r1, r2
 8027618:	4618      	mov	r0, r3
 802761a:	f7fe f883 	bl	8025724 <_ZSt3maxIjERKT_S2_S2_>
 802761e:	4603      	mov	r3, r0
 8027620:	681b      	ldr	r3, [r3, #0]
 8027622:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8027624:	3302      	adds	r3, #2
 8027626:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8027628:	68fb      	ldr	r3, [r7, #12]
 802762a:	69b9      	ldr	r1, [r7, #24]
 802762c:	4618      	mov	r0, r3
 802762e:	f7ff f95e 	bl	80268ee <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8027632:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8027634:	69ba      	ldr	r2, [r7, #24]
 8027636:	69fb      	ldr	r3, [r7, #28]
 8027638:	1ad3      	subs	r3, r2, r3
 802763a:	085b      	lsrs	r3, r3, #1
 802763c:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802763e:	79fb      	ldrb	r3, [r7, #7]
 8027640:	2b00      	cmp	r3, #0
 8027642:	d002      	beq.n	802764a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xce>
 8027644:	68bb      	ldr	r3, [r7, #8]
 8027646:	009b      	lsls	r3, r3, #2
 8027648:	e000      	b.n	802764c <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xd0>
 802764a:	2300      	movs	r3, #0
 802764c:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 802764e:	697a      	ldr	r2, [r7, #20]
 8027650:	4413      	add	r3, r2
 8027652:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8027654:	68fb      	ldr	r3, [r7, #12]
 8027656:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8027658:	68fb      	ldr	r3, [r7, #12]
 802765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 802765c:	3304      	adds	r3, #4
 802765e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027660:	4619      	mov	r1, r3
 8027662:	f001 fd26 	bl	80290b2 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8027666:	68f8      	ldr	r0, [r7, #12]
 8027668:	68fb      	ldr	r3, [r7, #12]
 802766a:	6819      	ldr	r1, [r3, #0]
 802766c:	68fb      	ldr	r3, [r7, #12]
 802766e:	685b      	ldr	r3, [r3, #4]
 8027670:	461a      	mov	r2, r3
 8027672:	f7fe f967 	bl	8025944 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
	  this->_M_impl._M_map = __new_map;
 8027676:	68fb      	ldr	r3, [r7, #12]
 8027678:	697a      	ldr	r2, [r7, #20]
 802767a:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 802767c:	68fb      	ldr	r3, [r7, #12]
 802767e:	69ba      	ldr	r2, [r7, #24]
 8027680:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8027682:	68fb      	ldr	r3, [r7, #12]
 8027684:	3308      	adds	r3, #8
 8027686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8027688:	4618      	mov	r0, r3
 802768a:	f7fe fd7d 	bl	8026188 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 802768e:	68fb      	ldr	r3, [r7, #12]
 8027690:	f103 0018 	add.w	r0, r3, #24
 8027694:	6a3a      	ldr	r2, [r7, #32]
 8027696:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 802769a:	4413      	add	r3, r2
 802769c:	009b      	lsls	r3, r3, #2
 802769e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80276a0:	4413      	add	r3, r2
 80276a2:	4619      	mov	r1, r3
 80276a4:	f7fe fd70 	bl	8026188 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
    }
 80276a8:	bf00      	nop
 80276aa:	372c      	adds	r7, #44	; 0x2c
 80276ac:	46bd      	mov	sp, r7
 80276ae:	bd90      	pop	{r4, r7, pc}

080276b0 <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80276b0:	b580      	push	{r7, lr}
 80276b2:	b082      	sub	sp, #8
 80276b4:	af00      	add	r7, sp, #0
 80276b6:	6078      	str	r0, [r7, #4]
 80276b8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80276ba:	2200      	movs	r2, #0
 80276bc:	6839      	ldr	r1, [r7, #0]
 80276be:	6878      	ldr	r0, [r7, #4]
 80276c0:	f001 fd27 	bl	8029112 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>
 80276c4:	4603      	mov	r3, r0
 80276c6:	4618      	mov	r0, r3
 80276c8:	3708      	adds	r7, #8
 80276ca:	46bd      	mov	sp, r7
 80276cc:	bd80      	pop	{r7, pc}

080276ce <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80276ce:	b580      	push	{r7, lr}
 80276d0:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80276d2:	2004      	movs	r0, #4
 80276d4:	f7f9 fb9a 	bl	8020e0c <_ZSt16__deque_buf_sizej>
 80276d8:	4603      	mov	r3, r0
 80276da:	4618      	mov	r0, r3
 80276dc:	bd80      	pop	{r7, pc}

080276de <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80276de:	b580      	push	{r7, lr}
 80276e0:	b084      	sub	sp, #16
 80276e2:	af00      	add	r7, sp, #0
 80276e4:	60f8      	str	r0, [r7, #12]
 80276e6:	60b9      	str	r1, [r7, #8]
 80276e8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80276ea:	687a      	ldr	r2, [r7, #4]
 80276ec:	68b9      	ldr	r1, [r7, #8]
 80276ee:	68f8      	ldr	r0, [r7, #12]
 80276f0:	f001 fd2d 	bl	802914e <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>
 80276f4:	bf00      	nop
 80276f6:	3710      	adds	r7, #16
 80276f8:	46bd      	mov	sp, r7
 80276fa:	bd80      	pop	{r7, pc}

080276fc <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80276fc:	b580      	push	{r7, lr}
 80276fe:	b082      	sub	sp, #8
 8027700:	af00      	add	r7, sp, #0
 8027702:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8027704:	6878      	ldr	r0, [r7, #4]
 8027706:	f001 fd32 	bl	802916e <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>
 802770a:	4603      	mov	r3, r0
      }
 802770c:	4618      	mov	r0, r3
 802770e:	3708      	adds	r7, #8
 8027710:	46bd      	mov	sp, r7
 8027712:	bd80      	pop	{r7, pc}

08027714 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8027714:	b480      	push	{r7}
 8027716:	b083      	sub	sp, #12
 8027718:	af00      	add	r7, sp, #0
 802771a:	6078      	str	r0, [r7, #4]
 802771c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 802771e:	683b      	ldr	r3, [r7, #0]
 8027720:	681a      	ldr	r2, [r3, #0]
 8027722:	687b      	ldr	r3, [r7, #4]
 8027724:	681b      	ldr	r3, [r3, #0]
 8027726:	429a      	cmp	r2, r3
 8027728:	d201      	bcs.n	802772e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 802772a:	683b      	ldr	r3, [r7, #0]
 802772c:	e000      	b.n	8027730 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 802772e:	687b      	ldr	r3, [r7, #4]
    }
 8027730:	4618      	mov	r0, r3
 8027732:	370c      	adds	r7, #12
 8027734:	46bd      	mov	sp, r7
 8027736:	f85d 7b04 	ldr.w	r7, [sp], #4
 802773a:	4770      	bx	lr

0802773c <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 802773c:	b590      	push	{r4, r7, lr}
 802773e:	b085      	sub	sp, #20
 8027740:	af00      	add	r7, sp, #0
 8027742:	60f8      	str	r0, [r7, #12]
 8027744:	60b9      	str	r1, [r7, #8]
 8027746:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8027748:	68f8      	ldr	r0, [r7, #12]
 802774a:	f001 fd1c 	bl	8029186 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802774e:	4604      	mov	r4, r0
 8027750:	68b8      	ldr	r0, [r7, #8]
 8027752:	f001 fd18 	bl	8029186 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027756:	4603      	mov	r3, r0
 8027758:	687a      	ldr	r2, [r7, #4]
 802775a:	4619      	mov	r1, r3
 802775c:	4620      	mov	r0, r4
 802775e:	f001 fd1d 	bl	802919c <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8027762:	4603      	mov	r3, r0
    }
 8027764:	4618      	mov	r0, r3
 8027766:	3714      	adds	r7, #20
 8027768:	46bd      	mov	sp, r7
 802776a:	bd90      	pop	{r4, r7, pc}

0802776c <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 802776c:	b590      	push	{r4, r7, lr}
 802776e:	b085      	sub	sp, #20
 8027770:	af00      	add	r7, sp, #0
 8027772:	60f8      	str	r0, [r7, #12]
 8027774:	60b9      	str	r1, [r7, #8]
 8027776:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8027778:	68f8      	ldr	r0, [r7, #12]
 802777a:	f001 fd04 	bl	8029186 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802777e:	4604      	mov	r4, r0
 8027780:	68b8      	ldr	r0, [r7, #8]
 8027782:	f001 fd00 	bl	8029186 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8027786:	4603      	mov	r3, r0
 8027788:	687a      	ldr	r2, [r7, #4]
 802778a:	4619      	mov	r1, r3
 802778c:	4620      	mov	r0, r4
 802778e:	f001 fd28 	bl	80291e2 <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8027792:	4603      	mov	r3, r0
    }
 8027794:	4618      	mov	r0, r3
 8027796:	3714      	adds	r7, #20
 8027798:	46bd      	mov	sp, r7
 802779a:	bd90      	pop	{r4, r7, pc}

0802779c <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802779c:	b580      	push	{r7, lr}
 802779e:	b084      	sub	sp, #16
 80277a0:	af00      	add	r7, sp, #0
 80277a2:	60f8      	str	r0, [r7, #12]
 80277a4:	60b9      	str	r1, [r7, #8]
 80277a6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80277a8:	68f8      	ldr	r0, [r7, #12]
 80277aa:	f001 fd3d 	bl	8029228 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 80277ae:	4602      	mov	r2, r0
 80277b0:	68bb      	ldr	r3, [r7, #8]
 80277b2:	4293      	cmp	r3, r2
 80277b4:	bf8c      	ite	hi
 80277b6:	2301      	movhi	r3, #1
 80277b8:	2300      	movls	r3, #0
 80277ba:	b2db      	uxtb	r3, r3
 80277bc:	2b00      	cmp	r3, #0
 80277be:	d001      	beq.n	80277c4 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80277c0:	f018 fce9 	bl	8040196 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80277c4:	68ba      	ldr	r2, [r7, #8]
 80277c6:	4613      	mov	r3, r2
 80277c8:	009b      	lsls	r3, r3, #2
 80277ca:	4413      	add	r3, r2
 80277cc:	009b      	lsls	r3, r3, #2
 80277ce:	4618      	mov	r0, r3
 80277d0:	f018 fcd0 	bl	8040174 <_Znwj>
 80277d4:	4603      	mov	r3, r0
      }
 80277d6:	4618      	mov	r0, r3
 80277d8:	3710      	adds	r7, #16
 80277da:	46bd      	mov	sp, r7
 80277dc:	bd80      	pop	{r7, pc}

080277de <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80277de:	b580      	push	{r7, lr}
 80277e0:	b084      	sub	sp, #16
 80277e2:	af00      	add	r7, sp, #0
 80277e4:	60f8      	str	r0, [r7, #12]
 80277e6:	60b9      	str	r1, [r7, #8]
 80277e8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80277ea:	687a      	ldr	r2, [r7, #4]
 80277ec:	4613      	mov	r3, r2
 80277ee:	009b      	lsls	r3, r3, #2
 80277f0:	4413      	add	r3, r2
 80277f2:	009b      	lsls	r3, r3, #2
 80277f4:	4619      	mov	r1, r3
 80277f6:	68b8      	ldr	r0, [r7, #8]
 80277f8:	f018 fcba 	bl	8040170 <_ZdlPvj>
      }
 80277fc:	bf00      	nop
 80277fe:	3710      	adds	r7, #16
 8027800:	46bd      	mov	sp, r7
 8027802:	bd80      	pop	{r7, pc}

08027804 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8027804:	b480      	push	{r7}
 8027806:	b083      	sub	sp, #12
 8027808:	af00      	add	r7, sp, #0
 802780a:	6078      	str	r0, [r7, #4]
 802780c:	687b      	ldr	r3, [r7, #4]
 802780e:	4618      	mov	r0, r3
 8027810:	370c      	adds	r7, #12
 8027812:	46bd      	mov	sp, r7
 8027814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027818:	4770      	bx	lr

0802781a <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 802781a:	b480      	push	{r7}
 802781c:	b083      	sub	sp, #12
 802781e:	af00      	add	r7, sp, #0
 8027820:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8027822:	687b      	ldr	r3, [r7, #4]
 8027824:	2200      	movs	r2, #0
 8027826:	601a      	str	r2, [r3, #0]
 8027828:	687b      	ldr	r3, [r7, #4]
 802782a:	2200      	movs	r2, #0
 802782c:	605a      	str	r2, [r3, #4]
 802782e:	687b      	ldr	r3, [r7, #4]
 8027830:	2200      	movs	r2, #0
 8027832:	609a      	str	r2, [r3, #8]
 8027834:	687b      	ldr	r3, [r7, #4]
 8027836:	2200      	movs	r2, #0
 8027838:	60da      	str	r2, [r3, #12]
 802783a:	687b      	ldr	r3, [r7, #4]
 802783c:	4618      	mov	r0, r3
 802783e:	370c      	adds	r7, #12
 8027840:	46bd      	mov	sp, r7
 8027842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027846:	4770      	bx	lr

08027848 <_ZNSt16allocator_traitsISaIP8IMUFrameEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8027848:	b580      	push	{r7, lr}
 802784a:	b082      	sub	sp, #8
 802784c:	af00      	add	r7, sp, #0
 802784e:	6078      	str	r0, [r7, #4]
 8027850:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8027852:	2200      	movs	r2, #0
 8027854:	6839      	ldr	r1, [r7, #0]
 8027856:	6878      	ldr	r0, [r7, #4]
 8027858:	f001 fcf4 	bl	8029244 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv>
 802785c:	4603      	mov	r3, r0
 802785e:	4618      	mov	r0, r3
 8027860:	3708      	adds	r7, #8
 8027862:	46bd      	mov	sp, r7
 8027864:	bd80      	pop	{r7, pc}

08027866 <_ZNSt16allocator_traitsISaI8IMUFrameEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8027866:	b580      	push	{r7, lr}
 8027868:	b084      	sub	sp, #16
 802786a:	af00      	add	r7, sp, #0
 802786c:	60f8      	str	r0, [r7, #12]
 802786e:	60b9      	str	r1, [r7, #8]
 8027870:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8027872:	687a      	ldr	r2, [r7, #4]
 8027874:	68b9      	ldr	r1, [r7, #8]
 8027876:	68f8      	ldr	r0, [r7, #12]
 8027878:	f001 fd02 	bl	8029280 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE10deallocateEPS1_j>
 802787c:	bf00      	nop
 802787e:	3710      	adds	r7, #16
 8027880:	46bd      	mov	sp, r7
 8027882:	bd80      	pop	{r7, pc}

08027884 <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8027884:	b480      	push	{r7}
 8027886:	b083      	sub	sp, #12
 8027888:	af00      	add	r7, sp, #0
 802788a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802788c:	687b      	ldr	r3, [r7, #4]
 802788e:	4618      	mov	r0, r3
 8027890:	370c      	adds	r7, #12
 8027892:	46bd      	mov	sp, r7
 8027894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027898:	4770      	bx	lr

0802789a <_ZNSaIP8IMUFrameEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 802789a:	b580      	push	{r7, lr}
 802789c:	b082      	sub	sp, #8
 802789e:	af00      	add	r7, sp, #0
 80278a0:	6078      	str	r0, [r7, #4]
 80278a2:	6039      	str	r1, [r7, #0]
 80278a4:	6878      	ldr	r0, [r7, #4]
 80278a6:	f001 fcfe 	bl	80292a6 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameEC1Ev>
 80278aa:	687b      	ldr	r3, [r7, #4]
 80278ac:	4618      	mov	r0, r3
 80278ae:	3708      	adds	r7, #8
 80278b0:	46bd      	mov	sp, r7
 80278b2:	bd80      	pop	{r7, pc}

080278b4 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80278b4:	b480      	push	{r7}
 80278b6:	b083      	sub	sp, #12
 80278b8:	af00      	add	r7, sp, #0
 80278ba:	6078      	str	r0, [r7, #4]
 80278bc:	687b      	ldr	r3, [r7, #4]
 80278be:	4618      	mov	r0, r3
 80278c0:	370c      	adds	r7, #12
 80278c2:	46bd      	mov	sp, r7
 80278c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278c8:	4770      	bx	lr

080278ca <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80278ca:	b580      	push	{r7, lr}
 80278cc:	b084      	sub	sp, #16
 80278ce:	af00      	add	r7, sp, #0
 80278d0:	60f8      	str	r0, [r7, #12]
 80278d2:	60b9      	str	r1, [r7, #8]
 80278d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80278d6:	687b      	ldr	r3, [r7, #4]
 80278d8:	009b      	lsls	r3, r3, #2
 80278da:	4619      	mov	r1, r3
 80278dc:	68b8      	ldr	r0, [r7, #8]
 80278de:	f018 fc47 	bl	8040170 <_ZdlPvj>
      }
 80278e2:	bf00      	nop
 80278e4:	3710      	adds	r7, #16
 80278e6:	46bd      	mov	sp, r7
 80278e8:	bd80      	pop	{r7, pc}

080278ea <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80278ea:	b480      	push	{r7}
 80278ec:	b083      	sub	sp, #12
 80278ee:	af00      	add	r7, sp, #0
 80278f0:	6078      	str	r0, [r7, #4]
 80278f2:	687b      	ldr	r3, [r7, #4]
 80278f4:	4618      	mov	r0, r3
 80278f6:	370c      	adds	r7, #12
 80278f8:	46bd      	mov	sp, r7
 80278fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278fe:	4770      	bx	lr

08027900 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8027900:	b480      	push	{r7}
 8027902:	b083      	sub	sp, #12
 8027904:	af00      	add	r7, sp, #0
 8027906:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8027908:	687b      	ldr	r3, [r7, #4]
 802790a:	2200      	movs	r2, #0
 802790c:	601a      	str	r2, [r3, #0]
 802790e:	687b      	ldr	r3, [r7, #4]
 8027910:	2200      	movs	r2, #0
 8027912:	605a      	str	r2, [r3, #4]
 8027914:	687b      	ldr	r3, [r7, #4]
 8027916:	2200      	movs	r2, #0
 8027918:	609a      	str	r2, [r3, #8]
 802791a:	687b      	ldr	r3, [r7, #4]
 802791c:	2200      	movs	r2, #0
 802791e:	60da      	str	r2, [r3, #12]
 8027920:	687b      	ldr	r3, [r7, #4]
 8027922:	4618      	mov	r0, r3
 8027924:	370c      	adds	r7, #12
 8027926:	46bd      	mov	sp, r7
 8027928:	f85d 7b04 	ldr.w	r7, [sp], #4
 802792c:	4770      	bx	lr

0802792e <_ZNSt16allocator_traitsISaIP14ServoDataFrameEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 802792e:	b580      	push	{r7, lr}
 8027930:	b082      	sub	sp, #8
 8027932:	af00      	add	r7, sp, #0
 8027934:	6078      	str	r0, [r7, #4]
 8027936:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8027938:	2200      	movs	r2, #0
 802793a:	6839      	ldr	r1, [r7, #0]
 802793c:	6878      	ldr	r0, [r7, #4]
 802793e:	f001 fcbd 	bl	80292bc <_ZN9__gnu_cxx13new_allocatorIP14ServoDataFrameE8allocateEjPKv>
 8027942:	4603      	mov	r3, r0
 8027944:	4618      	mov	r0, r3
 8027946:	3708      	adds	r7, #8
 8027948:	46bd      	mov	sp, r7
 802794a:	bd80      	pop	{r7, pc}

0802794c <_ZNSt16allocator_traitsISaI14ServoDataFrameEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802794c:	b580      	push	{r7, lr}
 802794e:	b084      	sub	sp, #16
 8027950:	af00      	add	r7, sp, #0
 8027952:	60f8      	str	r0, [r7, #12]
 8027954:	60b9      	str	r1, [r7, #8]
 8027956:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8027958:	687a      	ldr	r2, [r7, #4]
 802795a:	68b9      	ldr	r1, [r7, #8]
 802795c:	68f8      	ldr	r0, [r7, #12]
 802795e:	f001 fccb 	bl	80292f8 <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameE10deallocateEPS1_j>
 8027962:	bf00      	nop
 8027964:	3710      	adds	r7, #16
 8027966:	46bd      	mov	sp, r7
 8027968:	bd80      	pop	{r7, pc}

0802796a <_ZNKSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 802796a:	b480      	push	{r7}
 802796c:	b083      	sub	sp, #12
 802796e:	af00      	add	r7, sp, #0
 8027970:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8027972:	687b      	ldr	r3, [r7, #4]
 8027974:	4618      	mov	r0, r3
 8027976:	370c      	adds	r7, #12
 8027978:	46bd      	mov	sp, r7
 802797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802797e:	4770      	bx	lr

08027980 <_ZNSaIP14ServoDataFrameEC1IS_EERKSaIT_E>:
 8027980:	b580      	push	{r7, lr}
 8027982:	b082      	sub	sp, #8
 8027984:	af00      	add	r7, sp, #0
 8027986:	6078      	str	r0, [r7, #4]
 8027988:	6039      	str	r1, [r7, #0]
 802798a:	6878      	ldr	r0, [r7, #4]
 802798c:	f001 fcc7 	bl	802931e <_ZN9__gnu_cxx13new_allocatorIP14ServoDataFrameEC1Ev>
 8027990:	687b      	ldr	r3, [r7, #4]
 8027992:	4618      	mov	r0, r3
 8027994:	3708      	adds	r7, #8
 8027996:	46bd      	mov	sp, r7
 8027998:	bd80      	pop	{r7, pc}

0802799a <_ZN9__gnu_cxx13new_allocatorIP14ServoDataFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802799a:	b480      	push	{r7}
 802799c:	b083      	sub	sp, #12
 802799e:	af00      	add	r7, sp, #0
 80279a0:	6078      	str	r0, [r7, #4]
 80279a2:	687b      	ldr	r3, [r7, #4]
 80279a4:	4618      	mov	r0, r3
 80279a6:	370c      	adds	r7, #12
 80279a8:	46bd      	mov	sp, r7
 80279aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279ae:	4770      	bx	lr

080279b0 <_ZN9__gnu_cxx13new_allocatorIP14ServoDataFrameE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80279b0:	b580      	push	{r7, lr}
 80279b2:	b084      	sub	sp, #16
 80279b4:	af00      	add	r7, sp, #0
 80279b6:	60f8      	str	r0, [r7, #12]
 80279b8:	60b9      	str	r1, [r7, #8]
 80279ba:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80279bc:	687b      	ldr	r3, [r7, #4]
 80279be:	009b      	lsls	r3, r3, #2
 80279c0:	4619      	mov	r1, r3
 80279c2:	68b8      	ldr	r0, [r7, #8]
 80279c4:	f018 fbd4 	bl	8040170 <_ZdlPvj>
      }
 80279c8:	bf00      	nop
 80279ca:	3710      	adds	r7, #16
 80279cc:	46bd      	mov	sp, r7
 80279ce:	bd80      	pop	{r7, pc}

080279d0 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80279d0:	b580      	push	{r7, lr}
 80279d2:	b084      	sub	sp, #16
 80279d4:	af00      	add	r7, sp, #0
 80279d6:	60f8      	str	r0, [r7, #12]
 80279d8:	60b9      	str	r1, [r7, #8]
 80279da:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80279dc:	68f8      	ldr	r0, [r7, #12]
 80279de:	f001 fca9 	bl	8029334 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 80279e2:	4602      	mov	r2, r0
 80279e4:	68bb      	ldr	r3, [r7, #8]
 80279e6:	4293      	cmp	r3, r2
 80279e8:	bf8c      	ite	hi
 80279ea:	2301      	movhi	r3, #1
 80279ec:	2300      	movls	r3, #0
 80279ee:	b2db      	uxtb	r3, r3
 80279f0:	2b00      	cmp	r3, #0
 80279f2:	d001      	beq.n	80279f8 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80279f4:	f018 fbcf 	bl	8040196 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80279f8:	68bb      	ldr	r3, [r7, #8]
 80279fa:	009b      	lsls	r3, r3, #2
 80279fc:	4618      	mov	r0, r3
 80279fe:	f018 fbb9 	bl	8040174 <_Znwj>
 8027a02:	4603      	mov	r3, r0
      }
 8027a04:	4618      	mov	r0, r3
 8027a06:	3710      	adds	r7, #16
 8027a08:	46bd      	mov	sp, r7
 8027a0a:	bd80      	pop	{r7, pc}

08027a0c <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8027a0c:	b480      	push	{r7}
 8027a0e:	b083      	sub	sp, #12
 8027a10:	af00      	add	r7, sp, #0
 8027a12:	6078      	str	r0, [r7, #4]
 8027a14:	687b      	ldr	r3, [r7, #4]
 8027a16:	4618      	mov	r0, r3
 8027a18:	370c      	adds	r7, #12
 8027a1a:	46bd      	mov	sp, r7
 8027a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a20:	4770      	bx	lr

08027a22 <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>:
 8027a22:	b480      	push	{r7}
 8027a24:	b083      	sub	sp, #12
 8027a26:	af00      	add	r7, sp, #0
 8027a28:	6078      	str	r0, [r7, #4]
 8027a2a:	687b      	ldr	r3, [r7, #4]
 8027a2c:	4618      	mov	r0, r3
 8027a2e:	370c      	adds	r7, #12
 8027a30:	46bd      	mov	sp, r7
 8027a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a36:	4770      	bx	lr

08027a38 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8027a38:	b480      	push	{r7}
 8027a3a:	b083      	sub	sp, #12
 8027a3c:	af00      	add	r7, sp, #0
 8027a3e:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8027a40:	687b      	ldr	r3, [r7, #4]
 8027a42:	2200      	movs	r2, #0
 8027a44:	601a      	str	r2, [r3, #0]
 8027a46:	687b      	ldr	r3, [r7, #4]
 8027a48:	2200      	movs	r2, #0
 8027a4a:	605a      	str	r2, [r3, #4]
 8027a4c:	687b      	ldr	r3, [r7, #4]
 8027a4e:	2200      	movs	r2, #0
 8027a50:	609a      	str	r2, [r3, #8]
 8027a52:	687b      	ldr	r3, [r7, #4]
 8027a54:	2200      	movs	r2, #0
 8027a56:	60da      	str	r2, [r3, #12]
 8027a58:	687b      	ldr	r3, [r7, #4]
 8027a5a:	4618      	mov	r0, r3
 8027a5c:	370c      	adds	r7, #12
 8027a5e:	46bd      	mov	sp, r7
 8027a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a64:	4770      	bx	lr

08027a66 <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8027a66:	b580      	push	{r7, lr}
 8027a68:	b082      	sub	sp, #8
 8027a6a:	af00      	add	r7, sp, #0
 8027a6c:	6078      	str	r0, [r7, #4]
 8027a6e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8027a70:	2200      	movs	r2, #0
 8027a72:	6839      	ldr	r1, [r7, #0]
 8027a74:	6878      	ldr	r0, [r7, #4]
 8027a76:	f001 fc69 	bl	802934c <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>
 8027a7a:	4603      	mov	r3, r0
 8027a7c:	4618      	mov	r0, r3
 8027a7e:	3708      	adds	r7, #8
 8027a80:	46bd      	mov	sp, r7
 8027a82:	bd80      	pop	{r7, pc}

08027a84 <_ZNSaIPjEC1IjEERKSaIT_E>:
 8027a84:	b580      	push	{r7, lr}
 8027a86:	b082      	sub	sp, #8
 8027a88:	af00      	add	r7, sp, #0
 8027a8a:	6078      	str	r0, [r7, #4]
 8027a8c:	6039      	str	r1, [r7, #0]
 8027a8e:	6878      	ldr	r0, [r7, #4]
 8027a90:	f001 fc7a 	bl	8029388 <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>
 8027a94:	687b      	ldr	r3, [r7, #4]
 8027a96:	4618      	mov	r0, r3
 8027a98:	3708      	adds	r7, #8
 8027a9a:	46bd      	mov	sp, r7
 8027a9c:	bd80      	pop	{r7, pc}

08027a9e <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8027a9e:	b480      	push	{r7}
 8027aa0:	b083      	sub	sp, #12
 8027aa2:	af00      	add	r7, sp, #0
 8027aa4:	6078      	str	r0, [r7, #4]
 8027aa6:	687b      	ldr	r3, [r7, #4]
 8027aa8:	4618      	mov	r0, r3
 8027aaa:	370c      	adds	r7, #12
 8027aac:	46bd      	mov	sp, r7
 8027aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ab2:	4770      	bx	lr

08027ab4 <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8027ab4:	b580      	push	{r7, lr}
 8027ab6:	b084      	sub	sp, #16
 8027ab8:	af00      	add	r7, sp, #0
 8027aba:	60f8      	str	r0, [r7, #12]
 8027abc:	60b9      	str	r1, [r7, #8]
 8027abe:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8027ac0:	687b      	ldr	r3, [r7, #4]
 8027ac2:	009b      	lsls	r3, r3, #2
 8027ac4:	4619      	mov	r1, r3
 8027ac6:	68b8      	ldr	r0, [r7, #8]
 8027ac8:	f018 fb52 	bl	8040170 <_ZdlPvj>
      }
 8027acc:	bf00      	nop
 8027ace:	3710      	adds	r7, #16
 8027ad0:	46bd      	mov	sp, r7
 8027ad2:	bd80      	pop	{r7, pc}

08027ad4 <_ZSt10__distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8027ad4:	b480      	push	{r7}
 8027ad6:	b085      	sub	sp, #20
 8027ad8:	af00      	add	r7, sp, #0
 8027ada:	60f8      	str	r0, [r7, #12]
 8027adc:	60b9      	str	r1, [r7, #8]
 8027ade:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8027ae0:	68ba      	ldr	r2, [r7, #8]
 8027ae2:	68fb      	ldr	r3, [r7, #12]
 8027ae4:	1ad3      	subs	r3, r2, r3
 8027ae6:	10db      	asrs	r3, r3, #3
 8027ae8:	4a04      	ldr	r2, [pc, #16]	; (8027afc <_ZSt10__distanceIPK8IMUFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x28>)
 8027aea:	fb02 f303 	mul.w	r3, r2, r3
    }
 8027aee:	4618      	mov	r0, r3
 8027af0:	3714      	adds	r7, #20
 8027af2:	46bd      	mov	sp, r7
 8027af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027af8:	4770      	bx	lr
 8027afa:	bf00      	nop
 8027afc:	aaaaaaab 	.word	0xaaaaaaab

08027b00 <_ZSt9__advanceIPK8IMUFrameiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8027b00:	b480      	push	{r7}
 8027b02:	b085      	sub	sp, #20
 8027b04:	af00      	add	r7, sp, #0
 8027b06:	60f8      	str	r0, [r7, #12]
 8027b08:	60b9      	str	r1, [r7, #8]
 8027b0a:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8027b0c:	68fb      	ldr	r3, [r7, #12]
 8027b0e:	6819      	ldr	r1, [r3, #0]
 8027b10:	68ba      	ldr	r2, [r7, #8]
 8027b12:	4613      	mov	r3, r2
 8027b14:	005b      	lsls	r3, r3, #1
 8027b16:	4413      	add	r3, r2
 8027b18:	00db      	lsls	r3, r3, #3
 8027b1a:	18ca      	adds	r2, r1, r3
 8027b1c:	68fb      	ldr	r3, [r7, #12]
 8027b1e:	601a      	str	r2, [r3, #0]
    }
 8027b20:	bf00      	nop
 8027b22:	3714      	adds	r7, #20
 8027b24:	46bd      	mov	sp, r7
 8027b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b2a:	4770      	bx	lr

08027b2c <_ZSt12__miter_baseIPK8IMUFrameET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8027b2c:	b480      	push	{r7}
 8027b2e:	b083      	sub	sp, #12
 8027b30:	af00      	add	r7, sp, #0
 8027b32:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027b34:	687b      	ldr	r3, [r7, #4]
 8027b36:	4618      	mov	r0, r3
 8027b38:	370c      	adds	r7, #12
 8027b3a:	46bd      	mov	sp, r7
 8027b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b40:	4770      	bx	lr

08027b42 <_ZSt13__copy_move_aILb0EPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8027b42:	b5b0      	push	{r4, r5, r7, lr}
 8027b44:	b090      	sub	sp, #64	; 0x40
 8027b46:	af00      	add	r7, sp, #0
 8027b48:	60f8      	str	r0, [r7, #12]
 8027b4a:	60b9      	str	r1, [r7, #8]
 8027b4c:	607a      	str	r2, [r7, #4]
 8027b4e:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8027b50:	68b8      	ldr	r0, [r7, #8]
 8027b52:	f001 fc24 	bl	802939e <_ZSt12__niter_baseIPK8IMUFrameET_S3_>
 8027b56:	4604      	mov	r4, r0
 8027b58:	6878      	ldr	r0, [r7, #4]
 8027b5a:	f001 fc20 	bl	802939e <_ZSt12__niter_baseIPK8IMUFrameET_S3_>
 8027b5e:	4605      	mov	r5, r0
 8027b60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027b64:	6839      	ldr	r1, [r7, #0]
 8027b66:	4618      	mov	r0, r3
 8027b68:	f7fc fd70 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8027b6c:	f107 0320 	add.w	r3, r7, #32
 8027b70:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8027b74:	4611      	mov	r1, r2
 8027b76:	4618      	mov	r0, r3
 8027b78:	f001 fc1c 	bl	80293b4 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 8027b7c:	f107 0010 	add.w	r0, r7, #16
 8027b80:	f107 0320 	add.w	r3, r7, #32
 8027b84:	462a      	mov	r2, r5
 8027b86:	4621      	mov	r1, r4
 8027b88:	f001 fc36 	bl	80293f8 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8027b8c:	68fb      	ldr	r3, [r7, #12]
 8027b8e:	f107 0210 	add.w	r2, r7, #16
 8027b92:	6839      	ldr	r1, [r7, #0]
 8027b94:	4618      	mov	r0, r3
 8027b96:	f001 fc81 	bl	802949c <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>
    }
 8027b9a:	68f8      	ldr	r0, [r7, #12]
 8027b9c:	3740      	adds	r7, #64	; 0x40
 8027b9e:	46bd      	mov	sp, r7
 8027ba0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08027ba4 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8027ba4:	b580      	push	{r7, lr}
 8027ba6:	b086      	sub	sp, #24
 8027ba8:	af00      	add	r7, sp, #0
 8027baa:	60f8      	str	r0, [r7, #12]
 8027bac:	60b9      	str	r1, [r7, #8]
 8027bae:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8027bb0:	68bb      	ldr	r3, [r7, #8]
 8027bb2:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8027bb4:	68bb      	ldr	r3, [r7, #8]
 8027bb6:	68db      	ldr	r3, [r3, #12]
 8027bb8:	1ad3      	subs	r3, r2, r3
 8027bba:	10db      	asrs	r3, r3, #3
 8027bbc:	4a0d      	ldr	r2, [pc, #52]	; (8027bf4 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj+0x50>)
 8027bbe:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8027bc2:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8027bc4:	687a      	ldr	r2, [r7, #4]
 8027bc6:	697b      	ldr	r3, [r7, #20]
 8027bc8:	429a      	cmp	r2, r3
 8027bca:	d906      	bls.n	8027bda <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 8027bcc:	687a      	ldr	r2, [r7, #4]
 8027bce:	697b      	ldr	r3, [r7, #20]
 8027bd0:	1ad3      	subs	r3, r2, r3
 8027bd2:	4619      	mov	r1, r3
 8027bd4:	68b8      	ldr	r0, [r7, #8]
 8027bd6:	f001 fc6f 	bl	80294b8 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 8027bda:	68bb      	ldr	r3, [r7, #8]
 8027bdc:	f103 0108 	add.w	r1, r3, #8
 8027be0:	687a      	ldr	r2, [r7, #4]
 8027be2:	68fb      	ldr	r3, [r7, #12]
 8027be4:	4618      	mov	r0, r3
 8027be6:	f001 fcad 	bl	8029544 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
      }
 8027bea:	68f8      	ldr	r0, [r7, #12]
 8027bec:	3718      	adds	r7, #24
 8027bee:	46bd      	mov	sp, r7
 8027bf0:	bd80      	pop	{r7, pc}
 8027bf2:	bf00      	nop
 8027bf4:	aaaaaaab 	.word	0xaaaaaaab

08027bf8 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8027bf8:	b580      	push	{r7, lr}
 8027bfa:	b088      	sub	sp, #32
 8027bfc:	af00      	add	r7, sp, #0
 8027bfe:	60f8      	str	r0, [r7, #12]
 8027c00:	60b9      	str	r1, [r7, #8]
 8027c02:	607a      	str	r2, [r7, #4]
 8027c04:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8027c06:	f107 0310 	add.w	r3, r7, #16
 8027c0a:	6839      	ldr	r1, [r7, #0]
 8027c0c:	4618      	mov	r0, r3
 8027c0e:	f7fc fd1d 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8027c12:	68f8      	ldr	r0, [r7, #12]
 8027c14:	f107 0310 	add.w	r3, r7, #16
 8027c18:	687a      	ldr	r2, [r7, #4]
 8027c1a:	68b9      	ldr	r1, [r7, #8]
 8027c1c:	f001 fca5 	bl	802956a <_ZSt18uninitialized_copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
 8027c20:	68f8      	ldr	r0, [r7, #12]
 8027c22:	3720      	adds	r7, #32
 8027c24:	46bd      	mov	sp, r7
 8027c26:	bd80      	pop	{r7, pc}

08027c28 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8027c28:	b580      	push	{r7, lr}
 8027c2a:	b086      	sub	sp, #24
 8027c2c:	af00      	add	r7, sp, #0
 8027c2e:	60f8      	str	r0, [r7, #12]
 8027c30:	60b9      	str	r1, [r7, #8]
 8027c32:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8027c34:	68bb      	ldr	r3, [r7, #8]
 8027c36:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 8027c38:	68bb      	ldr	r3, [r7, #8]
 8027c3a:	699b      	ldr	r3, [r3, #24]
 8027c3c:	1ad3      	subs	r3, r2, r3
 8027c3e:	10db      	asrs	r3, r3, #3
 8027c40:	4a0d      	ldr	r2, [pc, #52]	; (8027c78 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj+0x50>)
 8027c42:	fb02 f303 	mul.w	r3, r2, r3
 8027c46:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8027c48:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8027c4a:	687a      	ldr	r2, [r7, #4]
 8027c4c:	697b      	ldr	r3, [r7, #20]
 8027c4e:	429a      	cmp	r2, r3
 8027c50:	d906      	bls.n	8027c60 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 8027c52:	687a      	ldr	r2, [r7, #4]
 8027c54:	697b      	ldr	r3, [r7, #20]
 8027c56:	1ad3      	subs	r3, r2, r3
 8027c58:	4619      	mov	r1, r3
 8027c5a:	68b8      	ldr	r0, [r7, #8]
 8027c5c:	f001 fca0 	bl	80295a0 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 8027c60:	68bb      	ldr	r3, [r7, #8]
 8027c62:	f103 0118 	add.w	r1, r3, #24
 8027c66:	687a      	ldr	r2, [r7, #4]
 8027c68:	68fb      	ldr	r3, [r7, #12]
 8027c6a:	4618      	mov	r0, r3
 8027c6c:	f000 fec1 	bl	80289f2 <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
      }
 8027c70:	68f8      	ldr	r0, [r7, #12]
 8027c72:	3718      	adds	r7, #24
 8027c74:	46bd      	mov	sp, r7
 8027c76:	bd80      	pop	{r7, pc}
 8027c78:	aaaaaaab 	.word	0xaaaaaaab

08027c7c <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j>:
      deque<_Tp, _Alloc>::
 8027c7c:	b5b0      	push	{r4, r5, r7, lr}
 8027c7e:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8027c82:	af04      	add	r7, sp, #16
 8027c84:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8027c88:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 8027c8c:	6020      	str	r0, [r4, #0]
 8027c8e:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8027c92:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8027c96:	6001      	str	r1, [r0, #0]
 8027c98:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8027c9c:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8027ca0:	600a      	str	r2, [r1, #0]
 8027ca2:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027ca6:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8027caa:	6013      	str	r3, [r2, #0]
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 8027cac:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027cb0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027cb4:	681b      	ldr	r3, [r3, #0]
 8027cb6:	f103 0208 	add.w	r2, r3, #8
 8027cba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027cbe:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8027cc2:	4611      	mov	r1, r2
 8027cc4:	6818      	ldr	r0, [r3, #0]
 8027cc6:	f7fe f8f7 	bl	8025eb8 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 8027cca:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 8027cce:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027cd2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027cd6:	6818      	ldr	r0, [r3, #0]
 8027cd8:	f7fd f94a 	bl	8024f70 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8027cdc:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 8027ce0:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8027ce4:	085a      	lsrs	r2, r3, #1
 8027ce6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8027cea:	429a      	cmp	r2, r3
 8027cec:	f240 8158 	bls.w	8027fa0 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x324>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8027cf0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027cf4:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8027cf8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027cfc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027d00:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027d04:	6819      	ldr	r1, [r3, #0]
 8027d06:	f7ff ff4d 	bl	8027ba4 <_ZNSt5dequeI8IMUFrameSaIS0_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 8027d0a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027d0e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027d12:	681b      	ldr	r3, [r3, #0]
 8027d14:	f103 0208 	add.w	r2, r3, #8
 8027d18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8027d1c:	4611      	mov	r1, r2
 8027d1e:	4618      	mov	r0, r3
 8027d20:	f7fc fc94 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 8027d24:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027d28:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027d2c:	681b      	ldr	r3, [r3, #0]
 8027d2e:	f103 0108 	add.w	r1, r3, #8
 8027d32:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027d36:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8027d3a:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8027d3e:	4618      	mov	r0, r3
 8027d40:	f000 fe57 	bl	80289f2 <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8027d44:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027d48:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8027d4c:	681a      	ldr	r2, [r3, #0]
 8027d4e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027d52:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8027d56:	4614      	mov	r4, r2
 8027d58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027d5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (__elemsbefore >= difference_type(__n))
 8027d5e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8027d62:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8027d66:	429a      	cmp	r2, r3
 8027d68:	f2c0 8098 	blt.w	8027e9c <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x220>
		    iterator __start_n = (this->_M_impl._M_start
 8027d6c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027d70:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027d74:	681b      	ldr	r3, [r3, #0]
 8027d76:	f103 0108 	add.w	r1, r3, #8
 8027d7a:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027d7e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027d82:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8027d86:	4618      	mov	r0, r3
 8027d88:	f000 fe33 	bl	80289f2 <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8027d8c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027d90:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027d94:	681b      	ldr	r3, [r3, #0]
 8027d96:	f103 0208 	add.w	r2, r3, #8
 8027d9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8027d9e:	4611      	mov	r1, r2
 8027da0:	4618      	mov	r0, r3
 8027da2:	f7fc fc53 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8027da6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8027daa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027dae:	4611      	mov	r1, r2
 8027db0:	4618      	mov	r0, r3
 8027db2:	f7fc fc4b 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8027db6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027dba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8027dbe:	4611      	mov	r1, r2
 8027dc0:	4618      	mov	r0, r3
 8027dc2:	f7fc fc43 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						_M_get_Tp_allocator());
 8027dc6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027dca:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027dce:	681b      	ldr	r3, [r3, #0]
 8027dd0:	4618      	mov	r0, r3
 8027dd2:	f7fc fc30 	bl	8024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8027dd6:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8027dd8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027ddc:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 8027de0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8027de4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8027de8:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8027dec:	9400      	str	r4, [sp, #0]
 8027dee:	f001 fc1b 	bl	8029628 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
		    this->_M_impl._M_start = __new_start;
 8027df2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027df6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027dfa:	681b      	ldr	r3, [r3, #0]
 8027dfc:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027e00:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8027e04:	f103 0408 	add.w	r4, r3, #8
 8027e08:	4613      	mov	r3, r2
 8027e0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 8027e10:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8027e14:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8027e18:	4611      	mov	r1, r2
 8027e1a:	4618      	mov	r0, r3
 8027e1c:	f7fc fc16 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8027e20:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027e24:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8027e28:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8027e2c:	6819      	ldr	r1, [r3, #0]
 8027e2e:	4610      	mov	r0, r2
 8027e30:	f7fc fc0c 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8027e34:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8027e38:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8027e3c:	4611      	mov	r1, r2
 8027e3e:	4618      	mov	r0, r3
 8027e40:	f7fc fc04 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8027e44:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027e48:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8027e4c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8027e50:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8027e54:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8027e58:	f001 fc1f 	bl	802969a <_ZSt4moveISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 8027e5c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027e60:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027e64:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8027e68:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027e6c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8027e70:	6819      	ldr	r1, [r3, #0]
 8027e72:	f001 fb67 	bl	8029544 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8027e76:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027e7a:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8027e7e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8027e82:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027e86:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8027e8a:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8027e8e:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8027e92:	6812      	ldr	r2, [r2, #0]
 8027e94:	6809      	ldr	r1, [r1, #0]
 8027e96:	f7fe fdc0 	bl	8026a1a <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8027e9a:	e1dd      	b.n	8028258 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
		    _ForwardIterator __mid = __first;
 8027e9c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027ea0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8027ea4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027ea8:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8027eac:	6812      	ldr	r2, [r2, #0]
 8027eae:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 8027eb0:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027eb4:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8027eb8:	1ad2      	subs	r2, r2, r3
 8027eba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8027ebe:	4611      	mov	r1, r2
 8027ec0:	4618      	mov	r0, r3
 8027ec2:	f001 fc20 	bl	8029706 <_ZSt7advanceIPK8IMUFrameiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8027ec6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027eca:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027ece:	681b      	ldr	r3, [r3, #0]
 8027ed0:	f103 0208 	add.w	r2, r3, #8
 8027ed4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8027ed8:	4611      	mov	r1, r2
 8027eda:	4618      	mov	r0, r3
 8027edc:	f7fc fbb6 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8027ee0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027ee4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8027ee8:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8027eec:	6819      	ldr	r1, [r3, #0]
 8027eee:	4610      	mov	r0, r2
 8027ef0:	f7fc fbac 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8027ef4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027ef8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8027efc:	681c      	ldr	r4, [r3, #0]
 8027efe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027f02:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8027f06:	4611      	mov	r1, r2
 8027f08:	4618      	mov	r0, r3
 8027f0a:	f7fc fb9f 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						   _M_get_Tp_allocator());
 8027f0e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027f12:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027f16:	681b      	ldr	r3, [r3, #0]
 8027f18:	4618      	mov	r0, r3
 8027f1a:	f7fc fb8c 	bl	8024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8027f1e:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8027f20:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027f24:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8027f28:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027f2c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8027f30:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 8027f34:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8027f38:	9202      	str	r2, [sp, #8]
 8027f3a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8027f3e:	9201      	str	r2, [sp, #4]
 8027f40:	9400      	str	r4, [sp, #0]
 8027f42:	681b      	ldr	r3, [r3, #0]
 8027f44:	462a      	mov	r2, r5
 8027f46:	f001 fbf1 	bl	802972c <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorI8IMUFrameRS1_PS1_EPKS1_S4_SaIS1_EET1_T_S9_T0_SA_S8_RT2_>
		    this->_M_impl._M_start = __new_start;
 8027f4a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027f4e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027f52:	681b      	ldr	r3, [r3, #0]
 8027f54:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027f58:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8027f5c:	f103 0408 	add.w	r4, r3, #8
 8027f60:	4613      	mov	r3, r2
 8027f62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027f64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 8027f68:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027f6c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8027f70:	681c      	ldr	r4, [r3, #0]
 8027f72:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8027f76:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8027f7a:	4611      	mov	r1, r2
 8027f7c:	4618      	mov	r0, r3
 8027f7e:	f7fc fb65 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8027f82:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027f86:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8027f8a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8027f8e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027f92:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8027f96:	6812      	ldr	r2, [r2, #0]
 8027f98:	4621      	mov	r1, r4
 8027f9a:	f7fe fd3e 	bl	8026a1a <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8027f9e:	e15b      	b.n	8028258 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 8027fa0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027fa4:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 8027fa8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027fac:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027fb0:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027fb4:	6819      	ldr	r1, [r3, #0]
 8027fb6:	f7ff fe37 	bl	8027c28 <_ZNSt5dequeI8IMUFrameSaIS0_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 8027fba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027fbe:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027fc2:	681b      	ldr	r3, [r3, #0]
 8027fc4:	f103 0218 	add.w	r2, r3, #24
 8027fc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8027fcc:	4611      	mov	r1, r2
 8027fce:	4618      	mov	r0, r3
 8027fd0:	f7fc fb3c 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	    difference_type(__length) - __elemsbefore;
 8027fd4:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 8027fd8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8027fdc:	1ad3      	subs	r3, r2, r3
 8027fde:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 8027fe2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027fe6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027fea:	681b      	ldr	r3, [r3, #0]
 8027fec:	f103 0118 	add.w	r1, r3, #24
 8027ff0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027ff4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8027ff8:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8027ffc:	4618      	mov	r0, r3
 8027ffe:	f001 faa1 	bl	8029544 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8028002:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028006:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802800a:	681a      	ldr	r2, [r3, #0]
 802800c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028010:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8028014:	4614      	mov	r4, r2
 8028016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 802801c:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8028020:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8028024:	429a      	cmp	r2, r3
 8028026:	f340 8096 	ble.w	8028156 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 802802a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802802e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028032:	681b      	ldr	r3, [r3, #0]
 8028034:	f103 0118 	add.w	r1, r3, #24
 8028038:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 802803c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028040:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8028044:	4618      	mov	r0, r3
 8028046:	f001 fa7d 	bl	8029544 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
		  std::__uninitialized_move_a(__finish_n,
 802804a:	f107 0218 	add.w	r2, r7, #24
 802804e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8028052:	4611      	mov	r1, r2
 8028054:	4618      	mov	r0, r3
 8028056:	f7fc faf9 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					      this->_M_impl._M_finish,
 802805a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802805e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028062:	681b      	ldr	r3, [r3, #0]
 8028064:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8028068:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 802806c:	4611      	mov	r1, r2
 802806e:	4618      	mov	r0, r3
 8028070:	f7fc faec 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					      this->_M_impl._M_finish,
 8028074:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028078:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802807c:	681b      	ldr	r3, [r3, #0]
 802807e:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8028082:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8028086:	4611      	mov	r1, r2
 8028088:	4618      	mov	r0, r3
 802808a:	f7fc fadf 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
					      _M_get_Tp_allocator());
 802808e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028092:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028096:	681b      	ldr	r3, [r3, #0]
 8028098:	4618      	mov	r0, r3
 802809a:	f7fc facc 	bl	8024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 802809e:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 80280a0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80280a4:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80280a8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80280ac:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 80280b0:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 80280b4:	9400      	str	r4, [sp, #0]
 80280b6:	f001 fab7 	bl	8029628 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 80280ba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80280be:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80280c2:	681b      	ldr	r3, [r3, #0]
 80280c4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80280c8:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 80280cc:	f103 0418 	add.w	r4, r3, #24
 80280d0:	4613      	mov	r3, r2
 80280d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80280d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 80280d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80280dc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80280e0:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 80280e4:	6819      	ldr	r1, [r3, #0]
 80280e6:	4610      	mov	r0, r2
 80280e8:	f7fc fab0 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80280ec:	f107 0218 	add.w	r2, r7, #24
 80280f0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80280f4:	4611      	mov	r1, r2
 80280f6:	4618      	mov	r0, r3
 80280f8:	f7fc faa8 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80280fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8028100:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8028104:	4611      	mov	r1, r2
 8028106:	4618      	mov	r0, r3
 8028108:	f7fc faa0 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802810c:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8028110:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8028114:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8028118:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 802811c:	f001 fb46 	bl	80297ac <_ZSt13move_backwardISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>
		  std::copy(__first, __last, __pos);
 8028120:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028124:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8028128:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 802812c:	6819      	ldr	r1, [r3, #0]
 802812e:	4610      	mov	r0, r2
 8028130:	f7fc fa8c 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8028134:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8028138:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 802813c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8028140:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8028144:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8028148:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 802814c:	6812      	ldr	r2, [r2, #0]
 802814e:	6809      	ldr	r1, [r1, #0]
 8028150:	f7fe fc63 	bl	8026a1a <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8028154:	e080      	b.n	8028258 <_ZNSt5dequeI8IMUFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
		  _ForwardIterator __mid = __first;
 8028156:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802815a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 802815e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8028162:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8028166:	6812      	ldr	r2, [r2, #0]
 8028168:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 802816a:	f107 0314 	add.w	r3, r7, #20
 802816e:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8028172:	4618      	mov	r0, r3
 8028174:	f001 fac7 	bl	8029706 <_ZSt7advanceIPK8IMUFrameiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8028178:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802817c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8028180:	681c      	ldr	r4, [r3, #0]
 8028182:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028186:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802818a:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 802818e:	6819      	ldr	r1, [r3, #0]
 8028190:	4610      	mov	r0, r2
 8028192:	f7fc fa5b 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						 this->_M_impl._M_finish,
 8028196:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802819a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802819e:	681b      	ldr	r3, [r3, #0]
 80281a0:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80281a4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80281a8:	4611      	mov	r1, r2
 80281aa:	4618      	mov	r0, r3
 80281ac:	f7fc fa4e 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						 this->_M_impl._M_finish,
 80281b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80281b4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80281b8:	681b      	ldr	r3, [r3, #0]
 80281ba:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80281be:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80281c2:	4611      	mov	r1, r2
 80281c4:	4618      	mov	r0, r3
 80281c6:	f7fc fa41 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
						 _M_get_Tp_allocator());
 80281ca:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80281ce:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80281d2:	681b      	ldr	r3, [r3, #0]
 80281d4:	4618      	mov	r0, r3
 80281d6:	f7fc fa2e 	bl	8024636 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80281da:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80281dc:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 80281e0:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 80281e4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80281e8:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80281ec:	9302      	str	r3, [sp, #8]
 80281ee:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80281f2:	9301      	str	r3, [sp, #4]
 80281f4:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80281f8:	9300      	str	r3, [sp, #0]
 80281fa:	460b      	mov	r3, r1
 80281fc:	6812      	ldr	r2, [r2, #0]
 80281fe:	4621      	mov	r1, r4
 8028200:	f001 fb0a 	bl	8029818 <_ZSt25__uninitialized_copy_moveIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES6_SaIS0_EET1_T_S9_T0_SA_S8_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8028204:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028208:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802820c:	681b      	ldr	r3, [r3, #0]
 802820e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8028212:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8028216:	f103 0418 	add.w	r4, r3, #24
 802821a:	4613      	mov	r3, r2
 802821c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802821e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 8028222:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028226:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 802822a:	681c      	ldr	r4, [r3, #0]
 802822c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028230:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8028234:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8028238:	6819      	ldr	r1, [r3, #0]
 802823a:	4610      	mov	r0, r2
 802823c:	f7fc fa06 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8028240:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 8028244:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8028248:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802824c:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 8028250:	4622      	mov	r2, r4
 8028252:	6809      	ldr	r1, [r1, #0]
 8028254:	f7fe fbe1 	bl	8026a1a <_ZSt4copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 8028258:	bf00      	nop
 802825a:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 802825e:	46bd      	mov	sp, r7
 8028260:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028264 <_ZSt10__distanceIPK14ServoDataFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8028264:	b480      	push	{r7}
 8028266:	b085      	sub	sp, #20
 8028268:	af00      	add	r7, sp, #0
 802826a:	60f8      	str	r0, [r7, #12]
 802826c:	60b9      	str	r1, [r7, #8]
 802826e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8028270:	68ba      	ldr	r2, [r7, #8]
 8028272:	68fb      	ldr	r3, [r7, #12]
 8028274:	1ad3      	subs	r3, r2, r3
 8028276:	109b      	asrs	r3, r3, #2
 8028278:	4a04      	ldr	r2, [pc, #16]	; (802828c <_ZSt10__distanceIPK14ServoDataFrameENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x28>)
 802827a:	fb02 f303 	mul.w	r3, r2, r3
    }
 802827e:	4618      	mov	r0, r3
 8028280:	3714      	adds	r7, #20
 8028282:	46bd      	mov	sp, r7
 8028284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028288:	4770      	bx	lr
 802828a:	bf00      	nop
 802828c:	07a44c6b 	.word	0x07a44c6b

08028290 <_ZSt9__advanceIPK14ServoDataFrameiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8028290:	b480      	push	{r7}
 8028292:	b085      	sub	sp, #20
 8028294:	af00      	add	r7, sp, #0
 8028296:	60f8      	str	r0, [r7, #12]
 8028298:	60b9      	str	r1, [r7, #8]
 802829a:	713a      	strb	r2, [r7, #4]
	__i += __n;
 802829c:	68fb      	ldr	r3, [r7, #12]
 802829e:	681a      	ldr	r2, [r3, #0]
 80282a0:	68bb      	ldr	r3, [r7, #8]
 80282a2:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80282a6:	fb01 f303 	mul.w	r3, r1, r3
 80282aa:	441a      	add	r2, r3
 80282ac:	68fb      	ldr	r3, [r7, #12]
 80282ae:	601a      	str	r2, [r3, #0]
    }
 80282b0:	bf00      	nop
 80282b2:	3714      	adds	r7, #20
 80282b4:	46bd      	mov	sp, r7
 80282b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282ba:	4770      	bx	lr

080282bc <_ZSt12__miter_baseIPK14ServoDataFrameET_S3_>:
    __miter_base(_Iterator __it)
 80282bc:	b480      	push	{r7}
 80282be:	b083      	sub	sp, #12
 80282c0:	af00      	add	r7, sp, #0
 80282c2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80282c4:	687b      	ldr	r3, [r7, #4]
 80282c6:	4618      	mov	r0, r3
 80282c8:	370c      	adds	r7, #12
 80282ca:	46bd      	mov	sp, r7
 80282cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282d0:	4770      	bx	lr

080282d2 <_ZSt13__copy_move_aILb0EPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_EET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80282d2:	b5b0      	push	{r4, r5, r7, lr}
 80282d4:	b090      	sub	sp, #64	; 0x40
 80282d6:	af00      	add	r7, sp, #0
 80282d8:	60f8      	str	r0, [r7, #12]
 80282da:	60b9      	str	r1, [r7, #8]
 80282dc:	607a      	str	r2, [r7, #4]
 80282de:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 80282e0:	68b8      	ldr	r0, [r7, #8]
 80282e2:	f001 fad9 	bl	8029898 <_ZSt12__niter_baseIPK14ServoDataFrameET_S3_>
 80282e6:	4604      	mov	r4, r0
 80282e8:	6878      	ldr	r0, [r7, #4]
 80282ea:	f001 fad5 	bl	8029898 <_ZSt12__niter_baseIPK14ServoDataFrameET_S3_>
 80282ee:	4605      	mov	r5, r0
 80282f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80282f4:	6839      	ldr	r1, [r7, #0]
 80282f6:	4618      	mov	r0, r3
 80282f8:	f7fc f9fa 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 80282fc:	f107 0320 	add.w	r3, r7, #32
 8028300:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8028304:	4611      	mov	r1, r2
 8028306:	4618      	mov	r0, r3
 8028308:	f001 fad1 	bl	80298ae <_ZSt12__niter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>
 802830c:	f107 0010 	add.w	r0, r7, #16
 8028310:	f107 0320 	add.w	r3, r7, #32
 8028314:	462a      	mov	r2, r5
 8028316:	4621      	mov	r1, r4
 8028318:	f001 fad6 	bl	80298c8 <_ZSt14__copy_move_a1ILb0EPK14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802831c:	68fb      	ldr	r3, [r7, #12]
 802831e:	f107 0210 	add.w	r2, r7, #16
 8028322:	6839      	ldr	r1, [r7, #0]
 8028324:	4618      	mov	r0, r3
 8028326:	f001 fb1f 	bl	8029968 <_ZSt12__niter_wrapISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_RKS5_S5_>
    }
 802832a:	68f8      	ldr	r0, [r7, #12]
 802832c:	3740      	adds	r7, #64	; 0x40
 802832e:	46bd      	mov	sp, r7
 8028330:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028334 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8028334:	b580      	push	{r7, lr}
 8028336:	b086      	sub	sp, #24
 8028338:	af00      	add	r7, sp, #0
 802833a:	60f8      	str	r0, [r7, #12]
 802833c:	60b9      	str	r1, [r7, #8]
 802833e:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8028340:	68bb      	ldr	r3, [r7, #8]
 8028342:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8028344:	68bb      	ldr	r3, [r7, #8]
 8028346:	68db      	ldr	r3, [r3, #12]
 8028348:	1ad3      	subs	r3, r2, r3
 802834a:	109b      	asrs	r3, r3, #2
 802834c:	4a0d      	ldr	r2, [pc, #52]	; (8028384 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE28_M_reserve_elements_at_frontEj+0x50>)
 802834e:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8028352:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8028354:	687a      	ldr	r2, [r7, #4]
 8028356:	697b      	ldr	r3, [r7, #20]
 8028358:	429a      	cmp	r2, r3
 802835a:	d906      	bls.n	802836a <_ZNSt5dequeI14ServoDataFrameSaIS0_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 802835c:	687a      	ldr	r2, [r7, #4]
 802835e:	697b      	ldr	r3, [r7, #20]
 8028360:	1ad3      	subs	r3, r2, r3
 8028362:	4619      	mov	r1, r3
 8028364:	68b8      	ldr	r0, [r7, #8]
 8028366:	f001 fb0d 	bl	8029984 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 802836a:	68bb      	ldr	r3, [r7, #8]
 802836c:	f103 0108 	add.w	r1, r3, #8
 8028370:	687a      	ldr	r2, [r7, #4]
 8028372:	68fb      	ldr	r3, [r7, #12]
 8028374:	4618      	mov	r0, r3
 8028376:	f001 fb4b 	bl	8029a10 <_ZStmiRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_Ei>
      }
 802837a:	68f8      	ldr	r0, [r7, #12]
 802837c:	3718      	adds	r7, #24
 802837e:	46bd      	mov	sp, r7
 8028380:	bd80      	pop	{r7, pc}
 8028382:	bf00      	nop
 8028384:	07a44c6b 	.word	0x07a44c6b

08028388 <_ZSt22__uninitialized_copy_aIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8028388:	b580      	push	{r7, lr}
 802838a:	b088      	sub	sp, #32
 802838c:	af00      	add	r7, sp, #0
 802838e:	60f8      	str	r0, [r7, #12]
 8028390:	60b9      	str	r1, [r7, #8]
 8028392:	607a      	str	r2, [r7, #4]
 8028394:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8028396:	f107 0310 	add.w	r3, r7, #16
 802839a:	6839      	ldr	r1, [r7, #0]
 802839c:	4618      	mov	r0, r3
 802839e:	f7fc f9a7 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 80283a2:	68f8      	ldr	r0, [r7, #12]
 80283a4:	f107 0310 	add.w	r3, r7, #16
 80283a8:	687a      	ldr	r2, [r7, #4]
 80283aa:	68b9      	ldr	r1, [r7, #8]
 80283ac:	f001 fb43 	bl	8029a36 <_ZSt18uninitialized_copyIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
 80283b0:	68f8      	ldr	r0, [r7, #12]
 80283b2:	3720      	adds	r7, #32
 80283b4:	46bd      	mov	sp, r7
 80283b6:	bd80      	pop	{r7, pc}

080283b8 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 80283b8:	b580      	push	{r7, lr}
 80283ba:	b086      	sub	sp, #24
 80283bc:	af00      	add	r7, sp, #0
 80283be:	60f8      	str	r0, [r7, #12]
 80283c0:	60b9      	str	r1, [r7, #8]
 80283c2:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 80283c4:	68bb      	ldr	r3, [r7, #8]
 80283c6:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 80283c8:	68bb      	ldr	r3, [r7, #8]
 80283ca:	699b      	ldr	r3, [r3, #24]
 80283cc:	1ad3      	subs	r3, r2, r3
 80283ce:	109b      	asrs	r3, r3, #2
 80283d0:	4a0d      	ldr	r2, [pc, #52]	; (8028408 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE27_M_reserve_elements_at_backEj+0x50>)
 80283d2:	fb02 f303 	mul.w	r3, r2, r3
 80283d6:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 80283d8:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 80283da:	687a      	ldr	r2, [r7, #4]
 80283dc:	697b      	ldr	r3, [r7, #20]
 80283de:	429a      	cmp	r2, r3
 80283e0:	d906      	bls.n	80283f0 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 80283e2:	687a      	ldr	r2, [r7, #4]
 80283e4:	697b      	ldr	r3, [r7, #20]
 80283e6:	1ad3      	subs	r3, r2, r3
 80283e8:	4619      	mov	r1, r3
 80283ea:	68b8      	ldr	r0, [r7, #8]
 80283ec:	f001 fb3e 	bl	8029a6c <_ZNSt5dequeI14ServoDataFrameSaIS0_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 80283f0:	68bb      	ldr	r3, [r7, #8]
 80283f2:	f103 0118 	add.w	r1, r3, #24
 80283f6:	687a      	ldr	r2, [r7, #4]
 80283f8:	68fb      	ldr	r3, [r7, #12]
 80283fa:	4618      	mov	r0, r3
 80283fc:	f000 fb18 	bl	8028a30 <_ZStplRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_Ei>
      }
 8028400:	68f8      	ldr	r0, [r7, #12]
 8028402:	3718      	adds	r7, #24
 8028404:	46bd      	mov	sp, r7
 8028406:	bd80      	pop	{r7, pc}
 8028408:	07a44c6b 	.word	0x07a44c6b

0802840c <_ZNSt5dequeI14ServoDataFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j>:
      deque<_Tp, _Alloc>::
 802840c:	b5b0      	push	{r4, r5, r7, lr}
 802840e:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8028412:	af04      	add	r7, sp, #16
 8028414:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8028418:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 802841c:	6020      	str	r0, [r4, #0]
 802841e:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8028422:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8028426:	6001      	str	r1, [r0, #0]
 8028428:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 802842c:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8028430:	600a      	str	r2, [r1, #0]
 8028432:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8028436:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802843a:	6013      	str	r3, [r2, #0]
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 802843c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028440:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028444:	681b      	ldr	r3, [r3, #0]
 8028446:	f103 0208 	add.w	r2, r3, #8
 802844a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802844e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8028452:	4611      	mov	r1, r2
 8028454:	6818      	ldr	r0, [r3, #0]
 8028456:	f7fd fdd7 	bl	8026008 <_ZStmiRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_ES5_>
 802845a:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 802845e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028462:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028466:	6818      	ldr	r0, [r3, #0]
 8028468:	f7fc fdc9 	bl	8024ffe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE4sizeEv>
 802846c:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 8028470:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8028474:	085a      	lsrs	r2, r3, #1
 8028476:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 802847a:	429a      	cmp	r2, r3
 802847c:	f240 8158 	bls.w	8028730 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x324>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8028480:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028484:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8028488:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802848c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028490:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8028494:	6819      	ldr	r1, [r3, #0]
 8028496:	f7ff ff4d 	bl	8028334 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 802849a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802849e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80284a2:	681b      	ldr	r3, [r3, #0]
 80284a4:	f103 0208 	add.w	r2, r3, #8
 80284a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80284ac:	4611      	mov	r1, r2
 80284ae:	4618      	mov	r0, r3
 80284b0:	f7fc f91e 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 80284b4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80284b8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80284bc:	681b      	ldr	r3, [r3, #0]
 80284be:	f103 0108 	add.w	r1, r3, #8
 80284c2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80284c6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80284ca:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80284ce:	4618      	mov	r0, r3
 80284d0:	f000 faae 	bl	8028a30 <_ZStplRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_Ei>
 80284d4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80284d8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80284dc:	681a      	ldr	r2, [r3, #0]
 80284de:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80284e2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80284e6:	4614      	mov	r4, r2
 80284e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80284ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (__elemsbefore >= difference_type(__n))
 80284ee:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80284f2:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80284f6:	429a      	cmp	r2, r3
 80284f8:	f2c0 8098 	blt.w	802862c <_ZNSt5dequeI14ServoDataFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x220>
		    iterator __start_n = (this->_M_impl._M_start
 80284fc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028500:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028504:	681b      	ldr	r3, [r3, #0]
 8028506:	f103 0108 	add.w	r1, r3, #8
 802850a:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 802850e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028512:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8028516:	4618      	mov	r0, r3
 8028518:	f000 fa8a 	bl	8028a30 <_ZStplRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_Ei>
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 802851c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028520:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028524:	681b      	ldr	r3, [r3, #0]
 8028526:	f103 0208 	add.w	r2, r3, #8
 802852a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 802852e:	4611      	mov	r1, r2
 8028530:	4618      	mov	r0, r3
 8028532:	f7fc f8dd 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8028536:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802853a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802853e:	4611      	mov	r1, r2
 8028540:	4618      	mov	r0, r3
 8028542:	f7fc f8d5 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8028546:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802854a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 802854e:	4611      	mov	r1, r2
 8028550:	4618      	mov	r0, r3
 8028552:	f7fc f8cd 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
						_M_get_Tp_allocator());
 8028556:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802855a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802855e:	681b      	ldr	r3, [r3, #0]
 8028560:	4618      	mov	r0, r3
 8028562:	f7fc f8ba 	bl	80246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8028566:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8028568:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802856c:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 8028570:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8028574:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8028578:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 802857c:	9400      	str	r4, [sp, #0]
 802857e:	f001 fab9 	bl	8029af4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
		    this->_M_impl._M_start = __new_start;
 8028582:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028586:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802858a:	681b      	ldr	r3, [r3, #0]
 802858c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8028590:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8028594:	f103 0408 	add.w	r4, r3, #8
 8028598:	4613      	mov	r3, r2
 802859a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802859c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 80285a0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80285a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80285a8:	4611      	mov	r1, r2
 80285aa:	4618      	mov	r0, r3
 80285ac:	f7fc f8a0 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 80285b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80285b4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80285b8:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80285bc:	6819      	ldr	r1, [r3, #0]
 80285be:	4610      	mov	r0, r2
 80285c0:	f7fc f896 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 80285c4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80285c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80285cc:	4611      	mov	r1, r2
 80285ce:	4618      	mov	r0, r3
 80285d0:	f7fc f88e 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 80285d4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80285d8:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 80285dc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80285e0:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80285e4:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 80285e8:	f001 fabd 	bl	8029b66 <_ZSt4moveISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_ET0_T_S6_S5_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 80285ec:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80285f0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80285f4:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 80285f8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80285fc:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8028600:	6819      	ldr	r1, [r3, #0]
 8028602:	f001 fa05 	bl	8029a10 <_ZStmiRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_Ei>
 8028606:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802860a:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 802860e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8028612:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8028616:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802861a:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 802861e:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8028622:	6812      	ldr	r2, [r2, #0]
 8028624:	6809      	ldr	r1, [r1, #0]
 8028626:	f7fe fb06 	bl	8026c36 <_ZSt4copyIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 802862a:	e1dd      	b.n	80289e8 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
		    _ForwardIterator __mid = __first;
 802862c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028630:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8028634:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8028638:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 802863c:	6812      	ldr	r2, [r2, #0]
 802863e:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 8028640:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8028644:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8028648:	1ad2      	subs	r2, r2, r3
 802864a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802864e:	4611      	mov	r1, r2
 8028650:	4618      	mov	r0, r3
 8028652:	f001 fabe 	bl	8029bd2 <_ZSt7advanceIPK14ServoDataFrameiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8028656:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802865a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802865e:	681b      	ldr	r3, [r3, #0]
 8028660:	f103 0208 	add.w	r2, r3, #8
 8028664:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8028668:	4611      	mov	r1, r2
 802866a:	4618      	mov	r0, r3
 802866c:	f7fc f840 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8028670:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028674:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8028678:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 802867c:	6819      	ldr	r1, [r3, #0]
 802867e:	4610      	mov	r0, r2
 8028680:	f7fc f836 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8028684:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028688:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 802868c:	681c      	ldr	r4, [r3, #0]
 802868e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8028692:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8028696:	4611      	mov	r1, r2
 8028698:	4618      	mov	r0, r3
 802869a:	f7fc f829 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
						   _M_get_Tp_allocator());
 802869e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80286a2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80286a6:	681b      	ldr	r3, [r3, #0]
 80286a8:	4618      	mov	r0, r3
 80286aa:	f7fc f816 	bl	80246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80286ae:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 80286b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80286b4:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 80286b8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80286bc:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80286c0:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 80286c4:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 80286c8:	9202      	str	r2, [sp, #8]
 80286ca:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80286ce:	9201      	str	r2, [sp, #4]
 80286d0:	9400      	str	r4, [sp, #0]
 80286d2:	681b      	ldr	r3, [r3, #0]
 80286d4:	462a      	mov	r2, r5
 80286d6:	f001 fa8f 	bl	8029bf8 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EPKS1_S4_SaIS1_EET1_T_S9_T0_SA_S8_RT2_>
		    this->_M_impl._M_start = __new_start;
 80286da:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80286de:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80286e2:	681b      	ldr	r3, [r3, #0]
 80286e4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80286e8:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 80286ec:	f103 0408 	add.w	r4, r3, #8
 80286f0:	4613      	mov	r3, r2
 80286f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80286f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 80286f8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80286fc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8028700:	681c      	ldr	r4, [r3, #0]
 8028702:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8028706:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 802870a:	4611      	mov	r1, r2
 802870c:	4618      	mov	r0, r3
 802870e:	f7fb ffef 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8028712:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028716:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 802871a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 802871e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8028722:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8028726:	6812      	ldr	r2, [r2, #0]
 8028728:	4621      	mov	r1, r4
 802872a:	f7fe fa84 	bl	8026c36 <_ZSt4copyIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 802872e:	e15b      	b.n	80289e8 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 8028730:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028734:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 8028738:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802873c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028740:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8028744:	6819      	ldr	r1, [r3, #0]
 8028746:	f7ff fe37 	bl	80283b8 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 802874a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802874e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028752:	681b      	ldr	r3, [r3, #0]
 8028754:	f103 0218 	add.w	r2, r3, #24
 8028758:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802875c:	4611      	mov	r1, r2
 802875e:	4618      	mov	r0, r3
 8028760:	f7fb ffc6 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
	    difference_type(__length) - __elemsbefore;
 8028764:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 8028768:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 802876c:	1ad3      	subs	r3, r2, r3
 802876e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 8028772:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028776:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802877a:	681b      	ldr	r3, [r3, #0]
 802877c:	f103 0118 	add.w	r1, r3, #24
 8028780:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028784:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8028788:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 802878c:	4618      	mov	r0, r3
 802878e:	f001 f93f 	bl	8029a10 <_ZStmiRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_Ei>
 8028792:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028796:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802879a:	681a      	ldr	r2, [r3, #0]
 802879c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80287a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80287a4:	4614      	mov	r4, r2
 80287a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80287a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 80287ac:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80287b0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80287b4:	429a      	cmp	r2, r3
 80287b6:	f340 8096 	ble.w	80288e6 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 80287ba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80287be:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80287c2:	681b      	ldr	r3, [r3, #0]
 80287c4:	f103 0118 	add.w	r1, r3, #24
 80287c8:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80287cc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80287d0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80287d4:	4618      	mov	r0, r3
 80287d6:	f001 f91b 	bl	8029a10 <_ZStmiRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_Ei>
		  std::__uninitialized_move_a(__finish_n,
 80287da:	f107 0218 	add.w	r2, r7, #24
 80287de:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80287e2:	4611      	mov	r1, r2
 80287e4:	4618      	mov	r0, r3
 80287e6:	f7fb ff83 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
					      this->_M_impl._M_finish,
 80287ea:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80287ee:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80287f2:	681b      	ldr	r3, [r3, #0]
 80287f4:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 80287f8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80287fc:	4611      	mov	r1, r2
 80287fe:	4618      	mov	r0, r3
 8028800:	f7fb ff76 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
					      this->_M_impl._M_finish,
 8028804:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028808:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802880c:	681b      	ldr	r3, [r3, #0]
 802880e:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8028812:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8028816:	4611      	mov	r1, r2
 8028818:	4618      	mov	r0, r3
 802881a:	f7fb ff69 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
					      _M_get_Tp_allocator());
 802881e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028822:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028826:	681b      	ldr	r3, [r3, #0]
 8028828:	4618      	mov	r0, r3
 802882a:	f7fb ff56 	bl	80246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 802882e:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 8028830:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028834:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8028838:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 802883c:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8028840:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8028844:	9400      	str	r4, [sp, #0]
 8028846:	f001 f955 	bl	8029af4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 802884a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802884e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028852:	681b      	ldr	r3, [r3, #0]
 8028854:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8028858:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 802885c:	f103 0418 	add.w	r4, r3, #24
 8028860:	4613      	mov	r3, r2
 8028862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 8028868:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802886c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8028870:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8028874:	6819      	ldr	r1, [r3, #0]
 8028876:	4610      	mov	r0, r2
 8028878:	f7fb ff3a 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802887c:	f107 0218 	add.w	r2, r7, #24
 8028880:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8028884:	4611      	mov	r1, r2
 8028886:	4618      	mov	r0, r3
 8028888:	f7fb ff32 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802888c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8028890:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8028894:	4611      	mov	r1, r2
 8028896:	4618      	mov	r0, r3
 8028898:	f7fb ff2a 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802889c:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 80288a0:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80288a4:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 80288a8:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 80288ac:	f001 f9e4 	bl	8029c78 <_ZSt13move_backwardISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_ET0_T_S6_S5_>
		  std::copy(__first, __last, __pos);
 80288b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80288b4:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80288b8:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 80288bc:	6819      	ldr	r1, [r3, #0]
 80288be:	4610      	mov	r0, r2
 80288c0:	f7fb ff16 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 80288c4:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 80288c8:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80288cc:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80288d0:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80288d4:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80288d8:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80288dc:	6812      	ldr	r2, [r2, #0]
 80288de:	6809      	ldr	r1, [r1, #0]
 80288e0:	f7fe f9a9 	bl	8026c36 <_ZSt4copyIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 80288e4:	e080      	b.n	80289e8 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE13_M_insert_auxIPKS0_EEvSt15_Deque_iteratorIS0_RS0_PS0_ET_SA_j+0x5dc>
		  _ForwardIterator __mid = __first;
 80288e6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80288ea:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80288ee:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80288f2:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80288f6:	6812      	ldr	r2, [r2, #0]
 80288f8:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 80288fa:	f107 0314 	add.w	r3, r7, #20
 80288fe:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8028902:	4618      	mov	r0, r3
 8028904:	f001 f965 	bl	8029bd2 <_ZSt7advanceIPK14ServoDataFrameiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8028908:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802890c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8028910:	681c      	ldr	r4, [r3, #0]
 8028912:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028916:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802891a:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 802891e:	6819      	ldr	r1, [r3, #0]
 8028920:	4610      	mov	r0, r2
 8028922:	f7fb fee5 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
						 this->_M_impl._M_finish,
 8028926:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802892a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802892e:	681b      	ldr	r3, [r3, #0]
 8028930:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8028934:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8028938:	4611      	mov	r1, r2
 802893a:	4618      	mov	r0, r3
 802893c:	f7fb fed8 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
						 this->_M_impl._M_finish,
 8028940:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028944:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028948:	681b      	ldr	r3, [r3, #0]
 802894a:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 802894e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8028952:	4611      	mov	r1, r2
 8028954:	4618      	mov	r0, r3
 8028956:	f7fb fecb 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
						 _M_get_Tp_allocator());
 802895a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802895e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8028962:	681b      	ldr	r3, [r3, #0]
 8028964:	4618      	mov	r0, r3
 8028966:	f7fb feb8 	bl	80246da <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 802896a:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 802896c:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8028970:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8028974:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8028978:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802897c:	9302      	str	r3, [sp, #8]
 802897e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8028982:	9301      	str	r3, [sp, #4]
 8028984:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8028988:	9300      	str	r3, [sp, #0]
 802898a:	460b      	mov	r3, r1
 802898c:	6812      	ldr	r2, [r2, #0]
 802898e:	4621      	mov	r1, r4
 8028990:	f001 f9a8 	bl	8029ce4 <_ZSt25__uninitialized_copy_moveIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_ES6_SaIS0_EET1_T_S9_T0_SA_S8_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8028994:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8028998:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802899c:	681b      	ldr	r3, [r3, #0]
 802899e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80289a2:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 80289a6:	f103 0418 	add.w	r4, r3, #24
 80289aa:	4613      	mov	r3, r2
 80289ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80289ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 80289b2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80289b6:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80289ba:	681c      	ldr	r4, [r3, #0]
 80289bc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80289c0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80289c4:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 80289c8:	6819      	ldr	r1, [r3, #0]
 80289ca:	4610      	mov	r0, r2
 80289cc:	f7fb fe90 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 80289d0:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 80289d4:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80289d8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80289dc:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 80289e0:	4622      	mov	r2, r4
 80289e2:	6809      	ldr	r1, [r1, #0]
 80289e4:	f7fe f927 	bl	8026c36 <_ZSt4copyIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
      }
 80289e8:	bf00      	nop
 80289ea:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 80289ee:	46bd      	mov	sp, r7
 80289f0:	bdb0      	pop	{r4, r5, r7, pc}

080289f2 <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 80289f2:	b580      	push	{r7, lr}
 80289f4:	b084      	sub	sp, #16
 80289f6:	af00      	add	r7, sp, #0
 80289f8:	60f8      	str	r0, [r7, #12]
 80289fa:	60b9      	str	r1, [r7, #8]
 80289fc:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 80289fe:	68b9      	ldr	r1, [r7, #8]
 8028a00:	68f8      	ldr	r0, [r7, #12]
 8028a02:	f7fb fe23 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	__tmp += __n;
 8028a06:	6879      	ldr	r1, [r7, #4]
 8028a08:	68f8      	ldr	r0, [r7, #12]
 8028a0a:	f001 f9ab 	bl	8029d64 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	return __tmp;
 8028a0e:	bf00      	nop
      }
 8028a10:	68f8      	ldr	r0, [r7, #12]
 8028a12:	3710      	adds	r7, #16
 8028a14:	46bd      	mov	sp, r7
 8028a16:	bd80      	pop	{r7, pc}

08028a18 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8028a18:	b480      	push	{r7}
 8028a1a:	b083      	sub	sp, #12
 8028a1c:	af00      	add	r7, sp, #0
 8028a1e:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8028a20:	687b      	ldr	r3, [r7, #4]
 8028a22:	681b      	ldr	r3, [r3, #0]
 8028a24:	4618      	mov	r0, r3
 8028a26:	370c      	adds	r7, #12
 8028a28:	46bd      	mov	sp, r7
 8028a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a2e:	4770      	bx	lr

08028a30 <_ZStplRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8028a30:	b580      	push	{r7, lr}
 8028a32:	b084      	sub	sp, #16
 8028a34:	af00      	add	r7, sp, #0
 8028a36:	60f8      	str	r0, [r7, #12]
 8028a38:	60b9      	str	r1, [r7, #8]
 8028a3a:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8028a3c:	68b9      	ldr	r1, [r7, #8]
 8028a3e:	68f8      	ldr	r0, [r7, #12]
 8028a40:	f7fb fe56 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
	__tmp += __n;
 8028a44:	6879      	ldr	r1, [r7, #4]
 8028a46:	68f8      	ldr	r0, [r7, #12]
 8028a48:	f001 f9f0 	bl	8029e2c <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi>
	return __tmp;
 8028a4c:	bf00      	nop
      }
 8028a4e:	68f8      	ldr	r0, [r7, #12]
 8028a50:	3710      	adds	r7, #16
 8028a52:	46bd      	mov	sp, r7
 8028a54:	bd80      	pop	{r7, pc}

08028a56 <_ZNKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8028a56:	b480      	push	{r7}
 8028a58:	b083      	sub	sp, #12
 8028a5a:	af00      	add	r7, sp, #0
 8028a5c:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8028a5e:	687b      	ldr	r3, [r7, #4]
 8028a60:	681b      	ldr	r3, [r3, #0]
 8028a62:	4618      	mov	r0, r3
 8028a64:	370c      	adds	r7, #12
 8028a66:	46bd      	mov	sp, r7
 8028a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a6c:	4770      	bx	lr

08028a6e <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8028a6e:	b480      	push	{r7}
 8028a70:	b083      	sub	sp, #12
 8028a72:	af00      	add	r7, sp, #0
 8028a74:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028a76:	687b      	ldr	r3, [r7, #4]
 8028a78:	4618      	mov	r0, r3
 8028a7a:	370c      	adds	r7, #12
 8028a7c:	46bd      	mov	sp, r7
 8028a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a82:	4770      	bx	lr

08028a84 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8028a84:	b580      	push	{r7, lr}
 8028a86:	b082      	sub	sp, #8
 8028a88:	af00      	add	r7, sp, #0
 8028a8a:	6078      	str	r0, [r7, #4]
 8028a8c:	6039      	str	r1, [r7, #0]
 8028a8e:	683b      	ldr	r3, [r7, #0]
 8028a90:	681a      	ldr	r2, [r3, #0]
 8028a92:	687b      	ldr	r3, [r7, #4]
 8028a94:	601a      	str	r2, [r3, #0]
 8028a96:	683b      	ldr	r3, [r7, #0]
 8028a98:	685a      	ldr	r2, [r3, #4]
 8028a9a:	687b      	ldr	r3, [r7, #4]
 8028a9c:	605a      	str	r2, [r3, #4]
 8028a9e:	687b      	ldr	r3, [r7, #4]
 8028aa0:	f103 0208 	add.w	r2, r3, #8
 8028aa4:	683b      	ldr	r3, [r7, #0]
 8028aa6:	3308      	adds	r3, #8
 8028aa8:	4619      	mov	r1, r3
 8028aaa:	4610      	mov	r0, r2
 8028aac:	f7fb fdce 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8028ab0:	687b      	ldr	r3, [r7, #4]
 8028ab2:	f103 0218 	add.w	r2, r3, #24
 8028ab6:	683b      	ldr	r3, [r7, #0]
 8028ab8:	3318      	adds	r3, #24
 8028aba:	4619      	mov	r1, r3
 8028abc:	4610      	mov	r0, r2
 8028abe:	f7fb fdc5 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8028ac2:	687b      	ldr	r3, [r7, #4]
 8028ac4:	4618      	mov	r0, r3
 8028ac6:	3708      	adds	r7, #8
 8028ac8:	46bd      	mov	sp, r7
 8028aca:	bd80      	pop	{r7, pc}

08028acc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8028acc:	b5b0      	push	{r4, r5, r7, lr}
 8028ace:	b08c      	sub	sp, #48	; 0x30
 8028ad0:	af00      	add	r7, sp, #0
 8028ad2:	6078      	str	r0, [r7, #4]
 8028ad4:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8028ad6:	6839      	ldr	r1, [r7, #0]
 8028ad8:	6878      	ldr	r0, [r7, #4]
 8028ada:	f7ff ffd3 	bl	8028a84 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8028ade:	f107 0308 	add.w	r3, r7, #8
 8028ae2:	4618      	mov	r0, r3
 8028ae4:	f7fd fcf0 	bl	80264c8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>
 8028ae8:	683b      	ldr	r3, [r7, #0]
 8028aea:	461d      	mov	r5, r3
 8028aec:	f107 0408 	add.w	r4, r7, #8
 8028af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028af8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8028afc:	e885 0003 	stmia.w	r5, {r0, r1}
 8028b00:	687b      	ldr	r3, [r7, #4]
 8028b02:	4618      	mov	r0, r3
 8028b04:	3730      	adds	r7, #48	; 0x30
 8028b06:	46bd      	mov	sp, r7
 8028b08:	bdb0      	pop	{r4, r5, r7, pc}

08028b0a <_ZSt4moveIRSaI8IMUFrameEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8028b0a:	b480      	push	{r7}
 8028b0c:	b083      	sub	sp, #12
 8028b0e:	af00      	add	r7, sp, #0
 8028b10:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028b12:	687b      	ldr	r3, [r7, #4]
 8028b14:	4618      	mov	r0, r3
 8028b16:	370c      	adds	r7, #12
 8028b18:	46bd      	mov	sp, r7
 8028b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b1e:	4770      	bx	lr

08028b20 <_ZSt4moveIRNSt11_Deque_baseI14ServoDataFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8028b20:	b480      	push	{r7}
 8028b22:	b083      	sub	sp, #12
 8028b24:	af00      	add	r7, sp, #0
 8028b26:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028b28:	687b      	ldr	r3, [r7, #4]
 8028b2a:	4618      	mov	r0, r3
 8028b2c:	370c      	adds	r7, #12
 8028b2e:	46bd      	mov	sp, r7
 8028b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b34:	4770      	bx	lr

08028b36 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8028b36:	b580      	push	{r7, lr}
 8028b38:	b082      	sub	sp, #8
 8028b3a:	af00      	add	r7, sp, #0
 8028b3c:	6078      	str	r0, [r7, #4]
 8028b3e:	6039      	str	r1, [r7, #0]
 8028b40:	683b      	ldr	r3, [r7, #0]
 8028b42:	681a      	ldr	r2, [r3, #0]
 8028b44:	687b      	ldr	r3, [r7, #4]
 8028b46:	601a      	str	r2, [r3, #0]
 8028b48:	683b      	ldr	r3, [r7, #0]
 8028b4a:	685a      	ldr	r2, [r3, #4]
 8028b4c:	687b      	ldr	r3, [r7, #4]
 8028b4e:	605a      	str	r2, [r3, #4]
 8028b50:	687b      	ldr	r3, [r7, #4]
 8028b52:	f103 0208 	add.w	r2, r3, #8
 8028b56:	683b      	ldr	r3, [r7, #0]
 8028b58:	3308      	adds	r3, #8
 8028b5a:	4619      	mov	r1, r3
 8028b5c:	4610      	mov	r0, r2
 8028b5e:	f7fb fdc7 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8028b62:	687b      	ldr	r3, [r7, #4]
 8028b64:	f103 0218 	add.w	r2, r3, #24
 8028b68:	683b      	ldr	r3, [r7, #0]
 8028b6a:	3318      	adds	r3, #24
 8028b6c:	4619      	mov	r1, r3
 8028b6e:	4610      	mov	r0, r2
 8028b70:	f7fb fdbe 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8028b74:	687b      	ldr	r3, [r7, #4]
 8028b76:	4618      	mov	r0, r3
 8028b78:	3708      	adds	r7, #8
 8028b7a:	46bd      	mov	sp, r7
 8028b7c:	bd80      	pop	{r7, pc}

08028b7e <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8028b7e:	b5b0      	push	{r4, r5, r7, lr}
 8028b80:	b08c      	sub	sp, #48	; 0x30
 8028b82:	af00      	add	r7, sp, #0
 8028b84:	6078      	str	r0, [r7, #4]
 8028b86:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8028b88:	6839      	ldr	r1, [r7, #0]
 8028b8a:	6878      	ldr	r0, [r7, #4]
 8028b8c:	f7ff ffd3 	bl	8028b36 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8028b90:	f107 0308 	add.w	r3, r7, #8
 8028b94:	4618      	mov	r0, r3
 8028b96:	f7fd fd59 	bl	802664c <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_Deque_impl_dataC1Ev>
 8028b9a:	683b      	ldr	r3, [r7, #0]
 8028b9c:	461d      	mov	r5, r3
 8028b9e:	f107 0408 	add.w	r4, r7, #8
 8028ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028baa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8028bae:	e885 0003 	stmia.w	r5, {r0, r1}
 8028bb2:	687b      	ldr	r3, [r7, #4]
 8028bb4:	4618      	mov	r0, r3
 8028bb6:	3730      	adds	r7, #48	; 0x30
 8028bb8:	46bd      	mov	sp, r7
 8028bba:	bdb0      	pop	{r4, r5, r7, pc}

08028bbc <_ZSt4moveIRSaI14ServoDataFrameEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8028bbc:	b480      	push	{r7}
 8028bbe:	b083      	sub	sp, #12
 8028bc0:	af00      	add	r7, sp, #0
 8028bc2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028bc4:	687b      	ldr	r3, [r7, #4]
 8028bc6:	4618      	mov	r0, r3
 8028bc8:	370c      	adds	r7, #12
 8028bca:	46bd      	mov	sp, r7
 8028bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028bd0:	4770      	bx	lr

08028bd2 <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8028bd2:	b480      	push	{r7}
 8028bd4:	b083      	sub	sp, #12
 8028bd6:	af00      	add	r7, sp, #0
 8028bd8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028bda:	687b      	ldr	r3, [r7, #4]
 8028bdc:	4618      	mov	r0, r3
 8028bde:	370c      	adds	r7, #12
 8028be0:	46bd      	mov	sp, r7
 8028be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028be6:	4770      	bx	lr

08028be8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8028be8:	b580      	push	{r7, lr}
 8028bea:	b082      	sub	sp, #8
 8028bec:	af00      	add	r7, sp, #0
 8028bee:	6078      	str	r0, [r7, #4]
 8028bf0:	6039      	str	r1, [r7, #0]
 8028bf2:	683b      	ldr	r3, [r7, #0]
 8028bf4:	681a      	ldr	r2, [r3, #0]
 8028bf6:	687b      	ldr	r3, [r7, #4]
 8028bf8:	601a      	str	r2, [r3, #0]
 8028bfa:	683b      	ldr	r3, [r7, #0]
 8028bfc:	685a      	ldr	r2, [r3, #4]
 8028bfe:	687b      	ldr	r3, [r7, #4]
 8028c00:	605a      	str	r2, [r3, #4]
 8028c02:	687b      	ldr	r3, [r7, #4]
 8028c04:	f103 0208 	add.w	r2, r3, #8
 8028c08:	683b      	ldr	r3, [r7, #0]
 8028c0a:	3308      	adds	r3, #8
 8028c0c:	4619      	mov	r1, r3
 8028c0e:	4610      	mov	r0, r2
 8028c10:	f7fb fe6d 	bl	80248ee <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028c14:	687b      	ldr	r3, [r7, #4]
 8028c16:	f103 0218 	add.w	r2, r3, #24
 8028c1a:	683b      	ldr	r3, [r7, #0]
 8028c1c:	3318      	adds	r3, #24
 8028c1e:	4619      	mov	r1, r3
 8028c20:	4610      	mov	r0, r2
 8028c22:	f7fb fe64 	bl	80248ee <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028c26:	687b      	ldr	r3, [r7, #4]
 8028c28:	4618      	mov	r0, r3
 8028c2a:	3708      	adds	r7, #8
 8028c2c:	46bd      	mov	sp, r7
 8028c2e:	bd80      	pop	{r7, pc}

08028c30 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8028c30:	b5b0      	push	{r4, r5, r7, lr}
 8028c32:	b08c      	sub	sp, #48	; 0x30
 8028c34:	af00      	add	r7, sp, #0
 8028c36:	6078      	str	r0, [r7, #4]
 8028c38:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8028c3a:	6839      	ldr	r1, [r7, #0]
 8028c3c:	6878      	ldr	r0, [r7, #4]
 8028c3e:	f7ff ffd3 	bl	8028be8 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>
	{ __x = _Deque_impl_data(); }
 8028c42:	f107 0308 	add.w	r3, r7, #8
 8028c46:	4618      	mov	r0, r3
 8028c48:	f7fc fd48 	bl	80256dc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
 8028c4c:	683b      	ldr	r3, [r7, #0]
 8028c4e:	461d      	mov	r5, r3
 8028c50:	f107 0408 	add.w	r4, r7, #8
 8028c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028c5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8028c60:	e885 0003 	stmia.w	r5, {r0, r1}
 8028c64:	687b      	ldr	r3, [r7, #4]
 8028c66:	4618      	mov	r0, r3
 8028c68:	3730      	adds	r7, #48	; 0x30
 8028c6a:	46bd      	mov	sp, r7
 8028c6c:	bdb0      	pop	{r4, r5, r7, pc}

08028c6e <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8028c6e:	b480      	push	{r7}
 8028c70:	b083      	sub	sp, #12
 8028c72:	af00      	add	r7, sp, #0
 8028c74:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028c76:	687b      	ldr	r3, [r7, #4]
 8028c78:	4618      	mov	r0, r3
 8028c7a:	370c      	adds	r7, #12
 8028c7c:	46bd      	mov	sp, r7
 8028c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c82:	4770      	bx	lr

08028c84 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8028c84:	b480      	push	{r7}
 8028c86:	b083      	sub	sp, #12
 8028c88:	af00      	add	r7, sp, #0
 8028c8a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028c8c:	687b      	ldr	r3, [r7, #4]
 8028c8e:	4618      	mov	r0, r3
 8028c90:	370c      	adds	r7, #12
 8028c92:	46bd      	mov	sp, r7
 8028c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c98:	4770      	bx	lr

08028c9a <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8028c9a:	b580      	push	{r7, lr}
 8028c9c:	b082      	sub	sp, #8
 8028c9e:	af00      	add	r7, sp, #0
 8028ca0:	6078      	str	r0, [r7, #4]
 8028ca2:	6039      	str	r1, [r7, #0]
 8028ca4:	683b      	ldr	r3, [r7, #0]
 8028ca6:	681a      	ldr	r2, [r3, #0]
 8028ca8:	687b      	ldr	r3, [r7, #4]
 8028caa:	601a      	str	r2, [r3, #0]
 8028cac:	683b      	ldr	r3, [r7, #0]
 8028cae:	685a      	ldr	r2, [r3, #4]
 8028cb0:	687b      	ldr	r3, [r7, #4]
 8028cb2:	605a      	str	r2, [r3, #4]
 8028cb4:	687b      	ldr	r3, [r7, #4]
 8028cb6:	f103 0208 	add.w	r2, r3, #8
 8028cba:	683b      	ldr	r3, [r7, #0]
 8028cbc:	3308      	adds	r3, #8
 8028cbe:	4619      	mov	r1, r3
 8028cc0:	4610      	mov	r0, r2
 8028cc2:	f7fb fea5 	bl	8024a10 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8028cc6:	687b      	ldr	r3, [r7, #4]
 8028cc8:	f103 0218 	add.w	r2, r3, #24
 8028ccc:	683b      	ldr	r3, [r7, #0]
 8028cce:	3318      	adds	r3, #24
 8028cd0:	4619      	mov	r1, r3
 8028cd2:	4610      	mov	r0, r2
 8028cd4:	f7fb fe9c 	bl	8024a10 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8028cd8:	687b      	ldr	r3, [r7, #4]
 8028cda:	4618      	mov	r0, r3
 8028cdc:	3708      	adds	r7, #8
 8028cde:	46bd      	mov	sp, r7
 8028ce0:	bd80      	pop	{r7, pc}

08028ce2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8028ce2:	b5b0      	push	{r4, r5, r7, lr}
 8028ce4:	b08c      	sub	sp, #48	; 0x30
 8028ce6:	af00      	add	r7, sp, #0
 8028ce8:	6078      	str	r0, [r7, #4]
 8028cea:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8028cec:	6839      	ldr	r1, [r7, #0]
 8028cee:	6878      	ldr	r0, [r7, #4]
 8028cf0:	f7ff ffd3 	bl	8028c9a <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 8028cf4:	f107 0308 	add.w	r3, r7, #8
 8028cf8:	4618      	mov	r0, r3
 8028cfa:	f7fd fdd4 	bl	80268a6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
 8028cfe:	683b      	ldr	r3, [r7, #0]
 8028d00:	461d      	mov	r5, r3
 8028d02:	f107 0408 	add.w	r4, r7, #8
 8028d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028d0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8028d12:	e885 0003 	stmia.w	r5, {r0, r1}
 8028d16:	687b      	ldr	r3, [r7, #4]
 8028d18:	4618      	mov	r0, r3
 8028d1a:	3730      	adds	r7, #48	; 0x30
 8028d1c:	46bd      	mov	sp, r7
 8028d1e:	bdb0      	pop	{r4, r5, r7, pc}

08028d20 <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8028d20:	b480      	push	{r7}
 8028d22:	b083      	sub	sp, #12
 8028d24:	af00      	add	r7, sp, #0
 8028d26:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8028d28:	687b      	ldr	r3, [r7, #4]
 8028d2a:	4618      	mov	r0, r3
 8028d2c:	370c      	adds	r7, #12
 8028d2e:	46bd      	mov	sp, r7
 8028d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d34:	4770      	bx	lr

08028d36 <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8028d36:	b590      	push	{r4, r7, lr}
 8028d38:	b085      	sub	sp, #20
 8028d3a:	af00      	add	r7, sp, #0
 8028d3c:	60f8      	str	r0, [r7, #12]
 8028d3e:	60b9      	str	r1, [r7, #8]
 8028d40:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8028d42:	6878      	ldr	r0, [r7, #4]
 8028d44:	f7fe fa0c 	bl	8027160 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8028d48:	4603      	mov	r3, r0
 8028d4a:	681c      	ldr	r4, [r3, #0]
 8028d4c:	68bb      	ldr	r3, [r7, #8]
 8028d4e:	4619      	mov	r1, r3
 8028d50:	2004      	movs	r0, #4
 8028d52:	f7f8 f84f 	bl	8020df4 <_ZnwjPv>
 8028d56:	4603      	mov	r3, r0
 8028d58:	601c      	str	r4, [r3, #0]
 8028d5a:	bf00      	nop
 8028d5c:	3714      	adds	r7, #20
 8028d5e:	46bd      	mov	sp, r7
 8028d60:	bd90      	pop	{r4, r7, pc}

08028d62 <_ZNSt5dequeI8IMUFrameSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8028d62:	b580      	push	{r7, lr}
 8028d64:	b084      	sub	sp, #16
 8028d66:	af00      	add	r7, sp, #0
 8028d68:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8028d6a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8028d6e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8028d70:	6878      	ldr	r0, [r7, #4]
 8028d72:	f001 f8bf 	bl	8029ef4 <_ZNSt16allocator_traitsISaI8IMUFrameEE8max_sizeERKS1_>
 8028d76:	4603      	mov	r3, r0
 8028d78:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8028d7a:	f107 0208 	add.w	r2, r7, #8
 8028d7e:	f107 030c 	add.w	r3, r7, #12
 8028d82:	4611      	mov	r1, r2
 8028d84:	4618      	mov	r0, r3
 8028d86:	f7fe fcc5 	bl	8027714 <_ZSt3minIjERKT_S2_S2_>
 8028d8a:	4603      	mov	r3, r0
 8028d8c:	681b      	ldr	r3, [r3, #0]
      }
 8028d8e:	4618      	mov	r0, r3
 8028d90:	3710      	adds	r7, #16
 8028d92:	46bd      	mov	sp, r7
 8028d94:	bd80      	pop	{r7, pc}

08028d96 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8028d96:	b590      	push	{r4, r7, lr}
 8028d98:	b08b      	sub	sp, #44	; 0x2c
 8028d9a:	af00      	add	r7, sp, #0
 8028d9c:	60f8      	str	r0, [r7, #12]
 8028d9e:	60b9      	str	r1, [r7, #8]
 8028da0:	4613      	mov	r3, r2
 8028da2:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8028da4:	68fb      	ldr	r3, [r7, #12]
 8028da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028da8:	68fb      	ldr	r3, [r7, #12]
 8028daa:	695b      	ldr	r3, [r3, #20]
 8028dac:	1ad3      	subs	r3, r2, r3
 8028dae:	109b      	asrs	r3, r3, #2
 8028db0:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8028db2:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8028db4:	68bb      	ldr	r3, [r7, #8]
 8028db6:	6a3a      	ldr	r2, [r7, #32]
 8028db8:	4413      	add	r3, r2
 8028dba:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8028dbc:	68fb      	ldr	r3, [r7, #12]
 8028dbe:	685a      	ldr	r2, [r3, #4]
 8028dc0:	69fb      	ldr	r3, [r7, #28]
 8028dc2:	005b      	lsls	r3, r3, #1
 8028dc4:	429a      	cmp	r2, r3
 8028dc6:	d92d      	bls.n	8028e24 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8028dc8:	68fb      	ldr	r3, [r7, #12]
 8028dca:	681a      	ldr	r2, [r3, #0]
 8028dcc:	68fb      	ldr	r3, [r7, #12]
 8028dce:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8028dd0:	69fb      	ldr	r3, [r7, #28]
 8028dd2:	1acb      	subs	r3, r1, r3
 8028dd4:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8028dd6:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8028dd8:	79fb      	ldrb	r3, [r7, #7]
 8028dda:	2b00      	cmp	r3, #0
 8028ddc:	d002      	beq.n	8028de4 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8028dde:	68bb      	ldr	r3, [r7, #8]
 8028de0:	009b      	lsls	r3, r3, #2
 8028de2:	e000      	b.n	8028de6 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8028de4:	2300      	movs	r3, #0
 8028de6:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8028de8:	4413      	add	r3, r2
 8028dea:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8028dec:	68fb      	ldr	r3, [r7, #12]
 8028dee:	695b      	ldr	r3, [r3, #20]
 8028df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028df2:	429a      	cmp	r2, r3
 8028df4:	d209      	bcs.n	8028e0a <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8028df6:	68fb      	ldr	r3, [r7, #12]
 8028df8:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8028dfa:	68fb      	ldr	r3, [r7, #12]
 8028dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8028dfe:	3304      	adds	r3, #4
 8028e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028e02:	4619      	mov	r1, r3
 8028e04:	f001 f882 	bl	8029f0c <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>
 8028e08:	e048      	b.n	8028e9c <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8028e0a:	68fb      	ldr	r3, [r7, #12]
 8028e0c:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8028e0e:	68fb      	ldr	r3, [r7, #12]
 8028e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8028e12:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8028e14:	6a3b      	ldr	r3, [r7, #32]
 8028e16:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8028e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028e1a:	4413      	add	r3, r2
 8028e1c:	461a      	mov	r2, r3
 8028e1e:	f001 f88d 	bl	8029f3c <_ZSt13copy_backwardIPP8IMUFrameS2_ET0_T_S4_S3_>
 8028e22:	e03b      	b.n	8028e9c <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8028e24:	68fb      	ldr	r3, [r7, #12]
 8028e26:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8028e28:	68fb      	ldr	r3, [r7, #12]
 8028e2a:	3304      	adds	r3, #4
 8028e2c:	f107 0208 	add.w	r2, r7, #8
 8028e30:	4611      	mov	r1, r2
 8028e32:	4618      	mov	r0, r3
 8028e34:	f7fc fc76 	bl	8025724 <_ZSt3maxIjERKT_S2_S2_>
 8028e38:	4603      	mov	r3, r0
 8028e3a:	681b      	ldr	r3, [r3, #0]
 8028e3c:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8028e3e:	3302      	adds	r3, #2
 8028e40:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8028e42:	68fb      	ldr	r3, [r7, #12]
 8028e44:	69b9      	ldr	r1, [r7, #24]
 8028e46:	4618      	mov	r0, r3
 8028e48:	f7fd fb62 	bl	8026510 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>
 8028e4c:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8028e4e:	69ba      	ldr	r2, [r7, #24]
 8028e50:	69fb      	ldr	r3, [r7, #28]
 8028e52:	1ad3      	subs	r3, r2, r3
 8028e54:	085b      	lsrs	r3, r3, #1
 8028e56:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8028e58:	79fb      	ldrb	r3, [r7, #7]
 8028e5a:	2b00      	cmp	r3, #0
 8028e5c:	d002      	beq.n	8028e64 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8028e5e:	68bb      	ldr	r3, [r7, #8]
 8028e60:	009b      	lsls	r3, r3, #2
 8028e62:	e000      	b.n	8028e66 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8028e64:	2300      	movs	r3, #0
 8028e66:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8028e68:	697a      	ldr	r2, [r7, #20]
 8028e6a:	4413      	add	r3, r2
 8028e6c:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8028e6e:	68fb      	ldr	r3, [r7, #12]
 8028e70:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8028e72:	68fb      	ldr	r3, [r7, #12]
 8028e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8028e76:	3304      	adds	r3, #4
 8028e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028e7a:	4619      	mov	r1, r3
 8028e7c:	f001 f846 	bl	8029f0c <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8028e80:	68f8      	ldr	r0, [r7, #12]
 8028e82:	68fb      	ldr	r3, [r7, #12]
 8028e84:	6819      	ldr	r1, [r3, #0]
 8028e86:	68fb      	ldr	r3, [r7, #12]
 8028e88:	685b      	ldr	r3, [r3, #4]
 8028e8a:	461a      	mov	r2, r3
 8028e8c:	f7fc fb44 	bl	8025518 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 8028e90:	68fb      	ldr	r3, [r7, #12]
 8028e92:	697a      	ldr	r2, [r7, #20]
 8028e94:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8028e96:	68fb      	ldr	r3, [r7, #12]
 8028e98:	69ba      	ldr	r2, [r7, #24]
 8028e9a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8028e9c:	68fb      	ldr	r3, [r7, #12]
 8028e9e:	3308      	adds	r3, #8
 8028ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028ea2:	4618      	mov	r0, r3
 8028ea4:	f7fd fb6b 	bl	802657e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8028ea8:	68fb      	ldr	r3, [r7, #12]
 8028eaa:	f103 0018 	add.w	r0, r3, #24
 8028eae:	6a3a      	ldr	r2, [r7, #32]
 8028eb0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8028eb4:	4413      	add	r3, r2
 8028eb6:	009b      	lsls	r3, r3, #2
 8028eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028eba:	4413      	add	r3, r2
 8028ebc:	4619      	mov	r1, r3
 8028ebe:	f7fd fb5e 	bl	802657e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8028ec2:	bf00      	nop
 8028ec4:	372c      	adds	r7, #44	; 0x2c
 8028ec6:	46bd      	mov	sp, r7
 8028ec8:	bd90      	pop	{r4, r7, pc}

08028eca <_ZNSt16allocator_traitsISaI8IMUFrameEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8028eca:	b580      	push	{r7, lr}
 8028ecc:	b082      	sub	sp, #8
 8028ece:	af00      	add	r7, sp, #0
 8028ed0:	6078      	str	r0, [r7, #4]
 8028ed2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8028ed4:	2200      	movs	r2, #0
 8028ed6:	6839      	ldr	r1, [r7, #0]
 8028ed8:	6878      	ldr	r0, [r7, #4]
 8028eda:	f001 f847 	bl	8029f6c <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv>
 8028ede:	4603      	mov	r3, r0
 8028ee0:	4618      	mov	r0, r3
 8028ee2:	3708      	adds	r7, #8
 8028ee4:	46bd      	mov	sp, r7
 8028ee6:	bd80      	pop	{r7, pc}

08028ee8 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8028ee8:	b480      	push	{r7}
 8028eea:	b083      	sub	sp, #12
 8028eec:	af00      	add	r7, sp, #0
 8028eee:	6078      	str	r0, [r7, #4]
 8028ef0:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8028ef2:	bf00      	nop
 8028ef4:	370c      	adds	r7, #12
 8028ef6:	46bd      	mov	sp, r7
 8028ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028efc:	4770      	bx	lr

08028efe <_ZNSt5dequeI14ServoDataFrameSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8028efe:	b580      	push	{r7, lr}
 8028f00:	b084      	sub	sp, #16
 8028f02:	af00      	add	r7, sp, #0
 8028f04:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8028f06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8028f0a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8028f0c:	6878      	ldr	r0, [r7, #4]
 8028f0e:	f001 f84e 	bl	8029fae <_ZNSt16allocator_traitsISaI14ServoDataFrameEE8max_sizeERKS1_>
 8028f12:	4603      	mov	r3, r0
 8028f14:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8028f16:	f107 0208 	add.w	r2, r7, #8
 8028f1a:	f107 030c 	add.w	r3, r7, #12
 8028f1e:	4611      	mov	r1, r2
 8028f20:	4618      	mov	r0, r3
 8028f22:	f7fe fbf7 	bl	8027714 <_ZSt3minIjERKT_S2_S2_>
 8028f26:	4603      	mov	r3, r0
 8028f28:	681b      	ldr	r3, [r3, #0]
      }
 8028f2a:	4618      	mov	r0, r3
 8028f2c:	3710      	adds	r7, #16
 8028f2e:	46bd      	mov	sp, r7
 8028f30:	bd80      	pop	{r7, pc}

08028f32 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8028f32:	b590      	push	{r4, r7, lr}
 8028f34:	b08b      	sub	sp, #44	; 0x2c
 8028f36:	af00      	add	r7, sp, #0
 8028f38:	60f8      	str	r0, [r7, #12]
 8028f3a:	60b9      	str	r1, [r7, #8]
 8028f3c:	4613      	mov	r3, r2
 8028f3e:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8028f40:	68fb      	ldr	r3, [r7, #12]
 8028f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028f44:	68fb      	ldr	r3, [r7, #12]
 8028f46:	695b      	ldr	r3, [r3, #20]
 8028f48:	1ad3      	subs	r3, r2, r3
 8028f4a:	109b      	asrs	r3, r3, #2
 8028f4c:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8028f4e:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8028f50:	68bb      	ldr	r3, [r7, #8]
 8028f52:	6a3a      	ldr	r2, [r7, #32]
 8028f54:	4413      	add	r3, r2
 8028f56:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8028f58:	68fb      	ldr	r3, [r7, #12]
 8028f5a:	685a      	ldr	r2, [r3, #4]
 8028f5c:	69fb      	ldr	r3, [r7, #28]
 8028f5e:	005b      	lsls	r3, r3, #1
 8028f60:	429a      	cmp	r2, r3
 8028f62:	d92d      	bls.n	8028fc0 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8028f64:	68fb      	ldr	r3, [r7, #12]
 8028f66:	681a      	ldr	r2, [r3, #0]
 8028f68:	68fb      	ldr	r3, [r7, #12]
 8028f6a:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8028f6c:	69fb      	ldr	r3, [r7, #28]
 8028f6e:	1acb      	subs	r3, r1, r3
 8028f70:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8028f72:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8028f74:	79fb      	ldrb	r3, [r7, #7]
 8028f76:	2b00      	cmp	r3, #0
 8028f78:	d002      	beq.n	8028f80 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8028f7a:	68bb      	ldr	r3, [r7, #8]
 8028f7c:	009b      	lsls	r3, r3, #2
 8028f7e:	e000      	b.n	8028f82 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8028f80:	2300      	movs	r3, #0
 8028f82:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8028f84:	4413      	add	r3, r2
 8028f86:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8028f88:	68fb      	ldr	r3, [r7, #12]
 8028f8a:	695b      	ldr	r3, [r3, #20]
 8028f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028f8e:	429a      	cmp	r2, r3
 8028f90:	d209      	bcs.n	8028fa6 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8028f92:	68fb      	ldr	r3, [r7, #12]
 8028f94:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8028f96:	68fb      	ldr	r3, [r7, #12]
 8028f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8028f9a:	3304      	adds	r3, #4
 8028f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028f9e:	4619      	mov	r1, r3
 8028fa0:	f001 f811 	bl	8029fc6 <_ZSt4copyIPP14ServoDataFrameS2_ET0_T_S4_S3_>
 8028fa4:	e048      	b.n	8029038 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8028fa6:	68fb      	ldr	r3, [r7, #12]
 8028fa8:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8028faa:	68fb      	ldr	r3, [r7, #12]
 8028fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8028fae:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8028fb0:	6a3b      	ldr	r3, [r7, #32]
 8028fb2:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8028fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028fb6:	4413      	add	r3, r2
 8028fb8:	461a      	mov	r2, r3
 8028fba:	f001 f81c 	bl	8029ff6 <_ZSt13copy_backwardIPP14ServoDataFrameS2_ET0_T_S4_S3_>
 8028fbe:	e03b      	b.n	8029038 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8028fc0:	68fb      	ldr	r3, [r7, #12]
 8028fc2:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8028fc4:	68fb      	ldr	r3, [r7, #12]
 8028fc6:	3304      	adds	r3, #4
 8028fc8:	f107 0208 	add.w	r2, r7, #8
 8028fcc:	4611      	mov	r1, r2
 8028fce:	4618      	mov	r0, r3
 8028fd0:	f7fc fba8 	bl	8025724 <_ZSt3maxIjERKT_S2_S2_>
 8028fd4:	4603      	mov	r3, r0
 8028fd6:	681b      	ldr	r3, [r3, #0]
 8028fd8:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8028fda:	3302      	adds	r3, #2
 8028fdc:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8028fde:	68fb      	ldr	r3, [r7, #12]
 8028fe0:	69b9      	ldr	r1, [r7, #24]
 8028fe2:	4618      	mov	r0, r3
 8028fe4:	f7fd fb56 	bl	8026694 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE15_M_allocate_mapEj>
 8028fe8:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8028fea:	69ba      	ldr	r2, [r7, #24]
 8028fec:	69fb      	ldr	r3, [r7, #28]
 8028fee:	1ad3      	subs	r3, r2, r3
 8028ff0:	085b      	lsrs	r3, r3, #1
 8028ff2:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8028ff4:	79fb      	ldrb	r3, [r7, #7]
 8028ff6:	2b00      	cmp	r3, #0
 8028ff8:	d002      	beq.n	8029000 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8028ffa:	68bb      	ldr	r3, [r7, #8]
 8028ffc:	009b      	lsls	r3, r3, #2
 8028ffe:	e000      	b.n	8029002 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8029000:	2300      	movs	r3, #0
 8029002:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8029004:	697a      	ldr	r2, [r7, #20]
 8029006:	4413      	add	r3, r2
 8029008:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 802900a:	68fb      	ldr	r3, [r7, #12]
 802900c:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 802900e:	68fb      	ldr	r3, [r7, #12]
 8029010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8029012:	3304      	adds	r3, #4
 8029014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029016:	4619      	mov	r1, r3
 8029018:	f000 ffd5 	bl	8029fc6 <_ZSt4copyIPP14ServoDataFrameS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 802901c:	68f8      	ldr	r0, [r7, #12]
 802901e:	68fb      	ldr	r3, [r7, #12]
 8029020:	6819      	ldr	r1, [r3, #0]
 8029022:	68fb      	ldr	r3, [r7, #12]
 8029024:	685b      	ldr	r3, [r3, #4]
 8029026:	461a      	mov	r2, r3
 8029028:	f7fc fb30 	bl	802568c <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 802902c:	68fb      	ldr	r3, [r7, #12]
 802902e:	697a      	ldr	r2, [r7, #20]
 8029030:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8029032:	68fb      	ldr	r3, [r7, #12]
 8029034:	69ba      	ldr	r2, [r7, #24]
 8029036:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8029038:	68fb      	ldr	r3, [r7, #12]
 802903a:	3308      	adds	r3, #8
 802903c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802903e:	4618      	mov	r0, r3
 8029040:	f7fd fb5f 	bl	8026702 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8029044:	68fb      	ldr	r3, [r7, #12]
 8029046:	f103 0018 	add.w	r0, r3, #24
 802904a:	6a3a      	ldr	r2, [r7, #32]
 802904c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8029050:	4413      	add	r3, r2
 8029052:	009b      	lsls	r3, r3, #2
 8029054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029056:	4413      	add	r3, r2
 8029058:	4619      	mov	r1, r3
 802905a:	f7fd fb52 	bl	8026702 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E11_M_set_nodeEPS2_>
    }
 802905e:	bf00      	nop
 8029060:	372c      	adds	r7, #44	; 0x2c
 8029062:	46bd      	mov	sp, r7
 8029064:	bd90      	pop	{r4, r7, pc}

08029066 <_ZNSt16allocator_traitsISaI14ServoDataFrameEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8029066:	b580      	push	{r7, lr}
 8029068:	b082      	sub	sp, #8
 802906a:	af00      	add	r7, sp, #0
 802906c:	6078      	str	r0, [r7, #4]
 802906e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8029070:	2200      	movs	r2, #0
 8029072:	6839      	ldr	r1, [r7, #0]
 8029074:	6878      	ldr	r0, [r7, #4]
 8029076:	f000 ffd6 	bl	802a026 <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameE8allocateEjPKv>
 802907a:	4603      	mov	r3, r0
 802907c:	4618      	mov	r0, r3
 802907e:	3708      	adds	r7, #8
 8029080:	46bd      	mov	sp, r7
 8029082:	bd80      	pop	{r7, pc}

08029084 <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8029084:	b480      	push	{r7}
 8029086:	b083      	sub	sp, #12
 8029088:	af00      	add	r7, sp, #0
 802908a:	6078      	str	r0, [r7, #4]
 802908c:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 802908e:	bf00      	nop
 8029090:	370c      	adds	r7, #12
 8029092:	46bd      	mov	sp, r7
 8029094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029098:	4770      	bx	lr

0802909a <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 802909a:	b580      	push	{r7, lr}
 802909c:	b082      	sub	sp, #8
 802909e:	af00      	add	r7, sp, #0
 80290a0:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80290a2:	6878      	ldr	r0, [r7, #4]
 80290a4:	f000 ffe0 	bl	802a068 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>
 80290a8:	4603      	mov	r3, r0
      }
 80290aa:	4618      	mov	r0, r3
 80290ac:	3708      	adds	r7, #8
 80290ae:	46bd      	mov	sp, r7
 80290b0:	bd80      	pop	{r7, pc}

080290b2 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 80290b2:	b590      	push	{r4, r7, lr}
 80290b4:	b085      	sub	sp, #20
 80290b6:	af00      	add	r7, sp, #0
 80290b8:	60f8      	str	r0, [r7, #12]
 80290ba:	60b9      	str	r1, [r7, #8]
 80290bc:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80290be:	68f8      	ldr	r0, [r7, #12]
 80290c0:	f000 ffde 	bl	802a080 <_ZSt12__miter_baseIPPjET_S2_>
 80290c4:	4604      	mov	r4, r0
 80290c6:	68b8      	ldr	r0, [r7, #8]
 80290c8:	f000 ffda 	bl	802a080 <_ZSt12__miter_baseIPPjET_S2_>
 80290cc:	4603      	mov	r3, r0
 80290ce:	687a      	ldr	r2, [r7, #4]
 80290d0:	4619      	mov	r1, r3
 80290d2:	4620      	mov	r0, r4
 80290d4:	f000 ffdf 	bl	802a096 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>
 80290d8:	4603      	mov	r3, r0
    }
 80290da:	4618      	mov	r0, r3
 80290dc:	3714      	adds	r7, #20
 80290de:	46bd      	mov	sp, r7
 80290e0:	bd90      	pop	{r4, r7, pc}

080290e2 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80290e2:	b590      	push	{r4, r7, lr}
 80290e4:	b085      	sub	sp, #20
 80290e6:	af00      	add	r7, sp, #0
 80290e8:	60f8      	str	r0, [r7, #12]
 80290ea:	60b9      	str	r1, [r7, #8]
 80290ec:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80290ee:	68f8      	ldr	r0, [r7, #12]
 80290f0:	f000 ffc6 	bl	802a080 <_ZSt12__miter_baseIPPjET_S2_>
 80290f4:	4604      	mov	r4, r0
 80290f6:	68b8      	ldr	r0, [r7, #8]
 80290f8:	f000 ffc2 	bl	802a080 <_ZSt12__miter_baseIPPjET_S2_>
 80290fc:	4603      	mov	r3, r0
 80290fe:	687a      	ldr	r2, [r7, #4]
 8029100:	4619      	mov	r1, r3
 8029102:	4620      	mov	r0, r4
 8029104:	f000 ffea 	bl	802a0dc <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>
 8029108:	4603      	mov	r3, r0
    }
 802910a:	4618      	mov	r0, r3
 802910c:	3714      	adds	r7, #20
 802910e:	46bd      	mov	sp, r7
 8029110:	bd90      	pop	{r4, r7, pc}

08029112 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8029112:	b580      	push	{r7, lr}
 8029114:	b084      	sub	sp, #16
 8029116:	af00      	add	r7, sp, #0
 8029118:	60f8      	str	r0, [r7, #12]
 802911a:	60b9      	str	r1, [r7, #8]
 802911c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802911e:	68f8      	ldr	r0, [r7, #12]
 8029120:	f000 ffff 	bl	802a122 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8029124:	4602      	mov	r2, r0
 8029126:	68bb      	ldr	r3, [r7, #8]
 8029128:	4293      	cmp	r3, r2
 802912a:	bf8c      	ite	hi
 802912c:	2301      	movhi	r3, #1
 802912e:	2300      	movls	r3, #0
 8029130:	b2db      	uxtb	r3, r3
 8029132:	2b00      	cmp	r3, #0
 8029134:	d001      	beq.n	802913a <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8029136:	f017 f82e 	bl	8040196 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 802913a:	68bb      	ldr	r3, [r7, #8]
 802913c:	009b      	lsls	r3, r3, #2
 802913e:	4618      	mov	r0, r3
 8029140:	f017 f818 	bl	8040174 <_Znwj>
 8029144:	4603      	mov	r3, r0
      }
 8029146:	4618      	mov	r0, r3
 8029148:	3710      	adds	r7, #16
 802914a:	46bd      	mov	sp, r7
 802914c:	bd80      	pop	{r7, pc}

0802914e <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>:
      deallocate(_Tp* __p, size_type __t)
 802914e:	b580      	push	{r7, lr}
 8029150:	b084      	sub	sp, #16
 8029152:	af00      	add	r7, sp, #0
 8029154:	60f8      	str	r0, [r7, #12]
 8029156:	60b9      	str	r1, [r7, #8]
 8029158:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 802915a:	687b      	ldr	r3, [r7, #4]
 802915c:	009b      	lsls	r3, r3, #2
 802915e:	4619      	mov	r1, r3
 8029160:	68b8      	ldr	r0, [r7, #8]
 8029162:	f017 f805 	bl	8040170 <_ZdlPvj>
      }
 8029166:	bf00      	nop
 8029168:	3710      	adds	r7, #16
 802916a:	46bd      	mov	sp, r7
 802916c:	bd80      	pop	{r7, pc}

0802916e <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 802916e:	b580      	push	{r7, lr}
 8029170:	b082      	sub	sp, #8
 8029172:	af00      	add	r7, sp, #0
 8029174:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8029176:	6878      	ldr	r0, [r7, #4]
 8029178:	f000 f856 	bl	8029228 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 802917c:	4603      	mov	r3, r0
 802917e:	4618      	mov	r0, r3
 8029180:	3708      	adds	r7, #8
 8029182:	46bd      	mov	sp, r7
 8029184:	bd80      	pop	{r7, pc}

08029186 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8029186:	b480      	push	{r7}
 8029188:	b083      	sub	sp, #12
 802918a:	af00      	add	r7, sp, #0
 802918c:	6078      	str	r0, [r7, #4]
    { return __it; }
 802918e:	687b      	ldr	r3, [r7, #4]
 8029190:	4618      	mov	r0, r3
 8029192:	370c      	adds	r7, #12
 8029194:	46bd      	mov	sp, r7
 8029196:	f85d 7b04 	ldr.w	r7, [sp], #4
 802919a:	4770      	bx	lr

0802919c <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 802919c:	b5b0      	push	{r4, r5, r7, lr}
 802919e:	b084      	sub	sp, #16
 80291a0:	af00      	add	r7, sp, #0
 80291a2:	60f8      	str	r0, [r7, #12]
 80291a4:	60b9      	str	r1, [r7, #8]
 80291a6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80291a8:	68f8      	ldr	r0, [r7, #12]
 80291aa:	f000 ffc6 	bl	802a13a <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 80291ae:	4604      	mov	r4, r0
 80291b0:	68b8      	ldr	r0, [r7, #8]
 80291b2:	f000 ffc2 	bl	802a13a <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 80291b6:	4605      	mov	r5, r0
 80291b8:	687b      	ldr	r3, [r7, #4]
 80291ba:	4618      	mov	r0, r3
 80291bc:	f000 ffbd 	bl	802a13a <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 80291c0:	4603      	mov	r3, r0
 80291c2:	461a      	mov	r2, r3
 80291c4:	4629      	mov	r1, r5
 80291c6:	4620      	mov	r0, r4
 80291c8:	f000 ffc2 	bl	802a150 <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 80291cc:	4602      	mov	r2, r0
 80291ce:	1d3b      	adds	r3, r7, #4
 80291d0:	4611      	mov	r1, r2
 80291d2:	4618      	mov	r0, r3
 80291d4:	f000 ffcc 	bl	802a170 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 80291d8:	4603      	mov	r3, r0
    }
 80291da:	4618      	mov	r0, r3
 80291dc:	3710      	adds	r7, #16
 80291de:	46bd      	mov	sp, r7
 80291e0:	bdb0      	pop	{r4, r5, r7, pc}

080291e2 <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80291e2:	b5b0      	push	{r4, r5, r7, lr}
 80291e4:	b084      	sub	sp, #16
 80291e6:	af00      	add	r7, sp, #0
 80291e8:	60f8      	str	r0, [r7, #12]
 80291ea:	60b9      	str	r1, [r7, #8]
 80291ec:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80291ee:	68f8      	ldr	r0, [r7, #12]
 80291f0:	f000 ffa3 	bl	802a13a <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 80291f4:	4604      	mov	r4, r0
 80291f6:	68b8      	ldr	r0, [r7, #8]
 80291f8:	f000 ff9f 	bl	802a13a <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 80291fc:	4605      	mov	r5, r0
 80291fe:	687b      	ldr	r3, [r7, #4]
 8029200:	4618      	mov	r0, r3
 8029202:	f000 ff9a 	bl	802a13a <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8029206:	4603      	mov	r3, r0
 8029208:	461a      	mov	r2, r3
 802920a:	4629      	mov	r1, r5
 802920c:	4620      	mov	r0, r4
 802920e:	f000 ffbb 	bl	802a188 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8029212:	4602      	mov	r2, r0
 8029214:	1d3b      	adds	r3, r7, #4
 8029216:	4611      	mov	r1, r2
 8029218:	4618      	mov	r0, r3
 802921a:	f000 ffa9 	bl	802a170 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 802921e:	4603      	mov	r3, r0
    }
 8029220:	4618      	mov	r0, r3
 8029222:	3710      	adds	r7, #16
 8029224:	46bd      	mov	sp, r7
 8029226:	bdb0      	pop	{r4, r5, r7, pc}

08029228 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8029228:	b480      	push	{r7}
 802922a:	b083      	sub	sp, #12
 802922c:	af00      	add	r7, sp, #0
 802922e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8029230:	4b03      	ldr	r3, [pc, #12]	; (8029240 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8029232:	4618      	mov	r0, r3
 8029234:	370c      	adds	r7, #12
 8029236:	46bd      	mov	sp, r7
 8029238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802923c:	4770      	bx	lr
 802923e:	bf00      	nop
 8029240:	06666666 	.word	0x06666666

08029244 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8029244:	b580      	push	{r7, lr}
 8029246:	b084      	sub	sp, #16
 8029248:	af00      	add	r7, sp, #0
 802924a:	60f8      	str	r0, [r7, #12]
 802924c:	60b9      	str	r1, [r7, #8]
 802924e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8029250:	68f8      	ldr	r0, [r7, #12]
 8029252:	f000 ffa9 	bl	802a1a8 <_ZNK9__gnu_cxx13new_allocatorIP8IMUFrameE11_M_max_sizeEv>
 8029256:	4602      	mov	r2, r0
 8029258:	68bb      	ldr	r3, [r7, #8]
 802925a:	4293      	cmp	r3, r2
 802925c:	bf8c      	ite	hi
 802925e:	2301      	movhi	r3, #1
 8029260:	2300      	movls	r3, #0
 8029262:	b2db      	uxtb	r3, r3
 8029264:	2b00      	cmp	r3, #0
 8029266:	d001      	beq.n	802926c <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8029268:	f016 ff95 	bl	8040196 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 802926c:	68bb      	ldr	r3, [r7, #8]
 802926e:	009b      	lsls	r3, r3, #2
 8029270:	4618      	mov	r0, r3
 8029272:	f016 ff7f 	bl	8040174 <_Znwj>
 8029276:	4603      	mov	r3, r0
      }
 8029278:	4618      	mov	r0, r3
 802927a:	3710      	adds	r7, #16
 802927c:	46bd      	mov	sp, r7
 802927e:	bd80      	pop	{r7, pc}

08029280 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8029280:	b580      	push	{r7, lr}
 8029282:	b084      	sub	sp, #16
 8029284:	af00      	add	r7, sp, #0
 8029286:	60f8      	str	r0, [r7, #12]
 8029288:	60b9      	str	r1, [r7, #8]
 802928a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 802928c:	687a      	ldr	r2, [r7, #4]
 802928e:	4613      	mov	r3, r2
 8029290:	005b      	lsls	r3, r3, #1
 8029292:	4413      	add	r3, r2
 8029294:	00db      	lsls	r3, r3, #3
 8029296:	4619      	mov	r1, r3
 8029298:	68b8      	ldr	r0, [r7, #8]
 802929a:	f016 ff69 	bl	8040170 <_ZdlPvj>
      }
 802929e:	bf00      	nop
 80292a0:	3710      	adds	r7, #16
 80292a2:	46bd      	mov	sp, r7
 80292a4:	bd80      	pop	{r7, pc}

080292a6 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80292a6:	b480      	push	{r7}
 80292a8:	b083      	sub	sp, #12
 80292aa:	af00      	add	r7, sp, #0
 80292ac:	6078      	str	r0, [r7, #4]
 80292ae:	687b      	ldr	r3, [r7, #4]
 80292b0:	4618      	mov	r0, r3
 80292b2:	370c      	adds	r7, #12
 80292b4:	46bd      	mov	sp, r7
 80292b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292ba:	4770      	bx	lr

080292bc <_ZN9__gnu_cxx13new_allocatorIP14ServoDataFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80292bc:	b580      	push	{r7, lr}
 80292be:	b084      	sub	sp, #16
 80292c0:	af00      	add	r7, sp, #0
 80292c2:	60f8      	str	r0, [r7, #12]
 80292c4:	60b9      	str	r1, [r7, #8]
 80292c6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80292c8:	68f8      	ldr	r0, [r7, #12]
 80292ca:	f000 ff79 	bl	802a1c0 <_ZNK9__gnu_cxx13new_allocatorIP14ServoDataFrameE11_M_max_sizeEv>
 80292ce:	4602      	mov	r2, r0
 80292d0:	68bb      	ldr	r3, [r7, #8]
 80292d2:	4293      	cmp	r3, r2
 80292d4:	bf8c      	ite	hi
 80292d6:	2301      	movhi	r3, #1
 80292d8:	2300      	movls	r3, #0
 80292da:	b2db      	uxtb	r3, r3
 80292dc:	2b00      	cmp	r3, #0
 80292de:	d001      	beq.n	80292e4 <_ZN9__gnu_cxx13new_allocatorIP14ServoDataFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80292e0:	f016 ff59 	bl	8040196 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80292e4:	68bb      	ldr	r3, [r7, #8]
 80292e6:	009b      	lsls	r3, r3, #2
 80292e8:	4618      	mov	r0, r3
 80292ea:	f016 ff43 	bl	8040174 <_Znwj>
 80292ee:	4603      	mov	r3, r0
      }
 80292f0:	4618      	mov	r0, r3
 80292f2:	3710      	adds	r7, #16
 80292f4:	46bd      	mov	sp, r7
 80292f6:	bd80      	pop	{r7, pc}

080292f8 <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80292f8:	b580      	push	{r7, lr}
 80292fa:	b084      	sub	sp, #16
 80292fc:	af00      	add	r7, sp, #0
 80292fe:	60f8      	str	r0, [r7, #12]
 8029300:	60b9      	str	r1, [r7, #8]
 8029302:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8029304:	687b      	ldr	r3, [r7, #4]
 8029306:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802930a:	fb02 f303 	mul.w	r3, r2, r3
 802930e:	4619      	mov	r1, r3
 8029310:	68b8      	ldr	r0, [r7, #8]
 8029312:	f016 ff2d 	bl	8040170 <_ZdlPvj>
      }
 8029316:	bf00      	nop
 8029318:	3710      	adds	r7, #16
 802931a:	46bd      	mov	sp, r7
 802931c:	bd80      	pop	{r7, pc}

0802931e <_ZN9__gnu_cxx13new_allocatorIP14ServoDataFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802931e:	b480      	push	{r7}
 8029320:	b083      	sub	sp, #12
 8029322:	af00      	add	r7, sp, #0
 8029324:	6078      	str	r0, [r7, #4]
 8029326:	687b      	ldr	r3, [r7, #4]
 8029328:	4618      	mov	r0, r3
 802932a:	370c      	adds	r7, #12
 802932c:	46bd      	mov	sp, r7
 802932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029332:	4770      	bx	lr

08029334 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8029334:	b480      	push	{r7}
 8029336:	b083      	sub	sp, #12
 8029338:	af00      	add	r7, sp, #0
 802933a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802933c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8029340:	4618      	mov	r0, r3
 8029342:	370c      	adds	r7, #12
 8029344:	46bd      	mov	sp, r7
 8029346:	f85d 7b04 	ldr.w	r7, [sp], #4
 802934a:	4770      	bx	lr

0802934c <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802934c:	b580      	push	{r7, lr}
 802934e:	b084      	sub	sp, #16
 8029350:	af00      	add	r7, sp, #0
 8029352:	60f8      	str	r0, [r7, #12]
 8029354:	60b9      	str	r1, [r7, #8]
 8029356:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8029358:	68f8      	ldr	r0, [r7, #12]
 802935a:	f000 ff3d 	bl	802a1d8 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>
 802935e:	4602      	mov	r2, r0
 8029360:	68bb      	ldr	r3, [r7, #8]
 8029362:	4293      	cmp	r3, r2
 8029364:	bf8c      	ite	hi
 8029366:	2301      	movhi	r3, #1
 8029368:	2300      	movls	r3, #0
 802936a:	b2db      	uxtb	r3, r3
 802936c:	2b00      	cmp	r3, #0
 802936e:	d001      	beq.n	8029374 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8029370:	f016 ff11 	bl	8040196 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8029374:	68bb      	ldr	r3, [r7, #8]
 8029376:	009b      	lsls	r3, r3, #2
 8029378:	4618      	mov	r0, r3
 802937a:	f016 fefb 	bl	8040174 <_Znwj>
 802937e:	4603      	mov	r3, r0
      }
 8029380:	4618      	mov	r0, r3
 8029382:	3710      	adds	r7, #16
 8029384:	46bd      	mov	sp, r7
 8029386:	bd80      	pop	{r7, pc}

08029388 <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8029388:	b480      	push	{r7}
 802938a:	b083      	sub	sp, #12
 802938c:	af00      	add	r7, sp, #0
 802938e:	6078      	str	r0, [r7, #4]
 8029390:	687b      	ldr	r3, [r7, #4]
 8029392:	4618      	mov	r0, r3
 8029394:	370c      	adds	r7, #12
 8029396:	46bd      	mov	sp, r7
 8029398:	f85d 7b04 	ldr.w	r7, [sp], #4
 802939c:	4770      	bx	lr

0802939e <_ZSt12__niter_baseIPK8IMUFrameET_S3_>:
    __niter_base(_Iterator __it)
 802939e:	b480      	push	{r7}
 80293a0:	b083      	sub	sp, #12
 80293a2:	af00      	add	r7, sp, #0
 80293a4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80293a6:	687b      	ldr	r3, [r7, #4]
 80293a8:	4618      	mov	r0, r3
 80293aa:	370c      	adds	r7, #12
 80293ac:	46bd      	mov	sp, r7
 80293ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293b2:	4770      	bx	lr

080293b4 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>:
    __niter_base(_Iterator __it)
 80293b4:	b580      	push	{r7, lr}
 80293b6:	b082      	sub	sp, #8
 80293b8:	af00      	add	r7, sp, #0
 80293ba:	6078      	str	r0, [r7, #4]
 80293bc:	6039      	str	r1, [r7, #0]
    { return __it; }
 80293be:	6839      	ldr	r1, [r7, #0]
 80293c0:	6878      	ldr	r0, [r7, #4]
 80293c2:	f7fb f943 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80293c6:	6878      	ldr	r0, [r7, #4]
 80293c8:	3708      	adds	r7, #8
 80293ca:	46bd      	mov	sp, r7
 80293cc:	bd80      	pop	{r7, pc}

080293ce <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80293ce:	b480      	push	{r7}
 80293d0:	b083      	sub	sp, #12
 80293d2:	af00      	add	r7, sp, #0
 80293d4:	6078      	str	r0, [r7, #4]
 80293d6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80293d8:	683b      	ldr	r3, [r7, #0]
 80293da:	681a      	ldr	r2, [r3, #0]
 80293dc:	687b      	ldr	r3, [r7, #4]
 80293de:	681b      	ldr	r3, [r3, #0]
 80293e0:	429a      	cmp	r2, r3
 80293e2:	da01      	bge.n	80293e8 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 80293e4:	683b      	ldr	r3, [r7, #0]
 80293e6:	e000      	b.n	80293ea <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 80293e8:	687b      	ldr	r3, [r7, #4]
    }
 80293ea:	4618      	mov	r0, r3
 80293ec:	370c      	adds	r7, #12
 80293ee:	46bd      	mov	sp, r7
 80293f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293f4:	4770      	bx	lr
	...

080293f8 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 80293f8:	b580      	push	{r7, lr}
 80293fa:	b088      	sub	sp, #32
 80293fc:	af00      	add	r7, sp, #0
 80293fe:	60f8      	str	r0, [r7, #12]
 8029400:	60b9      	str	r1, [r7, #8]
 8029402:	607a      	str	r2, [r7, #4]
 8029404:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8029406:	687a      	ldr	r2, [r7, #4]
 8029408:	68bb      	ldr	r3, [r7, #8]
 802940a:	1ad3      	subs	r3, r2, r3
 802940c:	10db      	asrs	r3, r3, #3
 802940e:	4a22      	ldr	r2, [pc, #136]	; (8029498 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8029410:	fb02 f303 	mul.w	r3, r2, r3
 8029414:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8029416:	697b      	ldr	r3, [r7, #20]
 8029418:	2b00      	cmp	r3, #0
 802941a:	dd34      	ble.n	8029486 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 802941c:	683b      	ldr	r3, [r7, #0]
 802941e:	689a      	ldr	r2, [r3, #8]
 8029420:	683b      	ldr	r3, [r7, #0]
 8029422:	681b      	ldr	r3, [r3, #0]
 8029424:	1ad3      	subs	r3, r2, r3
 8029426:	10db      	asrs	r3, r3, #3
 8029428:	4a1b      	ldr	r2, [pc, #108]	; (8029498 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 802942a:	fb02 f303 	mul.w	r3, r2, r3
 802942e:	61bb      	str	r3, [r7, #24]
 8029430:	f107 0218 	add.w	r2, r7, #24
 8029434:	f107 0314 	add.w	r3, r7, #20
 8029438:	4611      	mov	r1, r2
 802943a:	4618      	mov	r0, r3
 802943c:	f7ff ffc7 	bl	80293ce <_ZSt3minIiERKT_S2_S2_>
 8029440:	4603      	mov	r3, r0
	  const difference_type __clen
 8029442:	681b      	ldr	r3, [r3, #0]
 8029444:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8029446:	69fa      	ldr	r2, [r7, #28]
 8029448:	4613      	mov	r3, r2
 802944a:	005b      	lsls	r3, r3, #1
 802944c:	4413      	add	r3, r2
 802944e:	00db      	lsls	r3, r3, #3
 8029450:	461a      	mov	r2, r3
 8029452:	68bb      	ldr	r3, [r7, #8]
 8029454:	1899      	adds	r1, r3, r2
 8029456:	683b      	ldr	r3, [r7, #0]
 8029458:	681b      	ldr	r3, [r3, #0]
 802945a:	461a      	mov	r2, r3
 802945c:	68b8      	ldr	r0, [r7, #8]
 802945e:	f000 fec7 	bl	802a1f0 <_ZSt14__copy_move_a1ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>
				       __result._M_cur);

	  __first += __clen;
 8029462:	69fa      	ldr	r2, [r7, #28]
 8029464:	4613      	mov	r3, r2
 8029466:	005b      	lsls	r3, r3, #1
 8029468:	4413      	add	r3, r2
 802946a:	00db      	lsls	r3, r3, #3
 802946c:	461a      	mov	r2, r3
 802946e:	68bb      	ldr	r3, [r7, #8]
 8029470:	4413      	add	r3, r2
 8029472:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8029474:	69f9      	ldr	r1, [r7, #28]
 8029476:	6838      	ldr	r0, [r7, #0]
 8029478:	f000 fc74 	bl	8029d64 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	  __len -= __clen;
 802947c:	697a      	ldr	r2, [r7, #20]
 802947e:	69fb      	ldr	r3, [r7, #28]
 8029480:	1ad3      	subs	r3, r2, r3
 8029482:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8029484:	e7c7      	b.n	8029416 <_ZSt14__copy_move_a1ILb0EPK8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 8029486:	6839      	ldr	r1, [r7, #0]
 8029488:	68f8      	ldr	r0, [r7, #12]
 802948a:	f7fb f8df 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
    }
 802948e:	68f8      	ldr	r0, [r7, #12]
 8029490:	3720      	adds	r7, #32
 8029492:	46bd      	mov	sp, r7
 8029494:	bd80      	pop	{r7, pc}
 8029496:	bf00      	nop
 8029498:	aaaaaaab 	.word	0xaaaaaaab

0802949c <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802949c:	b580      	push	{r7, lr}
 802949e:	b084      	sub	sp, #16
 80294a0:	af00      	add	r7, sp, #0
 80294a2:	60f8      	str	r0, [r7, #12]
 80294a4:	60b9      	str	r1, [r7, #8]
 80294a6:	607a      	str	r2, [r7, #4]
    { return __res; }
 80294a8:	6879      	ldr	r1, [r7, #4]
 80294aa:	68f8      	ldr	r0, [r7, #12]
 80294ac:	f7fb f8ce 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80294b0:	68f8      	ldr	r0, [r7, #12]
 80294b2:	3710      	adds	r7, #16
 80294b4:	46bd      	mov	sp, r7
 80294b6:	bd80      	pop	{r7, pc}

080294b8 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 80294b8:	b590      	push	{r4, r7, lr}
 80294ba:	b085      	sub	sp, #20
 80294bc:	af00      	add	r7, sp, #0
 80294be:	6078      	str	r0, [r7, #4]
 80294c0:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 80294c2:	6878      	ldr	r0, [r7, #4]
 80294c4:	f7fd fed4 	bl	8027270 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 80294c8:	4604      	mov	r4, r0
 80294ca:	6878      	ldr	r0, [r7, #4]
 80294cc:	f7fb fd50 	bl	8024f70 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80294d0:	4603      	mov	r3, r0
 80294d2:	1ae3      	subs	r3, r4, r3
 80294d4:	683a      	ldr	r2, [r7, #0]
 80294d6:	429a      	cmp	r2, r3
 80294d8:	bf8c      	ite	hi
 80294da:	2301      	movhi	r3, #1
 80294dc:	2300      	movls	r3, #0
 80294de:	b2db      	uxtb	r3, r3
 80294e0:	2b00      	cmp	r3, #0
 80294e2:	d002      	beq.n	80294ea <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 80294e4:	4816      	ldr	r0, [pc, #88]	; (8029540 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x88>)
 80294e6:	f016 fe59 	bl	804019c <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 80294ea:	f7fd f966 	bl	80267ba <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 80294ee:	4602      	mov	r2, r0
 80294f0:	683b      	ldr	r3, [r7, #0]
 80294f2:	4413      	add	r3, r2
 80294f4:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 80294f6:	f7fd f960 	bl	80267ba <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 80294fa:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 80294fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8029500:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 8029502:	68b9      	ldr	r1, [r7, #8]
 8029504:	6878      	ldr	r0, [r7, #4]
 8029506:	f7fd fec4 	bl	8027292 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 802950a:	2301      	movs	r3, #1
 802950c:	60fb      	str	r3, [r7, #12]
 802950e:	68fa      	ldr	r2, [r7, #12]
 8029510:	68bb      	ldr	r3, [r7, #8]
 8029512:	429a      	cmp	r2, r3
 8029514:	d80f      	bhi.n	8029536 <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 8029516:	6879      	ldr	r1, [r7, #4]
 8029518:	687b      	ldr	r3, [r7, #4]
 802951a:	695a      	ldr	r2, [r3, #20]
 802951c:	68fb      	ldr	r3, [r7, #12]
 802951e:	009b      	lsls	r3, r3, #2
 8029520:	425b      	negs	r3, r3
 8029522:	18d4      	adds	r4, r2, r3
 8029524:	4608      	mov	r0, r1
 8029526:	f7fd fecc 	bl	80272c2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 802952a:	4603      	mov	r3, r0
 802952c:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 802952e:	68fb      	ldr	r3, [r7, #12]
 8029530:	3301      	adds	r3, #1
 8029532:	60fb      	str	r3, [r7, #12]
 8029534:	e7eb      	b.n	802950e <_ZNSt5dequeI8IMUFrameSaIS0_EE24_M_new_elements_at_frontEj+0x56>
    }
 8029536:	bf00      	nop
 8029538:	3714      	adds	r7, #20
 802953a:	46bd      	mov	sp, r7
 802953c:	bd90      	pop	{r4, r7, pc}
 802953e:	bf00      	nop
 8029540:	08041f04 	.word	0x08041f04

08029544 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8029544:	b580      	push	{r7, lr}
 8029546:	b084      	sub	sp, #16
 8029548:	af00      	add	r7, sp, #0
 802954a:	60f8      	str	r0, [r7, #12]
 802954c:	60b9      	str	r1, [r7, #8]
 802954e:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8029550:	68b9      	ldr	r1, [r7, #8]
 8029552:	68f8      	ldr	r0, [r7, #12]
 8029554:	f7fb f87a 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	__tmp -= __n;
 8029558:	6879      	ldr	r1, [r7, #4]
 802955a:	68f8      	ldr	r0, [r7, #12]
 802955c:	f000 fe58 	bl	802a210 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EmIEi>
	return __tmp;
 8029560:	bf00      	nop
      }
 8029562:	68f8      	ldr	r0, [r7, #12]
 8029564:	3710      	adds	r7, #16
 8029566:	46bd      	mov	sp, r7
 8029568:	bd80      	pop	{r7, pc}

0802956a <_ZSt18uninitialized_copyIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 802956a:	b580      	push	{r7, lr}
 802956c:	b08a      	sub	sp, #40	; 0x28
 802956e:	af00      	add	r7, sp, #0
 8029570:	60f8      	str	r0, [r7, #12]
 8029572:	60b9      	str	r1, [r7, #8]
 8029574:	607a      	str	r2, [r7, #4]
 8029576:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8029578:	2301      	movs	r3, #1
 802957a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 802957e:	f107 0314 	add.w	r3, r7, #20
 8029582:	6839      	ldr	r1, [r7, #0]
 8029584:	4618      	mov	r0, r3
 8029586:	f7fb f861 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802958a:	68f8      	ldr	r0, [r7, #12]
 802958c:	f107 0314 	add.w	r3, r7, #20
 8029590:	687a      	ldr	r2, [r7, #4]
 8029592:	68b9      	ldr	r1, [r7, #8]
 8029594:	f000 fe4c 	bl	802a230 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_>
    }
 8029598:	68f8      	ldr	r0, [r7, #12]
 802959a:	3728      	adds	r7, #40	; 0x28
 802959c:	46bd      	mov	sp, r7
 802959e:	bd80      	pop	{r7, pc}

080295a0 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 80295a0:	b590      	push	{r4, r7, lr}
 80295a2:	b085      	sub	sp, #20
 80295a4:	af00      	add	r7, sp, #0
 80295a6:	6078      	str	r0, [r7, #4]
 80295a8:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 80295aa:	6878      	ldr	r0, [r7, #4]
 80295ac:	f7fd fe60 	bl	8027270 <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 80295b0:	4604      	mov	r4, r0
 80295b2:	6878      	ldr	r0, [r7, #4]
 80295b4:	f7fb fcdc 	bl	8024f70 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80295b8:	4603      	mov	r3, r0
 80295ba:	1ae3      	subs	r3, r4, r3
 80295bc:	683a      	ldr	r2, [r7, #0]
 80295be:	429a      	cmp	r2, r3
 80295c0:	bf8c      	ite	hi
 80295c2:	2301      	movhi	r3, #1
 80295c4:	2300      	movls	r3, #0
 80295c6:	b2db      	uxtb	r3, r3
 80295c8:	2b00      	cmp	r3, #0
 80295ca:	d002      	beq.n	80295d2 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 80295cc:	4815      	ldr	r0, [pc, #84]	; (8029624 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x84>)
 80295ce:	f016 fde5 	bl	804019c <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 80295d2:	f7fd f8f2 	bl	80267ba <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 80295d6:	4602      	mov	r2, r0
 80295d8:	683b      	ldr	r3, [r7, #0]
 80295da:	4413      	add	r3, r2
 80295dc:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 80295de:	f7fd f8ec 	bl	80267ba <_ZNSt5dequeI8IMUFrameSaIS0_EE14_S_buffer_sizeEv>
 80295e2:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 80295e4:	fbb4 f3f3 	udiv	r3, r4, r3
 80295e8:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 80295ea:	68b9      	ldr	r1, [r7, #8]
 80295ec:	6878      	ldr	r0, [r7, #4]
 80295ee:	f000 fe46 	bl	802a27e <_ZNSt5dequeI8IMUFrameSaIS0_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 80295f2:	2301      	movs	r3, #1
 80295f4:	60fb      	str	r3, [r7, #12]
 80295f6:	68fa      	ldr	r2, [r7, #12]
 80295f8:	68bb      	ldr	r3, [r7, #8]
 80295fa:	429a      	cmp	r2, r3
 80295fc:	d80e      	bhi.n	802961c <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 80295fe:	6879      	ldr	r1, [r7, #4]
 8029600:	687b      	ldr	r3, [r7, #4]
 8029602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8029604:	68fb      	ldr	r3, [r7, #12]
 8029606:	009b      	lsls	r3, r3, #2
 8029608:	18d4      	adds	r4, r2, r3
 802960a:	4608      	mov	r0, r1
 802960c:	f7fd fe59 	bl	80272c2 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8029610:	4603      	mov	r3, r0
 8029612:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8029614:	68fb      	ldr	r3, [r7, #12]
 8029616:	3301      	adds	r3, #1
 8029618:	60fb      	str	r3, [r7, #12]
 802961a:	e7ec      	b.n	80295f6 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_new_elements_at_backEj+0x56>
    }
 802961c:	bf00      	nop
 802961e:	3714      	adds	r7, #20
 8029620:	46bd      	mov	sp, r7
 8029622:	bd90      	pop	{r4, r7, pc}
 8029624:	08041f24 	.word	0x08041f24

08029628 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8029628:	b590      	push	{r4, r7, lr}
 802962a:	b09b      	sub	sp, #108	; 0x6c
 802962c:	af02      	add	r7, sp, #8
 802962e:	60f8      	str	r0, [r7, #12]
 8029630:	60b9      	str	r1, [r7, #8]
 8029632:	607a      	str	r2, [r7, #4]
 8029634:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
					 __result, __alloc);
 8029636:	f107 0320 	add.w	r3, r7, #32
 802963a:	68b9      	ldr	r1, [r7, #8]
 802963c:	4618      	mov	r0, r3
 802963e:	f7fb f805 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8029642:	f107 0310 	add.w	r3, r7, #16
 8029646:	f107 0220 	add.w	r2, r7, #32
 802964a:	4611      	mov	r1, r2
 802964c:	4618      	mov	r0, r3
 802964e:	f000 fe31 	bl	802a2b4 <_ZSt18make_move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EESt13move_iteratorIT_ES6_>
 8029652:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8029656:	6879      	ldr	r1, [r7, #4]
 8029658:	4618      	mov	r0, r3
 802965a:	f7fa fff7 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802965e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029662:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8029666:	4611      	mov	r1, r2
 8029668:	4618      	mov	r0, r3
 802966a:	f000 fe23 	bl	802a2b4 <_ZSt18make_move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EESt13move_iteratorIT_ES6_>
 802966e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8029672:	6839      	ldr	r1, [r7, #0]
 8029674:	4618      	mov	r0, r3
 8029676:	f7fa ffe9 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802967a:	68f8      	ldr	r0, [r7, #12]
 802967c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8029680:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8029684:	f107 0110 	add.w	r1, r7, #16
 8029688:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802968a:	9300      	str	r3, [sp, #0]
 802968c:	4623      	mov	r3, r4
 802968e:	f000 fe3a 	bl	802a306 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_S2_ET0_T_S8_S7_RSaIT1_E>
    }
 8029692:	68f8      	ldr	r0, [r7, #12]
 8029694:	3764      	adds	r7, #100	; 0x64
 8029696:	46bd      	mov	sp, r7
 8029698:	bd90      	pop	{r4, r7, pc}

0802969a <_ZSt4moveISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>:
    move(_II __first, _II __last, _OI __result)
 802969a:	b580      	push	{r7, lr}
 802969c:	b098      	sub	sp, #96	; 0x60
 802969e:	af00      	add	r7, sp, #0
 80296a0:	60f8      	str	r0, [r7, #12]
 80296a2:	60b9      	str	r1, [r7, #8]
 80296a4:	607a      	str	r2, [r7, #4]
 80296a6:	603b      	str	r3, [r7, #0]
				      std::__miter_base(__last), __result);
 80296a8:	f107 0320 	add.w	r3, r7, #32
 80296ac:	68b9      	ldr	r1, [r7, #8]
 80296ae:	4618      	mov	r0, r3
 80296b0:	f7fa ffcc 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80296b4:	f107 0310 	add.w	r3, r7, #16
 80296b8:	f107 0220 	add.w	r2, r7, #32
 80296bc:	4611      	mov	r1, r2
 80296be:	4618      	mov	r0, r3
 80296c0:	f000 fe47 	bl	802a352 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 80296c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80296c8:	6879      	ldr	r1, [r7, #4]
 80296ca:	4618      	mov	r0, r3
 80296cc:	f7fa ffbe 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80296d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80296d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80296d8:	4611      	mov	r1, r2
 80296da:	4618      	mov	r0, r3
 80296dc:	f000 fe39 	bl	802a352 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 80296e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80296e4:	6839      	ldr	r1, [r7, #0]
 80296e6:	4618      	mov	r0, r3
 80296e8:	f7fa ffb0 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80296ec:	68f8      	ldr	r0, [r7, #12]
 80296ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80296f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80296f6:	f107 0110 	add.w	r1, r7, #16
 80296fa:	f000 fe37 	bl	802a36c <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>
    }
 80296fe:	68f8      	ldr	r0, [r7, #12]
 8029700:	3760      	adds	r7, #96	; 0x60
 8029702:	46bd      	mov	sp, r7
 8029704:	bd80      	pop	{r7, pc}

08029706 <_ZSt7advanceIPK8IMUFrameiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8029706:	b590      	push	{r4, r7, lr}
 8029708:	b085      	sub	sp, #20
 802970a:	af00      	add	r7, sp, #0
 802970c:	6078      	str	r0, [r7, #4]
 802970e:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8029710:	683b      	ldr	r3, [r7, #0]
 8029712:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8029714:	6878      	ldr	r0, [r7, #4]
 8029716:	f7fd f9a0 	bl	8026a5a <_ZSt19__iterator_categoryIPK8IMUFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 802971a:	4622      	mov	r2, r4
 802971c:	68f9      	ldr	r1, [r7, #12]
 802971e:	6878      	ldr	r0, [r7, #4]
 8029720:	f7fe f9ee 	bl	8027b00 <_ZSt9__advanceIPK8IMUFrameiEvRT_T0_St26random_access_iterator_tag>
    }
 8029724:	bf00      	nop
 8029726:	3714      	adds	r7, #20
 8029728:	46bd      	mov	sp, r7
 802972a:	bd90      	pop	{r4, r7, pc}

0802972c <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorI8IMUFrameRS1_PS1_EPKS1_S4_SaIS1_EET1_T_S9_T0_SA_S8_RT2_>:
  //  copies [first2, last2) into
  //  [result, result + (last1 - first1) + (last2 - first2)).
  template<typename _InputIterator1, typename _InputIterator2,
	   typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
 802972c:	b590      	push	{r4, r7, lr}
 802972e:	b0a3      	sub	sp, #140	; 0x8c
 8029730:	af02      	add	r7, sp, #8
 8029732:	60f8      	str	r0, [r7, #12]
 8029734:	60b9      	str	r1, [r7, #8]
 8029736:	607a      	str	r2, [r7, #4]
 8029738:	603b      	str	r3, [r7, #0]
			      _InputIterator2 __first2,
			      _InputIterator2 __last2,
			      _ForwardIterator __result,
			      _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 802973a:	f107 0320 	add.w	r3, r7, #32
 802973e:	68b9      	ldr	r1, [r7, #8]
 8029740:	4618      	mov	r0, r3
 8029742:	f7fa ff83 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8029746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802974a:	6879      	ldr	r1, [r7, #4]
 802974c:	4618      	mov	r0, r3
 802974e:	f7fa ff7d 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8029752:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8029756:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 802975a:	4618      	mov	r0, r3
 802975c:	f7fa ff76 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8029760:	f107 0010 	add.w	r0, r7, #16
 8029764:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8029768:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802976c:	f107 0120 	add.w	r1, r7, #32
 8029770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029774:	9300      	str	r3, [sp, #0]
 8029776:	4623      	mov	r3, r4
 8029778:	f7ff ff56 	bl	8029628 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
							   __result,
							   __alloc);
      __try
	{
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 802977c:	f107 0210 	add.w	r2, r7, #16
 8029780:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8029784:	4611      	mov	r1, r2
 8029786:	4618      	mov	r0, r3
 8029788:	f7fa ff60 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802978c:	68f8      	ldr	r0, [r7, #12]
 802978e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8029792:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029796:	9300      	str	r3, [sp, #0]
 8029798:	4613      	mov	r3, r2
 802979a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802979e:	6839      	ldr	r1, [r7, #0]
 80297a0:	f7fe fa2a 	bl	8027bf8 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
      __catch(...)
	{
	  std::_Destroy(__result, __mid, __alloc);
	  __throw_exception_again;
	}
    }
 80297a4:	68f8      	ldr	r0, [r7, #12]
 80297a6:	3784      	adds	r7, #132	; 0x84
 80297a8:	46bd      	mov	sp, r7
 80297aa:	bd90      	pop	{r4, r7, pc}

080297ac <_ZSt13move_backwardISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET0_T_S6_S5_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80297ac:	b580      	push	{r7, lr}
 80297ae:	b098      	sub	sp, #96	; 0x60
 80297b0:	af00      	add	r7, sp, #0
 80297b2:	60f8      	str	r0, [r7, #12]
 80297b4:	60b9      	str	r1, [r7, #8]
 80297b6:	607a      	str	r2, [r7, #4]
 80297b8:	603b      	str	r3, [r7, #0]
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
					       std::__miter_base(__last),
					       __result);
 80297ba:	f107 0320 	add.w	r3, r7, #32
 80297be:	68b9      	ldr	r1, [r7, #8]
 80297c0:	4618      	mov	r0, r3
 80297c2:	f7fa ff43 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80297c6:	f107 0310 	add.w	r3, r7, #16
 80297ca:	f107 0220 	add.w	r2, r7, #32
 80297ce:	4611      	mov	r1, r2
 80297d0:	4618      	mov	r0, r3
 80297d2:	f000 fdbe 	bl	802a352 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 80297d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80297da:	6879      	ldr	r1, [r7, #4]
 80297dc:	4618      	mov	r0, r3
 80297de:	f7fa ff35 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80297e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80297e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80297ea:	4611      	mov	r1, r2
 80297ec:	4618      	mov	r0, r3
 80297ee:	f000 fdb0 	bl	802a352 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 80297f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80297f6:	6839      	ldr	r1, [r7, #0]
 80297f8:	4618      	mov	r0, r3
 80297fa:	f7fa ff27 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 80297fe:	68f8      	ldr	r0, [r7, #12]
 8029800:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8029804:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8029808:	f107 0110 	add.w	r1, r7, #16
 802980c:	f000 fdf4 	bl	802a3f8 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>
    }
 8029810:	68f8      	ldr	r0, [r7, #12]
 8029812:	3760      	adds	r7, #96	; 0x60
 8029814:	46bd      	mov	sp, r7
 8029816:	bd80      	pop	{r7, pc}

08029818 <_ZSt25__uninitialized_copy_moveIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES6_SaIS0_EET1_T_S9_T0_SA_S8_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 8029818:	b590      	push	{r4, r7, lr}
 802981a:	b0a3      	sub	sp, #140	; 0x8c
 802981c:	af02      	add	r7, sp, #8
 802981e:	60f8      	str	r0, [r7, #12]
 8029820:	60b9      	str	r1, [r7, #8]
 8029822:	607a      	str	r2, [r7, #4]
 8029824:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 8029826:	f107 0320 	add.w	r3, r7, #32
 802982a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 802982e:	4618      	mov	r0, r3
 8029830:	f7fa ff0c 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8029834:	f107 0010 	add.w	r0, r7, #16
 8029838:	f107 0220 	add.w	r2, r7, #32
 802983c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029840:	9300      	str	r3, [sp, #0]
 8029842:	4613      	mov	r3, r2
 8029844:	687a      	ldr	r2, [r7, #4]
 8029846:	68b9      	ldr	r1, [r7, #8]
 8029848:	f7fe f9d6 	bl	8027bf8 <_ZSt22__uninitialized_copy_aIPK8IMUFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 802984c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029850:	6839      	ldr	r1, [r7, #0]
 8029852:	4618      	mov	r0, r3
 8029854:	f7fa fefa 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8029858:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802985c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8029860:	4618      	mov	r0, r3
 8029862:	f7fa fef3 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8029866:	f107 0210 	add.w	r2, r7, #16
 802986a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802986e:	4611      	mov	r1, r2
 8029870:	4618      	mov	r0, r3
 8029872:	f7fa feeb 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8029876:	68f8      	ldr	r0, [r7, #12]
 8029878:	f107 0450 	add.w	r4, r7, #80	; 0x50
 802987c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8029880:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029888:	9300      	str	r3, [sp, #0]
 802988a:	4623      	mov	r3, r4
 802988c:	f7ff fecc 	bl	8029628 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
    }
 8029890:	68f8      	ldr	r0, [r7, #12]
 8029892:	3784      	adds	r7, #132	; 0x84
 8029894:	46bd      	mov	sp, r7
 8029896:	bd90      	pop	{r4, r7, pc}

08029898 <_ZSt12__niter_baseIPK14ServoDataFrameET_S3_>:
    __niter_base(_Iterator __it)
 8029898:	b480      	push	{r7}
 802989a:	b083      	sub	sp, #12
 802989c:	af00      	add	r7, sp, #0
 802989e:	6078      	str	r0, [r7, #4]
    { return __it; }
 80298a0:	687b      	ldr	r3, [r7, #4]
 80298a2:	4618      	mov	r0, r3
 80298a4:	370c      	adds	r7, #12
 80298a6:	46bd      	mov	sp, r7
 80298a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298ac:	4770      	bx	lr

080298ae <_ZSt12__niter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>:
    __niter_base(_Iterator __it)
 80298ae:	b580      	push	{r7, lr}
 80298b0:	b082      	sub	sp, #8
 80298b2:	af00      	add	r7, sp, #0
 80298b4:	6078      	str	r0, [r7, #4]
 80298b6:	6039      	str	r1, [r7, #0]
    { return __it; }
 80298b8:	6839      	ldr	r1, [r7, #0]
 80298ba:	6878      	ldr	r0, [r7, #4]
 80298bc:	f7fa ff18 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 80298c0:	6878      	ldr	r0, [r7, #4]
 80298c2:	3708      	adds	r7, #8
 80298c4:	46bd      	mov	sp, r7
 80298c6:	bd80      	pop	{r7, pc}

080298c8 <_ZSt14__copy_move_a1ILb0EPK14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:
    __copy_move_a1(_II __first, _II __last,
 80298c8:	b580      	push	{r7, lr}
 80298ca:	b088      	sub	sp, #32
 80298cc:	af00      	add	r7, sp, #0
 80298ce:	60f8      	str	r0, [r7, #12]
 80298d0:	60b9      	str	r1, [r7, #8]
 80298d2:	607a      	str	r2, [r7, #4]
 80298d4:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 80298d6:	687a      	ldr	r2, [r7, #4]
 80298d8:	68bb      	ldr	r3, [r7, #8]
 80298da:	1ad3      	subs	r3, r2, r3
 80298dc:	109b      	asrs	r3, r3, #2
 80298de:	4a21      	ldr	r2, [pc, #132]	; (8029964 <_ZSt14__copy_move_a1ILb0EPK14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x9c>)
 80298e0:	fb02 f303 	mul.w	r3, r2, r3
 80298e4:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80298e6:	697b      	ldr	r3, [r7, #20]
 80298e8:	2b00      	cmp	r3, #0
 80298ea:	dd32      	ble.n	8029952 <_ZSt14__copy_move_a1ILb0EPK14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8a>
	    = std::min(__len, __result._M_last - __result._M_cur);
 80298ec:	683b      	ldr	r3, [r7, #0]
 80298ee:	689a      	ldr	r2, [r3, #8]
 80298f0:	683b      	ldr	r3, [r7, #0]
 80298f2:	681b      	ldr	r3, [r3, #0]
 80298f4:	1ad3      	subs	r3, r2, r3
 80298f6:	109b      	asrs	r3, r3, #2
 80298f8:	4a1a      	ldr	r2, [pc, #104]	; (8029964 <_ZSt14__copy_move_a1ILb0EPK14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x9c>)
 80298fa:	fb02 f303 	mul.w	r3, r2, r3
 80298fe:	61bb      	str	r3, [r7, #24]
 8029900:	f107 0218 	add.w	r2, r7, #24
 8029904:	f107 0314 	add.w	r3, r7, #20
 8029908:	4611      	mov	r1, r2
 802990a:	4618      	mov	r0, r3
 802990c:	f7ff fd5f 	bl	80293ce <_ZSt3minIiERKT_S2_S2_>
 8029910:	4603      	mov	r3, r0
	  const difference_type __clen
 8029912:	681b      	ldr	r3, [r3, #0]
 8029914:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8029916:	69fb      	ldr	r3, [r7, #28]
 8029918:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802991c:	fb02 f303 	mul.w	r3, r2, r3
 8029920:	68ba      	ldr	r2, [r7, #8]
 8029922:	18d1      	adds	r1, r2, r3
 8029924:	683b      	ldr	r3, [r7, #0]
 8029926:	681b      	ldr	r3, [r3, #0]
 8029928:	461a      	mov	r2, r3
 802992a:	68b8      	ldr	r0, [r7, #8]
 802992c:	f000 fdaa 	bl	802a484 <_ZSt14__copy_move_a1ILb0EPK14ServoDataFramePS0_ET1_T0_S5_S4_>
	  __first += __clen;
 8029930:	69fb      	ldr	r3, [r7, #28]
 8029932:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8029936:	fb02 f303 	mul.w	r3, r2, r3
 802993a:	68ba      	ldr	r2, [r7, #8]
 802993c:	4413      	add	r3, r2
 802993e:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8029940:	69f9      	ldr	r1, [r7, #28]
 8029942:	6838      	ldr	r0, [r7, #0]
 8029944:	f000 fa72 	bl	8029e2c <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi>
	  __len -= __clen;
 8029948:	697a      	ldr	r2, [r7, #20]
 802994a:	69fb      	ldr	r3, [r7, #28]
 802994c:	1ad3      	subs	r3, r2, r3
 802994e:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8029950:	e7c9      	b.n	80298e6 <_ZSt14__copy_move_a1ILb0EPK14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
      return __result;
 8029952:	6839      	ldr	r1, [r7, #0]
 8029954:	68f8      	ldr	r0, [r7, #12]
 8029956:	f7fa fecb 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
    }
 802995a:	68f8      	ldr	r0, [r7, #12]
 802995c:	3720      	adds	r7, #32
 802995e:	46bd      	mov	sp, r7
 8029960:	bd80      	pop	{r7, pc}
 8029962:	bf00      	nop
 8029964:	07a44c6b 	.word	0x07a44c6b

08029968 <_ZSt12__niter_wrapISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_RKS5_S5_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8029968:	b580      	push	{r7, lr}
 802996a:	b084      	sub	sp, #16
 802996c:	af00      	add	r7, sp, #0
 802996e:	60f8      	str	r0, [r7, #12]
 8029970:	60b9      	str	r1, [r7, #8]
 8029972:	607a      	str	r2, [r7, #4]
    { return __res; }
 8029974:	6879      	ldr	r1, [r7, #4]
 8029976:	68f8      	ldr	r0, [r7, #12]
 8029978:	f7fa feba 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802997c:	68f8      	ldr	r0, [r7, #12]
 802997e:	3710      	adds	r7, #16
 8029980:	46bd      	mov	sp, r7
 8029982:	bd80      	pop	{r7, pc}

08029984 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8029984:	b590      	push	{r4, r7, lr}
 8029986:	b085      	sub	sp, #20
 8029988:	af00      	add	r7, sp, #0
 802998a:	6078      	str	r0, [r7, #4]
 802998c:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 802998e:	6878      	ldr	r0, [r7, #4]
 8029990:	f7fd fd2f 	bl	80273f2 <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE8max_sizeEv>
 8029994:	4604      	mov	r4, r0
 8029996:	6878      	ldr	r0, [r7, #4]
 8029998:	f7fb fb31 	bl	8024ffe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE4sizeEv>
 802999c:	4603      	mov	r3, r0
 802999e:	1ae3      	subs	r3, r4, r3
 80299a0:	683a      	ldr	r2, [r7, #0]
 80299a2:	429a      	cmp	r2, r3
 80299a4:	bf8c      	ite	hi
 80299a6:	2301      	movhi	r3, #1
 80299a8:	2300      	movls	r3, #0
 80299aa:	b2db      	uxtb	r3, r3
 80299ac:	2b00      	cmp	r3, #0
 80299ae:	d002      	beq.n	80299b6 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 80299b0:	4816      	ldr	r0, [pc, #88]	; (8029a0c <_ZNSt5dequeI14ServoDataFrameSaIS0_EE24_M_new_elements_at_frontEj+0x88>)
 80299b2:	f016 fbf3 	bl	804019c <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 80299b6:	f7fc ff08 	bl	80267ca <_ZNSt5dequeI14ServoDataFrameSaIS0_EE14_S_buffer_sizeEv>
 80299ba:	4602      	mov	r2, r0
 80299bc:	683b      	ldr	r3, [r7, #0]
 80299be:	4413      	add	r3, r2
 80299c0:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 80299c2:	f7fc ff02 	bl	80267ca <_ZNSt5dequeI14ServoDataFrameSaIS0_EE14_S_buffer_sizeEv>
 80299c6:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 80299c8:	fbb4 f3f3 	udiv	r3, r4, r3
 80299cc:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 80299ce:	68b9      	ldr	r1, [r7, #8]
 80299d0:	6878      	ldr	r0, [r7, #4]
 80299d2:	f7fd fd1f 	bl	8027414 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 80299d6:	2301      	movs	r3, #1
 80299d8:	60fb      	str	r3, [r7, #12]
 80299da:	68fa      	ldr	r2, [r7, #12]
 80299dc:	68bb      	ldr	r3, [r7, #8]
 80299de:	429a      	cmp	r2, r3
 80299e0:	d80f      	bhi.n	8029a02 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 80299e2:	6879      	ldr	r1, [r7, #4]
 80299e4:	687b      	ldr	r3, [r7, #4]
 80299e6:	695a      	ldr	r2, [r3, #20]
 80299e8:	68fb      	ldr	r3, [r7, #12]
 80299ea:	009b      	lsls	r3, r3, #2
 80299ec:	425b      	negs	r3, r3
 80299ee:	18d4      	adds	r4, r2, r3
 80299f0:	4608      	mov	r0, r1
 80299f2:	f7fd fd27 	bl	8027444 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_M_allocate_nodeEv>
 80299f6:	4603      	mov	r3, r0
 80299f8:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 80299fa:	68fb      	ldr	r3, [r7, #12]
 80299fc:	3301      	adds	r3, #1
 80299fe:	60fb      	str	r3, [r7, #12]
 8029a00:	e7eb      	b.n	80299da <_ZNSt5dequeI14ServoDataFrameSaIS0_EE24_M_new_elements_at_frontEj+0x56>
    }
 8029a02:	bf00      	nop
 8029a04:	3714      	adds	r7, #20
 8029a06:	46bd      	mov	sp, r7
 8029a08:	bd90      	pop	{r4, r7, pc}
 8029a0a:	bf00      	nop
 8029a0c:	08041f04 	.word	0x08041f04

08029a10 <_ZStmiRKSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8029a10:	b580      	push	{r7, lr}
 8029a12:	b084      	sub	sp, #16
 8029a14:	af00      	add	r7, sp, #0
 8029a16:	60f8      	str	r0, [r7, #12]
 8029a18:	60b9      	str	r1, [r7, #8]
 8029a1a:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8029a1c:	68b9      	ldr	r1, [r7, #8]
 8029a1e:	68f8      	ldr	r0, [r7, #12]
 8029a20:	f7fa fe66 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
	__tmp -= __n;
 8029a24:	6879      	ldr	r1, [r7, #4]
 8029a26:	68f8      	ldr	r0, [r7, #12]
 8029a28:	f000 fd3c 	bl	802a4a4 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EmIEi>
	return __tmp;
 8029a2c:	bf00      	nop
      }
 8029a2e:	68f8      	ldr	r0, [r7, #12]
 8029a30:	3710      	adds	r7, #16
 8029a32:	46bd      	mov	sp, r7
 8029a34:	bd80      	pop	{r7, pc}

08029a36 <_ZSt18uninitialized_copyIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8029a36:	b580      	push	{r7, lr}
 8029a38:	b08a      	sub	sp, #40	; 0x28
 8029a3a:	af00      	add	r7, sp, #0
 8029a3c:	60f8      	str	r0, [r7, #12]
 8029a3e:	60b9      	str	r1, [r7, #8]
 8029a40:	607a      	str	r2, [r7, #4]
 8029a42:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8029a44:	2301      	movs	r3, #1
 8029a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8029a4a:	f107 0314 	add.w	r3, r7, #20
 8029a4e:	6839      	ldr	r1, [r7, #0]
 8029a50:	4618      	mov	r0, r3
 8029a52:	f7fa fe4d 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029a56:	68f8      	ldr	r0, [r7, #12]
 8029a58:	f107 0314 	add.w	r3, r7, #20
 8029a5c:	687a      	ldr	r2, [r7, #4]
 8029a5e:	68b9      	ldr	r1, [r7, #8]
 8029a60:	f000 fd30 	bl	802a4c4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK14ServoDataFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_>
    }
 8029a64:	68f8      	ldr	r0, [r7, #12]
 8029a66:	3728      	adds	r7, #40	; 0x28
 8029a68:	46bd      	mov	sp, r7
 8029a6a:	bd80      	pop	{r7, pc}

08029a6c <_ZNSt5dequeI14ServoDataFrameSaIS0_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8029a6c:	b590      	push	{r4, r7, lr}
 8029a6e:	b085      	sub	sp, #20
 8029a70:	af00      	add	r7, sp, #0
 8029a72:	6078      	str	r0, [r7, #4]
 8029a74:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8029a76:	6878      	ldr	r0, [r7, #4]
 8029a78:	f7fd fcbb 	bl	80273f2 <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE8max_sizeEv>
 8029a7c:	4604      	mov	r4, r0
 8029a7e:	6878      	ldr	r0, [r7, #4]
 8029a80:	f7fb fabd 	bl	8024ffe <_ZNKSt5dequeI14ServoDataFrameSaIS0_EE4sizeEv>
 8029a84:	4603      	mov	r3, r0
 8029a86:	1ae3      	subs	r3, r4, r3
 8029a88:	683a      	ldr	r2, [r7, #0]
 8029a8a:	429a      	cmp	r2, r3
 8029a8c:	bf8c      	ite	hi
 8029a8e:	2301      	movhi	r3, #1
 8029a90:	2300      	movls	r3, #0
 8029a92:	b2db      	uxtb	r3, r3
 8029a94:	2b00      	cmp	r3, #0
 8029a96:	d002      	beq.n	8029a9e <_ZNSt5dequeI14ServoDataFrameSaIS0_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8029a98:	4815      	ldr	r0, [pc, #84]	; (8029af0 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE23_M_new_elements_at_backEj+0x84>)
 8029a9a:	f016 fb7f 	bl	804019c <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8029a9e:	f7fc fe94 	bl	80267ca <_ZNSt5dequeI14ServoDataFrameSaIS0_EE14_S_buffer_sizeEv>
 8029aa2:	4602      	mov	r2, r0
 8029aa4:	683b      	ldr	r3, [r7, #0]
 8029aa6:	4413      	add	r3, r2
 8029aa8:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8029aaa:	f7fc fe8e 	bl	80267ca <_ZNSt5dequeI14ServoDataFrameSaIS0_EE14_S_buffer_sizeEv>
 8029aae:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8029ab0:	fbb4 f3f3 	udiv	r3, r4, r3
 8029ab4:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8029ab6:	68b9      	ldr	r1, [r7, #8]
 8029ab8:	6878      	ldr	r0, [r7, #4]
 8029aba:	f000 fd1b 	bl	802a4f4 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8029abe:	2301      	movs	r3, #1
 8029ac0:	60fb      	str	r3, [r7, #12]
 8029ac2:	68fa      	ldr	r2, [r7, #12]
 8029ac4:	68bb      	ldr	r3, [r7, #8]
 8029ac6:	429a      	cmp	r2, r3
 8029ac8:	d80e      	bhi.n	8029ae8 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8029aca:	6879      	ldr	r1, [r7, #4]
 8029acc:	687b      	ldr	r3, [r7, #4]
 8029ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8029ad0:	68fb      	ldr	r3, [r7, #12]
 8029ad2:	009b      	lsls	r3, r3, #2
 8029ad4:	18d4      	adds	r4, r2, r3
 8029ad6:	4608      	mov	r0, r1
 8029ad8:	f7fd fcb4 	bl	8027444 <_ZNSt11_Deque_baseI14ServoDataFrameSaIS0_EE16_M_allocate_nodeEv>
 8029adc:	4603      	mov	r3, r0
 8029ade:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8029ae0:	68fb      	ldr	r3, [r7, #12]
 8029ae2:	3301      	adds	r3, #1
 8029ae4:	60fb      	str	r3, [r7, #12]
 8029ae6:	e7ec      	b.n	8029ac2 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE23_M_new_elements_at_backEj+0x56>
    }
 8029ae8:	bf00      	nop
 8029aea:	3714      	adds	r7, #20
 8029aec:	46bd      	mov	sp, r7
 8029aee:	bd90      	pop	{r4, r7, pc}
 8029af0:	08041f24 	.word	0x08041f24

08029af4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8029af4:	b590      	push	{r4, r7, lr}
 8029af6:	b09b      	sub	sp, #108	; 0x6c
 8029af8:	af02      	add	r7, sp, #8
 8029afa:	60f8      	str	r0, [r7, #12]
 8029afc:	60b9      	str	r1, [r7, #8]
 8029afe:	607a      	str	r2, [r7, #4]
 8029b00:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 8029b02:	f107 0320 	add.w	r3, r7, #32
 8029b06:	68b9      	ldr	r1, [r7, #8]
 8029b08:	4618      	mov	r0, r3
 8029b0a:	f7fa fdf1 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029b0e:	f107 0310 	add.w	r3, r7, #16
 8029b12:	f107 0220 	add.w	r2, r7, #32
 8029b16:	4611      	mov	r1, r2
 8029b18:	4618      	mov	r0, r3
 8029b1a:	f000 fd06 	bl	802a52a <_ZSt18make_move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EESt13move_iteratorIT_ES6_>
 8029b1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8029b22:	6879      	ldr	r1, [r7, #4]
 8029b24:	4618      	mov	r0, r3
 8029b26:	f7fa fde3 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029b2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029b2e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8029b32:	4611      	mov	r1, r2
 8029b34:	4618      	mov	r0, r3
 8029b36:	f000 fcf8 	bl	802a52a <_ZSt18make_move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EESt13move_iteratorIT_ES6_>
 8029b3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8029b3e:	6839      	ldr	r1, [r7, #0]
 8029b40:	4618      	mov	r0, r3
 8029b42:	f7fa fdd5 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029b46:	68f8      	ldr	r0, [r7, #12]
 8029b48:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8029b4c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8029b50:	f107 0110 	add.w	r1, r7, #16
 8029b54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029b56:	9300      	str	r3, [sp, #0]
 8029b58:	4623      	mov	r3, r4
 8029b5a:	f000 fd0f 	bl	802a57c <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS2_PS2_EES5_S2_ET0_T_S8_S7_RSaIT1_E>
    }
 8029b5e:	68f8      	ldr	r0, [r7, #12]
 8029b60:	3764      	adds	r7, #100	; 0x64
 8029b62:	46bd      	mov	sp, r7
 8029b64:	bd90      	pop	{r4, r7, pc}

08029b66 <_ZSt4moveISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_ET0_T_S6_S5_>:
    move(_II __first, _II __last, _OI __result)
 8029b66:	b580      	push	{r7, lr}
 8029b68:	b098      	sub	sp, #96	; 0x60
 8029b6a:	af00      	add	r7, sp, #0
 8029b6c:	60f8      	str	r0, [r7, #12]
 8029b6e:	60b9      	str	r1, [r7, #8]
 8029b70:	607a      	str	r2, [r7, #4]
 8029b72:	603b      	str	r3, [r7, #0]
				      std::__miter_base(__last), __result);
 8029b74:	f107 0320 	add.w	r3, r7, #32
 8029b78:	68b9      	ldr	r1, [r7, #8]
 8029b7a:	4618      	mov	r0, r3
 8029b7c:	f7fa fdb8 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029b80:	f107 0310 	add.w	r3, r7, #16
 8029b84:	f107 0220 	add.w	r2, r7, #32
 8029b88:	4611      	mov	r1, r2
 8029b8a:	4618      	mov	r0, r3
 8029b8c:	f000 fd1c 	bl	802a5c8 <_ZSt12__miter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>
 8029b90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8029b94:	6879      	ldr	r1, [r7, #4]
 8029b96:	4618      	mov	r0, r3
 8029b98:	f7fa fdaa 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029b9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029ba0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8029ba4:	4611      	mov	r1, r2
 8029ba6:	4618      	mov	r0, r3
 8029ba8:	f000 fd0e 	bl	802a5c8 <_ZSt12__miter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>
 8029bac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8029bb0:	6839      	ldr	r1, [r7, #0]
 8029bb2:	4618      	mov	r0, r3
 8029bb4:	f7fa fd9c 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029bb8:	68f8      	ldr	r0, [r7, #12]
 8029bba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8029bbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8029bc2:	f107 0110 	add.w	r1, r7, #16
 8029bc6:	f000 fd0c 	bl	802a5e2 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_ET1_T0_S6_S5_>
    }
 8029bca:	68f8      	ldr	r0, [r7, #12]
 8029bcc:	3760      	adds	r7, #96	; 0x60
 8029bce:	46bd      	mov	sp, r7
 8029bd0:	bd80      	pop	{r7, pc}

08029bd2 <_ZSt7advanceIPK14ServoDataFrameiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8029bd2:	b590      	push	{r4, r7, lr}
 8029bd4:	b085      	sub	sp, #20
 8029bd6:	af00      	add	r7, sp, #0
 8029bd8:	6078      	str	r0, [r7, #4]
 8029bda:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8029bdc:	683b      	ldr	r3, [r7, #0]
 8029bde:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8029be0:	6878      	ldr	r0, [r7, #4]
 8029be2:	f7fd f848 	bl	8026c76 <_ZSt19__iterator_categoryIPK14ServoDataFrameENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 8029be6:	4622      	mov	r2, r4
 8029be8:	68f9      	ldr	r1, [r7, #12]
 8029bea:	6878      	ldr	r0, [r7, #4]
 8029bec:	f7fe fb50 	bl	8028290 <_ZSt9__advanceIPK14ServoDataFrameiEvRT_T0_St26random_access_iterator_tag>
    }
 8029bf0:	bf00      	nop
 8029bf2:	3714      	adds	r7, #20
 8029bf4:	46bd      	mov	sp, r7
 8029bf6:	bd90      	pop	{r4, r7, pc}

08029bf8 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EPKS1_S4_SaIS1_EET1_T_S9_T0_SA_S8_RT2_>:
    __uninitialized_move_copy(_InputIterator1 __first1,
 8029bf8:	b590      	push	{r4, r7, lr}
 8029bfa:	b0a3      	sub	sp, #140	; 0x8c
 8029bfc:	af02      	add	r7, sp, #8
 8029bfe:	60f8      	str	r0, [r7, #12]
 8029c00:	60b9      	str	r1, [r7, #8]
 8029c02:	607a      	str	r2, [r7, #4]
 8029c04:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 8029c06:	f107 0320 	add.w	r3, r7, #32
 8029c0a:	68b9      	ldr	r1, [r7, #8]
 8029c0c:	4618      	mov	r0, r3
 8029c0e:	f7fa fd6f 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029c12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029c16:	6879      	ldr	r1, [r7, #4]
 8029c18:	4618      	mov	r0, r3
 8029c1a:	f7fa fd69 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029c1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8029c22:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8029c26:	4618      	mov	r0, r3
 8029c28:	f7fa fd62 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029c2c:	f107 0010 	add.w	r0, r7, #16
 8029c30:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8029c34:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8029c38:	f107 0120 	add.w	r1, r7, #32
 8029c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029c40:	9300      	str	r3, [sp, #0]
 8029c42:	4623      	mov	r3, r4
 8029c44:	f7ff ff56 	bl	8029af4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 8029c48:	f107 0210 	add.w	r2, r7, #16
 8029c4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8029c50:	4611      	mov	r1, r2
 8029c52:	4618      	mov	r0, r3
 8029c54:	f7fa fd4c 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029c58:	68f8      	ldr	r0, [r7, #12]
 8029c5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8029c5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029c62:	9300      	str	r3, [sp, #0]
 8029c64:	4613      	mov	r3, r2
 8029c66:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8029c6a:	6839      	ldr	r1, [r7, #0]
 8029c6c:	f7fe fb8c 	bl	8028388 <_ZSt22__uninitialized_copy_aIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
    }
 8029c70:	68f8      	ldr	r0, [r7, #12]
 8029c72:	3784      	adds	r7, #132	; 0x84
 8029c74:	46bd      	mov	sp, r7
 8029c76:	bd90      	pop	{r4, r7, pc}

08029c78 <_ZSt13move_backwardISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_ET0_T_S6_S5_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8029c78:	b580      	push	{r7, lr}
 8029c7a:	b098      	sub	sp, #96	; 0x60
 8029c7c:	af00      	add	r7, sp, #0
 8029c7e:	60f8      	str	r0, [r7, #12]
 8029c80:	60b9      	str	r1, [r7, #8]
 8029c82:	607a      	str	r2, [r7, #4]
 8029c84:	603b      	str	r3, [r7, #0]
					       __result);
 8029c86:	f107 0320 	add.w	r3, r7, #32
 8029c8a:	68b9      	ldr	r1, [r7, #8]
 8029c8c:	4618      	mov	r0, r3
 8029c8e:	f7fa fd2f 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029c92:	f107 0310 	add.w	r3, r7, #16
 8029c96:	f107 0220 	add.w	r2, r7, #32
 8029c9a:	4611      	mov	r1, r2
 8029c9c:	4618      	mov	r0, r3
 8029c9e:	f000 fc93 	bl	802a5c8 <_ZSt12__miter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>
 8029ca2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8029ca6:	6879      	ldr	r1, [r7, #4]
 8029ca8:	4618      	mov	r0, r3
 8029caa:	f7fa fd21 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029cae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029cb2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8029cb6:	4611      	mov	r1, r2
 8029cb8:	4618      	mov	r0, r3
 8029cba:	f000 fc85 	bl	802a5c8 <_ZSt12__miter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>
 8029cbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8029cc2:	6839      	ldr	r1, [r7, #0]
 8029cc4:	4618      	mov	r0, r3
 8029cc6:	f7fa fd13 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029cca:	68f8      	ldr	r0, [r7, #12]
 8029ccc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8029cd0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8029cd4:	f107 0110 	add.w	r1, r7, #16
 8029cd8:	f000 fcc9 	bl	802a66e <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_ET1_T0_S6_S5_>
    }
 8029cdc:	68f8      	ldr	r0, [r7, #12]
 8029cde:	3760      	adds	r7, #96	; 0x60
 8029ce0:	46bd      	mov	sp, r7
 8029ce2:	bd80      	pop	{r7, pc}

08029ce4 <_ZSt25__uninitialized_copy_moveIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_ES6_SaIS0_EET1_T_S9_T0_SA_S8_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 8029ce4:	b590      	push	{r4, r7, lr}
 8029ce6:	b0a3      	sub	sp, #140	; 0x8c
 8029ce8:	af02      	add	r7, sp, #8
 8029cea:	60f8      	str	r0, [r7, #12]
 8029cec:	60b9      	str	r1, [r7, #8]
 8029cee:	607a      	str	r2, [r7, #4]
 8029cf0:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 8029cf2:	f107 0320 	add.w	r3, r7, #32
 8029cf6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8029cfa:	4618      	mov	r0, r3
 8029cfc:	f7fa fcf8 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029d00:	f107 0010 	add.w	r0, r7, #16
 8029d04:	f107 0220 	add.w	r2, r7, #32
 8029d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029d0c:	9300      	str	r3, [sp, #0]
 8029d0e:	4613      	mov	r3, r2
 8029d10:	687a      	ldr	r2, [r7, #4]
 8029d12:	68b9      	ldr	r1, [r7, #8]
 8029d14:	f7fe fb38 	bl	8028388 <_ZSt22__uninitialized_copy_aIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_ES0_ET0_T_S8_S7_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 8029d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029d1c:	6839      	ldr	r1, [r7, #0]
 8029d1e:	4618      	mov	r0, r3
 8029d20:	f7fa fce6 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029d24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8029d28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8029d2c:	4618      	mov	r0, r3
 8029d2e:	f7fa fcdf 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029d32:	f107 0210 	add.w	r2, r7, #16
 8029d36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8029d3a:	4611      	mov	r1, r2
 8029d3c:	4618      	mov	r0, r3
 8029d3e:	f7fa fcd7 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 8029d42:	68f8      	ldr	r0, [r7, #12]
 8029d44:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8029d48:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8029d4c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029d54:	9300      	str	r3, [sp, #0]
 8029d56:	4623      	mov	r3, r4
 8029d58:	f7ff fecc 	bl	8029af4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_SaIS1_EET0_T_S7_S6_RT1_>
    }
 8029d5c:	68f8      	ldr	r0, [r7, #12]
 8029d5e:	3784      	adds	r7, #132	; 0x84
 8029d60:	46bd      	mov	sp, r7
 8029d62:	bd90      	pop	{r4, r7, pc}

08029d64 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8029d64:	b590      	push	{r4, r7, lr}
 8029d66:	b085      	sub	sp, #20
 8029d68:	af00      	add	r7, sp, #0
 8029d6a:	6078      	str	r0, [r7, #4]
 8029d6c:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8029d6e:	687b      	ldr	r3, [r7, #4]
 8029d70:	681a      	ldr	r2, [r3, #0]
 8029d72:	687b      	ldr	r3, [r7, #4]
 8029d74:	685b      	ldr	r3, [r3, #4]
 8029d76:	1ad3      	subs	r3, r2, r3
 8029d78:	10db      	asrs	r3, r3, #3
 8029d7a:	4a2b      	ldr	r2, [pc, #172]	; (8029e28 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0xc4>)
 8029d7c:	fb02 f303 	mul.w	r3, r2, r3
 8029d80:	461a      	mov	r2, r3
 8029d82:	683b      	ldr	r3, [r7, #0]
 8029d84:	4413      	add	r3, r2
 8029d86:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8029d88:	68fb      	ldr	r3, [r7, #12]
 8029d8a:	2b00      	cmp	r3, #0
 8029d8c:	db08      	blt.n	8029da0 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3c>
 8029d8e:	f7fd faca 	bl	8027326 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8029d92:	4603      	mov	r3, r0
 8029d94:	461a      	mov	r2, r3
 8029d96:	68fb      	ldr	r3, [r7, #12]
 8029d98:	4293      	cmp	r3, r2
 8029d9a:	da01      	bge.n	8029da0 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3c>
 8029d9c:	2301      	movs	r3, #1
 8029d9e:	e000      	b.n	8029da2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3e>
 8029da0:	2300      	movs	r3, #0
 8029da2:	2b00      	cmp	r3, #0
 8029da4:	d00a      	beq.n	8029dbc <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x58>
	  _M_cur += __n;
 8029da6:	687b      	ldr	r3, [r7, #4]
 8029da8:	6819      	ldr	r1, [r3, #0]
 8029daa:	683a      	ldr	r2, [r7, #0]
 8029dac:	4613      	mov	r3, r2
 8029dae:	005b      	lsls	r3, r3, #1
 8029db0:	4413      	add	r3, r2
 8029db2:	00db      	lsls	r3, r3, #3
 8029db4:	18ca      	adds	r2, r1, r3
 8029db6:	687b      	ldr	r3, [r7, #4]
 8029db8:	601a      	str	r2, [r3, #0]
 8029dba:	e02f      	b.n	8029e1c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8029dbc:	68fb      	ldr	r3, [r7, #12]
 8029dbe:	2b00      	cmp	r3, #0
 8029dc0:	dd07      	ble.n	8029dd2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x6e>
 8029dc2:	f7fd fab0 	bl	8027326 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8029dc6:	4603      	mov	r3, r0
 8029dc8:	461a      	mov	r2, r3
 8029dca:	68fb      	ldr	r3, [r7, #12]
 8029dcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8029dd0:	e007      	b.n	8029de2 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 8029dd2:	68fb      	ldr	r3, [r7, #12]
 8029dd4:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8029dd6:	f7fd faa6 	bl	8027326 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8029dda:	4603      	mov	r3, r0
 8029ddc:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8029de0:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8029de2:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8029de4:	687b      	ldr	r3, [r7, #4]
 8029de6:	68da      	ldr	r2, [r3, #12]
 8029de8:	68bb      	ldr	r3, [r7, #8]
 8029dea:	009b      	lsls	r3, r3, #2
 8029dec:	4413      	add	r3, r2
 8029dee:	4619      	mov	r1, r3
 8029df0:	6878      	ldr	r0, [r7, #4]
 8029df2:	f7fc fbc4 	bl	802657e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_first + (__offset - __node_offset
 8029df6:	687b      	ldr	r3, [r7, #4]
 8029df8:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8029dfa:	f7fd fa94 	bl	8027326 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8029dfe:	4603      	mov	r3, r0
 8029e00:	461a      	mov	r2, r3
 8029e02:	68bb      	ldr	r3, [r7, #8]
 8029e04:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8029e08:	68fa      	ldr	r2, [r7, #12]
 8029e0a:	1ad3      	subs	r3, r2, r3
 8029e0c:	461a      	mov	r2, r3
 8029e0e:	4613      	mov	r3, r2
 8029e10:	005b      	lsls	r3, r3, #1
 8029e12:	4413      	add	r3, r2
 8029e14:	00db      	lsls	r3, r3, #3
 8029e16:	18e2      	adds	r2, r4, r3
 8029e18:	687b      	ldr	r3, [r7, #4]
 8029e1a:	601a      	str	r2, [r3, #0]
	return *this;
 8029e1c:	687b      	ldr	r3, [r7, #4]
      }
 8029e1e:	4618      	mov	r0, r3
 8029e20:	3714      	adds	r7, #20
 8029e22:	46bd      	mov	sp, r7
 8029e24:	bd90      	pop	{r4, r7, pc}
 8029e26:	bf00      	nop
 8029e28:	aaaaaaab 	.word	0xaaaaaaab

08029e2c <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8029e2c:	b590      	push	{r4, r7, lr}
 8029e2e:	b085      	sub	sp, #20
 8029e30:	af00      	add	r7, sp, #0
 8029e32:	6078      	str	r0, [r7, #4]
 8029e34:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8029e36:	687b      	ldr	r3, [r7, #4]
 8029e38:	681a      	ldr	r2, [r3, #0]
 8029e3a:	687b      	ldr	r3, [r7, #4]
 8029e3c:	685b      	ldr	r3, [r3, #4]
 8029e3e:	1ad3      	subs	r3, r2, r3
 8029e40:	109b      	asrs	r3, r3, #2
 8029e42:	4a2b      	ldr	r2, [pc, #172]	; (8029ef0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi+0xc4>)
 8029e44:	fb02 f303 	mul.w	r3, r2, r3
 8029e48:	461a      	mov	r2, r3
 8029e4a:	683b      	ldr	r3, [r7, #0]
 8029e4c:	4413      	add	r3, r2
 8029e4e:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8029e50:	68fb      	ldr	r3, [r7, #12]
 8029e52:	2b00      	cmp	r3, #0
 8029e54:	db08      	blt.n	8029e68 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi+0x3c>
 8029e56:	f7fd fb08 	bl	802746a <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E14_S_buffer_sizeEv>
 8029e5a:	4603      	mov	r3, r0
 8029e5c:	461a      	mov	r2, r3
 8029e5e:	68fb      	ldr	r3, [r7, #12]
 8029e60:	4293      	cmp	r3, r2
 8029e62:	da01      	bge.n	8029e68 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi+0x3c>
 8029e64:	2301      	movs	r3, #1
 8029e66:	e000      	b.n	8029e6a <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi+0x3e>
 8029e68:	2300      	movs	r3, #0
 8029e6a:	2b00      	cmp	r3, #0
 8029e6c:	d00a      	beq.n	8029e84 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi+0x58>
	  _M_cur += __n;
 8029e6e:	687b      	ldr	r3, [r7, #4]
 8029e70:	681a      	ldr	r2, [r3, #0]
 8029e72:	683b      	ldr	r3, [r7, #0]
 8029e74:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8029e78:	fb01 f303 	mul.w	r3, r1, r3
 8029e7c:	441a      	add	r2, r3
 8029e7e:	687b      	ldr	r3, [r7, #4]
 8029e80:	601a      	str	r2, [r3, #0]
 8029e82:	e02f      	b.n	8029ee4 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8029e84:	68fb      	ldr	r3, [r7, #12]
 8029e86:	2b00      	cmp	r3, #0
 8029e88:	dd07      	ble.n	8029e9a <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi+0x6e>
 8029e8a:	f7fd faee 	bl	802746a <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E14_S_buffer_sizeEv>
 8029e8e:	4603      	mov	r3, r0
 8029e90:	461a      	mov	r2, r3
 8029e92:	68fb      	ldr	r3, [r7, #12]
 8029e94:	fb93 f3f2 	sdiv	r3, r3, r2
 8029e98:	e007      	b.n	8029eaa <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 8029e9a:	68fb      	ldr	r3, [r7, #12]
 8029e9c:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8029e9e:	f7fd fae4 	bl	802746a <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E14_S_buffer_sizeEv>
 8029ea2:	4603      	mov	r3, r0
 8029ea4:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8029ea8:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8029eaa:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8029eac:	687b      	ldr	r3, [r7, #4]
 8029eae:	68da      	ldr	r2, [r3, #12]
 8029eb0:	68bb      	ldr	r3, [r7, #8]
 8029eb2:	009b      	lsls	r3, r3, #2
 8029eb4:	4413      	add	r3, r2
 8029eb6:	4619      	mov	r1, r3
 8029eb8:	6878      	ldr	r0, [r7, #4]
 8029eba:	f7fc fc22 	bl	8026702 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_first + (__offset - __node_offset
 8029ebe:	687b      	ldr	r3, [r7, #4]
 8029ec0:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8029ec2:	f7fd fad2 	bl	802746a <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E14_S_buffer_sizeEv>
 8029ec6:	4603      	mov	r3, r0
 8029ec8:	461a      	mov	r2, r3
 8029eca:	68bb      	ldr	r3, [r7, #8]
 8029ecc:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8029ed0:	68fa      	ldr	r2, [r7, #12]
 8029ed2:	1ad3      	subs	r3, r2, r3
 8029ed4:	461a      	mov	r2, r3
 8029ed6:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8029eda:	fb02 f303 	mul.w	r3, r2, r3
 8029ede:	18e2      	adds	r2, r4, r3
 8029ee0:	687b      	ldr	r3, [r7, #4]
 8029ee2:	601a      	str	r2, [r3, #0]
	return *this;
 8029ee4:	687b      	ldr	r3, [r7, #4]
      }
 8029ee6:	4618      	mov	r0, r3
 8029ee8:	3714      	adds	r7, #20
 8029eea:	46bd      	mov	sp, r7
 8029eec:	bd90      	pop	{r4, r7, pc}
 8029eee:	bf00      	nop
 8029ef0:	07a44c6b 	.word	0x07a44c6b

08029ef4 <_ZNSt16allocator_traitsISaI8IMUFrameEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8029ef4:	b580      	push	{r7, lr}
 8029ef6:	b082      	sub	sp, #8
 8029ef8:	af00      	add	r7, sp, #0
 8029efa:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8029efc:	6878      	ldr	r0, [r7, #4]
 8029efe:	f000 fbfc 	bl	802a6fa <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE8max_sizeEv>
 8029f02:	4603      	mov	r3, r0
      }
 8029f04:	4618      	mov	r0, r3
 8029f06:	3708      	adds	r7, #8
 8029f08:	46bd      	mov	sp, r7
 8029f0a:	bd80      	pop	{r7, pc}

08029f0c <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8029f0c:	b590      	push	{r4, r7, lr}
 8029f0e:	b085      	sub	sp, #20
 8029f10:	af00      	add	r7, sp, #0
 8029f12:	60f8      	str	r0, [r7, #12]
 8029f14:	60b9      	str	r1, [r7, #8]
 8029f16:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8029f18:	68f8      	ldr	r0, [r7, #12]
 8029f1a:	f000 fbfa 	bl	802a712 <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 8029f1e:	4604      	mov	r4, r0
 8029f20:	68b8      	ldr	r0, [r7, #8]
 8029f22:	f000 fbf6 	bl	802a712 <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 8029f26:	4603      	mov	r3, r0
 8029f28:	687a      	ldr	r2, [r7, #4]
 8029f2a:	4619      	mov	r1, r3
 8029f2c:	4620      	mov	r0, r4
 8029f2e:	f000 fbfb 	bl	802a728 <_ZSt13__copy_move_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8029f32:	4603      	mov	r3, r0
    }
 8029f34:	4618      	mov	r0, r3
 8029f36:	3714      	adds	r7, #20
 8029f38:	46bd      	mov	sp, r7
 8029f3a:	bd90      	pop	{r4, r7, pc}

08029f3c <_ZSt13copy_backwardIPP8IMUFrameS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8029f3c:	b590      	push	{r4, r7, lr}
 8029f3e:	b085      	sub	sp, #20
 8029f40:	af00      	add	r7, sp, #0
 8029f42:	60f8      	str	r0, [r7, #12]
 8029f44:	60b9      	str	r1, [r7, #8]
 8029f46:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8029f48:	68f8      	ldr	r0, [r7, #12]
 8029f4a:	f000 fbe2 	bl	802a712 <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 8029f4e:	4604      	mov	r4, r0
 8029f50:	68b8      	ldr	r0, [r7, #8]
 8029f52:	f000 fbde 	bl	802a712 <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 8029f56:	4603      	mov	r3, r0
 8029f58:	687a      	ldr	r2, [r7, #4]
 8029f5a:	4619      	mov	r1, r3
 8029f5c:	4620      	mov	r0, r4
 8029f5e:	f000 fc06 	bl	802a76e <_ZSt22__copy_move_backward_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8029f62:	4603      	mov	r3, r0
    }
 8029f64:	4618      	mov	r0, r3
 8029f66:	3714      	adds	r7, #20
 8029f68:	46bd      	mov	sp, r7
 8029f6a:	bd90      	pop	{r4, r7, pc}

08029f6c <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8029f6c:	b580      	push	{r7, lr}
 8029f6e:	b084      	sub	sp, #16
 8029f70:	af00      	add	r7, sp, #0
 8029f72:	60f8      	str	r0, [r7, #12]
 8029f74:	60b9      	str	r1, [r7, #8]
 8029f76:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8029f78:	68f8      	ldr	r0, [r7, #12]
 8029f7a:	f000 fc1b 	bl	802a7b4 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>
 8029f7e:	4602      	mov	r2, r0
 8029f80:	68bb      	ldr	r3, [r7, #8]
 8029f82:	4293      	cmp	r3, r2
 8029f84:	bf8c      	ite	hi
 8029f86:	2301      	movhi	r3, #1
 8029f88:	2300      	movls	r3, #0
 8029f8a:	b2db      	uxtb	r3, r3
 8029f8c:	2b00      	cmp	r3, #0
 8029f8e:	d001      	beq.n	8029f94 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8029f90:	f016 f901 	bl	8040196 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8029f94:	68ba      	ldr	r2, [r7, #8]
 8029f96:	4613      	mov	r3, r2
 8029f98:	005b      	lsls	r3, r3, #1
 8029f9a:	4413      	add	r3, r2
 8029f9c:	00db      	lsls	r3, r3, #3
 8029f9e:	4618      	mov	r0, r3
 8029fa0:	f016 f8e8 	bl	8040174 <_Znwj>
 8029fa4:	4603      	mov	r3, r0
      }
 8029fa6:	4618      	mov	r0, r3
 8029fa8:	3710      	adds	r7, #16
 8029faa:	46bd      	mov	sp, r7
 8029fac:	bd80      	pop	{r7, pc}

08029fae <_ZNSt16allocator_traitsISaI14ServoDataFrameEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8029fae:	b580      	push	{r7, lr}
 8029fb0:	b082      	sub	sp, #8
 8029fb2:	af00      	add	r7, sp, #0
 8029fb4:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8029fb6:	6878      	ldr	r0, [r7, #4]
 8029fb8:	f000 fc0a 	bl	802a7d0 <_ZNK9__gnu_cxx13new_allocatorI14ServoDataFrameE8max_sizeEv>
 8029fbc:	4603      	mov	r3, r0
      }
 8029fbe:	4618      	mov	r0, r3
 8029fc0:	3708      	adds	r7, #8
 8029fc2:	46bd      	mov	sp, r7
 8029fc4:	bd80      	pop	{r7, pc}

08029fc6 <_ZSt4copyIPP14ServoDataFrameS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8029fc6:	b590      	push	{r4, r7, lr}
 8029fc8:	b085      	sub	sp, #20
 8029fca:	af00      	add	r7, sp, #0
 8029fcc:	60f8      	str	r0, [r7, #12]
 8029fce:	60b9      	str	r1, [r7, #8]
 8029fd0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8029fd2:	68f8      	ldr	r0, [r7, #12]
 8029fd4:	f000 fc08 	bl	802a7e8 <_ZSt12__miter_baseIPP14ServoDataFrameET_S3_>
 8029fd8:	4604      	mov	r4, r0
 8029fda:	68b8      	ldr	r0, [r7, #8]
 8029fdc:	f000 fc04 	bl	802a7e8 <_ZSt12__miter_baseIPP14ServoDataFrameET_S3_>
 8029fe0:	4603      	mov	r3, r0
 8029fe2:	687a      	ldr	r2, [r7, #4]
 8029fe4:	4619      	mov	r1, r3
 8029fe6:	4620      	mov	r0, r4
 8029fe8:	f000 fc09 	bl	802a7fe <_ZSt13__copy_move_aILb0EPP14ServoDataFrameS2_ET1_T0_S4_S3_>
 8029fec:	4603      	mov	r3, r0
    }
 8029fee:	4618      	mov	r0, r3
 8029ff0:	3714      	adds	r7, #20
 8029ff2:	46bd      	mov	sp, r7
 8029ff4:	bd90      	pop	{r4, r7, pc}

08029ff6 <_ZSt13copy_backwardIPP14ServoDataFrameS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8029ff6:	b590      	push	{r4, r7, lr}
 8029ff8:	b085      	sub	sp, #20
 8029ffa:	af00      	add	r7, sp, #0
 8029ffc:	60f8      	str	r0, [r7, #12]
 8029ffe:	60b9      	str	r1, [r7, #8]
 802a000:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802a002:	68f8      	ldr	r0, [r7, #12]
 802a004:	f000 fbf0 	bl	802a7e8 <_ZSt12__miter_baseIPP14ServoDataFrameET_S3_>
 802a008:	4604      	mov	r4, r0
 802a00a:	68b8      	ldr	r0, [r7, #8]
 802a00c:	f000 fbec 	bl	802a7e8 <_ZSt12__miter_baseIPP14ServoDataFrameET_S3_>
 802a010:	4603      	mov	r3, r0
 802a012:	687a      	ldr	r2, [r7, #4]
 802a014:	4619      	mov	r1, r3
 802a016:	4620      	mov	r0, r4
 802a018:	f000 fc14 	bl	802a844 <_ZSt22__copy_move_backward_aILb0EPP14ServoDataFrameS2_ET1_T0_S4_S3_>
 802a01c:	4603      	mov	r3, r0
    }
 802a01e:	4618      	mov	r0, r3
 802a020:	3714      	adds	r7, #20
 802a022:	46bd      	mov	sp, r7
 802a024:	bd90      	pop	{r4, r7, pc}

0802a026 <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802a026:	b580      	push	{r7, lr}
 802a028:	b084      	sub	sp, #16
 802a02a:	af00      	add	r7, sp, #0
 802a02c:	60f8      	str	r0, [r7, #12]
 802a02e:	60b9      	str	r1, [r7, #8]
 802a030:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802a032:	68f8      	ldr	r0, [r7, #12]
 802a034:	f000 fc2a 	bl	802a88c <_ZNK9__gnu_cxx13new_allocatorI14ServoDataFrameE11_M_max_sizeEv>
 802a038:	4602      	mov	r2, r0
 802a03a:	68bb      	ldr	r3, [r7, #8]
 802a03c:	4293      	cmp	r3, r2
 802a03e:	bf8c      	ite	hi
 802a040:	2301      	movhi	r3, #1
 802a042:	2300      	movls	r3, #0
 802a044:	b2db      	uxtb	r3, r3
 802a046:	2b00      	cmp	r3, #0
 802a048:	d001      	beq.n	802a04e <_ZN9__gnu_cxx13new_allocatorI14ServoDataFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 802a04a:	f016 f8a4 	bl	8040196 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 802a04e:	68bb      	ldr	r3, [r7, #8]
 802a050:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802a054:	fb02 f303 	mul.w	r3, r2, r3
 802a058:	4618      	mov	r0, r3
 802a05a:	f016 f88b 	bl	8040174 <_Znwj>
 802a05e:	4603      	mov	r3, r0
      }
 802a060:	4618      	mov	r0, r3
 802a062:	3710      	adds	r7, #16
 802a064:	46bd      	mov	sp, r7
 802a066:	bd80      	pop	{r7, pc}

0802a068 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 802a068:	b580      	push	{r7, lr}
 802a06a:	b082      	sub	sp, #8
 802a06c:	af00      	add	r7, sp, #0
 802a06e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 802a070:	6878      	ldr	r0, [r7, #4]
 802a072:	f000 f856 	bl	802a122 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 802a076:	4603      	mov	r3, r0
 802a078:	4618      	mov	r0, r3
 802a07a:	3708      	adds	r7, #8
 802a07c:	46bd      	mov	sp, r7
 802a07e:	bd80      	pop	{r7, pc}

0802a080 <_ZSt12__miter_baseIPPjET_S2_>:
    __miter_base(_Iterator __it)
 802a080:	b480      	push	{r7}
 802a082:	b083      	sub	sp, #12
 802a084:	af00      	add	r7, sp, #0
 802a086:	6078      	str	r0, [r7, #4]
    { return __it; }
 802a088:	687b      	ldr	r3, [r7, #4]
 802a08a:	4618      	mov	r0, r3
 802a08c:	370c      	adds	r7, #12
 802a08e:	46bd      	mov	sp, r7
 802a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a094:	4770      	bx	lr

0802a096 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 802a096:	b5b0      	push	{r4, r5, r7, lr}
 802a098:	b084      	sub	sp, #16
 802a09a:	af00      	add	r7, sp, #0
 802a09c:	60f8      	str	r0, [r7, #12]
 802a09e:	60b9      	str	r1, [r7, #8]
 802a0a0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 802a0a2:	68f8      	ldr	r0, [r7, #12]
 802a0a4:	f000 fc00 	bl	802a8a8 <_ZSt12__niter_baseIPPjET_S2_>
 802a0a8:	4604      	mov	r4, r0
 802a0aa:	68b8      	ldr	r0, [r7, #8]
 802a0ac:	f000 fbfc 	bl	802a8a8 <_ZSt12__niter_baseIPPjET_S2_>
 802a0b0:	4605      	mov	r5, r0
 802a0b2:	687b      	ldr	r3, [r7, #4]
 802a0b4:	4618      	mov	r0, r3
 802a0b6:	f000 fbf7 	bl	802a8a8 <_ZSt12__niter_baseIPPjET_S2_>
 802a0ba:	4603      	mov	r3, r0
 802a0bc:	461a      	mov	r2, r3
 802a0be:	4629      	mov	r1, r5
 802a0c0:	4620      	mov	r0, r4
 802a0c2:	f000 fbfc 	bl	802a8be <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 802a0c6:	4602      	mov	r2, r0
 802a0c8:	1d3b      	adds	r3, r7, #4
 802a0ca:	4611      	mov	r1, r2
 802a0cc:	4618      	mov	r0, r3
 802a0ce:	f000 fc06 	bl	802a8de <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 802a0d2:	4603      	mov	r3, r0
    }
 802a0d4:	4618      	mov	r0, r3
 802a0d6:	3710      	adds	r7, #16
 802a0d8:	46bd      	mov	sp, r7
 802a0da:	bdb0      	pop	{r4, r5, r7, pc}

0802a0dc <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 802a0dc:	b5b0      	push	{r4, r5, r7, lr}
 802a0de:	b084      	sub	sp, #16
 802a0e0:	af00      	add	r7, sp, #0
 802a0e2:	60f8      	str	r0, [r7, #12]
 802a0e4:	60b9      	str	r1, [r7, #8]
 802a0e6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 802a0e8:	68f8      	ldr	r0, [r7, #12]
 802a0ea:	f000 fbdd 	bl	802a8a8 <_ZSt12__niter_baseIPPjET_S2_>
 802a0ee:	4604      	mov	r4, r0
 802a0f0:	68b8      	ldr	r0, [r7, #8]
 802a0f2:	f000 fbd9 	bl	802a8a8 <_ZSt12__niter_baseIPPjET_S2_>
 802a0f6:	4605      	mov	r5, r0
 802a0f8:	687b      	ldr	r3, [r7, #4]
 802a0fa:	4618      	mov	r0, r3
 802a0fc:	f000 fbd4 	bl	802a8a8 <_ZSt12__niter_baseIPPjET_S2_>
 802a100:	4603      	mov	r3, r0
 802a102:	461a      	mov	r2, r3
 802a104:	4629      	mov	r1, r5
 802a106:	4620      	mov	r0, r4
 802a108:	f000 fbf5 	bl	802a8f6 <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 802a10c:	4602      	mov	r2, r0
 802a10e:	1d3b      	adds	r3, r7, #4
 802a110:	4611      	mov	r1, r2
 802a112:	4618      	mov	r0, r3
 802a114:	f000 fbe3 	bl	802a8de <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 802a118:	4603      	mov	r3, r0
    }
 802a11a:	4618      	mov	r0, r3
 802a11c:	3710      	adds	r7, #16
 802a11e:	46bd      	mov	sp, r7
 802a120:	bdb0      	pop	{r4, r5, r7, pc}

0802a122 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802a122:	b480      	push	{r7}
 802a124:	b083      	sub	sp, #12
 802a126:	af00      	add	r7, sp, #0
 802a128:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802a12a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 802a12e:	4618      	mov	r0, r3
 802a130:	370c      	adds	r7, #12
 802a132:	46bd      	mov	sp, r7
 802a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a138:	4770      	bx	lr

0802a13a <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 802a13a:	b480      	push	{r7}
 802a13c:	b083      	sub	sp, #12
 802a13e:	af00      	add	r7, sp, #0
 802a140:	6078      	str	r0, [r7, #4]
    { return __it; }
 802a142:	687b      	ldr	r3, [r7, #4]
 802a144:	4618      	mov	r0, r3
 802a146:	370c      	adds	r7, #12
 802a148:	46bd      	mov	sp, r7
 802a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a14e:	4770      	bx	lr

0802a150 <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802a150:	b580      	push	{r7, lr}
 802a152:	b084      	sub	sp, #16
 802a154:	af00      	add	r7, sp, #0
 802a156:	60f8      	str	r0, [r7, #12]
 802a158:	60b9      	str	r1, [r7, #8]
 802a15a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802a15c:	687a      	ldr	r2, [r7, #4]
 802a15e:	68b9      	ldr	r1, [r7, #8]
 802a160:	68f8      	ldr	r0, [r7, #12]
 802a162:	f000 fbd8 	bl	802a916 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802a166:	4603      	mov	r3, r0
 802a168:	4618      	mov	r0, r3
 802a16a:	3710      	adds	r7, #16
 802a16c:	46bd      	mov	sp, r7
 802a16e:	bd80      	pop	{r7, pc}

0802a170 <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802a170:	b480      	push	{r7}
 802a172:	b083      	sub	sp, #12
 802a174:	af00      	add	r7, sp, #0
 802a176:	6078      	str	r0, [r7, #4]
 802a178:	6039      	str	r1, [r7, #0]
    { return __res; }
 802a17a:	683b      	ldr	r3, [r7, #0]
 802a17c:	4618      	mov	r0, r3
 802a17e:	370c      	adds	r7, #12
 802a180:	46bd      	mov	sp, r7
 802a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a186:	4770      	bx	lr

0802a188 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802a188:	b580      	push	{r7, lr}
 802a18a:	b084      	sub	sp, #16
 802a18c:	af00      	add	r7, sp, #0
 802a18e:	60f8      	str	r0, [r7, #12]
 802a190:	60b9      	str	r1, [r7, #8]
 802a192:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802a194:	687a      	ldr	r2, [r7, #4]
 802a196:	68b9      	ldr	r1, [r7, #8]
 802a198:	68f8      	ldr	r0, [r7, #12]
 802a19a:	f000 fbcc 	bl	802a936 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802a19e:	4603      	mov	r3, r0
 802a1a0:	4618      	mov	r0, r3
 802a1a2:	3710      	adds	r7, #16
 802a1a4:	46bd      	mov	sp, r7
 802a1a6:	bd80      	pop	{r7, pc}

0802a1a8 <_ZNK9__gnu_cxx13new_allocatorIP8IMUFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802a1a8:	b480      	push	{r7}
 802a1aa:	b083      	sub	sp, #12
 802a1ac:	af00      	add	r7, sp, #0
 802a1ae:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802a1b0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 802a1b4:	4618      	mov	r0, r3
 802a1b6:	370c      	adds	r7, #12
 802a1b8:	46bd      	mov	sp, r7
 802a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1be:	4770      	bx	lr

0802a1c0 <_ZNK9__gnu_cxx13new_allocatorIP14ServoDataFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802a1c0:	b480      	push	{r7}
 802a1c2:	b083      	sub	sp, #12
 802a1c4:	af00      	add	r7, sp, #0
 802a1c6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802a1c8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 802a1cc:	4618      	mov	r0, r3
 802a1ce:	370c      	adds	r7, #12
 802a1d0:	46bd      	mov	sp, r7
 802a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1d6:	4770      	bx	lr

0802a1d8 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802a1d8:	b480      	push	{r7}
 802a1da:	b083      	sub	sp, #12
 802a1dc:	af00      	add	r7, sp, #0
 802a1de:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802a1e0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 802a1e4:	4618      	mov	r0, r3
 802a1e6:	370c      	adds	r7, #12
 802a1e8:	46bd      	mov	sp, r7
 802a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1ee:	4770      	bx	lr

0802a1f0 <_ZSt14__copy_move_a1ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802a1f0:	b580      	push	{r7, lr}
 802a1f2:	b084      	sub	sp, #16
 802a1f4:	af00      	add	r7, sp, #0
 802a1f6:	60f8      	str	r0, [r7, #12]
 802a1f8:	60b9      	str	r1, [r7, #8]
 802a1fa:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802a1fc:	687a      	ldr	r2, [r7, #4]
 802a1fe:	68b9      	ldr	r1, [r7, #8]
 802a200:	68f8      	ldr	r0, [r7, #12]
 802a202:	f000 fba8 	bl	802a956 <_ZSt14__copy_move_a2ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>
 802a206:	4603      	mov	r3, r0
 802a208:	4618      	mov	r0, r3
 802a20a:	3710      	adds	r7, #16
 802a20c:	46bd      	mov	sp, r7
 802a20e:	bd80      	pop	{r7, pc}

0802a210 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 802a210:	b580      	push	{r7, lr}
 802a212:	b082      	sub	sp, #8
 802a214:	af00      	add	r7, sp, #0
 802a216:	6078      	str	r0, [r7, #4]
 802a218:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 802a21a:	683b      	ldr	r3, [r7, #0]
 802a21c:	425b      	negs	r3, r3
 802a21e:	4619      	mov	r1, r3
 802a220:	6878      	ldr	r0, [r7, #4]
 802a222:	f7ff fd9f 	bl	8029d64 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
 802a226:	4603      	mov	r3, r0
 802a228:	4618      	mov	r0, r3
 802a22a:	3708      	adds	r7, #8
 802a22c:	46bd      	mov	sp, r7
 802a22e:	bd80      	pop	{r7, pc}

0802a230 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 802a230:	b580      	push	{r7, lr}
 802a232:	b08c      	sub	sp, #48	; 0x30
 802a234:	af00      	add	r7, sp, #0
 802a236:	60f8      	str	r0, [r7, #12]
 802a238:	60b9      	str	r1, [r7, #8]
 802a23a:	607a      	str	r2, [r7, #4]
 802a23c:	603b      	str	r3, [r7, #0]
	  _ForwardIterator __cur = __result;
 802a23e:	6839      	ldr	r1, [r7, #0]
 802a240:	68f8      	ldr	r0, [r7, #12]
 802a242:	f7fa fa03 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	      for (; __first != __last; ++__first, (void)++__cur)
 802a246:	68ba      	ldr	r2, [r7, #8]
 802a248:	687b      	ldr	r3, [r7, #4]
 802a24a:	429a      	cmp	r2, r3
 802a24c:	d012      	beq.n	802a274 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_+0x44>
		std::_Construct(std::__addressof(*__cur), *__first);
 802a24e:	68f8      	ldr	r0, [r7, #12]
 802a250:	f7fe fbe2 	bl	8028a18 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 802a254:	4603      	mov	r3, r0
 802a256:	4618      	mov	r0, r3
 802a258:	f000 fb8d 	bl	802a976 <_ZSt11__addressofI8IMUFrameEPT_RS1_>
 802a25c:	4603      	mov	r3, r0
 802a25e:	68b9      	ldr	r1, [r7, #8]
 802a260:	4618      	mov	r0, r3
 802a262:	f000 fb93 	bl	802a98c <_ZSt10_ConstructI8IMUFrameJRKS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 802a266:	68bb      	ldr	r3, [r7, #8]
 802a268:	3318      	adds	r3, #24
 802a26a:	60bb      	str	r3, [r7, #8]
 802a26c:	68f8      	ldr	r0, [r7, #12]
 802a26e:	f7fd f83a 	bl	80272e6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>
 802a272:	e7e8      	b.n	802a246 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK8IMUFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_+0x16>
	      return __cur;
 802a274:	bf00      	nop
	}
 802a276:	68f8      	ldr	r0, [r7, #12]
 802a278:	3730      	adds	r7, #48	; 0x30
 802a27a:	46bd      	mov	sp, r7
 802a27c:	bd80      	pop	{r7, pc}

0802a27e <_ZNSt5dequeI8IMUFrameSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 802a27e:	b580      	push	{r7, lr}
 802a280:	b082      	sub	sp, #8
 802a282:	af00      	add	r7, sp, #0
 802a284:	6078      	str	r0, [r7, #4]
 802a286:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 802a288:	683b      	ldr	r3, [r7, #0]
 802a28a:	1c5a      	adds	r2, r3, #1
 802a28c:	687b      	ldr	r3, [r7, #4]
 802a28e:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 802a290:	6879      	ldr	r1, [r7, #4]
 802a292:	6a48      	ldr	r0, [r1, #36]	; 0x24
 802a294:	6879      	ldr	r1, [r7, #4]
 802a296:	6809      	ldr	r1, [r1, #0]
 802a298:	1a41      	subs	r1, r0, r1
 802a29a:	1089      	asrs	r1, r1, #2
 802a29c:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 802a29e:	429a      	cmp	r2, r3
 802a2a0:	d904      	bls.n	802a2ac <_ZNSt5dequeI8IMUFrameSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 802a2a2:	2200      	movs	r2, #0
 802a2a4:	6839      	ldr	r1, [r7, #0]
 802a2a6:	6878      	ldr	r0, [r7, #4]
 802a2a8:	f7fe fd75 	bl	8028d96 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>
      }
 802a2ac:	bf00      	nop
 802a2ae:	3708      	adds	r7, #8
 802a2b0:	46bd      	mov	sp, r7
 802a2b2:	bd80      	pop	{r7, pc}

0802a2b4 <_ZSt18make_move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EESt13move_iteratorIT_ES6_>:
	      const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
 802a2b4:	b580      	push	{r7, lr}
 802a2b6:	b086      	sub	sp, #24
 802a2b8:	af00      	add	r7, sp, #0
 802a2ba:	6078      	str	r0, [r7, #4]
 802a2bc:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 802a2be:	6838      	ldr	r0, [r7, #0]
 802a2c0:	f000 fb7e 	bl	802a9c0 <_ZSt4moveIRSt15_Deque_iteratorI8IMUFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>
 802a2c4:	4602      	mov	r2, r0
 802a2c6:	f107 0308 	add.w	r3, r7, #8
 802a2ca:	4611      	mov	r1, r2
 802a2cc:	4618      	mov	r0, r3
 802a2ce:	f7fa f9bd 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802a2d2:	f107 0308 	add.w	r3, r7, #8
 802a2d6:	4619      	mov	r1, r3
 802a2d8:	6878      	ldr	r0, [r7, #4]
 802a2da:	f000 fb7c 	bl	802a9d6 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ES4_>
 802a2de:	6878      	ldr	r0, [r7, #4]
 802a2e0:	3718      	adds	r7, #24
 802a2e2:	46bd      	mov	sp, r7
 802a2e4:	bd80      	pop	{r7, pc}

0802a2e6 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>:
    class move_iterator
 802a2e6:	b580      	push	{r7, lr}
 802a2e8:	b082      	sub	sp, #8
 802a2ea:	af00      	add	r7, sp, #0
 802a2ec:	6078      	str	r0, [r7, #4]
 802a2ee:	6039      	str	r1, [r7, #0]
 802a2f0:	687b      	ldr	r3, [r7, #4]
 802a2f2:	683a      	ldr	r2, [r7, #0]
 802a2f4:	4611      	mov	r1, r2
 802a2f6:	4618      	mov	r0, r3
 802a2f8:	f7fa f9a8 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802a2fc:	687b      	ldr	r3, [r7, #4]
 802a2fe:	4618      	mov	r0, r3
 802a300:	3708      	adds	r7, #8
 802a302:	46bd      	mov	sp, r7
 802a304:	bd80      	pop	{r7, pc}

0802a306 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_S2_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 802a306:	b580      	push	{r7, lr}
 802a308:	b090      	sub	sp, #64	; 0x40
 802a30a:	af00      	add	r7, sp, #0
 802a30c:	60f8      	str	r0, [r7, #12]
 802a30e:	60b9      	str	r1, [r7, #8]
 802a310:	607a      	str	r2, [r7, #4]
 802a312:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 802a314:	f107 0310 	add.w	r3, r7, #16
 802a318:	68b9      	ldr	r1, [r7, #8]
 802a31a:	4618      	mov	r0, r3
 802a31c:	f7ff ffe3 	bl	802a2e6 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 802a320:	f107 0320 	add.w	r3, r7, #32
 802a324:	6879      	ldr	r1, [r7, #4]
 802a326:	4618      	mov	r0, r3
 802a328:	f7ff ffdd 	bl	802a2e6 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 802a32c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a330:	6839      	ldr	r1, [r7, #0]
 802a332:	4618      	mov	r0, r3
 802a334:	f7fa f98a 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802a338:	68f8      	ldr	r0, [r7, #12]
 802a33a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a33e:	f107 0220 	add.w	r2, r7, #32
 802a342:	f107 0110 	add.w	r1, r7, #16
 802a346:	f000 fb59 	bl	802a9fc <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_ET0_T_S8_S7_>
 802a34a:	68f8      	ldr	r0, [r7, #12]
 802a34c:	3740      	adds	r7, #64	; 0x40
 802a34e:	46bd      	mov	sp, r7
 802a350:	bd80      	pop	{r7, pc}

0802a352 <_ZSt12__miter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>:
    __miter_base(_Iterator __it)
 802a352:	b580      	push	{r7, lr}
 802a354:	b082      	sub	sp, #8
 802a356:	af00      	add	r7, sp, #0
 802a358:	6078      	str	r0, [r7, #4]
 802a35a:	6039      	str	r1, [r7, #0]
    { return __it; }
 802a35c:	6839      	ldr	r1, [r7, #0]
 802a35e:	6878      	ldr	r0, [r7, #4]
 802a360:	f7fa f974 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802a364:	6878      	ldr	r0, [r7, #4]
 802a366:	3708      	adds	r7, #8
 802a368:	46bd      	mov	sp, r7
 802a36a:	bd80      	pop	{r7, pc}

0802a36c <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 802a36c:	b580      	push	{r7, lr}
 802a36e:	b0a0      	sub	sp, #128	; 0x80
 802a370:	af00      	add	r7, sp, #0
 802a372:	60f8      	str	r0, [r7, #12]
 802a374:	60b9      	str	r1, [r7, #8]
 802a376:	607a      	str	r2, [r7, #4]
 802a378:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 802a37a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a37e:	68b9      	ldr	r1, [r7, #8]
 802a380:	4618      	mov	r0, r3
 802a382:	f7fa f963 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802a386:	f107 0320 	add.w	r3, r7, #32
 802a38a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802a38e:	4611      	mov	r1, r2
 802a390:	4618      	mov	r0, r3
 802a392:	f7ff f80f 	bl	80293b4 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 802a396:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802a39a:	6879      	ldr	r1, [r7, #4]
 802a39c:	4618      	mov	r0, r3
 802a39e:	f7fa f955 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802a3a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802a3a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802a3aa:	4611      	mov	r1, r2
 802a3ac:	4618      	mov	r0, r3
 802a3ae:	f7ff f801 	bl	80293b4 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 802a3b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802a3b6:	6839      	ldr	r1, [r7, #0]
 802a3b8:	4618      	mov	r0, r3
 802a3ba:	f7fa f947 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802a3be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802a3c2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 802a3c6:	4611      	mov	r1, r2
 802a3c8:	4618      	mov	r0, r3
 802a3ca:	f7fe fff3 	bl	80293b4 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 802a3ce:	f107 0010 	add.w	r0, r7, #16
 802a3d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802a3d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802a3da:	f107 0120 	add.w	r1, r7, #32
 802a3de:	f000 fb36 	bl	802aa4e <_ZSt14__copy_move_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 802a3e2:	68fb      	ldr	r3, [r7, #12]
 802a3e4:	f107 0210 	add.w	r2, r7, #16
 802a3e8:	6839      	ldr	r1, [r7, #0]
 802a3ea:	4618      	mov	r0, r3
 802a3ec:	f7ff f856 	bl	802949c <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>
    }
 802a3f0:	68f8      	ldr	r0, [r7, #12]
 802a3f2:	3780      	adds	r7, #128	; 0x80
 802a3f4:	46bd      	mov	sp, r7
 802a3f6:	bd80      	pop	{r7, pc}

0802a3f8 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorI8IMUFrameRS1_PS1_ES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 802a3f8:	b580      	push	{r7, lr}
 802a3fa:	b0a0      	sub	sp, #128	; 0x80
 802a3fc:	af00      	add	r7, sp, #0
 802a3fe:	60f8      	str	r0, [r7, #12]
 802a400:	60b9      	str	r1, [r7, #8]
 802a402:	607a      	str	r2, [r7, #4]
 802a404:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 802a406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a40a:	68b9      	ldr	r1, [r7, #8]
 802a40c:	4618      	mov	r0, r3
 802a40e:	f7fa f91d 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802a412:	f107 0320 	add.w	r3, r7, #32
 802a416:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802a41a:	4611      	mov	r1, r2
 802a41c:	4618      	mov	r0, r3
 802a41e:	f7fe ffc9 	bl	80293b4 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 802a422:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802a426:	6879      	ldr	r1, [r7, #4]
 802a428:	4618      	mov	r0, r3
 802a42a:	f7fa f90f 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802a42e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802a432:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802a436:	4611      	mov	r1, r2
 802a438:	4618      	mov	r0, r3
 802a43a:	f7fe ffbb 	bl	80293b4 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 802a43e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802a442:	6839      	ldr	r1, [r7, #0]
 802a444:	4618      	mov	r0, r3
 802a446:	f7fa f901 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802a44a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802a44e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 802a452:	4611      	mov	r1, r2
 802a454:	4618      	mov	r0, r3
 802a456:	f7fe ffad 	bl	80293b4 <_ZSt12__niter_baseISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_S5_>
 802a45a:	f107 0010 	add.w	r0, r7, #16
 802a45e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802a462:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802a466:	f107 0120 	add.w	r1, r7, #32
 802a46a:	f000 fb16 	bl	802aa9a <_ZSt23__copy_move_backward_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 802a46e:	68fb      	ldr	r3, [r7, #12]
 802a470:	f107 0210 	add.w	r2, r7, #16
 802a474:	6839      	ldr	r1, [r7, #0]
 802a476:	4618      	mov	r0, r3
 802a478:	f7ff f810 	bl	802949c <_ZSt12__niter_wrapISt15_Deque_iteratorI8IMUFrameRS1_PS1_EET_RKS5_S5_>
    }
 802a47c:	68f8      	ldr	r0, [r7, #12]
 802a47e:	3780      	adds	r7, #128	; 0x80
 802a480:	46bd      	mov	sp, r7
 802a482:	bd80      	pop	{r7, pc}

0802a484 <_ZSt14__copy_move_a1ILb0EPK14ServoDataFramePS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802a484:	b580      	push	{r7, lr}
 802a486:	b084      	sub	sp, #16
 802a488:	af00      	add	r7, sp, #0
 802a48a:	60f8      	str	r0, [r7, #12]
 802a48c:	60b9      	str	r1, [r7, #8]
 802a48e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802a490:	687a      	ldr	r2, [r7, #4]
 802a492:	68b9      	ldr	r1, [r7, #8]
 802a494:	68f8      	ldr	r0, [r7, #12]
 802a496:	f000 fb26 	bl	802aae6 <_ZSt14__copy_move_a2ILb0EPK14ServoDataFramePS0_ET1_T0_S5_S4_>
 802a49a:	4603      	mov	r3, r0
 802a49c:	4618      	mov	r0, r3
 802a49e:	3710      	adds	r7, #16
 802a4a0:	46bd      	mov	sp, r7
 802a4a2:	bd80      	pop	{r7, pc}

0802a4a4 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 802a4a4:	b580      	push	{r7, lr}
 802a4a6:	b082      	sub	sp, #8
 802a4a8:	af00      	add	r7, sp, #0
 802a4aa:	6078      	str	r0, [r7, #4]
 802a4ac:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 802a4ae:	683b      	ldr	r3, [r7, #0]
 802a4b0:	425b      	negs	r3, r3
 802a4b2:	4619      	mov	r1, r3
 802a4b4:	6878      	ldr	r0, [r7, #4]
 802a4b6:	f7ff fcb9 	bl	8029e2c <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi>
 802a4ba:	4603      	mov	r3, r0
 802a4bc:	4618      	mov	r0, r3
 802a4be:	3708      	adds	r7, #8
 802a4c0:	46bd      	mov	sp, r7
 802a4c2:	bd80      	pop	{r7, pc}

0802a4c4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK14ServoDataFrameSt15_Deque_iteratorIS2_RS2_PS2_EEET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 802a4c4:	b580      	push	{r7, lr}
 802a4c6:	b088      	sub	sp, #32
 802a4c8:	af00      	add	r7, sp, #0
 802a4ca:	60f8      	str	r0, [r7, #12]
 802a4cc:	60b9      	str	r1, [r7, #8]
 802a4ce:	607a      	str	r2, [r7, #4]
 802a4d0:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 802a4d2:	f107 0310 	add.w	r3, r7, #16
 802a4d6:	6839      	ldr	r1, [r7, #0]
 802a4d8:	4618      	mov	r0, r3
 802a4da:	f7fa f909 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802a4de:	68f8      	ldr	r0, [r7, #12]
 802a4e0:	f107 0310 	add.w	r3, r7, #16
 802a4e4:	687a      	ldr	r2, [r7, #4]
 802a4e6:	68b9      	ldr	r1, [r7, #8]
 802a4e8:	f7fc fba5 	bl	8026c36 <_ZSt4copyIPK14ServoDataFrameSt15_Deque_iteratorIS0_RS0_PS0_EET0_T_S8_S7_>
 802a4ec:	68f8      	ldr	r0, [r7, #12]
 802a4ee:	3720      	adds	r7, #32
 802a4f0:	46bd      	mov	sp, r7
 802a4f2:	bd80      	pop	{r7, pc}

0802a4f4 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 802a4f4:	b580      	push	{r7, lr}
 802a4f6:	b082      	sub	sp, #8
 802a4f8:	af00      	add	r7, sp, #0
 802a4fa:	6078      	str	r0, [r7, #4]
 802a4fc:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 802a4fe:	683b      	ldr	r3, [r7, #0]
 802a500:	1c5a      	adds	r2, r3, #1
 802a502:	687b      	ldr	r3, [r7, #4]
 802a504:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 802a506:	6879      	ldr	r1, [r7, #4]
 802a508:	6a48      	ldr	r0, [r1, #36]	; 0x24
 802a50a:	6879      	ldr	r1, [r7, #4]
 802a50c:	6809      	ldr	r1, [r1, #0]
 802a50e:	1a41      	subs	r1, r0, r1
 802a510:	1089      	asrs	r1, r1, #2
 802a512:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 802a514:	429a      	cmp	r2, r3
 802a516:	d904      	bls.n	802a522 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 802a518:	2200      	movs	r2, #0
 802a51a:	6839      	ldr	r1, [r7, #0]
 802a51c:	6878      	ldr	r0, [r7, #4]
 802a51e:	f7fe fd08 	bl	8028f32 <_ZNSt5dequeI14ServoDataFrameSaIS0_EE17_M_reallocate_mapEjb>
      }
 802a522:	bf00      	nop
 802a524:	3708      	adds	r7, #8
 802a526:	46bd      	mov	sp, r7
 802a528:	bd80      	pop	{r7, pc}

0802a52a <_ZSt18make_move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EESt13move_iteratorIT_ES6_>:
    make_move_iterator(_Iterator __i)
 802a52a:	b580      	push	{r7, lr}
 802a52c:	b086      	sub	sp, #24
 802a52e:	af00      	add	r7, sp, #0
 802a530:	6078      	str	r0, [r7, #4]
 802a532:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 802a534:	6838      	ldr	r0, [r7, #0]
 802a536:	f000 fae6 	bl	802ab06 <_ZSt4moveIRSt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>
 802a53a:	4602      	mov	r2, r0
 802a53c:	f107 0308 	add.w	r3, r7, #8
 802a540:	4611      	mov	r1, r2
 802a542:	4618      	mov	r0, r3
 802a544:	f7fa f8d4 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802a548:	f107 0308 	add.w	r3, r7, #8
 802a54c:	4619      	mov	r1, r3
 802a54e:	6878      	ldr	r0, [r7, #4]
 802a550:	f000 fae4 	bl	802ab1c <_ZNSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEC1ES4_>
 802a554:	6878      	ldr	r0, [r7, #4]
 802a556:	3718      	adds	r7, #24
 802a558:	46bd      	mov	sp, r7
 802a55a:	bd80      	pop	{r7, pc}

0802a55c <_ZNSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEC1ERKS5_>:
    class move_iterator
 802a55c:	b580      	push	{r7, lr}
 802a55e:	b082      	sub	sp, #8
 802a560:	af00      	add	r7, sp, #0
 802a562:	6078      	str	r0, [r7, #4]
 802a564:	6039      	str	r1, [r7, #0]
 802a566:	687b      	ldr	r3, [r7, #4]
 802a568:	683a      	ldr	r2, [r7, #0]
 802a56a:	4611      	mov	r1, r2
 802a56c:	4618      	mov	r0, r3
 802a56e:	f7fa f8bf 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802a572:	687b      	ldr	r3, [r7, #4]
 802a574:	4618      	mov	r0, r3
 802a576:	3708      	adds	r7, #8
 802a578:	46bd      	mov	sp, r7
 802a57a:	bd80      	pop	{r7, pc}

0802a57c <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS2_PS2_EES5_S2_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 802a57c:	b580      	push	{r7, lr}
 802a57e:	b090      	sub	sp, #64	; 0x40
 802a580:	af00      	add	r7, sp, #0
 802a582:	60f8      	str	r0, [r7, #12]
 802a584:	60b9      	str	r1, [r7, #8]
 802a586:	607a      	str	r2, [r7, #4]
 802a588:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 802a58a:	f107 0310 	add.w	r3, r7, #16
 802a58e:	68b9      	ldr	r1, [r7, #8]
 802a590:	4618      	mov	r0, r3
 802a592:	f7ff ffe3 	bl	802a55c <_ZNSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEC1ERKS5_>
 802a596:	f107 0320 	add.w	r3, r7, #32
 802a59a:	6879      	ldr	r1, [r7, #4]
 802a59c:	4618      	mov	r0, r3
 802a59e:	f7ff ffdd 	bl	802a55c <_ZNSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEC1ERKS5_>
 802a5a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a5a6:	6839      	ldr	r1, [r7, #0]
 802a5a8:	4618      	mov	r0, r3
 802a5aa:	f7fa f8a1 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802a5ae:	68f8      	ldr	r0, [r7, #12]
 802a5b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a5b4:	f107 0220 	add.w	r2, r7, #32
 802a5b8:	f107 0110 	add.w	r1, r7, #16
 802a5bc:	f000 fac1 	bl	802ab42 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS2_PS2_EES5_ET0_T_S8_S7_>
 802a5c0:	68f8      	ldr	r0, [r7, #12]
 802a5c2:	3740      	adds	r7, #64	; 0x40
 802a5c4:	46bd      	mov	sp, r7
 802a5c6:	bd80      	pop	{r7, pc}

0802a5c8 <_ZSt12__miter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>:
    __miter_base(_Iterator __it)
 802a5c8:	b580      	push	{r7, lr}
 802a5ca:	b082      	sub	sp, #8
 802a5cc:	af00      	add	r7, sp, #0
 802a5ce:	6078      	str	r0, [r7, #4]
 802a5d0:	6039      	str	r1, [r7, #0]
    { return __it; }
 802a5d2:	6839      	ldr	r1, [r7, #0]
 802a5d4:	6878      	ldr	r0, [r7, #4]
 802a5d6:	f7fa f88b 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802a5da:	6878      	ldr	r0, [r7, #4]
 802a5dc:	3708      	adds	r7, #8
 802a5de:	46bd      	mov	sp, r7
 802a5e0:	bd80      	pop	{r7, pc}

0802a5e2 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 802a5e2:	b580      	push	{r7, lr}
 802a5e4:	b0a0      	sub	sp, #128	; 0x80
 802a5e6:	af00      	add	r7, sp, #0
 802a5e8:	60f8      	str	r0, [r7, #12]
 802a5ea:	60b9      	str	r1, [r7, #8]
 802a5ec:	607a      	str	r2, [r7, #4]
 802a5ee:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 802a5f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a5f4:	68b9      	ldr	r1, [r7, #8]
 802a5f6:	4618      	mov	r0, r3
 802a5f8:	f7fa f87a 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802a5fc:	f107 0320 	add.w	r3, r7, #32
 802a600:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802a604:	4611      	mov	r1, r2
 802a606:	4618      	mov	r0, r3
 802a608:	f7ff f951 	bl	80298ae <_ZSt12__niter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>
 802a60c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802a610:	6879      	ldr	r1, [r7, #4]
 802a612:	4618      	mov	r0, r3
 802a614:	f7fa f86c 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802a618:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802a61c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802a620:	4611      	mov	r1, r2
 802a622:	4618      	mov	r0, r3
 802a624:	f7ff f943 	bl	80298ae <_ZSt12__niter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>
 802a628:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802a62c:	6839      	ldr	r1, [r7, #0]
 802a62e:	4618      	mov	r0, r3
 802a630:	f7fa f85e 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802a634:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802a638:	f107 0270 	add.w	r2, r7, #112	; 0x70
 802a63c:	4611      	mov	r1, r2
 802a63e:	4618      	mov	r0, r3
 802a640:	f7ff f935 	bl	80298ae <_ZSt12__niter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>
 802a644:	f107 0010 	add.w	r0, r7, #16
 802a648:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802a64c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802a650:	f107 0120 	add.w	r1, r7, #32
 802a654:	f000 fa9e 	bl	802ab94 <_ZSt14__copy_move_a1ILb1E14ServoDataFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 802a658:	68fb      	ldr	r3, [r7, #12]
 802a65a:	f107 0210 	add.w	r2, r7, #16
 802a65e:	6839      	ldr	r1, [r7, #0]
 802a660:	4618      	mov	r0, r3
 802a662:	f7ff f981 	bl	8029968 <_ZSt12__niter_wrapISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_RKS5_S5_>
    }
 802a666:	68f8      	ldr	r0, [r7, #12]
 802a668:	3780      	adds	r7, #128	; 0x80
 802a66a:	46bd      	mov	sp, r7
 802a66c:	bd80      	pop	{r7, pc}

0802a66e <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 802a66e:	b580      	push	{r7, lr}
 802a670:	b0a0      	sub	sp, #128	; 0x80
 802a672:	af00      	add	r7, sp, #0
 802a674:	60f8      	str	r0, [r7, #12]
 802a676:	60b9      	str	r1, [r7, #8]
 802a678:	607a      	str	r2, [r7, #4]
 802a67a:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 802a67c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a680:	68b9      	ldr	r1, [r7, #8]
 802a682:	4618      	mov	r0, r3
 802a684:	f7fa f834 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802a688:	f107 0320 	add.w	r3, r7, #32
 802a68c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802a690:	4611      	mov	r1, r2
 802a692:	4618      	mov	r0, r3
 802a694:	f7ff f90b 	bl	80298ae <_ZSt12__niter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>
 802a698:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802a69c:	6879      	ldr	r1, [r7, #4]
 802a69e:	4618      	mov	r0, r3
 802a6a0:	f7fa f826 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802a6a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802a6a8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802a6ac:	4611      	mov	r1, r2
 802a6ae:	4618      	mov	r0, r3
 802a6b0:	f7ff f8fd 	bl	80298ae <_ZSt12__niter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>
 802a6b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802a6b8:	6839      	ldr	r1, [r7, #0]
 802a6ba:	4618      	mov	r0, r3
 802a6bc:	f7fa f818 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802a6c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802a6c4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 802a6c8:	4611      	mov	r1, r2
 802a6ca:	4618      	mov	r0, r3
 802a6cc:	f7ff f8ef 	bl	80298ae <_ZSt12__niter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>
 802a6d0:	f107 0010 	add.w	r0, r7, #16
 802a6d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802a6d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802a6dc:	f107 0120 	add.w	r1, r7, #32
 802a6e0:	f000 fa7e 	bl	802abe0 <_ZSt23__copy_move_backward_a1ILb1E14ServoDataFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>
 802a6e4:	68fb      	ldr	r3, [r7, #12]
 802a6e6:	f107 0210 	add.w	r2, r7, #16
 802a6ea:	6839      	ldr	r1, [r7, #0]
 802a6ec:	4618      	mov	r0, r3
 802a6ee:	f7ff f93b 	bl	8029968 <_ZSt12__niter_wrapISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_RKS5_S5_>
    }
 802a6f2:	68f8      	ldr	r0, [r7, #12]
 802a6f4:	3780      	adds	r7, #128	; 0x80
 802a6f6:	46bd      	mov	sp, r7
 802a6f8:	bd80      	pop	{r7, pc}

0802a6fa <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 802a6fa:	b580      	push	{r7, lr}
 802a6fc:	b082      	sub	sp, #8
 802a6fe:	af00      	add	r7, sp, #0
 802a700:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 802a702:	6878      	ldr	r0, [r7, #4]
 802a704:	f000 f856 	bl	802a7b4 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>
 802a708:	4603      	mov	r3, r0
 802a70a:	4618      	mov	r0, r3
 802a70c:	3708      	adds	r7, #8
 802a70e:	46bd      	mov	sp, r7
 802a710:	bd80      	pop	{r7, pc}

0802a712 <_ZSt12__miter_baseIPP8IMUFrameET_S3_>:
    __miter_base(_Iterator __it)
 802a712:	b480      	push	{r7}
 802a714:	b083      	sub	sp, #12
 802a716:	af00      	add	r7, sp, #0
 802a718:	6078      	str	r0, [r7, #4]
    { return __it; }
 802a71a:	687b      	ldr	r3, [r7, #4]
 802a71c:	4618      	mov	r0, r3
 802a71e:	370c      	adds	r7, #12
 802a720:	46bd      	mov	sp, r7
 802a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a726:	4770      	bx	lr

0802a728 <_ZSt13__copy_move_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 802a728:	b5b0      	push	{r4, r5, r7, lr}
 802a72a:	b084      	sub	sp, #16
 802a72c:	af00      	add	r7, sp, #0
 802a72e:	60f8      	str	r0, [r7, #12]
 802a730:	60b9      	str	r1, [r7, #8]
 802a732:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 802a734:	68f8      	ldr	r0, [r7, #12]
 802a736:	f000 fa79 	bl	802ac2c <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 802a73a:	4604      	mov	r4, r0
 802a73c:	68b8      	ldr	r0, [r7, #8]
 802a73e:	f000 fa75 	bl	802ac2c <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 802a742:	4605      	mov	r5, r0
 802a744:	687b      	ldr	r3, [r7, #4]
 802a746:	4618      	mov	r0, r3
 802a748:	f000 fa70 	bl	802ac2c <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 802a74c:	4603      	mov	r3, r0
 802a74e:	461a      	mov	r2, r3
 802a750:	4629      	mov	r1, r5
 802a752:	4620      	mov	r0, r4
 802a754:	f000 fa75 	bl	802ac42 <_ZSt14__copy_move_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 802a758:	4602      	mov	r2, r0
 802a75a:	1d3b      	adds	r3, r7, #4
 802a75c:	4611      	mov	r1, r2
 802a75e:	4618      	mov	r0, r3
 802a760:	f000 fa7f 	bl	802ac62 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>
 802a764:	4603      	mov	r3, r0
    }
 802a766:	4618      	mov	r0, r3
 802a768:	3710      	adds	r7, #16
 802a76a:	46bd      	mov	sp, r7
 802a76c:	bdb0      	pop	{r4, r5, r7, pc}

0802a76e <_ZSt22__copy_move_backward_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 802a76e:	b5b0      	push	{r4, r5, r7, lr}
 802a770:	b084      	sub	sp, #16
 802a772:	af00      	add	r7, sp, #0
 802a774:	60f8      	str	r0, [r7, #12]
 802a776:	60b9      	str	r1, [r7, #8]
 802a778:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 802a77a:	68f8      	ldr	r0, [r7, #12]
 802a77c:	f000 fa56 	bl	802ac2c <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 802a780:	4604      	mov	r4, r0
 802a782:	68b8      	ldr	r0, [r7, #8]
 802a784:	f000 fa52 	bl	802ac2c <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 802a788:	4605      	mov	r5, r0
 802a78a:	687b      	ldr	r3, [r7, #4]
 802a78c:	4618      	mov	r0, r3
 802a78e:	f000 fa4d 	bl	802ac2c <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 802a792:	4603      	mov	r3, r0
 802a794:	461a      	mov	r2, r3
 802a796:	4629      	mov	r1, r5
 802a798:	4620      	mov	r0, r4
 802a79a:	f000 fa6e 	bl	802ac7a <_ZSt23__copy_move_backward_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 802a79e:	4602      	mov	r2, r0
 802a7a0:	1d3b      	adds	r3, r7, #4
 802a7a2:	4611      	mov	r1, r2
 802a7a4:	4618      	mov	r0, r3
 802a7a6:	f000 fa5c 	bl	802ac62 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>
 802a7aa:	4603      	mov	r3, r0
    }
 802a7ac:	4618      	mov	r0, r3
 802a7ae:	3710      	adds	r7, #16
 802a7b0:	46bd      	mov	sp, r7
 802a7b2:	bdb0      	pop	{r4, r5, r7, pc}

0802a7b4 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802a7b4:	b480      	push	{r7}
 802a7b6:	b083      	sub	sp, #12
 802a7b8:	af00      	add	r7, sp, #0
 802a7ba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802a7bc:	4b03      	ldr	r3, [pc, #12]	; (802a7cc <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv+0x18>)
      }
 802a7be:	4618      	mov	r0, r3
 802a7c0:	370c      	adds	r7, #12
 802a7c2:	46bd      	mov	sp, r7
 802a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7c8:	4770      	bx	lr
 802a7ca:	bf00      	nop
 802a7cc:	05555555 	.word	0x05555555

0802a7d0 <_ZNK9__gnu_cxx13new_allocatorI14ServoDataFrameE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 802a7d0:	b580      	push	{r7, lr}
 802a7d2:	b082      	sub	sp, #8
 802a7d4:	af00      	add	r7, sp, #0
 802a7d6:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 802a7d8:	6878      	ldr	r0, [r7, #4]
 802a7da:	f000 f857 	bl	802a88c <_ZNK9__gnu_cxx13new_allocatorI14ServoDataFrameE11_M_max_sizeEv>
 802a7de:	4603      	mov	r3, r0
 802a7e0:	4618      	mov	r0, r3
 802a7e2:	3708      	adds	r7, #8
 802a7e4:	46bd      	mov	sp, r7
 802a7e6:	bd80      	pop	{r7, pc}

0802a7e8 <_ZSt12__miter_baseIPP14ServoDataFrameET_S3_>:
    __miter_base(_Iterator __it)
 802a7e8:	b480      	push	{r7}
 802a7ea:	b083      	sub	sp, #12
 802a7ec:	af00      	add	r7, sp, #0
 802a7ee:	6078      	str	r0, [r7, #4]
    { return __it; }
 802a7f0:	687b      	ldr	r3, [r7, #4]
 802a7f2:	4618      	mov	r0, r3
 802a7f4:	370c      	adds	r7, #12
 802a7f6:	46bd      	mov	sp, r7
 802a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7fc:	4770      	bx	lr

0802a7fe <_ZSt13__copy_move_aILb0EPP14ServoDataFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 802a7fe:	b5b0      	push	{r4, r5, r7, lr}
 802a800:	b084      	sub	sp, #16
 802a802:	af00      	add	r7, sp, #0
 802a804:	60f8      	str	r0, [r7, #12]
 802a806:	60b9      	str	r1, [r7, #8]
 802a808:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 802a80a:	68f8      	ldr	r0, [r7, #12]
 802a80c:	f000 fa45 	bl	802ac9a <_ZSt12__niter_baseIPP14ServoDataFrameET_S3_>
 802a810:	4604      	mov	r4, r0
 802a812:	68b8      	ldr	r0, [r7, #8]
 802a814:	f000 fa41 	bl	802ac9a <_ZSt12__niter_baseIPP14ServoDataFrameET_S3_>
 802a818:	4605      	mov	r5, r0
 802a81a:	687b      	ldr	r3, [r7, #4]
 802a81c:	4618      	mov	r0, r3
 802a81e:	f000 fa3c 	bl	802ac9a <_ZSt12__niter_baseIPP14ServoDataFrameET_S3_>
 802a822:	4603      	mov	r3, r0
 802a824:	461a      	mov	r2, r3
 802a826:	4629      	mov	r1, r5
 802a828:	4620      	mov	r0, r4
 802a82a:	f000 fa41 	bl	802acb0 <_ZSt14__copy_move_a1ILb0EPP14ServoDataFrameS2_ET1_T0_S4_S3_>
 802a82e:	4602      	mov	r2, r0
 802a830:	1d3b      	adds	r3, r7, #4
 802a832:	4611      	mov	r1, r2
 802a834:	4618      	mov	r0, r3
 802a836:	f000 fa4b 	bl	802acd0 <_ZSt12__niter_wrapIPP14ServoDataFrameET_RKS3_S3_>
 802a83a:	4603      	mov	r3, r0
    }
 802a83c:	4618      	mov	r0, r3
 802a83e:	3710      	adds	r7, #16
 802a840:	46bd      	mov	sp, r7
 802a842:	bdb0      	pop	{r4, r5, r7, pc}

0802a844 <_ZSt22__copy_move_backward_aILb0EPP14ServoDataFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 802a844:	b5b0      	push	{r4, r5, r7, lr}
 802a846:	b084      	sub	sp, #16
 802a848:	af00      	add	r7, sp, #0
 802a84a:	60f8      	str	r0, [r7, #12]
 802a84c:	60b9      	str	r1, [r7, #8]
 802a84e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 802a850:	68f8      	ldr	r0, [r7, #12]
 802a852:	f000 fa22 	bl	802ac9a <_ZSt12__niter_baseIPP14ServoDataFrameET_S3_>
 802a856:	4604      	mov	r4, r0
 802a858:	68b8      	ldr	r0, [r7, #8]
 802a85a:	f000 fa1e 	bl	802ac9a <_ZSt12__niter_baseIPP14ServoDataFrameET_S3_>
 802a85e:	4605      	mov	r5, r0
 802a860:	687b      	ldr	r3, [r7, #4]
 802a862:	4618      	mov	r0, r3
 802a864:	f000 fa19 	bl	802ac9a <_ZSt12__niter_baseIPP14ServoDataFrameET_S3_>
 802a868:	4603      	mov	r3, r0
 802a86a:	461a      	mov	r2, r3
 802a86c:	4629      	mov	r1, r5
 802a86e:	4620      	mov	r0, r4
 802a870:	f000 fa3a 	bl	802ace8 <_ZSt23__copy_move_backward_a1ILb0EPP14ServoDataFrameS2_ET1_T0_S4_S3_>
 802a874:	4602      	mov	r2, r0
 802a876:	1d3b      	adds	r3, r7, #4
 802a878:	4611      	mov	r1, r2
 802a87a:	4618      	mov	r0, r3
 802a87c:	f000 fa28 	bl	802acd0 <_ZSt12__niter_wrapIPP14ServoDataFrameET_RKS3_S3_>
 802a880:	4603      	mov	r3, r0
    }
 802a882:	4618      	mov	r0, r3
 802a884:	3710      	adds	r7, #16
 802a886:	46bd      	mov	sp, r7
 802a888:	bdb0      	pop	{r4, r5, r7, pc}
	...

0802a88c <_ZNK9__gnu_cxx13new_allocatorI14ServoDataFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802a88c:	b480      	push	{r7}
 802a88e:	b083      	sub	sp, #12
 802a890:	af00      	add	r7, sp, #0
 802a892:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802a894:	4b03      	ldr	r3, [pc, #12]	; (802a8a4 <_ZNK9__gnu_cxx13new_allocatorI14ServoDataFrameE11_M_max_sizeEv+0x18>)
      }
 802a896:	4618      	mov	r0, r3
 802a898:	370c      	adds	r7, #12
 802a89a:	46bd      	mov	sp, r7
 802a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8a0:	4770      	bx	lr
 802a8a2:	bf00      	nop
 802a8a4:	007a44c6 	.word	0x007a44c6

0802a8a8 <_ZSt12__niter_baseIPPjET_S2_>:
    __niter_base(_Iterator __it)
 802a8a8:	b480      	push	{r7}
 802a8aa:	b083      	sub	sp, #12
 802a8ac:	af00      	add	r7, sp, #0
 802a8ae:	6078      	str	r0, [r7, #4]
    { return __it; }
 802a8b0:	687b      	ldr	r3, [r7, #4]
 802a8b2:	4618      	mov	r0, r3
 802a8b4:	370c      	adds	r7, #12
 802a8b6:	46bd      	mov	sp, r7
 802a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8bc:	4770      	bx	lr

0802a8be <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802a8be:	b580      	push	{r7, lr}
 802a8c0:	b084      	sub	sp, #16
 802a8c2:	af00      	add	r7, sp, #0
 802a8c4:	60f8      	str	r0, [r7, #12]
 802a8c6:	60b9      	str	r1, [r7, #8]
 802a8c8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802a8ca:	687a      	ldr	r2, [r7, #4]
 802a8cc:	68b9      	ldr	r1, [r7, #8]
 802a8ce:	68f8      	ldr	r0, [r7, #12]
 802a8d0:	f000 fa1a 	bl	802ad08 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 802a8d4:	4603      	mov	r3, r0
 802a8d6:	4618      	mov	r0, r3
 802a8d8:	3710      	adds	r7, #16
 802a8da:	46bd      	mov	sp, r7
 802a8dc:	bd80      	pop	{r7, pc}

0802a8de <_ZSt12__niter_wrapIPPjET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802a8de:	b480      	push	{r7}
 802a8e0:	b083      	sub	sp, #12
 802a8e2:	af00      	add	r7, sp, #0
 802a8e4:	6078      	str	r0, [r7, #4]
 802a8e6:	6039      	str	r1, [r7, #0]
    { return __res; }
 802a8e8:	683b      	ldr	r3, [r7, #0]
 802a8ea:	4618      	mov	r0, r3
 802a8ec:	370c      	adds	r7, #12
 802a8ee:	46bd      	mov	sp, r7
 802a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8f4:	4770      	bx	lr

0802a8f6 <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802a8f6:	b580      	push	{r7, lr}
 802a8f8:	b084      	sub	sp, #16
 802a8fa:	af00      	add	r7, sp, #0
 802a8fc:	60f8      	str	r0, [r7, #12]
 802a8fe:	60b9      	str	r1, [r7, #8]
 802a900:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802a902:	687a      	ldr	r2, [r7, #4]
 802a904:	68b9      	ldr	r1, [r7, #8]
 802a906:	68f8      	ldr	r0, [r7, #12]
 802a908:	f000 fa0e 	bl	802ad28 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 802a90c:	4603      	mov	r3, r0
 802a90e:	4618      	mov	r0, r3
 802a910:	3710      	adds	r7, #16
 802a912:	46bd      	mov	sp, r7
 802a914:	bd80      	pop	{r7, pc}

0802a916 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802a916:	b580      	push	{r7, lr}
 802a918:	b084      	sub	sp, #16
 802a91a:	af00      	add	r7, sp, #0
 802a91c:	60f8      	str	r0, [r7, #12]
 802a91e:	60b9      	str	r1, [r7, #8]
 802a920:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802a922:	687a      	ldr	r2, [r7, #4]
 802a924:	68b9      	ldr	r1, [r7, #8]
 802a926:	68f8      	ldr	r0, [r7, #12]
 802a928:	f000 fa0e 	bl	802ad48 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802a92c:	4603      	mov	r3, r0
    }
 802a92e:	4618      	mov	r0, r3
 802a930:	3710      	adds	r7, #16
 802a932:	46bd      	mov	sp, r7
 802a934:	bd80      	pop	{r7, pc}

0802a936 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802a936:	b580      	push	{r7, lr}
 802a938:	b084      	sub	sp, #16
 802a93a:	af00      	add	r7, sp, #0
 802a93c:	60f8      	str	r0, [r7, #12]
 802a93e:	60b9      	str	r1, [r7, #8]
 802a940:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802a942:	687a      	ldr	r2, [r7, #4]
 802a944:	68b9      	ldr	r1, [r7, #8]
 802a946:	68f8      	ldr	r0, [r7, #12]
 802a948:	f000 fa1b 	bl	802ad82 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802a94c:	4603      	mov	r3, r0
    }
 802a94e:	4618      	mov	r0, r3
 802a950:	3710      	adds	r7, #16
 802a952:	46bd      	mov	sp, r7
 802a954:	bd80      	pop	{r7, pc}

0802a956 <_ZSt14__copy_move_a2ILb0EPK8IMUFramePS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802a956:	b580      	push	{r7, lr}
 802a958:	b084      	sub	sp, #16
 802a95a:	af00      	add	r7, sp, #0
 802a95c:	60f8      	str	r0, [r7, #12]
 802a95e:	60b9      	str	r1, [r7, #8]
 802a960:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802a962:	687a      	ldr	r2, [r7, #4]
 802a964:	68b9      	ldr	r1, [r7, #8]
 802a966:	68f8      	ldr	r0, [r7, #12]
 802a968:	f000 fa2e 	bl	802adc8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>
 802a96c:	4603      	mov	r3, r0
    }
 802a96e:	4618      	mov	r0, r3
 802a970:	3710      	adds	r7, #16
 802a972:	46bd      	mov	sp, r7
 802a974:	bd80      	pop	{r7, pc}

0802a976 <_ZSt11__addressofI8IMUFrameEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 802a976:	b480      	push	{r7}
 802a978:	b083      	sub	sp, #12
 802a97a:	af00      	add	r7, sp, #0
 802a97c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 802a97e:	687b      	ldr	r3, [r7, #4]
 802a980:	4618      	mov	r0, r3
 802a982:	370c      	adds	r7, #12
 802a984:	46bd      	mov	sp, r7
 802a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a98a:	4770      	bx	lr

0802a98c <_ZSt10_ConstructI8IMUFrameJRKS0_EEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
 802a98c:	b5b0      	push	{r4, r5, r7, lr}
 802a98e:	b082      	sub	sp, #8
 802a990:	af00      	add	r7, sp, #0
 802a992:	6078      	str	r0, [r7, #4]
 802a994:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 802a996:	6838      	ldr	r0, [r7, #0]
 802a998:	f7fc fc44 	bl	8027224 <_ZSt7forwardIRK8IMUFrameEOT_RNSt16remove_referenceIS3_E4typeE>
 802a99c:	4605      	mov	r5, r0
 802a99e:	687b      	ldr	r3, [r7, #4]
 802a9a0:	4619      	mov	r1, r3
 802a9a2:	2018      	movs	r0, #24
 802a9a4:	f7f6 fa26 	bl	8020df4 <_ZnwjPv>
 802a9a8:	4603      	mov	r3, r0
 802a9aa:	461c      	mov	r4, r3
 802a9ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a9ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a9b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 802a9b4:	e884 0003 	stmia.w	r4, {r0, r1}
 802a9b8:	bf00      	nop
 802a9ba:	3708      	adds	r7, #8
 802a9bc:	46bd      	mov	sp, r7
 802a9be:	bdb0      	pop	{r4, r5, r7, pc}

0802a9c0 <_ZSt4moveIRSt15_Deque_iteratorI8IMUFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 802a9c0:	b480      	push	{r7}
 802a9c2:	b083      	sub	sp, #12
 802a9c4:	af00      	add	r7, sp, #0
 802a9c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802a9c8:	687b      	ldr	r3, [r7, #4]
 802a9ca:	4618      	mov	r0, r3
 802a9cc:	370c      	adds	r7, #12
 802a9ce:	46bd      	mov	sp, r7
 802a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9d4:	4770      	bx	lr

0802a9d6 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ES4_>:
      move_iterator(iterator_type __i)
 802a9d6:	b590      	push	{r4, r7, lr}
 802a9d8:	b083      	sub	sp, #12
 802a9da:	af00      	add	r7, sp, #0
 802a9dc:	6078      	str	r0, [r7, #4]
 802a9de:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 802a9e0:	687c      	ldr	r4, [r7, #4]
 802a9e2:	6838      	ldr	r0, [r7, #0]
 802a9e4:	f7ff ffec 	bl	802a9c0 <_ZSt4moveIRSt15_Deque_iteratorI8IMUFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>
 802a9e8:	4603      	mov	r3, r0
 802a9ea:	4619      	mov	r1, r3
 802a9ec:	4620      	mov	r0, r4
 802a9ee:	f7f9 fe2d 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802a9f2:	687b      	ldr	r3, [r7, #4]
 802a9f4:	4618      	mov	r0, r3
 802a9f6:	370c      	adds	r7, #12
 802a9f8:	46bd      	mov	sp, r7
 802a9fa:	bd90      	pop	{r4, r7, pc}

0802a9fc <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS2_PS2_EES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 802a9fc:	b580      	push	{r7, lr}
 802a9fe:	b092      	sub	sp, #72	; 0x48
 802aa00:	af00      	add	r7, sp, #0
 802aa02:	60f8      	str	r0, [r7, #12]
 802aa04:	60b9      	str	r1, [r7, #8]
 802aa06:	607a      	str	r2, [r7, #4]
 802aa08:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 802aa0a:	2301      	movs	r3, #1
 802aa0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 802aa10:	f107 0314 	add.w	r3, r7, #20
 802aa14:	68b9      	ldr	r1, [r7, #8]
 802aa16:	4618      	mov	r0, r3
 802aa18:	f7ff fc65 	bl	802a2e6 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 802aa1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802aa20:	6879      	ldr	r1, [r7, #4]
 802aa22:	4618      	mov	r0, r3
 802aa24:	f7ff fc5f 	bl	802a2e6 <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEC1ERKS5_>
 802aa28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802aa2c:	6839      	ldr	r1, [r7, #0]
 802aa2e:	4618      	mov	r0, r3
 802aa30:	f7f9 fe0c 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802aa34:	68f8      	ldr	r0, [r7, #12]
 802aa36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802aa3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802aa3e:	f107 0114 	add.w	r1, r7, #20
 802aa42:	f000 f9eb 	bl	802ae1c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_>
    }
 802aa46:	68f8      	ldr	r0, [r7, #12]
 802aa48:	3748      	adds	r7, #72	; 0x48
 802aa4a:	46bd      	mov	sp, r7
 802aa4c:	bd80      	pop	{r7, pc}

0802aa4e <_ZSt14__copy_move_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 802aa4e:	b580      	push	{r7, lr}
 802aa50:	b090      	sub	sp, #64	; 0x40
 802aa52:	af00      	add	r7, sp, #0
 802aa54:	60f8      	str	r0, [r7, #12]
 802aa56:	60b9      	str	r1, [r7, #8]
 802aa58:	607a      	str	r2, [r7, #4]
 802aa5a:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 802aa5c:	f107 0310 	add.w	r3, r7, #16
 802aa60:	68b9      	ldr	r1, [r7, #8]
 802aa62:	4618      	mov	r0, r3
 802aa64:	f7f9 fdf2 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802aa68:	f107 0320 	add.w	r3, r7, #32
 802aa6c:	6879      	ldr	r1, [r7, #4]
 802aa6e:	4618      	mov	r0, r3
 802aa70:	f7f9 fdec 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802aa74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802aa78:	6839      	ldr	r1, [r7, #0]
 802aa7a:	4618      	mov	r0, r3
 802aa7c:	f7f9 fde6 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802aa80:	68f8      	ldr	r0, [r7, #12]
 802aa82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802aa86:	f107 0220 	add.w	r2, r7, #32
 802aa8a:	f107 0110 	add.w	r1, r7, #16
 802aa8e:	f000 f9f3 	bl	802ae78 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>
 802aa92:	68f8      	ldr	r0, [r7, #12]
 802aa94:	3740      	adds	r7, #64	; 0x40
 802aa96:	46bd      	mov	sp, r7
 802aa98:	bd80      	pop	{r7, pc}

0802aa9a <_ZSt23__copy_move_backward_a1ILb1E8IMUFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 802aa9a:	b580      	push	{r7, lr}
 802aa9c:	b090      	sub	sp, #64	; 0x40
 802aa9e:	af00      	add	r7, sp, #0
 802aaa0:	60f8      	str	r0, [r7, #12]
 802aaa2:	60b9      	str	r1, [r7, #8]
 802aaa4:	607a      	str	r2, [r7, #4]
 802aaa6:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 802aaa8:	f107 0310 	add.w	r3, r7, #16
 802aaac:	68b9      	ldr	r1, [r7, #8]
 802aaae:	4618      	mov	r0, r3
 802aab0:	f7f9 fdcc 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802aab4:	f107 0320 	add.w	r3, r7, #32
 802aab8:	6879      	ldr	r1, [r7, #4]
 802aaba:	4618      	mov	r0, r3
 802aabc:	f7f9 fdc6 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802aac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802aac4:	6839      	ldr	r1, [r7, #0]
 802aac6:	4618      	mov	r0, r3
 802aac8:	f7f9 fdc0 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802aacc:	68f8      	ldr	r0, [r7, #12]
 802aace:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802aad2:	f107 0220 	add.w	r2, r7, #32
 802aad6:	f107 0110 	add.w	r1, r7, #16
 802aada:	f000 fa48 	bl	802af6e <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>
 802aade:	68f8      	ldr	r0, [r7, #12]
 802aae0:	3740      	adds	r7, #64	; 0x40
 802aae2:	46bd      	mov	sp, r7
 802aae4:	bd80      	pop	{r7, pc}

0802aae6 <_ZSt14__copy_move_a2ILb0EPK14ServoDataFramePS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802aae6:	b580      	push	{r7, lr}
 802aae8:	b084      	sub	sp, #16
 802aaea:	af00      	add	r7, sp, #0
 802aaec:	60f8      	str	r0, [r7, #12]
 802aaee:	60b9      	str	r1, [r7, #8]
 802aaf0:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802aaf2:	687a      	ldr	r2, [r7, #4]
 802aaf4:	68b9      	ldr	r1, [r7, #8]
 802aaf6:	68f8      	ldr	r0, [r7, #12]
 802aaf8:	f000 fab4 	bl	802b064 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI14ServoDataFrameEEPT_PKS4_S7_S5_>
 802aafc:	4603      	mov	r3, r0
    }
 802aafe:	4618      	mov	r0, r3
 802ab00:	3710      	adds	r7, #16
 802ab02:	46bd      	mov	sp, r7
 802ab04:	bd80      	pop	{r7, pc}

0802ab06 <_ZSt4moveIRSt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 802ab06:	b480      	push	{r7}
 802ab08:	b083      	sub	sp, #12
 802ab0a:	af00      	add	r7, sp, #0
 802ab0c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802ab0e:	687b      	ldr	r3, [r7, #4]
 802ab10:	4618      	mov	r0, r3
 802ab12:	370c      	adds	r7, #12
 802ab14:	46bd      	mov	sp, r7
 802ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab1a:	4770      	bx	lr

0802ab1c <_ZNSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEC1ES4_>:
      move_iterator(iterator_type __i)
 802ab1c:	b590      	push	{r4, r7, lr}
 802ab1e:	b083      	sub	sp, #12
 802ab20:	af00      	add	r7, sp, #0
 802ab22:	6078      	str	r0, [r7, #4]
 802ab24:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 802ab26:	687c      	ldr	r4, [r7, #4]
 802ab28:	6838      	ldr	r0, [r7, #0]
 802ab2a:	f7ff ffec 	bl	802ab06 <_ZSt4moveIRSt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEONSt16remove_referenceIT_E4typeEOS7_>
 802ab2e:	4603      	mov	r3, r0
 802ab30:	4619      	mov	r1, r3
 802ab32:	4620      	mov	r0, r4
 802ab34:	f7f9 fddc 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802ab38:	687b      	ldr	r3, [r7, #4]
 802ab3a:	4618      	mov	r0, r3
 802ab3c:	370c      	adds	r7, #12
 802ab3e:	46bd      	mov	sp, r7
 802ab40:	bd90      	pop	{r4, r7, pc}

0802ab42 <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS2_PS2_EES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 802ab42:	b580      	push	{r7, lr}
 802ab44:	b092      	sub	sp, #72	; 0x48
 802ab46:	af00      	add	r7, sp, #0
 802ab48:	60f8      	str	r0, [r7, #12]
 802ab4a:	60b9      	str	r1, [r7, #8]
 802ab4c:	607a      	str	r2, [r7, #4]
 802ab4e:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 802ab50:	2301      	movs	r3, #1
 802ab52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 802ab56:	f107 0314 	add.w	r3, r7, #20
 802ab5a:	68b9      	ldr	r1, [r7, #8]
 802ab5c:	4618      	mov	r0, r3
 802ab5e:	f7ff fcfd 	bl	802a55c <_ZNSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEC1ERKS5_>
 802ab62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802ab66:	6879      	ldr	r1, [r7, #4]
 802ab68:	4618      	mov	r0, r3
 802ab6a:	f7ff fcf7 	bl	802a55c <_ZNSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEC1ERKS5_>
 802ab6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802ab72:	6839      	ldr	r1, [r7, #0]
 802ab74:	4618      	mov	r0, r3
 802ab76:	f7f9 fdbb 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802ab7a:	68f8      	ldr	r0, [r7, #12]
 802ab7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802ab80:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802ab84:	f107 0114 	add.w	r1, r7, #20
 802ab88:	f000 fa94 	bl	802b0b4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS4_PS4_EES7_EET0_T_SA_S9_>
    }
 802ab8c:	68f8      	ldr	r0, [r7, #12]
 802ab8e:	3748      	adds	r7, #72	; 0x48
 802ab90:	46bd      	mov	sp, r7
 802ab92:	bd80      	pop	{r7, pc}

0802ab94 <_ZSt14__copy_move_a1ILb1E14ServoDataFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 802ab94:	b580      	push	{r7, lr}
 802ab96:	b090      	sub	sp, #64	; 0x40
 802ab98:	af00      	add	r7, sp, #0
 802ab9a:	60f8      	str	r0, [r7, #12]
 802ab9c:	60b9      	str	r1, [r7, #8]
 802ab9e:	607a      	str	r2, [r7, #4]
 802aba0:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 802aba2:	f107 0310 	add.w	r3, r7, #16
 802aba6:	68b9      	ldr	r1, [r7, #8]
 802aba8:	4618      	mov	r0, r3
 802abaa:	f7f9 fda1 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802abae:	f107 0320 	add.w	r3, r7, #32
 802abb2:	6879      	ldr	r1, [r7, #4]
 802abb4:	4618      	mov	r0, r3
 802abb6:	f7f9 fd9b 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802abba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802abbe:	6839      	ldr	r1, [r7, #0]
 802abc0:	4618      	mov	r0, r3
 802abc2:	f7f9 fd95 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802abc6:	68f8      	ldr	r0, [r7, #12]
 802abc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802abcc:	f107 0220 	add.w	r2, r7, #32
 802abd0:	f107 0110 	add.w	r1, r7, #16
 802abd4:	f000 fa94 	bl	802b100 <_ZSt15__copy_move_ditILb1E14ServoDataFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>
 802abd8:	68f8      	ldr	r0, [r7, #12]
 802abda:	3740      	adds	r7, #64	; 0x40
 802abdc:	46bd      	mov	sp, r7
 802abde:	bd80      	pop	{r7, pc}

0802abe0 <_ZSt23__copy_move_backward_a1ILb1E14ServoDataFrameRS0_PS0_S0_ESt15_Deque_iteratorIT3_RS4_PS4_ES3_IT0_T1_T2_ESB_S7_>:
    __copy_move_backward_a1(
 802abe0:	b580      	push	{r7, lr}
 802abe2:	b090      	sub	sp, #64	; 0x40
 802abe4:	af00      	add	r7, sp, #0
 802abe6:	60f8      	str	r0, [r7, #12]
 802abe8:	60b9      	str	r1, [r7, #8]
 802abea:	607a      	str	r2, [r7, #4]
 802abec:	603b      	str	r3, [r7, #0]
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 802abee:	f107 0310 	add.w	r3, r7, #16
 802abf2:	68b9      	ldr	r1, [r7, #8]
 802abf4:	4618      	mov	r0, r3
 802abf6:	f7f9 fd7b 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802abfa:	f107 0320 	add.w	r3, r7, #32
 802abfe:	6879      	ldr	r1, [r7, #4]
 802ac00:	4618      	mov	r0, r3
 802ac02:	f7f9 fd75 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802ac06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802ac0a:	6839      	ldr	r1, [r7, #0]
 802ac0c:	4618      	mov	r0, r3
 802ac0e:	f7f9 fd6f 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802ac12:	68f8      	ldr	r0, [r7, #12]
 802ac14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802ac18:	f107 0220 	add.w	r2, r7, #32
 802ac1c:	f107 0110 	add.w	r1, r7, #16
 802ac20:	f000 fae9 	bl	802b1f6 <_ZSt24__copy_move_backward_ditILb1E14ServoDataFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>
 802ac24:	68f8      	ldr	r0, [r7, #12]
 802ac26:	3740      	adds	r7, #64	; 0x40
 802ac28:	46bd      	mov	sp, r7
 802ac2a:	bd80      	pop	{r7, pc}

0802ac2c <_ZSt12__niter_baseIPP8IMUFrameET_S3_>:
    __niter_base(_Iterator __it)
 802ac2c:	b480      	push	{r7}
 802ac2e:	b083      	sub	sp, #12
 802ac30:	af00      	add	r7, sp, #0
 802ac32:	6078      	str	r0, [r7, #4]
    { return __it; }
 802ac34:	687b      	ldr	r3, [r7, #4]
 802ac36:	4618      	mov	r0, r3
 802ac38:	370c      	adds	r7, #12
 802ac3a:	46bd      	mov	sp, r7
 802ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac40:	4770      	bx	lr

0802ac42 <_ZSt14__copy_move_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802ac42:	b580      	push	{r7, lr}
 802ac44:	b084      	sub	sp, #16
 802ac46:	af00      	add	r7, sp, #0
 802ac48:	60f8      	str	r0, [r7, #12]
 802ac4a:	60b9      	str	r1, [r7, #8]
 802ac4c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802ac4e:	687a      	ldr	r2, [r7, #4]
 802ac50:	68b9      	ldr	r1, [r7, #8]
 802ac52:	68f8      	ldr	r0, [r7, #12]
 802ac54:	f000 fb4a 	bl	802b2ec <_ZSt14__copy_move_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 802ac58:	4603      	mov	r3, r0
 802ac5a:	4618      	mov	r0, r3
 802ac5c:	3710      	adds	r7, #16
 802ac5e:	46bd      	mov	sp, r7
 802ac60:	bd80      	pop	{r7, pc}

0802ac62 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802ac62:	b480      	push	{r7}
 802ac64:	b083      	sub	sp, #12
 802ac66:	af00      	add	r7, sp, #0
 802ac68:	6078      	str	r0, [r7, #4]
 802ac6a:	6039      	str	r1, [r7, #0]
    { return __res; }
 802ac6c:	683b      	ldr	r3, [r7, #0]
 802ac6e:	4618      	mov	r0, r3
 802ac70:	370c      	adds	r7, #12
 802ac72:	46bd      	mov	sp, r7
 802ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac78:	4770      	bx	lr

0802ac7a <_ZSt23__copy_move_backward_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802ac7a:	b580      	push	{r7, lr}
 802ac7c:	b084      	sub	sp, #16
 802ac7e:	af00      	add	r7, sp, #0
 802ac80:	60f8      	str	r0, [r7, #12]
 802ac82:	60b9      	str	r1, [r7, #8]
 802ac84:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802ac86:	687a      	ldr	r2, [r7, #4]
 802ac88:	68b9      	ldr	r1, [r7, #8]
 802ac8a:	68f8      	ldr	r0, [r7, #12]
 802ac8c:	f000 fb3e 	bl	802b30c <_ZSt23__copy_move_backward_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 802ac90:	4603      	mov	r3, r0
 802ac92:	4618      	mov	r0, r3
 802ac94:	3710      	adds	r7, #16
 802ac96:	46bd      	mov	sp, r7
 802ac98:	bd80      	pop	{r7, pc}

0802ac9a <_ZSt12__niter_baseIPP14ServoDataFrameET_S3_>:
    __niter_base(_Iterator __it)
 802ac9a:	b480      	push	{r7}
 802ac9c:	b083      	sub	sp, #12
 802ac9e:	af00      	add	r7, sp, #0
 802aca0:	6078      	str	r0, [r7, #4]
    { return __it; }
 802aca2:	687b      	ldr	r3, [r7, #4]
 802aca4:	4618      	mov	r0, r3
 802aca6:	370c      	adds	r7, #12
 802aca8:	46bd      	mov	sp, r7
 802acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acae:	4770      	bx	lr

0802acb0 <_ZSt14__copy_move_a1ILb0EPP14ServoDataFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802acb0:	b580      	push	{r7, lr}
 802acb2:	b084      	sub	sp, #16
 802acb4:	af00      	add	r7, sp, #0
 802acb6:	60f8      	str	r0, [r7, #12]
 802acb8:	60b9      	str	r1, [r7, #8]
 802acba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802acbc:	687a      	ldr	r2, [r7, #4]
 802acbe:	68b9      	ldr	r1, [r7, #8]
 802acc0:	68f8      	ldr	r0, [r7, #12]
 802acc2:	f000 fb33 	bl	802b32c <_ZSt14__copy_move_a2ILb0EPP14ServoDataFrameS2_ET1_T0_S4_S3_>
 802acc6:	4603      	mov	r3, r0
 802acc8:	4618      	mov	r0, r3
 802acca:	3710      	adds	r7, #16
 802accc:	46bd      	mov	sp, r7
 802acce:	bd80      	pop	{r7, pc}

0802acd0 <_ZSt12__niter_wrapIPP14ServoDataFrameET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802acd0:	b480      	push	{r7}
 802acd2:	b083      	sub	sp, #12
 802acd4:	af00      	add	r7, sp, #0
 802acd6:	6078      	str	r0, [r7, #4]
 802acd8:	6039      	str	r1, [r7, #0]
    { return __res; }
 802acda:	683b      	ldr	r3, [r7, #0]
 802acdc:	4618      	mov	r0, r3
 802acde:	370c      	adds	r7, #12
 802ace0:	46bd      	mov	sp, r7
 802ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ace6:	4770      	bx	lr

0802ace8 <_ZSt23__copy_move_backward_a1ILb0EPP14ServoDataFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802ace8:	b580      	push	{r7, lr}
 802acea:	b084      	sub	sp, #16
 802acec:	af00      	add	r7, sp, #0
 802acee:	60f8      	str	r0, [r7, #12]
 802acf0:	60b9      	str	r1, [r7, #8]
 802acf2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802acf4:	687a      	ldr	r2, [r7, #4]
 802acf6:	68b9      	ldr	r1, [r7, #8]
 802acf8:	68f8      	ldr	r0, [r7, #12]
 802acfa:	f000 fb27 	bl	802b34c <_ZSt23__copy_move_backward_a2ILb0EPP14ServoDataFrameS2_ET1_T0_S4_S3_>
 802acfe:	4603      	mov	r3, r0
 802ad00:	4618      	mov	r0, r3
 802ad02:	3710      	adds	r7, #16
 802ad04:	46bd      	mov	sp, r7
 802ad06:	bd80      	pop	{r7, pc}

0802ad08 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802ad08:	b580      	push	{r7, lr}
 802ad0a:	b084      	sub	sp, #16
 802ad0c:	af00      	add	r7, sp, #0
 802ad0e:	60f8      	str	r0, [r7, #12]
 802ad10:	60b9      	str	r1, [r7, #8]
 802ad12:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802ad14:	687a      	ldr	r2, [r7, #4]
 802ad16:	68b9      	ldr	r1, [r7, #8]
 802ad18:	68f8      	ldr	r0, [r7, #12]
 802ad1a:	f000 fb27 	bl	802b36c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>
 802ad1e:	4603      	mov	r3, r0
    }
 802ad20:	4618      	mov	r0, r3
 802ad22:	3710      	adds	r7, #16
 802ad24:	46bd      	mov	sp, r7
 802ad26:	bd80      	pop	{r7, pc}

0802ad28 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802ad28:	b580      	push	{r7, lr}
 802ad2a:	b084      	sub	sp, #16
 802ad2c:	af00      	add	r7, sp, #0
 802ad2e:	60f8      	str	r0, [r7, #12]
 802ad30:	60b9      	str	r1, [r7, #8]
 802ad32:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802ad34:	687a      	ldr	r2, [r7, #4]
 802ad36:	68b9      	ldr	r1, [r7, #8]
 802ad38:	68f8      	ldr	r0, [r7, #12]
 802ad3a:	f000 fb34 	bl	802b3a6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>
 802ad3e:	4603      	mov	r3, r0
    }
 802ad40:	4618      	mov	r0, r3
 802ad42:	3710      	adds	r7, #16
 802ad44:	46bd      	mov	sp, r7
 802ad46:	bd80      	pop	{r7, pc}

0802ad48 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802ad48:	b580      	push	{r7, lr}
 802ad4a:	b086      	sub	sp, #24
 802ad4c:	af00      	add	r7, sp, #0
 802ad4e:	60f8      	str	r0, [r7, #12]
 802ad50:	60b9      	str	r1, [r7, #8]
 802ad52:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802ad54:	68ba      	ldr	r2, [r7, #8]
 802ad56:	68fb      	ldr	r3, [r7, #12]
 802ad58:	1ad3      	subs	r3, r2, r3
 802ad5a:	109b      	asrs	r3, r3, #2
 802ad5c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802ad5e:	697b      	ldr	r3, [r7, #20]
 802ad60:	2b00      	cmp	r3, #0
 802ad62:	d006      	beq.n	802ad72 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802ad64:	697b      	ldr	r3, [r7, #20]
 802ad66:	009b      	lsls	r3, r3, #2
 802ad68:	461a      	mov	r2, r3
 802ad6a:	68f9      	ldr	r1, [r7, #12]
 802ad6c:	6878      	ldr	r0, [r7, #4]
 802ad6e:	f015 faa3 	bl	80402b8 <memmove>
	  return __result + _Num;
 802ad72:	697b      	ldr	r3, [r7, #20]
 802ad74:	009b      	lsls	r3, r3, #2
 802ad76:	687a      	ldr	r2, [r7, #4]
 802ad78:	4413      	add	r3, r2
	}
 802ad7a:	4618      	mov	r0, r3
 802ad7c:	3718      	adds	r7, #24
 802ad7e:	46bd      	mov	sp, r7
 802ad80:	bd80      	pop	{r7, pc}

0802ad82 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802ad82:	b580      	push	{r7, lr}
 802ad84:	b086      	sub	sp, #24
 802ad86:	af00      	add	r7, sp, #0
 802ad88:	60f8      	str	r0, [r7, #12]
 802ad8a:	60b9      	str	r1, [r7, #8]
 802ad8c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802ad8e:	68ba      	ldr	r2, [r7, #8]
 802ad90:	68fb      	ldr	r3, [r7, #12]
 802ad92:	1ad3      	subs	r3, r2, r3
 802ad94:	109b      	asrs	r3, r3, #2
 802ad96:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802ad98:	697b      	ldr	r3, [r7, #20]
 802ad9a:	2b00      	cmp	r3, #0
 802ad9c:	d00a      	beq.n	802adb4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802ad9e:	697b      	ldr	r3, [r7, #20]
 802ada0:	009b      	lsls	r3, r3, #2
 802ada2:	425b      	negs	r3, r3
 802ada4:	687a      	ldr	r2, [r7, #4]
 802ada6:	18d0      	adds	r0, r2, r3
 802ada8:	697b      	ldr	r3, [r7, #20]
 802adaa:	009b      	lsls	r3, r3, #2
 802adac:	461a      	mov	r2, r3
 802adae:	68f9      	ldr	r1, [r7, #12]
 802adb0:	f015 fa82 	bl	80402b8 <memmove>
	  return __result - _Num;
 802adb4:	697b      	ldr	r3, [r7, #20]
 802adb6:	009b      	lsls	r3, r3, #2
 802adb8:	425b      	negs	r3, r3
 802adba:	687a      	ldr	r2, [r7, #4]
 802adbc:	4413      	add	r3, r2
	}
 802adbe:	4618      	mov	r0, r3
 802adc0:	3718      	adds	r7, #24
 802adc2:	46bd      	mov	sp, r7
 802adc4:	bd80      	pop	{r7, pc}
	...

0802adc8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802adc8:	b580      	push	{r7, lr}
 802adca:	b086      	sub	sp, #24
 802adcc:	af00      	add	r7, sp, #0
 802adce:	60f8      	str	r0, [r7, #12]
 802add0:	60b9      	str	r1, [r7, #8]
 802add2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802add4:	68ba      	ldr	r2, [r7, #8]
 802add6:	68fb      	ldr	r3, [r7, #12]
 802add8:	1ad3      	subs	r3, r2, r3
 802adda:	10db      	asrs	r3, r3, #3
 802addc:	4a0e      	ldr	r2, [pc, #56]	; (802ae18 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x50>)
 802adde:	fb02 f303 	mul.w	r3, r2, r3
 802ade2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802ade4:	697b      	ldr	r3, [r7, #20]
 802ade6:	2b00      	cmp	r3, #0
 802ade8:	d009      	beq.n	802adfe <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802adea:	697a      	ldr	r2, [r7, #20]
 802adec:	4613      	mov	r3, r2
 802adee:	005b      	lsls	r3, r3, #1
 802adf0:	4413      	add	r3, r2
 802adf2:	00db      	lsls	r3, r3, #3
 802adf4:	461a      	mov	r2, r3
 802adf6:	68f9      	ldr	r1, [r7, #12]
 802adf8:	6878      	ldr	r0, [r7, #4]
 802adfa:	f015 fa5d 	bl	80402b8 <memmove>
	  return __result + _Num;
 802adfe:	697a      	ldr	r2, [r7, #20]
 802ae00:	4613      	mov	r3, r2
 802ae02:	005b      	lsls	r3, r3, #1
 802ae04:	4413      	add	r3, r2
 802ae06:	00db      	lsls	r3, r3, #3
 802ae08:	461a      	mov	r2, r3
 802ae0a:	687b      	ldr	r3, [r7, #4]
 802ae0c:	4413      	add	r3, r2
	}
 802ae0e:	4618      	mov	r0, r3
 802ae10:	3718      	adds	r7, #24
 802ae12:	46bd      	mov	sp, r7
 802ae14:	bd80      	pop	{r7, pc}
 802ae16:	bf00      	nop
 802ae18:	aaaaaaab 	.word	0xaaaaaaab

0802ae1c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 802ae1c:	b590      	push	{r4, r7, lr}
 802ae1e:	b08d      	sub	sp, #52	; 0x34
 802ae20:	af00      	add	r7, sp, #0
 802ae22:	60f8      	str	r0, [r7, #12]
 802ae24:	60b9      	str	r1, [r7, #8]
 802ae26:	607a      	str	r2, [r7, #4]
 802ae28:	603b      	str	r3, [r7, #0]
	  _ForwardIterator __cur = __result;
 802ae2a:	6839      	ldr	r1, [r7, #0]
 802ae2c:	68f8      	ldr	r0, [r7, #12]
 802ae2e:	f7f9 fc0d 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	      for (; __first != __last; ++__first, (void)++__cur)
 802ae32:	6879      	ldr	r1, [r7, #4]
 802ae34:	68b8      	ldr	r0, [r7, #8]
 802ae36:	f000 fad8 	bl	802b3ea <_ZStneISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>
 802ae3a:	4603      	mov	r3, r0
 802ae3c:	2b00      	cmp	r3, #0
 802ae3e:	d016      	beq.n	802ae6e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_+0x52>
		std::_Construct(std::__addressof(*__cur), *__first);
 802ae40:	68f8      	ldr	r0, [r7, #12]
 802ae42:	f7fd fde9 	bl	8028a18 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 802ae46:	4603      	mov	r3, r0
 802ae48:	4618      	mov	r0, r3
 802ae4a:	f7ff fd94 	bl	802a976 <_ZSt11__addressofI8IMUFrameEPT_RS1_>
 802ae4e:	4604      	mov	r4, r0
 802ae50:	68b8      	ldr	r0, [r7, #8]
 802ae52:	f000 fae8 	bl	802b426 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEdeEv>
 802ae56:	4603      	mov	r3, r0
 802ae58:	4619      	mov	r1, r3
 802ae5a:	4620      	mov	r0, r4
 802ae5c:	f000 faf0 	bl	802b440 <_ZSt10_ConstructI8IMUFrameJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 802ae60:	68b8      	ldr	r0, [r7, #8]
 802ae62:	f000 fad3 	bl	802b40c <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEppEv>
 802ae66:	68f8      	ldr	r0, [r7, #12]
 802ae68:	f7fc fa3d 	bl	80272e6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>
 802ae6c:	e7e1      	b.n	802ae32 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS4_PS4_EES7_EET0_T_SA_S9_+0x16>
	      return __cur;
 802ae6e:	bf00      	nop
	}
 802ae70:	68f8      	ldr	r0, [r7, #12]
 802ae72:	3734      	adds	r7, #52	; 0x34
 802ae74:	46bd      	mov	sp, r7
 802ae76:	bd90      	pop	{r4, r7, pc}

0802ae78 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 802ae78:	b5b0      	push	{r4, r5, r7, lr}
 802ae7a:	b09e      	sub	sp, #120	; 0x78
 802ae7c:	af00      	add	r7, sp, #0
 802ae7e:	60f8      	str	r0, [r7, #12]
 802ae80:	60b9      	str	r1, [r7, #8]
 802ae82:	607a      	str	r2, [r7, #4]
 802ae84:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 802ae86:	68bb      	ldr	r3, [r7, #8]
 802ae88:	68da      	ldr	r2, [r3, #12]
 802ae8a:	687b      	ldr	r3, [r7, #4]
 802ae8c:	68db      	ldr	r3, [r3, #12]
 802ae8e:	429a      	cmp	r2, r3
 802ae90:	d058      	beq.n	802af44 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xcc>
	  __result
 802ae92:	68bb      	ldr	r3, [r7, #8]
 802ae94:	681c      	ldr	r4, [r3, #0]
 802ae96:	68bb      	ldr	r3, [r7, #8]
 802ae98:	689d      	ldr	r5, [r3, #8]
 802ae9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802ae9e:	6839      	ldr	r1, [r7, #0]
 802aea0:	4618      	mov	r0, r3
 802aea2:	f7f9 fbd3 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802aea6:	f107 0014 	add.w	r0, r7, #20
 802aeaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802aeae:	462a      	mov	r2, r5
 802aeb0:	4621      	mov	r1, r4
 802aeb2:	f000 fadf 	bl	802b474 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 802aeb6:	683b      	ldr	r3, [r7, #0]
 802aeb8:	461c      	mov	r4, r3
 802aeba:	f107 0314 	add.w	r3, r7, #20
 802aebe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802aec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 802aec4:	68bb      	ldr	r3, [r7, #8]
 802aec6:	68db      	ldr	r3, [r3, #12]
 802aec8:	3304      	adds	r3, #4
 802aeca:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 802aecc:	687b      	ldr	r3, [r7, #4]
 802aece:	68db      	ldr	r3, [r3, #12]
 802aed0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802aed2:	429a      	cmp	r2, r3
 802aed4:	d024      	beq.n	802af20 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xa8>
	    __result
 802aed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802aed8:	681d      	ldr	r5, [r3, #0]
 802aeda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802aedc:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 802aede:	f7fc fa22 	bl	8027326 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 802aee2:	4602      	mov	r2, r0
 802aee4:	4613      	mov	r3, r2
 802aee6:	005b      	lsls	r3, r3, #1
 802aee8:	4413      	add	r3, r2
 802aeea:	00db      	lsls	r3, r3, #3
	    __result
 802aeec:	441c      	add	r4, r3
 802aeee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802aef2:	6839      	ldr	r1, [r7, #0]
 802aef4:	4618      	mov	r0, r3
 802aef6:	f7f9 fba9 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802aefa:	f107 0034 	add.w	r0, r7, #52	; 0x34
 802aefe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802af02:	4622      	mov	r2, r4
 802af04:	4629      	mov	r1, r5
 802af06:	f000 fab5 	bl	802b474 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 802af0a:	683b      	ldr	r3, [r7, #0]
 802af0c:	461c      	mov	r4, r3
 802af0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802af12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802af14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 802af18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802af1a:	3304      	adds	r3, #4
 802af1c:	677b      	str	r3, [r7, #116]	; 0x74
 802af1e:	e7d5      	b.n	802aecc <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0x54>
					      __result);
 802af20:	687b      	ldr	r3, [r7, #4]
 802af22:	685c      	ldr	r4, [r3, #4]
 802af24:	687b      	ldr	r3, [r7, #4]
 802af26:	681d      	ldr	r5, [r3, #0]
 802af28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802af2c:	6839      	ldr	r1, [r7, #0]
 802af2e:	4618      	mov	r0, r3
 802af30:	f7f9 fb8c 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802af34:	68f8      	ldr	r0, [r7, #12]
 802af36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802af3a:	462a      	mov	r2, r5
 802af3c:	4621      	mov	r1, r4
 802af3e:	f000 fa99 	bl	802b474 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 802af42:	e010      	b.n	802af66 <_ZSt15__copy_move_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xee>
					  __result);
 802af44:	68bb      	ldr	r3, [r7, #8]
 802af46:	681c      	ldr	r4, [r3, #0]
 802af48:	687b      	ldr	r3, [r7, #4]
 802af4a:	681d      	ldr	r5, [r3, #0]
 802af4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802af50:	6839      	ldr	r1, [r7, #0]
 802af52:	4618      	mov	r0, r3
 802af54:	f7f9 fb7a 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802af58:	68f8      	ldr	r0, [r7, #12]
 802af5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802af5e:	462a      	mov	r2, r5
 802af60:	4621      	mov	r1, r4
 802af62:	f000 fa87 	bl	802b474 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 802af66:	68f8      	ldr	r0, [r7, #12]
 802af68:	3778      	adds	r7, #120	; 0x78
 802af6a:	46bd      	mov	sp, r7
 802af6c:	bdb0      	pop	{r4, r5, r7, pc}

0802af6e <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>:
    __copy_move_backward_dit(
 802af6e:	b5b0      	push	{r4, r5, r7, lr}
 802af70:	b09e      	sub	sp, #120	; 0x78
 802af72:	af00      	add	r7, sp, #0
 802af74:	60f8      	str	r0, [r7, #12]
 802af76:	60b9      	str	r1, [r7, #8]
 802af78:	607a      	str	r2, [r7, #4]
 802af7a:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 802af7c:	68bb      	ldr	r3, [r7, #8]
 802af7e:	68da      	ldr	r2, [r3, #12]
 802af80:	687b      	ldr	r3, [r7, #4]
 802af82:	68db      	ldr	r3, [r3, #12]
 802af84:	429a      	cmp	r2, r3
 802af86:	d058      	beq.n	802b03a <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 802af88:	687b      	ldr	r3, [r7, #4]
 802af8a:	685c      	ldr	r4, [r3, #4]
 802af8c:	687b      	ldr	r3, [r7, #4]
 802af8e:	681d      	ldr	r5, [r3, #0]
 802af90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802af94:	6839      	ldr	r1, [r7, #0]
 802af96:	4618      	mov	r0, r3
 802af98:	f7f9 fb58 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802af9c:	f107 0014 	add.w	r0, r7, #20
 802afa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802afa4:	462a      	mov	r2, r5
 802afa6:	4621      	mov	r1, r4
 802afa8:	f000 fab6 	bl	802b518 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 802afac:	683b      	ldr	r3, [r7, #0]
 802afae:	461c      	mov	r4, r3
 802afb0:	f107 0314 	add.w	r3, r7, #20
 802afb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802afb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 802afba:	687b      	ldr	r3, [r7, #4]
 802afbc:	68db      	ldr	r3, [r3, #12]
 802afbe:	3b04      	subs	r3, #4
 802afc0:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 802afc2:	68bb      	ldr	r3, [r7, #8]
 802afc4:	68db      	ldr	r3, [r3, #12]
 802afc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802afc8:	429a      	cmp	r2, r3
 802afca:	d024      	beq.n	802b016 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 802afcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802afce:	681d      	ldr	r5, [r3, #0]
 802afd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802afd2:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 802afd4:	f7fc f9a7 	bl	8027326 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 802afd8:	4602      	mov	r2, r0
 802afda:	4613      	mov	r3, r2
 802afdc:	005b      	lsls	r3, r3, #1
 802afde:	4413      	add	r3, r2
 802afe0:	00db      	lsls	r3, r3, #3
	    __result = std::__copy_move_backward_a1<_IsMove>(
 802afe2:	441c      	add	r4, r3
 802afe4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802afe8:	6839      	ldr	r1, [r7, #0]
 802afea:	4618      	mov	r0, r3
 802afec:	f7f9 fb2e 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802aff0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 802aff4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802aff8:	4622      	mov	r2, r4
 802affa:	4629      	mov	r1, r5
 802affc:	f000 fa8c 	bl	802b518 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 802b000:	683b      	ldr	r3, [r7, #0]
 802b002:	461c      	mov	r4, r3
 802b004:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802b008:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802b00a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 802b00e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802b010:	3b04      	subs	r3, #4
 802b012:	677b      	str	r3, [r7, #116]	; 0x74
 802b014:	e7d5      	b.n	802afc2 <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0x54>
			__first._M_cur, __first._M_last, __result);
 802b016:	68bb      	ldr	r3, [r7, #8]
 802b018:	681c      	ldr	r4, [r3, #0]
 802b01a:	68bb      	ldr	r3, [r7, #8]
 802b01c:	689d      	ldr	r5, [r3, #8]
 802b01e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802b022:	6839      	ldr	r1, [r7, #0]
 802b024:	4618      	mov	r0, r3
 802b026:	f7f9 fb11 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802b02a:	68f8      	ldr	r0, [r7, #12]
 802b02c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802b030:	462a      	mov	r2, r5
 802b032:	4621      	mov	r1, r4
 802b034:	f000 fa70 	bl	802b518 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 802b038:	e010      	b.n	802b05c <_ZSt24__copy_move_backward_ditILb1E8IMUFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xee>
		__first._M_cur, __last._M_cur, __result);
 802b03a:	68bb      	ldr	r3, [r7, #8]
 802b03c:	681c      	ldr	r4, [r3, #0]
 802b03e:	687b      	ldr	r3, [r7, #4]
 802b040:	681d      	ldr	r5, [r3, #0]
 802b042:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802b046:	6839      	ldr	r1, [r7, #0]
 802b048:	4618      	mov	r0, r3
 802b04a:	f7f9 faff 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802b04e:	68f8      	ldr	r0, [r7, #12]
 802b050:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802b054:	462a      	mov	r2, r5
 802b056:	4621      	mov	r1, r4
 802b058:	f000 fa5e 	bl	802b518 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 802b05c:	68f8      	ldr	r0, [r7, #12]
 802b05e:	3778      	adds	r7, #120	; 0x78
 802b060:	46bd      	mov	sp, r7
 802b062:	bdb0      	pop	{r4, r5, r7, pc}

0802b064 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI14ServoDataFrameEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802b064:	b580      	push	{r7, lr}
 802b066:	b086      	sub	sp, #24
 802b068:	af00      	add	r7, sp, #0
 802b06a:	60f8      	str	r0, [r7, #12]
 802b06c:	60b9      	str	r1, [r7, #8]
 802b06e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802b070:	68ba      	ldr	r2, [r7, #8]
 802b072:	68fb      	ldr	r3, [r7, #12]
 802b074:	1ad3      	subs	r3, r2, r3
 802b076:	109b      	asrs	r3, r3, #2
 802b078:	4a0d      	ldr	r2, [pc, #52]	; (802b0b0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI14ServoDataFrameEEPT_PKS4_S7_S5_+0x4c>)
 802b07a:	fb02 f303 	mul.w	r3, r2, r3
 802b07e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802b080:	697b      	ldr	r3, [r7, #20]
 802b082:	2b00      	cmp	r3, #0
 802b084:	d009      	beq.n	802b09a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI14ServoDataFrameEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802b086:	697b      	ldr	r3, [r7, #20]
 802b088:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802b08c:	fb02 f303 	mul.w	r3, r2, r3
 802b090:	461a      	mov	r2, r3
 802b092:	68f9      	ldr	r1, [r7, #12]
 802b094:	6878      	ldr	r0, [r7, #4]
 802b096:	f015 f90f 	bl	80402b8 <memmove>
	  return __result + _Num;
 802b09a:	697b      	ldr	r3, [r7, #20]
 802b09c:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802b0a0:	fb02 f303 	mul.w	r3, r2, r3
 802b0a4:	687a      	ldr	r2, [r7, #4]
 802b0a6:	4413      	add	r3, r2
	}
 802b0a8:	4618      	mov	r0, r3
 802b0aa:	3718      	adds	r7, #24
 802b0ac:	46bd      	mov	sp, r7
 802b0ae:	bd80      	pop	{r7, pc}
 802b0b0:	07a44c6b 	.word	0x07a44c6b

0802b0b4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS4_PS4_EES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 802b0b4:	b580      	push	{r7, lr}
 802b0b6:	b090      	sub	sp, #64	; 0x40
 802b0b8:	af00      	add	r7, sp, #0
 802b0ba:	60f8      	str	r0, [r7, #12]
 802b0bc:	60b9      	str	r1, [r7, #8]
 802b0be:	607a      	str	r2, [r7, #4]
 802b0c0:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 802b0c2:	f107 0310 	add.w	r3, r7, #16
 802b0c6:	68b9      	ldr	r1, [r7, #8]
 802b0c8:	4618      	mov	r0, r3
 802b0ca:	f7ff fa47 	bl	802a55c <_ZNSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEC1ERKS5_>
 802b0ce:	f107 0320 	add.w	r3, r7, #32
 802b0d2:	6879      	ldr	r1, [r7, #4]
 802b0d4:	4618      	mov	r0, r3
 802b0d6:	f7ff fa41 	bl	802a55c <_ZNSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEC1ERKS5_>
 802b0da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802b0de:	6839      	ldr	r1, [r7, #0]
 802b0e0:	4618      	mov	r0, r3
 802b0e2:	f7f9 fb05 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802b0e6:	68f8      	ldr	r0, [r7, #12]
 802b0e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802b0ec:	f107 0220 	add.w	r2, r7, #32
 802b0f0:	f107 0110 	add.w	r1, r7, #16
 802b0f4:	f000 fa76 	bl	802b5e4 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS2_PS2_EES5_ET0_T_S8_S7_>
 802b0f8:	68f8      	ldr	r0, [r7, #12]
 802b0fa:	3740      	adds	r7, #64	; 0x40
 802b0fc:	46bd      	mov	sp, r7
 802b0fe:	bd80      	pop	{r7, pc}

0802b100 <_ZSt15__copy_move_ditILb1E14ServoDataFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 802b100:	b5b0      	push	{r4, r5, r7, lr}
 802b102:	b09e      	sub	sp, #120	; 0x78
 802b104:	af00      	add	r7, sp, #0
 802b106:	60f8      	str	r0, [r7, #12]
 802b108:	60b9      	str	r1, [r7, #8]
 802b10a:	607a      	str	r2, [r7, #4]
 802b10c:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 802b10e:	68bb      	ldr	r3, [r7, #8]
 802b110:	68da      	ldr	r2, [r3, #12]
 802b112:	687b      	ldr	r3, [r7, #4]
 802b114:	68db      	ldr	r3, [r3, #12]
 802b116:	429a      	cmp	r2, r3
 802b118:	d058      	beq.n	802b1cc <_ZSt15__copy_move_ditILb1E14ServoDataFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xcc>
	  __result
 802b11a:	68bb      	ldr	r3, [r7, #8]
 802b11c:	681c      	ldr	r4, [r3, #0]
 802b11e:	68bb      	ldr	r3, [r7, #8]
 802b120:	689d      	ldr	r5, [r3, #8]
 802b122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b126:	6839      	ldr	r1, [r7, #0]
 802b128:	4618      	mov	r0, r3
 802b12a:	f7f9 fae1 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802b12e:	f107 0014 	add.w	r0, r7, #20
 802b132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b136:	462a      	mov	r2, r5
 802b138:	4621      	mov	r1, r4
 802b13a:	f000 fa89 	bl	802b650 <_ZSt14__copy_move_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 802b13e:	683b      	ldr	r3, [r7, #0]
 802b140:	461c      	mov	r4, r3
 802b142:	f107 0314 	add.w	r3, r7, #20
 802b146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802b148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 802b14c:	68bb      	ldr	r3, [r7, #8]
 802b14e:	68db      	ldr	r3, [r3, #12]
 802b150:	3304      	adds	r3, #4
 802b152:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 802b154:	687b      	ldr	r3, [r7, #4]
 802b156:	68db      	ldr	r3, [r3, #12]
 802b158:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802b15a:	429a      	cmp	r2, r3
 802b15c:	d024      	beq.n	802b1a8 <_ZSt15__copy_move_ditILb1E14ServoDataFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xa8>
	    __result
 802b15e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802b160:	681d      	ldr	r5, [r3, #0]
 802b162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802b164:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 802b166:	f7fc f980 	bl	802746a <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E14_S_buffer_sizeEv>
 802b16a:	4603      	mov	r3, r0
 802b16c:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802b170:	fb02 f303 	mul.w	r3, r2, r3
	    __result
 802b174:	441c      	add	r4, r3
 802b176:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802b17a:	6839      	ldr	r1, [r7, #0]
 802b17c:	4618      	mov	r0, r3
 802b17e:	f7f9 fab7 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802b182:	f107 0034 	add.w	r0, r7, #52	; 0x34
 802b186:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802b18a:	4622      	mov	r2, r4
 802b18c:	4629      	mov	r1, r5
 802b18e:	f000 fa5f 	bl	802b650 <_ZSt14__copy_move_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 802b192:	683b      	ldr	r3, [r7, #0]
 802b194:	461c      	mov	r4, r3
 802b196:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802b19a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802b19c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 802b1a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802b1a2:	3304      	adds	r3, #4
 802b1a4:	677b      	str	r3, [r7, #116]	; 0x74
 802b1a6:	e7d5      	b.n	802b154 <_ZSt15__copy_move_ditILb1E14ServoDataFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0x54>
					      __result);
 802b1a8:	687b      	ldr	r3, [r7, #4]
 802b1aa:	685c      	ldr	r4, [r3, #4]
 802b1ac:	687b      	ldr	r3, [r7, #4]
 802b1ae:	681d      	ldr	r5, [r3, #0]
 802b1b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802b1b4:	6839      	ldr	r1, [r7, #0]
 802b1b6:	4618      	mov	r0, r3
 802b1b8:	f7f9 fa9a 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802b1bc:	68f8      	ldr	r0, [r7, #12]
 802b1be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802b1c2:	462a      	mov	r2, r5
 802b1c4:	4621      	mov	r1, r4
 802b1c6:	f000 fa43 	bl	802b650 <_ZSt14__copy_move_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 802b1ca:	e010      	b.n	802b1ee <_ZSt15__copy_move_ditILb1E14ServoDataFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xee>
					  __result);
 802b1cc:	68bb      	ldr	r3, [r7, #8]
 802b1ce:	681c      	ldr	r4, [r3, #0]
 802b1d0:	687b      	ldr	r3, [r7, #4]
 802b1d2:	681d      	ldr	r5, [r3, #0]
 802b1d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802b1d8:	6839      	ldr	r1, [r7, #0]
 802b1da:	4618      	mov	r0, r3
 802b1dc:	f7f9 fa88 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802b1e0:	68f8      	ldr	r0, [r7, #12]
 802b1e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802b1e6:	462a      	mov	r2, r5
 802b1e8:	4621      	mov	r1, r4
 802b1ea:	f000 fa31 	bl	802b650 <_ZSt14__copy_move_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 802b1ee:	68f8      	ldr	r0, [r7, #12]
 802b1f0:	3778      	adds	r7, #120	; 0x78
 802b1f2:	46bd      	mov	sp, r7
 802b1f4:	bdb0      	pop	{r4, r5, r7, pc}

0802b1f6 <_ZSt24__copy_move_backward_ditILb1E14ServoDataFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_>:
    __copy_move_backward_dit(
 802b1f6:	b5b0      	push	{r4, r5, r7, lr}
 802b1f8:	b09e      	sub	sp, #120	; 0x78
 802b1fa:	af00      	add	r7, sp, #0
 802b1fc:	60f8      	str	r0, [r7, #12]
 802b1fe:	60b9      	str	r1, [r7, #8]
 802b200:	607a      	str	r2, [r7, #4]
 802b202:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 802b204:	68bb      	ldr	r3, [r7, #8]
 802b206:	68da      	ldr	r2, [r3, #12]
 802b208:	687b      	ldr	r3, [r7, #4]
 802b20a:	68db      	ldr	r3, [r3, #12]
 802b20c:	429a      	cmp	r2, r3
 802b20e:	d058      	beq.n	802b2c2 <_ZSt24__copy_move_backward_ditILb1E14ServoDataFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 802b210:	687b      	ldr	r3, [r7, #4]
 802b212:	685c      	ldr	r4, [r3, #4]
 802b214:	687b      	ldr	r3, [r7, #4]
 802b216:	681d      	ldr	r5, [r3, #0]
 802b218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b21c:	6839      	ldr	r1, [r7, #0]
 802b21e:	4618      	mov	r0, r3
 802b220:	f7f9 fa66 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802b224:	f107 0014 	add.w	r0, r7, #20
 802b228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802b22c:	462a      	mov	r2, r5
 802b22e:	4621      	mov	r1, r4
 802b230:	f000 fa5e 	bl	802b6f0 <_ZSt23__copy_move_backward_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 802b234:	683b      	ldr	r3, [r7, #0]
 802b236:	461c      	mov	r4, r3
 802b238:	f107 0314 	add.w	r3, r7, #20
 802b23c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802b23e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 802b242:	687b      	ldr	r3, [r7, #4]
 802b244:	68db      	ldr	r3, [r3, #12]
 802b246:	3b04      	subs	r3, #4
 802b248:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 802b24a:	68bb      	ldr	r3, [r7, #8]
 802b24c:	68db      	ldr	r3, [r3, #12]
 802b24e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802b250:	429a      	cmp	r2, r3
 802b252:	d024      	beq.n	802b29e <_ZSt24__copy_move_backward_ditILb1E14ServoDataFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 802b254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802b256:	681d      	ldr	r5, [r3, #0]
 802b258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802b25a:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 802b25c:	f7fc f905 	bl	802746a <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E14_S_buffer_sizeEv>
 802b260:	4603      	mov	r3, r0
 802b262:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802b266:	fb02 f303 	mul.w	r3, r2, r3
	    __result = std::__copy_move_backward_a1<_IsMove>(
 802b26a:	441c      	add	r4, r3
 802b26c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802b270:	6839      	ldr	r1, [r7, #0]
 802b272:	4618      	mov	r0, r3
 802b274:	f7f9 fa3c 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802b278:	f107 0034 	add.w	r0, r7, #52	; 0x34
 802b27c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802b280:	4622      	mov	r2, r4
 802b282:	4629      	mov	r1, r5
 802b284:	f000 fa34 	bl	802b6f0 <_ZSt23__copy_move_backward_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
 802b288:	683b      	ldr	r3, [r7, #0]
 802b28a:	461c      	mov	r4, r3
 802b28c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802b290:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802b292:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 802b296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802b298:	3b04      	subs	r3, #4
 802b29a:	677b      	str	r3, [r7, #116]	; 0x74
 802b29c:	e7d5      	b.n	802b24a <_ZSt24__copy_move_backward_ditILb1E14ServoDataFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0x54>
			__first._M_cur, __first._M_last, __result);
 802b29e:	68bb      	ldr	r3, [r7, #8]
 802b2a0:	681c      	ldr	r4, [r3, #0]
 802b2a2:	68bb      	ldr	r3, [r7, #8]
 802b2a4:	689d      	ldr	r5, [r3, #8]
 802b2a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802b2aa:	6839      	ldr	r1, [r7, #0]
 802b2ac:	4618      	mov	r0, r3
 802b2ae:	f7f9 fa1f 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802b2b2:	68f8      	ldr	r0, [r7, #12]
 802b2b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802b2b8:	462a      	mov	r2, r5
 802b2ba:	4621      	mov	r1, r4
 802b2bc:	f000 fa18 	bl	802b6f0 <_ZSt23__copy_move_backward_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 802b2c0:	e010      	b.n	802b2e4 <_ZSt24__copy_move_backward_ditILb1E14ServoDataFrameRS0_PS0_St15_Deque_iteratorIS0_S1_S2_EET3_S3_IT0_T1_T2_ES9_S5_+0xee>
		__first._M_cur, __last._M_cur, __result);
 802b2c2:	68bb      	ldr	r3, [r7, #8]
 802b2c4:	681c      	ldr	r4, [r3, #0]
 802b2c6:	687b      	ldr	r3, [r7, #4]
 802b2c8:	681d      	ldr	r5, [r3, #0]
 802b2ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802b2ce:	6839      	ldr	r1, [r7, #0]
 802b2d0:	4618      	mov	r0, r3
 802b2d2:	f7f9 fa0d 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802b2d6:	68f8      	ldr	r0, [r7, #12]
 802b2d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802b2dc:	462a      	mov	r2, r5
 802b2de:	4621      	mov	r1, r4
 802b2e0:	f000 fa06 	bl	802b6f0 <_ZSt23__copy_move_backward_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>
    }
 802b2e4:	68f8      	ldr	r0, [r7, #12]
 802b2e6:	3778      	adds	r7, #120	; 0x78
 802b2e8:	46bd      	mov	sp, r7
 802b2ea:	bdb0      	pop	{r4, r5, r7, pc}

0802b2ec <_ZSt14__copy_move_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802b2ec:	b580      	push	{r7, lr}
 802b2ee:	b084      	sub	sp, #16
 802b2f0:	af00      	add	r7, sp, #0
 802b2f2:	60f8      	str	r0, [r7, #12]
 802b2f4:	60b9      	str	r1, [r7, #8]
 802b2f6:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802b2f8:	687a      	ldr	r2, [r7, #4]
 802b2fa:	68b9      	ldr	r1, [r7, #8]
 802b2fc:	68f8      	ldr	r0, [r7, #12]
 802b2fe:	f000 fa5d 	bl	802b7bc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_>
 802b302:	4603      	mov	r3, r0
    }
 802b304:	4618      	mov	r0, r3
 802b306:	3710      	adds	r7, #16
 802b308:	46bd      	mov	sp, r7
 802b30a:	bd80      	pop	{r7, pc}

0802b30c <_ZSt23__copy_move_backward_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802b30c:	b580      	push	{r7, lr}
 802b30e:	b084      	sub	sp, #16
 802b310:	af00      	add	r7, sp, #0
 802b312:	60f8      	str	r0, [r7, #12]
 802b314:	60b9      	str	r1, [r7, #8]
 802b316:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802b318:	687a      	ldr	r2, [r7, #4]
 802b31a:	68b9      	ldr	r1, [r7, #8]
 802b31c:	68f8      	ldr	r0, [r7, #12]
 802b31e:	f000 fa6a 	bl	802b7f6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_>
 802b322:	4603      	mov	r3, r0
    }
 802b324:	4618      	mov	r0, r3
 802b326:	3710      	adds	r7, #16
 802b328:	46bd      	mov	sp, r7
 802b32a:	bd80      	pop	{r7, pc}

0802b32c <_ZSt14__copy_move_a2ILb0EPP14ServoDataFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802b32c:	b580      	push	{r7, lr}
 802b32e:	b084      	sub	sp, #16
 802b330:	af00      	add	r7, sp, #0
 802b332:	60f8      	str	r0, [r7, #12]
 802b334:	60b9      	str	r1, [r7, #8]
 802b336:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802b338:	687a      	ldr	r2, [r7, #4]
 802b33a:	68b9      	ldr	r1, [r7, #8]
 802b33c:	68f8      	ldr	r0, [r7, #12]
 802b33e:	f000 fa7c 	bl	802b83a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP14ServoDataFrameEEPT_PKS5_S8_S6_>
 802b342:	4603      	mov	r3, r0
    }
 802b344:	4618      	mov	r0, r3
 802b346:	3710      	adds	r7, #16
 802b348:	46bd      	mov	sp, r7
 802b34a:	bd80      	pop	{r7, pc}

0802b34c <_ZSt23__copy_move_backward_a2ILb0EPP14ServoDataFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802b34c:	b580      	push	{r7, lr}
 802b34e:	b084      	sub	sp, #16
 802b350:	af00      	add	r7, sp, #0
 802b352:	60f8      	str	r0, [r7, #12]
 802b354:	60b9      	str	r1, [r7, #8]
 802b356:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802b358:	687a      	ldr	r2, [r7, #4]
 802b35a:	68b9      	ldr	r1, [r7, #8]
 802b35c:	68f8      	ldr	r0, [r7, #12]
 802b35e:	f000 fa89 	bl	802b874 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP14ServoDataFrameEEPT_PKS5_S8_S6_>
 802b362:	4603      	mov	r3, r0
    }
 802b364:	4618      	mov	r0, r3
 802b366:	3710      	adds	r7, #16
 802b368:	46bd      	mov	sp, r7
 802b36a:	bd80      	pop	{r7, pc}

0802b36c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802b36c:	b580      	push	{r7, lr}
 802b36e:	b086      	sub	sp, #24
 802b370:	af00      	add	r7, sp, #0
 802b372:	60f8      	str	r0, [r7, #12]
 802b374:	60b9      	str	r1, [r7, #8]
 802b376:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802b378:	68ba      	ldr	r2, [r7, #8]
 802b37a:	68fb      	ldr	r3, [r7, #12]
 802b37c:	1ad3      	subs	r3, r2, r3
 802b37e:	109b      	asrs	r3, r3, #2
 802b380:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802b382:	697b      	ldr	r3, [r7, #20]
 802b384:	2b00      	cmp	r3, #0
 802b386:	d006      	beq.n	802b396 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802b388:	697b      	ldr	r3, [r7, #20]
 802b38a:	009b      	lsls	r3, r3, #2
 802b38c:	461a      	mov	r2, r3
 802b38e:	68f9      	ldr	r1, [r7, #12]
 802b390:	6878      	ldr	r0, [r7, #4]
 802b392:	f014 ff91 	bl	80402b8 <memmove>
	  return __result + _Num;
 802b396:	697b      	ldr	r3, [r7, #20]
 802b398:	009b      	lsls	r3, r3, #2
 802b39a:	687a      	ldr	r2, [r7, #4]
 802b39c:	4413      	add	r3, r2
	}
 802b39e:	4618      	mov	r0, r3
 802b3a0:	3718      	adds	r7, #24
 802b3a2:	46bd      	mov	sp, r7
 802b3a4:	bd80      	pop	{r7, pc}

0802b3a6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802b3a6:	b580      	push	{r7, lr}
 802b3a8:	b086      	sub	sp, #24
 802b3aa:	af00      	add	r7, sp, #0
 802b3ac:	60f8      	str	r0, [r7, #12]
 802b3ae:	60b9      	str	r1, [r7, #8]
 802b3b0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802b3b2:	68ba      	ldr	r2, [r7, #8]
 802b3b4:	68fb      	ldr	r3, [r7, #12]
 802b3b6:	1ad3      	subs	r3, r2, r3
 802b3b8:	109b      	asrs	r3, r3, #2
 802b3ba:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802b3bc:	697b      	ldr	r3, [r7, #20]
 802b3be:	2b00      	cmp	r3, #0
 802b3c0:	d00a      	beq.n	802b3d8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802b3c2:	697b      	ldr	r3, [r7, #20]
 802b3c4:	009b      	lsls	r3, r3, #2
 802b3c6:	425b      	negs	r3, r3
 802b3c8:	687a      	ldr	r2, [r7, #4]
 802b3ca:	18d0      	adds	r0, r2, r3
 802b3cc:	697b      	ldr	r3, [r7, #20]
 802b3ce:	009b      	lsls	r3, r3, #2
 802b3d0:	461a      	mov	r2, r3
 802b3d2:	68f9      	ldr	r1, [r7, #12]
 802b3d4:	f014 ff70 	bl	80402b8 <memmove>
	  return __result - _Num;
 802b3d8:	697b      	ldr	r3, [r7, #20]
 802b3da:	009b      	lsls	r3, r3, #2
 802b3dc:	425b      	negs	r3, r3
 802b3de:	687a      	ldr	r2, [r7, #4]
 802b3e0:	4413      	add	r3, r2
	}
 802b3e2:	4618      	mov	r0, r3
 802b3e4:	3718      	adds	r7, #24
 802b3e6:	46bd      	mov	sp, r7
 802b3e8:	bd80      	pop	{r7, pc}

0802b3ea <_ZStneISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>:
    operator!=(const move_iterator<_Iterator>& __x,
 802b3ea:	b580      	push	{r7, lr}
 802b3ec:	b082      	sub	sp, #8
 802b3ee:	af00      	add	r7, sp, #0
 802b3f0:	6078      	str	r0, [r7, #4]
 802b3f2:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 802b3f4:	6839      	ldr	r1, [r7, #0]
 802b3f6:	6878      	ldr	r0, [r7, #4]
 802b3f8:	f000 fa5e 	bl	802b8b8 <_ZSteqISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>
 802b3fc:	4603      	mov	r3, r0
 802b3fe:	f083 0301 	eor.w	r3, r3, #1
 802b402:	b2db      	uxtb	r3, r3
 802b404:	4618      	mov	r0, r3
 802b406:	3708      	adds	r7, #8
 802b408:	46bd      	mov	sp, r7
 802b40a:	bd80      	pop	{r7, pc}

0802b40c <_ZNSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEppEv>:
      operator++()
 802b40c:	b580      	push	{r7, lr}
 802b40e:	b082      	sub	sp, #8
 802b410:	af00      	add	r7, sp, #0
 802b412:	6078      	str	r0, [r7, #4]
	++_M_current;
 802b414:	687b      	ldr	r3, [r7, #4]
 802b416:	4618      	mov	r0, r3
 802b418:	f7fb ff65 	bl	80272e6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EppEv>
	return *this;
 802b41c:	687b      	ldr	r3, [r7, #4]
      }
 802b41e:	4618      	mov	r0, r3
 802b420:	3708      	adds	r7, #8
 802b422:	46bd      	mov	sp, r7
 802b424:	bd80      	pop	{r7, pc}

0802b426 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEdeEv>:
      operator*() const
 802b426:	b580      	push	{r7, lr}
 802b428:	b082      	sub	sp, #8
 802b42a:	af00      	add	r7, sp, #0
 802b42c:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 802b42e:	687b      	ldr	r3, [r7, #4]
 802b430:	4618      	mov	r0, r3
 802b432:	f7fd faf1 	bl	8028a18 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 802b436:	4603      	mov	r3, r0
 802b438:	4618      	mov	r0, r3
 802b43a:	3708      	adds	r7, #8
 802b43c:	46bd      	mov	sp, r7
 802b43e:	bd80      	pop	{r7, pc}

0802b440 <_ZSt10_ConstructI8IMUFrameJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 802b440:	b5b0      	push	{r4, r5, r7, lr}
 802b442:	b082      	sub	sp, #8
 802b444:	af00      	add	r7, sp, #0
 802b446:	6078      	str	r0, [r7, #4]
 802b448:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 802b44a:	6838      	ldr	r0, [r7, #0]
 802b44c:	f000 fa52 	bl	802b8f4 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 802b450:	4605      	mov	r5, r0
 802b452:	687b      	ldr	r3, [r7, #4]
 802b454:	4619      	mov	r1, r3
 802b456:	2018      	movs	r0, #24
 802b458:	f7f5 fccc 	bl	8020df4 <_ZnwjPv>
 802b45c:	4603      	mov	r3, r0
 802b45e:	461c      	mov	r4, r3
 802b460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802b462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802b464:	e895 0003 	ldmia.w	r5, {r0, r1}
 802b468:	e884 0003 	stmia.w	r4, {r0, r1}
 802b46c:	bf00      	nop
 802b46e:	3708      	adds	r7, #8
 802b470:	46bd      	mov	sp, r7
 802b472:	bdb0      	pop	{r4, r5, r7, pc}

0802b474 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>:
    __copy_move_a1(_II __first, _II __last,
 802b474:	b580      	push	{r7, lr}
 802b476:	b088      	sub	sp, #32
 802b478:	af00      	add	r7, sp, #0
 802b47a:	60f8      	str	r0, [r7, #12]
 802b47c:	60b9      	str	r1, [r7, #8]
 802b47e:	607a      	str	r2, [r7, #4]
 802b480:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 802b482:	687a      	ldr	r2, [r7, #4]
 802b484:	68bb      	ldr	r3, [r7, #8]
 802b486:	1ad3      	subs	r3, r2, r3
 802b488:	10db      	asrs	r3, r3, #3
 802b48a:	4a22      	ldr	r2, [pc, #136]	; (802b514 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xa0>)
 802b48c:	fb02 f303 	mul.w	r3, r2, r3
 802b490:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802b492:	697b      	ldr	r3, [r7, #20]
 802b494:	2b00      	cmp	r3, #0
 802b496:	dd34      	ble.n	802b502 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 802b498:	683b      	ldr	r3, [r7, #0]
 802b49a:	689a      	ldr	r2, [r3, #8]
 802b49c:	683b      	ldr	r3, [r7, #0]
 802b49e:	681b      	ldr	r3, [r3, #0]
 802b4a0:	1ad3      	subs	r3, r2, r3
 802b4a2:	10db      	asrs	r3, r3, #3
 802b4a4:	4a1b      	ldr	r2, [pc, #108]	; (802b514 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xa0>)
 802b4a6:	fb02 f303 	mul.w	r3, r2, r3
 802b4aa:	61bb      	str	r3, [r7, #24]
 802b4ac:	f107 0218 	add.w	r2, r7, #24
 802b4b0:	f107 0314 	add.w	r3, r7, #20
 802b4b4:	4611      	mov	r1, r2
 802b4b6:	4618      	mov	r0, r3
 802b4b8:	f7fd ff89 	bl	80293ce <_ZSt3minIiERKT_S2_S2_>
 802b4bc:	4603      	mov	r3, r0
	  const difference_type __clen
 802b4be:	681b      	ldr	r3, [r3, #0]
 802b4c0:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 802b4c2:	69fa      	ldr	r2, [r7, #28]
 802b4c4:	4613      	mov	r3, r2
 802b4c6:	005b      	lsls	r3, r3, #1
 802b4c8:	4413      	add	r3, r2
 802b4ca:	00db      	lsls	r3, r3, #3
 802b4cc:	461a      	mov	r2, r3
 802b4ce:	68bb      	ldr	r3, [r7, #8]
 802b4d0:	1899      	adds	r1, r3, r2
 802b4d2:	683b      	ldr	r3, [r7, #0]
 802b4d4:	681b      	ldr	r3, [r3, #0]
 802b4d6:	461a      	mov	r2, r3
 802b4d8:	68b8      	ldr	r0, [r7, #8]
 802b4da:	f000 fa16 	bl	802b90a <_ZSt14__copy_move_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>
	  __first += __clen;
 802b4de:	69fa      	ldr	r2, [r7, #28]
 802b4e0:	4613      	mov	r3, r2
 802b4e2:	005b      	lsls	r3, r3, #1
 802b4e4:	4413      	add	r3, r2
 802b4e6:	00db      	lsls	r3, r3, #3
 802b4e8:	461a      	mov	r2, r3
 802b4ea:	68bb      	ldr	r3, [r7, #8]
 802b4ec:	4413      	add	r3, r2
 802b4ee:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 802b4f0:	69f9      	ldr	r1, [r7, #28]
 802b4f2:	6838      	ldr	r0, [r7, #0]
 802b4f4:	f7fe fc36 	bl	8029d64 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	  __len -= __clen;
 802b4f8:	697a      	ldr	r2, [r7, #20]
 802b4fa:	69fb      	ldr	r3, [r7, #28]
 802b4fc:	1ad3      	subs	r3, r2, r3
 802b4fe:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802b500:	e7c7      	b.n	802b492 <_ZSt14__copy_move_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x1e>
      return __result;
 802b502:	6839      	ldr	r1, [r7, #0]
 802b504:	68f8      	ldr	r0, [r7, #12]
 802b506:	f7f9 f8a1 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
    }
 802b50a:	68f8      	ldr	r0, [r7, #12]
 802b50c:	3720      	adds	r7, #32
 802b50e:	46bd      	mov	sp, r7
 802b510:	bd80      	pop	{r7, pc}
 802b512:	bf00      	nop
 802b514:	aaaaaaab 	.word	0xaaaaaaab

0802b518 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 802b518:	b580      	push	{r7, lr}
 802b51a:	b088      	sub	sp, #32
 802b51c:	af00      	add	r7, sp, #0
 802b51e:	60f8      	str	r0, [r7, #12]
 802b520:	60b9      	str	r1, [r7, #8]
 802b522:	607a      	str	r2, [r7, #4]
 802b524:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 802b526:	687a      	ldr	r2, [r7, #4]
 802b528:	68bb      	ldr	r3, [r7, #8]
 802b52a:	1ad3      	subs	r3, r2, r3
 802b52c:	10db      	asrs	r3, r3, #3
 802b52e:	4a2c      	ldr	r2, [pc, #176]	; (802b5e0 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xc8>)
 802b530:	fb02 f303 	mul.w	r3, r2, r3
 802b534:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802b536:	697b      	ldr	r3, [r7, #20]
 802b538:	2b00      	cmp	r3, #0
 802b53a:	dd49      	ble.n	802b5d0 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 802b53c:	683b      	ldr	r3, [r7, #0]
 802b53e:	681a      	ldr	r2, [r3, #0]
 802b540:	683b      	ldr	r3, [r7, #0]
 802b542:	685b      	ldr	r3, [r3, #4]
 802b544:	1ad3      	subs	r3, r2, r3
 802b546:	10db      	asrs	r3, r3, #3
 802b548:	4a25      	ldr	r2, [pc, #148]	; (802b5e0 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xc8>)
 802b54a:	fb02 f303 	mul.w	r3, r2, r3
 802b54e:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 802b550:	683b      	ldr	r3, [r7, #0]
 802b552:	681b      	ldr	r3, [r3, #0]
 802b554:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 802b556:	693b      	ldr	r3, [r7, #16]
 802b558:	2b00      	cmp	r3, #0
 802b55a:	d10f      	bne.n	802b57c <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 802b55c:	f7fb fee3 	bl	8027326 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 802b560:	4603      	mov	r3, r0
 802b562:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 802b564:	683b      	ldr	r3, [r7, #0]
 802b566:	68db      	ldr	r3, [r3, #12]
 802b568:	3b04      	subs	r3, #4
 802b56a:	681a      	ldr	r2, [r3, #0]
 802b56c:	693b      	ldr	r3, [r7, #16]
 802b56e:	4619      	mov	r1, r3
 802b570:	460b      	mov	r3, r1
 802b572:	005b      	lsls	r3, r3, #1
 802b574:	440b      	add	r3, r1
 802b576:	00db      	lsls	r3, r3, #3
 802b578:	4413      	add	r3, r2
 802b57a:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 802b57c:	f107 0210 	add.w	r2, r7, #16
 802b580:	f107 0314 	add.w	r3, r7, #20
 802b584:	4611      	mov	r1, r2
 802b586:	4618      	mov	r0, r3
 802b588:	f7fd ff21 	bl	80293ce <_ZSt3minIiERKT_S2_S2_>
 802b58c:	4603      	mov	r3, r0
 802b58e:	681b      	ldr	r3, [r3, #0]
 802b590:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 802b592:	69ba      	ldr	r2, [r7, #24]
 802b594:	4613      	mov	r3, r2
 802b596:	005b      	lsls	r3, r3, #1
 802b598:	4413      	add	r3, r2
 802b59a:	00db      	lsls	r3, r3, #3
 802b59c:	425b      	negs	r3, r3
 802b59e:	687a      	ldr	r2, [r7, #4]
 802b5a0:	4413      	add	r3, r2
 802b5a2:	69fa      	ldr	r2, [r7, #28]
 802b5a4:	6879      	ldr	r1, [r7, #4]
 802b5a6:	4618      	mov	r0, r3
 802b5a8:	f000 f9bf 	bl	802b92a <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>

	  __last -= __clen;
 802b5ac:	69ba      	ldr	r2, [r7, #24]
 802b5ae:	4613      	mov	r3, r2
 802b5b0:	005b      	lsls	r3, r3, #1
 802b5b2:	4413      	add	r3, r2
 802b5b4:	00db      	lsls	r3, r3, #3
 802b5b6:	425b      	negs	r3, r3
 802b5b8:	687a      	ldr	r2, [r7, #4]
 802b5ba:	4413      	add	r3, r2
 802b5bc:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 802b5be:	69b9      	ldr	r1, [r7, #24]
 802b5c0:	6838      	ldr	r0, [r7, #0]
 802b5c2:	f7fe fe25 	bl	802a210 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EmIEi>
	  __len -= __clen;
 802b5c6:	697a      	ldr	r2, [r7, #20]
 802b5c8:	69bb      	ldr	r3, [r7, #24]
 802b5ca:	1ad3      	subs	r3, r2, r3
 802b5cc:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802b5ce:	e7b2      	b.n	802b536 <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x1e>
	}

      return __result;
 802b5d0:	6839      	ldr	r1, [r7, #0]
 802b5d2:	68f8      	ldr	r0, [r7, #12]
 802b5d4:	f7f9 f83a 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
    }
 802b5d8:	68f8      	ldr	r0, [r7, #12]
 802b5da:	3720      	adds	r7, #32
 802b5dc:	46bd      	mov	sp, r7
 802b5de:	bd80      	pop	{r7, pc}
 802b5e0:	aaaaaaab 	.word	0xaaaaaaab

0802b5e4 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS2_PS2_EES5_ET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 802b5e4:	b580      	push	{r7, lr}
 802b5e6:	b098      	sub	sp, #96	; 0x60
 802b5e8:	af00      	add	r7, sp, #0
 802b5ea:	60f8      	str	r0, [r7, #12]
 802b5ec:	60b9      	str	r1, [r7, #8]
 802b5ee:	607a      	str	r2, [r7, #4]
 802b5f0:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802b5f2:	f107 0320 	add.w	r3, r7, #32
 802b5f6:	68b9      	ldr	r1, [r7, #8]
 802b5f8:	4618      	mov	r0, r3
 802b5fa:	f7fe ffaf 	bl	802a55c <_ZNSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEC1ERKS5_>
 802b5fe:	f107 0310 	add.w	r3, r7, #16
 802b602:	f107 0220 	add.w	r2, r7, #32
 802b606:	4611      	mov	r1, r2
 802b608:	4618      	mov	r0, r3
 802b60a:	f000 f99e 	bl	802b94a <_ZSt12__miter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 802b60e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802b612:	6879      	ldr	r1, [r7, #4]
 802b614:	4618      	mov	r0, r3
 802b616:	f7fe ffa1 	bl	802a55c <_ZNSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEC1ERKS5_>
 802b61a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802b61e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802b622:	4611      	mov	r1, r2
 802b624:	4618      	mov	r0, r3
 802b626:	f000 f990 	bl	802b94a <_ZSt12__miter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 802b62a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802b62e:	6839      	ldr	r1, [r7, #0]
 802b630:	4618      	mov	r0, r3
 802b632:	f7f9 f85d 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802b636:	68f8      	ldr	r0, [r7, #12]
 802b638:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802b63c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802b640:	f107 0110 	add.w	r1, r7, #16
 802b644:	f7fe ffcd 	bl	802a5e2 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorI14ServoDataFrameRS1_PS1_ES4_ET1_T0_S6_S5_>
    }
 802b648:	68f8      	ldr	r0, [r7, #12]
 802b64a:	3760      	adds	r7, #96	; 0x60
 802b64c:	46bd      	mov	sp, r7
 802b64e:	bd80      	pop	{r7, pc}

0802b650 <_ZSt14__copy_move_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>:
    __copy_move_a1(_II __first, _II __last,
 802b650:	b580      	push	{r7, lr}
 802b652:	b088      	sub	sp, #32
 802b654:	af00      	add	r7, sp, #0
 802b656:	60f8      	str	r0, [r7, #12]
 802b658:	60b9      	str	r1, [r7, #8]
 802b65a:	607a      	str	r2, [r7, #4]
 802b65c:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 802b65e:	687a      	ldr	r2, [r7, #4]
 802b660:	68bb      	ldr	r3, [r7, #8]
 802b662:	1ad3      	subs	r3, r2, r3
 802b664:	109b      	asrs	r3, r3, #2
 802b666:	4a21      	ldr	r2, [pc, #132]	; (802b6ec <_ZSt14__copy_move_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x9c>)
 802b668:	fb02 f303 	mul.w	r3, r2, r3
 802b66c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802b66e:	697b      	ldr	r3, [r7, #20]
 802b670:	2b00      	cmp	r3, #0
 802b672:	dd32      	ble.n	802b6da <_ZSt14__copy_move_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x8a>
	    = std::min(__len, __result._M_last - __result._M_cur);
 802b674:	683b      	ldr	r3, [r7, #0]
 802b676:	689a      	ldr	r2, [r3, #8]
 802b678:	683b      	ldr	r3, [r7, #0]
 802b67a:	681b      	ldr	r3, [r3, #0]
 802b67c:	1ad3      	subs	r3, r2, r3
 802b67e:	109b      	asrs	r3, r3, #2
 802b680:	4a1a      	ldr	r2, [pc, #104]	; (802b6ec <_ZSt14__copy_move_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x9c>)
 802b682:	fb02 f303 	mul.w	r3, r2, r3
 802b686:	61bb      	str	r3, [r7, #24]
 802b688:	f107 0218 	add.w	r2, r7, #24
 802b68c:	f107 0314 	add.w	r3, r7, #20
 802b690:	4611      	mov	r1, r2
 802b692:	4618      	mov	r0, r3
 802b694:	f7fd fe9b 	bl	80293ce <_ZSt3minIiERKT_S2_S2_>
 802b698:	4603      	mov	r3, r0
	  const difference_type __clen
 802b69a:	681b      	ldr	r3, [r3, #0]
 802b69c:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 802b69e:	69fb      	ldr	r3, [r7, #28]
 802b6a0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802b6a4:	fb02 f303 	mul.w	r3, r2, r3
 802b6a8:	68ba      	ldr	r2, [r7, #8]
 802b6aa:	18d1      	adds	r1, r2, r3
 802b6ac:	683b      	ldr	r3, [r7, #0]
 802b6ae:	681b      	ldr	r3, [r3, #0]
 802b6b0:	461a      	mov	r2, r3
 802b6b2:	68b8      	ldr	r0, [r7, #8]
 802b6b4:	f000 f95f 	bl	802b976 <_ZSt14__copy_move_a1ILb1EP14ServoDataFrameS1_ET1_T0_S3_S2_>
	  __first += __clen;
 802b6b8:	69fb      	ldr	r3, [r7, #28]
 802b6ba:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802b6be:	fb02 f303 	mul.w	r3, r2, r3
 802b6c2:	68ba      	ldr	r2, [r7, #8]
 802b6c4:	4413      	add	r3, r2
 802b6c6:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 802b6c8:	69f9      	ldr	r1, [r7, #28]
 802b6ca:	6838      	ldr	r0, [r7, #0]
 802b6cc:	f7fe fbae 	bl	8029e2c <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EpLEi>
	  __len -= __clen;
 802b6d0:	697a      	ldr	r2, [r7, #20]
 802b6d2:	69fb      	ldr	r3, [r7, #28]
 802b6d4:	1ad3      	subs	r3, r2, r3
 802b6d6:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802b6d8:	e7c9      	b.n	802b66e <_ZSt14__copy_move_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x1e>
      return __result;
 802b6da:	6839      	ldr	r1, [r7, #0]
 802b6dc:	68f8      	ldr	r0, [r7, #12]
 802b6de:	f7f9 f807 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
    }
 802b6e2:	68f8      	ldr	r0, [r7, #12]
 802b6e4:	3720      	adds	r7, #32
 802b6e6:	46bd      	mov	sp, r7
 802b6e8:	bd80      	pop	{r7, pc}
 802b6ea:	bf00      	nop
 802b6ec:	07a44c6b 	.word	0x07a44c6b

0802b6f0 <_ZSt23__copy_move_backward_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_>:
    __copy_move_backward_a1(_II __first, _II __last,
 802b6f0:	b580      	push	{r7, lr}
 802b6f2:	b088      	sub	sp, #32
 802b6f4:	af00      	add	r7, sp, #0
 802b6f6:	60f8      	str	r0, [r7, #12]
 802b6f8:	60b9      	str	r1, [r7, #8]
 802b6fa:	607a      	str	r2, [r7, #4]
 802b6fc:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 802b6fe:	687a      	ldr	r2, [r7, #4]
 802b700:	68bb      	ldr	r3, [r7, #8]
 802b702:	1ad3      	subs	r3, r2, r3
 802b704:	109b      	asrs	r3, r3, #2
 802b706:	4a2c      	ldr	r2, [pc, #176]	; (802b7b8 <_ZSt23__copy_move_backward_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xc8>)
 802b708:	fb02 f303 	mul.w	r3, r2, r3
 802b70c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802b70e:	697b      	ldr	r3, [r7, #20]
 802b710:	2b00      	cmp	r3, #0
 802b712:	dd49      	ble.n	802b7a8 <_ZSt23__copy_move_backward_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xb8>
	  difference_type __rlen = __result._M_cur - __result._M_first;
 802b714:	683b      	ldr	r3, [r7, #0]
 802b716:	681a      	ldr	r2, [r3, #0]
 802b718:	683b      	ldr	r3, [r7, #0]
 802b71a:	685b      	ldr	r3, [r3, #4]
 802b71c:	1ad3      	subs	r3, r2, r3
 802b71e:	109b      	asrs	r3, r3, #2
 802b720:	4a25      	ldr	r2, [pc, #148]	; (802b7b8 <_ZSt23__copy_move_backward_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0xc8>)
 802b722:	fb02 f303 	mul.w	r3, r2, r3
 802b726:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 802b728:	683b      	ldr	r3, [r7, #0]
 802b72a:	681b      	ldr	r3, [r3, #0]
 802b72c:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 802b72e:	693b      	ldr	r3, [r7, #16]
 802b730:	2b00      	cmp	r3, #0
 802b732:	d10f      	bne.n	802b754 <_ZSt23__copy_move_backward_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x64>
	      __rlen = _Iter::_S_buffer_size();
 802b734:	f7fb fe99 	bl	802746a <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_E14_S_buffer_sizeEv>
 802b738:	4603      	mov	r3, r0
 802b73a:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 802b73c:	683b      	ldr	r3, [r7, #0]
 802b73e:	68db      	ldr	r3, [r3, #12]
 802b740:	3b04      	subs	r3, #4
 802b742:	681a      	ldr	r2, [r3, #0]
 802b744:	693b      	ldr	r3, [r7, #16]
 802b746:	4619      	mov	r1, r3
 802b748:	f44f 7386 	mov.w	r3, #268	; 0x10c
 802b74c:	fb01 f303 	mul.w	r3, r1, r3
 802b750:	4413      	add	r3, r2
 802b752:	61fb      	str	r3, [r7, #28]
	  const difference_type __clen = std::min(__len, __rlen);
 802b754:	f107 0210 	add.w	r2, r7, #16
 802b758:	f107 0314 	add.w	r3, r7, #20
 802b75c:	4611      	mov	r1, r2
 802b75e:	4618      	mov	r0, r3
 802b760:	f7fd fe35 	bl	80293ce <_ZSt3minIiERKT_S2_S2_>
 802b764:	4603      	mov	r3, r0
 802b766:	681b      	ldr	r3, [r3, #0]
 802b768:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 802b76a:	69bb      	ldr	r3, [r7, #24]
 802b76c:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802b770:	fb02 f303 	mul.w	r3, r2, r3
 802b774:	425b      	negs	r3, r3
 802b776:	687a      	ldr	r2, [r7, #4]
 802b778:	4413      	add	r3, r2
 802b77a:	69fa      	ldr	r2, [r7, #28]
 802b77c:	6879      	ldr	r1, [r7, #4]
 802b77e:	4618      	mov	r0, r3
 802b780:	f000 f909 	bl	802b996 <_ZSt23__copy_move_backward_a1ILb1EP14ServoDataFrameS1_ET1_T0_S3_S2_>
	  __last -= __clen;
 802b784:	69bb      	ldr	r3, [r7, #24]
 802b786:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802b78a:	fb02 f303 	mul.w	r3, r2, r3
 802b78e:	425b      	negs	r3, r3
 802b790:	687a      	ldr	r2, [r7, #4]
 802b792:	4413      	add	r3, r2
 802b794:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 802b796:	69b9      	ldr	r1, [r7, #24]
 802b798:	6838      	ldr	r0, [r7, #0]
 802b79a:	f7fe fe83 	bl	802a4a4 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EmIEi>
	  __len -= __clen;
 802b79e:	697a      	ldr	r2, [r7, #20]
 802b7a0:	69bb      	ldr	r3, [r7, #24]
 802b7a2:	1ad3      	subs	r3, r2, r3
 802b7a4:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802b7a6:	e7b2      	b.n	802b70e <_ZSt23__copy_move_backward_a1ILb1EP14ServoDataFrameS0_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS5_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSB_PSB_EE6__typeES5_S5_SE_+0x1e>
      return __result;
 802b7a8:	6839      	ldr	r1, [r7, #0]
 802b7aa:	68f8      	ldr	r0, [r7, #12]
 802b7ac:	f7f8 ffa0 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
    }
 802b7b0:	68f8      	ldr	r0, [r7, #12]
 802b7b2:	3720      	adds	r7, #32
 802b7b4:	46bd      	mov	sp, r7
 802b7b6:	bd80      	pop	{r7, pc}
 802b7b8:	07a44c6b 	.word	0x07a44c6b

0802b7bc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802b7bc:	b580      	push	{r7, lr}
 802b7be:	b086      	sub	sp, #24
 802b7c0:	af00      	add	r7, sp, #0
 802b7c2:	60f8      	str	r0, [r7, #12]
 802b7c4:	60b9      	str	r1, [r7, #8]
 802b7c6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802b7c8:	68ba      	ldr	r2, [r7, #8]
 802b7ca:	68fb      	ldr	r3, [r7, #12]
 802b7cc:	1ad3      	subs	r3, r2, r3
 802b7ce:	109b      	asrs	r3, r3, #2
 802b7d0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802b7d2:	697b      	ldr	r3, [r7, #20]
 802b7d4:	2b00      	cmp	r3, #0
 802b7d6:	d006      	beq.n	802b7e6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802b7d8:	697b      	ldr	r3, [r7, #20]
 802b7da:	009b      	lsls	r3, r3, #2
 802b7dc:	461a      	mov	r2, r3
 802b7de:	68f9      	ldr	r1, [r7, #12]
 802b7e0:	6878      	ldr	r0, [r7, #4]
 802b7e2:	f014 fd69 	bl	80402b8 <memmove>
	  return __result + _Num;
 802b7e6:	697b      	ldr	r3, [r7, #20]
 802b7e8:	009b      	lsls	r3, r3, #2
 802b7ea:	687a      	ldr	r2, [r7, #4]
 802b7ec:	4413      	add	r3, r2
	}
 802b7ee:	4618      	mov	r0, r3
 802b7f0:	3718      	adds	r7, #24
 802b7f2:	46bd      	mov	sp, r7
 802b7f4:	bd80      	pop	{r7, pc}

0802b7f6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802b7f6:	b580      	push	{r7, lr}
 802b7f8:	b086      	sub	sp, #24
 802b7fa:	af00      	add	r7, sp, #0
 802b7fc:	60f8      	str	r0, [r7, #12]
 802b7fe:	60b9      	str	r1, [r7, #8]
 802b800:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802b802:	68ba      	ldr	r2, [r7, #8]
 802b804:	68fb      	ldr	r3, [r7, #12]
 802b806:	1ad3      	subs	r3, r2, r3
 802b808:	109b      	asrs	r3, r3, #2
 802b80a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802b80c:	697b      	ldr	r3, [r7, #20]
 802b80e:	2b00      	cmp	r3, #0
 802b810:	d00a      	beq.n	802b828 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802b812:	697b      	ldr	r3, [r7, #20]
 802b814:	009b      	lsls	r3, r3, #2
 802b816:	425b      	negs	r3, r3
 802b818:	687a      	ldr	r2, [r7, #4]
 802b81a:	18d0      	adds	r0, r2, r3
 802b81c:	697b      	ldr	r3, [r7, #20]
 802b81e:	009b      	lsls	r3, r3, #2
 802b820:	461a      	mov	r2, r3
 802b822:	68f9      	ldr	r1, [r7, #12]
 802b824:	f014 fd48 	bl	80402b8 <memmove>
	  return __result - _Num;
 802b828:	697b      	ldr	r3, [r7, #20]
 802b82a:	009b      	lsls	r3, r3, #2
 802b82c:	425b      	negs	r3, r3
 802b82e:	687a      	ldr	r2, [r7, #4]
 802b830:	4413      	add	r3, r2
	}
 802b832:	4618      	mov	r0, r3
 802b834:	3718      	adds	r7, #24
 802b836:	46bd      	mov	sp, r7
 802b838:	bd80      	pop	{r7, pc}

0802b83a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP14ServoDataFrameEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802b83a:	b580      	push	{r7, lr}
 802b83c:	b086      	sub	sp, #24
 802b83e:	af00      	add	r7, sp, #0
 802b840:	60f8      	str	r0, [r7, #12]
 802b842:	60b9      	str	r1, [r7, #8]
 802b844:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802b846:	68ba      	ldr	r2, [r7, #8]
 802b848:	68fb      	ldr	r3, [r7, #12]
 802b84a:	1ad3      	subs	r3, r2, r3
 802b84c:	109b      	asrs	r3, r3, #2
 802b84e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802b850:	697b      	ldr	r3, [r7, #20]
 802b852:	2b00      	cmp	r3, #0
 802b854:	d006      	beq.n	802b864 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP14ServoDataFrameEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802b856:	697b      	ldr	r3, [r7, #20]
 802b858:	009b      	lsls	r3, r3, #2
 802b85a:	461a      	mov	r2, r3
 802b85c:	68f9      	ldr	r1, [r7, #12]
 802b85e:	6878      	ldr	r0, [r7, #4]
 802b860:	f014 fd2a 	bl	80402b8 <memmove>
	  return __result + _Num;
 802b864:	697b      	ldr	r3, [r7, #20]
 802b866:	009b      	lsls	r3, r3, #2
 802b868:	687a      	ldr	r2, [r7, #4]
 802b86a:	4413      	add	r3, r2
	}
 802b86c:	4618      	mov	r0, r3
 802b86e:	3718      	adds	r7, #24
 802b870:	46bd      	mov	sp, r7
 802b872:	bd80      	pop	{r7, pc}

0802b874 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP14ServoDataFrameEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802b874:	b580      	push	{r7, lr}
 802b876:	b086      	sub	sp, #24
 802b878:	af00      	add	r7, sp, #0
 802b87a:	60f8      	str	r0, [r7, #12]
 802b87c:	60b9      	str	r1, [r7, #8]
 802b87e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802b880:	68ba      	ldr	r2, [r7, #8]
 802b882:	68fb      	ldr	r3, [r7, #12]
 802b884:	1ad3      	subs	r3, r2, r3
 802b886:	109b      	asrs	r3, r3, #2
 802b888:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802b88a:	697b      	ldr	r3, [r7, #20]
 802b88c:	2b00      	cmp	r3, #0
 802b88e:	d00a      	beq.n	802b8a6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP14ServoDataFrameEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802b890:	697b      	ldr	r3, [r7, #20]
 802b892:	009b      	lsls	r3, r3, #2
 802b894:	425b      	negs	r3, r3
 802b896:	687a      	ldr	r2, [r7, #4]
 802b898:	18d0      	adds	r0, r2, r3
 802b89a:	697b      	ldr	r3, [r7, #20]
 802b89c:	009b      	lsls	r3, r3, #2
 802b89e:	461a      	mov	r2, r3
 802b8a0:	68f9      	ldr	r1, [r7, #12]
 802b8a2:	f014 fd09 	bl	80402b8 <memmove>
	  return __result - _Num;
 802b8a6:	697b      	ldr	r3, [r7, #20]
 802b8a8:	009b      	lsls	r3, r3, #2
 802b8aa:	425b      	negs	r3, r3
 802b8ac:	687a      	ldr	r2, [r7, #4]
 802b8ae:	4413      	add	r3, r2
	}
 802b8b0:	4618      	mov	r0, r3
 802b8b2:	3718      	adds	r7, #24
 802b8b4:	46bd      	mov	sp, r7
 802b8b6:	bd80      	pop	{r7, pc}

0802b8b8 <_ZSteqISt15_Deque_iteratorI8IMUFrameRS1_PS1_EEbRKSt13move_iteratorIT_ES9_>:
    operator==(const move_iterator<_Iterator>& __x,
 802b8b8:	b580      	push	{r7, lr}
 802b8ba:	b08a      	sub	sp, #40	; 0x28
 802b8bc:	af00      	add	r7, sp, #0
 802b8be:	6078      	str	r0, [r7, #4]
 802b8c0:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 802b8c2:	f107 0308 	add.w	r3, r7, #8
 802b8c6:	6879      	ldr	r1, [r7, #4]
 802b8c8:	4618      	mov	r0, r3
 802b8ca:	f000 f874 	bl	802b9b6 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EE4baseEv>
 802b8ce:	f107 0318 	add.w	r3, r7, #24
 802b8d2:	6839      	ldr	r1, [r7, #0]
 802b8d4:	4618      	mov	r0, r3
 802b8d6:	f000 f86e 	bl	802b9b6 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EE4baseEv>
 802b8da:	f107 0218 	add.w	r2, r7, #24
 802b8de:	f107 0308 	add.w	r3, r7, #8
 802b8e2:	4611      	mov	r1, r2
 802b8e4:	4618      	mov	r0, r3
 802b8e6:	f7fb fa81 	bl	8026dec <_ZSteqRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 802b8ea:	4603      	mov	r3, r0
 802b8ec:	4618      	mov	r0, r3
 802b8ee:	3728      	adds	r7, #40	; 0x28
 802b8f0:	46bd      	mov	sp, r7
 802b8f2:	bd80      	pop	{r7, pc}

0802b8f4 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 802b8f4:	b480      	push	{r7}
 802b8f6:	b083      	sub	sp, #12
 802b8f8:	af00      	add	r7, sp, #0
 802b8fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 802b8fc:	687b      	ldr	r3, [r7, #4]
 802b8fe:	4618      	mov	r0, r3
 802b900:	370c      	adds	r7, #12
 802b902:	46bd      	mov	sp, r7
 802b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b908:	4770      	bx	lr

0802b90a <_ZSt14__copy_move_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802b90a:	b580      	push	{r7, lr}
 802b90c:	b084      	sub	sp, #16
 802b90e:	af00      	add	r7, sp, #0
 802b910:	60f8      	str	r0, [r7, #12]
 802b912:	60b9      	str	r1, [r7, #8]
 802b914:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802b916:	687a      	ldr	r2, [r7, #4]
 802b918:	68b9      	ldr	r1, [r7, #8]
 802b91a:	68f8      	ldr	r0, [r7, #12]
 802b91c:	f000 f859 	bl	802b9d2 <_ZSt14__copy_move_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>
 802b920:	4603      	mov	r3, r0
 802b922:	4618      	mov	r0, r3
 802b924:	3710      	adds	r7, #16
 802b926:	46bd      	mov	sp, r7
 802b928:	bd80      	pop	{r7, pc}

0802b92a <_ZSt23__copy_move_backward_a1ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802b92a:	b580      	push	{r7, lr}
 802b92c:	b084      	sub	sp, #16
 802b92e:	af00      	add	r7, sp, #0
 802b930:	60f8      	str	r0, [r7, #12]
 802b932:	60b9      	str	r1, [r7, #8]
 802b934:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802b936:	687a      	ldr	r2, [r7, #4]
 802b938:	68b9      	ldr	r1, [r7, #8]
 802b93a:	68f8      	ldr	r0, [r7, #12]
 802b93c:	f000 f859 	bl	802b9f2 <_ZSt23__copy_move_backward_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>
 802b940:	4603      	mov	r3, r0
 802b942:	4618      	mov	r0, r3
 802b944:	3710      	adds	r7, #16
 802b946:	46bd      	mov	sp, r7
 802b948:	bd80      	pop	{r7, pc}

0802b94a <_ZSt12__miter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 802b94a:	b580      	push	{r7, lr}
 802b94c:	b086      	sub	sp, #24
 802b94e:	af00      	add	r7, sp, #0
 802b950:	6078      	str	r0, [r7, #4]
 802b952:	6039      	str	r1, [r7, #0]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 802b954:	f107 0308 	add.w	r3, r7, #8
 802b958:	6839      	ldr	r1, [r7, #0]
 802b95a:	4618      	mov	r0, r3
 802b95c:	f000 f859 	bl	802ba12 <_ZNKSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EE4baseEv>
 802b960:	687b      	ldr	r3, [r7, #4]
 802b962:	f107 0208 	add.w	r2, r7, #8
 802b966:	4611      	mov	r1, r2
 802b968:	4618      	mov	r0, r3
 802b96a:	f7fe fe2d 	bl	802a5c8 <_ZSt12__miter_baseISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EET_S5_>
 802b96e:	6878      	ldr	r0, [r7, #4]
 802b970:	3718      	adds	r7, #24
 802b972:	46bd      	mov	sp, r7
 802b974:	bd80      	pop	{r7, pc}

0802b976 <_ZSt14__copy_move_a1ILb1EP14ServoDataFrameS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802b976:	b580      	push	{r7, lr}
 802b978:	b084      	sub	sp, #16
 802b97a:	af00      	add	r7, sp, #0
 802b97c:	60f8      	str	r0, [r7, #12]
 802b97e:	60b9      	str	r1, [r7, #8]
 802b980:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802b982:	687a      	ldr	r2, [r7, #4]
 802b984:	68b9      	ldr	r1, [r7, #8]
 802b986:	68f8      	ldr	r0, [r7, #12]
 802b988:	f000 f851 	bl	802ba2e <_ZSt14__copy_move_a2ILb1EP14ServoDataFrameS1_ET1_T0_S3_S2_>
 802b98c:	4603      	mov	r3, r0
 802b98e:	4618      	mov	r0, r3
 802b990:	3710      	adds	r7, #16
 802b992:	46bd      	mov	sp, r7
 802b994:	bd80      	pop	{r7, pc}

0802b996 <_ZSt23__copy_move_backward_a1ILb1EP14ServoDataFrameS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802b996:	b580      	push	{r7, lr}
 802b998:	b084      	sub	sp, #16
 802b99a:	af00      	add	r7, sp, #0
 802b99c:	60f8      	str	r0, [r7, #12]
 802b99e:	60b9      	str	r1, [r7, #8]
 802b9a0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802b9a2:	687a      	ldr	r2, [r7, #4]
 802b9a4:	68b9      	ldr	r1, [r7, #8]
 802b9a6:	68f8      	ldr	r0, [r7, #12]
 802b9a8:	f000 f851 	bl	802ba4e <_ZSt23__copy_move_backward_a2ILb1EP14ServoDataFrameS1_ET1_T0_S3_S2_>
 802b9ac:	4603      	mov	r3, r0
 802b9ae:	4618      	mov	r0, r3
 802b9b0:	3710      	adds	r7, #16
 802b9b2:	46bd      	mov	sp, r7
 802b9b4:	bd80      	pop	{r7, pc}

0802b9b6 <_ZNKSt13move_iteratorISt15_Deque_iteratorI8IMUFrameRS1_PS1_EE4baseEv>:
      base() const
 802b9b6:	b580      	push	{r7, lr}
 802b9b8:	b082      	sub	sp, #8
 802b9ba:	af00      	add	r7, sp, #0
 802b9bc:	6078      	str	r0, [r7, #4]
 802b9be:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 802b9c0:	683b      	ldr	r3, [r7, #0]
 802b9c2:	4619      	mov	r1, r3
 802b9c4:	6878      	ldr	r0, [r7, #4]
 802b9c6:	f7f8 fe41 	bl	802464c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 802b9ca:	6878      	ldr	r0, [r7, #4]
 802b9cc:	3708      	adds	r7, #8
 802b9ce:	46bd      	mov	sp, r7
 802b9d0:	bd80      	pop	{r7, pc}

0802b9d2 <_ZSt14__copy_move_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802b9d2:	b580      	push	{r7, lr}
 802b9d4:	b084      	sub	sp, #16
 802b9d6:	af00      	add	r7, sp, #0
 802b9d8:	60f8      	str	r0, [r7, #12]
 802b9da:	60b9      	str	r1, [r7, #8]
 802b9dc:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802b9de:	687a      	ldr	r2, [r7, #4]
 802b9e0:	68b9      	ldr	r1, [r7, #8]
 802b9e2:	68f8      	ldr	r0, [r7, #12]
 802b9e4:	f000 f844 	bl	802ba70 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>
 802b9e8:	4603      	mov	r3, r0
    }
 802b9ea:	4618      	mov	r0, r3
 802b9ec:	3710      	adds	r7, #16
 802b9ee:	46bd      	mov	sp, r7
 802b9f0:	bd80      	pop	{r7, pc}

0802b9f2 <_ZSt23__copy_move_backward_a2ILb1EP8IMUFrameS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802b9f2:	b580      	push	{r7, lr}
 802b9f4:	b084      	sub	sp, #16
 802b9f6:	af00      	add	r7, sp, #0
 802b9f8:	60f8      	str	r0, [r7, #12]
 802b9fa:	60b9      	str	r1, [r7, #8]
 802b9fc:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802b9fe:	687a      	ldr	r2, [r7, #4]
 802ba00:	68b9      	ldr	r1, [r7, #8]
 802ba02:	68f8      	ldr	r0, [r7, #12]
 802ba04:	f000 f85e 	bl	802bac4 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_>
 802ba08:	4603      	mov	r3, r0
    }
 802ba0a:	4618      	mov	r0, r3
 802ba0c:	3710      	adds	r7, #16
 802ba0e:	46bd      	mov	sp, r7
 802ba10:	bd80      	pop	{r7, pc}

0802ba12 <_ZNKSt13move_iteratorISt15_Deque_iteratorI14ServoDataFrameRS1_PS1_EE4baseEv>:
      base() const
 802ba12:	b580      	push	{r7, lr}
 802ba14:	b082      	sub	sp, #8
 802ba16:	af00      	add	r7, sp, #0
 802ba18:	6078      	str	r0, [r7, #4]
 802ba1a:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 802ba1c:	683b      	ldr	r3, [r7, #0]
 802ba1e:	4619      	mov	r1, r3
 802ba20:	6878      	ldr	r0, [r7, #4]
 802ba22:	f7f8 fe65 	bl	80246f0 <_ZNSt15_Deque_iteratorI14ServoDataFrameRS0_PS0_EC1ERKS3_>
 802ba26:	6878      	ldr	r0, [r7, #4]
 802ba28:	3708      	adds	r7, #8
 802ba2a:	46bd      	mov	sp, r7
 802ba2c:	bd80      	pop	{r7, pc}

0802ba2e <_ZSt14__copy_move_a2ILb1EP14ServoDataFrameS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802ba2e:	b580      	push	{r7, lr}
 802ba30:	b084      	sub	sp, #16
 802ba32:	af00      	add	r7, sp, #0
 802ba34:	60f8      	str	r0, [r7, #12]
 802ba36:	60b9      	str	r1, [r7, #8]
 802ba38:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802ba3a:	687a      	ldr	r2, [r7, #4]
 802ba3c:	68b9      	ldr	r1, [r7, #8]
 802ba3e:	68f8      	ldr	r0, [r7, #12]
 802ba40:	f000 f870 	bl	802bb24 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI14ServoDataFrameEEPT_PKS4_S7_S5_>
 802ba44:	4603      	mov	r3, r0
    }
 802ba46:	4618      	mov	r0, r3
 802ba48:	3710      	adds	r7, #16
 802ba4a:	46bd      	mov	sp, r7
 802ba4c:	bd80      	pop	{r7, pc}

0802ba4e <_ZSt23__copy_move_backward_a2ILb1EP14ServoDataFrameS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802ba4e:	b580      	push	{r7, lr}
 802ba50:	b084      	sub	sp, #16
 802ba52:	af00      	add	r7, sp, #0
 802ba54:	60f8      	str	r0, [r7, #12]
 802ba56:	60b9      	str	r1, [r7, #8]
 802ba58:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802ba5a:	687a      	ldr	r2, [r7, #4]
 802ba5c:	68b9      	ldr	r1, [r7, #8]
 802ba5e:	68f8      	ldr	r0, [r7, #12]
 802ba60:	f000 f888 	bl	802bb74 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI14ServoDataFrameEEPT_PKS4_S7_S5_>
 802ba64:	4603      	mov	r3, r0
    }
 802ba66:	4618      	mov	r0, r3
 802ba68:	3710      	adds	r7, #16
 802ba6a:	46bd      	mov	sp, r7
 802ba6c:	bd80      	pop	{r7, pc}
	...

0802ba70 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802ba70:	b580      	push	{r7, lr}
 802ba72:	b086      	sub	sp, #24
 802ba74:	af00      	add	r7, sp, #0
 802ba76:	60f8      	str	r0, [r7, #12]
 802ba78:	60b9      	str	r1, [r7, #8]
 802ba7a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802ba7c:	68ba      	ldr	r2, [r7, #8]
 802ba7e:	68fb      	ldr	r3, [r7, #12]
 802ba80:	1ad3      	subs	r3, r2, r3
 802ba82:	10db      	asrs	r3, r3, #3
 802ba84:	4a0e      	ldr	r2, [pc, #56]	; (802bac0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x50>)
 802ba86:	fb02 f303 	mul.w	r3, r2, r3
 802ba8a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802ba8c:	697b      	ldr	r3, [r7, #20]
 802ba8e:	2b00      	cmp	r3, #0
 802ba90:	d009      	beq.n	802baa6 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8IMUFrameEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802ba92:	697a      	ldr	r2, [r7, #20]
 802ba94:	4613      	mov	r3, r2
 802ba96:	005b      	lsls	r3, r3, #1
 802ba98:	4413      	add	r3, r2
 802ba9a:	00db      	lsls	r3, r3, #3
 802ba9c:	461a      	mov	r2, r3
 802ba9e:	68f9      	ldr	r1, [r7, #12]
 802baa0:	6878      	ldr	r0, [r7, #4]
 802baa2:	f014 fc09 	bl	80402b8 <memmove>
	  return __result + _Num;
 802baa6:	697a      	ldr	r2, [r7, #20]
 802baa8:	4613      	mov	r3, r2
 802baaa:	005b      	lsls	r3, r3, #1
 802baac:	4413      	add	r3, r2
 802baae:	00db      	lsls	r3, r3, #3
 802bab0:	461a      	mov	r2, r3
 802bab2:	687b      	ldr	r3, [r7, #4]
 802bab4:	4413      	add	r3, r2
	}
 802bab6:	4618      	mov	r0, r3
 802bab8:	3718      	adds	r7, #24
 802baba:	46bd      	mov	sp, r7
 802babc:	bd80      	pop	{r7, pc}
 802babe:	bf00      	nop
 802bac0:	aaaaaaab 	.word	0xaaaaaaab

0802bac4 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802bac4:	b580      	push	{r7, lr}
 802bac6:	b086      	sub	sp, #24
 802bac8:	af00      	add	r7, sp, #0
 802baca:	60f8      	str	r0, [r7, #12]
 802bacc:	60b9      	str	r1, [r7, #8]
 802bace:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802bad0:	68ba      	ldr	r2, [r7, #8]
 802bad2:	68fb      	ldr	r3, [r7, #12]
 802bad4:	1ad3      	subs	r3, r2, r3
 802bad6:	10db      	asrs	r3, r3, #3
 802bad8:	4a11      	ldr	r2, [pc, #68]	; (802bb20 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_+0x5c>)
 802bada:	fb02 f303 	mul.w	r3, r2, r3
 802bade:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802bae0:	697b      	ldr	r3, [r7, #20]
 802bae2:	2b00      	cmp	r3, #0
 802bae4:	d010      	beq.n	802bb08 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI8IMUFrameEEPT_PKS4_S7_S5_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802bae6:	697a      	ldr	r2, [r7, #20]
 802bae8:	4613      	mov	r3, r2
 802baea:	005b      	lsls	r3, r3, #1
 802baec:	4413      	add	r3, r2
 802baee:	00db      	lsls	r3, r3, #3
 802baf0:	425b      	negs	r3, r3
 802baf2:	687a      	ldr	r2, [r7, #4]
 802baf4:	18d0      	adds	r0, r2, r3
 802baf6:	697a      	ldr	r2, [r7, #20]
 802baf8:	4613      	mov	r3, r2
 802bafa:	005b      	lsls	r3, r3, #1
 802bafc:	4413      	add	r3, r2
 802bafe:	00db      	lsls	r3, r3, #3
 802bb00:	461a      	mov	r2, r3
 802bb02:	68f9      	ldr	r1, [r7, #12]
 802bb04:	f014 fbd8 	bl	80402b8 <memmove>
	  return __result - _Num;
 802bb08:	697a      	ldr	r2, [r7, #20]
 802bb0a:	4613      	mov	r3, r2
 802bb0c:	005b      	lsls	r3, r3, #1
 802bb0e:	4413      	add	r3, r2
 802bb10:	00db      	lsls	r3, r3, #3
 802bb12:	425b      	negs	r3, r3
 802bb14:	687a      	ldr	r2, [r7, #4]
 802bb16:	4413      	add	r3, r2
	}
 802bb18:	4618      	mov	r0, r3
 802bb1a:	3718      	adds	r7, #24
 802bb1c:	46bd      	mov	sp, r7
 802bb1e:	bd80      	pop	{r7, pc}
 802bb20:	aaaaaaab 	.word	0xaaaaaaab

0802bb24 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI14ServoDataFrameEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802bb24:	b580      	push	{r7, lr}
 802bb26:	b086      	sub	sp, #24
 802bb28:	af00      	add	r7, sp, #0
 802bb2a:	60f8      	str	r0, [r7, #12]
 802bb2c:	60b9      	str	r1, [r7, #8]
 802bb2e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802bb30:	68ba      	ldr	r2, [r7, #8]
 802bb32:	68fb      	ldr	r3, [r7, #12]
 802bb34:	1ad3      	subs	r3, r2, r3
 802bb36:	109b      	asrs	r3, r3, #2
 802bb38:	4a0d      	ldr	r2, [pc, #52]	; (802bb70 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI14ServoDataFrameEEPT_PKS4_S7_S5_+0x4c>)
 802bb3a:	fb02 f303 	mul.w	r3, r2, r3
 802bb3e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802bb40:	697b      	ldr	r3, [r7, #20]
 802bb42:	2b00      	cmp	r3, #0
 802bb44:	d009      	beq.n	802bb5a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI14ServoDataFrameEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802bb46:	697b      	ldr	r3, [r7, #20]
 802bb48:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802bb4c:	fb02 f303 	mul.w	r3, r2, r3
 802bb50:	461a      	mov	r2, r3
 802bb52:	68f9      	ldr	r1, [r7, #12]
 802bb54:	6878      	ldr	r0, [r7, #4]
 802bb56:	f014 fbaf 	bl	80402b8 <memmove>
	  return __result + _Num;
 802bb5a:	697b      	ldr	r3, [r7, #20]
 802bb5c:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802bb60:	fb02 f303 	mul.w	r3, r2, r3
 802bb64:	687a      	ldr	r2, [r7, #4]
 802bb66:	4413      	add	r3, r2
	}
 802bb68:	4618      	mov	r0, r3
 802bb6a:	3718      	adds	r7, #24
 802bb6c:	46bd      	mov	sp, r7
 802bb6e:	bd80      	pop	{r7, pc}
 802bb70:	07a44c6b 	.word	0x07a44c6b

0802bb74 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI14ServoDataFrameEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802bb74:	b580      	push	{r7, lr}
 802bb76:	b086      	sub	sp, #24
 802bb78:	af00      	add	r7, sp, #0
 802bb7a:	60f8      	str	r0, [r7, #12]
 802bb7c:	60b9      	str	r1, [r7, #8]
 802bb7e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802bb80:	68ba      	ldr	r2, [r7, #8]
 802bb82:	68fb      	ldr	r3, [r7, #12]
 802bb84:	1ad3      	subs	r3, r2, r3
 802bb86:	109b      	asrs	r3, r3, #2
 802bb88:	4a11      	ldr	r2, [pc, #68]	; (802bbd0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI14ServoDataFrameEEPT_PKS4_S7_S5_+0x5c>)
 802bb8a:	fb02 f303 	mul.w	r3, r2, r3
 802bb8e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802bb90:	697b      	ldr	r3, [r7, #20]
 802bb92:	2b00      	cmp	r3, #0
 802bb94:	d010      	beq.n	802bbb8 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bI14ServoDataFrameEEPT_PKS4_S7_S5_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802bb96:	697b      	ldr	r3, [r7, #20]
 802bb98:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802bb9c:	fb02 f303 	mul.w	r3, r2, r3
 802bba0:	425b      	negs	r3, r3
 802bba2:	687a      	ldr	r2, [r7, #4]
 802bba4:	18d0      	adds	r0, r2, r3
 802bba6:	697b      	ldr	r3, [r7, #20]
 802bba8:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802bbac:	fb02 f303 	mul.w	r3, r2, r3
 802bbb0:	461a      	mov	r2, r3
 802bbb2:	68f9      	ldr	r1, [r7, #12]
 802bbb4:	f014 fb80 	bl	80402b8 <memmove>
	  return __result - _Num;
 802bbb8:	697b      	ldr	r3, [r7, #20]
 802bbba:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802bbbe:	fb02 f303 	mul.w	r3, r2, r3
 802bbc2:	425b      	negs	r3, r3
 802bbc4:	687a      	ldr	r2, [r7, #4]
 802bbc6:	4413      	add	r3, r2
	}
 802bbc8:	4618      	mov	r0, r3
 802bbca:	3718      	adds	r7, #24
 802bbcc:	46bd      	mov	sp, r7
 802bbce:	bd80      	pop	{r7, pc}
 802bbd0:	07a44c6b 	.word	0x07a44c6b

0802bbd4 <_Z41__static_initialization_and_destruction_0ii>:
 802bbd4:	b580      	push	{r7, lr}
 802bbd6:	b082      	sub	sp, #8
 802bbd8:	af00      	add	r7, sp, #0
 802bbda:	6078      	str	r0, [r7, #4]
 802bbdc:	6039      	str	r1, [r7, #0]
 802bbde:	687b      	ldr	r3, [r7, #4]
 802bbe0:	2b01      	cmp	r3, #1
 802bbe2:	d107      	bne.n	802bbf4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 802bbe4:	683b      	ldr	r3, [r7, #0]
 802bbe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802bbea:	4293      	cmp	r3, r2
 802bbec:	d102      	bne.n	802bbf4 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbCtx;
 802bbee:	4809      	ldr	r0, [pc, #36]	; (802bc14 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 802bbf0:	f7f7 f88a 	bl	8022d08 <_ZN18MotherboardContextC1Ev>
 802bbf4:	687b      	ldr	r3, [r7, #4]
 802bbf6:	2b00      	cmp	r3, #0
 802bbf8:	d107      	bne.n	802bc0a <_Z41__static_initialization_and_destruction_0ii+0x36>
 802bbfa:	683b      	ldr	r3, [r7, #0]
 802bbfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802bc00:	4293      	cmp	r3, r2
 802bc02:	d102      	bne.n	802bc0a <_Z41__static_initialization_and_destruction_0ii+0x36>
 802bc04:	4803      	ldr	r0, [pc, #12]	; (802bc14 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 802bc06:	f7f7 f8df 	bl	8022dc8 <_ZN18MotherboardContextD1Ev>
}
 802bc0a:	bf00      	nop
 802bc0c:	3708      	adds	r7, #8
 802bc0e:	46bd      	mov	sp, r7
 802bc10:	bd80      	pop	{r7, pc}
 802bc12:	bf00      	nop
 802bc14:	240001d0 	.word	0x240001d0

0802bc18 <_GLOBAL__sub_I_MotherboardInit>:
 802bc18:	b580      	push	{r7, lr}
 802bc1a:	af00      	add	r7, sp, #0
 802bc1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802bc20:	2001      	movs	r0, #1
 802bc22:	f7ff ffd7 	bl	802bbd4 <_Z41__static_initialization_and_destruction_0ii>
 802bc26:	bd80      	pop	{r7, pc}

0802bc28 <_GLOBAL__sub_D_MotherboardInit>:
 802bc28:	b580      	push	{r7, lr}
 802bc2a:	af00      	add	r7, sp, #0
 802bc2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802bc30:	2000      	movs	r0, #0
 802bc32:	f7ff ffcf 	bl	802bbd4 <_Z41__static_initialization_and_destruction_0ii>
 802bc36:	bd80      	pop	{r7, pc}

0802bc38 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 802bc38:	b580      	push	{r7, lr}
 802bc3a:	b086      	sub	sp, #24
 802bc3c:	af00      	add	r7, sp, #0
 802bc3e:	60b9      	str	r1, [r7, #8]
 802bc40:	607b      	str	r3, [r7, #4]
 802bc42:	4603      	mov	r3, r0
 802bc44:	73fb      	strb	r3, [r7, #15]
 802bc46:	4613      	mov	r3, r2
 802bc48:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 802bc4a:	2300      	movs	r3, #0
 802bc4c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 802bc4e:	687b      	ldr	r3, [r7, #4]
 802bc50:	2b00      	cmp	r3, #0
 802bc52:	d008      	beq.n	802bc66 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 802bc54:	89ba      	ldrh	r2, [r7, #12]
 802bc56:	687b      	ldr	r3, [r7, #4]
 802bc58:	7bf8      	ldrb	r0, [r7, #15]
 802bc5a:	68b9      	ldr	r1, [r7, #8]
 802bc5c:	f001 f925 	bl	802ceaa <bhy2_hif_get_regs>
 802bc60:	4603      	mov	r3, r0
 802bc62:	75fb      	strb	r3, [r7, #23]
 802bc64:	e001      	b.n	802bc6a <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bc66:	23ff      	movs	r3, #255	; 0xff
 802bc68:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802bc6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802bc6e:	4618      	mov	r0, r3
 802bc70:	3718      	adds	r7, #24
 802bc72:	46bd      	mov	sp, r7
 802bc74:	bd80      	pop	{r7, pc}

0802bc76 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 802bc76:	b590      	push	{r4, r7, lr}
 802bc78:	b08f      	sub	sp, #60	; 0x3c
 802bc7a:	af02      	add	r7, sp, #8
 802bc7c:	60f8      	str	r0, [r7, #12]
 802bc7e:	60b9      	str	r1, [r7, #8]
 802bc80:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 802bc82:	2300      	movs	r3, #0
 802bc84:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 802bc86:	687b      	ldr	r3, [r7, #4]
 802bc88:	2b00      	cmp	r3, #0
 802bc8a:	d002      	beq.n	802bc92 <bhy2_get_and_process_fifo+0x1c>
 802bc8c:	68fb      	ldr	r3, [r7, #12]
 802bc8e:	2b00      	cmp	r3, #0
 802bc90:	d102      	bne.n	802bc98 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 802bc92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802bc96:	e11b      	b.n	802bed0 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 802bc98:	68bb      	ldr	r3, [r7, #8]
 802bc9a:	2b00      	cmp	r3, #0
 802bc9c:	d102      	bne.n	802bca4 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 802bc9e:	f06f 0305 	mvn.w	r3, #5
 802bca2:	e115      	b.n	802bed0 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 802bca4:	68ba      	ldr	r2, [r7, #8]
 802bca6:	2100      	movs	r1, #0
 802bca8:	68f8      	ldr	r0, [r7, #12]
 802bcaa:	f014 fb1f 	bl	80402ec <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 802bcae:	f107 0314 	add.w	r3, r7, #20
 802bcb2:	2214      	movs	r2, #20
 802bcb4:	2100      	movs	r1, #0
 802bcb6:	4618      	mov	r0, r3
 802bcb8:	f014 fb18 	bl	80402ec <memset>

    fifos.buffer = work_buffer;
 802bcbc:	68fb      	ldr	r3, [r7, #12]
 802bcbe:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 802bcc0:	68bb      	ldr	r3, [r7, #8]
 802bcc2:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 802bcc4:	687a      	ldr	r2, [r7, #4]
 802bcc6:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 802bcca:	4611      	mov	r1, r2
 802bccc:	4618      	mov	r0, r3
 802bcce:	f001 fa5f 	bl	802d190 <bhy2_hif_get_interrupt_status>
 802bcd2:	4603      	mov	r3, r0
 802bcd4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 802bcd8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802bcdc:	2b00      	cmp	r3, #0
 802bcde:	d002      	beq.n	802bce6 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 802bce0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802bce4:	e0f4      	b.n	802bed0 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 802bce6:	2300      	movs	r3, #0
 802bce8:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802bcea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802bcee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802bcf2:	e042      	b.n	802bd7a <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 802bcf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bcf8:	f003 0306 	and.w	r3, r3, #6
 802bcfc:	2b02      	cmp	r3, #2
 802bcfe:	d00e      	beq.n	802bd1e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 802bd00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bd04:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 802bd08:	2b04      	cmp	r3, #4
 802bd0a:	d008      	beq.n	802bd1e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 802bd0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bd10:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 802bd14:	2b06      	cmp	r3, #6
 802bd16:	d002      	beq.n	802bd1e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 802bd18:	69fb      	ldr	r3, [r7, #28]
 802bd1a:	2b00      	cmp	r3, #0
 802bd1c:	d020      	beq.n	802bd60 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 802bd1e:	2300      	movs	r3, #0
 802bd20:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 802bd22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802bd24:	69bb      	ldr	r3, [r7, #24]
 802bd26:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 802bd28:	6a3a      	ldr	r2, [r7, #32]
 802bd2a:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 802bd2c:	1ad1      	subs	r1, r2, r3
 802bd2e:	687b      	ldr	r3, [r7, #4]
 802bd30:	f107 0214 	add.w	r2, r7, #20
 802bd34:	f102 0408 	add.w	r4, r2, #8
 802bd38:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802bd3c:	9300      	str	r3, [sp, #0]
 802bd3e:	4623      	mov	r3, r4
 802bd40:	f001 fad7 	bl	802d2f2 <bhy2_hif_get_wakeup_fifo>
 802bd44:	4603      	mov	r3, r0
 802bd46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 802bd4a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802bd4e:	2b00      	cmp	r3, #0
 802bd50:	d002      	beq.n	802bd58 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 802bd52:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802bd56:	e0bb      	b.n	802bed0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802bd58:	69ba      	ldr	r2, [r7, #24]
 802bd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bd5c:	4413      	add	r3, r2
 802bd5e:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 802bd60:	f107 0314 	add.w	r3, r7, #20
 802bd64:	687a      	ldr	r2, [r7, #4]
 802bd66:	4619      	mov	r1, r3
 802bd68:	2000      	movs	r0, #0
 802bd6a:	f000 fbad 	bl	802c4c8 <parse_fifo>
 802bd6e:	4603      	mov	r3, r0
 802bd70:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 802bd74:	2300      	movs	r3, #0
 802bd76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802bd7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bd7e:	2b00      	cmp	r3, #0
 802bd80:	d102      	bne.n	802bd88 <bhy2_get_and_process_fifo+0x112>
 802bd82:	69fb      	ldr	r3, [r7, #28]
 802bd84:	2b00      	cmp	r3, #0
 802bd86:	d003      	beq.n	802bd90 <bhy2_get_and_process_fifo+0x11a>
 802bd88:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802bd8c:	2b00      	cmp	r3, #0
 802bd8e:	d0b1      	beq.n	802bcf4 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 802bd90:	2300      	movs	r3, #0
 802bd92:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802bd94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802bd98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802bd9c:	e042      	b.n	802be24 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 802bd9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bda2:	f003 0318 	and.w	r3, r3, #24
 802bda6:	2b08      	cmp	r3, #8
 802bda8:	d00e      	beq.n	802bdc8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 802bdaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bdae:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 802bdb2:	2b10      	cmp	r3, #16
 802bdb4:	d008      	beq.n	802bdc8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802bdb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802bdba:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 802bdbe:	2b18      	cmp	r3, #24
 802bdc0:	d002      	beq.n	802bdc8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802bdc2:	69fb      	ldr	r3, [r7, #28]
 802bdc4:	2b00      	cmp	r3, #0
 802bdc6:	d020      	beq.n	802be0a <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 802bdc8:	2300      	movs	r3, #0
 802bdca:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 802bdcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802bdce:	69bb      	ldr	r3, [r7, #24]
 802bdd0:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 802bdd2:	6a3a      	ldr	r2, [r7, #32]
 802bdd4:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 802bdd6:	1ad1      	subs	r1, r2, r3
 802bdd8:	687b      	ldr	r3, [r7, #4]
 802bdda:	f107 0214 	add.w	r2, r7, #20
 802bdde:	f102 0408 	add.w	r4, r2, #8
 802bde2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802bde6:	9300      	str	r3, [sp, #0]
 802bde8:	4623      	mov	r3, r4
 802bdea:	f001 fa98 	bl	802d31e <bhy2_hif_get_nonwakeup_fifo>
 802bdee:	4603      	mov	r3, r0
 802bdf0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 802bdf4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802bdf8:	2b00      	cmp	r3, #0
 802bdfa:	d002      	beq.n	802be02 <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 802bdfc:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802be00:	e066      	b.n	802bed0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802be02:	69ba      	ldr	r2, [r7, #24]
 802be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802be06:	4413      	add	r3, r2
 802be08:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 802be0a:	f107 0314 	add.w	r3, r7, #20
 802be0e:	687a      	ldr	r2, [r7, #4]
 802be10:	4619      	mov	r1, r3
 802be12:	2001      	movs	r0, #1
 802be14:	f000 fb58 	bl	802c4c8 <parse_fifo>
 802be18:	4603      	mov	r3, r0
 802be1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 802be1e:	2300      	movs	r3, #0
 802be20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802be24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802be28:	2b00      	cmp	r3, #0
 802be2a:	d102      	bne.n	802be32 <bhy2_get_and_process_fifo+0x1bc>
 802be2c:	69fb      	ldr	r3, [r7, #28]
 802be2e:	2b00      	cmp	r3, #0
 802be30:	d003      	beq.n	802be3a <bhy2_get_and_process_fifo+0x1c4>
 802be32:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802be36:	2b00      	cmp	r3, #0
 802be38:	d0b1      	beq.n	802bd9e <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 802be3a:	2300      	movs	r3, #0
 802be3c:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802be3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802be42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802be46:	e036      	b.n	802beb6 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 802be48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802be4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802be50:	2b00      	cmp	r3, #0
 802be52:	d102      	bne.n	802be5a <bhy2_get_and_process_fifo+0x1e4>
 802be54:	69fb      	ldr	r3, [r7, #28]
 802be56:	2b00      	cmp	r3, #0
 802be58:	d020      	beq.n	802be9c <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 802be5a:	2300      	movs	r3, #0
 802be5c:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 802be5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802be60:	69bb      	ldr	r3, [r7, #24]
 802be62:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 802be64:	6a3a      	ldr	r2, [r7, #32]
 802be66:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 802be68:	1ad1      	subs	r1, r2, r3
 802be6a:	687b      	ldr	r3, [r7, #4]
 802be6c:	f107 0214 	add.w	r2, r7, #20
 802be70:	f102 0408 	add.w	r4, r2, #8
 802be74:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802be78:	9300      	str	r3, [sp, #0]
 802be7a:	4623      	mov	r3, r4
 802be7c:	f001 fab0 	bl	802d3e0 <bhy2_hif_get_status_fifo_async>
 802be80:	4603      	mov	r3, r0
 802be82:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 802be86:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802be8a:	2b00      	cmp	r3, #0
 802be8c:	d002      	beq.n	802be94 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 802be8e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802be92:	e01d      	b.n	802bed0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802be94:	69ba      	ldr	r2, [r7, #24]
 802be96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802be98:	4413      	add	r3, r2
 802be9a:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 802be9c:	f107 0314 	add.w	r3, r7, #20
 802bea0:	687a      	ldr	r2, [r7, #4]
 802bea2:	4619      	mov	r1, r3
 802bea4:	2002      	movs	r0, #2
 802bea6:	f000 fb0f 	bl	802c4c8 <parse_fifo>
 802beaa:	4603      	mov	r3, r0
 802beac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 802beb0:	2300      	movs	r3, #0
 802beb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802beb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802beba:	2b00      	cmp	r3, #0
 802bebc:	d102      	bne.n	802bec4 <bhy2_get_and_process_fifo+0x24e>
 802bebe:	69fb      	ldr	r3, [r7, #28]
 802bec0:	2b00      	cmp	r3, #0
 802bec2:	d003      	beq.n	802becc <bhy2_get_and_process_fifo+0x256>
 802bec4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802bec8:	2b00      	cmp	r3, #0
 802beca:	d0bd      	beq.n	802be48 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 802becc:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 802bed0:	4618      	mov	r0, r3
 802bed2:	3734      	adds	r7, #52	; 0x34
 802bed4:	46bd      	mov	sp, r7
 802bed6:	bd90      	pop	{r4, r7, pc}

0802bed8 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 802bed8:	b580      	push	{r7, lr}
 802beda:	b086      	sub	sp, #24
 802bedc:	af00      	add	r7, sp, #0
 802bede:	4603      	mov	r3, r0
 802bee0:	ed87 0a02 	vstr	s0, [r7, #8]
 802bee4:	6079      	str	r1, [r7, #4]
 802bee6:	603a      	str	r2, [r7, #0]
 802bee8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802beea:	2300      	movs	r3, #0
 802beec:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 802beee:	683b      	ldr	r3, [r7, #0]
 802bef0:	2b00      	cmp	r3, #0
 802bef2:	d00a      	beq.n	802bf0a <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 802bef4:	683a      	ldr	r2, [r7, #0]
 802bef6:	7bfb      	ldrb	r3, [r7, #15]
 802bef8:	6879      	ldr	r1, [r7, #4]
 802befa:	ed97 0a02 	vldr	s0, [r7, #8]
 802befe:	4618      	mov	r0, r3
 802bf00:	f001 fa84 	bl	802d40c <bhy2_hif_exec_sensor_conf_cmd>
 802bf04:	4603      	mov	r3, r0
 802bf06:	75fb      	strb	r3, [r7, #23]
 802bf08:	e001      	b.n	802bf0e <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bf0a:	23ff      	movs	r3, #255	; 0xff
 802bf0c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802bf0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802bf12:	4618      	mov	r0, r3
 802bf14:	3718      	adds	r7, #24
 802bf16:	46bd      	mov	sp, r7
 802bf18:	bd80      	pop	{r7, pc}

0802bf1a <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 802bf1a:	b580      	push	{r7, lr}
 802bf1c:	b084      	sub	sp, #16
 802bf1e:	af00      	add	r7, sp, #0
 802bf20:	6078      	str	r0, [r7, #4]
 802bf22:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802bf24:	2300      	movs	r3, #0
 802bf26:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802bf28:	683b      	ldr	r3, [r7, #0]
 802bf2a:	2b00      	cmp	r3, #0
 802bf2c:	d007      	beq.n	802bf3e <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 802bf2e:	683b      	ldr	r3, [r7, #0]
 802bf30:	4619      	mov	r1, r3
 802bf32:	6878      	ldr	r0, [r7, #4]
 802bf34:	f001 f8e8 	bl	802d108 <bhy2_hif_get_product_id>
 802bf38:	4603      	mov	r3, r0
 802bf3a:	73fb      	strb	r3, [r7, #15]
 802bf3c:	e001      	b.n	802bf42 <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bf3e:	23ff      	movs	r3, #255	; 0xff
 802bf40:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802bf42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802bf46:	4618      	mov	r0, r3
 802bf48:	3710      	adds	r7, #16
 802bf4a:	46bd      	mov	sp, r7
 802bf4c:	bd80      	pop	{r7, pc}

0802bf4e <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 802bf4e:	b580      	push	{r7, lr}
 802bf50:	b084      	sub	sp, #16
 802bf52:	af00      	add	r7, sp, #0
 802bf54:	6078      	str	r0, [r7, #4]
 802bf56:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802bf58:	2300      	movs	r3, #0
 802bf5a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802bf5c:	683b      	ldr	r3, [r7, #0]
 802bf5e:	2b00      	cmp	r3, #0
 802bf60:	d007      	beq.n	802bf72 <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 802bf62:	683b      	ldr	r3, [r7, #0]
 802bf64:	4619      	mov	r1, r3
 802bf66:	6878      	ldr	r0, [r7, #4]
 802bf68:	f001 f8de 	bl	802d128 <bhy2_hif_get_kernel_version>
 802bf6c:	4603      	mov	r3, r0
 802bf6e:	73fb      	strb	r3, [r7, #15]
 802bf70:	e001      	b.n	802bf76 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bf72:	23ff      	movs	r3, #255	; 0xff
 802bf74:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802bf76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802bf7a:	4618      	mov	r0, r3
 802bf7c:	3710      	adds	r7, #16
 802bf7e:	46bd      	mov	sp, r7
 802bf80:	bd80      	pop	{r7, pc}

0802bf82 <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 802bf82:	b580      	push	{r7, lr}
 802bf84:	b084      	sub	sp, #16
 802bf86:	af00      	add	r7, sp, #0
 802bf88:	6078      	str	r0, [r7, #4]
 802bf8a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802bf8c:	2300      	movs	r3, #0
 802bf8e:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802bf90:	683b      	ldr	r3, [r7, #0]
 802bf92:	2b00      	cmp	r3, #0
 802bf94:	d007      	beq.n	802bfa6 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 802bf96:	683b      	ldr	r3, [r7, #0]
 802bf98:	4619      	mov	r1, r3
 802bf9a:	6878      	ldr	r0, [r7, #4]
 802bf9c:	f001 f8e8 	bl	802d170 <bhy2_hif_get_boot_status>
 802bfa0:	4603      	mov	r3, r0
 802bfa2:	73fb      	strb	r3, [r7, #15]
 802bfa4:	e001      	b.n	802bfaa <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bfa6:	23ff      	movs	r3, #255	; 0xff
 802bfa8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802bfaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802bfae:	4618      	mov	r0, r3
 802bfb0:	3710      	adds	r7, #16
 802bfb2:	46bd      	mov	sp, r7
 802bfb4:	bd80      	pop	{r7, pc}

0802bfb6 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 802bfb6:	b580      	push	{r7, lr}
 802bfb8:	b086      	sub	sp, #24
 802bfba:	af02      	add	r7, sp, #8
 802bfbc:	6078      	str	r0, [r7, #4]
 802bfbe:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 802bfc0:	2300      	movs	r3, #0
 802bfc2:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 802bfc4:	2300      	movs	r3, #0
 802bfc6:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802bfc8:	683b      	ldr	r3, [r7, #0]
 802bfca:	2b00      	cmp	r3, #0
 802bfcc:	d00d      	beq.n	802bfea <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 802bfce:	683b      	ldr	r3, [r7, #0]
 802bfd0:	f107 0208 	add.w	r2, r7, #8
 802bfd4:	9300      	str	r3, [sp, #0]
 802bfd6:	4613      	mov	r3, r2
 802bfd8:	2220      	movs	r2, #32
 802bfda:	6879      	ldr	r1, [r7, #4]
 802bfdc:	f240 101f 	movw	r0, #287	; 0x11f
 802bfe0:	f001 f80a 	bl	802cff8 <bhy2_hif_get_parameter>
 802bfe4:	4603      	mov	r3, r0
 802bfe6:	73fb      	strb	r3, [r7, #15]
 802bfe8:	e001      	b.n	802bfee <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bfea:	23ff      	movs	r3, #255	; 0xff
 802bfec:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802bfee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802bff2:	4618      	mov	r0, r3
 802bff4:	3710      	adds	r7, #16
 802bff6:	46bd      	mov	sp, r7
 802bff8:	bd80      	pop	{r7, pc}

0802bffa <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 802bffa:	b580      	push	{r7, lr}
 802bffc:	b086      	sub	sp, #24
 802bffe:	af00      	add	r7, sp, #0
 802c000:	60f8      	str	r0, [r7, #12]
 802c002:	60b9      	str	r1, [r7, #8]
 802c004:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 802c006:	2300      	movs	r3, #0
 802c008:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 802c00a:	687b      	ldr	r3, [r7, #4]
 802c00c:	2b00      	cmp	r3, #0
 802c00e:	d002      	beq.n	802c016 <bhy2_upload_firmware_to_ram+0x1c>
 802c010:	68fb      	ldr	r3, [r7, #12]
 802c012:	2b00      	cmp	r3, #0
 802c014:	d102      	bne.n	802c01c <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 802c016:	23ff      	movs	r3, #255	; 0xff
 802c018:	75fb      	strb	r3, [r7, #23]
 802c01a:	e007      	b.n	802c02c <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 802c01c:	687b      	ldr	r3, [r7, #4]
 802c01e:	461a      	mov	r2, r3
 802c020:	68b9      	ldr	r1, [r7, #8]
 802c022:	68f8      	ldr	r0, [r7, #12]
 802c024:	f001 f90d 	bl	802d242 <bhy2_hif_upload_firmware_to_ram>
 802c028:	4603      	mov	r3, r0
 802c02a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802c02c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c030:	4618      	mov	r0, r3
 802c032:	3718      	adds	r7, #24
 802c034:	46bd      	mov	sp, r7
 802c036:	bd80      	pop	{r7, pc}

0802c038 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 802c038:	b580      	push	{r7, lr}
 802c03a:	b084      	sub	sp, #16
 802c03c:	af00      	add	r7, sp, #0
 802c03e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 802c040:	2300      	movs	r3, #0
 802c042:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802c044:	687b      	ldr	r3, [r7, #4]
 802c046:	2b00      	cmp	r3, #0
 802c048:	d102      	bne.n	802c050 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 802c04a:	23ff      	movs	r3, #255	; 0xff
 802c04c:	73fb      	strb	r3, [r7, #15]
 802c04e:	e005      	b.n	802c05c <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 802c050:	687b      	ldr	r3, [r7, #4]
 802c052:	4618      	mov	r0, r3
 802c054:	f001 f932 	bl	802d2bc <bhy2_hif_boot_program_ram>
 802c058:	4603      	mov	r3, r0
 802c05a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802c05c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c060:	4618      	mov	r0, r3
 802c062:	3710      	adds	r7, #16
 802c064:	46bd      	mov	sp, r7
 802c066:	bd80      	pop	{r7, pc}

0802c068 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 802c068:	b580      	push	{r7, lr}
 802c06a:	b084      	sub	sp, #16
 802c06c:	af00      	add	r7, sp, #0
 802c06e:	4603      	mov	r3, r0
 802c070:	6039      	str	r1, [r7, #0]
 802c072:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 802c074:	2300      	movs	r3, #0
 802c076:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802c078:	683b      	ldr	r3, [r7, #0]
 802c07a:	2b00      	cmp	r3, #0
 802c07c:	d102      	bne.n	802c084 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 802c07e:	23ff      	movs	r3, #255	; 0xff
 802c080:	73fb      	strb	r3, [r7, #15]
 802c082:	e007      	b.n	802c094 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 802c084:	683b      	ldr	r3, [r7, #0]
 802c086:	1df9      	adds	r1, r7, #7
 802c088:	2201      	movs	r2, #1
 802c08a:	2007      	movs	r0, #7
 802c08c:	f000 ff45 	bl	802cf1a <bhy2_hif_set_regs>
 802c090:	4603      	mov	r3, r0
 802c092:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802c094:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c098:	4618      	mov	r0, r3
 802c09a:	3710      	adds	r7, #16
 802c09c:	46bd      	mov	sp, r7
 802c09e:	bd80      	pop	{r7, pc}

0802c0a0 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 802c0a0:	b580      	push	{r7, lr}
 802c0a2:	b084      	sub	sp, #16
 802c0a4:	af00      	add	r7, sp, #0
 802c0a6:	6078      	str	r0, [r7, #4]
 802c0a8:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802c0aa:	2300      	movs	r3, #0
 802c0ac:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802c0ae:	683b      	ldr	r3, [r7, #0]
 802c0b0:	2b00      	cmp	r3, #0
 802c0b2:	d102      	bne.n	802c0ba <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 802c0b4:	23ff      	movs	r3, #255	; 0xff
 802c0b6:	73fb      	strb	r3, [r7, #15]
 802c0b8:	e007      	b.n	802c0ca <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 802c0ba:	683b      	ldr	r3, [r7, #0]
 802c0bc:	2201      	movs	r2, #1
 802c0be:	6879      	ldr	r1, [r7, #4]
 802c0c0:	2007      	movs	r0, #7
 802c0c2:	f000 fef2 	bl	802ceaa <bhy2_hif_get_regs>
 802c0c6:	4603      	mov	r3, r0
 802c0c8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802c0ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c0ce:	4618      	mov	r0, r3
 802c0d0:	3710      	adds	r7, #16
 802c0d2:	46bd      	mov	sp, r7
 802c0d4:	bd80      	pop	{r7, pc}

0802c0d6 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 802c0d6:	b580      	push	{r7, lr}
 802c0d8:	b084      	sub	sp, #16
 802c0da:	af00      	add	r7, sp, #0
 802c0dc:	6078      	str	r0, [r7, #4]
 802c0de:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802c0e0:	2300      	movs	r3, #0
 802c0e2:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802c0e4:	683b      	ldr	r3, [r7, #0]
 802c0e6:	2b00      	cmp	r3, #0
 802c0e8:	d102      	bne.n	802c0f0 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 802c0ea:	23ff      	movs	r3, #255	; 0xff
 802c0ec:	73fb      	strb	r3, [r7, #15]
 802c0ee:	e006      	b.n	802c0fe <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 802c0f0:	683b      	ldr	r3, [r7, #0]
 802c0f2:	4619      	mov	r1, r3
 802c0f4:	6878      	ldr	r0, [r7, #4]
 802c0f6:	f001 f84b 	bl	802d190 <bhy2_hif_get_interrupt_status>
 802c0fa:	4603      	mov	r3, r0
 802c0fc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802c0fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c102:	4618      	mov	r0, r3
 802c104:	3710      	adds	r7, #16
 802c106:	46bd      	mov	sp, r7
 802c108:	bd80      	pop	{r7, pc}

0802c10a <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 802c10a:	b580      	push	{r7, lr}
 802c10c:	b084      	sub	sp, #16
 802c10e:	af00      	add	r7, sp, #0
 802c110:	4603      	mov	r3, r0
 802c112:	6039      	str	r1, [r7, #0]
 802c114:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 802c116:	2300      	movs	r3, #0
 802c118:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802c11a:	683b      	ldr	r3, [r7, #0]
 802c11c:	2b00      	cmp	r3, #0
 802c11e:	d102      	bne.n	802c126 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 802c120:	23ff      	movs	r3, #255	; 0xff
 802c122:	73fb      	strb	r3, [r7, #15]
 802c124:	e007      	b.n	802c136 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 802c126:	683b      	ldr	r3, [r7, #0]
 802c128:	1df9      	adds	r1, r7, #7
 802c12a:	2201      	movs	r2, #1
 802c12c:	2006      	movs	r0, #6
 802c12e:	f000 fef4 	bl	802cf1a <bhy2_hif_set_regs>
 802c132:	4603      	mov	r3, r0
 802c134:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802c136:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c13a:	4618      	mov	r0, r3
 802c13c:	3710      	adds	r7, #16
 802c13e:	46bd      	mov	sp, r7
 802c140:	bd80      	pop	{r7, pc}

0802c142 <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 802c142:	b580      	push	{r7, lr}
 802c144:	b084      	sub	sp, #16
 802c146:	af00      	add	r7, sp, #0
 802c148:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 802c14a:	2300      	movs	r3, #0
 802c14c:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802c14e:	687b      	ldr	r3, [r7, #4]
 802c150:	2b00      	cmp	r3, #0
 802c152:	d102      	bne.n	802c15a <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 802c154:	23ff      	movs	r3, #255	; 0xff
 802c156:	73fb      	strb	r3, [r7, #15]
 802c158:	e005      	b.n	802c166 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 802c15a:	687b      	ldr	r3, [r7, #4]
 802c15c:	4618      	mov	r0, r3
 802c15e:	f001 f827 	bl	802d1b0 <bhy2_hif_reset>
 802c162:	4603      	mov	r3, r0
 802c164:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802c166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c16a:	4618      	mov	r0, r3
 802c16c:	3710      	adds	r7, #16
 802c16e:	46bd      	mov	sp, r7
 802c170:	bd80      	pop	{r7, pc}

0802c172 <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 802c172:	b580      	push	{r7, lr}
 802c174:	b08a      	sub	sp, #40	; 0x28
 802c176:	af04      	add	r7, sp, #16
 802c178:	60b9      	str	r1, [r7, #8]
 802c17a:	607a      	str	r2, [r7, #4]
 802c17c:	603b      	str	r3, [r7, #0]
 802c17e:	4603      	mov	r3, r0
 802c180:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802c182:	2300      	movs	r3, #0
 802c184:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 802c186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c188:	2b00      	cmp	r3, #0
 802c18a:	d014      	beq.n	802c1b6 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 802c18c:	f640 1238 	movw	r2, #2360	; 0x938
 802c190:	2100      	movs	r1, #0
 802c192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c194:	f014 f8aa 	bl	80402ec <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 802c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c19a:	7bf8      	ldrb	r0, [r7, #15]
 802c19c:	9302      	str	r3, [sp, #8]
 802c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c1a0:	9301      	str	r3, [sp, #4]
 802c1a2:	6a3b      	ldr	r3, [r7, #32]
 802c1a4:	9300      	str	r3, [sp, #0]
 802c1a6:	683b      	ldr	r3, [r7, #0]
 802c1a8:	687a      	ldr	r2, [r7, #4]
 802c1aa:	68b9      	ldr	r1, [r7, #8]
 802c1ac:	f000 fe3e 	bl	802ce2c <bhy2_hif_init>
 802c1b0:	4603      	mov	r3, r0
 802c1b2:	75fb      	strb	r3, [r7, #23]
 802c1b4:	e001      	b.n	802c1ba <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802c1b6:	23ff      	movs	r3, #255	; 0xff
 802c1b8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802c1ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c1be:	4618      	mov	r0, r3
 802c1c0:	3718      	adds	r7, #24
 802c1c2:	46bd      	mov	sp, r7
 802c1c4:	bd80      	pop	{r7, pc}

0802c1c6 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 802c1c6:	b480      	push	{r7}
 802c1c8:	b087      	sub	sp, #28
 802c1ca:	af00      	add	r7, sp, #0
 802c1cc:	60b9      	str	r1, [r7, #8]
 802c1ce:	607a      	str	r2, [r7, #4]
 802c1d0:	603b      	str	r3, [r7, #0]
 802c1d2:	4603      	mov	r3, r0
 802c1d4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802c1d6:	2300      	movs	r3, #0
 802c1d8:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 802c1da:	683b      	ldr	r3, [r7, #0]
 802c1dc:	2b00      	cmp	r3, #0
 802c1de:	d002      	beq.n	802c1e6 <bhy2_register_fifo_parse_callback+0x20>
 802c1e0:	68bb      	ldr	r3, [r7, #8]
 802c1e2:	2b00      	cmp	r3, #0
 802c1e4:	d102      	bne.n	802c1ec <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 802c1e6:	23ff      	movs	r3, #255	; 0xff
 802c1e8:	75fb      	strb	r3, [r7, #23]
 802c1ea:	e013      	b.n	802c214 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 802c1ec:	7bfa      	ldrb	r2, [r7, #15]
 802c1ee:	6839      	ldr	r1, [r7, #0]
 802c1f0:	4613      	mov	r3, r2
 802c1f2:	00db      	lsls	r3, r3, #3
 802c1f4:	4413      	add	r3, r2
 802c1f6:	440b      	add	r3, r1
 802c1f8:	3318      	adds	r3, #24
 802c1fa:	68ba      	ldr	r2, [r7, #8]
 802c1fc:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 802c200:	7bfa      	ldrb	r2, [r7, #15]
 802c202:	6839      	ldr	r1, [r7, #0]
 802c204:	4613      	mov	r3, r2
 802c206:	00db      	lsls	r3, r3, #3
 802c208:	4413      	add	r3, r2
 802c20a:	440b      	add	r3, r1
 802c20c:	3318      	adds	r3, #24
 802c20e:	687a      	ldr	r2, [r7, #4]
 802c210:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 802c214:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c218:	4618      	mov	r0, r3
 802c21a:	371c      	adds	r7, #28
 802c21c:	46bd      	mov	sp, r7
 802c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c222:	4770      	bx	lr

0802c224 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 802c224:	b580      	push	{r7, lr}
 802c226:	b092      	sub	sp, #72	; 0x48
 802c228:	af00      	add	r7, sp, #0
 802c22a:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 802c22c:	687b      	ldr	r3, [r7, #4]
 802c22e:	2b00      	cmp	r3, #0
 802c230:	d103      	bne.n	802c23a <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 802c232:	23ff      	movs	r3, #255	; 0xff
 802c234:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 802c238:	e079      	b.n	802c32e <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 802c23a:	f107 0308 	add.w	r3, r7, #8
 802c23e:	6879      	ldr	r1, [r7, #4]
 802c240:	4618      	mov	r0, r3
 802c242:	f7ff feb8 	bl	802bfb6 <bhy2_get_virt_sensor_list>
 802c246:	4603      	mov	r3, r0
 802c248:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 802c24c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 802c250:	2b00      	cmp	r3, #0
 802c252:	d16c      	bne.n	802c32e <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 802c254:	687b      	ldr	r3, [r7, #4]
 802c256:	2201      	movs	r2, #1
 802c258:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 802c25a:	2301      	movs	r3, #1
 802c25c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802c260:	e041      	b.n	802c2e6 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 802c262:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802c266:	08db      	lsrs	r3, r3, #3
 802c268:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 802c26c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802c270:	f003 0307 	and.w	r3, r3, #7
 802c274:	2201      	movs	r2, #1
 802c276:	fa02 f303 	lsl.w	r3, r2, r3
 802c27a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 802c27e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 802c282:	3348      	adds	r3, #72	; 0x48
 802c284:	443b      	add	r3, r7
 802c286:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 802c28a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 802c28e:	4013      	ands	r3, r2
 802c290:	b2db      	uxtb	r3, r3
 802c292:	2b00      	cmp	r3, #0
 802c294:	d022      	beq.n	802c2dc <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 802c296:	687a      	ldr	r2, [r7, #4]
 802c298:	f107 0128 	add.w	r1, r7, #40	; 0x28
 802c29c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802c2a0:	4618      	mov	r0, r3
 802c2a2:	f001 f8e6 	bl	802d472 <bhy2_hif_get_sensor_info>
 802c2a6:	4603      	mov	r3, r0
 802c2a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 802c2ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 802c2b0:	2b00      	cmp	r3, #0
 802c2b2:	d113      	bne.n	802c2dc <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 802c2b4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 802c2b8:	2b00      	cmp	r3, #0
 802c2ba:	d103      	bne.n	802c2c4 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 802c2bc:	23f8      	movs	r3, #248	; 0xf8
 802c2be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 802c2c2:	e018      	b.n	802c2f6 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 802c2c4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 802c2c8:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 802c2cc:	6879      	ldr	r1, [r7, #4]
 802c2ce:	4613      	mov	r3, r2
 802c2d0:	00db      	lsls	r3, r3, #3
 802c2d2:	4413      	add	r3, r2
 802c2d4:	440b      	add	r3, r1
 802c2d6:	331c      	adds	r3, #28
 802c2d8:	4602      	mov	r2, r0
 802c2da:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 802c2dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802c2e0:	3301      	adds	r3, #1
 802c2e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802c2e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802c2ea:	2bf4      	cmp	r3, #244	; 0xf4
 802c2ec:	d803      	bhi.n	802c2f6 <bhy2_update_virtual_sensor_list+0xd2>
 802c2ee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 802c2f2:	2b00      	cmp	r3, #0
 802c2f4:	d0b5      	beq.n	802c262 <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 802c2f6:	23ff      	movs	r3, #255	; 0xff
 802c2f8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802c2fc:	e013      	b.n	802c326 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 802c2fe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802c302:	3bf5      	subs	r3, #245	; 0xf5
 802c304:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 802c308:	490c      	ldr	r1, [pc, #48]	; (802c33c <bhy2_update_virtual_sensor_list+0x118>)
 802c30a:	5cc8      	ldrb	r0, [r1, r3]
 802c30c:	6879      	ldr	r1, [r7, #4]
 802c30e:	4613      	mov	r3, r2
 802c310:	00db      	lsls	r3, r3, #3
 802c312:	4413      	add	r3, r2
 802c314:	440b      	add	r3, r1
 802c316:	331c      	adds	r3, #28
 802c318:	4602      	mov	r2, r0
 802c31a:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 802c31c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802c320:	3b01      	subs	r3, #1
 802c322:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802c326:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802c32a:	2bf4      	cmp	r3, #244	; 0xf4
 802c32c:	d8e7      	bhi.n	802c2fe <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 802c32e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 802c332:	4618      	mov	r0, r3
 802c334:	3748      	adds	r7, #72	; 0x48
 802c336:	46bd      	mov	sp, r7
 802c338:	bd80      	pop	{r7, pc}
 802c33a:	bf00      	nop
 802c33c:	0805c608 	.word	0x0805c608

0802c340 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 802c340:	b580      	push	{r7, lr}
 802c342:	b084      	sub	sp, #16
 802c344:	af00      	add	r7, sp, #0
 802c346:	6078      	str	r0, [r7, #4]
 802c348:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802c34a:	2300      	movs	r3, #0
 802c34c:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 802c34e:	683b      	ldr	r3, [r7, #0]
 802c350:	2b00      	cmp	r3, #0
 802c352:	d002      	beq.n	802c35a <bhy2_get_error_value+0x1a>
 802c354:	687b      	ldr	r3, [r7, #4]
 802c356:	2b00      	cmp	r3, #0
 802c358:	d102      	bne.n	802c360 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 802c35a:	23ff      	movs	r3, #255	; 0xff
 802c35c:	73fb      	strb	r3, [r7, #15]
 802c35e:	e007      	b.n	802c370 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 802c360:	683b      	ldr	r3, [r7, #0]
 802c362:	2201      	movs	r2, #1
 802c364:	6879      	ldr	r1, [r7, #4]
 802c366:	202e      	movs	r0, #46	; 0x2e
 802c368:	f7ff fc66 	bl	802bc38 <bhy2_get_regs>
 802c36c:	4603      	mov	r3, r0
 802c36e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802c370:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c374:	4618      	mov	r0, r3
 802c376:	3710      	adds	r7, #16
 802c378:	46bd      	mov	sp, r7
 802c37a:	bd80      	pop	{r7, pc}

0802c37c <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 802c37c:	b480      	push	{r7}
 802c37e:	b087      	sub	sp, #28
 802c380:	af00      	add	r7, sp, #0
 802c382:	4603      	mov	r3, r0
 802c384:	60b9      	str	r1, [r7, #8]
 802c386:	607a      	str	r2, [r7, #4]
 802c388:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 802c38a:	2300      	movs	r3, #0
 802c38c:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 802c38e:	687b      	ldr	r3, [r7, #4]
 802c390:	2b00      	cmp	r3, #0
 802c392:	d04e      	beq.n	802c432 <get_callback_info+0xb6>
 802c394:	68bb      	ldr	r3, [r7, #8]
 802c396:	2b00      	cmp	r3, #0
 802c398:	d04b      	beq.n	802c432 <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 802c39a:	7bfa      	ldrb	r2, [r7, #15]
 802c39c:	68b8      	ldr	r0, [r7, #8]
 802c39e:	6879      	ldr	r1, [r7, #4]
 802c3a0:	4613      	mov	r3, r2
 802c3a2:	00db      	lsls	r3, r3, #3
 802c3a4:	4413      	add	r3, r2
 802c3a6:	440b      	add	r3, r1
 802c3a8:	3318      	adds	r3, #24
 802c3aa:	4602      	mov	r2, r0
 802c3ac:	3304      	adds	r3, #4
 802c3ae:	6818      	ldr	r0, [r3, #0]
 802c3b0:	6859      	ldr	r1, [r3, #4]
 802c3b2:	6010      	str	r0, [r2, #0]
 802c3b4:	6051      	str	r1, [r2, #4]
 802c3b6:	7a1b      	ldrb	r3, [r3, #8]
 802c3b8:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 802c3ba:	7bfb      	ldrb	r3, [r7, #15]
 802c3bc:	2bf4      	cmp	r3, #244	; 0xf4
 802c3be:	d91b      	bls.n	802c3f8 <get_callback_info+0x7c>
 802c3c0:	68bb      	ldr	r3, [r7, #8]
 802c3c2:	781b      	ldrb	r3, [r3, #0]
 802c3c4:	2b00      	cmp	r3, #0
 802c3c6:	d117      	bne.n	802c3f8 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 802c3c8:	68bb      	ldr	r3, [r7, #8]
 802c3ca:	2200      	movs	r2, #0
 802c3cc:	705a      	strb	r2, [r3, #1]
 802c3ce:	2200      	movs	r2, #0
 802c3d0:	709a      	strb	r2, [r3, #2]
 802c3d2:	2200      	movs	r2, #0
 802c3d4:	70da      	strb	r2, [r3, #3]
 802c3d6:	2200      	movs	r2, #0
 802c3d8:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 802c3da:	68bb      	ldr	r3, [r7, #8]
 802c3dc:	2200      	movs	r2, #0
 802c3de:	715a      	strb	r2, [r3, #5]
 802c3e0:	2200      	movs	r2, #0
 802c3e2:	719a      	strb	r2, [r3, #6]
 802c3e4:	2200      	movs	r2, #0
 802c3e6:	71da      	strb	r2, [r3, #7]
 802c3e8:	2200      	movs	r2, #0
 802c3ea:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 802c3ec:	7bfb      	ldrb	r3, [r7, #15]
 802c3ee:	3bf5      	subs	r3, #245	; 0xf5
 802c3f0:	4a16      	ldr	r2, [pc, #88]	; (802c44c <get_callback_info+0xd0>)
 802c3f2:	5cd2      	ldrb	r2, [r2, r3]
 802c3f4:	68bb      	ldr	r3, [r7, #8]
 802c3f6:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 802c3f8:	7bfb      	ldrb	r3, [r7, #15]
 802c3fa:	2b00      	cmp	r3, #0
 802c3fc:	d11c      	bne.n	802c438 <get_callback_info+0xbc>
 802c3fe:	68bb      	ldr	r3, [r7, #8]
 802c400:	781b      	ldrb	r3, [r3, #0]
 802c402:	2b00      	cmp	r3, #0
 802c404:	d118      	bne.n	802c438 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 802c406:	68bb      	ldr	r3, [r7, #8]
 802c408:	2200      	movs	r2, #0
 802c40a:	705a      	strb	r2, [r3, #1]
 802c40c:	2200      	movs	r2, #0
 802c40e:	709a      	strb	r2, [r3, #2]
 802c410:	2200      	movs	r2, #0
 802c412:	70da      	strb	r2, [r3, #3]
 802c414:	2200      	movs	r2, #0
 802c416:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 802c418:	68bb      	ldr	r3, [r7, #8]
 802c41a:	2200      	movs	r2, #0
 802c41c:	715a      	strb	r2, [r3, #5]
 802c41e:	2200      	movs	r2, #0
 802c420:	719a      	strb	r2, [r3, #6]
 802c422:	2200      	movs	r2, #0
 802c424:	71da      	strb	r2, [r3, #7]
 802c426:	2200      	movs	r2, #0
 802c428:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 802c42a:	68bb      	ldr	r3, [r7, #8]
 802c42c:	2201      	movs	r2, #1
 802c42e:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 802c430:	e002      	b.n	802c438 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802c432:	23ff      	movs	r3, #255	; 0xff
 802c434:	75fb      	strb	r3, [r7, #23]
 802c436:	e000      	b.n	802c43a <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 802c438:	bf00      	nop
    }

    return rslt;
 802c43a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c43e:	4618      	mov	r0, r3
 802c440:	371c      	adds	r7, #28
 802c442:	46bd      	mov	sp, r7
 802c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c448:	4770      	bx	lr
 802c44a:	bf00      	nop
 802c44c:	0805c608 	.word	0x0805c608

0802c450 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 802c450:	b480      	push	{r7}
 802c452:	b085      	sub	sp, #20
 802c454:	af00      	add	r7, sp, #0
 802c456:	60f8      	str	r0, [r7, #12]
 802c458:	460b      	mov	r3, r1
 802c45a:	607a      	str	r2, [r7, #4]
 802c45c:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 802c45e:	68fb      	ldr	r3, [r7, #12]
 802c460:	681a      	ldr	r2, [r3, #0]
 802c462:	7afb      	ldrb	r3, [r7, #11]
 802c464:	441a      	add	r2, r3
 802c466:	68fb      	ldr	r3, [r7, #12]
 802c468:	685b      	ldr	r3, [r3, #4]
 802c46a:	429a      	cmp	r2, r3
 802c46c:	d803      	bhi.n	802c476 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 802c46e:	687b      	ldr	r3, [r7, #4]
 802c470:	2200      	movs	r2, #0
 802c472:	701a      	strb	r2, [r3, #0]
 802c474:	e002      	b.n	802c47c <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 802c476:	687b      	ldr	r3, [r7, #4]
 802c478:	2201      	movs	r2, #1
 802c47a:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 802c47c:	2300      	movs	r3, #0
}
 802c47e:	4618      	mov	r0, r3
 802c480:	3714      	adds	r7, #20
 802c482:	46bd      	mov	sp, r7
 802c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c488:	4770      	bx	lr

0802c48a <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 802c48a:	b480      	push	{r7}
 802c48c:	b087      	sub	sp, #28
 802c48e:	af00      	add	r7, sp, #0
 802c490:	4603      	mov	r3, r0
 802c492:	60b9      	str	r1, [r7, #8]
 802c494:	607a      	str	r2, [r7, #4]
 802c496:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802c498:	2300      	movs	r3, #0
 802c49a:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 802c49c:	7bfb      	ldrb	r3, [r7, #15]
 802c49e:	2b02      	cmp	r3, #2
 802c4a0:	d808      	bhi.n	802c4b4 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 802c4a2:	7bfb      	ldrb	r3, [r7, #15]
 802c4a4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 802c4a8:	00db      	lsls	r3, r3, #3
 802c4aa:	687a      	ldr	r2, [r7, #4]
 802c4ac:	441a      	add	r2, r3
 802c4ae:	68bb      	ldr	r3, [r7, #8]
 802c4b0:	601a      	str	r2, [r3, #0]
 802c4b2:	e001      	b.n	802c4b8 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 802c4b4:	23f9      	movs	r3, #249	; 0xf9
 802c4b6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802c4b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c4bc:	4618      	mov	r0, r3
 802c4be:	371c      	adds	r7, #28
 802c4c0:	46bd      	mov	sp, r7
 802c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c4c6:	4770      	bx	lr

0802c4c8 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 802c4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c4cc:	b099      	sub	sp, #100	; 0x64
 802c4ce:	af00      	add	r7, sp, #0
 802c4d0:	4603      	mov	r3, r0
 802c4d2:	62b9      	str	r1, [r7, #40]	; 0x28
 802c4d4:	627a      	str	r2, [r7, #36]	; 0x24
 802c4d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 802c4da:	2300      	movs	r3, #0
 802c4dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 802c4e0:	2300      	movs	r3, #0
 802c4e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 802c4e6:	2300      	movs	r3, #0
 802c4e8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 802c4ec:	2300      	movs	r3, #0
 802c4ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 802c4f2:	e16a      	b.n	802c7ca <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 802c4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c4f6:	681b      	ldr	r3, [r3, #0]
 802c4f8:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 802c4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c4fc:	691a      	ldr	r2, [r3, #16]
 802c4fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c500:	4413      	add	r3, r2
 802c502:	781b      	ldrb	r3, [r3, #0]
 802c504:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 802c508:	f107 0144 	add.w	r1, r7, #68	; 0x44
 802c50c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802c510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c512:	4618      	mov	r0, r3
 802c514:	f7ff ffb9 	bl	802c48a <get_time_stamp>
 802c518:	4603      	mov	r3, r0
 802c51a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 802c51e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802c522:	2b00      	cmp	r3, #0
 802c524:	d002      	beq.n	802c52c <parse_fifo+0x64>
        {
            return rslt;
 802c526:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802c52a:	e191      	b.n	802c850 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 802c52c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 802c530:	2b00      	cmp	r3, #0
 802c532:	d025      	beq.n	802c580 <parse_fifo+0xb8>
 802c534:	2b00      	cmp	r3, #0
 802c536:	f2c0 80f6 	blt.w	802c726 <parse_fifo+0x25e>
 802c53a:	2bff      	cmp	r3, #255	; 0xff
 802c53c:	f300 80f3 	bgt.w	802c726 <parse_fifo+0x25e>
 802c540:	2bf5      	cmp	r3, #245	; 0xf5
 802c542:	f2c0 80f0 	blt.w	802c726 <parse_fifo+0x25e>
 802c546:	3bf5      	subs	r3, #245	; 0xf5
 802c548:	2b0a      	cmp	r3, #10
 802c54a:	f200 80ec 	bhi.w	802c726 <parse_fifo+0x25e>
 802c54e:	a201      	add	r2, pc, #4	; (adr r2, 802c554 <parse_fifo+0x8c>)
 802c550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c554:	0802c58d 	.word	0x0802c58d
 802c558:	0802c5f5 	.word	0x0802c5f5
 802c55c:	0802c673 	.word	0x0802c673
 802c560:	0802c727 	.word	0x0802c727
 802c564:	0802c727 	.word	0x0802c727
 802c568:	0802c727 	.word	0x0802c727
 802c56c:	0802c58d 	.word	0x0802c58d
 802c570:	0802c5f5 	.word	0x0802c5f5
 802c574:	0802c673 	.word	0x0802c673
 802c578:	0802c727 	.word	0x0802c727
 802c57c:	0802c581 	.word	0x0802c581
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 802c580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c582:	681b      	ldr	r3, [r3, #0]
 802c584:	1c5a      	adds	r2, r3, #1
 802c586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c588:	601a      	str	r2, [r3, #0]
                break;
 802c58a:	e11e      	b.n	802c7ca <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 802c58c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802c590:	461a      	mov	r2, r3
 802c592:	2102      	movs	r1, #2
 802c594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c596:	f7ff ff5b 	bl	802c450 <get_buffer_status>
 802c59a:	4603      	mov	r3, r0
 802c59c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802c5a0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802c5a4:	2b00      	cmp	r3, #0
 802c5a6:	d002      	beq.n	802c5ae <parse_fifo+0xe6>
                {
                    return rslt;
 802c5a8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802c5ac:	e150      	b.n	802c850 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802c5ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c5b2:	2b00      	cmp	r3, #0
 802c5b4:	d000      	beq.n	802c5b8 <parse_fifo+0xf0>
                {
                    break;
 802c5b6:	e108      	b.n	802c7ca <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 802c5b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c5ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c5c0:	691a      	ldr	r2, [r3, #16]
 802c5c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c5c4:	3301      	adds	r3, #1
 802c5c6:	4413      	add	r3, r2
 802c5c8:	781b      	ldrb	r3, [r3, #0]
 802c5ca:	b2db      	uxtb	r3, r3
 802c5cc:	2200      	movs	r2, #0
 802c5ce:	469a      	mov	sl, r3
 802c5d0:	4693      	mov	fp, r2
 802c5d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c5d4:	eb10 020a 	adds.w	r2, r0, sl
 802c5d8:	61ba      	str	r2, [r7, #24]
 802c5da:	eb41 020b 	adc.w	r2, r1, fp
 802c5de:	61fa      	str	r2, [r7, #28]
 802c5e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802c5e4:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 802c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c5ea:	681b      	ldr	r3, [r3, #0]
 802c5ec:	1c9a      	adds	r2, r3, #2
 802c5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c5f0:	601a      	str	r2, [r3, #0]
                break;
 802c5f2:	e0ea      	b.n	802c7ca <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 802c5f4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802c5f8:	461a      	mov	r2, r3
 802c5fa:	2103      	movs	r1, #3
 802c5fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c5fe:	f7ff ff27 	bl	802c450 <get_buffer_status>
 802c602:	4603      	mov	r3, r0
 802c604:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802c608:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802c60c:	2b00      	cmp	r3, #0
 802c60e:	d002      	beq.n	802c616 <parse_fifo+0x14e>
                {
                    return rslt;
 802c610:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802c614:	e11c      	b.n	802c850 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802c616:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c61a:	2b00      	cmp	r3, #0
 802c61c:	d000      	beq.n	802c620 <parse_fifo+0x158>
                {
                    break;
 802c61e:	e0d4      	b.n	802c7ca <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 802c620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c622:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c628:	691a      	ldr	r2, [r3, #16]
 802c62a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c62c:	3301      	adds	r3, #1
 802c62e:	4413      	add	r3, r2
 802c630:	781b      	ldrb	r3, [r3, #0]
 802c632:	b21c      	sxth	r4, r3
 802c634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c636:	691a      	ldr	r2, [r3, #16]
 802c638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c63a:	3302      	adds	r3, #2
 802c63c:	4413      	add	r3, r2
 802c63e:	781b      	ldrb	r3, [r3, #0]
 802c640:	021b      	lsls	r3, r3, #8
 802c642:	b21b      	sxth	r3, r3
 802c644:	4323      	orrs	r3, r4
 802c646:	b21b      	sxth	r3, r3
 802c648:	b29b      	uxth	r3, r3
 802c64a:	b29b      	uxth	r3, r3
 802c64c:	2200      	movs	r2, #0
 802c64e:	461d      	mov	r5, r3
 802c650:	4616      	mov	r6, r2
 802c652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c654:	1942      	adds	r2, r0, r5
 802c656:	613a      	str	r2, [r7, #16]
 802c658:	eb41 0206 	adc.w	r2, r1, r6
 802c65c:	617a      	str	r2, [r7, #20]
 802c65e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 802c662:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 802c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c668:	681b      	ldr	r3, [r3, #0]
 802c66a:	1cda      	adds	r2, r3, #3
 802c66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c66e:	601a      	str	r2, [r3, #0]
                break;
 802c670:	e0ab      	b.n	802c7ca <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 802c672:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802c676:	461a      	mov	r2, r3
 802c678:	2106      	movs	r1, #6
 802c67a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c67c:	f7ff fee8 	bl	802c450 <get_buffer_status>
 802c680:	4603      	mov	r3, r0
 802c682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802c686:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802c68a:	2b00      	cmp	r3, #0
 802c68c:	d002      	beq.n	802c694 <parse_fifo+0x1cc>
                {
                    return rslt;
 802c68e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802c692:	e0dd      	b.n	802c850 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802c694:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c698:	2b00      	cmp	r3, #0
 802c69a:	d000      	beq.n	802c69e <parse_fifo+0x1d6>
                {
                    break;
 802c69c:	e095      	b.n	802c7ca <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 802c69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6a0:	691a      	ldr	r2, [r3, #16]
 802c6a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c6a4:	3301      	adds	r3, #1
 802c6a6:	4413      	add	r3, r2
 802c6a8:	781b      	ldrb	r3, [r3, #0]
 802c6aa:	4619      	mov	r1, r3
 802c6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6ae:	691a      	ldr	r2, [r3, #16]
 802c6b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c6b2:	3302      	adds	r3, #2
 802c6b4:	4413      	add	r3, r2
 802c6b6:	781b      	ldrb	r3, [r3, #0]
 802c6b8:	021b      	lsls	r3, r3, #8
 802c6ba:	4319      	orrs	r1, r3
 802c6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6be:	691a      	ldr	r2, [r3, #16]
 802c6c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c6c2:	3303      	adds	r3, #3
 802c6c4:	4413      	add	r3, r2
 802c6c6:	781b      	ldrb	r3, [r3, #0]
 802c6c8:	041b      	lsls	r3, r3, #16
 802c6ca:	4319      	orrs	r1, r3
 802c6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6ce:	691a      	ldr	r2, [r3, #16]
 802c6d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c6d2:	3304      	adds	r3, #4
 802c6d4:	4413      	add	r3, r2
 802c6d6:	781b      	ldrb	r3, [r3, #0]
 802c6d8:	061b      	lsls	r3, r3, #24
 802c6da:	430b      	orrs	r3, r1
 802c6dc:	2200      	movs	r2, #0
 802c6de:	4698      	mov	r8, r3
 802c6e0:	4691      	mov	r9, r2
 802c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c6e4:	691a      	ldr	r2, [r3, #16]
 802c6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c6e8:	3305      	adds	r3, #5
 802c6ea:	4413      	add	r3, r2
 802c6ec:	781b      	ldrb	r3, [r3, #0]
 802c6ee:	b2db      	uxtb	r3, r3
 802c6f0:	2200      	movs	r2, #0
 802c6f2:	60bb      	str	r3, [r7, #8]
 802c6f4:	60fa      	str	r2, [r7, #12]
 802c6f6:	f04f 0200 	mov.w	r2, #0
 802c6fa:	f04f 0300 	mov.w	r3, #0
 802c6fe:	68b9      	ldr	r1, [r7, #8]
 802c700:	000b      	movs	r3, r1
 802c702:	2200      	movs	r2, #0
 802c704:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802c706:	ea48 0002 	orr.w	r0, r8, r2
 802c70a:	6038      	str	r0, [r7, #0]
 802c70c:	ea49 0303 	orr.w	r3, r9, r3
 802c710:	607b      	str	r3, [r7, #4]
 802c712:	e9d7 3400 	ldrd	r3, r4, [r7]
 802c716:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 802c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c71c:	681b      	ldr	r3, [r3, #0]
 802c71e:	1d9a      	adds	r2, r3, #6
 802c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c722:	601a      	str	r2, [r3, #0]
                break;
 802c724:	e051      	b.n	802c7ca <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 802c726:	f107 0138 	add.w	r1, r7, #56	; 0x38
 802c72a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 802c72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c730:	4618      	mov	r0, r3
 802c732:	f7ff fe23 	bl	802c37c <get_callback_info>
 802c736:	4603      	mov	r3, r0
 802c738:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 802c73c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802c740:	2b00      	cmp	r3, #0
 802c742:	d002      	beq.n	802c74a <parse_fifo+0x282>
                {
                    return rslt;
 802c744:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802c748:	e082      	b.n	802c850 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 802c74a:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 802c74e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802c752:	461a      	mov	r2, r3
 802c754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c756:	f7ff fe7b 	bl	802c450 <get_buffer_status>
 802c75a:	4603      	mov	r3, r0
 802c75c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802c760:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802c764:	2b00      	cmp	r3, #0
 802c766:	d002      	beq.n	802c76e <parse_fifo+0x2a6>
                {
                    return rslt;
 802c768:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802c76c:	e070      	b.n	802c850 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802c76e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c772:	2b00      	cmp	r3, #0
 802c774:	d000      	beq.n	802c778 <parse_fifo+0x2b0>
                {
                    break;
 802c776:	e028      	b.n	802c7ca <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 802c778:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 802c77c:	2b00      	cmp	r3, #0
 802c77e:	d01c      	beq.n	802c7ba <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 802c780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c782:	691a      	ldr	r2, [r3, #16]
 802c784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c786:	3301      	adds	r3, #1
 802c788:	4413      	add	r3, r2
 802c78a:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 802c78c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802c790:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 802c794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c796:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 802c798:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 802c79c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 802c7a0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802c7a4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 802c7a8:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 802c7ac:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 802c7b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802c7b4:	4611      	mov	r1, r2
 802c7b6:	4618      	mov	r0, r3
 802c7b8:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 802c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7bc:	681a      	ldr	r2, [r3, #0]
 802c7be:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802c7c2:	441a      	add	r2, r3
 802c7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7c6:	601a      	str	r2, [r3, #0]
                break;
 802c7c8:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 802c7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7cc:	681a      	ldr	r2, [r3, #0]
 802c7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7d0:	685b      	ldr	r3, [r3, #4]
 802c7d2:	429a      	cmp	r2, r3
 802c7d4:	d204      	bcs.n	802c7e0 <parse_fifo+0x318>
 802c7d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802c7da:	2b00      	cmp	r3, #0
 802c7dc:	f43f ae8a 	beq.w	802c4f4 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 802c7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7e2:	685b      	ldr	r3, [r3, #4]
 802c7e4:	2b00      	cmp	r3, #0
 802c7e6:	d031      	beq.n	802c84c <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 802c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7ea:	685a      	ldr	r2, [r3, #4]
 802c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7ee:	681b      	ldr	r3, [r3, #0]
 802c7f0:	429a      	cmp	r2, r3
 802c7f2:	d202      	bcs.n	802c7fa <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 802c7f4:	f06f 0301 	mvn.w	r3, #1
 802c7f8:	e02a      	b.n	802c850 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 802c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7fc:	685a      	ldr	r2, [r3, #4]
 802c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c800:	681b      	ldr	r3, [r3, #0]
 802c802:	1ad2      	subs	r2, r2, r3
 802c804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c806:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 802c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c80a:	685b      	ldr	r3, [r3, #4]
 802c80c:	2b00      	cmp	r3, #0
 802c80e:	d01d      	beq.n	802c84c <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 802c810:	2300      	movs	r3, #0
 802c812:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 802c816:	e013      	b.n	802c840 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 802c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c81a:	691a      	ldr	r2, [r3, #16]
 802c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c81e:	6819      	ldr	r1, [r3, #0]
 802c820:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 802c824:	440b      	add	r3, r1
 802c826:	441a      	add	r2, r3
 802c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c82a:	6919      	ldr	r1, [r3, #16]
 802c82c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 802c830:	440b      	add	r3, r1
 802c832:	7812      	ldrb	r2, [r2, #0]
 802c834:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 802c836:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 802c83a:	3301      	adds	r3, #1
 802c83c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 802c840:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 802c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c846:	685b      	ldr	r3, [r3, #4]
 802c848:	429a      	cmp	r2, r3
 802c84a:	d3e5      	bcc.n	802c818 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 802c84c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 802c850:	4618      	mov	r0, r3
 802c852:	3764      	adds	r7, #100	; 0x64
 802c854:	46bd      	mov	sp, r7
 802c856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c85a:	bf00      	nop

0802c85c <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 802c85c:	b590      	push	{r4, r7, lr}
 802c85e:	b0cf      	sub	sp, #316	; 0x13c
 802c860:	af00      	add	r7, sp, #0
 802c862:	4604      	mov	r4, r0
 802c864:	f507 709c 	add.w	r0, r7, #312	; 0x138
 802c868:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 802c86c:	6001      	str	r1, [r0, #0]
 802c86e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 802c872:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 802c876:	600a      	str	r2, [r1, #0]
 802c878:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802c87c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 802c880:	6013      	str	r3, [r2, #0]
 802c882:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c886:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802c88a:	4622      	mov	r2, r4
 802c88c:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 802c88e:	2300      	movs	r3, #0
 802c890:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 802c894:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802c898:	2b00      	cmp	r3, #0
 802c89a:	f000 81af 	beq.w	802cbfc <bhy2_hif_exec_cmd_generic+0x3a0>
 802c89e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c8a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802c8a6:	681b      	ldr	r3, [r3, #0]
 802c8a8:	2b00      	cmp	r3, #0
 802c8aa:	d007      	beq.n	802c8bc <bhy2_hif_exec_cmd_generic+0x60>
 802c8ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c8b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802c8b4:	681b      	ldr	r3, [r3, #0]
 802c8b6:	2b00      	cmp	r3, #0
 802c8b8:	f000 81a0 	beq.w	802cbfc <bhy2_hif_exec_cmd_generic+0x3a0>
 802c8bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 802c8c0:	2b00      	cmp	r3, #0
 802c8c2:	d007      	beq.n	802c8d4 <bhy2_hif_exec_cmd_generic+0x78>
 802c8c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c8c8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 802c8cc:	681b      	ldr	r3, [r3, #0]
 802c8ce:	2b00      	cmp	r3, #0
 802c8d0:	f000 8194 	beq.w	802cbfc <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 802c8d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802c8d8:	699b      	ldr	r3, [r3, #24]
 802c8da:	2b00      	cmp	r3, #0
 802c8dc:	f000 8188 	beq.w	802cbf0 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 802c8e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c8e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802c8e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 802c8ec:	681b      	ldr	r3, [r3, #0]
 802c8ee:	4413      	add	r3, r2
 802c8f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 802c8f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 802c8f8:	2b00      	cmp	r3, #0
 802c8fa:	d007      	beq.n	802c90c <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 802c8fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 802c900:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 802c904:	4413      	add	r3, r2
 802c906:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 802c90a:	e003      	b.n	802c914 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 802c90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c910:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 802c914:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802c918:	f003 0303 	and.w	r3, r3, #3
 802c91c:	2b00      	cmp	r3, #0
 802c91e:	d006      	beq.n	802c92e <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 802c920:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802c924:	089b      	lsrs	r3, r3, #2
 802c926:	3301      	adds	r3, #1
 802c928:	009b      	lsls	r3, r3, #2
 802c92a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 802c92e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c932:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802c936:	881b      	ldrh	r3, [r3, #0]
 802c938:	b2da      	uxtb	r2, r3
 802c93a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c93e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802c942:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 802c944:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c948:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802c94c:	881b      	ldrh	r3, [r3, #0]
 802c94e:	0a1b      	lsrs	r3, r3, #8
 802c950:	b29b      	uxth	r3, r3
 802c952:	b2da      	uxtb	r2, r3
 802c954:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c958:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802c95c:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 802c95e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c962:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802c966:	881b      	ldrh	r3, [r3, #0]
 802c968:	2b02      	cmp	r3, #2
 802c96a:	d113      	bne.n	802c994 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 802c96c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802c970:	089b      	lsrs	r3, r3, #2
 802c972:	b2da      	uxtb	r2, r3
 802c974:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c978:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802c97c:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 802c97e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802c982:	089b      	lsrs	r3, r3, #2
 802c984:	0a1b      	lsrs	r3, r3, #8
 802c986:	b2da      	uxtb	r2, r3
 802c988:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c98c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802c990:	70da      	strb	r2, [r3, #3]
 802c992:	e010      	b.n	802c9b6 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 802c994:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802c998:	b2da      	uxtb	r2, r3
 802c99a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c99e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802c9a2:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 802c9a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802c9a8:	0a1b      	lsrs	r3, r3, #8
 802c9aa:	b2da      	uxtb	r2, r3
 802c9ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802c9b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802c9b4:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 802c9b6:	2304      	movs	r3, #4
 802c9b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 802c9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802c9c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 802c9c4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802c9c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802c9cc:	4413      	add	r3, r2
 802c9ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 802c9d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 802c9d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 802c9da:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802c9de:	699b      	ldr	r3, [r3, #24]
 802c9e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802c9e4:	429a      	cmp	r2, r3
 802c9e6:	f240 80f9 	bls.w	802cbdc <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 802c9ea:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802c9ee:	699b      	ldr	r3, [r3, #24]
 802c9f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 802c9f4:	e0f2      	b.n	802cbdc <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 802c9f6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802c9fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802c9fe:	4413      	add	r3, r2
 802ca00:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802ca04:	429a      	cmp	r2, r3
 802ca06:	d20b      	bcs.n	802ca20 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 802ca08:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 802ca0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 802ca10:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802ca14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802ca18:	1ad3      	subs	r3, r2, r3
 802ca1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 802ca1e:	e020      	b.n	802ca62 <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 802ca20:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802ca24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802ca28:	4413      	add	r3, r2
 802ca2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 802ca2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802ca32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 802ca36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802ca3a:	f003 0303 	and.w	r3, r3, #3
 802ca3e:	2b00      	cmp	r3, #0
 802ca40:	d006      	beq.n	802ca50 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 802ca42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802ca46:	089b      	lsrs	r3, r3, #2
 802ca48:	3301      	adds	r3, #1
 802ca4a:	009b      	lsls	r3, r3, #2
 802ca4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 802ca50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802ca54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802ca58:	d903      	bls.n	802ca62 <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 802ca5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802ca5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 802ca62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802ca66:	2b00      	cmp	r3, #0
 802ca68:	d07e      	beq.n	802cb68 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 802ca6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802ca6e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802ca72:	681a      	ldr	r2, [r3, #0]
 802ca74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802ca78:	4413      	add	r3, r2
 802ca7a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802ca7e:	429a      	cmp	r2, r3
 802ca80:	d315      	bcc.n	802caae <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 802ca82:	f107 0214 	add.w	r2, r7, #20
 802ca86:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802ca8a:	18d0      	adds	r0, r2, r3
 802ca8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 802ca90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802ca94:	1ad3      	subs	r3, r2, r3
 802ca96:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802ca9a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 802ca9e:	6812      	ldr	r2, [r2, #0]
 802caa0:	4413      	add	r3, r2
 802caa2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 802caa6:	4619      	mov	r1, r3
 802caa8:	f013 fbf8 	bl	804029c <memcpy>
 802caac:	e05c      	b.n	802cb68 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 802caae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802cab2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802cab6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802caba:	681b      	ldr	r3, [r3, #0]
 802cabc:	429a      	cmp	r2, r3
 802cabe:	d93b      	bls.n	802cb38 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 802cac0:	f107 0214 	add.w	r2, r7, #20
 802cac4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802cac8:	18d0      	adds	r0, r2, r3
 802caca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 802cace:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802cad2:	1ad3      	subs	r3, r2, r3
 802cad4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802cad8:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 802cadc:	6812      	ldr	r2, [r2, #0]
 802cade:	18d1      	adds	r1, r2, r3
 802cae0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802cae4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802cae8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802caec:	681b      	ldr	r3, [r3, #0]
 802caee:	1ad3      	subs	r3, r2, r3
 802caf0:	461a      	mov	r2, r3
 802caf2:	f013 fbd3 	bl	804029c <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 802caf6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802cafa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802cafe:	441a      	add	r2, r3
 802cb00:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802cb04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802cb08:	681b      	ldr	r3, [r3, #0]
 802cb0a:	1ad3      	subs	r3, r2, r3
 802cb0c:	f107 0214 	add.w	r2, r7, #20
 802cb10:	18d0      	adds	r0, r2, r3
 802cb12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802cb16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802cb1a:	681a      	ldr	r2, [r3, #0]
 802cb1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802cb20:	1ad2      	subs	r2, r2, r3
 802cb22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802cb26:	441a      	add	r2, r3
 802cb28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802cb2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802cb30:	6819      	ldr	r1, [r3, #0]
 802cb32:	f013 fbb3 	bl	804029c <memcpy>
 802cb36:	e017      	b.n	802cb68 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 802cb38:	f107 0214 	add.w	r2, r7, #20
 802cb3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802cb40:	18d0      	adds	r0, r2, r3
 802cb42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802cb46:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802cb4a:	681a      	ldr	r2, [r3, #0]
 802cb4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802cb50:	1ad3      	subs	r3, r2, r3
 802cb52:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802cb56:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 802cb5a:	6812      	ldr	r2, [r2, #0]
 802cb5c:	4413      	add	r3, r2
 802cb5e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 802cb62:	4619      	mov	r1, r3
 802cb64:	f013 fb9a 	bl	804029c <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 802cb68:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802cb6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802cb70:	4413      	add	r3, r2
 802cb72:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 802cb76:	429a      	cmp	r2, r3
 802cb78:	d012      	beq.n	802cba0 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 802cb7a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802cb7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802cb82:	4413      	add	r3, r2
 802cb84:	f107 0214 	add.w	r2, r7, #20
 802cb88:	18d0      	adds	r0, r2, r3
 802cb8a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802cb8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802cb92:	4413      	add	r3, r2
 802cb94:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802cb98:	461a      	mov	r2, r3
 802cb9a:	2100      	movs	r1, #0
 802cb9c:	f013 fba6 	bl	80402ec <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 802cba0:	f107 0114 	add.w	r1, r7, #20
 802cba4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802cba8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 802cbac:	2000      	movs	r0, #0
 802cbae:	f000 f9b4 	bl	802cf1a <bhy2_hif_set_regs>
 802cbb2:	4603      	mov	r3, r0
 802cbb4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 802cbb8:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 802cbbc:	2b00      	cmp	r3, #0
 802cbbe:	d11b      	bne.n	802cbf8 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 802cbc0:	2300      	movs	r3, #0
 802cbc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 802cbc6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802cbca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802cbce:	1ad3      	subs	r3, r2, r3
 802cbd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 802cbd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802cbd8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 802cbdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802cbe0:	2b00      	cmp	r3, #0
 802cbe2:	d00f      	beq.n	802cc04 <bhy2_hif_exec_cmd_generic+0x3a8>
 802cbe4:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 802cbe8:	2b00      	cmp	r3, #0
 802cbea:	f43f af04 	beq.w	802c9f6 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 802cbee:	e009      	b.n	802cc04 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 802cbf0:	23fe      	movs	r3, #254	; 0xfe
 802cbf2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 802cbf6:	e005      	b.n	802cc04 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 802cbf8:	bf00      	nop
        if (hif->read_write_len != 0)
 802cbfa:	e003      	b.n	802cc04 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802cbfc:	23ff      	movs	r3, #255	; 0xff
 802cbfe:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 802cc02:	e000      	b.n	802cc06 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 802cc04:	bf00      	nop
    }

    return rslt;
 802cc06:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 802cc0a:	4618      	mov	r0, r3
 802cc0c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 802cc10:	46bd      	mov	sp, r7
 802cc12:	bd90      	pop	{r4, r7, pc}

0802cc14 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 802cc14:	b580      	push	{r7, lr}
 802cc16:	b084      	sub	sp, #16
 802cc18:	af00      	add	r7, sp, #0
 802cc1a:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 802cc1c:	2300      	movs	r3, #0
 802cc1e:	81fb      	strh	r3, [r7, #14]
 802cc20:	e027      	b.n	802cc72 <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 802cc22:	f107 030c 	add.w	r3, r7, #12
 802cc26:	6879      	ldr	r1, [r7, #4]
 802cc28:	4618      	mov	r0, r3
 802cc2a:	f000 fab1 	bl	802d190 <bhy2_hif_get_interrupt_status>
 802cc2e:	4603      	mov	r3, r0
 802cc30:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 802cc32:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802cc36:	2b00      	cmp	r3, #0
 802cc38:	d115      	bne.n	802cc66 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 802cc3a:	7b3b      	ldrb	r3, [r7, #12]
 802cc3c:	f003 0320 	and.w	r3, r3, #32
 802cc40:	2b00      	cmp	r3, #0
 802cc42:	d002      	beq.n	802cc4a <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 802cc44:	2300      	movs	r3, #0
 802cc46:	737b      	strb	r3, [r7, #13]
                break;
 802cc48:	e017      	b.n	802cc7a <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 802cc4a:	6879      	ldr	r1, [r7, #4]
 802cc4c:	f242 7010 	movw	r0, #10000	; 0x2710
 802cc50:	f000 f99b 	bl	802cf8a <bhy2_hif_delay_us>
 802cc54:	4603      	mov	r3, r0
 802cc56:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 802cc58:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802cc5c:	2b00      	cmp	r3, #0
 802cc5e:	d005      	beq.n	802cc6c <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 802cc60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802cc64:	e00b      	b.n	802cc7e <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 802cc66:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802cc6a:	e008      	b.n	802cc7e <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 802cc6c:	89fb      	ldrh	r3, [r7, #14]
 802cc6e:	3301      	adds	r3, #1
 802cc70:	81fb      	strh	r3, [r7, #14]
 802cc72:	89fb      	ldrh	r3, [r7, #14]
 802cc74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802cc78:	d3d3      	bcc.n	802cc22 <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 802cc7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 802cc7e:	4618      	mov	r0, r3
 802cc80:	3710      	adds	r7, #16
 802cc82:	46bd      	mov	sp, r7
 802cc84:	bd80      	pop	{r7, pc}

0802cc86 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 802cc86:	b580      	push	{r7, lr}
 802cc88:	b084      	sub	sp, #16
 802cc8a:	af00      	add	r7, sp, #0
 802cc8c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 802cc8e:	2300      	movs	r3, #0
 802cc90:	81fb      	strh	r3, [r7, #14]
 802cc92:	e02f      	b.n	802ccf4 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 802cc94:	6879      	ldr	r1, [r7, #4]
 802cc96:	f24c 3050 	movw	r0, #50000	; 0xc350
 802cc9a:	f000 f976 	bl	802cf8a <bhy2_hif_delay_us>
 802cc9e:	4603      	mov	r3, r0
 802cca0:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802cca2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802cca6:	2b00      	cmp	r3, #0
 802cca8:	da02      	bge.n	802ccb0 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 802ccaa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802ccae:	e02d      	b.n	802cd0c <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 802ccb0:	f107 010c 	add.w	r1, r7, #12
 802ccb4:	687b      	ldr	r3, [r7, #4]
 802ccb6:	2201      	movs	r2, #1
 802ccb8:	2025      	movs	r0, #37	; 0x25
 802ccba:	f000 f8f6 	bl	802ceaa <bhy2_hif_get_regs>
 802ccbe:	4603      	mov	r3, r0
 802ccc0:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802ccc2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802ccc6:	2b00      	cmp	r3, #0
 802ccc8:	da02      	bge.n	802ccd0 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 802ccca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802ccce:	e01d      	b.n	802cd0c <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 802ccd0:	7b3b      	ldrb	r3, [r7, #12]
 802ccd2:	f003 0310 	and.w	r3, r3, #16
 802ccd6:	2b00      	cmp	r3, #0
 802ccd8:	d009      	beq.n	802ccee <bhy2_hif_check_boot_status_ram+0x68>
 802ccda:	7b3b      	ldrb	r3, [r7, #12]
 802ccdc:	f003 0320 	and.w	r3, r3, #32
 802cce0:	2b00      	cmp	r3, #0
 802cce2:	d004      	beq.n	802ccee <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 802cce4:	7b3b      	ldrb	r3, [r7, #12]
 802cce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 802ccea:	2b00      	cmp	r3, #0
 802ccec:	d006      	beq.n	802ccfc <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 802ccee:	89fb      	ldrh	r3, [r7, #14]
 802ccf0:	3301      	adds	r3, #1
 802ccf2:	81fb      	strh	r3, [r7, #14]
 802ccf4:	89fb      	ldrh	r3, [r7, #14]
 802ccf6:	2b63      	cmp	r3, #99	; 0x63
 802ccf8:	d9cc      	bls.n	802cc94 <bhy2_hif_check_boot_status_ram+0xe>
 802ccfa:	e000      	b.n	802ccfe <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 802ccfc:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 802ccfe:	89fb      	ldrh	r3, [r7, #14]
 802cd00:	2b64      	cmp	r3, #100	; 0x64
 802cd02:	d102      	bne.n	802cd0a <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 802cd04:	f06f 0304 	mvn.w	r3, #4
 802cd08:	e000      	b.n	802cd0c <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 802cd0a:	2300      	movs	r3, #0
}
 802cd0c:	4618      	mov	r0, r3
 802cd0e:	3710      	adds	r7, #16
 802cd10:	46bd      	mov	sp, r7
 802cd12:	bd80      	pop	{r7, pc}

0802cd14 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802cd14:	b580      	push	{r7, lr}
 802cd16:	b08a      	sub	sp, #40	; 0x28
 802cd18:	af00      	add	r7, sp, #0
 802cd1a:	60b9      	str	r1, [r7, #8]
 802cd1c:	607a      	str	r2, [r7, #4]
 802cd1e:	603b      	str	r3, [r7, #0]
 802cd20:	4603      	mov	r3, r0
 802cd22:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802cd24:	2300      	movs	r3, #0
 802cd26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 802cd2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802cd2c:	2b00      	cmp	r3, #0
 802cd2e:	d072      	beq.n	802ce16 <bhy2_hif_get_fifo+0x102>
 802cd30:	68bb      	ldr	r3, [r7, #8]
 802cd32:	2b00      	cmp	r3, #0
 802cd34:	d06f      	beq.n	802ce16 <bhy2_hif_get_fifo+0x102>
 802cd36:	683b      	ldr	r3, [r7, #0]
 802cd38:	2b00      	cmp	r3, #0
 802cd3a:	d06c      	beq.n	802ce16 <bhy2_hif_get_fifo+0x102>
 802cd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802cd3e:	2b00      	cmp	r3, #0
 802cd40:	d069      	beq.n	802ce16 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 802cd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802cd44:	699b      	ldr	r3, [r3, #24]
 802cd46:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 802cd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802cd4a:	681b      	ldr	r3, [r3, #0]
 802cd4c:	2b00      	cmp	r3, #0
 802cd4e:	d114      	bne.n	802cd7a <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 802cd50:	f107 0114 	add.w	r1, r7, #20
 802cd54:	7bf8      	ldrb	r0, [r7, #15]
 802cd56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802cd58:	2202      	movs	r2, #2
 802cd5a:	f000 f8a6 	bl	802ceaa <bhy2_hif_get_regs>
 802cd5e:	4603      	mov	r3, r0
 802cd60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 802cd64:	7d3b      	ldrb	r3, [r7, #20]
 802cd66:	b21a      	sxth	r2, r3
 802cd68:	7d7b      	ldrb	r3, [r7, #21]
 802cd6a:	021b      	lsls	r3, r3, #8
 802cd6c:	b21b      	sxth	r3, r3
 802cd6e:	4313      	orrs	r3, r2
 802cd70:	b21b      	sxth	r3, r3
 802cd72:	b29b      	uxth	r3, r3
 802cd74:	461a      	mov	r2, r3
 802cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802cd78:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 802cd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802cd7c:	681b      	ldr	r3, [r3, #0]
 802cd7e:	2b00      	cmp	r3, #0
 802cd80:	d04d      	beq.n	802ce1e <bhy2_hif_get_fifo+0x10a>
 802cd82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802cd86:	2b00      	cmp	r3, #0
 802cd88:	d149      	bne.n	802ce1e <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 802cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802cd8c:	681b      	ldr	r3, [r3, #0]
 802cd8e:	687a      	ldr	r2, [r7, #4]
 802cd90:	429a      	cmp	r2, r3
 802cd92:	d203      	bcs.n	802cd9c <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 802cd94:	683b      	ldr	r3, [r7, #0]
 802cd96:	687a      	ldr	r2, [r7, #4]
 802cd98:	601a      	str	r2, [r3, #0]
 802cd9a:	e003      	b.n	802cda4 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 802cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802cd9e:	681a      	ldr	r2, [r3, #0]
 802cda0:	683b      	ldr	r3, [r7, #0]
 802cda2:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 802cda4:	683b      	ldr	r3, [r7, #0]
 802cda6:	681b      	ldr	r3, [r3, #0]
 802cda8:	623b      	str	r3, [r7, #32]
            offset = 0;
 802cdaa:	2300      	movs	r3, #0
 802cdac:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 802cdae:	e016      	b.n	802cdde <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 802cdb0:	68ba      	ldr	r2, [r7, #8]
 802cdb2:	69fb      	ldr	r3, [r7, #28]
 802cdb4:	18d1      	adds	r1, r2, r3
 802cdb6:	7bf8      	ldrb	r0, [r7, #15]
 802cdb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802cdba:	69ba      	ldr	r2, [r7, #24]
 802cdbc:	f000 f875 	bl	802ceaa <bhy2_hif_get_regs>
 802cdc0:	4603      	mov	r3, r0
 802cdc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 802cdc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802cdca:	2b00      	cmp	r3, #0
 802cdcc:	d10c      	bne.n	802cde8 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 802cdce:	6a3a      	ldr	r2, [r7, #32]
 802cdd0:	69bb      	ldr	r3, [r7, #24]
 802cdd2:	1ad3      	subs	r3, r2, r3
 802cdd4:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 802cdd6:	69fa      	ldr	r2, [r7, #28]
 802cdd8:	69bb      	ldr	r3, [r7, #24]
 802cdda:	4413      	add	r3, r2
 802cddc:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 802cdde:	6a3a      	ldr	r2, [r7, #32]
 802cde0:	69bb      	ldr	r3, [r7, #24]
 802cde2:	429a      	cmp	r2, r3
 802cde4:	d8e4      	bhi.n	802cdb0 <bhy2_hif_get_fifo+0x9c>
 802cde6:	e000      	b.n	802cdea <bhy2_hif_get_fifo+0xd6>
                    break;
 802cde8:	bf00      	nop
            }

            if (read_len != 0)
 802cdea:	6a3b      	ldr	r3, [r7, #32]
 802cdec:	2b00      	cmp	r3, #0
 802cdee:	d00a      	beq.n	802ce06 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 802cdf0:	68ba      	ldr	r2, [r7, #8]
 802cdf2:	69fb      	ldr	r3, [r7, #28]
 802cdf4:	18d1      	adds	r1, r2, r3
 802cdf6:	7bf8      	ldrb	r0, [r7, #15]
 802cdf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802cdfa:	6a3a      	ldr	r2, [r7, #32]
 802cdfc:	f000 f855 	bl	802ceaa <bhy2_hif_get_regs>
 802ce00:	4603      	mov	r3, r0
 802ce02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 802ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ce08:	681a      	ldr	r2, [r3, #0]
 802ce0a:	683b      	ldr	r3, [r7, #0]
 802ce0c:	681b      	ldr	r3, [r3, #0]
 802ce0e:	1ad2      	subs	r2, r2, r3
 802ce10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ce12:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 802ce14:	e003      	b.n	802ce1e <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802ce16:	23ff      	movs	r3, #255	; 0xff
 802ce18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802ce1c:	e000      	b.n	802ce20 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 802ce1e:	bf00      	nop
    }

    return rslt;
 802ce20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 802ce24:	4618      	mov	r0, r3
 802ce26:	3728      	adds	r7, #40	; 0x28
 802ce28:	46bd      	mov	sp, r7
 802ce2a:	bd80      	pop	{r7, pc}

0802ce2c <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 802ce2c:	b480      	push	{r7}
 802ce2e:	b087      	sub	sp, #28
 802ce30:	af00      	add	r7, sp, #0
 802ce32:	60b9      	str	r1, [r7, #8]
 802ce34:	607a      	str	r2, [r7, #4]
 802ce36:	603b      	str	r3, [r7, #0]
 802ce38:	4603      	mov	r3, r0
 802ce3a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802ce3c:	2300      	movs	r3, #0
 802ce3e:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 802ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ce42:	2b00      	cmp	r3, #0
 802ce44:	d027      	beq.n	802ce96 <bhy2_hif_init+0x6a>
 802ce46:	68bb      	ldr	r3, [r7, #8]
 802ce48:	2b00      	cmp	r3, #0
 802ce4a:	d024      	beq.n	802ce96 <bhy2_hif_init+0x6a>
 802ce4c:	687b      	ldr	r3, [r7, #4]
 802ce4e:	2b00      	cmp	r3, #0
 802ce50:	d021      	beq.n	802ce96 <bhy2_hif_init+0x6a>
 802ce52:	683b      	ldr	r3, [r7, #0]
 802ce54:	2b00      	cmp	r3, #0
 802ce56:	d01e      	beq.n	802ce96 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 802ce58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ce5a:	68ba      	ldr	r2, [r7, #8]
 802ce5c:	601a      	str	r2, [r3, #0]
        hif->write = write;
 802ce5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ce60:	687a      	ldr	r2, [r7, #4]
 802ce62:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 802ce64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ce66:	683a      	ldr	r2, [r7, #0]
 802ce68:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 802ce6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ce6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ce6e:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 802ce70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ce72:	7bfa      	ldrb	r2, [r7, #15]
 802ce74:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 802ce76:	6a3b      	ldr	r3, [r7, #32]
 802ce78:	f003 0303 	and.w	r3, r3, #3
 802ce7c:	2b00      	cmp	r3, #0
 802ce7e:	d006      	beq.n	802ce8e <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 802ce80:	6a3b      	ldr	r3, [r7, #32]
 802ce82:	089b      	lsrs	r3, r3, #2
 802ce84:	3301      	adds	r3, #1
 802ce86:	009a      	lsls	r2, r3, #2
 802ce88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ce8a:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 802ce8c:	e005      	b.n	802ce9a <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 802ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ce90:	6a3a      	ldr	r2, [r7, #32]
 802ce92:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 802ce94:	e001      	b.n	802ce9a <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802ce96:	23ff      	movs	r3, #255	; 0xff
 802ce98:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802ce9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802ce9e:	4618      	mov	r0, r3
 802cea0:	371c      	adds	r7, #28
 802cea2:	46bd      	mov	sp, r7
 802cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cea8:	4770      	bx	lr

0802ceaa <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 802ceaa:	b590      	push	{r4, r7, lr}
 802ceac:	b087      	sub	sp, #28
 802ceae:	af00      	add	r7, sp, #0
 802ceb0:	60b9      	str	r1, [r7, #8]
 802ceb2:	607a      	str	r2, [r7, #4]
 802ceb4:	603b      	str	r3, [r7, #0]
 802ceb6:	4603      	mov	r3, r0
 802ceb8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802ceba:	2300      	movs	r3, #0
 802cebc:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 802cebe:	683b      	ldr	r3, [r7, #0]
 802cec0:	2b00      	cmp	r3, #0
 802cec2:	d022      	beq.n	802cf0a <bhy2_hif_get_regs+0x60>
 802cec4:	683b      	ldr	r3, [r7, #0]
 802cec6:	681b      	ldr	r3, [r3, #0]
 802cec8:	2b00      	cmp	r3, #0
 802ceca:	d01e      	beq.n	802cf0a <bhy2_hif_get_regs+0x60>
 802cecc:	68bb      	ldr	r3, [r7, #8]
 802cece:	2b00      	cmp	r3, #0
 802ced0:	d01b      	beq.n	802cf0a <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 802ced2:	683b      	ldr	r3, [r7, #0]
 802ced4:	7b1b      	ldrb	r3, [r3, #12]
 802ced6:	2b01      	cmp	r3, #1
 802ced8:	d103      	bne.n	802cee2 <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 802ceda:	7bfb      	ldrb	r3, [r7, #15]
 802cedc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802cee0:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 802cee2:	683b      	ldr	r3, [r7, #0]
 802cee4:	681c      	ldr	r4, [r3, #0]
 802cee6:	683b      	ldr	r3, [r7, #0]
 802cee8:	691b      	ldr	r3, [r3, #16]
 802ceea:	7bf8      	ldrb	r0, [r7, #15]
 802ceec:	687a      	ldr	r2, [r7, #4]
 802ceee:	68b9      	ldr	r1, [r7, #8]
 802cef0:	47a0      	blx	r4
 802cef2:	4603      	mov	r3, r0
 802cef4:	461a      	mov	r2, r3
 802cef6:	683b      	ldr	r3, [r7, #0]
 802cef8:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802cefa:	683b      	ldr	r3, [r7, #0]
 802cefc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 802cf00:	2b00      	cmp	r3, #0
 802cf02:	d004      	beq.n	802cf0e <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 802cf04:	23fd      	movs	r3, #253	; 0xfd
 802cf06:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802cf08:	e001      	b.n	802cf0e <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802cf0a:	23ff      	movs	r3, #255	; 0xff
 802cf0c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802cf0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802cf12:	4618      	mov	r0, r3
 802cf14:	371c      	adds	r7, #28
 802cf16:	46bd      	mov	sp, r7
 802cf18:	bd90      	pop	{r4, r7, pc}

0802cf1a <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 802cf1a:	b590      	push	{r4, r7, lr}
 802cf1c:	b087      	sub	sp, #28
 802cf1e:	af00      	add	r7, sp, #0
 802cf20:	60b9      	str	r1, [r7, #8]
 802cf22:	607a      	str	r2, [r7, #4]
 802cf24:	603b      	str	r3, [r7, #0]
 802cf26:	4603      	mov	r3, r0
 802cf28:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802cf2a:	2300      	movs	r3, #0
 802cf2c:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 802cf2e:	683b      	ldr	r3, [r7, #0]
 802cf30:	2b00      	cmp	r3, #0
 802cf32:	d022      	beq.n	802cf7a <bhy2_hif_set_regs+0x60>
 802cf34:	683b      	ldr	r3, [r7, #0]
 802cf36:	681b      	ldr	r3, [r3, #0]
 802cf38:	2b00      	cmp	r3, #0
 802cf3a:	d01e      	beq.n	802cf7a <bhy2_hif_set_regs+0x60>
 802cf3c:	68bb      	ldr	r3, [r7, #8]
 802cf3e:	2b00      	cmp	r3, #0
 802cf40:	d01b      	beq.n	802cf7a <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 802cf42:	683b      	ldr	r3, [r7, #0]
 802cf44:	7b1b      	ldrb	r3, [r3, #12]
 802cf46:	2b01      	cmp	r3, #1
 802cf48:	d103      	bne.n	802cf52 <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 802cf4a:	7bfb      	ldrb	r3, [r7, #15]
 802cf4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802cf50:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 802cf52:	683b      	ldr	r3, [r7, #0]
 802cf54:	685c      	ldr	r4, [r3, #4]
 802cf56:	683b      	ldr	r3, [r7, #0]
 802cf58:	691b      	ldr	r3, [r3, #16]
 802cf5a:	7bf8      	ldrb	r0, [r7, #15]
 802cf5c:	687a      	ldr	r2, [r7, #4]
 802cf5e:	68b9      	ldr	r1, [r7, #8]
 802cf60:	47a0      	blx	r4
 802cf62:	4603      	mov	r3, r0
 802cf64:	461a      	mov	r2, r3
 802cf66:	683b      	ldr	r3, [r7, #0]
 802cf68:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802cf6a:	683b      	ldr	r3, [r7, #0]
 802cf6c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 802cf70:	2b00      	cmp	r3, #0
 802cf72:	d004      	beq.n	802cf7e <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 802cf74:	23fd      	movs	r3, #253	; 0xfd
 802cf76:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802cf78:	e001      	b.n	802cf7e <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802cf7a:	23ff      	movs	r3, #255	; 0xff
 802cf7c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802cf7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802cf82:	4618      	mov	r0, r3
 802cf84:	371c      	adds	r7, #28
 802cf86:	46bd      	mov	sp, r7
 802cf88:	bd90      	pop	{r4, r7, pc}

0802cf8a <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 802cf8a:	b580      	push	{r7, lr}
 802cf8c:	b084      	sub	sp, #16
 802cf8e:	af00      	add	r7, sp, #0
 802cf90:	6078      	str	r0, [r7, #4]
 802cf92:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802cf94:	2300      	movs	r3, #0
 802cf96:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 802cf98:	683b      	ldr	r3, [r7, #0]
 802cf9a:	2b00      	cmp	r3, #0
 802cf9c:	d00b      	beq.n	802cfb6 <bhy2_hif_delay_us+0x2c>
 802cf9e:	683b      	ldr	r3, [r7, #0]
 802cfa0:	689b      	ldr	r3, [r3, #8]
 802cfa2:	2b00      	cmp	r3, #0
 802cfa4:	d007      	beq.n	802cfb6 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 802cfa6:	683b      	ldr	r3, [r7, #0]
 802cfa8:	689b      	ldr	r3, [r3, #8]
 802cfaa:	683a      	ldr	r2, [r7, #0]
 802cfac:	6912      	ldr	r2, [r2, #16]
 802cfae:	4611      	mov	r1, r2
 802cfb0:	6878      	ldr	r0, [r7, #4]
 802cfb2:	4798      	blx	r3
 802cfb4:	e001      	b.n	802cfba <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802cfb6:	23ff      	movs	r3, #255	; 0xff
 802cfb8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802cfba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802cfbe:	4618      	mov	r0, r3
 802cfc0:	3710      	adds	r7, #16
 802cfc2:	46bd      	mov	sp, r7
 802cfc4:	bd80      	pop	{r7, pc}

0802cfc6 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 802cfc6:	b580      	push	{r7, lr}
 802cfc8:	b088      	sub	sp, #32
 802cfca:	af04      	add	r7, sp, #16
 802cfcc:	60b9      	str	r1, [r7, #8]
 802cfce:	607a      	str	r2, [r7, #4]
 802cfd0:	603b      	str	r3, [r7, #0]
 802cfd2:	4603      	mov	r3, r0
 802cfd4:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 802cfd6:	89f8      	ldrh	r0, [r7, #14]
 802cfd8:	683b      	ldr	r3, [r7, #0]
 802cfda:	9302      	str	r3, [sp, #8]
 802cfdc:	2300      	movs	r3, #0
 802cfde:	9301      	str	r3, [sp, #4]
 802cfe0:	2300      	movs	r3, #0
 802cfe2:	9300      	str	r3, [sp, #0]
 802cfe4:	2300      	movs	r3, #0
 802cfe6:	687a      	ldr	r2, [r7, #4]
 802cfe8:	68b9      	ldr	r1, [r7, #8]
 802cfea:	f7ff fc37 	bl	802c85c <bhy2_hif_exec_cmd_generic>
 802cfee:	4603      	mov	r3, r0
}
 802cff0:	4618      	mov	r0, r3
 802cff2:	3710      	adds	r7, #16
 802cff4:	46bd      	mov	sp, r7
 802cff6:	bd80      	pop	{r7, pc}

0802cff8 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 802cff8:	b580      	push	{r7, lr}
 802cffa:	b088      	sub	sp, #32
 802cffc:	af02      	add	r7, sp, #8
 802cffe:	60b9      	str	r1, [r7, #8]
 802d000:	607a      	str	r2, [r7, #4]
 802d002:	603b      	str	r3, [r7, #0]
 802d004:	4603      	mov	r3, r0
 802d006:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 802d008:	2300      	movs	r3, #0
 802d00a:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 802d00c:	2300      	movs	r3, #0
 802d00e:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 802d010:	6a3b      	ldr	r3, [r7, #32]
 802d012:	2b00      	cmp	r3, #0
 802d014:	d06e      	beq.n	802d0f4 <bhy2_hif_get_parameter+0xfc>
 802d016:	68bb      	ldr	r3, [r7, #8]
 802d018:	2b00      	cmp	r3, #0
 802d01a:	d06b      	beq.n	802d0f4 <bhy2_hif_get_parameter+0xfc>
 802d01c:	683b      	ldr	r3, [r7, #0]
 802d01e:	2b00      	cmp	r3, #0
 802d020:	d068      	beq.n	802d0f4 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 802d022:	683b      	ldr	r3, [r7, #0]
 802d024:	2200      	movs	r2, #0
 802d026:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802d028:	f107 0113 	add.w	r1, r7, #19
 802d02c:	6a3b      	ldr	r3, [r7, #32]
 802d02e:	2201      	movs	r2, #1
 802d030:	2006      	movs	r0, #6
 802d032:	f7ff ff3a 	bl	802ceaa <bhy2_hif_get_regs>
 802d036:	4603      	mov	r3, r0
 802d038:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 802d03a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802d03e:	2b00      	cmp	r3, #0
 802d040:	d15b      	bne.n	802d0fa <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 802d042:	7cfb      	ldrb	r3, [r7, #19]
 802d044:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 802d046:	7cfb      	ldrb	r3, [r7, #19]
 802d048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802d04c:	b2db      	uxtb	r3, r3
 802d04e:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 802d050:	7cfb      	ldrb	r3, [r7, #19]
 802d052:	7dba      	ldrb	r2, [r7, #22]
 802d054:	429a      	cmp	r2, r3
 802d056:	d008      	beq.n	802d06a <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802d058:	f107 0113 	add.w	r1, r7, #19
 802d05c:	6a3b      	ldr	r3, [r7, #32]
 802d05e:	2201      	movs	r2, #1
 802d060:	2006      	movs	r0, #6
 802d062:	f7ff ff5a 	bl	802cf1a <bhy2_hif_set_regs>
 802d066:	4603      	mov	r3, r0
 802d068:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 802d06a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802d06e:	2b00      	cmp	r3, #0
 802d070:	d143      	bne.n	802d0fa <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 802d072:	89fb      	ldrh	r3, [r7, #14]
 802d074:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802d078:	b298      	uxth	r0, r3
 802d07a:	6a3b      	ldr	r3, [r7, #32]
 802d07c:	2200      	movs	r2, #0
 802d07e:	2100      	movs	r1, #0
 802d080:	f7ff ffa1 	bl	802cfc6 <bhy2_hif_exec_cmd>
 802d084:	4603      	mov	r3, r0
 802d086:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 802d088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802d08c:	2b00      	cmp	r3, #0
 802d08e:	d134      	bne.n	802d0fa <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 802d090:	6a38      	ldr	r0, [r7, #32]
 802d092:	f7ff fdbf 	bl	802cc14 <bhy2_wait_status_ready>
 802d096:	4603      	mov	r3, r0
 802d098:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 802d09a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802d09e:	2b00      	cmp	r3, #0
 802d0a0:	d12b      	bne.n	802d0fa <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 802d0a2:	f107 0014 	add.w	r0, r7, #20
 802d0a6:	6a3b      	ldr	r3, [r7, #32]
 802d0a8:	9300      	str	r3, [sp, #0]
 802d0aa:	683b      	ldr	r3, [r7, #0]
 802d0ac:	687a      	ldr	r2, [r7, #4]
 802d0ae:	68b9      	ldr	r1, [r7, #8]
 802d0b0:	f000 f94b 	bl	802d34a <bhy2_hif_get_status_fifo>
 802d0b4:	4603      	mov	r3, r0
 802d0b6:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 802d0b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802d0bc:	2b00      	cmp	r3, #0
 802d0be:	d11c      	bne.n	802d0fa <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 802d0c0:	7cfb      	ldrb	r3, [r7, #19]
 802d0c2:	7dba      	ldrb	r2, [r7, #22]
 802d0c4:	429a      	cmp	r2, r3
 802d0c6:	d00a      	beq.n	802d0de <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 802d0c8:	7dbb      	ldrb	r3, [r7, #22]
 802d0ca:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802d0cc:	f107 0113 	add.w	r1, r7, #19
 802d0d0:	6a3b      	ldr	r3, [r7, #32]
 802d0d2:	2201      	movs	r2, #1
 802d0d4:	2006      	movs	r0, #6
 802d0d6:	f7ff ff20 	bl	802cf1a <bhy2_hif_set_regs>
 802d0da:	4603      	mov	r3, r0
 802d0dc:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 802d0de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802d0e2:	2b00      	cmp	r3, #0
 802d0e4:	d109      	bne.n	802d0fa <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 802d0e6:	8abb      	ldrh	r3, [r7, #20]
 802d0e8:	89fa      	ldrh	r2, [r7, #14]
 802d0ea:	429a      	cmp	r2, r3
 802d0ec:	d005      	beq.n	802d0fa <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 802d0ee:	23fb      	movs	r3, #251	; 0xfb
 802d0f0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 802d0f2:	e002      	b.n	802d0fa <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802d0f4:	23ff      	movs	r3, #255	; 0xff
 802d0f6:	75fb      	strb	r3, [r7, #23]
 802d0f8:	e000      	b.n	802d0fc <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 802d0fa:	bf00      	nop
    }

    return rslt;
 802d0fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802d100:	4618      	mov	r0, r3
 802d102:	3718      	adds	r7, #24
 802d104:	46bd      	mov	sp, r7
 802d106:	bd80      	pop	{r7, pc}

0802d108 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 802d108:	b580      	push	{r7, lr}
 802d10a:	b082      	sub	sp, #8
 802d10c:	af00      	add	r7, sp, #0
 802d10e:	6078      	str	r0, [r7, #4]
 802d110:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 802d112:	683b      	ldr	r3, [r7, #0]
 802d114:	2201      	movs	r2, #1
 802d116:	6879      	ldr	r1, [r7, #4]
 802d118:	201c      	movs	r0, #28
 802d11a:	f7ff fec6 	bl	802ceaa <bhy2_hif_get_regs>
 802d11e:	4603      	mov	r3, r0
}
 802d120:	4618      	mov	r0, r3
 802d122:	3708      	adds	r7, #8
 802d124:	46bd      	mov	sp, r7
 802d126:	bd80      	pop	{r7, pc}

0802d128 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 802d128:	b580      	push	{r7, lr}
 802d12a:	b084      	sub	sp, #16
 802d12c:	af00      	add	r7, sp, #0
 802d12e:	6078      	str	r0, [r7, #4]
 802d130:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 802d132:	687b      	ldr	r3, [r7, #4]
 802d134:	2b00      	cmp	r3, #0
 802d136:	d013      	beq.n	802d160 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 802d138:	f107 010c 	add.w	r1, r7, #12
 802d13c:	683b      	ldr	r3, [r7, #0]
 802d13e:	2202      	movs	r2, #2
 802d140:	2020      	movs	r0, #32
 802d142:	f7ff feb2 	bl	802ceaa <bhy2_hif_get_regs>
 802d146:	4603      	mov	r3, r0
 802d148:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 802d14a:	7b3b      	ldrb	r3, [r7, #12]
 802d14c:	b21a      	sxth	r2, r3
 802d14e:	7b7b      	ldrb	r3, [r7, #13]
 802d150:	021b      	lsls	r3, r3, #8
 802d152:	b21b      	sxth	r3, r3
 802d154:	4313      	orrs	r3, r2
 802d156:	b21b      	sxth	r3, r3
 802d158:	b29a      	uxth	r2, r3
 802d15a:	687b      	ldr	r3, [r7, #4]
 802d15c:	801a      	strh	r2, [r3, #0]
 802d15e:	e001      	b.n	802d164 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802d160:	23ff      	movs	r3, #255	; 0xff
 802d162:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802d164:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802d168:	4618      	mov	r0, r3
 802d16a:	3710      	adds	r7, #16
 802d16c:	46bd      	mov	sp, r7
 802d16e:	bd80      	pop	{r7, pc}

0802d170 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 802d170:	b580      	push	{r7, lr}
 802d172:	b082      	sub	sp, #8
 802d174:	af00      	add	r7, sp, #0
 802d176:	6078      	str	r0, [r7, #4]
 802d178:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 802d17a:	683b      	ldr	r3, [r7, #0]
 802d17c:	2201      	movs	r2, #1
 802d17e:	6879      	ldr	r1, [r7, #4]
 802d180:	2025      	movs	r0, #37	; 0x25
 802d182:	f7ff fe92 	bl	802ceaa <bhy2_hif_get_regs>
 802d186:	4603      	mov	r3, r0
}
 802d188:	4618      	mov	r0, r3
 802d18a:	3708      	adds	r7, #8
 802d18c:	46bd      	mov	sp, r7
 802d18e:	bd80      	pop	{r7, pc}

0802d190 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 802d190:	b580      	push	{r7, lr}
 802d192:	b082      	sub	sp, #8
 802d194:	af00      	add	r7, sp, #0
 802d196:	6078      	str	r0, [r7, #4]
 802d198:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 802d19a:	683b      	ldr	r3, [r7, #0]
 802d19c:	2201      	movs	r2, #1
 802d19e:	6879      	ldr	r1, [r7, #4]
 802d1a0:	202d      	movs	r0, #45	; 0x2d
 802d1a2:	f7ff fe82 	bl	802ceaa <bhy2_hif_get_regs>
 802d1a6:	4603      	mov	r3, r0
}
 802d1a8:	4618      	mov	r0, r3
 802d1aa:	3708      	adds	r7, #8
 802d1ac:	46bd      	mov	sp, r7
 802d1ae:	bd80      	pop	{r7, pc}

0802d1b0 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 802d1b0:	b580      	push	{r7, lr}
 802d1b2:	b084      	sub	sp, #16
 802d1b4:	af00      	add	r7, sp, #0
 802d1b6:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 802d1b8:	2301      	movs	r3, #1
 802d1ba:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 802d1bc:	2300      	movs	r3, #0
 802d1be:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 802d1c0:	230f      	movs	r3, #15
 802d1c2:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 802d1c4:	f107 010b 	add.w	r1, r7, #11
 802d1c8:	687b      	ldr	r3, [r7, #4]
 802d1ca:	2201      	movs	r2, #1
 802d1cc:	2014      	movs	r0, #20
 802d1ce:	f7ff fea4 	bl	802cf1a <bhy2_hif_set_regs>
 802d1d2:	4603      	mov	r3, r0
 802d1d4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 802d1d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802d1da:	2b00      	cmp	r3, #0
 802d1dc:	d12b      	bne.n	802d236 <bhy2_hif_reset+0x86>
    {
        while (count--)
 802d1de:	e01c      	b.n	802d21a <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 802d1e0:	6879      	ldr	r1, [r7, #4]
 802d1e2:	f242 7010 	movw	r0, #10000	; 0x2710
 802d1e6:	f7ff fed0 	bl	802cf8a <bhy2_hif_delay_us>
 802d1ea:	4603      	mov	r3, r0
 802d1ec:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 802d1ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802d1f2:	2b00      	cmp	r3, #0
 802d1f4:	d111      	bne.n	802d21a <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 802d1f6:	f107 010a 	add.w	r1, r7, #10
 802d1fa:	687b      	ldr	r3, [r7, #4]
 802d1fc:	2201      	movs	r2, #1
 802d1fe:	2025      	movs	r0, #37	; 0x25
 802d200:	f7ff fe53 	bl	802ceaa <bhy2_hif_get_regs>
 802d204:	4603      	mov	r3, r0
 802d206:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 802d208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802d20c:	2b00      	cmp	r3, #0
 802d20e:	d104      	bne.n	802d21a <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 802d210:	7abb      	ldrb	r3, [r7, #10]
 802d212:	f003 0310 	and.w	r3, r3, #16
 802d216:	2b00      	cmp	r3, #0
 802d218:	d105      	bne.n	802d226 <bhy2_hif_reset+0x76>
        while (count--)
 802d21a:	89bb      	ldrh	r3, [r7, #12]
 802d21c:	1e5a      	subs	r2, r3, #1
 802d21e:	81ba      	strh	r2, [r7, #12]
 802d220:	2b00      	cmp	r3, #0
 802d222:	d1dd      	bne.n	802d1e0 <bhy2_hif_reset+0x30>
 802d224:	e000      	b.n	802d228 <bhy2_hif_reset+0x78>
                    {
                        break;
 802d226:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 802d228:	7abb      	ldrb	r3, [r7, #10]
 802d22a:	f003 0310 	and.w	r3, r3, #16
 802d22e:	2b00      	cmp	r3, #0
 802d230:	d101      	bne.n	802d236 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 802d232:	23fb      	movs	r3, #251	; 0xfb
 802d234:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 802d236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802d23a:	4618      	mov	r0, r3
 802d23c:	3710      	adds	r7, #16
 802d23e:	46bd      	mov	sp, r7
 802d240:	bd80      	pop	{r7, pc}

0802d242 <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 802d242:	b580      	push	{r7, lr}
 802d244:	b086      	sub	sp, #24
 802d246:	af00      	add	r7, sp, #0
 802d248:	60f8      	str	r0, [r7, #12]
 802d24a:	60b9      	str	r1, [r7, #8]
 802d24c:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 802d24e:	2300      	movs	r3, #0
 802d250:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 802d252:	687b      	ldr	r3, [r7, #4]
 802d254:	2b00      	cmp	r3, #0
 802d256:	d027      	beq.n	802d2a8 <bhy2_hif_upload_firmware_to_ram+0x66>
 802d258:	68fb      	ldr	r3, [r7, #12]
 802d25a:	2b00      	cmp	r3, #0
 802d25c:	d024      	beq.n	802d2a8 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 802d25e:	68fb      	ldr	r3, [r7, #12]
 802d260:	781b      	ldrb	r3, [r3, #0]
 802d262:	b21a      	sxth	r2, r3
 802d264:	68fb      	ldr	r3, [r7, #12]
 802d266:	3301      	adds	r3, #1
 802d268:	781b      	ldrb	r3, [r3, #0]
 802d26a:	021b      	lsls	r3, r3, #8
 802d26c:	b21b      	sxth	r3, r3
 802d26e:	4313      	orrs	r3, r2
 802d270:	b21b      	sxth	r3, r3
 802d272:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 802d274:	8abb      	ldrh	r3, [r7, #20]
 802d276:	f246 622b 	movw	r2, #26155	; 0x662b
 802d27a:	4293      	cmp	r3, r2
 802d27c:	d002      	beq.n	802d284 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 802d27e:	23fc      	movs	r3, #252	; 0xfc
 802d280:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 802d282:	e014      	b.n	802d2ae <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 802d284:	687b      	ldr	r3, [r7, #4]
 802d286:	68ba      	ldr	r2, [r7, #8]
 802d288:	68f9      	ldr	r1, [r7, #12]
 802d28a:	2002      	movs	r0, #2
 802d28c:	f7ff fe9b 	bl	802cfc6 <bhy2_hif_exec_cmd>
 802d290:	4603      	mov	r3, r0
 802d292:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 802d294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802d298:	2b00      	cmp	r3, #0
 802d29a:	d108      	bne.n	802d2ae <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 802d29c:	6878      	ldr	r0, [r7, #4]
 802d29e:	f7ff fcf2 	bl	802cc86 <bhy2_hif_check_boot_status_ram>
 802d2a2:	4603      	mov	r3, r0
 802d2a4:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 802d2a6:	e002      	b.n	802d2ae <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802d2a8:	23ff      	movs	r3, #255	; 0xff
 802d2aa:	75fb      	strb	r3, [r7, #23]
 802d2ac:	e000      	b.n	802d2b0 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 802d2ae:	bf00      	nop
    }

    return rslt;
 802d2b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802d2b4:	4618      	mov	r0, r3
 802d2b6:	3718      	adds	r7, #24
 802d2b8:	46bd      	mov	sp, r7
 802d2ba:	bd80      	pop	{r7, pc}

0802d2bc <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 802d2bc:	b580      	push	{r7, lr}
 802d2be:	b084      	sub	sp, #16
 802d2c0:	af00      	add	r7, sp, #0
 802d2c2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 802d2c4:	687b      	ldr	r3, [r7, #4]
 802d2c6:	2200      	movs	r2, #0
 802d2c8:	2100      	movs	r1, #0
 802d2ca:	2003      	movs	r0, #3
 802d2cc:	f7ff fe7b 	bl	802cfc6 <bhy2_hif_exec_cmd>
 802d2d0:	4603      	mov	r3, r0
 802d2d2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 802d2d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802d2d8:	2b00      	cmp	r3, #0
 802d2da:	d104      	bne.n	802d2e6 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 802d2dc:	6878      	ldr	r0, [r7, #4]
 802d2de:	f7ff fcd2 	bl	802cc86 <bhy2_hif_check_boot_status_ram>
 802d2e2:	4603      	mov	r3, r0
 802d2e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802d2e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802d2ea:	4618      	mov	r0, r3
 802d2ec:	3710      	adds	r7, #16
 802d2ee:	46bd      	mov	sp, r7
 802d2f0:	bd80      	pop	{r7, pc}

0802d2f2 <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802d2f2:	b580      	push	{r7, lr}
 802d2f4:	b086      	sub	sp, #24
 802d2f6:	af02      	add	r7, sp, #8
 802d2f8:	60f8      	str	r0, [r7, #12]
 802d2fa:	60b9      	str	r1, [r7, #8]
 802d2fc:	607a      	str	r2, [r7, #4]
 802d2fe:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802d300:	69bb      	ldr	r3, [r7, #24]
 802d302:	9301      	str	r3, [sp, #4]
 802d304:	683b      	ldr	r3, [r7, #0]
 802d306:	9300      	str	r3, [sp, #0]
 802d308:	687b      	ldr	r3, [r7, #4]
 802d30a:	68ba      	ldr	r2, [r7, #8]
 802d30c:	68f9      	ldr	r1, [r7, #12]
 802d30e:	2001      	movs	r0, #1
 802d310:	f7ff fd00 	bl	802cd14 <bhy2_hif_get_fifo>
 802d314:	4603      	mov	r3, r0
}
 802d316:	4618      	mov	r0, r3
 802d318:	3710      	adds	r7, #16
 802d31a:	46bd      	mov	sp, r7
 802d31c:	bd80      	pop	{r7, pc}

0802d31e <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 802d31e:	b580      	push	{r7, lr}
 802d320:	b086      	sub	sp, #24
 802d322:	af02      	add	r7, sp, #8
 802d324:	60f8      	str	r0, [r7, #12]
 802d326:	60b9      	str	r1, [r7, #8]
 802d328:	607a      	str	r2, [r7, #4]
 802d32a:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802d32c:	69bb      	ldr	r3, [r7, #24]
 802d32e:	9301      	str	r3, [sp, #4]
 802d330:	683b      	ldr	r3, [r7, #0]
 802d332:	9300      	str	r3, [sp, #0]
 802d334:	687b      	ldr	r3, [r7, #4]
 802d336:	68ba      	ldr	r2, [r7, #8]
 802d338:	68f9      	ldr	r1, [r7, #12]
 802d33a:	2002      	movs	r0, #2
 802d33c:	f7ff fcea 	bl	802cd14 <bhy2_hif_get_fifo>
 802d340:	4603      	mov	r3, r0
}
 802d342:	4618      	mov	r0, r3
 802d344:	3710      	adds	r7, #16
 802d346:	46bd      	mov	sp, r7
 802d348:	bd80      	pop	{r7, pc}

0802d34a <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802d34a:	b580      	push	{r7, lr}
 802d34c:	b086      	sub	sp, #24
 802d34e:	af00      	add	r7, sp, #0
 802d350:	60f8      	str	r0, [r7, #12]
 802d352:	60b9      	str	r1, [r7, #8]
 802d354:	607a      	str	r2, [r7, #4]
 802d356:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 802d358:	f107 0110 	add.w	r1, r7, #16
 802d35c:	6a3b      	ldr	r3, [r7, #32]
 802d35e:	2204      	movs	r2, #4
 802d360:	2003      	movs	r0, #3
 802d362:	f7ff fda2 	bl	802ceaa <bhy2_hif_get_regs>
 802d366:	4603      	mov	r3, r0
 802d368:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 802d36a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802d36e:	2b00      	cmp	r3, #0
 802d370:	d130      	bne.n	802d3d4 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 802d372:	7c3b      	ldrb	r3, [r7, #16]
 802d374:	b21a      	sxth	r2, r3
 802d376:	f107 0310 	add.w	r3, r7, #16
 802d37a:	3301      	adds	r3, #1
 802d37c:	781b      	ldrb	r3, [r3, #0]
 802d37e:	021b      	lsls	r3, r3, #8
 802d380:	b21b      	sxth	r3, r3
 802d382:	4313      	orrs	r3, r2
 802d384:	b21b      	sxth	r3, r3
 802d386:	b29a      	uxth	r2, r3
 802d388:	68fb      	ldr	r3, [r7, #12]
 802d38a:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 802d38c:	7cbb      	ldrb	r3, [r7, #18]
 802d38e:	b21a      	sxth	r2, r3
 802d390:	f107 0310 	add.w	r3, r7, #16
 802d394:	3302      	adds	r3, #2
 802d396:	3301      	adds	r3, #1
 802d398:	781b      	ldrb	r3, [r3, #0]
 802d39a:	021b      	lsls	r3, r3, #8
 802d39c:	b21b      	sxth	r3, r3
 802d39e:	4313      	orrs	r3, r2
 802d3a0:	b21b      	sxth	r3, r3
 802d3a2:	b29b      	uxth	r3, r3
 802d3a4:	461a      	mov	r2, r3
 802d3a6:	683b      	ldr	r3, [r7, #0]
 802d3a8:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 802d3aa:	683b      	ldr	r3, [r7, #0]
 802d3ac:	681b      	ldr	r3, [r3, #0]
 802d3ae:	2b00      	cmp	r3, #0
 802d3b0:	d010      	beq.n	802d3d4 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 802d3b2:	683b      	ldr	r3, [r7, #0]
 802d3b4:	681b      	ldr	r3, [r3, #0]
 802d3b6:	687a      	ldr	r2, [r7, #4]
 802d3b8:	429a      	cmp	r2, r3
 802d3ba:	d202      	bcs.n	802d3c2 <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 802d3bc:	23fa      	movs	r3, #250	; 0xfa
 802d3be:	75fb      	strb	r3, [r7, #23]
 802d3c0:	e008      	b.n	802d3d4 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 802d3c2:	683b      	ldr	r3, [r7, #0]
 802d3c4:	681a      	ldr	r2, [r3, #0]
 802d3c6:	6a3b      	ldr	r3, [r7, #32]
 802d3c8:	68b9      	ldr	r1, [r7, #8]
 802d3ca:	2003      	movs	r0, #3
 802d3cc:	f7ff fd6d 	bl	802ceaa <bhy2_hif_get_regs>
 802d3d0:	4603      	mov	r3, r0
 802d3d2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 802d3d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802d3d8:	4618      	mov	r0, r3
 802d3da:	3718      	adds	r7, #24
 802d3dc:	46bd      	mov	sp, r7
 802d3de:	bd80      	pop	{r7, pc}

0802d3e0 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 802d3e0:	b580      	push	{r7, lr}
 802d3e2:	b086      	sub	sp, #24
 802d3e4:	af02      	add	r7, sp, #8
 802d3e6:	60f8      	str	r0, [r7, #12]
 802d3e8:	60b9      	str	r1, [r7, #8]
 802d3ea:	607a      	str	r2, [r7, #4]
 802d3ec:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802d3ee:	69bb      	ldr	r3, [r7, #24]
 802d3f0:	9301      	str	r3, [sp, #4]
 802d3f2:	683b      	ldr	r3, [r7, #0]
 802d3f4:	9300      	str	r3, [sp, #0]
 802d3f6:	687b      	ldr	r3, [r7, #4]
 802d3f8:	68ba      	ldr	r2, [r7, #8]
 802d3fa:	68f9      	ldr	r1, [r7, #12]
 802d3fc:	2003      	movs	r0, #3
 802d3fe:	f7ff fc89 	bl	802cd14 <bhy2_hif_get_fifo>
 802d402:	4603      	mov	r3, r0
}
 802d404:	4618      	mov	r0, r3
 802d406:	3710      	adds	r7, #16
 802d408:	46bd      	mov	sp, r7
 802d40a:	bd80      	pop	{r7, pc}

0802d40c <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 802d40c:	b580      	push	{r7, lr}
 802d40e:	b088      	sub	sp, #32
 802d410:	af00      	add	r7, sp, #0
 802d412:	4603      	mov	r3, r0
 802d414:	ed87 0a02 	vstr	s0, [r7, #8]
 802d418:	6079      	str	r1, [r7, #4]
 802d41a:	603a      	str	r2, [r7, #0]
 802d41c:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 802d41e:	68bb      	ldr	r3, [r7, #8]
 802d420:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 802d422:	7bfb      	ldrb	r3, [r7, #15]
 802d424:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 802d426:	697b      	ldr	r3, [r7, #20]
 802d428:	b2db      	uxtb	r3, r3
 802d42a:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 802d42c:	697b      	ldr	r3, [r7, #20]
 802d42e:	0a1b      	lsrs	r3, r3, #8
 802d430:	b2db      	uxtb	r3, r3
 802d432:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 802d434:	697b      	ldr	r3, [r7, #20]
 802d436:	0c1b      	lsrs	r3, r3, #16
 802d438:	b2db      	uxtb	r3, r3
 802d43a:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 802d43c:	697b      	ldr	r3, [r7, #20]
 802d43e:	0e1b      	lsrs	r3, r3, #24
 802d440:	b2db      	uxtb	r3, r3
 802d442:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 802d444:	687b      	ldr	r3, [r7, #4]
 802d446:	b2db      	uxtb	r3, r3
 802d448:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 802d44a:	687b      	ldr	r3, [r7, #4]
 802d44c:	0a1b      	lsrs	r3, r3, #8
 802d44e:	b2db      	uxtb	r3, r3
 802d450:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 802d452:	687b      	ldr	r3, [r7, #4]
 802d454:	0c1b      	lsrs	r3, r3, #16
 802d456:	b2db      	uxtb	r3, r3
 802d458:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 802d45a:	f107 0118 	add.w	r1, r7, #24
 802d45e:	683b      	ldr	r3, [r7, #0]
 802d460:	2208      	movs	r2, #8
 802d462:	200d      	movs	r0, #13
 802d464:	f7ff fdaf 	bl	802cfc6 <bhy2_hif_exec_cmd>
 802d468:	4603      	mov	r3, r0
}
 802d46a:	4618      	mov	r0, r3
 802d46c:	3720      	adds	r7, #32
 802d46e:	46bd      	mov	sp, r7
 802d470:	bd80      	pop	{r7, pc}

0802d472 <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 802d472:	b580      	push	{r7, lr}
 802d474:	b090      	sub	sp, #64	; 0x40
 802d476:	af02      	add	r7, sp, #8
 802d478:	4603      	mov	r3, r0
 802d47a:	60b9      	str	r1, [r7, #8]
 802d47c:	607a      	str	r2, [r7, #4]
 802d47e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 802d480:	68bb      	ldr	r3, [r7, #8]
 802d482:	2b00      	cmp	r3, #0
 802d484:	f000 80da 	beq.w	802d63c <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 802d488:	7bfb      	ldrb	r3, [r7, #15]
 802d48a:	2bf5      	cmp	r3, #245	; 0xf5
 802d48c:	d903      	bls.n	802d496 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 802d48e:	23fe      	movs	r3, #254	; 0xfe
 802d490:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802d494:	e0d5      	b.n	802d642 <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 802d496:	7bfb      	ldrb	r3, [r7, #15]
 802d498:	b29b      	uxth	r3, r3
 802d49a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 802d49e:	b298      	uxth	r0, r3
 802d4a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802d4a4:	f107 0114 	add.w	r1, r7, #20
 802d4a8:	687b      	ldr	r3, [r7, #4]
 802d4aa:	9300      	str	r3, [sp, #0]
 802d4ac:	4613      	mov	r3, r2
 802d4ae:	221c      	movs	r2, #28
 802d4b0:	f7ff fda2 	bl	802cff8 <bhy2_hif_get_parameter>
 802d4b4:	4603      	mov	r3, r0
 802d4b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 802d4ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 802d4be:	2b00      	cmp	r3, #0
 802d4c0:	f040 80bf 	bne.w	802d642 <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 802d4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d4c6:	2b1c      	cmp	r3, #28
 802d4c8:	d003      	beq.n	802d4d2 <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 802d4ca:	23fe      	movs	r3, #254	; 0xfe
 802d4cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802d4d0:	e0b7      	b.n	802d642 <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 802d4d2:	7d3a      	ldrb	r2, [r7, #20]
 802d4d4:	68bb      	ldr	r3, [r7, #8]
 802d4d6:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 802d4d8:	7d7a      	ldrb	r2, [r7, #21]
 802d4da:	68bb      	ldr	r3, [r7, #8]
 802d4dc:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 802d4de:	7dba      	ldrb	r2, [r7, #22]
 802d4e0:	68bb      	ldr	r3, [r7, #8]
 802d4e2:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 802d4e4:	7dfa      	ldrb	r2, [r7, #23]
 802d4e6:	68bb      	ldr	r3, [r7, #8]
 802d4e8:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 802d4ea:	7e3a      	ldrb	r2, [r7, #24]
 802d4ec:	68bb      	ldr	r3, [r7, #8]
 802d4ee:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 802d4f0:	7e7a      	ldrb	r2, [r7, #25]
 802d4f2:	68bb      	ldr	r3, [r7, #8]
 802d4f4:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 802d4f6:	7eba      	ldrb	r2, [r7, #26]
 802d4f8:	68bb      	ldr	r3, [r7, #8]
 802d4fa:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 802d4fc:	7efa      	ldrb	r2, [r7, #27]
 802d4fe:	68bb      	ldr	r3, [r7, #8]
 802d500:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 802d502:	7f3a      	ldrb	r2, [r7, #28]
 802d504:	68bb      	ldr	r3, [r7, #8]
 802d506:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 802d508:	7f7a      	ldrb	r2, [r7, #29]
 802d50a:	68bb      	ldr	r3, [r7, #8]
 802d50c:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 802d50e:	7fba      	ldrb	r2, [r7, #30]
 802d510:	68bb      	ldr	r3, [r7, #8]
 802d512:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 802d514:	7ffa      	ldrb	r2, [r7, #31]
 802d516:	68bb      	ldr	r3, [r7, #8]
 802d518:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 802d51a:	f897 2020 	ldrb.w	r2, [r7, #32]
 802d51e:	68bb      	ldr	r3, [r7, #8]
 802d520:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 802d522:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 802d526:	68bb      	ldr	r3, [r7, #8]
 802d528:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 802d52a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 802d52e:	68bb      	ldr	r3, [r7, #8]
 802d530:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 802d532:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 802d536:	68bb      	ldr	r3, [r7, #8]
 802d538:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 802d53a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802d53e:	68bb      	ldr	r3, [r7, #8]
 802d540:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 802d542:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 802d546:	68bb      	ldr	r3, [r7, #8]
 802d548:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 802d54a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d54e:	68bb      	ldr	r3, [r7, #8]
 802d550:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 802d552:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802d556:	68bb      	ldr	r3, [r7, #8]
 802d558:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 802d55a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802d55e:	68bb      	ldr	r3, [r7, #8]
 802d560:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 802d562:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 802d566:	68bb      	ldr	r3, [r7, #8]
 802d568:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 802d56a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 802d56e:	68bb      	ldr	r3, [r7, #8]
 802d570:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 802d572:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 802d576:	68bb      	ldr	r3, [r7, #8]
 802d578:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 802d57a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802d57e:	68bb      	ldr	r3, [r7, #8]
 802d580:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 802d582:	68bb      	ldr	r3, [r7, #8]
 802d584:	791b      	ldrb	r3, [r3, #4]
 802d586:	b21a      	sxth	r2, r3
 802d588:	68bb      	ldr	r3, [r7, #8]
 802d58a:	795b      	ldrb	r3, [r3, #5]
 802d58c:	021b      	lsls	r3, r3, #8
 802d58e:	b21b      	sxth	r3, r3
 802d590:	4313      	orrs	r3, r2
 802d592:	b21b      	sxth	r3, r3
 802d594:	b29a      	uxth	r2, r3
 802d596:	68bb      	ldr	r3, [r7, #8]
 802d598:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 802d59a:	68bb      	ldr	r3, [r7, #8]
 802d59c:	799b      	ldrb	r3, [r3, #6]
 802d59e:	b21a      	sxth	r2, r3
 802d5a0:	68bb      	ldr	r3, [r7, #8]
 802d5a2:	79db      	ldrb	r3, [r3, #7]
 802d5a4:	021b      	lsls	r3, r3, #8
 802d5a6:	b21b      	sxth	r3, r3
 802d5a8:	4313      	orrs	r3, r2
 802d5aa:	b21b      	sxth	r3, r3
 802d5ac:	b29a      	uxth	r2, r3
 802d5ae:	68bb      	ldr	r3, [r7, #8]
 802d5b0:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 802d5b2:	68bb      	ldr	r3, [r7, #8]
 802d5b4:	7a1b      	ldrb	r3, [r3, #8]
 802d5b6:	461a      	mov	r2, r3
 802d5b8:	68bb      	ldr	r3, [r7, #8]
 802d5ba:	7a5b      	ldrb	r3, [r3, #9]
 802d5bc:	021b      	lsls	r3, r3, #8
 802d5be:	431a      	orrs	r2, r3
 802d5c0:	68bb      	ldr	r3, [r7, #8]
 802d5c2:	7a9b      	ldrb	r3, [r3, #10]
 802d5c4:	041b      	lsls	r3, r3, #16
 802d5c6:	431a      	orrs	r2, r3
 802d5c8:	68bb      	ldr	r3, [r7, #8]
 802d5ca:	7adb      	ldrb	r3, [r3, #11]
 802d5cc:	061b      	lsls	r3, r3, #24
 802d5ce:	431a      	orrs	r2, r3
 802d5d0:	68bb      	ldr	r3, [r7, #8]
 802d5d2:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 802d5d4:	68bb      	ldr	r3, [r7, #8]
 802d5d6:	7b1b      	ldrb	r3, [r3, #12]
 802d5d8:	461a      	mov	r2, r3
 802d5da:	68bb      	ldr	r3, [r7, #8]
 802d5dc:	7b5b      	ldrb	r3, [r3, #13]
 802d5de:	021b      	lsls	r3, r3, #8
 802d5e0:	431a      	orrs	r2, r3
 802d5e2:	68bb      	ldr	r3, [r7, #8]
 802d5e4:	7b9b      	ldrb	r3, [r3, #14]
 802d5e6:	041b      	lsls	r3, r3, #16
 802d5e8:	431a      	orrs	r2, r3
 802d5ea:	68bb      	ldr	r3, [r7, #8]
 802d5ec:	7bdb      	ldrb	r3, [r3, #15]
 802d5ee:	061b      	lsls	r3, r3, #24
 802d5f0:	431a      	orrs	r2, r3
 802d5f2:	68bb      	ldr	r3, [r7, #8]
 802d5f4:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 802d5f6:	68bb      	ldr	r3, [r7, #8]
 802d5f8:	7c1b      	ldrb	r3, [r3, #16]
 802d5fa:	461a      	mov	r2, r3
 802d5fc:	68bb      	ldr	r3, [r7, #8]
 802d5fe:	7c5b      	ldrb	r3, [r3, #17]
 802d600:	021b      	lsls	r3, r3, #8
 802d602:	431a      	orrs	r2, r3
 802d604:	68bb      	ldr	r3, [r7, #8]
 802d606:	7c9b      	ldrb	r3, [r3, #18]
 802d608:	041b      	lsls	r3, r3, #16
 802d60a:	431a      	orrs	r2, r3
 802d60c:	68bb      	ldr	r3, [r7, #8]
 802d60e:	7cdb      	ldrb	r3, [r3, #19]
 802d610:	061b      	lsls	r3, r3, #24
 802d612:	431a      	orrs	r2, r3
 802d614:	68bb      	ldr	r3, [r7, #8]
 802d616:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 802d618:	68bb      	ldr	r3, [r7, #8]
 802d61a:	7e1b      	ldrb	r3, [r3, #24]
 802d61c:	461a      	mov	r2, r3
 802d61e:	68bb      	ldr	r3, [r7, #8]
 802d620:	7e5b      	ldrb	r3, [r3, #25]
 802d622:	021b      	lsls	r3, r3, #8
 802d624:	431a      	orrs	r2, r3
 802d626:	68bb      	ldr	r3, [r7, #8]
 802d628:	7e9b      	ldrb	r3, [r3, #26]
 802d62a:	041b      	lsls	r3, r3, #16
 802d62c:	431a      	orrs	r2, r3
 802d62e:	68bb      	ldr	r3, [r7, #8]
 802d630:	7edb      	ldrb	r3, [r3, #27]
 802d632:	061b      	lsls	r3, r3, #24
 802d634:	431a      	orrs	r2, r3
 802d636:	68bb      	ldr	r3, [r7, #8]
 802d638:	619a      	str	r2, [r3, #24]
 802d63a:	e002      	b.n	802d642 <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802d63c:	23ff      	movs	r3, #255	; 0xff
 802d63e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 802d642:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 802d646:	4618      	mov	r0, r3
 802d648:	3738      	adds	r7, #56	; 0x38
 802d64a:	46bd      	mov	sp, r7
 802d64c:	bd80      	pop	{r7, pc}

0802d64e <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 802d64e:	b480      	push	{r7}
 802d650:	b083      	sub	sp, #12
 802d652:	af00      	add	r7, sp, #0
 802d654:	6078      	str	r0, [r7, #4]
 802d656:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 802d658:	687b      	ldr	r3, [r7, #4]
 802d65a:	781b      	ldrb	r3, [r3, #0]
 802d65c:	b21a      	sxth	r2, r3
 802d65e:	687b      	ldr	r3, [r7, #4]
 802d660:	3301      	adds	r3, #1
 802d662:	781b      	ldrb	r3, [r3, #0]
 802d664:	021b      	lsls	r3, r3, #8
 802d666:	b21b      	sxth	r3, r3
 802d668:	4313      	orrs	r3, r2
 802d66a:	b21a      	sxth	r2, r3
 802d66c:	683b      	ldr	r3, [r7, #0]
 802d66e:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 802d670:	687b      	ldr	r3, [r7, #4]
 802d672:	3302      	adds	r3, #2
 802d674:	781b      	ldrb	r3, [r3, #0]
 802d676:	b21a      	sxth	r2, r3
 802d678:	687b      	ldr	r3, [r7, #4]
 802d67a:	3303      	adds	r3, #3
 802d67c:	781b      	ldrb	r3, [r3, #0]
 802d67e:	021b      	lsls	r3, r3, #8
 802d680:	b21b      	sxth	r3, r3
 802d682:	4313      	orrs	r3, r2
 802d684:	b21a      	sxth	r2, r3
 802d686:	683b      	ldr	r3, [r7, #0]
 802d688:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 802d68a:	687b      	ldr	r3, [r7, #4]
 802d68c:	3304      	adds	r3, #4
 802d68e:	781b      	ldrb	r3, [r3, #0]
 802d690:	b21a      	sxth	r2, r3
 802d692:	687b      	ldr	r3, [r7, #4]
 802d694:	3305      	adds	r3, #5
 802d696:	781b      	ldrb	r3, [r3, #0]
 802d698:	021b      	lsls	r3, r3, #8
 802d69a:	b21b      	sxth	r3, r3
 802d69c:	4313      	orrs	r3, r2
 802d69e:	b21a      	sxth	r2, r3
 802d6a0:	683b      	ldr	r3, [r7, #0]
 802d6a2:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 802d6a4:	687b      	ldr	r3, [r7, #4]
 802d6a6:	3306      	adds	r3, #6
 802d6a8:	781b      	ldrb	r3, [r3, #0]
 802d6aa:	b21a      	sxth	r2, r3
 802d6ac:	687b      	ldr	r3, [r7, #4]
 802d6ae:	3307      	adds	r3, #7
 802d6b0:	781b      	ldrb	r3, [r3, #0]
 802d6b2:	021b      	lsls	r3, r3, #8
 802d6b4:	b21b      	sxth	r3, r3
 802d6b6:	4313      	orrs	r3, r2
 802d6b8:	b21a      	sxth	r2, r3
 802d6ba:	683b      	ldr	r3, [r7, #0]
 802d6bc:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 802d6be:	687b      	ldr	r3, [r7, #4]
 802d6c0:	3308      	adds	r3, #8
 802d6c2:	781b      	ldrb	r3, [r3, #0]
 802d6c4:	b21a      	sxth	r2, r3
 802d6c6:	687b      	ldr	r3, [r7, #4]
 802d6c8:	3309      	adds	r3, #9
 802d6ca:	781b      	ldrb	r3, [r3, #0]
 802d6cc:	021b      	lsls	r3, r3, #8
 802d6ce:	b21b      	sxth	r3, r3
 802d6d0:	4313      	orrs	r3, r2
 802d6d2:	b21b      	sxth	r3, r3
 802d6d4:	b29a      	uxth	r2, r3
 802d6d6:	683b      	ldr	r3, [r7, #0]
 802d6d8:	811a      	strh	r2, [r3, #8]
}
 802d6da:	bf00      	nop
 802d6dc:	370c      	adds	r7, #12
 802d6de:	46bd      	mov	sp, r7
 802d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6e4:	4770      	bx	lr
	...

0802d6e8 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 802d6e8:	b580      	push	{r7, lr}
 802d6ea:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 802d6ec:	4b12      	ldr	r3, [pc, #72]	; (802d738 <MX_COMP2_Init+0x50>)
 802d6ee:	4a13      	ldr	r2, [pc, #76]	; (802d73c <MX_COMP2_Init+0x54>)
 802d6f0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 802d6f2:	4b11      	ldr	r3, [pc, #68]	; (802d738 <MX_COMP2_Init+0x50>)
 802d6f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 802d6f8:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 802d6fa:	4b0f      	ldr	r3, [pc, #60]	; (802d738 <MX_COMP2_Init+0x50>)
 802d6fc:	2200      	movs	r2, #0
 802d6fe:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 802d700:	4b0d      	ldr	r3, [pc, #52]	; (802d738 <MX_COMP2_Init+0x50>)
 802d702:	2200      	movs	r2, #0
 802d704:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 802d706:	4b0c      	ldr	r3, [pc, #48]	; (802d738 <MX_COMP2_Init+0x50>)
 802d708:	2200      	movs	r2, #0
 802d70a:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 802d70c:	4b0a      	ldr	r3, [pc, #40]	; (802d738 <MX_COMP2_Init+0x50>)
 802d70e:	2200      	movs	r2, #0
 802d710:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 802d712:	4b09      	ldr	r3, [pc, #36]	; (802d738 <MX_COMP2_Init+0x50>)
 802d714:	2200      	movs	r2, #0
 802d716:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 802d718:	4b07      	ldr	r3, [pc, #28]	; (802d738 <MX_COMP2_Init+0x50>)
 802d71a:	2200      	movs	r2, #0
 802d71c:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 802d71e:	4b06      	ldr	r3, [pc, #24]	; (802d738 <MX_COMP2_Init+0x50>)
 802d720:	2231      	movs	r2, #49	; 0x31
 802d722:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 802d724:	4804      	ldr	r0, [pc, #16]	; (802d738 <MX_COMP2_Init+0x50>)
 802d726:	f001 fd11 	bl	802f14c <HAL_COMP_Init>
 802d72a:	4603      	mov	r3, r0
 802d72c:	2b00      	cmp	r3, #0
 802d72e:	d001      	beq.n	802d734 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 802d730:	f000 fc1a 	bl	802df68 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 802d734:	bf00      	nop
 802d736:	bd80      	pop	{r7, pc}
 802d738:	240238f4 	.word	0x240238f4
 802d73c:	58003810 	.word	0x58003810

0802d740 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 802d740:	b580      	push	{r7, lr}
 802d742:	b08a      	sub	sp, #40	; 0x28
 802d744:	af00      	add	r7, sp, #0
 802d746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802d748:	f107 0314 	add.w	r3, r7, #20
 802d74c:	2200      	movs	r2, #0
 802d74e:	601a      	str	r2, [r3, #0]
 802d750:	605a      	str	r2, [r3, #4]
 802d752:	609a      	str	r2, [r3, #8]
 802d754:	60da      	str	r2, [r3, #12]
 802d756:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 802d758:	687b      	ldr	r3, [r7, #4]
 802d75a:	681b      	ldr	r3, [r3, #0]
 802d75c:	4a1c      	ldr	r2, [pc, #112]	; (802d7d0 <HAL_COMP_MspInit+0x90>)
 802d75e:	4293      	cmp	r3, r2
 802d760:	d132      	bne.n	802d7c8 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 802d762:	4b1c      	ldr	r3, [pc, #112]	; (802d7d4 <HAL_COMP_MspInit+0x94>)
 802d764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802d768:	4a1a      	ldr	r2, [pc, #104]	; (802d7d4 <HAL_COMP_MspInit+0x94>)
 802d76a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802d76e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802d772:	4b18      	ldr	r3, [pc, #96]	; (802d7d4 <HAL_COMP_MspInit+0x94>)
 802d774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802d778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802d77c:	613b      	str	r3, [r7, #16]
 802d77e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 802d780:	4b14      	ldr	r3, [pc, #80]	; (802d7d4 <HAL_COMP_MspInit+0x94>)
 802d782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d786:	4a13      	ldr	r2, [pc, #76]	; (802d7d4 <HAL_COMP_MspInit+0x94>)
 802d788:	f043 0310 	orr.w	r3, r3, #16
 802d78c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802d790:	4b10      	ldr	r3, [pc, #64]	; (802d7d4 <HAL_COMP_MspInit+0x94>)
 802d792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d796:	f003 0310 	and.w	r3, r3, #16
 802d79a:	60fb      	str	r3, [r7, #12]
 802d79c:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 802d79e:	f44f 7300 	mov.w	r3, #512	; 0x200
 802d7a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802d7a4:	2303      	movs	r3, #3
 802d7a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802d7a8:	2300      	movs	r3, #0
 802d7aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802d7ac:	f107 0314 	add.w	r3, r7, #20
 802d7b0:	4619      	mov	r1, r3
 802d7b2:	4809      	ldr	r0, [pc, #36]	; (802d7d8 <HAL_COMP_MspInit+0x98>)
 802d7b4:	f004 ffe0 	bl	8032778 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 4, 0);
 802d7b8:	2200      	movs	r2, #0
 802d7ba:	2104      	movs	r1, #4
 802d7bc:	2089      	movs	r0, #137	; 0x89
 802d7be:	f001 ff88 	bl	802f6d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 802d7c2:	2089      	movs	r0, #137	; 0x89
 802d7c4:	f001 ff9f 	bl	802f706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 802d7c8:	bf00      	nop
 802d7ca:	3728      	adds	r7, #40	; 0x28
 802d7cc:	46bd      	mov	sp, r7
 802d7ce:	bd80      	pop	{r7, pc}
 802d7d0:	58003810 	.word	0x58003810
 802d7d4:	58024400 	.word	0x58024400
 802d7d8:	58021000 	.word	0x58021000

0802d7dc <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 802d7dc:	b580      	push	{r7, lr}
 802d7de:	b08a      	sub	sp, #40	; 0x28
 802d7e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 802d7e2:	1d3b      	adds	r3, r7, #4
 802d7e4:	2224      	movs	r2, #36	; 0x24
 802d7e6:	2100      	movs	r1, #0
 802d7e8:	4618      	mov	r0, r3
 802d7ea:	f012 fd7f 	bl	80402ec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 802d7ee:	4b12      	ldr	r3, [pc, #72]	; (802d838 <MX_DAC1_Init+0x5c>)
 802d7f0:	4a12      	ldr	r2, [pc, #72]	; (802d83c <MX_DAC1_Init+0x60>)
 802d7f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 802d7f4:	4810      	ldr	r0, [pc, #64]	; (802d838 <MX_DAC1_Init+0x5c>)
 802d7f6:	f001 ffa0 	bl	802f73a <HAL_DAC_Init>
 802d7fa:	4603      	mov	r3, r0
 802d7fc:	2b00      	cmp	r3, #0
 802d7fe:	d001      	beq.n	802d804 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 802d800:	f000 fbb2 	bl	802df68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 802d804:	2300      	movs	r3, #0
 802d806:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 802d808:	2300      	movs	r3, #0
 802d80a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 802d80c:	2302      	movs	r3, #2
 802d80e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 802d810:	2302      	movs	r3, #2
 802d812:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 802d814:	2300      	movs	r3, #0
 802d816:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 802d818:	1d3b      	adds	r3, r7, #4
 802d81a:	2200      	movs	r2, #0
 802d81c:	4619      	mov	r1, r3
 802d81e:	4806      	ldr	r0, [pc, #24]	; (802d838 <MX_DAC1_Init+0x5c>)
 802d820:	f002 f824 	bl	802f86c <HAL_DAC_ConfigChannel>
 802d824:	4603      	mov	r3, r0
 802d826:	2b00      	cmp	r3, #0
 802d828:	d001      	beq.n	802d82e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 802d82a:	f000 fb9d 	bl	802df68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 802d82e:	bf00      	nop
 802d830:	3728      	adds	r7, #40	; 0x28
 802d832:	46bd      	mov	sp, r7
 802d834:	bd80      	pop	{r7, pc}
 802d836:	bf00      	nop
 802d838:	24023920 	.word	0x24023920
 802d83c:	40007400 	.word	0x40007400

0802d840 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 802d840:	b480      	push	{r7}
 802d842:	b085      	sub	sp, #20
 802d844:	af00      	add	r7, sp, #0
 802d846:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 802d848:	687b      	ldr	r3, [r7, #4]
 802d84a:	681b      	ldr	r3, [r3, #0]
 802d84c:	4a0b      	ldr	r2, [pc, #44]	; (802d87c <HAL_DAC_MspInit+0x3c>)
 802d84e:	4293      	cmp	r3, r2
 802d850:	d10e      	bne.n	802d870 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 802d852:	4b0b      	ldr	r3, [pc, #44]	; (802d880 <HAL_DAC_MspInit+0x40>)
 802d854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802d858:	4a09      	ldr	r2, [pc, #36]	; (802d880 <HAL_DAC_MspInit+0x40>)
 802d85a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d85e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802d862:	4b07      	ldr	r3, [pc, #28]	; (802d880 <HAL_DAC_MspInit+0x40>)
 802d864:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802d868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802d86c:	60fb      	str	r3, [r7, #12]
 802d86e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 802d870:	bf00      	nop
 802d872:	3714      	adds	r7, #20
 802d874:	46bd      	mov	sp, r7
 802d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d87a:	4770      	bx	lr
 802d87c:	40007400 	.word	0x40007400
 802d880:	58024400 	.word	0x58024400

0802d884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 802d884:	b580      	push	{r7, lr}
 802d886:	b082      	sub	sp, #8
 802d888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 802d88a:	4b19      	ldr	r3, [pc, #100]	; (802d8f0 <MX_DMA_Init+0x6c>)
 802d88c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802d890:	4a17      	ldr	r2, [pc, #92]	; (802d8f0 <MX_DMA_Init+0x6c>)
 802d892:	f043 0301 	orr.w	r3, r3, #1
 802d896:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 802d89a:	4b15      	ldr	r3, [pc, #84]	; (802d8f0 <MX_DMA_Init+0x6c>)
 802d89c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802d8a0:	f003 0301 	and.w	r3, r3, #1
 802d8a4:	607b      	str	r3, [r7, #4]
 802d8a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 802d8a8:	2200      	movs	r2, #0
 802d8aa:	2100      	movs	r1, #0
 802d8ac:	200b      	movs	r0, #11
 802d8ae:	f001 ff10 	bl	802f6d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 802d8b2:	200b      	movs	r0, #11
 802d8b4:	f001 ff27 	bl	802f706 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 802d8b8:	2200      	movs	r2, #0
 802d8ba:	2100      	movs	r1, #0
 802d8bc:	200c      	movs	r0, #12
 802d8be:	f001 ff08 	bl	802f6d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 802d8c2:	200c      	movs	r0, #12
 802d8c4:	f001 ff1f 	bl	802f706 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 802d8c8:	2200      	movs	r2, #0
 802d8ca:	2100      	movs	r1, #0
 802d8cc:	200f      	movs	r0, #15
 802d8ce:	f001 ff00 	bl	802f6d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 802d8d2:	200f      	movs	r0, #15
 802d8d4:	f001 ff17 	bl	802f706 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 802d8d8:	2200      	movs	r2, #0
 802d8da:	2100      	movs	r1, #0
 802d8dc:	2010      	movs	r0, #16
 802d8de:	f001 fef8 	bl	802f6d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 802d8e2:	2010      	movs	r0, #16
 802d8e4:	f001 ff0f 	bl	802f706 <HAL_NVIC_EnableIRQ>

}
 802d8e8:	bf00      	nop
 802d8ea:	3708      	adds	r7, #8
 802d8ec:	46bd      	mov	sp, r7
 802d8ee:	bd80      	pop	{r7, pc}
 802d8f0:	58024400 	.word	0x58024400

0802d8f4 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 802d8f4:	b580      	push	{r7, lr}
 802d8f6:	b08a      	sub	sp, #40	; 0x28
 802d8f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802d8fa:	f107 0314 	add.w	r3, r7, #20
 802d8fe:	2200      	movs	r2, #0
 802d900:	601a      	str	r2, [r3, #0]
 802d902:	605a      	str	r2, [r3, #4]
 802d904:	609a      	str	r2, [r3, #8]
 802d906:	60da      	str	r2, [r3, #12]
 802d908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802d90a:	4b3b      	ldr	r3, [pc, #236]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d90c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d910:	4a39      	ldr	r2, [pc, #228]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d912:	f043 0304 	orr.w	r3, r3, #4
 802d916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802d91a:	4b37      	ldr	r3, [pc, #220]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d91c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d920:	f003 0304 	and.w	r3, r3, #4
 802d924:	613b      	str	r3, [r7, #16]
 802d926:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802d928:	4b33      	ldr	r3, [pc, #204]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d92a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d92e:	4a32      	ldr	r2, [pc, #200]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d930:	f043 0301 	orr.w	r3, r3, #1
 802d934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802d938:	4b2f      	ldr	r3, [pc, #188]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d93a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d93e:	f003 0301 	and.w	r3, r3, #1
 802d942:	60fb      	str	r3, [r7, #12]
 802d944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802d946:	4b2c      	ldr	r3, [pc, #176]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d94c:	4a2a      	ldr	r2, [pc, #168]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d94e:	f043 0310 	orr.w	r3, r3, #16
 802d952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802d956:	4b28      	ldr	r3, [pc, #160]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d95c:	f003 0310 	and.w	r3, r3, #16
 802d960:	60bb      	str	r3, [r7, #8]
 802d962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802d964:	4b24      	ldr	r3, [pc, #144]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d96a:	4a23      	ldr	r2, [pc, #140]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d96c:	f043 0302 	orr.w	r3, r3, #2
 802d970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802d974:	4b20      	ldr	r3, [pc, #128]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d97a:	f003 0302 	and.w	r3, r3, #2
 802d97e:	607b      	str	r3, [r7, #4]
 802d980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802d982:	4b1d      	ldr	r3, [pc, #116]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d988:	4a1b      	ldr	r2, [pc, #108]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d98a:	f043 0308 	orr.w	r3, r3, #8
 802d98e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802d992:	4b19      	ldr	r3, [pc, #100]	; (802d9f8 <MX_GPIO_Init+0x104>)
 802d994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d998:	f003 0308 	and.w	r3, r3, #8
 802d99c:	603b      	str	r3, [r7, #0]
 802d99e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 802d9a0:	2200      	movs	r2, #0
 802d9a2:	2101      	movs	r1, #1
 802d9a4:	4815      	ldr	r0, [pc, #84]	; (802d9fc <MX_GPIO_Init+0x108>)
 802d9a6:	f005 f897 	bl	8032ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 802d9aa:	2200      	movs	r2, #0
 802d9ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802d9b0:	4813      	ldr	r0, [pc, #76]	; (802da00 <MX_GPIO_Init+0x10c>)
 802d9b2:	f005 f891 	bl	8032ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 802d9b6:	2301      	movs	r3, #1
 802d9b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802d9ba:	2301      	movs	r3, #1
 802d9bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802d9be:	2302      	movs	r3, #2
 802d9c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802d9c2:	2303      	movs	r3, #3
 802d9c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 802d9c6:	f107 0314 	add.w	r3, r7, #20
 802d9ca:	4619      	mov	r1, r3
 802d9cc:	480b      	ldr	r0, [pc, #44]	; (802d9fc <MX_GPIO_Init+0x108>)
 802d9ce:	f004 fed3 	bl	8032778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 802d9d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802d9d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802d9d8:	2301      	movs	r3, #1
 802d9da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802d9dc:	2302      	movs	r3, #2
 802d9de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802d9e0:	2303      	movs	r3, #3
 802d9e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 802d9e4:	f107 0314 	add.w	r3, r7, #20
 802d9e8:	4619      	mov	r1, r3
 802d9ea:	4805      	ldr	r0, [pc, #20]	; (802da00 <MX_GPIO_Init+0x10c>)
 802d9ec:	f004 fec4 	bl	8032778 <HAL_GPIO_Init>

}
 802d9f0:	bf00      	nop
 802d9f2:	3728      	adds	r7, #40	; 0x28
 802d9f4:	46bd      	mov	sp, r7
 802d9f6:	bd80      	pop	{r7, pc}
 802d9f8:	58024400 	.word	0x58024400
 802d9fc:	58020800 	.word	0x58020800
 802da00:	58021000 	.word	0x58021000

0802da04 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 802da04:	b580      	push	{r7, lr}
 802da06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 802da08:	4b1b      	ldr	r3, [pc, #108]	; (802da78 <MX_I2C2_Init+0x74>)
 802da0a:	4a1c      	ldr	r2, [pc, #112]	; (802da7c <MX_I2C2_Init+0x78>)
 802da0c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 802da0e:	4b1a      	ldr	r3, [pc, #104]	; (802da78 <MX_I2C2_Init+0x74>)
 802da10:	4a1b      	ldr	r2, [pc, #108]	; (802da80 <MX_I2C2_Init+0x7c>)
 802da12:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 802da14:	4b18      	ldr	r3, [pc, #96]	; (802da78 <MX_I2C2_Init+0x74>)
 802da16:	2200      	movs	r2, #0
 802da18:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802da1a:	4b17      	ldr	r3, [pc, #92]	; (802da78 <MX_I2C2_Init+0x74>)
 802da1c:	2201      	movs	r2, #1
 802da1e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 802da20:	4b15      	ldr	r3, [pc, #84]	; (802da78 <MX_I2C2_Init+0x74>)
 802da22:	2200      	movs	r2, #0
 802da24:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 802da26:	4b14      	ldr	r3, [pc, #80]	; (802da78 <MX_I2C2_Init+0x74>)
 802da28:	2200      	movs	r2, #0
 802da2a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 802da2c:	4b12      	ldr	r3, [pc, #72]	; (802da78 <MX_I2C2_Init+0x74>)
 802da2e:	2200      	movs	r2, #0
 802da30:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802da32:	4b11      	ldr	r3, [pc, #68]	; (802da78 <MX_I2C2_Init+0x74>)
 802da34:	2200      	movs	r2, #0
 802da36:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802da38:	4b0f      	ldr	r3, [pc, #60]	; (802da78 <MX_I2C2_Init+0x74>)
 802da3a:	2200      	movs	r2, #0
 802da3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 802da3e:	480e      	ldr	r0, [pc, #56]	; (802da78 <MX_I2C2_Init+0x74>)
 802da40:	f005 f864 	bl	8032b0c <HAL_I2C_Init>
 802da44:	4603      	mov	r3, r0
 802da46:	2b00      	cmp	r3, #0
 802da48:	d001      	beq.n	802da4e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 802da4a:	f000 fa8d 	bl	802df68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 802da4e:	2100      	movs	r1, #0
 802da50:	4809      	ldr	r0, [pc, #36]	; (802da78 <MX_I2C2_Init+0x74>)
 802da52:	f005 ff70 	bl	8033936 <HAL_I2CEx_ConfigAnalogFilter>
 802da56:	4603      	mov	r3, r0
 802da58:	2b00      	cmp	r3, #0
 802da5a:	d001      	beq.n	802da60 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 802da5c:	f000 fa84 	bl	802df68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 802da60:	2100      	movs	r1, #0
 802da62:	4805      	ldr	r0, [pc, #20]	; (802da78 <MX_I2C2_Init+0x74>)
 802da64:	f005 ffb2 	bl	80339cc <HAL_I2CEx_ConfigDigitalFilter>
 802da68:	4603      	mov	r3, r0
 802da6a:	2b00      	cmp	r3, #0
 802da6c:	d001      	beq.n	802da72 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 802da6e:	f000 fa7b 	bl	802df68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 802da72:	bf00      	nop
 802da74:	bd80      	pop	{r7, pc}
 802da76:	bf00      	nop
 802da78:	24023934 	.word	0x24023934
 802da7c:	40005800 	.word	0x40005800
 802da80:	00b03fdb 	.word	0x00b03fdb

0802da84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 802da84:	b580      	push	{r7, lr}
 802da86:	b0b8      	sub	sp, #224	; 0xe0
 802da88:	af00      	add	r7, sp, #0
 802da8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802da8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802da90:	2200      	movs	r2, #0
 802da92:	601a      	str	r2, [r3, #0]
 802da94:	605a      	str	r2, [r3, #4]
 802da96:	609a      	str	r2, [r3, #8]
 802da98:	60da      	str	r2, [r3, #12]
 802da9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802da9c:	f107 0310 	add.w	r3, r7, #16
 802daa0:	22bc      	movs	r2, #188	; 0xbc
 802daa2:	2100      	movs	r1, #0
 802daa4:	4618      	mov	r0, r3
 802daa6:	f012 fc21 	bl	80402ec <memset>
  if(i2cHandle->Instance==I2C2)
 802daaa:	687b      	ldr	r3, [r7, #4]
 802daac:	681b      	ldr	r3, [r3, #0]
 802daae:	4a5a      	ldr	r2, [pc, #360]	; (802dc18 <HAL_I2C_MspInit+0x194>)
 802dab0:	4293      	cmp	r3, r2
 802dab2:	f040 80ad 	bne.w	802dc10 <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 802dab6:	2308      	movs	r3, #8
 802dab8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 802daba:	2300      	movs	r3, #0
 802dabc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802dac0:	f107 0310 	add.w	r3, r7, #16
 802dac4:	4618      	mov	r0, r3
 802dac6:	f008 faa7 	bl	8036018 <HAL_RCCEx_PeriphCLKConfig>
 802daca:	4603      	mov	r3, r0
 802dacc:	2b00      	cmp	r3, #0
 802dace:	d001      	beq.n	802dad4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 802dad0:	f000 fa4a 	bl	802df68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802dad4:	4b51      	ldr	r3, [pc, #324]	; (802dc1c <HAL_I2C_MspInit+0x198>)
 802dad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802dada:	4a50      	ldr	r2, [pc, #320]	; (802dc1c <HAL_I2C_MspInit+0x198>)
 802dadc:	f043 0302 	orr.w	r3, r3, #2
 802dae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802dae4:	4b4d      	ldr	r3, [pc, #308]	; (802dc1c <HAL_I2C_MspInit+0x198>)
 802dae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802daea:	f003 0302 	and.w	r3, r3, #2
 802daee:	60fb      	str	r3, [r7, #12]
 802daf0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802daf2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802daf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802dafa:	2312      	movs	r3, #18
 802dafc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802db00:	2300      	movs	r3, #0
 802db02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802db06:	2300      	movs	r3, #0
 802db08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 802db0c:	2304      	movs	r3, #4
 802db0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802db12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802db16:	4619      	mov	r1, r3
 802db18:	4841      	ldr	r0, [pc, #260]	; (802dc20 <HAL_I2C_MspInit+0x19c>)
 802db1a:	f004 fe2d 	bl	8032778 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 802db1e:	4b3f      	ldr	r3, [pc, #252]	; (802dc1c <HAL_I2C_MspInit+0x198>)
 802db20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802db24:	4a3d      	ldr	r2, [pc, #244]	; (802dc1c <HAL_I2C_MspInit+0x198>)
 802db26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802db2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802db2e:	4b3b      	ldr	r3, [pc, #236]	; (802dc1c <HAL_I2C_MspInit+0x198>)
 802db30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802db34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802db38:	60bb      	str	r3, [r7, #8]
 802db3a:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 802db3c:	4b39      	ldr	r3, [pc, #228]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db3e:	4a3a      	ldr	r2, [pc, #232]	; (802dc28 <HAL_I2C_MspInit+0x1a4>)
 802db40:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 802db42:	4b38      	ldr	r3, [pc, #224]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db44:	2223      	movs	r2, #35	; 0x23
 802db46:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802db48:	4b36      	ldr	r3, [pc, #216]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db4a:	2200      	movs	r2, #0
 802db4c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802db4e:	4b35      	ldr	r3, [pc, #212]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db50:	2200      	movs	r2, #0
 802db52:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 802db54:	4b33      	ldr	r3, [pc, #204]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802db5a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802db5c:	4b31      	ldr	r3, [pc, #196]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db5e:	2200      	movs	r2, #0
 802db60:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802db62:	4b30      	ldr	r3, [pc, #192]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db64:	2200      	movs	r2, #0
 802db66:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 802db68:	4b2e      	ldr	r3, [pc, #184]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db6a:	2200      	movs	r2, #0
 802db6c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 802db6e:	4b2d      	ldr	r3, [pc, #180]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db70:	2200      	movs	r2, #0
 802db72:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802db74:	4b2b      	ldr	r3, [pc, #172]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db76:	2200      	movs	r2, #0
 802db78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 802db7a:	482a      	ldr	r0, [pc, #168]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db7c:	f001 ffa6 	bl	802facc <HAL_DMA_Init>
 802db80:	4603      	mov	r3, r0
 802db82:	2b00      	cmp	r3, #0
 802db84:	d001      	beq.n	802db8a <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 802db86:	f000 f9ef 	bl	802df68 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 802db8a:	687b      	ldr	r3, [r7, #4]
 802db8c:	4a25      	ldr	r2, [pc, #148]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db8e:	63da      	str	r2, [r3, #60]	; 0x3c
 802db90:	4a24      	ldr	r2, [pc, #144]	; (802dc24 <HAL_I2C_MspInit+0x1a0>)
 802db92:	687b      	ldr	r3, [r7, #4]
 802db94:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 802db96:	4b25      	ldr	r3, [pc, #148]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802db98:	4a25      	ldr	r2, [pc, #148]	; (802dc30 <HAL_I2C_MspInit+0x1ac>)
 802db9a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 802db9c:	4b23      	ldr	r3, [pc, #140]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802db9e:	2224      	movs	r2, #36	; 0x24
 802dba0:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802dba2:	4b22      	ldr	r3, [pc, #136]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802dba4:	2240      	movs	r2, #64	; 0x40
 802dba6:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802dba8:	4b20      	ldr	r3, [pc, #128]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802dbaa:	2200      	movs	r2, #0
 802dbac:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 802dbae:	4b1f      	ldr	r3, [pc, #124]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802dbb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802dbb4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802dbb6:	4b1d      	ldr	r3, [pc, #116]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802dbb8:	2200      	movs	r2, #0
 802dbba:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802dbbc:	4b1b      	ldr	r3, [pc, #108]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802dbbe:	2200      	movs	r2, #0
 802dbc0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 802dbc2:	4b1a      	ldr	r3, [pc, #104]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802dbc4:	2200      	movs	r2, #0
 802dbc6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 802dbc8:	4b18      	ldr	r3, [pc, #96]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802dbca:	2200      	movs	r2, #0
 802dbcc:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802dbce:	4b17      	ldr	r3, [pc, #92]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802dbd0:	2200      	movs	r2, #0
 802dbd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 802dbd4:	4815      	ldr	r0, [pc, #84]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802dbd6:	f001 ff79 	bl	802facc <HAL_DMA_Init>
 802dbda:	4603      	mov	r3, r0
 802dbdc:	2b00      	cmp	r3, #0
 802dbde:	d001      	beq.n	802dbe4 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 802dbe0:	f000 f9c2 	bl	802df68 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 802dbe4:	687b      	ldr	r3, [r7, #4]
 802dbe6:	4a11      	ldr	r2, [pc, #68]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802dbe8:	639a      	str	r2, [r3, #56]	; 0x38
 802dbea:	4a10      	ldr	r2, [pc, #64]	; (802dc2c <HAL_I2C_MspInit+0x1a8>)
 802dbec:	687b      	ldr	r3, [r7, #4]
 802dbee:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 802dbf0:	2200      	movs	r2, #0
 802dbf2:	2100      	movs	r1, #0
 802dbf4:	2021      	movs	r0, #33	; 0x21
 802dbf6:	f001 fd6c 	bl	802f6d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 802dbfa:	2021      	movs	r0, #33	; 0x21
 802dbfc:	f001 fd83 	bl	802f706 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 802dc00:	2200      	movs	r2, #0
 802dc02:	2100      	movs	r1, #0
 802dc04:	2022      	movs	r0, #34	; 0x22
 802dc06:	f001 fd64 	bl	802f6d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 802dc0a:	2022      	movs	r0, #34	; 0x22
 802dc0c:	f001 fd7b 	bl	802f706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 802dc10:	bf00      	nop
 802dc12:	37e0      	adds	r7, #224	; 0xe0
 802dc14:	46bd      	mov	sp, r7
 802dc16:	bd80      	pop	{r7, pc}
 802dc18:	40005800 	.word	0x40005800
 802dc1c:	58024400 	.word	0x58024400
 802dc20:	58020400 	.word	0x58020400
 802dc24:	24023980 	.word	0x24023980
 802dc28:	40020010 	.word	0x40020010
 802dc2c:	240239f8 	.word	0x240239f8
 802dc30:	40020028 	.word	0x40020028

0802dc34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802dc34:	b5b0      	push	{r4, r5, r7, lr}
 802dc36:	b090      	sub	sp, #64	; 0x40
 802dc38:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (FLASH_BASE | 0x20000);
 802dc3a:	4b36      	ldr	r3, [pc, #216]	; (802dd14 <main+0xe0>)
 802dc3c:	4a36      	ldr	r2, [pc, #216]	; (802dd18 <main+0xe4>)
 802dc3e:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802dc40:	f001 f9c2 	bl	802efc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802dc44:	f000 f87a 	bl	802dd3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802dc48:	f7ff fe54 	bl	802d8f4 <MX_GPIO_Init>
  MX_DMA_Init();
 802dc4c:	f7ff fe1a 	bl	802d884 <MX_DMA_Init>
  MX_I2C2_Init();
 802dc50:	f7ff fed8 	bl	802da04 <MX_I2C2_Init>
  MX_SPI1_Init();
 802dc54:	f000 f98e 	bl	802df74 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 802dc58:	f011 fd6a 	bl	803f730 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 802dc5c:	f000 ff3c 	bl	802ead8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 802dc60:	f000 fe44 	bl	802e8ec <MX_UART4_Init>
  MX_UART7_Init();
 802dc64:	f000 fe94 	bl	802e990 <MX_UART7_Init>
  MX_USART3_UART_Init();
 802dc68:	f000 ff82 	bl	802eb70 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 802dc6c:	f000 fd3e 	bl	802e6ec <MX_TIM3_Init>
  MX_TIM2_Init();
 802dc70:	f000 fcee 	bl	802e650 <MX_TIM2_Init>
  MX_TIM4_Init();
 802dc74:	f000 fd88 	bl	802e788 <MX_TIM4_Init>
  MX_COMP2_Init();
 802dc78:	f7ff fd36 	bl	802d6e8 <MX_COMP2_Init>
  MX_DAC1_Init();
 802dc7c:	f7ff fdae 	bl	802d7dc <MX_DAC1_Init>
  MX_UART8_Init();
 802dc80:	f000 fed4 	bl	802ea2c <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 802dc84:	2100      	movs	r1, #0
 802dc86:	4825      	ldr	r0, [pc, #148]	; (802dd1c <main+0xe8>)
 802dc88:	f001 fd79 	bl	802f77e <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 802dc8c:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 802dc90:	2200      	movs	r2, #0
 802dc92:	2100      	movs	r1, #0
 802dc94:	4821      	ldr	r0, [pc, #132]	; (802dd1c <main+0xe8>)
 802dc96:	f001 fdc4 	bl	802f822 <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 802dc9a:	4821      	ldr	r0, [pc, #132]	; (802dd20 <main+0xec>)
 802dc9c:	f00a fea8 	bl	80389f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 802dca0:	4820      	ldr	r0, [pc, #128]	; (802dd24 <main+0xf0>)
 802dca2:	f00a fea5 	bl	80389f0 <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 802dca6:	4820      	ldr	r0, [pc, #128]	; (802dd28 <main+0xf4>)
 802dca8:	f001 fb7a 	bl	802f3a0 <HAL_COMP_Start>

	MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 802dcac:	4b1f      	ldr	r3, [pc, #124]	; (802dd2c <main+0xf8>)
 802dcae:	603b      	str	r3, [r7, #0]
	config.HeadStreamUart = &huart4;
 802dcb0:	4b1f      	ldr	r3, [pc, #124]	; (802dd30 <main+0xfc>)
 802dcb2:	607b      	str	r3, [r7, #4]

	config.HeadTimeout = 100;
 802dcb4:	2364      	movs	r3, #100	; 0x64
 802dcb6:	60bb      	str	r3, [r7, #8]

	config.BodyUart = &huart8;
 802dcb8:	4b1e      	ldr	r3, [pc, #120]	; (802dd34 <main+0x100>)
 802dcba:	60fb      	str	r3, [r7, #12]
	config.BodyTimeout = 10;
 802dcbc:	230a      	movs	r3, #10
 802dcbe:	613b      	str	r3, [r7, #16]
	config.BodyPeriod = 20;
 802dcc0:	2314      	movs	r3, #20
 802dcc2:	753b      	strb	r3, [r7, #20]

	config.IMUSpi = &hspi1;
 802dcc4:	4b1c      	ldr	r3, [pc, #112]	; (802dd38 <main+0x104>)
 802dcc6:	61bb      	str	r3, [r7, #24]

	config.VersionMajor = 0;
 802dcc8:	2300      	movs	r3, #0
 802dcca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	config.VersionMinor = 2;
 802dcce:	2302      	movs	r3, #2
 802dcd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	config.IMUStrobeOffset = 0;
 802dcd4:	2300      	movs	r3, #0
 802dcd6:	623b      	str	r3, [r7, #32]
	config.BodyStrobeOffset = 0;
 802dcd8:	2300      	movs	r3, #0
 802dcda:	61fb      	str	r3, [r7, #28]

	config.FrameContainerCapacity = 300;
 802dcdc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 802dce0:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (MotherboardInit(config))
 802dce2:	466d      	mov	r5, sp
 802dce4:	f107 0410 	add.w	r4, r7, #16
 802dce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802dcea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802dcec:	e894 0003 	ldmia.w	r4, {r0, r1}
 802dcf0:	e885 0003 	stmia.w	r5, {r0, r1}
 802dcf4:	463b      	mov	r3, r7
 802dcf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802dcf8:	f7f5 f9ca 	bl	8023090 <MotherboardInit>
 802dcfc:	4603      	mov	r3, r0
 802dcfe:	2b00      	cmp	r3, #0
 802dd00:	d001      	beq.n	802dd06 <main+0xd2>
		return 1;
 802dd02:	2301      	movs	r3, #1
 802dd04:	e002      	b.n	802dd0c <main+0xd8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 802dd06:	f7f5 fa17 	bl	8023138 <MotherboardTick>
 802dd0a:	e7fc      	b.n	802dd06 <main+0xd2>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 802dd0c:	4618      	mov	r0, r3
 802dd0e:	3728      	adds	r7, #40	; 0x28
 802dd10:	46bd      	mov	sp, r7
 802dd12:	bdb0      	pop	{r4, r5, r7, pc}
 802dd14:	e000ed00 	.word	0xe000ed00
 802dd18:	08020000 	.word	0x08020000
 802dd1c:	24023920 	.word	0x24023920
 802dd20:	24023c38 	.word	0x24023c38
 802dd24:	24023bec 	.word	0x24023bec
 802dd28:	240238f4 	.word	0x240238f4
 802dd2c:	24023f10 	.word	0x24023f10
 802dd30:	24023cd0 	.word	0x24023cd0
 802dd34:	24023df0 	.word	0x24023df0
 802dd38:	24023a70 	.word	0x24023a70

0802dd3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802dd3c:	b580      	push	{r7, lr}
 802dd3e:	b09e      	sub	sp, #120	; 0x78
 802dd40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802dd42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802dd46:	224c      	movs	r2, #76	; 0x4c
 802dd48:	2100      	movs	r1, #0
 802dd4a:	4618      	mov	r0, r3
 802dd4c:	f012 face 	bl	80402ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802dd50:	f107 030c 	add.w	r3, r7, #12
 802dd54:	2220      	movs	r2, #32
 802dd56:	2100      	movs	r1, #0
 802dd58:	4618      	mov	r0, r3
 802dd5a:	f012 fac7 	bl	80402ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 802dd5e:	2002      	movs	r0, #2
 802dd60:	f007 f956 	bl	8035010 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802dd64:	2300      	movs	r3, #0
 802dd66:	60bb      	str	r3, [r7, #8]
 802dd68:	4b4d      	ldr	r3, [pc, #308]	; (802dea0 <SystemClock_Config+0x164>)
 802dd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dd6c:	4a4c      	ldr	r2, [pc, #304]	; (802dea0 <SystemClock_Config+0x164>)
 802dd6e:	f023 0301 	bic.w	r3, r3, #1
 802dd72:	62d3      	str	r3, [r2, #44]	; 0x2c
 802dd74:	4b4a      	ldr	r3, [pc, #296]	; (802dea0 <SystemClock_Config+0x164>)
 802dd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dd78:	f003 0301 	and.w	r3, r3, #1
 802dd7c:	60bb      	str	r3, [r7, #8]
 802dd7e:	4b49      	ldr	r3, [pc, #292]	; (802dea4 <SystemClock_Config+0x168>)
 802dd80:	699b      	ldr	r3, [r3, #24]
 802dd82:	4a48      	ldr	r2, [pc, #288]	; (802dea4 <SystemClock_Config+0x168>)
 802dd84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802dd88:	6193      	str	r3, [r2, #24]
 802dd8a:	4b46      	ldr	r3, [pc, #280]	; (802dea4 <SystemClock_Config+0x168>)
 802dd8c:	699b      	ldr	r3, [r3, #24]
 802dd8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802dd92:	60bb      	str	r3, [r7, #8]
 802dd94:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 802dd96:	bf00      	nop
 802dd98:	4b42      	ldr	r3, [pc, #264]	; (802dea4 <SystemClock_Config+0x168>)
 802dd9a:	699b      	ldr	r3, [r3, #24]
 802dd9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802dda0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802dda4:	d1f8      	bne.n	802dd98 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802dda6:	4b40      	ldr	r3, [pc, #256]	; (802dea8 <SystemClock_Config+0x16c>)
 802dda8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802ddac:	4a3e      	ldr	r2, [pc, #248]	; (802dea8 <SystemClock_Config+0x16c>)
 802ddae:	f043 0302 	orr.w	r3, r3, #2
 802ddb2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802ddb6:	4b3c      	ldr	r3, [pc, #240]	; (802dea8 <SystemClock_Config+0x16c>)
 802ddb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802ddbc:	f003 0302 	and.w	r3, r3, #2
 802ddc0:	607b      	str	r3, [r7, #4]
 802ddc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 802ddc4:	2300      	movs	r3, #0
 802ddc6:	603b      	str	r3, [r7, #0]
 802ddc8:	4b36      	ldr	r3, [pc, #216]	; (802dea4 <SystemClock_Config+0x168>)
 802ddca:	699b      	ldr	r3, [r3, #24]
 802ddcc:	4a35      	ldr	r2, [pc, #212]	; (802dea4 <SystemClock_Config+0x168>)
 802ddce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802ddd2:	6193      	str	r3, [r2, #24]
 802ddd4:	4b33      	ldr	r3, [pc, #204]	; (802dea4 <SystemClock_Config+0x168>)
 802ddd6:	699b      	ldr	r3, [r3, #24]
 802ddd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802dddc:	603b      	str	r3, [r7, #0]
 802ddde:	4b30      	ldr	r3, [pc, #192]	; (802dea0 <SystemClock_Config+0x164>)
 802dde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dde2:	4a2f      	ldr	r2, [pc, #188]	; (802dea0 <SystemClock_Config+0x164>)
 802dde4:	f043 0301 	orr.w	r3, r3, #1
 802dde8:	62d3      	str	r3, [r2, #44]	; 0x2c
 802ddea:	4b2d      	ldr	r3, [pc, #180]	; (802dea0 <SystemClock_Config+0x164>)
 802ddec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ddee:	f003 0301 	and.w	r3, r3, #1
 802ddf2:	603b      	str	r3, [r7, #0]
 802ddf4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 802ddf6:	bf00      	nop
 802ddf8:	4b2a      	ldr	r3, [pc, #168]	; (802dea4 <SystemClock_Config+0x168>)
 802ddfa:	699b      	ldr	r3, [r3, #24]
 802ddfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802de00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802de04:	d1f8      	bne.n	802ddf8 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 802de06:	4b28      	ldr	r3, [pc, #160]	; (802dea8 <SystemClock_Config+0x16c>)
 802de08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802de0a:	4a27      	ldr	r2, [pc, #156]	; (802dea8 <SystemClock_Config+0x16c>)
 802de0c:	f023 0303 	bic.w	r3, r3, #3
 802de10:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 802de12:	2322      	movs	r3, #34	; 0x22
 802de14:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 802de16:	2301      	movs	r3, #1
 802de18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 802de1a:	2340      	movs	r3, #64	; 0x40
 802de1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 802de1e:	2301      	movs	r3, #1
 802de20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802de22:	2302      	movs	r3, #2
 802de24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 802de26:	2300      	movs	r3, #0
 802de28:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 802de2a:	2304      	movs	r3, #4
 802de2c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 802de2e:	233c      	movs	r3, #60	; 0x3c
 802de30:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 802de32:	2302      	movs	r3, #2
 802de34:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 802de36:	2305      	movs	r3, #5
 802de38:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 802de3a:	2302      	movs	r3, #2
 802de3c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 802de3e:	230c      	movs	r3, #12
 802de40:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 802de42:	2300      	movs	r3, #0
 802de44:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 802de46:	2300      	movs	r3, #0
 802de48:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802de4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802de4e:	4618      	mov	r0, r3
 802de50:	f007 f928 	bl	80350a4 <HAL_RCC_OscConfig>
 802de54:	4603      	mov	r3, r0
 802de56:	2b00      	cmp	r3, #0
 802de58:	d001      	beq.n	802de5e <SystemClock_Config+0x122>
  {
    Error_Handler();
 802de5a:	f000 f885 	bl	802df68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802de5e:	233f      	movs	r3, #63	; 0x3f
 802de60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802de62:	2303      	movs	r3, #3
 802de64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 802de66:	2300      	movs	r3, #0
 802de68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 802de6a:	2308      	movs	r3, #8
 802de6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 802de6e:	2340      	movs	r3, #64	; 0x40
 802de70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 802de72:	2340      	movs	r3, #64	; 0x40
 802de74:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 802de76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802de7a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 802de7c:	2340      	movs	r3, #64	; 0x40
 802de7e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 802de80:	f107 030c 	add.w	r3, r7, #12
 802de84:	2104      	movs	r1, #4
 802de86:	4618      	mov	r0, r3
 802de88:	f007 fd3a 	bl	8035900 <HAL_RCC_ClockConfig>
 802de8c:	4603      	mov	r3, r0
 802de8e:	2b00      	cmp	r3, #0
 802de90:	d001      	beq.n	802de96 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 802de92:	f000 f869 	bl	802df68 <Error_Handler>
  }
}
 802de96:	bf00      	nop
 802de98:	3778      	adds	r7, #120	; 0x78
 802de9a:	46bd      	mov	sp, r7
 802de9c:	bd80      	pop	{r7, pc}
 802de9e:	bf00      	nop
 802dea0:	58000400 	.word	0x58000400
 802dea4:	58024800 	.word	0x58024800
 802dea8:	58024400 	.word	0x58024400

0802deac <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 802deac:	b580      	push	{r7, lr}
 802deae:	b082      	sub	sp, #8
 802deb0:	af00      	add	r7, sp, #0
 802deb2:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2)
 802deb4:	687b      	ldr	r3, [r7, #4]
 802deb6:	681b      	ldr	r3, [r3, #0]
 802deb8:	4a04      	ldr	r2, [pc, #16]	; (802decc <HAL_COMP_TriggerCallback+0x20>)
 802deba:	4293      	cmp	r3, r2
 802debc:	d101      	bne.n	802dec2 <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 802debe:	f7f5 fa5d 	bl	802337c <MotherboardOnStrobe>
}
 802dec2:	bf00      	nop
 802dec4:	3708      	adds	r7, #8
 802dec6:	46bd      	mov	sp, r7
 802dec8:	bd80      	pop	{r7, pc}
 802deca:	bf00      	nop
 802decc:	58003810 	.word	0x58003810

0802ded0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 802ded0:	b580      	push	{r7, lr}
 802ded2:	b082      	sub	sp, #8
 802ded4:	af00      	add	r7, sp, #0
 802ded6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 802ded8:	687b      	ldr	r3, [r7, #4]
 802deda:	681b      	ldr	r3, [r3, #0]
 802dedc:	4a07      	ldr	r2, [pc, #28]	; (802defc <HAL_UART_RxCpltCallback+0x2c>)
 802dede:	4293      	cmp	r3, r2
 802dee0:	d101      	bne.n	802dee6 <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadRecieveComplete();
 802dee2:	f7f5 fa6b 	bl	80233bc <MotherboardOnHeadRecieveComplete>
	if (huart->Instance == UART8)
 802dee6:	687b      	ldr	r3, [r7, #4]
 802dee8:	681b      	ldr	r3, [r3, #0]
 802deea:	4a05      	ldr	r2, [pc, #20]	; (802df00 <HAL_UART_RxCpltCallback+0x30>)
 802deec:	4293      	cmp	r3, r2
 802deee:	d101      	bne.n	802def4 <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnBodyRecieveComplete();
 802def0:	f7f5 fa5a 	bl	80233a8 <MotherboardOnBodyRecieveComplete>
}
 802def4:	bf00      	nop
 802def6:	3708      	adds	r7, #8
 802def8:	46bd      	mov	sp, r7
 802defa:	bd80      	pop	{r7, pc}
 802defc:	40004800 	.word	0x40004800
 802df00:	40007c00 	.word	0x40007c00

0802df04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 802df04:	b580      	push	{r7, lr}
 802df06:	b082      	sub	sp, #8
 802df08:	af00      	add	r7, sp, #0
 802df0a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 802df0c:	687b      	ldr	r3, [r7, #4]
 802df0e:	681b      	ldr	r3, [r3, #0]
 802df10:	4a07      	ldr	r2, [pc, #28]	; (802df30 <HAL_UART_TxCpltCallback+0x2c>)
 802df12:	4293      	cmp	r3, r2
 802df14:	d101      	bne.n	802df1a <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadTransmitComplete();
 802df16:	f7f5 fa5b 	bl	80233d0 <MotherboardOnHeadTransmitComplete>
	if (huart->Instance == UART8)
 802df1a:	687b      	ldr	r3, [r7, #4]
 802df1c:	681b      	ldr	r3, [r3, #0]
 802df1e:	4a05      	ldr	r2, [pc, #20]	; (802df34 <HAL_UART_TxCpltCallback+0x30>)
 802df20:	4293      	cmp	r3, r2
 802df22:	d101      	bne.n	802df28 <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnBodyTransmitComplete();
 802df24:	f7f5 fa5e 	bl	80233e4 <MotherboardOnBodyTransmitComplete>
}
 802df28:	bf00      	nop
 802df2a:	3708      	adds	r7, #8
 802df2c:	46bd      	mov	sp, r7
 802df2e:	bd80      	pop	{r7, pc}
 802df30:	40004800 	.word	0x40004800
 802df34:	40007c00 	.word	0x40007c00

0802df38 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 802df38:	b580      	push	{r7, lr}
 802df3a:	b082      	sub	sp, #8
 802df3c:	af00      	add	r7, sp, #0
 802df3e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 802df40:	687b      	ldr	r3, [r7, #4]
 802df42:	681b      	ldr	r3, [r3, #0]
 802df44:	4a07      	ldr	r2, [pc, #28]	; (802df64 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 802df46:	4293      	cmp	r3, r2
 802df48:	d101      	bne.n	802df4e <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 802df4a:	f7f5 fa55 	bl	80233f8 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 802df4e:	687b      	ldr	r3, [r7, #4]
 802df50:	681b      	ldr	r3, [r3, #0]
 802df52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802df56:	d101      	bne.n	802df5c <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 802df58:	f7f5 fa58 	bl	802340c <MotherboardOnImuTimerTick>
}
 802df5c:	bf00      	nop
 802df5e:	3708      	adds	r7, #8
 802df60:	46bd      	mov	sp, r7
 802df62:	bd80      	pop	{r7, pc}
 802df64:	40000400 	.word	0x40000400

0802df68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802df68:	b480      	push	{r7}
 802df6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 802df6c:	b672      	cpsid	i
}
 802df6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 802df70:	e7fe      	b.n	802df70 <Error_Handler+0x8>
	...

0802df74 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 802df74:	b580      	push	{r7, lr}
 802df76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 802df78:	4b28      	ldr	r3, [pc, #160]	; (802e01c <MX_SPI1_Init+0xa8>)
 802df7a:	4a29      	ldr	r2, [pc, #164]	; (802e020 <MX_SPI1_Init+0xac>)
 802df7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 802df7e:	4b27      	ldr	r3, [pc, #156]	; (802e01c <MX_SPI1_Init+0xa8>)
 802df80:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 802df84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 802df86:	4b25      	ldr	r3, [pc, #148]	; (802e01c <MX_SPI1_Init+0xa8>)
 802df88:	2200      	movs	r2, #0
 802df8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 802df8c:	4b23      	ldr	r3, [pc, #140]	; (802e01c <MX_SPI1_Init+0xa8>)
 802df8e:	2207      	movs	r2, #7
 802df90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 802df92:	4b22      	ldr	r3, [pc, #136]	; (802e01c <MX_SPI1_Init+0xa8>)
 802df94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802df98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 802df9a:	4b20      	ldr	r3, [pc, #128]	; (802e01c <MX_SPI1_Init+0xa8>)
 802df9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802dfa0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 802dfa2:	4b1e      	ldr	r3, [pc, #120]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dfa4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 802dfa8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 802dfaa:	4b1c      	ldr	r3, [pc, #112]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dfac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802dfb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802dfb2:	4b1a      	ldr	r3, [pc, #104]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dfb4:	2200      	movs	r2, #0
 802dfb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 802dfb8:	4b18      	ldr	r3, [pc, #96]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dfba:	2200      	movs	r2, #0
 802dfbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802dfbe:	4b17      	ldr	r3, [pc, #92]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dfc0:	2200      	movs	r2, #0
 802dfc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 802dfc4:	4b15      	ldr	r3, [pc, #84]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dfc6:	2200      	movs	r2, #0
 802dfc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 802dfca:	4b14      	ldr	r3, [pc, #80]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dfcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802dfd0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 802dfd2:	4b12      	ldr	r3, [pc, #72]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dfd4:	2200      	movs	r2, #0
 802dfd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 802dfd8:	4b10      	ldr	r3, [pc, #64]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dfda:	2200      	movs	r2, #0
 802dfdc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 802dfde:	4b0f      	ldr	r3, [pc, #60]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dfe0:	2200      	movs	r2, #0
 802dfe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 802dfe4:	4b0d      	ldr	r3, [pc, #52]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dfe6:	2200      	movs	r2, #0
 802dfe8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 802dfea:	4b0c      	ldr	r3, [pc, #48]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dfec:	2200      	movs	r2, #0
 802dfee:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 802dff0:	4b0a      	ldr	r3, [pc, #40]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dff2:	2200      	movs	r2, #0
 802dff4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 802dff6:	4b09      	ldr	r3, [pc, #36]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dff8:	2200      	movs	r2, #0
 802dffa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 802dffc:	4b07      	ldr	r3, [pc, #28]	; (802e01c <MX_SPI1_Init+0xa8>)
 802dffe:	2200      	movs	r2, #0
 802e000:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 802e002:	4b06      	ldr	r3, [pc, #24]	; (802e01c <MX_SPI1_Init+0xa8>)
 802e004:	2200      	movs	r2, #0
 802e006:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 802e008:	4804      	ldr	r0, [pc, #16]	; (802e01c <MX_SPI1_Init+0xa8>)
 802e00a:	f009 fb6d 	bl	80376e8 <HAL_SPI_Init>
 802e00e:	4603      	mov	r3, r0
 802e010:	2b00      	cmp	r3, #0
 802e012:	d001      	beq.n	802e018 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 802e014:	f7ff ffa8 	bl	802df68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 802e018:	bf00      	nop
 802e01a:	bd80      	pop	{r7, pc}
 802e01c:	24023a70 	.word	0x24023a70
 802e020:	40013000 	.word	0x40013000

0802e024 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 802e024:	b580      	push	{r7, lr}
 802e026:	b0b8      	sub	sp, #224	; 0xe0
 802e028:	af00      	add	r7, sp, #0
 802e02a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802e02c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802e030:	2200      	movs	r2, #0
 802e032:	601a      	str	r2, [r3, #0]
 802e034:	605a      	str	r2, [r3, #4]
 802e036:	609a      	str	r2, [r3, #8]
 802e038:	60da      	str	r2, [r3, #12]
 802e03a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802e03c:	f107 0310 	add.w	r3, r7, #16
 802e040:	22bc      	movs	r2, #188	; 0xbc
 802e042:	2100      	movs	r1, #0
 802e044:	4618      	mov	r0, r3
 802e046:	f012 f951 	bl	80402ec <memset>
  if(spiHandle->Instance==SPI1)
 802e04a:	687b      	ldr	r3, [r7, #4]
 802e04c:	681b      	ldr	r3, [r3, #0]
 802e04e:	4a60      	ldr	r2, [pc, #384]	; (802e1d0 <HAL_SPI_MspInit+0x1ac>)
 802e050:	4293      	cmp	r3, r2
 802e052:	f040 80b8 	bne.w	802e1c6 <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 802e056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802e05a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 802e05c:	2320      	movs	r3, #32
 802e05e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 802e060:	2381      	movs	r3, #129	; 0x81
 802e062:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 802e064:	2302      	movs	r3, #2
 802e066:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 802e068:	2302      	movs	r3, #2
 802e06a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 802e06c:	2302      	movs	r3, #2
 802e06e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 802e070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802e074:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 802e076:	2300      	movs	r3, #0
 802e078:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 802e07a:	2300      	movs	r3, #0
 802e07c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 802e07e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802e082:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802e084:	f107 0310 	add.w	r3, r7, #16
 802e088:	4618      	mov	r0, r3
 802e08a:	f007 ffc5 	bl	8036018 <HAL_RCCEx_PeriphCLKConfig>
 802e08e:	4603      	mov	r3, r0
 802e090:	2b00      	cmp	r3, #0
 802e092:	d001      	beq.n	802e098 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 802e094:	f7ff ff68 	bl	802df68 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 802e098:	4b4e      	ldr	r3, [pc, #312]	; (802e1d4 <HAL_SPI_MspInit+0x1b0>)
 802e09a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802e09e:	4a4d      	ldr	r2, [pc, #308]	; (802e1d4 <HAL_SPI_MspInit+0x1b0>)
 802e0a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802e0a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 802e0a8:	4b4a      	ldr	r3, [pc, #296]	; (802e1d4 <HAL_SPI_MspInit+0x1b0>)
 802e0aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802e0ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802e0b2:	60fb      	str	r3, [r7, #12]
 802e0b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802e0b6:	4b47      	ldr	r3, [pc, #284]	; (802e1d4 <HAL_SPI_MspInit+0x1b0>)
 802e0b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802e0bc:	4a45      	ldr	r2, [pc, #276]	; (802e1d4 <HAL_SPI_MspInit+0x1b0>)
 802e0be:	f043 0301 	orr.w	r3, r3, #1
 802e0c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802e0c6:	4b43      	ldr	r3, [pc, #268]	; (802e1d4 <HAL_SPI_MspInit+0x1b0>)
 802e0c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802e0cc:	f003 0301 	and.w	r3, r3, #1
 802e0d0:	60bb      	str	r3, [r7, #8]
 802e0d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 802e0d4:	23e0      	movs	r3, #224	; 0xe0
 802e0d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802e0da:	2302      	movs	r3, #2
 802e0dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802e0e0:	2300      	movs	r3, #0
 802e0e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802e0e6:	2300      	movs	r3, #0
 802e0e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802e0ec:	2305      	movs	r3, #5
 802e0ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802e0f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802e0f6:	4619      	mov	r1, r3
 802e0f8:	4837      	ldr	r0, [pc, #220]	; (802e1d8 <HAL_SPI_MspInit+0x1b4>)
 802e0fa:	f004 fb3d 	bl	8032778 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 802e0fe:	4b37      	ldr	r3, [pc, #220]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e100:	4a37      	ldr	r2, [pc, #220]	; (802e1e0 <HAL_SPI_MspInit+0x1bc>)
 802e102:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 802e104:	4b35      	ldr	r3, [pc, #212]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e106:	2226      	movs	r2, #38	; 0x26
 802e108:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802e10a:	4b34      	ldr	r3, [pc, #208]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e10c:	2240      	movs	r2, #64	; 0x40
 802e10e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802e110:	4b32      	ldr	r3, [pc, #200]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e112:	2200      	movs	r2, #0
 802e114:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 802e116:	4b31      	ldr	r3, [pc, #196]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802e11c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802e11e:	4b2f      	ldr	r3, [pc, #188]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e120:	2200      	movs	r2, #0
 802e122:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802e124:	4b2d      	ldr	r3, [pc, #180]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e126:	2200      	movs	r2, #0
 802e128:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 802e12a:	4b2c      	ldr	r3, [pc, #176]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e12c:	2200      	movs	r2, #0
 802e12e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 802e130:	4b2a      	ldr	r3, [pc, #168]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e132:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802e136:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802e138:	4b28      	ldr	r3, [pc, #160]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e13a:	2200      	movs	r2, #0
 802e13c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 802e13e:	4827      	ldr	r0, [pc, #156]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e140:	f001 fcc4 	bl	802facc <HAL_DMA_Init>
 802e144:	4603      	mov	r3, r0
 802e146:	2b00      	cmp	r3, #0
 802e148:	d001      	beq.n	802e14e <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 802e14a:	f7ff ff0d 	bl	802df68 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 802e14e:	687b      	ldr	r3, [r7, #4]
 802e150:	4a22      	ldr	r2, [pc, #136]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e152:	679a      	str	r2, [r3, #120]	; 0x78
 802e154:	4a21      	ldr	r2, [pc, #132]	; (802e1dc <HAL_SPI_MspInit+0x1b8>)
 802e156:	687b      	ldr	r3, [r7, #4]
 802e158:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 802e15a:	4b22      	ldr	r3, [pc, #136]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e15c:	4a22      	ldr	r2, [pc, #136]	; (802e1e8 <HAL_SPI_MspInit+0x1c4>)
 802e15e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 802e160:	4b20      	ldr	r3, [pc, #128]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e162:	2225      	movs	r2, #37	; 0x25
 802e164:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802e166:	4b1f      	ldr	r3, [pc, #124]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e168:	2200      	movs	r2, #0
 802e16a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802e16c:	4b1d      	ldr	r3, [pc, #116]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e16e:	2200      	movs	r2, #0
 802e170:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 802e172:	4b1c      	ldr	r3, [pc, #112]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802e178:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802e17a:	4b1a      	ldr	r3, [pc, #104]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e17c:	2200      	movs	r2, #0
 802e17e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802e180:	4b18      	ldr	r3, [pc, #96]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e182:	2200      	movs	r2, #0
 802e184:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 802e186:	4b17      	ldr	r3, [pc, #92]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e188:	2200      	movs	r2, #0
 802e18a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 802e18c:	4b15      	ldr	r3, [pc, #84]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e18e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802e192:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802e194:	4b13      	ldr	r3, [pc, #76]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e196:	2200      	movs	r2, #0
 802e198:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 802e19a:	4812      	ldr	r0, [pc, #72]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e19c:	f001 fc96 	bl	802facc <HAL_DMA_Init>
 802e1a0:	4603      	mov	r3, r0
 802e1a2:	2b00      	cmp	r3, #0
 802e1a4:	d001      	beq.n	802e1aa <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 802e1a6:	f7ff fedf 	bl	802df68 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 802e1aa:	687b      	ldr	r3, [r7, #4]
 802e1ac:	4a0d      	ldr	r2, [pc, #52]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e1ae:	67da      	str	r2, [r3, #124]	; 0x7c
 802e1b0:	4a0c      	ldr	r2, [pc, #48]	; (802e1e4 <HAL_SPI_MspInit+0x1c0>)
 802e1b2:	687b      	ldr	r3, [r7, #4]
 802e1b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 802e1b6:	2200      	movs	r2, #0
 802e1b8:	2102      	movs	r1, #2
 802e1ba:	2023      	movs	r0, #35	; 0x23
 802e1bc:	f001 fa89 	bl	802f6d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 802e1c0:	2023      	movs	r0, #35	; 0x23
 802e1c2:	f001 faa0 	bl	802f706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 802e1c6:	bf00      	nop
 802e1c8:	37e0      	adds	r7, #224	; 0xe0
 802e1ca:	46bd      	mov	sp, r7
 802e1cc:	bd80      	pop	{r7, pc}
 802e1ce:	bf00      	nop
 802e1d0:	40013000 	.word	0x40013000
 802e1d4:	58024400 	.word	0x58024400
 802e1d8:	58020000 	.word	0x58020000
 802e1dc:	24023af8 	.word	0x24023af8
 802e1e0:	40020070 	.word	0x40020070
 802e1e4:	24023b70 	.word	0x24023b70
 802e1e8:	40020088 	.word	0x40020088

0802e1ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802e1ec:	b480      	push	{r7}
 802e1ee:	b083      	sub	sp, #12
 802e1f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802e1f2:	4b0a      	ldr	r3, [pc, #40]	; (802e21c <HAL_MspInit+0x30>)
 802e1f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802e1f8:	4a08      	ldr	r2, [pc, #32]	; (802e21c <HAL_MspInit+0x30>)
 802e1fa:	f043 0302 	orr.w	r3, r3, #2
 802e1fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802e202:	4b06      	ldr	r3, [pc, #24]	; (802e21c <HAL_MspInit+0x30>)
 802e204:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802e208:	f003 0302 	and.w	r3, r3, #2
 802e20c:	607b      	str	r3, [r7, #4]
 802e20e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802e210:	bf00      	nop
 802e212:	370c      	adds	r7, #12
 802e214:	46bd      	mov	sp, r7
 802e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e21a:	4770      	bx	lr
 802e21c:	58024400 	.word	0x58024400

0802e220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802e220:	b480      	push	{r7}
 802e222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 802e224:	e7fe      	b.n	802e224 <NMI_Handler+0x4>

0802e226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802e226:	b480      	push	{r7}
 802e228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802e22a:	e7fe      	b.n	802e22a <HardFault_Handler+0x4>

0802e22c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802e22c:	b480      	push	{r7}
 802e22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802e230:	e7fe      	b.n	802e230 <MemManage_Handler+0x4>

0802e232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802e232:	b480      	push	{r7}
 802e234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802e236:	e7fe      	b.n	802e236 <BusFault_Handler+0x4>

0802e238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802e238:	b480      	push	{r7}
 802e23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802e23c:	e7fe      	b.n	802e23c <UsageFault_Handler+0x4>

0802e23e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802e23e:	b480      	push	{r7}
 802e240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802e242:	bf00      	nop
 802e244:	46bd      	mov	sp, r7
 802e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e24a:	4770      	bx	lr

0802e24c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802e24c:	b480      	push	{r7}
 802e24e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802e250:	bf00      	nop
 802e252:	46bd      	mov	sp, r7
 802e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e258:	4770      	bx	lr

0802e25a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802e25a:	b480      	push	{r7}
 802e25c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802e25e:	bf00      	nop
 802e260:	46bd      	mov	sp, r7
 802e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e266:	4770      	bx	lr

0802e268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802e268:	b580      	push	{r7, lr}
 802e26a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802e26c:	f000 ff1e 	bl	802f0ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802e270:	bf00      	nop
 802e272:	bd80      	pop	{r7, pc}

0802e274 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 802e274:	b580      	push	{r7, lr}
 802e276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 802e278:	4802      	ldr	r0, [pc, #8]	; (802e284 <DMA1_Stream0_IRQHandler+0x10>)
 802e27a:	f002 ff51 	bl	8031120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 802e27e:	bf00      	nop
 802e280:	bd80      	pop	{r7, pc}
 802e282:	bf00      	nop
 802e284:	24023980 	.word	0x24023980

0802e288 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 802e288:	b580      	push	{r7, lr}
 802e28a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 802e28c:	4802      	ldr	r0, [pc, #8]	; (802e298 <DMA1_Stream1_IRQHandler+0x10>)
 802e28e:	f002 ff47 	bl	8031120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 802e292:	bf00      	nop
 802e294:	bd80      	pop	{r7, pc}
 802e296:	bf00      	nop
 802e298:	240239f8 	.word	0x240239f8

0802e29c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 802e29c:	b580      	push	{r7, lr}
 802e29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 802e2a0:	4802      	ldr	r0, [pc, #8]	; (802e2ac <DMA1_Stream4_IRQHandler+0x10>)
 802e2a2:	f002 ff3d 	bl	8031120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 802e2a6:	bf00      	nop
 802e2a8:	bd80      	pop	{r7, pc}
 802e2aa:	bf00      	nop
 802e2ac:	24023af8 	.word	0x24023af8

0802e2b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 802e2b0:	b580      	push	{r7, lr}
 802e2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 802e2b4:	4802      	ldr	r0, [pc, #8]	; (802e2c0 <DMA1_Stream5_IRQHandler+0x10>)
 802e2b6:	f002 ff33 	bl	8031120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 802e2ba:	bf00      	nop
 802e2bc:	bd80      	pop	{r7, pc}
 802e2be:	bf00      	nop
 802e2c0:	24023b70 	.word	0x24023b70

0802e2c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 802e2c4:	b580      	push	{r7, lr}
 802e2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 802e2c8:	4802      	ldr	r0, [pc, #8]	; (802e2d4 <TIM2_IRQHandler+0x10>)
 802e2ca:	f00a fc09 	bl	8038ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 802e2ce:	bf00      	nop
 802e2d0:	bd80      	pop	{r7, pc}
 802e2d2:	bf00      	nop
 802e2d4:	24023bec 	.word	0x24023bec

0802e2d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 802e2d8:	b580      	push	{r7, lr}
 802e2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 802e2dc:	4802      	ldr	r0, [pc, #8]	; (802e2e8 <TIM3_IRQHandler+0x10>)
 802e2de:	f00a fbff 	bl	8038ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 802e2e2:	bf00      	nop
 802e2e4:	bd80      	pop	{r7, pc}
 802e2e6:	bf00      	nop
 802e2e8:	24023c38 	.word	0x24023c38

0802e2ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 802e2ec:	b580      	push	{r7, lr}
 802e2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 802e2f0:	4802      	ldr	r0, [pc, #8]	; (802e2fc <TIM4_IRQHandler+0x10>)
 802e2f2:	f00a fbf5 	bl	8038ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 802e2f6:	bf00      	nop
 802e2f8:	bd80      	pop	{r7, pc}
 802e2fa:	bf00      	nop
 802e2fc:	24023c84 	.word	0x24023c84

0802e300 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 802e300:	b580      	push	{r7, lr}
 802e302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 802e304:	4802      	ldr	r0, [pc, #8]	; (802e310 <I2C2_EV_IRQHandler+0x10>)
 802e306:	f004 fc91 	bl	8032c2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 802e30a:	bf00      	nop
 802e30c:	bd80      	pop	{r7, pc}
 802e30e:	bf00      	nop
 802e310:	24023934 	.word	0x24023934

0802e314 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 802e314:	b580      	push	{r7, lr}
 802e316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 802e318:	4802      	ldr	r0, [pc, #8]	; (802e324 <I2C2_ER_IRQHandler+0x10>)
 802e31a:	f004 fca1 	bl	8032c60 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 802e31e:	bf00      	nop
 802e320:	bd80      	pop	{r7, pc}
 802e322:	bf00      	nop
 802e324:	24023934 	.word	0x24023934

0802e328 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 802e328:	b580      	push	{r7, lr}
 802e32a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802e32c:	4802      	ldr	r0, [pc, #8]	; (802e338 <SPI1_IRQHandler+0x10>)
 802e32e:	f009 ff5d 	bl	80381ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 802e332:	bf00      	nop
 802e334:	bd80      	pop	{r7, pc}
 802e336:	bf00      	nop
 802e338:	24023a70 	.word	0x24023a70

0802e33c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 802e33c:	b580      	push	{r7, lr}
 802e33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 802e340:	4802      	ldr	r0, [pc, #8]	; (802e34c <USART3_IRQHandler+0x10>)
 802e342:	f00b fa13 	bl	803976c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 802e346:	bf00      	nop
 802e348:	bd80      	pop	{r7, pc}
 802e34a:	bf00      	nop
 802e34c:	24023f10 	.word	0x24023f10

0802e350 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 802e350:	b580      	push	{r7, lr}
 802e352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 802e354:	4802      	ldr	r0, [pc, #8]	; (802e360 <UART4_IRQHandler+0x10>)
 802e356:	f00b fa09 	bl	803976c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 802e35a:	bf00      	nop
 802e35c:	bd80      	pop	{r7, pc}
 802e35e:	bf00      	nop
 802e360:	24023cd0 	.word	0x24023cd0

0802e364 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 802e364:	b580      	push	{r7, lr}
 802e366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 802e368:	4802      	ldr	r0, [pc, #8]	; (802e374 <UART8_IRQHandler+0x10>)
 802e36a:	f00b f9ff 	bl	803976c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 802e36e:	bf00      	nop
 802e370:	bd80      	pop	{r7, pc}
 802e372:	bf00      	nop
 802e374:	24023df0 	.word	0x24023df0

0802e378 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 802e378:	b580      	push	{r7, lr}
 802e37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 802e37c:	4802      	ldr	r0, [pc, #8]	; (802e388 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 802e37e:	f005 fcc8 	bl	8033d12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 802e382:	bf00      	nop
 802e384:	bd80      	pop	{r7, pc}
 802e386:	bf00      	nop
 802e388:	24025484 	.word	0x24025484

0802e38c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 802e38c:	b580      	push	{r7, lr}
 802e38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 802e390:	4802      	ldr	r0, [pc, #8]	; (802e39c <OTG_FS_IRQHandler+0x10>)
 802e392:	f005 fcbe 	bl	8033d12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 802e396:	bf00      	nop
 802e398:	bd80      	pop	{r7, pc}
 802e39a:	bf00      	nop
 802e39c:	24025484 	.word	0x24025484

0802e3a0 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 802e3a0:	b580      	push	{r7, lr}
 802e3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 802e3a4:	4802      	ldr	r0, [pc, #8]	; (802e3b0 <COMP1_IRQHandler+0x10>)
 802e3a6:	f001 f845 	bl	802f434 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 802e3aa:	bf00      	nop
 802e3ac:	bd80      	pop	{r7, pc}
 802e3ae:	bf00      	nop
 802e3b0:	240238f4 	.word	0x240238f4

0802e3b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 802e3b4:	b480      	push	{r7}
 802e3b6:	af00      	add	r7, sp, #0
	return 1;
 802e3b8:	2301      	movs	r3, #1
}
 802e3ba:	4618      	mov	r0, r3
 802e3bc:	46bd      	mov	sp, r7
 802e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e3c2:	4770      	bx	lr

0802e3c4 <_kill>:

int _kill(int pid, int sig)
{
 802e3c4:	b580      	push	{r7, lr}
 802e3c6:	b082      	sub	sp, #8
 802e3c8:	af00      	add	r7, sp, #0
 802e3ca:	6078      	str	r0, [r7, #4]
 802e3cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 802e3ce:	f011 ff19 	bl	8040204 <__errno>
 802e3d2:	4603      	mov	r3, r0
 802e3d4:	2216      	movs	r2, #22
 802e3d6:	601a      	str	r2, [r3, #0]
	return -1;
 802e3d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802e3dc:	4618      	mov	r0, r3
 802e3de:	3708      	adds	r7, #8
 802e3e0:	46bd      	mov	sp, r7
 802e3e2:	bd80      	pop	{r7, pc}

0802e3e4 <_exit>:

void _exit (int status)
{
 802e3e4:	b580      	push	{r7, lr}
 802e3e6:	b082      	sub	sp, #8
 802e3e8:	af00      	add	r7, sp, #0
 802e3ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 802e3ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802e3f0:	6878      	ldr	r0, [r7, #4]
 802e3f2:	f7ff ffe7 	bl	802e3c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 802e3f6:	e7fe      	b.n	802e3f6 <_exit+0x12>

0802e3f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802e3f8:	b580      	push	{r7, lr}
 802e3fa:	b086      	sub	sp, #24
 802e3fc:	af00      	add	r7, sp, #0
 802e3fe:	60f8      	str	r0, [r7, #12]
 802e400:	60b9      	str	r1, [r7, #8]
 802e402:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802e404:	2300      	movs	r3, #0
 802e406:	617b      	str	r3, [r7, #20]
 802e408:	e00a      	b.n	802e420 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 802e40a:	f3af 8000 	nop.w
 802e40e:	4601      	mov	r1, r0
 802e410:	68bb      	ldr	r3, [r7, #8]
 802e412:	1c5a      	adds	r2, r3, #1
 802e414:	60ba      	str	r2, [r7, #8]
 802e416:	b2ca      	uxtb	r2, r1
 802e418:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802e41a:	697b      	ldr	r3, [r7, #20]
 802e41c:	3301      	adds	r3, #1
 802e41e:	617b      	str	r3, [r7, #20]
 802e420:	697a      	ldr	r2, [r7, #20]
 802e422:	687b      	ldr	r3, [r7, #4]
 802e424:	429a      	cmp	r2, r3
 802e426:	dbf0      	blt.n	802e40a <_read+0x12>
	}

return len;
 802e428:	687b      	ldr	r3, [r7, #4]
}
 802e42a:	4618      	mov	r0, r3
 802e42c:	3718      	adds	r7, #24
 802e42e:	46bd      	mov	sp, r7
 802e430:	bd80      	pop	{r7, pc}

0802e432 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802e432:	b580      	push	{r7, lr}
 802e434:	b086      	sub	sp, #24
 802e436:	af00      	add	r7, sp, #0
 802e438:	60f8      	str	r0, [r7, #12]
 802e43a:	60b9      	str	r1, [r7, #8]
 802e43c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802e43e:	2300      	movs	r3, #0
 802e440:	617b      	str	r3, [r7, #20]
 802e442:	e009      	b.n	802e458 <_write+0x26>
	{
		__io_putchar(*ptr++);
 802e444:	68bb      	ldr	r3, [r7, #8]
 802e446:	1c5a      	adds	r2, r3, #1
 802e448:	60ba      	str	r2, [r7, #8]
 802e44a:	781b      	ldrb	r3, [r3, #0]
 802e44c:	4618      	mov	r0, r3
 802e44e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802e452:	697b      	ldr	r3, [r7, #20]
 802e454:	3301      	adds	r3, #1
 802e456:	617b      	str	r3, [r7, #20]
 802e458:	697a      	ldr	r2, [r7, #20]
 802e45a:	687b      	ldr	r3, [r7, #4]
 802e45c:	429a      	cmp	r2, r3
 802e45e:	dbf1      	blt.n	802e444 <_write+0x12>
	}
	return len;
 802e460:	687b      	ldr	r3, [r7, #4]
}
 802e462:	4618      	mov	r0, r3
 802e464:	3718      	adds	r7, #24
 802e466:	46bd      	mov	sp, r7
 802e468:	bd80      	pop	{r7, pc}

0802e46a <_close>:

int _close(int file)
{
 802e46a:	b480      	push	{r7}
 802e46c:	b083      	sub	sp, #12
 802e46e:	af00      	add	r7, sp, #0
 802e470:	6078      	str	r0, [r7, #4]
	return -1;
 802e472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802e476:	4618      	mov	r0, r3
 802e478:	370c      	adds	r7, #12
 802e47a:	46bd      	mov	sp, r7
 802e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e480:	4770      	bx	lr

0802e482 <_fstat>:


int _fstat(int file, struct stat *st)
{
 802e482:	b480      	push	{r7}
 802e484:	b083      	sub	sp, #12
 802e486:	af00      	add	r7, sp, #0
 802e488:	6078      	str	r0, [r7, #4]
 802e48a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 802e48c:	683b      	ldr	r3, [r7, #0]
 802e48e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802e492:	605a      	str	r2, [r3, #4]
	return 0;
 802e494:	2300      	movs	r3, #0
}
 802e496:	4618      	mov	r0, r3
 802e498:	370c      	adds	r7, #12
 802e49a:	46bd      	mov	sp, r7
 802e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e4a0:	4770      	bx	lr

0802e4a2 <_isatty>:

int _isatty(int file)
{
 802e4a2:	b480      	push	{r7}
 802e4a4:	b083      	sub	sp, #12
 802e4a6:	af00      	add	r7, sp, #0
 802e4a8:	6078      	str	r0, [r7, #4]
	return 1;
 802e4aa:	2301      	movs	r3, #1
}
 802e4ac:	4618      	mov	r0, r3
 802e4ae:	370c      	adds	r7, #12
 802e4b0:	46bd      	mov	sp, r7
 802e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e4b6:	4770      	bx	lr

0802e4b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802e4b8:	b480      	push	{r7}
 802e4ba:	b085      	sub	sp, #20
 802e4bc:	af00      	add	r7, sp, #0
 802e4be:	60f8      	str	r0, [r7, #12]
 802e4c0:	60b9      	str	r1, [r7, #8]
 802e4c2:	607a      	str	r2, [r7, #4]
	return 0;
 802e4c4:	2300      	movs	r3, #0
}
 802e4c6:	4618      	mov	r0, r3
 802e4c8:	3714      	adds	r7, #20
 802e4ca:	46bd      	mov	sp, r7
 802e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e4d0:	4770      	bx	lr
	...

0802e4d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802e4d4:	b580      	push	{r7, lr}
 802e4d6:	b086      	sub	sp, #24
 802e4d8:	af00      	add	r7, sp, #0
 802e4da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802e4dc:	4a14      	ldr	r2, [pc, #80]	; (802e530 <_sbrk+0x5c>)
 802e4de:	4b15      	ldr	r3, [pc, #84]	; (802e534 <_sbrk+0x60>)
 802e4e0:	1ad3      	subs	r3, r2, r3
 802e4e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802e4e4:	697b      	ldr	r3, [r7, #20]
 802e4e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802e4e8:	4b13      	ldr	r3, [pc, #76]	; (802e538 <_sbrk+0x64>)
 802e4ea:	681b      	ldr	r3, [r3, #0]
 802e4ec:	2b00      	cmp	r3, #0
 802e4ee:	d102      	bne.n	802e4f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802e4f0:	4b11      	ldr	r3, [pc, #68]	; (802e538 <_sbrk+0x64>)
 802e4f2:	4a12      	ldr	r2, [pc, #72]	; (802e53c <_sbrk+0x68>)
 802e4f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802e4f6:	4b10      	ldr	r3, [pc, #64]	; (802e538 <_sbrk+0x64>)
 802e4f8:	681a      	ldr	r2, [r3, #0]
 802e4fa:	687b      	ldr	r3, [r7, #4]
 802e4fc:	4413      	add	r3, r2
 802e4fe:	693a      	ldr	r2, [r7, #16]
 802e500:	429a      	cmp	r2, r3
 802e502:	d207      	bcs.n	802e514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 802e504:	f011 fe7e 	bl	8040204 <__errno>
 802e508:	4603      	mov	r3, r0
 802e50a:	220c      	movs	r2, #12
 802e50c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802e50e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802e512:	e009      	b.n	802e528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802e514:	4b08      	ldr	r3, [pc, #32]	; (802e538 <_sbrk+0x64>)
 802e516:	681b      	ldr	r3, [r3, #0]
 802e518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802e51a:	4b07      	ldr	r3, [pc, #28]	; (802e538 <_sbrk+0x64>)
 802e51c:	681a      	ldr	r2, [r3, #0]
 802e51e:	687b      	ldr	r3, [r7, #4]
 802e520:	4413      	add	r3, r2
 802e522:	4a05      	ldr	r2, [pc, #20]	; (802e538 <_sbrk+0x64>)
 802e524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802e526:	68fb      	ldr	r3, [r7, #12]
}
 802e528:	4618      	mov	r0, r3
 802e52a:	3718      	adds	r7, #24
 802e52c:	46bd      	mov	sp, r7
 802e52e:	bd80      	pop	{r7, pc}
 802e530:	24080000 	.word	0x24080000
 802e534:	00000400 	.word	0x00000400
 802e538:	24023be8 	.word	0x24023be8
 802e53c:	24025bc8 	.word	0x24025bc8

0802e540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 802e540:	b480      	push	{r7}
 802e542:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 802e544:	4b37      	ldr	r3, [pc, #220]	; (802e624 <SystemInit+0xe4>)
 802e546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802e54a:	4a36      	ldr	r2, [pc, #216]	; (802e624 <SystemInit+0xe4>)
 802e54c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802e550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802e554:	4b34      	ldr	r3, [pc, #208]	; (802e628 <SystemInit+0xe8>)
 802e556:	681b      	ldr	r3, [r3, #0]
 802e558:	f003 030f 	and.w	r3, r3, #15
 802e55c:	2b06      	cmp	r3, #6
 802e55e:	d807      	bhi.n	802e570 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802e560:	4b31      	ldr	r3, [pc, #196]	; (802e628 <SystemInit+0xe8>)
 802e562:	681b      	ldr	r3, [r3, #0]
 802e564:	f023 030f 	bic.w	r3, r3, #15
 802e568:	4a2f      	ldr	r2, [pc, #188]	; (802e628 <SystemInit+0xe8>)
 802e56a:	f043 0307 	orr.w	r3, r3, #7
 802e56e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 802e570:	4b2e      	ldr	r3, [pc, #184]	; (802e62c <SystemInit+0xec>)
 802e572:	681b      	ldr	r3, [r3, #0]
 802e574:	4a2d      	ldr	r2, [pc, #180]	; (802e62c <SystemInit+0xec>)
 802e576:	f043 0301 	orr.w	r3, r3, #1
 802e57a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 802e57c:	4b2b      	ldr	r3, [pc, #172]	; (802e62c <SystemInit+0xec>)
 802e57e:	2200      	movs	r2, #0
 802e580:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 802e582:	4b2a      	ldr	r3, [pc, #168]	; (802e62c <SystemInit+0xec>)
 802e584:	681a      	ldr	r2, [r3, #0]
 802e586:	4929      	ldr	r1, [pc, #164]	; (802e62c <SystemInit+0xec>)
 802e588:	4b29      	ldr	r3, [pc, #164]	; (802e630 <SystemInit+0xf0>)
 802e58a:	4013      	ands	r3, r2
 802e58c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802e58e:	4b26      	ldr	r3, [pc, #152]	; (802e628 <SystemInit+0xe8>)
 802e590:	681b      	ldr	r3, [r3, #0]
 802e592:	f003 0308 	and.w	r3, r3, #8
 802e596:	2b00      	cmp	r3, #0
 802e598:	d007      	beq.n	802e5aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802e59a:	4b23      	ldr	r3, [pc, #140]	; (802e628 <SystemInit+0xe8>)
 802e59c:	681b      	ldr	r3, [r3, #0]
 802e59e:	f023 030f 	bic.w	r3, r3, #15
 802e5a2:	4a21      	ldr	r2, [pc, #132]	; (802e628 <SystemInit+0xe8>)
 802e5a4:	f043 0307 	orr.w	r3, r3, #7
 802e5a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 802e5aa:	4b20      	ldr	r3, [pc, #128]	; (802e62c <SystemInit+0xec>)
 802e5ac:	2200      	movs	r2, #0
 802e5ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 802e5b0:	4b1e      	ldr	r3, [pc, #120]	; (802e62c <SystemInit+0xec>)
 802e5b2:	2200      	movs	r2, #0
 802e5b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 802e5b6:	4b1d      	ldr	r3, [pc, #116]	; (802e62c <SystemInit+0xec>)
 802e5b8:	2200      	movs	r2, #0
 802e5ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 802e5bc:	4b1b      	ldr	r3, [pc, #108]	; (802e62c <SystemInit+0xec>)
 802e5be:	4a1d      	ldr	r2, [pc, #116]	; (802e634 <SystemInit+0xf4>)
 802e5c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802e5c2:	4b1a      	ldr	r3, [pc, #104]	; (802e62c <SystemInit+0xec>)
 802e5c4:	4a1c      	ldr	r2, [pc, #112]	; (802e638 <SystemInit+0xf8>)
 802e5c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 802e5c8:	4b18      	ldr	r3, [pc, #96]	; (802e62c <SystemInit+0xec>)
 802e5ca:	4a1c      	ldr	r2, [pc, #112]	; (802e63c <SystemInit+0xfc>)
 802e5cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802e5ce:	4b17      	ldr	r3, [pc, #92]	; (802e62c <SystemInit+0xec>)
 802e5d0:	2200      	movs	r2, #0
 802e5d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 802e5d4:	4b15      	ldr	r3, [pc, #84]	; (802e62c <SystemInit+0xec>)
 802e5d6:	4a19      	ldr	r2, [pc, #100]	; (802e63c <SystemInit+0xfc>)
 802e5d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 802e5da:	4b14      	ldr	r3, [pc, #80]	; (802e62c <SystemInit+0xec>)
 802e5dc:	2200      	movs	r2, #0
 802e5de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 802e5e0:	4b12      	ldr	r3, [pc, #72]	; (802e62c <SystemInit+0xec>)
 802e5e2:	4a16      	ldr	r2, [pc, #88]	; (802e63c <SystemInit+0xfc>)
 802e5e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 802e5e6:	4b11      	ldr	r3, [pc, #68]	; (802e62c <SystemInit+0xec>)
 802e5e8:	2200      	movs	r2, #0
 802e5ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 802e5ec:	4b0f      	ldr	r3, [pc, #60]	; (802e62c <SystemInit+0xec>)
 802e5ee:	681b      	ldr	r3, [r3, #0]
 802e5f0:	4a0e      	ldr	r2, [pc, #56]	; (802e62c <SystemInit+0xec>)
 802e5f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802e5f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 802e5f8:	4b0c      	ldr	r3, [pc, #48]	; (802e62c <SystemInit+0xec>)
 802e5fa:	2200      	movs	r2, #0
 802e5fc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 802e5fe:	4b10      	ldr	r3, [pc, #64]	; (802e640 <SystemInit+0x100>)
 802e600:	681a      	ldr	r2, [r3, #0]
 802e602:	4b10      	ldr	r3, [pc, #64]	; (802e644 <SystemInit+0x104>)
 802e604:	4013      	ands	r3, r2
 802e606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802e60a:	d202      	bcs.n	802e612 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 802e60c:	4b0e      	ldr	r3, [pc, #56]	; (802e648 <SystemInit+0x108>)
 802e60e:	2201      	movs	r2, #1
 802e610:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 802e612:	4b0e      	ldr	r3, [pc, #56]	; (802e64c <SystemInit+0x10c>)
 802e614:	f243 02d2 	movw	r2, #12498	; 0x30d2
 802e618:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 802e61a:	bf00      	nop
 802e61c:	46bd      	mov	sp, r7
 802e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e622:	4770      	bx	lr
 802e624:	e000ed00 	.word	0xe000ed00
 802e628:	52002000 	.word	0x52002000
 802e62c:	58024400 	.word	0x58024400
 802e630:	eaf6ed7f 	.word	0xeaf6ed7f
 802e634:	02020200 	.word	0x02020200
 802e638:	01ff0000 	.word	0x01ff0000
 802e63c:	01010280 	.word	0x01010280
 802e640:	5c001000 	.word	0x5c001000
 802e644:	ffff0000 	.word	0xffff0000
 802e648:	51008108 	.word	0x51008108
 802e64c:	52004000 	.word	0x52004000

0802e650 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 802e650:	b580      	push	{r7, lr}
 802e652:	b088      	sub	sp, #32
 802e654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802e656:	f107 0310 	add.w	r3, r7, #16
 802e65a:	2200      	movs	r2, #0
 802e65c:	601a      	str	r2, [r3, #0]
 802e65e:	605a      	str	r2, [r3, #4]
 802e660:	609a      	str	r2, [r3, #8]
 802e662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802e664:	1d3b      	adds	r3, r7, #4
 802e666:	2200      	movs	r2, #0
 802e668:	601a      	str	r2, [r3, #0]
 802e66a:	605a      	str	r2, [r3, #4]
 802e66c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 802e66e:	4b1e      	ldr	r3, [pc, #120]	; (802e6e8 <MX_TIM2_Init+0x98>)
 802e670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802e674:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 802e676:	4b1c      	ldr	r3, [pc, #112]	; (802e6e8 <MX_TIM2_Init+0x98>)
 802e678:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802e67c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802e67e:	4b1a      	ldr	r3, [pc, #104]	; (802e6e8 <MX_TIM2_Init+0x98>)
 802e680:	2200      	movs	r2, #0
 802e682:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 802e684:	4b18      	ldr	r3, [pc, #96]	; (802e6e8 <MX_TIM2_Init+0x98>)
 802e686:	2264      	movs	r2, #100	; 0x64
 802e688:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802e68a:	4b17      	ldr	r3, [pc, #92]	; (802e6e8 <MX_TIM2_Init+0x98>)
 802e68c:	2200      	movs	r2, #0
 802e68e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802e690:	4b15      	ldr	r3, [pc, #84]	; (802e6e8 <MX_TIM2_Init+0x98>)
 802e692:	2200      	movs	r2, #0
 802e694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802e696:	4814      	ldr	r0, [pc, #80]	; (802e6e8 <MX_TIM2_Init+0x98>)
 802e698:	f00a f953 	bl	8038942 <HAL_TIM_Base_Init>
 802e69c:	4603      	mov	r3, r0
 802e69e:	2b00      	cmp	r3, #0
 802e6a0:	d001      	beq.n	802e6a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 802e6a2:	f7ff fc61 	bl	802df68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802e6a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802e6aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802e6ac:	f107 0310 	add.w	r3, r7, #16
 802e6b0:	4619      	mov	r1, r3
 802e6b2:	480d      	ldr	r0, [pc, #52]	; (802e6e8 <MX_TIM2_Init+0x98>)
 802e6b4:	f00a fb34 	bl	8038d20 <HAL_TIM_ConfigClockSource>
 802e6b8:	4603      	mov	r3, r0
 802e6ba:	2b00      	cmp	r3, #0
 802e6bc:	d001      	beq.n	802e6c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 802e6be:	f7ff fc53 	bl	802df68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802e6c2:	2300      	movs	r3, #0
 802e6c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802e6c6:	2300      	movs	r3, #0
 802e6c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802e6ca:	1d3b      	adds	r3, r7, #4
 802e6cc:	4619      	mov	r1, r3
 802e6ce:	4806      	ldr	r0, [pc, #24]	; (802e6e8 <MX_TIM2_Init+0x98>)
 802e6d0:	f00a fd7e 	bl	80391d0 <HAL_TIMEx_MasterConfigSynchronization>
 802e6d4:	4603      	mov	r3, r0
 802e6d6:	2b00      	cmp	r3, #0
 802e6d8:	d001      	beq.n	802e6de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 802e6da:	f7ff fc45 	bl	802df68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802e6de:	bf00      	nop
 802e6e0:	3720      	adds	r7, #32
 802e6e2:	46bd      	mov	sp, r7
 802e6e4:	bd80      	pop	{r7, pc}
 802e6e6:	bf00      	nop
 802e6e8:	24023bec 	.word	0x24023bec

0802e6ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 802e6ec:	b580      	push	{r7, lr}
 802e6ee:	b088      	sub	sp, #32
 802e6f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802e6f2:	f107 0310 	add.w	r3, r7, #16
 802e6f6:	2200      	movs	r2, #0
 802e6f8:	601a      	str	r2, [r3, #0]
 802e6fa:	605a      	str	r2, [r3, #4]
 802e6fc:	609a      	str	r2, [r3, #8]
 802e6fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802e700:	1d3b      	adds	r3, r7, #4
 802e702:	2200      	movs	r2, #0
 802e704:	601a      	str	r2, [r3, #0]
 802e706:	605a      	str	r2, [r3, #4]
 802e708:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802e70a:	4b1d      	ldr	r3, [pc, #116]	; (802e780 <MX_TIM3_Init+0x94>)
 802e70c:	4a1d      	ldr	r2, [pc, #116]	; (802e784 <MX_TIM3_Init+0x98>)
 802e70e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 802e710:	4b1b      	ldr	r3, [pc, #108]	; (802e780 <MX_TIM3_Init+0x94>)
 802e712:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802e716:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802e718:	4b19      	ldr	r3, [pc, #100]	; (802e780 <MX_TIM3_Init+0x94>)
 802e71a:	2200      	movs	r2, #0
 802e71c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 802e71e:	4b18      	ldr	r3, [pc, #96]	; (802e780 <MX_TIM3_Init+0x94>)
 802e720:	220a      	movs	r2, #10
 802e722:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802e724:	4b16      	ldr	r3, [pc, #88]	; (802e780 <MX_TIM3_Init+0x94>)
 802e726:	2200      	movs	r2, #0
 802e728:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802e72a:	4b15      	ldr	r3, [pc, #84]	; (802e780 <MX_TIM3_Init+0x94>)
 802e72c:	2200      	movs	r2, #0
 802e72e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 802e730:	4813      	ldr	r0, [pc, #76]	; (802e780 <MX_TIM3_Init+0x94>)
 802e732:	f00a f906 	bl	8038942 <HAL_TIM_Base_Init>
 802e736:	4603      	mov	r3, r0
 802e738:	2b00      	cmp	r3, #0
 802e73a:	d001      	beq.n	802e740 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 802e73c:	f7ff fc14 	bl	802df68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802e740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802e744:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 802e746:	f107 0310 	add.w	r3, r7, #16
 802e74a:	4619      	mov	r1, r3
 802e74c:	480c      	ldr	r0, [pc, #48]	; (802e780 <MX_TIM3_Init+0x94>)
 802e74e:	f00a fae7 	bl	8038d20 <HAL_TIM_ConfigClockSource>
 802e752:	4603      	mov	r3, r0
 802e754:	2b00      	cmp	r3, #0
 802e756:	d001      	beq.n	802e75c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 802e758:	f7ff fc06 	bl	802df68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802e75c:	2300      	movs	r3, #0
 802e75e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802e760:	2300      	movs	r3, #0
 802e762:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 802e764:	1d3b      	adds	r3, r7, #4
 802e766:	4619      	mov	r1, r3
 802e768:	4805      	ldr	r0, [pc, #20]	; (802e780 <MX_TIM3_Init+0x94>)
 802e76a:	f00a fd31 	bl	80391d0 <HAL_TIMEx_MasterConfigSynchronization>
 802e76e:	4603      	mov	r3, r0
 802e770:	2b00      	cmp	r3, #0
 802e772:	d001      	beq.n	802e778 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 802e774:	f7ff fbf8 	bl	802df68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 802e778:	bf00      	nop
 802e77a:	3720      	adds	r7, #32
 802e77c:	46bd      	mov	sp, r7
 802e77e:	bd80      	pop	{r7, pc}
 802e780:	24023c38 	.word	0x24023c38
 802e784:	40000400 	.word	0x40000400

0802e788 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 802e788:	b580      	push	{r7, lr}
 802e78a:	b088      	sub	sp, #32
 802e78c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802e78e:	f107 0310 	add.w	r3, r7, #16
 802e792:	2200      	movs	r2, #0
 802e794:	601a      	str	r2, [r3, #0]
 802e796:	605a      	str	r2, [r3, #4]
 802e798:	609a      	str	r2, [r3, #8]
 802e79a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802e79c:	1d3b      	adds	r3, r7, #4
 802e79e:	2200      	movs	r2, #0
 802e7a0:	601a      	str	r2, [r3, #0]
 802e7a2:	605a      	str	r2, [r3, #4]
 802e7a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 802e7a6:	4b1d      	ldr	r3, [pc, #116]	; (802e81c <MX_TIM4_Init+0x94>)
 802e7a8:	4a1d      	ldr	r2, [pc, #116]	; (802e820 <MX_TIM4_Init+0x98>)
 802e7aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 802e7ac:	4b1b      	ldr	r3, [pc, #108]	; (802e81c <MX_TIM4_Init+0x94>)
 802e7ae:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802e7b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 802e7b4:	4b19      	ldr	r3, [pc, #100]	; (802e81c <MX_TIM4_Init+0x94>)
 802e7b6:	2200      	movs	r2, #0
 802e7b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 802e7ba:	4b18      	ldr	r3, [pc, #96]	; (802e81c <MX_TIM4_Init+0x94>)
 802e7bc:	2264      	movs	r2, #100	; 0x64
 802e7be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802e7c0:	4b16      	ldr	r3, [pc, #88]	; (802e81c <MX_TIM4_Init+0x94>)
 802e7c2:	2200      	movs	r2, #0
 802e7c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802e7c6:	4b15      	ldr	r3, [pc, #84]	; (802e81c <MX_TIM4_Init+0x94>)
 802e7c8:	2200      	movs	r2, #0
 802e7ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 802e7cc:	4813      	ldr	r0, [pc, #76]	; (802e81c <MX_TIM4_Init+0x94>)
 802e7ce:	f00a f8b8 	bl	8038942 <HAL_TIM_Base_Init>
 802e7d2:	4603      	mov	r3, r0
 802e7d4:	2b00      	cmp	r3, #0
 802e7d6:	d001      	beq.n	802e7dc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 802e7d8:	f7ff fbc6 	bl	802df68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802e7dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802e7e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 802e7e2:	f107 0310 	add.w	r3, r7, #16
 802e7e6:	4619      	mov	r1, r3
 802e7e8:	480c      	ldr	r0, [pc, #48]	; (802e81c <MX_TIM4_Init+0x94>)
 802e7ea:	f00a fa99 	bl	8038d20 <HAL_TIM_ConfigClockSource>
 802e7ee:	4603      	mov	r3, r0
 802e7f0:	2b00      	cmp	r3, #0
 802e7f2:	d001      	beq.n	802e7f8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 802e7f4:	f7ff fbb8 	bl	802df68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802e7f8:	2300      	movs	r3, #0
 802e7fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802e7fc:	2300      	movs	r3, #0
 802e7fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802e800:	1d3b      	adds	r3, r7, #4
 802e802:	4619      	mov	r1, r3
 802e804:	4805      	ldr	r0, [pc, #20]	; (802e81c <MX_TIM4_Init+0x94>)
 802e806:	f00a fce3 	bl	80391d0 <HAL_TIMEx_MasterConfigSynchronization>
 802e80a:	4603      	mov	r3, r0
 802e80c:	2b00      	cmp	r3, #0
 802e80e:	d001      	beq.n	802e814 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 802e810:	f7ff fbaa 	bl	802df68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802e814:	bf00      	nop
 802e816:	3720      	adds	r7, #32
 802e818:	46bd      	mov	sp, r7
 802e81a:	bd80      	pop	{r7, pc}
 802e81c:	24023c84 	.word	0x24023c84
 802e820:	40000800 	.word	0x40000800

0802e824 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 802e824:	b580      	push	{r7, lr}
 802e826:	b086      	sub	sp, #24
 802e828:	af00      	add	r7, sp, #0
 802e82a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 802e82c:	687b      	ldr	r3, [r7, #4]
 802e82e:	681b      	ldr	r3, [r3, #0]
 802e830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802e834:	d117      	bne.n	802e866 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802e836:	4b2a      	ldr	r3, [pc, #168]	; (802e8e0 <HAL_TIM_Base_MspInit+0xbc>)
 802e838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802e83c:	4a28      	ldr	r2, [pc, #160]	; (802e8e0 <HAL_TIM_Base_MspInit+0xbc>)
 802e83e:	f043 0301 	orr.w	r3, r3, #1
 802e842:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802e846:	4b26      	ldr	r3, [pc, #152]	; (802e8e0 <HAL_TIM_Base_MspInit+0xbc>)
 802e848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802e84c:	f003 0301 	and.w	r3, r3, #1
 802e850:	617b      	str	r3, [r7, #20]
 802e852:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 802e854:	2200      	movs	r2, #0
 802e856:	2101      	movs	r1, #1
 802e858:	201c      	movs	r0, #28
 802e85a:	f000 ff3a 	bl	802f6d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802e85e:	201c      	movs	r0, #28
 802e860:	f000 ff51 	bl	802f706 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 802e864:	e038      	b.n	802e8d8 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 802e866:	687b      	ldr	r3, [r7, #4]
 802e868:	681b      	ldr	r3, [r3, #0]
 802e86a:	4a1e      	ldr	r2, [pc, #120]	; (802e8e4 <HAL_TIM_Base_MspInit+0xc0>)
 802e86c:	4293      	cmp	r3, r2
 802e86e:	d117      	bne.n	802e8a0 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802e870:	4b1b      	ldr	r3, [pc, #108]	; (802e8e0 <HAL_TIM_Base_MspInit+0xbc>)
 802e872:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802e876:	4a1a      	ldr	r2, [pc, #104]	; (802e8e0 <HAL_TIM_Base_MspInit+0xbc>)
 802e878:	f043 0302 	orr.w	r3, r3, #2
 802e87c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802e880:	4b17      	ldr	r3, [pc, #92]	; (802e8e0 <HAL_TIM_Base_MspInit+0xbc>)
 802e882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802e886:	f003 0302 	and.w	r3, r3, #2
 802e88a:	613b      	str	r3, [r7, #16]
 802e88c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 802e88e:	2200      	movs	r2, #0
 802e890:	2101      	movs	r1, #1
 802e892:	201d      	movs	r0, #29
 802e894:	f000 ff1d 	bl	802f6d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 802e898:	201d      	movs	r0, #29
 802e89a:	f000 ff34 	bl	802f706 <HAL_NVIC_EnableIRQ>
}
 802e89e:	e01b      	b.n	802e8d8 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 802e8a0:	687b      	ldr	r3, [r7, #4]
 802e8a2:	681b      	ldr	r3, [r3, #0]
 802e8a4:	4a10      	ldr	r2, [pc, #64]	; (802e8e8 <HAL_TIM_Base_MspInit+0xc4>)
 802e8a6:	4293      	cmp	r3, r2
 802e8a8:	d116      	bne.n	802e8d8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 802e8aa:	4b0d      	ldr	r3, [pc, #52]	; (802e8e0 <HAL_TIM_Base_MspInit+0xbc>)
 802e8ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802e8b0:	4a0b      	ldr	r2, [pc, #44]	; (802e8e0 <HAL_TIM_Base_MspInit+0xbc>)
 802e8b2:	f043 0304 	orr.w	r3, r3, #4
 802e8b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802e8ba:	4b09      	ldr	r3, [pc, #36]	; (802e8e0 <HAL_TIM_Base_MspInit+0xbc>)
 802e8bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802e8c0:	f003 0304 	and.w	r3, r3, #4
 802e8c4:	60fb      	str	r3, [r7, #12]
 802e8c6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 802e8c8:	2200      	movs	r2, #0
 802e8ca:	2100      	movs	r1, #0
 802e8cc:	201e      	movs	r0, #30
 802e8ce:	f000 ff00 	bl	802f6d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 802e8d2:	201e      	movs	r0, #30
 802e8d4:	f000 ff17 	bl	802f706 <HAL_NVIC_EnableIRQ>
}
 802e8d8:	bf00      	nop
 802e8da:	3718      	adds	r7, #24
 802e8dc:	46bd      	mov	sp, r7
 802e8de:	bd80      	pop	{r7, pc}
 802e8e0:	58024400 	.word	0x58024400
 802e8e4:	40000400 	.word	0x40000400
 802e8e8:	40000800 	.word	0x40000800

0802e8ec <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 802e8ec:	b580      	push	{r7, lr}
 802e8ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 802e8f0:	4b25      	ldr	r3, [pc, #148]	; (802e988 <MX_UART4_Init+0x9c>)
 802e8f2:	4a26      	ldr	r2, [pc, #152]	; (802e98c <MX_UART4_Init+0xa0>)
 802e8f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 802e8f6:	4b24      	ldr	r3, [pc, #144]	; (802e988 <MX_UART4_Init+0x9c>)
 802e8f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802e8fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 802e8fe:	4b22      	ldr	r3, [pc, #136]	; (802e988 <MX_UART4_Init+0x9c>)
 802e900:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802e904:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 802e906:	4b20      	ldr	r3, [pc, #128]	; (802e988 <MX_UART4_Init+0x9c>)
 802e908:	2200      	movs	r2, #0
 802e90a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 802e90c:	4b1e      	ldr	r3, [pc, #120]	; (802e988 <MX_UART4_Init+0x9c>)
 802e90e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802e912:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 802e914:	4b1c      	ldr	r3, [pc, #112]	; (802e988 <MX_UART4_Init+0x9c>)
 802e916:	220c      	movs	r2, #12
 802e918:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802e91a:	4b1b      	ldr	r3, [pc, #108]	; (802e988 <MX_UART4_Init+0x9c>)
 802e91c:	2200      	movs	r2, #0
 802e91e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802e920:	4b19      	ldr	r3, [pc, #100]	; (802e988 <MX_UART4_Init+0x9c>)
 802e922:	2200      	movs	r2, #0
 802e924:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802e926:	4b18      	ldr	r3, [pc, #96]	; (802e988 <MX_UART4_Init+0x9c>)
 802e928:	2200      	movs	r2, #0
 802e92a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802e92c:	4b16      	ldr	r3, [pc, #88]	; (802e988 <MX_UART4_Init+0x9c>)
 802e92e:	2200      	movs	r2, #0
 802e930:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802e932:	4b15      	ldr	r3, [pc, #84]	; (802e988 <MX_UART4_Init+0x9c>)
 802e934:	2220      	movs	r2, #32
 802e936:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802e938:	4b13      	ldr	r3, [pc, #76]	; (802e988 <MX_UART4_Init+0x9c>)
 802e93a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802e93e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 802e940:	4811      	ldr	r0, [pc, #68]	; (802e988 <MX_UART4_Init+0x9c>)
 802e942:	f00a fcf1 	bl	8039328 <HAL_UART_Init>
 802e946:	4603      	mov	r3, r0
 802e948:	2b00      	cmp	r3, #0
 802e94a:	d001      	beq.n	802e950 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 802e94c:	f7ff fb0c 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802e950:	2100      	movs	r1, #0
 802e952:	480d      	ldr	r0, [pc, #52]	; (802e988 <MX_UART4_Init+0x9c>)
 802e954:	f00d fa3e 	bl	803bdd4 <HAL_UARTEx_SetTxFifoThreshold>
 802e958:	4603      	mov	r3, r0
 802e95a:	2b00      	cmp	r3, #0
 802e95c:	d001      	beq.n	802e962 <MX_UART4_Init+0x76>
  {
    Error_Handler();
 802e95e:	f7ff fb03 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802e962:	2100      	movs	r1, #0
 802e964:	4808      	ldr	r0, [pc, #32]	; (802e988 <MX_UART4_Init+0x9c>)
 802e966:	f00d fa73 	bl	803be50 <HAL_UARTEx_SetRxFifoThreshold>
 802e96a:	4603      	mov	r3, r0
 802e96c:	2b00      	cmp	r3, #0
 802e96e:	d001      	beq.n	802e974 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 802e970:	f7ff fafa 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 802e974:	4804      	ldr	r0, [pc, #16]	; (802e988 <MX_UART4_Init+0x9c>)
 802e976:	f00d f9f4 	bl	803bd62 <HAL_UARTEx_DisableFifoMode>
 802e97a:	4603      	mov	r3, r0
 802e97c:	2b00      	cmp	r3, #0
 802e97e:	d001      	beq.n	802e984 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 802e980:	f7ff faf2 	bl	802df68 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 802e984:	bf00      	nop
 802e986:	bd80      	pop	{r7, pc}
 802e988:	24023cd0 	.word	0x24023cd0
 802e98c:	40004c00 	.word	0x40004c00

0802e990 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 802e990:	b580      	push	{r7, lr}
 802e992:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 802e994:	4b22      	ldr	r3, [pc, #136]	; (802ea20 <MX_UART7_Init+0x90>)
 802e996:	4a23      	ldr	r2, [pc, #140]	; (802ea24 <MX_UART7_Init+0x94>)
 802e998:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 802e99a:	4b21      	ldr	r3, [pc, #132]	; (802ea20 <MX_UART7_Init+0x90>)
 802e99c:	4a22      	ldr	r2, [pc, #136]	; (802ea28 <MX_UART7_Init+0x98>)
 802e99e:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 802e9a0:	4b1f      	ldr	r3, [pc, #124]	; (802ea20 <MX_UART7_Init+0x90>)
 802e9a2:	2200      	movs	r2, #0
 802e9a4:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 802e9a6:	4b1e      	ldr	r3, [pc, #120]	; (802ea20 <MX_UART7_Init+0x90>)
 802e9a8:	2200      	movs	r2, #0
 802e9aa:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 802e9ac:	4b1c      	ldr	r3, [pc, #112]	; (802ea20 <MX_UART7_Init+0x90>)
 802e9ae:	2200      	movs	r2, #0
 802e9b0:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 802e9b2:	4b1b      	ldr	r3, [pc, #108]	; (802ea20 <MX_UART7_Init+0x90>)
 802e9b4:	220c      	movs	r2, #12
 802e9b6:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802e9b8:	4b19      	ldr	r3, [pc, #100]	; (802ea20 <MX_UART7_Init+0x90>)
 802e9ba:	2200      	movs	r2, #0
 802e9bc:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 802e9be:	4b18      	ldr	r3, [pc, #96]	; (802ea20 <MX_UART7_Init+0x90>)
 802e9c0:	2200      	movs	r2, #0
 802e9c2:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802e9c4:	4b16      	ldr	r3, [pc, #88]	; (802ea20 <MX_UART7_Init+0x90>)
 802e9c6:	2200      	movs	r2, #0
 802e9c8:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802e9ca:	4b15      	ldr	r3, [pc, #84]	; (802ea20 <MX_UART7_Init+0x90>)
 802e9cc:	2200      	movs	r2, #0
 802e9ce:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802e9d0:	4b13      	ldr	r3, [pc, #76]	; (802ea20 <MX_UART7_Init+0x90>)
 802e9d2:	2200      	movs	r2, #0
 802e9d4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 802e9d6:	4812      	ldr	r0, [pc, #72]	; (802ea20 <MX_UART7_Init+0x90>)
 802e9d8:	f00a fca6 	bl	8039328 <HAL_UART_Init>
 802e9dc:	4603      	mov	r3, r0
 802e9de:	2b00      	cmp	r3, #0
 802e9e0:	d001      	beq.n	802e9e6 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 802e9e2:	f7ff fac1 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802e9e6:	2100      	movs	r1, #0
 802e9e8:	480d      	ldr	r0, [pc, #52]	; (802ea20 <MX_UART7_Init+0x90>)
 802e9ea:	f00d f9f3 	bl	803bdd4 <HAL_UARTEx_SetTxFifoThreshold>
 802e9ee:	4603      	mov	r3, r0
 802e9f0:	2b00      	cmp	r3, #0
 802e9f2:	d001      	beq.n	802e9f8 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 802e9f4:	f7ff fab8 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802e9f8:	2100      	movs	r1, #0
 802e9fa:	4809      	ldr	r0, [pc, #36]	; (802ea20 <MX_UART7_Init+0x90>)
 802e9fc:	f00d fa28 	bl	803be50 <HAL_UARTEx_SetRxFifoThreshold>
 802ea00:	4603      	mov	r3, r0
 802ea02:	2b00      	cmp	r3, #0
 802ea04:	d001      	beq.n	802ea0a <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 802ea06:	f7ff faaf 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 802ea0a:	4805      	ldr	r0, [pc, #20]	; (802ea20 <MX_UART7_Init+0x90>)
 802ea0c:	f00d f9a9 	bl	803bd62 <HAL_UARTEx_DisableFifoMode>
 802ea10:	4603      	mov	r3, r0
 802ea12:	2b00      	cmp	r3, #0
 802ea14:	d001      	beq.n	802ea1a <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 802ea16:	f7ff faa7 	bl	802df68 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 802ea1a:	bf00      	nop
 802ea1c:	bd80      	pop	{r7, pc}
 802ea1e:	bf00      	nop
 802ea20:	24023d60 	.word	0x24023d60
 802ea24:	40007800 	.word	0x40007800
 802ea28:	001312d0 	.word	0x001312d0

0802ea2c <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 802ea2c:	b580      	push	{r7, lr}
 802ea2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 802ea30:	4b26      	ldr	r3, [pc, #152]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea32:	4a27      	ldr	r2, [pc, #156]	; (802ead0 <MX_UART8_Init+0xa4>)
 802ea34:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 802ea36:	4b25      	ldr	r3, [pc, #148]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea38:	4a26      	ldr	r2, [pc, #152]	; (802ead4 <MX_UART8_Init+0xa8>)
 802ea3a:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 802ea3c:	4b23      	ldr	r3, [pc, #140]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802ea42:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 802ea44:	4b21      	ldr	r3, [pc, #132]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea46:	2200      	movs	r2, #0
 802ea48:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 802ea4a:	4b20      	ldr	r3, [pc, #128]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802ea50:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 802ea52:	4b1e      	ldr	r3, [pc, #120]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea54:	220c      	movs	r2, #12
 802ea56:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802ea58:	4b1c      	ldr	r3, [pc, #112]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea5a:	2200      	movs	r2, #0
 802ea5c:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 802ea5e:	4b1b      	ldr	r3, [pc, #108]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea60:	2200      	movs	r2, #0
 802ea62:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802ea64:	4b19      	ldr	r3, [pc, #100]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea66:	2200      	movs	r2, #0
 802ea68:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802ea6a:	4b18      	ldr	r3, [pc, #96]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea6c:	2200      	movs	r2, #0
 802ea6e:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802ea70:	4b16      	ldr	r3, [pc, #88]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea72:	2220      	movs	r2, #32
 802ea74:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802ea76:	4b15      	ldr	r3, [pc, #84]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802ea7c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 802ea7e:	4813      	ldr	r0, [pc, #76]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea80:	f00a fc52 	bl	8039328 <HAL_UART_Init>
 802ea84:	4603      	mov	r3, r0
 802ea86:	2b00      	cmp	r3, #0
 802ea88:	d001      	beq.n	802ea8e <MX_UART8_Init+0x62>
  {
    Error_Handler();
 802ea8a:	f7ff fa6d 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802ea8e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802ea92:	480e      	ldr	r0, [pc, #56]	; (802eacc <MX_UART8_Init+0xa0>)
 802ea94:	f00d f99e 	bl	803bdd4 <HAL_UARTEx_SetTxFifoThreshold>
 802ea98:	4603      	mov	r3, r0
 802ea9a:	2b00      	cmp	r3, #0
 802ea9c:	d001      	beq.n	802eaa2 <MX_UART8_Init+0x76>
  {
    Error_Handler();
 802ea9e:	f7ff fa63 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802eaa2:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802eaa6:	4809      	ldr	r0, [pc, #36]	; (802eacc <MX_UART8_Init+0xa0>)
 802eaa8:	f00d f9d2 	bl	803be50 <HAL_UARTEx_SetRxFifoThreshold>
 802eaac:	4603      	mov	r3, r0
 802eaae:	2b00      	cmp	r3, #0
 802eab0:	d001      	beq.n	802eab6 <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 802eab2:	f7ff fa59 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 802eab6:	4805      	ldr	r0, [pc, #20]	; (802eacc <MX_UART8_Init+0xa0>)
 802eab8:	f00d f918 	bl	803bcec <HAL_UARTEx_EnableFifoMode>
 802eabc:	4603      	mov	r3, r0
 802eabe:	2b00      	cmp	r3, #0
 802eac0:	d001      	beq.n	802eac6 <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 802eac2:	f7ff fa51 	bl	802df68 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 802eac6:	bf00      	nop
 802eac8:	bd80      	pop	{r7, pc}
 802eaca:	bf00      	nop
 802eacc:	24023df0 	.word	0x24023df0
 802ead0:	40007c00 	.word	0x40007c00
 802ead4:	001312d0 	.word	0x001312d0

0802ead8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 802ead8:	b580      	push	{r7, lr}
 802eada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802eadc:	4b22      	ldr	r3, [pc, #136]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eade:	4a23      	ldr	r2, [pc, #140]	; (802eb6c <MX_USART2_UART_Init+0x94>)
 802eae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 802eae2:	4b21      	ldr	r3, [pc, #132]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802eae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802eaea:	4b1f      	ldr	r3, [pc, #124]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eaec:	2200      	movs	r2, #0
 802eaee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802eaf0:	4b1d      	ldr	r3, [pc, #116]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eaf2:	2200      	movs	r2, #0
 802eaf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802eaf6:	4b1c      	ldr	r3, [pc, #112]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eaf8:	2200      	movs	r2, #0
 802eafa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802eafc:	4b1a      	ldr	r3, [pc, #104]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eafe:	220c      	movs	r2, #12
 802eb00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802eb02:	4b19      	ldr	r3, [pc, #100]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eb04:	2200      	movs	r2, #0
 802eb06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802eb08:	4b17      	ldr	r3, [pc, #92]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eb0a:	2200      	movs	r2, #0
 802eb0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802eb0e:	4b16      	ldr	r3, [pc, #88]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eb10:	2200      	movs	r2, #0
 802eb12:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802eb14:	4b14      	ldr	r3, [pc, #80]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eb16:	2200      	movs	r2, #0
 802eb18:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802eb1a:	4b13      	ldr	r3, [pc, #76]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eb1c:	2200      	movs	r2, #0
 802eb1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802eb20:	4811      	ldr	r0, [pc, #68]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eb22:	f00a fc01 	bl	8039328 <HAL_UART_Init>
 802eb26:	4603      	mov	r3, r0
 802eb28:	2b00      	cmp	r3, #0
 802eb2a:	d001      	beq.n	802eb30 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 802eb2c:	f7ff fa1c 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802eb30:	2100      	movs	r1, #0
 802eb32:	480d      	ldr	r0, [pc, #52]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eb34:	f00d f94e 	bl	803bdd4 <HAL_UARTEx_SetTxFifoThreshold>
 802eb38:	4603      	mov	r3, r0
 802eb3a:	2b00      	cmp	r3, #0
 802eb3c:	d001      	beq.n	802eb42 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 802eb3e:	f7ff fa13 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802eb42:	2100      	movs	r1, #0
 802eb44:	4808      	ldr	r0, [pc, #32]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eb46:	f00d f983 	bl	803be50 <HAL_UARTEx_SetRxFifoThreshold>
 802eb4a:	4603      	mov	r3, r0
 802eb4c:	2b00      	cmp	r3, #0
 802eb4e:	d001      	beq.n	802eb54 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 802eb50:	f7ff fa0a 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 802eb54:	4804      	ldr	r0, [pc, #16]	; (802eb68 <MX_USART2_UART_Init+0x90>)
 802eb56:	f00d f904 	bl	803bd62 <HAL_UARTEx_DisableFifoMode>
 802eb5a:	4603      	mov	r3, r0
 802eb5c:	2b00      	cmp	r3, #0
 802eb5e:	d001      	beq.n	802eb64 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 802eb60:	f7ff fa02 	bl	802df68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802eb64:	bf00      	nop
 802eb66:	bd80      	pop	{r7, pc}
 802eb68:	24023e80 	.word	0x24023e80
 802eb6c:	40004400 	.word	0x40004400

0802eb70 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 802eb70:	b580      	push	{r7, lr}
 802eb72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 802eb74:	4b26      	ldr	r3, [pc, #152]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802eb76:	4a27      	ldr	r2, [pc, #156]	; (802ec14 <MX_USART3_UART_Init+0xa4>)
 802eb78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 802eb7a:	4b25      	ldr	r3, [pc, #148]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802eb7c:	4a26      	ldr	r2, [pc, #152]	; (802ec18 <MX_USART3_UART_Init+0xa8>)
 802eb7e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 802eb80:	4b23      	ldr	r3, [pc, #140]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802eb82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802eb86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 802eb88:	4b21      	ldr	r3, [pc, #132]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802eb8a:	2200      	movs	r2, #0
 802eb8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 802eb8e:	4b20      	ldr	r3, [pc, #128]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802eb90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802eb94:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 802eb96:	4b1e      	ldr	r3, [pc, #120]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802eb98:	220c      	movs	r2, #12
 802eb9a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802eb9c:	4b1c      	ldr	r3, [pc, #112]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802eb9e:	2200      	movs	r2, #0
 802eba0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 802eba2:	4b1b      	ldr	r3, [pc, #108]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802eba4:	2200      	movs	r2, #0
 802eba6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802eba8:	4b19      	ldr	r3, [pc, #100]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802ebaa:	2200      	movs	r2, #0
 802ebac:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802ebae:	4b18      	ldr	r3, [pc, #96]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802ebb0:	2200      	movs	r2, #0
 802ebb2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802ebb4:	4b16      	ldr	r3, [pc, #88]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802ebb6:	2220      	movs	r2, #32
 802ebb8:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802ebba:	4b15      	ldr	r3, [pc, #84]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802ebbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802ebc0:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 802ebc2:	4813      	ldr	r0, [pc, #76]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802ebc4:	f00a fbb0 	bl	8039328 <HAL_UART_Init>
 802ebc8:	4603      	mov	r3, r0
 802ebca:	2b00      	cmp	r3, #0
 802ebcc:	d001      	beq.n	802ebd2 <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 802ebce:	f7ff f9cb 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802ebd2:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802ebd6:	480e      	ldr	r0, [pc, #56]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802ebd8:	f00d f8fc 	bl	803bdd4 <HAL_UARTEx_SetTxFifoThreshold>
 802ebdc:	4603      	mov	r3, r0
 802ebde:	2b00      	cmp	r3, #0
 802ebe0:	d001      	beq.n	802ebe6 <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 802ebe2:	f7ff f9c1 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802ebe6:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802ebea:	4809      	ldr	r0, [pc, #36]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802ebec:	f00d f930 	bl	803be50 <HAL_UARTEx_SetRxFifoThreshold>
 802ebf0:	4603      	mov	r3, r0
 802ebf2:	2b00      	cmp	r3, #0
 802ebf4:	d001      	beq.n	802ebfa <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 802ebf6:	f7ff f9b7 	bl	802df68 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 802ebfa:	4805      	ldr	r0, [pc, #20]	; (802ec10 <MX_USART3_UART_Init+0xa0>)
 802ebfc:	f00d f876 	bl	803bcec <HAL_UARTEx_EnableFifoMode>
 802ec00:	4603      	mov	r3, r0
 802ec02:	2b00      	cmp	r3, #0
 802ec04:	d001      	beq.n	802ec0a <MX_USART3_UART_Init+0x9a>
  {
    Error_Handler();
 802ec06:	f7ff f9af 	bl	802df68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 802ec0a:	bf00      	nop
 802ec0c:	bd80      	pop	{r7, pc}
 802ec0e:	bf00      	nop
 802ec10:	24023f10 	.word	0x24023f10
 802ec14:	40004800 	.word	0x40004800
 802ec18:	001312d0 	.word	0x001312d0

0802ec1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 802ec1c:	b580      	push	{r7, lr}
 802ec1e:	b0c0      	sub	sp, #256	; 0x100
 802ec20:	af00      	add	r7, sp, #0
 802ec22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802ec24:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802ec28:	2200      	movs	r2, #0
 802ec2a:	601a      	str	r2, [r3, #0]
 802ec2c:	605a      	str	r2, [r3, #4]
 802ec2e:	609a      	str	r2, [r3, #8]
 802ec30:	60da      	str	r2, [r3, #12]
 802ec32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802ec34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802ec38:	22bc      	movs	r2, #188	; 0xbc
 802ec3a:	2100      	movs	r1, #0
 802ec3c:	4618      	mov	r0, r3
 802ec3e:	f011 fb55 	bl	80402ec <memset>
  if(uartHandle->Instance==UART4)
 802ec42:	687b      	ldr	r3, [r7, #4]
 802ec44:	681b      	ldr	r3, [r3, #0]
 802ec46:	4ac2      	ldr	r2, [pc, #776]	; (802ef50 <HAL_UART_MspInit+0x334>)
 802ec48:	4293      	cmp	r3, r2
 802ec4a:	d14a      	bne.n	802ece2 <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 802ec4c:	2302      	movs	r3, #2
 802ec4e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802ec50:	2300      	movs	r3, #0
 802ec52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802ec56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802ec5a:	4618      	mov	r0, r3
 802ec5c:	f007 f9dc 	bl	8036018 <HAL_RCCEx_PeriphCLKConfig>
 802ec60:	4603      	mov	r3, r0
 802ec62:	2b00      	cmp	r3, #0
 802ec64:	d001      	beq.n	802ec6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 802ec66:	f7ff f97f 	bl	802df68 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 802ec6a:	4bba      	ldr	r3, [pc, #744]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ec6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ec70:	4ab8      	ldr	r2, [pc, #736]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ec72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802ec76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802ec7a:	4bb6      	ldr	r3, [pc, #728]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ec7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ec80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802ec84:	62fb      	str	r3, [r7, #44]	; 0x2c
 802ec86:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802ec88:	4bb2      	ldr	r3, [pc, #712]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ec8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ec8e:	4ab1      	ldr	r2, [pc, #708]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ec90:	f043 0301 	orr.w	r3, r3, #1
 802ec94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802ec98:	4bae      	ldr	r3, [pc, #696]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ec9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ec9e:	f003 0301 	and.w	r3, r3, #1
 802eca2:	62bb      	str	r3, [r7, #40]	; 0x28
 802eca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802eca6:	2303      	movs	r3, #3
 802eca8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802ecac:	2302      	movs	r3, #2
 802ecae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ecb2:	2300      	movs	r3, #0
 802ecb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802ecb8:	2300      	movs	r3, #0
 802ecba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802ecbe:	2308      	movs	r3, #8
 802ecc0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802ecc4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802ecc8:	4619      	mov	r1, r3
 802ecca:	48a3      	ldr	r0, [pc, #652]	; (802ef58 <HAL_UART_MspInit+0x33c>)
 802eccc:	f003 fd54 	bl	8032778 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 802ecd0:	2200      	movs	r2, #0
 802ecd2:	2100      	movs	r1, #0
 802ecd4:	2034      	movs	r0, #52	; 0x34
 802ecd6:	f000 fcfc 	bl	802f6d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 802ecda:	2034      	movs	r0, #52	; 0x34
 802ecdc:	f000 fd13 	bl	802f706 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 802ece0:	e130      	b.n	802ef44 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 802ece2:	687b      	ldr	r3, [r7, #4]
 802ece4:	681b      	ldr	r3, [r3, #0]
 802ece6:	4a9d      	ldr	r2, [pc, #628]	; (802ef5c <HAL_UART_MspInit+0x340>)
 802ece8:	4293      	cmp	r3, r2
 802ecea:	d143      	bne.n	802ed74 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 802ecec:	2302      	movs	r3, #2
 802ecee:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802ecf0:	2300      	movs	r3, #0
 802ecf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802ecf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802ecfa:	4618      	mov	r0, r3
 802ecfc:	f007 f98c 	bl	8036018 <HAL_RCCEx_PeriphCLKConfig>
 802ed00:	4603      	mov	r3, r0
 802ed02:	2b00      	cmp	r3, #0
 802ed04:	d001      	beq.n	802ed0a <HAL_UART_MspInit+0xee>
      Error_Handler();
 802ed06:	f7ff f92f 	bl	802df68 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 802ed0a:	4b92      	ldr	r3, [pc, #584]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ed0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ed10:	4a90      	ldr	r2, [pc, #576]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ed12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802ed16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802ed1a:	4b8e      	ldr	r3, [pc, #568]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ed1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ed20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802ed24:	627b      	str	r3, [r7, #36]	; 0x24
 802ed26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802ed28:	4b8a      	ldr	r3, [pc, #552]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ed2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ed2e:	4a89      	ldr	r2, [pc, #548]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ed30:	f043 0310 	orr.w	r3, r3, #16
 802ed34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802ed38:	4b86      	ldr	r3, [pc, #536]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ed3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ed3e:	f003 0310 	and.w	r3, r3, #16
 802ed42:	623b      	str	r3, [r7, #32]
 802ed44:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 802ed46:	f44f 73c0 	mov.w	r3, #384	; 0x180
 802ed4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802ed4e:	2302      	movs	r3, #2
 802ed50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ed54:	2300      	movs	r3, #0
 802ed56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802ed5a:	2300      	movs	r3, #0
 802ed5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 802ed60:	2307      	movs	r3, #7
 802ed62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802ed66:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802ed6a:	4619      	mov	r1, r3
 802ed6c:	487c      	ldr	r0, [pc, #496]	; (802ef60 <HAL_UART_MspInit+0x344>)
 802ed6e:	f003 fd03 	bl	8032778 <HAL_GPIO_Init>
}
 802ed72:	e0e7      	b.n	802ef44 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 802ed74:	687b      	ldr	r3, [r7, #4]
 802ed76:	681b      	ldr	r3, [r3, #0]
 802ed78:	4a7a      	ldr	r2, [pc, #488]	; (802ef64 <HAL_UART_MspInit+0x348>)
 802ed7a:	4293      	cmp	r3, r2
 802ed7c:	d14a      	bne.n	802ee14 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 802ed7e:	2302      	movs	r3, #2
 802ed80:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802ed82:	2300      	movs	r3, #0
 802ed84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802ed88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802ed8c:	4618      	mov	r0, r3
 802ed8e:	f007 f943 	bl	8036018 <HAL_RCCEx_PeriphCLKConfig>
 802ed92:	4603      	mov	r3, r0
 802ed94:	2b00      	cmp	r3, #0
 802ed96:	d001      	beq.n	802ed9c <HAL_UART_MspInit+0x180>
      Error_Handler();
 802ed98:	f7ff f8e6 	bl	802df68 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 802ed9c:	4b6d      	ldr	r3, [pc, #436]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ed9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802eda2:	4a6c      	ldr	r2, [pc, #432]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802eda4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802eda8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802edac:	4b69      	ldr	r3, [pc, #420]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802edae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802edb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802edb6:	61fb      	str	r3, [r7, #28]
 802edb8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802edba:	4b66      	ldr	r3, [pc, #408]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802edbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802edc0:	4a64      	ldr	r2, [pc, #400]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802edc2:	f043 0310 	orr.w	r3, r3, #16
 802edc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802edca:	4b62      	ldr	r3, [pc, #392]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802edcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802edd0:	f003 0310 	and.w	r3, r3, #16
 802edd4:	61bb      	str	r3, [r7, #24]
 802edd6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802edd8:	2303      	movs	r3, #3
 802edda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802edde:	2302      	movs	r3, #2
 802ede0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ede4:	2300      	movs	r3, #0
 802ede6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802edea:	2300      	movs	r3, #0
 802edec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 802edf0:	2308      	movs	r3, #8
 802edf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802edf6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802edfa:	4619      	mov	r1, r3
 802edfc:	4858      	ldr	r0, [pc, #352]	; (802ef60 <HAL_UART_MspInit+0x344>)
 802edfe:	f003 fcbb 	bl	8032778 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 802ee02:	2200      	movs	r2, #0
 802ee04:	2102      	movs	r1, #2
 802ee06:	2053      	movs	r0, #83	; 0x53
 802ee08:	f000 fc63 	bl	802f6d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 802ee0c:	2053      	movs	r0, #83	; 0x53
 802ee0e:	f000 fc7a 	bl	802f706 <HAL_NVIC_EnableIRQ>
}
 802ee12:	e097      	b.n	802ef44 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 802ee14:	687b      	ldr	r3, [r7, #4]
 802ee16:	681b      	ldr	r3, [r3, #0]
 802ee18:	4a53      	ldr	r2, [pc, #332]	; (802ef68 <HAL_UART_MspInit+0x34c>)
 802ee1a:	4293      	cmp	r3, r2
 802ee1c:	d142      	bne.n	802eea4 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 802ee1e:	2302      	movs	r3, #2
 802ee20:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802ee22:	2300      	movs	r3, #0
 802ee24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802ee28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802ee2c:	4618      	mov	r0, r3
 802ee2e:	f007 f8f3 	bl	8036018 <HAL_RCCEx_PeriphCLKConfig>
 802ee32:	4603      	mov	r3, r0
 802ee34:	2b00      	cmp	r3, #0
 802ee36:	d001      	beq.n	802ee3c <HAL_UART_MspInit+0x220>
      Error_Handler();
 802ee38:	f7ff f896 	bl	802df68 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 802ee3c:	4b45      	ldr	r3, [pc, #276]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ee3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ee42:	4a44      	ldr	r2, [pc, #272]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ee44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802ee48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802ee4c:	4b41      	ldr	r3, [pc, #260]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ee4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ee52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802ee56:	617b      	str	r3, [r7, #20]
 802ee58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802ee5a:	4b3e      	ldr	r3, [pc, #248]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ee5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ee60:	4a3c      	ldr	r2, [pc, #240]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ee62:	f043 0301 	orr.w	r3, r3, #1
 802ee66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802ee6a:	4b3a      	ldr	r3, [pc, #232]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802ee6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ee70:	f003 0301 	and.w	r3, r3, #1
 802ee74:	613b      	str	r3, [r7, #16]
 802ee76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802ee78:	230c      	movs	r3, #12
 802ee7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802ee7e:	2302      	movs	r3, #2
 802ee80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ee84:	2300      	movs	r3, #0
 802ee86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802ee8a:	2300      	movs	r3, #0
 802ee8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802ee90:	2307      	movs	r3, #7
 802ee92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802ee96:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802ee9a:	4619      	mov	r1, r3
 802ee9c:	482e      	ldr	r0, [pc, #184]	; (802ef58 <HAL_UART_MspInit+0x33c>)
 802ee9e:	f003 fc6b 	bl	8032778 <HAL_GPIO_Init>
}
 802eea2:	e04f      	b.n	802ef44 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 802eea4:	687b      	ldr	r3, [r7, #4]
 802eea6:	681b      	ldr	r3, [r3, #0]
 802eea8:	4a30      	ldr	r2, [pc, #192]	; (802ef6c <HAL_UART_MspInit+0x350>)
 802eeaa:	4293      	cmp	r3, r2
 802eeac:	d14a      	bne.n	802ef44 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 802eeae:	2302      	movs	r3, #2
 802eeb0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802eeb2:	2300      	movs	r3, #0
 802eeb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802eeb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802eebc:	4618      	mov	r0, r3
 802eebe:	f007 f8ab 	bl	8036018 <HAL_RCCEx_PeriphCLKConfig>
 802eec2:	4603      	mov	r3, r0
 802eec4:	2b00      	cmp	r3, #0
 802eec6:	d001      	beq.n	802eecc <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 802eec8:	f7ff f84e 	bl	802df68 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 802eecc:	4b21      	ldr	r3, [pc, #132]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802eece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802eed2:	4a20      	ldr	r2, [pc, #128]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802eed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802eed8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802eedc:	4b1d      	ldr	r3, [pc, #116]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802eede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802eee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802eee6:	60fb      	str	r3, [r7, #12]
 802eee8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802eeea:	4b1a      	ldr	r3, [pc, #104]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802eeec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802eef0:	4a18      	ldr	r2, [pc, #96]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802eef2:	f043 0308 	orr.w	r3, r3, #8
 802eef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802eefa:	4b16      	ldr	r3, [pc, #88]	; (802ef54 <HAL_UART_MspInit+0x338>)
 802eefc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ef00:	f003 0308 	and.w	r3, r3, #8
 802ef04:	60bb      	str	r3, [r7, #8]
 802ef06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 802ef08:	f44f 7340 	mov.w	r3, #768	; 0x300
 802ef0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802ef10:	2302      	movs	r3, #2
 802ef12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ef16:	2300      	movs	r3, #0
 802ef18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802ef1c:	2300      	movs	r3, #0
 802ef1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 802ef22:	2307      	movs	r3, #7
 802ef24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802ef28:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802ef2c:	4619      	mov	r1, r3
 802ef2e:	4810      	ldr	r0, [pc, #64]	; (802ef70 <HAL_UART_MspInit+0x354>)
 802ef30:	f003 fc22 	bl	8032778 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 802ef34:	2200      	movs	r2, #0
 802ef36:	2100      	movs	r1, #0
 802ef38:	2027      	movs	r0, #39	; 0x27
 802ef3a:	f000 fbca 	bl	802f6d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 802ef3e:	2027      	movs	r0, #39	; 0x27
 802ef40:	f000 fbe1 	bl	802f706 <HAL_NVIC_EnableIRQ>
}
 802ef44:	bf00      	nop
 802ef46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802ef4a:	46bd      	mov	sp, r7
 802ef4c:	bd80      	pop	{r7, pc}
 802ef4e:	bf00      	nop
 802ef50:	40004c00 	.word	0x40004c00
 802ef54:	58024400 	.word	0x58024400
 802ef58:	58020000 	.word	0x58020000
 802ef5c:	40007800 	.word	0x40007800
 802ef60:	58021000 	.word	0x58021000
 802ef64:	40007c00 	.word	0x40007c00
 802ef68:	40004400 	.word	0x40004400
 802ef6c:	40004800 	.word	0x40004800
 802ef70:	58020c00 	.word	0x58020c00

0802ef74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 802ef74:	f8df d034 	ldr.w	sp, [pc, #52]	; 802efac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 802ef78:	f7ff fae2 	bl	802e540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802ef7c:	480c      	ldr	r0, [pc, #48]	; (802efb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802ef7e:	490d      	ldr	r1, [pc, #52]	; (802efb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802ef80:	4a0d      	ldr	r2, [pc, #52]	; (802efb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 802ef82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802ef84:	e002      	b.n	802ef8c <LoopCopyDataInit>

0802ef86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802ef86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802ef88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802ef8a:	3304      	adds	r3, #4

0802ef8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802ef8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802ef8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802ef90:	d3f9      	bcc.n	802ef86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802ef92:	4a0a      	ldr	r2, [pc, #40]	; (802efbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802ef94:	4c0a      	ldr	r4, [pc, #40]	; (802efc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 802ef96:	2300      	movs	r3, #0
  b LoopFillZerobss
 802ef98:	e001      	b.n	802ef9e <LoopFillZerobss>

0802ef9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802ef9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802ef9c:	3204      	adds	r2, #4

0802ef9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802ef9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802efa0:	d3fb      	bcc.n	802ef9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802efa2:	f011 f947 	bl	8040234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802efa6:	f7fe fe45 	bl	802dc34 <main>
  bx  lr
 802efaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 802efac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 802efb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 802efb4:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 802efb8:	0805c740 	.word	0x0805c740
  ldr r2, =_sbss
 802efbc:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 802efc0:	24025bc4 	.word	0x24025bc4

0802efc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802efc4:	e7fe      	b.n	802efc4 <ADC3_IRQHandler>
	...

0802efc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802efc8:	b580      	push	{r7, lr}
 802efca:	b082      	sub	sp, #8
 802efcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802efce:	2003      	movs	r0, #3
 802efd0:	f000 fb74 	bl	802f6bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802efd4:	f006 fe4a 	bl	8035c6c <HAL_RCC_GetSysClockFreq>
 802efd8:	4602      	mov	r2, r0
 802efda:	4b15      	ldr	r3, [pc, #84]	; (802f030 <HAL_Init+0x68>)
 802efdc:	699b      	ldr	r3, [r3, #24]
 802efde:	0a1b      	lsrs	r3, r3, #8
 802efe0:	f003 030f 	and.w	r3, r3, #15
 802efe4:	4913      	ldr	r1, [pc, #76]	; (802f034 <HAL_Init+0x6c>)
 802efe6:	5ccb      	ldrb	r3, [r1, r3]
 802efe8:	f003 031f 	and.w	r3, r3, #31
 802efec:	fa22 f303 	lsr.w	r3, r2, r3
 802eff0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802eff2:	4b0f      	ldr	r3, [pc, #60]	; (802f030 <HAL_Init+0x68>)
 802eff4:	699b      	ldr	r3, [r3, #24]
 802eff6:	f003 030f 	and.w	r3, r3, #15
 802effa:	4a0e      	ldr	r2, [pc, #56]	; (802f034 <HAL_Init+0x6c>)
 802effc:	5cd3      	ldrb	r3, [r2, r3]
 802effe:	f003 031f 	and.w	r3, r3, #31
 802f002:	687a      	ldr	r2, [r7, #4]
 802f004:	fa22 f303 	lsr.w	r3, r2, r3
 802f008:	4a0b      	ldr	r2, [pc, #44]	; (802f038 <HAL_Init+0x70>)
 802f00a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802f00c:	4a0b      	ldr	r2, [pc, #44]	; (802f03c <HAL_Init+0x74>)
 802f00e:	687b      	ldr	r3, [r7, #4]
 802f010:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802f012:	200f      	movs	r0, #15
 802f014:	f000 f814 	bl	802f040 <HAL_InitTick>
 802f018:	4603      	mov	r3, r0
 802f01a:	2b00      	cmp	r3, #0
 802f01c:	d001      	beq.n	802f022 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802f01e:	2301      	movs	r3, #1
 802f020:	e002      	b.n	802f028 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802f022:	f7ff f8e3 	bl	802e1ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802f026:	2300      	movs	r3, #0
}
 802f028:	4618      	mov	r0, r3
 802f02a:	3708      	adds	r7, #8
 802f02c:	46bd      	mov	sp, r7
 802f02e:	bd80      	pop	{r7, pc}
 802f030:	58024400 	.word	0x58024400
 802f034:	0805c614 	.word	0x0805c614
 802f038:	24000008 	.word	0x24000008
 802f03c:	24000004 	.word	0x24000004

0802f040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802f040:	b580      	push	{r7, lr}
 802f042:	b082      	sub	sp, #8
 802f044:	af00      	add	r7, sp, #0
 802f046:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802f048:	4b15      	ldr	r3, [pc, #84]	; (802f0a0 <HAL_InitTick+0x60>)
 802f04a:	781b      	ldrb	r3, [r3, #0]
 802f04c:	2b00      	cmp	r3, #0
 802f04e:	d101      	bne.n	802f054 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802f050:	2301      	movs	r3, #1
 802f052:	e021      	b.n	802f098 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 802f054:	4b13      	ldr	r3, [pc, #76]	; (802f0a4 <HAL_InitTick+0x64>)
 802f056:	681a      	ldr	r2, [r3, #0]
 802f058:	4b11      	ldr	r3, [pc, #68]	; (802f0a0 <HAL_InitTick+0x60>)
 802f05a:	781b      	ldrb	r3, [r3, #0]
 802f05c:	4619      	mov	r1, r3
 802f05e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802f062:	fbb3 f3f1 	udiv	r3, r3, r1
 802f066:	fbb2 f3f3 	udiv	r3, r2, r3
 802f06a:	4618      	mov	r0, r3
 802f06c:	f000 fb59 	bl	802f722 <HAL_SYSTICK_Config>
 802f070:	4603      	mov	r3, r0
 802f072:	2b00      	cmp	r3, #0
 802f074:	d001      	beq.n	802f07a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802f076:	2301      	movs	r3, #1
 802f078:	e00e      	b.n	802f098 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802f07a:	687b      	ldr	r3, [r7, #4]
 802f07c:	2b0f      	cmp	r3, #15
 802f07e:	d80a      	bhi.n	802f096 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802f080:	2200      	movs	r2, #0
 802f082:	6879      	ldr	r1, [r7, #4]
 802f084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802f088:	f000 fb23 	bl	802f6d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802f08c:	4a06      	ldr	r2, [pc, #24]	; (802f0a8 <HAL_InitTick+0x68>)
 802f08e:	687b      	ldr	r3, [r7, #4]
 802f090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802f092:	2300      	movs	r3, #0
 802f094:	e000      	b.n	802f098 <HAL_InitTick+0x58>
    return HAL_ERROR;
 802f096:	2301      	movs	r3, #1
}
 802f098:	4618      	mov	r0, r3
 802f09a:	3708      	adds	r7, #8
 802f09c:	46bd      	mov	sp, r7
 802f09e:	bd80      	pop	{r7, pc}
 802f0a0:	24000010 	.word	0x24000010
 802f0a4:	24000004 	.word	0x24000004
 802f0a8:	2400000c 	.word	0x2400000c

0802f0ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802f0ac:	b480      	push	{r7}
 802f0ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802f0b0:	4b06      	ldr	r3, [pc, #24]	; (802f0cc <HAL_IncTick+0x20>)
 802f0b2:	781b      	ldrb	r3, [r3, #0]
 802f0b4:	461a      	mov	r2, r3
 802f0b6:	4b06      	ldr	r3, [pc, #24]	; (802f0d0 <HAL_IncTick+0x24>)
 802f0b8:	681b      	ldr	r3, [r3, #0]
 802f0ba:	4413      	add	r3, r2
 802f0bc:	4a04      	ldr	r2, [pc, #16]	; (802f0d0 <HAL_IncTick+0x24>)
 802f0be:	6013      	str	r3, [r2, #0]
}
 802f0c0:	bf00      	nop
 802f0c2:	46bd      	mov	sp, r7
 802f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f0c8:	4770      	bx	lr
 802f0ca:	bf00      	nop
 802f0cc:	24000010 	.word	0x24000010
 802f0d0:	24023fa0 	.word	0x24023fa0

0802f0d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802f0d4:	b480      	push	{r7}
 802f0d6:	af00      	add	r7, sp, #0
  return uwTick;
 802f0d8:	4b03      	ldr	r3, [pc, #12]	; (802f0e8 <HAL_GetTick+0x14>)
 802f0da:	681b      	ldr	r3, [r3, #0]
}
 802f0dc:	4618      	mov	r0, r3
 802f0de:	46bd      	mov	sp, r7
 802f0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f0e4:	4770      	bx	lr
 802f0e6:	bf00      	nop
 802f0e8:	24023fa0 	.word	0x24023fa0

0802f0ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802f0ec:	b580      	push	{r7, lr}
 802f0ee:	b084      	sub	sp, #16
 802f0f0:	af00      	add	r7, sp, #0
 802f0f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802f0f4:	f7ff ffee 	bl	802f0d4 <HAL_GetTick>
 802f0f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802f0fa:	687b      	ldr	r3, [r7, #4]
 802f0fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802f0fe:	68fb      	ldr	r3, [r7, #12]
 802f100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802f104:	d005      	beq.n	802f112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802f106:	4b0a      	ldr	r3, [pc, #40]	; (802f130 <HAL_Delay+0x44>)
 802f108:	781b      	ldrb	r3, [r3, #0]
 802f10a:	461a      	mov	r2, r3
 802f10c:	68fb      	ldr	r3, [r7, #12]
 802f10e:	4413      	add	r3, r2
 802f110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802f112:	bf00      	nop
 802f114:	f7ff ffde 	bl	802f0d4 <HAL_GetTick>
 802f118:	4602      	mov	r2, r0
 802f11a:	68bb      	ldr	r3, [r7, #8]
 802f11c:	1ad3      	subs	r3, r2, r3
 802f11e:	68fa      	ldr	r2, [r7, #12]
 802f120:	429a      	cmp	r2, r3
 802f122:	d8f7      	bhi.n	802f114 <HAL_Delay+0x28>
  {
  }
}
 802f124:	bf00      	nop
 802f126:	bf00      	nop
 802f128:	3710      	adds	r7, #16
 802f12a:	46bd      	mov	sp, r7
 802f12c:	bd80      	pop	{r7, pc}
 802f12e:	bf00      	nop
 802f130:	24000010 	.word	0x24000010

0802f134 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 802f134:	b480      	push	{r7}
 802f136:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 802f138:	4b03      	ldr	r3, [pc, #12]	; (802f148 <HAL_GetREVID+0x14>)
 802f13a:	681b      	ldr	r3, [r3, #0]
 802f13c:	0c1b      	lsrs	r3, r3, #16
}
 802f13e:	4618      	mov	r0, r3
 802f140:	46bd      	mov	sp, r7
 802f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f146:	4770      	bx	lr
 802f148:	5c001000 	.word	0x5c001000

0802f14c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 802f14c:	b580      	push	{r7, lr}
 802f14e:	b088      	sub	sp, #32
 802f150:	af00      	add	r7, sp, #0
 802f152:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 802f154:	2300      	movs	r3, #0
 802f156:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 802f158:	2300      	movs	r3, #0
 802f15a:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802f15c:	687b      	ldr	r3, [r7, #4]
 802f15e:	2b00      	cmp	r3, #0
 802f160:	d102      	bne.n	802f168 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 802f162:	2301      	movs	r3, #1
 802f164:	77fb      	strb	r3, [r7, #31]
 802f166:	e10e      	b.n	802f386 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802f168:	687b      	ldr	r3, [r7, #4]
 802f16a:	681b      	ldr	r3, [r3, #0]
 802f16c:	681b      	ldr	r3, [r3, #0]
 802f16e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802f172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802f176:	d102      	bne.n	802f17e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 802f178:	2301      	movs	r3, #1
 802f17a:	77fb      	strb	r3, [r7, #31]
 802f17c:	e103      	b.n	802f386 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 802f17e:	687b      	ldr	r3, [r7, #4]
 802f180:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802f184:	b2db      	uxtb	r3, r3
 802f186:	2b00      	cmp	r3, #0
 802f188:	d109      	bne.n	802f19e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 802f18a:	687b      	ldr	r3, [r7, #4]
 802f18c:	2200      	movs	r2, #0
 802f18e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 802f192:	687b      	ldr	r3, [r7, #4]
 802f194:	2200      	movs	r2, #0
 802f196:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 802f198:	6878      	ldr	r0, [r7, #4]
 802f19a:	f7fe fad1 	bl	802d740 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 802f19e:	687b      	ldr	r3, [r7, #4]
 802f1a0:	681b      	ldr	r3, [r3, #0]
 802f1a2:	681b      	ldr	r3, [r3, #0]
 802f1a4:	f003 0304 	and.w	r3, r3, #4
 802f1a8:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802f1aa:	687b      	ldr	r3, [r7, #4]
 802f1ac:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 802f1ae:	687b      	ldr	r3, [r7, #4]
 802f1b0:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802f1b2:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 802f1b4:	687b      	ldr	r3, [r7, #4]
 802f1b6:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 802f1b8:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 802f1ba:	687b      	ldr	r3, [r7, #4]
 802f1bc:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 802f1be:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 802f1c0:	687b      	ldr	r3, [r7, #4]
 802f1c2:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 802f1c4:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 802f1c6:	687b      	ldr	r3, [r7, #4]
 802f1c8:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802f1ca:	4313      	orrs	r3, r2
 802f1cc:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 802f1ce:	687b      	ldr	r3, [r7, #4]
 802f1d0:	681b      	ldr	r3, [r3, #0]
 802f1d2:	681a      	ldr	r2, [r3, #0]
 802f1d4:	4b6e      	ldr	r3, [pc, #440]	; (802f390 <HAL_COMP_Init+0x244>)
 802f1d6:	4013      	ands	r3, r2
 802f1d8:	687a      	ldr	r2, [r7, #4]
 802f1da:	6812      	ldr	r2, [r2, #0]
 802f1dc:	6979      	ldr	r1, [r7, #20]
 802f1de:	430b      	orrs	r3, r1
 802f1e0:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 802f1e2:	687b      	ldr	r3, [r7, #4]
 802f1e4:	685b      	ldr	r3, [r3, #4]
 802f1e6:	2b10      	cmp	r3, #16
 802f1e8:	d108      	bne.n	802f1fc <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802f1ea:	687b      	ldr	r3, [r7, #4]
 802f1ec:	681b      	ldr	r3, [r3, #0]
 802f1ee:	681a      	ldr	r2, [r3, #0]
 802f1f0:	687b      	ldr	r3, [r7, #4]
 802f1f2:	681b      	ldr	r3, [r3, #0]
 802f1f4:	f042 0210 	orr.w	r2, r2, #16
 802f1f8:	601a      	str	r2, [r3, #0]
 802f1fa:	e007      	b.n	802f20c <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802f1fc:	687b      	ldr	r3, [r7, #4]
 802f1fe:	681b      	ldr	r3, [r3, #0]
 802f200:	681a      	ldr	r2, [r3, #0]
 802f202:	687b      	ldr	r3, [r7, #4]
 802f204:	681b      	ldr	r3, [r3, #0]
 802f206:	f022 0210 	bic.w	r2, r2, #16
 802f20a:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 802f20c:	687b      	ldr	r3, [r7, #4]
 802f20e:	681b      	ldr	r3, [r3, #0]
 802f210:	681b      	ldr	r3, [r3, #0]
 802f212:	f003 0304 	and.w	r3, r3, #4
 802f216:	2b00      	cmp	r3, #0
 802f218:	d016      	beq.n	802f248 <HAL_COMP_Init+0xfc>
 802f21a:	69bb      	ldr	r3, [r7, #24]
 802f21c:	2b00      	cmp	r3, #0
 802f21e:	d013      	beq.n	802f248 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802f220:	4b5c      	ldr	r3, [pc, #368]	; (802f394 <HAL_COMP_Init+0x248>)
 802f222:	681b      	ldr	r3, [r3, #0]
 802f224:	099b      	lsrs	r3, r3, #6
 802f226:	4a5c      	ldr	r2, [pc, #368]	; (802f398 <HAL_COMP_Init+0x24c>)
 802f228:	fba2 2303 	umull	r2, r3, r2, r3
 802f22c:	099b      	lsrs	r3, r3, #6
 802f22e:	1c5a      	adds	r2, r3, #1
 802f230:	4613      	mov	r3, r2
 802f232:	009b      	lsls	r3, r3, #2
 802f234:	4413      	add	r3, r2
 802f236:	009b      	lsls	r3, r3, #2
 802f238:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 802f23a:	e002      	b.n	802f242 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 802f23c:	68fb      	ldr	r3, [r7, #12]
 802f23e:	3b01      	subs	r3, #1
 802f240:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 802f242:	68fb      	ldr	r3, [r7, #12]
 802f244:	2b00      	cmp	r3, #0
 802f246:	d1f9      	bne.n	802f23c <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802f248:	687b      	ldr	r3, [r7, #4]
 802f24a:	681b      	ldr	r3, [r3, #0]
 802f24c:	4a53      	ldr	r2, [pc, #332]	; (802f39c <HAL_COMP_Init+0x250>)
 802f24e:	4293      	cmp	r3, r2
 802f250:	d102      	bne.n	802f258 <HAL_COMP_Init+0x10c>
 802f252:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802f256:	e001      	b.n	802f25c <HAL_COMP_Init+0x110>
 802f258:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802f25c:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 802f25e:	687b      	ldr	r3, [r7, #4]
 802f260:	6a1b      	ldr	r3, [r3, #32]
 802f262:	f003 0303 	and.w	r3, r3, #3
 802f266:	2b00      	cmp	r3, #0
 802f268:	d06d      	beq.n	802f346 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 802f26a:	687b      	ldr	r3, [r7, #4]
 802f26c:	6a1b      	ldr	r3, [r3, #32]
 802f26e:	f003 0310 	and.w	r3, r3, #16
 802f272:	2b00      	cmp	r3, #0
 802f274:	d008      	beq.n	802f288 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 802f276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802f27a:	681a      	ldr	r2, [r3, #0]
 802f27c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802f280:	693b      	ldr	r3, [r7, #16]
 802f282:	4313      	orrs	r3, r2
 802f284:	600b      	str	r3, [r1, #0]
 802f286:	e008      	b.n	802f29a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 802f288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802f28c:	681a      	ldr	r2, [r3, #0]
 802f28e:	693b      	ldr	r3, [r7, #16]
 802f290:	43db      	mvns	r3, r3
 802f292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802f296:	4013      	ands	r3, r2
 802f298:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 802f29a:	687b      	ldr	r3, [r7, #4]
 802f29c:	6a1b      	ldr	r3, [r3, #32]
 802f29e:	f003 0320 	and.w	r3, r3, #32
 802f2a2:	2b00      	cmp	r3, #0
 802f2a4:	d008      	beq.n	802f2b8 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 802f2a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802f2aa:	685a      	ldr	r2, [r3, #4]
 802f2ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802f2b0:	693b      	ldr	r3, [r7, #16]
 802f2b2:	4313      	orrs	r3, r2
 802f2b4:	604b      	str	r3, [r1, #4]
 802f2b6:	e008      	b.n	802f2ca <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 802f2b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802f2bc:	685a      	ldr	r2, [r3, #4]
 802f2be:	693b      	ldr	r3, [r7, #16]
 802f2c0:	43db      	mvns	r3, r3
 802f2c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802f2c6:	4013      	ands	r3, r2
 802f2c8:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 802f2ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802f2ce:	693b      	ldr	r3, [r7, #16]
 802f2d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 802f2d4:	687b      	ldr	r3, [r7, #4]
 802f2d6:	6a1b      	ldr	r3, [r3, #32]
 802f2d8:	f003 0302 	and.w	r3, r3, #2
 802f2dc:	2b00      	cmp	r3, #0
 802f2de:	d00a      	beq.n	802f2f6 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 802f2e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802f2e4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802f2e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802f2ec:	693b      	ldr	r3, [r7, #16]
 802f2ee:	4313      	orrs	r3, r2
 802f2f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802f2f4:	e00a      	b.n	802f30c <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 802f2f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802f2fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802f2fe:	693b      	ldr	r3, [r7, #16]
 802f300:	43db      	mvns	r3, r3
 802f302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802f306:	4013      	ands	r3, r2
 802f308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 802f30c:	687b      	ldr	r3, [r7, #4]
 802f30e:	6a1b      	ldr	r3, [r3, #32]
 802f310:	f003 0301 	and.w	r3, r3, #1
 802f314:	2b00      	cmp	r3, #0
 802f316:	d00a      	beq.n	802f32e <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 802f318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802f31c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802f320:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802f324:	693b      	ldr	r3, [r7, #16]
 802f326:	4313      	orrs	r3, r2
 802f328:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802f32c:	e021      	b.n	802f372 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 802f32e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802f332:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802f336:	693b      	ldr	r3, [r7, #16]
 802f338:	43db      	mvns	r3, r3
 802f33a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802f33e:	4013      	ands	r3, r2
 802f340:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802f344:	e015      	b.n	802f372 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 802f346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802f34a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802f34e:	693b      	ldr	r3, [r7, #16]
 802f350:	43db      	mvns	r3, r3
 802f352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802f356:	4013      	ands	r3, r2
 802f358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 802f35c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802f360:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802f364:	693b      	ldr	r3, [r7, #16]
 802f366:	43db      	mvns	r3, r3
 802f368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802f36c:	4013      	ands	r3, r2
 802f36e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 802f372:	687b      	ldr	r3, [r7, #4]
 802f374:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802f378:	b2db      	uxtb	r3, r3
 802f37a:	2b00      	cmp	r3, #0
 802f37c:	d103      	bne.n	802f386 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 802f37e:	687b      	ldr	r3, [r7, #4]
 802f380:	2201      	movs	r2, #1
 802f382:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 802f386:	7ffb      	ldrb	r3, [r7, #31]
}
 802f388:	4618      	mov	r0, r3
 802f38a:	3720      	adds	r7, #32
 802f38c:	46bd      	mov	sp, r7
 802f38e:	bd80      	pop	{r7, pc}
 802f390:	f0e8cce1 	.word	0xf0e8cce1
 802f394:	24000004 	.word	0x24000004
 802f398:	053e2d63 	.word	0x053e2d63
 802f39c:	5800380c 	.word	0x5800380c

0802f3a0 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 802f3a0:	b480      	push	{r7}
 802f3a2:	b085      	sub	sp, #20
 802f3a4:	af00      	add	r7, sp, #0
 802f3a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 802f3a8:	2300      	movs	r3, #0
 802f3aa:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 802f3ac:	2300      	movs	r3, #0
 802f3ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802f3b0:	687b      	ldr	r3, [r7, #4]
 802f3b2:	2b00      	cmp	r3, #0
 802f3b4:	d102      	bne.n	802f3bc <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 802f3b6:	2301      	movs	r3, #1
 802f3b8:	73fb      	strb	r3, [r7, #15]
 802f3ba:	e030      	b.n	802f41e <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802f3bc:	687b      	ldr	r3, [r7, #4]
 802f3be:	681b      	ldr	r3, [r3, #0]
 802f3c0:	681b      	ldr	r3, [r3, #0]
 802f3c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802f3c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802f3ca:	d102      	bne.n	802f3d2 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 802f3cc:	2301      	movs	r3, #1
 802f3ce:	73fb      	strb	r3, [r7, #15]
 802f3d0:	e025      	b.n	802f41e <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 802f3d2:	687b      	ldr	r3, [r7, #4]
 802f3d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802f3d8:	b2db      	uxtb	r3, r3
 802f3da:	2b01      	cmp	r3, #1
 802f3dc:	d11d      	bne.n	802f41a <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 802f3de:	687b      	ldr	r3, [r7, #4]
 802f3e0:	681b      	ldr	r3, [r3, #0]
 802f3e2:	681a      	ldr	r2, [r3, #0]
 802f3e4:	687b      	ldr	r3, [r7, #4]
 802f3e6:	681b      	ldr	r3, [r3, #0]
 802f3e8:	f042 0201 	orr.w	r2, r2, #1
 802f3ec:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 802f3ee:	687b      	ldr	r3, [r7, #4]
 802f3f0:	2202      	movs	r2, #2
 802f3f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802f3f6:	4b0d      	ldr	r3, [pc, #52]	; (802f42c <HAL_COMP_Start+0x8c>)
 802f3f8:	681b      	ldr	r3, [r3, #0]
 802f3fa:	099b      	lsrs	r3, r3, #6
 802f3fc:	4a0c      	ldr	r2, [pc, #48]	; (802f430 <HAL_COMP_Start+0x90>)
 802f3fe:	fba2 2303 	umull	r2, r3, r2, r3
 802f402:	099b      	lsrs	r3, r3, #6
 802f404:	3301      	adds	r3, #1
 802f406:	00db      	lsls	r3, r3, #3
 802f408:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802f40a:	e002      	b.n	802f412 <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 802f40c:	68bb      	ldr	r3, [r7, #8]
 802f40e:	3b01      	subs	r3, #1
 802f410:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802f412:	68bb      	ldr	r3, [r7, #8]
 802f414:	2b00      	cmp	r3, #0
 802f416:	d1f9      	bne.n	802f40c <HAL_COMP_Start+0x6c>
 802f418:	e001      	b.n	802f41e <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 802f41a:	2301      	movs	r3, #1
 802f41c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802f41e:	7bfb      	ldrb	r3, [r7, #15]
}
 802f420:	4618      	mov	r0, r3
 802f422:	3714      	adds	r7, #20
 802f424:	46bd      	mov	sp, r7
 802f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f42a:	4770      	bx	lr
 802f42c:	24000004 	.word	0x24000004
 802f430:	053e2d63 	.word	0x053e2d63

0802f434 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 802f434:	b580      	push	{r7, lr}
 802f436:	b084      	sub	sp, #16
 802f438:	af00      	add	r7, sp, #0
 802f43a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802f43c:	687b      	ldr	r3, [r7, #4]
 802f43e:	681b      	ldr	r3, [r3, #0]
 802f440:	4a33      	ldr	r2, [pc, #204]	; (802f510 <HAL_COMP_IRQHandler+0xdc>)
 802f442:	4293      	cmp	r3, r2
 802f444:	d102      	bne.n	802f44c <HAL_COMP_IRQHandler+0x18>
 802f446:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802f44a:	e001      	b.n	802f450 <HAL_COMP_IRQHandler+0x1c>
 802f44c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802f450:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 802f452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802f456:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802f45a:	68fb      	ldr	r3, [r7, #12]
 802f45c:	4013      	ands	r3, r2
 802f45e:	2b00      	cmp	r3, #0
 802f460:	d014      	beq.n	802f48c <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 802f462:	4b2c      	ldr	r3, [pc, #176]	; (802f514 <HAL_COMP_IRQHandler+0xe0>)
 802f464:	681b      	ldr	r3, [r3, #0]
 802f466:	f003 0310 	and.w	r3, r3, #16
 802f46a:	2b00      	cmp	r3, #0
 802f46c:	d006      	beq.n	802f47c <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 802f46e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802f472:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 802f476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 802f47a:	e004      	b.n	802f486 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 802f47c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802f480:	68fb      	ldr	r3, [r7, #12]
 802f482:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802f486:	6878      	ldr	r0, [r7, #4]
 802f488:	f7fe fd10 	bl	802deac <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 802f48c:	687b      	ldr	r3, [r7, #4]
 802f48e:	681b      	ldr	r3, [r3, #0]
 802f490:	681b      	ldr	r3, [r3, #0]
 802f492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802f496:	2b40      	cmp	r3, #64	; 0x40
 802f498:	d136      	bne.n	802f508 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 802f49a:	4b1f      	ldr	r3, [pc, #124]	; (802f518 <HAL_COMP_IRQHandler+0xe4>)
 802f49c:	681b      	ldr	r3, [r3, #0]
 802f49e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802f4a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802f4a6:	d101      	bne.n	802f4ac <HAL_COMP_IRQHandler+0x78>
 802f4a8:	2301      	movs	r3, #1
 802f4aa:	e000      	b.n	802f4ae <HAL_COMP_IRQHandler+0x7a>
 802f4ac:	2300      	movs	r3, #0
 802f4ae:	2b00      	cmp	r3, #0
 802f4b0:	d00b      	beq.n	802f4ca <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 802f4b2:	4b19      	ldr	r3, [pc, #100]	; (802f518 <HAL_COMP_IRQHandler+0xe4>)
 802f4b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802f4b8:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802f4ba:	687b      	ldr	r3, [r7, #4]
 802f4bc:	681b      	ldr	r3, [r3, #0]
 802f4be:	681a      	ldr	r2, [r3, #0]
 802f4c0:	687b      	ldr	r3, [r7, #4]
 802f4c2:	681b      	ldr	r3, [r3, #0]
 802f4c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802f4c8:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 802f4ca:	4b13      	ldr	r3, [pc, #76]	; (802f518 <HAL_COMP_IRQHandler+0xe4>)
 802f4cc:	681b      	ldr	r3, [r3, #0]
 802f4ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802f4d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802f4d6:	d101      	bne.n	802f4dc <HAL_COMP_IRQHandler+0xa8>
 802f4d8:	2301      	movs	r3, #1
 802f4da:	e000      	b.n	802f4de <HAL_COMP_IRQHandler+0xaa>
 802f4dc:	2300      	movs	r3, #0
 802f4de:	2b00      	cmp	r3, #0
 802f4e0:	d00b      	beq.n	802f4fa <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 802f4e2:	4b0d      	ldr	r3, [pc, #52]	; (802f518 <HAL_COMP_IRQHandler+0xe4>)
 802f4e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802f4e8:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802f4ea:	687b      	ldr	r3, [r7, #4]
 802f4ec:	681b      	ldr	r3, [r3, #0]
 802f4ee:	681a      	ldr	r2, [r3, #0]
 802f4f0:	687b      	ldr	r3, [r7, #4]
 802f4f2:	681b      	ldr	r3, [r3, #0]
 802f4f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802f4f8:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 802f4fa:	687b      	ldr	r3, [r7, #4]
 802f4fc:	2201      	movs	r2, #1
 802f4fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802f502:	6878      	ldr	r0, [r7, #4]
 802f504:	f7fe fcd2 	bl	802deac <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 802f508:	bf00      	nop
 802f50a:	3710      	adds	r7, #16
 802f50c:	46bd      	mov	sp, r7
 802f50e:	bd80      	pop	{r7, pc}
 802f510:	5800380c 	.word	0x5800380c
 802f514:	58003810 	.word	0x58003810
 802f518:	58003800 	.word	0x58003800

0802f51c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802f51c:	b480      	push	{r7}
 802f51e:	b085      	sub	sp, #20
 802f520:	af00      	add	r7, sp, #0
 802f522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802f524:	687b      	ldr	r3, [r7, #4]
 802f526:	f003 0307 	and.w	r3, r3, #7
 802f52a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802f52c:	4b0b      	ldr	r3, [pc, #44]	; (802f55c <__NVIC_SetPriorityGrouping+0x40>)
 802f52e:	68db      	ldr	r3, [r3, #12]
 802f530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802f532:	68ba      	ldr	r2, [r7, #8]
 802f534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802f538:	4013      	ands	r3, r2
 802f53a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802f53c:	68fb      	ldr	r3, [r7, #12]
 802f53e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802f540:	68bb      	ldr	r3, [r7, #8]
 802f542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802f544:	4b06      	ldr	r3, [pc, #24]	; (802f560 <__NVIC_SetPriorityGrouping+0x44>)
 802f546:	4313      	orrs	r3, r2
 802f548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802f54a:	4a04      	ldr	r2, [pc, #16]	; (802f55c <__NVIC_SetPriorityGrouping+0x40>)
 802f54c:	68bb      	ldr	r3, [r7, #8]
 802f54e:	60d3      	str	r3, [r2, #12]
}
 802f550:	bf00      	nop
 802f552:	3714      	adds	r7, #20
 802f554:	46bd      	mov	sp, r7
 802f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f55a:	4770      	bx	lr
 802f55c:	e000ed00 	.word	0xe000ed00
 802f560:	05fa0000 	.word	0x05fa0000

0802f564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802f564:	b480      	push	{r7}
 802f566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802f568:	4b04      	ldr	r3, [pc, #16]	; (802f57c <__NVIC_GetPriorityGrouping+0x18>)
 802f56a:	68db      	ldr	r3, [r3, #12]
 802f56c:	0a1b      	lsrs	r3, r3, #8
 802f56e:	f003 0307 	and.w	r3, r3, #7
}
 802f572:	4618      	mov	r0, r3
 802f574:	46bd      	mov	sp, r7
 802f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f57a:	4770      	bx	lr
 802f57c:	e000ed00 	.word	0xe000ed00

0802f580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802f580:	b480      	push	{r7}
 802f582:	b083      	sub	sp, #12
 802f584:	af00      	add	r7, sp, #0
 802f586:	4603      	mov	r3, r0
 802f588:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802f58a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802f58e:	2b00      	cmp	r3, #0
 802f590:	db0b      	blt.n	802f5aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802f592:	88fb      	ldrh	r3, [r7, #6]
 802f594:	f003 021f 	and.w	r2, r3, #31
 802f598:	4907      	ldr	r1, [pc, #28]	; (802f5b8 <__NVIC_EnableIRQ+0x38>)
 802f59a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802f59e:	095b      	lsrs	r3, r3, #5
 802f5a0:	2001      	movs	r0, #1
 802f5a2:	fa00 f202 	lsl.w	r2, r0, r2
 802f5a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802f5aa:	bf00      	nop
 802f5ac:	370c      	adds	r7, #12
 802f5ae:	46bd      	mov	sp, r7
 802f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f5b4:	4770      	bx	lr
 802f5b6:	bf00      	nop
 802f5b8:	e000e100 	.word	0xe000e100

0802f5bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802f5bc:	b480      	push	{r7}
 802f5be:	b083      	sub	sp, #12
 802f5c0:	af00      	add	r7, sp, #0
 802f5c2:	4603      	mov	r3, r0
 802f5c4:	6039      	str	r1, [r7, #0]
 802f5c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802f5c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802f5cc:	2b00      	cmp	r3, #0
 802f5ce:	db0a      	blt.n	802f5e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802f5d0:	683b      	ldr	r3, [r7, #0]
 802f5d2:	b2da      	uxtb	r2, r3
 802f5d4:	490c      	ldr	r1, [pc, #48]	; (802f608 <__NVIC_SetPriority+0x4c>)
 802f5d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802f5da:	0112      	lsls	r2, r2, #4
 802f5dc:	b2d2      	uxtb	r2, r2
 802f5de:	440b      	add	r3, r1
 802f5e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802f5e4:	e00a      	b.n	802f5fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802f5e6:	683b      	ldr	r3, [r7, #0]
 802f5e8:	b2da      	uxtb	r2, r3
 802f5ea:	4908      	ldr	r1, [pc, #32]	; (802f60c <__NVIC_SetPriority+0x50>)
 802f5ec:	88fb      	ldrh	r3, [r7, #6]
 802f5ee:	f003 030f 	and.w	r3, r3, #15
 802f5f2:	3b04      	subs	r3, #4
 802f5f4:	0112      	lsls	r2, r2, #4
 802f5f6:	b2d2      	uxtb	r2, r2
 802f5f8:	440b      	add	r3, r1
 802f5fa:	761a      	strb	r2, [r3, #24]
}
 802f5fc:	bf00      	nop
 802f5fe:	370c      	adds	r7, #12
 802f600:	46bd      	mov	sp, r7
 802f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f606:	4770      	bx	lr
 802f608:	e000e100 	.word	0xe000e100
 802f60c:	e000ed00 	.word	0xe000ed00

0802f610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802f610:	b480      	push	{r7}
 802f612:	b089      	sub	sp, #36	; 0x24
 802f614:	af00      	add	r7, sp, #0
 802f616:	60f8      	str	r0, [r7, #12]
 802f618:	60b9      	str	r1, [r7, #8]
 802f61a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802f61c:	68fb      	ldr	r3, [r7, #12]
 802f61e:	f003 0307 	and.w	r3, r3, #7
 802f622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802f624:	69fb      	ldr	r3, [r7, #28]
 802f626:	f1c3 0307 	rsb	r3, r3, #7
 802f62a:	2b04      	cmp	r3, #4
 802f62c:	bf28      	it	cs
 802f62e:	2304      	movcs	r3, #4
 802f630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802f632:	69fb      	ldr	r3, [r7, #28]
 802f634:	3304      	adds	r3, #4
 802f636:	2b06      	cmp	r3, #6
 802f638:	d902      	bls.n	802f640 <NVIC_EncodePriority+0x30>
 802f63a:	69fb      	ldr	r3, [r7, #28]
 802f63c:	3b03      	subs	r3, #3
 802f63e:	e000      	b.n	802f642 <NVIC_EncodePriority+0x32>
 802f640:	2300      	movs	r3, #0
 802f642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802f644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802f648:	69bb      	ldr	r3, [r7, #24]
 802f64a:	fa02 f303 	lsl.w	r3, r2, r3
 802f64e:	43da      	mvns	r2, r3
 802f650:	68bb      	ldr	r3, [r7, #8]
 802f652:	401a      	ands	r2, r3
 802f654:	697b      	ldr	r3, [r7, #20]
 802f656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802f658:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802f65c:	697b      	ldr	r3, [r7, #20]
 802f65e:	fa01 f303 	lsl.w	r3, r1, r3
 802f662:	43d9      	mvns	r1, r3
 802f664:	687b      	ldr	r3, [r7, #4]
 802f666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802f668:	4313      	orrs	r3, r2
         );
}
 802f66a:	4618      	mov	r0, r3
 802f66c:	3724      	adds	r7, #36	; 0x24
 802f66e:	46bd      	mov	sp, r7
 802f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f674:	4770      	bx	lr
	...

0802f678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802f678:	b580      	push	{r7, lr}
 802f67a:	b082      	sub	sp, #8
 802f67c:	af00      	add	r7, sp, #0
 802f67e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802f680:	687b      	ldr	r3, [r7, #4]
 802f682:	3b01      	subs	r3, #1
 802f684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802f688:	d301      	bcc.n	802f68e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802f68a:	2301      	movs	r3, #1
 802f68c:	e00f      	b.n	802f6ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802f68e:	4a0a      	ldr	r2, [pc, #40]	; (802f6b8 <SysTick_Config+0x40>)
 802f690:	687b      	ldr	r3, [r7, #4]
 802f692:	3b01      	subs	r3, #1
 802f694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802f696:	210f      	movs	r1, #15
 802f698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802f69c:	f7ff ff8e 	bl	802f5bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802f6a0:	4b05      	ldr	r3, [pc, #20]	; (802f6b8 <SysTick_Config+0x40>)
 802f6a2:	2200      	movs	r2, #0
 802f6a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802f6a6:	4b04      	ldr	r3, [pc, #16]	; (802f6b8 <SysTick_Config+0x40>)
 802f6a8:	2207      	movs	r2, #7
 802f6aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802f6ac:	2300      	movs	r3, #0
}
 802f6ae:	4618      	mov	r0, r3
 802f6b0:	3708      	adds	r7, #8
 802f6b2:	46bd      	mov	sp, r7
 802f6b4:	bd80      	pop	{r7, pc}
 802f6b6:	bf00      	nop
 802f6b8:	e000e010 	.word	0xe000e010

0802f6bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802f6bc:	b580      	push	{r7, lr}
 802f6be:	b082      	sub	sp, #8
 802f6c0:	af00      	add	r7, sp, #0
 802f6c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802f6c4:	6878      	ldr	r0, [r7, #4]
 802f6c6:	f7ff ff29 	bl	802f51c <__NVIC_SetPriorityGrouping>
}
 802f6ca:	bf00      	nop
 802f6cc:	3708      	adds	r7, #8
 802f6ce:	46bd      	mov	sp, r7
 802f6d0:	bd80      	pop	{r7, pc}

0802f6d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802f6d2:	b580      	push	{r7, lr}
 802f6d4:	b086      	sub	sp, #24
 802f6d6:	af00      	add	r7, sp, #0
 802f6d8:	4603      	mov	r3, r0
 802f6da:	60b9      	str	r1, [r7, #8]
 802f6dc:	607a      	str	r2, [r7, #4]
 802f6de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802f6e0:	f7ff ff40 	bl	802f564 <__NVIC_GetPriorityGrouping>
 802f6e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802f6e6:	687a      	ldr	r2, [r7, #4]
 802f6e8:	68b9      	ldr	r1, [r7, #8]
 802f6ea:	6978      	ldr	r0, [r7, #20]
 802f6ec:	f7ff ff90 	bl	802f610 <NVIC_EncodePriority>
 802f6f0:	4602      	mov	r2, r0
 802f6f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802f6f6:	4611      	mov	r1, r2
 802f6f8:	4618      	mov	r0, r3
 802f6fa:	f7ff ff5f 	bl	802f5bc <__NVIC_SetPriority>
}
 802f6fe:	bf00      	nop
 802f700:	3718      	adds	r7, #24
 802f702:	46bd      	mov	sp, r7
 802f704:	bd80      	pop	{r7, pc}

0802f706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802f706:	b580      	push	{r7, lr}
 802f708:	b082      	sub	sp, #8
 802f70a:	af00      	add	r7, sp, #0
 802f70c:	4603      	mov	r3, r0
 802f70e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802f710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802f714:	4618      	mov	r0, r3
 802f716:	f7ff ff33 	bl	802f580 <__NVIC_EnableIRQ>
}
 802f71a:	bf00      	nop
 802f71c:	3708      	adds	r7, #8
 802f71e:	46bd      	mov	sp, r7
 802f720:	bd80      	pop	{r7, pc}

0802f722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802f722:	b580      	push	{r7, lr}
 802f724:	b082      	sub	sp, #8
 802f726:	af00      	add	r7, sp, #0
 802f728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802f72a:	6878      	ldr	r0, [r7, #4]
 802f72c:	f7ff ffa4 	bl	802f678 <SysTick_Config>
 802f730:	4603      	mov	r3, r0
}
 802f732:	4618      	mov	r0, r3
 802f734:	3708      	adds	r7, #8
 802f736:	46bd      	mov	sp, r7
 802f738:	bd80      	pop	{r7, pc}

0802f73a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 802f73a:	b580      	push	{r7, lr}
 802f73c:	b082      	sub	sp, #8
 802f73e:	af00      	add	r7, sp, #0
 802f740:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 802f742:	687b      	ldr	r3, [r7, #4]
 802f744:	2b00      	cmp	r3, #0
 802f746:	d101      	bne.n	802f74c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 802f748:	2301      	movs	r3, #1
 802f74a:	e014      	b.n	802f776 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 802f74c:	687b      	ldr	r3, [r7, #4]
 802f74e:	791b      	ldrb	r3, [r3, #4]
 802f750:	b2db      	uxtb	r3, r3
 802f752:	2b00      	cmp	r3, #0
 802f754:	d105      	bne.n	802f762 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 802f756:	687b      	ldr	r3, [r7, #4]
 802f758:	2200      	movs	r2, #0
 802f75a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 802f75c:	6878      	ldr	r0, [r7, #4]
 802f75e:	f7fe f86f 	bl	802d840 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 802f762:	687b      	ldr	r3, [r7, #4]
 802f764:	2202      	movs	r2, #2
 802f766:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 802f768:	687b      	ldr	r3, [r7, #4]
 802f76a:	2200      	movs	r2, #0
 802f76c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 802f76e:	687b      	ldr	r3, [r7, #4]
 802f770:	2201      	movs	r2, #1
 802f772:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 802f774:	2300      	movs	r3, #0
}
 802f776:	4618      	mov	r0, r3
 802f778:	3708      	adds	r7, #8
 802f77a:	46bd      	mov	sp, r7
 802f77c:	bd80      	pop	{r7, pc}

0802f77e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 802f77e:	b480      	push	{r7}
 802f780:	b083      	sub	sp, #12
 802f782:	af00      	add	r7, sp, #0
 802f784:	6078      	str	r0, [r7, #4]
 802f786:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802f788:	687b      	ldr	r3, [r7, #4]
 802f78a:	795b      	ldrb	r3, [r3, #5]
 802f78c:	2b01      	cmp	r3, #1
 802f78e:	d101      	bne.n	802f794 <HAL_DAC_Start+0x16>
 802f790:	2302      	movs	r3, #2
 802f792:	e040      	b.n	802f816 <HAL_DAC_Start+0x98>
 802f794:	687b      	ldr	r3, [r7, #4]
 802f796:	2201      	movs	r2, #1
 802f798:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802f79a:	687b      	ldr	r3, [r7, #4]
 802f79c:	2202      	movs	r2, #2
 802f79e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 802f7a0:	687b      	ldr	r3, [r7, #4]
 802f7a2:	681b      	ldr	r3, [r3, #0]
 802f7a4:	6819      	ldr	r1, [r3, #0]
 802f7a6:	683b      	ldr	r3, [r7, #0]
 802f7a8:	f003 0310 	and.w	r3, r3, #16
 802f7ac:	2201      	movs	r2, #1
 802f7ae:	409a      	lsls	r2, r3
 802f7b0:	687b      	ldr	r3, [r7, #4]
 802f7b2:	681b      	ldr	r3, [r3, #0]
 802f7b4:	430a      	orrs	r2, r1
 802f7b6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 802f7b8:	683b      	ldr	r3, [r7, #0]
 802f7ba:	2b00      	cmp	r3, #0
 802f7bc:	d10f      	bne.n	802f7de <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 802f7be:	687b      	ldr	r3, [r7, #4]
 802f7c0:	681b      	ldr	r3, [r3, #0]
 802f7c2:	681b      	ldr	r3, [r3, #0]
 802f7c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802f7c8:	2b02      	cmp	r3, #2
 802f7ca:	d11d      	bne.n	802f808 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 802f7cc:	687b      	ldr	r3, [r7, #4]
 802f7ce:	681b      	ldr	r3, [r3, #0]
 802f7d0:	685a      	ldr	r2, [r3, #4]
 802f7d2:	687b      	ldr	r3, [r7, #4]
 802f7d4:	681b      	ldr	r3, [r3, #0]
 802f7d6:	f042 0201 	orr.w	r2, r2, #1
 802f7da:	605a      	str	r2, [r3, #4]
 802f7dc:	e014      	b.n	802f808 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 802f7de:	687b      	ldr	r3, [r7, #4]
 802f7e0:	681b      	ldr	r3, [r3, #0]
 802f7e2:	681b      	ldr	r3, [r3, #0]
 802f7e4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 802f7e8:	683b      	ldr	r3, [r7, #0]
 802f7ea:	f003 0310 	and.w	r3, r3, #16
 802f7ee:	2102      	movs	r1, #2
 802f7f0:	fa01 f303 	lsl.w	r3, r1, r3
 802f7f4:	429a      	cmp	r2, r3
 802f7f6:	d107      	bne.n	802f808 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 802f7f8:	687b      	ldr	r3, [r7, #4]
 802f7fa:	681b      	ldr	r3, [r3, #0]
 802f7fc:	685a      	ldr	r2, [r3, #4]
 802f7fe:	687b      	ldr	r3, [r7, #4]
 802f800:	681b      	ldr	r3, [r3, #0]
 802f802:	f042 0202 	orr.w	r2, r2, #2
 802f806:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802f808:	687b      	ldr	r3, [r7, #4]
 802f80a:	2201      	movs	r2, #1
 802f80c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802f80e:	687b      	ldr	r3, [r7, #4]
 802f810:	2200      	movs	r2, #0
 802f812:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802f814:	2300      	movs	r3, #0
}
 802f816:	4618      	mov	r0, r3
 802f818:	370c      	adds	r7, #12
 802f81a:	46bd      	mov	sp, r7
 802f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f820:	4770      	bx	lr

0802f822 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 802f822:	b480      	push	{r7}
 802f824:	b087      	sub	sp, #28
 802f826:	af00      	add	r7, sp, #0
 802f828:	60f8      	str	r0, [r7, #12]
 802f82a:	60b9      	str	r1, [r7, #8]
 802f82c:	607a      	str	r2, [r7, #4]
 802f82e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 802f830:	2300      	movs	r3, #0
 802f832:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 802f834:	68fb      	ldr	r3, [r7, #12]
 802f836:	681b      	ldr	r3, [r3, #0]
 802f838:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 802f83a:	68bb      	ldr	r3, [r7, #8]
 802f83c:	2b00      	cmp	r3, #0
 802f83e:	d105      	bne.n	802f84c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 802f840:	697a      	ldr	r2, [r7, #20]
 802f842:	687b      	ldr	r3, [r7, #4]
 802f844:	4413      	add	r3, r2
 802f846:	3308      	adds	r3, #8
 802f848:	617b      	str	r3, [r7, #20]
 802f84a:	e004      	b.n	802f856 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 802f84c:	697a      	ldr	r2, [r7, #20]
 802f84e:	687b      	ldr	r3, [r7, #4]
 802f850:	4413      	add	r3, r2
 802f852:	3314      	adds	r3, #20
 802f854:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 802f856:	697b      	ldr	r3, [r7, #20]
 802f858:	461a      	mov	r2, r3
 802f85a:	683b      	ldr	r3, [r7, #0]
 802f85c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 802f85e:	2300      	movs	r3, #0
}
 802f860:	4618      	mov	r0, r3
 802f862:	371c      	adds	r7, #28
 802f864:	46bd      	mov	sp, r7
 802f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f86a:	4770      	bx	lr

0802f86c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 802f86c:	b580      	push	{r7, lr}
 802f86e:	b088      	sub	sp, #32
 802f870:	af00      	add	r7, sp, #0
 802f872:	60f8      	str	r0, [r7, #12]
 802f874:	60b9      	str	r1, [r7, #8]
 802f876:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802f878:	68fb      	ldr	r3, [r7, #12]
 802f87a:	795b      	ldrb	r3, [r3, #5]
 802f87c:	2b01      	cmp	r3, #1
 802f87e:	d101      	bne.n	802f884 <HAL_DAC_ConfigChannel+0x18>
 802f880:	2302      	movs	r3, #2
 802f882:	e11d      	b.n	802fac0 <HAL_DAC_ConfigChannel+0x254>
 802f884:	68fb      	ldr	r3, [r7, #12]
 802f886:	2201      	movs	r2, #1
 802f888:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802f88a:	68fb      	ldr	r3, [r7, #12]
 802f88c:	2202      	movs	r2, #2
 802f88e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 802f890:	68bb      	ldr	r3, [r7, #8]
 802f892:	681b      	ldr	r3, [r3, #0]
 802f894:	2b04      	cmp	r3, #4
 802f896:	d174      	bne.n	802f982 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 802f898:	f7ff fc1c 	bl	802f0d4 <HAL_GetTick>
 802f89c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 802f89e:	687b      	ldr	r3, [r7, #4]
 802f8a0:	2b00      	cmp	r3, #0
 802f8a2:	d134      	bne.n	802f90e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802f8a4:	e011      	b.n	802f8ca <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802f8a6:	f7ff fc15 	bl	802f0d4 <HAL_GetTick>
 802f8aa:	4602      	mov	r2, r0
 802f8ac:	69bb      	ldr	r3, [r7, #24]
 802f8ae:	1ad3      	subs	r3, r2, r3
 802f8b0:	2b01      	cmp	r3, #1
 802f8b2:	d90a      	bls.n	802f8ca <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802f8b4:	68fb      	ldr	r3, [r7, #12]
 802f8b6:	691b      	ldr	r3, [r3, #16]
 802f8b8:	f043 0208 	orr.w	r2, r3, #8
 802f8bc:	68fb      	ldr	r3, [r7, #12]
 802f8be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802f8c0:	68fb      	ldr	r3, [r7, #12]
 802f8c2:	2203      	movs	r2, #3
 802f8c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802f8c6:	2303      	movs	r3, #3
 802f8c8:	e0fa      	b.n	802fac0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802f8ca:	68fb      	ldr	r3, [r7, #12]
 802f8cc:	681b      	ldr	r3, [r3, #0]
 802f8ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802f8d0:	4b7d      	ldr	r3, [pc, #500]	; (802fac8 <HAL_DAC_ConfigChannel+0x25c>)
 802f8d2:	4013      	ands	r3, r2
 802f8d4:	2b00      	cmp	r3, #0
 802f8d6:	d1e6      	bne.n	802f8a6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 802f8d8:	2001      	movs	r0, #1
 802f8da:	f7ff fc07 	bl	802f0ec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802f8de:	68fb      	ldr	r3, [r7, #12]
 802f8e0:	681b      	ldr	r3, [r3, #0]
 802f8e2:	68ba      	ldr	r2, [r7, #8]
 802f8e4:	6992      	ldr	r2, [r2, #24]
 802f8e6:	641a      	str	r2, [r3, #64]	; 0x40
 802f8e8:	e01e      	b.n	802f928 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802f8ea:	f7ff fbf3 	bl	802f0d4 <HAL_GetTick>
 802f8ee:	4602      	mov	r2, r0
 802f8f0:	69bb      	ldr	r3, [r7, #24]
 802f8f2:	1ad3      	subs	r3, r2, r3
 802f8f4:	2b01      	cmp	r3, #1
 802f8f6:	d90a      	bls.n	802f90e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802f8f8:	68fb      	ldr	r3, [r7, #12]
 802f8fa:	691b      	ldr	r3, [r3, #16]
 802f8fc:	f043 0208 	orr.w	r2, r3, #8
 802f900:	68fb      	ldr	r3, [r7, #12]
 802f902:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802f904:	68fb      	ldr	r3, [r7, #12]
 802f906:	2203      	movs	r2, #3
 802f908:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802f90a:	2303      	movs	r3, #3
 802f90c:	e0d8      	b.n	802fac0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 802f90e:	68fb      	ldr	r3, [r7, #12]
 802f910:	681b      	ldr	r3, [r3, #0]
 802f912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802f914:	2b00      	cmp	r3, #0
 802f916:	dbe8      	blt.n	802f8ea <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 802f918:	2001      	movs	r0, #1
 802f91a:	f7ff fbe7 	bl	802f0ec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802f91e:	68fb      	ldr	r3, [r7, #12]
 802f920:	681b      	ldr	r3, [r3, #0]
 802f922:	68ba      	ldr	r2, [r7, #8]
 802f924:	6992      	ldr	r2, [r2, #24]
 802f926:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 802f928:	68fb      	ldr	r3, [r7, #12]
 802f92a:	681b      	ldr	r3, [r3, #0]
 802f92c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802f92e:	687b      	ldr	r3, [r7, #4]
 802f930:	f003 0310 	and.w	r3, r3, #16
 802f934:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802f938:	fa01 f303 	lsl.w	r3, r1, r3
 802f93c:	43db      	mvns	r3, r3
 802f93e:	ea02 0103 	and.w	r1, r2, r3
 802f942:	68bb      	ldr	r3, [r7, #8]
 802f944:	69da      	ldr	r2, [r3, #28]
 802f946:	687b      	ldr	r3, [r7, #4]
 802f948:	f003 0310 	and.w	r3, r3, #16
 802f94c:	409a      	lsls	r2, r3
 802f94e:	68fb      	ldr	r3, [r7, #12]
 802f950:	681b      	ldr	r3, [r3, #0]
 802f952:	430a      	orrs	r2, r1
 802f954:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 802f956:	68fb      	ldr	r3, [r7, #12]
 802f958:	681b      	ldr	r3, [r3, #0]
 802f95a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802f95c:	687b      	ldr	r3, [r7, #4]
 802f95e:	f003 0310 	and.w	r3, r3, #16
 802f962:	21ff      	movs	r1, #255	; 0xff
 802f964:	fa01 f303 	lsl.w	r3, r1, r3
 802f968:	43db      	mvns	r3, r3
 802f96a:	ea02 0103 	and.w	r1, r2, r3
 802f96e:	68bb      	ldr	r3, [r7, #8]
 802f970:	6a1a      	ldr	r2, [r3, #32]
 802f972:	687b      	ldr	r3, [r7, #4]
 802f974:	f003 0310 	and.w	r3, r3, #16
 802f978:	409a      	lsls	r2, r3
 802f97a:	68fb      	ldr	r3, [r7, #12]
 802f97c:	681b      	ldr	r3, [r3, #0]
 802f97e:	430a      	orrs	r2, r1
 802f980:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 802f982:	68bb      	ldr	r3, [r7, #8]
 802f984:	691b      	ldr	r3, [r3, #16]
 802f986:	2b01      	cmp	r3, #1
 802f988:	d11d      	bne.n	802f9c6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 802f98a:	68fb      	ldr	r3, [r7, #12]
 802f98c:	681b      	ldr	r3, [r3, #0]
 802f98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f990:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 802f992:	687b      	ldr	r3, [r7, #4]
 802f994:	f003 0310 	and.w	r3, r3, #16
 802f998:	221f      	movs	r2, #31
 802f99a:	fa02 f303 	lsl.w	r3, r2, r3
 802f99e:	43db      	mvns	r3, r3
 802f9a0:	697a      	ldr	r2, [r7, #20]
 802f9a2:	4013      	ands	r3, r2
 802f9a4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 802f9a6:	68bb      	ldr	r3, [r7, #8]
 802f9a8:	695b      	ldr	r3, [r3, #20]
 802f9aa:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802f9ac:	687b      	ldr	r3, [r7, #4]
 802f9ae:	f003 0310 	and.w	r3, r3, #16
 802f9b2:	693a      	ldr	r2, [r7, #16]
 802f9b4:	fa02 f303 	lsl.w	r3, r2, r3
 802f9b8:	697a      	ldr	r2, [r7, #20]
 802f9ba:	4313      	orrs	r3, r2
 802f9bc:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 802f9be:	68fb      	ldr	r3, [r7, #12]
 802f9c0:	681b      	ldr	r3, [r3, #0]
 802f9c2:	697a      	ldr	r2, [r7, #20]
 802f9c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 802f9c6:	68fb      	ldr	r3, [r7, #12]
 802f9c8:	681b      	ldr	r3, [r3, #0]
 802f9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f9cc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 802f9ce:	687b      	ldr	r3, [r7, #4]
 802f9d0:	f003 0310 	and.w	r3, r3, #16
 802f9d4:	2207      	movs	r2, #7
 802f9d6:	fa02 f303 	lsl.w	r3, r2, r3
 802f9da:	43db      	mvns	r3, r3
 802f9dc:	697a      	ldr	r2, [r7, #20]
 802f9de:	4013      	ands	r3, r2
 802f9e0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 802f9e2:	68bb      	ldr	r3, [r7, #8]
 802f9e4:	68db      	ldr	r3, [r3, #12]
 802f9e6:	2b01      	cmp	r3, #1
 802f9e8:	d102      	bne.n	802f9f0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 802f9ea:	2300      	movs	r3, #0
 802f9ec:	61fb      	str	r3, [r7, #28]
 802f9ee:	e00f      	b.n	802fa10 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 802f9f0:	68bb      	ldr	r3, [r7, #8]
 802f9f2:	68db      	ldr	r3, [r3, #12]
 802f9f4:	2b02      	cmp	r3, #2
 802f9f6:	d102      	bne.n	802f9fe <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 802f9f8:	2301      	movs	r3, #1
 802f9fa:	61fb      	str	r3, [r7, #28]
 802f9fc:	e008      	b.n	802fa10 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 802f9fe:	68bb      	ldr	r3, [r7, #8]
 802fa00:	689b      	ldr	r3, [r3, #8]
 802fa02:	2b00      	cmp	r3, #0
 802fa04:	d102      	bne.n	802fa0c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 802fa06:	2301      	movs	r3, #1
 802fa08:	61fb      	str	r3, [r7, #28]
 802fa0a:	e001      	b.n	802fa10 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 802fa0c:	2300      	movs	r3, #0
 802fa0e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 802fa10:	68bb      	ldr	r3, [r7, #8]
 802fa12:	681a      	ldr	r2, [r3, #0]
 802fa14:	68bb      	ldr	r3, [r7, #8]
 802fa16:	689b      	ldr	r3, [r3, #8]
 802fa18:	4313      	orrs	r3, r2
 802fa1a:	69fa      	ldr	r2, [r7, #28]
 802fa1c:	4313      	orrs	r3, r2
 802fa1e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802fa20:	687b      	ldr	r3, [r7, #4]
 802fa22:	f003 0310 	and.w	r3, r3, #16
 802fa26:	693a      	ldr	r2, [r7, #16]
 802fa28:	fa02 f303 	lsl.w	r3, r2, r3
 802fa2c:	697a      	ldr	r2, [r7, #20]
 802fa2e:	4313      	orrs	r3, r2
 802fa30:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 802fa32:	68fb      	ldr	r3, [r7, #12]
 802fa34:	681b      	ldr	r3, [r3, #0]
 802fa36:	697a      	ldr	r2, [r7, #20]
 802fa38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 802fa3a:	68fb      	ldr	r3, [r7, #12]
 802fa3c:	681b      	ldr	r3, [r3, #0]
 802fa3e:	6819      	ldr	r1, [r3, #0]
 802fa40:	687b      	ldr	r3, [r7, #4]
 802fa42:	f003 0310 	and.w	r3, r3, #16
 802fa46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802fa4a:	fa02 f303 	lsl.w	r3, r2, r3
 802fa4e:	43da      	mvns	r2, r3
 802fa50:	68fb      	ldr	r3, [r7, #12]
 802fa52:	681b      	ldr	r3, [r3, #0]
 802fa54:	400a      	ands	r2, r1
 802fa56:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 802fa58:	68fb      	ldr	r3, [r7, #12]
 802fa5a:	681b      	ldr	r3, [r3, #0]
 802fa5c:	681b      	ldr	r3, [r3, #0]
 802fa5e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 802fa60:	687b      	ldr	r3, [r7, #4]
 802fa62:	f003 0310 	and.w	r3, r3, #16
 802fa66:	f640 72fe 	movw	r2, #4094	; 0xffe
 802fa6a:	fa02 f303 	lsl.w	r3, r2, r3
 802fa6e:	43db      	mvns	r3, r3
 802fa70:	697a      	ldr	r2, [r7, #20]
 802fa72:	4013      	ands	r3, r2
 802fa74:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 802fa76:	68bb      	ldr	r3, [r7, #8]
 802fa78:	685b      	ldr	r3, [r3, #4]
 802fa7a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802fa7c:	687b      	ldr	r3, [r7, #4]
 802fa7e:	f003 0310 	and.w	r3, r3, #16
 802fa82:	693a      	ldr	r2, [r7, #16]
 802fa84:	fa02 f303 	lsl.w	r3, r2, r3
 802fa88:	697a      	ldr	r2, [r7, #20]
 802fa8a:	4313      	orrs	r3, r2
 802fa8c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 802fa8e:	68fb      	ldr	r3, [r7, #12]
 802fa90:	681b      	ldr	r3, [r3, #0]
 802fa92:	697a      	ldr	r2, [r7, #20]
 802fa94:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 802fa96:	68fb      	ldr	r3, [r7, #12]
 802fa98:	681b      	ldr	r3, [r3, #0]
 802fa9a:	6819      	ldr	r1, [r3, #0]
 802fa9c:	687b      	ldr	r3, [r7, #4]
 802fa9e:	f003 0310 	and.w	r3, r3, #16
 802faa2:	22c0      	movs	r2, #192	; 0xc0
 802faa4:	fa02 f303 	lsl.w	r3, r2, r3
 802faa8:	43da      	mvns	r2, r3
 802faaa:	68fb      	ldr	r3, [r7, #12]
 802faac:	681b      	ldr	r3, [r3, #0]
 802faae:	400a      	ands	r2, r1
 802fab0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802fab2:	68fb      	ldr	r3, [r7, #12]
 802fab4:	2201      	movs	r2, #1
 802fab6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802fab8:	68fb      	ldr	r3, [r7, #12]
 802faba:	2200      	movs	r2, #0
 802fabc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802fabe:	2300      	movs	r3, #0
}
 802fac0:	4618      	mov	r0, r3
 802fac2:	3720      	adds	r7, #32
 802fac4:	46bd      	mov	sp, r7
 802fac6:	bd80      	pop	{r7, pc}
 802fac8:	20008000 	.word	0x20008000

0802facc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802facc:	b580      	push	{r7, lr}
 802face:	b086      	sub	sp, #24
 802fad0:	af00      	add	r7, sp, #0
 802fad2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 802fad4:	f7ff fafe 	bl	802f0d4 <HAL_GetTick>
 802fad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802fada:	687b      	ldr	r3, [r7, #4]
 802fadc:	2b00      	cmp	r3, #0
 802fade:	d101      	bne.n	802fae4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 802fae0:	2301      	movs	r3, #1
 802fae2:	e316      	b.n	8030112 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802fae4:	687b      	ldr	r3, [r7, #4]
 802fae6:	681b      	ldr	r3, [r3, #0]
 802fae8:	4a66      	ldr	r2, [pc, #408]	; (802fc84 <HAL_DMA_Init+0x1b8>)
 802faea:	4293      	cmp	r3, r2
 802faec:	d04a      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802faee:	687b      	ldr	r3, [r7, #4]
 802faf0:	681b      	ldr	r3, [r3, #0]
 802faf2:	4a65      	ldr	r2, [pc, #404]	; (802fc88 <HAL_DMA_Init+0x1bc>)
 802faf4:	4293      	cmp	r3, r2
 802faf6:	d045      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802faf8:	687b      	ldr	r3, [r7, #4]
 802fafa:	681b      	ldr	r3, [r3, #0]
 802fafc:	4a63      	ldr	r2, [pc, #396]	; (802fc8c <HAL_DMA_Init+0x1c0>)
 802fafe:	4293      	cmp	r3, r2
 802fb00:	d040      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb02:	687b      	ldr	r3, [r7, #4]
 802fb04:	681b      	ldr	r3, [r3, #0]
 802fb06:	4a62      	ldr	r2, [pc, #392]	; (802fc90 <HAL_DMA_Init+0x1c4>)
 802fb08:	4293      	cmp	r3, r2
 802fb0a:	d03b      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb0c:	687b      	ldr	r3, [r7, #4]
 802fb0e:	681b      	ldr	r3, [r3, #0]
 802fb10:	4a60      	ldr	r2, [pc, #384]	; (802fc94 <HAL_DMA_Init+0x1c8>)
 802fb12:	4293      	cmp	r3, r2
 802fb14:	d036      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb16:	687b      	ldr	r3, [r7, #4]
 802fb18:	681b      	ldr	r3, [r3, #0]
 802fb1a:	4a5f      	ldr	r2, [pc, #380]	; (802fc98 <HAL_DMA_Init+0x1cc>)
 802fb1c:	4293      	cmp	r3, r2
 802fb1e:	d031      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb20:	687b      	ldr	r3, [r7, #4]
 802fb22:	681b      	ldr	r3, [r3, #0]
 802fb24:	4a5d      	ldr	r2, [pc, #372]	; (802fc9c <HAL_DMA_Init+0x1d0>)
 802fb26:	4293      	cmp	r3, r2
 802fb28:	d02c      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb2a:	687b      	ldr	r3, [r7, #4]
 802fb2c:	681b      	ldr	r3, [r3, #0]
 802fb2e:	4a5c      	ldr	r2, [pc, #368]	; (802fca0 <HAL_DMA_Init+0x1d4>)
 802fb30:	4293      	cmp	r3, r2
 802fb32:	d027      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb34:	687b      	ldr	r3, [r7, #4]
 802fb36:	681b      	ldr	r3, [r3, #0]
 802fb38:	4a5a      	ldr	r2, [pc, #360]	; (802fca4 <HAL_DMA_Init+0x1d8>)
 802fb3a:	4293      	cmp	r3, r2
 802fb3c:	d022      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb3e:	687b      	ldr	r3, [r7, #4]
 802fb40:	681b      	ldr	r3, [r3, #0]
 802fb42:	4a59      	ldr	r2, [pc, #356]	; (802fca8 <HAL_DMA_Init+0x1dc>)
 802fb44:	4293      	cmp	r3, r2
 802fb46:	d01d      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb48:	687b      	ldr	r3, [r7, #4]
 802fb4a:	681b      	ldr	r3, [r3, #0]
 802fb4c:	4a57      	ldr	r2, [pc, #348]	; (802fcac <HAL_DMA_Init+0x1e0>)
 802fb4e:	4293      	cmp	r3, r2
 802fb50:	d018      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb52:	687b      	ldr	r3, [r7, #4]
 802fb54:	681b      	ldr	r3, [r3, #0]
 802fb56:	4a56      	ldr	r2, [pc, #344]	; (802fcb0 <HAL_DMA_Init+0x1e4>)
 802fb58:	4293      	cmp	r3, r2
 802fb5a:	d013      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb5c:	687b      	ldr	r3, [r7, #4]
 802fb5e:	681b      	ldr	r3, [r3, #0]
 802fb60:	4a54      	ldr	r2, [pc, #336]	; (802fcb4 <HAL_DMA_Init+0x1e8>)
 802fb62:	4293      	cmp	r3, r2
 802fb64:	d00e      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb66:	687b      	ldr	r3, [r7, #4]
 802fb68:	681b      	ldr	r3, [r3, #0]
 802fb6a:	4a53      	ldr	r2, [pc, #332]	; (802fcb8 <HAL_DMA_Init+0x1ec>)
 802fb6c:	4293      	cmp	r3, r2
 802fb6e:	d009      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb70:	687b      	ldr	r3, [r7, #4]
 802fb72:	681b      	ldr	r3, [r3, #0]
 802fb74:	4a51      	ldr	r2, [pc, #324]	; (802fcbc <HAL_DMA_Init+0x1f0>)
 802fb76:	4293      	cmp	r3, r2
 802fb78:	d004      	beq.n	802fb84 <HAL_DMA_Init+0xb8>
 802fb7a:	687b      	ldr	r3, [r7, #4]
 802fb7c:	681b      	ldr	r3, [r3, #0]
 802fb7e:	4a50      	ldr	r2, [pc, #320]	; (802fcc0 <HAL_DMA_Init+0x1f4>)
 802fb80:	4293      	cmp	r3, r2
 802fb82:	d101      	bne.n	802fb88 <HAL_DMA_Init+0xbc>
 802fb84:	2301      	movs	r3, #1
 802fb86:	e000      	b.n	802fb8a <HAL_DMA_Init+0xbe>
 802fb88:	2300      	movs	r3, #0
 802fb8a:	2b00      	cmp	r3, #0
 802fb8c:	f000 813b 	beq.w	802fe06 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802fb90:	687b      	ldr	r3, [r7, #4]
 802fb92:	2202      	movs	r2, #2
 802fb94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802fb98:	687b      	ldr	r3, [r7, #4]
 802fb9a:	2200      	movs	r2, #0
 802fb9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802fba0:	687b      	ldr	r3, [r7, #4]
 802fba2:	681b      	ldr	r3, [r3, #0]
 802fba4:	4a37      	ldr	r2, [pc, #220]	; (802fc84 <HAL_DMA_Init+0x1b8>)
 802fba6:	4293      	cmp	r3, r2
 802fba8:	d04a      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fbaa:	687b      	ldr	r3, [r7, #4]
 802fbac:	681b      	ldr	r3, [r3, #0]
 802fbae:	4a36      	ldr	r2, [pc, #216]	; (802fc88 <HAL_DMA_Init+0x1bc>)
 802fbb0:	4293      	cmp	r3, r2
 802fbb2:	d045      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fbb4:	687b      	ldr	r3, [r7, #4]
 802fbb6:	681b      	ldr	r3, [r3, #0]
 802fbb8:	4a34      	ldr	r2, [pc, #208]	; (802fc8c <HAL_DMA_Init+0x1c0>)
 802fbba:	4293      	cmp	r3, r2
 802fbbc:	d040      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fbbe:	687b      	ldr	r3, [r7, #4]
 802fbc0:	681b      	ldr	r3, [r3, #0]
 802fbc2:	4a33      	ldr	r2, [pc, #204]	; (802fc90 <HAL_DMA_Init+0x1c4>)
 802fbc4:	4293      	cmp	r3, r2
 802fbc6:	d03b      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fbc8:	687b      	ldr	r3, [r7, #4]
 802fbca:	681b      	ldr	r3, [r3, #0]
 802fbcc:	4a31      	ldr	r2, [pc, #196]	; (802fc94 <HAL_DMA_Init+0x1c8>)
 802fbce:	4293      	cmp	r3, r2
 802fbd0:	d036      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fbd2:	687b      	ldr	r3, [r7, #4]
 802fbd4:	681b      	ldr	r3, [r3, #0]
 802fbd6:	4a30      	ldr	r2, [pc, #192]	; (802fc98 <HAL_DMA_Init+0x1cc>)
 802fbd8:	4293      	cmp	r3, r2
 802fbda:	d031      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fbdc:	687b      	ldr	r3, [r7, #4]
 802fbde:	681b      	ldr	r3, [r3, #0]
 802fbe0:	4a2e      	ldr	r2, [pc, #184]	; (802fc9c <HAL_DMA_Init+0x1d0>)
 802fbe2:	4293      	cmp	r3, r2
 802fbe4:	d02c      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fbe6:	687b      	ldr	r3, [r7, #4]
 802fbe8:	681b      	ldr	r3, [r3, #0]
 802fbea:	4a2d      	ldr	r2, [pc, #180]	; (802fca0 <HAL_DMA_Init+0x1d4>)
 802fbec:	4293      	cmp	r3, r2
 802fbee:	d027      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fbf0:	687b      	ldr	r3, [r7, #4]
 802fbf2:	681b      	ldr	r3, [r3, #0]
 802fbf4:	4a2b      	ldr	r2, [pc, #172]	; (802fca4 <HAL_DMA_Init+0x1d8>)
 802fbf6:	4293      	cmp	r3, r2
 802fbf8:	d022      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fbfa:	687b      	ldr	r3, [r7, #4]
 802fbfc:	681b      	ldr	r3, [r3, #0]
 802fbfe:	4a2a      	ldr	r2, [pc, #168]	; (802fca8 <HAL_DMA_Init+0x1dc>)
 802fc00:	4293      	cmp	r3, r2
 802fc02:	d01d      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fc04:	687b      	ldr	r3, [r7, #4]
 802fc06:	681b      	ldr	r3, [r3, #0]
 802fc08:	4a28      	ldr	r2, [pc, #160]	; (802fcac <HAL_DMA_Init+0x1e0>)
 802fc0a:	4293      	cmp	r3, r2
 802fc0c:	d018      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fc0e:	687b      	ldr	r3, [r7, #4]
 802fc10:	681b      	ldr	r3, [r3, #0]
 802fc12:	4a27      	ldr	r2, [pc, #156]	; (802fcb0 <HAL_DMA_Init+0x1e4>)
 802fc14:	4293      	cmp	r3, r2
 802fc16:	d013      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fc18:	687b      	ldr	r3, [r7, #4]
 802fc1a:	681b      	ldr	r3, [r3, #0]
 802fc1c:	4a25      	ldr	r2, [pc, #148]	; (802fcb4 <HAL_DMA_Init+0x1e8>)
 802fc1e:	4293      	cmp	r3, r2
 802fc20:	d00e      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fc22:	687b      	ldr	r3, [r7, #4]
 802fc24:	681b      	ldr	r3, [r3, #0]
 802fc26:	4a24      	ldr	r2, [pc, #144]	; (802fcb8 <HAL_DMA_Init+0x1ec>)
 802fc28:	4293      	cmp	r3, r2
 802fc2a:	d009      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fc2c:	687b      	ldr	r3, [r7, #4]
 802fc2e:	681b      	ldr	r3, [r3, #0]
 802fc30:	4a22      	ldr	r2, [pc, #136]	; (802fcbc <HAL_DMA_Init+0x1f0>)
 802fc32:	4293      	cmp	r3, r2
 802fc34:	d004      	beq.n	802fc40 <HAL_DMA_Init+0x174>
 802fc36:	687b      	ldr	r3, [r7, #4]
 802fc38:	681b      	ldr	r3, [r3, #0]
 802fc3a:	4a21      	ldr	r2, [pc, #132]	; (802fcc0 <HAL_DMA_Init+0x1f4>)
 802fc3c:	4293      	cmp	r3, r2
 802fc3e:	d108      	bne.n	802fc52 <HAL_DMA_Init+0x186>
 802fc40:	687b      	ldr	r3, [r7, #4]
 802fc42:	681b      	ldr	r3, [r3, #0]
 802fc44:	681a      	ldr	r2, [r3, #0]
 802fc46:	687b      	ldr	r3, [r7, #4]
 802fc48:	681b      	ldr	r3, [r3, #0]
 802fc4a:	f022 0201 	bic.w	r2, r2, #1
 802fc4e:	601a      	str	r2, [r3, #0]
 802fc50:	e007      	b.n	802fc62 <HAL_DMA_Init+0x196>
 802fc52:	687b      	ldr	r3, [r7, #4]
 802fc54:	681b      	ldr	r3, [r3, #0]
 802fc56:	681a      	ldr	r2, [r3, #0]
 802fc58:	687b      	ldr	r3, [r7, #4]
 802fc5a:	681b      	ldr	r3, [r3, #0]
 802fc5c:	f022 0201 	bic.w	r2, r2, #1
 802fc60:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802fc62:	e02f      	b.n	802fcc4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802fc64:	f7ff fa36 	bl	802f0d4 <HAL_GetTick>
 802fc68:	4602      	mov	r2, r0
 802fc6a:	693b      	ldr	r3, [r7, #16]
 802fc6c:	1ad3      	subs	r3, r2, r3
 802fc6e:	2b05      	cmp	r3, #5
 802fc70:	d928      	bls.n	802fcc4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802fc72:	687b      	ldr	r3, [r7, #4]
 802fc74:	2220      	movs	r2, #32
 802fc76:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802fc78:	687b      	ldr	r3, [r7, #4]
 802fc7a:	2203      	movs	r2, #3
 802fc7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 802fc80:	2301      	movs	r3, #1
 802fc82:	e246      	b.n	8030112 <HAL_DMA_Init+0x646>
 802fc84:	40020010 	.word	0x40020010
 802fc88:	40020028 	.word	0x40020028
 802fc8c:	40020040 	.word	0x40020040
 802fc90:	40020058 	.word	0x40020058
 802fc94:	40020070 	.word	0x40020070
 802fc98:	40020088 	.word	0x40020088
 802fc9c:	400200a0 	.word	0x400200a0
 802fca0:	400200b8 	.word	0x400200b8
 802fca4:	40020410 	.word	0x40020410
 802fca8:	40020428 	.word	0x40020428
 802fcac:	40020440 	.word	0x40020440
 802fcb0:	40020458 	.word	0x40020458
 802fcb4:	40020470 	.word	0x40020470
 802fcb8:	40020488 	.word	0x40020488
 802fcbc:	400204a0 	.word	0x400204a0
 802fcc0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802fcc4:	687b      	ldr	r3, [r7, #4]
 802fcc6:	681b      	ldr	r3, [r3, #0]
 802fcc8:	681b      	ldr	r3, [r3, #0]
 802fcca:	f003 0301 	and.w	r3, r3, #1
 802fcce:	2b00      	cmp	r3, #0
 802fcd0:	d1c8      	bne.n	802fc64 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 802fcd2:	687b      	ldr	r3, [r7, #4]
 802fcd4:	681b      	ldr	r3, [r3, #0]
 802fcd6:	681b      	ldr	r3, [r3, #0]
 802fcd8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802fcda:	697a      	ldr	r2, [r7, #20]
 802fcdc:	4b83      	ldr	r3, [pc, #524]	; (802feec <HAL_DMA_Init+0x420>)
 802fcde:	4013      	ands	r3, r2
 802fce0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 802fce2:	687b      	ldr	r3, [r7, #4]
 802fce4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802fce6:	687b      	ldr	r3, [r7, #4]
 802fce8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 802fcea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802fcec:	687b      	ldr	r3, [r7, #4]
 802fcee:	691b      	ldr	r3, [r3, #16]
 802fcf0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802fcf2:	687b      	ldr	r3, [r7, #4]
 802fcf4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802fcf6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802fcf8:	687b      	ldr	r3, [r7, #4]
 802fcfa:	699b      	ldr	r3, [r3, #24]
 802fcfc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802fcfe:	687b      	ldr	r3, [r7, #4]
 802fd00:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802fd02:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802fd04:	687b      	ldr	r3, [r7, #4]
 802fd06:	6a1b      	ldr	r3, [r3, #32]
 802fd08:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 802fd0a:	697a      	ldr	r2, [r7, #20]
 802fd0c:	4313      	orrs	r3, r2
 802fd0e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802fd10:	687b      	ldr	r3, [r7, #4]
 802fd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802fd14:	2b04      	cmp	r3, #4
 802fd16:	d107      	bne.n	802fd28 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802fd18:	687b      	ldr	r3, [r7, #4]
 802fd1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802fd1c:	687b      	ldr	r3, [r7, #4]
 802fd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802fd20:	4313      	orrs	r3, r2
 802fd22:	697a      	ldr	r2, [r7, #20]
 802fd24:	4313      	orrs	r3, r2
 802fd26:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 802fd28:	4b71      	ldr	r3, [pc, #452]	; (802fef0 <HAL_DMA_Init+0x424>)
 802fd2a:	681a      	ldr	r2, [r3, #0]
 802fd2c:	4b71      	ldr	r3, [pc, #452]	; (802fef4 <HAL_DMA_Init+0x428>)
 802fd2e:	4013      	ands	r3, r2
 802fd30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802fd34:	d328      	bcc.n	802fd88 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 802fd36:	687b      	ldr	r3, [r7, #4]
 802fd38:	685b      	ldr	r3, [r3, #4]
 802fd3a:	2b28      	cmp	r3, #40	; 0x28
 802fd3c:	d903      	bls.n	802fd46 <HAL_DMA_Init+0x27a>
 802fd3e:	687b      	ldr	r3, [r7, #4]
 802fd40:	685b      	ldr	r3, [r3, #4]
 802fd42:	2b2e      	cmp	r3, #46	; 0x2e
 802fd44:	d917      	bls.n	802fd76 <HAL_DMA_Init+0x2aa>
 802fd46:	687b      	ldr	r3, [r7, #4]
 802fd48:	685b      	ldr	r3, [r3, #4]
 802fd4a:	2b3e      	cmp	r3, #62	; 0x3e
 802fd4c:	d903      	bls.n	802fd56 <HAL_DMA_Init+0x28a>
 802fd4e:	687b      	ldr	r3, [r7, #4]
 802fd50:	685b      	ldr	r3, [r3, #4]
 802fd52:	2b42      	cmp	r3, #66	; 0x42
 802fd54:	d90f      	bls.n	802fd76 <HAL_DMA_Init+0x2aa>
 802fd56:	687b      	ldr	r3, [r7, #4]
 802fd58:	685b      	ldr	r3, [r3, #4]
 802fd5a:	2b46      	cmp	r3, #70	; 0x46
 802fd5c:	d903      	bls.n	802fd66 <HAL_DMA_Init+0x29a>
 802fd5e:	687b      	ldr	r3, [r7, #4]
 802fd60:	685b      	ldr	r3, [r3, #4]
 802fd62:	2b48      	cmp	r3, #72	; 0x48
 802fd64:	d907      	bls.n	802fd76 <HAL_DMA_Init+0x2aa>
 802fd66:	687b      	ldr	r3, [r7, #4]
 802fd68:	685b      	ldr	r3, [r3, #4]
 802fd6a:	2b4e      	cmp	r3, #78	; 0x4e
 802fd6c:	d905      	bls.n	802fd7a <HAL_DMA_Init+0x2ae>
 802fd6e:	687b      	ldr	r3, [r7, #4]
 802fd70:	685b      	ldr	r3, [r3, #4]
 802fd72:	2b52      	cmp	r3, #82	; 0x52
 802fd74:	d801      	bhi.n	802fd7a <HAL_DMA_Init+0x2ae>
 802fd76:	2301      	movs	r3, #1
 802fd78:	e000      	b.n	802fd7c <HAL_DMA_Init+0x2b0>
 802fd7a:	2300      	movs	r3, #0
 802fd7c:	2b00      	cmp	r3, #0
 802fd7e:	d003      	beq.n	802fd88 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 802fd80:	697b      	ldr	r3, [r7, #20]
 802fd82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802fd86:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 802fd88:	687b      	ldr	r3, [r7, #4]
 802fd8a:	681b      	ldr	r3, [r3, #0]
 802fd8c:	697a      	ldr	r2, [r7, #20]
 802fd8e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 802fd90:	687b      	ldr	r3, [r7, #4]
 802fd92:	681b      	ldr	r3, [r3, #0]
 802fd94:	695b      	ldr	r3, [r3, #20]
 802fd96:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802fd98:	697b      	ldr	r3, [r7, #20]
 802fd9a:	f023 0307 	bic.w	r3, r3, #7
 802fd9e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 802fda0:	687b      	ldr	r3, [r7, #4]
 802fda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802fda4:	697a      	ldr	r2, [r7, #20]
 802fda6:	4313      	orrs	r3, r2
 802fda8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802fdaa:	687b      	ldr	r3, [r7, #4]
 802fdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802fdae:	2b04      	cmp	r3, #4
 802fdb0:	d117      	bne.n	802fde2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 802fdb2:	687b      	ldr	r3, [r7, #4]
 802fdb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fdb6:	697a      	ldr	r2, [r7, #20]
 802fdb8:	4313      	orrs	r3, r2
 802fdba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802fdbc:	687b      	ldr	r3, [r7, #4]
 802fdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fdc0:	2b00      	cmp	r3, #0
 802fdc2:	d00e      	beq.n	802fde2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802fdc4:	6878      	ldr	r0, [r7, #4]
 802fdc6:	f002 fb4d 	bl	8032464 <DMA_CheckFifoParam>
 802fdca:	4603      	mov	r3, r0
 802fdcc:	2b00      	cmp	r3, #0
 802fdce:	d008      	beq.n	802fde2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802fdd0:	687b      	ldr	r3, [r7, #4]
 802fdd2:	2240      	movs	r2, #64	; 0x40
 802fdd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802fdd6:	687b      	ldr	r3, [r7, #4]
 802fdd8:	2201      	movs	r2, #1
 802fdda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 802fdde:	2301      	movs	r3, #1
 802fde0:	e197      	b.n	8030112 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 802fde2:	687b      	ldr	r3, [r7, #4]
 802fde4:	681b      	ldr	r3, [r3, #0]
 802fde6:	697a      	ldr	r2, [r7, #20]
 802fde8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802fdea:	6878      	ldr	r0, [r7, #4]
 802fdec:	f002 fa88 	bl	8032300 <DMA_CalcBaseAndBitshift>
 802fdf0:	4603      	mov	r3, r0
 802fdf2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802fdf4:	687b      	ldr	r3, [r7, #4]
 802fdf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802fdf8:	f003 031f 	and.w	r3, r3, #31
 802fdfc:	223f      	movs	r2, #63	; 0x3f
 802fdfe:	409a      	lsls	r2, r3
 802fe00:	68bb      	ldr	r3, [r7, #8]
 802fe02:	609a      	str	r2, [r3, #8]
 802fe04:	e0cd      	b.n	802ffa2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802fe06:	687b      	ldr	r3, [r7, #4]
 802fe08:	681b      	ldr	r3, [r3, #0]
 802fe0a:	4a3b      	ldr	r2, [pc, #236]	; (802fef8 <HAL_DMA_Init+0x42c>)
 802fe0c:	4293      	cmp	r3, r2
 802fe0e:	d022      	beq.n	802fe56 <HAL_DMA_Init+0x38a>
 802fe10:	687b      	ldr	r3, [r7, #4]
 802fe12:	681b      	ldr	r3, [r3, #0]
 802fe14:	4a39      	ldr	r2, [pc, #228]	; (802fefc <HAL_DMA_Init+0x430>)
 802fe16:	4293      	cmp	r3, r2
 802fe18:	d01d      	beq.n	802fe56 <HAL_DMA_Init+0x38a>
 802fe1a:	687b      	ldr	r3, [r7, #4]
 802fe1c:	681b      	ldr	r3, [r3, #0]
 802fe1e:	4a38      	ldr	r2, [pc, #224]	; (802ff00 <HAL_DMA_Init+0x434>)
 802fe20:	4293      	cmp	r3, r2
 802fe22:	d018      	beq.n	802fe56 <HAL_DMA_Init+0x38a>
 802fe24:	687b      	ldr	r3, [r7, #4]
 802fe26:	681b      	ldr	r3, [r3, #0]
 802fe28:	4a36      	ldr	r2, [pc, #216]	; (802ff04 <HAL_DMA_Init+0x438>)
 802fe2a:	4293      	cmp	r3, r2
 802fe2c:	d013      	beq.n	802fe56 <HAL_DMA_Init+0x38a>
 802fe2e:	687b      	ldr	r3, [r7, #4]
 802fe30:	681b      	ldr	r3, [r3, #0]
 802fe32:	4a35      	ldr	r2, [pc, #212]	; (802ff08 <HAL_DMA_Init+0x43c>)
 802fe34:	4293      	cmp	r3, r2
 802fe36:	d00e      	beq.n	802fe56 <HAL_DMA_Init+0x38a>
 802fe38:	687b      	ldr	r3, [r7, #4]
 802fe3a:	681b      	ldr	r3, [r3, #0]
 802fe3c:	4a33      	ldr	r2, [pc, #204]	; (802ff0c <HAL_DMA_Init+0x440>)
 802fe3e:	4293      	cmp	r3, r2
 802fe40:	d009      	beq.n	802fe56 <HAL_DMA_Init+0x38a>
 802fe42:	687b      	ldr	r3, [r7, #4]
 802fe44:	681b      	ldr	r3, [r3, #0]
 802fe46:	4a32      	ldr	r2, [pc, #200]	; (802ff10 <HAL_DMA_Init+0x444>)
 802fe48:	4293      	cmp	r3, r2
 802fe4a:	d004      	beq.n	802fe56 <HAL_DMA_Init+0x38a>
 802fe4c:	687b      	ldr	r3, [r7, #4]
 802fe4e:	681b      	ldr	r3, [r3, #0]
 802fe50:	4a30      	ldr	r2, [pc, #192]	; (802ff14 <HAL_DMA_Init+0x448>)
 802fe52:	4293      	cmp	r3, r2
 802fe54:	d101      	bne.n	802fe5a <HAL_DMA_Init+0x38e>
 802fe56:	2301      	movs	r3, #1
 802fe58:	e000      	b.n	802fe5c <HAL_DMA_Init+0x390>
 802fe5a:	2300      	movs	r3, #0
 802fe5c:	2b00      	cmp	r3, #0
 802fe5e:	f000 8097 	beq.w	802ff90 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802fe62:	687b      	ldr	r3, [r7, #4]
 802fe64:	681b      	ldr	r3, [r3, #0]
 802fe66:	4a24      	ldr	r2, [pc, #144]	; (802fef8 <HAL_DMA_Init+0x42c>)
 802fe68:	4293      	cmp	r3, r2
 802fe6a:	d021      	beq.n	802feb0 <HAL_DMA_Init+0x3e4>
 802fe6c:	687b      	ldr	r3, [r7, #4]
 802fe6e:	681b      	ldr	r3, [r3, #0]
 802fe70:	4a22      	ldr	r2, [pc, #136]	; (802fefc <HAL_DMA_Init+0x430>)
 802fe72:	4293      	cmp	r3, r2
 802fe74:	d01c      	beq.n	802feb0 <HAL_DMA_Init+0x3e4>
 802fe76:	687b      	ldr	r3, [r7, #4]
 802fe78:	681b      	ldr	r3, [r3, #0]
 802fe7a:	4a21      	ldr	r2, [pc, #132]	; (802ff00 <HAL_DMA_Init+0x434>)
 802fe7c:	4293      	cmp	r3, r2
 802fe7e:	d017      	beq.n	802feb0 <HAL_DMA_Init+0x3e4>
 802fe80:	687b      	ldr	r3, [r7, #4]
 802fe82:	681b      	ldr	r3, [r3, #0]
 802fe84:	4a1f      	ldr	r2, [pc, #124]	; (802ff04 <HAL_DMA_Init+0x438>)
 802fe86:	4293      	cmp	r3, r2
 802fe88:	d012      	beq.n	802feb0 <HAL_DMA_Init+0x3e4>
 802fe8a:	687b      	ldr	r3, [r7, #4]
 802fe8c:	681b      	ldr	r3, [r3, #0]
 802fe8e:	4a1e      	ldr	r2, [pc, #120]	; (802ff08 <HAL_DMA_Init+0x43c>)
 802fe90:	4293      	cmp	r3, r2
 802fe92:	d00d      	beq.n	802feb0 <HAL_DMA_Init+0x3e4>
 802fe94:	687b      	ldr	r3, [r7, #4]
 802fe96:	681b      	ldr	r3, [r3, #0]
 802fe98:	4a1c      	ldr	r2, [pc, #112]	; (802ff0c <HAL_DMA_Init+0x440>)
 802fe9a:	4293      	cmp	r3, r2
 802fe9c:	d008      	beq.n	802feb0 <HAL_DMA_Init+0x3e4>
 802fe9e:	687b      	ldr	r3, [r7, #4]
 802fea0:	681b      	ldr	r3, [r3, #0]
 802fea2:	4a1b      	ldr	r2, [pc, #108]	; (802ff10 <HAL_DMA_Init+0x444>)
 802fea4:	4293      	cmp	r3, r2
 802fea6:	d003      	beq.n	802feb0 <HAL_DMA_Init+0x3e4>
 802fea8:	687b      	ldr	r3, [r7, #4]
 802feaa:	681b      	ldr	r3, [r3, #0]
 802feac:	4a19      	ldr	r2, [pc, #100]	; (802ff14 <HAL_DMA_Init+0x448>)
 802feae:	4293      	cmp	r3, r2
 802feb0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802feb2:	687b      	ldr	r3, [r7, #4]
 802feb4:	2202      	movs	r2, #2
 802feb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802feba:	687b      	ldr	r3, [r7, #4]
 802febc:	2200      	movs	r2, #0
 802febe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 802fec2:	687b      	ldr	r3, [r7, #4]
 802fec4:	681b      	ldr	r3, [r3, #0]
 802fec6:	681b      	ldr	r3, [r3, #0]
 802fec8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 802feca:	697a      	ldr	r2, [r7, #20]
 802fecc:	4b12      	ldr	r3, [pc, #72]	; (802ff18 <HAL_DMA_Init+0x44c>)
 802fece:	4013      	ands	r3, r2
 802fed0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802fed2:	687b      	ldr	r3, [r7, #4]
 802fed4:	689b      	ldr	r3, [r3, #8]
 802fed6:	2b40      	cmp	r3, #64	; 0x40
 802fed8:	d020      	beq.n	802ff1c <HAL_DMA_Init+0x450>
 802feda:	687b      	ldr	r3, [r7, #4]
 802fedc:	689b      	ldr	r3, [r3, #8]
 802fede:	2b80      	cmp	r3, #128	; 0x80
 802fee0:	d102      	bne.n	802fee8 <HAL_DMA_Init+0x41c>
 802fee2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802fee6:	e01a      	b.n	802ff1e <HAL_DMA_Init+0x452>
 802fee8:	2300      	movs	r3, #0
 802feea:	e018      	b.n	802ff1e <HAL_DMA_Init+0x452>
 802feec:	fe10803f 	.word	0xfe10803f
 802fef0:	5c001000 	.word	0x5c001000
 802fef4:	ffff0000 	.word	0xffff0000
 802fef8:	58025408 	.word	0x58025408
 802fefc:	5802541c 	.word	0x5802541c
 802ff00:	58025430 	.word	0x58025430
 802ff04:	58025444 	.word	0x58025444
 802ff08:	58025458 	.word	0x58025458
 802ff0c:	5802546c 	.word	0x5802546c
 802ff10:	58025480 	.word	0x58025480
 802ff14:	58025494 	.word	0x58025494
 802ff18:	fffe000f 	.word	0xfffe000f
 802ff1c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802ff1e:	687a      	ldr	r2, [r7, #4]
 802ff20:	68d2      	ldr	r2, [r2, #12]
 802ff22:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802ff24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802ff26:	687b      	ldr	r3, [r7, #4]
 802ff28:	691b      	ldr	r3, [r3, #16]
 802ff2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802ff2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802ff2e:	687b      	ldr	r3, [r7, #4]
 802ff30:	695b      	ldr	r3, [r3, #20]
 802ff32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802ff34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802ff36:	687b      	ldr	r3, [r7, #4]
 802ff38:	699b      	ldr	r3, [r3, #24]
 802ff3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802ff3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802ff3e:	687b      	ldr	r3, [r7, #4]
 802ff40:	69db      	ldr	r3, [r3, #28]
 802ff42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802ff44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 802ff46:	687b      	ldr	r3, [r7, #4]
 802ff48:	6a1b      	ldr	r3, [r3, #32]
 802ff4a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802ff4c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802ff4e:	697a      	ldr	r2, [r7, #20]
 802ff50:	4313      	orrs	r3, r2
 802ff52:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 802ff54:	687b      	ldr	r3, [r7, #4]
 802ff56:	681b      	ldr	r3, [r3, #0]
 802ff58:	697a      	ldr	r2, [r7, #20]
 802ff5a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 802ff5c:	687b      	ldr	r3, [r7, #4]
 802ff5e:	681b      	ldr	r3, [r3, #0]
 802ff60:	461a      	mov	r2, r3
 802ff62:	4b6e      	ldr	r3, [pc, #440]	; (803011c <HAL_DMA_Init+0x650>)
 802ff64:	4413      	add	r3, r2
 802ff66:	4a6e      	ldr	r2, [pc, #440]	; (8030120 <HAL_DMA_Init+0x654>)
 802ff68:	fba2 2303 	umull	r2, r3, r2, r3
 802ff6c:	091b      	lsrs	r3, r3, #4
 802ff6e:	009a      	lsls	r2, r3, #2
 802ff70:	687b      	ldr	r3, [r7, #4]
 802ff72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802ff74:	6878      	ldr	r0, [r7, #4]
 802ff76:	f002 f9c3 	bl	8032300 <DMA_CalcBaseAndBitshift>
 802ff7a:	4603      	mov	r3, r0
 802ff7c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802ff7e:	687b      	ldr	r3, [r7, #4]
 802ff80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ff82:	f003 031f 	and.w	r3, r3, #31
 802ff86:	2201      	movs	r2, #1
 802ff88:	409a      	lsls	r2, r3
 802ff8a:	68fb      	ldr	r3, [r7, #12]
 802ff8c:	605a      	str	r2, [r3, #4]
 802ff8e:	e008      	b.n	802ffa2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802ff90:	687b      	ldr	r3, [r7, #4]
 802ff92:	2240      	movs	r2, #64	; 0x40
 802ff94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 802ff96:	687b      	ldr	r3, [r7, #4]
 802ff98:	2203      	movs	r2, #3
 802ff9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 802ff9e:	2301      	movs	r3, #1
 802ffa0:	e0b7      	b.n	8030112 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802ffa2:	687b      	ldr	r3, [r7, #4]
 802ffa4:	681b      	ldr	r3, [r3, #0]
 802ffa6:	4a5f      	ldr	r2, [pc, #380]	; (8030124 <HAL_DMA_Init+0x658>)
 802ffa8:	4293      	cmp	r3, r2
 802ffaa:	d072      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 802ffac:	687b      	ldr	r3, [r7, #4]
 802ffae:	681b      	ldr	r3, [r3, #0]
 802ffb0:	4a5d      	ldr	r2, [pc, #372]	; (8030128 <HAL_DMA_Init+0x65c>)
 802ffb2:	4293      	cmp	r3, r2
 802ffb4:	d06d      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 802ffb6:	687b      	ldr	r3, [r7, #4]
 802ffb8:	681b      	ldr	r3, [r3, #0]
 802ffba:	4a5c      	ldr	r2, [pc, #368]	; (803012c <HAL_DMA_Init+0x660>)
 802ffbc:	4293      	cmp	r3, r2
 802ffbe:	d068      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 802ffc0:	687b      	ldr	r3, [r7, #4]
 802ffc2:	681b      	ldr	r3, [r3, #0]
 802ffc4:	4a5a      	ldr	r2, [pc, #360]	; (8030130 <HAL_DMA_Init+0x664>)
 802ffc6:	4293      	cmp	r3, r2
 802ffc8:	d063      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 802ffca:	687b      	ldr	r3, [r7, #4]
 802ffcc:	681b      	ldr	r3, [r3, #0]
 802ffce:	4a59      	ldr	r2, [pc, #356]	; (8030134 <HAL_DMA_Init+0x668>)
 802ffd0:	4293      	cmp	r3, r2
 802ffd2:	d05e      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 802ffd4:	687b      	ldr	r3, [r7, #4]
 802ffd6:	681b      	ldr	r3, [r3, #0]
 802ffd8:	4a57      	ldr	r2, [pc, #348]	; (8030138 <HAL_DMA_Init+0x66c>)
 802ffda:	4293      	cmp	r3, r2
 802ffdc:	d059      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 802ffde:	687b      	ldr	r3, [r7, #4]
 802ffe0:	681b      	ldr	r3, [r3, #0]
 802ffe2:	4a56      	ldr	r2, [pc, #344]	; (803013c <HAL_DMA_Init+0x670>)
 802ffe4:	4293      	cmp	r3, r2
 802ffe6:	d054      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 802ffe8:	687b      	ldr	r3, [r7, #4]
 802ffea:	681b      	ldr	r3, [r3, #0]
 802ffec:	4a54      	ldr	r2, [pc, #336]	; (8030140 <HAL_DMA_Init+0x674>)
 802ffee:	4293      	cmp	r3, r2
 802fff0:	d04f      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 802fff2:	687b      	ldr	r3, [r7, #4]
 802fff4:	681b      	ldr	r3, [r3, #0]
 802fff6:	4a53      	ldr	r2, [pc, #332]	; (8030144 <HAL_DMA_Init+0x678>)
 802fff8:	4293      	cmp	r3, r2
 802fffa:	d04a      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 802fffc:	687b      	ldr	r3, [r7, #4]
 802fffe:	681b      	ldr	r3, [r3, #0]
 8030000:	4a51      	ldr	r2, [pc, #324]	; (8030148 <HAL_DMA_Init+0x67c>)
 8030002:	4293      	cmp	r3, r2
 8030004:	d045      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 8030006:	687b      	ldr	r3, [r7, #4]
 8030008:	681b      	ldr	r3, [r3, #0]
 803000a:	4a50      	ldr	r2, [pc, #320]	; (803014c <HAL_DMA_Init+0x680>)
 803000c:	4293      	cmp	r3, r2
 803000e:	d040      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 8030010:	687b      	ldr	r3, [r7, #4]
 8030012:	681b      	ldr	r3, [r3, #0]
 8030014:	4a4e      	ldr	r2, [pc, #312]	; (8030150 <HAL_DMA_Init+0x684>)
 8030016:	4293      	cmp	r3, r2
 8030018:	d03b      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 803001a:	687b      	ldr	r3, [r7, #4]
 803001c:	681b      	ldr	r3, [r3, #0]
 803001e:	4a4d      	ldr	r2, [pc, #308]	; (8030154 <HAL_DMA_Init+0x688>)
 8030020:	4293      	cmp	r3, r2
 8030022:	d036      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 8030024:	687b      	ldr	r3, [r7, #4]
 8030026:	681b      	ldr	r3, [r3, #0]
 8030028:	4a4b      	ldr	r2, [pc, #300]	; (8030158 <HAL_DMA_Init+0x68c>)
 803002a:	4293      	cmp	r3, r2
 803002c:	d031      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 803002e:	687b      	ldr	r3, [r7, #4]
 8030030:	681b      	ldr	r3, [r3, #0]
 8030032:	4a4a      	ldr	r2, [pc, #296]	; (803015c <HAL_DMA_Init+0x690>)
 8030034:	4293      	cmp	r3, r2
 8030036:	d02c      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 8030038:	687b      	ldr	r3, [r7, #4]
 803003a:	681b      	ldr	r3, [r3, #0]
 803003c:	4a48      	ldr	r2, [pc, #288]	; (8030160 <HAL_DMA_Init+0x694>)
 803003e:	4293      	cmp	r3, r2
 8030040:	d027      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 8030042:	687b      	ldr	r3, [r7, #4]
 8030044:	681b      	ldr	r3, [r3, #0]
 8030046:	4a47      	ldr	r2, [pc, #284]	; (8030164 <HAL_DMA_Init+0x698>)
 8030048:	4293      	cmp	r3, r2
 803004a:	d022      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 803004c:	687b      	ldr	r3, [r7, #4]
 803004e:	681b      	ldr	r3, [r3, #0]
 8030050:	4a45      	ldr	r2, [pc, #276]	; (8030168 <HAL_DMA_Init+0x69c>)
 8030052:	4293      	cmp	r3, r2
 8030054:	d01d      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 8030056:	687b      	ldr	r3, [r7, #4]
 8030058:	681b      	ldr	r3, [r3, #0]
 803005a:	4a44      	ldr	r2, [pc, #272]	; (803016c <HAL_DMA_Init+0x6a0>)
 803005c:	4293      	cmp	r3, r2
 803005e:	d018      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 8030060:	687b      	ldr	r3, [r7, #4]
 8030062:	681b      	ldr	r3, [r3, #0]
 8030064:	4a42      	ldr	r2, [pc, #264]	; (8030170 <HAL_DMA_Init+0x6a4>)
 8030066:	4293      	cmp	r3, r2
 8030068:	d013      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 803006a:	687b      	ldr	r3, [r7, #4]
 803006c:	681b      	ldr	r3, [r3, #0]
 803006e:	4a41      	ldr	r2, [pc, #260]	; (8030174 <HAL_DMA_Init+0x6a8>)
 8030070:	4293      	cmp	r3, r2
 8030072:	d00e      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 8030074:	687b      	ldr	r3, [r7, #4]
 8030076:	681b      	ldr	r3, [r3, #0]
 8030078:	4a3f      	ldr	r2, [pc, #252]	; (8030178 <HAL_DMA_Init+0x6ac>)
 803007a:	4293      	cmp	r3, r2
 803007c:	d009      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 803007e:	687b      	ldr	r3, [r7, #4]
 8030080:	681b      	ldr	r3, [r3, #0]
 8030082:	4a3e      	ldr	r2, [pc, #248]	; (803017c <HAL_DMA_Init+0x6b0>)
 8030084:	4293      	cmp	r3, r2
 8030086:	d004      	beq.n	8030092 <HAL_DMA_Init+0x5c6>
 8030088:	687b      	ldr	r3, [r7, #4]
 803008a:	681b      	ldr	r3, [r3, #0]
 803008c:	4a3c      	ldr	r2, [pc, #240]	; (8030180 <HAL_DMA_Init+0x6b4>)
 803008e:	4293      	cmp	r3, r2
 8030090:	d101      	bne.n	8030096 <HAL_DMA_Init+0x5ca>
 8030092:	2301      	movs	r3, #1
 8030094:	e000      	b.n	8030098 <HAL_DMA_Init+0x5cc>
 8030096:	2300      	movs	r3, #0
 8030098:	2b00      	cmp	r3, #0
 803009a:	d032      	beq.n	8030102 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 803009c:	6878      	ldr	r0, [r7, #4]
 803009e:	f002 fa5d 	bl	803255c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80300a2:	687b      	ldr	r3, [r7, #4]
 80300a4:	689b      	ldr	r3, [r3, #8]
 80300a6:	2b80      	cmp	r3, #128	; 0x80
 80300a8:	d102      	bne.n	80300b0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80300aa:	687b      	ldr	r3, [r7, #4]
 80300ac:	2200      	movs	r2, #0
 80300ae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80300b0:	687b      	ldr	r3, [r7, #4]
 80300b2:	685a      	ldr	r2, [r3, #4]
 80300b4:	687b      	ldr	r3, [r7, #4]
 80300b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80300b8:	b2d2      	uxtb	r2, r2
 80300ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80300bc:	687b      	ldr	r3, [r7, #4]
 80300be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80300c0:	687a      	ldr	r2, [r7, #4]
 80300c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80300c4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80300c6:	687b      	ldr	r3, [r7, #4]
 80300c8:	685b      	ldr	r3, [r3, #4]
 80300ca:	2b00      	cmp	r3, #0
 80300cc:	d010      	beq.n	80300f0 <HAL_DMA_Init+0x624>
 80300ce:	687b      	ldr	r3, [r7, #4]
 80300d0:	685b      	ldr	r3, [r3, #4]
 80300d2:	2b08      	cmp	r3, #8
 80300d4:	d80c      	bhi.n	80300f0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80300d6:	6878      	ldr	r0, [r7, #4]
 80300d8:	f002 fada 	bl	8032690 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80300dc:	687b      	ldr	r3, [r7, #4]
 80300de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80300e0:	2200      	movs	r2, #0
 80300e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80300e4:	687b      	ldr	r3, [r7, #4]
 80300e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80300e8:	687a      	ldr	r2, [r7, #4]
 80300ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80300ec:	605a      	str	r2, [r3, #4]
 80300ee:	e008      	b.n	8030102 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80300f0:	687b      	ldr	r3, [r7, #4]
 80300f2:	2200      	movs	r2, #0
 80300f4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80300f6:	687b      	ldr	r3, [r7, #4]
 80300f8:	2200      	movs	r2, #0
 80300fa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80300fc:	687b      	ldr	r3, [r7, #4]
 80300fe:	2200      	movs	r2, #0
 8030100:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8030102:	687b      	ldr	r3, [r7, #4]
 8030104:	2200      	movs	r2, #0
 8030106:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8030108:	687b      	ldr	r3, [r7, #4]
 803010a:	2201      	movs	r2, #1
 803010c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8030110:	2300      	movs	r3, #0
}
 8030112:	4618      	mov	r0, r3
 8030114:	3718      	adds	r7, #24
 8030116:	46bd      	mov	sp, r7
 8030118:	bd80      	pop	{r7, pc}
 803011a:	bf00      	nop
 803011c:	a7fdabf8 	.word	0xa7fdabf8
 8030120:	cccccccd 	.word	0xcccccccd
 8030124:	40020010 	.word	0x40020010
 8030128:	40020028 	.word	0x40020028
 803012c:	40020040 	.word	0x40020040
 8030130:	40020058 	.word	0x40020058
 8030134:	40020070 	.word	0x40020070
 8030138:	40020088 	.word	0x40020088
 803013c:	400200a0 	.word	0x400200a0
 8030140:	400200b8 	.word	0x400200b8
 8030144:	40020410 	.word	0x40020410
 8030148:	40020428 	.word	0x40020428
 803014c:	40020440 	.word	0x40020440
 8030150:	40020458 	.word	0x40020458
 8030154:	40020470 	.word	0x40020470
 8030158:	40020488 	.word	0x40020488
 803015c:	400204a0 	.word	0x400204a0
 8030160:	400204b8 	.word	0x400204b8
 8030164:	58025408 	.word	0x58025408
 8030168:	5802541c 	.word	0x5802541c
 803016c:	58025430 	.word	0x58025430
 8030170:	58025444 	.word	0x58025444
 8030174:	58025458 	.word	0x58025458
 8030178:	5802546c 	.word	0x5802546c
 803017c:	58025480 	.word	0x58025480
 8030180:	58025494 	.word	0x58025494

08030184 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8030184:	b580      	push	{r7, lr}
 8030186:	b086      	sub	sp, #24
 8030188:	af00      	add	r7, sp, #0
 803018a:	60f8      	str	r0, [r7, #12]
 803018c:	60b9      	str	r1, [r7, #8]
 803018e:	607a      	str	r2, [r7, #4]
 8030190:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8030192:	2300      	movs	r3, #0
 8030194:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8030196:	68fb      	ldr	r3, [r7, #12]
 8030198:	2b00      	cmp	r3, #0
 803019a:	d101      	bne.n	80301a0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 803019c:	2301      	movs	r3, #1
 803019e:	e226      	b.n	80305ee <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80301a0:	68fb      	ldr	r3, [r7, #12]
 80301a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80301a6:	2b01      	cmp	r3, #1
 80301a8:	d101      	bne.n	80301ae <HAL_DMA_Start_IT+0x2a>
 80301aa:	2302      	movs	r3, #2
 80301ac:	e21f      	b.n	80305ee <HAL_DMA_Start_IT+0x46a>
 80301ae:	68fb      	ldr	r3, [r7, #12]
 80301b0:	2201      	movs	r2, #1
 80301b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80301b6:	68fb      	ldr	r3, [r7, #12]
 80301b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80301bc:	b2db      	uxtb	r3, r3
 80301be:	2b01      	cmp	r3, #1
 80301c0:	f040 820a 	bne.w	80305d8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80301c4:	68fb      	ldr	r3, [r7, #12]
 80301c6:	2202      	movs	r2, #2
 80301c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80301cc:	68fb      	ldr	r3, [r7, #12]
 80301ce:	2200      	movs	r2, #0
 80301d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80301d2:	68fb      	ldr	r3, [r7, #12]
 80301d4:	681b      	ldr	r3, [r3, #0]
 80301d6:	4a68      	ldr	r2, [pc, #416]	; (8030378 <HAL_DMA_Start_IT+0x1f4>)
 80301d8:	4293      	cmp	r3, r2
 80301da:	d04a      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 80301dc:	68fb      	ldr	r3, [r7, #12]
 80301de:	681b      	ldr	r3, [r3, #0]
 80301e0:	4a66      	ldr	r2, [pc, #408]	; (803037c <HAL_DMA_Start_IT+0x1f8>)
 80301e2:	4293      	cmp	r3, r2
 80301e4:	d045      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 80301e6:	68fb      	ldr	r3, [r7, #12]
 80301e8:	681b      	ldr	r3, [r3, #0]
 80301ea:	4a65      	ldr	r2, [pc, #404]	; (8030380 <HAL_DMA_Start_IT+0x1fc>)
 80301ec:	4293      	cmp	r3, r2
 80301ee:	d040      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 80301f0:	68fb      	ldr	r3, [r7, #12]
 80301f2:	681b      	ldr	r3, [r3, #0]
 80301f4:	4a63      	ldr	r2, [pc, #396]	; (8030384 <HAL_DMA_Start_IT+0x200>)
 80301f6:	4293      	cmp	r3, r2
 80301f8:	d03b      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 80301fa:	68fb      	ldr	r3, [r7, #12]
 80301fc:	681b      	ldr	r3, [r3, #0]
 80301fe:	4a62      	ldr	r2, [pc, #392]	; (8030388 <HAL_DMA_Start_IT+0x204>)
 8030200:	4293      	cmp	r3, r2
 8030202:	d036      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 8030204:	68fb      	ldr	r3, [r7, #12]
 8030206:	681b      	ldr	r3, [r3, #0]
 8030208:	4a60      	ldr	r2, [pc, #384]	; (803038c <HAL_DMA_Start_IT+0x208>)
 803020a:	4293      	cmp	r3, r2
 803020c:	d031      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 803020e:	68fb      	ldr	r3, [r7, #12]
 8030210:	681b      	ldr	r3, [r3, #0]
 8030212:	4a5f      	ldr	r2, [pc, #380]	; (8030390 <HAL_DMA_Start_IT+0x20c>)
 8030214:	4293      	cmp	r3, r2
 8030216:	d02c      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 8030218:	68fb      	ldr	r3, [r7, #12]
 803021a:	681b      	ldr	r3, [r3, #0]
 803021c:	4a5d      	ldr	r2, [pc, #372]	; (8030394 <HAL_DMA_Start_IT+0x210>)
 803021e:	4293      	cmp	r3, r2
 8030220:	d027      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 8030222:	68fb      	ldr	r3, [r7, #12]
 8030224:	681b      	ldr	r3, [r3, #0]
 8030226:	4a5c      	ldr	r2, [pc, #368]	; (8030398 <HAL_DMA_Start_IT+0x214>)
 8030228:	4293      	cmp	r3, r2
 803022a:	d022      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 803022c:	68fb      	ldr	r3, [r7, #12]
 803022e:	681b      	ldr	r3, [r3, #0]
 8030230:	4a5a      	ldr	r2, [pc, #360]	; (803039c <HAL_DMA_Start_IT+0x218>)
 8030232:	4293      	cmp	r3, r2
 8030234:	d01d      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 8030236:	68fb      	ldr	r3, [r7, #12]
 8030238:	681b      	ldr	r3, [r3, #0]
 803023a:	4a59      	ldr	r2, [pc, #356]	; (80303a0 <HAL_DMA_Start_IT+0x21c>)
 803023c:	4293      	cmp	r3, r2
 803023e:	d018      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 8030240:	68fb      	ldr	r3, [r7, #12]
 8030242:	681b      	ldr	r3, [r3, #0]
 8030244:	4a57      	ldr	r2, [pc, #348]	; (80303a4 <HAL_DMA_Start_IT+0x220>)
 8030246:	4293      	cmp	r3, r2
 8030248:	d013      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 803024a:	68fb      	ldr	r3, [r7, #12]
 803024c:	681b      	ldr	r3, [r3, #0]
 803024e:	4a56      	ldr	r2, [pc, #344]	; (80303a8 <HAL_DMA_Start_IT+0x224>)
 8030250:	4293      	cmp	r3, r2
 8030252:	d00e      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 8030254:	68fb      	ldr	r3, [r7, #12]
 8030256:	681b      	ldr	r3, [r3, #0]
 8030258:	4a54      	ldr	r2, [pc, #336]	; (80303ac <HAL_DMA_Start_IT+0x228>)
 803025a:	4293      	cmp	r3, r2
 803025c:	d009      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 803025e:	68fb      	ldr	r3, [r7, #12]
 8030260:	681b      	ldr	r3, [r3, #0]
 8030262:	4a53      	ldr	r2, [pc, #332]	; (80303b0 <HAL_DMA_Start_IT+0x22c>)
 8030264:	4293      	cmp	r3, r2
 8030266:	d004      	beq.n	8030272 <HAL_DMA_Start_IT+0xee>
 8030268:	68fb      	ldr	r3, [r7, #12]
 803026a:	681b      	ldr	r3, [r3, #0]
 803026c:	4a51      	ldr	r2, [pc, #324]	; (80303b4 <HAL_DMA_Start_IT+0x230>)
 803026e:	4293      	cmp	r3, r2
 8030270:	d108      	bne.n	8030284 <HAL_DMA_Start_IT+0x100>
 8030272:	68fb      	ldr	r3, [r7, #12]
 8030274:	681b      	ldr	r3, [r3, #0]
 8030276:	681a      	ldr	r2, [r3, #0]
 8030278:	68fb      	ldr	r3, [r7, #12]
 803027a:	681b      	ldr	r3, [r3, #0]
 803027c:	f022 0201 	bic.w	r2, r2, #1
 8030280:	601a      	str	r2, [r3, #0]
 8030282:	e007      	b.n	8030294 <HAL_DMA_Start_IT+0x110>
 8030284:	68fb      	ldr	r3, [r7, #12]
 8030286:	681b      	ldr	r3, [r3, #0]
 8030288:	681a      	ldr	r2, [r3, #0]
 803028a:	68fb      	ldr	r3, [r7, #12]
 803028c:	681b      	ldr	r3, [r3, #0]
 803028e:	f022 0201 	bic.w	r2, r2, #1
 8030292:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8030294:	683b      	ldr	r3, [r7, #0]
 8030296:	687a      	ldr	r2, [r7, #4]
 8030298:	68b9      	ldr	r1, [r7, #8]
 803029a:	68f8      	ldr	r0, [r7, #12]
 803029c:	f001 fe84 	bl	8031fa8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80302a0:	68fb      	ldr	r3, [r7, #12]
 80302a2:	681b      	ldr	r3, [r3, #0]
 80302a4:	4a34      	ldr	r2, [pc, #208]	; (8030378 <HAL_DMA_Start_IT+0x1f4>)
 80302a6:	4293      	cmp	r3, r2
 80302a8:	d04a      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 80302aa:	68fb      	ldr	r3, [r7, #12]
 80302ac:	681b      	ldr	r3, [r3, #0]
 80302ae:	4a33      	ldr	r2, [pc, #204]	; (803037c <HAL_DMA_Start_IT+0x1f8>)
 80302b0:	4293      	cmp	r3, r2
 80302b2:	d045      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 80302b4:	68fb      	ldr	r3, [r7, #12]
 80302b6:	681b      	ldr	r3, [r3, #0]
 80302b8:	4a31      	ldr	r2, [pc, #196]	; (8030380 <HAL_DMA_Start_IT+0x1fc>)
 80302ba:	4293      	cmp	r3, r2
 80302bc:	d040      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 80302be:	68fb      	ldr	r3, [r7, #12]
 80302c0:	681b      	ldr	r3, [r3, #0]
 80302c2:	4a30      	ldr	r2, [pc, #192]	; (8030384 <HAL_DMA_Start_IT+0x200>)
 80302c4:	4293      	cmp	r3, r2
 80302c6:	d03b      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 80302c8:	68fb      	ldr	r3, [r7, #12]
 80302ca:	681b      	ldr	r3, [r3, #0]
 80302cc:	4a2e      	ldr	r2, [pc, #184]	; (8030388 <HAL_DMA_Start_IT+0x204>)
 80302ce:	4293      	cmp	r3, r2
 80302d0:	d036      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 80302d2:	68fb      	ldr	r3, [r7, #12]
 80302d4:	681b      	ldr	r3, [r3, #0]
 80302d6:	4a2d      	ldr	r2, [pc, #180]	; (803038c <HAL_DMA_Start_IT+0x208>)
 80302d8:	4293      	cmp	r3, r2
 80302da:	d031      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 80302dc:	68fb      	ldr	r3, [r7, #12]
 80302de:	681b      	ldr	r3, [r3, #0]
 80302e0:	4a2b      	ldr	r2, [pc, #172]	; (8030390 <HAL_DMA_Start_IT+0x20c>)
 80302e2:	4293      	cmp	r3, r2
 80302e4:	d02c      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 80302e6:	68fb      	ldr	r3, [r7, #12]
 80302e8:	681b      	ldr	r3, [r3, #0]
 80302ea:	4a2a      	ldr	r2, [pc, #168]	; (8030394 <HAL_DMA_Start_IT+0x210>)
 80302ec:	4293      	cmp	r3, r2
 80302ee:	d027      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 80302f0:	68fb      	ldr	r3, [r7, #12]
 80302f2:	681b      	ldr	r3, [r3, #0]
 80302f4:	4a28      	ldr	r2, [pc, #160]	; (8030398 <HAL_DMA_Start_IT+0x214>)
 80302f6:	4293      	cmp	r3, r2
 80302f8:	d022      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 80302fa:	68fb      	ldr	r3, [r7, #12]
 80302fc:	681b      	ldr	r3, [r3, #0]
 80302fe:	4a27      	ldr	r2, [pc, #156]	; (803039c <HAL_DMA_Start_IT+0x218>)
 8030300:	4293      	cmp	r3, r2
 8030302:	d01d      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 8030304:	68fb      	ldr	r3, [r7, #12]
 8030306:	681b      	ldr	r3, [r3, #0]
 8030308:	4a25      	ldr	r2, [pc, #148]	; (80303a0 <HAL_DMA_Start_IT+0x21c>)
 803030a:	4293      	cmp	r3, r2
 803030c:	d018      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 803030e:	68fb      	ldr	r3, [r7, #12]
 8030310:	681b      	ldr	r3, [r3, #0]
 8030312:	4a24      	ldr	r2, [pc, #144]	; (80303a4 <HAL_DMA_Start_IT+0x220>)
 8030314:	4293      	cmp	r3, r2
 8030316:	d013      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 8030318:	68fb      	ldr	r3, [r7, #12]
 803031a:	681b      	ldr	r3, [r3, #0]
 803031c:	4a22      	ldr	r2, [pc, #136]	; (80303a8 <HAL_DMA_Start_IT+0x224>)
 803031e:	4293      	cmp	r3, r2
 8030320:	d00e      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 8030322:	68fb      	ldr	r3, [r7, #12]
 8030324:	681b      	ldr	r3, [r3, #0]
 8030326:	4a21      	ldr	r2, [pc, #132]	; (80303ac <HAL_DMA_Start_IT+0x228>)
 8030328:	4293      	cmp	r3, r2
 803032a:	d009      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 803032c:	68fb      	ldr	r3, [r7, #12]
 803032e:	681b      	ldr	r3, [r3, #0]
 8030330:	4a1f      	ldr	r2, [pc, #124]	; (80303b0 <HAL_DMA_Start_IT+0x22c>)
 8030332:	4293      	cmp	r3, r2
 8030334:	d004      	beq.n	8030340 <HAL_DMA_Start_IT+0x1bc>
 8030336:	68fb      	ldr	r3, [r7, #12]
 8030338:	681b      	ldr	r3, [r3, #0]
 803033a:	4a1e      	ldr	r2, [pc, #120]	; (80303b4 <HAL_DMA_Start_IT+0x230>)
 803033c:	4293      	cmp	r3, r2
 803033e:	d101      	bne.n	8030344 <HAL_DMA_Start_IT+0x1c0>
 8030340:	2301      	movs	r3, #1
 8030342:	e000      	b.n	8030346 <HAL_DMA_Start_IT+0x1c2>
 8030344:	2300      	movs	r3, #0
 8030346:	2b00      	cmp	r3, #0
 8030348:	d036      	beq.n	80303b8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 803034a:	68fb      	ldr	r3, [r7, #12]
 803034c:	681b      	ldr	r3, [r3, #0]
 803034e:	681b      	ldr	r3, [r3, #0]
 8030350:	f023 021e 	bic.w	r2, r3, #30
 8030354:	68fb      	ldr	r3, [r7, #12]
 8030356:	681b      	ldr	r3, [r3, #0]
 8030358:	f042 0216 	orr.w	r2, r2, #22
 803035c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 803035e:	68fb      	ldr	r3, [r7, #12]
 8030360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030362:	2b00      	cmp	r3, #0
 8030364:	d03e      	beq.n	80303e4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8030366:	68fb      	ldr	r3, [r7, #12]
 8030368:	681b      	ldr	r3, [r3, #0]
 803036a:	681a      	ldr	r2, [r3, #0]
 803036c:	68fb      	ldr	r3, [r7, #12]
 803036e:	681b      	ldr	r3, [r3, #0]
 8030370:	f042 0208 	orr.w	r2, r2, #8
 8030374:	601a      	str	r2, [r3, #0]
 8030376:	e035      	b.n	80303e4 <HAL_DMA_Start_IT+0x260>
 8030378:	40020010 	.word	0x40020010
 803037c:	40020028 	.word	0x40020028
 8030380:	40020040 	.word	0x40020040
 8030384:	40020058 	.word	0x40020058
 8030388:	40020070 	.word	0x40020070
 803038c:	40020088 	.word	0x40020088
 8030390:	400200a0 	.word	0x400200a0
 8030394:	400200b8 	.word	0x400200b8
 8030398:	40020410 	.word	0x40020410
 803039c:	40020428 	.word	0x40020428
 80303a0:	40020440 	.word	0x40020440
 80303a4:	40020458 	.word	0x40020458
 80303a8:	40020470 	.word	0x40020470
 80303ac:	40020488 	.word	0x40020488
 80303b0:	400204a0 	.word	0x400204a0
 80303b4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80303b8:	68fb      	ldr	r3, [r7, #12]
 80303ba:	681b      	ldr	r3, [r3, #0]
 80303bc:	681b      	ldr	r3, [r3, #0]
 80303be:	f023 020e 	bic.w	r2, r3, #14
 80303c2:	68fb      	ldr	r3, [r7, #12]
 80303c4:	681b      	ldr	r3, [r3, #0]
 80303c6:	f042 020a 	orr.w	r2, r2, #10
 80303ca:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80303cc:	68fb      	ldr	r3, [r7, #12]
 80303ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80303d0:	2b00      	cmp	r3, #0
 80303d2:	d007      	beq.n	80303e4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80303d4:	68fb      	ldr	r3, [r7, #12]
 80303d6:	681b      	ldr	r3, [r3, #0]
 80303d8:	681a      	ldr	r2, [r3, #0]
 80303da:	68fb      	ldr	r3, [r7, #12]
 80303dc:	681b      	ldr	r3, [r3, #0]
 80303de:	f042 0204 	orr.w	r2, r2, #4
 80303e2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80303e4:	68fb      	ldr	r3, [r7, #12]
 80303e6:	681b      	ldr	r3, [r3, #0]
 80303e8:	4a83      	ldr	r2, [pc, #524]	; (80305f8 <HAL_DMA_Start_IT+0x474>)
 80303ea:	4293      	cmp	r3, r2
 80303ec:	d072      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 80303ee:	68fb      	ldr	r3, [r7, #12]
 80303f0:	681b      	ldr	r3, [r3, #0]
 80303f2:	4a82      	ldr	r2, [pc, #520]	; (80305fc <HAL_DMA_Start_IT+0x478>)
 80303f4:	4293      	cmp	r3, r2
 80303f6:	d06d      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 80303f8:	68fb      	ldr	r3, [r7, #12]
 80303fa:	681b      	ldr	r3, [r3, #0]
 80303fc:	4a80      	ldr	r2, [pc, #512]	; (8030600 <HAL_DMA_Start_IT+0x47c>)
 80303fe:	4293      	cmp	r3, r2
 8030400:	d068      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 8030402:	68fb      	ldr	r3, [r7, #12]
 8030404:	681b      	ldr	r3, [r3, #0]
 8030406:	4a7f      	ldr	r2, [pc, #508]	; (8030604 <HAL_DMA_Start_IT+0x480>)
 8030408:	4293      	cmp	r3, r2
 803040a:	d063      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 803040c:	68fb      	ldr	r3, [r7, #12]
 803040e:	681b      	ldr	r3, [r3, #0]
 8030410:	4a7d      	ldr	r2, [pc, #500]	; (8030608 <HAL_DMA_Start_IT+0x484>)
 8030412:	4293      	cmp	r3, r2
 8030414:	d05e      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 8030416:	68fb      	ldr	r3, [r7, #12]
 8030418:	681b      	ldr	r3, [r3, #0]
 803041a:	4a7c      	ldr	r2, [pc, #496]	; (803060c <HAL_DMA_Start_IT+0x488>)
 803041c:	4293      	cmp	r3, r2
 803041e:	d059      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 8030420:	68fb      	ldr	r3, [r7, #12]
 8030422:	681b      	ldr	r3, [r3, #0]
 8030424:	4a7a      	ldr	r2, [pc, #488]	; (8030610 <HAL_DMA_Start_IT+0x48c>)
 8030426:	4293      	cmp	r3, r2
 8030428:	d054      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 803042a:	68fb      	ldr	r3, [r7, #12]
 803042c:	681b      	ldr	r3, [r3, #0]
 803042e:	4a79      	ldr	r2, [pc, #484]	; (8030614 <HAL_DMA_Start_IT+0x490>)
 8030430:	4293      	cmp	r3, r2
 8030432:	d04f      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 8030434:	68fb      	ldr	r3, [r7, #12]
 8030436:	681b      	ldr	r3, [r3, #0]
 8030438:	4a77      	ldr	r2, [pc, #476]	; (8030618 <HAL_DMA_Start_IT+0x494>)
 803043a:	4293      	cmp	r3, r2
 803043c:	d04a      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 803043e:	68fb      	ldr	r3, [r7, #12]
 8030440:	681b      	ldr	r3, [r3, #0]
 8030442:	4a76      	ldr	r2, [pc, #472]	; (803061c <HAL_DMA_Start_IT+0x498>)
 8030444:	4293      	cmp	r3, r2
 8030446:	d045      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 8030448:	68fb      	ldr	r3, [r7, #12]
 803044a:	681b      	ldr	r3, [r3, #0]
 803044c:	4a74      	ldr	r2, [pc, #464]	; (8030620 <HAL_DMA_Start_IT+0x49c>)
 803044e:	4293      	cmp	r3, r2
 8030450:	d040      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 8030452:	68fb      	ldr	r3, [r7, #12]
 8030454:	681b      	ldr	r3, [r3, #0]
 8030456:	4a73      	ldr	r2, [pc, #460]	; (8030624 <HAL_DMA_Start_IT+0x4a0>)
 8030458:	4293      	cmp	r3, r2
 803045a:	d03b      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 803045c:	68fb      	ldr	r3, [r7, #12]
 803045e:	681b      	ldr	r3, [r3, #0]
 8030460:	4a71      	ldr	r2, [pc, #452]	; (8030628 <HAL_DMA_Start_IT+0x4a4>)
 8030462:	4293      	cmp	r3, r2
 8030464:	d036      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 8030466:	68fb      	ldr	r3, [r7, #12]
 8030468:	681b      	ldr	r3, [r3, #0]
 803046a:	4a70      	ldr	r2, [pc, #448]	; (803062c <HAL_DMA_Start_IT+0x4a8>)
 803046c:	4293      	cmp	r3, r2
 803046e:	d031      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 8030470:	68fb      	ldr	r3, [r7, #12]
 8030472:	681b      	ldr	r3, [r3, #0]
 8030474:	4a6e      	ldr	r2, [pc, #440]	; (8030630 <HAL_DMA_Start_IT+0x4ac>)
 8030476:	4293      	cmp	r3, r2
 8030478:	d02c      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 803047a:	68fb      	ldr	r3, [r7, #12]
 803047c:	681b      	ldr	r3, [r3, #0]
 803047e:	4a6d      	ldr	r2, [pc, #436]	; (8030634 <HAL_DMA_Start_IT+0x4b0>)
 8030480:	4293      	cmp	r3, r2
 8030482:	d027      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 8030484:	68fb      	ldr	r3, [r7, #12]
 8030486:	681b      	ldr	r3, [r3, #0]
 8030488:	4a6b      	ldr	r2, [pc, #428]	; (8030638 <HAL_DMA_Start_IT+0x4b4>)
 803048a:	4293      	cmp	r3, r2
 803048c:	d022      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 803048e:	68fb      	ldr	r3, [r7, #12]
 8030490:	681b      	ldr	r3, [r3, #0]
 8030492:	4a6a      	ldr	r2, [pc, #424]	; (803063c <HAL_DMA_Start_IT+0x4b8>)
 8030494:	4293      	cmp	r3, r2
 8030496:	d01d      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 8030498:	68fb      	ldr	r3, [r7, #12]
 803049a:	681b      	ldr	r3, [r3, #0]
 803049c:	4a68      	ldr	r2, [pc, #416]	; (8030640 <HAL_DMA_Start_IT+0x4bc>)
 803049e:	4293      	cmp	r3, r2
 80304a0:	d018      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 80304a2:	68fb      	ldr	r3, [r7, #12]
 80304a4:	681b      	ldr	r3, [r3, #0]
 80304a6:	4a67      	ldr	r2, [pc, #412]	; (8030644 <HAL_DMA_Start_IT+0x4c0>)
 80304a8:	4293      	cmp	r3, r2
 80304aa:	d013      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 80304ac:	68fb      	ldr	r3, [r7, #12]
 80304ae:	681b      	ldr	r3, [r3, #0]
 80304b0:	4a65      	ldr	r2, [pc, #404]	; (8030648 <HAL_DMA_Start_IT+0x4c4>)
 80304b2:	4293      	cmp	r3, r2
 80304b4:	d00e      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 80304b6:	68fb      	ldr	r3, [r7, #12]
 80304b8:	681b      	ldr	r3, [r3, #0]
 80304ba:	4a64      	ldr	r2, [pc, #400]	; (803064c <HAL_DMA_Start_IT+0x4c8>)
 80304bc:	4293      	cmp	r3, r2
 80304be:	d009      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 80304c0:	68fb      	ldr	r3, [r7, #12]
 80304c2:	681b      	ldr	r3, [r3, #0]
 80304c4:	4a62      	ldr	r2, [pc, #392]	; (8030650 <HAL_DMA_Start_IT+0x4cc>)
 80304c6:	4293      	cmp	r3, r2
 80304c8:	d004      	beq.n	80304d4 <HAL_DMA_Start_IT+0x350>
 80304ca:	68fb      	ldr	r3, [r7, #12]
 80304cc:	681b      	ldr	r3, [r3, #0]
 80304ce:	4a61      	ldr	r2, [pc, #388]	; (8030654 <HAL_DMA_Start_IT+0x4d0>)
 80304d0:	4293      	cmp	r3, r2
 80304d2:	d101      	bne.n	80304d8 <HAL_DMA_Start_IT+0x354>
 80304d4:	2301      	movs	r3, #1
 80304d6:	e000      	b.n	80304da <HAL_DMA_Start_IT+0x356>
 80304d8:	2300      	movs	r3, #0
 80304da:	2b00      	cmp	r3, #0
 80304dc:	d01a      	beq.n	8030514 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80304de:	68fb      	ldr	r3, [r7, #12]
 80304e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80304e2:	681b      	ldr	r3, [r3, #0]
 80304e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80304e8:	2b00      	cmp	r3, #0
 80304ea:	d007      	beq.n	80304fc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80304ec:	68fb      	ldr	r3, [r7, #12]
 80304ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80304f0:	681a      	ldr	r2, [r3, #0]
 80304f2:	68fb      	ldr	r3, [r7, #12]
 80304f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80304f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80304fa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80304fc:	68fb      	ldr	r3, [r7, #12]
 80304fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8030500:	2b00      	cmp	r3, #0
 8030502:	d007      	beq.n	8030514 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8030504:	68fb      	ldr	r3, [r7, #12]
 8030506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8030508:	681a      	ldr	r2, [r3, #0]
 803050a:	68fb      	ldr	r3, [r7, #12]
 803050c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803050e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8030512:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8030514:	68fb      	ldr	r3, [r7, #12]
 8030516:	681b      	ldr	r3, [r3, #0]
 8030518:	4a37      	ldr	r2, [pc, #220]	; (80305f8 <HAL_DMA_Start_IT+0x474>)
 803051a:	4293      	cmp	r3, r2
 803051c:	d04a      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 803051e:	68fb      	ldr	r3, [r7, #12]
 8030520:	681b      	ldr	r3, [r3, #0]
 8030522:	4a36      	ldr	r2, [pc, #216]	; (80305fc <HAL_DMA_Start_IT+0x478>)
 8030524:	4293      	cmp	r3, r2
 8030526:	d045      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 8030528:	68fb      	ldr	r3, [r7, #12]
 803052a:	681b      	ldr	r3, [r3, #0]
 803052c:	4a34      	ldr	r2, [pc, #208]	; (8030600 <HAL_DMA_Start_IT+0x47c>)
 803052e:	4293      	cmp	r3, r2
 8030530:	d040      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 8030532:	68fb      	ldr	r3, [r7, #12]
 8030534:	681b      	ldr	r3, [r3, #0]
 8030536:	4a33      	ldr	r2, [pc, #204]	; (8030604 <HAL_DMA_Start_IT+0x480>)
 8030538:	4293      	cmp	r3, r2
 803053a:	d03b      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 803053c:	68fb      	ldr	r3, [r7, #12]
 803053e:	681b      	ldr	r3, [r3, #0]
 8030540:	4a31      	ldr	r2, [pc, #196]	; (8030608 <HAL_DMA_Start_IT+0x484>)
 8030542:	4293      	cmp	r3, r2
 8030544:	d036      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 8030546:	68fb      	ldr	r3, [r7, #12]
 8030548:	681b      	ldr	r3, [r3, #0]
 803054a:	4a30      	ldr	r2, [pc, #192]	; (803060c <HAL_DMA_Start_IT+0x488>)
 803054c:	4293      	cmp	r3, r2
 803054e:	d031      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 8030550:	68fb      	ldr	r3, [r7, #12]
 8030552:	681b      	ldr	r3, [r3, #0]
 8030554:	4a2e      	ldr	r2, [pc, #184]	; (8030610 <HAL_DMA_Start_IT+0x48c>)
 8030556:	4293      	cmp	r3, r2
 8030558:	d02c      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 803055a:	68fb      	ldr	r3, [r7, #12]
 803055c:	681b      	ldr	r3, [r3, #0]
 803055e:	4a2d      	ldr	r2, [pc, #180]	; (8030614 <HAL_DMA_Start_IT+0x490>)
 8030560:	4293      	cmp	r3, r2
 8030562:	d027      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 8030564:	68fb      	ldr	r3, [r7, #12]
 8030566:	681b      	ldr	r3, [r3, #0]
 8030568:	4a2b      	ldr	r2, [pc, #172]	; (8030618 <HAL_DMA_Start_IT+0x494>)
 803056a:	4293      	cmp	r3, r2
 803056c:	d022      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 803056e:	68fb      	ldr	r3, [r7, #12]
 8030570:	681b      	ldr	r3, [r3, #0]
 8030572:	4a2a      	ldr	r2, [pc, #168]	; (803061c <HAL_DMA_Start_IT+0x498>)
 8030574:	4293      	cmp	r3, r2
 8030576:	d01d      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 8030578:	68fb      	ldr	r3, [r7, #12]
 803057a:	681b      	ldr	r3, [r3, #0]
 803057c:	4a28      	ldr	r2, [pc, #160]	; (8030620 <HAL_DMA_Start_IT+0x49c>)
 803057e:	4293      	cmp	r3, r2
 8030580:	d018      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 8030582:	68fb      	ldr	r3, [r7, #12]
 8030584:	681b      	ldr	r3, [r3, #0]
 8030586:	4a27      	ldr	r2, [pc, #156]	; (8030624 <HAL_DMA_Start_IT+0x4a0>)
 8030588:	4293      	cmp	r3, r2
 803058a:	d013      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 803058c:	68fb      	ldr	r3, [r7, #12]
 803058e:	681b      	ldr	r3, [r3, #0]
 8030590:	4a25      	ldr	r2, [pc, #148]	; (8030628 <HAL_DMA_Start_IT+0x4a4>)
 8030592:	4293      	cmp	r3, r2
 8030594:	d00e      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 8030596:	68fb      	ldr	r3, [r7, #12]
 8030598:	681b      	ldr	r3, [r3, #0]
 803059a:	4a24      	ldr	r2, [pc, #144]	; (803062c <HAL_DMA_Start_IT+0x4a8>)
 803059c:	4293      	cmp	r3, r2
 803059e:	d009      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 80305a0:	68fb      	ldr	r3, [r7, #12]
 80305a2:	681b      	ldr	r3, [r3, #0]
 80305a4:	4a22      	ldr	r2, [pc, #136]	; (8030630 <HAL_DMA_Start_IT+0x4ac>)
 80305a6:	4293      	cmp	r3, r2
 80305a8:	d004      	beq.n	80305b4 <HAL_DMA_Start_IT+0x430>
 80305aa:	68fb      	ldr	r3, [r7, #12]
 80305ac:	681b      	ldr	r3, [r3, #0]
 80305ae:	4a21      	ldr	r2, [pc, #132]	; (8030634 <HAL_DMA_Start_IT+0x4b0>)
 80305b0:	4293      	cmp	r3, r2
 80305b2:	d108      	bne.n	80305c6 <HAL_DMA_Start_IT+0x442>
 80305b4:	68fb      	ldr	r3, [r7, #12]
 80305b6:	681b      	ldr	r3, [r3, #0]
 80305b8:	681a      	ldr	r2, [r3, #0]
 80305ba:	68fb      	ldr	r3, [r7, #12]
 80305bc:	681b      	ldr	r3, [r3, #0]
 80305be:	f042 0201 	orr.w	r2, r2, #1
 80305c2:	601a      	str	r2, [r3, #0]
 80305c4:	e012      	b.n	80305ec <HAL_DMA_Start_IT+0x468>
 80305c6:	68fb      	ldr	r3, [r7, #12]
 80305c8:	681b      	ldr	r3, [r3, #0]
 80305ca:	681a      	ldr	r2, [r3, #0]
 80305cc:	68fb      	ldr	r3, [r7, #12]
 80305ce:	681b      	ldr	r3, [r3, #0]
 80305d0:	f042 0201 	orr.w	r2, r2, #1
 80305d4:	601a      	str	r2, [r3, #0]
 80305d6:	e009      	b.n	80305ec <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80305d8:	68fb      	ldr	r3, [r7, #12]
 80305da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80305de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80305e0:	68fb      	ldr	r3, [r7, #12]
 80305e2:	2200      	movs	r2, #0
 80305e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80305e8:	2301      	movs	r3, #1
 80305ea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80305ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80305ee:	4618      	mov	r0, r3
 80305f0:	3718      	adds	r7, #24
 80305f2:	46bd      	mov	sp, r7
 80305f4:	bd80      	pop	{r7, pc}
 80305f6:	bf00      	nop
 80305f8:	40020010 	.word	0x40020010
 80305fc:	40020028 	.word	0x40020028
 8030600:	40020040 	.word	0x40020040
 8030604:	40020058 	.word	0x40020058
 8030608:	40020070 	.word	0x40020070
 803060c:	40020088 	.word	0x40020088
 8030610:	400200a0 	.word	0x400200a0
 8030614:	400200b8 	.word	0x400200b8
 8030618:	40020410 	.word	0x40020410
 803061c:	40020428 	.word	0x40020428
 8030620:	40020440 	.word	0x40020440
 8030624:	40020458 	.word	0x40020458
 8030628:	40020470 	.word	0x40020470
 803062c:	40020488 	.word	0x40020488
 8030630:	400204a0 	.word	0x400204a0
 8030634:	400204b8 	.word	0x400204b8
 8030638:	58025408 	.word	0x58025408
 803063c:	5802541c 	.word	0x5802541c
 8030640:	58025430 	.word	0x58025430
 8030644:	58025444 	.word	0x58025444
 8030648:	58025458 	.word	0x58025458
 803064c:	5802546c 	.word	0x5802546c
 8030650:	58025480 	.word	0x58025480
 8030654:	58025494 	.word	0x58025494

08030658 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8030658:	b580      	push	{r7, lr}
 803065a:	b086      	sub	sp, #24
 803065c:	af00      	add	r7, sp, #0
 803065e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8030660:	f7fe fd38 	bl	802f0d4 <HAL_GetTick>
 8030664:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8030666:	687b      	ldr	r3, [r7, #4]
 8030668:	2b00      	cmp	r3, #0
 803066a:	d101      	bne.n	8030670 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 803066c:	2301      	movs	r3, #1
 803066e:	e2dc      	b.n	8030c2a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8030670:	687b      	ldr	r3, [r7, #4]
 8030672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8030676:	b2db      	uxtb	r3, r3
 8030678:	2b02      	cmp	r3, #2
 803067a:	d008      	beq.n	803068e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 803067c:	687b      	ldr	r3, [r7, #4]
 803067e:	2280      	movs	r2, #128	; 0x80
 8030680:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8030682:	687b      	ldr	r3, [r7, #4]
 8030684:	2200      	movs	r2, #0
 8030686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 803068a:	2301      	movs	r3, #1
 803068c:	e2cd      	b.n	8030c2a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 803068e:	687b      	ldr	r3, [r7, #4]
 8030690:	681b      	ldr	r3, [r3, #0]
 8030692:	4a76      	ldr	r2, [pc, #472]	; (803086c <HAL_DMA_Abort+0x214>)
 8030694:	4293      	cmp	r3, r2
 8030696:	d04a      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 8030698:	687b      	ldr	r3, [r7, #4]
 803069a:	681b      	ldr	r3, [r3, #0]
 803069c:	4a74      	ldr	r2, [pc, #464]	; (8030870 <HAL_DMA_Abort+0x218>)
 803069e:	4293      	cmp	r3, r2
 80306a0:	d045      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 80306a2:	687b      	ldr	r3, [r7, #4]
 80306a4:	681b      	ldr	r3, [r3, #0]
 80306a6:	4a73      	ldr	r2, [pc, #460]	; (8030874 <HAL_DMA_Abort+0x21c>)
 80306a8:	4293      	cmp	r3, r2
 80306aa:	d040      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 80306ac:	687b      	ldr	r3, [r7, #4]
 80306ae:	681b      	ldr	r3, [r3, #0]
 80306b0:	4a71      	ldr	r2, [pc, #452]	; (8030878 <HAL_DMA_Abort+0x220>)
 80306b2:	4293      	cmp	r3, r2
 80306b4:	d03b      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 80306b6:	687b      	ldr	r3, [r7, #4]
 80306b8:	681b      	ldr	r3, [r3, #0]
 80306ba:	4a70      	ldr	r2, [pc, #448]	; (803087c <HAL_DMA_Abort+0x224>)
 80306bc:	4293      	cmp	r3, r2
 80306be:	d036      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 80306c0:	687b      	ldr	r3, [r7, #4]
 80306c2:	681b      	ldr	r3, [r3, #0]
 80306c4:	4a6e      	ldr	r2, [pc, #440]	; (8030880 <HAL_DMA_Abort+0x228>)
 80306c6:	4293      	cmp	r3, r2
 80306c8:	d031      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 80306ca:	687b      	ldr	r3, [r7, #4]
 80306cc:	681b      	ldr	r3, [r3, #0]
 80306ce:	4a6d      	ldr	r2, [pc, #436]	; (8030884 <HAL_DMA_Abort+0x22c>)
 80306d0:	4293      	cmp	r3, r2
 80306d2:	d02c      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 80306d4:	687b      	ldr	r3, [r7, #4]
 80306d6:	681b      	ldr	r3, [r3, #0]
 80306d8:	4a6b      	ldr	r2, [pc, #428]	; (8030888 <HAL_DMA_Abort+0x230>)
 80306da:	4293      	cmp	r3, r2
 80306dc:	d027      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 80306de:	687b      	ldr	r3, [r7, #4]
 80306e0:	681b      	ldr	r3, [r3, #0]
 80306e2:	4a6a      	ldr	r2, [pc, #424]	; (803088c <HAL_DMA_Abort+0x234>)
 80306e4:	4293      	cmp	r3, r2
 80306e6:	d022      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 80306e8:	687b      	ldr	r3, [r7, #4]
 80306ea:	681b      	ldr	r3, [r3, #0]
 80306ec:	4a68      	ldr	r2, [pc, #416]	; (8030890 <HAL_DMA_Abort+0x238>)
 80306ee:	4293      	cmp	r3, r2
 80306f0:	d01d      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 80306f2:	687b      	ldr	r3, [r7, #4]
 80306f4:	681b      	ldr	r3, [r3, #0]
 80306f6:	4a67      	ldr	r2, [pc, #412]	; (8030894 <HAL_DMA_Abort+0x23c>)
 80306f8:	4293      	cmp	r3, r2
 80306fa:	d018      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 80306fc:	687b      	ldr	r3, [r7, #4]
 80306fe:	681b      	ldr	r3, [r3, #0]
 8030700:	4a65      	ldr	r2, [pc, #404]	; (8030898 <HAL_DMA_Abort+0x240>)
 8030702:	4293      	cmp	r3, r2
 8030704:	d013      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 8030706:	687b      	ldr	r3, [r7, #4]
 8030708:	681b      	ldr	r3, [r3, #0]
 803070a:	4a64      	ldr	r2, [pc, #400]	; (803089c <HAL_DMA_Abort+0x244>)
 803070c:	4293      	cmp	r3, r2
 803070e:	d00e      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 8030710:	687b      	ldr	r3, [r7, #4]
 8030712:	681b      	ldr	r3, [r3, #0]
 8030714:	4a62      	ldr	r2, [pc, #392]	; (80308a0 <HAL_DMA_Abort+0x248>)
 8030716:	4293      	cmp	r3, r2
 8030718:	d009      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 803071a:	687b      	ldr	r3, [r7, #4]
 803071c:	681b      	ldr	r3, [r3, #0]
 803071e:	4a61      	ldr	r2, [pc, #388]	; (80308a4 <HAL_DMA_Abort+0x24c>)
 8030720:	4293      	cmp	r3, r2
 8030722:	d004      	beq.n	803072e <HAL_DMA_Abort+0xd6>
 8030724:	687b      	ldr	r3, [r7, #4]
 8030726:	681b      	ldr	r3, [r3, #0]
 8030728:	4a5f      	ldr	r2, [pc, #380]	; (80308a8 <HAL_DMA_Abort+0x250>)
 803072a:	4293      	cmp	r3, r2
 803072c:	d101      	bne.n	8030732 <HAL_DMA_Abort+0xda>
 803072e:	2301      	movs	r3, #1
 8030730:	e000      	b.n	8030734 <HAL_DMA_Abort+0xdc>
 8030732:	2300      	movs	r3, #0
 8030734:	2b00      	cmp	r3, #0
 8030736:	d013      	beq.n	8030760 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8030738:	687b      	ldr	r3, [r7, #4]
 803073a:	681b      	ldr	r3, [r3, #0]
 803073c:	681a      	ldr	r2, [r3, #0]
 803073e:	687b      	ldr	r3, [r7, #4]
 8030740:	681b      	ldr	r3, [r3, #0]
 8030742:	f022 021e 	bic.w	r2, r2, #30
 8030746:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8030748:	687b      	ldr	r3, [r7, #4]
 803074a:	681b      	ldr	r3, [r3, #0]
 803074c:	695a      	ldr	r2, [r3, #20]
 803074e:	687b      	ldr	r3, [r7, #4]
 8030750:	681b      	ldr	r3, [r3, #0]
 8030752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8030756:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8030758:	687b      	ldr	r3, [r7, #4]
 803075a:	681b      	ldr	r3, [r3, #0]
 803075c:	617b      	str	r3, [r7, #20]
 803075e:	e00a      	b.n	8030776 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8030760:	687b      	ldr	r3, [r7, #4]
 8030762:	681b      	ldr	r3, [r3, #0]
 8030764:	681a      	ldr	r2, [r3, #0]
 8030766:	687b      	ldr	r3, [r7, #4]
 8030768:	681b      	ldr	r3, [r3, #0]
 803076a:	f022 020e 	bic.w	r2, r2, #14
 803076e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8030770:	687b      	ldr	r3, [r7, #4]
 8030772:	681b      	ldr	r3, [r3, #0]
 8030774:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8030776:	687b      	ldr	r3, [r7, #4]
 8030778:	681b      	ldr	r3, [r3, #0]
 803077a:	4a3c      	ldr	r2, [pc, #240]	; (803086c <HAL_DMA_Abort+0x214>)
 803077c:	4293      	cmp	r3, r2
 803077e:	d072      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 8030780:	687b      	ldr	r3, [r7, #4]
 8030782:	681b      	ldr	r3, [r3, #0]
 8030784:	4a3a      	ldr	r2, [pc, #232]	; (8030870 <HAL_DMA_Abort+0x218>)
 8030786:	4293      	cmp	r3, r2
 8030788:	d06d      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 803078a:	687b      	ldr	r3, [r7, #4]
 803078c:	681b      	ldr	r3, [r3, #0]
 803078e:	4a39      	ldr	r2, [pc, #228]	; (8030874 <HAL_DMA_Abort+0x21c>)
 8030790:	4293      	cmp	r3, r2
 8030792:	d068      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 8030794:	687b      	ldr	r3, [r7, #4]
 8030796:	681b      	ldr	r3, [r3, #0]
 8030798:	4a37      	ldr	r2, [pc, #220]	; (8030878 <HAL_DMA_Abort+0x220>)
 803079a:	4293      	cmp	r3, r2
 803079c:	d063      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 803079e:	687b      	ldr	r3, [r7, #4]
 80307a0:	681b      	ldr	r3, [r3, #0]
 80307a2:	4a36      	ldr	r2, [pc, #216]	; (803087c <HAL_DMA_Abort+0x224>)
 80307a4:	4293      	cmp	r3, r2
 80307a6:	d05e      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 80307a8:	687b      	ldr	r3, [r7, #4]
 80307aa:	681b      	ldr	r3, [r3, #0]
 80307ac:	4a34      	ldr	r2, [pc, #208]	; (8030880 <HAL_DMA_Abort+0x228>)
 80307ae:	4293      	cmp	r3, r2
 80307b0:	d059      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 80307b2:	687b      	ldr	r3, [r7, #4]
 80307b4:	681b      	ldr	r3, [r3, #0]
 80307b6:	4a33      	ldr	r2, [pc, #204]	; (8030884 <HAL_DMA_Abort+0x22c>)
 80307b8:	4293      	cmp	r3, r2
 80307ba:	d054      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 80307bc:	687b      	ldr	r3, [r7, #4]
 80307be:	681b      	ldr	r3, [r3, #0]
 80307c0:	4a31      	ldr	r2, [pc, #196]	; (8030888 <HAL_DMA_Abort+0x230>)
 80307c2:	4293      	cmp	r3, r2
 80307c4:	d04f      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 80307c6:	687b      	ldr	r3, [r7, #4]
 80307c8:	681b      	ldr	r3, [r3, #0]
 80307ca:	4a30      	ldr	r2, [pc, #192]	; (803088c <HAL_DMA_Abort+0x234>)
 80307cc:	4293      	cmp	r3, r2
 80307ce:	d04a      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 80307d0:	687b      	ldr	r3, [r7, #4]
 80307d2:	681b      	ldr	r3, [r3, #0]
 80307d4:	4a2e      	ldr	r2, [pc, #184]	; (8030890 <HAL_DMA_Abort+0x238>)
 80307d6:	4293      	cmp	r3, r2
 80307d8:	d045      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 80307da:	687b      	ldr	r3, [r7, #4]
 80307dc:	681b      	ldr	r3, [r3, #0]
 80307de:	4a2d      	ldr	r2, [pc, #180]	; (8030894 <HAL_DMA_Abort+0x23c>)
 80307e0:	4293      	cmp	r3, r2
 80307e2:	d040      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 80307e4:	687b      	ldr	r3, [r7, #4]
 80307e6:	681b      	ldr	r3, [r3, #0]
 80307e8:	4a2b      	ldr	r2, [pc, #172]	; (8030898 <HAL_DMA_Abort+0x240>)
 80307ea:	4293      	cmp	r3, r2
 80307ec:	d03b      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 80307ee:	687b      	ldr	r3, [r7, #4]
 80307f0:	681b      	ldr	r3, [r3, #0]
 80307f2:	4a2a      	ldr	r2, [pc, #168]	; (803089c <HAL_DMA_Abort+0x244>)
 80307f4:	4293      	cmp	r3, r2
 80307f6:	d036      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 80307f8:	687b      	ldr	r3, [r7, #4]
 80307fa:	681b      	ldr	r3, [r3, #0]
 80307fc:	4a28      	ldr	r2, [pc, #160]	; (80308a0 <HAL_DMA_Abort+0x248>)
 80307fe:	4293      	cmp	r3, r2
 8030800:	d031      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 8030802:	687b      	ldr	r3, [r7, #4]
 8030804:	681b      	ldr	r3, [r3, #0]
 8030806:	4a27      	ldr	r2, [pc, #156]	; (80308a4 <HAL_DMA_Abort+0x24c>)
 8030808:	4293      	cmp	r3, r2
 803080a:	d02c      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 803080c:	687b      	ldr	r3, [r7, #4]
 803080e:	681b      	ldr	r3, [r3, #0]
 8030810:	4a25      	ldr	r2, [pc, #148]	; (80308a8 <HAL_DMA_Abort+0x250>)
 8030812:	4293      	cmp	r3, r2
 8030814:	d027      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 8030816:	687b      	ldr	r3, [r7, #4]
 8030818:	681b      	ldr	r3, [r3, #0]
 803081a:	4a24      	ldr	r2, [pc, #144]	; (80308ac <HAL_DMA_Abort+0x254>)
 803081c:	4293      	cmp	r3, r2
 803081e:	d022      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 8030820:	687b      	ldr	r3, [r7, #4]
 8030822:	681b      	ldr	r3, [r3, #0]
 8030824:	4a22      	ldr	r2, [pc, #136]	; (80308b0 <HAL_DMA_Abort+0x258>)
 8030826:	4293      	cmp	r3, r2
 8030828:	d01d      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 803082a:	687b      	ldr	r3, [r7, #4]
 803082c:	681b      	ldr	r3, [r3, #0]
 803082e:	4a21      	ldr	r2, [pc, #132]	; (80308b4 <HAL_DMA_Abort+0x25c>)
 8030830:	4293      	cmp	r3, r2
 8030832:	d018      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 8030834:	687b      	ldr	r3, [r7, #4]
 8030836:	681b      	ldr	r3, [r3, #0]
 8030838:	4a1f      	ldr	r2, [pc, #124]	; (80308b8 <HAL_DMA_Abort+0x260>)
 803083a:	4293      	cmp	r3, r2
 803083c:	d013      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 803083e:	687b      	ldr	r3, [r7, #4]
 8030840:	681b      	ldr	r3, [r3, #0]
 8030842:	4a1e      	ldr	r2, [pc, #120]	; (80308bc <HAL_DMA_Abort+0x264>)
 8030844:	4293      	cmp	r3, r2
 8030846:	d00e      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 8030848:	687b      	ldr	r3, [r7, #4]
 803084a:	681b      	ldr	r3, [r3, #0]
 803084c:	4a1c      	ldr	r2, [pc, #112]	; (80308c0 <HAL_DMA_Abort+0x268>)
 803084e:	4293      	cmp	r3, r2
 8030850:	d009      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 8030852:	687b      	ldr	r3, [r7, #4]
 8030854:	681b      	ldr	r3, [r3, #0]
 8030856:	4a1b      	ldr	r2, [pc, #108]	; (80308c4 <HAL_DMA_Abort+0x26c>)
 8030858:	4293      	cmp	r3, r2
 803085a:	d004      	beq.n	8030866 <HAL_DMA_Abort+0x20e>
 803085c:	687b      	ldr	r3, [r7, #4]
 803085e:	681b      	ldr	r3, [r3, #0]
 8030860:	4a19      	ldr	r2, [pc, #100]	; (80308c8 <HAL_DMA_Abort+0x270>)
 8030862:	4293      	cmp	r3, r2
 8030864:	d132      	bne.n	80308cc <HAL_DMA_Abort+0x274>
 8030866:	2301      	movs	r3, #1
 8030868:	e031      	b.n	80308ce <HAL_DMA_Abort+0x276>
 803086a:	bf00      	nop
 803086c:	40020010 	.word	0x40020010
 8030870:	40020028 	.word	0x40020028
 8030874:	40020040 	.word	0x40020040
 8030878:	40020058 	.word	0x40020058
 803087c:	40020070 	.word	0x40020070
 8030880:	40020088 	.word	0x40020088
 8030884:	400200a0 	.word	0x400200a0
 8030888:	400200b8 	.word	0x400200b8
 803088c:	40020410 	.word	0x40020410
 8030890:	40020428 	.word	0x40020428
 8030894:	40020440 	.word	0x40020440
 8030898:	40020458 	.word	0x40020458
 803089c:	40020470 	.word	0x40020470
 80308a0:	40020488 	.word	0x40020488
 80308a4:	400204a0 	.word	0x400204a0
 80308a8:	400204b8 	.word	0x400204b8
 80308ac:	58025408 	.word	0x58025408
 80308b0:	5802541c 	.word	0x5802541c
 80308b4:	58025430 	.word	0x58025430
 80308b8:	58025444 	.word	0x58025444
 80308bc:	58025458 	.word	0x58025458
 80308c0:	5802546c 	.word	0x5802546c
 80308c4:	58025480 	.word	0x58025480
 80308c8:	58025494 	.word	0x58025494
 80308cc:	2300      	movs	r3, #0
 80308ce:	2b00      	cmp	r3, #0
 80308d0:	d007      	beq.n	80308e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80308d2:	687b      	ldr	r3, [r7, #4]
 80308d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80308d6:	681a      	ldr	r2, [r3, #0]
 80308d8:	687b      	ldr	r3, [r7, #4]
 80308da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80308dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80308e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80308e2:	687b      	ldr	r3, [r7, #4]
 80308e4:	681b      	ldr	r3, [r3, #0]
 80308e6:	4a6d      	ldr	r2, [pc, #436]	; (8030a9c <HAL_DMA_Abort+0x444>)
 80308e8:	4293      	cmp	r3, r2
 80308ea:	d04a      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 80308ec:	687b      	ldr	r3, [r7, #4]
 80308ee:	681b      	ldr	r3, [r3, #0]
 80308f0:	4a6b      	ldr	r2, [pc, #428]	; (8030aa0 <HAL_DMA_Abort+0x448>)
 80308f2:	4293      	cmp	r3, r2
 80308f4:	d045      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 80308f6:	687b      	ldr	r3, [r7, #4]
 80308f8:	681b      	ldr	r3, [r3, #0]
 80308fa:	4a6a      	ldr	r2, [pc, #424]	; (8030aa4 <HAL_DMA_Abort+0x44c>)
 80308fc:	4293      	cmp	r3, r2
 80308fe:	d040      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 8030900:	687b      	ldr	r3, [r7, #4]
 8030902:	681b      	ldr	r3, [r3, #0]
 8030904:	4a68      	ldr	r2, [pc, #416]	; (8030aa8 <HAL_DMA_Abort+0x450>)
 8030906:	4293      	cmp	r3, r2
 8030908:	d03b      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 803090a:	687b      	ldr	r3, [r7, #4]
 803090c:	681b      	ldr	r3, [r3, #0]
 803090e:	4a67      	ldr	r2, [pc, #412]	; (8030aac <HAL_DMA_Abort+0x454>)
 8030910:	4293      	cmp	r3, r2
 8030912:	d036      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 8030914:	687b      	ldr	r3, [r7, #4]
 8030916:	681b      	ldr	r3, [r3, #0]
 8030918:	4a65      	ldr	r2, [pc, #404]	; (8030ab0 <HAL_DMA_Abort+0x458>)
 803091a:	4293      	cmp	r3, r2
 803091c:	d031      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 803091e:	687b      	ldr	r3, [r7, #4]
 8030920:	681b      	ldr	r3, [r3, #0]
 8030922:	4a64      	ldr	r2, [pc, #400]	; (8030ab4 <HAL_DMA_Abort+0x45c>)
 8030924:	4293      	cmp	r3, r2
 8030926:	d02c      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 8030928:	687b      	ldr	r3, [r7, #4]
 803092a:	681b      	ldr	r3, [r3, #0]
 803092c:	4a62      	ldr	r2, [pc, #392]	; (8030ab8 <HAL_DMA_Abort+0x460>)
 803092e:	4293      	cmp	r3, r2
 8030930:	d027      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 8030932:	687b      	ldr	r3, [r7, #4]
 8030934:	681b      	ldr	r3, [r3, #0]
 8030936:	4a61      	ldr	r2, [pc, #388]	; (8030abc <HAL_DMA_Abort+0x464>)
 8030938:	4293      	cmp	r3, r2
 803093a:	d022      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 803093c:	687b      	ldr	r3, [r7, #4]
 803093e:	681b      	ldr	r3, [r3, #0]
 8030940:	4a5f      	ldr	r2, [pc, #380]	; (8030ac0 <HAL_DMA_Abort+0x468>)
 8030942:	4293      	cmp	r3, r2
 8030944:	d01d      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 8030946:	687b      	ldr	r3, [r7, #4]
 8030948:	681b      	ldr	r3, [r3, #0]
 803094a:	4a5e      	ldr	r2, [pc, #376]	; (8030ac4 <HAL_DMA_Abort+0x46c>)
 803094c:	4293      	cmp	r3, r2
 803094e:	d018      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 8030950:	687b      	ldr	r3, [r7, #4]
 8030952:	681b      	ldr	r3, [r3, #0]
 8030954:	4a5c      	ldr	r2, [pc, #368]	; (8030ac8 <HAL_DMA_Abort+0x470>)
 8030956:	4293      	cmp	r3, r2
 8030958:	d013      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 803095a:	687b      	ldr	r3, [r7, #4]
 803095c:	681b      	ldr	r3, [r3, #0]
 803095e:	4a5b      	ldr	r2, [pc, #364]	; (8030acc <HAL_DMA_Abort+0x474>)
 8030960:	4293      	cmp	r3, r2
 8030962:	d00e      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 8030964:	687b      	ldr	r3, [r7, #4]
 8030966:	681b      	ldr	r3, [r3, #0]
 8030968:	4a59      	ldr	r2, [pc, #356]	; (8030ad0 <HAL_DMA_Abort+0x478>)
 803096a:	4293      	cmp	r3, r2
 803096c:	d009      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 803096e:	687b      	ldr	r3, [r7, #4]
 8030970:	681b      	ldr	r3, [r3, #0]
 8030972:	4a58      	ldr	r2, [pc, #352]	; (8030ad4 <HAL_DMA_Abort+0x47c>)
 8030974:	4293      	cmp	r3, r2
 8030976:	d004      	beq.n	8030982 <HAL_DMA_Abort+0x32a>
 8030978:	687b      	ldr	r3, [r7, #4]
 803097a:	681b      	ldr	r3, [r3, #0]
 803097c:	4a56      	ldr	r2, [pc, #344]	; (8030ad8 <HAL_DMA_Abort+0x480>)
 803097e:	4293      	cmp	r3, r2
 8030980:	d108      	bne.n	8030994 <HAL_DMA_Abort+0x33c>
 8030982:	687b      	ldr	r3, [r7, #4]
 8030984:	681b      	ldr	r3, [r3, #0]
 8030986:	681a      	ldr	r2, [r3, #0]
 8030988:	687b      	ldr	r3, [r7, #4]
 803098a:	681b      	ldr	r3, [r3, #0]
 803098c:	f022 0201 	bic.w	r2, r2, #1
 8030990:	601a      	str	r2, [r3, #0]
 8030992:	e007      	b.n	80309a4 <HAL_DMA_Abort+0x34c>
 8030994:	687b      	ldr	r3, [r7, #4]
 8030996:	681b      	ldr	r3, [r3, #0]
 8030998:	681a      	ldr	r2, [r3, #0]
 803099a:	687b      	ldr	r3, [r7, #4]
 803099c:	681b      	ldr	r3, [r3, #0]
 803099e:	f022 0201 	bic.w	r2, r2, #1
 80309a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80309a4:	e013      	b.n	80309ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80309a6:	f7fe fb95 	bl	802f0d4 <HAL_GetTick>
 80309aa:	4602      	mov	r2, r0
 80309ac:	693b      	ldr	r3, [r7, #16]
 80309ae:	1ad3      	subs	r3, r2, r3
 80309b0:	2b05      	cmp	r3, #5
 80309b2:	d90c      	bls.n	80309ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80309b4:	687b      	ldr	r3, [r7, #4]
 80309b6:	2220      	movs	r2, #32
 80309b8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80309ba:	687b      	ldr	r3, [r7, #4]
 80309bc:	2203      	movs	r2, #3
 80309be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80309c2:	687b      	ldr	r3, [r7, #4]
 80309c4:	2200      	movs	r2, #0
 80309c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80309ca:	2301      	movs	r3, #1
 80309cc:	e12d      	b.n	8030c2a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80309ce:	697b      	ldr	r3, [r7, #20]
 80309d0:	681b      	ldr	r3, [r3, #0]
 80309d2:	f003 0301 	and.w	r3, r3, #1
 80309d6:	2b00      	cmp	r3, #0
 80309d8:	d1e5      	bne.n	80309a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80309da:	687b      	ldr	r3, [r7, #4]
 80309dc:	681b      	ldr	r3, [r3, #0]
 80309de:	4a2f      	ldr	r2, [pc, #188]	; (8030a9c <HAL_DMA_Abort+0x444>)
 80309e0:	4293      	cmp	r3, r2
 80309e2:	d04a      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 80309e4:	687b      	ldr	r3, [r7, #4]
 80309e6:	681b      	ldr	r3, [r3, #0]
 80309e8:	4a2d      	ldr	r2, [pc, #180]	; (8030aa0 <HAL_DMA_Abort+0x448>)
 80309ea:	4293      	cmp	r3, r2
 80309ec:	d045      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 80309ee:	687b      	ldr	r3, [r7, #4]
 80309f0:	681b      	ldr	r3, [r3, #0]
 80309f2:	4a2c      	ldr	r2, [pc, #176]	; (8030aa4 <HAL_DMA_Abort+0x44c>)
 80309f4:	4293      	cmp	r3, r2
 80309f6:	d040      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 80309f8:	687b      	ldr	r3, [r7, #4]
 80309fa:	681b      	ldr	r3, [r3, #0]
 80309fc:	4a2a      	ldr	r2, [pc, #168]	; (8030aa8 <HAL_DMA_Abort+0x450>)
 80309fe:	4293      	cmp	r3, r2
 8030a00:	d03b      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 8030a02:	687b      	ldr	r3, [r7, #4]
 8030a04:	681b      	ldr	r3, [r3, #0]
 8030a06:	4a29      	ldr	r2, [pc, #164]	; (8030aac <HAL_DMA_Abort+0x454>)
 8030a08:	4293      	cmp	r3, r2
 8030a0a:	d036      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 8030a0c:	687b      	ldr	r3, [r7, #4]
 8030a0e:	681b      	ldr	r3, [r3, #0]
 8030a10:	4a27      	ldr	r2, [pc, #156]	; (8030ab0 <HAL_DMA_Abort+0x458>)
 8030a12:	4293      	cmp	r3, r2
 8030a14:	d031      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 8030a16:	687b      	ldr	r3, [r7, #4]
 8030a18:	681b      	ldr	r3, [r3, #0]
 8030a1a:	4a26      	ldr	r2, [pc, #152]	; (8030ab4 <HAL_DMA_Abort+0x45c>)
 8030a1c:	4293      	cmp	r3, r2
 8030a1e:	d02c      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 8030a20:	687b      	ldr	r3, [r7, #4]
 8030a22:	681b      	ldr	r3, [r3, #0]
 8030a24:	4a24      	ldr	r2, [pc, #144]	; (8030ab8 <HAL_DMA_Abort+0x460>)
 8030a26:	4293      	cmp	r3, r2
 8030a28:	d027      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 8030a2a:	687b      	ldr	r3, [r7, #4]
 8030a2c:	681b      	ldr	r3, [r3, #0]
 8030a2e:	4a23      	ldr	r2, [pc, #140]	; (8030abc <HAL_DMA_Abort+0x464>)
 8030a30:	4293      	cmp	r3, r2
 8030a32:	d022      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 8030a34:	687b      	ldr	r3, [r7, #4]
 8030a36:	681b      	ldr	r3, [r3, #0]
 8030a38:	4a21      	ldr	r2, [pc, #132]	; (8030ac0 <HAL_DMA_Abort+0x468>)
 8030a3a:	4293      	cmp	r3, r2
 8030a3c:	d01d      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 8030a3e:	687b      	ldr	r3, [r7, #4]
 8030a40:	681b      	ldr	r3, [r3, #0]
 8030a42:	4a20      	ldr	r2, [pc, #128]	; (8030ac4 <HAL_DMA_Abort+0x46c>)
 8030a44:	4293      	cmp	r3, r2
 8030a46:	d018      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 8030a48:	687b      	ldr	r3, [r7, #4]
 8030a4a:	681b      	ldr	r3, [r3, #0]
 8030a4c:	4a1e      	ldr	r2, [pc, #120]	; (8030ac8 <HAL_DMA_Abort+0x470>)
 8030a4e:	4293      	cmp	r3, r2
 8030a50:	d013      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 8030a52:	687b      	ldr	r3, [r7, #4]
 8030a54:	681b      	ldr	r3, [r3, #0]
 8030a56:	4a1d      	ldr	r2, [pc, #116]	; (8030acc <HAL_DMA_Abort+0x474>)
 8030a58:	4293      	cmp	r3, r2
 8030a5a:	d00e      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 8030a5c:	687b      	ldr	r3, [r7, #4]
 8030a5e:	681b      	ldr	r3, [r3, #0]
 8030a60:	4a1b      	ldr	r2, [pc, #108]	; (8030ad0 <HAL_DMA_Abort+0x478>)
 8030a62:	4293      	cmp	r3, r2
 8030a64:	d009      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 8030a66:	687b      	ldr	r3, [r7, #4]
 8030a68:	681b      	ldr	r3, [r3, #0]
 8030a6a:	4a1a      	ldr	r2, [pc, #104]	; (8030ad4 <HAL_DMA_Abort+0x47c>)
 8030a6c:	4293      	cmp	r3, r2
 8030a6e:	d004      	beq.n	8030a7a <HAL_DMA_Abort+0x422>
 8030a70:	687b      	ldr	r3, [r7, #4]
 8030a72:	681b      	ldr	r3, [r3, #0]
 8030a74:	4a18      	ldr	r2, [pc, #96]	; (8030ad8 <HAL_DMA_Abort+0x480>)
 8030a76:	4293      	cmp	r3, r2
 8030a78:	d101      	bne.n	8030a7e <HAL_DMA_Abort+0x426>
 8030a7a:	2301      	movs	r3, #1
 8030a7c:	e000      	b.n	8030a80 <HAL_DMA_Abort+0x428>
 8030a7e:	2300      	movs	r3, #0
 8030a80:	2b00      	cmp	r3, #0
 8030a82:	d02b      	beq.n	8030adc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8030a84:	687b      	ldr	r3, [r7, #4]
 8030a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8030a88:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8030a8a:	687b      	ldr	r3, [r7, #4]
 8030a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030a8e:	f003 031f 	and.w	r3, r3, #31
 8030a92:	223f      	movs	r2, #63	; 0x3f
 8030a94:	409a      	lsls	r2, r3
 8030a96:	68bb      	ldr	r3, [r7, #8]
 8030a98:	609a      	str	r2, [r3, #8]
 8030a9a:	e02a      	b.n	8030af2 <HAL_DMA_Abort+0x49a>
 8030a9c:	40020010 	.word	0x40020010
 8030aa0:	40020028 	.word	0x40020028
 8030aa4:	40020040 	.word	0x40020040
 8030aa8:	40020058 	.word	0x40020058
 8030aac:	40020070 	.word	0x40020070
 8030ab0:	40020088 	.word	0x40020088
 8030ab4:	400200a0 	.word	0x400200a0
 8030ab8:	400200b8 	.word	0x400200b8
 8030abc:	40020410 	.word	0x40020410
 8030ac0:	40020428 	.word	0x40020428
 8030ac4:	40020440 	.word	0x40020440
 8030ac8:	40020458 	.word	0x40020458
 8030acc:	40020470 	.word	0x40020470
 8030ad0:	40020488 	.word	0x40020488
 8030ad4:	400204a0 	.word	0x400204a0
 8030ad8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8030adc:	687b      	ldr	r3, [r7, #4]
 8030ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8030ae0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8030ae2:	687b      	ldr	r3, [r7, #4]
 8030ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030ae6:	f003 031f 	and.w	r3, r3, #31
 8030aea:	2201      	movs	r2, #1
 8030aec:	409a      	lsls	r2, r3
 8030aee:	68fb      	ldr	r3, [r7, #12]
 8030af0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8030af2:	687b      	ldr	r3, [r7, #4]
 8030af4:	681b      	ldr	r3, [r3, #0]
 8030af6:	4a4f      	ldr	r2, [pc, #316]	; (8030c34 <HAL_DMA_Abort+0x5dc>)
 8030af8:	4293      	cmp	r3, r2
 8030afa:	d072      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030afc:	687b      	ldr	r3, [r7, #4]
 8030afe:	681b      	ldr	r3, [r3, #0]
 8030b00:	4a4d      	ldr	r2, [pc, #308]	; (8030c38 <HAL_DMA_Abort+0x5e0>)
 8030b02:	4293      	cmp	r3, r2
 8030b04:	d06d      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b06:	687b      	ldr	r3, [r7, #4]
 8030b08:	681b      	ldr	r3, [r3, #0]
 8030b0a:	4a4c      	ldr	r2, [pc, #304]	; (8030c3c <HAL_DMA_Abort+0x5e4>)
 8030b0c:	4293      	cmp	r3, r2
 8030b0e:	d068      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b10:	687b      	ldr	r3, [r7, #4]
 8030b12:	681b      	ldr	r3, [r3, #0]
 8030b14:	4a4a      	ldr	r2, [pc, #296]	; (8030c40 <HAL_DMA_Abort+0x5e8>)
 8030b16:	4293      	cmp	r3, r2
 8030b18:	d063      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b1a:	687b      	ldr	r3, [r7, #4]
 8030b1c:	681b      	ldr	r3, [r3, #0]
 8030b1e:	4a49      	ldr	r2, [pc, #292]	; (8030c44 <HAL_DMA_Abort+0x5ec>)
 8030b20:	4293      	cmp	r3, r2
 8030b22:	d05e      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b24:	687b      	ldr	r3, [r7, #4]
 8030b26:	681b      	ldr	r3, [r3, #0]
 8030b28:	4a47      	ldr	r2, [pc, #284]	; (8030c48 <HAL_DMA_Abort+0x5f0>)
 8030b2a:	4293      	cmp	r3, r2
 8030b2c:	d059      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b2e:	687b      	ldr	r3, [r7, #4]
 8030b30:	681b      	ldr	r3, [r3, #0]
 8030b32:	4a46      	ldr	r2, [pc, #280]	; (8030c4c <HAL_DMA_Abort+0x5f4>)
 8030b34:	4293      	cmp	r3, r2
 8030b36:	d054      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b38:	687b      	ldr	r3, [r7, #4]
 8030b3a:	681b      	ldr	r3, [r3, #0]
 8030b3c:	4a44      	ldr	r2, [pc, #272]	; (8030c50 <HAL_DMA_Abort+0x5f8>)
 8030b3e:	4293      	cmp	r3, r2
 8030b40:	d04f      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b42:	687b      	ldr	r3, [r7, #4]
 8030b44:	681b      	ldr	r3, [r3, #0]
 8030b46:	4a43      	ldr	r2, [pc, #268]	; (8030c54 <HAL_DMA_Abort+0x5fc>)
 8030b48:	4293      	cmp	r3, r2
 8030b4a:	d04a      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b4c:	687b      	ldr	r3, [r7, #4]
 8030b4e:	681b      	ldr	r3, [r3, #0]
 8030b50:	4a41      	ldr	r2, [pc, #260]	; (8030c58 <HAL_DMA_Abort+0x600>)
 8030b52:	4293      	cmp	r3, r2
 8030b54:	d045      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b56:	687b      	ldr	r3, [r7, #4]
 8030b58:	681b      	ldr	r3, [r3, #0]
 8030b5a:	4a40      	ldr	r2, [pc, #256]	; (8030c5c <HAL_DMA_Abort+0x604>)
 8030b5c:	4293      	cmp	r3, r2
 8030b5e:	d040      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b60:	687b      	ldr	r3, [r7, #4]
 8030b62:	681b      	ldr	r3, [r3, #0]
 8030b64:	4a3e      	ldr	r2, [pc, #248]	; (8030c60 <HAL_DMA_Abort+0x608>)
 8030b66:	4293      	cmp	r3, r2
 8030b68:	d03b      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b6a:	687b      	ldr	r3, [r7, #4]
 8030b6c:	681b      	ldr	r3, [r3, #0]
 8030b6e:	4a3d      	ldr	r2, [pc, #244]	; (8030c64 <HAL_DMA_Abort+0x60c>)
 8030b70:	4293      	cmp	r3, r2
 8030b72:	d036      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b74:	687b      	ldr	r3, [r7, #4]
 8030b76:	681b      	ldr	r3, [r3, #0]
 8030b78:	4a3b      	ldr	r2, [pc, #236]	; (8030c68 <HAL_DMA_Abort+0x610>)
 8030b7a:	4293      	cmp	r3, r2
 8030b7c:	d031      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b7e:	687b      	ldr	r3, [r7, #4]
 8030b80:	681b      	ldr	r3, [r3, #0]
 8030b82:	4a3a      	ldr	r2, [pc, #232]	; (8030c6c <HAL_DMA_Abort+0x614>)
 8030b84:	4293      	cmp	r3, r2
 8030b86:	d02c      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b88:	687b      	ldr	r3, [r7, #4]
 8030b8a:	681b      	ldr	r3, [r3, #0]
 8030b8c:	4a38      	ldr	r2, [pc, #224]	; (8030c70 <HAL_DMA_Abort+0x618>)
 8030b8e:	4293      	cmp	r3, r2
 8030b90:	d027      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b92:	687b      	ldr	r3, [r7, #4]
 8030b94:	681b      	ldr	r3, [r3, #0]
 8030b96:	4a37      	ldr	r2, [pc, #220]	; (8030c74 <HAL_DMA_Abort+0x61c>)
 8030b98:	4293      	cmp	r3, r2
 8030b9a:	d022      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030b9c:	687b      	ldr	r3, [r7, #4]
 8030b9e:	681b      	ldr	r3, [r3, #0]
 8030ba0:	4a35      	ldr	r2, [pc, #212]	; (8030c78 <HAL_DMA_Abort+0x620>)
 8030ba2:	4293      	cmp	r3, r2
 8030ba4:	d01d      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030ba6:	687b      	ldr	r3, [r7, #4]
 8030ba8:	681b      	ldr	r3, [r3, #0]
 8030baa:	4a34      	ldr	r2, [pc, #208]	; (8030c7c <HAL_DMA_Abort+0x624>)
 8030bac:	4293      	cmp	r3, r2
 8030bae:	d018      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030bb0:	687b      	ldr	r3, [r7, #4]
 8030bb2:	681b      	ldr	r3, [r3, #0]
 8030bb4:	4a32      	ldr	r2, [pc, #200]	; (8030c80 <HAL_DMA_Abort+0x628>)
 8030bb6:	4293      	cmp	r3, r2
 8030bb8:	d013      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030bba:	687b      	ldr	r3, [r7, #4]
 8030bbc:	681b      	ldr	r3, [r3, #0]
 8030bbe:	4a31      	ldr	r2, [pc, #196]	; (8030c84 <HAL_DMA_Abort+0x62c>)
 8030bc0:	4293      	cmp	r3, r2
 8030bc2:	d00e      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030bc4:	687b      	ldr	r3, [r7, #4]
 8030bc6:	681b      	ldr	r3, [r3, #0]
 8030bc8:	4a2f      	ldr	r2, [pc, #188]	; (8030c88 <HAL_DMA_Abort+0x630>)
 8030bca:	4293      	cmp	r3, r2
 8030bcc:	d009      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030bce:	687b      	ldr	r3, [r7, #4]
 8030bd0:	681b      	ldr	r3, [r3, #0]
 8030bd2:	4a2e      	ldr	r2, [pc, #184]	; (8030c8c <HAL_DMA_Abort+0x634>)
 8030bd4:	4293      	cmp	r3, r2
 8030bd6:	d004      	beq.n	8030be2 <HAL_DMA_Abort+0x58a>
 8030bd8:	687b      	ldr	r3, [r7, #4]
 8030bda:	681b      	ldr	r3, [r3, #0]
 8030bdc:	4a2c      	ldr	r2, [pc, #176]	; (8030c90 <HAL_DMA_Abort+0x638>)
 8030bde:	4293      	cmp	r3, r2
 8030be0:	d101      	bne.n	8030be6 <HAL_DMA_Abort+0x58e>
 8030be2:	2301      	movs	r3, #1
 8030be4:	e000      	b.n	8030be8 <HAL_DMA_Abort+0x590>
 8030be6:	2300      	movs	r3, #0
 8030be8:	2b00      	cmp	r3, #0
 8030bea:	d015      	beq.n	8030c18 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8030bec:	687b      	ldr	r3, [r7, #4]
 8030bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8030bf0:	687a      	ldr	r2, [r7, #4]
 8030bf2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8030bf4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8030bf6:	687b      	ldr	r3, [r7, #4]
 8030bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8030bfa:	2b00      	cmp	r3, #0
 8030bfc:	d00c      	beq.n	8030c18 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8030bfe:	687b      	ldr	r3, [r7, #4]
 8030c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8030c02:	681a      	ldr	r2, [r3, #0]
 8030c04:	687b      	ldr	r3, [r7, #4]
 8030c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8030c08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8030c0c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8030c0e:	687b      	ldr	r3, [r7, #4]
 8030c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8030c12:	687a      	ldr	r2, [r7, #4]
 8030c14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8030c16:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8030c18:	687b      	ldr	r3, [r7, #4]
 8030c1a:	2201      	movs	r2, #1
 8030c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8030c20:	687b      	ldr	r3, [r7, #4]
 8030c22:	2200      	movs	r2, #0
 8030c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8030c28:	2300      	movs	r3, #0
}
 8030c2a:	4618      	mov	r0, r3
 8030c2c:	3718      	adds	r7, #24
 8030c2e:	46bd      	mov	sp, r7
 8030c30:	bd80      	pop	{r7, pc}
 8030c32:	bf00      	nop
 8030c34:	40020010 	.word	0x40020010
 8030c38:	40020028 	.word	0x40020028
 8030c3c:	40020040 	.word	0x40020040
 8030c40:	40020058 	.word	0x40020058
 8030c44:	40020070 	.word	0x40020070
 8030c48:	40020088 	.word	0x40020088
 8030c4c:	400200a0 	.word	0x400200a0
 8030c50:	400200b8 	.word	0x400200b8
 8030c54:	40020410 	.word	0x40020410
 8030c58:	40020428 	.word	0x40020428
 8030c5c:	40020440 	.word	0x40020440
 8030c60:	40020458 	.word	0x40020458
 8030c64:	40020470 	.word	0x40020470
 8030c68:	40020488 	.word	0x40020488
 8030c6c:	400204a0 	.word	0x400204a0
 8030c70:	400204b8 	.word	0x400204b8
 8030c74:	58025408 	.word	0x58025408
 8030c78:	5802541c 	.word	0x5802541c
 8030c7c:	58025430 	.word	0x58025430
 8030c80:	58025444 	.word	0x58025444
 8030c84:	58025458 	.word	0x58025458
 8030c88:	5802546c 	.word	0x5802546c
 8030c8c:	58025480 	.word	0x58025480
 8030c90:	58025494 	.word	0x58025494

08030c94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8030c94:	b580      	push	{r7, lr}
 8030c96:	b084      	sub	sp, #16
 8030c98:	af00      	add	r7, sp, #0
 8030c9a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8030c9c:	687b      	ldr	r3, [r7, #4]
 8030c9e:	2b00      	cmp	r3, #0
 8030ca0:	d101      	bne.n	8030ca6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8030ca2:	2301      	movs	r3, #1
 8030ca4:	e237      	b.n	8031116 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8030ca6:	687b      	ldr	r3, [r7, #4]
 8030ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8030cac:	b2db      	uxtb	r3, r3
 8030cae:	2b02      	cmp	r3, #2
 8030cb0:	d004      	beq.n	8030cbc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8030cb2:	687b      	ldr	r3, [r7, #4]
 8030cb4:	2280      	movs	r2, #128	; 0x80
 8030cb6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8030cb8:	2301      	movs	r3, #1
 8030cba:	e22c      	b.n	8031116 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8030cbc:	687b      	ldr	r3, [r7, #4]
 8030cbe:	681b      	ldr	r3, [r3, #0]
 8030cc0:	4a5c      	ldr	r2, [pc, #368]	; (8030e34 <HAL_DMA_Abort_IT+0x1a0>)
 8030cc2:	4293      	cmp	r3, r2
 8030cc4:	d04a      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030cc6:	687b      	ldr	r3, [r7, #4]
 8030cc8:	681b      	ldr	r3, [r3, #0]
 8030cca:	4a5b      	ldr	r2, [pc, #364]	; (8030e38 <HAL_DMA_Abort_IT+0x1a4>)
 8030ccc:	4293      	cmp	r3, r2
 8030cce:	d045      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030cd0:	687b      	ldr	r3, [r7, #4]
 8030cd2:	681b      	ldr	r3, [r3, #0]
 8030cd4:	4a59      	ldr	r2, [pc, #356]	; (8030e3c <HAL_DMA_Abort_IT+0x1a8>)
 8030cd6:	4293      	cmp	r3, r2
 8030cd8:	d040      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030cda:	687b      	ldr	r3, [r7, #4]
 8030cdc:	681b      	ldr	r3, [r3, #0]
 8030cde:	4a58      	ldr	r2, [pc, #352]	; (8030e40 <HAL_DMA_Abort_IT+0x1ac>)
 8030ce0:	4293      	cmp	r3, r2
 8030ce2:	d03b      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030ce4:	687b      	ldr	r3, [r7, #4]
 8030ce6:	681b      	ldr	r3, [r3, #0]
 8030ce8:	4a56      	ldr	r2, [pc, #344]	; (8030e44 <HAL_DMA_Abort_IT+0x1b0>)
 8030cea:	4293      	cmp	r3, r2
 8030cec:	d036      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030cee:	687b      	ldr	r3, [r7, #4]
 8030cf0:	681b      	ldr	r3, [r3, #0]
 8030cf2:	4a55      	ldr	r2, [pc, #340]	; (8030e48 <HAL_DMA_Abort_IT+0x1b4>)
 8030cf4:	4293      	cmp	r3, r2
 8030cf6:	d031      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030cf8:	687b      	ldr	r3, [r7, #4]
 8030cfa:	681b      	ldr	r3, [r3, #0]
 8030cfc:	4a53      	ldr	r2, [pc, #332]	; (8030e4c <HAL_DMA_Abort_IT+0x1b8>)
 8030cfe:	4293      	cmp	r3, r2
 8030d00:	d02c      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030d02:	687b      	ldr	r3, [r7, #4]
 8030d04:	681b      	ldr	r3, [r3, #0]
 8030d06:	4a52      	ldr	r2, [pc, #328]	; (8030e50 <HAL_DMA_Abort_IT+0x1bc>)
 8030d08:	4293      	cmp	r3, r2
 8030d0a:	d027      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030d0c:	687b      	ldr	r3, [r7, #4]
 8030d0e:	681b      	ldr	r3, [r3, #0]
 8030d10:	4a50      	ldr	r2, [pc, #320]	; (8030e54 <HAL_DMA_Abort_IT+0x1c0>)
 8030d12:	4293      	cmp	r3, r2
 8030d14:	d022      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030d16:	687b      	ldr	r3, [r7, #4]
 8030d18:	681b      	ldr	r3, [r3, #0]
 8030d1a:	4a4f      	ldr	r2, [pc, #316]	; (8030e58 <HAL_DMA_Abort_IT+0x1c4>)
 8030d1c:	4293      	cmp	r3, r2
 8030d1e:	d01d      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030d20:	687b      	ldr	r3, [r7, #4]
 8030d22:	681b      	ldr	r3, [r3, #0]
 8030d24:	4a4d      	ldr	r2, [pc, #308]	; (8030e5c <HAL_DMA_Abort_IT+0x1c8>)
 8030d26:	4293      	cmp	r3, r2
 8030d28:	d018      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030d2a:	687b      	ldr	r3, [r7, #4]
 8030d2c:	681b      	ldr	r3, [r3, #0]
 8030d2e:	4a4c      	ldr	r2, [pc, #304]	; (8030e60 <HAL_DMA_Abort_IT+0x1cc>)
 8030d30:	4293      	cmp	r3, r2
 8030d32:	d013      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030d34:	687b      	ldr	r3, [r7, #4]
 8030d36:	681b      	ldr	r3, [r3, #0]
 8030d38:	4a4a      	ldr	r2, [pc, #296]	; (8030e64 <HAL_DMA_Abort_IT+0x1d0>)
 8030d3a:	4293      	cmp	r3, r2
 8030d3c:	d00e      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030d3e:	687b      	ldr	r3, [r7, #4]
 8030d40:	681b      	ldr	r3, [r3, #0]
 8030d42:	4a49      	ldr	r2, [pc, #292]	; (8030e68 <HAL_DMA_Abort_IT+0x1d4>)
 8030d44:	4293      	cmp	r3, r2
 8030d46:	d009      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030d48:	687b      	ldr	r3, [r7, #4]
 8030d4a:	681b      	ldr	r3, [r3, #0]
 8030d4c:	4a47      	ldr	r2, [pc, #284]	; (8030e6c <HAL_DMA_Abort_IT+0x1d8>)
 8030d4e:	4293      	cmp	r3, r2
 8030d50:	d004      	beq.n	8030d5c <HAL_DMA_Abort_IT+0xc8>
 8030d52:	687b      	ldr	r3, [r7, #4]
 8030d54:	681b      	ldr	r3, [r3, #0]
 8030d56:	4a46      	ldr	r2, [pc, #280]	; (8030e70 <HAL_DMA_Abort_IT+0x1dc>)
 8030d58:	4293      	cmp	r3, r2
 8030d5a:	d101      	bne.n	8030d60 <HAL_DMA_Abort_IT+0xcc>
 8030d5c:	2301      	movs	r3, #1
 8030d5e:	e000      	b.n	8030d62 <HAL_DMA_Abort_IT+0xce>
 8030d60:	2300      	movs	r3, #0
 8030d62:	2b00      	cmp	r3, #0
 8030d64:	f000 8086 	beq.w	8030e74 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8030d68:	687b      	ldr	r3, [r7, #4]
 8030d6a:	2204      	movs	r2, #4
 8030d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8030d70:	687b      	ldr	r3, [r7, #4]
 8030d72:	681b      	ldr	r3, [r3, #0]
 8030d74:	4a2f      	ldr	r2, [pc, #188]	; (8030e34 <HAL_DMA_Abort_IT+0x1a0>)
 8030d76:	4293      	cmp	r3, r2
 8030d78:	d04a      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030d7a:	687b      	ldr	r3, [r7, #4]
 8030d7c:	681b      	ldr	r3, [r3, #0]
 8030d7e:	4a2e      	ldr	r2, [pc, #184]	; (8030e38 <HAL_DMA_Abort_IT+0x1a4>)
 8030d80:	4293      	cmp	r3, r2
 8030d82:	d045      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030d84:	687b      	ldr	r3, [r7, #4]
 8030d86:	681b      	ldr	r3, [r3, #0]
 8030d88:	4a2c      	ldr	r2, [pc, #176]	; (8030e3c <HAL_DMA_Abort_IT+0x1a8>)
 8030d8a:	4293      	cmp	r3, r2
 8030d8c:	d040      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030d8e:	687b      	ldr	r3, [r7, #4]
 8030d90:	681b      	ldr	r3, [r3, #0]
 8030d92:	4a2b      	ldr	r2, [pc, #172]	; (8030e40 <HAL_DMA_Abort_IT+0x1ac>)
 8030d94:	4293      	cmp	r3, r2
 8030d96:	d03b      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030d98:	687b      	ldr	r3, [r7, #4]
 8030d9a:	681b      	ldr	r3, [r3, #0]
 8030d9c:	4a29      	ldr	r2, [pc, #164]	; (8030e44 <HAL_DMA_Abort_IT+0x1b0>)
 8030d9e:	4293      	cmp	r3, r2
 8030da0:	d036      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030da2:	687b      	ldr	r3, [r7, #4]
 8030da4:	681b      	ldr	r3, [r3, #0]
 8030da6:	4a28      	ldr	r2, [pc, #160]	; (8030e48 <HAL_DMA_Abort_IT+0x1b4>)
 8030da8:	4293      	cmp	r3, r2
 8030daa:	d031      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030dac:	687b      	ldr	r3, [r7, #4]
 8030dae:	681b      	ldr	r3, [r3, #0]
 8030db0:	4a26      	ldr	r2, [pc, #152]	; (8030e4c <HAL_DMA_Abort_IT+0x1b8>)
 8030db2:	4293      	cmp	r3, r2
 8030db4:	d02c      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030db6:	687b      	ldr	r3, [r7, #4]
 8030db8:	681b      	ldr	r3, [r3, #0]
 8030dba:	4a25      	ldr	r2, [pc, #148]	; (8030e50 <HAL_DMA_Abort_IT+0x1bc>)
 8030dbc:	4293      	cmp	r3, r2
 8030dbe:	d027      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030dc0:	687b      	ldr	r3, [r7, #4]
 8030dc2:	681b      	ldr	r3, [r3, #0]
 8030dc4:	4a23      	ldr	r2, [pc, #140]	; (8030e54 <HAL_DMA_Abort_IT+0x1c0>)
 8030dc6:	4293      	cmp	r3, r2
 8030dc8:	d022      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030dca:	687b      	ldr	r3, [r7, #4]
 8030dcc:	681b      	ldr	r3, [r3, #0]
 8030dce:	4a22      	ldr	r2, [pc, #136]	; (8030e58 <HAL_DMA_Abort_IT+0x1c4>)
 8030dd0:	4293      	cmp	r3, r2
 8030dd2:	d01d      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030dd4:	687b      	ldr	r3, [r7, #4]
 8030dd6:	681b      	ldr	r3, [r3, #0]
 8030dd8:	4a20      	ldr	r2, [pc, #128]	; (8030e5c <HAL_DMA_Abort_IT+0x1c8>)
 8030dda:	4293      	cmp	r3, r2
 8030ddc:	d018      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030dde:	687b      	ldr	r3, [r7, #4]
 8030de0:	681b      	ldr	r3, [r3, #0]
 8030de2:	4a1f      	ldr	r2, [pc, #124]	; (8030e60 <HAL_DMA_Abort_IT+0x1cc>)
 8030de4:	4293      	cmp	r3, r2
 8030de6:	d013      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030de8:	687b      	ldr	r3, [r7, #4]
 8030dea:	681b      	ldr	r3, [r3, #0]
 8030dec:	4a1d      	ldr	r2, [pc, #116]	; (8030e64 <HAL_DMA_Abort_IT+0x1d0>)
 8030dee:	4293      	cmp	r3, r2
 8030df0:	d00e      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030df2:	687b      	ldr	r3, [r7, #4]
 8030df4:	681b      	ldr	r3, [r3, #0]
 8030df6:	4a1c      	ldr	r2, [pc, #112]	; (8030e68 <HAL_DMA_Abort_IT+0x1d4>)
 8030df8:	4293      	cmp	r3, r2
 8030dfa:	d009      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030dfc:	687b      	ldr	r3, [r7, #4]
 8030dfe:	681b      	ldr	r3, [r3, #0]
 8030e00:	4a1a      	ldr	r2, [pc, #104]	; (8030e6c <HAL_DMA_Abort_IT+0x1d8>)
 8030e02:	4293      	cmp	r3, r2
 8030e04:	d004      	beq.n	8030e10 <HAL_DMA_Abort_IT+0x17c>
 8030e06:	687b      	ldr	r3, [r7, #4]
 8030e08:	681b      	ldr	r3, [r3, #0]
 8030e0a:	4a19      	ldr	r2, [pc, #100]	; (8030e70 <HAL_DMA_Abort_IT+0x1dc>)
 8030e0c:	4293      	cmp	r3, r2
 8030e0e:	d108      	bne.n	8030e22 <HAL_DMA_Abort_IT+0x18e>
 8030e10:	687b      	ldr	r3, [r7, #4]
 8030e12:	681b      	ldr	r3, [r3, #0]
 8030e14:	681a      	ldr	r2, [r3, #0]
 8030e16:	687b      	ldr	r3, [r7, #4]
 8030e18:	681b      	ldr	r3, [r3, #0]
 8030e1a:	f022 0201 	bic.w	r2, r2, #1
 8030e1e:	601a      	str	r2, [r3, #0]
 8030e20:	e178      	b.n	8031114 <HAL_DMA_Abort_IT+0x480>
 8030e22:	687b      	ldr	r3, [r7, #4]
 8030e24:	681b      	ldr	r3, [r3, #0]
 8030e26:	681a      	ldr	r2, [r3, #0]
 8030e28:	687b      	ldr	r3, [r7, #4]
 8030e2a:	681b      	ldr	r3, [r3, #0]
 8030e2c:	f022 0201 	bic.w	r2, r2, #1
 8030e30:	601a      	str	r2, [r3, #0]
 8030e32:	e16f      	b.n	8031114 <HAL_DMA_Abort_IT+0x480>
 8030e34:	40020010 	.word	0x40020010
 8030e38:	40020028 	.word	0x40020028
 8030e3c:	40020040 	.word	0x40020040
 8030e40:	40020058 	.word	0x40020058
 8030e44:	40020070 	.word	0x40020070
 8030e48:	40020088 	.word	0x40020088
 8030e4c:	400200a0 	.word	0x400200a0
 8030e50:	400200b8 	.word	0x400200b8
 8030e54:	40020410 	.word	0x40020410
 8030e58:	40020428 	.word	0x40020428
 8030e5c:	40020440 	.word	0x40020440
 8030e60:	40020458 	.word	0x40020458
 8030e64:	40020470 	.word	0x40020470
 8030e68:	40020488 	.word	0x40020488
 8030e6c:	400204a0 	.word	0x400204a0
 8030e70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8030e74:	687b      	ldr	r3, [r7, #4]
 8030e76:	681b      	ldr	r3, [r3, #0]
 8030e78:	681a      	ldr	r2, [r3, #0]
 8030e7a:	687b      	ldr	r3, [r7, #4]
 8030e7c:	681b      	ldr	r3, [r3, #0]
 8030e7e:	f022 020e 	bic.w	r2, r2, #14
 8030e82:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8030e84:	687b      	ldr	r3, [r7, #4]
 8030e86:	681b      	ldr	r3, [r3, #0]
 8030e88:	4a6c      	ldr	r2, [pc, #432]	; (803103c <HAL_DMA_Abort_IT+0x3a8>)
 8030e8a:	4293      	cmp	r3, r2
 8030e8c:	d04a      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030e8e:	687b      	ldr	r3, [r7, #4]
 8030e90:	681b      	ldr	r3, [r3, #0]
 8030e92:	4a6b      	ldr	r2, [pc, #428]	; (8031040 <HAL_DMA_Abort_IT+0x3ac>)
 8030e94:	4293      	cmp	r3, r2
 8030e96:	d045      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030e98:	687b      	ldr	r3, [r7, #4]
 8030e9a:	681b      	ldr	r3, [r3, #0]
 8030e9c:	4a69      	ldr	r2, [pc, #420]	; (8031044 <HAL_DMA_Abort_IT+0x3b0>)
 8030e9e:	4293      	cmp	r3, r2
 8030ea0:	d040      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030ea2:	687b      	ldr	r3, [r7, #4]
 8030ea4:	681b      	ldr	r3, [r3, #0]
 8030ea6:	4a68      	ldr	r2, [pc, #416]	; (8031048 <HAL_DMA_Abort_IT+0x3b4>)
 8030ea8:	4293      	cmp	r3, r2
 8030eaa:	d03b      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030eac:	687b      	ldr	r3, [r7, #4]
 8030eae:	681b      	ldr	r3, [r3, #0]
 8030eb0:	4a66      	ldr	r2, [pc, #408]	; (803104c <HAL_DMA_Abort_IT+0x3b8>)
 8030eb2:	4293      	cmp	r3, r2
 8030eb4:	d036      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030eb6:	687b      	ldr	r3, [r7, #4]
 8030eb8:	681b      	ldr	r3, [r3, #0]
 8030eba:	4a65      	ldr	r2, [pc, #404]	; (8031050 <HAL_DMA_Abort_IT+0x3bc>)
 8030ebc:	4293      	cmp	r3, r2
 8030ebe:	d031      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030ec0:	687b      	ldr	r3, [r7, #4]
 8030ec2:	681b      	ldr	r3, [r3, #0]
 8030ec4:	4a63      	ldr	r2, [pc, #396]	; (8031054 <HAL_DMA_Abort_IT+0x3c0>)
 8030ec6:	4293      	cmp	r3, r2
 8030ec8:	d02c      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030eca:	687b      	ldr	r3, [r7, #4]
 8030ecc:	681b      	ldr	r3, [r3, #0]
 8030ece:	4a62      	ldr	r2, [pc, #392]	; (8031058 <HAL_DMA_Abort_IT+0x3c4>)
 8030ed0:	4293      	cmp	r3, r2
 8030ed2:	d027      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030ed4:	687b      	ldr	r3, [r7, #4]
 8030ed6:	681b      	ldr	r3, [r3, #0]
 8030ed8:	4a60      	ldr	r2, [pc, #384]	; (803105c <HAL_DMA_Abort_IT+0x3c8>)
 8030eda:	4293      	cmp	r3, r2
 8030edc:	d022      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030ede:	687b      	ldr	r3, [r7, #4]
 8030ee0:	681b      	ldr	r3, [r3, #0]
 8030ee2:	4a5f      	ldr	r2, [pc, #380]	; (8031060 <HAL_DMA_Abort_IT+0x3cc>)
 8030ee4:	4293      	cmp	r3, r2
 8030ee6:	d01d      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030ee8:	687b      	ldr	r3, [r7, #4]
 8030eea:	681b      	ldr	r3, [r3, #0]
 8030eec:	4a5d      	ldr	r2, [pc, #372]	; (8031064 <HAL_DMA_Abort_IT+0x3d0>)
 8030eee:	4293      	cmp	r3, r2
 8030ef0:	d018      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030ef2:	687b      	ldr	r3, [r7, #4]
 8030ef4:	681b      	ldr	r3, [r3, #0]
 8030ef6:	4a5c      	ldr	r2, [pc, #368]	; (8031068 <HAL_DMA_Abort_IT+0x3d4>)
 8030ef8:	4293      	cmp	r3, r2
 8030efa:	d013      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030efc:	687b      	ldr	r3, [r7, #4]
 8030efe:	681b      	ldr	r3, [r3, #0]
 8030f00:	4a5a      	ldr	r2, [pc, #360]	; (803106c <HAL_DMA_Abort_IT+0x3d8>)
 8030f02:	4293      	cmp	r3, r2
 8030f04:	d00e      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030f06:	687b      	ldr	r3, [r7, #4]
 8030f08:	681b      	ldr	r3, [r3, #0]
 8030f0a:	4a59      	ldr	r2, [pc, #356]	; (8031070 <HAL_DMA_Abort_IT+0x3dc>)
 8030f0c:	4293      	cmp	r3, r2
 8030f0e:	d009      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030f10:	687b      	ldr	r3, [r7, #4]
 8030f12:	681b      	ldr	r3, [r3, #0]
 8030f14:	4a57      	ldr	r2, [pc, #348]	; (8031074 <HAL_DMA_Abort_IT+0x3e0>)
 8030f16:	4293      	cmp	r3, r2
 8030f18:	d004      	beq.n	8030f24 <HAL_DMA_Abort_IT+0x290>
 8030f1a:	687b      	ldr	r3, [r7, #4]
 8030f1c:	681b      	ldr	r3, [r3, #0]
 8030f1e:	4a56      	ldr	r2, [pc, #344]	; (8031078 <HAL_DMA_Abort_IT+0x3e4>)
 8030f20:	4293      	cmp	r3, r2
 8030f22:	d108      	bne.n	8030f36 <HAL_DMA_Abort_IT+0x2a2>
 8030f24:	687b      	ldr	r3, [r7, #4]
 8030f26:	681b      	ldr	r3, [r3, #0]
 8030f28:	681a      	ldr	r2, [r3, #0]
 8030f2a:	687b      	ldr	r3, [r7, #4]
 8030f2c:	681b      	ldr	r3, [r3, #0]
 8030f2e:	f022 0201 	bic.w	r2, r2, #1
 8030f32:	601a      	str	r2, [r3, #0]
 8030f34:	e007      	b.n	8030f46 <HAL_DMA_Abort_IT+0x2b2>
 8030f36:	687b      	ldr	r3, [r7, #4]
 8030f38:	681b      	ldr	r3, [r3, #0]
 8030f3a:	681a      	ldr	r2, [r3, #0]
 8030f3c:	687b      	ldr	r3, [r7, #4]
 8030f3e:	681b      	ldr	r3, [r3, #0]
 8030f40:	f022 0201 	bic.w	r2, r2, #1
 8030f44:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8030f46:	687b      	ldr	r3, [r7, #4]
 8030f48:	681b      	ldr	r3, [r3, #0]
 8030f4a:	4a3c      	ldr	r2, [pc, #240]	; (803103c <HAL_DMA_Abort_IT+0x3a8>)
 8030f4c:	4293      	cmp	r3, r2
 8030f4e:	d072      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030f50:	687b      	ldr	r3, [r7, #4]
 8030f52:	681b      	ldr	r3, [r3, #0]
 8030f54:	4a3a      	ldr	r2, [pc, #232]	; (8031040 <HAL_DMA_Abort_IT+0x3ac>)
 8030f56:	4293      	cmp	r3, r2
 8030f58:	d06d      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030f5a:	687b      	ldr	r3, [r7, #4]
 8030f5c:	681b      	ldr	r3, [r3, #0]
 8030f5e:	4a39      	ldr	r2, [pc, #228]	; (8031044 <HAL_DMA_Abort_IT+0x3b0>)
 8030f60:	4293      	cmp	r3, r2
 8030f62:	d068      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030f64:	687b      	ldr	r3, [r7, #4]
 8030f66:	681b      	ldr	r3, [r3, #0]
 8030f68:	4a37      	ldr	r2, [pc, #220]	; (8031048 <HAL_DMA_Abort_IT+0x3b4>)
 8030f6a:	4293      	cmp	r3, r2
 8030f6c:	d063      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030f6e:	687b      	ldr	r3, [r7, #4]
 8030f70:	681b      	ldr	r3, [r3, #0]
 8030f72:	4a36      	ldr	r2, [pc, #216]	; (803104c <HAL_DMA_Abort_IT+0x3b8>)
 8030f74:	4293      	cmp	r3, r2
 8030f76:	d05e      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030f78:	687b      	ldr	r3, [r7, #4]
 8030f7a:	681b      	ldr	r3, [r3, #0]
 8030f7c:	4a34      	ldr	r2, [pc, #208]	; (8031050 <HAL_DMA_Abort_IT+0x3bc>)
 8030f7e:	4293      	cmp	r3, r2
 8030f80:	d059      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030f82:	687b      	ldr	r3, [r7, #4]
 8030f84:	681b      	ldr	r3, [r3, #0]
 8030f86:	4a33      	ldr	r2, [pc, #204]	; (8031054 <HAL_DMA_Abort_IT+0x3c0>)
 8030f88:	4293      	cmp	r3, r2
 8030f8a:	d054      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030f8c:	687b      	ldr	r3, [r7, #4]
 8030f8e:	681b      	ldr	r3, [r3, #0]
 8030f90:	4a31      	ldr	r2, [pc, #196]	; (8031058 <HAL_DMA_Abort_IT+0x3c4>)
 8030f92:	4293      	cmp	r3, r2
 8030f94:	d04f      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030f96:	687b      	ldr	r3, [r7, #4]
 8030f98:	681b      	ldr	r3, [r3, #0]
 8030f9a:	4a30      	ldr	r2, [pc, #192]	; (803105c <HAL_DMA_Abort_IT+0x3c8>)
 8030f9c:	4293      	cmp	r3, r2
 8030f9e:	d04a      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030fa0:	687b      	ldr	r3, [r7, #4]
 8030fa2:	681b      	ldr	r3, [r3, #0]
 8030fa4:	4a2e      	ldr	r2, [pc, #184]	; (8031060 <HAL_DMA_Abort_IT+0x3cc>)
 8030fa6:	4293      	cmp	r3, r2
 8030fa8:	d045      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030faa:	687b      	ldr	r3, [r7, #4]
 8030fac:	681b      	ldr	r3, [r3, #0]
 8030fae:	4a2d      	ldr	r2, [pc, #180]	; (8031064 <HAL_DMA_Abort_IT+0x3d0>)
 8030fb0:	4293      	cmp	r3, r2
 8030fb2:	d040      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030fb4:	687b      	ldr	r3, [r7, #4]
 8030fb6:	681b      	ldr	r3, [r3, #0]
 8030fb8:	4a2b      	ldr	r2, [pc, #172]	; (8031068 <HAL_DMA_Abort_IT+0x3d4>)
 8030fba:	4293      	cmp	r3, r2
 8030fbc:	d03b      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030fbe:	687b      	ldr	r3, [r7, #4]
 8030fc0:	681b      	ldr	r3, [r3, #0]
 8030fc2:	4a2a      	ldr	r2, [pc, #168]	; (803106c <HAL_DMA_Abort_IT+0x3d8>)
 8030fc4:	4293      	cmp	r3, r2
 8030fc6:	d036      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030fc8:	687b      	ldr	r3, [r7, #4]
 8030fca:	681b      	ldr	r3, [r3, #0]
 8030fcc:	4a28      	ldr	r2, [pc, #160]	; (8031070 <HAL_DMA_Abort_IT+0x3dc>)
 8030fce:	4293      	cmp	r3, r2
 8030fd0:	d031      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030fd2:	687b      	ldr	r3, [r7, #4]
 8030fd4:	681b      	ldr	r3, [r3, #0]
 8030fd6:	4a27      	ldr	r2, [pc, #156]	; (8031074 <HAL_DMA_Abort_IT+0x3e0>)
 8030fd8:	4293      	cmp	r3, r2
 8030fda:	d02c      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030fdc:	687b      	ldr	r3, [r7, #4]
 8030fde:	681b      	ldr	r3, [r3, #0]
 8030fe0:	4a25      	ldr	r2, [pc, #148]	; (8031078 <HAL_DMA_Abort_IT+0x3e4>)
 8030fe2:	4293      	cmp	r3, r2
 8030fe4:	d027      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030fe6:	687b      	ldr	r3, [r7, #4]
 8030fe8:	681b      	ldr	r3, [r3, #0]
 8030fea:	4a24      	ldr	r2, [pc, #144]	; (803107c <HAL_DMA_Abort_IT+0x3e8>)
 8030fec:	4293      	cmp	r3, r2
 8030fee:	d022      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030ff0:	687b      	ldr	r3, [r7, #4]
 8030ff2:	681b      	ldr	r3, [r3, #0]
 8030ff4:	4a22      	ldr	r2, [pc, #136]	; (8031080 <HAL_DMA_Abort_IT+0x3ec>)
 8030ff6:	4293      	cmp	r3, r2
 8030ff8:	d01d      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8030ffa:	687b      	ldr	r3, [r7, #4]
 8030ffc:	681b      	ldr	r3, [r3, #0]
 8030ffe:	4a21      	ldr	r2, [pc, #132]	; (8031084 <HAL_DMA_Abort_IT+0x3f0>)
 8031000:	4293      	cmp	r3, r2
 8031002:	d018      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8031004:	687b      	ldr	r3, [r7, #4]
 8031006:	681b      	ldr	r3, [r3, #0]
 8031008:	4a1f      	ldr	r2, [pc, #124]	; (8031088 <HAL_DMA_Abort_IT+0x3f4>)
 803100a:	4293      	cmp	r3, r2
 803100c:	d013      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 803100e:	687b      	ldr	r3, [r7, #4]
 8031010:	681b      	ldr	r3, [r3, #0]
 8031012:	4a1e      	ldr	r2, [pc, #120]	; (803108c <HAL_DMA_Abort_IT+0x3f8>)
 8031014:	4293      	cmp	r3, r2
 8031016:	d00e      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8031018:	687b      	ldr	r3, [r7, #4]
 803101a:	681b      	ldr	r3, [r3, #0]
 803101c:	4a1c      	ldr	r2, [pc, #112]	; (8031090 <HAL_DMA_Abort_IT+0x3fc>)
 803101e:	4293      	cmp	r3, r2
 8031020:	d009      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 8031022:	687b      	ldr	r3, [r7, #4]
 8031024:	681b      	ldr	r3, [r3, #0]
 8031026:	4a1b      	ldr	r2, [pc, #108]	; (8031094 <HAL_DMA_Abort_IT+0x400>)
 8031028:	4293      	cmp	r3, r2
 803102a:	d004      	beq.n	8031036 <HAL_DMA_Abort_IT+0x3a2>
 803102c:	687b      	ldr	r3, [r7, #4]
 803102e:	681b      	ldr	r3, [r3, #0]
 8031030:	4a19      	ldr	r2, [pc, #100]	; (8031098 <HAL_DMA_Abort_IT+0x404>)
 8031032:	4293      	cmp	r3, r2
 8031034:	d132      	bne.n	803109c <HAL_DMA_Abort_IT+0x408>
 8031036:	2301      	movs	r3, #1
 8031038:	e031      	b.n	803109e <HAL_DMA_Abort_IT+0x40a>
 803103a:	bf00      	nop
 803103c:	40020010 	.word	0x40020010
 8031040:	40020028 	.word	0x40020028
 8031044:	40020040 	.word	0x40020040
 8031048:	40020058 	.word	0x40020058
 803104c:	40020070 	.word	0x40020070
 8031050:	40020088 	.word	0x40020088
 8031054:	400200a0 	.word	0x400200a0
 8031058:	400200b8 	.word	0x400200b8
 803105c:	40020410 	.word	0x40020410
 8031060:	40020428 	.word	0x40020428
 8031064:	40020440 	.word	0x40020440
 8031068:	40020458 	.word	0x40020458
 803106c:	40020470 	.word	0x40020470
 8031070:	40020488 	.word	0x40020488
 8031074:	400204a0 	.word	0x400204a0
 8031078:	400204b8 	.word	0x400204b8
 803107c:	58025408 	.word	0x58025408
 8031080:	5802541c 	.word	0x5802541c
 8031084:	58025430 	.word	0x58025430
 8031088:	58025444 	.word	0x58025444
 803108c:	58025458 	.word	0x58025458
 8031090:	5802546c 	.word	0x5802546c
 8031094:	58025480 	.word	0x58025480
 8031098:	58025494 	.word	0x58025494
 803109c:	2300      	movs	r3, #0
 803109e:	2b00      	cmp	r3, #0
 80310a0:	d028      	beq.n	80310f4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80310a2:	687b      	ldr	r3, [r7, #4]
 80310a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80310a6:	681a      	ldr	r2, [r3, #0]
 80310a8:	687b      	ldr	r3, [r7, #4]
 80310aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80310ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80310b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80310b2:	687b      	ldr	r3, [r7, #4]
 80310b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80310b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80310b8:	687b      	ldr	r3, [r7, #4]
 80310ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80310bc:	f003 031f 	and.w	r3, r3, #31
 80310c0:	2201      	movs	r2, #1
 80310c2:	409a      	lsls	r2, r3
 80310c4:	68fb      	ldr	r3, [r7, #12]
 80310c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80310c8:	687b      	ldr	r3, [r7, #4]
 80310ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80310cc:	687a      	ldr	r2, [r7, #4]
 80310ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80310d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80310d2:	687b      	ldr	r3, [r7, #4]
 80310d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80310d6:	2b00      	cmp	r3, #0
 80310d8:	d00c      	beq.n	80310f4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80310da:	687b      	ldr	r3, [r7, #4]
 80310dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80310de:	681a      	ldr	r2, [r3, #0]
 80310e0:	687b      	ldr	r3, [r7, #4]
 80310e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80310e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80310e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80310ea:	687b      	ldr	r3, [r7, #4]
 80310ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80310ee:	687a      	ldr	r2, [r7, #4]
 80310f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80310f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80310f4:	687b      	ldr	r3, [r7, #4]
 80310f6:	2201      	movs	r2, #1
 80310f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80310fc:	687b      	ldr	r3, [r7, #4]
 80310fe:	2200      	movs	r2, #0
 8031100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8031104:	687b      	ldr	r3, [r7, #4]
 8031106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031108:	2b00      	cmp	r3, #0
 803110a:	d003      	beq.n	8031114 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 803110c:	687b      	ldr	r3, [r7, #4]
 803110e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031110:	6878      	ldr	r0, [r7, #4]
 8031112:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8031114:	2300      	movs	r3, #0
}
 8031116:	4618      	mov	r0, r3
 8031118:	3710      	adds	r7, #16
 803111a:	46bd      	mov	sp, r7
 803111c:	bd80      	pop	{r7, pc}
 803111e:	bf00      	nop

08031120 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8031120:	b580      	push	{r7, lr}
 8031122:	b08a      	sub	sp, #40	; 0x28
 8031124:	af00      	add	r7, sp, #0
 8031126:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8031128:	2300      	movs	r3, #0
 803112a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 803112c:	4b67      	ldr	r3, [pc, #412]	; (80312cc <HAL_DMA_IRQHandler+0x1ac>)
 803112e:	681b      	ldr	r3, [r3, #0]
 8031130:	4a67      	ldr	r2, [pc, #412]	; (80312d0 <HAL_DMA_IRQHandler+0x1b0>)
 8031132:	fba2 2303 	umull	r2, r3, r2, r3
 8031136:	0a9b      	lsrs	r3, r3, #10
 8031138:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 803113a:	687b      	ldr	r3, [r7, #4]
 803113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803113e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8031140:	687b      	ldr	r3, [r7, #4]
 8031142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031144:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8031146:	6a3b      	ldr	r3, [r7, #32]
 8031148:	681b      	ldr	r3, [r3, #0]
 803114a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 803114c:	69fb      	ldr	r3, [r7, #28]
 803114e:	681b      	ldr	r3, [r3, #0]
 8031150:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8031152:	687b      	ldr	r3, [r7, #4]
 8031154:	681b      	ldr	r3, [r3, #0]
 8031156:	4a5f      	ldr	r2, [pc, #380]	; (80312d4 <HAL_DMA_IRQHandler+0x1b4>)
 8031158:	4293      	cmp	r3, r2
 803115a:	d04a      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 803115c:	687b      	ldr	r3, [r7, #4]
 803115e:	681b      	ldr	r3, [r3, #0]
 8031160:	4a5d      	ldr	r2, [pc, #372]	; (80312d8 <HAL_DMA_IRQHandler+0x1b8>)
 8031162:	4293      	cmp	r3, r2
 8031164:	d045      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 8031166:	687b      	ldr	r3, [r7, #4]
 8031168:	681b      	ldr	r3, [r3, #0]
 803116a:	4a5c      	ldr	r2, [pc, #368]	; (80312dc <HAL_DMA_IRQHandler+0x1bc>)
 803116c:	4293      	cmp	r3, r2
 803116e:	d040      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 8031170:	687b      	ldr	r3, [r7, #4]
 8031172:	681b      	ldr	r3, [r3, #0]
 8031174:	4a5a      	ldr	r2, [pc, #360]	; (80312e0 <HAL_DMA_IRQHandler+0x1c0>)
 8031176:	4293      	cmp	r3, r2
 8031178:	d03b      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 803117a:	687b      	ldr	r3, [r7, #4]
 803117c:	681b      	ldr	r3, [r3, #0]
 803117e:	4a59      	ldr	r2, [pc, #356]	; (80312e4 <HAL_DMA_IRQHandler+0x1c4>)
 8031180:	4293      	cmp	r3, r2
 8031182:	d036      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 8031184:	687b      	ldr	r3, [r7, #4]
 8031186:	681b      	ldr	r3, [r3, #0]
 8031188:	4a57      	ldr	r2, [pc, #348]	; (80312e8 <HAL_DMA_IRQHandler+0x1c8>)
 803118a:	4293      	cmp	r3, r2
 803118c:	d031      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 803118e:	687b      	ldr	r3, [r7, #4]
 8031190:	681b      	ldr	r3, [r3, #0]
 8031192:	4a56      	ldr	r2, [pc, #344]	; (80312ec <HAL_DMA_IRQHandler+0x1cc>)
 8031194:	4293      	cmp	r3, r2
 8031196:	d02c      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 8031198:	687b      	ldr	r3, [r7, #4]
 803119a:	681b      	ldr	r3, [r3, #0]
 803119c:	4a54      	ldr	r2, [pc, #336]	; (80312f0 <HAL_DMA_IRQHandler+0x1d0>)
 803119e:	4293      	cmp	r3, r2
 80311a0:	d027      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 80311a2:	687b      	ldr	r3, [r7, #4]
 80311a4:	681b      	ldr	r3, [r3, #0]
 80311a6:	4a53      	ldr	r2, [pc, #332]	; (80312f4 <HAL_DMA_IRQHandler+0x1d4>)
 80311a8:	4293      	cmp	r3, r2
 80311aa:	d022      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 80311ac:	687b      	ldr	r3, [r7, #4]
 80311ae:	681b      	ldr	r3, [r3, #0]
 80311b0:	4a51      	ldr	r2, [pc, #324]	; (80312f8 <HAL_DMA_IRQHandler+0x1d8>)
 80311b2:	4293      	cmp	r3, r2
 80311b4:	d01d      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 80311b6:	687b      	ldr	r3, [r7, #4]
 80311b8:	681b      	ldr	r3, [r3, #0]
 80311ba:	4a50      	ldr	r2, [pc, #320]	; (80312fc <HAL_DMA_IRQHandler+0x1dc>)
 80311bc:	4293      	cmp	r3, r2
 80311be:	d018      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 80311c0:	687b      	ldr	r3, [r7, #4]
 80311c2:	681b      	ldr	r3, [r3, #0]
 80311c4:	4a4e      	ldr	r2, [pc, #312]	; (8031300 <HAL_DMA_IRQHandler+0x1e0>)
 80311c6:	4293      	cmp	r3, r2
 80311c8:	d013      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 80311ca:	687b      	ldr	r3, [r7, #4]
 80311cc:	681b      	ldr	r3, [r3, #0]
 80311ce:	4a4d      	ldr	r2, [pc, #308]	; (8031304 <HAL_DMA_IRQHandler+0x1e4>)
 80311d0:	4293      	cmp	r3, r2
 80311d2:	d00e      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 80311d4:	687b      	ldr	r3, [r7, #4]
 80311d6:	681b      	ldr	r3, [r3, #0]
 80311d8:	4a4b      	ldr	r2, [pc, #300]	; (8031308 <HAL_DMA_IRQHandler+0x1e8>)
 80311da:	4293      	cmp	r3, r2
 80311dc:	d009      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 80311de:	687b      	ldr	r3, [r7, #4]
 80311e0:	681b      	ldr	r3, [r3, #0]
 80311e2:	4a4a      	ldr	r2, [pc, #296]	; (803130c <HAL_DMA_IRQHandler+0x1ec>)
 80311e4:	4293      	cmp	r3, r2
 80311e6:	d004      	beq.n	80311f2 <HAL_DMA_IRQHandler+0xd2>
 80311e8:	687b      	ldr	r3, [r7, #4]
 80311ea:	681b      	ldr	r3, [r3, #0]
 80311ec:	4a48      	ldr	r2, [pc, #288]	; (8031310 <HAL_DMA_IRQHandler+0x1f0>)
 80311ee:	4293      	cmp	r3, r2
 80311f0:	d101      	bne.n	80311f6 <HAL_DMA_IRQHandler+0xd6>
 80311f2:	2301      	movs	r3, #1
 80311f4:	e000      	b.n	80311f8 <HAL_DMA_IRQHandler+0xd8>
 80311f6:	2300      	movs	r3, #0
 80311f8:	2b00      	cmp	r3, #0
 80311fa:	f000 842b 	beq.w	8031a54 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80311fe:	687b      	ldr	r3, [r7, #4]
 8031200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031202:	f003 031f 	and.w	r3, r3, #31
 8031206:	2208      	movs	r2, #8
 8031208:	409a      	lsls	r2, r3
 803120a:	69bb      	ldr	r3, [r7, #24]
 803120c:	4013      	ands	r3, r2
 803120e:	2b00      	cmp	r3, #0
 8031210:	f000 80a2 	beq.w	8031358 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8031214:	687b      	ldr	r3, [r7, #4]
 8031216:	681b      	ldr	r3, [r3, #0]
 8031218:	4a2e      	ldr	r2, [pc, #184]	; (80312d4 <HAL_DMA_IRQHandler+0x1b4>)
 803121a:	4293      	cmp	r3, r2
 803121c:	d04a      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 803121e:	687b      	ldr	r3, [r7, #4]
 8031220:	681b      	ldr	r3, [r3, #0]
 8031222:	4a2d      	ldr	r2, [pc, #180]	; (80312d8 <HAL_DMA_IRQHandler+0x1b8>)
 8031224:	4293      	cmp	r3, r2
 8031226:	d045      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 8031228:	687b      	ldr	r3, [r7, #4]
 803122a:	681b      	ldr	r3, [r3, #0]
 803122c:	4a2b      	ldr	r2, [pc, #172]	; (80312dc <HAL_DMA_IRQHandler+0x1bc>)
 803122e:	4293      	cmp	r3, r2
 8031230:	d040      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 8031232:	687b      	ldr	r3, [r7, #4]
 8031234:	681b      	ldr	r3, [r3, #0]
 8031236:	4a2a      	ldr	r2, [pc, #168]	; (80312e0 <HAL_DMA_IRQHandler+0x1c0>)
 8031238:	4293      	cmp	r3, r2
 803123a:	d03b      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 803123c:	687b      	ldr	r3, [r7, #4]
 803123e:	681b      	ldr	r3, [r3, #0]
 8031240:	4a28      	ldr	r2, [pc, #160]	; (80312e4 <HAL_DMA_IRQHandler+0x1c4>)
 8031242:	4293      	cmp	r3, r2
 8031244:	d036      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 8031246:	687b      	ldr	r3, [r7, #4]
 8031248:	681b      	ldr	r3, [r3, #0]
 803124a:	4a27      	ldr	r2, [pc, #156]	; (80312e8 <HAL_DMA_IRQHandler+0x1c8>)
 803124c:	4293      	cmp	r3, r2
 803124e:	d031      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 8031250:	687b      	ldr	r3, [r7, #4]
 8031252:	681b      	ldr	r3, [r3, #0]
 8031254:	4a25      	ldr	r2, [pc, #148]	; (80312ec <HAL_DMA_IRQHandler+0x1cc>)
 8031256:	4293      	cmp	r3, r2
 8031258:	d02c      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 803125a:	687b      	ldr	r3, [r7, #4]
 803125c:	681b      	ldr	r3, [r3, #0]
 803125e:	4a24      	ldr	r2, [pc, #144]	; (80312f0 <HAL_DMA_IRQHandler+0x1d0>)
 8031260:	4293      	cmp	r3, r2
 8031262:	d027      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 8031264:	687b      	ldr	r3, [r7, #4]
 8031266:	681b      	ldr	r3, [r3, #0]
 8031268:	4a22      	ldr	r2, [pc, #136]	; (80312f4 <HAL_DMA_IRQHandler+0x1d4>)
 803126a:	4293      	cmp	r3, r2
 803126c:	d022      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 803126e:	687b      	ldr	r3, [r7, #4]
 8031270:	681b      	ldr	r3, [r3, #0]
 8031272:	4a21      	ldr	r2, [pc, #132]	; (80312f8 <HAL_DMA_IRQHandler+0x1d8>)
 8031274:	4293      	cmp	r3, r2
 8031276:	d01d      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 8031278:	687b      	ldr	r3, [r7, #4]
 803127a:	681b      	ldr	r3, [r3, #0]
 803127c:	4a1f      	ldr	r2, [pc, #124]	; (80312fc <HAL_DMA_IRQHandler+0x1dc>)
 803127e:	4293      	cmp	r3, r2
 8031280:	d018      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 8031282:	687b      	ldr	r3, [r7, #4]
 8031284:	681b      	ldr	r3, [r3, #0]
 8031286:	4a1e      	ldr	r2, [pc, #120]	; (8031300 <HAL_DMA_IRQHandler+0x1e0>)
 8031288:	4293      	cmp	r3, r2
 803128a:	d013      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 803128c:	687b      	ldr	r3, [r7, #4]
 803128e:	681b      	ldr	r3, [r3, #0]
 8031290:	4a1c      	ldr	r2, [pc, #112]	; (8031304 <HAL_DMA_IRQHandler+0x1e4>)
 8031292:	4293      	cmp	r3, r2
 8031294:	d00e      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 8031296:	687b      	ldr	r3, [r7, #4]
 8031298:	681b      	ldr	r3, [r3, #0]
 803129a:	4a1b      	ldr	r2, [pc, #108]	; (8031308 <HAL_DMA_IRQHandler+0x1e8>)
 803129c:	4293      	cmp	r3, r2
 803129e:	d009      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 80312a0:	687b      	ldr	r3, [r7, #4]
 80312a2:	681b      	ldr	r3, [r3, #0]
 80312a4:	4a19      	ldr	r2, [pc, #100]	; (803130c <HAL_DMA_IRQHandler+0x1ec>)
 80312a6:	4293      	cmp	r3, r2
 80312a8:	d004      	beq.n	80312b4 <HAL_DMA_IRQHandler+0x194>
 80312aa:	687b      	ldr	r3, [r7, #4]
 80312ac:	681b      	ldr	r3, [r3, #0]
 80312ae:	4a18      	ldr	r2, [pc, #96]	; (8031310 <HAL_DMA_IRQHandler+0x1f0>)
 80312b0:	4293      	cmp	r3, r2
 80312b2:	d12f      	bne.n	8031314 <HAL_DMA_IRQHandler+0x1f4>
 80312b4:	687b      	ldr	r3, [r7, #4]
 80312b6:	681b      	ldr	r3, [r3, #0]
 80312b8:	681b      	ldr	r3, [r3, #0]
 80312ba:	f003 0304 	and.w	r3, r3, #4
 80312be:	2b00      	cmp	r3, #0
 80312c0:	bf14      	ite	ne
 80312c2:	2301      	movne	r3, #1
 80312c4:	2300      	moveq	r3, #0
 80312c6:	b2db      	uxtb	r3, r3
 80312c8:	e02e      	b.n	8031328 <HAL_DMA_IRQHandler+0x208>
 80312ca:	bf00      	nop
 80312cc:	24000004 	.word	0x24000004
 80312d0:	1b4e81b5 	.word	0x1b4e81b5
 80312d4:	40020010 	.word	0x40020010
 80312d8:	40020028 	.word	0x40020028
 80312dc:	40020040 	.word	0x40020040
 80312e0:	40020058 	.word	0x40020058
 80312e4:	40020070 	.word	0x40020070
 80312e8:	40020088 	.word	0x40020088
 80312ec:	400200a0 	.word	0x400200a0
 80312f0:	400200b8 	.word	0x400200b8
 80312f4:	40020410 	.word	0x40020410
 80312f8:	40020428 	.word	0x40020428
 80312fc:	40020440 	.word	0x40020440
 8031300:	40020458 	.word	0x40020458
 8031304:	40020470 	.word	0x40020470
 8031308:	40020488 	.word	0x40020488
 803130c:	400204a0 	.word	0x400204a0
 8031310:	400204b8 	.word	0x400204b8
 8031314:	687b      	ldr	r3, [r7, #4]
 8031316:	681b      	ldr	r3, [r3, #0]
 8031318:	681b      	ldr	r3, [r3, #0]
 803131a:	f003 0308 	and.w	r3, r3, #8
 803131e:	2b00      	cmp	r3, #0
 8031320:	bf14      	ite	ne
 8031322:	2301      	movne	r3, #1
 8031324:	2300      	moveq	r3, #0
 8031326:	b2db      	uxtb	r3, r3
 8031328:	2b00      	cmp	r3, #0
 803132a:	d015      	beq.n	8031358 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 803132c:	687b      	ldr	r3, [r7, #4]
 803132e:	681b      	ldr	r3, [r3, #0]
 8031330:	681a      	ldr	r2, [r3, #0]
 8031332:	687b      	ldr	r3, [r7, #4]
 8031334:	681b      	ldr	r3, [r3, #0]
 8031336:	f022 0204 	bic.w	r2, r2, #4
 803133a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 803133c:	687b      	ldr	r3, [r7, #4]
 803133e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031340:	f003 031f 	and.w	r3, r3, #31
 8031344:	2208      	movs	r2, #8
 8031346:	409a      	lsls	r2, r3
 8031348:	6a3b      	ldr	r3, [r7, #32]
 803134a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 803134c:	687b      	ldr	r3, [r7, #4]
 803134e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031350:	f043 0201 	orr.w	r2, r3, #1
 8031354:	687b      	ldr	r3, [r7, #4]
 8031356:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8031358:	687b      	ldr	r3, [r7, #4]
 803135a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803135c:	f003 031f 	and.w	r3, r3, #31
 8031360:	69ba      	ldr	r2, [r7, #24]
 8031362:	fa22 f303 	lsr.w	r3, r2, r3
 8031366:	f003 0301 	and.w	r3, r3, #1
 803136a:	2b00      	cmp	r3, #0
 803136c:	d06e      	beq.n	803144c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 803136e:	687b      	ldr	r3, [r7, #4]
 8031370:	681b      	ldr	r3, [r3, #0]
 8031372:	4a69      	ldr	r2, [pc, #420]	; (8031518 <HAL_DMA_IRQHandler+0x3f8>)
 8031374:	4293      	cmp	r3, r2
 8031376:	d04a      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 8031378:	687b      	ldr	r3, [r7, #4]
 803137a:	681b      	ldr	r3, [r3, #0]
 803137c:	4a67      	ldr	r2, [pc, #412]	; (803151c <HAL_DMA_IRQHandler+0x3fc>)
 803137e:	4293      	cmp	r3, r2
 8031380:	d045      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 8031382:	687b      	ldr	r3, [r7, #4]
 8031384:	681b      	ldr	r3, [r3, #0]
 8031386:	4a66      	ldr	r2, [pc, #408]	; (8031520 <HAL_DMA_IRQHandler+0x400>)
 8031388:	4293      	cmp	r3, r2
 803138a:	d040      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 803138c:	687b      	ldr	r3, [r7, #4]
 803138e:	681b      	ldr	r3, [r3, #0]
 8031390:	4a64      	ldr	r2, [pc, #400]	; (8031524 <HAL_DMA_IRQHandler+0x404>)
 8031392:	4293      	cmp	r3, r2
 8031394:	d03b      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 8031396:	687b      	ldr	r3, [r7, #4]
 8031398:	681b      	ldr	r3, [r3, #0]
 803139a:	4a63      	ldr	r2, [pc, #396]	; (8031528 <HAL_DMA_IRQHandler+0x408>)
 803139c:	4293      	cmp	r3, r2
 803139e:	d036      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 80313a0:	687b      	ldr	r3, [r7, #4]
 80313a2:	681b      	ldr	r3, [r3, #0]
 80313a4:	4a61      	ldr	r2, [pc, #388]	; (803152c <HAL_DMA_IRQHandler+0x40c>)
 80313a6:	4293      	cmp	r3, r2
 80313a8:	d031      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 80313aa:	687b      	ldr	r3, [r7, #4]
 80313ac:	681b      	ldr	r3, [r3, #0]
 80313ae:	4a60      	ldr	r2, [pc, #384]	; (8031530 <HAL_DMA_IRQHandler+0x410>)
 80313b0:	4293      	cmp	r3, r2
 80313b2:	d02c      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 80313b4:	687b      	ldr	r3, [r7, #4]
 80313b6:	681b      	ldr	r3, [r3, #0]
 80313b8:	4a5e      	ldr	r2, [pc, #376]	; (8031534 <HAL_DMA_IRQHandler+0x414>)
 80313ba:	4293      	cmp	r3, r2
 80313bc:	d027      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 80313be:	687b      	ldr	r3, [r7, #4]
 80313c0:	681b      	ldr	r3, [r3, #0]
 80313c2:	4a5d      	ldr	r2, [pc, #372]	; (8031538 <HAL_DMA_IRQHandler+0x418>)
 80313c4:	4293      	cmp	r3, r2
 80313c6:	d022      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 80313c8:	687b      	ldr	r3, [r7, #4]
 80313ca:	681b      	ldr	r3, [r3, #0]
 80313cc:	4a5b      	ldr	r2, [pc, #364]	; (803153c <HAL_DMA_IRQHandler+0x41c>)
 80313ce:	4293      	cmp	r3, r2
 80313d0:	d01d      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 80313d2:	687b      	ldr	r3, [r7, #4]
 80313d4:	681b      	ldr	r3, [r3, #0]
 80313d6:	4a5a      	ldr	r2, [pc, #360]	; (8031540 <HAL_DMA_IRQHandler+0x420>)
 80313d8:	4293      	cmp	r3, r2
 80313da:	d018      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 80313dc:	687b      	ldr	r3, [r7, #4]
 80313de:	681b      	ldr	r3, [r3, #0]
 80313e0:	4a58      	ldr	r2, [pc, #352]	; (8031544 <HAL_DMA_IRQHandler+0x424>)
 80313e2:	4293      	cmp	r3, r2
 80313e4:	d013      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 80313e6:	687b      	ldr	r3, [r7, #4]
 80313e8:	681b      	ldr	r3, [r3, #0]
 80313ea:	4a57      	ldr	r2, [pc, #348]	; (8031548 <HAL_DMA_IRQHandler+0x428>)
 80313ec:	4293      	cmp	r3, r2
 80313ee:	d00e      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 80313f0:	687b      	ldr	r3, [r7, #4]
 80313f2:	681b      	ldr	r3, [r3, #0]
 80313f4:	4a55      	ldr	r2, [pc, #340]	; (803154c <HAL_DMA_IRQHandler+0x42c>)
 80313f6:	4293      	cmp	r3, r2
 80313f8:	d009      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 80313fa:	687b      	ldr	r3, [r7, #4]
 80313fc:	681b      	ldr	r3, [r3, #0]
 80313fe:	4a54      	ldr	r2, [pc, #336]	; (8031550 <HAL_DMA_IRQHandler+0x430>)
 8031400:	4293      	cmp	r3, r2
 8031402:	d004      	beq.n	803140e <HAL_DMA_IRQHandler+0x2ee>
 8031404:	687b      	ldr	r3, [r7, #4]
 8031406:	681b      	ldr	r3, [r3, #0]
 8031408:	4a52      	ldr	r2, [pc, #328]	; (8031554 <HAL_DMA_IRQHandler+0x434>)
 803140a:	4293      	cmp	r3, r2
 803140c:	d10a      	bne.n	8031424 <HAL_DMA_IRQHandler+0x304>
 803140e:	687b      	ldr	r3, [r7, #4]
 8031410:	681b      	ldr	r3, [r3, #0]
 8031412:	695b      	ldr	r3, [r3, #20]
 8031414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8031418:	2b00      	cmp	r3, #0
 803141a:	bf14      	ite	ne
 803141c:	2301      	movne	r3, #1
 803141e:	2300      	moveq	r3, #0
 8031420:	b2db      	uxtb	r3, r3
 8031422:	e003      	b.n	803142c <HAL_DMA_IRQHandler+0x30c>
 8031424:	687b      	ldr	r3, [r7, #4]
 8031426:	681b      	ldr	r3, [r3, #0]
 8031428:	681b      	ldr	r3, [r3, #0]
 803142a:	2300      	movs	r3, #0
 803142c:	2b00      	cmp	r3, #0
 803142e:	d00d      	beq.n	803144c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8031430:	687b      	ldr	r3, [r7, #4]
 8031432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031434:	f003 031f 	and.w	r3, r3, #31
 8031438:	2201      	movs	r2, #1
 803143a:	409a      	lsls	r2, r3
 803143c:	6a3b      	ldr	r3, [r7, #32]
 803143e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8031440:	687b      	ldr	r3, [r7, #4]
 8031442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031444:	f043 0202 	orr.w	r2, r3, #2
 8031448:	687b      	ldr	r3, [r7, #4]
 803144a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 803144c:	687b      	ldr	r3, [r7, #4]
 803144e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031450:	f003 031f 	and.w	r3, r3, #31
 8031454:	2204      	movs	r2, #4
 8031456:	409a      	lsls	r2, r3
 8031458:	69bb      	ldr	r3, [r7, #24]
 803145a:	4013      	ands	r3, r2
 803145c:	2b00      	cmp	r3, #0
 803145e:	f000 808f 	beq.w	8031580 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8031462:	687b      	ldr	r3, [r7, #4]
 8031464:	681b      	ldr	r3, [r3, #0]
 8031466:	4a2c      	ldr	r2, [pc, #176]	; (8031518 <HAL_DMA_IRQHandler+0x3f8>)
 8031468:	4293      	cmp	r3, r2
 803146a:	d04a      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 803146c:	687b      	ldr	r3, [r7, #4]
 803146e:	681b      	ldr	r3, [r3, #0]
 8031470:	4a2a      	ldr	r2, [pc, #168]	; (803151c <HAL_DMA_IRQHandler+0x3fc>)
 8031472:	4293      	cmp	r3, r2
 8031474:	d045      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 8031476:	687b      	ldr	r3, [r7, #4]
 8031478:	681b      	ldr	r3, [r3, #0]
 803147a:	4a29      	ldr	r2, [pc, #164]	; (8031520 <HAL_DMA_IRQHandler+0x400>)
 803147c:	4293      	cmp	r3, r2
 803147e:	d040      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 8031480:	687b      	ldr	r3, [r7, #4]
 8031482:	681b      	ldr	r3, [r3, #0]
 8031484:	4a27      	ldr	r2, [pc, #156]	; (8031524 <HAL_DMA_IRQHandler+0x404>)
 8031486:	4293      	cmp	r3, r2
 8031488:	d03b      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 803148a:	687b      	ldr	r3, [r7, #4]
 803148c:	681b      	ldr	r3, [r3, #0]
 803148e:	4a26      	ldr	r2, [pc, #152]	; (8031528 <HAL_DMA_IRQHandler+0x408>)
 8031490:	4293      	cmp	r3, r2
 8031492:	d036      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 8031494:	687b      	ldr	r3, [r7, #4]
 8031496:	681b      	ldr	r3, [r3, #0]
 8031498:	4a24      	ldr	r2, [pc, #144]	; (803152c <HAL_DMA_IRQHandler+0x40c>)
 803149a:	4293      	cmp	r3, r2
 803149c:	d031      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 803149e:	687b      	ldr	r3, [r7, #4]
 80314a0:	681b      	ldr	r3, [r3, #0]
 80314a2:	4a23      	ldr	r2, [pc, #140]	; (8031530 <HAL_DMA_IRQHandler+0x410>)
 80314a4:	4293      	cmp	r3, r2
 80314a6:	d02c      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 80314a8:	687b      	ldr	r3, [r7, #4]
 80314aa:	681b      	ldr	r3, [r3, #0]
 80314ac:	4a21      	ldr	r2, [pc, #132]	; (8031534 <HAL_DMA_IRQHandler+0x414>)
 80314ae:	4293      	cmp	r3, r2
 80314b0:	d027      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 80314b2:	687b      	ldr	r3, [r7, #4]
 80314b4:	681b      	ldr	r3, [r3, #0]
 80314b6:	4a20      	ldr	r2, [pc, #128]	; (8031538 <HAL_DMA_IRQHandler+0x418>)
 80314b8:	4293      	cmp	r3, r2
 80314ba:	d022      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 80314bc:	687b      	ldr	r3, [r7, #4]
 80314be:	681b      	ldr	r3, [r3, #0]
 80314c0:	4a1e      	ldr	r2, [pc, #120]	; (803153c <HAL_DMA_IRQHandler+0x41c>)
 80314c2:	4293      	cmp	r3, r2
 80314c4:	d01d      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 80314c6:	687b      	ldr	r3, [r7, #4]
 80314c8:	681b      	ldr	r3, [r3, #0]
 80314ca:	4a1d      	ldr	r2, [pc, #116]	; (8031540 <HAL_DMA_IRQHandler+0x420>)
 80314cc:	4293      	cmp	r3, r2
 80314ce:	d018      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 80314d0:	687b      	ldr	r3, [r7, #4]
 80314d2:	681b      	ldr	r3, [r3, #0]
 80314d4:	4a1b      	ldr	r2, [pc, #108]	; (8031544 <HAL_DMA_IRQHandler+0x424>)
 80314d6:	4293      	cmp	r3, r2
 80314d8:	d013      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 80314da:	687b      	ldr	r3, [r7, #4]
 80314dc:	681b      	ldr	r3, [r3, #0]
 80314de:	4a1a      	ldr	r2, [pc, #104]	; (8031548 <HAL_DMA_IRQHandler+0x428>)
 80314e0:	4293      	cmp	r3, r2
 80314e2:	d00e      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 80314e4:	687b      	ldr	r3, [r7, #4]
 80314e6:	681b      	ldr	r3, [r3, #0]
 80314e8:	4a18      	ldr	r2, [pc, #96]	; (803154c <HAL_DMA_IRQHandler+0x42c>)
 80314ea:	4293      	cmp	r3, r2
 80314ec:	d009      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 80314ee:	687b      	ldr	r3, [r7, #4]
 80314f0:	681b      	ldr	r3, [r3, #0]
 80314f2:	4a17      	ldr	r2, [pc, #92]	; (8031550 <HAL_DMA_IRQHandler+0x430>)
 80314f4:	4293      	cmp	r3, r2
 80314f6:	d004      	beq.n	8031502 <HAL_DMA_IRQHandler+0x3e2>
 80314f8:	687b      	ldr	r3, [r7, #4]
 80314fa:	681b      	ldr	r3, [r3, #0]
 80314fc:	4a15      	ldr	r2, [pc, #84]	; (8031554 <HAL_DMA_IRQHandler+0x434>)
 80314fe:	4293      	cmp	r3, r2
 8031500:	d12a      	bne.n	8031558 <HAL_DMA_IRQHandler+0x438>
 8031502:	687b      	ldr	r3, [r7, #4]
 8031504:	681b      	ldr	r3, [r3, #0]
 8031506:	681b      	ldr	r3, [r3, #0]
 8031508:	f003 0302 	and.w	r3, r3, #2
 803150c:	2b00      	cmp	r3, #0
 803150e:	bf14      	ite	ne
 8031510:	2301      	movne	r3, #1
 8031512:	2300      	moveq	r3, #0
 8031514:	b2db      	uxtb	r3, r3
 8031516:	e023      	b.n	8031560 <HAL_DMA_IRQHandler+0x440>
 8031518:	40020010 	.word	0x40020010
 803151c:	40020028 	.word	0x40020028
 8031520:	40020040 	.word	0x40020040
 8031524:	40020058 	.word	0x40020058
 8031528:	40020070 	.word	0x40020070
 803152c:	40020088 	.word	0x40020088
 8031530:	400200a0 	.word	0x400200a0
 8031534:	400200b8 	.word	0x400200b8
 8031538:	40020410 	.word	0x40020410
 803153c:	40020428 	.word	0x40020428
 8031540:	40020440 	.word	0x40020440
 8031544:	40020458 	.word	0x40020458
 8031548:	40020470 	.word	0x40020470
 803154c:	40020488 	.word	0x40020488
 8031550:	400204a0 	.word	0x400204a0
 8031554:	400204b8 	.word	0x400204b8
 8031558:	687b      	ldr	r3, [r7, #4]
 803155a:	681b      	ldr	r3, [r3, #0]
 803155c:	681b      	ldr	r3, [r3, #0]
 803155e:	2300      	movs	r3, #0
 8031560:	2b00      	cmp	r3, #0
 8031562:	d00d      	beq.n	8031580 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8031564:	687b      	ldr	r3, [r7, #4]
 8031566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031568:	f003 031f 	and.w	r3, r3, #31
 803156c:	2204      	movs	r2, #4
 803156e:	409a      	lsls	r2, r3
 8031570:	6a3b      	ldr	r3, [r7, #32]
 8031572:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8031574:	687b      	ldr	r3, [r7, #4]
 8031576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031578:	f043 0204 	orr.w	r2, r3, #4
 803157c:	687b      	ldr	r3, [r7, #4]
 803157e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8031580:	687b      	ldr	r3, [r7, #4]
 8031582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031584:	f003 031f 	and.w	r3, r3, #31
 8031588:	2210      	movs	r2, #16
 803158a:	409a      	lsls	r2, r3
 803158c:	69bb      	ldr	r3, [r7, #24]
 803158e:	4013      	ands	r3, r2
 8031590:	2b00      	cmp	r3, #0
 8031592:	f000 80a6 	beq.w	80316e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8031596:	687b      	ldr	r3, [r7, #4]
 8031598:	681b      	ldr	r3, [r3, #0]
 803159a:	4a85      	ldr	r2, [pc, #532]	; (80317b0 <HAL_DMA_IRQHandler+0x690>)
 803159c:	4293      	cmp	r3, r2
 803159e:	d04a      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 80315a0:	687b      	ldr	r3, [r7, #4]
 80315a2:	681b      	ldr	r3, [r3, #0]
 80315a4:	4a83      	ldr	r2, [pc, #524]	; (80317b4 <HAL_DMA_IRQHandler+0x694>)
 80315a6:	4293      	cmp	r3, r2
 80315a8:	d045      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 80315aa:	687b      	ldr	r3, [r7, #4]
 80315ac:	681b      	ldr	r3, [r3, #0]
 80315ae:	4a82      	ldr	r2, [pc, #520]	; (80317b8 <HAL_DMA_IRQHandler+0x698>)
 80315b0:	4293      	cmp	r3, r2
 80315b2:	d040      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 80315b4:	687b      	ldr	r3, [r7, #4]
 80315b6:	681b      	ldr	r3, [r3, #0]
 80315b8:	4a80      	ldr	r2, [pc, #512]	; (80317bc <HAL_DMA_IRQHandler+0x69c>)
 80315ba:	4293      	cmp	r3, r2
 80315bc:	d03b      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 80315be:	687b      	ldr	r3, [r7, #4]
 80315c0:	681b      	ldr	r3, [r3, #0]
 80315c2:	4a7f      	ldr	r2, [pc, #508]	; (80317c0 <HAL_DMA_IRQHandler+0x6a0>)
 80315c4:	4293      	cmp	r3, r2
 80315c6:	d036      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 80315c8:	687b      	ldr	r3, [r7, #4]
 80315ca:	681b      	ldr	r3, [r3, #0]
 80315cc:	4a7d      	ldr	r2, [pc, #500]	; (80317c4 <HAL_DMA_IRQHandler+0x6a4>)
 80315ce:	4293      	cmp	r3, r2
 80315d0:	d031      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 80315d2:	687b      	ldr	r3, [r7, #4]
 80315d4:	681b      	ldr	r3, [r3, #0]
 80315d6:	4a7c      	ldr	r2, [pc, #496]	; (80317c8 <HAL_DMA_IRQHandler+0x6a8>)
 80315d8:	4293      	cmp	r3, r2
 80315da:	d02c      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 80315dc:	687b      	ldr	r3, [r7, #4]
 80315de:	681b      	ldr	r3, [r3, #0]
 80315e0:	4a7a      	ldr	r2, [pc, #488]	; (80317cc <HAL_DMA_IRQHandler+0x6ac>)
 80315e2:	4293      	cmp	r3, r2
 80315e4:	d027      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 80315e6:	687b      	ldr	r3, [r7, #4]
 80315e8:	681b      	ldr	r3, [r3, #0]
 80315ea:	4a79      	ldr	r2, [pc, #484]	; (80317d0 <HAL_DMA_IRQHandler+0x6b0>)
 80315ec:	4293      	cmp	r3, r2
 80315ee:	d022      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 80315f0:	687b      	ldr	r3, [r7, #4]
 80315f2:	681b      	ldr	r3, [r3, #0]
 80315f4:	4a77      	ldr	r2, [pc, #476]	; (80317d4 <HAL_DMA_IRQHandler+0x6b4>)
 80315f6:	4293      	cmp	r3, r2
 80315f8:	d01d      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 80315fa:	687b      	ldr	r3, [r7, #4]
 80315fc:	681b      	ldr	r3, [r3, #0]
 80315fe:	4a76      	ldr	r2, [pc, #472]	; (80317d8 <HAL_DMA_IRQHandler+0x6b8>)
 8031600:	4293      	cmp	r3, r2
 8031602:	d018      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 8031604:	687b      	ldr	r3, [r7, #4]
 8031606:	681b      	ldr	r3, [r3, #0]
 8031608:	4a74      	ldr	r2, [pc, #464]	; (80317dc <HAL_DMA_IRQHandler+0x6bc>)
 803160a:	4293      	cmp	r3, r2
 803160c:	d013      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 803160e:	687b      	ldr	r3, [r7, #4]
 8031610:	681b      	ldr	r3, [r3, #0]
 8031612:	4a73      	ldr	r2, [pc, #460]	; (80317e0 <HAL_DMA_IRQHandler+0x6c0>)
 8031614:	4293      	cmp	r3, r2
 8031616:	d00e      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 8031618:	687b      	ldr	r3, [r7, #4]
 803161a:	681b      	ldr	r3, [r3, #0]
 803161c:	4a71      	ldr	r2, [pc, #452]	; (80317e4 <HAL_DMA_IRQHandler+0x6c4>)
 803161e:	4293      	cmp	r3, r2
 8031620:	d009      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 8031622:	687b      	ldr	r3, [r7, #4]
 8031624:	681b      	ldr	r3, [r3, #0]
 8031626:	4a70      	ldr	r2, [pc, #448]	; (80317e8 <HAL_DMA_IRQHandler+0x6c8>)
 8031628:	4293      	cmp	r3, r2
 803162a:	d004      	beq.n	8031636 <HAL_DMA_IRQHandler+0x516>
 803162c:	687b      	ldr	r3, [r7, #4]
 803162e:	681b      	ldr	r3, [r3, #0]
 8031630:	4a6e      	ldr	r2, [pc, #440]	; (80317ec <HAL_DMA_IRQHandler+0x6cc>)
 8031632:	4293      	cmp	r3, r2
 8031634:	d10a      	bne.n	803164c <HAL_DMA_IRQHandler+0x52c>
 8031636:	687b      	ldr	r3, [r7, #4]
 8031638:	681b      	ldr	r3, [r3, #0]
 803163a:	681b      	ldr	r3, [r3, #0]
 803163c:	f003 0308 	and.w	r3, r3, #8
 8031640:	2b00      	cmp	r3, #0
 8031642:	bf14      	ite	ne
 8031644:	2301      	movne	r3, #1
 8031646:	2300      	moveq	r3, #0
 8031648:	b2db      	uxtb	r3, r3
 803164a:	e009      	b.n	8031660 <HAL_DMA_IRQHandler+0x540>
 803164c:	687b      	ldr	r3, [r7, #4]
 803164e:	681b      	ldr	r3, [r3, #0]
 8031650:	681b      	ldr	r3, [r3, #0]
 8031652:	f003 0304 	and.w	r3, r3, #4
 8031656:	2b00      	cmp	r3, #0
 8031658:	bf14      	ite	ne
 803165a:	2301      	movne	r3, #1
 803165c:	2300      	moveq	r3, #0
 803165e:	b2db      	uxtb	r3, r3
 8031660:	2b00      	cmp	r3, #0
 8031662:	d03e      	beq.n	80316e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8031664:	687b      	ldr	r3, [r7, #4]
 8031666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031668:	f003 031f 	and.w	r3, r3, #31
 803166c:	2210      	movs	r2, #16
 803166e:	409a      	lsls	r2, r3
 8031670:	6a3b      	ldr	r3, [r7, #32]
 8031672:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8031674:	687b      	ldr	r3, [r7, #4]
 8031676:	681b      	ldr	r3, [r3, #0]
 8031678:	681b      	ldr	r3, [r3, #0]
 803167a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 803167e:	2b00      	cmp	r3, #0
 8031680:	d018      	beq.n	80316b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8031682:	687b      	ldr	r3, [r7, #4]
 8031684:	681b      	ldr	r3, [r3, #0]
 8031686:	681b      	ldr	r3, [r3, #0]
 8031688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 803168c:	2b00      	cmp	r3, #0
 803168e:	d108      	bne.n	80316a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8031690:	687b      	ldr	r3, [r7, #4]
 8031692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8031694:	2b00      	cmp	r3, #0
 8031696:	d024      	beq.n	80316e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8031698:	687b      	ldr	r3, [r7, #4]
 803169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803169c:	6878      	ldr	r0, [r7, #4]
 803169e:	4798      	blx	r3
 80316a0:	e01f      	b.n	80316e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80316a2:	687b      	ldr	r3, [r7, #4]
 80316a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80316a6:	2b00      	cmp	r3, #0
 80316a8:	d01b      	beq.n	80316e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80316aa:	687b      	ldr	r3, [r7, #4]
 80316ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80316ae:	6878      	ldr	r0, [r7, #4]
 80316b0:	4798      	blx	r3
 80316b2:	e016      	b.n	80316e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80316b4:	687b      	ldr	r3, [r7, #4]
 80316b6:	681b      	ldr	r3, [r3, #0]
 80316b8:	681b      	ldr	r3, [r3, #0]
 80316ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80316be:	2b00      	cmp	r3, #0
 80316c0:	d107      	bne.n	80316d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80316c2:	687b      	ldr	r3, [r7, #4]
 80316c4:	681b      	ldr	r3, [r3, #0]
 80316c6:	681a      	ldr	r2, [r3, #0]
 80316c8:	687b      	ldr	r3, [r7, #4]
 80316ca:	681b      	ldr	r3, [r3, #0]
 80316cc:	f022 0208 	bic.w	r2, r2, #8
 80316d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80316d2:	687b      	ldr	r3, [r7, #4]
 80316d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80316d6:	2b00      	cmp	r3, #0
 80316d8:	d003      	beq.n	80316e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80316da:	687b      	ldr	r3, [r7, #4]
 80316dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80316de:	6878      	ldr	r0, [r7, #4]
 80316e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80316e2:	687b      	ldr	r3, [r7, #4]
 80316e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80316e6:	f003 031f 	and.w	r3, r3, #31
 80316ea:	2220      	movs	r2, #32
 80316ec:	409a      	lsls	r2, r3
 80316ee:	69bb      	ldr	r3, [r7, #24]
 80316f0:	4013      	ands	r3, r2
 80316f2:	2b00      	cmp	r3, #0
 80316f4:	f000 8110 	beq.w	8031918 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80316f8:	687b      	ldr	r3, [r7, #4]
 80316fa:	681b      	ldr	r3, [r3, #0]
 80316fc:	4a2c      	ldr	r2, [pc, #176]	; (80317b0 <HAL_DMA_IRQHandler+0x690>)
 80316fe:	4293      	cmp	r3, r2
 8031700:	d04a      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 8031702:	687b      	ldr	r3, [r7, #4]
 8031704:	681b      	ldr	r3, [r3, #0]
 8031706:	4a2b      	ldr	r2, [pc, #172]	; (80317b4 <HAL_DMA_IRQHandler+0x694>)
 8031708:	4293      	cmp	r3, r2
 803170a:	d045      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 803170c:	687b      	ldr	r3, [r7, #4]
 803170e:	681b      	ldr	r3, [r3, #0]
 8031710:	4a29      	ldr	r2, [pc, #164]	; (80317b8 <HAL_DMA_IRQHandler+0x698>)
 8031712:	4293      	cmp	r3, r2
 8031714:	d040      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 8031716:	687b      	ldr	r3, [r7, #4]
 8031718:	681b      	ldr	r3, [r3, #0]
 803171a:	4a28      	ldr	r2, [pc, #160]	; (80317bc <HAL_DMA_IRQHandler+0x69c>)
 803171c:	4293      	cmp	r3, r2
 803171e:	d03b      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 8031720:	687b      	ldr	r3, [r7, #4]
 8031722:	681b      	ldr	r3, [r3, #0]
 8031724:	4a26      	ldr	r2, [pc, #152]	; (80317c0 <HAL_DMA_IRQHandler+0x6a0>)
 8031726:	4293      	cmp	r3, r2
 8031728:	d036      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 803172a:	687b      	ldr	r3, [r7, #4]
 803172c:	681b      	ldr	r3, [r3, #0]
 803172e:	4a25      	ldr	r2, [pc, #148]	; (80317c4 <HAL_DMA_IRQHandler+0x6a4>)
 8031730:	4293      	cmp	r3, r2
 8031732:	d031      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 8031734:	687b      	ldr	r3, [r7, #4]
 8031736:	681b      	ldr	r3, [r3, #0]
 8031738:	4a23      	ldr	r2, [pc, #140]	; (80317c8 <HAL_DMA_IRQHandler+0x6a8>)
 803173a:	4293      	cmp	r3, r2
 803173c:	d02c      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 803173e:	687b      	ldr	r3, [r7, #4]
 8031740:	681b      	ldr	r3, [r3, #0]
 8031742:	4a22      	ldr	r2, [pc, #136]	; (80317cc <HAL_DMA_IRQHandler+0x6ac>)
 8031744:	4293      	cmp	r3, r2
 8031746:	d027      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 8031748:	687b      	ldr	r3, [r7, #4]
 803174a:	681b      	ldr	r3, [r3, #0]
 803174c:	4a20      	ldr	r2, [pc, #128]	; (80317d0 <HAL_DMA_IRQHandler+0x6b0>)
 803174e:	4293      	cmp	r3, r2
 8031750:	d022      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 8031752:	687b      	ldr	r3, [r7, #4]
 8031754:	681b      	ldr	r3, [r3, #0]
 8031756:	4a1f      	ldr	r2, [pc, #124]	; (80317d4 <HAL_DMA_IRQHandler+0x6b4>)
 8031758:	4293      	cmp	r3, r2
 803175a:	d01d      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 803175c:	687b      	ldr	r3, [r7, #4]
 803175e:	681b      	ldr	r3, [r3, #0]
 8031760:	4a1d      	ldr	r2, [pc, #116]	; (80317d8 <HAL_DMA_IRQHandler+0x6b8>)
 8031762:	4293      	cmp	r3, r2
 8031764:	d018      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 8031766:	687b      	ldr	r3, [r7, #4]
 8031768:	681b      	ldr	r3, [r3, #0]
 803176a:	4a1c      	ldr	r2, [pc, #112]	; (80317dc <HAL_DMA_IRQHandler+0x6bc>)
 803176c:	4293      	cmp	r3, r2
 803176e:	d013      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 8031770:	687b      	ldr	r3, [r7, #4]
 8031772:	681b      	ldr	r3, [r3, #0]
 8031774:	4a1a      	ldr	r2, [pc, #104]	; (80317e0 <HAL_DMA_IRQHandler+0x6c0>)
 8031776:	4293      	cmp	r3, r2
 8031778:	d00e      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 803177a:	687b      	ldr	r3, [r7, #4]
 803177c:	681b      	ldr	r3, [r3, #0]
 803177e:	4a19      	ldr	r2, [pc, #100]	; (80317e4 <HAL_DMA_IRQHandler+0x6c4>)
 8031780:	4293      	cmp	r3, r2
 8031782:	d009      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 8031784:	687b      	ldr	r3, [r7, #4]
 8031786:	681b      	ldr	r3, [r3, #0]
 8031788:	4a17      	ldr	r2, [pc, #92]	; (80317e8 <HAL_DMA_IRQHandler+0x6c8>)
 803178a:	4293      	cmp	r3, r2
 803178c:	d004      	beq.n	8031798 <HAL_DMA_IRQHandler+0x678>
 803178e:	687b      	ldr	r3, [r7, #4]
 8031790:	681b      	ldr	r3, [r3, #0]
 8031792:	4a16      	ldr	r2, [pc, #88]	; (80317ec <HAL_DMA_IRQHandler+0x6cc>)
 8031794:	4293      	cmp	r3, r2
 8031796:	d12b      	bne.n	80317f0 <HAL_DMA_IRQHandler+0x6d0>
 8031798:	687b      	ldr	r3, [r7, #4]
 803179a:	681b      	ldr	r3, [r3, #0]
 803179c:	681b      	ldr	r3, [r3, #0]
 803179e:	f003 0310 	and.w	r3, r3, #16
 80317a2:	2b00      	cmp	r3, #0
 80317a4:	bf14      	ite	ne
 80317a6:	2301      	movne	r3, #1
 80317a8:	2300      	moveq	r3, #0
 80317aa:	b2db      	uxtb	r3, r3
 80317ac:	e02a      	b.n	8031804 <HAL_DMA_IRQHandler+0x6e4>
 80317ae:	bf00      	nop
 80317b0:	40020010 	.word	0x40020010
 80317b4:	40020028 	.word	0x40020028
 80317b8:	40020040 	.word	0x40020040
 80317bc:	40020058 	.word	0x40020058
 80317c0:	40020070 	.word	0x40020070
 80317c4:	40020088 	.word	0x40020088
 80317c8:	400200a0 	.word	0x400200a0
 80317cc:	400200b8 	.word	0x400200b8
 80317d0:	40020410 	.word	0x40020410
 80317d4:	40020428 	.word	0x40020428
 80317d8:	40020440 	.word	0x40020440
 80317dc:	40020458 	.word	0x40020458
 80317e0:	40020470 	.word	0x40020470
 80317e4:	40020488 	.word	0x40020488
 80317e8:	400204a0 	.word	0x400204a0
 80317ec:	400204b8 	.word	0x400204b8
 80317f0:	687b      	ldr	r3, [r7, #4]
 80317f2:	681b      	ldr	r3, [r3, #0]
 80317f4:	681b      	ldr	r3, [r3, #0]
 80317f6:	f003 0302 	and.w	r3, r3, #2
 80317fa:	2b00      	cmp	r3, #0
 80317fc:	bf14      	ite	ne
 80317fe:	2301      	movne	r3, #1
 8031800:	2300      	moveq	r3, #0
 8031802:	b2db      	uxtb	r3, r3
 8031804:	2b00      	cmp	r3, #0
 8031806:	f000 8087 	beq.w	8031918 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 803180a:	687b      	ldr	r3, [r7, #4]
 803180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803180e:	f003 031f 	and.w	r3, r3, #31
 8031812:	2220      	movs	r2, #32
 8031814:	409a      	lsls	r2, r3
 8031816:	6a3b      	ldr	r3, [r7, #32]
 8031818:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 803181a:	687b      	ldr	r3, [r7, #4]
 803181c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8031820:	b2db      	uxtb	r3, r3
 8031822:	2b04      	cmp	r3, #4
 8031824:	d139      	bne.n	803189a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8031826:	687b      	ldr	r3, [r7, #4]
 8031828:	681b      	ldr	r3, [r3, #0]
 803182a:	681a      	ldr	r2, [r3, #0]
 803182c:	687b      	ldr	r3, [r7, #4]
 803182e:	681b      	ldr	r3, [r3, #0]
 8031830:	f022 0216 	bic.w	r2, r2, #22
 8031834:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8031836:	687b      	ldr	r3, [r7, #4]
 8031838:	681b      	ldr	r3, [r3, #0]
 803183a:	695a      	ldr	r2, [r3, #20]
 803183c:	687b      	ldr	r3, [r7, #4]
 803183e:	681b      	ldr	r3, [r3, #0]
 8031840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8031844:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8031846:	687b      	ldr	r3, [r7, #4]
 8031848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803184a:	2b00      	cmp	r3, #0
 803184c:	d103      	bne.n	8031856 <HAL_DMA_IRQHandler+0x736>
 803184e:	687b      	ldr	r3, [r7, #4]
 8031850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031852:	2b00      	cmp	r3, #0
 8031854:	d007      	beq.n	8031866 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8031856:	687b      	ldr	r3, [r7, #4]
 8031858:	681b      	ldr	r3, [r3, #0]
 803185a:	681a      	ldr	r2, [r3, #0]
 803185c:	687b      	ldr	r3, [r7, #4]
 803185e:	681b      	ldr	r3, [r3, #0]
 8031860:	f022 0208 	bic.w	r2, r2, #8
 8031864:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8031866:	687b      	ldr	r3, [r7, #4]
 8031868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803186a:	f003 031f 	and.w	r3, r3, #31
 803186e:	223f      	movs	r2, #63	; 0x3f
 8031870:	409a      	lsls	r2, r3
 8031872:	6a3b      	ldr	r3, [r7, #32]
 8031874:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8031876:	687b      	ldr	r3, [r7, #4]
 8031878:	2201      	movs	r2, #1
 803187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 803187e:	687b      	ldr	r3, [r7, #4]
 8031880:	2200      	movs	r2, #0
 8031882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8031886:	687b      	ldr	r3, [r7, #4]
 8031888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803188a:	2b00      	cmp	r3, #0
 803188c:	f000 834a 	beq.w	8031f24 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8031890:	687b      	ldr	r3, [r7, #4]
 8031892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031894:	6878      	ldr	r0, [r7, #4]
 8031896:	4798      	blx	r3
          }
          return;
 8031898:	e344      	b.n	8031f24 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 803189a:	687b      	ldr	r3, [r7, #4]
 803189c:	681b      	ldr	r3, [r3, #0]
 803189e:	681b      	ldr	r3, [r3, #0]
 80318a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80318a4:	2b00      	cmp	r3, #0
 80318a6:	d018      	beq.n	80318da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80318a8:	687b      	ldr	r3, [r7, #4]
 80318aa:	681b      	ldr	r3, [r3, #0]
 80318ac:	681b      	ldr	r3, [r3, #0]
 80318ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80318b2:	2b00      	cmp	r3, #0
 80318b4:	d108      	bne.n	80318c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80318b6:	687b      	ldr	r3, [r7, #4]
 80318b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80318ba:	2b00      	cmp	r3, #0
 80318bc:	d02c      	beq.n	8031918 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80318be:	687b      	ldr	r3, [r7, #4]
 80318c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80318c2:	6878      	ldr	r0, [r7, #4]
 80318c4:	4798      	blx	r3
 80318c6:	e027      	b.n	8031918 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80318c8:	687b      	ldr	r3, [r7, #4]
 80318ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80318cc:	2b00      	cmp	r3, #0
 80318ce:	d023      	beq.n	8031918 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80318d0:	687b      	ldr	r3, [r7, #4]
 80318d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80318d4:	6878      	ldr	r0, [r7, #4]
 80318d6:	4798      	blx	r3
 80318d8:	e01e      	b.n	8031918 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80318da:	687b      	ldr	r3, [r7, #4]
 80318dc:	681b      	ldr	r3, [r3, #0]
 80318de:	681b      	ldr	r3, [r3, #0]
 80318e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80318e4:	2b00      	cmp	r3, #0
 80318e6:	d10f      	bne.n	8031908 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80318e8:	687b      	ldr	r3, [r7, #4]
 80318ea:	681b      	ldr	r3, [r3, #0]
 80318ec:	681a      	ldr	r2, [r3, #0]
 80318ee:	687b      	ldr	r3, [r7, #4]
 80318f0:	681b      	ldr	r3, [r3, #0]
 80318f2:	f022 0210 	bic.w	r2, r2, #16
 80318f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80318f8:	687b      	ldr	r3, [r7, #4]
 80318fa:	2201      	movs	r2, #1
 80318fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8031900:	687b      	ldr	r3, [r7, #4]
 8031902:	2200      	movs	r2, #0
 8031904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8031908:	687b      	ldr	r3, [r7, #4]
 803190a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803190c:	2b00      	cmp	r3, #0
 803190e:	d003      	beq.n	8031918 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8031910:	687b      	ldr	r3, [r7, #4]
 8031912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031914:	6878      	ldr	r0, [r7, #4]
 8031916:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8031918:	687b      	ldr	r3, [r7, #4]
 803191a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803191c:	2b00      	cmp	r3, #0
 803191e:	f000 8306 	beq.w	8031f2e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8031922:	687b      	ldr	r3, [r7, #4]
 8031924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031926:	f003 0301 	and.w	r3, r3, #1
 803192a:	2b00      	cmp	r3, #0
 803192c:	f000 8088 	beq.w	8031a40 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8031930:	687b      	ldr	r3, [r7, #4]
 8031932:	2204      	movs	r2, #4
 8031934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8031938:	687b      	ldr	r3, [r7, #4]
 803193a:	681b      	ldr	r3, [r3, #0]
 803193c:	4a7a      	ldr	r2, [pc, #488]	; (8031b28 <HAL_DMA_IRQHandler+0xa08>)
 803193e:	4293      	cmp	r3, r2
 8031940:	d04a      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 8031942:	687b      	ldr	r3, [r7, #4]
 8031944:	681b      	ldr	r3, [r3, #0]
 8031946:	4a79      	ldr	r2, [pc, #484]	; (8031b2c <HAL_DMA_IRQHandler+0xa0c>)
 8031948:	4293      	cmp	r3, r2
 803194a:	d045      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 803194c:	687b      	ldr	r3, [r7, #4]
 803194e:	681b      	ldr	r3, [r3, #0]
 8031950:	4a77      	ldr	r2, [pc, #476]	; (8031b30 <HAL_DMA_IRQHandler+0xa10>)
 8031952:	4293      	cmp	r3, r2
 8031954:	d040      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 8031956:	687b      	ldr	r3, [r7, #4]
 8031958:	681b      	ldr	r3, [r3, #0]
 803195a:	4a76      	ldr	r2, [pc, #472]	; (8031b34 <HAL_DMA_IRQHandler+0xa14>)
 803195c:	4293      	cmp	r3, r2
 803195e:	d03b      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 8031960:	687b      	ldr	r3, [r7, #4]
 8031962:	681b      	ldr	r3, [r3, #0]
 8031964:	4a74      	ldr	r2, [pc, #464]	; (8031b38 <HAL_DMA_IRQHandler+0xa18>)
 8031966:	4293      	cmp	r3, r2
 8031968:	d036      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 803196a:	687b      	ldr	r3, [r7, #4]
 803196c:	681b      	ldr	r3, [r3, #0]
 803196e:	4a73      	ldr	r2, [pc, #460]	; (8031b3c <HAL_DMA_IRQHandler+0xa1c>)
 8031970:	4293      	cmp	r3, r2
 8031972:	d031      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 8031974:	687b      	ldr	r3, [r7, #4]
 8031976:	681b      	ldr	r3, [r3, #0]
 8031978:	4a71      	ldr	r2, [pc, #452]	; (8031b40 <HAL_DMA_IRQHandler+0xa20>)
 803197a:	4293      	cmp	r3, r2
 803197c:	d02c      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 803197e:	687b      	ldr	r3, [r7, #4]
 8031980:	681b      	ldr	r3, [r3, #0]
 8031982:	4a70      	ldr	r2, [pc, #448]	; (8031b44 <HAL_DMA_IRQHandler+0xa24>)
 8031984:	4293      	cmp	r3, r2
 8031986:	d027      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 8031988:	687b      	ldr	r3, [r7, #4]
 803198a:	681b      	ldr	r3, [r3, #0]
 803198c:	4a6e      	ldr	r2, [pc, #440]	; (8031b48 <HAL_DMA_IRQHandler+0xa28>)
 803198e:	4293      	cmp	r3, r2
 8031990:	d022      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 8031992:	687b      	ldr	r3, [r7, #4]
 8031994:	681b      	ldr	r3, [r3, #0]
 8031996:	4a6d      	ldr	r2, [pc, #436]	; (8031b4c <HAL_DMA_IRQHandler+0xa2c>)
 8031998:	4293      	cmp	r3, r2
 803199a:	d01d      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 803199c:	687b      	ldr	r3, [r7, #4]
 803199e:	681b      	ldr	r3, [r3, #0]
 80319a0:	4a6b      	ldr	r2, [pc, #428]	; (8031b50 <HAL_DMA_IRQHandler+0xa30>)
 80319a2:	4293      	cmp	r3, r2
 80319a4:	d018      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 80319a6:	687b      	ldr	r3, [r7, #4]
 80319a8:	681b      	ldr	r3, [r3, #0]
 80319aa:	4a6a      	ldr	r2, [pc, #424]	; (8031b54 <HAL_DMA_IRQHandler+0xa34>)
 80319ac:	4293      	cmp	r3, r2
 80319ae:	d013      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 80319b0:	687b      	ldr	r3, [r7, #4]
 80319b2:	681b      	ldr	r3, [r3, #0]
 80319b4:	4a68      	ldr	r2, [pc, #416]	; (8031b58 <HAL_DMA_IRQHandler+0xa38>)
 80319b6:	4293      	cmp	r3, r2
 80319b8:	d00e      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 80319ba:	687b      	ldr	r3, [r7, #4]
 80319bc:	681b      	ldr	r3, [r3, #0]
 80319be:	4a67      	ldr	r2, [pc, #412]	; (8031b5c <HAL_DMA_IRQHandler+0xa3c>)
 80319c0:	4293      	cmp	r3, r2
 80319c2:	d009      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 80319c4:	687b      	ldr	r3, [r7, #4]
 80319c6:	681b      	ldr	r3, [r3, #0]
 80319c8:	4a65      	ldr	r2, [pc, #404]	; (8031b60 <HAL_DMA_IRQHandler+0xa40>)
 80319ca:	4293      	cmp	r3, r2
 80319cc:	d004      	beq.n	80319d8 <HAL_DMA_IRQHandler+0x8b8>
 80319ce:	687b      	ldr	r3, [r7, #4]
 80319d0:	681b      	ldr	r3, [r3, #0]
 80319d2:	4a64      	ldr	r2, [pc, #400]	; (8031b64 <HAL_DMA_IRQHandler+0xa44>)
 80319d4:	4293      	cmp	r3, r2
 80319d6:	d108      	bne.n	80319ea <HAL_DMA_IRQHandler+0x8ca>
 80319d8:	687b      	ldr	r3, [r7, #4]
 80319da:	681b      	ldr	r3, [r3, #0]
 80319dc:	681a      	ldr	r2, [r3, #0]
 80319de:	687b      	ldr	r3, [r7, #4]
 80319e0:	681b      	ldr	r3, [r3, #0]
 80319e2:	f022 0201 	bic.w	r2, r2, #1
 80319e6:	601a      	str	r2, [r3, #0]
 80319e8:	e007      	b.n	80319fa <HAL_DMA_IRQHandler+0x8da>
 80319ea:	687b      	ldr	r3, [r7, #4]
 80319ec:	681b      	ldr	r3, [r3, #0]
 80319ee:	681a      	ldr	r2, [r3, #0]
 80319f0:	687b      	ldr	r3, [r7, #4]
 80319f2:	681b      	ldr	r3, [r3, #0]
 80319f4:	f022 0201 	bic.w	r2, r2, #1
 80319f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80319fa:	68fb      	ldr	r3, [r7, #12]
 80319fc:	3301      	adds	r3, #1
 80319fe:	60fb      	str	r3, [r7, #12]
 8031a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8031a02:	429a      	cmp	r2, r3
 8031a04:	d307      	bcc.n	8031a16 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8031a06:	687b      	ldr	r3, [r7, #4]
 8031a08:	681b      	ldr	r3, [r3, #0]
 8031a0a:	681b      	ldr	r3, [r3, #0]
 8031a0c:	f003 0301 	and.w	r3, r3, #1
 8031a10:	2b00      	cmp	r3, #0
 8031a12:	d1f2      	bne.n	80319fa <HAL_DMA_IRQHandler+0x8da>
 8031a14:	e000      	b.n	8031a18 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8031a16:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8031a18:	687b      	ldr	r3, [r7, #4]
 8031a1a:	681b      	ldr	r3, [r3, #0]
 8031a1c:	681b      	ldr	r3, [r3, #0]
 8031a1e:	f003 0301 	and.w	r3, r3, #1
 8031a22:	2b00      	cmp	r3, #0
 8031a24:	d004      	beq.n	8031a30 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8031a26:	687b      	ldr	r3, [r7, #4]
 8031a28:	2203      	movs	r2, #3
 8031a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8031a2e:	e003      	b.n	8031a38 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8031a30:	687b      	ldr	r3, [r7, #4]
 8031a32:	2201      	movs	r2, #1
 8031a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8031a38:	687b      	ldr	r3, [r7, #4]
 8031a3a:	2200      	movs	r2, #0
 8031a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8031a40:	687b      	ldr	r3, [r7, #4]
 8031a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031a44:	2b00      	cmp	r3, #0
 8031a46:	f000 8272 	beq.w	8031f2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8031a4a:	687b      	ldr	r3, [r7, #4]
 8031a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031a4e:	6878      	ldr	r0, [r7, #4]
 8031a50:	4798      	blx	r3
 8031a52:	e26c      	b.n	8031f2e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8031a54:	687b      	ldr	r3, [r7, #4]
 8031a56:	681b      	ldr	r3, [r3, #0]
 8031a58:	4a43      	ldr	r2, [pc, #268]	; (8031b68 <HAL_DMA_IRQHandler+0xa48>)
 8031a5a:	4293      	cmp	r3, r2
 8031a5c:	d022      	beq.n	8031aa4 <HAL_DMA_IRQHandler+0x984>
 8031a5e:	687b      	ldr	r3, [r7, #4]
 8031a60:	681b      	ldr	r3, [r3, #0]
 8031a62:	4a42      	ldr	r2, [pc, #264]	; (8031b6c <HAL_DMA_IRQHandler+0xa4c>)
 8031a64:	4293      	cmp	r3, r2
 8031a66:	d01d      	beq.n	8031aa4 <HAL_DMA_IRQHandler+0x984>
 8031a68:	687b      	ldr	r3, [r7, #4]
 8031a6a:	681b      	ldr	r3, [r3, #0]
 8031a6c:	4a40      	ldr	r2, [pc, #256]	; (8031b70 <HAL_DMA_IRQHandler+0xa50>)
 8031a6e:	4293      	cmp	r3, r2
 8031a70:	d018      	beq.n	8031aa4 <HAL_DMA_IRQHandler+0x984>
 8031a72:	687b      	ldr	r3, [r7, #4]
 8031a74:	681b      	ldr	r3, [r3, #0]
 8031a76:	4a3f      	ldr	r2, [pc, #252]	; (8031b74 <HAL_DMA_IRQHandler+0xa54>)
 8031a78:	4293      	cmp	r3, r2
 8031a7a:	d013      	beq.n	8031aa4 <HAL_DMA_IRQHandler+0x984>
 8031a7c:	687b      	ldr	r3, [r7, #4]
 8031a7e:	681b      	ldr	r3, [r3, #0]
 8031a80:	4a3d      	ldr	r2, [pc, #244]	; (8031b78 <HAL_DMA_IRQHandler+0xa58>)
 8031a82:	4293      	cmp	r3, r2
 8031a84:	d00e      	beq.n	8031aa4 <HAL_DMA_IRQHandler+0x984>
 8031a86:	687b      	ldr	r3, [r7, #4]
 8031a88:	681b      	ldr	r3, [r3, #0]
 8031a8a:	4a3c      	ldr	r2, [pc, #240]	; (8031b7c <HAL_DMA_IRQHandler+0xa5c>)
 8031a8c:	4293      	cmp	r3, r2
 8031a8e:	d009      	beq.n	8031aa4 <HAL_DMA_IRQHandler+0x984>
 8031a90:	687b      	ldr	r3, [r7, #4]
 8031a92:	681b      	ldr	r3, [r3, #0]
 8031a94:	4a3a      	ldr	r2, [pc, #232]	; (8031b80 <HAL_DMA_IRQHandler+0xa60>)
 8031a96:	4293      	cmp	r3, r2
 8031a98:	d004      	beq.n	8031aa4 <HAL_DMA_IRQHandler+0x984>
 8031a9a:	687b      	ldr	r3, [r7, #4]
 8031a9c:	681b      	ldr	r3, [r3, #0]
 8031a9e:	4a39      	ldr	r2, [pc, #228]	; (8031b84 <HAL_DMA_IRQHandler+0xa64>)
 8031aa0:	4293      	cmp	r3, r2
 8031aa2:	d101      	bne.n	8031aa8 <HAL_DMA_IRQHandler+0x988>
 8031aa4:	2301      	movs	r3, #1
 8031aa6:	e000      	b.n	8031aaa <HAL_DMA_IRQHandler+0x98a>
 8031aa8:	2300      	movs	r3, #0
 8031aaa:	2b00      	cmp	r3, #0
 8031aac:	f000 823f 	beq.w	8031f2e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8031ab0:	687b      	ldr	r3, [r7, #4]
 8031ab2:	681b      	ldr	r3, [r3, #0]
 8031ab4:	681b      	ldr	r3, [r3, #0]
 8031ab6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8031ab8:	687b      	ldr	r3, [r7, #4]
 8031aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031abc:	f003 031f 	and.w	r3, r3, #31
 8031ac0:	2204      	movs	r2, #4
 8031ac2:	409a      	lsls	r2, r3
 8031ac4:	697b      	ldr	r3, [r7, #20]
 8031ac6:	4013      	ands	r3, r2
 8031ac8:	2b00      	cmp	r3, #0
 8031aca:	f000 80cd 	beq.w	8031c68 <HAL_DMA_IRQHandler+0xb48>
 8031ace:	693b      	ldr	r3, [r7, #16]
 8031ad0:	f003 0304 	and.w	r3, r3, #4
 8031ad4:	2b00      	cmp	r3, #0
 8031ad6:	f000 80c7 	beq.w	8031c68 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8031ada:	687b      	ldr	r3, [r7, #4]
 8031adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031ade:	f003 031f 	and.w	r3, r3, #31
 8031ae2:	2204      	movs	r2, #4
 8031ae4:	409a      	lsls	r2, r3
 8031ae6:	69fb      	ldr	r3, [r7, #28]
 8031ae8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031aea:	693b      	ldr	r3, [r7, #16]
 8031aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8031af0:	2b00      	cmp	r3, #0
 8031af2:	d049      	beq.n	8031b88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8031af4:	693b      	ldr	r3, [r7, #16]
 8031af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8031afa:	2b00      	cmp	r3, #0
 8031afc:	d109      	bne.n	8031b12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8031afe:	687b      	ldr	r3, [r7, #4]
 8031b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031b02:	2b00      	cmp	r3, #0
 8031b04:	f000 8210 	beq.w	8031f28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8031b08:	687b      	ldr	r3, [r7, #4]
 8031b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031b0c:	6878      	ldr	r0, [r7, #4]
 8031b0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031b10:	e20a      	b.n	8031f28 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8031b12:	687b      	ldr	r3, [r7, #4]
 8031b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8031b16:	2b00      	cmp	r3, #0
 8031b18:	f000 8206 	beq.w	8031f28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8031b1c:	687b      	ldr	r3, [r7, #4]
 8031b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8031b20:	6878      	ldr	r0, [r7, #4]
 8031b22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031b24:	e200      	b.n	8031f28 <HAL_DMA_IRQHandler+0xe08>
 8031b26:	bf00      	nop
 8031b28:	40020010 	.word	0x40020010
 8031b2c:	40020028 	.word	0x40020028
 8031b30:	40020040 	.word	0x40020040
 8031b34:	40020058 	.word	0x40020058
 8031b38:	40020070 	.word	0x40020070
 8031b3c:	40020088 	.word	0x40020088
 8031b40:	400200a0 	.word	0x400200a0
 8031b44:	400200b8 	.word	0x400200b8
 8031b48:	40020410 	.word	0x40020410
 8031b4c:	40020428 	.word	0x40020428
 8031b50:	40020440 	.word	0x40020440
 8031b54:	40020458 	.word	0x40020458
 8031b58:	40020470 	.word	0x40020470
 8031b5c:	40020488 	.word	0x40020488
 8031b60:	400204a0 	.word	0x400204a0
 8031b64:	400204b8 	.word	0x400204b8
 8031b68:	58025408 	.word	0x58025408
 8031b6c:	5802541c 	.word	0x5802541c
 8031b70:	58025430 	.word	0x58025430
 8031b74:	58025444 	.word	0x58025444
 8031b78:	58025458 	.word	0x58025458
 8031b7c:	5802546c 	.word	0x5802546c
 8031b80:	58025480 	.word	0x58025480
 8031b84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8031b88:	693b      	ldr	r3, [r7, #16]
 8031b8a:	f003 0320 	and.w	r3, r3, #32
 8031b8e:	2b00      	cmp	r3, #0
 8031b90:	d160      	bne.n	8031c54 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8031b92:	687b      	ldr	r3, [r7, #4]
 8031b94:	681b      	ldr	r3, [r3, #0]
 8031b96:	4a7f      	ldr	r2, [pc, #508]	; (8031d94 <HAL_DMA_IRQHandler+0xc74>)
 8031b98:	4293      	cmp	r3, r2
 8031b9a:	d04a      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031b9c:	687b      	ldr	r3, [r7, #4]
 8031b9e:	681b      	ldr	r3, [r3, #0]
 8031ba0:	4a7d      	ldr	r2, [pc, #500]	; (8031d98 <HAL_DMA_IRQHandler+0xc78>)
 8031ba2:	4293      	cmp	r3, r2
 8031ba4:	d045      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031ba6:	687b      	ldr	r3, [r7, #4]
 8031ba8:	681b      	ldr	r3, [r3, #0]
 8031baa:	4a7c      	ldr	r2, [pc, #496]	; (8031d9c <HAL_DMA_IRQHandler+0xc7c>)
 8031bac:	4293      	cmp	r3, r2
 8031bae:	d040      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031bb0:	687b      	ldr	r3, [r7, #4]
 8031bb2:	681b      	ldr	r3, [r3, #0]
 8031bb4:	4a7a      	ldr	r2, [pc, #488]	; (8031da0 <HAL_DMA_IRQHandler+0xc80>)
 8031bb6:	4293      	cmp	r3, r2
 8031bb8:	d03b      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031bba:	687b      	ldr	r3, [r7, #4]
 8031bbc:	681b      	ldr	r3, [r3, #0]
 8031bbe:	4a79      	ldr	r2, [pc, #484]	; (8031da4 <HAL_DMA_IRQHandler+0xc84>)
 8031bc0:	4293      	cmp	r3, r2
 8031bc2:	d036      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031bc4:	687b      	ldr	r3, [r7, #4]
 8031bc6:	681b      	ldr	r3, [r3, #0]
 8031bc8:	4a77      	ldr	r2, [pc, #476]	; (8031da8 <HAL_DMA_IRQHandler+0xc88>)
 8031bca:	4293      	cmp	r3, r2
 8031bcc:	d031      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031bce:	687b      	ldr	r3, [r7, #4]
 8031bd0:	681b      	ldr	r3, [r3, #0]
 8031bd2:	4a76      	ldr	r2, [pc, #472]	; (8031dac <HAL_DMA_IRQHandler+0xc8c>)
 8031bd4:	4293      	cmp	r3, r2
 8031bd6:	d02c      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031bd8:	687b      	ldr	r3, [r7, #4]
 8031bda:	681b      	ldr	r3, [r3, #0]
 8031bdc:	4a74      	ldr	r2, [pc, #464]	; (8031db0 <HAL_DMA_IRQHandler+0xc90>)
 8031bde:	4293      	cmp	r3, r2
 8031be0:	d027      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031be2:	687b      	ldr	r3, [r7, #4]
 8031be4:	681b      	ldr	r3, [r3, #0]
 8031be6:	4a73      	ldr	r2, [pc, #460]	; (8031db4 <HAL_DMA_IRQHandler+0xc94>)
 8031be8:	4293      	cmp	r3, r2
 8031bea:	d022      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031bec:	687b      	ldr	r3, [r7, #4]
 8031bee:	681b      	ldr	r3, [r3, #0]
 8031bf0:	4a71      	ldr	r2, [pc, #452]	; (8031db8 <HAL_DMA_IRQHandler+0xc98>)
 8031bf2:	4293      	cmp	r3, r2
 8031bf4:	d01d      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031bf6:	687b      	ldr	r3, [r7, #4]
 8031bf8:	681b      	ldr	r3, [r3, #0]
 8031bfa:	4a70      	ldr	r2, [pc, #448]	; (8031dbc <HAL_DMA_IRQHandler+0xc9c>)
 8031bfc:	4293      	cmp	r3, r2
 8031bfe:	d018      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031c00:	687b      	ldr	r3, [r7, #4]
 8031c02:	681b      	ldr	r3, [r3, #0]
 8031c04:	4a6e      	ldr	r2, [pc, #440]	; (8031dc0 <HAL_DMA_IRQHandler+0xca0>)
 8031c06:	4293      	cmp	r3, r2
 8031c08:	d013      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031c0a:	687b      	ldr	r3, [r7, #4]
 8031c0c:	681b      	ldr	r3, [r3, #0]
 8031c0e:	4a6d      	ldr	r2, [pc, #436]	; (8031dc4 <HAL_DMA_IRQHandler+0xca4>)
 8031c10:	4293      	cmp	r3, r2
 8031c12:	d00e      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031c14:	687b      	ldr	r3, [r7, #4]
 8031c16:	681b      	ldr	r3, [r3, #0]
 8031c18:	4a6b      	ldr	r2, [pc, #428]	; (8031dc8 <HAL_DMA_IRQHandler+0xca8>)
 8031c1a:	4293      	cmp	r3, r2
 8031c1c:	d009      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031c1e:	687b      	ldr	r3, [r7, #4]
 8031c20:	681b      	ldr	r3, [r3, #0]
 8031c22:	4a6a      	ldr	r2, [pc, #424]	; (8031dcc <HAL_DMA_IRQHandler+0xcac>)
 8031c24:	4293      	cmp	r3, r2
 8031c26:	d004      	beq.n	8031c32 <HAL_DMA_IRQHandler+0xb12>
 8031c28:	687b      	ldr	r3, [r7, #4]
 8031c2a:	681b      	ldr	r3, [r3, #0]
 8031c2c:	4a68      	ldr	r2, [pc, #416]	; (8031dd0 <HAL_DMA_IRQHandler+0xcb0>)
 8031c2e:	4293      	cmp	r3, r2
 8031c30:	d108      	bne.n	8031c44 <HAL_DMA_IRQHandler+0xb24>
 8031c32:	687b      	ldr	r3, [r7, #4]
 8031c34:	681b      	ldr	r3, [r3, #0]
 8031c36:	681a      	ldr	r2, [r3, #0]
 8031c38:	687b      	ldr	r3, [r7, #4]
 8031c3a:	681b      	ldr	r3, [r3, #0]
 8031c3c:	f022 0208 	bic.w	r2, r2, #8
 8031c40:	601a      	str	r2, [r3, #0]
 8031c42:	e007      	b.n	8031c54 <HAL_DMA_IRQHandler+0xb34>
 8031c44:	687b      	ldr	r3, [r7, #4]
 8031c46:	681b      	ldr	r3, [r3, #0]
 8031c48:	681a      	ldr	r2, [r3, #0]
 8031c4a:	687b      	ldr	r3, [r7, #4]
 8031c4c:	681b      	ldr	r3, [r3, #0]
 8031c4e:	f022 0204 	bic.w	r2, r2, #4
 8031c52:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8031c54:	687b      	ldr	r3, [r7, #4]
 8031c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8031c58:	2b00      	cmp	r3, #0
 8031c5a:	f000 8165 	beq.w	8031f28 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8031c5e:	687b      	ldr	r3, [r7, #4]
 8031c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8031c62:	6878      	ldr	r0, [r7, #4]
 8031c64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031c66:	e15f      	b.n	8031f28 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8031c68:	687b      	ldr	r3, [r7, #4]
 8031c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031c6c:	f003 031f 	and.w	r3, r3, #31
 8031c70:	2202      	movs	r2, #2
 8031c72:	409a      	lsls	r2, r3
 8031c74:	697b      	ldr	r3, [r7, #20]
 8031c76:	4013      	ands	r3, r2
 8031c78:	2b00      	cmp	r3, #0
 8031c7a:	f000 80c5 	beq.w	8031e08 <HAL_DMA_IRQHandler+0xce8>
 8031c7e:	693b      	ldr	r3, [r7, #16]
 8031c80:	f003 0302 	and.w	r3, r3, #2
 8031c84:	2b00      	cmp	r3, #0
 8031c86:	f000 80bf 	beq.w	8031e08 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8031c8a:	687b      	ldr	r3, [r7, #4]
 8031c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031c8e:	f003 031f 	and.w	r3, r3, #31
 8031c92:	2202      	movs	r2, #2
 8031c94:	409a      	lsls	r2, r3
 8031c96:	69fb      	ldr	r3, [r7, #28]
 8031c98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031c9a:	693b      	ldr	r3, [r7, #16]
 8031c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8031ca0:	2b00      	cmp	r3, #0
 8031ca2:	d018      	beq.n	8031cd6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8031ca4:	693b      	ldr	r3, [r7, #16]
 8031ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8031caa:	2b00      	cmp	r3, #0
 8031cac:	d109      	bne.n	8031cc2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8031cae:	687b      	ldr	r3, [r7, #4]
 8031cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031cb2:	2b00      	cmp	r3, #0
 8031cb4:	f000 813a 	beq.w	8031f2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8031cb8:	687b      	ldr	r3, [r7, #4]
 8031cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031cbc:	6878      	ldr	r0, [r7, #4]
 8031cbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031cc0:	e134      	b.n	8031f2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8031cc2:	687b      	ldr	r3, [r7, #4]
 8031cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031cc6:	2b00      	cmp	r3, #0
 8031cc8:	f000 8130 	beq.w	8031f2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8031ccc:	687b      	ldr	r3, [r7, #4]
 8031cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031cd0:	6878      	ldr	r0, [r7, #4]
 8031cd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031cd4:	e12a      	b.n	8031f2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8031cd6:	693b      	ldr	r3, [r7, #16]
 8031cd8:	f003 0320 	and.w	r3, r3, #32
 8031cdc:	2b00      	cmp	r3, #0
 8031cde:	f040 8089 	bne.w	8031df4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8031ce2:	687b      	ldr	r3, [r7, #4]
 8031ce4:	681b      	ldr	r3, [r3, #0]
 8031ce6:	4a2b      	ldr	r2, [pc, #172]	; (8031d94 <HAL_DMA_IRQHandler+0xc74>)
 8031ce8:	4293      	cmp	r3, r2
 8031cea:	d04a      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031cec:	687b      	ldr	r3, [r7, #4]
 8031cee:	681b      	ldr	r3, [r3, #0]
 8031cf0:	4a29      	ldr	r2, [pc, #164]	; (8031d98 <HAL_DMA_IRQHandler+0xc78>)
 8031cf2:	4293      	cmp	r3, r2
 8031cf4:	d045      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031cf6:	687b      	ldr	r3, [r7, #4]
 8031cf8:	681b      	ldr	r3, [r3, #0]
 8031cfa:	4a28      	ldr	r2, [pc, #160]	; (8031d9c <HAL_DMA_IRQHandler+0xc7c>)
 8031cfc:	4293      	cmp	r3, r2
 8031cfe:	d040      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d00:	687b      	ldr	r3, [r7, #4]
 8031d02:	681b      	ldr	r3, [r3, #0]
 8031d04:	4a26      	ldr	r2, [pc, #152]	; (8031da0 <HAL_DMA_IRQHandler+0xc80>)
 8031d06:	4293      	cmp	r3, r2
 8031d08:	d03b      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d0a:	687b      	ldr	r3, [r7, #4]
 8031d0c:	681b      	ldr	r3, [r3, #0]
 8031d0e:	4a25      	ldr	r2, [pc, #148]	; (8031da4 <HAL_DMA_IRQHandler+0xc84>)
 8031d10:	4293      	cmp	r3, r2
 8031d12:	d036      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d14:	687b      	ldr	r3, [r7, #4]
 8031d16:	681b      	ldr	r3, [r3, #0]
 8031d18:	4a23      	ldr	r2, [pc, #140]	; (8031da8 <HAL_DMA_IRQHandler+0xc88>)
 8031d1a:	4293      	cmp	r3, r2
 8031d1c:	d031      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d1e:	687b      	ldr	r3, [r7, #4]
 8031d20:	681b      	ldr	r3, [r3, #0]
 8031d22:	4a22      	ldr	r2, [pc, #136]	; (8031dac <HAL_DMA_IRQHandler+0xc8c>)
 8031d24:	4293      	cmp	r3, r2
 8031d26:	d02c      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d28:	687b      	ldr	r3, [r7, #4]
 8031d2a:	681b      	ldr	r3, [r3, #0]
 8031d2c:	4a20      	ldr	r2, [pc, #128]	; (8031db0 <HAL_DMA_IRQHandler+0xc90>)
 8031d2e:	4293      	cmp	r3, r2
 8031d30:	d027      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d32:	687b      	ldr	r3, [r7, #4]
 8031d34:	681b      	ldr	r3, [r3, #0]
 8031d36:	4a1f      	ldr	r2, [pc, #124]	; (8031db4 <HAL_DMA_IRQHandler+0xc94>)
 8031d38:	4293      	cmp	r3, r2
 8031d3a:	d022      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d3c:	687b      	ldr	r3, [r7, #4]
 8031d3e:	681b      	ldr	r3, [r3, #0]
 8031d40:	4a1d      	ldr	r2, [pc, #116]	; (8031db8 <HAL_DMA_IRQHandler+0xc98>)
 8031d42:	4293      	cmp	r3, r2
 8031d44:	d01d      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d46:	687b      	ldr	r3, [r7, #4]
 8031d48:	681b      	ldr	r3, [r3, #0]
 8031d4a:	4a1c      	ldr	r2, [pc, #112]	; (8031dbc <HAL_DMA_IRQHandler+0xc9c>)
 8031d4c:	4293      	cmp	r3, r2
 8031d4e:	d018      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d50:	687b      	ldr	r3, [r7, #4]
 8031d52:	681b      	ldr	r3, [r3, #0]
 8031d54:	4a1a      	ldr	r2, [pc, #104]	; (8031dc0 <HAL_DMA_IRQHandler+0xca0>)
 8031d56:	4293      	cmp	r3, r2
 8031d58:	d013      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d5a:	687b      	ldr	r3, [r7, #4]
 8031d5c:	681b      	ldr	r3, [r3, #0]
 8031d5e:	4a19      	ldr	r2, [pc, #100]	; (8031dc4 <HAL_DMA_IRQHandler+0xca4>)
 8031d60:	4293      	cmp	r3, r2
 8031d62:	d00e      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d64:	687b      	ldr	r3, [r7, #4]
 8031d66:	681b      	ldr	r3, [r3, #0]
 8031d68:	4a17      	ldr	r2, [pc, #92]	; (8031dc8 <HAL_DMA_IRQHandler+0xca8>)
 8031d6a:	4293      	cmp	r3, r2
 8031d6c:	d009      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d6e:	687b      	ldr	r3, [r7, #4]
 8031d70:	681b      	ldr	r3, [r3, #0]
 8031d72:	4a16      	ldr	r2, [pc, #88]	; (8031dcc <HAL_DMA_IRQHandler+0xcac>)
 8031d74:	4293      	cmp	r3, r2
 8031d76:	d004      	beq.n	8031d82 <HAL_DMA_IRQHandler+0xc62>
 8031d78:	687b      	ldr	r3, [r7, #4]
 8031d7a:	681b      	ldr	r3, [r3, #0]
 8031d7c:	4a14      	ldr	r2, [pc, #80]	; (8031dd0 <HAL_DMA_IRQHandler+0xcb0>)
 8031d7e:	4293      	cmp	r3, r2
 8031d80:	d128      	bne.n	8031dd4 <HAL_DMA_IRQHandler+0xcb4>
 8031d82:	687b      	ldr	r3, [r7, #4]
 8031d84:	681b      	ldr	r3, [r3, #0]
 8031d86:	681a      	ldr	r2, [r3, #0]
 8031d88:	687b      	ldr	r3, [r7, #4]
 8031d8a:	681b      	ldr	r3, [r3, #0]
 8031d8c:	f022 0214 	bic.w	r2, r2, #20
 8031d90:	601a      	str	r2, [r3, #0]
 8031d92:	e027      	b.n	8031de4 <HAL_DMA_IRQHandler+0xcc4>
 8031d94:	40020010 	.word	0x40020010
 8031d98:	40020028 	.word	0x40020028
 8031d9c:	40020040 	.word	0x40020040
 8031da0:	40020058 	.word	0x40020058
 8031da4:	40020070 	.word	0x40020070
 8031da8:	40020088 	.word	0x40020088
 8031dac:	400200a0 	.word	0x400200a0
 8031db0:	400200b8 	.word	0x400200b8
 8031db4:	40020410 	.word	0x40020410
 8031db8:	40020428 	.word	0x40020428
 8031dbc:	40020440 	.word	0x40020440
 8031dc0:	40020458 	.word	0x40020458
 8031dc4:	40020470 	.word	0x40020470
 8031dc8:	40020488 	.word	0x40020488
 8031dcc:	400204a0 	.word	0x400204a0
 8031dd0:	400204b8 	.word	0x400204b8
 8031dd4:	687b      	ldr	r3, [r7, #4]
 8031dd6:	681b      	ldr	r3, [r3, #0]
 8031dd8:	681a      	ldr	r2, [r3, #0]
 8031dda:	687b      	ldr	r3, [r7, #4]
 8031ddc:	681b      	ldr	r3, [r3, #0]
 8031dde:	f022 020a 	bic.w	r2, r2, #10
 8031de2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8031de4:	687b      	ldr	r3, [r7, #4]
 8031de6:	2201      	movs	r2, #1
 8031de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8031dec:	687b      	ldr	r3, [r7, #4]
 8031dee:	2200      	movs	r2, #0
 8031df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8031df4:	687b      	ldr	r3, [r7, #4]
 8031df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031df8:	2b00      	cmp	r3, #0
 8031dfa:	f000 8097 	beq.w	8031f2c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8031dfe:	687b      	ldr	r3, [r7, #4]
 8031e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031e02:	6878      	ldr	r0, [r7, #4]
 8031e04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031e06:	e091      	b.n	8031f2c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8031e08:	687b      	ldr	r3, [r7, #4]
 8031e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031e0c:	f003 031f 	and.w	r3, r3, #31
 8031e10:	2208      	movs	r2, #8
 8031e12:	409a      	lsls	r2, r3
 8031e14:	697b      	ldr	r3, [r7, #20]
 8031e16:	4013      	ands	r3, r2
 8031e18:	2b00      	cmp	r3, #0
 8031e1a:	f000 8088 	beq.w	8031f2e <HAL_DMA_IRQHandler+0xe0e>
 8031e1e:	693b      	ldr	r3, [r7, #16]
 8031e20:	f003 0308 	and.w	r3, r3, #8
 8031e24:	2b00      	cmp	r3, #0
 8031e26:	f000 8082 	beq.w	8031f2e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8031e2a:	687b      	ldr	r3, [r7, #4]
 8031e2c:	681b      	ldr	r3, [r3, #0]
 8031e2e:	4a41      	ldr	r2, [pc, #260]	; (8031f34 <HAL_DMA_IRQHandler+0xe14>)
 8031e30:	4293      	cmp	r3, r2
 8031e32:	d04a      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031e34:	687b      	ldr	r3, [r7, #4]
 8031e36:	681b      	ldr	r3, [r3, #0]
 8031e38:	4a3f      	ldr	r2, [pc, #252]	; (8031f38 <HAL_DMA_IRQHandler+0xe18>)
 8031e3a:	4293      	cmp	r3, r2
 8031e3c:	d045      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031e3e:	687b      	ldr	r3, [r7, #4]
 8031e40:	681b      	ldr	r3, [r3, #0]
 8031e42:	4a3e      	ldr	r2, [pc, #248]	; (8031f3c <HAL_DMA_IRQHandler+0xe1c>)
 8031e44:	4293      	cmp	r3, r2
 8031e46:	d040      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031e48:	687b      	ldr	r3, [r7, #4]
 8031e4a:	681b      	ldr	r3, [r3, #0]
 8031e4c:	4a3c      	ldr	r2, [pc, #240]	; (8031f40 <HAL_DMA_IRQHandler+0xe20>)
 8031e4e:	4293      	cmp	r3, r2
 8031e50:	d03b      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031e52:	687b      	ldr	r3, [r7, #4]
 8031e54:	681b      	ldr	r3, [r3, #0]
 8031e56:	4a3b      	ldr	r2, [pc, #236]	; (8031f44 <HAL_DMA_IRQHandler+0xe24>)
 8031e58:	4293      	cmp	r3, r2
 8031e5a:	d036      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031e5c:	687b      	ldr	r3, [r7, #4]
 8031e5e:	681b      	ldr	r3, [r3, #0]
 8031e60:	4a39      	ldr	r2, [pc, #228]	; (8031f48 <HAL_DMA_IRQHandler+0xe28>)
 8031e62:	4293      	cmp	r3, r2
 8031e64:	d031      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031e66:	687b      	ldr	r3, [r7, #4]
 8031e68:	681b      	ldr	r3, [r3, #0]
 8031e6a:	4a38      	ldr	r2, [pc, #224]	; (8031f4c <HAL_DMA_IRQHandler+0xe2c>)
 8031e6c:	4293      	cmp	r3, r2
 8031e6e:	d02c      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031e70:	687b      	ldr	r3, [r7, #4]
 8031e72:	681b      	ldr	r3, [r3, #0]
 8031e74:	4a36      	ldr	r2, [pc, #216]	; (8031f50 <HAL_DMA_IRQHandler+0xe30>)
 8031e76:	4293      	cmp	r3, r2
 8031e78:	d027      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031e7a:	687b      	ldr	r3, [r7, #4]
 8031e7c:	681b      	ldr	r3, [r3, #0]
 8031e7e:	4a35      	ldr	r2, [pc, #212]	; (8031f54 <HAL_DMA_IRQHandler+0xe34>)
 8031e80:	4293      	cmp	r3, r2
 8031e82:	d022      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031e84:	687b      	ldr	r3, [r7, #4]
 8031e86:	681b      	ldr	r3, [r3, #0]
 8031e88:	4a33      	ldr	r2, [pc, #204]	; (8031f58 <HAL_DMA_IRQHandler+0xe38>)
 8031e8a:	4293      	cmp	r3, r2
 8031e8c:	d01d      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031e8e:	687b      	ldr	r3, [r7, #4]
 8031e90:	681b      	ldr	r3, [r3, #0]
 8031e92:	4a32      	ldr	r2, [pc, #200]	; (8031f5c <HAL_DMA_IRQHandler+0xe3c>)
 8031e94:	4293      	cmp	r3, r2
 8031e96:	d018      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031e98:	687b      	ldr	r3, [r7, #4]
 8031e9a:	681b      	ldr	r3, [r3, #0]
 8031e9c:	4a30      	ldr	r2, [pc, #192]	; (8031f60 <HAL_DMA_IRQHandler+0xe40>)
 8031e9e:	4293      	cmp	r3, r2
 8031ea0:	d013      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031ea2:	687b      	ldr	r3, [r7, #4]
 8031ea4:	681b      	ldr	r3, [r3, #0]
 8031ea6:	4a2f      	ldr	r2, [pc, #188]	; (8031f64 <HAL_DMA_IRQHandler+0xe44>)
 8031ea8:	4293      	cmp	r3, r2
 8031eaa:	d00e      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031eac:	687b      	ldr	r3, [r7, #4]
 8031eae:	681b      	ldr	r3, [r3, #0]
 8031eb0:	4a2d      	ldr	r2, [pc, #180]	; (8031f68 <HAL_DMA_IRQHandler+0xe48>)
 8031eb2:	4293      	cmp	r3, r2
 8031eb4:	d009      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031eb6:	687b      	ldr	r3, [r7, #4]
 8031eb8:	681b      	ldr	r3, [r3, #0]
 8031eba:	4a2c      	ldr	r2, [pc, #176]	; (8031f6c <HAL_DMA_IRQHandler+0xe4c>)
 8031ebc:	4293      	cmp	r3, r2
 8031ebe:	d004      	beq.n	8031eca <HAL_DMA_IRQHandler+0xdaa>
 8031ec0:	687b      	ldr	r3, [r7, #4]
 8031ec2:	681b      	ldr	r3, [r3, #0]
 8031ec4:	4a2a      	ldr	r2, [pc, #168]	; (8031f70 <HAL_DMA_IRQHandler+0xe50>)
 8031ec6:	4293      	cmp	r3, r2
 8031ec8:	d108      	bne.n	8031edc <HAL_DMA_IRQHandler+0xdbc>
 8031eca:	687b      	ldr	r3, [r7, #4]
 8031ecc:	681b      	ldr	r3, [r3, #0]
 8031ece:	681a      	ldr	r2, [r3, #0]
 8031ed0:	687b      	ldr	r3, [r7, #4]
 8031ed2:	681b      	ldr	r3, [r3, #0]
 8031ed4:	f022 021c 	bic.w	r2, r2, #28
 8031ed8:	601a      	str	r2, [r3, #0]
 8031eda:	e007      	b.n	8031eec <HAL_DMA_IRQHandler+0xdcc>
 8031edc:	687b      	ldr	r3, [r7, #4]
 8031ede:	681b      	ldr	r3, [r3, #0]
 8031ee0:	681a      	ldr	r2, [r3, #0]
 8031ee2:	687b      	ldr	r3, [r7, #4]
 8031ee4:	681b      	ldr	r3, [r3, #0]
 8031ee6:	f022 020e 	bic.w	r2, r2, #14
 8031eea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8031eec:	687b      	ldr	r3, [r7, #4]
 8031eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031ef0:	f003 031f 	and.w	r3, r3, #31
 8031ef4:	2201      	movs	r2, #1
 8031ef6:	409a      	lsls	r2, r3
 8031ef8:	69fb      	ldr	r3, [r7, #28]
 8031efa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8031efc:	687b      	ldr	r3, [r7, #4]
 8031efe:	2201      	movs	r2, #1
 8031f00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8031f02:	687b      	ldr	r3, [r7, #4]
 8031f04:	2201      	movs	r2, #1
 8031f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8031f0a:	687b      	ldr	r3, [r7, #4]
 8031f0c:	2200      	movs	r2, #0
 8031f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8031f12:	687b      	ldr	r3, [r7, #4]
 8031f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031f16:	2b00      	cmp	r3, #0
 8031f18:	d009      	beq.n	8031f2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8031f1a:	687b      	ldr	r3, [r7, #4]
 8031f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031f1e:	6878      	ldr	r0, [r7, #4]
 8031f20:	4798      	blx	r3
 8031f22:	e004      	b.n	8031f2e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8031f24:	bf00      	nop
 8031f26:	e002      	b.n	8031f2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031f28:	bf00      	nop
 8031f2a:	e000      	b.n	8031f2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031f2c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8031f2e:	3728      	adds	r7, #40	; 0x28
 8031f30:	46bd      	mov	sp, r7
 8031f32:	bd80      	pop	{r7, pc}
 8031f34:	40020010 	.word	0x40020010
 8031f38:	40020028 	.word	0x40020028
 8031f3c:	40020040 	.word	0x40020040
 8031f40:	40020058 	.word	0x40020058
 8031f44:	40020070 	.word	0x40020070
 8031f48:	40020088 	.word	0x40020088
 8031f4c:	400200a0 	.word	0x400200a0
 8031f50:	400200b8 	.word	0x400200b8
 8031f54:	40020410 	.word	0x40020410
 8031f58:	40020428 	.word	0x40020428
 8031f5c:	40020440 	.word	0x40020440
 8031f60:	40020458 	.word	0x40020458
 8031f64:	40020470 	.word	0x40020470
 8031f68:	40020488 	.word	0x40020488
 8031f6c:	400204a0 	.word	0x400204a0
 8031f70:	400204b8 	.word	0x400204b8

08031f74 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8031f74:	b480      	push	{r7}
 8031f76:	b083      	sub	sp, #12
 8031f78:	af00      	add	r7, sp, #0
 8031f7a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8031f7c:	687b      	ldr	r3, [r7, #4]
 8031f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8031f82:	b2db      	uxtb	r3, r3
}
 8031f84:	4618      	mov	r0, r3
 8031f86:	370c      	adds	r7, #12
 8031f88:	46bd      	mov	sp, r7
 8031f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031f8e:	4770      	bx	lr

08031f90 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8031f90:	b480      	push	{r7}
 8031f92:	b083      	sub	sp, #12
 8031f94:	af00      	add	r7, sp, #0
 8031f96:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8031f98:	687b      	ldr	r3, [r7, #4]
 8031f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8031f9c:	4618      	mov	r0, r3
 8031f9e:	370c      	adds	r7, #12
 8031fa0:	46bd      	mov	sp, r7
 8031fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031fa6:	4770      	bx	lr

08031fa8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8031fa8:	b480      	push	{r7}
 8031faa:	b087      	sub	sp, #28
 8031fac:	af00      	add	r7, sp, #0
 8031fae:	60f8      	str	r0, [r7, #12]
 8031fb0:	60b9      	str	r1, [r7, #8]
 8031fb2:	607a      	str	r2, [r7, #4]
 8031fb4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8031fb6:	68fb      	ldr	r3, [r7, #12]
 8031fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031fba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8031fbc:	68fb      	ldr	r3, [r7, #12]
 8031fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031fc0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8031fc2:	68fb      	ldr	r3, [r7, #12]
 8031fc4:	681b      	ldr	r3, [r3, #0]
 8031fc6:	4a7f      	ldr	r2, [pc, #508]	; (80321c4 <DMA_SetConfig+0x21c>)
 8031fc8:	4293      	cmp	r3, r2
 8031fca:	d072      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8031fcc:	68fb      	ldr	r3, [r7, #12]
 8031fce:	681b      	ldr	r3, [r3, #0]
 8031fd0:	4a7d      	ldr	r2, [pc, #500]	; (80321c8 <DMA_SetConfig+0x220>)
 8031fd2:	4293      	cmp	r3, r2
 8031fd4:	d06d      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8031fd6:	68fb      	ldr	r3, [r7, #12]
 8031fd8:	681b      	ldr	r3, [r3, #0]
 8031fda:	4a7c      	ldr	r2, [pc, #496]	; (80321cc <DMA_SetConfig+0x224>)
 8031fdc:	4293      	cmp	r3, r2
 8031fde:	d068      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8031fe0:	68fb      	ldr	r3, [r7, #12]
 8031fe2:	681b      	ldr	r3, [r3, #0]
 8031fe4:	4a7a      	ldr	r2, [pc, #488]	; (80321d0 <DMA_SetConfig+0x228>)
 8031fe6:	4293      	cmp	r3, r2
 8031fe8:	d063      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8031fea:	68fb      	ldr	r3, [r7, #12]
 8031fec:	681b      	ldr	r3, [r3, #0]
 8031fee:	4a79      	ldr	r2, [pc, #484]	; (80321d4 <DMA_SetConfig+0x22c>)
 8031ff0:	4293      	cmp	r3, r2
 8031ff2:	d05e      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8031ff4:	68fb      	ldr	r3, [r7, #12]
 8031ff6:	681b      	ldr	r3, [r3, #0]
 8031ff8:	4a77      	ldr	r2, [pc, #476]	; (80321d8 <DMA_SetConfig+0x230>)
 8031ffa:	4293      	cmp	r3, r2
 8031ffc:	d059      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8031ffe:	68fb      	ldr	r3, [r7, #12]
 8032000:	681b      	ldr	r3, [r3, #0]
 8032002:	4a76      	ldr	r2, [pc, #472]	; (80321dc <DMA_SetConfig+0x234>)
 8032004:	4293      	cmp	r3, r2
 8032006:	d054      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8032008:	68fb      	ldr	r3, [r7, #12]
 803200a:	681b      	ldr	r3, [r3, #0]
 803200c:	4a74      	ldr	r2, [pc, #464]	; (80321e0 <DMA_SetConfig+0x238>)
 803200e:	4293      	cmp	r3, r2
 8032010:	d04f      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8032012:	68fb      	ldr	r3, [r7, #12]
 8032014:	681b      	ldr	r3, [r3, #0]
 8032016:	4a73      	ldr	r2, [pc, #460]	; (80321e4 <DMA_SetConfig+0x23c>)
 8032018:	4293      	cmp	r3, r2
 803201a:	d04a      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 803201c:	68fb      	ldr	r3, [r7, #12]
 803201e:	681b      	ldr	r3, [r3, #0]
 8032020:	4a71      	ldr	r2, [pc, #452]	; (80321e8 <DMA_SetConfig+0x240>)
 8032022:	4293      	cmp	r3, r2
 8032024:	d045      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8032026:	68fb      	ldr	r3, [r7, #12]
 8032028:	681b      	ldr	r3, [r3, #0]
 803202a:	4a70      	ldr	r2, [pc, #448]	; (80321ec <DMA_SetConfig+0x244>)
 803202c:	4293      	cmp	r3, r2
 803202e:	d040      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8032030:	68fb      	ldr	r3, [r7, #12]
 8032032:	681b      	ldr	r3, [r3, #0]
 8032034:	4a6e      	ldr	r2, [pc, #440]	; (80321f0 <DMA_SetConfig+0x248>)
 8032036:	4293      	cmp	r3, r2
 8032038:	d03b      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 803203a:	68fb      	ldr	r3, [r7, #12]
 803203c:	681b      	ldr	r3, [r3, #0]
 803203e:	4a6d      	ldr	r2, [pc, #436]	; (80321f4 <DMA_SetConfig+0x24c>)
 8032040:	4293      	cmp	r3, r2
 8032042:	d036      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8032044:	68fb      	ldr	r3, [r7, #12]
 8032046:	681b      	ldr	r3, [r3, #0]
 8032048:	4a6b      	ldr	r2, [pc, #428]	; (80321f8 <DMA_SetConfig+0x250>)
 803204a:	4293      	cmp	r3, r2
 803204c:	d031      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 803204e:	68fb      	ldr	r3, [r7, #12]
 8032050:	681b      	ldr	r3, [r3, #0]
 8032052:	4a6a      	ldr	r2, [pc, #424]	; (80321fc <DMA_SetConfig+0x254>)
 8032054:	4293      	cmp	r3, r2
 8032056:	d02c      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8032058:	68fb      	ldr	r3, [r7, #12]
 803205a:	681b      	ldr	r3, [r3, #0]
 803205c:	4a68      	ldr	r2, [pc, #416]	; (8032200 <DMA_SetConfig+0x258>)
 803205e:	4293      	cmp	r3, r2
 8032060:	d027      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8032062:	68fb      	ldr	r3, [r7, #12]
 8032064:	681b      	ldr	r3, [r3, #0]
 8032066:	4a67      	ldr	r2, [pc, #412]	; (8032204 <DMA_SetConfig+0x25c>)
 8032068:	4293      	cmp	r3, r2
 803206a:	d022      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 803206c:	68fb      	ldr	r3, [r7, #12]
 803206e:	681b      	ldr	r3, [r3, #0]
 8032070:	4a65      	ldr	r2, [pc, #404]	; (8032208 <DMA_SetConfig+0x260>)
 8032072:	4293      	cmp	r3, r2
 8032074:	d01d      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8032076:	68fb      	ldr	r3, [r7, #12]
 8032078:	681b      	ldr	r3, [r3, #0]
 803207a:	4a64      	ldr	r2, [pc, #400]	; (803220c <DMA_SetConfig+0x264>)
 803207c:	4293      	cmp	r3, r2
 803207e:	d018      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8032080:	68fb      	ldr	r3, [r7, #12]
 8032082:	681b      	ldr	r3, [r3, #0]
 8032084:	4a62      	ldr	r2, [pc, #392]	; (8032210 <DMA_SetConfig+0x268>)
 8032086:	4293      	cmp	r3, r2
 8032088:	d013      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 803208a:	68fb      	ldr	r3, [r7, #12]
 803208c:	681b      	ldr	r3, [r3, #0]
 803208e:	4a61      	ldr	r2, [pc, #388]	; (8032214 <DMA_SetConfig+0x26c>)
 8032090:	4293      	cmp	r3, r2
 8032092:	d00e      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 8032094:	68fb      	ldr	r3, [r7, #12]
 8032096:	681b      	ldr	r3, [r3, #0]
 8032098:	4a5f      	ldr	r2, [pc, #380]	; (8032218 <DMA_SetConfig+0x270>)
 803209a:	4293      	cmp	r3, r2
 803209c:	d009      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 803209e:	68fb      	ldr	r3, [r7, #12]
 80320a0:	681b      	ldr	r3, [r3, #0]
 80320a2:	4a5e      	ldr	r2, [pc, #376]	; (803221c <DMA_SetConfig+0x274>)
 80320a4:	4293      	cmp	r3, r2
 80320a6:	d004      	beq.n	80320b2 <DMA_SetConfig+0x10a>
 80320a8:	68fb      	ldr	r3, [r7, #12]
 80320aa:	681b      	ldr	r3, [r3, #0]
 80320ac:	4a5c      	ldr	r2, [pc, #368]	; (8032220 <DMA_SetConfig+0x278>)
 80320ae:	4293      	cmp	r3, r2
 80320b0:	d101      	bne.n	80320b6 <DMA_SetConfig+0x10e>
 80320b2:	2301      	movs	r3, #1
 80320b4:	e000      	b.n	80320b8 <DMA_SetConfig+0x110>
 80320b6:	2300      	movs	r3, #0
 80320b8:	2b00      	cmp	r3, #0
 80320ba:	d00d      	beq.n	80320d8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80320bc:	68fb      	ldr	r3, [r7, #12]
 80320be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80320c0:	68fa      	ldr	r2, [r7, #12]
 80320c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80320c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80320c6:	68fb      	ldr	r3, [r7, #12]
 80320c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80320ca:	2b00      	cmp	r3, #0
 80320cc:	d004      	beq.n	80320d8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80320ce:	68fb      	ldr	r3, [r7, #12]
 80320d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80320d2:	68fa      	ldr	r2, [r7, #12]
 80320d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80320d6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80320d8:	68fb      	ldr	r3, [r7, #12]
 80320da:	681b      	ldr	r3, [r3, #0]
 80320dc:	4a39      	ldr	r2, [pc, #228]	; (80321c4 <DMA_SetConfig+0x21c>)
 80320de:	4293      	cmp	r3, r2
 80320e0:	d04a      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 80320e2:	68fb      	ldr	r3, [r7, #12]
 80320e4:	681b      	ldr	r3, [r3, #0]
 80320e6:	4a38      	ldr	r2, [pc, #224]	; (80321c8 <DMA_SetConfig+0x220>)
 80320e8:	4293      	cmp	r3, r2
 80320ea:	d045      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 80320ec:	68fb      	ldr	r3, [r7, #12]
 80320ee:	681b      	ldr	r3, [r3, #0]
 80320f0:	4a36      	ldr	r2, [pc, #216]	; (80321cc <DMA_SetConfig+0x224>)
 80320f2:	4293      	cmp	r3, r2
 80320f4:	d040      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 80320f6:	68fb      	ldr	r3, [r7, #12]
 80320f8:	681b      	ldr	r3, [r3, #0]
 80320fa:	4a35      	ldr	r2, [pc, #212]	; (80321d0 <DMA_SetConfig+0x228>)
 80320fc:	4293      	cmp	r3, r2
 80320fe:	d03b      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 8032100:	68fb      	ldr	r3, [r7, #12]
 8032102:	681b      	ldr	r3, [r3, #0]
 8032104:	4a33      	ldr	r2, [pc, #204]	; (80321d4 <DMA_SetConfig+0x22c>)
 8032106:	4293      	cmp	r3, r2
 8032108:	d036      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 803210a:	68fb      	ldr	r3, [r7, #12]
 803210c:	681b      	ldr	r3, [r3, #0]
 803210e:	4a32      	ldr	r2, [pc, #200]	; (80321d8 <DMA_SetConfig+0x230>)
 8032110:	4293      	cmp	r3, r2
 8032112:	d031      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 8032114:	68fb      	ldr	r3, [r7, #12]
 8032116:	681b      	ldr	r3, [r3, #0]
 8032118:	4a30      	ldr	r2, [pc, #192]	; (80321dc <DMA_SetConfig+0x234>)
 803211a:	4293      	cmp	r3, r2
 803211c:	d02c      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 803211e:	68fb      	ldr	r3, [r7, #12]
 8032120:	681b      	ldr	r3, [r3, #0]
 8032122:	4a2f      	ldr	r2, [pc, #188]	; (80321e0 <DMA_SetConfig+0x238>)
 8032124:	4293      	cmp	r3, r2
 8032126:	d027      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 8032128:	68fb      	ldr	r3, [r7, #12]
 803212a:	681b      	ldr	r3, [r3, #0]
 803212c:	4a2d      	ldr	r2, [pc, #180]	; (80321e4 <DMA_SetConfig+0x23c>)
 803212e:	4293      	cmp	r3, r2
 8032130:	d022      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 8032132:	68fb      	ldr	r3, [r7, #12]
 8032134:	681b      	ldr	r3, [r3, #0]
 8032136:	4a2c      	ldr	r2, [pc, #176]	; (80321e8 <DMA_SetConfig+0x240>)
 8032138:	4293      	cmp	r3, r2
 803213a:	d01d      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 803213c:	68fb      	ldr	r3, [r7, #12]
 803213e:	681b      	ldr	r3, [r3, #0]
 8032140:	4a2a      	ldr	r2, [pc, #168]	; (80321ec <DMA_SetConfig+0x244>)
 8032142:	4293      	cmp	r3, r2
 8032144:	d018      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 8032146:	68fb      	ldr	r3, [r7, #12]
 8032148:	681b      	ldr	r3, [r3, #0]
 803214a:	4a29      	ldr	r2, [pc, #164]	; (80321f0 <DMA_SetConfig+0x248>)
 803214c:	4293      	cmp	r3, r2
 803214e:	d013      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 8032150:	68fb      	ldr	r3, [r7, #12]
 8032152:	681b      	ldr	r3, [r3, #0]
 8032154:	4a27      	ldr	r2, [pc, #156]	; (80321f4 <DMA_SetConfig+0x24c>)
 8032156:	4293      	cmp	r3, r2
 8032158:	d00e      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 803215a:	68fb      	ldr	r3, [r7, #12]
 803215c:	681b      	ldr	r3, [r3, #0]
 803215e:	4a26      	ldr	r2, [pc, #152]	; (80321f8 <DMA_SetConfig+0x250>)
 8032160:	4293      	cmp	r3, r2
 8032162:	d009      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 8032164:	68fb      	ldr	r3, [r7, #12]
 8032166:	681b      	ldr	r3, [r3, #0]
 8032168:	4a24      	ldr	r2, [pc, #144]	; (80321fc <DMA_SetConfig+0x254>)
 803216a:	4293      	cmp	r3, r2
 803216c:	d004      	beq.n	8032178 <DMA_SetConfig+0x1d0>
 803216e:	68fb      	ldr	r3, [r7, #12]
 8032170:	681b      	ldr	r3, [r3, #0]
 8032172:	4a23      	ldr	r2, [pc, #140]	; (8032200 <DMA_SetConfig+0x258>)
 8032174:	4293      	cmp	r3, r2
 8032176:	d101      	bne.n	803217c <DMA_SetConfig+0x1d4>
 8032178:	2301      	movs	r3, #1
 803217a:	e000      	b.n	803217e <DMA_SetConfig+0x1d6>
 803217c:	2300      	movs	r3, #0
 803217e:	2b00      	cmp	r3, #0
 8032180:	d059      	beq.n	8032236 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8032182:	68fb      	ldr	r3, [r7, #12]
 8032184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8032186:	f003 031f 	and.w	r3, r3, #31
 803218a:	223f      	movs	r2, #63	; 0x3f
 803218c:	409a      	lsls	r2, r3
 803218e:	697b      	ldr	r3, [r7, #20]
 8032190:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8032192:	68fb      	ldr	r3, [r7, #12]
 8032194:	681b      	ldr	r3, [r3, #0]
 8032196:	681a      	ldr	r2, [r3, #0]
 8032198:	68fb      	ldr	r3, [r7, #12]
 803219a:	681b      	ldr	r3, [r3, #0]
 803219c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80321a0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80321a2:	68fb      	ldr	r3, [r7, #12]
 80321a4:	681b      	ldr	r3, [r3, #0]
 80321a6:	683a      	ldr	r2, [r7, #0]
 80321a8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80321aa:	68fb      	ldr	r3, [r7, #12]
 80321ac:	689b      	ldr	r3, [r3, #8]
 80321ae:	2b40      	cmp	r3, #64	; 0x40
 80321b0:	d138      	bne.n	8032224 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80321b2:	68fb      	ldr	r3, [r7, #12]
 80321b4:	681b      	ldr	r3, [r3, #0]
 80321b6:	687a      	ldr	r2, [r7, #4]
 80321b8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80321ba:	68fb      	ldr	r3, [r7, #12]
 80321bc:	681b      	ldr	r3, [r3, #0]
 80321be:	68ba      	ldr	r2, [r7, #8]
 80321c0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80321c2:	e086      	b.n	80322d2 <DMA_SetConfig+0x32a>
 80321c4:	40020010 	.word	0x40020010
 80321c8:	40020028 	.word	0x40020028
 80321cc:	40020040 	.word	0x40020040
 80321d0:	40020058 	.word	0x40020058
 80321d4:	40020070 	.word	0x40020070
 80321d8:	40020088 	.word	0x40020088
 80321dc:	400200a0 	.word	0x400200a0
 80321e0:	400200b8 	.word	0x400200b8
 80321e4:	40020410 	.word	0x40020410
 80321e8:	40020428 	.word	0x40020428
 80321ec:	40020440 	.word	0x40020440
 80321f0:	40020458 	.word	0x40020458
 80321f4:	40020470 	.word	0x40020470
 80321f8:	40020488 	.word	0x40020488
 80321fc:	400204a0 	.word	0x400204a0
 8032200:	400204b8 	.word	0x400204b8
 8032204:	58025408 	.word	0x58025408
 8032208:	5802541c 	.word	0x5802541c
 803220c:	58025430 	.word	0x58025430
 8032210:	58025444 	.word	0x58025444
 8032214:	58025458 	.word	0x58025458
 8032218:	5802546c 	.word	0x5802546c
 803221c:	58025480 	.word	0x58025480
 8032220:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8032224:	68fb      	ldr	r3, [r7, #12]
 8032226:	681b      	ldr	r3, [r3, #0]
 8032228:	68ba      	ldr	r2, [r7, #8]
 803222a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 803222c:	68fb      	ldr	r3, [r7, #12]
 803222e:	681b      	ldr	r3, [r3, #0]
 8032230:	687a      	ldr	r2, [r7, #4]
 8032232:	60da      	str	r2, [r3, #12]
}
 8032234:	e04d      	b.n	80322d2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8032236:	68fb      	ldr	r3, [r7, #12]
 8032238:	681b      	ldr	r3, [r3, #0]
 803223a:	4a29      	ldr	r2, [pc, #164]	; (80322e0 <DMA_SetConfig+0x338>)
 803223c:	4293      	cmp	r3, r2
 803223e:	d022      	beq.n	8032286 <DMA_SetConfig+0x2de>
 8032240:	68fb      	ldr	r3, [r7, #12]
 8032242:	681b      	ldr	r3, [r3, #0]
 8032244:	4a27      	ldr	r2, [pc, #156]	; (80322e4 <DMA_SetConfig+0x33c>)
 8032246:	4293      	cmp	r3, r2
 8032248:	d01d      	beq.n	8032286 <DMA_SetConfig+0x2de>
 803224a:	68fb      	ldr	r3, [r7, #12]
 803224c:	681b      	ldr	r3, [r3, #0]
 803224e:	4a26      	ldr	r2, [pc, #152]	; (80322e8 <DMA_SetConfig+0x340>)
 8032250:	4293      	cmp	r3, r2
 8032252:	d018      	beq.n	8032286 <DMA_SetConfig+0x2de>
 8032254:	68fb      	ldr	r3, [r7, #12]
 8032256:	681b      	ldr	r3, [r3, #0]
 8032258:	4a24      	ldr	r2, [pc, #144]	; (80322ec <DMA_SetConfig+0x344>)
 803225a:	4293      	cmp	r3, r2
 803225c:	d013      	beq.n	8032286 <DMA_SetConfig+0x2de>
 803225e:	68fb      	ldr	r3, [r7, #12]
 8032260:	681b      	ldr	r3, [r3, #0]
 8032262:	4a23      	ldr	r2, [pc, #140]	; (80322f0 <DMA_SetConfig+0x348>)
 8032264:	4293      	cmp	r3, r2
 8032266:	d00e      	beq.n	8032286 <DMA_SetConfig+0x2de>
 8032268:	68fb      	ldr	r3, [r7, #12]
 803226a:	681b      	ldr	r3, [r3, #0]
 803226c:	4a21      	ldr	r2, [pc, #132]	; (80322f4 <DMA_SetConfig+0x34c>)
 803226e:	4293      	cmp	r3, r2
 8032270:	d009      	beq.n	8032286 <DMA_SetConfig+0x2de>
 8032272:	68fb      	ldr	r3, [r7, #12]
 8032274:	681b      	ldr	r3, [r3, #0]
 8032276:	4a20      	ldr	r2, [pc, #128]	; (80322f8 <DMA_SetConfig+0x350>)
 8032278:	4293      	cmp	r3, r2
 803227a:	d004      	beq.n	8032286 <DMA_SetConfig+0x2de>
 803227c:	68fb      	ldr	r3, [r7, #12]
 803227e:	681b      	ldr	r3, [r3, #0]
 8032280:	4a1e      	ldr	r2, [pc, #120]	; (80322fc <DMA_SetConfig+0x354>)
 8032282:	4293      	cmp	r3, r2
 8032284:	d101      	bne.n	803228a <DMA_SetConfig+0x2e2>
 8032286:	2301      	movs	r3, #1
 8032288:	e000      	b.n	803228c <DMA_SetConfig+0x2e4>
 803228a:	2300      	movs	r3, #0
 803228c:	2b00      	cmp	r3, #0
 803228e:	d020      	beq.n	80322d2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8032290:	68fb      	ldr	r3, [r7, #12]
 8032292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8032294:	f003 031f 	and.w	r3, r3, #31
 8032298:	2201      	movs	r2, #1
 803229a:	409a      	lsls	r2, r3
 803229c:	693b      	ldr	r3, [r7, #16]
 803229e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80322a0:	68fb      	ldr	r3, [r7, #12]
 80322a2:	681b      	ldr	r3, [r3, #0]
 80322a4:	683a      	ldr	r2, [r7, #0]
 80322a6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80322a8:	68fb      	ldr	r3, [r7, #12]
 80322aa:	689b      	ldr	r3, [r3, #8]
 80322ac:	2b40      	cmp	r3, #64	; 0x40
 80322ae:	d108      	bne.n	80322c2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80322b0:	68fb      	ldr	r3, [r7, #12]
 80322b2:	681b      	ldr	r3, [r3, #0]
 80322b4:	687a      	ldr	r2, [r7, #4]
 80322b6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80322b8:	68fb      	ldr	r3, [r7, #12]
 80322ba:	681b      	ldr	r3, [r3, #0]
 80322bc:	68ba      	ldr	r2, [r7, #8]
 80322be:	60da      	str	r2, [r3, #12]
}
 80322c0:	e007      	b.n	80322d2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80322c2:	68fb      	ldr	r3, [r7, #12]
 80322c4:	681b      	ldr	r3, [r3, #0]
 80322c6:	68ba      	ldr	r2, [r7, #8]
 80322c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80322ca:	68fb      	ldr	r3, [r7, #12]
 80322cc:	681b      	ldr	r3, [r3, #0]
 80322ce:	687a      	ldr	r2, [r7, #4]
 80322d0:	60da      	str	r2, [r3, #12]
}
 80322d2:	bf00      	nop
 80322d4:	371c      	adds	r7, #28
 80322d6:	46bd      	mov	sp, r7
 80322d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80322dc:	4770      	bx	lr
 80322de:	bf00      	nop
 80322e0:	58025408 	.word	0x58025408
 80322e4:	5802541c 	.word	0x5802541c
 80322e8:	58025430 	.word	0x58025430
 80322ec:	58025444 	.word	0x58025444
 80322f0:	58025458 	.word	0x58025458
 80322f4:	5802546c 	.word	0x5802546c
 80322f8:	58025480 	.word	0x58025480
 80322fc:	58025494 	.word	0x58025494

08032300 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8032300:	b480      	push	{r7}
 8032302:	b085      	sub	sp, #20
 8032304:	af00      	add	r7, sp, #0
 8032306:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8032308:	687b      	ldr	r3, [r7, #4]
 803230a:	681b      	ldr	r3, [r3, #0]
 803230c:	4a42      	ldr	r2, [pc, #264]	; (8032418 <DMA_CalcBaseAndBitshift+0x118>)
 803230e:	4293      	cmp	r3, r2
 8032310:	d04a      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 8032312:	687b      	ldr	r3, [r7, #4]
 8032314:	681b      	ldr	r3, [r3, #0]
 8032316:	4a41      	ldr	r2, [pc, #260]	; (803241c <DMA_CalcBaseAndBitshift+0x11c>)
 8032318:	4293      	cmp	r3, r2
 803231a:	d045      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 803231c:	687b      	ldr	r3, [r7, #4]
 803231e:	681b      	ldr	r3, [r3, #0]
 8032320:	4a3f      	ldr	r2, [pc, #252]	; (8032420 <DMA_CalcBaseAndBitshift+0x120>)
 8032322:	4293      	cmp	r3, r2
 8032324:	d040      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 8032326:	687b      	ldr	r3, [r7, #4]
 8032328:	681b      	ldr	r3, [r3, #0]
 803232a:	4a3e      	ldr	r2, [pc, #248]	; (8032424 <DMA_CalcBaseAndBitshift+0x124>)
 803232c:	4293      	cmp	r3, r2
 803232e:	d03b      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 8032330:	687b      	ldr	r3, [r7, #4]
 8032332:	681b      	ldr	r3, [r3, #0]
 8032334:	4a3c      	ldr	r2, [pc, #240]	; (8032428 <DMA_CalcBaseAndBitshift+0x128>)
 8032336:	4293      	cmp	r3, r2
 8032338:	d036      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 803233a:	687b      	ldr	r3, [r7, #4]
 803233c:	681b      	ldr	r3, [r3, #0]
 803233e:	4a3b      	ldr	r2, [pc, #236]	; (803242c <DMA_CalcBaseAndBitshift+0x12c>)
 8032340:	4293      	cmp	r3, r2
 8032342:	d031      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 8032344:	687b      	ldr	r3, [r7, #4]
 8032346:	681b      	ldr	r3, [r3, #0]
 8032348:	4a39      	ldr	r2, [pc, #228]	; (8032430 <DMA_CalcBaseAndBitshift+0x130>)
 803234a:	4293      	cmp	r3, r2
 803234c:	d02c      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 803234e:	687b      	ldr	r3, [r7, #4]
 8032350:	681b      	ldr	r3, [r3, #0]
 8032352:	4a38      	ldr	r2, [pc, #224]	; (8032434 <DMA_CalcBaseAndBitshift+0x134>)
 8032354:	4293      	cmp	r3, r2
 8032356:	d027      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 8032358:	687b      	ldr	r3, [r7, #4]
 803235a:	681b      	ldr	r3, [r3, #0]
 803235c:	4a36      	ldr	r2, [pc, #216]	; (8032438 <DMA_CalcBaseAndBitshift+0x138>)
 803235e:	4293      	cmp	r3, r2
 8032360:	d022      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 8032362:	687b      	ldr	r3, [r7, #4]
 8032364:	681b      	ldr	r3, [r3, #0]
 8032366:	4a35      	ldr	r2, [pc, #212]	; (803243c <DMA_CalcBaseAndBitshift+0x13c>)
 8032368:	4293      	cmp	r3, r2
 803236a:	d01d      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 803236c:	687b      	ldr	r3, [r7, #4]
 803236e:	681b      	ldr	r3, [r3, #0]
 8032370:	4a33      	ldr	r2, [pc, #204]	; (8032440 <DMA_CalcBaseAndBitshift+0x140>)
 8032372:	4293      	cmp	r3, r2
 8032374:	d018      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 8032376:	687b      	ldr	r3, [r7, #4]
 8032378:	681b      	ldr	r3, [r3, #0]
 803237a:	4a32      	ldr	r2, [pc, #200]	; (8032444 <DMA_CalcBaseAndBitshift+0x144>)
 803237c:	4293      	cmp	r3, r2
 803237e:	d013      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 8032380:	687b      	ldr	r3, [r7, #4]
 8032382:	681b      	ldr	r3, [r3, #0]
 8032384:	4a30      	ldr	r2, [pc, #192]	; (8032448 <DMA_CalcBaseAndBitshift+0x148>)
 8032386:	4293      	cmp	r3, r2
 8032388:	d00e      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 803238a:	687b      	ldr	r3, [r7, #4]
 803238c:	681b      	ldr	r3, [r3, #0]
 803238e:	4a2f      	ldr	r2, [pc, #188]	; (803244c <DMA_CalcBaseAndBitshift+0x14c>)
 8032390:	4293      	cmp	r3, r2
 8032392:	d009      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 8032394:	687b      	ldr	r3, [r7, #4]
 8032396:	681b      	ldr	r3, [r3, #0]
 8032398:	4a2d      	ldr	r2, [pc, #180]	; (8032450 <DMA_CalcBaseAndBitshift+0x150>)
 803239a:	4293      	cmp	r3, r2
 803239c:	d004      	beq.n	80323a8 <DMA_CalcBaseAndBitshift+0xa8>
 803239e:	687b      	ldr	r3, [r7, #4]
 80323a0:	681b      	ldr	r3, [r3, #0]
 80323a2:	4a2c      	ldr	r2, [pc, #176]	; (8032454 <DMA_CalcBaseAndBitshift+0x154>)
 80323a4:	4293      	cmp	r3, r2
 80323a6:	d101      	bne.n	80323ac <DMA_CalcBaseAndBitshift+0xac>
 80323a8:	2301      	movs	r3, #1
 80323aa:	e000      	b.n	80323ae <DMA_CalcBaseAndBitshift+0xae>
 80323ac:	2300      	movs	r3, #0
 80323ae:	2b00      	cmp	r3, #0
 80323b0:	d024      	beq.n	80323fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80323b2:	687b      	ldr	r3, [r7, #4]
 80323b4:	681b      	ldr	r3, [r3, #0]
 80323b6:	b2db      	uxtb	r3, r3
 80323b8:	3b10      	subs	r3, #16
 80323ba:	4a27      	ldr	r2, [pc, #156]	; (8032458 <DMA_CalcBaseAndBitshift+0x158>)
 80323bc:	fba2 2303 	umull	r2, r3, r2, r3
 80323c0:	091b      	lsrs	r3, r3, #4
 80323c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80323c4:	68fb      	ldr	r3, [r7, #12]
 80323c6:	f003 0307 	and.w	r3, r3, #7
 80323ca:	4a24      	ldr	r2, [pc, #144]	; (803245c <DMA_CalcBaseAndBitshift+0x15c>)
 80323cc:	5cd3      	ldrb	r3, [r2, r3]
 80323ce:	461a      	mov	r2, r3
 80323d0:	687b      	ldr	r3, [r7, #4]
 80323d2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80323d4:	68fb      	ldr	r3, [r7, #12]
 80323d6:	2b03      	cmp	r3, #3
 80323d8:	d908      	bls.n	80323ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80323da:	687b      	ldr	r3, [r7, #4]
 80323dc:	681b      	ldr	r3, [r3, #0]
 80323de:	461a      	mov	r2, r3
 80323e0:	4b1f      	ldr	r3, [pc, #124]	; (8032460 <DMA_CalcBaseAndBitshift+0x160>)
 80323e2:	4013      	ands	r3, r2
 80323e4:	1d1a      	adds	r2, r3, #4
 80323e6:	687b      	ldr	r3, [r7, #4]
 80323e8:	659a      	str	r2, [r3, #88]	; 0x58
 80323ea:	e00d      	b.n	8032408 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80323ec:	687b      	ldr	r3, [r7, #4]
 80323ee:	681b      	ldr	r3, [r3, #0]
 80323f0:	461a      	mov	r2, r3
 80323f2:	4b1b      	ldr	r3, [pc, #108]	; (8032460 <DMA_CalcBaseAndBitshift+0x160>)
 80323f4:	4013      	ands	r3, r2
 80323f6:	687a      	ldr	r2, [r7, #4]
 80323f8:	6593      	str	r3, [r2, #88]	; 0x58
 80323fa:	e005      	b.n	8032408 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80323fc:	687b      	ldr	r3, [r7, #4]
 80323fe:	681b      	ldr	r3, [r3, #0]
 8032400:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8032404:	687b      	ldr	r3, [r7, #4]
 8032406:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8032408:	687b      	ldr	r3, [r7, #4]
 803240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 803240c:	4618      	mov	r0, r3
 803240e:	3714      	adds	r7, #20
 8032410:	46bd      	mov	sp, r7
 8032412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032416:	4770      	bx	lr
 8032418:	40020010 	.word	0x40020010
 803241c:	40020028 	.word	0x40020028
 8032420:	40020040 	.word	0x40020040
 8032424:	40020058 	.word	0x40020058
 8032428:	40020070 	.word	0x40020070
 803242c:	40020088 	.word	0x40020088
 8032430:	400200a0 	.word	0x400200a0
 8032434:	400200b8 	.word	0x400200b8
 8032438:	40020410 	.word	0x40020410
 803243c:	40020428 	.word	0x40020428
 8032440:	40020440 	.word	0x40020440
 8032444:	40020458 	.word	0x40020458
 8032448:	40020470 	.word	0x40020470
 803244c:	40020488 	.word	0x40020488
 8032450:	400204a0 	.word	0x400204a0
 8032454:	400204b8 	.word	0x400204b8
 8032458:	aaaaaaab 	.word	0xaaaaaaab
 803245c:	0805c624 	.word	0x0805c624
 8032460:	fffffc00 	.word	0xfffffc00

08032464 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8032464:	b480      	push	{r7}
 8032466:	b085      	sub	sp, #20
 8032468:	af00      	add	r7, sp, #0
 803246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 803246c:	2300      	movs	r3, #0
 803246e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8032470:	687b      	ldr	r3, [r7, #4]
 8032472:	699b      	ldr	r3, [r3, #24]
 8032474:	2b00      	cmp	r3, #0
 8032476:	d120      	bne.n	80324ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8032478:	687b      	ldr	r3, [r7, #4]
 803247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803247c:	2b03      	cmp	r3, #3
 803247e:	d858      	bhi.n	8032532 <DMA_CheckFifoParam+0xce>
 8032480:	a201      	add	r2, pc, #4	; (adr r2, 8032488 <DMA_CheckFifoParam+0x24>)
 8032482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032486:	bf00      	nop
 8032488:	08032499 	.word	0x08032499
 803248c:	080324ab 	.word	0x080324ab
 8032490:	08032499 	.word	0x08032499
 8032494:	08032533 	.word	0x08032533
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8032498:	687b      	ldr	r3, [r7, #4]
 803249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803249c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80324a0:	2b00      	cmp	r3, #0
 80324a2:	d048      	beq.n	8032536 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80324a4:	2301      	movs	r3, #1
 80324a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80324a8:	e045      	b.n	8032536 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80324aa:	687b      	ldr	r3, [r7, #4]
 80324ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80324ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80324b2:	d142      	bne.n	803253a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80324b4:	2301      	movs	r3, #1
 80324b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80324b8:	e03f      	b.n	803253a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80324ba:	687b      	ldr	r3, [r7, #4]
 80324bc:	699b      	ldr	r3, [r3, #24]
 80324be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80324c2:	d123      	bne.n	803250c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80324c4:	687b      	ldr	r3, [r7, #4]
 80324c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80324c8:	2b03      	cmp	r3, #3
 80324ca:	d838      	bhi.n	803253e <DMA_CheckFifoParam+0xda>
 80324cc:	a201      	add	r2, pc, #4	; (adr r2, 80324d4 <DMA_CheckFifoParam+0x70>)
 80324ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80324d2:	bf00      	nop
 80324d4:	080324e5 	.word	0x080324e5
 80324d8:	080324eb 	.word	0x080324eb
 80324dc:	080324e5 	.word	0x080324e5
 80324e0:	080324fd 	.word	0x080324fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80324e4:	2301      	movs	r3, #1
 80324e6:	73fb      	strb	r3, [r7, #15]
        break;
 80324e8:	e030      	b.n	803254c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80324ea:	687b      	ldr	r3, [r7, #4]
 80324ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80324ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80324f2:	2b00      	cmp	r3, #0
 80324f4:	d025      	beq.n	8032542 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80324f6:	2301      	movs	r3, #1
 80324f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80324fa:	e022      	b.n	8032542 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80324fc:	687b      	ldr	r3, [r7, #4]
 80324fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032500:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8032504:	d11f      	bne.n	8032546 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8032506:	2301      	movs	r3, #1
 8032508:	73fb      	strb	r3, [r7, #15]
        }
        break;
 803250a:	e01c      	b.n	8032546 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 803250c:	687b      	ldr	r3, [r7, #4]
 803250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032510:	2b02      	cmp	r3, #2
 8032512:	d902      	bls.n	803251a <DMA_CheckFifoParam+0xb6>
 8032514:	2b03      	cmp	r3, #3
 8032516:	d003      	beq.n	8032520 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8032518:	e018      	b.n	803254c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 803251a:	2301      	movs	r3, #1
 803251c:	73fb      	strb	r3, [r7, #15]
        break;
 803251e:	e015      	b.n	803254c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8032520:	687b      	ldr	r3, [r7, #4]
 8032522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8032528:	2b00      	cmp	r3, #0
 803252a:	d00e      	beq.n	803254a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 803252c:	2301      	movs	r3, #1
 803252e:	73fb      	strb	r3, [r7, #15]
    break;
 8032530:	e00b      	b.n	803254a <DMA_CheckFifoParam+0xe6>
        break;
 8032532:	bf00      	nop
 8032534:	e00a      	b.n	803254c <DMA_CheckFifoParam+0xe8>
        break;
 8032536:	bf00      	nop
 8032538:	e008      	b.n	803254c <DMA_CheckFifoParam+0xe8>
        break;
 803253a:	bf00      	nop
 803253c:	e006      	b.n	803254c <DMA_CheckFifoParam+0xe8>
        break;
 803253e:	bf00      	nop
 8032540:	e004      	b.n	803254c <DMA_CheckFifoParam+0xe8>
        break;
 8032542:	bf00      	nop
 8032544:	e002      	b.n	803254c <DMA_CheckFifoParam+0xe8>
        break;
 8032546:	bf00      	nop
 8032548:	e000      	b.n	803254c <DMA_CheckFifoParam+0xe8>
    break;
 803254a:	bf00      	nop
    }
  }

  return status;
 803254c:	7bfb      	ldrb	r3, [r7, #15]
}
 803254e:	4618      	mov	r0, r3
 8032550:	3714      	adds	r7, #20
 8032552:	46bd      	mov	sp, r7
 8032554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032558:	4770      	bx	lr
 803255a:	bf00      	nop

0803255c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 803255c:	b480      	push	{r7}
 803255e:	b085      	sub	sp, #20
 8032560:	af00      	add	r7, sp, #0
 8032562:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8032564:	687b      	ldr	r3, [r7, #4]
 8032566:	681b      	ldr	r3, [r3, #0]
 8032568:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 803256a:	687b      	ldr	r3, [r7, #4]
 803256c:	681b      	ldr	r3, [r3, #0]
 803256e:	4a38      	ldr	r2, [pc, #224]	; (8032650 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8032570:	4293      	cmp	r3, r2
 8032572:	d022      	beq.n	80325ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8032574:	687b      	ldr	r3, [r7, #4]
 8032576:	681b      	ldr	r3, [r3, #0]
 8032578:	4a36      	ldr	r2, [pc, #216]	; (8032654 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 803257a:	4293      	cmp	r3, r2
 803257c:	d01d      	beq.n	80325ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 803257e:	687b      	ldr	r3, [r7, #4]
 8032580:	681b      	ldr	r3, [r3, #0]
 8032582:	4a35      	ldr	r2, [pc, #212]	; (8032658 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8032584:	4293      	cmp	r3, r2
 8032586:	d018      	beq.n	80325ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8032588:	687b      	ldr	r3, [r7, #4]
 803258a:	681b      	ldr	r3, [r3, #0]
 803258c:	4a33      	ldr	r2, [pc, #204]	; (803265c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 803258e:	4293      	cmp	r3, r2
 8032590:	d013      	beq.n	80325ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8032592:	687b      	ldr	r3, [r7, #4]
 8032594:	681b      	ldr	r3, [r3, #0]
 8032596:	4a32      	ldr	r2, [pc, #200]	; (8032660 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8032598:	4293      	cmp	r3, r2
 803259a:	d00e      	beq.n	80325ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 803259c:	687b      	ldr	r3, [r7, #4]
 803259e:	681b      	ldr	r3, [r3, #0]
 80325a0:	4a30      	ldr	r2, [pc, #192]	; (8032664 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80325a2:	4293      	cmp	r3, r2
 80325a4:	d009      	beq.n	80325ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80325a6:	687b      	ldr	r3, [r7, #4]
 80325a8:	681b      	ldr	r3, [r3, #0]
 80325aa:	4a2f      	ldr	r2, [pc, #188]	; (8032668 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80325ac:	4293      	cmp	r3, r2
 80325ae:	d004      	beq.n	80325ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80325b0:	687b      	ldr	r3, [r7, #4]
 80325b2:	681b      	ldr	r3, [r3, #0]
 80325b4:	4a2d      	ldr	r2, [pc, #180]	; (803266c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80325b6:	4293      	cmp	r3, r2
 80325b8:	d101      	bne.n	80325be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80325ba:	2301      	movs	r3, #1
 80325bc:	e000      	b.n	80325c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80325be:	2300      	movs	r3, #0
 80325c0:	2b00      	cmp	r3, #0
 80325c2:	d01a      	beq.n	80325fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80325c4:	687b      	ldr	r3, [r7, #4]
 80325c6:	681b      	ldr	r3, [r3, #0]
 80325c8:	b2db      	uxtb	r3, r3
 80325ca:	3b08      	subs	r3, #8
 80325cc:	4a28      	ldr	r2, [pc, #160]	; (8032670 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80325ce:	fba2 2303 	umull	r2, r3, r2, r3
 80325d2:	091b      	lsrs	r3, r3, #4
 80325d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80325d6:	68fa      	ldr	r2, [r7, #12]
 80325d8:	4b26      	ldr	r3, [pc, #152]	; (8032674 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80325da:	4413      	add	r3, r2
 80325dc:	009b      	lsls	r3, r3, #2
 80325de:	461a      	mov	r2, r3
 80325e0:	687b      	ldr	r3, [r7, #4]
 80325e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80325e4:	687b      	ldr	r3, [r7, #4]
 80325e6:	4a24      	ldr	r2, [pc, #144]	; (8032678 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80325e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80325ea:	68fb      	ldr	r3, [r7, #12]
 80325ec:	f003 031f 	and.w	r3, r3, #31
 80325f0:	2201      	movs	r2, #1
 80325f2:	409a      	lsls	r2, r3
 80325f4:	687b      	ldr	r3, [r7, #4]
 80325f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80325f8:	e024      	b.n	8032644 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80325fa:	687b      	ldr	r3, [r7, #4]
 80325fc:	681b      	ldr	r3, [r3, #0]
 80325fe:	b2db      	uxtb	r3, r3
 8032600:	3b10      	subs	r3, #16
 8032602:	4a1e      	ldr	r2, [pc, #120]	; (803267c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8032604:	fba2 2303 	umull	r2, r3, r2, r3
 8032608:	091b      	lsrs	r3, r3, #4
 803260a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 803260c:	68bb      	ldr	r3, [r7, #8]
 803260e:	4a1c      	ldr	r2, [pc, #112]	; (8032680 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8032610:	4293      	cmp	r3, r2
 8032612:	d806      	bhi.n	8032622 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8032614:	68bb      	ldr	r3, [r7, #8]
 8032616:	4a1b      	ldr	r2, [pc, #108]	; (8032684 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8032618:	4293      	cmp	r3, r2
 803261a:	d902      	bls.n	8032622 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 803261c:	68fb      	ldr	r3, [r7, #12]
 803261e:	3308      	adds	r3, #8
 8032620:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8032622:	68fa      	ldr	r2, [r7, #12]
 8032624:	4b18      	ldr	r3, [pc, #96]	; (8032688 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8032626:	4413      	add	r3, r2
 8032628:	009b      	lsls	r3, r3, #2
 803262a:	461a      	mov	r2, r3
 803262c:	687b      	ldr	r3, [r7, #4]
 803262e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8032630:	687b      	ldr	r3, [r7, #4]
 8032632:	4a16      	ldr	r2, [pc, #88]	; (803268c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8032634:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8032636:	68fb      	ldr	r3, [r7, #12]
 8032638:	f003 031f 	and.w	r3, r3, #31
 803263c:	2201      	movs	r2, #1
 803263e:	409a      	lsls	r2, r3
 8032640:	687b      	ldr	r3, [r7, #4]
 8032642:	669a      	str	r2, [r3, #104]	; 0x68
}
 8032644:	bf00      	nop
 8032646:	3714      	adds	r7, #20
 8032648:	46bd      	mov	sp, r7
 803264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803264e:	4770      	bx	lr
 8032650:	58025408 	.word	0x58025408
 8032654:	5802541c 	.word	0x5802541c
 8032658:	58025430 	.word	0x58025430
 803265c:	58025444 	.word	0x58025444
 8032660:	58025458 	.word	0x58025458
 8032664:	5802546c 	.word	0x5802546c
 8032668:	58025480 	.word	0x58025480
 803266c:	58025494 	.word	0x58025494
 8032670:	cccccccd 	.word	0xcccccccd
 8032674:	16009600 	.word	0x16009600
 8032678:	58025880 	.word	0x58025880
 803267c:	aaaaaaab 	.word	0xaaaaaaab
 8032680:	400204b8 	.word	0x400204b8
 8032684:	4002040f 	.word	0x4002040f
 8032688:	10008200 	.word	0x10008200
 803268c:	40020880 	.word	0x40020880

08032690 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8032690:	b480      	push	{r7}
 8032692:	b085      	sub	sp, #20
 8032694:	af00      	add	r7, sp, #0
 8032696:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8032698:	687b      	ldr	r3, [r7, #4]
 803269a:	685b      	ldr	r3, [r3, #4]
 803269c:	b2db      	uxtb	r3, r3
 803269e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80326a0:	68fb      	ldr	r3, [r7, #12]
 80326a2:	2b00      	cmp	r3, #0
 80326a4:	d04a      	beq.n	803273c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80326a6:	68fb      	ldr	r3, [r7, #12]
 80326a8:	2b08      	cmp	r3, #8
 80326aa:	d847      	bhi.n	803273c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80326ac:	687b      	ldr	r3, [r7, #4]
 80326ae:	681b      	ldr	r3, [r3, #0]
 80326b0:	4a25      	ldr	r2, [pc, #148]	; (8032748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80326b2:	4293      	cmp	r3, r2
 80326b4:	d022      	beq.n	80326fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80326b6:	687b      	ldr	r3, [r7, #4]
 80326b8:	681b      	ldr	r3, [r3, #0]
 80326ba:	4a24      	ldr	r2, [pc, #144]	; (803274c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80326bc:	4293      	cmp	r3, r2
 80326be:	d01d      	beq.n	80326fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80326c0:	687b      	ldr	r3, [r7, #4]
 80326c2:	681b      	ldr	r3, [r3, #0]
 80326c4:	4a22      	ldr	r2, [pc, #136]	; (8032750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80326c6:	4293      	cmp	r3, r2
 80326c8:	d018      	beq.n	80326fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80326ca:	687b      	ldr	r3, [r7, #4]
 80326cc:	681b      	ldr	r3, [r3, #0]
 80326ce:	4a21      	ldr	r2, [pc, #132]	; (8032754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80326d0:	4293      	cmp	r3, r2
 80326d2:	d013      	beq.n	80326fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80326d4:	687b      	ldr	r3, [r7, #4]
 80326d6:	681b      	ldr	r3, [r3, #0]
 80326d8:	4a1f      	ldr	r2, [pc, #124]	; (8032758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80326da:	4293      	cmp	r3, r2
 80326dc:	d00e      	beq.n	80326fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80326de:	687b      	ldr	r3, [r7, #4]
 80326e0:	681b      	ldr	r3, [r3, #0]
 80326e2:	4a1e      	ldr	r2, [pc, #120]	; (803275c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80326e4:	4293      	cmp	r3, r2
 80326e6:	d009      	beq.n	80326fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80326e8:	687b      	ldr	r3, [r7, #4]
 80326ea:	681b      	ldr	r3, [r3, #0]
 80326ec:	4a1c      	ldr	r2, [pc, #112]	; (8032760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80326ee:	4293      	cmp	r3, r2
 80326f0:	d004      	beq.n	80326fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80326f2:	687b      	ldr	r3, [r7, #4]
 80326f4:	681b      	ldr	r3, [r3, #0]
 80326f6:	4a1b      	ldr	r2, [pc, #108]	; (8032764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80326f8:	4293      	cmp	r3, r2
 80326fa:	d101      	bne.n	8032700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80326fc:	2301      	movs	r3, #1
 80326fe:	e000      	b.n	8032702 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8032700:	2300      	movs	r3, #0
 8032702:	2b00      	cmp	r3, #0
 8032704:	d00a      	beq.n	803271c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8032706:	68fa      	ldr	r2, [r7, #12]
 8032708:	4b17      	ldr	r3, [pc, #92]	; (8032768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 803270a:	4413      	add	r3, r2
 803270c:	009b      	lsls	r3, r3, #2
 803270e:	461a      	mov	r2, r3
 8032710:	687b      	ldr	r3, [r7, #4]
 8032712:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8032714:	687b      	ldr	r3, [r7, #4]
 8032716:	4a15      	ldr	r2, [pc, #84]	; (803276c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8032718:	671a      	str	r2, [r3, #112]	; 0x70
 803271a:	e009      	b.n	8032730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 803271c:	68fa      	ldr	r2, [r7, #12]
 803271e:	4b14      	ldr	r3, [pc, #80]	; (8032770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8032720:	4413      	add	r3, r2
 8032722:	009b      	lsls	r3, r3, #2
 8032724:	461a      	mov	r2, r3
 8032726:	687b      	ldr	r3, [r7, #4]
 8032728:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 803272a:	687b      	ldr	r3, [r7, #4]
 803272c:	4a11      	ldr	r2, [pc, #68]	; (8032774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 803272e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8032730:	68fb      	ldr	r3, [r7, #12]
 8032732:	3b01      	subs	r3, #1
 8032734:	2201      	movs	r2, #1
 8032736:	409a      	lsls	r2, r3
 8032738:	687b      	ldr	r3, [r7, #4]
 803273a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 803273c:	bf00      	nop
 803273e:	3714      	adds	r7, #20
 8032740:	46bd      	mov	sp, r7
 8032742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032746:	4770      	bx	lr
 8032748:	58025408 	.word	0x58025408
 803274c:	5802541c 	.word	0x5802541c
 8032750:	58025430 	.word	0x58025430
 8032754:	58025444 	.word	0x58025444
 8032758:	58025458 	.word	0x58025458
 803275c:	5802546c 	.word	0x5802546c
 8032760:	58025480 	.word	0x58025480
 8032764:	58025494 	.word	0x58025494
 8032768:	1600963f 	.word	0x1600963f
 803276c:	58025940 	.word	0x58025940
 8032770:	1000823f 	.word	0x1000823f
 8032774:	40020940 	.word	0x40020940

08032778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8032778:	b480      	push	{r7}
 803277a:	b089      	sub	sp, #36	; 0x24
 803277c:	af00      	add	r7, sp, #0
 803277e:	6078      	str	r0, [r7, #4]
 8032780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8032782:	2300      	movs	r3, #0
 8032784:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8032786:	4b89      	ldr	r3, [pc, #548]	; (80329ac <HAL_GPIO_Init+0x234>)
 8032788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 803278a:	e194      	b.n	8032ab6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 803278c:	683b      	ldr	r3, [r7, #0]
 803278e:	681a      	ldr	r2, [r3, #0]
 8032790:	2101      	movs	r1, #1
 8032792:	69fb      	ldr	r3, [r7, #28]
 8032794:	fa01 f303 	lsl.w	r3, r1, r3
 8032798:	4013      	ands	r3, r2
 803279a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 803279c:	693b      	ldr	r3, [r7, #16]
 803279e:	2b00      	cmp	r3, #0
 80327a0:	f000 8186 	beq.w	8032ab0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80327a4:	683b      	ldr	r3, [r7, #0]
 80327a6:	685b      	ldr	r3, [r3, #4]
 80327a8:	f003 0303 	and.w	r3, r3, #3
 80327ac:	2b01      	cmp	r3, #1
 80327ae:	d005      	beq.n	80327bc <HAL_GPIO_Init+0x44>
 80327b0:	683b      	ldr	r3, [r7, #0]
 80327b2:	685b      	ldr	r3, [r3, #4]
 80327b4:	f003 0303 	and.w	r3, r3, #3
 80327b8:	2b02      	cmp	r3, #2
 80327ba:	d130      	bne.n	803281e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80327bc:	687b      	ldr	r3, [r7, #4]
 80327be:	689b      	ldr	r3, [r3, #8]
 80327c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80327c2:	69fb      	ldr	r3, [r7, #28]
 80327c4:	005b      	lsls	r3, r3, #1
 80327c6:	2203      	movs	r2, #3
 80327c8:	fa02 f303 	lsl.w	r3, r2, r3
 80327cc:	43db      	mvns	r3, r3
 80327ce:	69ba      	ldr	r2, [r7, #24]
 80327d0:	4013      	ands	r3, r2
 80327d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80327d4:	683b      	ldr	r3, [r7, #0]
 80327d6:	68da      	ldr	r2, [r3, #12]
 80327d8:	69fb      	ldr	r3, [r7, #28]
 80327da:	005b      	lsls	r3, r3, #1
 80327dc:	fa02 f303 	lsl.w	r3, r2, r3
 80327e0:	69ba      	ldr	r2, [r7, #24]
 80327e2:	4313      	orrs	r3, r2
 80327e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80327e6:	687b      	ldr	r3, [r7, #4]
 80327e8:	69ba      	ldr	r2, [r7, #24]
 80327ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80327ec:	687b      	ldr	r3, [r7, #4]
 80327ee:	685b      	ldr	r3, [r3, #4]
 80327f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80327f2:	2201      	movs	r2, #1
 80327f4:	69fb      	ldr	r3, [r7, #28]
 80327f6:	fa02 f303 	lsl.w	r3, r2, r3
 80327fa:	43db      	mvns	r3, r3
 80327fc:	69ba      	ldr	r2, [r7, #24]
 80327fe:	4013      	ands	r3, r2
 8032800:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8032802:	683b      	ldr	r3, [r7, #0]
 8032804:	685b      	ldr	r3, [r3, #4]
 8032806:	091b      	lsrs	r3, r3, #4
 8032808:	f003 0201 	and.w	r2, r3, #1
 803280c:	69fb      	ldr	r3, [r7, #28]
 803280e:	fa02 f303 	lsl.w	r3, r2, r3
 8032812:	69ba      	ldr	r2, [r7, #24]
 8032814:	4313      	orrs	r3, r2
 8032816:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8032818:	687b      	ldr	r3, [r7, #4]
 803281a:	69ba      	ldr	r2, [r7, #24]
 803281c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 803281e:	683b      	ldr	r3, [r7, #0]
 8032820:	685b      	ldr	r3, [r3, #4]
 8032822:	f003 0303 	and.w	r3, r3, #3
 8032826:	2b03      	cmp	r3, #3
 8032828:	d017      	beq.n	803285a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 803282a:	687b      	ldr	r3, [r7, #4]
 803282c:	68db      	ldr	r3, [r3, #12]
 803282e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8032830:	69fb      	ldr	r3, [r7, #28]
 8032832:	005b      	lsls	r3, r3, #1
 8032834:	2203      	movs	r2, #3
 8032836:	fa02 f303 	lsl.w	r3, r2, r3
 803283a:	43db      	mvns	r3, r3
 803283c:	69ba      	ldr	r2, [r7, #24]
 803283e:	4013      	ands	r3, r2
 8032840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8032842:	683b      	ldr	r3, [r7, #0]
 8032844:	689a      	ldr	r2, [r3, #8]
 8032846:	69fb      	ldr	r3, [r7, #28]
 8032848:	005b      	lsls	r3, r3, #1
 803284a:	fa02 f303 	lsl.w	r3, r2, r3
 803284e:	69ba      	ldr	r2, [r7, #24]
 8032850:	4313      	orrs	r3, r2
 8032852:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8032854:	687b      	ldr	r3, [r7, #4]
 8032856:	69ba      	ldr	r2, [r7, #24]
 8032858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 803285a:	683b      	ldr	r3, [r7, #0]
 803285c:	685b      	ldr	r3, [r3, #4]
 803285e:	f003 0303 	and.w	r3, r3, #3
 8032862:	2b02      	cmp	r3, #2
 8032864:	d123      	bne.n	80328ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8032866:	69fb      	ldr	r3, [r7, #28]
 8032868:	08da      	lsrs	r2, r3, #3
 803286a:	687b      	ldr	r3, [r7, #4]
 803286c:	3208      	adds	r2, #8
 803286e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8032874:	69fb      	ldr	r3, [r7, #28]
 8032876:	f003 0307 	and.w	r3, r3, #7
 803287a:	009b      	lsls	r3, r3, #2
 803287c:	220f      	movs	r2, #15
 803287e:	fa02 f303 	lsl.w	r3, r2, r3
 8032882:	43db      	mvns	r3, r3
 8032884:	69ba      	ldr	r2, [r7, #24]
 8032886:	4013      	ands	r3, r2
 8032888:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 803288a:	683b      	ldr	r3, [r7, #0]
 803288c:	691a      	ldr	r2, [r3, #16]
 803288e:	69fb      	ldr	r3, [r7, #28]
 8032890:	f003 0307 	and.w	r3, r3, #7
 8032894:	009b      	lsls	r3, r3, #2
 8032896:	fa02 f303 	lsl.w	r3, r2, r3
 803289a:	69ba      	ldr	r2, [r7, #24]
 803289c:	4313      	orrs	r3, r2
 803289e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80328a0:	69fb      	ldr	r3, [r7, #28]
 80328a2:	08da      	lsrs	r2, r3, #3
 80328a4:	687b      	ldr	r3, [r7, #4]
 80328a6:	3208      	adds	r2, #8
 80328a8:	69b9      	ldr	r1, [r7, #24]
 80328aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80328ae:	687b      	ldr	r3, [r7, #4]
 80328b0:	681b      	ldr	r3, [r3, #0]
 80328b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80328b4:	69fb      	ldr	r3, [r7, #28]
 80328b6:	005b      	lsls	r3, r3, #1
 80328b8:	2203      	movs	r2, #3
 80328ba:	fa02 f303 	lsl.w	r3, r2, r3
 80328be:	43db      	mvns	r3, r3
 80328c0:	69ba      	ldr	r2, [r7, #24]
 80328c2:	4013      	ands	r3, r2
 80328c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80328c6:	683b      	ldr	r3, [r7, #0]
 80328c8:	685b      	ldr	r3, [r3, #4]
 80328ca:	f003 0203 	and.w	r2, r3, #3
 80328ce:	69fb      	ldr	r3, [r7, #28]
 80328d0:	005b      	lsls	r3, r3, #1
 80328d2:	fa02 f303 	lsl.w	r3, r2, r3
 80328d6:	69ba      	ldr	r2, [r7, #24]
 80328d8:	4313      	orrs	r3, r2
 80328da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80328dc:	687b      	ldr	r3, [r7, #4]
 80328de:	69ba      	ldr	r2, [r7, #24]
 80328e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80328e2:	683b      	ldr	r3, [r7, #0]
 80328e4:	685b      	ldr	r3, [r3, #4]
 80328e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80328ea:	2b00      	cmp	r3, #0
 80328ec:	f000 80e0 	beq.w	8032ab0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80328f0:	4b2f      	ldr	r3, [pc, #188]	; (80329b0 <HAL_GPIO_Init+0x238>)
 80328f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80328f6:	4a2e      	ldr	r2, [pc, #184]	; (80329b0 <HAL_GPIO_Init+0x238>)
 80328f8:	f043 0302 	orr.w	r3, r3, #2
 80328fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8032900:	4b2b      	ldr	r3, [pc, #172]	; (80329b0 <HAL_GPIO_Init+0x238>)
 8032902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8032906:	f003 0302 	and.w	r3, r3, #2
 803290a:	60fb      	str	r3, [r7, #12]
 803290c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 803290e:	4a29      	ldr	r2, [pc, #164]	; (80329b4 <HAL_GPIO_Init+0x23c>)
 8032910:	69fb      	ldr	r3, [r7, #28]
 8032912:	089b      	lsrs	r3, r3, #2
 8032914:	3302      	adds	r3, #2
 8032916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 803291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 803291c:	69fb      	ldr	r3, [r7, #28]
 803291e:	f003 0303 	and.w	r3, r3, #3
 8032922:	009b      	lsls	r3, r3, #2
 8032924:	220f      	movs	r2, #15
 8032926:	fa02 f303 	lsl.w	r3, r2, r3
 803292a:	43db      	mvns	r3, r3
 803292c:	69ba      	ldr	r2, [r7, #24]
 803292e:	4013      	ands	r3, r2
 8032930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8032932:	687b      	ldr	r3, [r7, #4]
 8032934:	4a20      	ldr	r2, [pc, #128]	; (80329b8 <HAL_GPIO_Init+0x240>)
 8032936:	4293      	cmp	r3, r2
 8032938:	d052      	beq.n	80329e0 <HAL_GPIO_Init+0x268>
 803293a:	687b      	ldr	r3, [r7, #4]
 803293c:	4a1f      	ldr	r2, [pc, #124]	; (80329bc <HAL_GPIO_Init+0x244>)
 803293e:	4293      	cmp	r3, r2
 8032940:	d031      	beq.n	80329a6 <HAL_GPIO_Init+0x22e>
 8032942:	687b      	ldr	r3, [r7, #4]
 8032944:	4a1e      	ldr	r2, [pc, #120]	; (80329c0 <HAL_GPIO_Init+0x248>)
 8032946:	4293      	cmp	r3, r2
 8032948:	d02b      	beq.n	80329a2 <HAL_GPIO_Init+0x22a>
 803294a:	687b      	ldr	r3, [r7, #4]
 803294c:	4a1d      	ldr	r2, [pc, #116]	; (80329c4 <HAL_GPIO_Init+0x24c>)
 803294e:	4293      	cmp	r3, r2
 8032950:	d025      	beq.n	803299e <HAL_GPIO_Init+0x226>
 8032952:	687b      	ldr	r3, [r7, #4]
 8032954:	4a1c      	ldr	r2, [pc, #112]	; (80329c8 <HAL_GPIO_Init+0x250>)
 8032956:	4293      	cmp	r3, r2
 8032958:	d01f      	beq.n	803299a <HAL_GPIO_Init+0x222>
 803295a:	687b      	ldr	r3, [r7, #4]
 803295c:	4a1b      	ldr	r2, [pc, #108]	; (80329cc <HAL_GPIO_Init+0x254>)
 803295e:	4293      	cmp	r3, r2
 8032960:	d019      	beq.n	8032996 <HAL_GPIO_Init+0x21e>
 8032962:	687b      	ldr	r3, [r7, #4]
 8032964:	4a1a      	ldr	r2, [pc, #104]	; (80329d0 <HAL_GPIO_Init+0x258>)
 8032966:	4293      	cmp	r3, r2
 8032968:	d013      	beq.n	8032992 <HAL_GPIO_Init+0x21a>
 803296a:	687b      	ldr	r3, [r7, #4]
 803296c:	4a19      	ldr	r2, [pc, #100]	; (80329d4 <HAL_GPIO_Init+0x25c>)
 803296e:	4293      	cmp	r3, r2
 8032970:	d00d      	beq.n	803298e <HAL_GPIO_Init+0x216>
 8032972:	687b      	ldr	r3, [r7, #4]
 8032974:	4a18      	ldr	r2, [pc, #96]	; (80329d8 <HAL_GPIO_Init+0x260>)
 8032976:	4293      	cmp	r3, r2
 8032978:	d007      	beq.n	803298a <HAL_GPIO_Init+0x212>
 803297a:	687b      	ldr	r3, [r7, #4]
 803297c:	4a17      	ldr	r2, [pc, #92]	; (80329dc <HAL_GPIO_Init+0x264>)
 803297e:	4293      	cmp	r3, r2
 8032980:	d101      	bne.n	8032986 <HAL_GPIO_Init+0x20e>
 8032982:	2309      	movs	r3, #9
 8032984:	e02d      	b.n	80329e2 <HAL_GPIO_Init+0x26a>
 8032986:	230a      	movs	r3, #10
 8032988:	e02b      	b.n	80329e2 <HAL_GPIO_Init+0x26a>
 803298a:	2308      	movs	r3, #8
 803298c:	e029      	b.n	80329e2 <HAL_GPIO_Init+0x26a>
 803298e:	2307      	movs	r3, #7
 8032990:	e027      	b.n	80329e2 <HAL_GPIO_Init+0x26a>
 8032992:	2306      	movs	r3, #6
 8032994:	e025      	b.n	80329e2 <HAL_GPIO_Init+0x26a>
 8032996:	2305      	movs	r3, #5
 8032998:	e023      	b.n	80329e2 <HAL_GPIO_Init+0x26a>
 803299a:	2304      	movs	r3, #4
 803299c:	e021      	b.n	80329e2 <HAL_GPIO_Init+0x26a>
 803299e:	2303      	movs	r3, #3
 80329a0:	e01f      	b.n	80329e2 <HAL_GPIO_Init+0x26a>
 80329a2:	2302      	movs	r3, #2
 80329a4:	e01d      	b.n	80329e2 <HAL_GPIO_Init+0x26a>
 80329a6:	2301      	movs	r3, #1
 80329a8:	e01b      	b.n	80329e2 <HAL_GPIO_Init+0x26a>
 80329aa:	bf00      	nop
 80329ac:	58000080 	.word	0x58000080
 80329b0:	58024400 	.word	0x58024400
 80329b4:	58000400 	.word	0x58000400
 80329b8:	58020000 	.word	0x58020000
 80329bc:	58020400 	.word	0x58020400
 80329c0:	58020800 	.word	0x58020800
 80329c4:	58020c00 	.word	0x58020c00
 80329c8:	58021000 	.word	0x58021000
 80329cc:	58021400 	.word	0x58021400
 80329d0:	58021800 	.word	0x58021800
 80329d4:	58021c00 	.word	0x58021c00
 80329d8:	58022000 	.word	0x58022000
 80329dc:	58022400 	.word	0x58022400
 80329e0:	2300      	movs	r3, #0
 80329e2:	69fa      	ldr	r2, [r7, #28]
 80329e4:	f002 0203 	and.w	r2, r2, #3
 80329e8:	0092      	lsls	r2, r2, #2
 80329ea:	4093      	lsls	r3, r2
 80329ec:	69ba      	ldr	r2, [r7, #24]
 80329ee:	4313      	orrs	r3, r2
 80329f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80329f2:	4938      	ldr	r1, [pc, #224]	; (8032ad4 <HAL_GPIO_Init+0x35c>)
 80329f4:	69fb      	ldr	r3, [r7, #28]
 80329f6:	089b      	lsrs	r3, r3, #2
 80329f8:	3302      	adds	r3, #2
 80329fa:	69ba      	ldr	r2, [r7, #24]
 80329fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8032a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8032a04:	681b      	ldr	r3, [r3, #0]
 8032a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8032a08:	693b      	ldr	r3, [r7, #16]
 8032a0a:	43db      	mvns	r3, r3
 8032a0c:	69ba      	ldr	r2, [r7, #24]
 8032a0e:	4013      	ands	r3, r2
 8032a10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8032a12:	683b      	ldr	r3, [r7, #0]
 8032a14:	685b      	ldr	r3, [r3, #4]
 8032a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8032a1a:	2b00      	cmp	r3, #0
 8032a1c:	d003      	beq.n	8032a26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8032a1e:	69ba      	ldr	r2, [r7, #24]
 8032a20:	693b      	ldr	r3, [r7, #16]
 8032a22:	4313      	orrs	r3, r2
 8032a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8032a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8032a2a:	69bb      	ldr	r3, [r7, #24]
 8032a2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8032a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8032a32:	685b      	ldr	r3, [r3, #4]
 8032a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8032a36:	693b      	ldr	r3, [r7, #16]
 8032a38:	43db      	mvns	r3, r3
 8032a3a:	69ba      	ldr	r2, [r7, #24]
 8032a3c:	4013      	ands	r3, r2
 8032a3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8032a40:	683b      	ldr	r3, [r7, #0]
 8032a42:	685b      	ldr	r3, [r3, #4]
 8032a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8032a48:	2b00      	cmp	r3, #0
 8032a4a:	d003      	beq.n	8032a54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8032a4c:	69ba      	ldr	r2, [r7, #24]
 8032a4e:	693b      	ldr	r3, [r7, #16]
 8032a50:	4313      	orrs	r3, r2
 8032a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8032a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8032a58:	69bb      	ldr	r3, [r7, #24]
 8032a5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8032a5c:	697b      	ldr	r3, [r7, #20]
 8032a5e:	685b      	ldr	r3, [r3, #4]
 8032a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8032a62:	693b      	ldr	r3, [r7, #16]
 8032a64:	43db      	mvns	r3, r3
 8032a66:	69ba      	ldr	r2, [r7, #24]
 8032a68:	4013      	ands	r3, r2
 8032a6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8032a6c:	683b      	ldr	r3, [r7, #0]
 8032a6e:	685b      	ldr	r3, [r3, #4]
 8032a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032a74:	2b00      	cmp	r3, #0
 8032a76:	d003      	beq.n	8032a80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8032a78:	69ba      	ldr	r2, [r7, #24]
 8032a7a:	693b      	ldr	r3, [r7, #16]
 8032a7c:	4313      	orrs	r3, r2
 8032a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8032a80:	697b      	ldr	r3, [r7, #20]
 8032a82:	69ba      	ldr	r2, [r7, #24]
 8032a84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8032a86:	697b      	ldr	r3, [r7, #20]
 8032a88:	681b      	ldr	r3, [r3, #0]
 8032a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8032a8c:	693b      	ldr	r3, [r7, #16]
 8032a8e:	43db      	mvns	r3, r3
 8032a90:	69ba      	ldr	r2, [r7, #24]
 8032a92:	4013      	ands	r3, r2
 8032a94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8032a96:	683b      	ldr	r3, [r7, #0]
 8032a98:	685b      	ldr	r3, [r3, #4]
 8032a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8032a9e:	2b00      	cmp	r3, #0
 8032aa0:	d003      	beq.n	8032aaa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8032aa2:	69ba      	ldr	r2, [r7, #24]
 8032aa4:	693b      	ldr	r3, [r7, #16]
 8032aa6:	4313      	orrs	r3, r2
 8032aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8032aaa:	697b      	ldr	r3, [r7, #20]
 8032aac:	69ba      	ldr	r2, [r7, #24]
 8032aae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8032ab0:	69fb      	ldr	r3, [r7, #28]
 8032ab2:	3301      	adds	r3, #1
 8032ab4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8032ab6:	683b      	ldr	r3, [r7, #0]
 8032ab8:	681a      	ldr	r2, [r3, #0]
 8032aba:	69fb      	ldr	r3, [r7, #28]
 8032abc:	fa22 f303 	lsr.w	r3, r2, r3
 8032ac0:	2b00      	cmp	r3, #0
 8032ac2:	f47f ae63 	bne.w	803278c <HAL_GPIO_Init+0x14>
  }
}
 8032ac6:	bf00      	nop
 8032ac8:	bf00      	nop
 8032aca:	3724      	adds	r7, #36	; 0x24
 8032acc:	46bd      	mov	sp, r7
 8032ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032ad2:	4770      	bx	lr
 8032ad4:	58000400 	.word	0x58000400

08032ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8032ad8:	b480      	push	{r7}
 8032ada:	b083      	sub	sp, #12
 8032adc:	af00      	add	r7, sp, #0
 8032ade:	6078      	str	r0, [r7, #4]
 8032ae0:	460b      	mov	r3, r1
 8032ae2:	807b      	strh	r3, [r7, #2]
 8032ae4:	4613      	mov	r3, r2
 8032ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8032ae8:	787b      	ldrb	r3, [r7, #1]
 8032aea:	2b00      	cmp	r3, #0
 8032aec:	d003      	beq.n	8032af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8032aee:	887a      	ldrh	r2, [r7, #2]
 8032af0:	687b      	ldr	r3, [r7, #4]
 8032af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8032af4:	e003      	b.n	8032afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8032af6:	887b      	ldrh	r3, [r7, #2]
 8032af8:	041a      	lsls	r2, r3, #16
 8032afa:	687b      	ldr	r3, [r7, #4]
 8032afc:	619a      	str	r2, [r3, #24]
}
 8032afe:	bf00      	nop
 8032b00:	370c      	adds	r7, #12
 8032b02:	46bd      	mov	sp, r7
 8032b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032b08:	4770      	bx	lr
	...

08032b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8032b0c:	b580      	push	{r7, lr}
 8032b0e:	b082      	sub	sp, #8
 8032b10:	af00      	add	r7, sp, #0
 8032b12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8032b14:	687b      	ldr	r3, [r7, #4]
 8032b16:	2b00      	cmp	r3, #0
 8032b18:	d101      	bne.n	8032b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8032b1a:	2301      	movs	r3, #1
 8032b1c:	e07f      	b.n	8032c1e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8032b1e:	687b      	ldr	r3, [r7, #4]
 8032b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032b24:	b2db      	uxtb	r3, r3
 8032b26:	2b00      	cmp	r3, #0
 8032b28:	d106      	bne.n	8032b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8032b2a:	687b      	ldr	r3, [r7, #4]
 8032b2c:	2200      	movs	r2, #0
 8032b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8032b32:	6878      	ldr	r0, [r7, #4]
 8032b34:	f7fa ffa6 	bl	802da84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8032b38:	687b      	ldr	r3, [r7, #4]
 8032b3a:	2224      	movs	r2, #36	; 0x24
 8032b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8032b40:	687b      	ldr	r3, [r7, #4]
 8032b42:	681b      	ldr	r3, [r3, #0]
 8032b44:	681a      	ldr	r2, [r3, #0]
 8032b46:	687b      	ldr	r3, [r7, #4]
 8032b48:	681b      	ldr	r3, [r3, #0]
 8032b4a:	f022 0201 	bic.w	r2, r2, #1
 8032b4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8032b50:	687b      	ldr	r3, [r7, #4]
 8032b52:	685a      	ldr	r2, [r3, #4]
 8032b54:	687b      	ldr	r3, [r7, #4]
 8032b56:	681b      	ldr	r3, [r3, #0]
 8032b58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8032b5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8032b5e:	687b      	ldr	r3, [r7, #4]
 8032b60:	681b      	ldr	r3, [r3, #0]
 8032b62:	689a      	ldr	r2, [r3, #8]
 8032b64:	687b      	ldr	r3, [r7, #4]
 8032b66:	681b      	ldr	r3, [r3, #0]
 8032b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8032b6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8032b6e:	687b      	ldr	r3, [r7, #4]
 8032b70:	68db      	ldr	r3, [r3, #12]
 8032b72:	2b01      	cmp	r3, #1
 8032b74:	d107      	bne.n	8032b86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8032b76:	687b      	ldr	r3, [r7, #4]
 8032b78:	689a      	ldr	r2, [r3, #8]
 8032b7a:	687b      	ldr	r3, [r7, #4]
 8032b7c:	681b      	ldr	r3, [r3, #0]
 8032b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8032b82:	609a      	str	r2, [r3, #8]
 8032b84:	e006      	b.n	8032b94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8032b86:	687b      	ldr	r3, [r7, #4]
 8032b88:	689a      	ldr	r2, [r3, #8]
 8032b8a:	687b      	ldr	r3, [r7, #4]
 8032b8c:	681b      	ldr	r3, [r3, #0]
 8032b8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8032b92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8032b94:	687b      	ldr	r3, [r7, #4]
 8032b96:	68db      	ldr	r3, [r3, #12]
 8032b98:	2b02      	cmp	r3, #2
 8032b9a:	d104      	bne.n	8032ba6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8032b9c:	687b      	ldr	r3, [r7, #4]
 8032b9e:	681b      	ldr	r3, [r3, #0]
 8032ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8032ba4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8032ba6:	687b      	ldr	r3, [r7, #4]
 8032ba8:	681b      	ldr	r3, [r3, #0]
 8032baa:	6859      	ldr	r1, [r3, #4]
 8032bac:	687b      	ldr	r3, [r7, #4]
 8032bae:	681a      	ldr	r2, [r3, #0]
 8032bb0:	4b1d      	ldr	r3, [pc, #116]	; (8032c28 <HAL_I2C_Init+0x11c>)
 8032bb2:	430b      	orrs	r3, r1
 8032bb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8032bb6:	687b      	ldr	r3, [r7, #4]
 8032bb8:	681b      	ldr	r3, [r3, #0]
 8032bba:	68da      	ldr	r2, [r3, #12]
 8032bbc:	687b      	ldr	r3, [r7, #4]
 8032bbe:	681b      	ldr	r3, [r3, #0]
 8032bc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8032bc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8032bc6:	687b      	ldr	r3, [r7, #4]
 8032bc8:	691a      	ldr	r2, [r3, #16]
 8032bca:	687b      	ldr	r3, [r7, #4]
 8032bcc:	695b      	ldr	r3, [r3, #20]
 8032bce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8032bd2:	687b      	ldr	r3, [r7, #4]
 8032bd4:	699b      	ldr	r3, [r3, #24]
 8032bd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8032bd8:	687b      	ldr	r3, [r7, #4]
 8032bda:	681b      	ldr	r3, [r3, #0]
 8032bdc:	430a      	orrs	r2, r1
 8032bde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8032be0:	687b      	ldr	r3, [r7, #4]
 8032be2:	69d9      	ldr	r1, [r3, #28]
 8032be4:	687b      	ldr	r3, [r7, #4]
 8032be6:	6a1a      	ldr	r2, [r3, #32]
 8032be8:	687b      	ldr	r3, [r7, #4]
 8032bea:	681b      	ldr	r3, [r3, #0]
 8032bec:	430a      	orrs	r2, r1
 8032bee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8032bf0:	687b      	ldr	r3, [r7, #4]
 8032bf2:	681b      	ldr	r3, [r3, #0]
 8032bf4:	681a      	ldr	r2, [r3, #0]
 8032bf6:	687b      	ldr	r3, [r7, #4]
 8032bf8:	681b      	ldr	r3, [r3, #0]
 8032bfa:	f042 0201 	orr.w	r2, r2, #1
 8032bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8032c00:	687b      	ldr	r3, [r7, #4]
 8032c02:	2200      	movs	r2, #0
 8032c04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8032c06:	687b      	ldr	r3, [r7, #4]
 8032c08:	2220      	movs	r2, #32
 8032c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8032c0e:	687b      	ldr	r3, [r7, #4]
 8032c10:	2200      	movs	r2, #0
 8032c12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8032c14:	687b      	ldr	r3, [r7, #4]
 8032c16:	2200      	movs	r2, #0
 8032c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8032c1c:	2300      	movs	r3, #0
}
 8032c1e:	4618      	mov	r0, r3
 8032c20:	3708      	adds	r7, #8
 8032c22:	46bd      	mov	sp, r7
 8032c24:	bd80      	pop	{r7, pc}
 8032c26:	bf00      	nop
 8032c28:	02008000 	.word	0x02008000

08032c2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8032c2c:	b580      	push	{r7, lr}
 8032c2e:	b084      	sub	sp, #16
 8032c30:	af00      	add	r7, sp, #0
 8032c32:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8032c34:	687b      	ldr	r3, [r7, #4]
 8032c36:	681b      	ldr	r3, [r3, #0]
 8032c38:	699b      	ldr	r3, [r3, #24]
 8032c3a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8032c3c:	687b      	ldr	r3, [r7, #4]
 8032c3e:	681b      	ldr	r3, [r3, #0]
 8032c40:	681b      	ldr	r3, [r3, #0]
 8032c42:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8032c44:	687b      	ldr	r3, [r7, #4]
 8032c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032c48:	2b00      	cmp	r3, #0
 8032c4a:	d005      	beq.n	8032c58 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8032c4c:	687b      	ldr	r3, [r7, #4]
 8032c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8032c50:	68ba      	ldr	r2, [r7, #8]
 8032c52:	68f9      	ldr	r1, [r7, #12]
 8032c54:	6878      	ldr	r0, [r7, #4]
 8032c56:	4798      	blx	r3
  }
}
 8032c58:	bf00      	nop
 8032c5a:	3710      	adds	r7, #16
 8032c5c:	46bd      	mov	sp, r7
 8032c5e:	bd80      	pop	{r7, pc}

08032c60 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8032c60:	b580      	push	{r7, lr}
 8032c62:	b086      	sub	sp, #24
 8032c64:	af00      	add	r7, sp, #0
 8032c66:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8032c68:	687b      	ldr	r3, [r7, #4]
 8032c6a:	681b      	ldr	r3, [r3, #0]
 8032c6c:	699b      	ldr	r3, [r3, #24]
 8032c6e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8032c70:	687b      	ldr	r3, [r7, #4]
 8032c72:	681b      	ldr	r3, [r3, #0]
 8032c74:	681b      	ldr	r3, [r3, #0]
 8032c76:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8032c78:	697b      	ldr	r3, [r7, #20]
 8032c7a:	0a1b      	lsrs	r3, r3, #8
 8032c7c:	f003 0301 	and.w	r3, r3, #1
 8032c80:	2b00      	cmp	r3, #0
 8032c82:	d010      	beq.n	8032ca6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8032c84:	693b      	ldr	r3, [r7, #16]
 8032c86:	09db      	lsrs	r3, r3, #7
 8032c88:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8032c8c:	2b00      	cmp	r3, #0
 8032c8e:	d00a      	beq.n	8032ca6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8032c90:	687b      	ldr	r3, [r7, #4]
 8032c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032c94:	f043 0201 	orr.w	r2, r3, #1
 8032c98:	687b      	ldr	r3, [r7, #4]
 8032c9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8032c9c:	687b      	ldr	r3, [r7, #4]
 8032c9e:	681b      	ldr	r3, [r3, #0]
 8032ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8032ca4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8032ca6:	697b      	ldr	r3, [r7, #20]
 8032ca8:	0a9b      	lsrs	r3, r3, #10
 8032caa:	f003 0301 	and.w	r3, r3, #1
 8032cae:	2b00      	cmp	r3, #0
 8032cb0:	d010      	beq.n	8032cd4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8032cb2:	693b      	ldr	r3, [r7, #16]
 8032cb4:	09db      	lsrs	r3, r3, #7
 8032cb6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8032cba:	2b00      	cmp	r3, #0
 8032cbc:	d00a      	beq.n	8032cd4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8032cbe:	687b      	ldr	r3, [r7, #4]
 8032cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032cc2:	f043 0208 	orr.w	r2, r3, #8
 8032cc6:	687b      	ldr	r3, [r7, #4]
 8032cc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8032cca:	687b      	ldr	r3, [r7, #4]
 8032ccc:	681b      	ldr	r3, [r3, #0]
 8032cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8032cd2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8032cd4:	697b      	ldr	r3, [r7, #20]
 8032cd6:	0a5b      	lsrs	r3, r3, #9
 8032cd8:	f003 0301 	and.w	r3, r3, #1
 8032cdc:	2b00      	cmp	r3, #0
 8032cde:	d010      	beq.n	8032d02 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8032ce0:	693b      	ldr	r3, [r7, #16]
 8032ce2:	09db      	lsrs	r3, r3, #7
 8032ce4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8032ce8:	2b00      	cmp	r3, #0
 8032cea:	d00a      	beq.n	8032d02 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8032cec:	687b      	ldr	r3, [r7, #4]
 8032cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032cf0:	f043 0202 	orr.w	r2, r3, #2
 8032cf4:	687b      	ldr	r3, [r7, #4]
 8032cf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8032cf8:	687b      	ldr	r3, [r7, #4]
 8032cfa:	681b      	ldr	r3, [r3, #0]
 8032cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8032d00:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8032d02:	687b      	ldr	r3, [r7, #4]
 8032d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032d06:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8032d08:	68fb      	ldr	r3, [r7, #12]
 8032d0a:	f003 030b 	and.w	r3, r3, #11
 8032d0e:	2b00      	cmp	r3, #0
 8032d10:	d003      	beq.n	8032d1a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8032d12:	68f9      	ldr	r1, [r7, #12]
 8032d14:	6878      	ldr	r0, [r7, #4]
 8032d16:	f000 fc77 	bl	8033608 <I2C_ITError>
  }
}
 8032d1a:	bf00      	nop
 8032d1c:	3718      	adds	r7, #24
 8032d1e:	46bd      	mov	sp, r7
 8032d20:	bd80      	pop	{r7, pc}

08032d22 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8032d22:	b480      	push	{r7}
 8032d24:	b083      	sub	sp, #12
 8032d26:	af00      	add	r7, sp, #0
 8032d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8032d2a:	bf00      	nop
 8032d2c:	370c      	adds	r7, #12
 8032d2e:	46bd      	mov	sp, r7
 8032d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d34:	4770      	bx	lr

08032d36 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8032d36:	b480      	push	{r7}
 8032d38:	b083      	sub	sp, #12
 8032d3a:	af00      	add	r7, sp, #0
 8032d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8032d3e:	bf00      	nop
 8032d40:	370c      	adds	r7, #12
 8032d42:	46bd      	mov	sp, r7
 8032d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d48:	4770      	bx	lr

08032d4a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8032d4a:	b480      	push	{r7}
 8032d4c:	b083      	sub	sp, #12
 8032d4e:	af00      	add	r7, sp, #0
 8032d50:	6078      	str	r0, [r7, #4]
 8032d52:	460b      	mov	r3, r1
 8032d54:	70fb      	strb	r3, [r7, #3]
 8032d56:	4613      	mov	r3, r2
 8032d58:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8032d5a:	bf00      	nop
 8032d5c:	370c      	adds	r7, #12
 8032d5e:	46bd      	mov	sp, r7
 8032d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d64:	4770      	bx	lr

08032d66 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8032d66:	b480      	push	{r7}
 8032d68:	b083      	sub	sp, #12
 8032d6a:	af00      	add	r7, sp, #0
 8032d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8032d6e:	bf00      	nop
 8032d70:	370c      	adds	r7, #12
 8032d72:	46bd      	mov	sp, r7
 8032d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d78:	4770      	bx	lr

08032d7a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8032d7a:	b480      	push	{r7}
 8032d7c:	b083      	sub	sp, #12
 8032d7e:	af00      	add	r7, sp, #0
 8032d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8032d82:	bf00      	nop
 8032d84:	370c      	adds	r7, #12
 8032d86:	46bd      	mov	sp, r7
 8032d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d8c:	4770      	bx	lr

08032d8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8032d8e:	b480      	push	{r7}
 8032d90:	b083      	sub	sp, #12
 8032d92:	af00      	add	r7, sp, #0
 8032d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8032d96:	bf00      	nop
 8032d98:	370c      	adds	r7, #12
 8032d9a:	46bd      	mov	sp, r7
 8032d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032da0:	4770      	bx	lr

08032da2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8032da2:	b580      	push	{r7, lr}
 8032da4:	b086      	sub	sp, #24
 8032da6:	af00      	add	r7, sp, #0
 8032da8:	60f8      	str	r0, [r7, #12]
 8032daa:	60b9      	str	r1, [r7, #8]
 8032dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8032dae:	68fb      	ldr	r3, [r7, #12]
 8032db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8032db4:	68bb      	ldr	r3, [r7, #8]
 8032db6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8032db8:	68fb      	ldr	r3, [r7, #12]
 8032dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8032dbe:	2b01      	cmp	r3, #1
 8032dc0:	d101      	bne.n	8032dc6 <I2C_Slave_ISR_IT+0x24>
 8032dc2:	2302      	movs	r3, #2
 8032dc4:	e0ec      	b.n	8032fa0 <I2C_Slave_ISR_IT+0x1fe>
 8032dc6:	68fb      	ldr	r3, [r7, #12]
 8032dc8:	2201      	movs	r2, #1
 8032dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8032dce:	693b      	ldr	r3, [r7, #16]
 8032dd0:	095b      	lsrs	r3, r3, #5
 8032dd2:	f003 0301 	and.w	r3, r3, #1
 8032dd6:	2b00      	cmp	r3, #0
 8032dd8:	d009      	beq.n	8032dee <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8032dda:	687b      	ldr	r3, [r7, #4]
 8032ddc:	095b      	lsrs	r3, r3, #5
 8032dde:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8032de2:	2b00      	cmp	r3, #0
 8032de4:	d003      	beq.n	8032dee <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8032de6:	6939      	ldr	r1, [r7, #16]
 8032de8:	68f8      	ldr	r0, [r7, #12]
 8032dea:	f000 f9bf 	bl	803316c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8032dee:	693b      	ldr	r3, [r7, #16]
 8032df0:	091b      	lsrs	r3, r3, #4
 8032df2:	f003 0301 	and.w	r3, r3, #1
 8032df6:	2b00      	cmp	r3, #0
 8032df8:	d04d      	beq.n	8032e96 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8032dfa:	687b      	ldr	r3, [r7, #4]
 8032dfc:	091b      	lsrs	r3, r3, #4
 8032dfe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8032e02:	2b00      	cmp	r3, #0
 8032e04:	d047      	beq.n	8032e96 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8032e06:	68fb      	ldr	r3, [r7, #12]
 8032e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032e0a:	b29b      	uxth	r3, r3
 8032e0c:	2b00      	cmp	r3, #0
 8032e0e:	d128      	bne.n	8032e62 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8032e10:	68fb      	ldr	r3, [r7, #12]
 8032e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032e16:	b2db      	uxtb	r3, r3
 8032e18:	2b28      	cmp	r3, #40	; 0x28
 8032e1a:	d108      	bne.n	8032e2e <I2C_Slave_ISR_IT+0x8c>
 8032e1c:	697b      	ldr	r3, [r7, #20]
 8032e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8032e22:	d104      	bne.n	8032e2e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8032e24:	6939      	ldr	r1, [r7, #16]
 8032e26:	68f8      	ldr	r0, [r7, #12]
 8032e28:	f000 fb98 	bl	803355c <I2C_ITListenCplt>
 8032e2c:	e032      	b.n	8032e94 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8032e2e:	68fb      	ldr	r3, [r7, #12]
 8032e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032e34:	b2db      	uxtb	r3, r3
 8032e36:	2b29      	cmp	r3, #41	; 0x29
 8032e38:	d10e      	bne.n	8032e58 <I2C_Slave_ISR_IT+0xb6>
 8032e3a:	697b      	ldr	r3, [r7, #20]
 8032e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8032e40:	d00a      	beq.n	8032e58 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8032e42:	68fb      	ldr	r3, [r7, #12]
 8032e44:	681b      	ldr	r3, [r3, #0]
 8032e46:	2210      	movs	r2, #16
 8032e48:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8032e4a:	68f8      	ldr	r0, [r7, #12]
 8032e4c:	f000 fcd3 	bl	80337f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8032e50:	68f8      	ldr	r0, [r7, #12]
 8032e52:	f000 f92d 	bl	80330b0 <I2C_ITSlaveSeqCplt>
 8032e56:	e01d      	b.n	8032e94 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8032e58:	68fb      	ldr	r3, [r7, #12]
 8032e5a:	681b      	ldr	r3, [r3, #0]
 8032e5c:	2210      	movs	r2, #16
 8032e5e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8032e60:	e096      	b.n	8032f90 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8032e62:	68fb      	ldr	r3, [r7, #12]
 8032e64:	681b      	ldr	r3, [r3, #0]
 8032e66:	2210      	movs	r2, #16
 8032e68:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8032e6a:	68fb      	ldr	r3, [r7, #12]
 8032e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032e6e:	f043 0204 	orr.w	r2, r3, #4
 8032e72:	68fb      	ldr	r3, [r7, #12]
 8032e74:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8032e76:	697b      	ldr	r3, [r7, #20]
 8032e78:	2b00      	cmp	r3, #0
 8032e7a:	d004      	beq.n	8032e86 <I2C_Slave_ISR_IT+0xe4>
 8032e7c:	697b      	ldr	r3, [r7, #20]
 8032e7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8032e82:	f040 8085 	bne.w	8032f90 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8032e86:	68fb      	ldr	r3, [r7, #12]
 8032e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032e8a:	4619      	mov	r1, r3
 8032e8c:	68f8      	ldr	r0, [r7, #12]
 8032e8e:	f000 fbbb 	bl	8033608 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8032e92:	e07d      	b.n	8032f90 <I2C_Slave_ISR_IT+0x1ee>
 8032e94:	e07c      	b.n	8032f90 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8032e96:	693b      	ldr	r3, [r7, #16]
 8032e98:	089b      	lsrs	r3, r3, #2
 8032e9a:	f003 0301 	and.w	r3, r3, #1
 8032e9e:	2b00      	cmp	r3, #0
 8032ea0:	d030      	beq.n	8032f04 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8032ea2:	687b      	ldr	r3, [r7, #4]
 8032ea4:	089b      	lsrs	r3, r3, #2
 8032ea6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8032eaa:	2b00      	cmp	r3, #0
 8032eac:	d02a      	beq.n	8032f04 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8032eae:	68fb      	ldr	r3, [r7, #12]
 8032eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032eb2:	b29b      	uxth	r3, r3
 8032eb4:	2b00      	cmp	r3, #0
 8032eb6:	d018      	beq.n	8032eea <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8032eb8:	68fb      	ldr	r3, [r7, #12]
 8032eba:	681b      	ldr	r3, [r3, #0]
 8032ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8032ebe:	68fb      	ldr	r3, [r7, #12]
 8032ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032ec2:	b2d2      	uxtb	r2, r2
 8032ec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8032ec6:	68fb      	ldr	r3, [r7, #12]
 8032ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032eca:	1c5a      	adds	r2, r3, #1
 8032ecc:	68fb      	ldr	r3, [r7, #12]
 8032ece:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8032ed0:	68fb      	ldr	r3, [r7, #12]
 8032ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8032ed4:	3b01      	subs	r3, #1
 8032ed6:	b29a      	uxth	r2, r3
 8032ed8:	68fb      	ldr	r3, [r7, #12]
 8032eda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8032edc:	68fb      	ldr	r3, [r7, #12]
 8032ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032ee0:	b29b      	uxth	r3, r3
 8032ee2:	3b01      	subs	r3, #1
 8032ee4:	b29a      	uxth	r2, r3
 8032ee6:	68fb      	ldr	r3, [r7, #12]
 8032ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8032eea:	68fb      	ldr	r3, [r7, #12]
 8032eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032eee:	b29b      	uxth	r3, r3
 8032ef0:	2b00      	cmp	r3, #0
 8032ef2:	d14f      	bne.n	8032f94 <I2C_Slave_ISR_IT+0x1f2>
 8032ef4:	697b      	ldr	r3, [r7, #20]
 8032ef6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8032efa:	d04b      	beq.n	8032f94 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8032efc:	68f8      	ldr	r0, [r7, #12]
 8032efe:	f000 f8d7 	bl	80330b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8032f02:	e047      	b.n	8032f94 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8032f04:	693b      	ldr	r3, [r7, #16]
 8032f06:	08db      	lsrs	r3, r3, #3
 8032f08:	f003 0301 	and.w	r3, r3, #1
 8032f0c:	2b00      	cmp	r3, #0
 8032f0e:	d00a      	beq.n	8032f26 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8032f10:	687b      	ldr	r3, [r7, #4]
 8032f12:	08db      	lsrs	r3, r3, #3
 8032f14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8032f18:	2b00      	cmp	r3, #0
 8032f1a:	d004      	beq.n	8032f26 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8032f1c:	6939      	ldr	r1, [r7, #16]
 8032f1e:	68f8      	ldr	r0, [r7, #12]
 8032f20:	f000 f842 	bl	8032fa8 <I2C_ITAddrCplt>
 8032f24:	e037      	b.n	8032f96 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8032f26:	693b      	ldr	r3, [r7, #16]
 8032f28:	085b      	lsrs	r3, r3, #1
 8032f2a:	f003 0301 	and.w	r3, r3, #1
 8032f2e:	2b00      	cmp	r3, #0
 8032f30:	d031      	beq.n	8032f96 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8032f32:	687b      	ldr	r3, [r7, #4]
 8032f34:	085b      	lsrs	r3, r3, #1
 8032f36:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8032f3a:	2b00      	cmp	r3, #0
 8032f3c:	d02b      	beq.n	8032f96 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8032f3e:	68fb      	ldr	r3, [r7, #12]
 8032f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032f42:	b29b      	uxth	r3, r3
 8032f44:	2b00      	cmp	r3, #0
 8032f46:	d018      	beq.n	8032f7a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8032f48:	68fb      	ldr	r3, [r7, #12]
 8032f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032f4c:	781a      	ldrb	r2, [r3, #0]
 8032f4e:	68fb      	ldr	r3, [r7, #12]
 8032f50:	681b      	ldr	r3, [r3, #0]
 8032f52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8032f54:	68fb      	ldr	r3, [r7, #12]
 8032f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032f58:	1c5a      	adds	r2, r3, #1
 8032f5a:	68fb      	ldr	r3, [r7, #12]
 8032f5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8032f5e:	68fb      	ldr	r3, [r7, #12]
 8032f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032f62:	b29b      	uxth	r3, r3
 8032f64:	3b01      	subs	r3, #1
 8032f66:	b29a      	uxth	r2, r3
 8032f68:	68fb      	ldr	r3, [r7, #12]
 8032f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8032f6c:	68fb      	ldr	r3, [r7, #12]
 8032f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8032f70:	3b01      	subs	r3, #1
 8032f72:	b29a      	uxth	r2, r3
 8032f74:	68fb      	ldr	r3, [r7, #12]
 8032f76:	851a      	strh	r2, [r3, #40]	; 0x28
 8032f78:	e00d      	b.n	8032f96 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8032f7a:	697b      	ldr	r3, [r7, #20]
 8032f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8032f80:	d002      	beq.n	8032f88 <I2C_Slave_ISR_IT+0x1e6>
 8032f82:	697b      	ldr	r3, [r7, #20]
 8032f84:	2b00      	cmp	r3, #0
 8032f86:	d106      	bne.n	8032f96 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8032f88:	68f8      	ldr	r0, [r7, #12]
 8032f8a:	f000 f891 	bl	80330b0 <I2C_ITSlaveSeqCplt>
 8032f8e:	e002      	b.n	8032f96 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8032f90:	bf00      	nop
 8032f92:	e000      	b.n	8032f96 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8032f94:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8032f96:	68fb      	ldr	r3, [r7, #12]
 8032f98:	2200      	movs	r2, #0
 8032f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8032f9e:	2300      	movs	r3, #0
}
 8032fa0:	4618      	mov	r0, r3
 8032fa2:	3718      	adds	r7, #24
 8032fa4:	46bd      	mov	sp, r7
 8032fa6:	bd80      	pop	{r7, pc}

08032fa8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8032fa8:	b580      	push	{r7, lr}
 8032faa:	b084      	sub	sp, #16
 8032fac:	af00      	add	r7, sp, #0
 8032fae:	6078      	str	r0, [r7, #4]
 8032fb0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8032fb2:	687b      	ldr	r3, [r7, #4]
 8032fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032fb8:	b2db      	uxtb	r3, r3
 8032fba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8032fbe:	2b28      	cmp	r3, #40	; 0x28
 8032fc0:	d16a      	bne.n	8033098 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8032fc2:	687b      	ldr	r3, [r7, #4]
 8032fc4:	681b      	ldr	r3, [r3, #0]
 8032fc6:	699b      	ldr	r3, [r3, #24]
 8032fc8:	0c1b      	lsrs	r3, r3, #16
 8032fca:	b2db      	uxtb	r3, r3
 8032fcc:	f003 0301 	and.w	r3, r3, #1
 8032fd0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8032fd2:	687b      	ldr	r3, [r7, #4]
 8032fd4:	681b      	ldr	r3, [r3, #0]
 8032fd6:	699b      	ldr	r3, [r3, #24]
 8032fd8:	0c1b      	lsrs	r3, r3, #16
 8032fda:	b29b      	uxth	r3, r3
 8032fdc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8032fe0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8032fe2:	687b      	ldr	r3, [r7, #4]
 8032fe4:	681b      	ldr	r3, [r3, #0]
 8032fe6:	689b      	ldr	r3, [r3, #8]
 8032fe8:	b29b      	uxth	r3, r3
 8032fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8032fee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8032ff0:	687b      	ldr	r3, [r7, #4]
 8032ff2:	681b      	ldr	r3, [r3, #0]
 8032ff4:	68db      	ldr	r3, [r3, #12]
 8032ff6:	b29b      	uxth	r3, r3
 8032ff8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8032ffc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8032ffe:	687b      	ldr	r3, [r7, #4]
 8033000:	68db      	ldr	r3, [r3, #12]
 8033002:	2b02      	cmp	r3, #2
 8033004:	d138      	bne.n	8033078 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8033006:	897b      	ldrh	r3, [r7, #10]
 8033008:	09db      	lsrs	r3, r3, #7
 803300a:	b29a      	uxth	r2, r3
 803300c:	89bb      	ldrh	r3, [r7, #12]
 803300e:	4053      	eors	r3, r2
 8033010:	b29b      	uxth	r3, r3
 8033012:	f003 0306 	and.w	r3, r3, #6
 8033016:	2b00      	cmp	r3, #0
 8033018:	d11c      	bne.n	8033054 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 803301a:	897b      	ldrh	r3, [r7, #10]
 803301c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 803301e:	687b      	ldr	r3, [r7, #4]
 8033020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8033022:	1c5a      	adds	r2, r3, #1
 8033024:	687b      	ldr	r3, [r7, #4]
 8033026:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8033028:	687b      	ldr	r3, [r7, #4]
 803302a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803302c:	2b02      	cmp	r3, #2
 803302e:	d13b      	bne.n	80330a8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8033030:	687b      	ldr	r3, [r7, #4]
 8033032:	2200      	movs	r2, #0
 8033034:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8033036:	687b      	ldr	r3, [r7, #4]
 8033038:	681b      	ldr	r3, [r3, #0]
 803303a:	2208      	movs	r2, #8
 803303c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 803303e:	687b      	ldr	r3, [r7, #4]
 8033040:	2200      	movs	r2, #0
 8033042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8033046:	89ba      	ldrh	r2, [r7, #12]
 8033048:	7bfb      	ldrb	r3, [r7, #15]
 803304a:	4619      	mov	r1, r3
 803304c:	6878      	ldr	r0, [r7, #4]
 803304e:	f7ff fe7c 	bl	8032d4a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8033052:	e029      	b.n	80330a8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8033054:	893b      	ldrh	r3, [r7, #8]
 8033056:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8033058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 803305c:	6878      	ldr	r0, [r7, #4]
 803305e:	f000 fc0c 	bl	803387a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8033062:	687b      	ldr	r3, [r7, #4]
 8033064:	2200      	movs	r2, #0
 8033066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 803306a:	89ba      	ldrh	r2, [r7, #12]
 803306c:	7bfb      	ldrb	r3, [r7, #15]
 803306e:	4619      	mov	r1, r3
 8033070:	6878      	ldr	r0, [r7, #4]
 8033072:	f7ff fe6a 	bl	8032d4a <HAL_I2C_AddrCallback>
}
 8033076:	e017      	b.n	80330a8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8033078:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 803307c:	6878      	ldr	r0, [r7, #4]
 803307e:	f000 fbfc 	bl	803387a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8033082:	687b      	ldr	r3, [r7, #4]
 8033084:	2200      	movs	r2, #0
 8033086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 803308a:	89ba      	ldrh	r2, [r7, #12]
 803308c:	7bfb      	ldrb	r3, [r7, #15]
 803308e:	4619      	mov	r1, r3
 8033090:	6878      	ldr	r0, [r7, #4]
 8033092:	f7ff fe5a 	bl	8032d4a <HAL_I2C_AddrCallback>
}
 8033096:	e007      	b.n	80330a8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8033098:	687b      	ldr	r3, [r7, #4]
 803309a:	681b      	ldr	r3, [r3, #0]
 803309c:	2208      	movs	r2, #8
 803309e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80330a0:	687b      	ldr	r3, [r7, #4]
 80330a2:	2200      	movs	r2, #0
 80330a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80330a8:	bf00      	nop
 80330aa:	3710      	adds	r7, #16
 80330ac:	46bd      	mov	sp, r7
 80330ae:	bd80      	pop	{r7, pc}

080330b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80330b0:	b580      	push	{r7, lr}
 80330b2:	b084      	sub	sp, #16
 80330b4:	af00      	add	r7, sp, #0
 80330b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80330b8:	687b      	ldr	r3, [r7, #4]
 80330ba:	681b      	ldr	r3, [r3, #0]
 80330bc:	681b      	ldr	r3, [r3, #0]
 80330be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80330c0:	687b      	ldr	r3, [r7, #4]
 80330c2:	2200      	movs	r2, #0
 80330c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80330c8:	68fb      	ldr	r3, [r7, #12]
 80330ca:	0b9b      	lsrs	r3, r3, #14
 80330cc:	f003 0301 	and.w	r3, r3, #1
 80330d0:	2b00      	cmp	r3, #0
 80330d2:	d008      	beq.n	80330e6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80330d4:	687b      	ldr	r3, [r7, #4]
 80330d6:	681b      	ldr	r3, [r3, #0]
 80330d8:	681a      	ldr	r2, [r3, #0]
 80330da:	687b      	ldr	r3, [r7, #4]
 80330dc:	681b      	ldr	r3, [r3, #0]
 80330de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80330e2:	601a      	str	r2, [r3, #0]
 80330e4:	e00d      	b.n	8033102 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80330e6:	68fb      	ldr	r3, [r7, #12]
 80330e8:	0bdb      	lsrs	r3, r3, #15
 80330ea:	f003 0301 	and.w	r3, r3, #1
 80330ee:	2b00      	cmp	r3, #0
 80330f0:	d007      	beq.n	8033102 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80330f2:	687b      	ldr	r3, [r7, #4]
 80330f4:	681b      	ldr	r3, [r3, #0]
 80330f6:	681a      	ldr	r2, [r3, #0]
 80330f8:	687b      	ldr	r3, [r7, #4]
 80330fa:	681b      	ldr	r3, [r3, #0]
 80330fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8033100:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8033102:	687b      	ldr	r3, [r7, #4]
 8033104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8033108:	b2db      	uxtb	r3, r3
 803310a:	2b29      	cmp	r3, #41	; 0x29
 803310c:	d112      	bne.n	8033134 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 803310e:	687b      	ldr	r3, [r7, #4]
 8033110:	2228      	movs	r2, #40	; 0x28
 8033112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8033116:	687b      	ldr	r3, [r7, #4]
 8033118:	2221      	movs	r2, #33	; 0x21
 803311a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 803311c:	2101      	movs	r1, #1
 803311e:	6878      	ldr	r0, [r7, #4]
 8033120:	f000 fbab 	bl	803387a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8033124:	687b      	ldr	r3, [r7, #4]
 8033126:	2200      	movs	r2, #0
 8033128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 803312c:	6878      	ldr	r0, [r7, #4]
 803312e:	f7ff fdf8 	bl	8032d22 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8033132:	e017      	b.n	8033164 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8033134:	687b      	ldr	r3, [r7, #4]
 8033136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 803313a:	b2db      	uxtb	r3, r3
 803313c:	2b2a      	cmp	r3, #42	; 0x2a
 803313e:	d111      	bne.n	8033164 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8033140:	687b      	ldr	r3, [r7, #4]
 8033142:	2228      	movs	r2, #40	; 0x28
 8033144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8033148:	687b      	ldr	r3, [r7, #4]
 803314a:	2222      	movs	r2, #34	; 0x22
 803314c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 803314e:	2102      	movs	r1, #2
 8033150:	6878      	ldr	r0, [r7, #4]
 8033152:	f000 fb92 	bl	803387a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8033156:	687b      	ldr	r3, [r7, #4]
 8033158:	2200      	movs	r2, #0
 803315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 803315e:	6878      	ldr	r0, [r7, #4]
 8033160:	f7ff fde9 	bl	8032d36 <HAL_I2C_SlaveRxCpltCallback>
}
 8033164:	bf00      	nop
 8033166:	3710      	adds	r7, #16
 8033168:	46bd      	mov	sp, r7
 803316a:	bd80      	pop	{r7, pc}

0803316c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 803316c:	b580      	push	{r7, lr}
 803316e:	b086      	sub	sp, #24
 8033170:	af00      	add	r7, sp, #0
 8033172:	6078      	str	r0, [r7, #4]
 8033174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8033176:	687b      	ldr	r3, [r7, #4]
 8033178:	681b      	ldr	r3, [r3, #0]
 803317a:	681b      	ldr	r3, [r3, #0]
 803317c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 803317e:	683b      	ldr	r3, [r7, #0]
 8033180:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8033182:	687b      	ldr	r3, [r7, #4]
 8033184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8033188:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 803318a:	687b      	ldr	r3, [r7, #4]
 803318c:	681b      	ldr	r3, [r3, #0]
 803318e:	2220      	movs	r2, #32
 8033190:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8033192:	7bfb      	ldrb	r3, [r7, #15]
 8033194:	2b21      	cmp	r3, #33	; 0x21
 8033196:	d002      	beq.n	803319e <I2C_ITSlaveCplt+0x32>
 8033198:	7bfb      	ldrb	r3, [r7, #15]
 803319a:	2b29      	cmp	r3, #41	; 0x29
 803319c:	d108      	bne.n	80331b0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 803319e:	f248 0101 	movw	r1, #32769	; 0x8001
 80331a2:	6878      	ldr	r0, [r7, #4]
 80331a4:	f000 fb69 	bl	803387a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80331a8:	687b      	ldr	r3, [r7, #4]
 80331aa:	2221      	movs	r2, #33	; 0x21
 80331ac:	631a      	str	r2, [r3, #48]	; 0x30
 80331ae:	e00d      	b.n	80331cc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80331b0:	7bfb      	ldrb	r3, [r7, #15]
 80331b2:	2b22      	cmp	r3, #34	; 0x22
 80331b4:	d002      	beq.n	80331bc <I2C_ITSlaveCplt+0x50>
 80331b6:	7bfb      	ldrb	r3, [r7, #15]
 80331b8:	2b2a      	cmp	r3, #42	; 0x2a
 80331ba:	d107      	bne.n	80331cc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80331bc:	f248 0102 	movw	r1, #32770	; 0x8002
 80331c0:	6878      	ldr	r0, [r7, #4]
 80331c2:	f000 fb5a 	bl	803387a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80331c6:	687b      	ldr	r3, [r7, #4]
 80331c8:	2222      	movs	r2, #34	; 0x22
 80331ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80331cc:	687b      	ldr	r3, [r7, #4]
 80331ce:	681b      	ldr	r3, [r3, #0]
 80331d0:	685a      	ldr	r2, [r3, #4]
 80331d2:	687b      	ldr	r3, [r7, #4]
 80331d4:	681b      	ldr	r3, [r3, #0]
 80331d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80331da:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80331dc:	687b      	ldr	r3, [r7, #4]
 80331de:	681b      	ldr	r3, [r3, #0]
 80331e0:	6859      	ldr	r1, [r3, #4]
 80331e2:	687b      	ldr	r3, [r7, #4]
 80331e4:	681a      	ldr	r2, [r3, #0]
 80331e6:	4b80      	ldr	r3, [pc, #512]	; (80333e8 <I2C_ITSlaveCplt+0x27c>)
 80331e8:	400b      	ands	r3, r1
 80331ea:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80331ec:	6878      	ldr	r0, [r7, #4]
 80331ee:	f000 fb02 	bl	80337f6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80331f2:	693b      	ldr	r3, [r7, #16]
 80331f4:	0b9b      	lsrs	r3, r3, #14
 80331f6:	f003 0301 	and.w	r3, r3, #1
 80331fa:	2b00      	cmp	r3, #0
 80331fc:	d07a      	beq.n	80332f4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80331fe:	687b      	ldr	r3, [r7, #4]
 8033200:	681b      	ldr	r3, [r3, #0]
 8033202:	681a      	ldr	r2, [r3, #0]
 8033204:	687b      	ldr	r3, [r7, #4]
 8033206:	681b      	ldr	r3, [r3, #0]
 8033208:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 803320c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 803320e:	687b      	ldr	r3, [r7, #4]
 8033210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033212:	2b00      	cmp	r3, #0
 8033214:	f000 8111 	beq.w	803343a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8033218:	687b      	ldr	r3, [r7, #4]
 803321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803321c:	681b      	ldr	r3, [r3, #0]
 803321e:	4a73      	ldr	r2, [pc, #460]	; (80333ec <I2C_ITSlaveCplt+0x280>)
 8033220:	4293      	cmp	r3, r2
 8033222:	d059      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 8033224:	687b      	ldr	r3, [r7, #4]
 8033226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033228:	681b      	ldr	r3, [r3, #0]
 803322a:	4a71      	ldr	r2, [pc, #452]	; (80333f0 <I2C_ITSlaveCplt+0x284>)
 803322c:	4293      	cmp	r3, r2
 803322e:	d053      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 8033230:	687b      	ldr	r3, [r7, #4]
 8033232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033234:	681b      	ldr	r3, [r3, #0]
 8033236:	4a6f      	ldr	r2, [pc, #444]	; (80333f4 <I2C_ITSlaveCplt+0x288>)
 8033238:	4293      	cmp	r3, r2
 803323a:	d04d      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 803323c:	687b      	ldr	r3, [r7, #4]
 803323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033240:	681b      	ldr	r3, [r3, #0]
 8033242:	4a6d      	ldr	r2, [pc, #436]	; (80333f8 <I2C_ITSlaveCplt+0x28c>)
 8033244:	4293      	cmp	r3, r2
 8033246:	d047      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 8033248:	687b      	ldr	r3, [r7, #4]
 803324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803324c:	681b      	ldr	r3, [r3, #0]
 803324e:	4a6b      	ldr	r2, [pc, #428]	; (80333fc <I2C_ITSlaveCplt+0x290>)
 8033250:	4293      	cmp	r3, r2
 8033252:	d041      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 8033254:	687b      	ldr	r3, [r7, #4]
 8033256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033258:	681b      	ldr	r3, [r3, #0]
 803325a:	4a69      	ldr	r2, [pc, #420]	; (8033400 <I2C_ITSlaveCplt+0x294>)
 803325c:	4293      	cmp	r3, r2
 803325e:	d03b      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 8033260:	687b      	ldr	r3, [r7, #4]
 8033262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033264:	681b      	ldr	r3, [r3, #0]
 8033266:	4a67      	ldr	r2, [pc, #412]	; (8033404 <I2C_ITSlaveCplt+0x298>)
 8033268:	4293      	cmp	r3, r2
 803326a:	d035      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 803326c:	687b      	ldr	r3, [r7, #4]
 803326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033270:	681b      	ldr	r3, [r3, #0]
 8033272:	4a65      	ldr	r2, [pc, #404]	; (8033408 <I2C_ITSlaveCplt+0x29c>)
 8033274:	4293      	cmp	r3, r2
 8033276:	d02f      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 8033278:	687b      	ldr	r3, [r7, #4]
 803327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803327c:	681b      	ldr	r3, [r3, #0]
 803327e:	4a63      	ldr	r2, [pc, #396]	; (803340c <I2C_ITSlaveCplt+0x2a0>)
 8033280:	4293      	cmp	r3, r2
 8033282:	d029      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 8033284:	687b      	ldr	r3, [r7, #4]
 8033286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033288:	681b      	ldr	r3, [r3, #0]
 803328a:	4a61      	ldr	r2, [pc, #388]	; (8033410 <I2C_ITSlaveCplt+0x2a4>)
 803328c:	4293      	cmp	r3, r2
 803328e:	d023      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 8033290:	687b      	ldr	r3, [r7, #4]
 8033292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033294:	681b      	ldr	r3, [r3, #0]
 8033296:	4a5f      	ldr	r2, [pc, #380]	; (8033414 <I2C_ITSlaveCplt+0x2a8>)
 8033298:	4293      	cmp	r3, r2
 803329a:	d01d      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 803329c:	687b      	ldr	r3, [r7, #4]
 803329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80332a0:	681b      	ldr	r3, [r3, #0]
 80332a2:	4a5d      	ldr	r2, [pc, #372]	; (8033418 <I2C_ITSlaveCplt+0x2ac>)
 80332a4:	4293      	cmp	r3, r2
 80332a6:	d017      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 80332a8:	687b      	ldr	r3, [r7, #4]
 80332aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80332ac:	681b      	ldr	r3, [r3, #0]
 80332ae:	4a5b      	ldr	r2, [pc, #364]	; (803341c <I2C_ITSlaveCplt+0x2b0>)
 80332b0:	4293      	cmp	r3, r2
 80332b2:	d011      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 80332b4:	687b      	ldr	r3, [r7, #4]
 80332b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80332b8:	681b      	ldr	r3, [r3, #0]
 80332ba:	4a59      	ldr	r2, [pc, #356]	; (8033420 <I2C_ITSlaveCplt+0x2b4>)
 80332bc:	4293      	cmp	r3, r2
 80332be:	d00b      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 80332c0:	687b      	ldr	r3, [r7, #4]
 80332c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80332c4:	681b      	ldr	r3, [r3, #0]
 80332c6:	4a57      	ldr	r2, [pc, #348]	; (8033424 <I2C_ITSlaveCplt+0x2b8>)
 80332c8:	4293      	cmp	r3, r2
 80332ca:	d005      	beq.n	80332d8 <I2C_ITSlaveCplt+0x16c>
 80332cc:	687b      	ldr	r3, [r7, #4]
 80332ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80332d0:	681b      	ldr	r3, [r3, #0]
 80332d2:	4a55      	ldr	r2, [pc, #340]	; (8033428 <I2C_ITSlaveCplt+0x2bc>)
 80332d4:	4293      	cmp	r3, r2
 80332d6:	d105      	bne.n	80332e4 <I2C_ITSlaveCplt+0x178>
 80332d8:	687b      	ldr	r3, [r7, #4]
 80332da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80332dc:	681b      	ldr	r3, [r3, #0]
 80332de:	685b      	ldr	r3, [r3, #4]
 80332e0:	b29b      	uxth	r3, r3
 80332e2:	e004      	b.n	80332ee <I2C_ITSlaveCplt+0x182>
 80332e4:	687b      	ldr	r3, [r7, #4]
 80332e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80332e8:	681b      	ldr	r3, [r3, #0]
 80332ea:	685b      	ldr	r3, [r3, #4]
 80332ec:	b29b      	uxth	r3, r3
 80332ee:	687a      	ldr	r2, [r7, #4]
 80332f0:	8553      	strh	r3, [r2, #42]	; 0x2a
 80332f2:	e0a2      	b.n	803343a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80332f4:	693b      	ldr	r3, [r7, #16]
 80332f6:	0bdb      	lsrs	r3, r3, #15
 80332f8:	f003 0301 	and.w	r3, r3, #1
 80332fc:	2b00      	cmp	r3, #0
 80332fe:	f000 809c 	beq.w	803343a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8033302:	687b      	ldr	r3, [r7, #4]
 8033304:	681b      	ldr	r3, [r3, #0]
 8033306:	681a      	ldr	r2, [r3, #0]
 8033308:	687b      	ldr	r3, [r7, #4]
 803330a:	681b      	ldr	r3, [r3, #0]
 803330c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8033310:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8033312:	687b      	ldr	r3, [r7, #4]
 8033314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033316:	2b00      	cmp	r3, #0
 8033318:	f000 808f 	beq.w	803343a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 803331c:	687b      	ldr	r3, [r7, #4]
 803331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033320:	681b      	ldr	r3, [r3, #0]
 8033322:	4a32      	ldr	r2, [pc, #200]	; (80333ec <I2C_ITSlaveCplt+0x280>)
 8033324:	4293      	cmp	r3, r2
 8033326:	d059      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 8033328:	687b      	ldr	r3, [r7, #4]
 803332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803332c:	681b      	ldr	r3, [r3, #0]
 803332e:	4a30      	ldr	r2, [pc, #192]	; (80333f0 <I2C_ITSlaveCplt+0x284>)
 8033330:	4293      	cmp	r3, r2
 8033332:	d053      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 8033334:	687b      	ldr	r3, [r7, #4]
 8033336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033338:	681b      	ldr	r3, [r3, #0]
 803333a:	4a2e      	ldr	r2, [pc, #184]	; (80333f4 <I2C_ITSlaveCplt+0x288>)
 803333c:	4293      	cmp	r3, r2
 803333e:	d04d      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 8033340:	687b      	ldr	r3, [r7, #4]
 8033342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033344:	681b      	ldr	r3, [r3, #0]
 8033346:	4a2c      	ldr	r2, [pc, #176]	; (80333f8 <I2C_ITSlaveCplt+0x28c>)
 8033348:	4293      	cmp	r3, r2
 803334a:	d047      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 803334c:	687b      	ldr	r3, [r7, #4]
 803334e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033350:	681b      	ldr	r3, [r3, #0]
 8033352:	4a2a      	ldr	r2, [pc, #168]	; (80333fc <I2C_ITSlaveCplt+0x290>)
 8033354:	4293      	cmp	r3, r2
 8033356:	d041      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 8033358:	687b      	ldr	r3, [r7, #4]
 803335a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803335c:	681b      	ldr	r3, [r3, #0]
 803335e:	4a28      	ldr	r2, [pc, #160]	; (8033400 <I2C_ITSlaveCplt+0x294>)
 8033360:	4293      	cmp	r3, r2
 8033362:	d03b      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 8033364:	687b      	ldr	r3, [r7, #4]
 8033366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033368:	681b      	ldr	r3, [r3, #0]
 803336a:	4a26      	ldr	r2, [pc, #152]	; (8033404 <I2C_ITSlaveCplt+0x298>)
 803336c:	4293      	cmp	r3, r2
 803336e:	d035      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 8033370:	687b      	ldr	r3, [r7, #4]
 8033372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033374:	681b      	ldr	r3, [r3, #0]
 8033376:	4a24      	ldr	r2, [pc, #144]	; (8033408 <I2C_ITSlaveCplt+0x29c>)
 8033378:	4293      	cmp	r3, r2
 803337a:	d02f      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 803337c:	687b      	ldr	r3, [r7, #4]
 803337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033380:	681b      	ldr	r3, [r3, #0]
 8033382:	4a22      	ldr	r2, [pc, #136]	; (803340c <I2C_ITSlaveCplt+0x2a0>)
 8033384:	4293      	cmp	r3, r2
 8033386:	d029      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 8033388:	687b      	ldr	r3, [r7, #4]
 803338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803338c:	681b      	ldr	r3, [r3, #0]
 803338e:	4a20      	ldr	r2, [pc, #128]	; (8033410 <I2C_ITSlaveCplt+0x2a4>)
 8033390:	4293      	cmp	r3, r2
 8033392:	d023      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 8033394:	687b      	ldr	r3, [r7, #4]
 8033396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033398:	681b      	ldr	r3, [r3, #0]
 803339a:	4a1e      	ldr	r2, [pc, #120]	; (8033414 <I2C_ITSlaveCplt+0x2a8>)
 803339c:	4293      	cmp	r3, r2
 803339e:	d01d      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 80333a0:	687b      	ldr	r3, [r7, #4]
 80333a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80333a4:	681b      	ldr	r3, [r3, #0]
 80333a6:	4a1c      	ldr	r2, [pc, #112]	; (8033418 <I2C_ITSlaveCplt+0x2ac>)
 80333a8:	4293      	cmp	r3, r2
 80333aa:	d017      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 80333ac:	687b      	ldr	r3, [r7, #4]
 80333ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80333b0:	681b      	ldr	r3, [r3, #0]
 80333b2:	4a1a      	ldr	r2, [pc, #104]	; (803341c <I2C_ITSlaveCplt+0x2b0>)
 80333b4:	4293      	cmp	r3, r2
 80333b6:	d011      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 80333b8:	687b      	ldr	r3, [r7, #4]
 80333ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80333bc:	681b      	ldr	r3, [r3, #0]
 80333be:	4a18      	ldr	r2, [pc, #96]	; (8033420 <I2C_ITSlaveCplt+0x2b4>)
 80333c0:	4293      	cmp	r3, r2
 80333c2:	d00b      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 80333c4:	687b      	ldr	r3, [r7, #4]
 80333c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80333c8:	681b      	ldr	r3, [r3, #0]
 80333ca:	4a16      	ldr	r2, [pc, #88]	; (8033424 <I2C_ITSlaveCplt+0x2b8>)
 80333cc:	4293      	cmp	r3, r2
 80333ce:	d005      	beq.n	80333dc <I2C_ITSlaveCplt+0x270>
 80333d0:	687b      	ldr	r3, [r7, #4]
 80333d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80333d4:	681b      	ldr	r3, [r3, #0]
 80333d6:	4a14      	ldr	r2, [pc, #80]	; (8033428 <I2C_ITSlaveCplt+0x2bc>)
 80333d8:	4293      	cmp	r3, r2
 80333da:	d127      	bne.n	803342c <I2C_ITSlaveCplt+0x2c0>
 80333dc:	687b      	ldr	r3, [r7, #4]
 80333de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80333e0:	681b      	ldr	r3, [r3, #0]
 80333e2:	685b      	ldr	r3, [r3, #4]
 80333e4:	b29b      	uxth	r3, r3
 80333e6:	e026      	b.n	8033436 <I2C_ITSlaveCplt+0x2ca>
 80333e8:	fe00e800 	.word	0xfe00e800
 80333ec:	40020010 	.word	0x40020010
 80333f0:	40020028 	.word	0x40020028
 80333f4:	40020040 	.word	0x40020040
 80333f8:	40020058 	.word	0x40020058
 80333fc:	40020070 	.word	0x40020070
 8033400:	40020088 	.word	0x40020088
 8033404:	400200a0 	.word	0x400200a0
 8033408:	400200b8 	.word	0x400200b8
 803340c:	40020410 	.word	0x40020410
 8033410:	40020428 	.word	0x40020428
 8033414:	40020440 	.word	0x40020440
 8033418:	40020458 	.word	0x40020458
 803341c:	40020470 	.word	0x40020470
 8033420:	40020488 	.word	0x40020488
 8033424:	400204a0 	.word	0x400204a0
 8033428:	400204b8 	.word	0x400204b8
 803342c:	687b      	ldr	r3, [r7, #4]
 803342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033430:	681b      	ldr	r3, [r3, #0]
 8033432:	685b      	ldr	r3, [r3, #4]
 8033434:	b29b      	uxth	r3, r3
 8033436:	687a      	ldr	r2, [r7, #4]
 8033438:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 803343a:	697b      	ldr	r3, [r7, #20]
 803343c:	089b      	lsrs	r3, r3, #2
 803343e:	f003 0301 	and.w	r3, r3, #1
 8033442:	2b00      	cmp	r3, #0
 8033444:	d020      	beq.n	8033488 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8033446:	697b      	ldr	r3, [r7, #20]
 8033448:	f023 0304 	bic.w	r3, r3, #4
 803344c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 803344e:	687b      	ldr	r3, [r7, #4]
 8033450:	681b      	ldr	r3, [r3, #0]
 8033452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8033454:	687b      	ldr	r3, [r7, #4]
 8033456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8033458:	b2d2      	uxtb	r2, r2
 803345a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 803345c:	687b      	ldr	r3, [r7, #4]
 803345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8033460:	1c5a      	adds	r2, r3, #1
 8033462:	687b      	ldr	r3, [r7, #4]
 8033464:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8033466:	687b      	ldr	r3, [r7, #4]
 8033468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803346a:	2b00      	cmp	r3, #0
 803346c:	d00c      	beq.n	8033488 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 803346e:	687b      	ldr	r3, [r7, #4]
 8033470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8033472:	3b01      	subs	r3, #1
 8033474:	b29a      	uxth	r2, r3
 8033476:	687b      	ldr	r3, [r7, #4]
 8033478:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 803347a:	687b      	ldr	r3, [r7, #4]
 803347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803347e:	b29b      	uxth	r3, r3
 8033480:	3b01      	subs	r3, #1
 8033482:	b29a      	uxth	r2, r3
 8033484:	687b      	ldr	r3, [r7, #4]
 8033486:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8033488:	687b      	ldr	r3, [r7, #4]
 803348a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803348c:	b29b      	uxth	r3, r3
 803348e:	2b00      	cmp	r3, #0
 8033490:	d005      	beq.n	803349e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8033492:	687b      	ldr	r3, [r7, #4]
 8033494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033496:	f043 0204 	orr.w	r2, r3, #4
 803349a:	687b      	ldr	r3, [r7, #4]
 803349c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 803349e:	687b      	ldr	r3, [r7, #4]
 80334a0:	2200      	movs	r2, #0
 80334a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80334a6:	687b      	ldr	r3, [r7, #4]
 80334a8:	2200      	movs	r2, #0
 80334aa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80334ac:	687b      	ldr	r3, [r7, #4]
 80334ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80334b0:	2b00      	cmp	r3, #0
 80334b2:	d010      	beq.n	80334d6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80334b4:	687b      	ldr	r3, [r7, #4]
 80334b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80334b8:	4619      	mov	r1, r3
 80334ba:	6878      	ldr	r0, [r7, #4]
 80334bc:	f000 f8a4 	bl	8033608 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80334c0:	687b      	ldr	r3, [r7, #4]
 80334c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80334c6:	b2db      	uxtb	r3, r3
 80334c8:	2b28      	cmp	r3, #40	; 0x28
 80334ca:	d141      	bne.n	8033550 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80334cc:	6979      	ldr	r1, [r7, #20]
 80334ce:	6878      	ldr	r0, [r7, #4]
 80334d0:	f000 f844 	bl	803355c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80334d4:	e03c      	b.n	8033550 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80334d6:	687b      	ldr	r3, [r7, #4]
 80334d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80334da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80334de:	d014      	beq.n	803350a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80334e0:	6878      	ldr	r0, [r7, #4]
 80334e2:	f7ff fde5 	bl	80330b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80334e6:	687b      	ldr	r3, [r7, #4]
 80334e8:	4a1b      	ldr	r2, [pc, #108]	; (8033558 <I2C_ITSlaveCplt+0x3ec>)
 80334ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80334ec:	687b      	ldr	r3, [r7, #4]
 80334ee:	2220      	movs	r2, #32
 80334f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80334f4:	687b      	ldr	r3, [r7, #4]
 80334f6:	2200      	movs	r2, #0
 80334f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80334fa:	687b      	ldr	r3, [r7, #4]
 80334fc:	2200      	movs	r2, #0
 80334fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8033502:	6878      	ldr	r0, [r7, #4]
 8033504:	f7ff fc2f 	bl	8032d66 <HAL_I2C_ListenCpltCallback>
}
 8033508:	e022      	b.n	8033550 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 803350a:	687b      	ldr	r3, [r7, #4]
 803350c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8033510:	b2db      	uxtb	r3, r3
 8033512:	2b22      	cmp	r3, #34	; 0x22
 8033514:	d10e      	bne.n	8033534 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8033516:	687b      	ldr	r3, [r7, #4]
 8033518:	2220      	movs	r2, #32
 803351a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 803351e:	687b      	ldr	r3, [r7, #4]
 8033520:	2200      	movs	r2, #0
 8033522:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8033524:	687b      	ldr	r3, [r7, #4]
 8033526:	2200      	movs	r2, #0
 8033528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 803352c:	6878      	ldr	r0, [r7, #4]
 803352e:	f7ff fc02 	bl	8032d36 <HAL_I2C_SlaveRxCpltCallback>
}
 8033532:	e00d      	b.n	8033550 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8033534:	687b      	ldr	r3, [r7, #4]
 8033536:	2220      	movs	r2, #32
 8033538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 803353c:	687b      	ldr	r3, [r7, #4]
 803353e:	2200      	movs	r2, #0
 8033540:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8033542:	687b      	ldr	r3, [r7, #4]
 8033544:	2200      	movs	r2, #0
 8033546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 803354a:	6878      	ldr	r0, [r7, #4]
 803354c:	f7ff fbe9 	bl	8032d22 <HAL_I2C_SlaveTxCpltCallback>
}
 8033550:	bf00      	nop
 8033552:	3718      	adds	r7, #24
 8033554:	46bd      	mov	sp, r7
 8033556:	bd80      	pop	{r7, pc}
 8033558:	ffff0000 	.word	0xffff0000

0803355c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 803355c:	b580      	push	{r7, lr}
 803355e:	b082      	sub	sp, #8
 8033560:	af00      	add	r7, sp, #0
 8033562:	6078      	str	r0, [r7, #4]
 8033564:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8033566:	687b      	ldr	r3, [r7, #4]
 8033568:	4a26      	ldr	r2, [pc, #152]	; (8033604 <I2C_ITListenCplt+0xa8>)
 803356a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 803356c:	687b      	ldr	r3, [r7, #4]
 803356e:	2200      	movs	r2, #0
 8033570:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8033572:	687b      	ldr	r3, [r7, #4]
 8033574:	2220      	movs	r2, #32
 8033576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 803357a:	687b      	ldr	r3, [r7, #4]
 803357c:	2200      	movs	r2, #0
 803357e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8033582:	687b      	ldr	r3, [r7, #4]
 8033584:	2200      	movs	r2, #0
 8033586:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8033588:	683b      	ldr	r3, [r7, #0]
 803358a:	089b      	lsrs	r3, r3, #2
 803358c:	f003 0301 	and.w	r3, r3, #1
 8033590:	2b00      	cmp	r3, #0
 8033592:	d022      	beq.n	80335da <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8033594:	687b      	ldr	r3, [r7, #4]
 8033596:	681b      	ldr	r3, [r3, #0]
 8033598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 803359a:	687b      	ldr	r3, [r7, #4]
 803359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803359e:	b2d2      	uxtb	r2, r2
 80335a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80335a2:	687b      	ldr	r3, [r7, #4]
 80335a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80335a6:	1c5a      	adds	r2, r3, #1
 80335a8:	687b      	ldr	r3, [r7, #4]
 80335aa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80335ac:	687b      	ldr	r3, [r7, #4]
 80335ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80335b0:	2b00      	cmp	r3, #0
 80335b2:	d012      	beq.n	80335da <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80335b4:	687b      	ldr	r3, [r7, #4]
 80335b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80335b8:	3b01      	subs	r3, #1
 80335ba:	b29a      	uxth	r2, r3
 80335bc:	687b      	ldr	r3, [r7, #4]
 80335be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80335c0:	687b      	ldr	r3, [r7, #4]
 80335c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80335c4:	b29b      	uxth	r3, r3
 80335c6:	3b01      	subs	r3, #1
 80335c8:	b29a      	uxth	r2, r3
 80335ca:	687b      	ldr	r3, [r7, #4]
 80335cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80335ce:	687b      	ldr	r3, [r7, #4]
 80335d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80335d2:	f043 0204 	orr.w	r2, r3, #4
 80335d6:	687b      	ldr	r3, [r7, #4]
 80335d8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80335da:	f248 0103 	movw	r1, #32771	; 0x8003
 80335de:	6878      	ldr	r0, [r7, #4]
 80335e0:	f000 f94b 	bl	803387a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80335e4:	687b      	ldr	r3, [r7, #4]
 80335e6:	681b      	ldr	r3, [r3, #0]
 80335e8:	2210      	movs	r2, #16
 80335ea:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80335ec:	687b      	ldr	r3, [r7, #4]
 80335ee:	2200      	movs	r2, #0
 80335f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80335f4:	6878      	ldr	r0, [r7, #4]
 80335f6:	f7ff fbb6 	bl	8032d66 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80335fa:	bf00      	nop
 80335fc:	3708      	adds	r7, #8
 80335fe:	46bd      	mov	sp, r7
 8033600:	bd80      	pop	{r7, pc}
 8033602:	bf00      	nop
 8033604:	ffff0000 	.word	0xffff0000

08033608 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8033608:	b580      	push	{r7, lr}
 803360a:	b084      	sub	sp, #16
 803360c:	af00      	add	r7, sp, #0
 803360e:	6078      	str	r0, [r7, #4]
 8033610:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8033612:	687b      	ldr	r3, [r7, #4]
 8033614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8033618:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 803361a:	687b      	ldr	r3, [r7, #4]
 803361c:	2200      	movs	r2, #0
 803361e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8033622:	687b      	ldr	r3, [r7, #4]
 8033624:	4a5d      	ldr	r2, [pc, #372]	; (803379c <I2C_ITError+0x194>)
 8033626:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8033628:	687b      	ldr	r3, [r7, #4]
 803362a:	2200      	movs	r2, #0
 803362c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 803362e:	687b      	ldr	r3, [r7, #4]
 8033630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8033632:	683b      	ldr	r3, [r7, #0]
 8033634:	431a      	orrs	r2, r3
 8033636:	687b      	ldr	r3, [r7, #4]
 8033638:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 803363a:	7bfb      	ldrb	r3, [r7, #15]
 803363c:	2b28      	cmp	r3, #40	; 0x28
 803363e:	d005      	beq.n	803364c <I2C_ITError+0x44>
 8033640:	7bfb      	ldrb	r3, [r7, #15]
 8033642:	2b29      	cmp	r3, #41	; 0x29
 8033644:	d002      	beq.n	803364c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8033646:	7bfb      	ldrb	r3, [r7, #15]
 8033648:	2b2a      	cmp	r3, #42	; 0x2a
 803364a:	d10b      	bne.n	8033664 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 803364c:	2103      	movs	r1, #3
 803364e:	6878      	ldr	r0, [r7, #4]
 8033650:	f000 f913 	bl	803387a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8033654:	687b      	ldr	r3, [r7, #4]
 8033656:	2228      	movs	r2, #40	; 0x28
 8033658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 803365c:	687b      	ldr	r3, [r7, #4]
 803365e:	4a50      	ldr	r2, [pc, #320]	; (80337a0 <I2C_ITError+0x198>)
 8033660:	635a      	str	r2, [r3, #52]	; 0x34
 8033662:	e011      	b.n	8033688 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8033664:	f248 0103 	movw	r1, #32771	; 0x8003
 8033668:	6878      	ldr	r0, [r7, #4]
 803366a:	f000 f906 	bl	803387a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 803366e:	687b      	ldr	r3, [r7, #4]
 8033670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8033674:	b2db      	uxtb	r3, r3
 8033676:	2b60      	cmp	r3, #96	; 0x60
 8033678:	d003      	beq.n	8033682 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 803367a:	687b      	ldr	r3, [r7, #4]
 803367c:	2220      	movs	r2, #32
 803367e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8033682:	687b      	ldr	r3, [r7, #4]
 8033684:	2200      	movs	r2, #0
 8033686:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8033688:	687b      	ldr	r3, [r7, #4]
 803368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803368c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 803368e:	687b      	ldr	r3, [r7, #4]
 8033690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033692:	2b00      	cmp	r3, #0
 8033694:	d039      	beq.n	803370a <I2C_ITError+0x102>
 8033696:	68bb      	ldr	r3, [r7, #8]
 8033698:	2b11      	cmp	r3, #17
 803369a:	d002      	beq.n	80336a2 <I2C_ITError+0x9a>
 803369c:	68bb      	ldr	r3, [r7, #8]
 803369e:	2b21      	cmp	r3, #33	; 0x21
 80336a0:	d133      	bne.n	803370a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80336a2:	687b      	ldr	r3, [r7, #4]
 80336a4:	681b      	ldr	r3, [r3, #0]
 80336a6:	681b      	ldr	r3, [r3, #0]
 80336a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80336ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80336b0:	d107      	bne.n	80336c2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80336b2:	687b      	ldr	r3, [r7, #4]
 80336b4:	681b      	ldr	r3, [r3, #0]
 80336b6:	681a      	ldr	r2, [r3, #0]
 80336b8:	687b      	ldr	r3, [r7, #4]
 80336ba:	681b      	ldr	r3, [r3, #0]
 80336bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80336c0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80336c2:	687b      	ldr	r3, [r7, #4]
 80336c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80336c6:	4618      	mov	r0, r3
 80336c8:	f7fe fc54 	bl	8031f74 <HAL_DMA_GetState>
 80336cc:	4603      	mov	r3, r0
 80336ce:	2b01      	cmp	r3, #1
 80336d0:	d017      	beq.n	8033702 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80336d2:	687b      	ldr	r3, [r7, #4]
 80336d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80336d6:	4a33      	ldr	r2, [pc, #204]	; (80337a4 <I2C_ITError+0x19c>)
 80336d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80336da:	687b      	ldr	r3, [r7, #4]
 80336dc:	2200      	movs	r2, #0
 80336de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80336e2:	687b      	ldr	r3, [r7, #4]
 80336e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80336e6:	4618      	mov	r0, r3
 80336e8:	f7fd fad4 	bl	8030c94 <HAL_DMA_Abort_IT>
 80336ec:	4603      	mov	r3, r0
 80336ee:	2b00      	cmp	r3, #0
 80336f0:	d04d      	beq.n	803378e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80336f2:	687b      	ldr	r3, [r7, #4]
 80336f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80336f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80336f8:	687a      	ldr	r2, [r7, #4]
 80336fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80336fc:	4610      	mov	r0, r2
 80336fe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8033700:	e045      	b.n	803378e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8033702:	6878      	ldr	r0, [r7, #4]
 8033704:	f000 f850 	bl	80337a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8033708:	e041      	b.n	803378e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 803370a:	687b      	ldr	r3, [r7, #4]
 803370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803370e:	2b00      	cmp	r3, #0
 8033710:	d039      	beq.n	8033786 <I2C_ITError+0x17e>
 8033712:	68bb      	ldr	r3, [r7, #8]
 8033714:	2b12      	cmp	r3, #18
 8033716:	d002      	beq.n	803371e <I2C_ITError+0x116>
 8033718:	68bb      	ldr	r3, [r7, #8]
 803371a:	2b22      	cmp	r3, #34	; 0x22
 803371c:	d133      	bne.n	8033786 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 803371e:	687b      	ldr	r3, [r7, #4]
 8033720:	681b      	ldr	r3, [r3, #0]
 8033722:	681b      	ldr	r3, [r3, #0]
 8033724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8033728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803372c:	d107      	bne.n	803373e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 803372e:	687b      	ldr	r3, [r7, #4]
 8033730:	681b      	ldr	r3, [r3, #0]
 8033732:	681a      	ldr	r2, [r3, #0]
 8033734:	687b      	ldr	r3, [r7, #4]
 8033736:	681b      	ldr	r3, [r3, #0]
 8033738:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 803373c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 803373e:	687b      	ldr	r3, [r7, #4]
 8033740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033742:	4618      	mov	r0, r3
 8033744:	f7fe fc16 	bl	8031f74 <HAL_DMA_GetState>
 8033748:	4603      	mov	r3, r0
 803374a:	2b01      	cmp	r3, #1
 803374c:	d017      	beq.n	803377e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 803374e:	687b      	ldr	r3, [r7, #4]
 8033750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033752:	4a14      	ldr	r2, [pc, #80]	; (80337a4 <I2C_ITError+0x19c>)
 8033754:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8033756:	687b      	ldr	r3, [r7, #4]
 8033758:	2200      	movs	r2, #0
 803375a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 803375e:	687b      	ldr	r3, [r7, #4]
 8033760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033762:	4618      	mov	r0, r3
 8033764:	f7fd fa96 	bl	8030c94 <HAL_DMA_Abort_IT>
 8033768:	4603      	mov	r3, r0
 803376a:	2b00      	cmp	r3, #0
 803376c:	d011      	beq.n	8033792 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 803376e:	687b      	ldr	r3, [r7, #4]
 8033770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8033774:	687a      	ldr	r2, [r7, #4]
 8033776:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8033778:	4610      	mov	r0, r2
 803377a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 803377c:	e009      	b.n	8033792 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 803377e:	6878      	ldr	r0, [r7, #4]
 8033780:	f000 f812 	bl	80337a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8033784:	e005      	b.n	8033792 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8033786:	6878      	ldr	r0, [r7, #4]
 8033788:	f000 f80e 	bl	80337a8 <I2C_TreatErrorCallback>
  }
}
 803378c:	e002      	b.n	8033794 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 803378e:	bf00      	nop
 8033790:	e000      	b.n	8033794 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8033792:	bf00      	nop
}
 8033794:	bf00      	nop
 8033796:	3710      	adds	r7, #16
 8033798:	46bd      	mov	sp, r7
 803379a:	bd80      	pop	{r7, pc}
 803379c:	ffff0000 	.word	0xffff0000
 80337a0:	08032da3 	.word	0x08032da3
 80337a4:	0803383f 	.word	0x0803383f

080337a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80337a8:	b580      	push	{r7, lr}
 80337aa:	b082      	sub	sp, #8
 80337ac:	af00      	add	r7, sp, #0
 80337ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80337b0:	687b      	ldr	r3, [r7, #4]
 80337b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80337b6:	b2db      	uxtb	r3, r3
 80337b8:	2b60      	cmp	r3, #96	; 0x60
 80337ba:	d10e      	bne.n	80337da <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80337bc:	687b      	ldr	r3, [r7, #4]
 80337be:	2220      	movs	r2, #32
 80337c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80337c4:	687b      	ldr	r3, [r7, #4]
 80337c6:	2200      	movs	r2, #0
 80337c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80337ca:	687b      	ldr	r3, [r7, #4]
 80337cc:	2200      	movs	r2, #0
 80337ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80337d2:	6878      	ldr	r0, [r7, #4]
 80337d4:	f7ff fadb 	bl	8032d8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80337d8:	e009      	b.n	80337ee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80337da:	687b      	ldr	r3, [r7, #4]
 80337dc:	2200      	movs	r2, #0
 80337de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80337e0:	687b      	ldr	r3, [r7, #4]
 80337e2:	2200      	movs	r2, #0
 80337e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80337e8:	6878      	ldr	r0, [r7, #4]
 80337ea:	f7ff fac6 	bl	8032d7a <HAL_I2C_ErrorCallback>
}
 80337ee:	bf00      	nop
 80337f0:	3708      	adds	r7, #8
 80337f2:	46bd      	mov	sp, r7
 80337f4:	bd80      	pop	{r7, pc}

080337f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80337f6:	b480      	push	{r7}
 80337f8:	b083      	sub	sp, #12
 80337fa:	af00      	add	r7, sp, #0
 80337fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80337fe:	687b      	ldr	r3, [r7, #4]
 8033800:	681b      	ldr	r3, [r3, #0]
 8033802:	699b      	ldr	r3, [r3, #24]
 8033804:	f003 0302 	and.w	r3, r3, #2
 8033808:	2b02      	cmp	r3, #2
 803380a:	d103      	bne.n	8033814 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 803380c:	687b      	ldr	r3, [r7, #4]
 803380e:	681b      	ldr	r3, [r3, #0]
 8033810:	2200      	movs	r2, #0
 8033812:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8033814:	687b      	ldr	r3, [r7, #4]
 8033816:	681b      	ldr	r3, [r3, #0]
 8033818:	699b      	ldr	r3, [r3, #24]
 803381a:	f003 0301 	and.w	r3, r3, #1
 803381e:	2b01      	cmp	r3, #1
 8033820:	d007      	beq.n	8033832 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8033822:	687b      	ldr	r3, [r7, #4]
 8033824:	681b      	ldr	r3, [r3, #0]
 8033826:	699a      	ldr	r2, [r3, #24]
 8033828:	687b      	ldr	r3, [r7, #4]
 803382a:	681b      	ldr	r3, [r3, #0]
 803382c:	f042 0201 	orr.w	r2, r2, #1
 8033830:	619a      	str	r2, [r3, #24]
  }
}
 8033832:	bf00      	nop
 8033834:	370c      	adds	r7, #12
 8033836:	46bd      	mov	sp, r7
 8033838:	f85d 7b04 	ldr.w	r7, [sp], #4
 803383c:	4770      	bx	lr

0803383e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 803383e:	b580      	push	{r7, lr}
 8033840:	b084      	sub	sp, #16
 8033842:	af00      	add	r7, sp, #0
 8033844:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8033846:	687b      	ldr	r3, [r7, #4]
 8033848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803384a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 803384c:	68fb      	ldr	r3, [r7, #12]
 803384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033850:	2b00      	cmp	r3, #0
 8033852:	d003      	beq.n	803385c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8033854:	68fb      	ldr	r3, [r7, #12]
 8033856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033858:	2200      	movs	r2, #0
 803385a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 803385c:	68fb      	ldr	r3, [r7, #12]
 803385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033860:	2b00      	cmp	r3, #0
 8033862:	d003      	beq.n	803386c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8033864:	68fb      	ldr	r3, [r7, #12]
 8033866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033868:	2200      	movs	r2, #0
 803386a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 803386c:	68f8      	ldr	r0, [r7, #12]
 803386e:	f7ff ff9b 	bl	80337a8 <I2C_TreatErrorCallback>
}
 8033872:	bf00      	nop
 8033874:	3710      	adds	r7, #16
 8033876:	46bd      	mov	sp, r7
 8033878:	bd80      	pop	{r7, pc}

0803387a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 803387a:	b480      	push	{r7}
 803387c:	b085      	sub	sp, #20
 803387e:	af00      	add	r7, sp, #0
 8033880:	6078      	str	r0, [r7, #4]
 8033882:	460b      	mov	r3, r1
 8033884:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8033886:	2300      	movs	r3, #0
 8033888:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 803388a:	887b      	ldrh	r3, [r7, #2]
 803388c:	f003 0301 	and.w	r3, r3, #1
 8033890:	2b00      	cmp	r3, #0
 8033892:	d00f      	beq.n	80338b4 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8033894:	68fb      	ldr	r3, [r7, #12]
 8033896:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 803389a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 803389c:	687b      	ldr	r3, [r7, #4]
 803389e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80338a2:	b2db      	uxtb	r3, r3
 80338a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80338a8:	2b28      	cmp	r3, #40	; 0x28
 80338aa:	d003      	beq.n	80338b4 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80338ac:	68fb      	ldr	r3, [r7, #12]
 80338ae:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80338b2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80338b4:	887b      	ldrh	r3, [r7, #2]
 80338b6:	f003 0302 	and.w	r3, r3, #2
 80338ba:	2b00      	cmp	r3, #0
 80338bc:	d00f      	beq.n	80338de <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80338be:	68fb      	ldr	r3, [r7, #12]
 80338c0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80338c4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80338c6:	687b      	ldr	r3, [r7, #4]
 80338c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80338cc:	b2db      	uxtb	r3, r3
 80338ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80338d2:	2b28      	cmp	r3, #40	; 0x28
 80338d4:	d003      	beq.n	80338de <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80338d6:	68fb      	ldr	r3, [r7, #12]
 80338d8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80338dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80338de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80338e2:	2b00      	cmp	r3, #0
 80338e4:	da03      	bge.n	80338ee <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80338e6:	68fb      	ldr	r3, [r7, #12]
 80338e8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80338ec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80338ee:	887b      	ldrh	r3, [r7, #2]
 80338f0:	2b10      	cmp	r3, #16
 80338f2:	d103      	bne.n	80338fc <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80338f4:	68fb      	ldr	r3, [r7, #12]
 80338f6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80338fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80338fc:	887b      	ldrh	r3, [r7, #2]
 80338fe:	2b20      	cmp	r3, #32
 8033900:	d103      	bne.n	803390a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8033902:	68fb      	ldr	r3, [r7, #12]
 8033904:	f043 0320 	orr.w	r3, r3, #32
 8033908:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 803390a:	887b      	ldrh	r3, [r7, #2]
 803390c:	2b40      	cmp	r3, #64	; 0x40
 803390e:	d103      	bne.n	8033918 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8033910:	68fb      	ldr	r3, [r7, #12]
 8033912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8033916:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8033918:	687b      	ldr	r3, [r7, #4]
 803391a:	681b      	ldr	r3, [r3, #0]
 803391c:	6819      	ldr	r1, [r3, #0]
 803391e:	68fb      	ldr	r3, [r7, #12]
 8033920:	43da      	mvns	r2, r3
 8033922:	687b      	ldr	r3, [r7, #4]
 8033924:	681b      	ldr	r3, [r3, #0]
 8033926:	400a      	ands	r2, r1
 8033928:	601a      	str	r2, [r3, #0]
}
 803392a:	bf00      	nop
 803392c:	3714      	adds	r7, #20
 803392e:	46bd      	mov	sp, r7
 8033930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033934:	4770      	bx	lr

08033936 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8033936:	b480      	push	{r7}
 8033938:	b083      	sub	sp, #12
 803393a:	af00      	add	r7, sp, #0
 803393c:	6078      	str	r0, [r7, #4]
 803393e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8033940:	687b      	ldr	r3, [r7, #4]
 8033942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8033946:	b2db      	uxtb	r3, r3
 8033948:	2b20      	cmp	r3, #32
 803394a:	d138      	bne.n	80339be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 803394c:	687b      	ldr	r3, [r7, #4]
 803394e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8033952:	2b01      	cmp	r3, #1
 8033954:	d101      	bne.n	803395a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8033956:	2302      	movs	r3, #2
 8033958:	e032      	b.n	80339c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 803395a:	687b      	ldr	r3, [r7, #4]
 803395c:	2201      	movs	r2, #1
 803395e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8033962:	687b      	ldr	r3, [r7, #4]
 8033964:	2224      	movs	r2, #36	; 0x24
 8033966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 803396a:	687b      	ldr	r3, [r7, #4]
 803396c:	681b      	ldr	r3, [r3, #0]
 803396e:	681a      	ldr	r2, [r3, #0]
 8033970:	687b      	ldr	r3, [r7, #4]
 8033972:	681b      	ldr	r3, [r3, #0]
 8033974:	f022 0201 	bic.w	r2, r2, #1
 8033978:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 803397a:	687b      	ldr	r3, [r7, #4]
 803397c:	681b      	ldr	r3, [r3, #0]
 803397e:	681a      	ldr	r2, [r3, #0]
 8033980:	687b      	ldr	r3, [r7, #4]
 8033982:	681b      	ldr	r3, [r3, #0]
 8033984:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8033988:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 803398a:	687b      	ldr	r3, [r7, #4]
 803398c:	681b      	ldr	r3, [r3, #0]
 803398e:	6819      	ldr	r1, [r3, #0]
 8033990:	687b      	ldr	r3, [r7, #4]
 8033992:	681b      	ldr	r3, [r3, #0]
 8033994:	683a      	ldr	r2, [r7, #0]
 8033996:	430a      	orrs	r2, r1
 8033998:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 803399a:	687b      	ldr	r3, [r7, #4]
 803399c:	681b      	ldr	r3, [r3, #0]
 803399e:	681a      	ldr	r2, [r3, #0]
 80339a0:	687b      	ldr	r3, [r7, #4]
 80339a2:	681b      	ldr	r3, [r3, #0]
 80339a4:	f042 0201 	orr.w	r2, r2, #1
 80339a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80339aa:	687b      	ldr	r3, [r7, #4]
 80339ac:	2220      	movs	r2, #32
 80339ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80339b2:	687b      	ldr	r3, [r7, #4]
 80339b4:	2200      	movs	r2, #0
 80339b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80339ba:	2300      	movs	r3, #0
 80339bc:	e000      	b.n	80339c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80339be:	2302      	movs	r3, #2
  }
}
 80339c0:	4618      	mov	r0, r3
 80339c2:	370c      	adds	r7, #12
 80339c4:	46bd      	mov	sp, r7
 80339c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80339ca:	4770      	bx	lr

080339cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80339cc:	b480      	push	{r7}
 80339ce:	b085      	sub	sp, #20
 80339d0:	af00      	add	r7, sp, #0
 80339d2:	6078      	str	r0, [r7, #4]
 80339d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80339d6:	687b      	ldr	r3, [r7, #4]
 80339d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80339dc:	b2db      	uxtb	r3, r3
 80339de:	2b20      	cmp	r3, #32
 80339e0:	d139      	bne.n	8033a56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80339e2:	687b      	ldr	r3, [r7, #4]
 80339e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80339e8:	2b01      	cmp	r3, #1
 80339ea:	d101      	bne.n	80339f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80339ec:	2302      	movs	r3, #2
 80339ee:	e033      	b.n	8033a58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80339f0:	687b      	ldr	r3, [r7, #4]
 80339f2:	2201      	movs	r2, #1
 80339f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80339f8:	687b      	ldr	r3, [r7, #4]
 80339fa:	2224      	movs	r2, #36	; 0x24
 80339fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8033a00:	687b      	ldr	r3, [r7, #4]
 8033a02:	681b      	ldr	r3, [r3, #0]
 8033a04:	681a      	ldr	r2, [r3, #0]
 8033a06:	687b      	ldr	r3, [r7, #4]
 8033a08:	681b      	ldr	r3, [r3, #0]
 8033a0a:	f022 0201 	bic.w	r2, r2, #1
 8033a0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8033a10:	687b      	ldr	r3, [r7, #4]
 8033a12:	681b      	ldr	r3, [r3, #0]
 8033a14:	681b      	ldr	r3, [r3, #0]
 8033a16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8033a18:	68fb      	ldr	r3, [r7, #12]
 8033a1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8033a1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8033a20:	683b      	ldr	r3, [r7, #0]
 8033a22:	021b      	lsls	r3, r3, #8
 8033a24:	68fa      	ldr	r2, [r7, #12]
 8033a26:	4313      	orrs	r3, r2
 8033a28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8033a2a:	687b      	ldr	r3, [r7, #4]
 8033a2c:	681b      	ldr	r3, [r3, #0]
 8033a2e:	68fa      	ldr	r2, [r7, #12]
 8033a30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8033a32:	687b      	ldr	r3, [r7, #4]
 8033a34:	681b      	ldr	r3, [r3, #0]
 8033a36:	681a      	ldr	r2, [r3, #0]
 8033a38:	687b      	ldr	r3, [r7, #4]
 8033a3a:	681b      	ldr	r3, [r3, #0]
 8033a3c:	f042 0201 	orr.w	r2, r2, #1
 8033a40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8033a42:	687b      	ldr	r3, [r7, #4]
 8033a44:	2220      	movs	r2, #32
 8033a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8033a4a:	687b      	ldr	r3, [r7, #4]
 8033a4c:	2200      	movs	r2, #0
 8033a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8033a52:	2300      	movs	r3, #0
 8033a54:	e000      	b.n	8033a58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8033a56:	2302      	movs	r3, #2
  }
}
 8033a58:	4618      	mov	r0, r3
 8033a5a:	3714      	adds	r7, #20
 8033a5c:	46bd      	mov	sp, r7
 8033a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033a62:	4770      	bx	lr

08033a64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8033a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8033a66:	b08f      	sub	sp, #60	; 0x3c
 8033a68:	af0a      	add	r7, sp, #40	; 0x28
 8033a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8033a6c:	687b      	ldr	r3, [r7, #4]
 8033a6e:	2b00      	cmp	r3, #0
 8033a70:	d101      	bne.n	8033a76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8033a72:	2301      	movs	r3, #1
 8033a74:	e116      	b.n	8033ca4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8033a76:	687b      	ldr	r3, [r7, #4]
 8033a78:	681b      	ldr	r3, [r3, #0]
 8033a7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8033a7c:	687b      	ldr	r3, [r7, #4]
 8033a7e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8033a82:	b2db      	uxtb	r3, r3
 8033a84:	2b00      	cmp	r3, #0
 8033a86:	d106      	bne.n	8033a96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8033a88:	687b      	ldr	r3, [r7, #4]
 8033a8a:	2200      	movs	r2, #0
 8033a8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8033a90:	6878      	ldr	r0, [r7, #4]
 8033a92:	f00c f82f 	bl	803faf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8033a96:	687b      	ldr	r3, [r7, #4]
 8033a98:	2203      	movs	r2, #3
 8033a9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8033a9e:	68bb      	ldr	r3, [r7, #8]
 8033aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8033aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8033aa6:	2b00      	cmp	r3, #0
 8033aa8:	d102      	bne.n	8033ab0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8033aaa:	687b      	ldr	r3, [r7, #4]
 8033aac:	2200      	movs	r2, #0
 8033aae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8033ab0:	687b      	ldr	r3, [r7, #4]
 8033ab2:	681b      	ldr	r3, [r3, #0]
 8033ab4:	4618      	mov	r0, r3
 8033ab6:	f008 fb78 	bl	803c1aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8033aba:	687b      	ldr	r3, [r7, #4]
 8033abc:	681b      	ldr	r3, [r3, #0]
 8033abe:	603b      	str	r3, [r7, #0]
 8033ac0:	687e      	ldr	r6, [r7, #4]
 8033ac2:	466d      	mov	r5, sp
 8033ac4:	f106 0410 	add.w	r4, r6, #16
 8033ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8033aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8033acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8033ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8033ad0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8033ad4:	e885 0003 	stmia.w	r5, {r0, r1}
 8033ad8:	1d33      	adds	r3, r6, #4
 8033ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8033adc:	6838      	ldr	r0, [r7, #0]
 8033ade:	f008 fa43 	bl	803bf68 <USB_CoreInit>
 8033ae2:	4603      	mov	r3, r0
 8033ae4:	2b00      	cmp	r3, #0
 8033ae6:	d005      	beq.n	8033af4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8033ae8:	687b      	ldr	r3, [r7, #4]
 8033aea:	2202      	movs	r2, #2
 8033aec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8033af0:	2301      	movs	r3, #1
 8033af2:	e0d7      	b.n	8033ca4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8033af4:	687b      	ldr	r3, [r7, #4]
 8033af6:	681b      	ldr	r3, [r3, #0]
 8033af8:	2100      	movs	r1, #0
 8033afa:	4618      	mov	r0, r3
 8033afc:	f008 fb66 	bl	803c1cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8033b00:	2300      	movs	r3, #0
 8033b02:	73fb      	strb	r3, [r7, #15]
 8033b04:	e04a      	b.n	8033b9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8033b06:	7bfa      	ldrb	r2, [r7, #15]
 8033b08:	6879      	ldr	r1, [r7, #4]
 8033b0a:	4613      	mov	r3, r2
 8033b0c:	00db      	lsls	r3, r3, #3
 8033b0e:	4413      	add	r3, r2
 8033b10:	009b      	lsls	r3, r3, #2
 8033b12:	440b      	add	r3, r1
 8033b14:	333d      	adds	r3, #61	; 0x3d
 8033b16:	2201      	movs	r2, #1
 8033b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8033b1a:	7bfa      	ldrb	r2, [r7, #15]
 8033b1c:	6879      	ldr	r1, [r7, #4]
 8033b1e:	4613      	mov	r3, r2
 8033b20:	00db      	lsls	r3, r3, #3
 8033b22:	4413      	add	r3, r2
 8033b24:	009b      	lsls	r3, r3, #2
 8033b26:	440b      	add	r3, r1
 8033b28:	333c      	adds	r3, #60	; 0x3c
 8033b2a:	7bfa      	ldrb	r2, [r7, #15]
 8033b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8033b2e:	7bfa      	ldrb	r2, [r7, #15]
 8033b30:	7bfb      	ldrb	r3, [r7, #15]
 8033b32:	b298      	uxth	r0, r3
 8033b34:	6879      	ldr	r1, [r7, #4]
 8033b36:	4613      	mov	r3, r2
 8033b38:	00db      	lsls	r3, r3, #3
 8033b3a:	4413      	add	r3, r2
 8033b3c:	009b      	lsls	r3, r3, #2
 8033b3e:	440b      	add	r3, r1
 8033b40:	3344      	adds	r3, #68	; 0x44
 8033b42:	4602      	mov	r2, r0
 8033b44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8033b46:	7bfa      	ldrb	r2, [r7, #15]
 8033b48:	6879      	ldr	r1, [r7, #4]
 8033b4a:	4613      	mov	r3, r2
 8033b4c:	00db      	lsls	r3, r3, #3
 8033b4e:	4413      	add	r3, r2
 8033b50:	009b      	lsls	r3, r3, #2
 8033b52:	440b      	add	r3, r1
 8033b54:	3340      	adds	r3, #64	; 0x40
 8033b56:	2200      	movs	r2, #0
 8033b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8033b5a:	7bfa      	ldrb	r2, [r7, #15]
 8033b5c:	6879      	ldr	r1, [r7, #4]
 8033b5e:	4613      	mov	r3, r2
 8033b60:	00db      	lsls	r3, r3, #3
 8033b62:	4413      	add	r3, r2
 8033b64:	009b      	lsls	r3, r3, #2
 8033b66:	440b      	add	r3, r1
 8033b68:	3348      	adds	r3, #72	; 0x48
 8033b6a:	2200      	movs	r2, #0
 8033b6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8033b6e:	7bfa      	ldrb	r2, [r7, #15]
 8033b70:	6879      	ldr	r1, [r7, #4]
 8033b72:	4613      	mov	r3, r2
 8033b74:	00db      	lsls	r3, r3, #3
 8033b76:	4413      	add	r3, r2
 8033b78:	009b      	lsls	r3, r3, #2
 8033b7a:	440b      	add	r3, r1
 8033b7c:	334c      	adds	r3, #76	; 0x4c
 8033b7e:	2200      	movs	r2, #0
 8033b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8033b82:	7bfa      	ldrb	r2, [r7, #15]
 8033b84:	6879      	ldr	r1, [r7, #4]
 8033b86:	4613      	mov	r3, r2
 8033b88:	00db      	lsls	r3, r3, #3
 8033b8a:	4413      	add	r3, r2
 8033b8c:	009b      	lsls	r3, r3, #2
 8033b8e:	440b      	add	r3, r1
 8033b90:	3354      	adds	r3, #84	; 0x54
 8033b92:	2200      	movs	r2, #0
 8033b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8033b96:	7bfb      	ldrb	r3, [r7, #15]
 8033b98:	3301      	adds	r3, #1
 8033b9a:	73fb      	strb	r3, [r7, #15]
 8033b9c:	7bfa      	ldrb	r2, [r7, #15]
 8033b9e:	687b      	ldr	r3, [r7, #4]
 8033ba0:	685b      	ldr	r3, [r3, #4]
 8033ba2:	429a      	cmp	r2, r3
 8033ba4:	d3af      	bcc.n	8033b06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8033ba6:	2300      	movs	r3, #0
 8033ba8:	73fb      	strb	r3, [r7, #15]
 8033baa:	e044      	b.n	8033c36 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8033bac:	7bfa      	ldrb	r2, [r7, #15]
 8033bae:	6879      	ldr	r1, [r7, #4]
 8033bb0:	4613      	mov	r3, r2
 8033bb2:	00db      	lsls	r3, r3, #3
 8033bb4:	4413      	add	r3, r2
 8033bb6:	009b      	lsls	r3, r3, #2
 8033bb8:	440b      	add	r3, r1
 8033bba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8033bbe:	2200      	movs	r2, #0
 8033bc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8033bc2:	7bfa      	ldrb	r2, [r7, #15]
 8033bc4:	6879      	ldr	r1, [r7, #4]
 8033bc6:	4613      	mov	r3, r2
 8033bc8:	00db      	lsls	r3, r3, #3
 8033bca:	4413      	add	r3, r2
 8033bcc:	009b      	lsls	r3, r3, #2
 8033bce:	440b      	add	r3, r1
 8033bd0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8033bd4:	7bfa      	ldrb	r2, [r7, #15]
 8033bd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8033bd8:	7bfa      	ldrb	r2, [r7, #15]
 8033bda:	6879      	ldr	r1, [r7, #4]
 8033bdc:	4613      	mov	r3, r2
 8033bde:	00db      	lsls	r3, r3, #3
 8033be0:	4413      	add	r3, r2
 8033be2:	009b      	lsls	r3, r3, #2
 8033be4:	440b      	add	r3, r1
 8033be6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8033bea:	2200      	movs	r2, #0
 8033bec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8033bee:	7bfa      	ldrb	r2, [r7, #15]
 8033bf0:	6879      	ldr	r1, [r7, #4]
 8033bf2:	4613      	mov	r3, r2
 8033bf4:	00db      	lsls	r3, r3, #3
 8033bf6:	4413      	add	r3, r2
 8033bf8:	009b      	lsls	r3, r3, #2
 8033bfa:	440b      	add	r3, r1
 8033bfc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8033c00:	2200      	movs	r2, #0
 8033c02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8033c04:	7bfa      	ldrb	r2, [r7, #15]
 8033c06:	6879      	ldr	r1, [r7, #4]
 8033c08:	4613      	mov	r3, r2
 8033c0a:	00db      	lsls	r3, r3, #3
 8033c0c:	4413      	add	r3, r2
 8033c0e:	009b      	lsls	r3, r3, #2
 8033c10:	440b      	add	r3, r1
 8033c12:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8033c16:	2200      	movs	r2, #0
 8033c18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8033c1a:	7bfa      	ldrb	r2, [r7, #15]
 8033c1c:	6879      	ldr	r1, [r7, #4]
 8033c1e:	4613      	mov	r3, r2
 8033c20:	00db      	lsls	r3, r3, #3
 8033c22:	4413      	add	r3, r2
 8033c24:	009b      	lsls	r3, r3, #2
 8033c26:	440b      	add	r3, r1
 8033c28:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8033c2c:	2200      	movs	r2, #0
 8033c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8033c30:	7bfb      	ldrb	r3, [r7, #15]
 8033c32:	3301      	adds	r3, #1
 8033c34:	73fb      	strb	r3, [r7, #15]
 8033c36:	7bfa      	ldrb	r2, [r7, #15]
 8033c38:	687b      	ldr	r3, [r7, #4]
 8033c3a:	685b      	ldr	r3, [r3, #4]
 8033c3c:	429a      	cmp	r2, r3
 8033c3e:	d3b5      	bcc.n	8033bac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8033c40:	687b      	ldr	r3, [r7, #4]
 8033c42:	681b      	ldr	r3, [r3, #0]
 8033c44:	603b      	str	r3, [r7, #0]
 8033c46:	687e      	ldr	r6, [r7, #4]
 8033c48:	466d      	mov	r5, sp
 8033c4a:	f106 0410 	add.w	r4, r6, #16
 8033c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8033c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8033c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8033c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8033c56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8033c5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8033c5e:	1d33      	adds	r3, r6, #4
 8033c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8033c62:	6838      	ldr	r0, [r7, #0]
 8033c64:	f008 fafe 	bl	803c264 <USB_DevInit>
 8033c68:	4603      	mov	r3, r0
 8033c6a:	2b00      	cmp	r3, #0
 8033c6c:	d005      	beq.n	8033c7a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8033c6e:	687b      	ldr	r3, [r7, #4]
 8033c70:	2202      	movs	r2, #2
 8033c72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8033c76:	2301      	movs	r3, #1
 8033c78:	e014      	b.n	8033ca4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8033c7a:	687b      	ldr	r3, [r7, #4]
 8033c7c:	2200      	movs	r2, #0
 8033c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8033c82:	687b      	ldr	r3, [r7, #4]
 8033c84:	2201      	movs	r2, #1
 8033c86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8033c8a:	687b      	ldr	r3, [r7, #4]
 8033c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8033c8e:	2b01      	cmp	r3, #1
 8033c90:	d102      	bne.n	8033c98 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8033c92:	6878      	ldr	r0, [r7, #4]
 8033c94:	f001 f98c 	bl	8034fb0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8033c98:	687b      	ldr	r3, [r7, #4]
 8033c9a:	681b      	ldr	r3, [r3, #0]
 8033c9c:	4618      	mov	r0, r3
 8033c9e:	f009 fc4c 	bl	803d53a <USB_DevDisconnect>

  return HAL_OK;
 8033ca2:	2300      	movs	r3, #0
}
 8033ca4:	4618      	mov	r0, r3
 8033ca6:	3714      	adds	r7, #20
 8033ca8:	46bd      	mov	sp, r7
 8033caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08033cac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8033cac:	b580      	push	{r7, lr}
 8033cae:	b084      	sub	sp, #16
 8033cb0:	af00      	add	r7, sp, #0
 8033cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8033cb4:	687b      	ldr	r3, [r7, #4]
 8033cb6:	681b      	ldr	r3, [r3, #0]
 8033cb8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8033cba:	687b      	ldr	r3, [r7, #4]
 8033cbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8033cc0:	2b01      	cmp	r3, #1
 8033cc2:	d101      	bne.n	8033cc8 <HAL_PCD_Start+0x1c>
 8033cc4:	2302      	movs	r3, #2
 8033cc6:	e020      	b.n	8033d0a <HAL_PCD_Start+0x5e>
 8033cc8:	687b      	ldr	r3, [r7, #4]
 8033cca:	2201      	movs	r2, #1
 8033ccc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8033cd0:	687b      	ldr	r3, [r7, #4]
 8033cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033cd4:	2b01      	cmp	r3, #1
 8033cd6:	d109      	bne.n	8033cec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8033cd8:	687b      	ldr	r3, [r7, #4]
 8033cda:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8033cdc:	2b01      	cmp	r3, #1
 8033cde:	d005      	beq.n	8033cec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8033ce0:	68fb      	ldr	r3, [r7, #12]
 8033ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033ce4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8033ce8:	68fb      	ldr	r3, [r7, #12]
 8033cea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8033cec:	687b      	ldr	r3, [r7, #4]
 8033cee:	681b      	ldr	r3, [r3, #0]
 8033cf0:	4618      	mov	r0, r3
 8033cf2:	f008 fa49 	bl	803c188 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8033cf6:	687b      	ldr	r3, [r7, #4]
 8033cf8:	681b      	ldr	r3, [r3, #0]
 8033cfa:	4618      	mov	r0, r3
 8033cfc:	f009 fbfc 	bl	803d4f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8033d00:	687b      	ldr	r3, [r7, #4]
 8033d02:	2200      	movs	r2, #0
 8033d04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8033d08:	2300      	movs	r3, #0
}
 8033d0a:	4618      	mov	r0, r3
 8033d0c:	3710      	adds	r7, #16
 8033d0e:	46bd      	mov	sp, r7
 8033d10:	bd80      	pop	{r7, pc}

08033d12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8033d12:	b590      	push	{r4, r7, lr}
 8033d14:	b08d      	sub	sp, #52	; 0x34
 8033d16:	af00      	add	r7, sp, #0
 8033d18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8033d1a:	687b      	ldr	r3, [r7, #4]
 8033d1c:	681b      	ldr	r3, [r3, #0]
 8033d1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8033d20:	6a3b      	ldr	r3, [r7, #32]
 8033d22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8033d24:	687b      	ldr	r3, [r7, #4]
 8033d26:	681b      	ldr	r3, [r3, #0]
 8033d28:	4618      	mov	r0, r3
 8033d2a:	f009 fcba 	bl	803d6a2 <USB_GetMode>
 8033d2e:	4603      	mov	r3, r0
 8033d30:	2b00      	cmp	r3, #0
 8033d32:	f040 84b7 	bne.w	80346a4 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8033d36:	687b      	ldr	r3, [r7, #4]
 8033d38:	681b      	ldr	r3, [r3, #0]
 8033d3a:	4618      	mov	r0, r3
 8033d3c:	f009 fc1e 	bl	803d57c <USB_ReadInterrupts>
 8033d40:	4603      	mov	r3, r0
 8033d42:	2b00      	cmp	r3, #0
 8033d44:	f000 84ad 	beq.w	80346a2 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8033d48:	69fb      	ldr	r3, [r7, #28]
 8033d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033d4e:	689b      	ldr	r3, [r3, #8]
 8033d50:	0a1b      	lsrs	r3, r3, #8
 8033d52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8033d56:	687b      	ldr	r3, [r7, #4]
 8033d58:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8033d5c:	687b      	ldr	r3, [r7, #4]
 8033d5e:	681b      	ldr	r3, [r3, #0]
 8033d60:	4618      	mov	r0, r3
 8033d62:	f009 fc0b 	bl	803d57c <USB_ReadInterrupts>
 8033d66:	4603      	mov	r3, r0
 8033d68:	f003 0302 	and.w	r3, r3, #2
 8033d6c:	2b02      	cmp	r3, #2
 8033d6e:	d107      	bne.n	8033d80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8033d70:	687b      	ldr	r3, [r7, #4]
 8033d72:	681b      	ldr	r3, [r3, #0]
 8033d74:	695a      	ldr	r2, [r3, #20]
 8033d76:	687b      	ldr	r3, [r7, #4]
 8033d78:	681b      	ldr	r3, [r3, #0]
 8033d7a:	f002 0202 	and.w	r2, r2, #2
 8033d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8033d80:	687b      	ldr	r3, [r7, #4]
 8033d82:	681b      	ldr	r3, [r3, #0]
 8033d84:	4618      	mov	r0, r3
 8033d86:	f009 fbf9 	bl	803d57c <USB_ReadInterrupts>
 8033d8a:	4603      	mov	r3, r0
 8033d8c:	f003 0310 	and.w	r3, r3, #16
 8033d90:	2b10      	cmp	r3, #16
 8033d92:	d161      	bne.n	8033e58 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8033d94:	687b      	ldr	r3, [r7, #4]
 8033d96:	681b      	ldr	r3, [r3, #0]
 8033d98:	699a      	ldr	r2, [r3, #24]
 8033d9a:	687b      	ldr	r3, [r7, #4]
 8033d9c:	681b      	ldr	r3, [r3, #0]
 8033d9e:	f022 0210 	bic.w	r2, r2, #16
 8033da2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8033da4:	6a3b      	ldr	r3, [r7, #32]
 8033da6:	6a1b      	ldr	r3, [r3, #32]
 8033da8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8033daa:	69bb      	ldr	r3, [r7, #24]
 8033dac:	f003 020f 	and.w	r2, r3, #15
 8033db0:	4613      	mov	r3, r2
 8033db2:	00db      	lsls	r3, r3, #3
 8033db4:	4413      	add	r3, r2
 8033db6:	009b      	lsls	r3, r3, #2
 8033db8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033dbc:	687a      	ldr	r2, [r7, #4]
 8033dbe:	4413      	add	r3, r2
 8033dc0:	3304      	adds	r3, #4
 8033dc2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8033dc4:	69bb      	ldr	r3, [r7, #24]
 8033dc6:	0c5b      	lsrs	r3, r3, #17
 8033dc8:	f003 030f 	and.w	r3, r3, #15
 8033dcc:	2b02      	cmp	r3, #2
 8033dce:	d124      	bne.n	8033e1a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8033dd0:	69ba      	ldr	r2, [r7, #24]
 8033dd2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8033dd6:	4013      	ands	r3, r2
 8033dd8:	2b00      	cmp	r3, #0
 8033dda:	d035      	beq.n	8033e48 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8033ddc:	697b      	ldr	r3, [r7, #20]
 8033dde:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8033de0:	69bb      	ldr	r3, [r7, #24]
 8033de2:	091b      	lsrs	r3, r3, #4
 8033de4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8033de6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8033dea:	b29b      	uxth	r3, r3
 8033dec:	461a      	mov	r2, r3
 8033dee:	6a38      	ldr	r0, [r7, #32]
 8033df0:	f009 fa30 	bl	803d254 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8033df4:	697b      	ldr	r3, [r7, #20]
 8033df6:	691a      	ldr	r2, [r3, #16]
 8033df8:	69bb      	ldr	r3, [r7, #24]
 8033dfa:	091b      	lsrs	r3, r3, #4
 8033dfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8033e00:	441a      	add	r2, r3
 8033e02:	697b      	ldr	r3, [r7, #20]
 8033e04:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8033e06:	697b      	ldr	r3, [r7, #20]
 8033e08:	6a1a      	ldr	r2, [r3, #32]
 8033e0a:	69bb      	ldr	r3, [r7, #24]
 8033e0c:	091b      	lsrs	r3, r3, #4
 8033e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8033e12:	441a      	add	r2, r3
 8033e14:	697b      	ldr	r3, [r7, #20]
 8033e16:	621a      	str	r2, [r3, #32]
 8033e18:	e016      	b.n	8033e48 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8033e1a:	69bb      	ldr	r3, [r7, #24]
 8033e1c:	0c5b      	lsrs	r3, r3, #17
 8033e1e:	f003 030f 	and.w	r3, r3, #15
 8033e22:	2b06      	cmp	r3, #6
 8033e24:	d110      	bne.n	8033e48 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8033e26:	687b      	ldr	r3, [r7, #4]
 8033e28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8033e2c:	2208      	movs	r2, #8
 8033e2e:	4619      	mov	r1, r3
 8033e30:	6a38      	ldr	r0, [r7, #32]
 8033e32:	f009 fa0f 	bl	803d254 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8033e36:	697b      	ldr	r3, [r7, #20]
 8033e38:	6a1a      	ldr	r2, [r3, #32]
 8033e3a:	69bb      	ldr	r3, [r7, #24]
 8033e3c:	091b      	lsrs	r3, r3, #4
 8033e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8033e42:	441a      	add	r2, r3
 8033e44:	697b      	ldr	r3, [r7, #20]
 8033e46:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8033e48:	687b      	ldr	r3, [r7, #4]
 8033e4a:	681b      	ldr	r3, [r3, #0]
 8033e4c:	699a      	ldr	r2, [r3, #24]
 8033e4e:	687b      	ldr	r3, [r7, #4]
 8033e50:	681b      	ldr	r3, [r3, #0]
 8033e52:	f042 0210 	orr.w	r2, r2, #16
 8033e56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8033e58:	687b      	ldr	r3, [r7, #4]
 8033e5a:	681b      	ldr	r3, [r3, #0]
 8033e5c:	4618      	mov	r0, r3
 8033e5e:	f009 fb8d 	bl	803d57c <USB_ReadInterrupts>
 8033e62:	4603      	mov	r3, r0
 8033e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8033e68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8033e6c:	f040 80a7 	bne.w	8033fbe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8033e70:	2300      	movs	r3, #0
 8033e72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8033e74:	687b      	ldr	r3, [r7, #4]
 8033e76:	681b      	ldr	r3, [r3, #0]
 8033e78:	4618      	mov	r0, r3
 8033e7a:	f009 fb92 	bl	803d5a2 <USB_ReadDevAllOutEpInterrupt>
 8033e7e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8033e80:	e099      	b.n	8033fb6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8033e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8033e84:	f003 0301 	and.w	r3, r3, #1
 8033e88:	2b00      	cmp	r3, #0
 8033e8a:	f000 808e 	beq.w	8033faa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8033e8e:	687b      	ldr	r3, [r7, #4]
 8033e90:	681b      	ldr	r3, [r3, #0]
 8033e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033e94:	b2d2      	uxtb	r2, r2
 8033e96:	4611      	mov	r1, r2
 8033e98:	4618      	mov	r0, r3
 8033e9a:	f009 fbb6 	bl	803d60a <USB_ReadDevOutEPInterrupt>
 8033e9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8033ea0:	693b      	ldr	r3, [r7, #16]
 8033ea2:	f003 0301 	and.w	r3, r3, #1
 8033ea6:	2b00      	cmp	r3, #0
 8033ea8:	d00c      	beq.n	8033ec4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8033eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033eac:	015a      	lsls	r2, r3, #5
 8033eae:	69fb      	ldr	r3, [r7, #28]
 8033eb0:	4413      	add	r3, r2
 8033eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033eb6:	461a      	mov	r2, r3
 8033eb8:	2301      	movs	r3, #1
 8033eba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8033ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8033ebe:	6878      	ldr	r0, [r7, #4]
 8033ec0:	f000 fef0 	bl	8034ca4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8033ec4:	693b      	ldr	r3, [r7, #16]
 8033ec6:	f003 0308 	and.w	r3, r3, #8
 8033eca:	2b00      	cmp	r3, #0
 8033ecc:	d00c      	beq.n	8033ee8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8033ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033ed0:	015a      	lsls	r2, r3, #5
 8033ed2:	69fb      	ldr	r3, [r7, #28]
 8033ed4:	4413      	add	r3, r2
 8033ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033eda:	461a      	mov	r2, r3
 8033edc:	2308      	movs	r3, #8
 8033ede:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8033ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8033ee2:	6878      	ldr	r0, [r7, #4]
 8033ee4:	f000 ffc6 	bl	8034e74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8033ee8:	693b      	ldr	r3, [r7, #16]
 8033eea:	f003 0310 	and.w	r3, r3, #16
 8033eee:	2b00      	cmp	r3, #0
 8033ef0:	d008      	beq.n	8033f04 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8033ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033ef4:	015a      	lsls	r2, r3, #5
 8033ef6:	69fb      	ldr	r3, [r7, #28]
 8033ef8:	4413      	add	r3, r2
 8033efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033efe:	461a      	mov	r2, r3
 8033f00:	2310      	movs	r3, #16
 8033f02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8033f04:	693b      	ldr	r3, [r7, #16]
 8033f06:	f003 0302 	and.w	r3, r3, #2
 8033f0a:	2b00      	cmp	r3, #0
 8033f0c:	d030      	beq.n	8033f70 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8033f0e:	6a3b      	ldr	r3, [r7, #32]
 8033f10:	695b      	ldr	r3, [r3, #20]
 8033f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8033f16:	2b80      	cmp	r3, #128	; 0x80
 8033f18:	d109      	bne.n	8033f2e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8033f1a:	69fb      	ldr	r3, [r7, #28]
 8033f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033f20:	685b      	ldr	r3, [r3, #4]
 8033f22:	69fa      	ldr	r2, [r7, #28]
 8033f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8033f28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8033f2c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8033f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033f30:	4613      	mov	r3, r2
 8033f32:	00db      	lsls	r3, r3, #3
 8033f34:	4413      	add	r3, r2
 8033f36:	009b      	lsls	r3, r3, #2
 8033f38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033f3c:	687a      	ldr	r2, [r7, #4]
 8033f3e:	4413      	add	r3, r2
 8033f40:	3304      	adds	r3, #4
 8033f42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8033f44:	697b      	ldr	r3, [r7, #20]
 8033f46:	78db      	ldrb	r3, [r3, #3]
 8033f48:	2b01      	cmp	r3, #1
 8033f4a:	d108      	bne.n	8033f5e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8033f4c:	697b      	ldr	r3, [r7, #20]
 8033f4e:	2200      	movs	r2, #0
 8033f50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8033f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f54:	b2db      	uxtb	r3, r3
 8033f56:	4619      	mov	r1, r3
 8033f58:	6878      	ldr	r0, [r7, #4]
 8033f5a:	f00b fef7 	bl	803fd4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8033f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f60:	015a      	lsls	r2, r3, #5
 8033f62:	69fb      	ldr	r3, [r7, #28]
 8033f64:	4413      	add	r3, r2
 8033f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033f6a:	461a      	mov	r2, r3
 8033f6c:	2302      	movs	r3, #2
 8033f6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8033f70:	693b      	ldr	r3, [r7, #16]
 8033f72:	f003 0320 	and.w	r3, r3, #32
 8033f76:	2b00      	cmp	r3, #0
 8033f78:	d008      	beq.n	8033f8c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8033f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f7c:	015a      	lsls	r2, r3, #5
 8033f7e:	69fb      	ldr	r3, [r7, #28]
 8033f80:	4413      	add	r3, r2
 8033f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033f86:	461a      	mov	r2, r3
 8033f88:	2320      	movs	r3, #32
 8033f8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8033f8c:	693b      	ldr	r3, [r7, #16]
 8033f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8033f92:	2b00      	cmp	r3, #0
 8033f94:	d009      	beq.n	8033faa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8033f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033f98:	015a      	lsls	r2, r3, #5
 8033f9a:	69fb      	ldr	r3, [r7, #28]
 8033f9c:	4413      	add	r3, r2
 8033f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033fa2:	461a      	mov	r2, r3
 8033fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8033fa8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8033faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033fac:	3301      	adds	r3, #1
 8033fae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8033fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8033fb2:	085b      	lsrs	r3, r3, #1
 8033fb4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8033fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8033fb8:	2b00      	cmp	r3, #0
 8033fba:	f47f af62 	bne.w	8033e82 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8033fbe:	687b      	ldr	r3, [r7, #4]
 8033fc0:	681b      	ldr	r3, [r3, #0]
 8033fc2:	4618      	mov	r0, r3
 8033fc4:	f009 fada 	bl	803d57c <USB_ReadInterrupts>
 8033fc8:	4603      	mov	r3, r0
 8033fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8033fce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8033fd2:	f040 80db 	bne.w	803418c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8033fd6:	687b      	ldr	r3, [r7, #4]
 8033fd8:	681b      	ldr	r3, [r3, #0]
 8033fda:	4618      	mov	r0, r3
 8033fdc:	f009 fafb 	bl	803d5d6 <USB_ReadDevAllInEpInterrupt>
 8033fe0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8033fe2:	2300      	movs	r3, #0
 8033fe4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8033fe6:	e0cd      	b.n	8034184 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8033fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8033fea:	f003 0301 	and.w	r3, r3, #1
 8033fee:	2b00      	cmp	r3, #0
 8033ff0:	f000 80c2 	beq.w	8034178 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8033ff4:	687b      	ldr	r3, [r7, #4]
 8033ff6:	681b      	ldr	r3, [r3, #0]
 8033ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033ffa:	b2d2      	uxtb	r2, r2
 8033ffc:	4611      	mov	r1, r2
 8033ffe:	4618      	mov	r0, r3
 8034000:	f009 fb21 	bl	803d646 <USB_ReadDevInEPInterrupt>
 8034004:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8034006:	693b      	ldr	r3, [r7, #16]
 8034008:	f003 0301 	and.w	r3, r3, #1
 803400c:	2b00      	cmp	r3, #0
 803400e:	d057      	beq.n	80340c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8034010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034012:	f003 030f 	and.w	r3, r3, #15
 8034016:	2201      	movs	r2, #1
 8034018:	fa02 f303 	lsl.w	r3, r2, r3
 803401c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 803401e:	69fb      	ldr	r3, [r7, #28]
 8034020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8034024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8034026:	68fb      	ldr	r3, [r7, #12]
 8034028:	43db      	mvns	r3, r3
 803402a:	69f9      	ldr	r1, [r7, #28]
 803402c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8034030:	4013      	ands	r3, r2
 8034032:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8034034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034036:	015a      	lsls	r2, r3, #5
 8034038:	69fb      	ldr	r3, [r7, #28]
 803403a:	4413      	add	r3, r2
 803403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8034040:	461a      	mov	r2, r3
 8034042:	2301      	movs	r3, #1
 8034044:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8034046:	687b      	ldr	r3, [r7, #4]
 8034048:	691b      	ldr	r3, [r3, #16]
 803404a:	2b01      	cmp	r3, #1
 803404c:	d132      	bne.n	80340b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 803404e:	6879      	ldr	r1, [r7, #4]
 8034050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034052:	4613      	mov	r3, r2
 8034054:	00db      	lsls	r3, r3, #3
 8034056:	4413      	add	r3, r2
 8034058:	009b      	lsls	r3, r3, #2
 803405a:	440b      	add	r3, r1
 803405c:	334c      	adds	r3, #76	; 0x4c
 803405e:	6819      	ldr	r1, [r3, #0]
 8034060:	6878      	ldr	r0, [r7, #4]
 8034062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034064:	4613      	mov	r3, r2
 8034066:	00db      	lsls	r3, r3, #3
 8034068:	4413      	add	r3, r2
 803406a:	009b      	lsls	r3, r3, #2
 803406c:	4403      	add	r3, r0
 803406e:	3348      	adds	r3, #72	; 0x48
 8034070:	681b      	ldr	r3, [r3, #0]
 8034072:	4419      	add	r1, r3
 8034074:	6878      	ldr	r0, [r7, #4]
 8034076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034078:	4613      	mov	r3, r2
 803407a:	00db      	lsls	r3, r3, #3
 803407c:	4413      	add	r3, r2
 803407e:	009b      	lsls	r3, r3, #2
 8034080:	4403      	add	r3, r0
 8034082:	334c      	adds	r3, #76	; 0x4c
 8034084:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8034086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034088:	2b00      	cmp	r3, #0
 803408a:	d113      	bne.n	80340b4 <HAL_PCD_IRQHandler+0x3a2>
 803408c:	6879      	ldr	r1, [r7, #4]
 803408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034090:	4613      	mov	r3, r2
 8034092:	00db      	lsls	r3, r3, #3
 8034094:	4413      	add	r3, r2
 8034096:	009b      	lsls	r3, r3, #2
 8034098:	440b      	add	r3, r1
 803409a:	3354      	adds	r3, #84	; 0x54
 803409c:	681b      	ldr	r3, [r3, #0]
 803409e:	2b00      	cmp	r3, #0
 80340a0:	d108      	bne.n	80340b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80340a2:	687b      	ldr	r3, [r7, #4]
 80340a4:	6818      	ldr	r0, [r3, #0]
 80340a6:	687b      	ldr	r3, [r7, #4]
 80340a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80340ac:	461a      	mov	r2, r3
 80340ae:	2101      	movs	r1, #1
 80340b0:	f009 fb2a 	bl	803d708 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80340b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80340b6:	b2db      	uxtb	r3, r3
 80340b8:	4619      	mov	r1, r3
 80340ba:	6878      	ldr	r0, [r7, #4]
 80340bc:	f00b fdc1 	bl	803fc42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80340c0:	693b      	ldr	r3, [r7, #16]
 80340c2:	f003 0308 	and.w	r3, r3, #8
 80340c6:	2b00      	cmp	r3, #0
 80340c8:	d008      	beq.n	80340dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80340ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80340cc:	015a      	lsls	r2, r3, #5
 80340ce:	69fb      	ldr	r3, [r7, #28]
 80340d0:	4413      	add	r3, r2
 80340d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80340d6:	461a      	mov	r2, r3
 80340d8:	2308      	movs	r3, #8
 80340da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80340dc:	693b      	ldr	r3, [r7, #16]
 80340de:	f003 0310 	and.w	r3, r3, #16
 80340e2:	2b00      	cmp	r3, #0
 80340e4:	d008      	beq.n	80340f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80340e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80340e8:	015a      	lsls	r2, r3, #5
 80340ea:	69fb      	ldr	r3, [r7, #28]
 80340ec:	4413      	add	r3, r2
 80340ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80340f2:	461a      	mov	r2, r3
 80340f4:	2310      	movs	r3, #16
 80340f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80340f8:	693b      	ldr	r3, [r7, #16]
 80340fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80340fe:	2b00      	cmp	r3, #0
 8034100:	d008      	beq.n	8034114 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8034102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034104:	015a      	lsls	r2, r3, #5
 8034106:	69fb      	ldr	r3, [r7, #28]
 8034108:	4413      	add	r3, r2
 803410a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803410e:	461a      	mov	r2, r3
 8034110:	2340      	movs	r3, #64	; 0x40
 8034112:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8034114:	693b      	ldr	r3, [r7, #16]
 8034116:	f003 0302 	and.w	r3, r3, #2
 803411a:	2b00      	cmp	r3, #0
 803411c:	d023      	beq.n	8034166 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 803411e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8034120:	6a38      	ldr	r0, [r7, #32]
 8034122:	f008 f9fd 	bl	803c520 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8034126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034128:	4613      	mov	r3, r2
 803412a:	00db      	lsls	r3, r3, #3
 803412c:	4413      	add	r3, r2
 803412e:	009b      	lsls	r3, r3, #2
 8034130:	3338      	adds	r3, #56	; 0x38
 8034132:	687a      	ldr	r2, [r7, #4]
 8034134:	4413      	add	r3, r2
 8034136:	3304      	adds	r3, #4
 8034138:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 803413a:	697b      	ldr	r3, [r7, #20]
 803413c:	78db      	ldrb	r3, [r3, #3]
 803413e:	2b01      	cmp	r3, #1
 8034140:	d108      	bne.n	8034154 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8034142:	697b      	ldr	r3, [r7, #20]
 8034144:	2200      	movs	r2, #0
 8034146:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8034148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803414a:	b2db      	uxtb	r3, r3
 803414c:	4619      	mov	r1, r3
 803414e:	6878      	ldr	r0, [r7, #4]
 8034150:	f00b fe0e 	bl	803fd70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8034154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034156:	015a      	lsls	r2, r3, #5
 8034158:	69fb      	ldr	r3, [r7, #28]
 803415a:	4413      	add	r3, r2
 803415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8034160:	461a      	mov	r2, r3
 8034162:	2302      	movs	r3, #2
 8034164:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8034166:	693b      	ldr	r3, [r7, #16]
 8034168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803416c:	2b00      	cmp	r3, #0
 803416e:	d003      	beq.n	8034178 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8034170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8034172:	6878      	ldr	r0, [r7, #4]
 8034174:	f000 fd08 	bl	8034b88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8034178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803417a:	3301      	adds	r3, #1
 803417c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 803417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034180:	085b      	lsrs	r3, r3, #1
 8034182:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8034184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034186:	2b00      	cmp	r3, #0
 8034188:	f47f af2e 	bne.w	8033fe8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 803418c:	687b      	ldr	r3, [r7, #4]
 803418e:	681b      	ldr	r3, [r3, #0]
 8034190:	4618      	mov	r0, r3
 8034192:	f009 f9f3 	bl	803d57c <USB_ReadInterrupts>
 8034196:	4603      	mov	r3, r0
 8034198:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803419c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80341a0:	d122      	bne.n	80341e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80341a2:	69fb      	ldr	r3, [r7, #28]
 80341a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80341a8:	685b      	ldr	r3, [r3, #4]
 80341aa:	69fa      	ldr	r2, [r7, #28]
 80341ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80341b0:	f023 0301 	bic.w	r3, r3, #1
 80341b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80341b6:	687b      	ldr	r3, [r7, #4]
 80341b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80341bc:	2b01      	cmp	r3, #1
 80341be:	d108      	bne.n	80341d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80341c0:	687b      	ldr	r3, [r7, #4]
 80341c2:	2200      	movs	r2, #0
 80341c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80341c8:	2100      	movs	r1, #0
 80341ca:	6878      	ldr	r0, [r7, #4]
 80341cc:	f000 ff14 	bl	8034ff8 <HAL_PCDEx_LPM_Callback>
 80341d0:	e002      	b.n	80341d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80341d2:	6878      	ldr	r0, [r7, #4]
 80341d4:	f00b fdac 	bl	803fd30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80341d8:	687b      	ldr	r3, [r7, #4]
 80341da:	681b      	ldr	r3, [r3, #0]
 80341dc:	695a      	ldr	r2, [r3, #20]
 80341de:	687b      	ldr	r3, [r7, #4]
 80341e0:	681b      	ldr	r3, [r3, #0]
 80341e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80341e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80341e8:	687b      	ldr	r3, [r7, #4]
 80341ea:	681b      	ldr	r3, [r3, #0]
 80341ec:	4618      	mov	r0, r3
 80341ee:	f009 f9c5 	bl	803d57c <USB_ReadInterrupts>
 80341f2:	4603      	mov	r3, r0
 80341f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80341f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80341fc:	d112      	bne.n	8034224 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80341fe:	69fb      	ldr	r3, [r7, #28]
 8034200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8034204:	689b      	ldr	r3, [r3, #8]
 8034206:	f003 0301 	and.w	r3, r3, #1
 803420a:	2b01      	cmp	r3, #1
 803420c:	d102      	bne.n	8034214 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 803420e:	6878      	ldr	r0, [r7, #4]
 8034210:	f00b fd68 	bl	803fce4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8034214:	687b      	ldr	r3, [r7, #4]
 8034216:	681b      	ldr	r3, [r3, #0]
 8034218:	695a      	ldr	r2, [r3, #20]
 803421a:	687b      	ldr	r3, [r7, #4]
 803421c:	681b      	ldr	r3, [r3, #0]
 803421e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8034222:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8034224:	687b      	ldr	r3, [r7, #4]
 8034226:	681b      	ldr	r3, [r3, #0]
 8034228:	4618      	mov	r0, r3
 803422a:	f009 f9a7 	bl	803d57c <USB_ReadInterrupts>
 803422e:	4603      	mov	r3, r0
 8034230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8034234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8034238:	d121      	bne.n	803427e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 803423a:	687b      	ldr	r3, [r7, #4]
 803423c:	681b      	ldr	r3, [r3, #0]
 803423e:	695a      	ldr	r2, [r3, #20]
 8034240:	687b      	ldr	r3, [r7, #4]
 8034242:	681b      	ldr	r3, [r3, #0]
 8034244:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8034248:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 803424a:	687b      	ldr	r3, [r7, #4]
 803424c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8034250:	2b00      	cmp	r3, #0
 8034252:	d111      	bne.n	8034278 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8034254:	687b      	ldr	r3, [r7, #4]
 8034256:	2201      	movs	r2, #1
 8034258:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 803425c:	687b      	ldr	r3, [r7, #4]
 803425e:	681b      	ldr	r3, [r3, #0]
 8034260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8034262:	089b      	lsrs	r3, r3, #2
 8034264:	f003 020f 	and.w	r2, r3, #15
 8034268:	687b      	ldr	r3, [r7, #4]
 803426a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 803426e:	2101      	movs	r1, #1
 8034270:	6878      	ldr	r0, [r7, #4]
 8034272:	f000 fec1 	bl	8034ff8 <HAL_PCDEx_LPM_Callback>
 8034276:	e002      	b.n	803427e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8034278:	6878      	ldr	r0, [r7, #4]
 803427a:	f00b fd33 	bl	803fce4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 803427e:	687b      	ldr	r3, [r7, #4]
 8034280:	681b      	ldr	r3, [r3, #0]
 8034282:	4618      	mov	r0, r3
 8034284:	f009 f97a 	bl	803d57c <USB_ReadInterrupts>
 8034288:	4603      	mov	r3, r0
 803428a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 803428e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034292:	f040 80b7 	bne.w	8034404 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8034296:	69fb      	ldr	r3, [r7, #28]
 8034298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803429c:	685b      	ldr	r3, [r3, #4]
 803429e:	69fa      	ldr	r2, [r7, #28]
 80342a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80342a4:	f023 0301 	bic.w	r3, r3, #1
 80342a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80342aa:	687b      	ldr	r3, [r7, #4]
 80342ac:	681b      	ldr	r3, [r3, #0]
 80342ae:	2110      	movs	r1, #16
 80342b0:	4618      	mov	r0, r3
 80342b2:	f008 f935 	bl	803c520 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80342b6:	2300      	movs	r3, #0
 80342b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80342ba:	e046      	b.n	803434a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80342bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80342be:	015a      	lsls	r2, r3, #5
 80342c0:	69fb      	ldr	r3, [r7, #28]
 80342c2:	4413      	add	r3, r2
 80342c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80342c8:	461a      	mov	r2, r3
 80342ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80342ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80342d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80342d2:	015a      	lsls	r2, r3, #5
 80342d4:	69fb      	ldr	r3, [r7, #28]
 80342d6:	4413      	add	r3, r2
 80342d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80342dc:	681b      	ldr	r3, [r3, #0]
 80342de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80342e0:	0151      	lsls	r1, r2, #5
 80342e2:	69fa      	ldr	r2, [r7, #28]
 80342e4:	440a      	add	r2, r1
 80342e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80342ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80342ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80342f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80342f2:	015a      	lsls	r2, r3, #5
 80342f4:	69fb      	ldr	r3, [r7, #28]
 80342f6:	4413      	add	r3, r2
 80342f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80342fc:	461a      	mov	r2, r3
 80342fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8034302:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8034304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034306:	015a      	lsls	r2, r3, #5
 8034308:	69fb      	ldr	r3, [r7, #28]
 803430a:	4413      	add	r3, r2
 803430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8034310:	681b      	ldr	r3, [r3, #0]
 8034312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034314:	0151      	lsls	r1, r2, #5
 8034316:	69fa      	ldr	r2, [r7, #28]
 8034318:	440a      	add	r2, r1
 803431a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803431e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8034322:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8034324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034326:	015a      	lsls	r2, r3, #5
 8034328:	69fb      	ldr	r3, [r7, #28]
 803432a:	4413      	add	r3, r2
 803432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8034330:	681b      	ldr	r3, [r3, #0]
 8034332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034334:	0151      	lsls	r1, r2, #5
 8034336:	69fa      	ldr	r2, [r7, #28]
 8034338:	440a      	add	r2, r1
 803433a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803433e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8034342:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8034344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034346:	3301      	adds	r3, #1
 8034348:	62fb      	str	r3, [r7, #44]	; 0x2c
 803434a:	687b      	ldr	r3, [r7, #4]
 803434c:	685b      	ldr	r3, [r3, #4]
 803434e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034350:	429a      	cmp	r2, r3
 8034352:	d3b3      	bcc.n	80342bc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8034354:	69fb      	ldr	r3, [r7, #28]
 8034356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803435a:	69db      	ldr	r3, [r3, #28]
 803435c:	69fa      	ldr	r2, [r7, #28]
 803435e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8034362:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8034366:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8034368:	687b      	ldr	r3, [r7, #4]
 803436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803436c:	2b00      	cmp	r3, #0
 803436e:	d016      	beq.n	803439e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8034370:	69fb      	ldr	r3, [r7, #28]
 8034372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8034376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803437a:	69fa      	ldr	r2, [r7, #28]
 803437c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8034380:	f043 030b 	orr.w	r3, r3, #11
 8034384:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8034388:	69fb      	ldr	r3, [r7, #28]
 803438a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034390:	69fa      	ldr	r2, [r7, #28]
 8034392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8034396:	f043 030b 	orr.w	r3, r3, #11
 803439a:	6453      	str	r3, [r2, #68]	; 0x44
 803439c:	e015      	b.n	80343ca <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 803439e:	69fb      	ldr	r3, [r7, #28]
 80343a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80343a4:	695a      	ldr	r2, [r3, #20]
 80343a6:	69fb      	ldr	r3, [r7, #28]
 80343a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80343ac:	4619      	mov	r1, r3
 80343ae:	f242 032b 	movw	r3, #8235	; 0x202b
 80343b2:	4313      	orrs	r3, r2
 80343b4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80343b6:	69fb      	ldr	r3, [r7, #28]
 80343b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80343bc:	691b      	ldr	r3, [r3, #16]
 80343be:	69fa      	ldr	r2, [r7, #28]
 80343c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80343c4:	f043 030b 	orr.w	r3, r3, #11
 80343c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80343ca:	69fb      	ldr	r3, [r7, #28]
 80343cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80343d0:	681b      	ldr	r3, [r3, #0]
 80343d2:	69fa      	ldr	r2, [r7, #28]
 80343d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80343d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80343dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80343de:	687b      	ldr	r3, [r7, #4]
 80343e0:	6818      	ldr	r0, [r3, #0]
 80343e2:	687b      	ldr	r3, [r7, #4]
 80343e4:	691b      	ldr	r3, [r3, #16]
 80343e6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80343e8:	687b      	ldr	r3, [r7, #4]
 80343ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80343ee:	461a      	mov	r2, r3
 80343f0:	f009 f98a 	bl	803d708 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80343f4:	687b      	ldr	r3, [r7, #4]
 80343f6:	681b      	ldr	r3, [r3, #0]
 80343f8:	695a      	ldr	r2, [r3, #20]
 80343fa:	687b      	ldr	r3, [r7, #4]
 80343fc:	681b      	ldr	r3, [r3, #0]
 80343fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8034402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8034404:	687b      	ldr	r3, [r7, #4]
 8034406:	681b      	ldr	r3, [r3, #0]
 8034408:	4618      	mov	r0, r3
 803440a:	f009 f8b7 	bl	803d57c <USB_ReadInterrupts>
 803440e:	4603      	mov	r3, r0
 8034410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8034414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034418:	d124      	bne.n	8034464 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 803441a:	687b      	ldr	r3, [r7, #4]
 803441c:	681b      	ldr	r3, [r3, #0]
 803441e:	4618      	mov	r0, r3
 8034420:	f009 f94e 	bl	803d6c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8034424:	687b      	ldr	r3, [r7, #4]
 8034426:	681b      	ldr	r3, [r3, #0]
 8034428:	4618      	mov	r0, r3
 803442a:	f008 f8f6 	bl	803c61a <USB_GetDevSpeed>
 803442e:	4603      	mov	r3, r0
 8034430:	461a      	mov	r2, r3
 8034432:	687b      	ldr	r3, [r7, #4]
 8034434:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8034436:	687b      	ldr	r3, [r7, #4]
 8034438:	681c      	ldr	r4, [r3, #0]
 803443a:	f001 fd91 	bl	8035f60 <HAL_RCC_GetHCLKFreq>
 803443e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8034440:	687b      	ldr	r3, [r7, #4]
 8034442:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8034444:	b2db      	uxtb	r3, r3
 8034446:	461a      	mov	r2, r3
 8034448:	4620      	mov	r0, r4
 803444a:	f007 fdfb 	bl	803c044 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 803444e:	6878      	ldr	r0, [r7, #4]
 8034450:	f00b fc1f 	bl	803fc92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8034454:	687b      	ldr	r3, [r7, #4]
 8034456:	681b      	ldr	r3, [r3, #0]
 8034458:	695a      	ldr	r2, [r3, #20]
 803445a:	687b      	ldr	r3, [r7, #4]
 803445c:	681b      	ldr	r3, [r3, #0]
 803445e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8034462:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8034464:	687b      	ldr	r3, [r7, #4]
 8034466:	681b      	ldr	r3, [r3, #0]
 8034468:	4618      	mov	r0, r3
 803446a:	f009 f887 	bl	803d57c <USB_ReadInterrupts>
 803446e:	4603      	mov	r3, r0
 8034470:	f003 0308 	and.w	r3, r3, #8
 8034474:	2b08      	cmp	r3, #8
 8034476:	d10a      	bne.n	803448e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8034478:	6878      	ldr	r0, [r7, #4]
 803447a:	f00b fbfc 	bl	803fc76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 803447e:	687b      	ldr	r3, [r7, #4]
 8034480:	681b      	ldr	r3, [r3, #0]
 8034482:	695a      	ldr	r2, [r3, #20]
 8034484:	687b      	ldr	r3, [r7, #4]
 8034486:	681b      	ldr	r3, [r3, #0]
 8034488:	f002 0208 	and.w	r2, r2, #8
 803448c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 803448e:	687b      	ldr	r3, [r7, #4]
 8034490:	681b      	ldr	r3, [r3, #0]
 8034492:	4618      	mov	r0, r3
 8034494:	f009 f872 	bl	803d57c <USB_ReadInterrupts>
 8034498:	4603      	mov	r3, r0
 803449a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803449e:	2b80      	cmp	r3, #128	; 0x80
 80344a0:	d122      	bne.n	80344e8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80344a2:	6a3b      	ldr	r3, [r7, #32]
 80344a4:	699b      	ldr	r3, [r3, #24]
 80344a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80344aa:	6a3b      	ldr	r3, [r7, #32]
 80344ac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80344ae:	2301      	movs	r3, #1
 80344b0:	627b      	str	r3, [r7, #36]	; 0x24
 80344b2:	e014      	b.n	80344de <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80344b4:	6879      	ldr	r1, [r7, #4]
 80344b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80344b8:	4613      	mov	r3, r2
 80344ba:	00db      	lsls	r3, r3, #3
 80344bc:	4413      	add	r3, r2
 80344be:	009b      	lsls	r3, r3, #2
 80344c0:	440b      	add	r3, r1
 80344c2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80344c6:	781b      	ldrb	r3, [r3, #0]
 80344c8:	2b01      	cmp	r3, #1
 80344ca:	d105      	bne.n	80344d8 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80344cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80344ce:	b2db      	uxtb	r3, r3
 80344d0:	4619      	mov	r1, r3
 80344d2:	6878      	ldr	r0, [r7, #4]
 80344d4:	f000 fb27 	bl	8034b26 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80344d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80344da:	3301      	adds	r3, #1
 80344dc:	627b      	str	r3, [r7, #36]	; 0x24
 80344de:	687b      	ldr	r3, [r7, #4]
 80344e0:	685b      	ldr	r3, [r3, #4]
 80344e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80344e4:	429a      	cmp	r2, r3
 80344e6:	d3e5      	bcc.n	80344b4 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80344e8:	687b      	ldr	r3, [r7, #4]
 80344ea:	681b      	ldr	r3, [r3, #0]
 80344ec:	4618      	mov	r0, r3
 80344ee:	f009 f845 	bl	803d57c <USB_ReadInterrupts>
 80344f2:	4603      	mov	r3, r0
 80344f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80344f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80344fc:	d13b      	bne.n	8034576 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80344fe:	2301      	movs	r3, #1
 8034500:	627b      	str	r3, [r7, #36]	; 0x24
 8034502:	e02b      	b.n	803455c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8034504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034506:	015a      	lsls	r2, r3, #5
 8034508:	69fb      	ldr	r3, [r7, #28]
 803450a:	4413      	add	r3, r2
 803450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8034510:	681b      	ldr	r3, [r3, #0]
 8034512:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8034514:	6879      	ldr	r1, [r7, #4]
 8034516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034518:	4613      	mov	r3, r2
 803451a:	00db      	lsls	r3, r3, #3
 803451c:	4413      	add	r3, r2
 803451e:	009b      	lsls	r3, r3, #2
 8034520:	440b      	add	r3, r1
 8034522:	3340      	adds	r3, #64	; 0x40
 8034524:	781b      	ldrb	r3, [r3, #0]
 8034526:	2b01      	cmp	r3, #1
 8034528:	d115      	bne.n	8034556 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 803452a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 803452c:	2b00      	cmp	r3, #0
 803452e:	da12      	bge.n	8034556 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8034530:	6879      	ldr	r1, [r7, #4]
 8034532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034534:	4613      	mov	r3, r2
 8034536:	00db      	lsls	r3, r3, #3
 8034538:	4413      	add	r3, r2
 803453a:	009b      	lsls	r3, r3, #2
 803453c:	440b      	add	r3, r1
 803453e:	333f      	adds	r3, #63	; 0x3f
 8034540:	2201      	movs	r2, #1
 8034542:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8034544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034546:	b2db      	uxtb	r3, r3
 8034548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803454c:	b2db      	uxtb	r3, r3
 803454e:	4619      	mov	r1, r3
 8034550:	6878      	ldr	r0, [r7, #4]
 8034552:	f000 fae8 	bl	8034b26 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8034556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034558:	3301      	adds	r3, #1
 803455a:	627b      	str	r3, [r7, #36]	; 0x24
 803455c:	687b      	ldr	r3, [r7, #4]
 803455e:	685b      	ldr	r3, [r3, #4]
 8034560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034562:	429a      	cmp	r2, r3
 8034564:	d3ce      	bcc.n	8034504 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8034566:	687b      	ldr	r3, [r7, #4]
 8034568:	681b      	ldr	r3, [r3, #0]
 803456a:	695a      	ldr	r2, [r3, #20]
 803456c:	687b      	ldr	r3, [r7, #4]
 803456e:	681b      	ldr	r3, [r3, #0]
 8034570:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8034574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8034576:	687b      	ldr	r3, [r7, #4]
 8034578:	681b      	ldr	r3, [r3, #0]
 803457a:	4618      	mov	r0, r3
 803457c:	f008 fffe 	bl	803d57c <USB_ReadInterrupts>
 8034580:	4603      	mov	r3, r0
 8034582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8034586:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803458a:	d155      	bne.n	8034638 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803458c:	2301      	movs	r3, #1
 803458e:	627b      	str	r3, [r7, #36]	; 0x24
 8034590:	e045      	b.n	803461e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8034592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034594:	015a      	lsls	r2, r3, #5
 8034596:	69fb      	ldr	r3, [r7, #28]
 8034598:	4413      	add	r3, r2
 803459a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803459e:	681b      	ldr	r3, [r3, #0]
 80345a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80345a2:	6879      	ldr	r1, [r7, #4]
 80345a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80345a6:	4613      	mov	r3, r2
 80345a8:	00db      	lsls	r3, r3, #3
 80345aa:	4413      	add	r3, r2
 80345ac:	009b      	lsls	r3, r3, #2
 80345ae:	440b      	add	r3, r1
 80345b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80345b4:	781b      	ldrb	r3, [r3, #0]
 80345b6:	2b01      	cmp	r3, #1
 80345b8:	d12e      	bne.n	8034618 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80345ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80345bc:	2b00      	cmp	r3, #0
 80345be:	da2b      	bge.n	8034618 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80345c0:	69bb      	ldr	r3, [r7, #24]
 80345c2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80345c6:	687b      	ldr	r3, [r7, #4]
 80345c8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80345cc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80345d0:	429a      	cmp	r2, r3
 80345d2:	d121      	bne.n	8034618 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80345d4:	6879      	ldr	r1, [r7, #4]
 80345d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80345d8:	4613      	mov	r3, r2
 80345da:	00db      	lsls	r3, r3, #3
 80345dc:	4413      	add	r3, r2
 80345de:	009b      	lsls	r3, r3, #2
 80345e0:	440b      	add	r3, r1
 80345e2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80345e6:	2201      	movs	r2, #1
 80345e8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80345ea:	6a3b      	ldr	r3, [r7, #32]
 80345ec:	699b      	ldr	r3, [r3, #24]
 80345ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80345f2:	6a3b      	ldr	r3, [r7, #32]
 80345f4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80345f6:	6a3b      	ldr	r3, [r7, #32]
 80345f8:	695b      	ldr	r3, [r3, #20]
 80345fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80345fe:	2b00      	cmp	r3, #0
 8034600:	d10a      	bne.n	8034618 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8034602:	69fb      	ldr	r3, [r7, #28]
 8034604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8034608:	685b      	ldr	r3, [r3, #4]
 803460a:	69fa      	ldr	r2, [r7, #28]
 803460c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8034610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8034614:	6053      	str	r3, [r2, #4]
            break;
 8034616:	e007      	b.n	8034628 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8034618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803461a:	3301      	adds	r3, #1
 803461c:	627b      	str	r3, [r7, #36]	; 0x24
 803461e:	687b      	ldr	r3, [r7, #4]
 8034620:	685b      	ldr	r3, [r3, #4]
 8034622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034624:	429a      	cmp	r2, r3
 8034626:	d3b4      	bcc.n	8034592 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8034628:	687b      	ldr	r3, [r7, #4]
 803462a:	681b      	ldr	r3, [r3, #0]
 803462c:	695a      	ldr	r2, [r3, #20]
 803462e:	687b      	ldr	r3, [r7, #4]
 8034630:	681b      	ldr	r3, [r3, #0]
 8034632:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8034636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8034638:	687b      	ldr	r3, [r7, #4]
 803463a:	681b      	ldr	r3, [r3, #0]
 803463c:	4618      	mov	r0, r3
 803463e:	f008 ff9d 	bl	803d57c <USB_ReadInterrupts>
 8034642:	4603      	mov	r3, r0
 8034644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8034648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803464c:	d10a      	bne.n	8034664 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 803464e:	6878      	ldr	r0, [r7, #4]
 8034650:	f00b fba0 	bl	803fd94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8034654:	687b      	ldr	r3, [r7, #4]
 8034656:	681b      	ldr	r3, [r3, #0]
 8034658:	695a      	ldr	r2, [r3, #20]
 803465a:	687b      	ldr	r3, [r7, #4]
 803465c:	681b      	ldr	r3, [r3, #0]
 803465e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8034662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8034664:	687b      	ldr	r3, [r7, #4]
 8034666:	681b      	ldr	r3, [r3, #0]
 8034668:	4618      	mov	r0, r3
 803466a:	f008 ff87 	bl	803d57c <USB_ReadInterrupts>
 803466e:	4603      	mov	r3, r0
 8034670:	f003 0304 	and.w	r3, r3, #4
 8034674:	2b04      	cmp	r3, #4
 8034676:	d115      	bne.n	80346a4 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8034678:	687b      	ldr	r3, [r7, #4]
 803467a:	681b      	ldr	r3, [r3, #0]
 803467c:	685b      	ldr	r3, [r3, #4]
 803467e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8034680:	69bb      	ldr	r3, [r7, #24]
 8034682:	f003 0304 	and.w	r3, r3, #4
 8034686:	2b00      	cmp	r3, #0
 8034688:	d002      	beq.n	8034690 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 803468a:	6878      	ldr	r0, [r7, #4]
 803468c:	f00b fb90 	bl	803fdb0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8034690:	687b      	ldr	r3, [r7, #4]
 8034692:	681b      	ldr	r3, [r3, #0]
 8034694:	6859      	ldr	r1, [r3, #4]
 8034696:	687b      	ldr	r3, [r7, #4]
 8034698:	681b      	ldr	r3, [r3, #0]
 803469a:	69ba      	ldr	r2, [r7, #24]
 803469c:	430a      	orrs	r2, r1
 803469e:	605a      	str	r2, [r3, #4]
 80346a0:	e000      	b.n	80346a4 <HAL_PCD_IRQHandler+0x992>
      return;
 80346a2:	bf00      	nop
    }
  }
}
 80346a4:	3734      	adds	r7, #52	; 0x34
 80346a6:	46bd      	mov	sp, r7
 80346a8:	bd90      	pop	{r4, r7, pc}

080346aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80346aa:	b580      	push	{r7, lr}
 80346ac:	b082      	sub	sp, #8
 80346ae:	af00      	add	r7, sp, #0
 80346b0:	6078      	str	r0, [r7, #4]
 80346b2:	460b      	mov	r3, r1
 80346b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80346b6:	687b      	ldr	r3, [r7, #4]
 80346b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80346bc:	2b01      	cmp	r3, #1
 80346be:	d101      	bne.n	80346c4 <HAL_PCD_SetAddress+0x1a>
 80346c0:	2302      	movs	r3, #2
 80346c2:	e013      	b.n	80346ec <HAL_PCD_SetAddress+0x42>
 80346c4:	687b      	ldr	r3, [r7, #4]
 80346c6:	2201      	movs	r2, #1
 80346c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80346cc:	687b      	ldr	r3, [r7, #4]
 80346ce:	78fa      	ldrb	r2, [r7, #3]
 80346d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80346d4:	687b      	ldr	r3, [r7, #4]
 80346d6:	681b      	ldr	r3, [r3, #0]
 80346d8:	78fa      	ldrb	r2, [r7, #3]
 80346da:	4611      	mov	r1, r2
 80346dc:	4618      	mov	r0, r3
 80346de:	f008 fee5 	bl	803d4ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80346e2:	687b      	ldr	r3, [r7, #4]
 80346e4:	2200      	movs	r2, #0
 80346e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80346ea:	2300      	movs	r3, #0
}
 80346ec:	4618      	mov	r0, r3
 80346ee:	3708      	adds	r7, #8
 80346f0:	46bd      	mov	sp, r7
 80346f2:	bd80      	pop	{r7, pc}

080346f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80346f4:	b580      	push	{r7, lr}
 80346f6:	b084      	sub	sp, #16
 80346f8:	af00      	add	r7, sp, #0
 80346fa:	6078      	str	r0, [r7, #4]
 80346fc:	4608      	mov	r0, r1
 80346fe:	4611      	mov	r1, r2
 8034700:	461a      	mov	r2, r3
 8034702:	4603      	mov	r3, r0
 8034704:	70fb      	strb	r3, [r7, #3]
 8034706:	460b      	mov	r3, r1
 8034708:	803b      	strh	r3, [r7, #0]
 803470a:	4613      	mov	r3, r2
 803470c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 803470e:	2300      	movs	r3, #0
 8034710:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8034712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8034716:	2b00      	cmp	r3, #0
 8034718:	da0f      	bge.n	803473a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 803471a:	78fb      	ldrb	r3, [r7, #3]
 803471c:	f003 020f 	and.w	r2, r3, #15
 8034720:	4613      	mov	r3, r2
 8034722:	00db      	lsls	r3, r3, #3
 8034724:	4413      	add	r3, r2
 8034726:	009b      	lsls	r3, r3, #2
 8034728:	3338      	adds	r3, #56	; 0x38
 803472a:	687a      	ldr	r2, [r7, #4]
 803472c:	4413      	add	r3, r2
 803472e:	3304      	adds	r3, #4
 8034730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8034732:	68fb      	ldr	r3, [r7, #12]
 8034734:	2201      	movs	r2, #1
 8034736:	705a      	strb	r2, [r3, #1]
 8034738:	e00f      	b.n	803475a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 803473a:	78fb      	ldrb	r3, [r7, #3]
 803473c:	f003 020f 	and.w	r2, r3, #15
 8034740:	4613      	mov	r3, r2
 8034742:	00db      	lsls	r3, r3, #3
 8034744:	4413      	add	r3, r2
 8034746:	009b      	lsls	r3, r3, #2
 8034748:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803474c:	687a      	ldr	r2, [r7, #4]
 803474e:	4413      	add	r3, r2
 8034750:	3304      	adds	r3, #4
 8034752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8034754:	68fb      	ldr	r3, [r7, #12]
 8034756:	2200      	movs	r2, #0
 8034758:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 803475a:	78fb      	ldrb	r3, [r7, #3]
 803475c:	f003 030f 	and.w	r3, r3, #15
 8034760:	b2da      	uxtb	r2, r3
 8034762:	68fb      	ldr	r3, [r7, #12]
 8034764:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8034766:	883a      	ldrh	r2, [r7, #0]
 8034768:	68fb      	ldr	r3, [r7, #12]
 803476a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 803476c:	68fb      	ldr	r3, [r7, #12]
 803476e:	78ba      	ldrb	r2, [r7, #2]
 8034770:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8034772:	68fb      	ldr	r3, [r7, #12]
 8034774:	785b      	ldrb	r3, [r3, #1]
 8034776:	2b00      	cmp	r3, #0
 8034778:	d004      	beq.n	8034784 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 803477a:	68fb      	ldr	r3, [r7, #12]
 803477c:	781b      	ldrb	r3, [r3, #0]
 803477e:	b29a      	uxth	r2, r3
 8034780:	68fb      	ldr	r3, [r7, #12]
 8034782:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8034784:	78bb      	ldrb	r3, [r7, #2]
 8034786:	2b02      	cmp	r3, #2
 8034788:	d102      	bne.n	8034790 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 803478a:	68fb      	ldr	r3, [r7, #12]
 803478c:	2200      	movs	r2, #0
 803478e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8034790:	687b      	ldr	r3, [r7, #4]
 8034792:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8034796:	2b01      	cmp	r3, #1
 8034798:	d101      	bne.n	803479e <HAL_PCD_EP_Open+0xaa>
 803479a:	2302      	movs	r3, #2
 803479c:	e00e      	b.n	80347bc <HAL_PCD_EP_Open+0xc8>
 803479e:	687b      	ldr	r3, [r7, #4]
 80347a0:	2201      	movs	r2, #1
 80347a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80347a6:	687b      	ldr	r3, [r7, #4]
 80347a8:	681b      	ldr	r3, [r3, #0]
 80347aa:	68f9      	ldr	r1, [r7, #12]
 80347ac:	4618      	mov	r0, r3
 80347ae:	f007 ff59 	bl	803c664 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80347b2:	687b      	ldr	r3, [r7, #4]
 80347b4:	2200      	movs	r2, #0
 80347b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80347ba:	7afb      	ldrb	r3, [r7, #11]
}
 80347bc:	4618      	mov	r0, r3
 80347be:	3710      	adds	r7, #16
 80347c0:	46bd      	mov	sp, r7
 80347c2:	bd80      	pop	{r7, pc}

080347c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80347c4:	b580      	push	{r7, lr}
 80347c6:	b084      	sub	sp, #16
 80347c8:	af00      	add	r7, sp, #0
 80347ca:	6078      	str	r0, [r7, #4]
 80347cc:	460b      	mov	r3, r1
 80347ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80347d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80347d4:	2b00      	cmp	r3, #0
 80347d6:	da0f      	bge.n	80347f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80347d8:	78fb      	ldrb	r3, [r7, #3]
 80347da:	f003 020f 	and.w	r2, r3, #15
 80347de:	4613      	mov	r3, r2
 80347e0:	00db      	lsls	r3, r3, #3
 80347e2:	4413      	add	r3, r2
 80347e4:	009b      	lsls	r3, r3, #2
 80347e6:	3338      	adds	r3, #56	; 0x38
 80347e8:	687a      	ldr	r2, [r7, #4]
 80347ea:	4413      	add	r3, r2
 80347ec:	3304      	adds	r3, #4
 80347ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80347f0:	68fb      	ldr	r3, [r7, #12]
 80347f2:	2201      	movs	r2, #1
 80347f4:	705a      	strb	r2, [r3, #1]
 80347f6:	e00f      	b.n	8034818 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80347f8:	78fb      	ldrb	r3, [r7, #3]
 80347fa:	f003 020f 	and.w	r2, r3, #15
 80347fe:	4613      	mov	r3, r2
 8034800:	00db      	lsls	r3, r3, #3
 8034802:	4413      	add	r3, r2
 8034804:	009b      	lsls	r3, r3, #2
 8034806:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803480a:	687a      	ldr	r2, [r7, #4]
 803480c:	4413      	add	r3, r2
 803480e:	3304      	adds	r3, #4
 8034810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8034812:	68fb      	ldr	r3, [r7, #12]
 8034814:	2200      	movs	r2, #0
 8034816:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8034818:	78fb      	ldrb	r3, [r7, #3]
 803481a:	f003 030f 	and.w	r3, r3, #15
 803481e:	b2da      	uxtb	r2, r3
 8034820:	68fb      	ldr	r3, [r7, #12]
 8034822:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8034824:	687b      	ldr	r3, [r7, #4]
 8034826:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 803482a:	2b01      	cmp	r3, #1
 803482c:	d101      	bne.n	8034832 <HAL_PCD_EP_Close+0x6e>
 803482e:	2302      	movs	r3, #2
 8034830:	e00e      	b.n	8034850 <HAL_PCD_EP_Close+0x8c>
 8034832:	687b      	ldr	r3, [r7, #4]
 8034834:	2201      	movs	r2, #1
 8034836:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 803483a:	687b      	ldr	r3, [r7, #4]
 803483c:	681b      	ldr	r3, [r3, #0]
 803483e:	68f9      	ldr	r1, [r7, #12]
 8034840:	4618      	mov	r0, r3
 8034842:	f007 ff97 	bl	803c774 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8034846:	687b      	ldr	r3, [r7, #4]
 8034848:	2200      	movs	r2, #0
 803484a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 803484e:	2300      	movs	r3, #0
}
 8034850:	4618      	mov	r0, r3
 8034852:	3710      	adds	r7, #16
 8034854:	46bd      	mov	sp, r7
 8034856:	bd80      	pop	{r7, pc}

08034858 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8034858:	b580      	push	{r7, lr}
 803485a:	b086      	sub	sp, #24
 803485c:	af00      	add	r7, sp, #0
 803485e:	60f8      	str	r0, [r7, #12]
 8034860:	607a      	str	r2, [r7, #4]
 8034862:	603b      	str	r3, [r7, #0]
 8034864:	460b      	mov	r3, r1
 8034866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8034868:	7afb      	ldrb	r3, [r7, #11]
 803486a:	f003 020f 	and.w	r2, r3, #15
 803486e:	4613      	mov	r3, r2
 8034870:	00db      	lsls	r3, r3, #3
 8034872:	4413      	add	r3, r2
 8034874:	009b      	lsls	r3, r3, #2
 8034876:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803487a:	68fa      	ldr	r2, [r7, #12]
 803487c:	4413      	add	r3, r2
 803487e:	3304      	adds	r3, #4
 8034880:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8034882:	697b      	ldr	r3, [r7, #20]
 8034884:	687a      	ldr	r2, [r7, #4]
 8034886:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8034888:	697b      	ldr	r3, [r7, #20]
 803488a:	683a      	ldr	r2, [r7, #0]
 803488c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 803488e:	697b      	ldr	r3, [r7, #20]
 8034890:	2200      	movs	r2, #0
 8034892:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8034894:	697b      	ldr	r3, [r7, #20]
 8034896:	2200      	movs	r2, #0
 8034898:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 803489a:	7afb      	ldrb	r3, [r7, #11]
 803489c:	f003 030f 	and.w	r3, r3, #15
 80348a0:	b2da      	uxtb	r2, r3
 80348a2:	697b      	ldr	r3, [r7, #20]
 80348a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80348a6:	68fb      	ldr	r3, [r7, #12]
 80348a8:	691b      	ldr	r3, [r3, #16]
 80348aa:	2b01      	cmp	r3, #1
 80348ac:	d102      	bne.n	80348b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80348ae:	687a      	ldr	r2, [r7, #4]
 80348b0:	697b      	ldr	r3, [r7, #20]
 80348b2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80348b4:	7afb      	ldrb	r3, [r7, #11]
 80348b6:	f003 030f 	and.w	r3, r3, #15
 80348ba:	2b00      	cmp	r3, #0
 80348bc:	d109      	bne.n	80348d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80348be:	68fb      	ldr	r3, [r7, #12]
 80348c0:	6818      	ldr	r0, [r3, #0]
 80348c2:	68fb      	ldr	r3, [r7, #12]
 80348c4:	691b      	ldr	r3, [r3, #16]
 80348c6:	b2db      	uxtb	r3, r3
 80348c8:	461a      	mov	r2, r3
 80348ca:	6979      	ldr	r1, [r7, #20]
 80348cc:	f008 fa7e 	bl	803cdcc <USB_EP0StartXfer>
 80348d0:	e008      	b.n	80348e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80348d2:	68fb      	ldr	r3, [r7, #12]
 80348d4:	6818      	ldr	r0, [r3, #0]
 80348d6:	68fb      	ldr	r3, [r7, #12]
 80348d8:	691b      	ldr	r3, [r3, #16]
 80348da:	b2db      	uxtb	r3, r3
 80348dc:	461a      	mov	r2, r3
 80348de:	6979      	ldr	r1, [r7, #20]
 80348e0:	f008 f824 	bl	803c92c <USB_EPStartXfer>
  }

  return HAL_OK;
 80348e4:	2300      	movs	r3, #0
}
 80348e6:	4618      	mov	r0, r3
 80348e8:	3718      	adds	r7, #24
 80348ea:	46bd      	mov	sp, r7
 80348ec:	bd80      	pop	{r7, pc}

080348ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80348ee:	b480      	push	{r7}
 80348f0:	b083      	sub	sp, #12
 80348f2:	af00      	add	r7, sp, #0
 80348f4:	6078      	str	r0, [r7, #4]
 80348f6:	460b      	mov	r3, r1
 80348f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80348fa:	78fb      	ldrb	r3, [r7, #3]
 80348fc:	f003 020f 	and.w	r2, r3, #15
 8034900:	6879      	ldr	r1, [r7, #4]
 8034902:	4613      	mov	r3, r2
 8034904:	00db      	lsls	r3, r3, #3
 8034906:	4413      	add	r3, r2
 8034908:	009b      	lsls	r3, r3, #2
 803490a:	440b      	add	r3, r1
 803490c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8034910:	681b      	ldr	r3, [r3, #0]
}
 8034912:	4618      	mov	r0, r3
 8034914:	370c      	adds	r7, #12
 8034916:	46bd      	mov	sp, r7
 8034918:	f85d 7b04 	ldr.w	r7, [sp], #4
 803491c:	4770      	bx	lr

0803491e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 803491e:	b580      	push	{r7, lr}
 8034920:	b086      	sub	sp, #24
 8034922:	af00      	add	r7, sp, #0
 8034924:	60f8      	str	r0, [r7, #12]
 8034926:	607a      	str	r2, [r7, #4]
 8034928:	603b      	str	r3, [r7, #0]
 803492a:	460b      	mov	r3, r1
 803492c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 803492e:	7afb      	ldrb	r3, [r7, #11]
 8034930:	f003 020f 	and.w	r2, r3, #15
 8034934:	4613      	mov	r3, r2
 8034936:	00db      	lsls	r3, r3, #3
 8034938:	4413      	add	r3, r2
 803493a:	009b      	lsls	r3, r3, #2
 803493c:	3338      	adds	r3, #56	; 0x38
 803493e:	68fa      	ldr	r2, [r7, #12]
 8034940:	4413      	add	r3, r2
 8034942:	3304      	adds	r3, #4
 8034944:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8034946:	697b      	ldr	r3, [r7, #20]
 8034948:	687a      	ldr	r2, [r7, #4]
 803494a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 803494c:	697b      	ldr	r3, [r7, #20]
 803494e:	683a      	ldr	r2, [r7, #0]
 8034950:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8034952:	697b      	ldr	r3, [r7, #20]
 8034954:	2200      	movs	r2, #0
 8034956:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8034958:	697b      	ldr	r3, [r7, #20]
 803495a:	2201      	movs	r2, #1
 803495c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 803495e:	7afb      	ldrb	r3, [r7, #11]
 8034960:	f003 030f 	and.w	r3, r3, #15
 8034964:	b2da      	uxtb	r2, r3
 8034966:	697b      	ldr	r3, [r7, #20]
 8034968:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 803496a:	68fb      	ldr	r3, [r7, #12]
 803496c:	691b      	ldr	r3, [r3, #16]
 803496e:	2b01      	cmp	r3, #1
 8034970:	d102      	bne.n	8034978 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8034972:	687a      	ldr	r2, [r7, #4]
 8034974:	697b      	ldr	r3, [r7, #20]
 8034976:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8034978:	7afb      	ldrb	r3, [r7, #11]
 803497a:	f003 030f 	and.w	r3, r3, #15
 803497e:	2b00      	cmp	r3, #0
 8034980:	d109      	bne.n	8034996 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8034982:	68fb      	ldr	r3, [r7, #12]
 8034984:	6818      	ldr	r0, [r3, #0]
 8034986:	68fb      	ldr	r3, [r7, #12]
 8034988:	691b      	ldr	r3, [r3, #16]
 803498a:	b2db      	uxtb	r3, r3
 803498c:	461a      	mov	r2, r3
 803498e:	6979      	ldr	r1, [r7, #20]
 8034990:	f008 fa1c 	bl	803cdcc <USB_EP0StartXfer>
 8034994:	e008      	b.n	80349a8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8034996:	68fb      	ldr	r3, [r7, #12]
 8034998:	6818      	ldr	r0, [r3, #0]
 803499a:	68fb      	ldr	r3, [r7, #12]
 803499c:	691b      	ldr	r3, [r3, #16]
 803499e:	b2db      	uxtb	r3, r3
 80349a0:	461a      	mov	r2, r3
 80349a2:	6979      	ldr	r1, [r7, #20]
 80349a4:	f007 ffc2 	bl	803c92c <USB_EPStartXfer>
  }

  return HAL_OK;
 80349a8:	2300      	movs	r3, #0
}
 80349aa:	4618      	mov	r0, r3
 80349ac:	3718      	adds	r7, #24
 80349ae:	46bd      	mov	sp, r7
 80349b0:	bd80      	pop	{r7, pc}

080349b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80349b2:	b580      	push	{r7, lr}
 80349b4:	b084      	sub	sp, #16
 80349b6:	af00      	add	r7, sp, #0
 80349b8:	6078      	str	r0, [r7, #4]
 80349ba:	460b      	mov	r3, r1
 80349bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80349be:	78fb      	ldrb	r3, [r7, #3]
 80349c0:	f003 020f 	and.w	r2, r3, #15
 80349c4:	687b      	ldr	r3, [r7, #4]
 80349c6:	685b      	ldr	r3, [r3, #4]
 80349c8:	429a      	cmp	r2, r3
 80349ca:	d901      	bls.n	80349d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80349cc:	2301      	movs	r3, #1
 80349ce:	e050      	b.n	8034a72 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80349d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80349d4:	2b00      	cmp	r3, #0
 80349d6:	da0f      	bge.n	80349f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80349d8:	78fb      	ldrb	r3, [r7, #3]
 80349da:	f003 020f 	and.w	r2, r3, #15
 80349de:	4613      	mov	r3, r2
 80349e0:	00db      	lsls	r3, r3, #3
 80349e2:	4413      	add	r3, r2
 80349e4:	009b      	lsls	r3, r3, #2
 80349e6:	3338      	adds	r3, #56	; 0x38
 80349e8:	687a      	ldr	r2, [r7, #4]
 80349ea:	4413      	add	r3, r2
 80349ec:	3304      	adds	r3, #4
 80349ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80349f0:	68fb      	ldr	r3, [r7, #12]
 80349f2:	2201      	movs	r2, #1
 80349f4:	705a      	strb	r2, [r3, #1]
 80349f6:	e00d      	b.n	8034a14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80349f8:	78fa      	ldrb	r2, [r7, #3]
 80349fa:	4613      	mov	r3, r2
 80349fc:	00db      	lsls	r3, r3, #3
 80349fe:	4413      	add	r3, r2
 8034a00:	009b      	lsls	r3, r3, #2
 8034a02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8034a06:	687a      	ldr	r2, [r7, #4]
 8034a08:	4413      	add	r3, r2
 8034a0a:	3304      	adds	r3, #4
 8034a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8034a0e:	68fb      	ldr	r3, [r7, #12]
 8034a10:	2200      	movs	r2, #0
 8034a12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8034a14:	68fb      	ldr	r3, [r7, #12]
 8034a16:	2201      	movs	r2, #1
 8034a18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8034a1a:	78fb      	ldrb	r3, [r7, #3]
 8034a1c:	f003 030f 	and.w	r3, r3, #15
 8034a20:	b2da      	uxtb	r2, r3
 8034a22:	68fb      	ldr	r3, [r7, #12]
 8034a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8034a26:	687b      	ldr	r3, [r7, #4]
 8034a28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8034a2c:	2b01      	cmp	r3, #1
 8034a2e:	d101      	bne.n	8034a34 <HAL_PCD_EP_SetStall+0x82>
 8034a30:	2302      	movs	r3, #2
 8034a32:	e01e      	b.n	8034a72 <HAL_PCD_EP_SetStall+0xc0>
 8034a34:	687b      	ldr	r3, [r7, #4]
 8034a36:	2201      	movs	r2, #1
 8034a38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8034a3c:	687b      	ldr	r3, [r7, #4]
 8034a3e:	681b      	ldr	r3, [r3, #0]
 8034a40:	68f9      	ldr	r1, [r7, #12]
 8034a42:	4618      	mov	r0, r3
 8034a44:	f008 fc5e 	bl	803d304 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8034a48:	78fb      	ldrb	r3, [r7, #3]
 8034a4a:	f003 030f 	and.w	r3, r3, #15
 8034a4e:	2b00      	cmp	r3, #0
 8034a50:	d10a      	bne.n	8034a68 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8034a52:	687b      	ldr	r3, [r7, #4]
 8034a54:	6818      	ldr	r0, [r3, #0]
 8034a56:	687b      	ldr	r3, [r7, #4]
 8034a58:	691b      	ldr	r3, [r3, #16]
 8034a5a:	b2d9      	uxtb	r1, r3
 8034a5c:	687b      	ldr	r3, [r7, #4]
 8034a5e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8034a62:	461a      	mov	r2, r3
 8034a64:	f008 fe50 	bl	803d708 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8034a68:	687b      	ldr	r3, [r7, #4]
 8034a6a:	2200      	movs	r2, #0
 8034a6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8034a70:	2300      	movs	r3, #0
}
 8034a72:	4618      	mov	r0, r3
 8034a74:	3710      	adds	r7, #16
 8034a76:	46bd      	mov	sp, r7
 8034a78:	bd80      	pop	{r7, pc}

08034a7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8034a7a:	b580      	push	{r7, lr}
 8034a7c:	b084      	sub	sp, #16
 8034a7e:	af00      	add	r7, sp, #0
 8034a80:	6078      	str	r0, [r7, #4]
 8034a82:	460b      	mov	r3, r1
 8034a84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8034a86:	78fb      	ldrb	r3, [r7, #3]
 8034a88:	f003 020f 	and.w	r2, r3, #15
 8034a8c:	687b      	ldr	r3, [r7, #4]
 8034a8e:	685b      	ldr	r3, [r3, #4]
 8034a90:	429a      	cmp	r2, r3
 8034a92:	d901      	bls.n	8034a98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8034a94:	2301      	movs	r3, #1
 8034a96:	e042      	b.n	8034b1e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8034a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8034a9c:	2b00      	cmp	r3, #0
 8034a9e:	da0f      	bge.n	8034ac0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8034aa0:	78fb      	ldrb	r3, [r7, #3]
 8034aa2:	f003 020f 	and.w	r2, r3, #15
 8034aa6:	4613      	mov	r3, r2
 8034aa8:	00db      	lsls	r3, r3, #3
 8034aaa:	4413      	add	r3, r2
 8034aac:	009b      	lsls	r3, r3, #2
 8034aae:	3338      	adds	r3, #56	; 0x38
 8034ab0:	687a      	ldr	r2, [r7, #4]
 8034ab2:	4413      	add	r3, r2
 8034ab4:	3304      	adds	r3, #4
 8034ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8034ab8:	68fb      	ldr	r3, [r7, #12]
 8034aba:	2201      	movs	r2, #1
 8034abc:	705a      	strb	r2, [r3, #1]
 8034abe:	e00f      	b.n	8034ae0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8034ac0:	78fb      	ldrb	r3, [r7, #3]
 8034ac2:	f003 020f 	and.w	r2, r3, #15
 8034ac6:	4613      	mov	r3, r2
 8034ac8:	00db      	lsls	r3, r3, #3
 8034aca:	4413      	add	r3, r2
 8034acc:	009b      	lsls	r3, r3, #2
 8034ace:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8034ad2:	687a      	ldr	r2, [r7, #4]
 8034ad4:	4413      	add	r3, r2
 8034ad6:	3304      	adds	r3, #4
 8034ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8034ada:	68fb      	ldr	r3, [r7, #12]
 8034adc:	2200      	movs	r2, #0
 8034ade:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8034ae0:	68fb      	ldr	r3, [r7, #12]
 8034ae2:	2200      	movs	r2, #0
 8034ae4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8034ae6:	78fb      	ldrb	r3, [r7, #3]
 8034ae8:	f003 030f 	and.w	r3, r3, #15
 8034aec:	b2da      	uxtb	r2, r3
 8034aee:	68fb      	ldr	r3, [r7, #12]
 8034af0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8034af2:	687b      	ldr	r3, [r7, #4]
 8034af4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8034af8:	2b01      	cmp	r3, #1
 8034afa:	d101      	bne.n	8034b00 <HAL_PCD_EP_ClrStall+0x86>
 8034afc:	2302      	movs	r3, #2
 8034afe:	e00e      	b.n	8034b1e <HAL_PCD_EP_ClrStall+0xa4>
 8034b00:	687b      	ldr	r3, [r7, #4]
 8034b02:	2201      	movs	r2, #1
 8034b04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8034b08:	687b      	ldr	r3, [r7, #4]
 8034b0a:	681b      	ldr	r3, [r3, #0]
 8034b0c:	68f9      	ldr	r1, [r7, #12]
 8034b0e:	4618      	mov	r0, r3
 8034b10:	f008 fc66 	bl	803d3e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8034b14:	687b      	ldr	r3, [r7, #4]
 8034b16:	2200      	movs	r2, #0
 8034b18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8034b1c:	2300      	movs	r3, #0
}
 8034b1e:	4618      	mov	r0, r3
 8034b20:	3710      	adds	r7, #16
 8034b22:	46bd      	mov	sp, r7
 8034b24:	bd80      	pop	{r7, pc}

08034b26 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8034b26:	b580      	push	{r7, lr}
 8034b28:	b084      	sub	sp, #16
 8034b2a:	af00      	add	r7, sp, #0
 8034b2c:	6078      	str	r0, [r7, #4]
 8034b2e:	460b      	mov	r3, r1
 8034b30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8034b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8034b36:	2b00      	cmp	r3, #0
 8034b38:	da0c      	bge.n	8034b54 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8034b3a:	78fb      	ldrb	r3, [r7, #3]
 8034b3c:	f003 020f 	and.w	r2, r3, #15
 8034b40:	4613      	mov	r3, r2
 8034b42:	00db      	lsls	r3, r3, #3
 8034b44:	4413      	add	r3, r2
 8034b46:	009b      	lsls	r3, r3, #2
 8034b48:	3338      	adds	r3, #56	; 0x38
 8034b4a:	687a      	ldr	r2, [r7, #4]
 8034b4c:	4413      	add	r3, r2
 8034b4e:	3304      	adds	r3, #4
 8034b50:	60fb      	str	r3, [r7, #12]
 8034b52:	e00c      	b.n	8034b6e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8034b54:	78fb      	ldrb	r3, [r7, #3]
 8034b56:	f003 020f 	and.w	r2, r3, #15
 8034b5a:	4613      	mov	r3, r2
 8034b5c:	00db      	lsls	r3, r3, #3
 8034b5e:	4413      	add	r3, r2
 8034b60:	009b      	lsls	r3, r3, #2
 8034b62:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8034b66:	687a      	ldr	r2, [r7, #4]
 8034b68:	4413      	add	r3, r2
 8034b6a:	3304      	adds	r3, #4
 8034b6c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8034b6e:	687b      	ldr	r3, [r7, #4]
 8034b70:	681b      	ldr	r3, [r3, #0]
 8034b72:	68f9      	ldr	r1, [r7, #12]
 8034b74:	4618      	mov	r0, r3
 8034b76:	f008 fa85 	bl	803d084 <USB_EPStopXfer>
 8034b7a:	4603      	mov	r3, r0
 8034b7c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8034b7e:	7afb      	ldrb	r3, [r7, #11]
}
 8034b80:	4618      	mov	r0, r3
 8034b82:	3710      	adds	r7, #16
 8034b84:	46bd      	mov	sp, r7
 8034b86:	bd80      	pop	{r7, pc}

08034b88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8034b88:	b580      	push	{r7, lr}
 8034b8a:	b08a      	sub	sp, #40	; 0x28
 8034b8c:	af02      	add	r7, sp, #8
 8034b8e:	6078      	str	r0, [r7, #4]
 8034b90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8034b92:	687b      	ldr	r3, [r7, #4]
 8034b94:	681b      	ldr	r3, [r3, #0]
 8034b96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8034b98:	697b      	ldr	r3, [r7, #20]
 8034b9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8034b9c:	683a      	ldr	r2, [r7, #0]
 8034b9e:	4613      	mov	r3, r2
 8034ba0:	00db      	lsls	r3, r3, #3
 8034ba2:	4413      	add	r3, r2
 8034ba4:	009b      	lsls	r3, r3, #2
 8034ba6:	3338      	adds	r3, #56	; 0x38
 8034ba8:	687a      	ldr	r2, [r7, #4]
 8034baa:	4413      	add	r3, r2
 8034bac:	3304      	adds	r3, #4
 8034bae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8034bb0:	68fb      	ldr	r3, [r7, #12]
 8034bb2:	6a1a      	ldr	r2, [r3, #32]
 8034bb4:	68fb      	ldr	r3, [r7, #12]
 8034bb6:	699b      	ldr	r3, [r3, #24]
 8034bb8:	429a      	cmp	r2, r3
 8034bba:	d901      	bls.n	8034bc0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8034bbc:	2301      	movs	r3, #1
 8034bbe:	e06c      	b.n	8034c9a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8034bc0:	68fb      	ldr	r3, [r7, #12]
 8034bc2:	699a      	ldr	r2, [r3, #24]
 8034bc4:	68fb      	ldr	r3, [r7, #12]
 8034bc6:	6a1b      	ldr	r3, [r3, #32]
 8034bc8:	1ad3      	subs	r3, r2, r3
 8034bca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8034bcc:	68fb      	ldr	r3, [r7, #12]
 8034bce:	68db      	ldr	r3, [r3, #12]
 8034bd0:	69fa      	ldr	r2, [r7, #28]
 8034bd2:	429a      	cmp	r2, r3
 8034bd4:	d902      	bls.n	8034bdc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8034bd6:	68fb      	ldr	r3, [r7, #12]
 8034bd8:	68db      	ldr	r3, [r3, #12]
 8034bda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8034bdc:	69fb      	ldr	r3, [r7, #28]
 8034bde:	3303      	adds	r3, #3
 8034be0:	089b      	lsrs	r3, r3, #2
 8034be2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8034be4:	e02b      	b.n	8034c3e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8034be6:	68fb      	ldr	r3, [r7, #12]
 8034be8:	699a      	ldr	r2, [r3, #24]
 8034bea:	68fb      	ldr	r3, [r7, #12]
 8034bec:	6a1b      	ldr	r3, [r3, #32]
 8034bee:	1ad3      	subs	r3, r2, r3
 8034bf0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8034bf2:	68fb      	ldr	r3, [r7, #12]
 8034bf4:	68db      	ldr	r3, [r3, #12]
 8034bf6:	69fa      	ldr	r2, [r7, #28]
 8034bf8:	429a      	cmp	r2, r3
 8034bfa:	d902      	bls.n	8034c02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8034bfc:	68fb      	ldr	r3, [r7, #12]
 8034bfe:	68db      	ldr	r3, [r3, #12]
 8034c00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8034c02:	69fb      	ldr	r3, [r7, #28]
 8034c04:	3303      	adds	r3, #3
 8034c06:	089b      	lsrs	r3, r3, #2
 8034c08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8034c0a:	68fb      	ldr	r3, [r7, #12]
 8034c0c:	6919      	ldr	r1, [r3, #16]
 8034c0e:	683b      	ldr	r3, [r7, #0]
 8034c10:	b2da      	uxtb	r2, r3
 8034c12:	69fb      	ldr	r3, [r7, #28]
 8034c14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8034c16:	687b      	ldr	r3, [r7, #4]
 8034c18:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8034c1a:	b2db      	uxtb	r3, r3
 8034c1c:	9300      	str	r3, [sp, #0]
 8034c1e:	4603      	mov	r3, r0
 8034c20:	6978      	ldr	r0, [r7, #20]
 8034c22:	f008 fad9 	bl	803d1d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8034c26:	68fb      	ldr	r3, [r7, #12]
 8034c28:	691a      	ldr	r2, [r3, #16]
 8034c2a:	69fb      	ldr	r3, [r7, #28]
 8034c2c:	441a      	add	r2, r3
 8034c2e:	68fb      	ldr	r3, [r7, #12]
 8034c30:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8034c32:	68fb      	ldr	r3, [r7, #12]
 8034c34:	6a1a      	ldr	r2, [r3, #32]
 8034c36:	69fb      	ldr	r3, [r7, #28]
 8034c38:	441a      	add	r2, r3
 8034c3a:	68fb      	ldr	r3, [r7, #12]
 8034c3c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8034c3e:	683b      	ldr	r3, [r7, #0]
 8034c40:	015a      	lsls	r2, r3, #5
 8034c42:	693b      	ldr	r3, [r7, #16]
 8034c44:	4413      	add	r3, r2
 8034c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8034c4a:	699b      	ldr	r3, [r3, #24]
 8034c4c:	b29b      	uxth	r3, r3
 8034c4e:	69ba      	ldr	r2, [r7, #24]
 8034c50:	429a      	cmp	r2, r3
 8034c52:	d809      	bhi.n	8034c68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8034c54:	68fb      	ldr	r3, [r7, #12]
 8034c56:	6a1a      	ldr	r2, [r3, #32]
 8034c58:	68fb      	ldr	r3, [r7, #12]
 8034c5a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8034c5c:	429a      	cmp	r2, r3
 8034c5e:	d203      	bcs.n	8034c68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8034c60:	68fb      	ldr	r3, [r7, #12]
 8034c62:	699b      	ldr	r3, [r3, #24]
 8034c64:	2b00      	cmp	r3, #0
 8034c66:	d1be      	bne.n	8034be6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8034c68:	68fb      	ldr	r3, [r7, #12]
 8034c6a:	699a      	ldr	r2, [r3, #24]
 8034c6c:	68fb      	ldr	r3, [r7, #12]
 8034c6e:	6a1b      	ldr	r3, [r3, #32]
 8034c70:	429a      	cmp	r2, r3
 8034c72:	d811      	bhi.n	8034c98 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8034c74:	683b      	ldr	r3, [r7, #0]
 8034c76:	f003 030f 	and.w	r3, r3, #15
 8034c7a:	2201      	movs	r2, #1
 8034c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8034c80:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8034c82:	693b      	ldr	r3, [r7, #16]
 8034c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8034c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8034c8a:	68bb      	ldr	r3, [r7, #8]
 8034c8c:	43db      	mvns	r3, r3
 8034c8e:	6939      	ldr	r1, [r7, #16]
 8034c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8034c94:	4013      	ands	r3, r2
 8034c96:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8034c98:	2300      	movs	r3, #0
}
 8034c9a:	4618      	mov	r0, r3
 8034c9c:	3720      	adds	r7, #32
 8034c9e:	46bd      	mov	sp, r7
 8034ca0:	bd80      	pop	{r7, pc}
	...

08034ca4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8034ca4:	b580      	push	{r7, lr}
 8034ca6:	b088      	sub	sp, #32
 8034ca8:	af00      	add	r7, sp, #0
 8034caa:	6078      	str	r0, [r7, #4]
 8034cac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8034cae:	687b      	ldr	r3, [r7, #4]
 8034cb0:	681b      	ldr	r3, [r3, #0]
 8034cb2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8034cb4:	69fb      	ldr	r3, [r7, #28]
 8034cb6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8034cb8:	69fb      	ldr	r3, [r7, #28]
 8034cba:	333c      	adds	r3, #60	; 0x3c
 8034cbc:	3304      	adds	r3, #4
 8034cbe:	681b      	ldr	r3, [r3, #0]
 8034cc0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8034cc2:	683b      	ldr	r3, [r7, #0]
 8034cc4:	015a      	lsls	r2, r3, #5
 8034cc6:	69bb      	ldr	r3, [r7, #24]
 8034cc8:	4413      	add	r3, r2
 8034cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8034cce:	689b      	ldr	r3, [r3, #8]
 8034cd0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8034cd2:	687b      	ldr	r3, [r7, #4]
 8034cd4:	691b      	ldr	r3, [r3, #16]
 8034cd6:	2b01      	cmp	r3, #1
 8034cd8:	d17b      	bne.n	8034dd2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8034cda:	693b      	ldr	r3, [r7, #16]
 8034cdc:	f003 0308 	and.w	r3, r3, #8
 8034ce0:	2b00      	cmp	r3, #0
 8034ce2:	d015      	beq.n	8034d10 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8034ce4:	697b      	ldr	r3, [r7, #20]
 8034ce6:	4a61      	ldr	r2, [pc, #388]	; (8034e6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8034ce8:	4293      	cmp	r3, r2
 8034cea:	f240 80b9 	bls.w	8034e60 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8034cee:	693b      	ldr	r3, [r7, #16]
 8034cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8034cf4:	2b00      	cmp	r3, #0
 8034cf6:	f000 80b3 	beq.w	8034e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8034cfa:	683b      	ldr	r3, [r7, #0]
 8034cfc:	015a      	lsls	r2, r3, #5
 8034cfe:	69bb      	ldr	r3, [r7, #24]
 8034d00:	4413      	add	r3, r2
 8034d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8034d06:	461a      	mov	r2, r3
 8034d08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8034d0c:	6093      	str	r3, [r2, #8]
 8034d0e:	e0a7      	b.n	8034e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8034d10:	693b      	ldr	r3, [r7, #16]
 8034d12:	f003 0320 	and.w	r3, r3, #32
 8034d16:	2b00      	cmp	r3, #0
 8034d18:	d009      	beq.n	8034d2e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8034d1a:	683b      	ldr	r3, [r7, #0]
 8034d1c:	015a      	lsls	r2, r3, #5
 8034d1e:	69bb      	ldr	r3, [r7, #24]
 8034d20:	4413      	add	r3, r2
 8034d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8034d26:	461a      	mov	r2, r3
 8034d28:	2320      	movs	r3, #32
 8034d2a:	6093      	str	r3, [r2, #8]
 8034d2c:	e098      	b.n	8034e60 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8034d2e:	693b      	ldr	r3, [r7, #16]
 8034d30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8034d34:	2b00      	cmp	r3, #0
 8034d36:	f040 8093 	bne.w	8034e60 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8034d3a:	697b      	ldr	r3, [r7, #20]
 8034d3c:	4a4b      	ldr	r2, [pc, #300]	; (8034e6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8034d3e:	4293      	cmp	r3, r2
 8034d40:	d90f      	bls.n	8034d62 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8034d42:	693b      	ldr	r3, [r7, #16]
 8034d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8034d48:	2b00      	cmp	r3, #0
 8034d4a:	d00a      	beq.n	8034d62 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8034d4c:	683b      	ldr	r3, [r7, #0]
 8034d4e:	015a      	lsls	r2, r3, #5
 8034d50:	69bb      	ldr	r3, [r7, #24]
 8034d52:	4413      	add	r3, r2
 8034d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8034d58:	461a      	mov	r2, r3
 8034d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8034d5e:	6093      	str	r3, [r2, #8]
 8034d60:	e07e      	b.n	8034e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8034d62:	683a      	ldr	r2, [r7, #0]
 8034d64:	4613      	mov	r3, r2
 8034d66:	00db      	lsls	r3, r3, #3
 8034d68:	4413      	add	r3, r2
 8034d6a:	009b      	lsls	r3, r3, #2
 8034d6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8034d70:	687a      	ldr	r2, [r7, #4]
 8034d72:	4413      	add	r3, r2
 8034d74:	3304      	adds	r3, #4
 8034d76:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8034d78:	68fb      	ldr	r3, [r7, #12]
 8034d7a:	69da      	ldr	r2, [r3, #28]
 8034d7c:	683b      	ldr	r3, [r7, #0]
 8034d7e:	0159      	lsls	r1, r3, #5
 8034d80:	69bb      	ldr	r3, [r7, #24]
 8034d82:	440b      	add	r3, r1
 8034d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8034d88:	691b      	ldr	r3, [r3, #16]
 8034d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8034d8e:	1ad2      	subs	r2, r2, r3
 8034d90:	68fb      	ldr	r3, [r7, #12]
 8034d92:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8034d94:	683b      	ldr	r3, [r7, #0]
 8034d96:	2b00      	cmp	r3, #0
 8034d98:	d114      	bne.n	8034dc4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8034d9a:	68fb      	ldr	r3, [r7, #12]
 8034d9c:	699b      	ldr	r3, [r3, #24]
 8034d9e:	2b00      	cmp	r3, #0
 8034da0:	d109      	bne.n	8034db6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8034da2:	687b      	ldr	r3, [r7, #4]
 8034da4:	6818      	ldr	r0, [r3, #0]
 8034da6:	687b      	ldr	r3, [r7, #4]
 8034da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8034dac:	461a      	mov	r2, r3
 8034dae:	2101      	movs	r1, #1
 8034db0:	f008 fcaa 	bl	803d708 <USB_EP0_OutStart>
 8034db4:	e006      	b.n	8034dc4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8034db6:	68fb      	ldr	r3, [r7, #12]
 8034db8:	691a      	ldr	r2, [r3, #16]
 8034dba:	68fb      	ldr	r3, [r7, #12]
 8034dbc:	6a1b      	ldr	r3, [r3, #32]
 8034dbe:	441a      	add	r2, r3
 8034dc0:	68fb      	ldr	r3, [r7, #12]
 8034dc2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8034dc4:	683b      	ldr	r3, [r7, #0]
 8034dc6:	b2db      	uxtb	r3, r3
 8034dc8:	4619      	mov	r1, r3
 8034dca:	6878      	ldr	r0, [r7, #4]
 8034dcc:	f00a ff1e 	bl	803fc0c <HAL_PCD_DataOutStageCallback>
 8034dd0:	e046      	b.n	8034e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8034dd2:	697b      	ldr	r3, [r7, #20]
 8034dd4:	4a26      	ldr	r2, [pc, #152]	; (8034e70 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8034dd6:	4293      	cmp	r3, r2
 8034dd8:	d124      	bne.n	8034e24 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8034dda:	693b      	ldr	r3, [r7, #16]
 8034ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8034de0:	2b00      	cmp	r3, #0
 8034de2:	d00a      	beq.n	8034dfa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8034de4:	683b      	ldr	r3, [r7, #0]
 8034de6:	015a      	lsls	r2, r3, #5
 8034de8:	69bb      	ldr	r3, [r7, #24]
 8034dea:	4413      	add	r3, r2
 8034dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8034df0:	461a      	mov	r2, r3
 8034df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8034df6:	6093      	str	r3, [r2, #8]
 8034df8:	e032      	b.n	8034e60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8034dfa:	693b      	ldr	r3, [r7, #16]
 8034dfc:	f003 0320 	and.w	r3, r3, #32
 8034e00:	2b00      	cmp	r3, #0
 8034e02:	d008      	beq.n	8034e16 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8034e04:	683b      	ldr	r3, [r7, #0]
 8034e06:	015a      	lsls	r2, r3, #5
 8034e08:	69bb      	ldr	r3, [r7, #24]
 8034e0a:	4413      	add	r3, r2
 8034e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8034e10:	461a      	mov	r2, r3
 8034e12:	2320      	movs	r3, #32
 8034e14:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8034e16:	683b      	ldr	r3, [r7, #0]
 8034e18:	b2db      	uxtb	r3, r3
 8034e1a:	4619      	mov	r1, r3
 8034e1c:	6878      	ldr	r0, [r7, #4]
 8034e1e:	f00a fef5 	bl	803fc0c <HAL_PCD_DataOutStageCallback>
 8034e22:	e01d      	b.n	8034e60 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8034e24:	683b      	ldr	r3, [r7, #0]
 8034e26:	2b00      	cmp	r3, #0
 8034e28:	d114      	bne.n	8034e54 <PCD_EP_OutXfrComplete_int+0x1b0>
 8034e2a:	6879      	ldr	r1, [r7, #4]
 8034e2c:	683a      	ldr	r2, [r7, #0]
 8034e2e:	4613      	mov	r3, r2
 8034e30:	00db      	lsls	r3, r3, #3
 8034e32:	4413      	add	r3, r2
 8034e34:	009b      	lsls	r3, r3, #2
 8034e36:	440b      	add	r3, r1
 8034e38:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8034e3c:	681b      	ldr	r3, [r3, #0]
 8034e3e:	2b00      	cmp	r3, #0
 8034e40:	d108      	bne.n	8034e54 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8034e42:	687b      	ldr	r3, [r7, #4]
 8034e44:	6818      	ldr	r0, [r3, #0]
 8034e46:	687b      	ldr	r3, [r7, #4]
 8034e48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8034e4c:	461a      	mov	r2, r3
 8034e4e:	2100      	movs	r1, #0
 8034e50:	f008 fc5a 	bl	803d708 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8034e54:	683b      	ldr	r3, [r7, #0]
 8034e56:	b2db      	uxtb	r3, r3
 8034e58:	4619      	mov	r1, r3
 8034e5a:	6878      	ldr	r0, [r7, #4]
 8034e5c:	f00a fed6 	bl	803fc0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8034e60:	2300      	movs	r3, #0
}
 8034e62:	4618      	mov	r0, r3
 8034e64:	3720      	adds	r7, #32
 8034e66:	46bd      	mov	sp, r7
 8034e68:	bd80      	pop	{r7, pc}
 8034e6a:	bf00      	nop
 8034e6c:	4f54300a 	.word	0x4f54300a
 8034e70:	4f54310a 	.word	0x4f54310a

08034e74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8034e74:	b580      	push	{r7, lr}
 8034e76:	b086      	sub	sp, #24
 8034e78:	af00      	add	r7, sp, #0
 8034e7a:	6078      	str	r0, [r7, #4]
 8034e7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8034e7e:	687b      	ldr	r3, [r7, #4]
 8034e80:	681b      	ldr	r3, [r3, #0]
 8034e82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8034e84:	697b      	ldr	r3, [r7, #20]
 8034e86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8034e88:	697b      	ldr	r3, [r7, #20]
 8034e8a:	333c      	adds	r3, #60	; 0x3c
 8034e8c:	3304      	adds	r3, #4
 8034e8e:	681b      	ldr	r3, [r3, #0]
 8034e90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8034e92:	683b      	ldr	r3, [r7, #0]
 8034e94:	015a      	lsls	r2, r3, #5
 8034e96:	693b      	ldr	r3, [r7, #16]
 8034e98:	4413      	add	r3, r2
 8034e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8034e9e:	689b      	ldr	r3, [r3, #8]
 8034ea0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8034ea2:	68fb      	ldr	r3, [r7, #12]
 8034ea4:	4a15      	ldr	r2, [pc, #84]	; (8034efc <PCD_EP_OutSetupPacket_int+0x88>)
 8034ea6:	4293      	cmp	r3, r2
 8034ea8:	d90e      	bls.n	8034ec8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8034eaa:	68bb      	ldr	r3, [r7, #8]
 8034eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8034eb0:	2b00      	cmp	r3, #0
 8034eb2:	d009      	beq.n	8034ec8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8034eb4:	683b      	ldr	r3, [r7, #0]
 8034eb6:	015a      	lsls	r2, r3, #5
 8034eb8:	693b      	ldr	r3, [r7, #16]
 8034eba:	4413      	add	r3, r2
 8034ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8034ec0:	461a      	mov	r2, r3
 8034ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8034ec6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8034ec8:	6878      	ldr	r0, [r7, #4]
 8034eca:	f00a fe8d 	bl	803fbe8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8034ece:	68fb      	ldr	r3, [r7, #12]
 8034ed0:	4a0a      	ldr	r2, [pc, #40]	; (8034efc <PCD_EP_OutSetupPacket_int+0x88>)
 8034ed2:	4293      	cmp	r3, r2
 8034ed4:	d90c      	bls.n	8034ef0 <PCD_EP_OutSetupPacket_int+0x7c>
 8034ed6:	687b      	ldr	r3, [r7, #4]
 8034ed8:	691b      	ldr	r3, [r3, #16]
 8034eda:	2b01      	cmp	r3, #1
 8034edc:	d108      	bne.n	8034ef0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8034ede:	687b      	ldr	r3, [r7, #4]
 8034ee0:	6818      	ldr	r0, [r3, #0]
 8034ee2:	687b      	ldr	r3, [r7, #4]
 8034ee4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8034ee8:	461a      	mov	r2, r3
 8034eea:	2101      	movs	r1, #1
 8034eec:	f008 fc0c 	bl	803d708 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8034ef0:	2300      	movs	r3, #0
}
 8034ef2:	4618      	mov	r0, r3
 8034ef4:	3718      	adds	r7, #24
 8034ef6:	46bd      	mov	sp, r7
 8034ef8:	bd80      	pop	{r7, pc}
 8034efa:	bf00      	nop
 8034efc:	4f54300a 	.word	0x4f54300a

08034f00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8034f00:	b480      	push	{r7}
 8034f02:	b085      	sub	sp, #20
 8034f04:	af00      	add	r7, sp, #0
 8034f06:	6078      	str	r0, [r7, #4]
 8034f08:	460b      	mov	r3, r1
 8034f0a:	70fb      	strb	r3, [r7, #3]
 8034f0c:	4613      	mov	r3, r2
 8034f0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8034f10:	687b      	ldr	r3, [r7, #4]
 8034f12:	681b      	ldr	r3, [r3, #0]
 8034f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034f16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8034f18:	78fb      	ldrb	r3, [r7, #3]
 8034f1a:	2b00      	cmp	r3, #0
 8034f1c:	d107      	bne.n	8034f2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8034f1e:	883b      	ldrh	r3, [r7, #0]
 8034f20:	0419      	lsls	r1, r3, #16
 8034f22:	687b      	ldr	r3, [r7, #4]
 8034f24:	681b      	ldr	r3, [r3, #0]
 8034f26:	68ba      	ldr	r2, [r7, #8]
 8034f28:	430a      	orrs	r2, r1
 8034f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8034f2c:	e028      	b.n	8034f80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8034f2e:	687b      	ldr	r3, [r7, #4]
 8034f30:	681b      	ldr	r3, [r3, #0]
 8034f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034f34:	0c1b      	lsrs	r3, r3, #16
 8034f36:	68ba      	ldr	r2, [r7, #8]
 8034f38:	4413      	add	r3, r2
 8034f3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8034f3c:	2300      	movs	r3, #0
 8034f3e:	73fb      	strb	r3, [r7, #15]
 8034f40:	e00d      	b.n	8034f5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8034f42:	687b      	ldr	r3, [r7, #4]
 8034f44:	681a      	ldr	r2, [r3, #0]
 8034f46:	7bfb      	ldrb	r3, [r7, #15]
 8034f48:	3340      	adds	r3, #64	; 0x40
 8034f4a:	009b      	lsls	r3, r3, #2
 8034f4c:	4413      	add	r3, r2
 8034f4e:	685b      	ldr	r3, [r3, #4]
 8034f50:	0c1b      	lsrs	r3, r3, #16
 8034f52:	68ba      	ldr	r2, [r7, #8]
 8034f54:	4413      	add	r3, r2
 8034f56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8034f58:	7bfb      	ldrb	r3, [r7, #15]
 8034f5a:	3301      	adds	r3, #1
 8034f5c:	73fb      	strb	r3, [r7, #15]
 8034f5e:	7bfa      	ldrb	r2, [r7, #15]
 8034f60:	78fb      	ldrb	r3, [r7, #3]
 8034f62:	3b01      	subs	r3, #1
 8034f64:	429a      	cmp	r2, r3
 8034f66:	d3ec      	bcc.n	8034f42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8034f68:	883b      	ldrh	r3, [r7, #0]
 8034f6a:	0418      	lsls	r0, r3, #16
 8034f6c:	687b      	ldr	r3, [r7, #4]
 8034f6e:	6819      	ldr	r1, [r3, #0]
 8034f70:	78fb      	ldrb	r3, [r7, #3]
 8034f72:	3b01      	subs	r3, #1
 8034f74:	68ba      	ldr	r2, [r7, #8]
 8034f76:	4302      	orrs	r2, r0
 8034f78:	3340      	adds	r3, #64	; 0x40
 8034f7a:	009b      	lsls	r3, r3, #2
 8034f7c:	440b      	add	r3, r1
 8034f7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8034f80:	2300      	movs	r3, #0
}
 8034f82:	4618      	mov	r0, r3
 8034f84:	3714      	adds	r7, #20
 8034f86:	46bd      	mov	sp, r7
 8034f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034f8c:	4770      	bx	lr

08034f8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8034f8e:	b480      	push	{r7}
 8034f90:	b083      	sub	sp, #12
 8034f92:	af00      	add	r7, sp, #0
 8034f94:	6078      	str	r0, [r7, #4]
 8034f96:	460b      	mov	r3, r1
 8034f98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8034f9a:	687b      	ldr	r3, [r7, #4]
 8034f9c:	681b      	ldr	r3, [r3, #0]
 8034f9e:	887a      	ldrh	r2, [r7, #2]
 8034fa0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8034fa2:	2300      	movs	r3, #0
}
 8034fa4:	4618      	mov	r0, r3
 8034fa6:	370c      	adds	r7, #12
 8034fa8:	46bd      	mov	sp, r7
 8034faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034fae:	4770      	bx	lr

08034fb0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8034fb0:	b480      	push	{r7}
 8034fb2:	b085      	sub	sp, #20
 8034fb4:	af00      	add	r7, sp, #0
 8034fb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8034fb8:	687b      	ldr	r3, [r7, #4]
 8034fba:	681b      	ldr	r3, [r3, #0]
 8034fbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8034fbe:	687b      	ldr	r3, [r7, #4]
 8034fc0:	2201      	movs	r2, #1
 8034fc2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8034fc6:	687b      	ldr	r3, [r7, #4]
 8034fc8:	2200      	movs	r2, #0
 8034fca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8034fce:	68fb      	ldr	r3, [r7, #12]
 8034fd0:	699b      	ldr	r3, [r3, #24]
 8034fd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8034fd6:	68fb      	ldr	r3, [r7, #12]
 8034fd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8034fda:	68fb      	ldr	r3, [r7, #12]
 8034fdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8034fde:	4b05      	ldr	r3, [pc, #20]	; (8034ff4 <HAL_PCDEx_ActivateLPM+0x44>)
 8034fe0:	4313      	orrs	r3, r2
 8034fe2:	68fa      	ldr	r2, [r7, #12]
 8034fe4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8034fe6:	2300      	movs	r3, #0
}
 8034fe8:	4618      	mov	r0, r3
 8034fea:	3714      	adds	r7, #20
 8034fec:	46bd      	mov	sp, r7
 8034fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ff2:	4770      	bx	lr
 8034ff4:	10000003 	.word	0x10000003

08034ff8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8034ff8:	b480      	push	{r7}
 8034ffa:	b083      	sub	sp, #12
 8034ffc:	af00      	add	r7, sp, #0
 8034ffe:	6078      	str	r0, [r7, #4]
 8035000:	460b      	mov	r3, r1
 8035002:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8035004:	bf00      	nop
 8035006:	370c      	adds	r7, #12
 8035008:	46bd      	mov	sp, r7
 803500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803500e:	4770      	bx	lr

08035010 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8035010:	b580      	push	{r7, lr}
 8035012:	b084      	sub	sp, #16
 8035014:	af00      	add	r7, sp, #0
 8035016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8035018:	4b19      	ldr	r3, [pc, #100]	; (8035080 <HAL_PWREx_ConfigSupply+0x70>)
 803501a:	68db      	ldr	r3, [r3, #12]
 803501c:	f003 0304 	and.w	r3, r3, #4
 8035020:	2b04      	cmp	r3, #4
 8035022:	d00a      	beq.n	803503a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8035024:	4b16      	ldr	r3, [pc, #88]	; (8035080 <HAL_PWREx_ConfigSupply+0x70>)
 8035026:	68db      	ldr	r3, [r3, #12]
 8035028:	f003 0307 	and.w	r3, r3, #7
 803502c:	687a      	ldr	r2, [r7, #4]
 803502e:	429a      	cmp	r2, r3
 8035030:	d001      	beq.n	8035036 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8035032:	2301      	movs	r3, #1
 8035034:	e01f      	b.n	8035076 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8035036:	2300      	movs	r3, #0
 8035038:	e01d      	b.n	8035076 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 803503a:	4b11      	ldr	r3, [pc, #68]	; (8035080 <HAL_PWREx_ConfigSupply+0x70>)
 803503c:	68db      	ldr	r3, [r3, #12]
 803503e:	f023 0207 	bic.w	r2, r3, #7
 8035042:	490f      	ldr	r1, [pc, #60]	; (8035080 <HAL_PWREx_ConfigSupply+0x70>)
 8035044:	687b      	ldr	r3, [r7, #4]
 8035046:	4313      	orrs	r3, r2
 8035048:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 803504a:	f7fa f843 	bl	802f0d4 <HAL_GetTick>
 803504e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8035050:	e009      	b.n	8035066 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8035052:	f7fa f83f 	bl	802f0d4 <HAL_GetTick>
 8035056:	4602      	mov	r2, r0
 8035058:	68fb      	ldr	r3, [r7, #12]
 803505a:	1ad3      	subs	r3, r2, r3
 803505c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8035060:	d901      	bls.n	8035066 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8035062:	2301      	movs	r3, #1
 8035064:	e007      	b.n	8035076 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8035066:	4b06      	ldr	r3, [pc, #24]	; (8035080 <HAL_PWREx_ConfigSupply+0x70>)
 8035068:	685b      	ldr	r3, [r3, #4]
 803506a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 803506e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8035072:	d1ee      	bne.n	8035052 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8035074:	2300      	movs	r3, #0
}
 8035076:	4618      	mov	r0, r3
 8035078:	3710      	adds	r7, #16
 803507a:	46bd      	mov	sp, r7
 803507c:	bd80      	pop	{r7, pc}
 803507e:	bf00      	nop
 8035080:	58024800 	.word	0x58024800

08035084 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8035084:	b480      	push	{r7}
 8035086:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8035088:	4b05      	ldr	r3, [pc, #20]	; (80350a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 803508a:	68db      	ldr	r3, [r3, #12]
 803508c:	4a04      	ldr	r2, [pc, #16]	; (80350a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 803508e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8035092:	60d3      	str	r3, [r2, #12]
}
 8035094:	bf00      	nop
 8035096:	46bd      	mov	sp, r7
 8035098:	f85d 7b04 	ldr.w	r7, [sp], #4
 803509c:	4770      	bx	lr
 803509e:	bf00      	nop
 80350a0:	58024800 	.word	0x58024800

080350a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80350a4:	b580      	push	{r7, lr}
 80350a6:	b08c      	sub	sp, #48	; 0x30
 80350a8:	af00      	add	r7, sp, #0
 80350aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80350ac:	687b      	ldr	r3, [r7, #4]
 80350ae:	2b00      	cmp	r3, #0
 80350b0:	d102      	bne.n	80350b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80350b2:	2301      	movs	r3, #1
 80350b4:	f000 bc1d 	b.w	80358f2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80350b8:	687b      	ldr	r3, [r7, #4]
 80350ba:	681b      	ldr	r3, [r3, #0]
 80350bc:	f003 0301 	and.w	r3, r3, #1
 80350c0:	2b00      	cmp	r3, #0
 80350c2:	f000 8087 	beq.w	80351d4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80350c6:	4b99      	ldr	r3, [pc, #612]	; (803532c <HAL_RCC_OscConfig+0x288>)
 80350c8:	691b      	ldr	r3, [r3, #16]
 80350ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80350ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80350d0:	4b96      	ldr	r3, [pc, #600]	; (803532c <HAL_RCC_OscConfig+0x288>)
 80350d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80350d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80350d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80350d8:	2b10      	cmp	r3, #16
 80350da:	d007      	beq.n	80350ec <HAL_RCC_OscConfig+0x48>
 80350dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80350de:	2b18      	cmp	r3, #24
 80350e0:	d110      	bne.n	8035104 <HAL_RCC_OscConfig+0x60>
 80350e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80350e4:	f003 0303 	and.w	r3, r3, #3
 80350e8:	2b02      	cmp	r3, #2
 80350ea:	d10b      	bne.n	8035104 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80350ec:	4b8f      	ldr	r3, [pc, #572]	; (803532c <HAL_RCC_OscConfig+0x288>)
 80350ee:	681b      	ldr	r3, [r3, #0]
 80350f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80350f4:	2b00      	cmp	r3, #0
 80350f6:	d06c      	beq.n	80351d2 <HAL_RCC_OscConfig+0x12e>
 80350f8:	687b      	ldr	r3, [r7, #4]
 80350fa:	685b      	ldr	r3, [r3, #4]
 80350fc:	2b00      	cmp	r3, #0
 80350fe:	d168      	bne.n	80351d2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8035100:	2301      	movs	r3, #1
 8035102:	e3f6      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8035104:	687b      	ldr	r3, [r7, #4]
 8035106:	685b      	ldr	r3, [r3, #4]
 8035108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803510c:	d106      	bne.n	803511c <HAL_RCC_OscConfig+0x78>
 803510e:	4b87      	ldr	r3, [pc, #540]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035110:	681b      	ldr	r3, [r3, #0]
 8035112:	4a86      	ldr	r2, [pc, #536]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8035118:	6013      	str	r3, [r2, #0]
 803511a:	e02e      	b.n	803517a <HAL_RCC_OscConfig+0xd6>
 803511c:	687b      	ldr	r3, [r7, #4]
 803511e:	685b      	ldr	r3, [r3, #4]
 8035120:	2b00      	cmp	r3, #0
 8035122:	d10c      	bne.n	803513e <HAL_RCC_OscConfig+0x9a>
 8035124:	4b81      	ldr	r3, [pc, #516]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035126:	681b      	ldr	r3, [r3, #0]
 8035128:	4a80      	ldr	r2, [pc, #512]	; (803532c <HAL_RCC_OscConfig+0x288>)
 803512a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 803512e:	6013      	str	r3, [r2, #0]
 8035130:	4b7e      	ldr	r3, [pc, #504]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035132:	681b      	ldr	r3, [r3, #0]
 8035134:	4a7d      	ldr	r2, [pc, #500]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 803513a:	6013      	str	r3, [r2, #0]
 803513c:	e01d      	b.n	803517a <HAL_RCC_OscConfig+0xd6>
 803513e:	687b      	ldr	r3, [r7, #4]
 8035140:	685b      	ldr	r3, [r3, #4]
 8035142:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8035146:	d10c      	bne.n	8035162 <HAL_RCC_OscConfig+0xbe>
 8035148:	4b78      	ldr	r3, [pc, #480]	; (803532c <HAL_RCC_OscConfig+0x288>)
 803514a:	681b      	ldr	r3, [r3, #0]
 803514c:	4a77      	ldr	r2, [pc, #476]	; (803532c <HAL_RCC_OscConfig+0x288>)
 803514e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8035152:	6013      	str	r3, [r2, #0]
 8035154:	4b75      	ldr	r3, [pc, #468]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035156:	681b      	ldr	r3, [r3, #0]
 8035158:	4a74      	ldr	r2, [pc, #464]	; (803532c <HAL_RCC_OscConfig+0x288>)
 803515a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 803515e:	6013      	str	r3, [r2, #0]
 8035160:	e00b      	b.n	803517a <HAL_RCC_OscConfig+0xd6>
 8035162:	4b72      	ldr	r3, [pc, #456]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035164:	681b      	ldr	r3, [r3, #0]
 8035166:	4a71      	ldr	r2, [pc, #452]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 803516c:	6013      	str	r3, [r2, #0]
 803516e:	4b6f      	ldr	r3, [pc, #444]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035170:	681b      	ldr	r3, [r3, #0]
 8035172:	4a6e      	ldr	r2, [pc, #440]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8035178:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 803517a:	687b      	ldr	r3, [r7, #4]
 803517c:	685b      	ldr	r3, [r3, #4]
 803517e:	2b00      	cmp	r3, #0
 8035180:	d013      	beq.n	80351aa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8035182:	f7f9 ffa7 	bl	802f0d4 <HAL_GetTick>
 8035186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8035188:	e008      	b.n	803519c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 803518a:	f7f9 ffa3 	bl	802f0d4 <HAL_GetTick>
 803518e:	4602      	mov	r2, r0
 8035190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035192:	1ad3      	subs	r3, r2, r3
 8035194:	2b64      	cmp	r3, #100	; 0x64
 8035196:	d901      	bls.n	803519c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8035198:	2303      	movs	r3, #3
 803519a:	e3aa      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 803519c:	4b63      	ldr	r3, [pc, #396]	; (803532c <HAL_RCC_OscConfig+0x288>)
 803519e:	681b      	ldr	r3, [r3, #0]
 80351a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80351a4:	2b00      	cmp	r3, #0
 80351a6:	d0f0      	beq.n	803518a <HAL_RCC_OscConfig+0xe6>
 80351a8:	e014      	b.n	80351d4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80351aa:	f7f9 ff93 	bl	802f0d4 <HAL_GetTick>
 80351ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80351b0:	e008      	b.n	80351c4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80351b2:	f7f9 ff8f 	bl	802f0d4 <HAL_GetTick>
 80351b6:	4602      	mov	r2, r0
 80351b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80351ba:	1ad3      	subs	r3, r2, r3
 80351bc:	2b64      	cmp	r3, #100	; 0x64
 80351be:	d901      	bls.n	80351c4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80351c0:	2303      	movs	r3, #3
 80351c2:	e396      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80351c4:	4b59      	ldr	r3, [pc, #356]	; (803532c <HAL_RCC_OscConfig+0x288>)
 80351c6:	681b      	ldr	r3, [r3, #0]
 80351c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80351cc:	2b00      	cmp	r3, #0
 80351ce:	d1f0      	bne.n	80351b2 <HAL_RCC_OscConfig+0x10e>
 80351d0:	e000      	b.n	80351d4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80351d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80351d4:	687b      	ldr	r3, [r7, #4]
 80351d6:	681b      	ldr	r3, [r3, #0]
 80351d8:	f003 0302 	and.w	r3, r3, #2
 80351dc:	2b00      	cmp	r3, #0
 80351de:	f000 80cb 	beq.w	8035378 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80351e2:	4b52      	ldr	r3, [pc, #328]	; (803532c <HAL_RCC_OscConfig+0x288>)
 80351e4:	691b      	ldr	r3, [r3, #16]
 80351e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80351ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80351ec:	4b4f      	ldr	r3, [pc, #316]	; (803532c <HAL_RCC_OscConfig+0x288>)
 80351ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80351f0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80351f2:	6a3b      	ldr	r3, [r7, #32]
 80351f4:	2b00      	cmp	r3, #0
 80351f6:	d007      	beq.n	8035208 <HAL_RCC_OscConfig+0x164>
 80351f8:	6a3b      	ldr	r3, [r7, #32]
 80351fa:	2b18      	cmp	r3, #24
 80351fc:	d156      	bne.n	80352ac <HAL_RCC_OscConfig+0x208>
 80351fe:	69fb      	ldr	r3, [r7, #28]
 8035200:	f003 0303 	and.w	r3, r3, #3
 8035204:	2b00      	cmp	r3, #0
 8035206:	d151      	bne.n	80352ac <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8035208:	4b48      	ldr	r3, [pc, #288]	; (803532c <HAL_RCC_OscConfig+0x288>)
 803520a:	681b      	ldr	r3, [r3, #0]
 803520c:	f003 0304 	and.w	r3, r3, #4
 8035210:	2b00      	cmp	r3, #0
 8035212:	d005      	beq.n	8035220 <HAL_RCC_OscConfig+0x17c>
 8035214:	687b      	ldr	r3, [r7, #4]
 8035216:	68db      	ldr	r3, [r3, #12]
 8035218:	2b00      	cmp	r3, #0
 803521a:	d101      	bne.n	8035220 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 803521c:	2301      	movs	r3, #1
 803521e:	e368      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8035220:	4b42      	ldr	r3, [pc, #264]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035222:	681b      	ldr	r3, [r3, #0]
 8035224:	f023 0219 	bic.w	r2, r3, #25
 8035228:	687b      	ldr	r3, [r7, #4]
 803522a:	68db      	ldr	r3, [r3, #12]
 803522c:	493f      	ldr	r1, [pc, #252]	; (803532c <HAL_RCC_OscConfig+0x288>)
 803522e:	4313      	orrs	r3, r2
 8035230:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8035232:	f7f9 ff4f 	bl	802f0d4 <HAL_GetTick>
 8035236:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8035238:	e008      	b.n	803524c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 803523a:	f7f9 ff4b 	bl	802f0d4 <HAL_GetTick>
 803523e:	4602      	mov	r2, r0
 8035240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035242:	1ad3      	subs	r3, r2, r3
 8035244:	2b02      	cmp	r3, #2
 8035246:	d901      	bls.n	803524c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8035248:	2303      	movs	r3, #3
 803524a:	e352      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 803524c:	4b37      	ldr	r3, [pc, #220]	; (803532c <HAL_RCC_OscConfig+0x288>)
 803524e:	681b      	ldr	r3, [r3, #0]
 8035250:	f003 0304 	and.w	r3, r3, #4
 8035254:	2b00      	cmp	r3, #0
 8035256:	d0f0      	beq.n	803523a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8035258:	f7f9 ff6c 	bl	802f134 <HAL_GetREVID>
 803525c:	4603      	mov	r3, r0
 803525e:	f241 0203 	movw	r2, #4099	; 0x1003
 8035262:	4293      	cmp	r3, r2
 8035264:	d817      	bhi.n	8035296 <HAL_RCC_OscConfig+0x1f2>
 8035266:	687b      	ldr	r3, [r7, #4]
 8035268:	691b      	ldr	r3, [r3, #16]
 803526a:	2b40      	cmp	r3, #64	; 0x40
 803526c:	d108      	bne.n	8035280 <HAL_RCC_OscConfig+0x1dc>
 803526e:	4b2f      	ldr	r3, [pc, #188]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035270:	685b      	ldr	r3, [r3, #4]
 8035272:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8035276:	4a2d      	ldr	r2, [pc, #180]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803527c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 803527e:	e07b      	b.n	8035378 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8035280:	4b2a      	ldr	r3, [pc, #168]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035282:	685b      	ldr	r3, [r3, #4]
 8035284:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8035288:	687b      	ldr	r3, [r7, #4]
 803528a:	691b      	ldr	r3, [r3, #16]
 803528c:	031b      	lsls	r3, r3, #12
 803528e:	4927      	ldr	r1, [pc, #156]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035290:	4313      	orrs	r3, r2
 8035292:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8035294:	e070      	b.n	8035378 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8035296:	4b25      	ldr	r3, [pc, #148]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035298:	685b      	ldr	r3, [r3, #4]
 803529a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 803529e:	687b      	ldr	r3, [r7, #4]
 80352a0:	691b      	ldr	r3, [r3, #16]
 80352a2:	061b      	lsls	r3, r3, #24
 80352a4:	4921      	ldr	r1, [pc, #132]	; (803532c <HAL_RCC_OscConfig+0x288>)
 80352a6:	4313      	orrs	r3, r2
 80352a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80352aa:	e065      	b.n	8035378 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80352ac:	687b      	ldr	r3, [r7, #4]
 80352ae:	68db      	ldr	r3, [r3, #12]
 80352b0:	2b00      	cmp	r3, #0
 80352b2:	d048      	beq.n	8035346 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80352b4:	4b1d      	ldr	r3, [pc, #116]	; (803532c <HAL_RCC_OscConfig+0x288>)
 80352b6:	681b      	ldr	r3, [r3, #0]
 80352b8:	f023 0219 	bic.w	r2, r3, #25
 80352bc:	687b      	ldr	r3, [r7, #4]
 80352be:	68db      	ldr	r3, [r3, #12]
 80352c0:	491a      	ldr	r1, [pc, #104]	; (803532c <HAL_RCC_OscConfig+0x288>)
 80352c2:	4313      	orrs	r3, r2
 80352c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80352c6:	f7f9 ff05 	bl	802f0d4 <HAL_GetTick>
 80352ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80352cc:	e008      	b.n	80352e0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80352ce:	f7f9 ff01 	bl	802f0d4 <HAL_GetTick>
 80352d2:	4602      	mov	r2, r0
 80352d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80352d6:	1ad3      	subs	r3, r2, r3
 80352d8:	2b02      	cmp	r3, #2
 80352da:	d901      	bls.n	80352e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80352dc:	2303      	movs	r3, #3
 80352de:	e308      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80352e0:	4b12      	ldr	r3, [pc, #72]	; (803532c <HAL_RCC_OscConfig+0x288>)
 80352e2:	681b      	ldr	r3, [r3, #0]
 80352e4:	f003 0304 	and.w	r3, r3, #4
 80352e8:	2b00      	cmp	r3, #0
 80352ea:	d0f0      	beq.n	80352ce <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80352ec:	f7f9 ff22 	bl	802f134 <HAL_GetREVID>
 80352f0:	4603      	mov	r3, r0
 80352f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80352f6:	4293      	cmp	r3, r2
 80352f8:	d81a      	bhi.n	8035330 <HAL_RCC_OscConfig+0x28c>
 80352fa:	687b      	ldr	r3, [r7, #4]
 80352fc:	691b      	ldr	r3, [r3, #16]
 80352fe:	2b40      	cmp	r3, #64	; 0x40
 8035300:	d108      	bne.n	8035314 <HAL_RCC_OscConfig+0x270>
 8035302:	4b0a      	ldr	r3, [pc, #40]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035304:	685b      	ldr	r3, [r3, #4]
 8035306:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 803530a:	4a08      	ldr	r2, [pc, #32]	; (803532c <HAL_RCC_OscConfig+0x288>)
 803530c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035310:	6053      	str	r3, [r2, #4]
 8035312:	e031      	b.n	8035378 <HAL_RCC_OscConfig+0x2d4>
 8035314:	4b05      	ldr	r3, [pc, #20]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035316:	685b      	ldr	r3, [r3, #4]
 8035318:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 803531c:	687b      	ldr	r3, [r7, #4]
 803531e:	691b      	ldr	r3, [r3, #16]
 8035320:	031b      	lsls	r3, r3, #12
 8035322:	4902      	ldr	r1, [pc, #8]	; (803532c <HAL_RCC_OscConfig+0x288>)
 8035324:	4313      	orrs	r3, r2
 8035326:	604b      	str	r3, [r1, #4]
 8035328:	e026      	b.n	8035378 <HAL_RCC_OscConfig+0x2d4>
 803532a:	bf00      	nop
 803532c:	58024400 	.word	0x58024400
 8035330:	4b9a      	ldr	r3, [pc, #616]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035332:	685b      	ldr	r3, [r3, #4]
 8035334:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8035338:	687b      	ldr	r3, [r7, #4]
 803533a:	691b      	ldr	r3, [r3, #16]
 803533c:	061b      	lsls	r3, r3, #24
 803533e:	4997      	ldr	r1, [pc, #604]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035340:	4313      	orrs	r3, r2
 8035342:	604b      	str	r3, [r1, #4]
 8035344:	e018      	b.n	8035378 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8035346:	4b95      	ldr	r3, [pc, #596]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035348:	681b      	ldr	r3, [r3, #0]
 803534a:	4a94      	ldr	r2, [pc, #592]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 803534c:	f023 0301 	bic.w	r3, r3, #1
 8035350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8035352:	f7f9 febf 	bl	802f0d4 <HAL_GetTick>
 8035356:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8035358:	e008      	b.n	803536c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 803535a:	f7f9 febb 	bl	802f0d4 <HAL_GetTick>
 803535e:	4602      	mov	r2, r0
 8035360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035362:	1ad3      	subs	r3, r2, r3
 8035364:	2b02      	cmp	r3, #2
 8035366:	d901      	bls.n	803536c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8035368:	2303      	movs	r3, #3
 803536a:	e2c2      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 803536c:	4b8b      	ldr	r3, [pc, #556]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 803536e:	681b      	ldr	r3, [r3, #0]
 8035370:	f003 0304 	and.w	r3, r3, #4
 8035374:	2b00      	cmp	r3, #0
 8035376:	d1f0      	bne.n	803535a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8035378:	687b      	ldr	r3, [r7, #4]
 803537a:	681b      	ldr	r3, [r3, #0]
 803537c:	f003 0310 	and.w	r3, r3, #16
 8035380:	2b00      	cmp	r3, #0
 8035382:	f000 80a9 	beq.w	80354d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8035386:	4b85      	ldr	r3, [pc, #532]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035388:	691b      	ldr	r3, [r3, #16]
 803538a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803538e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8035390:	4b82      	ldr	r3, [pc, #520]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035394:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8035396:	69bb      	ldr	r3, [r7, #24]
 8035398:	2b08      	cmp	r3, #8
 803539a:	d007      	beq.n	80353ac <HAL_RCC_OscConfig+0x308>
 803539c:	69bb      	ldr	r3, [r7, #24]
 803539e:	2b18      	cmp	r3, #24
 80353a0:	d13a      	bne.n	8035418 <HAL_RCC_OscConfig+0x374>
 80353a2:	697b      	ldr	r3, [r7, #20]
 80353a4:	f003 0303 	and.w	r3, r3, #3
 80353a8:	2b01      	cmp	r3, #1
 80353aa:	d135      	bne.n	8035418 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80353ac:	4b7b      	ldr	r3, [pc, #492]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 80353ae:	681b      	ldr	r3, [r3, #0]
 80353b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80353b4:	2b00      	cmp	r3, #0
 80353b6:	d005      	beq.n	80353c4 <HAL_RCC_OscConfig+0x320>
 80353b8:	687b      	ldr	r3, [r7, #4]
 80353ba:	69db      	ldr	r3, [r3, #28]
 80353bc:	2b80      	cmp	r3, #128	; 0x80
 80353be:	d001      	beq.n	80353c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80353c0:	2301      	movs	r3, #1
 80353c2:	e296      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80353c4:	f7f9 feb6 	bl	802f134 <HAL_GetREVID>
 80353c8:	4603      	mov	r3, r0
 80353ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80353ce:	4293      	cmp	r3, r2
 80353d0:	d817      	bhi.n	8035402 <HAL_RCC_OscConfig+0x35e>
 80353d2:	687b      	ldr	r3, [r7, #4]
 80353d4:	6a1b      	ldr	r3, [r3, #32]
 80353d6:	2b20      	cmp	r3, #32
 80353d8:	d108      	bne.n	80353ec <HAL_RCC_OscConfig+0x348>
 80353da:	4b70      	ldr	r3, [pc, #448]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 80353dc:	685b      	ldr	r3, [r3, #4]
 80353de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80353e2:	4a6e      	ldr	r2, [pc, #440]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 80353e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80353e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80353ea:	e075      	b.n	80354d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80353ec:	4b6b      	ldr	r3, [pc, #428]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 80353ee:	685b      	ldr	r3, [r3, #4]
 80353f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80353f4:	687b      	ldr	r3, [r7, #4]
 80353f6:	6a1b      	ldr	r3, [r3, #32]
 80353f8:	069b      	lsls	r3, r3, #26
 80353fa:	4968      	ldr	r1, [pc, #416]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 80353fc:	4313      	orrs	r3, r2
 80353fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8035400:	e06a      	b.n	80354d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8035402:	4b66      	ldr	r3, [pc, #408]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035404:	68db      	ldr	r3, [r3, #12]
 8035406:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 803540a:	687b      	ldr	r3, [r7, #4]
 803540c:	6a1b      	ldr	r3, [r3, #32]
 803540e:	061b      	lsls	r3, r3, #24
 8035410:	4962      	ldr	r1, [pc, #392]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035412:	4313      	orrs	r3, r2
 8035414:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8035416:	e05f      	b.n	80354d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8035418:	687b      	ldr	r3, [r7, #4]
 803541a:	69db      	ldr	r3, [r3, #28]
 803541c:	2b00      	cmp	r3, #0
 803541e:	d042      	beq.n	80354a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8035420:	4b5e      	ldr	r3, [pc, #376]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035422:	681b      	ldr	r3, [r3, #0]
 8035424:	4a5d      	ldr	r2, [pc, #372]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803542a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803542c:	f7f9 fe52 	bl	802f0d4 <HAL_GetTick>
 8035430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8035432:	e008      	b.n	8035446 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8035434:	f7f9 fe4e 	bl	802f0d4 <HAL_GetTick>
 8035438:	4602      	mov	r2, r0
 803543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803543c:	1ad3      	subs	r3, r2, r3
 803543e:	2b02      	cmp	r3, #2
 8035440:	d901      	bls.n	8035446 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8035442:	2303      	movs	r3, #3
 8035444:	e255      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8035446:	4b55      	ldr	r3, [pc, #340]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035448:	681b      	ldr	r3, [r3, #0]
 803544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803544e:	2b00      	cmp	r3, #0
 8035450:	d0f0      	beq.n	8035434 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8035452:	f7f9 fe6f 	bl	802f134 <HAL_GetREVID>
 8035456:	4603      	mov	r3, r0
 8035458:	f241 0203 	movw	r2, #4099	; 0x1003
 803545c:	4293      	cmp	r3, r2
 803545e:	d817      	bhi.n	8035490 <HAL_RCC_OscConfig+0x3ec>
 8035460:	687b      	ldr	r3, [r7, #4]
 8035462:	6a1b      	ldr	r3, [r3, #32]
 8035464:	2b20      	cmp	r3, #32
 8035466:	d108      	bne.n	803547a <HAL_RCC_OscConfig+0x3d6>
 8035468:	4b4c      	ldr	r3, [pc, #304]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 803546a:	685b      	ldr	r3, [r3, #4]
 803546c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8035470:	4a4a      	ldr	r2, [pc, #296]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035472:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8035476:	6053      	str	r3, [r2, #4]
 8035478:	e02e      	b.n	80354d8 <HAL_RCC_OscConfig+0x434>
 803547a:	4b48      	ldr	r3, [pc, #288]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 803547c:	685b      	ldr	r3, [r3, #4]
 803547e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8035482:	687b      	ldr	r3, [r7, #4]
 8035484:	6a1b      	ldr	r3, [r3, #32]
 8035486:	069b      	lsls	r3, r3, #26
 8035488:	4944      	ldr	r1, [pc, #272]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 803548a:	4313      	orrs	r3, r2
 803548c:	604b      	str	r3, [r1, #4]
 803548e:	e023      	b.n	80354d8 <HAL_RCC_OscConfig+0x434>
 8035490:	4b42      	ldr	r3, [pc, #264]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035492:	68db      	ldr	r3, [r3, #12]
 8035494:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8035498:	687b      	ldr	r3, [r7, #4]
 803549a:	6a1b      	ldr	r3, [r3, #32]
 803549c:	061b      	lsls	r3, r3, #24
 803549e:	493f      	ldr	r1, [pc, #252]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 80354a0:	4313      	orrs	r3, r2
 80354a2:	60cb      	str	r3, [r1, #12]
 80354a4:	e018      	b.n	80354d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80354a6:	4b3d      	ldr	r3, [pc, #244]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 80354a8:	681b      	ldr	r3, [r3, #0]
 80354aa:	4a3c      	ldr	r2, [pc, #240]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 80354ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80354b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80354b2:	f7f9 fe0f 	bl	802f0d4 <HAL_GetTick>
 80354b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80354b8:	e008      	b.n	80354cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80354ba:	f7f9 fe0b 	bl	802f0d4 <HAL_GetTick>
 80354be:	4602      	mov	r2, r0
 80354c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80354c2:	1ad3      	subs	r3, r2, r3
 80354c4:	2b02      	cmp	r3, #2
 80354c6:	d901      	bls.n	80354cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80354c8:	2303      	movs	r3, #3
 80354ca:	e212      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80354cc:	4b33      	ldr	r3, [pc, #204]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 80354ce:	681b      	ldr	r3, [r3, #0]
 80354d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80354d4:	2b00      	cmp	r3, #0
 80354d6:	d1f0      	bne.n	80354ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80354d8:	687b      	ldr	r3, [r7, #4]
 80354da:	681b      	ldr	r3, [r3, #0]
 80354dc:	f003 0308 	and.w	r3, r3, #8
 80354e0:	2b00      	cmp	r3, #0
 80354e2:	d036      	beq.n	8035552 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80354e4:	687b      	ldr	r3, [r7, #4]
 80354e6:	695b      	ldr	r3, [r3, #20]
 80354e8:	2b00      	cmp	r3, #0
 80354ea:	d019      	beq.n	8035520 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80354ec:	4b2b      	ldr	r3, [pc, #172]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 80354ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80354f0:	4a2a      	ldr	r2, [pc, #168]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 80354f2:	f043 0301 	orr.w	r3, r3, #1
 80354f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80354f8:	f7f9 fdec 	bl	802f0d4 <HAL_GetTick>
 80354fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80354fe:	e008      	b.n	8035512 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8035500:	f7f9 fde8 	bl	802f0d4 <HAL_GetTick>
 8035504:	4602      	mov	r2, r0
 8035506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035508:	1ad3      	subs	r3, r2, r3
 803550a:	2b02      	cmp	r3, #2
 803550c:	d901      	bls.n	8035512 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 803550e:	2303      	movs	r3, #3
 8035510:	e1ef      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8035512:	4b22      	ldr	r3, [pc, #136]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8035516:	f003 0302 	and.w	r3, r3, #2
 803551a:	2b00      	cmp	r3, #0
 803551c:	d0f0      	beq.n	8035500 <HAL_RCC_OscConfig+0x45c>
 803551e:	e018      	b.n	8035552 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8035520:	4b1e      	ldr	r3, [pc, #120]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8035524:	4a1d      	ldr	r2, [pc, #116]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035526:	f023 0301 	bic.w	r3, r3, #1
 803552a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 803552c:	f7f9 fdd2 	bl	802f0d4 <HAL_GetTick>
 8035530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8035532:	e008      	b.n	8035546 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8035534:	f7f9 fdce 	bl	802f0d4 <HAL_GetTick>
 8035538:	4602      	mov	r2, r0
 803553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803553c:	1ad3      	subs	r3, r2, r3
 803553e:	2b02      	cmp	r3, #2
 8035540:	d901      	bls.n	8035546 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8035542:	2303      	movs	r3, #3
 8035544:	e1d5      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8035546:	4b15      	ldr	r3, [pc, #84]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803554a:	f003 0302 	and.w	r3, r3, #2
 803554e:	2b00      	cmp	r3, #0
 8035550:	d1f0      	bne.n	8035534 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8035552:	687b      	ldr	r3, [r7, #4]
 8035554:	681b      	ldr	r3, [r3, #0]
 8035556:	f003 0320 	and.w	r3, r3, #32
 803555a:	2b00      	cmp	r3, #0
 803555c:	d039      	beq.n	80355d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 803555e:	687b      	ldr	r3, [r7, #4]
 8035560:	699b      	ldr	r3, [r3, #24]
 8035562:	2b00      	cmp	r3, #0
 8035564:	d01c      	beq.n	80355a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8035566:	4b0d      	ldr	r3, [pc, #52]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 8035568:	681b      	ldr	r3, [r3, #0]
 803556a:	4a0c      	ldr	r2, [pc, #48]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 803556c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8035570:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8035572:	f7f9 fdaf 	bl	802f0d4 <HAL_GetTick>
 8035576:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8035578:	e008      	b.n	803558c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 803557a:	f7f9 fdab 	bl	802f0d4 <HAL_GetTick>
 803557e:	4602      	mov	r2, r0
 8035580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035582:	1ad3      	subs	r3, r2, r3
 8035584:	2b02      	cmp	r3, #2
 8035586:	d901      	bls.n	803558c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8035588:	2303      	movs	r3, #3
 803558a:	e1b2      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 803558c:	4b03      	ldr	r3, [pc, #12]	; (803559c <HAL_RCC_OscConfig+0x4f8>)
 803558e:	681b      	ldr	r3, [r3, #0]
 8035590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8035594:	2b00      	cmp	r3, #0
 8035596:	d0f0      	beq.n	803557a <HAL_RCC_OscConfig+0x4d6>
 8035598:	e01b      	b.n	80355d2 <HAL_RCC_OscConfig+0x52e>
 803559a:	bf00      	nop
 803559c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80355a0:	4b9b      	ldr	r3, [pc, #620]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80355a2:	681b      	ldr	r3, [r3, #0]
 80355a4:	4a9a      	ldr	r2, [pc, #616]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80355a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80355aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80355ac:	f7f9 fd92 	bl	802f0d4 <HAL_GetTick>
 80355b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80355b2:	e008      	b.n	80355c6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80355b4:	f7f9 fd8e 	bl	802f0d4 <HAL_GetTick>
 80355b8:	4602      	mov	r2, r0
 80355ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80355bc:	1ad3      	subs	r3, r2, r3
 80355be:	2b02      	cmp	r3, #2
 80355c0:	d901      	bls.n	80355c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80355c2:	2303      	movs	r3, #3
 80355c4:	e195      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80355c6:	4b92      	ldr	r3, [pc, #584]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80355c8:	681b      	ldr	r3, [r3, #0]
 80355ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80355ce:	2b00      	cmp	r3, #0
 80355d0:	d1f0      	bne.n	80355b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80355d2:	687b      	ldr	r3, [r7, #4]
 80355d4:	681b      	ldr	r3, [r3, #0]
 80355d6:	f003 0304 	and.w	r3, r3, #4
 80355da:	2b00      	cmp	r3, #0
 80355dc:	f000 8081 	beq.w	80356e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80355e0:	4b8c      	ldr	r3, [pc, #560]	; (8035814 <HAL_RCC_OscConfig+0x770>)
 80355e2:	681b      	ldr	r3, [r3, #0]
 80355e4:	4a8b      	ldr	r2, [pc, #556]	; (8035814 <HAL_RCC_OscConfig+0x770>)
 80355e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80355ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80355ec:	f7f9 fd72 	bl	802f0d4 <HAL_GetTick>
 80355f0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80355f2:	e008      	b.n	8035606 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80355f4:	f7f9 fd6e 	bl	802f0d4 <HAL_GetTick>
 80355f8:	4602      	mov	r2, r0
 80355fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80355fc:	1ad3      	subs	r3, r2, r3
 80355fe:	2b64      	cmp	r3, #100	; 0x64
 8035600:	d901      	bls.n	8035606 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8035602:	2303      	movs	r3, #3
 8035604:	e175      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8035606:	4b83      	ldr	r3, [pc, #524]	; (8035814 <HAL_RCC_OscConfig+0x770>)
 8035608:	681b      	ldr	r3, [r3, #0]
 803560a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803560e:	2b00      	cmp	r3, #0
 8035610:	d0f0      	beq.n	80355f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8035612:	687b      	ldr	r3, [r7, #4]
 8035614:	689b      	ldr	r3, [r3, #8]
 8035616:	2b01      	cmp	r3, #1
 8035618:	d106      	bne.n	8035628 <HAL_RCC_OscConfig+0x584>
 803561a:	4b7d      	ldr	r3, [pc, #500]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 803561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803561e:	4a7c      	ldr	r2, [pc, #496]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035620:	f043 0301 	orr.w	r3, r3, #1
 8035624:	6713      	str	r3, [r2, #112]	; 0x70
 8035626:	e02d      	b.n	8035684 <HAL_RCC_OscConfig+0x5e0>
 8035628:	687b      	ldr	r3, [r7, #4]
 803562a:	689b      	ldr	r3, [r3, #8]
 803562c:	2b00      	cmp	r3, #0
 803562e:	d10c      	bne.n	803564a <HAL_RCC_OscConfig+0x5a6>
 8035630:	4b77      	ldr	r3, [pc, #476]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035634:	4a76      	ldr	r2, [pc, #472]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035636:	f023 0301 	bic.w	r3, r3, #1
 803563a:	6713      	str	r3, [r2, #112]	; 0x70
 803563c:	4b74      	ldr	r3, [pc, #464]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 803563e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035640:	4a73      	ldr	r2, [pc, #460]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035642:	f023 0304 	bic.w	r3, r3, #4
 8035646:	6713      	str	r3, [r2, #112]	; 0x70
 8035648:	e01c      	b.n	8035684 <HAL_RCC_OscConfig+0x5e0>
 803564a:	687b      	ldr	r3, [r7, #4]
 803564c:	689b      	ldr	r3, [r3, #8]
 803564e:	2b05      	cmp	r3, #5
 8035650:	d10c      	bne.n	803566c <HAL_RCC_OscConfig+0x5c8>
 8035652:	4b6f      	ldr	r3, [pc, #444]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035656:	4a6e      	ldr	r2, [pc, #440]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035658:	f043 0304 	orr.w	r3, r3, #4
 803565c:	6713      	str	r3, [r2, #112]	; 0x70
 803565e:	4b6c      	ldr	r3, [pc, #432]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035662:	4a6b      	ldr	r2, [pc, #428]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035664:	f043 0301 	orr.w	r3, r3, #1
 8035668:	6713      	str	r3, [r2, #112]	; 0x70
 803566a:	e00b      	b.n	8035684 <HAL_RCC_OscConfig+0x5e0>
 803566c:	4b68      	ldr	r3, [pc, #416]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 803566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035670:	4a67      	ldr	r2, [pc, #412]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035672:	f023 0301 	bic.w	r3, r3, #1
 8035676:	6713      	str	r3, [r2, #112]	; 0x70
 8035678:	4b65      	ldr	r3, [pc, #404]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 803567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803567c:	4a64      	ldr	r2, [pc, #400]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 803567e:	f023 0304 	bic.w	r3, r3, #4
 8035682:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8035684:	687b      	ldr	r3, [r7, #4]
 8035686:	689b      	ldr	r3, [r3, #8]
 8035688:	2b00      	cmp	r3, #0
 803568a:	d015      	beq.n	80356b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 803568c:	f7f9 fd22 	bl	802f0d4 <HAL_GetTick>
 8035690:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8035692:	e00a      	b.n	80356aa <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8035694:	f7f9 fd1e 	bl	802f0d4 <HAL_GetTick>
 8035698:	4602      	mov	r2, r0
 803569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803569c:	1ad3      	subs	r3, r2, r3
 803569e:	f241 3288 	movw	r2, #5000	; 0x1388
 80356a2:	4293      	cmp	r3, r2
 80356a4:	d901      	bls.n	80356aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80356a6:	2303      	movs	r3, #3
 80356a8:	e123      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80356aa:	4b59      	ldr	r3, [pc, #356]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80356ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80356ae:	f003 0302 	and.w	r3, r3, #2
 80356b2:	2b00      	cmp	r3, #0
 80356b4:	d0ee      	beq.n	8035694 <HAL_RCC_OscConfig+0x5f0>
 80356b6:	e014      	b.n	80356e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80356b8:	f7f9 fd0c 	bl	802f0d4 <HAL_GetTick>
 80356bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80356be:	e00a      	b.n	80356d6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80356c0:	f7f9 fd08 	bl	802f0d4 <HAL_GetTick>
 80356c4:	4602      	mov	r2, r0
 80356c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80356c8:	1ad3      	subs	r3, r2, r3
 80356ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80356ce:	4293      	cmp	r3, r2
 80356d0:	d901      	bls.n	80356d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80356d2:	2303      	movs	r3, #3
 80356d4:	e10d      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80356d6:	4b4e      	ldr	r3, [pc, #312]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80356d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80356da:	f003 0302 	and.w	r3, r3, #2
 80356de:	2b00      	cmp	r3, #0
 80356e0:	d1ee      	bne.n	80356c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80356e2:	687b      	ldr	r3, [r7, #4]
 80356e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80356e6:	2b00      	cmp	r3, #0
 80356e8:	f000 8102 	beq.w	80358f0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80356ec:	4b48      	ldr	r3, [pc, #288]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80356ee:	691b      	ldr	r3, [r3, #16]
 80356f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80356f4:	2b18      	cmp	r3, #24
 80356f6:	f000 80bd 	beq.w	8035874 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80356fa:	687b      	ldr	r3, [r7, #4]
 80356fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80356fe:	2b02      	cmp	r3, #2
 8035700:	f040 809e 	bne.w	8035840 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8035704:	4b42      	ldr	r3, [pc, #264]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035706:	681b      	ldr	r3, [r3, #0]
 8035708:	4a41      	ldr	r2, [pc, #260]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 803570a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 803570e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8035710:	f7f9 fce0 	bl	802f0d4 <HAL_GetTick>
 8035714:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8035716:	e008      	b.n	803572a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8035718:	f7f9 fcdc 	bl	802f0d4 <HAL_GetTick>
 803571c:	4602      	mov	r2, r0
 803571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035720:	1ad3      	subs	r3, r2, r3
 8035722:	2b02      	cmp	r3, #2
 8035724:	d901      	bls.n	803572a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8035726:	2303      	movs	r3, #3
 8035728:	e0e3      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 803572a:	4b39      	ldr	r3, [pc, #228]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 803572c:	681b      	ldr	r3, [r3, #0]
 803572e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8035732:	2b00      	cmp	r3, #0
 8035734:	d1f0      	bne.n	8035718 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8035736:	4b36      	ldr	r3, [pc, #216]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 803573a:	4b37      	ldr	r3, [pc, #220]	; (8035818 <HAL_RCC_OscConfig+0x774>)
 803573c:	4013      	ands	r3, r2
 803573e:	687a      	ldr	r2, [r7, #4]
 8035740:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8035742:	687a      	ldr	r2, [r7, #4]
 8035744:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8035746:	0112      	lsls	r2, r2, #4
 8035748:	430a      	orrs	r2, r1
 803574a:	4931      	ldr	r1, [pc, #196]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 803574c:	4313      	orrs	r3, r2
 803574e:	628b      	str	r3, [r1, #40]	; 0x28
 8035750:	687b      	ldr	r3, [r7, #4]
 8035752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035754:	3b01      	subs	r3, #1
 8035756:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803575a:	687b      	ldr	r3, [r7, #4]
 803575c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803575e:	3b01      	subs	r3, #1
 8035760:	025b      	lsls	r3, r3, #9
 8035762:	b29b      	uxth	r3, r3
 8035764:	431a      	orrs	r2, r3
 8035766:	687b      	ldr	r3, [r7, #4]
 8035768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803576a:	3b01      	subs	r3, #1
 803576c:	041b      	lsls	r3, r3, #16
 803576e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8035772:	431a      	orrs	r2, r3
 8035774:	687b      	ldr	r3, [r7, #4]
 8035776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8035778:	3b01      	subs	r3, #1
 803577a:	061b      	lsls	r3, r3, #24
 803577c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8035780:	4923      	ldr	r1, [pc, #140]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035782:	4313      	orrs	r3, r2
 8035784:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8035786:	4b22      	ldr	r3, [pc, #136]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803578a:	4a21      	ldr	r2, [pc, #132]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 803578c:	f023 0301 	bic.w	r3, r3, #1
 8035790:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8035792:	4b1f      	ldr	r3, [pc, #124]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8035796:	4b21      	ldr	r3, [pc, #132]	; (803581c <HAL_RCC_OscConfig+0x778>)
 8035798:	4013      	ands	r3, r2
 803579a:	687a      	ldr	r2, [r7, #4]
 803579c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 803579e:	00d2      	lsls	r2, r2, #3
 80357a0:	491b      	ldr	r1, [pc, #108]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357a2:	4313      	orrs	r3, r2
 80357a4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80357a6:	4b1a      	ldr	r3, [pc, #104]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80357aa:	f023 020c 	bic.w	r2, r3, #12
 80357ae:	687b      	ldr	r3, [r7, #4]
 80357b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80357b2:	4917      	ldr	r1, [pc, #92]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357b4:	4313      	orrs	r3, r2
 80357b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80357b8:	4b15      	ldr	r3, [pc, #84]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80357bc:	f023 0202 	bic.w	r2, r3, #2
 80357c0:	687b      	ldr	r3, [r7, #4]
 80357c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80357c4:	4912      	ldr	r1, [pc, #72]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357c6:	4313      	orrs	r3, r2
 80357c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80357ca:	4b11      	ldr	r3, [pc, #68]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80357ce:	4a10      	ldr	r2, [pc, #64]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80357d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80357d6:	4b0e      	ldr	r3, [pc, #56]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80357da:	4a0d      	ldr	r2, [pc, #52]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80357e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80357e2:	4b0b      	ldr	r3, [pc, #44]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80357e6:	4a0a      	ldr	r2, [pc, #40]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80357ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80357ee:	4b08      	ldr	r3, [pc, #32]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80357f2:	4a07      	ldr	r2, [pc, #28]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357f4:	f043 0301 	orr.w	r3, r3, #1
 80357f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80357fa:	4b05      	ldr	r3, [pc, #20]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 80357fc:	681b      	ldr	r3, [r3, #0]
 80357fe:	4a04      	ldr	r2, [pc, #16]	; (8035810 <HAL_RCC_OscConfig+0x76c>)
 8035800:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8035804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8035806:	f7f9 fc65 	bl	802f0d4 <HAL_GetTick>
 803580a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 803580c:	e011      	b.n	8035832 <HAL_RCC_OscConfig+0x78e>
 803580e:	bf00      	nop
 8035810:	58024400 	.word	0x58024400
 8035814:	58024800 	.word	0x58024800
 8035818:	fffffc0c 	.word	0xfffffc0c
 803581c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8035820:	f7f9 fc58 	bl	802f0d4 <HAL_GetTick>
 8035824:	4602      	mov	r2, r0
 8035826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035828:	1ad3      	subs	r3, r2, r3
 803582a:	2b02      	cmp	r3, #2
 803582c:	d901      	bls.n	8035832 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 803582e:	2303      	movs	r3, #3
 8035830:	e05f      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8035832:	4b32      	ldr	r3, [pc, #200]	; (80358fc <HAL_RCC_OscConfig+0x858>)
 8035834:	681b      	ldr	r3, [r3, #0]
 8035836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 803583a:	2b00      	cmp	r3, #0
 803583c:	d0f0      	beq.n	8035820 <HAL_RCC_OscConfig+0x77c>
 803583e:	e057      	b.n	80358f0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8035840:	4b2e      	ldr	r3, [pc, #184]	; (80358fc <HAL_RCC_OscConfig+0x858>)
 8035842:	681b      	ldr	r3, [r3, #0]
 8035844:	4a2d      	ldr	r2, [pc, #180]	; (80358fc <HAL_RCC_OscConfig+0x858>)
 8035846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 803584a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803584c:	f7f9 fc42 	bl	802f0d4 <HAL_GetTick>
 8035850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8035852:	e008      	b.n	8035866 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8035854:	f7f9 fc3e 	bl	802f0d4 <HAL_GetTick>
 8035858:	4602      	mov	r2, r0
 803585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803585c:	1ad3      	subs	r3, r2, r3
 803585e:	2b02      	cmp	r3, #2
 8035860:	d901      	bls.n	8035866 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8035862:	2303      	movs	r3, #3
 8035864:	e045      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8035866:	4b25      	ldr	r3, [pc, #148]	; (80358fc <HAL_RCC_OscConfig+0x858>)
 8035868:	681b      	ldr	r3, [r3, #0]
 803586a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 803586e:	2b00      	cmp	r3, #0
 8035870:	d1f0      	bne.n	8035854 <HAL_RCC_OscConfig+0x7b0>
 8035872:	e03d      	b.n	80358f0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8035874:	4b21      	ldr	r3, [pc, #132]	; (80358fc <HAL_RCC_OscConfig+0x858>)
 8035876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035878:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 803587a:	4b20      	ldr	r3, [pc, #128]	; (80358fc <HAL_RCC_OscConfig+0x858>)
 803587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803587e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8035880:	687b      	ldr	r3, [r7, #4]
 8035882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035884:	2b01      	cmp	r3, #1
 8035886:	d031      	beq.n	80358ec <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8035888:	693b      	ldr	r3, [r7, #16]
 803588a:	f003 0203 	and.w	r2, r3, #3
 803588e:	687b      	ldr	r3, [r7, #4]
 8035890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8035892:	429a      	cmp	r2, r3
 8035894:	d12a      	bne.n	80358ec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8035896:	693b      	ldr	r3, [r7, #16]
 8035898:	091b      	lsrs	r3, r3, #4
 803589a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 803589e:	687b      	ldr	r3, [r7, #4]
 80358a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80358a2:	429a      	cmp	r2, r3
 80358a4:	d122      	bne.n	80358ec <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80358a6:	68fb      	ldr	r3, [r7, #12]
 80358a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80358ac:	687b      	ldr	r3, [r7, #4]
 80358ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80358b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80358b2:	429a      	cmp	r2, r3
 80358b4:	d11a      	bne.n	80358ec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80358b6:	68fb      	ldr	r3, [r7, #12]
 80358b8:	0a5b      	lsrs	r3, r3, #9
 80358ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80358be:	687b      	ldr	r3, [r7, #4]
 80358c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80358c2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80358c4:	429a      	cmp	r2, r3
 80358c6:	d111      	bne.n	80358ec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80358c8:	68fb      	ldr	r3, [r7, #12]
 80358ca:	0c1b      	lsrs	r3, r3, #16
 80358cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80358d0:	687b      	ldr	r3, [r7, #4]
 80358d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80358d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80358d6:	429a      	cmp	r2, r3
 80358d8:	d108      	bne.n	80358ec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80358da:	68fb      	ldr	r3, [r7, #12]
 80358dc:	0e1b      	lsrs	r3, r3, #24
 80358de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80358e2:	687b      	ldr	r3, [r7, #4]
 80358e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80358e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80358e8:	429a      	cmp	r2, r3
 80358ea:	d001      	beq.n	80358f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80358ec:	2301      	movs	r3, #1
 80358ee:	e000      	b.n	80358f2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80358f0:	2300      	movs	r3, #0
}
 80358f2:	4618      	mov	r0, r3
 80358f4:	3730      	adds	r7, #48	; 0x30
 80358f6:	46bd      	mov	sp, r7
 80358f8:	bd80      	pop	{r7, pc}
 80358fa:	bf00      	nop
 80358fc:	58024400 	.word	0x58024400

08035900 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8035900:	b580      	push	{r7, lr}
 8035902:	b086      	sub	sp, #24
 8035904:	af00      	add	r7, sp, #0
 8035906:	6078      	str	r0, [r7, #4]
 8035908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 803590a:	687b      	ldr	r3, [r7, #4]
 803590c:	2b00      	cmp	r3, #0
 803590e:	d101      	bne.n	8035914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8035910:	2301      	movs	r3, #1
 8035912:	e19c      	b.n	8035c4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8035914:	4b8a      	ldr	r3, [pc, #552]	; (8035b40 <HAL_RCC_ClockConfig+0x240>)
 8035916:	681b      	ldr	r3, [r3, #0]
 8035918:	f003 030f 	and.w	r3, r3, #15
 803591c:	683a      	ldr	r2, [r7, #0]
 803591e:	429a      	cmp	r2, r3
 8035920:	d910      	bls.n	8035944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8035922:	4b87      	ldr	r3, [pc, #540]	; (8035b40 <HAL_RCC_ClockConfig+0x240>)
 8035924:	681b      	ldr	r3, [r3, #0]
 8035926:	f023 020f 	bic.w	r2, r3, #15
 803592a:	4985      	ldr	r1, [pc, #532]	; (8035b40 <HAL_RCC_ClockConfig+0x240>)
 803592c:	683b      	ldr	r3, [r7, #0]
 803592e:	4313      	orrs	r3, r2
 8035930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8035932:	4b83      	ldr	r3, [pc, #524]	; (8035b40 <HAL_RCC_ClockConfig+0x240>)
 8035934:	681b      	ldr	r3, [r3, #0]
 8035936:	f003 030f 	and.w	r3, r3, #15
 803593a:	683a      	ldr	r2, [r7, #0]
 803593c:	429a      	cmp	r2, r3
 803593e:	d001      	beq.n	8035944 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8035940:	2301      	movs	r3, #1
 8035942:	e184      	b.n	8035c4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8035944:	687b      	ldr	r3, [r7, #4]
 8035946:	681b      	ldr	r3, [r3, #0]
 8035948:	f003 0304 	and.w	r3, r3, #4
 803594c:	2b00      	cmp	r3, #0
 803594e:	d010      	beq.n	8035972 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8035950:	687b      	ldr	r3, [r7, #4]
 8035952:	691a      	ldr	r2, [r3, #16]
 8035954:	4b7b      	ldr	r3, [pc, #492]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035956:	699b      	ldr	r3, [r3, #24]
 8035958:	f003 0370 	and.w	r3, r3, #112	; 0x70
 803595c:	429a      	cmp	r2, r3
 803595e:	d908      	bls.n	8035972 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8035960:	4b78      	ldr	r3, [pc, #480]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035962:	699b      	ldr	r3, [r3, #24]
 8035964:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8035968:	687b      	ldr	r3, [r7, #4]
 803596a:	691b      	ldr	r3, [r3, #16]
 803596c:	4975      	ldr	r1, [pc, #468]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 803596e:	4313      	orrs	r3, r2
 8035970:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8035972:	687b      	ldr	r3, [r7, #4]
 8035974:	681b      	ldr	r3, [r3, #0]
 8035976:	f003 0308 	and.w	r3, r3, #8
 803597a:	2b00      	cmp	r3, #0
 803597c:	d010      	beq.n	80359a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 803597e:	687b      	ldr	r3, [r7, #4]
 8035980:	695a      	ldr	r2, [r3, #20]
 8035982:	4b70      	ldr	r3, [pc, #448]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035984:	69db      	ldr	r3, [r3, #28]
 8035986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 803598a:	429a      	cmp	r2, r3
 803598c:	d908      	bls.n	80359a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 803598e:	4b6d      	ldr	r3, [pc, #436]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035990:	69db      	ldr	r3, [r3, #28]
 8035992:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8035996:	687b      	ldr	r3, [r7, #4]
 8035998:	695b      	ldr	r3, [r3, #20]
 803599a:	496a      	ldr	r1, [pc, #424]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 803599c:	4313      	orrs	r3, r2
 803599e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80359a0:	687b      	ldr	r3, [r7, #4]
 80359a2:	681b      	ldr	r3, [r3, #0]
 80359a4:	f003 0310 	and.w	r3, r3, #16
 80359a8:	2b00      	cmp	r3, #0
 80359aa:	d010      	beq.n	80359ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80359ac:	687b      	ldr	r3, [r7, #4]
 80359ae:	699a      	ldr	r2, [r3, #24]
 80359b0:	4b64      	ldr	r3, [pc, #400]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 80359b2:	69db      	ldr	r3, [r3, #28]
 80359b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80359b8:	429a      	cmp	r2, r3
 80359ba:	d908      	bls.n	80359ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80359bc:	4b61      	ldr	r3, [pc, #388]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 80359be:	69db      	ldr	r3, [r3, #28]
 80359c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80359c4:	687b      	ldr	r3, [r7, #4]
 80359c6:	699b      	ldr	r3, [r3, #24]
 80359c8:	495e      	ldr	r1, [pc, #376]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 80359ca:	4313      	orrs	r3, r2
 80359cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80359ce:	687b      	ldr	r3, [r7, #4]
 80359d0:	681b      	ldr	r3, [r3, #0]
 80359d2:	f003 0320 	and.w	r3, r3, #32
 80359d6:	2b00      	cmp	r3, #0
 80359d8:	d010      	beq.n	80359fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80359da:	687b      	ldr	r3, [r7, #4]
 80359dc:	69da      	ldr	r2, [r3, #28]
 80359de:	4b59      	ldr	r3, [pc, #356]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 80359e0:	6a1b      	ldr	r3, [r3, #32]
 80359e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80359e6:	429a      	cmp	r2, r3
 80359e8:	d908      	bls.n	80359fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80359ea:	4b56      	ldr	r3, [pc, #344]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 80359ec:	6a1b      	ldr	r3, [r3, #32]
 80359ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80359f2:	687b      	ldr	r3, [r7, #4]
 80359f4:	69db      	ldr	r3, [r3, #28]
 80359f6:	4953      	ldr	r1, [pc, #332]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 80359f8:	4313      	orrs	r3, r2
 80359fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80359fc:	687b      	ldr	r3, [r7, #4]
 80359fe:	681b      	ldr	r3, [r3, #0]
 8035a00:	f003 0302 	and.w	r3, r3, #2
 8035a04:	2b00      	cmp	r3, #0
 8035a06:	d010      	beq.n	8035a2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8035a08:	687b      	ldr	r3, [r7, #4]
 8035a0a:	68da      	ldr	r2, [r3, #12]
 8035a0c:	4b4d      	ldr	r3, [pc, #308]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035a0e:	699b      	ldr	r3, [r3, #24]
 8035a10:	f003 030f 	and.w	r3, r3, #15
 8035a14:	429a      	cmp	r2, r3
 8035a16:	d908      	bls.n	8035a2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8035a18:	4b4a      	ldr	r3, [pc, #296]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035a1a:	699b      	ldr	r3, [r3, #24]
 8035a1c:	f023 020f 	bic.w	r2, r3, #15
 8035a20:	687b      	ldr	r3, [r7, #4]
 8035a22:	68db      	ldr	r3, [r3, #12]
 8035a24:	4947      	ldr	r1, [pc, #284]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035a26:	4313      	orrs	r3, r2
 8035a28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8035a2a:	687b      	ldr	r3, [r7, #4]
 8035a2c:	681b      	ldr	r3, [r3, #0]
 8035a2e:	f003 0301 	and.w	r3, r3, #1
 8035a32:	2b00      	cmp	r3, #0
 8035a34:	d055      	beq.n	8035ae2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8035a36:	4b43      	ldr	r3, [pc, #268]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035a38:	699b      	ldr	r3, [r3, #24]
 8035a3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8035a3e:	687b      	ldr	r3, [r7, #4]
 8035a40:	689b      	ldr	r3, [r3, #8]
 8035a42:	4940      	ldr	r1, [pc, #256]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035a44:	4313      	orrs	r3, r2
 8035a46:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8035a48:	687b      	ldr	r3, [r7, #4]
 8035a4a:	685b      	ldr	r3, [r3, #4]
 8035a4c:	2b02      	cmp	r3, #2
 8035a4e:	d107      	bne.n	8035a60 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8035a50:	4b3c      	ldr	r3, [pc, #240]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035a52:	681b      	ldr	r3, [r3, #0]
 8035a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8035a58:	2b00      	cmp	r3, #0
 8035a5a:	d121      	bne.n	8035aa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8035a5c:	2301      	movs	r3, #1
 8035a5e:	e0f6      	b.n	8035c4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8035a60:	687b      	ldr	r3, [r7, #4]
 8035a62:	685b      	ldr	r3, [r3, #4]
 8035a64:	2b03      	cmp	r3, #3
 8035a66:	d107      	bne.n	8035a78 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8035a68:	4b36      	ldr	r3, [pc, #216]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035a6a:	681b      	ldr	r3, [r3, #0]
 8035a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8035a70:	2b00      	cmp	r3, #0
 8035a72:	d115      	bne.n	8035aa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8035a74:	2301      	movs	r3, #1
 8035a76:	e0ea      	b.n	8035c4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8035a78:	687b      	ldr	r3, [r7, #4]
 8035a7a:	685b      	ldr	r3, [r3, #4]
 8035a7c:	2b01      	cmp	r3, #1
 8035a7e:	d107      	bne.n	8035a90 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8035a80:	4b30      	ldr	r3, [pc, #192]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035a82:	681b      	ldr	r3, [r3, #0]
 8035a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8035a88:	2b00      	cmp	r3, #0
 8035a8a:	d109      	bne.n	8035aa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8035a8c:	2301      	movs	r3, #1
 8035a8e:	e0de      	b.n	8035c4e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8035a90:	4b2c      	ldr	r3, [pc, #176]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035a92:	681b      	ldr	r3, [r3, #0]
 8035a94:	f003 0304 	and.w	r3, r3, #4
 8035a98:	2b00      	cmp	r3, #0
 8035a9a:	d101      	bne.n	8035aa0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8035a9c:	2301      	movs	r3, #1
 8035a9e:	e0d6      	b.n	8035c4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8035aa0:	4b28      	ldr	r3, [pc, #160]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035aa2:	691b      	ldr	r3, [r3, #16]
 8035aa4:	f023 0207 	bic.w	r2, r3, #7
 8035aa8:	687b      	ldr	r3, [r7, #4]
 8035aaa:	685b      	ldr	r3, [r3, #4]
 8035aac:	4925      	ldr	r1, [pc, #148]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035aae:	4313      	orrs	r3, r2
 8035ab0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8035ab2:	f7f9 fb0f 	bl	802f0d4 <HAL_GetTick>
 8035ab6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8035ab8:	e00a      	b.n	8035ad0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8035aba:	f7f9 fb0b 	bl	802f0d4 <HAL_GetTick>
 8035abe:	4602      	mov	r2, r0
 8035ac0:	697b      	ldr	r3, [r7, #20]
 8035ac2:	1ad3      	subs	r3, r2, r3
 8035ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8035ac8:	4293      	cmp	r3, r2
 8035aca:	d901      	bls.n	8035ad0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8035acc:	2303      	movs	r3, #3
 8035ace:	e0be      	b.n	8035c4e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8035ad0:	4b1c      	ldr	r3, [pc, #112]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035ad2:	691b      	ldr	r3, [r3, #16]
 8035ad4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8035ad8:	687b      	ldr	r3, [r7, #4]
 8035ada:	685b      	ldr	r3, [r3, #4]
 8035adc:	00db      	lsls	r3, r3, #3
 8035ade:	429a      	cmp	r2, r3
 8035ae0:	d1eb      	bne.n	8035aba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8035ae2:	687b      	ldr	r3, [r7, #4]
 8035ae4:	681b      	ldr	r3, [r3, #0]
 8035ae6:	f003 0302 	and.w	r3, r3, #2
 8035aea:	2b00      	cmp	r3, #0
 8035aec:	d010      	beq.n	8035b10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8035aee:	687b      	ldr	r3, [r7, #4]
 8035af0:	68da      	ldr	r2, [r3, #12]
 8035af2:	4b14      	ldr	r3, [pc, #80]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035af4:	699b      	ldr	r3, [r3, #24]
 8035af6:	f003 030f 	and.w	r3, r3, #15
 8035afa:	429a      	cmp	r2, r3
 8035afc:	d208      	bcs.n	8035b10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8035afe:	4b11      	ldr	r3, [pc, #68]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035b00:	699b      	ldr	r3, [r3, #24]
 8035b02:	f023 020f 	bic.w	r2, r3, #15
 8035b06:	687b      	ldr	r3, [r7, #4]
 8035b08:	68db      	ldr	r3, [r3, #12]
 8035b0a:	490e      	ldr	r1, [pc, #56]	; (8035b44 <HAL_RCC_ClockConfig+0x244>)
 8035b0c:	4313      	orrs	r3, r2
 8035b0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8035b10:	4b0b      	ldr	r3, [pc, #44]	; (8035b40 <HAL_RCC_ClockConfig+0x240>)
 8035b12:	681b      	ldr	r3, [r3, #0]
 8035b14:	f003 030f 	and.w	r3, r3, #15
 8035b18:	683a      	ldr	r2, [r7, #0]
 8035b1a:	429a      	cmp	r2, r3
 8035b1c:	d214      	bcs.n	8035b48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8035b1e:	4b08      	ldr	r3, [pc, #32]	; (8035b40 <HAL_RCC_ClockConfig+0x240>)
 8035b20:	681b      	ldr	r3, [r3, #0]
 8035b22:	f023 020f 	bic.w	r2, r3, #15
 8035b26:	4906      	ldr	r1, [pc, #24]	; (8035b40 <HAL_RCC_ClockConfig+0x240>)
 8035b28:	683b      	ldr	r3, [r7, #0]
 8035b2a:	4313      	orrs	r3, r2
 8035b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8035b2e:	4b04      	ldr	r3, [pc, #16]	; (8035b40 <HAL_RCC_ClockConfig+0x240>)
 8035b30:	681b      	ldr	r3, [r3, #0]
 8035b32:	f003 030f 	and.w	r3, r3, #15
 8035b36:	683a      	ldr	r2, [r7, #0]
 8035b38:	429a      	cmp	r2, r3
 8035b3a:	d005      	beq.n	8035b48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8035b3c:	2301      	movs	r3, #1
 8035b3e:	e086      	b.n	8035c4e <HAL_RCC_ClockConfig+0x34e>
 8035b40:	52002000 	.word	0x52002000
 8035b44:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8035b48:	687b      	ldr	r3, [r7, #4]
 8035b4a:	681b      	ldr	r3, [r3, #0]
 8035b4c:	f003 0304 	and.w	r3, r3, #4
 8035b50:	2b00      	cmp	r3, #0
 8035b52:	d010      	beq.n	8035b76 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8035b54:	687b      	ldr	r3, [r7, #4]
 8035b56:	691a      	ldr	r2, [r3, #16]
 8035b58:	4b3f      	ldr	r3, [pc, #252]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035b5a:	699b      	ldr	r3, [r3, #24]
 8035b5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8035b60:	429a      	cmp	r2, r3
 8035b62:	d208      	bcs.n	8035b76 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8035b64:	4b3c      	ldr	r3, [pc, #240]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035b66:	699b      	ldr	r3, [r3, #24]
 8035b68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8035b6c:	687b      	ldr	r3, [r7, #4]
 8035b6e:	691b      	ldr	r3, [r3, #16]
 8035b70:	4939      	ldr	r1, [pc, #228]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035b72:	4313      	orrs	r3, r2
 8035b74:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8035b76:	687b      	ldr	r3, [r7, #4]
 8035b78:	681b      	ldr	r3, [r3, #0]
 8035b7a:	f003 0308 	and.w	r3, r3, #8
 8035b7e:	2b00      	cmp	r3, #0
 8035b80:	d010      	beq.n	8035ba4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8035b82:	687b      	ldr	r3, [r7, #4]
 8035b84:	695a      	ldr	r2, [r3, #20]
 8035b86:	4b34      	ldr	r3, [pc, #208]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035b88:	69db      	ldr	r3, [r3, #28]
 8035b8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8035b8e:	429a      	cmp	r2, r3
 8035b90:	d208      	bcs.n	8035ba4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8035b92:	4b31      	ldr	r3, [pc, #196]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035b94:	69db      	ldr	r3, [r3, #28]
 8035b96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8035b9a:	687b      	ldr	r3, [r7, #4]
 8035b9c:	695b      	ldr	r3, [r3, #20]
 8035b9e:	492e      	ldr	r1, [pc, #184]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035ba0:	4313      	orrs	r3, r2
 8035ba2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8035ba4:	687b      	ldr	r3, [r7, #4]
 8035ba6:	681b      	ldr	r3, [r3, #0]
 8035ba8:	f003 0310 	and.w	r3, r3, #16
 8035bac:	2b00      	cmp	r3, #0
 8035bae:	d010      	beq.n	8035bd2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8035bb0:	687b      	ldr	r3, [r7, #4]
 8035bb2:	699a      	ldr	r2, [r3, #24]
 8035bb4:	4b28      	ldr	r3, [pc, #160]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035bb6:	69db      	ldr	r3, [r3, #28]
 8035bb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8035bbc:	429a      	cmp	r2, r3
 8035bbe:	d208      	bcs.n	8035bd2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8035bc0:	4b25      	ldr	r3, [pc, #148]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035bc2:	69db      	ldr	r3, [r3, #28]
 8035bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8035bc8:	687b      	ldr	r3, [r7, #4]
 8035bca:	699b      	ldr	r3, [r3, #24]
 8035bcc:	4922      	ldr	r1, [pc, #136]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035bce:	4313      	orrs	r3, r2
 8035bd0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8035bd2:	687b      	ldr	r3, [r7, #4]
 8035bd4:	681b      	ldr	r3, [r3, #0]
 8035bd6:	f003 0320 	and.w	r3, r3, #32
 8035bda:	2b00      	cmp	r3, #0
 8035bdc:	d010      	beq.n	8035c00 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8035bde:	687b      	ldr	r3, [r7, #4]
 8035be0:	69da      	ldr	r2, [r3, #28]
 8035be2:	4b1d      	ldr	r3, [pc, #116]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035be4:	6a1b      	ldr	r3, [r3, #32]
 8035be6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8035bea:	429a      	cmp	r2, r3
 8035bec:	d208      	bcs.n	8035c00 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8035bee:	4b1a      	ldr	r3, [pc, #104]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035bf0:	6a1b      	ldr	r3, [r3, #32]
 8035bf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8035bf6:	687b      	ldr	r3, [r7, #4]
 8035bf8:	69db      	ldr	r3, [r3, #28]
 8035bfa:	4917      	ldr	r1, [pc, #92]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035bfc:	4313      	orrs	r3, r2
 8035bfe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8035c00:	f000 f834 	bl	8035c6c <HAL_RCC_GetSysClockFreq>
 8035c04:	4602      	mov	r2, r0
 8035c06:	4b14      	ldr	r3, [pc, #80]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035c08:	699b      	ldr	r3, [r3, #24]
 8035c0a:	0a1b      	lsrs	r3, r3, #8
 8035c0c:	f003 030f 	and.w	r3, r3, #15
 8035c10:	4912      	ldr	r1, [pc, #72]	; (8035c5c <HAL_RCC_ClockConfig+0x35c>)
 8035c12:	5ccb      	ldrb	r3, [r1, r3]
 8035c14:	f003 031f 	and.w	r3, r3, #31
 8035c18:	fa22 f303 	lsr.w	r3, r2, r3
 8035c1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8035c1e:	4b0e      	ldr	r3, [pc, #56]	; (8035c58 <HAL_RCC_ClockConfig+0x358>)
 8035c20:	699b      	ldr	r3, [r3, #24]
 8035c22:	f003 030f 	and.w	r3, r3, #15
 8035c26:	4a0d      	ldr	r2, [pc, #52]	; (8035c5c <HAL_RCC_ClockConfig+0x35c>)
 8035c28:	5cd3      	ldrb	r3, [r2, r3]
 8035c2a:	f003 031f 	and.w	r3, r3, #31
 8035c2e:	693a      	ldr	r2, [r7, #16]
 8035c30:	fa22 f303 	lsr.w	r3, r2, r3
 8035c34:	4a0a      	ldr	r2, [pc, #40]	; (8035c60 <HAL_RCC_ClockConfig+0x360>)
 8035c36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8035c38:	4a0a      	ldr	r2, [pc, #40]	; (8035c64 <HAL_RCC_ClockConfig+0x364>)
 8035c3a:	693b      	ldr	r3, [r7, #16]
 8035c3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8035c3e:	4b0a      	ldr	r3, [pc, #40]	; (8035c68 <HAL_RCC_ClockConfig+0x368>)
 8035c40:	681b      	ldr	r3, [r3, #0]
 8035c42:	4618      	mov	r0, r3
 8035c44:	f7f9 f9fc 	bl	802f040 <HAL_InitTick>
 8035c48:	4603      	mov	r3, r0
 8035c4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8035c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8035c4e:	4618      	mov	r0, r3
 8035c50:	3718      	adds	r7, #24
 8035c52:	46bd      	mov	sp, r7
 8035c54:	bd80      	pop	{r7, pc}
 8035c56:	bf00      	nop
 8035c58:	58024400 	.word	0x58024400
 8035c5c:	0805c614 	.word	0x0805c614
 8035c60:	24000008 	.word	0x24000008
 8035c64:	24000004 	.word	0x24000004
 8035c68:	2400000c 	.word	0x2400000c

08035c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8035c6c:	b480      	push	{r7}
 8035c6e:	b089      	sub	sp, #36	; 0x24
 8035c70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8035c72:	4bb3      	ldr	r3, [pc, #716]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035c74:	691b      	ldr	r3, [r3, #16]
 8035c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8035c7a:	2b18      	cmp	r3, #24
 8035c7c:	f200 8155 	bhi.w	8035f2a <HAL_RCC_GetSysClockFreq+0x2be>
 8035c80:	a201      	add	r2, pc, #4	; (adr r2, 8035c88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8035c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035c86:	bf00      	nop
 8035c88:	08035ced 	.word	0x08035ced
 8035c8c:	08035f2b 	.word	0x08035f2b
 8035c90:	08035f2b 	.word	0x08035f2b
 8035c94:	08035f2b 	.word	0x08035f2b
 8035c98:	08035f2b 	.word	0x08035f2b
 8035c9c:	08035f2b 	.word	0x08035f2b
 8035ca0:	08035f2b 	.word	0x08035f2b
 8035ca4:	08035f2b 	.word	0x08035f2b
 8035ca8:	08035d13 	.word	0x08035d13
 8035cac:	08035f2b 	.word	0x08035f2b
 8035cb0:	08035f2b 	.word	0x08035f2b
 8035cb4:	08035f2b 	.word	0x08035f2b
 8035cb8:	08035f2b 	.word	0x08035f2b
 8035cbc:	08035f2b 	.word	0x08035f2b
 8035cc0:	08035f2b 	.word	0x08035f2b
 8035cc4:	08035f2b 	.word	0x08035f2b
 8035cc8:	08035d19 	.word	0x08035d19
 8035ccc:	08035f2b 	.word	0x08035f2b
 8035cd0:	08035f2b 	.word	0x08035f2b
 8035cd4:	08035f2b 	.word	0x08035f2b
 8035cd8:	08035f2b 	.word	0x08035f2b
 8035cdc:	08035f2b 	.word	0x08035f2b
 8035ce0:	08035f2b 	.word	0x08035f2b
 8035ce4:	08035f2b 	.word	0x08035f2b
 8035ce8:	08035d1f 	.word	0x08035d1f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8035cec:	4b94      	ldr	r3, [pc, #592]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035cee:	681b      	ldr	r3, [r3, #0]
 8035cf0:	f003 0320 	and.w	r3, r3, #32
 8035cf4:	2b00      	cmp	r3, #0
 8035cf6:	d009      	beq.n	8035d0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8035cf8:	4b91      	ldr	r3, [pc, #580]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035cfa:	681b      	ldr	r3, [r3, #0]
 8035cfc:	08db      	lsrs	r3, r3, #3
 8035cfe:	f003 0303 	and.w	r3, r3, #3
 8035d02:	4a90      	ldr	r2, [pc, #576]	; (8035f44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8035d04:	fa22 f303 	lsr.w	r3, r2, r3
 8035d08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8035d0a:	e111      	b.n	8035f30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8035d0c:	4b8d      	ldr	r3, [pc, #564]	; (8035f44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8035d0e:	61bb      	str	r3, [r7, #24]
    break;
 8035d10:	e10e      	b.n	8035f30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8035d12:	4b8d      	ldr	r3, [pc, #564]	; (8035f48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8035d14:	61bb      	str	r3, [r7, #24]
    break;
 8035d16:	e10b      	b.n	8035f30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8035d18:	4b8c      	ldr	r3, [pc, #560]	; (8035f4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8035d1a:	61bb      	str	r3, [r7, #24]
    break;
 8035d1c:	e108      	b.n	8035f30 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8035d1e:	4b88      	ldr	r3, [pc, #544]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035d22:	f003 0303 	and.w	r3, r3, #3
 8035d26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8035d28:	4b85      	ldr	r3, [pc, #532]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035d2c:	091b      	lsrs	r3, r3, #4
 8035d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8035d32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8035d34:	4b82      	ldr	r3, [pc, #520]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035d38:	f003 0301 	and.w	r3, r3, #1
 8035d3c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8035d3e:	4b80      	ldr	r3, [pc, #512]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8035d42:	08db      	lsrs	r3, r3, #3
 8035d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8035d48:	68fa      	ldr	r2, [r7, #12]
 8035d4a:	fb02 f303 	mul.w	r3, r2, r3
 8035d4e:	ee07 3a90 	vmov	s15, r3
 8035d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035d56:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8035d5a:	693b      	ldr	r3, [r7, #16]
 8035d5c:	2b00      	cmp	r3, #0
 8035d5e:	f000 80e1 	beq.w	8035f24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8035d62:	697b      	ldr	r3, [r7, #20]
 8035d64:	2b02      	cmp	r3, #2
 8035d66:	f000 8083 	beq.w	8035e70 <HAL_RCC_GetSysClockFreq+0x204>
 8035d6a:	697b      	ldr	r3, [r7, #20]
 8035d6c:	2b02      	cmp	r3, #2
 8035d6e:	f200 80a1 	bhi.w	8035eb4 <HAL_RCC_GetSysClockFreq+0x248>
 8035d72:	697b      	ldr	r3, [r7, #20]
 8035d74:	2b00      	cmp	r3, #0
 8035d76:	d003      	beq.n	8035d80 <HAL_RCC_GetSysClockFreq+0x114>
 8035d78:	697b      	ldr	r3, [r7, #20]
 8035d7a:	2b01      	cmp	r3, #1
 8035d7c:	d056      	beq.n	8035e2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8035d7e:	e099      	b.n	8035eb4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8035d80:	4b6f      	ldr	r3, [pc, #444]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035d82:	681b      	ldr	r3, [r3, #0]
 8035d84:	f003 0320 	and.w	r3, r3, #32
 8035d88:	2b00      	cmp	r3, #0
 8035d8a:	d02d      	beq.n	8035de8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8035d8c:	4b6c      	ldr	r3, [pc, #432]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035d8e:	681b      	ldr	r3, [r3, #0]
 8035d90:	08db      	lsrs	r3, r3, #3
 8035d92:	f003 0303 	and.w	r3, r3, #3
 8035d96:	4a6b      	ldr	r2, [pc, #428]	; (8035f44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8035d98:	fa22 f303 	lsr.w	r3, r2, r3
 8035d9c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8035d9e:	687b      	ldr	r3, [r7, #4]
 8035da0:	ee07 3a90 	vmov	s15, r3
 8035da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035da8:	693b      	ldr	r3, [r7, #16]
 8035daa:	ee07 3a90 	vmov	s15, r3
 8035dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035db6:	4b62      	ldr	r3, [pc, #392]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035dbe:	ee07 3a90 	vmov	s15, r3
 8035dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8035dca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8035f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8035dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8035dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035de2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8035de6:	e087      	b.n	8035ef8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8035de8:	693b      	ldr	r3, [r7, #16]
 8035dea:	ee07 3a90 	vmov	s15, r3
 8035dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035df2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8035f54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8035df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035dfa:	4b51      	ldr	r3, [pc, #324]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035e02:	ee07 3a90 	vmov	s15, r3
 8035e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8035e0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8035f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8035e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8035e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8035e2a:	e065      	b.n	8035ef8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8035e2c:	693b      	ldr	r3, [r7, #16]
 8035e2e:	ee07 3a90 	vmov	s15, r3
 8035e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035e36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8035f58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8035e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035e3e:	4b40      	ldr	r3, [pc, #256]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035e46:	ee07 3a90 	vmov	s15, r3
 8035e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8035e52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8035f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8035e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8035e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8035e6e:	e043      	b.n	8035ef8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8035e70:	693b      	ldr	r3, [r7, #16]
 8035e72:	ee07 3a90 	vmov	s15, r3
 8035e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035e7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8035f5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8035e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035e82:	4b2f      	ldr	r3, [pc, #188]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035e8a:	ee07 3a90 	vmov	s15, r3
 8035e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8035e96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8035f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8035e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8035ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8035eb2:	e021      	b.n	8035ef8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8035eb4:	693b      	ldr	r3, [r7, #16]
 8035eb6:	ee07 3a90 	vmov	s15, r3
 8035eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035ebe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8035f58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8035ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035ec6:	4b1e      	ldr	r3, [pc, #120]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035ece:	ee07 3a90 	vmov	s15, r3
 8035ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8035eda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8035f50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8035ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8035eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8035ef6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8035ef8:	4b11      	ldr	r3, [pc, #68]	; (8035f40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035efc:	0a5b      	lsrs	r3, r3, #9
 8035efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8035f02:	3301      	adds	r3, #1
 8035f04:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8035f06:	683b      	ldr	r3, [r7, #0]
 8035f08:	ee07 3a90 	vmov	s15, r3
 8035f0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8035f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8035f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8035f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8035f1c:	ee17 3a90 	vmov	r3, s15
 8035f20:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8035f22:	e005      	b.n	8035f30 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8035f24:	2300      	movs	r3, #0
 8035f26:	61bb      	str	r3, [r7, #24]
    break;
 8035f28:	e002      	b.n	8035f30 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8035f2a:	4b07      	ldr	r3, [pc, #28]	; (8035f48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8035f2c:	61bb      	str	r3, [r7, #24]
    break;
 8035f2e:	bf00      	nop
  }

  return sysclockfreq;
 8035f30:	69bb      	ldr	r3, [r7, #24]
}
 8035f32:	4618      	mov	r0, r3
 8035f34:	3724      	adds	r7, #36	; 0x24
 8035f36:	46bd      	mov	sp, r7
 8035f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035f3c:	4770      	bx	lr
 8035f3e:	bf00      	nop
 8035f40:	58024400 	.word	0x58024400
 8035f44:	03d09000 	.word	0x03d09000
 8035f48:	003d0900 	.word	0x003d0900
 8035f4c:	017d7840 	.word	0x017d7840
 8035f50:	46000000 	.word	0x46000000
 8035f54:	4c742400 	.word	0x4c742400
 8035f58:	4a742400 	.word	0x4a742400
 8035f5c:	4bbebc20 	.word	0x4bbebc20

08035f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8035f60:	b580      	push	{r7, lr}
 8035f62:	b082      	sub	sp, #8
 8035f64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8035f66:	f7ff fe81 	bl	8035c6c <HAL_RCC_GetSysClockFreq>
 8035f6a:	4602      	mov	r2, r0
 8035f6c:	4b10      	ldr	r3, [pc, #64]	; (8035fb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8035f6e:	699b      	ldr	r3, [r3, #24]
 8035f70:	0a1b      	lsrs	r3, r3, #8
 8035f72:	f003 030f 	and.w	r3, r3, #15
 8035f76:	490f      	ldr	r1, [pc, #60]	; (8035fb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8035f78:	5ccb      	ldrb	r3, [r1, r3]
 8035f7a:	f003 031f 	and.w	r3, r3, #31
 8035f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8035f82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8035f84:	4b0a      	ldr	r3, [pc, #40]	; (8035fb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8035f86:	699b      	ldr	r3, [r3, #24]
 8035f88:	f003 030f 	and.w	r3, r3, #15
 8035f8c:	4a09      	ldr	r2, [pc, #36]	; (8035fb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8035f8e:	5cd3      	ldrb	r3, [r2, r3]
 8035f90:	f003 031f 	and.w	r3, r3, #31
 8035f94:	687a      	ldr	r2, [r7, #4]
 8035f96:	fa22 f303 	lsr.w	r3, r2, r3
 8035f9a:	4a07      	ldr	r2, [pc, #28]	; (8035fb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8035f9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8035f9e:	4a07      	ldr	r2, [pc, #28]	; (8035fbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8035fa0:	687b      	ldr	r3, [r7, #4]
 8035fa2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8035fa4:	4b04      	ldr	r3, [pc, #16]	; (8035fb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8035fa6:	681b      	ldr	r3, [r3, #0]
}
 8035fa8:	4618      	mov	r0, r3
 8035faa:	3708      	adds	r7, #8
 8035fac:	46bd      	mov	sp, r7
 8035fae:	bd80      	pop	{r7, pc}
 8035fb0:	58024400 	.word	0x58024400
 8035fb4:	0805c614 	.word	0x0805c614
 8035fb8:	24000008 	.word	0x24000008
 8035fbc:	24000004 	.word	0x24000004

08035fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8035fc0:	b580      	push	{r7, lr}
 8035fc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8035fc4:	f7ff ffcc 	bl	8035f60 <HAL_RCC_GetHCLKFreq>
 8035fc8:	4602      	mov	r2, r0
 8035fca:	4b06      	ldr	r3, [pc, #24]	; (8035fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8035fcc:	69db      	ldr	r3, [r3, #28]
 8035fce:	091b      	lsrs	r3, r3, #4
 8035fd0:	f003 0307 	and.w	r3, r3, #7
 8035fd4:	4904      	ldr	r1, [pc, #16]	; (8035fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8035fd6:	5ccb      	ldrb	r3, [r1, r3]
 8035fd8:	f003 031f 	and.w	r3, r3, #31
 8035fdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8035fe0:	4618      	mov	r0, r3
 8035fe2:	bd80      	pop	{r7, pc}
 8035fe4:	58024400 	.word	0x58024400
 8035fe8:	0805c614 	.word	0x0805c614

08035fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8035fec:	b580      	push	{r7, lr}
 8035fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8035ff0:	f7ff ffb6 	bl	8035f60 <HAL_RCC_GetHCLKFreq>
 8035ff4:	4602      	mov	r2, r0
 8035ff6:	4b06      	ldr	r3, [pc, #24]	; (8036010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8035ff8:	69db      	ldr	r3, [r3, #28]
 8035ffa:	0a1b      	lsrs	r3, r3, #8
 8035ffc:	f003 0307 	and.w	r3, r3, #7
 8036000:	4904      	ldr	r1, [pc, #16]	; (8036014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8036002:	5ccb      	ldrb	r3, [r1, r3]
 8036004:	f003 031f 	and.w	r3, r3, #31
 8036008:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 803600c:	4618      	mov	r0, r3
 803600e:	bd80      	pop	{r7, pc}
 8036010:	58024400 	.word	0x58024400
 8036014:	0805c614 	.word	0x0805c614

08036018 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8036018:	b580      	push	{r7, lr}
 803601a:	b086      	sub	sp, #24
 803601c:	af00      	add	r7, sp, #0
 803601e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8036020:	2300      	movs	r3, #0
 8036022:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8036024:	2300      	movs	r3, #0
 8036026:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8036028:	687b      	ldr	r3, [r7, #4]
 803602a:	681b      	ldr	r3, [r3, #0]
 803602c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8036030:	2b00      	cmp	r3, #0
 8036032:	d03f      	beq.n	80360b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8036034:	687b      	ldr	r3, [r7, #4]
 8036036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8036038:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 803603c:	d02a      	beq.n	8036094 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 803603e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8036042:	d824      	bhi.n	803608e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8036044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8036048:	d018      	beq.n	803607c <HAL_RCCEx_PeriphCLKConfig+0x64>
 803604a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803604e:	d81e      	bhi.n	803608e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8036050:	2b00      	cmp	r3, #0
 8036052:	d003      	beq.n	803605c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8036054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8036058:	d007      	beq.n	803606a <HAL_RCCEx_PeriphCLKConfig+0x52>
 803605a:	e018      	b.n	803608e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803605c:	4ba3      	ldr	r3, [pc, #652]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036060:	4aa2      	ldr	r2, [pc, #648]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8036062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8036066:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8036068:	e015      	b.n	8036096 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 803606a:	687b      	ldr	r3, [r7, #4]
 803606c:	3304      	adds	r3, #4
 803606e:	2102      	movs	r1, #2
 8036070:	4618      	mov	r0, r3
 8036072:	f001 f9d5 	bl	8037420 <RCCEx_PLL2_Config>
 8036076:	4603      	mov	r3, r0
 8036078:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 803607a:	e00c      	b.n	8036096 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 803607c:	687b      	ldr	r3, [r7, #4]
 803607e:	3324      	adds	r3, #36	; 0x24
 8036080:	2102      	movs	r1, #2
 8036082:	4618      	mov	r0, r3
 8036084:	f001 fa7e 	bl	8037584 <RCCEx_PLL3_Config>
 8036088:	4603      	mov	r3, r0
 803608a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 803608c:	e003      	b.n	8036096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803608e:	2301      	movs	r3, #1
 8036090:	75fb      	strb	r3, [r7, #23]
      break;
 8036092:	e000      	b.n	8036096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8036094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8036096:	7dfb      	ldrb	r3, [r7, #23]
 8036098:	2b00      	cmp	r3, #0
 803609a:	d109      	bne.n	80360b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 803609c:	4b93      	ldr	r3, [pc, #588]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803609e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80360a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80360a4:	687b      	ldr	r3, [r7, #4]
 80360a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80360a8:	4990      	ldr	r1, [pc, #576]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80360aa:	4313      	orrs	r3, r2
 80360ac:	650b      	str	r3, [r1, #80]	; 0x50
 80360ae:	e001      	b.n	80360b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80360b0:	7dfb      	ldrb	r3, [r7, #23]
 80360b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80360b4:	687b      	ldr	r3, [r7, #4]
 80360b6:	681b      	ldr	r3, [r3, #0]
 80360b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80360bc:	2b00      	cmp	r3, #0
 80360be:	d03d      	beq.n	803613c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80360c0:	687b      	ldr	r3, [r7, #4]
 80360c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80360c4:	2b04      	cmp	r3, #4
 80360c6:	d826      	bhi.n	8036116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80360c8:	a201      	add	r2, pc, #4	; (adr r2, 80360d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80360ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80360ce:	bf00      	nop
 80360d0:	080360e5 	.word	0x080360e5
 80360d4:	080360f3 	.word	0x080360f3
 80360d8:	08036105 	.word	0x08036105
 80360dc:	0803611d 	.word	0x0803611d
 80360e0:	0803611d 	.word	0x0803611d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80360e4:	4b81      	ldr	r3, [pc, #516]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80360e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80360e8:	4a80      	ldr	r2, [pc, #512]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80360ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80360ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80360f0:	e015      	b.n	803611e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80360f2:	687b      	ldr	r3, [r7, #4]
 80360f4:	3304      	adds	r3, #4
 80360f6:	2100      	movs	r1, #0
 80360f8:	4618      	mov	r0, r3
 80360fa:	f001 f991 	bl	8037420 <RCCEx_PLL2_Config>
 80360fe:	4603      	mov	r3, r0
 8036100:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8036102:	e00c      	b.n	803611e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8036104:	687b      	ldr	r3, [r7, #4]
 8036106:	3324      	adds	r3, #36	; 0x24
 8036108:	2100      	movs	r1, #0
 803610a:	4618      	mov	r0, r3
 803610c:	f001 fa3a 	bl	8037584 <RCCEx_PLL3_Config>
 8036110:	4603      	mov	r3, r0
 8036112:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8036114:	e003      	b.n	803611e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8036116:	2301      	movs	r3, #1
 8036118:	75fb      	strb	r3, [r7, #23]
      break;
 803611a:	e000      	b.n	803611e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 803611c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803611e:	7dfb      	ldrb	r3, [r7, #23]
 8036120:	2b00      	cmp	r3, #0
 8036122:	d109      	bne.n	8036138 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8036124:	4b71      	ldr	r3, [pc, #452]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8036126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036128:	f023 0207 	bic.w	r2, r3, #7
 803612c:	687b      	ldr	r3, [r7, #4]
 803612e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8036130:	496e      	ldr	r1, [pc, #440]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8036132:	4313      	orrs	r3, r2
 8036134:	650b      	str	r3, [r1, #80]	; 0x50
 8036136:	e001      	b.n	803613c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036138:	7dfb      	ldrb	r3, [r7, #23]
 803613a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 803613c:	687b      	ldr	r3, [r7, #4]
 803613e:	681b      	ldr	r3, [r3, #0]
 8036140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8036144:	2b00      	cmp	r3, #0
 8036146:	d042      	beq.n	80361ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8036148:	687b      	ldr	r3, [r7, #4]
 803614a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803614c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8036150:	d02b      	beq.n	80361aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8036152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8036156:	d825      	bhi.n	80361a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8036158:	2bc0      	cmp	r3, #192	; 0xc0
 803615a:	d028      	beq.n	80361ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 803615c:	2bc0      	cmp	r3, #192	; 0xc0
 803615e:	d821      	bhi.n	80361a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8036160:	2b80      	cmp	r3, #128	; 0x80
 8036162:	d016      	beq.n	8036192 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8036164:	2b80      	cmp	r3, #128	; 0x80
 8036166:	d81d      	bhi.n	80361a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8036168:	2b00      	cmp	r3, #0
 803616a:	d002      	beq.n	8036172 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 803616c:	2b40      	cmp	r3, #64	; 0x40
 803616e:	d007      	beq.n	8036180 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8036170:	e018      	b.n	80361a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8036172:	4b5e      	ldr	r3, [pc, #376]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8036174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036176:	4a5d      	ldr	r2, [pc, #372]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8036178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803617c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 803617e:	e017      	b.n	80361b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8036180:	687b      	ldr	r3, [r7, #4]
 8036182:	3304      	adds	r3, #4
 8036184:	2100      	movs	r1, #0
 8036186:	4618      	mov	r0, r3
 8036188:	f001 f94a 	bl	8037420 <RCCEx_PLL2_Config>
 803618c:	4603      	mov	r3, r0
 803618e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8036190:	e00e      	b.n	80361b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8036192:	687b      	ldr	r3, [r7, #4]
 8036194:	3324      	adds	r3, #36	; 0x24
 8036196:	2100      	movs	r1, #0
 8036198:	4618      	mov	r0, r3
 803619a:	f001 f9f3 	bl	8037584 <RCCEx_PLL3_Config>
 803619e:	4603      	mov	r3, r0
 80361a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80361a2:	e005      	b.n	80361b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80361a4:	2301      	movs	r3, #1
 80361a6:	75fb      	strb	r3, [r7, #23]
      break;
 80361a8:	e002      	b.n	80361b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80361aa:	bf00      	nop
 80361ac:	e000      	b.n	80361b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80361ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80361b0:	7dfb      	ldrb	r3, [r7, #23]
 80361b2:	2b00      	cmp	r3, #0
 80361b4:	d109      	bne.n	80361ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80361b6:	4b4d      	ldr	r3, [pc, #308]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80361b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80361ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80361be:	687b      	ldr	r3, [r7, #4]
 80361c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80361c2:	494a      	ldr	r1, [pc, #296]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80361c4:	4313      	orrs	r3, r2
 80361c6:	650b      	str	r3, [r1, #80]	; 0x50
 80361c8:	e001      	b.n	80361ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80361ca:	7dfb      	ldrb	r3, [r7, #23]
 80361cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80361ce:	687b      	ldr	r3, [r7, #4]
 80361d0:	681b      	ldr	r3, [r3, #0]
 80361d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80361d6:	2b00      	cmp	r3, #0
 80361d8:	d049      	beq.n	803626e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80361da:	687b      	ldr	r3, [r7, #4]
 80361dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80361e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80361e4:	d030      	beq.n	8036248 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80361e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80361ea:	d82a      	bhi.n	8036242 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80361ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80361f0:	d02c      	beq.n	803624c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80361f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80361f6:	d824      	bhi.n	8036242 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80361f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80361fc:	d018      	beq.n	8036230 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80361fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8036202:	d81e      	bhi.n	8036242 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8036204:	2b00      	cmp	r3, #0
 8036206:	d003      	beq.n	8036210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8036208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803620c:	d007      	beq.n	803621e <HAL_RCCEx_PeriphCLKConfig+0x206>
 803620e:	e018      	b.n	8036242 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8036210:	4b36      	ldr	r3, [pc, #216]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8036212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036214:	4a35      	ldr	r2, [pc, #212]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8036216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803621a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 803621c:	e017      	b.n	803624e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803621e:	687b      	ldr	r3, [r7, #4]
 8036220:	3304      	adds	r3, #4
 8036222:	2100      	movs	r1, #0
 8036224:	4618      	mov	r0, r3
 8036226:	f001 f8fb 	bl	8037420 <RCCEx_PLL2_Config>
 803622a:	4603      	mov	r3, r0
 803622c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 803622e:	e00e      	b.n	803624e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8036230:	687b      	ldr	r3, [r7, #4]
 8036232:	3324      	adds	r3, #36	; 0x24
 8036234:	2100      	movs	r1, #0
 8036236:	4618      	mov	r0, r3
 8036238:	f001 f9a4 	bl	8037584 <RCCEx_PLL3_Config>
 803623c:	4603      	mov	r3, r0
 803623e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8036240:	e005      	b.n	803624e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8036242:	2301      	movs	r3, #1
 8036244:	75fb      	strb	r3, [r7, #23]
      break;
 8036246:	e002      	b.n	803624e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8036248:	bf00      	nop
 803624a:	e000      	b.n	803624e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 803624c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803624e:	7dfb      	ldrb	r3, [r7, #23]
 8036250:	2b00      	cmp	r3, #0
 8036252:	d10a      	bne.n	803626a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8036254:	4b25      	ldr	r3, [pc, #148]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8036256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036258:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 803625c:	687b      	ldr	r3, [r7, #4]
 803625e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8036262:	4922      	ldr	r1, [pc, #136]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8036264:	4313      	orrs	r3, r2
 8036266:	658b      	str	r3, [r1, #88]	; 0x58
 8036268:	e001      	b.n	803626e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803626a:	7dfb      	ldrb	r3, [r7, #23]
 803626c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 803626e:	687b      	ldr	r3, [r7, #4]
 8036270:	681b      	ldr	r3, [r3, #0]
 8036272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8036276:	2b00      	cmp	r3, #0
 8036278:	d04b      	beq.n	8036312 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 803627a:	687b      	ldr	r3, [r7, #4]
 803627c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8036280:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8036284:	d030      	beq.n	80362e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8036286:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 803628a:	d82a      	bhi.n	80362e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 803628c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8036290:	d02e      	beq.n	80362f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8036292:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8036296:	d824      	bhi.n	80362e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8036298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 803629c:	d018      	beq.n	80362d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 803629e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80362a2:	d81e      	bhi.n	80362e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80362a4:	2b00      	cmp	r3, #0
 80362a6:	d003      	beq.n	80362b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80362a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80362ac:	d007      	beq.n	80362be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80362ae:	e018      	b.n	80362e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80362b0:	4b0e      	ldr	r3, [pc, #56]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80362b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80362b4:	4a0d      	ldr	r2, [pc, #52]	; (80362ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80362b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80362ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80362bc:	e019      	b.n	80362f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80362be:	687b      	ldr	r3, [r7, #4]
 80362c0:	3304      	adds	r3, #4
 80362c2:	2100      	movs	r1, #0
 80362c4:	4618      	mov	r0, r3
 80362c6:	f001 f8ab 	bl	8037420 <RCCEx_PLL2_Config>
 80362ca:	4603      	mov	r3, r0
 80362cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80362ce:	e010      	b.n	80362f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80362d0:	687b      	ldr	r3, [r7, #4]
 80362d2:	3324      	adds	r3, #36	; 0x24
 80362d4:	2100      	movs	r1, #0
 80362d6:	4618      	mov	r0, r3
 80362d8:	f001 f954 	bl	8037584 <RCCEx_PLL3_Config>
 80362dc:	4603      	mov	r3, r0
 80362de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80362e0:	e007      	b.n	80362f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80362e2:	2301      	movs	r3, #1
 80362e4:	75fb      	strb	r3, [r7, #23]
      break;
 80362e6:	e004      	b.n	80362f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80362e8:	bf00      	nop
 80362ea:	e002      	b.n	80362f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80362ec:	58024400 	.word	0x58024400
      break;
 80362f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80362f2:	7dfb      	ldrb	r3, [r7, #23]
 80362f4:	2b00      	cmp	r3, #0
 80362f6:	d10a      	bne.n	803630e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80362f8:	4b99      	ldr	r3, [pc, #612]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80362fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80362fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8036300:	687b      	ldr	r3, [r7, #4]
 8036302:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8036306:	4996      	ldr	r1, [pc, #600]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8036308:	4313      	orrs	r3, r2
 803630a:	658b      	str	r3, [r1, #88]	; 0x58
 803630c:	e001      	b.n	8036312 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803630e:	7dfb      	ldrb	r3, [r7, #23]
 8036310:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8036312:	687b      	ldr	r3, [r7, #4]
 8036314:	681b      	ldr	r3, [r3, #0]
 8036316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 803631a:	2b00      	cmp	r3, #0
 803631c:	d032      	beq.n	8036384 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 803631e:	687b      	ldr	r3, [r7, #4]
 8036320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8036322:	2b30      	cmp	r3, #48	; 0x30
 8036324:	d01c      	beq.n	8036360 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8036326:	2b30      	cmp	r3, #48	; 0x30
 8036328:	d817      	bhi.n	803635a <HAL_RCCEx_PeriphCLKConfig+0x342>
 803632a:	2b20      	cmp	r3, #32
 803632c:	d00c      	beq.n	8036348 <HAL_RCCEx_PeriphCLKConfig+0x330>
 803632e:	2b20      	cmp	r3, #32
 8036330:	d813      	bhi.n	803635a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8036332:	2b00      	cmp	r3, #0
 8036334:	d016      	beq.n	8036364 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8036336:	2b10      	cmp	r3, #16
 8036338:	d10f      	bne.n	803635a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803633a:	4b89      	ldr	r3, [pc, #548]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803633e:	4a88      	ldr	r2, [pc, #544]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8036340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8036344:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8036346:	e00e      	b.n	8036366 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8036348:	687b      	ldr	r3, [r7, #4]
 803634a:	3304      	adds	r3, #4
 803634c:	2102      	movs	r1, #2
 803634e:	4618      	mov	r0, r3
 8036350:	f001 f866 	bl	8037420 <RCCEx_PLL2_Config>
 8036354:	4603      	mov	r3, r0
 8036356:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8036358:	e005      	b.n	8036366 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 803635a:	2301      	movs	r3, #1
 803635c:	75fb      	strb	r3, [r7, #23]
      break;
 803635e:	e002      	b.n	8036366 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8036360:	bf00      	nop
 8036362:	e000      	b.n	8036366 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8036364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8036366:	7dfb      	ldrb	r3, [r7, #23]
 8036368:	2b00      	cmp	r3, #0
 803636a:	d109      	bne.n	8036380 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 803636c:	4b7c      	ldr	r3, [pc, #496]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803636e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8036370:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8036374:	687b      	ldr	r3, [r7, #4]
 8036376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8036378:	4979      	ldr	r1, [pc, #484]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803637a:	4313      	orrs	r3, r2
 803637c:	64cb      	str	r3, [r1, #76]	; 0x4c
 803637e:	e001      	b.n	8036384 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036380:	7dfb      	ldrb	r3, [r7, #23]
 8036382:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8036384:	687b      	ldr	r3, [r7, #4]
 8036386:	681b      	ldr	r3, [r3, #0]
 8036388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 803638c:	2b00      	cmp	r3, #0
 803638e:	d047      	beq.n	8036420 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8036390:	687b      	ldr	r3, [r7, #4]
 8036392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8036394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036398:	d030      	beq.n	80363fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 803639a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803639e:	d82a      	bhi.n	80363f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80363a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80363a4:	d02c      	beq.n	8036400 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80363a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80363aa:	d824      	bhi.n	80363f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80363ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80363b0:	d018      	beq.n	80363e4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80363b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80363b6:	d81e      	bhi.n	80363f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80363b8:	2b00      	cmp	r3, #0
 80363ba:	d003      	beq.n	80363c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80363bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80363c0:	d007      	beq.n	80363d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80363c2:	e018      	b.n	80363f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80363c4:	4b66      	ldr	r3, [pc, #408]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80363c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80363c8:	4a65      	ldr	r2, [pc, #404]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80363ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80363ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80363d0:	e017      	b.n	8036402 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80363d2:	687b      	ldr	r3, [r7, #4]
 80363d4:	3304      	adds	r3, #4
 80363d6:	2100      	movs	r1, #0
 80363d8:	4618      	mov	r0, r3
 80363da:	f001 f821 	bl	8037420 <RCCEx_PLL2_Config>
 80363de:	4603      	mov	r3, r0
 80363e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80363e2:	e00e      	b.n	8036402 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80363e4:	687b      	ldr	r3, [r7, #4]
 80363e6:	3324      	adds	r3, #36	; 0x24
 80363e8:	2100      	movs	r1, #0
 80363ea:	4618      	mov	r0, r3
 80363ec:	f001 f8ca 	bl	8037584 <RCCEx_PLL3_Config>
 80363f0:	4603      	mov	r3, r0
 80363f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80363f4:	e005      	b.n	8036402 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80363f6:	2301      	movs	r3, #1
 80363f8:	75fb      	strb	r3, [r7, #23]
      break;
 80363fa:	e002      	b.n	8036402 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80363fc:	bf00      	nop
 80363fe:	e000      	b.n	8036402 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8036400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8036402:	7dfb      	ldrb	r3, [r7, #23]
 8036404:	2b00      	cmp	r3, #0
 8036406:	d109      	bne.n	803641c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8036408:	4b55      	ldr	r3, [pc, #340]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803640a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803640c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8036410:	687b      	ldr	r3, [r7, #4]
 8036412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8036414:	4952      	ldr	r1, [pc, #328]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8036416:	4313      	orrs	r3, r2
 8036418:	650b      	str	r3, [r1, #80]	; 0x50
 803641a:	e001      	b.n	8036420 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803641c:	7dfb      	ldrb	r3, [r7, #23]
 803641e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8036420:	687b      	ldr	r3, [r7, #4]
 8036422:	681b      	ldr	r3, [r3, #0]
 8036424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8036428:	2b00      	cmp	r3, #0
 803642a:	d049      	beq.n	80364c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 803642c:	687b      	ldr	r3, [r7, #4]
 803642e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8036430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8036434:	d02e      	beq.n	8036494 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8036436:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 803643a:	d828      	bhi.n	803648e <HAL_RCCEx_PeriphCLKConfig+0x476>
 803643c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8036440:	d02a      	beq.n	8036498 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8036442:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8036446:	d822      	bhi.n	803648e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8036448:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 803644c:	d026      	beq.n	803649c <HAL_RCCEx_PeriphCLKConfig+0x484>
 803644e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8036452:	d81c      	bhi.n	803648e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8036454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8036458:	d010      	beq.n	803647c <HAL_RCCEx_PeriphCLKConfig+0x464>
 803645a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 803645e:	d816      	bhi.n	803648e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8036460:	2b00      	cmp	r3, #0
 8036462:	d01d      	beq.n	80364a0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8036464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8036468:	d111      	bne.n	803648e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 803646a:	687b      	ldr	r3, [r7, #4]
 803646c:	3304      	adds	r3, #4
 803646e:	2101      	movs	r1, #1
 8036470:	4618      	mov	r0, r3
 8036472:	f000 ffd5 	bl	8037420 <RCCEx_PLL2_Config>
 8036476:	4603      	mov	r3, r0
 8036478:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 803647a:	e012      	b.n	80364a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803647c:	687b      	ldr	r3, [r7, #4]
 803647e:	3324      	adds	r3, #36	; 0x24
 8036480:	2101      	movs	r1, #1
 8036482:	4618      	mov	r0, r3
 8036484:	f001 f87e 	bl	8037584 <RCCEx_PLL3_Config>
 8036488:	4603      	mov	r3, r0
 803648a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 803648c:	e009      	b.n	80364a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803648e:	2301      	movs	r3, #1
 8036490:	75fb      	strb	r3, [r7, #23]
      break;
 8036492:	e006      	b.n	80364a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8036494:	bf00      	nop
 8036496:	e004      	b.n	80364a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8036498:	bf00      	nop
 803649a:	e002      	b.n	80364a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 803649c:	bf00      	nop
 803649e:	e000      	b.n	80364a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80364a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80364a2:	7dfb      	ldrb	r3, [r7, #23]
 80364a4:	2b00      	cmp	r3, #0
 80364a6:	d109      	bne.n	80364bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80364a8:	4b2d      	ldr	r3, [pc, #180]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80364aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80364ac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80364b0:	687b      	ldr	r3, [r7, #4]
 80364b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80364b4:	492a      	ldr	r1, [pc, #168]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80364b6:	4313      	orrs	r3, r2
 80364b8:	650b      	str	r3, [r1, #80]	; 0x50
 80364ba:	e001      	b.n	80364c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80364bc:	7dfb      	ldrb	r3, [r7, #23]
 80364be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80364c0:	687b      	ldr	r3, [r7, #4]
 80364c2:	681b      	ldr	r3, [r3, #0]
 80364c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80364c8:	2b00      	cmp	r3, #0
 80364ca:	d04d      	beq.n	8036568 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80364cc:	687b      	ldr	r3, [r7, #4]
 80364ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80364d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80364d6:	d02e      	beq.n	8036536 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80364d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80364dc:	d828      	bhi.n	8036530 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80364de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80364e2:	d02a      	beq.n	803653a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80364e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80364e8:	d822      	bhi.n	8036530 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80364ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80364ee:	d026      	beq.n	803653e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80364f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80364f4:	d81c      	bhi.n	8036530 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80364f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80364fa:	d010      	beq.n	803651e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80364fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8036500:	d816      	bhi.n	8036530 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8036502:	2b00      	cmp	r3, #0
 8036504:	d01d      	beq.n	8036542 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8036506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803650a:	d111      	bne.n	8036530 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 803650c:	687b      	ldr	r3, [r7, #4]
 803650e:	3304      	adds	r3, #4
 8036510:	2101      	movs	r1, #1
 8036512:	4618      	mov	r0, r3
 8036514:	f000 ff84 	bl	8037420 <RCCEx_PLL2_Config>
 8036518:	4603      	mov	r3, r0
 803651a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 803651c:	e012      	b.n	8036544 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803651e:	687b      	ldr	r3, [r7, #4]
 8036520:	3324      	adds	r3, #36	; 0x24
 8036522:	2101      	movs	r1, #1
 8036524:	4618      	mov	r0, r3
 8036526:	f001 f82d 	bl	8037584 <RCCEx_PLL3_Config>
 803652a:	4603      	mov	r3, r0
 803652c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 803652e:	e009      	b.n	8036544 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8036530:	2301      	movs	r3, #1
 8036532:	75fb      	strb	r3, [r7, #23]
      break;
 8036534:	e006      	b.n	8036544 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8036536:	bf00      	nop
 8036538:	e004      	b.n	8036544 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 803653a:	bf00      	nop
 803653c:	e002      	b.n	8036544 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 803653e:	bf00      	nop
 8036540:	e000      	b.n	8036544 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8036542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8036544:	7dfb      	ldrb	r3, [r7, #23]
 8036546:	2b00      	cmp	r3, #0
 8036548:	d10c      	bne.n	8036564 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 803654a:	4b05      	ldr	r3, [pc, #20]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803654c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803654e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8036552:	687b      	ldr	r3, [r7, #4]
 8036554:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8036558:	4901      	ldr	r1, [pc, #4]	; (8036560 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803655a:	4313      	orrs	r3, r2
 803655c:	658b      	str	r3, [r1, #88]	; 0x58
 803655e:	e003      	b.n	8036568 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8036560:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036564:	7dfb      	ldrb	r3, [r7, #23]
 8036566:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8036568:	687b      	ldr	r3, [r7, #4]
 803656a:	681b      	ldr	r3, [r3, #0]
 803656c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8036570:	2b00      	cmp	r3, #0
 8036572:	d02f      	beq.n	80365d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8036574:	687b      	ldr	r3, [r7, #4]
 8036576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8036578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803657c:	d00e      	beq.n	803659c <HAL_RCCEx_PeriphCLKConfig+0x584>
 803657e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8036582:	d814      	bhi.n	80365ae <HAL_RCCEx_PeriphCLKConfig+0x596>
 8036584:	2b00      	cmp	r3, #0
 8036586:	d015      	beq.n	80365b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8036588:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803658c:	d10f      	bne.n	80365ae <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803658e:	4baf      	ldr	r3, [pc, #700]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8036590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036592:	4aae      	ldr	r2, [pc, #696]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8036594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8036598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 803659a:	e00c      	b.n	80365b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 803659c:	687b      	ldr	r3, [r7, #4]
 803659e:	3304      	adds	r3, #4
 80365a0:	2101      	movs	r1, #1
 80365a2:	4618      	mov	r0, r3
 80365a4:	f000 ff3c 	bl	8037420 <RCCEx_PLL2_Config>
 80365a8:	4603      	mov	r3, r0
 80365aa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80365ac:	e003      	b.n	80365b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80365ae:	2301      	movs	r3, #1
 80365b0:	75fb      	strb	r3, [r7, #23]
      break;
 80365b2:	e000      	b.n	80365b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80365b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80365b6:	7dfb      	ldrb	r3, [r7, #23]
 80365b8:	2b00      	cmp	r3, #0
 80365ba:	d109      	bne.n	80365d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80365bc:	4ba3      	ldr	r3, [pc, #652]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80365be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80365c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80365c4:	687b      	ldr	r3, [r7, #4]
 80365c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80365c8:	49a0      	ldr	r1, [pc, #640]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80365ca:	4313      	orrs	r3, r2
 80365cc:	650b      	str	r3, [r1, #80]	; 0x50
 80365ce:	e001      	b.n	80365d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80365d0:	7dfb      	ldrb	r3, [r7, #23]
 80365d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80365d4:	687b      	ldr	r3, [r7, #4]
 80365d6:	681b      	ldr	r3, [r3, #0]
 80365d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80365dc:	2b00      	cmp	r3, #0
 80365de:	d032      	beq.n	8036646 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80365e0:	687b      	ldr	r3, [r7, #4]
 80365e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80365e4:	2b03      	cmp	r3, #3
 80365e6:	d81b      	bhi.n	8036620 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80365e8:	a201      	add	r2, pc, #4	; (adr r2, 80365f0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80365ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80365ee:	bf00      	nop
 80365f0:	08036627 	.word	0x08036627
 80365f4:	08036601 	.word	0x08036601
 80365f8:	0803660f 	.word	0x0803660f
 80365fc:	08036627 	.word	0x08036627
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8036600:	4b92      	ldr	r3, [pc, #584]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8036602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036604:	4a91      	ldr	r2, [pc, #580]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8036606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803660a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 803660c:	e00c      	b.n	8036628 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 803660e:	687b      	ldr	r3, [r7, #4]
 8036610:	3304      	adds	r3, #4
 8036612:	2102      	movs	r1, #2
 8036614:	4618      	mov	r0, r3
 8036616:	f000 ff03 	bl	8037420 <RCCEx_PLL2_Config>
 803661a:	4603      	mov	r3, r0
 803661c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 803661e:	e003      	b.n	8036628 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8036620:	2301      	movs	r3, #1
 8036622:	75fb      	strb	r3, [r7, #23]
      break;
 8036624:	e000      	b.n	8036628 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8036626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8036628:	7dfb      	ldrb	r3, [r7, #23]
 803662a:	2b00      	cmp	r3, #0
 803662c:	d109      	bne.n	8036642 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 803662e:	4b87      	ldr	r3, [pc, #540]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8036630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8036632:	f023 0203 	bic.w	r2, r3, #3
 8036636:	687b      	ldr	r3, [r7, #4]
 8036638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803663a:	4984      	ldr	r1, [pc, #528]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803663c:	4313      	orrs	r3, r2
 803663e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8036640:	e001      	b.n	8036646 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036642:	7dfb      	ldrb	r3, [r7, #23]
 8036644:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8036646:	687b      	ldr	r3, [r7, #4]
 8036648:	681b      	ldr	r3, [r3, #0]
 803664a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803664e:	2b00      	cmp	r3, #0
 8036650:	f000 8086 	beq.w	8036760 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8036654:	4b7e      	ldr	r3, [pc, #504]	; (8036850 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8036656:	681b      	ldr	r3, [r3, #0]
 8036658:	4a7d      	ldr	r2, [pc, #500]	; (8036850 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 803665a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803665e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8036660:	f7f8 fd38 	bl	802f0d4 <HAL_GetTick>
 8036664:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8036666:	e009      	b.n	803667c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8036668:	f7f8 fd34 	bl	802f0d4 <HAL_GetTick>
 803666c:	4602      	mov	r2, r0
 803666e:	693b      	ldr	r3, [r7, #16]
 8036670:	1ad3      	subs	r3, r2, r3
 8036672:	2b64      	cmp	r3, #100	; 0x64
 8036674:	d902      	bls.n	803667c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8036676:	2303      	movs	r3, #3
 8036678:	75fb      	strb	r3, [r7, #23]
        break;
 803667a:	e005      	b.n	8036688 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 803667c:	4b74      	ldr	r3, [pc, #464]	; (8036850 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 803667e:	681b      	ldr	r3, [r3, #0]
 8036680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8036684:	2b00      	cmp	r3, #0
 8036686:	d0ef      	beq.n	8036668 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8036688:	7dfb      	ldrb	r3, [r7, #23]
 803668a:	2b00      	cmp	r3, #0
 803668c:	d166      	bne.n	803675c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 803668e:	4b6f      	ldr	r3, [pc, #444]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8036690:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8036692:	687b      	ldr	r3, [r7, #4]
 8036694:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8036698:	4053      	eors	r3, r2
 803669a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 803669e:	2b00      	cmp	r3, #0
 80366a0:	d013      	beq.n	80366ca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80366a2:	4b6a      	ldr	r3, [pc, #424]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80366a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80366a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80366aa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80366ac:	4b67      	ldr	r3, [pc, #412]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80366ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80366b0:	4a66      	ldr	r2, [pc, #408]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80366b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80366b6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80366b8:	4b64      	ldr	r3, [pc, #400]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80366ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80366bc:	4a63      	ldr	r2, [pc, #396]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80366be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80366c2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80366c4:	4a61      	ldr	r2, [pc, #388]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80366c6:	68fb      	ldr	r3, [r7, #12]
 80366c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80366ca:	687b      	ldr	r3, [r7, #4]
 80366cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80366d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80366d4:	d115      	bne.n	8036702 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80366d6:	f7f8 fcfd 	bl	802f0d4 <HAL_GetTick>
 80366da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80366dc:	e00b      	b.n	80366f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80366de:	f7f8 fcf9 	bl	802f0d4 <HAL_GetTick>
 80366e2:	4602      	mov	r2, r0
 80366e4:	693b      	ldr	r3, [r7, #16]
 80366e6:	1ad3      	subs	r3, r2, r3
 80366e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80366ec:	4293      	cmp	r3, r2
 80366ee:	d902      	bls.n	80366f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80366f0:	2303      	movs	r3, #3
 80366f2:	75fb      	strb	r3, [r7, #23]
            break;
 80366f4:	e005      	b.n	8036702 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80366f6:	4b55      	ldr	r3, [pc, #340]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80366f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80366fa:	f003 0302 	and.w	r3, r3, #2
 80366fe:	2b00      	cmp	r3, #0
 8036700:	d0ed      	beq.n	80366de <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8036702:	7dfb      	ldrb	r3, [r7, #23]
 8036704:	2b00      	cmp	r3, #0
 8036706:	d126      	bne.n	8036756 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8036708:	687b      	ldr	r3, [r7, #4]
 803670a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803670e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8036712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8036716:	d10d      	bne.n	8036734 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8036718:	4b4c      	ldr	r3, [pc, #304]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803671a:	691b      	ldr	r3, [r3, #16]
 803671c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8036720:	687b      	ldr	r3, [r7, #4]
 8036722:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8036726:	0919      	lsrs	r1, r3, #4
 8036728:	4b4a      	ldr	r3, [pc, #296]	; (8036854 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 803672a:	400b      	ands	r3, r1
 803672c:	4947      	ldr	r1, [pc, #284]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803672e:	4313      	orrs	r3, r2
 8036730:	610b      	str	r3, [r1, #16]
 8036732:	e005      	b.n	8036740 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8036734:	4b45      	ldr	r3, [pc, #276]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8036736:	691b      	ldr	r3, [r3, #16]
 8036738:	4a44      	ldr	r2, [pc, #272]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803673a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 803673e:	6113      	str	r3, [r2, #16]
 8036740:	4b42      	ldr	r3, [pc, #264]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8036742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8036744:	687b      	ldr	r3, [r7, #4]
 8036746:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803674a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 803674e:	493f      	ldr	r1, [pc, #252]	; (803684c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8036750:	4313      	orrs	r3, r2
 8036752:	670b      	str	r3, [r1, #112]	; 0x70
 8036754:	e004      	b.n	8036760 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8036756:	7dfb      	ldrb	r3, [r7, #23]
 8036758:	75bb      	strb	r3, [r7, #22]
 803675a:	e001      	b.n	8036760 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 803675c:	7dfb      	ldrb	r3, [r7, #23]
 803675e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8036760:	687b      	ldr	r3, [r7, #4]
 8036762:	681b      	ldr	r3, [r3, #0]
 8036764:	f003 0301 	and.w	r3, r3, #1
 8036768:	2b00      	cmp	r3, #0
 803676a:	f000 8085 	beq.w	8036878 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 803676e:	687b      	ldr	r3, [r7, #4]
 8036770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036772:	2b28      	cmp	r3, #40	; 0x28
 8036774:	d866      	bhi.n	8036844 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8036776:	a201      	add	r2, pc, #4	; (adr r2, 803677c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8036778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803677c:	08036859 	.word	0x08036859
 8036780:	08036845 	.word	0x08036845
 8036784:	08036845 	.word	0x08036845
 8036788:	08036845 	.word	0x08036845
 803678c:	08036845 	.word	0x08036845
 8036790:	08036845 	.word	0x08036845
 8036794:	08036845 	.word	0x08036845
 8036798:	08036845 	.word	0x08036845
 803679c:	08036821 	.word	0x08036821
 80367a0:	08036845 	.word	0x08036845
 80367a4:	08036845 	.word	0x08036845
 80367a8:	08036845 	.word	0x08036845
 80367ac:	08036845 	.word	0x08036845
 80367b0:	08036845 	.word	0x08036845
 80367b4:	08036845 	.word	0x08036845
 80367b8:	08036845 	.word	0x08036845
 80367bc:	08036833 	.word	0x08036833
 80367c0:	08036845 	.word	0x08036845
 80367c4:	08036845 	.word	0x08036845
 80367c8:	08036845 	.word	0x08036845
 80367cc:	08036845 	.word	0x08036845
 80367d0:	08036845 	.word	0x08036845
 80367d4:	08036845 	.word	0x08036845
 80367d8:	08036845 	.word	0x08036845
 80367dc:	08036859 	.word	0x08036859
 80367e0:	08036845 	.word	0x08036845
 80367e4:	08036845 	.word	0x08036845
 80367e8:	08036845 	.word	0x08036845
 80367ec:	08036845 	.word	0x08036845
 80367f0:	08036845 	.word	0x08036845
 80367f4:	08036845 	.word	0x08036845
 80367f8:	08036845 	.word	0x08036845
 80367fc:	08036859 	.word	0x08036859
 8036800:	08036845 	.word	0x08036845
 8036804:	08036845 	.word	0x08036845
 8036808:	08036845 	.word	0x08036845
 803680c:	08036845 	.word	0x08036845
 8036810:	08036845 	.word	0x08036845
 8036814:	08036845 	.word	0x08036845
 8036818:	08036845 	.word	0x08036845
 803681c:	08036859 	.word	0x08036859
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8036820:	687b      	ldr	r3, [r7, #4]
 8036822:	3304      	adds	r3, #4
 8036824:	2101      	movs	r1, #1
 8036826:	4618      	mov	r0, r3
 8036828:	f000 fdfa 	bl	8037420 <RCCEx_PLL2_Config>
 803682c:	4603      	mov	r3, r0
 803682e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8036830:	e013      	b.n	803685a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8036832:	687b      	ldr	r3, [r7, #4]
 8036834:	3324      	adds	r3, #36	; 0x24
 8036836:	2101      	movs	r1, #1
 8036838:	4618      	mov	r0, r3
 803683a:	f000 fea3 	bl	8037584 <RCCEx_PLL3_Config>
 803683e:	4603      	mov	r3, r0
 8036840:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8036842:	e00a      	b.n	803685a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8036844:	2301      	movs	r3, #1
 8036846:	75fb      	strb	r3, [r7, #23]
      break;
 8036848:	e007      	b.n	803685a <HAL_RCCEx_PeriphCLKConfig+0x842>
 803684a:	bf00      	nop
 803684c:	58024400 	.word	0x58024400
 8036850:	58024800 	.word	0x58024800
 8036854:	00ffffcf 	.word	0x00ffffcf
      break;
 8036858:	bf00      	nop
    }

    if(ret == HAL_OK)
 803685a:	7dfb      	ldrb	r3, [r7, #23]
 803685c:	2b00      	cmp	r3, #0
 803685e:	d109      	bne.n	8036874 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8036860:	4b96      	ldr	r3, [pc, #600]	; (8036abc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8036862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8036864:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8036868:	687b      	ldr	r3, [r7, #4]
 803686a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803686c:	4993      	ldr	r1, [pc, #588]	; (8036abc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803686e:	4313      	orrs	r3, r2
 8036870:	654b      	str	r3, [r1, #84]	; 0x54
 8036872:	e001      	b.n	8036878 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036874:	7dfb      	ldrb	r3, [r7, #23]
 8036876:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8036878:	687b      	ldr	r3, [r7, #4]
 803687a:	681b      	ldr	r3, [r3, #0]
 803687c:	f003 0302 	and.w	r3, r3, #2
 8036880:	2b00      	cmp	r3, #0
 8036882:	d038      	beq.n	80368f6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8036884:	687b      	ldr	r3, [r7, #4]
 8036886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8036888:	2b05      	cmp	r3, #5
 803688a:	d821      	bhi.n	80368d0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 803688c:	a201      	add	r2, pc, #4	; (adr r2, 8036894 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 803688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036892:	bf00      	nop
 8036894:	080368d7 	.word	0x080368d7
 8036898:	080368ad 	.word	0x080368ad
 803689c:	080368bf 	.word	0x080368bf
 80368a0:	080368d7 	.word	0x080368d7
 80368a4:	080368d7 	.word	0x080368d7
 80368a8:	080368d7 	.word	0x080368d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80368ac:	687b      	ldr	r3, [r7, #4]
 80368ae:	3304      	adds	r3, #4
 80368b0:	2101      	movs	r1, #1
 80368b2:	4618      	mov	r0, r3
 80368b4:	f000 fdb4 	bl	8037420 <RCCEx_PLL2_Config>
 80368b8:	4603      	mov	r3, r0
 80368ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80368bc:	e00c      	b.n	80368d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80368be:	687b      	ldr	r3, [r7, #4]
 80368c0:	3324      	adds	r3, #36	; 0x24
 80368c2:	2101      	movs	r1, #1
 80368c4:	4618      	mov	r0, r3
 80368c6:	f000 fe5d 	bl	8037584 <RCCEx_PLL3_Config>
 80368ca:	4603      	mov	r3, r0
 80368cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80368ce:	e003      	b.n	80368d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80368d0:	2301      	movs	r3, #1
 80368d2:	75fb      	strb	r3, [r7, #23]
      break;
 80368d4:	e000      	b.n	80368d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80368d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80368d8:	7dfb      	ldrb	r3, [r7, #23]
 80368da:	2b00      	cmp	r3, #0
 80368dc:	d109      	bne.n	80368f2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80368de:	4b77      	ldr	r3, [pc, #476]	; (8036abc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80368e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80368e2:	f023 0207 	bic.w	r2, r3, #7
 80368e6:	687b      	ldr	r3, [r7, #4]
 80368e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80368ea:	4974      	ldr	r1, [pc, #464]	; (8036abc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80368ec:	4313      	orrs	r3, r2
 80368ee:	654b      	str	r3, [r1, #84]	; 0x54
 80368f0:	e001      	b.n	80368f6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80368f2:	7dfb      	ldrb	r3, [r7, #23]
 80368f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80368f6:	687b      	ldr	r3, [r7, #4]
 80368f8:	681b      	ldr	r3, [r3, #0]
 80368fa:	f003 0304 	and.w	r3, r3, #4
 80368fe:	2b00      	cmp	r3, #0
 8036900:	d03a      	beq.n	8036978 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8036902:	687b      	ldr	r3, [r7, #4]
 8036904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8036908:	2b05      	cmp	r3, #5
 803690a:	d821      	bhi.n	8036950 <HAL_RCCEx_PeriphCLKConfig+0x938>
 803690c:	a201      	add	r2, pc, #4	; (adr r2, 8036914 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 803690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036912:	bf00      	nop
 8036914:	08036957 	.word	0x08036957
 8036918:	0803692d 	.word	0x0803692d
 803691c:	0803693f 	.word	0x0803693f
 8036920:	08036957 	.word	0x08036957
 8036924:	08036957 	.word	0x08036957
 8036928:	08036957 	.word	0x08036957
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 803692c:	687b      	ldr	r3, [r7, #4]
 803692e:	3304      	adds	r3, #4
 8036930:	2101      	movs	r1, #1
 8036932:	4618      	mov	r0, r3
 8036934:	f000 fd74 	bl	8037420 <RCCEx_PLL2_Config>
 8036938:	4603      	mov	r3, r0
 803693a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 803693c:	e00c      	b.n	8036958 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803693e:	687b      	ldr	r3, [r7, #4]
 8036940:	3324      	adds	r3, #36	; 0x24
 8036942:	2101      	movs	r1, #1
 8036944:	4618      	mov	r0, r3
 8036946:	f000 fe1d 	bl	8037584 <RCCEx_PLL3_Config>
 803694a:	4603      	mov	r3, r0
 803694c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 803694e:	e003      	b.n	8036958 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8036950:	2301      	movs	r3, #1
 8036952:	75fb      	strb	r3, [r7, #23]
      break;
 8036954:	e000      	b.n	8036958 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8036956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8036958:	7dfb      	ldrb	r3, [r7, #23]
 803695a:	2b00      	cmp	r3, #0
 803695c:	d10a      	bne.n	8036974 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 803695e:	4b57      	ldr	r3, [pc, #348]	; (8036abc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8036960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036962:	f023 0207 	bic.w	r2, r3, #7
 8036966:	687b      	ldr	r3, [r7, #4]
 8036968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 803696c:	4953      	ldr	r1, [pc, #332]	; (8036abc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803696e:	4313      	orrs	r3, r2
 8036970:	658b      	str	r3, [r1, #88]	; 0x58
 8036972:	e001      	b.n	8036978 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036974:	7dfb      	ldrb	r3, [r7, #23]
 8036976:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8036978:	687b      	ldr	r3, [r7, #4]
 803697a:	681b      	ldr	r3, [r3, #0]
 803697c:	f003 0320 	and.w	r3, r3, #32
 8036980:	2b00      	cmp	r3, #0
 8036982:	d04b      	beq.n	8036a1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8036984:	687b      	ldr	r3, [r7, #4]
 8036986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803698a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 803698e:	d02e      	beq.n	80369ee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8036990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8036994:	d828      	bhi.n	80369e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8036996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803699a:	d02a      	beq.n	80369f2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 803699c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80369a0:	d822      	bhi.n	80369e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80369a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80369a6:	d026      	beq.n	80369f6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80369a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80369ac:	d81c      	bhi.n	80369e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80369ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80369b2:	d010      	beq.n	80369d6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80369b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80369b8:	d816      	bhi.n	80369e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80369ba:	2b00      	cmp	r3, #0
 80369bc:	d01d      	beq.n	80369fa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80369be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80369c2:	d111      	bne.n	80369e8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80369c4:	687b      	ldr	r3, [r7, #4]
 80369c6:	3304      	adds	r3, #4
 80369c8:	2100      	movs	r1, #0
 80369ca:	4618      	mov	r0, r3
 80369cc:	f000 fd28 	bl	8037420 <RCCEx_PLL2_Config>
 80369d0:	4603      	mov	r3, r0
 80369d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80369d4:	e012      	b.n	80369fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80369d6:	687b      	ldr	r3, [r7, #4]
 80369d8:	3324      	adds	r3, #36	; 0x24
 80369da:	2102      	movs	r1, #2
 80369dc:	4618      	mov	r0, r3
 80369de:	f000 fdd1 	bl	8037584 <RCCEx_PLL3_Config>
 80369e2:	4603      	mov	r3, r0
 80369e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80369e6:	e009      	b.n	80369fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80369e8:	2301      	movs	r3, #1
 80369ea:	75fb      	strb	r3, [r7, #23]
      break;
 80369ec:	e006      	b.n	80369fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80369ee:	bf00      	nop
 80369f0:	e004      	b.n	80369fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80369f2:	bf00      	nop
 80369f4:	e002      	b.n	80369fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80369f6:	bf00      	nop
 80369f8:	e000      	b.n	80369fc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80369fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80369fc:	7dfb      	ldrb	r3, [r7, #23]
 80369fe:	2b00      	cmp	r3, #0
 8036a00:	d10a      	bne.n	8036a18 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8036a02:	4b2e      	ldr	r3, [pc, #184]	; (8036abc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8036a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8036a06:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8036a0a:	687b      	ldr	r3, [r7, #4]
 8036a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8036a10:	492a      	ldr	r1, [pc, #168]	; (8036abc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8036a12:	4313      	orrs	r3, r2
 8036a14:	654b      	str	r3, [r1, #84]	; 0x54
 8036a16:	e001      	b.n	8036a1c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036a18:	7dfb      	ldrb	r3, [r7, #23]
 8036a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8036a1c:	687b      	ldr	r3, [r7, #4]
 8036a1e:	681b      	ldr	r3, [r3, #0]
 8036a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036a24:	2b00      	cmp	r3, #0
 8036a26:	d04d      	beq.n	8036ac4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8036a28:	687b      	ldr	r3, [r7, #4]
 8036a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8036a2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8036a32:	d02e      	beq.n	8036a92 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8036a34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8036a38:	d828      	bhi.n	8036a8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8036a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036a3e:	d02a      	beq.n	8036a96 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8036a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036a44:	d822      	bhi.n	8036a8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8036a46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8036a4a:	d026      	beq.n	8036a9a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8036a4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8036a50:	d81c      	bhi.n	8036a8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8036a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8036a56:	d010      	beq.n	8036a7a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8036a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8036a5c:	d816      	bhi.n	8036a8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8036a5e:	2b00      	cmp	r3, #0
 8036a60:	d01d      	beq.n	8036a9e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8036a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8036a66:	d111      	bne.n	8036a8c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8036a68:	687b      	ldr	r3, [r7, #4]
 8036a6a:	3304      	adds	r3, #4
 8036a6c:	2100      	movs	r1, #0
 8036a6e:	4618      	mov	r0, r3
 8036a70:	f000 fcd6 	bl	8037420 <RCCEx_PLL2_Config>
 8036a74:	4603      	mov	r3, r0
 8036a76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8036a78:	e012      	b.n	8036aa0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8036a7a:	687b      	ldr	r3, [r7, #4]
 8036a7c:	3324      	adds	r3, #36	; 0x24
 8036a7e:	2102      	movs	r1, #2
 8036a80:	4618      	mov	r0, r3
 8036a82:	f000 fd7f 	bl	8037584 <RCCEx_PLL3_Config>
 8036a86:	4603      	mov	r3, r0
 8036a88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8036a8a:	e009      	b.n	8036aa0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8036a8c:	2301      	movs	r3, #1
 8036a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8036a90:	e006      	b.n	8036aa0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8036a92:	bf00      	nop
 8036a94:	e004      	b.n	8036aa0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8036a96:	bf00      	nop
 8036a98:	e002      	b.n	8036aa0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8036a9a:	bf00      	nop
 8036a9c:	e000      	b.n	8036aa0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8036a9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8036aa0:	7dfb      	ldrb	r3, [r7, #23]
 8036aa2:	2b00      	cmp	r3, #0
 8036aa4:	d10c      	bne.n	8036ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8036aa6:	4b05      	ldr	r3, [pc, #20]	; (8036abc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8036aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036aaa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8036aae:	687b      	ldr	r3, [r7, #4]
 8036ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8036ab4:	4901      	ldr	r1, [pc, #4]	; (8036abc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8036ab6:	4313      	orrs	r3, r2
 8036ab8:	658b      	str	r3, [r1, #88]	; 0x58
 8036aba:	e003      	b.n	8036ac4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8036abc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036ac0:	7dfb      	ldrb	r3, [r7, #23]
 8036ac2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8036ac4:	687b      	ldr	r3, [r7, #4]
 8036ac6:	681b      	ldr	r3, [r3, #0]
 8036ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036acc:	2b00      	cmp	r3, #0
 8036ace:	d04b      	beq.n	8036b68 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8036ad0:	687b      	ldr	r3, [r7, #4]
 8036ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8036ad6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8036ada:	d02e      	beq.n	8036b3a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8036adc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8036ae0:	d828      	bhi.n	8036b34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8036ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8036ae6:	d02a      	beq.n	8036b3e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8036ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8036aec:	d822      	bhi.n	8036b34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8036aee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8036af2:	d026      	beq.n	8036b42 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8036af4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8036af8:	d81c      	bhi.n	8036b34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8036afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036afe:	d010      	beq.n	8036b22 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8036b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036b04:	d816      	bhi.n	8036b34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8036b06:	2b00      	cmp	r3, #0
 8036b08:	d01d      	beq.n	8036b46 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8036b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8036b0e:	d111      	bne.n	8036b34 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8036b10:	687b      	ldr	r3, [r7, #4]
 8036b12:	3304      	adds	r3, #4
 8036b14:	2100      	movs	r1, #0
 8036b16:	4618      	mov	r0, r3
 8036b18:	f000 fc82 	bl	8037420 <RCCEx_PLL2_Config>
 8036b1c:	4603      	mov	r3, r0
 8036b1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8036b20:	e012      	b.n	8036b48 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8036b22:	687b      	ldr	r3, [r7, #4]
 8036b24:	3324      	adds	r3, #36	; 0x24
 8036b26:	2102      	movs	r1, #2
 8036b28:	4618      	mov	r0, r3
 8036b2a:	f000 fd2b 	bl	8037584 <RCCEx_PLL3_Config>
 8036b2e:	4603      	mov	r3, r0
 8036b30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8036b32:	e009      	b.n	8036b48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8036b34:	2301      	movs	r3, #1
 8036b36:	75fb      	strb	r3, [r7, #23]
      break;
 8036b38:	e006      	b.n	8036b48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8036b3a:	bf00      	nop
 8036b3c:	e004      	b.n	8036b48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8036b3e:	bf00      	nop
 8036b40:	e002      	b.n	8036b48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8036b42:	bf00      	nop
 8036b44:	e000      	b.n	8036b48 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8036b46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8036b48:	7dfb      	ldrb	r3, [r7, #23]
 8036b4a:	2b00      	cmp	r3, #0
 8036b4c:	d10a      	bne.n	8036b64 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8036b4e:	4b9d      	ldr	r3, [pc, #628]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8036b56:	687b      	ldr	r3, [r7, #4]
 8036b58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8036b5c:	4999      	ldr	r1, [pc, #612]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036b5e:	4313      	orrs	r3, r2
 8036b60:	658b      	str	r3, [r1, #88]	; 0x58
 8036b62:	e001      	b.n	8036b68 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036b64:	7dfb      	ldrb	r3, [r7, #23]
 8036b66:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8036b68:	687b      	ldr	r3, [r7, #4]
 8036b6a:	681b      	ldr	r3, [r3, #0]
 8036b6c:	f003 0308 	and.w	r3, r3, #8
 8036b70:	2b00      	cmp	r3, #0
 8036b72:	d01a      	beq.n	8036baa <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8036b74:	687b      	ldr	r3, [r7, #4]
 8036b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8036b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036b7e:	d10a      	bne.n	8036b96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8036b80:	687b      	ldr	r3, [r7, #4]
 8036b82:	3324      	adds	r3, #36	; 0x24
 8036b84:	2102      	movs	r1, #2
 8036b86:	4618      	mov	r0, r3
 8036b88:	f000 fcfc 	bl	8037584 <RCCEx_PLL3_Config>
 8036b8c:	4603      	mov	r3, r0
 8036b8e:	2b00      	cmp	r3, #0
 8036b90:	d001      	beq.n	8036b96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8036b92:	2301      	movs	r3, #1
 8036b94:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8036b96:	4b8b      	ldr	r3, [pc, #556]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8036b9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8036b9e:	687b      	ldr	r3, [r7, #4]
 8036ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8036ba4:	4987      	ldr	r1, [pc, #540]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036ba6:	4313      	orrs	r3, r2
 8036ba8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8036baa:	687b      	ldr	r3, [r7, #4]
 8036bac:	681b      	ldr	r3, [r3, #0]
 8036bae:	f003 0310 	and.w	r3, r3, #16
 8036bb2:	2b00      	cmp	r3, #0
 8036bb4:	d01a      	beq.n	8036bec <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8036bb6:	687b      	ldr	r3, [r7, #4]
 8036bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8036bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8036bc0:	d10a      	bne.n	8036bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8036bc2:	687b      	ldr	r3, [r7, #4]
 8036bc4:	3324      	adds	r3, #36	; 0x24
 8036bc6:	2102      	movs	r1, #2
 8036bc8:	4618      	mov	r0, r3
 8036bca:	f000 fcdb 	bl	8037584 <RCCEx_PLL3_Config>
 8036bce:	4603      	mov	r3, r0
 8036bd0:	2b00      	cmp	r3, #0
 8036bd2:	d001      	beq.n	8036bd8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8036bd4:	2301      	movs	r3, #1
 8036bd6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8036bd8:	4b7a      	ldr	r3, [pc, #488]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8036be0:	687b      	ldr	r3, [r7, #4]
 8036be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8036be6:	4977      	ldr	r1, [pc, #476]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036be8:	4313      	orrs	r3, r2
 8036bea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8036bec:	687b      	ldr	r3, [r7, #4]
 8036bee:	681b      	ldr	r3, [r3, #0]
 8036bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8036bf4:	2b00      	cmp	r3, #0
 8036bf6:	d034      	beq.n	8036c62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8036bf8:	687b      	ldr	r3, [r7, #4]
 8036bfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8036bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8036c02:	d01d      	beq.n	8036c40 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8036c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8036c08:	d817      	bhi.n	8036c3a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8036c0a:	2b00      	cmp	r3, #0
 8036c0c:	d003      	beq.n	8036c16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8036c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8036c12:	d009      	beq.n	8036c28 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8036c14:	e011      	b.n	8036c3a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8036c16:	687b      	ldr	r3, [r7, #4]
 8036c18:	3304      	adds	r3, #4
 8036c1a:	2100      	movs	r1, #0
 8036c1c:	4618      	mov	r0, r3
 8036c1e:	f000 fbff 	bl	8037420 <RCCEx_PLL2_Config>
 8036c22:	4603      	mov	r3, r0
 8036c24:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8036c26:	e00c      	b.n	8036c42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8036c28:	687b      	ldr	r3, [r7, #4]
 8036c2a:	3324      	adds	r3, #36	; 0x24
 8036c2c:	2102      	movs	r1, #2
 8036c2e:	4618      	mov	r0, r3
 8036c30:	f000 fca8 	bl	8037584 <RCCEx_PLL3_Config>
 8036c34:	4603      	mov	r3, r0
 8036c36:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8036c38:	e003      	b.n	8036c42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8036c3a:	2301      	movs	r3, #1
 8036c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8036c3e:	e000      	b.n	8036c42 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8036c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8036c42:	7dfb      	ldrb	r3, [r7, #23]
 8036c44:	2b00      	cmp	r3, #0
 8036c46:	d10a      	bne.n	8036c5e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8036c48:	4b5e      	ldr	r3, [pc, #376]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8036c50:	687b      	ldr	r3, [r7, #4]
 8036c52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8036c56:	495b      	ldr	r1, [pc, #364]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036c58:	4313      	orrs	r3, r2
 8036c5a:	658b      	str	r3, [r1, #88]	; 0x58
 8036c5c:	e001      	b.n	8036c62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036c5e:	7dfb      	ldrb	r3, [r7, #23]
 8036c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8036c62:	687b      	ldr	r3, [r7, #4]
 8036c64:	681b      	ldr	r3, [r3, #0]
 8036c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8036c6a:	2b00      	cmp	r3, #0
 8036c6c:	d033      	beq.n	8036cd6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8036c6e:	687b      	ldr	r3, [r7, #4]
 8036c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036c74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8036c78:	d01c      	beq.n	8036cb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8036c7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8036c7e:	d816      	bhi.n	8036cae <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8036c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8036c84:	d003      	beq.n	8036c8e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8036c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8036c8a:	d007      	beq.n	8036c9c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8036c8c:	e00f      	b.n	8036cae <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8036c8e:	4b4d      	ldr	r3, [pc, #308]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036c92:	4a4c      	ldr	r2, [pc, #304]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8036c98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8036c9a:	e00c      	b.n	8036cb6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8036c9c:	687b      	ldr	r3, [r7, #4]
 8036c9e:	3324      	adds	r3, #36	; 0x24
 8036ca0:	2101      	movs	r1, #1
 8036ca2:	4618      	mov	r0, r3
 8036ca4:	f000 fc6e 	bl	8037584 <RCCEx_PLL3_Config>
 8036ca8:	4603      	mov	r3, r0
 8036caa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8036cac:	e003      	b.n	8036cb6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8036cae:	2301      	movs	r3, #1
 8036cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8036cb2:	e000      	b.n	8036cb6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8036cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8036cb6:	7dfb      	ldrb	r3, [r7, #23]
 8036cb8:	2b00      	cmp	r3, #0
 8036cba:	d10a      	bne.n	8036cd2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8036cbc:	4b41      	ldr	r3, [pc, #260]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8036cc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8036cc4:	687b      	ldr	r3, [r7, #4]
 8036cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036cca:	493e      	ldr	r1, [pc, #248]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036ccc:	4313      	orrs	r3, r2
 8036cce:	654b      	str	r3, [r1, #84]	; 0x54
 8036cd0:	e001      	b.n	8036cd6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036cd2:	7dfb      	ldrb	r3, [r7, #23]
 8036cd4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8036cd6:	687b      	ldr	r3, [r7, #4]
 8036cd8:	681b      	ldr	r3, [r3, #0]
 8036cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8036cde:	2b00      	cmp	r3, #0
 8036ce0:	d029      	beq.n	8036d36 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8036ce2:	687b      	ldr	r3, [r7, #4]
 8036ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8036ce6:	2b00      	cmp	r3, #0
 8036ce8:	d003      	beq.n	8036cf2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8036cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8036cee:	d007      	beq.n	8036d00 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8036cf0:	e00f      	b.n	8036d12 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8036cf2:	4b34      	ldr	r3, [pc, #208]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036cf6:	4a33      	ldr	r2, [pc, #204]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8036cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8036cfe:	e00b      	b.n	8036d18 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8036d00:	687b      	ldr	r3, [r7, #4]
 8036d02:	3304      	adds	r3, #4
 8036d04:	2102      	movs	r1, #2
 8036d06:	4618      	mov	r0, r3
 8036d08:	f000 fb8a 	bl	8037420 <RCCEx_PLL2_Config>
 8036d0c:	4603      	mov	r3, r0
 8036d0e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8036d10:	e002      	b.n	8036d18 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8036d12:	2301      	movs	r3, #1
 8036d14:	75fb      	strb	r3, [r7, #23]
      break;
 8036d16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8036d18:	7dfb      	ldrb	r3, [r7, #23]
 8036d1a:	2b00      	cmp	r3, #0
 8036d1c:	d109      	bne.n	8036d32 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8036d1e:	4b29      	ldr	r3, [pc, #164]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8036d22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8036d26:	687b      	ldr	r3, [r7, #4]
 8036d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8036d2a:	4926      	ldr	r1, [pc, #152]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036d2c:	4313      	orrs	r3, r2
 8036d2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8036d30:	e001      	b.n	8036d36 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036d32:	7dfb      	ldrb	r3, [r7, #23]
 8036d34:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8036d36:	687b      	ldr	r3, [r7, #4]
 8036d38:	681b      	ldr	r3, [r3, #0]
 8036d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8036d3e:	2b00      	cmp	r3, #0
 8036d40:	d00a      	beq.n	8036d58 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8036d42:	687b      	ldr	r3, [r7, #4]
 8036d44:	3324      	adds	r3, #36	; 0x24
 8036d46:	2102      	movs	r1, #2
 8036d48:	4618      	mov	r0, r3
 8036d4a:	f000 fc1b 	bl	8037584 <RCCEx_PLL3_Config>
 8036d4e:	4603      	mov	r3, r0
 8036d50:	2b00      	cmp	r3, #0
 8036d52:	d001      	beq.n	8036d58 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8036d54:	2301      	movs	r3, #1
 8036d56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8036d58:	687b      	ldr	r3, [r7, #4]
 8036d5a:	681b      	ldr	r3, [r3, #0]
 8036d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8036d60:	2b00      	cmp	r3, #0
 8036d62:	d033      	beq.n	8036dcc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8036d64:	687b      	ldr	r3, [r7, #4]
 8036d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8036d6c:	d017      	beq.n	8036d9e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8036d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8036d72:	d811      	bhi.n	8036d98 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8036d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8036d78:	d013      	beq.n	8036da2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8036d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8036d7e:	d80b      	bhi.n	8036d98 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8036d80:	2b00      	cmp	r3, #0
 8036d82:	d010      	beq.n	8036da6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8036d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8036d88:	d106      	bne.n	8036d98 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8036d8a:	4b0e      	ldr	r3, [pc, #56]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036d8e:	4a0d      	ldr	r2, [pc, #52]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8036d94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8036d96:	e007      	b.n	8036da8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8036d98:	2301      	movs	r3, #1
 8036d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8036d9c:	e004      	b.n	8036da8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8036d9e:	bf00      	nop
 8036da0:	e002      	b.n	8036da8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8036da2:	bf00      	nop
 8036da4:	e000      	b.n	8036da8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8036da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8036da8:	7dfb      	ldrb	r3, [r7, #23]
 8036daa:	2b00      	cmp	r3, #0
 8036dac:	d10c      	bne.n	8036dc8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8036dae:	4b05      	ldr	r3, [pc, #20]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8036db2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8036db6:	687b      	ldr	r3, [r7, #4]
 8036db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036dba:	4902      	ldr	r1, [pc, #8]	; (8036dc4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8036dbc:	4313      	orrs	r3, r2
 8036dbe:	654b      	str	r3, [r1, #84]	; 0x54
 8036dc0:	e004      	b.n	8036dcc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8036dc2:	bf00      	nop
 8036dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8036dc8:	7dfb      	ldrb	r3, [r7, #23]
 8036dca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8036dcc:	687b      	ldr	r3, [r7, #4]
 8036dce:	681b      	ldr	r3, [r3, #0]
 8036dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8036dd4:	2b00      	cmp	r3, #0
 8036dd6:	d008      	beq.n	8036dea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8036dd8:	4b31      	ldr	r3, [pc, #196]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036ddc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8036de0:	687b      	ldr	r3, [r7, #4]
 8036de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8036de4:	492e      	ldr	r1, [pc, #184]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036de6:	4313      	orrs	r3, r2
 8036de8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8036dea:	687b      	ldr	r3, [r7, #4]
 8036dec:	681b      	ldr	r3, [r3, #0]
 8036dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8036df2:	2b00      	cmp	r3, #0
 8036df4:	d009      	beq.n	8036e0a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8036df6:	4b2a      	ldr	r3, [pc, #168]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036df8:	691b      	ldr	r3, [r3, #16]
 8036dfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8036dfe:	687b      	ldr	r3, [r7, #4]
 8036e00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8036e04:	4926      	ldr	r1, [pc, #152]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036e06:	4313      	orrs	r3, r2
 8036e08:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8036e0a:	687b      	ldr	r3, [r7, #4]
 8036e0c:	681b      	ldr	r3, [r3, #0]
 8036e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8036e12:	2b00      	cmp	r3, #0
 8036e14:	d008      	beq.n	8036e28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8036e16:	4b22      	ldr	r3, [pc, #136]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036e1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8036e1e:	687b      	ldr	r3, [r7, #4]
 8036e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8036e22:	491f      	ldr	r1, [pc, #124]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036e24:	4313      	orrs	r3, r2
 8036e26:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8036e28:	687b      	ldr	r3, [r7, #4]
 8036e2a:	681b      	ldr	r3, [r3, #0]
 8036e2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8036e30:	2b00      	cmp	r3, #0
 8036e32:	d00d      	beq.n	8036e50 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8036e34:	4b1a      	ldr	r3, [pc, #104]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036e36:	691b      	ldr	r3, [r3, #16]
 8036e38:	4a19      	ldr	r2, [pc, #100]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036e3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8036e3e:	6113      	str	r3, [r2, #16]
 8036e40:	4b17      	ldr	r3, [pc, #92]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036e42:	691a      	ldr	r2, [r3, #16]
 8036e44:	687b      	ldr	r3, [r7, #4]
 8036e46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8036e4a:	4915      	ldr	r1, [pc, #84]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036e4c:	4313      	orrs	r3, r2
 8036e4e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8036e50:	687b      	ldr	r3, [r7, #4]
 8036e52:	681b      	ldr	r3, [r3, #0]
 8036e54:	2b00      	cmp	r3, #0
 8036e56:	da08      	bge.n	8036e6a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8036e58:	4b11      	ldr	r3, [pc, #68]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8036e5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8036e60:	687b      	ldr	r3, [r7, #4]
 8036e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036e64:	490e      	ldr	r1, [pc, #56]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036e66:	4313      	orrs	r3, r2
 8036e68:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8036e6a:	687b      	ldr	r3, [r7, #4]
 8036e6c:	681b      	ldr	r3, [r3, #0]
 8036e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8036e72:	2b00      	cmp	r3, #0
 8036e74:	d009      	beq.n	8036e8a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8036e76:	4b0a      	ldr	r3, [pc, #40]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8036e7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8036e7e:	687b      	ldr	r3, [r7, #4]
 8036e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8036e84:	4906      	ldr	r1, [pc, #24]	; (8036ea0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036e86:	4313      	orrs	r3, r2
 8036e88:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8036e8a:	7dbb      	ldrb	r3, [r7, #22]
 8036e8c:	2b00      	cmp	r3, #0
 8036e8e:	d101      	bne.n	8036e94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8036e90:	2300      	movs	r3, #0
 8036e92:	e000      	b.n	8036e96 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8036e94:	2301      	movs	r3, #1
}
 8036e96:	4618      	mov	r0, r3
 8036e98:	3718      	adds	r7, #24
 8036e9a:	46bd      	mov	sp, r7
 8036e9c:	bd80      	pop	{r7, pc}
 8036e9e:	bf00      	nop
 8036ea0:	58024400 	.word	0x58024400

08036ea4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8036ea4:	b580      	push	{r7, lr}
 8036ea6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8036ea8:	f7ff f85a 	bl	8035f60 <HAL_RCC_GetHCLKFreq>
 8036eac:	4602      	mov	r2, r0
 8036eae:	4b06      	ldr	r3, [pc, #24]	; (8036ec8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8036eb0:	6a1b      	ldr	r3, [r3, #32]
 8036eb2:	091b      	lsrs	r3, r3, #4
 8036eb4:	f003 0307 	and.w	r3, r3, #7
 8036eb8:	4904      	ldr	r1, [pc, #16]	; (8036ecc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8036eba:	5ccb      	ldrb	r3, [r1, r3]
 8036ebc:	f003 031f 	and.w	r3, r3, #31
 8036ec0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8036ec4:	4618      	mov	r0, r3
 8036ec6:	bd80      	pop	{r7, pc}
 8036ec8:	58024400 	.word	0x58024400
 8036ecc:	0805c614 	.word	0x0805c614

08036ed0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8036ed0:	b480      	push	{r7}
 8036ed2:	b089      	sub	sp, #36	; 0x24
 8036ed4:	af00      	add	r7, sp, #0
 8036ed6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8036ed8:	4ba1      	ldr	r3, [pc, #644]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036edc:	f003 0303 	and.w	r3, r3, #3
 8036ee0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8036ee2:	4b9f      	ldr	r3, [pc, #636]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036ee6:	0b1b      	lsrs	r3, r3, #12
 8036ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8036eec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8036eee:	4b9c      	ldr	r3, [pc, #624]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036ef2:	091b      	lsrs	r3, r3, #4
 8036ef4:	f003 0301 	and.w	r3, r3, #1
 8036ef8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8036efa:	4b99      	ldr	r3, [pc, #612]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036efe:	08db      	lsrs	r3, r3, #3
 8036f00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8036f04:	693a      	ldr	r2, [r7, #16]
 8036f06:	fb02 f303 	mul.w	r3, r2, r3
 8036f0a:	ee07 3a90 	vmov	s15, r3
 8036f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8036f12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8036f16:	697b      	ldr	r3, [r7, #20]
 8036f18:	2b00      	cmp	r3, #0
 8036f1a:	f000 8111 	beq.w	8037140 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8036f1e:	69bb      	ldr	r3, [r7, #24]
 8036f20:	2b02      	cmp	r3, #2
 8036f22:	f000 8083 	beq.w	803702c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8036f26:	69bb      	ldr	r3, [r7, #24]
 8036f28:	2b02      	cmp	r3, #2
 8036f2a:	f200 80a1 	bhi.w	8037070 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8036f2e:	69bb      	ldr	r3, [r7, #24]
 8036f30:	2b00      	cmp	r3, #0
 8036f32:	d003      	beq.n	8036f3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8036f34:	69bb      	ldr	r3, [r7, #24]
 8036f36:	2b01      	cmp	r3, #1
 8036f38:	d056      	beq.n	8036fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8036f3a:	e099      	b.n	8037070 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8036f3c:	4b88      	ldr	r3, [pc, #544]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036f3e:	681b      	ldr	r3, [r3, #0]
 8036f40:	f003 0320 	and.w	r3, r3, #32
 8036f44:	2b00      	cmp	r3, #0
 8036f46:	d02d      	beq.n	8036fa4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8036f48:	4b85      	ldr	r3, [pc, #532]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036f4a:	681b      	ldr	r3, [r3, #0]
 8036f4c:	08db      	lsrs	r3, r3, #3
 8036f4e:	f003 0303 	and.w	r3, r3, #3
 8036f52:	4a84      	ldr	r2, [pc, #528]	; (8037164 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8036f54:	fa22 f303 	lsr.w	r3, r2, r3
 8036f58:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8036f5a:	68bb      	ldr	r3, [r7, #8]
 8036f5c:	ee07 3a90 	vmov	s15, r3
 8036f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8036f64:	697b      	ldr	r3, [r7, #20]
 8036f66:	ee07 3a90 	vmov	s15, r3
 8036f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8036f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8036f72:	4b7b      	ldr	r3, [pc, #492]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8036f7a:	ee07 3a90 	vmov	s15, r3
 8036f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8036f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8036f86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8037168 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8036f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8036f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8036f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8036f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8036f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8036f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8036fa2:	e087      	b.n	80370b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8036fa4:	697b      	ldr	r3, [r7, #20]
 8036fa6:	ee07 3a90 	vmov	s15, r3
 8036faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8036fae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 803716c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8036fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8036fb6:	4b6a      	ldr	r3, [pc, #424]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8036fbe:	ee07 3a90 	vmov	s15, r3
 8036fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8036fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8036fca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8037168 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8036fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8036fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8036fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8036fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8036fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8036fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8036fe6:	e065      	b.n	80370b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8036fe8:	697b      	ldr	r3, [r7, #20]
 8036fea:	ee07 3a90 	vmov	s15, r3
 8036fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8036ff2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8037170 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8036ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8036ffa:	4b59      	ldr	r3, [pc, #356]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8037002:	ee07 3a90 	vmov	s15, r3
 8037006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803700a:	ed97 6a03 	vldr	s12, [r7, #12]
 803700e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8037168 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8037012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8037016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803701a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803701e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8037022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8037026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803702a:	e043      	b.n	80370b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 803702c:	697b      	ldr	r3, [r7, #20]
 803702e:	ee07 3a90 	vmov	s15, r3
 8037032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8037036:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8037174 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 803703a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803703e:	4b48      	ldr	r3, [pc, #288]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8037040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8037046:	ee07 3a90 	vmov	s15, r3
 803704a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803704e:	ed97 6a03 	vldr	s12, [r7, #12]
 8037052:	eddf 5a45 	vldr	s11, [pc, #276]	; 8037168 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8037056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803705a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803705e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8037062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8037066:	ee67 7a27 	vmul.f32	s15, s14, s15
 803706a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803706e:	e021      	b.n	80370b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8037070:	697b      	ldr	r3, [r7, #20]
 8037072:	ee07 3a90 	vmov	s15, r3
 8037076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803707a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8037170 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 803707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8037082:	4b37      	ldr	r3, [pc, #220]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8037084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803708a:	ee07 3a90 	vmov	s15, r3
 803708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8037092:	ed97 6a03 	vldr	s12, [r7, #12]
 8037096:	eddf 5a34 	vldr	s11, [pc, #208]	; 8037168 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 803709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80370a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80370a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80370aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80370ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80370b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80370b4:	4b2a      	ldr	r3, [pc, #168]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80370b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80370b8:	0a5b      	lsrs	r3, r3, #9
 80370ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80370be:	ee07 3a90 	vmov	s15, r3
 80370c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80370c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80370ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80370ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80370d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80370d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80370da:	ee17 2a90 	vmov	r2, s15
 80370de:	687b      	ldr	r3, [r7, #4]
 80370e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80370e2:	4b1f      	ldr	r3, [pc, #124]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80370e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80370e6:	0c1b      	lsrs	r3, r3, #16
 80370e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80370ec:	ee07 3a90 	vmov	s15, r3
 80370f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80370f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80370f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80370fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8037100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8037104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8037108:	ee17 2a90 	vmov	r2, s15
 803710c:	687b      	ldr	r3, [r7, #4]
 803710e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8037110:	4b13      	ldr	r3, [pc, #76]	; (8037160 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8037112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037114:	0e1b      	lsrs	r3, r3, #24
 8037116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803711a:	ee07 3a90 	vmov	s15, r3
 803711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8037122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8037126:	ee37 7a87 	vadd.f32	s14, s15, s14
 803712a:	edd7 6a07 	vldr	s13, [r7, #28]
 803712e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8037132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8037136:	ee17 2a90 	vmov	r2, s15
 803713a:	687b      	ldr	r3, [r7, #4]
 803713c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 803713e:	e008      	b.n	8037152 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8037140:	687b      	ldr	r3, [r7, #4]
 8037142:	2200      	movs	r2, #0
 8037144:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8037146:	687b      	ldr	r3, [r7, #4]
 8037148:	2200      	movs	r2, #0
 803714a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 803714c:	687b      	ldr	r3, [r7, #4]
 803714e:	2200      	movs	r2, #0
 8037150:	609a      	str	r2, [r3, #8]
}
 8037152:	bf00      	nop
 8037154:	3724      	adds	r7, #36	; 0x24
 8037156:	46bd      	mov	sp, r7
 8037158:	f85d 7b04 	ldr.w	r7, [sp], #4
 803715c:	4770      	bx	lr
 803715e:	bf00      	nop
 8037160:	58024400 	.word	0x58024400
 8037164:	03d09000 	.word	0x03d09000
 8037168:	46000000 	.word	0x46000000
 803716c:	4c742400 	.word	0x4c742400
 8037170:	4a742400 	.word	0x4a742400
 8037174:	4bbebc20 	.word	0x4bbebc20

08037178 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8037178:	b480      	push	{r7}
 803717a:	b089      	sub	sp, #36	; 0x24
 803717c:	af00      	add	r7, sp, #0
 803717e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8037180:	4ba1      	ldr	r3, [pc, #644]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8037182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037184:	f003 0303 	and.w	r3, r3, #3
 8037188:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 803718a:	4b9f      	ldr	r3, [pc, #636]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803718e:	0d1b      	lsrs	r3, r3, #20
 8037190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8037194:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8037196:	4b9c      	ldr	r3, [pc, #624]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8037198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803719a:	0a1b      	lsrs	r3, r3, #8
 803719c:	f003 0301 	and.w	r3, r3, #1
 80371a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80371a2:	4b99      	ldr	r3, [pc, #612]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80371a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80371a6:	08db      	lsrs	r3, r3, #3
 80371a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80371ac:	693a      	ldr	r2, [r7, #16]
 80371ae:	fb02 f303 	mul.w	r3, r2, r3
 80371b2:	ee07 3a90 	vmov	s15, r3
 80371b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80371ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80371be:	697b      	ldr	r3, [r7, #20]
 80371c0:	2b00      	cmp	r3, #0
 80371c2:	f000 8111 	beq.w	80373e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80371c6:	69bb      	ldr	r3, [r7, #24]
 80371c8:	2b02      	cmp	r3, #2
 80371ca:	f000 8083 	beq.w	80372d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80371ce:	69bb      	ldr	r3, [r7, #24]
 80371d0:	2b02      	cmp	r3, #2
 80371d2:	f200 80a1 	bhi.w	8037318 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80371d6:	69bb      	ldr	r3, [r7, #24]
 80371d8:	2b00      	cmp	r3, #0
 80371da:	d003      	beq.n	80371e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80371dc:	69bb      	ldr	r3, [r7, #24]
 80371de:	2b01      	cmp	r3, #1
 80371e0:	d056      	beq.n	8037290 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80371e2:	e099      	b.n	8037318 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80371e4:	4b88      	ldr	r3, [pc, #544]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80371e6:	681b      	ldr	r3, [r3, #0]
 80371e8:	f003 0320 	and.w	r3, r3, #32
 80371ec:	2b00      	cmp	r3, #0
 80371ee:	d02d      	beq.n	803724c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80371f0:	4b85      	ldr	r3, [pc, #532]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80371f2:	681b      	ldr	r3, [r3, #0]
 80371f4:	08db      	lsrs	r3, r3, #3
 80371f6:	f003 0303 	and.w	r3, r3, #3
 80371fa:	4a84      	ldr	r2, [pc, #528]	; (803740c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80371fc:	fa22 f303 	lsr.w	r3, r2, r3
 8037200:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8037202:	68bb      	ldr	r3, [r7, #8]
 8037204:	ee07 3a90 	vmov	s15, r3
 8037208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803720c:	697b      	ldr	r3, [r7, #20]
 803720e:	ee07 3a90 	vmov	s15, r3
 8037212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8037216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803721a:	4b7b      	ldr	r3, [pc, #492]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803721e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8037222:	ee07 3a90 	vmov	s15, r3
 8037226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803722a:	ed97 6a03 	vldr	s12, [r7, #12]
 803722e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8037410 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8037232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8037236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803723a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803723e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8037242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8037246:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 803724a:	e087      	b.n	803735c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 803724c:	697b      	ldr	r3, [r7, #20]
 803724e:	ee07 3a90 	vmov	s15, r3
 8037252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8037256:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8037414 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 803725a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803725e:	4b6a      	ldr	r3, [pc, #424]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8037260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8037262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8037266:	ee07 3a90 	vmov	s15, r3
 803726a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803726e:	ed97 6a03 	vldr	s12, [r7, #12]
 8037272:	eddf 5a67 	vldr	s11, [pc, #412]	; 8037410 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8037276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803727a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803727e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8037282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8037286:	ee67 7a27 	vmul.f32	s15, s14, s15
 803728a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803728e:	e065      	b.n	803735c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8037290:	697b      	ldr	r3, [r7, #20]
 8037292:	ee07 3a90 	vmov	s15, r3
 8037296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803729a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8037418 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 803729e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80372a2:	4b59      	ldr	r3, [pc, #356]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80372a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80372a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80372aa:	ee07 3a90 	vmov	s15, r3
 80372ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80372b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80372b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8037410 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80372ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80372be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80372c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80372c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80372ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80372ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80372d2:	e043      	b.n	803735c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80372d4:	697b      	ldr	r3, [r7, #20]
 80372d6:	ee07 3a90 	vmov	s15, r3
 80372da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80372de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 803741c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80372e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80372e6:	4b48      	ldr	r3, [pc, #288]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80372e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80372ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80372ee:	ee07 3a90 	vmov	s15, r3
 80372f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80372f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80372fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8037410 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80372fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8037302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8037306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803730a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803730e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8037312:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8037316:	e021      	b.n	803735c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8037318:	697b      	ldr	r3, [r7, #20]
 803731a:	ee07 3a90 	vmov	s15, r3
 803731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8037322:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8037418 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8037326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803732a:	4b37      	ldr	r3, [pc, #220]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803732e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8037332:	ee07 3a90 	vmov	s15, r3
 8037336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803733a:	ed97 6a03 	vldr	s12, [r7, #12]
 803733e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8037410 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8037342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8037346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803734a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803734e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8037352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8037356:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803735a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 803735c:	4b2a      	ldr	r3, [pc, #168]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8037360:	0a5b      	lsrs	r3, r3, #9
 8037362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8037366:	ee07 3a90 	vmov	s15, r3
 803736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803736e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8037372:	ee37 7a87 	vadd.f32	s14, s15, s14
 8037376:	edd7 6a07 	vldr	s13, [r7, #28]
 803737a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 803737e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8037382:	ee17 2a90 	vmov	r2, s15
 8037386:	687b      	ldr	r3, [r7, #4]
 8037388:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 803738a:	4b1f      	ldr	r3, [pc, #124]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803738e:	0c1b      	lsrs	r3, r3, #16
 8037390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8037394:	ee07 3a90 	vmov	s15, r3
 8037398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803739c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80373a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80373a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80373a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80373ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80373b0:	ee17 2a90 	vmov	r2, s15
 80373b4:	687b      	ldr	r3, [r7, #4]
 80373b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80373b8:	4b13      	ldr	r3, [pc, #76]	; (8037408 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80373ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80373bc:	0e1b      	lsrs	r3, r3, #24
 80373be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80373c2:	ee07 3a90 	vmov	s15, r3
 80373c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80373ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80373ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80373d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80373d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80373da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80373de:	ee17 2a90 	vmov	r2, s15
 80373e2:	687b      	ldr	r3, [r7, #4]
 80373e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80373e6:	e008      	b.n	80373fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80373e8:	687b      	ldr	r3, [r7, #4]
 80373ea:	2200      	movs	r2, #0
 80373ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80373ee:	687b      	ldr	r3, [r7, #4]
 80373f0:	2200      	movs	r2, #0
 80373f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80373f4:	687b      	ldr	r3, [r7, #4]
 80373f6:	2200      	movs	r2, #0
 80373f8:	609a      	str	r2, [r3, #8]
}
 80373fa:	bf00      	nop
 80373fc:	3724      	adds	r7, #36	; 0x24
 80373fe:	46bd      	mov	sp, r7
 8037400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037404:	4770      	bx	lr
 8037406:	bf00      	nop
 8037408:	58024400 	.word	0x58024400
 803740c:	03d09000 	.word	0x03d09000
 8037410:	46000000 	.word	0x46000000
 8037414:	4c742400 	.word	0x4c742400
 8037418:	4a742400 	.word	0x4a742400
 803741c:	4bbebc20 	.word	0x4bbebc20

08037420 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8037420:	b580      	push	{r7, lr}
 8037422:	b084      	sub	sp, #16
 8037424:	af00      	add	r7, sp, #0
 8037426:	6078      	str	r0, [r7, #4]
 8037428:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 803742a:	2300      	movs	r3, #0
 803742c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 803742e:	4b53      	ldr	r3, [pc, #332]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037432:	f003 0303 	and.w	r3, r3, #3
 8037436:	2b03      	cmp	r3, #3
 8037438:	d101      	bne.n	803743e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 803743a:	2301      	movs	r3, #1
 803743c:	e099      	b.n	8037572 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 803743e:	4b4f      	ldr	r3, [pc, #316]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037440:	681b      	ldr	r3, [r3, #0]
 8037442:	4a4e      	ldr	r2, [pc, #312]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037444:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8037448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803744a:	f7f7 fe43 	bl	802f0d4 <HAL_GetTick>
 803744e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8037450:	e008      	b.n	8037464 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8037452:	f7f7 fe3f 	bl	802f0d4 <HAL_GetTick>
 8037456:	4602      	mov	r2, r0
 8037458:	68bb      	ldr	r3, [r7, #8]
 803745a:	1ad3      	subs	r3, r2, r3
 803745c:	2b02      	cmp	r3, #2
 803745e:	d901      	bls.n	8037464 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8037460:	2303      	movs	r3, #3
 8037462:	e086      	b.n	8037572 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8037464:	4b45      	ldr	r3, [pc, #276]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037466:	681b      	ldr	r3, [r3, #0]
 8037468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803746c:	2b00      	cmp	r3, #0
 803746e:	d1f0      	bne.n	8037452 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8037470:	4b42      	ldr	r3, [pc, #264]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037474:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8037478:	687b      	ldr	r3, [r7, #4]
 803747a:	681b      	ldr	r3, [r3, #0]
 803747c:	031b      	lsls	r3, r3, #12
 803747e:	493f      	ldr	r1, [pc, #252]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037480:	4313      	orrs	r3, r2
 8037482:	628b      	str	r3, [r1, #40]	; 0x28
 8037484:	687b      	ldr	r3, [r7, #4]
 8037486:	685b      	ldr	r3, [r3, #4]
 8037488:	3b01      	subs	r3, #1
 803748a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803748e:	687b      	ldr	r3, [r7, #4]
 8037490:	689b      	ldr	r3, [r3, #8]
 8037492:	3b01      	subs	r3, #1
 8037494:	025b      	lsls	r3, r3, #9
 8037496:	b29b      	uxth	r3, r3
 8037498:	431a      	orrs	r2, r3
 803749a:	687b      	ldr	r3, [r7, #4]
 803749c:	68db      	ldr	r3, [r3, #12]
 803749e:	3b01      	subs	r3, #1
 80374a0:	041b      	lsls	r3, r3, #16
 80374a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80374a6:	431a      	orrs	r2, r3
 80374a8:	687b      	ldr	r3, [r7, #4]
 80374aa:	691b      	ldr	r3, [r3, #16]
 80374ac:	3b01      	subs	r3, #1
 80374ae:	061b      	lsls	r3, r3, #24
 80374b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80374b4:	4931      	ldr	r1, [pc, #196]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 80374b6:	4313      	orrs	r3, r2
 80374b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80374ba:	4b30      	ldr	r3, [pc, #192]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 80374bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80374be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80374c2:	687b      	ldr	r3, [r7, #4]
 80374c4:	695b      	ldr	r3, [r3, #20]
 80374c6:	492d      	ldr	r1, [pc, #180]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 80374c8:	4313      	orrs	r3, r2
 80374ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80374cc:	4b2b      	ldr	r3, [pc, #172]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 80374ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80374d0:	f023 0220 	bic.w	r2, r3, #32
 80374d4:	687b      	ldr	r3, [r7, #4]
 80374d6:	699b      	ldr	r3, [r3, #24]
 80374d8:	4928      	ldr	r1, [pc, #160]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 80374da:	4313      	orrs	r3, r2
 80374dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80374de:	4b27      	ldr	r3, [pc, #156]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 80374e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80374e2:	4a26      	ldr	r2, [pc, #152]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 80374e4:	f023 0310 	bic.w	r3, r3, #16
 80374e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80374ea:	4b24      	ldr	r3, [pc, #144]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 80374ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80374ee:	4b24      	ldr	r3, [pc, #144]	; (8037580 <RCCEx_PLL2_Config+0x160>)
 80374f0:	4013      	ands	r3, r2
 80374f2:	687a      	ldr	r2, [r7, #4]
 80374f4:	69d2      	ldr	r2, [r2, #28]
 80374f6:	00d2      	lsls	r2, r2, #3
 80374f8:	4920      	ldr	r1, [pc, #128]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 80374fa:	4313      	orrs	r3, r2
 80374fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80374fe:	4b1f      	ldr	r3, [pc, #124]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037502:	4a1e      	ldr	r2, [pc, #120]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037504:	f043 0310 	orr.w	r3, r3, #16
 8037508:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 803750a:	683b      	ldr	r3, [r7, #0]
 803750c:	2b00      	cmp	r3, #0
 803750e:	d106      	bne.n	803751e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8037510:	4b1a      	ldr	r3, [pc, #104]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037514:	4a19      	ldr	r2, [pc, #100]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037516:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803751a:	62d3      	str	r3, [r2, #44]	; 0x2c
 803751c:	e00f      	b.n	803753e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 803751e:	683b      	ldr	r3, [r7, #0]
 8037520:	2b01      	cmp	r3, #1
 8037522:	d106      	bne.n	8037532 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8037524:	4b15      	ldr	r3, [pc, #84]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037528:	4a14      	ldr	r2, [pc, #80]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 803752a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 803752e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8037530:	e005      	b.n	803753e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8037532:	4b12      	ldr	r3, [pc, #72]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037536:	4a11      	ldr	r2, [pc, #68]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 803753c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 803753e:	4b0f      	ldr	r3, [pc, #60]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037540:	681b      	ldr	r3, [r3, #0]
 8037542:	4a0e      	ldr	r2, [pc, #56]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037544:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8037548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 803754a:	f7f7 fdc3 	bl	802f0d4 <HAL_GetTick>
 803754e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8037550:	e008      	b.n	8037564 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8037552:	f7f7 fdbf 	bl	802f0d4 <HAL_GetTick>
 8037556:	4602      	mov	r2, r0
 8037558:	68bb      	ldr	r3, [r7, #8]
 803755a:	1ad3      	subs	r3, r2, r3
 803755c:	2b02      	cmp	r3, #2
 803755e:	d901      	bls.n	8037564 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8037560:	2303      	movs	r3, #3
 8037562:	e006      	b.n	8037572 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8037564:	4b05      	ldr	r3, [pc, #20]	; (803757c <RCCEx_PLL2_Config+0x15c>)
 8037566:	681b      	ldr	r3, [r3, #0]
 8037568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803756c:	2b00      	cmp	r3, #0
 803756e:	d0f0      	beq.n	8037552 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8037570:	7bfb      	ldrb	r3, [r7, #15]
}
 8037572:	4618      	mov	r0, r3
 8037574:	3710      	adds	r7, #16
 8037576:	46bd      	mov	sp, r7
 8037578:	bd80      	pop	{r7, pc}
 803757a:	bf00      	nop
 803757c:	58024400 	.word	0x58024400
 8037580:	ffff0007 	.word	0xffff0007

08037584 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8037584:	b580      	push	{r7, lr}
 8037586:	b084      	sub	sp, #16
 8037588:	af00      	add	r7, sp, #0
 803758a:	6078      	str	r0, [r7, #4]
 803758c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 803758e:	2300      	movs	r3, #0
 8037590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8037592:	4b53      	ldr	r3, [pc, #332]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 8037594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037596:	f003 0303 	and.w	r3, r3, #3
 803759a:	2b03      	cmp	r3, #3
 803759c:	d101      	bne.n	80375a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 803759e:	2301      	movs	r3, #1
 80375a0:	e099      	b.n	80376d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80375a2:	4b4f      	ldr	r3, [pc, #316]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 80375a4:	681b      	ldr	r3, [r3, #0]
 80375a6:	4a4e      	ldr	r2, [pc, #312]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 80375a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80375ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80375ae:	f7f7 fd91 	bl	802f0d4 <HAL_GetTick>
 80375b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80375b4:	e008      	b.n	80375c8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80375b6:	f7f7 fd8d 	bl	802f0d4 <HAL_GetTick>
 80375ba:	4602      	mov	r2, r0
 80375bc:	68bb      	ldr	r3, [r7, #8]
 80375be:	1ad3      	subs	r3, r2, r3
 80375c0:	2b02      	cmp	r3, #2
 80375c2:	d901      	bls.n	80375c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80375c4:	2303      	movs	r3, #3
 80375c6:	e086      	b.n	80376d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80375c8:	4b45      	ldr	r3, [pc, #276]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 80375ca:	681b      	ldr	r3, [r3, #0]
 80375cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80375d0:	2b00      	cmp	r3, #0
 80375d2:	d1f0      	bne.n	80375b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80375d4:	4b42      	ldr	r3, [pc, #264]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 80375d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80375d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80375dc:	687b      	ldr	r3, [r7, #4]
 80375de:	681b      	ldr	r3, [r3, #0]
 80375e0:	051b      	lsls	r3, r3, #20
 80375e2:	493f      	ldr	r1, [pc, #252]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 80375e4:	4313      	orrs	r3, r2
 80375e6:	628b      	str	r3, [r1, #40]	; 0x28
 80375e8:	687b      	ldr	r3, [r7, #4]
 80375ea:	685b      	ldr	r3, [r3, #4]
 80375ec:	3b01      	subs	r3, #1
 80375ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80375f2:	687b      	ldr	r3, [r7, #4]
 80375f4:	689b      	ldr	r3, [r3, #8]
 80375f6:	3b01      	subs	r3, #1
 80375f8:	025b      	lsls	r3, r3, #9
 80375fa:	b29b      	uxth	r3, r3
 80375fc:	431a      	orrs	r2, r3
 80375fe:	687b      	ldr	r3, [r7, #4]
 8037600:	68db      	ldr	r3, [r3, #12]
 8037602:	3b01      	subs	r3, #1
 8037604:	041b      	lsls	r3, r3, #16
 8037606:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 803760a:	431a      	orrs	r2, r3
 803760c:	687b      	ldr	r3, [r7, #4]
 803760e:	691b      	ldr	r3, [r3, #16]
 8037610:	3b01      	subs	r3, #1
 8037612:	061b      	lsls	r3, r3, #24
 8037614:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8037618:	4931      	ldr	r1, [pc, #196]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 803761a:	4313      	orrs	r3, r2
 803761c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 803761e:	4b30      	ldr	r3, [pc, #192]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 8037620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037622:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8037626:	687b      	ldr	r3, [r7, #4]
 8037628:	695b      	ldr	r3, [r3, #20]
 803762a:	492d      	ldr	r1, [pc, #180]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 803762c:	4313      	orrs	r3, r2
 803762e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8037630:	4b2b      	ldr	r3, [pc, #172]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 8037632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037634:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8037638:	687b      	ldr	r3, [r7, #4]
 803763a:	699b      	ldr	r3, [r3, #24]
 803763c:	4928      	ldr	r1, [pc, #160]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 803763e:	4313      	orrs	r3, r2
 8037640:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8037642:	4b27      	ldr	r3, [pc, #156]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 8037644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037646:	4a26      	ldr	r2, [pc, #152]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 8037648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803764c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 803764e:	4b24      	ldr	r3, [pc, #144]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 8037650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8037652:	4b24      	ldr	r3, [pc, #144]	; (80376e4 <RCCEx_PLL3_Config+0x160>)
 8037654:	4013      	ands	r3, r2
 8037656:	687a      	ldr	r2, [r7, #4]
 8037658:	69d2      	ldr	r2, [r2, #28]
 803765a:	00d2      	lsls	r2, r2, #3
 803765c:	4920      	ldr	r1, [pc, #128]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 803765e:	4313      	orrs	r3, r2
 8037660:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8037662:	4b1f      	ldr	r3, [pc, #124]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 8037664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037666:	4a1e      	ldr	r2, [pc, #120]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 8037668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803766c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 803766e:	683b      	ldr	r3, [r7, #0]
 8037670:	2b00      	cmp	r3, #0
 8037672:	d106      	bne.n	8037682 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8037674:	4b1a      	ldr	r3, [pc, #104]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 8037676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037678:	4a19      	ldr	r2, [pc, #100]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 803767a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 803767e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8037680:	e00f      	b.n	80376a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8037682:	683b      	ldr	r3, [r7, #0]
 8037684:	2b01      	cmp	r3, #1
 8037686:	d106      	bne.n	8037696 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8037688:	4b15      	ldr	r3, [pc, #84]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 803768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803768c:	4a14      	ldr	r2, [pc, #80]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 803768e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8037692:	62d3      	str	r3, [r2, #44]	; 0x2c
 8037694:	e005      	b.n	80376a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8037696:	4b12      	ldr	r3, [pc, #72]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 8037698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803769a:	4a11      	ldr	r2, [pc, #68]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 803769c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80376a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80376a2:	4b0f      	ldr	r3, [pc, #60]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 80376a4:	681b      	ldr	r3, [r3, #0]
 80376a6:	4a0e      	ldr	r2, [pc, #56]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 80376a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80376ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80376ae:	f7f7 fd11 	bl	802f0d4 <HAL_GetTick>
 80376b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80376b4:	e008      	b.n	80376c8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80376b6:	f7f7 fd0d 	bl	802f0d4 <HAL_GetTick>
 80376ba:	4602      	mov	r2, r0
 80376bc:	68bb      	ldr	r3, [r7, #8]
 80376be:	1ad3      	subs	r3, r2, r3
 80376c0:	2b02      	cmp	r3, #2
 80376c2:	d901      	bls.n	80376c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80376c4:	2303      	movs	r3, #3
 80376c6:	e006      	b.n	80376d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80376c8:	4b05      	ldr	r3, [pc, #20]	; (80376e0 <RCCEx_PLL3_Config+0x15c>)
 80376ca:	681b      	ldr	r3, [r3, #0]
 80376cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80376d0:	2b00      	cmp	r3, #0
 80376d2:	d0f0      	beq.n	80376b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80376d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80376d6:	4618      	mov	r0, r3
 80376d8:	3710      	adds	r7, #16
 80376da:	46bd      	mov	sp, r7
 80376dc:	bd80      	pop	{r7, pc}
 80376de:	bf00      	nop
 80376e0:	58024400 	.word	0x58024400
 80376e4:	ffff0007 	.word	0xffff0007

080376e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80376e8:	b580      	push	{r7, lr}
 80376ea:	b084      	sub	sp, #16
 80376ec:	af00      	add	r7, sp, #0
 80376ee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80376f0:	687b      	ldr	r3, [r7, #4]
 80376f2:	2b00      	cmp	r3, #0
 80376f4:	d101      	bne.n	80376fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80376f6:	2301      	movs	r3, #1
 80376f8:	e0f1      	b.n	80378de <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80376fa:	687b      	ldr	r3, [r7, #4]
 80376fc:	2200      	movs	r2, #0
 80376fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8037700:	687b      	ldr	r3, [r7, #4]
 8037702:	681b      	ldr	r3, [r3, #0]
 8037704:	4a78      	ldr	r2, [pc, #480]	; (80378e8 <HAL_SPI_Init+0x200>)
 8037706:	4293      	cmp	r3, r2
 8037708:	d00f      	beq.n	803772a <HAL_SPI_Init+0x42>
 803770a:	687b      	ldr	r3, [r7, #4]
 803770c:	681b      	ldr	r3, [r3, #0]
 803770e:	4a77      	ldr	r2, [pc, #476]	; (80378ec <HAL_SPI_Init+0x204>)
 8037710:	4293      	cmp	r3, r2
 8037712:	d00a      	beq.n	803772a <HAL_SPI_Init+0x42>
 8037714:	687b      	ldr	r3, [r7, #4]
 8037716:	681b      	ldr	r3, [r3, #0]
 8037718:	4a75      	ldr	r2, [pc, #468]	; (80378f0 <HAL_SPI_Init+0x208>)
 803771a:	4293      	cmp	r3, r2
 803771c:	d005      	beq.n	803772a <HAL_SPI_Init+0x42>
 803771e:	687b      	ldr	r3, [r7, #4]
 8037720:	68db      	ldr	r3, [r3, #12]
 8037722:	2b0f      	cmp	r3, #15
 8037724:	d901      	bls.n	803772a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8037726:	2301      	movs	r3, #1
 8037728:	e0d9      	b.n	80378de <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 803772a:	6878      	ldr	r0, [r7, #4]
 803772c:	f001 f8ee 	bl	803890c <SPI_GetPacketSize>
 8037730:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8037732:	687b      	ldr	r3, [r7, #4]
 8037734:	681b      	ldr	r3, [r3, #0]
 8037736:	4a6c      	ldr	r2, [pc, #432]	; (80378e8 <HAL_SPI_Init+0x200>)
 8037738:	4293      	cmp	r3, r2
 803773a:	d00c      	beq.n	8037756 <HAL_SPI_Init+0x6e>
 803773c:	687b      	ldr	r3, [r7, #4]
 803773e:	681b      	ldr	r3, [r3, #0]
 8037740:	4a6a      	ldr	r2, [pc, #424]	; (80378ec <HAL_SPI_Init+0x204>)
 8037742:	4293      	cmp	r3, r2
 8037744:	d007      	beq.n	8037756 <HAL_SPI_Init+0x6e>
 8037746:	687b      	ldr	r3, [r7, #4]
 8037748:	681b      	ldr	r3, [r3, #0]
 803774a:	4a69      	ldr	r2, [pc, #420]	; (80378f0 <HAL_SPI_Init+0x208>)
 803774c:	4293      	cmp	r3, r2
 803774e:	d002      	beq.n	8037756 <HAL_SPI_Init+0x6e>
 8037750:	68fb      	ldr	r3, [r7, #12]
 8037752:	2b08      	cmp	r3, #8
 8037754:	d811      	bhi.n	803777a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8037756:	687b      	ldr	r3, [r7, #4]
 8037758:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 803775a:	4a63      	ldr	r2, [pc, #396]	; (80378e8 <HAL_SPI_Init+0x200>)
 803775c:	4293      	cmp	r3, r2
 803775e:	d009      	beq.n	8037774 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8037760:	687b      	ldr	r3, [r7, #4]
 8037762:	681b      	ldr	r3, [r3, #0]
 8037764:	4a61      	ldr	r2, [pc, #388]	; (80378ec <HAL_SPI_Init+0x204>)
 8037766:	4293      	cmp	r3, r2
 8037768:	d004      	beq.n	8037774 <HAL_SPI_Init+0x8c>
 803776a:	687b      	ldr	r3, [r7, #4]
 803776c:	681b      	ldr	r3, [r3, #0]
 803776e:	4a60      	ldr	r2, [pc, #384]	; (80378f0 <HAL_SPI_Init+0x208>)
 8037770:	4293      	cmp	r3, r2
 8037772:	d104      	bne.n	803777e <HAL_SPI_Init+0x96>
 8037774:	68fb      	ldr	r3, [r7, #12]
 8037776:	2b10      	cmp	r3, #16
 8037778:	d901      	bls.n	803777e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 803777a:	2301      	movs	r3, #1
 803777c:	e0af      	b.n	80378de <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 803777e:	687b      	ldr	r3, [r7, #4]
 8037780:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8037784:	b2db      	uxtb	r3, r3
 8037786:	2b00      	cmp	r3, #0
 8037788:	d106      	bne.n	8037798 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 803778a:	687b      	ldr	r3, [r7, #4]
 803778c:	2200      	movs	r2, #0
 803778e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8037792:	6878      	ldr	r0, [r7, #4]
 8037794:	f7f6 fc46 	bl	802e024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8037798:	687b      	ldr	r3, [r7, #4]
 803779a:	2202      	movs	r2, #2
 803779c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80377a0:	687b      	ldr	r3, [r7, #4]
 80377a2:	681b      	ldr	r3, [r3, #0]
 80377a4:	681a      	ldr	r2, [r3, #0]
 80377a6:	687b      	ldr	r3, [r7, #4]
 80377a8:	681b      	ldr	r3, [r3, #0]
 80377aa:	f022 0201 	bic.w	r2, r2, #1
 80377ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80377b0:	687b      	ldr	r3, [r7, #4]
 80377b2:	681b      	ldr	r3, [r3, #0]
 80377b4:	689b      	ldr	r3, [r3, #8]
 80377b6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80377ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80377bc:	687b      	ldr	r3, [r7, #4]
 80377be:	699b      	ldr	r3, [r3, #24]
 80377c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80377c4:	d119      	bne.n	80377fa <HAL_SPI_Init+0x112>
 80377c6:	687b      	ldr	r3, [r7, #4]
 80377c8:	685b      	ldr	r3, [r3, #4]
 80377ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80377ce:	d103      	bne.n	80377d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80377d0:	687b      	ldr	r3, [r7, #4]
 80377d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80377d4:	2b00      	cmp	r3, #0
 80377d6:	d008      	beq.n	80377ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80377d8:	687b      	ldr	r3, [r7, #4]
 80377da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80377dc:	2b00      	cmp	r3, #0
 80377de:	d10c      	bne.n	80377fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80377e0:	687b      	ldr	r3, [r7, #4]
 80377e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80377e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80377e8:	d107      	bne.n	80377fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80377ea:	687b      	ldr	r3, [r7, #4]
 80377ec:	681b      	ldr	r3, [r3, #0]
 80377ee:	681a      	ldr	r2, [r3, #0]
 80377f0:	687b      	ldr	r3, [r7, #4]
 80377f2:	681b      	ldr	r3, [r3, #0]
 80377f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80377f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80377fa:	687b      	ldr	r3, [r7, #4]
 80377fc:	69da      	ldr	r2, [r3, #28]
 80377fe:	687b      	ldr	r3, [r7, #4]
 8037800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037802:	431a      	orrs	r2, r3
 8037804:	68bb      	ldr	r3, [r7, #8]
 8037806:	431a      	orrs	r2, r3
 8037808:	687b      	ldr	r3, [r7, #4]
 803780a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803780c:	ea42 0103 	orr.w	r1, r2, r3
 8037810:	687b      	ldr	r3, [r7, #4]
 8037812:	68da      	ldr	r2, [r3, #12]
 8037814:	687b      	ldr	r3, [r7, #4]
 8037816:	681b      	ldr	r3, [r3, #0]
 8037818:	430a      	orrs	r2, r1
 803781a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 803781c:	687b      	ldr	r3, [r7, #4]
 803781e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8037820:	687b      	ldr	r3, [r7, #4]
 8037822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8037824:	431a      	orrs	r2, r3
 8037826:	687b      	ldr	r3, [r7, #4]
 8037828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803782a:	431a      	orrs	r2, r3
 803782c:	687b      	ldr	r3, [r7, #4]
 803782e:	699b      	ldr	r3, [r3, #24]
 8037830:	431a      	orrs	r2, r3
 8037832:	687b      	ldr	r3, [r7, #4]
 8037834:	691b      	ldr	r3, [r3, #16]
 8037836:	431a      	orrs	r2, r3
 8037838:	687b      	ldr	r3, [r7, #4]
 803783a:	695b      	ldr	r3, [r3, #20]
 803783c:	431a      	orrs	r2, r3
 803783e:	687b      	ldr	r3, [r7, #4]
 8037840:	6a1b      	ldr	r3, [r3, #32]
 8037842:	431a      	orrs	r2, r3
 8037844:	687b      	ldr	r3, [r7, #4]
 8037846:	685b      	ldr	r3, [r3, #4]
 8037848:	431a      	orrs	r2, r3
 803784a:	687b      	ldr	r3, [r7, #4]
 803784c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803784e:	431a      	orrs	r2, r3
 8037850:	687b      	ldr	r3, [r7, #4]
 8037852:	689b      	ldr	r3, [r3, #8]
 8037854:	431a      	orrs	r2, r3
 8037856:	687b      	ldr	r3, [r7, #4]
 8037858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803785a:	ea42 0103 	orr.w	r1, r2, r3
 803785e:	687b      	ldr	r3, [r7, #4]
 8037860:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8037862:	687b      	ldr	r3, [r7, #4]
 8037864:	681b      	ldr	r3, [r3, #0]
 8037866:	430a      	orrs	r2, r1
 8037868:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 803786a:	687b      	ldr	r3, [r7, #4]
 803786c:	685b      	ldr	r3, [r3, #4]
 803786e:	2b00      	cmp	r3, #0
 8037870:	d113      	bne.n	803789a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8037872:	687b      	ldr	r3, [r7, #4]
 8037874:	681b      	ldr	r3, [r3, #0]
 8037876:	689b      	ldr	r3, [r3, #8]
 8037878:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 803787c:	687b      	ldr	r3, [r7, #4]
 803787e:	681b      	ldr	r3, [r3, #0]
 8037880:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8037884:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8037886:	687b      	ldr	r3, [r7, #4]
 8037888:	681b      	ldr	r3, [r3, #0]
 803788a:	689b      	ldr	r3, [r3, #8]
 803788c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8037890:	687b      	ldr	r3, [r7, #4]
 8037892:	681b      	ldr	r3, [r3, #0]
 8037894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8037898:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 803789a:	687b      	ldr	r3, [r7, #4]
 803789c:	681b      	ldr	r3, [r3, #0]
 803789e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80378a0:	687b      	ldr	r3, [r7, #4]
 80378a2:	681b      	ldr	r3, [r3, #0]
 80378a4:	f022 0201 	bic.w	r2, r2, #1
 80378a8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80378aa:	687b      	ldr	r3, [r7, #4]
 80378ac:	685b      	ldr	r3, [r3, #4]
 80378ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80378b2:	2b00      	cmp	r3, #0
 80378b4:	d00a      	beq.n	80378cc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80378b6:	687b      	ldr	r3, [r7, #4]
 80378b8:	681b      	ldr	r3, [r3, #0]
 80378ba:	68db      	ldr	r3, [r3, #12]
 80378bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80378c0:	687b      	ldr	r3, [r7, #4]
 80378c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80378c4:	687b      	ldr	r3, [r7, #4]
 80378c6:	681b      	ldr	r3, [r3, #0]
 80378c8:	430a      	orrs	r2, r1
 80378ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80378cc:	687b      	ldr	r3, [r7, #4]
 80378ce:	2200      	movs	r2, #0
 80378d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80378d4:	687b      	ldr	r3, [r7, #4]
 80378d6:	2201      	movs	r2, #1
 80378d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80378dc:	2300      	movs	r3, #0
}
 80378de:	4618      	mov	r0, r3
 80378e0:	3710      	adds	r7, #16
 80378e2:	46bd      	mov	sp, r7
 80378e4:	bd80      	pop	{r7, pc}
 80378e6:	bf00      	nop
 80378e8:	40013000 	.word	0x40013000
 80378ec:	40003800 	.word	0x40003800
 80378f0:	40003c00 	.word	0x40003c00

080378f4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80378f4:	b580      	push	{r7, lr}
 80378f6:	b086      	sub	sp, #24
 80378f8:	af00      	add	r7, sp, #0
 80378fa:	60f8      	str	r0, [r7, #12]
 80378fc:	60b9      	str	r1, [r7, #8]
 80378fe:	4613      	mov	r3, r2
 8037900:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8037902:	2300      	movs	r3, #0
 8037904:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8037906:	68fb      	ldr	r3, [r7, #12]
 8037908:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803790c:	2b01      	cmp	r3, #1
 803790e:	d101      	bne.n	8037914 <HAL_SPI_Transmit_DMA+0x20>
 8037910:	2302      	movs	r3, #2
 8037912:	e12c      	b.n	8037b6e <HAL_SPI_Transmit_DMA+0x27a>
 8037914:	68fb      	ldr	r3, [r7, #12]
 8037916:	2201      	movs	r2, #1
 8037918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 803791c:	68fb      	ldr	r3, [r7, #12]
 803791e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8037922:	b2db      	uxtb	r3, r3
 8037924:	2b01      	cmp	r3, #1
 8037926:	d007      	beq.n	8037938 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8037928:	2302      	movs	r3, #2
 803792a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803792c:	68fb      	ldr	r3, [r7, #12]
 803792e:	2200      	movs	r2, #0
 8037930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8037934:	7dfb      	ldrb	r3, [r7, #23]
 8037936:	e11a      	b.n	8037b6e <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8037938:	68bb      	ldr	r3, [r7, #8]
 803793a:	2b00      	cmp	r3, #0
 803793c:	d002      	beq.n	8037944 <HAL_SPI_Transmit_DMA+0x50>
 803793e:	88fb      	ldrh	r3, [r7, #6]
 8037940:	2b00      	cmp	r3, #0
 8037942:	d107      	bne.n	8037954 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8037944:	2301      	movs	r3, #1
 8037946:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8037948:	68fb      	ldr	r3, [r7, #12]
 803794a:	2200      	movs	r2, #0
 803794c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8037950:	7dfb      	ldrb	r3, [r7, #23]
 8037952:	e10c      	b.n	8037b6e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8037954:	68fb      	ldr	r3, [r7, #12]
 8037956:	2203      	movs	r2, #3
 8037958:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 803795c:	68fb      	ldr	r3, [r7, #12]
 803795e:	2200      	movs	r2, #0
 8037960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8037964:	68fb      	ldr	r3, [r7, #12]
 8037966:	68ba      	ldr	r2, [r7, #8]
 8037968:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 803796a:	68fb      	ldr	r3, [r7, #12]
 803796c:	88fa      	ldrh	r2, [r7, #6]
 803796e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8037972:	68fb      	ldr	r3, [r7, #12]
 8037974:	88fa      	ldrh	r2, [r7, #6]
 8037976:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 803797a:	68fb      	ldr	r3, [r7, #12]
 803797c:	2200      	movs	r2, #0
 803797e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8037980:	68fb      	ldr	r3, [r7, #12]
 8037982:	2200      	movs	r2, #0
 8037984:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8037986:	68fb      	ldr	r3, [r7, #12]
 8037988:	2200      	movs	r2, #0
 803798a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 803798c:	68fb      	ldr	r3, [r7, #12]
 803798e:	2200      	movs	r2, #0
 8037990:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8037994:	68fb      	ldr	r3, [r7, #12]
 8037996:	2200      	movs	r2, #0
 8037998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 803799c:	68fb      	ldr	r3, [r7, #12]
 803799e:	689b      	ldr	r3, [r3, #8]
 80379a0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80379a4:	d107      	bne.n	80379b6 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 80379a6:	68fb      	ldr	r3, [r7, #12]
 80379a8:	681b      	ldr	r3, [r3, #0]
 80379aa:	681a      	ldr	r2, [r3, #0]
 80379ac:	68fb      	ldr	r3, [r7, #12]
 80379ae:	681b      	ldr	r3, [r3, #0]
 80379b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80379b4:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80379b6:	68fb      	ldr	r3, [r7, #12]
 80379b8:	68db      	ldr	r3, [r3, #12]
 80379ba:	2b0f      	cmp	r3, #15
 80379bc:	d905      	bls.n	80379ca <HAL_SPI_Transmit_DMA+0xd6>
 80379be:	68fb      	ldr	r3, [r7, #12]
 80379c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80379c2:	699b      	ldr	r3, [r3, #24]
 80379c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80379c8:	d10f      	bne.n	80379ea <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80379ca:	68fb      	ldr	r3, [r7, #12]
 80379cc:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80379ce:	2b07      	cmp	r3, #7
 80379d0:	d913      	bls.n	80379fa <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80379d2:	68fb      	ldr	r3, [r7, #12]
 80379d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80379d6:	699b      	ldr	r3, [r3, #24]
 80379d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80379dc:	d00d      	beq.n	80379fa <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80379de:	68fb      	ldr	r3, [r7, #12]
 80379e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80379e2:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80379e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80379e8:	d007      	beq.n	80379fa <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80379ea:	2301      	movs	r3, #1
 80379ec:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80379ee:	68fb      	ldr	r3, [r7, #12]
 80379f0:	2200      	movs	r2, #0
 80379f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80379f6:	7dfb      	ldrb	r3, [r7, #23]
 80379f8:	e0b9      	b.n	8037b6e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80379fa:	68fb      	ldr	r3, [r7, #12]
 80379fc:	68db      	ldr	r3, [r3, #12]
 80379fe:	2b07      	cmp	r3, #7
 8037a00:	d820      	bhi.n	8037a44 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8037a02:	68fb      	ldr	r3, [r7, #12]
 8037a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037a06:	699b      	ldr	r3, [r3, #24]
 8037a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8037a0c:	d109      	bne.n	8037a22 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8037a0e:	68fb      	ldr	r3, [r7, #12]
 8037a10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8037a14:	b29b      	uxth	r3, r3
 8037a16:	3301      	adds	r3, #1
 8037a18:	105b      	asrs	r3, r3, #1
 8037a1a:	b29a      	uxth	r2, r3
 8037a1c:	68fb      	ldr	r3, [r7, #12]
 8037a1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8037a22:	68fb      	ldr	r3, [r7, #12]
 8037a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037a26:	699b      	ldr	r3, [r3, #24]
 8037a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037a2c:	d11e      	bne.n	8037a6c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8037a2e:	68fb      	ldr	r3, [r7, #12]
 8037a30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8037a34:	b29b      	uxth	r3, r3
 8037a36:	3303      	adds	r3, #3
 8037a38:	109b      	asrs	r3, r3, #2
 8037a3a:	b29a      	uxth	r2, r3
 8037a3c:	68fb      	ldr	r3, [r7, #12]
 8037a3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8037a42:	e013      	b.n	8037a6c <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8037a44:	68fb      	ldr	r3, [r7, #12]
 8037a46:	68db      	ldr	r3, [r3, #12]
 8037a48:	2b0f      	cmp	r3, #15
 8037a4a:	d80f      	bhi.n	8037a6c <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8037a4c:	68fb      	ldr	r3, [r7, #12]
 8037a4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037a50:	699b      	ldr	r3, [r3, #24]
 8037a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037a56:	d109      	bne.n	8037a6c <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8037a58:	68fb      	ldr	r3, [r7, #12]
 8037a5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8037a5e:	b29b      	uxth	r3, r3
 8037a60:	3301      	adds	r3, #1
 8037a62:	105b      	asrs	r3, r3, #1
 8037a64:	b29a      	uxth	r2, r3
 8037a66:	68fb      	ldr	r3, [r7, #12]
 8037a68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8037a6c:	68fb      	ldr	r3, [r7, #12]
 8037a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037a70:	4a41      	ldr	r2, [pc, #260]	; (8037b78 <HAL_SPI_Transmit_DMA+0x284>)
 8037a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8037a74:	68fb      	ldr	r3, [r7, #12]
 8037a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037a78:	4a40      	ldr	r2, [pc, #256]	; (8037b7c <HAL_SPI_Transmit_DMA+0x288>)
 8037a7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8037a7c:	68fb      	ldr	r3, [r7, #12]
 8037a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037a80:	4a3f      	ldr	r2, [pc, #252]	; (8037b80 <HAL_SPI_Transmit_DMA+0x28c>)
 8037a82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8037a84:	68fb      	ldr	r3, [r7, #12]
 8037a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037a88:	2200      	movs	r2, #0
 8037a8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8037a8c:	68fb      	ldr	r3, [r7, #12]
 8037a8e:	681b      	ldr	r3, [r3, #0]
 8037a90:	689a      	ldr	r2, [r3, #8]
 8037a92:	68fb      	ldr	r3, [r7, #12]
 8037a94:	681b      	ldr	r3, [r3, #0]
 8037a96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8037a9a:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8037a9c:	68fb      	ldr	r3, [r7, #12]
 8037a9e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8037aa0:	68fb      	ldr	r3, [r7, #12]
 8037aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8037aa4:	4619      	mov	r1, r3
 8037aa6:	68fb      	ldr	r3, [r7, #12]
 8037aa8:	681b      	ldr	r3, [r3, #0]
 8037aaa:	3320      	adds	r3, #32
 8037aac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8037aae:	68fb      	ldr	r3, [r7, #12]
 8037ab0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8037ab4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8037ab6:	f7f8 fb65 	bl	8030184 <HAL_DMA_Start_IT>
 8037aba:	4603      	mov	r3, r0
 8037abc:	2b00      	cmp	r3, #0
 8037abe:	d013      	beq.n	8037ae8 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8037ac0:	68fb      	ldr	r3, [r7, #12]
 8037ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8037ac6:	f043 0210 	orr.w	r2, r3, #16
 8037aca:	68fb      	ldr	r3, [r7, #12]
 8037acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8037ad0:	68fb      	ldr	r3, [r7, #12]
 8037ad2:	2200      	movs	r2, #0
 8037ad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8037ad8:	68fb      	ldr	r3, [r7, #12]
 8037ada:	2201      	movs	r2, #1
 8037adc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8037ae0:	2301      	movs	r3, #1
 8037ae2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8037ae4:	7dfb      	ldrb	r3, [r7, #23]
 8037ae6:	e042      	b.n	8037b6e <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8037ae8:	68fb      	ldr	r3, [r7, #12]
 8037aea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037aec:	69db      	ldr	r3, [r3, #28]
 8037aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8037af2:	d108      	bne.n	8037b06 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8037af4:	68fb      	ldr	r3, [r7, #12]
 8037af6:	681b      	ldr	r3, [r3, #0]
 8037af8:	6859      	ldr	r1, [r3, #4]
 8037afa:	68fb      	ldr	r3, [r7, #12]
 8037afc:	681a      	ldr	r2, [r3, #0]
 8037afe:	4b21      	ldr	r3, [pc, #132]	; (8037b84 <HAL_SPI_Transmit_DMA+0x290>)
 8037b00:	400b      	ands	r3, r1
 8037b02:	6053      	str	r3, [r2, #4]
 8037b04:	e009      	b.n	8037b1a <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8037b06:	68fb      	ldr	r3, [r7, #12]
 8037b08:	681b      	ldr	r3, [r3, #0]
 8037b0a:	685a      	ldr	r2, [r3, #4]
 8037b0c:	4b1d      	ldr	r3, [pc, #116]	; (8037b84 <HAL_SPI_Transmit_DMA+0x290>)
 8037b0e:	4013      	ands	r3, r2
 8037b10:	88f9      	ldrh	r1, [r7, #6]
 8037b12:	68fa      	ldr	r2, [r7, #12]
 8037b14:	6812      	ldr	r2, [r2, #0]
 8037b16:	430b      	orrs	r3, r1
 8037b18:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8037b1a:	68fb      	ldr	r3, [r7, #12]
 8037b1c:	681b      	ldr	r3, [r3, #0]
 8037b1e:	689a      	ldr	r2, [r3, #8]
 8037b20:	68fb      	ldr	r3, [r7, #12]
 8037b22:	681b      	ldr	r3, [r3, #0]
 8037b24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8037b28:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8037b2a:	68fb      	ldr	r3, [r7, #12]
 8037b2c:	681b      	ldr	r3, [r3, #0]
 8037b2e:	691a      	ldr	r2, [r3, #16]
 8037b30:	68fb      	ldr	r3, [r7, #12]
 8037b32:	681b      	ldr	r3, [r3, #0]
 8037b34:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8037b38:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8037b3a:	68fb      	ldr	r3, [r7, #12]
 8037b3c:	681b      	ldr	r3, [r3, #0]
 8037b3e:	681a      	ldr	r2, [r3, #0]
 8037b40:	68fb      	ldr	r3, [r7, #12]
 8037b42:	681b      	ldr	r3, [r3, #0]
 8037b44:	f042 0201 	orr.w	r2, r2, #1
 8037b48:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8037b4a:	68fb      	ldr	r3, [r7, #12]
 8037b4c:	685b      	ldr	r3, [r3, #4]
 8037b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8037b52:	d107      	bne.n	8037b64 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8037b54:	68fb      	ldr	r3, [r7, #12]
 8037b56:	681b      	ldr	r3, [r3, #0]
 8037b58:	681a      	ldr	r2, [r3, #0]
 8037b5a:	68fb      	ldr	r3, [r7, #12]
 8037b5c:	681b      	ldr	r3, [r3, #0]
 8037b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8037b62:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8037b64:	68fb      	ldr	r3, [r7, #12]
 8037b66:	2200      	movs	r2, #0
 8037b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8037b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8037b6e:	4618      	mov	r0, r3
 8037b70:	3718      	adds	r7, #24
 8037b72:	46bd      	mov	sp, r7
 8037b74:	bd80      	pop	{r7, pc}
 8037b76:	bf00      	nop
 8037b78:	080386ff 	.word	0x080386ff
 8037b7c:	0803862d 	.word	0x0803862d
 8037b80:	08038753 	.word	0x08038753
 8037b84:	ffff0000 	.word	0xffff0000

08037b88 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8037b88:	b580      	push	{r7, lr}
 8037b8a:	b086      	sub	sp, #24
 8037b8c:	af00      	add	r7, sp, #0
 8037b8e:	60f8      	str	r0, [r7, #12]
 8037b90:	60b9      	str	r1, [r7, #8]
 8037b92:	4613      	mov	r3, r2
 8037b94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8037b96:	2300      	movs	r3, #0
 8037b98:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8037b9a:	68fb      	ldr	r3, [r7, #12]
 8037b9c:	689b      	ldr	r3, [r3, #8]
 8037b9e:	2b00      	cmp	r3, #0
 8037ba0:	d110      	bne.n	8037bc4 <HAL_SPI_Receive_DMA+0x3c>
 8037ba2:	68fb      	ldr	r3, [r7, #12]
 8037ba4:	685b      	ldr	r3, [r3, #4]
 8037ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8037baa:	d10b      	bne.n	8037bc4 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8037bac:	68fb      	ldr	r3, [r7, #12]
 8037bae:	2204      	movs	r2, #4
 8037bb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8037bb4:	88fb      	ldrh	r3, [r7, #6]
 8037bb6:	68ba      	ldr	r2, [r7, #8]
 8037bb8:	68b9      	ldr	r1, [r7, #8]
 8037bba:	68f8      	ldr	r0, [r7, #12]
 8037bbc:	f000 f940 	bl	8037e40 <HAL_SPI_TransmitReceive_DMA>
 8037bc0:	4603      	mov	r3, r0
 8037bc2:	e130      	b.n	8037e26 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8037bc4:	68fb      	ldr	r3, [r7, #12]
 8037bc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037bca:	2b01      	cmp	r3, #1
 8037bcc:	d101      	bne.n	8037bd2 <HAL_SPI_Receive_DMA+0x4a>
 8037bce:	2302      	movs	r3, #2
 8037bd0:	e129      	b.n	8037e26 <HAL_SPI_Receive_DMA+0x29e>
 8037bd2:	68fb      	ldr	r3, [r7, #12]
 8037bd4:	2201      	movs	r2, #1
 8037bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8037bda:	68fb      	ldr	r3, [r7, #12]
 8037bdc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8037be0:	b2db      	uxtb	r3, r3
 8037be2:	2b01      	cmp	r3, #1
 8037be4:	d007      	beq.n	8037bf6 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 8037be6:	2302      	movs	r3, #2
 8037be8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8037bea:	68fb      	ldr	r3, [r7, #12]
 8037bec:	2200      	movs	r2, #0
 8037bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8037bf2:	7dfb      	ldrb	r3, [r7, #23]
 8037bf4:	e117      	b.n	8037e26 <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8037bf6:	68bb      	ldr	r3, [r7, #8]
 8037bf8:	2b00      	cmp	r3, #0
 8037bfa:	d002      	beq.n	8037c02 <HAL_SPI_Receive_DMA+0x7a>
 8037bfc:	88fb      	ldrh	r3, [r7, #6]
 8037bfe:	2b00      	cmp	r3, #0
 8037c00:	d107      	bne.n	8037c12 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 8037c02:	2301      	movs	r3, #1
 8037c04:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8037c06:	68fb      	ldr	r3, [r7, #12]
 8037c08:	2200      	movs	r2, #0
 8037c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8037c0e:	7dfb      	ldrb	r3, [r7, #23]
 8037c10:	e109      	b.n	8037e26 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8037c12:	68fb      	ldr	r3, [r7, #12]
 8037c14:	2204      	movs	r2, #4
 8037c16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8037c1a:	68fb      	ldr	r3, [r7, #12]
 8037c1c:	2200      	movs	r2, #0
 8037c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8037c22:	68fb      	ldr	r3, [r7, #12]
 8037c24:	68ba      	ldr	r2, [r7, #8]
 8037c26:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8037c28:	68fb      	ldr	r3, [r7, #12]
 8037c2a:	88fa      	ldrh	r2, [r7, #6]
 8037c2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8037c30:	68fb      	ldr	r3, [r7, #12]
 8037c32:	88fa      	ldrh	r2, [r7, #6]
 8037c34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8037c38:	68fb      	ldr	r3, [r7, #12]
 8037c3a:	2200      	movs	r2, #0
 8037c3c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8037c3e:	68fb      	ldr	r3, [r7, #12]
 8037c40:	2200      	movs	r2, #0
 8037c42:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8037c44:	68fb      	ldr	r3, [r7, #12]
 8037c46:	2200      	movs	r2, #0
 8037c48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8037c4c:	68fb      	ldr	r3, [r7, #12]
 8037c4e:	2200      	movs	r2, #0
 8037c50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8037c54:	68fb      	ldr	r3, [r7, #12]
 8037c56:	689b      	ldr	r3, [r3, #8]
 8037c58:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8037c5c:	d107      	bne.n	8037c6e <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8037c5e:	68fb      	ldr	r3, [r7, #12]
 8037c60:	681b      	ldr	r3, [r3, #0]
 8037c62:	681a      	ldr	r2, [r3, #0]
 8037c64:	68fb      	ldr	r3, [r7, #12]
 8037c66:	681b      	ldr	r3, [r3, #0]
 8037c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8037c6c:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8037c6e:	68fb      	ldr	r3, [r7, #12]
 8037c70:	68db      	ldr	r3, [r3, #12]
 8037c72:	2b0f      	cmp	r3, #15
 8037c74:	d905      	bls.n	8037c82 <HAL_SPI_Receive_DMA+0xfa>
 8037c76:	68fb      	ldr	r3, [r7, #12]
 8037c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037c7a:	699b      	ldr	r3, [r3, #24]
 8037c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037c80:	d10f      	bne.n	8037ca2 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8037c82:	68fb      	ldr	r3, [r7, #12]
 8037c84:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8037c86:	2b07      	cmp	r3, #7
 8037c88:	d913      	bls.n	8037cb2 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8037c8a:	68fb      	ldr	r3, [r7, #12]
 8037c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037c8e:	699b      	ldr	r3, [r3, #24]
 8037c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8037c94:	d00d      	beq.n	8037cb2 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8037c96:	68fb      	ldr	r3, [r7, #12]
 8037c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037c9a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8037c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037ca0:	d007      	beq.n	8037cb2 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8037ca2:	2301      	movs	r3, #1
 8037ca4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8037ca6:	68fb      	ldr	r3, [r7, #12]
 8037ca8:	2200      	movs	r2, #0
 8037caa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8037cae:	7dfb      	ldrb	r3, [r7, #23]
 8037cb0:	e0b9      	b.n	8037e26 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8037cb2:	68fb      	ldr	r3, [r7, #12]
 8037cb4:	681b      	ldr	r3, [r3, #0]
 8037cb6:	689a      	ldr	r2, [r3, #8]
 8037cb8:	68fb      	ldr	r3, [r7, #12]
 8037cba:	681b      	ldr	r3, [r3, #0]
 8037cbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8037cc0:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8037cc2:	68fb      	ldr	r3, [r7, #12]
 8037cc4:	68db      	ldr	r3, [r3, #12]
 8037cc6:	2b07      	cmp	r3, #7
 8037cc8:	d820      	bhi.n	8037d0c <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8037cca:	68fb      	ldr	r3, [r7, #12]
 8037ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037cce:	699b      	ldr	r3, [r3, #24]
 8037cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8037cd4:	d109      	bne.n	8037cea <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8037cd6:	68fb      	ldr	r3, [r7, #12]
 8037cd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8037cdc:	b29b      	uxth	r3, r3
 8037cde:	3301      	adds	r3, #1
 8037ce0:	105b      	asrs	r3, r3, #1
 8037ce2:	b29a      	uxth	r2, r3
 8037ce4:	68fb      	ldr	r3, [r7, #12]
 8037ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8037cea:	68fb      	ldr	r3, [r7, #12]
 8037cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037cee:	699b      	ldr	r3, [r3, #24]
 8037cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037cf4:	d11e      	bne.n	8037d34 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8037cf6:	68fb      	ldr	r3, [r7, #12]
 8037cf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8037cfc:	b29b      	uxth	r3, r3
 8037cfe:	3303      	adds	r3, #3
 8037d00:	109b      	asrs	r3, r3, #2
 8037d02:	b29a      	uxth	r2, r3
 8037d04:	68fb      	ldr	r3, [r7, #12]
 8037d06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8037d0a:	e013      	b.n	8037d34 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8037d0c:	68fb      	ldr	r3, [r7, #12]
 8037d0e:	68db      	ldr	r3, [r3, #12]
 8037d10:	2b0f      	cmp	r3, #15
 8037d12:	d80f      	bhi.n	8037d34 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8037d14:	68fb      	ldr	r3, [r7, #12]
 8037d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037d18:	699b      	ldr	r3, [r3, #24]
 8037d1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037d1e:	d109      	bne.n	8037d34 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8037d20:	68fb      	ldr	r3, [r7, #12]
 8037d22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8037d26:	b29b      	uxth	r3, r3
 8037d28:	3301      	adds	r3, #1
 8037d2a:	105b      	asrs	r3, r3, #1
 8037d2c:	b29a      	uxth	r2, r3
 8037d2e:	68fb      	ldr	r3, [r7, #12]
 8037d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8037d34:	68fb      	ldr	r3, [r7, #12]
 8037d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037d38:	4a3d      	ldr	r2, [pc, #244]	; (8037e30 <HAL_SPI_Receive_DMA+0x2a8>)
 8037d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8037d3c:	68fb      	ldr	r3, [r7, #12]
 8037d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037d40:	4a3c      	ldr	r2, [pc, #240]	; (8037e34 <HAL_SPI_Receive_DMA+0x2ac>)
 8037d42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8037d44:	68fb      	ldr	r3, [r7, #12]
 8037d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037d48:	4a3b      	ldr	r2, [pc, #236]	; (8037e38 <HAL_SPI_Receive_DMA+0x2b0>)
 8037d4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8037d4c:	68fb      	ldr	r3, [r7, #12]
 8037d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037d50:	2200      	movs	r2, #0
 8037d52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8037d54:	68fb      	ldr	r3, [r7, #12]
 8037d56:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8037d58:	68fb      	ldr	r3, [r7, #12]
 8037d5a:	681b      	ldr	r3, [r3, #0]
 8037d5c:	3330      	adds	r3, #48	; 0x30
 8037d5e:	4619      	mov	r1, r3
 8037d60:	68fb      	ldr	r3, [r7, #12]
 8037d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8037d64:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8037d66:	68fb      	ldr	r3, [r7, #12]
 8037d68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8037d6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8037d6e:	f7f8 fa09 	bl	8030184 <HAL_DMA_Start_IT>
 8037d72:	4603      	mov	r3, r0
 8037d74:	2b00      	cmp	r3, #0
 8037d76:	d013      	beq.n	8037da0 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8037d78:	68fb      	ldr	r3, [r7, #12]
 8037d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8037d7e:	f043 0210 	orr.w	r2, r3, #16
 8037d82:	68fb      	ldr	r3, [r7, #12]
 8037d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8037d88:	68fb      	ldr	r3, [r7, #12]
 8037d8a:	2200      	movs	r2, #0
 8037d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8037d90:	68fb      	ldr	r3, [r7, #12]
 8037d92:	2201      	movs	r2, #1
 8037d94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8037d98:	2301      	movs	r3, #1
 8037d9a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8037d9c:	7dfb      	ldrb	r3, [r7, #23]
 8037d9e:	e042      	b.n	8037e26 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8037da0:	68fb      	ldr	r3, [r7, #12]
 8037da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037da4:	69db      	ldr	r3, [r3, #28]
 8037da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8037daa:	d108      	bne.n	8037dbe <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8037dac:	68fb      	ldr	r3, [r7, #12]
 8037dae:	681b      	ldr	r3, [r3, #0]
 8037db0:	6859      	ldr	r1, [r3, #4]
 8037db2:	68fb      	ldr	r3, [r7, #12]
 8037db4:	681a      	ldr	r2, [r3, #0]
 8037db6:	4b21      	ldr	r3, [pc, #132]	; (8037e3c <HAL_SPI_Receive_DMA+0x2b4>)
 8037db8:	400b      	ands	r3, r1
 8037dba:	6053      	str	r3, [r2, #4]
 8037dbc:	e009      	b.n	8037dd2 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8037dbe:	68fb      	ldr	r3, [r7, #12]
 8037dc0:	681b      	ldr	r3, [r3, #0]
 8037dc2:	685a      	ldr	r2, [r3, #4]
 8037dc4:	4b1d      	ldr	r3, [pc, #116]	; (8037e3c <HAL_SPI_Receive_DMA+0x2b4>)
 8037dc6:	4013      	ands	r3, r2
 8037dc8:	88f9      	ldrh	r1, [r7, #6]
 8037dca:	68fa      	ldr	r2, [r7, #12]
 8037dcc:	6812      	ldr	r2, [r2, #0]
 8037dce:	430b      	orrs	r3, r1
 8037dd0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8037dd2:	68fb      	ldr	r3, [r7, #12]
 8037dd4:	681b      	ldr	r3, [r3, #0]
 8037dd6:	689a      	ldr	r2, [r3, #8]
 8037dd8:	68fb      	ldr	r3, [r7, #12]
 8037dda:	681b      	ldr	r3, [r3, #0]
 8037ddc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8037de0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8037de2:	68fb      	ldr	r3, [r7, #12]
 8037de4:	681b      	ldr	r3, [r3, #0]
 8037de6:	691a      	ldr	r2, [r3, #16]
 8037de8:	68fb      	ldr	r3, [r7, #12]
 8037dea:	681b      	ldr	r3, [r3, #0]
 8037dec:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8037df0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8037df2:	68fb      	ldr	r3, [r7, #12]
 8037df4:	681b      	ldr	r3, [r3, #0]
 8037df6:	681a      	ldr	r2, [r3, #0]
 8037df8:	68fb      	ldr	r3, [r7, #12]
 8037dfa:	681b      	ldr	r3, [r3, #0]
 8037dfc:	f042 0201 	orr.w	r2, r2, #1
 8037e00:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8037e02:	68fb      	ldr	r3, [r7, #12]
 8037e04:	685b      	ldr	r3, [r3, #4]
 8037e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8037e0a:	d107      	bne.n	8037e1c <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8037e0c:	68fb      	ldr	r3, [r7, #12]
 8037e0e:	681b      	ldr	r3, [r3, #0]
 8037e10:	681a      	ldr	r2, [r3, #0]
 8037e12:	68fb      	ldr	r3, [r7, #12]
 8037e14:	681b      	ldr	r3, [r3, #0]
 8037e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8037e1a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8037e1c:	68fb      	ldr	r3, [r7, #12]
 8037e1e:	2200      	movs	r2, #0
 8037e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8037e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8037e26:	4618      	mov	r0, r3
 8037e28:	3718      	adds	r7, #24
 8037e2a:	46bd      	mov	sp, r7
 8037e2c:	bd80      	pop	{r7, pc}
 8037e2e:	bf00      	nop
 8037e30:	0803871b 	.word	0x0803871b
 8037e34:	08038673 	.word	0x08038673
 8037e38:	08038753 	.word	0x08038753
 8037e3c:	ffff0000 	.word	0xffff0000

08037e40 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8037e40:	b580      	push	{r7, lr}
 8037e42:	b086      	sub	sp, #24
 8037e44:	af00      	add	r7, sp, #0
 8037e46:	60f8      	str	r0, [r7, #12]
 8037e48:	60b9      	str	r1, [r7, #8]
 8037e4a:	607a      	str	r2, [r7, #4]
 8037e4c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8037e4e:	2300      	movs	r3, #0
 8037e50:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8037e52:	68fb      	ldr	r3, [r7, #12]
 8037e54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037e58:	2b01      	cmp	r3, #1
 8037e5a:	d101      	bne.n	8037e60 <HAL_SPI_TransmitReceive_DMA+0x20>
 8037e5c:	2302      	movs	r3, #2
 8037e5e:	e1b4      	b.n	80381ca <HAL_SPI_TransmitReceive_DMA+0x38a>
 8037e60:	68fb      	ldr	r3, [r7, #12]
 8037e62:	2201      	movs	r2, #1
 8037e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8037e68:	68fb      	ldr	r3, [r7, #12]
 8037e6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8037e6e:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8037e70:	68fb      	ldr	r3, [r7, #12]
 8037e72:	685b      	ldr	r3, [r3, #4]
 8037e74:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8037e76:	7dbb      	ldrb	r3, [r7, #22]
 8037e78:	2b01      	cmp	r3, #1
 8037e7a:	d012      	beq.n	8037ea2 <HAL_SPI_TransmitReceive_DMA+0x62>
 8037e7c:	693b      	ldr	r3, [r7, #16]
 8037e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8037e82:	d106      	bne.n	8037e92 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8037e84:	68fb      	ldr	r3, [r7, #12]
 8037e86:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8037e88:	2b00      	cmp	r3, #0
 8037e8a:	d102      	bne.n	8037e92 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8037e8c:	7dbb      	ldrb	r3, [r7, #22]
 8037e8e:	2b04      	cmp	r3, #4
 8037e90:	d007      	beq.n	8037ea2 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8037e92:	2302      	movs	r3, #2
 8037e94:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8037e96:	68fb      	ldr	r3, [r7, #12]
 8037e98:	2200      	movs	r2, #0
 8037e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8037e9e:	7dfb      	ldrb	r3, [r7, #23]
 8037ea0:	e193      	b.n	80381ca <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8037ea2:	68bb      	ldr	r3, [r7, #8]
 8037ea4:	2b00      	cmp	r3, #0
 8037ea6:	d005      	beq.n	8037eb4 <HAL_SPI_TransmitReceive_DMA+0x74>
 8037ea8:	687b      	ldr	r3, [r7, #4]
 8037eaa:	2b00      	cmp	r3, #0
 8037eac:	d002      	beq.n	8037eb4 <HAL_SPI_TransmitReceive_DMA+0x74>
 8037eae:	887b      	ldrh	r3, [r7, #2]
 8037eb0:	2b00      	cmp	r3, #0
 8037eb2:	d107      	bne.n	8037ec4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8037eb4:	2301      	movs	r3, #1
 8037eb6:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8037eb8:	68fb      	ldr	r3, [r7, #12]
 8037eba:	2200      	movs	r2, #0
 8037ebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8037ec0:	7dfb      	ldrb	r3, [r7, #23]
 8037ec2:	e182      	b.n	80381ca <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8037ec4:	68fb      	ldr	r3, [r7, #12]
 8037ec6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8037eca:	b2db      	uxtb	r3, r3
 8037ecc:	2b04      	cmp	r3, #4
 8037ece:	d003      	beq.n	8037ed8 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8037ed0:	68fb      	ldr	r3, [r7, #12]
 8037ed2:	2205      	movs	r2, #5
 8037ed4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8037ed8:	68fb      	ldr	r3, [r7, #12]
 8037eda:	2200      	movs	r2, #0
 8037edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8037ee0:	68fb      	ldr	r3, [r7, #12]
 8037ee2:	68ba      	ldr	r2, [r7, #8]
 8037ee4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8037ee6:	68fb      	ldr	r3, [r7, #12]
 8037ee8:	887a      	ldrh	r2, [r7, #2]
 8037eea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8037eee:	68fb      	ldr	r3, [r7, #12]
 8037ef0:	887a      	ldrh	r2, [r7, #2]
 8037ef2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8037ef6:	68fb      	ldr	r3, [r7, #12]
 8037ef8:	687a      	ldr	r2, [r7, #4]
 8037efa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8037efc:	68fb      	ldr	r3, [r7, #12]
 8037efe:	887a      	ldrh	r2, [r7, #2]
 8037f00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8037f04:	68fb      	ldr	r3, [r7, #12]
 8037f06:	887a      	ldrh	r2, [r7, #2]
 8037f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8037f0c:	68fb      	ldr	r3, [r7, #12]
 8037f0e:	2200      	movs	r2, #0
 8037f10:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8037f12:	68fb      	ldr	r3, [r7, #12]
 8037f14:	2200      	movs	r2, #0
 8037f16:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8037f18:	68fb      	ldr	r3, [r7, #12]
 8037f1a:	681b      	ldr	r3, [r3, #0]
 8037f1c:	689a      	ldr	r2, [r3, #8]
 8037f1e:	68fb      	ldr	r3, [r7, #12]
 8037f20:	681b      	ldr	r3, [r3, #0]
 8037f22:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8037f26:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8037f28:	68fb      	ldr	r3, [r7, #12]
 8037f2a:	68db      	ldr	r3, [r3, #12]
 8037f2c:	2b0f      	cmp	r3, #15
 8037f2e:	d905      	bls.n	8037f3c <HAL_SPI_TransmitReceive_DMA+0xfc>
 8037f30:	68fb      	ldr	r3, [r7, #12]
 8037f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037f34:	699b      	ldr	r3, [r3, #24]
 8037f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037f3a:	d10f      	bne.n	8037f5c <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8037f3c:	68fb      	ldr	r3, [r7, #12]
 8037f3e:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8037f40:	2b07      	cmp	r3, #7
 8037f42:	d913      	bls.n	8037f6c <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8037f44:	68fb      	ldr	r3, [r7, #12]
 8037f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037f48:	699b      	ldr	r3, [r3, #24]
 8037f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8037f4e:	d00d      	beq.n	8037f6c <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8037f50:	68fb      	ldr	r3, [r7, #12]
 8037f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037f54:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8037f56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037f5a:	d007      	beq.n	8037f6c <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8037f5c:	2301      	movs	r3, #1
 8037f5e:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8037f60:	68fb      	ldr	r3, [r7, #12]
 8037f62:	2200      	movs	r2, #0
 8037f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8037f68:	7dfb      	ldrb	r3, [r7, #23]
 8037f6a:	e12e      	b.n	80381ca <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8037f6c:	68fb      	ldr	r3, [r7, #12]
 8037f6e:	68db      	ldr	r3, [r3, #12]
 8037f70:	2b07      	cmp	r3, #7
 8037f72:	d840      	bhi.n	8037ff6 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8037f74:	68fb      	ldr	r3, [r7, #12]
 8037f76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037f78:	699b      	ldr	r3, [r3, #24]
 8037f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8037f7e:	d109      	bne.n	8037f94 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8037f80:	68fb      	ldr	r3, [r7, #12]
 8037f82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8037f86:	b29b      	uxth	r3, r3
 8037f88:	3301      	adds	r3, #1
 8037f8a:	105b      	asrs	r3, r3, #1
 8037f8c:	b29a      	uxth	r2, r3
 8037f8e:	68fb      	ldr	r3, [r7, #12]
 8037f90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8037f94:	68fb      	ldr	r3, [r7, #12]
 8037f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037f98:	699b      	ldr	r3, [r3, #24]
 8037f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037f9e:	d109      	bne.n	8037fb4 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8037fa0:	68fb      	ldr	r3, [r7, #12]
 8037fa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8037fa6:	b29b      	uxth	r3, r3
 8037fa8:	3303      	adds	r3, #3
 8037faa:	109b      	asrs	r3, r3, #2
 8037fac:	b29a      	uxth	r2, r3
 8037fae:	68fb      	ldr	r3, [r7, #12]
 8037fb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8037fb4:	68fb      	ldr	r3, [r7, #12]
 8037fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037fb8:	699b      	ldr	r3, [r3, #24]
 8037fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8037fbe:	d109      	bne.n	8037fd4 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8037fc0:	68fb      	ldr	r3, [r7, #12]
 8037fc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8037fc6:	b29b      	uxth	r3, r3
 8037fc8:	3301      	adds	r3, #1
 8037fca:	105b      	asrs	r3, r3, #1
 8037fcc:	b29a      	uxth	r2, r3
 8037fce:	68fb      	ldr	r3, [r7, #12]
 8037fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8037fd4:	68fb      	ldr	r3, [r7, #12]
 8037fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037fd8:	699b      	ldr	r3, [r3, #24]
 8037fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037fde:	d12e      	bne.n	803803e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8037fe0:	68fb      	ldr	r3, [r7, #12]
 8037fe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8037fe6:	b29b      	uxth	r3, r3
 8037fe8:	3303      	adds	r3, #3
 8037fea:	109b      	asrs	r3, r3, #2
 8037fec:	b29a      	uxth	r2, r3
 8037fee:	68fb      	ldr	r3, [r7, #12]
 8037ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8037ff4:	e023      	b.n	803803e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8037ff6:	68fb      	ldr	r3, [r7, #12]
 8037ff8:	68db      	ldr	r3, [r3, #12]
 8037ffa:	2b0f      	cmp	r3, #15
 8037ffc:	d81f      	bhi.n	803803e <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8037ffe:	68fb      	ldr	r3, [r7, #12]
 8038000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8038002:	699b      	ldr	r3, [r3, #24]
 8038004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8038008:	d109      	bne.n	803801e <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 803800a:	68fb      	ldr	r3, [r7, #12]
 803800c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8038010:	b29b      	uxth	r3, r3
 8038012:	3301      	adds	r3, #1
 8038014:	105b      	asrs	r3, r3, #1
 8038016:	b29a      	uxth	r2, r3
 8038018:	68fb      	ldr	r3, [r7, #12]
 803801a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 803801e:	68fb      	ldr	r3, [r7, #12]
 8038020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038022:	699b      	ldr	r3, [r3, #24]
 8038024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8038028:	d109      	bne.n	803803e <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 803802a:	68fb      	ldr	r3, [r7, #12]
 803802c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8038030:	b29b      	uxth	r3, r3
 8038032:	3301      	adds	r3, #1
 8038034:	105b      	asrs	r3, r3, #1
 8038036:	b29a      	uxth	r2, r3
 8038038:	68fb      	ldr	r3, [r7, #12]
 803803a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 803803e:	68fb      	ldr	r3, [r7, #12]
 8038040:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8038044:	b2db      	uxtb	r3, r3
 8038046:	2b04      	cmp	r3, #4
 8038048:	d108      	bne.n	803805c <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 803804a:	68fb      	ldr	r3, [r7, #12]
 803804c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803804e:	4a61      	ldr	r2, [pc, #388]	; (80381d4 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8038050:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8038052:	68fb      	ldr	r3, [r7, #12]
 8038054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038056:	4a60      	ldr	r2, [pc, #384]	; (80381d8 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8038058:	63da      	str	r2, [r3, #60]	; 0x3c
 803805a:	e007      	b.n	803806c <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 803805c:	68fb      	ldr	r3, [r7, #12]
 803805e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038060:	4a5e      	ldr	r2, [pc, #376]	; (80381dc <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8038062:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8038064:	68fb      	ldr	r3, [r7, #12]
 8038066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038068:	4a5d      	ldr	r2, [pc, #372]	; (80381e0 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 803806a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 803806c:	68fb      	ldr	r3, [r7, #12]
 803806e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038070:	4a5c      	ldr	r2, [pc, #368]	; (80381e4 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8038072:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8038074:	68fb      	ldr	r3, [r7, #12]
 8038076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038078:	2200      	movs	r2, #0
 803807a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 803807c:	68fb      	ldr	r3, [r7, #12]
 803807e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8038080:	68fb      	ldr	r3, [r7, #12]
 8038082:	681b      	ldr	r3, [r3, #0]
 8038084:	3330      	adds	r3, #48	; 0x30
 8038086:	4619      	mov	r1, r3
 8038088:	68fb      	ldr	r3, [r7, #12]
 803808a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803808c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 803808e:	68fb      	ldr	r3, [r7, #12]
 8038090:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8038094:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8038096:	f7f8 f875 	bl	8030184 <HAL_DMA_Start_IT>
 803809a:	4603      	mov	r3, r0
 803809c:	2b00      	cmp	r3, #0
 803809e:	d013      	beq.n	80380c8 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80380a0:	68fb      	ldr	r3, [r7, #12]
 80380a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80380a6:	f043 0210 	orr.w	r2, r3, #16
 80380aa:	68fb      	ldr	r3, [r7, #12]
 80380ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80380b0:	68fb      	ldr	r3, [r7, #12]
 80380b2:	2200      	movs	r2, #0
 80380b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80380b8:	68fb      	ldr	r3, [r7, #12]
 80380ba:	2201      	movs	r2, #1
 80380bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80380c0:	2301      	movs	r3, #1
 80380c2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80380c4:	7dfb      	ldrb	r3, [r7, #23]
 80380c6:	e080      	b.n	80381ca <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80380c8:	68fb      	ldr	r3, [r7, #12]
 80380ca:	681b      	ldr	r3, [r3, #0]
 80380cc:	689a      	ldr	r2, [r3, #8]
 80380ce:	68fb      	ldr	r3, [r7, #12]
 80380d0:	681b      	ldr	r3, [r3, #0]
 80380d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80380d6:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80380d8:	68fb      	ldr	r3, [r7, #12]
 80380da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80380dc:	2200      	movs	r2, #0
 80380de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80380e0:	68fb      	ldr	r3, [r7, #12]
 80380e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80380e4:	2200      	movs	r2, #0
 80380e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80380e8:	68fb      	ldr	r3, [r7, #12]
 80380ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80380ec:	2200      	movs	r2, #0
 80380ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80380f0:	68fb      	ldr	r3, [r7, #12]
 80380f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80380f4:	2200      	movs	r2, #0
 80380f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80380f8:	68fb      	ldr	r3, [r7, #12]
 80380fa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80380fc:	68fb      	ldr	r3, [r7, #12]
 80380fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8038100:	4619      	mov	r1, r3
 8038102:	68fb      	ldr	r3, [r7, #12]
 8038104:	681b      	ldr	r3, [r3, #0]
 8038106:	3320      	adds	r3, #32
 8038108:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 803810a:	68fb      	ldr	r3, [r7, #12]
 803810c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8038110:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8038112:	f7f8 f837 	bl	8030184 <HAL_DMA_Start_IT>
 8038116:	4603      	mov	r3, r0
 8038118:	2b00      	cmp	r3, #0
 803811a:	d013      	beq.n	8038144 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 803811c:	68fb      	ldr	r3, [r7, #12]
 803811e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8038122:	f043 0210 	orr.w	r2, r3, #16
 8038126:	68fb      	ldr	r3, [r7, #12]
 8038128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 803812c:	68fb      	ldr	r3, [r7, #12]
 803812e:	2200      	movs	r2, #0
 8038130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8038134:	68fb      	ldr	r3, [r7, #12]
 8038136:	2201      	movs	r2, #1
 8038138:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 803813c:	2301      	movs	r3, #1
 803813e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8038140:	7dfb      	ldrb	r3, [r7, #23]
 8038142:	e042      	b.n	80381ca <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8038144:	68fb      	ldr	r3, [r7, #12]
 8038146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8038148:	69db      	ldr	r3, [r3, #28]
 803814a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803814e:	d108      	bne.n	8038162 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8038150:	68fb      	ldr	r3, [r7, #12]
 8038152:	681b      	ldr	r3, [r3, #0]
 8038154:	6859      	ldr	r1, [r3, #4]
 8038156:	68fb      	ldr	r3, [r7, #12]
 8038158:	681a      	ldr	r2, [r3, #0]
 803815a:	4b23      	ldr	r3, [pc, #140]	; (80381e8 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 803815c:	400b      	ands	r3, r1
 803815e:	6053      	str	r3, [r2, #4]
 8038160:	e009      	b.n	8038176 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8038162:	68fb      	ldr	r3, [r7, #12]
 8038164:	681b      	ldr	r3, [r3, #0]
 8038166:	685a      	ldr	r2, [r3, #4]
 8038168:	4b1f      	ldr	r3, [pc, #124]	; (80381e8 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 803816a:	4013      	ands	r3, r2
 803816c:	8879      	ldrh	r1, [r7, #2]
 803816e:	68fa      	ldr	r2, [r7, #12]
 8038170:	6812      	ldr	r2, [r2, #0]
 8038172:	430b      	orrs	r3, r1
 8038174:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8038176:	68fb      	ldr	r3, [r7, #12]
 8038178:	681b      	ldr	r3, [r3, #0]
 803817a:	689a      	ldr	r2, [r3, #8]
 803817c:	68fb      	ldr	r3, [r7, #12]
 803817e:	681b      	ldr	r3, [r3, #0]
 8038180:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8038184:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8038186:	68fb      	ldr	r3, [r7, #12]
 8038188:	681b      	ldr	r3, [r3, #0]
 803818a:	691a      	ldr	r2, [r3, #16]
 803818c:	68fb      	ldr	r3, [r7, #12]
 803818e:	681b      	ldr	r3, [r3, #0]
 8038190:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8038194:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8038196:	68fb      	ldr	r3, [r7, #12]
 8038198:	681b      	ldr	r3, [r3, #0]
 803819a:	681a      	ldr	r2, [r3, #0]
 803819c:	68fb      	ldr	r3, [r7, #12]
 803819e:	681b      	ldr	r3, [r3, #0]
 80381a0:	f042 0201 	orr.w	r2, r2, #1
 80381a4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80381a6:	68fb      	ldr	r3, [r7, #12]
 80381a8:	685b      	ldr	r3, [r3, #4]
 80381aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80381ae:	d107      	bne.n	80381c0 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80381b0:	68fb      	ldr	r3, [r7, #12]
 80381b2:	681b      	ldr	r3, [r3, #0]
 80381b4:	681a      	ldr	r2, [r3, #0]
 80381b6:	68fb      	ldr	r3, [r7, #12]
 80381b8:	681b      	ldr	r3, [r3, #0]
 80381ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80381be:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80381c0:	68fb      	ldr	r3, [r7, #12]
 80381c2:	2200      	movs	r2, #0
 80381c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80381c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80381ca:	4618      	mov	r0, r3
 80381cc:	3718      	adds	r7, #24
 80381ce:	46bd      	mov	sp, r7
 80381d0:	bd80      	pop	{r7, pc}
 80381d2:	bf00      	nop
 80381d4:	0803871b 	.word	0x0803871b
 80381d8:	08038673 	.word	0x08038673
 80381dc:	08038737 	.word	0x08038737
 80381e0:	080386b9 	.word	0x080386b9
 80381e4:	08038753 	.word	0x08038753
 80381e8:	ffff0000 	.word	0xffff0000

080381ec <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80381ec:	b580      	push	{r7, lr}
 80381ee:	b08a      	sub	sp, #40	; 0x28
 80381f0:	af00      	add	r7, sp, #0
 80381f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80381f4:	687b      	ldr	r3, [r7, #4]
 80381f6:	681b      	ldr	r3, [r3, #0]
 80381f8:	691b      	ldr	r3, [r3, #16]
 80381fa:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80381fc:	687b      	ldr	r3, [r7, #4]
 80381fe:	681b      	ldr	r3, [r3, #0]
 8038200:	695b      	ldr	r3, [r3, #20]
 8038202:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8038204:	6a3a      	ldr	r2, [r7, #32]
 8038206:	69fb      	ldr	r3, [r7, #28]
 8038208:	4013      	ands	r3, r2
 803820a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 803820c:	687b      	ldr	r3, [r7, #4]
 803820e:	681b      	ldr	r3, [r3, #0]
 8038210:	689b      	ldr	r3, [r3, #8]
 8038212:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8038214:	2300      	movs	r3, #0
 8038216:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8038218:	687b      	ldr	r3, [r7, #4]
 803821a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803821e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8038220:	687b      	ldr	r3, [r7, #4]
 8038222:	681b      	ldr	r3, [r3, #0]
 8038224:	3330      	adds	r3, #48	; 0x30
 8038226:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8038228:	69bb      	ldr	r3, [r7, #24]
 803822a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803822e:	2b00      	cmp	r3, #0
 8038230:	d113      	bne.n	803825a <HAL_SPI_IRQHandler+0x6e>
 8038232:	69bb      	ldr	r3, [r7, #24]
 8038234:	f003 0320 	and.w	r3, r3, #32
 8038238:	2b00      	cmp	r3, #0
 803823a:	d10e      	bne.n	803825a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 803823c:	69bb      	ldr	r3, [r7, #24]
 803823e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8038242:	2b00      	cmp	r3, #0
 8038244:	d009      	beq.n	803825a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8038246:	687b      	ldr	r3, [r7, #4]
 8038248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803824a:	6878      	ldr	r0, [r7, #4]
 803824c:	4798      	blx	r3
    hspi->RxISR(hspi);
 803824e:	687b      	ldr	r3, [r7, #4]
 8038250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8038252:	6878      	ldr	r0, [r7, #4]
 8038254:	4798      	blx	r3
    handled = 1UL;
 8038256:	2301      	movs	r3, #1
 8038258:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 803825a:	69bb      	ldr	r3, [r7, #24]
 803825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8038260:	2b00      	cmp	r3, #0
 8038262:	d10f      	bne.n	8038284 <HAL_SPI_IRQHandler+0x98>
 8038264:	69bb      	ldr	r3, [r7, #24]
 8038266:	f003 0301 	and.w	r3, r3, #1
 803826a:	2b00      	cmp	r3, #0
 803826c:	d00a      	beq.n	8038284 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 803826e:	69bb      	ldr	r3, [r7, #24]
 8038270:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8038274:	2b00      	cmp	r3, #0
 8038276:	d105      	bne.n	8038284 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8038278:	687b      	ldr	r3, [r7, #4]
 803827a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803827c:	6878      	ldr	r0, [r7, #4]
 803827e:	4798      	blx	r3
    handled = 1UL;
 8038280:	2301      	movs	r3, #1
 8038282:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8038284:	69bb      	ldr	r3, [r7, #24]
 8038286:	f003 0320 	and.w	r3, r3, #32
 803828a:	2b00      	cmp	r3, #0
 803828c:	d10f      	bne.n	80382ae <HAL_SPI_IRQHandler+0xc2>
 803828e:	69bb      	ldr	r3, [r7, #24]
 8038290:	f003 0302 	and.w	r3, r3, #2
 8038294:	2b00      	cmp	r3, #0
 8038296:	d00a      	beq.n	80382ae <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8038298:	69bb      	ldr	r3, [r7, #24]
 803829a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 803829e:	2b00      	cmp	r3, #0
 80382a0:	d105      	bne.n	80382ae <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80382a2:	687b      	ldr	r3, [r7, #4]
 80382a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80382a6:	6878      	ldr	r0, [r7, #4]
 80382a8:	4798      	blx	r3
    handled = 1UL;
 80382aa:	2301      	movs	r3, #1
 80382ac:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80382ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80382b0:	2b00      	cmp	r3, #0
 80382b2:	f040 815a 	bne.w	803856a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80382b6:	69bb      	ldr	r3, [r7, #24]
 80382b8:	f003 0308 	and.w	r3, r3, #8
 80382bc:	2b00      	cmp	r3, #0
 80382be:	f000 808b 	beq.w	80383d8 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80382c2:	687b      	ldr	r3, [r7, #4]
 80382c4:	681b      	ldr	r3, [r3, #0]
 80382c6:	699a      	ldr	r2, [r3, #24]
 80382c8:	687b      	ldr	r3, [r7, #4]
 80382ca:	681b      	ldr	r3, [r3, #0]
 80382cc:	f042 0208 	orr.w	r2, r2, #8
 80382d0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80382d2:	687b      	ldr	r3, [r7, #4]
 80382d4:	681b      	ldr	r3, [r3, #0]
 80382d6:	699a      	ldr	r2, [r3, #24]
 80382d8:	687b      	ldr	r3, [r7, #4]
 80382da:	681b      	ldr	r3, [r3, #0]
 80382dc:	f042 0210 	orr.w	r2, r2, #16
 80382e0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80382e2:	687b      	ldr	r3, [r7, #4]
 80382e4:	681b      	ldr	r3, [r3, #0]
 80382e6:	699a      	ldr	r2, [r3, #24]
 80382e8:	687b      	ldr	r3, [r7, #4]
 80382ea:	681b      	ldr	r3, [r3, #0]
 80382ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80382f0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80382f2:	687b      	ldr	r3, [r7, #4]
 80382f4:	681b      	ldr	r3, [r3, #0]
 80382f6:	691a      	ldr	r2, [r3, #16]
 80382f8:	687b      	ldr	r3, [r7, #4]
 80382fa:	681b      	ldr	r3, [r3, #0]
 80382fc:	f022 0208 	bic.w	r2, r2, #8
 8038300:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8038302:	687b      	ldr	r3, [r7, #4]
 8038304:	681b      	ldr	r3, [r3, #0]
 8038306:	689b      	ldr	r3, [r3, #8]
 8038308:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 803830c:	2b00      	cmp	r3, #0
 803830e:	d13d      	bne.n	803838c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8038310:	e036      	b.n	8038380 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8038312:	687b      	ldr	r3, [r7, #4]
 8038314:	68db      	ldr	r3, [r3, #12]
 8038316:	2b0f      	cmp	r3, #15
 8038318:	d90b      	bls.n	8038332 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 803831a:	687b      	ldr	r3, [r7, #4]
 803831c:	681a      	ldr	r2, [r3, #0]
 803831e:	687b      	ldr	r3, [r7, #4]
 8038320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8038322:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8038324:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8038326:	687b      	ldr	r3, [r7, #4]
 8038328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803832a:	1d1a      	adds	r2, r3, #4
 803832c:	687b      	ldr	r3, [r7, #4]
 803832e:	665a      	str	r2, [r3, #100]	; 0x64
 8038330:	e01d      	b.n	803836e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8038332:	687b      	ldr	r3, [r7, #4]
 8038334:	68db      	ldr	r3, [r3, #12]
 8038336:	2b07      	cmp	r3, #7
 8038338:	d90b      	bls.n	8038352 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 803833a:	687b      	ldr	r3, [r7, #4]
 803833c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803833e:	68fa      	ldr	r2, [r7, #12]
 8038340:	8812      	ldrh	r2, [r2, #0]
 8038342:	b292      	uxth	r2, r2
 8038344:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8038346:	687b      	ldr	r3, [r7, #4]
 8038348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803834a:	1c9a      	adds	r2, r3, #2
 803834c:	687b      	ldr	r3, [r7, #4]
 803834e:	665a      	str	r2, [r3, #100]	; 0x64
 8038350:	e00d      	b.n	803836e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8038352:	687b      	ldr	r3, [r7, #4]
 8038354:	681b      	ldr	r3, [r3, #0]
 8038356:	f103 0230 	add.w	r2, r3, #48	; 0x30
 803835a:	687b      	ldr	r3, [r7, #4]
 803835c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803835e:	7812      	ldrb	r2, [r2, #0]
 8038360:	b2d2      	uxtb	r2, r2
 8038362:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8038364:	687b      	ldr	r3, [r7, #4]
 8038366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8038368:	1c5a      	adds	r2, r3, #1
 803836a:	687b      	ldr	r3, [r7, #4]
 803836c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 803836e:	687b      	ldr	r3, [r7, #4]
 8038370:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8038374:	b29b      	uxth	r3, r3
 8038376:	3b01      	subs	r3, #1
 8038378:	b29a      	uxth	r2, r3
 803837a:	687b      	ldr	r3, [r7, #4]
 803837c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8038380:	687b      	ldr	r3, [r7, #4]
 8038382:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8038386:	b29b      	uxth	r3, r3
 8038388:	2b00      	cmp	r3, #0
 803838a:	d1c2      	bne.n	8038312 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 803838c:	6878      	ldr	r0, [r7, #4]
 803838e:	f000 fa1d 	bl	80387cc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8038392:	687b      	ldr	r3, [r7, #4]
 8038394:	2201      	movs	r2, #1
 8038396:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 803839a:	687b      	ldr	r3, [r7, #4]
 803839c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80383a0:	2b00      	cmp	r3, #0
 80383a2:	d003      	beq.n	80383ac <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80383a4:	6878      	ldr	r0, [r7, #4]
 80383a6:	f000 f929 	bl	80385fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80383aa:	e0e3      	b.n	8038574 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80383ac:	7cfb      	ldrb	r3, [r7, #19]
 80383ae:	2b05      	cmp	r3, #5
 80383b0:	d103      	bne.n	80383ba <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80383b2:	6878      	ldr	r0, [r7, #4]
 80383b4:	f000 f8fa 	bl	80385ac <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80383b8:	e0d9      	b.n	803856e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80383ba:	7cfb      	ldrb	r3, [r7, #19]
 80383bc:	2b04      	cmp	r3, #4
 80383be:	d103      	bne.n	80383c8 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 80383c0:	6878      	ldr	r0, [r7, #4]
 80383c2:	f000 f8e9 	bl	8038598 <HAL_SPI_RxCpltCallback>
    return;
 80383c6:	e0d2      	b.n	803856e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80383c8:	7cfb      	ldrb	r3, [r7, #19]
 80383ca:	2b03      	cmp	r3, #3
 80383cc:	f040 80cf 	bne.w	803856e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 80383d0:	6878      	ldr	r0, [r7, #4]
 80383d2:	f000 f8d7 	bl	8038584 <HAL_SPI_TxCpltCallback>
    return;
 80383d6:	e0ca      	b.n	803856e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80383d8:	69fb      	ldr	r3, [r7, #28]
 80383da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80383de:	2b00      	cmp	r3, #0
 80383e0:	d00d      	beq.n	80383fe <HAL_SPI_IRQHandler+0x212>
 80383e2:	6a3b      	ldr	r3, [r7, #32]
 80383e4:	f003 0308 	and.w	r3, r3, #8
 80383e8:	2b00      	cmp	r3, #0
 80383ea:	d008      	beq.n	80383fe <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80383ec:	687b      	ldr	r3, [r7, #4]
 80383ee:	681b      	ldr	r3, [r3, #0]
 80383f0:	699a      	ldr	r2, [r3, #24]
 80383f2:	687b      	ldr	r3, [r7, #4]
 80383f4:	681b      	ldr	r3, [r3, #0]
 80383f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80383fa:	619a      	str	r2, [r3, #24]

    return;
 80383fc:	e0ba      	b.n	8038574 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80383fe:	69bb      	ldr	r3, [r7, #24]
 8038400:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8038404:	2b00      	cmp	r3, #0
 8038406:	f000 80b5 	beq.w	8038574 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 803840a:	69bb      	ldr	r3, [r7, #24]
 803840c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8038410:	2b00      	cmp	r3, #0
 8038412:	d00f      	beq.n	8038434 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8038414:	687b      	ldr	r3, [r7, #4]
 8038416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803841a:	f043 0204 	orr.w	r2, r3, #4
 803841e:	687b      	ldr	r3, [r7, #4]
 8038420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8038424:	687b      	ldr	r3, [r7, #4]
 8038426:	681b      	ldr	r3, [r3, #0]
 8038428:	699a      	ldr	r2, [r3, #24]
 803842a:	687b      	ldr	r3, [r7, #4]
 803842c:	681b      	ldr	r3, [r3, #0]
 803842e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8038432:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8038434:	69bb      	ldr	r3, [r7, #24]
 8038436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 803843a:	2b00      	cmp	r3, #0
 803843c:	d00f      	beq.n	803845e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 803843e:	687b      	ldr	r3, [r7, #4]
 8038440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8038444:	f043 0201 	orr.w	r2, r3, #1
 8038448:	687b      	ldr	r3, [r7, #4]
 803844a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 803844e:	687b      	ldr	r3, [r7, #4]
 8038450:	681b      	ldr	r3, [r3, #0]
 8038452:	699a      	ldr	r2, [r3, #24]
 8038454:	687b      	ldr	r3, [r7, #4]
 8038456:	681b      	ldr	r3, [r3, #0]
 8038458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 803845c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 803845e:	69bb      	ldr	r3, [r7, #24]
 8038460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038464:	2b00      	cmp	r3, #0
 8038466:	d00f      	beq.n	8038488 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8038468:	687b      	ldr	r3, [r7, #4]
 803846a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803846e:	f043 0208 	orr.w	r2, r3, #8
 8038472:	687b      	ldr	r3, [r7, #4]
 8038474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8038478:	687b      	ldr	r3, [r7, #4]
 803847a:	681b      	ldr	r3, [r3, #0]
 803847c:	699a      	ldr	r2, [r3, #24]
 803847e:	687b      	ldr	r3, [r7, #4]
 8038480:	681b      	ldr	r3, [r3, #0]
 8038482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8038486:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8038488:	69bb      	ldr	r3, [r7, #24]
 803848a:	f003 0320 	and.w	r3, r3, #32
 803848e:	2b00      	cmp	r3, #0
 8038490:	d00f      	beq.n	80384b2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8038492:	687b      	ldr	r3, [r7, #4]
 8038494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8038498:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 803849c:	687b      	ldr	r3, [r7, #4]
 803849e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80384a2:	687b      	ldr	r3, [r7, #4]
 80384a4:	681b      	ldr	r3, [r3, #0]
 80384a6:	699a      	ldr	r2, [r3, #24]
 80384a8:	687b      	ldr	r3, [r7, #4]
 80384aa:	681b      	ldr	r3, [r3, #0]
 80384ac:	f042 0220 	orr.w	r2, r2, #32
 80384b0:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80384b2:	687b      	ldr	r3, [r7, #4]
 80384b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80384b8:	2b00      	cmp	r3, #0
 80384ba:	d05a      	beq.n	8038572 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80384bc:	687b      	ldr	r3, [r7, #4]
 80384be:	681b      	ldr	r3, [r3, #0]
 80384c0:	681a      	ldr	r2, [r3, #0]
 80384c2:	687b      	ldr	r3, [r7, #4]
 80384c4:	681b      	ldr	r3, [r3, #0]
 80384c6:	f022 0201 	bic.w	r2, r2, #1
 80384ca:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80384cc:	687b      	ldr	r3, [r7, #4]
 80384ce:	681b      	ldr	r3, [r3, #0]
 80384d0:	6919      	ldr	r1, [r3, #16]
 80384d2:	687b      	ldr	r3, [r7, #4]
 80384d4:	681a      	ldr	r2, [r3, #0]
 80384d6:	4b29      	ldr	r3, [pc, #164]	; (803857c <HAL_SPI_IRQHandler+0x390>)
 80384d8:	400b      	ands	r3, r1
 80384da:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80384dc:	697b      	ldr	r3, [r7, #20]
 80384de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80384e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80384e6:	d138      	bne.n	803855a <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80384e8:	687b      	ldr	r3, [r7, #4]
 80384ea:	681b      	ldr	r3, [r3, #0]
 80384ec:	689a      	ldr	r2, [r3, #8]
 80384ee:	687b      	ldr	r3, [r7, #4]
 80384f0:	681b      	ldr	r3, [r3, #0]
 80384f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80384f6:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80384f8:	687b      	ldr	r3, [r7, #4]
 80384fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80384fc:	2b00      	cmp	r3, #0
 80384fe:	d013      	beq.n	8038528 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8038500:	687b      	ldr	r3, [r7, #4]
 8038502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038504:	4a1e      	ldr	r2, [pc, #120]	; (8038580 <HAL_SPI_IRQHandler+0x394>)
 8038506:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8038508:	687b      	ldr	r3, [r7, #4]
 803850a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803850c:	4618      	mov	r0, r3
 803850e:	f7f8 fbc1 	bl	8030c94 <HAL_DMA_Abort_IT>
 8038512:	4603      	mov	r3, r0
 8038514:	2b00      	cmp	r3, #0
 8038516:	d007      	beq.n	8038528 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8038518:	687b      	ldr	r3, [r7, #4]
 803851a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803851e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8038522:	687b      	ldr	r3, [r7, #4]
 8038524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8038528:	687b      	ldr	r3, [r7, #4]
 803852a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803852c:	2b00      	cmp	r3, #0
 803852e:	d020      	beq.n	8038572 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8038530:	687b      	ldr	r3, [r7, #4]
 8038532:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8038534:	4a12      	ldr	r2, [pc, #72]	; (8038580 <HAL_SPI_IRQHandler+0x394>)
 8038536:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8038538:	687b      	ldr	r3, [r7, #4]
 803853a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803853c:	4618      	mov	r0, r3
 803853e:	f7f8 fba9 	bl	8030c94 <HAL_DMA_Abort_IT>
 8038542:	4603      	mov	r3, r0
 8038544:	2b00      	cmp	r3, #0
 8038546:	d014      	beq.n	8038572 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8038548:	687b      	ldr	r3, [r7, #4]
 803854a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803854e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8038552:	687b      	ldr	r3, [r7, #4]
 8038554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8038558:	e00b      	b.n	8038572 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 803855a:	687b      	ldr	r3, [r7, #4]
 803855c:	2201      	movs	r2, #1
 803855e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8038562:	6878      	ldr	r0, [r7, #4]
 8038564:	f000 f84a 	bl	80385fc <HAL_SPI_ErrorCallback>
    return;
 8038568:	e003      	b.n	8038572 <HAL_SPI_IRQHandler+0x386>
    return;
 803856a:	bf00      	nop
 803856c:	e002      	b.n	8038574 <HAL_SPI_IRQHandler+0x388>
    return;
 803856e:	bf00      	nop
 8038570:	e000      	b.n	8038574 <HAL_SPI_IRQHandler+0x388>
    return;
 8038572:	bf00      	nop
  }
}
 8038574:	3728      	adds	r7, #40	; 0x28
 8038576:	46bd      	mov	sp, r7
 8038578:	bd80      	pop	{r7, pc}
 803857a:	bf00      	nop
 803857c:	fffffc94 	.word	0xfffffc94
 8038580:	08038799 	.word	0x08038799

08038584 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8038584:	b480      	push	{r7}
 8038586:	b083      	sub	sp, #12
 8038588:	af00      	add	r7, sp, #0
 803858a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 803858c:	bf00      	nop
 803858e:	370c      	adds	r7, #12
 8038590:	46bd      	mov	sp, r7
 8038592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038596:	4770      	bx	lr

08038598 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8038598:	b480      	push	{r7}
 803859a:	b083      	sub	sp, #12
 803859c:	af00      	add	r7, sp, #0
 803859e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80385a0:	bf00      	nop
 80385a2:	370c      	adds	r7, #12
 80385a4:	46bd      	mov	sp, r7
 80385a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80385aa:	4770      	bx	lr

080385ac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80385ac:	b480      	push	{r7}
 80385ae:	b083      	sub	sp, #12
 80385b0:	af00      	add	r7, sp, #0
 80385b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80385b4:	bf00      	nop
 80385b6:	370c      	adds	r7, #12
 80385b8:	46bd      	mov	sp, r7
 80385ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80385be:	4770      	bx	lr

080385c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80385c0:	b480      	push	{r7}
 80385c2:	b083      	sub	sp, #12
 80385c4:	af00      	add	r7, sp, #0
 80385c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80385c8:	bf00      	nop
 80385ca:	370c      	adds	r7, #12
 80385cc:	46bd      	mov	sp, r7
 80385ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80385d2:	4770      	bx	lr

080385d4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80385d4:	b480      	push	{r7}
 80385d6:	b083      	sub	sp, #12
 80385d8:	af00      	add	r7, sp, #0
 80385da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80385dc:	bf00      	nop
 80385de:	370c      	adds	r7, #12
 80385e0:	46bd      	mov	sp, r7
 80385e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80385e6:	4770      	bx	lr

080385e8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80385e8:	b480      	push	{r7}
 80385ea:	b083      	sub	sp, #12
 80385ec:	af00      	add	r7, sp, #0
 80385ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80385f0:	bf00      	nop
 80385f2:	370c      	adds	r7, #12
 80385f4:	46bd      	mov	sp, r7
 80385f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80385fa:	4770      	bx	lr

080385fc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80385fc:	b480      	push	{r7}
 80385fe:	b083      	sub	sp, #12
 8038600:	af00      	add	r7, sp, #0
 8038602:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8038604:	bf00      	nop
 8038606:	370c      	adds	r7, #12
 8038608:	46bd      	mov	sp, r7
 803860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803860e:	4770      	bx	lr

08038610 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8038610:	b480      	push	{r7}
 8038612:	b083      	sub	sp, #12
 8038614:	af00      	add	r7, sp, #0
 8038616:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8038618:	687b      	ldr	r3, [r7, #4]
 803861a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803861e:	b2db      	uxtb	r3, r3
}
 8038620:	4618      	mov	r0, r3
 8038622:	370c      	adds	r7, #12
 8038624:	46bd      	mov	sp, r7
 8038626:	f85d 7b04 	ldr.w	r7, [sp], #4
 803862a:	4770      	bx	lr

0803862c <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 803862c:	b580      	push	{r7, lr}
 803862e:	b084      	sub	sp, #16
 8038630:	af00      	add	r7, sp, #0
 8038632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8038634:	687b      	ldr	r3, [r7, #4]
 8038636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8038638:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 803863a:	68fb      	ldr	r3, [r7, #12]
 803863c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8038640:	b2db      	uxtb	r3, r3
 8038642:	2b07      	cmp	r3, #7
 8038644:	d011      	beq.n	803866a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8038646:	68fb      	ldr	r3, [r7, #12]
 8038648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803864a:	69db      	ldr	r3, [r3, #28]
 803864c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8038650:	d103      	bne.n	803865a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8038652:	68f8      	ldr	r0, [r7, #12]
 8038654:	f7ff ff96 	bl	8038584 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8038658:	e007      	b.n	803866a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 803865a:	68fb      	ldr	r3, [r7, #12]
 803865c:	681b      	ldr	r3, [r3, #0]
 803865e:	691a      	ldr	r2, [r3, #16]
 8038660:	68fb      	ldr	r3, [r7, #12]
 8038662:	681b      	ldr	r3, [r3, #0]
 8038664:	f042 0208 	orr.w	r2, r2, #8
 8038668:	611a      	str	r2, [r3, #16]
}
 803866a:	bf00      	nop
 803866c:	3710      	adds	r7, #16
 803866e:	46bd      	mov	sp, r7
 8038670:	bd80      	pop	{r7, pc}

08038672 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8038672:	b580      	push	{r7, lr}
 8038674:	b084      	sub	sp, #16
 8038676:	af00      	add	r7, sp, #0
 8038678:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803867a:	687b      	ldr	r3, [r7, #4]
 803867c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803867e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8038680:	68fb      	ldr	r3, [r7, #12]
 8038682:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8038686:	b2db      	uxtb	r3, r3
 8038688:	2b07      	cmp	r3, #7
 803868a:	d011      	beq.n	80386b0 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 803868c:	68fb      	ldr	r3, [r7, #12]
 803868e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038690:	69db      	ldr	r3, [r3, #28]
 8038692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8038696:	d103      	bne.n	80386a0 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8038698:	68f8      	ldr	r0, [r7, #12]
 803869a:	f7ff ff7d 	bl	8038598 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 803869e:	e007      	b.n	80386b0 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80386a0:	68fb      	ldr	r3, [r7, #12]
 80386a2:	681b      	ldr	r3, [r3, #0]
 80386a4:	691a      	ldr	r2, [r3, #16]
 80386a6:	68fb      	ldr	r3, [r7, #12]
 80386a8:	681b      	ldr	r3, [r3, #0]
 80386aa:	f042 0208 	orr.w	r2, r2, #8
 80386ae:	611a      	str	r2, [r3, #16]
}
 80386b0:	bf00      	nop
 80386b2:	3710      	adds	r7, #16
 80386b4:	46bd      	mov	sp, r7
 80386b6:	bd80      	pop	{r7, pc}

080386b8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80386b8:	b580      	push	{r7, lr}
 80386ba:	b084      	sub	sp, #16
 80386bc:	af00      	add	r7, sp, #0
 80386be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80386c0:	687b      	ldr	r3, [r7, #4]
 80386c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80386c4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80386c6:	68fb      	ldr	r3, [r7, #12]
 80386c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80386cc:	b2db      	uxtb	r3, r3
 80386ce:	2b07      	cmp	r3, #7
 80386d0:	d011      	beq.n	80386f6 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80386d2:	68fb      	ldr	r3, [r7, #12]
 80386d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80386d6:	69db      	ldr	r3, [r3, #28]
 80386d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80386dc:	d103      	bne.n	80386e6 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 80386de:	68f8      	ldr	r0, [r7, #12]
 80386e0:	f7ff ff64 	bl	80385ac <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80386e4:	e007      	b.n	80386f6 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80386e6:	68fb      	ldr	r3, [r7, #12]
 80386e8:	681b      	ldr	r3, [r3, #0]
 80386ea:	691a      	ldr	r2, [r3, #16]
 80386ec:	68fb      	ldr	r3, [r7, #12]
 80386ee:	681b      	ldr	r3, [r3, #0]
 80386f0:	f042 0208 	orr.w	r2, r2, #8
 80386f4:	611a      	str	r2, [r3, #16]
}
 80386f6:	bf00      	nop
 80386f8:	3710      	adds	r7, #16
 80386fa:	46bd      	mov	sp, r7
 80386fc:	bd80      	pop	{r7, pc}

080386fe <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80386fe:	b580      	push	{r7, lr}
 8038700:	b084      	sub	sp, #16
 8038702:	af00      	add	r7, sp, #0
 8038704:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8038706:	687b      	ldr	r3, [r7, #4]
 8038708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803870a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 803870c:	68f8      	ldr	r0, [r7, #12]
 803870e:	f7ff ff57 	bl	80385c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8038712:	bf00      	nop
 8038714:	3710      	adds	r7, #16
 8038716:	46bd      	mov	sp, r7
 8038718:	bd80      	pop	{r7, pc}

0803871a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 803871a:	b580      	push	{r7, lr}
 803871c:	b084      	sub	sp, #16
 803871e:	af00      	add	r7, sp, #0
 8038720:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8038722:	687b      	ldr	r3, [r7, #4]
 8038724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8038726:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8038728:	68f8      	ldr	r0, [r7, #12]
 803872a:	f7ff ff53 	bl	80385d4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 803872e:	bf00      	nop
 8038730:	3710      	adds	r7, #16
 8038732:	46bd      	mov	sp, r7
 8038734:	bd80      	pop	{r7, pc}

08038736 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8038736:	b580      	push	{r7, lr}
 8038738:	b084      	sub	sp, #16
 803873a:	af00      	add	r7, sp, #0
 803873c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803873e:	687b      	ldr	r3, [r7, #4]
 8038740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8038742:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8038744:	68f8      	ldr	r0, [r7, #12]
 8038746:	f7ff ff4f 	bl	80385e8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 803874a:	bf00      	nop
 803874c:	3710      	adds	r7, #16
 803874e:	46bd      	mov	sp, r7
 8038750:	bd80      	pop	{r7, pc}

08038752 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8038752:	b580      	push	{r7, lr}
 8038754:	b084      	sub	sp, #16
 8038756:	af00      	add	r7, sp, #0
 8038758:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803875a:	687b      	ldr	r3, [r7, #4]
 803875c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803875e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8038760:	6878      	ldr	r0, [r7, #4]
 8038762:	f7f9 fc15 	bl	8031f90 <HAL_DMA_GetError>
 8038766:	4603      	mov	r3, r0
 8038768:	2b02      	cmp	r3, #2
 803876a:	d011      	beq.n	8038790 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 803876c:	68f8      	ldr	r0, [r7, #12]
 803876e:	f000 f82d 	bl	80387cc <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8038772:	68fb      	ldr	r3, [r7, #12]
 8038774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8038778:	f043 0210 	orr.w	r2, r3, #16
 803877c:	68fb      	ldr	r3, [r7, #12]
 803877e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8038782:	68fb      	ldr	r3, [r7, #12]
 8038784:	2201      	movs	r2, #1
 8038786:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 803878a:	68f8      	ldr	r0, [r7, #12]
 803878c:	f7ff ff36 	bl	80385fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8038790:	bf00      	nop
 8038792:	3710      	adds	r7, #16
 8038794:	46bd      	mov	sp, r7
 8038796:	bd80      	pop	{r7, pc}

08038798 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8038798:	b580      	push	{r7, lr}
 803879a:	b084      	sub	sp, #16
 803879c:	af00      	add	r7, sp, #0
 803879e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80387a0:	687b      	ldr	r3, [r7, #4]
 80387a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80387a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80387a6:	68fb      	ldr	r3, [r7, #12]
 80387a8:	2200      	movs	r2, #0
 80387aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80387ae:	68fb      	ldr	r3, [r7, #12]
 80387b0:	2200      	movs	r2, #0
 80387b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80387b6:	68fb      	ldr	r3, [r7, #12]
 80387b8:	2201      	movs	r2, #1
 80387ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80387be:	68f8      	ldr	r0, [r7, #12]
 80387c0:	f7ff ff1c 	bl	80385fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80387c4:	bf00      	nop
 80387c6:	3710      	adds	r7, #16
 80387c8:	46bd      	mov	sp, r7
 80387ca:	bd80      	pop	{r7, pc}

080387cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80387cc:	b480      	push	{r7}
 80387ce:	b085      	sub	sp, #20
 80387d0:	af00      	add	r7, sp, #0
 80387d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80387d4:	687b      	ldr	r3, [r7, #4]
 80387d6:	681b      	ldr	r3, [r3, #0]
 80387d8:	695b      	ldr	r3, [r3, #20]
 80387da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80387dc:	687b      	ldr	r3, [r7, #4]
 80387de:	681b      	ldr	r3, [r3, #0]
 80387e0:	699a      	ldr	r2, [r3, #24]
 80387e2:	687b      	ldr	r3, [r7, #4]
 80387e4:	681b      	ldr	r3, [r3, #0]
 80387e6:	f042 0208 	orr.w	r2, r2, #8
 80387ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80387ec:	687b      	ldr	r3, [r7, #4]
 80387ee:	681b      	ldr	r3, [r3, #0]
 80387f0:	699a      	ldr	r2, [r3, #24]
 80387f2:	687b      	ldr	r3, [r7, #4]
 80387f4:	681b      	ldr	r3, [r3, #0]
 80387f6:	f042 0210 	orr.w	r2, r2, #16
 80387fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80387fc:	687b      	ldr	r3, [r7, #4]
 80387fe:	681b      	ldr	r3, [r3, #0]
 8038800:	681a      	ldr	r2, [r3, #0]
 8038802:	687b      	ldr	r3, [r7, #4]
 8038804:	681b      	ldr	r3, [r3, #0]
 8038806:	f022 0201 	bic.w	r2, r2, #1
 803880a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 803880c:	687b      	ldr	r3, [r7, #4]
 803880e:	681b      	ldr	r3, [r3, #0]
 8038810:	6919      	ldr	r1, [r3, #16]
 8038812:	687b      	ldr	r3, [r7, #4]
 8038814:	681a      	ldr	r2, [r3, #0]
 8038816:	4b3c      	ldr	r3, [pc, #240]	; (8038908 <SPI_CloseTransfer+0x13c>)
 8038818:	400b      	ands	r3, r1
 803881a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 803881c:	687b      	ldr	r3, [r7, #4]
 803881e:	681b      	ldr	r3, [r3, #0]
 8038820:	689a      	ldr	r2, [r3, #8]
 8038822:	687b      	ldr	r3, [r7, #4]
 8038824:	681b      	ldr	r3, [r3, #0]
 8038826:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 803882a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 803882c:	687b      	ldr	r3, [r7, #4]
 803882e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8038832:	b2db      	uxtb	r3, r3
 8038834:	2b04      	cmp	r3, #4
 8038836:	d014      	beq.n	8038862 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8038838:	68fb      	ldr	r3, [r7, #12]
 803883a:	f003 0320 	and.w	r3, r3, #32
 803883e:	2b00      	cmp	r3, #0
 8038840:	d00f      	beq.n	8038862 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8038842:	687b      	ldr	r3, [r7, #4]
 8038844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8038848:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 803884c:	687b      	ldr	r3, [r7, #4]
 803884e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8038852:	687b      	ldr	r3, [r7, #4]
 8038854:	681b      	ldr	r3, [r3, #0]
 8038856:	699a      	ldr	r2, [r3, #24]
 8038858:	687b      	ldr	r3, [r7, #4]
 803885a:	681b      	ldr	r3, [r3, #0]
 803885c:	f042 0220 	orr.w	r2, r2, #32
 8038860:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8038862:	687b      	ldr	r3, [r7, #4]
 8038864:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8038868:	b2db      	uxtb	r3, r3
 803886a:	2b03      	cmp	r3, #3
 803886c:	d014      	beq.n	8038898 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 803886e:	68fb      	ldr	r3, [r7, #12]
 8038870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8038874:	2b00      	cmp	r3, #0
 8038876:	d00f      	beq.n	8038898 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8038878:	687b      	ldr	r3, [r7, #4]
 803887a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803887e:	f043 0204 	orr.w	r2, r3, #4
 8038882:	687b      	ldr	r3, [r7, #4]
 8038884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8038888:	687b      	ldr	r3, [r7, #4]
 803888a:	681b      	ldr	r3, [r3, #0]
 803888c:	699a      	ldr	r2, [r3, #24]
 803888e:	687b      	ldr	r3, [r7, #4]
 8038890:	681b      	ldr	r3, [r3, #0]
 8038892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8038896:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8038898:	68fb      	ldr	r3, [r7, #12]
 803889a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 803889e:	2b00      	cmp	r3, #0
 80388a0:	d00f      	beq.n	80388c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80388a2:	687b      	ldr	r3, [r7, #4]
 80388a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80388a8:	f043 0201 	orr.w	r2, r3, #1
 80388ac:	687b      	ldr	r3, [r7, #4]
 80388ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80388b2:	687b      	ldr	r3, [r7, #4]
 80388b4:	681b      	ldr	r3, [r3, #0]
 80388b6:	699a      	ldr	r2, [r3, #24]
 80388b8:	687b      	ldr	r3, [r7, #4]
 80388ba:	681b      	ldr	r3, [r3, #0]
 80388bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80388c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80388c2:	68fb      	ldr	r3, [r7, #12]
 80388c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80388c8:	2b00      	cmp	r3, #0
 80388ca:	d00f      	beq.n	80388ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80388cc:	687b      	ldr	r3, [r7, #4]
 80388ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80388d2:	f043 0208 	orr.w	r2, r3, #8
 80388d6:	687b      	ldr	r3, [r7, #4]
 80388d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80388dc:	687b      	ldr	r3, [r7, #4]
 80388de:	681b      	ldr	r3, [r3, #0]
 80388e0:	699a      	ldr	r2, [r3, #24]
 80388e2:	687b      	ldr	r3, [r7, #4]
 80388e4:	681b      	ldr	r3, [r3, #0]
 80388e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80388ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80388ec:	687b      	ldr	r3, [r7, #4]
 80388ee:	2200      	movs	r2, #0
 80388f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80388f4:	687b      	ldr	r3, [r7, #4]
 80388f6:	2200      	movs	r2, #0
 80388f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80388fc:	bf00      	nop
 80388fe:	3714      	adds	r7, #20
 8038900:	46bd      	mov	sp, r7
 8038902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038906:	4770      	bx	lr
 8038908:	fffffc90 	.word	0xfffffc90

0803890c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 803890c:	b480      	push	{r7}
 803890e:	b085      	sub	sp, #20
 8038910:	af00      	add	r7, sp, #0
 8038912:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8038914:	687b      	ldr	r3, [r7, #4]
 8038916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8038918:	095b      	lsrs	r3, r3, #5
 803891a:	3301      	adds	r3, #1
 803891c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 803891e:	687b      	ldr	r3, [r7, #4]
 8038920:	68db      	ldr	r3, [r3, #12]
 8038922:	3301      	adds	r3, #1
 8038924:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8038926:	68bb      	ldr	r3, [r7, #8]
 8038928:	3307      	adds	r3, #7
 803892a:	08db      	lsrs	r3, r3, #3
 803892c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 803892e:	68bb      	ldr	r3, [r7, #8]
 8038930:	68fa      	ldr	r2, [r7, #12]
 8038932:	fb02 f303 	mul.w	r3, r2, r3
}
 8038936:	4618      	mov	r0, r3
 8038938:	3714      	adds	r7, #20
 803893a:	46bd      	mov	sp, r7
 803893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038940:	4770      	bx	lr

08038942 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8038942:	b580      	push	{r7, lr}
 8038944:	b082      	sub	sp, #8
 8038946:	af00      	add	r7, sp, #0
 8038948:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 803894a:	687b      	ldr	r3, [r7, #4]
 803894c:	2b00      	cmp	r3, #0
 803894e:	d101      	bne.n	8038954 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8038950:	2301      	movs	r3, #1
 8038952:	e049      	b.n	80389e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8038954:	687b      	ldr	r3, [r7, #4]
 8038956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803895a:	b2db      	uxtb	r3, r3
 803895c:	2b00      	cmp	r3, #0
 803895e:	d106      	bne.n	803896e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8038960:	687b      	ldr	r3, [r7, #4]
 8038962:	2200      	movs	r2, #0
 8038964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8038968:	6878      	ldr	r0, [r7, #4]
 803896a:	f7f5 ff5b 	bl	802e824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 803896e:	687b      	ldr	r3, [r7, #4]
 8038970:	2202      	movs	r2, #2
 8038972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8038976:	687b      	ldr	r3, [r7, #4]
 8038978:	681a      	ldr	r2, [r3, #0]
 803897a:	687b      	ldr	r3, [r7, #4]
 803897c:	3304      	adds	r3, #4
 803897e:	4619      	mov	r1, r3
 8038980:	4610      	mov	r0, r2
 8038982:	f000 faed 	bl	8038f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8038986:	687b      	ldr	r3, [r7, #4]
 8038988:	2201      	movs	r2, #1
 803898a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 803898e:	687b      	ldr	r3, [r7, #4]
 8038990:	2201      	movs	r2, #1
 8038992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8038996:	687b      	ldr	r3, [r7, #4]
 8038998:	2201      	movs	r2, #1
 803899a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 803899e:	687b      	ldr	r3, [r7, #4]
 80389a0:	2201      	movs	r2, #1
 80389a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80389a6:	687b      	ldr	r3, [r7, #4]
 80389a8:	2201      	movs	r2, #1
 80389aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80389ae:	687b      	ldr	r3, [r7, #4]
 80389b0:	2201      	movs	r2, #1
 80389b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80389b6:	687b      	ldr	r3, [r7, #4]
 80389b8:	2201      	movs	r2, #1
 80389ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80389be:	687b      	ldr	r3, [r7, #4]
 80389c0:	2201      	movs	r2, #1
 80389c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80389c6:	687b      	ldr	r3, [r7, #4]
 80389c8:	2201      	movs	r2, #1
 80389ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80389ce:	687b      	ldr	r3, [r7, #4]
 80389d0:	2201      	movs	r2, #1
 80389d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80389d6:	687b      	ldr	r3, [r7, #4]
 80389d8:	2201      	movs	r2, #1
 80389da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80389de:	687b      	ldr	r3, [r7, #4]
 80389e0:	2201      	movs	r2, #1
 80389e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80389e6:	2300      	movs	r3, #0
}
 80389e8:	4618      	mov	r0, r3
 80389ea:	3708      	adds	r7, #8
 80389ec:	46bd      	mov	sp, r7
 80389ee:	bd80      	pop	{r7, pc}

080389f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80389f0:	b480      	push	{r7}
 80389f2:	b085      	sub	sp, #20
 80389f4:	af00      	add	r7, sp, #0
 80389f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80389f8:	687b      	ldr	r3, [r7, #4]
 80389fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80389fe:	b2db      	uxtb	r3, r3
 8038a00:	2b01      	cmp	r3, #1
 8038a02:	d001      	beq.n	8038a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8038a04:	2301      	movs	r3, #1
 8038a06:	e054      	b.n	8038ab2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8038a08:	687b      	ldr	r3, [r7, #4]
 8038a0a:	2202      	movs	r2, #2
 8038a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8038a10:	687b      	ldr	r3, [r7, #4]
 8038a12:	681b      	ldr	r3, [r3, #0]
 8038a14:	68da      	ldr	r2, [r3, #12]
 8038a16:	687b      	ldr	r3, [r7, #4]
 8038a18:	681b      	ldr	r3, [r3, #0]
 8038a1a:	f042 0201 	orr.w	r2, r2, #1
 8038a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8038a20:	687b      	ldr	r3, [r7, #4]
 8038a22:	681b      	ldr	r3, [r3, #0]
 8038a24:	4a26      	ldr	r2, [pc, #152]	; (8038ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8038a26:	4293      	cmp	r3, r2
 8038a28:	d022      	beq.n	8038a70 <HAL_TIM_Base_Start_IT+0x80>
 8038a2a:	687b      	ldr	r3, [r7, #4]
 8038a2c:	681b      	ldr	r3, [r3, #0]
 8038a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8038a32:	d01d      	beq.n	8038a70 <HAL_TIM_Base_Start_IT+0x80>
 8038a34:	687b      	ldr	r3, [r7, #4]
 8038a36:	681b      	ldr	r3, [r3, #0]
 8038a38:	4a22      	ldr	r2, [pc, #136]	; (8038ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8038a3a:	4293      	cmp	r3, r2
 8038a3c:	d018      	beq.n	8038a70 <HAL_TIM_Base_Start_IT+0x80>
 8038a3e:	687b      	ldr	r3, [r7, #4]
 8038a40:	681b      	ldr	r3, [r3, #0]
 8038a42:	4a21      	ldr	r2, [pc, #132]	; (8038ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8038a44:	4293      	cmp	r3, r2
 8038a46:	d013      	beq.n	8038a70 <HAL_TIM_Base_Start_IT+0x80>
 8038a48:	687b      	ldr	r3, [r7, #4]
 8038a4a:	681b      	ldr	r3, [r3, #0]
 8038a4c:	4a1f      	ldr	r2, [pc, #124]	; (8038acc <HAL_TIM_Base_Start_IT+0xdc>)
 8038a4e:	4293      	cmp	r3, r2
 8038a50:	d00e      	beq.n	8038a70 <HAL_TIM_Base_Start_IT+0x80>
 8038a52:	687b      	ldr	r3, [r7, #4]
 8038a54:	681b      	ldr	r3, [r3, #0]
 8038a56:	4a1e      	ldr	r2, [pc, #120]	; (8038ad0 <HAL_TIM_Base_Start_IT+0xe0>)
 8038a58:	4293      	cmp	r3, r2
 8038a5a:	d009      	beq.n	8038a70 <HAL_TIM_Base_Start_IT+0x80>
 8038a5c:	687b      	ldr	r3, [r7, #4]
 8038a5e:	681b      	ldr	r3, [r3, #0]
 8038a60:	4a1c      	ldr	r2, [pc, #112]	; (8038ad4 <HAL_TIM_Base_Start_IT+0xe4>)
 8038a62:	4293      	cmp	r3, r2
 8038a64:	d004      	beq.n	8038a70 <HAL_TIM_Base_Start_IT+0x80>
 8038a66:	687b      	ldr	r3, [r7, #4]
 8038a68:	681b      	ldr	r3, [r3, #0]
 8038a6a:	4a1b      	ldr	r2, [pc, #108]	; (8038ad8 <HAL_TIM_Base_Start_IT+0xe8>)
 8038a6c:	4293      	cmp	r3, r2
 8038a6e:	d115      	bne.n	8038a9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8038a70:	687b      	ldr	r3, [r7, #4]
 8038a72:	681b      	ldr	r3, [r3, #0]
 8038a74:	689a      	ldr	r2, [r3, #8]
 8038a76:	4b19      	ldr	r3, [pc, #100]	; (8038adc <HAL_TIM_Base_Start_IT+0xec>)
 8038a78:	4013      	ands	r3, r2
 8038a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8038a7c:	68fb      	ldr	r3, [r7, #12]
 8038a7e:	2b06      	cmp	r3, #6
 8038a80:	d015      	beq.n	8038aae <HAL_TIM_Base_Start_IT+0xbe>
 8038a82:	68fb      	ldr	r3, [r7, #12]
 8038a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8038a88:	d011      	beq.n	8038aae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8038a8a:	687b      	ldr	r3, [r7, #4]
 8038a8c:	681b      	ldr	r3, [r3, #0]
 8038a8e:	681a      	ldr	r2, [r3, #0]
 8038a90:	687b      	ldr	r3, [r7, #4]
 8038a92:	681b      	ldr	r3, [r3, #0]
 8038a94:	f042 0201 	orr.w	r2, r2, #1
 8038a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8038a9a:	e008      	b.n	8038aae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8038a9c:	687b      	ldr	r3, [r7, #4]
 8038a9e:	681b      	ldr	r3, [r3, #0]
 8038aa0:	681a      	ldr	r2, [r3, #0]
 8038aa2:	687b      	ldr	r3, [r7, #4]
 8038aa4:	681b      	ldr	r3, [r3, #0]
 8038aa6:	f042 0201 	orr.w	r2, r2, #1
 8038aaa:	601a      	str	r2, [r3, #0]
 8038aac:	e000      	b.n	8038ab0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8038aae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8038ab0:	2300      	movs	r3, #0
}
 8038ab2:	4618      	mov	r0, r3
 8038ab4:	3714      	adds	r7, #20
 8038ab6:	46bd      	mov	sp, r7
 8038ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038abc:	4770      	bx	lr
 8038abe:	bf00      	nop
 8038ac0:	40010000 	.word	0x40010000
 8038ac4:	40000400 	.word	0x40000400
 8038ac8:	40000800 	.word	0x40000800
 8038acc:	40000c00 	.word	0x40000c00
 8038ad0:	40010400 	.word	0x40010400
 8038ad4:	40001800 	.word	0x40001800
 8038ad8:	40014000 	.word	0x40014000
 8038adc:	00010007 	.word	0x00010007

08038ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8038ae0:	b580      	push	{r7, lr}
 8038ae2:	b082      	sub	sp, #8
 8038ae4:	af00      	add	r7, sp, #0
 8038ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8038ae8:	687b      	ldr	r3, [r7, #4]
 8038aea:	681b      	ldr	r3, [r3, #0]
 8038aec:	691b      	ldr	r3, [r3, #16]
 8038aee:	f003 0302 	and.w	r3, r3, #2
 8038af2:	2b02      	cmp	r3, #2
 8038af4:	d122      	bne.n	8038b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8038af6:	687b      	ldr	r3, [r7, #4]
 8038af8:	681b      	ldr	r3, [r3, #0]
 8038afa:	68db      	ldr	r3, [r3, #12]
 8038afc:	f003 0302 	and.w	r3, r3, #2
 8038b00:	2b02      	cmp	r3, #2
 8038b02:	d11b      	bne.n	8038b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8038b04:	687b      	ldr	r3, [r7, #4]
 8038b06:	681b      	ldr	r3, [r3, #0]
 8038b08:	f06f 0202 	mvn.w	r2, #2
 8038b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8038b0e:	687b      	ldr	r3, [r7, #4]
 8038b10:	2201      	movs	r2, #1
 8038b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8038b14:	687b      	ldr	r3, [r7, #4]
 8038b16:	681b      	ldr	r3, [r3, #0]
 8038b18:	699b      	ldr	r3, [r3, #24]
 8038b1a:	f003 0303 	and.w	r3, r3, #3
 8038b1e:	2b00      	cmp	r3, #0
 8038b20:	d003      	beq.n	8038b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8038b22:	6878      	ldr	r0, [r7, #4]
 8038b24:	f000 f9fe 	bl	8038f24 <HAL_TIM_IC_CaptureCallback>
 8038b28:	e005      	b.n	8038b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8038b2a:	6878      	ldr	r0, [r7, #4]
 8038b2c:	f000 f9f0 	bl	8038f10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8038b30:	6878      	ldr	r0, [r7, #4]
 8038b32:	f000 fa01 	bl	8038f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8038b36:	687b      	ldr	r3, [r7, #4]
 8038b38:	2200      	movs	r2, #0
 8038b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8038b3c:	687b      	ldr	r3, [r7, #4]
 8038b3e:	681b      	ldr	r3, [r3, #0]
 8038b40:	691b      	ldr	r3, [r3, #16]
 8038b42:	f003 0304 	and.w	r3, r3, #4
 8038b46:	2b04      	cmp	r3, #4
 8038b48:	d122      	bne.n	8038b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8038b4a:	687b      	ldr	r3, [r7, #4]
 8038b4c:	681b      	ldr	r3, [r3, #0]
 8038b4e:	68db      	ldr	r3, [r3, #12]
 8038b50:	f003 0304 	and.w	r3, r3, #4
 8038b54:	2b04      	cmp	r3, #4
 8038b56:	d11b      	bne.n	8038b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8038b58:	687b      	ldr	r3, [r7, #4]
 8038b5a:	681b      	ldr	r3, [r3, #0]
 8038b5c:	f06f 0204 	mvn.w	r2, #4
 8038b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8038b62:	687b      	ldr	r3, [r7, #4]
 8038b64:	2202      	movs	r2, #2
 8038b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8038b68:	687b      	ldr	r3, [r7, #4]
 8038b6a:	681b      	ldr	r3, [r3, #0]
 8038b6c:	699b      	ldr	r3, [r3, #24]
 8038b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8038b72:	2b00      	cmp	r3, #0
 8038b74:	d003      	beq.n	8038b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8038b76:	6878      	ldr	r0, [r7, #4]
 8038b78:	f000 f9d4 	bl	8038f24 <HAL_TIM_IC_CaptureCallback>
 8038b7c:	e005      	b.n	8038b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8038b7e:	6878      	ldr	r0, [r7, #4]
 8038b80:	f000 f9c6 	bl	8038f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8038b84:	6878      	ldr	r0, [r7, #4]
 8038b86:	f000 f9d7 	bl	8038f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8038b8a:	687b      	ldr	r3, [r7, #4]
 8038b8c:	2200      	movs	r2, #0
 8038b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8038b90:	687b      	ldr	r3, [r7, #4]
 8038b92:	681b      	ldr	r3, [r3, #0]
 8038b94:	691b      	ldr	r3, [r3, #16]
 8038b96:	f003 0308 	and.w	r3, r3, #8
 8038b9a:	2b08      	cmp	r3, #8
 8038b9c:	d122      	bne.n	8038be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8038b9e:	687b      	ldr	r3, [r7, #4]
 8038ba0:	681b      	ldr	r3, [r3, #0]
 8038ba2:	68db      	ldr	r3, [r3, #12]
 8038ba4:	f003 0308 	and.w	r3, r3, #8
 8038ba8:	2b08      	cmp	r3, #8
 8038baa:	d11b      	bne.n	8038be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8038bac:	687b      	ldr	r3, [r7, #4]
 8038bae:	681b      	ldr	r3, [r3, #0]
 8038bb0:	f06f 0208 	mvn.w	r2, #8
 8038bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8038bb6:	687b      	ldr	r3, [r7, #4]
 8038bb8:	2204      	movs	r2, #4
 8038bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8038bbc:	687b      	ldr	r3, [r7, #4]
 8038bbe:	681b      	ldr	r3, [r3, #0]
 8038bc0:	69db      	ldr	r3, [r3, #28]
 8038bc2:	f003 0303 	and.w	r3, r3, #3
 8038bc6:	2b00      	cmp	r3, #0
 8038bc8:	d003      	beq.n	8038bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8038bca:	6878      	ldr	r0, [r7, #4]
 8038bcc:	f000 f9aa 	bl	8038f24 <HAL_TIM_IC_CaptureCallback>
 8038bd0:	e005      	b.n	8038bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8038bd2:	6878      	ldr	r0, [r7, #4]
 8038bd4:	f000 f99c 	bl	8038f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8038bd8:	6878      	ldr	r0, [r7, #4]
 8038bda:	f000 f9ad 	bl	8038f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8038bde:	687b      	ldr	r3, [r7, #4]
 8038be0:	2200      	movs	r2, #0
 8038be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8038be4:	687b      	ldr	r3, [r7, #4]
 8038be6:	681b      	ldr	r3, [r3, #0]
 8038be8:	691b      	ldr	r3, [r3, #16]
 8038bea:	f003 0310 	and.w	r3, r3, #16
 8038bee:	2b10      	cmp	r3, #16
 8038bf0:	d122      	bne.n	8038c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8038bf2:	687b      	ldr	r3, [r7, #4]
 8038bf4:	681b      	ldr	r3, [r3, #0]
 8038bf6:	68db      	ldr	r3, [r3, #12]
 8038bf8:	f003 0310 	and.w	r3, r3, #16
 8038bfc:	2b10      	cmp	r3, #16
 8038bfe:	d11b      	bne.n	8038c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8038c00:	687b      	ldr	r3, [r7, #4]
 8038c02:	681b      	ldr	r3, [r3, #0]
 8038c04:	f06f 0210 	mvn.w	r2, #16
 8038c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8038c0a:	687b      	ldr	r3, [r7, #4]
 8038c0c:	2208      	movs	r2, #8
 8038c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8038c10:	687b      	ldr	r3, [r7, #4]
 8038c12:	681b      	ldr	r3, [r3, #0]
 8038c14:	69db      	ldr	r3, [r3, #28]
 8038c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8038c1a:	2b00      	cmp	r3, #0
 8038c1c:	d003      	beq.n	8038c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8038c1e:	6878      	ldr	r0, [r7, #4]
 8038c20:	f000 f980 	bl	8038f24 <HAL_TIM_IC_CaptureCallback>
 8038c24:	e005      	b.n	8038c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8038c26:	6878      	ldr	r0, [r7, #4]
 8038c28:	f000 f972 	bl	8038f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8038c2c:	6878      	ldr	r0, [r7, #4]
 8038c2e:	f000 f983 	bl	8038f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8038c32:	687b      	ldr	r3, [r7, #4]
 8038c34:	2200      	movs	r2, #0
 8038c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8038c38:	687b      	ldr	r3, [r7, #4]
 8038c3a:	681b      	ldr	r3, [r3, #0]
 8038c3c:	691b      	ldr	r3, [r3, #16]
 8038c3e:	f003 0301 	and.w	r3, r3, #1
 8038c42:	2b01      	cmp	r3, #1
 8038c44:	d10e      	bne.n	8038c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8038c46:	687b      	ldr	r3, [r7, #4]
 8038c48:	681b      	ldr	r3, [r3, #0]
 8038c4a:	68db      	ldr	r3, [r3, #12]
 8038c4c:	f003 0301 	and.w	r3, r3, #1
 8038c50:	2b01      	cmp	r3, #1
 8038c52:	d107      	bne.n	8038c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8038c54:	687b      	ldr	r3, [r7, #4]
 8038c56:	681b      	ldr	r3, [r3, #0]
 8038c58:	f06f 0201 	mvn.w	r2, #1
 8038c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8038c5e:	6878      	ldr	r0, [r7, #4]
 8038c60:	f7f5 f96a 	bl	802df38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8038c64:	687b      	ldr	r3, [r7, #4]
 8038c66:	681b      	ldr	r3, [r3, #0]
 8038c68:	691b      	ldr	r3, [r3, #16]
 8038c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8038c6e:	2b80      	cmp	r3, #128	; 0x80
 8038c70:	d10e      	bne.n	8038c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8038c72:	687b      	ldr	r3, [r7, #4]
 8038c74:	681b      	ldr	r3, [r3, #0]
 8038c76:	68db      	ldr	r3, [r3, #12]
 8038c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8038c7c:	2b80      	cmp	r3, #128	; 0x80
 8038c7e:	d107      	bne.n	8038c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8038c80:	687b      	ldr	r3, [r7, #4]
 8038c82:	681b      	ldr	r3, [r3, #0]
 8038c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8038c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8038c8a:	6878      	ldr	r0, [r7, #4]
 8038c8c:	f000 fb38 	bl	8039300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8038c90:	687b      	ldr	r3, [r7, #4]
 8038c92:	681b      	ldr	r3, [r3, #0]
 8038c94:	691b      	ldr	r3, [r3, #16]
 8038c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8038c9e:	d10e      	bne.n	8038cbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8038ca0:	687b      	ldr	r3, [r7, #4]
 8038ca2:	681b      	ldr	r3, [r3, #0]
 8038ca4:	68db      	ldr	r3, [r3, #12]
 8038ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8038caa:	2b80      	cmp	r3, #128	; 0x80
 8038cac:	d107      	bne.n	8038cbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8038cae:	687b      	ldr	r3, [r7, #4]
 8038cb0:	681b      	ldr	r3, [r3, #0]
 8038cb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8038cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8038cb8:	6878      	ldr	r0, [r7, #4]
 8038cba:	f000 fb2b 	bl	8039314 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8038cbe:	687b      	ldr	r3, [r7, #4]
 8038cc0:	681b      	ldr	r3, [r3, #0]
 8038cc2:	691b      	ldr	r3, [r3, #16]
 8038cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8038cc8:	2b40      	cmp	r3, #64	; 0x40
 8038cca:	d10e      	bne.n	8038cea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8038ccc:	687b      	ldr	r3, [r7, #4]
 8038cce:	681b      	ldr	r3, [r3, #0]
 8038cd0:	68db      	ldr	r3, [r3, #12]
 8038cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8038cd6:	2b40      	cmp	r3, #64	; 0x40
 8038cd8:	d107      	bne.n	8038cea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8038cda:	687b      	ldr	r3, [r7, #4]
 8038cdc:	681b      	ldr	r3, [r3, #0]
 8038cde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8038ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8038ce4:	6878      	ldr	r0, [r7, #4]
 8038ce6:	f000 f931 	bl	8038f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8038cea:	687b      	ldr	r3, [r7, #4]
 8038cec:	681b      	ldr	r3, [r3, #0]
 8038cee:	691b      	ldr	r3, [r3, #16]
 8038cf0:	f003 0320 	and.w	r3, r3, #32
 8038cf4:	2b20      	cmp	r3, #32
 8038cf6:	d10e      	bne.n	8038d16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8038cf8:	687b      	ldr	r3, [r7, #4]
 8038cfa:	681b      	ldr	r3, [r3, #0]
 8038cfc:	68db      	ldr	r3, [r3, #12]
 8038cfe:	f003 0320 	and.w	r3, r3, #32
 8038d02:	2b20      	cmp	r3, #32
 8038d04:	d107      	bne.n	8038d16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8038d06:	687b      	ldr	r3, [r7, #4]
 8038d08:	681b      	ldr	r3, [r3, #0]
 8038d0a:	f06f 0220 	mvn.w	r2, #32
 8038d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8038d10:	6878      	ldr	r0, [r7, #4]
 8038d12:	f000 faeb 	bl	80392ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8038d16:	bf00      	nop
 8038d18:	3708      	adds	r7, #8
 8038d1a:	46bd      	mov	sp, r7
 8038d1c:	bd80      	pop	{r7, pc}
	...

08038d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8038d20:	b580      	push	{r7, lr}
 8038d22:	b084      	sub	sp, #16
 8038d24:	af00      	add	r7, sp, #0
 8038d26:	6078      	str	r0, [r7, #4]
 8038d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8038d2a:	2300      	movs	r3, #0
 8038d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8038d2e:	687b      	ldr	r3, [r7, #4]
 8038d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8038d34:	2b01      	cmp	r3, #1
 8038d36:	d101      	bne.n	8038d3c <HAL_TIM_ConfigClockSource+0x1c>
 8038d38:	2302      	movs	r3, #2
 8038d3a:	e0dc      	b.n	8038ef6 <HAL_TIM_ConfigClockSource+0x1d6>
 8038d3c:	687b      	ldr	r3, [r7, #4]
 8038d3e:	2201      	movs	r2, #1
 8038d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8038d44:	687b      	ldr	r3, [r7, #4]
 8038d46:	2202      	movs	r2, #2
 8038d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8038d4c:	687b      	ldr	r3, [r7, #4]
 8038d4e:	681b      	ldr	r3, [r3, #0]
 8038d50:	689b      	ldr	r3, [r3, #8]
 8038d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8038d54:	68ba      	ldr	r2, [r7, #8]
 8038d56:	4b6a      	ldr	r3, [pc, #424]	; (8038f00 <HAL_TIM_ConfigClockSource+0x1e0>)
 8038d58:	4013      	ands	r3, r2
 8038d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8038d5c:	68bb      	ldr	r3, [r7, #8]
 8038d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8038d62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8038d64:	687b      	ldr	r3, [r7, #4]
 8038d66:	681b      	ldr	r3, [r3, #0]
 8038d68:	68ba      	ldr	r2, [r7, #8]
 8038d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8038d6c:	683b      	ldr	r3, [r7, #0]
 8038d6e:	681b      	ldr	r3, [r3, #0]
 8038d70:	4a64      	ldr	r2, [pc, #400]	; (8038f04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8038d72:	4293      	cmp	r3, r2
 8038d74:	f000 80a9 	beq.w	8038eca <HAL_TIM_ConfigClockSource+0x1aa>
 8038d78:	4a62      	ldr	r2, [pc, #392]	; (8038f04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8038d7a:	4293      	cmp	r3, r2
 8038d7c:	f200 80ae 	bhi.w	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038d80:	4a61      	ldr	r2, [pc, #388]	; (8038f08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8038d82:	4293      	cmp	r3, r2
 8038d84:	f000 80a1 	beq.w	8038eca <HAL_TIM_ConfigClockSource+0x1aa>
 8038d88:	4a5f      	ldr	r2, [pc, #380]	; (8038f08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8038d8a:	4293      	cmp	r3, r2
 8038d8c:	f200 80a6 	bhi.w	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038d90:	4a5e      	ldr	r2, [pc, #376]	; (8038f0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8038d92:	4293      	cmp	r3, r2
 8038d94:	f000 8099 	beq.w	8038eca <HAL_TIM_ConfigClockSource+0x1aa>
 8038d98:	4a5c      	ldr	r2, [pc, #368]	; (8038f0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8038d9a:	4293      	cmp	r3, r2
 8038d9c:	f200 809e 	bhi.w	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038da0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8038da4:	f000 8091 	beq.w	8038eca <HAL_TIM_ConfigClockSource+0x1aa>
 8038da8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8038dac:	f200 8096 	bhi.w	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8038db4:	f000 8089 	beq.w	8038eca <HAL_TIM_ConfigClockSource+0x1aa>
 8038db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8038dbc:	f200 808e 	bhi.w	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8038dc4:	d03e      	beq.n	8038e44 <HAL_TIM_ConfigClockSource+0x124>
 8038dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8038dca:	f200 8087 	bhi.w	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8038dd2:	f000 8086 	beq.w	8038ee2 <HAL_TIM_ConfigClockSource+0x1c2>
 8038dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8038dda:	d87f      	bhi.n	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038ddc:	2b70      	cmp	r3, #112	; 0x70
 8038dde:	d01a      	beq.n	8038e16 <HAL_TIM_ConfigClockSource+0xf6>
 8038de0:	2b70      	cmp	r3, #112	; 0x70
 8038de2:	d87b      	bhi.n	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038de4:	2b60      	cmp	r3, #96	; 0x60
 8038de6:	d050      	beq.n	8038e8a <HAL_TIM_ConfigClockSource+0x16a>
 8038de8:	2b60      	cmp	r3, #96	; 0x60
 8038dea:	d877      	bhi.n	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038dec:	2b50      	cmp	r3, #80	; 0x50
 8038dee:	d03c      	beq.n	8038e6a <HAL_TIM_ConfigClockSource+0x14a>
 8038df0:	2b50      	cmp	r3, #80	; 0x50
 8038df2:	d873      	bhi.n	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038df4:	2b40      	cmp	r3, #64	; 0x40
 8038df6:	d058      	beq.n	8038eaa <HAL_TIM_ConfigClockSource+0x18a>
 8038df8:	2b40      	cmp	r3, #64	; 0x40
 8038dfa:	d86f      	bhi.n	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038dfc:	2b30      	cmp	r3, #48	; 0x30
 8038dfe:	d064      	beq.n	8038eca <HAL_TIM_ConfigClockSource+0x1aa>
 8038e00:	2b30      	cmp	r3, #48	; 0x30
 8038e02:	d86b      	bhi.n	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038e04:	2b20      	cmp	r3, #32
 8038e06:	d060      	beq.n	8038eca <HAL_TIM_ConfigClockSource+0x1aa>
 8038e08:	2b20      	cmp	r3, #32
 8038e0a:	d867      	bhi.n	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
 8038e0c:	2b00      	cmp	r3, #0
 8038e0e:	d05c      	beq.n	8038eca <HAL_TIM_ConfigClockSource+0x1aa>
 8038e10:	2b10      	cmp	r3, #16
 8038e12:	d05a      	beq.n	8038eca <HAL_TIM_ConfigClockSource+0x1aa>
 8038e14:	e062      	b.n	8038edc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8038e16:	687b      	ldr	r3, [r7, #4]
 8038e18:	6818      	ldr	r0, [r3, #0]
 8038e1a:	683b      	ldr	r3, [r7, #0]
 8038e1c:	6899      	ldr	r1, [r3, #8]
 8038e1e:	683b      	ldr	r3, [r7, #0]
 8038e20:	685a      	ldr	r2, [r3, #4]
 8038e22:	683b      	ldr	r3, [r7, #0]
 8038e24:	68db      	ldr	r3, [r3, #12]
 8038e26:	f000 f9b3 	bl	8039190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8038e2a:	687b      	ldr	r3, [r7, #4]
 8038e2c:	681b      	ldr	r3, [r3, #0]
 8038e2e:	689b      	ldr	r3, [r3, #8]
 8038e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8038e32:	68bb      	ldr	r3, [r7, #8]
 8038e34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8038e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8038e3a:	687b      	ldr	r3, [r7, #4]
 8038e3c:	681b      	ldr	r3, [r3, #0]
 8038e3e:	68ba      	ldr	r2, [r7, #8]
 8038e40:	609a      	str	r2, [r3, #8]
      break;
 8038e42:	e04f      	b.n	8038ee4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8038e44:	687b      	ldr	r3, [r7, #4]
 8038e46:	6818      	ldr	r0, [r3, #0]
 8038e48:	683b      	ldr	r3, [r7, #0]
 8038e4a:	6899      	ldr	r1, [r3, #8]
 8038e4c:	683b      	ldr	r3, [r7, #0]
 8038e4e:	685a      	ldr	r2, [r3, #4]
 8038e50:	683b      	ldr	r3, [r7, #0]
 8038e52:	68db      	ldr	r3, [r3, #12]
 8038e54:	f000 f99c 	bl	8039190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8038e58:	687b      	ldr	r3, [r7, #4]
 8038e5a:	681b      	ldr	r3, [r3, #0]
 8038e5c:	689a      	ldr	r2, [r3, #8]
 8038e5e:	687b      	ldr	r3, [r7, #4]
 8038e60:	681b      	ldr	r3, [r3, #0]
 8038e62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8038e66:	609a      	str	r2, [r3, #8]
      break;
 8038e68:	e03c      	b.n	8038ee4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8038e6a:	687b      	ldr	r3, [r7, #4]
 8038e6c:	6818      	ldr	r0, [r3, #0]
 8038e6e:	683b      	ldr	r3, [r7, #0]
 8038e70:	6859      	ldr	r1, [r3, #4]
 8038e72:	683b      	ldr	r3, [r7, #0]
 8038e74:	68db      	ldr	r3, [r3, #12]
 8038e76:	461a      	mov	r2, r3
 8038e78:	f000 f90c 	bl	8039094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8038e7c:	687b      	ldr	r3, [r7, #4]
 8038e7e:	681b      	ldr	r3, [r3, #0]
 8038e80:	2150      	movs	r1, #80	; 0x50
 8038e82:	4618      	mov	r0, r3
 8038e84:	f000 f966 	bl	8039154 <TIM_ITRx_SetConfig>
      break;
 8038e88:	e02c      	b.n	8038ee4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8038e8a:	687b      	ldr	r3, [r7, #4]
 8038e8c:	6818      	ldr	r0, [r3, #0]
 8038e8e:	683b      	ldr	r3, [r7, #0]
 8038e90:	6859      	ldr	r1, [r3, #4]
 8038e92:	683b      	ldr	r3, [r7, #0]
 8038e94:	68db      	ldr	r3, [r3, #12]
 8038e96:	461a      	mov	r2, r3
 8038e98:	f000 f92b 	bl	80390f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8038e9c:	687b      	ldr	r3, [r7, #4]
 8038e9e:	681b      	ldr	r3, [r3, #0]
 8038ea0:	2160      	movs	r1, #96	; 0x60
 8038ea2:	4618      	mov	r0, r3
 8038ea4:	f000 f956 	bl	8039154 <TIM_ITRx_SetConfig>
      break;
 8038ea8:	e01c      	b.n	8038ee4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8038eaa:	687b      	ldr	r3, [r7, #4]
 8038eac:	6818      	ldr	r0, [r3, #0]
 8038eae:	683b      	ldr	r3, [r7, #0]
 8038eb0:	6859      	ldr	r1, [r3, #4]
 8038eb2:	683b      	ldr	r3, [r7, #0]
 8038eb4:	68db      	ldr	r3, [r3, #12]
 8038eb6:	461a      	mov	r2, r3
 8038eb8:	f000 f8ec 	bl	8039094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8038ebc:	687b      	ldr	r3, [r7, #4]
 8038ebe:	681b      	ldr	r3, [r3, #0]
 8038ec0:	2140      	movs	r1, #64	; 0x40
 8038ec2:	4618      	mov	r0, r3
 8038ec4:	f000 f946 	bl	8039154 <TIM_ITRx_SetConfig>
      break;
 8038ec8:	e00c      	b.n	8038ee4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8038eca:	687b      	ldr	r3, [r7, #4]
 8038ecc:	681a      	ldr	r2, [r3, #0]
 8038ece:	683b      	ldr	r3, [r7, #0]
 8038ed0:	681b      	ldr	r3, [r3, #0]
 8038ed2:	4619      	mov	r1, r3
 8038ed4:	4610      	mov	r0, r2
 8038ed6:	f000 f93d 	bl	8039154 <TIM_ITRx_SetConfig>
      break;
 8038eda:	e003      	b.n	8038ee4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8038edc:	2301      	movs	r3, #1
 8038ede:	73fb      	strb	r3, [r7, #15]
      break;
 8038ee0:	e000      	b.n	8038ee4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8038ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8038ee4:	687b      	ldr	r3, [r7, #4]
 8038ee6:	2201      	movs	r2, #1
 8038ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8038eec:	687b      	ldr	r3, [r7, #4]
 8038eee:	2200      	movs	r2, #0
 8038ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8038ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8038ef6:	4618      	mov	r0, r3
 8038ef8:	3710      	adds	r7, #16
 8038efa:	46bd      	mov	sp, r7
 8038efc:	bd80      	pop	{r7, pc}
 8038efe:	bf00      	nop
 8038f00:	ffceff88 	.word	0xffceff88
 8038f04:	00100040 	.word	0x00100040
 8038f08:	00100030 	.word	0x00100030
 8038f0c:	00100020 	.word	0x00100020

08038f10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8038f10:	b480      	push	{r7}
 8038f12:	b083      	sub	sp, #12
 8038f14:	af00      	add	r7, sp, #0
 8038f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8038f18:	bf00      	nop
 8038f1a:	370c      	adds	r7, #12
 8038f1c:	46bd      	mov	sp, r7
 8038f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f22:	4770      	bx	lr

08038f24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8038f24:	b480      	push	{r7}
 8038f26:	b083      	sub	sp, #12
 8038f28:	af00      	add	r7, sp, #0
 8038f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8038f2c:	bf00      	nop
 8038f2e:	370c      	adds	r7, #12
 8038f30:	46bd      	mov	sp, r7
 8038f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f36:	4770      	bx	lr

08038f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8038f38:	b480      	push	{r7}
 8038f3a:	b083      	sub	sp, #12
 8038f3c:	af00      	add	r7, sp, #0
 8038f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8038f40:	bf00      	nop
 8038f42:	370c      	adds	r7, #12
 8038f44:	46bd      	mov	sp, r7
 8038f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f4a:	4770      	bx	lr

08038f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8038f4c:	b480      	push	{r7}
 8038f4e:	b083      	sub	sp, #12
 8038f50:	af00      	add	r7, sp, #0
 8038f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8038f54:	bf00      	nop
 8038f56:	370c      	adds	r7, #12
 8038f58:	46bd      	mov	sp, r7
 8038f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f5e:	4770      	bx	lr

08038f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8038f60:	b480      	push	{r7}
 8038f62:	b085      	sub	sp, #20
 8038f64:	af00      	add	r7, sp, #0
 8038f66:	6078      	str	r0, [r7, #4]
 8038f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8038f6a:	687b      	ldr	r3, [r7, #4]
 8038f6c:	681b      	ldr	r3, [r3, #0]
 8038f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8038f70:	687b      	ldr	r3, [r7, #4]
 8038f72:	4a40      	ldr	r2, [pc, #256]	; (8039074 <TIM_Base_SetConfig+0x114>)
 8038f74:	4293      	cmp	r3, r2
 8038f76:	d013      	beq.n	8038fa0 <TIM_Base_SetConfig+0x40>
 8038f78:	687b      	ldr	r3, [r7, #4]
 8038f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8038f7e:	d00f      	beq.n	8038fa0 <TIM_Base_SetConfig+0x40>
 8038f80:	687b      	ldr	r3, [r7, #4]
 8038f82:	4a3d      	ldr	r2, [pc, #244]	; (8039078 <TIM_Base_SetConfig+0x118>)
 8038f84:	4293      	cmp	r3, r2
 8038f86:	d00b      	beq.n	8038fa0 <TIM_Base_SetConfig+0x40>
 8038f88:	687b      	ldr	r3, [r7, #4]
 8038f8a:	4a3c      	ldr	r2, [pc, #240]	; (803907c <TIM_Base_SetConfig+0x11c>)
 8038f8c:	4293      	cmp	r3, r2
 8038f8e:	d007      	beq.n	8038fa0 <TIM_Base_SetConfig+0x40>
 8038f90:	687b      	ldr	r3, [r7, #4]
 8038f92:	4a3b      	ldr	r2, [pc, #236]	; (8039080 <TIM_Base_SetConfig+0x120>)
 8038f94:	4293      	cmp	r3, r2
 8038f96:	d003      	beq.n	8038fa0 <TIM_Base_SetConfig+0x40>
 8038f98:	687b      	ldr	r3, [r7, #4]
 8038f9a:	4a3a      	ldr	r2, [pc, #232]	; (8039084 <TIM_Base_SetConfig+0x124>)
 8038f9c:	4293      	cmp	r3, r2
 8038f9e:	d108      	bne.n	8038fb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8038fa0:	68fb      	ldr	r3, [r7, #12]
 8038fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8038fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8038fa8:	683b      	ldr	r3, [r7, #0]
 8038faa:	685b      	ldr	r3, [r3, #4]
 8038fac:	68fa      	ldr	r2, [r7, #12]
 8038fae:	4313      	orrs	r3, r2
 8038fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8038fb2:	687b      	ldr	r3, [r7, #4]
 8038fb4:	4a2f      	ldr	r2, [pc, #188]	; (8039074 <TIM_Base_SetConfig+0x114>)
 8038fb6:	4293      	cmp	r3, r2
 8038fb8:	d01f      	beq.n	8038ffa <TIM_Base_SetConfig+0x9a>
 8038fba:	687b      	ldr	r3, [r7, #4]
 8038fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8038fc0:	d01b      	beq.n	8038ffa <TIM_Base_SetConfig+0x9a>
 8038fc2:	687b      	ldr	r3, [r7, #4]
 8038fc4:	4a2c      	ldr	r2, [pc, #176]	; (8039078 <TIM_Base_SetConfig+0x118>)
 8038fc6:	4293      	cmp	r3, r2
 8038fc8:	d017      	beq.n	8038ffa <TIM_Base_SetConfig+0x9a>
 8038fca:	687b      	ldr	r3, [r7, #4]
 8038fcc:	4a2b      	ldr	r2, [pc, #172]	; (803907c <TIM_Base_SetConfig+0x11c>)
 8038fce:	4293      	cmp	r3, r2
 8038fd0:	d013      	beq.n	8038ffa <TIM_Base_SetConfig+0x9a>
 8038fd2:	687b      	ldr	r3, [r7, #4]
 8038fd4:	4a2a      	ldr	r2, [pc, #168]	; (8039080 <TIM_Base_SetConfig+0x120>)
 8038fd6:	4293      	cmp	r3, r2
 8038fd8:	d00f      	beq.n	8038ffa <TIM_Base_SetConfig+0x9a>
 8038fda:	687b      	ldr	r3, [r7, #4]
 8038fdc:	4a29      	ldr	r2, [pc, #164]	; (8039084 <TIM_Base_SetConfig+0x124>)
 8038fde:	4293      	cmp	r3, r2
 8038fe0:	d00b      	beq.n	8038ffa <TIM_Base_SetConfig+0x9a>
 8038fe2:	687b      	ldr	r3, [r7, #4]
 8038fe4:	4a28      	ldr	r2, [pc, #160]	; (8039088 <TIM_Base_SetConfig+0x128>)
 8038fe6:	4293      	cmp	r3, r2
 8038fe8:	d007      	beq.n	8038ffa <TIM_Base_SetConfig+0x9a>
 8038fea:	687b      	ldr	r3, [r7, #4]
 8038fec:	4a27      	ldr	r2, [pc, #156]	; (803908c <TIM_Base_SetConfig+0x12c>)
 8038fee:	4293      	cmp	r3, r2
 8038ff0:	d003      	beq.n	8038ffa <TIM_Base_SetConfig+0x9a>
 8038ff2:	687b      	ldr	r3, [r7, #4]
 8038ff4:	4a26      	ldr	r2, [pc, #152]	; (8039090 <TIM_Base_SetConfig+0x130>)
 8038ff6:	4293      	cmp	r3, r2
 8038ff8:	d108      	bne.n	803900c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8038ffa:	68fb      	ldr	r3, [r7, #12]
 8038ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8039000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8039002:	683b      	ldr	r3, [r7, #0]
 8039004:	68db      	ldr	r3, [r3, #12]
 8039006:	68fa      	ldr	r2, [r7, #12]
 8039008:	4313      	orrs	r3, r2
 803900a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 803900c:	68fb      	ldr	r3, [r7, #12]
 803900e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8039012:	683b      	ldr	r3, [r7, #0]
 8039014:	695b      	ldr	r3, [r3, #20]
 8039016:	4313      	orrs	r3, r2
 8039018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 803901a:	687b      	ldr	r3, [r7, #4]
 803901c:	68fa      	ldr	r2, [r7, #12]
 803901e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8039020:	683b      	ldr	r3, [r7, #0]
 8039022:	689a      	ldr	r2, [r3, #8]
 8039024:	687b      	ldr	r3, [r7, #4]
 8039026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8039028:	683b      	ldr	r3, [r7, #0]
 803902a:	681a      	ldr	r2, [r3, #0]
 803902c:	687b      	ldr	r3, [r7, #4]
 803902e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8039030:	687b      	ldr	r3, [r7, #4]
 8039032:	4a10      	ldr	r2, [pc, #64]	; (8039074 <TIM_Base_SetConfig+0x114>)
 8039034:	4293      	cmp	r3, r2
 8039036:	d00f      	beq.n	8039058 <TIM_Base_SetConfig+0xf8>
 8039038:	687b      	ldr	r3, [r7, #4]
 803903a:	4a12      	ldr	r2, [pc, #72]	; (8039084 <TIM_Base_SetConfig+0x124>)
 803903c:	4293      	cmp	r3, r2
 803903e:	d00b      	beq.n	8039058 <TIM_Base_SetConfig+0xf8>
 8039040:	687b      	ldr	r3, [r7, #4]
 8039042:	4a11      	ldr	r2, [pc, #68]	; (8039088 <TIM_Base_SetConfig+0x128>)
 8039044:	4293      	cmp	r3, r2
 8039046:	d007      	beq.n	8039058 <TIM_Base_SetConfig+0xf8>
 8039048:	687b      	ldr	r3, [r7, #4]
 803904a:	4a10      	ldr	r2, [pc, #64]	; (803908c <TIM_Base_SetConfig+0x12c>)
 803904c:	4293      	cmp	r3, r2
 803904e:	d003      	beq.n	8039058 <TIM_Base_SetConfig+0xf8>
 8039050:	687b      	ldr	r3, [r7, #4]
 8039052:	4a0f      	ldr	r2, [pc, #60]	; (8039090 <TIM_Base_SetConfig+0x130>)
 8039054:	4293      	cmp	r3, r2
 8039056:	d103      	bne.n	8039060 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8039058:	683b      	ldr	r3, [r7, #0]
 803905a:	691a      	ldr	r2, [r3, #16]
 803905c:	687b      	ldr	r3, [r7, #4]
 803905e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8039060:	687b      	ldr	r3, [r7, #4]
 8039062:	2201      	movs	r2, #1
 8039064:	615a      	str	r2, [r3, #20]
}
 8039066:	bf00      	nop
 8039068:	3714      	adds	r7, #20
 803906a:	46bd      	mov	sp, r7
 803906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039070:	4770      	bx	lr
 8039072:	bf00      	nop
 8039074:	40010000 	.word	0x40010000
 8039078:	40000400 	.word	0x40000400
 803907c:	40000800 	.word	0x40000800
 8039080:	40000c00 	.word	0x40000c00
 8039084:	40010400 	.word	0x40010400
 8039088:	40014000 	.word	0x40014000
 803908c:	40014400 	.word	0x40014400
 8039090:	40014800 	.word	0x40014800

08039094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8039094:	b480      	push	{r7}
 8039096:	b087      	sub	sp, #28
 8039098:	af00      	add	r7, sp, #0
 803909a:	60f8      	str	r0, [r7, #12]
 803909c:	60b9      	str	r1, [r7, #8]
 803909e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80390a0:	68fb      	ldr	r3, [r7, #12]
 80390a2:	6a1b      	ldr	r3, [r3, #32]
 80390a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80390a6:	68fb      	ldr	r3, [r7, #12]
 80390a8:	6a1b      	ldr	r3, [r3, #32]
 80390aa:	f023 0201 	bic.w	r2, r3, #1
 80390ae:	68fb      	ldr	r3, [r7, #12]
 80390b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80390b2:	68fb      	ldr	r3, [r7, #12]
 80390b4:	699b      	ldr	r3, [r3, #24]
 80390b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80390b8:	693b      	ldr	r3, [r7, #16]
 80390ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80390be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80390c0:	687b      	ldr	r3, [r7, #4]
 80390c2:	011b      	lsls	r3, r3, #4
 80390c4:	693a      	ldr	r2, [r7, #16]
 80390c6:	4313      	orrs	r3, r2
 80390c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80390ca:	697b      	ldr	r3, [r7, #20]
 80390cc:	f023 030a 	bic.w	r3, r3, #10
 80390d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80390d2:	697a      	ldr	r2, [r7, #20]
 80390d4:	68bb      	ldr	r3, [r7, #8]
 80390d6:	4313      	orrs	r3, r2
 80390d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80390da:	68fb      	ldr	r3, [r7, #12]
 80390dc:	693a      	ldr	r2, [r7, #16]
 80390de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80390e0:	68fb      	ldr	r3, [r7, #12]
 80390e2:	697a      	ldr	r2, [r7, #20]
 80390e4:	621a      	str	r2, [r3, #32]
}
 80390e6:	bf00      	nop
 80390e8:	371c      	adds	r7, #28
 80390ea:	46bd      	mov	sp, r7
 80390ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80390f0:	4770      	bx	lr

080390f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80390f2:	b480      	push	{r7}
 80390f4:	b087      	sub	sp, #28
 80390f6:	af00      	add	r7, sp, #0
 80390f8:	60f8      	str	r0, [r7, #12]
 80390fa:	60b9      	str	r1, [r7, #8]
 80390fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80390fe:	68fb      	ldr	r3, [r7, #12]
 8039100:	6a1b      	ldr	r3, [r3, #32]
 8039102:	f023 0210 	bic.w	r2, r3, #16
 8039106:	68fb      	ldr	r3, [r7, #12]
 8039108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 803910a:	68fb      	ldr	r3, [r7, #12]
 803910c:	699b      	ldr	r3, [r3, #24]
 803910e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8039110:	68fb      	ldr	r3, [r7, #12]
 8039112:	6a1b      	ldr	r3, [r3, #32]
 8039114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8039116:	697b      	ldr	r3, [r7, #20]
 8039118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 803911c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 803911e:	687b      	ldr	r3, [r7, #4]
 8039120:	031b      	lsls	r3, r3, #12
 8039122:	697a      	ldr	r2, [r7, #20]
 8039124:	4313      	orrs	r3, r2
 8039126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8039128:	693b      	ldr	r3, [r7, #16]
 803912a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 803912e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8039130:	68bb      	ldr	r3, [r7, #8]
 8039132:	011b      	lsls	r3, r3, #4
 8039134:	693a      	ldr	r2, [r7, #16]
 8039136:	4313      	orrs	r3, r2
 8039138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 803913a:	68fb      	ldr	r3, [r7, #12]
 803913c:	697a      	ldr	r2, [r7, #20]
 803913e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8039140:	68fb      	ldr	r3, [r7, #12]
 8039142:	693a      	ldr	r2, [r7, #16]
 8039144:	621a      	str	r2, [r3, #32]
}
 8039146:	bf00      	nop
 8039148:	371c      	adds	r7, #28
 803914a:	46bd      	mov	sp, r7
 803914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039150:	4770      	bx	lr
	...

08039154 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8039154:	b480      	push	{r7}
 8039156:	b085      	sub	sp, #20
 8039158:	af00      	add	r7, sp, #0
 803915a:	6078      	str	r0, [r7, #4]
 803915c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 803915e:	687b      	ldr	r3, [r7, #4]
 8039160:	689b      	ldr	r3, [r3, #8]
 8039162:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8039164:	68fa      	ldr	r2, [r7, #12]
 8039166:	4b09      	ldr	r3, [pc, #36]	; (803918c <TIM_ITRx_SetConfig+0x38>)
 8039168:	4013      	ands	r3, r2
 803916a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 803916c:	683a      	ldr	r2, [r7, #0]
 803916e:	68fb      	ldr	r3, [r7, #12]
 8039170:	4313      	orrs	r3, r2
 8039172:	f043 0307 	orr.w	r3, r3, #7
 8039176:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8039178:	687b      	ldr	r3, [r7, #4]
 803917a:	68fa      	ldr	r2, [r7, #12]
 803917c:	609a      	str	r2, [r3, #8]
}
 803917e:	bf00      	nop
 8039180:	3714      	adds	r7, #20
 8039182:	46bd      	mov	sp, r7
 8039184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039188:	4770      	bx	lr
 803918a:	bf00      	nop
 803918c:	ffcfff8f 	.word	0xffcfff8f

08039190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8039190:	b480      	push	{r7}
 8039192:	b087      	sub	sp, #28
 8039194:	af00      	add	r7, sp, #0
 8039196:	60f8      	str	r0, [r7, #12]
 8039198:	60b9      	str	r1, [r7, #8]
 803919a:	607a      	str	r2, [r7, #4]
 803919c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 803919e:	68fb      	ldr	r3, [r7, #12]
 80391a0:	689b      	ldr	r3, [r3, #8]
 80391a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80391a4:	697b      	ldr	r3, [r7, #20]
 80391a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80391aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80391ac:	683b      	ldr	r3, [r7, #0]
 80391ae:	021a      	lsls	r2, r3, #8
 80391b0:	687b      	ldr	r3, [r7, #4]
 80391b2:	431a      	orrs	r2, r3
 80391b4:	68bb      	ldr	r3, [r7, #8]
 80391b6:	4313      	orrs	r3, r2
 80391b8:	697a      	ldr	r2, [r7, #20]
 80391ba:	4313      	orrs	r3, r2
 80391bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80391be:	68fb      	ldr	r3, [r7, #12]
 80391c0:	697a      	ldr	r2, [r7, #20]
 80391c2:	609a      	str	r2, [r3, #8]
}
 80391c4:	bf00      	nop
 80391c6:	371c      	adds	r7, #28
 80391c8:	46bd      	mov	sp, r7
 80391ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80391ce:	4770      	bx	lr

080391d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80391d0:	b480      	push	{r7}
 80391d2:	b085      	sub	sp, #20
 80391d4:	af00      	add	r7, sp, #0
 80391d6:	6078      	str	r0, [r7, #4]
 80391d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80391da:	687b      	ldr	r3, [r7, #4]
 80391dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80391e0:	2b01      	cmp	r3, #1
 80391e2:	d101      	bne.n	80391e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80391e4:	2302      	movs	r3, #2
 80391e6:	e06d      	b.n	80392c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80391e8:	687b      	ldr	r3, [r7, #4]
 80391ea:	2201      	movs	r2, #1
 80391ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80391f0:	687b      	ldr	r3, [r7, #4]
 80391f2:	2202      	movs	r2, #2
 80391f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80391f8:	687b      	ldr	r3, [r7, #4]
 80391fa:	681b      	ldr	r3, [r3, #0]
 80391fc:	685b      	ldr	r3, [r3, #4]
 80391fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8039200:	687b      	ldr	r3, [r7, #4]
 8039202:	681b      	ldr	r3, [r3, #0]
 8039204:	689b      	ldr	r3, [r3, #8]
 8039206:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8039208:	687b      	ldr	r3, [r7, #4]
 803920a:	681b      	ldr	r3, [r3, #0]
 803920c:	4a30      	ldr	r2, [pc, #192]	; (80392d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 803920e:	4293      	cmp	r3, r2
 8039210:	d004      	beq.n	803921c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8039212:	687b      	ldr	r3, [r7, #4]
 8039214:	681b      	ldr	r3, [r3, #0]
 8039216:	4a2f      	ldr	r2, [pc, #188]	; (80392d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8039218:	4293      	cmp	r3, r2
 803921a:	d108      	bne.n	803922e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 803921c:	68fb      	ldr	r3, [r7, #12]
 803921e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8039222:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8039224:	683b      	ldr	r3, [r7, #0]
 8039226:	685b      	ldr	r3, [r3, #4]
 8039228:	68fa      	ldr	r2, [r7, #12]
 803922a:	4313      	orrs	r3, r2
 803922c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 803922e:	68fb      	ldr	r3, [r7, #12]
 8039230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8039234:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8039236:	683b      	ldr	r3, [r7, #0]
 8039238:	681b      	ldr	r3, [r3, #0]
 803923a:	68fa      	ldr	r2, [r7, #12]
 803923c:	4313      	orrs	r3, r2
 803923e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8039240:	687b      	ldr	r3, [r7, #4]
 8039242:	681b      	ldr	r3, [r3, #0]
 8039244:	68fa      	ldr	r2, [r7, #12]
 8039246:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8039248:	687b      	ldr	r3, [r7, #4]
 803924a:	681b      	ldr	r3, [r3, #0]
 803924c:	4a20      	ldr	r2, [pc, #128]	; (80392d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 803924e:	4293      	cmp	r3, r2
 8039250:	d022      	beq.n	8039298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8039252:	687b      	ldr	r3, [r7, #4]
 8039254:	681b      	ldr	r3, [r3, #0]
 8039256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803925a:	d01d      	beq.n	8039298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 803925c:	687b      	ldr	r3, [r7, #4]
 803925e:	681b      	ldr	r3, [r3, #0]
 8039260:	4a1d      	ldr	r2, [pc, #116]	; (80392d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8039262:	4293      	cmp	r3, r2
 8039264:	d018      	beq.n	8039298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8039266:	687b      	ldr	r3, [r7, #4]
 8039268:	681b      	ldr	r3, [r3, #0]
 803926a:	4a1c      	ldr	r2, [pc, #112]	; (80392dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 803926c:	4293      	cmp	r3, r2
 803926e:	d013      	beq.n	8039298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8039270:	687b      	ldr	r3, [r7, #4]
 8039272:	681b      	ldr	r3, [r3, #0]
 8039274:	4a1a      	ldr	r2, [pc, #104]	; (80392e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8039276:	4293      	cmp	r3, r2
 8039278:	d00e      	beq.n	8039298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 803927a:	687b      	ldr	r3, [r7, #4]
 803927c:	681b      	ldr	r3, [r3, #0]
 803927e:	4a15      	ldr	r2, [pc, #84]	; (80392d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8039280:	4293      	cmp	r3, r2
 8039282:	d009      	beq.n	8039298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8039284:	687b      	ldr	r3, [r7, #4]
 8039286:	681b      	ldr	r3, [r3, #0]
 8039288:	4a16      	ldr	r2, [pc, #88]	; (80392e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 803928a:	4293      	cmp	r3, r2
 803928c:	d004      	beq.n	8039298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 803928e:	687b      	ldr	r3, [r7, #4]
 8039290:	681b      	ldr	r3, [r3, #0]
 8039292:	4a15      	ldr	r2, [pc, #84]	; (80392e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8039294:	4293      	cmp	r3, r2
 8039296:	d10c      	bne.n	80392b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8039298:	68bb      	ldr	r3, [r7, #8]
 803929a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 803929e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80392a0:	683b      	ldr	r3, [r7, #0]
 80392a2:	689b      	ldr	r3, [r3, #8]
 80392a4:	68ba      	ldr	r2, [r7, #8]
 80392a6:	4313      	orrs	r3, r2
 80392a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80392aa:	687b      	ldr	r3, [r7, #4]
 80392ac:	681b      	ldr	r3, [r3, #0]
 80392ae:	68ba      	ldr	r2, [r7, #8]
 80392b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80392b2:	687b      	ldr	r3, [r7, #4]
 80392b4:	2201      	movs	r2, #1
 80392b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80392ba:	687b      	ldr	r3, [r7, #4]
 80392bc:	2200      	movs	r2, #0
 80392be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80392c2:	2300      	movs	r3, #0
}
 80392c4:	4618      	mov	r0, r3
 80392c6:	3714      	adds	r7, #20
 80392c8:	46bd      	mov	sp, r7
 80392ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80392ce:	4770      	bx	lr
 80392d0:	40010000 	.word	0x40010000
 80392d4:	40010400 	.word	0x40010400
 80392d8:	40000400 	.word	0x40000400
 80392dc:	40000800 	.word	0x40000800
 80392e0:	40000c00 	.word	0x40000c00
 80392e4:	40001800 	.word	0x40001800
 80392e8:	40014000 	.word	0x40014000

080392ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80392ec:	b480      	push	{r7}
 80392ee:	b083      	sub	sp, #12
 80392f0:	af00      	add	r7, sp, #0
 80392f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80392f4:	bf00      	nop
 80392f6:	370c      	adds	r7, #12
 80392f8:	46bd      	mov	sp, r7
 80392fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80392fe:	4770      	bx	lr

08039300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8039300:	b480      	push	{r7}
 8039302:	b083      	sub	sp, #12
 8039304:	af00      	add	r7, sp, #0
 8039306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8039308:	bf00      	nop
 803930a:	370c      	adds	r7, #12
 803930c:	46bd      	mov	sp, r7
 803930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039312:	4770      	bx	lr

08039314 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8039314:	b480      	push	{r7}
 8039316:	b083      	sub	sp, #12
 8039318:	af00      	add	r7, sp, #0
 803931a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 803931c:	bf00      	nop
 803931e:	370c      	adds	r7, #12
 8039320:	46bd      	mov	sp, r7
 8039322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039326:	4770      	bx	lr

08039328 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8039328:	b580      	push	{r7, lr}
 803932a:	b082      	sub	sp, #8
 803932c:	af00      	add	r7, sp, #0
 803932e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8039330:	687b      	ldr	r3, [r7, #4]
 8039332:	2b00      	cmp	r3, #0
 8039334:	d101      	bne.n	803933a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8039336:	2301      	movs	r3, #1
 8039338:	e042      	b.n	80393c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 803933a:	687b      	ldr	r3, [r7, #4]
 803933c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8039340:	2b00      	cmp	r3, #0
 8039342:	d106      	bne.n	8039352 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8039344:	687b      	ldr	r3, [r7, #4]
 8039346:	2200      	movs	r2, #0
 8039348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 803934c:	6878      	ldr	r0, [r7, #4]
 803934e:	f7f5 fc65 	bl	802ec1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8039352:	687b      	ldr	r3, [r7, #4]
 8039354:	2224      	movs	r2, #36	; 0x24
 8039356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 803935a:	687b      	ldr	r3, [r7, #4]
 803935c:	681b      	ldr	r3, [r3, #0]
 803935e:	681a      	ldr	r2, [r3, #0]
 8039360:	687b      	ldr	r3, [r7, #4]
 8039362:	681b      	ldr	r3, [r3, #0]
 8039364:	f022 0201 	bic.w	r2, r2, #1
 8039368:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 803936a:	6878      	ldr	r0, [r7, #4]
 803936c:	f000 fdb2 	bl	8039ed4 <UART_SetConfig>
 8039370:	4603      	mov	r3, r0
 8039372:	2b01      	cmp	r3, #1
 8039374:	d101      	bne.n	803937a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8039376:	2301      	movs	r3, #1
 8039378:	e022      	b.n	80393c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 803937a:	687b      	ldr	r3, [r7, #4]
 803937c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803937e:	2b00      	cmp	r3, #0
 8039380:	d002      	beq.n	8039388 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8039382:	6878      	ldr	r0, [r7, #4]
 8039384:	f001 fb0e 	bl	803a9a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8039388:	687b      	ldr	r3, [r7, #4]
 803938a:	681b      	ldr	r3, [r3, #0]
 803938c:	685a      	ldr	r2, [r3, #4]
 803938e:	687b      	ldr	r3, [r7, #4]
 8039390:	681b      	ldr	r3, [r3, #0]
 8039392:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8039396:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8039398:	687b      	ldr	r3, [r7, #4]
 803939a:	681b      	ldr	r3, [r3, #0]
 803939c:	689a      	ldr	r2, [r3, #8]
 803939e:	687b      	ldr	r3, [r7, #4]
 80393a0:	681b      	ldr	r3, [r3, #0]
 80393a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80393a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80393a8:	687b      	ldr	r3, [r7, #4]
 80393aa:	681b      	ldr	r3, [r3, #0]
 80393ac:	681a      	ldr	r2, [r3, #0]
 80393ae:	687b      	ldr	r3, [r7, #4]
 80393b0:	681b      	ldr	r3, [r3, #0]
 80393b2:	f042 0201 	orr.w	r2, r2, #1
 80393b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80393b8:	6878      	ldr	r0, [r7, #4]
 80393ba:	f001 fb95 	bl	803aae8 <UART_CheckIdleState>
 80393be:	4603      	mov	r3, r0
}
 80393c0:	4618      	mov	r0, r3
 80393c2:	3708      	adds	r7, #8
 80393c4:	46bd      	mov	sp, r7
 80393c6:	bd80      	pop	{r7, pc}

080393c8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80393c8:	b580      	push	{r7, lr}
 80393ca:	b08a      	sub	sp, #40	; 0x28
 80393cc:	af02      	add	r7, sp, #8
 80393ce:	60f8      	str	r0, [r7, #12]
 80393d0:	60b9      	str	r1, [r7, #8]
 80393d2:	603b      	str	r3, [r7, #0]
 80393d4:	4613      	mov	r3, r2
 80393d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80393d8:	68fb      	ldr	r3, [r7, #12]
 80393da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80393de:	2b20      	cmp	r3, #32
 80393e0:	f040 80c0 	bne.w	8039564 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80393e4:	68bb      	ldr	r3, [r7, #8]
 80393e6:	2b00      	cmp	r3, #0
 80393e8:	d002      	beq.n	80393f0 <HAL_UART_Receive+0x28>
 80393ea:	88fb      	ldrh	r3, [r7, #6]
 80393ec:	2b00      	cmp	r3, #0
 80393ee:	d101      	bne.n	80393f4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80393f0:	2301      	movs	r3, #1
 80393f2:	e0b8      	b.n	8039566 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80393f4:	68fb      	ldr	r3, [r7, #12]
 80393f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80393fa:	2b01      	cmp	r3, #1
 80393fc:	d101      	bne.n	8039402 <HAL_UART_Receive+0x3a>
 80393fe:	2302      	movs	r3, #2
 8039400:	e0b1      	b.n	8039566 <HAL_UART_Receive+0x19e>
 8039402:	68fb      	ldr	r3, [r7, #12]
 8039404:	2201      	movs	r2, #1
 8039406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 803940a:	68fb      	ldr	r3, [r7, #12]
 803940c:	2200      	movs	r2, #0
 803940e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8039412:	68fb      	ldr	r3, [r7, #12]
 8039414:	2222      	movs	r2, #34	; 0x22
 8039416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803941a:	68fb      	ldr	r3, [r7, #12]
 803941c:	2200      	movs	r2, #0
 803941e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8039420:	f7f5 fe58 	bl	802f0d4 <HAL_GetTick>
 8039424:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8039426:	68fb      	ldr	r3, [r7, #12]
 8039428:	88fa      	ldrh	r2, [r7, #6]
 803942a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 803942e:	68fb      	ldr	r3, [r7, #12]
 8039430:	88fa      	ldrh	r2, [r7, #6]
 8039432:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8039436:	68fb      	ldr	r3, [r7, #12]
 8039438:	689b      	ldr	r3, [r3, #8]
 803943a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803943e:	d10e      	bne.n	803945e <HAL_UART_Receive+0x96>
 8039440:	68fb      	ldr	r3, [r7, #12]
 8039442:	691b      	ldr	r3, [r3, #16]
 8039444:	2b00      	cmp	r3, #0
 8039446:	d105      	bne.n	8039454 <HAL_UART_Receive+0x8c>
 8039448:	68fb      	ldr	r3, [r7, #12]
 803944a:	f240 12ff 	movw	r2, #511	; 0x1ff
 803944e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039452:	e02d      	b.n	80394b0 <HAL_UART_Receive+0xe8>
 8039454:	68fb      	ldr	r3, [r7, #12]
 8039456:	22ff      	movs	r2, #255	; 0xff
 8039458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803945c:	e028      	b.n	80394b0 <HAL_UART_Receive+0xe8>
 803945e:	68fb      	ldr	r3, [r7, #12]
 8039460:	689b      	ldr	r3, [r3, #8]
 8039462:	2b00      	cmp	r3, #0
 8039464:	d10d      	bne.n	8039482 <HAL_UART_Receive+0xba>
 8039466:	68fb      	ldr	r3, [r7, #12]
 8039468:	691b      	ldr	r3, [r3, #16]
 803946a:	2b00      	cmp	r3, #0
 803946c:	d104      	bne.n	8039478 <HAL_UART_Receive+0xb0>
 803946e:	68fb      	ldr	r3, [r7, #12]
 8039470:	22ff      	movs	r2, #255	; 0xff
 8039472:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039476:	e01b      	b.n	80394b0 <HAL_UART_Receive+0xe8>
 8039478:	68fb      	ldr	r3, [r7, #12]
 803947a:	227f      	movs	r2, #127	; 0x7f
 803947c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039480:	e016      	b.n	80394b0 <HAL_UART_Receive+0xe8>
 8039482:	68fb      	ldr	r3, [r7, #12]
 8039484:	689b      	ldr	r3, [r3, #8]
 8039486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803948a:	d10d      	bne.n	80394a8 <HAL_UART_Receive+0xe0>
 803948c:	68fb      	ldr	r3, [r7, #12]
 803948e:	691b      	ldr	r3, [r3, #16]
 8039490:	2b00      	cmp	r3, #0
 8039492:	d104      	bne.n	803949e <HAL_UART_Receive+0xd6>
 8039494:	68fb      	ldr	r3, [r7, #12]
 8039496:	227f      	movs	r2, #127	; 0x7f
 8039498:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803949c:	e008      	b.n	80394b0 <HAL_UART_Receive+0xe8>
 803949e:	68fb      	ldr	r3, [r7, #12]
 80394a0:	223f      	movs	r2, #63	; 0x3f
 80394a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80394a6:	e003      	b.n	80394b0 <HAL_UART_Receive+0xe8>
 80394a8:	68fb      	ldr	r3, [r7, #12]
 80394aa:	2200      	movs	r2, #0
 80394ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80394b0:	68fb      	ldr	r3, [r7, #12]
 80394b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80394b6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80394b8:	68fb      	ldr	r3, [r7, #12]
 80394ba:	689b      	ldr	r3, [r3, #8]
 80394bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80394c0:	d108      	bne.n	80394d4 <HAL_UART_Receive+0x10c>
 80394c2:	68fb      	ldr	r3, [r7, #12]
 80394c4:	691b      	ldr	r3, [r3, #16]
 80394c6:	2b00      	cmp	r3, #0
 80394c8:	d104      	bne.n	80394d4 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80394ca:	2300      	movs	r3, #0
 80394cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80394ce:	68bb      	ldr	r3, [r7, #8]
 80394d0:	61bb      	str	r3, [r7, #24]
 80394d2:	e003      	b.n	80394dc <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80394d4:	68bb      	ldr	r3, [r7, #8]
 80394d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80394d8:	2300      	movs	r3, #0
 80394da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80394dc:	68fb      	ldr	r3, [r7, #12]
 80394de:	2200      	movs	r2, #0
 80394e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80394e4:	e032      	b.n	803954c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80394e6:	683b      	ldr	r3, [r7, #0]
 80394e8:	9300      	str	r3, [sp, #0]
 80394ea:	697b      	ldr	r3, [r7, #20]
 80394ec:	2200      	movs	r2, #0
 80394ee:	2120      	movs	r1, #32
 80394f0:	68f8      	ldr	r0, [r7, #12]
 80394f2:	f001 fb44 	bl	803ab7e <UART_WaitOnFlagUntilTimeout>
 80394f6:	4603      	mov	r3, r0
 80394f8:	2b00      	cmp	r3, #0
 80394fa:	d001      	beq.n	8039500 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80394fc:	2303      	movs	r3, #3
 80394fe:	e032      	b.n	8039566 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8039500:	69fb      	ldr	r3, [r7, #28]
 8039502:	2b00      	cmp	r3, #0
 8039504:	d10c      	bne.n	8039520 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8039506:	68fb      	ldr	r3, [r7, #12]
 8039508:	681b      	ldr	r3, [r3, #0]
 803950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803950c:	b29a      	uxth	r2, r3
 803950e:	8a7b      	ldrh	r3, [r7, #18]
 8039510:	4013      	ands	r3, r2
 8039512:	b29a      	uxth	r2, r3
 8039514:	69bb      	ldr	r3, [r7, #24]
 8039516:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8039518:	69bb      	ldr	r3, [r7, #24]
 803951a:	3302      	adds	r3, #2
 803951c:	61bb      	str	r3, [r7, #24]
 803951e:	e00c      	b.n	803953a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8039520:	68fb      	ldr	r3, [r7, #12]
 8039522:	681b      	ldr	r3, [r3, #0]
 8039524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8039526:	b2da      	uxtb	r2, r3
 8039528:	8a7b      	ldrh	r3, [r7, #18]
 803952a:	b2db      	uxtb	r3, r3
 803952c:	4013      	ands	r3, r2
 803952e:	b2da      	uxtb	r2, r3
 8039530:	69fb      	ldr	r3, [r7, #28]
 8039532:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8039534:	69fb      	ldr	r3, [r7, #28]
 8039536:	3301      	adds	r3, #1
 8039538:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 803953a:	68fb      	ldr	r3, [r7, #12]
 803953c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8039540:	b29b      	uxth	r3, r3
 8039542:	3b01      	subs	r3, #1
 8039544:	b29a      	uxth	r2, r3
 8039546:	68fb      	ldr	r3, [r7, #12]
 8039548:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 803954c:	68fb      	ldr	r3, [r7, #12]
 803954e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8039552:	b29b      	uxth	r3, r3
 8039554:	2b00      	cmp	r3, #0
 8039556:	d1c6      	bne.n	80394e6 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8039558:	68fb      	ldr	r3, [r7, #12]
 803955a:	2220      	movs	r2, #32
 803955c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8039560:	2300      	movs	r3, #0
 8039562:	e000      	b.n	8039566 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8039564:	2302      	movs	r3, #2
  }
}
 8039566:	4618      	mov	r0, r3
 8039568:	3720      	adds	r7, #32
 803956a:	46bd      	mov	sp, r7
 803956c:	bd80      	pop	{r7, pc}
	...

08039570 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8039570:	b480      	push	{r7}
 8039572:	b091      	sub	sp, #68	; 0x44
 8039574:	af00      	add	r7, sp, #0
 8039576:	60f8      	str	r0, [r7, #12]
 8039578:	60b9      	str	r1, [r7, #8]
 803957a:	4613      	mov	r3, r2
 803957c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 803957e:	68fb      	ldr	r3, [r7, #12]
 8039580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8039584:	2b20      	cmp	r3, #32
 8039586:	f040 808c 	bne.w	80396a2 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 803958a:	68bb      	ldr	r3, [r7, #8]
 803958c:	2b00      	cmp	r3, #0
 803958e:	d002      	beq.n	8039596 <HAL_UART_Transmit_IT+0x26>
 8039590:	88fb      	ldrh	r3, [r7, #6]
 8039592:	2b00      	cmp	r3, #0
 8039594:	d101      	bne.n	803959a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8039596:	2301      	movs	r3, #1
 8039598:	e084      	b.n	80396a4 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 803959a:	68fb      	ldr	r3, [r7, #12]
 803959c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80395a0:	2b01      	cmp	r3, #1
 80395a2:	d101      	bne.n	80395a8 <HAL_UART_Transmit_IT+0x38>
 80395a4:	2302      	movs	r3, #2
 80395a6:	e07d      	b.n	80396a4 <HAL_UART_Transmit_IT+0x134>
 80395a8:	68fb      	ldr	r3, [r7, #12]
 80395aa:	2201      	movs	r2, #1
 80395ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80395b0:	68fb      	ldr	r3, [r7, #12]
 80395b2:	68ba      	ldr	r2, [r7, #8]
 80395b4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80395b6:	68fb      	ldr	r3, [r7, #12]
 80395b8:	88fa      	ldrh	r2, [r7, #6]
 80395ba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80395be:	68fb      	ldr	r3, [r7, #12]
 80395c0:	88fa      	ldrh	r2, [r7, #6]
 80395c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80395c6:	68fb      	ldr	r3, [r7, #12]
 80395c8:	2200      	movs	r2, #0
 80395ca:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80395cc:	68fb      	ldr	r3, [r7, #12]
 80395ce:	2200      	movs	r2, #0
 80395d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80395d4:	68fb      	ldr	r3, [r7, #12]
 80395d6:	2221      	movs	r2, #33	; 0x21
 80395d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80395dc:	68fb      	ldr	r3, [r7, #12]
 80395de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80395e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80395e4:	d12e      	bne.n	8039644 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80395e6:	68fb      	ldr	r3, [r7, #12]
 80395e8:	689b      	ldr	r3, [r3, #8]
 80395ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80395ee:	d107      	bne.n	8039600 <HAL_UART_Transmit_IT+0x90>
 80395f0:	68fb      	ldr	r3, [r7, #12]
 80395f2:	691b      	ldr	r3, [r3, #16]
 80395f4:	2b00      	cmp	r3, #0
 80395f6:	d103      	bne.n	8039600 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80395f8:	68fb      	ldr	r3, [r7, #12]
 80395fa:	4a2d      	ldr	r2, [pc, #180]	; (80396b0 <HAL_UART_Transmit_IT+0x140>)
 80395fc:	675a      	str	r2, [r3, #116]	; 0x74
 80395fe:	e002      	b.n	8039606 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8039600:	68fb      	ldr	r3, [r7, #12]
 8039602:	4a2c      	ldr	r2, [pc, #176]	; (80396b4 <HAL_UART_Transmit_IT+0x144>)
 8039604:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8039606:	68fb      	ldr	r3, [r7, #12]
 8039608:	2200      	movs	r2, #0
 803960a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 803960e:	68fb      	ldr	r3, [r7, #12]
 8039610:	681b      	ldr	r3, [r3, #0]
 8039612:	3308      	adds	r3, #8
 8039614:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039618:	e853 3f00 	ldrex	r3, [r3]
 803961c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8039624:	63bb      	str	r3, [r7, #56]	; 0x38
 8039626:	68fb      	ldr	r3, [r7, #12]
 8039628:	681b      	ldr	r3, [r3, #0]
 803962a:	3308      	adds	r3, #8
 803962c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803962e:	637a      	str	r2, [r7, #52]	; 0x34
 8039630:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039632:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8039634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8039636:	e841 2300 	strex	r3, r2, [r1]
 803963a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 803963c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803963e:	2b00      	cmp	r3, #0
 8039640:	d1e5      	bne.n	803960e <HAL_UART_Transmit_IT+0x9e>
 8039642:	e02c      	b.n	803969e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8039644:	68fb      	ldr	r3, [r7, #12]
 8039646:	689b      	ldr	r3, [r3, #8]
 8039648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803964c:	d107      	bne.n	803965e <HAL_UART_Transmit_IT+0xee>
 803964e:	68fb      	ldr	r3, [r7, #12]
 8039650:	691b      	ldr	r3, [r3, #16]
 8039652:	2b00      	cmp	r3, #0
 8039654:	d103      	bne.n	803965e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8039656:	68fb      	ldr	r3, [r7, #12]
 8039658:	4a17      	ldr	r2, [pc, #92]	; (80396b8 <HAL_UART_Transmit_IT+0x148>)
 803965a:	675a      	str	r2, [r3, #116]	; 0x74
 803965c:	e002      	b.n	8039664 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 803965e:	68fb      	ldr	r3, [r7, #12]
 8039660:	4a16      	ldr	r2, [pc, #88]	; (80396bc <HAL_UART_Transmit_IT+0x14c>)
 8039662:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8039664:	68fb      	ldr	r3, [r7, #12]
 8039666:	2200      	movs	r2, #0
 8039668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 803966c:	68fb      	ldr	r3, [r7, #12]
 803966e:	681b      	ldr	r3, [r3, #0]
 8039670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039672:	697b      	ldr	r3, [r7, #20]
 8039674:	e853 3f00 	ldrex	r3, [r3]
 8039678:	613b      	str	r3, [r7, #16]
   return(result);
 803967a:	693b      	ldr	r3, [r7, #16]
 803967c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8039680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8039682:	68fb      	ldr	r3, [r7, #12]
 8039684:	681b      	ldr	r3, [r3, #0]
 8039686:	461a      	mov	r2, r3
 8039688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803968a:	623b      	str	r3, [r7, #32]
 803968c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803968e:	69f9      	ldr	r1, [r7, #28]
 8039690:	6a3a      	ldr	r2, [r7, #32]
 8039692:	e841 2300 	strex	r3, r2, [r1]
 8039696:	61bb      	str	r3, [r7, #24]
   return(result);
 8039698:	69bb      	ldr	r3, [r7, #24]
 803969a:	2b00      	cmp	r3, #0
 803969c:	d1e6      	bne.n	803966c <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 803969e:	2300      	movs	r3, #0
 80396a0:	e000      	b.n	80396a4 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80396a2:	2302      	movs	r3, #2
  }
}
 80396a4:	4618      	mov	r0, r3
 80396a6:	3744      	adds	r7, #68	; 0x44
 80396a8:	46bd      	mov	sp, r7
 80396aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80396ae:	4770      	bx	lr
 80396b0:	0803b2b7 	.word	0x0803b2b7
 80396b4:	0803b1d7 	.word	0x0803b1d7
 80396b8:	0803b115 	.word	0x0803b115
 80396bc:	0803b05d 	.word	0x0803b05d

080396c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80396c0:	b580      	push	{r7, lr}
 80396c2:	b08a      	sub	sp, #40	; 0x28
 80396c4:	af00      	add	r7, sp, #0
 80396c6:	60f8      	str	r0, [r7, #12]
 80396c8:	60b9      	str	r1, [r7, #8]
 80396ca:	4613      	mov	r3, r2
 80396cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80396ce:	68fb      	ldr	r3, [r7, #12]
 80396d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80396d4:	2b20      	cmp	r3, #32
 80396d6:	d142      	bne.n	803975e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80396d8:	68bb      	ldr	r3, [r7, #8]
 80396da:	2b00      	cmp	r3, #0
 80396dc:	d002      	beq.n	80396e4 <HAL_UART_Receive_IT+0x24>
 80396de:	88fb      	ldrh	r3, [r7, #6]
 80396e0:	2b00      	cmp	r3, #0
 80396e2:	d101      	bne.n	80396e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80396e4:	2301      	movs	r3, #1
 80396e6:	e03b      	b.n	8039760 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80396e8:	68fb      	ldr	r3, [r7, #12]
 80396ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80396ee:	2b01      	cmp	r3, #1
 80396f0:	d101      	bne.n	80396f6 <HAL_UART_Receive_IT+0x36>
 80396f2:	2302      	movs	r3, #2
 80396f4:	e034      	b.n	8039760 <HAL_UART_Receive_IT+0xa0>
 80396f6:	68fb      	ldr	r3, [r7, #12]
 80396f8:	2201      	movs	r2, #1
 80396fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80396fe:	68fb      	ldr	r3, [r7, #12]
 8039700:	2200      	movs	r2, #0
 8039702:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8039704:	68fb      	ldr	r3, [r7, #12]
 8039706:	681b      	ldr	r3, [r3, #0]
 8039708:	4a17      	ldr	r2, [pc, #92]	; (8039768 <HAL_UART_Receive_IT+0xa8>)
 803970a:	4293      	cmp	r3, r2
 803970c:	d01f      	beq.n	803974e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 803970e:	68fb      	ldr	r3, [r7, #12]
 8039710:	681b      	ldr	r3, [r3, #0]
 8039712:	685b      	ldr	r3, [r3, #4]
 8039714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8039718:	2b00      	cmp	r3, #0
 803971a:	d018      	beq.n	803974e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 803971c:	68fb      	ldr	r3, [r7, #12]
 803971e:	681b      	ldr	r3, [r3, #0]
 8039720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039722:	697b      	ldr	r3, [r7, #20]
 8039724:	e853 3f00 	ldrex	r3, [r3]
 8039728:	613b      	str	r3, [r7, #16]
   return(result);
 803972a:	693b      	ldr	r3, [r7, #16]
 803972c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8039730:	627b      	str	r3, [r7, #36]	; 0x24
 8039732:	68fb      	ldr	r3, [r7, #12]
 8039734:	681b      	ldr	r3, [r3, #0]
 8039736:	461a      	mov	r2, r3
 8039738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803973a:	623b      	str	r3, [r7, #32]
 803973c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803973e:	69f9      	ldr	r1, [r7, #28]
 8039740:	6a3a      	ldr	r2, [r7, #32]
 8039742:	e841 2300 	strex	r3, r2, [r1]
 8039746:	61bb      	str	r3, [r7, #24]
   return(result);
 8039748:	69bb      	ldr	r3, [r7, #24]
 803974a:	2b00      	cmp	r3, #0
 803974c:	d1e6      	bne.n	803971c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 803974e:	88fb      	ldrh	r3, [r7, #6]
 8039750:	461a      	mov	r2, r3
 8039752:	68b9      	ldr	r1, [r7, #8]
 8039754:	68f8      	ldr	r0, [r7, #12]
 8039756:	f001 fadb 	bl	803ad10 <UART_Start_Receive_IT>
 803975a:	4603      	mov	r3, r0
 803975c:	e000      	b.n	8039760 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 803975e:	2302      	movs	r3, #2
  }
}
 8039760:	4618      	mov	r0, r3
 8039762:	3728      	adds	r7, #40	; 0x28
 8039764:	46bd      	mov	sp, r7
 8039766:	bd80      	pop	{r7, pc}
 8039768:	58000c00 	.word	0x58000c00

0803976c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 803976c:	b580      	push	{r7, lr}
 803976e:	b0ba      	sub	sp, #232	; 0xe8
 8039770:	af00      	add	r7, sp, #0
 8039772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8039774:	687b      	ldr	r3, [r7, #4]
 8039776:	681b      	ldr	r3, [r3, #0]
 8039778:	69db      	ldr	r3, [r3, #28]
 803977a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 803977e:	687b      	ldr	r3, [r7, #4]
 8039780:	681b      	ldr	r3, [r3, #0]
 8039782:	681b      	ldr	r3, [r3, #0]
 8039784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8039788:	687b      	ldr	r3, [r7, #4]
 803978a:	681b      	ldr	r3, [r3, #0]
 803978c:	689b      	ldr	r3, [r3, #8]
 803978e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8039792:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8039796:	f640 030f 	movw	r3, #2063	; 0x80f
 803979a:	4013      	ands	r3, r2
 803979c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80397a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80397a4:	2b00      	cmp	r3, #0
 80397a6:	d11b      	bne.n	80397e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80397a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80397ac:	f003 0320 	and.w	r3, r3, #32
 80397b0:	2b00      	cmp	r3, #0
 80397b2:	d015      	beq.n	80397e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80397b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80397b8:	f003 0320 	and.w	r3, r3, #32
 80397bc:	2b00      	cmp	r3, #0
 80397be:	d105      	bne.n	80397cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80397c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80397c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80397c8:	2b00      	cmp	r3, #0
 80397ca:	d009      	beq.n	80397e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80397cc:	687b      	ldr	r3, [r7, #4]
 80397ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80397d0:	2b00      	cmp	r3, #0
 80397d2:	f000 835a 	beq.w	8039e8a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80397d6:	687b      	ldr	r3, [r7, #4]
 80397d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80397da:	6878      	ldr	r0, [r7, #4]
 80397dc:	4798      	blx	r3
      }
      return;
 80397de:	e354      	b.n	8039e8a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80397e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80397e4:	2b00      	cmp	r3, #0
 80397e6:	f000 811f 	beq.w	8039a28 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80397ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80397ee:	4b8b      	ldr	r3, [pc, #556]	; (8039a1c <HAL_UART_IRQHandler+0x2b0>)
 80397f0:	4013      	ands	r3, r2
 80397f2:	2b00      	cmp	r3, #0
 80397f4:	d106      	bne.n	8039804 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80397f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80397fa:	4b89      	ldr	r3, [pc, #548]	; (8039a20 <HAL_UART_IRQHandler+0x2b4>)
 80397fc:	4013      	ands	r3, r2
 80397fe:	2b00      	cmp	r3, #0
 8039800:	f000 8112 	beq.w	8039a28 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8039804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8039808:	f003 0301 	and.w	r3, r3, #1
 803980c:	2b00      	cmp	r3, #0
 803980e:	d011      	beq.n	8039834 <HAL_UART_IRQHandler+0xc8>
 8039810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8039814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8039818:	2b00      	cmp	r3, #0
 803981a:	d00b      	beq.n	8039834 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803981c:	687b      	ldr	r3, [r7, #4]
 803981e:	681b      	ldr	r3, [r3, #0]
 8039820:	2201      	movs	r2, #1
 8039822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8039824:	687b      	ldr	r3, [r7, #4]
 8039826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803982a:	f043 0201 	orr.w	r2, r3, #1
 803982e:	687b      	ldr	r3, [r7, #4]
 8039830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8039834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8039838:	f003 0302 	and.w	r3, r3, #2
 803983c:	2b00      	cmp	r3, #0
 803983e:	d011      	beq.n	8039864 <HAL_UART_IRQHandler+0xf8>
 8039840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8039844:	f003 0301 	and.w	r3, r3, #1
 8039848:	2b00      	cmp	r3, #0
 803984a:	d00b      	beq.n	8039864 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803984c:	687b      	ldr	r3, [r7, #4]
 803984e:	681b      	ldr	r3, [r3, #0]
 8039850:	2202      	movs	r2, #2
 8039852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8039854:	687b      	ldr	r3, [r7, #4]
 8039856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803985a:	f043 0204 	orr.w	r2, r3, #4
 803985e:	687b      	ldr	r3, [r7, #4]
 8039860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8039864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8039868:	f003 0304 	and.w	r3, r3, #4
 803986c:	2b00      	cmp	r3, #0
 803986e:	d011      	beq.n	8039894 <HAL_UART_IRQHandler+0x128>
 8039870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8039874:	f003 0301 	and.w	r3, r3, #1
 8039878:	2b00      	cmp	r3, #0
 803987a:	d00b      	beq.n	8039894 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803987c:	687b      	ldr	r3, [r7, #4]
 803987e:	681b      	ldr	r3, [r3, #0]
 8039880:	2204      	movs	r2, #4
 8039882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8039884:	687b      	ldr	r3, [r7, #4]
 8039886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803988a:	f043 0202 	orr.w	r2, r3, #2
 803988e:	687b      	ldr	r3, [r7, #4]
 8039890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8039894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8039898:	f003 0308 	and.w	r3, r3, #8
 803989c:	2b00      	cmp	r3, #0
 803989e:	d017      	beq.n	80398d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80398a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80398a4:	f003 0320 	and.w	r3, r3, #32
 80398a8:	2b00      	cmp	r3, #0
 80398aa:	d105      	bne.n	80398b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80398ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80398b0:	4b5a      	ldr	r3, [pc, #360]	; (8039a1c <HAL_UART_IRQHandler+0x2b0>)
 80398b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80398b4:	2b00      	cmp	r3, #0
 80398b6:	d00b      	beq.n	80398d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80398b8:	687b      	ldr	r3, [r7, #4]
 80398ba:	681b      	ldr	r3, [r3, #0]
 80398bc:	2208      	movs	r2, #8
 80398be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80398c0:	687b      	ldr	r3, [r7, #4]
 80398c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80398c6:	f043 0208 	orr.w	r2, r3, #8
 80398ca:	687b      	ldr	r3, [r7, #4]
 80398cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80398d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80398d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80398d8:	2b00      	cmp	r3, #0
 80398da:	d012      	beq.n	8039902 <HAL_UART_IRQHandler+0x196>
 80398dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80398e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80398e4:	2b00      	cmp	r3, #0
 80398e6:	d00c      	beq.n	8039902 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80398e8:	687b      	ldr	r3, [r7, #4]
 80398ea:	681b      	ldr	r3, [r3, #0]
 80398ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80398f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80398f2:	687b      	ldr	r3, [r7, #4]
 80398f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80398f8:	f043 0220 	orr.w	r2, r3, #32
 80398fc:	687b      	ldr	r3, [r7, #4]
 80398fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8039902:	687b      	ldr	r3, [r7, #4]
 8039904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8039908:	2b00      	cmp	r3, #0
 803990a:	f000 82c0 	beq.w	8039e8e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 803990e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8039912:	f003 0320 	and.w	r3, r3, #32
 8039916:	2b00      	cmp	r3, #0
 8039918:	d013      	beq.n	8039942 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 803991a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803991e:	f003 0320 	and.w	r3, r3, #32
 8039922:	2b00      	cmp	r3, #0
 8039924:	d105      	bne.n	8039932 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8039926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803992a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 803992e:	2b00      	cmp	r3, #0
 8039930:	d007      	beq.n	8039942 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8039932:	687b      	ldr	r3, [r7, #4]
 8039934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8039936:	2b00      	cmp	r3, #0
 8039938:	d003      	beq.n	8039942 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 803993a:	687b      	ldr	r3, [r7, #4]
 803993c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803993e:	6878      	ldr	r0, [r7, #4]
 8039940:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8039942:	687b      	ldr	r3, [r7, #4]
 8039944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8039948:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 803994c:	687b      	ldr	r3, [r7, #4]
 803994e:	681b      	ldr	r3, [r3, #0]
 8039950:	689b      	ldr	r3, [r3, #8]
 8039952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8039956:	2b40      	cmp	r3, #64	; 0x40
 8039958:	d005      	beq.n	8039966 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 803995a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 803995e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8039962:	2b00      	cmp	r3, #0
 8039964:	d04f      	beq.n	8039a06 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8039966:	6878      	ldr	r0, [r7, #4]
 8039968:	f001 fafc 	bl	803af64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 803996c:	687b      	ldr	r3, [r7, #4]
 803996e:	681b      	ldr	r3, [r3, #0]
 8039970:	689b      	ldr	r3, [r3, #8]
 8039972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8039976:	2b40      	cmp	r3, #64	; 0x40
 8039978:	d141      	bne.n	80399fe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 803997a:	687b      	ldr	r3, [r7, #4]
 803997c:	681b      	ldr	r3, [r3, #0]
 803997e:	3308      	adds	r3, #8
 8039980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8039988:	e853 3f00 	ldrex	r3, [r3]
 803998c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8039990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8039994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8039998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 803999c:	687b      	ldr	r3, [r7, #4]
 803999e:	681b      	ldr	r3, [r3, #0]
 80399a0:	3308      	adds	r3, #8
 80399a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80399a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80399aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80399ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80399b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80399b6:	e841 2300 	strex	r3, r2, [r1]
 80399ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80399be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80399c2:	2b00      	cmp	r3, #0
 80399c4:	d1d9      	bne.n	803997a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80399c6:	687b      	ldr	r3, [r7, #4]
 80399c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80399ca:	2b00      	cmp	r3, #0
 80399cc:	d013      	beq.n	80399f6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80399ce:	687b      	ldr	r3, [r7, #4]
 80399d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80399d2:	4a14      	ldr	r2, [pc, #80]	; (8039a24 <HAL_UART_IRQHandler+0x2b8>)
 80399d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80399d6:	687b      	ldr	r3, [r7, #4]
 80399d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80399da:	4618      	mov	r0, r3
 80399dc:	f7f7 f95a 	bl	8030c94 <HAL_DMA_Abort_IT>
 80399e0:	4603      	mov	r3, r0
 80399e2:	2b00      	cmp	r3, #0
 80399e4:	d017      	beq.n	8039a16 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80399e6:	687b      	ldr	r3, [r7, #4]
 80399e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80399ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80399ec:	687a      	ldr	r2, [r7, #4]
 80399ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80399f0:	4610      	mov	r0, r2
 80399f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80399f4:	e00f      	b.n	8039a16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80399f6:	6878      	ldr	r0, [r7, #4]
 80399f8:	f000 fa56 	bl	8039ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80399fc:	e00b      	b.n	8039a16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80399fe:	6878      	ldr	r0, [r7, #4]
 8039a00:	f000 fa52 	bl	8039ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8039a04:	e007      	b.n	8039a16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8039a06:	6878      	ldr	r0, [r7, #4]
 8039a08:	f000 fa4e 	bl	8039ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8039a0c:	687b      	ldr	r3, [r7, #4]
 8039a0e:	2200      	movs	r2, #0
 8039a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8039a14:	e23b      	b.n	8039e8e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8039a16:	bf00      	nop
    return;
 8039a18:	e239      	b.n	8039e8e <HAL_UART_IRQHandler+0x722>
 8039a1a:	bf00      	nop
 8039a1c:	10000001 	.word	0x10000001
 8039a20:	04000120 	.word	0x04000120
 8039a24:	0803b031 	.word	0x0803b031

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8039a28:	687b      	ldr	r3, [r7, #4]
 8039a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8039a2c:	2b01      	cmp	r3, #1
 8039a2e:	f040 81ce 	bne.w	8039dce <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8039a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8039a36:	f003 0310 	and.w	r3, r3, #16
 8039a3a:	2b00      	cmp	r3, #0
 8039a3c:	f000 81c7 	beq.w	8039dce <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8039a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8039a44:	f003 0310 	and.w	r3, r3, #16
 8039a48:	2b00      	cmp	r3, #0
 8039a4a:	f000 81c0 	beq.w	8039dce <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8039a4e:	687b      	ldr	r3, [r7, #4]
 8039a50:	681b      	ldr	r3, [r3, #0]
 8039a52:	2210      	movs	r2, #16
 8039a54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8039a56:	687b      	ldr	r3, [r7, #4]
 8039a58:	681b      	ldr	r3, [r3, #0]
 8039a5a:	689b      	ldr	r3, [r3, #8]
 8039a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8039a60:	2b40      	cmp	r3, #64	; 0x40
 8039a62:	f040 813b 	bne.w	8039cdc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8039a66:	687b      	ldr	r3, [r7, #4]
 8039a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039a6a:	681b      	ldr	r3, [r3, #0]
 8039a6c:	4a8b      	ldr	r2, [pc, #556]	; (8039c9c <HAL_UART_IRQHandler+0x530>)
 8039a6e:	4293      	cmp	r3, r2
 8039a70:	d059      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039a72:	687b      	ldr	r3, [r7, #4]
 8039a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039a76:	681b      	ldr	r3, [r3, #0]
 8039a78:	4a89      	ldr	r2, [pc, #548]	; (8039ca0 <HAL_UART_IRQHandler+0x534>)
 8039a7a:	4293      	cmp	r3, r2
 8039a7c:	d053      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039a7e:	687b      	ldr	r3, [r7, #4]
 8039a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039a82:	681b      	ldr	r3, [r3, #0]
 8039a84:	4a87      	ldr	r2, [pc, #540]	; (8039ca4 <HAL_UART_IRQHandler+0x538>)
 8039a86:	4293      	cmp	r3, r2
 8039a88:	d04d      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039a8a:	687b      	ldr	r3, [r7, #4]
 8039a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039a8e:	681b      	ldr	r3, [r3, #0]
 8039a90:	4a85      	ldr	r2, [pc, #532]	; (8039ca8 <HAL_UART_IRQHandler+0x53c>)
 8039a92:	4293      	cmp	r3, r2
 8039a94:	d047      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039a96:	687b      	ldr	r3, [r7, #4]
 8039a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039a9a:	681b      	ldr	r3, [r3, #0]
 8039a9c:	4a83      	ldr	r2, [pc, #524]	; (8039cac <HAL_UART_IRQHandler+0x540>)
 8039a9e:	4293      	cmp	r3, r2
 8039aa0:	d041      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039aa2:	687b      	ldr	r3, [r7, #4]
 8039aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039aa6:	681b      	ldr	r3, [r3, #0]
 8039aa8:	4a81      	ldr	r2, [pc, #516]	; (8039cb0 <HAL_UART_IRQHandler+0x544>)
 8039aaa:	4293      	cmp	r3, r2
 8039aac:	d03b      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039aae:	687b      	ldr	r3, [r7, #4]
 8039ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039ab2:	681b      	ldr	r3, [r3, #0]
 8039ab4:	4a7f      	ldr	r2, [pc, #508]	; (8039cb4 <HAL_UART_IRQHandler+0x548>)
 8039ab6:	4293      	cmp	r3, r2
 8039ab8:	d035      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039aba:	687b      	ldr	r3, [r7, #4]
 8039abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039abe:	681b      	ldr	r3, [r3, #0]
 8039ac0:	4a7d      	ldr	r2, [pc, #500]	; (8039cb8 <HAL_UART_IRQHandler+0x54c>)
 8039ac2:	4293      	cmp	r3, r2
 8039ac4:	d02f      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039ac6:	687b      	ldr	r3, [r7, #4]
 8039ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039aca:	681b      	ldr	r3, [r3, #0]
 8039acc:	4a7b      	ldr	r2, [pc, #492]	; (8039cbc <HAL_UART_IRQHandler+0x550>)
 8039ace:	4293      	cmp	r3, r2
 8039ad0:	d029      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039ad2:	687b      	ldr	r3, [r7, #4]
 8039ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039ad6:	681b      	ldr	r3, [r3, #0]
 8039ad8:	4a79      	ldr	r2, [pc, #484]	; (8039cc0 <HAL_UART_IRQHandler+0x554>)
 8039ada:	4293      	cmp	r3, r2
 8039adc:	d023      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039ade:	687b      	ldr	r3, [r7, #4]
 8039ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039ae2:	681b      	ldr	r3, [r3, #0]
 8039ae4:	4a77      	ldr	r2, [pc, #476]	; (8039cc4 <HAL_UART_IRQHandler+0x558>)
 8039ae6:	4293      	cmp	r3, r2
 8039ae8:	d01d      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039aea:	687b      	ldr	r3, [r7, #4]
 8039aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039aee:	681b      	ldr	r3, [r3, #0]
 8039af0:	4a75      	ldr	r2, [pc, #468]	; (8039cc8 <HAL_UART_IRQHandler+0x55c>)
 8039af2:	4293      	cmp	r3, r2
 8039af4:	d017      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039af6:	687b      	ldr	r3, [r7, #4]
 8039af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039afa:	681b      	ldr	r3, [r3, #0]
 8039afc:	4a73      	ldr	r2, [pc, #460]	; (8039ccc <HAL_UART_IRQHandler+0x560>)
 8039afe:	4293      	cmp	r3, r2
 8039b00:	d011      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039b02:	687b      	ldr	r3, [r7, #4]
 8039b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039b06:	681b      	ldr	r3, [r3, #0]
 8039b08:	4a71      	ldr	r2, [pc, #452]	; (8039cd0 <HAL_UART_IRQHandler+0x564>)
 8039b0a:	4293      	cmp	r3, r2
 8039b0c:	d00b      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039b0e:	687b      	ldr	r3, [r7, #4]
 8039b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039b12:	681b      	ldr	r3, [r3, #0]
 8039b14:	4a6f      	ldr	r2, [pc, #444]	; (8039cd4 <HAL_UART_IRQHandler+0x568>)
 8039b16:	4293      	cmp	r3, r2
 8039b18:	d005      	beq.n	8039b26 <HAL_UART_IRQHandler+0x3ba>
 8039b1a:	687b      	ldr	r3, [r7, #4]
 8039b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039b1e:	681b      	ldr	r3, [r3, #0]
 8039b20:	4a6d      	ldr	r2, [pc, #436]	; (8039cd8 <HAL_UART_IRQHandler+0x56c>)
 8039b22:	4293      	cmp	r3, r2
 8039b24:	d105      	bne.n	8039b32 <HAL_UART_IRQHandler+0x3c6>
 8039b26:	687b      	ldr	r3, [r7, #4]
 8039b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039b2a:	681b      	ldr	r3, [r3, #0]
 8039b2c:	685b      	ldr	r3, [r3, #4]
 8039b2e:	b29b      	uxth	r3, r3
 8039b30:	e004      	b.n	8039b3c <HAL_UART_IRQHandler+0x3d0>
 8039b32:	687b      	ldr	r3, [r7, #4]
 8039b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039b36:	681b      	ldr	r3, [r3, #0]
 8039b38:	685b      	ldr	r3, [r3, #4]
 8039b3a:	b29b      	uxth	r3, r3
 8039b3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8039b40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8039b44:	2b00      	cmp	r3, #0
 8039b46:	f000 81a4 	beq.w	8039e92 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8039b4a:	687b      	ldr	r3, [r7, #4]
 8039b4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8039b50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8039b54:	429a      	cmp	r2, r3
 8039b56:	f080 819c 	bcs.w	8039e92 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8039b5a:	687b      	ldr	r3, [r7, #4]
 8039b5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8039b60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8039b64:	687b      	ldr	r3, [r7, #4]
 8039b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039b68:	69db      	ldr	r3, [r3, #28]
 8039b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8039b6e:	f000 8086 	beq.w	8039c7e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8039b72:	687b      	ldr	r3, [r7, #4]
 8039b74:	681b      	ldr	r3, [r3, #0]
 8039b76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8039b7e:	e853 3f00 	ldrex	r3, [r3]
 8039b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8039b86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8039b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8039b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8039b92:	687b      	ldr	r3, [r7, #4]
 8039b94:	681b      	ldr	r3, [r3, #0]
 8039b96:	461a      	mov	r2, r3
 8039b98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8039b9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8039ba0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039ba4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8039ba8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8039bac:	e841 2300 	strex	r3, r2, [r1]
 8039bb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8039bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8039bb8:	2b00      	cmp	r3, #0
 8039bba:	d1da      	bne.n	8039b72 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8039bbc:	687b      	ldr	r3, [r7, #4]
 8039bbe:	681b      	ldr	r3, [r3, #0]
 8039bc0:	3308      	adds	r3, #8
 8039bc2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8039bc6:	e853 3f00 	ldrex	r3, [r3]
 8039bca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8039bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8039bce:	f023 0301 	bic.w	r3, r3, #1
 8039bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8039bd6:	687b      	ldr	r3, [r7, #4]
 8039bd8:	681b      	ldr	r3, [r3, #0]
 8039bda:	3308      	adds	r3, #8
 8039bdc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8039be0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8039be4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039be6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8039be8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8039bec:	e841 2300 	strex	r3, r2, [r1]
 8039bf0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8039bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8039bf4:	2b00      	cmp	r3, #0
 8039bf6:	d1e1      	bne.n	8039bbc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8039bf8:	687b      	ldr	r3, [r7, #4]
 8039bfa:	681b      	ldr	r3, [r3, #0]
 8039bfc:	3308      	adds	r3, #8
 8039bfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8039c02:	e853 3f00 	ldrex	r3, [r3]
 8039c06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8039c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8039c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8039c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8039c12:	687b      	ldr	r3, [r7, #4]
 8039c14:	681b      	ldr	r3, [r3, #0]
 8039c16:	3308      	adds	r3, #8
 8039c18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8039c1c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8039c1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039c20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8039c22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8039c24:	e841 2300 	strex	r3, r2, [r1]
 8039c28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8039c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8039c2c:	2b00      	cmp	r3, #0
 8039c2e:	d1e3      	bne.n	8039bf8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8039c30:	687b      	ldr	r3, [r7, #4]
 8039c32:	2220      	movs	r2, #32
 8039c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8039c38:	687b      	ldr	r3, [r7, #4]
 8039c3a:	2200      	movs	r2, #0
 8039c3c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8039c3e:	687b      	ldr	r3, [r7, #4]
 8039c40:	681b      	ldr	r3, [r3, #0]
 8039c42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8039c46:	e853 3f00 	ldrex	r3, [r3]
 8039c4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8039c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8039c4e:	f023 0310 	bic.w	r3, r3, #16
 8039c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8039c56:	687b      	ldr	r3, [r7, #4]
 8039c58:	681b      	ldr	r3, [r3, #0]
 8039c5a:	461a      	mov	r2, r3
 8039c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8039c60:	65bb      	str	r3, [r7, #88]	; 0x58
 8039c62:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039c64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8039c66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8039c68:	e841 2300 	strex	r3, r2, [r1]
 8039c6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8039c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8039c70:	2b00      	cmp	r3, #0
 8039c72:	d1e4      	bne.n	8039c3e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8039c74:	687b      	ldr	r3, [r7, #4]
 8039c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8039c78:	4618      	mov	r0, r3
 8039c7a:	f7f6 fced 	bl	8030658 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8039c7e:	687b      	ldr	r3, [r7, #4]
 8039c80:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8039c84:	687b      	ldr	r3, [r7, #4]
 8039c86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8039c8a:	b29b      	uxth	r3, r3
 8039c8c:	1ad3      	subs	r3, r2, r3
 8039c8e:	b29b      	uxth	r3, r3
 8039c90:	4619      	mov	r1, r3
 8039c92:	6878      	ldr	r0, [r7, #4]
 8039c94:	f000 f912 	bl	8039ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8039c98:	e0fb      	b.n	8039e92 <HAL_UART_IRQHandler+0x726>
 8039c9a:	bf00      	nop
 8039c9c:	40020010 	.word	0x40020010
 8039ca0:	40020028 	.word	0x40020028
 8039ca4:	40020040 	.word	0x40020040
 8039ca8:	40020058 	.word	0x40020058
 8039cac:	40020070 	.word	0x40020070
 8039cb0:	40020088 	.word	0x40020088
 8039cb4:	400200a0 	.word	0x400200a0
 8039cb8:	400200b8 	.word	0x400200b8
 8039cbc:	40020410 	.word	0x40020410
 8039cc0:	40020428 	.word	0x40020428
 8039cc4:	40020440 	.word	0x40020440
 8039cc8:	40020458 	.word	0x40020458
 8039ccc:	40020470 	.word	0x40020470
 8039cd0:	40020488 	.word	0x40020488
 8039cd4:	400204a0 	.word	0x400204a0
 8039cd8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8039cdc:	687b      	ldr	r3, [r7, #4]
 8039cde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8039ce2:	687b      	ldr	r3, [r7, #4]
 8039ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8039ce8:	b29b      	uxth	r3, r3
 8039cea:	1ad3      	subs	r3, r2, r3
 8039cec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8039cf0:	687b      	ldr	r3, [r7, #4]
 8039cf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8039cf6:	b29b      	uxth	r3, r3
 8039cf8:	2b00      	cmp	r3, #0
 8039cfa:	f000 80cc 	beq.w	8039e96 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8039cfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8039d02:	2b00      	cmp	r3, #0
 8039d04:	f000 80c7 	beq.w	8039e96 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8039d08:	687b      	ldr	r3, [r7, #4]
 8039d0a:	681b      	ldr	r3, [r3, #0]
 8039d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039d10:	e853 3f00 	ldrex	r3, [r3]
 8039d14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8039d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8039d18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8039d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8039d20:	687b      	ldr	r3, [r7, #4]
 8039d22:	681b      	ldr	r3, [r3, #0]
 8039d24:	461a      	mov	r2, r3
 8039d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8039d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8039d2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039d2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8039d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8039d32:	e841 2300 	strex	r3, r2, [r1]
 8039d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8039d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039d3a:	2b00      	cmp	r3, #0
 8039d3c:	d1e4      	bne.n	8039d08 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8039d3e:	687b      	ldr	r3, [r7, #4]
 8039d40:	681b      	ldr	r3, [r3, #0]
 8039d42:	3308      	adds	r3, #8
 8039d44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039d48:	e853 3f00 	ldrex	r3, [r3]
 8039d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8039d4e:	6a3a      	ldr	r2, [r7, #32]
 8039d50:	4b54      	ldr	r3, [pc, #336]	; (8039ea4 <HAL_UART_IRQHandler+0x738>)
 8039d52:	4013      	ands	r3, r2
 8039d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8039d58:	687b      	ldr	r3, [r7, #4]
 8039d5a:	681b      	ldr	r3, [r3, #0]
 8039d5c:	3308      	adds	r3, #8
 8039d5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8039d62:	633a      	str	r2, [r7, #48]	; 0x30
 8039d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8039d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8039d6a:	e841 2300 	strex	r3, r2, [r1]
 8039d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8039d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039d72:	2b00      	cmp	r3, #0
 8039d74:	d1e3      	bne.n	8039d3e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8039d76:	687b      	ldr	r3, [r7, #4]
 8039d78:	2220      	movs	r2, #32
 8039d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8039d7e:	687b      	ldr	r3, [r7, #4]
 8039d80:	2200      	movs	r2, #0
 8039d82:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8039d84:	687b      	ldr	r3, [r7, #4]
 8039d86:	2200      	movs	r2, #0
 8039d88:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8039d8a:	687b      	ldr	r3, [r7, #4]
 8039d8c:	681b      	ldr	r3, [r3, #0]
 8039d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039d90:	693b      	ldr	r3, [r7, #16]
 8039d92:	e853 3f00 	ldrex	r3, [r3]
 8039d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8039d98:	68fb      	ldr	r3, [r7, #12]
 8039d9a:	f023 0310 	bic.w	r3, r3, #16
 8039d9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8039da2:	687b      	ldr	r3, [r7, #4]
 8039da4:	681b      	ldr	r3, [r3, #0]
 8039da6:	461a      	mov	r2, r3
 8039da8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8039dac:	61fb      	str	r3, [r7, #28]
 8039dae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039db0:	69b9      	ldr	r1, [r7, #24]
 8039db2:	69fa      	ldr	r2, [r7, #28]
 8039db4:	e841 2300 	strex	r3, r2, [r1]
 8039db8:	617b      	str	r3, [r7, #20]
   return(result);
 8039dba:	697b      	ldr	r3, [r7, #20]
 8039dbc:	2b00      	cmp	r3, #0
 8039dbe:	d1e4      	bne.n	8039d8a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8039dc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8039dc4:	4619      	mov	r1, r3
 8039dc6:	6878      	ldr	r0, [r7, #4]
 8039dc8:	f000 f878 	bl	8039ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8039dcc:	e063      	b.n	8039e96 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8039dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8039dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8039dd6:	2b00      	cmp	r3, #0
 8039dd8:	d00e      	beq.n	8039df8 <HAL_UART_IRQHandler+0x68c>
 8039dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8039dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8039de2:	2b00      	cmp	r3, #0
 8039de4:	d008      	beq.n	8039df8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8039de6:	687b      	ldr	r3, [r7, #4]
 8039de8:	681b      	ldr	r3, [r3, #0]
 8039dea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8039dee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8039df0:	6878      	ldr	r0, [r7, #4]
 8039df2:	f001 ff5d 	bl	803bcb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8039df6:	e051      	b.n	8039e9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8039df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8039dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8039e00:	2b00      	cmp	r3, #0
 8039e02:	d014      	beq.n	8039e2e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8039e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8039e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8039e0c:	2b00      	cmp	r3, #0
 8039e0e:	d105      	bne.n	8039e1c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8039e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8039e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8039e18:	2b00      	cmp	r3, #0
 8039e1a:	d008      	beq.n	8039e2e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8039e1c:	687b      	ldr	r3, [r7, #4]
 8039e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8039e20:	2b00      	cmp	r3, #0
 8039e22:	d03a      	beq.n	8039e9a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8039e24:	687b      	ldr	r3, [r7, #4]
 8039e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8039e28:	6878      	ldr	r0, [r7, #4]
 8039e2a:	4798      	blx	r3
    }
    return;
 8039e2c:	e035      	b.n	8039e9a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8039e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8039e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8039e36:	2b00      	cmp	r3, #0
 8039e38:	d009      	beq.n	8039e4e <HAL_UART_IRQHandler+0x6e2>
 8039e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8039e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8039e42:	2b00      	cmp	r3, #0
 8039e44:	d003      	beq.n	8039e4e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8039e46:	6878      	ldr	r0, [r7, #4]
 8039e48:	f001 faaa 	bl	803b3a0 <UART_EndTransmit_IT>
    return;
 8039e4c:	e026      	b.n	8039e9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8039e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8039e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8039e56:	2b00      	cmp	r3, #0
 8039e58:	d009      	beq.n	8039e6e <HAL_UART_IRQHandler+0x702>
 8039e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8039e5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8039e62:	2b00      	cmp	r3, #0
 8039e64:	d003      	beq.n	8039e6e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8039e66:	6878      	ldr	r0, [r7, #4]
 8039e68:	f001 ff36 	bl	803bcd8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8039e6c:	e016      	b.n	8039e9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8039e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8039e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8039e76:	2b00      	cmp	r3, #0
 8039e78:	d010      	beq.n	8039e9c <HAL_UART_IRQHandler+0x730>
 8039e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8039e7e:	2b00      	cmp	r3, #0
 8039e80:	da0c      	bge.n	8039e9c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8039e82:	6878      	ldr	r0, [r7, #4]
 8039e84:	f001 ff1e 	bl	803bcc4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8039e88:	e008      	b.n	8039e9c <HAL_UART_IRQHandler+0x730>
      return;
 8039e8a:	bf00      	nop
 8039e8c:	e006      	b.n	8039e9c <HAL_UART_IRQHandler+0x730>
    return;
 8039e8e:	bf00      	nop
 8039e90:	e004      	b.n	8039e9c <HAL_UART_IRQHandler+0x730>
      return;
 8039e92:	bf00      	nop
 8039e94:	e002      	b.n	8039e9c <HAL_UART_IRQHandler+0x730>
      return;
 8039e96:	bf00      	nop
 8039e98:	e000      	b.n	8039e9c <HAL_UART_IRQHandler+0x730>
    return;
 8039e9a:	bf00      	nop
  }
}
 8039e9c:	37e8      	adds	r7, #232	; 0xe8
 8039e9e:	46bd      	mov	sp, r7
 8039ea0:	bd80      	pop	{r7, pc}
 8039ea2:	bf00      	nop
 8039ea4:	effffffe 	.word	0xeffffffe

08039ea8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8039ea8:	b480      	push	{r7}
 8039eaa:	b083      	sub	sp, #12
 8039eac:	af00      	add	r7, sp, #0
 8039eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8039eb0:	bf00      	nop
 8039eb2:	370c      	adds	r7, #12
 8039eb4:	46bd      	mov	sp, r7
 8039eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039eba:	4770      	bx	lr

08039ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8039ebc:	b480      	push	{r7}
 8039ebe:	b083      	sub	sp, #12
 8039ec0:	af00      	add	r7, sp, #0
 8039ec2:	6078      	str	r0, [r7, #4]
 8039ec4:	460b      	mov	r3, r1
 8039ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8039ec8:	bf00      	nop
 8039eca:	370c      	adds	r7, #12
 8039ecc:	46bd      	mov	sp, r7
 8039ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039ed2:	4770      	bx	lr

08039ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8039ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8039ed8:	b092      	sub	sp, #72	; 0x48
 8039eda:	af00      	add	r7, sp, #0
 8039edc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8039ede:	2300      	movs	r3, #0
 8039ee0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8039ee4:	697b      	ldr	r3, [r7, #20]
 8039ee6:	689a      	ldr	r2, [r3, #8]
 8039ee8:	697b      	ldr	r3, [r7, #20]
 8039eea:	691b      	ldr	r3, [r3, #16]
 8039eec:	431a      	orrs	r2, r3
 8039eee:	697b      	ldr	r3, [r7, #20]
 8039ef0:	695b      	ldr	r3, [r3, #20]
 8039ef2:	431a      	orrs	r2, r3
 8039ef4:	697b      	ldr	r3, [r7, #20]
 8039ef6:	69db      	ldr	r3, [r3, #28]
 8039ef8:	4313      	orrs	r3, r2
 8039efa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8039efc:	697b      	ldr	r3, [r7, #20]
 8039efe:	681b      	ldr	r3, [r3, #0]
 8039f00:	681a      	ldr	r2, [r3, #0]
 8039f02:	4bbe      	ldr	r3, [pc, #760]	; (803a1fc <UART_SetConfig+0x328>)
 8039f04:	4013      	ands	r3, r2
 8039f06:	697a      	ldr	r2, [r7, #20]
 8039f08:	6812      	ldr	r2, [r2, #0]
 8039f0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8039f0c:	430b      	orrs	r3, r1
 8039f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8039f10:	697b      	ldr	r3, [r7, #20]
 8039f12:	681b      	ldr	r3, [r3, #0]
 8039f14:	685b      	ldr	r3, [r3, #4]
 8039f16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8039f1a:	697b      	ldr	r3, [r7, #20]
 8039f1c:	68da      	ldr	r2, [r3, #12]
 8039f1e:	697b      	ldr	r3, [r7, #20]
 8039f20:	681b      	ldr	r3, [r3, #0]
 8039f22:	430a      	orrs	r2, r1
 8039f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8039f26:	697b      	ldr	r3, [r7, #20]
 8039f28:	699b      	ldr	r3, [r3, #24]
 8039f2a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8039f2c:	697b      	ldr	r3, [r7, #20]
 8039f2e:	681b      	ldr	r3, [r3, #0]
 8039f30:	4ab3      	ldr	r2, [pc, #716]	; (803a200 <UART_SetConfig+0x32c>)
 8039f32:	4293      	cmp	r3, r2
 8039f34:	d004      	beq.n	8039f40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8039f36:	697b      	ldr	r3, [r7, #20]
 8039f38:	6a1b      	ldr	r3, [r3, #32]
 8039f3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8039f3c:	4313      	orrs	r3, r2
 8039f3e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8039f40:	697b      	ldr	r3, [r7, #20]
 8039f42:	681b      	ldr	r3, [r3, #0]
 8039f44:	689a      	ldr	r2, [r3, #8]
 8039f46:	4baf      	ldr	r3, [pc, #700]	; (803a204 <UART_SetConfig+0x330>)
 8039f48:	4013      	ands	r3, r2
 8039f4a:	697a      	ldr	r2, [r7, #20]
 8039f4c:	6812      	ldr	r2, [r2, #0]
 8039f4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8039f50:	430b      	orrs	r3, r1
 8039f52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8039f54:	697b      	ldr	r3, [r7, #20]
 8039f56:	681b      	ldr	r3, [r3, #0]
 8039f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039f5a:	f023 010f 	bic.w	r1, r3, #15
 8039f5e:	697b      	ldr	r3, [r7, #20]
 8039f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8039f62:	697b      	ldr	r3, [r7, #20]
 8039f64:	681b      	ldr	r3, [r3, #0]
 8039f66:	430a      	orrs	r2, r1
 8039f68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8039f6a:	697b      	ldr	r3, [r7, #20]
 8039f6c:	681b      	ldr	r3, [r3, #0]
 8039f6e:	4aa6      	ldr	r2, [pc, #664]	; (803a208 <UART_SetConfig+0x334>)
 8039f70:	4293      	cmp	r3, r2
 8039f72:	d177      	bne.n	803a064 <UART_SetConfig+0x190>
 8039f74:	4ba5      	ldr	r3, [pc, #660]	; (803a20c <UART_SetConfig+0x338>)
 8039f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8039f78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8039f7c:	2b28      	cmp	r3, #40	; 0x28
 8039f7e:	d86d      	bhi.n	803a05c <UART_SetConfig+0x188>
 8039f80:	a201      	add	r2, pc, #4	; (adr r2, 8039f88 <UART_SetConfig+0xb4>)
 8039f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039f86:	bf00      	nop
 8039f88:	0803a02d 	.word	0x0803a02d
 8039f8c:	0803a05d 	.word	0x0803a05d
 8039f90:	0803a05d 	.word	0x0803a05d
 8039f94:	0803a05d 	.word	0x0803a05d
 8039f98:	0803a05d 	.word	0x0803a05d
 8039f9c:	0803a05d 	.word	0x0803a05d
 8039fa0:	0803a05d 	.word	0x0803a05d
 8039fa4:	0803a05d 	.word	0x0803a05d
 8039fa8:	0803a035 	.word	0x0803a035
 8039fac:	0803a05d 	.word	0x0803a05d
 8039fb0:	0803a05d 	.word	0x0803a05d
 8039fb4:	0803a05d 	.word	0x0803a05d
 8039fb8:	0803a05d 	.word	0x0803a05d
 8039fbc:	0803a05d 	.word	0x0803a05d
 8039fc0:	0803a05d 	.word	0x0803a05d
 8039fc4:	0803a05d 	.word	0x0803a05d
 8039fc8:	0803a03d 	.word	0x0803a03d
 8039fcc:	0803a05d 	.word	0x0803a05d
 8039fd0:	0803a05d 	.word	0x0803a05d
 8039fd4:	0803a05d 	.word	0x0803a05d
 8039fd8:	0803a05d 	.word	0x0803a05d
 8039fdc:	0803a05d 	.word	0x0803a05d
 8039fe0:	0803a05d 	.word	0x0803a05d
 8039fe4:	0803a05d 	.word	0x0803a05d
 8039fe8:	0803a045 	.word	0x0803a045
 8039fec:	0803a05d 	.word	0x0803a05d
 8039ff0:	0803a05d 	.word	0x0803a05d
 8039ff4:	0803a05d 	.word	0x0803a05d
 8039ff8:	0803a05d 	.word	0x0803a05d
 8039ffc:	0803a05d 	.word	0x0803a05d
 803a000:	0803a05d 	.word	0x0803a05d
 803a004:	0803a05d 	.word	0x0803a05d
 803a008:	0803a04d 	.word	0x0803a04d
 803a00c:	0803a05d 	.word	0x0803a05d
 803a010:	0803a05d 	.word	0x0803a05d
 803a014:	0803a05d 	.word	0x0803a05d
 803a018:	0803a05d 	.word	0x0803a05d
 803a01c:	0803a05d 	.word	0x0803a05d
 803a020:	0803a05d 	.word	0x0803a05d
 803a024:	0803a05d 	.word	0x0803a05d
 803a028:	0803a055 	.word	0x0803a055
 803a02c:	2301      	movs	r3, #1
 803a02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a032:	e222      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a034:	2304      	movs	r3, #4
 803a036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a03a:	e21e      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a03c:	2308      	movs	r3, #8
 803a03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a042:	e21a      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a044:	2310      	movs	r3, #16
 803a046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a04a:	e216      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a04c:	2320      	movs	r3, #32
 803a04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a052:	e212      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a054:	2340      	movs	r3, #64	; 0x40
 803a056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a05a:	e20e      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a05c:	2380      	movs	r3, #128	; 0x80
 803a05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a062:	e20a      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a064:	697b      	ldr	r3, [r7, #20]
 803a066:	681b      	ldr	r3, [r3, #0]
 803a068:	4a69      	ldr	r2, [pc, #420]	; (803a210 <UART_SetConfig+0x33c>)
 803a06a:	4293      	cmp	r3, r2
 803a06c:	d130      	bne.n	803a0d0 <UART_SetConfig+0x1fc>
 803a06e:	4b67      	ldr	r3, [pc, #412]	; (803a20c <UART_SetConfig+0x338>)
 803a070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a072:	f003 0307 	and.w	r3, r3, #7
 803a076:	2b05      	cmp	r3, #5
 803a078:	d826      	bhi.n	803a0c8 <UART_SetConfig+0x1f4>
 803a07a:	a201      	add	r2, pc, #4	; (adr r2, 803a080 <UART_SetConfig+0x1ac>)
 803a07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a080:	0803a099 	.word	0x0803a099
 803a084:	0803a0a1 	.word	0x0803a0a1
 803a088:	0803a0a9 	.word	0x0803a0a9
 803a08c:	0803a0b1 	.word	0x0803a0b1
 803a090:	0803a0b9 	.word	0x0803a0b9
 803a094:	0803a0c1 	.word	0x0803a0c1
 803a098:	2300      	movs	r3, #0
 803a09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a09e:	e1ec      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a0a0:	2304      	movs	r3, #4
 803a0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a0a6:	e1e8      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a0a8:	2308      	movs	r3, #8
 803a0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a0ae:	e1e4      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a0b0:	2310      	movs	r3, #16
 803a0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a0b6:	e1e0      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a0b8:	2320      	movs	r3, #32
 803a0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a0be:	e1dc      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a0c0:	2340      	movs	r3, #64	; 0x40
 803a0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a0c6:	e1d8      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a0c8:	2380      	movs	r3, #128	; 0x80
 803a0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a0ce:	e1d4      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a0d0:	697b      	ldr	r3, [r7, #20]
 803a0d2:	681b      	ldr	r3, [r3, #0]
 803a0d4:	4a4f      	ldr	r2, [pc, #316]	; (803a214 <UART_SetConfig+0x340>)
 803a0d6:	4293      	cmp	r3, r2
 803a0d8:	d130      	bne.n	803a13c <UART_SetConfig+0x268>
 803a0da:	4b4c      	ldr	r3, [pc, #304]	; (803a20c <UART_SetConfig+0x338>)
 803a0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a0de:	f003 0307 	and.w	r3, r3, #7
 803a0e2:	2b05      	cmp	r3, #5
 803a0e4:	d826      	bhi.n	803a134 <UART_SetConfig+0x260>
 803a0e6:	a201      	add	r2, pc, #4	; (adr r2, 803a0ec <UART_SetConfig+0x218>)
 803a0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a0ec:	0803a105 	.word	0x0803a105
 803a0f0:	0803a10d 	.word	0x0803a10d
 803a0f4:	0803a115 	.word	0x0803a115
 803a0f8:	0803a11d 	.word	0x0803a11d
 803a0fc:	0803a125 	.word	0x0803a125
 803a100:	0803a12d 	.word	0x0803a12d
 803a104:	2300      	movs	r3, #0
 803a106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a10a:	e1b6      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a10c:	2304      	movs	r3, #4
 803a10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a112:	e1b2      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a114:	2308      	movs	r3, #8
 803a116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a11a:	e1ae      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a11c:	2310      	movs	r3, #16
 803a11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a122:	e1aa      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a124:	2320      	movs	r3, #32
 803a126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a12a:	e1a6      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a12c:	2340      	movs	r3, #64	; 0x40
 803a12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a132:	e1a2      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a134:	2380      	movs	r3, #128	; 0x80
 803a136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a13a:	e19e      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a13c:	697b      	ldr	r3, [r7, #20]
 803a13e:	681b      	ldr	r3, [r3, #0]
 803a140:	4a35      	ldr	r2, [pc, #212]	; (803a218 <UART_SetConfig+0x344>)
 803a142:	4293      	cmp	r3, r2
 803a144:	d130      	bne.n	803a1a8 <UART_SetConfig+0x2d4>
 803a146:	4b31      	ldr	r3, [pc, #196]	; (803a20c <UART_SetConfig+0x338>)
 803a148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a14a:	f003 0307 	and.w	r3, r3, #7
 803a14e:	2b05      	cmp	r3, #5
 803a150:	d826      	bhi.n	803a1a0 <UART_SetConfig+0x2cc>
 803a152:	a201      	add	r2, pc, #4	; (adr r2, 803a158 <UART_SetConfig+0x284>)
 803a154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a158:	0803a171 	.word	0x0803a171
 803a15c:	0803a179 	.word	0x0803a179
 803a160:	0803a181 	.word	0x0803a181
 803a164:	0803a189 	.word	0x0803a189
 803a168:	0803a191 	.word	0x0803a191
 803a16c:	0803a199 	.word	0x0803a199
 803a170:	2300      	movs	r3, #0
 803a172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a176:	e180      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a178:	2304      	movs	r3, #4
 803a17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a17e:	e17c      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a180:	2308      	movs	r3, #8
 803a182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a186:	e178      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a188:	2310      	movs	r3, #16
 803a18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a18e:	e174      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a190:	2320      	movs	r3, #32
 803a192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a196:	e170      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a198:	2340      	movs	r3, #64	; 0x40
 803a19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a19e:	e16c      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a1a0:	2380      	movs	r3, #128	; 0x80
 803a1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a1a6:	e168      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a1a8:	697b      	ldr	r3, [r7, #20]
 803a1aa:	681b      	ldr	r3, [r3, #0]
 803a1ac:	4a1b      	ldr	r2, [pc, #108]	; (803a21c <UART_SetConfig+0x348>)
 803a1ae:	4293      	cmp	r3, r2
 803a1b0:	d142      	bne.n	803a238 <UART_SetConfig+0x364>
 803a1b2:	4b16      	ldr	r3, [pc, #88]	; (803a20c <UART_SetConfig+0x338>)
 803a1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a1b6:	f003 0307 	and.w	r3, r3, #7
 803a1ba:	2b05      	cmp	r3, #5
 803a1bc:	d838      	bhi.n	803a230 <UART_SetConfig+0x35c>
 803a1be:	a201      	add	r2, pc, #4	; (adr r2, 803a1c4 <UART_SetConfig+0x2f0>)
 803a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a1c4:	0803a1dd 	.word	0x0803a1dd
 803a1c8:	0803a1e5 	.word	0x0803a1e5
 803a1cc:	0803a1ed 	.word	0x0803a1ed
 803a1d0:	0803a1f5 	.word	0x0803a1f5
 803a1d4:	0803a221 	.word	0x0803a221
 803a1d8:	0803a229 	.word	0x0803a229
 803a1dc:	2300      	movs	r3, #0
 803a1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a1e2:	e14a      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a1e4:	2304      	movs	r3, #4
 803a1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a1ea:	e146      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a1ec:	2308      	movs	r3, #8
 803a1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a1f2:	e142      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a1f4:	2310      	movs	r3, #16
 803a1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a1fa:	e13e      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a1fc:	cfff69f3 	.word	0xcfff69f3
 803a200:	58000c00 	.word	0x58000c00
 803a204:	11fff4ff 	.word	0x11fff4ff
 803a208:	40011000 	.word	0x40011000
 803a20c:	58024400 	.word	0x58024400
 803a210:	40004400 	.word	0x40004400
 803a214:	40004800 	.word	0x40004800
 803a218:	40004c00 	.word	0x40004c00
 803a21c:	40005000 	.word	0x40005000
 803a220:	2320      	movs	r3, #32
 803a222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a226:	e128      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a228:	2340      	movs	r3, #64	; 0x40
 803a22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a22e:	e124      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a230:	2380      	movs	r3, #128	; 0x80
 803a232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a236:	e120      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a238:	697b      	ldr	r3, [r7, #20]
 803a23a:	681b      	ldr	r3, [r3, #0]
 803a23c:	4acb      	ldr	r2, [pc, #812]	; (803a56c <UART_SetConfig+0x698>)
 803a23e:	4293      	cmp	r3, r2
 803a240:	d176      	bne.n	803a330 <UART_SetConfig+0x45c>
 803a242:	4bcb      	ldr	r3, [pc, #812]	; (803a570 <UART_SetConfig+0x69c>)
 803a244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803a24a:	2b28      	cmp	r3, #40	; 0x28
 803a24c:	d86c      	bhi.n	803a328 <UART_SetConfig+0x454>
 803a24e:	a201      	add	r2, pc, #4	; (adr r2, 803a254 <UART_SetConfig+0x380>)
 803a250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a254:	0803a2f9 	.word	0x0803a2f9
 803a258:	0803a329 	.word	0x0803a329
 803a25c:	0803a329 	.word	0x0803a329
 803a260:	0803a329 	.word	0x0803a329
 803a264:	0803a329 	.word	0x0803a329
 803a268:	0803a329 	.word	0x0803a329
 803a26c:	0803a329 	.word	0x0803a329
 803a270:	0803a329 	.word	0x0803a329
 803a274:	0803a301 	.word	0x0803a301
 803a278:	0803a329 	.word	0x0803a329
 803a27c:	0803a329 	.word	0x0803a329
 803a280:	0803a329 	.word	0x0803a329
 803a284:	0803a329 	.word	0x0803a329
 803a288:	0803a329 	.word	0x0803a329
 803a28c:	0803a329 	.word	0x0803a329
 803a290:	0803a329 	.word	0x0803a329
 803a294:	0803a309 	.word	0x0803a309
 803a298:	0803a329 	.word	0x0803a329
 803a29c:	0803a329 	.word	0x0803a329
 803a2a0:	0803a329 	.word	0x0803a329
 803a2a4:	0803a329 	.word	0x0803a329
 803a2a8:	0803a329 	.word	0x0803a329
 803a2ac:	0803a329 	.word	0x0803a329
 803a2b0:	0803a329 	.word	0x0803a329
 803a2b4:	0803a311 	.word	0x0803a311
 803a2b8:	0803a329 	.word	0x0803a329
 803a2bc:	0803a329 	.word	0x0803a329
 803a2c0:	0803a329 	.word	0x0803a329
 803a2c4:	0803a329 	.word	0x0803a329
 803a2c8:	0803a329 	.word	0x0803a329
 803a2cc:	0803a329 	.word	0x0803a329
 803a2d0:	0803a329 	.word	0x0803a329
 803a2d4:	0803a319 	.word	0x0803a319
 803a2d8:	0803a329 	.word	0x0803a329
 803a2dc:	0803a329 	.word	0x0803a329
 803a2e0:	0803a329 	.word	0x0803a329
 803a2e4:	0803a329 	.word	0x0803a329
 803a2e8:	0803a329 	.word	0x0803a329
 803a2ec:	0803a329 	.word	0x0803a329
 803a2f0:	0803a329 	.word	0x0803a329
 803a2f4:	0803a321 	.word	0x0803a321
 803a2f8:	2301      	movs	r3, #1
 803a2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a2fe:	e0bc      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a300:	2304      	movs	r3, #4
 803a302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a306:	e0b8      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a308:	2308      	movs	r3, #8
 803a30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a30e:	e0b4      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a310:	2310      	movs	r3, #16
 803a312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a316:	e0b0      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a318:	2320      	movs	r3, #32
 803a31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a31e:	e0ac      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a320:	2340      	movs	r3, #64	; 0x40
 803a322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a326:	e0a8      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a328:	2380      	movs	r3, #128	; 0x80
 803a32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a32e:	e0a4      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a330:	697b      	ldr	r3, [r7, #20]
 803a332:	681b      	ldr	r3, [r3, #0]
 803a334:	4a8f      	ldr	r2, [pc, #572]	; (803a574 <UART_SetConfig+0x6a0>)
 803a336:	4293      	cmp	r3, r2
 803a338:	d130      	bne.n	803a39c <UART_SetConfig+0x4c8>
 803a33a:	4b8d      	ldr	r3, [pc, #564]	; (803a570 <UART_SetConfig+0x69c>)
 803a33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a33e:	f003 0307 	and.w	r3, r3, #7
 803a342:	2b05      	cmp	r3, #5
 803a344:	d826      	bhi.n	803a394 <UART_SetConfig+0x4c0>
 803a346:	a201      	add	r2, pc, #4	; (adr r2, 803a34c <UART_SetConfig+0x478>)
 803a348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a34c:	0803a365 	.word	0x0803a365
 803a350:	0803a36d 	.word	0x0803a36d
 803a354:	0803a375 	.word	0x0803a375
 803a358:	0803a37d 	.word	0x0803a37d
 803a35c:	0803a385 	.word	0x0803a385
 803a360:	0803a38d 	.word	0x0803a38d
 803a364:	2300      	movs	r3, #0
 803a366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a36a:	e086      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a36c:	2304      	movs	r3, #4
 803a36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a372:	e082      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a374:	2308      	movs	r3, #8
 803a376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a37a:	e07e      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a37c:	2310      	movs	r3, #16
 803a37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a382:	e07a      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a384:	2320      	movs	r3, #32
 803a386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a38a:	e076      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a38c:	2340      	movs	r3, #64	; 0x40
 803a38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a392:	e072      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a394:	2380      	movs	r3, #128	; 0x80
 803a396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a39a:	e06e      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a39c:	697b      	ldr	r3, [r7, #20]
 803a39e:	681b      	ldr	r3, [r3, #0]
 803a3a0:	4a75      	ldr	r2, [pc, #468]	; (803a578 <UART_SetConfig+0x6a4>)
 803a3a2:	4293      	cmp	r3, r2
 803a3a4:	d130      	bne.n	803a408 <UART_SetConfig+0x534>
 803a3a6:	4b72      	ldr	r3, [pc, #456]	; (803a570 <UART_SetConfig+0x69c>)
 803a3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803a3aa:	f003 0307 	and.w	r3, r3, #7
 803a3ae:	2b05      	cmp	r3, #5
 803a3b0:	d826      	bhi.n	803a400 <UART_SetConfig+0x52c>
 803a3b2:	a201      	add	r2, pc, #4	; (adr r2, 803a3b8 <UART_SetConfig+0x4e4>)
 803a3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a3b8:	0803a3d1 	.word	0x0803a3d1
 803a3bc:	0803a3d9 	.word	0x0803a3d9
 803a3c0:	0803a3e1 	.word	0x0803a3e1
 803a3c4:	0803a3e9 	.word	0x0803a3e9
 803a3c8:	0803a3f1 	.word	0x0803a3f1
 803a3cc:	0803a3f9 	.word	0x0803a3f9
 803a3d0:	2300      	movs	r3, #0
 803a3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a3d6:	e050      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a3d8:	2304      	movs	r3, #4
 803a3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a3de:	e04c      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a3e0:	2308      	movs	r3, #8
 803a3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a3e6:	e048      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a3e8:	2310      	movs	r3, #16
 803a3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a3ee:	e044      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a3f0:	2320      	movs	r3, #32
 803a3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a3f6:	e040      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a3f8:	2340      	movs	r3, #64	; 0x40
 803a3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a3fe:	e03c      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a400:	2380      	movs	r3, #128	; 0x80
 803a402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a406:	e038      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a408:	697b      	ldr	r3, [r7, #20]
 803a40a:	681b      	ldr	r3, [r3, #0]
 803a40c:	4a5b      	ldr	r2, [pc, #364]	; (803a57c <UART_SetConfig+0x6a8>)
 803a40e:	4293      	cmp	r3, r2
 803a410:	d130      	bne.n	803a474 <UART_SetConfig+0x5a0>
 803a412:	4b57      	ldr	r3, [pc, #348]	; (803a570 <UART_SetConfig+0x69c>)
 803a414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a416:	f003 0307 	and.w	r3, r3, #7
 803a41a:	2b05      	cmp	r3, #5
 803a41c:	d826      	bhi.n	803a46c <UART_SetConfig+0x598>
 803a41e:	a201      	add	r2, pc, #4	; (adr r2, 803a424 <UART_SetConfig+0x550>)
 803a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a424:	0803a43d 	.word	0x0803a43d
 803a428:	0803a445 	.word	0x0803a445
 803a42c:	0803a44d 	.word	0x0803a44d
 803a430:	0803a455 	.word	0x0803a455
 803a434:	0803a45d 	.word	0x0803a45d
 803a438:	0803a465 	.word	0x0803a465
 803a43c:	2302      	movs	r3, #2
 803a43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a442:	e01a      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a444:	2304      	movs	r3, #4
 803a446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a44a:	e016      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a44c:	2308      	movs	r3, #8
 803a44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a452:	e012      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a454:	2310      	movs	r3, #16
 803a456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a45a:	e00e      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a45c:	2320      	movs	r3, #32
 803a45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a462:	e00a      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a464:	2340      	movs	r3, #64	; 0x40
 803a466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a46a:	e006      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a46c:	2380      	movs	r3, #128	; 0x80
 803a46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803a472:	e002      	b.n	803a47a <UART_SetConfig+0x5a6>
 803a474:	2380      	movs	r3, #128	; 0x80
 803a476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 803a47a:	697b      	ldr	r3, [r7, #20]
 803a47c:	681b      	ldr	r3, [r3, #0]
 803a47e:	4a3f      	ldr	r2, [pc, #252]	; (803a57c <UART_SetConfig+0x6a8>)
 803a480:	4293      	cmp	r3, r2
 803a482:	f040 80f8 	bne.w	803a676 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 803a486:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 803a48a:	2b20      	cmp	r3, #32
 803a48c:	dc46      	bgt.n	803a51c <UART_SetConfig+0x648>
 803a48e:	2b02      	cmp	r3, #2
 803a490:	f2c0 8082 	blt.w	803a598 <UART_SetConfig+0x6c4>
 803a494:	3b02      	subs	r3, #2
 803a496:	2b1e      	cmp	r3, #30
 803a498:	d87e      	bhi.n	803a598 <UART_SetConfig+0x6c4>
 803a49a:	a201      	add	r2, pc, #4	; (adr r2, 803a4a0 <UART_SetConfig+0x5cc>)
 803a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a4a0:	0803a523 	.word	0x0803a523
 803a4a4:	0803a599 	.word	0x0803a599
 803a4a8:	0803a52b 	.word	0x0803a52b
 803a4ac:	0803a599 	.word	0x0803a599
 803a4b0:	0803a599 	.word	0x0803a599
 803a4b4:	0803a599 	.word	0x0803a599
 803a4b8:	0803a53b 	.word	0x0803a53b
 803a4bc:	0803a599 	.word	0x0803a599
 803a4c0:	0803a599 	.word	0x0803a599
 803a4c4:	0803a599 	.word	0x0803a599
 803a4c8:	0803a599 	.word	0x0803a599
 803a4cc:	0803a599 	.word	0x0803a599
 803a4d0:	0803a599 	.word	0x0803a599
 803a4d4:	0803a599 	.word	0x0803a599
 803a4d8:	0803a54b 	.word	0x0803a54b
 803a4dc:	0803a599 	.word	0x0803a599
 803a4e0:	0803a599 	.word	0x0803a599
 803a4e4:	0803a599 	.word	0x0803a599
 803a4e8:	0803a599 	.word	0x0803a599
 803a4ec:	0803a599 	.word	0x0803a599
 803a4f0:	0803a599 	.word	0x0803a599
 803a4f4:	0803a599 	.word	0x0803a599
 803a4f8:	0803a599 	.word	0x0803a599
 803a4fc:	0803a599 	.word	0x0803a599
 803a500:	0803a599 	.word	0x0803a599
 803a504:	0803a599 	.word	0x0803a599
 803a508:	0803a599 	.word	0x0803a599
 803a50c:	0803a599 	.word	0x0803a599
 803a510:	0803a599 	.word	0x0803a599
 803a514:	0803a599 	.word	0x0803a599
 803a518:	0803a58b 	.word	0x0803a58b
 803a51c:	2b40      	cmp	r3, #64	; 0x40
 803a51e:	d037      	beq.n	803a590 <UART_SetConfig+0x6bc>
 803a520:	e03a      	b.n	803a598 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 803a522:	f7fc fcbf 	bl	8036ea4 <HAL_RCCEx_GetD3PCLK1Freq>
 803a526:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 803a528:	e03c      	b.n	803a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 803a52a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803a52e:	4618      	mov	r0, r3
 803a530:	f7fc fcce 	bl	8036ed0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 803a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a538:	e034      	b.n	803a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 803a53a:	f107 0318 	add.w	r3, r7, #24
 803a53e:	4618      	mov	r0, r3
 803a540:	f7fc fe1a 	bl	8037178 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 803a544:	69fb      	ldr	r3, [r7, #28]
 803a546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a548:	e02c      	b.n	803a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 803a54a:	4b09      	ldr	r3, [pc, #36]	; (803a570 <UART_SetConfig+0x69c>)
 803a54c:	681b      	ldr	r3, [r3, #0]
 803a54e:	f003 0320 	and.w	r3, r3, #32
 803a552:	2b00      	cmp	r3, #0
 803a554:	d016      	beq.n	803a584 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 803a556:	4b06      	ldr	r3, [pc, #24]	; (803a570 <UART_SetConfig+0x69c>)
 803a558:	681b      	ldr	r3, [r3, #0]
 803a55a:	08db      	lsrs	r3, r3, #3
 803a55c:	f003 0303 	and.w	r3, r3, #3
 803a560:	4a07      	ldr	r2, [pc, #28]	; (803a580 <UART_SetConfig+0x6ac>)
 803a562:	fa22 f303 	lsr.w	r3, r2, r3
 803a566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 803a568:	e01c      	b.n	803a5a4 <UART_SetConfig+0x6d0>
 803a56a:	bf00      	nop
 803a56c:	40011400 	.word	0x40011400
 803a570:	58024400 	.word	0x58024400
 803a574:	40007800 	.word	0x40007800
 803a578:	40007c00 	.word	0x40007c00
 803a57c:	58000c00 	.word	0x58000c00
 803a580:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 803a584:	4b9d      	ldr	r3, [pc, #628]	; (803a7fc <UART_SetConfig+0x928>)
 803a586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a588:	e00c      	b.n	803a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 803a58a:	4b9d      	ldr	r3, [pc, #628]	; (803a800 <UART_SetConfig+0x92c>)
 803a58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a58e:	e009      	b.n	803a5a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 803a590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 803a594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a596:	e005      	b.n	803a5a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 803a598:	2300      	movs	r3, #0
 803a59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 803a59c:	2301      	movs	r3, #1
 803a59e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 803a5a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 803a5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803a5a6:	2b00      	cmp	r3, #0
 803a5a8:	f000 81de 	beq.w	803a968 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 803a5ac:	697b      	ldr	r3, [r7, #20]
 803a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a5b0:	4a94      	ldr	r2, [pc, #592]	; (803a804 <UART_SetConfig+0x930>)
 803a5b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 803a5b6:	461a      	mov	r2, r3
 803a5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803a5ba:	fbb3 f3f2 	udiv	r3, r3, r2
 803a5be:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 803a5c0:	697b      	ldr	r3, [r7, #20]
 803a5c2:	685a      	ldr	r2, [r3, #4]
 803a5c4:	4613      	mov	r3, r2
 803a5c6:	005b      	lsls	r3, r3, #1
 803a5c8:	4413      	add	r3, r2
 803a5ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803a5cc:	429a      	cmp	r2, r3
 803a5ce:	d305      	bcc.n	803a5dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 803a5d0:	697b      	ldr	r3, [r7, #20]
 803a5d2:	685b      	ldr	r3, [r3, #4]
 803a5d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 803a5d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803a5d8:	429a      	cmp	r2, r3
 803a5da:	d903      	bls.n	803a5e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 803a5dc:	2301      	movs	r3, #1
 803a5de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 803a5e2:	e1c1      	b.n	803a968 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 803a5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803a5e6:	2200      	movs	r2, #0
 803a5e8:	60bb      	str	r3, [r7, #8]
 803a5ea:	60fa      	str	r2, [r7, #12]
 803a5ec:	697b      	ldr	r3, [r7, #20]
 803a5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a5f0:	4a84      	ldr	r2, [pc, #528]	; (803a804 <UART_SetConfig+0x930>)
 803a5f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 803a5f6:	b29b      	uxth	r3, r3
 803a5f8:	2200      	movs	r2, #0
 803a5fa:	603b      	str	r3, [r7, #0]
 803a5fc:	607a      	str	r2, [r7, #4]
 803a5fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 803a602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 803a606:	f7e5 febb 	bl	8020380 <__aeabi_uldivmod>
 803a60a:	4602      	mov	r2, r0
 803a60c:	460b      	mov	r3, r1
 803a60e:	4610      	mov	r0, r2
 803a610:	4619      	mov	r1, r3
 803a612:	f04f 0200 	mov.w	r2, #0
 803a616:	f04f 0300 	mov.w	r3, #0
 803a61a:	020b      	lsls	r3, r1, #8
 803a61c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 803a620:	0202      	lsls	r2, r0, #8
 803a622:	6979      	ldr	r1, [r7, #20]
 803a624:	6849      	ldr	r1, [r1, #4]
 803a626:	0849      	lsrs	r1, r1, #1
 803a628:	2000      	movs	r0, #0
 803a62a:	460c      	mov	r4, r1
 803a62c:	4605      	mov	r5, r0
 803a62e:	eb12 0804 	adds.w	r8, r2, r4
 803a632:	eb43 0905 	adc.w	r9, r3, r5
 803a636:	697b      	ldr	r3, [r7, #20]
 803a638:	685b      	ldr	r3, [r3, #4]
 803a63a:	2200      	movs	r2, #0
 803a63c:	469a      	mov	sl, r3
 803a63e:	4693      	mov	fp, r2
 803a640:	4652      	mov	r2, sl
 803a642:	465b      	mov	r3, fp
 803a644:	4640      	mov	r0, r8
 803a646:	4649      	mov	r1, r9
 803a648:	f7e5 fe9a 	bl	8020380 <__aeabi_uldivmod>
 803a64c:	4602      	mov	r2, r0
 803a64e:	460b      	mov	r3, r1
 803a650:	4613      	mov	r3, r2
 803a652:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 803a654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803a65a:	d308      	bcc.n	803a66e <UART_SetConfig+0x79a>
 803a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a65e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803a662:	d204      	bcs.n	803a66e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 803a664:	697b      	ldr	r3, [r7, #20]
 803a666:	681b      	ldr	r3, [r3, #0]
 803a668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803a66a:	60da      	str	r2, [r3, #12]
 803a66c:	e17c      	b.n	803a968 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 803a66e:	2301      	movs	r3, #1
 803a670:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 803a674:	e178      	b.n	803a968 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 803a676:	697b      	ldr	r3, [r7, #20]
 803a678:	69db      	ldr	r3, [r3, #28]
 803a67a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803a67e:	f040 80c5 	bne.w	803a80c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 803a682:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 803a686:	2b20      	cmp	r3, #32
 803a688:	dc48      	bgt.n	803a71c <UART_SetConfig+0x848>
 803a68a:	2b00      	cmp	r3, #0
 803a68c:	db7b      	blt.n	803a786 <UART_SetConfig+0x8b2>
 803a68e:	2b20      	cmp	r3, #32
 803a690:	d879      	bhi.n	803a786 <UART_SetConfig+0x8b2>
 803a692:	a201      	add	r2, pc, #4	; (adr r2, 803a698 <UART_SetConfig+0x7c4>)
 803a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a698:	0803a723 	.word	0x0803a723
 803a69c:	0803a72b 	.word	0x0803a72b
 803a6a0:	0803a787 	.word	0x0803a787
 803a6a4:	0803a787 	.word	0x0803a787
 803a6a8:	0803a733 	.word	0x0803a733
 803a6ac:	0803a787 	.word	0x0803a787
 803a6b0:	0803a787 	.word	0x0803a787
 803a6b4:	0803a787 	.word	0x0803a787
 803a6b8:	0803a743 	.word	0x0803a743
 803a6bc:	0803a787 	.word	0x0803a787
 803a6c0:	0803a787 	.word	0x0803a787
 803a6c4:	0803a787 	.word	0x0803a787
 803a6c8:	0803a787 	.word	0x0803a787
 803a6cc:	0803a787 	.word	0x0803a787
 803a6d0:	0803a787 	.word	0x0803a787
 803a6d4:	0803a787 	.word	0x0803a787
 803a6d8:	0803a753 	.word	0x0803a753
 803a6dc:	0803a787 	.word	0x0803a787
 803a6e0:	0803a787 	.word	0x0803a787
 803a6e4:	0803a787 	.word	0x0803a787
 803a6e8:	0803a787 	.word	0x0803a787
 803a6ec:	0803a787 	.word	0x0803a787
 803a6f0:	0803a787 	.word	0x0803a787
 803a6f4:	0803a787 	.word	0x0803a787
 803a6f8:	0803a787 	.word	0x0803a787
 803a6fc:	0803a787 	.word	0x0803a787
 803a700:	0803a787 	.word	0x0803a787
 803a704:	0803a787 	.word	0x0803a787
 803a708:	0803a787 	.word	0x0803a787
 803a70c:	0803a787 	.word	0x0803a787
 803a710:	0803a787 	.word	0x0803a787
 803a714:	0803a787 	.word	0x0803a787
 803a718:	0803a779 	.word	0x0803a779
 803a71c:	2b40      	cmp	r3, #64	; 0x40
 803a71e:	d02e      	beq.n	803a77e <UART_SetConfig+0x8aa>
 803a720:	e031      	b.n	803a786 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 803a722:	f7fb fc4d 	bl	8035fc0 <HAL_RCC_GetPCLK1Freq>
 803a726:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 803a728:	e033      	b.n	803a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 803a72a:	f7fb fc5f 	bl	8035fec <HAL_RCC_GetPCLK2Freq>
 803a72e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 803a730:	e02f      	b.n	803a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 803a732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803a736:	4618      	mov	r0, r3
 803a738:	f7fc fbca 	bl	8036ed0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 803a73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a740:	e027      	b.n	803a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 803a742:	f107 0318 	add.w	r3, r7, #24
 803a746:	4618      	mov	r0, r3
 803a748:	f7fc fd16 	bl	8037178 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 803a74c:	69fb      	ldr	r3, [r7, #28]
 803a74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a750:	e01f      	b.n	803a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 803a752:	4b2d      	ldr	r3, [pc, #180]	; (803a808 <UART_SetConfig+0x934>)
 803a754:	681b      	ldr	r3, [r3, #0]
 803a756:	f003 0320 	and.w	r3, r3, #32
 803a75a:	2b00      	cmp	r3, #0
 803a75c:	d009      	beq.n	803a772 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 803a75e:	4b2a      	ldr	r3, [pc, #168]	; (803a808 <UART_SetConfig+0x934>)
 803a760:	681b      	ldr	r3, [r3, #0]
 803a762:	08db      	lsrs	r3, r3, #3
 803a764:	f003 0303 	and.w	r3, r3, #3
 803a768:	4a24      	ldr	r2, [pc, #144]	; (803a7fc <UART_SetConfig+0x928>)
 803a76a:	fa22 f303 	lsr.w	r3, r2, r3
 803a76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 803a770:	e00f      	b.n	803a792 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 803a772:	4b22      	ldr	r3, [pc, #136]	; (803a7fc <UART_SetConfig+0x928>)
 803a774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a776:	e00c      	b.n	803a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 803a778:	4b21      	ldr	r3, [pc, #132]	; (803a800 <UART_SetConfig+0x92c>)
 803a77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a77c:	e009      	b.n	803a792 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 803a77e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 803a782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a784:	e005      	b.n	803a792 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 803a786:	2300      	movs	r3, #0
 803a788:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 803a78a:	2301      	movs	r3, #1
 803a78c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 803a790:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 803a792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803a794:	2b00      	cmp	r3, #0
 803a796:	f000 80e7 	beq.w	803a968 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 803a79a:	697b      	ldr	r3, [r7, #20]
 803a79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a79e:	4a19      	ldr	r2, [pc, #100]	; (803a804 <UART_SetConfig+0x930>)
 803a7a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 803a7a4:	461a      	mov	r2, r3
 803a7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803a7a8:	fbb3 f3f2 	udiv	r3, r3, r2
 803a7ac:	005a      	lsls	r2, r3, #1
 803a7ae:	697b      	ldr	r3, [r7, #20]
 803a7b0:	685b      	ldr	r3, [r3, #4]
 803a7b2:	085b      	lsrs	r3, r3, #1
 803a7b4:	441a      	add	r2, r3
 803a7b6:	697b      	ldr	r3, [r7, #20]
 803a7b8:	685b      	ldr	r3, [r3, #4]
 803a7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 803a7be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 803a7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a7c2:	2b0f      	cmp	r3, #15
 803a7c4:	d916      	bls.n	803a7f4 <UART_SetConfig+0x920>
 803a7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a7c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803a7cc:	d212      	bcs.n	803a7f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 803a7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a7d0:	b29b      	uxth	r3, r3
 803a7d2:	f023 030f 	bic.w	r3, r3, #15
 803a7d6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 803a7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a7da:	085b      	lsrs	r3, r3, #1
 803a7dc:	b29b      	uxth	r3, r3
 803a7de:	f003 0307 	and.w	r3, r3, #7
 803a7e2:	b29a      	uxth	r2, r3
 803a7e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 803a7e6:	4313      	orrs	r3, r2
 803a7e8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 803a7ea:	697b      	ldr	r3, [r7, #20]
 803a7ec:	681b      	ldr	r3, [r3, #0]
 803a7ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 803a7f0:	60da      	str	r2, [r3, #12]
 803a7f2:	e0b9      	b.n	803a968 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 803a7f4:	2301      	movs	r3, #1
 803a7f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 803a7fa:	e0b5      	b.n	803a968 <UART_SetConfig+0xa94>
 803a7fc:	03d09000 	.word	0x03d09000
 803a800:	003d0900 	.word	0x003d0900
 803a804:	0805c62c 	.word	0x0805c62c
 803a808:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 803a80c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 803a810:	2b20      	cmp	r3, #32
 803a812:	dc49      	bgt.n	803a8a8 <UART_SetConfig+0x9d4>
 803a814:	2b00      	cmp	r3, #0
 803a816:	db7c      	blt.n	803a912 <UART_SetConfig+0xa3e>
 803a818:	2b20      	cmp	r3, #32
 803a81a:	d87a      	bhi.n	803a912 <UART_SetConfig+0xa3e>
 803a81c:	a201      	add	r2, pc, #4	; (adr r2, 803a824 <UART_SetConfig+0x950>)
 803a81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a822:	bf00      	nop
 803a824:	0803a8af 	.word	0x0803a8af
 803a828:	0803a8b7 	.word	0x0803a8b7
 803a82c:	0803a913 	.word	0x0803a913
 803a830:	0803a913 	.word	0x0803a913
 803a834:	0803a8bf 	.word	0x0803a8bf
 803a838:	0803a913 	.word	0x0803a913
 803a83c:	0803a913 	.word	0x0803a913
 803a840:	0803a913 	.word	0x0803a913
 803a844:	0803a8cf 	.word	0x0803a8cf
 803a848:	0803a913 	.word	0x0803a913
 803a84c:	0803a913 	.word	0x0803a913
 803a850:	0803a913 	.word	0x0803a913
 803a854:	0803a913 	.word	0x0803a913
 803a858:	0803a913 	.word	0x0803a913
 803a85c:	0803a913 	.word	0x0803a913
 803a860:	0803a913 	.word	0x0803a913
 803a864:	0803a8df 	.word	0x0803a8df
 803a868:	0803a913 	.word	0x0803a913
 803a86c:	0803a913 	.word	0x0803a913
 803a870:	0803a913 	.word	0x0803a913
 803a874:	0803a913 	.word	0x0803a913
 803a878:	0803a913 	.word	0x0803a913
 803a87c:	0803a913 	.word	0x0803a913
 803a880:	0803a913 	.word	0x0803a913
 803a884:	0803a913 	.word	0x0803a913
 803a888:	0803a913 	.word	0x0803a913
 803a88c:	0803a913 	.word	0x0803a913
 803a890:	0803a913 	.word	0x0803a913
 803a894:	0803a913 	.word	0x0803a913
 803a898:	0803a913 	.word	0x0803a913
 803a89c:	0803a913 	.word	0x0803a913
 803a8a0:	0803a913 	.word	0x0803a913
 803a8a4:	0803a905 	.word	0x0803a905
 803a8a8:	2b40      	cmp	r3, #64	; 0x40
 803a8aa:	d02e      	beq.n	803a90a <UART_SetConfig+0xa36>
 803a8ac:	e031      	b.n	803a912 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 803a8ae:	f7fb fb87 	bl	8035fc0 <HAL_RCC_GetPCLK1Freq>
 803a8b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 803a8b4:	e033      	b.n	803a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 803a8b6:	f7fb fb99 	bl	8035fec <HAL_RCC_GetPCLK2Freq>
 803a8ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 803a8bc:	e02f      	b.n	803a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 803a8be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803a8c2:	4618      	mov	r0, r3
 803a8c4:	f7fc fb04 	bl	8036ed0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 803a8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a8cc:	e027      	b.n	803a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 803a8ce:	f107 0318 	add.w	r3, r7, #24
 803a8d2:	4618      	mov	r0, r3
 803a8d4:	f7fc fc50 	bl	8037178 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 803a8d8:	69fb      	ldr	r3, [r7, #28]
 803a8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a8dc:	e01f      	b.n	803a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 803a8de:	4b2d      	ldr	r3, [pc, #180]	; (803a994 <UART_SetConfig+0xac0>)
 803a8e0:	681b      	ldr	r3, [r3, #0]
 803a8e2:	f003 0320 	and.w	r3, r3, #32
 803a8e6:	2b00      	cmp	r3, #0
 803a8e8:	d009      	beq.n	803a8fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 803a8ea:	4b2a      	ldr	r3, [pc, #168]	; (803a994 <UART_SetConfig+0xac0>)
 803a8ec:	681b      	ldr	r3, [r3, #0]
 803a8ee:	08db      	lsrs	r3, r3, #3
 803a8f0:	f003 0303 	and.w	r3, r3, #3
 803a8f4:	4a28      	ldr	r2, [pc, #160]	; (803a998 <UART_SetConfig+0xac4>)
 803a8f6:	fa22 f303 	lsr.w	r3, r2, r3
 803a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 803a8fc:	e00f      	b.n	803a91e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 803a8fe:	4b26      	ldr	r3, [pc, #152]	; (803a998 <UART_SetConfig+0xac4>)
 803a900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a902:	e00c      	b.n	803a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 803a904:	4b25      	ldr	r3, [pc, #148]	; (803a99c <UART_SetConfig+0xac8>)
 803a906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a908:	e009      	b.n	803a91e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 803a90a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 803a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803a910:	e005      	b.n	803a91e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 803a912:	2300      	movs	r3, #0
 803a914:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 803a916:	2301      	movs	r3, #1
 803a918:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 803a91c:	bf00      	nop
    }

    if (pclk != 0U)
 803a91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803a920:	2b00      	cmp	r3, #0
 803a922:	d021      	beq.n	803a968 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 803a924:	697b      	ldr	r3, [r7, #20]
 803a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a928:	4a1d      	ldr	r2, [pc, #116]	; (803a9a0 <UART_SetConfig+0xacc>)
 803a92a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 803a92e:	461a      	mov	r2, r3
 803a930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803a932:	fbb3 f2f2 	udiv	r2, r3, r2
 803a936:	697b      	ldr	r3, [r7, #20]
 803a938:	685b      	ldr	r3, [r3, #4]
 803a93a:	085b      	lsrs	r3, r3, #1
 803a93c:	441a      	add	r2, r3
 803a93e:	697b      	ldr	r3, [r7, #20]
 803a940:	685b      	ldr	r3, [r3, #4]
 803a942:	fbb2 f3f3 	udiv	r3, r2, r3
 803a946:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 803a948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a94a:	2b0f      	cmp	r3, #15
 803a94c:	d909      	bls.n	803a962 <UART_SetConfig+0xa8e>
 803a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803a954:	d205      	bcs.n	803a962 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 803a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a958:	b29a      	uxth	r2, r3
 803a95a:	697b      	ldr	r3, [r7, #20]
 803a95c:	681b      	ldr	r3, [r3, #0]
 803a95e:	60da      	str	r2, [r3, #12]
 803a960:	e002      	b.n	803a968 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 803a962:	2301      	movs	r3, #1
 803a964:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 803a968:	697b      	ldr	r3, [r7, #20]
 803a96a:	2201      	movs	r2, #1
 803a96c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 803a970:	697b      	ldr	r3, [r7, #20]
 803a972:	2201      	movs	r2, #1
 803a974:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 803a978:	697b      	ldr	r3, [r7, #20]
 803a97a:	2200      	movs	r2, #0
 803a97c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 803a97e:	697b      	ldr	r3, [r7, #20]
 803a980:	2200      	movs	r2, #0
 803a982:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 803a984:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 803a988:	4618      	mov	r0, r3
 803a98a:	3748      	adds	r7, #72	; 0x48
 803a98c:	46bd      	mov	sp, r7
 803a98e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 803a992:	bf00      	nop
 803a994:	58024400 	.word	0x58024400
 803a998:	03d09000 	.word	0x03d09000
 803a99c:	003d0900 	.word	0x003d0900
 803a9a0:	0805c62c 	.word	0x0805c62c

0803a9a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 803a9a4:	b480      	push	{r7}
 803a9a6:	b083      	sub	sp, #12
 803a9a8:	af00      	add	r7, sp, #0
 803a9aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 803a9ac:	687b      	ldr	r3, [r7, #4]
 803a9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803a9b0:	f003 0301 	and.w	r3, r3, #1
 803a9b4:	2b00      	cmp	r3, #0
 803a9b6:	d00a      	beq.n	803a9ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 803a9b8:	687b      	ldr	r3, [r7, #4]
 803a9ba:	681b      	ldr	r3, [r3, #0]
 803a9bc:	685b      	ldr	r3, [r3, #4]
 803a9be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 803a9c2:	687b      	ldr	r3, [r7, #4]
 803a9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803a9c6:	687b      	ldr	r3, [r7, #4]
 803a9c8:	681b      	ldr	r3, [r3, #0]
 803a9ca:	430a      	orrs	r2, r1
 803a9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 803a9ce:	687b      	ldr	r3, [r7, #4]
 803a9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803a9d2:	f003 0302 	and.w	r3, r3, #2
 803a9d6:	2b00      	cmp	r3, #0
 803a9d8:	d00a      	beq.n	803a9f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 803a9da:	687b      	ldr	r3, [r7, #4]
 803a9dc:	681b      	ldr	r3, [r3, #0]
 803a9de:	685b      	ldr	r3, [r3, #4]
 803a9e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 803a9e4:	687b      	ldr	r3, [r7, #4]
 803a9e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803a9e8:	687b      	ldr	r3, [r7, #4]
 803a9ea:	681b      	ldr	r3, [r3, #0]
 803a9ec:	430a      	orrs	r2, r1
 803a9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 803a9f0:	687b      	ldr	r3, [r7, #4]
 803a9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803a9f4:	f003 0304 	and.w	r3, r3, #4
 803a9f8:	2b00      	cmp	r3, #0
 803a9fa:	d00a      	beq.n	803aa12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 803a9fc:	687b      	ldr	r3, [r7, #4]
 803a9fe:	681b      	ldr	r3, [r3, #0]
 803aa00:	685b      	ldr	r3, [r3, #4]
 803aa02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 803aa06:	687b      	ldr	r3, [r7, #4]
 803aa08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803aa0a:	687b      	ldr	r3, [r7, #4]
 803aa0c:	681b      	ldr	r3, [r3, #0]
 803aa0e:	430a      	orrs	r2, r1
 803aa10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 803aa12:	687b      	ldr	r3, [r7, #4]
 803aa14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803aa16:	f003 0308 	and.w	r3, r3, #8
 803aa1a:	2b00      	cmp	r3, #0
 803aa1c:	d00a      	beq.n	803aa34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 803aa1e:	687b      	ldr	r3, [r7, #4]
 803aa20:	681b      	ldr	r3, [r3, #0]
 803aa22:	685b      	ldr	r3, [r3, #4]
 803aa24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 803aa28:	687b      	ldr	r3, [r7, #4]
 803aa2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 803aa2c:	687b      	ldr	r3, [r7, #4]
 803aa2e:	681b      	ldr	r3, [r3, #0]
 803aa30:	430a      	orrs	r2, r1
 803aa32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 803aa34:	687b      	ldr	r3, [r7, #4]
 803aa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803aa38:	f003 0310 	and.w	r3, r3, #16
 803aa3c:	2b00      	cmp	r3, #0
 803aa3e:	d00a      	beq.n	803aa56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 803aa40:	687b      	ldr	r3, [r7, #4]
 803aa42:	681b      	ldr	r3, [r3, #0]
 803aa44:	689b      	ldr	r3, [r3, #8]
 803aa46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 803aa4a:	687b      	ldr	r3, [r7, #4]
 803aa4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 803aa4e:	687b      	ldr	r3, [r7, #4]
 803aa50:	681b      	ldr	r3, [r3, #0]
 803aa52:	430a      	orrs	r2, r1
 803aa54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 803aa56:	687b      	ldr	r3, [r7, #4]
 803aa58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803aa5a:	f003 0320 	and.w	r3, r3, #32
 803aa5e:	2b00      	cmp	r3, #0
 803aa60:	d00a      	beq.n	803aa78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 803aa62:	687b      	ldr	r3, [r7, #4]
 803aa64:	681b      	ldr	r3, [r3, #0]
 803aa66:	689b      	ldr	r3, [r3, #8]
 803aa68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 803aa6c:	687b      	ldr	r3, [r7, #4]
 803aa6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 803aa70:	687b      	ldr	r3, [r7, #4]
 803aa72:	681b      	ldr	r3, [r3, #0]
 803aa74:	430a      	orrs	r2, r1
 803aa76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 803aa78:	687b      	ldr	r3, [r7, #4]
 803aa7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803aa7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803aa80:	2b00      	cmp	r3, #0
 803aa82:	d01a      	beq.n	803aaba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 803aa84:	687b      	ldr	r3, [r7, #4]
 803aa86:	681b      	ldr	r3, [r3, #0]
 803aa88:	685b      	ldr	r3, [r3, #4]
 803aa8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 803aa8e:	687b      	ldr	r3, [r7, #4]
 803aa90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803aa92:	687b      	ldr	r3, [r7, #4]
 803aa94:	681b      	ldr	r3, [r3, #0]
 803aa96:	430a      	orrs	r2, r1
 803aa98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 803aa9a:	687b      	ldr	r3, [r7, #4]
 803aa9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803aa9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803aaa2:	d10a      	bne.n	803aaba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 803aaa4:	687b      	ldr	r3, [r7, #4]
 803aaa6:	681b      	ldr	r3, [r3, #0]
 803aaa8:	685b      	ldr	r3, [r3, #4]
 803aaaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 803aaae:	687b      	ldr	r3, [r7, #4]
 803aab0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 803aab2:	687b      	ldr	r3, [r7, #4]
 803aab4:	681b      	ldr	r3, [r3, #0]
 803aab6:	430a      	orrs	r2, r1
 803aab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 803aaba:	687b      	ldr	r3, [r7, #4]
 803aabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803aabe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803aac2:	2b00      	cmp	r3, #0
 803aac4:	d00a      	beq.n	803aadc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 803aac6:	687b      	ldr	r3, [r7, #4]
 803aac8:	681b      	ldr	r3, [r3, #0]
 803aaca:	685b      	ldr	r3, [r3, #4]
 803aacc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 803aad0:	687b      	ldr	r3, [r7, #4]
 803aad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 803aad4:	687b      	ldr	r3, [r7, #4]
 803aad6:	681b      	ldr	r3, [r3, #0]
 803aad8:	430a      	orrs	r2, r1
 803aada:	605a      	str	r2, [r3, #4]
  }
}
 803aadc:	bf00      	nop
 803aade:	370c      	adds	r7, #12
 803aae0:	46bd      	mov	sp, r7
 803aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aae6:	4770      	bx	lr

0803aae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 803aae8:	b580      	push	{r7, lr}
 803aaea:	b086      	sub	sp, #24
 803aaec:	af02      	add	r7, sp, #8
 803aaee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 803aaf0:	687b      	ldr	r3, [r7, #4]
 803aaf2:	2200      	movs	r2, #0
 803aaf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 803aaf8:	f7f4 faec 	bl	802f0d4 <HAL_GetTick>
 803aafc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 803aafe:	687b      	ldr	r3, [r7, #4]
 803ab00:	681b      	ldr	r3, [r3, #0]
 803ab02:	681b      	ldr	r3, [r3, #0]
 803ab04:	f003 0308 	and.w	r3, r3, #8
 803ab08:	2b08      	cmp	r3, #8
 803ab0a:	d10e      	bne.n	803ab2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 803ab0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 803ab10:	9300      	str	r3, [sp, #0]
 803ab12:	68fb      	ldr	r3, [r7, #12]
 803ab14:	2200      	movs	r2, #0
 803ab16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 803ab1a:	6878      	ldr	r0, [r7, #4]
 803ab1c:	f000 f82f 	bl	803ab7e <UART_WaitOnFlagUntilTimeout>
 803ab20:	4603      	mov	r3, r0
 803ab22:	2b00      	cmp	r3, #0
 803ab24:	d001      	beq.n	803ab2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 803ab26:	2303      	movs	r3, #3
 803ab28:	e025      	b.n	803ab76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 803ab2a:	687b      	ldr	r3, [r7, #4]
 803ab2c:	681b      	ldr	r3, [r3, #0]
 803ab2e:	681b      	ldr	r3, [r3, #0]
 803ab30:	f003 0304 	and.w	r3, r3, #4
 803ab34:	2b04      	cmp	r3, #4
 803ab36:	d10e      	bne.n	803ab56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 803ab38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 803ab3c:	9300      	str	r3, [sp, #0]
 803ab3e:	68fb      	ldr	r3, [r7, #12]
 803ab40:	2200      	movs	r2, #0
 803ab42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 803ab46:	6878      	ldr	r0, [r7, #4]
 803ab48:	f000 f819 	bl	803ab7e <UART_WaitOnFlagUntilTimeout>
 803ab4c:	4603      	mov	r3, r0
 803ab4e:	2b00      	cmp	r3, #0
 803ab50:	d001      	beq.n	803ab56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 803ab52:	2303      	movs	r3, #3
 803ab54:	e00f      	b.n	803ab76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 803ab56:	687b      	ldr	r3, [r7, #4]
 803ab58:	2220      	movs	r2, #32
 803ab5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 803ab5e:	687b      	ldr	r3, [r7, #4]
 803ab60:	2220      	movs	r2, #32
 803ab62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803ab66:	687b      	ldr	r3, [r7, #4]
 803ab68:	2200      	movs	r2, #0
 803ab6a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 803ab6c:	687b      	ldr	r3, [r7, #4]
 803ab6e:	2200      	movs	r2, #0
 803ab70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803ab74:	2300      	movs	r3, #0
}
 803ab76:	4618      	mov	r0, r3
 803ab78:	3710      	adds	r7, #16
 803ab7a:	46bd      	mov	sp, r7
 803ab7c:	bd80      	pop	{r7, pc}

0803ab7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 803ab7e:	b580      	push	{r7, lr}
 803ab80:	b09c      	sub	sp, #112	; 0x70
 803ab82:	af00      	add	r7, sp, #0
 803ab84:	60f8      	str	r0, [r7, #12]
 803ab86:	60b9      	str	r1, [r7, #8]
 803ab88:	603b      	str	r3, [r7, #0]
 803ab8a:	4613      	mov	r3, r2
 803ab8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 803ab8e:	e0a9      	b.n	803ace4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 803ab90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803ab92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803ab96:	f000 80a5 	beq.w	803ace4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 803ab9a:	f7f4 fa9b 	bl	802f0d4 <HAL_GetTick>
 803ab9e:	4602      	mov	r2, r0
 803aba0:	683b      	ldr	r3, [r7, #0]
 803aba2:	1ad3      	subs	r3, r2, r3
 803aba4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 803aba6:	429a      	cmp	r2, r3
 803aba8:	d302      	bcc.n	803abb0 <UART_WaitOnFlagUntilTimeout+0x32>
 803abaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803abac:	2b00      	cmp	r3, #0
 803abae:	d140      	bne.n	803ac32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 803abb0:	68fb      	ldr	r3, [r7, #12]
 803abb2:	681b      	ldr	r3, [r3, #0]
 803abb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803abb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803abb8:	e853 3f00 	ldrex	r3, [r3]
 803abbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 803abbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803abc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 803abc4:	667b      	str	r3, [r7, #100]	; 0x64
 803abc6:	68fb      	ldr	r3, [r7, #12]
 803abc8:	681b      	ldr	r3, [r3, #0]
 803abca:	461a      	mov	r2, r3
 803abcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803abce:	65fb      	str	r3, [r7, #92]	; 0x5c
 803abd0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803abd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 803abd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 803abd6:	e841 2300 	strex	r3, r2, [r1]
 803abda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 803abdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803abde:	2b00      	cmp	r3, #0
 803abe0:	d1e6      	bne.n	803abb0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803abe2:	68fb      	ldr	r3, [r7, #12]
 803abe4:	681b      	ldr	r3, [r3, #0]
 803abe6:	3308      	adds	r3, #8
 803abe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803abea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803abec:	e853 3f00 	ldrex	r3, [r3]
 803abf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803abf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803abf4:	f023 0301 	bic.w	r3, r3, #1
 803abf8:	663b      	str	r3, [r7, #96]	; 0x60
 803abfa:	68fb      	ldr	r3, [r7, #12]
 803abfc:	681b      	ldr	r3, [r3, #0]
 803abfe:	3308      	adds	r3, #8
 803ac00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 803ac02:	64ba      	str	r2, [r7, #72]	; 0x48
 803ac04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803ac06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 803ac08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803ac0a:	e841 2300 	strex	r3, r2, [r1]
 803ac0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 803ac10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803ac12:	2b00      	cmp	r3, #0
 803ac14:	d1e5      	bne.n	803abe2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 803ac16:	68fb      	ldr	r3, [r7, #12]
 803ac18:	2220      	movs	r2, #32
 803ac1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 803ac1e:	68fb      	ldr	r3, [r7, #12]
 803ac20:	2220      	movs	r2, #32
 803ac22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 803ac26:	68fb      	ldr	r3, [r7, #12]
 803ac28:	2200      	movs	r2, #0
 803ac2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 803ac2e:	2303      	movs	r3, #3
 803ac30:	e069      	b.n	803ad06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 803ac32:	68fb      	ldr	r3, [r7, #12]
 803ac34:	681b      	ldr	r3, [r3, #0]
 803ac36:	681b      	ldr	r3, [r3, #0]
 803ac38:	f003 0304 	and.w	r3, r3, #4
 803ac3c:	2b00      	cmp	r3, #0
 803ac3e:	d051      	beq.n	803ace4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 803ac40:	68fb      	ldr	r3, [r7, #12]
 803ac42:	681b      	ldr	r3, [r3, #0]
 803ac44:	69db      	ldr	r3, [r3, #28]
 803ac46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 803ac4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 803ac4e:	d149      	bne.n	803ace4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 803ac50:	68fb      	ldr	r3, [r7, #12]
 803ac52:	681b      	ldr	r3, [r3, #0]
 803ac54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 803ac58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 803ac5a:	68fb      	ldr	r3, [r7, #12]
 803ac5c:	681b      	ldr	r3, [r3, #0]
 803ac5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803ac60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803ac62:	e853 3f00 	ldrex	r3, [r3]
 803ac66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803ac6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 803ac6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 803ac70:	68fb      	ldr	r3, [r7, #12]
 803ac72:	681b      	ldr	r3, [r3, #0]
 803ac74:	461a      	mov	r2, r3
 803ac76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803ac78:	637b      	str	r3, [r7, #52]	; 0x34
 803ac7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803ac7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 803ac7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803ac80:	e841 2300 	strex	r3, r2, [r1]
 803ac84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 803ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803ac88:	2b00      	cmp	r3, #0
 803ac8a:	d1e6      	bne.n	803ac5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803ac8c:	68fb      	ldr	r3, [r7, #12]
 803ac8e:	681b      	ldr	r3, [r3, #0]
 803ac90:	3308      	adds	r3, #8
 803ac92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803ac94:	697b      	ldr	r3, [r7, #20]
 803ac96:	e853 3f00 	ldrex	r3, [r3]
 803ac9a:	613b      	str	r3, [r7, #16]
   return(result);
 803ac9c:	693b      	ldr	r3, [r7, #16]
 803ac9e:	f023 0301 	bic.w	r3, r3, #1
 803aca2:	66bb      	str	r3, [r7, #104]	; 0x68
 803aca4:	68fb      	ldr	r3, [r7, #12]
 803aca6:	681b      	ldr	r3, [r3, #0]
 803aca8:	3308      	adds	r3, #8
 803acaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 803acac:	623a      	str	r2, [r7, #32]
 803acae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803acb0:	69f9      	ldr	r1, [r7, #28]
 803acb2:	6a3a      	ldr	r2, [r7, #32]
 803acb4:	e841 2300 	strex	r3, r2, [r1]
 803acb8:	61bb      	str	r3, [r7, #24]
   return(result);
 803acba:	69bb      	ldr	r3, [r7, #24]
 803acbc:	2b00      	cmp	r3, #0
 803acbe:	d1e5      	bne.n	803ac8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 803acc0:	68fb      	ldr	r3, [r7, #12]
 803acc2:	2220      	movs	r2, #32
 803acc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 803acc8:	68fb      	ldr	r3, [r7, #12]
 803acca:	2220      	movs	r2, #32
 803accc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 803acd0:	68fb      	ldr	r3, [r7, #12]
 803acd2:	2220      	movs	r2, #32
 803acd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 803acd8:	68fb      	ldr	r3, [r7, #12]
 803acda:	2200      	movs	r2, #0
 803acdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 803ace0:	2303      	movs	r3, #3
 803ace2:	e010      	b.n	803ad06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 803ace4:	68fb      	ldr	r3, [r7, #12]
 803ace6:	681b      	ldr	r3, [r3, #0]
 803ace8:	69da      	ldr	r2, [r3, #28]
 803acea:	68bb      	ldr	r3, [r7, #8]
 803acec:	4013      	ands	r3, r2
 803acee:	68ba      	ldr	r2, [r7, #8]
 803acf0:	429a      	cmp	r2, r3
 803acf2:	bf0c      	ite	eq
 803acf4:	2301      	moveq	r3, #1
 803acf6:	2300      	movne	r3, #0
 803acf8:	b2db      	uxtb	r3, r3
 803acfa:	461a      	mov	r2, r3
 803acfc:	79fb      	ldrb	r3, [r7, #7]
 803acfe:	429a      	cmp	r2, r3
 803ad00:	f43f af46 	beq.w	803ab90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 803ad04:	2300      	movs	r3, #0
}
 803ad06:	4618      	mov	r0, r3
 803ad08:	3770      	adds	r7, #112	; 0x70
 803ad0a:	46bd      	mov	sp, r7
 803ad0c:	bd80      	pop	{r7, pc}
	...

0803ad10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 803ad10:	b480      	push	{r7}
 803ad12:	b0a3      	sub	sp, #140	; 0x8c
 803ad14:	af00      	add	r7, sp, #0
 803ad16:	60f8      	str	r0, [r7, #12]
 803ad18:	60b9      	str	r1, [r7, #8]
 803ad1a:	4613      	mov	r3, r2
 803ad1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 803ad1e:	68fb      	ldr	r3, [r7, #12]
 803ad20:	68ba      	ldr	r2, [r7, #8]
 803ad22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 803ad24:	68fb      	ldr	r3, [r7, #12]
 803ad26:	88fa      	ldrh	r2, [r7, #6]
 803ad28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 803ad2c:	68fb      	ldr	r3, [r7, #12]
 803ad2e:	88fa      	ldrh	r2, [r7, #6]
 803ad30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 803ad34:	68fb      	ldr	r3, [r7, #12]
 803ad36:	2200      	movs	r2, #0
 803ad38:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 803ad3a:	68fb      	ldr	r3, [r7, #12]
 803ad3c:	689b      	ldr	r3, [r3, #8]
 803ad3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803ad42:	d10e      	bne.n	803ad62 <UART_Start_Receive_IT+0x52>
 803ad44:	68fb      	ldr	r3, [r7, #12]
 803ad46:	691b      	ldr	r3, [r3, #16]
 803ad48:	2b00      	cmp	r3, #0
 803ad4a:	d105      	bne.n	803ad58 <UART_Start_Receive_IT+0x48>
 803ad4c:	68fb      	ldr	r3, [r7, #12]
 803ad4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 803ad52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803ad56:	e02d      	b.n	803adb4 <UART_Start_Receive_IT+0xa4>
 803ad58:	68fb      	ldr	r3, [r7, #12]
 803ad5a:	22ff      	movs	r2, #255	; 0xff
 803ad5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803ad60:	e028      	b.n	803adb4 <UART_Start_Receive_IT+0xa4>
 803ad62:	68fb      	ldr	r3, [r7, #12]
 803ad64:	689b      	ldr	r3, [r3, #8]
 803ad66:	2b00      	cmp	r3, #0
 803ad68:	d10d      	bne.n	803ad86 <UART_Start_Receive_IT+0x76>
 803ad6a:	68fb      	ldr	r3, [r7, #12]
 803ad6c:	691b      	ldr	r3, [r3, #16]
 803ad6e:	2b00      	cmp	r3, #0
 803ad70:	d104      	bne.n	803ad7c <UART_Start_Receive_IT+0x6c>
 803ad72:	68fb      	ldr	r3, [r7, #12]
 803ad74:	22ff      	movs	r2, #255	; 0xff
 803ad76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803ad7a:	e01b      	b.n	803adb4 <UART_Start_Receive_IT+0xa4>
 803ad7c:	68fb      	ldr	r3, [r7, #12]
 803ad7e:	227f      	movs	r2, #127	; 0x7f
 803ad80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803ad84:	e016      	b.n	803adb4 <UART_Start_Receive_IT+0xa4>
 803ad86:	68fb      	ldr	r3, [r7, #12]
 803ad88:	689b      	ldr	r3, [r3, #8]
 803ad8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803ad8e:	d10d      	bne.n	803adac <UART_Start_Receive_IT+0x9c>
 803ad90:	68fb      	ldr	r3, [r7, #12]
 803ad92:	691b      	ldr	r3, [r3, #16]
 803ad94:	2b00      	cmp	r3, #0
 803ad96:	d104      	bne.n	803ada2 <UART_Start_Receive_IT+0x92>
 803ad98:	68fb      	ldr	r3, [r7, #12]
 803ad9a:	227f      	movs	r2, #127	; 0x7f
 803ad9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803ada0:	e008      	b.n	803adb4 <UART_Start_Receive_IT+0xa4>
 803ada2:	68fb      	ldr	r3, [r7, #12]
 803ada4:	223f      	movs	r2, #63	; 0x3f
 803ada6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803adaa:	e003      	b.n	803adb4 <UART_Start_Receive_IT+0xa4>
 803adac:	68fb      	ldr	r3, [r7, #12]
 803adae:	2200      	movs	r2, #0
 803adb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 803adb4:	68fb      	ldr	r3, [r7, #12]
 803adb6:	2200      	movs	r2, #0
 803adb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 803adbc:	68fb      	ldr	r3, [r7, #12]
 803adbe:	2222      	movs	r2, #34	; 0x22
 803adc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803adc4:	68fb      	ldr	r3, [r7, #12]
 803adc6:	681b      	ldr	r3, [r3, #0]
 803adc8:	3308      	adds	r3, #8
 803adca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803adcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803adce:	e853 3f00 	ldrex	r3, [r3]
 803add2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 803add4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803add6:	f043 0301 	orr.w	r3, r3, #1
 803adda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 803adde:	68fb      	ldr	r3, [r7, #12]
 803ade0:	681b      	ldr	r3, [r3, #0]
 803ade2:	3308      	adds	r3, #8
 803ade4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 803ade8:	673a      	str	r2, [r7, #112]	; 0x70
 803adea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803adec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 803adee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 803adf0:	e841 2300 	strex	r3, r2, [r1]
 803adf4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 803adf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 803adf8:	2b00      	cmp	r3, #0
 803adfa:	d1e3      	bne.n	803adc4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 803adfc:	68fb      	ldr	r3, [r7, #12]
 803adfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803ae00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803ae04:	d153      	bne.n	803aeae <UART_Start_Receive_IT+0x19e>
 803ae06:	68fb      	ldr	r3, [r7, #12]
 803ae08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803ae0c:	88fa      	ldrh	r2, [r7, #6]
 803ae0e:	429a      	cmp	r2, r3
 803ae10:	d34d      	bcc.n	803aeae <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 803ae12:	68fb      	ldr	r3, [r7, #12]
 803ae14:	689b      	ldr	r3, [r3, #8]
 803ae16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803ae1a:	d107      	bne.n	803ae2c <UART_Start_Receive_IT+0x11c>
 803ae1c:	68fb      	ldr	r3, [r7, #12]
 803ae1e:	691b      	ldr	r3, [r3, #16]
 803ae20:	2b00      	cmp	r3, #0
 803ae22:	d103      	bne.n	803ae2c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 803ae24:	68fb      	ldr	r3, [r7, #12]
 803ae26:	4a4b      	ldr	r2, [pc, #300]	; (803af54 <UART_Start_Receive_IT+0x244>)
 803ae28:	671a      	str	r2, [r3, #112]	; 0x70
 803ae2a:	e002      	b.n	803ae32 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 803ae2c:	68fb      	ldr	r3, [r7, #12]
 803ae2e:	4a4a      	ldr	r2, [pc, #296]	; (803af58 <UART_Start_Receive_IT+0x248>)
 803ae30:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 803ae32:	68fb      	ldr	r3, [r7, #12]
 803ae34:	2200      	movs	r2, #0
 803ae36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 803ae3a:	68fb      	ldr	r3, [r7, #12]
 803ae3c:	691b      	ldr	r3, [r3, #16]
 803ae3e:	2b00      	cmp	r3, #0
 803ae40:	d01a      	beq.n	803ae78 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803ae42:	68fb      	ldr	r3, [r7, #12]
 803ae44:	681b      	ldr	r3, [r3, #0]
 803ae46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803ae48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803ae4a:	e853 3f00 	ldrex	r3, [r3]
 803ae4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 803ae50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803ae52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803ae56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803ae5a:	68fb      	ldr	r3, [r7, #12]
 803ae5c:	681b      	ldr	r3, [r3, #0]
 803ae5e:	461a      	mov	r2, r3
 803ae60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 803ae64:	65fb      	str	r3, [r7, #92]	; 0x5c
 803ae66:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803ae68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 803ae6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 803ae6c:	e841 2300 	strex	r3, r2, [r1]
 803ae70:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 803ae72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803ae74:	2b00      	cmp	r3, #0
 803ae76:	d1e4      	bne.n	803ae42 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 803ae78:	68fb      	ldr	r3, [r7, #12]
 803ae7a:	681b      	ldr	r3, [r3, #0]
 803ae7c:	3308      	adds	r3, #8
 803ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803ae80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803ae82:	e853 3f00 	ldrex	r3, [r3]
 803ae86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803ae88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803ae8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803ae8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 803ae90:	68fb      	ldr	r3, [r7, #12]
 803ae92:	681b      	ldr	r3, [r3, #0]
 803ae94:	3308      	adds	r3, #8
 803ae96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 803ae98:	64ba      	str	r2, [r7, #72]	; 0x48
 803ae9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803ae9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 803ae9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803aea0:	e841 2300 	strex	r3, r2, [r1]
 803aea4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 803aea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803aea8:	2b00      	cmp	r3, #0
 803aeaa:	d1e5      	bne.n	803ae78 <UART_Start_Receive_IT+0x168>
 803aeac:	e04a      	b.n	803af44 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 803aeae:	68fb      	ldr	r3, [r7, #12]
 803aeb0:	689b      	ldr	r3, [r3, #8]
 803aeb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803aeb6:	d107      	bne.n	803aec8 <UART_Start_Receive_IT+0x1b8>
 803aeb8:	68fb      	ldr	r3, [r7, #12]
 803aeba:	691b      	ldr	r3, [r3, #16]
 803aebc:	2b00      	cmp	r3, #0
 803aebe:	d103      	bne.n	803aec8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 803aec0:	68fb      	ldr	r3, [r7, #12]
 803aec2:	4a26      	ldr	r2, [pc, #152]	; (803af5c <UART_Start_Receive_IT+0x24c>)
 803aec4:	671a      	str	r2, [r3, #112]	; 0x70
 803aec6:	e002      	b.n	803aece <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 803aec8:	68fb      	ldr	r3, [r7, #12]
 803aeca:	4a25      	ldr	r2, [pc, #148]	; (803af60 <UART_Start_Receive_IT+0x250>)
 803aecc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 803aece:	68fb      	ldr	r3, [r7, #12]
 803aed0:	2200      	movs	r2, #0
 803aed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 803aed6:	68fb      	ldr	r3, [r7, #12]
 803aed8:	691b      	ldr	r3, [r3, #16]
 803aeda:	2b00      	cmp	r3, #0
 803aedc:	d019      	beq.n	803af12 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 803aede:	68fb      	ldr	r3, [r7, #12]
 803aee0:	681b      	ldr	r3, [r3, #0]
 803aee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803aee6:	e853 3f00 	ldrex	r3, [r3]
 803aeea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803aeee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 803aef2:	677b      	str	r3, [r7, #116]	; 0x74
 803aef4:	68fb      	ldr	r3, [r7, #12]
 803aef6:	681b      	ldr	r3, [r3, #0]
 803aef8:	461a      	mov	r2, r3
 803aefa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803aefc:	637b      	str	r3, [r7, #52]	; 0x34
 803aefe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803af00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 803af02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803af04:	e841 2300 	strex	r3, r2, [r1]
 803af08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 803af0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803af0c:	2b00      	cmp	r3, #0
 803af0e:	d1e6      	bne.n	803aede <UART_Start_Receive_IT+0x1ce>
 803af10:	e018      	b.n	803af44 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803af12:	68fb      	ldr	r3, [r7, #12]
 803af14:	681b      	ldr	r3, [r3, #0]
 803af16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803af18:	697b      	ldr	r3, [r7, #20]
 803af1a:	e853 3f00 	ldrex	r3, [r3]
 803af1e:	613b      	str	r3, [r7, #16]
   return(result);
 803af20:	693b      	ldr	r3, [r7, #16]
 803af22:	f043 0320 	orr.w	r3, r3, #32
 803af26:	67bb      	str	r3, [r7, #120]	; 0x78
 803af28:	68fb      	ldr	r3, [r7, #12]
 803af2a:	681b      	ldr	r3, [r3, #0]
 803af2c:	461a      	mov	r2, r3
 803af2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803af30:	623b      	str	r3, [r7, #32]
 803af32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803af34:	69f9      	ldr	r1, [r7, #28]
 803af36:	6a3a      	ldr	r2, [r7, #32]
 803af38:	e841 2300 	strex	r3, r2, [r1]
 803af3c:	61bb      	str	r3, [r7, #24]
   return(result);
 803af3e:	69bb      	ldr	r3, [r7, #24]
 803af40:	2b00      	cmp	r3, #0
 803af42:	d1e6      	bne.n	803af12 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 803af44:	2300      	movs	r3, #0
}
 803af46:	4618      	mov	r0, r3
 803af48:	378c      	adds	r7, #140	; 0x8c
 803af4a:	46bd      	mov	sp, r7
 803af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803af50:	4770      	bx	lr
 803af52:	bf00      	nop
 803af54:	0803b9b1 	.word	0x0803b9b1
 803af58:	0803b6b9 	.word	0x0803b6b9
 803af5c:	0803b557 	.word	0x0803b557
 803af60:	0803b3f7 	.word	0x0803b3f7

0803af64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 803af64:	b480      	push	{r7}
 803af66:	b095      	sub	sp, #84	; 0x54
 803af68:	af00      	add	r7, sp, #0
 803af6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 803af6c:	687b      	ldr	r3, [r7, #4]
 803af6e:	681b      	ldr	r3, [r3, #0]
 803af70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803af72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803af74:	e853 3f00 	ldrex	r3, [r3]
 803af78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803af7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 803af80:	64fb      	str	r3, [r7, #76]	; 0x4c
 803af82:	687b      	ldr	r3, [r7, #4]
 803af84:	681b      	ldr	r3, [r3, #0]
 803af86:	461a      	mov	r2, r3
 803af88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803af8a:	643b      	str	r3, [r7, #64]	; 0x40
 803af8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803af8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 803af90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803af92:	e841 2300 	strex	r3, r2, [r1]
 803af96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803af98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803af9a:	2b00      	cmp	r3, #0
 803af9c:	d1e6      	bne.n	803af6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 803af9e:	687b      	ldr	r3, [r7, #4]
 803afa0:	681b      	ldr	r3, [r3, #0]
 803afa2:	3308      	adds	r3, #8
 803afa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803afa6:	6a3b      	ldr	r3, [r7, #32]
 803afa8:	e853 3f00 	ldrex	r3, [r3]
 803afac:	61fb      	str	r3, [r7, #28]
   return(result);
 803afae:	69fa      	ldr	r2, [r7, #28]
 803afb0:	4b1e      	ldr	r3, [pc, #120]	; (803b02c <UART_EndRxTransfer+0xc8>)
 803afb2:	4013      	ands	r3, r2
 803afb4:	64bb      	str	r3, [r7, #72]	; 0x48
 803afb6:	687b      	ldr	r3, [r7, #4]
 803afb8:	681b      	ldr	r3, [r3, #0]
 803afba:	3308      	adds	r3, #8
 803afbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803afbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 803afc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803afc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803afc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803afc6:	e841 2300 	strex	r3, r2, [r1]
 803afca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803afce:	2b00      	cmp	r3, #0
 803afd0:	d1e5      	bne.n	803af9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803afd2:	687b      	ldr	r3, [r7, #4]
 803afd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803afd6:	2b01      	cmp	r3, #1
 803afd8:	d118      	bne.n	803b00c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803afda:	687b      	ldr	r3, [r7, #4]
 803afdc:	681b      	ldr	r3, [r3, #0]
 803afde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803afe0:	68fb      	ldr	r3, [r7, #12]
 803afe2:	e853 3f00 	ldrex	r3, [r3]
 803afe6:	60bb      	str	r3, [r7, #8]
   return(result);
 803afe8:	68bb      	ldr	r3, [r7, #8]
 803afea:	f023 0310 	bic.w	r3, r3, #16
 803afee:	647b      	str	r3, [r7, #68]	; 0x44
 803aff0:	687b      	ldr	r3, [r7, #4]
 803aff2:	681b      	ldr	r3, [r3, #0]
 803aff4:	461a      	mov	r2, r3
 803aff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803aff8:	61bb      	str	r3, [r7, #24]
 803affa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803affc:	6979      	ldr	r1, [r7, #20]
 803affe:	69ba      	ldr	r2, [r7, #24]
 803b000:	e841 2300 	strex	r3, r2, [r1]
 803b004:	613b      	str	r3, [r7, #16]
   return(result);
 803b006:	693b      	ldr	r3, [r7, #16]
 803b008:	2b00      	cmp	r3, #0
 803b00a:	d1e6      	bne.n	803afda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 803b00c:	687b      	ldr	r3, [r7, #4]
 803b00e:	2220      	movs	r2, #32
 803b010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803b014:	687b      	ldr	r3, [r7, #4]
 803b016:	2200      	movs	r2, #0
 803b018:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 803b01a:	687b      	ldr	r3, [r7, #4]
 803b01c:	2200      	movs	r2, #0
 803b01e:	671a      	str	r2, [r3, #112]	; 0x70
}
 803b020:	bf00      	nop
 803b022:	3754      	adds	r7, #84	; 0x54
 803b024:	46bd      	mov	sp, r7
 803b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b02a:	4770      	bx	lr
 803b02c:	effffffe 	.word	0xeffffffe

0803b030 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 803b030:	b580      	push	{r7, lr}
 803b032:	b084      	sub	sp, #16
 803b034:	af00      	add	r7, sp, #0
 803b036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 803b038:	687b      	ldr	r3, [r7, #4]
 803b03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803b03c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 803b03e:	68fb      	ldr	r3, [r7, #12]
 803b040:	2200      	movs	r2, #0
 803b042:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 803b046:	68fb      	ldr	r3, [r7, #12]
 803b048:	2200      	movs	r2, #0
 803b04a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 803b04e:	68f8      	ldr	r0, [r7, #12]
 803b050:	f7fe ff2a 	bl	8039ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 803b054:	bf00      	nop
 803b056:	3710      	adds	r7, #16
 803b058:	46bd      	mov	sp, r7
 803b05a:	bd80      	pop	{r7, pc}

0803b05c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 803b05c:	b480      	push	{r7}
 803b05e:	b08f      	sub	sp, #60	; 0x3c
 803b060:	af00      	add	r7, sp, #0
 803b062:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 803b064:	687b      	ldr	r3, [r7, #4]
 803b066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803b06a:	2b21      	cmp	r3, #33	; 0x21
 803b06c:	d14c      	bne.n	803b108 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 803b06e:	687b      	ldr	r3, [r7, #4]
 803b070:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803b074:	b29b      	uxth	r3, r3
 803b076:	2b00      	cmp	r3, #0
 803b078:	d132      	bne.n	803b0e0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 803b07a:	687b      	ldr	r3, [r7, #4]
 803b07c:	681b      	ldr	r3, [r3, #0]
 803b07e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b080:	6a3b      	ldr	r3, [r7, #32]
 803b082:	e853 3f00 	ldrex	r3, [r3]
 803b086:	61fb      	str	r3, [r7, #28]
   return(result);
 803b088:	69fb      	ldr	r3, [r7, #28]
 803b08a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 803b08e:	637b      	str	r3, [r7, #52]	; 0x34
 803b090:	687b      	ldr	r3, [r7, #4]
 803b092:	681b      	ldr	r3, [r3, #0]
 803b094:	461a      	mov	r2, r3
 803b096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803b098:	62fb      	str	r3, [r7, #44]	; 0x2c
 803b09a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b09c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803b09e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803b0a0:	e841 2300 	strex	r3, r2, [r1]
 803b0a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b0a8:	2b00      	cmp	r3, #0
 803b0aa:	d1e6      	bne.n	803b07a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803b0ac:	687b      	ldr	r3, [r7, #4]
 803b0ae:	681b      	ldr	r3, [r3, #0]
 803b0b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b0b2:	68fb      	ldr	r3, [r7, #12]
 803b0b4:	e853 3f00 	ldrex	r3, [r3]
 803b0b8:	60bb      	str	r3, [r7, #8]
   return(result);
 803b0ba:	68bb      	ldr	r3, [r7, #8]
 803b0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803b0c0:	633b      	str	r3, [r7, #48]	; 0x30
 803b0c2:	687b      	ldr	r3, [r7, #4]
 803b0c4:	681b      	ldr	r3, [r3, #0]
 803b0c6:	461a      	mov	r2, r3
 803b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803b0ca:	61bb      	str	r3, [r7, #24]
 803b0cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b0ce:	6979      	ldr	r1, [r7, #20]
 803b0d0:	69ba      	ldr	r2, [r7, #24]
 803b0d2:	e841 2300 	strex	r3, r2, [r1]
 803b0d6:	613b      	str	r3, [r7, #16]
   return(result);
 803b0d8:	693b      	ldr	r3, [r7, #16]
 803b0da:	2b00      	cmp	r3, #0
 803b0dc:	d1e6      	bne.n	803b0ac <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 803b0de:	e013      	b.n	803b108 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 803b0e0:	687b      	ldr	r3, [r7, #4]
 803b0e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803b0e4:	781a      	ldrb	r2, [r3, #0]
 803b0e6:	687b      	ldr	r3, [r7, #4]
 803b0e8:	681b      	ldr	r3, [r3, #0]
 803b0ea:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 803b0ec:	687b      	ldr	r3, [r7, #4]
 803b0ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803b0f0:	1c5a      	adds	r2, r3, #1
 803b0f2:	687b      	ldr	r3, [r7, #4]
 803b0f4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 803b0f6:	687b      	ldr	r3, [r7, #4]
 803b0f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803b0fc:	b29b      	uxth	r3, r3
 803b0fe:	3b01      	subs	r3, #1
 803b100:	b29a      	uxth	r2, r3
 803b102:	687b      	ldr	r3, [r7, #4]
 803b104:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 803b108:	bf00      	nop
 803b10a:	373c      	adds	r7, #60	; 0x3c
 803b10c:	46bd      	mov	sp, r7
 803b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b112:	4770      	bx	lr

0803b114 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 803b114:	b480      	push	{r7}
 803b116:	b091      	sub	sp, #68	; 0x44
 803b118:	af00      	add	r7, sp, #0
 803b11a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 803b11c:	687b      	ldr	r3, [r7, #4]
 803b11e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803b122:	2b21      	cmp	r3, #33	; 0x21
 803b124:	d151      	bne.n	803b1ca <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 803b126:	687b      	ldr	r3, [r7, #4]
 803b128:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803b12c:	b29b      	uxth	r3, r3
 803b12e:	2b00      	cmp	r3, #0
 803b130:	d132      	bne.n	803b198 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 803b132:	687b      	ldr	r3, [r7, #4]
 803b134:	681b      	ldr	r3, [r3, #0]
 803b136:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b13a:	e853 3f00 	ldrex	r3, [r3]
 803b13e:	623b      	str	r3, [r7, #32]
   return(result);
 803b140:	6a3b      	ldr	r3, [r7, #32]
 803b142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 803b146:	63bb      	str	r3, [r7, #56]	; 0x38
 803b148:	687b      	ldr	r3, [r7, #4]
 803b14a:	681b      	ldr	r3, [r3, #0]
 803b14c:	461a      	mov	r2, r3
 803b14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803b150:	633b      	str	r3, [r7, #48]	; 0x30
 803b152:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803b156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803b158:	e841 2300 	strex	r3, r2, [r1]
 803b15c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b160:	2b00      	cmp	r3, #0
 803b162:	d1e6      	bne.n	803b132 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803b164:	687b      	ldr	r3, [r7, #4]
 803b166:	681b      	ldr	r3, [r3, #0]
 803b168:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b16a:	693b      	ldr	r3, [r7, #16]
 803b16c:	e853 3f00 	ldrex	r3, [r3]
 803b170:	60fb      	str	r3, [r7, #12]
   return(result);
 803b172:	68fb      	ldr	r3, [r7, #12]
 803b174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803b178:	637b      	str	r3, [r7, #52]	; 0x34
 803b17a:	687b      	ldr	r3, [r7, #4]
 803b17c:	681b      	ldr	r3, [r3, #0]
 803b17e:	461a      	mov	r2, r3
 803b180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803b182:	61fb      	str	r3, [r7, #28]
 803b184:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b186:	69b9      	ldr	r1, [r7, #24]
 803b188:	69fa      	ldr	r2, [r7, #28]
 803b18a:	e841 2300 	strex	r3, r2, [r1]
 803b18e:	617b      	str	r3, [r7, #20]
   return(result);
 803b190:	697b      	ldr	r3, [r7, #20]
 803b192:	2b00      	cmp	r3, #0
 803b194:	d1e6      	bne.n	803b164 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 803b196:	e018      	b.n	803b1ca <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 803b198:	687b      	ldr	r3, [r7, #4]
 803b19a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803b19c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 803b19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803b1a0:	881b      	ldrh	r3, [r3, #0]
 803b1a2:	461a      	mov	r2, r3
 803b1a4:	687b      	ldr	r3, [r7, #4]
 803b1a6:	681b      	ldr	r3, [r3, #0]
 803b1a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 803b1ac:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 803b1ae:	687b      	ldr	r3, [r7, #4]
 803b1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803b1b2:	1c9a      	adds	r2, r3, #2
 803b1b4:	687b      	ldr	r3, [r7, #4]
 803b1b6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 803b1b8:	687b      	ldr	r3, [r7, #4]
 803b1ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803b1be:	b29b      	uxth	r3, r3
 803b1c0:	3b01      	subs	r3, #1
 803b1c2:	b29a      	uxth	r2, r3
 803b1c4:	687b      	ldr	r3, [r7, #4]
 803b1c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 803b1ca:	bf00      	nop
 803b1cc:	3744      	adds	r7, #68	; 0x44
 803b1ce:	46bd      	mov	sp, r7
 803b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b1d4:	4770      	bx	lr

0803b1d6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803b1d6:	b480      	push	{r7}
 803b1d8:	b091      	sub	sp, #68	; 0x44
 803b1da:	af00      	add	r7, sp, #0
 803b1dc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 803b1de:	687b      	ldr	r3, [r7, #4]
 803b1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803b1e4:	2b21      	cmp	r3, #33	; 0x21
 803b1e6:	d160      	bne.n	803b2aa <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 803b1e8:	687b      	ldr	r3, [r7, #4]
 803b1ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803b1ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
 803b1f0:	e057      	b.n	803b2a2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 803b1f2:	687b      	ldr	r3, [r7, #4]
 803b1f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803b1f8:	b29b      	uxth	r3, r3
 803b1fa:	2b00      	cmp	r3, #0
 803b1fc:	d133      	bne.n	803b266 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 803b1fe:	687b      	ldr	r3, [r7, #4]
 803b200:	681b      	ldr	r3, [r3, #0]
 803b202:	3308      	adds	r3, #8
 803b204:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b208:	e853 3f00 	ldrex	r3, [r3]
 803b20c:	623b      	str	r3, [r7, #32]
   return(result);
 803b20e:	6a3b      	ldr	r3, [r7, #32]
 803b210:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 803b214:	63bb      	str	r3, [r7, #56]	; 0x38
 803b216:	687b      	ldr	r3, [r7, #4]
 803b218:	681b      	ldr	r3, [r3, #0]
 803b21a:	3308      	adds	r3, #8
 803b21c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803b21e:	633a      	str	r2, [r7, #48]	; 0x30
 803b220:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803b224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803b226:	e841 2300 	strex	r3, r2, [r1]
 803b22a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803b22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b22e:	2b00      	cmp	r3, #0
 803b230:	d1e5      	bne.n	803b1fe <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803b232:	687b      	ldr	r3, [r7, #4]
 803b234:	681b      	ldr	r3, [r3, #0]
 803b236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b238:	693b      	ldr	r3, [r7, #16]
 803b23a:	e853 3f00 	ldrex	r3, [r3]
 803b23e:	60fb      	str	r3, [r7, #12]
   return(result);
 803b240:	68fb      	ldr	r3, [r7, #12]
 803b242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803b246:	637b      	str	r3, [r7, #52]	; 0x34
 803b248:	687b      	ldr	r3, [r7, #4]
 803b24a:	681b      	ldr	r3, [r3, #0]
 803b24c:	461a      	mov	r2, r3
 803b24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803b250:	61fb      	str	r3, [r7, #28]
 803b252:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b254:	69b9      	ldr	r1, [r7, #24]
 803b256:	69fa      	ldr	r2, [r7, #28]
 803b258:	e841 2300 	strex	r3, r2, [r1]
 803b25c:	617b      	str	r3, [r7, #20]
   return(result);
 803b25e:	697b      	ldr	r3, [r7, #20]
 803b260:	2b00      	cmp	r3, #0
 803b262:	d1e6      	bne.n	803b232 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 803b264:	e021      	b.n	803b2aa <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 803b266:	687b      	ldr	r3, [r7, #4]
 803b268:	681b      	ldr	r3, [r3, #0]
 803b26a:	69db      	ldr	r3, [r3, #28]
 803b26c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803b270:	2b00      	cmp	r3, #0
 803b272:	d013      	beq.n	803b29c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 803b274:	687b      	ldr	r3, [r7, #4]
 803b276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803b278:	781a      	ldrb	r2, [r3, #0]
 803b27a:	687b      	ldr	r3, [r7, #4]
 803b27c:	681b      	ldr	r3, [r3, #0]
 803b27e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 803b280:	687b      	ldr	r3, [r7, #4]
 803b282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803b284:	1c5a      	adds	r2, r3, #1
 803b286:	687b      	ldr	r3, [r7, #4]
 803b288:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 803b28a:	687b      	ldr	r3, [r7, #4]
 803b28c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803b290:	b29b      	uxth	r3, r3
 803b292:	3b01      	subs	r3, #1
 803b294:	b29a      	uxth	r2, r3
 803b296:	687b      	ldr	r3, [r7, #4]
 803b298:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 803b29c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803b29e:	3b01      	subs	r3, #1
 803b2a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 803b2a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803b2a4:	2b00      	cmp	r3, #0
 803b2a6:	d1a4      	bne.n	803b1f2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 803b2a8:	e7ff      	b.n	803b2aa <UART_TxISR_8BIT_FIFOEN+0xd4>
 803b2aa:	bf00      	nop
 803b2ac:	3744      	adds	r7, #68	; 0x44
 803b2ae:	46bd      	mov	sp, r7
 803b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b2b4:	4770      	bx	lr

0803b2b6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803b2b6:	b480      	push	{r7}
 803b2b8:	b091      	sub	sp, #68	; 0x44
 803b2ba:	af00      	add	r7, sp, #0
 803b2bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 803b2be:	687b      	ldr	r3, [r7, #4]
 803b2c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803b2c4:	2b21      	cmp	r3, #33	; 0x21
 803b2c6:	d165      	bne.n	803b394 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 803b2c8:	687b      	ldr	r3, [r7, #4]
 803b2ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803b2ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
 803b2d0:	e05c      	b.n	803b38c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 803b2d2:	687b      	ldr	r3, [r7, #4]
 803b2d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803b2d8:	b29b      	uxth	r3, r3
 803b2da:	2b00      	cmp	r3, #0
 803b2dc:	d133      	bne.n	803b346 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 803b2de:	687b      	ldr	r3, [r7, #4]
 803b2e0:	681b      	ldr	r3, [r3, #0]
 803b2e2:	3308      	adds	r3, #8
 803b2e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b2e6:	6a3b      	ldr	r3, [r7, #32]
 803b2e8:	e853 3f00 	ldrex	r3, [r3]
 803b2ec:	61fb      	str	r3, [r7, #28]
   return(result);
 803b2ee:	69fb      	ldr	r3, [r7, #28]
 803b2f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 803b2f4:	637b      	str	r3, [r7, #52]	; 0x34
 803b2f6:	687b      	ldr	r3, [r7, #4]
 803b2f8:	681b      	ldr	r3, [r3, #0]
 803b2fa:	3308      	adds	r3, #8
 803b2fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803b2fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 803b300:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803b304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803b306:	e841 2300 	strex	r3, r2, [r1]
 803b30a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803b30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b30e:	2b00      	cmp	r3, #0
 803b310:	d1e5      	bne.n	803b2de <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803b312:	687b      	ldr	r3, [r7, #4]
 803b314:	681b      	ldr	r3, [r3, #0]
 803b316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b318:	68fb      	ldr	r3, [r7, #12]
 803b31a:	e853 3f00 	ldrex	r3, [r3]
 803b31e:	60bb      	str	r3, [r7, #8]
   return(result);
 803b320:	68bb      	ldr	r3, [r7, #8]
 803b322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803b326:	633b      	str	r3, [r7, #48]	; 0x30
 803b328:	687b      	ldr	r3, [r7, #4]
 803b32a:	681b      	ldr	r3, [r3, #0]
 803b32c:	461a      	mov	r2, r3
 803b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803b330:	61bb      	str	r3, [r7, #24]
 803b332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b334:	6979      	ldr	r1, [r7, #20]
 803b336:	69ba      	ldr	r2, [r7, #24]
 803b338:	e841 2300 	strex	r3, r2, [r1]
 803b33c:	613b      	str	r3, [r7, #16]
   return(result);
 803b33e:	693b      	ldr	r3, [r7, #16]
 803b340:	2b00      	cmp	r3, #0
 803b342:	d1e6      	bne.n	803b312 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 803b344:	e026      	b.n	803b394 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 803b346:	687b      	ldr	r3, [r7, #4]
 803b348:	681b      	ldr	r3, [r3, #0]
 803b34a:	69db      	ldr	r3, [r3, #28]
 803b34c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803b350:	2b00      	cmp	r3, #0
 803b352:	d018      	beq.n	803b386 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 803b354:	687b      	ldr	r3, [r7, #4]
 803b356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803b358:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 803b35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803b35c:	881b      	ldrh	r3, [r3, #0]
 803b35e:	461a      	mov	r2, r3
 803b360:	687b      	ldr	r3, [r7, #4]
 803b362:	681b      	ldr	r3, [r3, #0]
 803b364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 803b368:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 803b36a:	687b      	ldr	r3, [r7, #4]
 803b36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803b36e:	1c9a      	adds	r2, r3, #2
 803b370:	687b      	ldr	r3, [r7, #4]
 803b372:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 803b374:	687b      	ldr	r3, [r7, #4]
 803b376:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803b37a:	b29b      	uxth	r3, r3
 803b37c:	3b01      	subs	r3, #1
 803b37e:	b29a      	uxth	r2, r3
 803b380:	687b      	ldr	r3, [r7, #4]
 803b382:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 803b386:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803b388:	3b01      	subs	r3, #1
 803b38a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 803b38c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803b38e:	2b00      	cmp	r3, #0
 803b390:	d19f      	bne.n	803b2d2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 803b392:	e7ff      	b.n	803b394 <UART_TxISR_16BIT_FIFOEN+0xde>
 803b394:	bf00      	nop
 803b396:	3744      	adds	r7, #68	; 0x44
 803b398:	46bd      	mov	sp, r7
 803b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b39e:	4770      	bx	lr

0803b3a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 803b3a0:	b580      	push	{r7, lr}
 803b3a2:	b088      	sub	sp, #32
 803b3a4:	af00      	add	r7, sp, #0
 803b3a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803b3a8:	687b      	ldr	r3, [r7, #4]
 803b3aa:	681b      	ldr	r3, [r3, #0]
 803b3ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b3ae:	68fb      	ldr	r3, [r7, #12]
 803b3b0:	e853 3f00 	ldrex	r3, [r3]
 803b3b4:	60bb      	str	r3, [r7, #8]
   return(result);
 803b3b6:	68bb      	ldr	r3, [r7, #8]
 803b3b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803b3bc:	61fb      	str	r3, [r7, #28]
 803b3be:	687b      	ldr	r3, [r7, #4]
 803b3c0:	681b      	ldr	r3, [r3, #0]
 803b3c2:	461a      	mov	r2, r3
 803b3c4:	69fb      	ldr	r3, [r7, #28]
 803b3c6:	61bb      	str	r3, [r7, #24]
 803b3c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b3ca:	6979      	ldr	r1, [r7, #20]
 803b3cc:	69ba      	ldr	r2, [r7, #24]
 803b3ce:	e841 2300 	strex	r3, r2, [r1]
 803b3d2:	613b      	str	r3, [r7, #16]
   return(result);
 803b3d4:	693b      	ldr	r3, [r7, #16]
 803b3d6:	2b00      	cmp	r3, #0
 803b3d8:	d1e6      	bne.n	803b3a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 803b3da:	687b      	ldr	r3, [r7, #4]
 803b3dc:	2220      	movs	r2, #32
 803b3de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 803b3e2:	687b      	ldr	r3, [r7, #4]
 803b3e4:	2200      	movs	r2, #0
 803b3e6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 803b3e8:	6878      	ldr	r0, [r7, #4]
 803b3ea:	f7f2 fd8b 	bl	802df04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 803b3ee:	bf00      	nop
 803b3f0:	3720      	adds	r7, #32
 803b3f2:	46bd      	mov	sp, r7
 803b3f4:	bd80      	pop	{r7, pc}

0803b3f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 803b3f6:	b580      	push	{r7, lr}
 803b3f8:	b096      	sub	sp, #88	; 0x58
 803b3fa:	af00      	add	r7, sp, #0
 803b3fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 803b3fe:	687b      	ldr	r3, [r7, #4]
 803b400:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803b404:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803b408:	687b      	ldr	r3, [r7, #4]
 803b40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803b40e:	2b22      	cmp	r3, #34	; 0x22
 803b410:	f040 8095 	bne.w	803b53e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803b414:	687b      	ldr	r3, [r7, #4]
 803b416:	681b      	ldr	r3, [r3, #0]
 803b418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803b41a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 803b41e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 803b422:	b2d9      	uxtb	r1, r3
 803b424:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 803b428:	b2da      	uxtb	r2, r3
 803b42a:	687b      	ldr	r3, [r7, #4]
 803b42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803b42e:	400a      	ands	r2, r1
 803b430:	b2d2      	uxtb	r2, r2
 803b432:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 803b434:	687b      	ldr	r3, [r7, #4]
 803b436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803b438:	1c5a      	adds	r2, r3, #1
 803b43a:	687b      	ldr	r3, [r7, #4]
 803b43c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 803b43e:	687b      	ldr	r3, [r7, #4]
 803b440:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803b444:	b29b      	uxth	r3, r3
 803b446:	3b01      	subs	r3, #1
 803b448:	b29a      	uxth	r2, r3
 803b44a:	687b      	ldr	r3, [r7, #4]
 803b44c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 803b450:	687b      	ldr	r3, [r7, #4]
 803b452:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803b456:	b29b      	uxth	r3, r3
 803b458:	2b00      	cmp	r3, #0
 803b45a:	d178      	bne.n	803b54e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 803b45c:	687b      	ldr	r3, [r7, #4]
 803b45e:	681b      	ldr	r3, [r3, #0]
 803b460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803b464:	e853 3f00 	ldrex	r3, [r3]
 803b468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803b46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803b46c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 803b470:	653b      	str	r3, [r7, #80]	; 0x50
 803b472:	687b      	ldr	r3, [r7, #4]
 803b474:	681b      	ldr	r3, [r3, #0]
 803b476:	461a      	mov	r2, r3
 803b478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803b47a:	647b      	str	r3, [r7, #68]	; 0x44
 803b47c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b47e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 803b480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803b482:	e841 2300 	strex	r3, r2, [r1]
 803b486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803b488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803b48a:	2b00      	cmp	r3, #0
 803b48c:	d1e6      	bne.n	803b45c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803b48e:	687b      	ldr	r3, [r7, #4]
 803b490:	681b      	ldr	r3, [r3, #0]
 803b492:	3308      	adds	r3, #8
 803b494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b498:	e853 3f00 	ldrex	r3, [r3]
 803b49c:	623b      	str	r3, [r7, #32]
   return(result);
 803b49e:	6a3b      	ldr	r3, [r7, #32]
 803b4a0:	f023 0301 	bic.w	r3, r3, #1
 803b4a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 803b4a6:	687b      	ldr	r3, [r7, #4]
 803b4a8:	681b      	ldr	r3, [r3, #0]
 803b4aa:	3308      	adds	r3, #8
 803b4ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 803b4ae:	633a      	str	r2, [r7, #48]	; 0x30
 803b4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b4b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803b4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803b4b6:	e841 2300 	strex	r3, r2, [r1]
 803b4ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803b4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b4be:	2b00      	cmp	r3, #0
 803b4c0:	d1e5      	bne.n	803b48e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 803b4c2:	687b      	ldr	r3, [r7, #4]
 803b4c4:	2220      	movs	r2, #32
 803b4c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 803b4ca:	687b      	ldr	r3, [r7, #4]
 803b4cc:	2200      	movs	r2, #0
 803b4ce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803b4d0:	687b      	ldr	r3, [r7, #4]
 803b4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803b4d4:	2b01      	cmp	r3, #1
 803b4d6:	d12e      	bne.n	803b536 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803b4d8:	687b      	ldr	r3, [r7, #4]
 803b4da:	2200      	movs	r2, #0
 803b4dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803b4de:	687b      	ldr	r3, [r7, #4]
 803b4e0:	681b      	ldr	r3, [r3, #0]
 803b4e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b4e4:	693b      	ldr	r3, [r7, #16]
 803b4e6:	e853 3f00 	ldrex	r3, [r3]
 803b4ea:	60fb      	str	r3, [r7, #12]
   return(result);
 803b4ec:	68fb      	ldr	r3, [r7, #12]
 803b4ee:	f023 0310 	bic.w	r3, r3, #16
 803b4f2:	64bb      	str	r3, [r7, #72]	; 0x48
 803b4f4:	687b      	ldr	r3, [r7, #4]
 803b4f6:	681b      	ldr	r3, [r3, #0]
 803b4f8:	461a      	mov	r2, r3
 803b4fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803b4fc:	61fb      	str	r3, [r7, #28]
 803b4fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b500:	69b9      	ldr	r1, [r7, #24]
 803b502:	69fa      	ldr	r2, [r7, #28]
 803b504:	e841 2300 	strex	r3, r2, [r1]
 803b508:	617b      	str	r3, [r7, #20]
   return(result);
 803b50a:	697b      	ldr	r3, [r7, #20]
 803b50c:	2b00      	cmp	r3, #0
 803b50e:	d1e6      	bne.n	803b4de <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803b510:	687b      	ldr	r3, [r7, #4]
 803b512:	681b      	ldr	r3, [r3, #0]
 803b514:	69db      	ldr	r3, [r3, #28]
 803b516:	f003 0310 	and.w	r3, r3, #16
 803b51a:	2b10      	cmp	r3, #16
 803b51c:	d103      	bne.n	803b526 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803b51e:	687b      	ldr	r3, [r7, #4]
 803b520:	681b      	ldr	r3, [r3, #0]
 803b522:	2210      	movs	r2, #16
 803b524:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803b526:	687b      	ldr	r3, [r7, #4]
 803b528:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803b52c:	4619      	mov	r1, r3
 803b52e:	6878      	ldr	r0, [r7, #4]
 803b530:	f7fe fcc4 	bl	8039ebc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803b534:	e00b      	b.n	803b54e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803b536:	6878      	ldr	r0, [r7, #4]
 803b538:	f7f2 fcca 	bl	802ded0 <HAL_UART_RxCpltCallback>
}
 803b53c:	e007      	b.n	803b54e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803b53e:	687b      	ldr	r3, [r7, #4]
 803b540:	681b      	ldr	r3, [r3, #0]
 803b542:	699a      	ldr	r2, [r3, #24]
 803b544:	687b      	ldr	r3, [r7, #4]
 803b546:	681b      	ldr	r3, [r3, #0]
 803b548:	f042 0208 	orr.w	r2, r2, #8
 803b54c:	619a      	str	r2, [r3, #24]
}
 803b54e:	bf00      	nop
 803b550:	3758      	adds	r7, #88	; 0x58
 803b552:	46bd      	mov	sp, r7
 803b554:	bd80      	pop	{r7, pc}

0803b556 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 803b556:	b580      	push	{r7, lr}
 803b558:	b096      	sub	sp, #88	; 0x58
 803b55a:	af00      	add	r7, sp, #0
 803b55c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 803b55e:	687b      	ldr	r3, [r7, #4]
 803b560:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803b564:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803b568:	687b      	ldr	r3, [r7, #4]
 803b56a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803b56e:	2b22      	cmp	r3, #34	; 0x22
 803b570:	f040 8095 	bne.w	803b69e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803b574:	687b      	ldr	r3, [r7, #4]
 803b576:	681b      	ldr	r3, [r3, #0]
 803b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803b57a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 803b57e:	687b      	ldr	r3, [r7, #4]
 803b580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803b582:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 803b584:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 803b588:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 803b58c:	4013      	ands	r3, r2
 803b58e:	b29a      	uxth	r2, r3
 803b590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803b592:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 803b594:	687b      	ldr	r3, [r7, #4]
 803b596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803b598:	1c9a      	adds	r2, r3, #2
 803b59a:	687b      	ldr	r3, [r7, #4]
 803b59c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 803b59e:	687b      	ldr	r3, [r7, #4]
 803b5a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803b5a4:	b29b      	uxth	r3, r3
 803b5a6:	3b01      	subs	r3, #1
 803b5a8:	b29a      	uxth	r2, r3
 803b5aa:	687b      	ldr	r3, [r7, #4]
 803b5ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 803b5b0:	687b      	ldr	r3, [r7, #4]
 803b5b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803b5b6:	b29b      	uxth	r3, r3
 803b5b8:	2b00      	cmp	r3, #0
 803b5ba:	d178      	bne.n	803b6ae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 803b5bc:	687b      	ldr	r3, [r7, #4]
 803b5be:	681b      	ldr	r3, [r3, #0]
 803b5c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803b5c4:	e853 3f00 	ldrex	r3, [r3]
 803b5c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803b5cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 803b5d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 803b5d2:	687b      	ldr	r3, [r7, #4]
 803b5d4:	681b      	ldr	r3, [r3, #0]
 803b5d6:	461a      	mov	r2, r3
 803b5d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803b5da:	643b      	str	r3, [r7, #64]	; 0x40
 803b5dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b5de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 803b5e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803b5e2:	e841 2300 	strex	r3, r2, [r1]
 803b5e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803b5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803b5ea:	2b00      	cmp	r3, #0
 803b5ec:	d1e6      	bne.n	803b5bc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803b5ee:	687b      	ldr	r3, [r7, #4]
 803b5f0:	681b      	ldr	r3, [r3, #0]
 803b5f2:	3308      	adds	r3, #8
 803b5f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b5f6:	6a3b      	ldr	r3, [r7, #32]
 803b5f8:	e853 3f00 	ldrex	r3, [r3]
 803b5fc:	61fb      	str	r3, [r7, #28]
   return(result);
 803b5fe:	69fb      	ldr	r3, [r7, #28]
 803b600:	f023 0301 	bic.w	r3, r3, #1
 803b604:	64bb      	str	r3, [r7, #72]	; 0x48
 803b606:	687b      	ldr	r3, [r7, #4]
 803b608:	681b      	ldr	r3, [r3, #0]
 803b60a:	3308      	adds	r3, #8
 803b60c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803b60e:	62fa      	str	r2, [r7, #44]	; 0x2c
 803b610:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803b614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803b616:	e841 2300 	strex	r3, r2, [r1]
 803b61a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803b61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b61e:	2b00      	cmp	r3, #0
 803b620:	d1e5      	bne.n	803b5ee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 803b622:	687b      	ldr	r3, [r7, #4]
 803b624:	2220      	movs	r2, #32
 803b626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 803b62a:	687b      	ldr	r3, [r7, #4]
 803b62c:	2200      	movs	r2, #0
 803b62e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803b630:	687b      	ldr	r3, [r7, #4]
 803b632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803b634:	2b01      	cmp	r3, #1
 803b636:	d12e      	bne.n	803b696 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803b638:	687b      	ldr	r3, [r7, #4]
 803b63a:	2200      	movs	r2, #0
 803b63c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803b63e:	687b      	ldr	r3, [r7, #4]
 803b640:	681b      	ldr	r3, [r3, #0]
 803b642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b644:	68fb      	ldr	r3, [r7, #12]
 803b646:	e853 3f00 	ldrex	r3, [r3]
 803b64a:	60bb      	str	r3, [r7, #8]
   return(result);
 803b64c:	68bb      	ldr	r3, [r7, #8]
 803b64e:	f023 0310 	bic.w	r3, r3, #16
 803b652:	647b      	str	r3, [r7, #68]	; 0x44
 803b654:	687b      	ldr	r3, [r7, #4]
 803b656:	681b      	ldr	r3, [r3, #0]
 803b658:	461a      	mov	r2, r3
 803b65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803b65c:	61bb      	str	r3, [r7, #24]
 803b65e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b660:	6979      	ldr	r1, [r7, #20]
 803b662:	69ba      	ldr	r2, [r7, #24]
 803b664:	e841 2300 	strex	r3, r2, [r1]
 803b668:	613b      	str	r3, [r7, #16]
   return(result);
 803b66a:	693b      	ldr	r3, [r7, #16]
 803b66c:	2b00      	cmp	r3, #0
 803b66e:	d1e6      	bne.n	803b63e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803b670:	687b      	ldr	r3, [r7, #4]
 803b672:	681b      	ldr	r3, [r3, #0]
 803b674:	69db      	ldr	r3, [r3, #28]
 803b676:	f003 0310 	and.w	r3, r3, #16
 803b67a:	2b10      	cmp	r3, #16
 803b67c:	d103      	bne.n	803b686 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803b67e:	687b      	ldr	r3, [r7, #4]
 803b680:	681b      	ldr	r3, [r3, #0]
 803b682:	2210      	movs	r2, #16
 803b684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803b686:	687b      	ldr	r3, [r7, #4]
 803b688:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803b68c:	4619      	mov	r1, r3
 803b68e:	6878      	ldr	r0, [r7, #4]
 803b690:	f7fe fc14 	bl	8039ebc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803b694:	e00b      	b.n	803b6ae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803b696:	6878      	ldr	r0, [r7, #4]
 803b698:	f7f2 fc1a 	bl	802ded0 <HAL_UART_RxCpltCallback>
}
 803b69c:	e007      	b.n	803b6ae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803b69e:	687b      	ldr	r3, [r7, #4]
 803b6a0:	681b      	ldr	r3, [r3, #0]
 803b6a2:	699a      	ldr	r2, [r3, #24]
 803b6a4:	687b      	ldr	r3, [r7, #4]
 803b6a6:	681b      	ldr	r3, [r3, #0]
 803b6a8:	f042 0208 	orr.w	r2, r2, #8
 803b6ac:	619a      	str	r2, [r3, #24]
}
 803b6ae:	bf00      	nop
 803b6b0:	3758      	adds	r7, #88	; 0x58
 803b6b2:	46bd      	mov	sp, r7
 803b6b4:	bd80      	pop	{r7, pc}
	...

0803b6b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803b6b8:	b580      	push	{r7, lr}
 803b6ba:	b0a6      	sub	sp, #152	; 0x98
 803b6bc:	af00      	add	r7, sp, #0
 803b6be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 803b6c0:	687b      	ldr	r3, [r7, #4]
 803b6c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803b6c6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 803b6ca:	687b      	ldr	r3, [r7, #4]
 803b6cc:	681b      	ldr	r3, [r3, #0]
 803b6ce:	69db      	ldr	r3, [r3, #28]
 803b6d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 803b6d4:	687b      	ldr	r3, [r7, #4]
 803b6d6:	681b      	ldr	r3, [r3, #0]
 803b6d8:	681b      	ldr	r3, [r3, #0]
 803b6da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 803b6de:	687b      	ldr	r3, [r7, #4]
 803b6e0:	681b      	ldr	r3, [r3, #0]
 803b6e2:	689b      	ldr	r3, [r3, #8]
 803b6e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803b6e8:	687b      	ldr	r3, [r7, #4]
 803b6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803b6ee:	2b22      	cmp	r3, #34	; 0x22
 803b6f0:	f040 814d 	bne.w	803b98e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 803b6f4:	687b      	ldr	r3, [r7, #4]
 803b6f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803b6fa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803b6fe:	e0f4      	b.n	803b8ea <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803b700:	687b      	ldr	r3, [r7, #4]
 803b702:	681b      	ldr	r3, [r3, #0]
 803b704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803b706:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 803b70a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 803b70e:	b2d9      	uxtb	r1, r3
 803b710:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 803b714:	b2da      	uxtb	r2, r3
 803b716:	687b      	ldr	r3, [r7, #4]
 803b718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803b71a:	400a      	ands	r2, r1
 803b71c:	b2d2      	uxtb	r2, r2
 803b71e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 803b720:	687b      	ldr	r3, [r7, #4]
 803b722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803b724:	1c5a      	adds	r2, r3, #1
 803b726:	687b      	ldr	r3, [r7, #4]
 803b728:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 803b72a:	687b      	ldr	r3, [r7, #4]
 803b72c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803b730:	b29b      	uxth	r3, r3
 803b732:	3b01      	subs	r3, #1
 803b734:	b29a      	uxth	r2, r3
 803b736:	687b      	ldr	r3, [r7, #4]
 803b738:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 803b73c:	687b      	ldr	r3, [r7, #4]
 803b73e:	681b      	ldr	r3, [r3, #0]
 803b740:	69db      	ldr	r3, [r3, #28]
 803b742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 803b746:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803b74a:	f003 0307 	and.w	r3, r3, #7
 803b74e:	2b00      	cmp	r3, #0
 803b750:	d053      	beq.n	803b7fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 803b752:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803b756:	f003 0301 	and.w	r3, r3, #1
 803b75a:	2b00      	cmp	r3, #0
 803b75c:	d011      	beq.n	803b782 <UART_RxISR_8BIT_FIFOEN+0xca>
 803b75e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 803b762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803b766:	2b00      	cmp	r3, #0
 803b768:	d00b      	beq.n	803b782 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803b76a:	687b      	ldr	r3, [r7, #4]
 803b76c:	681b      	ldr	r3, [r3, #0]
 803b76e:	2201      	movs	r2, #1
 803b770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 803b772:	687b      	ldr	r3, [r7, #4]
 803b774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803b778:	f043 0201 	orr.w	r2, r3, #1
 803b77c:	687b      	ldr	r3, [r7, #4]
 803b77e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803b782:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803b786:	f003 0302 	and.w	r3, r3, #2
 803b78a:	2b00      	cmp	r3, #0
 803b78c:	d011      	beq.n	803b7b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 803b78e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803b792:	f003 0301 	and.w	r3, r3, #1
 803b796:	2b00      	cmp	r3, #0
 803b798:	d00b      	beq.n	803b7b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803b79a:	687b      	ldr	r3, [r7, #4]
 803b79c:	681b      	ldr	r3, [r3, #0]
 803b79e:	2202      	movs	r2, #2
 803b7a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 803b7a2:	687b      	ldr	r3, [r7, #4]
 803b7a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803b7a8:	f043 0204 	orr.w	r2, r3, #4
 803b7ac:	687b      	ldr	r3, [r7, #4]
 803b7ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803b7b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803b7b6:	f003 0304 	and.w	r3, r3, #4
 803b7ba:	2b00      	cmp	r3, #0
 803b7bc:	d011      	beq.n	803b7e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 803b7be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803b7c2:	f003 0301 	and.w	r3, r3, #1
 803b7c6:	2b00      	cmp	r3, #0
 803b7c8:	d00b      	beq.n	803b7e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803b7ca:	687b      	ldr	r3, [r7, #4]
 803b7cc:	681b      	ldr	r3, [r3, #0]
 803b7ce:	2204      	movs	r2, #4
 803b7d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 803b7d2:	687b      	ldr	r3, [r7, #4]
 803b7d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803b7d8:	f043 0202 	orr.w	r2, r3, #2
 803b7dc:	687b      	ldr	r3, [r7, #4]
 803b7de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 803b7e2:	687b      	ldr	r3, [r7, #4]
 803b7e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803b7e8:	2b00      	cmp	r3, #0
 803b7ea:	d006      	beq.n	803b7fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803b7ec:	6878      	ldr	r0, [r7, #4]
 803b7ee:	f7fe fb5b 	bl	8039ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 803b7f2:	687b      	ldr	r3, [r7, #4]
 803b7f4:	2200      	movs	r2, #0
 803b7f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 803b7fa:	687b      	ldr	r3, [r7, #4]
 803b7fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803b800:	b29b      	uxth	r3, r3
 803b802:	2b00      	cmp	r3, #0
 803b804:	d171      	bne.n	803b8ea <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803b806:	687b      	ldr	r3, [r7, #4]
 803b808:	681b      	ldr	r3, [r3, #0]
 803b80a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b80c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803b80e:	e853 3f00 	ldrex	r3, [r3]
 803b812:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 803b814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803b816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803b81a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803b81e:	687b      	ldr	r3, [r7, #4]
 803b820:	681b      	ldr	r3, [r3, #0]
 803b822:	461a      	mov	r2, r3
 803b824:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 803b828:	66bb      	str	r3, [r7, #104]	; 0x68
 803b82a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b82c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 803b82e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 803b830:	e841 2300 	strex	r3, r2, [r1]
 803b834:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 803b836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803b838:	2b00      	cmp	r3, #0
 803b83a:	d1e4      	bne.n	803b806 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 803b83c:	687b      	ldr	r3, [r7, #4]
 803b83e:	681b      	ldr	r3, [r3, #0]
 803b840:	3308      	adds	r3, #8
 803b842:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803b846:	e853 3f00 	ldrex	r3, [r3]
 803b84a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 803b84c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803b84e:	4b56      	ldr	r3, [pc, #344]	; (803b9a8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 803b850:	4013      	ands	r3, r2
 803b852:	67fb      	str	r3, [r7, #124]	; 0x7c
 803b854:	687b      	ldr	r3, [r7, #4]
 803b856:	681b      	ldr	r3, [r3, #0]
 803b858:	3308      	adds	r3, #8
 803b85a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 803b85c:	657a      	str	r2, [r7, #84]	; 0x54
 803b85e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b860:	6d39      	ldr	r1, [r7, #80]	; 0x50
 803b862:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 803b864:	e841 2300 	strex	r3, r2, [r1]
 803b868:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 803b86a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803b86c:	2b00      	cmp	r3, #0
 803b86e:	d1e5      	bne.n	803b83c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 803b870:	687b      	ldr	r3, [r7, #4]
 803b872:	2220      	movs	r2, #32
 803b874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803b878:	687b      	ldr	r3, [r7, #4]
 803b87a:	2200      	movs	r2, #0
 803b87c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803b87e:	687b      	ldr	r3, [r7, #4]
 803b880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803b882:	2b01      	cmp	r3, #1
 803b884:	d12e      	bne.n	803b8e4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803b886:	687b      	ldr	r3, [r7, #4]
 803b888:	2200      	movs	r2, #0
 803b88a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803b88c:	687b      	ldr	r3, [r7, #4]
 803b88e:	681b      	ldr	r3, [r3, #0]
 803b890:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803b894:	e853 3f00 	ldrex	r3, [r3]
 803b898:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803b89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803b89c:	f023 0310 	bic.w	r3, r3, #16
 803b8a0:	67bb      	str	r3, [r7, #120]	; 0x78
 803b8a2:	687b      	ldr	r3, [r7, #4]
 803b8a4:	681b      	ldr	r3, [r3, #0]
 803b8a6:	461a      	mov	r2, r3
 803b8a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803b8aa:	643b      	str	r3, [r7, #64]	; 0x40
 803b8ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b8ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 803b8b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803b8b2:	e841 2300 	strex	r3, r2, [r1]
 803b8b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803b8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803b8ba:	2b00      	cmp	r3, #0
 803b8bc:	d1e6      	bne.n	803b88c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803b8be:	687b      	ldr	r3, [r7, #4]
 803b8c0:	681b      	ldr	r3, [r3, #0]
 803b8c2:	69db      	ldr	r3, [r3, #28]
 803b8c4:	f003 0310 	and.w	r3, r3, #16
 803b8c8:	2b10      	cmp	r3, #16
 803b8ca:	d103      	bne.n	803b8d4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803b8cc:	687b      	ldr	r3, [r7, #4]
 803b8ce:	681b      	ldr	r3, [r3, #0]
 803b8d0:	2210      	movs	r2, #16
 803b8d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803b8d4:	687b      	ldr	r3, [r7, #4]
 803b8d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803b8da:	4619      	mov	r1, r3
 803b8dc:	6878      	ldr	r0, [r7, #4]
 803b8de:	f7fe faed 	bl	8039ebc <HAL_UARTEx_RxEventCallback>
 803b8e2:	e002      	b.n	803b8ea <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 803b8e4:	6878      	ldr	r0, [r7, #4]
 803b8e6:	f7f2 faf3 	bl	802ded0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803b8ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 803b8ee:	2b00      	cmp	r3, #0
 803b8f0:	d006      	beq.n	803b900 <UART_RxISR_8BIT_FIFOEN+0x248>
 803b8f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803b8f6:	f003 0320 	and.w	r3, r3, #32
 803b8fa:	2b00      	cmp	r3, #0
 803b8fc:	f47f af00 	bne.w	803b700 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 803b900:	687b      	ldr	r3, [r7, #4]
 803b902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803b906:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 803b90a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 803b90e:	2b00      	cmp	r3, #0
 803b910:	d045      	beq.n	803b99e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 803b912:	687b      	ldr	r3, [r7, #4]
 803b914:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803b918:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 803b91c:	429a      	cmp	r2, r3
 803b91e:	d23e      	bcs.n	803b99e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 803b920:	687b      	ldr	r3, [r7, #4]
 803b922:	681b      	ldr	r3, [r3, #0]
 803b924:	3308      	adds	r3, #8
 803b926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b928:	6a3b      	ldr	r3, [r7, #32]
 803b92a:	e853 3f00 	ldrex	r3, [r3]
 803b92e:	61fb      	str	r3, [r7, #28]
   return(result);
 803b930:	69fb      	ldr	r3, [r7, #28]
 803b932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803b936:	673b      	str	r3, [r7, #112]	; 0x70
 803b938:	687b      	ldr	r3, [r7, #4]
 803b93a:	681b      	ldr	r3, [r3, #0]
 803b93c:	3308      	adds	r3, #8
 803b93e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 803b940:	62fa      	str	r2, [r7, #44]	; 0x2c
 803b942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803b946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803b948:	e841 2300 	strex	r3, r2, [r1]
 803b94c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803b94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b950:	2b00      	cmp	r3, #0
 803b952:	d1e5      	bne.n	803b920 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 803b954:	687b      	ldr	r3, [r7, #4]
 803b956:	4a15      	ldr	r2, [pc, #84]	; (803b9ac <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 803b958:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803b95a:	687b      	ldr	r3, [r7, #4]
 803b95c:	681b      	ldr	r3, [r3, #0]
 803b95e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803b960:	68fb      	ldr	r3, [r7, #12]
 803b962:	e853 3f00 	ldrex	r3, [r3]
 803b966:	60bb      	str	r3, [r7, #8]
   return(result);
 803b968:	68bb      	ldr	r3, [r7, #8]
 803b96a:	f043 0320 	orr.w	r3, r3, #32
 803b96e:	66fb      	str	r3, [r7, #108]	; 0x6c
 803b970:	687b      	ldr	r3, [r7, #4]
 803b972:	681b      	ldr	r3, [r3, #0]
 803b974:	461a      	mov	r2, r3
 803b976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803b978:	61bb      	str	r3, [r7, #24]
 803b97a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803b97c:	6979      	ldr	r1, [r7, #20]
 803b97e:	69ba      	ldr	r2, [r7, #24]
 803b980:	e841 2300 	strex	r3, r2, [r1]
 803b984:	613b      	str	r3, [r7, #16]
   return(result);
 803b986:	693b      	ldr	r3, [r7, #16]
 803b988:	2b00      	cmp	r3, #0
 803b98a:	d1e6      	bne.n	803b95a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803b98c:	e007      	b.n	803b99e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803b98e:	687b      	ldr	r3, [r7, #4]
 803b990:	681b      	ldr	r3, [r3, #0]
 803b992:	699a      	ldr	r2, [r3, #24]
 803b994:	687b      	ldr	r3, [r7, #4]
 803b996:	681b      	ldr	r3, [r3, #0]
 803b998:	f042 0208 	orr.w	r2, r2, #8
 803b99c:	619a      	str	r2, [r3, #24]
}
 803b99e:	bf00      	nop
 803b9a0:	3798      	adds	r7, #152	; 0x98
 803b9a2:	46bd      	mov	sp, r7
 803b9a4:	bd80      	pop	{r7, pc}
 803b9a6:	bf00      	nop
 803b9a8:	effffffe 	.word	0xeffffffe
 803b9ac:	0803b3f7 	.word	0x0803b3f7

0803b9b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803b9b0:	b580      	push	{r7, lr}
 803b9b2:	b0a8      	sub	sp, #160	; 0xa0
 803b9b4:	af00      	add	r7, sp, #0
 803b9b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 803b9b8:	687b      	ldr	r3, [r7, #4]
 803b9ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803b9be:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 803b9c2:	687b      	ldr	r3, [r7, #4]
 803b9c4:	681b      	ldr	r3, [r3, #0]
 803b9c6:	69db      	ldr	r3, [r3, #28]
 803b9c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 803b9cc:	687b      	ldr	r3, [r7, #4]
 803b9ce:	681b      	ldr	r3, [r3, #0]
 803b9d0:	681b      	ldr	r3, [r3, #0]
 803b9d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 803b9d6:	687b      	ldr	r3, [r7, #4]
 803b9d8:	681b      	ldr	r3, [r3, #0]
 803b9da:	689b      	ldr	r3, [r3, #8]
 803b9dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803b9e0:	687b      	ldr	r3, [r7, #4]
 803b9e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803b9e6:	2b22      	cmp	r3, #34	; 0x22
 803b9e8:	f040 8151 	bne.w	803bc8e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 803b9ec:	687b      	ldr	r3, [r7, #4]
 803b9ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803b9f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803b9f6:	e0f8      	b.n	803bbea <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803b9f8:	687b      	ldr	r3, [r7, #4]
 803b9fa:	681b      	ldr	r3, [r3, #0]
 803b9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803b9fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 803ba02:	687b      	ldr	r3, [r7, #4]
 803ba04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803ba06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 803ba0a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 803ba0e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 803ba12:	4013      	ands	r3, r2
 803ba14:	b29a      	uxth	r2, r3
 803ba16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803ba1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 803ba1c:	687b      	ldr	r3, [r7, #4]
 803ba1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803ba20:	1c9a      	adds	r2, r3, #2
 803ba22:	687b      	ldr	r3, [r7, #4]
 803ba24:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 803ba26:	687b      	ldr	r3, [r7, #4]
 803ba28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803ba2c:	b29b      	uxth	r3, r3
 803ba2e:	3b01      	subs	r3, #1
 803ba30:	b29a      	uxth	r2, r3
 803ba32:	687b      	ldr	r3, [r7, #4]
 803ba34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 803ba38:	687b      	ldr	r3, [r7, #4]
 803ba3a:	681b      	ldr	r3, [r3, #0]
 803ba3c:	69db      	ldr	r3, [r3, #28]
 803ba3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 803ba42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803ba46:	f003 0307 	and.w	r3, r3, #7
 803ba4a:	2b00      	cmp	r3, #0
 803ba4c:	d053      	beq.n	803baf6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 803ba4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803ba52:	f003 0301 	and.w	r3, r3, #1
 803ba56:	2b00      	cmp	r3, #0
 803ba58:	d011      	beq.n	803ba7e <UART_RxISR_16BIT_FIFOEN+0xce>
 803ba5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803ba5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803ba62:	2b00      	cmp	r3, #0
 803ba64:	d00b      	beq.n	803ba7e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803ba66:	687b      	ldr	r3, [r7, #4]
 803ba68:	681b      	ldr	r3, [r3, #0]
 803ba6a:	2201      	movs	r2, #1
 803ba6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 803ba6e:	687b      	ldr	r3, [r7, #4]
 803ba70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803ba74:	f043 0201 	orr.w	r2, r3, #1
 803ba78:	687b      	ldr	r3, [r7, #4]
 803ba7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803ba7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803ba82:	f003 0302 	and.w	r3, r3, #2
 803ba86:	2b00      	cmp	r3, #0
 803ba88:	d011      	beq.n	803baae <UART_RxISR_16BIT_FIFOEN+0xfe>
 803ba8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 803ba8e:	f003 0301 	and.w	r3, r3, #1
 803ba92:	2b00      	cmp	r3, #0
 803ba94:	d00b      	beq.n	803baae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803ba96:	687b      	ldr	r3, [r7, #4]
 803ba98:	681b      	ldr	r3, [r3, #0]
 803ba9a:	2202      	movs	r2, #2
 803ba9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 803ba9e:	687b      	ldr	r3, [r7, #4]
 803baa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803baa4:	f043 0204 	orr.w	r2, r3, #4
 803baa8:	687b      	ldr	r3, [r7, #4]
 803baaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803baae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803bab2:	f003 0304 	and.w	r3, r3, #4
 803bab6:	2b00      	cmp	r3, #0
 803bab8:	d011      	beq.n	803bade <UART_RxISR_16BIT_FIFOEN+0x12e>
 803baba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 803babe:	f003 0301 	and.w	r3, r3, #1
 803bac2:	2b00      	cmp	r3, #0
 803bac4:	d00b      	beq.n	803bade <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803bac6:	687b      	ldr	r3, [r7, #4]
 803bac8:	681b      	ldr	r3, [r3, #0]
 803baca:	2204      	movs	r2, #4
 803bacc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 803bace:	687b      	ldr	r3, [r7, #4]
 803bad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803bad4:	f043 0202 	orr.w	r2, r3, #2
 803bad8:	687b      	ldr	r3, [r7, #4]
 803bada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 803bade:	687b      	ldr	r3, [r7, #4]
 803bae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803bae4:	2b00      	cmp	r3, #0
 803bae6:	d006      	beq.n	803baf6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803bae8:	6878      	ldr	r0, [r7, #4]
 803baea:	f7fe f9dd 	bl	8039ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 803baee:	687b      	ldr	r3, [r7, #4]
 803baf0:	2200      	movs	r2, #0
 803baf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 803baf6:	687b      	ldr	r3, [r7, #4]
 803baf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803bafc:	b29b      	uxth	r3, r3
 803bafe:	2b00      	cmp	r3, #0
 803bb00:	d173      	bne.n	803bbea <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803bb02:	687b      	ldr	r3, [r7, #4]
 803bb04:	681b      	ldr	r3, [r3, #0]
 803bb06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803bb08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803bb0a:	e853 3f00 	ldrex	r3, [r3]
 803bb0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 803bb10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803bb12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803bb16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 803bb1a:	687b      	ldr	r3, [r7, #4]
 803bb1c:	681b      	ldr	r3, [r3, #0]
 803bb1e:	461a      	mov	r2, r3
 803bb20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 803bb24:	66fb      	str	r3, [r7, #108]	; 0x6c
 803bb26:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803bb28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 803bb2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 803bb2c:	e841 2300 	strex	r3, r2, [r1]
 803bb30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 803bb32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803bb34:	2b00      	cmp	r3, #0
 803bb36:	d1e4      	bne.n	803bb02 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 803bb38:	687b      	ldr	r3, [r7, #4]
 803bb3a:	681b      	ldr	r3, [r3, #0]
 803bb3c:	3308      	adds	r3, #8
 803bb3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803bb40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803bb42:	e853 3f00 	ldrex	r3, [r3]
 803bb46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 803bb48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803bb4a:	4b57      	ldr	r3, [pc, #348]	; (803bca8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 803bb4c:	4013      	ands	r3, r2
 803bb4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803bb52:	687b      	ldr	r3, [r7, #4]
 803bb54:	681b      	ldr	r3, [r3, #0]
 803bb56:	3308      	adds	r3, #8
 803bb58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 803bb5c:	65ba      	str	r2, [r7, #88]	; 0x58
 803bb5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803bb60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 803bb62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 803bb64:	e841 2300 	strex	r3, r2, [r1]
 803bb68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 803bb6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803bb6c:	2b00      	cmp	r3, #0
 803bb6e:	d1e3      	bne.n	803bb38 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 803bb70:	687b      	ldr	r3, [r7, #4]
 803bb72:	2220      	movs	r2, #32
 803bb74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803bb78:	687b      	ldr	r3, [r7, #4]
 803bb7a:	2200      	movs	r2, #0
 803bb7c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803bb7e:	687b      	ldr	r3, [r7, #4]
 803bb80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803bb82:	2b01      	cmp	r3, #1
 803bb84:	d12e      	bne.n	803bbe4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803bb86:	687b      	ldr	r3, [r7, #4]
 803bb88:	2200      	movs	r2, #0
 803bb8a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803bb8c:	687b      	ldr	r3, [r7, #4]
 803bb8e:	681b      	ldr	r3, [r3, #0]
 803bb90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803bb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803bb94:	e853 3f00 	ldrex	r3, [r3]
 803bb98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803bb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803bb9c:	f023 0310 	bic.w	r3, r3, #16
 803bba0:	67fb      	str	r3, [r7, #124]	; 0x7c
 803bba2:	687b      	ldr	r3, [r7, #4]
 803bba4:	681b      	ldr	r3, [r3, #0]
 803bba6:	461a      	mov	r2, r3
 803bba8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 803bbaa:	647b      	str	r3, [r7, #68]	; 0x44
 803bbac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803bbae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 803bbb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803bbb2:	e841 2300 	strex	r3, r2, [r1]
 803bbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803bbb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803bbba:	2b00      	cmp	r3, #0
 803bbbc:	d1e6      	bne.n	803bb8c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803bbbe:	687b      	ldr	r3, [r7, #4]
 803bbc0:	681b      	ldr	r3, [r3, #0]
 803bbc2:	69db      	ldr	r3, [r3, #28]
 803bbc4:	f003 0310 	and.w	r3, r3, #16
 803bbc8:	2b10      	cmp	r3, #16
 803bbca:	d103      	bne.n	803bbd4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803bbcc:	687b      	ldr	r3, [r7, #4]
 803bbce:	681b      	ldr	r3, [r3, #0]
 803bbd0:	2210      	movs	r2, #16
 803bbd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803bbd4:	687b      	ldr	r3, [r7, #4]
 803bbd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803bbda:	4619      	mov	r1, r3
 803bbdc:	6878      	ldr	r0, [r7, #4]
 803bbde:	f7fe f96d 	bl	8039ebc <HAL_UARTEx_RxEventCallback>
 803bbe2:	e002      	b.n	803bbea <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 803bbe4:	6878      	ldr	r0, [r7, #4]
 803bbe6:	f7f2 f973 	bl	802ded0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803bbea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 803bbee:	2b00      	cmp	r3, #0
 803bbf0:	d006      	beq.n	803bc00 <UART_RxISR_16BIT_FIFOEN+0x250>
 803bbf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803bbf6:	f003 0320 	and.w	r3, r3, #32
 803bbfa:	2b00      	cmp	r3, #0
 803bbfc:	f47f aefc 	bne.w	803b9f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 803bc00:	687b      	ldr	r3, [r7, #4]
 803bc02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803bc06:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 803bc0a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 803bc0e:	2b00      	cmp	r3, #0
 803bc10:	d045      	beq.n	803bc9e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 803bc12:	687b      	ldr	r3, [r7, #4]
 803bc14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803bc18:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 803bc1c:	429a      	cmp	r2, r3
 803bc1e:	d23e      	bcs.n	803bc9e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 803bc20:	687b      	ldr	r3, [r7, #4]
 803bc22:	681b      	ldr	r3, [r3, #0]
 803bc24:	3308      	adds	r3, #8
 803bc26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803bc2a:	e853 3f00 	ldrex	r3, [r3]
 803bc2e:	623b      	str	r3, [r7, #32]
   return(result);
 803bc30:	6a3b      	ldr	r3, [r7, #32]
 803bc32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803bc36:	677b      	str	r3, [r7, #116]	; 0x74
 803bc38:	687b      	ldr	r3, [r7, #4]
 803bc3a:	681b      	ldr	r3, [r3, #0]
 803bc3c:	3308      	adds	r3, #8
 803bc3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 803bc40:	633a      	str	r2, [r7, #48]	; 0x30
 803bc42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803bc44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803bc46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803bc48:	e841 2300 	strex	r3, r2, [r1]
 803bc4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803bc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803bc50:	2b00      	cmp	r3, #0
 803bc52:	d1e5      	bne.n	803bc20 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 803bc54:	687b      	ldr	r3, [r7, #4]
 803bc56:	4a15      	ldr	r2, [pc, #84]	; (803bcac <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 803bc58:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803bc5a:	687b      	ldr	r3, [r7, #4]
 803bc5c:	681b      	ldr	r3, [r3, #0]
 803bc5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803bc60:	693b      	ldr	r3, [r7, #16]
 803bc62:	e853 3f00 	ldrex	r3, [r3]
 803bc66:	60fb      	str	r3, [r7, #12]
   return(result);
 803bc68:	68fb      	ldr	r3, [r7, #12]
 803bc6a:	f043 0320 	orr.w	r3, r3, #32
 803bc6e:	673b      	str	r3, [r7, #112]	; 0x70
 803bc70:	687b      	ldr	r3, [r7, #4]
 803bc72:	681b      	ldr	r3, [r3, #0]
 803bc74:	461a      	mov	r2, r3
 803bc76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 803bc78:	61fb      	str	r3, [r7, #28]
 803bc7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803bc7c:	69b9      	ldr	r1, [r7, #24]
 803bc7e:	69fa      	ldr	r2, [r7, #28]
 803bc80:	e841 2300 	strex	r3, r2, [r1]
 803bc84:	617b      	str	r3, [r7, #20]
   return(result);
 803bc86:	697b      	ldr	r3, [r7, #20]
 803bc88:	2b00      	cmp	r3, #0
 803bc8a:	d1e6      	bne.n	803bc5a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803bc8c:	e007      	b.n	803bc9e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803bc8e:	687b      	ldr	r3, [r7, #4]
 803bc90:	681b      	ldr	r3, [r3, #0]
 803bc92:	699a      	ldr	r2, [r3, #24]
 803bc94:	687b      	ldr	r3, [r7, #4]
 803bc96:	681b      	ldr	r3, [r3, #0]
 803bc98:	f042 0208 	orr.w	r2, r2, #8
 803bc9c:	619a      	str	r2, [r3, #24]
}
 803bc9e:	bf00      	nop
 803bca0:	37a0      	adds	r7, #160	; 0xa0
 803bca2:	46bd      	mov	sp, r7
 803bca4:	bd80      	pop	{r7, pc}
 803bca6:	bf00      	nop
 803bca8:	effffffe 	.word	0xeffffffe
 803bcac:	0803b557 	.word	0x0803b557

0803bcb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 803bcb0:	b480      	push	{r7}
 803bcb2:	b083      	sub	sp, #12
 803bcb4:	af00      	add	r7, sp, #0
 803bcb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 803bcb8:	bf00      	nop
 803bcba:	370c      	adds	r7, #12
 803bcbc:	46bd      	mov	sp, r7
 803bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bcc2:	4770      	bx	lr

0803bcc4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 803bcc4:	b480      	push	{r7}
 803bcc6:	b083      	sub	sp, #12
 803bcc8:	af00      	add	r7, sp, #0
 803bcca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 803bccc:	bf00      	nop
 803bcce:	370c      	adds	r7, #12
 803bcd0:	46bd      	mov	sp, r7
 803bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bcd6:	4770      	bx	lr

0803bcd8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 803bcd8:	b480      	push	{r7}
 803bcda:	b083      	sub	sp, #12
 803bcdc:	af00      	add	r7, sp, #0
 803bcde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 803bce0:	bf00      	nop
 803bce2:	370c      	adds	r7, #12
 803bce4:	46bd      	mov	sp, r7
 803bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bcea:	4770      	bx	lr

0803bcec <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 803bcec:	b580      	push	{r7, lr}
 803bcee:	b084      	sub	sp, #16
 803bcf0:	af00      	add	r7, sp, #0
 803bcf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 803bcf4:	687b      	ldr	r3, [r7, #4]
 803bcf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803bcfa:	2b01      	cmp	r3, #1
 803bcfc:	d101      	bne.n	803bd02 <HAL_UARTEx_EnableFifoMode+0x16>
 803bcfe:	2302      	movs	r3, #2
 803bd00:	e02b      	b.n	803bd5a <HAL_UARTEx_EnableFifoMode+0x6e>
 803bd02:	687b      	ldr	r3, [r7, #4]
 803bd04:	2201      	movs	r2, #1
 803bd06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803bd0a:	687b      	ldr	r3, [r7, #4]
 803bd0c:	2224      	movs	r2, #36	; 0x24
 803bd0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803bd12:	687b      	ldr	r3, [r7, #4]
 803bd14:	681b      	ldr	r3, [r3, #0]
 803bd16:	681b      	ldr	r3, [r3, #0]
 803bd18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803bd1a:	687b      	ldr	r3, [r7, #4]
 803bd1c:	681b      	ldr	r3, [r3, #0]
 803bd1e:	681a      	ldr	r2, [r3, #0]
 803bd20:	687b      	ldr	r3, [r7, #4]
 803bd22:	681b      	ldr	r3, [r3, #0]
 803bd24:	f022 0201 	bic.w	r2, r2, #1
 803bd28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 803bd2a:	68fb      	ldr	r3, [r7, #12]
 803bd2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803bd30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 803bd32:	687b      	ldr	r3, [r7, #4]
 803bd34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 803bd38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803bd3a:	687b      	ldr	r3, [r7, #4]
 803bd3c:	681b      	ldr	r3, [r3, #0]
 803bd3e:	68fa      	ldr	r2, [r7, #12]
 803bd40:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 803bd42:	6878      	ldr	r0, [r7, #4]
 803bd44:	f000 f8c2 	bl	803becc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 803bd48:	687b      	ldr	r3, [r7, #4]
 803bd4a:	2220      	movs	r2, #32
 803bd4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803bd50:	687b      	ldr	r3, [r7, #4]
 803bd52:	2200      	movs	r2, #0
 803bd54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803bd58:	2300      	movs	r3, #0
}
 803bd5a:	4618      	mov	r0, r3
 803bd5c:	3710      	adds	r7, #16
 803bd5e:	46bd      	mov	sp, r7
 803bd60:	bd80      	pop	{r7, pc}

0803bd62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 803bd62:	b480      	push	{r7}
 803bd64:	b085      	sub	sp, #20
 803bd66:	af00      	add	r7, sp, #0
 803bd68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 803bd6a:	687b      	ldr	r3, [r7, #4]
 803bd6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803bd70:	2b01      	cmp	r3, #1
 803bd72:	d101      	bne.n	803bd78 <HAL_UARTEx_DisableFifoMode+0x16>
 803bd74:	2302      	movs	r3, #2
 803bd76:	e027      	b.n	803bdc8 <HAL_UARTEx_DisableFifoMode+0x66>
 803bd78:	687b      	ldr	r3, [r7, #4]
 803bd7a:	2201      	movs	r2, #1
 803bd7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803bd80:	687b      	ldr	r3, [r7, #4]
 803bd82:	2224      	movs	r2, #36	; 0x24
 803bd84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803bd88:	687b      	ldr	r3, [r7, #4]
 803bd8a:	681b      	ldr	r3, [r3, #0]
 803bd8c:	681b      	ldr	r3, [r3, #0]
 803bd8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803bd90:	687b      	ldr	r3, [r7, #4]
 803bd92:	681b      	ldr	r3, [r3, #0]
 803bd94:	681a      	ldr	r2, [r3, #0]
 803bd96:	687b      	ldr	r3, [r7, #4]
 803bd98:	681b      	ldr	r3, [r3, #0]
 803bd9a:	f022 0201 	bic.w	r2, r2, #1
 803bd9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 803bda0:	68fb      	ldr	r3, [r7, #12]
 803bda2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 803bda6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 803bda8:	687b      	ldr	r3, [r7, #4]
 803bdaa:	2200      	movs	r2, #0
 803bdac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803bdae:	687b      	ldr	r3, [r7, #4]
 803bdb0:	681b      	ldr	r3, [r3, #0]
 803bdb2:	68fa      	ldr	r2, [r7, #12]
 803bdb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803bdb6:	687b      	ldr	r3, [r7, #4]
 803bdb8:	2220      	movs	r2, #32
 803bdba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803bdbe:	687b      	ldr	r3, [r7, #4]
 803bdc0:	2200      	movs	r2, #0
 803bdc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803bdc6:	2300      	movs	r3, #0
}
 803bdc8:	4618      	mov	r0, r3
 803bdca:	3714      	adds	r7, #20
 803bdcc:	46bd      	mov	sp, r7
 803bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bdd2:	4770      	bx	lr

0803bdd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 803bdd4:	b580      	push	{r7, lr}
 803bdd6:	b084      	sub	sp, #16
 803bdd8:	af00      	add	r7, sp, #0
 803bdda:	6078      	str	r0, [r7, #4]
 803bddc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803bdde:	687b      	ldr	r3, [r7, #4]
 803bde0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803bde4:	2b01      	cmp	r3, #1
 803bde6:	d101      	bne.n	803bdec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 803bde8:	2302      	movs	r3, #2
 803bdea:	e02d      	b.n	803be48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 803bdec:	687b      	ldr	r3, [r7, #4]
 803bdee:	2201      	movs	r2, #1
 803bdf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803bdf4:	687b      	ldr	r3, [r7, #4]
 803bdf6:	2224      	movs	r2, #36	; 0x24
 803bdf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803bdfc:	687b      	ldr	r3, [r7, #4]
 803bdfe:	681b      	ldr	r3, [r3, #0]
 803be00:	681b      	ldr	r3, [r3, #0]
 803be02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803be04:	687b      	ldr	r3, [r7, #4]
 803be06:	681b      	ldr	r3, [r3, #0]
 803be08:	681a      	ldr	r2, [r3, #0]
 803be0a:	687b      	ldr	r3, [r7, #4]
 803be0c:	681b      	ldr	r3, [r3, #0]
 803be0e:	f022 0201 	bic.w	r2, r2, #1
 803be12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 803be14:	687b      	ldr	r3, [r7, #4]
 803be16:	681b      	ldr	r3, [r3, #0]
 803be18:	689b      	ldr	r3, [r3, #8]
 803be1a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 803be1e:	687b      	ldr	r3, [r7, #4]
 803be20:	681b      	ldr	r3, [r3, #0]
 803be22:	683a      	ldr	r2, [r7, #0]
 803be24:	430a      	orrs	r2, r1
 803be26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 803be28:	6878      	ldr	r0, [r7, #4]
 803be2a:	f000 f84f 	bl	803becc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803be2e:	687b      	ldr	r3, [r7, #4]
 803be30:	681b      	ldr	r3, [r3, #0]
 803be32:	68fa      	ldr	r2, [r7, #12]
 803be34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803be36:	687b      	ldr	r3, [r7, #4]
 803be38:	2220      	movs	r2, #32
 803be3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803be3e:	687b      	ldr	r3, [r7, #4]
 803be40:	2200      	movs	r2, #0
 803be42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803be46:	2300      	movs	r3, #0
}
 803be48:	4618      	mov	r0, r3
 803be4a:	3710      	adds	r7, #16
 803be4c:	46bd      	mov	sp, r7
 803be4e:	bd80      	pop	{r7, pc}

0803be50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 803be50:	b580      	push	{r7, lr}
 803be52:	b084      	sub	sp, #16
 803be54:	af00      	add	r7, sp, #0
 803be56:	6078      	str	r0, [r7, #4]
 803be58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803be5a:	687b      	ldr	r3, [r7, #4]
 803be5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803be60:	2b01      	cmp	r3, #1
 803be62:	d101      	bne.n	803be68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 803be64:	2302      	movs	r3, #2
 803be66:	e02d      	b.n	803bec4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 803be68:	687b      	ldr	r3, [r7, #4]
 803be6a:	2201      	movs	r2, #1
 803be6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803be70:	687b      	ldr	r3, [r7, #4]
 803be72:	2224      	movs	r2, #36	; 0x24
 803be74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803be78:	687b      	ldr	r3, [r7, #4]
 803be7a:	681b      	ldr	r3, [r3, #0]
 803be7c:	681b      	ldr	r3, [r3, #0]
 803be7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803be80:	687b      	ldr	r3, [r7, #4]
 803be82:	681b      	ldr	r3, [r3, #0]
 803be84:	681a      	ldr	r2, [r3, #0]
 803be86:	687b      	ldr	r3, [r7, #4]
 803be88:	681b      	ldr	r3, [r3, #0]
 803be8a:	f022 0201 	bic.w	r2, r2, #1
 803be8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 803be90:	687b      	ldr	r3, [r7, #4]
 803be92:	681b      	ldr	r3, [r3, #0]
 803be94:	689b      	ldr	r3, [r3, #8]
 803be96:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 803be9a:	687b      	ldr	r3, [r7, #4]
 803be9c:	681b      	ldr	r3, [r3, #0]
 803be9e:	683a      	ldr	r2, [r7, #0]
 803bea0:	430a      	orrs	r2, r1
 803bea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 803bea4:	6878      	ldr	r0, [r7, #4]
 803bea6:	f000 f811 	bl	803becc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803beaa:	687b      	ldr	r3, [r7, #4]
 803beac:	681b      	ldr	r3, [r3, #0]
 803beae:	68fa      	ldr	r2, [r7, #12]
 803beb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803beb2:	687b      	ldr	r3, [r7, #4]
 803beb4:	2220      	movs	r2, #32
 803beb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803beba:	687b      	ldr	r3, [r7, #4]
 803bebc:	2200      	movs	r2, #0
 803bebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803bec2:	2300      	movs	r3, #0
}
 803bec4:	4618      	mov	r0, r3
 803bec6:	3710      	adds	r7, #16
 803bec8:	46bd      	mov	sp, r7
 803beca:	bd80      	pop	{r7, pc}

0803becc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 803becc:	b480      	push	{r7}
 803bece:	b085      	sub	sp, #20
 803bed0:	af00      	add	r7, sp, #0
 803bed2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 803bed4:	687b      	ldr	r3, [r7, #4]
 803bed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803bed8:	2b00      	cmp	r3, #0
 803beda:	d108      	bne.n	803beee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 803bedc:	687b      	ldr	r3, [r7, #4]
 803bede:	2201      	movs	r2, #1
 803bee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 803bee4:	687b      	ldr	r3, [r7, #4]
 803bee6:	2201      	movs	r2, #1
 803bee8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 803beec:	e031      	b.n	803bf52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 803beee:	2310      	movs	r3, #16
 803bef0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 803bef2:	2310      	movs	r3, #16
 803bef4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 803bef6:	687b      	ldr	r3, [r7, #4]
 803bef8:	681b      	ldr	r3, [r3, #0]
 803befa:	689b      	ldr	r3, [r3, #8]
 803befc:	0e5b      	lsrs	r3, r3, #25
 803befe:	b2db      	uxtb	r3, r3
 803bf00:	f003 0307 	and.w	r3, r3, #7
 803bf04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 803bf06:	687b      	ldr	r3, [r7, #4]
 803bf08:	681b      	ldr	r3, [r3, #0]
 803bf0a:	689b      	ldr	r3, [r3, #8]
 803bf0c:	0f5b      	lsrs	r3, r3, #29
 803bf0e:	b2db      	uxtb	r3, r3
 803bf10:	f003 0307 	and.w	r3, r3, #7
 803bf14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 803bf16:	7bbb      	ldrb	r3, [r7, #14]
 803bf18:	7b3a      	ldrb	r2, [r7, #12]
 803bf1a:	4911      	ldr	r1, [pc, #68]	; (803bf60 <UARTEx_SetNbDataToProcess+0x94>)
 803bf1c:	5c8a      	ldrb	r2, [r1, r2]
 803bf1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 803bf22:	7b3a      	ldrb	r2, [r7, #12]
 803bf24:	490f      	ldr	r1, [pc, #60]	; (803bf64 <UARTEx_SetNbDataToProcess+0x98>)
 803bf26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 803bf28:	fb93 f3f2 	sdiv	r3, r3, r2
 803bf2c:	b29a      	uxth	r2, r3
 803bf2e:	687b      	ldr	r3, [r7, #4]
 803bf30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 803bf34:	7bfb      	ldrb	r3, [r7, #15]
 803bf36:	7b7a      	ldrb	r2, [r7, #13]
 803bf38:	4909      	ldr	r1, [pc, #36]	; (803bf60 <UARTEx_SetNbDataToProcess+0x94>)
 803bf3a:	5c8a      	ldrb	r2, [r1, r2]
 803bf3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 803bf40:	7b7a      	ldrb	r2, [r7, #13]
 803bf42:	4908      	ldr	r1, [pc, #32]	; (803bf64 <UARTEx_SetNbDataToProcess+0x98>)
 803bf44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 803bf46:	fb93 f3f2 	sdiv	r3, r3, r2
 803bf4a:	b29a      	uxth	r2, r3
 803bf4c:	687b      	ldr	r3, [r7, #4]
 803bf4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 803bf52:	bf00      	nop
 803bf54:	3714      	adds	r7, #20
 803bf56:	46bd      	mov	sp, r7
 803bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bf5c:	4770      	bx	lr
 803bf5e:	bf00      	nop
 803bf60:	0805c644 	.word	0x0805c644
 803bf64:	0805c64c 	.word	0x0805c64c

0803bf68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 803bf68:	b084      	sub	sp, #16
 803bf6a:	b580      	push	{r7, lr}
 803bf6c:	b084      	sub	sp, #16
 803bf6e:	af00      	add	r7, sp, #0
 803bf70:	6078      	str	r0, [r7, #4]
 803bf72:	f107 001c 	add.w	r0, r7, #28
 803bf76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 803bf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803bf7c:	2b01      	cmp	r3, #1
 803bf7e:	d120      	bne.n	803bfc2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 803bf80:	687b      	ldr	r3, [r7, #4]
 803bf82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803bf84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 803bf88:	687b      	ldr	r3, [r7, #4]
 803bf8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 803bf8c:	687b      	ldr	r3, [r7, #4]
 803bf8e:	68da      	ldr	r2, [r3, #12]
 803bf90:	4b2a      	ldr	r3, [pc, #168]	; (803c03c <USB_CoreInit+0xd4>)
 803bf92:	4013      	ands	r3, r2
 803bf94:	687a      	ldr	r2, [r7, #4]
 803bf96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 803bf98:	687b      	ldr	r3, [r7, #4]
 803bf9a:	68db      	ldr	r3, [r3, #12]
 803bf9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 803bfa0:	687b      	ldr	r3, [r7, #4]
 803bfa2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 803bfa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803bfa6:	2b01      	cmp	r3, #1
 803bfa8:	d105      	bne.n	803bfb6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 803bfaa:	687b      	ldr	r3, [r7, #4]
 803bfac:	68db      	ldr	r3, [r3, #12]
 803bfae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 803bfb2:	687b      	ldr	r3, [r7, #4]
 803bfb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 803bfb6:	6878      	ldr	r0, [r7, #4]
 803bfb8:	f001 fc04 	bl	803d7c4 <USB_CoreReset>
 803bfbc:	4603      	mov	r3, r0
 803bfbe:	73fb      	strb	r3, [r7, #15]
 803bfc0:	e01a      	b.n	803bff8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 803bfc2:	687b      	ldr	r3, [r7, #4]
 803bfc4:	68db      	ldr	r3, [r3, #12]
 803bfc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803bfca:	687b      	ldr	r3, [r7, #4]
 803bfcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 803bfce:	6878      	ldr	r0, [r7, #4]
 803bfd0:	f001 fbf8 	bl	803d7c4 <USB_CoreReset>
 803bfd4:	4603      	mov	r3, r0
 803bfd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 803bfd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803bfda:	2b00      	cmp	r3, #0
 803bfdc:	d106      	bne.n	803bfec <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 803bfde:	687b      	ldr	r3, [r7, #4]
 803bfe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803bfe2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 803bfe6:	687b      	ldr	r3, [r7, #4]
 803bfe8:	639a      	str	r2, [r3, #56]	; 0x38
 803bfea:	e005      	b.n	803bff8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 803bfec:	687b      	ldr	r3, [r7, #4]
 803bfee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803bff0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 803bff4:	687b      	ldr	r3, [r7, #4]
 803bff6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 803bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803bffa:	2b01      	cmp	r3, #1
 803bffc:	d116      	bne.n	803c02c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 803bffe:	687b      	ldr	r3, [r7, #4]
 803c000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803c002:	b29a      	uxth	r2, r3
 803c004:	687b      	ldr	r3, [r7, #4]
 803c006:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 803c008:	687b      	ldr	r3, [r7, #4]
 803c00a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 803c00c:	4b0c      	ldr	r3, [pc, #48]	; (803c040 <USB_CoreInit+0xd8>)
 803c00e:	4313      	orrs	r3, r2
 803c010:	687a      	ldr	r2, [r7, #4]
 803c012:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 803c014:	687b      	ldr	r3, [r7, #4]
 803c016:	689b      	ldr	r3, [r3, #8]
 803c018:	f043 0206 	orr.w	r2, r3, #6
 803c01c:	687b      	ldr	r3, [r7, #4]
 803c01e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 803c020:	687b      	ldr	r3, [r7, #4]
 803c022:	689b      	ldr	r3, [r3, #8]
 803c024:	f043 0220 	orr.w	r2, r3, #32
 803c028:	687b      	ldr	r3, [r7, #4]
 803c02a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 803c02c:	7bfb      	ldrb	r3, [r7, #15]
}
 803c02e:	4618      	mov	r0, r3
 803c030:	3710      	adds	r7, #16
 803c032:	46bd      	mov	sp, r7
 803c034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803c038:	b004      	add	sp, #16
 803c03a:	4770      	bx	lr
 803c03c:	ffbdffbf 	.word	0xffbdffbf
 803c040:	03ee0000 	.word	0x03ee0000

0803c044 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 803c044:	b480      	push	{r7}
 803c046:	b087      	sub	sp, #28
 803c048:	af00      	add	r7, sp, #0
 803c04a:	60f8      	str	r0, [r7, #12]
 803c04c:	60b9      	str	r1, [r7, #8]
 803c04e:	4613      	mov	r3, r2
 803c050:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 803c052:	79fb      	ldrb	r3, [r7, #7]
 803c054:	2b02      	cmp	r3, #2
 803c056:	d165      	bne.n	803c124 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 803c058:	68bb      	ldr	r3, [r7, #8]
 803c05a:	4a41      	ldr	r2, [pc, #260]	; (803c160 <USB_SetTurnaroundTime+0x11c>)
 803c05c:	4293      	cmp	r3, r2
 803c05e:	d906      	bls.n	803c06e <USB_SetTurnaroundTime+0x2a>
 803c060:	68bb      	ldr	r3, [r7, #8]
 803c062:	4a40      	ldr	r2, [pc, #256]	; (803c164 <USB_SetTurnaroundTime+0x120>)
 803c064:	4293      	cmp	r3, r2
 803c066:	d202      	bcs.n	803c06e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 803c068:	230f      	movs	r3, #15
 803c06a:	617b      	str	r3, [r7, #20]
 803c06c:	e062      	b.n	803c134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 803c06e:	68bb      	ldr	r3, [r7, #8]
 803c070:	4a3c      	ldr	r2, [pc, #240]	; (803c164 <USB_SetTurnaroundTime+0x120>)
 803c072:	4293      	cmp	r3, r2
 803c074:	d306      	bcc.n	803c084 <USB_SetTurnaroundTime+0x40>
 803c076:	68bb      	ldr	r3, [r7, #8]
 803c078:	4a3b      	ldr	r2, [pc, #236]	; (803c168 <USB_SetTurnaroundTime+0x124>)
 803c07a:	4293      	cmp	r3, r2
 803c07c:	d202      	bcs.n	803c084 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 803c07e:	230e      	movs	r3, #14
 803c080:	617b      	str	r3, [r7, #20]
 803c082:	e057      	b.n	803c134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 803c084:	68bb      	ldr	r3, [r7, #8]
 803c086:	4a38      	ldr	r2, [pc, #224]	; (803c168 <USB_SetTurnaroundTime+0x124>)
 803c088:	4293      	cmp	r3, r2
 803c08a:	d306      	bcc.n	803c09a <USB_SetTurnaroundTime+0x56>
 803c08c:	68bb      	ldr	r3, [r7, #8]
 803c08e:	4a37      	ldr	r2, [pc, #220]	; (803c16c <USB_SetTurnaroundTime+0x128>)
 803c090:	4293      	cmp	r3, r2
 803c092:	d202      	bcs.n	803c09a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 803c094:	230d      	movs	r3, #13
 803c096:	617b      	str	r3, [r7, #20]
 803c098:	e04c      	b.n	803c134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 803c09a:	68bb      	ldr	r3, [r7, #8]
 803c09c:	4a33      	ldr	r2, [pc, #204]	; (803c16c <USB_SetTurnaroundTime+0x128>)
 803c09e:	4293      	cmp	r3, r2
 803c0a0:	d306      	bcc.n	803c0b0 <USB_SetTurnaroundTime+0x6c>
 803c0a2:	68bb      	ldr	r3, [r7, #8]
 803c0a4:	4a32      	ldr	r2, [pc, #200]	; (803c170 <USB_SetTurnaroundTime+0x12c>)
 803c0a6:	4293      	cmp	r3, r2
 803c0a8:	d802      	bhi.n	803c0b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 803c0aa:	230c      	movs	r3, #12
 803c0ac:	617b      	str	r3, [r7, #20]
 803c0ae:	e041      	b.n	803c134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 803c0b0:	68bb      	ldr	r3, [r7, #8]
 803c0b2:	4a2f      	ldr	r2, [pc, #188]	; (803c170 <USB_SetTurnaroundTime+0x12c>)
 803c0b4:	4293      	cmp	r3, r2
 803c0b6:	d906      	bls.n	803c0c6 <USB_SetTurnaroundTime+0x82>
 803c0b8:	68bb      	ldr	r3, [r7, #8]
 803c0ba:	4a2e      	ldr	r2, [pc, #184]	; (803c174 <USB_SetTurnaroundTime+0x130>)
 803c0bc:	4293      	cmp	r3, r2
 803c0be:	d802      	bhi.n	803c0c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 803c0c0:	230b      	movs	r3, #11
 803c0c2:	617b      	str	r3, [r7, #20]
 803c0c4:	e036      	b.n	803c134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 803c0c6:	68bb      	ldr	r3, [r7, #8]
 803c0c8:	4a2a      	ldr	r2, [pc, #168]	; (803c174 <USB_SetTurnaroundTime+0x130>)
 803c0ca:	4293      	cmp	r3, r2
 803c0cc:	d906      	bls.n	803c0dc <USB_SetTurnaroundTime+0x98>
 803c0ce:	68bb      	ldr	r3, [r7, #8]
 803c0d0:	4a29      	ldr	r2, [pc, #164]	; (803c178 <USB_SetTurnaroundTime+0x134>)
 803c0d2:	4293      	cmp	r3, r2
 803c0d4:	d802      	bhi.n	803c0dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 803c0d6:	230a      	movs	r3, #10
 803c0d8:	617b      	str	r3, [r7, #20]
 803c0da:	e02b      	b.n	803c134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 803c0dc:	68bb      	ldr	r3, [r7, #8]
 803c0de:	4a26      	ldr	r2, [pc, #152]	; (803c178 <USB_SetTurnaroundTime+0x134>)
 803c0e0:	4293      	cmp	r3, r2
 803c0e2:	d906      	bls.n	803c0f2 <USB_SetTurnaroundTime+0xae>
 803c0e4:	68bb      	ldr	r3, [r7, #8]
 803c0e6:	4a25      	ldr	r2, [pc, #148]	; (803c17c <USB_SetTurnaroundTime+0x138>)
 803c0e8:	4293      	cmp	r3, r2
 803c0ea:	d202      	bcs.n	803c0f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 803c0ec:	2309      	movs	r3, #9
 803c0ee:	617b      	str	r3, [r7, #20]
 803c0f0:	e020      	b.n	803c134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 803c0f2:	68bb      	ldr	r3, [r7, #8]
 803c0f4:	4a21      	ldr	r2, [pc, #132]	; (803c17c <USB_SetTurnaroundTime+0x138>)
 803c0f6:	4293      	cmp	r3, r2
 803c0f8:	d306      	bcc.n	803c108 <USB_SetTurnaroundTime+0xc4>
 803c0fa:	68bb      	ldr	r3, [r7, #8]
 803c0fc:	4a20      	ldr	r2, [pc, #128]	; (803c180 <USB_SetTurnaroundTime+0x13c>)
 803c0fe:	4293      	cmp	r3, r2
 803c100:	d802      	bhi.n	803c108 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 803c102:	2308      	movs	r3, #8
 803c104:	617b      	str	r3, [r7, #20]
 803c106:	e015      	b.n	803c134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 803c108:	68bb      	ldr	r3, [r7, #8]
 803c10a:	4a1d      	ldr	r2, [pc, #116]	; (803c180 <USB_SetTurnaroundTime+0x13c>)
 803c10c:	4293      	cmp	r3, r2
 803c10e:	d906      	bls.n	803c11e <USB_SetTurnaroundTime+0xda>
 803c110:	68bb      	ldr	r3, [r7, #8]
 803c112:	4a1c      	ldr	r2, [pc, #112]	; (803c184 <USB_SetTurnaroundTime+0x140>)
 803c114:	4293      	cmp	r3, r2
 803c116:	d202      	bcs.n	803c11e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 803c118:	2307      	movs	r3, #7
 803c11a:	617b      	str	r3, [r7, #20]
 803c11c:	e00a      	b.n	803c134 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 803c11e:	2306      	movs	r3, #6
 803c120:	617b      	str	r3, [r7, #20]
 803c122:	e007      	b.n	803c134 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 803c124:	79fb      	ldrb	r3, [r7, #7]
 803c126:	2b00      	cmp	r3, #0
 803c128:	d102      	bne.n	803c130 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 803c12a:	2309      	movs	r3, #9
 803c12c:	617b      	str	r3, [r7, #20]
 803c12e:	e001      	b.n	803c134 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 803c130:	2309      	movs	r3, #9
 803c132:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 803c134:	68fb      	ldr	r3, [r7, #12]
 803c136:	68db      	ldr	r3, [r3, #12]
 803c138:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 803c13c:	68fb      	ldr	r3, [r7, #12]
 803c13e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 803c140:	68fb      	ldr	r3, [r7, #12]
 803c142:	68da      	ldr	r2, [r3, #12]
 803c144:	697b      	ldr	r3, [r7, #20]
 803c146:	029b      	lsls	r3, r3, #10
 803c148:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 803c14c:	431a      	orrs	r2, r3
 803c14e:	68fb      	ldr	r3, [r7, #12]
 803c150:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 803c152:	2300      	movs	r3, #0
}
 803c154:	4618      	mov	r0, r3
 803c156:	371c      	adds	r7, #28
 803c158:	46bd      	mov	sp, r7
 803c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c15e:	4770      	bx	lr
 803c160:	00d8acbf 	.word	0x00d8acbf
 803c164:	00e4e1c0 	.word	0x00e4e1c0
 803c168:	00f42400 	.word	0x00f42400
 803c16c:	01067380 	.word	0x01067380
 803c170:	011a499f 	.word	0x011a499f
 803c174:	01312cff 	.word	0x01312cff
 803c178:	014ca43f 	.word	0x014ca43f
 803c17c:	016e3600 	.word	0x016e3600
 803c180:	01a6ab1f 	.word	0x01a6ab1f
 803c184:	01e84800 	.word	0x01e84800

0803c188 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 803c188:	b480      	push	{r7}
 803c18a:	b083      	sub	sp, #12
 803c18c:	af00      	add	r7, sp, #0
 803c18e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 803c190:	687b      	ldr	r3, [r7, #4]
 803c192:	689b      	ldr	r3, [r3, #8]
 803c194:	f043 0201 	orr.w	r2, r3, #1
 803c198:	687b      	ldr	r3, [r7, #4]
 803c19a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 803c19c:	2300      	movs	r3, #0
}
 803c19e:	4618      	mov	r0, r3
 803c1a0:	370c      	adds	r7, #12
 803c1a2:	46bd      	mov	sp, r7
 803c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c1a8:	4770      	bx	lr

0803c1aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 803c1aa:	b480      	push	{r7}
 803c1ac:	b083      	sub	sp, #12
 803c1ae:	af00      	add	r7, sp, #0
 803c1b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 803c1b2:	687b      	ldr	r3, [r7, #4]
 803c1b4:	689b      	ldr	r3, [r3, #8]
 803c1b6:	f023 0201 	bic.w	r2, r3, #1
 803c1ba:	687b      	ldr	r3, [r7, #4]
 803c1bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 803c1be:	2300      	movs	r3, #0
}
 803c1c0:	4618      	mov	r0, r3
 803c1c2:	370c      	adds	r7, #12
 803c1c4:	46bd      	mov	sp, r7
 803c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c1ca:	4770      	bx	lr

0803c1cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 803c1cc:	b580      	push	{r7, lr}
 803c1ce:	b084      	sub	sp, #16
 803c1d0:	af00      	add	r7, sp, #0
 803c1d2:	6078      	str	r0, [r7, #4]
 803c1d4:	460b      	mov	r3, r1
 803c1d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 803c1d8:	2300      	movs	r3, #0
 803c1da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 803c1dc:	687b      	ldr	r3, [r7, #4]
 803c1de:	68db      	ldr	r3, [r3, #12]
 803c1e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 803c1e4:	687b      	ldr	r3, [r7, #4]
 803c1e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 803c1e8:	78fb      	ldrb	r3, [r7, #3]
 803c1ea:	2b01      	cmp	r3, #1
 803c1ec:	d115      	bne.n	803c21a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 803c1ee:	687b      	ldr	r3, [r7, #4]
 803c1f0:	68db      	ldr	r3, [r3, #12]
 803c1f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 803c1f6:	687b      	ldr	r3, [r7, #4]
 803c1f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 803c1fa:	2001      	movs	r0, #1
 803c1fc:	f7f2 ff76 	bl	802f0ec <HAL_Delay>
      ms++;
 803c200:	68fb      	ldr	r3, [r7, #12]
 803c202:	3301      	adds	r3, #1
 803c204:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 803c206:	6878      	ldr	r0, [r7, #4]
 803c208:	f001 fa4b 	bl	803d6a2 <USB_GetMode>
 803c20c:	4603      	mov	r3, r0
 803c20e:	2b01      	cmp	r3, #1
 803c210:	d01e      	beq.n	803c250 <USB_SetCurrentMode+0x84>
 803c212:	68fb      	ldr	r3, [r7, #12]
 803c214:	2b31      	cmp	r3, #49	; 0x31
 803c216:	d9f0      	bls.n	803c1fa <USB_SetCurrentMode+0x2e>
 803c218:	e01a      	b.n	803c250 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 803c21a:	78fb      	ldrb	r3, [r7, #3]
 803c21c:	2b00      	cmp	r3, #0
 803c21e:	d115      	bne.n	803c24c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 803c220:	687b      	ldr	r3, [r7, #4]
 803c222:	68db      	ldr	r3, [r3, #12]
 803c224:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 803c228:	687b      	ldr	r3, [r7, #4]
 803c22a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 803c22c:	2001      	movs	r0, #1
 803c22e:	f7f2 ff5d 	bl	802f0ec <HAL_Delay>
      ms++;
 803c232:	68fb      	ldr	r3, [r7, #12]
 803c234:	3301      	adds	r3, #1
 803c236:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 803c238:	6878      	ldr	r0, [r7, #4]
 803c23a:	f001 fa32 	bl	803d6a2 <USB_GetMode>
 803c23e:	4603      	mov	r3, r0
 803c240:	2b00      	cmp	r3, #0
 803c242:	d005      	beq.n	803c250 <USB_SetCurrentMode+0x84>
 803c244:	68fb      	ldr	r3, [r7, #12]
 803c246:	2b31      	cmp	r3, #49	; 0x31
 803c248:	d9f0      	bls.n	803c22c <USB_SetCurrentMode+0x60>
 803c24a:	e001      	b.n	803c250 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 803c24c:	2301      	movs	r3, #1
 803c24e:	e005      	b.n	803c25c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 803c250:	68fb      	ldr	r3, [r7, #12]
 803c252:	2b32      	cmp	r3, #50	; 0x32
 803c254:	d101      	bne.n	803c25a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 803c256:	2301      	movs	r3, #1
 803c258:	e000      	b.n	803c25c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 803c25a:	2300      	movs	r3, #0
}
 803c25c:	4618      	mov	r0, r3
 803c25e:	3710      	adds	r7, #16
 803c260:	46bd      	mov	sp, r7
 803c262:	bd80      	pop	{r7, pc}

0803c264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 803c264:	b084      	sub	sp, #16
 803c266:	b580      	push	{r7, lr}
 803c268:	b086      	sub	sp, #24
 803c26a:	af00      	add	r7, sp, #0
 803c26c:	6078      	str	r0, [r7, #4]
 803c26e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 803c272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 803c276:	2300      	movs	r3, #0
 803c278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c27a:	687b      	ldr	r3, [r7, #4]
 803c27c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 803c27e:	2300      	movs	r3, #0
 803c280:	613b      	str	r3, [r7, #16]
 803c282:	e009      	b.n	803c298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 803c284:	687a      	ldr	r2, [r7, #4]
 803c286:	693b      	ldr	r3, [r7, #16]
 803c288:	3340      	adds	r3, #64	; 0x40
 803c28a:	009b      	lsls	r3, r3, #2
 803c28c:	4413      	add	r3, r2
 803c28e:	2200      	movs	r2, #0
 803c290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 803c292:	693b      	ldr	r3, [r7, #16]
 803c294:	3301      	adds	r3, #1
 803c296:	613b      	str	r3, [r7, #16]
 803c298:	693b      	ldr	r3, [r7, #16]
 803c29a:	2b0e      	cmp	r3, #14
 803c29c:	d9f2      	bls.n	803c284 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 803c29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803c2a0:	2b00      	cmp	r3, #0
 803c2a2:	d11c      	bne.n	803c2de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 803c2a4:	68fb      	ldr	r3, [r7, #12]
 803c2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c2aa:	685b      	ldr	r3, [r3, #4]
 803c2ac:	68fa      	ldr	r2, [r7, #12]
 803c2ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803c2b2:	f043 0302 	orr.w	r3, r3, #2
 803c2b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 803c2b8:	687b      	ldr	r3, [r7, #4]
 803c2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803c2bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 803c2c0:	687b      	ldr	r3, [r7, #4]
 803c2c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 803c2c4:	687b      	ldr	r3, [r7, #4]
 803c2c6:	681b      	ldr	r3, [r3, #0]
 803c2c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803c2cc:	687b      	ldr	r3, [r7, #4]
 803c2ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 803c2d0:	687b      	ldr	r3, [r7, #4]
 803c2d2:	681b      	ldr	r3, [r3, #0]
 803c2d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 803c2d8:	687b      	ldr	r3, [r7, #4]
 803c2da:	601a      	str	r2, [r3, #0]
 803c2dc:	e005      	b.n	803c2ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 803c2de:	687b      	ldr	r3, [r7, #4]
 803c2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803c2e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 803c2e6:	687b      	ldr	r3, [r7, #4]
 803c2e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 803c2ea:	68fb      	ldr	r3, [r7, #12]
 803c2ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803c2f0:	461a      	mov	r2, r3
 803c2f2:	2300      	movs	r3, #0
 803c2f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 803c2f6:	68fb      	ldr	r3, [r7, #12]
 803c2f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c2fc:	4619      	mov	r1, r3
 803c2fe:	68fb      	ldr	r3, [r7, #12]
 803c300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c304:	461a      	mov	r2, r3
 803c306:	680b      	ldr	r3, [r1, #0]
 803c308:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 803c30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803c30c:	2b01      	cmp	r3, #1
 803c30e:	d10c      	bne.n	803c32a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 803c310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803c312:	2b00      	cmp	r3, #0
 803c314:	d104      	bne.n	803c320 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 803c316:	2100      	movs	r1, #0
 803c318:	6878      	ldr	r0, [r7, #4]
 803c31a:	f000 f965 	bl	803c5e8 <USB_SetDevSpeed>
 803c31e:	e008      	b.n	803c332 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 803c320:	2101      	movs	r1, #1
 803c322:	6878      	ldr	r0, [r7, #4]
 803c324:	f000 f960 	bl	803c5e8 <USB_SetDevSpeed>
 803c328:	e003      	b.n	803c332 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 803c32a:	2103      	movs	r1, #3
 803c32c:	6878      	ldr	r0, [r7, #4]
 803c32e:	f000 f95b 	bl	803c5e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 803c332:	2110      	movs	r1, #16
 803c334:	6878      	ldr	r0, [r7, #4]
 803c336:	f000 f8f3 	bl	803c520 <USB_FlushTxFifo>
 803c33a:	4603      	mov	r3, r0
 803c33c:	2b00      	cmp	r3, #0
 803c33e:	d001      	beq.n	803c344 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 803c340:	2301      	movs	r3, #1
 803c342:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 803c344:	6878      	ldr	r0, [r7, #4]
 803c346:	f000 f91f 	bl	803c588 <USB_FlushRxFifo>
 803c34a:	4603      	mov	r3, r0
 803c34c:	2b00      	cmp	r3, #0
 803c34e:	d001      	beq.n	803c354 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 803c350:	2301      	movs	r3, #1
 803c352:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 803c354:	68fb      	ldr	r3, [r7, #12]
 803c356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c35a:	461a      	mov	r2, r3
 803c35c:	2300      	movs	r3, #0
 803c35e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 803c360:	68fb      	ldr	r3, [r7, #12]
 803c362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c366:	461a      	mov	r2, r3
 803c368:	2300      	movs	r3, #0
 803c36a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 803c36c:	68fb      	ldr	r3, [r7, #12]
 803c36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c372:	461a      	mov	r2, r3
 803c374:	2300      	movs	r3, #0
 803c376:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 803c378:	2300      	movs	r3, #0
 803c37a:	613b      	str	r3, [r7, #16]
 803c37c:	e043      	b.n	803c406 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 803c37e:	693b      	ldr	r3, [r7, #16]
 803c380:	015a      	lsls	r2, r3, #5
 803c382:	68fb      	ldr	r3, [r7, #12]
 803c384:	4413      	add	r3, r2
 803c386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c38a:	681b      	ldr	r3, [r3, #0]
 803c38c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803c390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803c394:	d118      	bne.n	803c3c8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 803c396:	693b      	ldr	r3, [r7, #16]
 803c398:	2b00      	cmp	r3, #0
 803c39a:	d10a      	bne.n	803c3b2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 803c39c:	693b      	ldr	r3, [r7, #16]
 803c39e:	015a      	lsls	r2, r3, #5
 803c3a0:	68fb      	ldr	r3, [r7, #12]
 803c3a2:	4413      	add	r3, r2
 803c3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c3a8:	461a      	mov	r2, r3
 803c3aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803c3ae:	6013      	str	r3, [r2, #0]
 803c3b0:	e013      	b.n	803c3da <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 803c3b2:	693b      	ldr	r3, [r7, #16]
 803c3b4:	015a      	lsls	r2, r3, #5
 803c3b6:	68fb      	ldr	r3, [r7, #12]
 803c3b8:	4413      	add	r3, r2
 803c3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c3be:	461a      	mov	r2, r3
 803c3c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 803c3c4:	6013      	str	r3, [r2, #0]
 803c3c6:	e008      	b.n	803c3da <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 803c3c8:	693b      	ldr	r3, [r7, #16]
 803c3ca:	015a      	lsls	r2, r3, #5
 803c3cc:	68fb      	ldr	r3, [r7, #12]
 803c3ce:	4413      	add	r3, r2
 803c3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c3d4:	461a      	mov	r2, r3
 803c3d6:	2300      	movs	r3, #0
 803c3d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 803c3da:	693b      	ldr	r3, [r7, #16]
 803c3dc:	015a      	lsls	r2, r3, #5
 803c3de:	68fb      	ldr	r3, [r7, #12]
 803c3e0:	4413      	add	r3, r2
 803c3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c3e6:	461a      	mov	r2, r3
 803c3e8:	2300      	movs	r3, #0
 803c3ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 803c3ec:	693b      	ldr	r3, [r7, #16]
 803c3ee:	015a      	lsls	r2, r3, #5
 803c3f0:	68fb      	ldr	r3, [r7, #12]
 803c3f2:	4413      	add	r3, r2
 803c3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c3f8:	461a      	mov	r2, r3
 803c3fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803c3fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 803c400:	693b      	ldr	r3, [r7, #16]
 803c402:	3301      	adds	r3, #1
 803c404:	613b      	str	r3, [r7, #16]
 803c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803c408:	693a      	ldr	r2, [r7, #16]
 803c40a:	429a      	cmp	r2, r3
 803c40c:	d3b7      	bcc.n	803c37e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 803c40e:	2300      	movs	r3, #0
 803c410:	613b      	str	r3, [r7, #16]
 803c412:	e043      	b.n	803c49c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803c414:	693b      	ldr	r3, [r7, #16]
 803c416:	015a      	lsls	r2, r3, #5
 803c418:	68fb      	ldr	r3, [r7, #12]
 803c41a:	4413      	add	r3, r2
 803c41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c420:	681b      	ldr	r3, [r3, #0]
 803c422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803c426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803c42a:	d118      	bne.n	803c45e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 803c42c:	693b      	ldr	r3, [r7, #16]
 803c42e:	2b00      	cmp	r3, #0
 803c430:	d10a      	bne.n	803c448 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 803c432:	693b      	ldr	r3, [r7, #16]
 803c434:	015a      	lsls	r2, r3, #5
 803c436:	68fb      	ldr	r3, [r7, #12]
 803c438:	4413      	add	r3, r2
 803c43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c43e:	461a      	mov	r2, r3
 803c440:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803c444:	6013      	str	r3, [r2, #0]
 803c446:	e013      	b.n	803c470 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 803c448:	693b      	ldr	r3, [r7, #16]
 803c44a:	015a      	lsls	r2, r3, #5
 803c44c:	68fb      	ldr	r3, [r7, #12]
 803c44e:	4413      	add	r3, r2
 803c450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c454:	461a      	mov	r2, r3
 803c456:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 803c45a:	6013      	str	r3, [r2, #0]
 803c45c:	e008      	b.n	803c470 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 803c45e:	693b      	ldr	r3, [r7, #16]
 803c460:	015a      	lsls	r2, r3, #5
 803c462:	68fb      	ldr	r3, [r7, #12]
 803c464:	4413      	add	r3, r2
 803c466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c46a:	461a      	mov	r2, r3
 803c46c:	2300      	movs	r3, #0
 803c46e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 803c470:	693b      	ldr	r3, [r7, #16]
 803c472:	015a      	lsls	r2, r3, #5
 803c474:	68fb      	ldr	r3, [r7, #12]
 803c476:	4413      	add	r3, r2
 803c478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c47c:	461a      	mov	r2, r3
 803c47e:	2300      	movs	r3, #0
 803c480:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 803c482:	693b      	ldr	r3, [r7, #16]
 803c484:	015a      	lsls	r2, r3, #5
 803c486:	68fb      	ldr	r3, [r7, #12]
 803c488:	4413      	add	r3, r2
 803c48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c48e:	461a      	mov	r2, r3
 803c490:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803c494:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 803c496:	693b      	ldr	r3, [r7, #16]
 803c498:	3301      	adds	r3, #1
 803c49a:	613b      	str	r3, [r7, #16]
 803c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803c49e:	693a      	ldr	r2, [r7, #16]
 803c4a0:	429a      	cmp	r2, r3
 803c4a2:	d3b7      	bcc.n	803c414 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 803c4a4:	68fb      	ldr	r3, [r7, #12]
 803c4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c4aa:	691b      	ldr	r3, [r3, #16]
 803c4ac:	68fa      	ldr	r2, [r7, #12]
 803c4ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803c4b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803c4b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 803c4b8:	687b      	ldr	r3, [r7, #4]
 803c4ba:	2200      	movs	r2, #0
 803c4bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 803c4be:	687b      	ldr	r3, [r7, #4]
 803c4c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 803c4c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 803c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803c4c8:	2b00      	cmp	r3, #0
 803c4ca:	d105      	bne.n	803c4d8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 803c4cc:	687b      	ldr	r3, [r7, #4]
 803c4ce:	699b      	ldr	r3, [r3, #24]
 803c4d0:	f043 0210 	orr.w	r2, r3, #16
 803c4d4:	687b      	ldr	r3, [r7, #4]
 803c4d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 803c4d8:	687b      	ldr	r3, [r7, #4]
 803c4da:	699a      	ldr	r2, [r3, #24]
 803c4dc:	4b0e      	ldr	r3, [pc, #56]	; (803c518 <USB_DevInit+0x2b4>)
 803c4de:	4313      	orrs	r3, r2
 803c4e0:	687a      	ldr	r2, [r7, #4]
 803c4e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 803c4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803c4e6:	2b00      	cmp	r3, #0
 803c4e8:	d005      	beq.n	803c4f6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 803c4ea:	687b      	ldr	r3, [r7, #4]
 803c4ec:	699b      	ldr	r3, [r3, #24]
 803c4ee:	f043 0208 	orr.w	r2, r3, #8
 803c4f2:	687b      	ldr	r3, [r7, #4]
 803c4f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 803c4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803c4f8:	2b01      	cmp	r3, #1
 803c4fa:	d105      	bne.n	803c508 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 803c4fc:	687b      	ldr	r3, [r7, #4]
 803c4fe:	699a      	ldr	r2, [r3, #24]
 803c500:	4b06      	ldr	r3, [pc, #24]	; (803c51c <USB_DevInit+0x2b8>)
 803c502:	4313      	orrs	r3, r2
 803c504:	687a      	ldr	r2, [r7, #4]
 803c506:	6193      	str	r3, [r2, #24]
  }

  return ret;
 803c508:	7dfb      	ldrb	r3, [r7, #23]
}
 803c50a:	4618      	mov	r0, r3
 803c50c:	3718      	adds	r7, #24
 803c50e:	46bd      	mov	sp, r7
 803c510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803c514:	b004      	add	sp, #16
 803c516:	4770      	bx	lr
 803c518:	803c3800 	.word	0x803c3800
 803c51c:	40000004 	.word	0x40000004

0803c520 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 803c520:	b480      	push	{r7}
 803c522:	b085      	sub	sp, #20
 803c524:	af00      	add	r7, sp, #0
 803c526:	6078      	str	r0, [r7, #4]
 803c528:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 803c52a:	2300      	movs	r3, #0
 803c52c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 803c52e:	68fb      	ldr	r3, [r7, #12]
 803c530:	3301      	adds	r3, #1
 803c532:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803c534:	68fb      	ldr	r3, [r7, #12]
 803c536:	4a13      	ldr	r2, [pc, #76]	; (803c584 <USB_FlushTxFifo+0x64>)
 803c538:	4293      	cmp	r3, r2
 803c53a:	d901      	bls.n	803c540 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 803c53c:	2303      	movs	r3, #3
 803c53e:	e01b      	b.n	803c578 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803c540:	687b      	ldr	r3, [r7, #4]
 803c542:	691b      	ldr	r3, [r3, #16]
 803c544:	2b00      	cmp	r3, #0
 803c546:	daf2      	bge.n	803c52e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 803c548:	2300      	movs	r3, #0
 803c54a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 803c54c:	683b      	ldr	r3, [r7, #0]
 803c54e:	019b      	lsls	r3, r3, #6
 803c550:	f043 0220 	orr.w	r2, r3, #32
 803c554:	687b      	ldr	r3, [r7, #4]
 803c556:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803c558:	68fb      	ldr	r3, [r7, #12]
 803c55a:	3301      	adds	r3, #1
 803c55c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803c55e:	68fb      	ldr	r3, [r7, #12]
 803c560:	4a08      	ldr	r2, [pc, #32]	; (803c584 <USB_FlushTxFifo+0x64>)
 803c562:	4293      	cmp	r3, r2
 803c564:	d901      	bls.n	803c56a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 803c566:	2303      	movs	r3, #3
 803c568:	e006      	b.n	803c578 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 803c56a:	687b      	ldr	r3, [r7, #4]
 803c56c:	691b      	ldr	r3, [r3, #16]
 803c56e:	f003 0320 	and.w	r3, r3, #32
 803c572:	2b20      	cmp	r3, #32
 803c574:	d0f0      	beq.n	803c558 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 803c576:	2300      	movs	r3, #0
}
 803c578:	4618      	mov	r0, r3
 803c57a:	3714      	adds	r7, #20
 803c57c:	46bd      	mov	sp, r7
 803c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c582:	4770      	bx	lr
 803c584:	00030d40 	.word	0x00030d40

0803c588 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 803c588:	b480      	push	{r7}
 803c58a:	b085      	sub	sp, #20
 803c58c:	af00      	add	r7, sp, #0
 803c58e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 803c590:	2300      	movs	r3, #0
 803c592:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 803c594:	68fb      	ldr	r3, [r7, #12]
 803c596:	3301      	adds	r3, #1
 803c598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803c59a:	68fb      	ldr	r3, [r7, #12]
 803c59c:	4a11      	ldr	r2, [pc, #68]	; (803c5e4 <USB_FlushRxFifo+0x5c>)
 803c59e:	4293      	cmp	r3, r2
 803c5a0:	d901      	bls.n	803c5a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 803c5a2:	2303      	movs	r3, #3
 803c5a4:	e018      	b.n	803c5d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803c5a6:	687b      	ldr	r3, [r7, #4]
 803c5a8:	691b      	ldr	r3, [r3, #16]
 803c5aa:	2b00      	cmp	r3, #0
 803c5ac:	daf2      	bge.n	803c594 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 803c5ae:	2300      	movs	r3, #0
 803c5b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 803c5b2:	687b      	ldr	r3, [r7, #4]
 803c5b4:	2210      	movs	r2, #16
 803c5b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803c5b8:	68fb      	ldr	r3, [r7, #12]
 803c5ba:	3301      	adds	r3, #1
 803c5bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803c5be:	68fb      	ldr	r3, [r7, #12]
 803c5c0:	4a08      	ldr	r2, [pc, #32]	; (803c5e4 <USB_FlushRxFifo+0x5c>)
 803c5c2:	4293      	cmp	r3, r2
 803c5c4:	d901      	bls.n	803c5ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 803c5c6:	2303      	movs	r3, #3
 803c5c8:	e006      	b.n	803c5d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 803c5ca:	687b      	ldr	r3, [r7, #4]
 803c5cc:	691b      	ldr	r3, [r3, #16]
 803c5ce:	f003 0310 	and.w	r3, r3, #16
 803c5d2:	2b10      	cmp	r3, #16
 803c5d4:	d0f0      	beq.n	803c5b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 803c5d6:	2300      	movs	r3, #0
}
 803c5d8:	4618      	mov	r0, r3
 803c5da:	3714      	adds	r7, #20
 803c5dc:	46bd      	mov	sp, r7
 803c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c5e2:	4770      	bx	lr
 803c5e4:	00030d40 	.word	0x00030d40

0803c5e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 803c5e8:	b480      	push	{r7}
 803c5ea:	b085      	sub	sp, #20
 803c5ec:	af00      	add	r7, sp, #0
 803c5ee:	6078      	str	r0, [r7, #4]
 803c5f0:	460b      	mov	r3, r1
 803c5f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c5f4:	687b      	ldr	r3, [r7, #4]
 803c5f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 803c5f8:	68fb      	ldr	r3, [r7, #12]
 803c5fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c5fe:	681a      	ldr	r2, [r3, #0]
 803c600:	78fb      	ldrb	r3, [r7, #3]
 803c602:	68f9      	ldr	r1, [r7, #12]
 803c604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803c608:	4313      	orrs	r3, r2
 803c60a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 803c60c:	2300      	movs	r3, #0
}
 803c60e:	4618      	mov	r0, r3
 803c610:	3714      	adds	r7, #20
 803c612:	46bd      	mov	sp, r7
 803c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c618:	4770      	bx	lr

0803c61a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 803c61a:	b480      	push	{r7}
 803c61c:	b087      	sub	sp, #28
 803c61e:	af00      	add	r7, sp, #0
 803c620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c622:	687b      	ldr	r3, [r7, #4]
 803c624:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 803c626:	693b      	ldr	r3, [r7, #16]
 803c628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c62c:	689b      	ldr	r3, [r3, #8]
 803c62e:	f003 0306 	and.w	r3, r3, #6
 803c632:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 803c634:	68fb      	ldr	r3, [r7, #12]
 803c636:	2b00      	cmp	r3, #0
 803c638:	d102      	bne.n	803c640 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 803c63a:	2300      	movs	r3, #0
 803c63c:	75fb      	strb	r3, [r7, #23]
 803c63e:	e00a      	b.n	803c656 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 803c640:	68fb      	ldr	r3, [r7, #12]
 803c642:	2b02      	cmp	r3, #2
 803c644:	d002      	beq.n	803c64c <USB_GetDevSpeed+0x32>
 803c646:	68fb      	ldr	r3, [r7, #12]
 803c648:	2b06      	cmp	r3, #6
 803c64a:	d102      	bne.n	803c652 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 803c64c:	2302      	movs	r3, #2
 803c64e:	75fb      	strb	r3, [r7, #23]
 803c650:	e001      	b.n	803c656 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 803c652:	230f      	movs	r3, #15
 803c654:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 803c656:	7dfb      	ldrb	r3, [r7, #23]
}
 803c658:	4618      	mov	r0, r3
 803c65a:	371c      	adds	r7, #28
 803c65c:	46bd      	mov	sp, r7
 803c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c662:	4770      	bx	lr

0803c664 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803c664:	b480      	push	{r7}
 803c666:	b085      	sub	sp, #20
 803c668:	af00      	add	r7, sp, #0
 803c66a:	6078      	str	r0, [r7, #4]
 803c66c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c66e:	687b      	ldr	r3, [r7, #4]
 803c670:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803c672:	683b      	ldr	r3, [r7, #0]
 803c674:	781b      	ldrb	r3, [r3, #0]
 803c676:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803c678:	683b      	ldr	r3, [r7, #0]
 803c67a:	785b      	ldrb	r3, [r3, #1]
 803c67c:	2b01      	cmp	r3, #1
 803c67e:	d139      	bne.n	803c6f4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 803c680:	68fb      	ldr	r3, [r7, #12]
 803c682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c686:	69da      	ldr	r2, [r3, #28]
 803c688:	683b      	ldr	r3, [r7, #0]
 803c68a:	781b      	ldrb	r3, [r3, #0]
 803c68c:	f003 030f 	and.w	r3, r3, #15
 803c690:	2101      	movs	r1, #1
 803c692:	fa01 f303 	lsl.w	r3, r1, r3
 803c696:	b29b      	uxth	r3, r3
 803c698:	68f9      	ldr	r1, [r7, #12]
 803c69a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803c69e:	4313      	orrs	r3, r2
 803c6a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 803c6a2:	68bb      	ldr	r3, [r7, #8]
 803c6a4:	015a      	lsls	r2, r3, #5
 803c6a6:	68fb      	ldr	r3, [r7, #12]
 803c6a8:	4413      	add	r3, r2
 803c6aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c6ae:	681b      	ldr	r3, [r3, #0]
 803c6b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803c6b4:	2b00      	cmp	r3, #0
 803c6b6:	d153      	bne.n	803c760 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803c6b8:	68bb      	ldr	r3, [r7, #8]
 803c6ba:	015a      	lsls	r2, r3, #5
 803c6bc:	68fb      	ldr	r3, [r7, #12]
 803c6be:	4413      	add	r3, r2
 803c6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c6c4:	681a      	ldr	r2, [r3, #0]
 803c6c6:	683b      	ldr	r3, [r7, #0]
 803c6c8:	68db      	ldr	r3, [r3, #12]
 803c6ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 803c6ce:	683b      	ldr	r3, [r7, #0]
 803c6d0:	791b      	ldrb	r3, [r3, #4]
 803c6d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803c6d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 803c6d6:	68bb      	ldr	r3, [r7, #8]
 803c6d8:	059b      	lsls	r3, r3, #22
 803c6da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803c6dc:	431a      	orrs	r2, r3
 803c6de:	68bb      	ldr	r3, [r7, #8]
 803c6e0:	0159      	lsls	r1, r3, #5
 803c6e2:	68fb      	ldr	r3, [r7, #12]
 803c6e4:	440b      	add	r3, r1
 803c6e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c6ea:	4619      	mov	r1, r3
 803c6ec:	4b20      	ldr	r3, [pc, #128]	; (803c770 <USB_ActivateEndpoint+0x10c>)
 803c6ee:	4313      	orrs	r3, r2
 803c6f0:	600b      	str	r3, [r1, #0]
 803c6f2:	e035      	b.n	803c760 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 803c6f4:	68fb      	ldr	r3, [r7, #12]
 803c6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c6fa:	69da      	ldr	r2, [r3, #28]
 803c6fc:	683b      	ldr	r3, [r7, #0]
 803c6fe:	781b      	ldrb	r3, [r3, #0]
 803c700:	f003 030f 	and.w	r3, r3, #15
 803c704:	2101      	movs	r1, #1
 803c706:	fa01 f303 	lsl.w	r3, r1, r3
 803c70a:	041b      	lsls	r3, r3, #16
 803c70c:	68f9      	ldr	r1, [r7, #12]
 803c70e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803c712:	4313      	orrs	r3, r2
 803c714:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 803c716:	68bb      	ldr	r3, [r7, #8]
 803c718:	015a      	lsls	r2, r3, #5
 803c71a:	68fb      	ldr	r3, [r7, #12]
 803c71c:	4413      	add	r3, r2
 803c71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c722:	681b      	ldr	r3, [r3, #0]
 803c724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803c728:	2b00      	cmp	r3, #0
 803c72a:	d119      	bne.n	803c760 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 803c72c:	68bb      	ldr	r3, [r7, #8]
 803c72e:	015a      	lsls	r2, r3, #5
 803c730:	68fb      	ldr	r3, [r7, #12]
 803c732:	4413      	add	r3, r2
 803c734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c738:	681a      	ldr	r2, [r3, #0]
 803c73a:	683b      	ldr	r3, [r7, #0]
 803c73c:	68db      	ldr	r3, [r3, #12]
 803c73e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 803c742:	683b      	ldr	r3, [r7, #0]
 803c744:	791b      	ldrb	r3, [r3, #4]
 803c746:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 803c748:	430b      	orrs	r3, r1
 803c74a:	431a      	orrs	r2, r3
 803c74c:	68bb      	ldr	r3, [r7, #8]
 803c74e:	0159      	lsls	r1, r3, #5
 803c750:	68fb      	ldr	r3, [r7, #12]
 803c752:	440b      	add	r3, r1
 803c754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c758:	4619      	mov	r1, r3
 803c75a:	4b05      	ldr	r3, [pc, #20]	; (803c770 <USB_ActivateEndpoint+0x10c>)
 803c75c:	4313      	orrs	r3, r2
 803c75e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 803c760:	2300      	movs	r3, #0
}
 803c762:	4618      	mov	r0, r3
 803c764:	3714      	adds	r7, #20
 803c766:	46bd      	mov	sp, r7
 803c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c76c:	4770      	bx	lr
 803c76e:	bf00      	nop
 803c770:	10008000 	.word	0x10008000

0803c774 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803c774:	b480      	push	{r7}
 803c776:	b085      	sub	sp, #20
 803c778:	af00      	add	r7, sp, #0
 803c77a:	6078      	str	r0, [r7, #4]
 803c77c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c77e:	687b      	ldr	r3, [r7, #4]
 803c780:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803c782:	683b      	ldr	r3, [r7, #0]
 803c784:	781b      	ldrb	r3, [r3, #0]
 803c786:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 803c788:	683b      	ldr	r3, [r7, #0]
 803c78a:	785b      	ldrb	r3, [r3, #1]
 803c78c:	2b01      	cmp	r3, #1
 803c78e:	d161      	bne.n	803c854 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 803c790:	68bb      	ldr	r3, [r7, #8]
 803c792:	015a      	lsls	r2, r3, #5
 803c794:	68fb      	ldr	r3, [r7, #12]
 803c796:	4413      	add	r3, r2
 803c798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c79c:	681b      	ldr	r3, [r3, #0]
 803c79e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803c7a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803c7a6:	d11f      	bne.n	803c7e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 803c7a8:	68bb      	ldr	r3, [r7, #8]
 803c7aa:	015a      	lsls	r2, r3, #5
 803c7ac:	68fb      	ldr	r3, [r7, #12]
 803c7ae:	4413      	add	r3, r2
 803c7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c7b4:	681b      	ldr	r3, [r3, #0]
 803c7b6:	68ba      	ldr	r2, [r7, #8]
 803c7b8:	0151      	lsls	r1, r2, #5
 803c7ba:	68fa      	ldr	r2, [r7, #12]
 803c7bc:	440a      	add	r2, r1
 803c7be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c7c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803c7c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 803c7c8:	68bb      	ldr	r3, [r7, #8]
 803c7ca:	015a      	lsls	r2, r3, #5
 803c7cc:	68fb      	ldr	r3, [r7, #12]
 803c7ce:	4413      	add	r3, r2
 803c7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c7d4:	681b      	ldr	r3, [r3, #0]
 803c7d6:	68ba      	ldr	r2, [r7, #8]
 803c7d8:	0151      	lsls	r1, r2, #5
 803c7da:	68fa      	ldr	r2, [r7, #12]
 803c7dc:	440a      	add	r2, r1
 803c7de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c7e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803c7e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 803c7e8:	68fb      	ldr	r3, [r7, #12]
 803c7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c7ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 803c7f0:	683b      	ldr	r3, [r7, #0]
 803c7f2:	781b      	ldrb	r3, [r3, #0]
 803c7f4:	f003 030f 	and.w	r3, r3, #15
 803c7f8:	2101      	movs	r1, #1
 803c7fa:	fa01 f303 	lsl.w	r3, r1, r3
 803c7fe:	b29b      	uxth	r3, r3
 803c800:	43db      	mvns	r3, r3
 803c802:	68f9      	ldr	r1, [r7, #12]
 803c804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803c808:	4013      	ands	r3, r2
 803c80a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 803c80c:	68fb      	ldr	r3, [r7, #12]
 803c80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c812:	69da      	ldr	r2, [r3, #28]
 803c814:	683b      	ldr	r3, [r7, #0]
 803c816:	781b      	ldrb	r3, [r3, #0]
 803c818:	f003 030f 	and.w	r3, r3, #15
 803c81c:	2101      	movs	r1, #1
 803c81e:	fa01 f303 	lsl.w	r3, r1, r3
 803c822:	b29b      	uxth	r3, r3
 803c824:	43db      	mvns	r3, r3
 803c826:	68f9      	ldr	r1, [r7, #12]
 803c828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803c82c:	4013      	ands	r3, r2
 803c82e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 803c830:	68bb      	ldr	r3, [r7, #8]
 803c832:	015a      	lsls	r2, r3, #5
 803c834:	68fb      	ldr	r3, [r7, #12]
 803c836:	4413      	add	r3, r2
 803c838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c83c:	681a      	ldr	r2, [r3, #0]
 803c83e:	68bb      	ldr	r3, [r7, #8]
 803c840:	0159      	lsls	r1, r3, #5
 803c842:	68fb      	ldr	r3, [r7, #12]
 803c844:	440b      	add	r3, r1
 803c846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c84a:	4619      	mov	r1, r3
 803c84c:	4b35      	ldr	r3, [pc, #212]	; (803c924 <USB_DeactivateEndpoint+0x1b0>)
 803c84e:	4013      	ands	r3, r2
 803c850:	600b      	str	r3, [r1, #0]
 803c852:	e060      	b.n	803c916 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803c854:	68bb      	ldr	r3, [r7, #8]
 803c856:	015a      	lsls	r2, r3, #5
 803c858:	68fb      	ldr	r3, [r7, #12]
 803c85a:	4413      	add	r3, r2
 803c85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c860:	681b      	ldr	r3, [r3, #0]
 803c862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803c866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803c86a:	d11f      	bne.n	803c8ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 803c86c:	68bb      	ldr	r3, [r7, #8]
 803c86e:	015a      	lsls	r2, r3, #5
 803c870:	68fb      	ldr	r3, [r7, #12]
 803c872:	4413      	add	r3, r2
 803c874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c878:	681b      	ldr	r3, [r3, #0]
 803c87a:	68ba      	ldr	r2, [r7, #8]
 803c87c:	0151      	lsls	r1, r2, #5
 803c87e:	68fa      	ldr	r2, [r7, #12]
 803c880:	440a      	add	r2, r1
 803c882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c886:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803c88a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 803c88c:	68bb      	ldr	r3, [r7, #8]
 803c88e:	015a      	lsls	r2, r3, #5
 803c890:	68fb      	ldr	r3, [r7, #12]
 803c892:	4413      	add	r3, r2
 803c894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c898:	681b      	ldr	r3, [r3, #0]
 803c89a:	68ba      	ldr	r2, [r7, #8]
 803c89c:	0151      	lsls	r1, r2, #5
 803c89e:	68fa      	ldr	r2, [r7, #12]
 803c8a0:	440a      	add	r2, r1
 803c8a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c8a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803c8aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 803c8ac:	68fb      	ldr	r3, [r7, #12]
 803c8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c8b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 803c8b4:	683b      	ldr	r3, [r7, #0]
 803c8b6:	781b      	ldrb	r3, [r3, #0]
 803c8b8:	f003 030f 	and.w	r3, r3, #15
 803c8bc:	2101      	movs	r1, #1
 803c8be:	fa01 f303 	lsl.w	r3, r1, r3
 803c8c2:	041b      	lsls	r3, r3, #16
 803c8c4:	43db      	mvns	r3, r3
 803c8c6:	68f9      	ldr	r1, [r7, #12]
 803c8c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803c8cc:	4013      	ands	r3, r2
 803c8ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 803c8d0:	68fb      	ldr	r3, [r7, #12]
 803c8d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c8d6:	69da      	ldr	r2, [r3, #28]
 803c8d8:	683b      	ldr	r3, [r7, #0]
 803c8da:	781b      	ldrb	r3, [r3, #0]
 803c8dc:	f003 030f 	and.w	r3, r3, #15
 803c8e0:	2101      	movs	r1, #1
 803c8e2:	fa01 f303 	lsl.w	r3, r1, r3
 803c8e6:	041b      	lsls	r3, r3, #16
 803c8e8:	43db      	mvns	r3, r3
 803c8ea:	68f9      	ldr	r1, [r7, #12]
 803c8ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803c8f0:	4013      	ands	r3, r2
 803c8f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 803c8f4:	68bb      	ldr	r3, [r7, #8]
 803c8f6:	015a      	lsls	r2, r3, #5
 803c8f8:	68fb      	ldr	r3, [r7, #12]
 803c8fa:	4413      	add	r3, r2
 803c8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c900:	681a      	ldr	r2, [r3, #0]
 803c902:	68bb      	ldr	r3, [r7, #8]
 803c904:	0159      	lsls	r1, r3, #5
 803c906:	68fb      	ldr	r3, [r7, #12]
 803c908:	440b      	add	r3, r1
 803c90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c90e:	4619      	mov	r1, r3
 803c910:	4b05      	ldr	r3, [pc, #20]	; (803c928 <USB_DeactivateEndpoint+0x1b4>)
 803c912:	4013      	ands	r3, r2
 803c914:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 803c916:	2300      	movs	r3, #0
}
 803c918:	4618      	mov	r0, r3
 803c91a:	3714      	adds	r7, #20
 803c91c:	46bd      	mov	sp, r7
 803c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c922:	4770      	bx	lr
 803c924:	ec337800 	.word	0xec337800
 803c928:	eff37800 	.word	0xeff37800

0803c92c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 803c92c:	b580      	push	{r7, lr}
 803c92e:	b08a      	sub	sp, #40	; 0x28
 803c930:	af02      	add	r7, sp, #8
 803c932:	60f8      	str	r0, [r7, #12]
 803c934:	60b9      	str	r1, [r7, #8]
 803c936:	4613      	mov	r3, r2
 803c938:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c93a:	68fb      	ldr	r3, [r7, #12]
 803c93c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 803c93e:	68bb      	ldr	r3, [r7, #8]
 803c940:	781b      	ldrb	r3, [r3, #0]
 803c942:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 803c944:	68bb      	ldr	r3, [r7, #8]
 803c946:	785b      	ldrb	r3, [r3, #1]
 803c948:	2b01      	cmp	r3, #1
 803c94a:	f040 8163 	bne.w	803cc14 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 803c94e:	68bb      	ldr	r3, [r7, #8]
 803c950:	699b      	ldr	r3, [r3, #24]
 803c952:	2b00      	cmp	r3, #0
 803c954:	d132      	bne.n	803c9bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803c956:	69bb      	ldr	r3, [r7, #24]
 803c958:	015a      	lsls	r2, r3, #5
 803c95a:	69fb      	ldr	r3, [r7, #28]
 803c95c:	4413      	add	r3, r2
 803c95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c962:	691a      	ldr	r2, [r3, #16]
 803c964:	69bb      	ldr	r3, [r7, #24]
 803c966:	0159      	lsls	r1, r3, #5
 803c968:	69fb      	ldr	r3, [r7, #28]
 803c96a:	440b      	add	r3, r1
 803c96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c970:	4619      	mov	r1, r3
 803c972:	4ba5      	ldr	r3, [pc, #660]	; (803cc08 <USB_EPStartXfer+0x2dc>)
 803c974:	4013      	ands	r3, r2
 803c976:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803c978:	69bb      	ldr	r3, [r7, #24]
 803c97a:	015a      	lsls	r2, r3, #5
 803c97c:	69fb      	ldr	r3, [r7, #28]
 803c97e:	4413      	add	r3, r2
 803c980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c984:	691b      	ldr	r3, [r3, #16]
 803c986:	69ba      	ldr	r2, [r7, #24]
 803c988:	0151      	lsls	r1, r2, #5
 803c98a:	69fa      	ldr	r2, [r7, #28]
 803c98c:	440a      	add	r2, r1
 803c98e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c992:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803c996:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803c998:	69bb      	ldr	r3, [r7, #24]
 803c99a:	015a      	lsls	r2, r3, #5
 803c99c:	69fb      	ldr	r3, [r7, #28]
 803c99e:	4413      	add	r3, r2
 803c9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c9a4:	691a      	ldr	r2, [r3, #16]
 803c9a6:	69bb      	ldr	r3, [r7, #24]
 803c9a8:	0159      	lsls	r1, r3, #5
 803c9aa:	69fb      	ldr	r3, [r7, #28]
 803c9ac:	440b      	add	r3, r1
 803c9ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c9b2:	4619      	mov	r1, r3
 803c9b4:	4b95      	ldr	r3, [pc, #596]	; (803cc0c <USB_EPStartXfer+0x2e0>)
 803c9b6:	4013      	ands	r3, r2
 803c9b8:	610b      	str	r3, [r1, #16]
 803c9ba:	e074      	b.n	803caa6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803c9bc:	69bb      	ldr	r3, [r7, #24]
 803c9be:	015a      	lsls	r2, r3, #5
 803c9c0:	69fb      	ldr	r3, [r7, #28]
 803c9c2:	4413      	add	r3, r2
 803c9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c9c8:	691a      	ldr	r2, [r3, #16]
 803c9ca:	69bb      	ldr	r3, [r7, #24]
 803c9cc:	0159      	lsls	r1, r3, #5
 803c9ce:	69fb      	ldr	r3, [r7, #28]
 803c9d0:	440b      	add	r3, r1
 803c9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c9d6:	4619      	mov	r1, r3
 803c9d8:	4b8c      	ldr	r3, [pc, #560]	; (803cc0c <USB_EPStartXfer+0x2e0>)
 803c9da:	4013      	ands	r3, r2
 803c9dc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803c9de:	69bb      	ldr	r3, [r7, #24]
 803c9e0:	015a      	lsls	r2, r3, #5
 803c9e2:	69fb      	ldr	r3, [r7, #28]
 803c9e4:	4413      	add	r3, r2
 803c9e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c9ea:	691a      	ldr	r2, [r3, #16]
 803c9ec:	69bb      	ldr	r3, [r7, #24]
 803c9ee:	0159      	lsls	r1, r3, #5
 803c9f0:	69fb      	ldr	r3, [r7, #28]
 803c9f2:	440b      	add	r3, r1
 803c9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c9f8:	4619      	mov	r1, r3
 803c9fa:	4b83      	ldr	r3, [pc, #524]	; (803cc08 <USB_EPStartXfer+0x2dc>)
 803c9fc:	4013      	ands	r3, r2
 803c9fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 803ca00:	69bb      	ldr	r3, [r7, #24]
 803ca02:	015a      	lsls	r2, r3, #5
 803ca04:	69fb      	ldr	r3, [r7, #28]
 803ca06:	4413      	add	r3, r2
 803ca08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ca0c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 803ca0e:	68bb      	ldr	r3, [r7, #8]
 803ca10:	6999      	ldr	r1, [r3, #24]
 803ca12:	68bb      	ldr	r3, [r7, #8]
 803ca14:	68db      	ldr	r3, [r3, #12]
 803ca16:	440b      	add	r3, r1
 803ca18:	1e59      	subs	r1, r3, #1
 803ca1a:	68bb      	ldr	r3, [r7, #8]
 803ca1c:	68db      	ldr	r3, [r3, #12]
 803ca1e:	fbb1 f3f3 	udiv	r3, r1, r3
 803ca22:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 803ca24:	4b7a      	ldr	r3, [pc, #488]	; (803cc10 <USB_EPStartXfer+0x2e4>)
 803ca26:	400b      	ands	r3, r1
 803ca28:	69b9      	ldr	r1, [r7, #24]
 803ca2a:	0148      	lsls	r0, r1, #5
 803ca2c:	69f9      	ldr	r1, [r7, #28]
 803ca2e:	4401      	add	r1, r0
 803ca30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803ca34:	4313      	orrs	r3, r2
 803ca36:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 803ca38:	69bb      	ldr	r3, [r7, #24]
 803ca3a:	015a      	lsls	r2, r3, #5
 803ca3c:	69fb      	ldr	r3, [r7, #28]
 803ca3e:	4413      	add	r3, r2
 803ca40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ca44:	691a      	ldr	r2, [r3, #16]
 803ca46:	68bb      	ldr	r3, [r7, #8]
 803ca48:	699b      	ldr	r3, [r3, #24]
 803ca4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803ca4e:	69b9      	ldr	r1, [r7, #24]
 803ca50:	0148      	lsls	r0, r1, #5
 803ca52:	69f9      	ldr	r1, [r7, #28]
 803ca54:	4401      	add	r1, r0
 803ca56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803ca5a:	4313      	orrs	r3, r2
 803ca5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 803ca5e:	68bb      	ldr	r3, [r7, #8]
 803ca60:	791b      	ldrb	r3, [r3, #4]
 803ca62:	2b01      	cmp	r3, #1
 803ca64:	d11f      	bne.n	803caa6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 803ca66:	69bb      	ldr	r3, [r7, #24]
 803ca68:	015a      	lsls	r2, r3, #5
 803ca6a:	69fb      	ldr	r3, [r7, #28]
 803ca6c:	4413      	add	r3, r2
 803ca6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ca72:	691b      	ldr	r3, [r3, #16]
 803ca74:	69ba      	ldr	r2, [r7, #24]
 803ca76:	0151      	lsls	r1, r2, #5
 803ca78:	69fa      	ldr	r2, [r7, #28]
 803ca7a:	440a      	add	r2, r1
 803ca7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803ca80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 803ca84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 803ca86:	69bb      	ldr	r3, [r7, #24]
 803ca88:	015a      	lsls	r2, r3, #5
 803ca8a:	69fb      	ldr	r3, [r7, #28]
 803ca8c:	4413      	add	r3, r2
 803ca8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ca92:	691b      	ldr	r3, [r3, #16]
 803ca94:	69ba      	ldr	r2, [r7, #24]
 803ca96:	0151      	lsls	r1, r2, #5
 803ca98:	69fa      	ldr	r2, [r7, #28]
 803ca9a:	440a      	add	r2, r1
 803ca9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803caa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803caa4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 803caa6:	79fb      	ldrb	r3, [r7, #7]
 803caa8:	2b01      	cmp	r3, #1
 803caaa:	d14b      	bne.n	803cb44 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 803caac:	68bb      	ldr	r3, [r7, #8]
 803caae:	695b      	ldr	r3, [r3, #20]
 803cab0:	2b00      	cmp	r3, #0
 803cab2:	d009      	beq.n	803cac8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 803cab4:	69bb      	ldr	r3, [r7, #24]
 803cab6:	015a      	lsls	r2, r3, #5
 803cab8:	69fb      	ldr	r3, [r7, #28]
 803caba:	4413      	add	r3, r2
 803cabc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803cac0:	461a      	mov	r2, r3
 803cac2:	68bb      	ldr	r3, [r7, #8]
 803cac4:	695b      	ldr	r3, [r3, #20]
 803cac6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 803cac8:	68bb      	ldr	r3, [r7, #8]
 803caca:	791b      	ldrb	r3, [r3, #4]
 803cacc:	2b01      	cmp	r3, #1
 803cace:	d128      	bne.n	803cb22 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803cad0:	69fb      	ldr	r3, [r7, #28]
 803cad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803cad6:	689b      	ldr	r3, [r3, #8]
 803cad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803cadc:	2b00      	cmp	r3, #0
 803cade:	d110      	bne.n	803cb02 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 803cae0:	69bb      	ldr	r3, [r7, #24]
 803cae2:	015a      	lsls	r2, r3, #5
 803cae4:	69fb      	ldr	r3, [r7, #28]
 803cae6:	4413      	add	r3, r2
 803cae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803caec:	681b      	ldr	r3, [r3, #0]
 803caee:	69ba      	ldr	r2, [r7, #24]
 803caf0:	0151      	lsls	r1, r2, #5
 803caf2:	69fa      	ldr	r2, [r7, #28]
 803caf4:	440a      	add	r2, r1
 803caf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803cafa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803cafe:	6013      	str	r3, [r2, #0]
 803cb00:	e00f      	b.n	803cb22 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 803cb02:	69bb      	ldr	r3, [r7, #24]
 803cb04:	015a      	lsls	r2, r3, #5
 803cb06:	69fb      	ldr	r3, [r7, #28]
 803cb08:	4413      	add	r3, r2
 803cb0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803cb0e:	681b      	ldr	r3, [r3, #0]
 803cb10:	69ba      	ldr	r2, [r7, #24]
 803cb12:	0151      	lsls	r1, r2, #5
 803cb14:	69fa      	ldr	r2, [r7, #28]
 803cb16:	440a      	add	r2, r1
 803cb18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803cb1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803cb20:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803cb22:	69bb      	ldr	r3, [r7, #24]
 803cb24:	015a      	lsls	r2, r3, #5
 803cb26:	69fb      	ldr	r3, [r7, #28]
 803cb28:	4413      	add	r3, r2
 803cb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803cb2e:	681b      	ldr	r3, [r3, #0]
 803cb30:	69ba      	ldr	r2, [r7, #24]
 803cb32:	0151      	lsls	r1, r2, #5
 803cb34:	69fa      	ldr	r2, [r7, #28]
 803cb36:	440a      	add	r2, r1
 803cb38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803cb3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803cb40:	6013      	str	r3, [r2, #0]
 803cb42:	e137      	b.n	803cdb4 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803cb44:	69bb      	ldr	r3, [r7, #24]
 803cb46:	015a      	lsls	r2, r3, #5
 803cb48:	69fb      	ldr	r3, [r7, #28]
 803cb4a:	4413      	add	r3, r2
 803cb4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803cb50:	681b      	ldr	r3, [r3, #0]
 803cb52:	69ba      	ldr	r2, [r7, #24]
 803cb54:	0151      	lsls	r1, r2, #5
 803cb56:	69fa      	ldr	r2, [r7, #28]
 803cb58:	440a      	add	r2, r1
 803cb5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803cb5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803cb62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 803cb64:	68bb      	ldr	r3, [r7, #8]
 803cb66:	791b      	ldrb	r3, [r3, #4]
 803cb68:	2b01      	cmp	r3, #1
 803cb6a:	d015      	beq.n	803cb98 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 803cb6c:	68bb      	ldr	r3, [r7, #8]
 803cb6e:	699b      	ldr	r3, [r3, #24]
 803cb70:	2b00      	cmp	r3, #0
 803cb72:	f000 811f 	beq.w	803cdb4 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803cb76:	69fb      	ldr	r3, [r7, #28]
 803cb78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803cb7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803cb7e:	68bb      	ldr	r3, [r7, #8]
 803cb80:	781b      	ldrb	r3, [r3, #0]
 803cb82:	f003 030f 	and.w	r3, r3, #15
 803cb86:	2101      	movs	r1, #1
 803cb88:	fa01 f303 	lsl.w	r3, r1, r3
 803cb8c:	69f9      	ldr	r1, [r7, #28]
 803cb8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803cb92:	4313      	orrs	r3, r2
 803cb94:	634b      	str	r3, [r1, #52]	; 0x34
 803cb96:	e10d      	b.n	803cdb4 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803cb98:	69fb      	ldr	r3, [r7, #28]
 803cb9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803cb9e:	689b      	ldr	r3, [r3, #8]
 803cba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803cba4:	2b00      	cmp	r3, #0
 803cba6:	d110      	bne.n	803cbca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 803cba8:	69bb      	ldr	r3, [r7, #24]
 803cbaa:	015a      	lsls	r2, r3, #5
 803cbac:	69fb      	ldr	r3, [r7, #28]
 803cbae:	4413      	add	r3, r2
 803cbb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803cbb4:	681b      	ldr	r3, [r3, #0]
 803cbb6:	69ba      	ldr	r2, [r7, #24]
 803cbb8:	0151      	lsls	r1, r2, #5
 803cbba:	69fa      	ldr	r2, [r7, #28]
 803cbbc:	440a      	add	r2, r1
 803cbbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803cbc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803cbc6:	6013      	str	r3, [r2, #0]
 803cbc8:	e00f      	b.n	803cbea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 803cbca:	69bb      	ldr	r3, [r7, #24]
 803cbcc:	015a      	lsls	r2, r3, #5
 803cbce:	69fb      	ldr	r3, [r7, #28]
 803cbd0:	4413      	add	r3, r2
 803cbd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803cbd6:	681b      	ldr	r3, [r3, #0]
 803cbd8:	69ba      	ldr	r2, [r7, #24]
 803cbda:	0151      	lsls	r1, r2, #5
 803cbdc:	69fa      	ldr	r2, [r7, #28]
 803cbde:	440a      	add	r2, r1
 803cbe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803cbe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803cbe8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 803cbea:	68bb      	ldr	r3, [r7, #8]
 803cbec:	6919      	ldr	r1, [r3, #16]
 803cbee:	68bb      	ldr	r3, [r7, #8]
 803cbf0:	781a      	ldrb	r2, [r3, #0]
 803cbf2:	68bb      	ldr	r3, [r7, #8]
 803cbf4:	699b      	ldr	r3, [r3, #24]
 803cbf6:	b298      	uxth	r0, r3
 803cbf8:	79fb      	ldrb	r3, [r7, #7]
 803cbfa:	9300      	str	r3, [sp, #0]
 803cbfc:	4603      	mov	r3, r0
 803cbfe:	68f8      	ldr	r0, [r7, #12]
 803cc00:	f000 faea 	bl	803d1d8 <USB_WritePacket>
 803cc04:	e0d6      	b.n	803cdb4 <USB_EPStartXfer+0x488>
 803cc06:	bf00      	nop
 803cc08:	e007ffff 	.word	0xe007ffff
 803cc0c:	fff80000 	.word	0xfff80000
 803cc10:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 803cc14:	69bb      	ldr	r3, [r7, #24]
 803cc16:	015a      	lsls	r2, r3, #5
 803cc18:	69fb      	ldr	r3, [r7, #28]
 803cc1a:	4413      	add	r3, r2
 803cc1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cc20:	691a      	ldr	r2, [r3, #16]
 803cc22:	69bb      	ldr	r3, [r7, #24]
 803cc24:	0159      	lsls	r1, r3, #5
 803cc26:	69fb      	ldr	r3, [r7, #28]
 803cc28:	440b      	add	r3, r1
 803cc2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cc2e:	4619      	mov	r1, r3
 803cc30:	4b63      	ldr	r3, [pc, #396]	; (803cdc0 <USB_EPStartXfer+0x494>)
 803cc32:	4013      	ands	r3, r2
 803cc34:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 803cc36:	69bb      	ldr	r3, [r7, #24]
 803cc38:	015a      	lsls	r2, r3, #5
 803cc3a:	69fb      	ldr	r3, [r7, #28]
 803cc3c:	4413      	add	r3, r2
 803cc3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cc42:	691a      	ldr	r2, [r3, #16]
 803cc44:	69bb      	ldr	r3, [r7, #24]
 803cc46:	0159      	lsls	r1, r3, #5
 803cc48:	69fb      	ldr	r3, [r7, #28]
 803cc4a:	440b      	add	r3, r1
 803cc4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cc50:	4619      	mov	r1, r3
 803cc52:	4b5c      	ldr	r3, [pc, #368]	; (803cdc4 <USB_EPStartXfer+0x498>)
 803cc54:	4013      	ands	r3, r2
 803cc56:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 803cc58:	68bb      	ldr	r3, [r7, #8]
 803cc5a:	699b      	ldr	r3, [r3, #24]
 803cc5c:	2b00      	cmp	r3, #0
 803cc5e:	d123      	bne.n	803cca8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 803cc60:	69bb      	ldr	r3, [r7, #24]
 803cc62:	015a      	lsls	r2, r3, #5
 803cc64:	69fb      	ldr	r3, [r7, #28]
 803cc66:	4413      	add	r3, r2
 803cc68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cc6c:	691a      	ldr	r2, [r3, #16]
 803cc6e:	68bb      	ldr	r3, [r7, #8]
 803cc70:	68db      	ldr	r3, [r3, #12]
 803cc72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803cc76:	69b9      	ldr	r1, [r7, #24]
 803cc78:	0148      	lsls	r0, r1, #5
 803cc7a:	69f9      	ldr	r1, [r7, #28]
 803cc7c:	4401      	add	r1, r0
 803cc7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803cc82:	4313      	orrs	r3, r2
 803cc84:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803cc86:	69bb      	ldr	r3, [r7, #24]
 803cc88:	015a      	lsls	r2, r3, #5
 803cc8a:	69fb      	ldr	r3, [r7, #28]
 803cc8c:	4413      	add	r3, r2
 803cc8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cc92:	691b      	ldr	r3, [r3, #16]
 803cc94:	69ba      	ldr	r2, [r7, #24]
 803cc96:	0151      	lsls	r1, r2, #5
 803cc98:	69fa      	ldr	r2, [r7, #28]
 803cc9a:	440a      	add	r2, r1
 803cc9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803cca0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803cca4:	6113      	str	r3, [r2, #16]
 803cca6:	e037      	b.n	803cd18 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 803cca8:	68bb      	ldr	r3, [r7, #8]
 803ccaa:	699a      	ldr	r2, [r3, #24]
 803ccac:	68bb      	ldr	r3, [r7, #8]
 803ccae:	68db      	ldr	r3, [r3, #12]
 803ccb0:	4413      	add	r3, r2
 803ccb2:	1e5a      	subs	r2, r3, #1
 803ccb4:	68bb      	ldr	r3, [r7, #8]
 803ccb6:	68db      	ldr	r3, [r3, #12]
 803ccb8:	fbb2 f3f3 	udiv	r3, r2, r3
 803ccbc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 803ccbe:	68bb      	ldr	r3, [r7, #8]
 803ccc0:	68db      	ldr	r3, [r3, #12]
 803ccc2:	8afa      	ldrh	r2, [r7, #22]
 803ccc4:	fb03 f202 	mul.w	r2, r3, r2
 803ccc8:	68bb      	ldr	r3, [r7, #8]
 803ccca:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 803cccc:	69bb      	ldr	r3, [r7, #24]
 803ccce:	015a      	lsls	r2, r3, #5
 803ccd0:	69fb      	ldr	r3, [r7, #28]
 803ccd2:	4413      	add	r3, r2
 803ccd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803ccd8:	691a      	ldr	r2, [r3, #16]
 803ccda:	8afb      	ldrh	r3, [r7, #22]
 803ccdc:	04d9      	lsls	r1, r3, #19
 803ccde:	4b3a      	ldr	r3, [pc, #232]	; (803cdc8 <USB_EPStartXfer+0x49c>)
 803cce0:	400b      	ands	r3, r1
 803cce2:	69b9      	ldr	r1, [r7, #24]
 803cce4:	0148      	lsls	r0, r1, #5
 803cce6:	69f9      	ldr	r1, [r7, #28]
 803cce8:	4401      	add	r1, r0
 803ccea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803ccee:	4313      	orrs	r3, r2
 803ccf0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 803ccf2:	69bb      	ldr	r3, [r7, #24]
 803ccf4:	015a      	lsls	r2, r3, #5
 803ccf6:	69fb      	ldr	r3, [r7, #28]
 803ccf8:	4413      	add	r3, r2
 803ccfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803ccfe:	691a      	ldr	r2, [r3, #16]
 803cd00:	68bb      	ldr	r3, [r7, #8]
 803cd02:	69db      	ldr	r3, [r3, #28]
 803cd04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803cd08:	69b9      	ldr	r1, [r7, #24]
 803cd0a:	0148      	lsls	r0, r1, #5
 803cd0c:	69f9      	ldr	r1, [r7, #28]
 803cd0e:	4401      	add	r1, r0
 803cd10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803cd14:	4313      	orrs	r3, r2
 803cd16:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 803cd18:	79fb      	ldrb	r3, [r7, #7]
 803cd1a:	2b01      	cmp	r3, #1
 803cd1c:	d10d      	bne.n	803cd3a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 803cd1e:	68bb      	ldr	r3, [r7, #8]
 803cd20:	691b      	ldr	r3, [r3, #16]
 803cd22:	2b00      	cmp	r3, #0
 803cd24:	d009      	beq.n	803cd3a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 803cd26:	68bb      	ldr	r3, [r7, #8]
 803cd28:	6919      	ldr	r1, [r3, #16]
 803cd2a:	69bb      	ldr	r3, [r7, #24]
 803cd2c:	015a      	lsls	r2, r3, #5
 803cd2e:	69fb      	ldr	r3, [r7, #28]
 803cd30:	4413      	add	r3, r2
 803cd32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cd36:	460a      	mov	r2, r1
 803cd38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 803cd3a:	68bb      	ldr	r3, [r7, #8]
 803cd3c:	791b      	ldrb	r3, [r3, #4]
 803cd3e:	2b01      	cmp	r3, #1
 803cd40:	d128      	bne.n	803cd94 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803cd42:	69fb      	ldr	r3, [r7, #28]
 803cd44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803cd48:	689b      	ldr	r3, [r3, #8]
 803cd4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803cd4e:	2b00      	cmp	r3, #0
 803cd50:	d110      	bne.n	803cd74 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 803cd52:	69bb      	ldr	r3, [r7, #24]
 803cd54:	015a      	lsls	r2, r3, #5
 803cd56:	69fb      	ldr	r3, [r7, #28]
 803cd58:	4413      	add	r3, r2
 803cd5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cd5e:	681b      	ldr	r3, [r3, #0]
 803cd60:	69ba      	ldr	r2, [r7, #24]
 803cd62:	0151      	lsls	r1, r2, #5
 803cd64:	69fa      	ldr	r2, [r7, #28]
 803cd66:	440a      	add	r2, r1
 803cd68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803cd6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803cd70:	6013      	str	r3, [r2, #0]
 803cd72:	e00f      	b.n	803cd94 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 803cd74:	69bb      	ldr	r3, [r7, #24]
 803cd76:	015a      	lsls	r2, r3, #5
 803cd78:	69fb      	ldr	r3, [r7, #28]
 803cd7a:	4413      	add	r3, r2
 803cd7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cd80:	681b      	ldr	r3, [r3, #0]
 803cd82:	69ba      	ldr	r2, [r7, #24]
 803cd84:	0151      	lsls	r1, r2, #5
 803cd86:	69fa      	ldr	r2, [r7, #28]
 803cd88:	440a      	add	r2, r1
 803cd8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803cd8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803cd92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 803cd94:	69bb      	ldr	r3, [r7, #24]
 803cd96:	015a      	lsls	r2, r3, #5
 803cd98:	69fb      	ldr	r3, [r7, #28]
 803cd9a:	4413      	add	r3, r2
 803cd9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cda0:	681b      	ldr	r3, [r3, #0]
 803cda2:	69ba      	ldr	r2, [r7, #24]
 803cda4:	0151      	lsls	r1, r2, #5
 803cda6:	69fa      	ldr	r2, [r7, #28]
 803cda8:	440a      	add	r2, r1
 803cdaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803cdae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803cdb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803cdb4:	2300      	movs	r3, #0
}
 803cdb6:	4618      	mov	r0, r3
 803cdb8:	3720      	adds	r7, #32
 803cdba:	46bd      	mov	sp, r7
 803cdbc:	bd80      	pop	{r7, pc}
 803cdbe:	bf00      	nop
 803cdc0:	fff80000 	.word	0xfff80000
 803cdc4:	e007ffff 	.word	0xe007ffff
 803cdc8:	1ff80000 	.word	0x1ff80000

0803cdcc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 803cdcc:	b480      	push	{r7}
 803cdce:	b087      	sub	sp, #28
 803cdd0:	af00      	add	r7, sp, #0
 803cdd2:	60f8      	str	r0, [r7, #12]
 803cdd4:	60b9      	str	r1, [r7, #8]
 803cdd6:	4613      	mov	r3, r2
 803cdd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803cdda:	68fb      	ldr	r3, [r7, #12]
 803cddc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 803cdde:	68bb      	ldr	r3, [r7, #8]
 803cde0:	781b      	ldrb	r3, [r3, #0]
 803cde2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 803cde4:	68bb      	ldr	r3, [r7, #8]
 803cde6:	785b      	ldrb	r3, [r3, #1]
 803cde8:	2b01      	cmp	r3, #1
 803cdea:	f040 80ce 	bne.w	803cf8a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 803cdee:	68bb      	ldr	r3, [r7, #8]
 803cdf0:	699b      	ldr	r3, [r3, #24]
 803cdf2:	2b00      	cmp	r3, #0
 803cdf4:	d132      	bne.n	803ce5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803cdf6:	693b      	ldr	r3, [r7, #16]
 803cdf8:	015a      	lsls	r2, r3, #5
 803cdfa:	697b      	ldr	r3, [r7, #20]
 803cdfc:	4413      	add	r3, r2
 803cdfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ce02:	691a      	ldr	r2, [r3, #16]
 803ce04:	693b      	ldr	r3, [r7, #16]
 803ce06:	0159      	lsls	r1, r3, #5
 803ce08:	697b      	ldr	r3, [r7, #20]
 803ce0a:	440b      	add	r3, r1
 803ce0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ce10:	4619      	mov	r1, r3
 803ce12:	4b9a      	ldr	r3, [pc, #616]	; (803d07c <USB_EP0StartXfer+0x2b0>)
 803ce14:	4013      	ands	r3, r2
 803ce16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803ce18:	693b      	ldr	r3, [r7, #16]
 803ce1a:	015a      	lsls	r2, r3, #5
 803ce1c:	697b      	ldr	r3, [r7, #20]
 803ce1e:	4413      	add	r3, r2
 803ce20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ce24:	691b      	ldr	r3, [r3, #16]
 803ce26:	693a      	ldr	r2, [r7, #16]
 803ce28:	0151      	lsls	r1, r2, #5
 803ce2a:	697a      	ldr	r2, [r7, #20]
 803ce2c:	440a      	add	r2, r1
 803ce2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803ce32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803ce36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803ce38:	693b      	ldr	r3, [r7, #16]
 803ce3a:	015a      	lsls	r2, r3, #5
 803ce3c:	697b      	ldr	r3, [r7, #20]
 803ce3e:	4413      	add	r3, r2
 803ce40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ce44:	691a      	ldr	r2, [r3, #16]
 803ce46:	693b      	ldr	r3, [r7, #16]
 803ce48:	0159      	lsls	r1, r3, #5
 803ce4a:	697b      	ldr	r3, [r7, #20]
 803ce4c:	440b      	add	r3, r1
 803ce4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ce52:	4619      	mov	r1, r3
 803ce54:	4b8a      	ldr	r3, [pc, #552]	; (803d080 <USB_EP0StartXfer+0x2b4>)
 803ce56:	4013      	ands	r3, r2
 803ce58:	610b      	str	r3, [r1, #16]
 803ce5a:	e04e      	b.n	803cefa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803ce5c:	693b      	ldr	r3, [r7, #16]
 803ce5e:	015a      	lsls	r2, r3, #5
 803ce60:	697b      	ldr	r3, [r7, #20]
 803ce62:	4413      	add	r3, r2
 803ce64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ce68:	691a      	ldr	r2, [r3, #16]
 803ce6a:	693b      	ldr	r3, [r7, #16]
 803ce6c:	0159      	lsls	r1, r3, #5
 803ce6e:	697b      	ldr	r3, [r7, #20]
 803ce70:	440b      	add	r3, r1
 803ce72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ce76:	4619      	mov	r1, r3
 803ce78:	4b81      	ldr	r3, [pc, #516]	; (803d080 <USB_EP0StartXfer+0x2b4>)
 803ce7a:	4013      	ands	r3, r2
 803ce7c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803ce7e:	693b      	ldr	r3, [r7, #16]
 803ce80:	015a      	lsls	r2, r3, #5
 803ce82:	697b      	ldr	r3, [r7, #20]
 803ce84:	4413      	add	r3, r2
 803ce86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ce8a:	691a      	ldr	r2, [r3, #16]
 803ce8c:	693b      	ldr	r3, [r7, #16]
 803ce8e:	0159      	lsls	r1, r3, #5
 803ce90:	697b      	ldr	r3, [r7, #20]
 803ce92:	440b      	add	r3, r1
 803ce94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ce98:	4619      	mov	r1, r3
 803ce9a:	4b78      	ldr	r3, [pc, #480]	; (803d07c <USB_EP0StartXfer+0x2b0>)
 803ce9c:	4013      	ands	r3, r2
 803ce9e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 803cea0:	68bb      	ldr	r3, [r7, #8]
 803cea2:	699a      	ldr	r2, [r3, #24]
 803cea4:	68bb      	ldr	r3, [r7, #8]
 803cea6:	68db      	ldr	r3, [r3, #12]
 803cea8:	429a      	cmp	r2, r3
 803ceaa:	d903      	bls.n	803ceb4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 803ceac:	68bb      	ldr	r3, [r7, #8]
 803ceae:	68da      	ldr	r2, [r3, #12]
 803ceb0:	68bb      	ldr	r3, [r7, #8]
 803ceb2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803ceb4:	693b      	ldr	r3, [r7, #16]
 803ceb6:	015a      	lsls	r2, r3, #5
 803ceb8:	697b      	ldr	r3, [r7, #20]
 803ceba:	4413      	add	r3, r2
 803cebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803cec0:	691b      	ldr	r3, [r3, #16]
 803cec2:	693a      	ldr	r2, [r7, #16]
 803cec4:	0151      	lsls	r1, r2, #5
 803cec6:	697a      	ldr	r2, [r7, #20]
 803cec8:	440a      	add	r2, r1
 803ceca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803cece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803ced2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 803ced4:	693b      	ldr	r3, [r7, #16]
 803ced6:	015a      	lsls	r2, r3, #5
 803ced8:	697b      	ldr	r3, [r7, #20]
 803ceda:	4413      	add	r3, r2
 803cedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803cee0:	691a      	ldr	r2, [r3, #16]
 803cee2:	68bb      	ldr	r3, [r7, #8]
 803cee4:	699b      	ldr	r3, [r3, #24]
 803cee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803ceea:	6939      	ldr	r1, [r7, #16]
 803ceec:	0148      	lsls	r0, r1, #5
 803ceee:	6979      	ldr	r1, [r7, #20]
 803cef0:	4401      	add	r1, r0
 803cef2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803cef6:	4313      	orrs	r3, r2
 803cef8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 803cefa:	79fb      	ldrb	r3, [r7, #7]
 803cefc:	2b01      	cmp	r3, #1
 803cefe:	d11e      	bne.n	803cf3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 803cf00:	68bb      	ldr	r3, [r7, #8]
 803cf02:	695b      	ldr	r3, [r3, #20]
 803cf04:	2b00      	cmp	r3, #0
 803cf06:	d009      	beq.n	803cf1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 803cf08:	693b      	ldr	r3, [r7, #16]
 803cf0a:	015a      	lsls	r2, r3, #5
 803cf0c:	697b      	ldr	r3, [r7, #20]
 803cf0e:	4413      	add	r3, r2
 803cf10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803cf14:	461a      	mov	r2, r3
 803cf16:	68bb      	ldr	r3, [r7, #8]
 803cf18:	695b      	ldr	r3, [r3, #20]
 803cf1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803cf1c:	693b      	ldr	r3, [r7, #16]
 803cf1e:	015a      	lsls	r2, r3, #5
 803cf20:	697b      	ldr	r3, [r7, #20]
 803cf22:	4413      	add	r3, r2
 803cf24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803cf28:	681b      	ldr	r3, [r3, #0]
 803cf2a:	693a      	ldr	r2, [r7, #16]
 803cf2c:	0151      	lsls	r1, r2, #5
 803cf2e:	697a      	ldr	r2, [r7, #20]
 803cf30:	440a      	add	r2, r1
 803cf32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803cf36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803cf3a:	6013      	str	r3, [r2, #0]
 803cf3c:	e097      	b.n	803d06e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803cf3e:	693b      	ldr	r3, [r7, #16]
 803cf40:	015a      	lsls	r2, r3, #5
 803cf42:	697b      	ldr	r3, [r7, #20]
 803cf44:	4413      	add	r3, r2
 803cf46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803cf4a:	681b      	ldr	r3, [r3, #0]
 803cf4c:	693a      	ldr	r2, [r7, #16]
 803cf4e:	0151      	lsls	r1, r2, #5
 803cf50:	697a      	ldr	r2, [r7, #20]
 803cf52:	440a      	add	r2, r1
 803cf54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803cf58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803cf5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 803cf5e:	68bb      	ldr	r3, [r7, #8]
 803cf60:	699b      	ldr	r3, [r3, #24]
 803cf62:	2b00      	cmp	r3, #0
 803cf64:	f000 8083 	beq.w	803d06e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803cf68:	697b      	ldr	r3, [r7, #20]
 803cf6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803cf6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803cf70:	68bb      	ldr	r3, [r7, #8]
 803cf72:	781b      	ldrb	r3, [r3, #0]
 803cf74:	f003 030f 	and.w	r3, r3, #15
 803cf78:	2101      	movs	r1, #1
 803cf7a:	fa01 f303 	lsl.w	r3, r1, r3
 803cf7e:	6979      	ldr	r1, [r7, #20]
 803cf80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803cf84:	4313      	orrs	r3, r2
 803cf86:	634b      	str	r3, [r1, #52]	; 0x34
 803cf88:	e071      	b.n	803d06e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 803cf8a:	693b      	ldr	r3, [r7, #16]
 803cf8c:	015a      	lsls	r2, r3, #5
 803cf8e:	697b      	ldr	r3, [r7, #20]
 803cf90:	4413      	add	r3, r2
 803cf92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cf96:	691a      	ldr	r2, [r3, #16]
 803cf98:	693b      	ldr	r3, [r7, #16]
 803cf9a:	0159      	lsls	r1, r3, #5
 803cf9c:	697b      	ldr	r3, [r7, #20]
 803cf9e:	440b      	add	r3, r1
 803cfa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cfa4:	4619      	mov	r1, r3
 803cfa6:	4b36      	ldr	r3, [pc, #216]	; (803d080 <USB_EP0StartXfer+0x2b4>)
 803cfa8:	4013      	ands	r3, r2
 803cfaa:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 803cfac:	693b      	ldr	r3, [r7, #16]
 803cfae:	015a      	lsls	r2, r3, #5
 803cfb0:	697b      	ldr	r3, [r7, #20]
 803cfb2:	4413      	add	r3, r2
 803cfb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cfb8:	691a      	ldr	r2, [r3, #16]
 803cfba:	693b      	ldr	r3, [r7, #16]
 803cfbc:	0159      	lsls	r1, r3, #5
 803cfbe:	697b      	ldr	r3, [r7, #20]
 803cfc0:	440b      	add	r3, r1
 803cfc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cfc6:	4619      	mov	r1, r3
 803cfc8:	4b2c      	ldr	r3, [pc, #176]	; (803d07c <USB_EP0StartXfer+0x2b0>)
 803cfca:	4013      	ands	r3, r2
 803cfcc:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 803cfce:	68bb      	ldr	r3, [r7, #8]
 803cfd0:	699b      	ldr	r3, [r3, #24]
 803cfd2:	2b00      	cmp	r3, #0
 803cfd4:	d003      	beq.n	803cfde <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 803cfd6:	68bb      	ldr	r3, [r7, #8]
 803cfd8:	68da      	ldr	r2, [r3, #12]
 803cfda:	68bb      	ldr	r3, [r7, #8]
 803cfdc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 803cfde:	68bb      	ldr	r3, [r7, #8]
 803cfe0:	68da      	ldr	r2, [r3, #12]
 803cfe2:	68bb      	ldr	r3, [r7, #8]
 803cfe4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803cfe6:	693b      	ldr	r3, [r7, #16]
 803cfe8:	015a      	lsls	r2, r3, #5
 803cfea:	697b      	ldr	r3, [r7, #20]
 803cfec:	4413      	add	r3, r2
 803cfee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803cff2:	691b      	ldr	r3, [r3, #16]
 803cff4:	693a      	ldr	r2, [r7, #16]
 803cff6:	0151      	lsls	r1, r2, #5
 803cff8:	697a      	ldr	r2, [r7, #20]
 803cffa:	440a      	add	r2, r1
 803cffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803d000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803d004:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 803d006:	693b      	ldr	r3, [r7, #16]
 803d008:	015a      	lsls	r2, r3, #5
 803d00a:	697b      	ldr	r3, [r7, #20]
 803d00c:	4413      	add	r3, r2
 803d00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d012:	691a      	ldr	r2, [r3, #16]
 803d014:	68bb      	ldr	r3, [r7, #8]
 803d016:	69db      	ldr	r3, [r3, #28]
 803d018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803d01c:	6939      	ldr	r1, [r7, #16]
 803d01e:	0148      	lsls	r0, r1, #5
 803d020:	6979      	ldr	r1, [r7, #20]
 803d022:	4401      	add	r1, r0
 803d024:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803d028:	4313      	orrs	r3, r2
 803d02a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 803d02c:	79fb      	ldrb	r3, [r7, #7]
 803d02e:	2b01      	cmp	r3, #1
 803d030:	d10d      	bne.n	803d04e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 803d032:	68bb      	ldr	r3, [r7, #8]
 803d034:	691b      	ldr	r3, [r3, #16]
 803d036:	2b00      	cmp	r3, #0
 803d038:	d009      	beq.n	803d04e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 803d03a:	68bb      	ldr	r3, [r7, #8]
 803d03c:	6919      	ldr	r1, [r3, #16]
 803d03e:	693b      	ldr	r3, [r7, #16]
 803d040:	015a      	lsls	r2, r3, #5
 803d042:	697b      	ldr	r3, [r7, #20]
 803d044:	4413      	add	r3, r2
 803d046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d04a:	460a      	mov	r2, r1
 803d04c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 803d04e:	693b      	ldr	r3, [r7, #16]
 803d050:	015a      	lsls	r2, r3, #5
 803d052:	697b      	ldr	r3, [r7, #20]
 803d054:	4413      	add	r3, r2
 803d056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d05a:	681b      	ldr	r3, [r3, #0]
 803d05c:	693a      	ldr	r2, [r7, #16]
 803d05e:	0151      	lsls	r1, r2, #5
 803d060:	697a      	ldr	r2, [r7, #20]
 803d062:	440a      	add	r2, r1
 803d064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803d068:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803d06c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803d06e:	2300      	movs	r3, #0
}
 803d070:	4618      	mov	r0, r3
 803d072:	371c      	adds	r7, #28
 803d074:	46bd      	mov	sp, r7
 803d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d07a:	4770      	bx	lr
 803d07c:	e007ffff 	.word	0xe007ffff
 803d080:	fff80000 	.word	0xfff80000

0803d084 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803d084:	b480      	push	{r7}
 803d086:	b087      	sub	sp, #28
 803d088:	af00      	add	r7, sp, #0
 803d08a:	6078      	str	r0, [r7, #4]
 803d08c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 803d08e:	2300      	movs	r3, #0
 803d090:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 803d092:	2300      	movs	r3, #0
 803d094:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d096:	687b      	ldr	r3, [r7, #4]
 803d098:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 803d09a:	683b      	ldr	r3, [r7, #0]
 803d09c:	785b      	ldrb	r3, [r3, #1]
 803d09e:	2b01      	cmp	r3, #1
 803d0a0:	d14a      	bne.n	803d138 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 803d0a2:	683b      	ldr	r3, [r7, #0]
 803d0a4:	781b      	ldrb	r3, [r3, #0]
 803d0a6:	015a      	lsls	r2, r3, #5
 803d0a8:	693b      	ldr	r3, [r7, #16]
 803d0aa:	4413      	add	r3, r2
 803d0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803d0b0:	681b      	ldr	r3, [r3, #0]
 803d0b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803d0b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803d0ba:	f040 8086 	bne.w	803d1ca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 803d0be:	683b      	ldr	r3, [r7, #0]
 803d0c0:	781b      	ldrb	r3, [r3, #0]
 803d0c2:	015a      	lsls	r2, r3, #5
 803d0c4:	693b      	ldr	r3, [r7, #16]
 803d0c6:	4413      	add	r3, r2
 803d0c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803d0cc:	681b      	ldr	r3, [r3, #0]
 803d0ce:	683a      	ldr	r2, [r7, #0]
 803d0d0:	7812      	ldrb	r2, [r2, #0]
 803d0d2:	0151      	lsls	r1, r2, #5
 803d0d4:	693a      	ldr	r2, [r7, #16]
 803d0d6:	440a      	add	r2, r1
 803d0d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803d0dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803d0e0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 803d0e2:	683b      	ldr	r3, [r7, #0]
 803d0e4:	781b      	ldrb	r3, [r3, #0]
 803d0e6:	015a      	lsls	r2, r3, #5
 803d0e8:	693b      	ldr	r3, [r7, #16]
 803d0ea:	4413      	add	r3, r2
 803d0ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803d0f0:	681b      	ldr	r3, [r3, #0]
 803d0f2:	683a      	ldr	r2, [r7, #0]
 803d0f4:	7812      	ldrb	r2, [r2, #0]
 803d0f6:	0151      	lsls	r1, r2, #5
 803d0f8:	693a      	ldr	r2, [r7, #16]
 803d0fa:	440a      	add	r2, r1
 803d0fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803d100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803d104:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 803d106:	68fb      	ldr	r3, [r7, #12]
 803d108:	3301      	adds	r3, #1
 803d10a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 803d10c:	68fb      	ldr	r3, [r7, #12]
 803d10e:	f242 7210 	movw	r2, #10000	; 0x2710
 803d112:	4293      	cmp	r3, r2
 803d114:	d902      	bls.n	803d11c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 803d116:	2301      	movs	r3, #1
 803d118:	75fb      	strb	r3, [r7, #23]
          break;
 803d11a:	e056      	b.n	803d1ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 803d11c:	683b      	ldr	r3, [r7, #0]
 803d11e:	781b      	ldrb	r3, [r3, #0]
 803d120:	015a      	lsls	r2, r3, #5
 803d122:	693b      	ldr	r3, [r7, #16]
 803d124:	4413      	add	r3, r2
 803d126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803d12a:	681b      	ldr	r3, [r3, #0]
 803d12c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803d130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803d134:	d0e7      	beq.n	803d106 <USB_EPStopXfer+0x82>
 803d136:	e048      	b.n	803d1ca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803d138:	683b      	ldr	r3, [r7, #0]
 803d13a:	781b      	ldrb	r3, [r3, #0]
 803d13c:	015a      	lsls	r2, r3, #5
 803d13e:	693b      	ldr	r3, [r7, #16]
 803d140:	4413      	add	r3, r2
 803d142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d146:	681b      	ldr	r3, [r3, #0]
 803d148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803d14c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803d150:	d13b      	bne.n	803d1ca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 803d152:	683b      	ldr	r3, [r7, #0]
 803d154:	781b      	ldrb	r3, [r3, #0]
 803d156:	015a      	lsls	r2, r3, #5
 803d158:	693b      	ldr	r3, [r7, #16]
 803d15a:	4413      	add	r3, r2
 803d15c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d160:	681b      	ldr	r3, [r3, #0]
 803d162:	683a      	ldr	r2, [r7, #0]
 803d164:	7812      	ldrb	r2, [r2, #0]
 803d166:	0151      	lsls	r1, r2, #5
 803d168:	693a      	ldr	r2, [r7, #16]
 803d16a:	440a      	add	r2, r1
 803d16c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803d170:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803d174:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 803d176:	683b      	ldr	r3, [r7, #0]
 803d178:	781b      	ldrb	r3, [r3, #0]
 803d17a:	015a      	lsls	r2, r3, #5
 803d17c:	693b      	ldr	r3, [r7, #16]
 803d17e:	4413      	add	r3, r2
 803d180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d184:	681b      	ldr	r3, [r3, #0]
 803d186:	683a      	ldr	r2, [r7, #0]
 803d188:	7812      	ldrb	r2, [r2, #0]
 803d18a:	0151      	lsls	r1, r2, #5
 803d18c:	693a      	ldr	r2, [r7, #16]
 803d18e:	440a      	add	r2, r1
 803d190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803d194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803d198:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 803d19a:	68fb      	ldr	r3, [r7, #12]
 803d19c:	3301      	adds	r3, #1
 803d19e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 803d1a0:	68fb      	ldr	r3, [r7, #12]
 803d1a2:	f242 7210 	movw	r2, #10000	; 0x2710
 803d1a6:	4293      	cmp	r3, r2
 803d1a8:	d902      	bls.n	803d1b0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 803d1aa:	2301      	movs	r3, #1
 803d1ac:	75fb      	strb	r3, [r7, #23]
          break;
 803d1ae:	e00c      	b.n	803d1ca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 803d1b0:	683b      	ldr	r3, [r7, #0]
 803d1b2:	781b      	ldrb	r3, [r3, #0]
 803d1b4:	015a      	lsls	r2, r3, #5
 803d1b6:	693b      	ldr	r3, [r7, #16]
 803d1b8:	4413      	add	r3, r2
 803d1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d1be:	681b      	ldr	r3, [r3, #0]
 803d1c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803d1c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803d1c8:	d0e7      	beq.n	803d19a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 803d1ca:	7dfb      	ldrb	r3, [r7, #23]
}
 803d1cc:	4618      	mov	r0, r3
 803d1ce:	371c      	adds	r7, #28
 803d1d0:	46bd      	mov	sp, r7
 803d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d1d6:	4770      	bx	lr

0803d1d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 803d1d8:	b480      	push	{r7}
 803d1da:	b089      	sub	sp, #36	; 0x24
 803d1dc:	af00      	add	r7, sp, #0
 803d1de:	60f8      	str	r0, [r7, #12]
 803d1e0:	60b9      	str	r1, [r7, #8]
 803d1e2:	4611      	mov	r1, r2
 803d1e4:	461a      	mov	r2, r3
 803d1e6:	460b      	mov	r3, r1
 803d1e8:	71fb      	strb	r3, [r7, #7]
 803d1ea:	4613      	mov	r3, r2
 803d1ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d1ee:	68fb      	ldr	r3, [r7, #12]
 803d1f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 803d1f2:	68bb      	ldr	r3, [r7, #8]
 803d1f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 803d1f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 803d1fa:	2b00      	cmp	r3, #0
 803d1fc:	d123      	bne.n	803d246 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 803d1fe:	88bb      	ldrh	r3, [r7, #4]
 803d200:	3303      	adds	r3, #3
 803d202:	089b      	lsrs	r3, r3, #2
 803d204:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 803d206:	2300      	movs	r3, #0
 803d208:	61bb      	str	r3, [r7, #24]
 803d20a:	e018      	b.n	803d23e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 803d20c:	79fb      	ldrb	r3, [r7, #7]
 803d20e:	031a      	lsls	r2, r3, #12
 803d210:	697b      	ldr	r3, [r7, #20]
 803d212:	4413      	add	r3, r2
 803d214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803d218:	461a      	mov	r2, r3
 803d21a:	69fb      	ldr	r3, [r7, #28]
 803d21c:	681b      	ldr	r3, [r3, #0]
 803d21e:	6013      	str	r3, [r2, #0]
      pSrc++;
 803d220:	69fb      	ldr	r3, [r7, #28]
 803d222:	3301      	adds	r3, #1
 803d224:	61fb      	str	r3, [r7, #28]
      pSrc++;
 803d226:	69fb      	ldr	r3, [r7, #28]
 803d228:	3301      	adds	r3, #1
 803d22a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 803d22c:	69fb      	ldr	r3, [r7, #28]
 803d22e:	3301      	adds	r3, #1
 803d230:	61fb      	str	r3, [r7, #28]
      pSrc++;
 803d232:	69fb      	ldr	r3, [r7, #28]
 803d234:	3301      	adds	r3, #1
 803d236:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 803d238:	69bb      	ldr	r3, [r7, #24]
 803d23a:	3301      	adds	r3, #1
 803d23c:	61bb      	str	r3, [r7, #24]
 803d23e:	69ba      	ldr	r2, [r7, #24]
 803d240:	693b      	ldr	r3, [r7, #16]
 803d242:	429a      	cmp	r2, r3
 803d244:	d3e2      	bcc.n	803d20c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 803d246:	2300      	movs	r3, #0
}
 803d248:	4618      	mov	r0, r3
 803d24a:	3724      	adds	r7, #36	; 0x24
 803d24c:	46bd      	mov	sp, r7
 803d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d252:	4770      	bx	lr

0803d254 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 803d254:	b480      	push	{r7}
 803d256:	b08b      	sub	sp, #44	; 0x2c
 803d258:	af00      	add	r7, sp, #0
 803d25a:	60f8      	str	r0, [r7, #12]
 803d25c:	60b9      	str	r1, [r7, #8]
 803d25e:	4613      	mov	r3, r2
 803d260:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d262:	68fb      	ldr	r3, [r7, #12]
 803d264:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 803d266:	68bb      	ldr	r3, [r7, #8]
 803d268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 803d26a:	88fb      	ldrh	r3, [r7, #6]
 803d26c:	089b      	lsrs	r3, r3, #2
 803d26e:	b29b      	uxth	r3, r3
 803d270:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 803d272:	88fb      	ldrh	r3, [r7, #6]
 803d274:	f003 0303 	and.w	r3, r3, #3
 803d278:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 803d27a:	2300      	movs	r3, #0
 803d27c:	623b      	str	r3, [r7, #32]
 803d27e:	e014      	b.n	803d2aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 803d280:	69bb      	ldr	r3, [r7, #24]
 803d282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803d286:	681a      	ldr	r2, [r3, #0]
 803d288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803d28a:	601a      	str	r2, [r3, #0]
    pDest++;
 803d28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803d28e:	3301      	adds	r3, #1
 803d290:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803d292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803d294:	3301      	adds	r3, #1
 803d296:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803d298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803d29a:	3301      	adds	r3, #1
 803d29c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803d2a0:	3301      	adds	r3, #1
 803d2a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 803d2a4:	6a3b      	ldr	r3, [r7, #32]
 803d2a6:	3301      	adds	r3, #1
 803d2a8:	623b      	str	r3, [r7, #32]
 803d2aa:	6a3a      	ldr	r2, [r7, #32]
 803d2ac:	697b      	ldr	r3, [r7, #20]
 803d2ae:	429a      	cmp	r2, r3
 803d2b0:	d3e6      	bcc.n	803d280 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 803d2b2:	8bfb      	ldrh	r3, [r7, #30]
 803d2b4:	2b00      	cmp	r3, #0
 803d2b6:	d01e      	beq.n	803d2f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 803d2b8:	2300      	movs	r3, #0
 803d2ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 803d2bc:	69bb      	ldr	r3, [r7, #24]
 803d2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803d2c2:	461a      	mov	r2, r3
 803d2c4:	f107 0310 	add.w	r3, r7, #16
 803d2c8:	6812      	ldr	r2, [r2, #0]
 803d2ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 803d2cc:	693a      	ldr	r2, [r7, #16]
 803d2ce:	6a3b      	ldr	r3, [r7, #32]
 803d2d0:	b2db      	uxtb	r3, r3
 803d2d2:	00db      	lsls	r3, r3, #3
 803d2d4:	fa22 f303 	lsr.w	r3, r2, r3
 803d2d8:	b2da      	uxtb	r2, r3
 803d2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803d2dc:	701a      	strb	r2, [r3, #0]
      i++;
 803d2de:	6a3b      	ldr	r3, [r7, #32]
 803d2e0:	3301      	adds	r3, #1
 803d2e2:	623b      	str	r3, [r7, #32]
      pDest++;
 803d2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803d2e6:	3301      	adds	r3, #1
 803d2e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 803d2ea:	8bfb      	ldrh	r3, [r7, #30]
 803d2ec:	3b01      	subs	r3, #1
 803d2ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 803d2f0:	8bfb      	ldrh	r3, [r7, #30]
 803d2f2:	2b00      	cmp	r3, #0
 803d2f4:	d1ea      	bne.n	803d2cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 803d2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 803d2f8:	4618      	mov	r0, r3
 803d2fa:	372c      	adds	r7, #44	; 0x2c
 803d2fc:	46bd      	mov	sp, r7
 803d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d302:	4770      	bx	lr

0803d304 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803d304:	b480      	push	{r7}
 803d306:	b085      	sub	sp, #20
 803d308:	af00      	add	r7, sp, #0
 803d30a:	6078      	str	r0, [r7, #4]
 803d30c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d30e:	687b      	ldr	r3, [r7, #4]
 803d310:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803d312:	683b      	ldr	r3, [r7, #0]
 803d314:	781b      	ldrb	r3, [r3, #0]
 803d316:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803d318:	683b      	ldr	r3, [r7, #0]
 803d31a:	785b      	ldrb	r3, [r3, #1]
 803d31c:	2b01      	cmp	r3, #1
 803d31e:	d12c      	bne.n	803d37a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 803d320:	68bb      	ldr	r3, [r7, #8]
 803d322:	015a      	lsls	r2, r3, #5
 803d324:	68fb      	ldr	r3, [r7, #12]
 803d326:	4413      	add	r3, r2
 803d328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803d32c:	681b      	ldr	r3, [r3, #0]
 803d32e:	2b00      	cmp	r3, #0
 803d330:	db12      	blt.n	803d358 <USB_EPSetStall+0x54>
 803d332:	68bb      	ldr	r3, [r7, #8]
 803d334:	2b00      	cmp	r3, #0
 803d336:	d00f      	beq.n	803d358 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 803d338:	68bb      	ldr	r3, [r7, #8]
 803d33a:	015a      	lsls	r2, r3, #5
 803d33c:	68fb      	ldr	r3, [r7, #12]
 803d33e:	4413      	add	r3, r2
 803d340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803d344:	681b      	ldr	r3, [r3, #0]
 803d346:	68ba      	ldr	r2, [r7, #8]
 803d348:	0151      	lsls	r1, r2, #5
 803d34a:	68fa      	ldr	r2, [r7, #12]
 803d34c:	440a      	add	r2, r1
 803d34e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803d352:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 803d356:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 803d358:	68bb      	ldr	r3, [r7, #8]
 803d35a:	015a      	lsls	r2, r3, #5
 803d35c:	68fb      	ldr	r3, [r7, #12]
 803d35e:	4413      	add	r3, r2
 803d360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803d364:	681b      	ldr	r3, [r3, #0]
 803d366:	68ba      	ldr	r2, [r7, #8]
 803d368:	0151      	lsls	r1, r2, #5
 803d36a:	68fa      	ldr	r2, [r7, #12]
 803d36c:	440a      	add	r2, r1
 803d36e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803d372:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 803d376:	6013      	str	r3, [r2, #0]
 803d378:	e02b      	b.n	803d3d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 803d37a:	68bb      	ldr	r3, [r7, #8]
 803d37c:	015a      	lsls	r2, r3, #5
 803d37e:	68fb      	ldr	r3, [r7, #12]
 803d380:	4413      	add	r3, r2
 803d382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d386:	681b      	ldr	r3, [r3, #0]
 803d388:	2b00      	cmp	r3, #0
 803d38a:	db12      	blt.n	803d3b2 <USB_EPSetStall+0xae>
 803d38c:	68bb      	ldr	r3, [r7, #8]
 803d38e:	2b00      	cmp	r3, #0
 803d390:	d00f      	beq.n	803d3b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 803d392:	68bb      	ldr	r3, [r7, #8]
 803d394:	015a      	lsls	r2, r3, #5
 803d396:	68fb      	ldr	r3, [r7, #12]
 803d398:	4413      	add	r3, r2
 803d39a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d39e:	681b      	ldr	r3, [r3, #0]
 803d3a0:	68ba      	ldr	r2, [r7, #8]
 803d3a2:	0151      	lsls	r1, r2, #5
 803d3a4:	68fa      	ldr	r2, [r7, #12]
 803d3a6:	440a      	add	r2, r1
 803d3a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803d3ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 803d3b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 803d3b2:	68bb      	ldr	r3, [r7, #8]
 803d3b4:	015a      	lsls	r2, r3, #5
 803d3b6:	68fb      	ldr	r3, [r7, #12]
 803d3b8:	4413      	add	r3, r2
 803d3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d3be:	681b      	ldr	r3, [r3, #0]
 803d3c0:	68ba      	ldr	r2, [r7, #8]
 803d3c2:	0151      	lsls	r1, r2, #5
 803d3c4:	68fa      	ldr	r2, [r7, #12]
 803d3c6:	440a      	add	r2, r1
 803d3c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803d3cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 803d3d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803d3d2:	2300      	movs	r3, #0
}
 803d3d4:	4618      	mov	r0, r3
 803d3d6:	3714      	adds	r7, #20
 803d3d8:	46bd      	mov	sp, r7
 803d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d3de:	4770      	bx	lr

0803d3e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803d3e0:	b480      	push	{r7}
 803d3e2:	b085      	sub	sp, #20
 803d3e4:	af00      	add	r7, sp, #0
 803d3e6:	6078      	str	r0, [r7, #4]
 803d3e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d3ea:	687b      	ldr	r3, [r7, #4]
 803d3ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803d3ee:	683b      	ldr	r3, [r7, #0]
 803d3f0:	781b      	ldrb	r3, [r3, #0]
 803d3f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803d3f4:	683b      	ldr	r3, [r7, #0]
 803d3f6:	785b      	ldrb	r3, [r3, #1]
 803d3f8:	2b01      	cmp	r3, #1
 803d3fa:	d128      	bne.n	803d44e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 803d3fc:	68bb      	ldr	r3, [r7, #8]
 803d3fe:	015a      	lsls	r2, r3, #5
 803d400:	68fb      	ldr	r3, [r7, #12]
 803d402:	4413      	add	r3, r2
 803d404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803d408:	681b      	ldr	r3, [r3, #0]
 803d40a:	68ba      	ldr	r2, [r7, #8]
 803d40c:	0151      	lsls	r1, r2, #5
 803d40e:	68fa      	ldr	r2, [r7, #12]
 803d410:	440a      	add	r2, r1
 803d412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803d416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803d41a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 803d41c:	683b      	ldr	r3, [r7, #0]
 803d41e:	791b      	ldrb	r3, [r3, #4]
 803d420:	2b03      	cmp	r3, #3
 803d422:	d003      	beq.n	803d42c <USB_EPClearStall+0x4c>
 803d424:	683b      	ldr	r3, [r7, #0]
 803d426:	791b      	ldrb	r3, [r3, #4]
 803d428:	2b02      	cmp	r3, #2
 803d42a:	d138      	bne.n	803d49e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 803d42c:	68bb      	ldr	r3, [r7, #8]
 803d42e:	015a      	lsls	r2, r3, #5
 803d430:	68fb      	ldr	r3, [r7, #12]
 803d432:	4413      	add	r3, r2
 803d434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803d438:	681b      	ldr	r3, [r3, #0]
 803d43a:	68ba      	ldr	r2, [r7, #8]
 803d43c:	0151      	lsls	r1, r2, #5
 803d43e:	68fa      	ldr	r2, [r7, #12]
 803d440:	440a      	add	r2, r1
 803d442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803d446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803d44a:	6013      	str	r3, [r2, #0]
 803d44c:	e027      	b.n	803d49e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 803d44e:	68bb      	ldr	r3, [r7, #8]
 803d450:	015a      	lsls	r2, r3, #5
 803d452:	68fb      	ldr	r3, [r7, #12]
 803d454:	4413      	add	r3, r2
 803d456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d45a:	681b      	ldr	r3, [r3, #0]
 803d45c:	68ba      	ldr	r2, [r7, #8]
 803d45e:	0151      	lsls	r1, r2, #5
 803d460:	68fa      	ldr	r2, [r7, #12]
 803d462:	440a      	add	r2, r1
 803d464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803d468:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803d46c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 803d46e:	683b      	ldr	r3, [r7, #0]
 803d470:	791b      	ldrb	r3, [r3, #4]
 803d472:	2b03      	cmp	r3, #3
 803d474:	d003      	beq.n	803d47e <USB_EPClearStall+0x9e>
 803d476:	683b      	ldr	r3, [r7, #0]
 803d478:	791b      	ldrb	r3, [r3, #4]
 803d47a:	2b02      	cmp	r3, #2
 803d47c:	d10f      	bne.n	803d49e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 803d47e:	68bb      	ldr	r3, [r7, #8]
 803d480:	015a      	lsls	r2, r3, #5
 803d482:	68fb      	ldr	r3, [r7, #12]
 803d484:	4413      	add	r3, r2
 803d486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d48a:	681b      	ldr	r3, [r3, #0]
 803d48c:	68ba      	ldr	r2, [r7, #8]
 803d48e:	0151      	lsls	r1, r2, #5
 803d490:	68fa      	ldr	r2, [r7, #12]
 803d492:	440a      	add	r2, r1
 803d494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803d498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803d49c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 803d49e:	2300      	movs	r3, #0
}
 803d4a0:	4618      	mov	r0, r3
 803d4a2:	3714      	adds	r7, #20
 803d4a4:	46bd      	mov	sp, r7
 803d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d4aa:	4770      	bx	lr

0803d4ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 803d4ac:	b480      	push	{r7}
 803d4ae:	b085      	sub	sp, #20
 803d4b0:	af00      	add	r7, sp, #0
 803d4b2:	6078      	str	r0, [r7, #4]
 803d4b4:	460b      	mov	r3, r1
 803d4b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d4b8:	687b      	ldr	r3, [r7, #4]
 803d4ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 803d4bc:	68fb      	ldr	r3, [r7, #12]
 803d4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803d4c2:	681b      	ldr	r3, [r3, #0]
 803d4c4:	68fa      	ldr	r2, [r7, #12]
 803d4c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803d4ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 803d4ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 803d4d0:	68fb      	ldr	r3, [r7, #12]
 803d4d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803d4d6:	681a      	ldr	r2, [r3, #0]
 803d4d8:	78fb      	ldrb	r3, [r7, #3]
 803d4da:	011b      	lsls	r3, r3, #4
 803d4dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 803d4e0:	68f9      	ldr	r1, [r7, #12]
 803d4e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803d4e6:	4313      	orrs	r3, r2
 803d4e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 803d4ea:	2300      	movs	r3, #0
}
 803d4ec:	4618      	mov	r0, r3
 803d4ee:	3714      	adds	r7, #20
 803d4f0:	46bd      	mov	sp, r7
 803d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d4f6:	4770      	bx	lr

0803d4f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 803d4f8:	b480      	push	{r7}
 803d4fa:	b085      	sub	sp, #20
 803d4fc:	af00      	add	r7, sp, #0
 803d4fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d500:	687b      	ldr	r3, [r7, #4]
 803d502:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803d504:	68fb      	ldr	r3, [r7, #12]
 803d506:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803d50a:	681b      	ldr	r3, [r3, #0]
 803d50c:	68fa      	ldr	r2, [r7, #12]
 803d50e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803d512:	f023 0303 	bic.w	r3, r3, #3
 803d516:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 803d518:	68fb      	ldr	r3, [r7, #12]
 803d51a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803d51e:	685b      	ldr	r3, [r3, #4]
 803d520:	68fa      	ldr	r2, [r7, #12]
 803d522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803d526:	f023 0302 	bic.w	r3, r3, #2
 803d52a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803d52c:	2300      	movs	r3, #0
}
 803d52e:	4618      	mov	r0, r3
 803d530:	3714      	adds	r7, #20
 803d532:	46bd      	mov	sp, r7
 803d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d538:	4770      	bx	lr

0803d53a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 803d53a:	b480      	push	{r7}
 803d53c:	b085      	sub	sp, #20
 803d53e:	af00      	add	r7, sp, #0
 803d540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d542:	687b      	ldr	r3, [r7, #4]
 803d544:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803d546:	68fb      	ldr	r3, [r7, #12]
 803d548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803d54c:	681b      	ldr	r3, [r3, #0]
 803d54e:	68fa      	ldr	r2, [r7, #12]
 803d550:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803d554:	f023 0303 	bic.w	r3, r3, #3
 803d558:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 803d55a:	68fb      	ldr	r3, [r7, #12]
 803d55c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803d560:	685b      	ldr	r3, [r3, #4]
 803d562:	68fa      	ldr	r2, [r7, #12]
 803d564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803d568:	f043 0302 	orr.w	r3, r3, #2
 803d56c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803d56e:	2300      	movs	r3, #0
}
 803d570:	4618      	mov	r0, r3
 803d572:	3714      	adds	r7, #20
 803d574:	46bd      	mov	sp, r7
 803d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d57a:	4770      	bx	lr

0803d57c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 803d57c:	b480      	push	{r7}
 803d57e:	b085      	sub	sp, #20
 803d580:	af00      	add	r7, sp, #0
 803d582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 803d584:	687b      	ldr	r3, [r7, #4]
 803d586:	695b      	ldr	r3, [r3, #20]
 803d588:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 803d58a:	687b      	ldr	r3, [r7, #4]
 803d58c:	699b      	ldr	r3, [r3, #24]
 803d58e:	68fa      	ldr	r2, [r7, #12]
 803d590:	4013      	ands	r3, r2
 803d592:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 803d594:	68fb      	ldr	r3, [r7, #12]
}
 803d596:	4618      	mov	r0, r3
 803d598:	3714      	adds	r7, #20
 803d59a:	46bd      	mov	sp, r7
 803d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d5a0:	4770      	bx	lr

0803d5a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803d5a2:	b480      	push	{r7}
 803d5a4:	b085      	sub	sp, #20
 803d5a6:	af00      	add	r7, sp, #0
 803d5a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d5aa:	687b      	ldr	r3, [r7, #4]
 803d5ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 803d5ae:	68fb      	ldr	r3, [r7, #12]
 803d5b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803d5b4:	699b      	ldr	r3, [r3, #24]
 803d5b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803d5b8:	68fb      	ldr	r3, [r7, #12]
 803d5ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803d5be:	69db      	ldr	r3, [r3, #28]
 803d5c0:	68ba      	ldr	r2, [r7, #8]
 803d5c2:	4013      	ands	r3, r2
 803d5c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 803d5c6:	68bb      	ldr	r3, [r7, #8]
 803d5c8:	0c1b      	lsrs	r3, r3, #16
}
 803d5ca:	4618      	mov	r0, r3
 803d5cc:	3714      	adds	r7, #20
 803d5ce:	46bd      	mov	sp, r7
 803d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d5d4:	4770      	bx	lr

0803d5d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803d5d6:	b480      	push	{r7}
 803d5d8:	b085      	sub	sp, #20
 803d5da:	af00      	add	r7, sp, #0
 803d5dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d5de:	687b      	ldr	r3, [r7, #4]
 803d5e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 803d5e2:	68fb      	ldr	r3, [r7, #12]
 803d5e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803d5e8:	699b      	ldr	r3, [r3, #24]
 803d5ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803d5ec:	68fb      	ldr	r3, [r7, #12]
 803d5ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803d5f2:	69db      	ldr	r3, [r3, #28]
 803d5f4:	68ba      	ldr	r2, [r7, #8]
 803d5f6:	4013      	ands	r3, r2
 803d5f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 803d5fa:	68bb      	ldr	r3, [r7, #8]
 803d5fc:	b29b      	uxth	r3, r3
}
 803d5fe:	4618      	mov	r0, r3
 803d600:	3714      	adds	r7, #20
 803d602:	46bd      	mov	sp, r7
 803d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d608:	4770      	bx	lr

0803d60a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803d60a:	b480      	push	{r7}
 803d60c:	b085      	sub	sp, #20
 803d60e:	af00      	add	r7, sp, #0
 803d610:	6078      	str	r0, [r7, #4]
 803d612:	460b      	mov	r3, r1
 803d614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d616:	687b      	ldr	r3, [r7, #4]
 803d618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 803d61a:	78fb      	ldrb	r3, [r7, #3]
 803d61c:	015a      	lsls	r2, r3, #5
 803d61e:	68fb      	ldr	r3, [r7, #12]
 803d620:	4413      	add	r3, r2
 803d622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d626:	689b      	ldr	r3, [r3, #8]
 803d628:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 803d62a:	68fb      	ldr	r3, [r7, #12]
 803d62c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803d630:	695b      	ldr	r3, [r3, #20]
 803d632:	68ba      	ldr	r2, [r7, #8]
 803d634:	4013      	ands	r3, r2
 803d636:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803d638:	68bb      	ldr	r3, [r7, #8]
}
 803d63a:	4618      	mov	r0, r3
 803d63c:	3714      	adds	r7, #20
 803d63e:	46bd      	mov	sp, r7
 803d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d644:	4770      	bx	lr

0803d646 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803d646:	b480      	push	{r7}
 803d648:	b087      	sub	sp, #28
 803d64a:	af00      	add	r7, sp, #0
 803d64c:	6078      	str	r0, [r7, #4]
 803d64e:	460b      	mov	r3, r1
 803d650:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d652:	687b      	ldr	r3, [r7, #4]
 803d654:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 803d656:	697b      	ldr	r3, [r7, #20]
 803d658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803d65c:	691b      	ldr	r3, [r3, #16]
 803d65e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 803d660:	697b      	ldr	r3, [r7, #20]
 803d662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803d666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803d668:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 803d66a:	78fb      	ldrb	r3, [r7, #3]
 803d66c:	f003 030f 	and.w	r3, r3, #15
 803d670:	68fa      	ldr	r2, [r7, #12]
 803d672:	fa22 f303 	lsr.w	r3, r2, r3
 803d676:	01db      	lsls	r3, r3, #7
 803d678:	b2db      	uxtb	r3, r3
 803d67a:	693a      	ldr	r2, [r7, #16]
 803d67c:	4313      	orrs	r3, r2
 803d67e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 803d680:	78fb      	ldrb	r3, [r7, #3]
 803d682:	015a      	lsls	r2, r3, #5
 803d684:	697b      	ldr	r3, [r7, #20]
 803d686:	4413      	add	r3, r2
 803d688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803d68c:	689b      	ldr	r3, [r3, #8]
 803d68e:	693a      	ldr	r2, [r7, #16]
 803d690:	4013      	ands	r3, r2
 803d692:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803d694:	68bb      	ldr	r3, [r7, #8]
}
 803d696:	4618      	mov	r0, r3
 803d698:	371c      	adds	r7, #28
 803d69a:	46bd      	mov	sp, r7
 803d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d6a0:	4770      	bx	lr

0803d6a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 803d6a2:	b480      	push	{r7}
 803d6a4:	b083      	sub	sp, #12
 803d6a6:	af00      	add	r7, sp, #0
 803d6a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 803d6aa:	687b      	ldr	r3, [r7, #4]
 803d6ac:	695b      	ldr	r3, [r3, #20]
 803d6ae:	f003 0301 	and.w	r3, r3, #1
}
 803d6b2:	4618      	mov	r0, r3
 803d6b4:	370c      	adds	r7, #12
 803d6b6:	46bd      	mov	sp, r7
 803d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d6bc:	4770      	bx	lr
	...

0803d6c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 803d6c0:	b480      	push	{r7}
 803d6c2:	b085      	sub	sp, #20
 803d6c4:	af00      	add	r7, sp, #0
 803d6c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d6c8:	687b      	ldr	r3, [r7, #4]
 803d6ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 803d6cc:	68fb      	ldr	r3, [r7, #12]
 803d6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803d6d2:	681a      	ldr	r2, [r3, #0]
 803d6d4:	68fb      	ldr	r3, [r7, #12]
 803d6d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803d6da:	4619      	mov	r1, r3
 803d6dc:	4b09      	ldr	r3, [pc, #36]	; (803d704 <USB_ActivateSetup+0x44>)
 803d6de:	4013      	ands	r3, r2
 803d6e0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 803d6e2:	68fb      	ldr	r3, [r7, #12]
 803d6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803d6e8:	685b      	ldr	r3, [r3, #4]
 803d6ea:	68fa      	ldr	r2, [r7, #12]
 803d6ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803d6f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803d6f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803d6f6:	2300      	movs	r3, #0
}
 803d6f8:	4618      	mov	r0, r3
 803d6fa:	3714      	adds	r7, #20
 803d6fc:	46bd      	mov	sp, r7
 803d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d702:	4770      	bx	lr
 803d704:	fffff800 	.word	0xfffff800

0803d708 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 803d708:	b480      	push	{r7}
 803d70a:	b087      	sub	sp, #28
 803d70c:	af00      	add	r7, sp, #0
 803d70e:	60f8      	str	r0, [r7, #12]
 803d710:	460b      	mov	r3, r1
 803d712:	607a      	str	r2, [r7, #4]
 803d714:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803d716:	68fb      	ldr	r3, [r7, #12]
 803d718:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 803d71a:	68fb      	ldr	r3, [r7, #12]
 803d71c:	333c      	adds	r3, #60	; 0x3c
 803d71e:	3304      	adds	r3, #4
 803d720:	681b      	ldr	r3, [r3, #0]
 803d722:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 803d724:	693b      	ldr	r3, [r7, #16]
 803d726:	4a26      	ldr	r2, [pc, #152]	; (803d7c0 <USB_EP0_OutStart+0xb8>)
 803d728:	4293      	cmp	r3, r2
 803d72a:	d90a      	bls.n	803d742 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803d72c:	697b      	ldr	r3, [r7, #20]
 803d72e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d732:	681b      	ldr	r3, [r3, #0]
 803d734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803d738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803d73c:	d101      	bne.n	803d742 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 803d73e:	2300      	movs	r3, #0
 803d740:	e037      	b.n	803d7b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 803d742:	697b      	ldr	r3, [r7, #20]
 803d744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d748:	461a      	mov	r2, r3
 803d74a:	2300      	movs	r3, #0
 803d74c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803d74e:	697b      	ldr	r3, [r7, #20]
 803d750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d754:	691b      	ldr	r3, [r3, #16]
 803d756:	697a      	ldr	r2, [r7, #20]
 803d758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803d75c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803d760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 803d762:	697b      	ldr	r3, [r7, #20]
 803d764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d768:	691b      	ldr	r3, [r3, #16]
 803d76a:	697a      	ldr	r2, [r7, #20]
 803d76c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803d770:	f043 0318 	orr.w	r3, r3, #24
 803d774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 803d776:	697b      	ldr	r3, [r7, #20]
 803d778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d77c:	691b      	ldr	r3, [r3, #16]
 803d77e:	697a      	ldr	r2, [r7, #20]
 803d780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803d784:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 803d788:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 803d78a:	7afb      	ldrb	r3, [r7, #11]
 803d78c:	2b01      	cmp	r3, #1
 803d78e:	d10f      	bne.n	803d7b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 803d790:	697b      	ldr	r3, [r7, #20]
 803d792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d796:	461a      	mov	r2, r3
 803d798:	687b      	ldr	r3, [r7, #4]
 803d79a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 803d79c:	697b      	ldr	r3, [r7, #20]
 803d79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803d7a2:	681b      	ldr	r3, [r3, #0]
 803d7a4:	697a      	ldr	r2, [r7, #20]
 803d7a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803d7aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 803d7ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803d7b0:	2300      	movs	r3, #0
}
 803d7b2:	4618      	mov	r0, r3
 803d7b4:	371c      	adds	r7, #28
 803d7b6:	46bd      	mov	sp, r7
 803d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d7bc:	4770      	bx	lr
 803d7be:	bf00      	nop
 803d7c0:	4f54300a 	.word	0x4f54300a

0803d7c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 803d7c4:	b480      	push	{r7}
 803d7c6:	b085      	sub	sp, #20
 803d7c8:	af00      	add	r7, sp, #0
 803d7ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 803d7cc:	2300      	movs	r3, #0
 803d7ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 803d7d0:	68fb      	ldr	r3, [r7, #12]
 803d7d2:	3301      	adds	r3, #1
 803d7d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803d7d6:	68fb      	ldr	r3, [r7, #12]
 803d7d8:	4a13      	ldr	r2, [pc, #76]	; (803d828 <USB_CoreReset+0x64>)
 803d7da:	4293      	cmp	r3, r2
 803d7dc:	d901      	bls.n	803d7e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 803d7de:	2303      	movs	r3, #3
 803d7e0:	e01b      	b.n	803d81a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803d7e2:	687b      	ldr	r3, [r7, #4]
 803d7e4:	691b      	ldr	r3, [r3, #16]
 803d7e6:	2b00      	cmp	r3, #0
 803d7e8:	daf2      	bge.n	803d7d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 803d7ea:	2300      	movs	r3, #0
 803d7ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 803d7ee:	687b      	ldr	r3, [r7, #4]
 803d7f0:	691b      	ldr	r3, [r3, #16]
 803d7f2:	f043 0201 	orr.w	r2, r3, #1
 803d7f6:	687b      	ldr	r3, [r7, #4]
 803d7f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803d7fa:	68fb      	ldr	r3, [r7, #12]
 803d7fc:	3301      	adds	r3, #1
 803d7fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803d800:	68fb      	ldr	r3, [r7, #12]
 803d802:	4a09      	ldr	r2, [pc, #36]	; (803d828 <USB_CoreReset+0x64>)
 803d804:	4293      	cmp	r3, r2
 803d806:	d901      	bls.n	803d80c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 803d808:	2303      	movs	r3, #3
 803d80a:	e006      	b.n	803d81a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 803d80c:	687b      	ldr	r3, [r7, #4]
 803d80e:	691b      	ldr	r3, [r3, #16]
 803d810:	f003 0301 	and.w	r3, r3, #1
 803d814:	2b01      	cmp	r3, #1
 803d816:	d0f0      	beq.n	803d7fa <USB_CoreReset+0x36>

  return HAL_OK;
 803d818:	2300      	movs	r3, #0
}
 803d81a:	4618      	mov	r0, r3
 803d81c:	3714      	adds	r7, #20
 803d81e:	46bd      	mov	sp, r7
 803d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d824:	4770      	bx	lr
 803d826:	bf00      	nop
 803d828:	00030d40 	.word	0x00030d40

0803d82c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803d82c:	b580      	push	{r7, lr}
 803d82e:	b084      	sub	sp, #16
 803d830:	af00      	add	r7, sp, #0
 803d832:	6078      	str	r0, [r7, #4]
 803d834:	460b      	mov	r3, r1
 803d836:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 803d838:	f44f 7007 	mov.w	r0, #540	; 0x21c
 803d83c:	f002 fc54 	bl	80400e8 <USBD_static_malloc>
 803d840:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 803d842:	68fb      	ldr	r3, [r7, #12]
 803d844:	2b00      	cmp	r3, #0
 803d846:	d109      	bne.n	803d85c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 803d848:	687b      	ldr	r3, [r7, #4]
 803d84a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d84e:	687b      	ldr	r3, [r7, #4]
 803d850:	32b0      	adds	r2, #176	; 0xb0
 803d852:	2100      	movs	r1, #0
 803d854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 803d858:	2302      	movs	r3, #2
 803d85a:	e0d4      	b.n	803da06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 803d85c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 803d860:	2100      	movs	r1, #0
 803d862:	68f8      	ldr	r0, [r7, #12]
 803d864:	f002 fd42 	bl	80402ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 803d868:	687b      	ldr	r3, [r7, #4]
 803d86a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d86e:	687b      	ldr	r3, [r7, #4]
 803d870:	32b0      	adds	r2, #176	; 0xb0
 803d872:	68f9      	ldr	r1, [r7, #12]
 803d874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 803d878:	687b      	ldr	r3, [r7, #4]
 803d87a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d87e:	687b      	ldr	r3, [r7, #4]
 803d880:	32b0      	adds	r2, #176	; 0xb0
 803d882:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 803d886:	687b      	ldr	r3, [r7, #4]
 803d888:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803d88c:	687b      	ldr	r3, [r7, #4]
 803d88e:	7c1b      	ldrb	r3, [r3, #16]
 803d890:	2b00      	cmp	r3, #0
 803d892:	d138      	bne.n	803d906 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 803d894:	4b5e      	ldr	r3, [pc, #376]	; (803da10 <USBD_CDC_Init+0x1e4>)
 803d896:	7819      	ldrb	r1, [r3, #0]
 803d898:	f44f 7300 	mov.w	r3, #512	; 0x200
 803d89c:	2202      	movs	r2, #2
 803d89e:	6878      	ldr	r0, [r7, #4]
 803d8a0:	f002 faff 	bl	803fea2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803d8a4:	4b5a      	ldr	r3, [pc, #360]	; (803da10 <USBD_CDC_Init+0x1e4>)
 803d8a6:	781b      	ldrb	r3, [r3, #0]
 803d8a8:	f003 020f 	and.w	r2, r3, #15
 803d8ac:	6879      	ldr	r1, [r7, #4]
 803d8ae:	4613      	mov	r3, r2
 803d8b0:	009b      	lsls	r3, r3, #2
 803d8b2:	4413      	add	r3, r2
 803d8b4:	009b      	lsls	r3, r3, #2
 803d8b6:	440b      	add	r3, r1
 803d8b8:	3324      	adds	r3, #36	; 0x24
 803d8ba:	2201      	movs	r2, #1
 803d8bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803d8be:	4b55      	ldr	r3, [pc, #340]	; (803da14 <USBD_CDC_Init+0x1e8>)
 803d8c0:	7819      	ldrb	r1, [r3, #0]
 803d8c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 803d8c6:	2202      	movs	r2, #2
 803d8c8:	6878      	ldr	r0, [r7, #4]
 803d8ca:	f002 faea 	bl	803fea2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803d8ce:	4b51      	ldr	r3, [pc, #324]	; (803da14 <USBD_CDC_Init+0x1e8>)
 803d8d0:	781b      	ldrb	r3, [r3, #0]
 803d8d2:	f003 020f 	and.w	r2, r3, #15
 803d8d6:	6879      	ldr	r1, [r7, #4]
 803d8d8:	4613      	mov	r3, r2
 803d8da:	009b      	lsls	r3, r3, #2
 803d8dc:	4413      	add	r3, r2
 803d8de:	009b      	lsls	r3, r3, #2
 803d8e0:	440b      	add	r3, r1
 803d8e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803d8e6:	2201      	movs	r2, #1
 803d8e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 803d8ea:	4b4b      	ldr	r3, [pc, #300]	; (803da18 <USBD_CDC_Init+0x1ec>)
 803d8ec:	781b      	ldrb	r3, [r3, #0]
 803d8ee:	f003 020f 	and.w	r2, r3, #15
 803d8f2:	6879      	ldr	r1, [r7, #4]
 803d8f4:	4613      	mov	r3, r2
 803d8f6:	009b      	lsls	r3, r3, #2
 803d8f8:	4413      	add	r3, r2
 803d8fa:	009b      	lsls	r3, r3, #2
 803d8fc:	440b      	add	r3, r1
 803d8fe:	3326      	adds	r3, #38	; 0x26
 803d900:	2210      	movs	r2, #16
 803d902:	801a      	strh	r2, [r3, #0]
 803d904:	e035      	b.n	803d972 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 803d906:	4b42      	ldr	r3, [pc, #264]	; (803da10 <USBD_CDC_Init+0x1e4>)
 803d908:	7819      	ldrb	r1, [r3, #0]
 803d90a:	2340      	movs	r3, #64	; 0x40
 803d90c:	2202      	movs	r2, #2
 803d90e:	6878      	ldr	r0, [r7, #4]
 803d910:	f002 fac7 	bl	803fea2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803d914:	4b3e      	ldr	r3, [pc, #248]	; (803da10 <USBD_CDC_Init+0x1e4>)
 803d916:	781b      	ldrb	r3, [r3, #0]
 803d918:	f003 020f 	and.w	r2, r3, #15
 803d91c:	6879      	ldr	r1, [r7, #4]
 803d91e:	4613      	mov	r3, r2
 803d920:	009b      	lsls	r3, r3, #2
 803d922:	4413      	add	r3, r2
 803d924:	009b      	lsls	r3, r3, #2
 803d926:	440b      	add	r3, r1
 803d928:	3324      	adds	r3, #36	; 0x24
 803d92a:	2201      	movs	r2, #1
 803d92c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803d92e:	4b39      	ldr	r3, [pc, #228]	; (803da14 <USBD_CDC_Init+0x1e8>)
 803d930:	7819      	ldrb	r1, [r3, #0]
 803d932:	2340      	movs	r3, #64	; 0x40
 803d934:	2202      	movs	r2, #2
 803d936:	6878      	ldr	r0, [r7, #4]
 803d938:	f002 fab3 	bl	803fea2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803d93c:	4b35      	ldr	r3, [pc, #212]	; (803da14 <USBD_CDC_Init+0x1e8>)
 803d93e:	781b      	ldrb	r3, [r3, #0]
 803d940:	f003 020f 	and.w	r2, r3, #15
 803d944:	6879      	ldr	r1, [r7, #4]
 803d946:	4613      	mov	r3, r2
 803d948:	009b      	lsls	r3, r3, #2
 803d94a:	4413      	add	r3, r2
 803d94c:	009b      	lsls	r3, r3, #2
 803d94e:	440b      	add	r3, r1
 803d950:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803d954:	2201      	movs	r2, #1
 803d956:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 803d958:	4b2f      	ldr	r3, [pc, #188]	; (803da18 <USBD_CDC_Init+0x1ec>)
 803d95a:	781b      	ldrb	r3, [r3, #0]
 803d95c:	f003 020f 	and.w	r2, r3, #15
 803d960:	6879      	ldr	r1, [r7, #4]
 803d962:	4613      	mov	r3, r2
 803d964:	009b      	lsls	r3, r3, #2
 803d966:	4413      	add	r3, r2
 803d968:	009b      	lsls	r3, r3, #2
 803d96a:	440b      	add	r3, r1
 803d96c:	3326      	adds	r3, #38	; 0x26
 803d96e:	2210      	movs	r2, #16
 803d970:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 803d972:	4b29      	ldr	r3, [pc, #164]	; (803da18 <USBD_CDC_Init+0x1ec>)
 803d974:	7819      	ldrb	r1, [r3, #0]
 803d976:	2308      	movs	r3, #8
 803d978:	2203      	movs	r2, #3
 803d97a:	6878      	ldr	r0, [r7, #4]
 803d97c:	f002 fa91 	bl	803fea2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 803d980:	4b25      	ldr	r3, [pc, #148]	; (803da18 <USBD_CDC_Init+0x1ec>)
 803d982:	781b      	ldrb	r3, [r3, #0]
 803d984:	f003 020f 	and.w	r2, r3, #15
 803d988:	6879      	ldr	r1, [r7, #4]
 803d98a:	4613      	mov	r3, r2
 803d98c:	009b      	lsls	r3, r3, #2
 803d98e:	4413      	add	r3, r2
 803d990:	009b      	lsls	r3, r3, #2
 803d992:	440b      	add	r3, r1
 803d994:	3324      	adds	r3, #36	; 0x24
 803d996:	2201      	movs	r2, #1
 803d998:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 803d99a:	68fb      	ldr	r3, [r7, #12]
 803d99c:	2200      	movs	r2, #0
 803d99e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 803d9a2:	687b      	ldr	r3, [r7, #4]
 803d9a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803d9a8:	687a      	ldr	r2, [r7, #4]
 803d9aa:	33b0      	adds	r3, #176	; 0xb0
 803d9ac:	009b      	lsls	r3, r3, #2
 803d9ae:	4413      	add	r3, r2
 803d9b0:	685b      	ldr	r3, [r3, #4]
 803d9b2:	681b      	ldr	r3, [r3, #0]
 803d9b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 803d9b6:	68fb      	ldr	r3, [r7, #12]
 803d9b8:	2200      	movs	r2, #0
 803d9ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 803d9be:	68fb      	ldr	r3, [r7, #12]
 803d9c0:	2200      	movs	r2, #0
 803d9c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 803d9c6:	68fb      	ldr	r3, [r7, #12]
 803d9c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 803d9cc:	2b00      	cmp	r3, #0
 803d9ce:	d101      	bne.n	803d9d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 803d9d0:	2302      	movs	r3, #2
 803d9d2:	e018      	b.n	803da06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803d9d4:	687b      	ldr	r3, [r7, #4]
 803d9d6:	7c1b      	ldrb	r3, [r3, #16]
 803d9d8:	2b00      	cmp	r3, #0
 803d9da:	d10a      	bne.n	803d9f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803d9dc:	4b0d      	ldr	r3, [pc, #52]	; (803da14 <USBD_CDC_Init+0x1e8>)
 803d9de:	7819      	ldrb	r1, [r3, #0]
 803d9e0:	68fb      	ldr	r3, [r7, #12]
 803d9e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803d9e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 803d9ea:	6878      	ldr	r0, [r7, #4]
 803d9ec:	f002 fb48 	bl	8040080 <USBD_LL_PrepareReceive>
 803d9f0:	e008      	b.n	803da04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803d9f2:	4b08      	ldr	r3, [pc, #32]	; (803da14 <USBD_CDC_Init+0x1e8>)
 803d9f4:	7819      	ldrb	r1, [r3, #0]
 803d9f6:	68fb      	ldr	r3, [r7, #12]
 803d9f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803d9fc:	2340      	movs	r3, #64	; 0x40
 803d9fe:	6878      	ldr	r0, [r7, #4]
 803da00:	f002 fb3e 	bl	8040080 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 803da04:	2300      	movs	r3, #0
}
 803da06:	4618      	mov	r0, r3
 803da08:	3710      	adds	r7, #16
 803da0a:	46bd      	mov	sp, r7
 803da0c:	bd80      	pop	{r7, pc}
 803da0e:	bf00      	nop
 803da10:	2400009b 	.word	0x2400009b
 803da14:	2400009c 	.word	0x2400009c
 803da18:	2400009d 	.word	0x2400009d

0803da1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803da1c:	b580      	push	{r7, lr}
 803da1e:	b082      	sub	sp, #8
 803da20:	af00      	add	r7, sp, #0
 803da22:	6078      	str	r0, [r7, #4]
 803da24:	460b      	mov	r3, r1
 803da26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 803da28:	4b3a      	ldr	r3, [pc, #232]	; (803db14 <USBD_CDC_DeInit+0xf8>)
 803da2a:	781b      	ldrb	r3, [r3, #0]
 803da2c:	4619      	mov	r1, r3
 803da2e:	6878      	ldr	r0, [r7, #4]
 803da30:	f002 fa5d 	bl	803feee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 803da34:	4b37      	ldr	r3, [pc, #220]	; (803db14 <USBD_CDC_DeInit+0xf8>)
 803da36:	781b      	ldrb	r3, [r3, #0]
 803da38:	f003 020f 	and.w	r2, r3, #15
 803da3c:	6879      	ldr	r1, [r7, #4]
 803da3e:	4613      	mov	r3, r2
 803da40:	009b      	lsls	r3, r3, #2
 803da42:	4413      	add	r3, r2
 803da44:	009b      	lsls	r3, r3, #2
 803da46:	440b      	add	r3, r1
 803da48:	3324      	adds	r3, #36	; 0x24
 803da4a:	2200      	movs	r2, #0
 803da4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 803da4e:	4b32      	ldr	r3, [pc, #200]	; (803db18 <USBD_CDC_DeInit+0xfc>)
 803da50:	781b      	ldrb	r3, [r3, #0]
 803da52:	4619      	mov	r1, r3
 803da54:	6878      	ldr	r0, [r7, #4]
 803da56:	f002 fa4a 	bl	803feee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 803da5a:	4b2f      	ldr	r3, [pc, #188]	; (803db18 <USBD_CDC_DeInit+0xfc>)
 803da5c:	781b      	ldrb	r3, [r3, #0]
 803da5e:	f003 020f 	and.w	r2, r3, #15
 803da62:	6879      	ldr	r1, [r7, #4]
 803da64:	4613      	mov	r3, r2
 803da66:	009b      	lsls	r3, r3, #2
 803da68:	4413      	add	r3, r2
 803da6a:	009b      	lsls	r3, r3, #2
 803da6c:	440b      	add	r3, r1
 803da6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803da72:	2200      	movs	r2, #0
 803da74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 803da76:	4b29      	ldr	r3, [pc, #164]	; (803db1c <USBD_CDC_DeInit+0x100>)
 803da78:	781b      	ldrb	r3, [r3, #0]
 803da7a:	4619      	mov	r1, r3
 803da7c:	6878      	ldr	r0, [r7, #4]
 803da7e:	f002 fa36 	bl	803feee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 803da82:	4b26      	ldr	r3, [pc, #152]	; (803db1c <USBD_CDC_DeInit+0x100>)
 803da84:	781b      	ldrb	r3, [r3, #0]
 803da86:	f003 020f 	and.w	r2, r3, #15
 803da8a:	6879      	ldr	r1, [r7, #4]
 803da8c:	4613      	mov	r3, r2
 803da8e:	009b      	lsls	r3, r3, #2
 803da90:	4413      	add	r3, r2
 803da92:	009b      	lsls	r3, r3, #2
 803da94:	440b      	add	r3, r1
 803da96:	3324      	adds	r3, #36	; 0x24
 803da98:	2200      	movs	r2, #0
 803da9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 803da9c:	4b1f      	ldr	r3, [pc, #124]	; (803db1c <USBD_CDC_DeInit+0x100>)
 803da9e:	781b      	ldrb	r3, [r3, #0]
 803daa0:	f003 020f 	and.w	r2, r3, #15
 803daa4:	6879      	ldr	r1, [r7, #4]
 803daa6:	4613      	mov	r3, r2
 803daa8:	009b      	lsls	r3, r3, #2
 803daaa:	4413      	add	r3, r2
 803daac:	009b      	lsls	r3, r3, #2
 803daae:	440b      	add	r3, r1
 803dab0:	3326      	adds	r3, #38	; 0x26
 803dab2:	2200      	movs	r2, #0
 803dab4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 803dab6:	687b      	ldr	r3, [r7, #4]
 803dab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803dabc:	687b      	ldr	r3, [r7, #4]
 803dabe:	32b0      	adds	r2, #176	; 0xb0
 803dac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803dac4:	2b00      	cmp	r3, #0
 803dac6:	d01f      	beq.n	803db08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 803dac8:	687b      	ldr	r3, [r7, #4]
 803daca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803dace:	687a      	ldr	r2, [r7, #4]
 803dad0:	33b0      	adds	r3, #176	; 0xb0
 803dad2:	009b      	lsls	r3, r3, #2
 803dad4:	4413      	add	r3, r2
 803dad6:	685b      	ldr	r3, [r3, #4]
 803dad8:	685b      	ldr	r3, [r3, #4]
 803dada:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 803dadc:	687b      	ldr	r3, [r7, #4]
 803dade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803dae2:	687b      	ldr	r3, [r7, #4]
 803dae4:	32b0      	adds	r2, #176	; 0xb0
 803dae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803daea:	4618      	mov	r0, r3
 803daec:	f002 fb0a 	bl	8040104 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 803daf0:	687b      	ldr	r3, [r7, #4]
 803daf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803daf6:	687b      	ldr	r3, [r7, #4]
 803daf8:	32b0      	adds	r2, #176	; 0xb0
 803dafa:	2100      	movs	r1, #0
 803dafc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 803db00:	687b      	ldr	r3, [r7, #4]
 803db02:	2200      	movs	r2, #0
 803db04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 803db08:	2300      	movs	r3, #0
}
 803db0a:	4618      	mov	r0, r3
 803db0c:	3708      	adds	r7, #8
 803db0e:	46bd      	mov	sp, r7
 803db10:	bd80      	pop	{r7, pc}
 803db12:	bf00      	nop
 803db14:	2400009b 	.word	0x2400009b
 803db18:	2400009c 	.word	0x2400009c
 803db1c:	2400009d 	.word	0x2400009d

0803db20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 803db20:	b580      	push	{r7, lr}
 803db22:	b086      	sub	sp, #24
 803db24:	af00      	add	r7, sp, #0
 803db26:	6078      	str	r0, [r7, #4]
 803db28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803db2a:	687b      	ldr	r3, [r7, #4]
 803db2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803db30:	687b      	ldr	r3, [r7, #4]
 803db32:	32b0      	adds	r2, #176	; 0xb0
 803db34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803db38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 803db3a:	2300      	movs	r3, #0
 803db3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 803db3e:	2300      	movs	r3, #0
 803db40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 803db42:	2300      	movs	r3, #0
 803db44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 803db46:	693b      	ldr	r3, [r7, #16]
 803db48:	2b00      	cmp	r3, #0
 803db4a:	d101      	bne.n	803db50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 803db4c:	2303      	movs	r3, #3
 803db4e:	e0bf      	b.n	803dcd0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803db50:	683b      	ldr	r3, [r7, #0]
 803db52:	781b      	ldrb	r3, [r3, #0]
 803db54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803db58:	2b00      	cmp	r3, #0
 803db5a:	d050      	beq.n	803dbfe <USBD_CDC_Setup+0xde>
 803db5c:	2b20      	cmp	r3, #32
 803db5e:	f040 80af 	bne.w	803dcc0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 803db62:	683b      	ldr	r3, [r7, #0]
 803db64:	88db      	ldrh	r3, [r3, #6]
 803db66:	2b00      	cmp	r3, #0
 803db68:	d03a      	beq.n	803dbe0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 803db6a:	683b      	ldr	r3, [r7, #0]
 803db6c:	781b      	ldrb	r3, [r3, #0]
 803db6e:	b25b      	sxtb	r3, r3
 803db70:	2b00      	cmp	r3, #0
 803db72:	da1b      	bge.n	803dbac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803db74:	687b      	ldr	r3, [r7, #4]
 803db76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803db7a:	687a      	ldr	r2, [r7, #4]
 803db7c:	33b0      	adds	r3, #176	; 0xb0
 803db7e:	009b      	lsls	r3, r3, #2
 803db80:	4413      	add	r3, r2
 803db82:	685b      	ldr	r3, [r3, #4]
 803db84:	689b      	ldr	r3, [r3, #8]
 803db86:	683a      	ldr	r2, [r7, #0]
 803db88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 803db8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803db8c:	683a      	ldr	r2, [r7, #0]
 803db8e:	88d2      	ldrh	r2, [r2, #6]
 803db90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 803db92:	683b      	ldr	r3, [r7, #0]
 803db94:	88db      	ldrh	r3, [r3, #6]
 803db96:	2b07      	cmp	r3, #7
 803db98:	bf28      	it	cs
 803db9a:	2307      	movcs	r3, #7
 803db9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 803db9e:	693b      	ldr	r3, [r7, #16]
 803dba0:	89fa      	ldrh	r2, [r7, #14]
 803dba2:	4619      	mov	r1, r3
 803dba4:	6878      	ldr	r0, [r7, #4]
 803dba6:	f001 fd43 	bl	803f630 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 803dbaa:	e090      	b.n	803dcce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 803dbac:	683b      	ldr	r3, [r7, #0]
 803dbae:	785a      	ldrb	r2, [r3, #1]
 803dbb0:	693b      	ldr	r3, [r7, #16]
 803dbb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 803dbb6:	683b      	ldr	r3, [r7, #0]
 803dbb8:	88db      	ldrh	r3, [r3, #6]
 803dbba:	2b3f      	cmp	r3, #63	; 0x3f
 803dbbc:	d803      	bhi.n	803dbc6 <USBD_CDC_Setup+0xa6>
 803dbbe:	683b      	ldr	r3, [r7, #0]
 803dbc0:	88db      	ldrh	r3, [r3, #6]
 803dbc2:	b2da      	uxtb	r2, r3
 803dbc4:	e000      	b.n	803dbc8 <USBD_CDC_Setup+0xa8>
 803dbc6:	2240      	movs	r2, #64	; 0x40
 803dbc8:	693b      	ldr	r3, [r7, #16]
 803dbca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 803dbce:	6939      	ldr	r1, [r7, #16]
 803dbd0:	693b      	ldr	r3, [r7, #16]
 803dbd2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 803dbd6:	461a      	mov	r2, r3
 803dbd8:	6878      	ldr	r0, [r7, #4]
 803dbda:	f001 fd55 	bl	803f688 <USBD_CtlPrepareRx>
      break;
 803dbde:	e076      	b.n	803dcce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803dbe0:	687b      	ldr	r3, [r7, #4]
 803dbe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803dbe6:	687a      	ldr	r2, [r7, #4]
 803dbe8:	33b0      	adds	r3, #176	; 0xb0
 803dbea:	009b      	lsls	r3, r3, #2
 803dbec:	4413      	add	r3, r2
 803dbee:	685b      	ldr	r3, [r3, #4]
 803dbf0:	689b      	ldr	r3, [r3, #8]
 803dbf2:	683a      	ldr	r2, [r7, #0]
 803dbf4:	7850      	ldrb	r0, [r2, #1]
 803dbf6:	2200      	movs	r2, #0
 803dbf8:	6839      	ldr	r1, [r7, #0]
 803dbfa:	4798      	blx	r3
      break;
 803dbfc:	e067      	b.n	803dcce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803dbfe:	683b      	ldr	r3, [r7, #0]
 803dc00:	785b      	ldrb	r3, [r3, #1]
 803dc02:	2b0b      	cmp	r3, #11
 803dc04:	d851      	bhi.n	803dcaa <USBD_CDC_Setup+0x18a>
 803dc06:	a201      	add	r2, pc, #4	; (adr r2, 803dc0c <USBD_CDC_Setup+0xec>)
 803dc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803dc0c:	0803dc3d 	.word	0x0803dc3d
 803dc10:	0803dcb9 	.word	0x0803dcb9
 803dc14:	0803dcab 	.word	0x0803dcab
 803dc18:	0803dcab 	.word	0x0803dcab
 803dc1c:	0803dcab 	.word	0x0803dcab
 803dc20:	0803dcab 	.word	0x0803dcab
 803dc24:	0803dcab 	.word	0x0803dcab
 803dc28:	0803dcab 	.word	0x0803dcab
 803dc2c:	0803dcab 	.word	0x0803dcab
 803dc30:	0803dcab 	.word	0x0803dcab
 803dc34:	0803dc67 	.word	0x0803dc67
 803dc38:	0803dc91 	.word	0x0803dc91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803dc3c:	687b      	ldr	r3, [r7, #4]
 803dc3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803dc42:	b2db      	uxtb	r3, r3
 803dc44:	2b03      	cmp	r3, #3
 803dc46:	d107      	bne.n	803dc58 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 803dc48:	f107 030a 	add.w	r3, r7, #10
 803dc4c:	2202      	movs	r2, #2
 803dc4e:	4619      	mov	r1, r3
 803dc50:	6878      	ldr	r0, [r7, #4]
 803dc52:	f001 fced 	bl	803f630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803dc56:	e032      	b.n	803dcbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803dc58:	6839      	ldr	r1, [r7, #0]
 803dc5a:	6878      	ldr	r0, [r7, #4]
 803dc5c:	f001 fc77 	bl	803f54e <USBD_CtlError>
            ret = USBD_FAIL;
 803dc60:	2303      	movs	r3, #3
 803dc62:	75fb      	strb	r3, [r7, #23]
          break;
 803dc64:	e02b      	b.n	803dcbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803dc66:	687b      	ldr	r3, [r7, #4]
 803dc68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803dc6c:	b2db      	uxtb	r3, r3
 803dc6e:	2b03      	cmp	r3, #3
 803dc70:	d107      	bne.n	803dc82 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 803dc72:	f107 030d 	add.w	r3, r7, #13
 803dc76:	2201      	movs	r2, #1
 803dc78:	4619      	mov	r1, r3
 803dc7a:	6878      	ldr	r0, [r7, #4]
 803dc7c:	f001 fcd8 	bl	803f630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803dc80:	e01d      	b.n	803dcbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803dc82:	6839      	ldr	r1, [r7, #0]
 803dc84:	6878      	ldr	r0, [r7, #4]
 803dc86:	f001 fc62 	bl	803f54e <USBD_CtlError>
            ret = USBD_FAIL;
 803dc8a:	2303      	movs	r3, #3
 803dc8c:	75fb      	strb	r3, [r7, #23]
          break;
 803dc8e:	e016      	b.n	803dcbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 803dc90:	687b      	ldr	r3, [r7, #4]
 803dc92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803dc96:	b2db      	uxtb	r3, r3
 803dc98:	2b03      	cmp	r3, #3
 803dc9a:	d00f      	beq.n	803dcbc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 803dc9c:	6839      	ldr	r1, [r7, #0]
 803dc9e:	6878      	ldr	r0, [r7, #4]
 803dca0:	f001 fc55 	bl	803f54e <USBD_CtlError>
            ret = USBD_FAIL;
 803dca4:	2303      	movs	r3, #3
 803dca6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 803dca8:	e008      	b.n	803dcbc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 803dcaa:	6839      	ldr	r1, [r7, #0]
 803dcac:	6878      	ldr	r0, [r7, #4]
 803dcae:	f001 fc4e 	bl	803f54e <USBD_CtlError>
          ret = USBD_FAIL;
 803dcb2:	2303      	movs	r3, #3
 803dcb4:	75fb      	strb	r3, [r7, #23]
          break;
 803dcb6:	e002      	b.n	803dcbe <USBD_CDC_Setup+0x19e>
          break;
 803dcb8:	bf00      	nop
 803dcba:	e008      	b.n	803dcce <USBD_CDC_Setup+0x1ae>
          break;
 803dcbc:	bf00      	nop
      }
      break;
 803dcbe:	e006      	b.n	803dcce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 803dcc0:	6839      	ldr	r1, [r7, #0]
 803dcc2:	6878      	ldr	r0, [r7, #4]
 803dcc4:	f001 fc43 	bl	803f54e <USBD_CtlError>
      ret = USBD_FAIL;
 803dcc8:	2303      	movs	r3, #3
 803dcca:	75fb      	strb	r3, [r7, #23]
      break;
 803dccc:	bf00      	nop
  }

  return (uint8_t)ret;
 803dcce:	7dfb      	ldrb	r3, [r7, #23]
}
 803dcd0:	4618      	mov	r0, r3
 803dcd2:	3718      	adds	r7, #24
 803dcd4:	46bd      	mov	sp, r7
 803dcd6:	bd80      	pop	{r7, pc}

0803dcd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803dcd8:	b580      	push	{r7, lr}
 803dcda:	b084      	sub	sp, #16
 803dcdc:	af00      	add	r7, sp, #0
 803dcde:	6078      	str	r0, [r7, #4]
 803dce0:	460b      	mov	r3, r1
 803dce2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 803dce4:	687b      	ldr	r3, [r7, #4]
 803dce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803dcea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803dcec:	687b      	ldr	r3, [r7, #4]
 803dcee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803dcf2:	687b      	ldr	r3, [r7, #4]
 803dcf4:	32b0      	adds	r2, #176	; 0xb0
 803dcf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803dcfa:	2b00      	cmp	r3, #0
 803dcfc:	d101      	bne.n	803dd02 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 803dcfe:	2303      	movs	r3, #3
 803dd00:	e065      	b.n	803ddce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803dd02:	687b      	ldr	r3, [r7, #4]
 803dd04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803dd08:	687b      	ldr	r3, [r7, #4]
 803dd0a:	32b0      	adds	r2, #176	; 0xb0
 803dd0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803dd10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803dd12:	78fb      	ldrb	r3, [r7, #3]
 803dd14:	f003 020f 	and.w	r2, r3, #15
 803dd18:	6879      	ldr	r1, [r7, #4]
 803dd1a:	4613      	mov	r3, r2
 803dd1c:	009b      	lsls	r3, r3, #2
 803dd1e:	4413      	add	r3, r2
 803dd20:	009b      	lsls	r3, r3, #2
 803dd22:	440b      	add	r3, r1
 803dd24:	3318      	adds	r3, #24
 803dd26:	681b      	ldr	r3, [r3, #0]
 803dd28:	2b00      	cmp	r3, #0
 803dd2a:	d02f      	beq.n	803dd8c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 803dd2c:	78fb      	ldrb	r3, [r7, #3]
 803dd2e:	f003 020f 	and.w	r2, r3, #15
 803dd32:	6879      	ldr	r1, [r7, #4]
 803dd34:	4613      	mov	r3, r2
 803dd36:	009b      	lsls	r3, r3, #2
 803dd38:	4413      	add	r3, r2
 803dd3a:	009b      	lsls	r3, r3, #2
 803dd3c:	440b      	add	r3, r1
 803dd3e:	3318      	adds	r3, #24
 803dd40:	681a      	ldr	r2, [r3, #0]
 803dd42:	78fb      	ldrb	r3, [r7, #3]
 803dd44:	f003 010f 	and.w	r1, r3, #15
 803dd48:	68f8      	ldr	r0, [r7, #12]
 803dd4a:	460b      	mov	r3, r1
 803dd4c:	00db      	lsls	r3, r3, #3
 803dd4e:	440b      	add	r3, r1
 803dd50:	009b      	lsls	r3, r3, #2
 803dd52:	4403      	add	r3, r0
 803dd54:	3348      	adds	r3, #72	; 0x48
 803dd56:	681b      	ldr	r3, [r3, #0]
 803dd58:	fbb2 f1f3 	udiv	r1, r2, r3
 803dd5c:	fb01 f303 	mul.w	r3, r1, r3
 803dd60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803dd62:	2b00      	cmp	r3, #0
 803dd64:	d112      	bne.n	803dd8c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 803dd66:	78fb      	ldrb	r3, [r7, #3]
 803dd68:	f003 020f 	and.w	r2, r3, #15
 803dd6c:	6879      	ldr	r1, [r7, #4]
 803dd6e:	4613      	mov	r3, r2
 803dd70:	009b      	lsls	r3, r3, #2
 803dd72:	4413      	add	r3, r2
 803dd74:	009b      	lsls	r3, r3, #2
 803dd76:	440b      	add	r3, r1
 803dd78:	3318      	adds	r3, #24
 803dd7a:	2200      	movs	r2, #0
 803dd7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 803dd7e:	78f9      	ldrb	r1, [r7, #3]
 803dd80:	2300      	movs	r3, #0
 803dd82:	2200      	movs	r2, #0
 803dd84:	6878      	ldr	r0, [r7, #4]
 803dd86:	f002 f95a 	bl	804003e <USBD_LL_Transmit>
 803dd8a:	e01f      	b.n	803ddcc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 803dd8c:	68bb      	ldr	r3, [r7, #8]
 803dd8e:	2200      	movs	r2, #0
 803dd90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 803dd94:	687b      	ldr	r3, [r7, #4]
 803dd96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803dd9a:	687a      	ldr	r2, [r7, #4]
 803dd9c:	33b0      	adds	r3, #176	; 0xb0
 803dd9e:	009b      	lsls	r3, r3, #2
 803dda0:	4413      	add	r3, r2
 803dda2:	685b      	ldr	r3, [r3, #4]
 803dda4:	691b      	ldr	r3, [r3, #16]
 803dda6:	2b00      	cmp	r3, #0
 803dda8:	d010      	beq.n	803ddcc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 803ddaa:	687b      	ldr	r3, [r7, #4]
 803ddac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803ddb0:	687a      	ldr	r2, [r7, #4]
 803ddb2:	33b0      	adds	r3, #176	; 0xb0
 803ddb4:	009b      	lsls	r3, r3, #2
 803ddb6:	4413      	add	r3, r2
 803ddb8:	685b      	ldr	r3, [r3, #4]
 803ddba:	691b      	ldr	r3, [r3, #16]
 803ddbc:	68ba      	ldr	r2, [r7, #8]
 803ddbe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 803ddc2:	68ba      	ldr	r2, [r7, #8]
 803ddc4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 803ddc8:	78fa      	ldrb	r2, [r7, #3]
 803ddca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 803ddcc:	2300      	movs	r3, #0
}
 803ddce:	4618      	mov	r0, r3
 803ddd0:	3710      	adds	r7, #16
 803ddd2:	46bd      	mov	sp, r7
 803ddd4:	bd80      	pop	{r7, pc}

0803ddd6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803ddd6:	b580      	push	{r7, lr}
 803ddd8:	b084      	sub	sp, #16
 803ddda:	af00      	add	r7, sp, #0
 803dddc:	6078      	str	r0, [r7, #4]
 803ddde:	460b      	mov	r3, r1
 803dde0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803dde2:	687b      	ldr	r3, [r7, #4]
 803dde4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803dde8:	687b      	ldr	r3, [r7, #4]
 803ddea:	32b0      	adds	r2, #176	; 0xb0
 803ddec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ddf0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803ddf2:	687b      	ldr	r3, [r7, #4]
 803ddf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ddf8:	687b      	ldr	r3, [r7, #4]
 803ddfa:	32b0      	adds	r2, #176	; 0xb0
 803ddfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803de00:	2b00      	cmp	r3, #0
 803de02:	d101      	bne.n	803de08 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 803de04:	2303      	movs	r3, #3
 803de06:	e01a      	b.n	803de3e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 803de08:	78fb      	ldrb	r3, [r7, #3]
 803de0a:	4619      	mov	r1, r3
 803de0c:	6878      	ldr	r0, [r7, #4]
 803de0e:	f002 f958 	bl	80400c2 <USBD_LL_GetRxDataSize>
 803de12:	4602      	mov	r2, r0
 803de14:	68fb      	ldr	r3, [r7, #12]
 803de16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 803de1a:	687b      	ldr	r3, [r7, #4]
 803de1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803de20:	687a      	ldr	r2, [r7, #4]
 803de22:	33b0      	adds	r3, #176	; 0xb0
 803de24:	009b      	lsls	r3, r3, #2
 803de26:	4413      	add	r3, r2
 803de28:	685b      	ldr	r3, [r3, #4]
 803de2a:	68db      	ldr	r3, [r3, #12]
 803de2c:	68fa      	ldr	r2, [r7, #12]
 803de2e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 803de32:	68fa      	ldr	r2, [r7, #12]
 803de34:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 803de38:	4611      	mov	r1, r2
 803de3a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 803de3c:	2300      	movs	r3, #0
}
 803de3e:	4618      	mov	r0, r3
 803de40:	3710      	adds	r7, #16
 803de42:	46bd      	mov	sp, r7
 803de44:	bd80      	pop	{r7, pc}

0803de46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 803de46:	b580      	push	{r7, lr}
 803de48:	b084      	sub	sp, #16
 803de4a:	af00      	add	r7, sp, #0
 803de4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803de4e:	687b      	ldr	r3, [r7, #4]
 803de50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803de54:	687b      	ldr	r3, [r7, #4]
 803de56:	32b0      	adds	r2, #176	; 0xb0
 803de58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803de5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 803de5e:	68fb      	ldr	r3, [r7, #12]
 803de60:	2b00      	cmp	r3, #0
 803de62:	d101      	bne.n	803de68 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 803de64:	2303      	movs	r3, #3
 803de66:	e025      	b.n	803deb4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 803de68:	687b      	ldr	r3, [r7, #4]
 803de6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803de6e:	687a      	ldr	r2, [r7, #4]
 803de70:	33b0      	adds	r3, #176	; 0xb0
 803de72:	009b      	lsls	r3, r3, #2
 803de74:	4413      	add	r3, r2
 803de76:	685b      	ldr	r3, [r3, #4]
 803de78:	2b00      	cmp	r3, #0
 803de7a:	d01a      	beq.n	803deb2 <USBD_CDC_EP0_RxReady+0x6c>
 803de7c:	68fb      	ldr	r3, [r7, #12]
 803de7e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 803de82:	2bff      	cmp	r3, #255	; 0xff
 803de84:	d015      	beq.n	803deb2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803de86:	687b      	ldr	r3, [r7, #4]
 803de88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803de8c:	687a      	ldr	r2, [r7, #4]
 803de8e:	33b0      	adds	r3, #176	; 0xb0
 803de90:	009b      	lsls	r3, r3, #2
 803de92:	4413      	add	r3, r2
 803de94:	685b      	ldr	r3, [r3, #4]
 803de96:	689b      	ldr	r3, [r3, #8]
 803de98:	68fa      	ldr	r2, [r7, #12]
 803de9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 803de9e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 803dea0:	68fa      	ldr	r2, [r7, #12]
 803dea2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803dea6:	b292      	uxth	r2, r2
 803dea8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 803deaa:	68fb      	ldr	r3, [r7, #12]
 803deac:	22ff      	movs	r2, #255	; 0xff
 803deae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 803deb2:	2300      	movs	r3, #0
}
 803deb4:	4618      	mov	r0, r3
 803deb6:	3710      	adds	r7, #16
 803deb8:	46bd      	mov	sp, r7
 803deba:	bd80      	pop	{r7, pc}

0803debc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 803debc:	b580      	push	{r7, lr}
 803debe:	b086      	sub	sp, #24
 803dec0:	af00      	add	r7, sp, #0
 803dec2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803dec4:	2182      	movs	r1, #130	; 0x82
 803dec6:	4818      	ldr	r0, [pc, #96]	; (803df28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 803dec8:	f000 fd09 	bl	803e8de <USBD_GetEpDesc>
 803decc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803dece:	2101      	movs	r1, #1
 803ded0:	4815      	ldr	r0, [pc, #84]	; (803df28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 803ded2:	f000 fd04 	bl	803e8de <USBD_GetEpDesc>
 803ded6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803ded8:	2181      	movs	r1, #129	; 0x81
 803deda:	4813      	ldr	r0, [pc, #76]	; (803df28 <USBD_CDC_GetFSCfgDesc+0x6c>)
 803dedc:	f000 fcff 	bl	803e8de <USBD_GetEpDesc>
 803dee0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803dee2:	697b      	ldr	r3, [r7, #20]
 803dee4:	2b00      	cmp	r3, #0
 803dee6:	d002      	beq.n	803deee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 803dee8:	697b      	ldr	r3, [r7, #20]
 803deea:	2210      	movs	r2, #16
 803deec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803deee:	693b      	ldr	r3, [r7, #16]
 803def0:	2b00      	cmp	r3, #0
 803def2:	d006      	beq.n	803df02 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803def4:	693b      	ldr	r3, [r7, #16]
 803def6:	2200      	movs	r2, #0
 803def8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803defc:	711a      	strb	r2, [r3, #4]
 803defe:	2200      	movs	r2, #0
 803df00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803df02:	68fb      	ldr	r3, [r7, #12]
 803df04:	2b00      	cmp	r3, #0
 803df06:	d006      	beq.n	803df16 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803df08:	68fb      	ldr	r3, [r7, #12]
 803df0a:	2200      	movs	r2, #0
 803df0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803df10:	711a      	strb	r2, [r3, #4]
 803df12:	2200      	movs	r2, #0
 803df14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803df16:	687b      	ldr	r3, [r7, #4]
 803df18:	2243      	movs	r2, #67	; 0x43
 803df1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803df1c:	4b02      	ldr	r3, [pc, #8]	; (803df28 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 803df1e:	4618      	mov	r0, r3
 803df20:	3718      	adds	r7, #24
 803df22:	46bd      	mov	sp, r7
 803df24:	bd80      	pop	{r7, pc}
 803df26:	bf00      	nop
 803df28:	24000058 	.word	0x24000058

0803df2c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 803df2c:	b580      	push	{r7, lr}
 803df2e:	b086      	sub	sp, #24
 803df30:	af00      	add	r7, sp, #0
 803df32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803df34:	2182      	movs	r1, #130	; 0x82
 803df36:	4818      	ldr	r0, [pc, #96]	; (803df98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803df38:	f000 fcd1 	bl	803e8de <USBD_GetEpDesc>
 803df3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803df3e:	2101      	movs	r1, #1
 803df40:	4815      	ldr	r0, [pc, #84]	; (803df98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803df42:	f000 fccc 	bl	803e8de <USBD_GetEpDesc>
 803df46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803df48:	2181      	movs	r1, #129	; 0x81
 803df4a:	4813      	ldr	r0, [pc, #76]	; (803df98 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803df4c:	f000 fcc7 	bl	803e8de <USBD_GetEpDesc>
 803df50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803df52:	697b      	ldr	r3, [r7, #20]
 803df54:	2b00      	cmp	r3, #0
 803df56:	d002      	beq.n	803df5e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 803df58:	697b      	ldr	r3, [r7, #20]
 803df5a:	2210      	movs	r2, #16
 803df5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803df5e:	693b      	ldr	r3, [r7, #16]
 803df60:	2b00      	cmp	r3, #0
 803df62:	d006      	beq.n	803df72 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 803df64:	693b      	ldr	r3, [r7, #16]
 803df66:	2200      	movs	r2, #0
 803df68:	711a      	strb	r2, [r3, #4]
 803df6a:	2200      	movs	r2, #0
 803df6c:	f042 0202 	orr.w	r2, r2, #2
 803df70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803df72:	68fb      	ldr	r3, [r7, #12]
 803df74:	2b00      	cmp	r3, #0
 803df76:	d006      	beq.n	803df86 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 803df78:	68fb      	ldr	r3, [r7, #12]
 803df7a:	2200      	movs	r2, #0
 803df7c:	711a      	strb	r2, [r3, #4]
 803df7e:	2200      	movs	r2, #0
 803df80:	f042 0202 	orr.w	r2, r2, #2
 803df84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803df86:	687b      	ldr	r3, [r7, #4]
 803df88:	2243      	movs	r2, #67	; 0x43
 803df8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803df8c:	4b02      	ldr	r3, [pc, #8]	; (803df98 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 803df8e:	4618      	mov	r0, r3
 803df90:	3718      	adds	r7, #24
 803df92:	46bd      	mov	sp, r7
 803df94:	bd80      	pop	{r7, pc}
 803df96:	bf00      	nop
 803df98:	24000058 	.word	0x24000058

0803df9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 803df9c:	b580      	push	{r7, lr}
 803df9e:	b086      	sub	sp, #24
 803dfa0:	af00      	add	r7, sp, #0
 803dfa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803dfa4:	2182      	movs	r1, #130	; 0x82
 803dfa6:	4818      	ldr	r0, [pc, #96]	; (803e008 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803dfa8:	f000 fc99 	bl	803e8de <USBD_GetEpDesc>
 803dfac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803dfae:	2101      	movs	r1, #1
 803dfb0:	4815      	ldr	r0, [pc, #84]	; (803e008 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803dfb2:	f000 fc94 	bl	803e8de <USBD_GetEpDesc>
 803dfb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803dfb8:	2181      	movs	r1, #129	; 0x81
 803dfba:	4813      	ldr	r0, [pc, #76]	; (803e008 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803dfbc:	f000 fc8f 	bl	803e8de <USBD_GetEpDesc>
 803dfc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803dfc2:	697b      	ldr	r3, [r7, #20]
 803dfc4:	2b00      	cmp	r3, #0
 803dfc6:	d002      	beq.n	803dfce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 803dfc8:	697b      	ldr	r3, [r7, #20]
 803dfca:	2210      	movs	r2, #16
 803dfcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803dfce:	693b      	ldr	r3, [r7, #16]
 803dfd0:	2b00      	cmp	r3, #0
 803dfd2:	d006      	beq.n	803dfe2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803dfd4:	693b      	ldr	r3, [r7, #16]
 803dfd6:	2200      	movs	r2, #0
 803dfd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803dfdc:	711a      	strb	r2, [r3, #4]
 803dfde:	2200      	movs	r2, #0
 803dfe0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803dfe2:	68fb      	ldr	r3, [r7, #12]
 803dfe4:	2b00      	cmp	r3, #0
 803dfe6:	d006      	beq.n	803dff6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803dfe8:	68fb      	ldr	r3, [r7, #12]
 803dfea:	2200      	movs	r2, #0
 803dfec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803dff0:	711a      	strb	r2, [r3, #4]
 803dff2:	2200      	movs	r2, #0
 803dff4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803dff6:	687b      	ldr	r3, [r7, #4]
 803dff8:	2243      	movs	r2, #67	; 0x43
 803dffa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803dffc:	4b02      	ldr	r3, [pc, #8]	; (803e008 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 803dffe:	4618      	mov	r0, r3
 803e000:	3718      	adds	r7, #24
 803e002:	46bd      	mov	sp, r7
 803e004:	bd80      	pop	{r7, pc}
 803e006:	bf00      	nop
 803e008:	24000058 	.word	0x24000058

0803e00c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 803e00c:	b480      	push	{r7}
 803e00e:	b083      	sub	sp, #12
 803e010:	af00      	add	r7, sp, #0
 803e012:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 803e014:	687b      	ldr	r3, [r7, #4]
 803e016:	220a      	movs	r2, #10
 803e018:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 803e01a:	4b03      	ldr	r3, [pc, #12]	; (803e028 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 803e01c:	4618      	mov	r0, r3
 803e01e:	370c      	adds	r7, #12
 803e020:	46bd      	mov	sp, r7
 803e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e026:	4770      	bx	lr
 803e028:	24000014 	.word	0x24000014

0803e02c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 803e02c:	b480      	push	{r7}
 803e02e:	b083      	sub	sp, #12
 803e030:	af00      	add	r7, sp, #0
 803e032:	6078      	str	r0, [r7, #4]
 803e034:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 803e036:	683b      	ldr	r3, [r7, #0]
 803e038:	2b00      	cmp	r3, #0
 803e03a:	d101      	bne.n	803e040 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 803e03c:	2303      	movs	r3, #3
 803e03e:	e009      	b.n	803e054 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 803e040:	687b      	ldr	r3, [r7, #4]
 803e042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803e046:	687a      	ldr	r2, [r7, #4]
 803e048:	33b0      	adds	r3, #176	; 0xb0
 803e04a:	009b      	lsls	r3, r3, #2
 803e04c:	4413      	add	r3, r2
 803e04e:	683a      	ldr	r2, [r7, #0]
 803e050:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 803e052:	2300      	movs	r3, #0
}
 803e054:	4618      	mov	r0, r3
 803e056:	370c      	adds	r7, #12
 803e058:	46bd      	mov	sp, r7
 803e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e05e:	4770      	bx	lr

0803e060 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 803e060:	b480      	push	{r7}
 803e062:	b087      	sub	sp, #28
 803e064:	af00      	add	r7, sp, #0
 803e066:	60f8      	str	r0, [r7, #12]
 803e068:	60b9      	str	r1, [r7, #8]
 803e06a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803e06c:	68fb      	ldr	r3, [r7, #12]
 803e06e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e072:	68fb      	ldr	r3, [r7, #12]
 803e074:	32b0      	adds	r2, #176	; 0xb0
 803e076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e07a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 803e07c:	697b      	ldr	r3, [r7, #20]
 803e07e:	2b00      	cmp	r3, #0
 803e080:	d101      	bne.n	803e086 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 803e082:	2303      	movs	r3, #3
 803e084:	e008      	b.n	803e098 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 803e086:	697b      	ldr	r3, [r7, #20]
 803e088:	68ba      	ldr	r2, [r7, #8]
 803e08a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 803e08e:	697b      	ldr	r3, [r7, #20]
 803e090:	687a      	ldr	r2, [r7, #4]
 803e092:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 803e096:	2300      	movs	r3, #0
}
 803e098:	4618      	mov	r0, r3
 803e09a:	371c      	adds	r7, #28
 803e09c:	46bd      	mov	sp, r7
 803e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e0a2:	4770      	bx	lr

0803e0a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 803e0a4:	b480      	push	{r7}
 803e0a6:	b085      	sub	sp, #20
 803e0a8:	af00      	add	r7, sp, #0
 803e0aa:	6078      	str	r0, [r7, #4]
 803e0ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803e0ae:	687b      	ldr	r3, [r7, #4]
 803e0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e0b4:	687b      	ldr	r3, [r7, #4]
 803e0b6:	32b0      	adds	r2, #176	; 0xb0
 803e0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e0bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 803e0be:	68fb      	ldr	r3, [r7, #12]
 803e0c0:	2b00      	cmp	r3, #0
 803e0c2:	d101      	bne.n	803e0c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 803e0c4:	2303      	movs	r3, #3
 803e0c6:	e004      	b.n	803e0d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 803e0c8:	68fb      	ldr	r3, [r7, #12]
 803e0ca:	683a      	ldr	r2, [r7, #0]
 803e0cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 803e0d0:	2300      	movs	r3, #0
}
 803e0d2:	4618      	mov	r0, r3
 803e0d4:	3714      	adds	r7, #20
 803e0d6:	46bd      	mov	sp, r7
 803e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e0dc:	4770      	bx	lr
	...

0803e0e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 803e0e0:	b580      	push	{r7, lr}
 803e0e2:	b084      	sub	sp, #16
 803e0e4:	af00      	add	r7, sp, #0
 803e0e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803e0e8:	687b      	ldr	r3, [r7, #4]
 803e0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e0ee:	687b      	ldr	r3, [r7, #4]
 803e0f0:	32b0      	adds	r2, #176	; 0xb0
 803e0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e0f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803e0f8:	687b      	ldr	r3, [r7, #4]
 803e0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e0fe:	687b      	ldr	r3, [r7, #4]
 803e100:	32b0      	adds	r2, #176	; 0xb0
 803e102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e106:	2b00      	cmp	r3, #0
 803e108:	d101      	bne.n	803e10e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 803e10a:	2303      	movs	r3, #3
 803e10c:	e018      	b.n	803e140 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803e10e:	687b      	ldr	r3, [r7, #4]
 803e110:	7c1b      	ldrb	r3, [r3, #16]
 803e112:	2b00      	cmp	r3, #0
 803e114:	d10a      	bne.n	803e12c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803e116:	4b0c      	ldr	r3, [pc, #48]	; (803e148 <USBD_CDC_ReceivePacket+0x68>)
 803e118:	7819      	ldrb	r1, [r3, #0]
 803e11a:	68fb      	ldr	r3, [r7, #12]
 803e11c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803e120:	f44f 7300 	mov.w	r3, #512	; 0x200
 803e124:	6878      	ldr	r0, [r7, #4]
 803e126:	f001 ffab 	bl	8040080 <USBD_LL_PrepareReceive>
 803e12a:	e008      	b.n	803e13e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803e12c:	4b06      	ldr	r3, [pc, #24]	; (803e148 <USBD_CDC_ReceivePacket+0x68>)
 803e12e:	7819      	ldrb	r1, [r3, #0]
 803e130:	68fb      	ldr	r3, [r7, #12]
 803e132:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803e136:	2340      	movs	r3, #64	; 0x40
 803e138:	6878      	ldr	r0, [r7, #4]
 803e13a:	f001 ffa1 	bl	8040080 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 803e13e:	2300      	movs	r3, #0
}
 803e140:	4618      	mov	r0, r3
 803e142:	3710      	adds	r7, #16
 803e144:	46bd      	mov	sp, r7
 803e146:	bd80      	pop	{r7, pc}
 803e148:	2400009c 	.word	0x2400009c

0803e14c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 803e14c:	b580      	push	{r7, lr}
 803e14e:	b086      	sub	sp, #24
 803e150:	af00      	add	r7, sp, #0
 803e152:	60f8      	str	r0, [r7, #12]
 803e154:	60b9      	str	r1, [r7, #8]
 803e156:	4613      	mov	r3, r2
 803e158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 803e15a:	68fb      	ldr	r3, [r7, #12]
 803e15c:	2b00      	cmp	r3, #0
 803e15e:	d101      	bne.n	803e164 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 803e160:	2303      	movs	r3, #3
 803e162:	e01f      	b.n	803e1a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 803e164:	68fb      	ldr	r3, [r7, #12]
 803e166:	2200      	movs	r2, #0
 803e168:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 803e16c:	68fb      	ldr	r3, [r7, #12]
 803e16e:	2200      	movs	r2, #0
 803e170:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 803e174:	68fb      	ldr	r3, [r7, #12]
 803e176:	2200      	movs	r2, #0
 803e178:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 803e17c:	68bb      	ldr	r3, [r7, #8]
 803e17e:	2b00      	cmp	r3, #0
 803e180:	d003      	beq.n	803e18a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 803e182:	68fb      	ldr	r3, [r7, #12]
 803e184:	68ba      	ldr	r2, [r7, #8]
 803e186:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803e18a:	68fb      	ldr	r3, [r7, #12]
 803e18c:	2201      	movs	r2, #1
 803e18e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 803e192:	68fb      	ldr	r3, [r7, #12]
 803e194:	79fa      	ldrb	r2, [r7, #7]
 803e196:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 803e198:	68f8      	ldr	r0, [r7, #12]
 803e19a:	f001 fe17 	bl	803fdcc <USBD_LL_Init>
 803e19e:	4603      	mov	r3, r0
 803e1a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 803e1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 803e1a4:	4618      	mov	r0, r3
 803e1a6:	3718      	adds	r7, #24
 803e1a8:	46bd      	mov	sp, r7
 803e1aa:	bd80      	pop	{r7, pc}

0803e1ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 803e1ac:	b580      	push	{r7, lr}
 803e1ae:	b084      	sub	sp, #16
 803e1b0:	af00      	add	r7, sp, #0
 803e1b2:	6078      	str	r0, [r7, #4]
 803e1b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803e1b6:	2300      	movs	r3, #0
 803e1b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 803e1ba:	683b      	ldr	r3, [r7, #0]
 803e1bc:	2b00      	cmp	r3, #0
 803e1be:	d101      	bne.n	803e1c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 803e1c0:	2303      	movs	r3, #3
 803e1c2:	e025      	b.n	803e210 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 803e1c4:	687b      	ldr	r3, [r7, #4]
 803e1c6:	683a      	ldr	r2, [r7, #0]
 803e1c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 803e1cc:	687b      	ldr	r3, [r7, #4]
 803e1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e1d2:	687b      	ldr	r3, [r7, #4]
 803e1d4:	32ae      	adds	r2, #174	; 0xae
 803e1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803e1dc:	2b00      	cmp	r3, #0
 803e1de:	d00f      	beq.n	803e200 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 803e1e0:	687b      	ldr	r3, [r7, #4]
 803e1e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e1e6:	687b      	ldr	r3, [r7, #4]
 803e1e8:	32ae      	adds	r2, #174	; 0xae
 803e1ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803e1f0:	f107 020e 	add.w	r2, r7, #14
 803e1f4:	4610      	mov	r0, r2
 803e1f6:	4798      	blx	r3
 803e1f8:	4602      	mov	r2, r0
 803e1fa:	687b      	ldr	r3, [r7, #4]
 803e1fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 803e200:	687b      	ldr	r3, [r7, #4]
 803e202:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 803e206:	1c5a      	adds	r2, r3, #1
 803e208:	687b      	ldr	r3, [r7, #4]
 803e20a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 803e20e:	2300      	movs	r3, #0
}
 803e210:	4618      	mov	r0, r3
 803e212:	3710      	adds	r7, #16
 803e214:	46bd      	mov	sp, r7
 803e216:	bd80      	pop	{r7, pc}

0803e218 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 803e218:	b580      	push	{r7, lr}
 803e21a:	b082      	sub	sp, #8
 803e21c:	af00      	add	r7, sp, #0
 803e21e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 803e220:	6878      	ldr	r0, [r7, #4]
 803e222:	f001 fe23 	bl	803fe6c <USBD_LL_Start>
 803e226:	4603      	mov	r3, r0
}
 803e228:	4618      	mov	r0, r3
 803e22a:	3708      	adds	r7, #8
 803e22c:	46bd      	mov	sp, r7
 803e22e:	bd80      	pop	{r7, pc}

0803e230 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 803e230:	b480      	push	{r7}
 803e232:	b083      	sub	sp, #12
 803e234:	af00      	add	r7, sp, #0
 803e236:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803e238:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 803e23a:	4618      	mov	r0, r3
 803e23c:	370c      	adds	r7, #12
 803e23e:	46bd      	mov	sp, r7
 803e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e244:	4770      	bx	lr

0803e246 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803e246:	b580      	push	{r7, lr}
 803e248:	b084      	sub	sp, #16
 803e24a:	af00      	add	r7, sp, #0
 803e24c:	6078      	str	r0, [r7, #4]
 803e24e:	460b      	mov	r3, r1
 803e250:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 803e252:	2300      	movs	r3, #0
 803e254:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803e256:	687b      	ldr	r3, [r7, #4]
 803e258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e25c:	2b00      	cmp	r3, #0
 803e25e:	d009      	beq.n	803e274 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 803e260:	687b      	ldr	r3, [r7, #4]
 803e262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e266:	681b      	ldr	r3, [r3, #0]
 803e268:	78fa      	ldrb	r2, [r7, #3]
 803e26a:	4611      	mov	r1, r2
 803e26c:	6878      	ldr	r0, [r7, #4]
 803e26e:	4798      	blx	r3
 803e270:	4603      	mov	r3, r0
 803e272:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803e274:	7bfb      	ldrb	r3, [r7, #15]
}
 803e276:	4618      	mov	r0, r3
 803e278:	3710      	adds	r7, #16
 803e27a:	46bd      	mov	sp, r7
 803e27c:	bd80      	pop	{r7, pc}

0803e27e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803e27e:	b580      	push	{r7, lr}
 803e280:	b084      	sub	sp, #16
 803e282:	af00      	add	r7, sp, #0
 803e284:	6078      	str	r0, [r7, #4]
 803e286:	460b      	mov	r3, r1
 803e288:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 803e28a:	2300      	movs	r3, #0
 803e28c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 803e28e:	687b      	ldr	r3, [r7, #4]
 803e290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e294:	685b      	ldr	r3, [r3, #4]
 803e296:	78fa      	ldrb	r2, [r7, #3]
 803e298:	4611      	mov	r1, r2
 803e29a:	6878      	ldr	r0, [r7, #4]
 803e29c:	4798      	blx	r3
 803e29e:	4603      	mov	r3, r0
 803e2a0:	2b00      	cmp	r3, #0
 803e2a2:	d001      	beq.n	803e2a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 803e2a4:	2303      	movs	r3, #3
 803e2a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803e2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 803e2aa:	4618      	mov	r0, r3
 803e2ac:	3710      	adds	r7, #16
 803e2ae:	46bd      	mov	sp, r7
 803e2b0:	bd80      	pop	{r7, pc}

0803e2b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 803e2b2:	b580      	push	{r7, lr}
 803e2b4:	b084      	sub	sp, #16
 803e2b6:	af00      	add	r7, sp, #0
 803e2b8:	6078      	str	r0, [r7, #4]
 803e2ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 803e2bc:	687b      	ldr	r3, [r7, #4]
 803e2be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803e2c2:	6839      	ldr	r1, [r7, #0]
 803e2c4:	4618      	mov	r0, r3
 803e2c6:	f001 f908 	bl	803f4da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 803e2ca:	687b      	ldr	r3, [r7, #4]
 803e2cc:	2201      	movs	r2, #1
 803e2ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 803e2d2:	687b      	ldr	r3, [r7, #4]
 803e2d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 803e2d8:	461a      	mov	r2, r3
 803e2da:	687b      	ldr	r3, [r7, #4]
 803e2dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 803e2e0:	687b      	ldr	r3, [r7, #4]
 803e2e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803e2e6:	f003 031f 	and.w	r3, r3, #31
 803e2ea:	2b02      	cmp	r3, #2
 803e2ec:	d01a      	beq.n	803e324 <USBD_LL_SetupStage+0x72>
 803e2ee:	2b02      	cmp	r3, #2
 803e2f0:	d822      	bhi.n	803e338 <USBD_LL_SetupStage+0x86>
 803e2f2:	2b00      	cmp	r3, #0
 803e2f4:	d002      	beq.n	803e2fc <USBD_LL_SetupStage+0x4a>
 803e2f6:	2b01      	cmp	r3, #1
 803e2f8:	d00a      	beq.n	803e310 <USBD_LL_SetupStage+0x5e>
 803e2fa:	e01d      	b.n	803e338 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 803e2fc:	687b      	ldr	r3, [r7, #4]
 803e2fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803e302:	4619      	mov	r1, r3
 803e304:	6878      	ldr	r0, [r7, #4]
 803e306:	f000 fb5f 	bl	803e9c8 <USBD_StdDevReq>
 803e30a:	4603      	mov	r3, r0
 803e30c:	73fb      	strb	r3, [r7, #15]
      break;
 803e30e:	e020      	b.n	803e352 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 803e310:	687b      	ldr	r3, [r7, #4]
 803e312:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803e316:	4619      	mov	r1, r3
 803e318:	6878      	ldr	r0, [r7, #4]
 803e31a:	f000 fbc7 	bl	803eaac <USBD_StdItfReq>
 803e31e:	4603      	mov	r3, r0
 803e320:	73fb      	strb	r3, [r7, #15]
      break;
 803e322:	e016      	b.n	803e352 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 803e324:	687b      	ldr	r3, [r7, #4]
 803e326:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803e32a:	4619      	mov	r1, r3
 803e32c:	6878      	ldr	r0, [r7, #4]
 803e32e:	f000 fc29 	bl	803eb84 <USBD_StdEPReq>
 803e332:	4603      	mov	r3, r0
 803e334:	73fb      	strb	r3, [r7, #15]
      break;
 803e336:	e00c      	b.n	803e352 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 803e338:	687b      	ldr	r3, [r7, #4]
 803e33a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803e33e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 803e342:	b2db      	uxtb	r3, r3
 803e344:	4619      	mov	r1, r3
 803e346:	6878      	ldr	r0, [r7, #4]
 803e348:	f001 fdf0 	bl	803ff2c <USBD_LL_StallEP>
 803e34c:	4603      	mov	r3, r0
 803e34e:	73fb      	strb	r3, [r7, #15]
      break;
 803e350:	bf00      	nop
  }

  return ret;
 803e352:	7bfb      	ldrb	r3, [r7, #15]
}
 803e354:	4618      	mov	r0, r3
 803e356:	3710      	adds	r7, #16
 803e358:	46bd      	mov	sp, r7
 803e35a:	bd80      	pop	{r7, pc}

0803e35c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 803e35c:	b580      	push	{r7, lr}
 803e35e:	b086      	sub	sp, #24
 803e360:	af00      	add	r7, sp, #0
 803e362:	60f8      	str	r0, [r7, #12]
 803e364:	460b      	mov	r3, r1
 803e366:	607a      	str	r2, [r7, #4]
 803e368:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 803e36a:	2300      	movs	r3, #0
 803e36c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 803e36e:	7afb      	ldrb	r3, [r7, #11]
 803e370:	2b00      	cmp	r3, #0
 803e372:	d16e      	bne.n	803e452 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 803e374:	68fb      	ldr	r3, [r7, #12]
 803e376:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 803e37a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 803e37c:	68fb      	ldr	r3, [r7, #12]
 803e37e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803e382:	2b03      	cmp	r3, #3
 803e384:	f040 8098 	bne.w	803e4b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 803e388:	693b      	ldr	r3, [r7, #16]
 803e38a:	689a      	ldr	r2, [r3, #8]
 803e38c:	693b      	ldr	r3, [r7, #16]
 803e38e:	68db      	ldr	r3, [r3, #12]
 803e390:	429a      	cmp	r2, r3
 803e392:	d913      	bls.n	803e3bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 803e394:	693b      	ldr	r3, [r7, #16]
 803e396:	689a      	ldr	r2, [r3, #8]
 803e398:	693b      	ldr	r3, [r7, #16]
 803e39a:	68db      	ldr	r3, [r3, #12]
 803e39c:	1ad2      	subs	r2, r2, r3
 803e39e:	693b      	ldr	r3, [r7, #16]
 803e3a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 803e3a2:	693b      	ldr	r3, [r7, #16]
 803e3a4:	68da      	ldr	r2, [r3, #12]
 803e3a6:	693b      	ldr	r3, [r7, #16]
 803e3a8:	689b      	ldr	r3, [r3, #8]
 803e3aa:	4293      	cmp	r3, r2
 803e3ac:	bf28      	it	cs
 803e3ae:	4613      	movcs	r3, r2
 803e3b0:	461a      	mov	r2, r3
 803e3b2:	6879      	ldr	r1, [r7, #4]
 803e3b4:	68f8      	ldr	r0, [r7, #12]
 803e3b6:	f001 f984 	bl	803f6c2 <USBD_CtlContinueRx>
 803e3ba:	e07d      	b.n	803e4b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 803e3bc:	68fb      	ldr	r3, [r7, #12]
 803e3be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803e3c2:	f003 031f 	and.w	r3, r3, #31
 803e3c6:	2b02      	cmp	r3, #2
 803e3c8:	d014      	beq.n	803e3f4 <USBD_LL_DataOutStage+0x98>
 803e3ca:	2b02      	cmp	r3, #2
 803e3cc:	d81d      	bhi.n	803e40a <USBD_LL_DataOutStage+0xae>
 803e3ce:	2b00      	cmp	r3, #0
 803e3d0:	d002      	beq.n	803e3d8 <USBD_LL_DataOutStage+0x7c>
 803e3d2:	2b01      	cmp	r3, #1
 803e3d4:	d003      	beq.n	803e3de <USBD_LL_DataOutStage+0x82>
 803e3d6:	e018      	b.n	803e40a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 803e3d8:	2300      	movs	r3, #0
 803e3da:	75bb      	strb	r3, [r7, #22]
            break;
 803e3dc:	e018      	b.n	803e410 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 803e3de:	68fb      	ldr	r3, [r7, #12]
 803e3e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 803e3e4:	b2db      	uxtb	r3, r3
 803e3e6:	4619      	mov	r1, r3
 803e3e8:	68f8      	ldr	r0, [r7, #12]
 803e3ea:	f000 fa5e 	bl	803e8aa <USBD_CoreFindIF>
 803e3ee:	4603      	mov	r3, r0
 803e3f0:	75bb      	strb	r3, [r7, #22]
            break;
 803e3f2:	e00d      	b.n	803e410 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 803e3f4:	68fb      	ldr	r3, [r7, #12]
 803e3f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 803e3fa:	b2db      	uxtb	r3, r3
 803e3fc:	4619      	mov	r1, r3
 803e3fe:	68f8      	ldr	r0, [r7, #12]
 803e400:	f000 fa60 	bl	803e8c4 <USBD_CoreFindEP>
 803e404:	4603      	mov	r3, r0
 803e406:	75bb      	strb	r3, [r7, #22]
            break;
 803e408:	e002      	b.n	803e410 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 803e40a:	2300      	movs	r3, #0
 803e40c:	75bb      	strb	r3, [r7, #22]
            break;
 803e40e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 803e410:	7dbb      	ldrb	r3, [r7, #22]
 803e412:	2b00      	cmp	r3, #0
 803e414:	d119      	bne.n	803e44a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803e416:	68fb      	ldr	r3, [r7, #12]
 803e418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e41c:	b2db      	uxtb	r3, r3
 803e41e:	2b03      	cmp	r3, #3
 803e420:	d113      	bne.n	803e44a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 803e422:	7dba      	ldrb	r2, [r7, #22]
 803e424:	68fb      	ldr	r3, [r7, #12]
 803e426:	32ae      	adds	r2, #174	; 0xae
 803e428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e42c:	691b      	ldr	r3, [r3, #16]
 803e42e:	2b00      	cmp	r3, #0
 803e430:	d00b      	beq.n	803e44a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 803e432:	7dba      	ldrb	r2, [r7, #22]
 803e434:	68fb      	ldr	r3, [r7, #12]
 803e436:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 803e43a:	7dba      	ldrb	r2, [r7, #22]
 803e43c:	68fb      	ldr	r3, [r7, #12]
 803e43e:	32ae      	adds	r2, #174	; 0xae
 803e440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e444:	691b      	ldr	r3, [r3, #16]
 803e446:	68f8      	ldr	r0, [r7, #12]
 803e448:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 803e44a:	68f8      	ldr	r0, [r7, #12]
 803e44c:	f001 f94a 	bl	803f6e4 <USBD_CtlSendStatus>
 803e450:	e032      	b.n	803e4b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 803e452:	7afb      	ldrb	r3, [r7, #11]
 803e454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803e458:	b2db      	uxtb	r3, r3
 803e45a:	4619      	mov	r1, r3
 803e45c:	68f8      	ldr	r0, [r7, #12]
 803e45e:	f000 fa31 	bl	803e8c4 <USBD_CoreFindEP>
 803e462:	4603      	mov	r3, r0
 803e464:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803e466:	7dbb      	ldrb	r3, [r7, #22]
 803e468:	2bff      	cmp	r3, #255	; 0xff
 803e46a:	d025      	beq.n	803e4b8 <USBD_LL_DataOutStage+0x15c>
 803e46c:	7dbb      	ldrb	r3, [r7, #22]
 803e46e:	2b00      	cmp	r3, #0
 803e470:	d122      	bne.n	803e4b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803e472:	68fb      	ldr	r3, [r7, #12]
 803e474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e478:	b2db      	uxtb	r3, r3
 803e47a:	2b03      	cmp	r3, #3
 803e47c:	d117      	bne.n	803e4ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 803e47e:	7dba      	ldrb	r2, [r7, #22]
 803e480:	68fb      	ldr	r3, [r7, #12]
 803e482:	32ae      	adds	r2, #174	; 0xae
 803e484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e488:	699b      	ldr	r3, [r3, #24]
 803e48a:	2b00      	cmp	r3, #0
 803e48c:	d00f      	beq.n	803e4ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 803e48e:	7dba      	ldrb	r2, [r7, #22]
 803e490:	68fb      	ldr	r3, [r7, #12]
 803e492:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 803e496:	7dba      	ldrb	r2, [r7, #22]
 803e498:	68fb      	ldr	r3, [r7, #12]
 803e49a:	32ae      	adds	r2, #174	; 0xae
 803e49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e4a0:	699b      	ldr	r3, [r3, #24]
 803e4a2:	7afa      	ldrb	r2, [r7, #11]
 803e4a4:	4611      	mov	r1, r2
 803e4a6:	68f8      	ldr	r0, [r7, #12]
 803e4a8:	4798      	blx	r3
 803e4aa:	4603      	mov	r3, r0
 803e4ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 803e4ae:	7dfb      	ldrb	r3, [r7, #23]
 803e4b0:	2b00      	cmp	r3, #0
 803e4b2:	d001      	beq.n	803e4b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 803e4b4:	7dfb      	ldrb	r3, [r7, #23]
 803e4b6:	e000      	b.n	803e4ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 803e4b8:	2300      	movs	r3, #0
}
 803e4ba:	4618      	mov	r0, r3
 803e4bc:	3718      	adds	r7, #24
 803e4be:	46bd      	mov	sp, r7
 803e4c0:	bd80      	pop	{r7, pc}

0803e4c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 803e4c2:	b580      	push	{r7, lr}
 803e4c4:	b086      	sub	sp, #24
 803e4c6:	af00      	add	r7, sp, #0
 803e4c8:	60f8      	str	r0, [r7, #12]
 803e4ca:	460b      	mov	r3, r1
 803e4cc:	607a      	str	r2, [r7, #4]
 803e4ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 803e4d0:	7afb      	ldrb	r3, [r7, #11]
 803e4d2:	2b00      	cmp	r3, #0
 803e4d4:	d16f      	bne.n	803e5b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 803e4d6:	68fb      	ldr	r3, [r7, #12]
 803e4d8:	3314      	adds	r3, #20
 803e4da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 803e4dc:	68fb      	ldr	r3, [r7, #12]
 803e4de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803e4e2:	2b02      	cmp	r3, #2
 803e4e4:	d15a      	bne.n	803e59c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 803e4e6:	693b      	ldr	r3, [r7, #16]
 803e4e8:	689a      	ldr	r2, [r3, #8]
 803e4ea:	693b      	ldr	r3, [r7, #16]
 803e4ec:	68db      	ldr	r3, [r3, #12]
 803e4ee:	429a      	cmp	r2, r3
 803e4f0:	d914      	bls.n	803e51c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 803e4f2:	693b      	ldr	r3, [r7, #16]
 803e4f4:	689a      	ldr	r2, [r3, #8]
 803e4f6:	693b      	ldr	r3, [r7, #16]
 803e4f8:	68db      	ldr	r3, [r3, #12]
 803e4fa:	1ad2      	subs	r2, r2, r3
 803e4fc:	693b      	ldr	r3, [r7, #16]
 803e4fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 803e500:	693b      	ldr	r3, [r7, #16]
 803e502:	689b      	ldr	r3, [r3, #8]
 803e504:	461a      	mov	r2, r3
 803e506:	6879      	ldr	r1, [r7, #4]
 803e508:	68f8      	ldr	r0, [r7, #12]
 803e50a:	f001 f8ac 	bl	803f666 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803e50e:	2300      	movs	r3, #0
 803e510:	2200      	movs	r2, #0
 803e512:	2100      	movs	r1, #0
 803e514:	68f8      	ldr	r0, [r7, #12]
 803e516:	f001 fdb3 	bl	8040080 <USBD_LL_PrepareReceive>
 803e51a:	e03f      	b.n	803e59c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 803e51c:	693b      	ldr	r3, [r7, #16]
 803e51e:	68da      	ldr	r2, [r3, #12]
 803e520:	693b      	ldr	r3, [r7, #16]
 803e522:	689b      	ldr	r3, [r3, #8]
 803e524:	429a      	cmp	r2, r3
 803e526:	d11c      	bne.n	803e562 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 803e528:	693b      	ldr	r3, [r7, #16]
 803e52a:	685a      	ldr	r2, [r3, #4]
 803e52c:	693b      	ldr	r3, [r7, #16]
 803e52e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 803e530:	429a      	cmp	r2, r3
 803e532:	d316      	bcc.n	803e562 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 803e534:	693b      	ldr	r3, [r7, #16]
 803e536:	685a      	ldr	r2, [r3, #4]
 803e538:	68fb      	ldr	r3, [r7, #12]
 803e53a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 803e53e:	429a      	cmp	r2, r3
 803e540:	d20f      	bcs.n	803e562 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 803e542:	2200      	movs	r2, #0
 803e544:	2100      	movs	r1, #0
 803e546:	68f8      	ldr	r0, [r7, #12]
 803e548:	f001 f88d 	bl	803f666 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 803e54c:	68fb      	ldr	r3, [r7, #12]
 803e54e:	2200      	movs	r2, #0
 803e550:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803e554:	2300      	movs	r3, #0
 803e556:	2200      	movs	r2, #0
 803e558:	2100      	movs	r1, #0
 803e55a:	68f8      	ldr	r0, [r7, #12]
 803e55c:	f001 fd90 	bl	8040080 <USBD_LL_PrepareReceive>
 803e560:	e01c      	b.n	803e59c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803e562:	68fb      	ldr	r3, [r7, #12]
 803e564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e568:	b2db      	uxtb	r3, r3
 803e56a:	2b03      	cmp	r3, #3
 803e56c:	d10f      	bne.n	803e58e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 803e56e:	68fb      	ldr	r3, [r7, #12]
 803e570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e574:	68db      	ldr	r3, [r3, #12]
 803e576:	2b00      	cmp	r3, #0
 803e578:	d009      	beq.n	803e58e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 803e57a:	68fb      	ldr	r3, [r7, #12]
 803e57c:	2200      	movs	r2, #0
 803e57e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 803e582:	68fb      	ldr	r3, [r7, #12]
 803e584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e588:	68db      	ldr	r3, [r3, #12]
 803e58a:	68f8      	ldr	r0, [r7, #12]
 803e58c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 803e58e:	2180      	movs	r1, #128	; 0x80
 803e590:	68f8      	ldr	r0, [r7, #12]
 803e592:	f001 fccb 	bl	803ff2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 803e596:	68f8      	ldr	r0, [r7, #12]
 803e598:	f001 f8b7 	bl	803f70a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 803e59c:	68fb      	ldr	r3, [r7, #12]
 803e59e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 803e5a2:	2b00      	cmp	r3, #0
 803e5a4:	d03a      	beq.n	803e61c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 803e5a6:	68f8      	ldr	r0, [r7, #12]
 803e5a8:	f7ff fe42 	bl	803e230 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 803e5ac:	68fb      	ldr	r3, [r7, #12]
 803e5ae:	2200      	movs	r2, #0
 803e5b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 803e5b4:	e032      	b.n	803e61c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 803e5b6:	7afb      	ldrb	r3, [r7, #11]
 803e5b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803e5bc:	b2db      	uxtb	r3, r3
 803e5be:	4619      	mov	r1, r3
 803e5c0:	68f8      	ldr	r0, [r7, #12]
 803e5c2:	f000 f97f 	bl	803e8c4 <USBD_CoreFindEP>
 803e5c6:	4603      	mov	r3, r0
 803e5c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803e5ca:	7dfb      	ldrb	r3, [r7, #23]
 803e5cc:	2bff      	cmp	r3, #255	; 0xff
 803e5ce:	d025      	beq.n	803e61c <USBD_LL_DataInStage+0x15a>
 803e5d0:	7dfb      	ldrb	r3, [r7, #23]
 803e5d2:	2b00      	cmp	r3, #0
 803e5d4:	d122      	bne.n	803e61c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803e5d6:	68fb      	ldr	r3, [r7, #12]
 803e5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e5dc:	b2db      	uxtb	r3, r3
 803e5de:	2b03      	cmp	r3, #3
 803e5e0:	d11c      	bne.n	803e61c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 803e5e2:	7dfa      	ldrb	r2, [r7, #23]
 803e5e4:	68fb      	ldr	r3, [r7, #12]
 803e5e6:	32ae      	adds	r2, #174	; 0xae
 803e5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e5ec:	695b      	ldr	r3, [r3, #20]
 803e5ee:	2b00      	cmp	r3, #0
 803e5f0:	d014      	beq.n	803e61c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 803e5f2:	7dfa      	ldrb	r2, [r7, #23]
 803e5f4:	68fb      	ldr	r3, [r7, #12]
 803e5f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 803e5fa:	7dfa      	ldrb	r2, [r7, #23]
 803e5fc:	68fb      	ldr	r3, [r7, #12]
 803e5fe:	32ae      	adds	r2, #174	; 0xae
 803e600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e604:	695b      	ldr	r3, [r3, #20]
 803e606:	7afa      	ldrb	r2, [r7, #11]
 803e608:	4611      	mov	r1, r2
 803e60a:	68f8      	ldr	r0, [r7, #12]
 803e60c:	4798      	blx	r3
 803e60e:	4603      	mov	r3, r0
 803e610:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 803e612:	7dbb      	ldrb	r3, [r7, #22]
 803e614:	2b00      	cmp	r3, #0
 803e616:	d001      	beq.n	803e61c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 803e618:	7dbb      	ldrb	r3, [r7, #22]
 803e61a:	e000      	b.n	803e61e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 803e61c:	2300      	movs	r3, #0
}
 803e61e:	4618      	mov	r0, r3
 803e620:	3718      	adds	r7, #24
 803e622:	46bd      	mov	sp, r7
 803e624:	bd80      	pop	{r7, pc}

0803e626 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 803e626:	b580      	push	{r7, lr}
 803e628:	b084      	sub	sp, #16
 803e62a:	af00      	add	r7, sp, #0
 803e62c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 803e62e:	2300      	movs	r3, #0
 803e630:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803e632:	687b      	ldr	r3, [r7, #4]
 803e634:	2201      	movs	r2, #1
 803e636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 803e63a:	687b      	ldr	r3, [r7, #4]
 803e63c:	2200      	movs	r2, #0
 803e63e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 803e642:	687b      	ldr	r3, [r7, #4]
 803e644:	2200      	movs	r2, #0
 803e646:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 803e648:	687b      	ldr	r3, [r7, #4]
 803e64a:	2200      	movs	r2, #0
 803e64c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 803e650:	687b      	ldr	r3, [r7, #4]
 803e652:	2200      	movs	r2, #0
 803e654:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 803e658:	687b      	ldr	r3, [r7, #4]
 803e65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e65e:	2b00      	cmp	r3, #0
 803e660:	d014      	beq.n	803e68c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 803e662:	687b      	ldr	r3, [r7, #4]
 803e664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e668:	685b      	ldr	r3, [r3, #4]
 803e66a:	2b00      	cmp	r3, #0
 803e66c:	d00e      	beq.n	803e68c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 803e66e:	687b      	ldr	r3, [r7, #4]
 803e670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e674:	685b      	ldr	r3, [r3, #4]
 803e676:	687a      	ldr	r2, [r7, #4]
 803e678:	6852      	ldr	r2, [r2, #4]
 803e67a:	b2d2      	uxtb	r2, r2
 803e67c:	4611      	mov	r1, r2
 803e67e:	6878      	ldr	r0, [r7, #4]
 803e680:	4798      	blx	r3
 803e682:	4603      	mov	r3, r0
 803e684:	2b00      	cmp	r3, #0
 803e686:	d001      	beq.n	803e68c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 803e688:	2303      	movs	r3, #3
 803e68a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803e68c:	2340      	movs	r3, #64	; 0x40
 803e68e:	2200      	movs	r2, #0
 803e690:	2100      	movs	r1, #0
 803e692:	6878      	ldr	r0, [r7, #4]
 803e694:	f001 fc05 	bl	803fea2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 803e698:	687b      	ldr	r3, [r7, #4]
 803e69a:	2201      	movs	r2, #1
 803e69c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 803e6a0:	687b      	ldr	r3, [r7, #4]
 803e6a2:	2240      	movs	r2, #64	; 0x40
 803e6a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803e6a8:	2340      	movs	r3, #64	; 0x40
 803e6aa:	2200      	movs	r2, #0
 803e6ac:	2180      	movs	r1, #128	; 0x80
 803e6ae:	6878      	ldr	r0, [r7, #4]
 803e6b0:	f001 fbf7 	bl	803fea2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 803e6b4:	687b      	ldr	r3, [r7, #4]
 803e6b6:	2201      	movs	r2, #1
 803e6b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 803e6ba:	687b      	ldr	r3, [r7, #4]
 803e6bc:	2240      	movs	r2, #64	; 0x40
 803e6be:	621a      	str	r2, [r3, #32]

  return ret;
 803e6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 803e6c2:	4618      	mov	r0, r3
 803e6c4:	3710      	adds	r7, #16
 803e6c6:	46bd      	mov	sp, r7
 803e6c8:	bd80      	pop	{r7, pc}

0803e6ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 803e6ca:	b480      	push	{r7}
 803e6cc:	b083      	sub	sp, #12
 803e6ce:	af00      	add	r7, sp, #0
 803e6d0:	6078      	str	r0, [r7, #4]
 803e6d2:	460b      	mov	r3, r1
 803e6d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 803e6d6:	687b      	ldr	r3, [r7, #4]
 803e6d8:	78fa      	ldrb	r2, [r7, #3]
 803e6da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 803e6dc:	2300      	movs	r3, #0
}
 803e6de:	4618      	mov	r0, r3
 803e6e0:	370c      	adds	r7, #12
 803e6e2:	46bd      	mov	sp, r7
 803e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e6e8:	4770      	bx	lr

0803e6ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 803e6ea:	b480      	push	{r7}
 803e6ec:	b083      	sub	sp, #12
 803e6ee:	af00      	add	r7, sp, #0
 803e6f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 803e6f2:	687b      	ldr	r3, [r7, #4]
 803e6f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e6f8:	b2da      	uxtb	r2, r3
 803e6fa:	687b      	ldr	r3, [r7, #4]
 803e6fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 803e700:	687b      	ldr	r3, [r7, #4]
 803e702:	2204      	movs	r2, #4
 803e704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 803e708:	2300      	movs	r3, #0
}
 803e70a:	4618      	mov	r0, r3
 803e70c:	370c      	adds	r7, #12
 803e70e:	46bd      	mov	sp, r7
 803e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e714:	4770      	bx	lr

0803e716 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 803e716:	b480      	push	{r7}
 803e718:	b083      	sub	sp, #12
 803e71a:	af00      	add	r7, sp, #0
 803e71c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 803e71e:	687b      	ldr	r3, [r7, #4]
 803e720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e724:	b2db      	uxtb	r3, r3
 803e726:	2b04      	cmp	r3, #4
 803e728:	d106      	bne.n	803e738 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 803e72a:	687b      	ldr	r3, [r7, #4]
 803e72c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 803e730:	b2da      	uxtb	r2, r3
 803e732:	687b      	ldr	r3, [r7, #4]
 803e734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 803e738:	2300      	movs	r3, #0
}
 803e73a:	4618      	mov	r0, r3
 803e73c:	370c      	adds	r7, #12
 803e73e:	46bd      	mov	sp, r7
 803e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e744:	4770      	bx	lr

0803e746 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 803e746:	b580      	push	{r7, lr}
 803e748:	b082      	sub	sp, #8
 803e74a:	af00      	add	r7, sp, #0
 803e74c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803e74e:	687b      	ldr	r3, [r7, #4]
 803e750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e754:	b2db      	uxtb	r3, r3
 803e756:	2b03      	cmp	r3, #3
 803e758:	d110      	bne.n	803e77c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 803e75a:	687b      	ldr	r3, [r7, #4]
 803e75c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e760:	2b00      	cmp	r3, #0
 803e762:	d00b      	beq.n	803e77c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 803e764:	687b      	ldr	r3, [r7, #4]
 803e766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e76a:	69db      	ldr	r3, [r3, #28]
 803e76c:	2b00      	cmp	r3, #0
 803e76e:	d005      	beq.n	803e77c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 803e770:	687b      	ldr	r3, [r7, #4]
 803e772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e776:	69db      	ldr	r3, [r3, #28]
 803e778:	6878      	ldr	r0, [r7, #4]
 803e77a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 803e77c:	2300      	movs	r3, #0
}
 803e77e:	4618      	mov	r0, r3
 803e780:	3708      	adds	r7, #8
 803e782:	46bd      	mov	sp, r7
 803e784:	bd80      	pop	{r7, pc}

0803e786 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 803e786:	b580      	push	{r7, lr}
 803e788:	b082      	sub	sp, #8
 803e78a:	af00      	add	r7, sp, #0
 803e78c:	6078      	str	r0, [r7, #4]
 803e78e:	460b      	mov	r3, r1
 803e790:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803e792:	687b      	ldr	r3, [r7, #4]
 803e794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e798:	687b      	ldr	r3, [r7, #4]
 803e79a:	32ae      	adds	r2, #174	; 0xae
 803e79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e7a0:	2b00      	cmp	r3, #0
 803e7a2:	d101      	bne.n	803e7a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 803e7a4:	2303      	movs	r3, #3
 803e7a6:	e01c      	b.n	803e7e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803e7a8:	687b      	ldr	r3, [r7, #4]
 803e7aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e7ae:	b2db      	uxtb	r3, r3
 803e7b0:	2b03      	cmp	r3, #3
 803e7b2:	d115      	bne.n	803e7e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 803e7b4:	687b      	ldr	r3, [r7, #4]
 803e7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e7ba:	687b      	ldr	r3, [r7, #4]
 803e7bc:	32ae      	adds	r2, #174	; 0xae
 803e7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e7c2:	6a1b      	ldr	r3, [r3, #32]
 803e7c4:	2b00      	cmp	r3, #0
 803e7c6:	d00b      	beq.n	803e7e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 803e7c8:	687b      	ldr	r3, [r7, #4]
 803e7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e7ce:	687b      	ldr	r3, [r7, #4]
 803e7d0:	32ae      	adds	r2, #174	; 0xae
 803e7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e7d6:	6a1b      	ldr	r3, [r3, #32]
 803e7d8:	78fa      	ldrb	r2, [r7, #3]
 803e7da:	4611      	mov	r1, r2
 803e7dc:	6878      	ldr	r0, [r7, #4]
 803e7de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803e7e0:	2300      	movs	r3, #0
}
 803e7e2:	4618      	mov	r0, r3
 803e7e4:	3708      	adds	r7, #8
 803e7e6:	46bd      	mov	sp, r7
 803e7e8:	bd80      	pop	{r7, pc}

0803e7ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 803e7ea:	b580      	push	{r7, lr}
 803e7ec:	b082      	sub	sp, #8
 803e7ee:	af00      	add	r7, sp, #0
 803e7f0:	6078      	str	r0, [r7, #4]
 803e7f2:	460b      	mov	r3, r1
 803e7f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803e7f6:	687b      	ldr	r3, [r7, #4]
 803e7f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e7fc:	687b      	ldr	r3, [r7, #4]
 803e7fe:	32ae      	adds	r2, #174	; 0xae
 803e800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e804:	2b00      	cmp	r3, #0
 803e806:	d101      	bne.n	803e80c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 803e808:	2303      	movs	r3, #3
 803e80a:	e01c      	b.n	803e846 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803e80c:	687b      	ldr	r3, [r7, #4]
 803e80e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e812:	b2db      	uxtb	r3, r3
 803e814:	2b03      	cmp	r3, #3
 803e816:	d115      	bne.n	803e844 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 803e818:	687b      	ldr	r3, [r7, #4]
 803e81a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e81e:	687b      	ldr	r3, [r7, #4]
 803e820:	32ae      	adds	r2, #174	; 0xae
 803e822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803e828:	2b00      	cmp	r3, #0
 803e82a:	d00b      	beq.n	803e844 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 803e82c:	687b      	ldr	r3, [r7, #4]
 803e82e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e832:	687b      	ldr	r3, [r7, #4]
 803e834:	32ae      	adds	r2, #174	; 0xae
 803e836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803e83c:	78fa      	ldrb	r2, [r7, #3]
 803e83e:	4611      	mov	r1, r2
 803e840:	6878      	ldr	r0, [r7, #4]
 803e842:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803e844:	2300      	movs	r3, #0
}
 803e846:	4618      	mov	r0, r3
 803e848:	3708      	adds	r7, #8
 803e84a:	46bd      	mov	sp, r7
 803e84c:	bd80      	pop	{r7, pc}

0803e84e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 803e84e:	b480      	push	{r7}
 803e850:	b083      	sub	sp, #12
 803e852:	af00      	add	r7, sp, #0
 803e854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803e856:	2300      	movs	r3, #0
}
 803e858:	4618      	mov	r0, r3
 803e85a:	370c      	adds	r7, #12
 803e85c:	46bd      	mov	sp, r7
 803e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e862:	4770      	bx	lr

0803e864 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 803e864:	b580      	push	{r7, lr}
 803e866:	b084      	sub	sp, #16
 803e868:	af00      	add	r7, sp, #0
 803e86a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 803e86c:	2300      	movs	r3, #0
 803e86e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803e870:	687b      	ldr	r3, [r7, #4]
 803e872:	2201      	movs	r2, #1
 803e874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803e878:	687b      	ldr	r3, [r7, #4]
 803e87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e87e:	2b00      	cmp	r3, #0
 803e880:	d00e      	beq.n	803e8a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 803e882:	687b      	ldr	r3, [r7, #4]
 803e884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e888:	685b      	ldr	r3, [r3, #4]
 803e88a:	687a      	ldr	r2, [r7, #4]
 803e88c:	6852      	ldr	r2, [r2, #4]
 803e88e:	b2d2      	uxtb	r2, r2
 803e890:	4611      	mov	r1, r2
 803e892:	6878      	ldr	r0, [r7, #4]
 803e894:	4798      	blx	r3
 803e896:	4603      	mov	r3, r0
 803e898:	2b00      	cmp	r3, #0
 803e89a:	d001      	beq.n	803e8a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 803e89c:	2303      	movs	r3, #3
 803e89e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803e8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 803e8a2:	4618      	mov	r0, r3
 803e8a4:	3710      	adds	r7, #16
 803e8a6:	46bd      	mov	sp, r7
 803e8a8:	bd80      	pop	{r7, pc}

0803e8aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803e8aa:	b480      	push	{r7}
 803e8ac:	b083      	sub	sp, #12
 803e8ae:	af00      	add	r7, sp, #0
 803e8b0:	6078      	str	r0, [r7, #4]
 803e8b2:	460b      	mov	r3, r1
 803e8b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803e8b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803e8b8:	4618      	mov	r0, r3
 803e8ba:	370c      	adds	r7, #12
 803e8bc:	46bd      	mov	sp, r7
 803e8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e8c2:	4770      	bx	lr

0803e8c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803e8c4:	b480      	push	{r7}
 803e8c6:	b083      	sub	sp, #12
 803e8c8:	af00      	add	r7, sp, #0
 803e8ca:	6078      	str	r0, [r7, #4]
 803e8cc:	460b      	mov	r3, r1
 803e8ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803e8d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803e8d2:	4618      	mov	r0, r3
 803e8d4:	370c      	adds	r7, #12
 803e8d6:	46bd      	mov	sp, r7
 803e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e8dc:	4770      	bx	lr

0803e8de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 803e8de:	b580      	push	{r7, lr}
 803e8e0:	b086      	sub	sp, #24
 803e8e2:	af00      	add	r7, sp, #0
 803e8e4:	6078      	str	r0, [r7, #4]
 803e8e6:	460b      	mov	r3, r1
 803e8e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 803e8ea:	687b      	ldr	r3, [r7, #4]
 803e8ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 803e8ee:	687b      	ldr	r3, [r7, #4]
 803e8f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 803e8f2:	2300      	movs	r3, #0
 803e8f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 803e8f6:	68fb      	ldr	r3, [r7, #12]
 803e8f8:	885b      	ldrh	r3, [r3, #2]
 803e8fa:	b29a      	uxth	r2, r3
 803e8fc:	68fb      	ldr	r3, [r7, #12]
 803e8fe:	781b      	ldrb	r3, [r3, #0]
 803e900:	b29b      	uxth	r3, r3
 803e902:	429a      	cmp	r2, r3
 803e904:	d920      	bls.n	803e948 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 803e906:	68fb      	ldr	r3, [r7, #12]
 803e908:	781b      	ldrb	r3, [r3, #0]
 803e90a:	b29b      	uxth	r3, r3
 803e90c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 803e90e:	e013      	b.n	803e938 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 803e910:	f107 030a 	add.w	r3, r7, #10
 803e914:	4619      	mov	r1, r3
 803e916:	6978      	ldr	r0, [r7, #20]
 803e918:	f000 f81b 	bl	803e952 <USBD_GetNextDesc>
 803e91c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 803e91e:	697b      	ldr	r3, [r7, #20]
 803e920:	785b      	ldrb	r3, [r3, #1]
 803e922:	2b05      	cmp	r3, #5
 803e924:	d108      	bne.n	803e938 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 803e926:	697b      	ldr	r3, [r7, #20]
 803e928:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 803e92a:	693b      	ldr	r3, [r7, #16]
 803e92c:	789b      	ldrb	r3, [r3, #2]
 803e92e:	78fa      	ldrb	r2, [r7, #3]
 803e930:	429a      	cmp	r2, r3
 803e932:	d008      	beq.n	803e946 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 803e934:	2300      	movs	r3, #0
 803e936:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 803e938:	68fb      	ldr	r3, [r7, #12]
 803e93a:	885b      	ldrh	r3, [r3, #2]
 803e93c:	b29a      	uxth	r2, r3
 803e93e:	897b      	ldrh	r3, [r7, #10]
 803e940:	429a      	cmp	r2, r3
 803e942:	d8e5      	bhi.n	803e910 <USBD_GetEpDesc+0x32>
 803e944:	e000      	b.n	803e948 <USBD_GetEpDesc+0x6a>
          break;
 803e946:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 803e948:	693b      	ldr	r3, [r7, #16]
}
 803e94a:	4618      	mov	r0, r3
 803e94c:	3718      	adds	r7, #24
 803e94e:	46bd      	mov	sp, r7
 803e950:	bd80      	pop	{r7, pc}

0803e952 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 803e952:	b480      	push	{r7}
 803e954:	b085      	sub	sp, #20
 803e956:	af00      	add	r7, sp, #0
 803e958:	6078      	str	r0, [r7, #4]
 803e95a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 803e95c:	687b      	ldr	r3, [r7, #4]
 803e95e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 803e960:	683b      	ldr	r3, [r7, #0]
 803e962:	881a      	ldrh	r2, [r3, #0]
 803e964:	68fb      	ldr	r3, [r7, #12]
 803e966:	781b      	ldrb	r3, [r3, #0]
 803e968:	b29b      	uxth	r3, r3
 803e96a:	4413      	add	r3, r2
 803e96c:	b29a      	uxth	r2, r3
 803e96e:	683b      	ldr	r3, [r7, #0]
 803e970:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 803e972:	68fb      	ldr	r3, [r7, #12]
 803e974:	781b      	ldrb	r3, [r3, #0]
 803e976:	461a      	mov	r2, r3
 803e978:	687b      	ldr	r3, [r7, #4]
 803e97a:	4413      	add	r3, r2
 803e97c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 803e97e:	68fb      	ldr	r3, [r7, #12]
}
 803e980:	4618      	mov	r0, r3
 803e982:	3714      	adds	r7, #20
 803e984:	46bd      	mov	sp, r7
 803e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e98a:	4770      	bx	lr

0803e98c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 803e98c:	b480      	push	{r7}
 803e98e:	b087      	sub	sp, #28
 803e990:	af00      	add	r7, sp, #0
 803e992:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 803e994:	687b      	ldr	r3, [r7, #4]
 803e996:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 803e998:	697b      	ldr	r3, [r7, #20]
 803e99a:	781b      	ldrb	r3, [r3, #0]
 803e99c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 803e99e:	697b      	ldr	r3, [r7, #20]
 803e9a0:	3301      	adds	r3, #1
 803e9a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 803e9a4:	697b      	ldr	r3, [r7, #20]
 803e9a6:	781b      	ldrb	r3, [r3, #0]
 803e9a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 803e9aa:	8a3b      	ldrh	r3, [r7, #16]
 803e9ac:	021b      	lsls	r3, r3, #8
 803e9ae:	b21a      	sxth	r2, r3
 803e9b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803e9b4:	4313      	orrs	r3, r2
 803e9b6:	b21b      	sxth	r3, r3
 803e9b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 803e9ba:	89fb      	ldrh	r3, [r7, #14]
}
 803e9bc:	4618      	mov	r0, r3
 803e9be:	371c      	adds	r7, #28
 803e9c0:	46bd      	mov	sp, r7
 803e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e9c6:	4770      	bx	lr

0803e9c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e9c8:	b580      	push	{r7, lr}
 803e9ca:	b084      	sub	sp, #16
 803e9cc:	af00      	add	r7, sp, #0
 803e9ce:	6078      	str	r0, [r7, #4]
 803e9d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803e9d2:	2300      	movs	r3, #0
 803e9d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803e9d6:	683b      	ldr	r3, [r7, #0]
 803e9d8:	781b      	ldrb	r3, [r3, #0]
 803e9da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803e9de:	2b40      	cmp	r3, #64	; 0x40
 803e9e0:	d005      	beq.n	803e9ee <USBD_StdDevReq+0x26>
 803e9e2:	2b40      	cmp	r3, #64	; 0x40
 803e9e4:	d857      	bhi.n	803ea96 <USBD_StdDevReq+0xce>
 803e9e6:	2b00      	cmp	r3, #0
 803e9e8:	d00f      	beq.n	803ea0a <USBD_StdDevReq+0x42>
 803e9ea:	2b20      	cmp	r3, #32
 803e9ec:	d153      	bne.n	803ea96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 803e9ee:	687b      	ldr	r3, [r7, #4]
 803e9f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803e9f4:	687b      	ldr	r3, [r7, #4]
 803e9f6:	32ae      	adds	r2, #174	; 0xae
 803e9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803e9fc:	689b      	ldr	r3, [r3, #8]
 803e9fe:	6839      	ldr	r1, [r7, #0]
 803ea00:	6878      	ldr	r0, [r7, #4]
 803ea02:	4798      	blx	r3
 803ea04:	4603      	mov	r3, r0
 803ea06:	73fb      	strb	r3, [r7, #15]
      break;
 803ea08:	e04a      	b.n	803eaa0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803ea0a:	683b      	ldr	r3, [r7, #0]
 803ea0c:	785b      	ldrb	r3, [r3, #1]
 803ea0e:	2b09      	cmp	r3, #9
 803ea10:	d83b      	bhi.n	803ea8a <USBD_StdDevReq+0xc2>
 803ea12:	a201      	add	r2, pc, #4	; (adr r2, 803ea18 <USBD_StdDevReq+0x50>)
 803ea14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803ea18:	0803ea6d 	.word	0x0803ea6d
 803ea1c:	0803ea81 	.word	0x0803ea81
 803ea20:	0803ea8b 	.word	0x0803ea8b
 803ea24:	0803ea77 	.word	0x0803ea77
 803ea28:	0803ea8b 	.word	0x0803ea8b
 803ea2c:	0803ea4b 	.word	0x0803ea4b
 803ea30:	0803ea41 	.word	0x0803ea41
 803ea34:	0803ea8b 	.word	0x0803ea8b
 803ea38:	0803ea63 	.word	0x0803ea63
 803ea3c:	0803ea55 	.word	0x0803ea55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 803ea40:	6839      	ldr	r1, [r7, #0]
 803ea42:	6878      	ldr	r0, [r7, #4]
 803ea44:	f000 fa3c 	bl	803eec0 <USBD_GetDescriptor>
          break;
 803ea48:	e024      	b.n	803ea94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 803ea4a:	6839      	ldr	r1, [r7, #0]
 803ea4c:	6878      	ldr	r0, [r7, #4]
 803ea4e:	f000 fba1 	bl	803f194 <USBD_SetAddress>
          break;
 803ea52:	e01f      	b.n	803ea94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 803ea54:	6839      	ldr	r1, [r7, #0]
 803ea56:	6878      	ldr	r0, [r7, #4]
 803ea58:	f000 fbe0 	bl	803f21c <USBD_SetConfig>
 803ea5c:	4603      	mov	r3, r0
 803ea5e:	73fb      	strb	r3, [r7, #15]
          break;
 803ea60:	e018      	b.n	803ea94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 803ea62:	6839      	ldr	r1, [r7, #0]
 803ea64:	6878      	ldr	r0, [r7, #4]
 803ea66:	f000 fc83 	bl	803f370 <USBD_GetConfig>
          break;
 803ea6a:	e013      	b.n	803ea94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 803ea6c:	6839      	ldr	r1, [r7, #0]
 803ea6e:	6878      	ldr	r0, [r7, #4]
 803ea70:	f000 fcb4 	bl	803f3dc <USBD_GetStatus>
          break;
 803ea74:	e00e      	b.n	803ea94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 803ea76:	6839      	ldr	r1, [r7, #0]
 803ea78:	6878      	ldr	r0, [r7, #4]
 803ea7a:	f000 fce3 	bl	803f444 <USBD_SetFeature>
          break;
 803ea7e:	e009      	b.n	803ea94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 803ea80:	6839      	ldr	r1, [r7, #0]
 803ea82:	6878      	ldr	r0, [r7, #4]
 803ea84:	f000 fd07 	bl	803f496 <USBD_ClrFeature>
          break;
 803ea88:	e004      	b.n	803ea94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 803ea8a:	6839      	ldr	r1, [r7, #0]
 803ea8c:	6878      	ldr	r0, [r7, #4]
 803ea8e:	f000 fd5e 	bl	803f54e <USBD_CtlError>
          break;
 803ea92:	bf00      	nop
      }
      break;
 803ea94:	e004      	b.n	803eaa0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 803ea96:	6839      	ldr	r1, [r7, #0]
 803ea98:	6878      	ldr	r0, [r7, #4]
 803ea9a:	f000 fd58 	bl	803f54e <USBD_CtlError>
      break;
 803ea9e:	bf00      	nop
  }

  return ret;
 803eaa0:	7bfb      	ldrb	r3, [r7, #15]
}
 803eaa2:	4618      	mov	r0, r3
 803eaa4:	3710      	adds	r7, #16
 803eaa6:	46bd      	mov	sp, r7
 803eaa8:	bd80      	pop	{r7, pc}
 803eaaa:	bf00      	nop

0803eaac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803eaac:	b580      	push	{r7, lr}
 803eaae:	b084      	sub	sp, #16
 803eab0:	af00      	add	r7, sp, #0
 803eab2:	6078      	str	r0, [r7, #4]
 803eab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803eab6:	2300      	movs	r3, #0
 803eab8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803eaba:	683b      	ldr	r3, [r7, #0]
 803eabc:	781b      	ldrb	r3, [r3, #0]
 803eabe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803eac2:	2b40      	cmp	r3, #64	; 0x40
 803eac4:	d005      	beq.n	803ead2 <USBD_StdItfReq+0x26>
 803eac6:	2b40      	cmp	r3, #64	; 0x40
 803eac8:	d852      	bhi.n	803eb70 <USBD_StdItfReq+0xc4>
 803eaca:	2b00      	cmp	r3, #0
 803eacc:	d001      	beq.n	803ead2 <USBD_StdItfReq+0x26>
 803eace:	2b20      	cmp	r3, #32
 803ead0:	d14e      	bne.n	803eb70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 803ead2:	687b      	ldr	r3, [r7, #4]
 803ead4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ead8:	b2db      	uxtb	r3, r3
 803eada:	3b01      	subs	r3, #1
 803eadc:	2b02      	cmp	r3, #2
 803eade:	d840      	bhi.n	803eb62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 803eae0:	683b      	ldr	r3, [r7, #0]
 803eae2:	889b      	ldrh	r3, [r3, #4]
 803eae4:	b2db      	uxtb	r3, r3
 803eae6:	2b01      	cmp	r3, #1
 803eae8:	d836      	bhi.n	803eb58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 803eaea:	683b      	ldr	r3, [r7, #0]
 803eaec:	889b      	ldrh	r3, [r3, #4]
 803eaee:	b2db      	uxtb	r3, r3
 803eaf0:	4619      	mov	r1, r3
 803eaf2:	6878      	ldr	r0, [r7, #4]
 803eaf4:	f7ff fed9 	bl	803e8aa <USBD_CoreFindIF>
 803eaf8:	4603      	mov	r3, r0
 803eafa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803eafc:	7bbb      	ldrb	r3, [r7, #14]
 803eafe:	2bff      	cmp	r3, #255	; 0xff
 803eb00:	d01d      	beq.n	803eb3e <USBD_StdItfReq+0x92>
 803eb02:	7bbb      	ldrb	r3, [r7, #14]
 803eb04:	2b00      	cmp	r3, #0
 803eb06:	d11a      	bne.n	803eb3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 803eb08:	7bba      	ldrb	r2, [r7, #14]
 803eb0a:	687b      	ldr	r3, [r7, #4]
 803eb0c:	32ae      	adds	r2, #174	; 0xae
 803eb0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803eb12:	689b      	ldr	r3, [r3, #8]
 803eb14:	2b00      	cmp	r3, #0
 803eb16:	d00f      	beq.n	803eb38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 803eb18:	7bba      	ldrb	r2, [r7, #14]
 803eb1a:	687b      	ldr	r3, [r7, #4]
 803eb1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803eb20:	7bba      	ldrb	r2, [r7, #14]
 803eb22:	687b      	ldr	r3, [r7, #4]
 803eb24:	32ae      	adds	r2, #174	; 0xae
 803eb26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803eb2a:	689b      	ldr	r3, [r3, #8]
 803eb2c:	6839      	ldr	r1, [r7, #0]
 803eb2e:	6878      	ldr	r0, [r7, #4]
 803eb30:	4798      	blx	r3
 803eb32:	4603      	mov	r3, r0
 803eb34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803eb36:	e004      	b.n	803eb42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 803eb38:	2303      	movs	r3, #3
 803eb3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803eb3c:	e001      	b.n	803eb42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 803eb3e:	2303      	movs	r3, #3
 803eb40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 803eb42:	683b      	ldr	r3, [r7, #0]
 803eb44:	88db      	ldrh	r3, [r3, #6]
 803eb46:	2b00      	cmp	r3, #0
 803eb48:	d110      	bne.n	803eb6c <USBD_StdItfReq+0xc0>
 803eb4a:	7bfb      	ldrb	r3, [r7, #15]
 803eb4c:	2b00      	cmp	r3, #0
 803eb4e:	d10d      	bne.n	803eb6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 803eb50:	6878      	ldr	r0, [r7, #4]
 803eb52:	f000 fdc7 	bl	803f6e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 803eb56:	e009      	b.n	803eb6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 803eb58:	6839      	ldr	r1, [r7, #0]
 803eb5a:	6878      	ldr	r0, [r7, #4]
 803eb5c:	f000 fcf7 	bl	803f54e <USBD_CtlError>
          break;
 803eb60:	e004      	b.n	803eb6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 803eb62:	6839      	ldr	r1, [r7, #0]
 803eb64:	6878      	ldr	r0, [r7, #4]
 803eb66:	f000 fcf2 	bl	803f54e <USBD_CtlError>
          break;
 803eb6a:	e000      	b.n	803eb6e <USBD_StdItfReq+0xc2>
          break;
 803eb6c:	bf00      	nop
      }
      break;
 803eb6e:	e004      	b.n	803eb7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 803eb70:	6839      	ldr	r1, [r7, #0]
 803eb72:	6878      	ldr	r0, [r7, #4]
 803eb74:	f000 fceb 	bl	803f54e <USBD_CtlError>
      break;
 803eb78:	bf00      	nop
  }

  return ret;
 803eb7a:	7bfb      	ldrb	r3, [r7, #15]
}
 803eb7c:	4618      	mov	r0, r3
 803eb7e:	3710      	adds	r7, #16
 803eb80:	46bd      	mov	sp, r7
 803eb82:	bd80      	pop	{r7, pc}

0803eb84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803eb84:	b580      	push	{r7, lr}
 803eb86:	b084      	sub	sp, #16
 803eb88:	af00      	add	r7, sp, #0
 803eb8a:	6078      	str	r0, [r7, #4]
 803eb8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 803eb8e:	2300      	movs	r3, #0
 803eb90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 803eb92:	683b      	ldr	r3, [r7, #0]
 803eb94:	889b      	ldrh	r3, [r3, #4]
 803eb96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803eb98:	683b      	ldr	r3, [r7, #0]
 803eb9a:	781b      	ldrb	r3, [r3, #0]
 803eb9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803eba0:	2b40      	cmp	r3, #64	; 0x40
 803eba2:	d007      	beq.n	803ebb4 <USBD_StdEPReq+0x30>
 803eba4:	2b40      	cmp	r3, #64	; 0x40
 803eba6:	f200 817f 	bhi.w	803eea8 <USBD_StdEPReq+0x324>
 803ebaa:	2b00      	cmp	r3, #0
 803ebac:	d02a      	beq.n	803ec04 <USBD_StdEPReq+0x80>
 803ebae:	2b20      	cmp	r3, #32
 803ebb0:	f040 817a 	bne.w	803eea8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 803ebb4:	7bbb      	ldrb	r3, [r7, #14]
 803ebb6:	4619      	mov	r1, r3
 803ebb8:	6878      	ldr	r0, [r7, #4]
 803ebba:	f7ff fe83 	bl	803e8c4 <USBD_CoreFindEP>
 803ebbe:	4603      	mov	r3, r0
 803ebc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803ebc2:	7b7b      	ldrb	r3, [r7, #13]
 803ebc4:	2bff      	cmp	r3, #255	; 0xff
 803ebc6:	f000 8174 	beq.w	803eeb2 <USBD_StdEPReq+0x32e>
 803ebca:	7b7b      	ldrb	r3, [r7, #13]
 803ebcc:	2b00      	cmp	r3, #0
 803ebce:	f040 8170 	bne.w	803eeb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 803ebd2:	7b7a      	ldrb	r2, [r7, #13]
 803ebd4:	687b      	ldr	r3, [r7, #4]
 803ebd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 803ebda:	7b7a      	ldrb	r2, [r7, #13]
 803ebdc:	687b      	ldr	r3, [r7, #4]
 803ebde:	32ae      	adds	r2, #174	; 0xae
 803ebe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ebe4:	689b      	ldr	r3, [r3, #8]
 803ebe6:	2b00      	cmp	r3, #0
 803ebe8:	f000 8163 	beq.w	803eeb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 803ebec:	7b7a      	ldrb	r2, [r7, #13]
 803ebee:	687b      	ldr	r3, [r7, #4]
 803ebf0:	32ae      	adds	r2, #174	; 0xae
 803ebf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ebf6:	689b      	ldr	r3, [r3, #8]
 803ebf8:	6839      	ldr	r1, [r7, #0]
 803ebfa:	6878      	ldr	r0, [r7, #4]
 803ebfc:	4798      	blx	r3
 803ebfe:	4603      	mov	r3, r0
 803ec00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 803ec02:	e156      	b.n	803eeb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803ec04:	683b      	ldr	r3, [r7, #0]
 803ec06:	785b      	ldrb	r3, [r3, #1]
 803ec08:	2b03      	cmp	r3, #3
 803ec0a:	d008      	beq.n	803ec1e <USBD_StdEPReq+0x9a>
 803ec0c:	2b03      	cmp	r3, #3
 803ec0e:	f300 8145 	bgt.w	803ee9c <USBD_StdEPReq+0x318>
 803ec12:	2b00      	cmp	r3, #0
 803ec14:	f000 809b 	beq.w	803ed4e <USBD_StdEPReq+0x1ca>
 803ec18:	2b01      	cmp	r3, #1
 803ec1a:	d03c      	beq.n	803ec96 <USBD_StdEPReq+0x112>
 803ec1c:	e13e      	b.n	803ee9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 803ec1e:	687b      	ldr	r3, [r7, #4]
 803ec20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ec24:	b2db      	uxtb	r3, r3
 803ec26:	2b02      	cmp	r3, #2
 803ec28:	d002      	beq.n	803ec30 <USBD_StdEPReq+0xac>
 803ec2a:	2b03      	cmp	r3, #3
 803ec2c:	d016      	beq.n	803ec5c <USBD_StdEPReq+0xd8>
 803ec2e:	e02c      	b.n	803ec8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803ec30:	7bbb      	ldrb	r3, [r7, #14]
 803ec32:	2b00      	cmp	r3, #0
 803ec34:	d00d      	beq.n	803ec52 <USBD_StdEPReq+0xce>
 803ec36:	7bbb      	ldrb	r3, [r7, #14]
 803ec38:	2b80      	cmp	r3, #128	; 0x80
 803ec3a:	d00a      	beq.n	803ec52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803ec3c:	7bbb      	ldrb	r3, [r7, #14]
 803ec3e:	4619      	mov	r1, r3
 803ec40:	6878      	ldr	r0, [r7, #4]
 803ec42:	f001 f973 	bl	803ff2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803ec46:	2180      	movs	r1, #128	; 0x80
 803ec48:	6878      	ldr	r0, [r7, #4]
 803ec4a:	f001 f96f 	bl	803ff2c <USBD_LL_StallEP>
 803ec4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803ec50:	e020      	b.n	803ec94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 803ec52:	6839      	ldr	r1, [r7, #0]
 803ec54:	6878      	ldr	r0, [r7, #4]
 803ec56:	f000 fc7a 	bl	803f54e <USBD_CtlError>
              break;
 803ec5a:	e01b      	b.n	803ec94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803ec5c:	683b      	ldr	r3, [r7, #0]
 803ec5e:	885b      	ldrh	r3, [r3, #2]
 803ec60:	2b00      	cmp	r3, #0
 803ec62:	d10e      	bne.n	803ec82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 803ec64:	7bbb      	ldrb	r3, [r7, #14]
 803ec66:	2b00      	cmp	r3, #0
 803ec68:	d00b      	beq.n	803ec82 <USBD_StdEPReq+0xfe>
 803ec6a:	7bbb      	ldrb	r3, [r7, #14]
 803ec6c:	2b80      	cmp	r3, #128	; 0x80
 803ec6e:	d008      	beq.n	803ec82 <USBD_StdEPReq+0xfe>
 803ec70:	683b      	ldr	r3, [r7, #0]
 803ec72:	88db      	ldrh	r3, [r3, #6]
 803ec74:	2b00      	cmp	r3, #0
 803ec76:	d104      	bne.n	803ec82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 803ec78:	7bbb      	ldrb	r3, [r7, #14]
 803ec7a:	4619      	mov	r1, r3
 803ec7c:	6878      	ldr	r0, [r7, #4]
 803ec7e:	f001 f955 	bl	803ff2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 803ec82:	6878      	ldr	r0, [r7, #4]
 803ec84:	f000 fd2e 	bl	803f6e4 <USBD_CtlSendStatus>

              break;
 803ec88:	e004      	b.n	803ec94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 803ec8a:	6839      	ldr	r1, [r7, #0]
 803ec8c:	6878      	ldr	r0, [r7, #4]
 803ec8e:	f000 fc5e 	bl	803f54e <USBD_CtlError>
              break;
 803ec92:	bf00      	nop
          }
          break;
 803ec94:	e107      	b.n	803eea6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 803ec96:	687b      	ldr	r3, [r7, #4]
 803ec98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ec9c:	b2db      	uxtb	r3, r3
 803ec9e:	2b02      	cmp	r3, #2
 803eca0:	d002      	beq.n	803eca8 <USBD_StdEPReq+0x124>
 803eca2:	2b03      	cmp	r3, #3
 803eca4:	d016      	beq.n	803ecd4 <USBD_StdEPReq+0x150>
 803eca6:	e04b      	b.n	803ed40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803eca8:	7bbb      	ldrb	r3, [r7, #14]
 803ecaa:	2b00      	cmp	r3, #0
 803ecac:	d00d      	beq.n	803ecca <USBD_StdEPReq+0x146>
 803ecae:	7bbb      	ldrb	r3, [r7, #14]
 803ecb0:	2b80      	cmp	r3, #128	; 0x80
 803ecb2:	d00a      	beq.n	803ecca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803ecb4:	7bbb      	ldrb	r3, [r7, #14]
 803ecb6:	4619      	mov	r1, r3
 803ecb8:	6878      	ldr	r0, [r7, #4]
 803ecba:	f001 f937 	bl	803ff2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803ecbe:	2180      	movs	r1, #128	; 0x80
 803ecc0:	6878      	ldr	r0, [r7, #4]
 803ecc2:	f001 f933 	bl	803ff2c <USBD_LL_StallEP>
 803ecc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803ecc8:	e040      	b.n	803ed4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 803ecca:	6839      	ldr	r1, [r7, #0]
 803eccc:	6878      	ldr	r0, [r7, #4]
 803ecce:	f000 fc3e 	bl	803f54e <USBD_CtlError>
              break;
 803ecd2:	e03b      	b.n	803ed4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803ecd4:	683b      	ldr	r3, [r7, #0]
 803ecd6:	885b      	ldrh	r3, [r3, #2]
 803ecd8:	2b00      	cmp	r3, #0
 803ecda:	d136      	bne.n	803ed4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 803ecdc:	7bbb      	ldrb	r3, [r7, #14]
 803ecde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803ece2:	2b00      	cmp	r3, #0
 803ece4:	d004      	beq.n	803ecf0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 803ece6:	7bbb      	ldrb	r3, [r7, #14]
 803ece8:	4619      	mov	r1, r3
 803ecea:	6878      	ldr	r0, [r7, #4]
 803ecec:	f001 f93d 	bl	803ff6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 803ecf0:	6878      	ldr	r0, [r7, #4]
 803ecf2:	f000 fcf7 	bl	803f6e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 803ecf6:	7bbb      	ldrb	r3, [r7, #14]
 803ecf8:	4619      	mov	r1, r3
 803ecfa:	6878      	ldr	r0, [r7, #4]
 803ecfc:	f7ff fde2 	bl	803e8c4 <USBD_CoreFindEP>
 803ed00:	4603      	mov	r3, r0
 803ed02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803ed04:	7b7b      	ldrb	r3, [r7, #13]
 803ed06:	2bff      	cmp	r3, #255	; 0xff
 803ed08:	d01f      	beq.n	803ed4a <USBD_StdEPReq+0x1c6>
 803ed0a:	7b7b      	ldrb	r3, [r7, #13]
 803ed0c:	2b00      	cmp	r3, #0
 803ed0e:	d11c      	bne.n	803ed4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 803ed10:	7b7a      	ldrb	r2, [r7, #13]
 803ed12:	687b      	ldr	r3, [r7, #4]
 803ed14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 803ed18:	7b7a      	ldrb	r2, [r7, #13]
 803ed1a:	687b      	ldr	r3, [r7, #4]
 803ed1c:	32ae      	adds	r2, #174	; 0xae
 803ed1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ed22:	689b      	ldr	r3, [r3, #8]
 803ed24:	2b00      	cmp	r3, #0
 803ed26:	d010      	beq.n	803ed4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803ed28:	7b7a      	ldrb	r2, [r7, #13]
 803ed2a:	687b      	ldr	r3, [r7, #4]
 803ed2c:	32ae      	adds	r2, #174	; 0xae
 803ed2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ed32:	689b      	ldr	r3, [r3, #8]
 803ed34:	6839      	ldr	r1, [r7, #0]
 803ed36:	6878      	ldr	r0, [r7, #4]
 803ed38:	4798      	blx	r3
 803ed3a:	4603      	mov	r3, r0
 803ed3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 803ed3e:	e004      	b.n	803ed4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 803ed40:	6839      	ldr	r1, [r7, #0]
 803ed42:	6878      	ldr	r0, [r7, #4]
 803ed44:	f000 fc03 	bl	803f54e <USBD_CtlError>
              break;
 803ed48:	e000      	b.n	803ed4c <USBD_StdEPReq+0x1c8>
              break;
 803ed4a:	bf00      	nop
          }
          break;
 803ed4c:	e0ab      	b.n	803eea6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 803ed4e:	687b      	ldr	r3, [r7, #4]
 803ed50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ed54:	b2db      	uxtb	r3, r3
 803ed56:	2b02      	cmp	r3, #2
 803ed58:	d002      	beq.n	803ed60 <USBD_StdEPReq+0x1dc>
 803ed5a:	2b03      	cmp	r3, #3
 803ed5c:	d032      	beq.n	803edc4 <USBD_StdEPReq+0x240>
 803ed5e:	e097      	b.n	803ee90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803ed60:	7bbb      	ldrb	r3, [r7, #14]
 803ed62:	2b00      	cmp	r3, #0
 803ed64:	d007      	beq.n	803ed76 <USBD_StdEPReq+0x1f2>
 803ed66:	7bbb      	ldrb	r3, [r7, #14]
 803ed68:	2b80      	cmp	r3, #128	; 0x80
 803ed6a:	d004      	beq.n	803ed76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 803ed6c:	6839      	ldr	r1, [r7, #0]
 803ed6e:	6878      	ldr	r0, [r7, #4]
 803ed70:	f000 fbed 	bl	803f54e <USBD_CtlError>
                break;
 803ed74:	e091      	b.n	803ee9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803ed76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803ed7a:	2b00      	cmp	r3, #0
 803ed7c:	da0b      	bge.n	803ed96 <USBD_StdEPReq+0x212>
 803ed7e:	7bbb      	ldrb	r3, [r7, #14]
 803ed80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803ed84:	4613      	mov	r3, r2
 803ed86:	009b      	lsls	r3, r3, #2
 803ed88:	4413      	add	r3, r2
 803ed8a:	009b      	lsls	r3, r3, #2
 803ed8c:	3310      	adds	r3, #16
 803ed8e:	687a      	ldr	r2, [r7, #4]
 803ed90:	4413      	add	r3, r2
 803ed92:	3304      	adds	r3, #4
 803ed94:	e00b      	b.n	803edae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803ed96:	7bbb      	ldrb	r3, [r7, #14]
 803ed98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803ed9c:	4613      	mov	r3, r2
 803ed9e:	009b      	lsls	r3, r3, #2
 803eda0:	4413      	add	r3, r2
 803eda2:	009b      	lsls	r3, r3, #2
 803eda4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803eda8:	687a      	ldr	r2, [r7, #4]
 803edaa:	4413      	add	r3, r2
 803edac:	3304      	adds	r3, #4
 803edae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 803edb0:	68bb      	ldr	r3, [r7, #8]
 803edb2:	2200      	movs	r2, #0
 803edb4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803edb6:	68bb      	ldr	r3, [r7, #8]
 803edb8:	2202      	movs	r2, #2
 803edba:	4619      	mov	r1, r3
 803edbc:	6878      	ldr	r0, [r7, #4]
 803edbe:	f000 fc37 	bl	803f630 <USBD_CtlSendData>
              break;
 803edc2:	e06a      	b.n	803ee9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 803edc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803edc8:	2b00      	cmp	r3, #0
 803edca:	da11      	bge.n	803edf0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 803edcc:	7bbb      	ldrb	r3, [r7, #14]
 803edce:	f003 020f 	and.w	r2, r3, #15
 803edd2:	6879      	ldr	r1, [r7, #4]
 803edd4:	4613      	mov	r3, r2
 803edd6:	009b      	lsls	r3, r3, #2
 803edd8:	4413      	add	r3, r2
 803edda:	009b      	lsls	r3, r3, #2
 803eddc:	440b      	add	r3, r1
 803edde:	3324      	adds	r3, #36	; 0x24
 803ede0:	881b      	ldrh	r3, [r3, #0]
 803ede2:	2b00      	cmp	r3, #0
 803ede4:	d117      	bne.n	803ee16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803ede6:	6839      	ldr	r1, [r7, #0]
 803ede8:	6878      	ldr	r0, [r7, #4]
 803edea:	f000 fbb0 	bl	803f54e <USBD_CtlError>
                  break;
 803edee:	e054      	b.n	803ee9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 803edf0:	7bbb      	ldrb	r3, [r7, #14]
 803edf2:	f003 020f 	and.w	r2, r3, #15
 803edf6:	6879      	ldr	r1, [r7, #4]
 803edf8:	4613      	mov	r3, r2
 803edfa:	009b      	lsls	r3, r3, #2
 803edfc:	4413      	add	r3, r2
 803edfe:	009b      	lsls	r3, r3, #2
 803ee00:	440b      	add	r3, r1
 803ee02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803ee06:	881b      	ldrh	r3, [r3, #0]
 803ee08:	2b00      	cmp	r3, #0
 803ee0a:	d104      	bne.n	803ee16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803ee0c:	6839      	ldr	r1, [r7, #0]
 803ee0e:	6878      	ldr	r0, [r7, #4]
 803ee10:	f000 fb9d 	bl	803f54e <USBD_CtlError>
                  break;
 803ee14:	e041      	b.n	803ee9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803ee16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803ee1a:	2b00      	cmp	r3, #0
 803ee1c:	da0b      	bge.n	803ee36 <USBD_StdEPReq+0x2b2>
 803ee1e:	7bbb      	ldrb	r3, [r7, #14]
 803ee20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803ee24:	4613      	mov	r3, r2
 803ee26:	009b      	lsls	r3, r3, #2
 803ee28:	4413      	add	r3, r2
 803ee2a:	009b      	lsls	r3, r3, #2
 803ee2c:	3310      	adds	r3, #16
 803ee2e:	687a      	ldr	r2, [r7, #4]
 803ee30:	4413      	add	r3, r2
 803ee32:	3304      	adds	r3, #4
 803ee34:	e00b      	b.n	803ee4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803ee36:	7bbb      	ldrb	r3, [r7, #14]
 803ee38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803ee3c:	4613      	mov	r3, r2
 803ee3e:	009b      	lsls	r3, r3, #2
 803ee40:	4413      	add	r3, r2
 803ee42:	009b      	lsls	r3, r3, #2
 803ee44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803ee48:	687a      	ldr	r2, [r7, #4]
 803ee4a:	4413      	add	r3, r2
 803ee4c:	3304      	adds	r3, #4
 803ee4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 803ee50:	7bbb      	ldrb	r3, [r7, #14]
 803ee52:	2b00      	cmp	r3, #0
 803ee54:	d002      	beq.n	803ee5c <USBD_StdEPReq+0x2d8>
 803ee56:	7bbb      	ldrb	r3, [r7, #14]
 803ee58:	2b80      	cmp	r3, #128	; 0x80
 803ee5a:	d103      	bne.n	803ee64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 803ee5c:	68bb      	ldr	r3, [r7, #8]
 803ee5e:	2200      	movs	r2, #0
 803ee60:	601a      	str	r2, [r3, #0]
 803ee62:	e00e      	b.n	803ee82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 803ee64:	7bbb      	ldrb	r3, [r7, #14]
 803ee66:	4619      	mov	r1, r3
 803ee68:	6878      	ldr	r0, [r7, #4]
 803ee6a:	f001 f89d 	bl	803ffa8 <USBD_LL_IsStallEP>
 803ee6e:	4603      	mov	r3, r0
 803ee70:	2b00      	cmp	r3, #0
 803ee72:	d003      	beq.n	803ee7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 803ee74:	68bb      	ldr	r3, [r7, #8]
 803ee76:	2201      	movs	r2, #1
 803ee78:	601a      	str	r2, [r3, #0]
 803ee7a:	e002      	b.n	803ee82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 803ee7c:	68bb      	ldr	r3, [r7, #8]
 803ee7e:	2200      	movs	r2, #0
 803ee80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803ee82:	68bb      	ldr	r3, [r7, #8]
 803ee84:	2202      	movs	r2, #2
 803ee86:	4619      	mov	r1, r3
 803ee88:	6878      	ldr	r0, [r7, #4]
 803ee8a:	f000 fbd1 	bl	803f630 <USBD_CtlSendData>
              break;
 803ee8e:	e004      	b.n	803ee9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 803ee90:	6839      	ldr	r1, [r7, #0]
 803ee92:	6878      	ldr	r0, [r7, #4]
 803ee94:	f000 fb5b 	bl	803f54e <USBD_CtlError>
              break;
 803ee98:	bf00      	nop
          }
          break;
 803ee9a:	e004      	b.n	803eea6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 803ee9c:	6839      	ldr	r1, [r7, #0]
 803ee9e:	6878      	ldr	r0, [r7, #4]
 803eea0:	f000 fb55 	bl	803f54e <USBD_CtlError>
          break;
 803eea4:	bf00      	nop
      }
      break;
 803eea6:	e005      	b.n	803eeb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 803eea8:	6839      	ldr	r1, [r7, #0]
 803eeaa:	6878      	ldr	r0, [r7, #4]
 803eeac:	f000 fb4f 	bl	803f54e <USBD_CtlError>
      break;
 803eeb0:	e000      	b.n	803eeb4 <USBD_StdEPReq+0x330>
      break;
 803eeb2:	bf00      	nop
  }

  return ret;
 803eeb4:	7bfb      	ldrb	r3, [r7, #15]
}
 803eeb6:	4618      	mov	r0, r3
 803eeb8:	3710      	adds	r7, #16
 803eeba:	46bd      	mov	sp, r7
 803eebc:	bd80      	pop	{r7, pc}
	...

0803eec0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803eec0:	b580      	push	{r7, lr}
 803eec2:	b084      	sub	sp, #16
 803eec4:	af00      	add	r7, sp, #0
 803eec6:	6078      	str	r0, [r7, #4]
 803eec8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803eeca:	2300      	movs	r3, #0
 803eecc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 803eece:	2300      	movs	r3, #0
 803eed0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 803eed2:	2300      	movs	r3, #0
 803eed4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 803eed6:	683b      	ldr	r3, [r7, #0]
 803eed8:	885b      	ldrh	r3, [r3, #2]
 803eeda:	0a1b      	lsrs	r3, r3, #8
 803eedc:	b29b      	uxth	r3, r3
 803eede:	3b01      	subs	r3, #1
 803eee0:	2b06      	cmp	r3, #6
 803eee2:	f200 8128 	bhi.w	803f136 <USBD_GetDescriptor+0x276>
 803eee6:	a201      	add	r2, pc, #4	; (adr r2, 803eeec <USBD_GetDescriptor+0x2c>)
 803eee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803eeec:	0803ef09 	.word	0x0803ef09
 803eef0:	0803ef21 	.word	0x0803ef21
 803eef4:	0803ef61 	.word	0x0803ef61
 803eef8:	0803f137 	.word	0x0803f137
 803eefc:	0803f137 	.word	0x0803f137
 803ef00:	0803f0d7 	.word	0x0803f0d7
 803ef04:	0803f103 	.word	0x0803f103
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 803ef08:	687b      	ldr	r3, [r7, #4]
 803ef0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ef0e:	681b      	ldr	r3, [r3, #0]
 803ef10:	687a      	ldr	r2, [r7, #4]
 803ef12:	7c12      	ldrb	r2, [r2, #16]
 803ef14:	f107 0108 	add.w	r1, r7, #8
 803ef18:	4610      	mov	r0, r2
 803ef1a:	4798      	blx	r3
 803ef1c:	60f8      	str	r0, [r7, #12]
      break;
 803ef1e:	e112      	b.n	803f146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803ef20:	687b      	ldr	r3, [r7, #4]
 803ef22:	7c1b      	ldrb	r3, [r3, #16]
 803ef24:	2b00      	cmp	r3, #0
 803ef26:	d10d      	bne.n	803ef44 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 803ef28:	687b      	ldr	r3, [r7, #4]
 803ef2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803ef2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803ef30:	f107 0208 	add.w	r2, r7, #8
 803ef34:	4610      	mov	r0, r2
 803ef36:	4798      	blx	r3
 803ef38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803ef3a:	68fb      	ldr	r3, [r7, #12]
 803ef3c:	3301      	adds	r3, #1
 803ef3e:	2202      	movs	r2, #2
 803ef40:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 803ef42:	e100      	b.n	803f146 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 803ef44:	687b      	ldr	r3, [r7, #4]
 803ef46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803ef4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803ef4c:	f107 0208 	add.w	r2, r7, #8
 803ef50:	4610      	mov	r0, r2
 803ef52:	4798      	blx	r3
 803ef54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803ef56:	68fb      	ldr	r3, [r7, #12]
 803ef58:	3301      	adds	r3, #1
 803ef5a:	2202      	movs	r2, #2
 803ef5c:	701a      	strb	r2, [r3, #0]
      break;
 803ef5e:	e0f2      	b.n	803f146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 803ef60:	683b      	ldr	r3, [r7, #0]
 803ef62:	885b      	ldrh	r3, [r3, #2]
 803ef64:	b2db      	uxtb	r3, r3
 803ef66:	2b05      	cmp	r3, #5
 803ef68:	f200 80ac 	bhi.w	803f0c4 <USBD_GetDescriptor+0x204>
 803ef6c:	a201      	add	r2, pc, #4	; (adr r2, 803ef74 <USBD_GetDescriptor+0xb4>)
 803ef6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803ef72:	bf00      	nop
 803ef74:	0803ef8d 	.word	0x0803ef8d
 803ef78:	0803efc1 	.word	0x0803efc1
 803ef7c:	0803eff5 	.word	0x0803eff5
 803ef80:	0803f029 	.word	0x0803f029
 803ef84:	0803f05d 	.word	0x0803f05d
 803ef88:	0803f091 	.word	0x0803f091
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 803ef8c:	687b      	ldr	r3, [r7, #4]
 803ef8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ef92:	685b      	ldr	r3, [r3, #4]
 803ef94:	2b00      	cmp	r3, #0
 803ef96:	d00b      	beq.n	803efb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 803ef98:	687b      	ldr	r3, [r7, #4]
 803ef9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ef9e:	685b      	ldr	r3, [r3, #4]
 803efa0:	687a      	ldr	r2, [r7, #4]
 803efa2:	7c12      	ldrb	r2, [r2, #16]
 803efa4:	f107 0108 	add.w	r1, r7, #8
 803efa8:	4610      	mov	r0, r2
 803efaa:	4798      	blx	r3
 803efac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803efae:	e091      	b.n	803f0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803efb0:	6839      	ldr	r1, [r7, #0]
 803efb2:	6878      	ldr	r0, [r7, #4]
 803efb4:	f000 facb 	bl	803f54e <USBD_CtlError>
            err++;
 803efb8:	7afb      	ldrb	r3, [r7, #11]
 803efba:	3301      	adds	r3, #1
 803efbc:	72fb      	strb	r3, [r7, #11]
          break;
 803efbe:	e089      	b.n	803f0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 803efc0:	687b      	ldr	r3, [r7, #4]
 803efc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803efc6:	689b      	ldr	r3, [r3, #8]
 803efc8:	2b00      	cmp	r3, #0
 803efca:	d00b      	beq.n	803efe4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 803efcc:	687b      	ldr	r3, [r7, #4]
 803efce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803efd2:	689b      	ldr	r3, [r3, #8]
 803efd4:	687a      	ldr	r2, [r7, #4]
 803efd6:	7c12      	ldrb	r2, [r2, #16]
 803efd8:	f107 0108 	add.w	r1, r7, #8
 803efdc:	4610      	mov	r0, r2
 803efde:	4798      	blx	r3
 803efe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803efe2:	e077      	b.n	803f0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803efe4:	6839      	ldr	r1, [r7, #0]
 803efe6:	6878      	ldr	r0, [r7, #4]
 803efe8:	f000 fab1 	bl	803f54e <USBD_CtlError>
            err++;
 803efec:	7afb      	ldrb	r3, [r7, #11]
 803efee:	3301      	adds	r3, #1
 803eff0:	72fb      	strb	r3, [r7, #11]
          break;
 803eff2:	e06f      	b.n	803f0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 803eff4:	687b      	ldr	r3, [r7, #4]
 803eff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803effa:	68db      	ldr	r3, [r3, #12]
 803effc:	2b00      	cmp	r3, #0
 803effe:	d00b      	beq.n	803f018 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 803f000:	687b      	ldr	r3, [r7, #4]
 803f002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803f006:	68db      	ldr	r3, [r3, #12]
 803f008:	687a      	ldr	r2, [r7, #4]
 803f00a:	7c12      	ldrb	r2, [r2, #16]
 803f00c:	f107 0108 	add.w	r1, r7, #8
 803f010:	4610      	mov	r0, r2
 803f012:	4798      	blx	r3
 803f014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803f016:	e05d      	b.n	803f0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803f018:	6839      	ldr	r1, [r7, #0]
 803f01a:	6878      	ldr	r0, [r7, #4]
 803f01c:	f000 fa97 	bl	803f54e <USBD_CtlError>
            err++;
 803f020:	7afb      	ldrb	r3, [r7, #11]
 803f022:	3301      	adds	r3, #1
 803f024:	72fb      	strb	r3, [r7, #11]
          break;
 803f026:	e055      	b.n	803f0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 803f028:	687b      	ldr	r3, [r7, #4]
 803f02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803f02e:	691b      	ldr	r3, [r3, #16]
 803f030:	2b00      	cmp	r3, #0
 803f032:	d00b      	beq.n	803f04c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 803f034:	687b      	ldr	r3, [r7, #4]
 803f036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803f03a:	691b      	ldr	r3, [r3, #16]
 803f03c:	687a      	ldr	r2, [r7, #4]
 803f03e:	7c12      	ldrb	r2, [r2, #16]
 803f040:	f107 0108 	add.w	r1, r7, #8
 803f044:	4610      	mov	r0, r2
 803f046:	4798      	blx	r3
 803f048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803f04a:	e043      	b.n	803f0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803f04c:	6839      	ldr	r1, [r7, #0]
 803f04e:	6878      	ldr	r0, [r7, #4]
 803f050:	f000 fa7d 	bl	803f54e <USBD_CtlError>
            err++;
 803f054:	7afb      	ldrb	r3, [r7, #11]
 803f056:	3301      	adds	r3, #1
 803f058:	72fb      	strb	r3, [r7, #11]
          break;
 803f05a:	e03b      	b.n	803f0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 803f05c:	687b      	ldr	r3, [r7, #4]
 803f05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803f062:	695b      	ldr	r3, [r3, #20]
 803f064:	2b00      	cmp	r3, #0
 803f066:	d00b      	beq.n	803f080 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 803f068:	687b      	ldr	r3, [r7, #4]
 803f06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803f06e:	695b      	ldr	r3, [r3, #20]
 803f070:	687a      	ldr	r2, [r7, #4]
 803f072:	7c12      	ldrb	r2, [r2, #16]
 803f074:	f107 0108 	add.w	r1, r7, #8
 803f078:	4610      	mov	r0, r2
 803f07a:	4798      	blx	r3
 803f07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803f07e:	e029      	b.n	803f0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803f080:	6839      	ldr	r1, [r7, #0]
 803f082:	6878      	ldr	r0, [r7, #4]
 803f084:	f000 fa63 	bl	803f54e <USBD_CtlError>
            err++;
 803f088:	7afb      	ldrb	r3, [r7, #11]
 803f08a:	3301      	adds	r3, #1
 803f08c:	72fb      	strb	r3, [r7, #11]
          break;
 803f08e:	e021      	b.n	803f0d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 803f090:	687b      	ldr	r3, [r7, #4]
 803f092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803f096:	699b      	ldr	r3, [r3, #24]
 803f098:	2b00      	cmp	r3, #0
 803f09a:	d00b      	beq.n	803f0b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 803f09c:	687b      	ldr	r3, [r7, #4]
 803f09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803f0a2:	699b      	ldr	r3, [r3, #24]
 803f0a4:	687a      	ldr	r2, [r7, #4]
 803f0a6:	7c12      	ldrb	r2, [r2, #16]
 803f0a8:	f107 0108 	add.w	r1, r7, #8
 803f0ac:	4610      	mov	r0, r2
 803f0ae:	4798      	blx	r3
 803f0b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803f0b2:	e00f      	b.n	803f0d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803f0b4:	6839      	ldr	r1, [r7, #0]
 803f0b6:	6878      	ldr	r0, [r7, #4]
 803f0b8:	f000 fa49 	bl	803f54e <USBD_CtlError>
            err++;
 803f0bc:	7afb      	ldrb	r3, [r7, #11]
 803f0be:	3301      	adds	r3, #1
 803f0c0:	72fb      	strb	r3, [r7, #11]
          break;
 803f0c2:	e007      	b.n	803f0d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 803f0c4:	6839      	ldr	r1, [r7, #0]
 803f0c6:	6878      	ldr	r0, [r7, #4]
 803f0c8:	f000 fa41 	bl	803f54e <USBD_CtlError>
          err++;
 803f0cc:	7afb      	ldrb	r3, [r7, #11]
 803f0ce:	3301      	adds	r3, #1
 803f0d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 803f0d2:	bf00      	nop
      }
      break;
 803f0d4:	e037      	b.n	803f146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803f0d6:	687b      	ldr	r3, [r7, #4]
 803f0d8:	7c1b      	ldrb	r3, [r3, #16]
 803f0da:	2b00      	cmp	r3, #0
 803f0dc:	d109      	bne.n	803f0f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 803f0de:	687b      	ldr	r3, [r7, #4]
 803f0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803f0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803f0e6:	f107 0208 	add.w	r2, r7, #8
 803f0ea:	4610      	mov	r0, r2
 803f0ec:	4798      	blx	r3
 803f0ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803f0f0:	e029      	b.n	803f146 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803f0f2:	6839      	ldr	r1, [r7, #0]
 803f0f4:	6878      	ldr	r0, [r7, #4]
 803f0f6:	f000 fa2a 	bl	803f54e <USBD_CtlError>
        err++;
 803f0fa:	7afb      	ldrb	r3, [r7, #11]
 803f0fc:	3301      	adds	r3, #1
 803f0fe:	72fb      	strb	r3, [r7, #11]
      break;
 803f100:	e021      	b.n	803f146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803f102:	687b      	ldr	r3, [r7, #4]
 803f104:	7c1b      	ldrb	r3, [r3, #16]
 803f106:	2b00      	cmp	r3, #0
 803f108:	d10d      	bne.n	803f126 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 803f10a:	687b      	ldr	r3, [r7, #4]
 803f10c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803f110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803f112:	f107 0208 	add.w	r2, r7, #8
 803f116:	4610      	mov	r0, r2
 803f118:	4798      	blx	r3
 803f11a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 803f11c:	68fb      	ldr	r3, [r7, #12]
 803f11e:	3301      	adds	r3, #1
 803f120:	2207      	movs	r2, #7
 803f122:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803f124:	e00f      	b.n	803f146 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803f126:	6839      	ldr	r1, [r7, #0]
 803f128:	6878      	ldr	r0, [r7, #4]
 803f12a:	f000 fa10 	bl	803f54e <USBD_CtlError>
        err++;
 803f12e:	7afb      	ldrb	r3, [r7, #11]
 803f130:	3301      	adds	r3, #1
 803f132:	72fb      	strb	r3, [r7, #11]
      break;
 803f134:	e007      	b.n	803f146 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 803f136:	6839      	ldr	r1, [r7, #0]
 803f138:	6878      	ldr	r0, [r7, #4]
 803f13a:	f000 fa08 	bl	803f54e <USBD_CtlError>
      err++;
 803f13e:	7afb      	ldrb	r3, [r7, #11]
 803f140:	3301      	adds	r3, #1
 803f142:	72fb      	strb	r3, [r7, #11]
      break;
 803f144:	bf00      	nop
  }

  if (err != 0U)
 803f146:	7afb      	ldrb	r3, [r7, #11]
 803f148:	2b00      	cmp	r3, #0
 803f14a:	d11e      	bne.n	803f18a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 803f14c:	683b      	ldr	r3, [r7, #0]
 803f14e:	88db      	ldrh	r3, [r3, #6]
 803f150:	2b00      	cmp	r3, #0
 803f152:	d016      	beq.n	803f182 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 803f154:	893b      	ldrh	r3, [r7, #8]
 803f156:	2b00      	cmp	r3, #0
 803f158:	d00e      	beq.n	803f178 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 803f15a:	683b      	ldr	r3, [r7, #0]
 803f15c:	88da      	ldrh	r2, [r3, #6]
 803f15e:	893b      	ldrh	r3, [r7, #8]
 803f160:	4293      	cmp	r3, r2
 803f162:	bf28      	it	cs
 803f164:	4613      	movcs	r3, r2
 803f166:	b29b      	uxth	r3, r3
 803f168:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 803f16a:	893b      	ldrh	r3, [r7, #8]
 803f16c:	461a      	mov	r2, r3
 803f16e:	68f9      	ldr	r1, [r7, #12]
 803f170:	6878      	ldr	r0, [r7, #4]
 803f172:	f000 fa5d 	bl	803f630 <USBD_CtlSendData>
 803f176:	e009      	b.n	803f18c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 803f178:	6839      	ldr	r1, [r7, #0]
 803f17a:	6878      	ldr	r0, [r7, #4]
 803f17c:	f000 f9e7 	bl	803f54e <USBD_CtlError>
 803f180:	e004      	b.n	803f18c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 803f182:	6878      	ldr	r0, [r7, #4]
 803f184:	f000 faae 	bl	803f6e4 <USBD_CtlSendStatus>
 803f188:	e000      	b.n	803f18c <USBD_GetDescriptor+0x2cc>
    return;
 803f18a:	bf00      	nop
  }
}
 803f18c:	3710      	adds	r7, #16
 803f18e:	46bd      	mov	sp, r7
 803f190:	bd80      	pop	{r7, pc}
 803f192:	bf00      	nop

0803f194 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803f194:	b580      	push	{r7, lr}
 803f196:	b084      	sub	sp, #16
 803f198:	af00      	add	r7, sp, #0
 803f19a:	6078      	str	r0, [r7, #4]
 803f19c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803f19e:	683b      	ldr	r3, [r7, #0]
 803f1a0:	889b      	ldrh	r3, [r3, #4]
 803f1a2:	2b00      	cmp	r3, #0
 803f1a4:	d131      	bne.n	803f20a <USBD_SetAddress+0x76>
 803f1a6:	683b      	ldr	r3, [r7, #0]
 803f1a8:	88db      	ldrh	r3, [r3, #6]
 803f1aa:	2b00      	cmp	r3, #0
 803f1ac:	d12d      	bne.n	803f20a <USBD_SetAddress+0x76>
 803f1ae:	683b      	ldr	r3, [r7, #0]
 803f1b0:	885b      	ldrh	r3, [r3, #2]
 803f1b2:	2b7f      	cmp	r3, #127	; 0x7f
 803f1b4:	d829      	bhi.n	803f20a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 803f1b6:	683b      	ldr	r3, [r7, #0]
 803f1b8:	885b      	ldrh	r3, [r3, #2]
 803f1ba:	b2db      	uxtb	r3, r3
 803f1bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803f1c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803f1c2:	687b      	ldr	r3, [r7, #4]
 803f1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803f1c8:	b2db      	uxtb	r3, r3
 803f1ca:	2b03      	cmp	r3, #3
 803f1cc:	d104      	bne.n	803f1d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 803f1ce:	6839      	ldr	r1, [r7, #0]
 803f1d0:	6878      	ldr	r0, [r7, #4]
 803f1d2:	f000 f9bc 	bl	803f54e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803f1d6:	e01d      	b.n	803f214 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 803f1d8:	687b      	ldr	r3, [r7, #4]
 803f1da:	7bfa      	ldrb	r2, [r7, #15]
 803f1dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803f1e0:	7bfb      	ldrb	r3, [r7, #15]
 803f1e2:	4619      	mov	r1, r3
 803f1e4:	6878      	ldr	r0, [r7, #4]
 803f1e6:	f000 ff0b 	bl	8040000 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 803f1ea:	6878      	ldr	r0, [r7, #4]
 803f1ec:	f000 fa7a 	bl	803f6e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803f1f0:	7bfb      	ldrb	r3, [r7, #15]
 803f1f2:	2b00      	cmp	r3, #0
 803f1f4:	d004      	beq.n	803f200 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803f1f6:	687b      	ldr	r3, [r7, #4]
 803f1f8:	2202      	movs	r2, #2
 803f1fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803f1fe:	e009      	b.n	803f214 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803f200:	687b      	ldr	r3, [r7, #4]
 803f202:	2201      	movs	r2, #1
 803f204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803f208:	e004      	b.n	803f214 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 803f20a:	6839      	ldr	r1, [r7, #0]
 803f20c:	6878      	ldr	r0, [r7, #4]
 803f20e:	f000 f99e 	bl	803f54e <USBD_CtlError>
  }
}
 803f212:	bf00      	nop
 803f214:	bf00      	nop
 803f216:	3710      	adds	r7, #16
 803f218:	46bd      	mov	sp, r7
 803f21a:	bd80      	pop	{r7, pc}

0803f21c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803f21c:	b580      	push	{r7, lr}
 803f21e:	b084      	sub	sp, #16
 803f220:	af00      	add	r7, sp, #0
 803f222:	6078      	str	r0, [r7, #4]
 803f224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803f226:	2300      	movs	r3, #0
 803f228:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 803f22a:	683b      	ldr	r3, [r7, #0]
 803f22c:	885b      	ldrh	r3, [r3, #2]
 803f22e:	b2da      	uxtb	r2, r3
 803f230:	4b4e      	ldr	r3, [pc, #312]	; (803f36c <USBD_SetConfig+0x150>)
 803f232:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 803f234:	4b4d      	ldr	r3, [pc, #308]	; (803f36c <USBD_SetConfig+0x150>)
 803f236:	781b      	ldrb	r3, [r3, #0]
 803f238:	2b01      	cmp	r3, #1
 803f23a:	d905      	bls.n	803f248 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 803f23c:	6839      	ldr	r1, [r7, #0]
 803f23e:	6878      	ldr	r0, [r7, #4]
 803f240:	f000 f985 	bl	803f54e <USBD_CtlError>
    return USBD_FAIL;
 803f244:	2303      	movs	r3, #3
 803f246:	e08c      	b.n	803f362 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 803f248:	687b      	ldr	r3, [r7, #4]
 803f24a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803f24e:	b2db      	uxtb	r3, r3
 803f250:	2b02      	cmp	r3, #2
 803f252:	d002      	beq.n	803f25a <USBD_SetConfig+0x3e>
 803f254:	2b03      	cmp	r3, #3
 803f256:	d029      	beq.n	803f2ac <USBD_SetConfig+0x90>
 803f258:	e075      	b.n	803f346 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 803f25a:	4b44      	ldr	r3, [pc, #272]	; (803f36c <USBD_SetConfig+0x150>)
 803f25c:	781b      	ldrb	r3, [r3, #0]
 803f25e:	2b00      	cmp	r3, #0
 803f260:	d020      	beq.n	803f2a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803f262:	4b42      	ldr	r3, [pc, #264]	; (803f36c <USBD_SetConfig+0x150>)
 803f264:	781b      	ldrb	r3, [r3, #0]
 803f266:	461a      	mov	r2, r3
 803f268:	687b      	ldr	r3, [r7, #4]
 803f26a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 803f26c:	4b3f      	ldr	r3, [pc, #252]	; (803f36c <USBD_SetConfig+0x150>)
 803f26e:	781b      	ldrb	r3, [r3, #0]
 803f270:	4619      	mov	r1, r3
 803f272:	6878      	ldr	r0, [r7, #4]
 803f274:	f7fe ffe7 	bl	803e246 <USBD_SetClassConfig>
 803f278:	4603      	mov	r3, r0
 803f27a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 803f27c:	7bfb      	ldrb	r3, [r7, #15]
 803f27e:	2b00      	cmp	r3, #0
 803f280:	d008      	beq.n	803f294 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 803f282:	6839      	ldr	r1, [r7, #0]
 803f284:	6878      	ldr	r0, [r7, #4]
 803f286:	f000 f962 	bl	803f54e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803f28a:	687b      	ldr	r3, [r7, #4]
 803f28c:	2202      	movs	r2, #2
 803f28e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803f292:	e065      	b.n	803f360 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803f294:	6878      	ldr	r0, [r7, #4]
 803f296:	f000 fa25 	bl	803f6e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 803f29a:	687b      	ldr	r3, [r7, #4]
 803f29c:	2203      	movs	r2, #3
 803f29e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803f2a2:	e05d      	b.n	803f360 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803f2a4:	6878      	ldr	r0, [r7, #4]
 803f2a6:	f000 fa1d 	bl	803f6e4 <USBD_CtlSendStatus>
      break;
 803f2aa:	e059      	b.n	803f360 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 803f2ac:	4b2f      	ldr	r3, [pc, #188]	; (803f36c <USBD_SetConfig+0x150>)
 803f2ae:	781b      	ldrb	r3, [r3, #0]
 803f2b0:	2b00      	cmp	r3, #0
 803f2b2:	d112      	bne.n	803f2da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803f2b4:	687b      	ldr	r3, [r7, #4]
 803f2b6:	2202      	movs	r2, #2
 803f2b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 803f2bc:	4b2b      	ldr	r3, [pc, #172]	; (803f36c <USBD_SetConfig+0x150>)
 803f2be:	781b      	ldrb	r3, [r3, #0]
 803f2c0:	461a      	mov	r2, r3
 803f2c2:	687b      	ldr	r3, [r7, #4]
 803f2c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 803f2c6:	4b29      	ldr	r3, [pc, #164]	; (803f36c <USBD_SetConfig+0x150>)
 803f2c8:	781b      	ldrb	r3, [r3, #0]
 803f2ca:	4619      	mov	r1, r3
 803f2cc:	6878      	ldr	r0, [r7, #4]
 803f2ce:	f7fe ffd6 	bl	803e27e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 803f2d2:	6878      	ldr	r0, [r7, #4]
 803f2d4:	f000 fa06 	bl	803f6e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803f2d8:	e042      	b.n	803f360 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 803f2da:	4b24      	ldr	r3, [pc, #144]	; (803f36c <USBD_SetConfig+0x150>)
 803f2dc:	781b      	ldrb	r3, [r3, #0]
 803f2de:	461a      	mov	r2, r3
 803f2e0:	687b      	ldr	r3, [r7, #4]
 803f2e2:	685b      	ldr	r3, [r3, #4]
 803f2e4:	429a      	cmp	r2, r3
 803f2e6:	d02a      	beq.n	803f33e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803f2e8:	687b      	ldr	r3, [r7, #4]
 803f2ea:	685b      	ldr	r3, [r3, #4]
 803f2ec:	b2db      	uxtb	r3, r3
 803f2ee:	4619      	mov	r1, r3
 803f2f0:	6878      	ldr	r0, [r7, #4]
 803f2f2:	f7fe ffc4 	bl	803e27e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 803f2f6:	4b1d      	ldr	r3, [pc, #116]	; (803f36c <USBD_SetConfig+0x150>)
 803f2f8:	781b      	ldrb	r3, [r3, #0]
 803f2fa:	461a      	mov	r2, r3
 803f2fc:	687b      	ldr	r3, [r7, #4]
 803f2fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 803f300:	4b1a      	ldr	r3, [pc, #104]	; (803f36c <USBD_SetConfig+0x150>)
 803f302:	781b      	ldrb	r3, [r3, #0]
 803f304:	4619      	mov	r1, r3
 803f306:	6878      	ldr	r0, [r7, #4]
 803f308:	f7fe ff9d 	bl	803e246 <USBD_SetClassConfig>
 803f30c:	4603      	mov	r3, r0
 803f30e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803f310:	7bfb      	ldrb	r3, [r7, #15]
 803f312:	2b00      	cmp	r3, #0
 803f314:	d00f      	beq.n	803f336 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 803f316:	6839      	ldr	r1, [r7, #0]
 803f318:	6878      	ldr	r0, [r7, #4]
 803f31a:	f000 f918 	bl	803f54e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803f31e:	687b      	ldr	r3, [r7, #4]
 803f320:	685b      	ldr	r3, [r3, #4]
 803f322:	b2db      	uxtb	r3, r3
 803f324:	4619      	mov	r1, r3
 803f326:	6878      	ldr	r0, [r7, #4]
 803f328:	f7fe ffa9 	bl	803e27e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803f32c:	687b      	ldr	r3, [r7, #4]
 803f32e:	2202      	movs	r2, #2
 803f330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803f334:	e014      	b.n	803f360 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803f336:	6878      	ldr	r0, [r7, #4]
 803f338:	f000 f9d4 	bl	803f6e4 <USBD_CtlSendStatus>
      break;
 803f33c:	e010      	b.n	803f360 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803f33e:	6878      	ldr	r0, [r7, #4]
 803f340:	f000 f9d0 	bl	803f6e4 <USBD_CtlSendStatus>
      break;
 803f344:	e00c      	b.n	803f360 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 803f346:	6839      	ldr	r1, [r7, #0]
 803f348:	6878      	ldr	r0, [r7, #4]
 803f34a:	f000 f900 	bl	803f54e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803f34e:	4b07      	ldr	r3, [pc, #28]	; (803f36c <USBD_SetConfig+0x150>)
 803f350:	781b      	ldrb	r3, [r3, #0]
 803f352:	4619      	mov	r1, r3
 803f354:	6878      	ldr	r0, [r7, #4]
 803f356:	f7fe ff92 	bl	803e27e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 803f35a:	2303      	movs	r3, #3
 803f35c:	73fb      	strb	r3, [r7, #15]
      break;
 803f35e:	bf00      	nop
  }

  return ret;
 803f360:	7bfb      	ldrb	r3, [r7, #15]
}
 803f362:	4618      	mov	r0, r3
 803f364:	3710      	adds	r7, #16
 803f366:	46bd      	mov	sp, r7
 803f368:	bd80      	pop	{r7, pc}
 803f36a:	bf00      	nop
 803f36c:	24023fa4 	.word	0x24023fa4

0803f370 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803f370:	b580      	push	{r7, lr}
 803f372:	b082      	sub	sp, #8
 803f374:	af00      	add	r7, sp, #0
 803f376:	6078      	str	r0, [r7, #4]
 803f378:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 803f37a:	683b      	ldr	r3, [r7, #0]
 803f37c:	88db      	ldrh	r3, [r3, #6]
 803f37e:	2b01      	cmp	r3, #1
 803f380:	d004      	beq.n	803f38c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803f382:	6839      	ldr	r1, [r7, #0]
 803f384:	6878      	ldr	r0, [r7, #4]
 803f386:	f000 f8e2 	bl	803f54e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 803f38a:	e023      	b.n	803f3d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 803f38c:	687b      	ldr	r3, [r7, #4]
 803f38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803f392:	b2db      	uxtb	r3, r3
 803f394:	2b02      	cmp	r3, #2
 803f396:	dc02      	bgt.n	803f39e <USBD_GetConfig+0x2e>
 803f398:	2b00      	cmp	r3, #0
 803f39a:	dc03      	bgt.n	803f3a4 <USBD_GetConfig+0x34>
 803f39c:	e015      	b.n	803f3ca <USBD_GetConfig+0x5a>
 803f39e:	2b03      	cmp	r3, #3
 803f3a0:	d00b      	beq.n	803f3ba <USBD_GetConfig+0x4a>
 803f3a2:	e012      	b.n	803f3ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 803f3a4:	687b      	ldr	r3, [r7, #4]
 803f3a6:	2200      	movs	r2, #0
 803f3a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803f3aa:	687b      	ldr	r3, [r7, #4]
 803f3ac:	3308      	adds	r3, #8
 803f3ae:	2201      	movs	r2, #1
 803f3b0:	4619      	mov	r1, r3
 803f3b2:	6878      	ldr	r0, [r7, #4]
 803f3b4:	f000 f93c 	bl	803f630 <USBD_CtlSendData>
        break;
 803f3b8:	e00c      	b.n	803f3d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803f3ba:	687b      	ldr	r3, [r7, #4]
 803f3bc:	3304      	adds	r3, #4
 803f3be:	2201      	movs	r2, #1
 803f3c0:	4619      	mov	r1, r3
 803f3c2:	6878      	ldr	r0, [r7, #4]
 803f3c4:	f000 f934 	bl	803f630 <USBD_CtlSendData>
        break;
 803f3c8:	e004      	b.n	803f3d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 803f3ca:	6839      	ldr	r1, [r7, #0]
 803f3cc:	6878      	ldr	r0, [r7, #4]
 803f3ce:	f000 f8be 	bl	803f54e <USBD_CtlError>
        break;
 803f3d2:	bf00      	nop
}
 803f3d4:	bf00      	nop
 803f3d6:	3708      	adds	r7, #8
 803f3d8:	46bd      	mov	sp, r7
 803f3da:	bd80      	pop	{r7, pc}

0803f3dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803f3dc:	b580      	push	{r7, lr}
 803f3de:	b082      	sub	sp, #8
 803f3e0:	af00      	add	r7, sp, #0
 803f3e2:	6078      	str	r0, [r7, #4]
 803f3e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803f3e6:	687b      	ldr	r3, [r7, #4]
 803f3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803f3ec:	b2db      	uxtb	r3, r3
 803f3ee:	3b01      	subs	r3, #1
 803f3f0:	2b02      	cmp	r3, #2
 803f3f2:	d81e      	bhi.n	803f432 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 803f3f4:	683b      	ldr	r3, [r7, #0]
 803f3f6:	88db      	ldrh	r3, [r3, #6]
 803f3f8:	2b02      	cmp	r3, #2
 803f3fa:	d004      	beq.n	803f406 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 803f3fc:	6839      	ldr	r1, [r7, #0]
 803f3fe:	6878      	ldr	r0, [r7, #4]
 803f400:	f000 f8a5 	bl	803f54e <USBD_CtlError>
        break;
 803f404:	e01a      	b.n	803f43c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 803f406:	687b      	ldr	r3, [r7, #4]
 803f408:	2201      	movs	r2, #1
 803f40a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 803f40c:	687b      	ldr	r3, [r7, #4]
 803f40e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803f412:	2b00      	cmp	r3, #0
 803f414:	d005      	beq.n	803f422 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 803f416:	687b      	ldr	r3, [r7, #4]
 803f418:	68db      	ldr	r3, [r3, #12]
 803f41a:	f043 0202 	orr.w	r2, r3, #2
 803f41e:	687b      	ldr	r3, [r7, #4]
 803f420:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803f422:	687b      	ldr	r3, [r7, #4]
 803f424:	330c      	adds	r3, #12
 803f426:	2202      	movs	r2, #2
 803f428:	4619      	mov	r1, r3
 803f42a:	6878      	ldr	r0, [r7, #4]
 803f42c:	f000 f900 	bl	803f630 <USBD_CtlSendData>
      break;
 803f430:	e004      	b.n	803f43c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803f432:	6839      	ldr	r1, [r7, #0]
 803f434:	6878      	ldr	r0, [r7, #4]
 803f436:	f000 f88a 	bl	803f54e <USBD_CtlError>
      break;
 803f43a:	bf00      	nop
  }
}
 803f43c:	bf00      	nop
 803f43e:	3708      	adds	r7, #8
 803f440:	46bd      	mov	sp, r7
 803f442:	bd80      	pop	{r7, pc}

0803f444 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803f444:	b580      	push	{r7, lr}
 803f446:	b082      	sub	sp, #8
 803f448:	af00      	add	r7, sp, #0
 803f44a:	6078      	str	r0, [r7, #4]
 803f44c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803f44e:	683b      	ldr	r3, [r7, #0]
 803f450:	885b      	ldrh	r3, [r3, #2]
 803f452:	2b01      	cmp	r3, #1
 803f454:	d107      	bne.n	803f466 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 803f456:	687b      	ldr	r3, [r7, #4]
 803f458:	2201      	movs	r2, #1
 803f45a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803f45e:	6878      	ldr	r0, [r7, #4]
 803f460:	f000 f940 	bl	803f6e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 803f464:	e013      	b.n	803f48e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 803f466:	683b      	ldr	r3, [r7, #0]
 803f468:	885b      	ldrh	r3, [r3, #2]
 803f46a:	2b02      	cmp	r3, #2
 803f46c:	d10b      	bne.n	803f486 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803f46e:	683b      	ldr	r3, [r7, #0]
 803f470:	889b      	ldrh	r3, [r3, #4]
 803f472:	0a1b      	lsrs	r3, r3, #8
 803f474:	b29b      	uxth	r3, r3
 803f476:	b2da      	uxtb	r2, r3
 803f478:	687b      	ldr	r3, [r7, #4]
 803f47a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 803f47e:	6878      	ldr	r0, [r7, #4]
 803f480:	f000 f930 	bl	803f6e4 <USBD_CtlSendStatus>
}
 803f484:	e003      	b.n	803f48e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 803f486:	6839      	ldr	r1, [r7, #0]
 803f488:	6878      	ldr	r0, [r7, #4]
 803f48a:	f000 f860 	bl	803f54e <USBD_CtlError>
}
 803f48e:	bf00      	nop
 803f490:	3708      	adds	r7, #8
 803f492:	46bd      	mov	sp, r7
 803f494:	bd80      	pop	{r7, pc}

0803f496 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803f496:	b580      	push	{r7, lr}
 803f498:	b082      	sub	sp, #8
 803f49a:	af00      	add	r7, sp, #0
 803f49c:	6078      	str	r0, [r7, #4]
 803f49e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803f4a0:	687b      	ldr	r3, [r7, #4]
 803f4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803f4a6:	b2db      	uxtb	r3, r3
 803f4a8:	3b01      	subs	r3, #1
 803f4aa:	2b02      	cmp	r3, #2
 803f4ac:	d80b      	bhi.n	803f4c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803f4ae:	683b      	ldr	r3, [r7, #0]
 803f4b0:	885b      	ldrh	r3, [r3, #2]
 803f4b2:	2b01      	cmp	r3, #1
 803f4b4:	d10c      	bne.n	803f4d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 803f4b6:	687b      	ldr	r3, [r7, #4]
 803f4b8:	2200      	movs	r2, #0
 803f4ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 803f4be:	6878      	ldr	r0, [r7, #4]
 803f4c0:	f000 f910 	bl	803f6e4 <USBD_CtlSendStatus>
      }
      break;
 803f4c4:	e004      	b.n	803f4d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 803f4c6:	6839      	ldr	r1, [r7, #0]
 803f4c8:	6878      	ldr	r0, [r7, #4]
 803f4ca:	f000 f840 	bl	803f54e <USBD_CtlError>
      break;
 803f4ce:	e000      	b.n	803f4d2 <USBD_ClrFeature+0x3c>
      break;
 803f4d0:	bf00      	nop
  }
}
 803f4d2:	bf00      	nop
 803f4d4:	3708      	adds	r7, #8
 803f4d6:	46bd      	mov	sp, r7
 803f4d8:	bd80      	pop	{r7, pc}

0803f4da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803f4da:	b580      	push	{r7, lr}
 803f4dc:	b084      	sub	sp, #16
 803f4de:	af00      	add	r7, sp, #0
 803f4e0:	6078      	str	r0, [r7, #4]
 803f4e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 803f4e4:	683b      	ldr	r3, [r7, #0]
 803f4e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 803f4e8:	68fb      	ldr	r3, [r7, #12]
 803f4ea:	781a      	ldrb	r2, [r3, #0]
 803f4ec:	687b      	ldr	r3, [r7, #4]
 803f4ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 803f4f0:	68fb      	ldr	r3, [r7, #12]
 803f4f2:	3301      	adds	r3, #1
 803f4f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 803f4f6:	68fb      	ldr	r3, [r7, #12]
 803f4f8:	781a      	ldrb	r2, [r3, #0]
 803f4fa:	687b      	ldr	r3, [r7, #4]
 803f4fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803f4fe:	68fb      	ldr	r3, [r7, #12]
 803f500:	3301      	adds	r3, #1
 803f502:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 803f504:	68f8      	ldr	r0, [r7, #12]
 803f506:	f7ff fa41 	bl	803e98c <SWAPBYTE>
 803f50a:	4603      	mov	r3, r0
 803f50c:	461a      	mov	r2, r3
 803f50e:	687b      	ldr	r3, [r7, #4]
 803f510:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803f512:	68fb      	ldr	r3, [r7, #12]
 803f514:	3301      	adds	r3, #1
 803f516:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803f518:	68fb      	ldr	r3, [r7, #12]
 803f51a:	3301      	adds	r3, #1
 803f51c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803f51e:	68f8      	ldr	r0, [r7, #12]
 803f520:	f7ff fa34 	bl	803e98c <SWAPBYTE>
 803f524:	4603      	mov	r3, r0
 803f526:	461a      	mov	r2, r3
 803f528:	687b      	ldr	r3, [r7, #4]
 803f52a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 803f52c:	68fb      	ldr	r3, [r7, #12]
 803f52e:	3301      	adds	r3, #1
 803f530:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803f532:	68fb      	ldr	r3, [r7, #12]
 803f534:	3301      	adds	r3, #1
 803f536:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 803f538:	68f8      	ldr	r0, [r7, #12]
 803f53a:	f7ff fa27 	bl	803e98c <SWAPBYTE>
 803f53e:	4603      	mov	r3, r0
 803f540:	461a      	mov	r2, r3
 803f542:	687b      	ldr	r3, [r7, #4]
 803f544:	80da      	strh	r2, [r3, #6]
}
 803f546:	bf00      	nop
 803f548:	3710      	adds	r7, #16
 803f54a:	46bd      	mov	sp, r7
 803f54c:	bd80      	pop	{r7, pc}

0803f54e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803f54e:	b580      	push	{r7, lr}
 803f550:	b082      	sub	sp, #8
 803f552:	af00      	add	r7, sp, #0
 803f554:	6078      	str	r0, [r7, #4]
 803f556:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 803f558:	2180      	movs	r1, #128	; 0x80
 803f55a:	6878      	ldr	r0, [r7, #4]
 803f55c:	f000 fce6 	bl	803ff2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803f560:	2100      	movs	r1, #0
 803f562:	6878      	ldr	r0, [r7, #4]
 803f564:	f000 fce2 	bl	803ff2c <USBD_LL_StallEP>
}
 803f568:	bf00      	nop
 803f56a:	3708      	adds	r7, #8
 803f56c:	46bd      	mov	sp, r7
 803f56e:	bd80      	pop	{r7, pc}

0803f570 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803f570:	b580      	push	{r7, lr}
 803f572:	b086      	sub	sp, #24
 803f574:	af00      	add	r7, sp, #0
 803f576:	60f8      	str	r0, [r7, #12]
 803f578:	60b9      	str	r1, [r7, #8]
 803f57a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 803f57c:	2300      	movs	r3, #0
 803f57e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803f580:	68fb      	ldr	r3, [r7, #12]
 803f582:	2b00      	cmp	r3, #0
 803f584:	d036      	beq.n	803f5f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 803f586:	68fb      	ldr	r3, [r7, #12]
 803f588:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 803f58a:	6938      	ldr	r0, [r7, #16]
 803f58c:	f000 f836 	bl	803f5fc <USBD_GetLen>
 803f590:	4603      	mov	r3, r0
 803f592:	3301      	adds	r3, #1
 803f594:	b29b      	uxth	r3, r3
 803f596:	005b      	lsls	r3, r3, #1
 803f598:	b29a      	uxth	r2, r3
 803f59a:	687b      	ldr	r3, [r7, #4]
 803f59c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 803f59e:	7dfb      	ldrb	r3, [r7, #23]
 803f5a0:	68ba      	ldr	r2, [r7, #8]
 803f5a2:	4413      	add	r3, r2
 803f5a4:	687a      	ldr	r2, [r7, #4]
 803f5a6:	7812      	ldrb	r2, [r2, #0]
 803f5a8:	701a      	strb	r2, [r3, #0]
  idx++;
 803f5aa:	7dfb      	ldrb	r3, [r7, #23]
 803f5ac:	3301      	adds	r3, #1
 803f5ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 803f5b0:	7dfb      	ldrb	r3, [r7, #23]
 803f5b2:	68ba      	ldr	r2, [r7, #8]
 803f5b4:	4413      	add	r3, r2
 803f5b6:	2203      	movs	r2, #3
 803f5b8:	701a      	strb	r2, [r3, #0]
  idx++;
 803f5ba:	7dfb      	ldrb	r3, [r7, #23]
 803f5bc:	3301      	adds	r3, #1
 803f5be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 803f5c0:	e013      	b.n	803f5ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 803f5c2:	7dfb      	ldrb	r3, [r7, #23]
 803f5c4:	68ba      	ldr	r2, [r7, #8]
 803f5c6:	4413      	add	r3, r2
 803f5c8:	693a      	ldr	r2, [r7, #16]
 803f5ca:	7812      	ldrb	r2, [r2, #0]
 803f5cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803f5ce:	693b      	ldr	r3, [r7, #16]
 803f5d0:	3301      	adds	r3, #1
 803f5d2:	613b      	str	r3, [r7, #16]
    idx++;
 803f5d4:	7dfb      	ldrb	r3, [r7, #23]
 803f5d6:	3301      	adds	r3, #1
 803f5d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803f5da:	7dfb      	ldrb	r3, [r7, #23]
 803f5dc:	68ba      	ldr	r2, [r7, #8]
 803f5de:	4413      	add	r3, r2
 803f5e0:	2200      	movs	r2, #0
 803f5e2:	701a      	strb	r2, [r3, #0]
    idx++;
 803f5e4:	7dfb      	ldrb	r3, [r7, #23]
 803f5e6:	3301      	adds	r3, #1
 803f5e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803f5ea:	693b      	ldr	r3, [r7, #16]
 803f5ec:	781b      	ldrb	r3, [r3, #0]
 803f5ee:	2b00      	cmp	r3, #0
 803f5f0:	d1e7      	bne.n	803f5c2 <USBD_GetString+0x52>
 803f5f2:	e000      	b.n	803f5f6 <USBD_GetString+0x86>
    return;
 803f5f4:	bf00      	nop
  }
}
 803f5f6:	3718      	adds	r7, #24
 803f5f8:	46bd      	mov	sp, r7
 803f5fa:	bd80      	pop	{r7, pc}

0803f5fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 803f5fc:	b480      	push	{r7}
 803f5fe:	b085      	sub	sp, #20
 803f600:	af00      	add	r7, sp, #0
 803f602:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 803f604:	2300      	movs	r3, #0
 803f606:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 803f608:	687b      	ldr	r3, [r7, #4]
 803f60a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 803f60c:	e005      	b.n	803f61a <USBD_GetLen+0x1e>
  {
    len++;
 803f60e:	7bfb      	ldrb	r3, [r7, #15]
 803f610:	3301      	adds	r3, #1
 803f612:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 803f614:	68bb      	ldr	r3, [r7, #8]
 803f616:	3301      	adds	r3, #1
 803f618:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803f61a:	68bb      	ldr	r3, [r7, #8]
 803f61c:	781b      	ldrb	r3, [r3, #0]
 803f61e:	2b00      	cmp	r3, #0
 803f620:	d1f5      	bne.n	803f60e <USBD_GetLen+0x12>
  }

  return len;
 803f622:	7bfb      	ldrb	r3, [r7, #15]
}
 803f624:	4618      	mov	r0, r3
 803f626:	3714      	adds	r7, #20
 803f628:	46bd      	mov	sp, r7
 803f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f62e:	4770      	bx	lr

0803f630 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803f630:	b580      	push	{r7, lr}
 803f632:	b084      	sub	sp, #16
 803f634:	af00      	add	r7, sp, #0
 803f636:	60f8      	str	r0, [r7, #12]
 803f638:	60b9      	str	r1, [r7, #8]
 803f63a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 803f63c:	68fb      	ldr	r3, [r7, #12]
 803f63e:	2202      	movs	r2, #2
 803f640:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 803f644:	68fb      	ldr	r3, [r7, #12]
 803f646:	687a      	ldr	r2, [r7, #4]
 803f648:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 803f64a:	68fb      	ldr	r3, [r7, #12]
 803f64c:	687a      	ldr	r2, [r7, #4]
 803f64e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803f650:	687b      	ldr	r3, [r7, #4]
 803f652:	68ba      	ldr	r2, [r7, #8]
 803f654:	2100      	movs	r1, #0
 803f656:	68f8      	ldr	r0, [r7, #12]
 803f658:	f000 fcf1 	bl	804003e <USBD_LL_Transmit>

  return USBD_OK;
 803f65c:	2300      	movs	r3, #0
}
 803f65e:	4618      	mov	r0, r3
 803f660:	3710      	adds	r7, #16
 803f662:	46bd      	mov	sp, r7
 803f664:	bd80      	pop	{r7, pc}

0803f666 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 803f666:	b580      	push	{r7, lr}
 803f668:	b084      	sub	sp, #16
 803f66a:	af00      	add	r7, sp, #0
 803f66c:	60f8      	str	r0, [r7, #12]
 803f66e:	60b9      	str	r1, [r7, #8]
 803f670:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803f672:	687b      	ldr	r3, [r7, #4]
 803f674:	68ba      	ldr	r2, [r7, #8]
 803f676:	2100      	movs	r1, #0
 803f678:	68f8      	ldr	r0, [r7, #12]
 803f67a:	f000 fce0 	bl	804003e <USBD_LL_Transmit>

  return USBD_OK;
 803f67e:	2300      	movs	r3, #0
}
 803f680:	4618      	mov	r0, r3
 803f682:	3710      	adds	r7, #16
 803f684:	46bd      	mov	sp, r7
 803f686:	bd80      	pop	{r7, pc}

0803f688 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 803f688:	b580      	push	{r7, lr}
 803f68a:	b084      	sub	sp, #16
 803f68c:	af00      	add	r7, sp, #0
 803f68e:	60f8      	str	r0, [r7, #12]
 803f690:	60b9      	str	r1, [r7, #8]
 803f692:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 803f694:	68fb      	ldr	r3, [r7, #12]
 803f696:	2203      	movs	r2, #3
 803f698:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 803f69c:	68fb      	ldr	r3, [r7, #12]
 803f69e:	687a      	ldr	r2, [r7, #4]
 803f6a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 803f6a4:	68fb      	ldr	r3, [r7, #12]
 803f6a6:	687a      	ldr	r2, [r7, #4]
 803f6a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803f6ac:	687b      	ldr	r3, [r7, #4]
 803f6ae:	68ba      	ldr	r2, [r7, #8]
 803f6b0:	2100      	movs	r1, #0
 803f6b2:	68f8      	ldr	r0, [r7, #12]
 803f6b4:	f000 fce4 	bl	8040080 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803f6b8:	2300      	movs	r3, #0
}
 803f6ba:	4618      	mov	r0, r3
 803f6bc:	3710      	adds	r7, #16
 803f6be:	46bd      	mov	sp, r7
 803f6c0:	bd80      	pop	{r7, pc}

0803f6c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 803f6c2:	b580      	push	{r7, lr}
 803f6c4:	b084      	sub	sp, #16
 803f6c6:	af00      	add	r7, sp, #0
 803f6c8:	60f8      	str	r0, [r7, #12]
 803f6ca:	60b9      	str	r1, [r7, #8]
 803f6cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803f6ce:	687b      	ldr	r3, [r7, #4]
 803f6d0:	68ba      	ldr	r2, [r7, #8]
 803f6d2:	2100      	movs	r1, #0
 803f6d4:	68f8      	ldr	r0, [r7, #12]
 803f6d6:	f000 fcd3 	bl	8040080 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803f6da:	2300      	movs	r3, #0
}
 803f6dc:	4618      	mov	r0, r3
 803f6de:	3710      	adds	r7, #16
 803f6e0:	46bd      	mov	sp, r7
 803f6e2:	bd80      	pop	{r7, pc}

0803f6e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 803f6e4:	b580      	push	{r7, lr}
 803f6e6:	b082      	sub	sp, #8
 803f6e8:	af00      	add	r7, sp, #0
 803f6ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 803f6ec:	687b      	ldr	r3, [r7, #4]
 803f6ee:	2204      	movs	r2, #4
 803f6f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 803f6f4:	2300      	movs	r3, #0
 803f6f6:	2200      	movs	r2, #0
 803f6f8:	2100      	movs	r1, #0
 803f6fa:	6878      	ldr	r0, [r7, #4]
 803f6fc:	f000 fc9f 	bl	804003e <USBD_LL_Transmit>

  return USBD_OK;
 803f700:	2300      	movs	r3, #0
}
 803f702:	4618      	mov	r0, r3
 803f704:	3708      	adds	r7, #8
 803f706:	46bd      	mov	sp, r7
 803f708:	bd80      	pop	{r7, pc}

0803f70a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803f70a:	b580      	push	{r7, lr}
 803f70c:	b082      	sub	sp, #8
 803f70e:	af00      	add	r7, sp, #0
 803f710:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803f712:	687b      	ldr	r3, [r7, #4]
 803f714:	2205      	movs	r2, #5
 803f716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803f71a:	2300      	movs	r3, #0
 803f71c:	2200      	movs	r2, #0
 803f71e:	2100      	movs	r1, #0
 803f720:	6878      	ldr	r0, [r7, #4]
 803f722:	f000 fcad 	bl	8040080 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803f726:	2300      	movs	r3, #0
}
 803f728:	4618      	mov	r0, r3
 803f72a:	3708      	adds	r7, #8
 803f72c:	46bd      	mov	sp, r7
 803f72e:	bd80      	pop	{r7, pc}

0803f730 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803f730:	b580      	push	{r7, lr}
 803f732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 803f734:	2200      	movs	r2, #0
 803f736:	4913      	ldr	r1, [pc, #76]	; (803f784 <MX_USB_DEVICE_Init+0x54>)
 803f738:	4813      	ldr	r0, [pc, #76]	; (803f788 <MX_USB_DEVICE_Init+0x58>)
 803f73a:	f7fe fd07 	bl	803e14c <USBD_Init>
 803f73e:	4603      	mov	r3, r0
 803f740:	2b00      	cmp	r3, #0
 803f742:	d001      	beq.n	803f748 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 803f744:	f7ee fc10 	bl	802df68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 803f748:	4910      	ldr	r1, [pc, #64]	; (803f78c <MX_USB_DEVICE_Init+0x5c>)
 803f74a:	480f      	ldr	r0, [pc, #60]	; (803f788 <MX_USB_DEVICE_Init+0x58>)
 803f74c:	f7fe fd2e 	bl	803e1ac <USBD_RegisterClass>
 803f750:	4603      	mov	r3, r0
 803f752:	2b00      	cmp	r3, #0
 803f754:	d001      	beq.n	803f75a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 803f756:	f7ee fc07 	bl	802df68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 803f75a:	490d      	ldr	r1, [pc, #52]	; (803f790 <MX_USB_DEVICE_Init+0x60>)
 803f75c:	480a      	ldr	r0, [pc, #40]	; (803f788 <MX_USB_DEVICE_Init+0x58>)
 803f75e:	f7fe fc65 	bl	803e02c <USBD_CDC_RegisterInterface>
 803f762:	4603      	mov	r3, r0
 803f764:	2b00      	cmp	r3, #0
 803f766:	d001      	beq.n	803f76c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 803f768:	f7ee fbfe 	bl	802df68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 803f76c:	4806      	ldr	r0, [pc, #24]	; (803f788 <MX_USB_DEVICE_Init+0x58>)
 803f76e:	f7fe fd53 	bl	803e218 <USBD_Start>
 803f772:	4603      	mov	r3, r0
 803f774:	2b00      	cmp	r3, #0
 803f776:	d001      	beq.n	803f77c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 803f778:	f7ee fbf6 	bl	802df68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 803f77c:	f7f5 fc82 	bl	8035084 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 803f780:	bf00      	nop
 803f782:	bd80      	pop	{r7, pc}
 803f784:	240000b4 	.word	0x240000b4
 803f788:	24023fa8 	.word	0x24023fa8
 803f78c:	24000020 	.word	0x24000020
 803f790:	240000a0 	.word	0x240000a0

0803f794 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 803f794:	b580      	push	{r7, lr}
 803f796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 803f798:	2200      	movs	r2, #0
 803f79a:	4905      	ldr	r1, [pc, #20]	; (803f7b0 <CDC_Init_FS+0x1c>)
 803f79c:	4805      	ldr	r0, [pc, #20]	; (803f7b4 <CDC_Init_FS+0x20>)
 803f79e:	f7fe fc5f 	bl	803e060 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803f7a2:	4905      	ldr	r1, [pc, #20]	; (803f7b8 <CDC_Init_FS+0x24>)
 803f7a4:	4803      	ldr	r0, [pc, #12]	; (803f7b4 <CDC_Init_FS+0x20>)
 803f7a6:	f7fe fc7d 	bl	803e0a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 803f7aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 803f7ac:	4618      	mov	r0, r3
 803f7ae:	bd80      	pop	{r7, pc}
 803f7b0:	24024a84 	.word	0x24024a84
 803f7b4:	24023fa8 	.word	0x24023fa8
 803f7b8:	24024284 	.word	0x24024284

0803f7bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 803f7bc:	b480      	push	{r7}
 803f7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803f7c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803f7c2:	4618      	mov	r0, r3
 803f7c4:	46bd      	mov	sp, r7
 803f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f7ca:	4770      	bx	lr

0803f7cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 803f7cc:	b480      	push	{r7}
 803f7ce:	b083      	sub	sp, #12
 803f7d0:	af00      	add	r7, sp, #0
 803f7d2:	4603      	mov	r3, r0
 803f7d4:	6039      	str	r1, [r7, #0]
 803f7d6:	71fb      	strb	r3, [r7, #7]
 803f7d8:	4613      	mov	r3, r2
 803f7da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 803f7dc:	79fb      	ldrb	r3, [r7, #7]
 803f7de:	2b23      	cmp	r3, #35	; 0x23
 803f7e0:	d84a      	bhi.n	803f878 <CDC_Control_FS+0xac>
 803f7e2:	a201      	add	r2, pc, #4	; (adr r2, 803f7e8 <CDC_Control_FS+0x1c>)
 803f7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803f7e8:	0803f879 	.word	0x0803f879
 803f7ec:	0803f879 	.word	0x0803f879
 803f7f0:	0803f879 	.word	0x0803f879
 803f7f4:	0803f879 	.word	0x0803f879
 803f7f8:	0803f879 	.word	0x0803f879
 803f7fc:	0803f879 	.word	0x0803f879
 803f800:	0803f879 	.word	0x0803f879
 803f804:	0803f879 	.word	0x0803f879
 803f808:	0803f879 	.word	0x0803f879
 803f80c:	0803f879 	.word	0x0803f879
 803f810:	0803f879 	.word	0x0803f879
 803f814:	0803f879 	.word	0x0803f879
 803f818:	0803f879 	.word	0x0803f879
 803f81c:	0803f879 	.word	0x0803f879
 803f820:	0803f879 	.word	0x0803f879
 803f824:	0803f879 	.word	0x0803f879
 803f828:	0803f879 	.word	0x0803f879
 803f82c:	0803f879 	.word	0x0803f879
 803f830:	0803f879 	.word	0x0803f879
 803f834:	0803f879 	.word	0x0803f879
 803f838:	0803f879 	.word	0x0803f879
 803f83c:	0803f879 	.word	0x0803f879
 803f840:	0803f879 	.word	0x0803f879
 803f844:	0803f879 	.word	0x0803f879
 803f848:	0803f879 	.word	0x0803f879
 803f84c:	0803f879 	.word	0x0803f879
 803f850:	0803f879 	.word	0x0803f879
 803f854:	0803f879 	.word	0x0803f879
 803f858:	0803f879 	.word	0x0803f879
 803f85c:	0803f879 	.word	0x0803f879
 803f860:	0803f879 	.word	0x0803f879
 803f864:	0803f879 	.word	0x0803f879
 803f868:	0803f879 	.word	0x0803f879
 803f86c:	0803f879 	.word	0x0803f879
 803f870:	0803f879 	.word	0x0803f879
 803f874:	0803f879 	.word	0x0803f879
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 803f878:	bf00      	nop
  }

  return (USBD_OK);
 803f87a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 803f87c:	4618      	mov	r0, r3
 803f87e:	370c      	adds	r7, #12
 803f880:	46bd      	mov	sp, r7
 803f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f886:	4770      	bx	lr

0803f888 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 803f888:	b580      	push	{r7, lr}
 803f88a:	b082      	sub	sp, #8
 803f88c:	af00      	add	r7, sp, #0
 803f88e:	6078      	str	r0, [r7, #4]
 803f890:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803f892:	6879      	ldr	r1, [r7, #4]
 803f894:	4805      	ldr	r0, [pc, #20]	; (803f8ac <CDC_Receive_FS+0x24>)
 803f896:	f7fe fc05 	bl	803e0a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 803f89a:	4804      	ldr	r0, [pc, #16]	; (803f8ac <CDC_Receive_FS+0x24>)
 803f89c:	f7fe fc20 	bl	803e0e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803f8a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803f8a2:	4618      	mov	r0, r3
 803f8a4:	3708      	adds	r7, #8
 803f8a6:	46bd      	mov	sp, r7
 803f8a8:	bd80      	pop	{r7, pc}
 803f8aa:	bf00      	nop
 803f8ac:	24023fa8 	.word	0x24023fa8

0803f8b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803f8b0:	b480      	push	{r7}
 803f8b2:	b087      	sub	sp, #28
 803f8b4:	af00      	add	r7, sp, #0
 803f8b6:	60f8      	str	r0, [r7, #12]
 803f8b8:	60b9      	str	r1, [r7, #8]
 803f8ba:	4613      	mov	r3, r2
 803f8bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803f8be:	2300      	movs	r3, #0
 803f8c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803f8c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803f8c6:	4618      	mov	r0, r3
 803f8c8:	371c      	adds	r7, #28
 803f8ca:	46bd      	mov	sp, r7
 803f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f8d0:	4770      	bx	lr
	...

0803f8d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803f8d4:	b480      	push	{r7}
 803f8d6:	b083      	sub	sp, #12
 803f8d8:	af00      	add	r7, sp, #0
 803f8da:	4603      	mov	r3, r0
 803f8dc:	6039      	str	r1, [r7, #0]
 803f8de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 803f8e0:	683b      	ldr	r3, [r7, #0]
 803f8e2:	2212      	movs	r2, #18
 803f8e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 803f8e6:	4b03      	ldr	r3, [pc, #12]	; (803f8f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 803f8e8:	4618      	mov	r0, r3
 803f8ea:	370c      	adds	r7, #12
 803f8ec:	46bd      	mov	sp, r7
 803f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f8f2:	4770      	bx	lr
 803f8f4:	240000d0 	.word	0x240000d0

0803f8f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803f8f8:	b480      	push	{r7}
 803f8fa:	b083      	sub	sp, #12
 803f8fc:	af00      	add	r7, sp, #0
 803f8fe:	4603      	mov	r3, r0
 803f900:	6039      	str	r1, [r7, #0]
 803f902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 803f904:	683b      	ldr	r3, [r7, #0]
 803f906:	2204      	movs	r2, #4
 803f908:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 803f90a:	4b03      	ldr	r3, [pc, #12]	; (803f918 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 803f90c:	4618      	mov	r0, r3
 803f90e:	370c      	adds	r7, #12
 803f910:	46bd      	mov	sp, r7
 803f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f916:	4770      	bx	lr
 803f918:	240000e4 	.word	0x240000e4

0803f91c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803f91c:	b580      	push	{r7, lr}
 803f91e:	b082      	sub	sp, #8
 803f920:	af00      	add	r7, sp, #0
 803f922:	4603      	mov	r3, r0
 803f924:	6039      	str	r1, [r7, #0]
 803f926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803f928:	79fb      	ldrb	r3, [r7, #7]
 803f92a:	2b00      	cmp	r3, #0
 803f92c:	d105      	bne.n	803f93a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803f92e:	683a      	ldr	r2, [r7, #0]
 803f930:	4907      	ldr	r1, [pc, #28]	; (803f950 <USBD_FS_ProductStrDescriptor+0x34>)
 803f932:	4808      	ldr	r0, [pc, #32]	; (803f954 <USBD_FS_ProductStrDescriptor+0x38>)
 803f934:	f7ff fe1c 	bl	803f570 <USBD_GetString>
 803f938:	e004      	b.n	803f944 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803f93a:	683a      	ldr	r2, [r7, #0]
 803f93c:	4904      	ldr	r1, [pc, #16]	; (803f950 <USBD_FS_ProductStrDescriptor+0x34>)
 803f93e:	4805      	ldr	r0, [pc, #20]	; (803f954 <USBD_FS_ProductStrDescriptor+0x38>)
 803f940:	f7ff fe16 	bl	803f570 <USBD_GetString>
  }
  return USBD_StrDesc;
 803f944:	4b02      	ldr	r3, [pc, #8]	; (803f950 <USBD_FS_ProductStrDescriptor+0x34>)
}
 803f946:	4618      	mov	r0, r3
 803f948:	3708      	adds	r7, #8
 803f94a:	46bd      	mov	sp, r7
 803f94c:	bd80      	pop	{r7, pc}
 803f94e:	bf00      	nop
 803f950:	24025284 	.word	0x24025284
 803f954:	08041f44 	.word	0x08041f44

0803f958 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803f958:	b580      	push	{r7, lr}
 803f95a:	b082      	sub	sp, #8
 803f95c:	af00      	add	r7, sp, #0
 803f95e:	4603      	mov	r3, r0
 803f960:	6039      	str	r1, [r7, #0]
 803f962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 803f964:	683a      	ldr	r2, [r7, #0]
 803f966:	4904      	ldr	r1, [pc, #16]	; (803f978 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 803f968:	4804      	ldr	r0, [pc, #16]	; (803f97c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 803f96a:	f7ff fe01 	bl	803f570 <USBD_GetString>
  return USBD_StrDesc;
 803f96e:	4b02      	ldr	r3, [pc, #8]	; (803f978 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 803f970:	4618      	mov	r0, r3
 803f972:	3708      	adds	r7, #8
 803f974:	46bd      	mov	sp, r7
 803f976:	bd80      	pop	{r7, pc}
 803f978:	24025284 	.word	0x24025284
 803f97c:	08041f5c 	.word	0x08041f5c

0803f980 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803f980:	b580      	push	{r7, lr}
 803f982:	b082      	sub	sp, #8
 803f984:	af00      	add	r7, sp, #0
 803f986:	4603      	mov	r3, r0
 803f988:	6039      	str	r1, [r7, #0]
 803f98a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 803f98c:	683b      	ldr	r3, [r7, #0]
 803f98e:	221a      	movs	r2, #26
 803f990:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803f992:	f000 f843 	bl	803fa1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 803f996:	4b02      	ldr	r3, [pc, #8]	; (803f9a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 803f998:	4618      	mov	r0, r3
 803f99a:	3708      	adds	r7, #8
 803f99c:	46bd      	mov	sp, r7
 803f99e:	bd80      	pop	{r7, pc}
 803f9a0:	240000e8 	.word	0x240000e8

0803f9a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803f9a4:	b580      	push	{r7, lr}
 803f9a6:	b082      	sub	sp, #8
 803f9a8:	af00      	add	r7, sp, #0
 803f9aa:	4603      	mov	r3, r0
 803f9ac:	6039      	str	r1, [r7, #0]
 803f9ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 803f9b0:	79fb      	ldrb	r3, [r7, #7]
 803f9b2:	2b00      	cmp	r3, #0
 803f9b4:	d105      	bne.n	803f9c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803f9b6:	683a      	ldr	r2, [r7, #0]
 803f9b8:	4907      	ldr	r1, [pc, #28]	; (803f9d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 803f9ba:	4808      	ldr	r0, [pc, #32]	; (803f9dc <USBD_FS_ConfigStrDescriptor+0x38>)
 803f9bc:	f7ff fdd8 	bl	803f570 <USBD_GetString>
 803f9c0:	e004      	b.n	803f9cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803f9c2:	683a      	ldr	r2, [r7, #0]
 803f9c4:	4904      	ldr	r1, [pc, #16]	; (803f9d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 803f9c6:	4805      	ldr	r0, [pc, #20]	; (803f9dc <USBD_FS_ConfigStrDescriptor+0x38>)
 803f9c8:	f7ff fdd2 	bl	803f570 <USBD_GetString>
  }
  return USBD_StrDesc;
 803f9cc:	4b02      	ldr	r3, [pc, #8]	; (803f9d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 803f9ce:	4618      	mov	r0, r3
 803f9d0:	3708      	adds	r7, #8
 803f9d2:	46bd      	mov	sp, r7
 803f9d4:	bd80      	pop	{r7, pc}
 803f9d6:	bf00      	nop
 803f9d8:	24025284 	.word	0x24025284
 803f9dc:	08041f70 	.word	0x08041f70

0803f9e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803f9e0:	b580      	push	{r7, lr}
 803f9e2:	b082      	sub	sp, #8
 803f9e4:	af00      	add	r7, sp, #0
 803f9e6:	4603      	mov	r3, r0
 803f9e8:	6039      	str	r1, [r7, #0]
 803f9ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803f9ec:	79fb      	ldrb	r3, [r7, #7]
 803f9ee:	2b00      	cmp	r3, #0
 803f9f0:	d105      	bne.n	803f9fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803f9f2:	683a      	ldr	r2, [r7, #0]
 803f9f4:	4907      	ldr	r1, [pc, #28]	; (803fa14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803f9f6:	4808      	ldr	r0, [pc, #32]	; (803fa18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 803f9f8:	f7ff fdba 	bl	803f570 <USBD_GetString>
 803f9fc:	e004      	b.n	803fa08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803f9fe:	683a      	ldr	r2, [r7, #0]
 803fa00:	4904      	ldr	r1, [pc, #16]	; (803fa14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803fa02:	4805      	ldr	r0, [pc, #20]	; (803fa18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 803fa04:	f7ff fdb4 	bl	803f570 <USBD_GetString>
  }
  return USBD_StrDesc;
 803fa08:	4b02      	ldr	r3, [pc, #8]	; (803fa14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 803fa0a:	4618      	mov	r0, r3
 803fa0c:	3708      	adds	r7, #8
 803fa0e:	46bd      	mov	sp, r7
 803fa10:	bd80      	pop	{r7, pc}
 803fa12:	bf00      	nop
 803fa14:	24025284 	.word	0x24025284
 803fa18:	08041f7c 	.word	0x08041f7c

0803fa1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 803fa1c:	b580      	push	{r7, lr}
 803fa1e:	b084      	sub	sp, #16
 803fa20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 803fa22:	4b0f      	ldr	r3, [pc, #60]	; (803fa60 <Get_SerialNum+0x44>)
 803fa24:	681b      	ldr	r3, [r3, #0]
 803fa26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 803fa28:	4b0e      	ldr	r3, [pc, #56]	; (803fa64 <Get_SerialNum+0x48>)
 803fa2a:	681b      	ldr	r3, [r3, #0]
 803fa2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 803fa2e:	4b0e      	ldr	r3, [pc, #56]	; (803fa68 <Get_SerialNum+0x4c>)
 803fa30:	681b      	ldr	r3, [r3, #0]
 803fa32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 803fa34:	68fa      	ldr	r2, [r7, #12]
 803fa36:	687b      	ldr	r3, [r7, #4]
 803fa38:	4413      	add	r3, r2
 803fa3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803fa3c:	68fb      	ldr	r3, [r7, #12]
 803fa3e:	2b00      	cmp	r3, #0
 803fa40:	d009      	beq.n	803fa56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 803fa42:	2208      	movs	r2, #8
 803fa44:	4909      	ldr	r1, [pc, #36]	; (803fa6c <Get_SerialNum+0x50>)
 803fa46:	68f8      	ldr	r0, [r7, #12]
 803fa48:	f000 f814 	bl	803fa74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 803fa4c:	2204      	movs	r2, #4
 803fa4e:	4908      	ldr	r1, [pc, #32]	; (803fa70 <Get_SerialNum+0x54>)
 803fa50:	68b8      	ldr	r0, [r7, #8]
 803fa52:	f000 f80f 	bl	803fa74 <IntToUnicode>
  }
}
 803fa56:	bf00      	nop
 803fa58:	3710      	adds	r7, #16
 803fa5a:	46bd      	mov	sp, r7
 803fa5c:	bd80      	pop	{r7, pc}
 803fa5e:	bf00      	nop
 803fa60:	1ff1e800 	.word	0x1ff1e800
 803fa64:	1ff1e804 	.word	0x1ff1e804
 803fa68:	1ff1e808 	.word	0x1ff1e808
 803fa6c:	240000ea 	.word	0x240000ea
 803fa70:	240000fa 	.word	0x240000fa

0803fa74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 803fa74:	b480      	push	{r7}
 803fa76:	b087      	sub	sp, #28
 803fa78:	af00      	add	r7, sp, #0
 803fa7a:	60f8      	str	r0, [r7, #12]
 803fa7c:	60b9      	str	r1, [r7, #8]
 803fa7e:	4613      	mov	r3, r2
 803fa80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 803fa82:	2300      	movs	r3, #0
 803fa84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 803fa86:	2300      	movs	r3, #0
 803fa88:	75fb      	strb	r3, [r7, #23]
 803fa8a:	e027      	b.n	803fadc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 803fa8c:	68fb      	ldr	r3, [r7, #12]
 803fa8e:	0f1b      	lsrs	r3, r3, #28
 803fa90:	2b09      	cmp	r3, #9
 803fa92:	d80b      	bhi.n	803faac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 803fa94:	68fb      	ldr	r3, [r7, #12]
 803fa96:	0f1b      	lsrs	r3, r3, #28
 803fa98:	b2da      	uxtb	r2, r3
 803fa9a:	7dfb      	ldrb	r3, [r7, #23]
 803fa9c:	005b      	lsls	r3, r3, #1
 803fa9e:	4619      	mov	r1, r3
 803faa0:	68bb      	ldr	r3, [r7, #8]
 803faa2:	440b      	add	r3, r1
 803faa4:	3230      	adds	r2, #48	; 0x30
 803faa6:	b2d2      	uxtb	r2, r2
 803faa8:	701a      	strb	r2, [r3, #0]
 803faaa:	e00a      	b.n	803fac2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 803faac:	68fb      	ldr	r3, [r7, #12]
 803faae:	0f1b      	lsrs	r3, r3, #28
 803fab0:	b2da      	uxtb	r2, r3
 803fab2:	7dfb      	ldrb	r3, [r7, #23]
 803fab4:	005b      	lsls	r3, r3, #1
 803fab6:	4619      	mov	r1, r3
 803fab8:	68bb      	ldr	r3, [r7, #8]
 803faba:	440b      	add	r3, r1
 803fabc:	3237      	adds	r2, #55	; 0x37
 803fabe:	b2d2      	uxtb	r2, r2
 803fac0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 803fac2:	68fb      	ldr	r3, [r7, #12]
 803fac4:	011b      	lsls	r3, r3, #4
 803fac6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 803fac8:	7dfb      	ldrb	r3, [r7, #23]
 803faca:	005b      	lsls	r3, r3, #1
 803facc:	3301      	adds	r3, #1
 803face:	68ba      	ldr	r2, [r7, #8]
 803fad0:	4413      	add	r3, r2
 803fad2:	2200      	movs	r2, #0
 803fad4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803fad6:	7dfb      	ldrb	r3, [r7, #23]
 803fad8:	3301      	adds	r3, #1
 803fada:	75fb      	strb	r3, [r7, #23]
 803fadc:	7dfa      	ldrb	r2, [r7, #23]
 803fade:	79fb      	ldrb	r3, [r7, #7]
 803fae0:	429a      	cmp	r2, r3
 803fae2:	d3d3      	bcc.n	803fa8c <IntToUnicode+0x18>
  }
}
 803fae4:	bf00      	nop
 803fae6:	bf00      	nop
 803fae8:	371c      	adds	r7, #28
 803faea:	46bd      	mov	sp, r7
 803faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 803faf0:	4770      	bx	lr
	...

0803faf4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 803faf4:	b580      	push	{r7, lr}
 803faf6:	b0b8      	sub	sp, #224	; 0xe0
 803faf8:	af00      	add	r7, sp, #0
 803fafa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803fafc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803fb00:	2200      	movs	r2, #0
 803fb02:	601a      	str	r2, [r3, #0]
 803fb04:	605a      	str	r2, [r3, #4]
 803fb06:	609a      	str	r2, [r3, #8]
 803fb08:	60da      	str	r2, [r3, #12]
 803fb0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 803fb0c:	f107 0310 	add.w	r3, r7, #16
 803fb10:	22bc      	movs	r2, #188	; 0xbc
 803fb12:	2100      	movs	r1, #0
 803fb14:	4618      	mov	r0, r3
 803fb16:	f000 fbe9 	bl	80402ec <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 803fb1a:	687b      	ldr	r3, [r7, #4]
 803fb1c:	681b      	ldr	r3, [r3, #0]
 803fb1e:	4a2f      	ldr	r2, [pc, #188]	; (803fbdc <HAL_PCD_MspInit+0xe8>)
 803fb20:	4293      	cmp	r3, r2
 803fb22:	d156      	bne.n	803fbd2 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 803fb24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803fb28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 803fb2a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 803fb2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 803fb32:	f107 0310 	add.w	r3, r7, #16
 803fb36:	4618      	mov	r0, r3
 803fb38:	f7f6 fa6e 	bl	8036018 <HAL_RCCEx_PeriphCLKConfig>
 803fb3c:	4603      	mov	r3, r0
 803fb3e:	2b00      	cmp	r3, #0
 803fb40:	d001      	beq.n	803fb46 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 803fb42:	f7ee fa11 	bl	802df68 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 803fb46:	f7f5 fa9d 	bl	8035084 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 803fb4a:	4b25      	ldr	r3, [pc, #148]	; (803fbe0 <HAL_PCD_MspInit+0xec>)
 803fb4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803fb50:	4a23      	ldr	r2, [pc, #140]	; (803fbe0 <HAL_PCD_MspInit+0xec>)
 803fb52:	f043 0301 	orr.w	r3, r3, #1
 803fb56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 803fb5a:	4b21      	ldr	r3, [pc, #132]	; (803fbe0 <HAL_PCD_MspInit+0xec>)
 803fb5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803fb60:	f003 0301 	and.w	r3, r3, #1
 803fb64:	60fb      	str	r3, [r7, #12]
 803fb66:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 803fb68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 803fb6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803fb70:	2302      	movs	r3, #2
 803fb72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803fb76:	2300      	movs	r3, #0
 803fb78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803fb7c:	2300      	movs	r3, #0
 803fb7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 803fb82:	230a      	movs	r3, #10
 803fb84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803fb88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803fb8c:	4619      	mov	r1, r3
 803fb8e:	4815      	ldr	r0, [pc, #84]	; (803fbe4 <HAL_PCD_MspInit+0xf0>)
 803fb90:	f7f2 fdf2 	bl	8032778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 803fb94:	4b12      	ldr	r3, [pc, #72]	; (803fbe0 <HAL_PCD_MspInit+0xec>)
 803fb96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803fb9a:	4a11      	ldr	r2, [pc, #68]	; (803fbe0 <HAL_PCD_MspInit+0xec>)
 803fb9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803fba0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 803fba4:	4b0e      	ldr	r3, [pc, #56]	; (803fbe0 <HAL_PCD_MspInit+0xec>)
 803fba6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803fbaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803fbae:	60bb      	str	r3, [r7, #8]
 803fbb0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 803fbb2:	2200      	movs	r2, #0
 803fbb4:	2100      	movs	r1, #0
 803fbb6:	2062      	movs	r0, #98	; 0x62
 803fbb8:	f7ef fd8b 	bl	802f6d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 803fbbc:	2062      	movs	r0, #98	; 0x62
 803fbbe:	f7ef fda2 	bl	802f706 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 803fbc2:	2200      	movs	r2, #0
 803fbc4:	2100      	movs	r1, #0
 803fbc6:	2065      	movs	r0, #101	; 0x65
 803fbc8:	f7ef fd83 	bl	802f6d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 803fbcc:	2065      	movs	r0, #101	; 0x65
 803fbce:	f7ef fd9a 	bl	802f706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 803fbd2:	bf00      	nop
 803fbd4:	37e0      	adds	r7, #224	; 0xe0
 803fbd6:	46bd      	mov	sp, r7
 803fbd8:	bd80      	pop	{r7, pc}
 803fbda:	bf00      	nop
 803fbdc:	40080000 	.word	0x40080000
 803fbe0:	58024400 	.word	0x58024400
 803fbe4:	58020000 	.word	0x58020000

0803fbe8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803fbe8:	b580      	push	{r7, lr}
 803fbea:	b082      	sub	sp, #8
 803fbec:	af00      	add	r7, sp, #0
 803fbee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 803fbf0:	687b      	ldr	r3, [r7, #4]
 803fbf2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 803fbf6:	687b      	ldr	r3, [r7, #4]
 803fbf8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803fbfc:	4619      	mov	r1, r3
 803fbfe:	4610      	mov	r0, r2
 803fc00:	f7fe fb57 	bl	803e2b2 <USBD_LL_SetupStage>
}
 803fc04:	bf00      	nop
 803fc06:	3708      	adds	r7, #8
 803fc08:	46bd      	mov	sp, r7
 803fc0a:	bd80      	pop	{r7, pc}

0803fc0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803fc0c:	b580      	push	{r7, lr}
 803fc0e:	b082      	sub	sp, #8
 803fc10:	af00      	add	r7, sp, #0
 803fc12:	6078      	str	r0, [r7, #4]
 803fc14:	460b      	mov	r3, r1
 803fc16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 803fc18:	687b      	ldr	r3, [r7, #4]
 803fc1a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803fc1e:	78fa      	ldrb	r2, [r7, #3]
 803fc20:	6879      	ldr	r1, [r7, #4]
 803fc22:	4613      	mov	r3, r2
 803fc24:	00db      	lsls	r3, r3, #3
 803fc26:	4413      	add	r3, r2
 803fc28:	009b      	lsls	r3, r3, #2
 803fc2a:	440b      	add	r3, r1
 803fc2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 803fc30:	681a      	ldr	r2, [r3, #0]
 803fc32:	78fb      	ldrb	r3, [r7, #3]
 803fc34:	4619      	mov	r1, r3
 803fc36:	f7fe fb91 	bl	803e35c <USBD_LL_DataOutStage>
}
 803fc3a:	bf00      	nop
 803fc3c:	3708      	adds	r7, #8
 803fc3e:	46bd      	mov	sp, r7
 803fc40:	bd80      	pop	{r7, pc}

0803fc42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803fc42:	b580      	push	{r7, lr}
 803fc44:	b082      	sub	sp, #8
 803fc46:	af00      	add	r7, sp, #0
 803fc48:	6078      	str	r0, [r7, #4]
 803fc4a:	460b      	mov	r3, r1
 803fc4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 803fc4e:	687b      	ldr	r3, [r7, #4]
 803fc50:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803fc54:	78fa      	ldrb	r2, [r7, #3]
 803fc56:	6879      	ldr	r1, [r7, #4]
 803fc58:	4613      	mov	r3, r2
 803fc5a:	00db      	lsls	r3, r3, #3
 803fc5c:	4413      	add	r3, r2
 803fc5e:	009b      	lsls	r3, r3, #2
 803fc60:	440b      	add	r3, r1
 803fc62:	334c      	adds	r3, #76	; 0x4c
 803fc64:	681a      	ldr	r2, [r3, #0]
 803fc66:	78fb      	ldrb	r3, [r7, #3]
 803fc68:	4619      	mov	r1, r3
 803fc6a:	f7fe fc2a 	bl	803e4c2 <USBD_LL_DataInStage>
}
 803fc6e:	bf00      	nop
 803fc70:	3708      	adds	r7, #8
 803fc72:	46bd      	mov	sp, r7
 803fc74:	bd80      	pop	{r7, pc}

0803fc76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803fc76:	b580      	push	{r7, lr}
 803fc78:	b082      	sub	sp, #8
 803fc7a:	af00      	add	r7, sp, #0
 803fc7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803fc7e:	687b      	ldr	r3, [r7, #4]
 803fc80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803fc84:	4618      	mov	r0, r3
 803fc86:	f7fe fd5e 	bl	803e746 <USBD_LL_SOF>
}
 803fc8a:	bf00      	nop
 803fc8c:	3708      	adds	r7, #8
 803fc8e:	46bd      	mov	sp, r7
 803fc90:	bd80      	pop	{r7, pc}

0803fc92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803fc92:	b580      	push	{r7, lr}
 803fc94:	b084      	sub	sp, #16
 803fc96:	af00      	add	r7, sp, #0
 803fc98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 803fc9a:	2301      	movs	r3, #1
 803fc9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 803fc9e:	687b      	ldr	r3, [r7, #4]
 803fca0:	68db      	ldr	r3, [r3, #12]
 803fca2:	2b00      	cmp	r3, #0
 803fca4:	d102      	bne.n	803fcac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 803fca6:	2300      	movs	r3, #0
 803fca8:	73fb      	strb	r3, [r7, #15]
 803fcaa:	e008      	b.n	803fcbe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 803fcac:	687b      	ldr	r3, [r7, #4]
 803fcae:	68db      	ldr	r3, [r3, #12]
 803fcb0:	2b02      	cmp	r3, #2
 803fcb2:	d102      	bne.n	803fcba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 803fcb4:	2301      	movs	r3, #1
 803fcb6:	73fb      	strb	r3, [r7, #15]
 803fcb8:	e001      	b.n	803fcbe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 803fcba:	f7ee f955 	bl	802df68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 803fcbe:	687b      	ldr	r3, [r7, #4]
 803fcc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803fcc4:	7bfa      	ldrb	r2, [r7, #15]
 803fcc6:	4611      	mov	r1, r2
 803fcc8:	4618      	mov	r0, r3
 803fcca:	f7fe fcfe 	bl	803e6ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 803fcce:	687b      	ldr	r3, [r7, #4]
 803fcd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803fcd4:	4618      	mov	r0, r3
 803fcd6:	f7fe fca6 	bl	803e626 <USBD_LL_Reset>
}
 803fcda:	bf00      	nop
 803fcdc:	3710      	adds	r7, #16
 803fcde:	46bd      	mov	sp, r7
 803fce0:	bd80      	pop	{r7, pc}
	...

0803fce4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803fce4:	b580      	push	{r7, lr}
 803fce6:	b082      	sub	sp, #8
 803fce8:	af00      	add	r7, sp, #0
 803fcea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803fcec:	687b      	ldr	r3, [r7, #4]
 803fcee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803fcf2:	4618      	mov	r0, r3
 803fcf4:	f7fe fcf9 	bl	803e6ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 803fcf8:	687b      	ldr	r3, [r7, #4]
 803fcfa:	681b      	ldr	r3, [r3, #0]
 803fcfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803fd00:	681b      	ldr	r3, [r3, #0]
 803fd02:	687a      	ldr	r2, [r7, #4]
 803fd04:	6812      	ldr	r2, [r2, #0]
 803fd06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803fd0a:	f043 0301 	orr.w	r3, r3, #1
 803fd0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 803fd10:	687b      	ldr	r3, [r7, #4]
 803fd12:	6a1b      	ldr	r3, [r3, #32]
 803fd14:	2b00      	cmp	r3, #0
 803fd16:	d005      	beq.n	803fd24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803fd18:	4b04      	ldr	r3, [pc, #16]	; (803fd2c <HAL_PCD_SuspendCallback+0x48>)
 803fd1a:	691b      	ldr	r3, [r3, #16]
 803fd1c:	4a03      	ldr	r2, [pc, #12]	; (803fd2c <HAL_PCD_SuspendCallback+0x48>)
 803fd1e:	f043 0306 	orr.w	r3, r3, #6
 803fd22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 803fd24:	bf00      	nop
 803fd26:	3708      	adds	r7, #8
 803fd28:	46bd      	mov	sp, r7
 803fd2a:	bd80      	pop	{r7, pc}
 803fd2c:	e000ed00 	.word	0xe000ed00

0803fd30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803fd30:	b580      	push	{r7, lr}
 803fd32:	b082      	sub	sp, #8
 803fd34:	af00      	add	r7, sp, #0
 803fd36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 803fd38:	687b      	ldr	r3, [r7, #4]
 803fd3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803fd3e:	4618      	mov	r0, r3
 803fd40:	f7fe fce9 	bl	803e716 <USBD_LL_Resume>
}
 803fd44:	bf00      	nop
 803fd46:	3708      	adds	r7, #8
 803fd48:	46bd      	mov	sp, r7
 803fd4a:	bd80      	pop	{r7, pc}

0803fd4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803fd4c:	b580      	push	{r7, lr}
 803fd4e:	b082      	sub	sp, #8
 803fd50:	af00      	add	r7, sp, #0
 803fd52:	6078      	str	r0, [r7, #4]
 803fd54:	460b      	mov	r3, r1
 803fd56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803fd58:	687b      	ldr	r3, [r7, #4]
 803fd5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803fd5e:	78fa      	ldrb	r2, [r7, #3]
 803fd60:	4611      	mov	r1, r2
 803fd62:	4618      	mov	r0, r3
 803fd64:	f7fe fd41 	bl	803e7ea <USBD_LL_IsoOUTIncomplete>
}
 803fd68:	bf00      	nop
 803fd6a:	3708      	adds	r7, #8
 803fd6c:	46bd      	mov	sp, r7
 803fd6e:	bd80      	pop	{r7, pc}

0803fd70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803fd70:	b580      	push	{r7, lr}
 803fd72:	b082      	sub	sp, #8
 803fd74:	af00      	add	r7, sp, #0
 803fd76:	6078      	str	r0, [r7, #4]
 803fd78:	460b      	mov	r3, r1
 803fd7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803fd7c:	687b      	ldr	r3, [r7, #4]
 803fd7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803fd82:	78fa      	ldrb	r2, [r7, #3]
 803fd84:	4611      	mov	r1, r2
 803fd86:	4618      	mov	r0, r3
 803fd88:	f7fe fcfd 	bl	803e786 <USBD_LL_IsoINIncomplete>
}
 803fd8c:	bf00      	nop
 803fd8e:	3708      	adds	r7, #8
 803fd90:	46bd      	mov	sp, r7
 803fd92:	bd80      	pop	{r7, pc}

0803fd94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803fd94:	b580      	push	{r7, lr}
 803fd96:	b082      	sub	sp, #8
 803fd98:	af00      	add	r7, sp, #0
 803fd9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 803fd9c:	687b      	ldr	r3, [r7, #4]
 803fd9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803fda2:	4618      	mov	r0, r3
 803fda4:	f7fe fd53 	bl	803e84e <USBD_LL_DevConnected>
}
 803fda8:	bf00      	nop
 803fdaa:	3708      	adds	r7, #8
 803fdac:	46bd      	mov	sp, r7
 803fdae:	bd80      	pop	{r7, pc}

0803fdb0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803fdb0:	b580      	push	{r7, lr}
 803fdb2:	b082      	sub	sp, #8
 803fdb4:	af00      	add	r7, sp, #0
 803fdb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 803fdb8:	687b      	ldr	r3, [r7, #4]
 803fdba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803fdbe:	4618      	mov	r0, r3
 803fdc0:	f7fe fd50 	bl	803e864 <USBD_LL_DevDisconnected>
}
 803fdc4:	bf00      	nop
 803fdc6:	3708      	adds	r7, #8
 803fdc8:	46bd      	mov	sp, r7
 803fdca:	bd80      	pop	{r7, pc}

0803fdcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 803fdcc:	b580      	push	{r7, lr}
 803fdce:	b082      	sub	sp, #8
 803fdd0:	af00      	add	r7, sp, #0
 803fdd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 803fdd4:	687b      	ldr	r3, [r7, #4]
 803fdd6:	781b      	ldrb	r3, [r3, #0]
 803fdd8:	2b00      	cmp	r3, #0
 803fdda:	d13e      	bne.n	803fe5a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 803fddc:	4a21      	ldr	r2, [pc, #132]	; (803fe64 <USBD_LL_Init+0x98>)
 803fdde:	687b      	ldr	r3, [r7, #4]
 803fde0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 803fde4:	687b      	ldr	r3, [r7, #4]
 803fde6:	4a1f      	ldr	r2, [pc, #124]	; (803fe64 <USBD_LL_Init+0x98>)
 803fde8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 803fdec:	4b1d      	ldr	r3, [pc, #116]	; (803fe64 <USBD_LL_Init+0x98>)
 803fdee:	4a1e      	ldr	r2, [pc, #120]	; (803fe68 <USBD_LL_Init+0x9c>)
 803fdf0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 803fdf2:	4b1c      	ldr	r3, [pc, #112]	; (803fe64 <USBD_LL_Init+0x98>)
 803fdf4:	2209      	movs	r2, #9
 803fdf6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803fdf8:	4b1a      	ldr	r3, [pc, #104]	; (803fe64 <USBD_LL_Init+0x98>)
 803fdfa:	2202      	movs	r2, #2
 803fdfc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 803fdfe:	4b19      	ldr	r3, [pc, #100]	; (803fe64 <USBD_LL_Init+0x98>)
 803fe00:	2200      	movs	r2, #0
 803fe02:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803fe04:	4b17      	ldr	r3, [pc, #92]	; (803fe64 <USBD_LL_Init+0x98>)
 803fe06:	2202      	movs	r2, #2
 803fe08:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 803fe0a:	4b16      	ldr	r3, [pc, #88]	; (803fe64 <USBD_LL_Init+0x98>)
 803fe0c:	2200      	movs	r2, #0
 803fe0e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 803fe10:	4b14      	ldr	r3, [pc, #80]	; (803fe64 <USBD_LL_Init+0x98>)
 803fe12:	2200      	movs	r2, #0
 803fe14:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 803fe16:	4b13      	ldr	r3, [pc, #76]	; (803fe64 <USBD_LL_Init+0x98>)
 803fe18:	2200      	movs	r2, #0
 803fe1a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 803fe1c:	4b11      	ldr	r3, [pc, #68]	; (803fe64 <USBD_LL_Init+0x98>)
 803fe1e:	2200      	movs	r2, #0
 803fe20:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 803fe22:	4b10      	ldr	r3, [pc, #64]	; (803fe64 <USBD_LL_Init+0x98>)
 803fe24:	2200      	movs	r2, #0
 803fe26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 803fe28:	4b0e      	ldr	r3, [pc, #56]	; (803fe64 <USBD_LL_Init+0x98>)
 803fe2a:	2200      	movs	r2, #0
 803fe2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803fe2e:	480d      	ldr	r0, [pc, #52]	; (803fe64 <USBD_LL_Init+0x98>)
 803fe30:	f7f3 fe18 	bl	8033a64 <HAL_PCD_Init>
 803fe34:	4603      	mov	r3, r0
 803fe36:	2b00      	cmp	r3, #0
 803fe38:	d001      	beq.n	803fe3e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 803fe3a:	f7ee f895 	bl	802df68 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803fe3e:	2180      	movs	r1, #128	; 0x80
 803fe40:	4808      	ldr	r0, [pc, #32]	; (803fe64 <USBD_LL_Init+0x98>)
 803fe42:	f7f5 f8a4 	bl	8034f8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 803fe46:	2240      	movs	r2, #64	; 0x40
 803fe48:	2100      	movs	r1, #0
 803fe4a:	4806      	ldr	r0, [pc, #24]	; (803fe64 <USBD_LL_Init+0x98>)
 803fe4c:	f7f5 f858 	bl	8034f00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 803fe50:	2280      	movs	r2, #128	; 0x80
 803fe52:	2101      	movs	r1, #1
 803fe54:	4803      	ldr	r0, [pc, #12]	; (803fe64 <USBD_LL_Init+0x98>)
 803fe56:	f7f5 f853 	bl	8034f00 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 803fe5a:	2300      	movs	r3, #0
}
 803fe5c:	4618      	mov	r0, r3
 803fe5e:	3708      	adds	r7, #8
 803fe60:	46bd      	mov	sp, r7
 803fe62:	bd80      	pop	{r7, pc}
 803fe64:	24025484 	.word	0x24025484
 803fe68:	40080000 	.word	0x40080000

0803fe6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 803fe6c:	b580      	push	{r7, lr}
 803fe6e:	b084      	sub	sp, #16
 803fe70:	af00      	add	r7, sp, #0
 803fe72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803fe74:	2300      	movs	r3, #0
 803fe76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803fe78:	2300      	movs	r3, #0
 803fe7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 803fe7c:	687b      	ldr	r3, [r7, #4]
 803fe7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803fe82:	4618      	mov	r0, r3
 803fe84:	f7f3 ff12 	bl	8033cac <HAL_PCD_Start>
 803fe88:	4603      	mov	r3, r0
 803fe8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803fe8c:	7bfb      	ldrb	r3, [r7, #15]
 803fe8e:	4618      	mov	r0, r3
 803fe90:	f000 f942 	bl	8040118 <USBD_Get_USB_Status>
 803fe94:	4603      	mov	r3, r0
 803fe96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803fe98:	7bbb      	ldrb	r3, [r7, #14]
}
 803fe9a:	4618      	mov	r0, r3
 803fe9c:	3710      	adds	r7, #16
 803fe9e:	46bd      	mov	sp, r7
 803fea0:	bd80      	pop	{r7, pc}

0803fea2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 803fea2:	b580      	push	{r7, lr}
 803fea4:	b084      	sub	sp, #16
 803fea6:	af00      	add	r7, sp, #0
 803fea8:	6078      	str	r0, [r7, #4]
 803feaa:	4608      	mov	r0, r1
 803feac:	4611      	mov	r1, r2
 803feae:	461a      	mov	r2, r3
 803feb0:	4603      	mov	r3, r0
 803feb2:	70fb      	strb	r3, [r7, #3]
 803feb4:	460b      	mov	r3, r1
 803feb6:	70bb      	strb	r3, [r7, #2]
 803feb8:	4613      	mov	r3, r2
 803feba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803febc:	2300      	movs	r3, #0
 803febe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803fec0:	2300      	movs	r3, #0
 803fec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 803fec4:	687b      	ldr	r3, [r7, #4]
 803fec6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803feca:	78bb      	ldrb	r3, [r7, #2]
 803fecc:	883a      	ldrh	r2, [r7, #0]
 803fece:	78f9      	ldrb	r1, [r7, #3]
 803fed0:	f7f4 fc10 	bl	80346f4 <HAL_PCD_EP_Open>
 803fed4:	4603      	mov	r3, r0
 803fed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803fed8:	7bfb      	ldrb	r3, [r7, #15]
 803feda:	4618      	mov	r0, r3
 803fedc:	f000 f91c 	bl	8040118 <USBD_Get_USB_Status>
 803fee0:	4603      	mov	r3, r0
 803fee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803fee4:	7bbb      	ldrb	r3, [r7, #14]
}
 803fee6:	4618      	mov	r0, r3
 803fee8:	3710      	adds	r7, #16
 803feea:	46bd      	mov	sp, r7
 803feec:	bd80      	pop	{r7, pc}

0803feee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803feee:	b580      	push	{r7, lr}
 803fef0:	b084      	sub	sp, #16
 803fef2:	af00      	add	r7, sp, #0
 803fef4:	6078      	str	r0, [r7, #4]
 803fef6:	460b      	mov	r3, r1
 803fef8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803fefa:	2300      	movs	r3, #0
 803fefc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803fefe:	2300      	movs	r3, #0
 803ff00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 803ff02:	687b      	ldr	r3, [r7, #4]
 803ff04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ff08:	78fa      	ldrb	r2, [r7, #3]
 803ff0a:	4611      	mov	r1, r2
 803ff0c:	4618      	mov	r0, r3
 803ff0e:	f7f4 fc59 	bl	80347c4 <HAL_PCD_EP_Close>
 803ff12:	4603      	mov	r3, r0
 803ff14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ff16:	7bfb      	ldrb	r3, [r7, #15]
 803ff18:	4618      	mov	r0, r3
 803ff1a:	f000 f8fd 	bl	8040118 <USBD_Get_USB_Status>
 803ff1e:	4603      	mov	r3, r0
 803ff20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ff22:	7bbb      	ldrb	r3, [r7, #14]
}
 803ff24:	4618      	mov	r0, r3
 803ff26:	3710      	adds	r7, #16
 803ff28:	46bd      	mov	sp, r7
 803ff2a:	bd80      	pop	{r7, pc}

0803ff2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ff2c:	b580      	push	{r7, lr}
 803ff2e:	b084      	sub	sp, #16
 803ff30:	af00      	add	r7, sp, #0
 803ff32:	6078      	str	r0, [r7, #4]
 803ff34:	460b      	mov	r3, r1
 803ff36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ff38:	2300      	movs	r3, #0
 803ff3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ff3c:	2300      	movs	r3, #0
 803ff3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 803ff40:	687b      	ldr	r3, [r7, #4]
 803ff42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ff46:	78fa      	ldrb	r2, [r7, #3]
 803ff48:	4611      	mov	r1, r2
 803ff4a:	4618      	mov	r0, r3
 803ff4c:	f7f4 fd31 	bl	80349b2 <HAL_PCD_EP_SetStall>
 803ff50:	4603      	mov	r3, r0
 803ff52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ff54:	7bfb      	ldrb	r3, [r7, #15]
 803ff56:	4618      	mov	r0, r3
 803ff58:	f000 f8de 	bl	8040118 <USBD_Get_USB_Status>
 803ff5c:	4603      	mov	r3, r0
 803ff5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ff60:	7bbb      	ldrb	r3, [r7, #14]
}
 803ff62:	4618      	mov	r0, r3
 803ff64:	3710      	adds	r7, #16
 803ff66:	46bd      	mov	sp, r7
 803ff68:	bd80      	pop	{r7, pc}

0803ff6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ff6a:	b580      	push	{r7, lr}
 803ff6c:	b084      	sub	sp, #16
 803ff6e:	af00      	add	r7, sp, #0
 803ff70:	6078      	str	r0, [r7, #4]
 803ff72:	460b      	mov	r3, r1
 803ff74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ff76:	2300      	movs	r3, #0
 803ff78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ff7a:	2300      	movs	r3, #0
 803ff7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803ff7e:	687b      	ldr	r3, [r7, #4]
 803ff80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ff84:	78fa      	ldrb	r2, [r7, #3]
 803ff86:	4611      	mov	r1, r2
 803ff88:	4618      	mov	r0, r3
 803ff8a:	f7f4 fd76 	bl	8034a7a <HAL_PCD_EP_ClrStall>
 803ff8e:	4603      	mov	r3, r0
 803ff90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ff92:	7bfb      	ldrb	r3, [r7, #15]
 803ff94:	4618      	mov	r0, r3
 803ff96:	f000 f8bf 	bl	8040118 <USBD_Get_USB_Status>
 803ff9a:	4603      	mov	r3, r0
 803ff9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ff9e:	7bbb      	ldrb	r3, [r7, #14]
}
 803ffa0:	4618      	mov	r0, r3
 803ffa2:	3710      	adds	r7, #16
 803ffa4:	46bd      	mov	sp, r7
 803ffa6:	bd80      	pop	{r7, pc}

0803ffa8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ffa8:	b480      	push	{r7}
 803ffaa:	b085      	sub	sp, #20
 803ffac:	af00      	add	r7, sp, #0
 803ffae:	6078      	str	r0, [r7, #4]
 803ffb0:	460b      	mov	r3, r1
 803ffb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 803ffb4:	687b      	ldr	r3, [r7, #4]
 803ffb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ffba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 803ffbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803ffc0:	2b00      	cmp	r3, #0
 803ffc2:	da0b      	bge.n	803ffdc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 803ffc4:	78fb      	ldrb	r3, [r7, #3]
 803ffc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803ffca:	68f9      	ldr	r1, [r7, #12]
 803ffcc:	4613      	mov	r3, r2
 803ffce:	00db      	lsls	r3, r3, #3
 803ffd0:	4413      	add	r3, r2
 803ffd2:	009b      	lsls	r3, r3, #2
 803ffd4:	440b      	add	r3, r1
 803ffd6:	333e      	adds	r3, #62	; 0x3e
 803ffd8:	781b      	ldrb	r3, [r3, #0]
 803ffda:	e00b      	b.n	803fff4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 803ffdc:	78fb      	ldrb	r3, [r7, #3]
 803ffde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803ffe2:	68f9      	ldr	r1, [r7, #12]
 803ffe4:	4613      	mov	r3, r2
 803ffe6:	00db      	lsls	r3, r3, #3
 803ffe8:	4413      	add	r3, r2
 803ffea:	009b      	lsls	r3, r3, #2
 803ffec:	440b      	add	r3, r1
 803ffee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 803fff2:	781b      	ldrb	r3, [r3, #0]
  }
}
 803fff4:	4618      	mov	r0, r3
 803fff6:	3714      	adds	r7, #20
 803fff8:	46bd      	mov	sp, r7
 803fffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 803fffe:	4770      	bx	lr

08040000 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8040000:	b580      	push	{r7, lr}
 8040002:	b084      	sub	sp, #16
 8040004:	af00      	add	r7, sp, #0
 8040006:	6078      	str	r0, [r7, #4]
 8040008:	460b      	mov	r3, r1
 804000a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804000c:	2300      	movs	r3, #0
 804000e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8040010:	2300      	movs	r3, #0
 8040012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8040014:	687b      	ldr	r3, [r7, #4]
 8040016:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 804001a:	78fa      	ldrb	r2, [r7, #3]
 804001c:	4611      	mov	r1, r2
 804001e:	4618      	mov	r0, r3
 8040020:	f7f4 fb43 	bl	80346aa <HAL_PCD_SetAddress>
 8040024:	4603      	mov	r3, r0
 8040026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8040028:	7bfb      	ldrb	r3, [r7, #15]
 804002a:	4618      	mov	r0, r3
 804002c:	f000 f874 	bl	8040118 <USBD_Get_USB_Status>
 8040030:	4603      	mov	r3, r0
 8040032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8040034:	7bbb      	ldrb	r3, [r7, #14]
}
 8040036:	4618      	mov	r0, r3
 8040038:	3710      	adds	r7, #16
 804003a:	46bd      	mov	sp, r7
 804003c:	bd80      	pop	{r7, pc}

0804003e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 804003e:	b580      	push	{r7, lr}
 8040040:	b086      	sub	sp, #24
 8040042:	af00      	add	r7, sp, #0
 8040044:	60f8      	str	r0, [r7, #12]
 8040046:	607a      	str	r2, [r7, #4]
 8040048:	603b      	str	r3, [r7, #0]
 804004a:	460b      	mov	r3, r1
 804004c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804004e:	2300      	movs	r3, #0
 8040050:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8040052:	2300      	movs	r3, #0
 8040054:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8040056:	68fb      	ldr	r3, [r7, #12]
 8040058:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 804005c:	7af9      	ldrb	r1, [r7, #11]
 804005e:	683b      	ldr	r3, [r7, #0]
 8040060:	687a      	ldr	r2, [r7, #4]
 8040062:	f7f4 fc5c 	bl	803491e <HAL_PCD_EP_Transmit>
 8040066:	4603      	mov	r3, r0
 8040068:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 804006a:	7dfb      	ldrb	r3, [r7, #23]
 804006c:	4618      	mov	r0, r3
 804006e:	f000 f853 	bl	8040118 <USBD_Get_USB_Status>
 8040072:	4603      	mov	r3, r0
 8040074:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8040076:	7dbb      	ldrb	r3, [r7, #22]
}
 8040078:	4618      	mov	r0, r3
 804007a:	3718      	adds	r7, #24
 804007c:	46bd      	mov	sp, r7
 804007e:	bd80      	pop	{r7, pc}

08040080 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8040080:	b580      	push	{r7, lr}
 8040082:	b086      	sub	sp, #24
 8040084:	af00      	add	r7, sp, #0
 8040086:	60f8      	str	r0, [r7, #12]
 8040088:	607a      	str	r2, [r7, #4]
 804008a:	603b      	str	r3, [r7, #0]
 804008c:	460b      	mov	r3, r1
 804008e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8040090:	2300      	movs	r3, #0
 8040092:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8040094:	2300      	movs	r3, #0
 8040096:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8040098:	68fb      	ldr	r3, [r7, #12]
 804009a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 804009e:	7af9      	ldrb	r1, [r7, #11]
 80400a0:	683b      	ldr	r3, [r7, #0]
 80400a2:	687a      	ldr	r2, [r7, #4]
 80400a4:	f7f4 fbd8 	bl	8034858 <HAL_PCD_EP_Receive>
 80400a8:	4603      	mov	r3, r0
 80400aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80400ac:	7dfb      	ldrb	r3, [r7, #23]
 80400ae:	4618      	mov	r0, r3
 80400b0:	f000 f832 	bl	8040118 <USBD_Get_USB_Status>
 80400b4:	4603      	mov	r3, r0
 80400b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80400b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80400ba:	4618      	mov	r0, r3
 80400bc:	3718      	adds	r7, #24
 80400be:	46bd      	mov	sp, r7
 80400c0:	bd80      	pop	{r7, pc}

080400c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80400c2:	b580      	push	{r7, lr}
 80400c4:	b082      	sub	sp, #8
 80400c6:	af00      	add	r7, sp, #0
 80400c8:	6078      	str	r0, [r7, #4]
 80400ca:	460b      	mov	r3, r1
 80400cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80400ce:	687b      	ldr	r3, [r7, #4]
 80400d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80400d4:	78fa      	ldrb	r2, [r7, #3]
 80400d6:	4611      	mov	r1, r2
 80400d8:	4618      	mov	r0, r3
 80400da:	f7f4 fc08 	bl	80348ee <HAL_PCD_EP_GetRxCount>
 80400de:	4603      	mov	r3, r0
}
 80400e0:	4618      	mov	r0, r3
 80400e2:	3708      	adds	r7, #8
 80400e4:	46bd      	mov	sp, r7
 80400e6:	bd80      	pop	{r7, pc}

080400e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80400e8:	b480      	push	{r7}
 80400ea:	b083      	sub	sp, #12
 80400ec:	af00      	add	r7, sp, #0
 80400ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80400f0:	4b03      	ldr	r3, [pc, #12]	; (8040100 <USBD_static_malloc+0x18>)
}
 80400f2:	4618      	mov	r0, r3
 80400f4:	370c      	adds	r7, #12
 80400f6:	46bd      	mov	sp, r7
 80400f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80400fc:	4770      	bx	lr
 80400fe:	bf00      	nop
 8040100:	24025990 	.word	0x24025990

08040104 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8040104:	b480      	push	{r7}
 8040106:	b083      	sub	sp, #12
 8040108:	af00      	add	r7, sp, #0
 804010a:	6078      	str	r0, [r7, #4]

}
 804010c:	bf00      	nop
 804010e:	370c      	adds	r7, #12
 8040110:	46bd      	mov	sp, r7
 8040112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040116:	4770      	bx	lr

08040118 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8040118:	b480      	push	{r7}
 804011a:	b085      	sub	sp, #20
 804011c:	af00      	add	r7, sp, #0
 804011e:	4603      	mov	r3, r0
 8040120:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8040122:	2300      	movs	r3, #0
 8040124:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8040126:	79fb      	ldrb	r3, [r7, #7]
 8040128:	2b03      	cmp	r3, #3
 804012a:	d817      	bhi.n	804015c <USBD_Get_USB_Status+0x44>
 804012c:	a201      	add	r2, pc, #4	; (adr r2, 8040134 <USBD_Get_USB_Status+0x1c>)
 804012e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8040132:	bf00      	nop
 8040134:	08040145 	.word	0x08040145
 8040138:	0804014b 	.word	0x0804014b
 804013c:	08040151 	.word	0x08040151
 8040140:	08040157 	.word	0x08040157
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8040144:	2300      	movs	r3, #0
 8040146:	73fb      	strb	r3, [r7, #15]
    break;
 8040148:	e00b      	b.n	8040162 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 804014a:	2303      	movs	r3, #3
 804014c:	73fb      	strb	r3, [r7, #15]
    break;
 804014e:	e008      	b.n	8040162 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8040150:	2301      	movs	r3, #1
 8040152:	73fb      	strb	r3, [r7, #15]
    break;
 8040154:	e005      	b.n	8040162 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8040156:	2303      	movs	r3, #3
 8040158:	73fb      	strb	r3, [r7, #15]
    break;
 804015a:	e002      	b.n	8040162 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 804015c:	2303      	movs	r3, #3
 804015e:	73fb      	strb	r3, [r7, #15]
    break;
 8040160:	bf00      	nop
  }
  return usb_status;
 8040162:	7bfb      	ldrb	r3, [r7, #15]
}
 8040164:	4618      	mov	r0, r3
 8040166:	3714      	adds	r7, #20
 8040168:	46bd      	mov	sp, r7
 804016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804016e:	4770      	bx	lr

08040170 <_ZdlPvj>:
 8040170:	f000 b817 	b.w	80401a2 <_ZdlPv>

08040174 <_Znwj>:
 8040174:	2801      	cmp	r0, #1
 8040176:	bf38      	it	cc
 8040178:	2001      	movcc	r0, #1
 804017a:	b510      	push	{r4, lr}
 804017c:	4604      	mov	r4, r0
 804017e:	4620      	mov	r0, r4
 8040180:	f000 f87c 	bl	804027c <malloc>
 8040184:	b930      	cbnz	r0, 8040194 <_Znwj+0x20>
 8040186:	f000 f80f 	bl	80401a8 <_ZSt15get_new_handlerv>
 804018a:	b908      	cbnz	r0, 8040190 <_Znwj+0x1c>
 804018c:	f000 f814 	bl	80401b8 <abort>
 8040190:	4780      	blx	r0
 8040192:	e7f4      	b.n	804017e <_Znwj+0xa>
 8040194:	bd10      	pop	{r4, pc}

08040196 <_ZSt17__throw_bad_allocv>:
 8040196:	b508      	push	{r3, lr}
 8040198:	f000 f80e 	bl	80401b8 <abort>

0804019c <_ZSt20__throw_length_errorPKc>:
 804019c:	b508      	push	{r3, lr}
 804019e:	f000 f80b 	bl	80401b8 <abort>

080401a2 <_ZdlPv>:
 80401a2:	f000 b873 	b.w	804028c <free>
	...

080401a8 <_ZSt15get_new_handlerv>:
 80401a8:	4b02      	ldr	r3, [pc, #8]	; (80401b4 <_ZSt15get_new_handlerv+0xc>)
 80401aa:	6818      	ldr	r0, [r3, #0]
 80401ac:	f3bf 8f5b 	dmb	ish
 80401b0:	4770      	bx	lr
 80401b2:	bf00      	nop
 80401b4:	24025bb0 	.word	0x24025bb0

080401b8 <abort>:
 80401b8:	b508      	push	{r3, lr}
 80401ba:	2006      	movs	r0, #6
 80401bc:	f000 fca4 	bl	8040b08 <raise>
 80401c0:	2001      	movs	r0, #1
 80401c2:	f7ee f90f 	bl	802e3e4 <_exit>
	...

080401c8 <__assert_func>:
 80401c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80401ca:	4614      	mov	r4, r2
 80401cc:	461a      	mov	r2, r3
 80401ce:	4b09      	ldr	r3, [pc, #36]	; (80401f4 <__assert_func+0x2c>)
 80401d0:	681b      	ldr	r3, [r3, #0]
 80401d2:	4605      	mov	r5, r0
 80401d4:	68d8      	ldr	r0, [r3, #12]
 80401d6:	b14c      	cbz	r4, 80401ec <__assert_func+0x24>
 80401d8:	4b07      	ldr	r3, [pc, #28]	; (80401f8 <__assert_func+0x30>)
 80401da:	9100      	str	r1, [sp, #0]
 80401dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80401e0:	4906      	ldr	r1, [pc, #24]	; (80401fc <__assert_func+0x34>)
 80401e2:	462b      	mov	r3, r5
 80401e4:	f000 f814 	bl	8040210 <fiprintf>
 80401e8:	f7ff ffe6 	bl	80401b8 <abort>
 80401ec:	4b04      	ldr	r3, [pc, #16]	; (8040200 <__assert_func+0x38>)
 80401ee:	461c      	mov	r4, r3
 80401f0:	e7f3      	b.n	80401da <__assert_func+0x12>
 80401f2:	bf00      	nop
 80401f4:	24000104 	.word	0x24000104
 80401f8:	0805c654 	.word	0x0805c654
 80401fc:	0805c661 	.word	0x0805c661
 8040200:	0805c68f 	.word	0x0805c68f

08040204 <__errno>:
 8040204:	4b01      	ldr	r3, [pc, #4]	; (804020c <__errno+0x8>)
 8040206:	6818      	ldr	r0, [r3, #0]
 8040208:	4770      	bx	lr
 804020a:	bf00      	nop
 804020c:	24000104 	.word	0x24000104

08040210 <fiprintf>:
 8040210:	b40e      	push	{r1, r2, r3}
 8040212:	b503      	push	{r0, r1, lr}
 8040214:	4601      	mov	r1, r0
 8040216:	ab03      	add	r3, sp, #12
 8040218:	4805      	ldr	r0, [pc, #20]	; (8040230 <fiprintf+0x20>)
 804021a:	f853 2b04 	ldr.w	r2, [r3], #4
 804021e:	6800      	ldr	r0, [r0, #0]
 8040220:	9301      	str	r3, [sp, #4]
 8040222:	f000 f975 	bl	8040510 <_vfiprintf_r>
 8040226:	b002      	add	sp, #8
 8040228:	f85d eb04 	ldr.w	lr, [sp], #4
 804022c:	b003      	add	sp, #12
 804022e:	4770      	bx	lr
 8040230:	24000104 	.word	0x24000104

08040234 <__libc_init_array>:
 8040234:	b570      	push	{r4, r5, r6, lr}
 8040236:	4d0d      	ldr	r5, [pc, #52]	; (804026c <__libc_init_array+0x38>)
 8040238:	4c0d      	ldr	r4, [pc, #52]	; (8040270 <__libc_init_array+0x3c>)
 804023a:	1b64      	subs	r4, r4, r5
 804023c:	10a4      	asrs	r4, r4, #2
 804023e:	2600      	movs	r6, #0
 8040240:	42a6      	cmp	r6, r4
 8040242:	d109      	bne.n	8040258 <__libc_init_array+0x24>
 8040244:	4d0b      	ldr	r5, [pc, #44]	; (8040274 <__libc_init_array+0x40>)
 8040246:	4c0c      	ldr	r4, [pc, #48]	; (8040278 <__libc_init_array+0x44>)
 8040248:	f001 f812 	bl	8041270 <_init>
 804024c:	1b64      	subs	r4, r4, r5
 804024e:	10a4      	asrs	r4, r4, #2
 8040250:	2600      	movs	r6, #0
 8040252:	42a6      	cmp	r6, r4
 8040254:	d105      	bne.n	8040262 <__libc_init_array+0x2e>
 8040256:	bd70      	pop	{r4, r5, r6, pc}
 8040258:	f855 3b04 	ldr.w	r3, [r5], #4
 804025c:	4798      	blx	r3
 804025e:	3601      	adds	r6, #1
 8040260:	e7ee      	b.n	8040240 <__libc_init_array+0xc>
 8040262:	f855 3b04 	ldr.w	r3, [r5], #4
 8040266:	4798      	blx	r3
 8040268:	3601      	adds	r6, #1
 804026a:	e7f2      	b.n	8040252 <__libc_init_array+0x1e>
 804026c:	0805c730 	.word	0x0805c730
 8040270:	0805c730 	.word	0x0805c730
 8040274:	0805c730 	.word	0x0805c730
 8040278:	0805c738 	.word	0x0805c738

0804027c <malloc>:
 804027c:	4b02      	ldr	r3, [pc, #8]	; (8040288 <malloc+0xc>)
 804027e:	4601      	mov	r1, r0
 8040280:	6818      	ldr	r0, [r3, #0]
 8040282:	f000 b8a7 	b.w	80403d4 <_malloc_r>
 8040286:	bf00      	nop
 8040288:	24000104 	.word	0x24000104

0804028c <free>:
 804028c:	4b02      	ldr	r3, [pc, #8]	; (8040298 <free+0xc>)
 804028e:	4601      	mov	r1, r0
 8040290:	6818      	ldr	r0, [r3, #0]
 8040292:	f000 b833 	b.w	80402fc <_free_r>
 8040296:	bf00      	nop
 8040298:	24000104 	.word	0x24000104

0804029c <memcpy>:
 804029c:	440a      	add	r2, r1
 804029e:	4291      	cmp	r1, r2
 80402a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80402a4:	d100      	bne.n	80402a8 <memcpy+0xc>
 80402a6:	4770      	bx	lr
 80402a8:	b510      	push	{r4, lr}
 80402aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80402ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80402b2:	4291      	cmp	r1, r2
 80402b4:	d1f9      	bne.n	80402aa <memcpy+0xe>
 80402b6:	bd10      	pop	{r4, pc}

080402b8 <memmove>:
 80402b8:	4288      	cmp	r0, r1
 80402ba:	b510      	push	{r4, lr}
 80402bc:	eb01 0402 	add.w	r4, r1, r2
 80402c0:	d902      	bls.n	80402c8 <memmove+0x10>
 80402c2:	4284      	cmp	r4, r0
 80402c4:	4623      	mov	r3, r4
 80402c6:	d807      	bhi.n	80402d8 <memmove+0x20>
 80402c8:	1e43      	subs	r3, r0, #1
 80402ca:	42a1      	cmp	r1, r4
 80402cc:	d008      	beq.n	80402e0 <memmove+0x28>
 80402ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80402d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80402d6:	e7f8      	b.n	80402ca <memmove+0x12>
 80402d8:	4402      	add	r2, r0
 80402da:	4601      	mov	r1, r0
 80402dc:	428a      	cmp	r2, r1
 80402de:	d100      	bne.n	80402e2 <memmove+0x2a>
 80402e0:	bd10      	pop	{r4, pc}
 80402e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80402e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80402ea:	e7f7      	b.n	80402dc <memmove+0x24>

080402ec <memset>:
 80402ec:	4402      	add	r2, r0
 80402ee:	4603      	mov	r3, r0
 80402f0:	4293      	cmp	r3, r2
 80402f2:	d100      	bne.n	80402f6 <memset+0xa>
 80402f4:	4770      	bx	lr
 80402f6:	f803 1b01 	strb.w	r1, [r3], #1
 80402fa:	e7f9      	b.n	80402f0 <memset+0x4>

080402fc <_free_r>:
 80402fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80402fe:	2900      	cmp	r1, #0
 8040300:	d044      	beq.n	804038c <_free_r+0x90>
 8040302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8040306:	9001      	str	r0, [sp, #4]
 8040308:	2b00      	cmp	r3, #0
 804030a:	f1a1 0404 	sub.w	r4, r1, #4
 804030e:	bfb8      	it	lt
 8040310:	18e4      	addlt	r4, r4, r3
 8040312:	f000 fef5 	bl	8041100 <__malloc_lock>
 8040316:	4a1e      	ldr	r2, [pc, #120]	; (8040390 <_free_r+0x94>)
 8040318:	9801      	ldr	r0, [sp, #4]
 804031a:	6813      	ldr	r3, [r2, #0]
 804031c:	b933      	cbnz	r3, 804032c <_free_r+0x30>
 804031e:	6063      	str	r3, [r4, #4]
 8040320:	6014      	str	r4, [r2, #0]
 8040322:	b003      	add	sp, #12
 8040324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8040328:	f000 bef0 	b.w	804110c <__malloc_unlock>
 804032c:	42a3      	cmp	r3, r4
 804032e:	d908      	bls.n	8040342 <_free_r+0x46>
 8040330:	6825      	ldr	r5, [r4, #0]
 8040332:	1961      	adds	r1, r4, r5
 8040334:	428b      	cmp	r3, r1
 8040336:	bf01      	itttt	eq
 8040338:	6819      	ldreq	r1, [r3, #0]
 804033a:	685b      	ldreq	r3, [r3, #4]
 804033c:	1949      	addeq	r1, r1, r5
 804033e:	6021      	streq	r1, [r4, #0]
 8040340:	e7ed      	b.n	804031e <_free_r+0x22>
 8040342:	461a      	mov	r2, r3
 8040344:	685b      	ldr	r3, [r3, #4]
 8040346:	b10b      	cbz	r3, 804034c <_free_r+0x50>
 8040348:	42a3      	cmp	r3, r4
 804034a:	d9fa      	bls.n	8040342 <_free_r+0x46>
 804034c:	6811      	ldr	r1, [r2, #0]
 804034e:	1855      	adds	r5, r2, r1
 8040350:	42a5      	cmp	r5, r4
 8040352:	d10b      	bne.n	804036c <_free_r+0x70>
 8040354:	6824      	ldr	r4, [r4, #0]
 8040356:	4421      	add	r1, r4
 8040358:	1854      	adds	r4, r2, r1
 804035a:	42a3      	cmp	r3, r4
 804035c:	6011      	str	r1, [r2, #0]
 804035e:	d1e0      	bne.n	8040322 <_free_r+0x26>
 8040360:	681c      	ldr	r4, [r3, #0]
 8040362:	685b      	ldr	r3, [r3, #4]
 8040364:	6053      	str	r3, [r2, #4]
 8040366:	4421      	add	r1, r4
 8040368:	6011      	str	r1, [r2, #0]
 804036a:	e7da      	b.n	8040322 <_free_r+0x26>
 804036c:	d902      	bls.n	8040374 <_free_r+0x78>
 804036e:	230c      	movs	r3, #12
 8040370:	6003      	str	r3, [r0, #0]
 8040372:	e7d6      	b.n	8040322 <_free_r+0x26>
 8040374:	6825      	ldr	r5, [r4, #0]
 8040376:	1961      	adds	r1, r4, r5
 8040378:	428b      	cmp	r3, r1
 804037a:	bf04      	itt	eq
 804037c:	6819      	ldreq	r1, [r3, #0]
 804037e:	685b      	ldreq	r3, [r3, #4]
 8040380:	6063      	str	r3, [r4, #4]
 8040382:	bf04      	itt	eq
 8040384:	1949      	addeq	r1, r1, r5
 8040386:	6021      	streq	r1, [r4, #0]
 8040388:	6054      	str	r4, [r2, #4]
 804038a:	e7ca      	b.n	8040322 <_free_r+0x26>
 804038c:	b003      	add	sp, #12
 804038e:	bd30      	pop	{r4, r5, pc}
 8040390:	24025bb4 	.word	0x24025bb4

08040394 <sbrk_aligned>:
 8040394:	b570      	push	{r4, r5, r6, lr}
 8040396:	4e0e      	ldr	r6, [pc, #56]	; (80403d0 <sbrk_aligned+0x3c>)
 8040398:	460c      	mov	r4, r1
 804039a:	6831      	ldr	r1, [r6, #0]
 804039c:	4605      	mov	r5, r0
 804039e:	b911      	cbnz	r1, 80403a6 <sbrk_aligned+0x12>
 80403a0:	f000 fb7a 	bl	8040a98 <_sbrk_r>
 80403a4:	6030      	str	r0, [r6, #0]
 80403a6:	4621      	mov	r1, r4
 80403a8:	4628      	mov	r0, r5
 80403aa:	f000 fb75 	bl	8040a98 <_sbrk_r>
 80403ae:	1c43      	adds	r3, r0, #1
 80403b0:	d00a      	beq.n	80403c8 <sbrk_aligned+0x34>
 80403b2:	1cc4      	adds	r4, r0, #3
 80403b4:	f024 0403 	bic.w	r4, r4, #3
 80403b8:	42a0      	cmp	r0, r4
 80403ba:	d007      	beq.n	80403cc <sbrk_aligned+0x38>
 80403bc:	1a21      	subs	r1, r4, r0
 80403be:	4628      	mov	r0, r5
 80403c0:	f000 fb6a 	bl	8040a98 <_sbrk_r>
 80403c4:	3001      	adds	r0, #1
 80403c6:	d101      	bne.n	80403cc <sbrk_aligned+0x38>
 80403c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80403cc:	4620      	mov	r0, r4
 80403ce:	bd70      	pop	{r4, r5, r6, pc}
 80403d0:	24025bb8 	.word	0x24025bb8

080403d4 <_malloc_r>:
 80403d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80403d8:	1ccd      	adds	r5, r1, #3
 80403da:	f025 0503 	bic.w	r5, r5, #3
 80403de:	3508      	adds	r5, #8
 80403e0:	2d0c      	cmp	r5, #12
 80403e2:	bf38      	it	cc
 80403e4:	250c      	movcc	r5, #12
 80403e6:	2d00      	cmp	r5, #0
 80403e8:	4607      	mov	r7, r0
 80403ea:	db01      	blt.n	80403f0 <_malloc_r+0x1c>
 80403ec:	42a9      	cmp	r1, r5
 80403ee:	d905      	bls.n	80403fc <_malloc_r+0x28>
 80403f0:	230c      	movs	r3, #12
 80403f2:	603b      	str	r3, [r7, #0]
 80403f4:	2600      	movs	r6, #0
 80403f6:	4630      	mov	r0, r6
 80403f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80403fc:	4e2e      	ldr	r6, [pc, #184]	; (80404b8 <_malloc_r+0xe4>)
 80403fe:	f000 fe7f 	bl	8041100 <__malloc_lock>
 8040402:	6833      	ldr	r3, [r6, #0]
 8040404:	461c      	mov	r4, r3
 8040406:	bb34      	cbnz	r4, 8040456 <_malloc_r+0x82>
 8040408:	4629      	mov	r1, r5
 804040a:	4638      	mov	r0, r7
 804040c:	f7ff ffc2 	bl	8040394 <sbrk_aligned>
 8040410:	1c43      	adds	r3, r0, #1
 8040412:	4604      	mov	r4, r0
 8040414:	d14d      	bne.n	80404b2 <_malloc_r+0xde>
 8040416:	6834      	ldr	r4, [r6, #0]
 8040418:	4626      	mov	r6, r4
 804041a:	2e00      	cmp	r6, #0
 804041c:	d140      	bne.n	80404a0 <_malloc_r+0xcc>
 804041e:	6823      	ldr	r3, [r4, #0]
 8040420:	4631      	mov	r1, r6
 8040422:	4638      	mov	r0, r7
 8040424:	eb04 0803 	add.w	r8, r4, r3
 8040428:	f000 fb36 	bl	8040a98 <_sbrk_r>
 804042c:	4580      	cmp	r8, r0
 804042e:	d13a      	bne.n	80404a6 <_malloc_r+0xd2>
 8040430:	6821      	ldr	r1, [r4, #0]
 8040432:	3503      	adds	r5, #3
 8040434:	1a6d      	subs	r5, r5, r1
 8040436:	f025 0503 	bic.w	r5, r5, #3
 804043a:	3508      	adds	r5, #8
 804043c:	2d0c      	cmp	r5, #12
 804043e:	bf38      	it	cc
 8040440:	250c      	movcc	r5, #12
 8040442:	4629      	mov	r1, r5
 8040444:	4638      	mov	r0, r7
 8040446:	f7ff ffa5 	bl	8040394 <sbrk_aligned>
 804044a:	3001      	adds	r0, #1
 804044c:	d02b      	beq.n	80404a6 <_malloc_r+0xd2>
 804044e:	6823      	ldr	r3, [r4, #0]
 8040450:	442b      	add	r3, r5
 8040452:	6023      	str	r3, [r4, #0]
 8040454:	e00e      	b.n	8040474 <_malloc_r+0xa0>
 8040456:	6822      	ldr	r2, [r4, #0]
 8040458:	1b52      	subs	r2, r2, r5
 804045a:	d41e      	bmi.n	804049a <_malloc_r+0xc6>
 804045c:	2a0b      	cmp	r2, #11
 804045e:	d916      	bls.n	804048e <_malloc_r+0xba>
 8040460:	1961      	adds	r1, r4, r5
 8040462:	42a3      	cmp	r3, r4
 8040464:	6025      	str	r5, [r4, #0]
 8040466:	bf18      	it	ne
 8040468:	6059      	strne	r1, [r3, #4]
 804046a:	6863      	ldr	r3, [r4, #4]
 804046c:	bf08      	it	eq
 804046e:	6031      	streq	r1, [r6, #0]
 8040470:	5162      	str	r2, [r4, r5]
 8040472:	604b      	str	r3, [r1, #4]
 8040474:	4638      	mov	r0, r7
 8040476:	f104 060b 	add.w	r6, r4, #11
 804047a:	f000 fe47 	bl	804110c <__malloc_unlock>
 804047e:	f026 0607 	bic.w	r6, r6, #7
 8040482:	1d23      	adds	r3, r4, #4
 8040484:	1af2      	subs	r2, r6, r3
 8040486:	d0b6      	beq.n	80403f6 <_malloc_r+0x22>
 8040488:	1b9b      	subs	r3, r3, r6
 804048a:	50a3      	str	r3, [r4, r2]
 804048c:	e7b3      	b.n	80403f6 <_malloc_r+0x22>
 804048e:	6862      	ldr	r2, [r4, #4]
 8040490:	42a3      	cmp	r3, r4
 8040492:	bf0c      	ite	eq
 8040494:	6032      	streq	r2, [r6, #0]
 8040496:	605a      	strne	r2, [r3, #4]
 8040498:	e7ec      	b.n	8040474 <_malloc_r+0xa0>
 804049a:	4623      	mov	r3, r4
 804049c:	6864      	ldr	r4, [r4, #4]
 804049e:	e7b2      	b.n	8040406 <_malloc_r+0x32>
 80404a0:	4634      	mov	r4, r6
 80404a2:	6876      	ldr	r6, [r6, #4]
 80404a4:	e7b9      	b.n	804041a <_malloc_r+0x46>
 80404a6:	230c      	movs	r3, #12
 80404a8:	603b      	str	r3, [r7, #0]
 80404aa:	4638      	mov	r0, r7
 80404ac:	f000 fe2e 	bl	804110c <__malloc_unlock>
 80404b0:	e7a1      	b.n	80403f6 <_malloc_r+0x22>
 80404b2:	6025      	str	r5, [r4, #0]
 80404b4:	e7de      	b.n	8040474 <_malloc_r+0xa0>
 80404b6:	bf00      	nop
 80404b8:	24025bb4 	.word	0x24025bb4

080404bc <__sfputc_r>:
 80404bc:	6893      	ldr	r3, [r2, #8]
 80404be:	3b01      	subs	r3, #1
 80404c0:	2b00      	cmp	r3, #0
 80404c2:	b410      	push	{r4}
 80404c4:	6093      	str	r3, [r2, #8]
 80404c6:	da08      	bge.n	80404da <__sfputc_r+0x1e>
 80404c8:	6994      	ldr	r4, [r2, #24]
 80404ca:	42a3      	cmp	r3, r4
 80404cc:	db01      	blt.n	80404d2 <__sfputc_r+0x16>
 80404ce:	290a      	cmp	r1, #10
 80404d0:	d103      	bne.n	80404da <__sfputc_r+0x1e>
 80404d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80404d6:	f000 bb33 	b.w	8040b40 <__swbuf_r>
 80404da:	6813      	ldr	r3, [r2, #0]
 80404dc:	1c58      	adds	r0, r3, #1
 80404de:	6010      	str	r0, [r2, #0]
 80404e0:	7019      	strb	r1, [r3, #0]
 80404e2:	4608      	mov	r0, r1
 80404e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80404e8:	4770      	bx	lr

080404ea <__sfputs_r>:
 80404ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80404ec:	4606      	mov	r6, r0
 80404ee:	460f      	mov	r7, r1
 80404f0:	4614      	mov	r4, r2
 80404f2:	18d5      	adds	r5, r2, r3
 80404f4:	42ac      	cmp	r4, r5
 80404f6:	d101      	bne.n	80404fc <__sfputs_r+0x12>
 80404f8:	2000      	movs	r0, #0
 80404fa:	e007      	b.n	804050c <__sfputs_r+0x22>
 80404fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8040500:	463a      	mov	r2, r7
 8040502:	4630      	mov	r0, r6
 8040504:	f7ff ffda 	bl	80404bc <__sfputc_r>
 8040508:	1c43      	adds	r3, r0, #1
 804050a:	d1f3      	bne.n	80404f4 <__sfputs_r+0xa>
 804050c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08040510 <_vfiprintf_r>:
 8040510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8040514:	460d      	mov	r5, r1
 8040516:	b09d      	sub	sp, #116	; 0x74
 8040518:	4614      	mov	r4, r2
 804051a:	4698      	mov	r8, r3
 804051c:	4606      	mov	r6, r0
 804051e:	b118      	cbz	r0, 8040528 <_vfiprintf_r+0x18>
 8040520:	6983      	ldr	r3, [r0, #24]
 8040522:	b90b      	cbnz	r3, 8040528 <_vfiprintf_r+0x18>
 8040524:	f000 fce6 	bl	8040ef4 <__sinit>
 8040528:	4b89      	ldr	r3, [pc, #548]	; (8040750 <_vfiprintf_r+0x240>)
 804052a:	429d      	cmp	r5, r3
 804052c:	d11b      	bne.n	8040566 <_vfiprintf_r+0x56>
 804052e:	6875      	ldr	r5, [r6, #4]
 8040530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8040532:	07d9      	lsls	r1, r3, #31
 8040534:	d405      	bmi.n	8040542 <_vfiprintf_r+0x32>
 8040536:	89ab      	ldrh	r3, [r5, #12]
 8040538:	059a      	lsls	r2, r3, #22
 804053a:	d402      	bmi.n	8040542 <_vfiprintf_r+0x32>
 804053c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804053e:	f000 fd77 	bl	8041030 <__retarget_lock_acquire_recursive>
 8040542:	89ab      	ldrh	r3, [r5, #12]
 8040544:	071b      	lsls	r3, r3, #28
 8040546:	d501      	bpl.n	804054c <_vfiprintf_r+0x3c>
 8040548:	692b      	ldr	r3, [r5, #16]
 804054a:	b9eb      	cbnz	r3, 8040588 <_vfiprintf_r+0x78>
 804054c:	4629      	mov	r1, r5
 804054e:	4630      	mov	r0, r6
 8040550:	f000 fb48 	bl	8040be4 <__swsetup_r>
 8040554:	b1c0      	cbz	r0, 8040588 <_vfiprintf_r+0x78>
 8040556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8040558:	07dc      	lsls	r4, r3, #31
 804055a:	d50e      	bpl.n	804057a <_vfiprintf_r+0x6a>
 804055c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040560:	b01d      	add	sp, #116	; 0x74
 8040562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040566:	4b7b      	ldr	r3, [pc, #492]	; (8040754 <_vfiprintf_r+0x244>)
 8040568:	429d      	cmp	r5, r3
 804056a:	d101      	bne.n	8040570 <_vfiprintf_r+0x60>
 804056c:	68b5      	ldr	r5, [r6, #8]
 804056e:	e7df      	b.n	8040530 <_vfiprintf_r+0x20>
 8040570:	4b79      	ldr	r3, [pc, #484]	; (8040758 <_vfiprintf_r+0x248>)
 8040572:	429d      	cmp	r5, r3
 8040574:	bf08      	it	eq
 8040576:	68f5      	ldreq	r5, [r6, #12]
 8040578:	e7da      	b.n	8040530 <_vfiprintf_r+0x20>
 804057a:	89ab      	ldrh	r3, [r5, #12]
 804057c:	0598      	lsls	r0, r3, #22
 804057e:	d4ed      	bmi.n	804055c <_vfiprintf_r+0x4c>
 8040580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8040582:	f000 fd56 	bl	8041032 <__retarget_lock_release_recursive>
 8040586:	e7e9      	b.n	804055c <_vfiprintf_r+0x4c>
 8040588:	2300      	movs	r3, #0
 804058a:	9309      	str	r3, [sp, #36]	; 0x24
 804058c:	2320      	movs	r3, #32
 804058e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8040592:	f8cd 800c 	str.w	r8, [sp, #12]
 8040596:	2330      	movs	r3, #48	; 0x30
 8040598:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 804075c <_vfiprintf_r+0x24c>
 804059c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80405a0:	f04f 0901 	mov.w	r9, #1
 80405a4:	4623      	mov	r3, r4
 80405a6:	469a      	mov	sl, r3
 80405a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80405ac:	b10a      	cbz	r2, 80405b2 <_vfiprintf_r+0xa2>
 80405ae:	2a25      	cmp	r2, #37	; 0x25
 80405b0:	d1f9      	bne.n	80405a6 <_vfiprintf_r+0x96>
 80405b2:	ebba 0b04 	subs.w	fp, sl, r4
 80405b6:	d00b      	beq.n	80405d0 <_vfiprintf_r+0xc0>
 80405b8:	465b      	mov	r3, fp
 80405ba:	4622      	mov	r2, r4
 80405bc:	4629      	mov	r1, r5
 80405be:	4630      	mov	r0, r6
 80405c0:	f7ff ff93 	bl	80404ea <__sfputs_r>
 80405c4:	3001      	adds	r0, #1
 80405c6:	f000 80aa 	beq.w	804071e <_vfiprintf_r+0x20e>
 80405ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80405cc:	445a      	add	r2, fp
 80405ce:	9209      	str	r2, [sp, #36]	; 0x24
 80405d0:	f89a 3000 	ldrb.w	r3, [sl]
 80405d4:	2b00      	cmp	r3, #0
 80405d6:	f000 80a2 	beq.w	804071e <_vfiprintf_r+0x20e>
 80405da:	2300      	movs	r3, #0
 80405dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80405e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80405e4:	f10a 0a01 	add.w	sl, sl, #1
 80405e8:	9304      	str	r3, [sp, #16]
 80405ea:	9307      	str	r3, [sp, #28]
 80405ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80405f0:	931a      	str	r3, [sp, #104]	; 0x68
 80405f2:	4654      	mov	r4, sl
 80405f4:	2205      	movs	r2, #5
 80405f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80405fa:	4858      	ldr	r0, [pc, #352]	; (804075c <_vfiprintf_r+0x24c>)
 80405fc:	f7df fe70 	bl	80202e0 <memchr>
 8040600:	9a04      	ldr	r2, [sp, #16]
 8040602:	b9d8      	cbnz	r0, 804063c <_vfiprintf_r+0x12c>
 8040604:	06d1      	lsls	r1, r2, #27
 8040606:	bf44      	itt	mi
 8040608:	2320      	movmi	r3, #32
 804060a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804060e:	0713      	lsls	r3, r2, #28
 8040610:	bf44      	itt	mi
 8040612:	232b      	movmi	r3, #43	; 0x2b
 8040614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8040618:	f89a 3000 	ldrb.w	r3, [sl]
 804061c:	2b2a      	cmp	r3, #42	; 0x2a
 804061e:	d015      	beq.n	804064c <_vfiprintf_r+0x13c>
 8040620:	9a07      	ldr	r2, [sp, #28]
 8040622:	4654      	mov	r4, sl
 8040624:	2000      	movs	r0, #0
 8040626:	f04f 0c0a 	mov.w	ip, #10
 804062a:	4621      	mov	r1, r4
 804062c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8040630:	3b30      	subs	r3, #48	; 0x30
 8040632:	2b09      	cmp	r3, #9
 8040634:	d94e      	bls.n	80406d4 <_vfiprintf_r+0x1c4>
 8040636:	b1b0      	cbz	r0, 8040666 <_vfiprintf_r+0x156>
 8040638:	9207      	str	r2, [sp, #28]
 804063a:	e014      	b.n	8040666 <_vfiprintf_r+0x156>
 804063c:	eba0 0308 	sub.w	r3, r0, r8
 8040640:	fa09 f303 	lsl.w	r3, r9, r3
 8040644:	4313      	orrs	r3, r2
 8040646:	9304      	str	r3, [sp, #16]
 8040648:	46a2      	mov	sl, r4
 804064a:	e7d2      	b.n	80405f2 <_vfiprintf_r+0xe2>
 804064c:	9b03      	ldr	r3, [sp, #12]
 804064e:	1d19      	adds	r1, r3, #4
 8040650:	681b      	ldr	r3, [r3, #0]
 8040652:	9103      	str	r1, [sp, #12]
 8040654:	2b00      	cmp	r3, #0
 8040656:	bfbb      	ittet	lt
 8040658:	425b      	neglt	r3, r3
 804065a:	f042 0202 	orrlt.w	r2, r2, #2
 804065e:	9307      	strge	r3, [sp, #28]
 8040660:	9307      	strlt	r3, [sp, #28]
 8040662:	bfb8      	it	lt
 8040664:	9204      	strlt	r2, [sp, #16]
 8040666:	7823      	ldrb	r3, [r4, #0]
 8040668:	2b2e      	cmp	r3, #46	; 0x2e
 804066a:	d10c      	bne.n	8040686 <_vfiprintf_r+0x176>
 804066c:	7863      	ldrb	r3, [r4, #1]
 804066e:	2b2a      	cmp	r3, #42	; 0x2a
 8040670:	d135      	bne.n	80406de <_vfiprintf_r+0x1ce>
 8040672:	9b03      	ldr	r3, [sp, #12]
 8040674:	1d1a      	adds	r2, r3, #4
 8040676:	681b      	ldr	r3, [r3, #0]
 8040678:	9203      	str	r2, [sp, #12]
 804067a:	2b00      	cmp	r3, #0
 804067c:	bfb8      	it	lt
 804067e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8040682:	3402      	adds	r4, #2
 8040684:	9305      	str	r3, [sp, #20]
 8040686:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 804076c <_vfiprintf_r+0x25c>
 804068a:	7821      	ldrb	r1, [r4, #0]
 804068c:	2203      	movs	r2, #3
 804068e:	4650      	mov	r0, sl
 8040690:	f7df fe26 	bl	80202e0 <memchr>
 8040694:	b140      	cbz	r0, 80406a8 <_vfiprintf_r+0x198>
 8040696:	2340      	movs	r3, #64	; 0x40
 8040698:	eba0 000a 	sub.w	r0, r0, sl
 804069c:	fa03 f000 	lsl.w	r0, r3, r0
 80406a0:	9b04      	ldr	r3, [sp, #16]
 80406a2:	4303      	orrs	r3, r0
 80406a4:	3401      	adds	r4, #1
 80406a6:	9304      	str	r3, [sp, #16]
 80406a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80406ac:	482c      	ldr	r0, [pc, #176]	; (8040760 <_vfiprintf_r+0x250>)
 80406ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80406b2:	2206      	movs	r2, #6
 80406b4:	f7df fe14 	bl	80202e0 <memchr>
 80406b8:	2800      	cmp	r0, #0
 80406ba:	d03f      	beq.n	804073c <_vfiprintf_r+0x22c>
 80406bc:	4b29      	ldr	r3, [pc, #164]	; (8040764 <_vfiprintf_r+0x254>)
 80406be:	bb1b      	cbnz	r3, 8040708 <_vfiprintf_r+0x1f8>
 80406c0:	9b03      	ldr	r3, [sp, #12]
 80406c2:	3307      	adds	r3, #7
 80406c4:	f023 0307 	bic.w	r3, r3, #7
 80406c8:	3308      	adds	r3, #8
 80406ca:	9303      	str	r3, [sp, #12]
 80406cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80406ce:	443b      	add	r3, r7
 80406d0:	9309      	str	r3, [sp, #36]	; 0x24
 80406d2:	e767      	b.n	80405a4 <_vfiprintf_r+0x94>
 80406d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80406d8:	460c      	mov	r4, r1
 80406da:	2001      	movs	r0, #1
 80406dc:	e7a5      	b.n	804062a <_vfiprintf_r+0x11a>
 80406de:	2300      	movs	r3, #0
 80406e0:	3401      	adds	r4, #1
 80406e2:	9305      	str	r3, [sp, #20]
 80406e4:	4619      	mov	r1, r3
 80406e6:	f04f 0c0a 	mov.w	ip, #10
 80406ea:	4620      	mov	r0, r4
 80406ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80406f0:	3a30      	subs	r2, #48	; 0x30
 80406f2:	2a09      	cmp	r2, #9
 80406f4:	d903      	bls.n	80406fe <_vfiprintf_r+0x1ee>
 80406f6:	2b00      	cmp	r3, #0
 80406f8:	d0c5      	beq.n	8040686 <_vfiprintf_r+0x176>
 80406fa:	9105      	str	r1, [sp, #20]
 80406fc:	e7c3      	b.n	8040686 <_vfiprintf_r+0x176>
 80406fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8040702:	4604      	mov	r4, r0
 8040704:	2301      	movs	r3, #1
 8040706:	e7f0      	b.n	80406ea <_vfiprintf_r+0x1da>
 8040708:	ab03      	add	r3, sp, #12
 804070a:	9300      	str	r3, [sp, #0]
 804070c:	462a      	mov	r2, r5
 804070e:	4b16      	ldr	r3, [pc, #88]	; (8040768 <_vfiprintf_r+0x258>)
 8040710:	a904      	add	r1, sp, #16
 8040712:	4630      	mov	r0, r6
 8040714:	f3af 8000 	nop.w
 8040718:	4607      	mov	r7, r0
 804071a:	1c78      	adds	r0, r7, #1
 804071c:	d1d6      	bne.n	80406cc <_vfiprintf_r+0x1bc>
 804071e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8040720:	07d9      	lsls	r1, r3, #31
 8040722:	d405      	bmi.n	8040730 <_vfiprintf_r+0x220>
 8040724:	89ab      	ldrh	r3, [r5, #12]
 8040726:	059a      	lsls	r2, r3, #22
 8040728:	d402      	bmi.n	8040730 <_vfiprintf_r+0x220>
 804072a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804072c:	f000 fc81 	bl	8041032 <__retarget_lock_release_recursive>
 8040730:	89ab      	ldrh	r3, [r5, #12]
 8040732:	065b      	lsls	r3, r3, #25
 8040734:	f53f af12 	bmi.w	804055c <_vfiprintf_r+0x4c>
 8040738:	9809      	ldr	r0, [sp, #36]	; 0x24
 804073a:	e711      	b.n	8040560 <_vfiprintf_r+0x50>
 804073c:	ab03      	add	r3, sp, #12
 804073e:	9300      	str	r3, [sp, #0]
 8040740:	462a      	mov	r2, r5
 8040742:	4b09      	ldr	r3, [pc, #36]	; (8040768 <_vfiprintf_r+0x258>)
 8040744:	a904      	add	r1, sp, #16
 8040746:	4630      	mov	r0, r6
 8040748:	f000 f880 	bl	804084c <_printf_i>
 804074c:	e7e4      	b.n	8040718 <_vfiprintf_r+0x208>
 804074e:	bf00      	nop
 8040750:	0805c6e8 	.word	0x0805c6e8
 8040754:	0805c708 	.word	0x0805c708
 8040758:	0805c6c8 	.word	0x0805c6c8
 804075c:	0805c694 	.word	0x0805c694
 8040760:	0805c69e 	.word	0x0805c69e
 8040764:	00000000 	.word	0x00000000
 8040768:	080404eb 	.word	0x080404eb
 804076c:	0805c69a 	.word	0x0805c69a

08040770 <_printf_common>:
 8040770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040774:	4616      	mov	r6, r2
 8040776:	4699      	mov	r9, r3
 8040778:	688a      	ldr	r2, [r1, #8]
 804077a:	690b      	ldr	r3, [r1, #16]
 804077c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8040780:	4293      	cmp	r3, r2
 8040782:	bfb8      	it	lt
 8040784:	4613      	movlt	r3, r2
 8040786:	6033      	str	r3, [r6, #0]
 8040788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 804078c:	4607      	mov	r7, r0
 804078e:	460c      	mov	r4, r1
 8040790:	b10a      	cbz	r2, 8040796 <_printf_common+0x26>
 8040792:	3301      	adds	r3, #1
 8040794:	6033      	str	r3, [r6, #0]
 8040796:	6823      	ldr	r3, [r4, #0]
 8040798:	0699      	lsls	r1, r3, #26
 804079a:	bf42      	ittt	mi
 804079c:	6833      	ldrmi	r3, [r6, #0]
 804079e:	3302      	addmi	r3, #2
 80407a0:	6033      	strmi	r3, [r6, #0]
 80407a2:	6825      	ldr	r5, [r4, #0]
 80407a4:	f015 0506 	ands.w	r5, r5, #6
 80407a8:	d106      	bne.n	80407b8 <_printf_common+0x48>
 80407aa:	f104 0a19 	add.w	sl, r4, #25
 80407ae:	68e3      	ldr	r3, [r4, #12]
 80407b0:	6832      	ldr	r2, [r6, #0]
 80407b2:	1a9b      	subs	r3, r3, r2
 80407b4:	42ab      	cmp	r3, r5
 80407b6:	dc26      	bgt.n	8040806 <_printf_common+0x96>
 80407b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80407bc:	1e13      	subs	r3, r2, #0
 80407be:	6822      	ldr	r2, [r4, #0]
 80407c0:	bf18      	it	ne
 80407c2:	2301      	movne	r3, #1
 80407c4:	0692      	lsls	r2, r2, #26
 80407c6:	d42b      	bmi.n	8040820 <_printf_common+0xb0>
 80407c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80407cc:	4649      	mov	r1, r9
 80407ce:	4638      	mov	r0, r7
 80407d0:	47c0      	blx	r8
 80407d2:	3001      	adds	r0, #1
 80407d4:	d01e      	beq.n	8040814 <_printf_common+0xa4>
 80407d6:	6823      	ldr	r3, [r4, #0]
 80407d8:	68e5      	ldr	r5, [r4, #12]
 80407da:	6832      	ldr	r2, [r6, #0]
 80407dc:	f003 0306 	and.w	r3, r3, #6
 80407e0:	2b04      	cmp	r3, #4
 80407e2:	bf08      	it	eq
 80407e4:	1aad      	subeq	r5, r5, r2
 80407e6:	68a3      	ldr	r3, [r4, #8]
 80407e8:	6922      	ldr	r2, [r4, #16]
 80407ea:	bf0c      	ite	eq
 80407ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80407f0:	2500      	movne	r5, #0
 80407f2:	4293      	cmp	r3, r2
 80407f4:	bfc4      	itt	gt
 80407f6:	1a9b      	subgt	r3, r3, r2
 80407f8:	18ed      	addgt	r5, r5, r3
 80407fa:	2600      	movs	r6, #0
 80407fc:	341a      	adds	r4, #26
 80407fe:	42b5      	cmp	r5, r6
 8040800:	d11a      	bne.n	8040838 <_printf_common+0xc8>
 8040802:	2000      	movs	r0, #0
 8040804:	e008      	b.n	8040818 <_printf_common+0xa8>
 8040806:	2301      	movs	r3, #1
 8040808:	4652      	mov	r2, sl
 804080a:	4649      	mov	r1, r9
 804080c:	4638      	mov	r0, r7
 804080e:	47c0      	blx	r8
 8040810:	3001      	adds	r0, #1
 8040812:	d103      	bne.n	804081c <_printf_common+0xac>
 8040814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804081c:	3501      	adds	r5, #1
 804081e:	e7c6      	b.n	80407ae <_printf_common+0x3e>
 8040820:	18e1      	adds	r1, r4, r3
 8040822:	1c5a      	adds	r2, r3, #1
 8040824:	2030      	movs	r0, #48	; 0x30
 8040826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804082a:	4422      	add	r2, r4
 804082c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8040830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8040834:	3302      	adds	r3, #2
 8040836:	e7c7      	b.n	80407c8 <_printf_common+0x58>
 8040838:	2301      	movs	r3, #1
 804083a:	4622      	mov	r2, r4
 804083c:	4649      	mov	r1, r9
 804083e:	4638      	mov	r0, r7
 8040840:	47c0      	blx	r8
 8040842:	3001      	adds	r0, #1
 8040844:	d0e6      	beq.n	8040814 <_printf_common+0xa4>
 8040846:	3601      	adds	r6, #1
 8040848:	e7d9      	b.n	80407fe <_printf_common+0x8e>
	...

0804084c <_printf_i>:
 804084c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8040850:	7e0f      	ldrb	r7, [r1, #24]
 8040852:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8040854:	2f78      	cmp	r7, #120	; 0x78
 8040856:	4691      	mov	r9, r2
 8040858:	4680      	mov	r8, r0
 804085a:	460c      	mov	r4, r1
 804085c:	469a      	mov	sl, r3
 804085e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8040862:	d807      	bhi.n	8040874 <_printf_i+0x28>
 8040864:	2f62      	cmp	r7, #98	; 0x62
 8040866:	d80a      	bhi.n	804087e <_printf_i+0x32>
 8040868:	2f00      	cmp	r7, #0
 804086a:	f000 80d8 	beq.w	8040a1e <_printf_i+0x1d2>
 804086e:	2f58      	cmp	r7, #88	; 0x58
 8040870:	f000 80a3 	beq.w	80409ba <_printf_i+0x16e>
 8040874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8040878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 804087c:	e03a      	b.n	80408f4 <_printf_i+0xa8>
 804087e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8040882:	2b15      	cmp	r3, #21
 8040884:	d8f6      	bhi.n	8040874 <_printf_i+0x28>
 8040886:	a101      	add	r1, pc, #4	; (adr r1, 804088c <_printf_i+0x40>)
 8040888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 804088c:	080408e5 	.word	0x080408e5
 8040890:	080408f9 	.word	0x080408f9
 8040894:	08040875 	.word	0x08040875
 8040898:	08040875 	.word	0x08040875
 804089c:	08040875 	.word	0x08040875
 80408a0:	08040875 	.word	0x08040875
 80408a4:	080408f9 	.word	0x080408f9
 80408a8:	08040875 	.word	0x08040875
 80408ac:	08040875 	.word	0x08040875
 80408b0:	08040875 	.word	0x08040875
 80408b4:	08040875 	.word	0x08040875
 80408b8:	08040a05 	.word	0x08040a05
 80408bc:	08040929 	.word	0x08040929
 80408c0:	080409e7 	.word	0x080409e7
 80408c4:	08040875 	.word	0x08040875
 80408c8:	08040875 	.word	0x08040875
 80408cc:	08040a27 	.word	0x08040a27
 80408d0:	08040875 	.word	0x08040875
 80408d4:	08040929 	.word	0x08040929
 80408d8:	08040875 	.word	0x08040875
 80408dc:	08040875 	.word	0x08040875
 80408e0:	080409ef 	.word	0x080409ef
 80408e4:	682b      	ldr	r3, [r5, #0]
 80408e6:	1d1a      	adds	r2, r3, #4
 80408e8:	681b      	ldr	r3, [r3, #0]
 80408ea:	602a      	str	r2, [r5, #0]
 80408ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80408f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80408f4:	2301      	movs	r3, #1
 80408f6:	e0a3      	b.n	8040a40 <_printf_i+0x1f4>
 80408f8:	6820      	ldr	r0, [r4, #0]
 80408fa:	6829      	ldr	r1, [r5, #0]
 80408fc:	0606      	lsls	r6, r0, #24
 80408fe:	f101 0304 	add.w	r3, r1, #4
 8040902:	d50a      	bpl.n	804091a <_printf_i+0xce>
 8040904:	680e      	ldr	r6, [r1, #0]
 8040906:	602b      	str	r3, [r5, #0]
 8040908:	2e00      	cmp	r6, #0
 804090a:	da03      	bge.n	8040914 <_printf_i+0xc8>
 804090c:	232d      	movs	r3, #45	; 0x2d
 804090e:	4276      	negs	r6, r6
 8040910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8040914:	485e      	ldr	r0, [pc, #376]	; (8040a90 <_printf_i+0x244>)
 8040916:	230a      	movs	r3, #10
 8040918:	e019      	b.n	804094e <_printf_i+0x102>
 804091a:	680e      	ldr	r6, [r1, #0]
 804091c:	602b      	str	r3, [r5, #0]
 804091e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8040922:	bf18      	it	ne
 8040924:	b236      	sxthne	r6, r6
 8040926:	e7ef      	b.n	8040908 <_printf_i+0xbc>
 8040928:	682b      	ldr	r3, [r5, #0]
 804092a:	6820      	ldr	r0, [r4, #0]
 804092c:	1d19      	adds	r1, r3, #4
 804092e:	6029      	str	r1, [r5, #0]
 8040930:	0601      	lsls	r1, r0, #24
 8040932:	d501      	bpl.n	8040938 <_printf_i+0xec>
 8040934:	681e      	ldr	r6, [r3, #0]
 8040936:	e002      	b.n	804093e <_printf_i+0xf2>
 8040938:	0646      	lsls	r6, r0, #25
 804093a:	d5fb      	bpl.n	8040934 <_printf_i+0xe8>
 804093c:	881e      	ldrh	r6, [r3, #0]
 804093e:	4854      	ldr	r0, [pc, #336]	; (8040a90 <_printf_i+0x244>)
 8040940:	2f6f      	cmp	r7, #111	; 0x6f
 8040942:	bf0c      	ite	eq
 8040944:	2308      	moveq	r3, #8
 8040946:	230a      	movne	r3, #10
 8040948:	2100      	movs	r1, #0
 804094a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804094e:	6865      	ldr	r5, [r4, #4]
 8040950:	60a5      	str	r5, [r4, #8]
 8040952:	2d00      	cmp	r5, #0
 8040954:	bfa2      	ittt	ge
 8040956:	6821      	ldrge	r1, [r4, #0]
 8040958:	f021 0104 	bicge.w	r1, r1, #4
 804095c:	6021      	strge	r1, [r4, #0]
 804095e:	b90e      	cbnz	r6, 8040964 <_printf_i+0x118>
 8040960:	2d00      	cmp	r5, #0
 8040962:	d04d      	beq.n	8040a00 <_printf_i+0x1b4>
 8040964:	4615      	mov	r5, r2
 8040966:	fbb6 f1f3 	udiv	r1, r6, r3
 804096a:	fb03 6711 	mls	r7, r3, r1, r6
 804096e:	5dc7      	ldrb	r7, [r0, r7]
 8040970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8040974:	4637      	mov	r7, r6
 8040976:	42bb      	cmp	r3, r7
 8040978:	460e      	mov	r6, r1
 804097a:	d9f4      	bls.n	8040966 <_printf_i+0x11a>
 804097c:	2b08      	cmp	r3, #8
 804097e:	d10b      	bne.n	8040998 <_printf_i+0x14c>
 8040980:	6823      	ldr	r3, [r4, #0]
 8040982:	07de      	lsls	r6, r3, #31
 8040984:	d508      	bpl.n	8040998 <_printf_i+0x14c>
 8040986:	6923      	ldr	r3, [r4, #16]
 8040988:	6861      	ldr	r1, [r4, #4]
 804098a:	4299      	cmp	r1, r3
 804098c:	bfde      	ittt	le
 804098e:	2330      	movle	r3, #48	; 0x30
 8040990:	f805 3c01 	strble.w	r3, [r5, #-1]
 8040994:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8040998:	1b52      	subs	r2, r2, r5
 804099a:	6122      	str	r2, [r4, #16]
 804099c:	f8cd a000 	str.w	sl, [sp]
 80409a0:	464b      	mov	r3, r9
 80409a2:	aa03      	add	r2, sp, #12
 80409a4:	4621      	mov	r1, r4
 80409a6:	4640      	mov	r0, r8
 80409a8:	f7ff fee2 	bl	8040770 <_printf_common>
 80409ac:	3001      	adds	r0, #1
 80409ae:	d14c      	bne.n	8040a4a <_printf_i+0x1fe>
 80409b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80409b4:	b004      	add	sp, #16
 80409b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80409ba:	4835      	ldr	r0, [pc, #212]	; (8040a90 <_printf_i+0x244>)
 80409bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80409c0:	6829      	ldr	r1, [r5, #0]
 80409c2:	6823      	ldr	r3, [r4, #0]
 80409c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80409c8:	6029      	str	r1, [r5, #0]
 80409ca:	061d      	lsls	r5, r3, #24
 80409cc:	d514      	bpl.n	80409f8 <_printf_i+0x1ac>
 80409ce:	07df      	lsls	r7, r3, #31
 80409d0:	bf44      	itt	mi
 80409d2:	f043 0320 	orrmi.w	r3, r3, #32
 80409d6:	6023      	strmi	r3, [r4, #0]
 80409d8:	b91e      	cbnz	r6, 80409e2 <_printf_i+0x196>
 80409da:	6823      	ldr	r3, [r4, #0]
 80409dc:	f023 0320 	bic.w	r3, r3, #32
 80409e0:	6023      	str	r3, [r4, #0]
 80409e2:	2310      	movs	r3, #16
 80409e4:	e7b0      	b.n	8040948 <_printf_i+0xfc>
 80409e6:	6823      	ldr	r3, [r4, #0]
 80409e8:	f043 0320 	orr.w	r3, r3, #32
 80409ec:	6023      	str	r3, [r4, #0]
 80409ee:	2378      	movs	r3, #120	; 0x78
 80409f0:	4828      	ldr	r0, [pc, #160]	; (8040a94 <_printf_i+0x248>)
 80409f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80409f6:	e7e3      	b.n	80409c0 <_printf_i+0x174>
 80409f8:	0659      	lsls	r1, r3, #25
 80409fa:	bf48      	it	mi
 80409fc:	b2b6      	uxthmi	r6, r6
 80409fe:	e7e6      	b.n	80409ce <_printf_i+0x182>
 8040a00:	4615      	mov	r5, r2
 8040a02:	e7bb      	b.n	804097c <_printf_i+0x130>
 8040a04:	682b      	ldr	r3, [r5, #0]
 8040a06:	6826      	ldr	r6, [r4, #0]
 8040a08:	6961      	ldr	r1, [r4, #20]
 8040a0a:	1d18      	adds	r0, r3, #4
 8040a0c:	6028      	str	r0, [r5, #0]
 8040a0e:	0635      	lsls	r5, r6, #24
 8040a10:	681b      	ldr	r3, [r3, #0]
 8040a12:	d501      	bpl.n	8040a18 <_printf_i+0x1cc>
 8040a14:	6019      	str	r1, [r3, #0]
 8040a16:	e002      	b.n	8040a1e <_printf_i+0x1d2>
 8040a18:	0670      	lsls	r0, r6, #25
 8040a1a:	d5fb      	bpl.n	8040a14 <_printf_i+0x1c8>
 8040a1c:	8019      	strh	r1, [r3, #0]
 8040a1e:	2300      	movs	r3, #0
 8040a20:	6123      	str	r3, [r4, #16]
 8040a22:	4615      	mov	r5, r2
 8040a24:	e7ba      	b.n	804099c <_printf_i+0x150>
 8040a26:	682b      	ldr	r3, [r5, #0]
 8040a28:	1d1a      	adds	r2, r3, #4
 8040a2a:	602a      	str	r2, [r5, #0]
 8040a2c:	681d      	ldr	r5, [r3, #0]
 8040a2e:	6862      	ldr	r2, [r4, #4]
 8040a30:	2100      	movs	r1, #0
 8040a32:	4628      	mov	r0, r5
 8040a34:	f7df fc54 	bl	80202e0 <memchr>
 8040a38:	b108      	cbz	r0, 8040a3e <_printf_i+0x1f2>
 8040a3a:	1b40      	subs	r0, r0, r5
 8040a3c:	6060      	str	r0, [r4, #4]
 8040a3e:	6863      	ldr	r3, [r4, #4]
 8040a40:	6123      	str	r3, [r4, #16]
 8040a42:	2300      	movs	r3, #0
 8040a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8040a48:	e7a8      	b.n	804099c <_printf_i+0x150>
 8040a4a:	6923      	ldr	r3, [r4, #16]
 8040a4c:	462a      	mov	r2, r5
 8040a4e:	4649      	mov	r1, r9
 8040a50:	4640      	mov	r0, r8
 8040a52:	47d0      	blx	sl
 8040a54:	3001      	adds	r0, #1
 8040a56:	d0ab      	beq.n	80409b0 <_printf_i+0x164>
 8040a58:	6823      	ldr	r3, [r4, #0]
 8040a5a:	079b      	lsls	r3, r3, #30
 8040a5c:	d413      	bmi.n	8040a86 <_printf_i+0x23a>
 8040a5e:	68e0      	ldr	r0, [r4, #12]
 8040a60:	9b03      	ldr	r3, [sp, #12]
 8040a62:	4298      	cmp	r0, r3
 8040a64:	bfb8      	it	lt
 8040a66:	4618      	movlt	r0, r3
 8040a68:	e7a4      	b.n	80409b4 <_printf_i+0x168>
 8040a6a:	2301      	movs	r3, #1
 8040a6c:	4632      	mov	r2, r6
 8040a6e:	4649      	mov	r1, r9
 8040a70:	4640      	mov	r0, r8
 8040a72:	47d0      	blx	sl
 8040a74:	3001      	adds	r0, #1
 8040a76:	d09b      	beq.n	80409b0 <_printf_i+0x164>
 8040a78:	3501      	adds	r5, #1
 8040a7a:	68e3      	ldr	r3, [r4, #12]
 8040a7c:	9903      	ldr	r1, [sp, #12]
 8040a7e:	1a5b      	subs	r3, r3, r1
 8040a80:	42ab      	cmp	r3, r5
 8040a82:	dcf2      	bgt.n	8040a6a <_printf_i+0x21e>
 8040a84:	e7eb      	b.n	8040a5e <_printf_i+0x212>
 8040a86:	2500      	movs	r5, #0
 8040a88:	f104 0619 	add.w	r6, r4, #25
 8040a8c:	e7f5      	b.n	8040a7a <_printf_i+0x22e>
 8040a8e:	bf00      	nop
 8040a90:	0805c6a5 	.word	0x0805c6a5
 8040a94:	0805c6b6 	.word	0x0805c6b6

08040a98 <_sbrk_r>:
 8040a98:	b538      	push	{r3, r4, r5, lr}
 8040a9a:	4d06      	ldr	r5, [pc, #24]	; (8040ab4 <_sbrk_r+0x1c>)
 8040a9c:	2300      	movs	r3, #0
 8040a9e:	4604      	mov	r4, r0
 8040aa0:	4608      	mov	r0, r1
 8040aa2:	602b      	str	r3, [r5, #0]
 8040aa4:	f7ed fd16 	bl	802e4d4 <_sbrk>
 8040aa8:	1c43      	adds	r3, r0, #1
 8040aaa:	d102      	bne.n	8040ab2 <_sbrk_r+0x1a>
 8040aac:	682b      	ldr	r3, [r5, #0]
 8040aae:	b103      	cbz	r3, 8040ab2 <_sbrk_r+0x1a>
 8040ab0:	6023      	str	r3, [r4, #0]
 8040ab2:	bd38      	pop	{r3, r4, r5, pc}
 8040ab4:	24025bc0 	.word	0x24025bc0

08040ab8 <_raise_r>:
 8040ab8:	291f      	cmp	r1, #31
 8040aba:	b538      	push	{r3, r4, r5, lr}
 8040abc:	4604      	mov	r4, r0
 8040abe:	460d      	mov	r5, r1
 8040ac0:	d904      	bls.n	8040acc <_raise_r+0x14>
 8040ac2:	2316      	movs	r3, #22
 8040ac4:	6003      	str	r3, [r0, #0]
 8040ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040aca:	bd38      	pop	{r3, r4, r5, pc}
 8040acc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8040ace:	b112      	cbz	r2, 8040ad6 <_raise_r+0x1e>
 8040ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8040ad4:	b94b      	cbnz	r3, 8040aea <_raise_r+0x32>
 8040ad6:	4620      	mov	r0, r4
 8040ad8:	f000 f830 	bl	8040b3c <_getpid_r>
 8040adc:	462a      	mov	r2, r5
 8040ade:	4601      	mov	r1, r0
 8040ae0:	4620      	mov	r0, r4
 8040ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8040ae6:	f000 b817 	b.w	8040b18 <_kill_r>
 8040aea:	2b01      	cmp	r3, #1
 8040aec:	d00a      	beq.n	8040b04 <_raise_r+0x4c>
 8040aee:	1c59      	adds	r1, r3, #1
 8040af0:	d103      	bne.n	8040afa <_raise_r+0x42>
 8040af2:	2316      	movs	r3, #22
 8040af4:	6003      	str	r3, [r0, #0]
 8040af6:	2001      	movs	r0, #1
 8040af8:	e7e7      	b.n	8040aca <_raise_r+0x12>
 8040afa:	2400      	movs	r4, #0
 8040afc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8040b00:	4628      	mov	r0, r5
 8040b02:	4798      	blx	r3
 8040b04:	2000      	movs	r0, #0
 8040b06:	e7e0      	b.n	8040aca <_raise_r+0x12>

08040b08 <raise>:
 8040b08:	4b02      	ldr	r3, [pc, #8]	; (8040b14 <raise+0xc>)
 8040b0a:	4601      	mov	r1, r0
 8040b0c:	6818      	ldr	r0, [r3, #0]
 8040b0e:	f7ff bfd3 	b.w	8040ab8 <_raise_r>
 8040b12:	bf00      	nop
 8040b14:	24000104 	.word	0x24000104

08040b18 <_kill_r>:
 8040b18:	b538      	push	{r3, r4, r5, lr}
 8040b1a:	4d07      	ldr	r5, [pc, #28]	; (8040b38 <_kill_r+0x20>)
 8040b1c:	2300      	movs	r3, #0
 8040b1e:	4604      	mov	r4, r0
 8040b20:	4608      	mov	r0, r1
 8040b22:	4611      	mov	r1, r2
 8040b24:	602b      	str	r3, [r5, #0]
 8040b26:	f7ed fc4d 	bl	802e3c4 <_kill>
 8040b2a:	1c43      	adds	r3, r0, #1
 8040b2c:	d102      	bne.n	8040b34 <_kill_r+0x1c>
 8040b2e:	682b      	ldr	r3, [r5, #0]
 8040b30:	b103      	cbz	r3, 8040b34 <_kill_r+0x1c>
 8040b32:	6023      	str	r3, [r4, #0]
 8040b34:	bd38      	pop	{r3, r4, r5, pc}
 8040b36:	bf00      	nop
 8040b38:	24025bc0 	.word	0x24025bc0

08040b3c <_getpid_r>:
 8040b3c:	f7ed bc3a 	b.w	802e3b4 <_getpid>

08040b40 <__swbuf_r>:
 8040b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8040b42:	460e      	mov	r6, r1
 8040b44:	4614      	mov	r4, r2
 8040b46:	4605      	mov	r5, r0
 8040b48:	b118      	cbz	r0, 8040b52 <__swbuf_r+0x12>
 8040b4a:	6983      	ldr	r3, [r0, #24]
 8040b4c:	b90b      	cbnz	r3, 8040b52 <__swbuf_r+0x12>
 8040b4e:	f000 f9d1 	bl	8040ef4 <__sinit>
 8040b52:	4b21      	ldr	r3, [pc, #132]	; (8040bd8 <__swbuf_r+0x98>)
 8040b54:	429c      	cmp	r4, r3
 8040b56:	d12b      	bne.n	8040bb0 <__swbuf_r+0x70>
 8040b58:	686c      	ldr	r4, [r5, #4]
 8040b5a:	69a3      	ldr	r3, [r4, #24]
 8040b5c:	60a3      	str	r3, [r4, #8]
 8040b5e:	89a3      	ldrh	r3, [r4, #12]
 8040b60:	071a      	lsls	r2, r3, #28
 8040b62:	d52f      	bpl.n	8040bc4 <__swbuf_r+0x84>
 8040b64:	6923      	ldr	r3, [r4, #16]
 8040b66:	b36b      	cbz	r3, 8040bc4 <__swbuf_r+0x84>
 8040b68:	6923      	ldr	r3, [r4, #16]
 8040b6a:	6820      	ldr	r0, [r4, #0]
 8040b6c:	1ac0      	subs	r0, r0, r3
 8040b6e:	6963      	ldr	r3, [r4, #20]
 8040b70:	b2f6      	uxtb	r6, r6
 8040b72:	4283      	cmp	r3, r0
 8040b74:	4637      	mov	r7, r6
 8040b76:	dc04      	bgt.n	8040b82 <__swbuf_r+0x42>
 8040b78:	4621      	mov	r1, r4
 8040b7a:	4628      	mov	r0, r5
 8040b7c:	f000 f926 	bl	8040dcc <_fflush_r>
 8040b80:	bb30      	cbnz	r0, 8040bd0 <__swbuf_r+0x90>
 8040b82:	68a3      	ldr	r3, [r4, #8]
 8040b84:	3b01      	subs	r3, #1
 8040b86:	60a3      	str	r3, [r4, #8]
 8040b88:	6823      	ldr	r3, [r4, #0]
 8040b8a:	1c5a      	adds	r2, r3, #1
 8040b8c:	6022      	str	r2, [r4, #0]
 8040b8e:	701e      	strb	r6, [r3, #0]
 8040b90:	6963      	ldr	r3, [r4, #20]
 8040b92:	3001      	adds	r0, #1
 8040b94:	4283      	cmp	r3, r0
 8040b96:	d004      	beq.n	8040ba2 <__swbuf_r+0x62>
 8040b98:	89a3      	ldrh	r3, [r4, #12]
 8040b9a:	07db      	lsls	r3, r3, #31
 8040b9c:	d506      	bpl.n	8040bac <__swbuf_r+0x6c>
 8040b9e:	2e0a      	cmp	r6, #10
 8040ba0:	d104      	bne.n	8040bac <__swbuf_r+0x6c>
 8040ba2:	4621      	mov	r1, r4
 8040ba4:	4628      	mov	r0, r5
 8040ba6:	f000 f911 	bl	8040dcc <_fflush_r>
 8040baa:	b988      	cbnz	r0, 8040bd0 <__swbuf_r+0x90>
 8040bac:	4638      	mov	r0, r7
 8040bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8040bb0:	4b0a      	ldr	r3, [pc, #40]	; (8040bdc <__swbuf_r+0x9c>)
 8040bb2:	429c      	cmp	r4, r3
 8040bb4:	d101      	bne.n	8040bba <__swbuf_r+0x7a>
 8040bb6:	68ac      	ldr	r4, [r5, #8]
 8040bb8:	e7cf      	b.n	8040b5a <__swbuf_r+0x1a>
 8040bba:	4b09      	ldr	r3, [pc, #36]	; (8040be0 <__swbuf_r+0xa0>)
 8040bbc:	429c      	cmp	r4, r3
 8040bbe:	bf08      	it	eq
 8040bc0:	68ec      	ldreq	r4, [r5, #12]
 8040bc2:	e7ca      	b.n	8040b5a <__swbuf_r+0x1a>
 8040bc4:	4621      	mov	r1, r4
 8040bc6:	4628      	mov	r0, r5
 8040bc8:	f000 f80c 	bl	8040be4 <__swsetup_r>
 8040bcc:	2800      	cmp	r0, #0
 8040bce:	d0cb      	beq.n	8040b68 <__swbuf_r+0x28>
 8040bd0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8040bd4:	e7ea      	b.n	8040bac <__swbuf_r+0x6c>
 8040bd6:	bf00      	nop
 8040bd8:	0805c6e8 	.word	0x0805c6e8
 8040bdc:	0805c708 	.word	0x0805c708
 8040be0:	0805c6c8 	.word	0x0805c6c8

08040be4 <__swsetup_r>:
 8040be4:	4b32      	ldr	r3, [pc, #200]	; (8040cb0 <__swsetup_r+0xcc>)
 8040be6:	b570      	push	{r4, r5, r6, lr}
 8040be8:	681d      	ldr	r5, [r3, #0]
 8040bea:	4606      	mov	r6, r0
 8040bec:	460c      	mov	r4, r1
 8040bee:	b125      	cbz	r5, 8040bfa <__swsetup_r+0x16>
 8040bf0:	69ab      	ldr	r3, [r5, #24]
 8040bf2:	b913      	cbnz	r3, 8040bfa <__swsetup_r+0x16>
 8040bf4:	4628      	mov	r0, r5
 8040bf6:	f000 f97d 	bl	8040ef4 <__sinit>
 8040bfa:	4b2e      	ldr	r3, [pc, #184]	; (8040cb4 <__swsetup_r+0xd0>)
 8040bfc:	429c      	cmp	r4, r3
 8040bfe:	d10f      	bne.n	8040c20 <__swsetup_r+0x3c>
 8040c00:	686c      	ldr	r4, [r5, #4]
 8040c02:	89a3      	ldrh	r3, [r4, #12]
 8040c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8040c08:	0719      	lsls	r1, r3, #28
 8040c0a:	d42c      	bmi.n	8040c66 <__swsetup_r+0x82>
 8040c0c:	06dd      	lsls	r5, r3, #27
 8040c0e:	d411      	bmi.n	8040c34 <__swsetup_r+0x50>
 8040c10:	2309      	movs	r3, #9
 8040c12:	6033      	str	r3, [r6, #0]
 8040c14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8040c18:	81a3      	strh	r3, [r4, #12]
 8040c1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040c1e:	e03e      	b.n	8040c9e <__swsetup_r+0xba>
 8040c20:	4b25      	ldr	r3, [pc, #148]	; (8040cb8 <__swsetup_r+0xd4>)
 8040c22:	429c      	cmp	r4, r3
 8040c24:	d101      	bne.n	8040c2a <__swsetup_r+0x46>
 8040c26:	68ac      	ldr	r4, [r5, #8]
 8040c28:	e7eb      	b.n	8040c02 <__swsetup_r+0x1e>
 8040c2a:	4b24      	ldr	r3, [pc, #144]	; (8040cbc <__swsetup_r+0xd8>)
 8040c2c:	429c      	cmp	r4, r3
 8040c2e:	bf08      	it	eq
 8040c30:	68ec      	ldreq	r4, [r5, #12]
 8040c32:	e7e6      	b.n	8040c02 <__swsetup_r+0x1e>
 8040c34:	0758      	lsls	r0, r3, #29
 8040c36:	d512      	bpl.n	8040c5e <__swsetup_r+0x7a>
 8040c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8040c3a:	b141      	cbz	r1, 8040c4e <__swsetup_r+0x6a>
 8040c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8040c40:	4299      	cmp	r1, r3
 8040c42:	d002      	beq.n	8040c4a <__swsetup_r+0x66>
 8040c44:	4630      	mov	r0, r6
 8040c46:	f7ff fb59 	bl	80402fc <_free_r>
 8040c4a:	2300      	movs	r3, #0
 8040c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8040c4e:	89a3      	ldrh	r3, [r4, #12]
 8040c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8040c54:	81a3      	strh	r3, [r4, #12]
 8040c56:	2300      	movs	r3, #0
 8040c58:	6063      	str	r3, [r4, #4]
 8040c5a:	6923      	ldr	r3, [r4, #16]
 8040c5c:	6023      	str	r3, [r4, #0]
 8040c5e:	89a3      	ldrh	r3, [r4, #12]
 8040c60:	f043 0308 	orr.w	r3, r3, #8
 8040c64:	81a3      	strh	r3, [r4, #12]
 8040c66:	6923      	ldr	r3, [r4, #16]
 8040c68:	b94b      	cbnz	r3, 8040c7e <__swsetup_r+0x9a>
 8040c6a:	89a3      	ldrh	r3, [r4, #12]
 8040c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8040c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8040c74:	d003      	beq.n	8040c7e <__swsetup_r+0x9a>
 8040c76:	4621      	mov	r1, r4
 8040c78:	4630      	mov	r0, r6
 8040c7a:	f000 fa01 	bl	8041080 <__smakebuf_r>
 8040c7e:	89a0      	ldrh	r0, [r4, #12]
 8040c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8040c84:	f010 0301 	ands.w	r3, r0, #1
 8040c88:	d00a      	beq.n	8040ca0 <__swsetup_r+0xbc>
 8040c8a:	2300      	movs	r3, #0
 8040c8c:	60a3      	str	r3, [r4, #8]
 8040c8e:	6963      	ldr	r3, [r4, #20]
 8040c90:	425b      	negs	r3, r3
 8040c92:	61a3      	str	r3, [r4, #24]
 8040c94:	6923      	ldr	r3, [r4, #16]
 8040c96:	b943      	cbnz	r3, 8040caa <__swsetup_r+0xc6>
 8040c98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8040c9c:	d1ba      	bne.n	8040c14 <__swsetup_r+0x30>
 8040c9e:	bd70      	pop	{r4, r5, r6, pc}
 8040ca0:	0781      	lsls	r1, r0, #30
 8040ca2:	bf58      	it	pl
 8040ca4:	6963      	ldrpl	r3, [r4, #20]
 8040ca6:	60a3      	str	r3, [r4, #8]
 8040ca8:	e7f4      	b.n	8040c94 <__swsetup_r+0xb0>
 8040caa:	2000      	movs	r0, #0
 8040cac:	e7f7      	b.n	8040c9e <__swsetup_r+0xba>
 8040cae:	bf00      	nop
 8040cb0:	24000104 	.word	0x24000104
 8040cb4:	0805c6e8 	.word	0x0805c6e8
 8040cb8:	0805c708 	.word	0x0805c708
 8040cbc:	0805c6c8 	.word	0x0805c6c8

08040cc0 <__sflush_r>:
 8040cc0:	898a      	ldrh	r2, [r1, #12]
 8040cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8040cc6:	4605      	mov	r5, r0
 8040cc8:	0710      	lsls	r0, r2, #28
 8040cca:	460c      	mov	r4, r1
 8040ccc:	d458      	bmi.n	8040d80 <__sflush_r+0xc0>
 8040cce:	684b      	ldr	r3, [r1, #4]
 8040cd0:	2b00      	cmp	r3, #0
 8040cd2:	dc05      	bgt.n	8040ce0 <__sflush_r+0x20>
 8040cd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8040cd6:	2b00      	cmp	r3, #0
 8040cd8:	dc02      	bgt.n	8040ce0 <__sflush_r+0x20>
 8040cda:	2000      	movs	r0, #0
 8040cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8040ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8040ce2:	2e00      	cmp	r6, #0
 8040ce4:	d0f9      	beq.n	8040cda <__sflush_r+0x1a>
 8040ce6:	2300      	movs	r3, #0
 8040ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8040cec:	682f      	ldr	r7, [r5, #0]
 8040cee:	602b      	str	r3, [r5, #0]
 8040cf0:	d032      	beq.n	8040d58 <__sflush_r+0x98>
 8040cf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8040cf4:	89a3      	ldrh	r3, [r4, #12]
 8040cf6:	075a      	lsls	r2, r3, #29
 8040cf8:	d505      	bpl.n	8040d06 <__sflush_r+0x46>
 8040cfa:	6863      	ldr	r3, [r4, #4]
 8040cfc:	1ac0      	subs	r0, r0, r3
 8040cfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8040d00:	b10b      	cbz	r3, 8040d06 <__sflush_r+0x46>
 8040d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8040d04:	1ac0      	subs	r0, r0, r3
 8040d06:	2300      	movs	r3, #0
 8040d08:	4602      	mov	r2, r0
 8040d0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8040d0c:	6a21      	ldr	r1, [r4, #32]
 8040d0e:	4628      	mov	r0, r5
 8040d10:	47b0      	blx	r6
 8040d12:	1c43      	adds	r3, r0, #1
 8040d14:	89a3      	ldrh	r3, [r4, #12]
 8040d16:	d106      	bne.n	8040d26 <__sflush_r+0x66>
 8040d18:	6829      	ldr	r1, [r5, #0]
 8040d1a:	291d      	cmp	r1, #29
 8040d1c:	d82c      	bhi.n	8040d78 <__sflush_r+0xb8>
 8040d1e:	4a2a      	ldr	r2, [pc, #168]	; (8040dc8 <__sflush_r+0x108>)
 8040d20:	40ca      	lsrs	r2, r1
 8040d22:	07d6      	lsls	r6, r2, #31
 8040d24:	d528      	bpl.n	8040d78 <__sflush_r+0xb8>
 8040d26:	2200      	movs	r2, #0
 8040d28:	6062      	str	r2, [r4, #4]
 8040d2a:	04d9      	lsls	r1, r3, #19
 8040d2c:	6922      	ldr	r2, [r4, #16]
 8040d2e:	6022      	str	r2, [r4, #0]
 8040d30:	d504      	bpl.n	8040d3c <__sflush_r+0x7c>
 8040d32:	1c42      	adds	r2, r0, #1
 8040d34:	d101      	bne.n	8040d3a <__sflush_r+0x7a>
 8040d36:	682b      	ldr	r3, [r5, #0]
 8040d38:	b903      	cbnz	r3, 8040d3c <__sflush_r+0x7c>
 8040d3a:	6560      	str	r0, [r4, #84]	; 0x54
 8040d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8040d3e:	602f      	str	r7, [r5, #0]
 8040d40:	2900      	cmp	r1, #0
 8040d42:	d0ca      	beq.n	8040cda <__sflush_r+0x1a>
 8040d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8040d48:	4299      	cmp	r1, r3
 8040d4a:	d002      	beq.n	8040d52 <__sflush_r+0x92>
 8040d4c:	4628      	mov	r0, r5
 8040d4e:	f7ff fad5 	bl	80402fc <_free_r>
 8040d52:	2000      	movs	r0, #0
 8040d54:	6360      	str	r0, [r4, #52]	; 0x34
 8040d56:	e7c1      	b.n	8040cdc <__sflush_r+0x1c>
 8040d58:	6a21      	ldr	r1, [r4, #32]
 8040d5a:	2301      	movs	r3, #1
 8040d5c:	4628      	mov	r0, r5
 8040d5e:	47b0      	blx	r6
 8040d60:	1c41      	adds	r1, r0, #1
 8040d62:	d1c7      	bne.n	8040cf4 <__sflush_r+0x34>
 8040d64:	682b      	ldr	r3, [r5, #0]
 8040d66:	2b00      	cmp	r3, #0
 8040d68:	d0c4      	beq.n	8040cf4 <__sflush_r+0x34>
 8040d6a:	2b1d      	cmp	r3, #29
 8040d6c:	d001      	beq.n	8040d72 <__sflush_r+0xb2>
 8040d6e:	2b16      	cmp	r3, #22
 8040d70:	d101      	bne.n	8040d76 <__sflush_r+0xb6>
 8040d72:	602f      	str	r7, [r5, #0]
 8040d74:	e7b1      	b.n	8040cda <__sflush_r+0x1a>
 8040d76:	89a3      	ldrh	r3, [r4, #12]
 8040d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040d7c:	81a3      	strh	r3, [r4, #12]
 8040d7e:	e7ad      	b.n	8040cdc <__sflush_r+0x1c>
 8040d80:	690f      	ldr	r7, [r1, #16]
 8040d82:	2f00      	cmp	r7, #0
 8040d84:	d0a9      	beq.n	8040cda <__sflush_r+0x1a>
 8040d86:	0793      	lsls	r3, r2, #30
 8040d88:	680e      	ldr	r6, [r1, #0]
 8040d8a:	bf08      	it	eq
 8040d8c:	694b      	ldreq	r3, [r1, #20]
 8040d8e:	600f      	str	r7, [r1, #0]
 8040d90:	bf18      	it	ne
 8040d92:	2300      	movne	r3, #0
 8040d94:	eba6 0807 	sub.w	r8, r6, r7
 8040d98:	608b      	str	r3, [r1, #8]
 8040d9a:	f1b8 0f00 	cmp.w	r8, #0
 8040d9e:	dd9c      	ble.n	8040cda <__sflush_r+0x1a>
 8040da0:	6a21      	ldr	r1, [r4, #32]
 8040da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8040da4:	4643      	mov	r3, r8
 8040da6:	463a      	mov	r2, r7
 8040da8:	4628      	mov	r0, r5
 8040daa:	47b0      	blx	r6
 8040dac:	2800      	cmp	r0, #0
 8040dae:	dc06      	bgt.n	8040dbe <__sflush_r+0xfe>
 8040db0:	89a3      	ldrh	r3, [r4, #12]
 8040db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040db6:	81a3      	strh	r3, [r4, #12]
 8040db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040dbc:	e78e      	b.n	8040cdc <__sflush_r+0x1c>
 8040dbe:	4407      	add	r7, r0
 8040dc0:	eba8 0800 	sub.w	r8, r8, r0
 8040dc4:	e7e9      	b.n	8040d9a <__sflush_r+0xda>
 8040dc6:	bf00      	nop
 8040dc8:	20400001 	.word	0x20400001

08040dcc <_fflush_r>:
 8040dcc:	b538      	push	{r3, r4, r5, lr}
 8040dce:	690b      	ldr	r3, [r1, #16]
 8040dd0:	4605      	mov	r5, r0
 8040dd2:	460c      	mov	r4, r1
 8040dd4:	b913      	cbnz	r3, 8040ddc <_fflush_r+0x10>
 8040dd6:	2500      	movs	r5, #0
 8040dd8:	4628      	mov	r0, r5
 8040dda:	bd38      	pop	{r3, r4, r5, pc}
 8040ddc:	b118      	cbz	r0, 8040de6 <_fflush_r+0x1a>
 8040dde:	6983      	ldr	r3, [r0, #24]
 8040de0:	b90b      	cbnz	r3, 8040de6 <_fflush_r+0x1a>
 8040de2:	f000 f887 	bl	8040ef4 <__sinit>
 8040de6:	4b14      	ldr	r3, [pc, #80]	; (8040e38 <_fflush_r+0x6c>)
 8040de8:	429c      	cmp	r4, r3
 8040dea:	d11b      	bne.n	8040e24 <_fflush_r+0x58>
 8040dec:	686c      	ldr	r4, [r5, #4]
 8040dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8040df2:	2b00      	cmp	r3, #0
 8040df4:	d0ef      	beq.n	8040dd6 <_fflush_r+0xa>
 8040df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8040df8:	07d0      	lsls	r0, r2, #31
 8040dfa:	d404      	bmi.n	8040e06 <_fflush_r+0x3a>
 8040dfc:	0599      	lsls	r1, r3, #22
 8040dfe:	d402      	bmi.n	8040e06 <_fflush_r+0x3a>
 8040e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8040e02:	f000 f915 	bl	8041030 <__retarget_lock_acquire_recursive>
 8040e06:	4628      	mov	r0, r5
 8040e08:	4621      	mov	r1, r4
 8040e0a:	f7ff ff59 	bl	8040cc0 <__sflush_r>
 8040e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8040e10:	07da      	lsls	r2, r3, #31
 8040e12:	4605      	mov	r5, r0
 8040e14:	d4e0      	bmi.n	8040dd8 <_fflush_r+0xc>
 8040e16:	89a3      	ldrh	r3, [r4, #12]
 8040e18:	059b      	lsls	r3, r3, #22
 8040e1a:	d4dd      	bmi.n	8040dd8 <_fflush_r+0xc>
 8040e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8040e1e:	f000 f908 	bl	8041032 <__retarget_lock_release_recursive>
 8040e22:	e7d9      	b.n	8040dd8 <_fflush_r+0xc>
 8040e24:	4b05      	ldr	r3, [pc, #20]	; (8040e3c <_fflush_r+0x70>)
 8040e26:	429c      	cmp	r4, r3
 8040e28:	d101      	bne.n	8040e2e <_fflush_r+0x62>
 8040e2a:	68ac      	ldr	r4, [r5, #8]
 8040e2c:	e7df      	b.n	8040dee <_fflush_r+0x22>
 8040e2e:	4b04      	ldr	r3, [pc, #16]	; (8040e40 <_fflush_r+0x74>)
 8040e30:	429c      	cmp	r4, r3
 8040e32:	bf08      	it	eq
 8040e34:	68ec      	ldreq	r4, [r5, #12]
 8040e36:	e7da      	b.n	8040dee <_fflush_r+0x22>
 8040e38:	0805c6e8 	.word	0x0805c6e8
 8040e3c:	0805c708 	.word	0x0805c708
 8040e40:	0805c6c8 	.word	0x0805c6c8

08040e44 <std>:
 8040e44:	2300      	movs	r3, #0
 8040e46:	b510      	push	{r4, lr}
 8040e48:	4604      	mov	r4, r0
 8040e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8040e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8040e52:	6083      	str	r3, [r0, #8]
 8040e54:	8181      	strh	r1, [r0, #12]
 8040e56:	6643      	str	r3, [r0, #100]	; 0x64
 8040e58:	81c2      	strh	r2, [r0, #14]
 8040e5a:	6183      	str	r3, [r0, #24]
 8040e5c:	4619      	mov	r1, r3
 8040e5e:	2208      	movs	r2, #8
 8040e60:	305c      	adds	r0, #92	; 0x5c
 8040e62:	f7ff fa43 	bl	80402ec <memset>
 8040e66:	4b05      	ldr	r3, [pc, #20]	; (8040e7c <std+0x38>)
 8040e68:	6263      	str	r3, [r4, #36]	; 0x24
 8040e6a:	4b05      	ldr	r3, [pc, #20]	; (8040e80 <std+0x3c>)
 8040e6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8040e6e:	4b05      	ldr	r3, [pc, #20]	; (8040e84 <std+0x40>)
 8040e70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8040e72:	4b05      	ldr	r3, [pc, #20]	; (8040e88 <std+0x44>)
 8040e74:	6224      	str	r4, [r4, #32]
 8040e76:	6323      	str	r3, [r4, #48]	; 0x30
 8040e78:	bd10      	pop	{r4, pc}
 8040e7a:	bf00      	nop
 8040e7c:	08041119 	.word	0x08041119
 8040e80:	0804113b 	.word	0x0804113b
 8040e84:	08041173 	.word	0x08041173
 8040e88:	08041197 	.word	0x08041197

08040e8c <_cleanup_r>:
 8040e8c:	4901      	ldr	r1, [pc, #4]	; (8040e94 <_cleanup_r+0x8>)
 8040e8e:	f000 b8af 	b.w	8040ff0 <_fwalk_reent>
 8040e92:	bf00      	nop
 8040e94:	08040dcd 	.word	0x08040dcd

08040e98 <__sfmoreglue>:
 8040e98:	b570      	push	{r4, r5, r6, lr}
 8040e9a:	2268      	movs	r2, #104	; 0x68
 8040e9c:	1e4d      	subs	r5, r1, #1
 8040e9e:	4355      	muls	r5, r2
 8040ea0:	460e      	mov	r6, r1
 8040ea2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8040ea6:	f7ff fa95 	bl	80403d4 <_malloc_r>
 8040eaa:	4604      	mov	r4, r0
 8040eac:	b140      	cbz	r0, 8040ec0 <__sfmoreglue+0x28>
 8040eae:	2100      	movs	r1, #0
 8040eb0:	e9c0 1600 	strd	r1, r6, [r0]
 8040eb4:	300c      	adds	r0, #12
 8040eb6:	60a0      	str	r0, [r4, #8]
 8040eb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8040ebc:	f7ff fa16 	bl	80402ec <memset>
 8040ec0:	4620      	mov	r0, r4
 8040ec2:	bd70      	pop	{r4, r5, r6, pc}

08040ec4 <__sfp_lock_acquire>:
 8040ec4:	4801      	ldr	r0, [pc, #4]	; (8040ecc <__sfp_lock_acquire+0x8>)
 8040ec6:	f000 b8b3 	b.w	8041030 <__retarget_lock_acquire_recursive>
 8040eca:	bf00      	nop
 8040ecc:	24025bbd 	.word	0x24025bbd

08040ed0 <__sfp_lock_release>:
 8040ed0:	4801      	ldr	r0, [pc, #4]	; (8040ed8 <__sfp_lock_release+0x8>)
 8040ed2:	f000 b8ae 	b.w	8041032 <__retarget_lock_release_recursive>
 8040ed6:	bf00      	nop
 8040ed8:	24025bbd 	.word	0x24025bbd

08040edc <__sinit_lock_acquire>:
 8040edc:	4801      	ldr	r0, [pc, #4]	; (8040ee4 <__sinit_lock_acquire+0x8>)
 8040ede:	f000 b8a7 	b.w	8041030 <__retarget_lock_acquire_recursive>
 8040ee2:	bf00      	nop
 8040ee4:	24025bbe 	.word	0x24025bbe

08040ee8 <__sinit_lock_release>:
 8040ee8:	4801      	ldr	r0, [pc, #4]	; (8040ef0 <__sinit_lock_release+0x8>)
 8040eea:	f000 b8a2 	b.w	8041032 <__retarget_lock_release_recursive>
 8040eee:	bf00      	nop
 8040ef0:	24025bbe 	.word	0x24025bbe

08040ef4 <__sinit>:
 8040ef4:	b510      	push	{r4, lr}
 8040ef6:	4604      	mov	r4, r0
 8040ef8:	f7ff fff0 	bl	8040edc <__sinit_lock_acquire>
 8040efc:	69a3      	ldr	r3, [r4, #24]
 8040efe:	b11b      	cbz	r3, 8040f08 <__sinit+0x14>
 8040f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8040f04:	f7ff bff0 	b.w	8040ee8 <__sinit_lock_release>
 8040f08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8040f0c:	6523      	str	r3, [r4, #80]	; 0x50
 8040f0e:	4b13      	ldr	r3, [pc, #76]	; (8040f5c <__sinit+0x68>)
 8040f10:	4a13      	ldr	r2, [pc, #76]	; (8040f60 <__sinit+0x6c>)
 8040f12:	681b      	ldr	r3, [r3, #0]
 8040f14:	62a2      	str	r2, [r4, #40]	; 0x28
 8040f16:	42a3      	cmp	r3, r4
 8040f18:	bf04      	itt	eq
 8040f1a:	2301      	moveq	r3, #1
 8040f1c:	61a3      	streq	r3, [r4, #24]
 8040f1e:	4620      	mov	r0, r4
 8040f20:	f000 f820 	bl	8040f64 <__sfp>
 8040f24:	6060      	str	r0, [r4, #4]
 8040f26:	4620      	mov	r0, r4
 8040f28:	f000 f81c 	bl	8040f64 <__sfp>
 8040f2c:	60a0      	str	r0, [r4, #8]
 8040f2e:	4620      	mov	r0, r4
 8040f30:	f000 f818 	bl	8040f64 <__sfp>
 8040f34:	2200      	movs	r2, #0
 8040f36:	60e0      	str	r0, [r4, #12]
 8040f38:	2104      	movs	r1, #4
 8040f3a:	6860      	ldr	r0, [r4, #4]
 8040f3c:	f7ff ff82 	bl	8040e44 <std>
 8040f40:	68a0      	ldr	r0, [r4, #8]
 8040f42:	2201      	movs	r2, #1
 8040f44:	2109      	movs	r1, #9
 8040f46:	f7ff ff7d 	bl	8040e44 <std>
 8040f4a:	68e0      	ldr	r0, [r4, #12]
 8040f4c:	2202      	movs	r2, #2
 8040f4e:	2112      	movs	r1, #18
 8040f50:	f7ff ff78 	bl	8040e44 <std>
 8040f54:	2301      	movs	r3, #1
 8040f56:	61a3      	str	r3, [r4, #24]
 8040f58:	e7d2      	b.n	8040f00 <__sinit+0xc>
 8040f5a:	bf00      	nop
 8040f5c:	0805c690 	.word	0x0805c690
 8040f60:	08040e8d 	.word	0x08040e8d

08040f64 <__sfp>:
 8040f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8040f66:	4607      	mov	r7, r0
 8040f68:	f7ff ffac 	bl	8040ec4 <__sfp_lock_acquire>
 8040f6c:	4b1e      	ldr	r3, [pc, #120]	; (8040fe8 <__sfp+0x84>)
 8040f6e:	681e      	ldr	r6, [r3, #0]
 8040f70:	69b3      	ldr	r3, [r6, #24]
 8040f72:	b913      	cbnz	r3, 8040f7a <__sfp+0x16>
 8040f74:	4630      	mov	r0, r6
 8040f76:	f7ff ffbd 	bl	8040ef4 <__sinit>
 8040f7a:	3648      	adds	r6, #72	; 0x48
 8040f7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8040f80:	3b01      	subs	r3, #1
 8040f82:	d503      	bpl.n	8040f8c <__sfp+0x28>
 8040f84:	6833      	ldr	r3, [r6, #0]
 8040f86:	b30b      	cbz	r3, 8040fcc <__sfp+0x68>
 8040f88:	6836      	ldr	r6, [r6, #0]
 8040f8a:	e7f7      	b.n	8040f7c <__sfp+0x18>
 8040f8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8040f90:	b9d5      	cbnz	r5, 8040fc8 <__sfp+0x64>
 8040f92:	4b16      	ldr	r3, [pc, #88]	; (8040fec <__sfp+0x88>)
 8040f94:	60e3      	str	r3, [r4, #12]
 8040f96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8040f9a:	6665      	str	r5, [r4, #100]	; 0x64
 8040f9c:	f000 f847 	bl	804102e <__retarget_lock_init_recursive>
 8040fa0:	f7ff ff96 	bl	8040ed0 <__sfp_lock_release>
 8040fa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8040fa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8040fac:	6025      	str	r5, [r4, #0]
 8040fae:	61a5      	str	r5, [r4, #24]
 8040fb0:	2208      	movs	r2, #8
 8040fb2:	4629      	mov	r1, r5
 8040fb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8040fb8:	f7ff f998 	bl	80402ec <memset>
 8040fbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8040fc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8040fc4:	4620      	mov	r0, r4
 8040fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8040fc8:	3468      	adds	r4, #104	; 0x68
 8040fca:	e7d9      	b.n	8040f80 <__sfp+0x1c>
 8040fcc:	2104      	movs	r1, #4
 8040fce:	4638      	mov	r0, r7
 8040fd0:	f7ff ff62 	bl	8040e98 <__sfmoreglue>
 8040fd4:	4604      	mov	r4, r0
 8040fd6:	6030      	str	r0, [r6, #0]
 8040fd8:	2800      	cmp	r0, #0
 8040fda:	d1d5      	bne.n	8040f88 <__sfp+0x24>
 8040fdc:	f7ff ff78 	bl	8040ed0 <__sfp_lock_release>
 8040fe0:	230c      	movs	r3, #12
 8040fe2:	603b      	str	r3, [r7, #0]
 8040fe4:	e7ee      	b.n	8040fc4 <__sfp+0x60>
 8040fe6:	bf00      	nop
 8040fe8:	0805c690 	.word	0x0805c690
 8040fec:	ffff0001 	.word	0xffff0001

08040ff0 <_fwalk_reent>:
 8040ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8040ff4:	4606      	mov	r6, r0
 8040ff6:	4688      	mov	r8, r1
 8040ff8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8040ffc:	2700      	movs	r7, #0
 8040ffe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8041002:	f1b9 0901 	subs.w	r9, r9, #1
 8041006:	d505      	bpl.n	8041014 <_fwalk_reent+0x24>
 8041008:	6824      	ldr	r4, [r4, #0]
 804100a:	2c00      	cmp	r4, #0
 804100c:	d1f7      	bne.n	8040ffe <_fwalk_reent+0xe>
 804100e:	4638      	mov	r0, r7
 8041010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8041014:	89ab      	ldrh	r3, [r5, #12]
 8041016:	2b01      	cmp	r3, #1
 8041018:	d907      	bls.n	804102a <_fwalk_reent+0x3a>
 804101a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804101e:	3301      	adds	r3, #1
 8041020:	d003      	beq.n	804102a <_fwalk_reent+0x3a>
 8041022:	4629      	mov	r1, r5
 8041024:	4630      	mov	r0, r6
 8041026:	47c0      	blx	r8
 8041028:	4307      	orrs	r7, r0
 804102a:	3568      	adds	r5, #104	; 0x68
 804102c:	e7e9      	b.n	8041002 <_fwalk_reent+0x12>

0804102e <__retarget_lock_init_recursive>:
 804102e:	4770      	bx	lr

08041030 <__retarget_lock_acquire_recursive>:
 8041030:	4770      	bx	lr

08041032 <__retarget_lock_release_recursive>:
 8041032:	4770      	bx	lr

08041034 <__swhatbuf_r>:
 8041034:	b570      	push	{r4, r5, r6, lr}
 8041036:	460e      	mov	r6, r1
 8041038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804103c:	2900      	cmp	r1, #0
 804103e:	b096      	sub	sp, #88	; 0x58
 8041040:	4614      	mov	r4, r2
 8041042:	461d      	mov	r5, r3
 8041044:	da08      	bge.n	8041058 <__swhatbuf_r+0x24>
 8041046:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 804104a:	2200      	movs	r2, #0
 804104c:	602a      	str	r2, [r5, #0]
 804104e:	061a      	lsls	r2, r3, #24
 8041050:	d410      	bmi.n	8041074 <__swhatbuf_r+0x40>
 8041052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8041056:	e00e      	b.n	8041076 <__swhatbuf_r+0x42>
 8041058:	466a      	mov	r2, sp
 804105a:	f000 f8c3 	bl	80411e4 <_fstat_r>
 804105e:	2800      	cmp	r0, #0
 8041060:	dbf1      	blt.n	8041046 <__swhatbuf_r+0x12>
 8041062:	9a01      	ldr	r2, [sp, #4]
 8041064:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8041068:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804106c:	425a      	negs	r2, r3
 804106e:	415a      	adcs	r2, r3
 8041070:	602a      	str	r2, [r5, #0]
 8041072:	e7ee      	b.n	8041052 <__swhatbuf_r+0x1e>
 8041074:	2340      	movs	r3, #64	; 0x40
 8041076:	2000      	movs	r0, #0
 8041078:	6023      	str	r3, [r4, #0]
 804107a:	b016      	add	sp, #88	; 0x58
 804107c:	bd70      	pop	{r4, r5, r6, pc}
	...

08041080 <__smakebuf_r>:
 8041080:	898b      	ldrh	r3, [r1, #12]
 8041082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8041084:	079d      	lsls	r5, r3, #30
 8041086:	4606      	mov	r6, r0
 8041088:	460c      	mov	r4, r1
 804108a:	d507      	bpl.n	804109c <__smakebuf_r+0x1c>
 804108c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8041090:	6023      	str	r3, [r4, #0]
 8041092:	6123      	str	r3, [r4, #16]
 8041094:	2301      	movs	r3, #1
 8041096:	6163      	str	r3, [r4, #20]
 8041098:	b002      	add	sp, #8
 804109a:	bd70      	pop	{r4, r5, r6, pc}
 804109c:	ab01      	add	r3, sp, #4
 804109e:	466a      	mov	r2, sp
 80410a0:	f7ff ffc8 	bl	8041034 <__swhatbuf_r>
 80410a4:	9900      	ldr	r1, [sp, #0]
 80410a6:	4605      	mov	r5, r0
 80410a8:	4630      	mov	r0, r6
 80410aa:	f7ff f993 	bl	80403d4 <_malloc_r>
 80410ae:	b948      	cbnz	r0, 80410c4 <__smakebuf_r+0x44>
 80410b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80410b4:	059a      	lsls	r2, r3, #22
 80410b6:	d4ef      	bmi.n	8041098 <__smakebuf_r+0x18>
 80410b8:	f023 0303 	bic.w	r3, r3, #3
 80410bc:	f043 0302 	orr.w	r3, r3, #2
 80410c0:	81a3      	strh	r3, [r4, #12]
 80410c2:	e7e3      	b.n	804108c <__smakebuf_r+0xc>
 80410c4:	4b0d      	ldr	r3, [pc, #52]	; (80410fc <__smakebuf_r+0x7c>)
 80410c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80410c8:	89a3      	ldrh	r3, [r4, #12]
 80410ca:	6020      	str	r0, [r4, #0]
 80410cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80410d0:	81a3      	strh	r3, [r4, #12]
 80410d2:	9b00      	ldr	r3, [sp, #0]
 80410d4:	6163      	str	r3, [r4, #20]
 80410d6:	9b01      	ldr	r3, [sp, #4]
 80410d8:	6120      	str	r0, [r4, #16]
 80410da:	b15b      	cbz	r3, 80410f4 <__smakebuf_r+0x74>
 80410dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80410e0:	4630      	mov	r0, r6
 80410e2:	f000 f891 	bl	8041208 <_isatty_r>
 80410e6:	b128      	cbz	r0, 80410f4 <__smakebuf_r+0x74>
 80410e8:	89a3      	ldrh	r3, [r4, #12]
 80410ea:	f023 0303 	bic.w	r3, r3, #3
 80410ee:	f043 0301 	orr.w	r3, r3, #1
 80410f2:	81a3      	strh	r3, [r4, #12]
 80410f4:	89a0      	ldrh	r0, [r4, #12]
 80410f6:	4305      	orrs	r5, r0
 80410f8:	81a5      	strh	r5, [r4, #12]
 80410fa:	e7cd      	b.n	8041098 <__smakebuf_r+0x18>
 80410fc:	08040e8d 	.word	0x08040e8d

08041100 <__malloc_lock>:
 8041100:	4801      	ldr	r0, [pc, #4]	; (8041108 <__malloc_lock+0x8>)
 8041102:	f7ff bf95 	b.w	8041030 <__retarget_lock_acquire_recursive>
 8041106:	bf00      	nop
 8041108:	24025bbc 	.word	0x24025bbc

0804110c <__malloc_unlock>:
 804110c:	4801      	ldr	r0, [pc, #4]	; (8041114 <__malloc_unlock+0x8>)
 804110e:	f7ff bf90 	b.w	8041032 <__retarget_lock_release_recursive>
 8041112:	bf00      	nop
 8041114:	24025bbc 	.word	0x24025bbc

08041118 <__sread>:
 8041118:	b510      	push	{r4, lr}
 804111a:	460c      	mov	r4, r1
 804111c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8041120:	f000 f894 	bl	804124c <_read_r>
 8041124:	2800      	cmp	r0, #0
 8041126:	bfab      	itete	ge
 8041128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804112a:	89a3      	ldrhlt	r3, [r4, #12]
 804112c:	181b      	addge	r3, r3, r0
 804112e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8041132:	bfac      	ite	ge
 8041134:	6563      	strge	r3, [r4, #84]	; 0x54
 8041136:	81a3      	strhlt	r3, [r4, #12]
 8041138:	bd10      	pop	{r4, pc}

0804113a <__swrite>:
 804113a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804113e:	461f      	mov	r7, r3
 8041140:	898b      	ldrh	r3, [r1, #12]
 8041142:	05db      	lsls	r3, r3, #23
 8041144:	4605      	mov	r5, r0
 8041146:	460c      	mov	r4, r1
 8041148:	4616      	mov	r6, r2
 804114a:	d505      	bpl.n	8041158 <__swrite+0x1e>
 804114c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8041150:	2302      	movs	r3, #2
 8041152:	2200      	movs	r2, #0
 8041154:	f000 f868 	bl	8041228 <_lseek_r>
 8041158:	89a3      	ldrh	r3, [r4, #12]
 804115a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804115e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8041162:	81a3      	strh	r3, [r4, #12]
 8041164:	4632      	mov	r2, r6
 8041166:	463b      	mov	r3, r7
 8041168:	4628      	mov	r0, r5
 804116a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804116e:	f000 b817 	b.w	80411a0 <_write_r>

08041172 <__sseek>:
 8041172:	b510      	push	{r4, lr}
 8041174:	460c      	mov	r4, r1
 8041176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804117a:	f000 f855 	bl	8041228 <_lseek_r>
 804117e:	1c43      	adds	r3, r0, #1
 8041180:	89a3      	ldrh	r3, [r4, #12]
 8041182:	bf15      	itete	ne
 8041184:	6560      	strne	r0, [r4, #84]	; 0x54
 8041186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804118a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804118e:	81a3      	strheq	r3, [r4, #12]
 8041190:	bf18      	it	ne
 8041192:	81a3      	strhne	r3, [r4, #12]
 8041194:	bd10      	pop	{r4, pc}

08041196 <__sclose>:
 8041196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804119a:	f000 b813 	b.w	80411c4 <_close_r>
	...

080411a0 <_write_r>:
 80411a0:	b538      	push	{r3, r4, r5, lr}
 80411a2:	4d07      	ldr	r5, [pc, #28]	; (80411c0 <_write_r+0x20>)
 80411a4:	4604      	mov	r4, r0
 80411a6:	4608      	mov	r0, r1
 80411a8:	4611      	mov	r1, r2
 80411aa:	2200      	movs	r2, #0
 80411ac:	602a      	str	r2, [r5, #0]
 80411ae:	461a      	mov	r2, r3
 80411b0:	f7ed f93f 	bl	802e432 <_write>
 80411b4:	1c43      	adds	r3, r0, #1
 80411b6:	d102      	bne.n	80411be <_write_r+0x1e>
 80411b8:	682b      	ldr	r3, [r5, #0]
 80411ba:	b103      	cbz	r3, 80411be <_write_r+0x1e>
 80411bc:	6023      	str	r3, [r4, #0]
 80411be:	bd38      	pop	{r3, r4, r5, pc}
 80411c0:	24025bc0 	.word	0x24025bc0

080411c4 <_close_r>:
 80411c4:	b538      	push	{r3, r4, r5, lr}
 80411c6:	4d06      	ldr	r5, [pc, #24]	; (80411e0 <_close_r+0x1c>)
 80411c8:	2300      	movs	r3, #0
 80411ca:	4604      	mov	r4, r0
 80411cc:	4608      	mov	r0, r1
 80411ce:	602b      	str	r3, [r5, #0]
 80411d0:	f7ed f94b 	bl	802e46a <_close>
 80411d4:	1c43      	adds	r3, r0, #1
 80411d6:	d102      	bne.n	80411de <_close_r+0x1a>
 80411d8:	682b      	ldr	r3, [r5, #0]
 80411da:	b103      	cbz	r3, 80411de <_close_r+0x1a>
 80411dc:	6023      	str	r3, [r4, #0]
 80411de:	bd38      	pop	{r3, r4, r5, pc}
 80411e0:	24025bc0 	.word	0x24025bc0

080411e4 <_fstat_r>:
 80411e4:	b538      	push	{r3, r4, r5, lr}
 80411e6:	4d07      	ldr	r5, [pc, #28]	; (8041204 <_fstat_r+0x20>)
 80411e8:	2300      	movs	r3, #0
 80411ea:	4604      	mov	r4, r0
 80411ec:	4608      	mov	r0, r1
 80411ee:	4611      	mov	r1, r2
 80411f0:	602b      	str	r3, [r5, #0]
 80411f2:	f7ed f946 	bl	802e482 <_fstat>
 80411f6:	1c43      	adds	r3, r0, #1
 80411f8:	d102      	bne.n	8041200 <_fstat_r+0x1c>
 80411fa:	682b      	ldr	r3, [r5, #0]
 80411fc:	b103      	cbz	r3, 8041200 <_fstat_r+0x1c>
 80411fe:	6023      	str	r3, [r4, #0]
 8041200:	bd38      	pop	{r3, r4, r5, pc}
 8041202:	bf00      	nop
 8041204:	24025bc0 	.word	0x24025bc0

08041208 <_isatty_r>:
 8041208:	b538      	push	{r3, r4, r5, lr}
 804120a:	4d06      	ldr	r5, [pc, #24]	; (8041224 <_isatty_r+0x1c>)
 804120c:	2300      	movs	r3, #0
 804120e:	4604      	mov	r4, r0
 8041210:	4608      	mov	r0, r1
 8041212:	602b      	str	r3, [r5, #0]
 8041214:	f7ed f945 	bl	802e4a2 <_isatty>
 8041218:	1c43      	adds	r3, r0, #1
 804121a:	d102      	bne.n	8041222 <_isatty_r+0x1a>
 804121c:	682b      	ldr	r3, [r5, #0]
 804121e:	b103      	cbz	r3, 8041222 <_isatty_r+0x1a>
 8041220:	6023      	str	r3, [r4, #0]
 8041222:	bd38      	pop	{r3, r4, r5, pc}
 8041224:	24025bc0 	.word	0x24025bc0

08041228 <_lseek_r>:
 8041228:	b538      	push	{r3, r4, r5, lr}
 804122a:	4d07      	ldr	r5, [pc, #28]	; (8041248 <_lseek_r+0x20>)
 804122c:	4604      	mov	r4, r0
 804122e:	4608      	mov	r0, r1
 8041230:	4611      	mov	r1, r2
 8041232:	2200      	movs	r2, #0
 8041234:	602a      	str	r2, [r5, #0]
 8041236:	461a      	mov	r2, r3
 8041238:	f7ed f93e 	bl	802e4b8 <_lseek>
 804123c:	1c43      	adds	r3, r0, #1
 804123e:	d102      	bne.n	8041246 <_lseek_r+0x1e>
 8041240:	682b      	ldr	r3, [r5, #0]
 8041242:	b103      	cbz	r3, 8041246 <_lseek_r+0x1e>
 8041244:	6023      	str	r3, [r4, #0]
 8041246:	bd38      	pop	{r3, r4, r5, pc}
 8041248:	24025bc0 	.word	0x24025bc0

0804124c <_read_r>:
 804124c:	b538      	push	{r3, r4, r5, lr}
 804124e:	4d07      	ldr	r5, [pc, #28]	; (804126c <_read_r+0x20>)
 8041250:	4604      	mov	r4, r0
 8041252:	4608      	mov	r0, r1
 8041254:	4611      	mov	r1, r2
 8041256:	2200      	movs	r2, #0
 8041258:	602a      	str	r2, [r5, #0]
 804125a:	461a      	mov	r2, r3
 804125c:	f7ed f8cc 	bl	802e3f8 <_read>
 8041260:	1c43      	adds	r3, r0, #1
 8041262:	d102      	bne.n	804126a <_read_r+0x1e>
 8041264:	682b      	ldr	r3, [r5, #0]
 8041266:	b103      	cbz	r3, 804126a <_read_r+0x1e>
 8041268:	6023      	str	r3, [r4, #0]
 804126a:	bd38      	pop	{r3, r4, r5, pc}
 804126c:	24025bc0 	.word	0x24025bc0

08041270 <_init>:
 8041270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8041272:	bf00      	nop
 8041274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8041276:	bc08      	pop	{r3}
 8041278:	469e      	mov	lr, r3
 804127a:	4770      	bx	lr

0804127c <_fini>:
 804127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804127e:	bf00      	nop
 8041280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8041282:	bc08      	pop	{r3}
 8041284:	469e      	mov	lr, r3
 8041286:	4770      	bx	lr
