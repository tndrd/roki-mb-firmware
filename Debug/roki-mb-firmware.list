
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c99c  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b7b4  0803cc3c  0803cc3c  0002cc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080583f0  080583f0  000483f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080583f8  080583f8  000483f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08058400  08058400  00048400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  24000000  08058408  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00026680  24000168  08058570  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240267e8  08058570  000567e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004c0cb  00000000  00000000  00050196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000076d6  00000000  00000000  0009c261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030e0  00000000  00000000  000a3938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002e60  00000000  00000000  000a6a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045507  00000000  00000000  000a9878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000398fe  00000000  00000000  000eed7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00189b6a  00000000  00000000  0012867d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002b21e7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000de9c  00000000  00000000  002b2238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000168 	.word	0x24000168
 80202bc:	00000000 	.word	0x00000000
 80202c0:	0803cc24 	.word	0x0803cc24

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	2400016c 	.word	0x2400016c
 80202dc:	0803cc24 	.word	0x0803cc24

080202e0 <memchr>:
 80202e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202e4:	2a10      	cmp	r2, #16
 80202e6:	db2b      	blt.n	8020340 <memchr+0x60>
 80202e8:	f010 0f07 	tst.w	r0, #7
 80202ec:	d008      	beq.n	8020300 <memchr+0x20>
 80202ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202f2:	3a01      	subs	r2, #1
 80202f4:	428b      	cmp	r3, r1
 80202f6:	d02d      	beq.n	8020354 <memchr+0x74>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	b342      	cbz	r2, 8020350 <memchr+0x70>
 80202fe:	d1f6      	bne.n	80202ee <memchr+0xe>
 8020300:	b4f0      	push	{r4, r5, r6, r7}
 8020302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802030a:	f022 0407 	bic.w	r4, r2, #7
 802030e:	f07f 0700 	mvns.w	r7, #0
 8020312:	2300      	movs	r3, #0
 8020314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020318:	3c08      	subs	r4, #8
 802031a:	ea85 0501 	eor.w	r5, r5, r1
 802031e:	ea86 0601 	eor.w	r6, r6, r1
 8020322:	fa85 f547 	uadd8	r5, r5, r7
 8020326:	faa3 f587 	sel	r5, r3, r7
 802032a:	fa86 f647 	uadd8	r6, r6, r7
 802032e:	faa5 f687 	sel	r6, r5, r7
 8020332:	b98e      	cbnz	r6, 8020358 <memchr+0x78>
 8020334:	d1ee      	bne.n	8020314 <memchr+0x34>
 8020336:	bcf0      	pop	{r4, r5, r6, r7}
 8020338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802033c:	f002 0207 	and.w	r2, r2, #7
 8020340:	b132      	cbz	r2, 8020350 <memchr+0x70>
 8020342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020346:	3a01      	subs	r2, #1
 8020348:	ea83 0301 	eor.w	r3, r3, r1
 802034c:	b113      	cbz	r3, 8020354 <memchr+0x74>
 802034e:	d1f8      	bne.n	8020342 <memchr+0x62>
 8020350:	2000      	movs	r0, #0
 8020352:	4770      	bx	lr
 8020354:	3801      	subs	r0, #1
 8020356:	4770      	bx	lr
 8020358:	2d00      	cmp	r5, #0
 802035a:	bf06      	itte	eq
 802035c:	4635      	moveq	r5, r6
 802035e:	3803      	subeq	r0, #3
 8020360:	3807      	subne	r0, #7
 8020362:	f015 0f01 	tst.w	r5, #1
 8020366:	d107      	bne.n	8020378 <memchr+0x98>
 8020368:	3001      	adds	r0, #1
 802036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802036e:	bf02      	ittt	eq
 8020370:	3001      	addeq	r0, #1
 8020372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020376:	3001      	addeq	r0, #1
 8020378:	bcf0      	pop	{r4, r5, r6, r7}
 802037a:	3801      	subs	r0, #1
 802037c:	4770      	bx	lr
 802037e:	bf00      	nop

08020380 <__aeabi_uldivmod>:
 8020380:	b953      	cbnz	r3, 8020398 <__aeabi_uldivmod+0x18>
 8020382:	b94a      	cbnz	r2, 8020398 <__aeabi_uldivmod+0x18>
 8020384:	2900      	cmp	r1, #0
 8020386:	bf08      	it	eq
 8020388:	2800      	cmpeq	r0, #0
 802038a:	bf1c      	itt	ne
 802038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020394:	f000 b974 	b.w	8020680 <__aeabi_idiv0>
 8020398:	f1ad 0c08 	sub.w	ip, sp, #8
 802039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203a0:	f000 f806 	bl	80203b0 <__udivmoddi4>
 80203a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ac:	b004      	add	sp, #16
 80203ae:	4770      	bx	lr

080203b0 <__udivmoddi4>:
 80203b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b4:	9d08      	ldr	r5, [sp, #32]
 80203b6:	4604      	mov	r4, r0
 80203b8:	468e      	mov	lr, r1
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d14d      	bne.n	802045a <__udivmoddi4+0xaa>
 80203be:	428a      	cmp	r2, r1
 80203c0:	4694      	mov	ip, r2
 80203c2:	d969      	bls.n	8020498 <__udivmoddi4+0xe8>
 80203c4:	fab2 f282 	clz	r2, r2
 80203c8:	b152      	cbz	r2, 80203e0 <__udivmoddi4+0x30>
 80203ca:	fa01 f302 	lsl.w	r3, r1, r2
 80203ce:	f1c2 0120 	rsb	r1, r2, #32
 80203d2:	fa20 f101 	lsr.w	r1, r0, r1
 80203d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203da:	ea41 0e03 	orr.w	lr, r1, r3
 80203de:	4094      	lsls	r4, r2
 80203e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203e4:	0c21      	lsrs	r1, r4, #16
 80203e6:	fbbe f6f8 	udiv	r6, lr, r8
 80203ea:	fa1f f78c 	uxth.w	r7, ip
 80203ee:	fb08 e316 	mls	r3, r8, r6, lr
 80203f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80203f6:	fb06 f107 	mul.w	r1, r6, r7
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d90a      	bls.n	8020414 <__udivmoddi4+0x64>
 80203fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020406:	f080 811f 	bcs.w	8020648 <__udivmoddi4+0x298>
 802040a:	4299      	cmp	r1, r3
 802040c:	f240 811c 	bls.w	8020648 <__udivmoddi4+0x298>
 8020410:	3e02      	subs	r6, #2
 8020412:	4463      	add	r3, ip
 8020414:	1a5b      	subs	r3, r3, r1
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb3 f0f8 	udiv	r0, r3, r8
 802041c:	fb08 3310 	mls	r3, r8, r0, r3
 8020420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020424:	fb00 f707 	mul.w	r7, r0, r7
 8020428:	42a7      	cmp	r7, r4
 802042a:	d90a      	bls.n	8020442 <__udivmoddi4+0x92>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020434:	f080 810a 	bcs.w	802064c <__udivmoddi4+0x29c>
 8020438:	42a7      	cmp	r7, r4
 802043a:	f240 8107 	bls.w	802064c <__udivmoddi4+0x29c>
 802043e:	4464      	add	r4, ip
 8020440:	3802      	subs	r0, #2
 8020442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020446:	1be4      	subs	r4, r4, r7
 8020448:	2600      	movs	r6, #0
 802044a:	b11d      	cbz	r5, 8020454 <__udivmoddi4+0xa4>
 802044c:	40d4      	lsrs	r4, r2
 802044e:	2300      	movs	r3, #0
 8020450:	e9c5 4300 	strd	r4, r3, [r5]
 8020454:	4631      	mov	r1, r6
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	428b      	cmp	r3, r1
 802045c:	d909      	bls.n	8020472 <__udivmoddi4+0xc2>
 802045e:	2d00      	cmp	r5, #0
 8020460:	f000 80ef 	beq.w	8020642 <__udivmoddi4+0x292>
 8020464:	2600      	movs	r6, #0
 8020466:	e9c5 0100 	strd	r0, r1, [r5]
 802046a:	4630      	mov	r0, r6
 802046c:	4631      	mov	r1, r6
 802046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020472:	fab3 f683 	clz	r6, r3
 8020476:	2e00      	cmp	r6, #0
 8020478:	d14a      	bne.n	8020510 <__udivmoddi4+0x160>
 802047a:	428b      	cmp	r3, r1
 802047c:	d302      	bcc.n	8020484 <__udivmoddi4+0xd4>
 802047e:	4282      	cmp	r2, r0
 8020480:	f200 80f9 	bhi.w	8020676 <__udivmoddi4+0x2c6>
 8020484:	1a84      	subs	r4, r0, r2
 8020486:	eb61 0303 	sbc.w	r3, r1, r3
 802048a:	2001      	movs	r0, #1
 802048c:	469e      	mov	lr, r3
 802048e:	2d00      	cmp	r5, #0
 8020490:	d0e0      	beq.n	8020454 <__udivmoddi4+0xa4>
 8020492:	e9c5 4e00 	strd	r4, lr, [r5]
 8020496:	e7dd      	b.n	8020454 <__udivmoddi4+0xa4>
 8020498:	b902      	cbnz	r2, 802049c <__udivmoddi4+0xec>
 802049a:	deff      	udf	#255	; 0xff
 802049c:	fab2 f282 	clz	r2, r2
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f040 8092 	bne.w	80205ca <__udivmoddi4+0x21a>
 80204a6:	eba1 010c 	sub.w	r1, r1, ip
 80204aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204ae:	fa1f fe8c 	uxth.w	lr, ip
 80204b2:	2601      	movs	r6, #1
 80204b4:	0c20      	lsrs	r0, r4, #16
 80204b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ba:	fb07 1113 	mls	r1, r7, r3, r1
 80204be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204c2:	fb0e f003 	mul.w	r0, lr, r3
 80204c6:	4288      	cmp	r0, r1
 80204c8:	d908      	bls.n	80204dc <__udivmoddi4+0x12c>
 80204ca:	eb1c 0101 	adds.w	r1, ip, r1
 80204ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80204d2:	d202      	bcs.n	80204da <__udivmoddi4+0x12a>
 80204d4:	4288      	cmp	r0, r1
 80204d6:	f200 80cb 	bhi.w	8020670 <__udivmoddi4+0x2c0>
 80204da:	4643      	mov	r3, r8
 80204dc:	1a09      	subs	r1, r1, r0
 80204de:	b2a4      	uxth	r4, r4
 80204e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204e4:	fb07 1110 	mls	r1, r7, r0, r1
 80204e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204ec:	fb0e fe00 	mul.w	lr, lr, r0
 80204f0:	45a6      	cmp	lr, r4
 80204f2:	d908      	bls.n	8020506 <__udivmoddi4+0x156>
 80204f4:	eb1c 0404 	adds.w	r4, ip, r4
 80204f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80204fc:	d202      	bcs.n	8020504 <__udivmoddi4+0x154>
 80204fe:	45a6      	cmp	lr, r4
 8020500:	f200 80bb 	bhi.w	802067a <__udivmoddi4+0x2ca>
 8020504:	4608      	mov	r0, r1
 8020506:	eba4 040e 	sub.w	r4, r4, lr
 802050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802050e:	e79c      	b.n	802044a <__udivmoddi4+0x9a>
 8020510:	f1c6 0720 	rsb	r7, r6, #32
 8020514:	40b3      	lsls	r3, r6
 8020516:	fa22 fc07 	lsr.w	ip, r2, r7
 802051a:	ea4c 0c03 	orr.w	ip, ip, r3
 802051e:	fa20 f407 	lsr.w	r4, r0, r7
 8020522:	fa01 f306 	lsl.w	r3, r1, r6
 8020526:	431c      	orrs	r4, r3
 8020528:	40f9      	lsrs	r1, r7
 802052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802052e:	fa00 f306 	lsl.w	r3, r0, r6
 8020532:	fbb1 f8f9 	udiv	r8, r1, r9
 8020536:	0c20      	lsrs	r0, r4, #16
 8020538:	fa1f fe8c 	uxth.w	lr, ip
 802053c:	fb09 1118 	mls	r1, r9, r8, r1
 8020540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020544:	fb08 f00e 	mul.w	r0, r8, lr
 8020548:	4288      	cmp	r0, r1
 802054a:	fa02 f206 	lsl.w	r2, r2, r6
 802054e:	d90b      	bls.n	8020568 <__udivmoddi4+0x1b8>
 8020550:	eb1c 0101 	adds.w	r1, ip, r1
 8020554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020558:	f080 8088 	bcs.w	802066c <__udivmoddi4+0x2bc>
 802055c:	4288      	cmp	r0, r1
 802055e:	f240 8085 	bls.w	802066c <__udivmoddi4+0x2bc>
 8020562:	f1a8 0802 	sub.w	r8, r8, #2
 8020566:	4461      	add	r1, ip
 8020568:	1a09      	subs	r1, r1, r0
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020570:	fb09 1110 	mls	r1, r9, r0, r1
 8020574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	458e      	cmp	lr, r1
 802057e:	d908      	bls.n	8020592 <__udivmoddi4+0x1e2>
 8020580:	eb1c 0101 	adds.w	r1, ip, r1
 8020584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020588:	d26c      	bcs.n	8020664 <__udivmoddi4+0x2b4>
 802058a:	458e      	cmp	lr, r1
 802058c:	d96a      	bls.n	8020664 <__udivmoddi4+0x2b4>
 802058e:	3802      	subs	r0, #2
 8020590:	4461      	add	r1, ip
 8020592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020596:	fba0 9402 	umull	r9, r4, r0, r2
 802059a:	eba1 010e 	sub.w	r1, r1, lr
 802059e:	42a1      	cmp	r1, r4
 80205a0:	46c8      	mov	r8, r9
 80205a2:	46a6      	mov	lr, r4
 80205a4:	d356      	bcc.n	8020654 <__udivmoddi4+0x2a4>
 80205a6:	d053      	beq.n	8020650 <__udivmoddi4+0x2a0>
 80205a8:	b15d      	cbz	r5, 80205c2 <__udivmoddi4+0x212>
 80205aa:	ebb3 0208 	subs.w	r2, r3, r8
 80205ae:	eb61 010e 	sbc.w	r1, r1, lr
 80205b2:	fa01 f707 	lsl.w	r7, r1, r7
 80205b6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ba:	40f1      	lsrs	r1, r6
 80205bc:	431f      	orrs	r7, r3
 80205be:	e9c5 7100 	strd	r7, r1, [r5]
 80205c2:	2600      	movs	r6, #0
 80205c4:	4631      	mov	r1, r6
 80205c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	40d8      	lsrs	r0, r3
 80205d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205d4:	fa21 f303 	lsr.w	r3, r1, r3
 80205d8:	4091      	lsls	r1, r2
 80205da:	4301      	orrs	r1, r0
 80205dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205e0:	fa1f fe8c 	uxth.w	lr, ip
 80205e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205e8:	fb07 3610 	mls	r6, r7, r0, r3
 80205ec:	0c0b      	lsrs	r3, r1, #16
 80205ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80205f2:	fb00 f60e 	mul.w	r6, r0, lr
 80205f6:	429e      	cmp	r6, r3
 80205f8:	fa04 f402 	lsl.w	r4, r4, r2
 80205fc:	d908      	bls.n	8020610 <__udivmoddi4+0x260>
 80205fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020606:	d22f      	bcs.n	8020668 <__udivmoddi4+0x2b8>
 8020608:	429e      	cmp	r6, r3
 802060a:	d92d      	bls.n	8020668 <__udivmoddi4+0x2b8>
 802060c:	3802      	subs	r0, #2
 802060e:	4463      	add	r3, ip
 8020610:	1b9b      	subs	r3, r3, r6
 8020612:	b289      	uxth	r1, r1
 8020614:	fbb3 f6f7 	udiv	r6, r3, r7
 8020618:	fb07 3316 	mls	r3, r7, r6, r3
 802061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020620:	fb06 f30e 	mul.w	r3, r6, lr
 8020624:	428b      	cmp	r3, r1
 8020626:	d908      	bls.n	802063a <__udivmoddi4+0x28a>
 8020628:	eb1c 0101 	adds.w	r1, ip, r1
 802062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020630:	d216      	bcs.n	8020660 <__udivmoddi4+0x2b0>
 8020632:	428b      	cmp	r3, r1
 8020634:	d914      	bls.n	8020660 <__udivmoddi4+0x2b0>
 8020636:	3e02      	subs	r6, #2
 8020638:	4461      	add	r1, ip
 802063a:	1ac9      	subs	r1, r1, r3
 802063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020640:	e738      	b.n	80204b4 <__udivmoddi4+0x104>
 8020642:	462e      	mov	r6, r5
 8020644:	4628      	mov	r0, r5
 8020646:	e705      	b.n	8020454 <__udivmoddi4+0xa4>
 8020648:	4606      	mov	r6, r0
 802064a:	e6e3      	b.n	8020414 <__udivmoddi4+0x64>
 802064c:	4618      	mov	r0, r3
 802064e:	e6f8      	b.n	8020442 <__udivmoddi4+0x92>
 8020650:	454b      	cmp	r3, r9
 8020652:	d2a9      	bcs.n	80205a8 <__udivmoddi4+0x1f8>
 8020654:	ebb9 0802 	subs.w	r8, r9, r2
 8020658:	eb64 0e0c 	sbc.w	lr, r4, ip
 802065c:	3801      	subs	r0, #1
 802065e:	e7a3      	b.n	80205a8 <__udivmoddi4+0x1f8>
 8020660:	4646      	mov	r6, r8
 8020662:	e7ea      	b.n	802063a <__udivmoddi4+0x28a>
 8020664:	4620      	mov	r0, r4
 8020666:	e794      	b.n	8020592 <__udivmoddi4+0x1e2>
 8020668:	4640      	mov	r0, r8
 802066a:	e7d1      	b.n	8020610 <__udivmoddi4+0x260>
 802066c:	46d0      	mov	r8, sl
 802066e:	e77b      	b.n	8020568 <__udivmoddi4+0x1b8>
 8020670:	3b02      	subs	r3, #2
 8020672:	4461      	add	r1, ip
 8020674:	e732      	b.n	80204dc <__udivmoddi4+0x12c>
 8020676:	4630      	mov	r0, r6
 8020678:	e709      	b.n	802048e <__udivmoddi4+0xde>
 802067a:	4464      	add	r4, ip
 802067c:	3802      	subs	r0, #2
 802067e:	e742      	b.n	8020506 <__udivmoddi4+0x156>

08020680 <__aeabi_idiv0>:
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop

08020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8020684:	b580      	push	{r7, lr}
 8020686:	b082      	sub	sp, #8
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
 802068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	683a      	ldr	r2, [r7, #0]
 8020692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802069c:	461a      	mov	r2, r3
 802069e:	2300      	movs	r3, #0
 80206a0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
	assert(spiHandle);
 80206a4:	683b      	ldr	r3, [r7, #0]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d105      	bne.n	80206b6 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x32>
 80206aa:	4b05      	ldr	r3, [pc, #20]	; (80206c0 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x3c>)
 80206ac:	4a05      	ldr	r2, [pc, #20]	; (80206c4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x40>)
 80206ae:	210c      	movs	r1, #12
 80206b0:	4805      	ldr	r0, [pc, #20]	; (80206c8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x44>)
 80206b2:	f01b fa63 	bl	803bb7c <__assert_func>
}
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	4618      	mov	r0, r3
 80206ba:	3708      	adds	r7, #8
 80206bc:	46bd      	mov	sp, r7
 80206be:	bd80      	pop	{r7, pc}
 80206c0:	0803cc3c 	.word	0x0803cc3c
 80206c4:	0803cc48 	.word	0x0803cc48
 80206c8:	0803cc74 	.word	0x0803cc74

080206cc <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80206cc:	b590      	push	{r4, r7, lr}
 80206ce:	b08b      	sub	sp, #44	; 0x2c
 80206d0:	af04      	add	r7, sp, #16
 80206d2:	60f8      	str	r0, [r7, #12]
 80206d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80206d8:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80206da:	2300      	movs	r3, #0
 80206dc:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80206de:	230c      	movs	r3, #12
 80206e0:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80206e2:	2300      	movs	r3, #0
 80206e4:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80206ec:	4618      	mov	r0, r3
 80206ee:	f000 fac5 	bl	8020c7c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	9302      	str	r3, [sp, #8]
 80206f6:	2300      	movs	r3, #0
 80206f8:	9301      	str	r3, [sp, #4]
 80206fa:	2340      	movs	r3, #64	; 0x40
 80206fc:	9300      	str	r3, [sp, #0]
 80206fe:	4b99      	ldr	r3, [pc, #612]	; (8020964 <_ZN10BHYWrapper4InitEfm+0x298>)
 8020700:	4a99      	ldr	r2, [pc, #612]	; (8020968 <_ZN10BHYWrapper4InitEfm+0x29c>)
 8020702:	499a      	ldr	r1, [pc, #616]	; (802096c <_ZN10BHYWrapper4InitEfm+0x2a0>)
 8020704:	2001      	movs	r0, #1
 8020706:	f007 fa00 	bl	8027b0a <bhy2_init>
 802070a:	4603      	mov	r3, r0
 802070c:	2b00      	cmp	r3, #0
 802070e:	bf14      	ite	ne
 8020710:	2301      	movne	r3, #1
 8020712:	2300      	moveq	r3, #0
 8020714:	b2db      	uxtb	r3, r3
 8020716:	2b00      	cmp	r3, #0
 8020718:	d001      	beq.n	802071e <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 802071a:	2301      	movs	r3, #1
 802071c:	e11d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 802071e:	68fb      	ldr	r3, [r7, #12]
 8020720:	4618      	mov	r0, r3
 8020722:	f007 f9da 	bl	8027ada <bhy2_soft_reset>
 8020726:	4603      	mov	r3, r0
 8020728:	2b00      	cmp	r3, #0
 802072a:	bf14      	ite	ne
 802072c:	2301      	movne	r3, #1
 802072e:	2300      	moveq	r3, #0
 8020730:	b2db      	uxtb	r3, r3
 8020732:	2b00      	cmp	r3, #0
 8020734:	d001      	beq.n	802073a <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 8020736:	2302      	movs	r3, #2
 8020738:	e10f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 802073a:	68fa      	ldr	r2, [r7, #12]
 802073c:	f107 0316 	add.w	r3, r7, #22
 8020740:	4611      	mov	r1, r2
 8020742:	4618      	mov	r0, r3
 8020744:	f007 f8b5 	bl	80278b2 <bhy2_get_product_id>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	bf14      	ite	ne
 802074e:	2301      	movne	r3, #1
 8020750:	2300      	moveq	r3, #0
 8020752:	b2db      	uxtb	r3, r3
 8020754:	2b00      	cmp	r3, #0
 8020756:	d001      	beq.n	802075c <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 8020758:	2303      	movs	r3, #3
 802075a:	e0fe      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 802075c:	7dbb      	ldrb	r3, [r7, #22]
 802075e:	2b89      	cmp	r3, #137	; 0x89
 8020760:	d001      	beq.n	8020766 <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8020762:	2304      	movs	r3, #4
 8020764:	e0f9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 8020766:	7cfb      	ldrb	r3, [r7, #19]
 8020768:	68fa      	ldr	r2, [r7, #12]
 802076a:	4611      	mov	r1, r2
 802076c:	4618      	mov	r0, r3
 802076e:	f007 f947 	bl	8027a00 <bhy2_set_host_interrupt_ctrl>
 8020772:	4603      	mov	r3, r0
 8020774:	2b00      	cmp	r3, #0
 8020776:	bf14      	ite	ne
 8020778:	2301      	movne	r3, #1
 802077a:	2300      	moveq	r3, #0
 802077c:	b2db      	uxtb	r3, r3
 802077e:	2b00      	cmp	r3, #0
 8020780:	d001      	beq.n	8020786 <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8020782:	2305      	movs	r3, #5
 8020784:	e0e9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 8020786:	68fa      	ldr	r2, [r7, #12]
 8020788:	f107 0313 	add.w	r3, r7, #19
 802078c:	4611      	mov	r1, r2
 802078e:	4618      	mov	r0, r3
 8020790:	f007 f952 	bl	8027a38 <bhy2_get_host_interrupt_ctrl>
 8020794:	4603      	mov	r3, r0
 8020796:	2b00      	cmp	r3, #0
 8020798:	bf14      	ite	ne
 802079a:	2301      	movne	r3, #1
 802079c:	2300      	moveq	r3, #0
 802079e:	b2db      	uxtb	r3, r3
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d001      	beq.n	80207a8 <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 80207a4:	2306      	movs	r3, #6
 80207a6:	e0d8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 80207a8:	68fa      	ldr	r2, [r7, #12]
 80207aa:	7dfb      	ldrb	r3, [r7, #23]
 80207ac:	4611      	mov	r1, r2
 80207ae:	4618      	mov	r0, r3
 80207b0:	f007 f977 	bl	8027aa2 <bhy2_set_host_intf_ctrl>
 80207b4:	4603      	mov	r3, r0
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	bf14      	ite	ne
 80207ba:	2301      	movne	r3, #1
 80207bc:	2300      	moveq	r3, #0
 80207be:	b2db      	uxtb	r3, r3
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	d001      	beq.n	80207c8 <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80207c4:	2307      	movs	r3, #7
 80207c6:	e0c8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80207c8:	68fa      	ldr	r2, [r7, #12]
 80207ca:	f107 0312 	add.w	r3, r7, #18
 80207ce:	4611      	mov	r1, r2
 80207d0:	4618      	mov	r0, r3
 80207d2:	f007 f8a2 	bl	802791a <bhy2_get_boot_status>
 80207d6:	4603      	mov	r3, r0
 80207d8:	2b00      	cmp	r3, #0
 80207da:	bf14      	ite	ne
 80207dc:	2301      	movne	r3, #1
 80207de:	2300      	moveq	r3, #0
 80207e0:	b2db      	uxtb	r3, r3
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d001      	beq.n	80207ea <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80207e6:	2308      	movs	r3, #8
 80207e8:	e0b7      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80207ea:	7cbb      	ldrb	r3, [r7, #18]
 80207ec:	f003 0310 	and.w	r3, r3, #16
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d101      	bne.n	80207f8 <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80207f4:	2309      	movs	r3, #9
 80207f6:	e0b0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80207f8:	68fb      	ldr	r3, [r7, #12]
 80207fa:	461a      	mov	r2, r3
 80207fc:	495c      	ldr	r1, [pc, #368]	; (8020970 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80207fe:	485d      	ldr	r0, [pc, #372]	; (8020974 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 8020800:	f007 f8c7 	bl	8027992 <bhy2_upload_firmware_to_ram>
 8020804:	4603      	mov	r3, r0
 8020806:	2b00      	cmp	r3, #0
 8020808:	bf14      	ite	ne
 802080a:	2301      	movne	r3, #1
 802080c:	2300      	moveq	r3, #0
 802080e:	b2db      	uxtb	r3, r3
 8020810:	2b00      	cmp	r3, #0
 8020812:	d001      	beq.n	8020818 <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8020814:	2309      	movs	r3, #9
 8020816:	e0a0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020818:	68fa      	ldr	r2, [r7, #12]
 802081a:	f107 0311 	add.w	r3, r7, #17
 802081e:	4611      	mov	r1, r2
 8020820:	4618      	mov	r0, r3
 8020822:	f007 fa59 	bl	8027cd8 <bhy2_get_error_value>
 8020826:	4603      	mov	r3, r0
 8020828:	2b00      	cmp	r3, #0
 802082a:	bf14      	ite	ne
 802082c:	2301      	movne	r3, #1
 802082e:	2300      	moveq	r3, #0
 8020830:	b2db      	uxtb	r3, r3
 8020832:	2b00      	cmp	r3, #0
 8020834:	d001      	beq.n	802083a <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 8020836:	230a      	movs	r3, #10
 8020838:	e08f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 802083a:	7c7b      	ldrb	r3, [r7, #17]
 802083c:	2b00      	cmp	r3, #0
 802083e:	d001      	beq.n	8020844 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8020840:	230b      	movs	r3, #11
 8020842:	e08a      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	4618      	mov	r0, r3
 8020848:	f007 f8c2 	bl	80279d0 <bhy2_boot_from_ram>
 802084c:	4603      	mov	r3, r0
 802084e:	2b00      	cmp	r3, #0
 8020850:	bf14      	ite	ne
 8020852:	2301      	movne	r3, #1
 8020854:	2300      	moveq	r3, #0
 8020856:	b2db      	uxtb	r3, r3
 8020858:	2b00      	cmp	r3, #0
 802085a:	d001      	beq.n	8020860 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 802085c:	230c      	movs	r3, #12
 802085e:	e07c      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020860:	68fa      	ldr	r2, [r7, #12]
 8020862:	f107 0311 	add.w	r3, r7, #17
 8020866:	4611      	mov	r1, r2
 8020868:	4618      	mov	r0, r3
 802086a:	f007 fa35 	bl	8027cd8 <bhy2_get_error_value>
 802086e:	4603      	mov	r3, r0
 8020870:	2b00      	cmp	r3, #0
 8020872:	bf14      	ite	ne
 8020874:	2301      	movne	r3, #1
 8020876:	2300      	moveq	r3, #0
 8020878:	b2db      	uxtb	r3, r3
 802087a:	2b00      	cmp	r3, #0
 802087c:	d001      	beq.n	8020882 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 802087e:	230d      	movs	r3, #13
 8020880:	e06b      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8020882:	7c7b      	ldrb	r3, [r7, #17]
 8020884:	2b00      	cmp	r3, #0
 8020886:	d001      	beq.n	802088c <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 8020888:	230e      	movs	r3, #14
 802088a:	e066      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 802088c:	68fa      	ldr	r2, [r7, #12]
 802088e:	f107 0314 	add.w	r3, r7, #20
 8020892:	4611      	mov	r1, r2
 8020894:	4618      	mov	r0, r3
 8020896:	f007 f826 	bl	80278e6 <bhy2_get_kernel_version>
 802089a:	4603      	mov	r3, r0
 802089c:	2b00      	cmp	r3, #0
 802089e:	bf14      	ite	ne
 80208a0:	2301      	movne	r3, #1
 80208a2:	2300      	moveq	r3, #0
 80208a4:	b2db      	uxtb	r3, r3
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d001      	beq.n	80208ae <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 80208aa:	230f      	movs	r3, #15
 80208ac:	e055      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80208ae:	8abb      	ldrh	r3, [r7, #20]
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d101      	bne.n	80208b8 <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80208b4:	2310      	movs	r3, #16
 80208b6:	e050      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80208b8:	68fb      	ldr	r3, [r7, #12]
 80208ba:	f241 123c 	movw	r2, #4412	; 0x113c
 80208be:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80208c0:	68fb      	ldr	r3, [r7, #12]
 80208c2:	492d      	ldr	r1, [pc, #180]	; (8020978 <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80208c4:	2025      	movs	r0, #37	; 0x25
 80208c6:	f007 f94a 	bl	8027b5e <bhy2_register_fifo_parse_callback>
 80208ca:	4603      	mov	r3, r0
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	bf14      	ite	ne
 80208d0:	2301      	movne	r3, #1
 80208d2:	2300      	moveq	r3, #0
 80208d4:	b2db      	uxtb	r3, r3
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d001      	beq.n	80208de <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80208da:	2311      	movs	r3, #17
 80208dc:	e03d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80208de:	68fb      	ldr	r3, [r7, #12]
 80208e0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208e4:	4618      	mov	r0, r3
 80208e6:	f000 f9a4 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80208ea:	4604      	mov	r4, r0
 80208ec:	68fb      	ldr	r3, [r7, #12]
 80208ee:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208f2:	4618      	mov	r0, r3
 80208f4:	f000 f9aa 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80208f8:	4601      	mov	r1, r0
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	461a      	mov	r2, r3
 80208fe:	4620      	mov	r0, r4
 8020900:	f006 fe85 	bl	802760e <bhy2_get_and_process_fifo>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	bf14      	ite	ne
 802090a:	2301      	movne	r3, #1
 802090c:	2300      	moveq	r3, #0
 802090e:	b2db      	uxtb	r3, r3
 8020910:	2b00      	cmp	r3, #0
 8020912:	d001      	beq.n	8020918 <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8020914:	2312      	movs	r3, #18
 8020916:	e020      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	4618      	mov	r0, r3
 802091c:	f007 f94e 	bl	8027bbc <bhy2_update_virtual_sensor_list>
 8020920:	4603      	mov	r3, r0
 8020922:	2b00      	cmp	r3, #0
 8020924:	bf14      	ite	ne
 8020926:	2301      	movne	r3, #1
 8020928:	2300      	moveq	r3, #0
 802092a:	b2db      	uxtb	r3, r3
 802092c:	2b00      	cmp	r3, #0
 802092e:	d001      	beq.n	8020934 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8020930:	2310      	movs	r3, #16
 8020932:	e012      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8020934:	68fb      	ldr	r3, [r7, #12]
 8020936:	461a      	mov	r2, r3
 8020938:	6879      	ldr	r1, [r7, #4]
 802093a:	ed97 0a02 	vldr	s0, [r7, #8]
 802093e:	2025      	movs	r0, #37	; 0x25
 8020940:	f006 ff96 	bl	8027870 <bhy2_set_virt_sensor_cfg>
 8020944:	4603      	mov	r3, r0
 8020946:	2b00      	cmp	r3, #0
 8020948:	bf14      	ite	ne
 802094a:	2301      	movne	r3, #1
 802094c:	2300      	moveq	r3, #0
 802094e:	b2db      	uxtb	r3, r3
 8020950:	2b00      	cmp	r3, #0
 8020952:	d001      	beq.n	8020958 <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8020954:	2311      	movs	r3, #17
 8020956:	e000      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 8020958:	2300      	movs	r3, #0
}
 802095a:	4618      	mov	r0, r3
 802095c:	371c      	adds	r7, #28
 802095e:	46bd      	mov	sp, r7
 8020960:	bd90      	pop	{r4, r7, pc}
 8020962:	bf00      	nop
 8020964:	08020e4d 	.word	0x08020e4d
 8020968:	08020dc9 	.word	0x08020dc9
 802096c:	08020d4d 	.word	0x08020d4d
 8020970:	0001a66c 	.word	0x0001a66c
 8020974:	0803dc64 	.word	0x0803dc64
 8020978:	08020a31 	.word	0x08020a31

0802097c <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 802097c:	b590      	push	{r4, r7, lr}
 802097e:	b085      	sub	sp, #20
 8020980:	af00      	add	r7, sp, #0
 8020982:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8020984:	2300      	movs	r3, #0
 8020986:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 8020988:	687a      	ldr	r2, [r7, #4]
 802098a:	f107 030f 	add.w	r3, r7, #15
 802098e:	4611      	mov	r1, r2
 8020990:	4618      	mov	r0, r3
 8020992:	f007 f86c 	bl	8027a6e <bhy2_get_interrupt_status>

	if (interruptStatus) {
 8020996:	7bfb      	ldrb	r3, [r7, #15]
 8020998:	2b00      	cmp	r3, #0
 802099a:	d028      	beq.n	80209ee <_ZN10BHYWrapper4PollEv+0x72>
		assert(
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209a2:	4618      	mov	r0, r3
 80209a4:	f000 f945 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80209a8:	4604      	mov	r4, r0
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209b0:	4618      	mov	r0, r3
 80209b2:	f000 f94b 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80209b6:	4601      	mov	r1, r0
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	461a      	mov	r2, r3
 80209bc:	4620      	mov	r0, r4
 80209be:	f006 fe26 	bl	802760e <bhy2_get_and_process_fifo>
 80209c2:	4603      	mov	r3, r0
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	d005      	beq.n	80209d4 <_ZN10BHYWrapper4PollEv+0x58>
 80209c8:	4b0b      	ldr	r3, [pc, #44]	; (80209f8 <_ZN10BHYWrapper4PollEv+0x7c>)
 80209ca:	4a0c      	ldr	r2, [pc, #48]	; (80209fc <_ZN10BHYWrapper4PollEv+0x80>)
 80209cc:	2166      	movs	r1, #102	; 0x66
 80209ce:	480c      	ldr	r0, [pc, #48]	; (8020a00 <_ZN10BHYWrapper4PollEv+0x84>)
 80209d0:	f01b f8d4 	bl	803bb7c <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		frameSeq++;
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80209da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80209de:	3301      	adds	r3, #1
 80209e0:	687a      	ldr	r2, [r7, #4]
 80209e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80209e6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
		return true;
 80209ea:	2301      	movs	r3, #1
 80209ec:	e000      	b.n	80209f0 <_ZN10BHYWrapper4PollEv+0x74>
	}

	return false;
 80209ee:	2300      	movs	r3, #0
}
 80209f0:	4618      	mov	r0, r3
 80209f2:	3714      	adds	r7, #20
 80209f4:	46bd      	mov	sp, r7
 80209f6:	bd90      	pop	{r4, r7, pc}
 80209f8:	0803cc90 	.word	0x0803cc90
 80209fc:	0803cce4 	.word	0x0803cce4
 8020a00:	0803cc74 	.word	0x0803cc74

08020a04 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 8020a04:	b4b0      	push	{r4, r5, r7}
 8020a06:	b083      	sub	sp, #12
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	6078      	str	r0, [r7, #4]
 8020a0c:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 8020a0e:	687a      	ldr	r2, [r7, #4]
 8020a10:	683b      	ldr	r3, [r7, #0]
 8020a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020a16:	4615      	mov	r5, r2
 8020a18:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 8020a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020a20:	6823      	ldr	r3, [r4, #0]
 8020a22:	602b      	str	r3, [r5, #0]
}
 8020a24:	6878      	ldr	r0, [r7, #4]
 8020a26:	370c      	adds	r7, #12
 8020a28:	46bd      	mov	sp, r7
 8020a2a:	bcb0      	pop	{r4, r5, r7}
 8020a2c:	4770      	bx	lr
	...

08020a30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8020a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020a34:	b08e      	sub	sp, #56	; 0x38
 8020a36:	af00      	add	r7, sp, #0
 8020a38:	60f8      	str	r0, [r7, #12]
 8020a3a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8020a3c:	68bb      	ldr	r3, [r7, #8]
 8020a3e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8020a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d105      	bne.n	8020a52 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8020a46:	4b40      	ldr	r3, [pc, #256]	; (8020b48 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8020a48:	4a40      	ldr	r2, [pc, #256]	; (8020b4c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8020a4a:	2178      	movs	r1, #120	; 0x78
 8020a4c:	4840      	ldr	r0, [pc, #256]	; (8020b50 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8020a4e:	f01b f895 	bl	803bb7c <__assert_func>
	auto &timestamp = frame->Timestamp;
 8020a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a54:	3308      	adds	r3, #8
 8020a56:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8020a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	789b      	ldrb	r3, [r3, #2]
 8020a60:	2b0b      	cmp	r3, #11
 8020a62:	d167      	bne.n	8020b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8020a64:	68fb      	ldr	r3, [r7, #12]
 8020a66:	685b      	ldr	r3, [r3, #4]
 8020a68:	f107 0214 	add.w	r2, r7, #20
 8020a6c:	4611      	mov	r1, r2
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f008 fab9 	bl	8028fe6 <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8020a74:	68fb      	ldr	r3, [r7, #12]
 8020a76:	781a      	ldrb	r2, [r3, #0]
 8020a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a7a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8020a7c:	68fb      	ldr	r3, [r7, #12]
 8020a7e:	689b      	ldr	r3, [r3, #8]
 8020a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020a84:	4602      	mov	r2, r0
 8020a86:	460b      	mov	r3, r1
 8020a88:	f04f 0a00 	mov.w	sl, #0
 8020a8c:	f04f 0b00 	mov.w	fp, #0
 8020a90:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8020a94:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8020a98:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8020a9c:	4652      	mov	r2, sl
 8020a9e:	465b      	mov	r3, fp
 8020aa0:	ebb2 0800 	subs.w	r8, r2, r0
 8020aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8020aa8:	f04f 0200 	mov.w	r2, #0
 8020aac:	f04f 0300 	mov.w	r3, #0
 8020ab0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8020ab4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8020ab8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8020abc:	ebb2 0408 	subs.w	r4, r2, r8
 8020ac0:	eb63 0509 	sbc.w	r5, r3, r9
 8020ac4:	f04f 0200 	mov.w	r2, #0
 8020ac8:	f04f 0300 	mov.w	r3, #0
 8020acc:	00eb      	lsls	r3, r5, #3
 8020ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020ad2:	00e2      	lsls	r2, r4, #3
 8020ad4:	4614      	mov	r4, r2
 8020ad6:	461d      	mov	r5, r3
 8020ad8:	1823      	adds	r3, r4, r0
 8020ada:	603b      	str	r3, [r7, #0]
 8020adc:	eb45 0301 	adc.w	r3, r5, r1
 8020ae0:	607b      	str	r3, [r7, #4]
 8020ae2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020ae6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8020aea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020aee:	a314      	add	r3, pc, #80	; (adr r3, 8020b40 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8020af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020af4:	f7ff fc44 	bl	8020380 <__aeabi_uldivmod>
 8020af8:	4602      	mov	r2, r0
 8020afa:	460b      	mov	r3, r1
 8020afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020afe:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8020b00:	6a3a      	ldr	r2, [r7, #32]
 8020b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	4913      	ldr	r1, [pc, #76]	; (8020b54 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8020b08:	fb01 f303 	mul.w	r3, r1, r3
 8020b0c:	1ad2      	subs	r2, r2, r3
 8020b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b10:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8020b12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b18:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8020b1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b20:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8020b22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8020b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b28:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8020b2a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8020b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b30:	80da      	strh	r2, [r3, #6]
 8020b32:	e000      	b.n	8020b36 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8020b34:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8020b36:	3738      	adds	r7, #56	; 0x38
 8020b38:	46bd      	mov	sp, r7
 8020b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020b3e:	bf00      	nop
 8020b40:	3b9aca00 	.word	0x3b9aca00
 8020b44:	00000000 	.word	0x00000000
 8020b48:	0803ccfc 	.word	0x0803ccfc
 8020b4c:	0803cd04 	.word	0x0803cd04
 8020b50:	0803cc74 	.word	0x0803cc74
 8020b54:	3b9aca00 	.word	0x3b9aca00

08020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8020b58:	b580      	push	{r7, lr}
 8020b5a:	b086      	sub	sp, #24
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	60f8      	str	r0, [r7, #12]
 8020b60:	60b9      	str	r1, [r7, #8]
 8020b62:	607a      	str	r2, [r7, #4]
	assert(dest);
 8020b64:	68bb      	ldr	r3, [r7, #8]
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d105      	bne.n	8020b76 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8020b6a:	4b26      	ldr	r3, [pc, #152]	; (8020c04 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8020b6c:	4a26      	ldr	r2, [pc, #152]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b6e:	2191      	movs	r1, #145	; 0x91
 8020b70:	4826      	ldr	r0, [pc, #152]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b72:	f01b f803 	bl	803bb7c <__assert_func>
	assert(size);
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	d105      	bne.n	8020b88 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8020b7c:	4b24      	ldr	r3, [pc, #144]	; (8020c10 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8020b7e:	4a22      	ldr	r2, [pc, #136]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b80:	2192      	movs	r1, #146	; 0x92
 8020b82:	4822      	ldr	r0, [pc, #136]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b84:	f01a fffa 	bl	803bb7c <__assert_func>

	uint8_t *ptr = dest;
 8020b88:	68bb      	ldr	r3, [r7, #8]
 8020b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b96:	697b      	ldr	r3, [r7, #20]
 8020b98:	3302      	adds	r3, #2
 8020b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020ba2:	697b      	ldr	r3, [r7, #20]
 8020ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	3302      	adds	r3, #2
 8020baa:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8020bac:	68fb      	ldr	r3, [r7, #12]
 8020bae:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020bb2:	697b      	ldr	r3, [r7, #20]
 8020bb4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bb6:	697b      	ldr	r3, [r7, #20]
 8020bb8:	3302      	adds	r3, #2
 8020bba:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8020bbc:	68fb      	ldr	r3, [r7, #12]
 8020bbe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bc6:	697b      	ldr	r3, [r7, #20]
 8020bc8:	3302      	adds	r3, #2
 8020bca:	617b      	str	r3, [r7, #20]
	/*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8020bcc:	68fb      	ldr	r3, [r7, #12]
 8020bce:	689a      	ldr	r2, [r3, #8]
 8020bd0:	697b      	ldr	r3, [r7, #20]
 8020bd2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020bd4:	697b      	ldr	r3, [r7, #20]
 8020bd6:	3304      	adds	r3, #4
 8020bd8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	68da      	ldr	r2, [r3, #12]
 8020bde:	697b      	ldr	r3, [r7, #20]
 8020be0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020be2:	697b      	ldr	r3, [r7, #20]
 8020be4:	3304      	adds	r3, #4
 8020be6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	7c1a      	ldrb	r2, [r3, #16]
 8020bec:	697b      	ldr	r3, [r7, #20]
 8020bee:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	3301      	adds	r3, #1
 8020bf4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	2211      	movs	r2, #17
 8020bfa:	701a      	strb	r2, [r3, #0]
}
 8020bfc:	bf00      	nop
 8020bfe:	3718      	adds	r7, #24
 8020c00:	46bd      	mov	sp, r7
 8020c02:	bd80      	pop	{r7, pc}
 8020c04:	0803cd50 	.word	0x0803cd50
 8020c08:	0803cd58 	.word	0x0803cd58
 8020c0c:	0803cc74 	.word	0x0803cc74
 8020c10:	0803cd94 	.word	0x0803cd94

08020c14 <_ZNK10BHYWrapper6GetSeqEv>:

size_t BHYWrapper::GetSeq() const {
 8020c14:	b480      	push	{r7}
 8020c16:	b083      	sub	sp, #12
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	6078      	str	r0, [r7, #4]
	return frameSeq;
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020c22:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
}
 8020c26:	4618      	mov	r0, r3
 8020c28:	370c      	adds	r7, #12
 8020c2a:	46bd      	mov	sp, r7
 8020c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c30:	4770      	bx	lr

08020c32 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8020c32:	b580      	push	{r7, lr}
 8020c34:	b082      	sub	sp, #8
 8020c36:	af00      	add	r7, sp, #0
 8020c38:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8020c3a:	687b      	ldr	r3, [r7, #4]
 8020c3c:	4618      	mov	r0, r3
 8020c3e:	f000 f811 	bl	8020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8020c42:	4603      	mov	r3, r0
 8020c44:	4618      	mov	r0, r3
 8020c46:	3708      	adds	r7, #8
 8020c48:	46bd      	mov	sp, r7
 8020c4a:	bd80      	pop	{r7, pc}

08020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8020c4c:	b480      	push	{r7}
 8020c4e:	b083      	sub	sp, #12
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	6078      	str	r0, [r7, #4]
 8020c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c58:	4618      	mov	r0, r3
 8020c5a:	370c      	adds	r7, #12
 8020c5c:	46bd      	mov	sp, r7
 8020c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c62:	4770      	bx	lr

08020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8020c64:	b480      	push	{r7}
 8020c66:	b083      	sub	sp, #12
 8020c68:	af00      	add	r7, sp, #0
 8020c6a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	4618      	mov	r0, r3
 8020c70:	370c      	adds	r7, #12
 8020c72:	46bd      	mov	sp, r7
 8020c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c78:	4770      	bx	lr
	...

08020c7c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8020c7c:	b480      	push	{r7}
 8020c7e:	b083      	sub	sp, #12
 8020c80:	af00      	add	r7, sp, #0
 8020c82:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8020c84:	4a04      	ldr	r2, [pc, #16]	; (8020c98 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	6013      	str	r3, [r2, #0]
}
 8020c8a:	bf00      	nop
 8020c8c:	370c      	adds	r7, #12
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c94:	4770      	bx	lr
 8020c96:	bf00      	nop
 8020c98:	24000184 	.word	0x24000184

08020c9c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8020c9c:	b580      	push	{r7, lr}
 8020c9e:	b082      	sub	sp, #8
 8020ca0:	af00      	add	r7, sp, #0
 8020ca2:	6078      	str	r0, [r7, #4]
 8020ca4:	460b      	mov	r3, r1
 8020ca6:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8020ca8:	4b11      	ldr	r3, [pc, #68]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020caa:	681b      	ldr	r3, [r3, #0]
 8020cac:	887a      	ldrh	r2, [r7, #2]
 8020cae:	6879      	ldr	r1, [r7, #4]
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	f012 faf9 	bl	80332a8 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020cb6:	4b0e      	ldr	r3, [pc, #56]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cb8:	681b      	ldr	r3, [r3, #0]
 8020cba:	4618      	mov	r0, r3
 8020cbc:	f013 f982 	bl	8033fc4 <HAL_SPI_GetState>
 8020cc0:	4603      	mov	r3, r0
 8020cc2:	2b01      	cmp	r3, #1
 8020cc4:	bf14      	ite	ne
 8020cc6:	2301      	movne	r3, #1
 8020cc8:	2300      	moveq	r3, #0
 8020cca:	b2db      	uxtb	r3, r3
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d000      	beq.n	8020cd2 <_Z11spiTransmitPht+0x36>
 8020cd0:	e7f1      	b.n	8020cb6 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020cd2:	4b07      	ldr	r3, [pc, #28]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	bf0c      	ite	eq
 8020cde:	2301      	moveq	r3, #1
 8020ce0:	2300      	movne	r3, #0
 8020ce2:	b2db      	uxtb	r3, r3
 8020ce4:	b25b      	sxtb	r3, r3
  }
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	3708      	adds	r7, #8
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd80      	pop	{r7, pc}
 8020cee:	bf00      	nop
 8020cf0:	24000184 	.word	0x24000184

08020cf4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8020cf4:	b580      	push	{r7, lr}
 8020cf6:	b082      	sub	sp, #8
 8020cf8:	af00      	add	r7, sp, #0
 8020cfa:	6078      	str	r0, [r7, #4]
 8020cfc:	460b      	mov	r3, r1
 8020cfe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8020d00:	4b11      	ldr	r3, [pc, #68]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	887a      	ldrh	r2, [r7, #2]
 8020d06:	6879      	ldr	r1, [r7, #4]
 8020d08:	4618      	mov	r0, r3
 8020d0a:	f012 fc17 	bl	803353c <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020d0e:	4b0e      	ldr	r3, [pc, #56]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d10:	681b      	ldr	r3, [r3, #0]
 8020d12:	4618      	mov	r0, r3
 8020d14:	f013 f956 	bl	8033fc4 <HAL_SPI_GetState>
 8020d18:	4603      	mov	r3, r0
 8020d1a:	2b01      	cmp	r3, #1
 8020d1c:	bf14      	ite	ne
 8020d1e:	2301      	movne	r3, #1
 8020d20:	2300      	moveq	r3, #0
 8020d22:	b2db      	uxtb	r3, r3
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d000      	beq.n	8020d2a <_Z9spiReceivPht+0x36>
 8020d28:	e7f1      	b.n	8020d0e <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020d2a:	4b07      	ldr	r3, [pc, #28]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d2c:	681b      	ldr	r3, [r3, #0]
 8020d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	bf0c      	ite	eq
 8020d36:	2301      	moveq	r3, #1
 8020d38:	2300      	movne	r3, #0
 8020d3a:	b2db      	uxtb	r3, r3
 8020d3c:	b25b      	sxtb	r3, r3
  }
 8020d3e:	4618      	mov	r0, r3
 8020d40:	3708      	adds	r7, #8
 8020d42:	46bd      	mov	sp, r7
 8020d44:	bd80      	pop	{r7, pc}
 8020d46:	bf00      	nop
 8020d48:	24000184 	.word	0x24000184

08020d4c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020d4c:	b580      	push	{r7, lr}
 8020d4e:	b084      	sub	sp, #16
 8020d50:	af00      	add	r7, sp, #0
 8020d52:	60b9      	str	r1, [r7, #8]
 8020d54:	607a      	str	r2, [r7, #4]
 8020d56:	603b      	str	r3, [r7, #0]
 8020d58:	4603      	mov	r3, r0
 8020d5a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020d5c:	4b19      	ldr	r3, [pc, #100]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020d62:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8020d64:	f107 030f 	add.w	r3, r7, #15
 8020d68:	2101      	movs	r1, #1
 8020d6a:	4618      	mov	r0, r3
 8020d6c:	f7ff ff96 	bl	8020c9c <_Z11spiTransmitPht>
 8020d70:	4603      	mov	r3, r0
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	bf0c      	ite	eq
 8020d76:	2301      	moveq	r3, #1
 8020d78:	2300      	movne	r3, #0
 8020d7a:	b2db      	uxtb	r3, r3
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	d002      	beq.n	8020d86 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8020d80:	f06f 0301 	mvn.w	r3, #1
 8020d84:	e019      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	b29b      	uxth	r3, r3
 8020d8a:	4619      	mov	r1, r3
 8020d8c:	68b8      	ldr	r0, [r7, #8]
 8020d8e:	f7ff ffb1 	bl	8020cf4 <_Z9spiReceivPht>
 8020d92:	4603      	mov	r3, r0
 8020d94:	2b00      	cmp	r3, #0
 8020d96:	bf14      	ite	ne
 8020d98:	2301      	movne	r3, #1
 8020d9a:	2300      	moveq	r3, #0
 8020d9c:	b2db      	uxtb	r3, r3
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d005      	beq.n	8020dae <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020da2:	4b08      	ldr	r3, [pc, #32]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020da4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020da8:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8020daa:	2300      	movs	r3, #0
 8020dac:	e005      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020dae:	4b05      	ldr	r3, [pc, #20]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020db4:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8020db6:	f06f 0301 	mvn.w	r3, #1
  }
 8020dba:	4618      	mov	r0, r3
 8020dbc:	3710      	adds	r7, #16
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	bd80      	pop	{r7, pc}
 8020dc2:	bf00      	nop
 8020dc4:	58021000 	.word	0x58021000

08020dc8 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020dc8:	b580      	push	{r7, lr}
 8020dca:	b084      	sub	sp, #16
 8020dcc:	af00      	add	r7, sp, #0
 8020dce:	60b9      	str	r1, [r7, #8]
 8020dd0:	607a      	str	r2, [r7, #4]
 8020dd2:	603b      	str	r3, [r7, #0]
 8020dd4:	4603      	mov	r3, r0
 8020dd6:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	2b40      	cmp	r3, #64	; 0x40
 8020ddc:	d902      	bls.n	8020de4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8020dde:	f06f 0303 	mvn.w	r3, #3
 8020de2:	e028      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8020de4:	4a16      	ldr	r2, [pc, #88]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020de6:	7bfb      	ldrb	r3, [r7, #15]
 8020de8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8020dea:	4b16      	ldr	r3, [pc, #88]	; (8020e44 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8020dec:	687a      	ldr	r2, [r7, #4]
 8020dee:	68b9      	ldr	r1, [r7, #8]
 8020df0:	4618      	mov	r0, r3
 8020df2:	f01a ff2d 	bl	803bc50 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020df6:	4b14      	ldr	r3, [pc, #80]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020df8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020dfc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	b29b      	uxth	r3, r3
 8020e02:	3301      	adds	r3, #1
 8020e04:	b29b      	uxth	r3, r3
 8020e06:	4619      	mov	r1, r3
 8020e08:	480d      	ldr	r0, [pc, #52]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020e0a:	f7ff ff47 	bl	8020c9c <_Z11spiTransmitPht>
 8020e0e:	4603      	mov	r3, r0
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	bf14      	ite	ne
 8020e14:	2301      	movne	r3, #1
 8020e16:	2300      	moveq	r3, #0
 8020e18:	b2db      	uxtb	r3, r3
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d005      	beq.n	8020e2a <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e1e:	4b0a      	ldr	r3, [pc, #40]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e24:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8020e26:	2300      	movs	r3, #0
 8020e28:	e005      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e2a:	4b07      	ldr	r3, [pc, #28]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e30:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8020e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8020e36:	4618      	mov	r0, r3
 8020e38:	3710      	adds	r7, #16
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	bd80      	pop	{r7, pc}
 8020e3e:	bf00      	nop
 8020e40:	24000188 	.word	0x24000188
 8020e44:	24000189 	.word	0x24000189
 8020e48:	58021000 	.word	0x58021000

08020e4c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8020e4c:	b580      	push	{r7, lr}
 8020e4e:	b082      	sub	sp, #8
 8020e50:	af00      	add	r7, sp, #0
 8020e52:	6078      	str	r0, [r7, #4]
 8020e54:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8020e5c:	d308      	bcc.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	4a0b      	ldr	r2, [pc, #44]	; (8020e90 <_Z13bhy2_delay_usmPv+0x44>)
 8020e62:	fba2 2303 	umull	r2, r3, r2, r3
 8020e66:	099b      	lsrs	r3, r3, #6
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f009 fe19 	bl	802aaa0 <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8020e6e:	e00b      	b.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	1e5a      	subs	r2, r3, #1
 8020e74:	607a      	str	r2, [r7, #4]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	bf14      	ite	ne
 8020e7a:	2301      	movne	r3, #1
 8020e7c:	2300      	moveq	r3, #0
 8020e7e:	b2db      	uxtb	r3, r3
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d001      	beq.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8020e84:	bf00      	nop
    while( us-- ) {
 8020e86:	e7f3      	b.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
  }
 8020e88:	bf00      	nop
 8020e8a:	3708      	adds	r7, #8
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	bd80      	pop	{r7, pc}
 8020e90:	10624dd3 	.word	0x10624dd3

08020e94 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8020e94:	b480      	push	{r7}
 8020e96:	b083      	sub	sp, #12
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	6078      	str	r0, [r7, #4]
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	bfb8      	it	lt
 8020ea2:	425b      	neglt	r3, r3
 8020ea4:	4618      	mov	r0, r3
 8020ea6:	370c      	adds	r7, #12
 8020ea8:	46bd      	mov	sp, r7
 8020eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eae:	4770      	bx	lr

08020eb0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8020eb0:	b480      	push	{r7}
 8020eb2:	b083      	sub	sp, #12
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
 8020eb8:	6039      	str	r1, [r7, #0]
 8020eba:	683b      	ldr	r3, [r7, #0]
 8020ebc:	4618      	mov	r0, r3
 8020ebe:	370c      	adds	r7, #12
 8020ec0:	46bd      	mov	sp, r7
 8020ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec6:	4770      	bx	lr

08020ec8 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8020ec8:	b480      	push	{r7}
 8020eca:	b083      	sub	sp, #12
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8020ed0:	687b      	ldr	r3, [r7, #4]
 8020ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020ed6:	d205      	bcs.n	8020ee4 <_ZSt16__deque_buf_sizej+0x1c>
 8020ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8020ee2:	e000      	b.n	8020ee6 <_ZSt16__deque_buf_sizej+0x1e>
 8020ee4:	2301      	movs	r3, #1
 8020ee6:	4618      	mov	r0, r3
 8020ee8:	370c      	adds	r7, #12
 8020eea:	46bd      	mov	sp, r7
 8020eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ef0:	4770      	bx	lr

08020ef2 <_ZN11QueueSender11MessageMode9SerializeEh>:
		static constexpr Type Sync = 0;
		static constexpr Type Async = 1;
		static constexpr Type Info = 2;
		static constexpr Type SetPeriod = 3;

		static uint8_t Serialize(Type mode) {
 8020ef2:	b480      	push	{r7}
 8020ef4:	b083      	sub	sp, #12
 8020ef6:	af00      	add	r7, sp, #0
 8020ef8:	4603      	mov	r3, r0
 8020efa:	71fb      	strb	r3, [r7, #7]
			return mode;
 8020efc:	79fb      	ldrb	r3, [r7, #7]
		}
 8020efe:	4618      	mov	r0, r3
 8020f00:	370c      	adds	r7, #12
 8020f02:	46bd      	mov	sp, r7
 8020f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f08:	4770      	bx	lr

08020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static Type Deserialize(uint8_t val) {
 8020f0a:	b480      	push	{r7}
 8020f0c:	b083      	sub	sp, #12
 8020f0e:	af00      	add	r7, sp, #0
 8020f10:	4603      	mov	r3, r0
 8020f12:	71fb      	strb	r3, [r7, #7]
			return val;
 8020f14:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f16:	4618      	mov	r0, r3
 8020f18:	370c      	adds	r7, #12
 8020f1a:	46bd      	mov	sp, r7
 8020f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f20:	4770      	bx	lr

08020f22 <_ZN11QueueSender9ErrorCode9SerializeEh>:
		static constexpr Type Timeout = 1;
		static constexpr Type NACK = 2;
		static constexpr Type Unknown = 3;
		static constexpr Type BadPeriod = 4;

		static uint8_t Serialize(Type error) {
 8020f22:	b480      	push	{r7}
 8020f24:	b083      	sub	sp, #12
 8020f26:	af00      	add	r7, sp, #0
 8020f28:	4603      	mov	r3, r0
 8020f2a:	71fb      	strb	r3, [r7, #7]
			return error;
 8020f2c:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f2e:	4618      	mov	r0, r3
 8020f30:	370c      	adds	r7, #12
 8020f32:	46bd      	mov	sp, r7
 8020f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f38:	4770      	bx	lr
	...

08020f3c <_ZN11QueueSender4Info11SerializeToEPPh>:
		uint16_t NumRequests;
		uint16_t NumResponces;

		static constexpr size_t Size = 2 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8020f3c:	b580      	push	{r7, lr}
 8020f3e:	b082      	sub	sp, #8
 8020f40:	af00      	add	r7, sp, #0
 8020f42:	6078      	str	r0, [r7, #4]
 8020f44:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8020f46:	683b      	ldr	r3, [r7, #0]
 8020f48:	2b00      	cmp	r3, #0
 8020f4a:	d105      	bne.n	8020f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x1c>
 8020f4c:	4b13      	ldr	r3, [pc, #76]	; (8020f9c <_ZN11QueueSender4Info11SerializeToEPPh+0x60>)
 8020f4e:	4a14      	ldr	r2, [pc, #80]	; (8020fa0 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f50:	21a1      	movs	r1, #161	; 0xa1
 8020f52:	4814      	ldr	r0, [pc, #80]	; (8020fa4 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f54:	f01a fe12 	bl	803bb7c <__assert_func>
			assert(*ptr);
 8020f58:	683b      	ldr	r3, [r7, #0]
 8020f5a:	681b      	ldr	r3, [r3, #0]
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	d105      	bne.n	8020f6c <_ZN11QueueSender4Info11SerializeToEPPh+0x30>
 8020f60:	4b11      	ldr	r3, [pc, #68]	; (8020fa8 <_ZN11QueueSender4Info11SerializeToEPPh+0x6c>)
 8020f62:	4a0f      	ldr	r2, [pc, #60]	; (8020fa0 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f64:	21a2      	movs	r1, #162	; 0xa2
 8020f66:	480f      	ldr	r0, [pc, #60]	; (8020fa4 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f68:	f01a fe08 	bl	803bb7c <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = NumRequests;
 8020f6c:	683b      	ldr	r3, [r7, #0]
 8020f6e:	681b      	ldr	r3, [r3, #0]
 8020f70:	687a      	ldr	r2, [r7, #4]
 8020f72:	8812      	ldrh	r2, [r2, #0]
 8020f74:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f76:	683b      	ldr	r3, [r7, #0]
 8020f78:	681b      	ldr	r3, [r3, #0]
 8020f7a:	1c9a      	adds	r2, r3, #2
 8020f7c:	683b      	ldr	r3, [r7, #0]
 8020f7e:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumResponces;
 8020f80:	683b      	ldr	r3, [r7, #0]
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	687a      	ldr	r2, [r7, #4]
 8020f86:	8852      	ldrh	r2, [r2, #2]
 8020f88:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f8a:	683b      	ldr	r3, [r7, #0]
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	1c9a      	adds	r2, r3, #2
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	601a      	str	r2, [r3, #0]
		}
 8020f94:	bf00      	nop
 8020f96:	3708      	adds	r7, #8
 8020f98:	46bd      	mov	sp, r7
 8020f9a:	bd80      	pop	{r7, pc}
 8020f9c:	0803cd9c 	.word	0x0803cd9c
 8020fa0:	0803cda0 	.word	0x0803cda0
 8020fa4:	0803cdd0 	.word	0x0803cdd0
 8020fa8:	0803cdec 	.word	0x0803cdec

08020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>:
class FixedQueue {
 8020fac:	b480      	push	{r7}
 8020fae:	b083      	sub	sp, #12
 8020fb0:	af00      	add	r7, sp, #0
 8020fb2:	6078      	str	r0, [r7, #4]
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	2200      	movs	r2, #0
 8020fb8:	601a      	str	r2, [r3, #0]
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	605a      	str	r2, [r3, #4]
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	609a      	str	r2, [r3, #8]
 8020fc6:	687b      	ldr	r3, [r7, #4]
 8020fc8:	4618      	mov	r0, r3
 8020fca:	370c      	adds	r7, #12
 8020fcc:	46bd      	mov	sp, r7
 8020fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fd2:	4770      	bx	lr

08020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>:
 8020fd4:	b480      	push	{r7}
 8020fd6:	b083      	sub	sp, #12
 8020fd8:	af00      	add	r7, sp, #0
 8020fda:	6078      	str	r0, [r7, #4]
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	2200      	movs	r2, #0
 8020fe0:	601a      	str	r2, [r3, #0]
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	2200      	movs	r2, #0
 8020fe6:	605a      	str	r2, [r3, #4]
 8020fe8:	687b      	ldr	r3, [r7, #4]
 8020fea:	2200      	movs	r2, #0
 8020fec:	609a      	str	r2, [r3, #8]
 8020fee:	687b      	ldr	r3, [r7, #4]
 8020ff0:	4618      	mov	r0, r3
 8020ff2:	370c      	adds	r7, #12
 8020ff4:	46bd      	mov	sp, r7
 8020ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ffa:	4770      	bx	lr

08020ffc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>:
	};

public:
	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS, uint8_t sendPeriod) :
 8020ffc:	b580      	push	{r7, lr}
 8020ffe:	b084      	sub	sp, #16
 8021000:	af00      	add	r7, sp, #0
 8021002:	60f8      	str	r0, [r7, #12]
 8021004:	60b9      	str	r1, [r7, #8]
 8021006:	607a      	str	r2, [r7, #4]
 8021008:	70fb      	strb	r3, [r7, #3]
			UartHandle { uart }, TimeoutS { timeoutS }, SendPeriod { sendPeriod } {
 802100a:	68fb      	ldr	r3, [r7, #12]
 802100c:	4618      	mov	r0, r3
 802100e:	f7ff ffcd 	bl	8020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>
 8021012:	68fa      	ldr	r2, [r7, #12]
 8021014:	4b22      	ldr	r3, [pc, #136]	; (80210a0 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xa4>)
 8021016:	4413      	add	r3, r2
 8021018:	4618      	mov	r0, r3
 802101a:	f7ff ffdb 	bl	8020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>
 802101e:	68fb      	ldr	r3, [r7, #12]
 8021020:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021024:	2200      	movs	r2, #0
 8021026:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 802102a:	68fb      	ldr	r3, [r7, #12]
 802102c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021030:	2200      	movs	r2, #0
 8021032:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8021036:	68fb      	ldr	r3, [r7, #12]
 8021038:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802103c:	461a      	mov	r2, r3
 802103e:	68bb      	ldr	r3, [r7, #8]
 8021040:	f8c2 37e8 	str.w	r3, [r2, #2024]	; 0x7e8
 8021044:	68fb      	ldr	r3, [r7, #12]
 8021046:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802104a:	461a      	mov	r2, r3
 802104c:	687b      	ldr	r3, [r7, #4]
 802104e:	f8c2 37ec 	str.w	r3, [r2, #2028]	; 0x7ec
 8021052:	68fb      	ldr	r3, [r7, #12]
 8021054:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021058:	461a      	mov	r2, r3
 802105a:	78fb      	ldrb	r3, [r7, #3]
 802105c:	f882 37f0 	strb.w	r3, [r2, #2032]	; 0x7f0
 8021060:	68fb      	ldr	r3, [r7, #12]
 8021062:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021066:	2200      	movs	r2, #0
 8021068:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 802106c:	68fb      	ldr	r3, [r7, #12]
 802106e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021072:	2201      	movs	r2, #1
 8021074:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802107e:	2200      	movs	r2, #0
 8021080:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
		assert(uart != NULL);
 8021084:	68bb      	ldr	r3, [r7, #8]
 8021086:	2b00      	cmp	r3, #0
 8021088:	d105      	bne.n	8021096 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0x9a>
 802108a:	4b06      	ldr	r3, [pc, #24]	; (80210a4 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xa8>)
 802108c:	4a06      	ldr	r2, [pc, #24]	; (80210a8 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xac>)
 802108e:	21b1      	movs	r1, #177	; 0xb1
 8021090:	4806      	ldr	r0, [pc, #24]	; (80210ac <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xb0>)
 8021092:	f01a fd73 	bl	803bb7c <__assert_func>
	}
 8021096:	68fb      	ldr	r3, [r7, #12]
 8021098:	4618      	mov	r0, r3
 802109a:	3710      	adds	r7, #16
 802109c:	46bd      	mov	sp, r7
 802109e:	bd80      	pop	{r7, pc}
 80210a0:	00020b7c 	.word	0x00020b7c
 80210a4:	0803cdf4 	.word	0x0803cdf4
 80210a8:	0803ce04 	.word	0x0803ce04
 80210ac:	0803cdd0 	.word	0x0803cdd0

080210b0 <_ZN11QueueSender10AddRequestERK7Request>:

	void AddRequest(const Request &request) {
 80210b0:	b590      	push	{r4, r7, lr}
 80210b2:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80210b6:	af00      	add	r7, sp, #0
 80210b8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80210bc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80210c0:	6018      	str	r0, [r3, #0]
 80210c2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80210c6:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80210ca:	6019      	str	r1, [r3, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 80210cc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80210d0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80210d4:	681b      	ldr	r3, [r3, #0]
 80210d6:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80210da:	4618      	mov	r0, r3
 80210dc:	f7ff ff15 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 80210e0:	4603      	mov	r3, r0
 80210e2:	2b03      	cmp	r3, #3
 80210e4:	d87c      	bhi.n	80211e0 <_ZN11QueueSender10AddRequestERK7Request+0x130>
 80210e6:	a201      	add	r2, pc, #4	; (adr r2, 80210ec <_ZN11QueueSender10AddRequestERK7Request+0x3c>)
 80210e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80210ec:	08021119 	.word	0x08021119
 80210f0:	080210fd 	.word	0x080210fd
 80210f4:	0802116f 	.word	0x0802116f
 80210f8:	080211a3 	.word	0x080211a3
		case MessageMode::Async:
			Requests.Push(request);
 80210fc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8021100:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8021104:	681a      	ldr	r2, [r3, #0]
 8021106:	f507 7306 	add.w	r3, r7, #536	; 0x218
 802110a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 802110e:	6819      	ldr	r1, [r3, #0]
 8021110:	4610      	mov	r0, r2
 8021112:	f002 f92b 	bl	802336c <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_>
			break;
 8021116:	e063      	b.n	80211e0 <_ZN11QueueSender10AddRequestERK7Request+0x130>
		case MessageMode::Sync:
			if (HasPriorityRequest)
 8021118:	f507 7306 	add.w	r3, r7, #536	; 0x218
 802111c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8021120:	681b      	ldr	r3, [r3, #0]
 8021122:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021126:	f893 36e4 	ldrb.w	r3, [r3, #1764]	; 0x6e4
 802112a:	2b00      	cmp	r3, #0
 802112c:	d157      	bne.n	80211de <_ZN11QueueSender10AddRequestERK7Request+0x12e>
				break;

			PriorityRequest = request;
 802112e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8021132:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8021136:	681b      	ldr	r3, [r3, #0]
 8021138:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802113c:	4619      	mov	r1, r3
 802113e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8021142:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8021146:	681a      	ldr	r2, [r3, #0]
 8021148:	f501 63bb 	add.w	r3, r1, #1496	; 0x5d8
 802114c:	4611      	mov	r1, r2
 802114e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8021152:	4618      	mov	r0, r3
 8021154:	f01a fd7c 	bl	803bc50 <memcpy>
			HasPriorityRequest = true;
 8021158:	f507 7306 	add.w	r3, r7, #536	; 0x218
 802115c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8021160:	681b      	ldr	r3, [r3, #0]
 8021162:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021166:	2201      	movs	r2, #1
 8021168:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
			break;
 802116c:	e038      	b.n	80211e0 <_ZN11QueueSender10AddRequestERK7Request+0x130>

		case MessageMode::Info:
			Responces.Push(CreateInfoResponce());
 802116e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8021172:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8021176:	681b      	ldr	r3, [r3, #0]
 8021178:	4c1c      	ldr	r4, [pc, #112]	; (80211ec <_ZN11QueueSender10AddRequestERK7Request+0x13c>)
 802117a:	441c      	add	r4, r3
 802117c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8021180:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8021184:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8021188:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 802118c:	6819      	ldr	r1, [r3, #0]
 802118e:	4610      	mov	r0, r2
 8021190:	f000 fb87 	bl	80218a2 <_ZNK11QueueSender18CreateInfoResponceEv>
 8021194:	f107 0308 	add.w	r3, r7, #8
 8021198:	4619      	mov	r1, r3
 802119a:	4620      	mov	r0, r4
 802119c:	f002 f928 	bl	80233f0 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 80211a0:	e01e      	b.n	80211e0 <_ZN11QueueSender10AddRequestERK7Request+0x130>
		case MessageMode::SetPeriod:
			Responces.Push(ProcessSetPeriodRequest(request));
 80211a2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80211a6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	4c0f      	ldr	r4, [pc, #60]	; (80211ec <_ZN11QueueSender10AddRequestERK7Request+0x13c>)
 80211ae:	441c      	add	r4, r3
 80211b0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80211b4:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 80211b8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80211bc:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 80211c0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80211c4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80211c8:	6812      	ldr	r2, [r2, #0]
 80211ca:	6819      	ldr	r1, [r3, #0]
 80211cc:	f000 fbbe 	bl	802194c <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>
 80211d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80211d4:	4619      	mov	r1, r3
 80211d6:	4620      	mov	r0, r4
 80211d8:	f002 f90a 	bl	80233f0 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 80211dc:	e000      	b.n	80211e0 <_ZN11QueueSender10AddRequestERK7Request+0x130>
				break;
 80211de:	bf00      	nop
		}
	}
 80211e0:	bf00      	nop
 80211e2:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80211e6:	46bd      	mov	sp, r7
 80211e8:	bd90      	pop	{r4, r7, pc}
 80211ea:	bf00      	nop
 80211ec:	00020b7c 	.word	0x00020b7c

080211f0 <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 80211f0:	b580      	push	{r7, lr}
 80211f2:	b082      	sub	sp, #8
 80211f4:	af00      	add	r7, sp, #0
 80211f6:	6078      	str	r0, [r7, #4]
		return !Responces.Empty();
 80211f8:	687a      	ldr	r2, [r7, #4]
 80211fa:	4b06      	ldr	r3, [pc, #24]	; (8021214 <_ZNK11QueueSender11HasResponceEv+0x24>)
 80211fc:	4413      	add	r3, r2
 80211fe:	4618      	mov	r0, r3
 8021200:	f002 f938 	bl	8023474 <_ZNK10FixedQueueI8ResponceLj10EE5EmptyEv>
 8021204:	4603      	mov	r3, r0
 8021206:	f083 0301 	eor.w	r3, r3, #1
 802120a:	b2db      	uxtb	r3, r3
	}
 802120c:	4618      	mov	r0, r3
 802120e:	3708      	adds	r7, #8
 8021210:	46bd      	mov	sp, r7
 8021212:	bd80      	pop	{r7, pc}
 8021214:	00020b7c 	.word	0x00020b7c

08021218 <_ZN11QueueSender9TickTimerEv>:

	void TickTimer() {
 8021218:	b480      	push	{r7}
 802121a:	b083      	sub	sp, #12
 802121c:	af00      	add	r7, sp, #0
 802121e:	6078      	str	r0, [r7, #4]
		SendTick = (SendTick + 1) % SendPeriod;
 8021220:	687b      	ldr	r3, [r7, #4]
 8021222:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021226:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 802122a:	3301      	adds	r3, #1
 802122c:	687a      	ldr	r2, [r7, #4]
 802122e:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 8021232:	f892 27f0 	ldrb.w	r2, [r2, #2032]	; 0x7f0
 8021236:	fb93 f1f2 	sdiv	r1, r3, r2
 802123a:	fb01 f202 	mul.w	r2, r1, r2
 802123e:	1a9b      	subs	r3, r3, r2
 8021240:	b2da      	uxtb	r2, r3
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021248:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
		if (SendTick != 0)
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021252:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 8021256:	2b00      	cmp	r3, #0
 8021258:	d106      	bne.n	8021268 <_ZN11QueueSender9TickTimerEv+0x50>
			return;

		TimerReady = true;
 802125a:	687b      	ldr	r3, [r7, #4]
 802125c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021260:	2201      	movs	r2, #1
 8021262:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 8021266:	e000      	b.n	802126a <_ZN11QueueSender9TickTimerEv+0x52>
			return;
 8021268:	bf00      	nop
	}
 802126a:	370c      	adds	r7, #12
 802126c:	46bd      	mov	sp, r7
 802126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021272:	4770      	bx	lr

08021274 <_ZN11QueueSender13SetSendPeriodEh>:

	void SetSendPeriod(uint8_t periodMs) {
 8021274:	b580      	push	{r7, lr}
 8021276:	b082      	sub	sp, #8
 8021278:	af00      	add	r7, sp, #0
 802127a:	6078      	str	r0, [r7, #4]
 802127c:	460b      	mov	r3, r1
 802127e:	70fb      	strb	r3, [r7, #3]
		assert(periodMs);
 8021280:	78fb      	ldrb	r3, [r7, #3]
 8021282:	2b00      	cmp	r3, #0
 8021284:	d105      	bne.n	8021292 <_ZN11QueueSender13SetSendPeriodEh+0x1e>
 8021286:	4b08      	ldr	r3, [pc, #32]	; (80212a8 <_ZN11QueueSender13SetSendPeriodEh+0x34>)
 8021288:	4a08      	ldr	r2, [pc, #32]	; (80212ac <_ZN11QueueSender13SetSendPeriodEh+0x38>)
 802128a:	21d7      	movs	r1, #215	; 0xd7
 802128c:	4808      	ldr	r0, [pc, #32]	; (80212b0 <_ZN11QueueSender13SetSendPeriodEh+0x3c>)
 802128e:	f01a fc75 	bl	803bb7c <__assert_func>
		SendPeriod = periodMs;
 8021292:	687b      	ldr	r3, [r7, #4]
 8021294:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021298:	461a      	mov	r2, r3
 802129a:	78fb      	ldrb	r3, [r7, #3]
 802129c:	f882 37f0 	strb.w	r3, [r2, #2032]	; 0x7f0
	}
 80212a0:	bf00      	nop
 80212a2:	3708      	adds	r7, #8
 80212a4:	46bd      	mov	sp, r7
 80212a6:	bd80      	pop	{r7, pc}
 80212a8:	0803ce44 	.word	0x0803ce44
 80212ac:	0803ce50 	.word	0x0803ce50
 80212b0:	0803cdd0 	.word	0x0803cdd0

080212b4 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 80212b4:	b580      	push	{r7, lr}
 80212b6:	b082      	sub	sp, #8
 80212b8:	af00      	add	r7, sp, #0
 80212ba:	6078      	str	r0, [r7, #4]
 80212bc:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 80212be:	6838      	ldr	r0, [r7, #0]
 80212c0:	f7ff ff96 	bl	80211f0 <_ZNK11QueueSender11HasResponceEv>
 80212c4:	4603      	mov	r3, r0
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	d105      	bne.n	80212d6 <_ZN11QueueSender11GetResponceEv+0x22>
 80212ca:	4b10      	ldr	r3, [pc, #64]	; (802130c <_ZN11QueueSender11GetResponceEv+0x58>)
 80212cc:	4a10      	ldr	r2, [pc, #64]	; (8021310 <_ZN11QueueSender11GetResponceEv+0x5c>)
 80212ce:	21dc      	movs	r1, #220	; 0xdc
 80212d0:	4810      	ldr	r0, [pc, #64]	; (8021314 <_ZN11QueueSender11GetResponceEv+0x60>)
 80212d2:	f01a fc53 	bl	803bb7c <__assert_func>
		Responce responce = Responces.Front();
 80212d6:	683a      	ldr	r2, [r7, #0]
 80212d8:	4b0f      	ldr	r3, [pc, #60]	; (8021318 <_ZN11QueueSender11GetResponceEv+0x64>)
 80212da:	4413      	add	r3, r2
 80212dc:	4618      	mov	r0, r3
 80212de:	f002 f8db 	bl	8023498 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv>
 80212e2:	4602      	mov	r2, r0
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	4618      	mov	r0, r3
 80212e8:	4611      	mov	r1, r2
 80212ea:	f44f 7384 	mov.w	r3, #264	; 0x108
 80212ee:	461a      	mov	r2, r3
 80212f0:	f01a fcae 	bl	803bc50 <memcpy>
		Responces.Pop();
 80212f4:	683a      	ldr	r2, [r7, #0]
 80212f6:	4b08      	ldr	r3, [pc, #32]	; (8021318 <_ZN11QueueSender11GetResponceEv+0x64>)
 80212f8:	4413      	add	r3, r2
 80212fa:	4618      	mov	r0, r3
 80212fc:	f002 f8ee 	bl	80234dc <_ZN10FixedQueueI8ResponceLj10EE3PopEv>
		return responce;
 8021300:	bf00      	nop
	}
 8021302:	6878      	ldr	r0, [r7, #4]
 8021304:	3708      	adds	r7, #8
 8021306:	46bd      	mov	sp, r7
 8021308:	bd80      	pop	{r7, pc}
 802130a:	bf00      	nop
 802130c:	0803ce7c 	.word	0x0803ce7c
 8021310:	0803ce8c 	.word	0x0803ce8c
 8021314:	0803cdd0 	.word	0x0803cdd0
 8021318:	00020b7c 	.word	0x00020b7c

0802131c <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 802131c:	b5b0      	push	{r4, r5, r7, lr}
 802131e:	b0cc      	sub	sp, #304	; 0x130
 8021320:	af02      	add	r7, sp, #8
 8021322:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021326:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802132a:	6018      	str	r0, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802132c:	b672      	cpsid	i
}
 802132e:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce && TransmitComplete) {
 8021330:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021334:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021338:	681b      	ldr	r3, [r3, #0]
 802133a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802133e:	f893 36e4 	ldrb.w	r3, [r3, #1764]	; 0x6e4
 8021342:	2b00      	cmp	r3, #0
 8021344:	f000 80ef 	beq.w	8021526 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20a>
 8021348:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802134c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021350:	681b      	ldr	r3, [r3, #0]
 8021352:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021356:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 802135a:	f083 0301 	eor.w	r3, r3, #1
 802135e:	b2db      	uxtb	r3, r3
 8021360:	2b00      	cmp	r3, #0
 8021362:	f000 80e0 	beq.w	8021526 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20a>
 8021366:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802136a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021374:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 8021378:	2b00      	cmp	r3, #0
 802137a:	f000 80d4 	beq.w	8021526 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20a>
			HasPriorityRequest = false;
 802137e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021382:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021386:	681b      	ldr	r3, [r3, #0]
 8021388:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802138c:	2200      	movs	r2, #0
 802138e:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
			WaitResponce = true;
 8021392:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021396:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802139a:	681b      	ldr	r3, [r3, #0]
 802139c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213a0:	2201      	movs	r2, #1
 80213a2:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
  __ASM volatile ("cpsie i" : : : "memory");
 80213a6:	b662      	cpsie	i
}
 80213a8:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 80213aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213ae:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213b2:	681a      	ldr	r2, [r3, #0]
 80213b4:	4b5f      	ldr	r3, [pc, #380]	; (8021534 <_ZN11QueueSender22ProcessPriorityRequestEv+0x218>)
 80213b6:	4413      	add	r3, r2
 80213b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			auto &data = request.Data;
 80213bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80213c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

			assert(
 80213c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80213c8:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80213cc:	4618      	mov	r0, r3
 80213ce:	f7ff fd9c 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 80213d2:	4603      	mov	r3, r0
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	d005      	beq.n	80213e4 <_ZN11QueueSender22ProcessPriorityRequestEv+0xc8>
 80213d8:	4b57      	ldr	r3, [pc, #348]	; (8021538 <_ZN11QueueSender22ProcessPriorityRequestEv+0x21c>)
 80213da:	4a58      	ldr	r2, [pc, #352]	; (802153c <_ZN11QueueSender22ProcessPriorityRequestEv+0x220>)
 80213dc:	21ec      	movs	r1, #236	; 0xec
 80213de:	4858      	ldr	r0, [pc, #352]	; (8021540 <_ZN11QueueSender22ProcessPriorityRequestEv+0x224>)
 80213e0:	f01a fbcc 	bl	803bb7c <__assert_func>
  __ASM volatile ("cpsid i" : : : "memory");
 80213e4:	b672      	cpsid	i
}
 80213e6:	bf00      	nop
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Sync);
			__disable_irq();
			TransmitComplete = false;
 80213e8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213f0:	681b      	ldr	r3, [r3, #0]
 80213f2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213f6:	2200      	movs	r2, #0
 80213f8:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
  __ASM volatile ("cpsie i" : : : "memory");
 80213fc:	b662      	cpsie	i
}
 80213fe:	bf00      	nop
			__enable_irq();

			assert(
 8021400:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021404:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021408:	681b      	ldr	r3, [r3, #0]
 802140a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802140e:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 8021412:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8021416:	f002 f88f 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 802141a:	4601      	mov	r1, r0
 802141c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021420:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021424:	b29b      	uxth	r3, r3
 8021426:	461a      	mov	r2, r3
 8021428:	4620      	mov	r0, r4
 802142a:	f013 fd7b 	bl	8034f24 <HAL_UART_Transmit_IT>
 802142e:	4603      	mov	r3, r0
 8021430:	2b00      	cmp	r3, #0
 8021432:	d005      	beq.n	8021440 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
 8021434:	4b43      	ldr	r3, [pc, #268]	; (8021544 <_ZN11QueueSender22ProcessPriorityRequestEv+0x228>)
 8021436:	4a41      	ldr	r2, [pc, #260]	; (802153c <_ZN11QueueSender22ProcessPriorityRequestEv+0x220>)
 8021438:	21f3      	movs	r1, #243	; 0xf3
 802143a:	4841      	ldr	r0, [pc, #260]	; (8021540 <_ZN11QueueSender22ProcessPriorityRequestEv+0x224>)
 802143c:	f01a fb9e 	bl	803bb7c <__assert_func>
					HAL_UART_Transmit_IT(UartHandle, data.data(),
							request.RequestSize) == HAL_OK);

			while (!TransmitComplete)
 8021440:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021444:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021448:	681b      	ldr	r3, [r3, #0]
 802144a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802144e:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 8021452:	2b00      	cmp	r3, #0
 8021454:	d100      	bne.n	8021458 <_ZN11QueueSender22ProcessPriorityRequestEv+0x13c>
 8021456:	e7f3      	b.n	8021440 <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
				;

			ErrorCode::Type error = Receive(request.ResponceSize);
 8021458:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802145c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8021460:	b2da      	uxtb	r2, r3
 8021462:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021466:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802146a:	4611      	mov	r1, r2
 802146c:	6818      	ldr	r0, [r3, #0]
 802146e:	f000 f93d 	bl	80216ec <_ZN11QueueSender7ReceiveEh>
 8021472:	4603      	mov	r3, r0
 8021474:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

			if (error == ErrorCode::NACK) {
 8021478:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 802147c:	2b02      	cmp	r3, #2
 802147e:	d11e      	bne.n	80214be <_ZN11QueueSender22ProcessPriorityRequestEv+0x1a2>
				uint32_t delayMS = 5;
 8021480:	2305      	movs	r3, #5
 8021482:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				HAL_Delay(delayMS);
 8021486:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 802148a:	f009 fb09 	bl	802aaa0 <HAL_Delay>

				uint8_t dummy;
				while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 802148e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021492:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021496:	681b      	ldr	r3, [r3, #0]
 8021498:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802149c:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 80214a0:	f107 010f 	add.w	r1, r7, #15
 80214a4:	2300      	movs	r3, #0
 80214a6:	2201      	movs	r2, #1
 80214a8:	f013 fc68 	bl	8034d7c <HAL_UART_Receive>
 80214ac:	4603      	mov	r3, r0
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	bf0c      	ite	eq
 80214b2:	2301      	moveq	r3, #1
 80214b4:	2300      	movne	r3, #0
 80214b6:	b2db      	uxtb	r3, r3
 80214b8:	2b00      	cmp	r3, #0
 80214ba:	d000      	beq.n	80214be <_ZN11QueueSender22ProcessPriorityRequestEv+0x1a2>
 80214bc:	e7e7      	b.n	802148e <_ZN11QueueSender22ProcessPriorityRequestEv+0x172>
					;
			}

			Responces.Push(
 80214be:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214c2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214c6:	681b      	ldr	r3, [r3, #0]
 80214c8:	4c1f      	ldr	r4, [pc, #124]	; (8021548 <_ZN11QueueSender22ProcessPriorityRequestEv+0x22c>)
 80214ca:	441c      	add	r4, r3
					CreateResponce(CurrentResponceBuffer, request.ResponceSize,
 80214cc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214d4:	681b      	ldr	r3, [r3, #0]
 80214d6:	4a1d      	ldr	r2, [pc, #116]	; (802154c <_ZN11QueueSender22ProcessPriorityRequestEv+0x230>)
 80214d8:	441a      	add	r2, r3
							MessageMode::Sync, error));
 80214da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80214de:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
 80214e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214e6:	f5a3 708c 	sub.w	r0, r3, #280	; 0x118
 80214ea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214ee:	f5a3 7192 	sub.w	r1, r3, #292	; 0x124
 80214f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80214f6:	9301      	str	r3, [sp, #4]
 80214f8:	2300      	movs	r3, #0
 80214fa:	9300      	str	r3, [sp, #0]
 80214fc:	462b      	mov	r3, r5
 80214fe:	6809      	ldr	r1, [r1, #0]
 8021500:	f000 f9a0 	bl	8021844 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
			Responces.Push(
 8021504:	f107 0310 	add.w	r3, r7, #16
 8021508:	4619      	mov	r1, r3
 802150a:	4620      	mov	r0, r4
 802150c:	f001 ff70 	bl	80233f0 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>

			WaitResponce = false;
 8021510:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021514:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021518:	681b      	ldr	r3, [r3, #0]
 802151a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802151e:	2200      	movs	r2, #0
 8021520:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8021524:	e001      	b.n	802152a <_ZN11QueueSender22ProcessPriorityRequestEv+0x20e>
  __ASM volatile ("cpsie i" : : : "memory");
 8021526:	b662      	cpsie	i
}
 8021528:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 802152a:	bf00      	nop
 802152c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8021530:	46bd      	mov	sp, r7
 8021532:	bdb0      	pop	{r4, r5, r7, pc}
 8021534:	000215d8 	.word	0x000215d8
 8021538:	0803ceb0 	.word	0x0803ceb0
 802153c:	0803cef0 	.word	0x0803cef0
 8021540:	0803cdd0 	.word	0x0803cdd0
 8021544:	0803cf1c 	.word	0x0803cf1c
 8021548:	00020b7c 	.word	0x00020b7c
 802154c:	000216e6 	.word	0x000216e6

08021550 <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 8021550:	b590      	push	{r4, r7, lr}
 8021552:	b089      	sub	sp, #36	; 0x24
 8021554:	af00      	add	r7, sp, #0
 8021556:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8021558:	b672      	cpsid	i
}
 802155a:	bf00      	nop
		__disable_irq();
		if (TimerReady && !Requests.Empty() && !WaitResponce
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021562:	f893 37f3 	ldrb.w	r3, [r3, #2035]	; 0x7f3
				&& TransmitComplete) {
 8021566:	2b00      	cmp	r3, #0
 8021568:	d01c      	beq.n	80215a4 <_ZN11QueueSender15ProcessRequestsEv+0x54>
		if (TimerReady && !Requests.Empty() && !WaitResponce
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	4618      	mov	r0, r3
 802156e:	f001 fff0 	bl	8023552 <_ZNK10FixedQueueI7RequestLj500EE5EmptyEv>
 8021572:	4603      	mov	r3, r0
 8021574:	f083 0301 	eor.w	r3, r3, #1
 8021578:	b2db      	uxtb	r3, r3
 802157a:	2b00      	cmp	r3, #0
 802157c:	d012      	beq.n	80215a4 <_ZN11QueueSender15ProcessRequestsEv+0x54>
 802157e:	687b      	ldr	r3, [r7, #4]
 8021580:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021584:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 8021588:	f083 0301 	eor.w	r3, r3, #1
 802158c:	b2db      	uxtb	r3, r3
 802158e:	2b00      	cmp	r3, #0
 8021590:	d008      	beq.n	80215a4 <_ZN11QueueSender15ProcessRequestsEv+0x54>
				&& TransmitComplete) {
 8021592:	687b      	ldr	r3, [r7, #4]
 8021594:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021598:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 802159c:	2b00      	cmp	r3, #0
 802159e:	d001      	beq.n	80215a4 <_ZN11QueueSender15ProcessRequestsEv+0x54>
 80215a0:	2301      	movs	r3, #1
 80215a2:	e000      	b.n	80215a6 <_ZN11QueueSender15ProcessRequestsEv+0x56>
 80215a4:	2300      	movs	r3, #0
		if (TimerReady && !Requests.Empty() && !WaitResponce
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	f000 8091 	beq.w	80216ce <_ZN11QueueSender15ProcessRequestsEv+0x17e>

			WaitResponce = true;
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215b2:	2201      	movs	r2, #1
 80215b4:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
  __ASM volatile ("cpsie i" : : : "memory");
 80215b8:	b662      	cpsie	i
}
 80215ba:	bf00      	nop
			__enable_irq();

			auto &request = Requests.Front();
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	4618      	mov	r0, r3
 80215c0:	f001 ffd8 	bl	8023574 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv>
 80215c4:	61b8      	str	r0, [r7, #24]
			auto &data = request.Data;
 80215c6:	69bb      	ldr	r3, [r7, #24]
 80215c8:	617b      	str	r3, [r7, #20]

			assert(
 80215ca:	69bb      	ldr	r3, [r7, #24]
 80215cc:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80215d0:	4618      	mov	r0, r3
 80215d2:	f7ff fc9a 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 80215d6:	4603      	mov	r3, r0
 80215d8:	2b01      	cmp	r3, #1
 80215da:	d006      	beq.n	80215ea <_ZN11QueueSender15ProcessRequestsEv+0x9a>
 80215dc:	4b3f      	ldr	r3, [pc, #252]	; (80216dc <_ZN11QueueSender15ProcessRequestsEv+0x18c>)
 80215de:	4a40      	ldr	r2, [pc, #256]	; (80216e0 <_ZN11QueueSender15ProcessRequestsEv+0x190>)
 80215e0:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80215e4:	483f      	ldr	r0, [pc, #252]	; (80216e4 <_ZN11QueueSender15ProcessRequestsEv+0x194>)
 80215e6:	f01a fac9 	bl	803bb7c <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Async);

			const size_t nAttempts = 5;
 80215ea:	2305      	movs	r3, #5
 80215ec:	613b      	str	r3, [r7, #16]
			const uint32_t delayMS = 5;
 80215ee:	2305      	movs	r3, #5
 80215f0:	60fb      	str	r3, [r7, #12]
			size_t i = 0;
 80215f2:	2300      	movs	r3, #0
 80215f4:	61fb      	str	r3, [r7, #28]

			while (i++ < nAttempts) {
 80215f6:	69fb      	ldr	r3, [r7, #28]
 80215f8:	1c5a      	adds	r2, r3, #1
 80215fa:	61fa      	str	r2, [r7, #28]
 80215fc:	2b04      	cmp	r3, #4
 80215fe:	bf94      	ite	ls
 8021600:	2301      	movls	r3, #1
 8021602:	2300      	movhi	r3, #0
 8021604:	b2db      	uxtb	r3, r3
 8021606:	2b00      	cmp	r3, #0
 8021608:	d050      	beq.n	80216ac <_ZN11QueueSender15ProcessRequestsEv+0x15c>

				TransmitComplete = false;
 802160a:	687b      	ldr	r3, [r7, #4]
 802160c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021610:	2200      	movs	r2, #0
 8021612:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2

				assert(
 8021616:	687b      	ldr	r3, [r7, #4]
 8021618:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802161c:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 8021620:	6978      	ldr	r0, [r7, #20]
 8021622:	f001 ffc9 	bl	80235b8 <_ZNKSt5arrayIhLj256EE4dataEv>
 8021626:	4601      	mov	r1, r0
 8021628:	69bb      	ldr	r3, [r7, #24]
 802162a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802162e:	b29b      	uxth	r3, r3
 8021630:	461a      	mov	r2, r3
 8021632:	4620      	mov	r0, r4
 8021634:	f013 fc76 	bl	8034f24 <HAL_UART_Transmit_IT>
 8021638:	4603      	mov	r3, r0
 802163a:	2b00      	cmp	r3, #0
 802163c:	d006      	beq.n	802164c <_ZN11QueueSender15ProcessRequestsEv+0xfc>
 802163e:	4b2a      	ldr	r3, [pc, #168]	; (80216e8 <_ZN11QueueSender15ProcessRequestsEv+0x198>)
 8021640:	4a27      	ldr	r2, [pc, #156]	; (80216e0 <_ZN11QueueSender15ProcessRequestsEv+0x190>)
 8021642:	f44f 7193 	mov.w	r1, #294	; 0x126
 8021646:	4827      	ldr	r0, [pc, #156]	; (80216e4 <_ZN11QueueSender15ProcessRequestsEv+0x194>)
 8021648:	f01a fa98 	bl	803bb7c <__assert_func>
						HAL_UART_Transmit_IT(UartHandle, data.data(),
								request.RequestSize) == HAL_OK);

				while (!TransmitComplete)
 802164c:	687b      	ldr	r3, [r7, #4]
 802164e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021652:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 8021656:	2b00      	cmp	r3, #0
 8021658:	d100      	bne.n	802165c <_ZN11QueueSender15ProcessRequestsEv+0x10c>
 802165a:	e7f7      	b.n	802164c <_ZN11QueueSender15ProcessRequestsEv+0xfc>
					;

				ErrorCode::Type error = Receive(request.ResponceSize);
 802165c:	69bb      	ldr	r3, [r7, #24]
 802165e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8021662:	b2db      	uxtb	r3, r3
 8021664:	4619      	mov	r1, r3
 8021666:	6878      	ldr	r0, [r7, #4]
 8021668:	f000 f840 	bl	80216ec <_ZN11QueueSender7ReceiveEh>
 802166c:	4603      	mov	r3, r0
 802166e:	72fb      	strb	r3, [r7, #11]
				if (error == ErrorCode::Success)
 8021670:	7afb      	ldrb	r3, [r7, #11]
 8021672:	2b00      	cmp	r3, #0
 8021674:	d019      	beq.n	80216aa <_ZN11QueueSender15ProcessRequestsEv+0x15a>
					break;
				HAL_Delay(delayMS);
 8021676:	2005      	movs	r0, #5
 8021678:	f009 fa12 	bl	802aaa0 <HAL_Delay>
				if (error == ErrorCode::NACK) {
 802167c:	7afb      	ldrb	r3, [r7, #11]
 802167e:	2b02      	cmp	r3, #2
 8021680:	d1b9      	bne.n	80215f6 <_ZN11QueueSender15ProcessRequestsEv+0xa6>
					uint8_t dummy;
					while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 8021682:	687b      	ldr	r3, [r7, #4]
 8021684:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021688:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 802168c:	f107 010a 	add.w	r1, r7, #10
 8021690:	2300      	movs	r3, #0
 8021692:	2201      	movs	r2, #1
 8021694:	f013 fb72 	bl	8034d7c <HAL_UART_Receive>
 8021698:	4603      	mov	r3, r0
 802169a:	2b00      	cmp	r3, #0
 802169c:	bf0c      	ite	eq
 802169e:	2301      	moveq	r3, #1
 80216a0:	2300      	movne	r3, #0
 80216a2:	b2db      	uxtb	r3, r3
 80216a4:	2b00      	cmp	r3, #0
 80216a6:	d0a6      	beq.n	80215f6 <_ZN11QueueSender15ProcessRequestsEv+0xa6>
 80216a8:	e7eb      	b.n	8021682 <_ZN11QueueSender15ProcessRequestsEv+0x132>
					break;
 80216aa:	bf00      	nop
						;
				}
			}

			Requests.Pop();
 80216ac:	687b      	ldr	r3, [r7, #4]
 80216ae:	4618      	mov	r0, r3
 80216b0:	f001 ff90 	bl	80235d4 <_ZN10FixedQueueI7RequestLj500EE3PopEv>
			WaitResponce = false;
 80216b4:	687b      	ldr	r3, [r7, #4]
 80216b6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216ba:	2200      	movs	r2, #0
 80216bc:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
			TimerReady = false;
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216c6:	2200      	movs	r2, #0
 80216c8:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
		} else {
			__enable_irq();
		}
	}
 80216cc:	e001      	b.n	80216d2 <_ZN11QueueSender15ProcessRequestsEv+0x182>
  __ASM volatile ("cpsie i" : : : "memory");
 80216ce:	b662      	cpsie	i
}
 80216d0:	bf00      	nop
 80216d2:	bf00      	nop
 80216d4:	3724      	adds	r7, #36	; 0x24
 80216d6:	46bd      	mov	sp, r7
 80216d8:	bd90      	pop	{r4, r7, pc}
 80216da:	bf00      	nop
 80216dc:	0803cf6c 	.word	0x0803cf6c
 80216e0:	0803cfb0 	.word	0x0803cfb0
 80216e4:	0803cdd0 	.word	0x0803cdd0
 80216e8:	0803cf1c 	.word	0x0803cf1c

080216ec <_ZN11QueueSender7ReceiveEh>:

	ErrorCode::Type Receive(uint8_t size) {
 80216ec:	b590      	push	{r4, r7, lr}
 80216ee:	b085      	sub	sp, #20
 80216f0:	af00      	add	r7, sp, #0
 80216f2:	6078      	str	r0, [r7, #4]
 80216f4:	460b      	mov	r3, r1
 80216f6:	70fb      	strb	r3, [r7, #3]
		assert(size >= 4);
 80216f8:	78fb      	ldrb	r3, [r7, #3]
 80216fa:	2b03      	cmp	r3, #3
 80216fc:	d806      	bhi.n	802170c <_ZN11QueueSender7ReceiveEh+0x20>
 80216fe:	4b33      	ldr	r3, [pc, #204]	; (80217cc <_ZN11QueueSender7ReceiveEh+0xe0>)
 8021700:	4a33      	ldr	r2, [pc, #204]	; (80217d0 <_ZN11QueueSender7ReceiveEh+0xe4>)
 8021702:	f240 1141 	movw	r1, #321	; 0x141
 8021706:	4833      	ldr	r0, [pc, #204]	; (80217d4 <_ZN11QueueSender7ReceiveEh+0xe8>)
 8021708:	f01a fa38 	bl	803bb7c <__assert_func>

		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 802170c:	687b      	ldr	r3, [r7, #4]
 802170e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021712:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 8021716:	687a      	ldr	r2, [r7, #4]
 8021718:	4b2f      	ldr	r3, [pc, #188]	; (80217d8 <_ZN11QueueSender7ReceiveEh+0xec>)
 802171a:	4413      	add	r3, r2
 802171c:	4618      	mov	r0, r3
 802171e:	f001 ff0b 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 8021722:	4601      	mov	r1, r0
				TimeoutS);
 8021724:	687b      	ldr	r3, [r7, #4]
 8021726:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802172a:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 802172e:	2204      	movs	r2, #4
 8021730:	4620      	mov	r0, r4
 8021732:	f013 fb23 	bl	8034d7c <HAL_UART_Receive>
 8021736:	4603      	mov	r3, r0
 8021738:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 802173a:	7bfb      	ldrb	r3, [r7, #15]
 802173c:	2b03      	cmp	r3, #3
 802173e:	d101      	bne.n	8021744 <_ZN11QueueSender7ReceiveEh+0x58>
			return ErrorCode::Timeout;
 8021740:	2301      	movs	r3, #1
 8021742:	e03f      	b.n	80217c4 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (IsNack(CurrentResponceBuffer.data()))
 8021744:	687a      	ldr	r2, [r7, #4]
 8021746:	4b24      	ldr	r3, [pc, #144]	; (80217d8 <_ZN11QueueSender7ReceiveEh+0xec>)
 8021748:	4413      	add	r3, r2
 802174a:	4618      	mov	r0, r3
 802174c:	f001 fef4 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 8021750:	4603      	mov	r3, r0
 8021752:	4619      	mov	r1, r3
 8021754:	6878      	ldr	r0, [r7, #4]
 8021756:	f000 f841 	bl	80217dc <_ZN11QueueSender6IsNackEPKh>
 802175a:	4603      	mov	r3, r0
 802175c:	2b00      	cmp	r3, #0
 802175e:	d001      	beq.n	8021764 <_ZN11QueueSender7ReceiveEh+0x78>
			return ErrorCode::NACK;
 8021760:	2302      	movs	r3, #2
 8021762:	e02f      	b.n	80217c4 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (ret != HAL_OK)
 8021764:	7bfb      	ldrb	r3, [r7, #15]
 8021766:	2b00      	cmp	r3, #0
 8021768:	d001      	beq.n	802176e <_ZN11QueueSender7ReceiveEh+0x82>
			return ErrorCode::Unknown;
 802176a:	2303      	movs	r3, #3
 802176c:	e02a      	b.n	80217c4 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (size == 4)
 802176e:	78fb      	ldrb	r3, [r7, #3]
 8021770:	2b04      	cmp	r3, #4
 8021772:	d101      	bne.n	8021778 <_ZN11QueueSender7ReceiveEh+0x8c>
			return ErrorCode::Success;
 8021774:	2300      	movs	r3, #0
 8021776:	e025      	b.n	80217c4 <_ZN11QueueSender7ReceiveEh+0xd8>

		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 8021778:	687b      	ldr	r3, [r7, #4]
 802177a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802177e:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 8021782:	687a      	ldr	r2, [r7, #4]
 8021784:	4b14      	ldr	r3, [pc, #80]	; (80217d8 <_ZN11QueueSender7ReceiveEh+0xec>)
 8021786:	4413      	add	r3, r2
 8021788:	4618      	mov	r0, r3
 802178a:	f001 fed5 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 802178e:	4603      	mov	r3, r0
 8021790:	1d19      	adds	r1, r3, #4
 8021792:	78fb      	ldrb	r3, [r7, #3]
 8021794:	b29b      	uxth	r3, r3
 8021796:	3b04      	subs	r3, #4
 8021798:	b29a      	uxth	r2, r3
				size - 4, TimeoutS);
 802179a:	687b      	ldr	r3, [r7, #4]
 802179c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80217a0:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 80217a4:	4620      	mov	r0, r4
 80217a6:	f013 fae9 	bl	8034d7c <HAL_UART_Receive>
 80217aa:	4603      	mov	r3, r0
 80217ac:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 80217ae:	7bfb      	ldrb	r3, [r7, #15]
 80217b0:	2b03      	cmp	r3, #3
 80217b2:	d101      	bne.n	80217b8 <_ZN11QueueSender7ReceiveEh+0xcc>
			return ErrorCode::Timeout;
 80217b4:	2301      	movs	r3, #1
 80217b6:	e005      	b.n	80217c4 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (ret != HAL_OK)
 80217b8:	7bfb      	ldrb	r3, [r7, #15]
 80217ba:	2b00      	cmp	r3, #0
 80217bc:	d001      	beq.n	80217c2 <_ZN11QueueSender7ReceiveEh+0xd6>
			return ErrorCode::Unknown;
 80217be:	2303      	movs	r3, #3
 80217c0:	e000      	b.n	80217c4 <_ZN11QueueSender7ReceiveEh+0xd8>

		return ErrorCode::Success;
 80217c2:	2300      	movs	r3, #0
	}
 80217c4:	4618      	mov	r0, r3
 80217c6:	3714      	adds	r7, #20
 80217c8:	46bd      	mov	sp, r7
 80217ca:	bd90      	pop	{r4, r7, pc}
 80217cc:	0803cfd4 	.word	0x0803cfd4
 80217d0:	0803cfe0 	.word	0x0803cfe0
 80217d4:	0803cdd0 	.word	0x0803cdd0
 80217d8:	000216e6 	.word	0x000216e6

080217dc <_ZN11QueueSender6IsNackEPKh>:

	bool IsNack(const uint8_t *data) {
 80217dc:	b580      	push	{r7, lr}
 80217de:	b084      	sub	sp, #16
 80217e0:	af00      	add	r7, sp, #0
 80217e2:	6078      	str	r0, [r7, #4]
 80217e4:	6039      	str	r1, [r7, #0]
		assert(data);
 80217e6:	683b      	ldr	r3, [r7, #0]
 80217e8:	2b00      	cmp	r3, #0
 80217ea:	d106      	bne.n	80217fa <_ZN11QueueSender6IsNackEPKh+0x1e>
 80217ec:	4b11      	ldr	r3, [pc, #68]	; (8021834 <_ZN11QueueSender6IsNackEPKh+0x58>)
 80217ee:	4a12      	ldr	r2, [pc, #72]	; (8021838 <_ZN11QueueSender6IsNackEPKh+0x5c>)
 80217f0:	f240 115f 	movw	r1, #351	; 0x15f
 80217f4:	4811      	ldr	r0, [pc, #68]	; (802183c <_ZN11QueueSender6IsNackEPKh+0x60>)
 80217f6:	f01a f9c1 	bl	803bb7c <__assert_func>
		uint8_t kondoNACK[4] = { 0x4, 0xFE, 0x15, 0x17 };
 80217fa:	4b11      	ldr	r3, [pc, #68]	; (8021840 <_ZN11QueueSender6IsNackEPKh+0x64>)
 80217fc:	60bb      	str	r3, [r7, #8]

		for (int i = 0; i < 4; ++i)
 80217fe:	2300      	movs	r3, #0
 8021800:	60fb      	str	r3, [r7, #12]
 8021802:	68fb      	ldr	r3, [r7, #12]
 8021804:	2b03      	cmp	r3, #3
 8021806:	dc10      	bgt.n	802182a <_ZN11QueueSender6IsNackEPKh+0x4e>
			if (data[i] != kondoNACK[i])
 8021808:	68fb      	ldr	r3, [r7, #12]
 802180a:	683a      	ldr	r2, [r7, #0]
 802180c:	4413      	add	r3, r2
 802180e:	781a      	ldrb	r2, [r3, #0]
 8021810:	f107 0108 	add.w	r1, r7, #8
 8021814:	68fb      	ldr	r3, [r7, #12]
 8021816:	440b      	add	r3, r1
 8021818:	781b      	ldrb	r3, [r3, #0]
 802181a:	429a      	cmp	r2, r3
 802181c:	d001      	beq.n	8021822 <_ZN11QueueSender6IsNackEPKh+0x46>
				return false;
 802181e:	2300      	movs	r3, #0
 8021820:	e004      	b.n	802182c <_ZN11QueueSender6IsNackEPKh+0x50>
		for (int i = 0; i < 4; ++i)
 8021822:	68fb      	ldr	r3, [r7, #12]
 8021824:	3301      	adds	r3, #1
 8021826:	60fb      	str	r3, [r7, #12]
 8021828:	e7eb      	b.n	8021802 <_ZN11QueueSender6IsNackEPKh+0x26>

		return true;
 802182a:	2301      	movs	r3, #1
	}
 802182c:	4618      	mov	r0, r3
 802182e:	3710      	adds	r7, #16
 8021830:	46bd      	mov	sp, r7
 8021832:	bd80      	pop	{r7, pc}
 8021834:	0803d01c 	.word	0x0803d01c
 8021838:	0803d024 	.word	0x0803d024
 802183c:	0803cdd0 	.word	0x0803cdd0
 8021840:	1715fe04 	.word	0x1715fe04

08021844 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>:

	Responce CreateResponce(const Responce::BufferT& data,
 8021844:	b580      	push	{r7, lr}
 8021846:	b084      	sub	sp, #16
 8021848:	af00      	add	r7, sp, #0
 802184a:	60f8      	str	r0, [r7, #12]
 802184c:	60b9      	str	r1, [r7, #8]
 802184e:	607a      	str	r2, [r7, #4]
 8021850:	603b      	str	r3, [r7, #0]
			size_t ResponceSize, MessageMode::Type messageMode,
			ErrorCode::Type error) const {
		Responce responce;
		responce.Data = data;
 8021852:	68fa      	ldr	r2, [r7, #12]
 8021854:	687b      	ldr	r3, [r7, #4]
 8021856:	4610      	mov	r0, r2
 8021858:	4619      	mov	r1, r3
 802185a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802185e:	461a      	mov	r2, r3
 8021860:	f01a f9f6 	bl	803bc50 <memcpy>
		responce.ResponceSize = ResponceSize;
 8021864:	68fb      	ldr	r3, [r7, #12]
 8021866:	683a      	ldr	r2, [r7, #0]
 8021868:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.PeripheryID = Periphery::Body;
 802186c:	68fb      	ldr	r3, [r7, #12]
 802186e:	2200      	movs	r2, #0
 8021870:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.Error = ErrorCode::Serialize(error);
 8021874:	7f3b      	ldrb	r3, [r7, #28]
 8021876:	4618      	mov	r0, r3
 8021878:	f7ff fb53 	bl	8020f22 <_ZN11QueueSender9ErrorCode9SerializeEh>
 802187c:	4603      	mov	r3, r0
 802187e:	461a      	mov	r2, r3
 8021880:	68fb      	ldr	r3, [r7, #12]
 8021882:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		responce.MetaInfo = MessageMode::Serialize(messageMode);
 8021886:	7e3b      	ldrb	r3, [r7, #24]
 8021888:	4618      	mov	r0, r3
 802188a:	f7ff fb32 	bl	8020ef2 <_ZN11QueueSender11MessageMode9SerializeEh>
 802188e:	4603      	mov	r3, r0
 8021890:	461a      	mov	r2, r3
 8021892:	68fb      	ldr	r3, [r7, #12]
 8021894:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		return responce;
 8021898:	bf00      	nop
	}
 802189a:	68f8      	ldr	r0, [r7, #12]
 802189c:	3710      	adds	r7, #16
 802189e:	46bd      	mov	sp, r7
 80218a0:	bd80      	pop	{r7, pc}

080218a2 <_ZNK11QueueSender18CreateInfoResponceEv>:

	Responce CreateInfoResponce() const {
 80218a2:	b580      	push	{r7, lr}
 80218a4:	b0c6      	sub	sp, #280	; 0x118
 80218a6:	af02      	add	r7, sp, #8
 80218a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80218ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80218b0:	6018      	str	r0, [r3, #0]
 80218b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80218b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80218ba:	6019      	str	r1, [r3, #0]
		Responce::BufferT data;
		uint8_t *ptr = data.data();
 80218bc:	f107 030c 	add.w	r3, r7, #12
 80218c0:	4618      	mov	r0, r3
 80218c2:	f001 fe39 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 80218c6:	4602      	mov	r2, r0
 80218c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80218cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80218d0:	601a      	str	r2, [r3, #0]
		GetInfo().SerializeTo(&ptr);
 80218d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80218d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80218da:	6818      	ldr	r0, [r3, #0]
 80218dc:	f000 f8bc 	bl	8021a58 <_ZNK11QueueSender7GetInfoEv>
 80218e0:	4603      	mov	r3, r0
 80218e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80218e6:	f107 0208 	add.w	r2, r7, #8
 80218ea:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80218ee:	4611      	mov	r1, r2
 80218f0:	4618      	mov	r0, r3
 80218f2:	f7ff fb23 	bl	8020f3c <_ZN11QueueSender4Info11SerializeToEPPh>

		return CreateResponce(data, Info::Size, MessageMode::Info, ErrorCode::Success);
 80218f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80218fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80218fe:	6818      	ldr	r0, [r3, #0]
 8021900:	f107 020c 	add.w	r2, r7, #12
 8021904:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021908:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 802190c:	2300      	movs	r3, #0
 802190e:	9301      	str	r3, [sp, #4]
 8021910:	2302      	movs	r3, #2
 8021912:	9300      	str	r3, [sp, #0]
 8021914:	2304      	movs	r3, #4
 8021916:	6809      	ldr	r1, [r1, #0]
 8021918:	f7ff ff94 	bl	8021844 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 802191c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021920:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021924:	6818      	ldr	r0, [r3, #0]
 8021926:	f507 7788 	add.w	r7, r7, #272	; 0x110
 802192a:	46bd      	mov	sp, r7
 802192c:	bd80      	pop	{r7, pc}

0802192e <_ZNKSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) const noexcept
 802192e:	b580      	push	{r7, lr}
 8021930:	b082      	sub	sp, #8
 8021932:	af00      	add	r7, sp, #0
 8021934:	6078      	str	r0, [r7, #4]
 8021936:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	6839      	ldr	r1, [r7, #0]
 802193c:	4618      	mov	r0, r3
 802193e:	f001 fe77 	bl	8023630 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8021942:	4603      	mov	r3, r0
 8021944:	4618      	mov	r0, r3
 8021946:	3708      	adds	r7, #8
 8021948:	46bd      	mov	sp, r7
 802194a:	bd80      	pop	{r7, pc}

0802194c <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>:

	Responce ProcessSetPeriodRequest(const Request &request) {
 802194c:	b580      	push	{r7, lr}
 802194e:	b0c8      	sub	sp, #288	; 0x120
 8021950:	af02      	add	r7, sp, #8
 8021952:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021956:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802195a:	6018      	str	r0, [r3, #0]
 802195c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021960:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021964:	6019      	str	r1, [r3, #0]
 8021966:	f507 738c 	add.w	r3, r7, #280	; 0x118
 802196a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 802196e:	601a      	str	r2, [r3, #0]
		assert(
 8021970:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021974:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021978:	681b      	ldr	r3, [r3, #0]
 802197a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 802197e:	4618      	mov	r0, r3
 8021980:	f7ff fac3 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021984:	4603      	mov	r3, r0
 8021986:	2b03      	cmp	r3, #3
 8021988:	d006      	beq.n	8021998 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x4c>
 802198a:	4b23      	ldr	r3, [pc, #140]	; (8021a18 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xcc>)
 802198c:	4a23      	ldr	r2, [pc, #140]	; (8021a1c <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xd0>)
 802198e:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8021992:	4823      	ldr	r0, [pc, #140]	; (8021a20 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xd4>)
 8021994:	f01a f8f2 	bl	803bb7c <__assert_func>
				MessageMode::Deserialize(request.MetaInfo)
						== MessageMode::SetPeriod);
		Responce::BufferT data;

		uint8_t newPeriod = request.Data[0];
 8021998:	f507 738c 	add.w	r3, r7, #280	; 0x118
 802199c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80219a0:	681b      	ldr	r3, [r3, #0]
 80219a2:	2100      	movs	r1, #0
 80219a4:	4618      	mov	r0, r3
 80219a6:	f7ff ffc2 	bl	802192e <_ZNKSt5arrayIhLj256EEixEj>
 80219aa:	4603      	mov	r3, r0
 80219ac:	781b      	ldrb	r3, [r3, #0]
 80219ae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

		ErrorCode::Type error = ErrorCode::Success;
 80219b2:	2300      	movs	r3, #0
 80219b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (newPeriod == 0)
 80219b8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80219bc:	2b00      	cmp	r3, #0
 80219be:	d103      	bne.n	80219c8 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x7c>
			error = ErrorCode::BadPeriod;
 80219c0:	2304      	movs	r3, #4
 80219c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80219c6:	e009      	b.n	80219dc <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x90>
		else
			SetSendPeriod(newPeriod);
 80219c8:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 80219cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80219d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80219d4:	4611      	mov	r1, r2
 80219d6:	6818      	ldr	r0, [r3, #0]
 80219d8:	f7ff fc4c 	bl	8021274 <_ZN11QueueSender13SetSendPeriodEh>

		return CreateResponce(data, 1, MessageMode::SetPeriod, error);
 80219dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80219e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80219e4:	6818      	ldr	r0, [r3, #0]
 80219e6:	f107 0214 	add.w	r2, r7, #20
 80219ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80219ee:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80219f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80219f6:	9301      	str	r3, [sp, #4]
 80219f8:	2303      	movs	r3, #3
 80219fa:	9300      	str	r3, [sp, #0]
 80219fc:	2301      	movs	r3, #1
 80219fe:	6809      	ldr	r1, [r1, #0]
 8021a00:	f7ff ff20 	bl	8021844 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021a04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021a0c:	6818      	ldr	r0, [r3, #0]
 8021a0e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8021a12:	46bd      	mov	sp, r7
 8021a14:	bd80      	pop	{r7, pc}
 8021a16:	bf00      	nop
 8021a18:	0803d050 	.word	0x0803d050
 8021a1c:	0803d098 	.word	0x0803d098
 8021a20:	0803cdd0 	.word	0x0803cdd0

08021a24 <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 8021a24:	b480      	push	{r7}
 8021a26:	b083      	sub	sp, #12
 8021a28:	af00      	add	r7, sp, #0
 8021a2a:	6078      	str	r0, [r7, #4]
		//WaitResponce = false;
	}
 8021a2c:	bf00      	nop
 8021a2e:	370c      	adds	r7, #12
 8021a30:	46bd      	mov	sp, r7
 8021a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a36:	4770      	bx	lr

08021a38 <_ZN11QueueSender14FinishTransmitEv>:

	void FinishTransmit() {
 8021a38:	b480      	push	{r7}
 8021a3a:	b083      	sub	sp, #12
 8021a3c:	af00      	add	r7, sp, #0
 8021a3e:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021a46:	2201      	movs	r2, #1
 8021a48:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
	}
 8021a4c:	bf00      	nop
 8021a4e:	370c      	adds	r7, #12
 8021a50:	46bd      	mov	sp, r7
 8021a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a56:	4770      	bx	lr

08021a58 <_ZNK11QueueSender7GetInfoEv>:

	Info GetInfo() const {
 8021a58:	b580      	push	{r7, lr}
 8021a5a:	b084      	sub	sp, #16
 8021a5c:	af00      	add	r7, sp, #0
 8021a5e:	6078      	str	r0, [r7, #4]
		return {Requests.GetSize(), Responces.GetSize()};
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	4618      	mov	r0, r3
 8021a64:	f001 fdf2 	bl	802364c <_ZNK10FixedQueueI7RequestLj500EE7GetSizeEv>
 8021a68:	4603      	mov	r3, r0
 8021a6a:	b29b      	uxth	r3, r3
 8021a6c:	81bb      	strh	r3, [r7, #12]
 8021a6e:	687a      	ldr	r2, [r7, #4]
 8021a70:	4b09      	ldr	r3, [pc, #36]	; (8021a98 <_ZNK11QueueSender7GetInfoEv+0x40>)
 8021a72:	4413      	add	r3, r2
 8021a74:	4618      	mov	r0, r3
 8021a76:	f001 fdf5 	bl	8023664 <_ZNK10FixedQueueI8ResponceLj10EE7GetSizeEv>
 8021a7a:	4603      	mov	r3, r0
 8021a7c:	b29b      	uxth	r3, r3
 8021a7e:	81fb      	strh	r3, [r7, #14]
 8021a80:	2300      	movs	r3, #0
 8021a82:	89ba      	ldrh	r2, [r7, #12]
 8021a84:	f362 030f 	bfi	r3, r2, #0, #16
 8021a88:	89fa      	ldrh	r2, [r7, #14]
 8021a8a:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8021a8e:	4618      	mov	r0, r3
 8021a90:	3710      	adds	r7, #16
 8021a92:	46bd      	mov	sp, r7
 8021a94:	bd80      	pop	{r7, pc}
 8021a96:	bf00      	nop
 8021a98:	00020b7c 	.word	0x00020b7c

08021a9c <_ZN10FixedQueueI7RequestLj10EEC1Ev>:
class FixedQueue {
 8021a9c:	b480      	push	{r7}
 8021a9e:	b083      	sub	sp, #12
 8021aa0:	af00      	add	r7, sp, #0
 8021aa2:	6078      	str	r0, [r7, #4]
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	2200      	movs	r2, #0
 8021aa8:	601a      	str	r2, [r3, #0]
 8021aaa:	687b      	ldr	r3, [r7, #4]
 8021aac:	2200      	movs	r2, #0
 8021aae:	605a      	str	r2, [r3, #4]
 8021ab0:	687b      	ldr	r3, [r7, #4]
 8021ab2:	2200      	movs	r2, #0
 8021ab4:	609a      	str	r2, [r3, #8]
 8021ab6:	687b      	ldr	r3, [r7, #4]
 8021ab8:	4618      	mov	r0, r3
 8021aba:	370c      	adds	r7, #12
 8021abc:	46bd      	mov	sp, r7
 8021abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ac2:	4770      	bx	lr

08021ac4 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;
public:
	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 8021ac4:	b580      	push	{r7, lr}
 8021ac6:	b084      	sub	sp, #16
 8021ac8:	af00      	add	r7, sp, #0
 8021aca:	60f8      	str	r0, [r7, #12]
 8021acc:	60b9      	str	r1, [r7, #8]
 8021ace:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8021ad0:	68fb      	ldr	r3, [r7, #12]
 8021ad2:	4618      	mov	r0, r3
 8021ad4:	f7ff ffe2 	bl	8021a9c <_ZN10FixedQueueI7RequestLj10EEC1Ev>
 8021ad8:	68fb      	ldr	r3, [r7, #12]
 8021ada:	68ba      	ldr	r2, [r7, #8]
 8021adc:	f8c3 2a84 	str.w	r2, [r3, #2692]	; 0xa84
 8021ae0:	68fb      	ldr	r3, [r7, #12]
 8021ae2:	687a      	ldr	r2, [r7, #4]
 8021ae4:	f8c3 2a88 	str.w	r2, [r3, #2696]	; 0xa88
 8021ae8:	68fb      	ldr	r3, [r7, #12]
 8021aea:	2201      	movs	r2, #1
 8021aec:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
		assert(uart != NULL);
 8021af0:	68bb      	ldr	r3, [r7, #8]
 8021af2:	2b00      	cmp	r3, #0
 8021af4:	d106      	bne.n	8021b04 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x40>
 8021af6:	4b06      	ldr	r3, [pc, #24]	; (8021b10 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x4c>)
 8021af8:	4a06      	ldr	r2, [pc, #24]	; (8021b14 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>)
 8021afa:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8021afe:	4806      	ldr	r0, [pc, #24]	; (8021b18 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x54>)
 8021b00:	f01a f83c 	bl	803bb7c <__assert_func>
	}
 8021b04:	68fb      	ldr	r3, [r7, #12]
 8021b06:	4618      	mov	r0, r3
 8021b08:	3710      	adds	r7, #16
 8021b0a:	46bd      	mov	sp, r7
 8021b0c:	bd80      	pop	{r7, pc}
 8021b0e:	bf00      	nop
 8021b10:	0803cdf4 	.word	0x0803cdf4
 8021b14:	0803d0d8 	.word	0x0803d0d8
 8021b18:	0803cdd0 	.word	0x0803cdd0

08021b1c <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 8021b1c:	b580      	push	{r7, lr}
 8021b1e:	b082      	sub	sp, #8
 8021b20:	af00      	add	r7, sp, #0
 8021b22:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	2200      	movs	r2, #0
 8021b28:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
		assert(HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1) == HAL_OK);
 8021b2c:	687b      	ldr	r3, [r7, #4]
 8021b2e:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021b32:	687b      	ldr	r3, [r7, #4]
 8021b34:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021b38:	2201      	movs	r2, #1
 8021b3a:	4619      	mov	r1, r3
 8021b3c:	f013 fa9a 	bl	8035074 <HAL_UART_Receive_IT>
 8021b40:	4603      	mov	r3, r0
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d006      	beq.n	8021b54 <_ZN13HeadInterface14ResetReadStateEv+0x38>
 8021b46:	4b05      	ldr	r3, [pc, #20]	; (8021b5c <_ZN13HeadInterface14ResetReadStateEv+0x40>)
 8021b48:	4a05      	ldr	r2, [pc, #20]	; (8021b60 <_ZN13HeadInterface14ResetReadStateEv+0x44>)
 8021b4a:	f240 11bb 	movw	r1, #443	; 0x1bb
 8021b4e:	4805      	ldr	r0, [pc, #20]	; (8021b64 <_ZN13HeadInterface14ResetReadStateEv+0x48>)
 8021b50:	f01a f814 	bl	803bb7c <__assert_func>
	}
 8021b54:	bf00      	nop
 8021b56:	3708      	adds	r7, #8
 8021b58:	46bd      	mov	sp, r7
 8021b5a:	bd80      	pop	{r7, pc}
 8021b5c:	0803d114 	.word	0x0803d114
 8021b60:	0803d150 	.word	0x0803d150
 8021b64:	0803cdd0 	.word	0x0803cdd0

08021b68 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 8021b68:	b580      	push	{r7, lr}
 8021b6a:	b082      	sub	sp, #8
 8021b6c:	af00      	add	r7, sp, #0
 8021b6e:	6078      	str	r0, [r7, #4]
		return !Requests.Empty();
 8021b70:	687b      	ldr	r3, [r7, #4]
 8021b72:	4618      	mov	r0, r3
 8021b74:	f001 fd82 	bl	802367c <_ZNK10FixedQueueI7RequestLj10EE5EmptyEv>
 8021b78:	4603      	mov	r3, r0
 8021b7a:	f083 0301 	eor.w	r3, r3, #1
 8021b7e:	b2db      	uxtb	r3, r3
	}
 8021b80:	4618      	mov	r0, r3
 8021b82:	3708      	adds	r7, #8
 8021b84:	46bd      	mov	sp, r7
 8021b86:	bd80      	pop	{r7, pc}

08021b88 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 8021b88:	b590      	push	{r4, r7, lr}
 8021b8a:	b095      	sub	sp, #84	; 0x54
 8021b8c:	af00      	add	r7, sp, #0
 8021b8e:	6078      	str	r0, [r7, #4]
 8021b90:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 8021b92:	687b      	ldr	r3, [r7, #4]
 8021b94:	f893 3ca0 	ldrb.w	r3, [r3, #3232]	; 0xca0
 8021b98:	2b00      	cmp	r3, #0
 8021b9a:	d100      	bne.n	8021b9e <_ZN13HeadInterface4SendERK8Responce+0x16>
 8021b9c:	e7f9      	b.n	8021b92 <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		uint8_t *ptr = CurrentResponceBuffer.data();
 8021b9e:	687b      	ldr	r3, [r7, #4]
 8021ba0:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021ba4:	4618      	mov	r0, r3
 8021ba6:	f001 fcc7 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 8021baa:	64f8      	str	r0, [r7, #76]	; 0x4c

		*(ptr++) = SOM1Val;
 8021bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021bae:	1c5a      	adds	r2, r3, #1
 8021bb0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021bb2:	22ff      	movs	r2, #255	; 0xff
 8021bb4:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8021bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021bb8:	1c5a      	adds	r2, r3, #1
 8021bba:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021bbc:	22aa      	movs	r2, #170	; 0xaa
 8021bbe:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 8021bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021bc2:	1c5a      	adds	r2, r3, #1
 8021bc4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021bc6:	683a      	ldr	r2, [r7, #0]
 8021bc8:	f892 2104 	ldrb.w	r2, [r2, #260]	; 0x104
 8021bcc:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 8021bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021bd0:	1c5a      	adds	r2, r3, #1
 8021bd2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021bd4:	683a      	ldr	r2, [r7, #0]
 8021bd6:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8021bda:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 8021bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021bde:	1c5a      	adds	r2, r3, #1
 8021be0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021be2:	683a      	ldr	r2, [r7, #0]
 8021be4:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8021be8:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.ResponceSize);
 8021bea:	683b      	ldr	r3, [r7, #0]
 8021bec:	4618      	mov	r0, r3
 8021bee:	f001 fce3 	bl	80235b8 <_ZNKSt5arrayIhLj256EE4dataEv>
 8021bf2:	4601      	mov	r1, r0
 8021bf4:	683b      	ldr	r3, [r7, #0]
 8021bf6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021bfa:	461a      	mov	r2, r3
 8021bfc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8021bfe:	f01a f827 	bl	803bc50 <memcpy>

		ptr += responce.ResponceSize;
 8021c02:	683b      	ldr	r3, [r7, #0]
 8021c04:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021c0a:	4413      	add	r3, r2
 8021c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
		*ptr = SOM3Val;
 8021c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021c10:	22af      	movs	r2, #175	; 0xaf
 8021c12:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	2200      	movs	r2, #0
 8021c18:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0

		size_t sz = responce.ResponceSize + 3 + 3;
 8021c1c:	683b      	ldr	r3, [r7, #0]
 8021c1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021c22:	3306      	adds	r3, #6
 8021c24:	64bb      	str	r3, [r7, #72]	; 0x48
		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 8021c26:	687b      	ldr	r3, [r7, #4]
 8021c28:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021c2c:	4618      	mov	r0, r3
 8021c2e:	f001 fc83 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 8021c32:	4601      	mov	r1, r0
 8021c34:	f107 0308 	add.w	r3, r7, #8
 8021c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021c3a:	4618      	mov	r0, r3
 8021c3c:	f01a f808 	bl	803bc50 <memcpy>

		assert(
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	f8d3 4a84 	ldr.w	r4, [r3, #2692]	; 0xa84
 8021c46:	687b      	ldr	r3, [r7, #4]
 8021c48:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021c4c:	4618      	mov	r0, r3
 8021c4e:	f001 fc73 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 8021c52:	4601      	mov	r1, r0
 8021c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021c56:	b29b      	uxth	r3, r3
 8021c58:	461a      	mov	r2, r3
 8021c5a:	4620      	mov	r0, r4
 8021c5c:	f013 f962 	bl	8034f24 <HAL_UART_Transmit_IT>
 8021c60:	4603      	mov	r3, r0
 8021c62:	2b00      	cmp	r3, #0
 8021c64:	d006      	beq.n	8021c74 <_ZN13HeadInterface4SendERK8Responce+0xec>
 8021c66:	4b05      	ldr	r3, [pc, #20]	; (8021c7c <_ZN13HeadInterface4SendERK8Responce+0xf4>)
 8021c68:	4a05      	ldr	r2, [pc, #20]	; (8021c80 <_ZN13HeadInterface4SendERK8Responce+0xf8>)
 8021c6a:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8021c6e:	4805      	ldr	r0, [pc, #20]	; (8021c84 <_ZN13HeadInterface4SendERK8Responce+0xfc>)
 8021c70:	f019 ff84 	bl	803bb7c <__assert_func>
				HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(),
						sz) == HAL_OK);
	}
 8021c74:	bf00      	nop
 8021c76:	3754      	adds	r7, #84	; 0x54
 8021c78:	46bd      	mov	sp, r7
 8021c7a:	bd90      	pop	{r4, r7, pc}
 8021c7c:	0803d178 	.word	0x0803d178
 8021c80:	0803d1c8 	.word	0x0803d1c8
 8021c84:	0803cdd0 	.word	0x0803cdd0

08021c88 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 8021c88:	b580      	push	{r7, lr}
 8021c8a:	b082      	sub	sp, #8
 8021c8c:	af00      	add	r7, sp, #0
 8021c8e:	6078      	str	r0, [r7, #4]
 8021c90:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 8021c92:	6838      	ldr	r0, [r7, #0]
 8021c94:	f7ff ff68 	bl	8021b68 <_ZNK13HeadInterface10HasRequestEv>
 8021c98:	4603      	mov	r3, r0
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	d106      	bne.n	8021cac <_ZN13HeadInterface10GetRequestEv+0x24>
 8021c9e:	4b0e      	ldr	r3, [pc, #56]	; (8021cd8 <_ZN13HeadInterface10GetRequestEv+0x50>)
 8021ca0:	4a0e      	ldr	r2, [pc, #56]	; (8021cdc <_ZN13HeadInterface10GetRequestEv+0x54>)
 8021ca2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8021ca6:	480e      	ldr	r0, [pc, #56]	; (8021ce0 <_ZN13HeadInterface10GetRequestEv+0x58>)
 8021ca8:	f019 ff68 	bl	803bb7c <__assert_func>
		Request request = Requests.Front();
 8021cac:	683b      	ldr	r3, [r7, #0]
 8021cae:	4618      	mov	r0, r3
 8021cb0:	f001 fcf6 	bl	80236a0 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv>
 8021cb4:	4602      	mov	r2, r0
 8021cb6:	687b      	ldr	r3, [r7, #4]
 8021cb8:	4618      	mov	r0, r3
 8021cba:	4611      	mov	r1, r2
 8021cbc:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8021cc0:	461a      	mov	r2, r3
 8021cc2:	f019 ffc5 	bl	803bc50 <memcpy>
		Requests.Pop();
 8021cc6:	683b      	ldr	r3, [r7, #0]
 8021cc8:	4618      	mov	r0, r3
 8021cca:	f001 fd0b 	bl	80236e4 <_ZN10FixedQueueI7RequestLj10EE3PopEv>
		return request;
 8021cce:	bf00      	nop
	}
 8021cd0:	6878      	ldr	r0, [r7, #4]
 8021cd2:	3708      	adds	r7, #8
 8021cd4:	46bd      	mov	sp, r7
 8021cd6:	bd80      	pop	{r7, pc}
 8021cd8:	0803d1f4 	.word	0x0803d1f4
 8021cdc:	0803d204 	.word	0x0803d204
 8021ce0:	0803cdd0 	.word	0x0803cdd0

08021ce4 <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8021ce4:	b480      	push	{r7}
 8021ce6:	b083      	sub	sp, #12
 8021ce8:	af00      	add	r7, sp, #0
 8021cea:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021cec:	687b      	ldr	r3, [r7, #4]
 8021cee:	2201      	movs	r2, #1
 8021cf0:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
	}
 8021cf4:	bf00      	nop
 8021cf6:	370c      	adds	r7, #12
 8021cf8:	46bd      	mov	sp, r7
 8021cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cfe:	4770      	bx	lr

08021d00 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8021d00:	b590      	push	{r4, r7, lr}
 8021d02:	b085      	sub	sp, #20
 8021d04:	af00      	add	r7, sp, #0
 8021d06:	6078      	str	r0, [r7, #4]
		static size_t nRequests = 0;

		switch (CurrentState) {
 8021d08:	687b      	ldr	r3, [r7, #4]
 8021d0a:	f8d3 3a90 	ldr.w	r3, [r3, #2704]	; 0xa90
 8021d0e:	2b07      	cmp	r3, #7
 8021d10:	f200 80cc 	bhi.w	8021eac <_ZN13HeadInterface19ProcessRecievedDataEv+0x1ac>
 8021d14:	a201      	add	r2, pc, #4	; (adr r2, 8021d1c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c>)
 8021d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021d1a:	bf00      	nop
 8021d1c:	08021d3d 	.word	0x08021d3d
 8021d20:	08021d6d 	.word	0x08021d6d
 8021d24:	08021d9d 	.word	0x08021d9d
 8021d28:	08021dc7 	.word	0x08021dc7
 8021d2c:	08021df3 	.word	0x08021df3
 8021d30:	08021e1f 	.word	0x08021e1f
 8021d34:	08021e59 	.word	0x08021e59
 8021d38:	08021e77 	.word	0x08021e77
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 8021d3c:	687b      	ldr	r3, [r7, #4]
 8021d3e:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021d42:	2bff      	cmp	r3, #255	; 0xff
 8021d44:	d10e      	bne.n	8021d64 <_ZN13HeadInterface19ProcessRecievedDataEv+0x64>
				CurrentState = ReadState::SOM2;
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	2201      	movs	r2, #1
 8021d4a:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021d4e:	687b      	ldr	r3, [r7, #4]
 8021d50:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021d5a:	2201      	movs	r2, #1
 8021d5c:	4619      	mov	r1, r3
 8021d5e:	f013 f989 	bl	8035074 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021d62:	e0a7      	b.n	8021eb4 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
				ResetReadState();
 8021d64:	6878      	ldr	r0, [r7, #4]
 8021d66:	f7ff fed9 	bl	8021b1c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021d6a:	e0a3      	b.n	8021eb4 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021d72:	2baa      	cmp	r3, #170	; 0xaa
 8021d74:	d10e      	bne.n	8021d94 <_ZN13HeadInterface19ProcessRecievedDataEv+0x94>
				CurrentState = ReadState::PERIPHERY_ID;
 8021d76:	687b      	ldr	r3, [r7, #4]
 8021d78:	2202      	movs	r2, #2
 8021d7a:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021d7e:	687b      	ldr	r3, [r7, #4]
 8021d80:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021d84:	687b      	ldr	r3, [r7, #4]
 8021d86:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021d8a:	2201      	movs	r2, #1
 8021d8c:	4619      	mov	r1, r3
 8021d8e:	f013 f971 	bl	8035074 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021d92:	e08f      	b.n	8021eb4 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
				ResetReadState();
 8021d94:	6878      	ldr	r0, [r7, #4]
 8021d96:	f7ff fec1 	bl	8021b1c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021d9a:	e08b      	b.n	8021eb4 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8021d9c:	687b      	ldr	r3, [r7, #4]
 8021d9e:	f893 2a8c 	ldrb.w	r2, [r3, #2700]	; 0xa8c
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	f883 2b9d 	strb.w	r2, [r3, #2973]	; 0xb9d
			CurrentState = ReadState::REQUEST_SIZE;
 8021da8:	687b      	ldr	r3, [r7, #4]
 8021daa:	2203      	movs	r2, #3
 8021dac:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021db0:	687b      	ldr	r3, [r7, #4]
 8021db2:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021db6:	687b      	ldr	r3, [r7, #4]
 8021db8:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021dbc:	2201      	movs	r2, #1
 8021dbe:	4619      	mov	r1, r3
 8021dc0:	f013 f958 	bl	8035074 <HAL_UART_Receive_IT>
			break;
 8021dc4:	e076      	b.n	8021eb4 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::REQUEST_SIZE: {
			CurrentRequest.RequestSize = CurrentValue;
 8021dc6:	687b      	ldr	r3, [r7, #4]
 8021dc8:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021dcc:	461a      	mov	r2, r3
 8021dce:	687b      	ldr	r3, [r7, #4]
 8021dd0:	f8c3 2b94 	str.w	r2, [r3, #2964]	; 0xb94
			CurrentState = ReadState::RESPONCE_SIZE;
 8021dd4:	687b      	ldr	r3, [r7, #4]
 8021dd6:	2204      	movs	r2, #4
 8021dd8:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021ddc:	687b      	ldr	r3, [r7, #4]
 8021dde:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021de2:	687b      	ldr	r3, [r7, #4]
 8021de4:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021de8:	2201      	movs	r2, #1
 8021dea:	4619      	mov	r1, r3
 8021dec:	f013 f942 	bl	8035074 <HAL_UART_Receive_IT>
			break;
 8021df0:	e060      	b.n	8021eb4 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 8021df2:	687b      	ldr	r3, [r7, #4]
 8021df4:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021df8:	461a      	mov	r2, r3
 8021dfa:	687b      	ldr	r3, [r7, #4]
 8021dfc:	f8c3 2b98 	str.w	r2, [r3, #2968]	; 0xb98
			CurrentState = ReadState::META;
 8021e00:	687b      	ldr	r3, [r7, #4]
 8021e02:	2205      	movs	r2, #5
 8021e04:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021e08:	687b      	ldr	r3, [r7, #4]
 8021e0a:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021e0e:	687b      	ldr	r3, [r7, #4]
 8021e10:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021e14:	2201      	movs	r2, #1
 8021e16:	4619      	mov	r1, r3
 8021e18:	f013 f92c 	bl	8035074 <HAL_UART_Receive_IT>
			break;
 8021e1c:	e04a      	b.n	8021eb4 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 8021e1e:	687b      	ldr	r3, [r7, #4]
 8021e20:	f893 2a8c 	ldrb.w	r2, [r3, #2700]	; 0xa8c
 8021e24:	687b      	ldr	r3, [r7, #4]
 8021e26:	f883 2b9c 	strb.w	r2, [r3, #2972]	; 0xb9c
			CurrentState = ReadState::DATA;
 8021e2a:	687b      	ldr	r3, [r7, #4]
 8021e2c:	2206      	movs	r2, #6
 8021e2e:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8021e32:	687b      	ldr	r3, [r7, #4]
 8021e34:	f8d3 4a84 	ldr.w	r4, [r3, #2692]	; 0xa84
 8021e38:	687b      	ldr	r3, [r7, #4]
 8021e3a:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8021e3e:	4618      	mov	r0, r3
 8021e40:	f001 fb7a 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 8021e44:	4601      	mov	r1, r0
					CurrentRequest.RequestSize);
 8021e46:	687b      	ldr	r3, [r7, #4]
 8021e48:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8021e4c:	b29b      	uxth	r3, r3
 8021e4e:	461a      	mov	r2, r3
 8021e50:	4620      	mov	r0, r4
 8021e52:	f013 f90f 	bl	8035074 <HAL_UART_Receive_IT>
			break;
 8021e56:	e02d      	b.n	8021eb4 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 8021e58:	687b      	ldr	r3, [r7, #4]
 8021e5a:	2207      	movs	r2, #7
 8021e5c:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021e66:	687b      	ldr	r3, [r7, #4]
 8021e68:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021e6c:	2201      	movs	r2, #1
 8021e6e:	4619      	mov	r1, r3
 8021e70:	f013 f900 	bl	8035074 <HAL_UART_Receive_IT>
			break;
 8021e74:	e01e      	b.n	8021eb4 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021e7c:	2baf      	cmp	r3, #175	; 0xaf
 8021e7e:	d111      	bne.n	8021ea4 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1a4>
				size_t sz = Requests.GetSize();
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	4618      	mov	r0, r3
 8021e84:	f001 fc5c 	bl	8023740 <_ZNK10FixedQueueI7RequestLj10EE7GetSizeEv>
 8021e88:	60f8      	str	r0, [r7, #12]
				Requests.Push(CurrentRequest);
 8021e8a:	687a      	ldr	r2, [r7, #4]
 8021e8c:	687b      	ldr	r3, [r7, #4]
 8021e8e:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8021e92:	4619      	mov	r1, r3
 8021e94:	4610      	mov	r0, r2
 8021e96:	f001 fc5f 	bl	8023758 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_>
				nRequests++;
 8021e9a:	4b08      	ldr	r3, [pc, #32]	; (8021ebc <_ZN13HeadInterface19ProcessRecievedDataEv+0x1bc>)
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	3301      	adds	r3, #1
 8021ea0:	4a06      	ldr	r2, [pc, #24]	; (8021ebc <_ZN13HeadInterface19ProcessRecievedDataEv+0x1bc>)
 8021ea2:	6013      	str	r3, [r2, #0]
				//CurrentRequest = { };
			}
			ResetReadState();
 8021ea4:	6878      	ldr	r0, [r7, #4]
 8021ea6:	f7ff fe39 	bl	8021b1c <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021eaa:	e003      	b.n	8021eb4 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		default:
			ResetReadState();
 8021eac:	6878      	ldr	r0, [r7, #4]
 8021eae:	f7ff fe35 	bl	8021b1c <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 8021eb2:	bf00      	nop
 8021eb4:	bf00      	nop
 8021eb6:	3714      	adds	r7, #20
 8021eb8:	46bd      	mov	sp, r7
 8021eba:	bd90      	pop	{r4, r7, pc}
 8021ebc:	240001cc 	.word	0x240001cc

08021ec0 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>:
		uint16_t NumAv;
		uint16_t MaxFrames;

		static constexpr size_t Size = 3 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8021ec0:	b580      	push	{r7, lr}
 8021ec2:	b082      	sub	sp, #8
 8021ec4:	af00      	add	r7, sp, #0
 8021ec6:	6078      	str	r0, [r7, #4]
 8021ec8:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8021eca:	683b      	ldr	r3, [r7, #0]
 8021ecc:	2b00      	cmp	r3, #0
 8021ece:	d106      	bne.n	8021ede <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x1e>
 8021ed0:	4b19      	ldr	r3, [pc, #100]	; (8021f38 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x78>)
 8021ed2:	4a1a      	ldr	r2, [pc, #104]	; (8021f3c <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8021ed4:	f240 213e 	movw	r1, #574	; 0x23e
 8021ed8:	4819      	ldr	r0, [pc, #100]	; (8021f40 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8021eda:	f019 fe4f 	bl	803bb7c <__assert_func>
			assert(*ptr);
 8021ede:	683b      	ldr	r3, [r7, #0]
 8021ee0:	681b      	ldr	r3, [r3, #0]
 8021ee2:	2b00      	cmp	r3, #0
 8021ee4:	d106      	bne.n	8021ef4 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x34>
 8021ee6:	4b17      	ldr	r3, [pc, #92]	; (8021f44 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x84>)
 8021ee8:	4a14      	ldr	r2, [pc, #80]	; (8021f3c <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8021eea:	f240 213f 	movw	r1, #575	; 0x23f
 8021eee:	4814      	ldr	r0, [pc, #80]	; (8021f40 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8021ef0:	f019 fe44 	bl	803bb7c <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = First;
 8021ef4:	683b      	ldr	r3, [r7, #0]
 8021ef6:	681b      	ldr	r3, [r3, #0]
 8021ef8:	687a      	ldr	r2, [r7, #4]
 8021efa:	8812      	ldrh	r2, [r2, #0]
 8021efc:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021efe:	683b      	ldr	r3, [r7, #0]
 8021f00:	681b      	ldr	r3, [r3, #0]
 8021f02:	1c9a      	adds	r2, r3, #2
 8021f04:	683b      	ldr	r3, [r7, #0]
 8021f06:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 8021f08:	683b      	ldr	r3, [r7, #0]
 8021f0a:	681b      	ldr	r3, [r3, #0]
 8021f0c:	687a      	ldr	r2, [r7, #4]
 8021f0e:	8852      	ldrh	r2, [r2, #2]
 8021f10:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021f12:	683b      	ldr	r3, [r7, #0]
 8021f14:	681b      	ldr	r3, [r3, #0]
 8021f16:	1c9a      	adds	r2, r3, #2
 8021f18:	683b      	ldr	r3, [r7, #0]
 8021f1a:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 8021f1c:	683b      	ldr	r3, [r7, #0]
 8021f1e:	681b      	ldr	r3, [r3, #0]
 8021f20:	687a      	ldr	r2, [r7, #4]
 8021f22:	8892      	ldrh	r2, [r2, #4]
 8021f24:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021f26:	683b      	ldr	r3, [r7, #0]
 8021f28:	681b      	ldr	r3, [r3, #0]
 8021f2a:	1c9a      	adds	r2, r3, #2
 8021f2c:	683b      	ldr	r3, [r7, #0]
 8021f2e:	601a      	str	r2, [r3, #0]
		}
 8021f30:	bf00      	nop
 8021f32:	3708      	adds	r7, #8
 8021f34:	46bd      	mov	sp, r7
 8021f36:	bd80      	pop	{r7, pc}
 8021f38:	0803cd9c 	.word	0x0803cd9c
 8021f3c:	0803d228 	.word	0x0803d228
 8021f40:	0803cdd0 	.word	0x0803cdd0
 8021f44:	0803cdec 	.word	0x0803cdec

08021f48 <_ZN17IMUFrameContainer5ResetEv>:
	};

public:
	void Reset() {
 8021f48:	b580      	push	{r7, lr}
 8021f4a:	b084      	sub	sp, #16
 8021f4c:	af00      	add	r7, sp, #0
 8021f4e:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 8021f50:	6878      	ldr	r0, [r7, #4]
 8021f52:	2300      	movs	r3, #0
 8021f54:	60bb      	str	r3, [r7, #8]
 8021f56:	2300      	movs	r3, #0
 8021f58:	60fb      	str	r3, [r7, #12]
 8021f5a:	f107 0308 	add.w	r3, r7, #8
 8021f5e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8021f62:	f001 fc3b 	bl	80237dc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>
		FirstSeq = 0;
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	2200      	movs	r2, #0
 8021f6a:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8021f6c:	bf00      	nop
 8021f6e:	3710      	adds	r7, #16
 8021f70:	46bd      	mov	sp, r7
 8021f72:	bd80      	pop	{r7, pc}

08021f74 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 8021f74:	b580      	push	{r7, lr}
 8021f76:	b082      	sub	sp, #8
 8021f78:	af00      	add	r7, sp, #0
 8021f7a:	6078      	str	r0, [r7, #4]
 8021f7c:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	6839      	ldr	r1, [r7, #0]
 8021f82:	4618      	mov	r0, r3
 8021f84:	f001 fc45 	bl	8023812 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>
		if (FrameQueue.size() > MaxFrames)
 8021f88:	687b      	ldr	r3, [r7, #4]
 8021f8a:	4618      	mov	r0, r3
 8021f8c:	f001 fc63 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021f90:	4602      	mov	r2, r0
 8021f92:	687b      	ldr	r3, [r7, #4]
 8021f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f96:	429a      	cmp	r2, r3
 8021f98:	bf8c      	ite	hi
 8021f9a:	2301      	movhi	r3, #1
 8021f9c:	2300      	movls	r3, #0
 8021f9e:	b2db      	uxtb	r3, r3
 8021fa0:	2b00      	cmp	r3, #0
 8021fa2:	d002      	beq.n	8021faa <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE+0x36>
			Remove();
 8021fa4:	6878      	ldr	r0, [r7, #4]
 8021fa6:	f000 f804 	bl	8021fb2 <_ZN17IMUFrameContainer6RemoveEv>
	}
 8021faa:	bf00      	nop
 8021fac:	3708      	adds	r7, #8
 8021fae:	46bd      	mov	sp, r7
 8021fb0:	bd80      	pop	{r7, pc}

08021fb2 <_ZN17IMUFrameContainer6RemoveEv>:

	void Remove() {
 8021fb2:	b580      	push	{r7, lr}
 8021fb4:	b082      	sub	sp, #8
 8021fb6:	af00      	add	r7, sp, #0
 8021fb8:	6078      	str	r0, [r7, #4]
		FrameQueue.pop_back();
 8021fba:	687b      	ldr	r3, [r7, #4]
 8021fbc:	4618      	mov	r0, r3
 8021fbe:	f001 fc5c 	bl	802387a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
		FirstSeq++;
 8021fc2:	687b      	ldr	r3, [r7, #4]
 8021fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021fc6:	1c5a      	adds	r2, r3, #1
 8021fc8:	687b      	ldr	r3, [r7, #4]
 8021fca:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8021fcc:	bf00      	nop
 8021fce:	3708      	adds	r7, #8
 8021fd0:	46bd      	mov	sp, r7
 8021fd2:	bd80      	pop	{r7, pc}

08021fd4 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 8021fd4:	b5b0      	push	{r4, r5, r7, lr}
 8021fd6:	b08a      	sub	sp, #40	; 0x28
 8021fd8:	af00      	add	r7, sp, #0
 8021fda:	60f8      	str	r0, [r7, #12]
 8021fdc:	60b9      	str	r1, [r7, #8]
 8021fde:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8021fe0:	68fb      	ldr	r3, [r7, #12]
 8021fe2:	4618      	mov	r0, r3
 8021fe4:	f001 fc6c 	bl	80238c0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8021fe8:	4603      	mov	r3, r0
 8021fea:	2b00      	cmp	r3, #0
 8021fec:	d001      	beq.n	8021ff2 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 8021fee:	2300      	movs	r3, #0
 8021ff0:	e038      	b.n	8022064 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 8021ff2:	68fb      	ldr	r3, [r7, #12]
 8021ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021ff6:	68ba      	ldr	r2, [r7, #8]
 8021ff8:	429a      	cmp	r2, r3
 8021ffa:	d30b      	bcc.n	8022014 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 8021ffc:	68fb      	ldr	r3, [r7, #12]
 8021ffe:	4618      	mov	r0, r3
 8022000:	f001 fc29 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022004:	4602      	mov	r2, r0
 8022006:	68fb      	ldr	r3, [r7, #12]
 8022008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802200a:	4413      	add	r3, r2
 802200c:	3b01      	subs	r3, #1
 802200e:	68ba      	ldr	r2, [r7, #8]
 8022010:	429a      	cmp	r2, r3
 8022012:	d901      	bls.n	8022018 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 8022014:	2301      	movs	r3, #1
 8022016:	e000      	b.n	802201a <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 8022018:	2300      	movs	r3, #0
 802201a:	2b00      	cmp	r3, #0
 802201c:	d001      	beq.n	8022022 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 802201e:	2300      	movs	r3, #0
 8022020:	e020      	b.n	8022064 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 8022022:	68fc      	ldr	r4, [r7, #12]
 8022024:	68fb      	ldr	r3, [r7, #12]
 8022026:	4618      	mov	r0, r3
 8022028:	f001 fc15 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 802202c:	4601      	mov	r1, r0
 802202e:	68fb      	ldr	r3, [r7, #12]
 8022030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022032:	68bb      	ldr	r3, [r7, #8]
 8022034:	1ad3      	subs	r3, r2, r3
 8022036:	440b      	add	r3, r1
 8022038:	3b01      	subs	r3, #1
 802203a:	4619      	mov	r1, r3
 802203c:	4620      	mov	r0, r4
 802203e:	f001 fc51 	bl	80238e4 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8022042:	4603      	mov	r3, r0
 8022044:	f107 0414 	add.w	r4, r7, #20
 8022048:	461d      	mov	r5, r3
 802204a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802204c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802204e:	682b      	ldr	r3, [r5, #0]
 8022050:	6023      	str	r3, [r4, #0]
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 8022052:	687b      	ldr	r3, [r7, #4]
 8022054:	461d      	mov	r5, r3
 8022056:	f107 0414 	add.w	r4, r7, #20
 802205a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802205c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802205e:	6823      	ldr	r3, [r4, #0]
 8022060:	602b      	str	r3, [r5, #0]
		return true;
 8022062:	2301      	movs	r3, #1
	}
 8022064:	4618      	mov	r0, r3
 8022066:	3728      	adds	r7, #40	; 0x28
 8022068:	46bd      	mov	sp, r7
 802206a:	bdb0      	pop	{r4, r5, r7, pc}

0802206c <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 802206c:	b580      	push	{r7, lr}
 802206e:	b082      	sub	sp, #8
 8022070:	af00      	add	r7, sp, #0
 8022072:	6078      	str	r0, [r7, #4]
 8022074:	6039      	str	r1, [r7, #0]
		return {FirstSeq, FrameQueue.size(), MaxFrames};
 8022076:	683b      	ldr	r3, [r7, #0]
 8022078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802207a:	b29a      	uxth	r2, r3
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	801a      	strh	r2, [r3, #0]
 8022080:	683b      	ldr	r3, [r7, #0]
 8022082:	4618      	mov	r0, r3
 8022084:	f001 fbe7 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022088:	4603      	mov	r3, r0
 802208a:	b29a      	uxth	r2, r3
 802208c:	687b      	ldr	r3, [r7, #4]
 802208e:	805a      	strh	r2, [r3, #2]
 8022090:	683b      	ldr	r3, [r7, #0]
 8022092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022094:	b29a      	uxth	r2, r3
 8022096:	687b      	ldr	r3, [r7, #4]
 8022098:	809a      	strh	r2, [r3, #4]
	}
 802209a:	6878      	ldr	r0, [r7, #4]
 802209c:	3708      	adds	r7, #8
 802209e:	46bd      	mov	sp, r7
 80220a0:	bd80      	pop	{r7, pc}

080220a2 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>:

	std::queue<size_t> StrobeQueue;
	size_t CurrentSeq = 0;

public:
	void ProcessStrobe(const BHYWrapper &IMU) {
 80220a2:	b580      	push	{r7, lr}
 80220a4:	b086      	sub	sp, #24
 80220a6:	af00      	add	r7, sp, #0
 80220a8:	6078      	str	r0, [r7, #4]
 80220aa:	6039      	str	r1, [r7, #0]
		uint32_t currentTime = HAL_GetTick();
 80220ac:	f008 fcec 	bl	802aa88 <HAL_GetTick>
 80220b0:	6178      	str	r0, [r7, #20]

		switch (State) {
 80220b2:	687b      	ldr	r3, [r7, #4]
 80220b4:	689b      	ldr	r3, [r3, #8]
 80220b6:	2b00      	cmp	r3, #0
 80220b8:	d04e      	beq.n	8022158 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xb6>
 80220ba:	2b01      	cmp	r3, #1
 80220bc:	d154      	bne.n	8022168 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		case PulseState::Down: {
			State = PulseState::Up;
 80220be:	687b      	ldr	r3, [r7, #4]
 80220c0:	2200      	movs	r2, #0
 80220c2:	609a      	str	r2, [r3, #8]

			uint32_t startTime = RiseTime;
 80220c4:	687b      	ldr	r3, [r7, #4]
 80220c6:	685b      	ldr	r3, [r3, #4]
 80220c8:	613b      	str	r3, [r7, #16]
			RiseTime = currentTime;
 80220ca:	687b      	ldr	r3, [r7, #4]
 80220cc:	697a      	ldr	r2, [r7, #20]
 80220ce:	605a      	str	r2, [r3, #4]

			if (!FallTime || !RiseTime)
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	681b      	ldr	r3, [r3, #0]
 80220d4:	2b00      	cmp	r3, #0
 80220d6:	d046      	beq.n	8022166 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	685b      	ldr	r3, [r3, #4]
 80220dc:	2b00      	cmp	r3, #0
 80220de:	d042      	beq.n	8022166 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
				return;

			uint32_t duration = currentTime - startTime;
 80220e0:	697a      	ldr	r2, [r7, #20]
 80220e2:	693b      	ldr	r3, [r7, #16]
 80220e4:	1ad3      	subs	r3, r2, r3
 80220e6:	60fb      	str	r3, [r7, #12]

			StrobeDuration += duration;
 80220e8:	687b      	ldr	r3, [r7, #4]
 80220ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80220ee:	68fb      	ldr	r3, [r7, #12]
 80220f0:	ee07 3a90 	vmov	s15, r3
 80220f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80220f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	edc3 7a05 	vstr	s15, [r3, #20]
			StrobeDuration /= 2;
 8022102:	687b      	ldr	r3, [r7, #4]
 8022104:	ed93 7a05 	vldr	s14, [r3, #20]
 8022108:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 802210c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8022110:	687b      	ldr	r3, [r7, #4]
 8022112:	edc3 7a05 	vstr	s15, [r3, #20]

			if (std::abs(long(duration - TargetDuration))
 8022116:	687b      	ldr	r3, [r7, #4]
 8022118:	691b      	ldr	r3, [r3, #16]
 802211a:	68fa      	ldr	r2, [r7, #12]
 802211c:	1ad3      	subs	r3, r2, r3
 802211e:	4618      	mov	r0, r3
 8022120:	f7fe feb8 	bl	8020e94 <_ZSt3absl>
 8022124:	4602      	mov	r2, r0
					< long(DurationThreshold))
 8022126:	687b      	ldr	r3, [r7, #4]
 8022128:	68db      	ldr	r3, [r3, #12]
 802212a:	429a      	cmp	r2, r3
 802212c:	bfb4      	ite	lt
 802212e:	2301      	movlt	r3, #1
 8022130:	2300      	movge	r3, #0
 8022132:	b2db      	uxtb	r3, r3
			if (std::abs(long(duration - TargetDuration))
 8022134:	2b00      	cmp	r3, #0
 8022136:	d008      	beq.n	802214a <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xa8>
				StrobeQueue.push(CurrentSeq);
 8022138:	687b      	ldr	r3, [r7, #4]
 802213a:	f103 0218 	add.w	r2, r3, #24
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	3340      	adds	r3, #64	; 0x40
 8022142:	4619      	mov	r1, r3
 8022144:	4610      	mov	r0, r2
 8022146:	f001 fbde 	bl	8023906 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>

			CurrentSeq = IMU.GetSeq();
 802214a:	6838      	ldr	r0, [r7, #0]
 802214c:	f7fe fd62 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 8022150:	4602      	mov	r2, r0
 8022152:	687b      	ldr	r3, [r7, #4]
 8022154:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8022156:	e007      	b.n	8022168 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		}
		case PulseState::Up:
			State = PulseState::Down;
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	2201      	movs	r2, #1
 802215c:	609a      	str	r2, [r3, #8]
			FallTime = currentTime;
 802215e:	687b      	ldr	r3, [r7, #4]
 8022160:	697a      	ldr	r2, [r7, #20]
 8022162:	601a      	str	r2, [r3, #0]
			break;
 8022164:	e000      	b.n	8022168 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
				return;
 8022166:	bf00      	nop
		}
	}
 8022168:	3718      	adds	r7, #24
 802216a:	46bd      	mov	sp, r7
 802216c:	bd80      	pop	{r7, pc}

0802216e <_ZN20StrobeDurationFilter9ConfigureEhh>:

	void Configure(uint8_t targetDuration, uint8_t durationThreshold) {
 802216e:	b480      	push	{r7}
 8022170:	b083      	sub	sp, #12
 8022172:	af00      	add	r7, sp, #0
 8022174:	6078      	str	r0, [r7, #4]
 8022176:	460b      	mov	r3, r1
 8022178:	70fb      	strb	r3, [r7, #3]
 802217a:	4613      	mov	r3, r2
 802217c:	70bb      	strb	r3, [r7, #2]
		TargetDuration = targetDuration;
 802217e:	78fa      	ldrb	r2, [r7, #3]
 8022180:	687b      	ldr	r3, [r7, #4]
 8022182:	611a      	str	r2, [r3, #16]
		DurationThreshold = durationThreshold;
 8022184:	78ba      	ldrb	r2, [r7, #2]
 8022186:	687b      	ldr	r3, [r7, #4]
 8022188:	60da      	str	r2, [r3, #12]
	}
 802218a:	bf00      	nop
 802218c:	370c      	adds	r7, #12
 802218e:	46bd      	mov	sp, r7
 8022190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022194:	4770      	bx	lr

08022196 <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>:

	float GetStrobeDuration() const {
 8022196:	b480      	push	{r7}
 8022198:	b083      	sub	sp, #12
 802219a:	af00      	add	r7, sp, #0
 802219c:	6078      	str	r0, [r7, #4]
		return StrobeDuration;
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	695b      	ldr	r3, [r3, #20]
 80221a2:	ee07 3a90 	vmov	s15, r3
	}
 80221a6:	eeb0 0a67 	vmov.f32	s0, s15
 80221aa:	370c      	adds	r7, #12
 80221ac:	46bd      	mov	sp, r7
 80221ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221b2:	4770      	bx	lr

080221b4 <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>:

	void ResetStrobeDuration() {
 80221b4:	b480      	push	{r7}
 80221b6:	b083      	sub	sp, #12
 80221b8:	af00      	add	r7, sp, #0
 80221ba:	6078      	str	r0, [r7, #4]
		StrobeDuration = 1;
 80221bc:	687b      	ldr	r3, [r7, #4]
 80221be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80221c2:	615a      	str	r2, [r3, #20]
	}
 80221c4:	bf00      	nop
 80221c6:	370c      	adds	r7, #12
 80221c8:	46bd      	mov	sp, r7
 80221ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221ce:	4770      	bx	lr

080221d0 <_ZNK20StrobeDurationFilter9GetStrobeEv>:

	size_t GetStrobe() const {
 80221d0:	b580      	push	{r7, lr}
 80221d2:	b082      	sub	sp, #8
 80221d4:	af00      	add	r7, sp, #0
 80221d6:	6078      	str	r0, [r7, #4]
		assert(HasStrobe());
 80221d8:	6878      	ldr	r0, [r7, #4]
 80221da:	f000 f81b 	bl	8022214 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 80221de:	4603      	mov	r3, r0
 80221e0:	2b00      	cmp	r3, #0
 80221e2:	d106      	bne.n	80221f2 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x22>
 80221e4:	4b08      	ldr	r3, [pc, #32]	; (8022208 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x38>)
 80221e6:	4a09      	ldr	r2, [pc, #36]	; (802220c <_ZNK20StrobeDurationFilter9GetStrobeEv+0x3c>)
 80221e8:	f240 21b7 	movw	r1, #695	; 0x2b7
 80221ec:	4808      	ldr	r0, [pc, #32]	; (8022210 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x40>)
 80221ee:	f019 fcc5 	bl	803bb7c <__assert_func>
		return StrobeQueue.front();
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	3318      	adds	r3, #24
 80221f6:	4618      	mov	r0, r3
 80221f8:	f001 fb93 	bl	8023922 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>
 80221fc:	4603      	mov	r3, r0
 80221fe:	681b      	ldr	r3, [r3, #0]
	}
 8022200:	4618      	mov	r0, r3
 8022202:	3708      	adds	r7, #8
 8022204:	46bd      	mov	sp, r7
 8022206:	bd80      	pop	{r7, pc}
 8022208:	0803d260 	.word	0x0803d260
 802220c:	0803d26c 	.word	0x0803d26c
 8022210:	0803cdd0 	.word	0x0803cdd0

08022214 <_ZNK20StrobeDurationFilter9HasStrobeEv>:

	bool HasStrobe() const {
 8022214:	b580      	push	{r7, lr}
 8022216:	b082      	sub	sp, #8
 8022218:	af00      	add	r7, sp, #0
 802221a:	6078      	str	r0, [r7, #4]
		return !StrobeQueue.empty();
 802221c:	687b      	ldr	r3, [r7, #4]
 802221e:	3318      	adds	r3, #24
 8022220:	4618      	mov	r0, r3
 8022222:	f001 fb8b 	bl	802393c <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>
 8022226:	4603      	mov	r3, r0
 8022228:	f083 0301 	eor.w	r3, r3, #1
 802222c:	b2db      	uxtb	r3, r3
	}
 802222e:	4618      	mov	r0, r3
 8022230:	3708      	adds	r7, #8
 8022232:	46bd      	mov	sp, r7
 8022234:	bd80      	pop	{r7, pc}

08022236 <_ZN20StrobeDurationFilter9PopStrobeEv>:

	void PopStrobe() {
 8022236:	b580      	push	{r7, lr}
 8022238:	b082      	sub	sp, #8
 802223a:	af00      	add	r7, sp, #0
 802223c:	6078      	str	r0, [r7, #4]
		StrobeQueue.pop();
 802223e:	687b      	ldr	r3, [r7, #4]
 8022240:	3318      	adds	r3, #24
 8022242:	4618      	mov	r0, r3
 8022244:	f001 fb87 	bl	8023956 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>
	}
 8022248:	bf00      	nop
 802224a:	3708      	adds	r7, #8
 802224c:	46bd      	mov	sp, r7
 802224e:	bd80      	pop	{r7, pc}

08022250 <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type Reset = 3;
		static constexpr Type SetOffset = 4;
		static constexpr Type StrobeWidth = 5;
		static constexpr Type ConfigureFilter = 6;

		static uint8_t Serialize(Type mode) {
 8022250:	b480      	push	{r7}
 8022252:	b083      	sub	sp, #12
 8022254:	af00      	add	r7, sp, #0
 8022256:	4603      	mov	r3, r0
 8022258:	71fb      	strb	r3, [r7, #7]
			return mode;
 802225a:	79fb      	ldrb	r3, [r7, #7]
		}
 802225c:	4618      	mov	r0, r3
 802225e:	370c      	adds	r7, #12
 8022260:	46bd      	mov	sp, r7
 8022262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022266:	4770      	bx	lr

08022268 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 8022268:	b480      	push	{r7}
 802226a:	b083      	sub	sp, #12
 802226c:	af00      	add	r7, sp, #0
 802226e:	4603      	mov	r3, r0
 8022270:	71fb      	strb	r3, [r7, #7]
			return meta;
 8022272:	79fb      	ldrb	r3, [r7, #7]
		}
 8022274:	4618      	mov	r0, r3
 8022276:	370c      	adds	r7, #12
 8022278:	46bd      	mov	sp, r7
 802227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802227e:	4770      	bx	lr

08022280 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type BadRequest = 3;
		static constexpr Type BadOffset = 4;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 8022280:	b580      	push	{r7, lr}
 8022282:	b08c      	sub	sp, #48	; 0x30
 8022284:	af00      	add	r7, sp, #0
 8022286:	60f8      	str	r0, [r7, #12]
 8022288:	60b9      	str	r1, [r7, #8]
 802228a:	607a      	str	r2, [r7, #4]
 802228c:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 802228e:	687b      	ldr	r3, [r7, #4]
 8022290:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022294:	4618      	mov	r0, r3
 8022296:	f7ff ffe7 	bl	8022268 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802229a:	4603      	mov	r3, r0
 802229c:	2b00      	cmp	r3, #0
 802229e:	d006      	beq.n	80222ae <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2e>
 80222a0:	4b28      	ldr	r3, [pc, #160]	; (8022344 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc4>)
 80222a2:	4a29      	ldr	r2, [pc, #164]	; (8022348 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc8>)
 80222a4:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 80222a8:	4828      	ldr	r0, [pc, #160]	; (802234c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xcc>)
 80222aa:	f019 fc67 	bl	803bb7c <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80222ae:	68fb      	ldr	r3, [r7, #12]
 80222b0:	2201      	movs	r2, #1
 80222b2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 80222b6:	2000      	movs	r0, #0
 80222b8:	f7ff ffca 	bl	8022250 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80222bc:	4603      	mov	r3, r0
 80222be:	461a      	mov	r2, r3
 80222c0:	68fb      	ldr	r3, [r7, #12]
 80222c2:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = BHYWrapper::BHYFrame::Size;
 80222c6:	68fb      	ldr	r3, [r7, #12]
 80222c8:	2211      	movs	r2, #17
 80222ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 2) {
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80222d4:	2b02      	cmp	r3, #2
 80222d6:	d004      	beq.n	80222e2 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80222d8:	68fb      	ldr	r3, [r7, #12]
 80222da:	2203      	movs	r2, #3
 80222dc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80222e0:	e02c      	b.n	802233c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xbc>
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 80222e2:	687b      	ldr	r3, [r7, #4]
 80222e4:	4618      	mov	r0, r3
 80222e6:	f001 f967 	bl	80235b8 <_ZNKSt5arrayIhLj256EE4dataEv>
 80222ea:	4603      	mov	r3, r0
 80222ec:	881b      	ldrh	r3, [r3, #0]
 80222ee:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 80222f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80222f2:	f107 0218 	add.w	r2, r7, #24
 80222f6:	4619      	mov	r1, r3
 80222f8:	6838      	ldr	r0, [r7, #0]
 80222fa:	f7ff fe6b 	bl	8021fd4 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 80222fe:	4603      	mov	r3, r0
 8022300:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 8022304:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8022308:	f083 0301 	eor.w	r3, r3, #1
 802230c:	b2db      	uxtb	r3, r3
 802230e:	2b00      	cmp	r3, #0
 8022310:	d004      	beq.n	802231c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x9c>
			responce.Error = ErrorCodes::FrameUnavailable;
 8022312:	68fb      	ldr	r3, [r7, #12]
 8022314:	2201      	movs	r2, #1
 8022316:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 802231a:	e00f      	b.n	802233c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xbc>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 802231c:	68f8      	ldr	r0, [r7, #12]
 802231e:	f001 f90b 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 8022322:	4601      	mov	r1, r0
 8022324:	f107 0217 	add.w	r2, r7, #23
 8022328:	f107 0318 	add.w	r3, r7, #24
 802232c:	4618      	mov	r0, r3
 802232e:	f7fe fc13 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 8022332:	68fb      	ldr	r3, [r7, #12]
 8022334:	2200      	movs	r2, #0
 8022336:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 802233a:	bf00      	nop
	}
 802233c:	68f8      	ldr	r0, [r7, #12]
 802233e:	3730      	adds	r7, #48	; 0x30
 8022340:	46bd      	mov	sp, r7
 8022342:	bd80      	pop	{r7, pc}
 8022344:	0803d29c 	.word	0x0803d29c
 8022348:	0803d2e4 	.word	0x0803d2e4
 802234c:	0803cdd0 	.word	0x0803cdd0

08022350 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 8022350:	b580      	push	{r7, lr}
 8022352:	b088      	sub	sp, #32
 8022354:	af00      	add	r7, sp, #0
 8022356:	60f8      	str	r0, [r7, #12]
 8022358:	60b9      	str	r1, [r7, #8]
 802235a:	607a      	str	r2, [r7, #4]
 802235c:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 802235e:	687b      	ldr	r3, [r7, #4]
 8022360:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022364:	4618      	mov	r0, r3
 8022366:	f7ff ff7f 	bl	8022268 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802236a:	4603      	mov	r3, r0
 802236c:	2b01      	cmp	r3, #1
 802236e:	d006      	beq.n	802237e <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2e>
 8022370:	4b1e      	ldr	r3, [pc, #120]	; (80223ec <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x9c>)
 8022372:	4a1f      	ldr	r2, [pc, #124]	; (80223f0 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa0>)
 8022374:	f240 3106 	movw	r1, #774	; 0x306
 8022378:	481e      	ldr	r0, [pc, #120]	; (80223f4 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa4>)
 802237a:	f019 fbff 	bl	803bb7c <__assert_func>

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 802237e:	68fb      	ldr	r3, [r7, #12]
 8022380:	2201      	movs	r2, #1
 8022382:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 8022386:	2001      	movs	r0, #1
 8022388:	f7ff ff62 	bl	8022250 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 802238c:	4603      	mov	r3, r0
 802238e:	461a      	mov	r2, r3
 8022390:	68fb      	ldr	r3, [r7, #12]
 8022392:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = IMUFrameContainer::Info::Size;
 8022396:	68fb      	ldr	r3, [r7, #12]
 8022398:	2206      	movs	r2, #6
 802239a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 802239e:	687b      	ldr	r3, [r7, #4]
 80223a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80223a4:	2b01      	cmp	r3, #1
 80223a6:	d004      	beq.n	80223b2 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80223a8:	68fb      	ldr	r3, [r7, #12]
 80223aa:	2203      	movs	r2, #3
 80223ac:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80223b0:	e017      	b.n	80223e2 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x92>
		}

		uint8_t *ptr = responce.Data.data();
 80223b2:	68f8      	ldr	r0, [r7, #12]
 80223b4:	f001 f8c0 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 80223b8:	4603      	mov	r3, r0
 80223ba:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 80223bc:	f107 0314 	add.w	r3, r7, #20
 80223c0:	6839      	ldr	r1, [r7, #0]
 80223c2:	4618      	mov	r0, r3
 80223c4:	f7ff fe52 	bl	802206c <_ZNK17IMUFrameContainer7GetInfoEv>

		info.SerializeTo(&ptr);
 80223c8:	f107 021c 	add.w	r2, r7, #28
 80223cc:	f107 0314 	add.w	r3, r7, #20
 80223d0:	4611      	mov	r1, r2
 80223d2:	4618      	mov	r0, r3
 80223d4:	f7ff fd74 	bl	8021ec0 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>

		responce.Error = ErrorCodes::Success;
 80223d8:	68fb      	ldr	r3, [r7, #12]
 80223da:	2200      	movs	r2, #0
 80223dc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80223e0:	bf00      	nop
	}
 80223e2:	68f8      	ldr	r0, [r7, #12]
 80223e4:	3720      	adds	r7, #32
 80223e6:	46bd      	mov	sp, r7
 80223e8:	bd80      	pop	{r7, pc}
 80223ea:	bf00      	nop
 80223ec:	0803d338 	.word	0x0803d338
 80223f0:	0803d378 	.word	0x0803d378
 80223f4:	0803cdd0 	.word	0x0803cdd0

080223f8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 80223f8:	b580      	push	{r7, lr}
 80223fa:	b08a      	sub	sp, #40	; 0x28
 80223fc:	af00      	add	r7, sp, #0
 80223fe:	60f8      	str	r0, [r7, #12]
 8022400:	60b9      	str	r1, [r7, #8]
 8022402:	607a      	str	r2, [r7, #4]
 8022404:	603b      	str	r3, [r7, #0]
		assert(
 8022406:	687b      	ldr	r3, [r7, #4]
 8022408:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 802240c:	4618      	mov	r0, r3
 802240e:	f7ff ff2b 	bl	8022268 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022412:	4603      	mov	r3, r0
 8022414:	2b02      	cmp	r3, #2
 8022416:	d006      	beq.n	8022426 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2e>
 8022418:	4b1d      	ldr	r3, [pc, #116]	; (8022490 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x98>)
 802241a:	4a1e      	ldr	r2, [pc, #120]	; (8022494 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x9c>)
 802241c:	f240 311d 	movw	r1, #797	; 0x31d
 8022420:	481d      	ldr	r0, [pc, #116]	; (8022498 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa0>)
 8022422:	f019 fbab 	bl	803bb7c <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022426:	68fb      	ldr	r3, [r7, #12]
 8022428:	2201      	movs	r2, #1
 802242a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 802242e:	2002      	movs	r0, #2
 8022430:	f7ff ff0e 	bl	8022250 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022434:	4603      	mov	r3, r0
 8022436:	461a      	mov	r2, r3
 8022438:	68fb      	ldr	r3, [r7, #12]
 802243a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = BHYWrapper::BHYFrame::Size;
 802243e:	68fb      	ldr	r3, [r7, #12]
 8022440:	2211      	movs	r2, #17
 8022442:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022446:	687b      	ldr	r3, [r7, #4]
 8022448:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802244c:	2b01      	cmp	r3, #1
 802244e:	d004      	beq.n	802245a <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022450:	68fb      	ldr	r3, [r7, #12]
 8022452:	2203      	movs	r2, #3
 8022454:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022458:	e015      	b.n	8022486 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x8e>
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 802245a:	f107 0314 	add.w	r3, r7, #20
 802245e:	6839      	ldr	r1, [r7, #0]
 8022460:	4618      	mov	r0, r3
 8022462:	f7fe facf 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8022466:	68f8      	ldr	r0, [r7, #12]
 8022468:	f001 f866 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 802246c:	4601      	mov	r1, r0
 802246e:	f107 0213 	add.w	r2, r7, #19
 8022472:	f107 0314 	add.w	r3, r7, #20
 8022476:	4618      	mov	r0, r3
 8022478:	f7fe fb6e 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>

		responce.Error = ErrorCodes::Success;
 802247c:	68fb      	ldr	r3, [r7, #12]
 802247e:	2200      	movs	r2, #0
 8022480:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022484:	bf00      	nop
	}
 8022486:	68f8      	ldr	r0, [r7, #12]
 8022488:	3728      	adds	r7, #40	; 0x28
 802248a:	46bd      	mov	sp, r7
 802248c:	bd80      	pop	{r7, pc}
 802248e:	bf00      	nop
 8022490:	0803d3c8 	.word	0x0803d3c8
 8022494:	0803d410 	.word	0x0803d410
 8022498:	0803cdd0 	.word	0x0803cdd0

0802249c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>:

	Responce DoReset(const Request &request, IMUFrameContainer &container,
 802249c:	b580      	push	{r7, lr}
 802249e:	b084      	sub	sp, #16
 80224a0:	af00      	add	r7, sp, #0
 80224a2:	60f8      	str	r0, [r7, #12]
 80224a4:	60b9      	str	r1, [r7, #8]
 80224a6:	607a      	str	r2, [r7, #4]
 80224a8:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 80224aa:	687b      	ldr	r3, [r7, #4]
 80224ac:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80224b0:	4618      	mov	r0, r3
 80224b2:	f7ff fed9 	bl	8022268 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80224b6:	4603      	mov	r3, r0
 80224b8:	2b03      	cmp	r3, #3
 80224ba:	d006      	beq.n	80224ca <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x2e>
 80224bc:	4b17      	ldr	r3, [pc, #92]	; (802251c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x80>)
 80224be:	4a18      	ldr	r2, [pc, #96]	; (8022520 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x84>)
 80224c0:	f240 3137 	movw	r1, #823	; 0x337
 80224c4:	4817      	ldr	r0, [pc, #92]	; (8022524 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x88>)
 80224c6:	f019 fb59 	bl	803bb7c <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::Reset);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80224ca:	68fb      	ldr	r3, [r7, #12]
 80224cc:	2201      	movs	r2, #1
 80224ce:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 80224d2:	2003      	movs	r0, #3
 80224d4:	f7ff febc 	bl	8022250 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80224d8:	4603      	mov	r3, r0
 80224da:	461a      	mov	r2, r3
 80224dc:	68fb      	ldr	r3, [r7, #12]
 80224de:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 80224e2:	68fb      	ldr	r3, [r7, #12]
 80224e4:	2201      	movs	r2, #1
 80224e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 80224ea:	687b      	ldr	r3, [r7, #4]
 80224ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80224f0:	2b01      	cmp	r3, #1
 80224f2:	d004      	beq.n	80224fe <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80224f4:	68fb      	ldr	r3, [r7, #12]
 80224f6:	2203      	movs	r2, #3
 80224f8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80224fc:	e00a      	b.n	8022514 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x78>
		}

		container.Reset();
 80224fe:	6838      	ldr	r0, [r7, #0]
 8022500:	f7ff fd22 	bl	8021f48 <_ZN17IMUFrameContainer5ResetEv>
		sFilter.ResetStrobeDuration();
 8022504:	69b8      	ldr	r0, [r7, #24]
 8022506:	f7ff fe55 	bl	80221b4 <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>

		responce.Error = ErrorCodes::Success;
 802250a:	68fb      	ldr	r3, [r7, #12]
 802250c:	2200      	movs	r2, #0
 802250e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022512:	bf00      	nop
	}
 8022514:	68f8      	ldr	r0, [r7, #12]
 8022516:	3710      	adds	r7, #16
 8022518:	46bd      	mov	sp, r7
 802251a:	bd80      	pop	{r7, pc}
 802251c:	0803d460 	.word	0x0803d460
 8022520:	0803d4a4 	.word	0x0803d4a4
 8022524:	0803cdd0 	.word	0x0803cdd0

08022528 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>:

	Responce SetOffset(const Request &request, size_t &strobeOffset) {
 8022528:	b580      	push	{r7, lr}
 802252a:	b086      	sub	sp, #24
 802252c:	af00      	add	r7, sp, #0
 802252e:	60f8      	str	r0, [r7, #12]
 8022530:	60b9      	str	r1, [r7, #8]
 8022532:	607a      	str	r2, [r7, #4]
 8022534:	603b      	str	r3, [r7, #0]
		assert(
 8022536:	687b      	ldr	r3, [r7, #4]
 8022538:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 802253c:	4618      	mov	r0, r3
 802253e:	f7ff fe93 	bl	8022268 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022542:	4603      	mov	r3, r0
 8022544:	2b04      	cmp	r3, #4
 8022546:	d006      	beq.n	8022556 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x2e>
 8022548:	4b1a      	ldr	r3, [pc, #104]	; (80225b4 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x8c>)
 802254a:	4a1b      	ldr	r2, [pc, #108]	; (80225b8 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x90>)
 802254c:	f240 314e 	movw	r1, #846	; 0x34e
 8022550:	481a      	ldr	r0, [pc, #104]	; (80225bc <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x94>)
 8022552:	f019 fb13 	bl	803bb7c <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::SetOffset);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022556:	68fb      	ldr	r3, [r7, #12]
 8022558:	2201      	movs	r2, #1
 802255a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::SetOffset);
 802255e:	2004      	movs	r0, #4
 8022560:	f7ff fe76 	bl	8022250 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022564:	4603      	mov	r3, r0
 8022566:	461a      	mov	r2, r3
 8022568:	68fb      	ldr	r3, [r7, #12]
 802256a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 802256e:	68fb      	ldr	r3, [r7, #12]
 8022570:	2201      	movs	r2, #1
 8022572:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022576:	687b      	ldr	r3, [r7, #4]
 8022578:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802257c:	2b01      	cmp	r3, #1
 802257e:	d004      	beq.n	802258a <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022580:	68fb      	ldr	r3, [r7, #12]
 8022582:	2203      	movs	r2, #3
 8022584:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022588:	e00f      	b.n	80225aa <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x82>
		}

		uint8_t newOffset = request.Data[0];
 802258a:	687b      	ldr	r3, [r7, #4]
 802258c:	2100      	movs	r1, #0
 802258e:	4618      	mov	r0, r3
 8022590:	f7ff f9cd 	bl	802192e <_ZNKSt5arrayIhLj256EEixEj>
 8022594:	4603      	mov	r3, r0
 8022596:	781b      	ldrb	r3, [r3, #0]
 8022598:	75fb      	strb	r3, [r7, #23]

		strobeOffset = newOffset;
 802259a:	7dfa      	ldrb	r2, [r7, #23]
 802259c:	683b      	ldr	r3, [r7, #0]
 802259e:	601a      	str	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 80225a0:	68fb      	ldr	r3, [r7, #12]
 80225a2:	2200      	movs	r2, #0
 80225a4:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80225a8:	bf00      	nop
	}
 80225aa:	68f8      	ldr	r0, [r7, #12]
 80225ac:	3718      	adds	r7, #24
 80225ae:	46bd      	mov	sp, r7
 80225b0:	bd80      	pop	{r7, pc}
 80225b2:	bf00      	nop
 80225b4:	0803d504 	.word	0x0803d504
 80225b8:	0803d54c 	.word	0x0803d54c
 80225bc:	0803cdd0 	.word	0x0803cdd0

080225c0 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>:

	Responce ConfigureFilter(const Request &request,
 80225c0:	b580      	push	{r7, lr}
 80225c2:	b086      	sub	sp, #24
 80225c4:	af00      	add	r7, sp, #0
 80225c6:	60f8      	str	r0, [r7, #12]
 80225c8:	60b9      	str	r1, [r7, #8]
 80225ca:	607a      	str	r2, [r7, #4]
 80225cc:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 80225ce:	687b      	ldr	r3, [r7, #4]
 80225d0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80225d4:	4618      	mov	r0, r3
 80225d6:	f7ff fe47 	bl	8022268 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80225da:	4603      	mov	r3, r0
 80225dc:	2b06      	cmp	r3, #6
 80225de:	d006      	beq.n	80225ee <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x2e>
 80225e0:	4b1f      	ldr	r3, [pc, #124]	; (8022660 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa0>)
 80225e2:	4a20      	ldr	r2, [pc, #128]	; (8022664 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa4>)
 80225e4:	f240 3166 	movw	r1, #870	; 0x366
 80225e8:	481f      	ldr	r0, [pc, #124]	; (8022668 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa8>)
 80225ea:	f019 fac7 	bl	803bb7c <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::ConfigureFilter);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80225ee:	68fb      	ldr	r3, [r7, #12]
 80225f0:	2201      	movs	r2, #1
 80225f2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(
 80225f6:	2006      	movs	r0, #6
 80225f8:	f7ff fe2a 	bl	8022250 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80225fc:	4603      	mov	r3, r0
 80225fe:	461a      	mov	r2, r3
 8022600:	68fb      	ldr	r3, [r7, #12]
 8022602:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
				RequestMode::ConfigureFilter);
		responce.ResponceSize = 1;
 8022606:	68fb      	ldr	r3, [r7, #12]
 8022608:	2201      	movs	r2, #1
 802260a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 2) {
 802260e:	687b      	ldr	r3, [r7, #4]
 8022610:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022614:	2b02      	cmp	r3, #2
 8022616:	d004      	beq.n	8022622 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022618:	68fb      	ldr	r3, [r7, #12]
 802261a:	2203      	movs	r2, #3
 802261c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022620:	e01a      	b.n	8022658 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x98>
		}

		uint8_t targetDuration = request.Data[0];
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	2100      	movs	r1, #0
 8022626:	4618      	mov	r0, r3
 8022628:	f7ff f981 	bl	802192e <_ZNKSt5arrayIhLj256EEixEj>
 802262c:	4603      	mov	r3, r0
 802262e:	781b      	ldrb	r3, [r3, #0]
 8022630:	75fb      	strb	r3, [r7, #23]
		uint8_t durationThreshold = request.Data[1];
 8022632:	687b      	ldr	r3, [r7, #4]
 8022634:	2101      	movs	r1, #1
 8022636:	4618      	mov	r0, r3
 8022638:	f7ff f979 	bl	802192e <_ZNKSt5arrayIhLj256EEixEj>
 802263c:	4603      	mov	r3, r0
 802263e:	781b      	ldrb	r3, [r3, #0]
 8022640:	75bb      	strb	r3, [r7, #22]

		sFilter.Configure(targetDuration, durationThreshold);
 8022642:	7dba      	ldrb	r2, [r7, #22]
 8022644:	7dfb      	ldrb	r3, [r7, #23]
 8022646:	4619      	mov	r1, r3
 8022648:	6838      	ldr	r0, [r7, #0]
 802264a:	f7ff fd90 	bl	802216e <_ZN20StrobeDurationFilter9ConfigureEhh>
		responce.Error = ErrorCodes::Success;
 802264e:	68fb      	ldr	r3, [r7, #12]
 8022650:	2200      	movs	r2, #0
 8022652:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022656:	bf00      	nop
	}
 8022658:	68f8      	ldr	r0, [r7, #12]
 802265a:	3718      	adds	r7, #24
 802265c:	46bd      	mov	sp, r7
 802265e:	bd80      	pop	{r7, pc}
 8022660:	0803d58c 	.word	0x0803d58c
 8022664:	0803d5d8 	.word	0x0803d5d8
 8022668:	0803cdd0 	.word	0x0803cdd0

0802266c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>:

	Responce StrobeWidth(const Request &request,
 802266c:	b580      	push	{r7, lr}
 802266e:	b088      	sub	sp, #32
 8022670:	af00      	add	r7, sp, #0
 8022672:	6178      	str	r0, [r7, #20]
 8022674:	6139      	str	r1, [r7, #16]
 8022676:	60fa      	str	r2, [r7, #12]
 8022678:	60bb      	str	r3, [r7, #8]
			const StrobeDurationFilter &sFilter) {
		assert(
 802267a:	68fb      	ldr	r3, [r7, #12]
 802267c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022680:	4618      	mov	r0, r3
 8022682:	f7ff fdf1 	bl	8022268 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022686:	4603      	mov	r3, r0
 8022688:	2b05      	cmp	r3, #5
 802268a:	d006      	beq.n	802269a <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x2e>
 802268c:	4b28      	ldr	r3, [pc, #160]	; (8022730 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xc4>)
 802268e:	4a29      	ldr	r2, [pc, #164]	; (8022734 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xc8>)
 8022690:	f44f 7160 	mov.w	r1, #896	; 0x380
 8022694:	4828      	ldr	r0, [pc, #160]	; (8022738 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xcc>)
 8022696:	f019 fa71 	bl	803bb7c <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::StrobeWidth);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 802269a:	697b      	ldr	r3, [r7, #20]
 802269c:	2201      	movs	r2, #1
 802269e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::StrobeWidth);
 80226a2:	2005      	movs	r0, #5
 80226a4:	f7ff fdd4 	bl	8022250 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80226a8:	4603      	mov	r3, r0
 80226aa:	461a      	mov	r2, r3
 80226ac:	697b      	ldr	r3, [r7, #20]
 80226ae:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 80226b2:	697b      	ldr	r3, [r7, #20]
 80226b4:	2201      	movs	r2, #1
 80226b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 80226ba:	68fb      	ldr	r3, [r7, #12]
 80226bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80226c0:	2b01      	cmp	r3, #1
 80226c2:	d004      	beq.n	80226ce <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80226c4:	697b      	ldr	r3, [r7, #20]
 80226c6:	2203      	movs	r2, #3
 80226c8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80226cc:	e02c      	b.n	8022728 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xbc>
		}

		float strobeWidth = sFilter.GetStrobeDuration();
 80226ce:	68b8      	ldr	r0, [r7, #8]
 80226d0:	f7ff fd61 	bl	8022196 <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>
 80226d4:	ed87 0a07 	vstr	s0, [r7, #28]

		if (strobeWidth < 0)
 80226d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80226dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80226e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226e4:	d502      	bpl.n	80226ec <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x80>
			strobeWidth = 0;
 80226e6:	f04f 0300 	mov.w	r3, #0
 80226ea:	61fb      	str	r3, [r7, #28]
		if (strobeWidth > 255)
 80226ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80226f0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 802273c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd0>
 80226f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80226f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226fc:	dd01      	ble.n	8022702 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x96>
			strobeWidth = 255;
 80226fe:	4b10      	ldr	r3, [pc, #64]	; (8022740 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd4>)
 8022700:	61fb      	str	r3, [r7, #28]

		responce.Data[0] = static_cast<uint8_t>(strobeWidth);
 8022702:	2100      	movs	r1, #0
 8022704:	6978      	ldr	r0, [r7, #20]
 8022706:	f001 f932 	bl	802396e <_ZNSt5arrayIhLj256EEixEj>
 802270a:	4603      	mov	r3, r0
 802270c:	edd7 7a07 	vldr	s15, [r7, #28]
 8022710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022714:	edc7 7a01 	vstr	s15, [r7, #4]
 8022718:	793a      	ldrb	r2, [r7, #4]
 802271a:	b2d2      	uxtb	r2, r2
 802271c:	701a      	strb	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 802271e:	697b      	ldr	r3, [r7, #20]
 8022720:	2200      	movs	r2, #0
 8022722:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022726:	bf00      	nop
	}
 8022728:	6978      	ldr	r0, [r7, #20]
 802272a:	3720      	adds	r7, #32
 802272c:	46bd      	mov	sp, r7
 802272e:	bd80      	pop	{r7, pc}
 8022730:	0803d62c 	.word	0x0803d62c
 8022734:	0803d674 	.word	0x0803d674
 8022738:	0803cdd0 	.word	0x0803cdd0
 802273c:	437f0000 	.word	0x437f0000
 8022740:	437f0000 	.word	0x437f0000

08022744 <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>:

	Responce UnknownModeResponce(const Request &request) {
 8022744:	b580      	push	{r7, lr}
 8022746:	b084      	sub	sp, #16
 8022748:	af00      	add	r7, sp, #0
 802274a:	60f8      	str	r0, [r7, #12]
 802274c:	60b9      	str	r1, [r7, #8]
 802274e:	607a      	str	r2, [r7, #4]
		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022750:	68fb      	ldr	r3, [r7, #12]
 8022752:	2201      	movs	r2, #1
 8022754:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(
				RequestMode::Deserialize(request.MetaInfo));
 8022758:	687b      	ldr	r3, [r7, #4]
 802275a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
		responce.MetaInfo = RequestMode::Serialize(
 802275e:	4618      	mov	r0, r3
 8022760:	f7ff fd82 	bl	8022268 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022764:	4603      	mov	r3, r0
 8022766:	4618      	mov	r0, r3
 8022768:	f7ff fd72 	bl	8022250 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 802276c:	4603      	mov	r3, r0
 802276e:	461a      	mov	r2, r3
 8022770:	68fb      	ldr	r3, [r7, #12]
 8022772:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = request.ResponceSize;
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 802277c:	68fb      	ldr	r3, [r7, #12]
 802277e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.Error = ErrorCodes::UnknownMode;
 8022782:	68fb      	ldr	r3, [r7, #12]
 8022784:	2202      	movs	r2, #2
 8022786:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		return responce;
 802278a:	bf00      	nop
	}
 802278c:	68f8      	ldr	r0, [r7, #12]
 802278e:	3710      	adds	r7, #16
 8022790:	46bd      	mov	sp, r7
 8022792:	bd80      	pop	{r7, pc}

08022794 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>:

public:
	Responce Handle(const Request &request, IMUFrameContainer &container,
 8022794:	b580      	push	{r7, lr}
 8022796:	b086      	sub	sp, #24
 8022798:	af02      	add	r7, sp, #8
 802279a:	60f8      	str	r0, [r7, #12]
 802279c:	60b9      	str	r1, [r7, #8]
 802279e:	607a      	str	r2, [r7, #4]
 80227a0:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU, size_t &strobeOffset,
			StrobeDurationFilter &sFilter) {
		assert(request.PeripheryID == Periphery::Imu);
 80227a2:	687b      	ldr	r3, [r7, #4]
 80227a4:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80227a8:	2b01      	cmp	r3, #1
 80227aa:	d006      	beq.n	80227ba <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x26>
 80227ac:	4b2f      	ldr	r3, [pc, #188]	; (802286c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xd8>)
 80227ae:	4a30      	ldr	r2, [pc, #192]	; (8022870 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xdc>)
 80227b0:	f240 31a9 	movw	r1, #937	; 0x3a9
 80227b4:	482f      	ldr	r0, [pc, #188]	; (8022874 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xe0>)
 80227b6:	f019 f9e1 	bl	803bb7c <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 80227ba:	687b      	ldr	r3, [r7, #4]
 80227bc:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80227c0:	4618      	mov	r0, r3
 80227c2:	f7ff fd51 	bl	8022268 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80227c6:	4603      	mov	r3, r0
 80227c8:	2b06      	cmp	r3, #6
 80227ca:	d844      	bhi.n	8022856 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xc2>
 80227cc:	a201      	add	r2, pc, #4	; (adr r2, 80227d4 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x40>)
 80227ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80227d2:	bf00      	nop
 80227d4:	080227f1 	.word	0x080227f1
 80227d8:	080227ff 	.word	0x080227ff
 80227dc:	0802280d 	.word	0x0802280d
 80227e0:	0802281b 	.word	0x0802281b
 80227e4:	0802282d 	.word	0x0802282d
 80227e8:	0802283b 	.word	0x0802283b
 80227ec:	08022849 	.word	0x08022849
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 80227f0:	68f8      	ldr	r0, [r7, #12]
 80227f2:	683b      	ldr	r3, [r7, #0]
 80227f4:	687a      	ldr	r2, [r7, #4]
 80227f6:	68b9      	ldr	r1, [r7, #8]
 80227f8:	f7ff fd42 	bl	8022280 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 80227fc:	e031      	b.n	8022862 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::Info:
			return GetInfo(request, container);
 80227fe:	68f8      	ldr	r0, [r7, #12]
 8022800:	683b      	ldr	r3, [r7, #0]
 8022802:	687a      	ldr	r2, [r7, #4]
 8022804:	68b9      	ldr	r1, [r7, #8]
 8022806:	f7ff fda3 	bl	8022350 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 802280a:	e02a      	b.n	8022862 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 802280c:	68f8      	ldr	r0, [r7, #12]
 802280e:	69bb      	ldr	r3, [r7, #24]
 8022810:	687a      	ldr	r2, [r7, #4]
 8022812:	68b9      	ldr	r1, [r7, #8]
 8022814:	f7ff fdf0 	bl	80223f8 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 8022818:	e023      	b.n	8022862 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::Reset:
			return DoReset(request, container, sFilter);
 802281a:	68f8      	ldr	r0, [r7, #12]
 802281c:	6a3b      	ldr	r3, [r7, #32]
 802281e:	9300      	str	r3, [sp, #0]
 8022820:	683b      	ldr	r3, [r7, #0]
 8022822:	687a      	ldr	r2, [r7, #4]
 8022824:	68b9      	ldr	r1, [r7, #8]
 8022826:	f7ff fe39 	bl	802249c <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>
 802282a:	e01a      	b.n	8022862 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::SetOffset:
			return SetOffset(request, strobeOffset);
 802282c:	68f8      	ldr	r0, [r7, #12]
 802282e:	69fb      	ldr	r3, [r7, #28]
 8022830:	687a      	ldr	r2, [r7, #4]
 8022832:	68b9      	ldr	r1, [r7, #8]
 8022834:	f7ff fe78 	bl	8022528 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>
 8022838:	e013      	b.n	8022862 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::StrobeWidth:
			return StrobeWidth(request, sFilter);
 802283a:	68f8      	ldr	r0, [r7, #12]
 802283c:	6a3b      	ldr	r3, [r7, #32]
 802283e:	687a      	ldr	r2, [r7, #4]
 8022840:	68b9      	ldr	r1, [r7, #8]
 8022842:	f7ff ff13 	bl	802266c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>
 8022846:	e00c      	b.n	8022862 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::ConfigureFilter:
			return ConfigureFilter(request, sFilter);
 8022848:	68f8      	ldr	r0, [r7, #12]
 802284a:	6a3b      	ldr	r3, [r7, #32]
 802284c:	687a      	ldr	r2, [r7, #4]
 802284e:	68b9      	ldr	r1, [r7, #8]
 8022850:	f7ff feb6 	bl	80225c0 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>
 8022854:	e005      	b.n	8022862 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		default:
			return UnknownModeResponce(request);
 8022856:	68fb      	ldr	r3, [r7, #12]
 8022858:	687a      	ldr	r2, [r7, #4]
 802285a:	68b9      	ldr	r1, [r7, #8]
 802285c:	4618      	mov	r0, r3
 802285e:	f7ff ff71 	bl	8022744 <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>
		}
	}
 8022862:	68f8      	ldr	r0, [r7, #12]
 8022864:	3710      	adds	r7, #16
 8022866:	46bd      	mov	sp, r7
 8022868:	bd80      	pop	{r7, pc}
 802286a:	bf00      	nop
 802286c:	0803d6cc 	.word	0x0803d6cc
 8022870:	0803d6f4 	.word	0x0803d6f4
 8022874:	0803cdd0 	.word	0x0803cdd0

08022878 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>:
	std::deque<BHYWrapper::BHYFrame> Queue;
	size_t MaxSize = 800 / 5;
	size_t FirstSeq = 0;

public:
	void Add(const BHYWrapper::BHYFrame &frame, size_t seq) {
 8022878:	b580      	push	{r7, lr}
 802287a:	b084      	sub	sp, #16
 802287c:	af00      	add	r7, sp, #0
 802287e:	60f8      	str	r0, [r7, #12]
 8022880:	60b9      	str	r1, [r7, #8]
 8022882:	607a      	str	r2, [r7, #4]
		if (Queue.empty()) {
 8022884:	68fb      	ldr	r3, [r7, #12]
 8022886:	4618      	mov	r0, r3
 8022888:	f001 f81a 	bl	80238c0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 802288c:	4603      	mov	r3, r0
 802288e:	2b00      	cmp	r3, #0
 8022890:	d002      	beq.n	8022898 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x20>
			FirstSeq = seq;
 8022892:	68fb      	ldr	r3, [r7, #12]
 8022894:	687a      	ldr	r2, [r7, #4]
 8022896:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		Queue.push_front(frame);
 8022898:	68fb      	ldr	r3, [r7, #12]
 802289a:	68b9      	ldr	r1, [r7, #8]
 802289c:	4618      	mov	r0, r3
 802289e:	f000 ffb8 	bl	8023812 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>

		if (Queue.size() > MaxSize) {
 80228a2:	68fb      	ldr	r3, [r7, #12]
 80228a4:	4618      	mov	r0, r3
 80228a6:	f000 ffd6 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80228aa:	4602      	mov	r2, r0
 80228ac:	68fb      	ldr	r3, [r7, #12]
 80228ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80228b0:	429a      	cmp	r2, r3
 80228b2:	bf8c      	ite	hi
 80228b4:	2301      	movhi	r3, #1
 80228b6:	2300      	movls	r3, #0
 80228b8:	b2db      	uxtb	r3, r3
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d008      	beq.n	80228d0 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x58>
			Queue.pop_back();
 80228be:	68fb      	ldr	r3, [r7, #12]
 80228c0:	4618      	mov	r0, r3
 80228c2:	f000 ffda 	bl	802387a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
			FirstSeq++;
 80228c6:	68fb      	ldr	r3, [r7, #12]
 80228c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228ca:	1c5a      	adds	r2, r3, #1
 80228cc:	68fb      	ldr	r3, [r7, #12]
 80228ce:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
 80228d0:	bf00      	nop
 80228d2:	3710      	adds	r7, #16
 80228d4:	46bd      	mov	sp, r7
 80228d6:	bd80      	pop	{r7, pc}

080228d8 <_ZNK12IMUFrameMemo3HasEj>:

	bool Has(size_t seq) const {
 80228d8:	b590      	push	{r4, r7, lr}
 80228da:	b083      	sub	sp, #12
 80228dc:	af00      	add	r7, sp, #0
 80228de:	6078      	str	r0, [r7, #4]
 80228e0:	6039      	str	r1, [r7, #0]
		if (Queue.empty())
 80228e2:	687b      	ldr	r3, [r7, #4]
 80228e4:	4618      	mov	r0, r3
 80228e6:	f000 ffeb 	bl	80238c0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 80228ea:	4603      	mov	r3, r0
 80228ec:	2b00      	cmp	r3, #0
 80228ee:	d001      	beq.n	80228f4 <_ZNK12IMUFrameMemo3HasEj+0x1c>
			return false;
 80228f0:	2300      	movs	r3, #0
 80228f2:	e012      	b.n	802291a <_ZNK12IMUFrameMemo3HasEj+0x42>

		if (seq < FirstSeq + Queue.size())
 80228f4:	687b      	ldr	r3, [r7, #4]
 80228f6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	4618      	mov	r0, r3
 80228fc:	f000 ffab 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022900:	4603      	mov	r3, r0
 8022902:	4423      	add	r3, r4
 8022904:	683a      	ldr	r2, [r7, #0]
 8022906:	429a      	cmp	r2, r3
 8022908:	bf34      	ite	cc
 802290a:	2301      	movcc	r3, #1
 802290c:	2300      	movcs	r3, #0
 802290e:	b2db      	uxtb	r3, r3
 8022910:	2b00      	cmp	r3, #0
 8022912:	d001      	beq.n	8022918 <_ZNK12IMUFrameMemo3HasEj+0x40>
			return true;
 8022914:	2301      	movs	r3, #1
 8022916:	e000      	b.n	802291a <_ZNK12IMUFrameMemo3HasEj+0x42>

		return false;
 8022918:	2300      	movs	r3, #0
	}
 802291a:	4618      	mov	r0, r3
 802291c:	370c      	adds	r7, #12
 802291e:	46bd      	mov	sp, r7
 8022920:	bd90      	pop	{r4, r7, pc}
	...

08022924 <_ZNK12IMUFrameMemo3GetEj>:

	BHYWrapper::BHYFrame Get(size_t seq) const {
 8022924:	b5b0      	push	{r4, r5, r7, lr}
 8022926:	b084      	sub	sp, #16
 8022928:	af00      	add	r7, sp, #0
 802292a:	60f8      	str	r0, [r7, #12]
 802292c:	60b9      	str	r1, [r7, #8]
 802292e:	607a      	str	r2, [r7, #4]
		assert(Has(seq));
 8022930:	6879      	ldr	r1, [r7, #4]
 8022932:	68b8      	ldr	r0, [r7, #8]
 8022934:	f7ff ffd0 	bl	80228d8 <_ZNK12IMUFrameMemo3HasEj>
 8022938:	4603      	mov	r3, r0
 802293a:	2b00      	cmp	r3, #0
 802293c:	d106      	bne.n	802294c <_ZNK12IMUFrameMemo3GetEj+0x28>
 802293e:	4b1a      	ldr	r3, [pc, #104]	; (80229a8 <_ZNK12IMUFrameMemo3GetEj+0x84>)
 8022940:	4a1a      	ldr	r2, [pc, #104]	; (80229ac <_ZNK12IMUFrameMemo3GetEj+0x88>)
 8022942:	f240 31de 	movw	r1, #990	; 0x3de
 8022946:	481a      	ldr	r0, [pc, #104]	; (80229b0 <_ZNK12IMUFrameMemo3GetEj+0x8c>)
 8022948:	f019 f918 	bl	803bb7c <__assert_func>

		if (seq < FirstSeq) {
 802294c:	68bb      	ldr	r3, [r7, #8]
 802294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022950:	687a      	ldr	r2, [r7, #4]
 8022952:	429a      	cmp	r2, r3
 8022954:	d20c      	bcs.n	8022970 <_ZNK12IMUFrameMemo3GetEj+0x4c>
			return Queue.front();
 8022956:	68bb      	ldr	r3, [r7, #8]
 8022958:	4618      	mov	r0, r3
 802295a:	f001 f817 	bl	802398c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>
 802295e:	4602      	mov	r2, r0
 8022960:	68fb      	ldr	r3, [r7, #12]
 8022962:	461c      	mov	r4, r3
 8022964:	4615      	mov	r5, r2
 8022966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802296a:	682b      	ldr	r3, [r5, #0]
 802296c:	6023      	str	r3, [r4, #0]
 802296e:	e017      	b.n	80229a0 <_ZNK12IMUFrameMemo3GetEj+0x7c>
		}

		return Queue[(Queue.size() - 1) - (seq - FirstSeq)];
 8022970:	68bc      	ldr	r4, [r7, #8]
 8022972:	68bb      	ldr	r3, [r7, #8]
 8022974:	4618      	mov	r0, r3
 8022976:	f000 ff6e 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 802297a:	4601      	mov	r1, r0
 802297c:	68bb      	ldr	r3, [r7, #8]
 802297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	1ad3      	subs	r3, r2, r3
 8022984:	440b      	add	r3, r1
 8022986:	3b01      	subs	r3, #1
 8022988:	4619      	mov	r1, r3
 802298a:	4620      	mov	r0, r4
 802298c:	f000 ffaa 	bl	80238e4 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8022990:	4602      	mov	r2, r0
 8022992:	68fb      	ldr	r3, [r7, #12]
 8022994:	461c      	mov	r4, r3
 8022996:	4615      	mov	r5, r2
 8022998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802299a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802299c:	682b      	ldr	r3, [r5, #0]
 802299e:	6023      	str	r3, [r4, #0]
	}
 80229a0:	68f8      	ldr	r0, [r7, #12]
 80229a2:	3710      	adds	r7, #16
 80229a4:	46bd      	mov	sp, r7
 80229a6:	bdb0      	pop	{r4, r5, r7, pc}
 80229a8:	0803d770 	.word	0x0803d770
 80229ac:	0803d77c 	.word	0x0803d77c
 80229b0:	0803cdd0 	.word	0x0803cdd0

080229b4 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>:
private:
	struct Version {
		uint8_t Major;
		uint8_t Minor;

		void SerializeTo(uint8_t **ptr) {
 80229b4:	b580      	push	{r7, lr}
 80229b6:	b082      	sub	sp, #8
 80229b8:	af00      	add	r7, sp, #0
 80229ba:	6078      	str	r0, [r7, #4]
 80229bc:	6039      	str	r1, [r7, #0]
			assert(ptr);
 80229be:	683b      	ldr	r3, [r7, #0]
 80229c0:	2b00      	cmp	r3, #0
 80229c2:	d106      	bne.n	80229d2 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x1e>
 80229c4:	4b14      	ldr	r3, [pc, #80]	; (8022a18 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x64>)
 80229c6:	4a15      	ldr	r2, [pc, #84]	; (8022a1c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 80229c8:	f240 31ef 	movw	r1, #1007	; 0x3ef
 80229cc:	4814      	ldr	r0, [pc, #80]	; (8022a20 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 80229ce:	f019 f8d5 	bl	803bb7c <__assert_func>
			assert(*ptr);
 80229d2:	683b      	ldr	r3, [r7, #0]
 80229d4:	681b      	ldr	r3, [r3, #0]
 80229d6:	2b00      	cmp	r3, #0
 80229d8:	d106      	bne.n	80229e8 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x34>
 80229da:	4b12      	ldr	r3, [pc, #72]	; (8022a24 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x70>)
 80229dc:	4a0f      	ldr	r2, [pc, #60]	; (8022a1c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 80229de:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80229e2:	480f      	ldr	r0, [pc, #60]	; (8022a20 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 80229e4:	f019 f8ca 	bl	803bb7c <__assert_func>

			**ptr = Major;
 80229e8:	683b      	ldr	r3, [r7, #0]
 80229ea:	681b      	ldr	r3, [r3, #0]
 80229ec:	687a      	ldr	r2, [r7, #4]
 80229ee:	7812      	ldrb	r2, [r2, #0]
 80229f0:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 80229f2:	683b      	ldr	r3, [r7, #0]
 80229f4:	681b      	ldr	r3, [r3, #0]
 80229f6:	1c5a      	adds	r2, r3, #1
 80229f8:	683b      	ldr	r3, [r7, #0]
 80229fa:	601a      	str	r2, [r3, #0]

			**ptr = Minor;
 80229fc:	683b      	ldr	r3, [r7, #0]
 80229fe:	681b      	ldr	r3, [r3, #0]
 8022a00:	687a      	ldr	r2, [r7, #4]
 8022a02:	7852      	ldrb	r2, [r2, #1]
 8022a04:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022a06:	683b      	ldr	r3, [r7, #0]
 8022a08:	681b      	ldr	r3, [r3, #0]
 8022a0a:	1c5a      	adds	r2, r3, #1
 8022a0c:	683b      	ldr	r3, [r7, #0]
 8022a0e:	601a      	str	r2, [r3, #0]
		}
 8022a10:	bf00      	nop
 8022a12:	3708      	adds	r7, #8
 8022a14:	46bd      	mov	sp, r7
 8022a16:	bd80      	pop	{r7, pc}
 8022a18:	0803cd9c 	.word	0x0803cd9c
 8022a1c:	0803d7b4 	.word	0x0803d7b4
 8022a20:	0803cdd0 	.word	0x0803cdd0
 8022a24:	0803cdec 	.word	0x0803cdec

08022a28 <_ZN18AcknowledgeHandlerC1Ehh>:
	};

	Version CurrentVersion;

public:
	AcknowledgeHandler(uint8_t versionMaj, uint8_t versionMin) {
 8022a28:	b480      	push	{r7}
 8022a2a:	b083      	sub	sp, #12
 8022a2c:	af00      	add	r7, sp, #0
 8022a2e:	6078      	str	r0, [r7, #4]
 8022a30:	460b      	mov	r3, r1
 8022a32:	70fb      	strb	r3, [r7, #3]
 8022a34:	4613      	mov	r3, r2
 8022a36:	70bb      	strb	r3, [r7, #2]
		CurrentVersion.Major = versionMaj;
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	78fa      	ldrb	r2, [r7, #3]
 8022a3c:	701a      	strb	r2, [r3, #0]
		CurrentVersion.Minor = versionMin;
 8022a3e:	687b      	ldr	r3, [r7, #4]
 8022a40:	78ba      	ldrb	r2, [r7, #2]
 8022a42:	705a      	strb	r2, [r3, #1]
	}
 8022a44:	687b      	ldr	r3, [r7, #4]
 8022a46:	4618      	mov	r0, r3
 8022a48:	370c      	adds	r7, #12
 8022a4a:	46bd      	mov	sp, r7
 8022a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a50:	4770      	bx	lr
	...

08022a54 <_ZN18AcknowledgeHandler6HandleERK7Request>:

	Responce Handle(const Request &request) {
 8022a54:	b580      	push	{r7, lr}
 8022a56:	b086      	sub	sp, #24
 8022a58:	af00      	add	r7, sp, #0
 8022a5a:	60f8      	str	r0, [r7, #12]
 8022a5c:	60b9      	str	r1, [r7, #8]
 8022a5e:	607a      	str	r2, [r7, #4]
		assert(request.PeripheryID == Periphery::Ack);
 8022a60:	687b      	ldr	r3, [r7, #4]
 8022a62:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8022a66:	2b02      	cmp	r3, #2
 8022a68:	d006      	beq.n	8022a78 <_ZN18AcknowledgeHandler6HandleERK7Request+0x24>
 8022a6a:	4b14      	ldr	r3, [pc, #80]	; (8022abc <_ZN18AcknowledgeHandler6HandleERK7Request+0x68>)
 8022a6c:	4a14      	ldr	r2, [pc, #80]	; (8022ac0 <_ZN18AcknowledgeHandler6HandleERK7Request+0x6c>)
 8022a6e:	f240 4103 	movw	r1, #1027	; 0x403
 8022a72:	4814      	ldr	r0, [pc, #80]	; (8022ac4 <_ZN18AcknowledgeHandler6HandleERK7Request+0x70>)
 8022a74:	f019 f882 	bl	803bb7c <__assert_func>

		Responce responce;
		responce.PeripheryID = Periphery::Ack;
 8022a78:	68fb      	ldr	r3, [r7, #12]
 8022a7a:	2202      	movs	r2, #2
 8022a7c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = 0;
 8022a80:	68fb      	ldr	r3, [r7, #12]
 8022a82:	2200      	movs	r2, #0
 8022a84:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.Error = 0;
 8022a88:	68fb      	ldr	r3, [r7, #12]
 8022a8a:	2200      	movs	r2, #0
 8022a8c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		responce.ResponceSize = 2;
 8022a90:	68fb      	ldr	r3, [r7, #12]
 8022a92:	2202      	movs	r2, #2
 8022a94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		uint8_t *ptr = responce.Data.data();
 8022a98:	68f8      	ldr	r0, [r7, #12]
 8022a9a:	f000 fd4d 	bl	8023538 <_ZNSt5arrayIhLj256EE4dataEv>
 8022a9e:	4603      	mov	r3, r0
 8022aa0:	617b      	str	r3, [r7, #20]
		CurrentVersion.SerializeTo(&ptr);
 8022aa2:	68bb      	ldr	r3, [r7, #8]
 8022aa4:	f107 0214 	add.w	r2, r7, #20
 8022aa8:	4611      	mov	r1, r2
 8022aaa:	4618      	mov	r0, r3
 8022aac:	f7ff ff82 	bl	80229b4 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>

		return responce;
 8022ab0:	bf00      	nop
	}
 8022ab2:	68f8      	ldr	r0, [r7, #12]
 8022ab4:	3718      	adds	r7, #24
 8022ab6:	46bd      	mov	sp, r7
 8022ab8:	bd80      	pop	{r7, pc}
 8022aba:	bf00      	nop
 8022abc:	0803d7f0 	.word	0x0803d7f0
 8022ac0:	0803d818 	.word	0x0803d818
 8022ac4:	0803cdd0 	.word	0x0803cdd0

08022ac8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8022ac8:	b580      	push	{r7, lr}
 8022aca:	b082      	sub	sp, #8
 8022acc:	af00      	add	r7, sp, #0
 8022ace:	6078      	str	r0, [r7, #4]
 8022ad0:	687b      	ldr	r3, [r7, #4]
 8022ad2:	4618      	mov	r0, r3
 8022ad4:	f000 ff7a 	bl	80239cc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022ad8:	687b      	ldr	r3, [r7, #4]
 8022ada:	4618      	mov	r0, r3
 8022adc:	3708      	adds	r7, #8
 8022ade:	46bd      	mov	sp, r7
 8022ae0:	bd80      	pop	{r7, pc}

08022ae2 <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8022ae2:	b580      	push	{r7, lr}
 8022ae4:	b082      	sub	sp, #8
 8022ae6:	af00      	add	r7, sp, #0
 8022ae8:	6078      	str	r0, [r7, #4]
 8022aea:	687b      	ldr	r3, [r7, #4]
 8022aec:	4618      	mov	r0, r3
 8022aee:	f7ff ffeb 	bl	8022ac8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	2200      	movs	r2, #0
 8022af6:	629a      	str	r2, [r3, #40]	; 0x28
 8022af8:	687b      	ldr	r3, [r7, #4]
 8022afa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8022afe:	62da      	str	r2, [r3, #44]	; 0x2c
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	4618      	mov	r0, r3
 8022b04:	3708      	adds	r7, #8
 8022b06:	46bd      	mov	sp, r7
 8022b08:	bd80      	pop	{r7, pc}

08022b0a <_ZN17IMUFrameContainerD1Ev>:
 8022b0a:	b580      	push	{r7, lr}
 8022b0c:	b082      	sub	sp, #8
 8022b0e:	af00      	add	r7, sp, #0
 8022b10:	6078      	str	r0, [r7, #4]
 8022b12:	687b      	ldr	r3, [r7, #4]
 8022b14:	4618      	mov	r0, r3
 8022b16:	f000 ff8c 	bl	8023a32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022b1a:	687b      	ldr	r3, [r7, #4]
 8022b1c:	4618      	mov	r0, r3
 8022b1e:	3708      	adds	r7, #8
 8022b20:	46bd      	mov	sp, r7
 8022b22:	bd80      	pop	{r7, pc}

08022b24 <_ZN12IMUFrameMemoC1Ev>:
class IMUFrameMemo {
 8022b24:	b580      	push	{r7, lr}
 8022b26:	b082      	sub	sp, #8
 8022b28:	af00      	add	r7, sp, #0
 8022b2a:	6078      	str	r0, [r7, #4]
 8022b2c:	687b      	ldr	r3, [r7, #4]
 8022b2e:	4618      	mov	r0, r3
 8022b30:	f7ff ffca 	bl	8022ac8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	22a0      	movs	r2, #160	; 0xa0
 8022b38:	629a      	str	r2, [r3, #40]	; 0x28
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	2200      	movs	r2, #0
 8022b3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8022b40:	687b      	ldr	r3, [r7, #4]
 8022b42:	4618      	mov	r0, r3
 8022b44:	3708      	adds	r7, #8
 8022b46:	46bd      	mov	sp, r7
 8022b48:	bd80      	pop	{r7, pc}

08022b4a <_ZN12IMUFrameMemoD1Ev>:
 8022b4a:	b580      	push	{r7, lr}
 8022b4c:	b082      	sub	sp, #8
 8022b4e:	af00      	add	r7, sp, #0
 8022b50:	6078      	str	r0, [r7, #4]
 8022b52:	687b      	ldr	r3, [r7, #4]
 8022b54:	4618      	mov	r0, r3
 8022b56:	f000 ff6c 	bl	8023a32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022b5a:	687b      	ldr	r3, [r7, #4]
 8022b5c:	4618      	mov	r0, r3
 8022b5e:	3708      	adds	r7, #8
 8022b60:	46bd      	mov	sp, r7
 8022b62:	bd80      	pop	{r7, pc}

08022b64 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8022b64:	b580      	push	{r7, lr}
 8022b66:	b082      	sub	sp, #8
 8022b68:	af00      	add	r7, sp, #0
 8022b6a:	6078      	str	r0, [r7, #4]
 8022b6c:	687b      	ldr	r3, [r7, #4]
 8022b6e:	4618      	mov	r0, r3
 8022b70:	f000 ffa5 	bl	8023abe <_ZNSt5dequeIjSaIjEED1Ev>
 8022b74:	687b      	ldr	r3, [r7, #4]
 8022b76:	4618      	mov	r0, r3
 8022b78:	3708      	adds	r7, #8
 8022b7a:	46bd      	mov	sp, r7
 8022b7c:	bd80      	pop	{r7, pc}

08022b7e <_ZN20StrobeDurationFilterC1Ev>:
class StrobeDurationFilter {
 8022b7e:	b580      	push	{r7, lr}
 8022b80:	b082      	sub	sp, #8
 8022b82:	af00      	add	r7, sp, #0
 8022b84:	6078      	str	r0, [r7, #4]
 8022b86:	687b      	ldr	r3, [r7, #4]
 8022b88:	2200      	movs	r2, #0
 8022b8a:	601a      	str	r2, [r3, #0]
 8022b8c:	687b      	ldr	r3, [r7, #4]
 8022b8e:	2200      	movs	r2, #0
 8022b90:	605a      	str	r2, [r3, #4]
 8022b92:	687b      	ldr	r3, [r7, #4]
 8022b94:	2201      	movs	r2, #1
 8022b96:	609a      	str	r2, [r3, #8]
 8022b98:	687b      	ldr	r3, [r7, #4]
 8022b9a:	2200      	movs	r2, #0
 8022b9c:	60da      	str	r2, [r3, #12]
 8022b9e:	687b      	ldr	r3, [r7, #4]
 8022ba0:	2200      	movs	r2, #0
 8022ba2:	611a      	str	r2, [r3, #16]
 8022ba4:	687b      	ldr	r3, [r7, #4]
 8022ba6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8022baa:	615a      	str	r2, [r3, #20]
 8022bac:	687b      	ldr	r3, [r7, #4]
 8022bae:	3318      	adds	r3, #24
 8022bb0:	4618      	mov	r0, r3
 8022bb2:	f000 ff70 	bl	8023a96 <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 8022bb6:	687b      	ldr	r3, [r7, #4]
 8022bb8:	2200      	movs	r2, #0
 8022bba:	641a      	str	r2, [r3, #64]	; 0x40
 8022bbc:	687b      	ldr	r3, [r7, #4]
 8022bbe:	4618      	mov	r0, r3
 8022bc0:	3708      	adds	r7, #8
 8022bc2:	46bd      	mov	sp, r7
 8022bc4:	bd80      	pop	{r7, pc}

08022bc6 <_ZN20StrobeDurationFilterD1Ev>:
 8022bc6:	b580      	push	{r7, lr}
 8022bc8:	b082      	sub	sp, #8
 8022bca:	af00      	add	r7, sp, #0
 8022bcc:	6078      	str	r0, [r7, #4]
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	3318      	adds	r3, #24
 8022bd2:	4618      	mov	r0, r3
 8022bd4:	f7ff ffc6 	bl	8022b64 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>
 8022bd8:	687b      	ldr	r3, [r7, #4]
 8022bda:	4618      	mov	r0, r3
 8022bdc:	3708      	adds	r7, #8
 8022bde:	46bd      	mov	sp, r7
 8022be0:	bd80      	pop	{r7, pc}
	...

08022be4 <_ZN18MotherboardContextC1E17MotherboardConfig>:
	StrobeDurationFilter StrobeFilter;
	size_t StrobeOffset;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 8022be4:	b084      	sub	sp, #16
 8022be6:	b580      	push	{r7, lr}
 8022be8:	b082      	sub	sp, #8
 8022bea:	af00      	add	r7, sp, #0
 8022bec:	6078      	str	r0, [r7, #4]
 8022bee:	f107 0014 	add.w	r0, r7, #20
 8022bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			HeadService { conf.HeadServiceUart, conf.HeadTimeout }, HeadStream {
					conf.HeadStreamUart, conf.HeadTimeout }, Body {
					conf.BodyUart, conf.BodyTimeout, conf.BodyPeriod }, FrameContainer { }, IMU {
					conf.IMUSpi }, IMUHandler { }, AckHandler {
					conf.VersionMajor, conf.VersionMinor }, StrobeOffset {
					conf.StrobeOffset } {
 8022bf6:	687b      	ldr	r3, [r7, #4]
 8022bf8:	6979      	ldr	r1, [r7, #20]
 8022bfa:	69fa      	ldr	r2, [r7, #28]
 8022bfc:	4618      	mov	r0, r3
 8022bfe:	f7fe ff61 	bl	8021ac4 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022c02:	687b      	ldr	r3, [r7, #4]
 8022c04:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022c08:	69b9      	ldr	r1, [r7, #24]
 8022c0a:	69fa      	ldr	r2, [r7, #28]
 8022c0c:	4618      	mov	r0, r3
 8022c0e:	f7fe ff59 	bl	8021ac4 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022c12:	687a      	ldr	r2, [r7, #4]
 8022c14:	f641 1348 	movw	r3, #6472	; 0x1948
 8022c18:	4413      	add	r3, r2
 8022c1a:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8022c1e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8022c22:	4618      	mov	r0, r3
 8022c24:	f7ff ff00 	bl	8022a28 <_ZN18AcknowledgeHandlerC1Ehh>
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	f641 104c 	movw	r0, #6476	; 0x194c
 8022c2e:	4418      	add	r0, r3
 8022c30:	6a39      	ldr	r1, [r7, #32]
 8022c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022c34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022c38:	f7fe f9e0 	bl	8020ffc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>
 8022c3c:	687b      	ldr	r3, [r7, #4]
 8022c3e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8022c42:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8022c46:	2230      	movs	r2, #48	; 0x30
 8022c48:	2100      	movs	r1, #0
 8022c4a:	4618      	mov	r0, r3
 8022c4c:	f019 f828 	bl	803bca0 <memset>
 8022c50:	687a      	ldr	r2, [r7, #4]
 8022c52:	4b16      	ldr	r3, [pc, #88]	; (8022cac <_ZN18MotherboardContextC1E17MotherboardConfig+0xc8>)
 8022c54:	4413      	add	r3, r2
 8022c56:	4618      	mov	r0, r3
 8022c58:	f7ff ff43 	bl	8022ae2 <_ZN17IMUFrameContainerC1Ev>
 8022c5c:	687a      	ldr	r2, [r7, #4]
 8022c5e:	4b14      	ldr	r3, [pc, #80]	; (8022cb0 <_ZN18MotherboardContextC1E17MotherboardConfig+0xcc>)
 8022c60:	4413      	add	r3, r2
 8022c62:	4618      	mov	r0, r3
 8022c64:	f7ff ff5e 	bl	8022b24 <_ZN12IMUFrameMemoC1Ev>
 8022c68:	687a      	ldr	r2, [r7, #4]
 8022c6a:	4b12      	ldr	r3, [pc, #72]	; (8022cb4 <_ZN18MotherboardContextC1E17MotherboardConfig+0xd0>)
 8022c6c:	4413      	add	r3, r2
 8022c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022c70:	4611      	mov	r1, r2
 8022c72:	4618      	mov	r0, r3
 8022c74:	f7fd fd06 	bl	8020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 8022c78:	687a      	ldr	r2, [r7, #4]
 8022c7a:	4b0f      	ldr	r3, [pc, #60]	; (8022cb8 <_ZN18MotherboardContextC1E17MotherboardConfig+0xd4>)
 8022c7c:	4413      	add	r3, r2
 8022c7e:	4618      	mov	r0, r3
 8022c80:	f7ff ff7d 	bl	8022b7e <_ZN20StrobeDurationFilterC1Ev>
 8022c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022c86:	687a      	ldr	r2, [r7, #4]
 8022c88:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
 8022c8c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8022c96:	2200      	movs	r2, #0
 8022c98:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
	}
 8022c9c:	687b      	ldr	r3, [r7, #4]
 8022c9e:	4618      	mov	r0, r3
 8022ca0:	3708      	adds	r7, #8
 8022ca2:	46bd      	mov	sp, r7
 8022ca4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022ca8:	b004      	add	sp, #16
 8022caa:	4770      	bx	lr
 8022cac:	00023140 	.word	0x00023140
 8022cb0:	00023170 	.word	0x00023170
 8022cb4:	000231a0 	.word	0x000231a0
 8022cb8:	000242fc 	.word	0x000242fc

08022cbc <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8022cbc:	b580      	push	{r7, lr}
 8022cbe:	b082      	sub	sp, #8
 8022cc0:	af00      	add	r7, sp, #0
 8022cc2:	6078      	str	r0, [r7, #4]
 8022cc4:	687b      	ldr	r3, [r7, #4]
 8022cc6:	4618      	mov	r0, r3
 8022cc8:	f7fe fee8 	bl	8021a9c <_ZN10FixedQueueI7RequestLj10EEC1Ev>
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	2201      	movs	r2, #1
 8022cd0:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	4618      	mov	r0, r3
 8022cd8:	3708      	adds	r7, #8
 8022cda:	46bd      	mov	sp, r7
 8022cdc:	bd80      	pop	{r7, pc}
	...

08022ce0 <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8022ce0:	b580      	push	{r7, lr}
 8022ce2:	b082      	sub	sp, #8
 8022ce4:	af00      	add	r7, sp, #0
 8022ce6:	6078      	str	r0, [r7, #4]
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	4618      	mov	r0, r3
 8022cec:	f7fe f95e 	bl	8020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>
 8022cf0:	687a      	ldr	r2, [r7, #4]
 8022cf2:	4b17      	ldr	r3, [pc, #92]	; (8022d50 <_ZN11QueueSenderC1Ev+0x70>)
 8022cf4:	4413      	add	r3, r2
 8022cf6:	4618      	mov	r0, r3
 8022cf8:	f7fe f96c 	bl	8020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>
 8022cfc:	687b      	ldr	r3, [r7, #4]
 8022cfe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022d02:	2200      	movs	r2, #0
 8022d04:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 8022d08:	687b      	ldr	r3, [r7, #4]
 8022d0a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022d0e:	2200      	movs	r2, #0
 8022d10:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8022d14:	687b      	ldr	r3, [r7, #4]
 8022d16:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022d1a:	2201      	movs	r2, #1
 8022d1c:	f883 27f0 	strb.w	r2, [r3, #2032]	; 0x7f0
 8022d20:	687b      	ldr	r3, [r7, #4]
 8022d22:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022d26:	2200      	movs	r2, #0
 8022d28:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8022d2c:	687b      	ldr	r3, [r7, #4]
 8022d2e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022d32:	2201      	movs	r2, #1
 8022d34:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8022d38:	687b      	ldr	r3, [r7, #4]
 8022d3a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022d3e:	2200      	movs	r2, #0
 8022d40:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	4618      	mov	r0, r3
 8022d48:	3708      	adds	r7, #8
 8022d4a:	46bd      	mov	sp, r7
 8022d4c:	bd80      	pop	{r7, pc}
 8022d4e:	bf00      	nop
 8022d50:	00020b7c 	.word	0x00020b7c

08022d54 <_ZN10BHYWrapperC1Ev>:

		void SerializeTo(uint8_t* dest, uint8_t* size);
	};

	BHYWrapper(SPI_HandleTypeDef *spiHandle);
	BHYWrapper() = default;
 8022d54:	b480      	push	{r7}
 8022d56:	b083      	sub	sp, #12
 8022d58:	af00      	add	r7, sp, #0
 8022d5a:	6078      	str	r0, [r7, #4]
 8022d5c:	687b      	ldr	r3, [r7, #4]
 8022d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022d62:	461a      	mov	r2, r3
 8022d64:	2300      	movs	r3, #0
 8022d66:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8022d6a:	687b      	ldr	r3, [r7, #4]
 8022d6c:	4618      	mov	r0, r3
 8022d6e:	370c      	adds	r7, #12
 8022d70:	46bd      	mov	sp, r7
 8022d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d76:	4770      	bx	lr

08022d78 <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8022d78:	b580      	push	{r7, lr}
 8022d7a:	b082      	sub	sp, #8
 8022d7c:	af00      	add	r7, sp, #0
 8022d7e:	6078      	str	r0, [r7, #4]
 8022d80:	687b      	ldr	r3, [r7, #4]
 8022d82:	4618      	mov	r0, r3
 8022d84:	f7ff ff9a 	bl	8022cbc <_ZN13HeadInterfaceC1Ev>
 8022d88:	687b      	ldr	r3, [r7, #4]
 8022d8a:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022d8e:	4618      	mov	r0, r3
 8022d90:	f7ff ff94 	bl	8022cbc <_ZN13HeadInterfaceC1Ev>
 8022d94:	687a      	ldr	r2, [r7, #4]
 8022d96:	f641 1348 	movw	r3, #6472	; 0x1948
 8022d9a:	4413      	add	r3, r2
 8022d9c:	2200      	movs	r2, #0
 8022d9e:	2100      	movs	r1, #0
 8022da0:	4618      	mov	r0, r3
 8022da2:	f7ff fe41 	bl	8022a28 <_ZN18AcknowledgeHandlerC1Ehh>
 8022da6:	687a      	ldr	r2, [r7, #4]
 8022da8:	f641 134c 	movw	r3, #6476	; 0x194c
 8022dac:	4413      	add	r3, r2
 8022dae:	4618      	mov	r0, r3
 8022db0:	f7ff ff96 	bl	8022ce0 <_ZN11QueueSenderC1Ev>
 8022db4:	687a      	ldr	r2, [r7, #4]
 8022db6:	4b11      	ldr	r3, [pc, #68]	; (8022dfc <_ZN18MotherboardContextC1Ev+0x84>)
 8022db8:	4413      	add	r3, r2
 8022dba:	4618      	mov	r0, r3
 8022dbc:	f7ff fe91 	bl	8022ae2 <_ZN17IMUFrameContainerC1Ev>
 8022dc0:	687a      	ldr	r2, [r7, #4]
 8022dc2:	4b0f      	ldr	r3, [pc, #60]	; (8022e00 <_ZN18MotherboardContextC1Ev+0x88>)
 8022dc4:	4413      	add	r3, r2
 8022dc6:	4618      	mov	r0, r3
 8022dc8:	f7ff feac 	bl	8022b24 <_ZN12IMUFrameMemoC1Ev>
 8022dcc:	687a      	ldr	r2, [r7, #4]
 8022dce:	4b0d      	ldr	r3, [pc, #52]	; (8022e04 <_ZN18MotherboardContextC1Ev+0x8c>)
 8022dd0:	4413      	add	r3, r2
 8022dd2:	4618      	mov	r0, r3
 8022dd4:	f7ff ffbe 	bl	8022d54 <_ZN10BHYWrapperC1Ev>
 8022dd8:	687a      	ldr	r2, [r7, #4]
 8022dda:	4b0b      	ldr	r3, [pc, #44]	; (8022e08 <_ZN18MotherboardContextC1Ev+0x90>)
 8022ddc:	4413      	add	r3, r2
 8022dde:	4618      	mov	r0, r3
 8022de0:	f7ff fecd 	bl	8022b7e <_ZN20StrobeDurationFilterC1Ev>
 8022de4:	687b      	ldr	r3, [r7, #4]
 8022de6:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8022dea:	2200      	movs	r2, #0
 8022dec:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8022df0:	687b      	ldr	r3, [r7, #4]
 8022df2:	4618      	mov	r0, r3
 8022df4:	3708      	adds	r7, #8
 8022df6:	46bd      	mov	sp, r7
 8022df8:	bd80      	pop	{r7, pc}
 8022dfa:	bf00      	nop
 8022dfc:	00023140 	.word	0x00023140
 8022e00:	00023170 	.word	0x00023170
 8022e04:	000231a0 	.word	0x000231a0
 8022e08:	000242fc 	.word	0x000242fc

08022e0c <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8022e0c:	b580      	push	{r7, lr}
 8022e0e:	b082      	sub	sp, #8
 8022e10:	af00      	add	r7, sp, #0
 8022e12:	6078      	str	r0, [r7, #4]
 8022e14:	687a      	ldr	r2, [r7, #4]
 8022e16:	4b0b      	ldr	r3, [pc, #44]	; (8022e44 <_ZN18MotherboardContextD1Ev+0x38>)
 8022e18:	4413      	add	r3, r2
 8022e1a:	4618      	mov	r0, r3
 8022e1c:	f7ff fed3 	bl	8022bc6 <_ZN20StrobeDurationFilterD1Ev>
 8022e20:	687a      	ldr	r2, [r7, #4]
 8022e22:	4b09      	ldr	r3, [pc, #36]	; (8022e48 <_ZN18MotherboardContextD1Ev+0x3c>)
 8022e24:	4413      	add	r3, r2
 8022e26:	4618      	mov	r0, r3
 8022e28:	f7ff fe8f 	bl	8022b4a <_ZN12IMUFrameMemoD1Ev>
 8022e2c:	687a      	ldr	r2, [r7, #4]
 8022e2e:	4b07      	ldr	r3, [pc, #28]	; (8022e4c <_ZN18MotherboardContextD1Ev+0x40>)
 8022e30:	4413      	add	r3, r2
 8022e32:	4618      	mov	r0, r3
 8022e34:	f7ff fe69 	bl	8022b0a <_ZN17IMUFrameContainerD1Ev>
 8022e38:	687b      	ldr	r3, [r7, #4]
 8022e3a:	4618      	mov	r0, r3
 8022e3c:	3708      	adds	r7, #8
 8022e3e:	46bd      	mov	sp, r7
 8022e40:	bd80      	pop	{r7, pc}
 8022e42:	bf00      	nop
 8022e44:	000242fc 	.word	0x000242fc
 8022e48:	00023170 	.word	0x00023170
 8022e4c:	00023140 	.word	0x00023140

08022e50 <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8022e50:	b580      	push	{r7, lr}
 8022e52:	b082      	sub	sp, #8
 8022e54:	af00      	add	r7, sp, #0
 8022e56:	6078      	str	r0, [r7, #4]
 8022e58:	6039      	str	r1, [r7, #0]
 8022e5a:	687b      	ldr	r3, [r7, #4]
 8022e5c:	683a      	ldr	r2, [r7, #0]
 8022e5e:	4611      	mov	r1, r2
 8022e60:	4618      	mov	r0, r3
 8022e62:	f000 fe51 	bl	8023b08 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 8022e66:	683b      	ldr	r3, [r7, #0]
 8022e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022e6a:	687b      	ldr	r3, [r7, #4]
 8022e6c:	629a      	str	r2, [r3, #40]	; 0x28
 8022e6e:	683b      	ldr	r3, [r7, #0]
 8022e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022e72:	687b      	ldr	r3, [r7, #4]
 8022e74:	62da      	str	r2, [r3, #44]	; 0x2c
 8022e76:	687b      	ldr	r3, [r7, #4]
 8022e78:	4618      	mov	r0, r3
 8022e7a:	3708      	adds	r7, #8
 8022e7c:	46bd      	mov	sp, r7
 8022e7e:	bd80      	pop	{r7, pc}

08022e80 <_ZN12IMUFrameMemoaSEOS_>:
class IMUFrameMemo {
 8022e80:	b580      	push	{r7, lr}
 8022e82:	b082      	sub	sp, #8
 8022e84:	af00      	add	r7, sp, #0
 8022e86:	6078      	str	r0, [r7, #4]
 8022e88:	6039      	str	r1, [r7, #0]
 8022e8a:	687b      	ldr	r3, [r7, #4]
 8022e8c:	683a      	ldr	r2, [r7, #0]
 8022e8e:	4611      	mov	r1, r2
 8022e90:	4618      	mov	r0, r3
 8022e92:	f000 fe39 	bl	8023b08 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 8022e96:	683b      	ldr	r3, [r7, #0]
 8022e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022e9a:	687b      	ldr	r3, [r7, #4]
 8022e9c:	629a      	str	r2, [r3, #40]	; 0x28
 8022e9e:	683b      	ldr	r3, [r7, #0]
 8022ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022ea2:	687b      	ldr	r3, [r7, #4]
 8022ea4:	62da      	str	r2, [r3, #44]	; 0x2c
 8022ea6:	687b      	ldr	r3, [r7, #4]
 8022ea8:	4618      	mov	r0, r3
 8022eaa:	3708      	adds	r7, #8
 8022eac:	46bd      	mov	sp, r7
 8022eae:	bd80      	pop	{r7, pc}

08022eb0 <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>:
 8022eb0:	b580      	push	{r7, lr}
 8022eb2:	b082      	sub	sp, #8
 8022eb4:	af00      	add	r7, sp, #0
 8022eb6:	6078      	str	r0, [r7, #4]
 8022eb8:	6039      	str	r1, [r7, #0]
 8022eba:	687b      	ldr	r3, [r7, #4]
 8022ebc:	683a      	ldr	r2, [r7, #0]
 8022ebe:	4611      	mov	r1, r2
 8022ec0:	4618      	mov	r0, r3
 8022ec2:	f000 fe34 	bl	8023b2e <_ZNSt5dequeIjSaIjEEaSEOS1_>
 8022ec6:	687b      	ldr	r3, [r7, #4]
 8022ec8:	4618      	mov	r0, r3
 8022eca:	3708      	adds	r7, #8
 8022ecc:	46bd      	mov	sp, r7
 8022ece:	bd80      	pop	{r7, pc}

08022ed0 <_ZN20StrobeDurationFilteraSEOS_>:
class StrobeDurationFilter {
 8022ed0:	b580      	push	{r7, lr}
 8022ed2:	b082      	sub	sp, #8
 8022ed4:	af00      	add	r7, sp, #0
 8022ed6:	6078      	str	r0, [r7, #4]
 8022ed8:	6039      	str	r1, [r7, #0]
 8022eda:	683b      	ldr	r3, [r7, #0]
 8022edc:	681a      	ldr	r2, [r3, #0]
 8022ede:	687b      	ldr	r3, [r7, #4]
 8022ee0:	601a      	str	r2, [r3, #0]
 8022ee2:	683b      	ldr	r3, [r7, #0]
 8022ee4:	685a      	ldr	r2, [r3, #4]
 8022ee6:	687b      	ldr	r3, [r7, #4]
 8022ee8:	605a      	str	r2, [r3, #4]
 8022eea:	683b      	ldr	r3, [r7, #0]
 8022eec:	689a      	ldr	r2, [r3, #8]
 8022eee:	687b      	ldr	r3, [r7, #4]
 8022ef0:	609a      	str	r2, [r3, #8]
 8022ef2:	683b      	ldr	r3, [r7, #0]
 8022ef4:	68da      	ldr	r2, [r3, #12]
 8022ef6:	687b      	ldr	r3, [r7, #4]
 8022ef8:	60da      	str	r2, [r3, #12]
 8022efa:	683b      	ldr	r3, [r7, #0]
 8022efc:	691a      	ldr	r2, [r3, #16]
 8022efe:	687b      	ldr	r3, [r7, #4]
 8022f00:	611a      	str	r2, [r3, #16]
 8022f02:	683b      	ldr	r3, [r7, #0]
 8022f04:	695a      	ldr	r2, [r3, #20]
 8022f06:	687b      	ldr	r3, [r7, #4]
 8022f08:	615a      	str	r2, [r3, #20]
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	f103 0218 	add.w	r2, r3, #24
 8022f10:	683b      	ldr	r3, [r7, #0]
 8022f12:	3318      	adds	r3, #24
 8022f14:	4619      	mov	r1, r3
 8022f16:	4610      	mov	r0, r2
 8022f18:	f7ff ffca 	bl	8022eb0 <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>
 8022f1c:	683b      	ldr	r3, [r7, #0]
 8022f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8022f20:	687b      	ldr	r3, [r7, #4]
 8022f22:	641a      	str	r2, [r3, #64]	; 0x40
 8022f24:	687b      	ldr	r3, [r7, #4]
 8022f26:	4618      	mov	r0, r3
 8022f28:	3708      	adds	r7, #8
 8022f2a:	46bd      	mov	sp, r7
 8022f2c:	bd80      	pop	{r7, pc}
	...

08022f30 <_ZN18MotherboardContextaSEOS_>:
 8022f30:	b580      	push	{r7, lr}
 8022f32:	b082      	sub	sp, #8
 8022f34:	af00      	add	r7, sp, #0
 8022f36:	6078      	str	r0, [r7, #4]
 8022f38:	6039      	str	r1, [r7, #0]
 8022f3a:	687a      	ldr	r2, [r7, #4]
 8022f3c:	683b      	ldr	r3, [r7, #0]
 8022f3e:	4610      	mov	r0, r2
 8022f40:	4619      	mov	r1, r3
 8022f42:	f640 43a1 	movw	r3, #3233	; 0xca1
 8022f46:	461a      	mov	r2, r3
 8022f48:	f018 fe82 	bl	803bc50 <memcpy>
 8022f4c:	687a      	ldr	r2, [r7, #4]
 8022f4e:	683b      	ldr	r3, [r7, #0]
 8022f50:	f602 40a4 	addw	r0, r2, #3236	; 0xca4
 8022f54:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022f58:	f640 42a1 	movw	r2, #3233	; 0xca1
 8022f5c:	4619      	mov	r1, r3
 8022f5e:	f018 fe77 	bl	803bc50 <memcpy>
 8022f62:	687b      	ldr	r3, [r7, #4]
 8022f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022f68:	461a      	mov	r2, r3
 8022f6a:	683b      	ldr	r3, [r7, #0]
 8022f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022f70:	f8b3 3948 	ldrh.w	r3, [r3, #2376]	; 0x948
 8022f74:	f8a2 3948 	strh.w	r3, [r2, #2376]	; 0x948
 8022f78:	687b      	ldr	r3, [r7, #4]
 8022f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022f7e:	4619      	mov	r1, r3
 8022f80:	683b      	ldr	r3, [r7, #0]
 8022f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022f86:	461a      	mov	r2, r3
 8022f88:	f601 134c 	addw	r3, r1, #2380	; 0x94c
 8022f8c:	f602 114c 	addw	r1, r2, #2380	; 0x94c
 8022f90:	4a25      	ldr	r2, [pc, #148]	; (8023028 <_ZN18MotherboardContextaSEOS_+0xf8>)
 8022f92:	4618      	mov	r0, r3
 8022f94:	f018 fe5c 	bl	803bc50 <memcpy>
 8022f98:	687a      	ldr	r2, [r7, #4]
 8022f9a:	4b24      	ldr	r3, [pc, #144]	; (802302c <_ZN18MotherboardContextaSEOS_+0xfc>)
 8022f9c:	4413      	add	r3, r2
 8022f9e:	6839      	ldr	r1, [r7, #0]
 8022fa0:	4a22      	ldr	r2, [pc, #136]	; (802302c <_ZN18MotherboardContextaSEOS_+0xfc>)
 8022fa2:	440a      	add	r2, r1
 8022fa4:	4611      	mov	r1, r2
 8022fa6:	4618      	mov	r0, r3
 8022fa8:	f7ff ff52 	bl	8022e50 <_ZN17IMUFrameContaineraSEOS_>
 8022fac:	687a      	ldr	r2, [r7, #4]
 8022fae:	4b20      	ldr	r3, [pc, #128]	; (8023030 <_ZN18MotherboardContextaSEOS_+0x100>)
 8022fb0:	4413      	add	r3, r2
 8022fb2:	6839      	ldr	r1, [r7, #0]
 8022fb4:	4a1e      	ldr	r2, [pc, #120]	; (8023030 <_ZN18MotherboardContextaSEOS_+0x100>)
 8022fb6:	440a      	add	r2, r1
 8022fb8:	4611      	mov	r1, r2
 8022fba:	4618      	mov	r0, r3
 8022fbc:	f7ff ff60 	bl	8022e80 <_ZN12IMUFrameMemoaSEOS_>
 8022fc0:	687b      	ldr	r3, [r7, #4]
 8022fc2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8022fc6:	4619      	mov	r1, r3
 8022fc8:	683b      	ldr	r3, [r7, #0]
 8022fca:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8022fce:	461a      	mov	r2, r3
 8022fd0:	f501 73d0 	add.w	r3, r1, #416	; 0x1a0
 8022fd4:	f502 71d0 	add.w	r1, r2, #416	; 0x1a0
 8022fd8:	f241 1254 	movw	r2, #4436	; 0x1154
 8022fdc:	4618      	mov	r0, r3
 8022fde:	f018 fe37 	bl	803bc50 <memcpy>
 8022fe2:	687a      	ldr	r2, [r7, #4]
 8022fe4:	4b13      	ldr	r3, [pc, #76]	; (8023034 <_ZN18MotherboardContextaSEOS_+0x104>)
 8022fe6:	4413      	add	r3, r2
 8022fe8:	6839      	ldr	r1, [r7, #0]
 8022fea:	4a12      	ldr	r2, [pc, #72]	; (8023034 <_ZN18MotherboardContextaSEOS_+0x104>)
 8022fec:	440a      	add	r2, r1
 8022fee:	4611      	mov	r1, r2
 8022ff0:	4618      	mov	r0, r3
 8022ff2:	f7ff ff6d 	bl	8022ed0 <_ZN20StrobeDurationFilteraSEOS_>
 8022ff6:	683b      	ldr	r3, [r7, #0]
 8022ff8:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8022ffc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8023000:	687a      	ldr	r2, [r7, #4]
 8023002:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
 8023006:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 802300a:	683b      	ldr	r3, [r7, #0]
 802300c:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023010:	f893 2344 	ldrb.w	r2, [r3, #836]	; 0x344
 8023014:	687b      	ldr	r3, [r7, #4]
 8023016:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 802301a:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 802301e:	687b      	ldr	r3, [r7, #4]
 8023020:	4618      	mov	r0, r3
 8023022:	3708      	adds	r7, #8
 8023024:	46bd      	mov	sp, r7
 8023026:	bd80      	pop	{r7, pc}
 8023028:	000217f4 	.word	0x000217f4
 802302c:	00023140 	.word	0x00023140
 8023030:	00023170 	.word	0x00023170
 8023034:	000242fc 	.word	0x000242fc

08023038 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 8023038:	b084      	sub	sp, #16
 802303a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802303c:	f5ad 3d10 	sub.w	sp, sp, #147456	; 0x24000
 8023040:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
 8023044:	af06      	add	r7, sp, #24
 8023046:	4c20      	ldr	r4, [pc, #128]	; (80230c8 <MotherboardInit+0x90>)
 8023048:	443c      	add	r4, r7
 802304a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 802304e:	4e1f      	ldr	r6, [pc, #124]	; (80230cc <MotherboardInit+0x94>)
 8023050:	4b1f      	ldr	r3, [pc, #124]	; (80230d0 <MotherboardInit+0x98>)
 8023052:	4433      	add	r3, r6
 8023054:	19de      	adds	r6, r3, r7
 8023056:	466d      	mov	r5, sp
 8023058:	4c1e      	ldr	r4, [pc, #120]	; (80230d4 <MotherboardInit+0x9c>)
 802305a:	443c      	add	r4, r7
 802305c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802305e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8023060:	e894 0003 	ldmia.w	r4, {r0, r1}
 8023064:	e885 0003 	stmia.w	r5, {r0, r1}
 8023068:	4b17      	ldr	r3, [pc, #92]	; (80230c8 <MotherboardInit+0x90>)
 802306a:	443b      	add	r3, r7
 802306c:	cb0e      	ldmia	r3, {r1, r2, r3}
 802306e:	4630      	mov	r0, r6
 8023070:	f7ff fdb8 	bl	8022be4 <_ZN18MotherboardContextC1E17MotherboardConfig>
 8023074:	4b15      	ldr	r3, [pc, #84]	; (80230cc <MotherboardInit+0x94>)
 8023076:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 802307a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 802307e:	443b      	add	r3, r7
 8023080:	4619      	mov	r1, r3
 8023082:	4815      	ldr	r0, [pc, #84]	; (80230d8 <MotherboardInit+0xa0>)
 8023084:	f7ff ff54 	bl	8022f30 <_ZN18MotherboardContextaSEOS_>
 8023088:	4b10      	ldr	r3, [pc, #64]	; (80230cc <MotherboardInit+0x94>)
 802308a:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 802308e:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8023092:	443b      	add	r3, r7
 8023094:	4618      	mov	r0, r3
 8023096:	f7ff feb9 	bl	8022e0c <_ZN18MotherboardContextD1Ev>

	mbctx.HeadService.ResetReadState();
 802309a:	480f      	ldr	r0, [pc, #60]	; (80230d8 <MotherboardInit+0xa0>)
 802309c:	f7fe fd3e 	bl	8021b1c <_ZN13HeadInterface14ResetReadStateEv>
	mbctx.HeadStream.ResetReadState();
 80230a0:	480e      	ldr	r0, [pc, #56]	; (80230dc <MotherboardInit+0xa4>)
 80230a2:	f7fe fd3b 	bl	8021b1c <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 80230a6:	2100      	movs	r1, #0
 80230a8:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80230e0 <MotherboardInit+0xa8>
 80230ac:	480d      	ldr	r0, [pc, #52]	; (80230e4 <MotherboardInit+0xac>)
 80230ae:	f7fd fb0d 	bl	80206cc <_ZN10BHYWrapper4InitEfm>
 80230b2:	4603      	mov	r3, r0
}
 80230b4:	4618      	mov	r0, r3
 80230b6:	f507 3710 	add.w	r7, r7, #147456	; 0x24000
 80230ba:	f507 7753 	add.w	r7, r7, #844	; 0x34c
 80230be:	46bd      	mov	sp, r7
 80230c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80230c4:	b004      	add	sp, #16
 80230c6:	4770      	bx	lr
 80230c8:	00024360 	.word	0x00024360
 80230cc:	fffdbcb8 	.word	0xfffdbcb8
 80230d0:	00024348 	.word	0x00024348
 80230d4:	0002436c 	.word	0x0002436c
 80230d8:	240001d0 	.word	0x240001d0
 80230dc:	24000e74 	.word	0x24000e74
 80230e0:	44480000 	.word	0x44480000
 80230e4:	24023370 	.word	0x24023370

080230e8 <MotherboardTick>:

int MotherboardTick() {
 80230e8:	b580      	push	{r7, lr}
 80230ea:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 80230ee:	af04      	add	r7, sp, #16
	if (mbctx.StrobeFilter.HasStrobe()) {
 80230f0:	485f      	ldr	r0, [pc, #380]	; (8023270 <MotherboardTick+0x188>)
 80230f2:	f7ff f88f 	bl	8022214 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 80230f6:	4603      	mov	r3, r0
 80230f8:	2b00      	cmp	r3, #0
 80230fa:	d026      	beq.n	802314a <MotherboardTick+0x62>
		size_t targetSeq = mbctx.StrobeFilter.GetStrobe() + mbctx.StrobeOffset;
 80230fc:	485c      	ldr	r0, [pc, #368]	; (8023270 <MotherboardTick+0x188>)
 80230fe:	f7ff f867 	bl	80221d0 <_ZNK20StrobeDurationFilter9GetStrobeEv>
 8023102:	4602      	mov	r2, r0
 8023104:	4b5b      	ldr	r3, [pc, #364]	; (8023274 <MotherboardTick+0x18c>)
 8023106:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 802310a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 802310e:	4413      	add	r3, r2
 8023110:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
		if (mbctx.FrameMemo.Has(targetSeq)) {
 8023114:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 8023118:	4857      	ldr	r0, [pc, #348]	; (8023278 <MotherboardTick+0x190>)
 802311a:	f7ff fbdd 	bl	80228d8 <_ZNK12IMUFrameMemo3HasEj>
 802311e:	4603      	mov	r3, r0
 8023120:	2b00      	cmp	r3, #0
 8023122:	d012      	beq.n	802314a <MotherboardTick+0x62>
			mbctx.FrameContainer.Add(mbctx.FrameMemo.Get(targetSeq));
 8023124:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023128:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 802312c:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8023130:	4951      	ldr	r1, [pc, #324]	; (8023278 <MotherboardTick+0x190>)
 8023132:	4618      	mov	r0, r3
 8023134:	f7ff fbf6 	bl	8022924 <_ZNK12IMUFrameMemo3GetEj>
 8023138:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 802313c:	4619      	mov	r1, r3
 802313e:	484f      	ldr	r0, [pc, #316]	; (802327c <MotherboardTick+0x194>)
 8023140:	f7fe ff18 	bl	8021f74 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
			mbctx.StrobeFilter.PopStrobe();
 8023144:	484a      	ldr	r0, [pc, #296]	; (8023270 <MotherboardTick+0x188>)
 8023146:	f7ff f876 	bl	8022236 <_ZN20StrobeDurationFilter9PopStrobeEv>
		}
	}

	if (mbctx.UpdateIMU && mbctx.IMU.Poll()) {
 802314a:	4b4a      	ldr	r3, [pc, #296]	; (8023274 <MotherboardTick+0x18c>)
 802314c:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023150:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 8023154:	2b00      	cmp	r3, #0
 8023156:	d007      	beq.n	8023168 <MotherboardTick+0x80>
 8023158:	4849      	ldr	r0, [pc, #292]	; (8023280 <MotherboardTick+0x198>)
 802315a:	f7fd fc0f 	bl	802097c <_ZN10BHYWrapper4PollEv>
 802315e:	4603      	mov	r3, r0
 8023160:	2b00      	cmp	r3, #0
 8023162:	d001      	beq.n	8023168 <MotherboardTick+0x80>
 8023164:	2301      	movs	r3, #1
 8023166:	e000      	b.n	802316a <MotherboardTick+0x82>
 8023168:	2300      	movs	r3, #0
 802316a:	2b00      	cmp	r3, #0
 802316c:	d017      	beq.n	802319e <MotherboardTick+0xb6>
		mbctx.FrameMemo.Add(mbctx.IMU.GetFrame(), mbctx.IMU.GetSeq());
 802316e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023172:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8023176:	4942      	ldr	r1, [pc, #264]	; (8023280 <MotherboardTick+0x198>)
 8023178:	4618      	mov	r0, r3
 802317a:	f7fd fc43 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>
 802317e:	4840      	ldr	r0, [pc, #256]	; (8023280 <MotherboardTick+0x198>)
 8023180:	f7fd fd48 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 8023184:	4602      	mov	r2, r0
 8023186:	f507 7390 	add.w	r3, r7, #288	; 0x120
 802318a:	4619      	mov	r1, r3
 802318c:	483a      	ldr	r0, [pc, #232]	; (8023278 <MotherboardTick+0x190>)
 802318e:	f7ff fb73 	bl	8022878 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>
		mbctx.UpdateIMU = false;
 8023192:	4b38      	ldr	r3, [pc, #224]	; (8023274 <MotherboardTick+0x18c>)
 8023194:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023198:	2200      	movs	r2, #0
 802319a:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
	}

	if (mbctx.HeadService.HasRequest()) {
 802319e:	4835      	ldr	r0, [pc, #212]	; (8023274 <MotherboardTick+0x18c>)
 80231a0:	f7fe fce2 	bl	8021b68 <_ZNK13HeadInterface10HasRequestEv>
 80231a4:	4603      	mov	r3, r0
 80231a6:	2b00      	cmp	r3, #0
 80231a8:	d042      	beq.n	8023230 <MotherboardTick+0x148>
		Request request = mbctx.HeadService.GetRequest();
 80231aa:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80231ae:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80231b2:	4930      	ldr	r1, [pc, #192]	; (8023274 <MotherboardTick+0x18c>)
 80231b4:	4618      	mov	r0, r3
 80231b6:	f7fe fd67 	bl	8021c88 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 80231ba:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80231be:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 80231c2:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80231c6:	2b02      	cmp	r3, #2
 80231c8:	d006      	beq.n	80231d8 <MotherboardTick+0xf0>
 80231ca:	2b02      	cmp	r3, #2
 80231cc:	dc30      	bgt.n	8023230 <MotherboardTick+0x148>
 80231ce:	2b00      	cmp	r3, #0
 80231d0:	d012      	beq.n	80231f8 <MotherboardTick+0x110>
 80231d2:	2b01      	cmp	r3, #1
 80231d4:	d016      	beq.n	8023204 <MotherboardTick+0x11c>
 80231d6:	e02b      	b.n	8023230 <MotherboardTick+0x148>
		case Periphery::Ack:
			mbctx.HeadService.Send(mbctx.AckHandler.Handle(request));
 80231d8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80231dc:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 80231e0:	463a      	mov	r2, r7
 80231e2:	4928      	ldr	r1, [pc, #160]	; (8023284 <MotherboardTick+0x19c>)
 80231e4:	4618      	mov	r0, r3
 80231e6:	f7ff fc35 	bl	8022a54 <_ZN18AcknowledgeHandler6HandleERK7Request>
 80231ea:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80231ee:	4619      	mov	r1, r3
 80231f0:	4820      	ldr	r0, [pc, #128]	; (8023274 <MotherboardTick+0x18c>)
 80231f2:	f7fe fcc9 	bl	8021b88 <_ZN13HeadInterface4SendERK8Responce>
			break;
 80231f6:	e01b      	b.n	8023230 <MotherboardTick+0x148>

		case Periphery::Body:
			mbctx.Body.AddRequest(request);
 80231f8:	463b      	mov	r3, r7
 80231fa:	4619      	mov	r1, r3
 80231fc:	4822      	ldr	r0, [pc, #136]	; (8023288 <MotherboardTick+0x1a0>)
 80231fe:	f7fd ff57 	bl	80210b0 <_ZN11QueueSender10AddRequestERK7Request>
			break;
 8023202:	e015      	b.n	8023230 <MotherboardTick+0x148>
		case Periphery::Imu:
			mbctx.HeadService.Send(
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
							mbctx.IMU, mbctx.StrobeOffset, mbctx.StrobeFilter));
 8023204:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023208:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 802320c:	463a      	mov	r2, r7
 802320e:	4b18      	ldr	r3, [pc, #96]	; (8023270 <MotherboardTick+0x188>)
 8023210:	9302      	str	r3, [sp, #8]
 8023212:	4b1e      	ldr	r3, [pc, #120]	; (802328c <MotherboardTick+0x1a4>)
 8023214:	9301      	str	r3, [sp, #4]
 8023216:	4b1a      	ldr	r3, [pc, #104]	; (8023280 <MotherboardTick+0x198>)
 8023218:	9300      	str	r3, [sp, #0]
 802321a:	4b18      	ldr	r3, [pc, #96]	; (802327c <MotherboardTick+0x194>)
 802321c:	491c      	ldr	r1, [pc, #112]	; (8023290 <MotherboardTick+0x1a8>)
 802321e:	f7ff fab9 	bl	8022794 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>
			mbctx.HeadService.Send(
 8023222:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8023226:	4619      	mov	r1, r3
 8023228:	4812      	ldr	r0, [pc, #72]	; (8023274 <MotherboardTick+0x18c>)
 802322a:	f7fe fcad 	bl	8021b88 <_ZN13HeadInterface4SendERK8Responce>
			break;
 802322e:	bf00      	nop
		}
	}

	if (mbctx.Body.HasResponce()) {
 8023230:	4815      	ldr	r0, [pc, #84]	; (8023288 <MotherboardTick+0x1a0>)
 8023232:	f7fd ffdd 	bl	80211f0 <_ZNK11QueueSender11HasResponceEv>
 8023236:	4603      	mov	r3, r0
 8023238:	2b00      	cmp	r3, #0
 802323a:	d00d      	beq.n	8023258 <MotherboardTick+0x170>
		mbctx.HeadService.Send(mbctx.Body.GetResponce());
 802323c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023240:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8023244:	4910      	ldr	r1, [pc, #64]	; (8023288 <MotherboardTick+0x1a0>)
 8023246:	4618      	mov	r0, r3
 8023248:	f7fe f834 	bl	80212b4 <_ZN11QueueSender11GetResponceEv>
 802324c:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8023250:	4619      	mov	r1, r3
 8023252:	4808      	ldr	r0, [pc, #32]	; (8023274 <MotherboardTick+0x18c>)
 8023254:	f7fe fc98 	bl	8021b88 <_ZN13HeadInterface4SendERK8Responce>
	}

	mbctx.Body.ProcessPriorityRequest();
 8023258:	480b      	ldr	r0, [pc, #44]	; (8023288 <MotherboardTick+0x1a0>)
 802325a:	f7fe f85f 	bl	802131c <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbctx.Body.ProcessRequests();
 802325e:	480a      	ldr	r0, [pc, #40]	; (8023288 <MotherboardTick+0x1a0>)
 8023260:	f7fe f976 	bl	8021550 <_ZN11QueueSender15ProcessRequestsEv>

	return 0;
 8023264:	2300      	movs	r3, #0
}
 8023266:	4618      	mov	r0, r3
 8023268:	f507 678a 	add.w	r7, r7, #1104	; 0x450
 802326c:	46bd      	mov	sp, r7
 802326e:	bd80      	pop	{r7, pc}
 8023270:	240244cc 	.word	0x240244cc
 8023274:	240001d0 	.word	0x240001d0
 8023278:	24023340 	.word	0x24023340
 802327c:	24023310 	.word	0x24023310
 8023280:	24023370 	.word	0x24023370
 8023284:	24001b18 	.word	0x24001b18
 8023288:	24001b1c 	.word	0x24001b1c
 802328c:	24024510 	.word	0x24024510
 8023290:	240244c8 	.word	0x240244c8

08023294 <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 8023294:	b580      	push	{r7, lr}
 8023296:	af00      	add	r7, sp, #0
	static bool firstEntry = true;
	if (firstEntry) {
 8023298:	4b06      	ldr	r3, [pc, #24]	; (80232b4 <MotherboardOnStrobe+0x20>)
 802329a:	781b      	ldrb	r3, [r3, #0]
 802329c:	2b00      	cmp	r3, #0
 802329e:	d003      	beq.n	80232a8 <MotherboardOnStrobe+0x14>
		firstEntry = false;
 80232a0:	4b04      	ldr	r3, [pc, #16]	; (80232b4 <MotherboardOnStrobe+0x20>)
 80232a2:	2200      	movs	r2, #0
 80232a4:	701a      	strb	r2, [r3, #0]
		return;
 80232a6:	e003      	b.n	80232b0 <MotherboardOnStrobe+0x1c>
	}

	mbctx.StrobeFilter.ProcessStrobe(mbctx.IMU);
 80232a8:	4903      	ldr	r1, [pc, #12]	; (80232b8 <MotherboardOnStrobe+0x24>)
 80232aa:	4804      	ldr	r0, [pc, #16]	; (80232bc <MotherboardOnStrobe+0x28>)
 80232ac:	f7fe fef9 	bl	80220a2 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>
}
 80232b0:	bd80      	pop	{r7, pc}
 80232b2:	bf00      	nop
 80232b4:	24000000 	.word	0x24000000
 80232b8:	24023370 	.word	0x24023370
 80232bc:	240244cc 	.word	0x240244cc

080232c0 <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 80232c0:	b580      	push	{r7, lr}
 80232c2:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessResponces();
 80232c4:	4802      	ldr	r0, [pc, #8]	; (80232d0 <MotherboardOnBodyRecieveComplete+0x10>)
 80232c6:	f7fe fbad 	bl	8021a24 <_ZN11QueueSender16ProcessResponcesEv>
}
 80232ca:	bf00      	nop
 80232cc:	bd80      	pop	{r7, pc}
 80232ce:	bf00      	nop
 80232d0:	24001b1c 	.word	0x24001b1c

080232d4 <MotherboardOnHeadServiceRecieveComplete>:

void MotherboardOnHeadServiceRecieveComplete() {
 80232d4:	b580      	push	{r7, lr}
 80232d6:	af00      	add	r7, sp, #0
	mbctx.HeadService.ProcessRecievedData();
 80232d8:	4802      	ldr	r0, [pc, #8]	; (80232e4 <MotherboardOnHeadServiceRecieveComplete+0x10>)
 80232da:	f7fe fd11 	bl	8021d00 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80232de:	bf00      	nop
 80232e0:	bd80      	pop	{r7, pc}
 80232e2:	bf00      	nop
 80232e4:	240001d0 	.word	0x240001d0

080232e8 <MotherboardOnHeadStreamRecieveComplete>:

void MotherboardOnHeadStreamRecieveComplete() {
 80232e8:	b580      	push	{r7, lr}
 80232ea:	af00      	add	r7, sp, #0
	mbctx.HeadStream.ProcessRecievedData();
 80232ec:	4802      	ldr	r0, [pc, #8]	; (80232f8 <MotherboardOnHeadStreamRecieveComplete+0x10>)
 80232ee:	f7fe fd07 	bl	8021d00 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 80232f2:	bf00      	nop
 80232f4:	bd80      	pop	{r7, pc}
 80232f6:	bf00      	nop
 80232f8:	24000e74 	.word	0x24000e74

080232fc <MotherboardOnHeadServiceTransmitComplete>:

void MotherboardOnHeadServiceTransmitComplete() {
 80232fc:	b580      	push	{r7, lr}
 80232fe:	af00      	add	r7, sp, #0
	mbctx.HeadService.FinishTransmit();
 8023300:	4802      	ldr	r0, [pc, #8]	; (802330c <MotherboardOnHeadServiceTransmitComplete+0x10>)
 8023302:	f7fe fcef 	bl	8021ce4 <_ZN13HeadInterface14FinishTransmitEv>
}
 8023306:	bf00      	nop
 8023308:	bd80      	pop	{r7, pc}
 802330a:	bf00      	nop
 802330c:	240001d0 	.word	0x240001d0

08023310 <MotherboardOnHeadStreamTransmitComplete>:

void MotherboardOnHeadStreamTransmitComplete() {
 8023310:	b580      	push	{r7, lr}
 8023312:	af00      	add	r7, sp, #0
	mbctx.HeadStream.FinishTransmit();
 8023314:	4802      	ldr	r0, [pc, #8]	; (8023320 <MotherboardOnHeadStreamTransmitComplete+0x10>)
 8023316:	f7fe fce5 	bl	8021ce4 <_ZN13HeadInterface14FinishTransmitEv>
}
 802331a:	bf00      	nop
 802331c:	bd80      	pop	{r7, pc}
 802331e:	bf00      	nop
 8023320:	24000e74 	.word	0x24000e74

08023324 <MotherboardOnBodyTransmitComplete>:

void MotherboardOnBodyTransmitComplete() {
 8023324:	b580      	push	{r7, lr}
 8023326:	af00      	add	r7, sp, #0
	mbctx.Body.FinishTransmit();
 8023328:	4802      	ldr	r0, [pc, #8]	; (8023334 <MotherboardOnBodyTransmitComplete+0x10>)
 802332a:	f7fe fb85 	bl	8021a38 <_ZN11QueueSender14FinishTransmitEv>
}
 802332e:	bf00      	nop
 8023330:	bd80      	pop	{r7, pc}
 8023332:	bf00      	nop
 8023334:	24001b1c 	.word	0x24001b1c

08023338 <MotherboardOnBodyTimerTick>:
void MotherboardOnBodyTimerTick() {
 8023338:	b580      	push	{r7, lr}
 802333a:	af00      	add	r7, sp, #0
	mbctx.Body.TickTimer();
 802333c:	4802      	ldr	r0, [pc, #8]	; (8023348 <MotherboardOnBodyTimerTick+0x10>)
 802333e:	f7fd ff6b 	bl	8021218 <_ZN11QueueSender9TickTimerEv>
}
 8023342:	bf00      	nop
 8023344:	bd80      	pop	{r7, pc}
 8023346:	bf00      	nop
 8023348:	24001b1c 	.word	0x24001b1c

0802334c <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 802334c:	b480      	push	{r7}
 802334e:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 8023350:	4b05      	ldr	r3, [pc, #20]	; (8023368 <MotherboardOnImuTimerTick+0x1c>)
 8023352:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023356:	2201      	movs	r2, #1
 8023358:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
}
 802335c:	bf00      	nop
 802335e:	46bd      	mov	sp, r7
 8023360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023364:	4770      	bx	lr
 8023366:	bf00      	nop
 8023368:	240001d0 	.word	0x240001d0

0802336c <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_>:
	bool Push(const T& rhs) {
 802336c:	b580      	push	{r7, lr}
 802336e:	b082      	sub	sp, #8
 8023370:	af00      	add	r7, sp, #0
 8023372:	6078      	str	r0, [r7, #4]
 8023374:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	681b      	ldr	r3, [r3, #0]
 802337a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 802337e:	d105      	bne.n	802338c <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x20>
 8023380:	4b17      	ldr	r3, [pc, #92]	; (80233e0 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x74>)
 8023382:	4a18      	ldr	r2, [pc, #96]	; (80233e4 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x78>)
 8023384:	2143      	movs	r1, #67	; 0x43
 8023386:	4818      	ldr	r0, [pc, #96]	; (80233e8 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x7c>)
 8023388:	f018 fbf8 	bl	803bb7c <__assert_func>
		Buffer[Head] = rhs;
 802338c:	687b      	ldr	r3, [r7, #4]
 802338e:	f103 020c 	add.w	r2, r3, #12
 8023392:	687b      	ldr	r3, [r7, #4]
 8023394:	685b      	ldr	r3, [r3, #4]
 8023396:	4619      	mov	r1, r3
 8023398:	4610      	mov	r0, r2
 802339a:	f000 fbdb 	bl	8023b54 <_ZNSt5arrayI7RequestLj500EEixEj>
 802339e:	4602      	mov	r2, r0
 80233a0:	683b      	ldr	r3, [r7, #0]
 80233a2:	4610      	mov	r0, r2
 80233a4:	4619      	mov	r1, r3
 80233a6:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80233aa:	461a      	mov	r2, r3
 80233ac:	f018 fc50 	bl	803bc50 <memcpy>
		Head = (Head + 1) % Capacity;
 80233b0:	687b      	ldr	r3, [r7, #4]
 80233b2:	685b      	ldr	r3, [r3, #4]
 80233b4:	1c5a      	adds	r2, r3, #1
 80233b6:	4b0d      	ldr	r3, [pc, #52]	; (80233ec <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x80>)
 80233b8:	fba3 1302 	umull	r1, r3, r3, r2
 80233bc:	095b      	lsrs	r3, r3, #5
 80233be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80233c2:	fb01 f303 	mul.w	r3, r1, r3
 80233c6:	1ad3      	subs	r3, r2, r3
 80233c8:	687a      	ldr	r2, [r7, #4]
 80233ca:	6053      	str	r3, [r2, #4]
		Size++;
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	681b      	ldr	r3, [r3, #0]
 80233d0:	1c5a      	adds	r2, r3, #1
 80233d2:	687b      	ldr	r3, [r7, #4]
 80233d4:	601a      	str	r2, [r3, #0]
		return true;
 80233d6:	2301      	movs	r3, #1
	}
 80233d8:	4618      	mov	r0, r3
 80233da:	3708      	adds	r7, #8
 80233dc:	46bd      	mov	sp, r7
 80233de:	bd80      	pop	{r7, pc}
 80233e0:	0803d84c 	.word	0x0803d84c
 80233e4:	0803d860 	.word	0x0803d860
 80233e8:	0803cdd0 	.word	0x0803cdd0
 80233ec:	10624dd3 	.word	0x10624dd3

080233f0 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>:
	bool Push(const T& rhs) {
 80233f0:	b580      	push	{r7, lr}
 80233f2:	b082      	sub	sp, #8
 80233f4:	af00      	add	r7, sp, #0
 80233f6:	6078      	str	r0, [r7, #4]
 80233f8:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 80233fa:	687b      	ldr	r3, [r7, #4]
 80233fc:	681b      	ldr	r3, [r3, #0]
 80233fe:	2b0a      	cmp	r3, #10
 8023400:	d105      	bne.n	802340e <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x1e>
 8023402:	4b18      	ldr	r3, [pc, #96]	; (8023464 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x74>)
 8023404:	4a18      	ldr	r2, [pc, #96]	; (8023468 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x78>)
 8023406:	2143      	movs	r1, #67	; 0x43
 8023408:	4818      	ldr	r0, [pc, #96]	; (802346c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x7c>)
 802340a:	f018 fbb7 	bl	803bb7c <__assert_func>
		Buffer[Head] = rhs;
 802340e:	687b      	ldr	r3, [r7, #4]
 8023410:	f103 020c 	add.w	r2, r3, #12
 8023414:	687b      	ldr	r3, [r7, #4]
 8023416:	685b      	ldr	r3, [r3, #4]
 8023418:	4619      	mov	r1, r3
 802341a:	4610      	mov	r0, r2
 802341c:	f000 fba9 	bl	8023b72 <_ZNSt5arrayI8ResponceLj10EEixEj>
 8023420:	4602      	mov	r2, r0
 8023422:	683b      	ldr	r3, [r7, #0]
 8023424:	4610      	mov	r0, r2
 8023426:	4619      	mov	r1, r3
 8023428:	f44f 7384 	mov.w	r3, #264	; 0x108
 802342c:	461a      	mov	r2, r3
 802342e:	f018 fc0f 	bl	803bc50 <memcpy>
		Head = (Head + 1) % Capacity;
 8023432:	687b      	ldr	r3, [r7, #4]
 8023434:	685b      	ldr	r3, [r3, #4]
 8023436:	1c59      	adds	r1, r3, #1
 8023438:	4b0d      	ldr	r3, [pc, #52]	; (8023470 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x80>)
 802343a:	fba3 2301 	umull	r2, r3, r3, r1
 802343e:	08da      	lsrs	r2, r3, #3
 8023440:	4613      	mov	r3, r2
 8023442:	009b      	lsls	r3, r3, #2
 8023444:	4413      	add	r3, r2
 8023446:	005b      	lsls	r3, r3, #1
 8023448:	1aca      	subs	r2, r1, r3
 802344a:	687b      	ldr	r3, [r7, #4]
 802344c:	605a      	str	r2, [r3, #4]
		Size++;
 802344e:	687b      	ldr	r3, [r7, #4]
 8023450:	681b      	ldr	r3, [r3, #0]
 8023452:	1c5a      	adds	r2, r3, #1
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	601a      	str	r2, [r3, #0]
		return true;
 8023458:	2301      	movs	r3, #1
	}
 802345a:	4618      	mov	r0, r3
 802345c:	3708      	adds	r7, #8
 802345e:	46bd      	mov	sp, r7
 8023460:	bd80      	pop	{r7, pc}
 8023462:	bf00      	nop
 8023464:	0803d84c 	.word	0x0803d84c
 8023468:	0803d8c0 	.word	0x0803d8c0
 802346c:	0803cdd0 	.word	0x0803cdd0
 8023470:	cccccccd 	.word	0xcccccccd

08023474 <_ZNK10FixedQueueI8ResponceLj10EE5EmptyEv>:
	bool Empty() const {
 8023474:	b480      	push	{r7}
 8023476:	b083      	sub	sp, #12
 8023478:	af00      	add	r7, sp, #0
 802347a:	6078      	str	r0, [r7, #4]
		return Size == 0;
 802347c:	687b      	ldr	r3, [r7, #4]
 802347e:	681b      	ldr	r3, [r3, #0]
 8023480:	2b00      	cmp	r3, #0
 8023482:	bf0c      	ite	eq
 8023484:	2301      	moveq	r3, #1
 8023486:	2300      	movne	r3, #0
 8023488:	b2db      	uxtb	r3, r3
	}
 802348a:	4618      	mov	r0, r3
 802348c:	370c      	adds	r7, #12
 802348e:	46bd      	mov	sp, r7
 8023490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023494:	4770      	bx	lr
	...

08023498 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv>:
	const T& Front() const {
 8023498:	b580      	push	{r7, lr}
 802349a:	b082      	sub	sp, #8
 802349c:	af00      	add	r7, sp, #0
 802349e:	6078      	str	r0, [r7, #4]
		assert(Size);
 80234a0:	687b      	ldr	r3, [r7, #4]
 80234a2:	681b      	ldr	r3, [r3, #0]
 80234a4:	2b00      	cmp	r3, #0
 80234a6:	d105      	bne.n	80234b4 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x1c>
 80234a8:	4b09      	ldr	r3, [pc, #36]	; (80234d0 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x38>)
 80234aa:	4a0a      	ldr	r2, [pc, #40]	; (80234d4 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x3c>)
 80234ac:	2153      	movs	r1, #83	; 0x53
 80234ae:	480a      	ldr	r0, [pc, #40]	; (80234d8 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x40>)
 80234b0:	f018 fb64 	bl	803bb7c <__assert_func>
		return Buffer[Tail];
 80234b4:	687b      	ldr	r3, [r7, #4]
 80234b6:	f103 020c 	add.w	r2, r3, #12
 80234ba:	687b      	ldr	r3, [r7, #4]
 80234bc:	689b      	ldr	r3, [r3, #8]
 80234be:	4619      	mov	r1, r3
 80234c0:	4610      	mov	r0, r2
 80234c2:	f000 fb65 	bl	8023b90 <_ZNKSt5arrayI8ResponceLj10EEixEj>
 80234c6:	4603      	mov	r3, r0
	}
 80234c8:	4618      	mov	r0, r3
 80234ca:	3708      	adds	r7, #8
 80234cc:	46bd      	mov	sp, r7
 80234ce:	bd80      	pop	{r7, pc}
 80234d0:	0803d920 	.word	0x0803d920
 80234d4:	0803d928 	.word	0x0803d928
 80234d8:	0803cdd0 	.word	0x0803cdd0

080234dc <_ZN10FixedQueueI8ResponceLj10EE3PopEv>:
	bool Pop() {
 80234dc:	b580      	push	{r7, lr}
 80234de:	b082      	sub	sp, #8
 80234e0:	af00      	add	r7, sp, #0
 80234e2:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 80234e4:	687b      	ldr	r3, [r7, #4]
 80234e6:	681b      	ldr	r3, [r3, #0]
 80234e8:	2b00      	cmp	r3, #0
 80234ea:	d105      	bne.n	80234f8 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x1c>
 80234ec:	4b0e      	ldr	r3, [pc, #56]	; (8023528 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x4c>)
 80234ee:	4a0f      	ldr	r2, [pc, #60]	; (802352c <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x50>)
 80234f0:	214d      	movs	r1, #77	; 0x4d
 80234f2:	480f      	ldr	r0, [pc, #60]	; (8023530 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x54>)
 80234f4:	f018 fb42 	bl	803bb7c <__assert_func>
		Tail = (Tail + 1) % Capacity;
 80234f8:	687b      	ldr	r3, [r7, #4]
 80234fa:	689b      	ldr	r3, [r3, #8]
 80234fc:	1c59      	adds	r1, r3, #1
 80234fe:	4b0d      	ldr	r3, [pc, #52]	; (8023534 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x58>)
 8023500:	fba3 2301 	umull	r2, r3, r3, r1
 8023504:	08da      	lsrs	r2, r3, #3
 8023506:	4613      	mov	r3, r2
 8023508:	009b      	lsls	r3, r3, #2
 802350a:	4413      	add	r3, r2
 802350c:	005b      	lsls	r3, r3, #1
 802350e:	1aca      	subs	r2, r1, r3
 8023510:	687b      	ldr	r3, [r7, #4]
 8023512:	609a      	str	r2, [r3, #8]
		Size--;
 8023514:	687b      	ldr	r3, [r7, #4]
 8023516:	681b      	ldr	r3, [r3, #0]
 8023518:	1e5a      	subs	r2, r3, #1
 802351a:	687b      	ldr	r3, [r7, #4]
 802351c:	601a      	str	r2, [r3, #0]
	}
 802351e:	bf00      	nop
 8023520:	4618      	mov	r0, r3
 8023522:	3708      	adds	r7, #8
 8023524:	46bd      	mov	sp, r7
 8023526:	bd80      	pop	{r7, pc}
 8023528:	0803d988 	.word	0x0803d988
 802352c:	0803d994 	.word	0x0803d994
 8023530:	0803cdd0 	.word	0x0803cdd0
 8023534:	cccccccd 	.word	0xcccccccd

08023538 <_ZNSt5arrayIhLj256EE4dataEv>:
      data() noexcept
 8023538:	b580      	push	{r7, lr}
 802353a:	b082      	sub	sp, #8
 802353c:	af00      	add	r7, sp, #0
 802353e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8023540:	687b      	ldr	r3, [r7, #4]
 8023542:	4618      	mov	r0, r3
 8023544:	f000 fb33 	bl	8023bae <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 8023548:	4603      	mov	r3, r0
 802354a:	4618      	mov	r0, r3
 802354c:	3708      	adds	r7, #8
 802354e:	46bd      	mov	sp, r7
 8023550:	bd80      	pop	{r7, pc}

08023552 <_ZNK10FixedQueueI7RequestLj500EE5EmptyEv>:
	bool Empty() const {
 8023552:	b480      	push	{r7}
 8023554:	b083      	sub	sp, #12
 8023556:	af00      	add	r7, sp, #0
 8023558:	6078      	str	r0, [r7, #4]
		return Size == 0;
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	681b      	ldr	r3, [r3, #0]
 802355e:	2b00      	cmp	r3, #0
 8023560:	bf0c      	ite	eq
 8023562:	2301      	moveq	r3, #1
 8023564:	2300      	movne	r3, #0
 8023566:	b2db      	uxtb	r3, r3
	}
 8023568:	4618      	mov	r0, r3
 802356a:	370c      	adds	r7, #12
 802356c:	46bd      	mov	sp, r7
 802356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023572:	4770      	bx	lr

08023574 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv>:
	const T& Front() const {
 8023574:	b580      	push	{r7, lr}
 8023576:	b082      	sub	sp, #8
 8023578:	af00      	add	r7, sp, #0
 802357a:	6078      	str	r0, [r7, #4]
		assert(Size);
 802357c:	687b      	ldr	r3, [r7, #4]
 802357e:	681b      	ldr	r3, [r3, #0]
 8023580:	2b00      	cmp	r3, #0
 8023582:	d105      	bne.n	8023590 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x1c>
 8023584:	4b09      	ldr	r3, [pc, #36]	; (80235ac <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x38>)
 8023586:	4a0a      	ldr	r2, [pc, #40]	; (80235b0 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x3c>)
 8023588:	2153      	movs	r1, #83	; 0x53
 802358a:	480a      	ldr	r0, [pc, #40]	; (80235b4 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x40>)
 802358c:	f018 faf6 	bl	803bb7c <__assert_func>
		return Buffer[Tail];
 8023590:	687b      	ldr	r3, [r7, #4]
 8023592:	f103 020c 	add.w	r2, r3, #12
 8023596:	687b      	ldr	r3, [r7, #4]
 8023598:	689b      	ldr	r3, [r3, #8]
 802359a:	4619      	mov	r1, r3
 802359c:	4610      	mov	r0, r2
 802359e:	f000 fb11 	bl	8023bc4 <_ZNKSt5arrayI7RequestLj500EEixEj>
 80235a2:	4603      	mov	r3, r0
	}
 80235a4:	4618      	mov	r0, r3
 80235a6:	3708      	adds	r7, #8
 80235a8:	46bd      	mov	sp, r7
 80235aa:	bd80      	pop	{r7, pc}
 80235ac:	0803d920 	.word	0x0803d920
 80235b0:	0803d9e8 	.word	0x0803d9e8
 80235b4:	0803cdd0 	.word	0x0803cdd0

080235b8 <_ZNKSt5arrayIhLj256EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 80235b8:	b580      	push	{r7, lr}
 80235ba:	b082      	sub	sp, #8
 80235bc:	af00      	add	r7, sp, #0
 80235be:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80235c0:	687b      	ldr	r3, [r7, #4]
 80235c2:	4618      	mov	r0, r3
 80235c4:	f000 faf3 	bl	8023bae <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 80235c8:	4603      	mov	r3, r0
 80235ca:	4618      	mov	r0, r3
 80235cc:	3708      	adds	r7, #8
 80235ce:	46bd      	mov	sp, r7
 80235d0:	bd80      	pop	{r7, pc}
	...

080235d4 <_ZN10FixedQueueI7RequestLj500EE3PopEv>:
	bool Pop() {
 80235d4:	b580      	push	{r7, lr}
 80235d6:	b082      	sub	sp, #8
 80235d8:	af00      	add	r7, sp, #0
 80235da:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 80235dc:	687b      	ldr	r3, [r7, #4]
 80235de:	681b      	ldr	r3, [r3, #0]
 80235e0:	2b00      	cmp	r3, #0
 80235e2:	d105      	bne.n	80235f0 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x1c>
 80235e4:	4b0e      	ldr	r3, [pc, #56]	; (8023620 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x4c>)
 80235e6:	4a0f      	ldr	r2, [pc, #60]	; (8023624 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x50>)
 80235e8:	214d      	movs	r1, #77	; 0x4d
 80235ea:	480f      	ldr	r0, [pc, #60]	; (8023628 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x54>)
 80235ec:	f018 fac6 	bl	803bb7c <__assert_func>
		Tail = (Tail + 1) % Capacity;
 80235f0:	687b      	ldr	r3, [r7, #4]
 80235f2:	689b      	ldr	r3, [r3, #8]
 80235f4:	1c5a      	adds	r2, r3, #1
 80235f6:	4b0d      	ldr	r3, [pc, #52]	; (802362c <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x58>)
 80235f8:	fba3 1302 	umull	r1, r3, r3, r2
 80235fc:	095b      	lsrs	r3, r3, #5
 80235fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8023602:	fb01 f303 	mul.w	r3, r1, r3
 8023606:	1ad3      	subs	r3, r2, r3
 8023608:	687a      	ldr	r2, [r7, #4]
 802360a:	6093      	str	r3, [r2, #8]
		Size--;
 802360c:	687b      	ldr	r3, [r7, #4]
 802360e:	681b      	ldr	r3, [r3, #0]
 8023610:	1e5a      	subs	r2, r3, #1
 8023612:	687b      	ldr	r3, [r7, #4]
 8023614:	601a      	str	r2, [r3, #0]
	}
 8023616:	bf00      	nop
 8023618:	4618      	mov	r0, r3
 802361a:	3708      	adds	r7, #8
 802361c:	46bd      	mov	sp, r7
 802361e:	bd80      	pop	{r7, pc}
 8023620:	0803d988 	.word	0x0803d988
 8023624:	0803da48 	.word	0x0803da48
 8023628:	0803cdd0 	.word	0x0803cdd0
 802362c:	10624dd3 	.word	0x10624dd3

08023630 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8023630:	b480      	push	{r7}
 8023632:	b083      	sub	sp, #12
 8023634:	af00      	add	r7, sp, #0
 8023636:	6078      	str	r0, [r7, #4]
 8023638:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 802363a:	687a      	ldr	r2, [r7, #4]
 802363c:	683b      	ldr	r3, [r7, #0]
 802363e:	4413      	add	r3, r2
 8023640:	4618      	mov	r0, r3
 8023642:	370c      	adds	r7, #12
 8023644:	46bd      	mov	sp, r7
 8023646:	f85d 7b04 	ldr.w	r7, [sp], #4
 802364a:	4770      	bx	lr

0802364c <_ZNK10FixedQueueI7RequestLj500EE7GetSizeEv>:
	size_t GetSize() const {
 802364c:	b480      	push	{r7}
 802364e:	b083      	sub	sp, #12
 8023650:	af00      	add	r7, sp, #0
 8023652:	6078      	str	r0, [r7, #4]
		return Size;
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	681b      	ldr	r3, [r3, #0]
	}
 8023658:	4618      	mov	r0, r3
 802365a:	370c      	adds	r7, #12
 802365c:	46bd      	mov	sp, r7
 802365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023662:	4770      	bx	lr

08023664 <_ZNK10FixedQueueI8ResponceLj10EE7GetSizeEv>:
	size_t GetSize() const {
 8023664:	b480      	push	{r7}
 8023666:	b083      	sub	sp, #12
 8023668:	af00      	add	r7, sp, #0
 802366a:	6078      	str	r0, [r7, #4]
		return Size;
 802366c:	687b      	ldr	r3, [r7, #4]
 802366e:	681b      	ldr	r3, [r3, #0]
	}
 8023670:	4618      	mov	r0, r3
 8023672:	370c      	adds	r7, #12
 8023674:	46bd      	mov	sp, r7
 8023676:	f85d 7b04 	ldr.w	r7, [sp], #4
 802367a:	4770      	bx	lr

0802367c <_ZNK10FixedQueueI7RequestLj10EE5EmptyEv>:
	bool Empty() const {
 802367c:	b480      	push	{r7}
 802367e:	b083      	sub	sp, #12
 8023680:	af00      	add	r7, sp, #0
 8023682:	6078      	str	r0, [r7, #4]
		return Size == 0;
 8023684:	687b      	ldr	r3, [r7, #4]
 8023686:	681b      	ldr	r3, [r3, #0]
 8023688:	2b00      	cmp	r3, #0
 802368a:	bf0c      	ite	eq
 802368c:	2301      	moveq	r3, #1
 802368e:	2300      	movne	r3, #0
 8023690:	b2db      	uxtb	r3, r3
	}
 8023692:	4618      	mov	r0, r3
 8023694:	370c      	adds	r7, #12
 8023696:	46bd      	mov	sp, r7
 8023698:	f85d 7b04 	ldr.w	r7, [sp], #4
 802369c:	4770      	bx	lr
	...

080236a0 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv>:
	const T& Front() const {
 80236a0:	b580      	push	{r7, lr}
 80236a2:	b082      	sub	sp, #8
 80236a4:	af00      	add	r7, sp, #0
 80236a6:	6078      	str	r0, [r7, #4]
		assert(Size);
 80236a8:	687b      	ldr	r3, [r7, #4]
 80236aa:	681b      	ldr	r3, [r3, #0]
 80236ac:	2b00      	cmp	r3, #0
 80236ae:	d105      	bne.n	80236bc <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x1c>
 80236b0:	4b09      	ldr	r3, [pc, #36]	; (80236d8 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x38>)
 80236b2:	4a0a      	ldr	r2, [pc, #40]	; (80236dc <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x3c>)
 80236b4:	2153      	movs	r1, #83	; 0x53
 80236b6:	480a      	ldr	r0, [pc, #40]	; (80236e0 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x40>)
 80236b8:	f018 fa60 	bl	803bb7c <__assert_func>
		return Buffer[Tail];
 80236bc:	687b      	ldr	r3, [r7, #4]
 80236be:	f103 020c 	add.w	r2, r3, #12
 80236c2:	687b      	ldr	r3, [r7, #4]
 80236c4:	689b      	ldr	r3, [r3, #8]
 80236c6:	4619      	mov	r1, r3
 80236c8:	4610      	mov	r0, r2
 80236ca:	f000 fa8a 	bl	8023be2 <_ZNKSt5arrayI7RequestLj10EEixEj>
 80236ce:	4603      	mov	r3, r0
	}
 80236d0:	4618      	mov	r0, r3
 80236d2:	3708      	adds	r7, #8
 80236d4:	46bd      	mov	sp, r7
 80236d6:	bd80      	pop	{r7, pc}
 80236d8:	0803d920 	.word	0x0803d920
 80236dc:	0803da9c 	.word	0x0803da9c
 80236e0:	0803cdd0 	.word	0x0803cdd0

080236e4 <_ZN10FixedQueueI7RequestLj10EE3PopEv>:
	bool Pop() {
 80236e4:	b580      	push	{r7, lr}
 80236e6:	b082      	sub	sp, #8
 80236e8:	af00      	add	r7, sp, #0
 80236ea:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 80236ec:	687b      	ldr	r3, [r7, #4]
 80236ee:	681b      	ldr	r3, [r3, #0]
 80236f0:	2b00      	cmp	r3, #0
 80236f2:	d105      	bne.n	8023700 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x1c>
 80236f4:	4b0e      	ldr	r3, [pc, #56]	; (8023730 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x4c>)
 80236f6:	4a0f      	ldr	r2, [pc, #60]	; (8023734 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x50>)
 80236f8:	214d      	movs	r1, #77	; 0x4d
 80236fa:	480f      	ldr	r0, [pc, #60]	; (8023738 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x54>)
 80236fc:	f018 fa3e 	bl	803bb7c <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8023700:	687b      	ldr	r3, [r7, #4]
 8023702:	689b      	ldr	r3, [r3, #8]
 8023704:	1c59      	adds	r1, r3, #1
 8023706:	4b0d      	ldr	r3, [pc, #52]	; (802373c <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x58>)
 8023708:	fba3 2301 	umull	r2, r3, r3, r1
 802370c:	08da      	lsrs	r2, r3, #3
 802370e:	4613      	mov	r3, r2
 8023710:	009b      	lsls	r3, r3, #2
 8023712:	4413      	add	r3, r2
 8023714:	005b      	lsls	r3, r3, #1
 8023716:	1aca      	subs	r2, r1, r3
 8023718:	687b      	ldr	r3, [r7, #4]
 802371a:	609a      	str	r2, [r3, #8]
		Size--;
 802371c:	687b      	ldr	r3, [r7, #4]
 802371e:	681b      	ldr	r3, [r3, #0]
 8023720:	1e5a      	subs	r2, r3, #1
 8023722:	687b      	ldr	r3, [r7, #4]
 8023724:	601a      	str	r2, [r3, #0]
	}
 8023726:	bf00      	nop
 8023728:	4618      	mov	r0, r3
 802372a:	3708      	adds	r7, #8
 802372c:	46bd      	mov	sp, r7
 802372e:	bd80      	pop	{r7, pc}
 8023730:	0803d988 	.word	0x0803d988
 8023734:	0803dafc 	.word	0x0803dafc
 8023738:	0803cdd0 	.word	0x0803cdd0
 802373c:	cccccccd 	.word	0xcccccccd

08023740 <_ZNK10FixedQueueI7RequestLj10EE7GetSizeEv>:
	size_t GetSize() const {
 8023740:	b480      	push	{r7}
 8023742:	b083      	sub	sp, #12
 8023744:	af00      	add	r7, sp, #0
 8023746:	6078      	str	r0, [r7, #4]
		return Size;
 8023748:	687b      	ldr	r3, [r7, #4]
 802374a:	681b      	ldr	r3, [r3, #0]
	}
 802374c:	4618      	mov	r0, r3
 802374e:	370c      	adds	r7, #12
 8023750:	46bd      	mov	sp, r7
 8023752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023756:	4770      	bx	lr

08023758 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_>:
	bool Push(const T& rhs) {
 8023758:	b580      	push	{r7, lr}
 802375a:	b082      	sub	sp, #8
 802375c:	af00      	add	r7, sp, #0
 802375e:	6078      	str	r0, [r7, #4]
 8023760:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 8023762:	687b      	ldr	r3, [r7, #4]
 8023764:	681b      	ldr	r3, [r3, #0]
 8023766:	2b0a      	cmp	r3, #10
 8023768:	d105      	bne.n	8023776 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x1e>
 802376a:	4b18      	ldr	r3, [pc, #96]	; (80237cc <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x74>)
 802376c:	4a18      	ldr	r2, [pc, #96]	; (80237d0 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x78>)
 802376e:	2143      	movs	r1, #67	; 0x43
 8023770:	4818      	ldr	r0, [pc, #96]	; (80237d4 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x7c>)
 8023772:	f018 fa03 	bl	803bb7c <__assert_func>
		Buffer[Head] = rhs;
 8023776:	687b      	ldr	r3, [r7, #4]
 8023778:	f103 020c 	add.w	r2, r3, #12
 802377c:	687b      	ldr	r3, [r7, #4]
 802377e:	685b      	ldr	r3, [r3, #4]
 8023780:	4619      	mov	r1, r3
 8023782:	4610      	mov	r0, r2
 8023784:	f000 fa3c 	bl	8023c00 <_ZNSt5arrayI7RequestLj10EEixEj>
 8023788:	4602      	mov	r2, r0
 802378a:	683b      	ldr	r3, [r7, #0]
 802378c:	4610      	mov	r0, r2
 802378e:	4619      	mov	r1, r3
 8023790:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8023794:	461a      	mov	r2, r3
 8023796:	f018 fa5b 	bl	803bc50 <memcpy>
		Head = (Head + 1) % Capacity;
 802379a:	687b      	ldr	r3, [r7, #4]
 802379c:	685b      	ldr	r3, [r3, #4]
 802379e:	1c59      	adds	r1, r3, #1
 80237a0:	4b0d      	ldr	r3, [pc, #52]	; (80237d8 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x80>)
 80237a2:	fba3 2301 	umull	r2, r3, r3, r1
 80237a6:	08da      	lsrs	r2, r3, #3
 80237a8:	4613      	mov	r3, r2
 80237aa:	009b      	lsls	r3, r3, #2
 80237ac:	4413      	add	r3, r2
 80237ae:	005b      	lsls	r3, r3, #1
 80237b0:	1aca      	subs	r2, r1, r3
 80237b2:	687b      	ldr	r3, [r7, #4]
 80237b4:	605a      	str	r2, [r3, #4]
		Size++;
 80237b6:	687b      	ldr	r3, [r7, #4]
 80237b8:	681b      	ldr	r3, [r3, #0]
 80237ba:	1c5a      	adds	r2, r3, #1
 80237bc:	687b      	ldr	r3, [r7, #4]
 80237be:	601a      	str	r2, [r3, #0]
		return true;
 80237c0:	2301      	movs	r3, #1
	}
 80237c2:	4618      	mov	r0, r3
 80237c4:	3708      	adds	r7, #8
 80237c6:	46bd      	mov	sp, r7
 80237c8:	bd80      	pop	{r7, pc}
 80237ca:	bf00      	nop
 80237cc:	0803d84c 	.word	0x0803d84c
 80237d0:	0803db50 	.word	0x0803db50
 80237d4:	0803cdd0 	.word	0x0803cdd0
 80237d8:	cccccccd 	.word	0xcccccccd

080237dc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>:
       *  Note that the assignment completely changes the %deque and that the
       *  resulting %deque's size is the same as the number of elements
       *  assigned.
       */
      deque&
      operator=(initializer_list<value_type> __l)
 80237dc:	b5b0      	push	{r4, r5, r7, lr}
 80237de:	b086      	sub	sp, #24
 80237e0:	af00      	add	r7, sp, #0
 80237e2:	60f8      	str	r0, [r7, #12]
 80237e4:	1d3b      	adds	r3, r7, #4
 80237e6:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	_M_assign_aux(__l.begin(), __l.end(),
 80237ea:	1d3b      	adds	r3, r7, #4
 80237ec:	4618      	mov	r0, r3
 80237ee:	f000 fa16 	bl	8023c1e <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 80237f2:	4604      	mov	r4, r0
 80237f4:	1d3b      	adds	r3, r7, #4
 80237f6:	4618      	mov	r0, r3
 80237f8:	f000 fa1d 	bl	8023c36 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>
 80237fc:	4602      	mov	r2, r0
 80237fe:	462b      	mov	r3, r5
 8023800:	4621      	mov	r1, r4
 8023802:	68f8      	ldr	r0, [r7, #12]
 8023804:	f000 fa2c 	bl	8023c60 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
		      random_access_iterator_tag());
	return *this;
 8023808:	68fb      	ldr	r3, [r7, #12]
      }
 802380a:	4618      	mov	r0, r3
 802380c:	3718      	adds	r7, #24
 802380e:	46bd      	mov	sp, r7
 8023810:	bdb0      	pop	{r4, r5, r7, pc}

08023812 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>:
       *  element at the front of the %deque and assigns the given
       *  data to it.  Due to the nature of a %deque this operation
       *  can be done in constant time.
       */
      void
      push_front(const value_type& __x)
 8023812:	b580      	push	{r7, lr}
 8023814:	b082      	sub	sp, #8
 8023816:	af00      	add	r7, sp, #0
 8023818:	6078      	str	r0, [r7, #4]
 802381a:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 802381c:	687b      	ldr	r3, [r7, #4]
 802381e:	689a      	ldr	r2, [r3, #8]
 8023820:	687b      	ldr	r3, [r7, #4]
 8023822:	68db      	ldr	r3, [r3, #12]
 8023824:	429a      	cmp	r2, r3
 8023826:	d00e      	beq.n	8023846 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x34>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8023828:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 802382a:	687b      	ldr	r3, [r7, #4]
 802382c:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 802382e:	3b14      	subs	r3, #20
 8023830:	683a      	ldr	r2, [r7, #0]
 8023832:	4619      	mov	r1, r3
 8023834:	f000 fa79 	bl	8023d2a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    --this->_M_impl._M_start._M_cur;
 8023838:	687b      	ldr	r3, [r7, #4]
 802383a:	689b      	ldr	r3, [r3, #8]
 802383c:	f1a3 0214 	sub.w	r2, r3, #20
 8023840:	687b      	ldr	r3, [r7, #4]
 8023842:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_push_front_aux(__x);
      }
 8023844:	e003      	b.n	802384e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x3c>
	  _M_push_front_aux(__x);
 8023846:	6839      	ldr	r1, [r7, #0]
 8023848:	6878      	ldr	r0, [r7, #4]
 802384a:	f000 fa81 	bl	8023d50 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>
      }
 802384e:	bf00      	nop
 8023850:	3708      	adds	r7, #8
 8023852:	46bd      	mov	sp, r7
 8023854:	bd80      	pop	{r7, pc}

08023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8023856:	b580      	push	{r7, lr}
 8023858:	b082      	sub	sp, #8
 802385a:	af00      	add	r7, sp, #0
 802385c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 802385e:	687b      	ldr	r3, [r7, #4]
 8023860:	f103 0218 	add.w	r2, r3, #24
 8023864:	687b      	ldr	r3, [r7, #4]
 8023866:	3308      	adds	r3, #8
 8023868:	4619      	mov	r1, r3
 802386a:	4610      	mov	r0, r2
 802386c:	f000 fab6 	bl	8023ddc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023870:	4603      	mov	r3, r0
 8023872:	4618      	mov	r0, r3
 8023874:	3708      	adds	r7, #8
 8023876:	46bd      	mov	sp, r7
 8023878:	bd80      	pop	{r7, pc}

0802387a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 802387a:	b580      	push	{r7, lr}
 802387c:	b082      	sub	sp, #8
 802387e:	af00      	add	r7, sp, #0
 8023880:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 8023882:	687b      	ldr	r3, [r7, #4]
 8023884:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8023886:	687b      	ldr	r3, [r7, #4]
 8023888:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 802388a:	429a      	cmp	r2, r3
 802388c:	d011      	beq.n	80238b2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 802388e:	687b      	ldr	r3, [r7, #4]
 8023890:	699b      	ldr	r3, [r3, #24]
 8023892:	f1a3 0214 	sub.w	r2, r3, #20
 8023896:	687b      	ldr	r3, [r7, #4]
 8023898:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 802389a:	687b      	ldr	r3, [r7, #4]
 802389c:	4618      	mov	r0, r3
 802389e:	f000 fac9 	bl	8023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80238a2:	4602      	mov	r2, r0
 80238a4:	687b      	ldr	r3, [r7, #4]
 80238a6:	699b      	ldr	r3, [r3, #24]
 80238a8:	4619      	mov	r1, r3
 80238aa:	4610      	mov	r0, r2
 80238ac:	f000 facd 	bl	8023e4a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 80238b0:	e002      	b.n	80238b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 80238b2:	6878      	ldr	r0, [r7, #4]
 80238b4:	f000 fad6 	bl	8023e64 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>
      }
 80238b8:	bf00      	nop
 80238ba:	3708      	adds	r7, #8
 80238bc:	46bd      	mov	sp, r7
 80238be:	bd80      	pop	{r7, pc}

080238c0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80238c0:	b580      	push	{r7, lr}
 80238c2:	b082      	sub	sp, #8
 80238c4:	af00      	add	r7, sp, #0
 80238c6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80238c8:	687b      	ldr	r3, [r7, #4]
 80238ca:	f103 0218 	add.w	r2, r3, #24
 80238ce:	687b      	ldr	r3, [r7, #4]
 80238d0:	3308      	adds	r3, #8
 80238d2:	4619      	mov	r1, r3
 80238d4:	4610      	mov	r0, r2
 80238d6:	f000 faef 	bl	8023eb8 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 80238da:	4603      	mov	r3, r0
 80238dc:	4618      	mov	r0, r3
 80238de:	3708      	adds	r7, #8
 80238e0:	46bd      	mov	sp, r7
 80238e2:	bd80      	pop	{r7, pc}

080238e4 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 80238e4:	b580      	push	{r7, lr}
 80238e6:	b082      	sub	sp, #8
 80238e8:	af00      	add	r7, sp, #0
 80238ea:	6078      	str	r0, [r7, #4]
 80238ec:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 80238ee:	687b      	ldr	r3, [r7, #4]
 80238f0:	3308      	adds	r3, #8
 80238f2:	683a      	ldr	r2, [r7, #0]
 80238f4:	4611      	mov	r1, r2
 80238f6:	4618      	mov	r0, r3
 80238f8:	f000 faf2 	bl	8023ee0 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>
 80238fc:	4603      	mov	r3, r0
      }
 80238fe:	4618      	mov	r0, r3
 8023900:	3708      	adds	r7, #8
 8023902:	46bd      	mov	sp, r7
 8023904:	bd80      	pop	{r7, pc}

08023906 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8023906:	b580      	push	{r7, lr}
 8023908:	b082      	sub	sp, #8
 802390a:	af00      	add	r7, sp, #0
 802390c:	6078      	str	r0, [r7, #4]
 802390e:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8023910:	687b      	ldr	r3, [r7, #4]
 8023912:	6839      	ldr	r1, [r7, #0]
 8023914:	4618      	mov	r0, r3
 8023916:	f000 faf9 	bl	8023f0c <_ZNSt5dequeIjSaIjEE9push_backERKj>
 802391a:	bf00      	nop
 802391c:	3708      	adds	r7, #8
 802391e:	46bd      	mov	sp, r7
 8023920:	bd80      	pop	{r7, pc}

08023922 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>:
      front() const
 8023922:	b580      	push	{r7, lr}
 8023924:	b082      	sub	sp, #8
 8023926:	af00      	add	r7, sp, #0
 8023928:	6078      	str	r0, [r7, #4]
	return c.front();
 802392a:	687b      	ldr	r3, [r7, #4]
 802392c:	4618      	mov	r0, r3
 802392e:	f000 fb0e 	bl	8023f4e <_ZNKSt5dequeIjSaIjEE5frontEv>
 8023932:	4603      	mov	r3, r0
      }
 8023934:	4618      	mov	r0, r3
 8023936:	3708      	adds	r7, #8
 8023938:	46bd      	mov	sp, r7
 802393a:	bd80      	pop	{r7, pc}

0802393c <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>:
      empty() const
 802393c:	b580      	push	{r7, lr}
 802393e:	b082      	sub	sp, #8
 8023940:	af00      	add	r7, sp, #0
 8023942:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8023944:	687b      	ldr	r3, [r7, #4]
 8023946:	4618      	mov	r0, r3
 8023948:	f000 fb15 	bl	8023f76 <_ZNKSt5dequeIjSaIjEE5emptyEv>
 802394c:	4603      	mov	r3, r0
 802394e:	4618      	mov	r0, r3
 8023950:	3708      	adds	r7, #8
 8023952:	46bd      	mov	sp, r7
 8023954:	bd80      	pop	{r7, pc}

08023956 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8023956:	b580      	push	{r7, lr}
 8023958:	b082      	sub	sp, #8
 802395a:	af00      	add	r7, sp, #0
 802395c:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 802395e:	687b      	ldr	r3, [r7, #4]
 8023960:	4618      	mov	r0, r3
 8023962:	f000 fb1a 	bl	8023f9a <_ZNSt5dequeIjSaIjEE9pop_frontEv>
      }
 8023966:	bf00      	nop
 8023968:	3708      	adds	r7, #8
 802396a:	46bd      	mov	sp, r7
 802396c:	bd80      	pop	{r7, pc}

0802396e <_ZNSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) noexcept
 802396e:	b580      	push	{r7, lr}
 8023970:	b082      	sub	sp, #8
 8023972:	af00      	add	r7, sp, #0
 8023974:	6078      	str	r0, [r7, #4]
 8023976:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023978:	687b      	ldr	r3, [r7, #4]
 802397a:	6839      	ldr	r1, [r7, #0]
 802397c:	4618      	mov	r0, r3
 802397e:	f7ff fe57 	bl	8023630 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8023982:	4603      	mov	r3, r0
 8023984:	4618      	mov	r0, r3
 8023986:	3708      	adds	r7, #8
 8023988:	46bd      	mov	sp, r7
 802398a:	bd80      	pop	{r7, pc}

0802398c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 802398c:	b580      	push	{r7, lr}
 802398e:	b086      	sub	sp, #24
 8023990:	af00      	add	r7, sp, #0
 8023992:	6078      	str	r0, [r7, #4]
	return *begin();
 8023994:	f107 0308 	add.w	r3, r7, #8
 8023998:	6879      	ldr	r1, [r7, #4]
 802399a:	4618      	mov	r0, r3
 802399c:	f000 fb20 	bl	8023fe0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 80239a0:	f107 0308 	add.w	r3, r7, #8
 80239a4:	4618      	mov	r0, r3
 80239a6:	f000 fb2a 	bl	8023ffe <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>
 80239aa:	4603      	mov	r3, r0
      }
 80239ac:	4618      	mov	r0, r3
 80239ae:	3718      	adds	r7, #24
 80239b0:	46bd      	mov	sp, r7
 80239b2:	bd80      	pop	{r7, pc}

080239b4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80239b4:	b580      	push	{r7, lr}
 80239b6:	b082      	sub	sp, #8
 80239b8:	af00      	add	r7, sp, #0
 80239ba:	6078      	str	r0, [r7, #4]
 80239bc:	6878      	ldr	r0, [r7, #4]
 80239be:	f000 fb3a 	bl	8024036 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>
 80239c2:	687b      	ldr	r3, [r7, #4]
 80239c4:	4618      	mov	r0, r3
 80239c6:	3708      	adds	r7, #8
 80239c8:	46bd      	mov	sp, r7
 80239ca:	bd80      	pop	{r7, pc}

080239cc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
      _Deque_base()
 80239cc:	b580      	push	{r7, lr}
 80239ce:	b082      	sub	sp, #8
 80239d0:	af00      	add	r7, sp, #0
 80239d2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80239d4:	687b      	ldr	r3, [r7, #4]
 80239d6:	4618      	mov	r0, r3
 80239d8:	f000 fb1d 	bl	8024016 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80239dc:	2100      	movs	r1, #0
 80239de:	6878      	ldr	r0, [r7, #4]
 80239e0:	f000 fb35 	bl	802404e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>
 80239e4:	687b      	ldr	r3, [r7, #4]
 80239e6:	4618      	mov	r0, r3
 80239e8:	3708      	adds	r7, #8
 80239ea:	46bd      	mov	sp, r7
 80239ec:	bd80      	pop	{r7, pc}

080239ee <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80239ee:	b580      	push	{r7, lr}
 80239f0:	b082      	sub	sp, #8
 80239f2:	af00      	add	r7, sp, #0
 80239f4:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80239f6:	687b      	ldr	r3, [r7, #4]
 80239f8:	681b      	ldr	r3, [r3, #0]
 80239fa:	2b00      	cmp	r3, #0
 80239fc:	d010      	beq.n	8023a20 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80239fe:	687b      	ldr	r3, [r7, #4]
 8023a00:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8023a02:	687b      	ldr	r3, [r7, #4]
 8023a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023a06:	3304      	adds	r3, #4
 8023a08:	461a      	mov	r2, r3
 8023a0a:	6878      	ldr	r0, [r7, #4]
 8023a0c:	f000 fb85 	bl	802411a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8023a10:	687b      	ldr	r3, [r7, #4]
 8023a12:	6819      	ldr	r1, [r3, #0]
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	685b      	ldr	r3, [r3, #4]
 8023a18:	461a      	mov	r2, r3
 8023a1a:	6878      	ldr	r0, [r7, #4]
 8023a1c:	f000 fb97 	bl	802414e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8023a20:	687b      	ldr	r3, [r7, #4]
 8023a22:	4618      	mov	r0, r3
 8023a24:	f7ff ffc6 	bl	80239b4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>
 8023a28:	687b      	ldr	r3, [r7, #4]
 8023a2a:	4618      	mov	r0, r3
 8023a2c:	3708      	adds	r7, #8
 8023a2e:	46bd      	mov	sp, r7
 8023a30:	bd80      	pop	{r7, pc}

08023a32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
      ~deque()
 8023a32:	b580      	push	{r7, lr}
 8023a34:	b08a      	sub	sp, #40	; 0x28
 8023a36:	af00      	add	r7, sp, #0
 8023a38:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023a3a:	f107 0308 	add.w	r3, r7, #8
 8023a3e:	6879      	ldr	r1, [r7, #4]
 8023a40:	4618      	mov	r0, r3
 8023a42:	f000 fba0 	bl	8024186 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023a46:	f107 0318 	add.w	r3, r7, #24
 8023a4a:	6879      	ldr	r1, [r7, #4]
 8023a4c:	4618      	mov	r0, r3
 8023a4e:	f000 fba9 	bl	80241a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023a52:	687b      	ldr	r3, [r7, #4]
 8023a54:	4618      	mov	r0, r3
 8023a56:	f000 f9ed 	bl	8023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023a5a:	4603      	mov	r3, r0
 8023a5c:	f107 0218 	add.w	r2, r7, #24
 8023a60:	f107 0108 	add.w	r1, r7, #8
 8023a64:	6878      	ldr	r0, [r7, #4]
 8023a66:	f000 fbc8 	bl	80241fa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8023a6a:	687b      	ldr	r3, [r7, #4]
 8023a6c:	4618      	mov	r0, r3
 8023a6e:	f7ff ffbe 	bl	80239ee <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8023a72:	687b      	ldr	r3, [r7, #4]
 8023a74:	4618      	mov	r0, r3
 8023a76:	3728      	adds	r7, #40	; 0x28
 8023a78:	46bd      	mov	sp, r7
 8023a7a:	bd80      	pop	{r7, pc}

08023a7c <_ZNSt5dequeIjSaIjEEC1Ev>:
      deque() = default;
 8023a7c:	b580      	push	{r7, lr}
 8023a7e:	b082      	sub	sp, #8
 8023a80:	af00      	add	r7, sp, #0
 8023a82:	6078      	str	r0, [r7, #4]
 8023a84:	687b      	ldr	r3, [r7, #4]
 8023a86:	4618      	mov	r0, r3
 8023a88:	f000 fbd0 	bl	802422c <_ZNSt11_Deque_baseIjSaIjEEC1Ev>
 8023a8c:	687b      	ldr	r3, [r7, #4]
 8023a8e:	4618      	mov	r0, r3
 8023a90:	3708      	adds	r7, #8
 8023a92:	46bd      	mov	sp, r7
 8023a94:	bd80      	pop	{r7, pc}

08023a96 <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>:
	queue()
 8023a96:	b580      	push	{r7, lr}
 8023a98:	b082      	sub	sp, #8
 8023a9a:	af00      	add	r7, sp, #0
 8023a9c:	6078      	str	r0, [r7, #4]
	: c() { }
 8023a9e:	687b      	ldr	r3, [r7, #4]
 8023aa0:	4618      	mov	r0, r3
 8023aa2:	2328      	movs	r3, #40	; 0x28
 8023aa4:	461a      	mov	r2, r3
 8023aa6:	2100      	movs	r1, #0
 8023aa8:	f018 f8fa 	bl	803bca0 <memset>
 8023aac:	687b      	ldr	r3, [r7, #4]
 8023aae:	4618      	mov	r0, r3
 8023ab0:	f7ff ffe4 	bl	8023a7c <_ZNSt5dequeIjSaIjEEC1Ev>
 8023ab4:	687b      	ldr	r3, [r7, #4]
 8023ab6:	4618      	mov	r0, r3
 8023ab8:	3708      	adds	r7, #8
 8023aba:	46bd      	mov	sp, r7
 8023abc:	bd80      	pop	{r7, pc}

08023abe <_ZNSt5dequeIjSaIjEED1Ev>:
      ~deque()
 8023abe:	b580      	push	{r7, lr}
 8023ac0:	b08a      	sub	sp, #40	; 0x28
 8023ac2:	af00      	add	r7, sp, #0
 8023ac4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023ac6:	f107 0308 	add.w	r3, r7, #8
 8023aca:	6879      	ldr	r1, [r7, #4]
 8023acc:	4618      	mov	r0, r3
 8023ace:	f000 fbe0 	bl	8024292 <_ZNSt5dequeIjSaIjEE5beginEv>
 8023ad2:	f107 0318 	add.w	r3, r7, #24
 8023ad6:	6879      	ldr	r1, [r7, #4]
 8023ad8:	4618      	mov	r0, r3
 8023ada:	f000 fbe9 	bl	80242b0 <_ZNSt5dequeIjSaIjEE3endEv>
 8023ade:	687b      	ldr	r3, [r7, #4]
 8023ae0:	4618      	mov	r0, r3
 8023ae2:	f000 fbf4 	bl	80242ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8023ae6:	4603      	mov	r3, r0
 8023ae8:	f107 0218 	add.w	r2, r7, #24
 8023aec:	f107 0108 	add.w	r1, r7, #8
 8023af0:	6878      	ldr	r0, [r7, #4]
 8023af2:	f000 fc13 	bl	802431c <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
 8023af6:	687b      	ldr	r3, [r7, #4]
 8023af8:	4618      	mov	r0, r3
 8023afa:	f000 fba8 	bl	802424e <_ZNSt11_Deque_baseIjSaIjEED1Ev>
 8023afe:	687b      	ldr	r3, [r7, #4]
 8023b00:	4618      	mov	r0, r3
 8023b02:	3728      	adds	r7, #40	; 0x28
 8023b04:	46bd      	mov	sp, r7
 8023b06:	bd80      	pop	{r7, pc}

08023b08 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023b08:	b590      	push	{r4, r7, lr}
 8023b0a:	b083      	sub	sp, #12
 8023b0c:	af00      	add	r7, sp, #0
 8023b0e:	6078      	str	r0, [r7, #4]
 8023b10:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023b12:	6838      	ldr	r0, [r7, #0]
 8023b14:	f000 fc0f 	bl	8024336 <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8023b18:	4603      	mov	r3, r0
 8023b1a:	4622      	mov	r2, r4
 8023b1c:	4619      	mov	r1, r3
 8023b1e:	6878      	ldr	r0, [r7, #4]
 8023b20:	f000 fc14 	bl	802434c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>
	return *this;
 8023b24:	687b      	ldr	r3, [r7, #4]
      }
 8023b26:	4618      	mov	r0, r3
 8023b28:	370c      	adds	r7, #12
 8023b2a:	46bd      	mov	sp, r7
 8023b2c:	bd90      	pop	{r4, r7, pc}

08023b2e <_ZNSt5dequeIjSaIjEEaSEOS1_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023b2e:	b590      	push	{r4, r7, lr}
 8023b30:	b083      	sub	sp, #12
 8023b32:	af00      	add	r7, sp, #0
 8023b34:	6078      	str	r0, [r7, #4]
 8023b36:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023b38:	6838      	ldr	r0, [r7, #0]
 8023b3a:	f000 fc28 	bl	802438e <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>
 8023b3e:	4603      	mov	r3, r0
 8023b40:	4622      	mov	r2, r4
 8023b42:	4619      	mov	r1, r3
 8023b44:	6878      	ldr	r0, [r7, #4]
 8023b46:	f000 fc2d 	bl	80243a4 <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>
	return *this;
 8023b4a:	687b      	ldr	r3, [r7, #4]
      }
 8023b4c:	4618      	mov	r0, r3
 8023b4e:	370c      	adds	r7, #12
 8023b50:	46bd      	mov	sp, r7
 8023b52:	bd90      	pop	{r4, r7, pc}

08023b54 <_ZNSt5arrayI7RequestLj500EEixEj>:
      operator[](size_type __n) noexcept
 8023b54:	b580      	push	{r7, lr}
 8023b56:	b082      	sub	sp, #8
 8023b58:	af00      	add	r7, sp, #0
 8023b5a:	6078      	str	r0, [r7, #4]
 8023b5c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	6839      	ldr	r1, [r7, #0]
 8023b62:	4618      	mov	r0, r3
 8023b64:	f000 fc3f 	bl	80243e6 <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>
 8023b68:	4603      	mov	r3, r0
 8023b6a:	4618      	mov	r0, r3
 8023b6c:	3708      	adds	r7, #8
 8023b6e:	46bd      	mov	sp, r7
 8023b70:	bd80      	pop	{r7, pc}

08023b72 <_ZNSt5arrayI8ResponceLj10EEixEj>:
      operator[](size_type __n) noexcept
 8023b72:	b580      	push	{r7, lr}
 8023b74:	b082      	sub	sp, #8
 8023b76:	af00      	add	r7, sp, #0
 8023b78:	6078      	str	r0, [r7, #4]
 8023b7a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	6839      	ldr	r1, [r7, #0]
 8023b80:	4618      	mov	r0, r3
 8023b82:	f000 fc42 	bl	802440a <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>
 8023b86:	4603      	mov	r3, r0
 8023b88:	4618      	mov	r0, r3
 8023b8a:	3708      	adds	r7, #8
 8023b8c:	46bd      	mov	sp, r7
 8023b8e:	bd80      	pop	{r7, pc}

08023b90 <_ZNKSt5arrayI8ResponceLj10EEixEj>:
      operator[](size_type __n) const noexcept
 8023b90:	b580      	push	{r7, lr}
 8023b92:	b082      	sub	sp, #8
 8023b94:	af00      	add	r7, sp, #0
 8023b96:	6078      	str	r0, [r7, #4]
 8023b98:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023b9a:	687b      	ldr	r3, [r7, #4]
 8023b9c:	6839      	ldr	r1, [r7, #0]
 8023b9e:	4618      	mov	r0, r3
 8023ba0:	f000 fc33 	bl	802440a <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>
 8023ba4:	4603      	mov	r3, r0
 8023ba6:	4618      	mov	r0, r3
 8023ba8:	3708      	adds	r7, #8
 8023baa:	46bd      	mov	sp, r7
 8023bac:	bd80      	pop	{r7, pc}

08023bae <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8023bae:	b480      	push	{r7}
 8023bb0:	b083      	sub	sp, #12
 8023bb2:	af00      	add	r7, sp, #0
 8023bb4:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8023bb6:	687b      	ldr	r3, [r7, #4]
 8023bb8:	4618      	mov	r0, r3
 8023bba:	370c      	adds	r7, #12
 8023bbc:	46bd      	mov	sp, r7
 8023bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bc2:	4770      	bx	lr

08023bc4 <_ZNKSt5arrayI7RequestLj500EEixEj>:
      operator[](size_type __n) const noexcept
 8023bc4:	b580      	push	{r7, lr}
 8023bc6:	b082      	sub	sp, #8
 8023bc8:	af00      	add	r7, sp, #0
 8023bca:	6078      	str	r0, [r7, #4]
 8023bcc:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023bce:	687b      	ldr	r3, [r7, #4]
 8023bd0:	6839      	ldr	r1, [r7, #0]
 8023bd2:	4618      	mov	r0, r3
 8023bd4:	f000 fc07 	bl	80243e6 <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>
 8023bd8:	4603      	mov	r3, r0
 8023bda:	4618      	mov	r0, r3
 8023bdc:	3708      	adds	r7, #8
 8023bde:	46bd      	mov	sp, r7
 8023be0:	bd80      	pop	{r7, pc}

08023be2 <_ZNKSt5arrayI7RequestLj10EEixEj>:
      operator[](size_type __n) const noexcept
 8023be2:	b580      	push	{r7, lr}
 8023be4:	b082      	sub	sp, #8
 8023be6:	af00      	add	r7, sp, #0
 8023be8:	6078      	str	r0, [r7, #4]
 8023bea:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023bec:	687b      	ldr	r3, [r7, #4]
 8023bee:	6839      	ldr	r1, [r7, #0]
 8023bf0:	4618      	mov	r0, r3
 8023bf2:	f000 fc1c 	bl	802442e <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>
 8023bf6:	4603      	mov	r3, r0
 8023bf8:	4618      	mov	r0, r3
 8023bfa:	3708      	adds	r7, #8
 8023bfc:	46bd      	mov	sp, r7
 8023bfe:	bd80      	pop	{r7, pc}

08023c00 <_ZNSt5arrayI7RequestLj10EEixEj>:
      operator[](size_type __n) noexcept
 8023c00:	b580      	push	{r7, lr}
 8023c02:	b082      	sub	sp, #8
 8023c04:	af00      	add	r7, sp, #0
 8023c06:	6078      	str	r0, [r7, #4]
 8023c08:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023c0a:	687b      	ldr	r3, [r7, #4]
 8023c0c:	6839      	ldr	r1, [r7, #0]
 8023c0e:	4618      	mov	r0, r3
 8023c10:	f000 fc0d 	bl	802442e <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>
 8023c14:	4603      	mov	r3, r0
 8023c16:	4618      	mov	r0, r3
 8023c18:	3708      	adds	r7, #8
 8023c1a:	46bd      	mov	sp, r7
 8023c1c:	bd80      	pop	{r7, pc}

08023c1e <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8023c1e:	b480      	push	{r7}
 8023c20:	b083      	sub	sp, #12
 8023c22:	af00      	add	r7, sp, #0
 8023c24:	6078      	str	r0, [r7, #4]
 8023c26:	687b      	ldr	r3, [r7, #4]
 8023c28:	681b      	ldr	r3, [r3, #0]
 8023c2a:	4618      	mov	r0, r3
 8023c2c:	370c      	adds	r7, #12
 8023c2e:	46bd      	mov	sp, r7
 8023c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c34:	4770      	bx	lr

08023c36 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8023c36:	b590      	push	{r4, r7, lr}
 8023c38:	b083      	sub	sp, #12
 8023c3a:	af00      	add	r7, sp, #0
 8023c3c:	6078      	str	r0, [r7, #4]
 8023c3e:	6878      	ldr	r0, [r7, #4]
 8023c40:	f7ff ffed 	bl	8023c1e <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8023c44:	4604      	mov	r4, r0
 8023c46:	6878      	ldr	r0, [r7, #4]
 8023c48:	f000 fc03 	bl	8024452 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>
 8023c4c:	4602      	mov	r2, r0
 8023c4e:	4613      	mov	r3, r2
 8023c50:	009b      	lsls	r3, r3, #2
 8023c52:	4413      	add	r3, r2
 8023c54:	009b      	lsls	r3, r3, #2
 8023c56:	4423      	add	r3, r4
 8023c58:	4618      	mov	r0, r3
 8023c5a:	370c      	adds	r7, #12
 8023c5c:	46bd      	mov	sp, r7
 8023c5e:	bd90      	pop	{r4, r7, pc}

08023c60 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
		      std::input_iterator_tag);

      // called by the second assign_dispatch above
      template<typename _ForwardIterator>
	void
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 8023c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c62:	b09f      	sub	sp, #124	; 0x7c
 8023c64:	af02      	add	r7, sp, #8
 8023c66:	60f8      	str	r0, [r7, #12]
 8023c68:	60b9      	str	r1, [r7, #8]
 8023c6a:	607a      	str	r2, [r7, #4]
 8023c6c:	703b      	strb	r3, [r7, #0]
		      std::forward_iterator_tag)
	{
	  const size_type __len = std::distance(__first, __last);
 8023c6e:	68bb      	ldr	r3, [r7, #8]
 8023c70:	6879      	ldr	r1, [r7, #4]
 8023c72:	4618      	mov	r0, r3
 8023c74:	f000 fbf9 	bl	802446a <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8023c78:	4603      	mov	r3, r0
 8023c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 8023c7c:	68f8      	ldr	r0, [r7, #12]
 8023c7e:	f7ff fdea 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023c82:	4602      	mov	r2, r0
 8023c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023c86:	4293      	cmp	r3, r2
 8023c88:	bf8c      	ite	hi
 8023c8a:	2301      	movhi	r3, #1
 8023c8c:	2300      	movls	r3, #0
 8023c8e:	b2db      	uxtb	r3, r3
 8023c90:	2b00      	cmp	r3, #0
 8023c92:	d031      	beq.n	8023cf8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x98>
	    {
	      _ForwardIterator __mid = __first;
 8023c94:	68bb      	ldr	r3, [r7, #8]
 8023c96:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 8023c98:	68f8      	ldr	r0, [r7, #12]
 8023c9a:	f7ff fddc 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023c9e:	4602      	mov	r2, r0
 8023ca0:	f107 0314 	add.w	r3, r7, #20
 8023ca4:	4611      	mov	r1, r2
 8023ca6:	4618      	mov	r0, r3
 8023ca8:	f000 fbf3 	bl	8024492 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8023cac:	68bc      	ldr	r4, [r7, #8]
 8023cae:	697d      	ldr	r5, [r7, #20]
 8023cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023cb4:	68f9      	ldr	r1, [r7, #12]
 8023cb6:	4618      	mov	r0, r3
 8023cb8:	f000 fa65 	bl	8024186 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023cbc:	f107 0018 	add.w	r0, r7, #24
 8023cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023cc4:	462a      	mov	r2, r5
 8023cc6:	4621      	mov	r1, r4
 8023cc8:	f000 fbf6 	bl	80244b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_range_insert_aux(end(), __mid, __last,
 8023ccc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8023cd0:	68f9      	ldr	r1, [r7, #12]
 8023cd2:	4618      	mov	r0, r3
 8023cd4:	f000 fa66 	bl	80241a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023cd8:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8023cda:	f107 0308 	add.w	r3, r7, #8
 8023cde:	4618      	mov	r0, r3
 8023ce0:	f000 fc0a 	bl	80244f8 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
	      _M_range_insert_aux(end(), __mid, __last,
 8023ce4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8023ce8:	f88d 6000 	strb.w	r6, [sp]
 8023cec:	687b      	ldr	r3, [r7, #4]
 8023cee:	4622      	mov	r2, r4
 8023cf0:	68f8      	ldr	r0, [r7, #12]
 8023cf2:	f000 fc0c 	bl	802450e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>
	    }
	  else
	    _M_erase_at_end(std::copy(__first, __last, begin()));
	}
 8023cf6:	e014      	b.n	8023d22 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8023cf8:	68bc      	ldr	r4, [r7, #8]
 8023cfa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023cfe:	68f9      	ldr	r1, [r7, #12]
 8023d00:	4618      	mov	r0, r3
 8023d02:	f000 fa40 	bl	8024186 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023d06:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8023d0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023d0e:	687a      	ldr	r2, [r7, #4]
 8023d10:	4621      	mov	r1, r4
 8023d12:	f000 fbd1 	bl	80244b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8023d16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8023d1a:	4619      	mov	r1, r3
 8023d1c:	68f8      	ldr	r0, [r7, #12]
 8023d1e:	f000 fc73 	bl	8024608 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
	}
 8023d22:	bf00      	nop
 8023d24:	3774      	adds	r7, #116	; 0x74
 8023d26:	46bd      	mov	sp, r7
 8023d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023d2a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8023d2a:	b580      	push	{r7, lr}
 8023d2c:	b084      	sub	sp, #16
 8023d2e:	af00      	add	r7, sp, #0
 8023d30:	60f8      	str	r0, [r7, #12]
 8023d32:	60b9      	str	r1, [r7, #8]
 8023d34:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8023d36:	6878      	ldr	r0, [r7, #4]
 8023d38:	f000 fc99 	bl	802466e <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8023d3c:	4603      	mov	r3, r0
 8023d3e:	461a      	mov	r2, r3
 8023d40:	68b9      	ldr	r1, [r7, #8]
 8023d42:	68f8      	ldr	r0, [r7, #12]
 8023d44:	f000 fc9e 	bl	8024684 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8023d48:	bf00      	nop
 8023d4a:	3710      	adds	r7, #16
 8023d4c:	46bd      	mov	sp, r7
 8023d4e:	bd80      	pop	{r7, pc}

08023d50 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>:
  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8023d50:	b5b0      	push	{r4, r5, r7, lr}
 8023d52:	b082      	sub	sp, #8
 8023d54:	af00      	add	r7, sp, #0
 8023d56:	6078      	str	r0, [r7, #4]
 8023d58:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8023d5a:	6878      	ldr	r0, [r7, #4]
 8023d5c:	f7ff fd7b 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023d60:	4604      	mov	r4, r0
 8023d62:	6878      	ldr	r0, [r7, #4]
 8023d64:	f000 fca7 	bl	80246b6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8023d68:	4603      	mov	r3, r0
 8023d6a:	429c      	cmp	r4, r3
 8023d6c:	bf0c      	ite	eq
 8023d6e:	2301      	moveq	r3, #1
 8023d70:	2300      	movne	r3, #0
 8023d72:	b2db      	uxtb	r3, r3
 8023d74:	2b00      	cmp	r3, #0
 8023d76:	d002      	beq.n	8023d7e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8023d78:	4817      	ldr	r0, [pc, #92]	; (8023dd8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x88>)
 8023d7a:	f017 fee9 	bl	803bb50 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_front();
 8023d7e:	2101      	movs	r1, #1
 8023d80:	6878      	ldr	r0, [r7, #4]
 8023d82:	f000 fca9 	bl	80246d8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8023d86:	687a      	ldr	r2, [r7, #4]
 8023d88:	687b      	ldr	r3, [r7, #4]
 8023d8a:	695b      	ldr	r3, [r3, #20]
 8023d8c:	1f1c      	subs	r4, r3, #4
 8023d8e:	4610      	mov	r0, r2
 8023d90:	f000 fcba 	bl	8024708 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8023d94:	4603      	mov	r3, r0
 8023d96:	6023      	str	r3, [r4, #0]
	__try
	  {
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8023d98:	687b      	ldr	r3, [r7, #4]
 8023d9a:	f103 0208 	add.w	r2, r3, #8
 8023d9e:	687b      	ldr	r3, [r7, #4]
 8023da0:	695b      	ldr	r3, [r3, #20]
 8023da2:	3b04      	subs	r3, #4
 8023da4:	4619      	mov	r1, r3
 8023da6:	4610      	mov	r0, r2
 8023da8:	f000 fcc0 	bl	802472c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
					       - 1);
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8023dac:	687b      	ldr	r3, [r7, #4]
 8023dae:	691b      	ldr	r3, [r3, #16]
 8023db0:	f1a3 0214 	sub.w	r2, r3, #20
 8023db4:	687b      	ldr	r3, [r7, #4]
 8023db6:	609a      	str	r2, [r3, #8]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8023db8:	687c      	ldr	r4, [r7, #4]
 8023dba:	687b      	ldr	r3, [r7, #4]
 8023dbc:	689d      	ldr	r5, [r3, #8]
 8023dbe:	6838      	ldr	r0, [r7, #0]
 8023dc0:	f000 fc55 	bl	802466e <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8023dc4:	4603      	mov	r3, r0
 8023dc6:	461a      	mov	r2, r3
 8023dc8:	4629      	mov	r1, r5
 8023dca:	4620      	mov	r0, r4
 8023dcc:	f7ff ffad 	bl	8023d2a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  {
	    ++this->_M_impl._M_start;
	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
	    __throw_exception_again;
	  }
      }
 8023dd0:	bf00      	nop
 8023dd2:	3708      	adds	r7, #8
 8023dd4:	46bd      	mov	sp, r7
 8023dd6:	bdb0      	pop	{r4, r5, r7, pc}
 8023dd8:	0803dbac 	.word	0x0803dbac

08023ddc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023ddc:	b580      	push	{r7, lr}
 8023dde:	b082      	sub	sp, #8
 8023de0:	af00      	add	r7, sp, #0
 8023de2:	6078      	str	r0, [r7, #4]
 8023de4:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8023de6:	f000 fcd0 	bl	802478a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8023dea:	4603      	mov	r3, r0
 8023dec:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8023dee:	687b      	ldr	r3, [r7, #4]
 8023df0:	68da      	ldr	r2, [r3, #12]
 8023df2:	683b      	ldr	r3, [r7, #0]
 8023df4:	68db      	ldr	r3, [r3, #12]
 8023df6:	1ad3      	subs	r3, r2, r3
 8023df8:	109b      	asrs	r3, r3, #2
 8023dfa:	3b01      	subs	r3, #1
 8023dfc:	fb01 f303 	mul.w	r3, r1, r3
 8023e00:	687a      	ldr	r2, [r7, #4]
 8023e02:	6811      	ldr	r1, [r2, #0]
 8023e04:	687a      	ldr	r2, [r7, #4]
 8023e06:	6852      	ldr	r2, [r2, #4]
 8023e08:	1a8a      	subs	r2, r1, r2
 8023e0a:	1092      	asrs	r2, r2, #2
 8023e0c:	4908      	ldr	r1, [pc, #32]	; (8023e30 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8023e0e:	fb01 f202 	mul.w	r2, r1, r2
 8023e12:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8023e14:	683a      	ldr	r2, [r7, #0]
 8023e16:	6891      	ldr	r1, [r2, #8]
 8023e18:	683a      	ldr	r2, [r7, #0]
 8023e1a:	6812      	ldr	r2, [r2, #0]
 8023e1c:	1a8a      	subs	r2, r1, r2
 8023e1e:	1092      	asrs	r2, r2, #2
 8023e20:	4903      	ldr	r1, [pc, #12]	; (8023e30 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8023e22:	fb01 f202 	mul.w	r2, r1, r2
 8023e26:	4413      	add	r3, r2
      }
 8023e28:	4618      	mov	r0, r3
 8023e2a:	3708      	adds	r7, #8
 8023e2c:	46bd      	mov	sp, r7
 8023e2e:	bd80      	pop	{r7, pc}
 8023e30:	cccccccd 	.word	0xcccccccd

08023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8023e34:	b480      	push	{r7}
 8023e36:	b083      	sub	sp, #12
 8023e38:	af00      	add	r7, sp, #0
 8023e3a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8023e3c:	687b      	ldr	r3, [r7, #4]
 8023e3e:	4618      	mov	r0, r3
 8023e40:	370c      	adds	r7, #12
 8023e42:	46bd      	mov	sp, r7
 8023e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e48:	4770      	bx	lr

08023e4a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8023e4a:	b580      	push	{r7, lr}
 8023e4c:	b082      	sub	sp, #8
 8023e4e:	af00      	add	r7, sp, #0
 8023e50:	6078      	str	r0, [r7, #4]
 8023e52:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8023e54:	6839      	ldr	r1, [r7, #0]
 8023e56:	6878      	ldr	r0, [r7, #4]
 8023e58:	f000 fc9f 	bl	802479a <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8023e5c:	bf00      	nop
 8023e5e:	3708      	adds	r7, #8
 8023e60:	46bd      	mov	sp, r7
 8023e62:	bd80      	pop	{r7, pc}

08023e64 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>:

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8023e64:	b580      	push	{r7, lr}
 8023e66:	b082      	sub	sp, #8
 8023e68:	af00      	add	r7, sp, #0
 8023e6a:	6078      	str	r0, [r7, #4]
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 8023e6c:	687a      	ldr	r2, [r7, #4]
 8023e6e:	687b      	ldr	r3, [r7, #4]
 8023e70:	69db      	ldr	r3, [r3, #28]
 8023e72:	4619      	mov	r1, r3
 8023e74:	4610      	mov	r0, r2
 8023e76:	f000 fc75 	bl	8024764 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 8023e7a:	687b      	ldr	r3, [r7, #4]
 8023e7c:	f103 0218 	add.w	r2, r3, #24
 8023e80:	687b      	ldr	r3, [r7, #4]
 8023e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e84:	3b04      	subs	r3, #4
 8023e86:	4619      	mov	r1, r3
 8023e88:	4610      	mov	r0, r2
 8023e8a:	f000 fc4f 	bl	802472c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 8023e8e:	687b      	ldr	r3, [r7, #4]
 8023e90:	6a1b      	ldr	r3, [r3, #32]
 8023e92:	f1a3 0214 	sub.w	r2, r3, #20
 8023e96:	687b      	ldr	r3, [r7, #4]
 8023e98:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023e9a:	687b      	ldr	r3, [r7, #4]
 8023e9c:	4618      	mov	r0, r3
 8023e9e:	f7ff ffc9 	bl	8023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023ea2:	4602      	mov	r2, r0
 8023ea4:	687b      	ldr	r3, [r7, #4]
 8023ea6:	699b      	ldr	r3, [r3, #24]
 8023ea8:	4619      	mov	r1, r3
 8023eaa:	4610      	mov	r0, r2
 8023eac:	f7ff ffcd 	bl	8023e4a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_finish._M_cur);
    }
 8023eb0:	bf00      	nop
 8023eb2:	3708      	adds	r7, #8
 8023eb4:	46bd      	mov	sp, r7
 8023eb6:	bd80      	pop	{r7, pc}

08023eb8 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023eb8:	b480      	push	{r7}
 8023eba:	b083      	sub	sp, #12
 8023ebc:	af00      	add	r7, sp, #0
 8023ebe:	6078      	str	r0, [r7, #4]
 8023ec0:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8023ec2:	687b      	ldr	r3, [r7, #4]
 8023ec4:	681a      	ldr	r2, [r3, #0]
 8023ec6:	683b      	ldr	r3, [r7, #0]
 8023ec8:	681b      	ldr	r3, [r3, #0]
 8023eca:	429a      	cmp	r2, r3
 8023ecc:	bf0c      	ite	eq
 8023ece:	2301      	moveq	r3, #1
 8023ed0:	2300      	movne	r3, #0
 8023ed2:	b2db      	uxtb	r3, r3
 8023ed4:	4618      	mov	r0, r3
 8023ed6:	370c      	adds	r7, #12
 8023ed8:	46bd      	mov	sp, r7
 8023eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ede:	4770      	bx	lr

08023ee0 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8023ee0:	b580      	push	{r7, lr}
 8023ee2:	b086      	sub	sp, #24
 8023ee4:	af00      	add	r7, sp, #0
 8023ee6:	6078      	str	r0, [r7, #4]
 8023ee8:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 8023eea:	f107 0308 	add.w	r3, r7, #8
 8023eee:	683a      	ldr	r2, [r7, #0]
 8023ef0:	6879      	ldr	r1, [r7, #4]
 8023ef2:	4618      	mov	r0, r3
 8023ef4:	f000 fc5c 	bl	80247b0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8023ef8:	f107 0308 	add.w	r3, r7, #8
 8023efc:	4618      	mov	r0, r3
 8023efe:	f000 fc6a 	bl	80247d6 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>
 8023f02:	4603      	mov	r3, r0
 8023f04:	4618      	mov	r0, r3
 8023f06:	3718      	adds	r7, #24
 8023f08:	46bd      	mov	sp, r7
 8023f0a:	bd80      	pop	{r7, pc}

08023f0c <_ZNSt5dequeIjSaIjEE9push_backERKj>:
      push_back(const value_type& __x)
 8023f0c:	b580      	push	{r7, lr}
 8023f0e:	b082      	sub	sp, #8
 8023f10:	af00      	add	r7, sp, #0
 8023f12:	6078      	str	r0, [r7, #4]
 8023f14:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8023f16:	687b      	ldr	r3, [r7, #4]
 8023f18:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8023f1a:	687b      	ldr	r3, [r7, #4]
 8023f1c:	6a1b      	ldr	r3, [r3, #32]
 8023f1e:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8023f20:	429a      	cmp	r2, r3
 8023f22:	d00c      	beq.n	8023f3e <_ZNSt5dequeIjSaIjEE9push_backERKj+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8023f24:	6878      	ldr	r0, [r7, #4]
 8023f26:	687b      	ldr	r3, [r7, #4]
 8023f28:	699b      	ldr	r3, [r3, #24]
 8023f2a:	683a      	ldr	r2, [r7, #0]
 8023f2c:	4619      	mov	r1, r3
 8023f2e:	f000 fc5e 	bl	80247ee <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8023f32:	687b      	ldr	r3, [r7, #4]
 8023f34:	699b      	ldr	r3, [r3, #24]
 8023f36:	1d1a      	adds	r2, r3, #4
 8023f38:	687b      	ldr	r3, [r7, #4]
 8023f3a:	619a      	str	r2, [r3, #24]
      }
 8023f3c:	e003      	b.n	8023f46 <_ZNSt5dequeIjSaIjEE9push_backERKj+0x3a>
	  _M_push_back_aux(__x);
 8023f3e:	6839      	ldr	r1, [r7, #0]
 8023f40:	6878      	ldr	r0, [r7, #4]
 8023f42:	f000 fc67 	bl	8024814 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>
      }
 8023f46:	bf00      	nop
 8023f48:	3708      	adds	r7, #8
 8023f4a:	46bd      	mov	sp, r7
 8023f4c:	bd80      	pop	{r7, pc}

08023f4e <_ZNKSt5dequeIjSaIjEE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 8023f4e:	b580      	push	{r7, lr}
 8023f50:	b086      	sub	sp, #24
 8023f52:	af00      	add	r7, sp, #0
 8023f54:	6078      	str	r0, [r7, #4]
	return *begin();
 8023f56:	f107 0308 	add.w	r3, r7, #8
 8023f5a:	6879      	ldr	r1, [r7, #4]
 8023f5c:	4618      	mov	r0, r3
 8023f5e:	f000 fc9d 	bl	802489c <_ZNKSt5dequeIjSaIjEE5beginEv>
 8023f62:	f107 0308 	add.w	r3, r7, #8
 8023f66:	4618      	mov	r0, r3
 8023f68:	f000 fca7 	bl	80248ba <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>
 8023f6c:	4603      	mov	r3, r0
      }
 8023f6e:	4618      	mov	r0, r3
 8023f70:	3718      	adds	r7, #24
 8023f72:	46bd      	mov	sp, r7
 8023f74:	bd80      	pop	{r7, pc}

08023f76 <_ZNKSt5dequeIjSaIjEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8023f76:	b580      	push	{r7, lr}
 8023f78:	b082      	sub	sp, #8
 8023f7a:	af00      	add	r7, sp, #0
 8023f7c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8023f7e:	687b      	ldr	r3, [r7, #4]
 8023f80:	f103 0218 	add.w	r2, r3, #24
 8023f84:	687b      	ldr	r3, [r7, #4]
 8023f86:	3308      	adds	r3, #8
 8023f88:	4619      	mov	r1, r3
 8023f8a:	4610      	mov	r0, r2
 8023f8c:	f000 fca1 	bl	80248d2 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>
 8023f90:	4603      	mov	r3, r0
 8023f92:	4618      	mov	r0, r3
 8023f94:	3708      	adds	r7, #8
 8023f96:	46bd      	mov	sp, r7
 8023f98:	bd80      	pop	{r7, pc}

08023f9a <_ZNSt5dequeIjSaIjEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8023f9a:	b580      	push	{r7, lr}
 8023f9c:	b082      	sub	sp, #8
 8023f9e:	af00      	add	r7, sp, #0
 8023fa0:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8023fa2:	687b      	ldr	r3, [r7, #4]
 8023fa4:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8023fa6:	687b      	ldr	r3, [r7, #4]
 8023fa8:	691b      	ldr	r3, [r3, #16]
 8023faa:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8023fac:	429a      	cmp	r2, r3
 8023fae:	d010      	beq.n	8023fd2 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023fb0:	687b      	ldr	r3, [r7, #4]
 8023fb2:	4618      	mov	r0, r3
 8023fb4:	f000 f98b 	bl	80242ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8023fb8:	4602      	mov	r2, r0
 8023fba:	687b      	ldr	r3, [r7, #4]
 8023fbc:	689b      	ldr	r3, [r3, #8]
 8023fbe:	4619      	mov	r1, r3
 8023fc0:	4610      	mov	r0, r2
 8023fc2:	f000 fc9a 	bl	80248fa <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8023fc6:	687b      	ldr	r3, [r7, #4]
 8023fc8:	689b      	ldr	r3, [r3, #8]
 8023fca:	1d1a      	adds	r2, r3, #4
 8023fcc:	687b      	ldr	r3, [r7, #4]
 8023fce:	609a      	str	r2, [r3, #8]
      }
 8023fd0:	e002      	b.n	8023fd8 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8023fd2:	6878      	ldr	r0, [r7, #4]
 8023fd4:	f000 fc9e 	bl	8024914 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>
      }
 8023fd8:	bf00      	nop
 8023fda:	3708      	adds	r7, #8
 8023fdc:	46bd      	mov	sp, r7
 8023fde:	bd80      	pop	{r7, pc}

08023fe0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8023fe0:	b580      	push	{r7, lr}
 8023fe2:	b082      	sub	sp, #8
 8023fe4:	af00      	add	r7, sp, #0
 8023fe6:	6078      	str	r0, [r7, #4]
 8023fe8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8023fea:	683b      	ldr	r3, [r7, #0]
 8023fec:	3308      	adds	r3, #8
 8023fee:	4619      	mov	r1, r3
 8023ff0:	6878      	ldr	r0, [r7, #4]
 8023ff2:	f000 fcb7 	bl	8024964 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>
 8023ff6:	6878      	ldr	r0, [r7, #4]
 8023ff8:	3708      	adds	r7, #8
 8023ffa:	46bd      	mov	sp, r7
 8023ffc:	bd80      	pop	{r7, pc}

08023ffe <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8023ffe:	b480      	push	{r7}
 8024000:	b083      	sub	sp, #12
 8024002:	af00      	add	r7, sp, #0
 8024004:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8024006:	687b      	ldr	r3, [r7, #4]
 8024008:	681b      	ldr	r3, [r3, #0]
 802400a:	4618      	mov	r0, r3
 802400c:	370c      	adds	r7, #12
 802400e:	46bd      	mov	sp, r7
 8024010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024014:	4770      	bx	lr

08024016 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8024016:	b580      	push	{r7, lr}
 8024018:	b082      	sub	sp, #8
 802401a:	af00      	add	r7, sp, #0
 802401c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 802401e:	6878      	ldr	r0, [r7, #4]
 8024020:	f000 fcbc 	bl	802499c <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>
 8024024:	687b      	ldr	r3, [r7, #4]
 8024026:	4618      	mov	r0, r3
 8024028:	f000 fcc4 	bl	80249b4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 802402c:	687b      	ldr	r3, [r7, #4]
 802402e:	4618      	mov	r0, r3
 8024030:	3708      	adds	r7, #8
 8024032:	46bd      	mov	sp, r7
 8024034:	bd80      	pop	{r7, pc}

08024036 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8024036:	b580      	push	{r7, lr}
 8024038:	b082      	sub	sp, #8
 802403a:	af00      	add	r7, sp, #0
 802403c:	6078      	str	r0, [r7, #4]
 802403e:	6878      	ldr	r0, [r7, #4]
 8024040:	f000 fcd1 	bl	80249e6 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>
 8024044:	687b      	ldr	r3, [r7, #4]
 8024046:	4618      	mov	r0, r3
 8024048:	3708      	adds	r7, #8
 802404a:	46bd      	mov	sp, r7
 802404c:	bd80      	pop	{r7, pc}

0802404e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 802404e:	b590      	push	{r4, r7, lr}
 8024050:	b089      	sub	sp, #36	; 0x24
 8024052:	af00      	add	r7, sp, #0
 8024054:	6078      	str	r0, [r7, #4]
 8024056:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8024058:	2014      	movs	r0, #20
 802405a:	f7fc ff35 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 802405e:	4602      	mov	r2, r0
 8024060:	683b      	ldr	r3, [r7, #0]
 8024062:	fbb3 f3f2 	udiv	r3, r3, r2
 8024066:	3301      	adds	r3, #1
 8024068:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802406a:	2308      	movs	r3, #8
 802406c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 802406e:	69fb      	ldr	r3, [r7, #28]
 8024070:	3302      	adds	r3, #2
 8024072:	613b      	str	r3, [r7, #16]
 8024074:	f107 0210 	add.w	r2, r7, #16
 8024078:	f107 030c 	add.w	r3, r7, #12
 802407c:	4611      	mov	r1, r2
 802407e:	4618      	mov	r0, r3
 8024080:	f000 fcbc 	bl	80249fc <_ZSt3maxIjERKT_S2_S2_>
 8024084:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024086:	681a      	ldr	r2, [r3, #0]
 8024088:	687b      	ldr	r3, [r7, #4]
 802408a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 802408c:	687b      	ldr	r3, [r7, #4]
 802408e:	685b      	ldr	r3, [r3, #4]
 8024090:	4619      	mov	r1, r3
 8024092:	6878      	ldr	r0, [r7, #4]
 8024094:	f000 fcc6 	bl	8024a24 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 8024098:	4602      	mov	r2, r0
 802409a:	687b      	ldr	r3, [r7, #4]
 802409c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 802409e:	687b      	ldr	r3, [r7, #4]
 80240a0:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80240a2:	687b      	ldr	r3, [r7, #4]
 80240a4:	6859      	ldr	r1, [r3, #4]
 80240a6:	69fb      	ldr	r3, [r7, #28]
 80240a8:	1acb      	subs	r3, r1, r3
 80240aa:	085b      	lsrs	r3, r3, #1
 80240ac:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80240ae:	4413      	add	r3, r2
 80240b0:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80240b2:	69fb      	ldr	r3, [r7, #28]
 80240b4:	009b      	lsls	r3, r3, #2
 80240b6:	69ba      	ldr	r2, [r7, #24]
 80240b8:	4413      	add	r3, r2
 80240ba:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80240bc:	697a      	ldr	r2, [r7, #20]
 80240be:	69b9      	ldr	r1, [r7, #24]
 80240c0:	6878      	ldr	r0, [r7, #4]
 80240c2:	f000 fccc 	bl	8024a5e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80240c6:	687b      	ldr	r3, [r7, #4]
 80240c8:	3308      	adds	r3, #8
 80240ca:	69b9      	ldr	r1, [r7, #24]
 80240cc:	4618      	mov	r0, r3
 80240ce:	f000 fb2d 	bl	802472c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80240d2:	687b      	ldr	r3, [r7, #4]
 80240d4:	f103 0218 	add.w	r2, r3, #24
 80240d8:	697b      	ldr	r3, [r7, #20]
 80240da:	3b04      	subs	r3, #4
 80240dc:	4619      	mov	r1, r3
 80240de:	4610      	mov	r0, r2
 80240e0:	f000 fb24 	bl	802472c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	68da      	ldr	r2, [r3, #12]
 80240e8:	687b      	ldr	r3, [r7, #4]
 80240ea:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80240ec:	687b      	ldr	r3, [r7, #4]
 80240ee:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80240f0:	2014      	movs	r0, #20
 80240f2:	f7fc fee9 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80240f6:	4602      	mov	r2, r0
 80240f8:	683b      	ldr	r3, [r7, #0]
 80240fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80240fe:	fb01 f202 	mul.w	r2, r1, r2
 8024102:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8024104:	4613      	mov	r3, r2
 8024106:	009b      	lsls	r3, r3, #2
 8024108:	4413      	add	r3, r2
 802410a:	009b      	lsls	r3, r3, #2
 802410c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 802410e:	687b      	ldr	r3, [r7, #4]
 8024110:	619a      	str	r2, [r3, #24]
    }
 8024112:	bf00      	nop
 8024114:	3724      	adds	r7, #36	; 0x24
 8024116:	46bd      	mov	sp, r7
 8024118:	bd90      	pop	{r4, r7, pc}

0802411a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 802411a:	b580      	push	{r7, lr}
 802411c:	b086      	sub	sp, #24
 802411e:	af00      	add	r7, sp, #0
 8024120:	60f8      	str	r0, [r7, #12]
 8024122:	60b9      	str	r1, [r7, #8]
 8024124:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024126:	68bb      	ldr	r3, [r7, #8]
 8024128:	617b      	str	r3, [r7, #20]
 802412a:	697a      	ldr	r2, [r7, #20]
 802412c:	687b      	ldr	r3, [r7, #4]
 802412e:	429a      	cmp	r2, r3
 8024130:	d209      	bcs.n	8024146 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8024132:	697b      	ldr	r3, [r7, #20]
 8024134:	681b      	ldr	r3, [r3, #0]
 8024136:	4619      	mov	r1, r3
 8024138:	68f8      	ldr	r0, [r7, #12]
 802413a:	f000 fb13 	bl	8024764 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 802413e:	697b      	ldr	r3, [r7, #20]
 8024140:	3304      	adds	r3, #4
 8024142:	617b      	str	r3, [r7, #20]
 8024144:	e7f1      	b.n	802412a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8024146:	bf00      	nop
 8024148:	3718      	adds	r7, #24
 802414a:	46bd      	mov	sp, r7
 802414c:	bd80      	pop	{r7, pc}

0802414e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 802414e:	b580      	push	{r7, lr}
 8024150:	b086      	sub	sp, #24
 8024152:	af00      	add	r7, sp, #0
 8024154:	60f8      	str	r0, [r7, #12]
 8024156:	60b9      	str	r1, [r7, #8]
 8024158:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802415a:	f107 0314 	add.w	r3, r7, #20
 802415e:	68f9      	ldr	r1, [r7, #12]
 8024160:	4618      	mov	r0, r3
 8024162:	f000 fc96 	bl	8024a92 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024166:	f107 0314 	add.w	r3, r7, #20
 802416a:	687a      	ldr	r2, [r7, #4]
 802416c:	68b9      	ldr	r1, [r7, #8]
 802416e:	4618      	mov	r0, r3
 8024170:	f000 fcac 	bl	8024acc <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024174:	f107 0314 	add.w	r3, r7, #20
 8024178:	4618      	mov	r0, r3
 802417a:	f000 fc9b 	bl	8024ab4 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
      }
 802417e:	bf00      	nop
 8024180:	3718      	adds	r7, #24
 8024182:	46bd      	mov	sp, r7
 8024184:	bd80      	pop	{r7, pc}

08024186 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8024186:	b580      	push	{r7, lr}
 8024188:	b082      	sub	sp, #8
 802418a:	af00      	add	r7, sp, #0
 802418c:	6078      	str	r0, [r7, #4]
 802418e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024190:	683b      	ldr	r3, [r7, #0]
 8024192:	3308      	adds	r3, #8
 8024194:	4619      	mov	r1, r3
 8024196:	6878      	ldr	r0, [r7, #4]
 8024198:	f000 f813 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802419c:	6878      	ldr	r0, [r7, #4]
 802419e:	3708      	adds	r7, #8
 80241a0:	46bd      	mov	sp, r7
 80241a2:	bd80      	pop	{r7, pc}

080241a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80241a4:	b580      	push	{r7, lr}
 80241a6:	b082      	sub	sp, #8
 80241a8:	af00      	add	r7, sp, #0
 80241aa:	6078      	str	r0, [r7, #4]
 80241ac:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80241ae:	683b      	ldr	r3, [r7, #0]
 80241b0:	3318      	adds	r3, #24
 80241b2:	4619      	mov	r1, r3
 80241b4:	6878      	ldr	r0, [r7, #4]
 80241b6:	f000 f804 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80241ba:	6878      	ldr	r0, [r7, #4]
 80241bc:	3708      	adds	r7, #8
 80241be:	46bd      	mov	sp, r7
 80241c0:	bd80      	pop	{r7, pc}

080241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80241c2:	b480      	push	{r7}
 80241c4:	b083      	sub	sp, #12
 80241c6:	af00      	add	r7, sp, #0
 80241c8:	6078      	str	r0, [r7, #4]
 80241ca:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80241cc:	683b      	ldr	r3, [r7, #0]
 80241ce:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80241d0:	687b      	ldr	r3, [r7, #4]
 80241d2:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80241d4:	683b      	ldr	r3, [r7, #0]
 80241d6:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80241d8:	687b      	ldr	r3, [r7, #4]
 80241da:	605a      	str	r2, [r3, #4]
 80241dc:	683b      	ldr	r3, [r7, #0]
 80241de:	689a      	ldr	r2, [r3, #8]
 80241e0:	687b      	ldr	r3, [r7, #4]
 80241e2:	609a      	str	r2, [r3, #8]
 80241e4:	683b      	ldr	r3, [r7, #0]
 80241e6:	68da      	ldr	r2, [r3, #12]
 80241e8:	687b      	ldr	r3, [r7, #4]
 80241ea:	60da      	str	r2, [r3, #12]
 80241ec:	687b      	ldr	r3, [r7, #4]
 80241ee:	4618      	mov	r0, r3
 80241f0:	370c      	adds	r7, #12
 80241f2:	46bd      	mov	sp, r7
 80241f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241f8:	4770      	bx	lr

080241fa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80241fa:	b480      	push	{r7}
 80241fc:	b08d      	sub	sp, #52	; 0x34
 80241fe:	af00      	add	r7, sp, #0
 8024200:	60f8      	str	r0, [r7, #12]
 8024202:	60b9      	str	r1, [r7, #8]
 8024204:	607a      	str	r2, [r7, #4]
 8024206:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8024208:	bf00      	nop
 802420a:	3734      	adds	r7, #52	; 0x34
 802420c:	46bd      	mov	sp, r7
 802420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024212:	4770      	bx	lr

08024214 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8024214:	b580      	push	{r7, lr}
 8024216:	b082      	sub	sp, #8
 8024218:	af00      	add	r7, sp, #0
 802421a:	6078      	str	r0, [r7, #4]
 802421c:	6878      	ldr	r0, [r7, #4]
 802421e:	f000 fc74 	bl	8024b0a <_ZNSaIjED1Ev>
 8024222:	687b      	ldr	r3, [r7, #4]
 8024224:	4618      	mov	r0, r3
 8024226:	3708      	adds	r7, #8
 8024228:	46bd      	mov	sp, r7
 802422a:	bd80      	pop	{r7, pc}

0802422c <_ZNSt11_Deque_baseIjSaIjEEC1Ev>:
      _Deque_base()
 802422c:	b580      	push	{r7, lr}
 802422e:	b082      	sub	sp, #8
 8024230:	af00      	add	r7, sp, #0
 8024232:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	4618      	mov	r0, r3
 8024238:	f000 fc57 	bl	8024aea <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 802423c:	2100      	movs	r1, #0
 802423e:	6878      	ldr	r0, [r7, #4]
 8024240:	f000 fc6f 	bl	8024b22 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>
 8024244:	687b      	ldr	r3, [r7, #4]
 8024246:	4618      	mov	r0, r3
 8024248:	3708      	adds	r7, #8
 802424a:	46bd      	mov	sp, r7
 802424c:	bd80      	pop	{r7, pc}

0802424e <_ZNSt11_Deque_baseIjSaIjEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 802424e:	b580      	push	{r7, lr}
 8024250:	b082      	sub	sp, #8
 8024252:	af00      	add	r7, sp, #0
 8024254:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8024256:	687b      	ldr	r3, [r7, #4]
 8024258:	681b      	ldr	r3, [r3, #0]
 802425a:	2b00      	cmp	r3, #0
 802425c:	d010      	beq.n	8024280 <_ZNSt11_Deque_baseIjSaIjEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 802425e:	687b      	ldr	r3, [r7, #4]
 8024260:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8024262:	687b      	ldr	r3, [r7, #4]
 8024264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8024266:	3304      	adds	r3, #4
 8024268:	461a      	mov	r2, r3
 802426a:	6878      	ldr	r0, [r7, #4]
 802426c:	f000 fcbc 	bl	8024be8 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8024270:	687b      	ldr	r3, [r7, #4]
 8024272:	6819      	ldr	r1, [r3, #0]
 8024274:	687b      	ldr	r3, [r7, #4]
 8024276:	685b      	ldr	r3, [r3, #4]
 8024278:	461a      	mov	r2, r3
 802427a:	6878      	ldr	r0, [r7, #4]
 802427c:	f000 fcce 	bl	8024c1c <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
    }
 8024280:	687b      	ldr	r3, [r7, #4]
 8024282:	4618      	mov	r0, r3
 8024284:	f7ff ffc6 	bl	8024214 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>
 8024288:	687b      	ldr	r3, [r7, #4]
 802428a:	4618      	mov	r0, r3
 802428c:	3708      	adds	r7, #8
 802428e:	46bd      	mov	sp, r7
 8024290:	bd80      	pop	{r7, pc}

08024292 <_ZNSt5dequeIjSaIjEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8024292:	b580      	push	{r7, lr}
 8024294:	b082      	sub	sp, #8
 8024296:	af00      	add	r7, sp, #0
 8024298:	6078      	str	r0, [r7, #4]
 802429a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 802429c:	683b      	ldr	r3, [r7, #0]
 802429e:	3308      	adds	r3, #8
 80242a0:	4619      	mov	r1, r3
 80242a2:	6878      	ldr	r0, [r7, #4]
 80242a4:	f000 f81e 	bl	80242e4 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80242a8:	6878      	ldr	r0, [r7, #4]
 80242aa:	3708      	adds	r7, #8
 80242ac:	46bd      	mov	sp, r7
 80242ae:	bd80      	pop	{r7, pc}

080242b0 <_ZNSt5dequeIjSaIjEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80242b0:	b580      	push	{r7, lr}
 80242b2:	b082      	sub	sp, #8
 80242b4:	af00      	add	r7, sp, #0
 80242b6:	6078      	str	r0, [r7, #4]
 80242b8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80242ba:	683b      	ldr	r3, [r7, #0]
 80242bc:	3318      	adds	r3, #24
 80242be:	4619      	mov	r1, r3
 80242c0:	6878      	ldr	r0, [r7, #4]
 80242c2:	f000 f80f 	bl	80242e4 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80242c6:	6878      	ldr	r0, [r7, #4]
 80242c8:	3708      	adds	r7, #8
 80242ca:	46bd      	mov	sp, r7
 80242cc:	bd80      	pop	{r7, pc}

080242ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80242ce:	b480      	push	{r7}
 80242d0:	b083      	sub	sp, #12
 80242d2:	af00      	add	r7, sp, #0
 80242d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80242d6:	687b      	ldr	r3, [r7, #4]
 80242d8:	4618      	mov	r0, r3
 80242da:	370c      	adds	r7, #12
 80242dc:	46bd      	mov	sp, r7
 80242de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242e2:	4770      	bx	lr

080242e4 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80242e4:	b480      	push	{r7}
 80242e6:	b083      	sub	sp, #12
 80242e8:	af00      	add	r7, sp, #0
 80242ea:	6078      	str	r0, [r7, #4]
 80242ec:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80242ee:	683b      	ldr	r3, [r7, #0]
 80242f0:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80242f2:	687b      	ldr	r3, [r7, #4]
 80242f4:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80242f6:	683b      	ldr	r3, [r7, #0]
 80242f8:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80242fa:	687b      	ldr	r3, [r7, #4]
 80242fc:	605a      	str	r2, [r3, #4]
 80242fe:	683b      	ldr	r3, [r7, #0]
 8024300:	689a      	ldr	r2, [r3, #8]
 8024302:	687b      	ldr	r3, [r7, #4]
 8024304:	609a      	str	r2, [r3, #8]
 8024306:	683b      	ldr	r3, [r7, #0]
 8024308:	68da      	ldr	r2, [r3, #12]
 802430a:	687b      	ldr	r3, [r7, #4]
 802430c:	60da      	str	r2, [r3, #12]
 802430e:	687b      	ldr	r3, [r7, #4]
 8024310:	4618      	mov	r0, r3
 8024312:	370c      	adds	r7, #12
 8024314:	46bd      	mov	sp, r7
 8024316:	f85d 7b04 	ldr.w	r7, [sp], #4
 802431a:	4770      	bx	lr

0802431c <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 802431c:	b480      	push	{r7}
 802431e:	b08d      	sub	sp, #52	; 0x34
 8024320:	af00      	add	r7, sp, #0
 8024322:	60f8      	str	r0, [r7, #12]
 8024324:	60b9      	str	r1, [r7, #8]
 8024326:	607a      	str	r2, [r7, #4]
 8024328:	603b      	str	r3, [r7, #0]
      }
 802432a:	bf00      	nop
 802432c:	3734      	adds	r7, #52	; 0x34
 802432e:	46bd      	mov	sp, r7
 8024330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024334:	4770      	bx	lr

08024336 <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8024336:	b480      	push	{r7}
 8024338:	b083      	sub	sp, #12
 802433a:	af00      	add	r7, sp, #0
 802433c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802433e:	687b      	ldr	r3, [r7, #4]
 8024340:	4618      	mov	r0, r3
 8024342:	370c      	adds	r7, #12
 8024344:	46bd      	mov	sp, r7
 8024346:	f85d 7b04 	ldr.w	r7, [sp], #4
 802434a:	4770      	bx	lr

0802434c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 802434c:	b590      	push	{r4, r7, lr}
 802434e:	b085      	sub	sp, #20
 8024350:	af00      	add	r7, sp, #0
 8024352:	60f8      	str	r0, [r7, #12]
 8024354:	60b9      	str	r1, [r7, #8]
 8024356:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8024358:	68fb      	ldr	r3, [r7, #12]
 802435a:	68ba      	ldr	r2, [r7, #8]
 802435c:	4611      	mov	r1, r2
 802435e:	4618      	mov	r0, r3
 8024360:	f000 fc78 	bl	8024c54 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>
	__x.clear();
 8024364:	68b8      	ldr	r0, [r7, #8]
 8024366:	f000 fc82 	bl	8024c6e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 802436a:	68fb      	ldr	r3, [r7, #12]
 802436c:	4618      	mov	r0, r3
 802436e:	f7ff fd61 	bl	8023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024372:	4604      	mov	r4, r0
 8024374:	68bb      	ldr	r3, [r7, #8]
 8024376:	4618      	mov	r0, r3
 8024378:	f7ff fd5c 	bl	8023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802437c:	4603      	mov	r3, r0
 802437e:	4619      	mov	r1, r3
 8024380:	4620      	mov	r0, r4
 8024382:	f000 fc88 	bl	8024c96 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>
      }
 8024386:	bf00      	nop
 8024388:	3714      	adds	r7, #20
 802438a:	46bd      	mov	sp, r7
 802438c:	bd90      	pop	{r4, r7, pc}

0802438e <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 802438e:	b480      	push	{r7}
 8024390:	b083      	sub	sp, #12
 8024392:	af00      	add	r7, sp, #0
 8024394:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8024396:	687b      	ldr	r3, [r7, #4]
 8024398:	4618      	mov	r0, r3
 802439a:	370c      	adds	r7, #12
 802439c:	46bd      	mov	sp, r7
 802439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243a2:	4770      	bx	lr

080243a4 <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80243a4:	b590      	push	{r4, r7, lr}
 80243a6:	b085      	sub	sp, #20
 80243a8:	af00      	add	r7, sp, #0
 80243aa:	60f8      	str	r0, [r7, #12]
 80243ac:	60b9      	str	r1, [r7, #8]
 80243ae:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 80243b0:	68fb      	ldr	r3, [r7, #12]
 80243b2:	68ba      	ldr	r2, [r7, #8]
 80243b4:	4611      	mov	r1, r2
 80243b6:	4618      	mov	r0, r3
 80243b8:	f000 fc7b 	bl	8024cb2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>
	__x.clear();
 80243bc:	68b8      	ldr	r0, [r7, #8]
 80243be:	f000 fc85 	bl	8024ccc <_ZNSt5dequeIjSaIjEE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80243c2:	68fb      	ldr	r3, [r7, #12]
 80243c4:	4618      	mov	r0, r3
 80243c6:	f7ff ff82 	bl	80242ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80243ca:	4604      	mov	r4, r0
 80243cc:	68bb      	ldr	r3, [r7, #8]
 80243ce:	4618      	mov	r0, r3
 80243d0:	f7ff ff7d 	bl	80242ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80243d4:	4603      	mov	r3, r0
 80243d6:	4619      	mov	r1, r3
 80243d8:	4620      	mov	r0, r4
 80243da:	f000 fc8b 	bl	8024cf4 <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>
      }
 80243de:	bf00      	nop
 80243e0:	3714      	adds	r7, #20
 80243e2:	46bd      	mov	sp, r7
 80243e4:	bd90      	pop	{r4, r7, pc}

080243e6 <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80243e6:	b480      	push	{r7}
 80243e8:	b083      	sub	sp, #12
 80243ea:	af00      	add	r7, sp, #0
 80243ec:	6078      	str	r0, [r7, #4]
 80243ee:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80243f0:	683b      	ldr	r3, [r7, #0]
 80243f2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80243f6:	fb02 f303 	mul.w	r3, r2, r3
 80243fa:	687a      	ldr	r2, [r7, #4]
 80243fc:	4413      	add	r3, r2
 80243fe:	4618      	mov	r0, r3
 8024400:	370c      	adds	r7, #12
 8024402:	46bd      	mov	sp, r7
 8024404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024408:	4770      	bx	lr

0802440a <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 802440a:	b480      	push	{r7}
 802440c:	b083      	sub	sp, #12
 802440e:	af00      	add	r7, sp, #0
 8024410:	6078      	str	r0, [r7, #4]
 8024412:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8024414:	683a      	ldr	r2, [r7, #0]
 8024416:	4613      	mov	r3, r2
 8024418:	015b      	lsls	r3, r3, #5
 802441a:	4413      	add	r3, r2
 802441c:	00db      	lsls	r3, r3, #3
 802441e:	687a      	ldr	r2, [r7, #4]
 8024420:	4413      	add	r3, r2
 8024422:	4618      	mov	r0, r3
 8024424:	370c      	adds	r7, #12
 8024426:	46bd      	mov	sp, r7
 8024428:	f85d 7b04 	ldr.w	r7, [sp], #4
 802442c:	4770      	bx	lr

0802442e <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 802442e:	b480      	push	{r7}
 8024430:	b083      	sub	sp, #12
 8024432:	af00      	add	r7, sp, #0
 8024434:	6078      	str	r0, [r7, #4]
 8024436:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8024438:	683b      	ldr	r3, [r7, #0]
 802443a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802443e:	fb02 f303 	mul.w	r3, r2, r3
 8024442:	687a      	ldr	r2, [r7, #4]
 8024444:	4413      	add	r3, r2
 8024446:	4618      	mov	r0, r3
 8024448:	370c      	adds	r7, #12
 802444a:	46bd      	mov	sp, r7
 802444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024450:	4770      	bx	lr

08024452 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8024452:	b480      	push	{r7}
 8024454:	b083      	sub	sp, #12
 8024456:	af00      	add	r7, sp, #0
 8024458:	6078      	str	r0, [r7, #4]
 802445a:	687b      	ldr	r3, [r7, #4]
 802445c:	685b      	ldr	r3, [r3, #4]
 802445e:	4618      	mov	r0, r3
 8024460:	370c      	adds	r7, #12
 8024462:	46bd      	mov	sp, r7
 8024464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024468:	4770      	bx	lr

0802446a <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 802446a:	b5b0      	push	{r4, r5, r7, lr}
 802446c:	b082      	sub	sp, #8
 802446e:	af00      	add	r7, sp, #0
 8024470:	6078      	str	r0, [r7, #4]
 8024472:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8024474:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8024476:	1d3b      	adds	r3, r7, #4
 8024478:	4618      	mov	r0, r3
 802447a:	f000 f83d 	bl	80244f8 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 802447e:	462a      	mov	r2, r5
 8024480:	6839      	ldr	r1, [r7, #0]
 8024482:	4620      	mov	r0, r4
 8024484:	f000 fc44 	bl	8024d10 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8024488:	4603      	mov	r3, r0
    }
 802448a:	4618      	mov	r0, r3
 802448c:	3708      	adds	r7, #8
 802448e:	46bd      	mov	sp, r7
 8024490:	bdb0      	pop	{r4, r5, r7, pc}

08024492 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8024492:	b590      	push	{r4, r7, lr}
 8024494:	b085      	sub	sp, #20
 8024496:	af00      	add	r7, sp, #0
 8024498:	6078      	str	r0, [r7, #4]
 802449a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 802449c:	683b      	ldr	r3, [r7, #0]
 802449e:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 80244a0:	6878      	ldr	r0, [r7, #4]
 80244a2:	f000 f829 	bl	80244f8 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 80244a6:	4622      	mov	r2, r4
 80244a8:	68f9      	ldr	r1, [r7, #12]
 80244aa:	6878      	ldr	r0, [r7, #4]
 80244ac:	f000 fc46 	bl	8024d3c <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 80244b0:	bf00      	nop
 80244b2:	3714      	adds	r7, #20
 80244b4:	46bd      	mov	sp, r7
 80244b6:	bd90      	pop	{r4, r7, pc}

080244b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80244b8:	b5b0      	push	{r4, r5, r7, lr}
 80244ba:	b088      	sub	sp, #32
 80244bc:	af00      	add	r7, sp, #0
 80244be:	60f8      	str	r0, [r7, #12]
 80244c0:	60b9      	str	r1, [r7, #8]
 80244c2:	607a      	str	r2, [r7, #4]
 80244c4:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80244c6:	68b8      	ldr	r0, [r7, #8]
 80244c8:	f000 fc4e 	bl	8024d68 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 80244cc:	4604      	mov	r4, r0
 80244ce:	6878      	ldr	r0, [r7, #4]
 80244d0:	f000 fc4a 	bl	8024d68 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 80244d4:	4605      	mov	r5, r0
 80244d6:	f107 0310 	add.w	r3, r7, #16
 80244da:	6839      	ldr	r1, [r7, #0]
 80244dc:	4618      	mov	r0, r3
 80244de:	f7ff fe70 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80244e2:	68f8      	ldr	r0, [r7, #12]
 80244e4:	f107 0310 	add.w	r3, r7, #16
 80244e8:	462a      	mov	r2, r5
 80244ea:	4621      	mov	r1, r4
 80244ec:	f000 fc47 	bl	8024d7e <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>
    }
 80244f0:	68f8      	ldr	r0, [r7, #12]
 80244f2:	3720      	adds	r7, #32
 80244f4:	46bd      	mov	sp, r7
 80244f6:	bdb0      	pop	{r4, r5, r7, pc}

080244f8 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80244f8:	b480      	push	{r7}
 80244fa:	b083      	sub	sp, #12
 80244fc:	af00      	add	r7, sp, #0
 80244fe:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8024500:	bf00      	nop
 8024502:	4618      	mov	r0, r3
 8024504:	370c      	adds	r7, #12
 8024506:	46bd      	mov	sp, r7
 8024508:	f85d 7b04 	ldr.w	r7, [sp], #4
 802450c:	4770      	bx	lr

0802450e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>:
      { std::copy(__first, __last, std::inserter(*this, __pos)); }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
 802450e:	b590      	push	{r4, r7, lr}
 8024510:	b0a5      	sub	sp, #148	; 0x94
 8024512:	af02      	add	r7, sp, #8
 8024514:	60f8      	str	r0, [r7, #12]
 8024516:	60b9      	str	r1, [r7, #8]
 8024518:	607a      	str	r2, [r7, #4]
 802451a:	603b      	str	r3, [r7, #0]
      _M_range_insert_aux(iterator __pos,
			  _ForwardIterator __first, _ForwardIterator __last,
			  std::forward_iterator_tag)
      {
	const size_type __n = std::distance(__first, __last);
 802451c:	6839      	ldr	r1, [r7, #0]
 802451e:	6878      	ldr	r0, [r7, #4]
 8024520:	f7ff ffa3 	bl	802446a <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8024524:	4603      	mov	r3, r0
 8024526:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 802452a:	68bb      	ldr	r3, [r7, #8]
 802452c:	681a      	ldr	r2, [r3, #0]
 802452e:	68fb      	ldr	r3, [r7, #12]
 8024530:	689b      	ldr	r3, [r3, #8]
 8024532:	429a      	cmp	r2, r3
 8024534:	d126      	bne.n	8024584 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0x76>
	  {
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8024536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802453a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 802453e:	68f9      	ldr	r1, [r7, #12]
 8024540:	4618      	mov	r0, r3
 8024542:	f000 fc4d 	bl	8024de0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    __try
	      {
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8024546:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802454a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802454e:	4611      	mov	r1, r2
 8024550:	4618      	mov	r0, r3
 8024552:	f7ff fe36 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 8024556:	68fb      	ldr	r3, [r7, #12]
 8024558:	4618      	mov	r0, r3
 802455a:	f7ff fc6b 	bl	8023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802455e:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8024560:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8024564:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8024568:	9200      	str	r2, [sp, #0]
 802456a:	683a      	ldr	r2, [r7, #0]
 802456c:	6879      	ldr	r1, [r7, #4]
 802456e:	f000 fc61 	bl	8024e34 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 8024572:	68fb      	ldr	r3, [r7, #12]
 8024574:	f103 0408 	add.w	r4, r3, #8
 8024578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802457c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802457e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		__throw_exception_again;
	      }
	  }
	else
	  _M_insert_aux(__pos, __first, __last, __n);
      }
 8024582:	e03d      	b.n	8024600 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 8024584:	68bb      	ldr	r3, [r7, #8]
 8024586:	681a      	ldr	r2, [r3, #0]
 8024588:	68fb      	ldr	r3, [r7, #12]
 802458a:	699b      	ldr	r3, [r3, #24]
 802458c:	429a      	cmp	r2, r3
 802458e:	d127      	bne.n	80245e0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 8024590:	f107 0314 	add.w	r3, r7, #20
 8024594:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8024598:	68f9      	ldr	r1, [r7, #12]
 802459a:	4618      	mov	r0, r3
 802459c:	f000 fc62 	bl	8024e64 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 80245a0:	68fb      	ldr	r3, [r7, #12]
 80245a2:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 80245a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80245aa:	4611      	mov	r1, r2
 80245ac:	4618      	mov	r0, r3
 80245ae:	f7ff fe08 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 80245b2:	68fb      	ldr	r3, [r7, #12]
 80245b4:	4618      	mov	r0, r3
 80245b6:	f7ff fc3d 	bl	8023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80245ba:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 80245bc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80245c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80245c4:	9200      	str	r2, [sp, #0]
 80245c6:	683a      	ldr	r2, [r7, #0]
 80245c8:	6879      	ldr	r1, [r7, #4]
 80245ca:	f000 fc33 	bl	8024e34 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 80245ce:	68fb      	ldr	r3, [r7, #12]
 80245d0:	f103 0418 	add.w	r4, r3, #24
 80245d4:	f107 0314 	add.w	r3, r7, #20
 80245d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80245da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80245de:	e00f      	b.n	8024600 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 80245e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80245e4:	68b9      	ldr	r1, [r7, #8]
 80245e6:	4618      	mov	r0, r3
 80245e8:	f7ff fdeb 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80245ec:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80245f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80245f4:	9300      	str	r3, [sp, #0]
 80245f6:	683b      	ldr	r3, [r7, #0]
 80245f8:	687a      	ldr	r2, [r7, #4]
 80245fa:	68f8      	ldr	r0, [r7, #12]
 80245fc:	f000 fc5c 	bl	8024eb8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>
      }
 8024600:	bf00      	nop
 8024602:	378c      	adds	r7, #140	; 0x8c
 8024604:	46bd      	mov	sp, r7
 8024606:	bd90      	pop	{r4, r7, pc}

08024608 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>:
      _M_erase_at_end(iterator __pos)
 8024608:	b590      	push	{r4, r7, lr}
 802460a:	b08b      	sub	sp, #44	; 0x2c
 802460c:	af00      	add	r7, sp, #0
 802460e:	6078      	str	r0, [r7, #4]
 8024610:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8024612:	f107 0308 	add.w	r3, r7, #8
 8024616:	6839      	ldr	r1, [r7, #0]
 8024618:	4618      	mov	r0, r3
 802461a:	f7ff fdd2 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802461e:	f107 0318 	add.w	r3, r7, #24
 8024622:	6879      	ldr	r1, [r7, #4]
 8024624:	4618      	mov	r0, r3
 8024626:	f7ff fdbd 	bl	80241a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 802462a:	687b      	ldr	r3, [r7, #4]
 802462c:	4618      	mov	r0, r3
 802462e:	f7ff fc01 	bl	8023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024632:	4603      	mov	r3, r0
 8024634:	f107 0218 	add.w	r2, r7, #24
 8024638:	f107 0108 	add.w	r1, r7, #8
 802463c:	6878      	ldr	r0, [r7, #4]
 802463e:	f7ff fddc 	bl	80241fa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
	_M_destroy_nodes(__pos._M_node + 1,
 8024642:	6878      	ldr	r0, [r7, #4]
 8024644:	683b      	ldr	r3, [r7, #0]
 8024646:	68db      	ldr	r3, [r3, #12]
 8024648:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 802464a:	687b      	ldr	r3, [r7, #4]
 802464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 802464e:	3304      	adds	r3, #4
 8024650:	461a      	mov	r2, r3
 8024652:	f7ff fd62 	bl	802411a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	this->_M_impl._M_finish = __pos;
 8024656:	687b      	ldr	r3, [r7, #4]
 8024658:	683a      	ldr	r2, [r7, #0]
 802465a:	f103 0418 	add.w	r4, r3, #24
 802465e:	4613      	mov	r3, r2
 8024660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8024666:	bf00      	nop
 8024668:	372c      	adds	r7, #44	; 0x2c
 802466a:	46bd      	mov	sp, r7
 802466c:	bd90      	pop	{r4, r7, pc}

0802466e <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 802466e:	b480      	push	{r7}
 8024670:	b083      	sub	sp, #12
 8024672:	af00      	add	r7, sp, #0
 8024674:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8024676:	687b      	ldr	r3, [r7, #4]
 8024678:	4618      	mov	r0, r3
 802467a:	370c      	adds	r7, #12
 802467c:	46bd      	mov	sp, r7
 802467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024682:	4770      	bx	lr

08024684 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8024684:	b5b0      	push	{r4, r5, r7, lr}
 8024686:	b084      	sub	sp, #16
 8024688:	af00      	add	r7, sp, #0
 802468a:	60f8      	str	r0, [r7, #12]
 802468c:	60b9      	str	r1, [r7, #8]
 802468e:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8024690:	6878      	ldr	r0, [r7, #4]
 8024692:	f7ff ffec 	bl	802466e <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8024696:	4605      	mov	r5, r0
 8024698:	68bb      	ldr	r3, [r7, #8]
 802469a:	4619      	mov	r1, r3
 802469c:	2014      	movs	r0, #20
 802469e:	f7fc fc07 	bl	8020eb0 <_ZnwjPv>
 80246a2:	4603      	mov	r3, r0
 80246a4:	461c      	mov	r4, r3
 80246a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80246a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80246aa:	682b      	ldr	r3, [r5, #0]
 80246ac:	6023      	str	r3, [r4, #0]
 80246ae:	bf00      	nop
 80246b0:	3710      	adds	r7, #16
 80246b2:	46bd      	mov	sp, r7
 80246b4:	bdb0      	pop	{r4, r5, r7, pc}

080246b6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80246b6:	b580      	push	{r7, lr}
 80246b8:	b082      	sub	sp, #8
 80246ba:	af00      	add	r7, sp, #0
 80246bc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80246be:	687b      	ldr	r3, [r7, #4]
 80246c0:	4618      	mov	r0, r3
 80246c2:	f000 ff06 	bl	80254d2 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80246c6:	4603      	mov	r3, r0
 80246c8:	4618      	mov	r0, r3
 80246ca:	f000 fee8 	bl	802549e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>
 80246ce:	4603      	mov	r3, r0
 80246d0:	4618      	mov	r0, r3
 80246d2:	3708      	adds	r7, #8
 80246d4:	46bd      	mov	sp, r7
 80246d6:	bd80      	pop	{r7, pc}

080246d8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 80246d8:	b580      	push	{r7, lr}
 80246da:	b082      	sub	sp, #8
 80246dc:	af00      	add	r7, sp, #0
 80246de:	6078      	str	r0, [r7, #4]
 80246e0:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80246e2:	687b      	ldr	r3, [r7, #4]
 80246e4:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 80246e6:	687b      	ldr	r3, [r7, #4]
 80246e8:	681b      	ldr	r3, [r3, #0]
 80246ea:	1ad3      	subs	r3, r2, r3
 80246ec:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80246ee:	461a      	mov	r2, r3
 80246f0:	683b      	ldr	r3, [r7, #0]
 80246f2:	4293      	cmp	r3, r2
 80246f4:	d904      	bls.n	8024700 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 80246f6:	2201      	movs	r2, #1
 80246f8:	6839      	ldr	r1, [r7, #0]
 80246fa:	6878      	ldr	r0, [r7, #4]
 80246fc:	f000 fef4 	bl	80254e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8024700:	bf00      	nop
 8024702:	3708      	adds	r7, #8
 8024704:	46bd      	mov	sp, r7
 8024706:	bd80      	pop	{r7, pc}

08024708 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8024708:	b590      	push	{r4, r7, lr}
 802470a:	b083      	sub	sp, #12
 802470c:	af00      	add	r7, sp, #0
 802470e:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8024710:	687c      	ldr	r4, [r7, #4]
 8024712:	2014      	movs	r0, #20
 8024714:	f7fc fbd8 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024718:	4603      	mov	r3, r0
 802471a:	4619      	mov	r1, r3
 802471c:	4620      	mov	r0, r4
 802471e:	f000 ff7d 	bl	802561c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>
 8024722:	4603      	mov	r3, r0
      }
 8024724:	4618      	mov	r0, r3
 8024726:	370c      	adds	r7, #12
 8024728:	46bd      	mov	sp, r7
 802472a:	bd90      	pop	{r4, r7, pc}

0802472c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 802472c:	b590      	push	{r4, r7, lr}
 802472e:	b083      	sub	sp, #12
 8024730:	af00      	add	r7, sp, #0
 8024732:	6078      	str	r0, [r7, #4]
 8024734:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8024736:	687b      	ldr	r3, [r7, #4]
 8024738:	683a      	ldr	r2, [r7, #0]
 802473a:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 802473c:	683b      	ldr	r3, [r7, #0]
 802473e:	681a      	ldr	r2, [r3, #0]
 8024740:	687b      	ldr	r3, [r7, #4]
 8024742:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8024744:	687b      	ldr	r3, [r7, #4]
 8024746:	685c      	ldr	r4, [r3, #4]
 8024748:	f000 f81f 	bl	802478a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802474c:	4602      	mov	r2, r0
 802474e:	4613      	mov	r3, r2
 8024750:	009b      	lsls	r3, r3, #2
 8024752:	4413      	add	r3, r2
 8024754:	009b      	lsls	r3, r3, #2
 8024756:	18e2      	adds	r2, r4, r3
 8024758:	687b      	ldr	r3, [r7, #4]
 802475a:	609a      	str	r2, [r3, #8]
      }
 802475c:	bf00      	nop
 802475e:	370c      	adds	r7, #12
 8024760:	46bd      	mov	sp, r7
 8024762:	bd90      	pop	{r4, r7, pc}

08024764 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8024764:	b590      	push	{r4, r7, lr}
 8024766:	b083      	sub	sp, #12
 8024768:	af00      	add	r7, sp, #0
 802476a:	6078      	str	r0, [r7, #4]
 802476c:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 802476e:	687c      	ldr	r4, [r7, #4]
 8024770:	2014      	movs	r0, #20
 8024772:	f7fc fba9 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024776:	4603      	mov	r3, r0
 8024778:	461a      	mov	r2, r3
 802477a:	6839      	ldr	r1, [r7, #0]
 802477c:	4620      	mov	r0, r4
 802477e:	f000 ff5c 	bl	802563a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>
      }
 8024782:	bf00      	nop
 8024784:	370c      	adds	r7, #12
 8024786:	46bd      	mov	sp, r7
 8024788:	bd90      	pop	{r4, r7, pc}

0802478a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 802478a:	b580      	push	{r7, lr}
 802478c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 802478e:	2014      	movs	r0, #20
 8024790:	f7fc fb9a 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024794:	4603      	mov	r3, r0
 8024796:	4618      	mov	r0, r3
 8024798:	bd80      	pop	{r7, pc}

0802479a <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 802479a:	b480      	push	{r7}
 802479c:	b083      	sub	sp, #12
 802479e:	af00      	add	r7, sp, #0
 80247a0:	6078      	str	r0, [r7, #4]
 80247a2:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80247a4:	bf00      	nop
 80247a6:	370c      	adds	r7, #12
 80247a8:	46bd      	mov	sp, r7
 80247aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247ae:	4770      	bx	lr

080247b0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 80247b0:	b580      	push	{r7, lr}
 80247b2:	b084      	sub	sp, #16
 80247b4:	af00      	add	r7, sp, #0
 80247b6:	60f8      	str	r0, [r7, #12]
 80247b8:	60b9      	str	r1, [r7, #8]
 80247ba:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 80247bc:	68b9      	ldr	r1, [r7, #8]
 80247be:	68f8      	ldr	r0, [r7, #12]
 80247c0:	f7ff fcff 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp += __n;
 80247c4:	6879      	ldr	r1, [r7, #4]
 80247c6:	68f8      	ldr	r0, [r7, #12]
 80247c8:	f000 ff46 	bl	8025658 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	return __tmp;
 80247cc:	bf00      	nop
      }
 80247ce:	68f8      	ldr	r0, [r7, #12]
 80247d0:	3710      	adds	r7, #16
 80247d2:	46bd      	mov	sp, r7
 80247d4:	bd80      	pop	{r7, pc}

080247d6 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80247d6:	b480      	push	{r7}
 80247d8:	b083      	sub	sp, #12
 80247da:	af00      	add	r7, sp, #0
 80247dc:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80247de:	687b      	ldr	r3, [r7, #4]
 80247e0:	681b      	ldr	r3, [r3, #0]
 80247e2:	4618      	mov	r0, r3
 80247e4:	370c      	adds	r7, #12
 80247e6:	46bd      	mov	sp, r7
 80247e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247ec:	4770      	bx	lr

080247ee <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80247ee:	b580      	push	{r7, lr}
 80247f0:	b084      	sub	sp, #16
 80247f2:	af00      	add	r7, sp, #0
 80247f4:	60f8      	str	r0, [r7, #12]
 80247f6:	60b9      	str	r1, [r7, #8]
 80247f8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80247fa:	6878      	ldr	r0, [r7, #4]
 80247fc:	f000 ff90 	bl	8025720 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8024800:	4603      	mov	r3, r0
 8024802:	461a      	mov	r2, r3
 8024804:	68b9      	ldr	r1, [r7, #8]
 8024806:	68f8      	ldr	r0, [r7, #12]
 8024808:	f000 ff95 	bl	8025736 <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>
	}
 802480c:	bf00      	nop
 802480e:	3710      	adds	r7, #16
 8024810:	46bd      	mov	sp, r7
 8024812:	bd80      	pop	{r7, pc}

08024814 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8024814:	b5b0      	push	{r4, r5, r7, lr}
 8024816:	b082      	sub	sp, #8
 8024818:	af00      	add	r7, sp, #0
 802481a:	6078      	str	r0, [r7, #4]
 802481c:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 802481e:	6878      	ldr	r0, [r7, #4]
 8024820:	f000 ff9f 	bl	8025762 <_ZNKSt5dequeIjSaIjEE4sizeEv>
 8024824:	4604      	mov	r4, r0
 8024826:	6878      	ldr	r0, [r7, #4]
 8024828:	f000 ffad 	bl	8025786 <_ZNKSt5dequeIjSaIjEE8max_sizeEv>
 802482c:	4603      	mov	r3, r0
 802482e:	429c      	cmp	r4, r3
 8024830:	bf0c      	ite	eq
 8024832:	2301      	moveq	r3, #1
 8024834:	2300      	movne	r3, #0
 8024836:	b2db      	uxtb	r3, r3
 8024838:	2b00      	cmp	r3, #0
 802483a:	d002      	beq.n	8024842 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x2e>
	  __throw_length_error(
 802483c:	4816      	ldr	r0, [pc, #88]	; (8024898 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x84>)
 802483e:	f017 f987 	bl	803bb50 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8024842:	2101      	movs	r1, #1
 8024844:	6878      	ldr	r0, [r7, #4]
 8024846:	f000 ffaf 	bl	80257a8 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 802484a:	687a      	ldr	r2, [r7, #4]
 802484c:	687b      	ldr	r3, [r7, #4]
 802484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024850:	1d1c      	adds	r4, r3, #4
 8024852:	4610      	mov	r0, r2
 8024854:	f000 ffc3 	bl	80257de <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8024858:	4603      	mov	r3, r0
 802485a:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 802485c:	687c      	ldr	r4, [r7, #4]
 802485e:	687b      	ldr	r3, [r7, #4]
 8024860:	699d      	ldr	r5, [r3, #24]
 8024862:	6838      	ldr	r0, [r7, #0]
 8024864:	f000 ff5c 	bl	8025720 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8024868:	4603      	mov	r3, r0
 802486a:	461a      	mov	r2, r3
 802486c:	4629      	mov	r1, r5
 802486e:	4620      	mov	r0, r4
 8024870:	f7ff ffbd 	bl	80247ee <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8024874:	687b      	ldr	r3, [r7, #4]
 8024876:	f103 0218 	add.w	r2, r3, #24
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802487e:	3304      	adds	r3, #4
 8024880:	4619      	mov	r1, r3
 8024882:	4610      	mov	r0, r2
 8024884:	f000 ffbd 	bl	8025802 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8024888:	687b      	ldr	r3, [r7, #4]
 802488a:	69da      	ldr	r2, [r3, #28]
 802488c:	687b      	ldr	r3, [r7, #4]
 802488e:	619a      	str	r2, [r3, #24]
      }
 8024890:	bf00      	nop
 8024892:	3708      	adds	r7, #8
 8024894:	46bd      	mov	sp, r7
 8024896:	bdb0      	pop	{r4, r5, r7, pc}
 8024898:	0803dbac 	.word	0x0803dbac

0802489c <_ZNKSt5dequeIjSaIjEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 802489c:	b580      	push	{r7, lr}
 802489e:	b082      	sub	sp, #8
 80248a0:	af00      	add	r7, sp, #0
 80248a2:	6078      	str	r0, [r7, #4]
 80248a4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80248a6:	683b      	ldr	r3, [r7, #0]
 80248a8:	3308      	adds	r3, #8
 80248aa:	4619      	mov	r1, r3
 80248ac:	6878      	ldr	r0, [r7, #4]
 80248ae:	f000 ffd4 	bl	802585a <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>
 80248b2:	6878      	ldr	r0, [r7, #4]
 80248b4:	3708      	adds	r7, #8
 80248b6:	46bd      	mov	sp, r7
 80248b8:	bd80      	pop	{r7, pc}

080248ba <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80248ba:	b480      	push	{r7}
 80248bc:	b083      	sub	sp, #12
 80248be:	af00      	add	r7, sp, #0
 80248c0:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80248c2:	687b      	ldr	r3, [r7, #4]
 80248c4:	681b      	ldr	r3, [r3, #0]
 80248c6:	4618      	mov	r0, r3
 80248c8:	370c      	adds	r7, #12
 80248ca:	46bd      	mov	sp, r7
 80248cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248d0:	4770      	bx	lr

080248d2 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80248d2:	b480      	push	{r7}
 80248d4:	b083      	sub	sp, #12
 80248d6:	af00      	add	r7, sp, #0
 80248d8:	6078      	str	r0, [r7, #4]
 80248da:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80248dc:	687b      	ldr	r3, [r7, #4]
 80248de:	681a      	ldr	r2, [r3, #0]
 80248e0:	683b      	ldr	r3, [r7, #0]
 80248e2:	681b      	ldr	r3, [r3, #0]
 80248e4:	429a      	cmp	r2, r3
 80248e6:	bf0c      	ite	eq
 80248e8:	2301      	moveq	r3, #1
 80248ea:	2300      	movne	r3, #0
 80248ec:	b2db      	uxtb	r3, r3
 80248ee:	4618      	mov	r0, r3
 80248f0:	370c      	adds	r7, #12
 80248f2:	46bd      	mov	sp, r7
 80248f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248f8:	4770      	bx	lr

080248fa <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80248fa:	b580      	push	{r7, lr}
 80248fc:	b082      	sub	sp, #8
 80248fe:	af00      	add	r7, sp, #0
 8024900:	6078      	str	r0, [r7, #4]
 8024902:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8024904:	6839      	ldr	r1, [r7, #0]
 8024906:	6878      	ldr	r0, [r7, #4]
 8024908:	f000 ffc3 	bl	8025892 <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>
	}
 802490c:	bf00      	nop
 802490e:	3708      	adds	r7, #8
 8024910:	46bd      	mov	sp, r7
 8024912:	bd80      	pop	{r7, pc}

08024914 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8024914:	b580      	push	{r7, lr}
 8024916:	b082      	sub	sp, #8
 8024918:	af00      	add	r7, sp, #0
 802491a:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 802491c:	687b      	ldr	r3, [r7, #4]
 802491e:	4618      	mov	r0, r3
 8024920:	f7ff fcd5 	bl	80242ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8024924:	4602      	mov	r2, r0
 8024926:	687b      	ldr	r3, [r7, #4]
 8024928:	689b      	ldr	r3, [r3, #8]
 802492a:	4619      	mov	r1, r3
 802492c:	4610      	mov	r0, r2
 802492e:	f7ff ffe4 	bl	80248fa <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8024932:	687a      	ldr	r2, [r7, #4]
 8024934:	687b      	ldr	r3, [r7, #4]
 8024936:	68db      	ldr	r3, [r3, #12]
 8024938:	4619      	mov	r1, r3
 802493a:	4610      	mov	r0, r2
 802493c:	f000 ff7a 	bl	8025834 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8024940:	687b      	ldr	r3, [r7, #4]
 8024942:	f103 0208 	add.w	r2, r3, #8
 8024946:	687b      	ldr	r3, [r7, #4]
 8024948:	695b      	ldr	r3, [r3, #20]
 802494a:	3304      	adds	r3, #4
 802494c:	4619      	mov	r1, r3
 802494e:	4610      	mov	r0, r2
 8024950:	f000 ff57 	bl	8025802 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8024954:	687b      	ldr	r3, [r7, #4]
 8024956:	68da      	ldr	r2, [r3, #12]
 8024958:	687b      	ldr	r3, [r7, #4]
 802495a:	609a      	str	r2, [r3, #8]
    }
 802495c:	bf00      	nop
 802495e:	3708      	adds	r7, #8
 8024960:	46bd      	mov	sp, r7
 8024962:	bd80      	pop	{r7, pc}

08024964 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8024964:	b480      	push	{r7}
 8024966:	b083      	sub	sp, #12
 8024968:	af00      	add	r7, sp, #0
 802496a:	6078      	str	r0, [r7, #4]
 802496c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802496e:	683b      	ldr	r3, [r7, #0]
 8024970:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024972:	687b      	ldr	r3, [r7, #4]
 8024974:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024976:	683b      	ldr	r3, [r7, #0]
 8024978:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 802497a:	687b      	ldr	r3, [r7, #4]
 802497c:	605a      	str	r2, [r3, #4]
 802497e:	683b      	ldr	r3, [r7, #0]
 8024980:	689a      	ldr	r2, [r3, #8]
 8024982:	687b      	ldr	r3, [r7, #4]
 8024984:	609a      	str	r2, [r3, #8]
 8024986:	683b      	ldr	r3, [r7, #0]
 8024988:	68da      	ldr	r2, [r3, #12]
 802498a:	687b      	ldr	r3, [r7, #4]
 802498c:	60da      	str	r2, [r3, #12]
 802498e:	687b      	ldr	r3, [r7, #4]
 8024990:	4618      	mov	r0, r3
 8024992:	370c      	adds	r7, #12
 8024994:	46bd      	mov	sp, r7
 8024996:	f85d 7b04 	ldr.w	r7, [sp], #4
 802499a:	4770      	bx	lr

0802499c <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 802499c:	b580      	push	{r7, lr}
 802499e:	b082      	sub	sp, #8
 80249a0:	af00      	add	r7, sp, #0
 80249a2:	6078      	str	r0, [r7, #4]
 80249a4:	6878      	ldr	r0, [r7, #4]
 80249a6:	f000 ff7f 	bl	80258a8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>
 80249aa:	687b      	ldr	r3, [r7, #4]
 80249ac:	4618      	mov	r0, r3
 80249ae:	3708      	adds	r7, #8
 80249b0:	46bd      	mov	sp, r7
 80249b2:	bd80      	pop	{r7, pc}

080249b4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80249b4:	b580      	push	{r7, lr}
 80249b6:	b082      	sub	sp, #8
 80249b8:	af00      	add	r7, sp, #0
 80249ba:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80249bc:	687b      	ldr	r3, [r7, #4]
 80249be:	2200      	movs	r2, #0
 80249c0:	601a      	str	r2, [r3, #0]
 80249c2:	687b      	ldr	r3, [r7, #4]
 80249c4:	2200      	movs	r2, #0
 80249c6:	605a      	str	r2, [r3, #4]
 80249c8:	687b      	ldr	r3, [r7, #4]
 80249ca:	3308      	adds	r3, #8
 80249cc:	4618      	mov	r0, r3
 80249ce:	f000 ff76 	bl	80258be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
 80249d2:	687b      	ldr	r3, [r7, #4]
 80249d4:	3318      	adds	r3, #24
 80249d6:	4618      	mov	r0, r3
 80249d8:	f000 ff71 	bl	80258be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
	{ }
 80249dc:	687b      	ldr	r3, [r7, #4]
 80249de:	4618      	mov	r0, r3
 80249e0:	3708      	adds	r7, #8
 80249e2:	46bd      	mov	sp, r7
 80249e4:	bd80      	pop	{r7, pc}

080249e6 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80249e6:	b480      	push	{r7}
 80249e8:	b083      	sub	sp, #12
 80249ea:	af00      	add	r7, sp, #0
 80249ec:	6078      	str	r0, [r7, #4]
 80249ee:	687b      	ldr	r3, [r7, #4]
 80249f0:	4618      	mov	r0, r3
 80249f2:	370c      	adds	r7, #12
 80249f4:	46bd      	mov	sp, r7
 80249f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249fa:	4770      	bx	lr

080249fc <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80249fc:	b480      	push	{r7}
 80249fe:	b083      	sub	sp, #12
 8024a00:	af00      	add	r7, sp, #0
 8024a02:	6078      	str	r0, [r7, #4]
 8024a04:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8024a06:	687b      	ldr	r3, [r7, #4]
 8024a08:	681a      	ldr	r2, [r3, #0]
 8024a0a:	683b      	ldr	r3, [r7, #0]
 8024a0c:	681b      	ldr	r3, [r3, #0]
 8024a0e:	429a      	cmp	r2, r3
 8024a10:	d201      	bcs.n	8024a16 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8024a12:	683b      	ldr	r3, [r7, #0]
 8024a14:	e000      	b.n	8024a18 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8024a16:	687b      	ldr	r3, [r7, #4]
    }
 8024a18:	4618      	mov	r0, r3
 8024a1a:	370c      	adds	r7, #12
 8024a1c:	46bd      	mov	sp, r7
 8024a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a22:	4770      	bx	lr

08024a24 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8024a24:	b590      	push	{r4, r7, lr}
 8024a26:	b085      	sub	sp, #20
 8024a28:	af00      	add	r7, sp, #0
 8024a2a:	6078      	str	r0, [r7, #4]
 8024a2c:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024a2e:	f107 030c 	add.w	r3, r7, #12
 8024a32:	6879      	ldr	r1, [r7, #4]
 8024a34:	4618      	mov	r0, r3
 8024a36:	f000 f82c 	bl	8024a92 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8024a3a:	f107 030c 	add.w	r3, r7, #12
 8024a3e:	6839      	ldr	r1, [r7, #0]
 8024a40:	4618      	mov	r0, r3
 8024a42:	f000 ff53 	bl	80258ec <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>
 8024a46:	4604      	mov	r4, r0
 8024a48:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024a4a:	f107 030c 	add.w	r3, r7, #12
 8024a4e:	4618      	mov	r0, r3
 8024a50:	f000 f830 	bl	8024ab4 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8024a54:	4623      	mov	r3, r4
      }
 8024a56:	4618      	mov	r0, r3
 8024a58:	3714      	adds	r7, #20
 8024a5a:	46bd      	mov	sp, r7
 8024a5c:	bd90      	pop	{r4, r7, pc}

08024a5e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8024a5e:	b580      	push	{r7, lr}
 8024a60:	b086      	sub	sp, #24
 8024a62:	af00      	add	r7, sp, #0
 8024a64:	60f8      	str	r0, [r7, #12]
 8024a66:	60b9      	str	r1, [r7, #8]
 8024a68:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8024a6a:	68bb      	ldr	r3, [r7, #8]
 8024a6c:	617b      	str	r3, [r7, #20]
 8024a6e:	697a      	ldr	r2, [r7, #20]
 8024a70:	687b      	ldr	r3, [r7, #4]
 8024a72:	429a      	cmp	r2, r3
 8024a74:	d209      	bcs.n	8024a8a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8024a76:	68f8      	ldr	r0, [r7, #12]
 8024a78:	f7ff fe46 	bl	8024708 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8024a7c:	4602      	mov	r2, r0
 8024a7e:	697b      	ldr	r3, [r7, #20]
 8024a80:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8024a82:	697b      	ldr	r3, [r7, #20]
 8024a84:	3304      	adds	r3, #4
 8024a86:	617b      	str	r3, [r7, #20]
 8024a88:	e7f1      	b.n	8024a6e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8024a8a:	bf00      	nop
 8024a8c:	3718      	adds	r7, #24
 8024a8e:	46bd      	mov	sp, r7
 8024a90:	bd80      	pop	{r7, pc}

08024a92 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8024a92:	b580      	push	{r7, lr}
 8024a94:	b082      	sub	sp, #8
 8024a96:	af00      	add	r7, sp, #0
 8024a98:	6078      	str	r0, [r7, #4]
 8024a9a:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8024a9c:	6838      	ldr	r0, [r7, #0]
 8024a9e:	f000 fd18 	bl	80254d2 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024aa2:	4603      	mov	r3, r0
 8024aa4:	4619      	mov	r1, r3
 8024aa6:	6878      	ldr	r0, [r7, #4]
 8024aa8:	f000 ff2f 	bl	802590a <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>
 8024aac:	6878      	ldr	r0, [r7, #4]
 8024aae:	3708      	adds	r7, #8
 8024ab0:	46bd      	mov	sp, r7
 8024ab2:	bd80      	pop	{r7, pc}

08024ab4 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8024ab4:	b580      	push	{r7, lr}
 8024ab6:	b082      	sub	sp, #8
 8024ab8:	af00      	add	r7, sp, #0
 8024aba:	6078      	str	r0, [r7, #4]
 8024abc:	6878      	ldr	r0, [r7, #4]
 8024abe:	f000 ff31 	bl	8025924 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>
 8024ac2:	687b      	ldr	r3, [r7, #4]
 8024ac4:	4618      	mov	r0, r3
 8024ac6:	3708      	adds	r7, #8
 8024ac8:	46bd      	mov	sp, r7
 8024aca:	bd80      	pop	{r7, pc}

08024acc <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8024acc:	b580      	push	{r7, lr}
 8024ace:	b084      	sub	sp, #16
 8024ad0:	af00      	add	r7, sp, #0
 8024ad2:	60f8      	str	r0, [r7, #12]
 8024ad4:	60b9      	str	r1, [r7, #8]
 8024ad6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8024ad8:	687a      	ldr	r2, [r7, #4]
 8024ada:	68b9      	ldr	r1, [r7, #8]
 8024adc:	68f8      	ldr	r0, [r7, #12]
 8024ade:	f000 ff2c 	bl	802593a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>
 8024ae2:	bf00      	nop
 8024ae4:	3710      	adds	r7, #16
 8024ae6:	46bd      	mov	sp, r7
 8024ae8:	bd80      	pop	{r7, pc}

08024aea <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8024aea:	b580      	push	{r7, lr}
 8024aec:	b082      	sub	sp, #8
 8024aee:	af00      	add	r7, sp, #0
 8024af0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8024af2:	6878      	ldr	r0, [r7, #4]
 8024af4:	f000 ff39 	bl	802596a <_ZNSaIjEC1Ev>
 8024af8:	687b      	ldr	r3, [r7, #4]
 8024afa:	4618      	mov	r0, r3
 8024afc:	f000 ff41 	bl	8025982 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
	{ }
 8024b00:	687b      	ldr	r3, [r7, #4]
 8024b02:	4618      	mov	r0, r3
 8024b04:	3708      	adds	r7, #8
 8024b06:	46bd      	mov	sp, r7
 8024b08:	bd80      	pop	{r7, pc}

08024b0a <_ZNSaIjED1Ev>:
 8024b0a:	b580      	push	{r7, lr}
 8024b0c:	b082      	sub	sp, #8
 8024b0e:	af00      	add	r7, sp, #0
 8024b10:	6078      	str	r0, [r7, #4]
 8024b12:	6878      	ldr	r0, [r7, #4]
 8024b14:	f000 ff4e 	bl	80259b4 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>
 8024b18:	687b      	ldr	r3, [r7, #4]
 8024b1a:	4618      	mov	r0, r3
 8024b1c:	3708      	adds	r7, #8
 8024b1e:	46bd      	mov	sp, r7
 8024b20:	bd80      	pop	{r7, pc}

08024b22 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8024b22:	b590      	push	{r4, r7, lr}
 8024b24:	b089      	sub	sp, #36	; 0x24
 8024b26:	af00      	add	r7, sp, #0
 8024b28:	6078      	str	r0, [r7, #4]
 8024b2a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8024b2c:	2004      	movs	r0, #4
 8024b2e:	f7fc f9cb 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024b32:	4602      	mov	r2, r0
 8024b34:	683b      	ldr	r3, [r7, #0]
 8024b36:	fbb3 f3f2 	udiv	r3, r3, r2
 8024b3a:	3301      	adds	r3, #1
 8024b3c:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024b3e:	2308      	movs	r3, #8
 8024b40:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8024b42:	69fb      	ldr	r3, [r7, #28]
 8024b44:	3302      	adds	r3, #2
 8024b46:	613b      	str	r3, [r7, #16]
 8024b48:	f107 0210 	add.w	r2, r7, #16
 8024b4c:	f107 030c 	add.w	r3, r7, #12
 8024b50:	4611      	mov	r1, r2
 8024b52:	4618      	mov	r0, r3
 8024b54:	f7ff ff52 	bl	80249fc <_ZSt3maxIjERKT_S2_S2_>
 8024b58:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024b5a:	681a      	ldr	r2, [r3, #0]
 8024b5c:	687b      	ldr	r3, [r7, #4]
 8024b5e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8024b60:	687b      	ldr	r3, [r7, #4]
 8024b62:	685b      	ldr	r3, [r3, #4]
 8024b64:	4619      	mov	r1, r3
 8024b66:	6878      	ldr	r0, [r7, #4]
 8024b68:	f000 ff2f 	bl	80259ca <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8024b6c:	4602      	mov	r2, r0
 8024b6e:	687b      	ldr	r3, [r7, #4]
 8024b70:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024b72:	687b      	ldr	r3, [r7, #4]
 8024b74:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8024b76:	687b      	ldr	r3, [r7, #4]
 8024b78:	6859      	ldr	r1, [r3, #4]
 8024b7a:	69fb      	ldr	r3, [r7, #28]
 8024b7c:	1acb      	subs	r3, r1, r3
 8024b7e:	085b      	lsrs	r3, r3, #1
 8024b80:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024b82:	4413      	add	r3, r2
 8024b84:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8024b86:	69fb      	ldr	r3, [r7, #28]
 8024b88:	009b      	lsls	r3, r3, #2
 8024b8a:	69ba      	ldr	r2, [r7, #24]
 8024b8c:	4413      	add	r3, r2
 8024b8e:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8024b90:	697a      	ldr	r2, [r7, #20]
 8024b92:	69b9      	ldr	r1, [r7, #24]
 8024b94:	6878      	ldr	r0, [r7, #4]
 8024b96:	f000 ff35 	bl	8025a04 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8024b9a:	687b      	ldr	r3, [r7, #4]
 8024b9c:	3308      	adds	r3, #8
 8024b9e:	69b9      	ldr	r1, [r7, #24]
 8024ba0:	4618      	mov	r0, r3
 8024ba2:	f000 fe2e 	bl	8025802 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8024ba6:	687b      	ldr	r3, [r7, #4]
 8024ba8:	f103 0218 	add.w	r2, r3, #24
 8024bac:	697b      	ldr	r3, [r7, #20]
 8024bae:	3b04      	subs	r3, #4
 8024bb0:	4619      	mov	r1, r3
 8024bb2:	4610      	mov	r0, r2
 8024bb4:	f000 fe25 	bl	8025802 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8024bb8:	687b      	ldr	r3, [r7, #4]
 8024bba:	68da      	ldr	r2, [r3, #12]
 8024bbc:	687b      	ldr	r3, [r7, #4]
 8024bbe:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024bc0:	687b      	ldr	r3, [r7, #4]
 8024bc2:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8024bc4:	2004      	movs	r0, #4
 8024bc6:	f7fc f97f 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024bca:	4602      	mov	r2, r0
 8024bcc:	683b      	ldr	r3, [r7, #0]
 8024bce:	fbb3 f1f2 	udiv	r1, r3, r2
 8024bd2:	fb01 f202 	mul.w	r2, r1, r2
 8024bd6:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8024bd8:	009b      	lsls	r3, r3, #2
 8024bda:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024bdc:	687b      	ldr	r3, [r7, #4]
 8024bde:	619a      	str	r2, [r3, #24]
    }
 8024be0:	bf00      	nop
 8024be2:	3724      	adds	r7, #36	; 0x24
 8024be4:	46bd      	mov	sp, r7
 8024be6:	bd90      	pop	{r4, r7, pc}

08024be8 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8024be8:	b580      	push	{r7, lr}
 8024bea:	b086      	sub	sp, #24
 8024bec:	af00      	add	r7, sp, #0
 8024bee:	60f8      	str	r0, [r7, #12]
 8024bf0:	60b9      	str	r1, [r7, #8]
 8024bf2:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024bf4:	68bb      	ldr	r3, [r7, #8]
 8024bf6:	617b      	str	r3, [r7, #20]
 8024bf8:	697a      	ldr	r2, [r7, #20]
 8024bfa:	687b      	ldr	r3, [r7, #4]
 8024bfc:	429a      	cmp	r2, r3
 8024bfe:	d209      	bcs.n	8024c14 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x2c>
	_M_deallocate_node(*__n);
 8024c00:	697b      	ldr	r3, [r7, #20]
 8024c02:	681b      	ldr	r3, [r3, #0]
 8024c04:	4619      	mov	r1, r3
 8024c06:	68f8      	ldr	r0, [r7, #12]
 8024c08:	f000 fe14 	bl	8025834 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024c0c:	697b      	ldr	r3, [r7, #20]
 8024c0e:	3304      	adds	r3, #4
 8024c10:	617b      	str	r3, [r7, #20]
 8024c12:	e7f1      	b.n	8024bf8 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x10>
    }
 8024c14:	bf00      	nop
 8024c16:	3718      	adds	r7, #24
 8024c18:	46bd      	mov	sp, r7
 8024c1a:	bd80      	pop	{r7, pc}

08024c1c <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8024c1c:	b580      	push	{r7, lr}
 8024c1e:	b086      	sub	sp, #24
 8024c20:	af00      	add	r7, sp, #0
 8024c22:	60f8      	str	r0, [r7, #12]
 8024c24:	60b9      	str	r1, [r7, #8]
 8024c26:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024c28:	f107 0314 	add.w	r3, r7, #20
 8024c2c:	68f9      	ldr	r1, [r7, #12]
 8024c2e:	4618      	mov	r0, r3
 8024c30:	f000 ff02 	bl	8025a38 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024c34:	f107 0314 	add.w	r3, r7, #20
 8024c38:	687a      	ldr	r2, [r7, #4]
 8024c3a:	68b9      	ldr	r1, [r7, #8]
 8024c3c:	4618      	mov	r0, r3
 8024c3e:	f000 ff18 	bl	8025a72 <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024c42:	f107 0314 	add.w	r3, r7, #20
 8024c46:	4618      	mov	r0, r3
 8024c48:	f000 ff07 	bl	8025a5a <_ZNSaIPjED1Ev>
      }
 8024c4c:	bf00      	nop
 8024c4e:	3718      	adds	r7, #24
 8024c50:	46bd      	mov	sp, r7
 8024c52:	bd80      	pop	{r7, pc}

08024c54 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8024c54:	b580      	push	{r7, lr}
 8024c56:	b082      	sub	sp, #8
 8024c58:	af00      	add	r7, sp, #0
 8024c5a:	6078      	str	r0, [r7, #4]
 8024c5c:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8024c5e:	6839      	ldr	r1, [r7, #0]
 8024c60:	6878      	ldr	r0, [r7, #4]
 8024c62:	f000 ff15 	bl	8025a90 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
	}
 8024c66:	bf00      	nop
 8024c68:	3708      	adds	r7, #8
 8024c6a:	46bd      	mov	sp, r7
 8024c6c:	bd80      	pop	{r7, pc}

08024c6e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8024c6e:	b580      	push	{r7, lr}
 8024c70:	b086      	sub	sp, #24
 8024c72:	af00      	add	r7, sp, #0
 8024c74:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8024c76:	f107 0308 	add.w	r3, r7, #8
 8024c7a:	6879      	ldr	r1, [r7, #4]
 8024c7c:	4618      	mov	r0, r3
 8024c7e:	f7ff fa82 	bl	8024186 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8024c82:	f107 0308 	add.w	r3, r7, #8
 8024c86:	4619      	mov	r1, r3
 8024c88:	6878      	ldr	r0, [r7, #4]
 8024c8a:	f7ff fcbd 	bl	8024608 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
 8024c8e:	bf00      	nop
 8024c90:	3718      	adds	r7, #24
 8024c92:	46bd      	mov	sp, r7
 8024c94:	bd80      	pop	{r7, pc}

08024c96 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>:
    { }
#endif

  template<typename _Alloc>
    _GLIBCXX14_CONSTEXPR inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8024c96:	b580      	push	{r7, lr}
 8024c98:	b082      	sub	sp, #8
 8024c9a:	af00      	add	r7, sp, #0
 8024c9c:	6078      	str	r0, [r7, #4]
 8024c9e:	6039      	str	r1, [r7, #0]
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
#else
      __do_alloc_on_move(__one, __two, __pocma());
 8024ca0:	461a      	mov	r2, r3
 8024ca2:	6839      	ldr	r1, [r7, #0]
 8024ca4:	6878      	ldr	r0, [r7, #4]
 8024ca6:	f000 ff26 	bl	8025af6 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>
#endif
    }
 8024caa:	bf00      	nop
 8024cac:	3708      	adds	r7, #8
 8024cae:	46bd      	mov	sp, r7
 8024cb0:	bd80      	pop	{r7, pc}

08024cb2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8024cb2:	b580      	push	{r7, lr}
 8024cb4:	b082      	sub	sp, #8
 8024cb6:	af00      	add	r7, sp, #0
 8024cb8:	6078      	str	r0, [r7, #4]
 8024cba:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8024cbc:	6839      	ldr	r1, [r7, #0]
 8024cbe:	6878      	ldr	r0, [r7, #4]
 8024cc0:	f000 ff26 	bl	8025b10 <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 8024cc4:	bf00      	nop
 8024cc6:	3708      	adds	r7, #8
 8024cc8:	46bd      	mov	sp, r7
 8024cca:	bd80      	pop	{r7, pc}

08024ccc <_ZNSt5dequeIjSaIjEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8024ccc:	b580      	push	{r7, lr}
 8024cce:	b086      	sub	sp, #24
 8024cd0:	af00      	add	r7, sp, #0
 8024cd2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8024cd4:	f107 0308 	add.w	r3, r7, #8
 8024cd8:	6879      	ldr	r1, [r7, #4]
 8024cda:	4618      	mov	r0, r3
 8024cdc:	f7ff fad9 	bl	8024292 <_ZNSt5dequeIjSaIjEE5beginEv>
 8024ce0:	f107 0308 	add.w	r3, r7, #8
 8024ce4:	4619      	mov	r1, r3
 8024ce6:	6878      	ldr	r0, [r7, #4]
 8024ce8:	f000 ff45 	bl	8025b76 <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>
 8024cec:	bf00      	nop
 8024cee:	3718      	adds	r7, #24
 8024cf0:	46bd      	mov	sp, r7
 8024cf2:	bd80      	pop	{r7, pc}

08024cf4 <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8024cf4:	b580      	push	{r7, lr}
 8024cf6:	b082      	sub	sp, #8
 8024cf8:	af00      	add	r7, sp, #0
 8024cfa:	6078      	str	r0, [r7, #4]
 8024cfc:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8024cfe:	461a      	mov	r2, r3
 8024d00:	6839      	ldr	r1, [r7, #0]
 8024d02:	6878      	ldr	r0, [r7, #4]
 8024d04:	f000 ff6a 	bl	8025bdc <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8024d08:	bf00      	nop
 8024d0a:	3708      	adds	r7, #8
 8024d0c:	46bd      	mov	sp, r7
 8024d0e:	bd80      	pop	{r7, pc}

08024d10 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8024d10:	b480      	push	{r7}
 8024d12:	b085      	sub	sp, #20
 8024d14:	af00      	add	r7, sp, #0
 8024d16:	60f8      	str	r0, [r7, #12]
 8024d18:	60b9      	str	r1, [r7, #8]
 8024d1a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8024d1c:	68ba      	ldr	r2, [r7, #8]
 8024d1e:	68fb      	ldr	r3, [r7, #12]
 8024d20:	1ad3      	subs	r3, r2, r3
 8024d22:	109b      	asrs	r3, r3, #2
 8024d24:	4a04      	ldr	r2, [pc, #16]	; (8024d38 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag+0x28>)
 8024d26:	fb02 f303 	mul.w	r3, r2, r3
    }
 8024d2a:	4618      	mov	r0, r3
 8024d2c:	3714      	adds	r7, #20
 8024d2e:	46bd      	mov	sp, r7
 8024d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d34:	4770      	bx	lr
 8024d36:	bf00      	nop
 8024d38:	cccccccd 	.word	0xcccccccd

08024d3c <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8024d3c:	b480      	push	{r7}
 8024d3e:	b085      	sub	sp, #20
 8024d40:	af00      	add	r7, sp, #0
 8024d42:	60f8      	str	r0, [r7, #12]
 8024d44:	60b9      	str	r1, [r7, #8]
 8024d46:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8024d48:	68fb      	ldr	r3, [r7, #12]
 8024d4a:	6819      	ldr	r1, [r3, #0]
 8024d4c:	68ba      	ldr	r2, [r7, #8]
 8024d4e:	4613      	mov	r3, r2
 8024d50:	009b      	lsls	r3, r3, #2
 8024d52:	4413      	add	r3, r2
 8024d54:	009b      	lsls	r3, r3, #2
 8024d56:	18ca      	adds	r2, r1, r3
 8024d58:	68fb      	ldr	r3, [r7, #12]
 8024d5a:	601a      	str	r2, [r3, #0]
    }
 8024d5c:	bf00      	nop
 8024d5e:	3714      	adds	r7, #20
 8024d60:	46bd      	mov	sp, r7
 8024d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d66:	4770      	bx	lr

08024d68 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8024d68:	b480      	push	{r7}
 8024d6a:	b083      	sub	sp, #12
 8024d6c:	af00      	add	r7, sp, #0
 8024d6e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8024d70:	687b      	ldr	r3, [r7, #4]
 8024d72:	4618      	mov	r0, r3
 8024d74:	370c      	adds	r7, #12
 8024d76:	46bd      	mov	sp, r7
 8024d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d7c:	4770      	bx	lr

08024d7e <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8024d7e:	b5b0      	push	{r4, r5, r7, lr}
 8024d80:	b090      	sub	sp, #64	; 0x40
 8024d82:	af00      	add	r7, sp, #0
 8024d84:	60f8      	str	r0, [r7, #12]
 8024d86:	60b9      	str	r1, [r7, #8]
 8024d88:	607a      	str	r2, [r7, #4]
 8024d8a:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8024d8c:	68b8      	ldr	r0, [r7, #8]
 8024d8e:	f000 ff32 	bl	8025bf6 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024d92:	4604      	mov	r4, r0
 8024d94:	6878      	ldr	r0, [r7, #4]
 8024d96:	f000 ff2e 	bl	8025bf6 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024d9a:	4605      	mov	r5, r0
 8024d9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8024da0:	6839      	ldr	r1, [r7, #0]
 8024da2:	4618      	mov	r0, r3
 8024da4:	f7ff fa0d 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024da8:	f107 0320 	add.w	r3, r7, #32
 8024dac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8024db0:	4611      	mov	r1, r2
 8024db2:	4618      	mov	r0, r3
 8024db4:	f000 ff2a 	bl	8025c0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8024db8:	f107 0010 	add.w	r0, r7, #16
 8024dbc:	f107 0320 	add.w	r3, r7, #32
 8024dc0:	462a      	mov	r2, r5
 8024dc2:	4621      	mov	r1, r4
 8024dc4:	f000 ff44 	bl	8025c50 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>
 8024dc8:	68fb      	ldr	r3, [r7, #12]
 8024dca:	f107 0210 	add.w	r2, r7, #16
 8024dce:	6839      	ldr	r1, [r7, #0]
 8024dd0:	4618      	mov	r0, r3
 8024dd2:	f000 ff8f 	bl	8025cf4 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8024dd6:	68f8      	ldr	r0, [r7, #12]
 8024dd8:	3740      	adds	r7, #64	; 0x40
 8024dda:	46bd      	mov	sp, r7
 8024ddc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08024de0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8024de0:	b580      	push	{r7, lr}
 8024de2:	b086      	sub	sp, #24
 8024de4:	af00      	add	r7, sp, #0
 8024de6:	60f8      	str	r0, [r7, #12]
 8024de8:	60b9      	str	r1, [r7, #8]
 8024dea:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8024dec:	68bb      	ldr	r3, [r7, #8]
 8024dee:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8024df0:	68bb      	ldr	r3, [r7, #8]
 8024df2:	68db      	ldr	r3, [r3, #12]
 8024df4:	1ad3      	subs	r3, r2, r3
 8024df6:	109b      	asrs	r3, r3, #2
 8024df8:	4a0d      	ldr	r2, [pc, #52]	; (8024e30 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x50>)
 8024dfa:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8024dfe:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8024e00:	687a      	ldr	r2, [r7, #4]
 8024e02:	697b      	ldr	r3, [r7, #20]
 8024e04:	429a      	cmp	r2, r3
 8024e06:	d906      	bls.n	8024e16 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 8024e08:	687a      	ldr	r2, [r7, #4]
 8024e0a:	697b      	ldr	r3, [r7, #20]
 8024e0c:	1ad3      	subs	r3, r2, r3
 8024e0e:	4619      	mov	r1, r3
 8024e10:	68b8      	ldr	r0, [r7, #8]
 8024e12:	f000 ff7d 	bl	8025d10 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 8024e16:	68bb      	ldr	r3, [r7, #8]
 8024e18:	f103 0108 	add.w	r1, r3, #8
 8024e1c:	687a      	ldr	r2, [r7, #4]
 8024e1e:	68fb      	ldr	r3, [r7, #12]
 8024e20:	4618      	mov	r0, r3
 8024e22:	f000 ffbb 	bl	8025d9c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8024e26:	68f8      	ldr	r0, [r7, #12]
 8024e28:	3718      	adds	r7, #24
 8024e2a:	46bd      	mov	sp, r7
 8024e2c:	bd80      	pop	{r7, pc}
 8024e2e:	bf00      	nop
 8024e30:	cccccccd 	.word	0xcccccccd

08024e34 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8024e34:	b580      	push	{r7, lr}
 8024e36:	b088      	sub	sp, #32
 8024e38:	af00      	add	r7, sp, #0
 8024e3a:	60f8      	str	r0, [r7, #12]
 8024e3c:	60b9      	str	r1, [r7, #8]
 8024e3e:	607a      	str	r2, [r7, #4]
 8024e40:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8024e42:	f107 0310 	add.w	r3, r7, #16
 8024e46:	6839      	ldr	r1, [r7, #0]
 8024e48:	4618      	mov	r0, r3
 8024e4a:	f7ff f9ba 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024e4e:	68f8      	ldr	r0, [r7, #12]
 8024e50:	f107 0310 	add.w	r3, r7, #16
 8024e54:	687a      	ldr	r2, [r7, #4]
 8024e56:	68b9      	ldr	r1, [r7, #8]
 8024e58:	f000 ffb3 	bl	8025dc2 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8024e5c:	68f8      	ldr	r0, [r7, #12]
 8024e5e:	3720      	adds	r7, #32
 8024e60:	46bd      	mov	sp, r7
 8024e62:	bd80      	pop	{r7, pc}

08024e64 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8024e64:	b580      	push	{r7, lr}
 8024e66:	b086      	sub	sp, #24
 8024e68:	af00      	add	r7, sp, #0
 8024e6a:	60f8      	str	r0, [r7, #12]
 8024e6c:	60b9      	str	r1, [r7, #8]
 8024e6e:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8024e70:	68bb      	ldr	r3, [r7, #8]
 8024e72:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 8024e74:	68bb      	ldr	r3, [r7, #8]
 8024e76:	699b      	ldr	r3, [r3, #24]
 8024e78:	1ad3      	subs	r3, r2, r3
 8024e7a:	109b      	asrs	r3, r3, #2
 8024e7c:	4a0d      	ldr	r2, [pc, #52]	; (8024eb4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x50>)
 8024e7e:	fb02 f303 	mul.w	r3, r2, r3
 8024e82:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8024e84:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8024e86:	687a      	ldr	r2, [r7, #4]
 8024e88:	697b      	ldr	r3, [r7, #20]
 8024e8a:	429a      	cmp	r2, r3
 8024e8c:	d906      	bls.n	8024e9c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 8024e8e:	687a      	ldr	r2, [r7, #4]
 8024e90:	697b      	ldr	r3, [r7, #20]
 8024e92:	1ad3      	subs	r3, r2, r3
 8024e94:	4619      	mov	r1, r3
 8024e96:	68b8      	ldr	r0, [r7, #8]
 8024e98:	f000 ffae 	bl	8025df8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 8024e9c:	68bb      	ldr	r3, [r7, #8]
 8024e9e:	f103 0118 	add.w	r1, r3, #24
 8024ea2:	687a      	ldr	r2, [r7, #4]
 8024ea4:	68fb      	ldr	r3, [r7, #12]
 8024ea6:	4618      	mov	r0, r3
 8024ea8:	f7ff fc82 	bl	80247b0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8024eac:	68f8      	ldr	r0, [r7, #12]
 8024eae:	3718      	adds	r7, #24
 8024eb0:	46bd      	mov	sp, r7
 8024eb2:	bd80      	pop	{r7, pc}
 8024eb4:	cccccccd 	.word	0xcccccccd

08024eb8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>:
    }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
 8024eb8:	b5b0      	push	{r4, r5, r7, lr}
 8024eba:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8024ebe:	af04      	add	r7, sp, #16
 8024ec0:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8024ec4:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 8024ec8:	6020      	str	r0, [r4, #0]
 8024eca:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 8024ece:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 8024ed2:	6001      	str	r1, [r0, #0]
 8024ed4:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8024ed8:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8024edc:	600a      	str	r2, [r1, #0]
 8024ede:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8024ee2:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8024ee6:	6013      	str	r3, [r2, #0]
      _M_insert_aux(iterator __pos,
		    _ForwardIterator __first, _ForwardIterator __last,
		    size_type __n)
      {
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 8024ee8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024eec:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8024ef0:	681b      	ldr	r3, [r3, #0]
 8024ef2:	f103 0208 	add.w	r2, r3, #8
 8024ef6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024efa:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8024efe:	4611      	mov	r1, r2
 8024f00:	6818      	ldr	r0, [r3, #0]
 8024f02:	f7fe ff6b 	bl	8023ddc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8024f06:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 8024f0a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024f0e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8024f12:	6818      	ldr	r0, [r3, #0]
 8024f14:	f7fe fc9f 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8024f18:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 8024f1c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8024f20:	085a      	lsrs	r2, r3, #1
 8024f22:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8024f26:	429a      	cmp	r2, r3
 8024f28:	f240 8158 	bls.w	80251dc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x324>
	  {
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8024f2c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024f30:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8024f34:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024f38:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8024f3c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8024f40:	6819      	ldr	r1, [r3, #0]
 8024f42:	f7ff ff4d 	bl	8024de0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 8024f46:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024f4a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8024f4e:	681b      	ldr	r3, [r3, #0]
 8024f50:	f103 0208 	add.w	r2, r3, #8
 8024f54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8024f58:	4611      	mov	r1, r2
 8024f5a:	4618      	mov	r0, r3
 8024f5c:	f7ff f931 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 8024f60:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024f64:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8024f68:	681b      	ldr	r3, [r3, #0]
 8024f6a:	f103 0108 	add.w	r1, r3, #8
 8024f6e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024f72:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8024f76:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8024f7a:	4618      	mov	r0, r3
 8024f7c:	f7ff fc18 	bl	80247b0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8024f80:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024f84:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8024f88:	681a      	ldr	r2, [r3, #0]
 8024f8a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024f8e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8024f92:	4614      	mov	r4, r2
 8024f94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024f96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    __try
	      {
		if (__elemsbefore >= difference_type(__n))
 8024f9a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8024f9e:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8024fa2:	429a      	cmp	r2, r3
 8024fa4:	f2c0 8098 	blt.w	80250d8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x220>
		  {
		    iterator __start_n = (this->_M_impl._M_start
 8024fa8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024fac:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8024fb0:	681b      	ldr	r3, [r3, #0]
 8024fb2:	f103 0108 	add.w	r1, r3, #8
 8024fb6:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8024fba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024fbe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8024fc2:	4618      	mov	r0, r3
 8024fc4:	f7ff fbf4 	bl	80247b0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
					  + difference_type(__n));
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8024fc8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8024fcc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8024fd0:	681b      	ldr	r3, [r3, #0]
 8024fd2:	f103 0208 	add.w	r2, r3, #8
 8024fd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8024fda:	4611      	mov	r1, r2
 8024fdc:	4618      	mov	r0, r3
 8024fde:	f7ff f8f0 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024fe2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8024fe6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8024fea:	4611      	mov	r1, r2
 8024fec:	4618      	mov	r0, r3
 8024fee:	f7ff f8e8 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024ff2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8024ff6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8024ffa:	4611      	mov	r1, r2
 8024ffc:	4618      	mov	r0, r3
 8024ffe:	f7ff f8e0 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						__start_n, __new_start,
						_M_get_Tp_allocator());
 8025002:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025006:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802500a:	681b      	ldr	r3, [r3, #0]
 802500c:	4618      	mov	r0, r3
 802500e:	f7fe ff11 	bl	8023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025012:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8025014:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025018:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 802501c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8025020:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8025024:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8025028:	9400      	str	r4, [sp, #0]
 802502a:	f000 ff29 	bl	8025e80 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		    this->_M_impl._M_start = __new_start;
 802502e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025032:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025036:	681b      	ldr	r3, [r3, #0]
 8025038:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802503c:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8025040:	f103 0408 	add.w	r4, r3, #8
 8025044:	4613      	mov	r3, r2
 8025046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 802504c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8025050:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8025054:	4611      	mov	r1, r2
 8025056:	4618      	mov	r0, r3
 8025058:	f7ff f8b3 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802505c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025060:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025064:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8025068:	6819      	ldr	r1, [r3, #0]
 802506a:	4610      	mov	r0, r2
 802506c:	f7ff f8a9 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025070:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025074:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8025078:	4611      	mov	r1, r2
 802507a:	4618      	mov	r0, r3
 802507c:	f7ff f8a1 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025080:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025084:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8025088:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 802508c:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8025090:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8025094:	f000 ff2d 	bl	8025ef2 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 8025098:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 802509c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250a0:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 80250a4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250a8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80250ac:	6819      	ldr	r1, [r3, #0]
 80250ae:	f000 fe75 	bl	8025d9c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80250b2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250b6:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80250ba:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80250be:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80250c2:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80250c6:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80250ca:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80250ce:	6812      	ldr	r2, [r2, #0]
 80250d0:	6809      	ldr	r1, [r1, #0]
 80250d2:	f7ff f9f1 	bl	80244b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
			       __new_finish._M_node + 1);
	      __throw_exception_again;
	    }
	}
      }
 80250d6:	e1dd      	b.n	8025494 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		    _ForwardIterator __mid = __first;
 80250d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250dc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80250e0:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80250e4:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80250e8:	6812      	ldr	r2, [r2, #0]
 80250ea:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 80250ec:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80250f0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80250f4:	1ad2      	subs	r2, r2, r3
 80250f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80250fa:	4611      	mov	r1, r2
 80250fc:	4618      	mov	r0, r3
 80250fe:	f000 ff2e 	bl	8025f5e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8025102:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025106:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802510a:	681b      	ldr	r3, [r3, #0]
 802510c:	f103 0208 	add.w	r2, r3, #8
 8025110:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8025114:	4611      	mov	r1, r2
 8025116:	4618      	mov	r0, r3
 8025118:	f7ff f853 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802511c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025120:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025124:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8025128:	6819      	ldr	r1, [r3, #0]
 802512a:	4610      	mov	r0, r2
 802512c:	f7ff f849 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025130:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025134:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8025138:	681c      	ldr	r4, [r3, #0]
 802513a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802513e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8025142:	4611      	mov	r1, r2
 8025144:	4618      	mov	r0, r3
 8025146:	f7ff f83c 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						   _M_get_Tp_allocator());
 802514a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802514e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025152:	681b      	ldr	r3, [r3, #0]
 8025154:	4618      	mov	r0, r3
 8025156:	f7fe fe6d 	bl	8023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802515a:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 802515c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025160:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8025164:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025168:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 802516c:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 8025170:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8025174:	9202      	str	r2, [sp, #8]
 8025176:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 802517a:	9201      	str	r2, [sp, #4]
 802517c:	9400      	str	r4, [sp, #0]
 802517e:	681b      	ldr	r3, [r3, #0]
 8025180:	462a      	mov	r2, r5
 8025182:	f000 feff 	bl	8025f84 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>
		    this->_M_impl._M_start = __new_start;
 8025186:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802518a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802518e:	681b      	ldr	r3, [r3, #0]
 8025190:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025194:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8025198:	f103 0408 	add.w	r4, r3, #8
 802519c:	4613      	mov	r3, r2
 802519e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80251a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 80251a4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251a8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80251ac:	681c      	ldr	r4, [r3, #0]
 80251ae:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80251b2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80251b6:	4611      	mov	r1, r2
 80251b8:	4618      	mov	r0, r3
 80251ba:	f7ff f802 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80251be:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251c2:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80251c6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80251ca:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80251ce:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80251d2:	6812      	ldr	r2, [r2, #0]
 80251d4:	4621      	mov	r1, r4
 80251d6:	f7ff f96f 	bl	80244b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80251da:	e15b      	b.n	8025494 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 80251dc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251e0:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 80251e4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251e8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80251ec:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80251f0:	6819      	ldr	r1, [r3, #0]
 80251f2:	f7ff fe37 	bl	8024e64 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 80251f6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251fa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80251fe:	681b      	ldr	r3, [r3, #0]
 8025200:	f103 0218 	add.w	r2, r3, #24
 8025204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025208:	4611      	mov	r1, r2
 802520a:	4618      	mov	r0, r3
 802520c:	f7fe ffd9 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    difference_type(__length) - __elemsbefore;
 8025210:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 8025214:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8025218:	1ad3      	subs	r3, r2, r3
 802521a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 802521e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025222:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025226:	681b      	ldr	r3, [r3, #0]
 8025228:	f103 0118 	add.w	r1, r3, #24
 802522c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025230:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8025234:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8025238:	4618      	mov	r0, r3
 802523a:	f000 fdaf 	bl	8025d9c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 802523e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025242:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025246:	681a      	ldr	r2, [r3, #0]
 8025248:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802524c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8025250:	4614      	mov	r4, r2
 8025252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 8025258:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 802525c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8025260:	429a      	cmp	r2, r3
 8025262:	f340 8096 	ble.w	8025392 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 8025266:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802526a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802526e:	681b      	ldr	r3, [r3, #0]
 8025270:	f103 0118 	add.w	r1, r3, #24
 8025274:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025278:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802527c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8025280:	4618      	mov	r0, r3
 8025282:	f000 fd8b 	bl	8025d9c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		  std::__uninitialized_move_a(__finish_n,
 8025286:	f107 0218 	add.w	r2, r7, #24
 802528a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 802528e:	4611      	mov	r1, r2
 8025290:	4618      	mov	r0, r3
 8025292:	f7fe ff96 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 8025296:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802529a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802529e:	681b      	ldr	r3, [r3, #0]
 80252a0:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 80252a4:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80252a8:	4611      	mov	r1, r2
 80252aa:	4618      	mov	r0, r3
 80252ac:	f7fe ff89 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 80252b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252b4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80252b8:	681b      	ldr	r3, [r3, #0]
 80252ba:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 80252be:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80252c2:	4611      	mov	r1, r2
 80252c4:	4618      	mov	r0, r3
 80252c6:	f7fe ff7c 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      _M_get_Tp_allocator());
 80252ca:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252ce:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80252d2:	681b      	ldr	r3, [r3, #0]
 80252d4:	4618      	mov	r0, r3
 80252d6:	f7fe fdad 	bl	8023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80252da:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 80252dc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252e0:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80252e4:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80252e8:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 80252ec:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 80252f0:	9400      	str	r4, [sp, #0]
 80252f2:	f000 fdc5 	bl	8025e80 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 80252f6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252fa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80252fe:	681b      	ldr	r3, [r3, #0]
 8025300:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025304:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8025308:	f103 0418 	add.w	r4, r3, #24
 802530c:	4613      	mov	r3, r2
 802530e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 8025314:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025318:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802531c:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8025320:	6819      	ldr	r1, [r3, #0]
 8025322:	4610      	mov	r0, r2
 8025324:	f7fe ff4d 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025328:	f107 0218 	add.w	r2, r7, #24
 802532c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8025330:	4611      	mov	r1, r2
 8025332:	4618      	mov	r0, r3
 8025334:	f7fe ff45 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025338:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802533c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8025340:	4611      	mov	r1, r2
 8025342:	4618      	mov	r0, r3
 8025344:	f7fe ff3d 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025348:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 802534c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8025350:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8025354:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8025358:	f000 fe54 	bl	8026004 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		  std::copy(__first, __last, __pos);
 802535c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025360:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025364:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8025368:	6819      	ldr	r1, [r3, #0]
 802536a:	4610      	mov	r0, r2
 802536c:	f7fe ff29 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025370:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8025374:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8025378:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802537c:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8025380:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8025384:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8025388:	6812      	ldr	r2, [r2, #0]
 802538a:	6809      	ldr	r1, [r1, #0]
 802538c:	f7ff f894 	bl	80244b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8025390:	e080      	b.n	8025494 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		  _ForwardIterator __mid = __first;
 8025392:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025396:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 802539a:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802539e:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80253a2:	6812      	ldr	r2, [r2, #0]
 80253a4:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 80253a6:	f107 0314 	add.w	r3, r7, #20
 80253aa:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 80253ae:	4618      	mov	r0, r3
 80253b0:	f000 fdd5 	bl	8025f5e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80253b4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253b8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80253bc:	681c      	ldr	r4, [r3, #0]
 80253be:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253c2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80253c6:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80253ca:	6819      	ldr	r1, [r3, #0]
 80253cc:	4610      	mov	r0, r2
 80253ce:	f7fe fef8 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 80253d2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253d6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80253da:	681b      	ldr	r3, [r3, #0]
 80253dc:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80253e0:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80253e4:	4611      	mov	r1, r2
 80253e6:	4618      	mov	r0, r3
 80253e8:	f7fe feeb 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 80253ec:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253f0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80253f4:	681b      	ldr	r3, [r3, #0]
 80253f6:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80253fa:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80253fe:	4611      	mov	r1, r2
 8025400:	4618      	mov	r0, r3
 8025402:	f7fe fede 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 _M_get_Tp_allocator());
 8025406:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802540a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802540e:	681b      	ldr	r3, [r3, #0]
 8025410:	4618      	mov	r0, r3
 8025412:	f7fe fd0f 	bl	8023e34 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025416:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8025418:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 802541c:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8025420:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025424:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8025428:	9302      	str	r3, [sp, #8]
 802542a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 802542e:	9301      	str	r3, [sp, #4]
 8025430:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8025434:	9300      	str	r3, [sp, #0]
 8025436:	460b      	mov	r3, r1
 8025438:	6812      	ldr	r2, [r2, #0]
 802543a:	4621      	mov	r1, r4
 802543c:	f000 fe18 	bl	8026070 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8025440:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025444:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025448:	681b      	ldr	r3, [r3, #0]
 802544a:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802544e:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8025452:	f103 0418 	add.w	r4, r3, #24
 8025456:	4613      	mov	r3, r2
 8025458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802545a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 802545e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025462:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8025466:	681c      	ldr	r4, [r3, #0]
 8025468:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802546c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025470:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8025474:	6819      	ldr	r1, [r3, #0]
 8025476:	4610      	mov	r0, r2
 8025478:	f7fe fea3 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802547c:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 8025480:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8025484:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025488:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 802548c:	4622      	mov	r2, r4
 802548e:	6809      	ldr	r1, [r1, #0]
 8025490:	f7ff f812 	bl	80244b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8025494:	bf00      	nop
 8025496:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 802549a:	46bd      	mov	sp, r7
 802549c:	bdb0      	pop	{r4, r5, r7, pc}

0802549e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 802549e:	b580      	push	{r7, lr}
 80254a0:	b084      	sub	sp, #16
 80254a2:	af00      	add	r7, sp, #0
 80254a4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80254a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80254aa:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80254ac:	6878      	ldr	r0, [r7, #4]
 80254ae:	f000 fe1f 	bl	80260f0 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>
 80254b2:	4603      	mov	r3, r0
 80254b4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80254b6:	f107 0208 	add.w	r2, r7, #8
 80254ba:	f107 030c 	add.w	r3, r7, #12
 80254be:	4611      	mov	r1, r2
 80254c0:	4618      	mov	r0, r3
 80254c2:	f000 fe21 	bl	8026108 <_ZSt3minIjERKT_S2_S2_>
 80254c6:	4603      	mov	r3, r0
 80254c8:	681b      	ldr	r3, [r3, #0]
      }
 80254ca:	4618      	mov	r0, r3
 80254cc:	3710      	adds	r7, #16
 80254ce:	46bd      	mov	sp, r7
 80254d0:	bd80      	pop	{r7, pc}

080254d2 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80254d2:	b480      	push	{r7}
 80254d4:	b083      	sub	sp, #12
 80254d6:	af00      	add	r7, sp, #0
 80254d8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80254da:	687b      	ldr	r3, [r7, #4]
 80254dc:	4618      	mov	r0, r3
 80254de:	370c      	adds	r7, #12
 80254e0:	46bd      	mov	sp, r7
 80254e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254e6:	4770      	bx	lr

080254e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80254e8:	b590      	push	{r4, r7, lr}
 80254ea:	b08b      	sub	sp, #44	; 0x2c
 80254ec:	af00      	add	r7, sp, #0
 80254ee:	60f8      	str	r0, [r7, #12]
 80254f0:	60b9      	str	r1, [r7, #8]
 80254f2:	4613      	mov	r3, r2
 80254f4:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80254f6:	68fb      	ldr	r3, [r7, #12]
 80254f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80254fa:	68fb      	ldr	r3, [r7, #12]
 80254fc:	695b      	ldr	r3, [r3, #20]
 80254fe:	1ad3      	subs	r3, r2, r3
 8025500:	109b      	asrs	r3, r3, #2
 8025502:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8025504:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8025506:	68bb      	ldr	r3, [r7, #8]
 8025508:	6a3a      	ldr	r2, [r7, #32]
 802550a:	4413      	add	r3, r2
 802550c:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 802550e:	68fb      	ldr	r3, [r7, #12]
 8025510:	685a      	ldr	r2, [r3, #4]
 8025512:	69fb      	ldr	r3, [r7, #28]
 8025514:	005b      	lsls	r3, r3, #1
 8025516:	429a      	cmp	r2, r3
 8025518:	d92d      	bls.n	8025576 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802551a:	68fb      	ldr	r3, [r7, #12]
 802551c:	681a      	ldr	r2, [r3, #0]
 802551e:	68fb      	ldr	r3, [r7, #12]
 8025520:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8025522:	69fb      	ldr	r3, [r7, #28]
 8025524:	1acb      	subs	r3, r1, r3
 8025526:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8025528:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802552a:	79fb      	ldrb	r3, [r7, #7]
 802552c:	2b00      	cmp	r3, #0
 802552e:	d002      	beq.n	8025536 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8025530:	68bb      	ldr	r3, [r7, #8]
 8025532:	009b      	lsls	r3, r3, #2
 8025534:	e000      	b.n	8025538 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x50>
 8025536:	2300      	movs	r3, #0
 8025538:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802553a:	4413      	add	r3, r2
 802553c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 802553e:	68fb      	ldr	r3, [r7, #12]
 8025540:	695b      	ldr	r3, [r3, #20]
 8025542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025544:	429a      	cmp	r2, r3
 8025546:	d209      	bcs.n	802555c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8025548:	68fb      	ldr	r3, [r7, #12]
 802554a:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 802554c:	68fb      	ldr	r3, [r7, #12]
 802554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8025550:	3304      	adds	r3, #4
 8025552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025554:	4619      	mov	r1, r3
 8025556:	f000 fdeb 	bl	8026130 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 802555a:	e048      	b.n	80255ee <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802555c:	68fb      	ldr	r3, [r7, #12]
 802555e:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8025560:	68fb      	ldr	r3, [r7, #12]
 8025562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8025564:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8025566:	6a3b      	ldr	r3, [r7, #32]
 8025568:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802556a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802556c:	4413      	add	r3, r2
 802556e:	461a      	mov	r2, r3
 8025570:	f000 fdf6 	bl	8026160 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 8025574:	e03b      	b.n	80255ee <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8025576:	68fb      	ldr	r3, [r7, #12]
 8025578:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 802557a:	68fb      	ldr	r3, [r7, #12]
 802557c:	3304      	adds	r3, #4
 802557e:	f107 0208 	add.w	r2, r7, #8
 8025582:	4611      	mov	r1, r2
 8025584:	4618      	mov	r0, r3
 8025586:	f7ff fa39 	bl	80249fc <_ZSt3maxIjERKT_S2_S2_>
 802558a:	4603      	mov	r3, r0
 802558c:	681b      	ldr	r3, [r3, #0]
 802558e:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8025590:	3302      	adds	r3, #2
 8025592:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8025594:	68fb      	ldr	r3, [r7, #12]
 8025596:	69b9      	ldr	r1, [r7, #24]
 8025598:	4618      	mov	r0, r3
 802559a:	f7ff fa43 	bl	8024a24 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 802559e:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80255a0:	69ba      	ldr	r2, [r7, #24]
 80255a2:	69fb      	ldr	r3, [r7, #28]
 80255a4:	1ad3      	subs	r3, r2, r3
 80255a6:	085b      	lsrs	r3, r3, #1
 80255a8:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80255aa:	79fb      	ldrb	r3, [r7, #7]
 80255ac:	2b00      	cmp	r3, #0
 80255ae:	d002      	beq.n	80255b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xce>
 80255b0:	68bb      	ldr	r3, [r7, #8]
 80255b2:	009b      	lsls	r3, r3, #2
 80255b4:	e000      	b.n	80255b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 80255b6:	2300      	movs	r3, #0
 80255b8:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80255ba:	697a      	ldr	r2, [r7, #20]
 80255bc:	4413      	add	r3, r2
 80255be:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80255c0:	68fb      	ldr	r3, [r7, #12]
 80255c2:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80255c4:	68fb      	ldr	r3, [r7, #12]
 80255c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80255c8:	3304      	adds	r3, #4
 80255ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80255cc:	4619      	mov	r1, r3
 80255ce:	f000 fdaf 	bl	8026130 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80255d2:	68f8      	ldr	r0, [r7, #12]
 80255d4:	68fb      	ldr	r3, [r7, #12]
 80255d6:	6819      	ldr	r1, [r3, #0]
 80255d8:	68fb      	ldr	r3, [r7, #12]
 80255da:	685b      	ldr	r3, [r3, #4]
 80255dc:	461a      	mov	r2, r3
 80255de:	f7fe fdb6 	bl	802414e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 80255e2:	68fb      	ldr	r3, [r7, #12]
 80255e4:	697a      	ldr	r2, [r7, #20]
 80255e6:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80255e8:	68fb      	ldr	r3, [r7, #12]
 80255ea:	69ba      	ldr	r2, [r7, #24]
 80255ec:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80255ee:	68fb      	ldr	r3, [r7, #12]
 80255f0:	3308      	adds	r3, #8
 80255f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80255f4:	4618      	mov	r0, r3
 80255f6:	f7ff f899 	bl	802472c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80255fa:	68fb      	ldr	r3, [r7, #12]
 80255fc:	f103 0018 	add.w	r0, r3, #24
 8025600:	6a3a      	ldr	r2, [r7, #32]
 8025602:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8025606:	4413      	add	r3, r2
 8025608:	009b      	lsls	r3, r3, #2
 802560a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802560c:	4413      	add	r3, r2
 802560e:	4619      	mov	r1, r3
 8025610:	f7ff f88c 	bl	802472c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
    }
 8025614:	bf00      	nop
 8025616:	372c      	adds	r7, #44	; 0x2c
 8025618:	46bd      	mov	sp, r7
 802561a:	bd90      	pop	{r4, r7, pc}

0802561c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 802561c:	b580      	push	{r7, lr}
 802561e:	b082      	sub	sp, #8
 8025620:	af00      	add	r7, sp, #0
 8025622:	6078      	str	r0, [r7, #4]
 8025624:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8025626:	2200      	movs	r2, #0
 8025628:	6839      	ldr	r1, [r7, #0]
 802562a:	6878      	ldr	r0, [r7, #4]
 802562c:	f000 fdb0 	bl	8026190 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8025630:	4603      	mov	r3, r0
 8025632:	4618      	mov	r0, r3
 8025634:	3708      	adds	r7, #8
 8025636:	46bd      	mov	sp, r7
 8025638:	bd80      	pop	{r7, pc}

0802563a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802563a:	b580      	push	{r7, lr}
 802563c:	b084      	sub	sp, #16
 802563e:	af00      	add	r7, sp, #0
 8025640:	60f8      	str	r0, [r7, #12]
 8025642:	60b9      	str	r1, [r7, #8]
 8025644:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025646:	687a      	ldr	r2, [r7, #4]
 8025648:	68b9      	ldr	r1, [r7, #8]
 802564a:	68f8      	ldr	r0, [r7, #12]
 802564c:	f000 fdc1 	bl	80261d2 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>
 8025650:	bf00      	nop
 8025652:	3710      	adds	r7, #16
 8025654:	46bd      	mov	sp, r7
 8025656:	bd80      	pop	{r7, pc}

08025658 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8025658:	b590      	push	{r4, r7, lr}
 802565a:	b085      	sub	sp, #20
 802565c:	af00      	add	r7, sp, #0
 802565e:	6078      	str	r0, [r7, #4]
 8025660:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8025662:	687b      	ldr	r3, [r7, #4]
 8025664:	681a      	ldr	r2, [r3, #0]
 8025666:	687b      	ldr	r3, [r7, #4]
 8025668:	685b      	ldr	r3, [r3, #4]
 802566a:	1ad3      	subs	r3, r2, r3
 802566c:	109b      	asrs	r3, r3, #2
 802566e:	4a2b      	ldr	r2, [pc, #172]	; (802571c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xc4>)
 8025670:	fb02 f303 	mul.w	r3, r2, r3
 8025674:	461a      	mov	r2, r3
 8025676:	683b      	ldr	r3, [r7, #0]
 8025678:	4413      	add	r3, r2
 802567a:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 802567c:	68fb      	ldr	r3, [r7, #12]
 802567e:	2b00      	cmp	r3, #0
 8025680:	db08      	blt.n	8025694 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 8025682:	f7ff f882 	bl	802478a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8025686:	4603      	mov	r3, r0
 8025688:	461a      	mov	r2, r3
 802568a:	68fb      	ldr	r3, [r7, #12]
 802568c:	4293      	cmp	r3, r2
 802568e:	da01      	bge.n	8025694 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 8025690:	2301      	movs	r3, #1
 8025692:	e000      	b.n	8025696 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3e>
 8025694:	2300      	movs	r3, #0
 8025696:	2b00      	cmp	r3, #0
 8025698:	d00a      	beq.n	80256b0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x58>
	  _M_cur += __n;
 802569a:	687b      	ldr	r3, [r7, #4]
 802569c:	6819      	ldr	r1, [r3, #0]
 802569e:	683a      	ldr	r2, [r7, #0]
 80256a0:	4613      	mov	r3, r2
 80256a2:	009b      	lsls	r3, r3, #2
 80256a4:	4413      	add	r3, r2
 80256a6:	009b      	lsls	r3, r3, #2
 80256a8:	18ca      	adds	r2, r1, r3
 80256aa:	687b      	ldr	r3, [r7, #4]
 80256ac:	601a      	str	r2, [r3, #0]
 80256ae:	e02f      	b.n	8025710 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80256b0:	68fb      	ldr	r3, [r7, #12]
 80256b2:	2b00      	cmp	r3, #0
 80256b4:	dd07      	ble.n	80256c6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x6e>
 80256b6:	f7ff f868 	bl	802478a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80256ba:	4603      	mov	r3, r0
 80256bc:	461a      	mov	r2, r3
 80256be:	68fb      	ldr	r3, [r7, #12]
 80256c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80256c4:	e007      	b.n	80256d6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 80256c6:	68fb      	ldr	r3, [r7, #12]
 80256c8:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 80256ca:	f7ff f85e 	bl	802478a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80256ce:	4603      	mov	r3, r0
 80256d0:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80256d4:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 80256d6:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 80256d8:	687b      	ldr	r3, [r7, #4]
 80256da:	68da      	ldr	r2, [r3, #12]
 80256dc:	68bb      	ldr	r3, [r7, #8]
 80256de:	009b      	lsls	r3, r3, #2
 80256e0:	4413      	add	r3, r2
 80256e2:	4619      	mov	r1, r3
 80256e4:	6878      	ldr	r0, [r7, #4]
 80256e6:	f7ff f821 	bl	802472c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first + (__offset - __node_offset
 80256ea:	687b      	ldr	r3, [r7, #4]
 80256ec:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 80256ee:	f7ff f84c 	bl	802478a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80256f2:	4603      	mov	r3, r0
 80256f4:	461a      	mov	r2, r3
 80256f6:	68bb      	ldr	r3, [r7, #8]
 80256f8:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 80256fc:	68fa      	ldr	r2, [r7, #12]
 80256fe:	1ad3      	subs	r3, r2, r3
 8025700:	461a      	mov	r2, r3
 8025702:	4613      	mov	r3, r2
 8025704:	009b      	lsls	r3, r3, #2
 8025706:	4413      	add	r3, r2
 8025708:	009b      	lsls	r3, r3, #2
 802570a:	18e2      	adds	r2, r4, r3
 802570c:	687b      	ldr	r3, [r7, #4]
 802570e:	601a      	str	r2, [r3, #0]
	return *this;
 8025710:	687b      	ldr	r3, [r7, #4]
      }
 8025712:	4618      	mov	r0, r3
 8025714:	3714      	adds	r7, #20
 8025716:	46bd      	mov	sp, r7
 8025718:	bd90      	pop	{r4, r7, pc}
 802571a:	bf00      	nop
 802571c:	cccccccd 	.word	0xcccccccd

08025720 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8025720:	b480      	push	{r7}
 8025722:	b083      	sub	sp, #12
 8025724:	af00      	add	r7, sp, #0
 8025726:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8025728:	687b      	ldr	r3, [r7, #4]
 802572a:	4618      	mov	r0, r3
 802572c:	370c      	adds	r7, #12
 802572e:	46bd      	mov	sp, r7
 8025730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025734:	4770      	bx	lr

08025736 <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8025736:	b590      	push	{r4, r7, lr}
 8025738:	b085      	sub	sp, #20
 802573a:	af00      	add	r7, sp, #0
 802573c:	60f8      	str	r0, [r7, #12]
 802573e:	60b9      	str	r1, [r7, #8]
 8025740:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8025742:	6878      	ldr	r0, [r7, #4]
 8025744:	f7ff ffec 	bl	8025720 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8025748:	4603      	mov	r3, r0
 802574a:	681c      	ldr	r4, [r3, #0]
 802574c:	68bb      	ldr	r3, [r7, #8]
 802574e:	4619      	mov	r1, r3
 8025750:	2004      	movs	r0, #4
 8025752:	f7fb fbad 	bl	8020eb0 <_ZnwjPv>
 8025756:	4603      	mov	r3, r0
 8025758:	601c      	str	r4, [r3, #0]
 802575a:	bf00      	nop
 802575c:	3714      	adds	r7, #20
 802575e:	46bd      	mov	sp, r7
 8025760:	bd90      	pop	{r4, r7, pc}

08025762 <_ZNKSt5dequeIjSaIjEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8025762:	b580      	push	{r7, lr}
 8025764:	b082      	sub	sp, #8
 8025766:	af00      	add	r7, sp, #0
 8025768:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 802576a:	687b      	ldr	r3, [r7, #4]
 802576c:	f103 0218 	add.w	r2, r3, #24
 8025770:	687b      	ldr	r3, [r7, #4]
 8025772:	3308      	adds	r3, #8
 8025774:	4619      	mov	r1, r3
 8025776:	4610      	mov	r0, r2
 8025778:	f000 fd3e 	bl	80261f8 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>
 802577c:	4603      	mov	r3, r0
 802577e:	4618      	mov	r0, r3
 8025780:	3708      	adds	r7, #8
 8025782:	46bd      	mov	sp, r7
 8025784:	bd80      	pop	{r7, pc}

08025786 <_ZNKSt5dequeIjSaIjEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8025786:	b580      	push	{r7, lr}
 8025788:	b082      	sub	sp, #8
 802578a:	af00      	add	r7, sp, #0
 802578c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 802578e:	687b      	ldr	r3, [r7, #4]
 8025790:	4618      	mov	r0, r3
 8025792:	f000 fd6f 	bl	8026274 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025796:	4603      	mov	r3, r0
 8025798:	4618      	mov	r0, r3
 802579a:	f000 fd51 	bl	8026240 <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>
 802579e:	4603      	mov	r3, r0
 80257a0:	4618      	mov	r0, r3
 80257a2:	3708      	adds	r7, #8
 80257a4:	46bd      	mov	sp, r7
 80257a6:	bd80      	pop	{r7, pc}

080257a8 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80257a8:	b580      	push	{r7, lr}
 80257aa:	b082      	sub	sp, #8
 80257ac:	af00      	add	r7, sp, #0
 80257ae:	6078      	str	r0, [r7, #4]
 80257b0:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80257b2:	683b      	ldr	r3, [r7, #0]
 80257b4:	1c5a      	adds	r2, r3, #1
 80257b6:	687b      	ldr	r3, [r7, #4]
 80257b8:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80257ba:	6879      	ldr	r1, [r7, #4]
 80257bc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80257be:	6879      	ldr	r1, [r7, #4]
 80257c0:	6809      	ldr	r1, [r1, #0]
 80257c2:	1a41      	subs	r1, r0, r1
 80257c4:	1089      	asrs	r1, r1, #2
 80257c6:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80257c8:	429a      	cmp	r2, r3
 80257ca:	d904      	bls.n	80257d6 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80257cc:	2200      	movs	r2, #0
 80257ce:	6839      	ldr	r1, [r7, #0]
 80257d0:	6878      	ldr	r0, [r7, #4]
 80257d2:	f000 fd5a 	bl	802628a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>
      }
 80257d6:	bf00      	nop
 80257d8:	3708      	adds	r7, #8
 80257da:	46bd      	mov	sp, r7
 80257dc:	bd80      	pop	{r7, pc}

080257de <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80257de:	b590      	push	{r4, r7, lr}
 80257e0:	b083      	sub	sp, #12
 80257e2:	af00      	add	r7, sp, #0
 80257e4:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80257e6:	687c      	ldr	r4, [r7, #4]
 80257e8:	2004      	movs	r0, #4
 80257ea:	f7fb fb6d 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80257ee:	4603      	mov	r3, r0
 80257f0:	4619      	mov	r1, r3
 80257f2:	4620      	mov	r0, r4
 80257f4:	f000 fde3 	bl	80263be <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>
 80257f8:	4603      	mov	r3, r0
      }
 80257fa:	4618      	mov	r0, r3
 80257fc:	370c      	adds	r7, #12
 80257fe:	46bd      	mov	sp, r7
 8025800:	bd90      	pop	{r4, r7, pc}

08025802 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8025802:	b590      	push	{r4, r7, lr}
 8025804:	b083      	sub	sp, #12
 8025806:	af00      	add	r7, sp, #0
 8025808:	6078      	str	r0, [r7, #4]
 802580a:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 802580c:	687b      	ldr	r3, [r7, #4]
 802580e:	683a      	ldr	r2, [r7, #0]
 8025810:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8025812:	683b      	ldr	r3, [r7, #0]
 8025814:	681a      	ldr	r2, [r3, #0]
 8025816:	687b      	ldr	r3, [r7, #4]
 8025818:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 802581a:	687b      	ldr	r3, [r7, #4]
 802581c:	685c      	ldr	r4, [r3, #4]
 802581e:	f000 fddd 	bl	80263dc <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 8025822:	4603      	mov	r3, r0
 8025824:	009b      	lsls	r3, r3, #2
 8025826:	18e2      	adds	r2, r4, r3
 8025828:	687b      	ldr	r3, [r7, #4]
 802582a:	609a      	str	r2, [r3, #8]
      }
 802582c:	bf00      	nop
 802582e:	370c      	adds	r7, #12
 8025830:	46bd      	mov	sp, r7
 8025832:	bd90      	pop	{r4, r7, pc}

08025834 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8025834:	b590      	push	{r4, r7, lr}
 8025836:	b083      	sub	sp, #12
 8025838:	af00      	add	r7, sp, #0
 802583a:	6078      	str	r0, [r7, #4]
 802583c:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 802583e:	687c      	ldr	r4, [r7, #4]
 8025840:	2004      	movs	r0, #4
 8025842:	f7fb fb41 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8025846:	4603      	mov	r3, r0
 8025848:	461a      	mov	r2, r3
 802584a:	6839      	ldr	r1, [r7, #0]
 802584c:	4620      	mov	r0, r4
 802584e:	f000 fdcd 	bl	80263ec <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>
      }
 8025852:	bf00      	nop
 8025854:	370c      	adds	r7, #12
 8025856:	46bd      	mov	sp, r7
 8025858:	bd90      	pop	{r4, r7, pc}

0802585a <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 802585a:	b480      	push	{r7}
 802585c:	b083      	sub	sp, #12
 802585e:	af00      	add	r7, sp, #0
 8025860:	6078      	str	r0, [r7, #4]
 8025862:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8025864:	683b      	ldr	r3, [r7, #0]
 8025866:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025868:	687b      	ldr	r3, [r7, #4]
 802586a:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802586c:	683b      	ldr	r3, [r7, #0]
 802586e:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025870:	687b      	ldr	r3, [r7, #4]
 8025872:	605a      	str	r2, [r3, #4]
 8025874:	683b      	ldr	r3, [r7, #0]
 8025876:	689a      	ldr	r2, [r3, #8]
 8025878:	687b      	ldr	r3, [r7, #4]
 802587a:	609a      	str	r2, [r3, #8]
 802587c:	683b      	ldr	r3, [r7, #0]
 802587e:	68da      	ldr	r2, [r3, #12]
 8025880:	687b      	ldr	r3, [r7, #4]
 8025882:	60da      	str	r2, [r3, #12]
 8025884:	687b      	ldr	r3, [r7, #4]
 8025886:	4618      	mov	r0, r3
 8025888:	370c      	adds	r7, #12
 802588a:	46bd      	mov	sp, r7
 802588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025890:	4770      	bx	lr

08025892 <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>:
	destroy(_Up* __p)
 8025892:	b480      	push	{r7}
 8025894:	b083      	sub	sp, #12
 8025896:	af00      	add	r7, sp, #0
 8025898:	6078      	str	r0, [r7, #4]
 802589a:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 802589c:	bf00      	nop
 802589e:	370c      	adds	r7, #12
 80258a0:	46bd      	mov	sp, r7
 80258a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258a6:	4770      	bx	lr

080258a8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80258a8:	b480      	push	{r7}
 80258aa:	b083      	sub	sp, #12
 80258ac:	af00      	add	r7, sp, #0
 80258ae:	6078      	str	r0, [r7, #4]
 80258b0:	687b      	ldr	r3, [r7, #4]
 80258b2:	4618      	mov	r0, r3
 80258b4:	370c      	adds	r7, #12
 80258b6:	46bd      	mov	sp, r7
 80258b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258bc:	4770      	bx	lr

080258be <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80258be:	b480      	push	{r7}
 80258c0:	b083      	sub	sp, #12
 80258c2:	af00      	add	r7, sp, #0
 80258c4:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80258c6:	687b      	ldr	r3, [r7, #4]
 80258c8:	2200      	movs	r2, #0
 80258ca:	601a      	str	r2, [r3, #0]
 80258cc:	687b      	ldr	r3, [r7, #4]
 80258ce:	2200      	movs	r2, #0
 80258d0:	605a      	str	r2, [r3, #4]
 80258d2:	687b      	ldr	r3, [r7, #4]
 80258d4:	2200      	movs	r2, #0
 80258d6:	609a      	str	r2, [r3, #8]
 80258d8:	687b      	ldr	r3, [r7, #4]
 80258da:	2200      	movs	r2, #0
 80258dc:	60da      	str	r2, [r3, #12]
 80258de:	687b      	ldr	r3, [r7, #4]
 80258e0:	4618      	mov	r0, r3
 80258e2:	370c      	adds	r7, #12
 80258e4:	46bd      	mov	sp, r7
 80258e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80258ea:	4770      	bx	lr

080258ec <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80258ec:	b580      	push	{r7, lr}
 80258ee:	b082      	sub	sp, #8
 80258f0:	af00      	add	r7, sp, #0
 80258f2:	6078      	str	r0, [r7, #4]
 80258f4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80258f6:	2200      	movs	r2, #0
 80258f8:	6839      	ldr	r1, [r7, #0]
 80258fa:	6878      	ldr	r0, [r7, #4]
 80258fc:	f000 fd85 	bl	802640a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8025900:	4603      	mov	r3, r0
 8025902:	4618      	mov	r0, r3
 8025904:	3708      	adds	r7, #8
 8025906:	46bd      	mov	sp, r7
 8025908:	bd80      	pop	{r7, pc}

0802590a <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 802590a:	b580      	push	{r7, lr}
 802590c:	b082      	sub	sp, #8
 802590e:	af00      	add	r7, sp, #0
 8025910:	6078      	str	r0, [r7, #4]
 8025912:	6039      	str	r1, [r7, #0]
 8025914:	6878      	ldr	r0, [r7, #4]
 8025916:	f000 fd96 	bl	8026446 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>
 802591a:	687b      	ldr	r3, [r7, #4]
 802591c:	4618      	mov	r0, r3
 802591e:	3708      	adds	r7, #8
 8025920:	46bd      	mov	sp, r7
 8025922:	bd80      	pop	{r7, pc}

08025924 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025924:	b480      	push	{r7}
 8025926:	b083      	sub	sp, #12
 8025928:	af00      	add	r7, sp, #0
 802592a:	6078      	str	r0, [r7, #4]
 802592c:	687b      	ldr	r3, [r7, #4]
 802592e:	4618      	mov	r0, r3
 8025930:	370c      	adds	r7, #12
 8025932:	46bd      	mov	sp, r7
 8025934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025938:	4770      	bx	lr

0802593a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 802593a:	b580      	push	{r7, lr}
 802593c:	b084      	sub	sp, #16
 802593e:	af00      	add	r7, sp, #0
 8025940:	60f8      	str	r0, [r7, #12]
 8025942:	60b9      	str	r1, [r7, #8]
 8025944:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8025946:	687b      	ldr	r3, [r7, #4]
 8025948:	009b      	lsls	r3, r3, #2
 802594a:	4619      	mov	r1, r3
 802594c:	68b8      	ldr	r0, [r7, #8]
 802594e:	f016 f8e9 	bl	803bb24 <_ZdlPvj>
      }
 8025952:	bf00      	nop
 8025954:	3710      	adds	r7, #16
 8025956:	46bd      	mov	sp, r7
 8025958:	bd80      	pop	{r7, pc}

0802595a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 802595a:	b580      	push	{r7, lr}
 802595c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 802595e:	2014      	movs	r0, #20
 8025960:	f7fb fab2 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8025964:	4603      	mov	r3, r0
 8025966:	4618      	mov	r0, r3
 8025968:	bd80      	pop	{r7, pc}

0802596a <_ZNSaIjEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 802596a:	b580      	push	{r7, lr}
 802596c:	b082      	sub	sp, #8
 802596e:	af00      	add	r7, sp, #0
 8025970:	6078      	str	r0, [r7, #4]
 8025972:	6878      	ldr	r0, [r7, #4]
 8025974:	f000 fd72 	bl	802645c <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>
 8025978:	687b      	ldr	r3, [r7, #4]
 802597a:	4618      	mov	r0, r3
 802597c:	3708      	adds	r7, #8
 802597e:	46bd      	mov	sp, r7
 8025980:	bd80      	pop	{r7, pc}

08025982 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8025982:	b580      	push	{r7, lr}
 8025984:	b082      	sub	sp, #8
 8025986:	af00      	add	r7, sp, #0
 8025988:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 802598a:	687b      	ldr	r3, [r7, #4]
 802598c:	2200      	movs	r2, #0
 802598e:	601a      	str	r2, [r3, #0]
 8025990:	687b      	ldr	r3, [r7, #4]
 8025992:	2200      	movs	r2, #0
 8025994:	605a      	str	r2, [r3, #4]
 8025996:	687b      	ldr	r3, [r7, #4]
 8025998:	3308      	adds	r3, #8
 802599a:	4618      	mov	r0, r3
 802599c:	f000 fd69 	bl	8026472 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
 80259a0:	687b      	ldr	r3, [r7, #4]
 80259a2:	3318      	adds	r3, #24
 80259a4:	4618      	mov	r0, r3
 80259a6:	f000 fd64 	bl	8026472 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
	{ }
 80259aa:	687b      	ldr	r3, [r7, #4]
 80259ac:	4618      	mov	r0, r3
 80259ae:	3708      	adds	r7, #8
 80259b0:	46bd      	mov	sp, r7
 80259b2:	bd80      	pop	{r7, pc}

080259b4 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80259b4:	b480      	push	{r7}
 80259b6:	b083      	sub	sp, #12
 80259b8:	af00      	add	r7, sp, #0
 80259ba:	6078      	str	r0, [r7, #4]
 80259bc:	687b      	ldr	r3, [r7, #4]
 80259be:	4618      	mov	r0, r3
 80259c0:	370c      	adds	r7, #12
 80259c2:	46bd      	mov	sp, r7
 80259c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259c8:	4770      	bx	lr

080259ca <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80259ca:	b590      	push	{r4, r7, lr}
 80259cc:	b085      	sub	sp, #20
 80259ce:	af00      	add	r7, sp, #0
 80259d0:	6078      	str	r0, [r7, #4]
 80259d2:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80259d4:	f107 030c 	add.w	r3, r7, #12
 80259d8:	6879      	ldr	r1, [r7, #4]
 80259da:	4618      	mov	r0, r3
 80259dc:	f000 f82c 	bl	8025a38 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80259e0:	f107 030c 	add.w	r3, r7, #12
 80259e4:	6839      	ldr	r1, [r7, #0]
 80259e6:	4618      	mov	r0, r3
 80259e8:	f000 fd5a 	bl	80264a0 <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>
 80259ec:	4604      	mov	r4, r0
 80259ee:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80259f0:	f107 030c 	add.w	r3, r7, #12
 80259f4:	4618      	mov	r0, r3
 80259f6:	f000 f830 	bl	8025a5a <_ZNSaIPjED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80259fa:	4623      	mov	r3, r4
      }
 80259fc:	4618      	mov	r0, r3
 80259fe:	3714      	adds	r7, #20
 8025a00:	46bd      	mov	sp, r7
 8025a02:	bd90      	pop	{r4, r7, pc}

08025a04 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8025a04:	b580      	push	{r7, lr}
 8025a06:	b086      	sub	sp, #24
 8025a08:	af00      	add	r7, sp, #0
 8025a0a:	60f8      	str	r0, [r7, #12]
 8025a0c:	60b9      	str	r1, [r7, #8]
 8025a0e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025a10:	68bb      	ldr	r3, [r7, #8]
 8025a12:	617b      	str	r3, [r7, #20]
 8025a14:	697a      	ldr	r2, [r7, #20]
 8025a16:	687b      	ldr	r3, [r7, #4]
 8025a18:	429a      	cmp	r2, r3
 8025a1a:	d209      	bcs.n	8025a30 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8025a1c:	68f8      	ldr	r0, [r7, #12]
 8025a1e:	f7ff fede 	bl	80257de <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8025a22:	4602      	mov	r2, r0
 8025a24:	697b      	ldr	r3, [r7, #20]
 8025a26:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025a28:	697b      	ldr	r3, [r7, #20]
 8025a2a:	3304      	adds	r3, #4
 8025a2c:	617b      	str	r3, [r7, #20]
 8025a2e:	e7f1      	b.n	8025a14 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x10>
    }
 8025a30:	bf00      	nop
 8025a32:	3718      	adds	r7, #24
 8025a34:	46bd      	mov	sp, r7
 8025a36:	bd80      	pop	{r7, pc}

08025a38 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8025a38:	b580      	push	{r7, lr}
 8025a3a:	b082      	sub	sp, #8
 8025a3c:	af00      	add	r7, sp, #0
 8025a3e:	6078      	str	r0, [r7, #4]
 8025a40:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8025a42:	6838      	ldr	r0, [r7, #0]
 8025a44:	f000 fc16 	bl	8026274 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025a48:	4603      	mov	r3, r0
 8025a4a:	4619      	mov	r1, r3
 8025a4c:	6878      	ldr	r0, [r7, #4]
 8025a4e:	f000 fd36 	bl	80264be <_ZNSaIPjEC1IjEERKSaIT_E>
 8025a52:	6878      	ldr	r0, [r7, #4]
 8025a54:	3708      	adds	r7, #8
 8025a56:	46bd      	mov	sp, r7
 8025a58:	bd80      	pop	{r7, pc}

08025a5a <_ZNSaIPjED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8025a5a:	b580      	push	{r7, lr}
 8025a5c:	b082      	sub	sp, #8
 8025a5e:	af00      	add	r7, sp, #0
 8025a60:	6078      	str	r0, [r7, #4]
 8025a62:	6878      	ldr	r0, [r7, #4]
 8025a64:	f000 fd38 	bl	80264d8 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>
 8025a68:	687b      	ldr	r3, [r7, #4]
 8025a6a:	4618      	mov	r0, r3
 8025a6c:	3708      	adds	r7, #8
 8025a6e:	46bd      	mov	sp, r7
 8025a70:	bd80      	pop	{r7, pc}

08025a72 <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8025a72:	b580      	push	{r7, lr}
 8025a74:	b084      	sub	sp, #16
 8025a76:	af00      	add	r7, sp, #0
 8025a78:	60f8      	str	r0, [r7, #12]
 8025a7a:	60b9      	str	r1, [r7, #8]
 8025a7c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025a7e:	687a      	ldr	r2, [r7, #4]
 8025a80:	68b9      	ldr	r1, [r7, #8]
 8025a82:	68f8      	ldr	r0, [r7, #12]
 8025a84:	f000 fd33 	bl	80264ee <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>
 8025a88:	bf00      	nop
 8025a8a:	3710      	adds	r7, #16
 8025a8c:	46bd      	mov	sp, r7
 8025a8e:	bd80      	pop	{r7, pc}

08025a90 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8025a90:	b5b0      	push	{r4, r5, r7, lr}
 8025a92:	b08c      	sub	sp, #48	; 0x30
 8025a94:	af00      	add	r7, sp, #0
 8025a96:	6078      	str	r0, [r7, #4]
 8025a98:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8025a9a:	6878      	ldr	r0, [r7, #4]
 8025a9c:	f000 fd37 	bl	802650e <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025aa0:	4602      	mov	r2, r0
 8025aa2:	f107 0308 	add.w	r3, r7, #8
 8025aa6:	4611      	mov	r1, r2
 8025aa8:	4618      	mov	r0, r3
 8025aaa:	f000 fd5f 	bl	802656c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>
      __a = _GLIBCXX_MOVE(__b);
 8025aae:	6838      	ldr	r0, [r7, #0]
 8025ab0:	f000 fd2d 	bl	802650e <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025ab4:	4602      	mov	r2, r0
 8025ab6:	687b      	ldr	r3, [r7, #4]
 8025ab8:	461c      	mov	r4, r3
 8025aba:	4615      	mov	r5, r2
 8025abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025ac4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025ac8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8025acc:	f107 0308 	add.w	r3, r7, #8
 8025ad0:	4618      	mov	r0, r3
 8025ad2:	f000 fd1c 	bl	802650e <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025ad6:	4602      	mov	r2, r0
 8025ad8:	683b      	ldr	r3, [r7, #0]
 8025ada:	461c      	mov	r4, r3
 8025adc:	4615      	mov	r5, r2
 8025ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025ae6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025aea:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8025aee:	bf00      	nop
 8025af0:	3730      	adds	r7, #48	; 0x30
 8025af2:	46bd      	mov	sp, r7
 8025af4:	bdb0      	pop	{r4, r5, r7, pc}

08025af6 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8025af6:	b580      	push	{r7, lr}
 8025af8:	b084      	sub	sp, #16
 8025afa:	af00      	add	r7, sp, #0
 8025afc:	60f8      	str	r0, [r7, #12]
 8025afe:	60b9      	str	r1, [r7, #8]
 8025b00:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8025b02:	68b8      	ldr	r0, [r7, #8]
 8025b04:	f000 fd51 	bl	80265aa <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>
 8025b08:	bf00      	nop
 8025b0a:	3710      	adds	r7, #16
 8025b0c:	46bd      	mov	sp, r7
 8025b0e:	bd80      	pop	{r7, pc}

08025b10 <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 8025b10:	b5b0      	push	{r4, r5, r7, lr}
 8025b12:	b08c      	sub	sp, #48	; 0x30
 8025b14:	af00      	add	r7, sp, #0
 8025b16:	6078      	str	r0, [r7, #4]
 8025b18:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8025b1a:	6878      	ldr	r0, [r7, #4]
 8025b1c:	f000 fd50 	bl	80265c0 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025b20:	4602      	mov	r2, r0
 8025b22:	f107 0308 	add.w	r3, r7, #8
 8025b26:	4611      	mov	r1, r2
 8025b28:	4618      	mov	r0, r3
 8025b2a:	f000 fd78 	bl	802661e <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 8025b2e:	6838      	ldr	r0, [r7, #0]
 8025b30:	f000 fd46 	bl	80265c0 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025b34:	4602      	mov	r2, r0
 8025b36:	687b      	ldr	r3, [r7, #4]
 8025b38:	461c      	mov	r4, r3
 8025b3a:	4615      	mov	r5, r2
 8025b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025b44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025b48:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8025b4c:	f107 0308 	add.w	r3, r7, #8
 8025b50:	4618      	mov	r0, r3
 8025b52:	f000 fd35 	bl	80265c0 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025b56:	4602      	mov	r2, r0
 8025b58:	683b      	ldr	r3, [r7, #0]
 8025b5a:	461c      	mov	r4, r3
 8025b5c:	4615      	mov	r5, r2
 8025b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025b66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025b6a:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8025b6e:	bf00      	nop
 8025b70:	3730      	adds	r7, #48	; 0x30
 8025b72:	46bd      	mov	sp, r7
 8025b74:	bdb0      	pop	{r4, r5, r7, pc}

08025b76 <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>:
      _M_erase_at_end(iterator __pos)
 8025b76:	b590      	push	{r4, r7, lr}
 8025b78:	b08b      	sub	sp, #44	; 0x2c
 8025b7a:	af00      	add	r7, sp, #0
 8025b7c:	6078      	str	r0, [r7, #4]
 8025b7e:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8025b80:	f107 0308 	add.w	r3, r7, #8
 8025b84:	6839      	ldr	r1, [r7, #0]
 8025b86:	4618      	mov	r0, r3
 8025b88:	f7fe fbac 	bl	80242e4 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8025b8c:	f107 0318 	add.w	r3, r7, #24
 8025b90:	6879      	ldr	r1, [r7, #4]
 8025b92:	4618      	mov	r0, r3
 8025b94:	f7fe fb8c 	bl	80242b0 <_ZNSt5dequeIjSaIjEE3endEv>
 8025b98:	687b      	ldr	r3, [r7, #4]
 8025b9a:	4618      	mov	r0, r3
 8025b9c:	f7fe fb97 	bl	80242ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025ba0:	4603      	mov	r3, r0
 8025ba2:	f107 0218 	add.w	r2, r7, #24
 8025ba6:	f107 0108 	add.w	r1, r7, #8
 8025baa:	6878      	ldr	r0, [r7, #4]
 8025bac:	f7fe fbb6 	bl	802431c <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 8025bb0:	6878      	ldr	r0, [r7, #4]
 8025bb2:	683b      	ldr	r3, [r7, #0]
 8025bb4:	68db      	ldr	r3, [r3, #12]
 8025bb6:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8025bb8:	687b      	ldr	r3, [r7, #4]
 8025bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8025bbc:	3304      	adds	r3, #4
 8025bbe:	461a      	mov	r2, r3
 8025bc0:	f7ff f812 	bl	8024be8 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	this->_M_impl._M_finish = __pos;
 8025bc4:	687b      	ldr	r3, [r7, #4]
 8025bc6:	683a      	ldr	r2, [r7, #0]
 8025bc8:	f103 0418 	add.w	r4, r3, #24
 8025bcc:	4613      	mov	r3, r2
 8025bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8025bd4:	bf00      	nop
 8025bd6:	372c      	adds	r7, #44	; 0x2c
 8025bd8:	46bd      	mov	sp, r7
 8025bda:	bd90      	pop	{r4, r7, pc}

08025bdc <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8025bdc:	b580      	push	{r7, lr}
 8025bde:	b084      	sub	sp, #16
 8025be0:	af00      	add	r7, sp, #0
 8025be2:	60f8      	str	r0, [r7, #12]
 8025be4:	60b9      	str	r1, [r7, #8]
 8025be6:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8025be8:	68b8      	ldr	r0, [r7, #8]
 8025bea:	f000 fd37 	bl	802665c <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>
 8025bee:	bf00      	nop
 8025bf0:	3710      	adds	r7, #16
 8025bf2:	46bd      	mov	sp, r7
 8025bf4:	bd80      	pop	{r7, pc}

08025bf6 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8025bf6:	b480      	push	{r7}
 8025bf8:	b083      	sub	sp, #12
 8025bfa:	af00      	add	r7, sp, #0
 8025bfc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8025bfe:	687b      	ldr	r3, [r7, #4]
 8025c00:	4618      	mov	r0, r3
 8025c02:	370c      	adds	r7, #12
 8025c04:	46bd      	mov	sp, r7
 8025c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c0a:	4770      	bx	lr

08025c0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __niter_base(_Iterator __it)
 8025c0c:	b580      	push	{r7, lr}
 8025c0e:	b082      	sub	sp, #8
 8025c10:	af00      	add	r7, sp, #0
 8025c12:	6078      	str	r0, [r7, #4]
 8025c14:	6039      	str	r1, [r7, #0]
    { return __it; }
 8025c16:	6839      	ldr	r1, [r7, #0]
 8025c18:	6878      	ldr	r0, [r7, #4]
 8025c1a:	f7fe fad2 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025c1e:	6878      	ldr	r0, [r7, #4]
 8025c20:	3708      	adds	r7, #8
 8025c22:	46bd      	mov	sp, r7
 8025c24:	bd80      	pop	{r7, pc}

08025c26 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8025c26:	b480      	push	{r7}
 8025c28:	b083      	sub	sp, #12
 8025c2a:	af00      	add	r7, sp, #0
 8025c2c:	6078      	str	r0, [r7, #4]
 8025c2e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8025c30:	683b      	ldr	r3, [r7, #0]
 8025c32:	681a      	ldr	r2, [r3, #0]
 8025c34:	687b      	ldr	r3, [r7, #4]
 8025c36:	681b      	ldr	r3, [r3, #0]
 8025c38:	429a      	cmp	r2, r3
 8025c3a:	da01      	bge.n	8025c40 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8025c3c:	683b      	ldr	r3, [r7, #0]
 8025c3e:	e000      	b.n	8025c42 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8025c40:	687b      	ldr	r3, [r7, #4]
    }
 8025c42:	4618      	mov	r0, r3
 8025c44:	370c      	adds	r7, #12
 8025c46:	46bd      	mov	sp, r7
 8025c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c4c:	4770      	bx	lr
	...

08025c50 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8025c50:	b580      	push	{r7, lr}
 8025c52:	b088      	sub	sp, #32
 8025c54:	af00      	add	r7, sp, #0
 8025c56:	60f8      	str	r0, [r7, #12]
 8025c58:	60b9      	str	r1, [r7, #8]
 8025c5a:	607a      	str	r2, [r7, #4]
 8025c5c:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8025c5e:	687a      	ldr	r2, [r7, #4]
 8025c60:	68bb      	ldr	r3, [r7, #8]
 8025c62:	1ad3      	subs	r3, r2, r3
 8025c64:	109b      	asrs	r3, r3, #2
 8025c66:	4a22      	ldr	r2, [pc, #136]	; (8025cf0 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8025c68:	fb02 f303 	mul.w	r3, r2, r3
 8025c6c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8025c6e:	697b      	ldr	r3, [r7, #20]
 8025c70:	2b00      	cmp	r3, #0
 8025c72:	dd34      	ble.n	8025cde <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 8025c74:	683b      	ldr	r3, [r7, #0]
 8025c76:	689a      	ldr	r2, [r3, #8]
 8025c78:	683b      	ldr	r3, [r7, #0]
 8025c7a:	681b      	ldr	r3, [r3, #0]
 8025c7c:	1ad3      	subs	r3, r2, r3
 8025c7e:	109b      	asrs	r3, r3, #2
 8025c80:	4a1b      	ldr	r2, [pc, #108]	; (8025cf0 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8025c82:	fb02 f303 	mul.w	r3, r2, r3
 8025c86:	61bb      	str	r3, [r7, #24]
 8025c88:	f107 0218 	add.w	r2, r7, #24
 8025c8c:	f107 0314 	add.w	r3, r7, #20
 8025c90:	4611      	mov	r1, r2
 8025c92:	4618      	mov	r0, r3
 8025c94:	f7ff ffc7 	bl	8025c26 <_ZSt3minIiERKT_S2_S2_>
 8025c98:	4603      	mov	r3, r0
	  const difference_type __clen
 8025c9a:	681b      	ldr	r3, [r3, #0]
 8025c9c:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8025c9e:	69fa      	ldr	r2, [r7, #28]
 8025ca0:	4613      	mov	r3, r2
 8025ca2:	009b      	lsls	r3, r3, #2
 8025ca4:	4413      	add	r3, r2
 8025ca6:	009b      	lsls	r3, r3, #2
 8025ca8:	461a      	mov	r2, r3
 8025caa:	68bb      	ldr	r3, [r7, #8]
 8025cac:	1899      	adds	r1, r3, r2
 8025cae:	683b      	ldr	r3, [r7, #0]
 8025cb0:	681b      	ldr	r3, [r3, #0]
 8025cb2:	461a      	mov	r2, r3
 8025cb4:	68b8      	ldr	r0, [r7, #8]
 8025cb6:	f000 fcdc 	bl	8026672 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
				       __result._M_cur);

	  __first += __clen;
 8025cba:	69fa      	ldr	r2, [r7, #28]
 8025cbc:	4613      	mov	r3, r2
 8025cbe:	009b      	lsls	r3, r3, #2
 8025cc0:	4413      	add	r3, r2
 8025cc2:	009b      	lsls	r3, r3, #2
 8025cc4:	461a      	mov	r2, r3
 8025cc6:	68bb      	ldr	r3, [r7, #8]
 8025cc8:	4413      	add	r3, r2
 8025cca:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8025ccc:	69f9      	ldr	r1, [r7, #28]
 8025cce:	6838      	ldr	r0, [r7, #0]
 8025cd0:	f7ff fcc2 	bl	8025658 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8025cd4:	697a      	ldr	r2, [r7, #20]
 8025cd6:	69fb      	ldr	r3, [r7, #28]
 8025cd8:	1ad3      	subs	r3, r2, r3
 8025cda:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8025cdc:	e7c7      	b.n	8025c6e <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x1e>
	}

      return __result;
 8025cde:	6839      	ldr	r1, [r7, #0]
 8025ce0:	68f8      	ldr	r0, [r7, #12]
 8025ce2:	f7fe fa6e 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8025ce6:	68f8      	ldr	r0, [r7, #12]
 8025ce8:	3720      	adds	r7, #32
 8025cea:	46bd      	mov	sp, r7
 8025cec:	bd80      	pop	{r7, pc}
 8025cee:	bf00      	nop
 8025cf0:	cccccccd 	.word	0xcccccccd

08025cf4 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8025cf4:	b580      	push	{r7, lr}
 8025cf6:	b084      	sub	sp, #16
 8025cf8:	af00      	add	r7, sp, #0
 8025cfa:	60f8      	str	r0, [r7, #12]
 8025cfc:	60b9      	str	r1, [r7, #8]
 8025cfe:	607a      	str	r2, [r7, #4]
    { return __res; }
 8025d00:	6879      	ldr	r1, [r7, #4]
 8025d02:	68f8      	ldr	r0, [r7, #12]
 8025d04:	f7fe fa5d 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025d08:	68f8      	ldr	r0, [r7, #12]
 8025d0a:	3710      	adds	r7, #16
 8025d0c:	46bd      	mov	sp, r7
 8025d0e:	bd80      	pop	{r7, pc}

08025d10 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8025d10:	b590      	push	{r4, r7, lr}
 8025d12:	b085      	sub	sp, #20
 8025d14:	af00      	add	r7, sp, #0
 8025d16:	6078      	str	r0, [r7, #4]
 8025d18:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8025d1a:	6878      	ldr	r0, [r7, #4]
 8025d1c:	f7fe fccb 	bl	80246b6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8025d20:	4604      	mov	r4, r0
 8025d22:	6878      	ldr	r0, [r7, #4]
 8025d24:	f7fd fd97 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8025d28:	4603      	mov	r3, r0
 8025d2a:	1ae3      	subs	r3, r4, r3
 8025d2c:	683a      	ldr	r2, [r7, #0]
 8025d2e:	429a      	cmp	r2, r3
 8025d30:	bf8c      	ite	hi
 8025d32:	2301      	movhi	r3, #1
 8025d34:	2300      	movls	r3, #0
 8025d36:	b2db      	uxtb	r3, r3
 8025d38:	2b00      	cmp	r3, #0
 8025d3a:	d002      	beq.n	8025d42 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 8025d3c:	4816      	ldr	r0, [pc, #88]	; (8025d98 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x88>)
 8025d3e:	f015 ff07 	bl	803bb50 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025d42:	f7ff fe0a 	bl	802595a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025d46:	4602      	mov	r2, r0
 8025d48:	683b      	ldr	r3, [r7, #0]
 8025d4a:	4413      	add	r3, r2
 8025d4c:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8025d4e:	f7ff fe04 	bl	802595a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025d52:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025d54:	fbb4 f3f3 	udiv	r3, r4, r3
 8025d58:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 8025d5a:	68b9      	ldr	r1, [r7, #8]
 8025d5c:	6878      	ldr	r0, [r7, #4]
 8025d5e:	f7fe fcbb 	bl	80246d8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025d62:	2301      	movs	r3, #1
 8025d64:	60fb      	str	r3, [r7, #12]
 8025d66:	68fa      	ldr	r2, [r7, #12]
 8025d68:	68bb      	ldr	r3, [r7, #8]
 8025d6a:	429a      	cmp	r2, r3
 8025d6c:	d80f      	bhi.n	8025d8e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 8025d6e:	6879      	ldr	r1, [r7, #4]
 8025d70:	687b      	ldr	r3, [r7, #4]
 8025d72:	695a      	ldr	r2, [r3, #20]
 8025d74:	68fb      	ldr	r3, [r7, #12]
 8025d76:	009b      	lsls	r3, r3, #2
 8025d78:	425b      	negs	r3, r3
 8025d7a:	18d4      	adds	r4, r2, r3
 8025d7c:	4608      	mov	r0, r1
 8025d7e:	f7fe fcc3 	bl	8024708 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8025d82:	4603      	mov	r3, r0
 8025d84:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025d86:	68fb      	ldr	r3, [r7, #12]
 8025d88:	3301      	adds	r3, #1
 8025d8a:	60fb      	str	r3, [r7, #12]
 8025d8c:	e7eb      	b.n	8025d66 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x56>
    }
 8025d8e:	bf00      	nop
 8025d90:	3714      	adds	r7, #20
 8025d92:	46bd      	mov	sp, r7
 8025d94:	bd90      	pop	{r4, r7, pc}
 8025d96:	bf00      	nop
 8025d98:	0803dbdc 	.word	0x0803dbdc

08025d9c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8025d9c:	b580      	push	{r7, lr}
 8025d9e:	b084      	sub	sp, #16
 8025da0:	af00      	add	r7, sp, #0
 8025da2:	60f8      	str	r0, [r7, #12]
 8025da4:	60b9      	str	r1, [r7, #8]
 8025da6:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8025da8:	68b9      	ldr	r1, [r7, #8]
 8025daa:	68f8      	ldr	r0, [r7, #12]
 8025dac:	f7fe fa09 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp -= __n;
 8025db0:	6879      	ldr	r1, [r7, #4]
 8025db2:	68f8      	ldr	r0, [r7, #12]
 8025db4:	f000 fc6d 	bl	8026692 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	return __tmp;
 8025db8:	bf00      	nop
      }
 8025dba:	68f8      	ldr	r0, [r7, #12]
 8025dbc:	3710      	adds	r7, #16
 8025dbe:	46bd      	mov	sp, r7
 8025dc0:	bd80      	pop	{r7, pc}

08025dc2 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8025dc2:	b580      	push	{r7, lr}
 8025dc4:	b08a      	sub	sp, #40	; 0x28
 8025dc6:	af00      	add	r7, sp, #0
 8025dc8:	60f8      	str	r0, [r7, #12]
 8025dca:	60b9      	str	r1, [r7, #8]
 8025dcc:	607a      	str	r2, [r7, #4]
 8025dce:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8025dd0:	2301      	movs	r3, #1
 8025dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8025dd6:	f107 0314 	add.w	r3, r7, #20
 8025dda:	6839      	ldr	r1, [r7, #0]
 8025ddc:	4618      	mov	r0, r3
 8025dde:	f7fe f9f0 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025de2:	68f8      	ldr	r0, [r7, #12]
 8025de4:	f107 0314 	add.w	r3, r7, #20
 8025de8:	687a      	ldr	r2, [r7, #4]
 8025dea:	68b9      	ldr	r1, [r7, #8]
 8025dec:	f000 fc61 	bl	80266b2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>
    }
 8025df0:	68f8      	ldr	r0, [r7, #12]
 8025df2:	3728      	adds	r7, #40	; 0x28
 8025df4:	46bd      	mov	sp, r7
 8025df6:	bd80      	pop	{r7, pc}

08025df8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8025df8:	b590      	push	{r4, r7, lr}
 8025dfa:	b085      	sub	sp, #20
 8025dfc:	af00      	add	r7, sp, #0
 8025dfe:	6078      	str	r0, [r7, #4]
 8025e00:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8025e02:	6878      	ldr	r0, [r7, #4]
 8025e04:	f7fe fc57 	bl	80246b6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8025e08:	4604      	mov	r4, r0
 8025e0a:	6878      	ldr	r0, [r7, #4]
 8025e0c:	f7fd fd23 	bl	8023856 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8025e10:	4603      	mov	r3, r0
 8025e12:	1ae3      	subs	r3, r4, r3
 8025e14:	683a      	ldr	r2, [r7, #0]
 8025e16:	429a      	cmp	r2, r3
 8025e18:	bf8c      	ite	hi
 8025e1a:	2301      	movhi	r3, #1
 8025e1c:	2300      	movls	r3, #0
 8025e1e:	b2db      	uxtb	r3, r3
 8025e20:	2b00      	cmp	r3, #0
 8025e22:	d002      	beq.n	8025e2a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8025e24:	4815      	ldr	r0, [pc, #84]	; (8025e7c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x84>)
 8025e26:	f015 fe93 	bl	803bb50 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025e2a:	f7ff fd96 	bl	802595a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025e2e:	4602      	mov	r2, r0
 8025e30:	683b      	ldr	r3, [r7, #0]
 8025e32:	4413      	add	r3, r2
 8025e34:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8025e36:	f7ff fd90 	bl	802595a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025e3a:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025e3c:	fbb4 f3f3 	udiv	r3, r4, r3
 8025e40:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8025e42:	68b9      	ldr	r1, [r7, #8]
 8025e44:	6878      	ldr	r0, [r7, #4]
 8025e46:	f000 fc4c 	bl	80266e2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025e4a:	2301      	movs	r3, #1
 8025e4c:	60fb      	str	r3, [r7, #12]
 8025e4e:	68fa      	ldr	r2, [r7, #12]
 8025e50:	68bb      	ldr	r3, [r7, #8]
 8025e52:	429a      	cmp	r2, r3
 8025e54:	d80e      	bhi.n	8025e74 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8025e56:	6879      	ldr	r1, [r7, #4]
 8025e58:	687b      	ldr	r3, [r7, #4]
 8025e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025e5c:	68fb      	ldr	r3, [r7, #12]
 8025e5e:	009b      	lsls	r3, r3, #2
 8025e60:	18d4      	adds	r4, r2, r3
 8025e62:	4608      	mov	r0, r1
 8025e64:	f7fe fc50 	bl	8024708 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8025e68:	4603      	mov	r3, r0
 8025e6a:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025e6c:	68fb      	ldr	r3, [r7, #12]
 8025e6e:	3301      	adds	r3, #1
 8025e70:	60fb      	str	r3, [r7, #12]
 8025e72:	e7ec      	b.n	8025e4e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x56>
    }
 8025e74:	bf00      	nop
 8025e76:	3714      	adds	r7, #20
 8025e78:	46bd      	mov	sp, r7
 8025e7a:	bd90      	pop	{r4, r7, pc}
 8025e7c:	0803dbfc 	.word	0x0803dbfc

08025e80 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8025e80:	b590      	push	{r4, r7, lr}
 8025e82:	b09b      	sub	sp, #108	; 0x6c
 8025e84:	af02      	add	r7, sp, #8
 8025e86:	60f8      	str	r0, [r7, #12]
 8025e88:	60b9      	str	r1, [r7, #8]
 8025e8a:	607a      	str	r2, [r7, #4]
 8025e8c:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
					 __result, __alloc);
 8025e8e:	f107 0320 	add.w	r3, r7, #32
 8025e92:	68b9      	ldr	r1, [r7, #8]
 8025e94:	4618      	mov	r0, r3
 8025e96:	f7fe f994 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025e9a:	f107 0310 	add.w	r3, r7, #16
 8025e9e:	f107 0220 	add.w	r2, r7, #32
 8025ea2:	4611      	mov	r1, r2
 8025ea4:	4618      	mov	r0, r3
 8025ea6:	f000 fc37 	bl	8026718 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8025eaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025eae:	6879      	ldr	r1, [r7, #4]
 8025eb0:	4618      	mov	r0, r3
 8025eb2:	f7fe f986 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025eb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8025eba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8025ebe:	4611      	mov	r1, r2
 8025ec0:	4618      	mov	r0, r3
 8025ec2:	f000 fc29 	bl	8026718 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8025ec6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8025eca:	6839      	ldr	r1, [r7, #0]
 8025ecc:	4618      	mov	r0, r3
 8025ece:	f7fe f978 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025ed2:	68f8      	ldr	r0, [r7, #12]
 8025ed4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8025ed8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8025edc:	f107 0110 	add.w	r1, r7, #16
 8025ee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8025ee2:	9300      	str	r3, [sp, #0]
 8025ee4:	4623      	mov	r3, r4
 8025ee6:	f000 fc40 	bl	802676a <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>
    }
 8025eea:	68f8      	ldr	r0, [r7, #12]
 8025eec:	3764      	adds	r7, #100	; 0x64
 8025eee:	46bd      	mov	sp, r7
 8025ef0:	bd90      	pop	{r4, r7, pc}

08025ef2 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8025ef2:	b580      	push	{r7, lr}
 8025ef4:	b098      	sub	sp, #96	; 0x60
 8025ef6:	af00      	add	r7, sp, #0
 8025ef8:	60f8      	str	r0, [r7, #12]
 8025efa:	60b9      	str	r1, [r7, #8]
 8025efc:	607a      	str	r2, [r7, #4]
 8025efe:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
				      std::__miter_base(__last), __result);
 8025f00:	f107 0320 	add.w	r3, r7, #32
 8025f04:	68b9      	ldr	r1, [r7, #8]
 8025f06:	4618      	mov	r0, r3
 8025f08:	f7fe f95b 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f0c:	f107 0310 	add.w	r3, r7, #16
 8025f10:	f107 0220 	add.w	r2, r7, #32
 8025f14:	4611      	mov	r1, r2
 8025f16:	4618      	mov	r0, r3
 8025f18:	f000 fc4d 	bl	80267b6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8025f1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025f20:	6879      	ldr	r1, [r7, #4]
 8025f22:	4618      	mov	r0, r3
 8025f24:	f7fe f94d 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8025f2c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8025f30:	4611      	mov	r1, r2
 8025f32:	4618      	mov	r0, r3
 8025f34:	f000 fc3f 	bl	80267b6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8025f38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8025f3c:	6839      	ldr	r1, [r7, #0]
 8025f3e:	4618      	mov	r0, r3
 8025f40:	f7fe f93f 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f44:	68f8      	ldr	r0, [r7, #12]
 8025f46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8025f4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8025f4e:	f107 0110 	add.w	r1, r7, #16
 8025f52:	f000 fc3d 	bl	80267d0 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8025f56:	68f8      	ldr	r0, [r7, #12]
 8025f58:	3760      	adds	r7, #96	; 0x60
 8025f5a:	46bd      	mov	sp, r7
 8025f5c:	bd80      	pop	{r7, pc}

08025f5e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8025f5e:	b590      	push	{r4, r7, lr}
 8025f60:	b085      	sub	sp, #20
 8025f62:	af00      	add	r7, sp, #0
 8025f64:	6078      	str	r0, [r7, #4]
 8025f66:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8025f68:	683b      	ldr	r3, [r7, #0]
 8025f6a:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8025f6c:	6878      	ldr	r0, [r7, #4]
 8025f6e:	f7fe fac3 	bl	80244f8 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8025f72:	4622      	mov	r2, r4
 8025f74:	68f9      	ldr	r1, [r7, #12]
 8025f76:	6878      	ldr	r0, [r7, #4]
 8025f78:	f7fe fee0 	bl	8024d3c <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 8025f7c:	bf00      	nop
 8025f7e:	3714      	adds	r7, #20
 8025f80:	46bd      	mov	sp, r7
 8025f82:	bd90      	pop	{r4, r7, pc}

08025f84 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>:
  //  copies [first2, last2) into
  //  [result, result + (last1 - first1) + (last2 - first2)).
  template<typename _InputIterator1, typename _InputIterator2,
	   typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
 8025f84:	b590      	push	{r4, r7, lr}
 8025f86:	b0a3      	sub	sp, #140	; 0x8c
 8025f88:	af02      	add	r7, sp, #8
 8025f8a:	60f8      	str	r0, [r7, #12]
 8025f8c:	60b9      	str	r1, [r7, #8]
 8025f8e:	607a      	str	r2, [r7, #4]
 8025f90:	603b      	str	r3, [r7, #0]
			      _InputIterator2 __first2,
			      _InputIterator2 __last2,
			      _ForwardIterator __result,
			      _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 8025f92:	f107 0320 	add.w	r3, r7, #32
 8025f96:	68b9      	ldr	r1, [r7, #8]
 8025f98:	4618      	mov	r0, r3
 8025f9a:	f7fe f912 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8025fa2:	6879      	ldr	r1, [r7, #4]
 8025fa4:	4618      	mov	r0, r3
 8025fa6:	f7fe f90c 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025faa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025fae:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8025fb2:	4618      	mov	r0, r3
 8025fb4:	f7fe f905 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025fb8:	f107 0010 	add.w	r0, r7, #16
 8025fbc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8025fc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8025fc4:	f107 0120 	add.w	r1, r7, #32
 8025fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8025fcc:	9300      	str	r3, [sp, #0]
 8025fce:	4623      	mov	r3, r4
 8025fd0:	f7ff ff56 	bl	8025e80 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
							   __result,
							   __alloc);
      __try
	{
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 8025fd4:	f107 0210 	add.w	r2, r7, #16
 8025fd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8025fdc:	4611      	mov	r1, r2
 8025fde:	4618      	mov	r0, r3
 8025fe0:	f7fe f8ef 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025fe4:	68f8      	ldr	r0, [r7, #12]
 8025fe6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8025fea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8025fee:	9300      	str	r3, [sp, #0]
 8025ff0:	4613      	mov	r3, r2
 8025ff2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8025ff6:	6839      	ldr	r1, [r7, #0]
 8025ff8:	f7fe ff1c 	bl	8024e34 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
      __catch(...)
	{
	  std::_Destroy(__result, __mid, __alloc);
	  __throw_exception_again;
	}
    }
 8025ffc:	68f8      	ldr	r0, [r7, #12]
 8025ffe:	3784      	adds	r7, #132	; 0x84
 8026000:	46bd      	mov	sp, r7
 8026002:	bd90      	pop	{r4, r7, pc}

08026004 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026004:	b580      	push	{r7, lr}
 8026006:	b098      	sub	sp, #96	; 0x60
 8026008:	af00      	add	r7, sp, #0
 802600a:	60f8      	str	r0, [r7, #12]
 802600c:	60b9      	str	r1, [r7, #8]
 802600e:	607a      	str	r2, [r7, #4]
 8026010:	603b      	str	r3, [r7, #0]
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
					       std::__miter_base(__last),
					       __result);
 8026012:	f107 0320 	add.w	r3, r7, #32
 8026016:	68b9      	ldr	r1, [r7, #8]
 8026018:	4618      	mov	r0, r3
 802601a:	f7fe f8d2 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802601e:	f107 0310 	add.w	r3, r7, #16
 8026022:	f107 0220 	add.w	r2, r7, #32
 8026026:	4611      	mov	r1, r2
 8026028:	4618      	mov	r0, r3
 802602a:	f000 fbc4 	bl	80267b6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802602e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026032:	6879      	ldr	r1, [r7, #4]
 8026034:	4618      	mov	r0, r3
 8026036:	f7fe f8c4 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802603a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802603e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026042:	4611      	mov	r1, r2
 8026044:	4618      	mov	r0, r3
 8026046:	f000 fbb6 	bl	80267b6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802604a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802604e:	6839      	ldr	r1, [r7, #0]
 8026050:	4618      	mov	r0, r3
 8026052:	f7fe f8b6 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026056:	68f8      	ldr	r0, [r7, #12]
 8026058:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802605c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026060:	f107 0110 	add.w	r1, r7, #16
 8026064:	f000 fbfa 	bl	802685c <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8026068:	68f8      	ldr	r0, [r7, #12]
 802606a:	3760      	adds	r7, #96	; 0x60
 802606c:	46bd      	mov	sp, r7
 802606e:	bd80      	pop	{r7, pc}

08026070 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 8026070:	b590      	push	{r4, r7, lr}
 8026072:	b0a3      	sub	sp, #140	; 0x8c
 8026074:	af02      	add	r7, sp, #8
 8026076:	60f8      	str	r0, [r7, #12]
 8026078:	60b9      	str	r1, [r7, #8]
 802607a:	607a      	str	r2, [r7, #4]
 802607c:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 802607e:	f107 0320 	add.w	r3, r7, #32
 8026082:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8026086:	4618      	mov	r0, r3
 8026088:	f7fe f89b 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802608c:	f107 0010 	add.w	r0, r7, #16
 8026090:	f107 0220 	add.w	r2, r7, #32
 8026094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8026098:	9300      	str	r3, [sp, #0]
 802609a:	4613      	mov	r3, r2
 802609c:	687a      	ldr	r2, [r7, #4]
 802609e:	68b9      	ldr	r1, [r7, #8]
 80260a0:	f7fe fec8 	bl	8024e34 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 80260a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80260a8:	6839      	ldr	r1, [r7, #0]
 80260aa:	4618      	mov	r0, r3
 80260ac:	f7fe f889 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80260b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80260b8:	4618      	mov	r0, r3
 80260ba:	f7fe f882 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260be:	f107 0210 	add.w	r2, r7, #16
 80260c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80260c6:	4611      	mov	r1, r2
 80260c8:	4618      	mov	r0, r3
 80260ca:	f7fe f87a 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260ce:	68f8      	ldr	r0, [r7, #12]
 80260d0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80260d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80260d8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80260dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80260e0:	9300      	str	r3, [sp, #0]
 80260e2:	4623      	mov	r3, r4
 80260e4:	f7ff fecc 	bl	8025e80 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
    }
 80260e8:	68f8      	ldr	r0, [r7, #12]
 80260ea:	3784      	adds	r7, #132	; 0x84
 80260ec:	46bd      	mov	sp, r7
 80260ee:	bd90      	pop	{r4, r7, pc}

080260f0 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80260f0:	b580      	push	{r7, lr}
 80260f2:	b082      	sub	sp, #8
 80260f4:	af00      	add	r7, sp, #0
 80260f6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80260f8:	6878      	ldr	r0, [r7, #4]
 80260fa:	f000 fbf5 	bl	80268e8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>
 80260fe:	4603      	mov	r3, r0
      }
 8026100:	4618      	mov	r0, r3
 8026102:	3708      	adds	r7, #8
 8026104:	46bd      	mov	sp, r7
 8026106:	bd80      	pop	{r7, pc}

08026108 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8026108:	b480      	push	{r7}
 802610a:	b083      	sub	sp, #12
 802610c:	af00      	add	r7, sp, #0
 802610e:	6078      	str	r0, [r7, #4]
 8026110:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8026112:	683b      	ldr	r3, [r7, #0]
 8026114:	681a      	ldr	r2, [r3, #0]
 8026116:	687b      	ldr	r3, [r7, #4]
 8026118:	681b      	ldr	r3, [r3, #0]
 802611a:	429a      	cmp	r2, r3
 802611c:	d201      	bcs.n	8026122 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 802611e:	683b      	ldr	r3, [r7, #0]
 8026120:	e000      	b.n	8026124 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8026122:	687b      	ldr	r3, [r7, #4]
    }
 8026124:	4618      	mov	r0, r3
 8026126:	370c      	adds	r7, #12
 8026128:	46bd      	mov	sp, r7
 802612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802612e:	4770      	bx	lr

08026130 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8026130:	b590      	push	{r4, r7, lr}
 8026132:	b085      	sub	sp, #20
 8026134:	af00      	add	r7, sp, #0
 8026136:	60f8      	str	r0, [r7, #12]
 8026138:	60b9      	str	r1, [r7, #8]
 802613a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802613c:	68f8      	ldr	r0, [r7, #12]
 802613e:	f000 fbdf 	bl	8026900 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026142:	4604      	mov	r4, r0
 8026144:	68b8      	ldr	r0, [r7, #8]
 8026146:	f000 fbdb 	bl	8026900 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802614a:	4603      	mov	r3, r0
 802614c:	687a      	ldr	r2, [r7, #4]
 802614e:	4619      	mov	r1, r3
 8026150:	4620      	mov	r0, r4
 8026152:	f000 fbe0 	bl	8026916 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026156:	4603      	mov	r3, r0
    }
 8026158:	4618      	mov	r0, r3
 802615a:	3714      	adds	r7, #20
 802615c:	46bd      	mov	sp, r7
 802615e:	bd90      	pop	{r4, r7, pc}

08026160 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026160:	b590      	push	{r4, r7, lr}
 8026162:	b085      	sub	sp, #20
 8026164:	af00      	add	r7, sp, #0
 8026166:	60f8      	str	r0, [r7, #12]
 8026168:	60b9      	str	r1, [r7, #8]
 802616a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802616c:	68f8      	ldr	r0, [r7, #12]
 802616e:	f000 fbc7 	bl	8026900 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026172:	4604      	mov	r4, r0
 8026174:	68b8      	ldr	r0, [r7, #8]
 8026176:	f000 fbc3 	bl	8026900 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802617a:	4603      	mov	r3, r0
 802617c:	687a      	ldr	r2, [r7, #4]
 802617e:	4619      	mov	r1, r3
 8026180:	4620      	mov	r0, r4
 8026182:	f000 fbeb 	bl	802695c <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026186:	4603      	mov	r3, r0
    }
 8026188:	4618      	mov	r0, r3
 802618a:	3714      	adds	r7, #20
 802618c:	46bd      	mov	sp, r7
 802618e:	bd90      	pop	{r4, r7, pc}

08026190 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026190:	b580      	push	{r7, lr}
 8026192:	b084      	sub	sp, #16
 8026194:	af00      	add	r7, sp, #0
 8026196:	60f8      	str	r0, [r7, #12]
 8026198:	60b9      	str	r1, [r7, #8]
 802619a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802619c:	68f8      	ldr	r0, [r7, #12]
 802619e:	f000 fc01 	bl	80269a4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 80261a2:	4602      	mov	r2, r0
 80261a4:	68bb      	ldr	r3, [r7, #8]
 80261a6:	4293      	cmp	r3, r2
 80261a8:	bf8c      	ite	hi
 80261aa:	2301      	movhi	r3, #1
 80261ac:	2300      	movls	r3, #0
 80261ae:	b2db      	uxtb	r3, r3
 80261b0:	2b00      	cmp	r3, #0
 80261b2:	d001      	beq.n	80261b8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80261b4:	f015 fcc9 	bl	803bb4a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80261b8:	68ba      	ldr	r2, [r7, #8]
 80261ba:	4613      	mov	r3, r2
 80261bc:	009b      	lsls	r3, r3, #2
 80261be:	4413      	add	r3, r2
 80261c0:	009b      	lsls	r3, r3, #2
 80261c2:	4618      	mov	r0, r3
 80261c4:	f015 fcb0 	bl	803bb28 <_Znwj>
 80261c8:	4603      	mov	r3, r0
      }
 80261ca:	4618      	mov	r0, r3
 80261cc:	3710      	adds	r7, #16
 80261ce:	46bd      	mov	sp, r7
 80261d0:	bd80      	pop	{r7, pc}

080261d2 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80261d2:	b580      	push	{r7, lr}
 80261d4:	b084      	sub	sp, #16
 80261d6:	af00      	add	r7, sp, #0
 80261d8:	60f8      	str	r0, [r7, #12]
 80261da:	60b9      	str	r1, [r7, #8]
 80261dc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80261de:	687a      	ldr	r2, [r7, #4]
 80261e0:	4613      	mov	r3, r2
 80261e2:	009b      	lsls	r3, r3, #2
 80261e4:	4413      	add	r3, r2
 80261e6:	009b      	lsls	r3, r3, #2
 80261e8:	4619      	mov	r1, r3
 80261ea:	68b8      	ldr	r0, [r7, #8]
 80261ec:	f015 fc9a 	bl	803bb24 <_ZdlPvj>
      }
 80261f0:	bf00      	nop
 80261f2:	3710      	adds	r7, #16
 80261f4:	46bd      	mov	sp, r7
 80261f6:	bd80      	pop	{r7, pc}

080261f8 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80261f8:	b580      	push	{r7, lr}
 80261fa:	b082      	sub	sp, #8
 80261fc:	af00      	add	r7, sp, #0
 80261fe:	6078      	str	r0, [r7, #4]
 8026200:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8026202:	f000 f8eb 	bl	80263dc <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 8026206:	4603      	mov	r3, r0
 8026208:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 802620a:	687b      	ldr	r3, [r7, #4]
 802620c:	68da      	ldr	r2, [r3, #12]
 802620e:	683b      	ldr	r3, [r7, #0]
 8026210:	68db      	ldr	r3, [r3, #12]
 8026212:	1ad3      	subs	r3, r2, r3
 8026214:	109b      	asrs	r3, r3, #2
 8026216:	3b01      	subs	r3, #1
 8026218:	fb01 f303 	mul.w	r3, r1, r3
 802621c:	687a      	ldr	r2, [r7, #4]
 802621e:	6811      	ldr	r1, [r2, #0]
 8026220:	687a      	ldr	r2, [r7, #4]
 8026222:	6852      	ldr	r2, [r2, #4]
 8026224:	1a8a      	subs	r2, r1, r2
 8026226:	1092      	asrs	r2, r2, #2
 8026228:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 802622a:	683a      	ldr	r2, [r7, #0]
 802622c:	6891      	ldr	r1, [r2, #8]
 802622e:	683a      	ldr	r2, [r7, #0]
 8026230:	6812      	ldr	r2, [r2, #0]
 8026232:	1a8a      	subs	r2, r1, r2
 8026234:	1092      	asrs	r2, r2, #2
 8026236:	4413      	add	r3, r2
      }
 8026238:	4618      	mov	r0, r3
 802623a:	3708      	adds	r7, #8
 802623c:	46bd      	mov	sp, r7
 802623e:	bd80      	pop	{r7, pc}

08026240 <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8026240:	b580      	push	{r7, lr}
 8026242:	b084      	sub	sp, #16
 8026244:	af00      	add	r7, sp, #0
 8026246:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8026248:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802624c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 802624e:	6878      	ldr	r0, [r7, #4]
 8026250:	f000 fbb6 	bl	80269c0 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>
 8026254:	4603      	mov	r3, r0
 8026256:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8026258:	f107 0208 	add.w	r2, r7, #8
 802625c:	f107 030c 	add.w	r3, r7, #12
 8026260:	4611      	mov	r1, r2
 8026262:	4618      	mov	r0, r3
 8026264:	f7ff ff50 	bl	8026108 <_ZSt3minIjERKT_S2_S2_>
 8026268:	4603      	mov	r3, r0
 802626a:	681b      	ldr	r3, [r3, #0]
      }
 802626c:	4618      	mov	r0, r3
 802626e:	3710      	adds	r7, #16
 8026270:	46bd      	mov	sp, r7
 8026272:	bd80      	pop	{r7, pc}

08026274 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8026274:	b480      	push	{r7}
 8026276:	b083      	sub	sp, #12
 8026278:	af00      	add	r7, sp, #0
 802627a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802627c:	687b      	ldr	r3, [r7, #4]
 802627e:	4618      	mov	r0, r3
 8026280:	370c      	adds	r7, #12
 8026282:	46bd      	mov	sp, r7
 8026284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026288:	4770      	bx	lr

0802628a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 802628a:	b590      	push	{r4, r7, lr}
 802628c:	b08b      	sub	sp, #44	; 0x2c
 802628e:	af00      	add	r7, sp, #0
 8026290:	60f8      	str	r0, [r7, #12]
 8026292:	60b9      	str	r1, [r7, #8]
 8026294:	4613      	mov	r3, r2
 8026296:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8026298:	68fb      	ldr	r3, [r7, #12]
 802629a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802629c:	68fb      	ldr	r3, [r7, #12]
 802629e:	695b      	ldr	r3, [r3, #20]
 80262a0:	1ad3      	subs	r3, r2, r3
 80262a2:	109b      	asrs	r3, r3, #2
 80262a4:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80262a6:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80262a8:	68bb      	ldr	r3, [r7, #8]
 80262aa:	6a3a      	ldr	r2, [r7, #32]
 80262ac:	4413      	add	r3, r2
 80262ae:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80262b0:	68fb      	ldr	r3, [r7, #12]
 80262b2:	685a      	ldr	r2, [r3, #4]
 80262b4:	69fb      	ldr	r3, [r7, #28]
 80262b6:	005b      	lsls	r3, r3, #1
 80262b8:	429a      	cmp	r2, r3
 80262ba:	d92d      	bls.n	8026318 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80262bc:	68fb      	ldr	r3, [r7, #12]
 80262be:	681a      	ldr	r2, [r3, #0]
 80262c0:	68fb      	ldr	r3, [r7, #12]
 80262c2:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80262c4:	69fb      	ldr	r3, [r7, #28]
 80262c6:	1acb      	subs	r3, r1, r3
 80262c8:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80262ca:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80262cc:	79fb      	ldrb	r3, [r7, #7]
 80262ce:	2b00      	cmp	r3, #0
 80262d0:	d002      	beq.n	80262d8 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x4e>
 80262d2:	68bb      	ldr	r3, [r7, #8]
 80262d4:	009b      	lsls	r3, r3, #2
 80262d6:	e000      	b.n	80262da <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x50>
 80262d8:	2300      	movs	r3, #0
 80262da:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80262dc:	4413      	add	r3, r2
 80262de:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80262e0:	68fb      	ldr	r3, [r7, #12]
 80262e2:	695b      	ldr	r3, [r3, #20]
 80262e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80262e6:	429a      	cmp	r2, r3
 80262e8:	d209      	bcs.n	80262fe <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80262ea:	68fb      	ldr	r3, [r7, #12]
 80262ec:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80262ee:	68fb      	ldr	r3, [r7, #12]
 80262f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80262f2:	3304      	adds	r3, #4
 80262f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80262f6:	4619      	mov	r1, r3
 80262f8:	f000 fb6e 	bl	80269d8 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
 80262fc:	e048      	b.n	8026390 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80262fe:	68fb      	ldr	r3, [r7, #12]
 8026300:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8026302:	68fb      	ldr	r3, [r7, #12]
 8026304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026306:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8026308:	6a3b      	ldr	r3, [r7, #32]
 802630a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802630c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802630e:	4413      	add	r3, r2
 8026310:	461a      	mov	r2, r3
 8026312:	f000 fb79 	bl	8026a08 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>
 8026316:	e03b      	b.n	8026390 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026318:	68fb      	ldr	r3, [r7, #12]
 802631a:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 802631c:	68fb      	ldr	r3, [r7, #12]
 802631e:	3304      	adds	r3, #4
 8026320:	f107 0208 	add.w	r2, r7, #8
 8026324:	4611      	mov	r1, r2
 8026326:	4618      	mov	r0, r3
 8026328:	f7fe fb68 	bl	80249fc <_ZSt3maxIjERKT_S2_S2_>
 802632c:	4603      	mov	r3, r0
 802632e:	681b      	ldr	r3, [r3, #0]
 8026330:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026332:	3302      	adds	r3, #2
 8026334:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8026336:	68fb      	ldr	r3, [r7, #12]
 8026338:	69b9      	ldr	r1, [r7, #24]
 802633a:	4618      	mov	r0, r3
 802633c:	f7ff fb45 	bl	80259ca <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8026340:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026342:	69ba      	ldr	r2, [r7, #24]
 8026344:	69fb      	ldr	r3, [r7, #28]
 8026346:	1ad3      	subs	r3, r2, r3
 8026348:	085b      	lsrs	r3, r3, #1
 802634a:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802634c:	79fb      	ldrb	r3, [r7, #7]
 802634e:	2b00      	cmp	r3, #0
 8026350:	d002      	beq.n	8026358 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xce>
 8026352:	68bb      	ldr	r3, [r7, #8]
 8026354:	009b      	lsls	r3, r3, #2
 8026356:	e000      	b.n	802635a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xd0>
 8026358:	2300      	movs	r3, #0
 802635a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 802635c:	697a      	ldr	r2, [r7, #20]
 802635e:	4413      	add	r3, r2
 8026360:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026362:	68fb      	ldr	r3, [r7, #12]
 8026364:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8026366:	68fb      	ldr	r3, [r7, #12]
 8026368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 802636a:	3304      	adds	r3, #4
 802636c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802636e:	4619      	mov	r1, r3
 8026370:	f000 fb32 	bl	80269d8 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8026374:	68f8      	ldr	r0, [r7, #12]
 8026376:	68fb      	ldr	r3, [r7, #12]
 8026378:	6819      	ldr	r1, [r3, #0]
 802637a:	68fb      	ldr	r3, [r7, #12]
 802637c:	685b      	ldr	r3, [r3, #4]
 802637e:	461a      	mov	r2, r3
 8026380:	f7fe fc4c 	bl	8024c1c <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
	  this->_M_impl._M_map = __new_map;
 8026384:	68fb      	ldr	r3, [r7, #12]
 8026386:	697a      	ldr	r2, [r7, #20]
 8026388:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 802638a:	68fb      	ldr	r3, [r7, #12]
 802638c:	69ba      	ldr	r2, [r7, #24]
 802638e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8026390:	68fb      	ldr	r3, [r7, #12]
 8026392:	3308      	adds	r3, #8
 8026394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026396:	4618      	mov	r0, r3
 8026398:	f7ff fa33 	bl	8025802 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 802639c:	68fb      	ldr	r3, [r7, #12]
 802639e:	f103 0018 	add.w	r0, r3, #24
 80263a2:	6a3a      	ldr	r2, [r7, #32]
 80263a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80263a8:	4413      	add	r3, r2
 80263aa:	009b      	lsls	r3, r3, #2
 80263ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80263ae:	4413      	add	r3, r2
 80263b0:	4619      	mov	r1, r3
 80263b2:	f7ff fa26 	bl	8025802 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
    }
 80263b6:	bf00      	nop
 80263b8:	372c      	adds	r7, #44	; 0x2c
 80263ba:	46bd      	mov	sp, r7
 80263bc:	bd90      	pop	{r4, r7, pc}

080263be <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80263be:	b580      	push	{r7, lr}
 80263c0:	b082      	sub	sp, #8
 80263c2:	af00      	add	r7, sp, #0
 80263c4:	6078      	str	r0, [r7, #4]
 80263c6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80263c8:	2200      	movs	r2, #0
 80263ca:	6839      	ldr	r1, [r7, #0]
 80263cc:	6878      	ldr	r0, [r7, #4]
 80263ce:	f000 fb33 	bl	8026a38 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>
 80263d2:	4603      	mov	r3, r0
 80263d4:	4618      	mov	r0, r3
 80263d6:	3708      	adds	r7, #8
 80263d8:	46bd      	mov	sp, r7
 80263da:	bd80      	pop	{r7, pc}

080263dc <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80263dc:	b580      	push	{r7, lr}
 80263de:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80263e0:	2004      	movs	r0, #4
 80263e2:	f7fa fd71 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80263e6:	4603      	mov	r3, r0
 80263e8:	4618      	mov	r0, r3
 80263ea:	bd80      	pop	{r7, pc}

080263ec <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80263ec:	b580      	push	{r7, lr}
 80263ee:	b084      	sub	sp, #16
 80263f0:	af00      	add	r7, sp, #0
 80263f2:	60f8      	str	r0, [r7, #12]
 80263f4:	60b9      	str	r1, [r7, #8]
 80263f6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80263f8:	687a      	ldr	r2, [r7, #4]
 80263fa:	68b9      	ldr	r1, [r7, #8]
 80263fc:	68f8      	ldr	r0, [r7, #12]
 80263fe:	f000 fb39 	bl	8026a74 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>
 8026402:	bf00      	nop
 8026404:	3710      	adds	r7, #16
 8026406:	46bd      	mov	sp, r7
 8026408:	bd80      	pop	{r7, pc}

0802640a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802640a:	b580      	push	{r7, lr}
 802640c:	b084      	sub	sp, #16
 802640e:	af00      	add	r7, sp, #0
 8026410:	60f8      	str	r0, [r7, #12]
 8026412:	60b9      	str	r1, [r7, #8]
 8026414:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026416:	68f8      	ldr	r0, [r7, #12]
 8026418:	f000 fb3c 	bl	8026a94 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 802641c:	4602      	mov	r2, r0
 802641e:	68bb      	ldr	r3, [r7, #8]
 8026420:	4293      	cmp	r3, r2
 8026422:	bf8c      	ite	hi
 8026424:	2301      	movhi	r3, #1
 8026426:	2300      	movls	r3, #0
 8026428:	b2db      	uxtb	r3, r3
 802642a:	2b00      	cmp	r3, #0
 802642c:	d001      	beq.n	8026432 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 802642e:	f015 fb8c 	bl	803bb4a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026432:	68bb      	ldr	r3, [r7, #8]
 8026434:	009b      	lsls	r3, r3, #2
 8026436:	4618      	mov	r0, r3
 8026438:	f015 fb76 	bl	803bb28 <_Znwj>
 802643c:	4603      	mov	r3, r0
      }
 802643e:	4618      	mov	r0, r3
 8026440:	3710      	adds	r7, #16
 8026442:	46bd      	mov	sp, r7
 8026444:	bd80      	pop	{r7, pc}

08026446 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026446:	b480      	push	{r7}
 8026448:	b083      	sub	sp, #12
 802644a:	af00      	add	r7, sp, #0
 802644c:	6078      	str	r0, [r7, #4]
 802644e:	687b      	ldr	r3, [r7, #4]
 8026450:	4618      	mov	r0, r3
 8026452:	370c      	adds	r7, #12
 8026454:	46bd      	mov	sp, r7
 8026456:	f85d 7b04 	ldr.w	r7, [sp], #4
 802645a:	4770      	bx	lr

0802645c <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>:
 802645c:	b480      	push	{r7}
 802645e:	b083      	sub	sp, #12
 8026460:	af00      	add	r7, sp, #0
 8026462:	6078      	str	r0, [r7, #4]
 8026464:	687b      	ldr	r3, [r7, #4]
 8026466:	4618      	mov	r0, r3
 8026468:	370c      	adds	r7, #12
 802646a:	46bd      	mov	sp, r7
 802646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026470:	4770      	bx	lr

08026472 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8026472:	b480      	push	{r7}
 8026474:	b083      	sub	sp, #12
 8026476:	af00      	add	r7, sp, #0
 8026478:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 802647a:	687b      	ldr	r3, [r7, #4]
 802647c:	2200      	movs	r2, #0
 802647e:	601a      	str	r2, [r3, #0]
 8026480:	687b      	ldr	r3, [r7, #4]
 8026482:	2200      	movs	r2, #0
 8026484:	605a      	str	r2, [r3, #4]
 8026486:	687b      	ldr	r3, [r7, #4]
 8026488:	2200      	movs	r2, #0
 802648a:	609a      	str	r2, [r3, #8]
 802648c:	687b      	ldr	r3, [r7, #4]
 802648e:	2200      	movs	r2, #0
 8026490:	60da      	str	r2, [r3, #12]
 8026492:	687b      	ldr	r3, [r7, #4]
 8026494:	4618      	mov	r0, r3
 8026496:	370c      	adds	r7, #12
 8026498:	46bd      	mov	sp, r7
 802649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802649e:	4770      	bx	lr

080264a0 <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80264a0:	b580      	push	{r7, lr}
 80264a2:	b082      	sub	sp, #8
 80264a4:	af00      	add	r7, sp, #0
 80264a6:	6078      	str	r0, [r7, #4]
 80264a8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80264aa:	2200      	movs	r2, #0
 80264ac:	6839      	ldr	r1, [r7, #0]
 80264ae:	6878      	ldr	r0, [r7, #4]
 80264b0:	f000 fafc 	bl	8026aac <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>
 80264b4:	4603      	mov	r3, r0
 80264b6:	4618      	mov	r0, r3
 80264b8:	3708      	adds	r7, #8
 80264ba:	46bd      	mov	sp, r7
 80264bc:	bd80      	pop	{r7, pc}

080264be <_ZNSaIPjEC1IjEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80264be:	b580      	push	{r7, lr}
 80264c0:	b082      	sub	sp, #8
 80264c2:	af00      	add	r7, sp, #0
 80264c4:	6078      	str	r0, [r7, #4]
 80264c6:	6039      	str	r1, [r7, #0]
 80264c8:	6878      	ldr	r0, [r7, #4]
 80264ca:	f000 fb0d 	bl	8026ae8 <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>
 80264ce:	687b      	ldr	r3, [r7, #4]
 80264d0:	4618      	mov	r0, r3
 80264d2:	3708      	adds	r7, #8
 80264d4:	46bd      	mov	sp, r7
 80264d6:	bd80      	pop	{r7, pc}

080264d8 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80264d8:	b480      	push	{r7}
 80264da:	b083      	sub	sp, #12
 80264dc:	af00      	add	r7, sp, #0
 80264de:	6078      	str	r0, [r7, #4]
 80264e0:	687b      	ldr	r3, [r7, #4]
 80264e2:	4618      	mov	r0, r3
 80264e4:	370c      	adds	r7, #12
 80264e6:	46bd      	mov	sp, r7
 80264e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264ec:	4770      	bx	lr

080264ee <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80264ee:	b580      	push	{r7, lr}
 80264f0:	b084      	sub	sp, #16
 80264f2:	af00      	add	r7, sp, #0
 80264f4:	60f8      	str	r0, [r7, #12]
 80264f6:	60b9      	str	r1, [r7, #8]
 80264f8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80264fa:	687b      	ldr	r3, [r7, #4]
 80264fc:	009b      	lsls	r3, r3, #2
 80264fe:	4619      	mov	r1, r3
 8026500:	68b8      	ldr	r0, [r7, #8]
 8026502:	f015 fb0f 	bl	803bb24 <_ZdlPvj>
      }
 8026506:	bf00      	nop
 8026508:	3710      	adds	r7, #16
 802650a:	46bd      	mov	sp, r7
 802650c:	bd80      	pop	{r7, pc}

0802650e <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 802650e:	b480      	push	{r7}
 8026510:	b083      	sub	sp, #12
 8026512:	af00      	add	r7, sp, #0
 8026514:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026516:	687b      	ldr	r3, [r7, #4]
 8026518:	4618      	mov	r0, r3
 802651a:	370c      	adds	r7, #12
 802651c:	46bd      	mov	sp, r7
 802651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026522:	4770      	bx	lr

08026524 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8026524:	b580      	push	{r7, lr}
 8026526:	b082      	sub	sp, #8
 8026528:	af00      	add	r7, sp, #0
 802652a:	6078      	str	r0, [r7, #4]
 802652c:	6039      	str	r1, [r7, #0]
 802652e:	683b      	ldr	r3, [r7, #0]
 8026530:	681a      	ldr	r2, [r3, #0]
 8026532:	687b      	ldr	r3, [r7, #4]
 8026534:	601a      	str	r2, [r3, #0]
 8026536:	683b      	ldr	r3, [r7, #0]
 8026538:	685a      	ldr	r2, [r3, #4]
 802653a:	687b      	ldr	r3, [r7, #4]
 802653c:	605a      	str	r2, [r3, #4]
 802653e:	687b      	ldr	r3, [r7, #4]
 8026540:	f103 0208 	add.w	r2, r3, #8
 8026544:	683b      	ldr	r3, [r7, #0]
 8026546:	3308      	adds	r3, #8
 8026548:	4619      	mov	r1, r3
 802654a:	4610      	mov	r0, r2
 802654c:	f7fd fe39 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026550:	687b      	ldr	r3, [r7, #4]
 8026552:	f103 0218 	add.w	r2, r3, #24
 8026556:	683b      	ldr	r3, [r7, #0]
 8026558:	3318      	adds	r3, #24
 802655a:	4619      	mov	r1, r3
 802655c:	4610      	mov	r0, r2
 802655e:	f7fd fe30 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026562:	687b      	ldr	r3, [r7, #4]
 8026564:	4618      	mov	r0, r3
 8026566:	3708      	adds	r7, #8
 8026568:	46bd      	mov	sp, r7
 802656a:	bd80      	pop	{r7, pc}

0802656c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 802656c:	b5b0      	push	{r4, r5, r7, lr}
 802656e:	b08c      	sub	sp, #48	; 0x30
 8026570:	af00      	add	r7, sp, #0
 8026572:	6078      	str	r0, [r7, #4]
 8026574:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8026576:	6839      	ldr	r1, [r7, #0]
 8026578:	6878      	ldr	r0, [r7, #4]
 802657a:	f7ff ffd3 	bl	8026524 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>
	{ __x = _Deque_impl_data(); }
 802657e:	f107 0308 	add.w	r3, r7, #8
 8026582:	4618      	mov	r0, r3
 8026584:	f7fe fa16 	bl	80249b4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
 8026588:	683b      	ldr	r3, [r7, #0]
 802658a:	461d      	mov	r5, r3
 802658c:	f107 0408 	add.w	r4, r7, #8
 8026590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026598:	e894 0003 	ldmia.w	r4, {r0, r1}
 802659c:	e885 0003 	stmia.w	r5, {r0, r1}
 80265a0:	687b      	ldr	r3, [r7, #4]
 80265a2:	4618      	mov	r0, r3
 80265a4:	3730      	adds	r7, #48	; 0x30
 80265a6:	46bd      	mov	sp, r7
 80265a8:	bdb0      	pop	{r4, r5, r7, pc}

080265aa <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80265aa:	b480      	push	{r7}
 80265ac:	b083      	sub	sp, #12
 80265ae:	af00      	add	r7, sp, #0
 80265b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80265b2:	687b      	ldr	r3, [r7, #4]
 80265b4:	4618      	mov	r0, r3
 80265b6:	370c      	adds	r7, #12
 80265b8:	46bd      	mov	sp, r7
 80265ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265be:	4770      	bx	lr

080265c0 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80265c0:	b480      	push	{r7}
 80265c2:	b083      	sub	sp, #12
 80265c4:	af00      	add	r7, sp, #0
 80265c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80265c8:	687b      	ldr	r3, [r7, #4]
 80265ca:	4618      	mov	r0, r3
 80265cc:	370c      	adds	r7, #12
 80265ce:	46bd      	mov	sp, r7
 80265d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265d4:	4770      	bx	lr

080265d6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 80265d6:	b580      	push	{r7, lr}
 80265d8:	b082      	sub	sp, #8
 80265da:	af00      	add	r7, sp, #0
 80265dc:	6078      	str	r0, [r7, #4]
 80265de:	6039      	str	r1, [r7, #0]
 80265e0:	683b      	ldr	r3, [r7, #0]
 80265e2:	681a      	ldr	r2, [r3, #0]
 80265e4:	687b      	ldr	r3, [r7, #4]
 80265e6:	601a      	str	r2, [r3, #0]
 80265e8:	683b      	ldr	r3, [r7, #0]
 80265ea:	685a      	ldr	r2, [r3, #4]
 80265ec:	687b      	ldr	r3, [r7, #4]
 80265ee:	605a      	str	r2, [r3, #4]
 80265f0:	687b      	ldr	r3, [r7, #4]
 80265f2:	f103 0208 	add.w	r2, r3, #8
 80265f6:	683b      	ldr	r3, [r7, #0]
 80265f8:	3308      	adds	r3, #8
 80265fa:	4619      	mov	r1, r3
 80265fc:	4610      	mov	r0, r2
 80265fe:	f7fd fe71 	bl	80242e4 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8026602:	687b      	ldr	r3, [r7, #4]
 8026604:	f103 0218 	add.w	r2, r3, #24
 8026608:	683b      	ldr	r3, [r7, #0]
 802660a:	3318      	adds	r3, #24
 802660c:	4619      	mov	r1, r3
 802660e:	4610      	mov	r0, r2
 8026610:	f7fd fe68 	bl	80242e4 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8026614:	687b      	ldr	r3, [r7, #4]
 8026616:	4618      	mov	r0, r3
 8026618:	3708      	adds	r7, #8
 802661a:	46bd      	mov	sp, r7
 802661c:	bd80      	pop	{r7, pc}

0802661e <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 802661e:	b5b0      	push	{r4, r5, r7, lr}
 8026620:	b08c      	sub	sp, #48	; 0x30
 8026622:	af00      	add	r7, sp, #0
 8026624:	6078      	str	r0, [r7, #4]
 8026626:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8026628:	6839      	ldr	r1, [r7, #0]
 802662a:	6878      	ldr	r0, [r7, #4]
 802662c:	f7ff ffd3 	bl	80265d6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 8026630:	f107 0308 	add.w	r3, r7, #8
 8026634:	4618      	mov	r0, r3
 8026636:	f7ff f9a4 	bl	8025982 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
 802663a:	683b      	ldr	r3, [r7, #0]
 802663c:	461d      	mov	r5, r3
 802663e:	f107 0408 	add.w	r4, r7, #8
 8026642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802664a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802664e:	e885 0003 	stmia.w	r5, {r0, r1}
 8026652:	687b      	ldr	r3, [r7, #4]
 8026654:	4618      	mov	r0, r3
 8026656:	3730      	adds	r7, #48	; 0x30
 8026658:	46bd      	mov	sp, r7
 802665a:	bdb0      	pop	{r4, r5, r7, pc}

0802665c <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 802665c:	b480      	push	{r7}
 802665e:	b083      	sub	sp, #12
 8026660:	af00      	add	r7, sp, #0
 8026662:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026664:	687b      	ldr	r3, [r7, #4]
 8026666:	4618      	mov	r0, r3
 8026668:	370c      	adds	r7, #12
 802666a:	46bd      	mov	sp, r7
 802666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026670:	4770      	bx	lr

08026672 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8026672:	b580      	push	{r7, lr}
 8026674:	b084      	sub	sp, #16
 8026676:	af00      	add	r7, sp, #0
 8026678:	60f8      	str	r0, [r7, #12]
 802667a:	60b9      	str	r1, [r7, #8]
 802667c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802667e:	687a      	ldr	r2, [r7, #4]
 8026680:	68b9      	ldr	r1, [r7, #8]
 8026682:	68f8      	ldr	r0, [r7, #12]
 8026684:	f000 fa3b 	bl	8026afe <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
 8026688:	4603      	mov	r3, r0
 802668a:	4618      	mov	r0, r3
 802668c:	3710      	adds	r7, #16
 802668e:	46bd      	mov	sp, r7
 8026690:	bd80      	pop	{r7, pc}

08026692 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 8026692:	b580      	push	{r7, lr}
 8026694:	b082      	sub	sp, #8
 8026696:	af00      	add	r7, sp, #0
 8026698:	6078      	str	r0, [r7, #4]
 802669a:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 802669c:	683b      	ldr	r3, [r7, #0]
 802669e:	425b      	negs	r3, r3
 80266a0:	4619      	mov	r1, r3
 80266a2:	6878      	ldr	r0, [r7, #4]
 80266a4:	f7fe ffd8 	bl	8025658 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
 80266a8:	4603      	mov	r3, r0
 80266aa:	4618      	mov	r0, r3
 80266ac:	3708      	adds	r7, #8
 80266ae:	46bd      	mov	sp, r7
 80266b0:	bd80      	pop	{r7, pc}

080266b2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80266b2:	b580      	push	{r7, lr}
 80266b4:	b088      	sub	sp, #32
 80266b6:	af00      	add	r7, sp, #0
 80266b8:	60f8      	str	r0, [r7, #12]
 80266ba:	60b9      	str	r1, [r7, #8]
 80266bc:	607a      	str	r2, [r7, #4]
 80266be:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 80266c0:	f107 0310 	add.w	r3, r7, #16
 80266c4:	6839      	ldr	r1, [r7, #0]
 80266c6:	4618      	mov	r0, r3
 80266c8:	f7fd fd7b 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80266cc:	68f8      	ldr	r0, [r7, #12]
 80266ce:	f107 0310 	add.w	r3, r7, #16
 80266d2:	687a      	ldr	r2, [r7, #4]
 80266d4:	68b9      	ldr	r1, [r7, #8]
 80266d6:	f7fd feef 	bl	80244b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 80266da:	68f8      	ldr	r0, [r7, #12]
 80266dc:	3720      	adds	r7, #32
 80266de:	46bd      	mov	sp, r7
 80266e0:	bd80      	pop	{r7, pc}

080266e2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80266e2:	b580      	push	{r7, lr}
 80266e4:	b082      	sub	sp, #8
 80266e6:	af00      	add	r7, sp, #0
 80266e8:	6078      	str	r0, [r7, #4]
 80266ea:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80266ec:	683b      	ldr	r3, [r7, #0]
 80266ee:	1c5a      	adds	r2, r3, #1
 80266f0:	687b      	ldr	r3, [r7, #4]
 80266f2:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80266f4:	6879      	ldr	r1, [r7, #4]
 80266f6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80266f8:	6879      	ldr	r1, [r7, #4]
 80266fa:	6809      	ldr	r1, [r1, #0]
 80266fc:	1a41      	subs	r1, r0, r1
 80266fe:	1089      	asrs	r1, r1, #2
 8026700:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8026702:	429a      	cmp	r2, r3
 8026704:	d904      	bls.n	8026710 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8026706:	2200      	movs	r2, #0
 8026708:	6839      	ldr	r1, [r7, #0]
 802670a:	6878      	ldr	r0, [r7, #4]
 802670c:	f7fe feec 	bl	80254e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8026710:	bf00      	nop
 8026712:	3708      	adds	r7, #8
 8026714:	46bd      	mov	sp, r7
 8026716:	bd80      	pop	{r7, pc}

08026718 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>:
	      const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
 8026718:	b580      	push	{r7, lr}
 802671a:	b086      	sub	sp, #24
 802671c:	af00      	add	r7, sp, #0
 802671e:	6078      	str	r0, [r7, #4]
 8026720:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8026722:	6838      	ldr	r0, [r7, #0]
 8026724:	f000 f9fb 	bl	8026b1e <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8026728:	4602      	mov	r2, r0
 802672a:	f107 0308 	add.w	r3, r7, #8
 802672e:	4611      	mov	r1, r2
 8026730:	4618      	mov	r0, r3
 8026732:	f7fd fd46 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026736:	f107 0308 	add.w	r3, r7, #8
 802673a:	4619      	mov	r1, r3
 802673c:	6878      	ldr	r0, [r7, #4]
 802673e:	f000 f9f9 	bl	8026b34 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>
 8026742:	6878      	ldr	r0, [r7, #4]
 8026744:	3718      	adds	r7, #24
 8026746:	46bd      	mov	sp, r7
 8026748:	bd80      	pop	{r7, pc}

0802674a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>:
    class move_iterator
 802674a:	b580      	push	{r7, lr}
 802674c:	b082      	sub	sp, #8
 802674e:	af00      	add	r7, sp, #0
 8026750:	6078      	str	r0, [r7, #4]
 8026752:	6039      	str	r1, [r7, #0]
 8026754:	687b      	ldr	r3, [r7, #4]
 8026756:	683a      	ldr	r2, [r7, #0]
 8026758:	4611      	mov	r1, r2
 802675a:	4618      	mov	r0, r3
 802675c:	f7fd fd31 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026760:	687b      	ldr	r3, [r7, #4]
 8026762:	4618      	mov	r0, r3
 8026764:	3708      	adds	r7, #8
 8026766:	46bd      	mov	sp, r7
 8026768:	bd80      	pop	{r7, pc}

0802676a <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 802676a:	b580      	push	{r7, lr}
 802676c:	b090      	sub	sp, #64	; 0x40
 802676e:	af00      	add	r7, sp, #0
 8026770:	60f8      	str	r0, [r7, #12]
 8026772:	60b9      	str	r1, [r7, #8]
 8026774:	607a      	str	r2, [r7, #4]
 8026776:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8026778:	f107 0310 	add.w	r3, r7, #16
 802677c:	68b9      	ldr	r1, [r7, #8]
 802677e:	4618      	mov	r0, r3
 8026780:	f7ff ffe3 	bl	802674a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026784:	f107 0320 	add.w	r3, r7, #32
 8026788:	6879      	ldr	r1, [r7, #4]
 802678a:	4618      	mov	r0, r3
 802678c:	f7ff ffdd 	bl	802674a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026790:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026794:	6839      	ldr	r1, [r7, #0]
 8026796:	4618      	mov	r0, r3
 8026798:	f7fd fd13 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802679c:	68f8      	ldr	r0, [r7, #12]
 802679e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80267a2:	f107 0220 	add.w	r2, r7, #32
 80267a6:	f107 0110 	add.w	r1, r7, #16
 80267aa:	f000 f9d6 	bl	8026b5a <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 80267ae:	68f8      	ldr	r0, [r7, #12]
 80267b0:	3740      	adds	r7, #64	; 0x40
 80267b2:	46bd      	mov	sp, r7
 80267b4:	bd80      	pop	{r7, pc}

080267b6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __miter_base(_Iterator __it)
 80267b6:	b580      	push	{r7, lr}
 80267b8:	b082      	sub	sp, #8
 80267ba:	af00      	add	r7, sp, #0
 80267bc:	6078      	str	r0, [r7, #4]
 80267be:	6039      	str	r1, [r7, #0]
    { return __it; }
 80267c0:	6839      	ldr	r1, [r7, #0]
 80267c2:	6878      	ldr	r0, [r7, #4]
 80267c4:	f7fd fcfd 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80267c8:	6878      	ldr	r0, [r7, #4]
 80267ca:	3708      	adds	r7, #8
 80267cc:	46bd      	mov	sp, r7
 80267ce:	bd80      	pop	{r7, pc}

080267d0 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80267d0:	b580      	push	{r7, lr}
 80267d2:	b0a0      	sub	sp, #128	; 0x80
 80267d4:	af00      	add	r7, sp, #0
 80267d6:	60f8      	str	r0, [r7, #12]
 80267d8:	60b9      	str	r1, [r7, #8]
 80267da:	607a      	str	r2, [r7, #4]
 80267dc:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 80267de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80267e2:	68b9      	ldr	r1, [r7, #8]
 80267e4:	4618      	mov	r0, r3
 80267e6:	f7fd fcec 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80267ea:	f107 0320 	add.w	r3, r7, #32
 80267ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80267f2:	4611      	mov	r1, r2
 80267f4:	4618      	mov	r0, r3
 80267f6:	f7ff fa09 	bl	8025c0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80267fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80267fe:	6879      	ldr	r1, [r7, #4]
 8026800:	4618      	mov	r0, r3
 8026802:	f7fd fcde 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026806:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802680a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802680e:	4611      	mov	r1, r2
 8026810:	4618      	mov	r0, r3
 8026812:	f7ff f9fb 	bl	8025c0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026816:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802681a:	6839      	ldr	r1, [r7, #0]
 802681c:	4618      	mov	r0, r3
 802681e:	f7fd fcd0 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026822:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026826:	f107 0270 	add.w	r2, r7, #112	; 0x70
 802682a:	4611      	mov	r1, r2
 802682c:	4618      	mov	r0, r3
 802682e:	f7ff f9ed 	bl	8025c0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026832:	f107 0010 	add.w	r0, r7, #16
 8026836:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802683a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802683e:	f107 0120 	add.w	r1, r7, #32
 8026842:	f000 f9b3 	bl	8026bac <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8026846:	68fb      	ldr	r3, [r7, #12]
 8026848:	f107 0210 	add.w	r2, r7, #16
 802684c:	6839      	ldr	r1, [r7, #0]
 802684e:	4618      	mov	r0, r3
 8026850:	f7ff fa50 	bl	8025cf4 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8026854:	68f8      	ldr	r0, [r7, #12]
 8026856:	3780      	adds	r7, #128	; 0x80
 8026858:	46bd      	mov	sp, r7
 802685a:	bd80      	pop	{r7, pc}

0802685c <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 802685c:	b580      	push	{r7, lr}
 802685e:	b0a0      	sub	sp, #128	; 0x80
 8026860:	af00      	add	r7, sp, #0
 8026862:	60f8      	str	r0, [r7, #12]
 8026864:	60b9      	str	r1, [r7, #8]
 8026866:	607a      	str	r2, [r7, #4]
 8026868:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 802686a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802686e:	68b9      	ldr	r1, [r7, #8]
 8026870:	4618      	mov	r0, r3
 8026872:	f7fd fca6 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026876:	f107 0320 	add.w	r3, r7, #32
 802687a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802687e:	4611      	mov	r1, r2
 8026880:	4618      	mov	r0, r3
 8026882:	f7ff f9c3 	bl	8025c0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026886:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802688a:	6879      	ldr	r1, [r7, #4]
 802688c:	4618      	mov	r0, r3
 802688e:	f7fd fc98 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026892:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026896:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802689a:	4611      	mov	r1, r2
 802689c:	4618      	mov	r0, r3
 802689e:	f7ff f9b5 	bl	8025c0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80268a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80268a6:	6839      	ldr	r1, [r7, #0]
 80268a8:	4618      	mov	r0, r3
 80268aa:	f7fd fc8a 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80268ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80268b2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80268b6:	4611      	mov	r1, r2
 80268b8:	4618      	mov	r0, r3
 80268ba:	f7ff f9a7 	bl	8025c0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80268be:	f107 0010 	add.w	r0, r7, #16
 80268c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80268c6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80268ca:	f107 0120 	add.w	r1, r7, #32
 80268ce:	f000 f993 	bl	8026bf8 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 80268d2:	68fb      	ldr	r3, [r7, #12]
 80268d4:	f107 0210 	add.w	r2, r7, #16
 80268d8:	6839      	ldr	r1, [r7, #0]
 80268da:	4618      	mov	r0, r3
 80268dc:	f7ff fa0a 	bl	8025cf4 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 80268e0:	68f8      	ldr	r0, [r7, #12]
 80268e2:	3780      	adds	r7, #128	; 0x80
 80268e4:	46bd      	mov	sp, r7
 80268e6:	bd80      	pop	{r7, pc}

080268e8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80268e8:	b580      	push	{r7, lr}
 80268ea:	b082      	sub	sp, #8
 80268ec:	af00      	add	r7, sp, #0
 80268ee:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80268f0:	6878      	ldr	r0, [r7, #4]
 80268f2:	f000 f857 	bl	80269a4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 80268f6:	4603      	mov	r3, r0
 80268f8:	4618      	mov	r0, r3
 80268fa:	3708      	adds	r7, #8
 80268fc:	46bd      	mov	sp, r7
 80268fe:	bd80      	pop	{r7, pc}

08026900 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8026900:	b480      	push	{r7}
 8026902:	b083      	sub	sp, #12
 8026904:	af00      	add	r7, sp, #0
 8026906:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026908:	687b      	ldr	r3, [r7, #4]
 802690a:	4618      	mov	r0, r3
 802690c:	370c      	adds	r7, #12
 802690e:	46bd      	mov	sp, r7
 8026910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026914:	4770      	bx	lr

08026916 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026916:	b5b0      	push	{r4, r5, r7, lr}
 8026918:	b084      	sub	sp, #16
 802691a:	af00      	add	r7, sp, #0
 802691c:	60f8      	str	r0, [r7, #12]
 802691e:	60b9      	str	r1, [r7, #8]
 8026920:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026922:	68f8      	ldr	r0, [r7, #12]
 8026924:	f000 f98e 	bl	8026c44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026928:	4604      	mov	r4, r0
 802692a:	68b8      	ldr	r0, [r7, #8]
 802692c:	f000 f98a 	bl	8026c44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026930:	4605      	mov	r5, r0
 8026932:	687b      	ldr	r3, [r7, #4]
 8026934:	4618      	mov	r0, r3
 8026936:	f000 f985 	bl	8026c44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802693a:	4603      	mov	r3, r0
 802693c:	461a      	mov	r2, r3
 802693e:	4629      	mov	r1, r5
 8026940:	4620      	mov	r0, r4
 8026942:	f000 f98a 	bl	8026c5a <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026946:	4602      	mov	r2, r0
 8026948:	1d3b      	adds	r3, r7, #4
 802694a:	4611      	mov	r1, r2
 802694c:	4618      	mov	r0, r3
 802694e:	f000 f994 	bl	8026c7a <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8026952:	4603      	mov	r3, r0
    }
 8026954:	4618      	mov	r0, r3
 8026956:	3710      	adds	r7, #16
 8026958:	46bd      	mov	sp, r7
 802695a:	bdb0      	pop	{r4, r5, r7, pc}

0802695c <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 802695c:	b5b0      	push	{r4, r5, r7, lr}
 802695e:	b084      	sub	sp, #16
 8026960:	af00      	add	r7, sp, #0
 8026962:	60f8      	str	r0, [r7, #12]
 8026964:	60b9      	str	r1, [r7, #8]
 8026966:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026968:	68f8      	ldr	r0, [r7, #12]
 802696a:	f000 f96b 	bl	8026c44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802696e:	4604      	mov	r4, r0
 8026970:	68b8      	ldr	r0, [r7, #8]
 8026972:	f000 f967 	bl	8026c44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026976:	4605      	mov	r5, r0
 8026978:	687b      	ldr	r3, [r7, #4]
 802697a:	4618      	mov	r0, r3
 802697c:	f000 f962 	bl	8026c44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026980:	4603      	mov	r3, r0
 8026982:	461a      	mov	r2, r3
 8026984:	4629      	mov	r1, r5
 8026986:	4620      	mov	r0, r4
 8026988:	f000 f983 	bl	8026c92 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802698c:	4602      	mov	r2, r0
 802698e:	1d3b      	adds	r3, r7, #4
 8026990:	4611      	mov	r1, r2
 8026992:	4618      	mov	r0, r3
 8026994:	f000 f971 	bl	8026c7a <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8026998:	4603      	mov	r3, r0
    }
 802699a:	4618      	mov	r0, r3
 802699c:	3710      	adds	r7, #16
 802699e:	46bd      	mov	sp, r7
 80269a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080269a4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80269a4:	b480      	push	{r7}
 80269a6:	b083      	sub	sp, #12
 80269a8:	af00      	add	r7, sp, #0
 80269aa:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80269ac:	4b03      	ldr	r3, [pc, #12]	; (80269bc <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80269ae:	4618      	mov	r0, r3
 80269b0:	370c      	adds	r7, #12
 80269b2:	46bd      	mov	sp, r7
 80269b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269b8:	4770      	bx	lr
 80269ba:	bf00      	nop
 80269bc:	06666666 	.word	0x06666666

080269c0 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80269c0:	b580      	push	{r7, lr}
 80269c2:	b082      	sub	sp, #8
 80269c4:	af00      	add	r7, sp, #0
 80269c6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80269c8:	6878      	ldr	r0, [r7, #4]
 80269ca:	f000 f972 	bl	8026cb2 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>
 80269ce:	4603      	mov	r3, r0
      }
 80269d0:	4618      	mov	r0, r3
 80269d2:	3708      	adds	r7, #8
 80269d4:	46bd      	mov	sp, r7
 80269d6:	bd80      	pop	{r7, pc}

080269d8 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 80269d8:	b590      	push	{r4, r7, lr}
 80269da:	b085      	sub	sp, #20
 80269dc:	af00      	add	r7, sp, #0
 80269de:	60f8      	str	r0, [r7, #12]
 80269e0:	60b9      	str	r1, [r7, #8]
 80269e2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80269e4:	68f8      	ldr	r0, [r7, #12]
 80269e6:	f000 f970 	bl	8026cca <_ZSt12__miter_baseIPPjET_S2_>
 80269ea:	4604      	mov	r4, r0
 80269ec:	68b8      	ldr	r0, [r7, #8]
 80269ee:	f000 f96c 	bl	8026cca <_ZSt12__miter_baseIPPjET_S2_>
 80269f2:	4603      	mov	r3, r0
 80269f4:	687a      	ldr	r2, [r7, #4]
 80269f6:	4619      	mov	r1, r3
 80269f8:	4620      	mov	r0, r4
 80269fa:	f000 f971 	bl	8026ce0 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>
 80269fe:	4603      	mov	r3, r0
    }
 8026a00:	4618      	mov	r0, r3
 8026a02:	3714      	adds	r7, #20
 8026a04:	46bd      	mov	sp, r7
 8026a06:	bd90      	pop	{r4, r7, pc}

08026a08 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026a08:	b590      	push	{r4, r7, lr}
 8026a0a:	b085      	sub	sp, #20
 8026a0c:	af00      	add	r7, sp, #0
 8026a0e:	60f8      	str	r0, [r7, #12]
 8026a10:	60b9      	str	r1, [r7, #8]
 8026a12:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026a14:	68f8      	ldr	r0, [r7, #12]
 8026a16:	f000 f958 	bl	8026cca <_ZSt12__miter_baseIPPjET_S2_>
 8026a1a:	4604      	mov	r4, r0
 8026a1c:	68b8      	ldr	r0, [r7, #8]
 8026a1e:	f000 f954 	bl	8026cca <_ZSt12__miter_baseIPPjET_S2_>
 8026a22:	4603      	mov	r3, r0
 8026a24:	687a      	ldr	r2, [r7, #4]
 8026a26:	4619      	mov	r1, r3
 8026a28:	4620      	mov	r0, r4
 8026a2a:	f000 f97c 	bl	8026d26 <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>
 8026a2e:	4603      	mov	r3, r0
    }
 8026a30:	4618      	mov	r0, r3
 8026a32:	3714      	adds	r7, #20
 8026a34:	46bd      	mov	sp, r7
 8026a36:	bd90      	pop	{r4, r7, pc}

08026a38 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026a38:	b580      	push	{r7, lr}
 8026a3a:	b084      	sub	sp, #16
 8026a3c:	af00      	add	r7, sp, #0
 8026a3e:	60f8      	str	r0, [r7, #12]
 8026a40:	60b9      	str	r1, [r7, #8]
 8026a42:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026a44:	68f8      	ldr	r0, [r7, #12]
 8026a46:	f000 f991 	bl	8026d6c <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8026a4a:	4602      	mov	r2, r0
 8026a4c:	68bb      	ldr	r3, [r7, #8]
 8026a4e:	4293      	cmp	r3, r2
 8026a50:	bf8c      	ite	hi
 8026a52:	2301      	movhi	r3, #1
 8026a54:	2300      	movls	r3, #0
 8026a56:	b2db      	uxtb	r3, r3
 8026a58:	2b00      	cmp	r3, #0
 8026a5a:	d001      	beq.n	8026a60 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026a5c:	f015 f875 	bl	803bb4a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026a60:	68bb      	ldr	r3, [r7, #8]
 8026a62:	009b      	lsls	r3, r3, #2
 8026a64:	4618      	mov	r0, r3
 8026a66:	f015 f85f 	bl	803bb28 <_Znwj>
 8026a6a:	4603      	mov	r3, r0
      }
 8026a6c:	4618      	mov	r0, r3
 8026a6e:	3710      	adds	r7, #16
 8026a70:	46bd      	mov	sp, r7
 8026a72:	bd80      	pop	{r7, pc}

08026a74 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>:
      deallocate(_Tp* __p, size_type __t)
 8026a74:	b580      	push	{r7, lr}
 8026a76:	b084      	sub	sp, #16
 8026a78:	af00      	add	r7, sp, #0
 8026a7a:	60f8      	str	r0, [r7, #12]
 8026a7c:	60b9      	str	r1, [r7, #8]
 8026a7e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8026a80:	687b      	ldr	r3, [r7, #4]
 8026a82:	009b      	lsls	r3, r3, #2
 8026a84:	4619      	mov	r1, r3
 8026a86:	68b8      	ldr	r0, [r7, #8]
 8026a88:	f015 f84c 	bl	803bb24 <_ZdlPvj>
      }
 8026a8c:	bf00      	nop
 8026a8e:	3710      	adds	r7, #16
 8026a90:	46bd      	mov	sp, r7
 8026a92:	bd80      	pop	{r7, pc}

08026a94 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026a94:	b480      	push	{r7}
 8026a96:	b083      	sub	sp, #12
 8026a98:	af00      	add	r7, sp, #0
 8026a9a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026a9c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026aa0:	4618      	mov	r0, r3
 8026aa2:	370c      	adds	r7, #12
 8026aa4:	46bd      	mov	sp, r7
 8026aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026aaa:	4770      	bx	lr

08026aac <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026aac:	b580      	push	{r7, lr}
 8026aae:	b084      	sub	sp, #16
 8026ab0:	af00      	add	r7, sp, #0
 8026ab2:	60f8      	str	r0, [r7, #12]
 8026ab4:	60b9      	str	r1, [r7, #8]
 8026ab6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026ab8:	68f8      	ldr	r0, [r7, #12]
 8026aba:	f000 f963 	bl	8026d84 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>
 8026abe:	4602      	mov	r2, r0
 8026ac0:	68bb      	ldr	r3, [r7, #8]
 8026ac2:	4293      	cmp	r3, r2
 8026ac4:	bf8c      	ite	hi
 8026ac6:	2301      	movhi	r3, #1
 8026ac8:	2300      	movls	r3, #0
 8026aca:	b2db      	uxtb	r3, r3
 8026acc:	2b00      	cmp	r3, #0
 8026ace:	d001      	beq.n	8026ad4 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026ad0:	f015 f83b 	bl	803bb4a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026ad4:	68bb      	ldr	r3, [r7, #8]
 8026ad6:	009b      	lsls	r3, r3, #2
 8026ad8:	4618      	mov	r0, r3
 8026ada:	f015 f825 	bl	803bb28 <_Znwj>
 8026ade:	4603      	mov	r3, r0
      }
 8026ae0:	4618      	mov	r0, r3
 8026ae2:	3710      	adds	r7, #16
 8026ae4:	46bd      	mov	sp, r7
 8026ae6:	bd80      	pop	{r7, pc}

08026ae8 <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026ae8:	b480      	push	{r7}
 8026aea:	b083      	sub	sp, #12
 8026aec:	af00      	add	r7, sp, #0
 8026aee:	6078      	str	r0, [r7, #4]
 8026af0:	687b      	ldr	r3, [r7, #4]
 8026af2:	4618      	mov	r0, r3
 8026af4:	370c      	adds	r7, #12
 8026af6:	46bd      	mov	sp, r7
 8026af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026afc:	4770      	bx	lr

08026afe <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8026afe:	b580      	push	{r7, lr}
 8026b00:	b084      	sub	sp, #16
 8026b02:	af00      	add	r7, sp, #0
 8026b04:	60f8      	str	r0, [r7, #12]
 8026b06:	60b9      	str	r1, [r7, #8]
 8026b08:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8026b0a:	687a      	ldr	r2, [r7, #4]
 8026b0c:	68b9      	ldr	r1, [r7, #8]
 8026b0e:	68f8      	ldr	r0, [r7, #12]
 8026b10:	f000 f944 	bl	8026d9c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8026b14:	4603      	mov	r3, r0
    }
 8026b16:	4618      	mov	r0, r3
 8026b18:	3710      	adds	r7, #16
 8026b1a:	46bd      	mov	sp, r7
 8026b1c:	bd80      	pop	{r7, pc}

08026b1e <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8026b1e:	b480      	push	{r7}
 8026b20:	b083      	sub	sp, #12
 8026b22:	af00      	add	r7, sp, #0
 8026b24:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026b26:	687b      	ldr	r3, [r7, #4]
 8026b28:	4618      	mov	r0, r3
 8026b2a:	370c      	adds	r7, #12
 8026b2c:	46bd      	mov	sp, r7
 8026b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b32:	4770      	bx	lr

08026b34 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>:
      move_iterator(iterator_type __i)
 8026b34:	b590      	push	{r4, r7, lr}
 8026b36:	b083      	sub	sp, #12
 8026b38:	af00      	add	r7, sp, #0
 8026b3a:	6078      	str	r0, [r7, #4]
 8026b3c:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8026b3e:	687c      	ldr	r4, [r7, #4]
 8026b40:	6838      	ldr	r0, [r7, #0]
 8026b42:	f7ff ffec 	bl	8026b1e <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8026b46:	4603      	mov	r3, r0
 8026b48:	4619      	mov	r1, r3
 8026b4a:	4620      	mov	r0, r4
 8026b4c:	f7fd fb39 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026b50:	687b      	ldr	r3, [r7, #4]
 8026b52:	4618      	mov	r0, r3
 8026b54:	370c      	adds	r7, #12
 8026b56:	46bd      	mov	sp, r7
 8026b58:	bd90      	pop	{r4, r7, pc}

08026b5a <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8026b5a:	b580      	push	{r7, lr}
 8026b5c:	b092      	sub	sp, #72	; 0x48
 8026b5e:	af00      	add	r7, sp, #0
 8026b60:	60f8      	str	r0, [r7, #12]
 8026b62:	60b9      	str	r1, [r7, #8]
 8026b64:	607a      	str	r2, [r7, #4]
 8026b66:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8026b68:	2301      	movs	r3, #1
 8026b6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 8026b6e:	f107 0314 	add.w	r3, r7, #20
 8026b72:	68b9      	ldr	r1, [r7, #8]
 8026b74:	4618      	mov	r0, r3
 8026b76:	f7ff fde8 	bl	802674a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026b7e:	6879      	ldr	r1, [r7, #4]
 8026b80:	4618      	mov	r0, r3
 8026b82:	f7ff fde2 	bl	802674a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026b86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026b8a:	6839      	ldr	r1, [r7, #0]
 8026b8c:	4618      	mov	r0, r3
 8026b8e:	f7fd fb18 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026b92:	68f8      	ldr	r0, [r7, #12]
 8026b94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026b98:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8026b9c:	f107 0114 	add.w	r1, r7, #20
 8026ba0:	f000 f926 	bl	8026df0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>
    }
 8026ba4:	68f8      	ldr	r0, [r7, #12]
 8026ba6:	3748      	adds	r7, #72	; 0x48
 8026ba8:	46bd      	mov	sp, r7
 8026baa:	bd80      	pop	{r7, pc}

08026bac <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8026bac:	b580      	push	{r7, lr}
 8026bae:	b090      	sub	sp, #64	; 0x40
 8026bb0:	af00      	add	r7, sp, #0
 8026bb2:	60f8      	str	r0, [r7, #12]
 8026bb4:	60b9      	str	r1, [r7, #8]
 8026bb6:	607a      	str	r2, [r7, #4]
 8026bb8:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8026bba:	f107 0310 	add.w	r3, r7, #16
 8026bbe:	68b9      	ldr	r1, [r7, #8]
 8026bc0:	4618      	mov	r0, r3
 8026bc2:	f7fd fafe 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026bc6:	f107 0320 	add.w	r3, r7, #32
 8026bca:	6879      	ldr	r1, [r7, #4]
 8026bcc:	4618      	mov	r0, r3
 8026bce:	f7fd faf8 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026bd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026bd6:	6839      	ldr	r1, [r7, #0]
 8026bd8:	4618      	mov	r0, r3
 8026bda:	f7fd faf2 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026bde:	68f8      	ldr	r0, [r7, #12]
 8026be0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026be4:	f107 0220 	add.w	r2, r7, #32
 8026be8:	f107 0110 	add.w	r1, r7, #16
 8026bec:	f000 f926 	bl	8026e3c <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8026bf0:	68f8      	ldr	r0, [r7, #12]
 8026bf2:	3740      	adds	r7, #64	; 0x40
 8026bf4:	46bd      	mov	sp, r7
 8026bf6:	bd80      	pop	{r7, pc}

08026bf8 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 8026bf8:	b580      	push	{r7, lr}
 8026bfa:	b090      	sub	sp, #64	; 0x40
 8026bfc:	af00      	add	r7, sp, #0
 8026bfe:	60f8      	str	r0, [r7, #12]
 8026c00:	60b9      	str	r1, [r7, #8]
 8026c02:	607a      	str	r2, [r7, #4]
 8026c04:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 8026c06:	f107 0310 	add.w	r3, r7, #16
 8026c0a:	68b9      	ldr	r1, [r7, #8]
 8026c0c:	4618      	mov	r0, r3
 8026c0e:	f7fd fad8 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026c12:	f107 0320 	add.w	r3, r7, #32
 8026c16:	6879      	ldr	r1, [r7, #4]
 8026c18:	4618      	mov	r0, r3
 8026c1a:	f7fd fad2 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026c1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026c22:	6839      	ldr	r1, [r7, #0]
 8026c24:	4618      	mov	r0, r3
 8026c26:	f7fd facc 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026c2a:	68f8      	ldr	r0, [r7, #12]
 8026c2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026c30:	f107 0220 	add.w	r2, r7, #32
 8026c34:	f107 0110 	add.w	r1, r7, #16
 8026c38:	f000 f97b 	bl	8026f32 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8026c3c:	68f8      	ldr	r0, [r7, #12]
 8026c3e:	3740      	adds	r7, #64	; 0x40
 8026c40:	46bd      	mov	sp, r7
 8026c42:	bd80      	pop	{r7, pc}

08026c44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8026c44:	b480      	push	{r7}
 8026c46:	b083      	sub	sp, #12
 8026c48:	af00      	add	r7, sp, #0
 8026c4a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026c4c:	687b      	ldr	r3, [r7, #4]
 8026c4e:	4618      	mov	r0, r3
 8026c50:	370c      	adds	r7, #12
 8026c52:	46bd      	mov	sp, r7
 8026c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c58:	4770      	bx	lr

08026c5a <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8026c5a:	b580      	push	{r7, lr}
 8026c5c:	b084      	sub	sp, #16
 8026c5e:	af00      	add	r7, sp, #0
 8026c60:	60f8      	str	r0, [r7, #12]
 8026c62:	60b9      	str	r1, [r7, #8]
 8026c64:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8026c66:	687a      	ldr	r2, [r7, #4]
 8026c68:	68b9      	ldr	r1, [r7, #8]
 8026c6a:	68f8      	ldr	r0, [r7, #12]
 8026c6c:	f000 f9dc 	bl	8027028 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026c70:	4603      	mov	r3, r0
 8026c72:	4618      	mov	r0, r3
 8026c74:	3710      	adds	r7, #16
 8026c76:	46bd      	mov	sp, r7
 8026c78:	bd80      	pop	{r7, pc}

08026c7a <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8026c7a:	b480      	push	{r7}
 8026c7c:	b083      	sub	sp, #12
 8026c7e:	af00      	add	r7, sp, #0
 8026c80:	6078      	str	r0, [r7, #4]
 8026c82:	6039      	str	r1, [r7, #0]
    { return __res; }
 8026c84:	683b      	ldr	r3, [r7, #0]
 8026c86:	4618      	mov	r0, r3
 8026c88:	370c      	adds	r7, #12
 8026c8a:	46bd      	mov	sp, r7
 8026c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c90:	4770      	bx	lr

08026c92 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8026c92:	b580      	push	{r7, lr}
 8026c94:	b084      	sub	sp, #16
 8026c96:	af00      	add	r7, sp, #0
 8026c98:	60f8      	str	r0, [r7, #12]
 8026c9a:	60b9      	str	r1, [r7, #8]
 8026c9c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8026c9e:	687a      	ldr	r2, [r7, #4]
 8026ca0:	68b9      	ldr	r1, [r7, #8]
 8026ca2:	68f8      	ldr	r0, [r7, #12]
 8026ca4:	f000 f9d0 	bl	8027048 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026ca8:	4603      	mov	r3, r0
 8026caa:	4618      	mov	r0, r3
 8026cac:	3710      	adds	r7, #16
 8026cae:	46bd      	mov	sp, r7
 8026cb0:	bd80      	pop	{r7, pc}

08026cb2 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8026cb2:	b580      	push	{r7, lr}
 8026cb4:	b082      	sub	sp, #8
 8026cb6:	af00      	add	r7, sp, #0
 8026cb8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8026cba:	6878      	ldr	r0, [r7, #4]
 8026cbc:	f000 f856 	bl	8026d6c <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8026cc0:	4603      	mov	r3, r0
 8026cc2:	4618      	mov	r0, r3
 8026cc4:	3708      	adds	r7, #8
 8026cc6:	46bd      	mov	sp, r7
 8026cc8:	bd80      	pop	{r7, pc}

08026cca <_ZSt12__miter_baseIPPjET_S2_>:
    __miter_base(_Iterator __it)
 8026cca:	b480      	push	{r7}
 8026ccc:	b083      	sub	sp, #12
 8026cce:	af00      	add	r7, sp, #0
 8026cd0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026cd2:	687b      	ldr	r3, [r7, #4]
 8026cd4:	4618      	mov	r0, r3
 8026cd6:	370c      	adds	r7, #12
 8026cd8:	46bd      	mov	sp, r7
 8026cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cde:	4770      	bx	lr

08026ce0 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026ce0:	b5b0      	push	{r4, r5, r7, lr}
 8026ce2:	b084      	sub	sp, #16
 8026ce4:	af00      	add	r7, sp, #0
 8026ce6:	60f8      	str	r0, [r7, #12]
 8026ce8:	60b9      	str	r1, [r7, #8]
 8026cea:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026cec:	68f8      	ldr	r0, [r7, #12]
 8026cee:	f000 f9bb 	bl	8027068 <_ZSt12__niter_baseIPPjET_S2_>
 8026cf2:	4604      	mov	r4, r0
 8026cf4:	68b8      	ldr	r0, [r7, #8]
 8026cf6:	f000 f9b7 	bl	8027068 <_ZSt12__niter_baseIPPjET_S2_>
 8026cfa:	4605      	mov	r5, r0
 8026cfc:	687b      	ldr	r3, [r7, #4]
 8026cfe:	4618      	mov	r0, r3
 8026d00:	f000 f9b2 	bl	8027068 <_ZSt12__niter_baseIPPjET_S2_>
 8026d04:	4603      	mov	r3, r0
 8026d06:	461a      	mov	r2, r3
 8026d08:	4629      	mov	r1, r5
 8026d0a:	4620      	mov	r0, r4
 8026d0c:	f000 f9b7 	bl	802707e <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 8026d10:	4602      	mov	r2, r0
 8026d12:	1d3b      	adds	r3, r7, #4
 8026d14:	4611      	mov	r1, r2
 8026d16:	4618      	mov	r0, r3
 8026d18:	f000 f9c1 	bl	802709e <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 8026d1c:	4603      	mov	r3, r0
    }
 8026d1e:	4618      	mov	r0, r3
 8026d20:	3710      	adds	r7, #16
 8026d22:	46bd      	mov	sp, r7
 8026d24:	bdb0      	pop	{r4, r5, r7, pc}

08026d26 <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8026d26:	b5b0      	push	{r4, r5, r7, lr}
 8026d28:	b084      	sub	sp, #16
 8026d2a:	af00      	add	r7, sp, #0
 8026d2c:	60f8      	str	r0, [r7, #12]
 8026d2e:	60b9      	str	r1, [r7, #8]
 8026d30:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026d32:	68f8      	ldr	r0, [r7, #12]
 8026d34:	f000 f998 	bl	8027068 <_ZSt12__niter_baseIPPjET_S2_>
 8026d38:	4604      	mov	r4, r0
 8026d3a:	68b8      	ldr	r0, [r7, #8]
 8026d3c:	f000 f994 	bl	8027068 <_ZSt12__niter_baseIPPjET_S2_>
 8026d40:	4605      	mov	r5, r0
 8026d42:	687b      	ldr	r3, [r7, #4]
 8026d44:	4618      	mov	r0, r3
 8026d46:	f000 f98f 	bl	8027068 <_ZSt12__niter_baseIPPjET_S2_>
 8026d4a:	4603      	mov	r3, r0
 8026d4c:	461a      	mov	r2, r3
 8026d4e:	4629      	mov	r1, r5
 8026d50:	4620      	mov	r0, r4
 8026d52:	f000 f9b0 	bl	80270b6 <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 8026d56:	4602      	mov	r2, r0
 8026d58:	1d3b      	adds	r3, r7, #4
 8026d5a:	4611      	mov	r1, r2
 8026d5c:	4618      	mov	r0, r3
 8026d5e:	f000 f99e 	bl	802709e <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 8026d62:	4603      	mov	r3, r0
    }
 8026d64:	4618      	mov	r0, r3
 8026d66:	3710      	adds	r7, #16
 8026d68:	46bd      	mov	sp, r7
 8026d6a:	bdb0      	pop	{r4, r5, r7, pc}

08026d6c <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026d6c:	b480      	push	{r7}
 8026d6e:	b083      	sub	sp, #12
 8026d70:	af00      	add	r7, sp, #0
 8026d72:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026d74:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026d78:	4618      	mov	r0, r3
 8026d7a:	370c      	adds	r7, #12
 8026d7c:	46bd      	mov	sp, r7
 8026d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d82:	4770      	bx	lr

08026d84 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026d84:	b480      	push	{r7}
 8026d86:	b083      	sub	sp, #12
 8026d88:	af00      	add	r7, sp, #0
 8026d8a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026d8c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026d90:	4618      	mov	r0, r3
 8026d92:	370c      	adds	r7, #12
 8026d94:	46bd      	mov	sp, r7
 8026d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d9a:	4770      	bx	lr

08026d9c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8026d9c:	b580      	push	{r7, lr}
 8026d9e:	b086      	sub	sp, #24
 8026da0:	af00      	add	r7, sp, #0
 8026da2:	60f8      	str	r0, [r7, #12]
 8026da4:	60b9      	str	r1, [r7, #8]
 8026da6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8026da8:	68ba      	ldr	r2, [r7, #8]
 8026daa:	68fb      	ldr	r3, [r7, #12]
 8026dac:	1ad3      	subs	r3, r2, r3
 8026dae:	109b      	asrs	r3, r3, #2
 8026db0:	4a0e      	ldr	r2, [pc, #56]	; (8026dec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 8026db2:	fb02 f303 	mul.w	r3, r2, r3
 8026db6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8026db8:	697b      	ldr	r3, [r7, #20]
 8026dba:	2b00      	cmp	r3, #0
 8026dbc:	d009      	beq.n	8026dd2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8026dbe:	697a      	ldr	r2, [r7, #20]
 8026dc0:	4613      	mov	r3, r2
 8026dc2:	009b      	lsls	r3, r3, #2
 8026dc4:	4413      	add	r3, r2
 8026dc6:	009b      	lsls	r3, r3, #2
 8026dc8:	461a      	mov	r2, r3
 8026dca:	68f9      	ldr	r1, [r7, #12]
 8026dcc:	6878      	ldr	r0, [r7, #4]
 8026dce:	f014 ff4d 	bl	803bc6c <memmove>
	  return __result + _Num;
 8026dd2:	697a      	ldr	r2, [r7, #20]
 8026dd4:	4613      	mov	r3, r2
 8026dd6:	009b      	lsls	r3, r3, #2
 8026dd8:	4413      	add	r3, r2
 8026dda:	009b      	lsls	r3, r3, #2
 8026ddc:	461a      	mov	r2, r3
 8026dde:	687b      	ldr	r3, [r7, #4]
 8026de0:	4413      	add	r3, r2
	}
 8026de2:	4618      	mov	r0, r3
 8026de4:	3718      	adds	r7, #24
 8026de6:	46bd      	mov	sp, r7
 8026de8:	bd80      	pop	{r7, pc}
 8026dea:	bf00      	nop
 8026dec:	cccccccd 	.word	0xcccccccd

08026df0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8026df0:	b580      	push	{r7, lr}
 8026df2:	b090      	sub	sp, #64	; 0x40
 8026df4:	af00      	add	r7, sp, #0
 8026df6:	60f8      	str	r0, [r7, #12]
 8026df8:	60b9      	str	r1, [r7, #8]
 8026dfa:	607a      	str	r2, [r7, #4]
 8026dfc:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8026dfe:	f107 0310 	add.w	r3, r7, #16
 8026e02:	68b9      	ldr	r1, [r7, #8]
 8026e04:	4618      	mov	r0, r3
 8026e06:	f7ff fca0 	bl	802674a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026e0a:	f107 0320 	add.w	r3, r7, #32
 8026e0e:	6879      	ldr	r1, [r7, #4]
 8026e10:	4618      	mov	r0, r3
 8026e12:	f7ff fc9a 	bl	802674a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026e16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026e1a:	6839      	ldr	r1, [r7, #0]
 8026e1c:	4618      	mov	r0, r3
 8026e1e:	f7fd f9d0 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026e22:	68f8      	ldr	r0, [r7, #12]
 8026e24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026e28:	f107 0220 	add.w	r2, r7, #32
 8026e2c:	f107 0110 	add.w	r1, r7, #16
 8026e30:	f000 f951 	bl	80270d6 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 8026e34:	68f8      	ldr	r0, [r7, #12]
 8026e36:	3740      	adds	r7, #64	; 0x40
 8026e38:	46bd      	mov	sp, r7
 8026e3a:	bd80      	pop	{r7, pc}

08026e3c <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 8026e3c:	b5b0      	push	{r4, r5, r7, lr}
 8026e3e:	b09e      	sub	sp, #120	; 0x78
 8026e40:	af00      	add	r7, sp, #0
 8026e42:	60f8      	str	r0, [r7, #12]
 8026e44:	60b9      	str	r1, [r7, #8]
 8026e46:	607a      	str	r2, [r7, #4]
 8026e48:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8026e4a:	68bb      	ldr	r3, [r7, #8]
 8026e4c:	68da      	ldr	r2, [r3, #12]
 8026e4e:	687b      	ldr	r3, [r7, #4]
 8026e50:	68db      	ldr	r3, [r3, #12]
 8026e52:	429a      	cmp	r2, r3
 8026e54:	d058      	beq.n	8026f08 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result
 8026e56:	68bb      	ldr	r3, [r7, #8]
 8026e58:	681c      	ldr	r4, [r3, #0]
 8026e5a:	68bb      	ldr	r3, [r7, #8]
 8026e5c:	689d      	ldr	r5, [r3, #8]
 8026e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026e62:	6839      	ldr	r1, [r7, #0]
 8026e64:	4618      	mov	r0, r3
 8026e66:	f7fd f9ac 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026e6a:	f107 0014 	add.w	r0, r7, #20
 8026e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026e72:	462a      	mov	r2, r5
 8026e74:	4621      	mov	r1, r4
 8026e76:	f000 f965 	bl	8027144 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8026e7a:	683b      	ldr	r3, [r7, #0]
 8026e7c:	461c      	mov	r4, r3
 8026e7e:	f107 0314 	add.w	r3, r7, #20
 8026e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8026e88:	68bb      	ldr	r3, [r7, #8]
 8026e8a:	68db      	ldr	r3, [r3, #12]
 8026e8c:	3304      	adds	r3, #4
 8026e8e:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 8026e90:	687b      	ldr	r3, [r7, #4]
 8026e92:	68db      	ldr	r3, [r3, #12]
 8026e94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8026e96:	429a      	cmp	r2, r3
 8026e98:	d024      	beq.n	8026ee4 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result
 8026e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026e9c:	681d      	ldr	r5, [r3, #0]
 8026e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026ea0:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 8026ea2:	f7fd fc72 	bl	802478a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8026ea6:	4602      	mov	r2, r0
 8026ea8:	4613      	mov	r3, r2
 8026eaa:	009b      	lsls	r3, r3, #2
 8026eac:	4413      	add	r3, r2
 8026eae:	009b      	lsls	r3, r3, #2
	    __result
 8026eb0:	441c      	add	r4, r3
 8026eb2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8026eb6:	6839      	ldr	r1, [r7, #0]
 8026eb8:	4618      	mov	r0, r3
 8026eba:	f7fd f982 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026ebe:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8026ec2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8026ec6:	4622      	mov	r2, r4
 8026ec8:	4629      	mov	r1, r5
 8026eca:	f000 f93b 	bl	8027144 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8026ece:	683b      	ldr	r3, [r7, #0]
 8026ed0:	461c      	mov	r4, r3
 8026ed2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8026edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026ede:	3304      	adds	r3, #4
 8026ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8026ee2:	e7d5      	b.n	8026e90 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
					      __result);
 8026ee4:	687b      	ldr	r3, [r7, #4]
 8026ee6:	685c      	ldr	r4, [r3, #4]
 8026ee8:	687b      	ldr	r3, [r7, #4]
 8026eea:	681d      	ldr	r5, [r3, #0]
 8026eec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8026ef0:	6839      	ldr	r1, [r7, #0]
 8026ef2:	4618      	mov	r0, r3
 8026ef4:	f7fd f965 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026ef8:	68f8      	ldr	r0, [r7, #12]
 8026efa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8026efe:	462a      	mov	r2, r5
 8026f00:	4621      	mov	r1, r4
 8026f02:	f000 f91f 	bl	8027144 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8026f06:	e010      	b.n	8026f2a <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
					  __result);
 8026f08:	68bb      	ldr	r3, [r7, #8]
 8026f0a:	681c      	ldr	r4, [r3, #0]
 8026f0c:	687b      	ldr	r3, [r7, #4]
 8026f0e:	681d      	ldr	r5, [r3, #0]
 8026f10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8026f14:	6839      	ldr	r1, [r7, #0]
 8026f16:	4618      	mov	r0, r3
 8026f18:	f7fd f953 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026f1c:	68f8      	ldr	r0, [r7, #12]
 8026f1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8026f22:	462a      	mov	r2, r5
 8026f24:	4621      	mov	r1, r4
 8026f26:	f000 f90d 	bl	8027144 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8026f2a:	68f8      	ldr	r0, [r7, #12]
 8026f2c:	3778      	adds	r7, #120	; 0x78
 8026f2e:	46bd      	mov	sp, r7
 8026f30:	bdb0      	pop	{r4, r5, r7, pc}

08026f32 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_backward_dit(
 8026f32:	b5b0      	push	{r4, r5, r7, lr}
 8026f34:	b09e      	sub	sp, #120	; 0x78
 8026f36:	af00      	add	r7, sp, #0
 8026f38:	60f8      	str	r0, [r7, #12]
 8026f3a:	60b9      	str	r1, [r7, #8]
 8026f3c:	607a      	str	r2, [r7, #4]
 8026f3e:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8026f40:	68bb      	ldr	r3, [r7, #8]
 8026f42:	68da      	ldr	r2, [r3, #12]
 8026f44:	687b      	ldr	r3, [r7, #4]
 8026f46:	68db      	ldr	r3, [r3, #12]
 8026f48:	429a      	cmp	r2, r3
 8026f4a:	d058      	beq.n	8026ffe <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 8026f4c:	687b      	ldr	r3, [r7, #4]
 8026f4e:	685c      	ldr	r4, [r3, #4]
 8026f50:	687b      	ldr	r3, [r7, #4]
 8026f52:	681d      	ldr	r5, [r3, #0]
 8026f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026f58:	6839      	ldr	r1, [r7, #0]
 8026f5a:	4618      	mov	r0, r3
 8026f5c:	f7fd f931 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026f60:	f107 0014 	add.w	r0, r7, #20
 8026f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026f68:	462a      	mov	r2, r5
 8026f6a:	4621      	mov	r1, r4
 8026f6c:	f000 f93c 	bl	80271e8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8026f70:	683b      	ldr	r3, [r7, #0]
 8026f72:	461c      	mov	r4, r3
 8026f74:	f107 0314 	add.w	r3, r7, #20
 8026f78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026f7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 8026f7e:	687b      	ldr	r3, [r7, #4]
 8026f80:	68db      	ldr	r3, [r3, #12]
 8026f82:	3b04      	subs	r3, #4
 8026f84:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 8026f86:	68bb      	ldr	r3, [r7, #8]
 8026f88:	68db      	ldr	r3, [r3, #12]
 8026f8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8026f8c:	429a      	cmp	r2, r3
 8026f8e:	d024      	beq.n	8026fda <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 8026f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026f92:	681d      	ldr	r5, [r3, #0]
 8026f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026f96:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 8026f98:	f7fd fbf7 	bl	802478a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8026f9c:	4602      	mov	r2, r0
 8026f9e:	4613      	mov	r3, r2
 8026fa0:	009b      	lsls	r3, r3, #2
 8026fa2:	4413      	add	r3, r2
 8026fa4:	009b      	lsls	r3, r3, #2
	    __result = std::__copy_move_backward_a1<_IsMove>(
 8026fa6:	441c      	add	r4, r3
 8026fa8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8026fac:	6839      	ldr	r1, [r7, #0]
 8026fae:	4618      	mov	r0, r3
 8026fb0:	f7fd f907 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026fb4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8026fb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8026fbc:	4622      	mov	r2, r4
 8026fbe:	4629      	mov	r1, r5
 8026fc0:	f000 f912 	bl	80271e8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8026fc4:	683b      	ldr	r3, [r7, #0]
 8026fc6:	461c      	mov	r4, r3
 8026fc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026fcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026fce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 8026fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026fd4:	3b04      	subs	r3, #4
 8026fd6:	677b      	str	r3, [r7, #116]	; 0x74
 8026fd8:	e7d5      	b.n	8026f86 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
			__first._M_cur, __first._M_last, __result);
 8026fda:	68bb      	ldr	r3, [r7, #8]
 8026fdc:	681c      	ldr	r4, [r3, #0]
 8026fde:	68bb      	ldr	r3, [r7, #8]
 8026fe0:	689d      	ldr	r5, [r3, #8]
 8026fe2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8026fe6:	6839      	ldr	r1, [r7, #0]
 8026fe8:	4618      	mov	r0, r3
 8026fea:	f7fd f8ea 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026fee:	68f8      	ldr	r0, [r7, #12]
 8026ff0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8026ff4:	462a      	mov	r2, r5
 8026ff6:	4621      	mov	r1, r4
 8026ff8:	f000 f8f6 	bl	80271e8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8026ffc:	e010      	b.n	8027020 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
		__first._M_cur, __last._M_cur, __result);
 8026ffe:	68bb      	ldr	r3, [r7, #8]
 8027000:	681c      	ldr	r4, [r3, #0]
 8027002:	687b      	ldr	r3, [r7, #4]
 8027004:	681d      	ldr	r5, [r3, #0]
 8027006:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802700a:	6839      	ldr	r1, [r7, #0]
 802700c:	4618      	mov	r0, r3
 802700e:	f7fd f8d8 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027012:	68f8      	ldr	r0, [r7, #12]
 8027014:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8027018:	462a      	mov	r2, r5
 802701a:	4621      	mov	r1, r4
 802701c:	f000 f8e4 	bl	80271e8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8027020:	68f8      	ldr	r0, [r7, #12]
 8027022:	3778      	adds	r7, #120	; 0x78
 8027024:	46bd      	mov	sp, r7
 8027026:	bdb0      	pop	{r4, r5, r7, pc}

08027028 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8027028:	b580      	push	{r7, lr}
 802702a:	b084      	sub	sp, #16
 802702c:	af00      	add	r7, sp, #0
 802702e:	60f8      	str	r0, [r7, #12]
 8027030:	60b9      	str	r1, [r7, #8]
 8027032:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8027034:	687a      	ldr	r2, [r7, #4]
 8027036:	68b9      	ldr	r1, [r7, #8]
 8027038:	68f8      	ldr	r0, [r7, #12]
 802703a:	f000 f93b 	bl	80272b4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802703e:	4603      	mov	r3, r0
    }
 8027040:	4618      	mov	r0, r3
 8027042:	3710      	adds	r7, #16
 8027044:	46bd      	mov	sp, r7
 8027046:	bd80      	pop	{r7, pc}

08027048 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8027048:	b580      	push	{r7, lr}
 802704a:	b084      	sub	sp, #16
 802704c:	af00      	add	r7, sp, #0
 802704e:	60f8      	str	r0, [r7, #12]
 8027050:	60b9      	str	r1, [r7, #8]
 8027052:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8027054:	687a      	ldr	r2, [r7, #4]
 8027056:	68b9      	ldr	r1, [r7, #8]
 8027058:	68f8      	ldr	r0, [r7, #12]
 802705a:	f000 f948 	bl	80272ee <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802705e:	4603      	mov	r3, r0
    }
 8027060:	4618      	mov	r0, r3
 8027062:	3710      	adds	r7, #16
 8027064:	46bd      	mov	sp, r7
 8027066:	bd80      	pop	{r7, pc}

08027068 <_ZSt12__niter_baseIPPjET_S2_>:
    __niter_base(_Iterator __it)
 8027068:	b480      	push	{r7}
 802706a:	b083      	sub	sp, #12
 802706c:	af00      	add	r7, sp, #0
 802706e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027070:	687b      	ldr	r3, [r7, #4]
 8027072:	4618      	mov	r0, r3
 8027074:	370c      	adds	r7, #12
 8027076:	46bd      	mov	sp, r7
 8027078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802707c:	4770      	bx	lr

0802707e <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802707e:	b580      	push	{r7, lr}
 8027080:	b084      	sub	sp, #16
 8027082:	af00      	add	r7, sp, #0
 8027084:	60f8      	str	r0, [r7, #12]
 8027086:	60b9      	str	r1, [r7, #8]
 8027088:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802708a:	687a      	ldr	r2, [r7, #4]
 802708c:	68b9      	ldr	r1, [r7, #8]
 802708e:	68f8      	ldr	r0, [r7, #12]
 8027090:	f000 f94f 	bl	8027332 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 8027094:	4603      	mov	r3, r0
 8027096:	4618      	mov	r0, r3
 8027098:	3710      	adds	r7, #16
 802709a:	46bd      	mov	sp, r7
 802709c:	bd80      	pop	{r7, pc}

0802709e <_ZSt12__niter_wrapIPPjET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802709e:	b480      	push	{r7}
 80270a0:	b083      	sub	sp, #12
 80270a2:	af00      	add	r7, sp, #0
 80270a4:	6078      	str	r0, [r7, #4]
 80270a6:	6039      	str	r1, [r7, #0]
    { return __res; }
 80270a8:	683b      	ldr	r3, [r7, #0]
 80270aa:	4618      	mov	r0, r3
 80270ac:	370c      	adds	r7, #12
 80270ae:	46bd      	mov	sp, r7
 80270b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270b4:	4770      	bx	lr

080270b6 <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80270b6:	b580      	push	{r7, lr}
 80270b8:	b084      	sub	sp, #16
 80270ba:	af00      	add	r7, sp, #0
 80270bc:	60f8      	str	r0, [r7, #12]
 80270be:	60b9      	str	r1, [r7, #8]
 80270c0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80270c2:	687a      	ldr	r2, [r7, #4]
 80270c4:	68b9      	ldr	r1, [r7, #8]
 80270c6:	68f8      	ldr	r0, [r7, #12]
 80270c8:	f000 f943 	bl	8027352 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 80270cc:	4603      	mov	r3, r0
 80270ce:	4618      	mov	r0, r3
 80270d0:	3710      	adds	r7, #16
 80270d2:	46bd      	mov	sp, r7
 80270d4:	bd80      	pop	{r7, pc}

080270d6 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 80270d6:	b580      	push	{r7, lr}
 80270d8:	b098      	sub	sp, #96	; 0x60
 80270da:	af00      	add	r7, sp, #0
 80270dc:	60f8      	str	r0, [r7, #12]
 80270de:	60b9      	str	r1, [r7, #8]
 80270e0:	607a      	str	r2, [r7, #4]
 80270e2:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80270e4:	f107 0320 	add.w	r3, r7, #32
 80270e8:	68b9      	ldr	r1, [r7, #8]
 80270ea:	4618      	mov	r0, r3
 80270ec:	f7ff fb2d 	bl	802674a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80270f0:	f107 0310 	add.w	r3, r7, #16
 80270f4:	f107 0220 	add.w	r2, r7, #32
 80270f8:	4611      	mov	r1, r2
 80270fa:	4618      	mov	r0, r3
 80270fc:	f000 f939 	bl	8027372 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8027100:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027104:	6879      	ldr	r1, [r7, #4]
 8027106:	4618      	mov	r0, r3
 8027108:	f7ff fb1f 	bl	802674a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802710c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027110:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027114:	4611      	mov	r1, r2
 8027116:	4618      	mov	r0, r3
 8027118:	f000 f92b 	bl	8027372 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 802711c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8027120:	6839      	ldr	r1, [r7, #0]
 8027122:	4618      	mov	r0, r3
 8027124:	f7fd f84d 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027128:	68f8      	ldr	r0, [r7, #12]
 802712a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802712e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8027132:	f107 0110 	add.w	r1, r7, #16
 8027136:	f7ff fb4b 	bl	80267d0 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 802713a:	68f8      	ldr	r0, [r7, #12]
 802713c:	3760      	adds	r7, #96	; 0x60
 802713e:	46bd      	mov	sp, r7
 8027140:	bd80      	pop	{r7, pc}
	...

08027144 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:
    __copy_move_a1(_II __first, _II __last,
 8027144:	b580      	push	{r7, lr}
 8027146:	b088      	sub	sp, #32
 8027148:	af00      	add	r7, sp, #0
 802714a:	60f8      	str	r0, [r7, #12]
 802714c:	60b9      	str	r1, [r7, #8]
 802714e:	607a      	str	r2, [r7, #4]
 8027150:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 8027152:	687a      	ldr	r2, [r7, #4]
 8027154:	68bb      	ldr	r3, [r7, #8]
 8027156:	1ad3      	subs	r3, r2, r3
 8027158:	109b      	asrs	r3, r3, #2
 802715a:	4a22      	ldr	r2, [pc, #136]	; (80271e4 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 802715c:	fb02 f303 	mul.w	r3, r2, r3
 8027160:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8027162:	697b      	ldr	r3, [r7, #20]
 8027164:	2b00      	cmp	r3, #0
 8027166:	dd34      	ble.n	80271d2 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 8027168:	683b      	ldr	r3, [r7, #0]
 802716a:	689a      	ldr	r2, [r3, #8]
 802716c:	683b      	ldr	r3, [r7, #0]
 802716e:	681b      	ldr	r3, [r3, #0]
 8027170:	1ad3      	subs	r3, r2, r3
 8027172:	109b      	asrs	r3, r3, #2
 8027174:	4a1b      	ldr	r2, [pc, #108]	; (80271e4 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8027176:	fb02 f303 	mul.w	r3, r2, r3
 802717a:	61bb      	str	r3, [r7, #24]
 802717c:	f107 0218 	add.w	r2, r7, #24
 8027180:	f107 0314 	add.w	r3, r7, #20
 8027184:	4611      	mov	r1, r2
 8027186:	4618      	mov	r0, r3
 8027188:	f7fe fd4d 	bl	8025c26 <_ZSt3minIiERKT_S2_S2_>
 802718c:	4603      	mov	r3, r0
	  const difference_type __clen
 802718e:	681b      	ldr	r3, [r3, #0]
 8027190:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8027192:	69fa      	ldr	r2, [r7, #28]
 8027194:	4613      	mov	r3, r2
 8027196:	009b      	lsls	r3, r3, #2
 8027198:	4413      	add	r3, r2
 802719a:	009b      	lsls	r3, r3, #2
 802719c:	461a      	mov	r2, r3
 802719e:	68bb      	ldr	r3, [r7, #8]
 80271a0:	1899      	adds	r1, r3, r2
 80271a2:	683b      	ldr	r3, [r7, #0]
 80271a4:	681b      	ldr	r3, [r3, #0]
 80271a6:	461a      	mov	r2, r3
 80271a8:	68b8      	ldr	r0, [r7, #8]
 80271aa:	f000 f8f8 	bl	802739e <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
	  __first += __clen;
 80271ae:	69fa      	ldr	r2, [r7, #28]
 80271b0:	4613      	mov	r3, r2
 80271b2:	009b      	lsls	r3, r3, #2
 80271b4:	4413      	add	r3, r2
 80271b6:	009b      	lsls	r3, r3, #2
 80271b8:	461a      	mov	r2, r3
 80271ba:	68bb      	ldr	r3, [r7, #8]
 80271bc:	4413      	add	r3, r2
 80271be:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 80271c0:	69f9      	ldr	r1, [r7, #28]
 80271c2:	6838      	ldr	r0, [r7, #0]
 80271c4:	f7fe fa48 	bl	8025658 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 80271c8:	697a      	ldr	r2, [r7, #20]
 80271ca:	69fb      	ldr	r3, [r7, #28]
 80271cc:	1ad3      	subs	r3, r2, r3
 80271ce:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80271d0:	e7c7      	b.n	8027162 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
      return __result;
 80271d2:	6839      	ldr	r1, [r7, #0]
 80271d4:	68f8      	ldr	r0, [r7, #12]
 80271d6:	f7fc fff4 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 80271da:	68f8      	ldr	r0, [r7, #12]
 80271dc:	3720      	adds	r7, #32
 80271de:	46bd      	mov	sp, r7
 80271e0:	bd80      	pop	{r7, pc}
 80271e2:	bf00      	nop
 80271e4:	cccccccd 	.word	0xcccccccd

080271e8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 80271e8:	b580      	push	{r7, lr}
 80271ea:	b088      	sub	sp, #32
 80271ec:	af00      	add	r7, sp, #0
 80271ee:	60f8      	str	r0, [r7, #12]
 80271f0:	60b9      	str	r1, [r7, #8]
 80271f2:	607a      	str	r2, [r7, #4]
 80271f4:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 80271f6:	687a      	ldr	r2, [r7, #4]
 80271f8:	68bb      	ldr	r3, [r7, #8]
 80271fa:	1ad3      	subs	r3, r2, r3
 80271fc:	109b      	asrs	r3, r3, #2
 80271fe:	4a2c      	ldr	r2, [pc, #176]	; (80272b0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 8027200:	fb02 f303 	mul.w	r3, r2, r3
 8027204:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8027206:	697b      	ldr	r3, [r7, #20]
 8027208:	2b00      	cmp	r3, #0
 802720a:	dd49      	ble.n	80272a0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 802720c:	683b      	ldr	r3, [r7, #0]
 802720e:	681a      	ldr	r2, [r3, #0]
 8027210:	683b      	ldr	r3, [r7, #0]
 8027212:	685b      	ldr	r3, [r3, #4]
 8027214:	1ad3      	subs	r3, r2, r3
 8027216:	109b      	asrs	r3, r3, #2
 8027218:	4a25      	ldr	r2, [pc, #148]	; (80272b0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 802721a:	fb02 f303 	mul.w	r3, r2, r3
 802721e:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 8027220:	683b      	ldr	r3, [r7, #0]
 8027222:	681b      	ldr	r3, [r3, #0]
 8027224:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 8027226:	693b      	ldr	r3, [r7, #16]
 8027228:	2b00      	cmp	r3, #0
 802722a:	d10f      	bne.n	802724c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 802722c:	f7fd faad 	bl	802478a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8027230:	4603      	mov	r3, r0
 8027232:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 8027234:	683b      	ldr	r3, [r7, #0]
 8027236:	68db      	ldr	r3, [r3, #12]
 8027238:	3b04      	subs	r3, #4
 802723a:	681a      	ldr	r2, [r3, #0]
 802723c:	693b      	ldr	r3, [r7, #16]
 802723e:	4619      	mov	r1, r3
 8027240:	460b      	mov	r3, r1
 8027242:	009b      	lsls	r3, r3, #2
 8027244:	440b      	add	r3, r1
 8027246:	009b      	lsls	r3, r3, #2
 8027248:	4413      	add	r3, r2
 802724a:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 802724c:	f107 0210 	add.w	r2, r7, #16
 8027250:	f107 0314 	add.w	r3, r7, #20
 8027254:	4611      	mov	r1, r2
 8027256:	4618      	mov	r0, r3
 8027258:	f7fe fce5 	bl	8025c26 <_ZSt3minIiERKT_S2_S2_>
 802725c:	4603      	mov	r3, r0
 802725e:	681b      	ldr	r3, [r3, #0]
 8027260:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 8027262:	69ba      	ldr	r2, [r7, #24]
 8027264:	4613      	mov	r3, r2
 8027266:	009b      	lsls	r3, r3, #2
 8027268:	4413      	add	r3, r2
 802726a:	009b      	lsls	r3, r3, #2
 802726c:	425b      	negs	r3, r3
 802726e:	687a      	ldr	r2, [r7, #4]
 8027270:	4413      	add	r3, r2
 8027272:	69fa      	ldr	r2, [r7, #28]
 8027274:	6879      	ldr	r1, [r7, #4]
 8027276:	4618      	mov	r0, r3
 8027278:	f000 f8a1 	bl	80273be <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>

	  __last -= __clen;
 802727c:	69ba      	ldr	r2, [r7, #24]
 802727e:	4613      	mov	r3, r2
 8027280:	009b      	lsls	r3, r3, #2
 8027282:	4413      	add	r3, r2
 8027284:	009b      	lsls	r3, r3, #2
 8027286:	425b      	negs	r3, r3
 8027288:	687a      	ldr	r2, [r7, #4]
 802728a:	4413      	add	r3, r2
 802728c:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 802728e:	69b9      	ldr	r1, [r7, #24]
 8027290:	6838      	ldr	r0, [r7, #0]
 8027292:	f7ff f9fe 	bl	8026692 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	  __len -= __clen;
 8027296:	697a      	ldr	r2, [r7, #20]
 8027298:	69bb      	ldr	r3, [r7, #24]
 802729a:	1ad3      	subs	r3, r2, r3
 802729c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802729e:	e7b2      	b.n	8027206 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 80272a0:	6839      	ldr	r1, [r7, #0]
 80272a2:	68f8      	ldr	r0, [r7, #12]
 80272a4:	f7fc ff8d 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 80272a8:	68f8      	ldr	r0, [r7, #12]
 80272aa:	3720      	adds	r7, #32
 80272ac:	46bd      	mov	sp, r7
 80272ae:	bd80      	pop	{r7, pc}
 80272b0:	cccccccd 	.word	0xcccccccd

080272b4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80272b4:	b580      	push	{r7, lr}
 80272b6:	b086      	sub	sp, #24
 80272b8:	af00      	add	r7, sp, #0
 80272ba:	60f8      	str	r0, [r7, #12]
 80272bc:	60b9      	str	r1, [r7, #8]
 80272be:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80272c0:	68ba      	ldr	r2, [r7, #8]
 80272c2:	68fb      	ldr	r3, [r7, #12]
 80272c4:	1ad3      	subs	r3, r2, r3
 80272c6:	109b      	asrs	r3, r3, #2
 80272c8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80272ca:	697b      	ldr	r3, [r7, #20]
 80272cc:	2b00      	cmp	r3, #0
 80272ce:	d006      	beq.n	80272de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80272d0:	697b      	ldr	r3, [r7, #20]
 80272d2:	009b      	lsls	r3, r3, #2
 80272d4:	461a      	mov	r2, r3
 80272d6:	68f9      	ldr	r1, [r7, #12]
 80272d8:	6878      	ldr	r0, [r7, #4]
 80272da:	f014 fcc7 	bl	803bc6c <memmove>
	  return __result + _Num;
 80272de:	697b      	ldr	r3, [r7, #20]
 80272e0:	009b      	lsls	r3, r3, #2
 80272e2:	687a      	ldr	r2, [r7, #4]
 80272e4:	4413      	add	r3, r2
	}
 80272e6:	4618      	mov	r0, r3
 80272e8:	3718      	adds	r7, #24
 80272ea:	46bd      	mov	sp, r7
 80272ec:	bd80      	pop	{r7, pc}

080272ee <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80272ee:	b580      	push	{r7, lr}
 80272f0:	b086      	sub	sp, #24
 80272f2:	af00      	add	r7, sp, #0
 80272f4:	60f8      	str	r0, [r7, #12]
 80272f6:	60b9      	str	r1, [r7, #8]
 80272f8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80272fa:	68ba      	ldr	r2, [r7, #8]
 80272fc:	68fb      	ldr	r3, [r7, #12]
 80272fe:	1ad3      	subs	r3, r2, r3
 8027300:	109b      	asrs	r3, r3, #2
 8027302:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027304:	697b      	ldr	r3, [r7, #20]
 8027306:	2b00      	cmp	r3, #0
 8027308:	d00a      	beq.n	8027320 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802730a:	697b      	ldr	r3, [r7, #20]
 802730c:	009b      	lsls	r3, r3, #2
 802730e:	425b      	negs	r3, r3
 8027310:	687a      	ldr	r2, [r7, #4]
 8027312:	18d0      	adds	r0, r2, r3
 8027314:	697b      	ldr	r3, [r7, #20]
 8027316:	009b      	lsls	r3, r3, #2
 8027318:	461a      	mov	r2, r3
 802731a:	68f9      	ldr	r1, [r7, #12]
 802731c:	f014 fca6 	bl	803bc6c <memmove>
	  return __result - _Num;
 8027320:	697b      	ldr	r3, [r7, #20]
 8027322:	009b      	lsls	r3, r3, #2
 8027324:	425b      	negs	r3, r3
 8027326:	687a      	ldr	r2, [r7, #4]
 8027328:	4413      	add	r3, r2
	}
 802732a:	4618      	mov	r0, r3
 802732c:	3718      	adds	r7, #24
 802732e:	46bd      	mov	sp, r7
 8027330:	bd80      	pop	{r7, pc}

08027332 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8027332:	b580      	push	{r7, lr}
 8027334:	b084      	sub	sp, #16
 8027336:	af00      	add	r7, sp, #0
 8027338:	60f8      	str	r0, [r7, #12]
 802733a:	60b9      	str	r1, [r7, #8]
 802733c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802733e:	687a      	ldr	r2, [r7, #4]
 8027340:	68b9      	ldr	r1, [r7, #8]
 8027342:	68f8      	ldr	r0, [r7, #12]
 8027344:	f000 f84b 	bl	80273de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>
 8027348:	4603      	mov	r3, r0
    }
 802734a:	4618      	mov	r0, r3
 802734c:	3710      	adds	r7, #16
 802734e:	46bd      	mov	sp, r7
 8027350:	bd80      	pop	{r7, pc}

08027352 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8027352:	b580      	push	{r7, lr}
 8027354:	b084      	sub	sp, #16
 8027356:	af00      	add	r7, sp, #0
 8027358:	60f8      	str	r0, [r7, #12]
 802735a:	60b9      	str	r1, [r7, #8]
 802735c:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802735e:	687a      	ldr	r2, [r7, #4]
 8027360:	68b9      	ldr	r1, [r7, #8]
 8027362:	68f8      	ldr	r0, [r7, #12]
 8027364:	f000 f858 	bl	8027418 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>
 8027368:	4603      	mov	r3, r0
    }
 802736a:	4618      	mov	r0, r3
 802736c:	3710      	adds	r7, #16
 802736e:	46bd      	mov	sp, r7
 8027370:	bd80      	pop	{r7, pc}

08027372 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8027372:	b580      	push	{r7, lr}
 8027374:	b086      	sub	sp, #24
 8027376:	af00      	add	r7, sp, #0
 8027378:	6078      	str	r0, [r7, #4]
 802737a:	6039      	str	r1, [r7, #0]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 802737c:	f107 0308 	add.w	r3, r7, #8
 8027380:	6839      	ldr	r1, [r7, #0]
 8027382:	4618      	mov	r0, r3
 8027384:	f000 f86a 	bl	802745c <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>
 8027388:	687b      	ldr	r3, [r7, #4]
 802738a:	f107 0208 	add.w	r2, r7, #8
 802738e:	4611      	mov	r1, r2
 8027390:	4618      	mov	r0, r3
 8027392:	f7ff fa10 	bl	80267b6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027396:	6878      	ldr	r0, [r7, #4]
 8027398:	3718      	adds	r7, #24
 802739a:	46bd      	mov	sp, r7
 802739c:	bd80      	pop	{r7, pc}

0802739e <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802739e:	b580      	push	{r7, lr}
 80273a0:	b084      	sub	sp, #16
 80273a2:	af00      	add	r7, sp, #0
 80273a4:	60f8      	str	r0, [r7, #12]
 80273a6:	60b9      	str	r1, [r7, #8]
 80273a8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80273aa:	687a      	ldr	r2, [r7, #4]
 80273ac:	68b9      	ldr	r1, [r7, #8]
 80273ae:	68f8      	ldr	r0, [r7, #12]
 80273b0:	f000 f862 	bl	8027478 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 80273b4:	4603      	mov	r3, r0
 80273b6:	4618      	mov	r0, r3
 80273b8:	3710      	adds	r7, #16
 80273ba:	46bd      	mov	sp, r7
 80273bc:	bd80      	pop	{r7, pc}

080273be <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80273be:	b580      	push	{r7, lr}
 80273c0:	b084      	sub	sp, #16
 80273c2:	af00      	add	r7, sp, #0
 80273c4:	60f8      	str	r0, [r7, #12]
 80273c6:	60b9      	str	r1, [r7, #8]
 80273c8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80273ca:	687a      	ldr	r2, [r7, #4]
 80273cc:	68b9      	ldr	r1, [r7, #8]
 80273ce:	68f8      	ldr	r0, [r7, #12]
 80273d0:	f000 f862 	bl	8027498 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 80273d4:	4603      	mov	r3, r0
 80273d6:	4618      	mov	r0, r3
 80273d8:	3710      	adds	r7, #16
 80273da:	46bd      	mov	sp, r7
 80273dc:	bd80      	pop	{r7, pc}

080273de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80273de:	b580      	push	{r7, lr}
 80273e0:	b086      	sub	sp, #24
 80273e2:	af00      	add	r7, sp, #0
 80273e4:	60f8      	str	r0, [r7, #12]
 80273e6:	60b9      	str	r1, [r7, #8]
 80273e8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80273ea:	68ba      	ldr	r2, [r7, #8]
 80273ec:	68fb      	ldr	r3, [r7, #12]
 80273ee:	1ad3      	subs	r3, r2, r3
 80273f0:	109b      	asrs	r3, r3, #2
 80273f2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80273f4:	697b      	ldr	r3, [r7, #20]
 80273f6:	2b00      	cmp	r3, #0
 80273f8:	d006      	beq.n	8027408 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80273fa:	697b      	ldr	r3, [r7, #20]
 80273fc:	009b      	lsls	r3, r3, #2
 80273fe:	461a      	mov	r2, r3
 8027400:	68f9      	ldr	r1, [r7, #12]
 8027402:	6878      	ldr	r0, [r7, #4]
 8027404:	f014 fc32 	bl	803bc6c <memmove>
	  return __result + _Num;
 8027408:	697b      	ldr	r3, [r7, #20]
 802740a:	009b      	lsls	r3, r3, #2
 802740c:	687a      	ldr	r2, [r7, #4]
 802740e:	4413      	add	r3, r2
	}
 8027410:	4618      	mov	r0, r3
 8027412:	3718      	adds	r7, #24
 8027414:	46bd      	mov	sp, r7
 8027416:	bd80      	pop	{r7, pc}

08027418 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8027418:	b580      	push	{r7, lr}
 802741a:	b086      	sub	sp, #24
 802741c:	af00      	add	r7, sp, #0
 802741e:	60f8      	str	r0, [r7, #12]
 8027420:	60b9      	str	r1, [r7, #8]
 8027422:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8027424:	68ba      	ldr	r2, [r7, #8]
 8027426:	68fb      	ldr	r3, [r7, #12]
 8027428:	1ad3      	subs	r3, r2, r3
 802742a:	109b      	asrs	r3, r3, #2
 802742c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802742e:	697b      	ldr	r3, [r7, #20]
 8027430:	2b00      	cmp	r3, #0
 8027432:	d00a      	beq.n	802744a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8027434:	697b      	ldr	r3, [r7, #20]
 8027436:	009b      	lsls	r3, r3, #2
 8027438:	425b      	negs	r3, r3
 802743a:	687a      	ldr	r2, [r7, #4]
 802743c:	18d0      	adds	r0, r2, r3
 802743e:	697b      	ldr	r3, [r7, #20]
 8027440:	009b      	lsls	r3, r3, #2
 8027442:	461a      	mov	r2, r3
 8027444:	68f9      	ldr	r1, [r7, #12]
 8027446:	f014 fc11 	bl	803bc6c <memmove>
	  return __result - _Num;
 802744a:	697b      	ldr	r3, [r7, #20]
 802744c:	009b      	lsls	r3, r3, #2
 802744e:	425b      	negs	r3, r3
 8027450:	687a      	ldr	r2, [r7, #4]
 8027452:	4413      	add	r3, r2
	}
 8027454:	4618      	mov	r0, r3
 8027456:	3718      	adds	r7, #24
 8027458:	46bd      	mov	sp, r7
 802745a:	bd80      	pop	{r7, pc}

0802745c <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>:
      base() const
 802745c:	b580      	push	{r7, lr}
 802745e:	b082      	sub	sp, #8
 8027460:	af00      	add	r7, sp, #0
 8027462:	6078      	str	r0, [r7, #4]
 8027464:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 8027466:	683b      	ldr	r3, [r7, #0]
 8027468:	4619      	mov	r1, r3
 802746a:	6878      	ldr	r0, [r7, #4]
 802746c:	f7fc fea9 	bl	80241c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027470:	6878      	ldr	r0, [r7, #4]
 8027472:	3708      	adds	r7, #8
 8027474:	46bd      	mov	sp, r7
 8027476:	bd80      	pop	{r7, pc}

08027478 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8027478:	b580      	push	{r7, lr}
 802747a:	b084      	sub	sp, #16
 802747c:	af00      	add	r7, sp, #0
 802747e:	60f8      	str	r0, [r7, #12]
 8027480:	60b9      	str	r1, [r7, #8]
 8027482:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8027484:	687a      	ldr	r2, [r7, #4]
 8027486:	68b9      	ldr	r1, [r7, #8]
 8027488:	68f8      	ldr	r0, [r7, #12]
 802748a:	f000 f815 	bl	80274b8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 802748e:	4603      	mov	r3, r0
    }
 8027490:	4618      	mov	r0, r3
 8027492:	3710      	adds	r7, #16
 8027494:	46bd      	mov	sp, r7
 8027496:	bd80      	pop	{r7, pc}

08027498 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8027498:	b580      	push	{r7, lr}
 802749a:	b084      	sub	sp, #16
 802749c:	af00      	add	r7, sp, #0
 802749e:	60f8      	str	r0, [r7, #12]
 80274a0:	60b9      	str	r1, [r7, #8]
 80274a2:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80274a4:	687a      	ldr	r2, [r7, #4]
 80274a6:	68b9      	ldr	r1, [r7, #8]
 80274a8:	68f8      	ldr	r0, [r7, #12]
 80274aa:	f000 f82f 	bl	802750c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 80274ae:	4603      	mov	r3, r0
    }
 80274b0:	4618      	mov	r0, r3
 80274b2:	3710      	adds	r7, #16
 80274b4:	46bd      	mov	sp, r7
 80274b6:	bd80      	pop	{r7, pc}

080274b8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80274b8:	b580      	push	{r7, lr}
 80274ba:	b086      	sub	sp, #24
 80274bc:	af00      	add	r7, sp, #0
 80274be:	60f8      	str	r0, [r7, #12]
 80274c0:	60b9      	str	r1, [r7, #8]
 80274c2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80274c4:	68ba      	ldr	r2, [r7, #8]
 80274c6:	68fb      	ldr	r3, [r7, #12]
 80274c8:	1ad3      	subs	r3, r2, r3
 80274ca:	109b      	asrs	r3, r3, #2
 80274cc:	4a0e      	ldr	r2, [pc, #56]	; (8027508 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 80274ce:	fb02 f303 	mul.w	r3, r2, r3
 80274d2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80274d4:	697b      	ldr	r3, [r7, #20]
 80274d6:	2b00      	cmp	r3, #0
 80274d8:	d009      	beq.n	80274ee <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80274da:	697a      	ldr	r2, [r7, #20]
 80274dc:	4613      	mov	r3, r2
 80274de:	009b      	lsls	r3, r3, #2
 80274e0:	4413      	add	r3, r2
 80274e2:	009b      	lsls	r3, r3, #2
 80274e4:	461a      	mov	r2, r3
 80274e6:	68f9      	ldr	r1, [r7, #12]
 80274e8:	6878      	ldr	r0, [r7, #4]
 80274ea:	f014 fbbf 	bl	803bc6c <memmove>
	  return __result + _Num;
 80274ee:	697a      	ldr	r2, [r7, #20]
 80274f0:	4613      	mov	r3, r2
 80274f2:	009b      	lsls	r3, r3, #2
 80274f4:	4413      	add	r3, r2
 80274f6:	009b      	lsls	r3, r3, #2
 80274f8:	461a      	mov	r2, r3
 80274fa:	687b      	ldr	r3, [r7, #4]
 80274fc:	4413      	add	r3, r2
	}
 80274fe:	4618      	mov	r0, r3
 8027500:	3718      	adds	r7, #24
 8027502:	46bd      	mov	sp, r7
 8027504:	bd80      	pop	{r7, pc}
 8027506:	bf00      	nop
 8027508:	cccccccd 	.word	0xcccccccd

0802750c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802750c:	b580      	push	{r7, lr}
 802750e:	b086      	sub	sp, #24
 8027510:	af00      	add	r7, sp, #0
 8027512:	60f8      	str	r0, [r7, #12]
 8027514:	60b9      	str	r1, [r7, #8]
 8027516:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8027518:	68ba      	ldr	r2, [r7, #8]
 802751a:	68fb      	ldr	r3, [r7, #12]
 802751c:	1ad3      	subs	r3, r2, r3
 802751e:	109b      	asrs	r3, r3, #2
 8027520:	4a11      	ldr	r2, [pc, #68]	; (8027568 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x5c>)
 8027522:	fb02 f303 	mul.w	r3, r2, r3
 8027526:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027528:	697b      	ldr	r3, [r7, #20]
 802752a:	2b00      	cmp	r3, #0
 802752c:	d010      	beq.n	8027550 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802752e:	697a      	ldr	r2, [r7, #20]
 8027530:	4613      	mov	r3, r2
 8027532:	009b      	lsls	r3, r3, #2
 8027534:	4413      	add	r3, r2
 8027536:	009b      	lsls	r3, r3, #2
 8027538:	425b      	negs	r3, r3
 802753a:	687a      	ldr	r2, [r7, #4]
 802753c:	18d0      	adds	r0, r2, r3
 802753e:	697a      	ldr	r2, [r7, #20]
 8027540:	4613      	mov	r3, r2
 8027542:	009b      	lsls	r3, r3, #2
 8027544:	4413      	add	r3, r2
 8027546:	009b      	lsls	r3, r3, #2
 8027548:	461a      	mov	r2, r3
 802754a:	68f9      	ldr	r1, [r7, #12]
 802754c:	f014 fb8e 	bl	803bc6c <memmove>
	  return __result - _Num;
 8027550:	697a      	ldr	r2, [r7, #20]
 8027552:	4613      	mov	r3, r2
 8027554:	009b      	lsls	r3, r3, #2
 8027556:	4413      	add	r3, r2
 8027558:	009b      	lsls	r3, r3, #2
 802755a:	425b      	negs	r3, r3
 802755c:	687a      	ldr	r2, [r7, #4]
 802755e:	4413      	add	r3, r2
	}
 8027560:	4618      	mov	r0, r3
 8027562:	3718      	adds	r7, #24
 8027564:	46bd      	mov	sp, r7
 8027566:	bd80      	pop	{r7, pc}
 8027568:	cccccccd 	.word	0xcccccccd

0802756c <_Z41__static_initialization_and_destruction_0ii>:
 802756c:	b580      	push	{r7, lr}
 802756e:	b082      	sub	sp, #8
 8027570:	af00      	add	r7, sp, #0
 8027572:	6078      	str	r0, [r7, #4]
 8027574:	6039      	str	r1, [r7, #0]
 8027576:	687b      	ldr	r3, [r7, #4]
 8027578:	2b01      	cmp	r3, #1
 802757a:	d107      	bne.n	802758c <_Z41__static_initialization_and_destruction_0ii+0x20>
 802757c:	683b      	ldr	r3, [r7, #0]
 802757e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027582:	4293      	cmp	r3, r2
 8027584:	d102      	bne.n	802758c <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 8027586:	4809      	ldr	r0, [pc, #36]	; (80275ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8027588:	f7fb fbf6 	bl	8022d78 <_ZN18MotherboardContextC1Ev>
 802758c:	687b      	ldr	r3, [r7, #4]
 802758e:	2b00      	cmp	r3, #0
 8027590:	d107      	bne.n	80275a2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8027592:	683b      	ldr	r3, [r7, #0]
 8027594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027598:	4293      	cmp	r3, r2
 802759a:	d102      	bne.n	80275a2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 802759c:	4803      	ldr	r0, [pc, #12]	; (80275ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 802759e:	f7fb fc35 	bl	8022e0c <_ZN18MotherboardContextD1Ev>
}
 80275a2:	bf00      	nop
 80275a4:	3708      	adds	r7, #8
 80275a6:	46bd      	mov	sp, r7
 80275a8:	bd80      	pop	{r7, pc}
 80275aa:	bf00      	nop
 80275ac:	240001d0 	.word	0x240001d0

080275b0 <_GLOBAL__sub_I_MotherboardInit>:
 80275b0:	b580      	push	{r7, lr}
 80275b2:	af00      	add	r7, sp, #0
 80275b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80275b8:	2001      	movs	r0, #1
 80275ba:	f7ff ffd7 	bl	802756c <_Z41__static_initialization_and_destruction_0ii>
 80275be:	bd80      	pop	{r7, pc}

080275c0 <_GLOBAL__sub_D_MotherboardInit>:
 80275c0:	b580      	push	{r7, lr}
 80275c2:	af00      	add	r7, sp, #0
 80275c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80275c8:	2000      	movs	r0, #0
 80275ca:	f7ff ffcf 	bl	802756c <_Z41__static_initialization_and_destruction_0ii>
 80275ce:	bd80      	pop	{r7, pc}

080275d0 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 80275d0:	b580      	push	{r7, lr}
 80275d2:	b086      	sub	sp, #24
 80275d4:	af00      	add	r7, sp, #0
 80275d6:	60b9      	str	r1, [r7, #8]
 80275d8:	607b      	str	r3, [r7, #4]
 80275da:	4603      	mov	r3, r0
 80275dc:	73fb      	strb	r3, [r7, #15]
 80275de:	4613      	mov	r3, r2
 80275e0:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 80275e2:	2300      	movs	r3, #0
 80275e4:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 80275e6:	687b      	ldr	r3, [r7, #4]
 80275e8:	2b00      	cmp	r3, #0
 80275ea:	d008      	beq.n	80275fe <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 80275ec:	89ba      	ldrh	r2, [r7, #12]
 80275ee:	687b      	ldr	r3, [r7, #4]
 80275f0:	7bf8      	ldrb	r0, [r7, #15]
 80275f2:	68b9      	ldr	r1, [r7, #8]
 80275f4:	f001 f925 	bl	8028842 <bhy2_hif_get_regs>
 80275f8:	4603      	mov	r3, r0
 80275fa:	75fb      	strb	r3, [r7, #23]
 80275fc:	e001      	b.n	8027602 <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80275fe:	23ff      	movs	r3, #255	; 0xff
 8027600:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027602:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027606:	4618      	mov	r0, r3
 8027608:	3718      	adds	r7, #24
 802760a:	46bd      	mov	sp, r7
 802760c:	bd80      	pop	{r7, pc}

0802760e <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 802760e:	b590      	push	{r4, r7, lr}
 8027610:	b08f      	sub	sp, #60	; 0x3c
 8027612:	af02      	add	r7, sp, #8
 8027614:	60f8      	str	r0, [r7, #12]
 8027616:	60b9      	str	r1, [r7, #8]
 8027618:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 802761a:	2300      	movs	r3, #0
 802761c:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 802761e:	687b      	ldr	r3, [r7, #4]
 8027620:	2b00      	cmp	r3, #0
 8027622:	d002      	beq.n	802762a <bhy2_get_and_process_fifo+0x1c>
 8027624:	68fb      	ldr	r3, [r7, #12]
 8027626:	2b00      	cmp	r3, #0
 8027628:	d102      	bne.n	8027630 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 802762a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802762e:	e11b      	b.n	8027868 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 8027630:	68bb      	ldr	r3, [r7, #8]
 8027632:	2b00      	cmp	r3, #0
 8027634:	d102      	bne.n	802763c <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 8027636:	f06f 0305 	mvn.w	r3, #5
 802763a:	e115      	b.n	8027868 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 802763c:	68ba      	ldr	r2, [r7, #8]
 802763e:	2100      	movs	r1, #0
 8027640:	68f8      	ldr	r0, [r7, #12]
 8027642:	f014 fb2d 	bl	803bca0 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 8027646:	f107 0314 	add.w	r3, r7, #20
 802764a:	2214      	movs	r2, #20
 802764c:	2100      	movs	r1, #0
 802764e:	4618      	mov	r0, r3
 8027650:	f014 fb26 	bl	803bca0 <memset>

    fifos.buffer = work_buffer;
 8027654:	68fb      	ldr	r3, [r7, #12]
 8027656:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 8027658:	68bb      	ldr	r3, [r7, #8]
 802765a:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 802765c:	687a      	ldr	r2, [r7, #4]
 802765e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8027662:	4611      	mov	r1, r2
 8027664:	4618      	mov	r0, r3
 8027666:	f001 fa5f 	bl	8028b28 <bhy2_hif_get_interrupt_status>
 802766a:	4603      	mov	r3, r0
 802766c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 8027670:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027674:	2b00      	cmp	r3, #0
 8027676:	d002      	beq.n	802767e <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 8027678:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802767c:	e0f4      	b.n	8027868 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 802767e:	2300      	movs	r3, #0
 8027680:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8027682:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8027686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802768a:	e042      	b.n	8027712 <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 802768c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027690:	f003 0306 	and.w	r3, r3, #6
 8027694:	2b02      	cmp	r3, #2
 8027696:	d00e      	beq.n	80276b6 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8027698:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802769c:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 80276a0:	2b04      	cmp	r3, #4
 80276a2:	d008      	beq.n	80276b6 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 80276a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80276a8:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 80276ac:	2b06      	cmp	r3, #6
 80276ae:	d002      	beq.n	80276b6 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 80276b0:	69fb      	ldr	r3, [r7, #28]
 80276b2:	2b00      	cmp	r3, #0
 80276b4:	d020      	beq.n	80276f8 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 80276b6:	2300      	movs	r3, #0
 80276b8:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 80276ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80276bc:	69bb      	ldr	r3, [r7, #24]
 80276be:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 80276c0:	6a3a      	ldr	r2, [r7, #32]
 80276c2:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 80276c4:	1ad1      	subs	r1, r2, r3
 80276c6:	687b      	ldr	r3, [r7, #4]
 80276c8:	f107 0214 	add.w	r2, r7, #20
 80276cc:	f102 0408 	add.w	r4, r2, #8
 80276d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80276d4:	9300      	str	r3, [sp, #0]
 80276d6:	4623      	mov	r3, r4
 80276d8:	f001 fad7 	bl	8028c8a <bhy2_hif_get_wakeup_fifo>
 80276dc:	4603      	mov	r3, r0
 80276de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 80276e2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80276e6:	2b00      	cmp	r3, #0
 80276e8:	d002      	beq.n	80276f0 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 80276ea:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80276ee:	e0bb      	b.n	8027868 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 80276f0:	69ba      	ldr	r2, [r7, #24]
 80276f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80276f4:	4413      	add	r3, r2
 80276f6:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 80276f8:	f107 0314 	add.w	r3, r7, #20
 80276fc:	687a      	ldr	r2, [r7, #4]
 80276fe:	4619      	mov	r1, r3
 8027700:	2000      	movs	r0, #0
 8027702:	f000 fbad 	bl	8027e60 <parse_fifo>
 8027706:	4603      	mov	r3, r0
 8027708:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 802770c:	2300      	movs	r3, #0
 802770e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027716:	2b00      	cmp	r3, #0
 8027718:	d102      	bne.n	8027720 <bhy2_get_and_process_fifo+0x112>
 802771a:	69fb      	ldr	r3, [r7, #28]
 802771c:	2b00      	cmp	r3, #0
 802771e:	d003      	beq.n	8027728 <bhy2_get_and_process_fifo+0x11a>
 8027720:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027724:	2b00      	cmp	r3, #0
 8027726:	d0b1      	beq.n	802768c <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 8027728:	2300      	movs	r3, #0
 802772a:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802772c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8027730:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027734:	e042      	b.n	80277bc <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8027736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802773a:	f003 0318 	and.w	r3, r3, #24
 802773e:	2b08      	cmp	r3, #8
 8027740:	d00e      	beq.n	8027760 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8027742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027746:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 802774a:	2b10      	cmp	r3, #16
 802774c:	d008      	beq.n	8027760 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802774e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027752:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8027756:	2b18      	cmp	r3, #24
 8027758:	d002      	beq.n	8027760 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802775a:	69fb      	ldr	r3, [r7, #28]
 802775c:	2b00      	cmp	r3, #0
 802775e:	d020      	beq.n	80277a2 <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8027760:	2300      	movs	r3, #0
 8027762:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8027764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027766:	69bb      	ldr	r3, [r7, #24]
 8027768:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 802776a:	6a3a      	ldr	r2, [r7, #32]
 802776c:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 802776e:	1ad1      	subs	r1, r2, r3
 8027770:	687b      	ldr	r3, [r7, #4]
 8027772:	f107 0214 	add.w	r2, r7, #20
 8027776:	f102 0408 	add.w	r4, r2, #8
 802777a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802777e:	9300      	str	r3, [sp, #0]
 8027780:	4623      	mov	r3, r4
 8027782:	f001 fa98 	bl	8028cb6 <bhy2_hif_get_nonwakeup_fifo>
 8027786:	4603      	mov	r3, r0
 8027788:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 802778c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027790:	2b00      	cmp	r3, #0
 8027792:	d002      	beq.n	802779a <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8027794:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027798:	e066      	b.n	8027868 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802779a:	69ba      	ldr	r2, [r7, #24]
 802779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802779e:	4413      	add	r3, r2
 80277a0:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 80277a2:	f107 0314 	add.w	r3, r7, #20
 80277a6:	687a      	ldr	r2, [r7, #4]
 80277a8:	4619      	mov	r1, r3
 80277aa:	2001      	movs	r0, #1
 80277ac:	f000 fb58 	bl	8027e60 <parse_fifo>
 80277b0:	4603      	mov	r3, r0
 80277b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 80277b6:	2300      	movs	r3, #0
 80277b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80277bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80277c0:	2b00      	cmp	r3, #0
 80277c2:	d102      	bne.n	80277ca <bhy2_get_and_process_fifo+0x1bc>
 80277c4:	69fb      	ldr	r3, [r7, #28]
 80277c6:	2b00      	cmp	r3, #0
 80277c8:	d003      	beq.n	80277d2 <bhy2_get_and_process_fifo+0x1c4>
 80277ca:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80277ce:	2b00      	cmp	r3, #0
 80277d0:	d0b1      	beq.n	8027736 <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 80277d2:	2300      	movs	r3, #0
 80277d4:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80277d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80277da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80277de:	e036      	b.n	802784e <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 80277e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80277e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80277e8:	2b00      	cmp	r3, #0
 80277ea:	d102      	bne.n	80277f2 <bhy2_get_and_process_fifo+0x1e4>
 80277ec:	69fb      	ldr	r3, [r7, #28]
 80277ee:	2b00      	cmp	r3, #0
 80277f0:	d020      	beq.n	8027834 <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 80277f2:	2300      	movs	r3, #0
 80277f4:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 80277f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80277f8:	69bb      	ldr	r3, [r7, #24]
 80277fa:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 80277fc:	6a3a      	ldr	r2, [r7, #32]
 80277fe:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8027800:	1ad1      	subs	r1, r2, r3
 8027802:	687b      	ldr	r3, [r7, #4]
 8027804:	f107 0214 	add.w	r2, r7, #20
 8027808:	f102 0408 	add.w	r4, r2, #8
 802780c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8027810:	9300      	str	r3, [sp, #0]
 8027812:	4623      	mov	r3, r4
 8027814:	f001 fab0 	bl	8028d78 <bhy2_hif_get_status_fifo_async>
 8027818:	4603      	mov	r3, r0
 802781a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 802781e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027822:	2b00      	cmp	r3, #0
 8027824:	d002      	beq.n	802782c <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8027826:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802782a:	e01d      	b.n	8027868 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802782c:	69ba      	ldr	r2, [r7, #24]
 802782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027830:	4413      	add	r3, r2
 8027832:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8027834:	f107 0314 	add.w	r3, r7, #20
 8027838:	687a      	ldr	r2, [r7, #4]
 802783a:	4619      	mov	r1, r3
 802783c:	2002      	movs	r0, #2
 802783e:	f000 fb0f 	bl	8027e60 <parse_fifo>
 8027842:	4603      	mov	r3, r0
 8027844:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8027848:	2300      	movs	r3, #0
 802784a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802784e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027852:	2b00      	cmp	r3, #0
 8027854:	d102      	bne.n	802785c <bhy2_get_and_process_fifo+0x24e>
 8027856:	69fb      	ldr	r3, [r7, #28]
 8027858:	2b00      	cmp	r3, #0
 802785a:	d003      	beq.n	8027864 <bhy2_get_and_process_fifo+0x256>
 802785c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027860:	2b00      	cmp	r3, #0
 8027862:	d0bd      	beq.n	80277e0 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8027864:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8027868:	4618      	mov	r0, r3
 802786a:	3734      	adds	r7, #52	; 0x34
 802786c:	46bd      	mov	sp, r7
 802786e:	bd90      	pop	{r4, r7, pc}

08027870 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8027870:	b580      	push	{r7, lr}
 8027872:	b086      	sub	sp, #24
 8027874:	af00      	add	r7, sp, #0
 8027876:	4603      	mov	r3, r0
 8027878:	ed87 0a02 	vstr	s0, [r7, #8]
 802787c:	6079      	str	r1, [r7, #4]
 802787e:	603a      	str	r2, [r7, #0]
 8027880:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027882:	2300      	movs	r3, #0
 8027884:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8027886:	683b      	ldr	r3, [r7, #0]
 8027888:	2b00      	cmp	r3, #0
 802788a:	d00a      	beq.n	80278a2 <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 802788c:	683a      	ldr	r2, [r7, #0]
 802788e:	7bfb      	ldrb	r3, [r7, #15]
 8027890:	6879      	ldr	r1, [r7, #4]
 8027892:	ed97 0a02 	vldr	s0, [r7, #8]
 8027896:	4618      	mov	r0, r3
 8027898:	f001 fa84 	bl	8028da4 <bhy2_hif_exec_sensor_conf_cmd>
 802789c:	4603      	mov	r3, r0
 802789e:	75fb      	strb	r3, [r7, #23]
 80278a0:	e001      	b.n	80278a6 <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80278a2:	23ff      	movs	r3, #255	; 0xff
 80278a4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80278a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80278aa:	4618      	mov	r0, r3
 80278ac:	3718      	adds	r7, #24
 80278ae:	46bd      	mov	sp, r7
 80278b0:	bd80      	pop	{r7, pc}

080278b2 <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 80278b2:	b580      	push	{r7, lr}
 80278b4:	b084      	sub	sp, #16
 80278b6:	af00      	add	r7, sp, #0
 80278b8:	6078      	str	r0, [r7, #4]
 80278ba:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 80278bc:	2300      	movs	r3, #0
 80278be:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 80278c0:	683b      	ldr	r3, [r7, #0]
 80278c2:	2b00      	cmp	r3, #0
 80278c4:	d007      	beq.n	80278d6 <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 80278c6:	683b      	ldr	r3, [r7, #0]
 80278c8:	4619      	mov	r1, r3
 80278ca:	6878      	ldr	r0, [r7, #4]
 80278cc:	f001 f8e8 	bl	8028aa0 <bhy2_hif_get_product_id>
 80278d0:	4603      	mov	r3, r0
 80278d2:	73fb      	strb	r3, [r7, #15]
 80278d4:	e001      	b.n	80278da <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80278d6:	23ff      	movs	r3, #255	; 0xff
 80278d8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80278da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80278de:	4618      	mov	r0, r3
 80278e0:	3710      	adds	r7, #16
 80278e2:	46bd      	mov	sp, r7
 80278e4:	bd80      	pop	{r7, pc}

080278e6 <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 80278e6:	b580      	push	{r7, lr}
 80278e8:	b084      	sub	sp, #16
 80278ea:	af00      	add	r7, sp, #0
 80278ec:	6078      	str	r0, [r7, #4]
 80278ee:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 80278f0:	2300      	movs	r3, #0
 80278f2:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 80278f4:	683b      	ldr	r3, [r7, #0]
 80278f6:	2b00      	cmp	r3, #0
 80278f8:	d007      	beq.n	802790a <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 80278fa:	683b      	ldr	r3, [r7, #0]
 80278fc:	4619      	mov	r1, r3
 80278fe:	6878      	ldr	r0, [r7, #4]
 8027900:	f001 f8de 	bl	8028ac0 <bhy2_hif_get_kernel_version>
 8027904:	4603      	mov	r3, r0
 8027906:	73fb      	strb	r3, [r7, #15]
 8027908:	e001      	b.n	802790e <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802790a:	23ff      	movs	r3, #255	; 0xff
 802790c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802790e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027912:	4618      	mov	r0, r3
 8027914:	3710      	adds	r7, #16
 8027916:	46bd      	mov	sp, r7
 8027918:	bd80      	pop	{r7, pc}

0802791a <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 802791a:	b580      	push	{r7, lr}
 802791c:	b084      	sub	sp, #16
 802791e:	af00      	add	r7, sp, #0
 8027920:	6078      	str	r0, [r7, #4]
 8027922:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027924:	2300      	movs	r3, #0
 8027926:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027928:	683b      	ldr	r3, [r7, #0]
 802792a:	2b00      	cmp	r3, #0
 802792c:	d007      	beq.n	802793e <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 802792e:	683b      	ldr	r3, [r7, #0]
 8027930:	4619      	mov	r1, r3
 8027932:	6878      	ldr	r0, [r7, #4]
 8027934:	f001 f8e8 	bl	8028b08 <bhy2_hif_get_boot_status>
 8027938:	4603      	mov	r3, r0
 802793a:	73fb      	strb	r3, [r7, #15]
 802793c:	e001      	b.n	8027942 <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802793e:	23ff      	movs	r3, #255	; 0xff
 8027940:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027942:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027946:	4618      	mov	r0, r3
 8027948:	3710      	adds	r7, #16
 802794a:	46bd      	mov	sp, r7
 802794c:	bd80      	pop	{r7, pc}

0802794e <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 802794e:	b580      	push	{r7, lr}
 8027950:	b086      	sub	sp, #24
 8027952:	af02      	add	r7, sp, #8
 8027954:	6078      	str	r0, [r7, #4]
 8027956:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8027958:	2300      	movs	r3, #0
 802795a:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 802795c:	2300      	movs	r3, #0
 802795e:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027960:	683b      	ldr	r3, [r7, #0]
 8027962:	2b00      	cmp	r3, #0
 8027964:	d00d      	beq.n	8027982 <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8027966:	683b      	ldr	r3, [r7, #0]
 8027968:	f107 0208 	add.w	r2, r7, #8
 802796c:	9300      	str	r3, [sp, #0]
 802796e:	4613      	mov	r3, r2
 8027970:	2220      	movs	r2, #32
 8027972:	6879      	ldr	r1, [r7, #4]
 8027974:	f240 101f 	movw	r0, #287	; 0x11f
 8027978:	f001 f80a 	bl	8028990 <bhy2_hif_get_parameter>
 802797c:	4603      	mov	r3, r0
 802797e:	73fb      	strb	r3, [r7, #15]
 8027980:	e001      	b.n	8027986 <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027982:	23ff      	movs	r3, #255	; 0xff
 8027984:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027986:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802798a:	4618      	mov	r0, r3
 802798c:	3710      	adds	r7, #16
 802798e:	46bd      	mov	sp, r7
 8027990:	bd80      	pop	{r7, pc}

08027992 <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8027992:	b580      	push	{r7, lr}
 8027994:	b086      	sub	sp, #24
 8027996:	af00      	add	r7, sp, #0
 8027998:	60f8      	str	r0, [r7, #12]
 802799a:	60b9      	str	r1, [r7, #8]
 802799c:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 802799e:	2300      	movs	r3, #0
 80279a0:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 80279a2:	687b      	ldr	r3, [r7, #4]
 80279a4:	2b00      	cmp	r3, #0
 80279a6:	d002      	beq.n	80279ae <bhy2_upload_firmware_to_ram+0x1c>
 80279a8:	68fb      	ldr	r3, [r7, #12]
 80279aa:	2b00      	cmp	r3, #0
 80279ac:	d102      	bne.n	80279b4 <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 80279ae:	23ff      	movs	r3, #255	; 0xff
 80279b0:	75fb      	strb	r3, [r7, #23]
 80279b2:	e007      	b.n	80279c4 <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 80279b4:	687b      	ldr	r3, [r7, #4]
 80279b6:	461a      	mov	r2, r3
 80279b8:	68b9      	ldr	r1, [r7, #8]
 80279ba:	68f8      	ldr	r0, [r7, #12]
 80279bc:	f001 f90d 	bl	8028bda <bhy2_hif_upload_firmware_to_ram>
 80279c0:	4603      	mov	r3, r0
 80279c2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80279c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80279c8:	4618      	mov	r0, r3
 80279ca:	3718      	adds	r7, #24
 80279cc:	46bd      	mov	sp, r7
 80279ce:	bd80      	pop	{r7, pc}

080279d0 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 80279d0:	b580      	push	{r7, lr}
 80279d2:	b084      	sub	sp, #16
 80279d4:	af00      	add	r7, sp, #0
 80279d6:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 80279d8:	2300      	movs	r3, #0
 80279da:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 80279dc:	687b      	ldr	r3, [r7, #4]
 80279de:	2b00      	cmp	r3, #0
 80279e0:	d102      	bne.n	80279e8 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 80279e2:	23ff      	movs	r3, #255	; 0xff
 80279e4:	73fb      	strb	r3, [r7, #15]
 80279e6:	e005      	b.n	80279f4 <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 80279e8:	687b      	ldr	r3, [r7, #4]
 80279ea:	4618      	mov	r0, r3
 80279ec:	f001 f932 	bl	8028c54 <bhy2_hif_boot_program_ram>
 80279f0:	4603      	mov	r3, r0
 80279f2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80279f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80279f8:	4618      	mov	r0, r3
 80279fa:	3710      	adds	r7, #16
 80279fc:	46bd      	mov	sp, r7
 80279fe:	bd80      	pop	{r7, pc}

08027a00 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8027a00:	b580      	push	{r7, lr}
 8027a02:	b084      	sub	sp, #16
 8027a04:	af00      	add	r7, sp, #0
 8027a06:	4603      	mov	r3, r0
 8027a08:	6039      	str	r1, [r7, #0]
 8027a0a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8027a0c:	2300      	movs	r3, #0
 8027a0e:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027a10:	683b      	ldr	r3, [r7, #0]
 8027a12:	2b00      	cmp	r3, #0
 8027a14:	d102      	bne.n	8027a1c <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8027a16:	23ff      	movs	r3, #255	; 0xff
 8027a18:	73fb      	strb	r3, [r7, #15]
 8027a1a:	e007      	b.n	8027a2c <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8027a1c:	683b      	ldr	r3, [r7, #0]
 8027a1e:	1df9      	adds	r1, r7, #7
 8027a20:	2201      	movs	r2, #1
 8027a22:	2007      	movs	r0, #7
 8027a24:	f000 ff45 	bl	80288b2 <bhy2_hif_set_regs>
 8027a28:	4603      	mov	r3, r0
 8027a2a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027a30:	4618      	mov	r0, r3
 8027a32:	3710      	adds	r7, #16
 8027a34:	46bd      	mov	sp, r7
 8027a36:	bd80      	pop	{r7, pc}

08027a38 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8027a38:	b580      	push	{r7, lr}
 8027a3a:	b084      	sub	sp, #16
 8027a3c:	af00      	add	r7, sp, #0
 8027a3e:	6078      	str	r0, [r7, #4]
 8027a40:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027a42:	2300      	movs	r3, #0
 8027a44:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027a46:	683b      	ldr	r3, [r7, #0]
 8027a48:	2b00      	cmp	r3, #0
 8027a4a:	d102      	bne.n	8027a52 <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8027a4c:	23ff      	movs	r3, #255	; 0xff
 8027a4e:	73fb      	strb	r3, [r7, #15]
 8027a50:	e007      	b.n	8027a62 <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8027a52:	683b      	ldr	r3, [r7, #0]
 8027a54:	2201      	movs	r2, #1
 8027a56:	6879      	ldr	r1, [r7, #4]
 8027a58:	2007      	movs	r0, #7
 8027a5a:	f000 fef2 	bl	8028842 <bhy2_hif_get_regs>
 8027a5e:	4603      	mov	r3, r0
 8027a60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027a66:	4618      	mov	r0, r3
 8027a68:	3710      	adds	r7, #16
 8027a6a:	46bd      	mov	sp, r7
 8027a6c:	bd80      	pop	{r7, pc}

08027a6e <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8027a6e:	b580      	push	{r7, lr}
 8027a70:	b084      	sub	sp, #16
 8027a72:	af00      	add	r7, sp, #0
 8027a74:	6078      	str	r0, [r7, #4]
 8027a76:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027a78:	2300      	movs	r3, #0
 8027a7a:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027a7c:	683b      	ldr	r3, [r7, #0]
 8027a7e:	2b00      	cmp	r3, #0
 8027a80:	d102      	bne.n	8027a88 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8027a82:	23ff      	movs	r3, #255	; 0xff
 8027a84:	73fb      	strb	r3, [r7, #15]
 8027a86:	e006      	b.n	8027a96 <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8027a88:	683b      	ldr	r3, [r7, #0]
 8027a8a:	4619      	mov	r1, r3
 8027a8c:	6878      	ldr	r0, [r7, #4]
 8027a8e:	f001 f84b 	bl	8028b28 <bhy2_hif_get_interrupt_status>
 8027a92:	4603      	mov	r3, r0
 8027a94:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027a9a:	4618      	mov	r0, r3
 8027a9c:	3710      	adds	r7, #16
 8027a9e:	46bd      	mov	sp, r7
 8027aa0:	bd80      	pop	{r7, pc}

08027aa2 <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8027aa2:	b580      	push	{r7, lr}
 8027aa4:	b084      	sub	sp, #16
 8027aa6:	af00      	add	r7, sp, #0
 8027aa8:	4603      	mov	r3, r0
 8027aaa:	6039      	str	r1, [r7, #0]
 8027aac:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8027aae:	2300      	movs	r3, #0
 8027ab0:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027ab2:	683b      	ldr	r3, [r7, #0]
 8027ab4:	2b00      	cmp	r3, #0
 8027ab6:	d102      	bne.n	8027abe <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8027ab8:	23ff      	movs	r3, #255	; 0xff
 8027aba:	73fb      	strb	r3, [r7, #15]
 8027abc:	e007      	b.n	8027ace <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8027abe:	683b      	ldr	r3, [r7, #0]
 8027ac0:	1df9      	adds	r1, r7, #7
 8027ac2:	2201      	movs	r2, #1
 8027ac4:	2006      	movs	r0, #6
 8027ac6:	f000 fef4 	bl	80288b2 <bhy2_hif_set_regs>
 8027aca:	4603      	mov	r3, r0
 8027acc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027ad2:	4618      	mov	r0, r3
 8027ad4:	3710      	adds	r7, #16
 8027ad6:	46bd      	mov	sp, r7
 8027ad8:	bd80      	pop	{r7, pc}

08027ada <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8027ada:	b580      	push	{r7, lr}
 8027adc:	b084      	sub	sp, #16
 8027ade:	af00      	add	r7, sp, #0
 8027ae0:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027ae2:	2300      	movs	r3, #0
 8027ae4:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027ae6:	687b      	ldr	r3, [r7, #4]
 8027ae8:	2b00      	cmp	r3, #0
 8027aea:	d102      	bne.n	8027af2 <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8027aec:	23ff      	movs	r3, #255	; 0xff
 8027aee:	73fb      	strb	r3, [r7, #15]
 8027af0:	e005      	b.n	8027afe <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8027af2:	687b      	ldr	r3, [r7, #4]
 8027af4:	4618      	mov	r0, r3
 8027af6:	f001 f827 	bl	8028b48 <bhy2_hif_reset>
 8027afa:	4603      	mov	r3, r0
 8027afc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027b02:	4618      	mov	r0, r3
 8027b04:	3710      	adds	r7, #16
 8027b06:	46bd      	mov	sp, r7
 8027b08:	bd80      	pop	{r7, pc}

08027b0a <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8027b0a:	b580      	push	{r7, lr}
 8027b0c:	b08a      	sub	sp, #40	; 0x28
 8027b0e:	af04      	add	r7, sp, #16
 8027b10:	60b9      	str	r1, [r7, #8]
 8027b12:	607a      	str	r2, [r7, #4]
 8027b14:	603b      	str	r3, [r7, #0]
 8027b16:	4603      	mov	r3, r0
 8027b18:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027b1a:	2300      	movs	r3, #0
 8027b1c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8027b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027b20:	2b00      	cmp	r3, #0
 8027b22:	d014      	beq.n	8027b4e <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8027b24:	f640 1238 	movw	r2, #2360	; 0x938
 8027b28:	2100      	movs	r1, #0
 8027b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027b2c:	f014 f8b8 	bl	803bca0 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8027b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027b32:	7bf8      	ldrb	r0, [r7, #15]
 8027b34:	9302      	str	r3, [sp, #8]
 8027b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027b38:	9301      	str	r3, [sp, #4]
 8027b3a:	6a3b      	ldr	r3, [r7, #32]
 8027b3c:	9300      	str	r3, [sp, #0]
 8027b3e:	683b      	ldr	r3, [r7, #0]
 8027b40:	687a      	ldr	r2, [r7, #4]
 8027b42:	68b9      	ldr	r1, [r7, #8]
 8027b44:	f000 fe3e 	bl	80287c4 <bhy2_hif_init>
 8027b48:	4603      	mov	r3, r0
 8027b4a:	75fb      	strb	r3, [r7, #23]
 8027b4c:	e001      	b.n	8027b52 <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027b4e:	23ff      	movs	r3, #255	; 0xff
 8027b50:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027b52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027b56:	4618      	mov	r0, r3
 8027b58:	3718      	adds	r7, #24
 8027b5a:	46bd      	mov	sp, r7
 8027b5c:	bd80      	pop	{r7, pc}

08027b5e <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8027b5e:	b480      	push	{r7}
 8027b60:	b087      	sub	sp, #28
 8027b62:	af00      	add	r7, sp, #0
 8027b64:	60b9      	str	r1, [r7, #8]
 8027b66:	607a      	str	r2, [r7, #4]
 8027b68:	603b      	str	r3, [r7, #0]
 8027b6a:	4603      	mov	r3, r0
 8027b6c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027b6e:	2300      	movs	r3, #0
 8027b70:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 8027b72:	683b      	ldr	r3, [r7, #0]
 8027b74:	2b00      	cmp	r3, #0
 8027b76:	d002      	beq.n	8027b7e <bhy2_register_fifo_parse_callback+0x20>
 8027b78:	68bb      	ldr	r3, [r7, #8]
 8027b7a:	2b00      	cmp	r3, #0
 8027b7c:	d102      	bne.n	8027b84 <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8027b7e:	23ff      	movs	r3, #255	; 0xff
 8027b80:	75fb      	strb	r3, [r7, #23]
 8027b82:	e013      	b.n	8027bac <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8027b84:	7bfa      	ldrb	r2, [r7, #15]
 8027b86:	6839      	ldr	r1, [r7, #0]
 8027b88:	4613      	mov	r3, r2
 8027b8a:	00db      	lsls	r3, r3, #3
 8027b8c:	4413      	add	r3, r2
 8027b8e:	440b      	add	r3, r1
 8027b90:	3318      	adds	r3, #24
 8027b92:	68ba      	ldr	r2, [r7, #8]
 8027b94:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8027b98:	7bfa      	ldrb	r2, [r7, #15]
 8027b9a:	6839      	ldr	r1, [r7, #0]
 8027b9c:	4613      	mov	r3, r2
 8027b9e:	00db      	lsls	r3, r3, #3
 8027ba0:	4413      	add	r3, r2
 8027ba2:	440b      	add	r3, r1
 8027ba4:	3318      	adds	r3, #24
 8027ba6:	687a      	ldr	r2, [r7, #4]
 8027ba8:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8027bac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027bb0:	4618      	mov	r0, r3
 8027bb2:	371c      	adds	r7, #28
 8027bb4:	46bd      	mov	sp, r7
 8027bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027bba:	4770      	bx	lr

08027bbc <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8027bbc:	b580      	push	{r7, lr}
 8027bbe:	b092      	sub	sp, #72	; 0x48
 8027bc0:	af00      	add	r7, sp, #0
 8027bc2:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 8027bc4:	687b      	ldr	r3, [r7, #4]
 8027bc6:	2b00      	cmp	r3, #0
 8027bc8:	d103      	bne.n	8027bd2 <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8027bca:	23ff      	movs	r3, #255	; 0xff
 8027bcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8027bd0:	e079      	b.n	8027cc6 <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 8027bd2:	f107 0308 	add.w	r3, r7, #8
 8027bd6:	6879      	ldr	r1, [r7, #4]
 8027bd8:	4618      	mov	r0, r3
 8027bda:	f7ff feb8 	bl	802794e <bhy2_get_virt_sensor_list>
 8027bde:	4603      	mov	r3, r0
 8027be0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 8027be4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027be8:	2b00      	cmp	r3, #0
 8027bea:	d16c      	bne.n	8027cc6 <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8027bec:	687b      	ldr	r3, [r7, #4]
 8027bee:	2201      	movs	r2, #1
 8027bf0:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8027bf2:	2301      	movs	r3, #1
 8027bf4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027bf8:	e041      	b.n	8027c7e <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8027bfa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027bfe:	08db      	lsrs	r3, r3, #3
 8027c00:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8027c04:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027c08:	f003 0307 	and.w	r3, r3, #7
 8027c0c:	2201      	movs	r2, #1
 8027c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8027c12:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 8027c16:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8027c1a:	3348      	adds	r3, #72	; 0x48
 8027c1c:	443b      	add	r3, r7
 8027c1e:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8027c22:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8027c26:	4013      	ands	r3, r2
 8027c28:	b2db      	uxtb	r3, r3
 8027c2a:	2b00      	cmp	r3, #0
 8027c2c:	d022      	beq.n	8027c74 <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8027c2e:	687a      	ldr	r2, [r7, #4]
 8027c30:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8027c34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027c38:	4618      	mov	r0, r3
 8027c3a:	f001 f8e6 	bl	8028e0a <bhy2_hif_get_sensor_info>
 8027c3e:	4603      	mov	r3, r0
 8027c40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8027c44:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027c48:	2b00      	cmp	r3, #0
 8027c4a:	d113      	bne.n	8027c74 <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8027c4c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8027c50:	2b00      	cmp	r3, #0
 8027c52:	d103      	bne.n	8027c5c <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 8027c54:	23f8      	movs	r3, #248	; 0xf8
 8027c56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8027c5a:	e018      	b.n	8027c8e <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8027c5c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8027c60:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8027c64:	6879      	ldr	r1, [r7, #4]
 8027c66:	4613      	mov	r3, r2
 8027c68:	00db      	lsls	r3, r3, #3
 8027c6a:	4413      	add	r3, r2
 8027c6c:	440b      	add	r3, r1
 8027c6e:	331c      	adds	r3, #28
 8027c70:	4602      	mov	r2, r0
 8027c72:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8027c74:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027c78:	3301      	adds	r3, #1
 8027c7a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027c7e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027c82:	2bf4      	cmp	r3, #244	; 0xf4
 8027c84:	d803      	bhi.n	8027c8e <bhy2_update_virtual_sensor_list+0xd2>
 8027c86:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027c8a:	2b00      	cmp	r3, #0
 8027c8c:	d0b5      	beq.n	8027bfa <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8027c8e:	23ff      	movs	r3, #255	; 0xff
 8027c90:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027c94:	e013      	b.n	8027cbe <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8027c96:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027c9a:	3bf5      	subs	r3, #245	; 0xf5
 8027c9c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8027ca0:	490c      	ldr	r1, [pc, #48]	; (8027cd4 <bhy2_update_virtual_sensor_list+0x118>)
 8027ca2:	5cc8      	ldrb	r0, [r1, r3]
 8027ca4:	6879      	ldr	r1, [r7, #4]
 8027ca6:	4613      	mov	r3, r2
 8027ca8:	00db      	lsls	r3, r3, #3
 8027caa:	4413      	add	r3, r2
 8027cac:	440b      	add	r3, r1
 8027cae:	331c      	adds	r3, #28
 8027cb0:	4602      	mov	r2, r0
 8027cb2:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8027cb4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027cb8:	3b01      	subs	r3, #1
 8027cba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027cbe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027cc2:	2bf4      	cmp	r3, #244	; 0xf4
 8027cc4:	d8e7      	bhi.n	8027c96 <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 8027cc6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8027cca:	4618      	mov	r0, r3
 8027ccc:	3748      	adds	r7, #72	; 0x48
 8027cce:	46bd      	mov	sp, r7
 8027cd0:	bd80      	pop	{r7, pc}
 8027cd2:	bf00      	nop
 8027cd4:	080582d0 	.word	0x080582d0

08027cd8 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 8027cd8:	b580      	push	{r7, lr}
 8027cda:	b084      	sub	sp, #16
 8027cdc:	af00      	add	r7, sp, #0
 8027cde:	6078      	str	r0, [r7, #4]
 8027ce0:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027ce2:	2300      	movs	r3, #0
 8027ce4:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 8027ce6:	683b      	ldr	r3, [r7, #0]
 8027ce8:	2b00      	cmp	r3, #0
 8027cea:	d002      	beq.n	8027cf2 <bhy2_get_error_value+0x1a>
 8027cec:	687b      	ldr	r3, [r7, #4]
 8027cee:	2b00      	cmp	r3, #0
 8027cf0:	d102      	bne.n	8027cf8 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 8027cf2:	23ff      	movs	r3, #255	; 0xff
 8027cf4:	73fb      	strb	r3, [r7, #15]
 8027cf6:	e007      	b.n	8027d08 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8027cf8:	683b      	ldr	r3, [r7, #0]
 8027cfa:	2201      	movs	r2, #1
 8027cfc:	6879      	ldr	r1, [r7, #4]
 8027cfe:	202e      	movs	r0, #46	; 0x2e
 8027d00:	f7ff fc66 	bl	80275d0 <bhy2_get_regs>
 8027d04:	4603      	mov	r3, r0
 8027d06:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027d0c:	4618      	mov	r0, r3
 8027d0e:	3710      	adds	r7, #16
 8027d10:	46bd      	mov	sp, r7
 8027d12:	bd80      	pop	{r7, pc}

08027d14 <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8027d14:	b480      	push	{r7}
 8027d16:	b087      	sub	sp, #28
 8027d18:	af00      	add	r7, sp, #0
 8027d1a:	4603      	mov	r3, r0
 8027d1c:	60b9      	str	r1, [r7, #8]
 8027d1e:	607a      	str	r2, [r7, #4]
 8027d20:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 8027d22:	2300      	movs	r3, #0
 8027d24:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 8027d26:	687b      	ldr	r3, [r7, #4]
 8027d28:	2b00      	cmp	r3, #0
 8027d2a:	d04e      	beq.n	8027dca <get_callback_info+0xb6>
 8027d2c:	68bb      	ldr	r3, [r7, #8]
 8027d2e:	2b00      	cmp	r3, #0
 8027d30:	d04b      	beq.n	8027dca <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 8027d32:	7bfa      	ldrb	r2, [r7, #15]
 8027d34:	68b8      	ldr	r0, [r7, #8]
 8027d36:	6879      	ldr	r1, [r7, #4]
 8027d38:	4613      	mov	r3, r2
 8027d3a:	00db      	lsls	r3, r3, #3
 8027d3c:	4413      	add	r3, r2
 8027d3e:	440b      	add	r3, r1
 8027d40:	3318      	adds	r3, #24
 8027d42:	4602      	mov	r2, r0
 8027d44:	3304      	adds	r3, #4
 8027d46:	6818      	ldr	r0, [r3, #0]
 8027d48:	6859      	ldr	r1, [r3, #4]
 8027d4a:	6010      	str	r0, [r2, #0]
 8027d4c:	6051      	str	r1, [r2, #4]
 8027d4e:	7a1b      	ldrb	r3, [r3, #8]
 8027d50:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 8027d52:	7bfb      	ldrb	r3, [r7, #15]
 8027d54:	2bf4      	cmp	r3, #244	; 0xf4
 8027d56:	d91b      	bls.n	8027d90 <get_callback_info+0x7c>
 8027d58:	68bb      	ldr	r3, [r7, #8]
 8027d5a:	781b      	ldrb	r3, [r3, #0]
 8027d5c:	2b00      	cmp	r3, #0
 8027d5e:	d117      	bne.n	8027d90 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8027d60:	68bb      	ldr	r3, [r7, #8]
 8027d62:	2200      	movs	r2, #0
 8027d64:	705a      	strb	r2, [r3, #1]
 8027d66:	2200      	movs	r2, #0
 8027d68:	709a      	strb	r2, [r3, #2]
 8027d6a:	2200      	movs	r2, #0
 8027d6c:	70da      	strb	r2, [r3, #3]
 8027d6e:	2200      	movs	r2, #0
 8027d70:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8027d72:	68bb      	ldr	r3, [r7, #8]
 8027d74:	2200      	movs	r2, #0
 8027d76:	715a      	strb	r2, [r3, #5]
 8027d78:	2200      	movs	r2, #0
 8027d7a:	719a      	strb	r2, [r3, #6]
 8027d7c:	2200      	movs	r2, #0
 8027d7e:	71da      	strb	r2, [r3, #7]
 8027d80:	2200      	movs	r2, #0
 8027d82:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8027d84:	7bfb      	ldrb	r3, [r7, #15]
 8027d86:	3bf5      	subs	r3, #245	; 0xf5
 8027d88:	4a16      	ldr	r2, [pc, #88]	; (8027de4 <get_callback_info+0xd0>)
 8027d8a:	5cd2      	ldrb	r2, [r2, r3]
 8027d8c:	68bb      	ldr	r3, [r7, #8]
 8027d8e:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 8027d90:	7bfb      	ldrb	r3, [r7, #15]
 8027d92:	2b00      	cmp	r3, #0
 8027d94:	d11c      	bne.n	8027dd0 <get_callback_info+0xbc>
 8027d96:	68bb      	ldr	r3, [r7, #8]
 8027d98:	781b      	ldrb	r3, [r3, #0]
 8027d9a:	2b00      	cmp	r3, #0
 8027d9c:	d118      	bne.n	8027dd0 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 8027d9e:	68bb      	ldr	r3, [r7, #8]
 8027da0:	2200      	movs	r2, #0
 8027da2:	705a      	strb	r2, [r3, #1]
 8027da4:	2200      	movs	r2, #0
 8027da6:	709a      	strb	r2, [r3, #2]
 8027da8:	2200      	movs	r2, #0
 8027daa:	70da      	strb	r2, [r3, #3]
 8027dac:	2200      	movs	r2, #0
 8027dae:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8027db0:	68bb      	ldr	r3, [r7, #8]
 8027db2:	2200      	movs	r2, #0
 8027db4:	715a      	strb	r2, [r3, #5]
 8027db6:	2200      	movs	r2, #0
 8027db8:	719a      	strb	r2, [r3, #6]
 8027dba:	2200      	movs	r2, #0
 8027dbc:	71da      	strb	r2, [r3, #7]
 8027dbe:	2200      	movs	r2, #0
 8027dc0:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 8027dc2:	68bb      	ldr	r3, [r7, #8]
 8027dc4:	2201      	movs	r2, #1
 8027dc6:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 8027dc8:	e002      	b.n	8027dd0 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027dca:	23ff      	movs	r3, #255	; 0xff
 8027dcc:	75fb      	strb	r3, [r7, #23]
 8027dce:	e000      	b.n	8027dd2 <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8027dd0:	bf00      	nop
    }

    return rslt;
 8027dd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027dd6:	4618      	mov	r0, r3
 8027dd8:	371c      	adds	r7, #28
 8027dda:	46bd      	mov	sp, r7
 8027ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027de0:	4770      	bx	lr
 8027de2:	bf00      	nop
 8027de4:	080582d0 	.word	0x080582d0

08027de8 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 8027de8:	b480      	push	{r7}
 8027dea:	b085      	sub	sp, #20
 8027dec:	af00      	add	r7, sp, #0
 8027dee:	60f8      	str	r0, [r7, #12]
 8027df0:	460b      	mov	r3, r1
 8027df2:	607a      	str	r2, [r7, #4]
 8027df4:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 8027df6:	68fb      	ldr	r3, [r7, #12]
 8027df8:	681a      	ldr	r2, [r3, #0]
 8027dfa:	7afb      	ldrb	r3, [r7, #11]
 8027dfc:	441a      	add	r2, r3
 8027dfe:	68fb      	ldr	r3, [r7, #12]
 8027e00:	685b      	ldr	r3, [r3, #4]
 8027e02:	429a      	cmp	r2, r3
 8027e04:	d803      	bhi.n	8027e0e <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 8027e06:	687b      	ldr	r3, [r7, #4]
 8027e08:	2200      	movs	r2, #0
 8027e0a:	701a      	strb	r2, [r3, #0]
 8027e0c:	e002      	b.n	8027e14 <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 8027e0e:	687b      	ldr	r3, [r7, #4]
 8027e10:	2201      	movs	r2, #1
 8027e12:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 8027e14:	2300      	movs	r3, #0
}
 8027e16:	4618      	mov	r0, r3
 8027e18:	3714      	adds	r7, #20
 8027e1a:	46bd      	mov	sp, r7
 8027e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e20:	4770      	bx	lr

08027e22 <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 8027e22:	b480      	push	{r7}
 8027e24:	b087      	sub	sp, #28
 8027e26:	af00      	add	r7, sp, #0
 8027e28:	4603      	mov	r3, r0
 8027e2a:	60b9      	str	r1, [r7, #8]
 8027e2c:	607a      	str	r2, [r7, #4]
 8027e2e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027e30:	2300      	movs	r3, #0
 8027e32:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 8027e34:	7bfb      	ldrb	r3, [r7, #15]
 8027e36:	2b02      	cmp	r3, #2
 8027e38:	d808      	bhi.n	8027e4c <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 8027e3a:	7bfb      	ldrb	r3, [r7, #15]
 8027e3c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8027e40:	00db      	lsls	r3, r3, #3
 8027e42:	687a      	ldr	r2, [r7, #4]
 8027e44:	441a      	add	r2, r3
 8027e46:	68bb      	ldr	r3, [r7, #8]
 8027e48:	601a      	str	r2, [r3, #0]
 8027e4a:	e001      	b.n	8027e50 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 8027e4c:	23f9      	movs	r3, #249	; 0xf9
 8027e4e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027e50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027e54:	4618      	mov	r0, r3
 8027e56:	371c      	adds	r7, #28
 8027e58:	46bd      	mov	sp, r7
 8027e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e5e:	4770      	bx	lr

08027e60 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 8027e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e64:	b099      	sub	sp, #100	; 0x64
 8027e66:	af00      	add	r7, sp, #0
 8027e68:	4603      	mov	r3, r0
 8027e6a:	62b9      	str	r1, [r7, #40]	; 0x28
 8027e6c:	627a      	str	r2, [r7, #36]	; 0x24
 8027e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 8027e72:	2300      	movs	r3, #0
 8027e74:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 8027e78:	2300      	movs	r3, #0
 8027e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 8027e7e:	2300      	movs	r3, #0
 8027e80:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 8027e84:	2300      	movs	r3, #0
 8027e86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8027e8a:	e16a      	b.n	8028162 <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 8027e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027e8e:	681b      	ldr	r3, [r3, #0]
 8027e90:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 8027e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027e94:	691a      	ldr	r2, [r3, #16]
 8027e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027e98:	4413      	add	r3, r2
 8027e9a:	781b      	ldrb	r3, [r3, #0]
 8027e9c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 8027ea0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8027ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027eaa:	4618      	mov	r0, r3
 8027eac:	f7ff ffb9 	bl	8027e22 <get_time_stamp>
 8027eb0:	4603      	mov	r3, r0
 8027eb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 8027eb6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8027eba:	2b00      	cmp	r3, #0
 8027ebc:	d002      	beq.n	8027ec4 <parse_fifo+0x64>
        {
            return rslt;
 8027ebe:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8027ec2:	e191      	b.n	80281e8 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 8027ec4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8027ec8:	2b00      	cmp	r3, #0
 8027eca:	d025      	beq.n	8027f18 <parse_fifo+0xb8>
 8027ecc:	2b00      	cmp	r3, #0
 8027ece:	f2c0 80f6 	blt.w	80280be <parse_fifo+0x25e>
 8027ed2:	2bff      	cmp	r3, #255	; 0xff
 8027ed4:	f300 80f3 	bgt.w	80280be <parse_fifo+0x25e>
 8027ed8:	2bf5      	cmp	r3, #245	; 0xf5
 8027eda:	f2c0 80f0 	blt.w	80280be <parse_fifo+0x25e>
 8027ede:	3bf5      	subs	r3, #245	; 0xf5
 8027ee0:	2b0a      	cmp	r3, #10
 8027ee2:	f200 80ec 	bhi.w	80280be <parse_fifo+0x25e>
 8027ee6:	a201      	add	r2, pc, #4	; (adr r2, 8027eec <parse_fifo+0x8c>)
 8027ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027eec:	08027f25 	.word	0x08027f25
 8027ef0:	08027f8d 	.word	0x08027f8d
 8027ef4:	0802800b 	.word	0x0802800b
 8027ef8:	080280bf 	.word	0x080280bf
 8027efc:	080280bf 	.word	0x080280bf
 8027f00:	080280bf 	.word	0x080280bf
 8027f04:	08027f25 	.word	0x08027f25
 8027f08:	08027f8d 	.word	0x08027f8d
 8027f0c:	0802800b 	.word	0x0802800b
 8027f10:	080280bf 	.word	0x080280bf
 8027f14:	08027f19 	.word	0x08027f19
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 8027f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f1a:	681b      	ldr	r3, [r3, #0]
 8027f1c:	1c5a      	adds	r2, r3, #1
 8027f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f20:	601a      	str	r2, [r3, #0]
                break;
 8027f22:	e11e      	b.n	8028162 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 8027f24:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8027f28:	461a      	mov	r2, r3
 8027f2a:	2102      	movs	r1, #2
 8027f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027f2e:	f7ff ff5b 	bl	8027de8 <get_buffer_status>
 8027f32:	4603      	mov	r3, r0
 8027f34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8027f38:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8027f3c:	2b00      	cmp	r3, #0
 8027f3e:	d002      	beq.n	8027f46 <parse_fifo+0xe6>
                {
                    return rslt;
 8027f40:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8027f44:	e150      	b.n	80281e8 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8027f46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8027f4a:	2b00      	cmp	r3, #0
 8027f4c:	d000      	beq.n	8027f50 <parse_fifo+0xf0>
                {
                    break;
 8027f4e:	e108      	b.n	8028162 <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 8027f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027f52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f58:	691a      	ldr	r2, [r3, #16]
 8027f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027f5c:	3301      	adds	r3, #1
 8027f5e:	4413      	add	r3, r2
 8027f60:	781b      	ldrb	r3, [r3, #0]
 8027f62:	b2db      	uxtb	r3, r3
 8027f64:	2200      	movs	r2, #0
 8027f66:	469a      	mov	sl, r3
 8027f68:	4693      	mov	fp, r2
 8027f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027f6c:	eb10 020a 	adds.w	r2, r0, sl
 8027f70:	61ba      	str	r2, [r7, #24]
 8027f72:	eb41 020b 	adc.w	r2, r1, fp
 8027f76:	61fa      	str	r2, [r7, #28]
 8027f78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8027f7c:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 8027f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f82:	681b      	ldr	r3, [r3, #0]
 8027f84:	1c9a      	adds	r2, r3, #2
 8027f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f88:	601a      	str	r2, [r3, #0]
                break;
 8027f8a:	e0ea      	b.n	8028162 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 8027f8c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8027f90:	461a      	mov	r2, r3
 8027f92:	2103      	movs	r1, #3
 8027f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027f96:	f7ff ff27 	bl	8027de8 <get_buffer_status>
 8027f9a:	4603      	mov	r3, r0
 8027f9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8027fa0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8027fa4:	2b00      	cmp	r3, #0
 8027fa6:	d002      	beq.n	8027fae <parse_fifo+0x14e>
                {
                    return rslt;
 8027fa8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8027fac:	e11c      	b.n	80281e8 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8027fae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8027fb2:	2b00      	cmp	r3, #0
 8027fb4:	d000      	beq.n	8027fb8 <parse_fifo+0x158>
                {
                    break;
 8027fb6:	e0d4      	b.n	8028162 <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 8027fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027fc0:	691a      	ldr	r2, [r3, #16]
 8027fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027fc4:	3301      	adds	r3, #1
 8027fc6:	4413      	add	r3, r2
 8027fc8:	781b      	ldrb	r3, [r3, #0]
 8027fca:	b21c      	sxth	r4, r3
 8027fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027fce:	691a      	ldr	r2, [r3, #16]
 8027fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027fd2:	3302      	adds	r3, #2
 8027fd4:	4413      	add	r3, r2
 8027fd6:	781b      	ldrb	r3, [r3, #0]
 8027fd8:	021b      	lsls	r3, r3, #8
 8027fda:	b21b      	sxth	r3, r3
 8027fdc:	4323      	orrs	r3, r4
 8027fde:	b21b      	sxth	r3, r3
 8027fe0:	b29b      	uxth	r3, r3
 8027fe2:	b29b      	uxth	r3, r3
 8027fe4:	2200      	movs	r2, #0
 8027fe6:	461d      	mov	r5, r3
 8027fe8:	4616      	mov	r6, r2
 8027fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027fec:	1942      	adds	r2, r0, r5
 8027fee:	613a      	str	r2, [r7, #16]
 8027ff0:	eb41 0206 	adc.w	r2, r1, r6
 8027ff4:	617a      	str	r2, [r7, #20]
 8027ff6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8027ffa:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 8027ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028000:	681b      	ldr	r3, [r3, #0]
 8028002:	1cda      	adds	r2, r3, #3
 8028004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028006:	601a      	str	r2, [r3, #0]
                break;
 8028008:	e0ab      	b.n	8028162 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 802800a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802800e:	461a      	mov	r2, r3
 8028010:	2106      	movs	r1, #6
 8028012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028014:	f7ff fee8 	bl	8027de8 <get_buffer_status>
 8028018:	4603      	mov	r3, r0
 802801a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802801e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028022:	2b00      	cmp	r3, #0
 8028024:	d002      	beq.n	802802c <parse_fifo+0x1cc>
                {
                    return rslt;
 8028026:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802802a:	e0dd      	b.n	80281e8 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802802c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8028030:	2b00      	cmp	r3, #0
 8028032:	d000      	beq.n	8028036 <parse_fifo+0x1d6>
                {
                    break;
 8028034:	e095      	b.n	8028162 <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 8028036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028038:	691a      	ldr	r2, [r3, #16]
 802803a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802803c:	3301      	adds	r3, #1
 802803e:	4413      	add	r3, r2
 8028040:	781b      	ldrb	r3, [r3, #0]
 8028042:	4619      	mov	r1, r3
 8028044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028046:	691a      	ldr	r2, [r3, #16]
 8028048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802804a:	3302      	adds	r3, #2
 802804c:	4413      	add	r3, r2
 802804e:	781b      	ldrb	r3, [r3, #0]
 8028050:	021b      	lsls	r3, r3, #8
 8028052:	4319      	orrs	r1, r3
 8028054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028056:	691a      	ldr	r2, [r3, #16]
 8028058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802805a:	3303      	adds	r3, #3
 802805c:	4413      	add	r3, r2
 802805e:	781b      	ldrb	r3, [r3, #0]
 8028060:	041b      	lsls	r3, r3, #16
 8028062:	4319      	orrs	r1, r3
 8028064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028066:	691a      	ldr	r2, [r3, #16]
 8028068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802806a:	3304      	adds	r3, #4
 802806c:	4413      	add	r3, r2
 802806e:	781b      	ldrb	r3, [r3, #0]
 8028070:	061b      	lsls	r3, r3, #24
 8028072:	430b      	orrs	r3, r1
 8028074:	2200      	movs	r2, #0
 8028076:	4698      	mov	r8, r3
 8028078:	4691      	mov	r9, r2
 802807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802807c:	691a      	ldr	r2, [r3, #16]
 802807e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028080:	3305      	adds	r3, #5
 8028082:	4413      	add	r3, r2
 8028084:	781b      	ldrb	r3, [r3, #0]
 8028086:	b2db      	uxtb	r3, r3
 8028088:	2200      	movs	r2, #0
 802808a:	60bb      	str	r3, [r7, #8]
 802808c:	60fa      	str	r2, [r7, #12]
 802808e:	f04f 0200 	mov.w	r2, #0
 8028092:	f04f 0300 	mov.w	r3, #0
 8028096:	68b9      	ldr	r1, [r7, #8]
 8028098:	000b      	movs	r3, r1
 802809a:	2200      	movs	r2, #0
 802809c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802809e:	ea48 0002 	orr.w	r0, r8, r2
 80280a2:	6038      	str	r0, [r7, #0]
 80280a4:	ea49 0303 	orr.w	r3, r9, r3
 80280a8:	607b      	str	r3, [r7, #4]
 80280aa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80280ae:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 80280b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280b4:	681b      	ldr	r3, [r3, #0]
 80280b6:	1d9a      	adds	r2, r3, #6
 80280b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280ba:	601a      	str	r2, [r3, #0]
                break;
 80280bc:	e051      	b.n	8028162 <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 80280be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80280c2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80280c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80280c8:	4618      	mov	r0, r3
 80280ca:	f7ff fe23 	bl	8027d14 <get_callback_info>
 80280ce:	4603      	mov	r3, r0
 80280d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 80280d4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80280d8:	2b00      	cmp	r3, #0
 80280da:	d002      	beq.n	80280e2 <parse_fifo+0x282>
                {
                    return rslt;
 80280dc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80280e0:	e082      	b.n	80281e8 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 80280e2:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 80280e6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80280ea:	461a      	mov	r2, r3
 80280ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80280ee:	f7ff fe7b 	bl	8027de8 <get_buffer_status>
 80280f2:	4603      	mov	r3, r0
 80280f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80280f8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80280fc:	2b00      	cmp	r3, #0
 80280fe:	d002      	beq.n	8028106 <parse_fifo+0x2a6>
                {
                    return rslt;
 8028100:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028104:	e070      	b.n	80281e8 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8028106:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802810a:	2b00      	cmp	r3, #0
 802810c:	d000      	beq.n	8028110 <parse_fifo+0x2b0>
                {
                    break;
 802810e:	e028      	b.n	8028162 <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 8028110:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 8028114:	2b00      	cmp	r3, #0
 8028116:	d01c      	beq.n	8028152 <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 8028118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802811a:	691a      	ldr	r2, [r3, #16]
 802811c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802811e:	3301      	adds	r3, #1
 8028120:	4413      	add	r3, r2
 8028122:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 8028124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028128:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 802812c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802812e:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 8028130:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8028134:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 8028138:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802813c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 8028140:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 8028144:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 8028148:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802814c:	4611      	mov	r1, r2
 802814e:	4618      	mov	r0, r3
 8028150:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 8028152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028154:	681a      	ldr	r2, [r3, #0]
 8028156:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802815a:	441a      	add	r2, r3
 802815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802815e:	601a      	str	r2, [r3, #0]
                break;
 8028160:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8028162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028164:	681a      	ldr	r2, [r3, #0]
 8028166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028168:	685b      	ldr	r3, [r3, #4]
 802816a:	429a      	cmp	r2, r3
 802816c:	d204      	bcs.n	8028178 <parse_fifo+0x318>
 802816e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8028172:	2b00      	cmp	r3, #0
 8028174:	f43f ae8a 	beq.w	8027e8c <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 8028178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802817a:	685b      	ldr	r3, [r3, #4]
 802817c:	2b00      	cmp	r3, #0
 802817e:	d031      	beq.n	80281e4 <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 8028180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028182:	685a      	ldr	r2, [r3, #4]
 8028184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028186:	681b      	ldr	r3, [r3, #0]
 8028188:	429a      	cmp	r2, r3
 802818a:	d202      	bcs.n	8028192 <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 802818c:	f06f 0301 	mvn.w	r3, #1
 8028190:	e02a      	b.n	80281e8 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 8028192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028194:	685a      	ldr	r2, [r3, #4]
 8028196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028198:	681b      	ldr	r3, [r3, #0]
 802819a:	1ad2      	subs	r2, r2, r3
 802819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802819e:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 80281a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281a2:	685b      	ldr	r3, [r3, #4]
 80281a4:	2b00      	cmp	r3, #0
 80281a6:	d01d      	beq.n	80281e4 <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 80281a8:	2300      	movs	r3, #0
 80281aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80281ae:	e013      	b.n	80281d8 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 80281b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281b2:	691a      	ldr	r2, [r3, #16]
 80281b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281b6:	6819      	ldr	r1, [r3, #0]
 80281b8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80281bc:	440b      	add	r3, r1
 80281be:	441a      	add	r2, r3
 80281c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281c2:	6919      	ldr	r1, [r3, #16]
 80281c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80281c8:	440b      	add	r3, r1
 80281ca:	7812      	ldrb	r2, [r2, #0]
 80281cc:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 80281ce:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80281d2:	3301      	adds	r3, #1
 80281d4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80281d8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80281dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281de:	685b      	ldr	r3, [r3, #4]
 80281e0:	429a      	cmp	r2, r3
 80281e2:	d3e5      	bcc.n	80281b0 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 80281e4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80281e8:	4618      	mov	r0, r3
 80281ea:	3764      	adds	r7, #100	; 0x64
 80281ec:	46bd      	mov	sp, r7
 80281ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281f2:	bf00      	nop

080281f4 <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 80281f4:	b590      	push	{r4, r7, lr}
 80281f6:	b0cf      	sub	sp, #316	; 0x13c
 80281f8:	af00      	add	r7, sp, #0
 80281fa:	4604      	mov	r4, r0
 80281fc:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8028200:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8028204:	6001      	str	r1, [r0, #0]
 8028206:	f507 719c 	add.w	r1, r7, #312	; 0x138
 802820a:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 802820e:	600a      	str	r2, [r1, #0]
 8028210:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8028214:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8028218:	6013      	str	r3, [r2, #0]
 802821a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802821e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8028222:	4622      	mov	r2, r4
 8028224:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 8028226:	2300      	movs	r3, #0
 8028228:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 802822c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028230:	2b00      	cmp	r3, #0
 8028232:	f000 81af 	beq.w	8028594 <bhy2_hif_exec_cmd_generic+0x3a0>
 8028236:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802823a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802823e:	681b      	ldr	r3, [r3, #0]
 8028240:	2b00      	cmp	r3, #0
 8028242:	d007      	beq.n	8028254 <bhy2_hif_exec_cmd_generic+0x60>
 8028244:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802824c:	681b      	ldr	r3, [r3, #0]
 802824e:	2b00      	cmp	r3, #0
 8028250:	f000 81a0 	beq.w	8028594 <bhy2_hif_exec_cmd_generic+0x3a0>
 8028254:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8028258:	2b00      	cmp	r3, #0
 802825a:	d007      	beq.n	802826c <bhy2_hif_exec_cmd_generic+0x78>
 802825c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028260:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8028264:	681b      	ldr	r3, [r3, #0]
 8028266:	2b00      	cmp	r3, #0
 8028268:	f000 8194 	beq.w	8028594 <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 802826c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028270:	699b      	ldr	r3, [r3, #24]
 8028272:	2b00      	cmp	r3, #0
 8028274:	f000 8188 	beq.w	8028588 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 8028278:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802827c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8028280:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8028284:	681b      	ldr	r3, [r3, #0]
 8028286:	4413      	add	r3, r2
 8028288:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 802828c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8028290:	2b00      	cmp	r3, #0
 8028292:	d007      	beq.n	80282a4 <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 8028294:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8028298:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 802829c:	4413      	add	r3, r2
 802829e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80282a2:	e003      	b.n	80282ac <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 80282a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80282a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 80282ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80282b0:	f003 0303 	and.w	r3, r3, #3
 80282b4:	2b00      	cmp	r3, #0
 80282b6:	d006      	beq.n	80282c6 <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 80282b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80282bc:	089b      	lsrs	r3, r3, #2
 80282be:	3301      	adds	r3, #1
 80282c0:	009b      	lsls	r3, r3, #2
 80282c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 80282c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80282ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80282ce:	881b      	ldrh	r3, [r3, #0]
 80282d0:	b2da      	uxtb	r2, r3
 80282d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80282d6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80282da:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 80282dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80282e0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80282e4:	881b      	ldrh	r3, [r3, #0]
 80282e6:	0a1b      	lsrs	r3, r3, #8
 80282e8:	b29b      	uxth	r3, r3
 80282ea:	b2da      	uxtb	r2, r3
 80282ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80282f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80282f4:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 80282f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80282fa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80282fe:	881b      	ldrh	r3, [r3, #0]
 8028300:	2b02      	cmp	r3, #2
 8028302:	d113      	bne.n	802832c <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 8028304:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8028308:	089b      	lsrs	r3, r3, #2
 802830a:	b2da      	uxtb	r2, r3
 802830c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028310:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8028314:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 8028316:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802831a:	089b      	lsrs	r3, r3, #2
 802831c:	0a1b      	lsrs	r3, r3, #8
 802831e:	b2da      	uxtb	r2, r3
 8028320:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028324:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8028328:	70da      	strb	r2, [r3, #3]
 802832a:	e010      	b.n	802834e <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 802832c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8028330:	b2da      	uxtb	r2, r3
 8028332:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028336:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802833a:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 802833c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8028340:	0a1b      	lsrs	r3, r3, #8
 8028342:	b2da      	uxtb	r2, r3
 8028344:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028348:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802834c:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 802834e:	2304      	movs	r3, #4
 8028350:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 8028354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8028358:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 802835c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028360:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028364:	4413      	add	r3, r2
 8028366:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 802836a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802836e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 8028372:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028376:	699b      	ldr	r3, [r3, #24]
 8028378:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802837c:	429a      	cmp	r2, r3
 802837e:	f240 80f9 	bls.w	8028574 <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 8028382:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028386:	699b      	ldr	r3, [r3, #24]
 8028388:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 802838c:	e0f2      	b.n	8028574 <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 802838e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028392:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028396:	4413      	add	r3, r2
 8028398:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802839c:	429a      	cmp	r2, r3
 802839e:	d20b      	bcs.n	80283b8 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 80283a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80283a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 80283a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80283ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80283b0:	1ad3      	subs	r3, r2, r3
 80283b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80283b6:	e020      	b.n	80283fa <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 80283b8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80283bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80283c0:	4413      	add	r3, r2
 80283c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 80283c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80283ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 80283ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80283d2:	f003 0303 	and.w	r3, r3, #3
 80283d6:	2b00      	cmp	r3, #0
 80283d8:	d006      	beq.n	80283e8 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 80283da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80283de:	089b      	lsrs	r3, r3, #2
 80283e0:	3301      	adds	r3, #1
 80283e2:	009b      	lsls	r3, r3, #2
 80283e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 80283e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80283ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80283f0:	d903      	bls.n	80283fa <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 80283f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80283f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 80283fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80283fe:	2b00      	cmp	r3, #0
 8028400:	d07e      	beq.n	8028500 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 8028402:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028406:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802840a:	681a      	ldr	r2, [r3, #0]
 802840c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8028410:	4413      	add	r3, r2
 8028412:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028416:	429a      	cmp	r2, r3
 8028418:	d315      	bcc.n	8028446 <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 802841a:	f107 0214 	add.w	r2, r7, #20
 802841e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028422:	18d0      	adds	r0, r2, r3
 8028424:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8028428:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802842c:	1ad3      	subs	r3, r2, r3
 802842e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8028432:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8028436:	6812      	ldr	r2, [r2, #0]
 8028438:	4413      	add	r3, r2
 802843a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 802843e:	4619      	mov	r1, r3
 8028440:	f013 fc06 	bl	803bc50 <memcpy>
 8028444:	e05c      	b.n	8028500 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 8028446:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802844a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802844e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028452:	681b      	ldr	r3, [r3, #0]
 8028454:	429a      	cmp	r2, r3
 8028456:	d93b      	bls.n	80284d0 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 8028458:	f107 0214 	add.w	r2, r7, #20
 802845c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028460:	18d0      	adds	r0, r2, r3
 8028462:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8028466:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802846a:	1ad3      	subs	r3, r2, r3
 802846c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8028470:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8028474:	6812      	ldr	r2, [r2, #0]
 8028476:	18d1      	adds	r1, r2, r3
 8028478:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802847c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8028480:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028484:	681b      	ldr	r3, [r3, #0]
 8028486:	1ad3      	subs	r3, r2, r3
 8028488:	461a      	mov	r2, r3
 802848a:	f013 fbe1 	bl	803bc50 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 802848e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8028492:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8028496:	441a      	add	r2, r3
 8028498:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802849c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80284a0:	681b      	ldr	r3, [r3, #0]
 80284a2:	1ad3      	subs	r3, r2, r3
 80284a4:	f107 0214 	add.w	r2, r7, #20
 80284a8:	18d0      	adds	r0, r2, r3
 80284aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80284b2:	681a      	ldr	r2, [r3, #0]
 80284b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80284b8:	1ad2      	subs	r2, r2, r3
 80284ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80284be:	441a      	add	r2, r3
 80284c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80284c8:	6819      	ldr	r1, [r3, #0]
 80284ca:	f013 fbc1 	bl	803bc50 <memcpy>
 80284ce:	e017      	b.n	8028500 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 80284d0:	f107 0214 	add.w	r2, r7, #20
 80284d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80284d8:	18d0      	adds	r0, r2, r3
 80284da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284de:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80284e2:	681a      	ldr	r2, [r3, #0]
 80284e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80284e8:	1ad3      	subs	r3, r2, r3
 80284ea:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80284ee:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80284f2:	6812      	ldr	r2, [r2, #0]
 80284f4:	4413      	add	r3, r2
 80284f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80284fa:	4619      	mov	r1, r3
 80284fc:	f013 fba8 	bl	803bc50 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8028500:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8028504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8028508:	4413      	add	r3, r2
 802850a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 802850e:	429a      	cmp	r2, r3
 8028510:	d012      	beq.n	8028538 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 8028512:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8028516:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802851a:	4413      	add	r3, r2
 802851c:	f107 0214 	add.w	r2, r7, #20
 8028520:	18d0      	adds	r0, r2, r3
 8028522:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8028526:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802852a:	4413      	add	r3, r2
 802852c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8028530:	461a      	mov	r2, r3
 8028532:	2100      	movs	r1, #0
 8028534:	f013 fbb4 	bl	803bca0 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 8028538:	f107 0114 	add.w	r1, r7, #20
 802853c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028540:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8028544:	2000      	movs	r0, #0
 8028546:	f000 f9b4 	bl	80288b2 <bhy2_hif_set_regs>
 802854a:	4603      	mov	r3, r0
 802854c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 8028550:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8028554:	2b00      	cmp	r3, #0
 8028556:	d11b      	bne.n	8028590 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 8028558:	2300      	movs	r3, #0
 802855a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 802855e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028562:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8028566:	1ad3      	subs	r3, r2, r3
 8028568:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 802856c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8028570:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8028574:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8028578:	2b00      	cmp	r3, #0
 802857a:	d00f      	beq.n	802859c <bhy2_hif_exec_cmd_generic+0x3a8>
 802857c:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8028580:	2b00      	cmp	r3, #0
 8028582:	f43f af04 	beq.w	802838e <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 8028586:	e009      	b.n	802859c <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 8028588:	23fe      	movs	r3, #254	; 0xfe
 802858a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 802858e:	e005      	b.n	802859c <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 8028590:	bf00      	nop
        if (hif->read_write_len != 0)
 8028592:	e003      	b.n	802859c <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028594:	23ff      	movs	r3, #255	; 0xff
 8028596:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 802859a:	e000      	b.n	802859e <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 802859c:	bf00      	nop
    }

    return rslt;
 802859e:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 80285a2:	4618      	mov	r0, r3
 80285a4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80285a8:	46bd      	mov	sp, r7
 80285aa:	bd90      	pop	{r4, r7, pc}

080285ac <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 80285ac:	b580      	push	{r7, lr}
 80285ae:	b084      	sub	sp, #16
 80285b0:	af00      	add	r7, sp, #0
 80285b2:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 80285b4:	2300      	movs	r3, #0
 80285b6:	81fb      	strh	r3, [r7, #14]
 80285b8:	e027      	b.n	802860a <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 80285ba:	f107 030c 	add.w	r3, r7, #12
 80285be:	6879      	ldr	r1, [r7, #4]
 80285c0:	4618      	mov	r0, r3
 80285c2:	f000 fab1 	bl	8028b28 <bhy2_hif_get_interrupt_status>
 80285c6:	4603      	mov	r3, r0
 80285c8:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 80285ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80285ce:	2b00      	cmp	r3, #0
 80285d0:	d115      	bne.n	80285fe <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 80285d2:	7b3b      	ldrb	r3, [r7, #12]
 80285d4:	f003 0320 	and.w	r3, r3, #32
 80285d8:	2b00      	cmp	r3, #0
 80285da:	d002      	beq.n	80285e2 <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 80285dc:	2300      	movs	r3, #0
 80285de:	737b      	strb	r3, [r7, #13]
                break;
 80285e0:	e017      	b.n	8028612 <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 80285e2:	6879      	ldr	r1, [r7, #4]
 80285e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80285e8:	f000 f99b 	bl	8028922 <bhy2_hif_delay_us>
 80285ec:	4603      	mov	r3, r0
 80285ee:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 80285f0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80285f4:	2b00      	cmp	r3, #0
 80285f6:	d005      	beq.n	8028604 <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 80285f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80285fc:	e00b      	b.n	8028616 <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 80285fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028602:	e008      	b.n	8028616 <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8028604:	89fb      	ldrh	r3, [r7, #14]
 8028606:	3301      	adds	r3, #1
 8028608:	81fb      	strh	r3, [r7, #14]
 802860a:	89fb      	ldrh	r3, [r7, #14]
 802860c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8028610:	d3d3      	bcc.n	80285ba <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8028612:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8028616:	4618      	mov	r0, r3
 8028618:	3710      	adds	r7, #16
 802861a:	46bd      	mov	sp, r7
 802861c:	bd80      	pop	{r7, pc}

0802861e <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 802861e:	b580      	push	{r7, lr}
 8028620:	b084      	sub	sp, #16
 8028622:	af00      	add	r7, sp, #0
 8028624:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8028626:	2300      	movs	r3, #0
 8028628:	81fb      	strh	r3, [r7, #14]
 802862a:	e02f      	b.n	802868c <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 802862c:	6879      	ldr	r1, [r7, #4]
 802862e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028632:	f000 f976 	bl	8028922 <bhy2_hif_delay_us>
 8028636:	4603      	mov	r3, r0
 8028638:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802863a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802863e:	2b00      	cmp	r3, #0
 8028640:	da02      	bge.n	8028648 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 8028642:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028646:	e02d      	b.n	80286a4 <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 8028648:	f107 010c 	add.w	r1, r7, #12
 802864c:	687b      	ldr	r3, [r7, #4]
 802864e:	2201      	movs	r2, #1
 8028650:	2025      	movs	r0, #37	; 0x25
 8028652:	f000 f8f6 	bl	8028842 <bhy2_hif_get_regs>
 8028656:	4603      	mov	r3, r0
 8028658:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802865a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802865e:	2b00      	cmp	r3, #0
 8028660:	da02      	bge.n	8028668 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 8028662:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028666:	e01d      	b.n	80286a4 <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8028668:	7b3b      	ldrb	r3, [r7, #12]
 802866a:	f003 0310 	and.w	r3, r3, #16
 802866e:	2b00      	cmp	r3, #0
 8028670:	d009      	beq.n	8028686 <bhy2_hif_check_boot_status_ram+0x68>
 8028672:	7b3b      	ldrb	r3, [r7, #12]
 8028674:	f003 0320 	and.w	r3, r3, #32
 8028678:	2b00      	cmp	r3, #0
 802867a:	d004      	beq.n	8028686 <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 802867c:	7b3b      	ldrb	r3, [r7, #12]
 802867e:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8028682:	2b00      	cmp	r3, #0
 8028684:	d006      	beq.n	8028694 <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8028686:	89fb      	ldrh	r3, [r7, #14]
 8028688:	3301      	adds	r3, #1
 802868a:	81fb      	strh	r3, [r7, #14]
 802868c:	89fb      	ldrh	r3, [r7, #14]
 802868e:	2b63      	cmp	r3, #99	; 0x63
 8028690:	d9cc      	bls.n	802862c <bhy2_hif_check_boot_status_ram+0xe>
 8028692:	e000      	b.n	8028696 <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 8028694:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 8028696:	89fb      	ldrh	r3, [r7, #14]
 8028698:	2b64      	cmp	r3, #100	; 0x64
 802869a:	d102      	bne.n	80286a2 <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 802869c:	f06f 0304 	mvn.w	r3, #4
 80286a0:	e000      	b.n	80286a4 <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 80286a2:	2300      	movs	r3, #0
}
 80286a4:	4618      	mov	r0, r3
 80286a6:	3710      	adds	r7, #16
 80286a8:	46bd      	mov	sp, r7
 80286aa:	bd80      	pop	{r7, pc}

080286ac <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 80286ac:	b580      	push	{r7, lr}
 80286ae:	b08a      	sub	sp, #40	; 0x28
 80286b0:	af00      	add	r7, sp, #0
 80286b2:	60b9      	str	r1, [r7, #8]
 80286b4:	607a      	str	r2, [r7, #4]
 80286b6:	603b      	str	r3, [r7, #0]
 80286b8:	4603      	mov	r3, r0
 80286ba:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80286bc:	2300      	movs	r3, #0
 80286be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 80286c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286c4:	2b00      	cmp	r3, #0
 80286c6:	d072      	beq.n	80287ae <bhy2_hif_get_fifo+0x102>
 80286c8:	68bb      	ldr	r3, [r7, #8]
 80286ca:	2b00      	cmp	r3, #0
 80286cc:	d06f      	beq.n	80287ae <bhy2_hif_get_fifo+0x102>
 80286ce:	683b      	ldr	r3, [r7, #0]
 80286d0:	2b00      	cmp	r3, #0
 80286d2:	d06c      	beq.n	80287ae <bhy2_hif_get_fifo+0x102>
 80286d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80286d6:	2b00      	cmp	r3, #0
 80286d8:	d069      	beq.n	80287ae <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 80286da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286dc:	699b      	ldr	r3, [r3, #24]
 80286de:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 80286e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80286e2:	681b      	ldr	r3, [r3, #0]
 80286e4:	2b00      	cmp	r3, #0
 80286e6:	d114      	bne.n	8028712 <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 80286e8:	f107 0114 	add.w	r1, r7, #20
 80286ec:	7bf8      	ldrb	r0, [r7, #15]
 80286ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80286f0:	2202      	movs	r2, #2
 80286f2:	f000 f8a6 	bl	8028842 <bhy2_hif_get_regs>
 80286f6:	4603      	mov	r3, r0
 80286f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 80286fc:	7d3b      	ldrb	r3, [r7, #20]
 80286fe:	b21a      	sxth	r2, r3
 8028700:	7d7b      	ldrb	r3, [r7, #21]
 8028702:	021b      	lsls	r3, r3, #8
 8028704:	b21b      	sxth	r3, r3
 8028706:	4313      	orrs	r3, r2
 8028708:	b21b      	sxth	r3, r3
 802870a:	b29b      	uxth	r3, r3
 802870c:	461a      	mov	r2, r3
 802870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028710:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8028712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028714:	681b      	ldr	r3, [r3, #0]
 8028716:	2b00      	cmp	r3, #0
 8028718:	d04d      	beq.n	80287b6 <bhy2_hif_get_fifo+0x10a>
 802871a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802871e:	2b00      	cmp	r3, #0
 8028720:	d149      	bne.n	80287b6 <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 8028722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028724:	681b      	ldr	r3, [r3, #0]
 8028726:	687a      	ldr	r2, [r7, #4]
 8028728:	429a      	cmp	r2, r3
 802872a:	d203      	bcs.n	8028734 <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 802872c:	683b      	ldr	r3, [r7, #0]
 802872e:	687a      	ldr	r2, [r7, #4]
 8028730:	601a      	str	r2, [r3, #0]
 8028732:	e003      	b.n	802873c <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 8028734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028736:	681a      	ldr	r2, [r3, #0]
 8028738:	683b      	ldr	r3, [r7, #0]
 802873a:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 802873c:	683b      	ldr	r3, [r7, #0]
 802873e:	681b      	ldr	r3, [r3, #0]
 8028740:	623b      	str	r3, [r7, #32]
            offset = 0;
 8028742:	2300      	movs	r3, #0
 8028744:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8028746:	e016      	b.n	8028776 <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 8028748:	68ba      	ldr	r2, [r7, #8]
 802874a:	69fb      	ldr	r3, [r7, #28]
 802874c:	18d1      	adds	r1, r2, r3
 802874e:	7bf8      	ldrb	r0, [r7, #15]
 8028750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028752:	69ba      	ldr	r2, [r7, #24]
 8028754:	f000 f875 	bl	8028842 <bhy2_hif_get_regs>
 8028758:	4603      	mov	r3, r0
 802875a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 802875e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8028762:	2b00      	cmp	r3, #0
 8028764:	d10c      	bne.n	8028780 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 8028766:	6a3a      	ldr	r2, [r7, #32]
 8028768:	69bb      	ldr	r3, [r7, #24]
 802876a:	1ad3      	subs	r3, r2, r3
 802876c:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 802876e:	69fa      	ldr	r2, [r7, #28]
 8028770:	69bb      	ldr	r3, [r7, #24]
 8028772:	4413      	add	r3, r2
 8028774:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8028776:	6a3a      	ldr	r2, [r7, #32]
 8028778:	69bb      	ldr	r3, [r7, #24]
 802877a:	429a      	cmp	r2, r3
 802877c:	d8e4      	bhi.n	8028748 <bhy2_hif_get_fifo+0x9c>
 802877e:	e000      	b.n	8028782 <bhy2_hif_get_fifo+0xd6>
                    break;
 8028780:	bf00      	nop
            }

            if (read_len != 0)
 8028782:	6a3b      	ldr	r3, [r7, #32]
 8028784:	2b00      	cmp	r3, #0
 8028786:	d00a      	beq.n	802879e <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8028788:	68ba      	ldr	r2, [r7, #8]
 802878a:	69fb      	ldr	r3, [r7, #28]
 802878c:	18d1      	adds	r1, r2, r3
 802878e:	7bf8      	ldrb	r0, [r7, #15]
 8028790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028792:	6a3a      	ldr	r2, [r7, #32]
 8028794:	f000 f855 	bl	8028842 <bhy2_hif_get_regs>
 8028798:	4603      	mov	r3, r0
 802879a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 802879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80287a0:	681a      	ldr	r2, [r3, #0]
 80287a2:	683b      	ldr	r3, [r7, #0]
 80287a4:	681b      	ldr	r3, [r3, #0]
 80287a6:	1ad2      	subs	r2, r2, r3
 80287a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80287aa:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 80287ac:	e003      	b.n	80287b6 <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80287ae:	23ff      	movs	r3, #255	; 0xff
 80287b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80287b4:	e000      	b.n	80287b8 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 80287b6:	bf00      	nop
    }

    return rslt;
 80287b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80287bc:	4618      	mov	r0, r3
 80287be:	3728      	adds	r7, #40	; 0x28
 80287c0:	46bd      	mov	sp, r7
 80287c2:	bd80      	pop	{r7, pc}

080287c4 <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 80287c4:	b480      	push	{r7}
 80287c6:	b087      	sub	sp, #28
 80287c8:	af00      	add	r7, sp, #0
 80287ca:	60b9      	str	r1, [r7, #8]
 80287cc:	607a      	str	r2, [r7, #4]
 80287ce:	603b      	str	r3, [r7, #0]
 80287d0:	4603      	mov	r3, r0
 80287d2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80287d4:	2300      	movs	r3, #0
 80287d6:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 80287d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80287da:	2b00      	cmp	r3, #0
 80287dc:	d027      	beq.n	802882e <bhy2_hif_init+0x6a>
 80287de:	68bb      	ldr	r3, [r7, #8]
 80287e0:	2b00      	cmp	r3, #0
 80287e2:	d024      	beq.n	802882e <bhy2_hif_init+0x6a>
 80287e4:	687b      	ldr	r3, [r7, #4]
 80287e6:	2b00      	cmp	r3, #0
 80287e8:	d021      	beq.n	802882e <bhy2_hif_init+0x6a>
 80287ea:	683b      	ldr	r3, [r7, #0]
 80287ec:	2b00      	cmp	r3, #0
 80287ee:	d01e      	beq.n	802882e <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 80287f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80287f2:	68ba      	ldr	r2, [r7, #8]
 80287f4:	601a      	str	r2, [r3, #0]
        hif->write = write;
 80287f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80287f8:	687a      	ldr	r2, [r7, #4]
 80287fa:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 80287fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80287fe:	683a      	ldr	r2, [r7, #0]
 8028800:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8028802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028806:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8028808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802880a:	7bfa      	ldrb	r2, [r7, #15]
 802880c:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 802880e:	6a3b      	ldr	r3, [r7, #32]
 8028810:	f003 0303 	and.w	r3, r3, #3
 8028814:	2b00      	cmp	r3, #0
 8028816:	d006      	beq.n	8028826 <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8028818:	6a3b      	ldr	r3, [r7, #32]
 802881a:	089b      	lsrs	r3, r3, #2
 802881c:	3301      	adds	r3, #1
 802881e:	009a      	lsls	r2, r3, #2
 8028820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028822:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8028824:	e005      	b.n	8028832 <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8028826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028828:	6a3a      	ldr	r2, [r7, #32]
 802882a:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 802882c:	e001      	b.n	8028832 <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802882e:	23ff      	movs	r3, #255	; 0xff
 8028830:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028836:	4618      	mov	r0, r3
 8028838:	371c      	adds	r7, #28
 802883a:	46bd      	mov	sp, r7
 802883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028840:	4770      	bx	lr

08028842 <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028842:	b590      	push	{r4, r7, lr}
 8028844:	b087      	sub	sp, #28
 8028846:	af00      	add	r7, sp, #0
 8028848:	60b9      	str	r1, [r7, #8]
 802884a:	607a      	str	r2, [r7, #4]
 802884c:	603b      	str	r3, [r7, #0]
 802884e:	4603      	mov	r3, r0
 8028850:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028852:	2300      	movs	r3, #0
 8028854:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8028856:	683b      	ldr	r3, [r7, #0]
 8028858:	2b00      	cmp	r3, #0
 802885a:	d022      	beq.n	80288a2 <bhy2_hif_get_regs+0x60>
 802885c:	683b      	ldr	r3, [r7, #0]
 802885e:	681b      	ldr	r3, [r3, #0]
 8028860:	2b00      	cmp	r3, #0
 8028862:	d01e      	beq.n	80288a2 <bhy2_hif_get_regs+0x60>
 8028864:	68bb      	ldr	r3, [r7, #8]
 8028866:	2b00      	cmp	r3, #0
 8028868:	d01b      	beq.n	80288a2 <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 802886a:	683b      	ldr	r3, [r7, #0]
 802886c:	7b1b      	ldrb	r3, [r3, #12]
 802886e:	2b01      	cmp	r3, #1
 8028870:	d103      	bne.n	802887a <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8028872:	7bfb      	ldrb	r3, [r7, #15]
 8028874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8028878:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 802887a:	683b      	ldr	r3, [r7, #0]
 802887c:	681c      	ldr	r4, [r3, #0]
 802887e:	683b      	ldr	r3, [r7, #0]
 8028880:	691b      	ldr	r3, [r3, #16]
 8028882:	7bf8      	ldrb	r0, [r7, #15]
 8028884:	687a      	ldr	r2, [r7, #4]
 8028886:	68b9      	ldr	r1, [r7, #8]
 8028888:	47a0      	blx	r4
 802888a:	4603      	mov	r3, r0
 802888c:	461a      	mov	r2, r3
 802888e:	683b      	ldr	r3, [r7, #0]
 8028890:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028892:	683b      	ldr	r3, [r7, #0]
 8028894:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8028898:	2b00      	cmp	r3, #0
 802889a:	d004      	beq.n	80288a6 <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 802889c:	23fd      	movs	r3, #253	; 0xfd
 802889e:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 80288a0:	e001      	b.n	80288a6 <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80288a2:	23ff      	movs	r3, #255	; 0xff
 80288a4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80288a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80288aa:	4618      	mov	r0, r3
 80288ac:	371c      	adds	r7, #28
 80288ae:	46bd      	mov	sp, r7
 80288b0:	bd90      	pop	{r4, r7, pc}

080288b2 <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 80288b2:	b590      	push	{r4, r7, lr}
 80288b4:	b087      	sub	sp, #28
 80288b6:	af00      	add	r7, sp, #0
 80288b8:	60b9      	str	r1, [r7, #8]
 80288ba:	607a      	str	r2, [r7, #4]
 80288bc:	603b      	str	r3, [r7, #0]
 80288be:	4603      	mov	r3, r0
 80288c0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80288c2:	2300      	movs	r3, #0
 80288c4:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 80288c6:	683b      	ldr	r3, [r7, #0]
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	d022      	beq.n	8028912 <bhy2_hif_set_regs+0x60>
 80288cc:	683b      	ldr	r3, [r7, #0]
 80288ce:	681b      	ldr	r3, [r3, #0]
 80288d0:	2b00      	cmp	r3, #0
 80288d2:	d01e      	beq.n	8028912 <bhy2_hif_set_regs+0x60>
 80288d4:	68bb      	ldr	r3, [r7, #8]
 80288d6:	2b00      	cmp	r3, #0
 80288d8:	d01b      	beq.n	8028912 <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 80288da:	683b      	ldr	r3, [r7, #0]
 80288dc:	7b1b      	ldrb	r3, [r3, #12]
 80288de:	2b01      	cmp	r3, #1
 80288e0:	d103      	bne.n	80288ea <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 80288e2:	7bfb      	ldrb	r3, [r7, #15]
 80288e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80288e8:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 80288ea:	683b      	ldr	r3, [r7, #0]
 80288ec:	685c      	ldr	r4, [r3, #4]
 80288ee:	683b      	ldr	r3, [r7, #0]
 80288f0:	691b      	ldr	r3, [r3, #16]
 80288f2:	7bf8      	ldrb	r0, [r7, #15]
 80288f4:	687a      	ldr	r2, [r7, #4]
 80288f6:	68b9      	ldr	r1, [r7, #8]
 80288f8:	47a0      	blx	r4
 80288fa:	4603      	mov	r3, r0
 80288fc:	461a      	mov	r2, r3
 80288fe:	683b      	ldr	r3, [r7, #0]
 8028900:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028902:	683b      	ldr	r3, [r7, #0]
 8028904:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8028908:	2b00      	cmp	r3, #0
 802890a:	d004      	beq.n	8028916 <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 802890c:	23fd      	movs	r3, #253	; 0xfd
 802890e:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028910:	e001      	b.n	8028916 <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028912:	23ff      	movs	r3, #255	; 0xff
 8028914:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802891a:	4618      	mov	r0, r3
 802891c:	371c      	adds	r7, #28
 802891e:	46bd      	mov	sp, r7
 8028920:	bd90      	pop	{r4, r7, pc}

08028922 <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8028922:	b580      	push	{r7, lr}
 8028924:	b084      	sub	sp, #16
 8028926:	af00      	add	r7, sp, #0
 8028928:	6078      	str	r0, [r7, #4]
 802892a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802892c:	2300      	movs	r3, #0
 802892e:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8028930:	683b      	ldr	r3, [r7, #0]
 8028932:	2b00      	cmp	r3, #0
 8028934:	d00b      	beq.n	802894e <bhy2_hif_delay_us+0x2c>
 8028936:	683b      	ldr	r3, [r7, #0]
 8028938:	689b      	ldr	r3, [r3, #8]
 802893a:	2b00      	cmp	r3, #0
 802893c:	d007      	beq.n	802894e <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 802893e:	683b      	ldr	r3, [r7, #0]
 8028940:	689b      	ldr	r3, [r3, #8]
 8028942:	683a      	ldr	r2, [r7, #0]
 8028944:	6912      	ldr	r2, [r2, #16]
 8028946:	4611      	mov	r1, r2
 8028948:	6878      	ldr	r0, [r7, #4]
 802894a:	4798      	blx	r3
 802894c:	e001      	b.n	8028952 <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802894e:	23ff      	movs	r3, #255	; 0xff
 8028950:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028952:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028956:	4618      	mov	r0, r3
 8028958:	3710      	adds	r7, #16
 802895a:	46bd      	mov	sp, r7
 802895c:	bd80      	pop	{r7, pc}

0802895e <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 802895e:	b580      	push	{r7, lr}
 8028960:	b088      	sub	sp, #32
 8028962:	af04      	add	r7, sp, #16
 8028964:	60b9      	str	r1, [r7, #8]
 8028966:	607a      	str	r2, [r7, #4]
 8028968:	603b      	str	r3, [r7, #0]
 802896a:	4603      	mov	r3, r0
 802896c:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 802896e:	89f8      	ldrh	r0, [r7, #14]
 8028970:	683b      	ldr	r3, [r7, #0]
 8028972:	9302      	str	r3, [sp, #8]
 8028974:	2300      	movs	r3, #0
 8028976:	9301      	str	r3, [sp, #4]
 8028978:	2300      	movs	r3, #0
 802897a:	9300      	str	r3, [sp, #0]
 802897c:	2300      	movs	r3, #0
 802897e:	687a      	ldr	r2, [r7, #4]
 8028980:	68b9      	ldr	r1, [r7, #8]
 8028982:	f7ff fc37 	bl	80281f4 <bhy2_hif_exec_cmd_generic>
 8028986:	4603      	mov	r3, r0
}
 8028988:	4618      	mov	r0, r3
 802898a:	3710      	adds	r7, #16
 802898c:	46bd      	mov	sp, r7
 802898e:	bd80      	pop	{r7, pc}

08028990 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8028990:	b580      	push	{r7, lr}
 8028992:	b088      	sub	sp, #32
 8028994:	af02      	add	r7, sp, #8
 8028996:	60b9      	str	r1, [r7, #8]
 8028998:	607a      	str	r2, [r7, #4]
 802899a:	603b      	str	r3, [r7, #0]
 802899c:	4603      	mov	r3, r0
 802899e:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 80289a0:	2300      	movs	r3, #0
 80289a2:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 80289a4:	2300      	movs	r3, #0
 80289a6:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 80289a8:	6a3b      	ldr	r3, [r7, #32]
 80289aa:	2b00      	cmp	r3, #0
 80289ac:	d06e      	beq.n	8028a8c <bhy2_hif_get_parameter+0xfc>
 80289ae:	68bb      	ldr	r3, [r7, #8]
 80289b0:	2b00      	cmp	r3, #0
 80289b2:	d06b      	beq.n	8028a8c <bhy2_hif_get_parameter+0xfc>
 80289b4:	683b      	ldr	r3, [r7, #0]
 80289b6:	2b00      	cmp	r3, #0
 80289b8:	d068      	beq.n	8028a8c <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 80289ba:	683b      	ldr	r3, [r7, #0]
 80289bc:	2200      	movs	r2, #0
 80289be:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 80289c0:	f107 0113 	add.w	r1, r7, #19
 80289c4:	6a3b      	ldr	r3, [r7, #32]
 80289c6:	2201      	movs	r2, #1
 80289c8:	2006      	movs	r0, #6
 80289ca:	f7ff ff3a 	bl	8028842 <bhy2_hif_get_regs>
 80289ce:	4603      	mov	r3, r0
 80289d0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 80289d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80289d6:	2b00      	cmp	r3, #0
 80289d8:	d15b      	bne.n	8028a92 <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 80289da:	7cfb      	ldrb	r3, [r7, #19]
 80289dc:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 80289de:	7cfb      	ldrb	r3, [r7, #19]
 80289e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80289e4:	b2db      	uxtb	r3, r3
 80289e6:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 80289e8:	7cfb      	ldrb	r3, [r7, #19]
 80289ea:	7dba      	ldrb	r2, [r7, #22]
 80289ec:	429a      	cmp	r2, r3
 80289ee:	d008      	beq.n	8028a02 <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 80289f0:	f107 0113 	add.w	r1, r7, #19
 80289f4:	6a3b      	ldr	r3, [r7, #32]
 80289f6:	2201      	movs	r2, #1
 80289f8:	2006      	movs	r0, #6
 80289fa:	f7ff ff5a 	bl	80288b2 <bhy2_hif_set_regs>
 80289fe:	4603      	mov	r3, r0
 8028a00:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8028a02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028a06:	2b00      	cmp	r3, #0
 8028a08:	d143      	bne.n	8028a92 <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8028a0a:	89fb      	ldrh	r3, [r7, #14]
 8028a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8028a10:	b298      	uxth	r0, r3
 8028a12:	6a3b      	ldr	r3, [r7, #32]
 8028a14:	2200      	movs	r2, #0
 8028a16:	2100      	movs	r1, #0
 8028a18:	f7ff ffa1 	bl	802895e <bhy2_hif_exec_cmd>
 8028a1c:	4603      	mov	r3, r0
 8028a1e:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8028a20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028a24:	2b00      	cmp	r3, #0
 8028a26:	d134      	bne.n	8028a92 <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8028a28:	6a38      	ldr	r0, [r7, #32]
 8028a2a:	f7ff fdbf 	bl	80285ac <bhy2_wait_status_ready>
 8028a2e:	4603      	mov	r3, r0
 8028a30:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8028a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028a36:	2b00      	cmp	r3, #0
 8028a38:	d12b      	bne.n	8028a92 <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8028a3a:	f107 0014 	add.w	r0, r7, #20
 8028a3e:	6a3b      	ldr	r3, [r7, #32]
 8028a40:	9300      	str	r3, [sp, #0]
 8028a42:	683b      	ldr	r3, [r7, #0]
 8028a44:	687a      	ldr	r2, [r7, #4]
 8028a46:	68b9      	ldr	r1, [r7, #8]
 8028a48:	f000 f94b 	bl	8028ce2 <bhy2_hif_get_status_fifo>
 8028a4c:	4603      	mov	r3, r0
 8028a4e:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8028a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028a54:	2b00      	cmp	r3, #0
 8028a56:	d11c      	bne.n	8028a92 <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8028a58:	7cfb      	ldrb	r3, [r7, #19]
 8028a5a:	7dba      	ldrb	r2, [r7, #22]
 8028a5c:	429a      	cmp	r2, r3
 8028a5e:	d00a      	beq.n	8028a76 <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8028a60:	7dbb      	ldrb	r3, [r7, #22]
 8028a62:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028a64:	f107 0113 	add.w	r1, r7, #19
 8028a68:	6a3b      	ldr	r3, [r7, #32]
 8028a6a:	2201      	movs	r2, #1
 8028a6c:	2006      	movs	r0, #6
 8028a6e:	f7ff ff20 	bl	80288b2 <bhy2_hif_set_regs>
 8028a72:	4603      	mov	r3, r0
 8028a74:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8028a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028a7a:	2b00      	cmp	r3, #0
 8028a7c:	d109      	bne.n	8028a92 <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8028a7e:	8abb      	ldrh	r3, [r7, #20]
 8028a80:	89fa      	ldrh	r2, [r7, #14]
 8028a82:	429a      	cmp	r2, r3
 8028a84:	d005      	beq.n	8028a92 <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8028a86:	23fb      	movs	r3, #251	; 0xfb
 8028a88:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8028a8a:	e002      	b.n	8028a92 <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028a8c:	23ff      	movs	r3, #255	; 0xff
 8028a8e:	75fb      	strb	r3, [r7, #23]
 8028a90:	e000      	b.n	8028a94 <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8028a92:	bf00      	nop
    }

    return rslt;
 8028a94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028a98:	4618      	mov	r0, r3
 8028a9a:	3718      	adds	r7, #24
 8028a9c:	46bd      	mov	sp, r7
 8028a9e:	bd80      	pop	{r7, pc}

08028aa0 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8028aa0:	b580      	push	{r7, lr}
 8028aa2:	b082      	sub	sp, #8
 8028aa4:	af00      	add	r7, sp, #0
 8028aa6:	6078      	str	r0, [r7, #4]
 8028aa8:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8028aaa:	683b      	ldr	r3, [r7, #0]
 8028aac:	2201      	movs	r2, #1
 8028aae:	6879      	ldr	r1, [r7, #4]
 8028ab0:	201c      	movs	r0, #28
 8028ab2:	f7ff fec6 	bl	8028842 <bhy2_hif_get_regs>
 8028ab6:	4603      	mov	r3, r0
}
 8028ab8:	4618      	mov	r0, r3
 8028aba:	3708      	adds	r7, #8
 8028abc:	46bd      	mov	sp, r7
 8028abe:	bd80      	pop	{r7, pc}

08028ac0 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8028ac0:	b580      	push	{r7, lr}
 8028ac2:	b084      	sub	sp, #16
 8028ac4:	af00      	add	r7, sp, #0
 8028ac6:	6078      	str	r0, [r7, #4]
 8028ac8:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8028aca:	687b      	ldr	r3, [r7, #4]
 8028acc:	2b00      	cmp	r3, #0
 8028ace:	d013      	beq.n	8028af8 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8028ad0:	f107 010c 	add.w	r1, r7, #12
 8028ad4:	683b      	ldr	r3, [r7, #0]
 8028ad6:	2202      	movs	r2, #2
 8028ad8:	2020      	movs	r0, #32
 8028ada:	f7ff feb2 	bl	8028842 <bhy2_hif_get_regs>
 8028ade:	4603      	mov	r3, r0
 8028ae0:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8028ae2:	7b3b      	ldrb	r3, [r7, #12]
 8028ae4:	b21a      	sxth	r2, r3
 8028ae6:	7b7b      	ldrb	r3, [r7, #13]
 8028ae8:	021b      	lsls	r3, r3, #8
 8028aea:	b21b      	sxth	r3, r3
 8028aec:	4313      	orrs	r3, r2
 8028aee:	b21b      	sxth	r3, r3
 8028af0:	b29a      	uxth	r2, r3
 8028af2:	687b      	ldr	r3, [r7, #4]
 8028af4:	801a      	strh	r2, [r3, #0]
 8028af6:	e001      	b.n	8028afc <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028af8:	23ff      	movs	r3, #255	; 0xff
 8028afa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028b00:	4618      	mov	r0, r3
 8028b02:	3710      	adds	r7, #16
 8028b04:	46bd      	mov	sp, r7
 8028b06:	bd80      	pop	{r7, pc}

08028b08 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8028b08:	b580      	push	{r7, lr}
 8028b0a:	b082      	sub	sp, #8
 8028b0c:	af00      	add	r7, sp, #0
 8028b0e:	6078      	str	r0, [r7, #4]
 8028b10:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8028b12:	683b      	ldr	r3, [r7, #0]
 8028b14:	2201      	movs	r2, #1
 8028b16:	6879      	ldr	r1, [r7, #4]
 8028b18:	2025      	movs	r0, #37	; 0x25
 8028b1a:	f7ff fe92 	bl	8028842 <bhy2_hif_get_regs>
 8028b1e:	4603      	mov	r3, r0
}
 8028b20:	4618      	mov	r0, r3
 8028b22:	3708      	adds	r7, #8
 8028b24:	46bd      	mov	sp, r7
 8028b26:	bd80      	pop	{r7, pc}

08028b28 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8028b28:	b580      	push	{r7, lr}
 8028b2a:	b082      	sub	sp, #8
 8028b2c:	af00      	add	r7, sp, #0
 8028b2e:	6078      	str	r0, [r7, #4]
 8028b30:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8028b32:	683b      	ldr	r3, [r7, #0]
 8028b34:	2201      	movs	r2, #1
 8028b36:	6879      	ldr	r1, [r7, #4]
 8028b38:	202d      	movs	r0, #45	; 0x2d
 8028b3a:	f7ff fe82 	bl	8028842 <bhy2_hif_get_regs>
 8028b3e:	4603      	mov	r3, r0
}
 8028b40:	4618      	mov	r0, r3
 8028b42:	3708      	adds	r7, #8
 8028b44:	46bd      	mov	sp, r7
 8028b46:	bd80      	pop	{r7, pc}

08028b48 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8028b48:	b580      	push	{r7, lr}
 8028b4a:	b084      	sub	sp, #16
 8028b4c:	af00      	add	r7, sp, #0
 8028b4e:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8028b50:	2301      	movs	r3, #1
 8028b52:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8028b54:	2300      	movs	r3, #0
 8028b56:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8028b58:	230f      	movs	r3, #15
 8028b5a:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8028b5c:	f107 010b 	add.w	r1, r7, #11
 8028b60:	687b      	ldr	r3, [r7, #4]
 8028b62:	2201      	movs	r2, #1
 8028b64:	2014      	movs	r0, #20
 8028b66:	f7ff fea4 	bl	80288b2 <bhy2_hif_set_regs>
 8028b6a:	4603      	mov	r3, r0
 8028b6c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8028b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028b72:	2b00      	cmp	r3, #0
 8028b74:	d12b      	bne.n	8028bce <bhy2_hif_reset+0x86>
    {
        while (count--)
 8028b76:	e01c      	b.n	8028bb2 <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8028b78:	6879      	ldr	r1, [r7, #4]
 8028b7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8028b7e:	f7ff fed0 	bl	8028922 <bhy2_hif_delay_us>
 8028b82:	4603      	mov	r3, r0
 8028b84:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8028b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028b8a:	2b00      	cmp	r3, #0
 8028b8c:	d111      	bne.n	8028bb2 <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8028b8e:	f107 010a 	add.w	r1, r7, #10
 8028b92:	687b      	ldr	r3, [r7, #4]
 8028b94:	2201      	movs	r2, #1
 8028b96:	2025      	movs	r0, #37	; 0x25
 8028b98:	f7ff fe53 	bl	8028842 <bhy2_hif_get_regs>
 8028b9c:	4603      	mov	r3, r0
 8028b9e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8028ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028ba4:	2b00      	cmp	r3, #0
 8028ba6:	d104      	bne.n	8028bb2 <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8028ba8:	7abb      	ldrb	r3, [r7, #10]
 8028baa:	f003 0310 	and.w	r3, r3, #16
 8028bae:	2b00      	cmp	r3, #0
 8028bb0:	d105      	bne.n	8028bbe <bhy2_hif_reset+0x76>
        while (count--)
 8028bb2:	89bb      	ldrh	r3, [r7, #12]
 8028bb4:	1e5a      	subs	r2, r3, #1
 8028bb6:	81ba      	strh	r2, [r7, #12]
 8028bb8:	2b00      	cmp	r3, #0
 8028bba:	d1dd      	bne.n	8028b78 <bhy2_hif_reset+0x30>
 8028bbc:	e000      	b.n	8028bc0 <bhy2_hif_reset+0x78>
                    {
                        break;
 8028bbe:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 8028bc0:	7abb      	ldrb	r3, [r7, #10]
 8028bc2:	f003 0310 	and.w	r3, r3, #16
 8028bc6:	2b00      	cmp	r3, #0
 8028bc8:	d101      	bne.n	8028bce <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 8028bca:	23fb      	movs	r3, #251	; 0xfb
 8028bcc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8028bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028bd2:	4618      	mov	r0, r3
 8028bd4:	3710      	adds	r7, #16
 8028bd6:	46bd      	mov	sp, r7
 8028bd8:	bd80      	pop	{r7, pc}

08028bda <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028bda:	b580      	push	{r7, lr}
 8028bdc:	b086      	sub	sp, #24
 8028bde:	af00      	add	r7, sp, #0
 8028be0:	60f8      	str	r0, [r7, #12]
 8028be2:	60b9      	str	r1, [r7, #8]
 8028be4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8028be6:	2300      	movs	r3, #0
 8028be8:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 8028bea:	687b      	ldr	r3, [r7, #4]
 8028bec:	2b00      	cmp	r3, #0
 8028bee:	d027      	beq.n	8028c40 <bhy2_hif_upload_firmware_to_ram+0x66>
 8028bf0:	68fb      	ldr	r3, [r7, #12]
 8028bf2:	2b00      	cmp	r3, #0
 8028bf4:	d024      	beq.n	8028c40 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 8028bf6:	68fb      	ldr	r3, [r7, #12]
 8028bf8:	781b      	ldrb	r3, [r3, #0]
 8028bfa:	b21a      	sxth	r2, r3
 8028bfc:	68fb      	ldr	r3, [r7, #12]
 8028bfe:	3301      	adds	r3, #1
 8028c00:	781b      	ldrb	r3, [r3, #0]
 8028c02:	021b      	lsls	r3, r3, #8
 8028c04:	b21b      	sxth	r3, r3
 8028c06:	4313      	orrs	r3, r2
 8028c08:	b21b      	sxth	r3, r3
 8028c0a:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 8028c0c:	8abb      	ldrh	r3, [r7, #20]
 8028c0e:	f246 622b 	movw	r2, #26155	; 0x662b
 8028c12:	4293      	cmp	r3, r2
 8028c14:	d002      	beq.n	8028c1c <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 8028c16:	23fc      	movs	r3, #252	; 0xfc
 8028c18:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8028c1a:	e014      	b.n	8028c46 <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 8028c1c:	687b      	ldr	r3, [r7, #4]
 8028c1e:	68ba      	ldr	r2, [r7, #8]
 8028c20:	68f9      	ldr	r1, [r7, #12]
 8028c22:	2002      	movs	r0, #2
 8028c24:	f7ff fe9b 	bl	802895e <bhy2_hif_exec_cmd>
 8028c28:	4603      	mov	r3, r0
 8028c2a:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 8028c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c30:	2b00      	cmp	r3, #0
 8028c32:	d108      	bne.n	8028c46 <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 8028c34:	6878      	ldr	r0, [r7, #4]
 8028c36:	f7ff fcf2 	bl	802861e <bhy2_hif_check_boot_status_ram>
 8028c3a:	4603      	mov	r3, r0
 8028c3c:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8028c3e:	e002      	b.n	8028c46 <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028c40:	23ff      	movs	r3, #255	; 0xff
 8028c42:	75fb      	strb	r3, [r7, #23]
 8028c44:	e000      	b.n	8028c48 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 8028c46:	bf00      	nop
    }

    return rslt;
 8028c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028c4c:	4618      	mov	r0, r3
 8028c4e:	3718      	adds	r7, #24
 8028c50:	46bd      	mov	sp, r7
 8028c52:	bd80      	pop	{r7, pc}

08028c54 <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 8028c54:	b580      	push	{r7, lr}
 8028c56:	b084      	sub	sp, #16
 8028c58:	af00      	add	r7, sp, #0
 8028c5a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 8028c5c:	687b      	ldr	r3, [r7, #4]
 8028c5e:	2200      	movs	r2, #0
 8028c60:	2100      	movs	r1, #0
 8028c62:	2003      	movs	r0, #3
 8028c64:	f7ff fe7b 	bl	802895e <bhy2_hif_exec_cmd>
 8028c68:	4603      	mov	r3, r0
 8028c6a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8028c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028c70:	2b00      	cmp	r3, #0
 8028c72:	d104      	bne.n	8028c7e <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 8028c74:	6878      	ldr	r0, [r7, #4]
 8028c76:	f7ff fcd2 	bl	802861e <bhy2_hif_check_boot_status_ram>
 8028c7a:	4603      	mov	r3, r0
 8028c7c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028c82:	4618      	mov	r0, r3
 8028c84:	3710      	adds	r7, #16
 8028c86:	46bd      	mov	sp, r7
 8028c88:	bd80      	pop	{r7, pc}

08028c8a <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8028c8a:	b580      	push	{r7, lr}
 8028c8c:	b086      	sub	sp, #24
 8028c8e:	af02      	add	r7, sp, #8
 8028c90:	60f8      	str	r0, [r7, #12]
 8028c92:	60b9      	str	r1, [r7, #8]
 8028c94:	607a      	str	r2, [r7, #4]
 8028c96:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028c98:	69bb      	ldr	r3, [r7, #24]
 8028c9a:	9301      	str	r3, [sp, #4]
 8028c9c:	683b      	ldr	r3, [r7, #0]
 8028c9e:	9300      	str	r3, [sp, #0]
 8028ca0:	687b      	ldr	r3, [r7, #4]
 8028ca2:	68ba      	ldr	r2, [r7, #8]
 8028ca4:	68f9      	ldr	r1, [r7, #12]
 8028ca6:	2001      	movs	r0, #1
 8028ca8:	f7ff fd00 	bl	80286ac <bhy2_hif_get_fifo>
 8028cac:	4603      	mov	r3, r0
}
 8028cae:	4618      	mov	r0, r3
 8028cb0:	3710      	adds	r7, #16
 8028cb2:	46bd      	mov	sp, r7
 8028cb4:	bd80      	pop	{r7, pc}

08028cb6 <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 8028cb6:	b580      	push	{r7, lr}
 8028cb8:	b086      	sub	sp, #24
 8028cba:	af02      	add	r7, sp, #8
 8028cbc:	60f8      	str	r0, [r7, #12]
 8028cbe:	60b9      	str	r1, [r7, #8]
 8028cc0:	607a      	str	r2, [r7, #4]
 8028cc2:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028cc4:	69bb      	ldr	r3, [r7, #24]
 8028cc6:	9301      	str	r3, [sp, #4]
 8028cc8:	683b      	ldr	r3, [r7, #0]
 8028cca:	9300      	str	r3, [sp, #0]
 8028ccc:	687b      	ldr	r3, [r7, #4]
 8028cce:	68ba      	ldr	r2, [r7, #8]
 8028cd0:	68f9      	ldr	r1, [r7, #12]
 8028cd2:	2002      	movs	r0, #2
 8028cd4:	f7ff fcea 	bl	80286ac <bhy2_hif_get_fifo>
 8028cd8:	4603      	mov	r3, r0
}
 8028cda:	4618      	mov	r0, r3
 8028cdc:	3710      	adds	r7, #16
 8028cde:	46bd      	mov	sp, r7
 8028ce0:	bd80      	pop	{r7, pc}

08028ce2 <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8028ce2:	b580      	push	{r7, lr}
 8028ce4:	b086      	sub	sp, #24
 8028ce6:	af00      	add	r7, sp, #0
 8028ce8:	60f8      	str	r0, [r7, #12]
 8028cea:	60b9      	str	r1, [r7, #8]
 8028cec:	607a      	str	r2, [r7, #4]
 8028cee:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 8028cf0:	f107 0110 	add.w	r1, r7, #16
 8028cf4:	6a3b      	ldr	r3, [r7, #32]
 8028cf6:	2204      	movs	r2, #4
 8028cf8:	2003      	movs	r0, #3
 8028cfa:	f7ff fda2 	bl	8028842 <bhy2_hif_get_regs>
 8028cfe:	4603      	mov	r3, r0
 8028d00:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 8028d02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028d06:	2b00      	cmp	r3, #0
 8028d08:	d130      	bne.n	8028d6c <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 8028d0a:	7c3b      	ldrb	r3, [r7, #16]
 8028d0c:	b21a      	sxth	r2, r3
 8028d0e:	f107 0310 	add.w	r3, r7, #16
 8028d12:	3301      	adds	r3, #1
 8028d14:	781b      	ldrb	r3, [r3, #0]
 8028d16:	021b      	lsls	r3, r3, #8
 8028d18:	b21b      	sxth	r3, r3
 8028d1a:	4313      	orrs	r3, r2
 8028d1c:	b21b      	sxth	r3, r3
 8028d1e:	b29a      	uxth	r2, r3
 8028d20:	68fb      	ldr	r3, [r7, #12]
 8028d22:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 8028d24:	7cbb      	ldrb	r3, [r7, #18]
 8028d26:	b21a      	sxth	r2, r3
 8028d28:	f107 0310 	add.w	r3, r7, #16
 8028d2c:	3302      	adds	r3, #2
 8028d2e:	3301      	adds	r3, #1
 8028d30:	781b      	ldrb	r3, [r3, #0]
 8028d32:	021b      	lsls	r3, r3, #8
 8028d34:	b21b      	sxth	r3, r3
 8028d36:	4313      	orrs	r3, r2
 8028d38:	b21b      	sxth	r3, r3
 8028d3a:	b29b      	uxth	r3, r3
 8028d3c:	461a      	mov	r2, r3
 8028d3e:	683b      	ldr	r3, [r7, #0]
 8028d40:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 8028d42:	683b      	ldr	r3, [r7, #0]
 8028d44:	681b      	ldr	r3, [r3, #0]
 8028d46:	2b00      	cmp	r3, #0
 8028d48:	d010      	beq.n	8028d6c <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 8028d4a:	683b      	ldr	r3, [r7, #0]
 8028d4c:	681b      	ldr	r3, [r3, #0]
 8028d4e:	687a      	ldr	r2, [r7, #4]
 8028d50:	429a      	cmp	r2, r3
 8028d52:	d202      	bcs.n	8028d5a <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 8028d54:	23fa      	movs	r3, #250	; 0xfa
 8028d56:	75fb      	strb	r3, [r7, #23]
 8028d58:	e008      	b.n	8028d6c <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 8028d5a:	683b      	ldr	r3, [r7, #0]
 8028d5c:	681a      	ldr	r2, [r3, #0]
 8028d5e:	6a3b      	ldr	r3, [r7, #32]
 8028d60:	68b9      	ldr	r1, [r7, #8]
 8028d62:	2003      	movs	r0, #3
 8028d64:	f7ff fd6d 	bl	8028842 <bhy2_hif_get_regs>
 8028d68:	4603      	mov	r3, r0
 8028d6a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8028d6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028d70:	4618      	mov	r0, r3
 8028d72:	3718      	adds	r7, #24
 8028d74:	46bd      	mov	sp, r7
 8028d76:	bd80      	pop	{r7, pc}

08028d78 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 8028d78:	b580      	push	{r7, lr}
 8028d7a:	b086      	sub	sp, #24
 8028d7c:	af02      	add	r7, sp, #8
 8028d7e:	60f8      	str	r0, [r7, #12]
 8028d80:	60b9      	str	r1, [r7, #8]
 8028d82:	607a      	str	r2, [r7, #4]
 8028d84:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028d86:	69bb      	ldr	r3, [r7, #24]
 8028d88:	9301      	str	r3, [sp, #4]
 8028d8a:	683b      	ldr	r3, [r7, #0]
 8028d8c:	9300      	str	r3, [sp, #0]
 8028d8e:	687b      	ldr	r3, [r7, #4]
 8028d90:	68ba      	ldr	r2, [r7, #8]
 8028d92:	68f9      	ldr	r1, [r7, #12]
 8028d94:	2003      	movs	r0, #3
 8028d96:	f7ff fc89 	bl	80286ac <bhy2_hif_get_fifo>
 8028d9a:	4603      	mov	r3, r0
}
 8028d9c:	4618      	mov	r0, r3
 8028d9e:	3710      	adds	r7, #16
 8028da0:	46bd      	mov	sp, r7
 8028da2:	bd80      	pop	{r7, pc}

08028da4 <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 8028da4:	b580      	push	{r7, lr}
 8028da6:	b088      	sub	sp, #32
 8028da8:	af00      	add	r7, sp, #0
 8028daa:	4603      	mov	r3, r0
 8028dac:	ed87 0a02 	vstr	s0, [r7, #8]
 8028db0:	6079      	str	r1, [r7, #4]
 8028db2:	603a      	str	r2, [r7, #0]
 8028db4:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 8028db6:	68bb      	ldr	r3, [r7, #8]
 8028db8:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 8028dba:	7bfb      	ldrb	r3, [r7, #15]
 8028dbc:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 8028dbe:	697b      	ldr	r3, [r7, #20]
 8028dc0:	b2db      	uxtb	r3, r3
 8028dc2:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 8028dc4:	697b      	ldr	r3, [r7, #20]
 8028dc6:	0a1b      	lsrs	r3, r3, #8
 8028dc8:	b2db      	uxtb	r3, r3
 8028dca:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 8028dcc:	697b      	ldr	r3, [r7, #20]
 8028dce:	0c1b      	lsrs	r3, r3, #16
 8028dd0:	b2db      	uxtb	r3, r3
 8028dd2:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 8028dd4:	697b      	ldr	r3, [r7, #20]
 8028dd6:	0e1b      	lsrs	r3, r3, #24
 8028dd8:	b2db      	uxtb	r3, r3
 8028dda:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 8028ddc:	687b      	ldr	r3, [r7, #4]
 8028dde:	b2db      	uxtb	r3, r3
 8028de0:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 8028de2:	687b      	ldr	r3, [r7, #4]
 8028de4:	0a1b      	lsrs	r3, r3, #8
 8028de6:	b2db      	uxtb	r3, r3
 8028de8:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 8028dea:	687b      	ldr	r3, [r7, #4]
 8028dec:	0c1b      	lsrs	r3, r3, #16
 8028dee:	b2db      	uxtb	r3, r3
 8028df0:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 8028df2:	f107 0118 	add.w	r1, r7, #24
 8028df6:	683b      	ldr	r3, [r7, #0]
 8028df8:	2208      	movs	r2, #8
 8028dfa:	200d      	movs	r0, #13
 8028dfc:	f7ff fdaf 	bl	802895e <bhy2_hif_exec_cmd>
 8028e00:	4603      	mov	r3, r0
}
 8028e02:	4618      	mov	r0, r3
 8028e04:	3720      	adds	r7, #32
 8028e06:	46bd      	mov	sp, r7
 8028e08:	bd80      	pop	{r7, pc}

08028e0a <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 8028e0a:	b580      	push	{r7, lr}
 8028e0c:	b090      	sub	sp, #64	; 0x40
 8028e0e:	af02      	add	r7, sp, #8
 8028e10:	4603      	mov	r3, r0
 8028e12:	60b9      	str	r1, [r7, #8]
 8028e14:	607a      	str	r2, [r7, #4]
 8028e16:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 8028e18:	68bb      	ldr	r3, [r7, #8]
 8028e1a:	2b00      	cmp	r3, #0
 8028e1c:	f000 80da 	beq.w	8028fd4 <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 8028e20:	7bfb      	ldrb	r3, [r7, #15]
 8028e22:	2bf5      	cmp	r3, #245	; 0xf5
 8028e24:	d903      	bls.n	8028e2e <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 8028e26:	23fe      	movs	r3, #254	; 0xfe
 8028e28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8028e2c:	e0d5      	b.n	8028fda <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 8028e2e:	7bfb      	ldrb	r3, [r7, #15]
 8028e30:	b29b      	uxth	r3, r3
 8028e32:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8028e36:	b298      	uxth	r0, r3
 8028e38:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8028e3c:	f107 0114 	add.w	r1, r7, #20
 8028e40:	687b      	ldr	r3, [r7, #4]
 8028e42:	9300      	str	r3, [sp, #0]
 8028e44:	4613      	mov	r3, r2
 8028e46:	221c      	movs	r2, #28
 8028e48:	f7ff fda2 	bl	8028990 <bhy2_hif_get_parameter>
 8028e4c:	4603      	mov	r3, r0
 8028e4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 8028e52:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8028e56:	2b00      	cmp	r3, #0
 8028e58:	f040 80bf 	bne.w	8028fda <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 8028e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028e5e:	2b1c      	cmp	r3, #28
 8028e60:	d003      	beq.n	8028e6a <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 8028e62:	23fe      	movs	r3, #254	; 0xfe
 8028e64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8028e68:	e0b7      	b.n	8028fda <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 8028e6a:	7d3a      	ldrb	r2, [r7, #20]
 8028e6c:	68bb      	ldr	r3, [r7, #8]
 8028e6e:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 8028e70:	7d7a      	ldrb	r2, [r7, #21]
 8028e72:	68bb      	ldr	r3, [r7, #8]
 8028e74:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 8028e76:	7dba      	ldrb	r2, [r7, #22]
 8028e78:	68bb      	ldr	r3, [r7, #8]
 8028e7a:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 8028e7c:	7dfa      	ldrb	r2, [r7, #23]
 8028e7e:	68bb      	ldr	r3, [r7, #8]
 8028e80:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 8028e82:	7e3a      	ldrb	r2, [r7, #24]
 8028e84:	68bb      	ldr	r3, [r7, #8]
 8028e86:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 8028e88:	7e7a      	ldrb	r2, [r7, #25]
 8028e8a:	68bb      	ldr	r3, [r7, #8]
 8028e8c:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 8028e8e:	7eba      	ldrb	r2, [r7, #26]
 8028e90:	68bb      	ldr	r3, [r7, #8]
 8028e92:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 8028e94:	7efa      	ldrb	r2, [r7, #27]
 8028e96:	68bb      	ldr	r3, [r7, #8]
 8028e98:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 8028e9a:	7f3a      	ldrb	r2, [r7, #28]
 8028e9c:	68bb      	ldr	r3, [r7, #8]
 8028e9e:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 8028ea0:	7f7a      	ldrb	r2, [r7, #29]
 8028ea2:	68bb      	ldr	r3, [r7, #8]
 8028ea4:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 8028ea6:	7fba      	ldrb	r2, [r7, #30]
 8028ea8:	68bb      	ldr	r3, [r7, #8]
 8028eaa:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 8028eac:	7ffa      	ldrb	r2, [r7, #31]
 8028eae:	68bb      	ldr	r3, [r7, #8]
 8028eb0:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 8028eb2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8028eb6:	68bb      	ldr	r3, [r7, #8]
 8028eb8:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 8028eba:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8028ebe:	68bb      	ldr	r3, [r7, #8]
 8028ec0:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 8028ec2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8028ec6:	68bb      	ldr	r3, [r7, #8]
 8028ec8:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 8028eca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8028ece:	68bb      	ldr	r3, [r7, #8]
 8028ed0:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 8028ed2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8028ed6:	68bb      	ldr	r3, [r7, #8]
 8028ed8:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 8028eda:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8028ede:	68bb      	ldr	r3, [r7, #8]
 8028ee0:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 8028ee2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8028ee6:	68bb      	ldr	r3, [r7, #8]
 8028ee8:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 8028eea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8028eee:	68bb      	ldr	r3, [r7, #8]
 8028ef0:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 8028ef2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8028ef6:	68bb      	ldr	r3, [r7, #8]
 8028ef8:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 8028efa:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8028efe:	68bb      	ldr	r3, [r7, #8]
 8028f00:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 8028f02:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8028f06:	68bb      	ldr	r3, [r7, #8]
 8028f08:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 8028f0a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8028f0e:	68bb      	ldr	r3, [r7, #8]
 8028f10:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 8028f12:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8028f16:	68bb      	ldr	r3, [r7, #8]
 8028f18:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 8028f1a:	68bb      	ldr	r3, [r7, #8]
 8028f1c:	791b      	ldrb	r3, [r3, #4]
 8028f1e:	b21a      	sxth	r2, r3
 8028f20:	68bb      	ldr	r3, [r7, #8]
 8028f22:	795b      	ldrb	r3, [r3, #5]
 8028f24:	021b      	lsls	r3, r3, #8
 8028f26:	b21b      	sxth	r3, r3
 8028f28:	4313      	orrs	r3, r2
 8028f2a:	b21b      	sxth	r3, r3
 8028f2c:	b29a      	uxth	r2, r3
 8028f2e:	68bb      	ldr	r3, [r7, #8]
 8028f30:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 8028f32:	68bb      	ldr	r3, [r7, #8]
 8028f34:	799b      	ldrb	r3, [r3, #6]
 8028f36:	b21a      	sxth	r2, r3
 8028f38:	68bb      	ldr	r3, [r7, #8]
 8028f3a:	79db      	ldrb	r3, [r3, #7]
 8028f3c:	021b      	lsls	r3, r3, #8
 8028f3e:	b21b      	sxth	r3, r3
 8028f40:	4313      	orrs	r3, r2
 8028f42:	b21b      	sxth	r3, r3
 8028f44:	b29a      	uxth	r2, r3
 8028f46:	68bb      	ldr	r3, [r7, #8]
 8028f48:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 8028f4a:	68bb      	ldr	r3, [r7, #8]
 8028f4c:	7a1b      	ldrb	r3, [r3, #8]
 8028f4e:	461a      	mov	r2, r3
 8028f50:	68bb      	ldr	r3, [r7, #8]
 8028f52:	7a5b      	ldrb	r3, [r3, #9]
 8028f54:	021b      	lsls	r3, r3, #8
 8028f56:	431a      	orrs	r2, r3
 8028f58:	68bb      	ldr	r3, [r7, #8]
 8028f5a:	7a9b      	ldrb	r3, [r3, #10]
 8028f5c:	041b      	lsls	r3, r3, #16
 8028f5e:	431a      	orrs	r2, r3
 8028f60:	68bb      	ldr	r3, [r7, #8]
 8028f62:	7adb      	ldrb	r3, [r3, #11]
 8028f64:	061b      	lsls	r3, r3, #24
 8028f66:	431a      	orrs	r2, r3
 8028f68:	68bb      	ldr	r3, [r7, #8]
 8028f6a:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 8028f6c:	68bb      	ldr	r3, [r7, #8]
 8028f6e:	7b1b      	ldrb	r3, [r3, #12]
 8028f70:	461a      	mov	r2, r3
 8028f72:	68bb      	ldr	r3, [r7, #8]
 8028f74:	7b5b      	ldrb	r3, [r3, #13]
 8028f76:	021b      	lsls	r3, r3, #8
 8028f78:	431a      	orrs	r2, r3
 8028f7a:	68bb      	ldr	r3, [r7, #8]
 8028f7c:	7b9b      	ldrb	r3, [r3, #14]
 8028f7e:	041b      	lsls	r3, r3, #16
 8028f80:	431a      	orrs	r2, r3
 8028f82:	68bb      	ldr	r3, [r7, #8]
 8028f84:	7bdb      	ldrb	r3, [r3, #15]
 8028f86:	061b      	lsls	r3, r3, #24
 8028f88:	431a      	orrs	r2, r3
 8028f8a:	68bb      	ldr	r3, [r7, #8]
 8028f8c:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 8028f8e:	68bb      	ldr	r3, [r7, #8]
 8028f90:	7c1b      	ldrb	r3, [r3, #16]
 8028f92:	461a      	mov	r2, r3
 8028f94:	68bb      	ldr	r3, [r7, #8]
 8028f96:	7c5b      	ldrb	r3, [r3, #17]
 8028f98:	021b      	lsls	r3, r3, #8
 8028f9a:	431a      	orrs	r2, r3
 8028f9c:	68bb      	ldr	r3, [r7, #8]
 8028f9e:	7c9b      	ldrb	r3, [r3, #18]
 8028fa0:	041b      	lsls	r3, r3, #16
 8028fa2:	431a      	orrs	r2, r3
 8028fa4:	68bb      	ldr	r3, [r7, #8]
 8028fa6:	7cdb      	ldrb	r3, [r3, #19]
 8028fa8:	061b      	lsls	r3, r3, #24
 8028faa:	431a      	orrs	r2, r3
 8028fac:	68bb      	ldr	r3, [r7, #8]
 8028fae:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 8028fb0:	68bb      	ldr	r3, [r7, #8]
 8028fb2:	7e1b      	ldrb	r3, [r3, #24]
 8028fb4:	461a      	mov	r2, r3
 8028fb6:	68bb      	ldr	r3, [r7, #8]
 8028fb8:	7e5b      	ldrb	r3, [r3, #25]
 8028fba:	021b      	lsls	r3, r3, #8
 8028fbc:	431a      	orrs	r2, r3
 8028fbe:	68bb      	ldr	r3, [r7, #8]
 8028fc0:	7e9b      	ldrb	r3, [r3, #26]
 8028fc2:	041b      	lsls	r3, r3, #16
 8028fc4:	431a      	orrs	r2, r3
 8028fc6:	68bb      	ldr	r3, [r7, #8]
 8028fc8:	7edb      	ldrb	r3, [r3, #27]
 8028fca:	061b      	lsls	r3, r3, #24
 8028fcc:	431a      	orrs	r2, r3
 8028fce:	68bb      	ldr	r3, [r7, #8]
 8028fd0:	619a      	str	r2, [r3, #24]
 8028fd2:	e002      	b.n	8028fda <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028fd4:	23ff      	movs	r3, #255	; 0xff
 8028fd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 8028fda:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8028fde:	4618      	mov	r0, r3
 8028fe0:	3738      	adds	r7, #56	; 0x38
 8028fe2:	46bd      	mov	sp, r7
 8028fe4:	bd80      	pop	{r7, pc}

08028fe6 <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 8028fe6:	b480      	push	{r7}
 8028fe8:	b083      	sub	sp, #12
 8028fea:	af00      	add	r7, sp, #0
 8028fec:	6078      	str	r0, [r7, #4]
 8028fee:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 8028ff0:	687b      	ldr	r3, [r7, #4]
 8028ff2:	781b      	ldrb	r3, [r3, #0]
 8028ff4:	b21a      	sxth	r2, r3
 8028ff6:	687b      	ldr	r3, [r7, #4]
 8028ff8:	3301      	adds	r3, #1
 8028ffa:	781b      	ldrb	r3, [r3, #0]
 8028ffc:	021b      	lsls	r3, r3, #8
 8028ffe:	b21b      	sxth	r3, r3
 8029000:	4313      	orrs	r3, r2
 8029002:	b21a      	sxth	r2, r3
 8029004:	683b      	ldr	r3, [r7, #0]
 8029006:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 8029008:	687b      	ldr	r3, [r7, #4]
 802900a:	3302      	adds	r3, #2
 802900c:	781b      	ldrb	r3, [r3, #0]
 802900e:	b21a      	sxth	r2, r3
 8029010:	687b      	ldr	r3, [r7, #4]
 8029012:	3303      	adds	r3, #3
 8029014:	781b      	ldrb	r3, [r3, #0]
 8029016:	021b      	lsls	r3, r3, #8
 8029018:	b21b      	sxth	r3, r3
 802901a:	4313      	orrs	r3, r2
 802901c:	b21a      	sxth	r2, r3
 802901e:	683b      	ldr	r3, [r7, #0]
 8029020:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 8029022:	687b      	ldr	r3, [r7, #4]
 8029024:	3304      	adds	r3, #4
 8029026:	781b      	ldrb	r3, [r3, #0]
 8029028:	b21a      	sxth	r2, r3
 802902a:	687b      	ldr	r3, [r7, #4]
 802902c:	3305      	adds	r3, #5
 802902e:	781b      	ldrb	r3, [r3, #0]
 8029030:	021b      	lsls	r3, r3, #8
 8029032:	b21b      	sxth	r3, r3
 8029034:	4313      	orrs	r3, r2
 8029036:	b21a      	sxth	r2, r3
 8029038:	683b      	ldr	r3, [r7, #0]
 802903a:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 802903c:	687b      	ldr	r3, [r7, #4]
 802903e:	3306      	adds	r3, #6
 8029040:	781b      	ldrb	r3, [r3, #0]
 8029042:	b21a      	sxth	r2, r3
 8029044:	687b      	ldr	r3, [r7, #4]
 8029046:	3307      	adds	r3, #7
 8029048:	781b      	ldrb	r3, [r3, #0]
 802904a:	021b      	lsls	r3, r3, #8
 802904c:	b21b      	sxth	r3, r3
 802904e:	4313      	orrs	r3, r2
 8029050:	b21a      	sxth	r2, r3
 8029052:	683b      	ldr	r3, [r7, #0]
 8029054:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 8029056:	687b      	ldr	r3, [r7, #4]
 8029058:	3308      	adds	r3, #8
 802905a:	781b      	ldrb	r3, [r3, #0]
 802905c:	b21a      	sxth	r2, r3
 802905e:	687b      	ldr	r3, [r7, #4]
 8029060:	3309      	adds	r3, #9
 8029062:	781b      	ldrb	r3, [r3, #0]
 8029064:	021b      	lsls	r3, r3, #8
 8029066:	b21b      	sxth	r3, r3
 8029068:	4313      	orrs	r3, r2
 802906a:	b21b      	sxth	r3, r3
 802906c:	b29a      	uxth	r2, r3
 802906e:	683b      	ldr	r3, [r7, #0]
 8029070:	811a      	strh	r2, [r3, #8]
}
 8029072:	bf00      	nop
 8029074:	370c      	adds	r7, #12
 8029076:	46bd      	mov	sp, r7
 8029078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802907c:	4770      	bx	lr
	...

08029080 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 8029080:	b580      	push	{r7, lr}
 8029082:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8029084:	4b12      	ldr	r3, [pc, #72]	; (80290d0 <MX_COMP2_Init+0x50>)
 8029086:	4a13      	ldr	r2, [pc, #76]	; (80290d4 <MX_COMP2_Init+0x54>)
 8029088:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 802908a:	4b11      	ldr	r3, [pc, #68]	; (80290d0 <MX_COMP2_Init+0x50>)
 802908c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8029090:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8029092:	4b0f      	ldr	r3, [pc, #60]	; (80290d0 <MX_COMP2_Init+0x50>)
 8029094:	2200      	movs	r2, #0
 8029096:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8029098:	4b0d      	ldr	r3, [pc, #52]	; (80290d0 <MX_COMP2_Init+0x50>)
 802909a:	2200      	movs	r2, #0
 802909c:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 802909e:	4b0c      	ldr	r3, [pc, #48]	; (80290d0 <MX_COMP2_Init+0x50>)
 80290a0:	2200      	movs	r2, #0
 80290a2:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80290a4:	4b0a      	ldr	r3, [pc, #40]	; (80290d0 <MX_COMP2_Init+0x50>)
 80290a6:	2200      	movs	r2, #0
 80290a8:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80290aa:	4b09      	ldr	r3, [pc, #36]	; (80290d0 <MX_COMP2_Init+0x50>)
 80290ac:	2200      	movs	r2, #0
 80290ae:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80290b0:	4b07      	ldr	r3, [pc, #28]	; (80290d0 <MX_COMP2_Init+0x50>)
 80290b2:	2200      	movs	r2, #0
 80290b4:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80290b6:	4b06      	ldr	r3, [pc, #24]	; (80290d0 <MX_COMP2_Init+0x50>)
 80290b8:	2231      	movs	r2, #49	; 0x31
 80290ba:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80290bc:	4804      	ldr	r0, [pc, #16]	; (80290d0 <MX_COMP2_Init+0x50>)
 80290be:	f001 fd1f 	bl	802ab00 <HAL_COMP_Init>
 80290c2:	4603      	mov	r3, r0
 80290c4:	2b00      	cmp	r3, #0
 80290c6:	d001      	beq.n	80290cc <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 80290c8:	f000 fc28 	bl	802991c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80290cc:	bf00      	nop
 80290ce:	bd80      	pop	{r7, pc}
 80290d0:	24024518 	.word	0x24024518
 80290d4:	58003810 	.word	0x58003810

080290d8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80290d8:	b580      	push	{r7, lr}
 80290da:	b08a      	sub	sp, #40	; 0x28
 80290dc:	af00      	add	r7, sp, #0
 80290de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80290e0:	f107 0314 	add.w	r3, r7, #20
 80290e4:	2200      	movs	r2, #0
 80290e6:	601a      	str	r2, [r3, #0]
 80290e8:	605a      	str	r2, [r3, #4]
 80290ea:	609a      	str	r2, [r3, #8]
 80290ec:	60da      	str	r2, [r3, #12]
 80290ee:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 80290f0:	687b      	ldr	r3, [r7, #4]
 80290f2:	681b      	ldr	r3, [r3, #0]
 80290f4:	4a1c      	ldr	r2, [pc, #112]	; (8029168 <HAL_COMP_MspInit+0x90>)
 80290f6:	4293      	cmp	r3, r2
 80290f8:	d132      	bne.n	8029160 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 80290fa:	4b1c      	ldr	r3, [pc, #112]	; (802916c <HAL_COMP_MspInit+0x94>)
 80290fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029100:	4a1a      	ldr	r2, [pc, #104]	; (802916c <HAL_COMP_MspInit+0x94>)
 8029102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8029106:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802910a:	4b18      	ldr	r3, [pc, #96]	; (802916c <HAL_COMP_MspInit+0x94>)
 802910c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8029114:	613b      	str	r3, [r7, #16]
 8029116:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8029118:	4b14      	ldr	r3, [pc, #80]	; (802916c <HAL_COMP_MspInit+0x94>)
 802911a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802911e:	4a13      	ldr	r2, [pc, #76]	; (802916c <HAL_COMP_MspInit+0x94>)
 8029120:	f043 0310 	orr.w	r3, r3, #16
 8029124:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029128:	4b10      	ldr	r3, [pc, #64]	; (802916c <HAL_COMP_MspInit+0x94>)
 802912a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802912e:	f003 0310 	and.w	r3, r3, #16
 8029132:	60fb      	str	r3, [r7, #12]
 8029134:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8029136:	f44f 7300 	mov.w	r3, #512	; 0x200
 802913a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802913c:	2303      	movs	r3, #3
 802913e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029140:	2300      	movs	r3, #0
 8029142:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8029144:	f107 0314 	add.w	r3, r7, #20
 8029148:	4619      	mov	r1, r3
 802914a:	4809      	ldr	r0, [pc, #36]	; (8029170 <HAL_COMP_MspInit+0x98>)
 802914c:	f004 ffee 	bl	802e12c <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 4, 0);
 8029150:	2200      	movs	r2, #0
 8029152:	2104      	movs	r1, #4
 8029154:	2089      	movs	r0, #137	; 0x89
 8029156:	f001 ff96 	bl	802b086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 802915a:	2089      	movs	r0, #137	; 0x89
 802915c:	f001 ffad 	bl	802b0ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 8029160:	bf00      	nop
 8029162:	3728      	adds	r7, #40	; 0x28
 8029164:	46bd      	mov	sp, r7
 8029166:	bd80      	pop	{r7, pc}
 8029168:	58003810 	.word	0x58003810
 802916c:	58024400 	.word	0x58024400
 8029170:	58021000 	.word	0x58021000

08029174 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8029174:	b580      	push	{r7, lr}
 8029176:	b08a      	sub	sp, #40	; 0x28
 8029178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 802917a:	1d3b      	adds	r3, r7, #4
 802917c:	2224      	movs	r2, #36	; 0x24
 802917e:	2100      	movs	r1, #0
 8029180:	4618      	mov	r0, r3
 8029182:	f012 fd8d 	bl	803bca0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8029186:	4b12      	ldr	r3, [pc, #72]	; (80291d0 <MX_DAC1_Init+0x5c>)
 8029188:	4a12      	ldr	r2, [pc, #72]	; (80291d4 <MX_DAC1_Init+0x60>)
 802918a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 802918c:	4810      	ldr	r0, [pc, #64]	; (80291d0 <MX_DAC1_Init+0x5c>)
 802918e:	f001 ffae 	bl	802b0ee <HAL_DAC_Init>
 8029192:	4603      	mov	r3, r0
 8029194:	2b00      	cmp	r3, #0
 8029196:	d001      	beq.n	802919c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8029198:	f000 fbc0 	bl	802991c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 802919c:	2300      	movs	r3, #0
 802919e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80291a0:	2300      	movs	r3, #0
 80291a2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80291a4:	2302      	movs	r3, #2
 80291a6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80291a8:	2302      	movs	r3, #2
 80291aa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80291ac:	2300      	movs	r3, #0
 80291ae:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80291b0:	1d3b      	adds	r3, r7, #4
 80291b2:	2200      	movs	r2, #0
 80291b4:	4619      	mov	r1, r3
 80291b6:	4806      	ldr	r0, [pc, #24]	; (80291d0 <MX_DAC1_Init+0x5c>)
 80291b8:	f002 f832 	bl	802b220 <HAL_DAC_ConfigChannel>
 80291bc:	4603      	mov	r3, r0
 80291be:	2b00      	cmp	r3, #0
 80291c0:	d001      	beq.n	80291c6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80291c2:	f000 fbab 	bl	802991c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80291c6:	bf00      	nop
 80291c8:	3728      	adds	r7, #40	; 0x28
 80291ca:	46bd      	mov	sp, r7
 80291cc:	bd80      	pop	{r7, pc}
 80291ce:	bf00      	nop
 80291d0:	24024544 	.word	0x24024544
 80291d4:	40007400 	.word	0x40007400

080291d8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80291d8:	b480      	push	{r7}
 80291da:	b085      	sub	sp, #20
 80291dc:	af00      	add	r7, sp, #0
 80291de:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 80291e0:	687b      	ldr	r3, [r7, #4]
 80291e2:	681b      	ldr	r3, [r3, #0]
 80291e4:	4a0b      	ldr	r2, [pc, #44]	; (8029214 <HAL_DAC_MspInit+0x3c>)
 80291e6:	4293      	cmp	r3, r2
 80291e8:	d10e      	bne.n	8029208 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80291ea:	4b0b      	ldr	r3, [pc, #44]	; (8029218 <HAL_DAC_MspInit+0x40>)
 80291ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80291f0:	4a09      	ldr	r2, [pc, #36]	; (8029218 <HAL_DAC_MspInit+0x40>)
 80291f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80291f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80291fa:	4b07      	ldr	r3, [pc, #28]	; (8029218 <HAL_DAC_MspInit+0x40>)
 80291fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8029204:	60fb      	str	r3, [r7, #12]
 8029206:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8029208:	bf00      	nop
 802920a:	3714      	adds	r7, #20
 802920c:	46bd      	mov	sp, r7
 802920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029212:	4770      	bx	lr
 8029214:	40007400 	.word	0x40007400
 8029218:	58024400 	.word	0x58024400

0802921c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 802921c:	b580      	push	{r7, lr}
 802921e:	b082      	sub	sp, #8
 8029220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8029222:	4b19      	ldr	r3, [pc, #100]	; (8029288 <MX_DMA_Init+0x6c>)
 8029224:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8029228:	4a17      	ldr	r2, [pc, #92]	; (8029288 <MX_DMA_Init+0x6c>)
 802922a:	f043 0301 	orr.w	r3, r3, #1
 802922e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8029232:	4b15      	ldr	r3, [pc, #84]	; (8029288 <MX_DMA_Init+0x6c>)
 8029234:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8029238:	f003 0301 	and.w	r3, r3, #1
 802923c:	607b      	str	r3, [r7, #4]
 802923e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8029240:	2200      	movs	r2, #0
 8029242:	2100      	movs	r1, #0
 8029244:	200b      	movs	r0, #11
 8029246:	f001 ff1e 	bl	802b086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 802924a:	200b      	movs	r0, #11
 802924c:	f001 ff35 	bl	802b0ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8029250:	2200      	movs	r2, #0
 8029252:	2100      	movs	r1, #0
 8029254:	200c      	movs	r0, #12
 8029256:	f001 ff16 	bl	802b086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 802925a:	200c      	movs	r0, #12
 802925c:	f001 ff2d 	bl	802b0ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8029260:	2200      	movs	r2, #0
 8029262:	2100      	movs	r1, #0
 8029264:	200f      	movs	r0, #15
 8029266:	f001 ff0e 	bl	802b086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 802926a:	200f      	movs	r0, #15
 802926c:	f001 ff25 	bl	802b0ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8029270:	2200      	movs	r2, #0
 8029272:	2100      	movs	r1, #0
 8029274:	2010      	movs	r0, #16
 8029276:	f001 ff06 	bl	802b086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 802927a:	2010      	movs	r0, #16
 802927c:	f001 ff1d 	bl	802b0ba <HAL_NVIC_EnableIRQ>

}
 8029280:	bf00      	nop
 8029282:	3708      	adds	r7, #8
 8029284:	46bd      	mov	sp, r7
 8029286:	bd80      	pop	{r7, pc}
 8029288:	58024400 	.word	0x58024400

0802928c <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 802928c:	b580      	push	{r7, lr}
 802928e:	b08a      	sub	sp, #40	; 0x28
 8029290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029292:	f107 0314 	add.w	r3, r7, #20
 8029296:	2200      	movs	r2, #0
 8029298:	601a      	str	r2, [r3, #0]
 802929a:	605a      	str	r2, [r3, #4]
 802929c:	609a      	str	r2, [r3, #8]
 802929e:	60da      	str	r2, [r3, #12]
 80292a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80292a2:	4b3b      	ldr	r3, [pc, #236]	; (8029390 <MX_GPIO_Init+0x104>)
 80292a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80292a8:	4a39      	ldr	r2, [pc, #228]	; (8029390 <MX_GPIO_Init+0x104>)
 80292aa:	f043 0304 	orr.w	r3, r3, #4
 80292ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80292b2:	4b37      	ldr	r3, [pc, #220]	; (8029390 <MX_GPIO_Init+0x104>)
 80292b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80292b8:	f003 0304 	and.w	r3, r3, #4
 80292bc:	613b      	str	r3, [r7, #16]
 80292be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80292c0:	4b33      	ldr	r3, [pc, #204]	; (8029390 <MX_GPIO_Init+0x104>)
 80292c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80292c6:	4a32      	ldr	r2, [pc, #200]	; (8029390 <MX_GPIO_Init+0x104>)
 80292c8:	f043 0301 	orr.w	r3, r3, #1
 80292cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80292d0:	4b2f      	ldr	r3, [pc, #188]	; (8029390 <MX_GPIO_Init+0x104>)
 80292d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80292d6:	f003 0301 	and.w	r3, r3, #1
 80292da:	60fb      	str	r3, [r7, #12]
 80292dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80292de:	4b2c      	ldr	r3, [pc, #176]	; (8029390 <MX_GPIO_Init+0x104>)
 80292e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80292e4:	4a2a      	ldr	r2, [pc, #168]	; (8029390 <MX_GPIO_Init+0x104>)
 80292e6:	f043 0310 	orr.w	r3, r3, #16
 80292ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80292ee:	4b28      	ldr	r3, [pc, #160]	; (8029390 <MX_GPIO_Init+0x104>)
 80292f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80292f4:	f003 0310 	and.w	r3, r3, #16
 80292f8:	60bb      	str	r3, [r7, #8]
 80292fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80292fc:	4b24      	ldr	r3, [pc, #144]	; (8029390 <MX_GPIO_Init+0x104>)
 80292fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029302:	4a23      	ldr	r2, [pc, #140]	; (8029390 <MX_GPIO_Init+0x104>)
 8029304:	f043 0302 	orr.w	r3, r3, #2
 8029308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802930c:	4b20      	ldr	r3, [pc, #128]	; (8029390 <MX_GPIO_Init+0x104>)
 802930e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029312:	f003 0302 	and.w	r3, r3, #2
 8029316:	607b      	str	r3, [r7, #4]
 8029318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802931a:	4b1d      	ldr	r3, [pc, #116]	; (8029390 <MX_GPIO_Init+0x104>)
 802931c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029320:	4a1b      	ldr	r2, [pc, #108]	; (8029390 <MX_GPIO_Init+0x104>)
 8029322:	f043 0308 	orr.w	r3, r3, #8
 8029326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802932a:	4b19      	ldr	r3, [pc, #100]	; (8029390 <MX_GPIO_Init+0x104>)
 802932c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029330:	f003 0308 	and.w	r3, r3, #8
 8029334:	603b      	str	r3, [r7, #0]
 8029336:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 8029338:	2200      	movs	r2, #0
 802933a:	2101      	movs	r1, #1
 802933c:	4815      	ldr	r0, [pc, #84]	; (8029394 <MX_GPIO_Init+0x108>)
 802933e:	f005 f8a5 	bl	802e48c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8029342:	2200      	movs	r2, #0
 8029344:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8029348:	4813      	ldr	r0, [pc, #76]	; (8029398 <MX_GPIO_Init+0x10c>)
 802934a:	f005 f89f 	bl	802e48c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 802934e:	2301      	movs	r3, #1
 8029350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8029352:	2301      	movs	r3, #1
 8029354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8029356:	2302      	movs	r3, #2
 8029358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802935a:	2303      	movs	r3, #3
 802935c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 802935e:	f107 0314 	add.w	r3, r7, #20
 8029362:	4619      	mov	r1, r3
 8029364:	480b      	ldr	r0, [pc, #44]	; (8029394 <MX_GPIO_Init+0x108>)
 8029366:	f004 fee1 	bl	802e12c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 802936a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802936e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8029370:	2301      	movs	r3, #1
 8029372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8029374:	2302      	movs	r3, #2
 8029376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029378:	2303      	movs	r3, #3
 802937a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 802937c:	f107 0314 	add.w	r3, r7, #20
 8029380:	4619      	mov	r1, r3
 8029382:	4805      	ldr	r0, [pc, #20]	; (8029398 <MX_GPIO_Init+0x10c>)
 8029384:	f004 fed2 	bl	802e12c <HAL_GPIO_Init>

}
 8029388:	bf00      	nop
 802938a:	3728      	adds	r7, #40	; 0x28
 802938c:	46bd      	mov	sp, r7
 802938e:	bd80      	pop	{r7, pc}
 8029390:	58024400 	.word	0x58024400
 8029394:	58020800 	.word	0x58020800
 8029398:	58021000 	.word	0x58021000

0802939c <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 802939c:	b580      	push	{r7, lr}
 802939e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80293a0:	4b1b      	ldr	r3, [pc, #108]	; (8029410 <MX_I2C2_Init+0x74>)
 80293a2:	4a1c      	ldr	r2, [pc, #112]	; (8029414 <MX_I2C2_Init+0x78>)
 80293a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 80293a6:	4b1a      	ldr	r3, [pc, #104]	; (8029410 <MX_I2C2_Init+0x74>)
 80293a8:	4a1b      	ldr	r2, [pc, #108]	; (8029418 <MX_I2C2_Init+0x7c>)
 80293aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80293ac:	4b18      	ldr	r3, [pc, #96]	; (8029410 <MX_I2C2_Init+0x74>)
 80293ae:	2200      	movs	r2, #0
 80293b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80293b2:	4b17      	ldr	r3, [pc, #92]	; (8029410 <MX_I2C2_Init+0x74>)
 80293b4:	2201      	movs	r2, #1
 80293b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80293b8:	4b15      	ldr	r3, [pc, #84]	; (8029410 <MX_I2C2_Init+0x74>)
 80293ba:	2200      	movs	r2, #0
 80293bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80293be:	4b14      	ldr	r3, [pc, #80]	; (8029410 <MX_I2C2_Init+0x74>)
 80293c0:	2200      	movs	r2, #0
 80293c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80293c4:	4b12      	ldr	r3, [pc, #72]	; (8029410 <MX_I2C2_Init+0x74>)
 80293c6:	2200      	movs	r2, #0
 80293c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80293ca:	4b11      	ldr	r3, [pc, #68]	; (8029410 <MX_I2C2_Init+0x74>)
 80293cc:	2200      	movs	r2, #0
 80293ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80293d0:	4b0f      	ldr	r3, [pc, #60]	; (8029410 <MX_I2C2_Init+0x74>)
 80293d2:	2200      	movs	r2, #0
 80293d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80293d6:	480e      	ldr	r0, [pc, #56]	; (8029410 <MX_I2C2_Init+0x74>)
 80293d8:	f005 f872 	bl	802e4c0 <HAL_I2C_Init>
 80293dc:	4603      	mov	r3, r0
 80293de:	2b00      	cmp	r3, #0
 80293e0:	d001      	beq.n	80293e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80293e2:	f000 fa9b 	bl	802991c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80293e6:	2100      	movs	r1, #0
 80293e8:	4809      	ldr	r0, [pc, #36]	; (8029410 <MX_I2C2_Init+0x74>)
 80293ea:	f005 ff7e 	bl	802f2ea <HAL_I2CEx_ConfigAnalogFilter>
 80293ee:	4603      	mov	r3, r0
 80293f0:	2b00      	cmp	r3, #0
 80293f2:	d001      	beq.n	80293f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80293f4:	f000 fa92 	bl	802991c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80293f8:	2100      	movs	r1, #0
 80293fa:	4805      	ldr	r0, [pc, #20]	; (8029410 <MX_I2C2_Init+0x74>)
 80293fc:	f005 ffc0 	bl	802f380 <HAL_I2CEx_ConfigDigitalFilter>
 8029400:	4603      	mov	r3, r0
 8029402:	2b00      	cmp	r3, #0
 8029404:	d001      	beq.n	802940a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8029406:	f000 fa89 	bl	802991c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 802940a:	bf00      	nop
 802940c:	bd80      	pop	{r7, pc}
 802940e:	bf00      	nop
 8029410:	24024558 	.word	0x24024558
 8029414:	40005800 	.word	0x40005800
 8029418:	00b03fdb 	.word	0x00b03fdb

0802941c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 802941c:	b580      	push	{r7, lr}
 802941e:	b0b8      	sub	sp, #224	; 0xe0
 8029420:	af00      	add	r7, sp, #0
 8029422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029424:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029428:	2200      	movs	r2, #0
 802942a:	601a      	str	r2, [r3, #0]
 802942c:	605a      	str	r2, [r3, #4]
 802942e:	609a      	str	r2, [r3, #8]
 8029430:	60da      	str	r2, [r3, #12]
 8029432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029434:	f107 0310 	add.w	r3, r7, #16
 8029438:	22bc      	movs	r2, #188	; 0xbc
 802943a:	2100      	movs	r1, #0
 802943c:	4618      	mov	r0, r3
 802943e:	f012 fc2f 	bl	803bca0 <memset>
  if(i2cHandle->Instance==I2C2)
 8029442:	687b      	ldr	r3, [r7, #4]
 8029444:	681b      	ldr	r3, [r3, #0]
 8029446:	4a5a      	ldr	r2, [pc, #360]	; (80295b0 <HAL_I2C_MspInit+0x194>)
 8029448:	4293      	cmp	r3, r2
 802944a:	f040 80ad 	bne.w	80295a8 <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 802944e:	2308      	movs	r3, #8
 8029450:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8029452:	2300      	movs	r3, #0
 8029454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029458:	f107 0310 	add.w	r3, r7, #16
 802945c:	4618      	mov	r0, r3
 802945e:	f008 fab5 	bl	80319cc <HAL_RCCEx_PeriphCLKConfig>
 8029462:	4603      	mov	r3, r0
 8029464:	2b00      	cmp	r3, #0
 8029466:	d001      	beq.n	802946c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8029468:	f000 fa58 	bl	802991c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802946c:	4b51      	ldr	r3, [pc, #324]	; (80295b4 <HAL_I2C_MspInit+0x198>)
 802946e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029472:	4a50      	ldr	r2, [pc, #320]	; (80295b4 <HAL_I2C_MspInit+0x198>)
 8029474:	f043 0302 	orr.w	r3, r3, #2
 8029478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802947c:	4b4d      	ldr	r3, [pc, #308]	; (80295b4 <HAL_I2C_MspInit+0x198>)
 802947e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029482:	f003 0302 	and.w	r3, r3, #2
 8029486:	60fb      	str	r3, [r7, #12]
 8029488:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802948a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802948e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8029492:	2312      	movs	r3, #18
 8029494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029498:	2300      	movs	r3, #0
 802949a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802949e:	2300      	movs	r3, #0
 80294a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80294a4:	2304      	movs	r3, #4
 80294a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80294aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80294ae:	4619      	mov	r1, r3
 80294b0:	4841      	ldr	r0, [pc, #260]	; (80295b8 <HAL_I2C_MspInit+0x19c>)
 80294b2:	f004 fe3b 	bl	802e12c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80294b6:	4b3f      	ldr	r3, [pc, #252]	; (80295b4 <HAL_I2C_MspInit+0x198>)
 80294b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80294bc:	4a3d      	ldr	r2, [pc, #244]	; (80295b4 <HAL_I2C_MspInit+0x198>)
 80294be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80294c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80294c6:	4b3b      	ldr	r3, [pc, #236]	; (80295b4 <HAL_I2C_MspInit+0x198>)
 80294c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80294cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80294d0:	60bb      	str	r3, [r7, #8]
 80294d2:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 80294d4:	4b39      	ldr	r3, [pc, #228]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 80294d6:	4a3a      	ldr	r2, [pc, #232]	; (80295c0 <HAL_I2C_MspInit+0x1a4>)
 80294d8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 80294da:	4b38      	ldr	r3, [pc, #224]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 80294dc:	2223      	movs	r2, #35	; 0x23
 80294de:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80294e0:	4b36      	ldr	r3, [pc, #216]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 80294e2:	2200      	movs	r2, #0
 80294e4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80294e6:	4b35      	ldr	r3, [pc, #212]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 80294e8:	2200      	movs	r2, #0
 80294ea:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80294ec:	4b33      	ldr	r3, [pc, #204]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 80294ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80294f2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80294f4:	4b31      	ldr	r3, [pc, #196]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 80294f6:	2200      	movs	r2, #0
 80294f8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80294fa:	4b30      	ldr	r3, [pc, #192]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 80294fc:	2200      	movs	r2, #0
 80294fe:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8029500:	4b2e      	ldr	r3, [pc, #184]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 8029502:	2200      	movs	r2, #0
 8029504:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8029506:	4b2d      	ldr	r3, [pc, #180]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 8029508:	2200      	movs	r2, #0
 802950a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802950c:	4b2b      	ldr	r3, [pc, #172]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 802950e:	2200      	movs	r2, #0
 8029510:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8029512:	482a      	ldr	r0, [pc, #168]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 8029514:	f001 ffb4 	bl	802b480 <HAL_DMA_Init>
 8029518:	4603      	mov	r3, r0
 802951a:	2b00      	cmp	r3, #0
 802951c:	d001      	beq.n	8029522 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 802951e:	f000 f9fd 	bl	802991c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8029522:	687b      	ldr	r3, [r7, #4]
 8029524:	4a25      	ldr	r2, [pc, #148]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 8029526:	63da      	str	r2, [r3, #60]	; 0x3c
 8029528:	4a24      	ldr	r2, [pc, #144]	; (80295bc <HAL_I2C_MspInit+0x1a0>)
 802952a:	687b      	ldr	r3, [r7, #4]
 802952c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 802952e:	4b25      	ldr	r3, [pc, #148]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 8029530:	4a25      	ldr	r2, [pc, #148]	; (80295c8 <HAL_I2C_MspInit+0x1ac>)
 8029532:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8029534:	4b23      	ldr	r3, [pc, #140]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 8029536:	2224      	movs	r2, #36	; 0x24
 8029538:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802953a:	4b22      	ldr	r3, [pc, #136]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 802953c:	2240      	movs	r2, #64	; 0x40
 802953e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029540:	4b20      	ldr	r3, [pc, #128]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 8029542:	2200      	movs	r2, #0
 8029544:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8029546:	4b1f      	ldr	r3, [pc, #124]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 8029548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802954c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802954e:	4b1d      	ldr	r3, [pc, #116]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 8029550:	2200      	movs	r2, #0
 8029552:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029554:	4b1b      	ldr	r3, [pc, #108]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 8029556:	2200      	movs	r2, #0
 8029558:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 802955a:	4b1a      	ldr	r3, [pc, #104]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 802955c:	2200      	movs	r2, #0
 802955e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8029560:	4b18      	ldr	r3, [pc, #96]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 8029562:	2200      	movs	r2, #0
 8029564:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029566:	4b17      	ldr	r3, [pc, #92]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 8029568:	2200      	movs	r2, #0
 802956a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 802956c:	4815      	ldr	r0, [pc, #84]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 802956e:	f001 ff87 	bl	802b480 <HAL_DMA_Init>
 8029572:	4603      	mov	r3, r0
 8029574:	2b00      	cmp	r3, #0
 8029576:	d001      	beq.n	802957c <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 8029578:	f000 f9d0 	bl	802991c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 802957c:	687b      	ldr	r3, [r7, #4]
 802957e:	4a11      	ldr	r2, [pc, #68]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 8029580:	639a      	str	r2, [r3, #56]	; 0x38
 8029582:	4a10      	ldr	r2, [pc, #64]	; (80295c4 <HAL_I2C_MspInit+0x1a8>)
 8029584:	687b      	ldr	r3, [r7, #4]
 8029586:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8029588:	2200      	movs	r2, #0
 802958a:	2100      	movs	r1, #0
 802958c:	2021      	movs	r0, #33	; 0x21
 802958e:	f001 fd7a 	bl	802b086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8029592:	2021      	movs	r0, #33	; 0x21
 8029594:	f001 fd91 	bl	802b0ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8029598:	2200      	movs	r2, #0
 802959a:	2100      	movs	r1, #0
 802959c:	2022      	movs	r0, #34	; 0x22
 802959e:	f001 fd72 	bl	802b086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80295a2:	2022      	movs	r0, #34	; 0x22
 80295a4:	f001 fd89 	bl	802b0ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80295a8:	bf00      	nop
 80295aa:	37e0      	adds	r7, #224	; 0xe0
 80295ac:	46bd      	mov	sp, r7
 80295ae:	bd80      	pop	{r7, pc}
 80295b0:	40005800 	.word	0x40005800
 80295b4:	58024400 	.word	0x58024400
 80295b8:	58020400 	.word	0x58020400
 80295bc:	240245a4 	.word	0x240245a4
 80295c0:	40020010 	.word	0x40020010
 80295c4:	2402461c 	.word	0x2402461c
 80295c8:	40020028 	.word	0x40020028

080295cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80295cc:	b5b0      	push	{r4, r5, r7, lr}
 80295ce:	b090      	sub	sp, #64	; 0x40
 80295d0:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (FLASH_BASE | 0x20000);
 80295d2:	4b33      	ldr	r3, [pc, #204]	; (80296a0 <main+0xd4>)
 80295d4:	4a33      	ldr	r2, [pc, #204]	; (80296a4 <main+0xd8>)
 80295d6:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80295d8:	f001 f9d0 	bl	802a97c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80295dc:	f000 f874 	bl	80296c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80295e0:	f7ff fe54 	bl	802928c <MX_GPIO_Init>
  MX_DMA_Init();
 80295e4:	f7ff fe1a 	bl	802921c <MX_DMA_Init>
  MX_I2C2_Init();
 80295e8:	f7ff fed8 	bl	802939c <MX_I2C2_Init>
  MX_SPI1_Init();
 80295ec:	f000 f99c 	bl	8029928 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80295f0:	f011 fd78 	bl	803b0e4 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80295f4:	f000 ff4a 	bl	802a48c <MX_USART2_UART_Init>
  MX_UART4_Init();
 80295f8:	f000 fe52 	bl	802a2a0 <MX_UART4_Init>
  MX_UART7_Init();
 80295fc:	f000 fea2 	bl	802a344 <MX_UART7_Init>
  MX_USART3_UART_Init();
 8029600:	f000 ff90 	bl	802a524 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8029604:	f000 fd4c 	bl	802a0a0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8029608:	f000 fcfc 	bl	802a004 <MX_TIM2_Init>
  MX_TIM4_Init();
 802960c:	f000 fd96 	bl	802a13c <MX_TIM4_Init>
  MX_COMP2_Init();
 8029610:	f7ff fd36 	bl	8029080 <MX_COMP2_Init>
  MX_DAC1_Init();
 8029614:	f7ff fdae 	bl	8029174 <MX_DAC1_Init>
  MX_UART8_Init();
 8029618:	f000 fee2 	bl	802a3e0 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 802961c:	2100      	movs	r1, #0
 802961e:	4822      	ldr	r0, [pc, #136]	; (80296a8 <main+0xdc>)
 8029620:	f001 fd87 	bl	802b132 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 8029624:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 8029628:	2200      	movs	r2, #0
 802962a:	2100      	movs	r1, #0
 802962c:	481e      	ldr	r0, [pc, #120]	; (80296a8 <main+0xdc>)
 802962e:	f001 fdd2 	bl	802b1d6 <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 8029632:	481e      	ldr	r0, [pc, #120]	; (80296ac <main+0xe0>)
 8029634:	f00a feb6 	bl	80343a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8029638:	481d      	ldr	r0, [pc, #116]	; (80296b0 <main+0xe4>)
 802963a:	f00a feb3 	bl	80343a4 <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 802963e:	481d      	ldr	r0, [pc, #116]	; (80296b4 <main+0xe8>)
 8029640:	f001 fb88 	bl	802ad54 <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 8029644:	4b1c      	ldr	r3, [pc, #112]	; (80296b8 <main+0xec>)
 8029646:	607b      	str	r3, [r7, #4]
	config.HeadStreamUart = &huart4;
 8029648:	4b1c      	ldr	r3, [pc, #112]	; (80296bc <main+0xf0>)
 802964a:	60bb      	str	r3, [r7, #8]

	config.HeadTimeout = 10;
 802964c:	230a      	movs	r3, #10
 802964e:	60fb      	str	r3, [r7, #12]

	config.BodyUart = &huart8;
 8029650:	4b1b      	ldr	r3, [pc, #108]	; (80296c0 <main+0xf4>)
 8029652:	613b      	str	r3, [r7, #16]
	config.BodyTimeout = 10;
 8029654:	230a      	movs	r3, #10
 8029656:	617b      	str	r3, [r7, #20]
	config.BodyPeriod = 20;
 8029658:	2314      	movs	r3, #20
 802965a:	763b      	strb	r3, [r7, #24]

	config.IMUSpi = &hspi1;
 802965c:	4b19      	ldr	r3, [pc, #100]	; (80296c4 <main+0xf8>)
 802965e:	61fb      	str	r3, [r7, #28]

	config.VersionMajor = 0;
 8029660:	2300      	movs	r3, #0
 8029662:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	config.VersionMinor = 1;
 8029666:	2301      	movs	r3, #1
 8029668:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	config.StrobeOffset = 0;
 802966c:	2300      	movs	r3, #0
 802966e:	623b      	str	r3, [r7, #32]

	if (MotherboardInit(config))
 8029670:	466d      	mov	r5, sp
 8029672:	f107 0414 	add.w	r4, r7, #20
 8029676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8029678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802967a:	6823      	ldr	r3, [r4, #0]
 802967c:	602b      	str	r3, [r5, #0]
 802967e:	1d3b      	adds	r3, r7, #4
 8029680:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8029682:	f7f9 fcd9 	bl	8023038 <MotherboardInit>
 8029686:	4603      	mov	r3, r0
 8029688:	2b00      	cmp	r3, #0
 802968a:	d001      	beq.n	8029690 <main+0xc4>
		return 1;
 802968c:	2301      	movs	r3, #1
 802968e:	e002      	b.n	8029696 <main+0xca>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 8029690:	f7f9 fd2a 	bl	80230e8 <MotherboardTick>
 8029694:	e7fc      	b.n	8029690 <main+0xc4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 8029696:	4618      	mov	r0, r3
 8029698:	3728      	adds	r7, #40	; 0x28
 802969a:	46bd      	mov	sp, r7
 802969c:	bdb0      	pop	{r4, r5, r7, pc}
 802969e:	bf00      	nop
 80296a0:	e000ed00 	.word	0xe000ed00
 80296a4:	08020000 	.word	0x08020000
 80296a8:	24024544 	.word	0x24024544
 80296ac:	2402485c 	.word	0x2402485c
 80296b0:	24024810 	.word	0x24024810
 80296b4:	24024518 	.word	0x24024518
 80296b8:	24024b34 	.word	0x24024b34
 80296bc:	240248f4 	.word	0x240248f4
 80296c0:	24024a14 	.word	0x24024a14
 80296c4:	24024694 	.word	0x24024694

080296c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80296c8:	b580      	push	{r7, lr}
 80296ca:	b09e      	sub	sp, #120	; 0x78
 80296cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80296ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80296d2:	224c      	movs	r2, #76	; 0x4c
 80296d4:	2100      	movs	r1, #0
 80296d6:	4618      	mov	r0, r3
 80296d8:	f012 fae2 	bl	803bca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80296dc:	f107 030c 	add.w	r3, r7, #12
 80296e0:	2220      	movs	r2, #32
 80296e2:	2100      	movs	r1, #0
 80296e4:	4618      	mov	r0, r3
 80296e6:	f012 fadb 	bl	803bca0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80296ea:	2002      	movs	r0, #2
 80296ec:	f007 f96a 	bl	80309c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80296f0:	2300      	movs	r3, #0
 80296f2:	60bb      	str	r3, [r7, #8]
 80296f4:	4b4d      	ldr	r3, [pc, #308]	; (802982c <SystemClock_Config+0x164>)
 80296f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80296f8:	4a4c      	ldr	r2, [pc, #304]	; (802982c <SystemClock_Config+0x164>)
 80296fa:	f023 0301 	bic.w	r3, r3, #1
 80296fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8029700:	4b4a      	ldr	r3, [pc, #296]	; (802982c <SystemClock_Config+0x164>)
 8029702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029704:	f003 0301 	and.w	r3, r3, #1
 8029708:	60bb      	str	r3, [r7, #8]
 802970a:	4b49      	ldr	r3, [pc, #292]	; (8029830 <SystemClock_Config+0x168>)
 802970c:	699b      	ldr	r3, [r3, #24]
 802970e:	4a48      	ldr	r2, [pc, #288]	; (8029830 <SystemClock_Config+0x168>)
 8029710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8029714:	6193      	str	r3, [r2, #24]
 8029716:	4b46      	ldr	r3, [pc, #280]	; (8029830 <SystemClock_Config+0x168>)
 8029718:	699b      	ldr	r3, [r3, #24]
 802971a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802971e:	60bb      	str	r3, [r7, #8]
 8029720:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8029722:	bf00      	nop
 8029724:	4b42      	ldr	r3, [pc, #264]	; (8029830 <SystemClock_Config+0x168>)
 8029726:	699b      	ldr	r3, [r3, #24]
 8029728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802972c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029730:	d1f8      	bne.n	8029724 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029732:	4b40      	ldr	r3, [pc, #256]	; (8029834 <SystemClock_Config+0x16c>)
 8029734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029738:	4a3e      	ldr	r2, [pc, #248]	; (8029834 <SystemClock_Config+0x16c>)
 802973a:	f043 0302 	orr.w	r3, r3, #2
 802973e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8029742:	4b3c      	ldr	r3, [pc, #240]	; (8029834 <SystemClock_Config+0x16c>)
 8029744:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029748:	f003 0302 	and.w	r3, r3, #2
 802974c:	607b      	str	r3, [r7, #4]
 802974e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8029750:	2300      	movs	r3, #0
 8029752:	603b      	str	r3, [r7, #0]
 8029754:	4b36      	ldr	r3, [pc, #216]	; (8029830 <SystemClock_Config+0x168>)
 8029756:	699b      	ldr	r3, [r3, #24]
 8029758:	4a35      	ldr	r2, [pc, #212]	; (8029830 <SystemClock_Config+0x168>)
 802975a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802975e:	6193      	str	r3, [r2, #24]
 8029760:	4b33      	ldr	r3, [pc, #204]	; (8029830 <SystemClock_Config+0x168>)
 8029762:	699b      	ldr	r3, [r3, #24]
 8029764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8029768:	603b      	str	r3, [r7, #0]
 802976a:	4b30      	ldr	r3, [pc, #192]	; (802982c <SystemClock_Config+0x164>)
 802976c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802976e:	4a2f      	ldr	r2, [pc, #188]	; (802982c <SystemClock_Config+0x164>)
 8029770:	f043 0301 	orr.w	r3, r3, #1
 8029774:	62d3      	str	r3, [r2, #44]	; 0x2c
 8029776:	4b2d      	ldr	r3, [pc, #180]	; (802982c <SystemClock_Config+0x164>)
 8029778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802977a:	f003 0301 	and.w	r3, r3, #1
 802977e:	603b      	str	r3, [r7, #0]
 8029780:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8029782:	bf00      	nop
 8029784:	4b2a      	ldr	r3, [pc, #168]	; (8029830 <SystemClock_Config+0x168>)
 8029786:	699b      	ldr	r3, [r3, #24]
 8029788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802978c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029790:	d1f8      	bne.n	8029784 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8029792:	4b28      	ldr	r3, [pc, #160]	; (8029834 <SystemClock_Config+0x16c>)
 8029794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029796:	4a27      	ldr	r2, [pc, #156]	; (8029834 <SystemClock_Config+0x16c>)
 8029798:	f023 0303 	bic.w	r3, r3, #3
 802979c:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 802979e:	2322      	movs	r3, #34	; 0x22
 80297a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80297a2:	2301      	movs	r3, #1
 80297a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80297a6:	2340      	movs	r3, #64	; 0x40
 80297a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80297aa:	2301      	movs	r3, #1
 80297ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80297ae:	2302      	movs	r3, #2
 80297b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80297b2:	2300      	movs	r3, #0
 80297b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80297b6:	2304      	movs	r3, #4
 80297b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80297ba:	233c      	movs	r3, #60	; 0x3c
 80297bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80297be:	2302      	movs	r3, #2
 80297c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80297c2:	2305      	movs	r3, #5
 80297c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80297c6:	2302      	movs	r3, #2
 80297c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80297ca:	230c      	movs	r3, #12
 80297cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80297ce:	2300      	movs	r3, #0
 80297d0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80297d2:	2300      	movs	r3, #0
 80297d4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80297d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80297da:	4618      	mov	r0, r3
 80297dc:	f007 f93c 	bl	8030a58 <HAL_RCC_OscConfig>
 80297e0:	4603      	mov	r3, r0
 80297e2:	2b00      	cmp	r3, #0
 80297e4:	d001      	beq.n	80297ea <SystemClock_Config+0x122>
  {
    Error_Handler();
 80297e6:	f000 f899 	bl	802991c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80297ea:	233f      	movs	r3, #63	; 0x3f
 80297ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80297ee:	2303      	movs	r3, #3
 80297f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80297f2:	2300      	movs	r3, #0
 80297f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80297f6:	2308      	movs	r3, #8
 80297f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80297fa:	2340      	movs	r3, #64	; 0x40
 80297fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80297fe:	2340      	movs	r3, #64	; 0x40
 8029800:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8029802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029806:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8029808:	2340      	movs	r3, #64	; 0x40
 802980a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 802980c:	f107 030c 	add.w	r3, r7, #12
 8029810:	2104      	movs	r1, #4
 8029812:	4618      	mov	r0, r3
 8029814:	f007 fd4e 	bl	80312b4 <HAL_RCC_ClockConfig>
 8029818:	4603      	mov	r3, r0
 802981a:	2b00      	cmp	r3, #0
 802981c:	d001      	beq.n	8029822 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 802981e:	f000 f87d 	bl	802991c <Error_Handler>
  }
}
 8029822:	bf00      	nop
 8029824:	3778      	adds	r7, #120	; 0x78
 8029826:	46bd      	mov	sp, r7
 8029828:	bd80      	pop	{r7, pc}
 802982a:	bf00      	nop
 802982c:	58000400 	.word	0x58000400
 8029830:	58024800 	.word	0x58024800
 8029834:	58024400 	.word	0x58024400

08029838 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8029838:	b580      	push	{r7, lr}
 802983a:	b082      	sub	sp, #8
 802983c:	af00      	add	r7, sp, #0
 802983e:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 8029840:	687b      	ldr	r3, [r7, #4]
 8029842:	681b      	ldr	r3, [r3, #0]
 8029844:	4a04      	ldr	r2, [pc, #16]	; (8029858 <HAL_COMP_TriggerCallback+0x20>)
 8029846:	4293      	cmp	r3, r2
 8029848:	d101      	bne.n	802984e <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 802984a:	f7f9 fd23 	bl	8023294 <MotherboardOnStrobe>
	}
}
 802984e:	bf00      	nop
 8029850:	3708      	adds	r7, #8
 8029852:	46bd      	mov	sp, r7
 8029854:	bd80      	pop	{r7, pc}
 8029856:	bf00      	nop
 8029858:	58003810 	.word	0x58003810

0802985c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 802985c:	b580      	push	{r7, lr}
 802985e:	b082      	sub	sp, #8
 8029860:	af00      	add	r7, sp, #0
 8029862:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8029864:	687b      	ldr	r3, [r7, #4]
 8029866:	681b      	ldr	r3, [r3, #0]
 8029868:	4a0b      	ldr	r2, [pc, #44]	; (8029898 <HAL_UART_RxCpltCallback+0x3c>)
 802986a:	4293      	cmp	r3, r2
 802986c:	d101      	bne.n	8029872 <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadServiceRecieveComplete();
 802986e:	f7f9 fd31 	bl	80232d4 <MotherboardOnHeadServiceRecieveComplete>
	}
	if (huart->Instance == UART4) {
 8029872:	687b      	ldr	r3, [r7, #4]
 8029874:	681b      	ldr	r3, [r3, #0]
 8029876:	4a09      	ldr	r2, [pc, #36]	; (802989c <HAL_UART_RxCpltCallback+0x40>)
 8029878:	4293      	cmp	r3, r2
 802987a:	d101      	bne.n	8029880 <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnHeadStreamRecieveComplete();
 802987c:	f7f9 fd34 	bl	80232e8 <MotherboardOnHeadStreamRecieveComplete>
	}
	if (huart->Instance == UART8) {
 8029880:	687b      	ldr	r3, [r7, #4]
 8029882:	681b      	ldr	r3, [r3, #0]
 8029884:	4a06      	ldr	r2, [pc, #24]	; (80298a0 <HAL_UART_RxCpltCallback+0x44>)
 8029886:	4293      	cmp	r3, r2
 8029888:	d101      	bne.n	802988e <HAL_UART_RxCpltCallback+0x32>
		MotherboardOnBodyRecieveComplete();
 802988a:	f7f9 fd19 	bl	80232c0 <MotherboardOnBodyRecieveComplete>
	}
}
 802988e:	bf00      	nop
 8029890:	3708      	adds	r7, #8
 8029892:	46bd      	mov	sp, r7
 8029894:	bd80      	pop	{r7, pc}
 8029896:	bf00      	nop
 8029898:	40004800 	.word	0x40004800
 802989c:	40004c00 	.word	0x40004c00
 80298a0:	40007c00 	.word	0x40007c00

080298a4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80298a4:	b580      	push	{r7, lr}
 80298a6:	b082      	sub	sp, #8
 80298a8:	af00      	add	r7, sp, #0
 80298aa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 80298ac:	687b      	ldr	r3, [r7, #4]
 80298ae:	681b      	ldr	r3, [r3, #0]
 80298b0:	4a0b      	ldr	r2, [pc, #44]	; (80298e0 <HAL_UART_TxCpltCallback+0x3c>)
 80298b2:	4293      	cmp	r3, r2
 80298b4:	d101      	bne.n	80298ba <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadServiceTransmitComplete();
 80298b6:	f7f9 fd21 	bl	80232fc <MotherboardOnHeadServiceTransmitComplete>
	}
	if (huart->Instance == UART4) {
 80298ba:	687b      	ldr	r3, [r7, #4]
 80298bc:	681b      	ldr	r3, [r3, #0]
 80298be:	4a09      	ldr	r2, [pc, #36]	; (80298e4 <HAL_UART_TxCpltCallback+0x40>)
 80298c0:	4293      	cmp	r3, r2
 80298c2:	d101      	bne.n	80298c8 <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnHeadStreamTransmitComplete();
 80298c4:	f7f9 fd24 	bl	8023310 <MotherboardOnHeadStreamTransmitComplete>
	}
	if (huart->Instance == UART8) {
 80298c8:	687b      	ldr	r3, [r7, #4]
 80298ca:	681b      	ldr	r3, [r3, #0]
 80298cc:	4a06      	ldr	r2, [pc, #24]	; (80298e8 <HAL_UART_TxCpltCallback+0x44>)
 80298ce:	4293      	cmp	r3, r2
 80298d0:	d101      	bne.n	80298d6 <HAL_UART_TxCpltCallback+0x32>
		MotherboardOnBodyTransmitComplete();
 80298d2:	f7f9 fd27 	bl	8023324 <MotherboardOnBodyTransmitComplete>
	}
}
 80298d6:	bf00      	nop
 80298d8:	3708      	adds	r7, #8
 80298da:	46bd      	mov	sp, r7
 80298dc:	bd80      	pop	{r7, pc}
 80298de:	bf00      	nop
 80298e0:	40004800 	.word	0x40004800
 80298e4:	40004c00 	.word	0x40004c00
 80298e8:	40007c00 	.word	0x40007c00

080298ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80298ec:	b580      	push	{r7, lr}
 80298ee:	b082      	sub	sp, #8
 80298f0:	af00      	add	r7, sp, #0
 80298f2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80298f4:	687b      	ldr	r3, [r7, #4]
 80298f6:	681b      	ldr	r3, [r3, #0]
 80298f8:	4a07      	ldr	r2, [pc, #28]	; (8029918 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80298fa:	4293      	cmp	r3, r2
 80298fc:	d101      	bne.n	8029902 <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 80298fe:	f7f9 fd1b 	bl	8023338 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 8029902:	687b      	ldr	r3, [r7, #4]
 8029904:	681b      	ldr	r3, [r3, #0]
 8029906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802990a:	d101      	bne.n	8029910 <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 802990c:	f7f9 fd1e 	bl	802334c <MotherboardOnImuTimerTick>
}
 8029910:	bf00      	nop
 8029912:	3708      	adds	r7, #8
 8029914:	46bd      	mov	sp, r7
 8029916:	bd80      	pop	{r7, pc}
 8029918:	40000400 	.word	0x40000400

0802991c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802991c:	b480      	push	{r7}
 802991e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8029920:	b672      	cpsid	i
}
 8029922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8029924:	e7fe      	b.n	8029924 <Error_Handler+0x8>
	...

08029928 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8029928:	b580      	push	{r7, lr}
 802992a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 802992c:	4b28      	ldr	r3, [pc, #160]	; (80299d0 <MX_SPI1_Init+0xa8>)
 802992e:	4a29      	ldr	r2, [pc, #164]	; (80299d4 <MX_SPI1_Init+0xac>)
 8029930:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8029932:	4b27      	ldr	r3, [pc, #156]	; (80299d0 <MX_SPI1_Init+0xa8>)
 8029934:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8029938:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 802993a:	4b25      	ldr	r3, [pc, #148]	; (80299d0 <MX_SPI1_Init+0xa8>)
 802993c:	2200      	movs	r2, #0
 802993e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8029940:	4b23      	ldr	r3, [pc, #140]	; (80299d0 <MX_SPI1_Init+0xa8>)
 8029942:	2207      	movs	r2, #7
 8029944:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8029946:	4b22      	ldr	r3, [pc, #136]	; (80299d0 <MX_SPI1_Init+0xa8>)
 8029948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802994c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 802994e:	4b20      	ldr	r3, [pc, #128]	; (80299d0 <MX_SPI1_Init+0xa8>)
 8029950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8029954:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8029956:	4b1e      	ldr	r3, [pc, #120]	; (80299d0 <MX_SPI1_Init+0xa8>)
 8029958:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 802995c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 802995e:	4b1c      	ldr	r3, [pc, #112]	; (80299d0 <MX_SPI1_Init+0xa8>)
 8029960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8029964:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8029966:	4b1a      	ldr	r3, [pc, #104]	; (80299d0 <MX_SPI1_Init+0xa8>)
 8029968:	2200      	movs	r2, #0
 802996a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 802996c:	4b18      	ldr	r3, [pc, #96]	; (80299d0 <MX_SPI1_Init+0xa8>)
 802996e:	2200      	movs	r2, #0
 8029970:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8029972:	4b17      	ldr	r3, [pc, #92]	; (80299d0 <MX_SPI1_Init+0xa8>)
 8029974:	2200      	movs	r2, #0
 8029976:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8029978:	4b15      	ldr	r3, [pc, #84]	; (80299d0 <MX_SPI1_Init+0xa8>)
 802997a:	2200      	movs	r2, #0
 802997c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 802997e:	4b14      	ldr	r3, [pc, #80]	; (80299d0 <MX_SPI1_Init+0xa8>)
 8029980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8029984:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8029986:	4b12      	ldr	r3, [pc, #72]	; (80299d0 <MX_SPI1_Init+0xa8>)
 8029988:	2200      	movs	r2, #0
 802998a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 802998c:	4b10      	ldr	r3, [pc, #64]	; (80299d0 <MX_SPI1_Init+0xa8>)
 802998e:	2200      	movs	r2, #0
 8029990:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8029992:	4b0f      	ldr	r3, [pc, #60]	; (80299d0 <MX_SPI1_Init+0xa8>)
 8029994:	2200      	movs	r2, #0
 8029996:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8029998:	4b0d      	ldr	r3, [pc, #52]	; (80299d0 <MX_SPI1_Init+0xa8>)
 802999a:	2200      	movs	r2, #0
 802999c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 802999e:	4b0c      	ldr	r3, [pc, #48]	; (80299d0 <MX_SPI1_Init+0xa8>)
 80299a0:	2200      	movs	r2, #0
 80299a2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80299a4:	4b0a      	ldr	r3, [pc, #40]	; (80299d0 <MX_SPI1_Init+0xa8>)
 80299a6:	2200      	movs	r2, #0
 80299a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80299aa:	4b09      	ldr	r3, [pc, #36]	; (80299d0 <MX_SPI1_Init+0xa8>)
 80299ac:	2200      	movs	r2, #0
 80299ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80299b0:	4b07      	ldr	r3, [pc, #28]	; (80299d0 <MX_SPI1_Init+0xa8>)
 80299b2:	2200      	movs	r2, #0
 80299b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80299b6:	4b06      	ldr	r3, [pc, #24]	; (80299d0 <MX_SPI1_Init+0xa8>)
 80299b8:	2200      	movs	r2, #0
 80299ba:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80299bc:	4804      	ldr	r0, [pc, #16]	; (80299d0 <MX_SPI1_Init+0xa8>)
 80299be:	f009 fb6d 	bl	803309c <HAL_SPI_Init>
 80299c2:	4603      	mov	r3, r0
 80299c4:	2b00      	cmp	r3, #0
 80299c6:	d001      	beq.n	80299cc <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80299c8:	f7ff ffa8 	bl	802991c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80299cc:	bf00      	nop
 80299ce:	bd80      	pop	{r7, pc}
 80299d0:	24024694 	.word	0x24024694
 80299d4:	40013000 	.word	0x40013000

080299d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80299d8:	b580      	push	{r7, lr}
 80299da:	b0b8      	sub	sp, #224	; 0xe0
 80299dc:	af00      	add	r7, sp, #0
 80299de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80299e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80299e4:	2200      	movs	r2, #0
 80299e6:	601a      	str	r2, [r3, #0]
 80299e8:	605a      	str	r2, [r3, #4]
 80299ea:	609a      	str	r2, [r3, #8]
 80299ec:	60da      	str	r2, [r3, #12]
 80299ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80299f0:	f107 0310 	add.w	r3, r7, #16
 80299f4:	22bc      	movs	r2, #188	; 0xbc
 80299f6:	2100      	movs	r1, #0
 80299f8:	4618      	mov	r0, r3
 80299fa:	f012 f951 	bl	803bca0 <memset>
  if(spiHandle->Instance==SPI1)
 80299fe:	687b      	ldr	r3, [r7, #4]
 8029a00:	681b      	ldr	r3, [r3, #0]
 8029a02:	4a60      	ldr	r2, [pc, #384]	; (8029b84 <HAL_SPI_MspInit+0x1ac>)
 8029a04:	4293      	cmp	r3, r2
 8029a06:	f040 80b8 	bne.w	8029b7a <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8029a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8029a0e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8029a10:	2320      	movs	r3, #32
 8029a12:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8029a14:	2381      	movs	r3, #129	; 0x81
 8029a16:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8029a18:	2302      	movs	r3, #2
 8029a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8029a1c:	2302      	movs	r3, #2
 8029a1e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8029a20:	2302      	movs	r3, #2
 8029a22:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8029a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029a28:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8029a2a:	2300      	movs	r3, #0
 8029a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8029a2e:	2300      	movs	r3, #0
 8029a30:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8029a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8029a36:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029a38:	f107 0310 	add.w	r3, r7, #16
 8029a3c:	4618      	mov	r0, r3
 8029a3e:	f007 ffc5 	bl	80319cc <HAL_RCCEx_PeriphCLKConfig>
 8029a42:	4603      	mov	r3, r0
 8029a44:	2b00      	cmp	r3, #0
 8029a46:	d001      	beq.n	8029a4c <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8029a48:	f7ff ff68 	bl	802991c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8029a4c:	4b4e      	ldr	r3, [pc, #312]	; (8029b88 <HAL_SPI_MspInit+0x1b0>)
 8029a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029a52:	4a4d      	ldr	r2, [pc, #308]	; (8029b88 <HAL_SPI_MspInit+0x1b0>)
 8029a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8029a58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8029a5c:	4b4a      	ldr	r3, [pc, #296]	; (8029b88 <HAL_SPI_MspInit+0x1b0>)
 8029a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029a66:	60fb      	str	r3, [r7, #12]
 8029a68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8029a6a:	4b47      	ldr	r3, [pc, #284]	; (8029b88 <HAL_SPI_MspInit+0x1b0>)
 8029a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029a70:	4a45      	ldr	r2, [pc, #276]	; (8029b88 <HAL_SPI_MspInit+0x1b0>)
 8029a72:	f043 0301 	orr.w	r3, r3, #1
 8029a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029a7a:	4b43      	ldr	r3, [pc, #268]	; (8029b88 <HAL_SPI_MspInit+0x1b0>)
 8029a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029a80:	f003 0301 	and.w	r3, r3, #1
 8029a84:	60bb      	str	r3, [r7, #8]
 8029a86:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8029a88:	23e0      	movs	r3, #224	; 0xe0
 8029a8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029a8e:	2302      	movs	r3, #2
 8029a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029a94:	2300      	movs	r3, #0
 8029a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029a9a:	2300      	movs	r3, #0
 8029a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8029aa0:	2305      	movs	r3, #5
 8029aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8029aa6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029aaa:	4619      	mov	r1, r3
 8029aac:	4837      	ldr	r0, [pc, #220]	; (8029b8c <HAL_SPI_MspInit+0x1b4>)
 8029aae:	f004 fb3d 	bl	802e12c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 8029ab2:	4b37      	ldr	r3, [pc, #220]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029ab4:	4a37      	ldr	r2, [pc, #220]	; (8029b94 <HAL_SPI_MspInit+0x1bc>)
 8029ab6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8029ab8:	4b35      	ldr	r3, [pc, #212]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029aba:	2226      	movs	r2, #38	; 0x26
 8029abc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8029abe:	4b34      	ldr	r3, [pc, #208]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029ac0:	2240      	movs	r2, #64	; 0x40
 8029ac2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029ac4:	4b32      	ldr	r3, [pc, #200]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029ac6:	2200      	movs	r2, #0
 8029ac8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8029aca:	4b31      	ldr	r3, [pc, #196]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029ad0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029ad2:	4b2f      	ldr	r3, [pc, #188]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029ad4:	2200      	movs	r2, #0
 8029ad6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029ad8:	4b2d      	ldr	r3, [pc, #180]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029ada:	2200      	movs	r2, #0
 8029adc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8029ade:	4b2c      	ldr	r3, [pc, #176]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029ae0:	2200      	movs	r2, #0
 8029ae2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8029ae4:	4b2a      	ldr	r3, [pc, #168]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029ae6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029aea:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029aec:	4b28      	ldr	r3, [pc, #160]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029aee:	2200      	movs	r2, #0
 8029af0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8029af2:	4827      	ldr	r0, [pc, #156]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029af4:	f001 fcc4 	bl	802b480 <HAL_DMA_Init>
 8029af8:	4603      	mov	r3, r0
 8029afa:	2b00      	cmp	r3, #0
 8029afc:	d001      	beq.n	8029b02 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8029afe:	f7ff ff0d 	bl	802991c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8029b02:	687b      	ldr	r3, [r7, #4]
 8029b04:	4a22      	ldr	r2, [pc, #136]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029b06:	679a      	str	r2, [r3, #120]	; 0x78
 8029b08:	4a21      	ldr	r2, [pc, #132]	; (8029b90 <HAL_SPI_MspInit+0x1b8>)
 8029b0a:	687b      	ldr	r3, [r7, #4]
 8029b0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 8029b0e:	4b22      	ldr	r3, [pc, #136]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b10:	4a22      	ldr	r2, [pc, #136]	; (8029b9c <HAL_SPI_MspInit+0x1c4>)
 8029b12:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8029b14:	4b20      	ldr	r3, [pc, #128]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b16:	2225      	movs	r2, #37	; 0x25
 8029b18:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8029b1a:	4b1f      	ldr	r3, [pc, #124]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b1c:	2200      	movs	r2, #0
 8029b1e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029b20:	4b1d      	ldr	r3, [pc, #116]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b22:	2200      	movs	r2, #0
 8029b24:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8029b26:	4b1c      	ldr	r3, [pc, #112]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029b2c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029b2e:	4b1a      	ldr	r3, [pc, #104]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b30:	2200      	movs	r2, #0
 8029b32:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029b34:	4b18      	ldr	r3, [pc, #96]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b36:	2200      	movs	r2, #0
 8029b38:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8029b3a:	4b17      	ldr	r3, [pc, #92]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b3c:	2200      	movs	r2, #0
 8029b3e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8029b40:	4b15      	ldr	r3, [pc, #84]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029b46:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029b48:	4b13      	ldr	r3, [pc, #76]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b4a:	2200      	movs	r2, #0
 8029b4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8029b4e:	4812      	ldr	r0, [pc, #72]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b50:	f001 fc96 	bl	802b480 <HAL_DMA_Init>
 8029b54:	4603      	mov	r3, r0
 8029b56:	2b00      	cmp	r3, #0
 8029b58:	d001      	beq.n	8029b5e <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 8029b5a:	f7ff fedf 	bl	802991c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8029b5e:	687b      	ldr	r3, [r7, #4]
 8029b60:	4a0d      	ldr	r2, [pc, #52]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b62:	67da      	str	r2, [r3, #124]	; 0x7c
 8029b64:	4a0c      	ldr	r2, [pc, #48]	; (8029b98 <HAL_SPI_MspInit+0x1c0>)
 8029b66:	687b      	ldr	r3, [r7, #4]
 8029b68:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8029b6a:	2200      	movs	r2, #0
 8029b6c:	2102      	movs	r1, #2
 8029b6e:	2023      	movs	r0, #35	; 0x23
 8029b70:	f001 fa89 	bl	802b086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8029b74:	2023      	movs	r0, #35	; 0x23
 8029b76:	f001 faa0 	bl	802b0ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8029b7a:	bf00      	nop
 8029b7c:	37e0      	adds	r7, #224	; 0xe0
 8029b7e:	46bd      	mov	sp, r7
 8029b80:	bd80      	pop	{r7, pc}
 8029b82:	bf00      	nop
 8029b84:	40013000 	.word	0x40013000
 8029b88:	58024400 	.word	0x58024400
 8029b8c:	58020000 	.word	0x58020000
 8029b90:	2402471c 	.word	0x2402471c
 8029b94:	40020070 	.word	0x40020070
 8029b98:	24024794 	.word	0x24024794
 8029b9c:	40020088 	.word	0x40020088

08029ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8029ba0:	b480      	push	{r7}
 8029ba2:	b083      	sub	sp, #12
 8029ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029ba6:	4b0a      	ldr	r3, [pc, #40]	; (8029bd0 <HAL_MspInit+0x30>)
 8029ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029bac:	4a08      	ldr	r2, [pc, #32]	; (8029bd0 <HAL_MspInit+0x30>)
 8029bae:	f043 0302 	orr.w	r3, r3, #2
 8029bb2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8029bb6:	4b06      	ldr	r3, [pc, #24]	; (8029bd0 <HAL_MspInit+0x30>)
 8029bb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029bbc:	f003 0302 	and.w	r3, r3, #2
 8029bc0:	607b      	str	r3, [r7, #4]
 8029bc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8029bc4:	bf00      	nop
 8029bc6:	370c      	adds	r7, #12
 8029bc8:	46bd      	mov	sp, r7
 8029bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bce:	4770      	bx	lr
 8029bd0:	58024400 	.word	0x58024400

08029bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8029bd4:	b480      	push	{r7}
 8029bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8029bd8:	e7fe      	b.n	8029bd8 <NMI_Handler+0x4>

08029bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8029bda:	b480      	push	{r7}
 8029bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8029bde:	e7fe      	b.n	8029bde <HardFault_Handler+0x4>

08029be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8029be0:	b480      	push	{r7}
 8029be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8029be4:	e7fe      	b.n	8029be4 <MemManage_Handler+0x4>

08029be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8029be6:	b480      	push	{r7}
 8029be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8029bea:	e7fe      	b.n	8029bea <BusFault_Handler+0x4>

08029bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8029bec:	b480      	push	{r7}
 8029bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8029bf0:	e7fe      	b.n	8029bf0 <UsageFault_Handler+0x4>

08029bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8029bf2:	b480      	push	{r7}
 8029bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8029bf6:	bf00      	nop
 8029bf8:	46bd      	mov	sp, r7
 8029bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bfe:	4770      	bx	lr

08029c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8029c00:	b480      	push	{r7}
 8029c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8029c04:	bf00      	nop
 8029c06:	46bd      	mov	sp, r7
 8029c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c0c:	4770      	bx	lr

08029c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8029c0e:	b480      	push	{r7}
 8029c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8029c12:	bf00      	nop
 8029c14:	46bd      	mov	sp, r7
 8029c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c1a:	4770      	bx	lr

08029c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8029c1c:	b580      	push	{r7, lr}
 8029c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8029c20:	f000 ff1e 	bl	802aa60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8029c24:	bf00      	nop
 8029c26:	bd80      	pop	{r7, pc}

08029c28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8029c28:	b580      	push	{r7, lr}
 8029c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8029c2c:	4802      	ldr	r0, [pc, #8]	; (8029c38 <DMA1_Stream0_IRQHandler+0x10>)
 8029c2e:	f002 ff51 	bl	802cad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8029c32:	bf00      	nop
 8029c34:	bd80      	pop	{r7, pc}
 8029c36:	bf00      	nop
 8029c38:	240245a4 	.word	0x240245a4

08029c3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8029c3c:	b580      	push	{r7, lr}
 8029c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8029c40:	4802      	ldr	r0, [pc, #8]	; (8029c4c <DMA1_Stream1_IRQHandler+0x10>)
 8029c42:	f002 ff47 	bl	802cad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8029c46:	bf00      	nop
 8029c48:	bd80      	pop	{r7, pc}
 8029c4a:	bf00      	nop
 8029c4c:	2402461c 	.word	0x2402461c

08029c50 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8029c50:	b580      	push	{r7, lr}
 8029c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8029c54:	4802      	ldr	r0, [pc, #8]	; (8029c60 <DMA1_Stream4_IRQHandler+0x10>)
 8029c56:	f002 ff3d 	bl	802cad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8029c5a:	bf00      	nop
 8029c5c:	bd80      	pop	{r7, pc}
 8029c5e:	bf00      	nop
 8029c60:	2402471c 	.word	0x2402471c

08029c64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8029c64:	b580      	push	{r7, lr}
 8029c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8029c68:	4802      	ldr	r0, [pc, #8]	; (8029c74 <DMA1_Stream5_IRQHandler+0x10>)
 8029c6a:	f002 ff33 	bl	802cad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8029c6e:	bf00      	nop
 8029c70:	bd80      	pop	{r7, pc}
 8029c72:	bf00      	nop
 8029c74:	24024794 	.word	0x24024794

08029c78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8029c78:	b580      	push	{r7, lr}
 8029c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8029c7c:	4802      	ldr	r0, [pc, #8]	; (8029c88 <TIM2_IRQHandler+0x10>)
 8029c7e:	f00a fc09 	bl	8034494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8029c82:	bf00      	nop
 8029c84:	bd80      	pop	{r7, pc}
 8029c86:	bf00      	nop
 8029c88:	24024810 	.word	0x24024810

08029c8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8029c8c:	b580      	push	{r7, lr}
 8029c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8029c90:	4802      	ldr	r0, [pc, #8]	; (8029c9c <TIM3_IRQHandler+0x10>)
 8029c92:	f00a fbff 	bl	8034494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8029c96:	bf00      	nop
 8029c98:	bd80      	pop	{r7, pc}
 8029c9a:	bf00      	nop
 8029c9c:	2402485c 	.word	0x2402485c

08029ca0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8029ca0:	b580      	push	{r7, lr}
 8029ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8029ca4:	4802      	ldr	r0, [pc, #8]	; (8029cb0 <TIM4_IRQHandler+0x10>)
 8029ca6:	f00a fbf5 	bl	8034494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8029caa:	bf00      	nop
 8029cac:	bd80      	pop	{r7, pc}
 8029cae:	bf00      	nop
 8029cb0:	240248a8 	.word	0x240248a8

08029cb4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8029cb4:	b580      	push	{r7, lr}
 8029cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8029cb8:	4802      	ldr	r0, [pc, #8]	; (8029cc4 <I2C2_EV_IRQHandler+0x10>)
 8029cba:	f004 fc91 	bl	802e5e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8029cbe:	bf00      	nop
 8029cc0:	bd80      	pop	{r7, pc}
 8029cc2:	bf00      	nop
 8029cc4:	24024558 	.word	0x24024558

08029cc8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8029cc8:	b580      	push	{r7, lr}
 8029cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8029ccc:	4802      	ldr	r0, [pc, #8]	; (8029cd8 <I2C2_ER_IRQHandler+0x10>)
 8029cce:	f004 fca1 	bl	802e614 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8029cd2:	bf00      	nop
 8029cd4:	bd80      	pop	{r7, pc}
 8029cd6:	bf00      	nop
 8029cd8:	24024558 	.word	0x24024558

08029cdc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8029cdc:	b580      	push	{r7, lr}
 8029cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8029ce0:	4802      	ldr	r0, [pc, #8]	; (8029cec <SPI1_IRQHandler+0x10>)
 8029ce2:	f009 ff5d 	bl	8033ba0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8029ce6:	bf00      	nop
 8029ce8:	bd80      	pop	{r7, pc}
 8029cea:	bf00      	nop
 8029cec:	24024694 	.word	0x24024694

08029cf0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8029cf0:	b580      	push	{r7, lr}
 8029cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8029cf4:	4802      	ldr	r0, [pc, #8]	; (8029d00 <USART3_IRQHandler+0x10>)
 8029cf6:	f00b fa13 	bl	8035120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8029cfa:	bf00      	nop
 8029cfc:	bd80      	pop	{r7, pc}
 8029cfe:	bf00      	nop
 8029d00:	24024b34 	.word	0x24024b34

08029d04 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8029d04:	b580      	push	{r7, lr}
 8029d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8029d08:	4802      	ldr	r0, [pc, #8]	; (8029d14 <UART4_IRQHandler+0x10>)
 8029d0a:	f00b fa09 	bl	8035120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8029d0e:	bf00      	nop
 8029d10:	bd80      	pop	{r7, pc}
 8029d12:	bf00      	nop
 8029d14:	240248f4 	.word	0x240248f4

08029d18 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8029d18:	b580      	push	{r7, lr}
 8029d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8029d1c:	4802      	ldr	r0, [pc, #8]	; (8029d28 <UART8_IRQHandler+0x10>)
 8029d1e:	f00b f9ff 	bl	8035120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8029d22:	bf00      	nop
 8029d24:	bd80      	pop	{r7, pc}
 8029d26:	bf00      	nop
 8029d28:	24024a14 	.word	0x24024a14

08029d2c <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8029d2c:	b580      	push	{r7, lr}
 8029d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8029d30:	4802      	ldr	r0, [pc, #8]	; (8029d3c <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8029d32:	f005 fcc8 	bl	802f6c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8029d36:	bf00      	nop
 8029d38:	bd80      	pop	{r7, pc}
 8029d3a:	bf00      	nop
 8029d3c:	240260a8 	.word	0x240260a8

08029d40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8029d40:	b580      	push	{r7, lr}
 8029d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8029d44:	4802      	ldr	r0, [pc, #8]	; (8029d50 <OTG_FS_IRQHandler+0x10>)
 8029d46:	f005 fcbe 	bl	802f6c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8029d4a:	bf00      	nop
 8029d4c:	bd80      	pop	{r7, pc}
 8029d4e:	bf00      	nop
 8029d50:	240260a8 	.word	0x240260a8

08029d54 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8029d54:	b580      	push	{r7, lr}
 8029d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8029d58:	4802      	ldr	r0, [pc, #8]	; (8029d64 <COMP1_IRQHandler+0x10>)
 8029d5a:	f001 f845 	bl	802ade8 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8029d5e:	bf00      	nop
 8029d60:	bd80      	pop	{r7, pc}
 8029d62:	bf00      	nop
 8029d64:	24024518 	.word	0x24024518

08029d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8029d68:	b480      	push	{r7}
 8029d6a:	af00      	add	r7, sp, #0
	return 1;
 8029d6c:	2301      	movs	r3, #1
}
 8029d6e:	4618      	mov	r0, r3
 8029d70:	46bd      	mov	sp, r7
 8029d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d76:	4770      	bx	lr

08029d78 <_kill>:

int _kill(int pid, int sig)
{
 8029d78:	b580      	push	{r7, lr}
 8029d7a:	b082      	sub	sp, #8
 8029d7c:	af00      	add	r7, sp, #0
 8029d7e:	6078      	str	r0, [r7, #4]
 8029d80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8029d82:	f011 ff19 	bl	803bbb8 <__errno>
 8029d86:	4603      	mov	r3, r0
 8029d88:	2216      	movs	r2, #22
 8029d8a:	601a      	str	r2, [r3, #0]
	return -1;
 8029d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8029d90:	4618      	mov	r0, r3
 8029d92:	3708      	adds	r7, #8
 8029d94:	46bd      	mov	sp, r7
 8029d96:	bd80      	pop	{r7, pc}

08029d98 <_exit>:

void _exit (int status)
{
 8029d98:	b580      	push	{r7, lr}
 8029d9a:	b082      	sub	sp, #8
 8029d9c:	af00      	add	r7, sp, #0
 8029d9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8029da0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8029da4:	6878      	ldr	r0, [r7, #4]
 8029da6:	f7ff ffe7 	bl	8029d78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8029daa:	e7fe      	b.n	8029daa <_exit+0x12>

08029dac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8029dac:	b580      	push	{r7, lr}
 8029dae:	b086      	sub	sp, #24
 8029db0:	af00      	add	r7, sp, #0
 8029db2:	60f8      	str	r0, [r7, #12]
 8029db4:	60b9      	str	r1, [r7, #8]
 8029db6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029db8:	2300      	movs	r3, #0
 8029dba:	617b      	str	r3, [r7, #20]
 8029dbc:	e00a      	b.n	8029dd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8029dbe:	f3af 8000 	nop.w
 8029dc2:	4601      	mov	r1, r0
 8029dc4:	68bb      	ldr	r3, [r7, #8]
 8029dc6:	1c5a      	adds	r2, r3, #1
 8029dc8:	60ba      	str	r2, [r7, #8]
 8029dca:	b2ca      	uxtb	r2, r1
 8029dcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029dce:	697b      	ldr	r3, [r7, #20]
 8029dd0:	3301      	adds	r3, #1
 8029dd2:	617b      	str	r3, [r7, #20]
 8029dd4:	697a      	ldr	r2, [r7, #20]
 8029dd6:	687b      	ldr	r3, [r7, #4]
 8029dd8:	429a      	cmp	r2, r3
 8029dda:	dbf0      	blt.n	8029dbe <_read+0x12>
	}

return len;
 8029ddc:	687b      	ldr	r3, [r7, #4]
}
 8029dde:	4618      	mov	r0, r3
 8029de0:	3718      	adds	r7, #24
 8029de2:	46bd      	mov	sp, r7
 8029de4:	bd80      	pop	{r7, pc}

08029de6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8029de6:	b580      	push	{r7, lr}
 8029de8:	b086      	sub	sp, #24
 8029dea:	af00      	add	r7, sp, #0
 8029dec:	60f8      	str	r0, [r7, #12]
 8029dee:	60b9      	str	r1, [r7, #8]
 8029df0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029df2:	2300      	movs	r3, #0
 8029df4:	617b      	str	r3, [r7, #20]
 8029df6:	e009      	b.n	8029e0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8029df8:	68bb      	ldr	r3, [r7, #8]
 8029dfa:	1c5a      	adds	r2, r3, #1
 8029dfc:	60ba      	str	r2, [r7, #8]
 8029dfe:	781b      	ldrb	r3, [r3, #0]
 8029e00:	4618      	mov	r0, r3
 8029e02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029e06:	697b      	ldr	r3, [r7, #20]
 8029e08:	3301      	adds	r3, #1
 8029e0a:	617b      	str	r3, [r7, #20]
 8029e0c:	697a      	ldr	r2, [r7, #20]
 8029e0e:	687b      	ldr	r3, [r7, #4]
 8029e10:	429a      	cmp	r2, r3
 8029e12:	dbf1      	blt.n	8029df8 <_write+0x12>
	}
	return len;
 8029e14:	687b      	ldr	r3, [r7, #4]
}
 8029e16:	4618      	mov	r0, r3
 8029e18:	3718      	adds	r7, #24
 8029e1a:	46bd      	mov	sp, r7
 8029e1c:	bd80      	pop	{r7, pc}

08029e1e <_close>:

int _close(int file)
{
 8029e1e:	b480      	push	{r7}
 8029e20:	b083      	sub	sp, #12
 8029e22:	af00      	add	r7, sp, #0
 8029e24:	6078      	str	r0, [r7, #4]
	return -1;
 8029e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8029e2a:	4618      	mov	r0, r3
 8029e2c:	370c      	adds	r7, #12
 8029e2e:	46bd      	mov	sp, r7
 8029e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e34:	4770      	bx	lr

08029e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8029e36:	b480      	push	{r7}
 8029e38:	b083      	sub	sp, #12
 8029e3a:	af00      	add	r7, sp, #0
 8029e3c:	6078      	str	r0, [r7, #4]
 8029e3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8029e40:	683b      	ldr	r3, [r7, #0]
 8029e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8029e46:	605a      	str	r2, [r3, #4]
	return 0;
 8029e48:	2300      	movs	r3, #0
}
 8029e4a:	4618      	mov	r0, r3
 8029e4c:	370c      	adds	r7, #12
 8029e4e:	46bd      	mov	sp, r7
 8029e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e54:	4770      	bx	lr

08029e56 <_isatty>:

int _isatty(int file)
{
 8029e56:	b480      	push	{r7}
 8029e58:	b083      	sub	sp, #12
 8029e5a:	af00      	add	r7, sp, #0
 8029e5c:	6078      	str	r0, [r7, #4]
	return 1;
 8029e5e:	2301      	movs	r3, #1
}
 8029e60:	4618      	mov	r0, r3
 8029e62:	370c      	adds	r7, #12
 8029e64:	46bd      	mov	sp, r7
 8029e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e6a:	4770      	bx	lr

08029e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8029e6c:	b480      	push	{r7}
 8029e6e:	b085      	sub	sp, #20
 8029e70:	af00      	add	r7, sp, #0
 8029e72:	60f8      	str	r0, [r7, #12]
 8029e74:	60b9      	str	r1, [r7, #8]
 8029e76:	607a      	str	r2, [r7, #4]
	return 0;
 8029e78:	2300      	movs	r3, #0
}
 8029e7a:	4618      	mov	r0, r3
 8029e7c:	3714      	adds	r7, #20
 8029e7e:	46bd      	mov	sp, r7
 8029e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e84:	4770      	bx	lr
	...

08029e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8029e88:	b580      	push	{r7, lr}
 8029e8a:	b086      	sub	sp, #24
 8029e8c:	af00      	add	r7, sp, #0
 8029e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8029e90:	4a14      	ldr	r2, [pc, #80]	; (8029ee4 <_sbrk+0x5c>)
 8029e92:	4b15      	ldr	r3, [pc, #84]	; (8029ee8 <_sbrk+0x60>)
 8029e94:	1ad3      	subs	r3, r2, r3
 8029e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8029e98:	697b      	ldr	r3, [r7, #20]
 8029e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8029e9c:	4b13      	ldr	r3, [pc, #76]	; (8029eec <_sbrk+0x64>)
 8029e9e:	681b      	ldr	r3, [r3, #0]
 8029ea0:	2b00      	cmp	r3, #0
 8029ea2:	d102      	bne.n	8029eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8029ea4:	4b11      	ldr	r3, [pc, #68]	; (8029eec <_sbrk+0x64>)
 8029ea6:	4a12      	ldr	r2, [pc, #72]	; (8029ef0 <_sbrk+0x68>)
 8029ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8029eaa:	4b10      	ldr	r3, [pc, #64]	; (8029eec <_sbrk+0x64>)
 8029eac:	681a      	ldr	r2, [r3, #0]
 8029eae:	687b      	ldr	r3, [r7, #4]
 8029eb0:	4413      	add	r3, r2
 8029eb2:	693a      	ldr	r2, [r7, #16]
 8029eb4:	429a      	cmp	r2, r3
 8029eb6:	d207      	bcs.n	8029ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8029eb8:	f011 fe7e 	bl	803bbb8 <__errno>
 8029ebc:	4603      	mov	r3, r0
 8029ebe:	220c      	movs	r2, #12
 8029ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8029ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8029ec6:	e009      	b.n	8029edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8029ec8:	4b08      	ldr	r3, [pc, #32]	; (8029eec <_sbrk+0x64>)
 8029eca:	681b      	ldr	r3, [r3, #0]
 8029ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8029ece:	4b07      	ldr	r3, [pc, #28]	; (8029eec <_sbrk+0x64>)
 8029ed0:	681a      	ldr	r2, [r3, #0]
 8029ed2:	687b      	ldr	r3, [r7, #4]
 8029ed4:	4413      	add	r3, r2
 8029ed6:	4a05      	ldr	r2, [pc, #20]	; (8029eec <_sbrk+0x64>)
 8029ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8029eda:	68fb      	ldr	r3, [r7, #12]
}
 8029edc:	4618      	mov	r0, r3
 8029ede:	3718      	adds	r7, #24
 8029ee0:	46bd      	mov	sp, r7
 8029ee2:	bd80      	pop	{r7, pc}
 8029ee4:	24080000 	.word	0x24080000
 8029ee8:	00000400 	.word	0x00000400
 8029eec:	2402480c 	.word	0x2402480c
 8029ef0:	240267e8 	.word	0x240267e8

08029ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8029ef4:	b480      	push	{r7}
 8029ef6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8029ef8:	4b37      	ldr	r3, [pc, #220]	; (8029fd8 <SystemInit+0xe4>)
 8029efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8029efe:	4a36      	ldr	r2, [pc, #216]	; (8029fd8 <SystemInit+0xe4>)
 8029f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8029f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8029f08:	4b34      	ldr	r3, [pc, #208]	; (8029fdc <SystemInit+0xe8>)
 8029f0a:	681b      	ldr	r3, [r3, #0]
 8029f0c:	f003 030f 	and.w	r3, r3, #15
 8029f10:	2b06      	cmp	r3, #6
 8029f12:	d807      	bhi.n	8029f24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8029f14:	4b31      	ldr	r3, [pc, #196]	; (8029fdc <SystemInit+0xe8>)
 8029f16:	681b      	ldr	r3, [r3, #0]
 8029f18:	f023 030f 	bic.w	r3, r3, #15
 8029f1c:	4a2f      	ldr	r2, [pc, #188]	; (8029fdc <SystemInit+0xe8>)
 8029f1e:	f043 0307 	orr.w	r3, r3, #7
 8029f22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8029f24:	4b2e      	ldr	r3, [pc, #184]	; (8029fe0 <SystemInit+0xec>)
 8029f26:	681b      	ldr	r3, [r3, #0]
 8029f28:	4a2d      	ldr	r2, [pc, #180]	; (8029fe0 <SystemInit+0xec>)
 8029f2a:	f043 0301 	orr.w	r3, r3, #1
 8029f2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8029f30:	4b2b      	ldr	r3, [pc, #172]	; (8029fe0 <SystemInit+0xec>)
 8029f32:	2200      	movs	r2, #0
 8029f34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8029f36:	4b2a      	ldr	r3, [pc, #168]	; (8029fe0 <SystemInit+0xec>)
 8029f38:	681a      	ldr	r2, [r3, #0]
 8029f3a:	4929      	ldr	r1, [pc, #164]	; (8029fe0 <SystemInit+0xec>)
 8029f3c:	4b29      	ldr	r3, [pc, #164]	; (8029fe4 <SystemInit+0xf0>)
 8029f3e:	4013      	ands	r3, r2
 8029f40:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8029f42:	4b26      	ldr	r3, [pc, #152]	; (8029fdc <SystemInit+0xe8>)
 8029f44:	681b      	ldr	r3, [r3, #0]
 8029f46:	f003 0308 	and.w	r3, r3, #8
 8029f4a:	2b00      	cmp	r3, #0
 8029f4c:	d007      	beq.n	8029f5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8029f4e:	4b23      	ldr	r3, [pc, #140]	; (8029fdc <SystemInit+0xe8>)
 8029f50:	681b      	ldr	r3, [r3, #0]
 8029f52:	f023 030f 	bic.w	r3, r3, #15
 8029f56:	4a21      	ldr	r2, [pc, #132]	; (8029fdc <SystemInit+0xe8>)
 8029f58:	f043 0307 	orr.w	r3, r3, #7
 8029f5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8029f5e:	4b20      	ldr	r3, [pc, #128]	; (8029fe0 <SystemInit+0xec>)
 8029f60:	2200      	movs	r2, #0
 8029f62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8029f64:	4b1e      	ldr	r3, [pc, #120]	; (8029fe0 <SystemInit+0xec>)
 8029f66:	2200      	movs	r2, #0
 8029f68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8029f6a:	4b1d      	ldr	r3, [pc, #116]	; (8029fe0 <SystemInit+0xec>)
 8029f6c:	2200      	movs	r2, #0
 8029f6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8029f70:	4b1b      	ldr	r3, [pc, #108]	; (8029fe0 <SystemInit+0xec>)
 8029f72:	4a1d      	ldr	r2, [pc, #116]	; (8029fe8 <SystemInit+0xf4>)
 8029f74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8029f76:	4b1a      	ldr	r3, [pc, #104]	; (8029fe0 <SystemInit+0xec>)
 8029f78:	4a1c      	ldr	r2, [pc, #112]	; (8029fec <SystemInit+0xf8>)
 8029f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8029f7c:	4b18      	ldr	r3, [pc, #96]	; (8029fe0 <SystemInit+0xec>)
 8029f7e:	4a1c      	ldr	r2, [pc, #112]	; (8029ff0 <SystemInit+0xfc>)
 8029f80:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8029f82:	4b17      	ldr	r3, [pc, #92]	; (8029fe0 <SystemInit+0xec>)
 8029f84:	2200      	movs	r2, #0
 8029f86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8029f88:	4b15      	ldr	r3, [pc, #84]	; (8029fe0 <SystemInit+0xec>)
 8029f8a:	4a19      	ldr	r2, [pc, #100]	; (8029ff0 <SystemInit+0xfc>)
 8029f8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8029f8e:	4b14      	ldr	r3, [pc, #80]	; (8029fe0 <SystemInit+0xec>)
 8029f90:	2200      	movs	r2, #0
 8029f92:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8029f94:	4b12      	ldr	r3, [pc, #72]	; (8029fe0 <SystemInit+0xec>)
 8029f96:	4a16      	ldr	r2, [pc, #88]	; (8029ff0 <SystemInit+0xfc>)
 8029f98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8029f9a:	4b11      	ldr	r3, [pc, #68]	; (8029fe0 <SystemInit+0xec>)
 8029f9c:	2200      	movs	r2, #0
 8029f9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8029fa0:	4b0f      	ldr	r3, [pc, #60]	; (8029fe0 <SystemInit+0xec>)
 8029fa2:	681b      	ldr	r3, [r3, #0]
 8029fa4:	4a0e      	ldr	r2, [pc, #56]	; (8029fe0 <SystemInit+0xec>)
 8029fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8029faa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8029fac:	4b0c      	ldr	r3, [pc, #48]	; (8029fe0 <SystemInit+0xec>)
 8029fae:	2200      	movs	r2, #0
 8029fb0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8029fb2:	4b10      	ldr	r3, [pc, #64]	; (8029ff4 <SystemInit+0x100>)
 8029fb4:	681a      	ldr	r2, [r3, #0]
 8029fb6:	4b10      	ldr	r3, [pc, #64]	; (8029ff8 <SystemInit+0x104>)
 8029fb8:	4013      	ands	r3, r2
 8029fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8029fbe:	d202      	bcs.n	8029fc6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8029fc0:	4b0e      	ldr	r3, [pc, #56]	; (8029ffc <SystemInit+0x108>)
 8029fc2:	2201      	movs	r2, #1
 8029fc4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8029fc6:	4b0e      	ldr	r3, [pc, #56]	; (802a000 <SystemInit+0x10c>)
 8029fc8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8029fcc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8029fce:	bf00      	nop
 8029fd0:	46bd      	mov	sp, r7
 8029fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fd6:	4770      	bx	lr
 8029fd8:	e000ed00 	.word	0xe000ed00
 8029fdc:	52002000 	.word	0x52002000
 8029fe0:	58024400 	.word	0x58024400
 8029fe4:	eaf6ed7f 	.word	0xeaf6ed7f
 8029fe8:	02020200 	.word	0x02020200
 8029fec:	01ff0000 	.word	0x01ff0000
 8029ff0:	01010280 	.word	0x01010280
 8029ff4:	5c001000 	.word	0x5c001000
 8029ff8:	ffff0000 	.word	0xffff0000
 8029ffc:	51008108 	.word	0x51008108
 802a000:	52004000 	.word	0x52004000

0802a004 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 802a004:	b580      	push	{r7, lr}
 802a006:	b088      	sub	sp, #32
 802a008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a00a:	f107 0310 	add.w	r3, r7, #16
 802a00e:	2200      	movs	r2, #0
 802a010:	601a      	str	r2, [r3, #0]
 802a012:	605a      	str	r2, [r3, #4]
 802a014:	609a      	str	r2, [r3, #8]
 802a016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a018:	1d3b      	adds	r3, r7, #4
 802a01a:	2200      	movs	r2, #0
 802a01c:	601a      	str	r2, [r3, #0]
 802a01e:	605a      	str	r2, [r3, #4]
 802a020:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 802a022:	4b1e      	ldr	r3, [pc, #120]	; (802a09c <MX_TIM2_Init+0x98>)
 802a024:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802a028:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 802a02a:	4b1c      	ldr	r3, [pc, #112]	; (802a09c <MX_TIM2_Init+0x98>)
 802a02c:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a030:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a032:	4b1a      	ldr	r3, [pc, #104]	; (802a09c <MX_TIM2_Init+0x98>)
 802a034:	2200      	movs	r2, #0
 802a036:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 802a038:	4b18      	ldr	r3, [pc, #96]	; (802a09c <MX_TIM2_Init+0x98>)
 802a03a:	2264      	movs	r2, #100	; 0x64
 802a03c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a03e:	4b17      	ldr	r3, [pc, #92]	; (802a09c <MX_TIM2_Init+0x98>)
 802a040:	2200      	movs	r2, #0
 802a042:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a044:	4b15      	ldr	r3, [pc, #84]	; (802a09c <MX_TIM2_Init+0x98>)
 802a046:	2200      	movs	r2, #0
 802a048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802a04a:	4814      	ldr	r0, [pc, #80]	; (802a09c <MX_TIM2_Init+0x98>)
 802a04c:	f00a f953 	bl	80342f6 <HAL_TIM_Base_Init>
 802a050:	4603      	mov	r3, r0
 802a052:	2b00      	cmp	r3, #0
 802a054:	d001      	beq.n	802a05a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 802a056:	f7ff fc61 	bl	802991c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a05a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a05e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802a060:	f107 0310 	add.w	r3, r7, #16
 802a064:	4619      	mov	r1, r3
 802a066:	480d      	ldr	r0, [pc, #52]	; (802a09c <MX_TIM2_Init+0x98>)
 802a068:	f00a fb34 	bl	80346d4 <HAL_TIM_ConfigClockSource>
 802a06c:	4603      	mov	r3, r0
 802a06e:	2b00      	cmp	r3, #0
 802a070:	d001      	beq.n	802a076 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 802a072:	f7ff fc53 	bl	802991c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a076:	2300      	movs	r3, #0
 802a078:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a07a:	2300      	movs	r3, #0
 802a07c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802a07e:	1d3b      	adds	r3, r7, #4
 802a080:	4619      	mov	r1, r3
 802a082:	4806      	ldr	r0, [pc, #24]	; (802a09c <MX_TIM2_Init+0x98>)
 802a084:	f00a fd7e 	bl	8034b84 <HAL_TIMEx_MasterConfigSynchronization>
 802a088:	4603      	mov	r3, r0
 802a08a:	2b00      	cmp	r3, #0
 802a08c:	d001      	beq.n	802a092 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 802a08e:	f7ff fc45 	bl	802991c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802a092:	bf00      	nop
 802a094:	3720      	adds	r7, #32
 802a096:	46bd      	mov	sp, r7
 802a098:	bd80      	pop	{r7, pc}
 802a09a:	bf00      	nop
 802a09c:	24024810 	.word	0x24024810

0802a0a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 802a0a0:	b580      	push	{r7, lr}
 802a0a2:	b088      	sub	sp, #32
 802a0a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a0a6:	f107 0310 	add.w	r3, r7, #16
 802a0aa:	2200      	movs	r2, #0
 802a0ac:	601a      	str	r2, [r3, #0]
 802a0ae:	605a      	str	r2, [r3, #4]
 802a0b0:	609a      	str	r2, [r3, #8]
 802a0b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a0b4:	1d3b      	adds	r3, r7, #4
 802a0b6:	2200      	movs	r2, #0
 802a0b8:	601a      	str	r2, [r3, #0]
 802a0ba:	605a      	str	r2, [r3, #4]
 802a0bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802a0be:	4b1d      	ldr	r3, [pc, #116]	; (802a134 <MX_TIM3_Init+0x94>)
 802a0c0:	4a1d      	ldr	r2, [pc, #116]	; (802a138 <MX_TIM3_Init+0x98>)
 802a0c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 802a0c4:	4b1b      	ldr	r3, [pc, #108]	; (802a134 <MX_TIM3_Init+0x94>)
 802a0c6:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a0ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a0cc:	4b19      	ldr	r3, [pc, #100]	; (802a134 <MX_TIM3_Init+0x94>)
 802a0ce:	2200      	movs	r2, #0
 802a0d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 802a0d2:	4b18      	ldr	r3, [pc, #96]	; (802a134 <MX_TIM3_Init+0x94>)
 802a0d4:	220a      	movs	r2, #10
 802a0d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a0d8:	4b16      	ldr	r3, [pc, #88]	; (802a134 <MX_TIM3_Init+0x94>)
 802a0da:	2200      	movs	r2, #0
 802a0dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a0de:	4b15      	ldr	r3, [pc, #84]	; (802a134 <MX_TIM3_Init+0x94>)
 802a0e0:	2200      	movs	r2, #0
 802a0e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 802a0e4:	4813      	ldr	r0, [pc, #76]	; (802a134 <MX_TIM3_Init+0x94>)
 802a0e6:	f00a f906 	bl	80342f6 <HAL_TIM_Base_Init>
 802a0ea:	4603      	mov	r3, r0
 802a0ec:	2b00      	cmp	r3, #0
 802a0ee:	d001      	beq.n	802a0f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 802a0f0:	f7ff fc14 	bl	802991c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a0f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a0f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 802a0fa:	f107 0310 	add.w	r3, r7, #16
 802a0fe:	4619      	mov	r1, r3
 802a100:	480c      	ldr	r0, [pc, #48]	; (802a134 <MX_TIM3_Init+0x94>)
 802a102:	f00a fae7 	bl	80346d4 <HAL_TIM_ConfigClockSource>
 802a106:	4603      	mov	r3, r0
 802a108:	2b00      	cmp	r3, #0
 802a10a:	d001      	beq.n	802a110 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 802a10c:	f7ff fc06 	bl	802991c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a110:	2300      	movs	r3, #0
 802a112:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a114:	2300      	movs	r3, #0
 802a116:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 802a118:	1d3b      	adds	r3, r7, #4
 802a11a:	4619      	mov	r1, r3
 802a11c:	4805      	ldr	r0, [pc, #20]	; (802a134 <MX_TIM3_Init+0x94>)
 802a11e:	f00a fd31 	bl	8034b84 <HAL_TIMEx_MasterConfigSynchronization>
 802a122:	4603      	mov	r3, r0
 802a124:	2b00      	cmp	r3, #0
 802a126:	d001      	beq.n	802a12c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 802a128:	f7ff fbf8 	bl	802991c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 802a12c:	bf00      	nop
 802a12e:	3720      	adds	r7, #32
 802a130:	46bd      	mov	sp, r7
 802a132:	bd80      	pop	{r7, pc}
 802a134:	2402485c 	.word	0x2402485c
 802a138:	40000400 	.word	0x40000400

0802a13c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 802a13c:	b580      	push	{r7, lr}
 802a13e:	b088      	sub	sp, #32
 802a140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a142:	f107 0310 	add.w	r3, r7, #16
 802a146:	2200      	movs	r2, #0
 802a148:	601a      	str	r2, [r3, #0]
 802a14a:	605a      	str	r2, [r3, #4]
 802a14c:	609a      	str	r2, [r3, #8]
 802a14e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a150:	1d3b      	adds	r3, r7, #4
 802a152:	2200      	movs	r2, #0
 802a154:	601a      	str	r2, [r3, #0]
 802a156:	605a      	str	r2, [r3, #4]
 802a158:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 802a15a:	4b1d      	ldr	r3, [pc, #116]	; (802a1d0 <MX_TIM4_Init+0x94>)
 802a15c:	4a1d      	ldr	r2, [pc, #116]	; (802a1d4 <MX_TIM4_Init+0x98>)
 802a15e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 802a160:	4b1b      	ldr	r3, [pc, #108]	; (802a1d0 <MX_TIM4_Init+0x94>)
 802a162:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a166:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a168:	4b19      	ldr	r3, [pc, #100]	; (802a1d0 <MX_TIM4_Init+0x94>)
 802a16a:	2200      	movs	r2, #0
 802a16c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 802a16e:	4b18      	ldr	r3, [pc, #96]	; (802a1d0 <MX_TIM4_Init+0x94>)
 802a170:	2264      	movs	r2, #100	; 0x64
 802a172:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a174:	4b16      	ldr	r3, [pc, #88]	; (802a1d0 <MX_TIM4_Init+0x94>)
 802a176:	2200      	movs	r2, #0
 802a178:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a17a:	4b15      	ldr	r3, [pc, #84]	; (802a1d0 <MX_TIM4_Init+0x94>)
 802a17c:	2200      	movs	r2, #0
 802a17e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 802a180:	4813      	ldr	r0, [pc, #76]	; (802a1d0 <MX_TIM4_Init+0x94>)
 802a182:	f00a f8b8 	bl	80342f6 <HAL_TIM_Base_Init>
 802a186:	4603      	mov	r3, r0
 802a188:	2b00      	cmp	r3, #0
 802a18a:	d001      	beq.n	802a190 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 802a18c:	f7ff fbc6 	bl	802991c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a194:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 802a196:	f107 0310 	add.w	r3, r7, #16
 802a19a:	4619      	mov	r1, r3
 802a19c:	480c      	ldr	r0, [pc, #48]	; (802a1d0 <MX_TIM4_Init+0x94>)
 802a19e:	f00a fa99 	bl	80346d4 <HAL_TIM_ConfigClockSource>
 802a1a2:	4603      	mov	r3, r0
 802a1a4:	2b00      	cmp	r3, #0
 802a1a6:	d001      	beq.n	802a1ac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 802a1a8:	f7ff fbb8 	bl	802991c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a1ac:	2300      	movs	r3, #0
 802a1ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a1b0:	2300      	movs	r3, #0
 802a1b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802a1b4:	1d3b      	adds	r3, r7, #4
 802a1b6:	4619      	mov	r1, r3
 802a1b8:	4805      	ldr	r0, [pc, #20]	; (802a1d0 <MX_TIM4_Init+0x94>)
 802a1ba:	f00a fce3 	bl	8034b84 <HAL_TIMEx_MasterConfigSynchronization>
 802a1be:	4603      	mov	r3, r0
 802a1c0:	2b00      	cmp	r3, #0
 802a1c2:	d001      	beq.n	802a1c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 802a1c4:	f7ff fbaa 	bl	802991c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802a1c8:	bf00      	nop
 802a1ca:	3720      	adds	r7, #32
 802a1cc:	46bd      	mov	sp, r7
 802a1ce:	bd80      	pop	{r7, pc}
 802a1d0:	240248a8 	.word	0x240248a8
 802a1d4:	40000800 	.word	0x40000800

0802a1d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 802a1d8:	b580      	push	{r7, lr}
 802a1da:	b086      	sub	sp, #24
 802a1dc:	af00      	add	r7, sp, #0
 802a1de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 802a1e0:	687b      	ldr	r3, [r7, #4]
 802a1e2:	681b      	ldr	r3, [r3, #0]
 802a1e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a1e8:	d117      	bne.n	802a21a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802a1ea:	4b2a      	ldr	r3, [pc, #168]	; (802a294 <HAL_TIM_Base_MspInit+0xbc>)
 802a1ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a1f0:	4a28      	ldr	r2, [pc, #160]	; (802a294 <HAL_TIM_Base_MspInit+0xbc>)
 802a1f2:	f043 0301 	orr.w	r3, r3, #1
 802a1f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a1fa:	4b26      	ldr	r3, [pc, #152]	; (802a294 <HAL_TIM_Base_MspInit+0xbc>)
 802a1fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a200:	f003 0301 	and.w	r3, r3, #1
 802a204:	617b      	str	r3, [r7, #20]
 802a206:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 802a208:	2200      	movs	r2, #0
 802a20a:	2101      	movs	r1, #1
 802a20c:	201c      	movs	r0, #28
 802a20e:	f000 ff3a 	bl	802b086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802a212:	201c      	movs	r0, #28
 802a214:	f000 ff51 	bl	802b0ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 802a218:	e038      	b.n	802a28c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 802a21a:	687b      	ldr	r3, [r7, #4]
 802a21c:	681b      	ldr	r3, [r3, #0]
 802a21e:	4a1e      	ldr	r2, [pc, #120]	; (802a298 <HAL_TIM_Base_MspInit+0xc0>)
 802a220:	4293      	cmp	r3, r2
 802a222:	d117      	bne.n	802a254 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802a224:	4b1b      	ldr	r3, [pc, #108]	; (802a294 <HAL_TIM_Base_MspInit+0xbc>)
 802a226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a22a:	4a1a      	ldr	r2, [pc, #104]	; (802a294 <HAL_TIM_Base_MspInit+0xbc>)
 802a22c:	f043 0302 	orr.w	r3, r3, #2
 802a230:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a234:	4b17      	ldr	r3, [pc, #92]	; (802a294 <HAL_TIM_Base_MspInit+0xbc>)
 802a236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a23a:	f003 0302 	and.w	r3, r3, #2
 802a23e:	613b      	str	r3, [r7, #16]
 802a240:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 802a242:	2200      	movs	r2, #0
 802a244:	2101      	movs	r1, #1
 802a246:	201d      	movs	r0, #29
 802a248:	f000 ff1d 	bl	802b086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 802a24c:	201d      	movs	r0, #29
 802a24e:	f000 ff34 	bl	802b0ba <HAL_NVIC_EnableIRQ>
}
 802a252:	e01b      	b.n	802a28c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 802a254:	687b      	ldr	r3, [r7, #4]
 802a256:	681b      	ldr	r3, [r3, #0]
 802a258:	4a10      	ldr	r2, [pc, #64]	; (802a29c <HAL_TIM_Base_MspInit+0xc4>)
 802a25a:	4293      	cmp	r3, r2
 802a25c:	d116      	bne.n	802a28c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 802a25e:	4b0d      	ldr	r3, [pc, #52]	; (802a294 <HAL_TIM_Base_MspInit+0xbc>)
 802a260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a264:	4a0b      	ldr	r2, [pc, #44]	; (802a294 <HAL_TIM_Base_MspInit+0xbc>)
 802a266:	f043 0304 	orr.w	r3, r3, #4
 802a26a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a26e:	4b09      	ldr	r3, [pc, #36]	; (802a294 <HAL_TIM_Base_MspInit+0xbc>)
 802a270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a274:	f003 0304 	and.w	r3, r3, #4
 802a278:	60fb      	str	r3, [r7, #12]
 802a27a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 802a27c:	2200      	movs	r2, #0
 802a27e:	2100      	movs	r1, #0
 802a280:	201e      	movs	r0, #30
 802a282:	f000 ff00 	bl	802b086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 802a286:	201e      	movs	r0, #30
 802a288:	f000 ff17 	bl	802b0ba <HAL_NVIC_EnableIRQ>
}
 802a28c:	bf00      	nop
 802a28e:	3718      	adds	r7, #24
 802a290:	46bd      	mov	sp, r7
 802a292:	bd80      	pop	{r7, pc}
 802a294:	58024400 	.word	0x58024400
 802a298:	40000400 	.word	0x40000400
 802a29c:	40000800 	.word	0x40000800

0802a2a0 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 802a2a0:	b580      	push	{r7, lr}
 802a2a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 802a2a4:	4b25      	ldr	r3, [pc, #148]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2a6:	4a26      	ldr	r2, [pc, #152]	; (802a340 <MX_UART4_Init+0xa0>)
 802a2a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 802a2aa:	4b24      	ldr	r3, [pc, #144]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802a2b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 802a2b2:	4b22      	ldr	r3, [pc, #136]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a2b8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 802a2ba:	4b20      	ldr	r3, [pc, #128]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2bc:	2200      	movs	r2, #0
 802a2be:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 802a2c0:	4b1e      	ldr	r3, [pc, #120]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a2c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 802a2c8:	4b1c      	ldr	r3, [pc, #112]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2ca:	220c      	movs	r2, #12
 802a2cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a2ce:	4b1b      	ldr	r3, [pc, #108]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2d0:	2200      	movs	r2, #0
 802a2d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802a2d4:	4b19      	ldr	r3, [pc, #100]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2d6:	2200      	movs	r2, #0
 802a2d8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a2da:	4b18      	ldr	r3, [pc, #96]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2dc:	2200      	movs	r2, #0
 802a2de:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a2e0:	4b16      	ldr	r3, [pc, #88]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2e2:	2200      	movs	r2, #0
 802a2e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a2e6:	4b15      	ldr	r3, [pc, #84]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2e8:	2220      	movs	r2, #32
 802a2ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a2ec:	4b13      	ldr	r3, [pc, #76]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a2f2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 802a2f4:	4811      	ldr	r0, [pc, #68]	; (802a33c <MX_UART4_Init+0x9c>)
 802a2f6:	f00a fcf1 	bl	8034cdc <HAL_UART_Init>
 802a2fa:	4603      	mov	r3, r0
 802a2fc:	2b00      	cmp	r3, #0
 802a2fe:	d001      	beq.n	802a304 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 802a300:	f7ff fb0c 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a304:	2100      	movs	r1, #0
 802a306:	480d      	ldr	r0, [pc, #52]	; (802a33c <MX_UART4_Init+0x9c>)
 802a308:	f00d fa3e 	bl	8037788 <HAL_UARTEx_SetTxFifoThreshold>
 802a30c:	4603      	mov	r3, r0
 802a30e:	2b00      	cmp	r3, #0
 802a310:	d001      	beq.n	802a316 <MX_UART4_Init+0x76>
  {
    Error_Handler();
 802a312:	f7ff fb03 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a316:	2100      	movs	r1, #0
 802a318:	4808      	ldr	r0, [pc, #32]	; (802a33c <MX_UART4_Init+0x9c>)
 802a31a:	f00d fa73 	bl	8037804 <HAL_UARTEx_SetRxFifoThreshold>
 802a31e:	4603      	mov	r3, r0
 802a320:	2b00      	cmp	r3, #0
 802a322:	d001      	beq.n	802a328 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 802a324:	f7ff fafa 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 802a328:	4804      	ldr	r0, [pc, #16]	; (802a33c <MX_UART4_Init+0x9c>)
 802a32a:	f00d f9f4 	bl	8037716 <HAL_UARTEx_DisableFifoMode>
 802a32e:	4603      	mov	r3, r0
 802a330:	2b00      	cmp	r3, #0
 802a332:	d001      	beq.n	802a338 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 802a334:	f7ff faf2 	bl	802991c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 802a338:	bf00      	nop
 802a33a:	bd80      	pop	{r7, pc}
 802a33c:	240248f4 	.word	0x240248f4
 802a340:	40004c00 	.word	0x40004c00

0802a344 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 802a344:	b580      	push	{r7, lr}
 802a346:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 802a348:	4b22      	ldr	r3, [pc, #136]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a34a:	4a23      	ldr	r2, [pc, #140]	; (802a3d8 <MX_UART7_Init+0x94>)
 802a34c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 802a34e:	4b21      	ldr	r3, [pc, #132]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a350:	4a22      	ldr	r2, [pc, #136]	; (802a3dc <MX_UART7_Init+0x98>)
 802a352:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 802a354:	4b1f      	ldr	r3, [pc, #124]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a356:	2200      	movs	r2, #0
 802a358:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 802a35a:	4b1e      	ldr	r3, [pc, #120]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a35c:	2200      	movs	r2, #0
 802a35e:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 802a360:	4b1c      	ldr	r3, [pc, #112]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a362:	2200      	movs	r2, #0
 802a364:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 802a366:	4b1b      	ldr	r3, [pc, #108]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a368:	220c      	movs	r2, #12
 802a36a:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a36c:	4b19      	ldr	r3, [pc, #100]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a36e:	2200      	movs	r2, #0
 802a370:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 802a372:	4b18      	ldr	r3, [pc, #96]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a374:	2200      	movs	r2, #0
 802a376:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a378:	4b16      	ldr	r3, [pc, #88]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a37a:	2200      	movs	r2, #0
 802a37c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a37e:	4b15      	ldr	r3, [pc, #84]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a380:	2200      	movs	r2, #0
 802a382:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802a384:	4b13      	ldr	r3, [pc, #76]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a386:	2200      	movs	r2, #0
 802a388:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 802a38a:	4812      	ldr	r0, [pc, #72]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a38c:	f00a fca6 	bl	8034cdc <HAL_UART_Init>
 802a390:	4603      	mov	r3, r0
 802a392:	2b00      	cmp	r3, #0
 802a394:	d001      	beq.n	802a39a <MX_UART7_Init+0x56>
  {
    Error_Handler();
 802a396:	f7ff fac1 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a39a:	2100      	movs	r1, #0
 802a39c:	480d      	ldr	r0, [pc, #52]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a39e:	f00d f9f3 	bl	8037788 <HAL_UARTEx_SetTxFifoThreshold>
 802a3a2:	4603      	mov	r3, r0
 802a3a4:	2b00      	cmp	r3, #0
 802a3a6:	d001      	beq.n	802a3ac <MX_UART7_Init+0x68>
  {
    Error_Handler();
 802a3a8:	f7ff fab8 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a3ac:	2100      	movs	r1, #0
 802a3ae:	4809      	ldr	r0, [pc, #36]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a3b0:	f00d fa28 	bl	8037804 <HAL_UARTEx_SetRxFifoThreshold>
 802a3b4:	4603      	mov	r3, r0
 802a3b6:	2b00      	cmp	r3, #0
 802a3b8:	d001      	beq.n	802a3be <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 802a3ba:	f7ff faaf 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 802a3be:	4805      	ldr	r0, [pc, #20]	; (802a3d4 <MX_UART7_Init+0x90>)
 802a3c0:	f00d f9a9 	bl	8037716 <HAL_UARTEx_DisableFifoMode>
 802a3c4:	4603      	mov	r3, r0
 802a3c6:	2b00      	cmp	r3, #0
 802a3c8:	d001      	beq.n	802a3ce <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 802a3ca:	f7ff faa7 	bl	802991c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 802a3ce:	bf00      	nop
 802a3d0:	bd80      	pop	{r7, pc}
 802a3d2:	bf00      	nop
 802a3d4:	24024984 	.word	0x24024984
 802a3d8:	40007800 	.word	0x40007800
 802a3dc:	001312d0 	.word	0x001312d0

0802a3e0 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 802a3e0:	b580      	push	{r7, lr}
 802a3e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 802a3e4:	4b26      	ldr	r3, [pc, #152]	; (802a480 <MX_UART8_Init+0xa0>)
 802a3e6:	4a27      	ldr	r2, [pc, #156]	; (802a484 <MX_UART8_Init+0xa4>)
 802a3e8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 802a3ea:	4b25      	ldr	r3, [pc, #148]	; (802a480 <MX_UART8_Init+0xa0>)
 802a3ec:	4a26      	ldr	r2, [pc, #152]	; (802a488 <MX_UART8_Init+0xa8>)
 802a3ee:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 802a3f0:	4b23      	ldr	r3, [pc, #140]	; (802a480 <MX_UART8_Init+0xa0>)
 802a3f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a3f6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 802a3f8:	4b21      	ldr	r3, [pc, #132]	; (802a480 <MX_UART8_Init+0xa0>)
 802a3fa:	2200      	movs	r2, #0
 802a3fc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 802a3fe:	4b20      	ldr	r3, [pc, #128]	; (802a480 <MX_UART8_Init+0xa0>)
 802a400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a404:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 802a406:	4b1e      	ldr	r3, [pc, #120]	; (802a480 <MX_UART8_Init+0xa0>)
 802a408:	220c      	movs	r2, #12
 802a40a:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a40c:	4b1c      	ldr	r3, [pc, #112]	; (802a480 <MX_UART8_Init+0xa0>)
 802a40e:	2200      	movs	r2, #0
 802a410:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 802a412:	4b1b      	ldr	r3, [pc, #108]	; (802a480 <MX_UART8_Init+0xa0>)
 802a414:	2200      	movs	r2, #0
 802a416:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a418:	4b19      	ldr	r3, [pc, #100]	; (802a480 <MX_UART8_Init+0xa0>)
 802a41a:	2200      	movs	r2, #0
 802a41c:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a41e:	4b18      	ldr	r3, [pc, #96]	; (802a480 <MX_UART8_Init+0xa0>)
 802a420:	2200      	movs	r2, #0
 802a422:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a424:	4b16      	ldr	r3, [pc, #88]	; (802a480 <MX_UART8_Init+0xa0>)
 802a426:	2220      	movs	r2, #32
 802a428:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a42a:	4b15      	ldr	r3, [pc, #84]	; (802a480 <MX_UART8_Init+0xa0>)
 802a42c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a430:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 802a432:	4813      	ldr	r0, [pc, #76]	; (802a480 <MX_UART8_Init+0xa0>)
 802a434:	f00a fc52 	bl	8034cdc <HAL_UART_Init>
 802a438:	4603      	mov	r3, r0
 802a43a:	2b00      	cmp	r3, #0
 802a43c:	d001      	beq.n	802a442 <MX_UART8_Init+0x62>
  {
    Error_Handler();
 802a43e:	f7ff fa6d 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a442:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802a446:	480e      	ldr	r0, [pc, #56]	; (802a480 <MX_UART8_Init+0xa0>)
 802a448:	f00d f99e 	bl	8037788 <HAL_UARTEx_SetTxFifoThreshold>
 802a44c:	4603      	mov	r3, r0
 802a44e:	2b00      	cmp	r3, #0
 802a450:	d001      	beq.n	802a456 <MX_UART8_Init+0x76>
  {
    Error_Handler();
 802a452:	f7ff fa63 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a456:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802a45a:	4809      	ldr	r0, [pc, #36]	; (802a480 <MX_UART8_Init+0xa0>)
 802a45c:	f00d f9d2 	bl	8037804 <HAL_UARTEx_SetRxFifoThreshold>
 802a460:	4603      	mov	r3, r0
 802a462:	2b00      	cmp	r3, #0
 802a464:	d001      	beq.n	802a46a <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 802a466:	f7ff fa59 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 802a46a:	4805      	ldr	r0, [pc, #20]	; (802a480 <MX_UART8_Init+0xa0>)
 802a46c:	f00d f918 	bl	80376a0 <HAL_UARTEx_EnableFifoMode>
 802a470:	4603      	mov	r3, r0
 802a472:	2b00      	cmp	r3, #0
 802a474:	d001      	beq.n	802a47a <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 802a476:	f7ff fa51 	bl	802991c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 802a47a:	bf00      	nop
 802a47c:	bd80      	pop	{r7, pc}
 802a47e:	bf00      	nop
 802a480:	24024a14 	.word	0x24024a14
 802a484:	40007c00 	.word	0x40007c00
 802a488:	001312d0 	.word	0x001312d0

0802a48c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 802a48c:	b580      	push	{r7, lr}
 802a48e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802a490:	4b22      	ldr	r3, [pc, #136]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a492:	4a23      	ldr	r2, [pc, #140]	; (802a520 <MX_USART2_UART_Init+0x94>)
 802a494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 802a496:	4b21      	ldr	r3, [pc, #132]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802a49c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802a49e:	4b1f      	ldr	r3, [pc, #124]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a4a0:	2200      	movs	r2, #0
 802a4a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802a4a4:	4b1d      	ldr	r3, [pc, #116]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a4a6:	2200      	movs	r2, #0
 802a4a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802a4aa:	4b1c      	ldr	r3, [pc, #112]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a4ac:	2200      	movs	r2, #0
 802a4ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802a4b0:	4b1a      	ldr	r3, [pc, #104]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a4b2:	220c      	movs	r2, #12
 802a4b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a4b6:	4b19      	ldr	r3, [pc, #100]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a4b8:	2200      	movs	r2, #0
 802a4ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802a4bc:	4b17      	ldr	r3, [pc, #92]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a4be:	2200      	movs	r2, #0
 802a4c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a4c2:	4b16      	ldr	r3, [pc, #88]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a4c4:	2200      	movs	r2, #0
 802a4c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a4c8:	4b14      	ldr	r3, [pc, #80]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a4ca:	2200      	movs	r2, #0
 802a4cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802a4ce:	4b13      	ldr	r3, [pc, #76]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a4d0:	2200      	movs	r2, #0
 802a4d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802a4d4:	4811      	ldr	r0, [pc, #68]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a4d6:	f00a fc01 	bl	8034cdc <HAL_UART_Init>
 802a4da:	4603      	mov	r3, r0
 802a4dc:	2b00      	cmp	r3, #0
 802a4de:	d001      	beq.n	802a4e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 802a4e0:	f7ff fa1c 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a4e4:	2100      	movs	r1, #0
 802a4e6:	480d      	ldr	r0, [pc, #52]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a4e8:	f00d f94e 	bl	8037788 <HAL_UARTEx_SetTxFifoThreshold>
 802a4ec:	4603      	mov	r3, r0
 802a4ee:	2b00      	cmp	r3, #0
 802a4f0:	d001      	beq.n	802a4f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 802a4f2:	f7ff fa13 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a4f6:	2100      	movs	r1, #0
 802a4f8:	4808      	ldr	r0, [pc, #32]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a4fa:	f00d f983 	bl	8037804 <HAL_UARTEx_SetRxFifoThreshold>
 802a4fe:	4603      	mov	r3, r0
 802a500:	2b00      	cmp	r3, #0
 802a502:	d001      	beq.n	802a508 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 802a504:	f7ff fa0a 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 802a508:	4804      	ldr	r0, [pc, #16]	; (802a51c <MX_USART2_UART_Init+0x90>)
 802a50a:	f00d f904 	bl	8037716 <HAL_UARTEx_DisableFifoMode>
 802a50e:	4603      	mov	r3, r0
 802a510:	2b00      	cmp	r3, #0
 802a512:	d001      	beq.n	802a518 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 802a514:	f7ff fa02 	bl	802991c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802a518:	bf00      	nop
 802a51a:	bd80      	pop	{r7, pc}
 802a51c:	24024aa4 	.word	0x24024aa4
 802a520:	40004400 	.word	0x40004400

0802a524 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 802a524:	b580      	push	{r7, lr}
 802a526:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 802a528:	4b26      	ldr	r3, [pc, #152]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a52a:	4a27      	ldr	r2, [pc, #156]	; (802a5c8 <MX_USART3_UART_Init+0xa4>)
 802a52c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 802a52e:	4b25      	ldr	r3, [pc, #148]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a530:	4a26      	ldr	r2, [pc, #152]	; (802a5cc <MX_USART3_UART_Init+0xa8>)
 802a532:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 802a534:	4b23      	ldr	r3, [pc, #140]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a536:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a53a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 802a53c:	4b21      	ldr	r3, [pc, #132]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a53e:	2200      	movs	r2, #0
 802a540:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 802a542:	4b20      	ldr	r3, [pc, #128]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a548:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 802a54a:	4b1e      	ldr	r3, [pc, #120]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a54c:	220c      	movs	r2, #12
 802a54e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a550:	4b1c      	ldr	r3, [pc, #112]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a552:	2200      	movs	r2, #0
 802a554:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 802a556:	4b1b      	ldr	r3, [pc, #108]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a558:	2200      	movs	r2, #0
 802a55a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a55c:	4b19      	ldr	r3, [pc, #100]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a55e:	2200      	movs	r2, #0
 802a560:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a562:	4b18      	ldr	r3, [pc, #96]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a564:	2200      	movs	r2, #0
 802a566:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a568:	4b16      	ldr	r3, [pc, #88]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a56a:	2220      	movs	r2, #32
 802a56c:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a56e:	4b15      	ldr	r3, [pc, #84]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a570:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a574:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 802a576:	4813      	ldr	r0, [pc, #76]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a578:	f00a fbb0 	bl	8034cdc <HAL_UART_Init>
 802a57c:	4603      	mov	r3, r0
 802a57e:	2b00      	cmp	r3, #0
 802a580:	d001      	beq.n	802a586 <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 802a582:	f7ff f9cb 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a586:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802a58a:	480e      	ldr	r0, [pc, #56]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a58c:	f00d f8fc 	bl	8037788 <HAL_UARTEx_SetTxFifoThreshold>
 802a590:	4603      	mov	r3, r0
 802a592:	2b00      	cmp	r3, #0
 802a594:	d001      	beq.n	802a59a <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 802a596:	f7ff f9c1 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a59a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802a59e:	4809      	ldr	r0, [pc, #36]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a5a0:	f00d f930 	bl	8037804 <HAL_UARTEx_SetRxFifoThreshold>
 802a5a4:	4603      	mov	r3, r0
 802a5a6:	2b00      	cmp	r3, #0
 802a5a8:	d001      	beq.n	802a5ae <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 802a5aa:	f7ff f9b7 	bl	802991c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 802a5ae:	4805      	ldr	r0, [pc, #20]	; (802a5c4 <MX_USART3_UART_Init+0xa0>)
 802a5b0:	f00d f876 	bl	80376a0 <HAL_UARTEx_EnableFifoMode>
 802a5b4:	4603      	mov	r3, r0
 802a5b6:	2b00      	cmp	r3, #0
 802a5b8:	d001      	beq.n	802a5be <MX_USART3_UART_Init+0x9a>
  {
    Error_Handler();
 802a5ba:	f7ff f9af 	bl	802991c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 802a5be:	bf00      	nop
 802a5c0:	bd80      	pop	{r7, pc}
 802a5c2:	bf00      	nop
 802a5c4:	24024b34 	.word	0x24024b34
 802a5c8:	40004800 	.word	0x40004800
 802a5cc:	001312d0 	.word	0x001312d0

0802a5d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 802a5d0:	b580      	push	{r7, lr}
 802a5d2:	b0c0      	sub	sp, #256	; 0x100
 802a5d4:	af00      	add	r7, sp, #0
 802a5d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802a5d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a5dc:	2200      	movs	r2, #0
 802a5de:	601a      	str	r2, [r3, #0]
 802a5e0:	605a      	str	r2, [r3, #4]
 802a5e2:	609a      	str	r2, [r3, #8]
 802a5e4:	60da      	str	r2, [r3, #12]
 802a5e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802a5e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a5ec:	22bc      	movs	r2, #188	; 0xbc
 802a5ee:	2100      	movs	r1, #0
 802a5f0:	4618      	mov	r0, r3
 802a5f2:	f011 fb55 	bl	803bca0 <memset>
  if(uartHandle->Instance==UART4)
 802a5f6:	687b      	ldr	r3, [r7, #4]
 802a5f8:	681b      	ldr	r3, [r3, #0]
 802a5fa:	4ac2      	ldr	r2, [pc, #776]	; (802a904 <HAL_UART_MspInit+0x334>)
 802a5fc:	4293      	cmp	r3, r2
 802a5fe:	d14a      	bne.n	802a696 <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 802a600:	2302      	movs	r3, #2
 802a602:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a604:	2300      	movs	r3, #0
 802a606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a60a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a60e:	4618      	mov	r0, r3
 802a610:	f007 f9dc 	bl	80319cc <HAL_RCCEx_PeriphCLKConfig>
 802a614:	4603      	mov	r3, r0
 802a616:	2b00      	cmp	r3, #0
 802a618:	d001      	beq.n	802a61e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 802a61a:	f7ff f97f 	bl	802991c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 802a61e:	4bba      	ldr	r3, [pc, #744]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a624:	4ab8      	ldr	r2, [pc, #736]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802a62a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a62e:	4bb6      	ldr	r3, [pc, #728]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a634:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802a638:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802a63c:	4bb2      	ldr	r3, [pc, #712]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a63e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a642:	4ab1      	ldr	r2, [pc, #708]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a644:	f043 0301 	orr.w	r3, r3, #1
 802a648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a64c:	4bae      	ldr	r3, [pc, #696]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a64e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a652:	f003 0301 	and.w	r3, r3, #1
 802a656:	62bb      	str	r3, [r7, #40]	; 0x28
 802a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802a65a:	2303      	movs	r3, #3
 802a65c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a660:	2302      	movs	r3, #2
 802a662:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a666:	2300      	movs	r3, #0
 802a668:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a66c:	2300      	movs	r3, #0
 802a66e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802a672:	2308      	movs	r3, #8
 802a674:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802a678:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a67c:	4619      	mov	r1, r3
 802a67e:	48a3      	ldr	r0, [pc, #652]	; (802a90c <HAL_UART_MspInit+0x33c>)
 802a680:	f003 fd54 	bl	802e12c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 802a684:	2200      	movs	r2, #0
 802a686:	2100      	movs	r1, #0
 802a688:	2034      	movs	r0, #52	; 0x34
 802a68a:	f000 fcfc 	bl	802b086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 802a68e:	2034      	movs	r0, #52	; 0x34
 802a690:	f000 fd13 	bl	802b0ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 802a694:	e130      	b.n	802a8f8 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 802a696:	687b      	ldr	r3, [r7, #4]
 802a698:	681b      	ldr	r3, [r3, #0]
 802a69a:	4a9d      	ldr	r2, [pc, #628]	; (802a910 <HAL_UART_MspInit+0x340>)
 802a69c:	4293      	cmp	r3, r2
 802a69e:	d143      	bne.n	802a728 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 802a6a0:	2302      	movs	r3, #2
 802a6a2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a6a4:	2300      	movs	r3, #0
 802a6a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a6aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a6ae:	4618      	mov	r0, r3
 802a6b0:	f007 f98c 	bl	80319cc <HAL_RCCEx_PeriphCLKConfig>
 802a6b4:	4603      	mov	r3, r0
 802a6b6:	2b00      	cmp	r3, #0
 802a6b8:	d001      	beq.n	802a6be <HAL_UART_MspInit+0xee>
      Error_Handler();
 802a6ba:	f7ff f92f 	bl	802991c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 802a6be:	4b92      	ldr	r3, [pc, #584]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a6c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a6c4:	4a90      	ldr	r2, [pc, #576]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a6c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a6ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a6ce:	4b8e      	ldr	r3, [pc, #568]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a6d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a6d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802a6d8:	627b      	str	r3, [r7, #36]	; 0x24
 802a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802a6dc:	4b8a      	ldr	r3, [pc, #552]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a6de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a6e2:	4a89      	ldr	r2, [pc, #548]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a6e4:	f043 0310 	orr.w	r3, r3, #16
 802a6e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a6ec:	4b86      	ldr	r3, [pc, #536]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a6ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a6f2:	f003 0310 	and.w	r3, r3, #16
 802a6f6:	623b      	str	r3, [r7, #32]
 802a6f8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 802a6fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 802a6fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a702:	2302      	movs	r3, #2
 802a704:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a708:	2300      	movs	r3, #0
 802a70a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a70e:	2300      	movs	r3, #0
 802a710:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 802a714:	2307      	movs	r3, #7
 802a716:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a71a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a71e:	4619      	mov	r1, r3
 802a720:	487c      	ldr	r0, [pc, #496]	; (802a914 <HAL_UART_MspInit+0x344>)
 802a722:	f003 fd03 	bl	802e12c <HAL_GPIO_Init>
}
 802a726:	e0e7      	b.n	802a8f8 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 802a728:	687b      	ldr	r3, [r7, #4]
 802a72a:	681b      	ldr	r3, [r3, #0]
 802a72c:	4a7a      	ldr	r2, [pc, #488]	; (802a918 <HAL_UART_MspInit+0x348>)
 802a72e:	4293      	cmp	r3, r2
 802a730:	d14a      	bne.n	802a7c8 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 802a732:	2302      	movs	r3, #2
 802a734:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a736:	2300      	movs	r3, #0
 802a738:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a73c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a740:	4618      	mov	r0, r3
 802a742:	f007 f943 	bl	80319cc <HAL_RCCEx_PeriphCLKConfig>
 802a746:	4603      	mov	r3, r0
 802a748:	2b00      	cmp	r3, #0
 802a74a:	d001      	beq.n	802a750 <HAL_UART_MspInit+0x180>
      Error_Handler();
 802a74c:	f7ff f8e6 	bl	802991c <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 802a750:	4b6d      	ldr	r3, [pc, #436]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a756:	4a6c      	ldr	r2, [pc, #432]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802a75c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a760:	4b69      	ldr	r3, [pc, #420]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a76a:	61fb      	str	r3, [r7, #28]
 802a76c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802a76e:	4b66      	ldr	r3, [pc, #408]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a774:	4a64      	ldr	r2, [pc, #400]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a776:	f043 0310 	orr.w	r3, r3, #16
 802a77a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a77e:	4b62      	ldr	r3, [pc, #392]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a784:	f003 0310 	and.w	r3, r3, #16
 802a788:	61bb      	str	r3, [r7, #24]
 802a78a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802a78c:	2303      	movs	r3, #3
 802a78e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a792:	2302      	movs	r3, #2
 802a794:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a798:	2300      	movs	r3, #0
 802a79a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a79e:	2300      	movs	r3, #0
 802a7a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 802a7a4:	2308      	movs	r3, #8
 802a7a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a7aa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a7ae:	4619      	mov	r1, r3
 802a7b0:	4858      	ldr	r0, [pc, #352]	; (802a914 <HAL_UART_MspInit+0x344>)
 802a7b2:	f003 fcbb 	bl	802e12c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 802a7b6:	2200      	movs	r2, #0
 802a7b8:	2102      	movs	r1, #2
 802a7ba:	2053      	movs	r0, #83	; 0x53
 802a7bc:	f000 fc63 	bl	802b086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 802a7c0:	2053      	movs	r0, #83	; 0x53
 802a7c2:	f000 fc7a 	bl	802b0ba <HAL_NVIC_EnableIRQ>
}
 802a7c6:	e097      	b.n	802a8f8 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 802a7c8:	687b      	ldr	r3, [r7, #4]
 802a7ca:	681b      	ldr	r3, [r3, #0]
 802a7cc:	4a53      	ldr	r2, [pc, #332]	; (802a91c <HAL_UART_MspInit+0x34c>)
 802a7ce:	4293      	cmp	r3, r2
 802a7d0:	d142      	bne.n	802a858 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 802a7d2:	2302      	movs	r3, #2
 802a7d4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a7d6:	2300      	movs	r3, #0
 802a7d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a7dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a7e0:	4618      	mov	r0, r3
 802a7e2:	f007 f8f3 	bl	80319cc <HAL_RCCEx_PeriphCLKConfig>
 802a7e6:	4603      	mov	r3, r0
 802a7e8:	2b00      	cmp	r3, #0
 802a7ea:	d001      	beq.n	802a7f0 <HAL_UART_MspInit+0x220>
      Error_Handler();
 802a7ec:	f7ff f896 	bl	802991c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 802a7f0:	4b45      	ldr	r3, [pc, #276]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a7f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a7f6:	4a44      	ldr	r2, [pc, #272]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a7f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802a7fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a800:	4b41      	ldr	r3, [pc, #260]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a80a:	617b      	str	r3, [r7, #20]
 802a80c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802a80e:	4b3e      	ldr	r3, [pc, #248]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a814:	4a3c      	ldr	r2, [pc, #240]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a816:	f043 0301 	orr.w	r3, r3, #1
 802a81a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a81e:	4b3a      	ldr	r3, [pc, #232]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a824:	f003 0301 	and.w	r3, r3, #1
 802a828:	613b      	str	r3, [r7, #16]
 802a82a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802a82c:	230c      	movs	r3, #12
 802a82e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a832:	2302      	movs	r3, #2
 802a834:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a838:	2300      	movs	r3, #0
 802a83a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a83e:	2300      	movs	r3, #0
 802a840:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802a844:	2307      	movs	r3, #7
 802a846:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802a84a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a84e:	4619      	mov	r1, r3
 802a850:	482e      	ldr	r0, [pc, #184]	; (802a90c <HAL_UART_MspInit+0x33c>)
 802a852:	f003 fc6b 	bl	802e12c <HAL_GPIO_Init>
}
 802a856:	e04f      	b.n	802a8f8 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 802a858:	687b      	ldr	r3, [r7, #4]
 802a85a:	681b      	ldr	r3, [r3, #0]
 802a85c:	4a30      	ldr	r2, [pc, #192]	; (802a920 <HAL_UART_MspInit+0x350>)
 802a85e:	4293      	cmp	r3, r2
 802a860:	d14a      	bne.n	802a8f8 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 802a862:	2302      	movs	r3, #2
 802a864:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a866:	2300      	movs	r3, #0
 802a868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a86c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a870:	4618      	mov	r0, r3
 802a872:	f007 f8ab 	bl	80319cc <HAL_RCCEx_PeriphCLKConfig>
 802a876:	4603      	mov	r3, r0
 802a878:	2b00      	cmp	r3, #0
 802a87a:	d001      	beq.n	802a880 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 802a87c:	f7ff f84e 	bl	802991c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 802a880:	4b21      	ldr	r3, [pc, #132]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a886:	4a20      	ldr	r2, [pc, #128]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802a88c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a890:	4b1d      	ldr	r3, [pc, #116]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802a89a:	60fb      	str	r3, [r7, #12]
 802a89c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802a89e:	4b1a      	ldr	r3, [pc, #104]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a8a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a8a4:	4a18      	ldr	r2, [pc, #96]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a8a6:	f043 0308 	orr.w	r3, r3, #8
 802a8aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a8ae:	4b16      	ldr	r3, [pc, #88]	; (802a908 <HAL_UART_MspInit+0x338>)
 802a8b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a8b4:	f003 0308 	and.w	r3, r3, #8
 802a8b8:	60bb      	str	r3, [r7, #8]
 802a8ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 802a8bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 802a8c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a8c4:	2302      	movs	r3, #2
 802a8c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a8ca:	2300      	movs	r3, #0
 802a8cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a8d0:	2300      	movs	r3, #0
 802a8d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 802a8d6:	2307      	movs	r3, #7
 802a8d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802a8dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a8e0:	4619      	mov	r1, r3
 802a8e2:	4810      	ldr	r0, [pc, #64]	; (802a924 <HAL_UART_MspInit+0x354>)
 802a8e4:	f003 fc22 	bl	802e12c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 802a8e8:	2200      	movs	r2, #0
 802a8ea:	2100      	movs	r1, #0
 802a8ec:	2027      	movs	r0, #39	; 0x27
 802a8ee:	f000 fbca 	bl	802b086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 802a8f2:	2027      	movs	r0, #39	; 0x27
 802a8f4:	f000 fbe1 	bl	802b0ba <HAL_NVIC_EnableIRQ>
}
 802a8f8:	bf00      	nop
 802a8fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802a8fe:	46bd      	mov	sp, r7
 802a900:	bd80      	pop	{r7, pc}
 802a902:	bf00      	nop
 802a904:	40004c00 	.word	0x40004c00
 802a908:	58024400 	.word	0x58024400
 802a90c:	58020000 	.word	0x58020000
 802a910:	40007800 	.word	0x40007800
 802a914:	58021000 	.word	0x58021000
 802a918:	40007c00 	.word	0x40007c00
 802a91c:	40004400 	.word	0x40004400
 802a920:	40004800 	.word	0x40004800
 802a924:	58020c00 	.word	0x58020c00

0802a928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 802a928:	f8df d034 	ldr.w	sp, [pc, #52]	; 802a960 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 802a92c:	f7ff fae2 	bl	8029ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802a930:	480c      	ldr	r0, [pc, #48]	; (802a964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802a932:	490d      	ldr	r1, [pc, #52]	; (802a968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802a934:	4a0d      	ldr	r2, [pc, #52]	; (802a96c <LoopFillZerobss+0x1a>)
  movs r3, #0
 802a936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802a938:	e002      	b.n	802a940 <LoopCopyDataInit>

0802a93a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802a93a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802a93c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802a93e:	3304      	adds	r3, #4

0802a940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802a940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802a942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802a944:	d3f9      	bcc.n	802a93a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802a946:	4a0a      	ldr	r2, [pc, #40]	; (802a970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802a948:	4c0a      	ldr	r4, [pc, #40]	; (802a974 <LoopFillZerobss+0x22>)
  movs r3, #0
 802a94a:	2300      	movs	r3, #0
  b LoopFillZerobss
 802a94c:	e001      	b.n	802a952 <LoopFillZerobss>

0802a94e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802a94e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802a950:	3204      	adds	r2, #4

0802a952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802a952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802a954:	d3fb      	bcc.n	802a94e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802a956:	f011 f947 	bl	803bbe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802a95a:	f7fe fe37 	bl	80295cc <main>
  bx  lr
 802a95e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 802a960:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 802a964:	24000000 	.word	0x24000000
  ldr r1, =_edata
 802a968:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 802a96c:	08058408 	.word	0x08058408
  ldr r2, =_sbss
 802a970:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 802a974:	240267e8 	.word	0x240267e8

0802a978 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802a978:	e7fe      	b.n	802a978 <ADC3_IRQHandler>
	...

0802a97c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802a97c:	b580      	push	{r7, lr}
 802a97e:	b082      	sub	sp, #8
 802a980:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802a982:	2003      	movs	r0, #3
 802a984:	f000 fb74 	bl	802b070 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802a988:	f006 fe4a 	bl	8031620 <HAL_RCC_GetSysClockFreq>
 802a98c:	4602      	mov	r2, r0
 802a98e:	4b15      	ldr	r3, [pc, #84]	; (802a9e4 <HAL_Init+0x68>)
 802a990:	699b      	ldr	r3, [r3, #24]
 802a992:	0a1b      	lsrs	r3, r3, #8
 802a994:	f003 030f 	and.w	r3, r3, #15
 802a998:	4913      	ldr	r1, [pc, #76]	; (802a9e8 <HAL_Init+0x6c>)
 802a99a:	5ccb      	ldrb	r3, [r1, r3]
 802a99c:	f003 031f 	and.w	r3, r3, #31
 802a9a0:	fa22 f303 	lsr.w	r3, r2, r3
 802a9a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802a9a6:	4b0f      	ldr	r3, [pc, #60]	; (802a9e4 <HAL_Init+0x68>)
 802a9a8:	699b      	ldr	r3, [r3, #24]
 802a9aa:	f003 030f 	and.w	r3, r3, #15
 802a9ae:	4a0e      	ldr	r2, [pc, #56]	; (802a9e8 <HAL_Init+0x6c>)
 802a9b0:	5cd3      	ldrb	r3, [r2, r3]
 802a9b2:	f003 031f 	and.w	r3, r3, #31
 802a9b6:	687a      	ldr	r2, [r7, #4]
 802a9b8:	fa22 f303 	lsr.w	r3, r2, r3
 802a9bc:	4a0b      	ldr	r2, [pc, #44]	; (802a9ec <HAL_Init+0x70>)
 802a9be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802a9c0:	4a0b      	ldr	r2, [pc, #44]	; (802a9f0 <HAL_Init+0x74>)
 802a9c2:	687b      	ldr	r3, [r7, #4]
 802a9c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802a9c6:	200f      	movs	r0, #15
 802a9c8:	f000 f814 	bl	802a9f4 <HAL_InitTick>
 802a9cc:	4603      	mov	r3, r0
 802a9ce:	2b00      	cmp	r3, #0
 802a9d0:	d001      	beq.n	802a9d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802a9d2:	2301      	movs	r3, #1
 802a9d4:	e002      	b.n	802a9dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802a9d6:	f7ff f8e3 	bl	8029ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802a9da:	2300      	movs	r3, #0
}
 802a9dc:	4618      	mov	r0, r3
 802a9de:	3708      	adds	r7, #8
 802a9e0:	46bd      	mov	sp, r7
 802a9e2:	bd80      	pop	{r7, pc}
 802a9e4:	58024400 	.word	0x58024400
 802a9e8:	080582dc 	.word	0x080582dc
 802a9ec:	24000008 	.word	0x24000008
 802a9f0:	24000004 	.word	0x24000004

0802a9f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802a9f4:	b580      	push	{r7, lr}
 802a9f6:	b082      	sub	sp, #8
 802a9f8:	af00      	add	r7, sp, #0
 802a9fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802a9fc:	4b15      	ldr	r3, [pc, #84]	; (802aa54 <HAL_InitTick+0x60>)
 802a9fe:	781b      	ldrb	r3, [r3, #0]
 802aa00:	2b00      	cmp	r3, #0
 802aa02:	d101      	bne.n	802aa08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802aa04:	2301      	movs	r3, #1
 802aa06:	e021      	b.n	802aa4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 802aa08:	4b13      	ldr	r3, [pc, #76]	; (802aa58 <HAL_InitTick+0x64>)
 802aa0a:	681a      	ldr	r2, [r3, #0]
 802aa0c:	4b11      	ldr	r3, [pc, #68]	; (802aa54 <HAL_InitTick+0x60>)
 802aa0e:	781b      	ldrb	r3, [r3, #0]
 802aa10:	4619      	mov	r1, r3
 802aa12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802aa16:	fbb3 f3f1 	udiv	r3, r3, r1
 802aa1a:	fbb2 f3f3 	udiv	r3, r2, r3
 802aa1e:	4618      	mov	r0, r3
 802aa20:	f000 fb59 	bl	802b0d6 <HAL_SYSTICK_Config>
 802aa24:	4603      	mov	r3, r0
 802aa26:	2b00      	cmp	r3, #0
 802aa28:	d001      	beq.n	802aa2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802aa2a:	2301      	movs	r3, #1
 802aa2c:	e00e      	b.n	802aa4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802aa2e:	687b      	ldr	r3, [r7, #4]
 802aa30:	2b0f      	cmp	r3, #15
 802aa32:	d80a      	bhi.n	802aa4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802aa34:	2200      	movs	r2, #0
 802aa36:	6879      	ldr	r1, [r7, #4]
 802aa38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802aa3c:	f000 fb23 	bl	802b086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802aa40:	4a06      	ldr	r2, [pc, #24]	; (802aa5c <HAL_InitTick+0x68>)
 802aa42:	687b      	ldr	r3, [r7, #4]
 802aa44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802aa46:	2300      	movs	r3, #0
 802aa48:	e000      	b.n	802aa4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 802aa4a:	2301      	movs	r3, #1
}
 802aa4c:	4618      	mov	r0, r3
 802aa4e:	3708      	adds	r7, #8
 802aa50:	46bd      	mov	sp, r7
 802aa52:	bd80      	pop	{r7, pc}
 802aa54:	24000010 	.word	0x24000010
 802aa58:	24000004 	.word	0x24000004
 802aa5c:	2400000c 	.word	0x2400000c

0802aa60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802aa60:	b480      	push	{r7}
 802aa62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802aa64:	4b06      	ldr	r3, [pc, #24]	; (802aa80 <HAL_IncTick+0x20>)
 802aa66:	781b      	ldrb	r3, [r3, #0]
 802aa68:	461a      	mov	r2, r3
 802aa6a:	4b06      	ldr	r3, [pc, #24]	; (802aa84 <HAL_IncTick+0x24>)
 802aa6c:	681b      	ldr	r3, [r3, #0]
 802aa6e:	4413      	add	r3, r2
 802aa70:	4a04      	ldr	r2, [pc, #16]	; (802aa84 <HAL_IncTick+0x24>)
 802aa72:	6013      	str	r3, [r2, #0]
}
 802aa74:	bf00      	nop
 802aa76:	46bd      	mov	sp, r7
 802aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa7c:	4770      	bx	lr
 802aa7e:	bf00      	nop
 802aa80:	24000010 	.word	0x24000010
 802aa84:	24024bc4 	.word	0x24024bc4

0802aa88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802aa88:	b480      	push	{r7}
 802aa8a:	af00      	add	r7, sp, #0
  return uwTick;
 802aa8c:	4b03      	ldr	r3, [pc, #12]	; (802aa9c <HAL_GetTick+0x14>)
 802aa8e:	681b      	ldr	r3, [r3, #0]
}
 802aa90:	4618      	mov	r0, r3
 802aa92:	46bd      	mov	sp, r7
 802aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa98:	4770      	bx	lr
 802aa9a:	bf00      	nop
 802aa9c:	24024bc4 	.word	0x24024bc4

0802aaa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802aaa0:	b580      	push	{r7, lr}
 802aaa2:	b084      	sub	sp, #16
 802aaa4:	af00      	add	r7, sp, #0
 802aaa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802aaa8:	f7ff ffee 	bl	802aa88 <HAL_GetTick>
 802aaac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802aaae:	687b      	ldr	r3, [r7, #4]
 802aab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802aab2:	68fb      	ldr	r3, [r7, #12]
 802aab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802aab8:	d005      	beq.n	802aac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802aaba:	4b0a      	ldr	r3, [pc, #40]	; (802aae4 <HAL_Delay+0x44>)
 802aabc:	781b      	ldrb	r3, [r3, #0]
 802aabe:	461a      	mov	r2, r3
 802aac0:	68fb      	ldr	r3, [r7, #12]
 802aac2:	4413      	add	r3, r2
 802aac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802aac6:	bf00      	nop
 802aac8:	f7ff ffde 	bl	802aa88 <HAL_GetTick>
 802aacc:	4602      	mov	r2, r0
 802aace:	68bb      	ldr	r3, [r7, #8]
 802aad0:	1ad3      	subs	r3, r2, r3
 802aad2:	68fa      	ldr	r2, [r7, #12]
 802aad4:	429a      	cmp	r2, r3
 802aad6:	d8f7      	bhi.n	802aac8 <HAL_Delay+0x28>
  {
  }
}
 802aad8:	bf00      	nop
 802aada:	bf00      	nop
 802aadc:	3710      	adds	r7, #16
 802aade:	46bd      	mov	sp, r7
 802aae0:	bd80      	pop	{r7, pc}
 802aae2:	bf00      	nop
 802aae4:	24000010 	.word	0x24000010

0802aae8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 802aae8:	b480      	push	{r7}
 802aaea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 802aaec:	4b03      	ldr	r3, [pc, #12]	; (802aafc <HAL_GetREVID+0x14>)
 802aaee:	681b      	ldr	r3, [r3, #0]
 802aaf0:	0c1b      	lsrs	r3, r3, #16
}
 802aaf2:	4618      	mov	r0, r3
 802aaf4:	46bd      	mov	sp, r7
 802aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aafa:	4770      	bx	lr
 802aafc:	5c001000 	.word	0x5c001000

0802ab00 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 802ab00:	b580      	push	{r7, lr}
 802ab02:	b088      	sub	sp, #32
 802ab04:	af00      	add	r7, sp, #0
 802ab06:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 802ab08:	2300      	movs	r3, #0
 802ab0a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 802ab0c:	2300      	movs	r3, #0
 802ab0e:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802ab10:	687b      	ldr	r3, [r7, #4]
 802ab12:	2b00      	cmp	r3, #0
 802ab14:	d102      	bne.n	802ab1c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 802ab16:	2301      	movs	r3, #1
 802ab18:	77fb      	strb	r3, [r7, #31]
 802ab1a:	e10e      	b.n	802ad3a <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802ab1c:	687b      	ldr	r3, [r7, #4]
 802ab1e:	681b      	ldr	r3, [r3, #0]
 802ab20:	681b      	ldr	r3, [r3, #0]
 802ab22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ab26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ab2a:	d102      	bne.n	802ab32 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 802ab2c:	2301      	movs	r3, #1
 802ab2e:	77fb      	strb	r3, [r7, #31]
 802ab30:	e103      	b.n	802ad3a <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 802ab32:	687b      	ldr	r3, [r7, #4]
 802ab34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802ab38:	b2db      	uxtb	r3, r3
 802ab3a:	2b00      	cmp	r3, #0
 802ab3c:	d109      	bne.n	802ab52 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 802ab3e:	687b      	ldr	r3, [r7, #4]
 802ab40:	2200      	movs	r2, #0
 802ab42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 802ab46:	687b      	ldr	r3, [r7, #4]
 802ab48:	2200      	movs	r2, #0
 802ab4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 802ab4c:	6878      	ldr	r0, [r7, #4]
 802ab4e:	f7fe fac3 	bl	80290d8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 802ab52:	687b      	ldr	r3, [r7, #4]
 802ab54:	681b      	ldr	r3, [r3, #0]
 802ab56:	681b      	ldr	r3, [r3, #0]
 802ab58:	f003 0304 	and.w	r3, r3, #4
 802ab5c:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ab5e:	687b      	ldr	r3, [r7, #4]
 802ab60:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 802ab62:	687b      	ldr	r3, [r7, #4]
 802ab64:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ab66:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 802ab68:	687b      	ldr	r3, [r7, #4]
 802ab6a:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 802ab6c:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 802ab6e:	687b      	ldr	r3, [r7, #4]
 802ab70:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 802ab72:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 802ab74:	687b      	ldr	r3, [r7, #4]
 802ab76:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 802ab78:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 802ab7a:	687b      	ldr	r3, [r7, #4]
 802ab7c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ab7e:	4313      	orrs	r3, r2
 802ab80:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 802ab82:	687b      	ldr	r3, [r7, #4]
 802ab84:	681b      	ldr	r3, [r3, #0]
 802ab86:	681a      	ldr	r2, [r3, #0]
 802ab88:	4b6e      	ldr	r3, [pc, #440]	; (802ad44 <HAL_COMP_Init+0x244>)
 802ab8a:	4013      	ands	r3, r2
 802ab8c:	687a      	ldr	r2, [r7, #4]
 802ab8e:	6812      	ldr	r2, [r2, #0]
 802ab90:	6979      	ldr	r1, [r7, #20]
 802ab92:	430b      	orrs	r3, r1
 802ab94:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 802ab96:	687b      	ldr	r3, [r7, #4]
 802ab98:	685b      	ldr	r3, [r3, #4]
 802ab9a:	2b10      	cmp	r3, #16
 802ab9c:	d108      	bne.n	802abb0 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802ab9e:	687b      	ldr	r3, [r7, #4]
 802aba0:	681b      	ldr	r3, [r3, #0]
 802aba2:	681a      	ldr	r2, [r3, #0]
 802aba4:	687b      	ldr	r3, [r7, #4]
 802aba6:	681b      	ldr	r3, [r3, #0]
 802aba8:	f042 0210 	orr.w	r2, r2, #16
 802abac:	601a      	str	r2, [r3, #0]
 802abae:	e007      	b.n	802abc0 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802abb0:	687b      	ldr	r3, [r7, #4]
 802abb2:	681b      	ldr	r3, [r3, #0]
 802abb4:	681a      	ldr	r2, [r3, #0]
 802abb6:	687b      	ldr	r3, [r7, #4]
 802abb8:	681b      	ldr	r3, [r3, #0]
 802abba:	f022 0210 	bic.w	r2, r2, #16
 802abbe:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 802abc0:	687b      	ldr	r3, [r7, #4]
 802abc2:	681b      	ldr	r3, [r3, #0]
 802abc4:	681b      	ldr	r3, [r3, #0]
 802abc6:	f003 0304 	and.w	r3, r3, #4
 802abca:	2b00      	cmp	r3, #0
 802abcc:	d016      	beq.n	802abfc <HAL_COMP_Init+0xfc>
 802abce:	69bb      	ldr	r3, [r7, #24]
 802abd0:	2b00      	cmp	r3, #0
 802abd2:	d013      	beq.n	802abfc <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802abd4:	4b5c      	ldr	r3, [pc, #368]	; (802ad48 <HAL_COMP_Init+0x248>)
 802abd6:	681b      	ldr	r3, [r3, #0]
 802abd8:	099b      	lsrs	r3, r3, #6
 802abda:	4a5c      	ldr	r2, [pc, #368]	; (802ad4c <HAL_COMP_Init+0x24c>)
 802abdc:	fba2 2303 	umull	r2, r3, r2, r3
 802abe0:	099b      	lsrs	r3, r3, #6
 802abe2:	1c5a      	adds	r2, r3, #1
 802abe4:	4613      	mov	r3, r2
 802abe6:	009b      	lsls	r3, r3, #2
 802abe8:	4413      	add	r3, r2
 802abea:	009b      	lsls	r3, r3, #2
 802abec:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 802abee:	e002      	b.n	802abf6 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 802abf0:	68fb      	ldr	r3, [r7, #12]
 802abf2:	3b01      	subs	r3, #1
 802abf4:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 802abf6:	68fb      	ldr	r3, [r7, #12]
 802abf8:	2b00      	cmp	r3, #0
 802abfa:	d1f9      	bne.n	802abf0 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802abfc:	687b      	ldr	r3, [r7, #4]
 802abfe:	681b      	ldr	r3, [r3, #0]
 802ac00:	4a53      	ldr	r2, [pc, #332]	; (802ad50 <HAL_COMP_Init+0x250>)
 802ac02:	4293      	cmp	r3, r2
 802ac04:	d102      	bne.n	802ac0c <HAL_COMP_Init+0x10c>
 802ac06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802ac0a:	e001      	b.n	802ac10 <HAL_COMP_Init+0x110>
 802ac0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802ac10:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 802ac12:	687b      	ldr	r3, [r7, #4]
 802ac14:	6a1b      	ldr	r3, [r3, #32]
 802ac16:	f003 0303 	and.w	r3, r3, #3
 802ac1a:	2b00      	cmp	r3, #0
 802ac1c:	d06d      	beq.n	802acfa <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 802ac1e:	687b      	ldr	r3, [r7, #4]
 802ac20:	6a1b      	ldr	r3, [r3, #32]
 802ac22:	f003 0310 	and.w	r3, r3, #16
 802ac26:	2b00      	cmp	r3, #0
 802ac28:	d008      	beq.n	802ac3c <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 802ac2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ac2e:	681a      	ldr	r2, [r3, #0]
 802ac30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ac34:	693b      	ldr	r3, [r7, #16]
 802ac36:	4313      	orrs	r3, r2
 802ac38:	600b      	str	r3, [r1, #0]
 802ac3a:	e008      	b.n	802ac4e <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 802ac3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ac40:	681a      	ldr	r2, [r3, #0]
 802ac42:	693b      	ldr	r3, [r7, #16]
 802ac44:	43db      	mvns	r3, r3
 802ac46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ac4a:	4013      	ands	r3, r2
 802ac4c:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 802ac4e:	687b      	ldr	r3, [r7, #4]
 802ac50:	6a1b      	ldr	r3, [r3, #32]
 802ac52:	f003 0320 	and.w	r3, r3, #32
 802ac56:	2b00      	cmp	r3, #0
 802ac58:	d008      	beq.n	802ac6c <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 802ac5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ac5e:	685a      	ldr	r2, [r3, #4]
 802ac60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ac64:	693b      	ldr	r3, [r7, #16]
 802ac66:	4313      	orrs	r3, r2
 802ac68:	604b      	str	r3, [r1, #4]
 802ac6a:	e008      	b.n	802ac7e <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 802ac6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ac70:	685a      	ldr	r2, [r3, #4]
 802ac72:	693b      	ldr	r3, [r7, #16]
 802ac74:	43db      	mvns	r3, r3
 802ac76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ac7a:	4013      	ands	r3, r2
 802ac7c:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 802ac7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802ac82:	693b      	ldr	r3, [r7, #16]
 802ac84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 802ac88:	687b      	ldr	r3, [r7, #4]
 802ac8a:	6a1b      	ldr	r3, [r3, #32]
 802ac8c:	f003 0302 	and.w	r3, r3, #2
 802ac90:	2b00      	cmp	r3, #0
 802ac92:	d00a      	beq.n	802acaa <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 802ac94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ac98:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802ac9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802aca0:	693b      	ldr	r3, [r7, #16]
 802aca2:	4313      	orrs	r3, r2
 802aca4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802aca8:	e00a      	b.n	802acc0 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 802acaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802acae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802acb2:	693b      	ldr	r3, [r7, #16]
 802acb4:	43db      	mvns	r3, r3
 802acb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802acba:	4013      	ands	r3, r2
 802acbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 802acc0:	687b      	ldr	r3, [r7, #4]
 802acc2:	6a1b      	ldr	r3, [r3, #32]
 802acc4:	f003 0301 	and.w	r3, r3, #1
 802acc8:	2b00      	cmp	r3, #0
 802acca:	d00a      	beq.n	802ace2 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 802accc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802acd0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802acd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802acd8:	693b      	ldr	r3, [r7, #16]
 802acda:	4313      	orrs	r3, r2
 802acdc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802ace0:	e021      	b.n	802ad26 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 802ace2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ace6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802acea:	693b      	ldr	r3, [r7, #16]
 802acec:	43db      	mvns	r3, r3
 802acee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802acf2:	4013      	ands	r3, r2
 802acf4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802acf8:	e015      	b.n	802ad26 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 802acfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802acfe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802ad02:	693b      	ldr	r3, [r7, #16]
 802ad04:	43db      	mvns	r3, r3
 802ad06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ad0a:	4013      	ands	r3, r2
 802ad0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 802ad10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ad14:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802ad18:	693b      	ldr	r3, [r7, #16]
 802ad1a:	43db      	mvns	r3, r3
 802ad1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ad20:	4013      	ands	r3, r2
 802ad22:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 802ad26:	687b      	ldr	r3, [r7, #4]
 802ad28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802ad2c:	b2db      	uxtb	r3, r3
 802ad2e:	2b00      	cmp	r3, #0
 802ad30:	d103      	bne.n	802ad3a <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 802ad32:	687b      	ldr	r3, [r7, #4]
 802ad34:	2201      	movs	r2, #1
 802ad36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 802ad3a:	7ffb      	ldrb	r3, [r7, #31]
}
 802ad3c:	4618      	mov	r0, r3
 802ad3e:	3720      	adds	r7, #32
 802ad40:	46bd      	mov	sp, r7
 802ad42:	bd80      	pop	{r7, pc}
 802ad44:	f0e8cce1 	.word	0xf0e8cce1
 802ad48:	24000004 	.word	0x24000004
 802ad4c:	053e2d63 	.word	0x053e2d63
 802ad50:	5800380c 	.word	0x5800380c

0802ad54 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 802ad54:	b480      	push	{r7}
 802ad56:	b085      	sub	sp, #20
 802ad58:	af00      	add	r7, sp, #0
 802ad5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 802ad5c:	2300      	movs	r3, #0
 802ad5e:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 802ad60:	2300      	movs	r3, #0
 802ad62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802ad64:	687b      	ldr	r3, [r7, #4]
 802ad66:	2b00      	cmp	r3, #0
 802ad68:	d102      	bne.n	802ad70 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 802ad6a:	2301      	movs	r3, #1
 802ad6c:	73fb      	strb	r3, [r7, #15]
 802ad6e:	e030      	b.n	802add2 <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802ad70:	687b      	ldr	r3, [r7, #4]
 802ad72:	681b      	ldr	r3, [r3, #0]
 802ad74:	681b      	ldr	r3, [r3, #0]
 802ad76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ad7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ad7e:	d102      	bne.n	802ad86 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 802ad80:	2301      	movs	r3, #1
 802ad82:	73fb      	strb	r3, [r7, #15]
 802ad84:	e025      	b.n	802add2 <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 802ad86:	687b      	ldr	r3, [r7, #4]
 802ad88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802ad8c:	b2db      	uxtb	r3, r3
 802ad8e:	2b01      	cmp	r3, #1
 802ad90:	d11d      	bne.n	802adce <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 802ad92:	687b      	ldr	r3, [r7, #4]
 802ad94:	681b      	ldr	r3, [r3, #0]
 802ad96:	681a      	ldr	r2, [r3, #0]
 802ad98:	687b      	ldr	r3, [r7, #4]
 802ad9a:	681b      	ldr	r3, [r3, #0]
 802ad9c:	f042 0201 	orr.w	r2, r2, #1
 802ada0:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 802ada2:	687b      	ldr	r3, [r7, #4]
 802ada4:	2202      	movs	r2, #2
 802ada6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802adaa:	4b0d      	ldr	r3, [pc, #52]	; (802ade0 <HAL_COMP_Start+0x8c>)
 802adac:	681b      	ldr	r3, [r3, #0]
 802adae:	099b      	lsrs	r3, r3, #6
 802adb0:	4a0c      	ldr	r2, [pc, #48]	; (802ade4 <HAL_COMP_Start+0x90>)
 802adb2:	fba2 2303 	umull	r2, r3, r2, r3
 802adb6:	099b      	lsrs	r3, r3, #6
 802adb8:	3301      	adds	r3, #1
 802adba:	00db      	lsls	r3, r3, #3
 802adbc:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802adbe:	e002      	b.n	802adc6 <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 802adc0:	68bb      	ldr	r3, [r7, #8]
 802adc2:	3b01      	subs	r3, #1
 802adc4:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802adc6:	68bb      	ldr	r3, [r7, #8]
 802adc8:	2b00      	cmp	r3, #0
 802adca:	d1f9      	bne.n	802adc0 <HAL_COMP_Start+0x6c>
 802adcc:	e001      	b.n	802add2 <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 802adce:	2301      	movs	r3, #1
 802add0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802add2:	7bfb      	ldrb	r3, [r7, #15]
}
 802add4:	4618      	mov	r0, r3
 802add6:	3714      	adds	r7, #20
 802add8:	46bd      	mov	sp, r7
 802adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 802adde:	4770      	bx	lr
 802ade0:	24000004 	.word	0x24000004
 802ade4:	053e2d63 	.word	0x053e2d63

0802ade8 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 802ade8:	b580      	push	{r7, lr}
 802adea:	b084      	sub	sp, #16
 802adec:	af00      	add	r7, sp, #0
 802adee:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802adf0:	687b      	ldr	r3, [r7, #4]
 802adf2:	681b      	ldr	r3, [r3, #0]
 802adf4:	4a33      	ldr	r2, [pc, #204]	; (802aec4 <HAL_COMP_IRQHandler+0xdc>)
 802adf6:	4293      	cmp	r3, r2
 802adf8:	d102      	bne.n	802ae00 <HAL_COMP_IRQHandler+0x18>
 802adfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802adfe:	e001      	b.n	802ae04 <HAL_COMP_IRQHandler+0x1c>
 802ae00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802ae04:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 802ae06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802ae0e:	68fb      	ldr	r3, [r7, #12]
 802ae10:	4013      	ands	r3, r2
 802ae12:	2b00      	cmp	r3, #0
 802ae14:	d014      	beq.n	802ae40 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 802ae16:	4b2c      	ldr	r3, [pc, #176]	; (802aec8 <HAL_COMP_IRQHandler+0xe0>)
 802ae18:	681b      	ldr	r3, [r3, #0]
 802ae1a:	f003 0310 	and.w	r3, r3, #16
 802ae1e:	2b00      	cmp	r3, #0
 802ae20:	d006      	beq.n	802ae30 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 802ae22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae26:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 802ae2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 802ae2e:	e004      	b.n	802ae3a <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 802ae30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802ae34:	68fb      	ldr	r3, [r7, #12]
 802ae36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802ae3a:	6878      	ldr	r0, [r7, #4]
 802ae3c:	f7fe fcfc 	bl	8029838 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 802ae40:	687b      	ldr	r3, [r7, #4]
 802ae42:	681b      	ldr	r3, [r3, #0]
 802ae44:	681b      	ldr	r3, [r3, #0]
 802ae46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ae4a:	2b40      	cmp	r3, #64	; 0x40
 802ae4c:	d136      	bne.n	802aebc <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 802ae4e:	4b1f      	ldr	r3, [pc, #124]	; (802aecc <HAL_COMP_IRQHandler+0xe4>)
 802ae50:	681b      	ldr	r3, [r3, #0]
 802ae52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802ae56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802ae5a:	d101      	bne.n	802ae60 <HAL_COMP_IRQHandler+0x78>
 802ae5c:	2301      	movs	r3, #1
 802ae5e:	e000      	b.n	802ae62 <HAL_COMP_IRQHandler+0x7a>
 802ae60:	2300      	movs	r3, #0
 802ae62:	2b00      	cmp	r3, #0
 802ae64:	d00b      	beq.n	802ae7e <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 802ae66:	4b19      	ldr	r3, [pc, #100]	; (802aecc <HAL_COMP_IRQHandler+0xe4>)
 802ae68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802ae6c:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802ae6e:	687b      	ldr	r3, [r7, #4]
 802ae70:	681b      	ldr	r3, [r3, #0]
 802ae72:	681a      	ldr	r2, [r3, #0]
 802ae74:	687b      	ldr	r3, [r7, #4]
 802ae76:	681b      	ldr	r3, [r3, #0]
 802ae78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802ae7c:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 802ae7e:	4b13      	ldr	r3, [pc, #76]	; (802aecc <HAL_COMP_IRQHandler+0xe4>)
 802ae80:	681b      	ldr	r3, [r3, #0]
 802ae82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802ae86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802ae8a:	d101      	bne.n	802ae90 <HAL_COMP_IRQHandler+0xa8>
 802ae8c:	2301      	movs	r3, #1
 802ae8e:	e000      	b.n	802ae92 <HAL_COMP_IRQHandler+0xaa>
 802ae90:	2300      	movs	r3, #0
 802ae92:	2b00      	cmp	r3, #0
 802ae94:	d00b      	beq.n	802aeae <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 802ae96:	4b0d      	ldr	r3, [pc, #52]	; (802aecc <HAL_COMP_IRQHandler+0xe4>)
 802ae98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802ae9c:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802ae9e:	687b      	ldr	r3, [r7, #4]
 802aea0:	681b      	ldr	r3, [r3, #0]
 802aea2:	681a      	ldr	r2, [r3, #0]
 802aea4:	687b      	ldr	r3, [r7, #4]
 802aea6:	681b      	ldr	r3, [r3, #0]
 802aea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802aeac:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 802aeae:	687b      	ldr	r3, [r7, #4]
 802aeb0:	2201      	movs	r2, #1
 802aeb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802aeb6:	6878      	ldr	r0, [r7, #4]
 802aeb8:	f7fe fcbe 	bl	8029838 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 802aebc:	bf00      	nop
 802aebe:	3710      	adds	r7, #16
 802aec0:	46bd      	mov	sp, r7
 802aec2:	bd80      	pop	{r7, pc}
 802aec4:	5800380c 	.word	0x5800380c
 802aec8:	58003810 	.word	0x58003810
 802aecc:	58003800 	.word	0x58003800

0802aed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802aed0:	b480      	push	{r7}
 802aed2:	b085      	sub	sp, #20
 802aed4:	af00      	add	r7, sp, #0
 802aed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802aed8:	687b      	ldr	r3, [r7, #4]
 802aeda:	f003 0307 	and.w	r3, r3, #7
 802aede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802aee0:	4b0b      	ldr	r3, [pc, #44]	; (802af10 <__NVIC_SetPriorityGrouping+0x40>)
 802aee2:	68db      	ldr	r3, [r3, #12]
 802aee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802aee6:	68ba      	ldr	r2, [r7, #8]
 802aee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802aeec:	4013      	ands	r3, r2
 802aeee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802aef0:	68fb      	ldr	r3, [r7, #12]
 802aef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802aef4:	68bb      	ldr	r3, [r7, #8]
 802aef6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802aef8:	4b06      	ldr	r3, [pc, #24]	; (802af14 <__NVIC_SetPriorityGrouping+0x44>)
 802aefa:	4313      	orrs	r3, r2
 802aefc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802aefe:	4a04      	ldr	r2, [pc, #16]	; (802af10 <__NVIC_SetPriorityGrouping+0x40>)
 802af00:	68bb      	ldr	r3, [r7, #8]
 802af02:	60d3      	str	r3, [r2, #12]
}
 802af04:	bf00      	nop
 802af06:	3714      	adds	r7, #20
 802af08:	46bd      	mov	sp, r7
 802af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af0e:	4770      	bx	lr
 802af10:	e000ed00 	.word	0xe000ed00
 802af14:	05fa0000 	.word	0x05fa0000

0802af18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802af18:	b480      	push	{r7}
 802af1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802af1c:	4b04      	ldr	r3, [pc, #16]	; (802af30 <__NVIC_GetPriorityGrouping+0x18>)
 802af1e:	68db      	ldr	r3, [r3, #12]
 802af20:	0a1b      	lsrs	r3, r3, #8
 802af22:	f003 0307 	and.w	r3, r3, #7
}
 802af26:	4618      	mov	r0, r3
 802af28:	46bd      	mov	sp, r7
 802af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af2e:	4770      	bx	lr
 802af30:	e000ed00 	.word	0xe000ed00

0802af34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802af34:	b480      	push	{r7}
 802af36:	b083      	sub	sp, #12
 802af38:	af00      	add	r7, sp, #0
 802af3a:	4603      	mov	r3, r0
 802af3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802af3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802af42:	2b00      	cmp	r3, #0
 802af44:	db0b      	blt.n	802af5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802af46:	88fb      	ldrh	r3, [r7, #6]
 802af48:	f003 021f 	and.w	r2, r3, #31
 802af4c:	4907      	ldr	r1, [pc, #28]	; (802af6c <__NVIC_EnableIRQ+0x38>)
 802af4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802af52:	095b      	lsrs	r3, r3, #5
 802af54:	2001      	movs	r0, #1
 802af56:	fa00 f202 	lsl.w	r2, r0, r2
 802af5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802af5e:	bf00      	nop
 802af60:	370c      	adds	r7, #12
 802af62:	46bd      	mov	sp, r7
 802af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af68:	4770      	bx	lr
 802af6a:	bf00      	nop
 802af6c:	e000e100 	.word	0xe000e100

0802af70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802af70:	b480      	push	{r7}
 802af72:	b083      	sub	sp, #12
 802af74:	af00      	add	r7, sp, #0
 802af76:	4603      	mov	r3, r0
 802af78:	6039      	str	r1, [r7, #0]
 802af7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802af7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802af80:	2b00      	cmp	r3, #0
 802af82:	db0a      	blt.n	802af9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802af84:	683b      	ldr	r3, [r7, #0]
 802af86:	b2da      	uxtb	r2, r3
 802af88:	490c      	ldr	r1, [pc, #48]	; (802afbc <__NVIC_SetPriority+0x4c>)
 802af8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802af8e:	0112      	lsls	r2, r2, #4
 802af90:	b2d2      	uxtb	r2, r2
 802af92:	440b      	add	r3, r1
 802af94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802af98:	e00a      	b.n	802afb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802af9a:	683b      	ldr	r3, [r7, #0]
 802af9c:	b2da      	uxtb	r2, r3
 802af9e:	4908      	ldr	r1, [pc, #32]	; (802afc0 <__NVIC_SetPriority+0x50>)
 802afa0:	88fb      	ldrh	r3, [r7, #6]
 802afa2:	f003 030f 	and.w	r3, r3, #15
 802afa6:	3b04      	subs	r3, #4
 802afa8:	0112      	lsls	r2, r2, #4
 802afaa:	b2d2      	uxtb	r2, r2
 802afac:	440b      	add	r3, r1
 802afae:	761a      	strb	r2, [r3, #24]
}
 802afb0:	bf00      	nop
 802afb2:	370c      	adds	r7, #12
 802afb4:	46bd      	mov	sp, r7
 802afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802afba:	4770      	bx	lr
 802afbc:	e000e100 	.word	0xe000e100
 802afc0:	e000ed00 	.word	0xe000ed00

0802afc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802afc4:	b480      	push	{r7}
 802afc6:	b089      	sub	sp, #36	; 0x24
 802afc8:	af00      	add	r7, sp, #0
 802afca:	60f8      	str	r0, [r7, #12]
 802afcc:	60b9      	str	r1, [r7, #8]
 802afce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802afd0:	68fb      	ldr	r3, [r7, #12]
 802afd2:	f003 0307 	and.w	r3, r3, #7
 802afd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802afd8:	69fb      	ldr	r3, [r7, #28]
 802afda:	f1c3 0307 	rsb	r3, r3, #7
 802afde:	2b04      	cmp	r3, #4
 802afe0:	bf28      	it	cs
 802afe2:	2304      	movcs	r3, #4
 802afe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802afe6:	69fb      	ldr	r3, [r7, #28]
 802afe8:	3304      	adds	r3, #4
 802afea:	2b06      	cmp	r3, #6
 802afec:	d902      	bls.n	802aff4 <NVIC_EncodePriority+0x30>
 802afee:	69fb      	ldr	r3, [r7, #28]
 802aff0:	3b03      	subs	r3, #3
 802aff2:	e000      	b.n	802aff6 <NVIC_EncodePriority+0x32>
 802aff4:	2300      	movs	r3, #0
 802aff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802aff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802affc:	69bb      	ldr	r3, [r7, #24]
 802affe:	fa02 f303 	lsl.w	r3, r2, r3
 802b002:	43da      	mvns	r2, r3
 802b004:	68bb      	ldr	r3, [r7, #8]
 802b006:	401a      	ands	r2, r3
 802b008:	697b      	ldr	r3, [r7, #20]
 802b00a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802b00c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802b010:	697b      	ldr	r3, [r7, #20]
 802b012:	fa01 f303 	lsl.w	r3, r1, r3
 802b016:	43d9      	mvns	r1, r3
 802b018:	687b      	ldr	r3, [r7, #4]
 802b01a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802b01c:	4313      	orrs	r3, r2
         );
}
 802b01e:	4618      	mov	r0, r3
 802b020:	3724      	adds	r7, #36	; 0x24
 802b022:	46bd      	mov	sp, r7
 802b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b028:	4770      	bx	lr
	...

0802b02c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802b02c:	b580      	push	{r7, lr}
 802b02e:	b082      	sub	sp, #8
 802b030:	af00      	add	r7, sp, #0
 802b032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802b034:	687b      	ldr	r3, [r7, #4]
 802b036:	3b01      	subs	r3, #1
 802b038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802b03c:	d301      	bcc.n	802b042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802b03e:	2301      	movs	r3, #1
 802b040:	e00f      	b.n	802b062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802b042:	4a0a      	ldr	r2, [pc, #40]	; (802b06c <SysTick_Config+0x40>)
 802b044:	687b      	ldr	r3, [r7, #4]
 802b046:	3b01      	subs	r3, #1
 802b048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802b04a:	210f      	movs	r1, #15
 802b04c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b050:	f7ff ff8e 	bl	802af70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802b054:	4b05      	ldr	r3, [pc, #20]	; (802b06c <SysTick_Config+0x40>)
 802b056:	2200      	movs	r2, #0
 802b058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802b05a:	4b04      	ldr	r3, [pc, #16]	; (802b06c <SysTick_Config+0x40>)
 802b05c:	2207      	movs	r2, #7
 802b05e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802b060:	2300      	movs	r3, #0
}
 802b062:	4618      	mov	r0, r3
 802b064:	3708      	adds	r7, #8
 802b066:	46bd      	mov	sp, r7
 802b068:	bd80      	pop	{r7, pc}
 802b06a:	bf00      	nop
 802b06c:	e000e010 	.word	0xe000e010

0802b070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802b070:	b580      	push	{r7, lr}
 802b072:	b082      	sub	sp, #8
 802b074:	af00      	add	r7, sp, #0
 802b076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802b078:	6878      	ldr	r0, [r7, #4]
 802b07a:	f7ff ff29 	bl	802aed0 <__NVIC_SetPriorityGrouping>
}
 802b07e:	bf00      	nop
 802b080:	3708      	adds	r7, #8
 802b082:	46bd      	mov	sp, r7
 802b084:	bd80      	pop	{r7, pc}

0802b086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802b086:	b580      	push	{r7, lr}
 802b088:	b086      	sub	sp, #24
 802b08a:	af00      	add	r7, sp, #0
 802b08c:	4603      	mov	r3, r0
 802b08e:	60b9      	str	r1, [r7, #8]
 802b090:	607a      	str	r2, [r7, #4]
 802b092:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802b094:	f7ff ff40 	bl	802af18 <__NVIC_GetPriorityGrouping>
 802b098:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802b09a:	687a      	ldr	r2, [r7, #4]
 802b09c:	68b9      	ldr	r1, [r7, #8]
 802b09e:	6978      	ldr	r0, [r7, #20]
 802b0a0:	f7ff ff90 	bl	802afc4 <NVIC_EncodePriority>
 802b0a4:	4602      	mov	r2, r0
 802b0a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802b0aa:	4611      	mov	r1, r2
 802b0ac:	4618      	mov	r0, r3
 802b0ae:	f7ff ff5f 	bl	802af70 <__NVIC_SetPriority>
}
 802b0b2:	bf00      	nop
 802b0b4:	3718      	adds	r7, #24
 802b0b6:	46bd      	mov	sp, r7
 802b0b8:	bd80      	pop	{r7, pc}

0802b0ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802b0ba:	b580      	push	{r7, lr}
 802b0bc:	b082      	sub	sp, #8
 802b0be:	af00      	add	r7, sp, #0
 802b0c0:	4603      	mov	r3, r0
 802b0c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802b0c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b0c8:	4618      	mov	r0, r3
 802b0ca:	f7ff ff33 	bl	802af34 <__NVIC_EnableIRQ>
}
 802b0ce:	bf00      	nop
 802b0d0:	3708      	adds	r7, #8
 802b0d2:	46bd      	mov	sp, r7
 802b0d4:	bd80      	pop	{r7, pc}

0802b0d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802b0d6:	b580      	push	{r7, lr}
 802b0d8:	b082      	sub	sp, #8
 802b0da:	af00      	add	r7, sp, #0
 802b0dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802b0de:	6878      	ldr	r0, [r7, #4]
 802b0e0:	f7ff ffa4 	bl	802b02c <SysTick_Config>
 802b0e4:	4603      	mov	r3, r0
}
 802b0e6:	4618      	mov	r0, r3
 802b0e8:	3708      	adds	r7, #8
 802b0ea:	46bd      	mov	sp, r7
 802b0ec:	bd80      	pop	{r7, pc}

0802b0ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 802b0ee:	b580      	push	{r7, lr}
 802b0f0:	b082      	sub	sp, #8
 802b0f2:	af00      	add	r7, sp, #0
 802b0f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 802b0f6:	687b      	ldr	r3, [r7, #4]
 802b0f8:	2b00      	cmp	r3, #0
 802b0fa:	d101      	bne.n	802b100 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 802b0fc:	2301      	movs	r3, #1
 802b0fe:	e014      	b.n	802b12a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 802b100:	687b      	ldr	r3, [r7, #4]
 802b102:	791b      	ldrb	r3, [r3, #4]
 802b104:	b2db      	uxtb	r3, r3
 802b106:	2b00      	cmp	r3, #0
 802b108:	d105      	bne.n	802b116 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 802b10a:	687b      	ldr	r3, [r7, #4]
 802b10c:	2200      	movs	r2, #0
 802b10e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 802b110:	6878      	ldr	r0, [r7, #4]
 802b112:	f7fe f861 	bl	80291d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 802b116:	687b      	ldr	r3, [r7, #4]
 802b118:	2202      	movs	r2, #2
 802b11a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 802b11c:	687b      	ldr	r3, [r7, #4]
 802b11e:	2200      	movs	r2, #0
 802b120:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 802b122:	687b      	ldr	r3, [r7, #4]
 802b124:	2201      	movs	r2, #1
 802b126:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 802b128:	2300      	movs	r3, #0
}
 802b12a:	4618      	mov	r0, r3
 802b12c:	3708      	adds	r7, #8
 802b12e:	46bd      	mov	sp, r7
 802b130:	bd80      	pop	{r7, pc}

0802b132 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 802b132:	b480      	push	{r7}
 802b134:	b083      	sub	sp, #12
 802b136:	af00      	add	r7, sp, #0
 802b138:	6078      	str	r0, [r7, #4]
 802b13a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802b13c:	687b      	ldr	r3, [r7, #4]
 802b13e:	795b      	ldrb	r3, [r3, #5]
 802b140:	2b01      	cmp	r3, #1
 802b142:	d101      	bne.n	802b148 <HAL_DAC_Start+0x16>
 802b144:	2302      	movs	r3, #2
 802b146:	e040      	b.n	802b1ca <HAL_DAC_Start+0x98>
 802b148:	687b      	ldr	r3, [r7, #4]
 802b14a:	2201      	movs	r2, #1
 802b14c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802b14e:	687b      	ldr	r3, [r7, #4]
 802b150:	2202      	movs	r2, #2
 802b152:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 802b154:	687b      	ldr	r3, [r7, #4]
 802b156:	681b      	ldr	r3, [r3, #0]
 802b158:	6819      	ldr	r1, [r3, #0]
 802b15a:	683b      	ldr	r3, [r7, #0]
 802b15c:	f003 0310 	and.w	r3, r3, #16
 802b160:	2201      	movs	r2, #1
 802b162:	409a      	lsls	r2, r3
 802b164:	687b      	ldr	r3, [r7, #4]
 802b166:	681b      	ldr	r3, [r3, #0]
 802b168:	430a      	orrs	r2, r1
 802b16a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 802b16c:	683b      	ldr	r3, [r7, #0]
 802b16e:	2b00      	cmp	r3, #0
 802b170:	d10f      	bne.n	802b192 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 802b172:	687b      	ldr	r3, [r7, #4]
 802b174:	681b      	ldr	r3, [r3, #0]
 802b176:	681b      	ldr	r3, [r3, #0]
 802b178:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802b17c:	2b02      	cmp	r3, #2
 802b17e:	d11d      	bne.n	802b1bc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 802b180:	687b      	ldr	r3, [r7, #4]
 802b182:	681b      	ldr	r3, [r3, #0]
 802b184:	685a      	ldr	r2, [r3, #4]
 802b186:	687b      	ldr	r3, [r7, #4]
 802b188:	681b      	ldr	r3, [r3, #0]
 802b18a:	f042 0201 	orr.w	r2, r2, #1
 802b18e:	605a      	str	r2, [r3, #4]
 802b190:	e014      	b.n	802b1bc <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 802b192:	687b      	ldr	r3, [r7, #4]
 802b194:	681b      	ldr	r3, [r3, #0]
 802b196:	681b      	ldr	r3, [r3, #0]
 802b198:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 802b19c:	683b      	ldr	r3, [r7, #0]
 802b19e:	f003 0310 	and.w	r3, r3, #16
 802b1a2:	2102      	movs	r1, #2
 802b1a4:	fa01 f303 	lsl.w	r3, r1, r3
 802b1a8:	429a      	cmp	r2, r3
 802b1aa:	d107      	bne.n	802b1bc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 802b1ac:	687b      	ldr	r3, [r7, #4]
 802b1ae:	681b      	ldr	r3, [r3, #0]
 802b1b0:	685a      	ldr	r2, [r3, #4]
 802b1b2:	687b      	ldr	r3, [r7, #4]
 802b1b4:	681b      	ldr	r3, [r3, #0]
 802b1b6:	f042 0202 	orr.w	r2, r2, #2
 802b1ba:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802b1bc:	687b      	ldr	r3, [r7, #4]
 802b1be:	2201      	movs	r2, #1
 802b1c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802b1c2:	687b      	ldr	r3, [r7, #4]
 802b1c4:	2200      	movs	r2, #0
 802b1c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802b1c8:	2300      	movs	r3, #0
}
 802b1ca:	4618      	mov	r0, r3
 802b1cc:	370c      	adds	r7, #12
 802b1ce:	46bd      	mov	sp, r7
 802b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1d4:	4770      	bx	lr

0802b1d6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 802b1d6:	b480      	push	{r7}
 802b1d8:	b087      	sub	sp, #28
 802b1da:	af00      	add	r7, sp, #0
 802b1dc:	60f8      	str	r0, [r7, #12]
 802b1de:	60b9      	str	r1, [r7, #8]
 802b1e0:	607a      	str	r2, [r7, #4]
 802b1e2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 802b1e4:	2300      	movs	r3, #0
 802b1e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 802b1e8:	68fb      	ldr	r3, [r7, #12]
 802b1ea:	681b      	ldr	r3, [r3, #0]
 802b1ec:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 802b1ee:	68bb      	ldr	r3, [r7, #8]
 802b1f0:	2b00      	cmp	r3, #0
 802b1f2:	d105      	bne.n	802b200 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 802b1f4:	697a      	ldr	r2, [r7, #20]
 802b1f6:	687b      	ldr	r3, [r7, #4]
 802b1f8:	4413      	add	r3, r2
 802b1fa:	3308      	adds	r3, #8
 802b1fc:	617b      	str	r3, [r7, #20]
 802b1fe:	e004      	b.n	802b20a <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 802b200:	697a      	ldr	r2, [r7, #20]
 802b202:	687b      	ldr	r3, [r7, #4]
 802b204:	4413      	add	r3, r2
 802b206:	3314      	adds	r3, #20
 802b208:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 802b20a:	697b      	ldr	r3, [r7, #20]
 802b20c:	461a      	mov	r2, r3
 802b20e:	683b      	ldr	r3, [r7, #0]
 802b210:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 802b212:	2300      	movs	r3, #0
}
 802b214:	4618      	mov	r0, r3
 802b216:	371c      	adds	r7, #28
 802b218:	46bd      	mov	sp, r7
 802b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b21e:	4770      	bx	lr

0802b220 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 802b220:	b580      	push	{r7, lr}
 802b222:	b088      	sub	sp, #32
 802b224:	af00      	add	r7, sp, #0
 802b226:	60f8      	str	r0, [r7, #12]
 802b228:	60b9      	str	r1, [r7, #8]
 802b22a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802b22c:	68fb      	ldr	r3, [r7, #12]
 802b22e:	795b      	ldrb	r3, [r3, #5]
 802b230:	2b01      	cmp	r3, #1
 802b232:	d101      	bne.n	802b238 <HAL_DAC_ConfigChannel+0x18>
 802b234:	2302      	movs	r3, #2
 802b236:	e11d      	b.n	802b474 <HAL_DAC_ConfigChannel+0x254>
 802b238:	68fb      	ldr	r3, [r7, #12]
 802b23a:	2201      	movs	r2, #1
 802b23c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802b23e:	68fb      	ldr	r3, [r7, #12]
 802b240:	2202      	movs	r2, #2
 802b242:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 802b244:	68bb      	ldr	r3, [r7, #8]
 802b246:	681b      	ldr	r3, [r3, #0]
 802b248:	2b04      	cmp	r3, #4
 802b24a:	d174      	bne.n	802b336 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 802b24c:	f7ff fc1c 	bl	802aa88 <HAL_GetTick>
 802b250:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 802b252:	687b      	ldr	r3, [r7, #4]
 802b254:	2b00      	cmp	r3, #0
 802b256:	d134      	bne.n	802b2c2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802b258:	e011      	b.n	802b27e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802b25a:	f7ff fc15 	bl	802aa88 <HAL_GetTick>
 802b25e:	4602      	mov	r2, r0
 802b260:	69bb      	ldr	r3, [r7, #24]
 802b262:	1ad3      	subs	r3, r2, r3
 802b264:	2b01      	cmp	r3, #1
 802b266:	d90a      	bls.n	802b27e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802b268:	68fb      	ldr	r3, [r7, #12]
 802b26a:	691b      	ldr	r3, [r3, #16]
 802b26c:	f043 0208 	orr.w	r2, r3, #8
 802b270:	68fb      	ldr	r3, [r7, #12]
 802b272:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802b274:	68fb      	ldr	r3, [r7, #12]
 802b276:	2203      	movs	r2, #3
 802b278:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802b27a:	2303      	movs	r3, #3
 802b27c:	e0fa      	b.n	802b474 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802b27e:	68fb      	ldr	r3, [r7, #12]
 802b280:	681b      	ldr	r3, [r3, #0]
 802b282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802b284:	4b7d      	ldr	r3, [pc, #500]	; (802b47c <HAL_DAC_ConfigChannel+0x25c>)
 802b286:	4013      	ands	r3, r2
 802b288:	2b00      	cmp	r3, #0
 802b28a:	d1e6      	bne.n	802b25a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 802b28c:	2001      	movs	r0, #1
 802b28e:	f7ff fc07 	bl	802aaa0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802b292:	68fb      	ldr	r3, [r7, #12]
 802b294:	681b      	ldr	r3, [r3, #0]
 802b296:	68ba      	ldr	r2, [r7, #8]
 802b298:	6992      	ldr	r2, [r2, #24]
 802b29a:	641a      	str	r2, [r3, #64]	; 0x40
 802b29c:	e01e      	b.n	802b2dc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802b29e:	f7ff fbf3 	bl	802aa88 <HAL_GetTick>
 802b2a2:	4602      	mov	r2, r0
 802b2a4:	69bb      	ldr	r3, [r7, #24]
 802b2a6:	1ad3      	subs	r3, r2, r3
 802b2a8:	2b01      	cmp	r3, #1
 802b2aa:	d90a      	bls.n	802b2c2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802b2ac:	68fb      	ldr	r3, [r7, #12]
 802b2ae:	691b      	ldr	r3, [r3, #16]
 802b2b0:	f043 0208 	orr.w	r2, r3, #8
 802b2b4:	68fb      	ldr	r3, [r7, #12]
 802b2b6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802b2b8:	68fb      	ldr	r3, [r7, #12]
 802b2ba:	2203      	movs	r2, #3
 802b2bc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802b2be:	2303      	movs	r3, #3
 802b2c0:	e0d8      	b.n	802b474 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 802b2c2:	68fb      	ldr	r3, [r7, #12]
 802b2c4:	681b      	ldr	r3, [r3, #0]
 802b2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b2c8:	2b00      	cmp	r3, #0
 802b2ca:	dbe8      	blt.n	802b29e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 802b2cc:	2001      	movs	r0, #1
 802b2ce:	f7ff fbe7 	bl	802aaa0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802b2d2:	68fb      	ldr	r3, [r7, #12]
 802b2d4:	681b      	ldr	r3, [r3, #0]
 802b2d6:	68ba      	ldr	r2, [r7, #8]
 802b2d8:	6992      	ldr	r2, [r2, #24]
 802b2da:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 802b2dc:	68fb      	ldr	r3, [r7, #12]
 802b2de:	681b      	ldr	r3, [r3, #0]
 802b2e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802b2e2:	687b      	ldr	r3, [r7, #4]
 802b2e4:	f003 0310 	and.w	r3, r3, #16
 802b2e8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802b2ec:	fa01 f303 	lsl.w	r3, r1, r3
 802b2f0:	43db      	mvns	r3, r3
 802b2f2:	ea02 0103 	and.w	r1, r2, r3
 802b2f6:	68bb      	ldr	r3, [r7, #8]
 802b2f8:	69da      	ldr	r2, [r3, #28]
 802b2fa:	687b      	ldr	r3, [r7, #4]
 802b2fc:	f003 0310 	and.w	r3, r3, #16
 802b300:	409a      	lsls	r2, r3
 802b302:	68fb      	ldr	r3, [r7, #12]
 802b304:	681b      	ldr	r3, [r3, #0]
 802b306:	430a      	orrs	r2, r1
 802b308:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 802b30a:	68fb      	ldr	r3, [r7, #12]
 802b30c:	681b      	ldr	r3, [r3, #0]
 802b30e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802b310:	687b      	ldr	r3, [r7, #4]
 802b312:	f003 0310 	and.w	r3, r3, #16
 802b316:	21ff      	movs	r1, #255	; 0xff
 802b318:	fa01 f303 	lsl.w	r3, r1, r3
 802b31c:	43db      	mvns	r3, r3
 802b31e:	ea02 0103 	and.w	r1, r2, r3
 802b322:	68bb      	ldr	r3, [r7, #8]
 802b324:	6a1a      	ldr	r2, [r3, #32]
 802b326:	687b      	ldr	r3, [r7, #4]
 802b328:	f003 0310 	and.w	r3, r3, #16
 802b32c:	409a      	lsls	r2, r3
 802b32e:	68fb      	ldr	r3, [r7, #12]
 802b330:	681b      	ldr	r3, [r3, #0]
 802b332:	430a      	orrs	r2, r1
 802b334:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 802b336:	68bb      	ldr	r3, [r7, #8]
 802b338:	691b      	ldr	r3, [r3, #16]
 802b33a:	2b01      	cmp	r3, #1
 802b33c:	d11d      	bne.n	802b37a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 802b33e:	68fb      	ldr	r3, [r7, #12]
 802b340:	681b      	ldr	r3, [r3, #0]
 802b342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b344:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 802b346:	687b      	ldr	r3, [r7, #4]
 802b348:	f003 0310 	and.w	r3, r3, #16
 802b34c:	221f      	movs	r2, #31
 802b34e:	fa02 f303 	lsl.w	r3, r2, r3
 802b352:	43db      	mvns	r3, r3
 802b354:	697a      	ldr	r2, [r7, #20]
 802b356:	4013      	ands	r3, r2
 802b358:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 802b35a:	68bb      	ldr	r3, [r7, #8]
 802b35c:	695b      	ldr	r3, [r3, #20]
 802b35e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b360:	687b      	ldr	r3, [r7, #4]
 802b362:	f003 0310 	and.w	r3, r3, #16
 802b366:	693a      	ldr	r2, [r7, #16]
 802b368:	fa02 f303 	lsl.w	r3, r2, r3
 802b36c:	697a      	ldr	r2, [r7, #20]
 802b36e:	4313      	orrs	r3, r2
 802b370:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 802b372:	68fb      	ldr	r3, [r7, #12]
 802b374:	681b      	ldr	r3, [r3, #0]
 802b376:	697a      	ldr	r2, [r7, #20]
 802b378:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 802b37a:	68fb      	ldr	r3, [r7, #12]
 802b37c:	681b      	ldr	r3, [r3, #0]
 802b37e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b380:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 802b382:	687b      	ldr	r3, [r7, #4]
 802b384:	f003 0310 	and.w	r3, r3, #16
 802b388:	2207      	movs	r2, #7
 802b38a:	fa02 f303 	lsl.w	r3, r2, r3
 802b38e:	43db      	mvns	r3, r3
 802b390:	697a      	ldr	r2, [r7, #20]
 802b392:	4013      	ands	r3, r2
 802b394:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 802b396:	68bb      	ldr	r3, [r7, #8]
 802b398:	68db      	ldr	r3, [r3, #12]
 802b39a:	2b01      	cmp	r3, #1
 802b39c:	d102      	bne.n	802b3a4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 802b39e:	2300      	movs	r3, #0
 802b3a0:	61fb      	str	r3, [r7, #28]
 802b3a2:	e00f      	b.n	802b3c4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 802b3a4:	68bb      	ldr	r3, [r7, #8]
 802b3a6:	68db      	ldr	r3, [r3, #12]
 802b3a8:	2b02      	cmp	r3, #2
 802b3aa:	d102      	bne.n	802b3b2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 802b3ac:	2301      	movs	r3, #1
 802b3ae:	61fb      	str	r3, [r7, #28]
 802b3b0:	e008      	b.n	802b3c4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 802b3b2:	68bb      	ldr	r3, [r7, #8]
 802b3b4:	689b      	ldr	r3, [r3, #8]
 802b3b6:	2b00      	cmp	r3, #0
 802b3b8:	d102      	bne.n	802b3c0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 802b3ba:	2301      	movs	r3, #1
 802b3bc:	61fb      	str	r3, [r7, #28]
 802b3be:	e001      	b.n	802b3c4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 802b3c0:	2300      	movs	r3, #0
 802b3c2:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 802b3c4:	68bb      	ldr	r3, [r7, #8]
 802b3c6:	681a      	ldr	r2, [r3, #0]
 802b3c8:	68bb      	ldr	r3, [r7, #8]
 802b3ca:	689b      	ldr	r3, [r3, #8]
 802b3cc:	4313      	orrs	r3, r2
 802b3ce:	69fa      	ldr	r2, [r7, #28]
 802b3d0:	4313      	orrs	r3, r2
 802b3d2:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b3d4:	687b      	ldr	r3, [r7, #4]
 802b3d6:	f003 0310 	and.w	r3, r3, #16
 802b3da:	693a      	ldr	r2, [r7, #16]
 802b3dc:	fa02 f303 	lsl.w	r3, r2, r3
 802b3e0:	697a      	ldr	r2, [r7, #20]
 802b3e2:	4313      	orrs	r3, r2
 802b3e4:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 802b3e6:	68fb      	ldr	r3, [r7, #12]
 802b3e8:	681b      	ldr	r3, [r3, #0]
 802b3ea:	697a      	ldr	r2, [r7, #20]
 802b3ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 802b3ee:	68fb      	ldr	r3, [r7, #12]
 802b3f0:	681b      	ldr	r3, [r3, #0]
 802b3f2:	6819      	ldr	r1, [r3, #0]
 802b3f4:	687b      	ldr	r3, [r7, #4]
 802b3f6:	f003 0310 	and.w	r3, r3, #16
 802b3fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802b3fe:	fa02 f303 	lsl.w	r3, r2, r3
 802b402:	43da      	mvns	r2, r3
 802b404:	68fb      	ldr	r3, [r7, #12]
 802b406:	681b      	ldr	r3, [r3, #0]
 802b408:	400a      	ands	r2, r1
 802b40a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 802b40c:	68fb      	ldr	r3, [r7, #12]
 802b40e:	681b      	ldr	r3, [r3, #0]
 802b410:	681b      	ldr	r3, [r3, #0]
 802b412:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 802b414:	687b      	ldr	r3, [r7, #4]
 802b416:	f003 0310 	and.w	r3, r3, #16
 802b41a:	f640 72fe 	movw	r2, #4094	; 0xffe
 802b41e:	fa02 f303 	lsl.w	r3, r2, r3
 802b422:	43db      	mvns	r3, r3
 802b424:	697a      	ldr	r2, [r7, #20]
 802b426:	4013      	ands	r3, r2
 802b428:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 802b42a:	68bb      	ldr	r3, [r7, #8]
 802b42c:	685b      	ldr	r3, [r3, #4]
 802b42e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b430:	687b      	ldr	r3, [r7, #4]
 802b432:	f003 0310 	and.w	r3, r3, #16
 802b436:	693a      	ldr	r2, [r7, #16]
 802b438:	fa02 f303 	lsl.w	r3, r2, r3
 802b43c:	697a      	ldr	r2, [r7, #20]
 802b43e:	4313      	orrs	r3, r2
 802b440:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 802b442:	68fb      	ldr	r3, [r7, #12]
 802b444:	681b      	ldr	r3, [r3, #0]
 802b446:	697a      	ldr	r2, [r7, #20]
 802b448:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 802b44a:	68fb      	ldr	r3, [r7, #12]
 802b44c:	681b      	ldr	r3, [r3, #0]
 802b44e:	6819      	ldr	r1, [r3, #0]
 802b450:	687b      	ldr	r3, [r7, #4]
 802b452:	f003 0310 	and.w	r3, r3, #16
 802b456:	22c0      	movs	r2, #192	; 0xc0
 802b458:	fa02 f303 	lsl.w	r3, r2, r3
 802b45c:	43da      	mvns	r2, r3
 802b45e:	68fb      	ldr	r3, [r7, #12]
 802b460:	681b      	ldr	r3, [r3, #0]
 802b462:	400a      	ands	r2, r1
 802b464:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802b466:	68fb      	ldr	r3, [r7, #12]
 802b468:	2201      	movs	r2, #1
 802b46a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802b46c:	68fb      	ldr	r3, [r7, #12]
 802b46e:	2200      	movs	r2, #0
 802b470:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802b472:	2300      	movs	r3, #0
}
 802b474:	4618      	mov	r0, r3
 802b476:	3720      	adds	r7, #32
 802b478:	46bd      	mov	sp, r7
 802b47a:	bd80      	pop	{r7, pc}
 802b47c:	20008000 	.word	0x20008000

0802b480 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802b480:	b580      	push	{r7, lr}
 802b482:	b086      	sub	sp, #24
 802b484:	af00      	add	r7, sp, #0
 802b486:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 802b488:	f7ff fafe 	bl	802aa88 <HAL_GetTick>
 802b48c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802b48e:	687b      	ldr	r3, [r7, #4]
 802b490:	2b00      	cmp	r3, #0
 802b492:	d101      	bne.n	802b498 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 802b494:	2301      	movs	r3, #1
 802b496:	e316      	b.n	802bac6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802b498:	687b      	ldr	r3, [r7, #4]
 802b49a:	681b      	ldr	r3, [r3, #0]
 802b49c:	4a66      	ldr	r2, [pc, #408]	; (802b638 <HAL_DMA_Init+0x1b8>)
 802b49e:	4293      	cmp	r3, r2
 802b4a0:	d04a      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b4a2:	687b      	ldr	r3, [r7, #4]
 802b4a4:	681b      	ldr	r3, [r3, #0]
 802b4a6:	4a65      	ldr	r2, [pc, #404]	; (802b63c <HAL_DMA_Init+0x1bc>)
 802b4a8:	4293      	cmp	r3, r2
 802b4aa:	d045      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b4ac:	687b      	ldr	r3, [r7, #4]
 802b4ae:	681b      	ldr	r3, [r3, #0]
 802b4b0:	4a63      	ldr	r2, [pc, #396]	; (802b640 <HAL_DMA_Init+0x1c0>)
 802b4b2:	4293      	cmp	r3, r2
 802b4b4:	d040      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b4b6:	687b      	ldr	r3, [r7, #4]
 802b4b8:	681b      	ldr	r3, [r3, #0]
 802b4ba:	4a62      	ldr	r2, [pc, #392]	; (802b644 <HAL_DMA_Init+0x1c4>)
 802b4bc:	4293      	cmp	r3, r2
 802b4be:	d03b      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b4c0:	687b      	ldr	r3, [r7, #4]
 802b4c2:	681b      	ldr	r3, [r3, #0]
 802b4c4:	4a60      	ldr	r2, [pc, #384]	; (802b648 <HAL_DMA_Init+0x1c8>)
 802b4c6:	4293      	cmp	r3, r2
 802b4c8:	d036      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b4ca:	687b      	ldr	r3, [r7, #4]
 802b4cc:	681b      	ldr	r3, [r3, #0]
 802b4ce:	4a5f      	ldr	r2, [pc, #380]	; (802b64c <HAL_DMA_Init+0x1cc>)
 802b4d0:	4293      	cmp	r3, r2
 802b4d2:	d031      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b4d4:	687b      	ldr	r3, [r7, #4]
 802b4d6:	681b      	ldr	r3, [r3, #0]
 802b4d8:	4a5d      	ldr	r2, [pc, #372]	; (802b650 <HAL_DMA_Init+0x1d0>)
 802b4da:	4293      	cmp	r3, r2
 802b4dc:	d02c      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b4de:	687b      	ldr	r3, [r7, #4]
 802b4e0:	681b      	ldr	r3, [r3, #0]
 802b4e2:	4a5c      	ldr	r2, [pc, #368]	; (802b654 <HAL_DMA_Init+0x1d4>)
 802b4e4:	4293      	cmp	r3, r2
 802b4e6:	d027      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b4e8:	687b      	ldr	r3, [r7, #4]
 802b4ea:	681b      	ldr	r3, [r3, #0]
 802b4ec:	4a5a      	ldr	r2, [pc, #360]	; (802b658 <HAL_DMA_Init+0x1d8>)
 802b4ee:	4293      	cmp	r3, r2
 802b4f0:	d022      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b4f2:	687b      	ldr	r3, [r7, #4]
 802b4f4:	681b      	ldr	r3, [r3, #0]
 802b4f6:	4a59      	ldr	r2, [pc, #356]	; (802b65c <HAL_DMA_Init+0x1dc>)
 802b4f8:	4293      	cmp	r3, r2
 802b4fa:	d01d      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b4fc:	687b      	ldr	r3, [r7, #4]
 802b4fe:	681b      	ldr	r3, [r3, #0]
 802b500:	4a57      	ldr	r2, [pc, #348]	; (802b660 <HAL_DMA_Init+0x1e0>)
 802b502:	4293      	cmp	r3, r2
 802b504:	d018      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b506:	687b      	ldr	r3, [r7, #4]
 802b508:	681b      	ldr	r3, [r3, #0]
 802b50a:	4a56      	ldr	r2, [pc, #344]	; (802b664 <HAL_DMA_Init+0x1e4>)
 802b50c:	4293      	cmp	r3, r2
 802b50e:	d013      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b510:	687b      	ldr	r3, [r7, #4]
 802b512:	681b      	ldr	r3, [r3, #0]
 802b514:	4a54      	ldr	r2, [pc, #336]	; (802b668 <HAL_DMA_Init+0x1e8>)
 802b516:	4293      	cmp	r3, r2
 802b518:	d00e      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b51a:	687b      	ldr	r3, [r7, #4]
 802b51c:	681b      	ldr	r3, [r3, #0]
 802b51e:	4a53      	ldr	r2, [pc, #332]	; (802b66c <HAL_DMA_Init+0x1ec>)
 802b520:	4293      	cmp	r3, r2
 802b522:	d009      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b524:	687b      	ldr	r3, [r7, #4]
 802b526:	681b      	ldr	r3, [r3, #0]
 802b528:	4a51      	ldr	r2, [pc, #324]	; (802b670 <HAL_DMA_Init+0x1f0>)
 802b52a:	4293      	cmp	r3, r2
 802b52c:	d004      	beq.n	802b538 <HAL_DMA_Init+0xb8>
 802b52e:	687b      	ldr	r3, [r7, #4]
 802b530:	681b      	ldr	r3, [r3, #0]
 802b532:	4a50      	ldr	r2, [pc, #320]	; (802b674 <HAL_DMA_Init+0x1f4>)
 802b534:	4293      	cmp	r3, r2
 802b536:	d101      	bne.n	802b53c <HAL_DMA_Init+0xbc>
 802b538:	2301      	movs	r3, #1
 802b53a:	e000      	b.n	802b53e <HAL_DMA_Init+0xbe>
 802b53c:	2300      	movs	r3, #0
 802b53e:	2b00      	cmp	r3, #0
 802b540:	f000 813b 	beq.w	802b7ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802b544:	687b      	ldr	r3, [r7, #4]
 802b546:	2202      	movs	r2, #2
 802b548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802b54c:	687b      	ldr	r3, [r7, #4]
 802b54e:	2200      	movs	r2, #0
 802b550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802b554:	687b      	ldr	r3, [r7, #4]
 802b556:	681b      	ldr	r3, [r3, #0]
 802b558:	4a37      	ldr	r2, [pc, #220]	; (802b638 <HAL_DMA_Init+0x1b8>)
 802b55a:	4293      	cmp	r3, r2
 802b55c:	d04a      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b55e:	687b      	ldr	r3, [r7, #4]
 802b560:	681b      	ldr	r3, [r3, #0]
 802b562:	4a36      	ldr	r2, [pc, #216]	; (802b63c <HAL_DMA_Init+0x1bc>)
 802b564:	4293      	cmp	r3, r2
 802b566:	d045      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b568:	687b      	ldr	r3, [r7, #4]
 802b56a:	681b      	ldr	r3, [r3, #0]
 802b56c:	4a34      	ldr	r2, [pc, #208]	; (802b640 <HAL_DMA_Init+0x1c0>)
 802b56e:	4293      	cmp	r3, r2
 802b570:	d040      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b572:	687b      	ldr	r3, [r7, #4]
 802b574:	681b      	ldr	r3, [r3, #0]
 802b576:	4a33      	ldr	r2, [pc, #204]	; (802b644 <HAL_DMA_Init+0x1c4>)
 802b578:	4293      	cmp	r3, r2
 802b57a:	d03b      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b57c:	687b      	ldr	r3, [r7, #4]
 802b57e:	681b      	ldr	r3, [r3, #0]
 802b580:	4a31      	ldr	r2, [pc, #196]	; (802b648 <HAL_DMA_Init+0x1c8>)
 802b582:	4293      	cmp	r3, r2
 802b584:	d036      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b586:	687b      	ldr	r3, [r7, #4]
 802b588:	681b      	ldr	r3, [r3, #0]
 802b58a:	4a30      	ldr	r2, [pc, #192]	; (802b64c <HAL_DMA_Init+0x1cc>)
 802b58c:	4293      	cmp	r3, r2
 802b58e:	d031      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b590:	687b      	ldr	r3, [r7, #4]
 802b592:	681b      	ldr	r3, [r3, #0]
 802b594:	4a2e      	ldr	r2, [pc, #184]	; (802b650 <HAL_DMA_Init+0x1d0>)
 802b596:	4293      	cmp	r3, r2
 802b598:	d02c      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b59a:	687b      	ldr	r3, [r7, #4]
 802b59c:	681b      	ldr	r3, [r3, #0]
 802b59e:	4a2d      	ldr	r2, [pc, #180]	; (802b654 <HAL_DMA_Init+0x1d4>)
 802b5a0:	4293      	cmp	r3, r2
 802b5a2:	d027      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b5a4:	687b      	ldr	r3, [r7, #4]
 802b5a6:	681b      	ldr	r3, [r3, #0]
 802b5a8:	4a2b      	ldr	r2, [pc, #172]	; (802b658 <HAL_DMA_Init+0x1d8>)
 802b5aa:	4293      	cmp	r3, r2
 802b5ac:	d022      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b5ae:	687b      	ldr	r3, [r7, #4]
 802b5b0:	681b      	ldr	r3, [r3, #0]
 802b5b2:	4a2a      	ldr	r2, [pc, #168]	; (802b65c <HAL_DMA_Init+0x1dc>)
 802b5b4:	4293      	cmp	r3, r2
 802b5b6:	d01d      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b5b8:	687b      	ldr	r3, [r7, #4]
 802b5ba:	681b      	ldr	r3, [r3, #0]
 802b5bc:	4a28      	ldr	r2, [pc, #160]	; (802b660 <HAL_DMA_Init+0x1e0>)
 802b5be:	4293      	cmp	r3, r2
 802b5c0:	d018      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b5c2:	687b      	ldr	r3, [r7, #4]
 802b5c4:	681b      	ldr	r3, [r3, #0]
 802b5c6:	4a27      	ldr	r2, [pc, #156]	; (802b664 <HAL_DMA_Init+0x1e4>)
 802b5c8:	4293      	cmp	r3, r2
 802b5ca:	d013      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b5cc:	687b      	ldr	r3, [r7, #4]
 802b5ce:	681b      	ldr	r3, [r3, #0]
 802b5d0:	4a25      	ldr	r2, [pc, #148]	; (802b668 <HAL_DMA_Init+0x1e8>)
 802b5d2:	4293      	cmp	r3, r2
 802b5d4:	d00e      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b5d6:	687b      	ldr	r3, [r7, #4]
 802b5d8:	681b      	ldr	r3, [r3, #0]
 802b5da:	4a24      	ldr	r2, [pc, #144]	; (802b66c <HAL_DMA_Init+0x1ec>)
 802b5dc:	4293      	cmp	r3, r2
 802b5de:	d009      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b5e0:	687b      	ldr	r3, [r7, #4]
 802b5e2:	681b      	ldr	r3, [r3, #0]
 802b5e4:	4a22      	ldr	r2, [pc, #136]	; (802b670 <HAL_DMA_Init+0x1f0>)
 802b5e6:	4293      	cmp	r3, r2
 802b5e8:	d004      	beq.n	802b5f4 <HAL_DMA_Init+0x174>
 802b5ea:	687b      	ldr	r3, [r7, #4]
 802b5ec:	681b      	ldr	r3, [r3, #0]
 802b5ee:	4a21      	ldr	r2, [pc, #132]	; (802b674 <HAL_DMA_Init+0x1f4>)
 802b5f0:	4293      	cmp	r3, r2
 802b5f2:	d108      	bne.n	802b606 <HAL_DMA_Init+0x186>
 802b5f4:	687b      	ldr	r3, [r7, #4]
 802b5f6:	681b      	ldr	r3, [r3, #0]
 802b5f8:	681a      	ldr	r2, [r3, #0]
 802b5fa:	687b      	ldr	r3, [r7, #4]
 802b5fc:	681b      	ldr	r3, [r3, #0]
 802b5fe:	f022 0201 	bic.w	r2, r2, #1
 802b602:	601a      	str	r2, [r3, #0]
 802b604:	e007      	b.n	802b616 <HAL_DMA_Init+0x196>
 802b606:	687b      	ldr	r3, [r7, #4]
 802b608:	681b      	ldr	r3, [r3, #0]
 802b60a:	681a      	ldr	r2, [r3, #0]
 802b60c:	687b      	ldr	r3, [r7, #4]
 802b60e:	681b      	ldr	r3, [r3, #0]
 802b610:	f022 0201 	bic.w	r2, r2, #1
 802b614:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802b616:	e02f      	b.n	802b678 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802b618:	f7ff fa36 	bl	802aa88 <HAL_GetTick>
 802b61c:	4602      	mov	r2, r0
 802b61e:	693b      	ldr	r3, [r7, #16]
 802b620:	1ad3      	subs	r3, r2, r3
 802b622:	2b05      	cmp	r3, #5
 802b624:	d928      	bls.n	802b678 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802b626:	687b      	ldr	r3, [r7, #4]
 802b628:	2220      	movs	r2, #32
 802b62a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802b62c:	687b      	ldr	r3, [r7, #4]
 802b62e:	2203      	movs	r2, #3
 802b630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 802b634:	2301      	movs	r3, #1
 802b636:	e246      	b.n	802bac6 <HAL_DMA_Init+0x646>
 802b638:	40020010 	.word	0x40020010
 802b63c:	40020028 	.word	0x40020028
 802b640:	40020040 	.word	0x40020040
 802b644:	40020058 	.word	0x40020058
 802b648:	40020070 	.word	0x40020070
 802b64c:	40020088 	.word	0x40020088
 802b650:	400200a0 	.word	0x400200a0
 802b654:	400200b8 	.word	0x400200b8
 802b658:	40020410 	.word	0x40020410
 802b65c:	40020428 	.word	0x40020428
 802b660:	40020440 	.word	0x40020440
 802b664:	40020458 	.word	0x40020458
 802b668:	40020470 	.word	0x40020470
 802b66c:	40020488 	.word	0x40020488
 802b670:	400204a0 	.word	0x400204a0
 802b674:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802b678:	687b      	ldr	r3, [r7, #4]
 802b67a:	681b      	ldr	r3, [r3, #0]
 802b67c:	681b      	ldr	r3, [r3, #0]
 802b67e:	f003 0301 	and.w	r3, r3, #1
 802b682:	2b00      	cmp	r3, #0
 802b684:	d1c8      	bne.n	802b618 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 802b686:	687b      	ldr	r3, [r7, #4]
 802b688:	681b      	ldr	r3, [r3, #0]
 802b68a:	681b      	ldr	r3, [r3, #0]
 802b68c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802b68e:	697a      	ldr	r2, [r7, #20]
 802b690:	4b83      	ldr	r3, [pc, #524]	; (802b8a0 <HAL_DMA_Init+0x420>)
 802b692:	4013      	ands	r3, r2
 802b694:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 802b696:	687b      	ldr	r3, [r7, #4]
 802b698:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b69a:	687b      	ldr	r3, [r7, #4]
 802b69c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 802b69e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b6a0:	687b      	ldr	r3, [r7, #4]
 802b6a2:	691b      	ldr	r3, [r3, #16]
 802b6a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b6a6:	687b      	ldr	r3, [r7, #4]
 802b6a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b6aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b6ac:	687b      	ldr	r3, [r7, #4]
 802b6ae:	699b      	ldr	r3, [r3, #24]
 802b6b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802b6b2:	687b      	ldr	r3, [r7, #4]
 802b6b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b6b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802b6b8:	687b      	ldr	r3, [r7, #4]
 802b6ba:	6a1b      	ldr	r3, [r3, #32]
 802b6bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 802b6be:	697a      	ldr	r2, [r7, #20]
 802b6c0:	4313      	orrs	r3, r2
 802b6c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802b6c4:	687b      	ldr	r3, [r7, #4]
 802b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b6c8:	2b04      	cmp	r3, #4
 802b6ca:	d107      	bne.n	802b6dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802b6cc:	687b      	ldr	r3, [r7, #4]
 802b6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b6d0:	687b      	ldr	r3, [r7, #4]
 802b6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b6d4:	4313      	orrs	r3, r2
 802b6d6:	697a      	ldr	r2, [r7, #20]
 802b6d8:	4313      	orrs	r3, r2
 802b6da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 802b6dc:	4b71      	ldr	r3, [pc, #452]	; (802b8a4 <HAL_DMA_Init+0x424>)
 802b6de:	681a      	ldr	r2, [r3, #0]
 802b6e0:	4b71      	ldr	r3, [pc, #452]	; (802b8a8 <HAL_DMA_Init+0x428>)
 802b6e2:	4013      	ands	r3, r2
 802b6e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802b6e8:	d328      	bcc.n	802b73c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 802b6ea:	687b      	ldr	r3, [r7, #4]
 802b6ec:	685b      	ldr	r3, [r3, #4]
 802b6ee:	2b28      	cmp	r3, #40	; 0x28
 802b6f0:	d903      	bls.n	802b6fa <HAL_DMA_Init+0x27a>
 802b6f2:	687b      	ldr	r3, [r7, #4]
 802b6f4:	685b      	ldr	r3, [r3, #4]
 802b6f6:	2b2e      	cmp	r3, #46	; 0x2e
 802b6f8:	d917      	bls.n	802b72a <HAL_DMA_Init+0x2aa>
 802b6fa:	687b      	ldr	r3, [r7, #4]
 802b6fc:	685b      	ldr	r3, [r3, #4]
 802b6fe:	2b3e      	cmp	r3, #62	; 0x3e
 802b700:	d903      	bls.n	802b70a <HAL_DMA_Init+0x28a>
 802b702:	687b      	ldr	r3, [r7, #4]
 802b704:	685b      	ldr	r3, [r3, #4]
 802b706:	2b42      	cmp	r3, #66	; 0x42
 802b708:	d90f      	bls.n	802b72a <HAL_DMA_Init+0x2aa>
 802b70a:	687b      	ldr	r3, [r7, #4]
 802b70c:	685b      	ldr	r3, [r3, #4]
 802b70e:	2b46      	cmp	r3, #70	; 0x46
 802b710:	d903      	bls.n	802b71a <HAL_DMA_Init+0x29a>
 802b712:	687b      	ldr	r3, [r7, #4]
 802b714:	685b      	ldr	r3, [r3, #4]
 802b716:	2b48      	cmp	r3, #72	; 0x48
 802b718:	d907      	bls.n	802b72a <HAL_DMA_Init+0x2aa>
 802b71a:	687b      	ldr	r3, [r7, #4]
 802b71c:	685b      	ldr	r3, [r3, #4]
 802b71e:	2b4e      	cmp	r3, #78	; 0x4e
 802b720:	d905      	bls.n	802b72e <HAL_DMA_Init+0x2ae>
 802b722:	687b      	ldr	r3, [r7, #4]
 802b724:	685b      	ldr	r3, [r3, #4]
 802b726:	2b52      	cmp	r3, #82	; 0x52
 802b728:	d801      	bhi.n	802b72e <HAL_DMA_Init+0x2ae>
 802b72a:	2301      	movs	r3, #1
 802b72c:	e000      	b.n	802b730 <HAL_DMA_Init+0x2b0>
 802b72e:	2300      	movs	r3, #0
 802b730:	2b00      	cmp	r3, #0
 802b732:	d003      	beq.n	802b73c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 802b734:	697b      	ldr	r3, [r7, #20]
 802b736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802b73a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 802b73c:	687b      	ldr	r3, [r7, #4]
 802b73e:	681b      	ldr	r3, [r3, #0]
 802b740:	697a      	ldr	r2, [r7, #20]
 802b742:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 802b744:	687b      	ldr	r3, [r7, #4]
 802b746:	681b      	ldr	r3, [r3, #0]
 802b748:	695b      	ldr	r3, [r3, #20]
 802b74a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802b74c:	697b      	ldr	r3, [r7, #20]
 802b74e:	f023 0307 	bic.w	r3, r3, #7
 802b752:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 802b754:	687b      	ldr	r3, [r7, #4]
 802b756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b758:	697a      	ldr	r2, [r7, #20]
 802b75a:	4313      	orrs	r3, r2
 802b75c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802b75e:	687b      	ldr	r3, [r7, #4]
 802b760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b762:	2b04      	cmp	r3, #4
 802b764:	d117      	bne.n	802b796 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 802b766:	687b      	ldr	r3, [r7, #4]
 802b768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b76a:	697a      	ldr	r2, [r7, #20]
 802b76c:	4313      	orrs	r3, r2
 802b76e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802b770:	687b      	ldr	r3, [r7, #4]
 802b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b774:	2b00      	cmp	r3, #0
 802b776:	d00e      	beq.n	802b796 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802b778:	6878      	ldr	r0, [r7, #4]
 802b77a:	f002 fb4d 	bl	802de18 <DMA_CheckFifoParam>
 802b77e:	4603      	mov	r3, r0
 802b780:	2b00      	cmp	r3, #0
 802b782:	d008      	beq.n	802b796 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802b784:	687b      	ldr	r3, [r7, #4]
 802b786:	2240      	movs	r2, #64	; 0x40
 802b788:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802b78a:	687b      	ldr	r3, [r7, #4]
 802b78c:	2201      	movs	r2, #1
 802b78e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 802b792:	2301      	movs	r3, #1
 802b794:	e197      	b.n	802bac6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 802b796:	687b      	ldr	r3, [r7, #4]
 802b798:	681b      	ldr	r3, [r3, #0]
 802b79a:	697a      	ldr	r2, [r7, #20]
 802b79c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802b79e:	6878      	ldr	r0, [r7, #4]
 802b7a0:	f002 fa88 	bl	802dcb4 <DMA_CalcBaseAndBitshift>
 802b7a4:	4603      	mov	r3, r0
 802b7a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802b7a8:	687b      	ldr	r3, [r7, #4]
 802b7aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802b7ac:	f003 031f 	and.w	r3, r3, #31
 802b7b0:	223f      	movs	r2, #63	; 0x3f
 802b7b2:	409a      	lsls	r2, r3
 802b7b4:	68bb      	ldr	r3, [r7, #8]
 802b7b6:	609a      	str	r2, [r3, #8]
 802b7b8:	e0cd      	b.n	802b956 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802b7ba:	687b      	ldr	r3, [r7, #4]
 802b7bc:	681b      	ldr	r3, [r3, #0]
 802b7be:	4a3b      	ldr	r2, [pc, #236]	; (802b8ac <HAL_DMA_Init+0x42c>)
 802b7c0:	4293      	cmp	r3, r2
 802b7c2:	d022      	beq.n	802b80a <HAL_DMA_Init+0x38a>
 802b7c4:	687b      	ldr	r3, [r7, #4]
 802b7c6:	681b      	ldr	r3, [r3, #0]
 802b7c8:	4a39      	ldr	r2, [pc, #228]	; (802b8b0 <HAL_DMA_Init+0x430>)
 802b7ca:	4293      	cmp	r3, r2
 802b7cc:	d01d      	beq.n	802b80a <HAL_DMA_Init+0x38a>
 802b7ce:	687b      	ldr	r3, [r7, #4]
 802b7d0:	681b      	ldr	r3, [r3, #0]
 802b7d2:	4a38      	ldr	r2, [pc, #224]	; (802b8b4 <HAL_DMA_Init+0x434>)
 802b7d4:	4293      	cmp	r3, r2
 802b7d6:	d018      	beq.n	802b80a <HAL_DMA_Init+0x38a>
 802b7d8:	687b      	ldr	r3, [r7, #4]
 802b7da:	681b      	ldr	r3, [r3, #0]
 802b7dc:	4a36      	ldr	r2, [pc, #216]	; (802b8b8 <HAL_DMA_Init+0x438>)
 802b7de:	4293      	cmp	r3, r2
 802b7e0:	d013      	beq.n	802b80a <HAL_DMA_Init+0x38a>
 802b7e2:	687b      	ldr	r3, [r7, #4]
 802b7e4:	681b      	ldr	r3, [r3, #0]
 802b7e6:	4a35      	ldr	r2, [pc, #212]	; (802b8bc <HAL_DMA_Init+0x43c>)
 802b7e8:	4293      	cmp	r3, r2
 802b7ea:	d00e      	beq.n	802b80a <HAL_DMA_Init+0x38a>
 802b7ec:	687b      	ldr	r3, [r7, #4]
 802b7ee:	681b      	ldr	r3, [r3, #0]
 802b7f0:	4a33      	ldr	r2, [pc, #204]	; (802b8c0 <HAL_DMA_Init+0x440>)
 802b7f2:	4293      	cmp	r3, r2
 802b7f4:	d009      	beq.n	802b80a <HAL_DMA_Init+0x38a>
 802b7f6:	687b      	ldr	r3, [r7, #4]
 802b7f8:	681b      	ldr	r3, [r3, #0]
 802b7fa:	4a32      	ldr	r2, [pc, #200]	; (802b8c4 <HAL_DMA_Init+0x444>)
 802b7fc:	4293      	cmp	r3, r2
 802b7fe:	d004      	beq.n	802b80a <HAL_DMA_Init+0x38a>
 802b800:	687b      	ldr	r3, [r7, #4]
 802b802:	681b      	ldr	r3, [r3, #0]
 802b804:	4a30      	ldr	r2, [pc, #192]	; (802b8c8 <HAL_DMA_Init+0x448>)
 802b806:	4293      	cmp	r3, r2
 802b808:	d101      	bne.n	802b80e <HAL_DMA_Init+0x38e>
 802b80a:	2301      	movs	r3, #1
 802b80c:	e000      	b.n	802b810 <HAL_DMA_Init+0x390>
 802b80e:	2300      	movs	r3, #0
 802b810:	2b00      	cmp	r3, #0
 802b812:	f000 8097 	beq.w	802b944 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802b816:	687b      	ldr	r3, [r7, #4]
 802b818:	681b      	ldr	r3, [r3, #0]
 802b81a:	4a24      	ldr	r2, [pc, #144]	; (802b8ac <HAL_DMA_Init+0x42c>)
 802b81c:	4293      	cmp	r3, r2
 802b81e:	d021      	beq.n	802b864 <HAL_DMA_Init+0x3e4>
 802b820:	687b      	ldr	r3, [r7, #4]
 802b822:	681b      	ldr	r3, [r3, #0]
 802b824:	4a22      	ldr	r2, [pc, #136]	; (802b8b0 <HAL_DMA_Init+0x430>)
 802b826:	4293      	cmp	r3, r2
 802b828:	d01c      	beq.n	802b864 <HAL_DMA_Init+0x3e4>
 802b82a:	687b      	ldr	r3, [r7, #4]
 802b82c:	681b      	ldr	r3, [r3, #0]
 802b82e:	4a21      	ldr	r2, [pc, #132]	; (802b8b4 <HAL_DMA_Init+0x434>)
 802b830:	4293      	cmp	r3, r2
 802b832:	d017      	beq.n	802b864 <HAL_DMA_Init+0x3e4>
 802b834:	687b      	ldr	r3, [r7, #4]
 802b836:	681b      	ldr	r3, [r3, #0]
 802b838:	4a1f      	ldr	r2, [pc, #124]	; (802b8b8 <HAL_DMA_Init+0x438>)
 802b83a:	4293      	cmp	r3, r2
 802b83c:	d012      	beq.n	802b864 <HAL_DMA_Init+0x3e4>
 802b83e:	687b      	ldr	r3, [r7, #4]
 802b840:	681b      	ldr	r3, [r3, #0]
 802b842:	4a1e      	ldr	r2, [pc, #120]	; (802b8bc <HAL_DMA_Init+0x43c>)
 802b844:	4293      	cmp	r3, r2
 802b846:	d00d      	beq.n	802b864 <HAL_DMA_Init+0x3e4>
 802b848:	687b      	ldr	r3, [r7, #4]
 802b84a:	681b      	ldr	r3, [r3, #0]
 802b84c:	4a1c      	ldr	r2, [pc, #112]	; (802b8c0 <HAL_DMA_Init+0x440>)
 802b84e:	4293      	cmp	r3, r2
 802b850:	d008      	beq.n	802b864 <HAL_DMA_Init+0x3e4>
 802b852:	687b      	ldr	r3, [r7, #4]
 802b854:	681b      	ldr	r3, [r3, #0]
 802b856:	4a1b      	ldr	r2, [pc, #108]	; (802b8c4 <HAL_DMA_Init+0x444>)
 802b858:	4293      	cmp	r3, r2
 802b85a:	d003      	beq.n	802b864 <HAL_DMA_Init+0x3e4>
 802b85c:	687b      	ldr	r3, [r7, #4]
 802b85e:	681b      	ldr	r3, [r3, #0]
 802b860:	4a19      	ldr	r2, [pc, #100]	; (802b8c8 <HAL_DMA_Init+0x448>)
 802b862:	4293      	cmp	r3, r2
 802b864:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802b866:	687b      	ldr	r3, [r7, #4]
 802b868:	2202      	movs	r2, #2
 802b86a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802b86e:	687b      	ldr	r3, [r7, #4]
 802b870:	2200      	movs	r2, #0
 802b872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 802b876:	687b      	ldr	r3, [r7, #4]
 802b878:	681b      	ldr	r3, [r3, #0]
 802b87a:	681b      	ldr	r3, [r3, #0]
 802b87c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 802b87e:	697a      	ldr	r2, [r7, #20]
 802b880:	4b12      	ldr	r3, [pc, #72]	; (802b8cc <HAL_DMA_Init+0x44c>)
 802b882:	4013      	ands	r3, r2
 802b884:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802b886:	687b      	ldr	r3, [r7, #4]
 802b888:	689b      	ldr	r3, [r3, #8]
 802b88a:	2b40      	cmp	r3, #64	; 0x40
 802b88c:	d020      	beq.n	802b8d0 <HAL_DMA_Init+0x450>
 802b88e:	687b      	ldr	r3, [r7, #4]
 802b890:	689b      	ldr	r3, [r3, #8]
 802b892:	2b80      	cmp	r3, #128	; 0x80
 802b894:	d102      	bne.n	802b89c <HAL_DMA_Init+0x41c>
 802b896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802b89a:	e01a      	b.n	802b8d2 <HAL_DMA_Init+0x452>
 802b89c:	2300      	movs	r3, #0
 802b89e:	e018      	b.n	802b8d2 <HAL_DMA_Init+0x452>
 802b8a0:	fe10803f 	.word	0xfe10803f
 802b8a4:	5c001000 	.word	0x5c001000
 802b8a8:	ffff0000 	.word	0xffff0000
 802b8ac:	58025408 	.word	0x58025408
 802b8b0:	5802541c 	.word	0x5802541c
 802b8b4:	58025430 	.word	0x58025430
 802b8b8:	58025444 	.word	0x58025444
 802b8bc:	58025458 	.word	0x58025458
 802b8c0:	5802546c 	.word	0x5802546c
 802b8c4:	58025480 	.word	0x58025480
 802b8c8:	58025494 	.word	0x58025494
 802b8cc:	fffe000f 	.word	0xfffe000f
 802b8d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802b8d2:	687a      	ldr	r2, [r7, #4]
 802b8d4:	68d2      	ldr	r2, [r2, #12]
 802b8d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802b8d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802b8da:	687b      	ldr	r3, [r7, #4]
 802b8dc:	691b      	ldr	r3, [r3, #16]
 802b8de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802b8e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802b8e2:	687b      	ldr	r3, [r7, #4]
 802b8e4:	695b      	ldr	r3, [r3, #20]
 802b8e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802b8e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802b8ea:	687b      	ldr	r3, [r7, #4]
 802b8ec:	699b      	ldr	r3, [r3, #24]
 802b8ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802b8f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802b8f2:	687b      	ldr	r3, [r7, #4]
 802b8f4:	69db      	ldr	r3, [r3, #28]
 802b8f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802b8f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 802b8fa:	687b      	ldr	r3, [r7, #4]
 802b8fc:	6a1b      	ldr	r3, [r3, #32]
 802b8fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802b900:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802b902:	697a      	ldr	r2, [r7, #20]
 802b904:	4313      	orrs	r3, r2
 802b906:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 802b908:	687b      	ldr	r3, [r7, #4]
 802b90a:	681b      	ldr	r3, [r3, #0]
 802b90c:	697a      	ldr	r2, [r7, #20]
 802b90e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 802b910:	687b      	ldr	r3, [r7, #4]
 802b912:	681b      	ldr	r3, [r3, #0]
 802b914:	461a      	mov	r2, r3
 802b916:	4b6e      	ldr	r3, [pc, #440]	; (802bad0 <HAL_DMA_Init+0x650>)
 802b918:	4413      	add	r3, r2
 802b91a:	4a6e      	ldr	r2, [pc, #440]	; (802bad4 <HAL_DMA_Init+0x654>)
 802b91c:	fba2 2303 	umull	r2, r3, r2, r3
 802b920:	091b      	lsrs	r3, r3, #4
 802b922:	009a      	lsls	r2, r3, #2
 802b924:	687b      	ldr	r3, [r7, #4]
 802b926:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802b928:	6878      	ldr	r0, [r7, #4]
 802b92a:	f002 f9c3 	bl	802dcb4 <DMA_CalcBaseAndBitshift>
 802b92e:	4603      	mov	r3, r0
 802b930:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802b932:	687b      	ldr	r3, [r7, #4]
 802b934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802b936:	f003 031f 	and.w	r3, r3, #31
 802b93a:	2201      	movs	r2, #1
 802b93c:	409a      	lsls	r2, r3
 802b93e:	68fb      	ldr	r3, [r7, #12]
 802b940:	605a      	str	r2, [r3, #4]
 802b942:	e008      	b.n	802b956 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802b944:	687b      	ldr	r3, [r7, #4]
 802b946:	2240      	movs	r2, #64	; 0x40
 802b948:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 802b94a:	687b      	ldr	r3, [r7, #4]
 802b94c:	2203      	movs	r2, #3
 802b94e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 802b952:	2301      	movs	r3, #1
 802b954:	e0b7      	b.n	802bac6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802b956:	687b      	ldr	r3, [r7, #4]
 802b958:	681b      	ldr	r3, [r3, #0]
 802b95a:	4a5f      	ldr	r2, [pc, #380]	; (802bad8 <HAL_DMA_Init+0x658>)
 802b95c:	4293      	cmp	r3, r2
 802b95e:	d072      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b960:	687b      	ldr	r3, [r7, #4]
 802b962:	681b      	ldr	r3, [r3, #0]
 802b964:	4a5d      	ldr	r2, [pc, #372]	; (802badc <HAL_DMA_Init+0x65c>)
 802b966:	4293      	cmp	r3, r2
 802b968:	d06d      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b96a:	687b      	ldr	r3, [r7, #4]
 802b96c:	681b      	ldr	r3, [r3, #0]
 802b96e:	4a5c      	ldr	r2, [pc, #368]	; (802bae0 <HAL_DMA_Init+0x660>)
 802b970:	4293      	cmp	r3, r2
 802b972:	d068      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b974:	687b      	ldr	r3, [r7, #4]
 802b976:	681b      	ldr	r3, [r3, #0]
 802b978:	4a5a      	ldr	r2, [pc, #360]	; (802bae4 <HAL_DMA_Init+0x664>)
 802b97a:	4293      	cmp	r3, r2
 802b97c:	d063      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b97e:	687b      	ldr	r3, [r7, #4]
 802b980:	681b      	ldr	r3, [r3, #0]
 802b982:	4a59      	ldr	r2, [pc, #356]	; (802bae8 <HAL_DMA_Init+0x668>)
 802b984:	4293      	cmp	r3, r2
 802b986:	d05e      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b988:	687b      	ldr	r3, [r7, #4]
 802b98a:	681b      	ldr	r3, [r3, #0]
 802b98c:	4a57      	ldr	r2, [pc, #348]	; (802baec <HAL_DMA_Init+0x66c>)
 802b98e:	4293      	cmp	r3, r2
 802b990:	d059      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b992:	687b      	ldr	r3, [r7, #4]
 802b994:	681b      	ldr	r3, [r3, #0]
 802b996:	4a56      	ldr	r2, [pc, #344]	; (802baf0 <HAL_DMA_Init+0x670>)
 802b998:	4293      	cmp	r3, r2
 802b99a:	d054      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b99c:	687b      	ldr	r3, [r7, #4]
 802b99e:	681b      	ldr	r3, [r3, #0]
 802b9a0:	4a54      	ldr	r2, [pc, #336]	; (802baf4 <HAL_DMA_Init+0x674>)
 802b9a2:	4293      	cmp	r3, r2
 802b9a4:	d04f      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b9a6:	687b      	ldr	r3, [r7, #4]
 802b9a8:	681b      	ldr	r3, [r3, #0]
 802b9aa:	4a53      	ldr	r2, [pc, #332]	; (802baf8 <HAL_DMA_Init+0x678>)
 802b9ac:	4293      	cmp	r3, r2
 802b9ae:	d04a      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b9b0:	687b      	ldr	r3, [r7, #4]
 802b9b2:	681b      	ldr	r3, [r3, #0]
 802b9b4:	4a51      	ldr	r2, [pc, #324]	; (802bafc <HAL_DMA_Init+0x67c>)
 802b9b6:	4293      	cmp	r3, r2
 802b9b8:	d045      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b9ba:	687b      	ldr	r3, [r7, #4]
 802b9bc:	681b      	ldr	r3, [r3, #0]
 802b9be:	4a50      	ldr	r2, [pc, #320]	; (802bb00 <HAL_DMA_Init+0x680>)
 802b9c0:	4293      	cmp	r3, r2
 802b9c2:	d040      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b9c4:	687b      	ldr	r3, [r7, #4]
 802b9c6:	681b      	ldr	r3, [r3, #0]
 802b9c8:	4a4e      	ldr	r2, [pc, #312]	; (802bb04 <HAL_DMA_Init+0x684>)
 802b9ca:	4293      	cmp	r3, r2
 802b9cc:	d03b      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b9ce:	687b      	ldr	r3, [r7, #4]
 802b9d0:	681b      	ldr	r3, [r3, #0]
 802b9d2:	4a4d      	ldr	r2, [pc, #308]	; (802bb08 <HAL_DMA_Init+0x688>)
 802b9d4:	4293      	cmp	r3, r2
 802b9d6:	d036      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b9d8:	687b      	ldr	r3, [r7, #4]
 802b9da:	681b      	ldr	r3, [r3, #0]
 802b9dc:	4a4b      	ldr	r2, [pc, #300]	; (802bb0c <HAL_DMA_Init+0x68c>)
 802b9de:	4293      	cmp	r3, r2
 802b9e0:	d031      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b9e2:	687b      	ldr	r3, [r7, #4]
 802b9e4:	681b      	ldr	r3, [r3, #0]
 802b9e6:	4a4a      	ldr	r2, [pc, #296]	; (802bb10 <HAL_DMA_Init+0x690>)
 802b9e8:	4293      	cmp	r3, r2
 802b9ea:	d02c      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b9ec:	687b      	ldr	r3, [r7, #4]
 802b9ee:	681b      	ldr	r3, [r3, #0]
 802b9f0:	4a48      	ldr	r2, [pc, #288]	; (802bb14 <HAL_DMA_Init+0x694>)
 802b9f2:	4293      	cmp	r3, r2
 802b9f4:	d027      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802b9f6:	687b      	ldr	r3, [r7, #4]
 802b9f8:	681b      	ldr	r3, [r3, #0]
 802b9fa:	4a47      	ldr	r2, [pc, #284]	; (802bb18 <HAL_DMA_Init+0x698>)
 802b9fc:	4293      	cmp	r3, r2
 802b9fe:	d022      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802ba00:	687b      	ldr	r3, [r7, #4]
 802ba02:	681b      	ldr	r3, [r3, #0]
 802ba04:	4a45      	ldr	r2, [pc, #276]	; (802bb1c <HAL_DMA_Init+0x69c>)
 802ba06:	4293      	cmp	r3, r2
 802ba08:	d01d      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802ba0a:	687b      	ldr	r3, [r7, #4]
 802ba0c:	681b      	ldr	r3, [r3, #0]
 802ba0e:	4a44      	ldr	r2, [pc, #272]	; (802bb20 <HAL_DMA_Init+0x6a0>)
 802ba10:	4293      	cmp	r3, r2
 802ba12:	d018      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802ba14:	687b      	ldr	r3, [r7, #4]
 802ba16:	681b      	ldr	r3, [r3, #0]
 802ba18:	4a42      	ldr	r2, [pc, #264]	; (802bb24 <HAL_DMA_Init+0x6a4>)
 802ba1a:	4293      	cmp	r3, r2
 802ba1c:	d013      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802ba1e:	687b      	ldr	r3, [r7, #4]
 802ba20:	681b      	ldr	r3, [r3, #0]
 802ba22:	4a41      	ldr	r2, [pc, #260]	; (802bb28 <HAL_DMA_Init+0x6a8>)
 802ba24:	4293      	cmp	r3, r2
 802ba26:	d00e      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802ba28:	687b      	ldr	r3, [r7, #4]
 802ba2a:	681b      	ldr	r3, [r3, #0]
 802ba2c:	4a3f      	ldr	r2, [pc, #252]	; (802bb2c <HAL_DMA_Init+0x6ac>)
 802ba2e:	4293      	cmp	r3, r2
 802ba30:	d009      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802ba32:	687b      	ldr	r3, [r7, #4]
 802ba34:	681b      	ldr	r3, [r3, #0]
 802ba36:	4a3e      	ldr	r2, [pc, #248]	; (802bb30 <HAL_DMA_Init+0x6b0>)
 802ba38:	4293      	cmp	r3, r2
 802ba3a:	d004      	beq.n	802ba46 <HAL_DMA_Init+0x5c6>
 802ba3c:	687b      	ldr	r3, [r7, #4]
 802ba3e:	681b      	ldr	r3, [r3, #0]
 802ba40:	4a3c      	ldr	r2, [pc, #240]	; (802bb34 <HAL_DMA_Init+0x6b4>)
 802ba42:	4293      	cmp	r3, r2
 802ba44:	d101      	bne.n	802ba4a <HAL_DMA_Init+0x5ca>
 802ba46:	2301      	movs	r3, #1
 802ba48:	e000      	b.n	802ba4c <HAL_DMA_Init+0x5cc>
 802ba4a:	2300      	movs	r3, #0
 802ba4c:	2b00      	cmp	r3, #0
 802ba4e:	d032      	beq.n	802bab6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 802ba50:	6878      	ldr	r0, [r7, #4]
 802ba52:	f002 fa5d 	bl	802df10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 802ba56:	687b      	ldr	r3, [r7, #4]
 802ba58:	689b      	ldr	r3, [r3, #8]
 802ba5a:	2b80      	cmp	r3, #128	; 0x80
 802ba5c:	d102      	bne.n	802ba64 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 802ba5e:	687b      	ldr	r3, [r7, #4]
 802ba60:	2200      	movs	r2, #0
 802ba62:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 802ba64:	687b      	ldr	r3, [r7, #4]
 802ba66:	685a      	ldr	r2, [r3, #4]
 802ba68:	687b      	ldr	r3, [r7, #4]
 802ba6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802ba6c:	b2d2      	uxtb	r2, r2
 802ba6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802ba70:	687b      	ldr	r3, [r7, #4]
 802ba72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802ba74:	687a      	ldr	r2, [r7, #4]
 802ba76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802ba78:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 802ba7a:	687b      	ldr	r3, [r7, #4]
 802ba7c:	685b      	ldr	r3, [r3, #4]
 802ba7e:	2b00      	cmp	r3, #0
 802ba80:	d010      	beq.n	802baa4 <HAL_DMA_Init+0x624>
 802ba82:	687b      	ldr	r3, [r7, #4]
 802ba84:	685b      	ldr	r3, [r3, #4]
 802ba86:	2b08      	cmp	r3, #8
 802ba88:	d80c      	bhi.n	802baa4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 802ba8a:	6878      	ldr	r0, [r7, #4]
 802ba8c:	f002 fada 	bl	802e044 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 802ba90:	687b      	ldr	r3, [r7, #4]
 802ba92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ba94:	2200      	movs	r2, #0
 802ba96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802ba98:	687b      	ldr	r3, [r7, #4]
 802ba9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802ba9c:	687a      	ldr	r2, [r7, #4]
 802ba9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802baa0:	605a      	str	r2, [r3, #4]
 802baa2:	e008      	b.n	802bab6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 802baa4:	687b      	ldr	r3, [r7, #4]
 802baa6:	2200      	movs	r2, #0
 802baa8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 802baaa:	687b      	ldr	r3, [r7, #4]
 802baac:	2200      	movs	r2, #0
 802baae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 802bab0:	687b      	ldr	r3, [r7, #4]
 802bab2:	2200      	movs	r2, #0
 802bab4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802bab6:	687b      	ldr	r3, [r7, #4]
 802bab8:	2200      	movs	r2, #0
 802baba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802babc:	687b      	ldr	r3, [r7, #4]
 802babe:	2201      	movs	r2, #1
 802bac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802bac4:	2300      	movs	r3, #0
}
 802bac6:	4618      	mov	r0, r3
 802bac8:	3718      	adds	r7, #24
 802baca:	46bd      	mov	sp, r7
 802bacc:	bd80      	pop	{r7, pc}
 802bace:	bf00      	nop
 802bad0:	a7fdabf8 	.word	0xa7fdabf8
 802bad4:	cccccccd 	.word	0xcccccccd
 802bad8:	40020010 	.word	0x40020010
 802badc:	40020028 	.word	0x40020028
 802bae0:	40020040 	.word	0x40020040
 802bae4:	40020058 	.word	0x40020058
 802bae8:	40020070 	.word	0x40020070
 802baec:	40020088 	.word	0x40020088
 802baf0:	400200a0 	.word	0x400200a0
 802baf4:	400200b8 	.word	0x400200b8
 802baf8:	40020410 	.word	0x40020410
 802bafc:	40020428 	.word	0x40020428
 802bb00:	40020440 	.word	0x40020440
 802bb04:	40020458 	.word	0x40020458
 802bb08:	40020470 	.word	0x40020470
 802bb0c:	40020488 	.word	0x40020488
 802bb10:	400204a0 	.word	0x400204a0
 802bb14:	400204b8 	.word	0x400204b8
 802bb18:	58025408 	.word	0x58025408
 802bb1c:	5802541c 	.word	0x5802541c
 802bb20:	58025430 	.word	0x58025430
 802bb24:	58025444 	.word	0x58025444
 802bb28:	58025458 	.word	0x58025458
 802bb2c:	5802546c 	.word	0x5802546c
 802bb30:	58025480 	.word	0x58025480
 802bb34:	58025494 	.word	0x58025494

0802bb38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802bb38:	b580      	push	{r7, lr}
 802bb3a:	b086      	sub	sp, #24
 802bb3c:	af00      	add	r7, sp, #0
 802bb3e:	60f8      	str	r0, [r7, #12]
 802bb40:	60b9      	str	r1, [r7, #8]
 802bb42:	607a      	str	r2, [r7, #4]
 802bb44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802bb46:	2300      	movs	r3, #0
 802bb48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802bb4a:	68fb      	ldr	r3, [r7, #12]
 802bb4c:	2b00      	cmp	r3, #0
 802bb4e:	d101      	bne.n	802bb54 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 802bb50:	2301      	movs	r3, #1
 802bb52:	e226      	b.n	802bfa2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 802bb54:	68fb      	ldr	r3, [r7, #12]
 802bb56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802bb5a:	2b01      	cmp	r3, #1
 802bb5c:	d101      	bne.n	802bb62 <HAL_DMA_Start_IT+0x2a>
 802bb5e:	2302      	movs	r3, #2
 802bb60:	e21f      	b.n	802bfa2 <HAL_DMA_Start_IT+0x46a>
 802bb62:	68fb      	ldr	r3, [r7, #12]
 802bb64:	2201      	movs	r2, #1
 802bb66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 802bb6a:	68fb      	ldr	r3, [r7, #12]
 802bb6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802bb70:	b2db      	uxtb	r3, r3
 802bb72:	2b01      	cmp	r3, #1
 802bb74:	f040 820a 	bne.w	802bf8c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802bb78:	68fb      	ldr	r3, [r7, #12]
 802bb7a:	2202      	movs	r2, #2
 802bb7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802bb80:	68fb      	ldr	r3, [r7, #12]
 802bb82:	2200      	movs	r2, #0
 802bb84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802bb86:	68fb      	ldr	r3, [r7, #12]
 802bb88:	681b      	ldr	r3, [r3, #0]
 802bb8a:	4a68      	ldr	r2, [pc, #416]	; (802bd2c <HAL_DMA_Start_IT+0x1f4>)
 802bb8c:	4293      	cmp	r3, r2
 802bb8e:	d04a      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bb90:	68fb      	ldr	r3, [r7, #12]
 802bb92:	681b      	ldr	r3, [r3, #0]
 802bb94:	4a66      	ldr	r2, [pc, #408]	; (802bd30 <HAL_DMA_Start_IT+0x1f8>)
 802bb96:	4293      	cmp	r3, r2
 802bb98:	d045      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bb9a:	68fb      	ldr	r3, [r7, #12]
 802bb9c:	681b      	ldr	r3, [r3, #0]
 802bb9e:	4a65      	ldr	r2, [pc, #404]	; (802bd34 <HAL_DMA_Start_IT+0x1fc>)
 802bba0:	4293      	cmp	r3, r2
 802bba2:	d040      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bba4:	68fb      	ldr	r3, [r7, #12]
 802bba6:	681b      	ldr	r3, [r3, #0]
 802bba8:	4a63      	ldr	r2, [pc, #396]	; (802bd38 <HAL_DMA_Start_IT+0x200>)
 802bbaa:	4293      	cmp	r3, r2
 802bbac:	d03b      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bbae:	68fb      	ldr	r3, [r7, #12]
 802bbb0:	681b      	ldr	r3, [r3, #0]
 802bbb2:	4a62      	ldr	r2, [pc, #392]	; (802bd3c <HAL_DMA_Start_IT+0x204>)
 802bbb4:	4293      	cmp	r3, r2
 802bbb6:	d036      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bbb8:	68fb      	ldr	r3, [r7, #12]
 802bbba:	681b      	ldr	r3, [r3, #0]
 802bbbc:	4a60      	ldr	r2, [pc, #384]	; (802bd40 <HAL_DMA_Start_IT+0x208>)
 802bbbe:	4293      	cmp	r3, r2
 802bbc0:	d031      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bbc2:	68fb      	ldr	r3, [r7, #12]
 802bbc4:	681b      	ldr	r3, [r3, #0]
 802bbc6:	4a5f      	ldr	r2, [pc, #380]	; (802bd44 <HAL_DMA_Start_IT+0x20c>)
 802bbc8:	4293      	cmp	r3, r2
 802bbca:	d02c      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bbcc:	68fb      	ldr	r3, [r7, #12]
 802bbce:	681b      	ldr	r3, [r3, #0]
 802bbd0:	4a5d      	ldr	r2, [pc, #372]	; (802bd48 <HAL_DMA_Start_IT+0x210>)
 802bbd2:	4293      	cmp	r3, r2
 802bbd4:	d027      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bbd6:	68fb      	ldr	r3, [r7, #12]
 802bbd8:	681b      	ldr	r3, [r3, #0]
 802bbda:	4a5c      	ldr	r2, [pc, #368]	; (802bd4c <HAL_DMA_Start_IT+0x214>)
 802bbdc:	4293      	cmp	r3, r2
 802bbde:	d022      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bbe0:	68fb      	ldr	r3, [r7, #12]
 802bbe2:	681b      	ldr	r3, [r3, #0]
 802bbe4:	4a5a      	ldr	r2, [pc, #360]	; (802bd50 <HAL_DMA_Start_IT+0x218>)
 802bbe6:	4293      	cmp	r3, r2
 802bbe8:	d01d      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bbea:	68fb      	ldr	r3, [r7, #12]
 802bbec:	681b      	ldr	r3, [r3, #0]
 802bbee:	4a59      	ldr	r2, [pc, #356]	; (802bd54 <HAL_DMA_Start_IT+0x21c>)
 802bbf0:	4293      	cmp	r3, r2
 802bbf2:	d018      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bbf4:	68fb      	ldr	r3, [r7, #12]
 802bbf6:	681b      	ldr	r3, [r3, #0]
 802bbf8:	4a57      	ldr	r2, [pc, #348]	; (802bd58 <HAL_DMA_Start_IT+0x220>)
 802bbfa:	4293      	cmp	r3, r2
 802bbfc:	d013      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bbfe:	68fb      	ldr	r3, [r7, #12]
 802bc00:	681b      	ldr	r3, [r3, #0]
 802bc02:	4a56      	ldr	r2, [pc, #344]	; (802bd5c <HAL_DMA_Start_IT+0x224>)
 802bc04:	4293      	cmp	r3, r2
 802bc06:	d00e      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bc08:	68fb      	ldr	r3, [r7, #12]
 802bc0a:	681b      	ldr	r3, [r3, #0]
 802bc0c:	4a54      	ldr	r2, [pc, #336]	; (802bd60 <HAL_DMA_Start_IT+0x228>)
 802bc0e:	4293      	cmp	r3, r2
 802bc10:	d009      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bc12:	68fb      	ldr	r3, [r7, #12]
 802bc14:	681b      	ldr	r3, [r3, #0]
 802bc16:	4a53      	ldr	r2, [pc, #332]	; (802bd64 <HAL_DMA_Start_IT+0x22c>)
 802bc18:	4293      	cmp	r3, r2
 802bc1a:	d004      	beq.n	802bc26 <HAL_DMA_Start_IT+0xee>
 802bc1c:	68fb      	ldr	r3, [r7, #12]
 802bc1e:	681b      	ldr	r3, [r3, #0]
 802bc20:	4a51      	ldr	r2, [pc, #324]	; (802bd68 <HAL_DMA_Start_IT+0x230>)
 802bc22:	4293      	cmp	r3, r2
 802bc24:	d108      	bne.n	802bc38 <HAL_DMA_Start_IT+0x100>
 802bc26:	68fb      	ldr	r3, [r7, #12]
 802bc28:	681b      	ldr	r3, [r3, #0]
 802bc2a:	681a      	ldr	r2, [r3, #0]
 802bc2c:	68fb      	ldr	r3, [r7, #12]
 802bc2e:	681b      	ldr	r3, [r3, #0]
 802bc30:	f022 0201 	bic.w	r2, r2, #1
 802bc34:	601a      	str	r2, [r3, #0]
 802bc36:	e007      	b.n	802bc48 <HAL_DMA_Start_IT+0x110>
 802bc38:	68fb      	ldr	r3, [r7, #12]
 802bc3a:	681b      	ldr	r3, [r3, #0]
 802bc3c:	681a      	ldr	r2, [r3, #0]
 802bc3e:	68fb      	ldr	r3, [r7, #12]
 802bc40:	681b      	ldr	r3, [r3, #0]
 802bc42:	f022 0201 	bic.w	r2, r2, #1
 802bc46:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802bc48:	683b      	ldr	r3, [r7, #0]
 802bc4a:	687a      	ldr	r2, [r7, #4]
 802bc4c:	68b9      	ldr	r1, [r7, #8]
 802bc4e:	68f8      	ldr	r0, [r7, #12]
 802bc50:	f001 fe84 	bl	802d95c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802bc54:	68fb      	ldr	r3, [r7, #12]
 802bc56:	681b      	ldr	r3, [r3, #0]
 802bc58:	4a34      	ldr	r2, [pc, #208]	; (802bd2c <HAL_DMA_Start_IT+0x1f4>)
 802bc5a:	4293      	cmp	r3, r2
 802bc5c:	d04a      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bc5e:	68fb      	ldr	r3, [r7, #12]
 802bc60:	681b      	ldr	r3, [r3, #0]
 802bc62:	4a33      	ldr	r2, [pc, #204]	; (802bd30 <HAL_DMA_Start_IT+0x1f8>)
 802bc64:	4293      	cmp	r3, r2
 802bc66:	d045      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bc68:	68fb      	ldr	r3, [r7, #12]
 802bc6a:	681b      	ldr	r3, [r3, #0]
 802bc6c:	4a31      	ldr	r2, [pc, #196]	; (802bd34 <HAL_DMA_Start_IT+0x1fc>)
 802bc6e:	4293      	cmp	r3, r2
 802bc70:	d040      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bc72:	68fb      	ldr	r3, [r7, #12]
 802bc74:	681b      	ldr	r3, [r3, #0]
 802bc76:	4a30      	ldr	r2, [pc, #192]	; (802bd38 <HAL_DMA_Start_IT+0x200>)
 802bc78:	4293      	cmp	r3, r2
 802bc7a:	d03b      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bc7c:	68fb      	ldr	r3, [r7, #12]
 802bc7e:	681b      	ldr	r3, [r3, #0]
 802bc80:	4a2e      	ldr	r2, [pc, #184]	; (802bd3c <HAL_DMA_Start_IT+0x204>)
 802bc82:	4293      	cmp	r3, r2
 802bc84:	d036      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bc86:	68fb      	ldr	r3, [r7, #12]
 802bc88:	681b      	ldr	r3, [r3, #0]
 802bc8a:	4a2d      	ldr	r2, [pc, #180]	; (802bd40 <HAL_DMA_Start_IT+0x208>)
 802bc8c:	4293      	cmp	r3, r2
 802bc8e:	d031      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bc90:	68fb      	ldr	r3, [r7, #12]
 802bc92:	681b      	ldr	r3, [r3, #0]
 802bc94:	4a2b      	ldr	r2, [pc, #172]	; (802bd44 <HAL_DMA_Start_IT+0x20c>)
 802bc96:	4293      	cmp	r3, r2
 802bc98:	d02c      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bc9a:	68fb      	ldr	r3, [r7, #12]
 802bc9c:	681b      	ldr	r3, [r3, #0]
 802bc9e:	4a2a      	ldr	r2, [pc, #168]	; (802bd48 <HAL_DMA_Start_IT+0x210>)
 802bca0:	4293      	cmp	r3, r2
 802bca2:	d027      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bca4:	68fb      	ldr	r3, [r7, #12]
 802bca6:	681b      	ldr	r3, [r3, #0]
 802bca8:	4a28      	ldr	r2, [pc, #160]	; (802bd4c <HAL_DMA_Start_IT+0x214>)
 802bcaa:	4293      	cmp	r3, r2
 802bcac:	d022      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bcae:	68fb      	ldr	r3, [r7, #12]
 802bcb0:	681b      	ldr	r3, [r3, #0]
 802bcb2:	4a27      	ldr	r2, [pc, #156]	; (802bd50 <HAL_DMA_Start_IT+0x218>)
 802bcb4:	4293      	cmp	r3, r2
 802bcb6:	d01d      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bcb8:	68fb      	ldr	r3, [r7, #12]
 802bcba:	681b      	ldr	r3, [r3, #0]
 802bcbc:	4a25      	ldr	r2, [pc, #148]	; (802bd54 <HAL_DMA_Start_IT+0x21c>)
 802bcbe:	4293      	cmp	r3, r2
 802bcc0:	d018      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bcc2:	68fb      	ldr	r3, [r7, #12]
 802bcc4:	681b      	ldr	r3, [r3, #0]
 802bcc6:	4a24      	ldr	r2, [pc, #144]	; (802bd58 <HAL_DMA_Start_IT+0x220>)
 802bcc8:	4293      	cmp	r3, r2
 802bcca:	d013      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bccc:	68fb      	ldr	r3, [r7, #12]
 802bcce:	681b      	ldr	r3, [r3, #0]
 802bcd0:	4a22      	ldr	r2, [pc, #136]	; (802bd5c <HAL_DMA_Start_IT+0x224>)
 802bcd2:	4293      	cmp	r3, r2
 802bcd4:	d00e      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bcd6:	68fb      	ldr	r3, [r7, #12]
 802bcd8:	681b      	ldr	r3, [r3, #0]
 802bcda:	4a21      	ldr	r2, [pc, #132]	; (802bd60 <HAL_DMA_Start_IT+0x228>)
 802bcdc:	4293      	cmp	r3, r2
 802bcde:	d009      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bce0:	68fb      	ldr	r3, [r7, #12]
 802bce2:	681b      	ldr	r3, [r3, #0]
 802bce4:	4a1f      	ldr	r2, [pc, #124]	; (802bd64 <HAL_DMA_Start_IT+0x22c>)
 802bce6:	4293      	cmp	r3, r2
 802bce8:	d004      	beq.n	802bcf4 <HAL_DMA_Start_IT+0x1bc>
 802bcea:	68fb      	ldr	r3, [r7, #12]
 802bcec:	681b      	ldr	r3, [r3, #0]
 802bcee:	4a1e      	ldr	r2, [pc, #120]	; (802bd68 <HAL_DMA_Start_IT+0x230>)
 802bcf0:	4293      	cmp	r3, r2
 802bcf2:	d101      	bne.n	802bcf8 <HAL_DMA_Start_IT+0x1c0>
 802bcf4:	2301      	movs	r3, #1
 802bcf6:	e000      	b.n	802bcfa <HAL_DMA_Start_IT+0x1c2>
 802bcf8:	2300      	movs	r3, #0
 802bcfa:	2b00      	cmp	r3, #0
 802bcfc:	d036      	beq.n	802bd6c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 802bcfe:	68fb      	ldr	r3, [r7, #12]
 802bd00:	681b      	ldr	r3, [r3, #0]
 802bd02:	681b      	ldr	r3, [r3, #0]
 802bd04:	f023 021e 	bic.w	r2, r3, #30
 802bd08:	68fb      	ldr	r3, [r7, #12]
 802bd0a:	681b      	ldr	r3, [r3, #0]
 802bd0c:	f042 0216 	orr.w	r2, r2, #22
 802bd10:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802bd12:	68fb      	ldr	r3, [r7, #12]
 802bd14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bd16:	2b00      	cmp	r3, #0
 802bd18:	d03e      	beq.n	802bd98 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 802bd1a:	68fb      	ldr	r3, [r7, #12]
 802bd1c:	681b      	ldr	r3, [r3, #0]
 802bd1e:	681a      	ldr	r2, [r3, #0]
 802bd20:	68fb      	ldr	r3, [r7, #12]
 802bd22:	681b      	ldr	r3, [r3, #0]
 802bd24:	f042 0208 	orr.w	r2, r2, #8
 802bd28:	601a      	str	r2, [r3, #0]
 802bd2a:	e035      	b.n	802bd98 <HAL_DMA_Start_IT+0x260>
 802bd2c:	40020010 	.word	0x40020010
 802bd30:	40020028 	.word	0x40020028
 802bd34:	40020040 	.word	0x40020040
 802bd38:	40020058 	.word	0x40020058
 802bd3c:	40020070 	.word	0x40020070
 802bd40:	40020088 	.word	0x40020088
 802bd44:	400200a0 	.word	0x400200a0
 802bd48:	400200b8 	.word	0x400200b8
 802bd4c:	40020410 	.word	0x40020410
 802bd50:	40020428 	.word	0x40020428
 802bd54:	40020440 	.word	0x40020440
 802bd58:	40020458 	.word	0x40020458
 802bd5c:	40020470 	.word	0x40020470
 802bd60:	40020488 	.word	0x40020488
 802bd64:	400204a0 	.word	0x400204a0
 802bd68:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 802bd6c:	68fb      	ldr	r3, [r7, #12]
 802bd6e:	681b      	ldr	r3, [r3, #0]
 802bd70:	681b      	ldr	r3, [r3, #0]
 802bd72:	f023 020e 	bic.w	r2, r3, #14
 802bd76:	68fb      	ldr	r3, [r7, #12]
 802bd78:	681b      	ldr	r3, [r3, #0]
 802bd7a:	f042 020a 	orr.w	r2, r2, #10
 802bd7e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802bd80:	68fb      	ldr	r3, [r7, #12]
 802bd82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bd84:	2b00      	cmp	r3, #0
 802bd86:	d007      	beq.n	802bd98 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 802bd88:	68fb      	ldr	r3, [r7, #12]
 802bd8a:	681b      	ldr	r3, [r3, #0]
 802bd8c:	681a      	ldr	r2, [r3, #0]
 802bd8e:	68fb      	ldr	r3, [r7, #12]
 802bd90:	681b      	ldr	r3, [r3, #0]
 802bd92:	f042 0204 	orr.w	r2, r2, #4
 802bd96:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802bd98:	68fb      	ldr	r3, [r7, #12]
 802bd9a:	681b      	ldr	r3, [r3, #0]
 802bd9c:	4a83      	ldr	r2, [pc, #524]	; (802bfac <HAL_DMA_Start_IT+0x474>)
 802bd9e:	4293      	cmp	r3, r2
 802bda0:	d072      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802bda2:	68fb      	ldr	r3, [r7, #12]
 802bda4:	681b      	ldr	r3, [r3, #0]
 802bda6:	4a82      	ldr	r2, [pc, #520]	; (802bfb0 <HAL_DMA_Start_IT+0x478>)
 802bda8:	4293      	cmp	r3, r2
 802bdaa:	d06d      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802bdac:	68fb      	ldr	r3, [r7, #12]
 802bdae:	681b      	ldr	r3, [r3, #0]
 802bdb0:	4a80      	ldr	r2, [pc, #512]	; (802bfb4 <HAL_DMA_Start_IT+0x47c>)
 802bdb2:	4293      	cmp	r3, r2
 802bdb4:	d068      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802bdb6:	68fb      	ldr	r3, [r7, #12]
 802bdb8:	681b      	ldr	r3, [r3, #0]
 802bdba:	4a7f      	ldr	r2, [pc, #508]	; (802bfb8 <HAL_DMA_Start_IT+0x480>)
 802bdbc:	4293      	cmp	r3, r2
 802bdbe:	d063      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802bdc0:	68fb      	ldr	r3, [r7, #12]
 802bdc2:	681b      	ldr	r3, [r3, #0]
 802bdc4:	4a7d      	ldr	r2, [pc, #500]	; (802bfbc <HAL_DMA_Start_IT+0x484>)
 802bdc6:	4293      	cmp	r3, r2
 802bdc8:	d05e      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802bdca:	68fb      	ldr	r3, [r7, #12]
 802bdcc:	681b      	ldr	r3, [r3, #0]
 802bdce:	4a7c      	ldr	r2, [pc, #496]	; (802bfc0 <HAL_DMA_Start_IT+0x488>)
 802bdd0:	4293      	cmp	r3, r2
 802bdd2:	d059      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802bdd4:	68fb      	ldr	r3, [r7, #12]
 802bdd6:	681b      	ldr	r3, [r3, #0]
 802bdd8:	4a7a      	ldr	r2, [pc, #488]	; (802bfc4 <HAL_DMA_Start_IT+0x48c>)
 802bdda:	4293      	cmp	r3, r2
 802bddc:	d054      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802bdde:	68fb      	ldr	r3, [r7, #12]
 802bde0:	681b      	ldr	r3, [r3, #0]
 802bde2:	4a79      	ldr	r2, [pc, #484]	; (802bfc8 <HAL_DMA_Start_IT+0x490>)
 802bde4:	4293      	cmp	r3, r2
 802bde6:	d04f      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802bde8:	68fb      	ldr	r3, [r7, #12]
 802bdea:	681b      	ldr	r3, [r3, #0]
 802bdec:	4a77      	ldr	r2, [pc, #476]	; (802bfcc <HAL_DMA_Start_IT+0x494>)
 802bdee:	4293      	cmp	r3, r2
 802bdf0:	d04a      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802bdf2:	68fb      	ldr	r3, [r7, #12]
 802bdf4:	681b      	ldr	r3, [r3, #0]
 802bdf6:	4a76      	ldr	r2, [pc, #472]	; (802bfd0 <HAL_DMA_Start_IT+0x498>)
 802bdf8:	4293      	cmp	r3, r2
 802bdfa:	d045      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802bdfc:	68fb      	ldr	r3, [r7, #12]
 802bdfe:	681b      	ldr	r3, [r3, #0]
 802be00:	4a74      	ldr	r2, [pc, #464]	; (802bfd4 <HAL_DMA_Start_IT+0x49c>)
 802be02:	4293      	cmp	r3, r2
 802be04:	d040      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be06:	68fb      	ldr	r3, [r7, #12]
 802be08:	681b      	ldr	r3, [r3, #0]
 802be0a:	4a73      	ldr	r2, [pc, #460]	; (802bfd8 <HAL_DMA_Start_IT+0x4a0>)
 802be0c:	4293      	cmp	r3, r2
 802be0e:	d03b      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be10:	68fb      	ldr	r3, [r7, #12]
 802be12:	681b      	ldr	r3, [r3, #0]
 802be14:	4a71      	ldr	r2, [pc, #452]	; (802bfdc <HAL_DMA_Start_IT+0x4a4>)
 802be16:	4293      	cmp	r3, r2
 802be18:	d036      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be1a:	68fb      	ldr	r3, [r7, #12]
 802be1c:	681b      	ldr	r3, [r3, #0]
 802be1e:	4a70      	ldr	r2, [pc, #448]	; (802bfe0 <HAL_DMA_Start_IT+0x4a8>)
 802be20:	4293      	cmp	r3, r2
 802be22:	d031      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be24:	68fb      	ldr	r3, [r7, #12]
 802be26:	681b      	ldr	r3, [r3, #0]
 802be28:	4a6e      	ldr	r2, [pc, #440]	; (802bfe4 <HAL_DMA_Start_IT+0x4ac>)
 802be2a:	4293      	cmp	r3, r2
 802be2c:	d02c      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be2e:	68fb      	ldr	r3, [r7, #12]
 802be30:	681b      	ldr	r3, [r3, #0]
 802be32:	4a6d      	ldr	r2, [pc, #436]	; (802bfe8 <HAL_DMA_Start_IT+0x4b0>)
 802be34:	4293      	cmp	r3, r2
 802be36:	d027      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be38:	68fb      	ldr	r3, [r7, #12]
 802be3a:	681b      	ldr	r3, [r3, #0]
 802be3c:	4a6b      	ldr	r2, [pc, #428]	; (802bfec <HAL_DMA_Start_IT+0x4b4>)
 802be3e:	4293      	cmp	r3, r2
 802be40:	d022      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be42:	68fb      	ldr	r3, [r7, #12]
 802be44:	681b      	ldr	r3, [r3, #0]
 802be46:	4a6a      	ldr	r2, [pc, #424]	; (802bff0 <HAL_DMA_Start_IT+0x4b8>)
 802be48:	4293      	cmp	r3, r2
 802be4a:	d01d      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be4c:	68fb      	ldr	r3, [r7, #12]
 802be4e:	681b      	ldr	r3, [r3, #0]
 802be50:	4a68      	ldr	r2, [pc, #416]	; (802bff4 <HAL_DMA_Start_IT+0x4bc>)
 802be52:	4293      	cmp	r3, r2
 802be54:	d018      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be56:	68fb      	ldr	r3, [r7, #12]
 802be58:	681b      	ldr	r3, [r3, #0]
 802be5a:	4a67      	ldr	r2, [pc, #412]	; (802bff8 <HAL_DMA_Start_IT+0x4c0>)
 802be5c:	4293      	cmp	r3, r2
 802be5e:	d013      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be60:	68fb      	ldr	r3, [r7, #12]
 802be62:	681b      	ldr	r3, [r3, #0]
 802be64:	4a65      	ldr	r2, [pc, #404]	; (802bffc <HAL_DMA_Start_IT+0x4c4>)
 802be66:	4293      	cmp	r3, r2
 802be68:	d00e      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be6a:	68fb      	ldr	r3, [r7, #12]
 802be6c:	681b      	ldr	r3, [r3, #0]
 802be6e:	4a64      	ldr	r2, [pc, #400]	; (802c000 <HAL_DMA_Start_IT+0x4c8>)
 802be70:	4293      	cmp	r3, r2
 802be72:	d009      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be74:	68fb      	ldr	r3, [r7, #12]
 802be76:	681b      	ldr	r3, [r3, #0]
 802be78:	4a62      	ldr	r2, [pc, #392]	; (802c004 <HAL_DMA_Start_IT+0x4cc>)
 802be7a:	4293      	cmp	r3, r2
 802be7c:	d004      	beq.n	802be88 <HAL_DMA_Start_IT+0x350>
 802be7e:	68fb      	ldr	r3, [r7, #12]
 802be80:	681b      	ldr	r3, [r3, #0]
 802be82:	4a61      	ldr	r2, [pc, #388]	; (802c008 <HAL_DMA_Start_IT+0x4d0>)
 802be84:	4293      	cmp	r3, r2
 802be86:	d101      	bne.n	802be8c <HAL_DMA_Start_IT+0x354>
 802be88:	2301      	movs	r3, #1
 802be8a:	e000      	b.n	802be8e <HAL_DMA_Start_IT+0x356>
 802be8c:	2300      	movs	r3, #0
 802be8e:	2b00      	cmp	r3, #0
 802be90:	d01a      	beq.n	802bec8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 802be92:	68fb      	ldr	r3, [r7, #12]
 802be94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802be96:	681b      	ldr	r3, [r3, #0]
 802be98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802be9c:	2b00      	cmp	r3, #0
 802be9e:	d007      	beq.n	802beb0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 802bea0:	68fb      	ldr	r3, [r7, #12]
 802bea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bea4:	681a      	ldr	r2, [r3, #0]
 802bea6:	68fb      	ldr	r3, [r7, #12]
 802bea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802beaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802beae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 802beb0:	68fb      	ldr	r3, [r7, #12]
 802beb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802beb4:	2b00      	cmp	r3, #0
 802beb6:	d007      	beq.n	802bec8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 802beb8:	68fb      	ldr	r3, [r7, #12]
 802beba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802bebc:	681a      	ldr	r2, [r3, #0]
 802bebe:	68fb      	ldr	r3, [r7, #12]
 802bec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802bec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802bec6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802bec8:	68fb      	ldr	r3, [r7, #12]
 802beca:	681b      	ldr	r3, [r3, #0]
 802becc:	4a37      	ldr	r2, [pc, #220]	; (802bfac <HAL_DMA_Start_IT+0x474>)
 802bece:	4293      	cmp	r3, r2
 802bed0:	d04a      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bed2:	68fb      	ldr	r3, [r7, #12]
 802bed4:	681b      	ldr	r3, [r3, #0]
 802bed6:	4a36      	ldr	r2, [pc, #216]	; (802bfb0 <HAL_DMA_Start_IT+0x478>)
 802bed8:	4293      	cmp	r3, r2
 802beda:	d045      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bedc:	68fb      	ldr	r3, [r7, #12]
 802bede:	681b      	ldr	r3, [r3, #0]
 802bee0:	4a34      	ldr	r2, [pc, #208]	; (802bfb4 <HAL_DMA_Start_IT+0x47c>)
 802bee2:	4293      	cmp	r3, r2
 802bee4:	d040      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bee6:	68fb      	ldr	r3, [r7, #12]
 802bee8:	681b      	ldr	r3, [r3, #0]
 802beea:	4a33      	ldr	r2, [pc, #204]	; (802bfb8 <HAL_DMA_Start_IT+0x480>)
 802beec:	4293      	cmp	r3, r2
 802beee:	d03b      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bef0:	68fb      	ldr	r3, [r7, #12]
 802bef2:	681b      	ldr	r3, [r3, #0]
 802bef4:	4a31      	ldr	r2, [pc, #196]	; (802bfbc <HAL_DMA_Start_IT+0x484>)
 802bef6:	4293      	cmp	r3, r2
 802bef8:	d036      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802befa:	68fb      	ldr	r3, [r7, #12]
 802befc:	681b      	ldr	r3, [r3, #0]
 802befe:	4a30      	ldr	r2, [pc, #192]	; (802bfc0 <HAL_DMA_Start_IT+0x488>)
 802bf00:	4293      	cmp	r3, r2
 802bf02:	d031      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bf04:	68fb      	ldr	r3, [r7, #12]
 802bf06:	681b      	ldr	r3, [r3, #0]
 802bf08:	4a2e      	ldr	r2, [pc, #184]	; (802bfc4 <HAL_DMA_Start_IT+0x48c>)
 802bf0a:	4293      	cmp	r3, r2
 802bf0c:	d02c      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bf0e:	68fb      	ldr	r3, [r7, #12]
 802bf10:	681b      	ldr	r3, [r3, #0]
 802bf12:	4a2d      	ldr	r2, [pc, #180]	; (802bfc8 <HAL_DMA_Start_IT+0x490>)
 802bf14:	4293      	cmp	r3, r2
 802bf16:	d027      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bf18:	68fb      	ldr	r3, [r7, #12]
 802bf1a:	681b      	ldr	r3, [r3, #0]
 802bf1c:	4a2b      	ldr	r2, [pc, #172]	; (802bfcc <HAL_DMA_Start_IT+0x494>)
 802bf1e:	4293      	cmp	r3, r2
 802bf20:	d022      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bf22:	68fb      	ldr	r3, [r7, #12]
 802bf24:	681b      	ldr	r3, [r3, #0]
 802bf26:	4a2a      	ldr	r2, [pc, #168]	; (802bfd0 <HAL_DMA_Start_IT+0x498>)
 802bf28:	4293      	cmp	r3, r2
 802bf2a:	d01d      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bf2c:	68fb      	ldr	r3, [r7, #12]
 802bf2e:	681b      	ldr	r3, [r3, #0]
 802bf30:	4a28      	ldr	r2, [pc, #160]	; (802bfd4 <HAL_DMA_Start_IT+0x49c>)
 802bf32:	4293      	cmp	r3, r2
 802bf34:	d018      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bf36:	68fb      	ldr	r3, [r7, #12]
 802bf38:	681b      	ldr	r3, [r3, #0]
 802bf3a:	4a27      	ldr	r2, [pc, #156]	; (802bfd8 <HAL_DMA_Start_IT+0x4a0>)
 802bf3c:	4293      	cmp	r3, r2
 802bf3e:	d013      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bf40:	68fb      	ldr	r3, [r7, #12]
 802bf42:	681b      	ldr	r3, [r3, #0]
 802bf44:	4a25      	ldr	r2, [pc, #148]	; (802bfdc <HAL_DMA_Start_IT+0x4a4>)
 802bf46:	4293      	cmp	r3, r2
 802bf48:	d00e      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bf4a:	68fb      	ldr	r3, [r7, #12]
 802bf4c:	681b      	ldr	r3, [r3, #0]
 802bf4e:	4a24      	ldr	r2, [pc, #144]	; (802bfe0 <HAL_DMA_Start_IT+0x4a8>)
 802bf50:	4293      	cmp	r3, r2
 802bf52:	d009      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bf54:	68fb      	ldr	r3, [r7, #12]
 802bf56:	681b      	ldr	r3, [r3, #0]
 802bf58:	4a22      	ldr	r2, [pc, #136]	; (802bfe4 <HAL_DMA_Start_IT+0x4ac>)
 802bf5a:	4293      	cmp	r3, r2
 802bf5c:	d004      	beq.n	802bf68 <HAL_DMA_Start_IT+0x430>
 802bf5e:	68fb      	ldr	r3, [r7, #12]
 802bf60:	681b      	ldr	r3, [r3, #0]
 802bf62:	4a21      	ldr	r2, [pc, #132]	; (802bfe8 <HAL_DMA_Start_IT+0x4b0>)
 802bf64:	4293      	cmp	r3, r2
 802bf66:	d108      	bne.n	802bf7a <HAL_DMA_Start_IT+0x442>
 802bf68:	68fb      	ldr	r3, [r7, #12]
 802bf6a:	681b      	ldr	r3, [r3, #0]
 802bf6c:	681a      	ldr	r2, [r3, #0]
 802bf6e:	68fb      	ldr	r3, [r7, #12]
 802bf70:	681b      	ldr	r3, [r3, #0]
 802bf72:	f042 0201 	orr.w	r2, r2, #1
 802bf76:	601a      	str	r2, [r3, #0]
 802bf78:	e012      	b.n	802bfa0 <HAL_DMA_Start_IT+0x468>
 802bf7a:	68fb      	ldr	r3, [r7, #12]
 802bf7c:	681b      	ldr	r3, [r3, #0]
 802bf7e:	681a      	ldr	r2, [r3, #0]
 802bf80:	68fb      	ldr	r3, [r7, #12]
 802bf82:	681b      	ldr	r3, [r3, #0]
 802bf84:	f042 0201 	orr.w	r2, r2, #1
 802bf88:	601a      	str	r2, [r3, #0]
 802bf8a:	e009      	b.n	802bfa0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 802bf8c:	68fb      	ldr	r3, [r7, #12]
 802bf8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802bf92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 802bf94:	68fb      	ldr	r3, [r7, #12]
 802bf96:	2200      	movs	r2, #0
 802bf98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 802bf9c:	2301      	movs	r3, #1
 802bf9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 802bfa0:	7dfb      	ldrb	r3, [r7, #23]
}
 802bfa2:	4618      	mov	r0, r3
 802bfa4:	3718      	adds	r7, #24
 802bfa6:	46bd      	mov	sp, r7
 802bfa8:	bd80      	pop	{r7, pc}
 802bfaa:	bf00      	nop
 802bfac:	40020010 	.word	0x40020010
 802bfb0:	40020028 	.word	0x40020028
 802bfb4:	40020040 	.word	0x40020040
 802bfb8:	40020058 	.word	0x40020058
 802bfbc:	40020070 	.word	0x40020070
 802bfc0:	40020088 	.word	0x40020088
 802bfc4:	400200a0 	.word	0x400200a0
 802bfc8:	400200b8 	.word	0x400200b8
 802bfcc:	40020410 	.word	0x40020410
 802bfd0:	40020428 	.word	0x40020428
 802bfd4:	40020440 	.word	0x40020440
 802bfd8:	40020458 	.word	0x40020458
 802bfdc:	40020470 	.word	0x40020470
 802bfe0:	40020488 	.word	0x40020488
 802bfe4:	400204a0 	.word	0x400204a0
 802bfe8:	400204b8 	.word	0x400204b8
 802bfec:	58025408 	.word	0x58025408
 802bff0:	5802541c 	.word	0x5802541c
 802bff4:	58025430 	.word	0x58025430
 802bff8:	58025444 	.word	0x58025444
 802bffc:	58025458 	.word	0x58025458
 802c000:	5802546c 	.word	0x5802546c
 802c004:	58025480 	.word	0x58025480
 802c008:	58025494 	.word	0x58025494

0802c00c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802c00c:	b580      	push	{r7, lr}
 802c00e:	b086      	sub	sp, #24
 802c010:	af00      	add	r7, sp, #0
 802c012:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 802c014:	f7fe fd38 	bl	802aa88 <HAL_GetTick>
 802c018:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802c01a:	687b      	ldr	r3, [r7, #4]
 802c01c:	2b00      	cmp	r3, #0
 802c01e:	d101      	bne.n	802c024 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 802c020:	2301      	movs	r3, #1
 802c022:	e2dc      	b.n	802c5de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802c024:	687b      	ldr	r3, [r7, #4]
 802c026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802c02a:	b2db      	uxtb	r3, r3
 802c02c:	2b02      	cmp	r3, #2
 802c02e:	d008      	beq.n	802c042 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802c030:	687b      	ldr	r3, [r7, #4]
 802c032:	2280      	movs	r2, #128	; 0x80
 802c034:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802c036:	687b      	ldr	r3, [r7, #4]
 802c038:	2200      	movs	r2, #0
 802c03a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 802c03e:	2301      	movs	r3, #1
 802c040:	e2cd      	b.n	802c5de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c042:	687b      	ldr	r3, [r7, #4]
 802c044:	681b      	ldr	r3, [r3, #0]
 802c046:	4a76      	ldr	r2, [pc, #472]	; (802c220 <HAL_DMA_Abort+0x214>)
 802c048:	4293      	cmp	r3, r2
 802c04a:	d04a      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c04c:	687b      	ldr	r3, [r7, #4]
 802c04e:	681b      	ldr	r3, [r3, #0]
 802c050:	4a74      	ldr	r2, [pc, #464]	; (802c224 <HAL_DMA_Abort+0x218>)
 802c052:	4293      	cmp	r3, r2
 802c054:	d045      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c056:	687b      	ldr	r3, [r7, #4]
 802c058:	681b      	ldr	r3, [r3, #0]
 802c05a:	4a73      	ldr	r2, [pc, #460]	; (802c228 <HAL_DMA_Abort+0x21c>)
 802c05c:	4293      	cmp	r3, r2
 802c05e:	d040      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c060:	687b      	ldr	r3, [r7, #4]
 802c062:	681b      	ldr	r3, [r3, #0]
 802c064:	4a71      	ldr	r2, [pc, #452]	; (802c22c <HAL_DMA_Abort+0x220>)
 802c066:	4293      	cmp	r3, r2
 802c068:	d03b      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c06a:	687b      	ldr	r3, [r7, #4]
 802c06c:	681b      	ldr	r3, [r3, #0]
 802c06e:	4a70      	ldr	r2, [pc, #448]	; (802c230 <HAL_DMA_Abort+0x224>)
 802c070:	4293      	cmp	r3, r2
 802c072:	d036      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c074:	687b      	ldr	r3, [r7, #4]
 802c076:	681b      	ldr	r3, [r3, #0]
 802c078:	4a6e      	ldr	r2, [pc, #440]	; (802c234 <HAL_DMA_Abort+0x228>)
 802c07a:	4293      	cmp	r3, r2
 802c07c:	d031      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c07e:	687b      	ldr	r3, [r7, #4]
 802c080:	681b      	ldr	r3, [r3, #0]
 802c082:	4a6d      	ldr	r2, [pc, #436]	; (802c238 <HAL_DMA_Abort+0x22c>)
 802c084:	4293      	cmp	r3, r2
 802c086:	d02c      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c088:	687b      	ldr	r3, [r7, #4]
 802c08a:	681b      	ldr	r3, [r3, #0]
 802c08c:	4a6b      	ldr	r2, [pc, #428]	; (802c23c <HAL_DMA_Abort+0x230>)
 802c08e:	4293      	cmp	r3, r2
 802c090:	d027      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c092:	687b      	ldr	r3, [r7, #4]
 802c094:	681b      	ldr	r3, [r3, #0]
 802c096:	4a6a      	ldr	r2, [pc, #424]	; (802c240 <HAL_DMA_Abort+0x234>)
 802c098:	4293      	cmp	r3, r2
 802c09a:	d022      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c09c:	687b      	ldr	r3, [r7, #4]
 802c09e:	681b      	ldr	r3, [r3, #0]
 802c0a0:	4a68      	ldr	r2, [pc, #416]	; (802c244 <HAL_DMA_Abort+0x238>)
 802c0a2:	4293      	cmp	r3, r2
 802c0a4:	d01d      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c0a6:	687b      	ldr	r3, [r7, #4]
 802c0a8:	681b      	ldr	r3, [r3, #0]
 802c0aa:	4a67      	ldr	r2, [pc, #412]	; (802c248 <HAL_DMA_Abort+0x23c>)
 802c0ac:	4293      	cmp	r3, r2
 802c0ae:	d018      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c0b0:	687b      	ldr	r3, [r7, #4]
 802c0b2:	681b      	ldr	r3, [r3, #0]
 802c0b4:	4a65      	ldr	r2, [pc, #404]	; (802c24c <HAL_DMA_Abort+0x240>)
 802c0b6:	4293      	cmp	r3, r2
 802c0b8:	d013      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c0ba:	687b      	ldr	r3, [r7, #4]
 802c0bc:	681b      	ldr	r3, [r3, #0]
 802c0be:	4a64      	ldr	r2, [pc, #400]	; (802c250 <HAL_DMA_Abort+0x244>)
 802c0c0:	4293      	cmp	r3, r2
 802c0c2:	d00e      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c0c4:	687b      	ldr	r3, [r7, #4]
 802c0c6:	681b      	ldr	r3, [r3, #0]
 802c0c8:	4a62      	ldr	r2, [pc, #392]	; (802c254 <HAL_DMA_Abort+0x248>)
 802c0ca:	4293      	cmp	r3, r2
 802c0cc:	d009      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c0ce:	687b      	ldr	r3, [r7, #4]
 802c0d0:	681b      	ldr	r3, [r3, #0]
 802c0d2:	4a61      	ldr	r2, [pc, #388]	; (802c258 <HAL_DMA_Abort+0x24c>)
 802c0d4:	4293      	cmp	r3, r2
 802c0d6:	d004      	beq.n	802c0e2 <HAL_DMA_Abort+0xd6>
 802c0d8:	687b      	ldr	r3, [r7, #4]
 802c0da:	681b      	ldr	r3, [r3, #0]
 802c0dc:	4a5f      	ldr	r2, [pc, #380]	; (802c25c <HAL_DMA_Abort+0x250>)
 802c0de:	4293      	cmp	r3, r2
 802c0e0:	d101      	bne.n	802c0e6 <HAL_DMA_Abort+0xda>
 802c0e2:	2301      	movs	r3, #1
 802c0e4:	e000      	b.n	802c0e8 <HAL_DMA_Abort+0xdc>
 802c0e6:	2300      	movs	r3, #0
 802c0e8:	2b00      	cmp	r3, #0
 802c0ea:	d013      	beq.n	802c114 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 802c0ec:	687b      	ldr	r3, [r7, #4]
 802c0ee:	681b      	ldr	r3, [r3, #0]
 802c0f0:	681a      	ldr	r2, [r3, #0]
 802c0f2:	687b      	ldr	r3, [r7, #4]
 802c0f4:	681b      	ldr	r3, [r3, #0]
 802c0f6:	f022 021e 	bic.w	r2, r2, #30
 802c0fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802c0fc:	687b      	ldr	r3, [r7, #4]
 802c0fe:	681b      	ldr	r3, [r3, #0]
 802c100:	695a      	ldr	r2, [r3, #20]
 802c102:	687b      	ldr	r3, [r7, #4]
 802c104:	681b      	ldr	r3, [r3, #0]
 802c106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802c10a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 802c10c:	687b      	ldr	r3, [r7, #4]
 802c10e:	681b      	ldr	r3, [r3, #0]
 802c110:	617b      	str	r3, [r7, #20]
 802c112:	e00a      	b.n	802c12a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802c114:	687b      	ldr	r3, [r7, #4]
 802c116:	681b      	ldr	r3, [r3, #0]
 802c118:	681a      	ldr	r2, [r3, #0]
 802c11a:	687b      	ldr	r3, [r7, #4]
 802c11c:	681b      	ldr	r3, [r3, #0]
 802c11e:	f022 020e 	bic.w	r2, r2, #14
 802c122:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 802c124:	687b      	ldr	r3, [r7, #4]
 802c126:	681b      	ldr	r3, [r3, #0]
 802c128:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802c12a:	687b      	ldr	r3, [r7, #4]
 802c12c:	681b      	ldr	r3, [r3, #0]
 802c12e:	4a3c      	ldr	r2, [pc, #240]	; (802c220 <HAL_DMA_Abort+0x214>)
 802c130:	4293      	cmp	r3, r2
 802c132:	d072      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c134:	687b      	ldr	r3, [r7, #4]
 802c136:	681b      	ldr	r3, [r3, #0]
 802c138:	4a3a      	ldr	r2, [pc, #232]	; (802c224 <HAL_DMA_Abort+0x218>)
 802c13a:	4293      	cmp	r3, r2
 802c13c:	d06d      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c13e:	687b      	ldr	r3, [r7, #4]
 802c140:	681b      	ldr	r3, [r3, #0]
 802c142:	4a39      	ldr	r2, [pc, #228]	; (802c228 <HAL_DMA_Abort+0x21c>)
 802c144:	4293      	cmp	r3, r2
 802c146:	d068      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c148:	687b      	ldr	r3, [r7, #4]
 802c14a:	681b      	ldr	r3, [r3, #0]
 802c14c:	4a37      	ldr	r2, [pc, #220]	; (802c22c <HAL_DMA_Abort+0x220>)
 802c14e:	4293      	cmp	r3, r2
 802c150:	d063      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c152:	687b      	ldr	r3, [r7, #4]
 802c154:	681b      	ldr	r3, [r3, #0]
 802c156:	4a36      	ldr	r2, [pc, #216]	; (802c230 <HAL_DMA_Abort+0x224>)
 802c158:	4293      	cmp	r3, r2
 802c15a:	d05e      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c15c:	687b      	ldr	r3, [r7, #4]
 802c15e:	681b      	ldr	r3, [r3, #0]
 802c160:	4a34      	ldr	r2, [pc, #208]	; (802c234 <HAL_DMA_Abort+0x228>)
 802c162:	4293      	cmp	r3, r2
 802c164:	d059      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c166:	687b      	ldr	r3, [r7, #4]
 802c168:	681b      	ldr	r3, [r3, #0]
 802c16a:	4a33      	ldr	r2, [pc, #204]	; (802c238 <HAL_DMA_Abort+0x22c>)
 802c16c:	4293      	cmp	r3, r2
 802c16e:	d054      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c170:	687b      	ldr	r3, [r7, #4]
 802c172:	681b      	ldr	r3, [r3, #0]
 802c174:	4a31      	ldr	r2, [pc, #196]	; (802c23c <HAL_DMA_Abort+0x230>)
 802c176:	4293      	cmp	r3, r2
 802c178:	d04f      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c17a:	687b      	ldr	r3, [r7, #4]
 802c17c:	681b      	ldr	r3, [r3, #0]
 802c17e:	4a30      	ldr	r2, [pc, #192]	; (802c240 <HAL_DMA_Abort+0x234>)
 802c180:	4293      	cmp	r3, r2
 802c182:	d04a      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c184:	687b      	ldr	r3, [r7, #4]
 802c186:	681b      	ldr	r3, [r3, #0]
 802c188:	4a2e      	ldr	r2, [pc, #184]	; (802c244 <HAL_DMA_Abort+0x238>)
 802c18a:	4293      	cmp	r3, r2
 802c18c:	d045      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c18e:	687b      	ldr	r3, [r7, #4]
 802c190:	681b      	ldr	r3, [r3, #0]
 802c192:	4a2d      	ldr	r2, [pc, #180]	; (802c248 <HAL_DMA_Abort+0x23c>)
 802c194:	4293      	cmp	r3, r2
 802c196:	d040      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c198:	687b      	ldr	r3, [r7, #4]
 802c19a:	681b      	ldr	r3, [r3, #0]
 802c19c:	4a2b      	ldr	r2, [pc, #172]	; (802c24c <HAL_DMA_Abort+0x240>)
 802c19e:	4293      	cmp	r3, r2
 802c1a0:	d03b      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c1a2:	687b      	ldr	r3, [r7, #4]
 802c1a4:	681b      	ldr	r3, [r3, #0]
 802c1a6:	4a2a      	ldr	r2, [pc, #168]	; (802c250 <HAL_DMA_Abort+0x244>)
 802c1a8:	4293      	cmp	r3, r2
 802c1aa:	d036      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c1ac:	687b      	ldr	r3, [r7, #4]
 802c1ae:	681b      	ldr	r3, [r3, #0]
 802c1b0:	4a28      	ldr	r2, [pc, #160]	; (802c254 <HAL_DMA_Abort+0x248>)
 802c1b2:	4293      	cmp	r3, r2
 802c1b4:	d031      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c1b6:	687b      	ldr	r3, [r7, #4]
 802c1b8:	681b      	ldr	r3, [r3, #0]
 802c1ba:	4a27      	ldr	r2, [pc, #156]	; (802c258 <HAL_DMA_Abort+0x24c>)
 802c1bc:	4293      	cmp	r3, r2
 802c1be:	d02c      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c1c0:	687b      	ldr	r3, [r7, #4]
 802c1c2:	681b      	ldr	r3, [r3, #0]
 802c1c4:	4a25      	ldr	r2, [pc, #148]	; (802c25c <HAL_DMA_Abort+0x250>)
 802c1c6:	4293      	cmp	r3, r2
 802c1c8:	d027      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c1ca:	687b      	ldr	r3, [r7, #4]
 802c1cc:	681b      	ldr	r3, [r3, #0]
 802c1ce:	4a24      	ldr	r2, [pc, #144]	; (802c260 <HAL_DMA_Abort+0x254>)
 802c1d0:	4293      	cmp	r3, r2
 802c1d2:	d022      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c1d4:	687b      	ldr	r3, [r7, #4]
 802c1d6:	681b      	ldr	r3, [r3, #0]
 802c1d8:	4a22      	ldr	r2, [pc, #136]	; (802c264 <HAL_DMA_Abort+0x258>)
 802c1da:	4293      	cmp	r3, r2
 802c1dc:	d01d      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c1de:	687b      	ldr	r3, [r7, #4]
 802c1e0:	681b      	ldr	r3, [r3, #0]
 802c1e2:	4a21      	ldr	r2, [pc, #132]	; (802c268 <HAL_DMA_Abort+0x25c>)
 802c1e4:	4293      	cmp	r3, r2
 802c1e6:	d018      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c1e8:	687b      	ldr	r3, [r7, #4]
 802c1ea:	681b      	ldr	r3, [r3, #0]
 802c1ec:	4a1f      	ldr	r2, [pc, #124]	; (802c26c <HAL_DMA_Abort+0x260>)
 802c1ee:	4293      	cmp	r3, r2
 802c1f0:	d013      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c1f2:	687b      	ldr	r3, [r7, #4]
 802c1f4:	681b      	ldr	r3, [r3, #0]
 802c1f6:	4a1e      	ldr	r2, [pc, #120]	; (802c270 <HAL_DMA_Abort+0x264>)
 802c1f8:	4293      	cmp	r3, r2
 802c1fa:	d00e      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c1fc:	687b      	ldr	r3, [r7, #4]
 802c1fe:	681b      	ldr	r3, [r3, #0]
 802c200:	4a1c      	ldr	r2, [pc, #112]	; (802c274 <HAL_DMA_Abort+0x268>)
 802c202:	4293      	cmp	r3, r2
 802c204:	d009      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c206:	687b      	ldr	r3, [r7, #4]
 802c208:	681b      	ldr	r3, [r3, #0]
 802c20a:	4a1b      	ldr	r2, [pc, #108]	; (802c278 <HAL_DMA_Abort+0x26c>)
 802c20c:	4293      	cmp	r3, r2
 802c20e:	d004      	beq.n	802c21a <HAL_DMA_Abort+0x20e>
 802c210:	687b      	ldr	r3, [r7, #4]
 802c212:	681b      	ldr	r3, [r3, #0]
 802c214:	4a19      	ldr	r2, [pc, #100]	; (802c27c <HAL_DMA_Abort+0x270>)
 802c216:	4293      	cmp	r3, r2
 802c218:	d132      	bne.n	802c280 <HAL_DMA_Abort+0x274>
 802c21a:	2301      	movs	r3, #1
 802c21c:	e031      	b.n	802c282 <HAL_DMA_Abort+0x276>
 802c21e:	bf00      	nop
 802c220:	40020010 	.word	0x40020010
 802c224:	40020028 	.word	0x40020028
 802c228:	40020040 	.word	0x40020040
 802c22c:	40020058 	.word	0x40020058
 802c230:	40020070 	.word	0x40020070
 802c234:	40020088 	.word	0x40020088
 802c238:	400200a0 	.word	0x400200a0
 802c23c:	400200b8 	.word	0x400200b8
 802c240:	40020410 	.word	0x40020410
 802c244:	40020428 	.word	0x40020428
 802c248:	40020440 	.word	0x40020440
 802c24c:	40020458 	.word	0x40020458
 802c250:	40020470 	.word	0x40020470
 802c254:	40020488 	.word	0x40020488
 802c258:	400204a0 	.word	0x400204a0
 802c25c:	400204b8 	.word	0x400204b8
 802c260:	58025408 	.word	0x58025408
 802c264:	5802541c 	.word	0x5802541c
 802c268:	58025430 	.word	0x58025430
 802c26c:	58025444 	.word	0x58025444
 802c270:	58025458 	.word	0x58025458
 802c274:	5802546c 	.word	0x5802546c
 802c278:	58025480 	.word	0x58025480
 802c27c:	58025494 	.word	0x58025494
 802c280:	2300      	movs	r3, #0
 802c282:	2b00      	cmp	r3, #0
 802c284:	d007      	beq.n	802c296 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802c286:	687b      	ldr	r3, [r7, #4]
 802c288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c28a:	681a      	ldr	r2, [r3, #0]
 802c28c:	687b      	ldr	r3, [r7, #4]
 802c28e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c294:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802c296:	687b      	ldr	r3, [r7, #4]
 802c298:	681b      	ldr	r3, [r3, #0]
 802c29a:	4a6d      	ldr	r2, [pc, #436]	; (802c450 <HAL_DMA_Abort+0x444>)
 802c29c:	4293      	cmp	r3, r2
 802c29e:	d04a      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c2a0:	687b      	ldr	r3, [r7, #4]
 802c2a2:	681b      	ldr	r3, [r3, #0]
 802c2a4:	4a6b      	ldr	r2, [pc, #428]	; (802c454 <HAL_DMA_Abort+0x448>)
 802c2a6:	4293      	cmp	r3, r2
 802c2a8:	d045      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c2aa:	687b      	ldr	r3, [r7, #4]
 802c2ac:	681b      	ldr	r3, [r3, #0]
 802c2ae:	4a6a      	ldr	r2, [pc, #424]	; (802c458 <HAL_DMA_Abort+0x44c>)
 802c2b0:	4293      	cmp	r3, r2
 802c2b2:	d040      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c2b4:	687b      	ldr	r3, [r7, #4]
 802c2b6:	681b      	ldr	r3, [r3, #0]
 802c2b8:	4a68      	ldr	r2, [pc, #416]	; (802c45c <HAL_DMA_Abort+0x450>)
 802c2ba:	4293      	cmp	r3, r2
 802c2bc:	d03b      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c2be:	687b      	ldr	r3, [r7, #4]
 802c2c0:	681b      	ldr	r3, [r3, #0]
 802c2c2:	4a67      	ldr	r2, [pc, #412]	; (802c460 <HAL_DMA_Abort+0x454>)
 802c2c4:	4293      	cmp	r3, r2
 802c2c6:	d036      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c2c8:	687b      	ldr	r3, [r7, #4]
 802c2ca:	681b      	ldr	r3, [r3, #0]
 802c2cc:	4a65      	ldr	r2, [pc, #404]	; (802c464 <HAL_DMA_Abort+0x458>)
 802c2ce:	4293      	cmp	r3, r2
 802c2d0:	d031      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c2d2:	687b      	ldr	r3, [r7, #4]
 802c2d4:	681b      	ldr	r3, [r3, #0]
 802c2d6:	4a64      	ldr	r2, [pc, #400]	; (802c468 <HAL_DMA_Abort+0x45c>)
 802c2d8:	4293      	cmp	r3, r2
 802c2da:	d02c      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c2dc:	687b      	ldr	r3, [r7, #4]
 802c2de:	681b      	ldr	r3, [r3, #0]
 802c2e0:	4a62      	ldr	r2, [pc, #392]	; (802c46c <HAL_DMA_Abort+0x460>)
 802c2e2:	4293      	cmp	r3, r2
 802c2e4:	d027      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c2e6:	687b      	ldr	r3, [r7, #4]
 802c2e8:	681b      	ldr	r3, [r3, #0]
 802c2ea:	4a61      	ldr	r2, [pc, #388]	; (802c470 <HAL_DMA_Abort+0x464>)
 802c2ec:	4293      	cmp	r3, r2
 802c2ee:	d022      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c2f0:	687b      	ldr	r3, [r7, #4]
 802c2f2:	681b      	ldr	r3, [r3, #0]
 802c2f4:	4a5f      	ldr	r2, [pc, #380]	; (802c474 <HAL_DMA_Abort+0x468>)
 802c2f6:	4293      	cmp	r3, r2
 802c2f8:	d01d      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c2fa:	687b      	ldr	r3, [r7, #4]
 802c2fc:	681b      	ldr	r3, [r3, #0]
 802c2fe:	4a5e      	ldr	r2, [pc, #376]	; (802c478 <HAL_DMA_Abort+0x46c>)
 802c300:	4293      	cmp	r3, r2
 802c302:	d018      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c304:	687b      	ldr	r3, [r7, #4]
 802c306:	681b      	ldr	r3, [r3, #0]
 802c308:	4a5c      	ldr	r2, [pc, #368]	; (802c47c <HAL_DMA_Abort+0x470>)
 802c30a:	4293      	cmp	r3, r2
 802c30c:	d013      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c30e:	687b      	ldr	r3, [r7, #4]
 802c310:	681b      	ldr	r3, [r3, #0]
 802c312:	4a5b      	ldr	r2, [pc, #364]	; (802c480 <HAL_DMA_Abort+0x474>)
 802c314:	4293      	cmp	r3, r2
 802c316:	d00e      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c318:	687b      	ldr	r3, [r7, #4]
 802c31a:	681b      	ldr	r3, [r3, #0]
 802c31c:	4a59      	ldr	r2, [pc, #356]	; (802c484 <HAL_DMA_Abort+0x478>)
 802c31e:	4293      	cmp	r3, r2
 802c320:	d009      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c322:	687b      	ldr	r3, [r7, #4]
 802c324:	681b      	ldr	r3, [r3, #0]
 802c326:	4a58      	ldr	r2, [pc, #352]	; (802c488 <HAL_DMA_Abort+0x47c>)
 802c328:	4293      	cmp	r3, r2
 802c32a:	d004      	beq.n	802c336 <HAL_DMA_Abort+0x32a>
 802c32c:	687b      	ldr	r3, [r7, #4]
 802c32e:	681b      	ldr	r3, [r3, #0]
 802c330:	4a56      	ldr	r2, [pc, #344]	; (802c48c <HAL_DMA_Abort+0x480>)
 802c332:	4293      	cmp	r3, r2
 802c334:	d108      	bne.n	802c348 <HAL_DMA_Abort+0x33c>
 802c336:	687b      	ldr	r3, [r7, #4]
 802c338:	681b      	ldr	r3, [r3, #0]
 802c33a:	681a      	ldr	r2, [r3, #0]
 802c33c:	687b      	ldr	r3, [r7, #4]
 802c33e:	681b      	ldr	r3, [r3, #0]
 802c340:	f022 0201 	bic.w	r2, r2, #1
 802c344:	601a      	str	r2, [r3, #0]
 802c346:	e007      	b.n	802c358 <HAL_DMA_Abort+0x34c>
 802c348:	687b      	ldr	r3, [r7, #4]
 802c34a:	681b      	ldr	r3, [r3, #0]
 802c34c:	681a      	ldr	r2, [r3, #0]
 802c34e:	687b      	ldr	r3, [r7, #4]
 802c350:	681b      	ldr	r3, [r3, #0]
 802c352:	f022 0201 	bic.w	r2, r2, #1
 802c356:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802c358:	e013      	b.n	802c382 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802c35a:	f7fe fb95 	bl	802aa88 <HAL_GetTick>
 802c35e:	4602      	mov	r2, r0
 802c360:	693b      	ldr	r3, [r7, #16]
 802c362:	1ad3      	subs	r3, r2, r3
 802c364:	2b05      	cmp	r3, #5
 802c366:	d90c      	bls.n	802c382 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802c368:	687b      	ldr	r3, [r7, #4]
 802c36a:	2220      	movs	r2, #32
 802c36c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802c36e:	687b      	ldr	r3, [r7, #4]
 802c370:	2203      	movs	r2, #3
 802c372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802c376:	687b      	ldr	r3, [r7, #4]
 802c378:	2200      	movs	r2, #0
 802c37a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 802c37e:	2301      	movs	r3, #1
 802c380:	e12d      	b.n	802c5de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802c382:	697b      	ldr	r3, [r7, #20]
 802c384:	681b      	ldr	r3, [r3, #0]
 802c386:	f003 0301 	and.w	r3, r3, #1
 802c38a:	2b00      	cmp	r3, #0
 802c38c:	d1e5      	bne.n	802c35a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c38e:	687b      	ldr	r3, [r7, #4]
 802c390:	681b      	ldr	r3, [r3, #0]
 802c392:	4a2f      	ldr	r2, [pc, #188]	; (802c450 <HAL_DMA_Abort+0x444>)
 802c394:	4293      	cmp	r3, r2
 802c396:	d04a      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c398:	687b      	ldr	r3, [r7, #4]
 802c39a:	681b      	ldr	r3, [r3, #0]
 802c39c:	4a2d      	ldr	r2, [pc, #180]	; (802c454 <HAL_DMA_Abort+0x448>)
 802c39e:	4293      	cmp	r3, r2
 802c3a0:	d045      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c3a2:	687b      	ldr	r3, [r7, #4]
 802c3a4:	681b      	ldr	r3, [r3, #0]
 802c3a6:	4a2c      	ldr	r2, [pc, #176]	; (802c458 <HAL_DMA_Abort+0x44c>)
 802c3a8:	4293      	cmp	r3, r2
 802c3aa:	d040      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c3ac:	687b      	ldr	r3, [r7, #4]
 802c3ae:	681b      	ldr	r3, [r3, #0]
 802c3b0:	4a2a      	ldr	r2, [pc, #168]	; (802c45c <HAL_DMA_Abort+0x450>)
 802c3b2:	4293      	cmp	r3, r2
 802c3b4:	d03b      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c3b6:	687b      	ldr	r3, [r7, #4]
 802c3b8:	681b      	ldr	r3, [r3, #0]
 802c3ba:	4a29      	ldr	r2, [pc, #164]	; (802c460 <HAL_DMA_Abort+0x454>)
 802c3bc:	4293      	cmp	r3, r2
 802c3be:	d036      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c3c0:	687b      	ldr	r3, [r7, #4]
 802c3c2:	681b      	ldr	r3, [r3, #0]
 802c3c4:	4a27      	ldr	r2, [pc, #156]	; (802c464 <HAL_DMA_Abort+0x458>)
 802c3c6:	4293      	cmp	r3, r2
 802c3c8:	d031      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c3ca:	687b      	ldr	r3, [r7, #4]
 802c3cc:	681b      	ldr	r3, [r3, #0]
 802c3ce:	4a26      	ldr	r2, [pc, #152]	; (802c468 <HAL_DMA_Abort+0x45c>)
 802c3d0:	4293      	cmp	r3, r2
 802c3d2:	d02c      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c3d4:	687b      	ldr	r3, [r7, #4]
 802c3d6:	681b      	ldr	r3, [r3, #0]
 802c3d8:	4a24      	ldr	r2, [pc, #144]	; (802c46c <HAL_DMA_Abort+0x460>)
 802c3da:	4293      	cmp	r3, r2
 802c3dc:	d027      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c3de:	687b      	ldr	r3, [r7, #4]
 802c3e0:	681b      	ldr	r3, [r3, #0]
 802c3e2:	4a23      	ldr	r2, [pc, #140]	; (802c470 <HAL_DMA_Abort+0x464>)
 802c3e4:	4293      	cmp	r3, r2
 802c3e6:	d022      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c3e8:	687b      	ldr	r3, [r7, #4]
 802c3ea:	681b      	ldr	r3, [r3, #0]
 802c3ec:	4a21      	ldr	r2, [pc, #132]	; (802c474 <HAL_DMA_Abort+0x468>)
 802c3ee:	4293      	cmp	r3, r2
 802c3f0:	d01d      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c3f2:	687b      	ldr	r3, [r7, #4]
 802c3f4:	681b      	ldr	r3, [r3, #0]
 802c3f6:	4a20      	ldr	r2, [pc, #128]	; (802c478 <HAL_DMA_Abort+0x46c>)
 802c3f8:	4293      	cmp	r3, r2
 802c3fa:	d018      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c3fc:	687b      	ldr	r3, [r7, #4]
 802c3fe:	681b      	ldr	r3, [r3, #0]
 802c400:	4a1e      	ldr	r2, [pc, #120]	; (802c47c <HAL_DMA_Abort+0x470>)
 802c402:	4293      	cmp	r3, r2
 802c404:	d013      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c406:	687b      	ldr	r3, [r7, #4]
 802c408:	681b      	ldr	r3, [r3, #0]
 802c40a:	4a1d      	ldr	r2, [pc, #116]	; (802c480 <HAL_DMA_Abort+0x474>)
 802c40c:	4293      	cmp	r3, r2
 802c40e:	d00e      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c410:	687b      	ldr	r3, [r7, #4]
 802c412:	681b      	ldr	r3, [r3, #0]
 802c414:	4a1b      	ldr	r2, [pc, #108]	; (802c484 <HAL_DMA_Abort+0x478>)
 802c416:	4293      	cmp	r3, r2
 802c418:	d009      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c41a:	687b      	ldr	r3, [r7, #4]
 802c41c:	681b      	ldr	r3, [r3, #0]
 802c41e:	4a1a      	ldr	r2, [pc, #104]	; (802c488 <HAL_DMA_Abort+0x47c>)
 802c420:	4293      	cmp	r3, r2
 802c422:	d004      	beq.n	802c42e <HAL_DMA_Abort+0x422>
 802c424:	687b      	ldr	r3, [r7, #4]
 802c426:	681b      	ldr	r3, [r3, #0]
 802c428:	4a18      	ldr	r2, [pc, #96]	; (802c48c <HAL_DMA_Abort+0x480>)
 802c42a:	4293      	cmp	r3, r2
 802c42c:	d101      	bne.n	802c432 <HAL_DMA_Abort+0x426>
 802c42e:	2301      	movs	r3, #1
 802c430:	e000      	b.n	802c434 <HAL_DMA_Abort+0x428>
 802c432:	2300      	movs	r3, #0
 802c434:	2b00      	cmp	r3, #0
 802c436:	d02b      	beq.n	802c490 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802c438:	687b      	ldr	r3, [r7, #4]
 802c43a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c43c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802c43e:	687b      	ldr	r3, [r7, #4]
 802c440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c442:	f003 031f 	and.w	r3, r3, #31
 802c446:	223f      	movs	r2, #63	; 0x3f
 802c448:	409a      	lsls	r2, r3
 802c44a:	68bb      	ldr	r3, [r7, #8]
 802c44c:	609a      	str	r2, [r3, #8]
 802c44e:	e02a      	b.n	802c4a6 <HAL_DMA_Abort+0x49a>
 802c450:	40020010 	.word	0x40020010
 802c454:	40020028 	.word	0x40020028
 802c458:	40020040 	.word	0x40020040
 802c45c:	40020058 	.word	0x40020058
 802c460:	40020070 	.word	0x40020070
 802c464:	40020088 	.word	0x40020088
 802c468:	400200a0 	.word	0x400200a0
 802c46c:	400200b8 	.word	0x400200b8
 802c470:	40020410 	.word	0x40020410
 802c474:	40020428 	.word	0x40020428
 802c478:	40020440 	.word	0x40020440
 802c47c:	40020458 	.word	0x40020458
 802c480:	40020470 	.word	0x40020470
 802c484:	40020488 	.word	0x40020488
 802c488:	400204a0 	.word	0x400204a0
 802c48c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802c490:	687b      	ldr	r3, [r7, #4]
 802c492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c494:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802c496:	687b      	ldr	r3, [r7, #4]
 802c498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c49a:	f003 031f 	and.w	r3, r3, #31
 802c49e:	2201      	movs	r2, #1
 802c4a0:	409a      	lsls	r2, r3
 802c4a2:	68fb      	ldr	r3, [r7, #12]
 802c4a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802c4a6:	687b      	ldr	r3, [r7, #4]
 802c4a8:	681b      	ldr	r3, [r3, #0]
 802c4aa:	4a4f      	ldr	r2, [pc, #316]	; (802c5e8 <HAL_DMA_Abort+0x5dc>)
 802c4ac:	4293      	cmp	r3, r2
 802c4ae:	d072      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c4b0:	687b      	ldr	r3, [r7, #4]
 802c4b2:	681b      	ldr	r3, [r3, #0]
 802c4b4:	4a4d      	ldr	r2, [pc, #308]	; (802c5ec <HAL_DMA_Abort+0x5e0>)
 802c4b6:	4293      	cmp	r3, r2
 802c4b8:	d06d      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c4ba:	687b      	ldr	r3, [r7, #4]
 802c4bc:	681b      	ldr	r3, [r3, #0]
 802c4be:	4a4c      	ldr	r2, [pc, #304]	; (802c5f0 <HAL_DMA_Abort+0x5e4>)
 802c4c0:	4293      	cmp	r3, r2
 802c4c2:	d068      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c4c4:	687b      	ldr	r3, [r7, #4]
 802c4c6:	681b      	ldr	r3, [r3, #0]
 802c4c8:	4a4a      	ldr	r2, [pc, #296]	; (802c5f4 <HAL_DMA_Abort+0x5e8>)
 802c4ca:	4293      	cmp	r3, r2
 802c4cc:	d063      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c4ce:	687b      	ldr	r3, [r7, #4]
 802c4d0:	681b      	ldr	r3, [r3, #0]
 802c4d2:	4a49      	ldr	r2, [pc, #292]	; (802c5f8 <HAL_DMA_Abort+0x5ec>)
 802c4d4:	4293      	cmp	r3, r2
 802c4d6:	d05e      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c4d8:	687b      	ldr	r3, [r7, #4]
 802c4da:	681b      	ldr	r3, [r3, #0]
 802c4dc:	4a47      	ldr	r2, [pc, #284]	; (802c5fc <HAL_DMA_Abort+0x5f0>)
 802c4de:	4293      	cmp	r3, r2
 802c4e0:	d059      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c4e2:	687b      	ldr	r3, [r7, #4]
 802c4e4:	681b      	ldr	r3, [r3, #0]
 802c4e6:	4a46      	ldr	r2, [pc, #280]	; (802c600 <HAL_DMA_Abort+0x5f4>)
 802c4e8:	4293      	cmp	r3, r2
 802c4ea:	d054      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c4ec:	687b      	ldr	r3, [r7, #4]
 802c4ee:	681b      	ldr	r3, [r3, #0]
 802c4f0:	4a44      	ldr	r2, [pc, #272]	; (802c604 <HAL_DMA_Abort+0x5f8>)
 802c4f2:	4293      	cmp	r3, r2
 802c4f4:	d04f      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c4f6:	687b      	ldr	r3, [r7, #4]
 802c4f8:	681b      	ldr	r3, [r3, #0]
 802c4fa:	4a43      	ldr	r2, [pc, #268]	; (802c608 <HAL_DMA_Abort+0x5fc>)
 802c4fc:	4293      	cmp	r3, r2
 802c4fe:	d04a      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c500:	687b      	ldr	r3, [r7, #4]
 802c502:	681b      	ldr	r3, [r3, #0]
 802c504:	4a41      	ldr	r2, [pc, #260]	; (802c60c <HAL_DMA_Abort+0x600>)
 802c506:	4293      	cmp	r3, r2
 802c508:	d045      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c50a:	687b      	ldr	r3, [r7, #4]
 802c50c:	681b      	ldr	r3, [r3, #0]
 802c50e:	4a40      	ldr	r2, [pc, #256]	; (802c610 <HAL_DMA_Abort+0x604>)
 802c510:	4293      	cmp	r3, r2
 802c512:	d040      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c514:	687b      	ldr	r3, [r7, #4]
 802c516:	681b      	ldr	r3, [r3, #0]
 802c518:	4a3e      	ldr	r2, [pc, #248]	; (802c614 <HAL_DMA_Abort+0x608>)
 802c51a:	4293      	cmp	r3, r2
 802c51c:	d03b      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c51e:	687b      	ldr	r3, [r7, #4]
 802c520:	681b      	ldr	r3, [r3, #0]
 802c522:	4a3d      	ldr	r2, [pc, #244]	; (802c618 <HAL_DMA_Abort+0x60c>)
 802c524:	4293      	cmp	r3, r2
 802c526:	d036      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c528:	687b      	ldr	r3, [r7, #4]
 802c52a:	681b      	ldr	r3, [r3, #0]
 802c52c:	4a3b      	ldr	r2, [pc, #236]	; (802c61c <HAL_DMA_Abort+0x610>)
 802c52e:	4293      	cmp	r3, r2
 802c530:	d031      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c532:	687b      	ldr	r3, [r7, #4]
 802c534:	681b      	ldr	r3, [r3, #0]
 802c536:	4a3a      	ldr	r2, [pc, #232]	; (802c620 <HAL_DMA_Abort+0x614>)
 802c538:	4293      	cmp	r3, r2
 802c53a:	d02c      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c53c:	687b      	ldr	r3, [r7, #4]
 802c53e:	681b      	ldr	r3, [r3, #0]
 802c540:	4a38      	ldr	r2, [pc, #224]	; (802c624 <HAL_DMA_Abort+0x618>)
 802c542:	4293      	cmp	r3, r2
 802c544:	d027      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c546:	687b      	ldr	r3, [r7, #4]
 802c548:	681b      	ldr	r3, [r3, #0]
 802c54a:	4a37      	ldr	r2, [pc, #220]	; (802c628 <HAL_DMA_Abort+0x61c>)
 802c54c:	4293      	cmp	r3, r2
 802c54e:	d022      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c550:	687b      	ldr	r3, [r7, #4]
 802c552:	681b      	ldr	r3, [r3, #0]
 802c554:	4a35      	ldr	r2, [pc, #212]	; (802c62c <HAL_DMA_Abort+0x620>)
 802c556:	4293      	cmp	r3, r2
 802c558:	d01d      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c55a:	687b      	ldr	r3, [r7, #4]
 802c55c:	681b      	ldr	r3, [r3, #0]
 802c55e:	4a34      	ldr	r2, [pc, #208]	; (802c630 <HAL_DMA_Abort+0x624>)
 802c560:	4293      	cmp	r3, r2
 802c562:	d018      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c564:	687b      	ldr	r3, [r7, #4]
 802c566:	681b      	ldr	r3, [r3, #0]
 802c568:	4a32      	ldr	r2, [pc, #200]	; (802c634 <HAL_DMA_Abort+0x628>)
 802c56a:	4293      	cmp	r3, r2
 802c56c:	d013      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c56e:	687b      	ldr	r3, [r7, #4]
 802c570:	681b      	ldr	r3, [r3, #0]
 802c572:	4a31      	ldr	r2, [pc, #196]	; (802c638 <HAL_DMA_Abort+0x62c>)
 802c574:	4293      	cmp	r3, r2
 802c576:	d00e      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c578:	687b      	ldr	r3, [r7, #4]
 802c57a:	681b      	ldr	r3, [r3, #0]
 802c57c:	4a2f      	ldr	r2, [pc, #188]	; (802c63c <HAL_DMA_Abort+0x630>)
 802c57e:	4293      	cmp	r3, r2
 802c580:	d009      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c582:	687b      	ldr	r3, [r7, #4]
 802c584:	681b      	ldr	r3, [r3, #0]
 802c586:	4a2e      	ldr	r2, [pc, #184]	; (802c640 <HAL_DMA_Abort+0x634>)
 802c588:	4293      	cmp	r3, r2
 802c58a:	d004      	beq.n	802c596 <HAL_DMA_Abort+0x58a>
 802c58c:	687b      	ldr	r3, [r7, #4]
 802c58e:	681b      	ldr	r3, [r3, #0]
 802c590:	4a2c      	ldr	r2, [pc, #176]	; (802c644 <HAL_DMA_Abort+0x638>)
 802c592:	4293      	cmp	r3, r2
 802c594:	d101      	bne.n	802c59a <HAL_DMA_Abort+0x58e>
 802c596:	2301      	movs	r3, #1
 802c598:	e000      	b.n	802c59c <HAL_DMA_Abort+0x590>
 802c59a:	2300      	movs	r3, #0
 802c59c:	2b00      	cmp	r3, #0
 802c59e:	d015      	beq.n	802c5cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802c5a0:	687b      	ldr	r3, [r7, #4]
 802c5a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802c5a4:	687a      	ldr	r2, [r7, #4]
 802c5a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802c5a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 802c5aa:	687b      	ldr	r3, [r7, #4]
 802c5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c5ae:	2b00      	cmp	r3, #0
 802c5b0:	d00c      	beq.n	802c5cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802c5b2:	687b      	ldr	r3, [r7, #4]
 802c5b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c5b6:	681a      	ldr	r2, [r3, #0]
 802c5b8:	687b      	ldr	r3, [r7, #4]
 802c5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c5bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c5c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802c5c2:	687b      	ldr	r3, [r7, #4]
 802c5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c5c6:	687a      	ldr	r2, [r7, #4]
 802c5c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802c5ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 802c5cc:	687b      	ldr	r3, [r7, #4]
 802c5ce:	2201      	movs	r2, #1
 802c5d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802c5d4:	687b      	ldr	r3, [r7, #4]
 802c5d6:	2200      	movs	r2, #0
 802c5d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 802c5dc:	2300      	movs	r3, #0
}
 802c5de:	4618      	mov	r0, r3
 802c5e0:	3718      	adds	r7, #24
 802c5e2:	46bd      	mov	sp, r7
 802c5e4:	bd80      	pop	{r7, pc}
 802c5e6:	bf00      	nop
 802c5e8:	40020010 	.word	0x40020010
 802c5ec:	40020028 	.word	0x40020028
 802c5f0:	40020040 	.word	0x40020040
 802c5f4:	40020058 	.word	0x40020058
 802c5f8:	40020070 	.word	0x40020070
 802c5fc:	40020088 	.word	0x40020088
 802c600:	400200a0 	.word	0x400200a0
 802c604:	400200b8 	.word	0x400200b8
 802c608:	40020410 	.word	0x40020410
 802c60c:	40020428 	.word	0x40020428
 802c610:	40020440 	.word	0x40020440
 802c614:	40020458 	.word	0x40020458
 802c618:	40020470 	.word	0x40020470
 802c61c:	40020488 	.word	0x40020488
 802c620:	400204a0 	.word	0x400204a0
 802c624:	400204b8 	.word	0x400204b8
 802c628:	58025408 	.word	0x58025408
 802c62c:	5802541c 	.word	0x5802541c
 802c630:	58025430 	.word	0x58025430
 802c634:	58025444 	.word	0x58025444
 802c638:	58025458 	.word	0x58025458
 802c63c:	5802546c 	.word	0x5802546c
 802c640:	58025480 	.word	0x58025480
 802c644:	58025494 	.word	0x58025494

0802c648 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802c648:	b580      	push	{r7, lr}
 802c64a:	b084      	sub	sp, #16
 802c64c:	af00      	add	r7, sp, #0
 802c64e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802c650:	687b      	ldr	r3, [r7, #4]
 802c652:	2b00      	cmp	r3, #0
 802c654:	d101      	bne.n	802c65a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 802c656:	2301      	movs	r3, #1
 802c658:	e237      	b.n	802caca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 802c65a:	687b      	ldr	r3, [r7, #4]
 802c65c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802c660:	b2db      	uxtb	r3, r3
 802c662:	2b02      	cmp	r3, #2
 802c664:	d004      	beq.n	802c670 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802c666:	687b      	ldr	r3, [r7, #4]
 802c668:	2280      	movs	r2, #128	; 0x80
 802c66a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802c66c:	2301      	movs	r3, #1
 802c66e:	e22c      	b.n	802caca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c670:	687b      	ldr	r3, [r7, #4]
 802c672:	681b      	ldr	r3, [r3, #0]
 802c674:	4a5c      	ldr	r2, [pc, #368]	; (802c7e8 <HAL_DMA_Abort_IT+0x1a0>)
 802c676:	4293      	cmp	r3, r2
 802c678:	d04a      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c67a:	687b      	ldr	r3, [r7, #4]
 802c67c:	681b      	ldr	r3, [r3, #0]
 802c67e:	4a5b      	ldr	r2, [pc, #364]	; (802c7ec <HAL_DMA_Abort_IT+0x1a4>)
 802c680:	4293      	cmp	r3, r2
 802c682:	d045      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c684:	687b      	ldr	r3, [r7, #4]
 802c686:	681b      	ldr	r3, [r3, #0]
 802c688:	4a59      	ldr	r2, [pc, #356]	; (802c7f0 <HAL_DMA_Abort_IT+0x1a8>)
 802c68a:	4293      	cmp	r3, r2
 802c68c:	d040      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c68e:	687b      	ldr	r3, [r7, #4]
 802c690:	681b      	ldr	r3, [r3, #0]
 802c692:	4a58      	ldr	r2, [pc, #352]	; (802c7f4 <HAL_DMA_Abort_IT+0x1ac>)
 802c694:	4293      	cmp	r3, r2
 802c696:	d03b      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c698:	687b      	ldr	r3, [r7, #4]
 802c69a:	681b      	ldr	r3, [r3, #0]
 802c69c:	4a56      	ldr	r2, [pc, #344]	; (802c7f8 <HAL_DMA_Abort_IT+0x1b0>)
 802c69e:	4293      	cmp	r3, r2
 802c6a0:	d036      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c6a2:	687b      	ldr	r3, [r7, #4]
 802c6a4:	681b      	ldr	r3, [r3, #0]
 802c6a6:	4a55      	ldr	r2, [pc, #340]	; (802c7fc <HAL_DMA_Abort_IT+0x1b4>)
 802c6a8:	4293      	cmp	r3, r2
 802c6aa:	d031      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c6ac:	687b      	ldr	r3, [r7, #4]
 802c6ae:	681b      	ldr	r3, [r3, #0]
 802c6b0:	4a53      	ldr	r2, [pc, #332]	; (802c800 <HAL_DMA_Abort_IT+0x1b8>)
 802c6b2:	4293      	cmp	r3, r2
 802c6b4:	d02c      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c6b6:	687b      	ldr	r3, [r7, #4]
 802c6b8:	681b      	ldr	r3, [r3, #0]
 802c6ba:	4a52      	ldr	r2, [pc, #328]	; (802c804 <HAL_DMA_Abort_IT+0x1bc>)
 802c6bc:	4293      	cmp	r3, r2
 802c6be:	d027      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c6c0:	687b      	ldr	r3, [r7, #4]
 802c6c2:	681b      	ldr	r3, [r3, #0]
 802c6c4:	4a50      	ldr	r2, [pc, #320]	; (802c808 <HAL_DMA_Abort_IT+0x1c0>)
 802c6c6:	4293      	cmp	r3, r2
 802c6c8:	d022      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c6ca:	687b      	ldr	r3, [r7, #4]
 802c6cc:	681b      	ldr	r3, [r3, #0]
 802c6ce:	4a4f      	ldr	r2, [pc, #316]	; (802c80c <HAL_DMA_Abort_IT+0x1c4>)
 802c6d0:	4293      	cmp	r3, r2
 802c6d2:	d01d      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c6d4:	687b      	ldr	r3, [r7, #4]
 802c6d6:	681b      	ldr	r3, [r3, #0]
 802c6d8:	4a4d      	ldr	r2, [pc, #308]	; (802c810 <HAL_DMA_Abort_IT+0x1c8>)
 802c6da:	4293      	cmp	r3, r2
 802c6dc:	d018      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c6de:	687b      	ldr	r3, [r7, #4]
 802c6e0:	681b      	ldr	r3, [r3, #0]
 802c6e2:	4a4c      	ldr	r2, [pc, #304]	; (802c814 <HAL_DMA_Abort_IT+0x1cc>)
 802c6e4:	4293      	cmp	r3, r2
 802c6e6:	d013      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c6e8:	687b      	ldr	r3, [r7, #4]
 802c6ea:	681b      	ldr	r3, [r3, #0]
 802c6ec:	4a4a      	ldr	r2, [pc, #296]	; (802c818 <HAL_DMA_Abort_IT+0x1d0>)
 802c6ee:	4293      	cmp	r3, r2
 802c6f0:	d00e      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c6f2:	687b      	ldr	r3, [r7, #4]
 802c6f4:	681b      	ldr	r3, [r3, #0]
 802c6f6:	4a49      	ldr	r2, [pc, #292]	; (802c81c <HAL_DMA_Abort_IT+0x1d4>)
 802c6f8:	4293      	cmp	r3, r2
 802c6fa:	d009      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c6fc:	687b      	ldr	r3, [r7, #4]
 802c6fe:	681b      	ldr	r3, [r3, #0]
 802c700:	4a47      	ldr	r2, [pc, #284]	; (802c820 <HAL_DMA_Abort_IT+0x1d8>)
 802c702:	4293      	cmp	r3, r2
 802c704:	d004      	beq.n	802c710 <HAL_DMA_Abort_IT+0xc8>
 802c706:	687b      	ldr	r3, [r7, #4]
 802c708:	681b      	ldr	r3, [r3, #0]
 802c70a:	4a46      	ldr	r2, [pc, #280]	; (802c824 <HAL_DMA_Abort_IT+0x1dc>)
 802c70c:	4293      	cmp	r3, r2
 802c70e:	d101      	bne.n	802c714 <HAL_DMA_Abort_IT+0xcc>
 802c710:	2301      	movs	r3, #1
 802c712:	e000      	b.n	802c716 <HAL_DMA_Abort_IT+0xce>
 802c714:	2300      	movs	r3, #0
 802c716:	2b00      	cmp	r3, #0
 802c718:	f000 8086 	beq.w	802c828 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 802c71c:	687b      	ldr	r3, [r7, #4]
 802c71e:	2204      	movs	r2, #4
 802c720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802c724:	687b      	ldr	r3, [r7, #4]
 802c726:	681b      	ldr	r3, [r3, #0]
 802c728:	4a2f      	ldr	r2, [pc, #188]	; (802c7e8 <HAL_DMA_Abort_IT+0x1a0>)
 802c72a:	4293      	cmp	r3, r2
 802c72c:	d04a      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c72e:	687b      	ldr	r3, [r7, #4]
 802c730:	681b      	ldr	r3, [r3, #0]
 802c732:	4a2e      	ldr	r2, [pc, #184]	; (802c7ec <HAL_DMA_Abort_IT+0x1a4>)
 802c734:	4293      	cmp	r3, r2
 802c736:	d045      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c738:	687b      	ldr	r3, [r7, #4]
 802c73a:	681b      	ldr	r3, [r3, #0]
 802c73c:	4a2c      	ldr	r2, [pc, #176]	; (802c7f0 <HAL_DMA_Abort_IT+0x1a8>)
 802c73e:	4293      	cmp	r3, r2
 802c740:	d040      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c742:	687b      	ldr	r3, [r7, #4]
 802c744:	681b      	ldr	r3, [r3, #0]
 802c746:	4a2b      	ldr	r2, [pc, #172]	; (802c7f4 <HAL_DMA_Abort_IT+0x1ac>)
 802c748:	4293      	cmp	r3, r2
 802c74a:	d03b      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c74c:	687b      	ldr	r3, [r7, #4]
 802c74e:	681b      	ldr	r3, [r3, #0]
 802c750:	4a29      	ldr	r2, [pc, #164]	; (802c7f8 <HAL_DMA_Abort_IT+0x1b0>)
 802c752:	4293      	cmp	r3, r2
 802c754:	d036      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c756:	687b      	ldr	r3, [r7, #4]
 802c758:	681b      	ldr	r3, [r3, #0]
 802c75a:	4a28      	ldr	r2, [pc, #160]	; (802c7fc <HAL_DMA_Abort_IT+0x1b4>)
 802c75c:	4293      	cmp	r3, r2
 802c75e:	d031      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c760:	687b      	ldr	r3, [r7, #4]
 802c762:	681b      	ldr	r3, [r3, #0]
 802c764:	4a26      	ldr	r2, [pc, #152]	; (802c800 <HAL_DMA_Abort_IT+0x1b8>)
 802c766:	4293      	cmp	r3, r2
 802c768:	d02c      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c76a:	687b      	ldr	r3, [r7, #4]
 802c76c:	681b      	ldr	r3, [r3, #0]
 802c76e:	4a25      	ldr	r2, [pc, #148]	; (802c804 <HAL_DMA_Abort_IT+0x1bc>)
 802c770:	4293      	cmp	r3, r2
 802c772:	d027      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c774:	687b      	ldr	r3, [r7, #4]
 802c776:	681b      	ldr	r3, [r3, #0]
 802c778:	4a23      	ldr	r2, [pc, #140]	; (802c808 <HAL_DMA_Abort_IT+0x1c0>)
 802c77a:	4293      	cmp	r3, r2
 802c77c:	d022      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c77e:	687b      	ldr	r3, [r7, #4]
 802c780:	681b      	ldr	r3, [r3, #0]
 802c782:	4a22      	ldr	r2, [pc, #136]	; (802c80c <HAL_DMA_Abort_IT+0x1c4>)
 802c784:	4293      	cmp	r3, r2
 802c786:	d01d      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c788:	687b      	ldr	r3, [r7, #4]
 802c78a:	681b      	ldr	r3, [r3, #0]
 802c78c:	4a20      	ldr	r2, [pc, #128]	; (802c810 <HAL_DMA_Abort_IT+0x1c8>)
 802c78e:	4293      	cmp	r3, r2
 802c790:	d018      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c792:	687b      	ldr	r3, [r7, #4]
 802c794:	681b      	ldr	r3, [r3, #0]
 802c796:	4a1f      	ldr	r2, [pc, #124]	; (802c814 <HAL_DMA_Abort_IT+0x1cc>)
 802c798:	4293      	cmp	r3, r2
 802c79a:	d013      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c79c:	687b      	ldr	r3, [r7, #4]
 802c79e:	681b      	ldr	r3, [r3, #0]
 802c7a0:	4a1d      	ldr	r2, [pc, #116]	; (802c818 <HAL_DMA_Abort_IT+0x1d0>)
 802c7a2:	4293      	cmp	r3, r2
 802c7a4:	d00e      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c7a6:	687b      	ldr	r3, [r7, #4]
 802c7a8:	681b      	ldr	r3, [r3, #0]
 802c7aa:	4a1c      	ldr	r2, [pc, #112]	; (802c81c <HAL_DMA_Abort_IT+0x1d4>)
 802c7ac:	4293      	cmp	r3, r2
 802c7ae:	d009      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c7b0:	687b      	ldr	r3, [r7, #4]
 802c7b2:	681b      	ldr	r3, [r3, #0]
 802c7b4:	4a1a      	ldr	r2, [pc, #104]	; (802c820 <HAL_DMA_Abort_IT+0x1d8>)
 802c7b6:	4293      	cmp	r3, r2
 802c7b8:	d004      	beq.n	802c7c4 <HAL_DMA_Abort_IT+0x17c>
 802c7ba:	687b      	ldr	r3, [r7, #4]
 802c7bc:	681b      	ldr	r3, [r3, #0]
 802c7be:	4a19      	ldr	r2, [pc, #100]	; (802c824 <HAL_DMA_Abort_IT+0x1dc>)
 802c7c0:	4293      	cmp	r3, r2
 802c7c2:	d108      	bne.n	802c7d6 <HAL_DMA_Abort_IT+0x18e>
 802c7c4:	687b      	ldr	r3, [r7, #4]
 802c7c6:	681b      	ldr	r3, [r3, #0]
 802c7c8:	681a      	ldr	r2, [r3, #0]
 802c7ca:	687b      	ldr	r3, [r7, #4]
 802c7cc:	681b      	ldr	r3, [r3, #0]
 802c7ce:	f022 0201 	bic.w	r2, r2, #1
 802c7d2:	601a      	str	r2, [r3, #0]
 802c7d4:	e178      	b.n	802cac8 <HAL_DMA_Abort_IT+0x480>
 802c7d6:	687b      	ldr	r3, [r7, #4]
 802c7d8:	681b      	ldr	r3, [r3, #0]
 802c7da:	681a      	ldr	r2, [r3, #0]
 802c7dc:	687b      	ldr	r3, [r7, #4]
 802c7de:	681b      	ldr	r3, [r3, #0]
 802c7e0:	f022 0201 	bic.w	r2, r2, #1
 802c7e4:	601a      	str	r2, [r3, #0]
 802c7e6:	e16f      	b.n	802cac8 <HAL_DMA_Abort_IT+0x480>
 802c7e8:	40020010 	.word	0x40020010
 802c7ec:	40020028 	.word	0x40020028
 802c7f0:	40020040 	.word	0x40020040
 802c7f4:	40020058 	.word	0x40020058
 802c7f8:	40020070 	.word	0x40020070
 802c7fc:	40020088 	.word	0x40020088
 802c800:	400200a0 	.word	0x400200a0
 802c804:	400200b8 	.word	0x400200b8
 802c808:	40020410 	.word	0x40020410
 802c80c:	40020428 	.word	0x40020428
 802c810:	40020440 	.word	0x40020440
 802c814:	40020458 	.word	0x40020458
 802c818:	40020470 	.word	0x40020470
 802c81c:	40020488 	.word	0x40020488
 802c820:	400204a0 	.word	0x400204a0
 802c824:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802c828:	687b      	ldr	r3, [r7, #4]
 802c82a:	681b      	ldr	r3, [r3, #0]
 802c82c:	681a      	ldr	r2, [r3, #0]
 802c82e:	687b      	ldr	r3, [r7, #4]
 802c830:	681b      	ldr	r3, [r3, #0]
 802c832:	f022 020e 	bic.w	r2, r2, #14
 802c836:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 802c838:	687b      	ldr	r3, [r7, #4]
 802c83a:	681b      	ldr	r3, [r3, #0]
 802c83c:	4a6c      	ldr	r2, [pc, #432]	; (802c9f0 <HAL_DMA_Abort_IT+0x3a8>)
 802c83e:	4293      	cmp	r3, r2
 802c840:	d04a      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c842:	687b      	ldr	r3, [r7, #4]
 802c844:	681b      	ldr	r3, [r3, #0]
 802c846:	4a6b      	ldr	r2, [pc, #428]	; (802c9f4 <HAL_DMA_Abort_IT+0x3ac>)
 802c848:	4293      	cmp	r3, r2
 802c84a:	d045      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c84c:	687b      	ldr	r3, [r7, #4]
 802c84e:	681b      	ldr	r3, [r3, #0]
 802c850:	4a69      	ldr	r2, [pc, #420]	; (802c9f8 <HAL_DMA_Abort_IT+0x3b0>)
 802c852:	4293      	cmp	r3, r2
 802c854:	d040      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c856:	687b      	ldr	r3, [r7, #4]
 802c858:	681b      	ldr	r3, [r3, #0]
 802c85a:	4a68      	ldr	r2, [pc, #416]	; (802c9fc <HAL_DMA_Abort_IT+0x3b4>)
 802c85c:	4293      	cmp	r3, r2
 802c85e:	d03b      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c860:	687b      	ldr	r3, [r7, #4]
 802c862:	681b      	ldr	r3, [r3, #0]
 802c864:	4a66      	ldr	r2, [pc, #408]	; (802ca00 <HAL_DMA_Abort_IT+0x3b8>)
 802c866:	4293      	cmp	r3, r2
 802c868:	d036      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c86a:	687b      	ldr	r3, [r7, #4]
 802c86c:	681b      	ldr	r3, [r3, #0]
 802c86e:	4a65      	ldr	r2, [pc, #404]	; (802ca04 <HAL_DMA_Abort_IT+0x3bc>)
 802c870:	4293      	cmp	r3, r2
 802c872:	d031      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c874:	687b      	ldr	r3, [r7, #4]
 802c876:	681b      	ldr	r3, [r3, #0]
 802c878:	4a63      	ldr	r2, [pc, #396]	; (802ca08 <HAL_DMA_Abort_IT+0x3c0>)
 802c87a:	4293      	cmp	r3, r2
 802c87c:	d02c      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c87e:	687b      	ldr	r3, [r7, #4]
 802c880:	681b      	ldr	r3, [r3, #0]
 802c882:	4a62      	ldr	r2, [pc, #392]	; (802ca0c <HAL_DMA_Abort_IT+0x3c4>)
 802c884:	4293      	cmp	r3, r2
 802c886:	d027      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c888:	687b      	ldr	r3, [r7, #4]
 802c88a:	681b      	ldr	r3, [r3, #0]
 802c88c:	4a60      	ldr	r2, [pc, #384]	; (802ca10 <HAL_DMA_Abort_IT+0x3c8>)
 802c88e:	4293      	cmp	r3, r2
 802c890:	d022      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c892:	687b      	ldr	r3, [r7, #4]
 802c894:	681b      	ldr	r3, [r3, #0]
 802c896:	4a5f      	ldr	r2, [pc, #380]	; (802ca14 <HAL_DMA_Abort_IT+0x3cc>)
 802c898:	4293      	cmp	r3, r2
 802c89a:	d01d      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c89c:	687b      	ldr	r3, [r7, #4]
 802c89e:	681b      	ldr	r3, [r3, #0]
 802c8a0:	4a5d      	ldr	r2, [pc, #372]	; (802ca18 <HAL_DMA_Abort_IT+0x3d0>)
 802c8a2:	4293      	cmp	r3, r2
 802c8a4:	d018      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c8a6:	687b      	ldr	r3, [r7, #4]
 802c8a8:	681b      	ldr	r3, [r3, #0]
 802c8aa:	4a5c      	ldr	r2, [pc, #368]	; (802ca1c <HAL_DMA_Abort_IT+0x3d4>)
 802c8ac:	4293      	cmp	r3, r2
 802c8ae:	d013      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c8b0:	687b      	ldr	r3, [r7, #4]
 802c8b2:	681b      	ldr	r3, [r3, #0]
 802c8b4:	4a5a      	ldr	r2, [pc, #360]	; (802ca20 <HAL_DMA_Abort_IT+0x3d8>)
 802c8b6:	4293      	cmp	r3, r2
 802c8b8:	d00e      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c8ba:	687b      	ldr	r3, [r7, #4]
 802c8bc:	681b      	ldr	r3, [r3, #0]
 802c8be:	4a59      	ldr	r2, [pc, #356]	; (802ca24 <HAL_DMA_Abort_IT+0x3dc>)
 802c8c0:	4293      	cmp	r3, r2
 802c8c2:	d009      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c8c4:	687b      	ldr	r3, [r7, #4]
 802c8c6:	681b      	ldr	r3, [r3, #0]
 802c8c8:	4a57      	ldr	r2, [pc, #348]	; (802ca28 <HAL_DMA_Abort_IT+0x3e0>)
 802c8ca:	4293      	cmp	r3, r2
 802c8cc:	d004      	beq.n	802c8d8 <HAL_DMA_Abort_IT+0x290>
 802c8ce:	687b      	ldr	r3, [r7, #4]
 802c8d0:	681b      	ldr	r3, [r3, #0]
 802c8d2:	4a56      	ldr	r2, [pc, #344]	; (802ca2c <HAL_DMA_Abort_IT+0x3e4>)
 802c8d4:	4293      	cmp	r3, r2
 802c8d6:	d108      	bne.n	802c8ea <HAL_DMA_Abort_IT+0x2a2>
 802c8d8:	687b      	ldr	r3, [r7, #4]
 802c8da:	681b      	ldr	r3, [r3, #0]
 802c8dc:	681a      	ldr	r2, [r3, #0]
 802c8de:	687b      	ldr	r3, [r7, #4]
 802c8e0:	681b      	ldr	r3, [r3, #0]
 802c8e2:	f022 0201 	bic.w	r2, r2, #1
 802c8e6:	601a      	str	r2, [r3, #0]
 802c8e8:	e007      	b.n	802c8fa <HAL_DMA_Abort_IT+0x2b2>
 802c8ea:	687b      	ldr	r3, [r7, #4]
 802c8ec:	681b      	ldr	r3, [r3, #0]
 802c8ee:	681a      	ldr	r2, [r3, #0]
 802c8f0:	687b      	ldr	r3, [r7, #4]
 802c8f2:	681b      	ldr	r3, [r3, #0]
 802c8f4:	f022 0201 	bic.w	r2, r2, #1
 802c8f8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802c8fa:	687b      	ldr	r3, [r7, #4]
 802c8fc:	681b      	ldr	r3, [r3, #0]
 802c8fe:	4a3c      	ldr	r2, [pc, #240]	; (802c9f0 <HAL_DMA_Abort_IT+0x3a8>)
 802c900:	4293      	cmp	r3, r2
 802c902:	d072      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c904:	687b      	ldr	r3, [r7, #4]
 802c906:	681b      	ldr	r3, [r3, #0]
 802c908:	4a3a      	ldr	r2, [pc, #232]	; (802c9f4 <HAL_DMA_Abort_IT+0x3ac>)
 802c90a:	4293      	cmp	r3, r2
 802c90c:	d06d      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c90e:	687b      	ldr	r3, [r7, #4]
 802c910:	681b      	ldr	r3, [r3, #0]
 802c912:	4a39      	ldr	r2, [pc, #228]	; (802c9f8 <HAL_DMA_Abort_IT+0x3b0>)
 802c914:	4293      	cmp	r3, r2
 802c916:	d068      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c918:	687b      	ldr	r3, [r7, #4]
 802c91a:	681b      	ldr	r3, [r3, #0]
 802c91c:	4a37      	ldr	r2, [pc, #220]	; (802c9fc <HAL_DMA_Abort_IT+0x3b4>)
 802c91e:	4293      	cmp	r3, r2
 802c920:	d063      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c922:	687b      	ldr	r3, [r7, #4]
 802c924:	681b      	ldr	r3, [r3, #0]
 802c926:	4a36      	ldr	r2, [pc, #216]	; (802ca00 <HAL_DMA_Abort_IT+0x3b8>)
 802c928:	4293      	cmp	r3, r2
 802c92a:	d05e      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c92c:	687b      	ldr	r3, [r7, #4]
 802c92e:	681b      	ldr	r3, [r3, #0]
 802c930:	4a34      	ldr	r2, [pc, #208]	; (802ca04 <HAL_DMA_Abort_IT+0x3bc>)
 802c932:	4293      	cmp	r3, r2
 802c934:	d059      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c936:	687b      	ldr	r3, [r7, #4]
 802c938:	681b      	ldr	r3, [r3, #0]
 802c93a:	4a33      	ldr	r2, [pc, #204]	; (802ca08 <HAL_DMA_Abort_IT+0x3c0>)
 802c93c:	4293      	cmp	r3, r2
 802c93e:	d054      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c940:	687b      	ldr	r3, [r7, #4]
 802c942:	681b      	ldr	r3, [r3, #0]
 802c944:	4a31      	ldr	r2, [pc, #196]	; (802ca0c <HAL_DMA_Abort_IT+0x3c4>)
 802c946:	4293      	cmp	r3, r2
 802c948:	d04f      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c94a:	687b      	ldr	r3, [r7, #4]
 802c94c:	681b      	ldr	r3, [r3, #0]
 802c94e:	4a30      	ldr	r2, [pc, #192]	; (802ca10 <HAL_DMA_Abort_IT+0x3c8>)
 802c950:	4293      	cmp	r3, r2
 802c952:	d04a      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c954:	687b      	ldr	r3, [r7, #4]
 802c956:	681b      	ldr	r3, [r3, #0]
 802c958:	4a2e      	ldr	r2, [pc, #184]	; (802ca14 <HAL_DMA_Abort_IT+0x3cc>)
 802c95a:	4293      	cmp	r3, r2
 802c95c:	d045      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c95e:	687b      	ldr	r3, [r7, #4]
 802c960:	681b      	ldr	r3, [r3, #0]
 802c962:	4a2d      	ldr	r2, [pc, #180]	; (802ca18 <HAL_DMA_Abort_IT+0x3d0>)
 802c964:	4293      	cmp	r3, r2
 802c966:	d040      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c968:	687b      	ldr	r3, [r7, #4]
 802c96a:	681b      	ldr	r3, [r3, #0]
 802c96c:	4a2b      	ldr	r2, [pc, #172]	; (802ca1c <HAL_DMA_Abort_IT+0x3d4>)
 802c96e:	4293      	cmp	r3, r2
 802c970:	d03b      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c972:	687b      	ldr	r3, [r7, #4]
 802c974:	681b      	ldr	r3, [r3, #0]
 802c976:	4a2a      	ldr	r2, [pc, #168]	; (802ca20 <HAL_DMA_Abort_IT+0x3d8>)
 802c978:	4293      	cmp	r3, r2
 802c97a:	d036      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c97c:	687b      	ldr	r3, [r7, #4]
 802c97e:	681b      	ldr	r3, [r3, #0]
 802c980:	4a28      	ldr	r2, [pc, #160]	; (802ca24 <HAL_DMA_Abort_IT+0x3dc>)
 802c982:	4293      	cmp	r3, r2
 802c984:	d031      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c986:	687b      	ldr	r3, [r7, #4]
 802c988:	681b      	ldr	r3, [r3, #0]
 802c98a:	4a27      	ldr	r2, [pc, #156]	; (802ca28 <HAL_DMA_Abort_IT+0x3e0>)
 802c98c:	4293      	cmp	r3, r2
 802c98e:	d02c      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c990:	687b      	ldr	r3, [r7, #4]
 802c992:	681b      	ldr	r3, [r3, #0]
 802c994:	4a25      	ldr	r2, [pc, #148]	; (802ca2c <HAL_DMA_Abort_IT+0x3e4>)
 802c996:	4293      	cmp	r3, r2
 802c998:	d027      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c99a:	687b      	ldr	r3, [r7, #4]
 802c99c:	681b      	ldr	r3, [r3, #0]
 802c99e:	4a24      	ldr	r2, [pc, #144]	; (802ca30 <HAL_DMA_Abort_IT+0x3e8>)
 802c9a0:	4293      	cmp	r3, r2
 802c9a2:	d022      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c9a4:	687b      	ldr	r3, [r7, #4]
 802c9a6:	681b      	ldr	r3, [r3, #0]
 802c9a8:	4a22      	ldr	r2, [pc, #136]	; (802ca34 <HAL_DMA_Abort_IT+0x3ec>)
 802c9aa:	4293      	cmp	r3, r2
 802c9ac:	d01d      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c9ae:	687b      	ldr	r3, [r7, #4]
 802c9b0:	681b      	ldr	r3, [r3, #0]
 802c9b2:	4a21      	ldr	r2, [pc, #132]	; (802ca38 <HAL_DMA_Abort_IT+0x3f0>)
 802c9b4:	4293      	cmp	r3, r2
 802c9b6:	d018      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c9b8:	687b      	ldr	r3, [r7, #4]
 802c9ba:	681b      	ldr	r3, [r3, #0]
 802c9bc:	4a1f      	ldr	r2, [pc, #124]	; (802ca3c <HAL_DMA_Abort_IT+0x3f4>)
 802c9be:	4293      	cmp	r3, r2
 802c9c0:	d013      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c9c2:	687b      	ldr	r3, [r7, #4]
 802c9c4:	681b      	ldr	r3, [r3, #0]
 802c9c6:	4a1e      	ldr	r2, [pc, #120]	; (802ca40 <HAL_DMA_Abort_IT+0x3f8>)
 802c9c8:	4293      	cmp	r3, r2
 802c9ca:	d00e      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c9cc:	687b      	ldr	r3, [r7, #4]
 802c9ce:	681b      	ldr	r3, [r3, #0]
 802c9d0:	4a1c      	ldr	r2, [pc, #112]	; (802ca44 <HAL_DMA_Abort_IT+0x3fc>)
 802c9d2:	4293      	cmp	r3, r2
 802c9d4:	d009      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c9d6:	687b      	ldr	r3, [r7, #4]
 802c9d8:	681b      	ldr	r3, [r3, #0]
 802c9da:	4a1b      	ldr	r2, [pc, #108]	; (802ca48 <HAL_DMA_Abort_IT+0x400>)
 802c9dc:	4293      	cmp	r3, r2
 802c9de:	d004      	beq.n	802c9ea <HAL_DMA_Abort_IT+0x3a2>
 802c9e0:	687b      	ldr	r3, [r7, #4]
 802c9e2:	681b      	ldr	r3, [r3, #0]
 802c9e4:	4a19      	ldr	r2, [pc, #100]	; (802ca4c <HAL_DMA_Abort_IT+0x404>)
 802c9e6:	4293      	cmp	r3, r2
 802c9e8:	d132      	bne.n	802ca50 <HAL_DMA_Abort_IT+0x408>
 802c9ea:	2301      	movs	r3, #1
 802c9ec:	e031      	b.n	802ca52 <HAL_DMA_Abort_IT+0x40a>
 802c9ee:	bf00      	nop
 802c9f0:	40020010 	.word	0x40020010
 802c9f4:	40020028 	.word	0x40020028
 802c9f8:	40020040 	.word	0x40020040
 802c9fc:	40020058 	.word	0x40020058
 802ca00:	40020070 	.word	0x40020070
 802ca04:	40020088 	.word	0x40020088
 802ca08:	400200a0 	.word	0x400200a0
 802ca0c:	400200b8 	.word	0x400200b8
 802ca10:	40020410 	.word	0x40020410
 802ca14:	40020428 	.word	0x40020428
 802ca18:	40020440 	.word	0x40020440
 802ca1c:	40020458 	.word	0x40020458
 802ca20:	40020470 	.word	0x40020470
 802ca24:	40020488 	.word	0x40020488
 802ca28:	400204a0 	.word	0x400204a0
 802ca2c:	400204b8 	.word	0x400204b8
 802ca30:	58025408 	.word	0x58025408
 802ca34:	5802541c 	.word	0x5802541c
 802ca38:	58025430 	.word	0x58025430
 802ca3c:	58025444 	.word	0x58025444
 802ca40:	58025458 	.word	0x58025458
 802ca44:	5802546c 	.word	0x5802546c
 802ca48:	58025480 	.word	0x58025480
 802ca4c:	58025494 	.word	0x58025494
 802ca50:	2300      	movs	r3, #0
 802ca52:	2b00      	cmp	r3, #0
 802ca54:	d028      	beq.n	802caa8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802ca56:	687b      	ldr	r3, [r7, #4]
 802ca58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802ca5a:	681a      	ldr	r2, [r3, #0]
 802ca5c:	687b      	ldr	r3, [r7, #4]
 802ca5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802ca60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802ca64:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802ca66:	687b      	ldr	r3, [r7, #4]
 802ca68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802ca6a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802ca6c:	687b      	ldr	r3, [r7, #4]
 802ca6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ca70:	f003 031f 	and.w	r3, r3, #31
 802ca74:	2201      	movs	r2, #1
 802ca76:	409a      	lsls	r2, r3
 802ca78:	68fb      	ldr	r3, [r7, #12]
 802ca7a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802ca7c:	687b      	ldr	r3, [r7, #4]
 802ca7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802ca80:	687a      	ldr	r2, [r7, #4]
 802ca82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802ca84:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 802ca86:	687b      	ldr	r3, [r7, #4]
 802ca88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ca8a:	2b00      	cmp	r3, #0
 802ca8c:	d00c      	beq.n	802caa8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802ca8e:	687b      	ldr	r3, [r7, #4]
 802ca90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ca92:	681a      	ldr	r2, [r3, #0]
 802ca94:	687b      	ldr	r3, [r7, #4]
 802ca96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802ca98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802ca9c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802ca9e:	687b      	ldr	r3, [r7, #4]
 802caa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802caa2:	687a      	ldr	r2, [r7, #4]
 802caa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802caa6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802caa8:	687b      	ldr	r3, [r7, #4]
 802caaa:	2201      	movs	r2, #1
 802caac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802cab0:	687b      	ldr	r3, [r7, #4]
 802cab2:	2200      	movs	r2, #0
 802cab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 802cab8:	687b      	ldr	r3, [r7, #4]
 802caba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802cabc:	2b00      	cmp	r3, #0
 802cabe:	d003      	beq.n	802cac8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 802cac0:	687b      	ldr	r3, [r7, #4]
 802cac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802cac4:	6878      	ldr	r0, [r7, #4]
 802cac6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 802cac8:	2300      	movs	r3, #0
}
 802caca:	4618      	mov	r0, r3
 802cacc:	3710      	adds	r7, #16
 802cace:	46bd      	mov	sp, r7
 802cad0:	bd80      	pop	{r7, pc}
 802cad2:	bf00      	nop

0802cad4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802cad4:	b580      	push	{r7, lr}
 802cad6:	b08a      	sub	sp, #40	; 0x28
 802cad8:	af00      	add	r7, sp, #0
 802cada:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 802cadc:	2300      	movs	r3, #0
 802cade:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 802cae0:	4b67      	ldr	r3, [pc, #412]	; (802cc80 <HAL_DMA_IRQHandler+0x1ac>)
 802cae2:	681b      	ldr	r3, [r3, #0]
 802cae4:	4a67      	ldr	r2, [pc, #412]	; (802cc84 <HAL_DMA_IRQHandler+0x1b0>)
 802cae6:	fba2 2303 	umull	r2, r3, r2, r3
 802caea:	0a9b      	lsrs	r3, r3, #10
 802caec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802caee:	687b      	ldr	r3, [r7, #4]
 802caf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802caf2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802caf4:	687b      	ldr	r3, [r7, #4]
 802caf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802caf8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 802cafa:	6a3b      	ldr	r3, [r7, #32]
 802cafc:	681b      	ldr	r3, [r3, #0]
 802cafe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 802cb00:	69fb      	ldr	r3, [r7, #28]
 802cb02:	681b      	ldr	r3, [r3, #0]
 802cb04:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 802cb06:	687b      	ldr	r3, [r7, #4]
 802cb08:	681b      	ldr	r3, [r3, #0]
 802cb0a:	4a5f      	ldr	r2, [pc, #380]	; (802cc88 <HAL_DMA_IRQHandler+0x1b4>)
 802cb0c:	4293      	cmp	r3, r2
 802cb0e:	d04a      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb10:	687b      	ldr	r3, [r7, #4]
 802cb12:	681b      	ldr	r3, [r3, #0]
 802cb14:	4a5d      	ldr	r2, [pc, #372]	; (802cc8c <HAL_DMA_IRQHandler+0x1b8>)
 802cb16:	4293      	cmp	r3, r2
 802cb18:	d045      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb1a:	687b      	ldr	r3, [r7, #4]
 802cb1c:	681b      	ldr	r3, [r3, #0]
 802cb1e:	4a5c      	ldr	r2, [pc, #368]	; (802cc90 <HAL_DMA_IRQHandler+0x1bc>)
 802cb20:	4293      	cmp	r3, r2
 802cb22:	d040      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb24:	687b      	ldr	r3, [r7, #4]
 802cb26:	681b      	ldr	r3, [r3, #0]
 802cb28:	4a5a      	ldr	r2, [pc, #360]	; (802cc94 <HAL_DMA_IRQHandler+0x1c0>)
 802cb2a:	4293      	cmp	r3, r2
 802cb2c:	d03b      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb2e:	687b      	ldr	r3, [r7, #4]
 802cb30:	681b      	ldr	r3, [r3, #0]
 802cb32:	4a59      	ldr	r2, [pc, #356]	; (802cc98 <HAL_DMA_IRQHandler+0x1c4>)
 802cb34:	4293      	cmp	r3, r2
 802cb36:	d036      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb38:	687b      	ldr	r3, [r7, #4]
 802cb3a:	681b      	ldr	r3, [r3, #0]
 802cb3c:	4a57      	ldr	r2, [pc, #348]	; (802cc9c <HAL_DMA_IRQHandler+0x1c8>)
 802cb3e:	4293      	cmp	r3, r2
 802cb40:	d031      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb42:	687b      	ldr	r3, [r7, #4]
 802cb44:	681b      	ldr	r3, [r3, #0]
 802cb46:	4a56      	ldr	r2, [pc, #344]	; (802cca0 <HAL_DMA_IRQHandler+0x1cc>)
 802cb48:	4293      	cmp	r3, r2
 802cb4a:	d02c      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb4c:	687b      	ldr	r3, [r7, #4]
 802cb4e:	681b      	ldr	r3, [r3, #0]
 802cb50:	4a54      	ldr	r2, [pc, #336]	; (802cca4 <HAL_DMA_IRQHandler+0x1d0>)
 802cb52:	4293      	cmp	r3, r2
 802cb54:	d027      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb56:	687b      	ldr	r3, [r7, #4]
 802cb58:	681b      	ldr	r3, [r3, #0]
 802cb5a:	4a53      	ldr	r2, [pc, #332]	; (802cca8 <HAL_DMA_IRQHandler+0x1d4>)
 802cb5c:	4293      	cmp	r3, r2
 802cb5e:	d022      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb60:	687b      	ldr	r3, [r7, #4]
 802cb62:	681b      	ldr	r3, [r3, #0]
 802cb64:	4a51      	ldr	r2, [pc, #324]	; (802ccac <HAL_DMA_IRQHandler+0x1d8>)
 802cb66:	4293      	cmp	r3, r2
 802cb68:	d01d      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb6a:	687b      	ldr	r3, [r7, #4]
 802cb6c:	681b      	ldr	r3, [r3, #0]
 802cb6e:	4a50      	ldr	r2, [pc, #320]	; (802ccb0 <HAL_DMA_IRQHandler+0x1dc>)
 802cb70:	4293      	cmp	r3, r2
 802cb72:	d018      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb74:	687b      	ldr	r3, [r7, #4]
 802cb76:	681b      	ldr	r3, [r3, #0]
 802cb78:	4a4e      	ldr	r2, [pc, #312]	; (802ccb4 <HAL_DMA_IRQHandler+0x1e0>)
 802cb7a:	4293      	cmp	r3, r2
 802cb7c:	d013      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb7e:	687b      	ldr	r3, [r7, #4]
 802cb80:	681b      	ldr	r3, [r3, #0]
 802cb82:	4a4d      	ldr	r2, [pc, #308]	; (802ccb8 <HAL_DMA_IRQHandler+0x1e4>)
 802cb84:	4293      	cmp	r3, r2
 802cb86:	d00e      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb88:	687b      	ldr	r3, [r7, #4]
 802cb8a:	681b      	ldr	r3, [r3, #0]
 802cb8c:	4a4b      	ldr	r2, [pc, #300]	; (802ccbc <HAL_DMA_IRQHandler+0x1e8>)
 802cb8e:	4293      	cmp	r3, r2
 802cb90:	d009      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb92:	687b      	ldr	r3, [r7, #4]
 802cb94:	681b      	ldr	r3, [r3, #0]
 802cb96:	4a4a      	ldr	r2, [pc, #296]	; (802ccc0 <HAL_DMA_IRQHandler+0x1ec>)
 802cb98:	4293      	cmp	r3, r2
 802cb9a:	d004      	beq.n	802cba6 <HAL_DMA_IRQHandler+0xd2>
 802cb9c:	687b      	ldr	r3, [r7, #4]
 802cb9e:	681b      	ldr	r3, [r3, #0]
 802cba0:	4a48      	ldr	r2, [pc, #288]	; (802ccc4 <HAL_DMA_IRQHandler+0x1f0>)
 802cba2:	4293      	cmp	r3, r2
 802cba4:	d101      	bne.n	802cbaa <HAL_DMA_IRQHandler+0xd6>
 802cba6:	2301      	movs	r3, #1
 802cba8:	e000      	b.n	802cbac <HAL_DMA_IRQHandler+0xd8>
 802cbaa:	2300      	movs	r3, #0
 802cbac:	2b00      	cmp	r3, #0
 802cbae:	f000 842b 	beq.w	802d408 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802cbb2:	687b      	ldr	r3, [r7, #4]
 802cbb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cbb6:	f003 031f 	and.w	r3, r3, #31
 802cbba:	2208      	movs	r2, #8
 802cbbc:	409a      	lsls	r2, r3
 802cbbe:	69bb      	ldr	r3, [r7, #24]
 802cbc0:	4013      	ands	r3, r2
 802cbc2:	2b00      	cmp	r3, #0
 802cbc4:	f000 80a2 	beq.w	802cd0c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 802cbc8:	687b      	ldr	r3, [r7, #4]
 802cbca:	681b      	ldr	r3, [r3, #0]
 802cbcc:	4a2e      	ldr	r2, [pc, #184]	; (802cc88 <HAL_DMA_IRQHandler+0x1b4>)
 802cbce:	4293      	cmp	r3, r2
 802cbd0:	d04a      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cbd2:	687b      	ldr	r3, [r7, #4]
 802cbd4:	681b      	ldr	r3, [r3, #0]
 802cbd6:	4a2d      	ldr	r2, [pc, #180]	; (802cc8c <HAL_DMA_IRQHandler+0x1b8>)
 802cbd8:	4293      	cmp	r3, r2
 802cbda:	d045      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cbdc:	687b      	ldr	r3, [r7, #4]
 802cbde:	681b      	ldr	r3, [r3, #0]
 802cbe0:	4a2b      	ldr	r2, [pc, #172]	; (802cc90 <HAL_DMA_IRQHandler+0x1bc>)
 802cbe2:	4293      	cmp	r3, r2
 802cbe4:	d040      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cbe6:	687b      	ldr	r3, [r7, #4]
 802cbe8:	681b      	ldr	r3, [r3, #0]
 802cbea:	4a2a      	ldr	r2, [pc, #168]	; (802cc94 <HAL_DMA_IRQHandler+0x1c0>)
 802cbec:	4293      	cmp	r3, r2
 802cbee:	d03b      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cbf0:	687b      	ldr	r3, [r7, #4]
 802cbf2:	681b      	ldr	r3, [r3, #0]
 802cbf4:	4a28      	ldr	r2, [pc, #160]	; (802cc98 <HAL_DMA_IRQHandler+0x1c4>)
 802cbf6:	4293      	cmp	r3, r2
 802cbf8:	d036      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cbfa:	687b      	ldr	r3, [r7, #4]
 802cbfc:	681b      	ldr	r3, [r3, #0]
 802cbfe:	4a27      	ldr	r2, [pc, #156]	; (802cc9c <HAL_DMA_IRQHandler+0x1c8>)
 802cc00:	4293      	cmp	r3, r2
 802cc02:	d031      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cc04:	687b      	ldr	r3, [r7, #4]
 802cc06:	681b      	ldr	r3, [r3, #0]
 802cc08:	4a25      	ldr	r2, [pc, #148]	; (802cca0 <HAL_DMA_IRQHandler+0x1cc>)
 802cc0a:	4293      	cmp	r3, r2
 802cc0c:	d02c      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cc0e:	687b      	ldr	r3, [r7, #4]
 802cc10:	681b      	ldr	r3, [r3, #0]
 802cc12:	4a24      	ldr	r2, [pc, #144]	; (802cca4 <HAL_DMA_IRQHandler+0x1d0>)
 802cc14:	4293      	cmp	r3, r2
 802cc16:	d027      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cc18:	687b      	ldr	r3, [r7, #4]
 802cc1a:	681b      	ldr	r3, [r3, #0]
 802cc1c:	4a22      	ldr	r2, [pc, #136]	; (802cca8 <HAL_DMA_IRQHandler+0x1d4>)
 802cc1e:	4293      	cmp	r3, r2
 802cc20:	d022      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cc22:	687b      	ldr	r3, [r7, #4]
 802cc24:	681b      	ldr	r3, [r3, #0]
 802cc26:	4a21      	ldr	r2, [pc, #132]	; (802ccac <HAL_DMA_IRQHandler+0x1d8>)
 802cc28:	4293      	cmp	r3, r2
 802cc2a:	d01d      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cc2c:	687b      	ldr	r3, [r7, #4]
 802cc2e:	681b      	ldr	r3, [r3, #0]
 802cc30:	4a1f      	ldr	r2, [pc, #124]	; (802ccb0 <HAL_DMA_IRQHandler+0x1dc>)
 802cc32:	4293      	cmp	r3, r2
 802cc34:	d018      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cc36:	687b      	ldr	r3, [r7, #4]
 802cc38:	681b      	ldr	r3, [r3, #0]
 802cc3a:	4a1e      	ldr	r2, [pc, #120]	; (802ccb4 <HAL_DMA_IRQHandler+0x1e0>)
 802cc3c:	4293      	cmp	r3, r2
 802cc3e:	d013      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cc40:	687b      	ldr	r3, [r7, #4]
 802cc42:	681b      	ldr	r3, [r3, #0]
 802cc44:	4a1c      	ldr	r2, [pc, #112]	; (802ccb8 <HAL_DMA_IRQHandler+0x1e4>)
 802cc46:	4293      	cmp	r3, r2
 802cc48:	d00e      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cc4a:	687b      	ldr	r3, [r7, #4]
 802cc4c:	681b      	ldr	r3, [r3, #0]
 802cc4e:	4a1b      	ldr	r2, [pc, #108]	; (802ccbc <HAL_DMA_IRQHandler+0x1e8>)
 802cc50:	4293      	cmp	r3, r2
 802cc52:	d009      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cc54:	687b      	ldr	r3, [r7, #4]
 802cc56:	681b      	ldr	r3, [r3, #0]
 802cc58:	4a19      	ldr	r2, [pc, #100]	; (802ccc0 <HAL_DMA_IRQHandler+0x1ec>)
 802cc5a:	4293      	cmp	r3, r2
 802cc5c:	d004      	beq.n	802cc68 <HAL_DMA_IRQHandler+0x194>
 802cc5e:	687b      	ldr	r3, [r7, #4]
 802cc60:	681b      	ldr	r3, [r3, #0]
 802cc62:	4a18      	ldr	r2, [pc, #96]	; (802ccc4 <HAL_DMA_IRQHandler+0x1f0>)
 802cc64:	4293      	cmp	r3, r2
 802cc66:	d12f      	bne.n	802ccc8 <HAL_DMA_IRQHandler+0x1f4>
 802cc68:	687b      	ldr	r3, [r7, #4]
 802cc6a:	681b      	ldr	r3, [r3, #0]
 802cc6c:	681b      	ldr	r3, [r3, #0]
 802cc6e:	f003 0304 	and.w	r3, r3, #4
 802cc72:	2b00      	cmp	r3, #0
 802cc74:	bf14      	ite	ne
 802cc76:	2301      	movne	r3, #1
 802cc78:	2300      	moveq	r3, #0
 802cc7a:	b2db      	uxtb	r3, r3
 802cc7c:	e02e      	b.n	802ccdc <HAL_DMA_IRQHandler+0x208>
 802cc7e:	bf00      	nop
 802cc80:	24000004 	.word	0x24000004
 802cc84:	1b4e81b5 	.word	0x1b4e81b5
 802cc88:	40020010 	.word	0x40020010
 802cc8c:	40020028 	.word	0x40020028
 802cc90:	40020040 	.word	0x40020040
 802cc94:	40020058 	.word	0x40020058
 802cc98:	40020070 	.word	0x40020070
 802cc9c:	40020088 	.word	0x40020088
 802cca0:	400200a0 	.word	0x400200a0
 802cca4:	400200b8 	.word	0x400200b8
 802cca8:	40020410 	.word	0x40020410
 802ccac:	40020428 	.word	0x40020428
 802ccb0:	40020440 	.word	0x40020440
 802ccb4:	40020458 	.word	0x40020458
 802ccb8:	40020470 	.word	0x40020470
 802ccbc:	40020488 	.word	0x40020488
 802ccc0:	400204a0 	.word	0x400204a0
 802ccc4:	400204b8 	.word	0x400204b8
 802ccc8:	687b      	ldr	r3, [r7, #4]
 802ccca:	681b      	ldr	r3, [r3, #0]
 802cccc:	681b      	ldr	r3, [r3, #0]
 802ccce:	f003 0308 	and.w	r3, r3, #8
 802ccd2:	2b00      	cmp	r3, #0
 802ccd4:	bf14      	ite	ne
 802ccd6:	2301      	movne	r3, #1
 802ccd8:	2300      	moveq	r3, #0
 802ccda:	b2db      	uxtb	r3, r3
 802ccdc:	2b00      	cmp	r3, #0
 802ccde:	d015      	beq.n	802cd0c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 802cce0:	687b      	ldr	r3, [r7, #4]
 802cce2:	681b      	ldr	r3, [r3, #0]
 802cce4:	681a      	ldr	r2, [r3, #0]
 802cce6:	687b      	ldr	r3, [r7, #4]
 802cce8:	681b      	ldr	r3, [r3, #0]
 802ccea:	f022 0204 	bic.w	r2, r2, #4
 802ccee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802ccf0:	687b      	ldr	r3, [r7, #4]
 802ccf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ccf4:	f003 031f 	and.w	r3, r3, #31
 802ccf8:	2208      	movs	r2, #8
 802ccfa:	409a      	lsls	r2, r3
 802ccfc:	6a3b      	ldr	r3, [r7, #32]
 802ccfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802cd00:	687b      	ldr	r3, [r7, #4]
 802cd02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802cd04:	f043 0201 	orr.w	r2, r3, #1
 802cd08:	687b      	ldr	r3, [r7, #4]
 802cd0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802cd0c:	687b      	ldr	r3, [r7, #4]
 802cd0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cd10:	f003 031f 	and.w	r3, r3, #31
 802cd14:	69ba      	ldr	r2, [r7, #24]
 802cd16:	fa22 f303 	lsr.w	r3, r2, r3
 802cd1a:	f003 0301 	and.w	r3, r3, #1
 802cd1e:	2b00      	cmp	r3, #0
 802cd20:	d06e      	beq.n	802ce00 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 802cd22:	687b      	ldr	r3, [r7, #4]
 802cd24:	681b      	ldr	r3, [r3, #0]
 802cd26:	4a69      	ldr	r2, [pc, #420]	; (802cecc <HAL_DMA_IRQHandler+0x3f8>)
 802cd28:	4293      	cmp	r3, r2
 802cd2a:	d04a      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cd2c:	687b      	ldr	r3, [r7, #4]
 802cd2e:	681b      	ldr	r3, [r3, #0]
 802cd30:	4a67      	ldr	r2, [pc, #412]	; (802ced0 <HAL_DMA_IRQHandler+0x3fc>)
 802cd32:	4293      	cmp	r3, r2
 802cd34:	d045      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cd36:	687b      	ldr	r3, [r7, #4]
 802cd38:	681b      	ldr	r3, [r3, #0]
 802cd3a:	4a66      	ldr	r2, [pc, #408]	; (802ced4 <HAL_DMA_IRQHandler+0x400>)
 802cd3c:	4293      	cmp	r3, r2
 802cd3e:	d040      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cd40:	687b      	ldr	r3, [r7, #4]
 802cd42:	681b      	ldr	r3, [r3, #0]
 802cd44:	4a64      	ldr	r2, [pc, #400]	; (802ced8 <HAL_DMA_IRQHandler+0x404>)
 802cd46:	4293      	cmp	r3, r2
 802cd48:	d03b      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cd4a:	687b      	ldr	r3, [r7, #4]
 802cd4c:	681b      	ldr	r3, [r3, #0]
 802cd4e:	4a63      	ldr	r2, [pc, #396]	; (802cedc <HAL_DMA_IRQHandler+0x408>)
 802cd50:	4293      	cmp	r3, r2
 802cd52:	d036      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cd54:	687b      	ldr	r3, [r7, #4]
 802cd56:	681b      	ldr	r3, [r3, #0]
 802cd58:	4a61      	ldr	r2, [pc, #388]	; (802cee0 <HAL_DMA_IRQHandler+0x40c>)
 802cd5a:	4293      	cmp	r3, r2
 802cd5c:	d031      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cd5e:	687b      	ldr	r3, [r7, #4]
 802cd60:	681b      	ldr	r3, [r3, #0]
 802cd62:	4a60      	ldr	r2, [pc, #384]	; (802cee4 <HAL_DMA_IRQHandler+0x410>)
 802cd64:	4293      	cmp	r3, r2
 802cd66:	d02c      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cd68:	687b      	ldr	r3, [r7, #4]
 802cd6a:	681b      	ldr	r3, [r3, #0]
 802cd6c:	4a5e      	ldr	r2, [pc, #376]	; (802cee8 <HAL_DMA_IRQHandler+0x414>)
 802cd6e:	4293      	cmp	r3, r2
 802cd70:	d027      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cd72:	687b      	ldr	r3, [r7, #4]
 802cd74:	681b      	ldr	r3, [r3, #0]
 802cd76:	4a5d      	ldr	r2, [pc, #372]	; (802ceec <HAL_DMA_IRQHandler+0x418>)
 802cd78:	4293      	cmp	r3, r2
 802cd7a:	d022      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cd7c:	687b      	ldr	r3, [r7, #4]
 802cd7e:	681b      	ldr	r3, [r3, #0]
 802cd80:	4a5b      	ldr	r2, [pc, #364]	; (802cef0 <HAL_DMA_IRQHandler+0x41c>)
 802cd82:	4293      	cmp	r3, r2
 802cd84:	d01d      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cd86:	687b      	ldr	r3, [r7, #4]
 802cd88:	681b      	ldr	r3, [r3, #0]
 802cd8a:	4a5a      	ldr	r2, [pc, #360]	; (802cef4 <HAL_DMA_IRQHandler+0x420>)
 802cd8c:	4293      	cmp	r3, r2
 802cd8e:	d018      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cd90:	687b      	ldr	r3, [r7, #4]
 802cd92:	681b      	ldr	r3, [r3, #0]
 802cd94:	4a58      	ldr	r2, [pc, #352]	; (802cef8 <HAL_DMA_IRQHandler+0x424>)
 802cd96:	4293      	cmp	r3, r2
 802cd98:	d013      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cd9a:	687b      	ldr	r3, [r7, #4]
 802cd9c:	681b      	ldr	r3, [r3, #0]
 802cd9e:	4a57      	ldr	r2, [pc, #348]	; (802cefc <HAL_DMA_IRQHandler+0x428>)
 802cda0:	4293      	cmp	r3, r2
 802cda2:	d00e      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cda4:	687b      	ldr	r3, [r7, #4]
 802cda6:	681b      	ldr	r3, [r3, #0]
 802cda8:	4a55      	ldr	r2, [pc, #340]	; (802cf00 <HAL_DMA_IRQHandler+0x42c>)
 802cdaa:	4293      	cmp	r3, r2
 802cdac:	d009      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cdae:	687b      	ldr	r3, [r7, #4]
 802cdb0:	681b      	ldr	r3, [r3, #0]
 802cdb2:	4a54      	ldr	r2, [pc, #336]	; (802cf04 <HAL_DMA_IRQHandler+0x430>)
 802cdb4:	4293      	cmp	r3, r2
 802cdb6:	d004      	beq.n	802cdc2 <HAL_DMA_IRQHandler+0x2ee>
 802cdb8:	687b      	ldr	r3, [r7, #4]
 802cdba:	681b      	ldr	r3, [r3, #0]
 802cdbc:	4a52      	ldr	r2, [pc, #328]	; (802cf08 <HAL_DMA_IRQHandler+0x434>)
 802cdbe:	4293      	cmp	r3, r2
 802cdc0:	d10a      	bne.n	802cdd8 <HAL_DMA_IRQHandler+0x304>
 802cdc2:	687b      	ldr	r3, [r7, #4]
 802cdc4:	681b      	ldr	r3, [r3, #0]
 802cdc6:	695b      	ldr	r3, [r3, #20]
 802cdc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802cdcc:	2b00      	cmp	r3, #0
 802cdce:	bf14      	ite	ne
 802cdd0:	2301      	movne	r3, #1
 802cdd2:	2300      	moveq	r3, #0
 802cdd4:	b2db      	uxtb	r3, r3
 802cdd6:	e003      	b.n	802cde0 <HAL_DMA_IRQHandler+0x30c>
 802cdd8:	687b      	ldr	r3, [r7, #4]
 802cdda:	681b      	ldr	r3, [r3, #0]
 802cddc:	681b      	ldr	r3, [r3, #0]
 802cdde:	2300      	movs	r3, #0
 802cde0:	2b00      	cmp	r3, #0
 802cde2:	d00d      	beq.n	802ce00 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802cde4:	687b      	ldr	r3, [r7, #4]
 802cde6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cde8:	f003 031f 	and.w	r3, r3, #31
 802cdec:	2201      	movs	r2, #1
 802cdee:	409a      	lsls	r2, r3
 802cdf0:	6a3b      	ldr	r3, [r7, #32]
 802cdf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802cdf4:	687b      	ldr	r3, [r7, #4]
 802cdf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802cdf8:	f043 0202 	orr.w	r2, r3, #2
 802cdfc:	687b      	ldr	r3, [r7, #4]
 802cdfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802ce00:	687b      	ldr	r3, [r7, #4]
 802ce02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802ce04:	f003 031f 	and.w	r3, r3, #31
 802ce08:	2204      	movs	r2, #4
 802ce0a:	409a      	lsls	r2, r3
 802ce0c:	69bb      	ldr	r3, [r7, #24]
 802ce0e:	4013      	ands	r3, r2
 802ce10:	2b00      	cmp	r3, #0
 802ce12:	f000 808f 	beq.w	802cf34 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 802ce16:	687b      	ldr	r3, [r7, #4]
 802ce18:	681b      	ldr	r3, [r3, #0]
 802ce1a:	4a2c      	ldr	r2, [pc, #176]	; (802cecc <HAL_DMA_IRQHandler+0x3f8>)
 802ce1c:	4293      	cmp	r3, r2
 802ce1e:	d04a      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce20:	687b      	ldr	r3, [r7, #4]
 802ce22:	681b      	ldr	r3, [r3, #0]
 802ce24:	4a2a      	ldr	r2, [pc, #168]	; (802ced0 <HAL_DMA_IRQHandler+0x3fc>)
 802ce26:	4293      	cmp	r3, r2
 802ce28:	d045      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce2a:	687b      	ldr	r3, [r7, #4]
 802ce2c:	681b      	ldr	r3, [r3, #0]
 802ce2e:	4a29      	ldr	r2, [pc, #164]	; (802ced4 <HAL_DMA_IRQHandler+0x400>)
 802ce30:	4293      	cmp	r3, r2
 802ce32:	d040      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce34:	687b      	ldr	r3, [r7, #4]
 802ce36:	681b      	ldr	r3, [r3, #0]
 802ce38:	4a27      	ldr	r2, [pc, #156]	; (802ced8 <HAL_DMA_IRQHandler+0x404>)
 802ce3a:	4293      	cmp	r3, r2
 802ce3c:	d03b      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce3e:	687b      	ldr	r3, [r7, #4]
 802ce40:	681b      	ldr	r3, [r3, #0]
 802ce42:	4a26      	ldr	r2, [pc, #152]	; (802cedc <HAL_DMA_IRQHandler+0x408>)
 802ce44:	4293      	cmp	r3, r2
 802ce46:	d036      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce48:	687b      	ldr	r3, [r7, #4]
 802ce4a:	681b      	ldr	r3, [r3, #0]
 802ce4c:	4a24      	ldr	r2, [pc, #144]	; (802cee0 <HAL_DMA_IRQHandler+0x40c>)
 802ce4e:	4293      	cmp	r3, r2
 802ce50:	d031      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce52:	687b      	ldr	r3, [r7, #4]
 802ce54:	681b      	ldr	r3, [r3, #0]
 802ce56:	4a23      	ldr	r2, [pc, #140]	; (802cee4 <HAL_DMA_IRQHandler+0x410>)
 802ce58:	4293      	cmp	r3, r2
 802ce5a:	d02c      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce5c:	687b      	ldr	r3, [r7, #4]
 802ce5e:	681b      	ldr	r3, [r3, #0]
 802ce60:	4a21      	ldr	r2, [pc, #132]	; (802cee8 <HAL_DMA_IRQHandler+0x414>)
 802ce62:	4293      	cmp	r3, r2
 802ce64:	d027      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce66:	687b      	ldr	r3, [r7, #4]
 802ce68:	681b      	ldr	r3, [r3, #0]
 802ce6a:	4a20      	ldr	r2, [pc, #128]	; (802ceec <HAL_DMA_IRQHandler+0x418>)
 802ce6c:	4293      	cmp	r3, r2
 802ce6e:	d022      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce70:	687b      	ldr	r3, [r7, #4]
 802ce72:	681b      	ldr	r3, [r3, #0]
 802ce74:	4a1e      	ldr	r2, [pc, #120]	; (802cef0 <HAL_DMA_IRQHandler+0x41c>)
 802ce76:	4293      	cmp	r3, r2
 802ce78:	d01d      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce7a:	687b      	ldr	r3, [r7, #4]
 802ce7c:	681b      	ldr	r3, [r3, #0]
 802ce7e:	4a1d      	ldr	r2, [pc, #116]	; (802cef4 <HAL_DMA_IRQHandler+0x420>)
 802ce80:	4293      	cmp	r3, r2
 802ce82:	d018      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce84:	687b      	ldr	r3, [r7, #4]
 802ce86:	681b      	ldr	r3, [r3, #0]
 802ce88:	4a1b      	ldr	r2, [pc, #108]	; (802cef8 <HAL_DMA_IRQHandler+0x424>)
 802ce8a:	4293      	cmp	r3, r2
 802ce8c:	d013      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce8e:	687b      	ldr	r3, [r7, #4]
 802ce90:	681b      	ldr	r3, [r3, #0]
 802ce92:	4a1a      	ldr	r2, [pc, #104]	; (802cefc <HAL_DMA_IRQHandler+0x428>)
 802ce94:	4293      	cmp	r3, r2
 802ce96:	d00e      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ce98:	687b      	ldr	r3, [r7, #4]
 802ce9a:	681b      	ldr	r3, [r3, #0]
 802ce9c:	4a18      	ldr	r2, [pc, #96]	; (802cf00 <HAL_DMA_IRQHandler+0x42c>)
 802ce9e:	4293      	cmp	r3, r2
 802cea0:	d009      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802cea2:	687b      	ldr	r3, [r7, #4]
 802cea4:	681b      	ldr	r3, [r3, #0]
 802cea6:	4a17      	ldr	r2, [pc, #92]	; (802cf04 <HAL_DMA_IRQHandler+0x430>)
 802cea8:	4293      	cmp	r3, r2
 802ceaa:	d004      	beq.n	802ceb6 <HAL_DMA_IRQHandler+0x3e2>
 802ceac:	687b      	ldr	r3, [r7, #4]
 802ceae:	681b      	ldr	r3, [r3, #0]
 802ceb0:	4a15      	ldr	r2, [pc, #84]	; (802cf08 <HAL_DMA_IRQHandler+0x434>)
 802ceb2:	4293      	cmp	r3, r2
 802ceb4:	d12a      	bne.n	802cf0c <HAL_DMA_IRQHandler+0x438>
 802ceb6:	687b      	ldr	r3, [r7, #4]
 802ceb8:	681b      	ldr	r3, [r3, #0]
 802ceba:	681b      	ldr	r3, [r3, #0]
 802cebc:	f003 0302 	and.w	r3, r3, #2
 802cec0:	2b00      	cmp	r3, #0
 802cec2:	bf14      	ite	ne
 802cec4:	2301      	movne	r3, #1
 802cec6:	2300      	moveq	r3, #0
 802cec8:	b2db      	uxtb	r3, r3
 802ceca:	e023      	b.n	802cf14 <HAL_DMA_IRQHandler+0x440>
 802cecc:	40020010 	.word	0x40020010
 802ced0:	40020028 	.word	0x40020028
 802ced4:	40020040 	.word	0x40020040
 802ced8:	40020058 	.word	0x40020058
 802cedc:	40020070 	.word	0x40020070
 802cee0:	40020088 	.word	0x40020088
 802cee4:	400200a0 	.word	0x400200a0
 802cee8:	400200b8 	.word	0x400200b8
 802ceec:	40020410 	.word	0x40020410
 802cef0:	40020428 	.word	0x40020428
 802cef4:	40020440 	.word	0x40020440
 802cef8:	40020458 	.word	0x40020458
 802cefc:	40020470 	.word	0x40020470
 802cf00:	40020488 	.word	0x40020488
 802cf04:	400204a0 	.word	0x400204a0
 802cf08:	400204b8 	.word	0x400204b8
 802cf0c:	687b      	ldr	r3, [r7, #4]
 802cf0e:	681b      	ldr	r3, [r3, #0]
 802cf10:	681b      	ldr	r3, [r3, #0]
 802cf12:	2300      	movs	r3, #0
 802cf14:	2b00      	cmp	r3, #0
 802cf16:	d00d      	beq.n	802cf34 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802cf18:	687b      	ldr	r3, [r7, #4]
 802cf1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cf1c:	f003 031f 	and.w	r3, r3, #31
 802cf20:	2204      	movs	r2, #4
 802cf22:	409a      	lsls	r2, r3
 802cf24:	6a3b      	ldr	r3, [r7, #32]
 802cf26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802cf28:	687b      	ldr	r3, [r7, #4]
 802cf2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802cf2c:	f043 0204 	orr.w	r2, r3, #4
 802cf30:	687b      	ldr	r3, [r7, #4]
 802cf32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802cf34:	687b      	ldr	r3, [r7, #4]
 802cf36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cf38:	f003 031f 	and.w	r3, r3, #31
 802cf3c:	2210      	movs	r2, #16
 802cf3e:	409a      	lsls	r2, r3
 802cf40:	69bb      	ldr	r3, [r7, #24]
 802cf42:	4013      	ands	r3, r2
 802cf44:	2b00      	cmp	r3, #0
 802cf46:	f000 80a6 	beq.w	802d096 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 802cf4a:	687b      	ldr	r3, [r7, #4]
 802cf4c:	681b      	ldr	r3, [r3, #0]
 802cf4e:	4a85      	ldr	r2, [pc, #532]	; (802d164 <HAL_DMA_IRQHandler+0x690>)
 802cf50:	4293      	cmp	r3, r2
 802cf52:	d04a      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cf54:	687b      	ldr	r3, [r7, #4]
 802cf56:	681b      	ldr	r3, [r3, #0]
 802cf58:	4a83      	ldr	r2, [pc, #524]	; (802d168 <HAL_DMA_IRQHandler+0x694>)
 802cf5a:	4293      	cmp	r3, r2
 802cf5c:	d045      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cf5e:	687b      	ldr	r3, [r7, #4]
 802cf60:	681b      	ldr	r3, [r3, #0]
 802cf62:	4a82      	ldr	r2, [pc, #520]	; (802d16c <HAL_DMA_IRQHandler+0x698>)
 802cf64:	4293      	cmp	r3, r2
 802cf66:	d040      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cf68:	687b      	ldr	r3, [r7, #4]
 802cf6a:	681b      	ldr	r3, [r3, #0]
 802cf6c:	4a80      	ldr	r2, [pc, #512]	; (802d170 <HAL_DMA_IRQHandler+0x69c>)
 802cf6e:	4293      	cmp	r3, r2
 802cf70:	d03b      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cf72:	687b      	ldr	r3, [r7, #4]
 802cf74:	681b      	ldr	r3, [r3, #0]
 802cf76:	4a7f      	ldr	r2, [pc, #508]	; (802d174 <HAL_DMA_IRQHandler+0x6a0>)
 802cf78:	4293      	cmp	r3, r2
 802cf7a:	d036      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cf7c:	687b      	ldr	r3, [r7, #4]
 802cf7e:	681b      	ldr	r3, [r3, #0]
 802cf80:	4a7d      	ldr	r2, [pc, #500]	; (802d178 <HAL_DMA_IRQHandler+0x6a4>)
 802cf82:	4293      	cmp	r3, r2
 802cf84:	d031      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cf86:	687b      	ldr	r3, [r7, #4]
 802cf88:	681b      	ldr	r3, [r3, #0]
 802cf8a:	4a7c      	ldr	r2, [pc, #496]	; (802d17c <HAL_DMA_IRQHandler+0x6a8>)
 802cf8c:	4293      	cmp	r3, r2
 802cf8e:	d02c      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cf90:	687b      	ldr	r3, [r7, #4]
 802cf92:	681b      	ldr	r3, [r3, #0]
 802cf94:	4a7a      	ldr	r2, [pc, #488]	; (802d180 <HAL_DMA_IRQHandler+0x6ac>)
 802cf96:	4293      	cmp	r3, r2
 802cf98:	d027      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cf9a:	687b      	ldr	r3, [r7, #4]
 802cf9c:	681b      	ldr	r3, [r3, #0]
 802cf9e:	4a79      	ldr	r2, [pc, #484]	; (802d184 <HAL_DMA_IRQHandler+0x6b0>)
 802cfa0:	4293      	cmp	r3, r2
 802cfa2:	d022      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cfa4:	687b      	ldr	r3, [r7, #4]
 802cfa6:	681b      	ldr	r3, [r3, #0]
 802cfa8:	4a77      	ldr	r2, [pc, #476]	; (802d188 <HAL_DMA_IRQHandler+0x6b4>)
 802cfaa:	4293      	cmp	r3, r2
 802cfac:	d01d      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cfae:	687b      	ldr	r3, [r7, #4]
 802cfb0:	681b      	ldr	r3, [r3, #0]
 802cfb2:	4a76      	ldr	r2, [pc, #472]	; (802d18c <HAL_DMA_IRQHandler+0x6b8>)
 802cfb4:	4293      	cmp	r3, r2
 802cfb6:	d018      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cfb8:	687b      	ldr	r3, [r7, #4]
 802cfba:	681b      	ldr	r3, [r3, #0]
 802cfbc:	4a74      	ldr	r2, [pc, #464]	; (802d190 <HAL_DMA_IRQHandler+0x6bc>)
 802cfbe:	4293      	cmp	r3, r2
 802cfc0:	d013      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cfc2:	687b      	ldr	r3, [r7, #4]
 802cfc4:	681b      	ldr	r3, [r3, #0]
 802cfc6:	4a73      	ldr	r2, [pc, #460]	; (802d194 <HAL_DMA_IRQHandler+0x6c0>)
 802cfc8:	4293      	cmp	r3, r2
 802cfca:	d00e      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cfcc:	687b      	ldr	r3, [r7, #4]
 802cfce:	681b      	ldr	r3, [r3, #0]
 802cfd0:	4a71      	ldr	r2, [pc, #452]	; (802d198 <HAL_DMA_IRQHandler+0x6c4>)
 802cfd2:	4293      	cmp	r3, r2
 802cfd4:	d009      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cfd6:	687b      	ldr	r3, [r7, #4]
 802cfd8:	681b      	ldr	r3, [r3, #0]
 802cfda:	4a70      	ldr	r2, [pc, #448]	; (802d19c <HAL_DMA_IRQHandler+0x6c8>)
 802cfdc:	4293      	cmp	r3, r2
 802cfde:	d004      	beq.n	802cfea <HAL_DMA_IRQHandler+0x516>
 802cfe0:	687b      	ldr	r3, [r7, #4]
 802cfe2:	681b      	ldr	r3, [r3, #0]
 802cfe4:	4a6e      	ldr	r2, [pc, #440]	; (802d1a0 <HAL_DMA_IRQHandler+0x6cc>)
 802cfe6:	4293      	cmp	r3, r2
 802cfe8:	d10a      	bne.n	802d000 <HAL_DMA_IRQHandler+0x52c>
 802cfea:	687b      	ldr	r3, [r7, #4]
 802cfec:	681b      	ldr	r3, [r3, #0]
 802cfee:	681b      	ldr	r3, [r3, #0]
 802cff0:	f003 0308 	and.w	r3, r3, #8
 802cff4:	2b00      	cmp	r3, #0
 802cff6:	bf14      	ite	ne
 802cff8:	2301      	movne	r3, #1
 802cffa:	2300      	moveq	r3, #0
 802cffc:	b2db      	uxtb	r3, r3
 802cffe:	e009      	b.n	802d014 <HAL_DMA_IRQHandler+0x540>
 802d000:	687b      	ldr	r3, [r7, #4]
 802d002:	681b      	ldr	r3, [r3, #0]
 802d004:	681b      	ldr	r3, [r3, #0]
 802d006:	f003 0304 	and.w	r3, r3, #4
 802d00a:	2b00      	cmp	r3, #0
 802d00c:	bf14      	ite	ne
 802d00e:	2301      	movne	r3, #1
 802d010:	2300      	moveq	r3, #0
 802d012:	b2db      	uxtb	r3, r3
 802d014:	2b00      	cmp	r3, #0
 802d016:	d03e      	beq.n	802d096 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d018:	687b      	ldr	r3, [r7, #4]
 802d01a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d01c:	f003 031f 	and.w	r3, r3, #31
 802d020:	2210      	movs	r2, #16
 802d022:	409a      	lsls	r2, r3
 802d024:	6a3b      	ldr	r3, [r7, #32]
 802d026:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802d028:	687b      	ldr	r3, [r7, #4]
 802d02a:	681b      	ldr	r3, [r3, #0]
 802d02c:	681b      	ldr	r3, [r3, #0]
 802d02e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802d032:	2b00      	cmp	r3, #0
 802d034:	d018      	beq.n	802d068 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802d036:	687b      	ldr	r3, [r7, #4]
 802d038:	681b      	ldr	r3, [r3, #0]
 802d03a:	681b      	ldr	r3, [r3, #0]
 802d03c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d040:	2b00      	cmp	r3, #0
 802d042:	d108      	bne.n	802d056 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 802d044:	687b      	ldr	r3, [r7, #4]
 802d046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d048:	2b00      	cmp	r3, #0
 802d04a:	d024      	beq.n	802d096 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 802d04c:	687b      	ldr	r3, [r7, #4]
 802d04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d050:	6878      	ldr	r0, [r7, #4]
 802d052:	4798      	blx	r3
 802d054:	e01f      	b.n	802d096 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 802d056:	687b      	ldr	r3, [r7, #4]
 802d058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d05a:	2b00      	cmp	r3, #0
 802d05c:	d01b      	beq.n	802d096 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 802d05e:	687b      	ldr	r3, [r7, #4]
 802d060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d062:	6878      	ldr	r0, [r7, #4]
 802d064:	4798      	blx	r3
 802d066:	e016      	b.n	802d096 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802d068:	687b      	ldr	r3, [r7, #4]
 802d06a:	681b      	ldr	r3, [r3, #0]
 802d06c:	681b      	ldr	r3, [r3, #0]
 802d06e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d072:	2b00      	cmp	r3, #0
 802d074:	d107      	bne.n	802d086 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802d076:	687b      	ldr	r3, [r7, #4]
 802d078:	681b      	ldr	r3, [r3, #0]
 802d07a:	681a      	ldr	r2, [r3, #0]
 802d07c:	687b      	ldr	r3, [r7, #4]
 802d07e:	681b      	ldr	r3, [r3, #0]
 802d080:	f022 0208 	bic.w	r2, r2, #8
 802d084:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 802d086:	687b      	ldr	r3, [r7, #4]
 802d088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d08a:	2b00      	cmp	r3, #0
 802d08c:	d003      	beq.n	802d096 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802d08e:	687b      	ldr	r3, [r7, #4]
 802d090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d092:	6878      	ldr	r0, [r7, #4]
 802d094:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802d096:	687b      	ldr	r3, [r7, #4]
 802d098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d09a:	f003 031f 	and.w	r3, r3, #31
 802d09e:	2220      	movs	r2, #32
 802d0a0:	409a      	lsls	r2, r3
 802d0a2:	69bb      	ldr	r3, [r7, #24]
 802d0a4:	4013      	ands	r3, r2
 802d0a6:	2b00      	cmp	r3, #0
 802d0a8:	f000 8110 	beq.w	802d2cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 802d0ac:	687b      	ldr	r3, [r7, #4]
 802d0ae:	681b      	ldr	r3, [r3, #0]
 802d0b0:	4a2c      	ldr	r2, [pc, #176]	; (802d164 <HAL_DMA_IRQHandler+0x690>)
 802d0b2:	4293      	cmp	r3, r2
 802d0b4:	d04a      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d0b6:	687b      	ldr	r3, [r7, #4]
 802d0b8:	681b      	ldr	r3, [r3, #0]
 802d0ba:	4a2b      	ldr	r2, [pc, #172]	; (802d168 <HAL_DMA_IRQHandler+0x694>)
 802d0bc:	4293      	cmp	r3, r2
 802d0be:	d045      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d0c0:	687b      	ldr	r3, [r7, #4]
 802d0c2:	681b      	ldr	r3, [r3, #0]
 802d0c4:	4a29      	ldr	r2, [pc, #164]	; (802d16c <HAL_DMA_IRQHandler+0x698>)
 802d0c6:	4293      	cmp	r3, r2
 802d0c8:	d040      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d0ca:	687b      	ldr	r3, [r7, #4]
 802d0cc:	681b      	ldr	r3, [r3, #0]
 802d0ce:	4a28      	ldr	r2, [pc, #160]	; (802d170 <HAL_DMA_IRQHandler+0x69c>)
 802d0d0:	4293      	cmp	r3, r2
 802d0d2:	d03b      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d0d4:	687b      	ldr	r3, [r7, #4]
 802d0d6:	681b      	ldr	r3, [r3, #0]
 802d0d8:	4a26      	ldr	r2, [pc, #152]	; (802d174 <HAL_DMA_IRQHandler+0x6a0>)
 802d0da:	4293      	cmp	r3, r2
 802d0dc:	d036      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d0de:	687b      	ldr	r3, [r7, #4]
 802d0e0:	681b      	ldr	r3, [r3, #0]
 802d0e2:	4a25      	ldr	r2, [pc, #148]	; (802d178 <HAL_DMA_IRQHandler+0x6a4>)
 802d0e4:	4293      	cmp	r3, r2
 802d0e6:	d031      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d0e8:	687b      	ldr	r3, [r7, #4]
 802d0ea:	681b      	ldr	r3, [r3, #0]
 802d0ec:	4a23      	ldr	r2, [pc, #140]	; (802d17c <HAL_DMA_IRQHandler+0x6a8>)
 802d0ee:	4293      	cmp	r3, r2
 802d0f0:	d02c      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d0f2:	687b      	ldr	r3, [r7, #4]
 802d0f4:	681b      	ldr	r3, [r3, #0]
 802d0f6:	4a22      	ldr	r2, [pc, #136]	; (802d180 <HAL_DMA_IRQHandler+0x6ac>)
 802d0f8:	4293      	cmp	r3, r2
 802d0fa:	d027      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d0fc:	687b      	ldr	r3, [r7, #4]
 802d0fe:	681b      	ldr	r3, [r3, #0]
 802d100:	4a20      	ldr	r2, [pc, #128]	; (802d184 <HAL_DMA_IRQHandler+0x6b0>)
 802d102:	4293      	cmp	r3, r2
 802d104:	d022      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d106:	687b      	ldr	r3, [r7, #4]
 802d108:	681b      	ldr	r3, [r3, #0]
 802d10a:	4a1f      	ldr	r2, [pc, #124]	; (802d188 <HAL_DMA_IRQHandler+0x6b4>)
 802d10c:	4293      	cmp	r3, r2
 802d10e:	d01d      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d110:	687b      	ldr	r3, [r7, #4]
 802d112:	681b      	ldr	r3, [r3, #0]
 802d114:	4a1d      	ldr	r2, [pc, #116]	; (802d18c <HAL_DMA_IRQHandler+0x6b8>)
 802d116:	4293      	cmp	r3, r2
 802d118:	d018      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d11a:	687b      	ldr	r3, [r7, #4]
 802d11c:	681b      	ldr	r3, [r3, #0]
 802d11e:	4a1c      	ldr	r2, [pc, #112]	; (802d190 <HAL_DMA_IRQHandler+0x6bc>)
 802d120:	4293      	cmp	r3, r2
 802d122:	d013      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d124:	687b      	ldr	r3, [r7, #4]
 802d126:	681b      	ldr	r3, [r3, #0]
 802d128:	4a1a      	ldr	r2, [pc, #104]	; (802d194 <HAL_DMA_IRQHandler+0x6c0>)
 802d12a:	4293      	cmp	r3, r2
 802d12c:	d00e      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d12e:	687b      	ldr	r3, [r7, #4]
 802d130:	681b      	ldr	r3, [r3, #0]
 802d132:	4a19      	ldr	r2, [pc, #100]	; (802d198 <HAL_DMA_IRQHandler+0x6c4>)
 802d134:	4293      	cmp	r3, r2
 802d136:	d009      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d138:	687b      	ldr	r3, [r7, #4]
 802d13a:	681b      	ldr	r3, [r3, #0]
 802d13c:	4a17      	ldr	r2, [pc, #92]	; (802d19c <HAL_DMA_IRQHandler+0x6c8>)
 802d13e:	4293      	cmp	r3, r2
 802d140:	d004      	beq.n	802d14c <HAL_DMA_IRQHandler+0x678>
 802d142:	687b      	ldr	r3, [r7, #4]
 802d144:	681b      	ldr	r3, [r3, #0]
 802d146:	4a16      	ldr	r2, [pc, #88]	; (802d1a0 <HAL_DMA_IRQHandler+0x6cc>)
 802d148:	4293      	cmp	r3, r2
 802d14a:	d12b      	bne.n	802d1a4 <HAL_DMA_IRQHandler+0x6d0>
 802d14c:	687b      	ldr	r3, [r7, #4]
 802d14e:	681b      	ldr	r3, [r3, #0]
 802d150:	681b      	ldr	r3, [r3, #0]
 802d152:	f003 0310 	and.w	r3, r3, #16
 802d156:	2b00      	cmp	r3, #0
 802d158:	bf14      	ite	ne
 802d15a:	2301      	movne	r3, #1
 802d15c:	2300      	moveq	r3, #0
 802d15e:	b2db      	uxtb	r3, r3
 802d160:	e02a      	b.n	802d1b8 <HAL_DMA_IRQHandler+0x6e4>
 802d162:	bf00      	nop
 802d164:	40020010 	.word	0x40020010
 802d168:	40020028 	.word	0x40020028
 802d16c:	40020040 	.word	0x40020040
 802d170:	40020058 	.word	0x40020058
 802d174:	40020070 	.word	0x40020070
 802d178:	40020088 	.word	0x40020088
 802d17c:	400200a0 	.word	0x400200a0
 802d180:	400200b8 	.word	0x400200b8
 802d184:	40020410 	.word	0x40020410
 802d188:	40020428 	.word	0x40020428
 802d18c:	40020440 	.word	0x40020440
 802d190:	40020458 	.word	0x40020458
 802d194:	40020470 	.word	0x40020470
 802d198:	40020488 	.word	0x40020488
 802d19c:	400204a0 	.word	0x400204a0
 802d1a0:	400204b8 	.word	0x400204b8
 802d1a4:	687b      	ldr	r3, [r7, #4]
 802d1a6:	681b      	ldr	r3, [r3, #0]
 802d1a8:	681b      	ldr	r3, [r3, #0]
 802d1aa:	f003 0302 	and.w	r3, r3, #2
 802d1ae:	2b00      	cmp	r3, #0
 802d1b0:	bf14      	ite	ne
 802d1b2:	2301      	movne	r3, #1
 802d1b4:	2300      	moveq	r3, #0
 802d1b6:	b2db      	uxtb	r3, r3
 802d1b8:	2b00      	cmp	r3, #0
 802d1ba:	f000 8087 	beq.w	802d2cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d1be:	687b      	ldr	r3, [r7, #4]
 802d1c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d1c2:	f003 031f 	and.w	r3, r3, #31
 802d1c6:	2220      	movs	r2, #32
 802d1c8:	409a      	lsls	r2, r3
 802d1ca:	6a3b      	ldr	r3, [r7, #32]
 802d1cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 802d1ce:	687b      	ldr	r3, [r7, #4]
 802d1d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802d1d4:	b2db      	uxtb	r3, r3
 802d1d6:	2b04      	cmp	r3, #4
 802d1d8:	d139      	bne.n	802d24e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802d1da:	687b      	ldr	r3, [r7, #4]
 802d1dc:	681b      	ldr	r3, [r3, #0]
 802d1de:	681a      	ldr	r2, [r3, #0]
 802d1e0:	687b      	ldr	r3, [r7, #4]
 802d1e2:	681b      	ldr	r3, [r3, #0]
 802d1e4:	f022 0216 	bic.w	r2, r2, #22
 802d1e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802d1ea:	687b      	ldr	r3, [r7, #4]
 802d1ec:	681b      	ldr	r3, [r3, #0]
 802d1ee:	695a      	ldr	r2, [r3, #20]
 802d1f0:	687b      	ldr	r3, [r7, #4]
 802d1f2:	681b      	ldr	r3, [r3, #0]
 802d1f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802d1f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802d1fa:	687b      	ldr	r3, [r7, #4]
 802d1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d1fe:	2b00      	cmp	r3, #0
 802d200:	d103      	bne.n	802d20a <HAL_DMA_IRQHandler+0x736>
 802d202:	687b      	ldr	r3, [r7, #4]
 802d204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d206:	2b00      	cmp	r3, #0
 802d208:	d007      	beq.n	802d21a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802d20a:	687b      	ldr	r3, [r7, #4]
 802d20c:	681b      	ldr	r3, [r3, #0]
 802d20e:	681a      	ldr	r2, [r3, #0]
 802d210:	687b      	ldr	r3, [r7, #4]
 802d212:	681b      	ldr	r3, [r3, #0]
 802d214:	f022 0208 	bic.w	r2, r2, #8
 802d218:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802d21a:	687b      	ldr	r3, [r7, #4]
 802d21c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d21e:	f003 031f 	and.w	r3, r3, #31
 802d222:	223f      	movs	r2, #63	; 0x3f
 802d224:	409a      	lsls	r2, r3
 802d226:	6a3b      	ldr	r3, [r7, #32]
 802d228:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802d22a:	687b      	ldr	r3, [r7, #4]
 802d22c:	2201      	movs	r2, #1
 802d22e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802d232:	687b      	ldr	r3, [r7, #4]
 802d234:	2200      	movs	r2, #0
 802d236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 802d23a:	687b      	ldr	r3, [r7, #4]
 802d23c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d23e:	2b00      	cmp	r3, #0
 802d240:	f000 834a 	beq.w	802d8d8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 802d244:	687b      	ldr	r3, [r7, #4]
 802d246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d248:	6878      	ldr	r0, [r7, #4]
 802d24a:	4798      	blx	r3
          }
          return;
 802d24c:	e344      	b.n	802d8d8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802d24e:	687b      	ldr	r3, [r7, #4]
 802d250:	681b      	ldr	r3, [r3, #0]
 802d252:	681b      	ldr	r3, [r3, #0]
 802d254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802d258:	2b00      	cmp	r3, #0
 802d25a:	d018      	beq.n	802d28e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802d25c:	687b      	ldr	r3, [r7, #4]
 802d25e:	681b      	ldr	r3, [r3, #0]
 802d260:	681b      	ldr	r3, [r3, #0]
 802d262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d266:	2b00      	cmp	r3, #0
 802d268:	d108      	bne.n	802d27c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 802d26a:	687b      	ldr	r3, [r7, #4]
 802d26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d26e:	2b00      	cmp	r3, #0
 802d270:	d02c      	beq.n	802d2cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 802d272:	687b      	ldr	r3, [r7, #4]
 802d274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d276:	6878      	ldr	r0, [r7, #4]
 802d278:	4798      	blx	r3
 802d27a:	e027      	b.n	802d2cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 802d27c:	687b      	ldr	r3, [r7, #4]
 802d27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d280:	2b00      	cmp	r3, #0
 802d282:	d023      	beq.n	802d2cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 802d284:	687b      	ldr	r3, [r7, #4]
 802d286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d288:	6878      	ldr	r0, [r7, #4]
 802d28a:	4798      	blx	r3
 802d28c:	e01e      	b.n	802d2cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802d28e:	687b      	ldr	r3, [r7, #4]
 802d290:	681b      	ldr	r3, [r3, #0]
 802d292:	681b      	ldr	r3, [r3, #0]
 802d294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d298:	2b00      	cmp	r3, #0
 802d29a:	d10f      	bne.n	802d2bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 802d29c:	687b      	ldr	r3, [r7, #4]
 802d29e:	681b      	ldr	r3, [r3, #0]
 802d2a0:	681a      	ldr	r2, [r3, #0]
 802d2a2:	687b      	ldr	r3, [r7, #4]
 802d2a4:	681b      	ldr	r3, [r3, #0]
 802d2a6:	f022 0210 	bic.w	r2, r2, #16
 802d2aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 802d2ac:	687b      	ldr	r3, [r7, #4]
 802d2ae:	2201      	movs	r2, #1
 802d2b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 802d2b4:	687b      	ldr	r3, [r7, #4]
 802d2b6:	2200      	movs	r2, #0
 802d2b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 802d2bc:	687b      	ldr	r3, [r7, #4]
 802d2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d2c0:	2b00      	cmp	r3, #0
 802d2c2:	d003      	beq.n	802d2cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 802d2c4:	687b      	ldr	r3, [r7, #4]
 802d2c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d2c8:	6878      	ldr	r0, [r7, #4]
 802d2ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802d2cc:	687b      	ldr	r3, [r7, #4]
 802d2ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d2d0:	2b00      	cmp	r3, #0
 802d2d2:	f000 8306 	beq.w	802d8e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 802d2d6:	687b      	ldr	r3, [r7, #4]
 802d2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d2da:	f003 0301 	and.w	r3, r3, #1
 802d2de:	2b00      	cmp	r3, #0
 802d2e0:	f000 8088 	beq.w	802d3f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 802d2e4:	687b      	ldr	r3, [r7, #4]
 802d2e6:	2204      	movs	r2, #4
 802d2e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 802d2ec:	687b      	ldr	r3, [r7, #4]
 802d2ee:	681b      	ldr	r3, [r3, #0]
 802d2f0:	4a7a      	ldr	r2, [pc, #488]	; (802d4dc <HAL_DMA_IRQHandler+0xa08>)
 802d2f2:	4293      	cmp	r3, r2
 802d2f4:	d04a      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d2f6:	687b      	ldr	r3, [r7, #4]
 802d2f8:	681b      	ldr	r3, [r3, #0]
 802d2fa:	4a79      	ldr	r2, [pc, #484]	; (802d4e0 <HAL_DMA_IRQHandler+0xa0c>)
 802d2fc:	4293      	cmp	r3, r2
 802d2fe:	d045      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d300:	687b      	ldr	r3, [r7, #4]
 802d302:	681b      	ldr	r3, [r3, #0]
 802d304:	4a77      	ldr	r2, [pc, #476]	; (802d4e4 <HAL_DMA_IRQHandler+0xa10>)
 802d306:	4293      	cmp	r3, r2
 802d308:	d040      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d30a:	687b      	ldr	r3, [r7, #4]
 802d30c:	681b      	ldr	r3, [r3, #0]
 802d30e:	4a76      	ldr	r2, [pc, #472]	; (802d4e8 <HAL_DMA_IRQHandler+0xa14>)
 802d310:	4293      	cmp	r3, r2
 802d312:	d03b      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d314:	687b      	ldr	r3, [r7, #4]
 802d316:	681b      	ldr	r3, [r3, #0]
 802d318:	4a74      	ldr	r2, [pc, #464]	; (802d4ec <HAL_DMA_IRQHandler+0xa18>)
 802d31a:	4293      	cmp	r3, r2
 802d31c:	d036      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d31e:	687b      	ldr	r3, [r7, #4]
 802d320:	681b      	ldr	r3, [r3, #0]
 802d322:	4a73      	ldr	r2, [pc, #460]	; (802d4f0 <HAL_DMA_IRQHandler+0xa1c>)
 802d324:	4293      	cmp	r3, r2
 802d326:	d031      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d328:	687b      	ldr	r3, [r7, #4]
 802d32a:	681b      	ldr	r3, [r3, #0]
 802d32c:	4a71      	ldr	r2, [pc, #452]	; (802d4f4 <HAL_DMA_IRQHandler+0xa20>)
 802d32e:	4293      	cmp	r3, r2
 802d330:	d02c      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d332:	687b      	ldr	r3, [r7, #4]
 802d334:	681b      	ldr	r3, [r3, #0]
 802d336:	4a70      	ldr	r2, [pc, #448]	; (802d4f8 <HAL_DMA_IRQHandler+0xa24>)
 802d338:	4293      	cmp	r3, r2
 802d33a:	d027      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d33c:	687b      	ldr	r3, [r7, #4]
 802d33e:	681b      	ldr	r3, [r3, #0]
 802d340:	4a6e      	ldr	r2, [pc, #440]	; (802d4fc <HAL_DMA_IRQHandler+0xa28>)
 802d342:	4293      	cmp	r3, r2
 802d344:	d022      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d346:	687b      	ldr	r3, [r7, #4]
 802d348:	681b      	ldr	r3, [r3, #0]
 802d34a:	4a6d      	ldr	r2, [pc, #436]	; (802d500 <HAL_DMA_IRQHandler+0xa2c>)
 802d34c:	4293      	cmp	r3, r2
 802d34e:	d01d      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d350:	687b      	ldr	r3, [r7, #4]
 802d352:	681b      	ldr	r3, [r3, #0]
 802d354:	4a6b      	ldr	r2, [pc, #428]	; (802d504 <HAL_DMA_IRQHandler+0xa30>)
 802d356:	4293      	cmp	r3, r2
 802d358:	d018      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d35a:	687b      	ldr	r3, [r7, #4]
 802d35c:	681b      	ldr	r3, [r3, #0]
 802d35e:	4a6a      	ldr	r2, [pc, #424]	; (802d508 <HAL_DMA_IRQHandler+0xa34>)
 802d360:	4293      	cmp	r3, r2
 802d362:	d013      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d364:	687b      	ldr	r3, [r7, #4]
 802d366:	681b      	ldr	r3, [r3, #0]
 802d368:	4a68      	ldr	r2, [pc, #416]	; (802d50c <HAL_DMA_IRQHandler+0xa38>)
 802d36a:	4293      	cmp	r3, r2
 802d36c:	d00e      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d36e:	687b      	ldr	r3, [r7, #4]
 802d370:	681b      	ldr	r3, [r3, #0]
 802d372:	4a67      	ldr	r2, [pc, #412]	; (802d510 <HAL_DMA_IRQHandler+0xa3c>)
 802d374:	4293      	cmp	r3, r2
 802d376:	d009      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d378:	687b      	ldr	r3, [r7, #4]
 802d37a:	681b      	ldr	r3, [r3, #0]
 802d37c:	4a65      	ldr	r2, [pc, #404]	; (802d514 <HAL_DMA_IRQHandler+0xa40>)
 802d37e:	4293      	cmp	r3, r2
 802d380:	d004      	beq.n	802d38c <HAL_DMA_IRQHandler+0x8b8>
 802d382:	687b      	ldr	r3, [r7, #4]
 802d384:	681b      	ldr	r3, [r3, #0]
 802d386:	4a64      	ldr	r2, [pc, #400]	; (802d518 <HAL_DMA_IRQHandler+0xa44>)
 802d388:	4293      	cmp	r3, r2
 802d38a:	d108      	bne.n	802d39e <HAL_DMA_IRQHandler+0x8ca>
 802d38c:	687b      	ldr	r3, [r7, #4]
 802d38e:	681b      	ldr	r3, [r3, #0]
 802d390:	681a      	ldr	r2, [r3, #0]
 802d392:	687b      	ldr	r3, [r7, #4]
 802d394:	681b      	ldr	r3, [r3, #0]
 802d396:	f022 0201 	bic.w	r2, r2, #1
 802d39a:	601a      	str	r2, [r3, #0]
 802d39c:	e007      	b.n	802d3ae <HAL_DMA_IRQHandler+0x8da>
 802d39e:	687b      	ldr	r3, [r7, #4]
 802d3a0:	681b      	ldr	r3, [r3, #0]
 802d3a2:	681a      	ldr	r2, [r3, #0]
 802d3a4:	687b      	ldr	r3, [r7, #4]
 802d3a6:	681b      	ldr	r3, [r3, #0]
 802d3a8:	f022 0201 	bic.w	r2, r2, #1
 802d3ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 802d3ae:	68fb      	ldr	r3, [r7, #12]
 802d3b0:	3301      	adds	r3, #1
 802d3b2:	60fb      	str	r3, [r7, #12]
 802d3b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802d3b6:	429a      	cmp	r2, r3
 802d3b8:	d307      	bcc.n	802d3ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 802d3ba:	687b      	ldr	r3, [r7, #4]
 802d3bc:	681b      	ldr	r3, [r3, #0]
 802d3be:	681b      	ldr	r3, [r3, #0]
 802d3c0:	f003 0301 	and.w	r3, r3, #1
 802d3c4:	2b00      	cmp	r3, #0
 802d3c6:	d1f2      	bne.n	802d3ae <HAL_DMA_IRQHandler+0x8da>
 802d3c8:	e000      	b.n	802d3cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 802d3ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802d3cc:	687b      	ldr	r3, [r7, #4]
 802d3ce:	681b      	ldr	r3, [r3, #0]
 802d3d0:	681b      	ldr	r3, [r3, #0]
 802d3d2:	f003 0301 	and.w	r3, r3, #1
 802d3d6:	2b00      	cmp	r3, #0
 802d3d8:	d004      	beq.n	802d3e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 802d3da:	687b      	ldr	r3, [r7, #4]
 802d3dc:	2203      	movs	r2, #3
 802d3de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802d3e2:	e003      	b.n	802d3ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 802d3e4:	687b      	ldr	r3, [r7, #4]
 802d3e6:	2201      	movs	r2, #1
 802d3e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802d3ec:	687b      	ldr	r3, [r7, #4]
 802d3ee:	2200      	movs	r2, #0
 802d3f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 802d3f4:	687b      	ldr	r3, [r7, #4]
 802d3f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d3f8:	2b00      	cmp	r3, #0
 802d3fa:	f000 8272 	beq.w	802d8e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802d3fe:	687b      	ldr	r3, [r7, #4]
 802d400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d402:	6878      	ldr	r0, [r7, #4]
 802d404:	4798      	blx	r3
 802d406:	e26c      	b.n	802d8e2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 802d408:	687b      	ldr	r3, [r7, #4]
 802d40a:	681b      	ldr	r3, [r3, #0]
 802d40c:	4a43      	ldr	r2, [pc, #268]	; (802d51c <HAL_DMA_IRQHandler+0xa48>)
 802d40e:	4293      	cmp	r3, r2
 802d410:	d022      	beq.n	802d458 <HAL_DMA_IRQHandler+0x984>
 802d412:	687b      	ldr	r3, [r7, #4]
 802d414:	681b      	ldr	r3, [r3, #0]
 802d416:	4a42      	ldr	r2, [pc, #264]	; (802d520 <HAL_DMA_IRQHandler+0xa4c>)
 802d418:	4293      	cmp	r3, r2
 802d41a:	d01d      	beq.n	802d458 <HAL_DMA_IRQHandler+0x984>
 802d41c:	687b      	ldr	r3, [r7, #4]
 802d41e:	681b      	ldr	r3, [r3, #0]
 802d420:	4a40      	ldr	r2, [pc, #256]	; (802d524 <HAL_DMA_IRQHandler+0xa50>)
 802d422:	4293      	cmp	r3, r2
 802d424:	d018      	beq.n	802d458 <HAL_DMA_IRQHandler+0x984>
 802d426:	687b      	ldr	r3, [r7, #4]
 802d428:	681b      	ldr	r3, [r3, #0]
 802d42a:	4a3f      	ldr	r2, [pc, #252]	; (802d528 <HAL_DMA_IRQHandler+0xa54>)
 802d42c:	4293      	cmp	r3, r2
 802d42e:	d013      	beq.n	802d458 <HAL_DMA_IRQHandler+0x984>
 802d430:	687b      	ldr	r3, [r7, #4]
 802d432:	681b      	ldr	r3, [r3, #0]
 802d434:	4a3d      	ldr	r2, [pc, #244]	; (802d52c <HAL_DMA_IRQHandler+0xa58>)
 802d436:	4293      	cmp	r3, r2
 802d438:	d00e      	beq.n	802d458 <HAL_DMA_IRQHandler+0x984>
 802d43a:	687b      	ldr	r3, [r7, #4]
 802d43c:	681b      	ldr	r3, [r3, #0]
 802d43e:	4a3c      	ldr	r2, [pc, #240]	; (802d530 <HAL_DMA_IRQHandler+0xa5c>)
 802d440:	4293      	cmp	r3, r2
 802d442:	d009      	beq.n	802d458 <HAL_DMA_IRQHandler+0x984>
 802d444:	687b      	ldr	r3, [r7, #4]
 802d446:	681b      	ldr	r3, [r3, #0]
 802d448:	4a3a      	ldr	r2, [pc, #232]	; (802d534 <HAL_DMA_IRQHandler+0xa60>)
 802d44a:	4293      	cmp	r3, r2
 802d44c:	d004      	beq.n	802d458 <HAL_DMA_IRQHandler+0x984>
 802d44e:	687b      	ldr	r3, [r7, #4]
 802d450:	681b      	ldr	r3, [r3, #0]
 802d452:	4a39      	ldr	r2, [pc, #228]	; (802d538 <HAL_DMA_IRQHandler+0xa64>)
 802d454:	4293      	cmp	r3, r2
 802d456:	d101      	bne.n	802d45c <HAL_DMA_IRQHandler+0x988>
 802d458:	2301      	movs	r3, #1
 802d45a:	e000      	b.n	802d45e <HAL_DMA_IRQHandler+0x98a>
 802d45c:	2300      	movs	r3, #0
 802d45e:	2b00      	cmp	r3, #0
 802d460:	f000 823f 	beq.w	802d8e2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 802d464:	687b      	ldr	r3, [r7, #4]
 802d466:	681b      	ldr	r3, [r3, #0]
 802d468:	681b      	ldr	r3, [r3, #0]
 802d46a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 802d46c:	687b      	ldr	r3, [r7, #4]
 802d46e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d470:	f003 031f 	and.w	r3, r3, #31
 802d474:	2204      	movs	r2, #4
 802d476:	409a      	lsls	r2, r3
 802d478:	697b      	ldr	r3, [r7, #20]
 802d47a:	4013      	ands	r3, r2
 802d47c:	2b00      	cmp	r3, #0
 802d47e:	f000 80cd 	beq.w	802d61c <HAL_DMA_IRQHandler+0xb48>
 802d482:	693b      	ldr	r3, [r7, #16]
 802d484:	f003 0304 	and.w	r3, r3, #4
 802d488:	2b00      	cmp	r3, #0
 802d48a:	f000 80c7 	beq.w	802d61c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 802d48e:	687b      	ldr	r3, [r7, #4]
 802d490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d492:	f003 031f 	and.w	r3, r3, #31
 802d496:	2204      	movs	r2, #4
 802d498:	409a      	lsls	r2, r3
 802d49a:	69fb      	ldr	r3, [r7, #28]
 802d49c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d49e:	693b      	ldr	r3, [r7, #16]
 802d4a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d4a4:	2b00      	cmp	r3, #0
 802d4a6:	d049      	beq.n	802d53c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802d4a8:	693b      	ldr	r3, [r7, #16]
 802d4aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d4ae:	2b00      	cmp	r3, #0
 802d4b0:	d109      	bne.n	802d4c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802d4b2:	687b      	ldr	r3, [r7, #4]
 802d4b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d4b6:	2b00      	cmp	r3, #0
 802d4b8:	f000 8210 	beq.w	802d8dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 802d4bc:	687b      	ldr	r3, [r7, #4]
 802d4be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d4c0:	6878      	ldr	r0, [r7, #4]
 802d4c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d4c4:	e20a      	b.n	802d8dc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802d4c6:	687b      	ldr	r3, [r7, #4]
 802d4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d4ca:	2b00      	cmp	r3, #0
 802d4cc:	f000 8206 	beq.w	802d8dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 802d4d0:	687b      	ldr	r3, [r7, #4]
 802d4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d4d4:	6878      	ldr	r0, [r7, #4]
 802d4d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d4d8:	e200      	b.n	802d8dc <HAL_DMA_IRQHandler+0xe08>
 802d4da:	bf00      	nop
 802d4dc:	40020010 	.word	0x40020010
 802d4e0:	40020028 	.word	0x40020028
 802d4e4:	40020040 	.word	0x40020040
 802d4e8:	40020058 	.word	0x40020058
 802d4ec:	40020070 	.word	0x40020070
 802d4f0:	40020088 	.word	0x40020088
 802d4f4:	400200a0 	.word	0x400200a0
 802d4f8:	400200b8 	.word	0x400200b8
 802d4fc:	40020410 	.word	0x40020410
 802d500:	40020428 	.word	0x40020428
 802d504:	40020440 	.word	0x40020440
 802d508:	40020458 	.word	0x40020458
 802d50c:	40020470 	.word	0x40020470
 802d510:	40020488 	.word	0x40020488
 802d514:	400204a0 	.word	0x400204a0
 802d518:	400204b8 	.word	0x400204b8
 802d51c:	58025408 	.word	0x58025408
 802d520:	5802541c 	.word	0x5802541c
 802d524:	58025430 	.word	0x58025430
 802d528:	58025444 	.word	0x58025444
 802d52c:	58025458 	.word	0x58025458
 802d530:	5802546c 	.word	0x5802546c
 802d534:	58025480 	.word	0x58025480
 802d538:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802d53c:	693b      	ldr	r3, [r7, #16]
 802d53e:	f003 0320 	and.w	r3, r3, #32
 802d542:	2b00      	cmp	r3, #0
 802d544:	d160      	bne.n	802d608 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 802d546:	687b      	ldr	r3, [r7, #4]
 802d548:	681b      	ldr	r3, [r3, #0]
 802d54a:	4a7f      	ldr	r2, [pc, #508]	; (802d748 <HAL_DMA_IRQHandler+0xc74>)
 802d54c:	4293      	cmp	r3, r2
 802d54e:	d04a      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d550:	687b      	ldr	r3, [r7, #4]
 802d552:	681b      	ldr	r3, [r3, #0]
 802d554:	4a7d      	ldr	r2, [pc, #500]	; (802d74c <HAL_DMA_IRQHandler+0xc78>)
 802d556:	4293      	cmp	r3, r2
 802d558:	d045      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d55a:	687b      	ldr	r3, [r7, #4]
 802d55c:	681b      	ldr	r3, [r3, #0]
 802d55e:	4a7c      	ldr	r2, [pc, #496]	; (802d750 <HAL_DMA_IRQHandler+0xc7c>)
 802d560:	4293      	cmp	r3, r2
 802d562:	d040      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d564:	687b      	ldr	r3, [r7, #4]
 802d566:	681b      	ldr	r3, [r3, #0]
 802d568:	4a7a      	ldr	r2, [pc, #488]	; (802d754 <HAL_DMA_IRQHandler+0xc80>)
 802d56a:	4293      	cmp	r3, r2
 802d56c:	d03b      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d56e:	687b      	ldr	r3, [r7, #4]
 802d570:	681b      	ldr	r3, [r3, #0]
 802d572:	4a79      	ldr	r2, [pc, #484]	; (802d758 <HAL_DMA_IRQHandler+0xc84>)
 802d574:	4293      	cmp	r3, r2
 802d576:	d036      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d578:	687b      	ldr	r3, [r7, #4]
 802d57a:	681b      	ldr	r3, [r3, #0]
 802d57c:	4a77      	ldr	r2, [pc, #476]	; (802d75c <HAL_DMA_IRQHandler+0xc88>)
 802d57e:	4293      	cmp	r3, r2
 802d580:	d031      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d582:	687b      	ldr	r3, [r7, #4]
 802d584:	681b      	ldr	r3, [r3, #0]
 802d586:	4a76      	ldr	r2, [pc, #472]	; (802d760 <HAL_DMA_IRQHandler+0xc8c>)
 802d588:	4293      	cmp	r3, r2
 802d58a:	d02c      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d58c:	687b      	ldr	r3, [r7, #4]
 802d58e:	681b      	ldr	r3, [r3, #0]
 802d590:	4a74      	ldr	r2, [pc, #464]	; (802d764 <HAL_DMA_IRQHandler+0xc90>)
 802d592:	4293      	cmp	r3, r2
 802d594:	d027      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d596:	687b      	ldr	r3, [r7, #4]
 802d598:	681b      	ldr	r3, [r3, #0]
 802d59a:	4a73      	ldr	r2, [pc, #460]	; (802d768 <HAL_DMA_IRQHandler+0xc94>)
 802d59c:	4293      	cmp	r3, r2
 802d59e:	d022      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d5a0:	687b      	ldr	r3, [r7, #4]
 802d5a2:	681b      	ldr	r3, [r3, #0]
 802d5a4:	4a71      	ldr	r2, [pc, #452]	; (802d76c <HAL_DMA_IRQHandler+0xc98>)
 802d5a6:	4293      	cmp	r3, r2
 802d5a8:	d01d      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d5aa:	687b      	ldr	r3, [r7, #4]
 802d5ac:	681b      	ldr	r3, [r3, #0]
 802d5ae:	4a70      	ldr	r2, [pc, #448]	; (802d770 <HAL_DMA_IRQHandler+0xc9c>)
 802d5b0:	4293      	cmp	r3, r2
 802d5b2:	d018      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d5b4:	687b      	ldr	r3, [r7, #4]
 802d5b6:	681b      	ldr	r3, [r3, #0]
 802d5b8:	4a6e      	ldr	r2, [pc, #440]	; (802d774 <HAL_DMA_IRQHandler+0xca0>)
 802d5ba:	4293      	cmp	r3, r2
 802d5bc:	d013      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d5be:	687b      	ldr	r3, [r7, #4]
 802d5c0:	681b      	ldr	r3, [r3, #0]
 802d5c2:	4a6d      	ldr	r2, [pc, #436]	; (802d778 <HAL_DMA_IRQHandler+0xca4>)
 802d5c4:	4293      	cmp	r3, r2
 802d5c6:	d00e      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d5c8:	687b      	ldr	r3, [r7, #4]
 802d5ca:	681b      	ldr	r3, [r3, #0]
 802d5cc:	4a6b      	ldr	r2, [pc, #428]	; (802d77c <HAL_DMA_IRQHandler+0xca8>)
 802d5ce:	4293      	cmp	r3, r2
 802d5d0:	d009      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d5d2:	687b      	ldr	r3, [r7, #4]
 802d5d4:	681b      	ldr	r3, [r3, #0]
 802d5d6:	4a6a      	ldr	r2, [pc, #424]	; (802d780 <HAL_DMA_IRQHandler+0xcac>)
 802d5d8:	4293      	cmp	r3, r2
 802d5da:	d004      	beq.n	802d5e6 <HAL_DMA_IRQHandler+0xb12>
 802d5dc:	687b      	ldr	r3, [r7, #4]
 802d5de:	681b      	ldr	r3, [r3, #0]
 802d5e0:	4a68      	ldr	r2, [pc, #416]	; (802d784 <HAL_DMA_IRQHandler+0xcb0>)
 802d5e2:	4293      	cmp	r3, r2
 802d5e4:	d108      	bne.n	802d5f8 <HAL_DMA_IRQHandler+0xb24>
 802d5e6:	687b      	ldr	r3, [r7, #4]
 802d5e8:	681b      	ldr	r3, [r3, #0]
 802d5ea:	681a      	ldr	r2, [r3, #0]
 802d5ec:	687b      	ldr	r3, [r7, #4]
 802d5ee:	681b      	ldr	r3, [r3, #0]
 802d5f0:	f022 0208 	bic.w	r2, r2, #8
 802d5f4:	601a      	str	r2, [r3, #0]
 802d5f6:	e007      	b.n	802d608 <HAL_DMA_IRQHandler+0xb34>
 802d5f8:	687b      	ldr	r3, [r7, #4]
 802d5fa:	681b      	ldr	r3, [r3, #0]
 802d5fc:	681a      	ldr	r2, [r3, #0]
 802d5fe:	687b      	ldr	r3, [r7, #4]
 802d600:	681b      	ldr	r3, [r3, #0]
 802d602:	f022 0204 	bic.w	r2, r2, #4
 802d606:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 802d608:	687b      	ldr	r3, [r7, #4]
 802d60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d60c:	2b00      	cmp	r3, #0
 802d60e:	f000 8165 	beq.w	802d8dc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802d612:	687b      	ldr	r3, [r7, #4]
 802d614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d616:	6878      	ldr	r0, [r7, #4]
 802d618:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d61a:	e15f      	b.n	802d8dc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 802d61c:	687b      	ldr	r3, [r7, #4]
 802d61e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d620:	f003 031f 	and.w	r3, r3, #31
 802d624:	2202      	movs	r2, #2
 802d626:	409a      	lsls	r2, r3
 802d628:	697b      	ldr	r3, [r7, #20]
 802d62a:	4013      	ands	r3, r2
 802d62c:	2b00      	cmp	r3, #0
 802d62e:	f000 80c5 	beq.w	802d7bc <HAL_DMA_IRQHandler+0xce8>
 802d632:	693b      	ldr	r3, [r7, #16]
 802d634:	f003 0302 	and.w	r3, r3, #2
 802d638:	2b00      	cmp	r3, #0
 802d63a:	f000 80bf 	beq.w	802d7bc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 802d63e:	687b      	ldr	r3, [r7, #4]
 802d640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d642:	f003 031f 	and.w	r3, r3, #31
 802d646:	2202      	movs	r2, #2
 802d648:	409a      	lsls	r2, r3
 802d64a:	69fb      	ldr	r3, [r7, #28]
 802d64c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d64e:	693b      	ldr	r3, [r7, #16]
 802d650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d654:	2b00      	cmp	r3, #0
 802d656:	d018      	beq.n	802d68a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802d658:	693b      	ldr	r3, [r7, #16]
 802d65a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d65e:	2b00      	cmp	r3, #0
 802d660:	d109      	bne.n	802d676 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802d662:	687b      	ldr	r3, [r7, #4]
 802d664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d666:	2b00      	cmp	r3, #0
 802d668:	f000 813a 	beq.w	802d8e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 802d66c:	687b      	ldr	r3, [r7, #4]
 802d66e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d670:	6878      	ldr	r0, [r7, #4]
 802d672:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d674:	e134      	b.n	802d8e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802d676:	687b      	ldr	r3, [r7, #4]
 802d678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d67a:	2b00      	cmp	r3, #0
 802d67c:	f000 8130 	beq.w	802d8e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 802d680:	687b      	ldr	r3, [r7, #4]
 802d682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d684:	6878      	ldr	r0, [r7, #4]
 802d686:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d688:	e12a      	b.n	802d8e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802d68a:	693b      	ldr	r3, [r7, #16]
 802d68c:	f003 0320 	and.w	r3, r3, #32
 802d690:	2b00      	cmp	r3, #0
 802d692:	f040 8089 	bne.w	802d7a8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 802d696:	687b      	ldr	r3, [r7, #4]
 802d698:	681b      	ldr	r3, [r3, #0]
 802d69a:	4a2b      	ldr	r2, [pc, #172]	; (802d748 <HAL_DMA_IRQHandler+0xc74>)
 802d69c:	4293      	cmp	r3, r2
 802d69e:	d04a      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d6a0:	687b      	ldr	r3, [r7, #4]
 802d6a2:	681b      	ldr	r3, [r3, #0]
 802d6a4:	4a29      	ldr	r2, [pc, #164]	; (802d74c <HAL_DMA_IRQHandler+0xc78>)
 802d6a6:	4293      	cmp	r3, r2
 802d6a8:	d045      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d6aa:	687b      	ldr	r3, [r7, #4]
 802d6ac:	681b      	ldr	r3, [r3, #0]
 802d6ae:	4a28      	ldr	r2, [pc, #160]	; (802d750 <HAL_DMA_IRQHandler+0xc7c>)
 802d6b0:	4293      	cmp	r3, r2
 802d6b2:	d040      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d6b4:	687b      	ldr	r3, [r7, #4]
 802d6b6:	681b      	ldr	r3, [r3, #0]
 802d6b8:	4a26      	ldr	r2, [pc, #152]	; (802d754 <HAL_DMA_IRQHandler+0xc80>)
 802d6ba:	4293      	cmp	r3, r2
 802d6bc:	d03b      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d6be:	687b      	ldr	r3, [r7, #4]
 802d6c0:	681b      	ldr	r3, [r3, #0]
 802d6c2:	4a25      	ldr	r2, [pc, #148]	; (802d758 <HAL_DMA_IRQHandler+0xc84>)
 802d6c4:	4293      	cmp	r3, r2
 802d6c6:	d036      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d6c8:	687b      	ldr	r3, [r7, #4]
 802d6ca:	681b      	ldr	r3, [r3, #0]
 802d6cc:	4a23      	ldr	r2, [pc, #140]	; (802d75c <HAL_DMA_IRQHandler+0xc88>)
 802d6ce:	4293      	cmp	r3, r2
 802d6d0:	d031      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d6d2:	687b      	ldr	r3, [r7, #4]
 802d6d4:	681b      	ldr	r3, [r3, #0]
 802d6d6:	4a22      	ldr	r2, [pc, #136]	; (802d760 <HAL_DMA_IRQHandler+0xc8c>)
 802d6d8:	4293      	cmp	r3, r2
 802d6da:	d02c      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d6dc:	687b      	ldr	r3, [r7, #4]
 802d6de:	681b      	ldr	r3, [r3, #0]
 802d6e0:	4a20      	ldr	r2, [pc, #128]	; (802d764 <HAL_DMA_IRQHandler+0xc90>)
 802d6e2:	4293      	cmp	r3, r2
 802d6e4:	d027      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d6e6:	687b      	ldr	r3, [r7, #4]
 802d6e8:	681b      	ldr	r3, [r3, #0]
 802d6ea:	4a1f      	ldr	r2, [pc, #124]	; (802d768 <HAL_DMA_IRQHandler+0xc94>)
 802d6ec:	4293      	cmp	r3, r2
 802d6ee:	d022      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d6f0:	687b      	ldr	r3, [r7, #4]
 802d6f2:	681b      	ldr	r3, [r3, #0]
 802d6f4:	4a1d      	ldr	r2, [pc, #116]	; (802d76c <HAL_DMA_IRQHandler+0xc98>)
 802d6f6:	4293      	cmp	r3, r2
 802d6f8:	d01d      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d6fa:	687b      	ldr	r3, [r7, #4]
 802d6fc:	681b      	ldr	r3, [r3, #0]
 802d6fe:	4a1c      	ldr	r2, [pc, #112]	; (802d770 <HAL_DMA_IRQHandler+0xc9c>)
 802d700:	4293      	cmp	r3, r2
 802d702:	d018      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d704:	687b      	ldr	r3, [r7, #4]
 802d706:	681b      	ldr	r3, [r3, #0]
 802d708:	4a1a      	ldr	r2, [pc, #104]	; (802d774 <HAL_DMA_IRQHandler+0xca0>)
 802d70a:	4293      	cmp	r3, r2
 802d70c:	d013      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d70e:	687b      	ldr	r3, [r7, #4]
 802d710:	681b      	ldr	r3, [r3, #0]
 802d712:	4a19      	ldr	r2, [pc, #100]	; (802d778 <HAL_DMA_IRQHandler+0xca4>)
 802d714:	4293      	cmp	r3, r2
 802d716:	d00e      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d718:	687b      	ldr	r3, [r7, #4]
 802d71a:	681b      	ldr	r3, [r3, #0]
 802d71c:	4a17      	ldr	r2, [pc, #92]	; (802d77c <HAL_DMA_IRQHandler+0xca8>)
 802d71e:	4293      	cmp	r3, r2
 802d720:	d009      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d722:	687b      	ldr	r3, [r7, #4]
 802d724:	681b      	ldr	r3, [r3, #0]
 802d726:	4a16      	ldr	r2, [pc, #88]	; (802d780 <HAL_DMA_IRQHandler+0xcac>)
 802d728:	4293      	cmp	r3, r2
 802d72a:	d004      	beq.n	802d736 <HAL_DMA_IRQHandler+0xc62>
 802d72c:	687b      	ldr	r3, [r7, #4]
 802d72e:	681b      	ldr	r3, [r3, #0]
 802d730:	4a14      	ldr	r2, [pc, #80]	; (802d784 <HAL_DMA_IRQHandler+0xcb0>)
 802d732:	4293      	cmp	r3, r2
 802d734:	d128      	bne.n	802d788 <HAL_DMA_IRQHandler+0xcb4>
 802d736:	687b      	ldr	r3, [r7, #4]
 802d738:	681b      	ldr	r3, [r3, #0]
 802d73a:	681a      	ldr	r2, [r3, #0]
 802d73c:	687b      	ldr	r3, [r7, #4]
 802d73e:	681b      	ldr	r3, [r3, #0]
 802d740:	f022 0214 	bic.w	r2, r2, #20
 802d744:	601a      	str	r2, [r3, #0]
 802d746:	e027      	b.n	802d798 <HAL_DMA_IRQHandler+0xcc4>
 802d748:	40020010 	.word	0x40020010
 802d74c:	40020028 	.word	0x40020028
 802d750:	40020040 	.word	0x40020040
 802d754:	40020058 	.word	0x40020058
 802d758:	40020070 	.word	0x40020070
 802d75c:	40020088 	.word	0x40020088
 802d760:	400200a0 	.word	0x400200a0
 802d764:	400200b8 	.word	0x400200b8
 802d768:	40020410 	.word	0x40020410
 802d76c:	40020428 	.word	0x40020428
 802d770:	40020440 	.word	0x40020440
 802d774:	40020458 	.word	0x40020458
 802d778:	40020470 	.word	0x40020470
 802d77c:	40020488 	.word	0x40020488
 802d780:	400204a0 	.word	0x400204a0
 802d784:	400204b8 	.word	0x400204b8
 802d788:	687b      	ldr	r3, [r7, #4]
 802d78a:	681b      	ldr	r3, [r3, #0]
 802d78c:	681a      	ldr	r2, [r3, #0]
 802d78e:	687b      	ldr	r3, [r7, #4]
 802d790:	681b      	ldr	r3, [r3, #0]
 802d792:	f022 020a 	bic.w	r2, r2, #10
 802d796:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802d798:	687b      	ldr	r3, [r7, #4]
 802d79a:	2201      	movs	r2, #1
 802d79c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802d7a0:	687b      	ldr	r3, [r7, #4]
 802d7a2:	2200      	movs	r2, #0
 802d7a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 802d7a8:	687b      	ldr	r3, [r7, #4]
 802d7aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d7ac:	2b00      	cmp	r3, #0
 802d7ae:	f000 8097 	beq.w	802d8e0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802d7b2:	687b      	ldr	r3, [r7, #4]
 802d7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d7b6:	6878      	ldr	r0, [r7, #4]
 802d7b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d7ba:	e091      	b.n	802d8e0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 802d7bc:	687b      	ldr	r3, [r7, #4]
 802d7be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d7c0:	f003 031f 	and.w	r3, r3, #31
 802d7c4:	2208      	movs	r2, #8
 802d7c6:	409a      	lsls	r2, r3
 802d7c8:	697b      	ldr	r3, [r7, #20]
 802d7ca:	4013      	ands	r3, r2
 802d7cc:	2b00      	cmp	r3, #0
 802d7ce:	f000 8088 	beq.w	802d8e2 <HAL_DMA_IRQHandler+0xe0e>
 802d7d2:	693b      	ldr	r3, [r7, #16]
 802d7d4:	f003 0308 	and.w	r3, r3, #8
 802d7d8:	2b00      	cmp	r3, #0
 802d7da:	f000 8082 	beq.w	802d8e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 802d7de:	687b      	ldr	r3, [r7, #4]
 802d7e0:	681b      	ldr	r3, [r3, #0]
 802d7e2:	4a41      	ldr	r2, [pc, #260]	; (802d8e8 <HAL_DMA_IRQHandler+0xe14>)
 802d7e4:	4293      	cmp	r3, r2
 802d7e6:	d04a      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d7e8:	687b      	ldr	r3, [r7, #4]
 802d7ea:	681b      	ldr	r3, [r3, #0]
 802d7ec:	4a3f      	ldr	r2, [pc, #252]	; (802d8ec <HAL_DMA_IRQHandler+0xe18>)
 802d7ee:	4293      	cmp	r3, r2
 802d7f0:	d045      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d7f2:	687b      	ldr	r3, [r7, #4]
 802d7f4:	681b      	ldr	r3, [r3, #0]
 802d7f6:	4a3e      	ldr	r2, [pc, #248]	; (802d8f0 <HAL_DMA_IRQHandler+0xe1c>)
 802d7f8:	4293      	cmp	r3, r2
 802d7fa:	d040      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d7fc:	687b      	ldr	r3, [r7, #4]
 802d7fe:	681b      	ldr	r3, [r3, #0]
 802d800:	4a3c      	ldr	r2, [pc, #240]	; (802d8f4 <HAL_DMA_IRQHandler+0xe20>)
 802d802:	4293      	cmp	r3, r2
 802d804:	d03b      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d806:	687b      	ldr	r3, [r7, #4]
 802d808:	681b      	ldr	r3, [r3, #0]
 802d80a:	4a3b      	ldr	r2, [pc, #236]	; (802d8f8 <HAL_DMA_IRQHandler+0xe24>)
 802d80c:	4293      	cmp	r3, r2
 802d80e:	d036      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d810:	687b      	ldr	r3, [r7, #4]
 802d812:	681b      	ldr	r3, [r3, #0]
 802d814:	4a39      	ldr	r2, [pc, #228]	; (802d8fc <HAL_DMA_IRQHandler+0xe28>)
 802d816:	4293      	cmp	r3, r2
 802d818:	d031      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d81a:	687b      	ldr	r3, [r7, #4]
 802d81c:	681b      	ldr	r3, [r3, #0]
 802d81e:	4a38      	ldr	r2, [pc, #224]	; (802d900 <HAL_DMA_IRQHandler+0xe2c>)
 802d820:	4293      	cmp	r3, r2
 802d822:	d02c      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d824:	687b      	ldr	r3, [r7, #4]
 802d826:	681b      	ldr	r3, [r3, #0]
 802d828:	4a36      	ldr	r2, [pc, #216]	; (802d904 <HAL_DMA_IRQHandler+0xe30>)
 802d82a:	4293      	cmp	r3, r2
 802d82c:	d027      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d82e:	687b      	ldr	r3, [r7, #4]
 802d830:	681b      	ldr	r3, [r3, #0]
 802d832:	4a35      	ldr	r2, [pc, #212]	; (802d908 <HAL_DMA_IRQHandler+0xe34>)
 802d834:	4293      	cmp	r3, r2
 802d836:	d022      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d838:	687b      	ldr	r3, [r7, #4]
 802d83a:	681b      	ldr	r3, [r3, #0]
 802d83c:	4a33      	ldr	r2, [pc, #204]	; (802d90c <HAL_DMA_IRQHandler+0xe38>)
 802d83e:	4293      	cmp	r3, r2
 802d840:	d01d      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d842:	687b      	ldr	r3, [r7, #4]
 802d844:	681b      	ldr	r3, [r3, #0]
 802d846:	4a32      	ldr	r2, [pc, #200]	; (802d910 <HAL_DMA_IRQHandler+0xe3c>)
 802d848:	4293      	cmp	r3, r2
 802d84a:	d018      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d84c:	687b      	ldr	r3, [r7, #4]
 802d84e:	681b      	ldr	r3, [r3, #0]
 802d850:	4a30      	ldr	r2, [pc, #192]	; (802d914 <HAL_DMA_IRQHandler+0xe40>)
 802d852:	4293      	cmp	r3, r2
 802d854:	d013      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d856:	687b      	ldr	r3, [r7, #4]
 802d858:	681b      	ldr	r3, [r3, #0]
 802d85a:	4a2f      	ldr	r2, [pc, #188]	; (802d918 <HAL_DMA_IRQHandler+0xe44>)
 802d85c:	4293      	cmp	r3, r2
 802d85e:	d00e      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d860:	687b      	ldr	r3, [r7, #4]
 802d862:	681b      	ldr	r3, [r3, #0]
 802d864:	4a2d      	ldr	r2, [pc, #180]	; (802d91c <HAL_DMA_IRQHandler+0xe48>)
 802d866:	4293      	cmp	r3, r2
 802d868:	d009      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d86a:	687b      	ldr	r3, [r7, #4]
 802d86c:	681b      	ldr	r3, [r3, #0]
 802d86e:	4a2c      	ldr	r2, [pc, #176]	; (802d920 <HAL_DMA_IRQHandler+0xe4c>)
 802d870:	4293      	cmp	r3, r2
 802d872:	d004      	beq.n	802d87e <HAL_DMA_IRQHandler+0xdaa>
 802d874:	687b      	ldr	r3, [r7, #4]
 802d876:	681b      	ldr	r3, [r3, #0]
 802d878:	4a2a      	ldr	r2, [pc, #168]	; (802d924 <HAL_DMA_IRQHandler+0xe50>)
 802d87a:	4293      	cmp	r3, r2
 802d87c:	d108      	bne.n	802d890 <HAL_DMA_IRQHandler+0xdbc>
 802d87e:	687b      	ldr	r3, [r7, #4]
 802d880:	681b      	ldr	r3, [r3, #0]
 802d882:	681a      	ldr	r2, [r3, #0]
 802d884:	687b      	ldr	r3, [r7, #4]
 802d886:	681b      	ldr	r3, [r3, #0]
 802d888:	f022 021c 	bic.w	r2, r2, #28
 802d88c:	601a      	str	r2, [r3, #0]
 802d88e:	e007      	b.n	802d8a0 <HAL_DMA_IRQHandler+0xdcc>
 802d890:	687b      	ldr	r3, [r7, #4]
 802d892:	681b      	ldr	r3, [r3, #0]
 802d894:	681a      	ldr	r2, [r3, #0]
 802d896:	687b      	ldr	r3, [r7, #4]
 802d898:	681b      	ldr	r3, [r3, #0]
 802d89a:	f022 020e 	bic.w	r2, r2, #14
 802d89e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802d8a0:	687b      	ldr	r3, [r7, #4]
 802d8a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d8a4:	f003 031f 	and.w	r3, r3, #31
 802d8a8:	2201      	movs	r2, #1
 802d8aa:	409a      	lsls	r2, r3
 802d8ac:	69fb      	ldr	r3, [r7, #28]
 802d8ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 802d8b0:	687b      	ldr	r3, [r7, #4]
 802d8b2:	2201      	movs	r2, #1
 802d8b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802d8b6:	687b      	ldr	r3, [r7, #4]
 802d8b8:	2201      	movs	r2, #1
 802d8ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802d8be:	687b      	ldr	r3, [r7, #4]
 802d8c0:	2200      	movs	r2, #0
 802d8c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 802d8c6:	687b      	ldr	r3, [r7, #4]
 802d8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d8ca:	2b00      	cmp	r3, #0
 802d8cc:	d009      	beq.n	802d8e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802d8ce:	687b      	ldr	r3, [r7, #4]
 802d8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d8d2:	6878      	ldr	r0, [r7, #4]
 802d8d4:	4798      	blx	r3
 802d8d6:	e004      	b.n	802d8e2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 802d8d8:	bf00      	nop
 802d8da:	e002      	b.n	802d8e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d8dc:	bf00      	nop
 802d8de:	e000      	b.n	802d8e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d8e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 802d8e2:	3728      	adds	r7, #40	; 0x28
 802d8e4:	46bd      	mov	sp, r7
 802d8e6:	bd80      	pop	{r7, pc}
 802d8e8:	40020010 	.word	0x40020010
 802d8ec:	40020028 	.word	0x40020028
 802d8f0:	40020040 	.word	0x40020040
 802d8f4:	40020058 	.word	0x40020058
 802d8f8:	40020070 	.word	0x40020070
 802d8fc:	40020088 	.word	0x40020088
 802d900:	400200a0 	.word	0x400200a0
 802d904:	400200b8 	.word	0x400200b8
 802d908:	40020410 	.word	0x40020410
 802d90c:	40020428 	.word	0x40020428
 802d910:	40020440 	.word	0x40020440
 802d914:	40020458 	.word	0x40020458
 802d918:	40020470 	.word	0x40020470
 802d91c:	40020488 	.word	0x40020488
 802d920:	400204a0 	.word	0x400204a0
 802d924:	400204b8 	.word	0x400204b8

0802d928 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 802d928:	b480      	push	{r7}
 802d92a:	b083      	sub	sp, #12
 802d92c:	af00      	add	r7, sp, #0
 802d92e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 802d930:	687b      	ldr	r3, [r7, #4]
 802d932:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802d936:	b2db      	uxtb	r3, r3
}
 802d938:	4618      	mov	r0, r3
 802d93a:	370c      	adds	r7, #12
 802d93c:	46bd      	mov	sp, r7
 802d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d942:	4770      	bx	lr

0802d944 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 802d944:	b480      	push	{r7}
 802d946:	b083      	sub	sp, #12
 802d948:	af00      	add	r7, sp, #0
 802d94a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 802d94c:	687b      	ldr	r3, [r7, #4]
 802d94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 802d950:	4618      	mov	r0, r3
 802d952:	370c      	adds	r7, #12
 802d954:	46bd      	mov	sp, r7
 802d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d95a:	4770      	bx	lr

0802d95c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802d95c:	b480      	push	{r7}
 802d95e:	b087      	sub	sp, #28
 802d960:	af00      	add	r7, sp, #0
 802d962:	60f8      	str	r0, [r7, #12]
 802d964:	60b9      	str	r1, [r7, #8]
 802d966:	607a      	str	r2, [r7, #4]
 802d968:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802d96a:	68fb      	ldr	r3, [r7, #12]
 802d96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802d96e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802d970:	68fb      	ldr	r3, [r7, #12]
 802d972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802d974:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802d976:	68fb      	ldr	r3, [r7, #12]
 802d978:	681b      	ldr	r3, [r3, #0]
 802d97a:	4a7f      	ldr	r2, [pc, #508]	; (802db78 <DMA_SetConfig+0x21c>)
 802d97c:	4293      	cmp	r3, r2
 802d97e:	d072      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d980:	68fb      	ldr	r3, [r7, #12]
 802d982:	681b      	ldr	r3, [r3, #0]
 802d984:	4a7d      	ldr	r2, [pc, #500]	; (802db7c <DMA_SetConfig+0x220>)
 802d986:	4293      	cmp	r3, r2
 802d988:	d06d      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d98a:	68fb      	ldr	r3, [r7, #12]
 802d98c:	681b      	ldr	r3, [r3, #0]
 802d98e:	4a7c      	ldr	r2, [pc, #496]	; (802db80 <DMA_SetConfig+0x224>)
 802d990:	4293      	cmp	r3, r2
 802d992:	d068      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d994:	68fb      	ldr	r3, [r7, #12]
 802d996:	681b      	ldr	r3, [r3, #0]
 802d998:	4a7a      	ldr	r2, [pc, #488]	; (802db84 <DMA_SetConfig+0x228>)
 802d99a:	4293      	cmp	r3, r2
 802d99c:	d063      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d99e:	68fb      	ldr	r3, [r7, #12]
 802d9a0:	681b      	ldr	r3, [r3, #0]
 802d9a2:	4a79      	ldr	r2, [pc, #484]	; (802db88 <DMA_SetConfig+0x22c>)
 802d9a4:	4293      	cmp	r3, r2
 802d9a6:	d05e      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d9a8:	68fb      	ldr	r3, [r7, #12]
 802d9aa:	681b      	ldr	r3, [r3, #0]
 802d9ac:	4a77      	ldr	r2, [pc, #476]	; (802db8c <DMA_SetConfig+0x230>)
 802d9ae:	4293      	cmp	r3, r2
 802d9b0:	d059      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d9b2:	68fb      	ldr	r3, [r7, #12]
 802d9b4:	681b      	ldr	r3, [r3, #0]
 802d9b6:	4a76      	ldr	r2, [pc, #472]	; (802db90 <DMA_SetConfig+0x234>)
 802d9b8:	4293      	cmp	r3, r2
 802d9ba:	d054      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d9bc:	68fb      	ldr	r3, [r7, #12]
 802d9be:	681b      	ldr	r3, [r3, #0]
 802d9c0:	4a74      	ldr	r2, [pc, #464]	; (802db94 <DMA_SetConfig+0x238>)
 802d9c2:	4293      	cmp	r3, r2
 802d9c4:	d04f      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d9c6:	68fb      	ldr	r3, [r7, #12]
 802d9c8:	681b      	ldr	r3, [r3, #0]
 802d9ca:	4a73      	ldr	r2, [pc, #460]	; (802db98 <DMA_SetConfig+0x23c>)
 802d9cc:	4293      	cmp	r3, r2
 802d9ce:	d04a      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d9d0:	68fb      	ldr	r3, [r7, #12]
 802d9d2:	681b      	ldr	r3, [r3, #0]
 802d9d4:	4a71      	ldr	r2, [pc, #452]	; (802db9c <DMA_SetConfig+0x240>)
 802d9d6:	4293      	cmp	r3, r2
 802d9d8:	d045      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d9da:	68fb      	ldr	r3, [r7, #12]
 802d9dc:	681b      	ldr	r3, [r3, #0]
 802d9de:	4a70      	ldr	r2, [pc, #448]	; (802dba0 <DMA_SetConfig+0x244>)
 802d9e0:	4293      	cmp	r3, r2
 802d9e2:	d040      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d9e4:	68fb      	ldr	r3, [r7, #12]
 802d9e6:	681b      	ldr	r3, [r3, #0]
 802d9e8:	4a6e      	ldr	r2, [pc, #440]	; (802dba4 <DMA_SetConfig+0x248>)
 802d9ea:	4293      	cmp	r3, r2
 802d9ec:	d03b      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d9ee:	68fb      	ldr	r3, [r7, #12]
 802d9f0:	681b      	ldr	r3, [r3, #0]
 802d9f2:	4a6d      	ldr	r2, [pc, #436]	; (802dba8 <DMA_SetConfig+0x24c>)
 802d9f4:	4293      	cmp	r3, r2
 802d9f6:	d036      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802d9f8:	68fb      	ldr	r3, [r7, #12]
 802d9fa:	681b      	ldr	r3, [r3, #0]
 802d9fc:	4a6b      	ldr	r2, [pc, #428]	; (802dbac <DMA_SetConfig+0x250>)
 802d9fe:	4293      	cmp	r3, r2
 802da00:	d031      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802da02:	68fb      	ldr	r3, [r7, #12]
 802da04:	681b      	ldr	r3, [r3, #0]
 802da06:	4a6a      	ldr	r2, [pc, #424]	; (802dbb0 <DMA_SetConfig+0x254>)
 802da08:	4293      	cmp	r3, r2
 802da0a:	d02c      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802da0c:	68fb      	ldr	r3, [r7, #12]
 802da0e:	681b      	ldr	r3, [r3, #0]
 802da10:	4a68      	ldr	r2, [pc, #416]	; (802dbb4 <DMA_SetConfig+0x258>)
 802da12:	4293      	cmp	r3, r2
 802da14:	d027      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802da16:	68fb      	ldr	r3, [r7, #12]
 802da18:	681b      	ldr	r3, [r3, #0]
 802da1a:	4a67      	ldr	r2, [pc, #412]	; (802dbb8 <DMA_SetConfig+0x25c>)
 802da1c:	4293      	cmp	r3, r2
 802da1e:	d022      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802da20:	68fb      	ldr	r3, [r7, #12]
 802da22:	681b      	ldr	r3, [r3, #0]
 802da24:	4a65      	ldr	r2, [pc, #404]	; (802dbbc <DMA_SetConfig+0x260>)
 802da26:	4293      	cmp	r3, r2
 802da28:	d01d      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802da2a:	68fb      	ldr	r3, [r7, #12]
 802da2c:	681b      	ldr	r3, [r3, #0]
 802da2e:	4a64      	ldr	r2, [pc, #400]	; (802dbc0 <DMA_SetConfig+0x264>)
 802da30:	4293      	cmp	r3, r2
 802da32:	d018      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802da34:	68fb      	ldr	r3, [r7, #12]
 802da36:	681b      	ldr	r3, [r3, #0]
 802da38:	4a62      	ldr	r2, [pc, #392]	; (802dbc4 <DMA_SetConfig+0x268>)
 802da3a:	4293      	cmp	r3, r2
 802da3c:	d013      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802da3e:	68fb      	ldr	r3, [r7, #12]
 802da40:	681b      	ldr	r3, [r3, #0]
 802da42:	4a61      	ldr	r2, [pc, #388]	; (802dbc8 <DMA_SetConfig+0x26c>)
 802da44:	4293      	cmp	r3, r2
 802da46:	d00e      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802da48:	68fb      	ldr	r3, [r7, #12]
 802da4a:	681b      	ldr	r3, [r3, #0]
 802da4c:	4a5f      	ldr	r2, [pc, #380]	; (802dbcc <DMA_SetConfig+0x270>)
 802da4e:	4293      	cmp	r3, r2
 802da50:	d009      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802da52:	68fb      	ldr	r3, [r7, #12]
 802da54:	681b      	ldr	r3, [r3, #0]
 802da56:	4a5e      	ldr	r2, [pc, #376]	; (802dbd0 <DMA_SetConfig+0x274>)
 802da58:	4293      	cmp	r3, r2
 802da5a:	d004      	beq.n	802da66 <DMA_SetConfig+0x10a>
 802da5c:	68fb      	ldr	r3, [r7, #12]
 802da5e:	681b      	ldr	r3, [r3, #0]
 802da60:	4a5c      	ldr	r2, [pc, #368]	; (802dbd4 <DMA_SetConfig+0x278>)
 802da62:	4293      	cmp	r3, r2
 802da64:	d101      	bne.n	802da6a <DMA_SetConfig+0x10e>
 802da66:	2301      	movs	r3, #1
 802da68:	e000      	b.n	802da6c <DMA_SetConfig+0x110>
 802da6a:	2300      	movs	r3, #0
 802da6c:	2b00      	cmp	r3, #0
 802da6e:	d00d      	beq.n	802da8c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802da70:	68fb      	ldr	r3, [r7, #12]
 802da72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802da74:	68fa      	ldr	r2, [r7, #12]
 802da76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802da78:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 802da7a:	68fb      	ldr	r3, [r7, #12]
 802da7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802da7e:	2b00      	cmp	r3, #0
 802da80:	d004      	beq.n	802da8c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802da82:	68fb      	ldr	r3, [r7, #12]
 802da84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802da86:	68fa      	ldr	r2, [r7, #12]
 802da88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802da8a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802da8c:	68fb      	ldr	r3, [r7, #12]
 802da8e:	681b      	ldr	r3, [r3, #0]
 802da90:	4a39      	ldr	r2, [pc, #228]	; (802db78 <DMA_SetConfig+0x21c>)
 802da92:	4293      	cmp	r3, r2
 802da94:	d04a      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802da96:	68fb      	ldr	r3, [r7, #12]
 802da98:	681b      	ldr	r3, [r3, #0]
 802da9a:	4a38      	ldr	r2, [pc, #224]	; (802db7c <DMA_SetConfig+0x220>)
 802da9c:	4293      	cmp	r3, r2
 802da9e:	d045      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802daa0:	68fb      	ldr	r3, [r7, #12]
 802daa2:	681b      	ldr	r3, [r3, #0]
 802daa4:	4a36      	ldr	r2, [pc, #216]	; (802db80 <DMA_SetConfig+0x224>)
 802daa6:	4293      	cmp	r3, r2
 802daa8:	d040      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802daaa:	68fb      	ldr	r3, [r7, #12]
 802daac:	681b      	ldr	r3, [r3, #0]
 802daae:	4a35      	ldr	r2, [pc, #212]	; (802db84 <DMA_SetConfig+0x228>)
 802dab0:	4293      	cmp	r3, r2
 802dab2:	d03b      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802dab4:	68fb      	ldr	r3, [r7, #12]
 802dab6:	681b      	ldr	r3, [r3, #0]
 802dab8:	4a33      	ldr	r2, [pc, #204]	; (802db88 <DMA_SetConfig+0x22c>)
 802daba:	4293      	cmp	r3, r2
 802dabc:	d036      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802dabe:	68fb      	ldr	r3, [r7, #12]
 802dac0:	681b      	ldr	r3, [r3, #0]
 802dac2:	4a32      	ldr	r2, [pc, #200]	; (802db8c <DMA_SetConfig+0x230>)
 802dac4:	4293      	cmp	r3, r2
 802dac6:	d031      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802dac8:	68fb      	ldr	r3, [r7, #12]
 802daca:	681b      	ldr	r3, [r3, #0]
 802dacc:	4a30      	ldr	r2, [pc, #192]	; (802db90 <DMA_SetConfig+0x234>)
 802dace:	4293      	cmp	r3, r2
 802dad0:	d02c      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802dad2:	68fb      	ldr	r3, [r7, #12]
 802dad4:	681b      	ldr	r3, [r3, #0]
 802dad6:	4a2f      	ldr	r2, [pc, #188]	; (802db94 <DMA_SetConfig+0x238>)
 802dad8:	4293      	cmp	r3, r2
 802dada:	d027      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802dadc:	68fb      	ldr	r3, [r7, #12]
 802dade:	681b      	ldr	r3, [r3, #0]
 802dae0:	4a2d      	ldr	r2, [pc, #180]	; (802db98 <DMA_SetConfig+0x23c>)
 802dae2:	4293      	cmp	r3, r2
 802dae4:	d022      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802dae6:	68fb      	ldr	r3, [r7, #12]
 802dae8:	681b      	ldr	r3, [r3, #0]
 802daea:	4a2c      	ldr	r2, [pc, #176]	; (802db9c <DMA_SetConfig+0x240>)
 802daec:	4293      	cmp	r3, r2
 802daee:	d01d      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802daf0:	68fb      	ldr	r3, [r7, #12]
 802daf2:	681b      	ldr	r3, [r3, #0]
 802daf4:	4a2a      	ldr	r2, [pc, #168]	; (802dba0 <DMA_SetConfig+0x244>)
 802daf6:	4293      	cmp	r3, r2
 802daf8:	d018      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802dafa:	68fb      	ldr	r3, [r7, #12]
 802dafc:	681b      	ldr	r3, [r3, #0]
 802dafe:	4a29      	ldr	r2, [pc, #164]	; (802dba4 <DMA_SetConfig+0x248>)
 802db00:	4293      	cmp	r3, r2
 802db02:	d013      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802db04:	68fb      	ldr	r3, [r7, #12]
 802db06:	681b      	ldr	r3, [r3, #0]
 802db08:	4a27      	ldr	r2, [pc, #156]	; (802dba8 <DMA_SetConfig+0x24c>)
 802db0a:	4293      	cmp	r3, r2
 802db0c:	d00e      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802db0e:	68fb      	ldr	r3, [r7, #12]
 802db10:	681b      	ldr	r3, [r3, #0]
 802db12:	4a26      	ldr	r2, [pc, #152]	; (802dbac <DMA_SetConfig+0x250>)
 802db14:	4293      	cmp	r3, r2
 802db16:	d009      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802db18:	68fb      	ldr	r3, [r7, #12]
 802db1a:	681b      	ldr	r3, [r3, #0]
 802db1c:	4a24      	ldr	r2, [pc, #144]	; (802dbb0 <DMA_SetConfig+0x254>)
 802db1e:	4293      	cmp	r3, r2
 802db20:	d004      	beq.n	802db2c <DMA_SetConfig+0x1d0>
 802db22:	68fb      	ldr	r3, [r7, #12]
 802db24:	681b      	ldr	r3, [r3, #0]
 802db26:	4a23      	ldr	r2, [pc, #140]	; (802dbb4 <DMA_SetConfig+0x258>)
 802db28:	4293      	cmp	r3, r2
 802db2a:	d101      	bne.n	802db30 <DMA_SetConfig+0x1d4>
 802db2c:	2301      	movs	r3, #1
 802db2e:	e000      	b.n	802db32 <DMA_SetConfig+0x1d6>
 802db30:	2300      	movs	r3, #0
 802db32:	2b00      	cmp	r3, #0
 802db34:	d059      	beq.n	802dbea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802db36:	68fb      	ldr	r3, [r7, #12]
 802db38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802db3a:	f003 031f 	and.w	r3, r3, #31
 802db3e:	223f      	movs	r2, #63	; 0x3f
 802db40:	409a      	lsls	r2, r3
 802db42:	697b      	ldr	r3, [r7, #20]
 802db44:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802db46:	68fb      	ldr	r3, [r7, #12]
 802db48:	681b      	ldr	r3, [r3, #0]
 802db4a:	681a      	ldr	r2, [r3, #0]
 802db4c:	68fb      	ldr	r3, [r7, #12]
 802db4e:	681b      	ldr	r3, [r3, #0]
 802db50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802db54:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 802db56:	68fb      	ldr	r3, [r7, #12]
 802db58:	681b      	ldr	r3, [r3, #0]
 802db5a:	683a      	ldr	r2, [r7, #0]
 802db5c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802db5e:	68fb      	ldr	r3, [r7, #12]
 802db60:	689b      	ldr	r3, [r3, #8]
 802db62:	2b40      	cmp	r3, #64	; 0x40
 802db64:	d138      	bne.n	802dbd8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 802db66:	68fb      	ldr	r3, [r7, #12]
 802db68:	681b      	ldr	r3, [r3, #0]
 802db6a:	687a      	ldr	r2, [r7, #4]
 802db6c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 802db6e:	68fb      	ldr	r3, [r7, #12]
 802db70:	681b      	ldr	r3, [r3, #0]
 802db72:	68ba      	ldr	r2, [r7, #8]
 802db74:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 802db76:	e086      	b.n	802dc86 <DMA_SetConfig+0x32a>
 802db78:	40020010 	.word	0x40020010
 802db7c:	40020028 	.word	0x40020028
 802db80:	40020040 	.word	0x40020040
 802db84:	40020058 	.word	0x40020058
 802db88:	40020070 	.word	0x40020070
 802db8c:	40020088 	.word	0x40020088
 802db90:	400200a0 	.word	0x400200a0
 802db94:	400200b8 	.word	0x400200b8
 802db98:	40020410 	.word	0x40020410
 802db9c:	40020428 	.word	0x40020428
 802dba0:	40020440 	.word	0x40020440
 802dba4:	40020458 	.word	0x40020458
 802dba8:	40020470 	.word	0x40020470
 802dbac:	40020488 	.word	0x40020488
 802dbb0:	400204a0 	.word	0x400204a0
 802dbb4:	400204b8 	.word	0x400204b8
 802dbb8:	58025408 	.word	0x58025408
 802dbbc:	5802541c 	.word	0x5802541c
 802dbc0:	58025430 	.word	0x58025430
 802dbc4:	58025444 	.word	0x58025444
 802dbc8:	58025458 	.word	0x58025458
 802dbcc:	5802546c 	.word	0x5802546c
 802dbd0:	58025480 	.word	0x58025480
 802dbd4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 802dbd8:	68fb      	ldr	r3, [r7, #12]
 802dbda:	681b      	ldr	r3, [r3, #0]
 802dbdc:	68ba      	ldr	r2, [r7, #8]
 802dbde:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 802dbe0:	68fb      	ldr	r3, [r7, #12]
 802dbe2:	681b      	ldr	r3, [r3, #0]
 802dbe4:	687a      	ldr	r2, [r7, #4]
 802dbe6:	60da      	str	r2, [r3, #12]
}
 802dbe8:	e04d      	b.n	802dc86 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802dbea:	68fb      	ldr	r3, [r7, #12]
 802dbec:	681b      	ldr	r3, [r3, #0]
 802dbee:	4a29      	ldr	r2, [pc, #164]	; (802dc94 <DMA_SetConfig+0x338>)
 802dbf0:	4293      	cmp	r3, r2
 802dbf2:	d022      	beq.n	802dc3a <DMA_SetConfig+0x2de>
 802dbf4:	68fb      	ldr	r3, [r7, #12]
 802dbf6:	681b      	ldr	r3, [r3, #0]
 802dbf8:	4a27      	ldr	r2, [pc, #156]	; (802dc98 <DMA_SetConfig+0x33c>)
 802dbfa:	4293      	cmp	r3, r2
 802dbfc:	d01d      	beq.n	802dc3a <DMA_SetConfig+0x2de>
 802dbfe:	68fb      	ldr	r3, [r7, #12]
 802dc00:	681b      	ldr	r3, [r3, #0]
 802dc02:	4a26      	ldr	r2, [pc, #152]	; (802dc9c <DMA_SetConfig+0x340>)
 802dc04:	4293      	cmp	r3, r2
 802dc06:	d018      	beq.n	802dc3a <DMA_SetConfig+0x2de>
 802dc08:	68fb      	ldr	r3, [r7, #12]
 802dc0a:	681b      	ldr	r3, [r3, #0]
 802dc0c:	4a24      	ldr	r2, [pc, #144]	; (802dca0 <DMA_SetConfig+0x344>)
 802dc0e:	4293      	cmp	r3, r2
 802dc10:	d013      	beq.n	802dc3a <DMA_SetConfig+0x2de>
 802dc12:	68fb      	ldr	r3, [r7, #12]
 802dc14:	681b      	ldr	r3, [r3, #0]
 802dc16:	4a23      	ldr	r2, [pc, #140]	; (802dca4 <DMA_SetConfig+0x348>)
 802dc18:	4293      	cmp	r3, r2
 802dc1a:	d00e      	beq.n	802dc3a <DMA_SetConfig+0x2de>
 802dc1c:	68fb      	ldr	r3, [r7, #12]
 802dc1e:	681b      	ldr	r3, [r3, #0]
 802dc20:	4a21      	ldr	r2, [pc, #132]	; (802dca8 <DMA_SetConfig+0x34c>)
 802dc22:	4293      	cmp	r3, r2
 802dc24:	d009      	beq.n	802dc3a <DMA_SetConfig+0x2de>
 802dc26:	68fb      	ldr	r3, [r7, #12]
 802dc28:	681b      	ldr	r3, [r3, #0]
 802dc2a:	4a20      	ldr	r2, [pc, #128]	; (802dcac <DMA_SetConfig+0x350>)
 802dc2c:	4293      	cmp	r3, r2
 802dc2e:	d004      	beq.n	802dc3a <DMA_SetConfig+0x2de>
 802dc30:	68fb      	ldr	r3, [r7, #12]
 802dc32:	681b      	ldr	r3, [r3, #0]
 802dc34:	4a1e      	ldr	r2, [pc, #120]	; (802dcb0 <DMA_SetConfig+0x354>)
 802dc36:	4293      	cmp	r3, r2
 802dc38:	d101      	bne.n	802dc3e <DMA_SetConfig+0x2e2>
 802dc3a:	2301      	movs	r3, #1
 802dc3c:	e000      	b.n	802dc40 <DMA_SetConfig+0x2e4>
 802dc3e:	2300      	movs	r3, #0
 802dc40:	2b00      	cmp	r3, #0
 802dc42:	d020      	beq.n	802dc86 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802dc44:	68fb      	ldr	r3, [r7, #12]
 802dc46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dc48:	f003 031f 	and.w	r3, r3, #31
 802dc4c:	2201      	movs	r2, #1
 802dc4e:	409a      	lsls	r2, r3
 802dc50:	693b      	ldr	r3, [r7, #16]
 802dc52:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 802dc54:	68fb      	ldr	r3, [r7, #12]
 802dc56:	681b      	ldr	r3, [r3, #0]
 802dc58:	683a      	ldr	r2, [r7, #0]
 802dc5a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802dc5c:	68fb      	ldr	r3, [r7, #12]
 802dc5e:	689b      	ldr	r3, [r3, #8]
 802dc60:	2b40      	cmp	r3, #64	; 0x40
 802dc62:	d108      	bne.n	802dc76 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 802dc64:	68fb      	ldr	r3, [r7, #12]
 802dc66:	681b      	ldr	r3, [r3, #0]
 802dc68:	687a      	ldr	r2, [r7, #4]
 802dc6a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 802dc6c:	68fb      	ldr	r3, [r7, #12]
 802dc6e:	681b      	ldr	r3, [r3, #0]
 802dc70:	68ba      	ldr	r2, [r7, #8]
 802dc72:	60da      	str	r2, [r3, #12]
}
 802dc74:	e007      	b.n	802dc86 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 802dc76:	68fb      	ldr	r3, [r7, #12]
 802dc78:	681b      	ldr	r3, [r3, #0]
 802dc7a:	68ba      	ldr	r2, [r7, #8]
 802dc7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 802dc7e:	68fb      	ldr	r3, [r7, #12]
 802dc80:	681b      	ldr	r3, [r3, #0]
 802dc82:	687a      	ldr	r2, [r7, #4]
 802dc84:	60da      	str	r2, [r3, #12]
}
 802dc86:	bf00      	nop
 802dc88:	371c      	adds	r7, #28
 802dc8a:	46bd      	mov	sp, r7
 802dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dc90:	4770      	bx	lr
 802dc92:	bf00      	nop
 802dc94:	58025408 	.word	0x58025408
 802dc98:	5802541c 	.word	0x5802541c
 802dc9c:	58025430 	.word	0x58025430
 802dca0:	58025444 	.word	0x58025444
 802dca4:	58025458 	.word	0x58025458
 802dca8:	5802546c 	.word	0x5802546c
 802dcac:	58025480 	.word	0x58025480
 802dcb0:	58025494 	.word	0x58025494

0802dcb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802dcb4:	b480      	push	{r7}
 802dcb6:	b085      	sub	sp, #20
 802dcb8:	af00      	add	r7, sp, #0
 802dcba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802dcbc:	687b      	ldr	r3, [r7, #4]
 802dcbe:	681b      	ldr	r3, [r3, #0]
 802dcc0:	4a42      	ldr	r2, [pc, #264]	; (802ddcc <DMA_CalcBaseAndBitshift+0x118>)
 802dcc2:	4293      	cmp	r3, r2
 802dcc4:	d04a      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dcc6:	687b      	ldr	r3, [r7, #4]
 802dcc8:	681b      	ldr	r3, [r3, #0]
 802dcca:	4a41      	ldr	r2, [pc, #260]	; (802ddd0 <DMA_CalcBaseAndBitshift+0x11c>)
 802dccc:	4293      	cmp	r3, r2
 802dcce:	d045      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dcd0:	687b      	ldr	r3, [r7, #4]
 802dcd2:	681b      	ldr	r3, [r3, #0]
 802dcd4:	4a3f      	ldr	r2, [pc, #252]	; (802ddd4 <DMA_CalcBaseAndBitshift+0x120>)
 802dcd6:	4293      	cmp	r3, r2
 802dcd8:	d040      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dcda:	687b      	ldr	r3, [r7, #4]
 802dcdc:	681b      	ldr	r3, [r3, #0]
 802dcde:	4a3e      	ldr	r2, [pc, #248]	; (802ddd8 <DMA_CalcBaseAndBitshift+0x124>)
 802dce0:	4293      	cmp	r3, r2
 802dce2:	d03b      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dce4:	687b      	ldr	r3, [r7, #4]
 802dce6:	681b      	ldr	r3, [r3, #0]
 802dce8:	4a3c      	ldr	r2, [pc, #240]	; (802dddc <DMA_CalcBaseAndBitshift+0x128>)
 802dcea:	4293      	cmp	r3, r2
 802dcec:	d036      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dcee:	687b      	ldr	r3, [r7, #4]
 802dcf0:	681b      	ldr	r3, [r3, #0]
 802dcf2:	4a3b      	ldr	r2, [pc, #236]	; (802dde0 <DMA_CalcBaseAndBitshift+0x12c>)
 802dcf4:	4293      	cmp	r3, r2
 802dcf6:	d031      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dcf8:	687b      	ldr	r3, [r7, #4]
 802dcfa:	681b      	ldr	r3, [r3, #0]
 802dcfc:	4a39      	ldr	r2, [pc, #228]	; (802dde4 <DMA_CalcBaseAndBitshift+0x130>)
 802dcfe:	4293      	cmp	r3, r2
 802dd00:	d02c      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dd02:	687b      	ldr	r3, [r7, #4]
 802dd04:	681b      	ldr	r3, [r3, #0]
 802dd06:	4a38      	ldr	r2, [pc, #224]	; (802dde8 <DMA_CalcBaseAndBitshift+0x134>)
 802dd08:	4293      	cmp	r3, r2
 802dd0a:	d027      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dd0c:	687b      	ldr	r3, [r7, #4]
 802dd0e:	681b      	ldr	r3, [r3, #0]
 802dd10:	4a36      	ldr	r2, [pc, #216]	; (802ddec <DMA_CalcBaseAndBitshift+0x138>)
 802dd12:	4293      	cmp	r3, r2
 802dd14:	d022      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dd16:	687b      	ldr	r3, [r7, #4]
 802dd18:	681b      	ldr	r3, [r3, #0]
 802dd1a:	4a35      	ldr	r2, [pc, #212]	; (802ddf0 <DMA_CalcBaseAndBitshift+0x13c>)
 802dd1c:	4293      	cmp	r3, r2
 802dd1e:	d01d      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dd20:	687b      	ldr	r3, [r7, #4]
 802dd22:	681b      	ldr	r3, [r3, #0]
 802dd24:	4a33      	ldr	r2, [pc, #204]	; (802ddf4 <DMA_CalcBaseAndBitshift+0x140>)
 802dd26:	4293      	cmp	r3, r2
 802dd28:	d018      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dd2a:	687b      	ldr	r3, [r7, #4]
 802dd2c:	681b      	ldr	r3, [r3, #0]
 802dd2e:	4a32      	ldr	r2, [pc, #200]	; (802ddf8 <DMA_CalcBaseAndBitshift+0x144>)
 802dd30:	4293      	cmp	r3, r2
 802dd32:	d013      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dd34:	687b      	ldr	r3, [r7, #4]
 802dd36:	681b      	ldr	r3, [r3, #0]
 802dd38:	4a30      	ldr	r2, [pc, #192]	; (802ddfc <DMA_CalcBaseAndBitshift+0x148>)
 802dd3a:	4293      	cmp	r3, r2
 802dd3c:	d00e      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dd3e:	687b      	ldr	r3, [r7, #4]
 802dd40:	681b      	ldr	r3, [r3, #0]
 802dd42:	4a2f      	ldr	r2, [pc, #188]	; (802de00 <DMA_CalcBaseAndBitshift+0x14c>)
 802dd44:	4293      	cmp	r3, r2
 802dd46:	d009      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dd48:	687b      	ldr	r3, [r7, #4]
 802dd4a:	681b      	ldr	r3, [r3, #0]
 802dd4c:	4a2d      	ldr	r2, [pc, #180]	; (802de04 <DMA_CalcBaseAndBitshift+0x150>)
 802dd4e:	4293      	cmp	r3, r2
 802dd50:	d004      	beq.n	802dd5c <DMA_CalcBaseAndBitshift+0xa8>
 802dd52:	687b      	ldr	r3, [r7, #4]
 802dd54:	681b      	ldr	r3, [r3, #0]
 802dd56:	4a2c      	ldr	r2, [pc, #176]	; (802de08 <DMA_CalcBaseAndBitshift+0x154>)
 802dd58:	4293      	cmp	r3, r2
 802dd5a:	d101      	bne.n	802dd60 <DMA_CalcBaseAndBitshift+0xac>
 802dd5c:	2301      	movs	r3, #1
 802dd5e:	e000      	b.n	802dd62 <DMA_CalcBaseAndBitshift+0xae>
 802dd60:	2300      	movs	r3, #0
 802dd62:	2b00      	cmp	r3, #0
 802dd64:	d024      	beq.n	802ddb0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802dd66:	687b      	ldr	r3, [r7, #4]
 802dd68:	681b      	ldr	r3, [r3, #0]
 802dd6a:	b2db      	uxtb	r3, r3
 802dd6c:	3b10      	subs	r3, #16
 802dd6e:	4a27      	ldr	r2, [pc, #156]	; (802de0c <DMA_CalcBaseAndBitshift+0x158>)
 802dd70:	fba2 2303 	umull	r2, r3, r2, r3
 802dd74:	091b      	lsrs	r3, r3, #4
 802dd76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 802dd78:	68fb      	ldr	r3, [r7, #12]
 802dd7a:	f003 0307 	and.w	r3, r3, #7
 802dd7e:	4a24      	ldr	r2, [pc, #144]	; (802de10 <DMA_CalcBaseAndBitshift+0x15c>)
 802dd80:	5cd3      	ldrb	r3, [r2, r3]
 802dd82:	461a      	mov	r2, r3
 802dd84:	687b      	ldr	r3, [r7, #4]
 802dd86:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 802dd88:	68fb      	ldr	r3, [r7, #12]
 802dd8a:	2b03      	cmp	r3, #3
 802dd8c:	d908      	bls.n	802dda0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 802dd8e:	687b      	ldr	r3, [r7, #4]
 802dd90:	681b      	ldr	r3, [r3, #0]
 802dd92:	461a      	mov	r2, r3
 802dd94:	4b1f      	ldr	r3, [pc, #124]	; (802de14 <DMA_CalcBaseAndBitshift+0x160>)
 802dd96:	4013      	ands	r3, r2
 802dd98:	1d1a      	adds	r2, r3, #4
 802dd9a:	687b      	ldr	r3, [r7, #4]
 802dd9c:	659a      	str	r2, [r3, #88]	; 0x58
 802dd9e:	e00d      	b.n	802ddbc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 802dda0:	687b      	ldr	r3, [r7, #4]
 802dda2:	681b      	ldr	r3, [r3, #0]
 802dda4:	461a      	mov	r2, r3
 802dda6:	4b1b      	ldr	r3, [pc, #108]	; (802de14 <DMA_CalcBaseAndBitshift+0x160>)
 802dda8:	4013      	ands	r3, r2
 802ddaa:	687a      	ldr	r2, [r7, #4]
 802ddac:	6593      	str	r3, [r2, #88]	; 0x58
 802ddae:	e005      	b.n	802ddbc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 802ddb0:	687b      	ldr	r3, [r7, #4]
 802ddb2:	681b      	ldr	r3, [r3, #0]
 802ddb4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802ddb8:	687b      	ldr	r3, [r7, #4]
 802ddba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 802ddbc:	687b      	ldr	r3, [r7, #4]
 802ddbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 802ddc0:	4618      	mov	r0, r3
 802ddc2:	3714      	adds	r7, #20
 802ddc4:	46bd      	mov	sp, r7
 802ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ddca:	4770      	bx	lr
 802ddcc:	40020010 	.word	0x40020010
 802ddd0:	40020028 	.word	0x40020028
 802ddd4:	40020040 	.word	0x40020040
 802ddd8:	40020058 	.word	0x40020058
 802dddc:	40020070 	.word	0x40020070
 802dde0:	40020088 	.word	0x40020088
 802dde4:	400200a0 	.word	0x400200a0
 802dde8:	400200b8 	.word	0x400200b8
 802ddec:	40020410 	.word	0x40020410
 802ddf0:	40020428 	.word	0x40020428
 802ddf4:	40020440 	.word	0x40020440
 802ddf8:	40020458 	.word	0x40020458
 802ddfc:	40020470 	.word	0x40020470
 802de00:	40020488 	.word	0x40020488
 802de04:	400204a0 	.word	0x400204a0
 802de08:	400204b8 	.word	0x400204b8
 802de0c:	aaaaaaab 	.word	0xaaaaaaab
 802de10:	080582ec 	.word	0x080582ec
 802de14:	fffffc00 	.word	0xfffffc00

0802de18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802de18:	b480      	push	{r7}
 802de1a:	b085      	sub	sp, #20
 802de1c:	af00      	add	r7, sp, #0
 802de1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802de20:	2300      	movs	r3, #0
 802de22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802de24:	687b      	ldr	r3, [r7, #4]
 802de26:	699b      	ldr	r3, [r3, #24]
 802de28:	2b00      	cmp	r3, #0
 802de2a:	d120      	bne.n	802de6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 802de2c:	687b      	ldr	r3, [r7, #4]
 802de2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802de30:	2b03      	cmp	r3, #3
 802de32:	d858      	bhi.n	802dee6 <DMA_CheckFifoParam+0xce>
 802de34:	a201      	add	r2, pc, #4	; (adr r2, 802de3c <DMA_CheckFifoParam+0x24>)
 802de36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802de3a:	bf00      	nop
 802de3c:	0802de4d 	.word	0x0802de4d
 802de40:	0802de5f 	.word	0x0802de5f
 802de44:	0802de4d 	.word	0x0802de4d
 802de48:	0802dee7 	.word	0x0802dee7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802de4c:	687b      	ldr	r3, [r7, #4]
 802de4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802de50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802de54:	2b00      	cmp	r3, #0
 802de56:	d048      	beq.n	802deea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 802de58:	2301      	movs	r3, #1
 802de5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802de5c:	e045      	b.n	802deea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802de5e:	687b      	ldr	r3, [r7, #4]
 802de60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802de62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802de66:	d142      	bne.n	802deee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 802de68:	2301      	movs	r3, #1
 802de6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802de6c:	e03f      	b.n	802deee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802de6e:	687b      	ldr	r3, [r7, #4]
 802de70:	699b      	ldr	r3, [r3, #24]
 802de72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802de76:	d123      	bne.n	802dec0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 802de78:	687b      	ldr	r3, [r7, #4]
 802de7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802de7c:	2b03      	cmp	r3, #3
 802de7e:	d838      	bhi.n	802def2 <DMA_CheckFifoParam+0xda>
 802de80:	a201      	add	r2, pc, #4	; (adr r2, 802de88 <DMA_CheckFifoParam+0x70>)
 802de82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802de86:	bf00      	nop
 802de88:	0802de99 	.word	0x0802de99
 802de8c:	0802de9f 	.word	0x0802de9f
 802de90:	0802de99 	.word	0x0802de99
 802de94:	0802deb1 	.word	0x0802deb1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 802de98:	2301      	movs	r3, #1
 802de9a:	73fb      	strb	r3, [r7, #15]
        break;
 802de9c:	e030      	b.n	802df00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802de9e:	687b      	ldr	r3, [r7, #4]
 802dea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802dea6:	2b00      	cmp	r3, #0
 802dea8:	d025      	beq.n	802def6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 802deaa:	2301      	movs	r3, #1
 802deac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802deae:	e022      	b.n	802def6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802deb0:	687b      	ldr	r3, [r7, #4]
 802deb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802deb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802deb8:	d11f      	bne.n	802defa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 802deba:	2301      	movs	r3, #1
 802debc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802debe:	e01c      	b.n	802defa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 802dec0:	687b      	ldr	r3, [r7, #4]
 802dec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dec4:	2b02      	cmp	r3, #2
 802dec6:	d902      	bls.n	802dece <DMA_CheckFifoParam+0xb6>
 802dec8:	2b03      	cmp	r3, #3
 802deca:	d003      	beq.n	802ded4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 802decc:	e018      	b.n	802df00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 802dece:	2301      	movs	r3, #1
 802ded0:	73fb      	strb	r3, [r7, #15]
        break;
 802ded2:	e015      	b.n	802df00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802ded4:	687b      	ldr	r3, [r7, #4]
 802ded6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ded8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802dedc:	2b00      	cmp	r3, #0
 802dede:	d00e      	beq.n	802defe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 802dee0:	2301      	movs	r3, #1
 802dee2:	73fb      	strb	r3, [r7, #15]
    break;
 802dee4:	e00b      	b.n	802defe <DMA_CheckFifoParam+0xe6>
        break;
 802dee6:	bf00      	nop
 802dee8:	e00a      	b.n	802df00 <DMA_CheckFifoParam+0xe8>
        break;
 802deea:	bf00      	nop
 802deec:	e008      	b.n	802df00 <DMA_CheckFifoParam+0xe8>
        break;
 802deee:	bf00      	nop
 802def0:	e006      	b.n	802df00 <DMA_CheckFifoParam+0xe8>
        break;
 802def2:	bf00      	nop
 802def4:	e004      	b.n	802df00 <DMA_CheckFifoParam+0xe8>
        break;
 802def6:	bf00      	nop
 802def8:	e002      	b.n	802df00 <DMA_CheckFifoParam+0xe8>
        break;
 802defa:	bf00      	nop
 802defc:	e000      	b.n	802df00 <DMA_CheckFifoParam+0xe8>
    break;
 802defe:	bf00      	nop
    }
  }

  return status;
 802df00:	7bfb      	ldrb	r3, [r7, #15]
}
 802df02:	4618      	mov	r0, r3
 802df04:	3714      	adds	r7, #20
 802df06:	46bd      	mov	sp, r7
 802df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 802df0c:	4770      	bx	lr
 802df0e:	bf00      	nop

0802df10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802df10:	b480      	push	{r7}
 802df12:	b085      	sub	sp, #20
 802df14:	af00      	add	r7, sp, #0
 802df16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 802df18:	687b      	ldr	r3, [r7, #4]
 802df1a:	681b      	ldr	r3, [r3, #0]
 802df1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802df1e:	687b      	ldr	r3, [r7, #4]
 802df20:	681b      	ldr	r3, [r3, #0]
 802df22:	4a38      	ldr	r2, [pc, #224]	; (802e004 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 802df24:	4293      	cmp	r3, r2
 802df26:	d022      	beq.n	802df6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802df28:	687b      	ldr	r3, [r7, #4]
 802df2a:	681b      	ldr	r3, [r3, #0]
 802df2c:	4a36      	ldr	r2, [pc, #216]	; (802e008 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 802df2e:	4293      	cmp	r3, r2
 802df30:	d01d      	beq.n	802df6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802df32:	687b      	ldr	r3, [r7, #4]
 802df34:	681b      	ldr	r3, [r3, #0]
 802df36:	4a35      	ldr	r2, [pc, #212]	; (802e00c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 802df38:	4293      	cmp	r3, r2
 802df3a:	d018      	beq.n	802df6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802df3c:	687b      	ldr	r3, [r7, #4]
 802df3e:	681b      	ldr	r3, [r3, #0]
 802df40:	4a33      	ldr	r2, [pc, #204]	; (802e010 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 802df42:	4293      	cmp	r3, r2
 802df44:	d013      	beq.n	802df6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802df46:	687b      	ldr	r3, [r7, #4]
 802df48:	681b      	ldr	r3, [r3, #0]
 802df4a:	4a32      	ldr	r2, [pc, #200]	; (802e014 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 802df4c:	4293      	cmp	r3, r2
 802df4e:	d00e      	beq.n	802df6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802df50:	687b      	ldr	r3, [r7, #4]
 802df52:	681b      	ldr	r3, [r3, #0]
 802df54:	4a30      	ldr	r2, [pc, #192]	; (802e018 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 802df56:	4293      	cmp	r3, r2
 802df58:	d009      	beq.n	802df6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802df5a:	687b      	ldr	r3, [r7, #4]
 802df5c:	681b      	ldr	r3, [r3, #0]
 802df5e:	4a2f      	ldr	r2, [pc, #188]	; (802e01c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 802df60:	4293      	cmp	r3, r2
 802df62:	d004      	beq.n	802df6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802df64:	687b      	ldr	r3, [r7, #4]
 802df66:	681b      	ldr	r3, [r3, #0]
 802df68:	4a2d      	ldr	r2, [pc, #180]	; (802e020 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 802df6a:	4293      	cmp	r3, r2
 802df6c:	d101      	bne.n	802df72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 802df6e:	2301      	movs	r3, #1
 802df70:	e000      	b.n	802df74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 802df72:	2300      	movs	r3, #0
 802df74:	2b00      	cmp	r3, #0
 802df76:	d01a      	beq.n	802dfae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 802df78:	687b      	ldr	r3, [r7, #4]
 802df7a:	681b      	ldr	r3, [r3, #0]
 802df7c:	b2db      	uxtb	r3, r3
 802df7e:	3b08      	subs	r3, #8
 802df80:	4a28      	ldr	r2, [pc, #160]	; (802e024 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 802df82:	fba2 2303 	umull	r2, r3, r2, r3
 802df86:	091b      	lsrs	r3, r3, #4
 802df88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 802df8a:	68fa      	ldr	r2, [r7, #12]
 802df8c:	4b26      	ldr	r3, [pc, #152]	; (802e028 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 802df8e:	4413      	add	r3, r2
 802df90:	009b      	lsls	r3, r3, #2
 802df92:	461a      	mov	r2, r3
 802df94:	687b      	ldr	r3, [r7, #4]
 802df96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 802df98:	687b      	ldr	r3, [r7, #4]
 802df9a:	4a24      	ldr	r2, [pc, #144]	; (802e02c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 802df9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802df9e:	68fb      	ldr	r3, [r7, #12]
 802dfa0:	f003 031f 	and.w	r3, r3, #31
 802dfa4:	2201      	movs	r2, #1
 802dfa6:	409a      	lsls	r2, r3
 802dfa8:	687b      	ldr	r3, [r7, #4]
 802dfaa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 802dfac:	e024      	b.n	802dff8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802dfae:	687b      	ldr	r3, [r7, #4]
 802dfb0:	681b      	ldr	r3, [r3, #0]
 802dfb2:	b2db      	uxtb	r3, r3
 802dfb4:	3b10      	subs	r3, #16
 802dfb6:	4a1e      	ldr	r2, [pc, #120]	; (802e030 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 802dfb8:	fba2 2303 	umull	r2, r3, r2, r3
 802dfbc:	091b      	lsrs	r3, r3, #4
 802dfbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 802dfc0:	68bb      	ldr	r3, [r7, #8]
 802dfc2:	4a1c      	ldr	r2, [pc, #112]	; (802e034 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 802dfc4:	4293      	cmp	r3, r2
 802dfc6:	d806      	bhi.n	802dfd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 802dfc8:	68bb      	ldr	r3, [r7, #8]
 802dfca:	4a1b      	ldr	r2, [pc, #108]	; (802e038 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 802dfcc:	4293      	cmp	r3, r2
 802dfce:	d902      	bls.n	802dfd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 802dfd0:	68fb      	ldr	r3, [r7, #12]
 802dfd2:	3308      	adds	r3, #8
 802dfd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 802dfd6:	68fa      	ldr	r2, [r7, #12]
 802dfd8:	4b18      	ldr	r3, [pc, #96]	; (802e03c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 802dfda:	4413      	add	r3, r2
 802dfdc:	009b      	lsls	r3, r3, #2
 802dfde:	461a      	mov	r2, r3
 802dfe0:	687b      	ldr	r3, [r7, #4]
 802dfe2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 802dfe4:	687b      	ldr	r3, [r7, #4]
 802dfe6:	4a16      	ldr	r2, [pc, #88]	; (802e040 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 802dfe8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802dfea:	68fb      	ldr	r3, [r7, #12]
 802dfec:	f003 031f 	and.w	r3, r3, #31
 802dff0:	2201      	movs	r2, #1
 802dff2:	409a      	lsls	r2, r3
 802dff4:	687b      	ldr	r3, [r7, #4]
 802dff6:	669a      	str	r2, [r3, #104]	; 0x68
}
 802dff8:	bf00      	nop
 802dffa:	3714      	adds	r7, #20
 802dffc:	46bd      	mov	sp, r7
 802dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e002:	4770      	bx	lr
 802e004:	58025408 	.word	0x58025408
 802e008:	5802541c 	.word	0x5802541c
 802e00c:	58025430 	.word	0x58025430
 802e010:	58025444 	.word	0x58025444
 802e014:	58025458 	.word	0x58025458
 802e018:	5802546c 	.word	0x5802546c
 802e01c:	58025480 	.word	0x58025480
 802e020:	58025494 	.word	0x58025494
 802e024:	cccccccd 	.word	0xcccccccd
 802e028:	16009600 	.word	0x16009600
 802e02c:	58025880 	.word	0x58025880
 802e030:	aaaaaaab 	.word	0xaaaaaaab
 802e034:	400204b8 	.word	0x400204b8
 802e038:	4002040f 	.word	0x4002040f
 802e03c:	10008200 	.word	0x10008200
 802e040:	40020880 	.word	0x40020880

0802e044 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802e044:	b480      	push	{r7}
 802e046:	b085      	sub	sp, #20
 802e048:	af00      	add	r7, sp, #0
 802e04a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 802e04c:	687b      	ldr	r3, [r7, #4]
 802e04e:	685b      	ldr	r3, [r3, #4]
 802e050:	b2db      	uxtb	r3, r3
 802e052:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 802e054:	68fb      	ldr	r3, [r7, #12]
 802e056:	2b00      	cmp	r3, #0
 802e058:	d04a      	beq.n	802e0f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 802e05a:	68fb      	ldr	r3, [r7, #12]
 802e05c:	2b08      	cmp	r3, #8
 802e05e:	d847      	bhi.n	802e0f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802e060:	687b      	ldr	r3, [r7, #4]
 802e062:	681b      	ldr	r3, [r3, #0]
 802e064:	4a25      	ldr	r2, [pc, #148]	; (802e0fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 802e066:	4293      	cmp	r3, r2
 802e068:	d022      	beq.n	802e0b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e06a:	687b      	ldr	r3, [r7, #4]
 802e06c:	681b      	ldr	r3, [r3, #0]
 802e06e:	4a24      	ldr	r2, [pc, #144]	; (802e100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 802e070:	4293      	cmp	r3, r2
 802e072:	d01d      	beq.n	802e0b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e074:	687b      	ldr	r3, [r7, #4]
 802e076:	681b      	ldr	r3, [r3, #0]
 802e078:	4a22      	ldr	r2, [pc, #136]	; (802e104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 802e07a:	4293      	cmp	r3, r2
 802e07c:	d018      	beq.n	802e0b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e07e:	687b      	ldr	r3, [r7, #4]
 802e080:	681b      	ldr	r3, [r3, #0]
 802e082:	4a21      	ldr	r2, [pc, #132]	; (802e108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 802e084:	4293      	cmp	r3, r2
 802e086:	d013      	beq.n	802e0b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e088:	687b      	ldr	r3, [r7, #4]
 802e08a:	681b      	ldr	r3, [r3, #0]
 802e08c:	4a1f      	ldr	r2, [pc, #124]	; (802e10c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 802e08e:	4293      	cmp	r3, r2
 802e090:	d00e      	beq.n	802e0b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e092:	687b      	ldr	r3, [r7, #4]
 802e094:	681b      	ldr	r3, [r3, #0]
 802e096:	4a1e      	ldr	r2, [pc, #120]	; (802e110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 802e098:	4293      	cmp	r3, r2
 802e09a:	d009      	beq.n	802e0b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e09c:	687b      	ldr	r3, [r7, #4]
 802e09e:	681b      	ldr	r3, [r3, #0]
 802e0a0:	4a1c      	ldr	r2, [pc, #112]	; (802e114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 802e0a2:	4293      	cmp	r3, r2
 802e0a4:	d004      	beq.n	802e0b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e0a6:	687b      	ldr	r3, [r7, #4]
 802e0a8:	681b      	ldr	r3, [r3, #0]
 802e0aa:	4a1b      	ldr	r2, [pc, #108]	; (802e118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 802e0ac:	4293      	cmp	r3, r2
 802e0ae:	d101      	bne.n	802e0b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 802e0b0:	2301      	movs	r3, #1
 802e0b2:	e000      	b.n	802e0b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 802e0b4:	2300      	movs	r3, #0
 802e0b6:	2b00      	cmp	r3, #0
 802e0b8:	d00a      	beq.n	802e0d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 802e0ba:	68fa      	ldr	r2, [r7, #12]
 802e0bc:	4b17      	ldr	r3, [pc, #92]	; (802e11c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 802e0be:	4413      	add	r3, r2
 802e0c0:	009b      	lsls	r3, r3, #2
 802e0c2:	461a      	mov	r2, r3
 802e0c4:	687b      	ldr	r3, [r7, #4]
 802e0c6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 802e0c8:	687b      	ldr	r3, [r7, #4]
 802e0ca:	4a15      	ldr	r2, [pc, #84]	; (802e120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 802e0cc:	671a      	str	r2, [r3, #112]	; 0x70
 802e0ce:	e009      	b.n	802e0e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 802e0d0:	68fa      	ldr	r2, [r7, #12]
 802e0d2:	4b14      	ldr	r3, [pc, #80]	; (802e124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 802e0d4:	4413      	add	r3, r2
 802e0d6:	009b      	lsls	r3, r3, #2
 802e0d8:	461a      	mov	r2, r3
 802e0da:	687b      	ldr	r3, [r7, #4]
 802e0dc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 802e0de:	687b      	ldr	r3, [r7, #4]
 802e0e0:	4a11      	ldr	r2, [pc, #68]	; (802e128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 802e0e2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 802e0e4:	68fb      	ldr	r3, [r7, #12]
 802e0e6:	3b01      	subs	r3, #1
 802e0e8:	2201      	movs	r2, #1
 802e0ea:	409a      	lsls	r2, r3
 802e0ec:	687b      	ldr	r3, [r7, #4]
 802e0ee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 802e0f0:	bf00      	nop
 802e0f2:	3714      	adds	r7, #20
 802e0f4:	46bd      	mov	sp, r7
 802e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e0fa:	4770      	bx	lr
 802e0fc:	58025408 	.word	0x58025408
 802e100:	5802541c 	.word	0x5802541c
 802e104:	58025430 	.word	0x58025430
 802e108:	58025444 	.word	0x58025444
 802e10c:	58025458 	.word	0x58025458
 802e110:	5802546c 	.word	0x5802546c
 802e114:	58025480 	.word	0x58025480
 802e118:	58025494 	.word	0x58025494
 802e11c:	1600963f 	.word	0x1600963f
 802e120:	58025940 	.word	0x58025940
 802e124:	1000823f 	.word	0x1000823f
 802e128:	40020940 	.word	0x40020940

0802e12c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802e12c:	b480      	push	{r7}
 802e12e:	b089      	sub	sp, #36	; 0x24
 802e130:	af00      	add	r7, sp, #0
 802e132:	6078      	str	r0, [r7, #4]
 802e134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 802e136:	2300      	movs	r3, #0
 802e138:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 802e13a:	4b89      	ldr	r3, [pc, #548]	; (802e360 <HAL_GPIO_Init+0x234>)
 802e13c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802e13e:	e194      	b.n	802e46a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 802e140:	683b      	ldr	r3, [r7, #0]
 802e142:	681a      	ldr	r2, [r3, #0]
 802e144:	2101      	movs	r1, #1
 802e146:	69fb      	ldr	r3, [r7, #28]
 802e148:	fa01 f303 	lsl.w	r3, r1, r3
 802e14c:	4013      	ands	r3, r2
 802e14e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 802e150:	693b      	ldr	r3, [r7, #16]
 802e152:	2b00      	cmp	r3, #0
 802e154:	f000 8186 	beq.w	802e464 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 802e158:	683b      	ldr	r3, [r7, #0]
 802e15a:	685b      	ldr	r3, [r3, #4]
 802e15c:	f003 0303 	and.w	r3, r3, #3
 802e160:	2b01      	cmp	r3, #1
 802e162:	d005      	beq.n	802e170 <HAL_GPIO_Init+0x44>
 802e164:	683b      	ldr	r3, [r7, #0]
 802e166:	685b      	ldr	r3, [r3, #4]
 802e168:	f003 0303 	and.w	r3, r3, #3
 802e16c:	2b02      	cmp	r3, #2
 802e16e:	d130      	bne.n	802e1d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 802e170:	687b      	ldr	r3, [r7, #4]
 802e172:	689b      	ldr	r3, [r3, #8]
 802e174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 802e176:	69fb      	ldr	r3, [r7, #28]
 802e178:	005b      	lsls	r3, r3, #1
 802e17a:	2203      	movs	r2, #3
 802e17c:	fa02 f303 	lsl.w	r3, r2, r3
 802e180:	43db      	mvns	r3, r3
 802e182:	69ba      	ldr	r2, [r7, #24]
 802e184:	4013      	ands	r3, r2
 802e186:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802e188:	683b      	ldr	r3, [r7, #0]
 802e18a:	68da      	ldr	r2, [r3, #12]
 802e18c:	69fb      	ldr	r3, [r7, #28]
 802e18e:	005b      	lsls	r3, r3, #1
 802e190:	fa02 f303 	lsl.w	r3, r2, r3
 802e194:	69ba      	ldr	r2, [r7, #24]
 802e196:	4313      	orrs	r3, r2
 802e198:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802e19a:	687b      	ldr	r3, [r7, #4]
 802e19c:	69ba      	ldr	r2, [r7, #24]
 802e19e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802e1a0:	687b      	ldr	r3, [r7, #4]
 802e1a2:	685b      	ldr	r3, [r3, #4]
 802e1a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 802e1a6:	2201      	movs	r2, #1
 802e1a8:	69fb      	ldr	r3, [r7, #28]
 802e1aa:	fa02 f303 	lsl.w	r3, r2, r3
 802e1ae:	43db      	mvns	r3, r3
 802e1b0:	69ba      	ldr	r2, [r7, #24]
 802e1b2:	4013      	ands	r3, r2
 802e1b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802e1b6:	683b      	ldr	r3, [r7, #0]
 802e1b8:	685b      	ldr	r3, [r3, #4]
 802e1ba:	091b      	lsrs	r3, r3, #4
 802e1bc:	f003 0201 	and.w	r2, r3, #1
 802e1c0:	69fb      	ldr	r3, [r7, #28]
 802e1c2:	fa02 f303 	lsl.w	r3, r2, r3
 802e1c6:	69ba      	ldr	r2, [r7, #24]
 802e1c8:	4313      	orrs	r3, r2
 802e1ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802e1cc:	687b      	ldr	r3, [r7, #4]
 802e1ce:	69ba      	ldr	r2, [r7, #24]
 802e1d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802e1d2:	683b      	ldr	r3, [r7, #0]
 802e1d4:	685b      	ldr	r3, [r3, #4]
 802e1d6:	f003 0303 	and.w	r3, r3, #3
 802e1da:	2b03      	cmp	r3, #3
 802e1dc:	d017      	beq.n	802e20e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802e1de:	687b      	ldr	r3, [r7, #4]
 802e1e0:	68db      	ldr	r3, [r3, #12]
 802e1e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 802e1e4:	69fb      	ldr	r3, [r7, #28]
 802e1e6:	005b      	lsls	r3, r3, #1
 802e1e8:	2203      	movs	r2, #3
 802e1ea:	fa02 f303 	lsl.w	r3, r2, r3
 802e1ee:	43db      	mvns	r3, r3
 802e1f0:	69ba      	ldr	r2, [r7, #24]
 802e1f2:	4013      	ands	r3, r2
 802e1f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802e1f6:	683b      	ldr	r3, [r7, #0]
 802e1f8:	689a      	ldr	r2, [r3, #8]
 802e1fa:	69fb      	ldr	r3, [r7, #28]
 802e1fc:	005b      	lsls	r3, r3, #1
 802e1fe:	fa02 f303 	lsl.w	r3, r2, r3
 802e202:	69ba      	ldr	r2, [r7, #24]
 802e204:	4313      	orrs	r3, r2
 802e206:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802e208:	687b      	ldr	r3, [r7, #4]
 802e20a:	69ba      	ldr	r2, [r7, #24]
 802e20c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802e20e:	683b      	ldr	r3, [r7, #0]
 802e210:	685b      	ldr	r3, [r3, #4]
 802e212:	f003 0303 	and.w	r3, r3, #3
 802e216:	2b02      	cmp	r3, #2
 802e218:	d123      	bne.n	802e262 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802e21a:	69fb      	ldr	r3, [r7, #28]
 802e21c:	08da      	lsrs	r2, r3, #3
 802e21e:	687b      	ldr	r3, [r7, #4]
 802e220:	3208      	adds	r2, #8
 802e222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 802e228:	69fb      	ldr	r3, [r7, #28]
 802e22a:	f003 0307 	and.w	r3, r3, #7
 802e22e:	009b      	lsls	r3, r3, #2
 802e230:	220f      	movs	r2, #15
 802e232:	fa02 f303 	lsl.w	r3, r2, r3
 802e236:	43db      	mvns	r3, r3
 802e238:	69ba      	ldr	r2, [r7, #24]
 802e23a:	4013      	ands	r3, r2
 802e23c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 802e23e:	683b      	ldr	r3, [r7, #0]
 802e240:	691a      	ldr	r2, [r3, #16]
 802e242:	69fb      	ldr	r3, [r7, #28]
 802e244:	f003 0307 	and.w	r3, r3, #7
 802e248:	009b      	lsls	r3, r3, #2
 802e24a:	fa02 f303 	lsl.w	r3, r2, r3
 802e24e:	69ba      	ldr	r2, [r7, #24]
 802e250:	4313      	orrs	r3, r2
 802e252:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802e254:	69fb      	ldr	r3, [r7, #28]
 802e256:	08da      	lsrs	r2, r3, #3
 802e258:	687b      	ldr	r3, [r7, #4]
 802e25a:	3208      	adds	r2, #8
 802e25c:	69b9      	ldr	r1, [r7, #24]
 802e25e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802e262:	687b      	ldr	r3, [r7, #4]
 802e264:	681b      	ldr	r3, [r3, #0]
 802e266:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 802e268:	69fb      	ldr	r3, [r7, #28]
 802e26a:	005b      	lsls	r3, r3, #1
 802e26c:	2203      	movs	r2, #3
 802e26e:	fa02 f303 	lsl.w	r3, r2, r3
 802e272:	43db      	mvns	r3, r3
 802e274:	69ba      	ldr	r2, [r7, #24]
 802e276:	4013      	ands	r3, r2
 802e278:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802e27a:	683b      	ldr	r3, [r7, #0]
 802e27c:	685b      	ldr	r3, [r3, #4]
 802e27e:	f003 0203 	and.w	r2, r3, #3
 802e282:	69fb      	ldr	r3, [r7, #28]
 802e284:	005b      	lsls	r3, r3, #1
 802e286:	fa02 f303 	lsl.w	r3, r2, r3
 802e28a:	69ba      	ldr	r2, [r7, #24]
 802e28c:	4313      	orrs	r3, r2
 802e28e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802e290:	687b      	ldr	r3, [r7, #4]
 802e292:	69ba      	ldr	r2, [r7, #24]
 802e294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802e296:	683b      	ldr	r3, [r7, #0]
 802e298:	685b      	ldr	r3, [r3, #4]
 802e29a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802e29e:	2b00      	cmp	r3, #0
 802e2a0:	f000 80e0 	beq.w	802e464 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802e2a4:	4b2f      	ldr	r3, [pc, #188]	; (802e364 <HAL_GPIO_Init+0x238>)
 802e2a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802e2aa:	4a2e      	ldr	r2, [pc, #184]	; (802e364 <HAL_GPIO_Init+0x238>)
 802e2ac:	f043 0302 	orr.w	r3, r3, #2
 802e2b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802e2b4:	4b2b      	ldr	r3, [pc, #172]	; (802e364 <HAL_GPIO_Init+0x238>)
 802e2b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802e2ba:	f003 0302 	and.w	r3, r3, #2
 802e2be:	60fb      	str	r3, [r7, #12]
 802e2c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802e2c2:	4a29      	ldr	r2, [pc, #164]	; (802e368 <HAL_GPIO_Init+0x23c>)
 802e2c4:	69fb      	ldr	r3, [r7, #28]
 802e2c6:	089b      	lsrs	r3, r3, #2
 802e2c8:	3302      	adds	r3, #2
 802e2ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802e2ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 802e2d0:	69fb      	ldr	r3, [r7, #28]
 802e2d2:	f003 0303 	and.w	r3, r3, #3
 802e2d6:	009b      	lsls	r3, r3, #2
 802e2d8:	220f      	movs	r2, #15
 802e2da:	fa02 f303 	lsl.w	r3, r2, r3
 802e2de:	43db      	mvns	r3, r3
 802e2e0:	69ba      	ldr	r2, [r7, #24]
 802e2e2:	4013      	ands	r3, r2
 802e2e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 802e2e6:	687b      	ldr	r3, [r7, #4]
 802e2e8:	4a20      	ldr	r2, [pc, #128]	; (802e36c <HAL_GPIO_Init+0x240>)
 802e2ea:	4293      	cmp	r3, r2
 802e2ec:	d052      	beq.n	802e394 <HAL_GPIO_Init+0x268>
 802e2ee:	687b      	ldr	r3, [r7, #4]
 802e2f0:	4a1f      	ldr	r2, [pc, #124]	; (802e370 <HAL_GPIO_Init+0x244>)
 802e2f2:	4293      	cmp	r3, r2
 802e2f4:	d031      	beq.n	802e35a <HAL_GPIO_Init+0x22e>
 802e2f6:	687b      	ldr	r3, [r7, #4]
 802e2f8:	4a1e      	ldr	r2, [pc, #120]	; (802e374 <HAL_GPIO_Init+0x248>)
 802e2fa:	4293      	cmp	r3, r2
 802e2fc:	d02b      	beq.n	802e356 <HAL_GPIO_Init+0x22a>
 802e2fe:	687b      	ldr	r3, [r7, #4]
 802e300:	4a1d      	ldr	r2, [pc, #116]	; (802e378 <HAL_GPIO_Init+0x24c>)
 802e302:	4293      	cmp	r3, r2
 802e304:	d025      	beq.n	802e352 <HAL_GPIO_Init+0x226>
 802e306:	687b      	ldr	r3, [r7, #4]
 802e308:	4a1c      	ldr	r2, [pc, #112]	; (802e37c <HAL_GPIO_Init+0x250>)
 802e30a:	4293      	cmp	r3, r2
 802e30c:	d01f      	beq.n	802e34e <HAL_GPIO_Init+0x222>
 802e30e:	687b      	ldr	r3, [r7, #4]
 802e310:	4a1b      	ldr	r2, [pc, #108]	; (802e380 <HAL_GPIO_Init+0x254>)
 802e312:	4293      	cmp	r3, r2
 802e314:	d019      	beq.n	802e34a <HAL_GPIO_Init+0x21e>
 802e316:	687b      	ldr	r3, [r7, #4]
 802e318:	4a1a      	ldr	r2, [pc, #104]	; (802e384 <HAL_GPIO_Init+0x258>)
 802e31a:	4293      	cmp	r3, r2
 802e31c:	d013      	beq.n	802e346 <HAL_GPIO_Init+0x21a>
 802e31e:	687b      	ldr	r3, [r7, #4]
 802e320:	4a19      	ldr	r2, [pc, #100]	; (802e388 <HAL_GPIO_Init+0x25c>)
 802e322:	4293      	cmp	r3, r2
 802e324:	d00d      	beq.n	802e342 <HAL_GPIO_Init+0x216>
 802e326:	687b      	ldr	r3, [r7, #4]
 802e328:	4a18      	ldr	r2, [pc, #96]	; (802e38c <HAL_GPIO_Init+0x260>)
 802e32a:	4293      	cmp	r3, r2
 802e32c:	d007      	beq.n	802e33e <HAL_GPIO_Init+0x212>
 802e32e:	687b      	ldr	r3, [r7, #4]
 802e330:	4a17      	ldr	r2, [pc, #92]	; (802e390 <HAL_GPIO_Init+0x264>)
 802e332:	4293      	cmp	r3, r2
 802e334:	d101      	bne.n	802e33a <HAL_GPIO_Init+0x20e>
 802e336:	2309      	movs	r3, #9
 802e338:	e02d      	b.n	802e396 <HAL_GPIO_Init+0x26a>
 802e33a:	230a      	movs	r3, #10
 802e33c:	e02b      	b.n	802e396 <HAL_GPIO_Init+0x26a>
 802e33e:	2308      	movs	r3, #8
 802e340:	e029      	b.n	802e396 <HAL_GPIO_Init+0x26a>
 802e342:	2307      	movs	r3, #7
 802e344:	e027      	b.n	802e396 <HAL_GPIO_Init+0x26a>
 802e346:	2306      	movs	r3, #6
 802e348:	e025      	b.n	802e396 <HAL_GPIO_Init+0x26a>
 802e34a:	2305      	movs	r3, #5
 802e34c:	e023      	b.n	802e396 <HAL_GPIO_Init+0x26a>
 802e34e:	2304      	movs	r3, #4
 802e350:	e021      	b.n	802e396 <HAL_GPIO_Init+0x26a>
 802e352:	2303      	movs	r3, #3
 802e354:	e01f      	b.n	802e396 <HAL_GPIO_Init+0x26a>
 802e356:	2302      	movs	r3, #2
 802e358:	e01d      	b.n	802e396 <HAL_GPIO_Init+0x26a>
 802e35a:	2301      	movs	r3, #1
 802e35c:	e01b      	b.n	802e396 <HAL_GPIO_Init+0x26a>
 802e35e:	bf00      	nop
 802e360:	58000080 	.word	0x58000080
 802e364:	58024400 	.word	0x58024400
 802e368:	58000400 	.word	0x58000400
 802e36c:	58020000 	.word	0x58020000
 802e370:	58020400 	.word	0x58020400
 802e374:	58020800 	.word	0x58020800
 802e378:	58020c00 	.word	0x58020c00
 802e37c:	58021000 	.word	0x58021000
 802e380:	58021400 	.word	0x58021400
 802e384:	58021800 	.word	0x58021800
 802e388:	58021c00 	.word	0x58021c00
 802e38c:	58022000 	.word	0x58022000
 802e390:	58022400 	.word	0x58022400
 802e394:	2300      	movs	r3, #0
 802e396:	69fa      	ldr	r2, [r7, #28]
 802e398:	f002 0203 	and.w	r2, r2, #3
 802e39c:	0092      	lsls	r2, r2, #2
 802e39e:	4093      	lsls	r3, r2
 802e3a0:	69ba      	ldr	r2, [r7, #24]
 802e3a2:	4313      	orrs	r3, r2
 802e3a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802e3a6:	4938      	ldr	r1, [pc, #224]	; (802e488 <HAL_GPIO_Init+0x35c>)
 802e3a8:	69fb      	ldr	r3, [r7, #28]
 802e3aa:	089b      	lsrs	r3, r3, #2
 802e3ac:	3302      	adds	r3, #2
 802e3ae:	69ba      	ldr	r2, [r7, #24]
 802e3b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 802e3b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e3b8:	681b      	ldr	r3, [r3, #0]
 802e3ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e3bc:	693b      	ldr	r3, [r7, #16]
 802e3be:	43db      	mvns	r3, r3
 802e3c0:	69ba      	ldr	r2, [r7, #24]
 802e3c2:	4013      	ands	r3, r2
 802e3c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802e3c6:	683b      	ldr	r3, [r7, #0]
 802e3c8:	685b      	ldr	r3, [r3, #4]
 802e3ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802e3ce:	2b00      	cmp	r3, #0
 802e3d0:	d003      	beq.n	802e3da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 802e3d2:	69ba      	ldr	r2, [r7, #24]
 802e3d4:	693b      	ldr	r3, [r7, #16]
 802e3d6:	4313      	orrs	r3, r2
 802e3d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 802e3da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e3de:	69bb      	ldr	r3, [r7, #24]
 802e3e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 802e3e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e3e6:	685b      	ldr	r3, [r3, #4]
 802e3e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e3ea:	693b      	ldr	r3, [r7, #16]
 802e3ec:	43db      	mvns	r3, r3
 802e3ee:	69ba      	ldr	r2, [r7, #24]
 802e3f0:	4013      	ands	r3, r2
 802e3f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802e3f4:	683b      	ldr	r3, [r7, #0]
 802e3f6:	685b      	ldr	r3, [r3, #4]
 802e3f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802e3fc:	2b00      	cmp	r3, #0
 802e3fe:	d003      	beq.n	802e408 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802e400:	69ba      	ldr	r2, [r7, #24]
 802e402:	693b      	ldr	r3, [r7, #16]
 802e404:	4313      	orrs	r3, r2
 802e406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 802e408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e40c:	69bb      	ldr	r3, [r7, #24]
 802e40e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 802e410:	697b      	ldr	r3, [r7, #20]
 802e412:	685b      	ldr	r3, [r3, #4]
 802e414:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e416:	693b      	ldr	r3, [r7, #16]
 802e418:	43db      	mvns	r3, r3
 802e41a:	69ba      	ldr	r2, [r7, #24]
 802e41c:	4013      	ands	r3, r2
 802e41e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802e420:	683b      	ldr	r3, [r7, #0]
 802e422:	685b      	ldr	r3, [r3, #4]
 802e424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802e428:	2b00      	cmp	r3, #0
 802e42a:	d003      	beq.n	802e434 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 802e42c:	69ba      	ldr	r2, [r7, #24]
 802e42e:	693b      	ldr	r3, [r7, #16]
 802e430:	4313      	orrs	r3, r2
 802e432:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 802e434:	697b      	ldr	r3, [r7, #20]
 802e436:	69ba      	ldr	r2, [r7, #24]
 802e438:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 802e43a:	697b      	ldr	r3, [r7, #20]
 802e43c:	681b      	ldr	r3, [r3, #0]
 802e43e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e440:	693b      	ldr	r3, [r7, #16]
 802e442:	43db      	mvns	r3, r3
 802e444:	69ba      	ldr	r2, [r7, #24]
 802e446:	4013      	ands	r3, r2
 802e448:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802e44a:	683b      	ldr	r3, [r7, #0]
 802e44c:	685b      	ldr	r3, [r3, #4]
 802e44e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802e452:	2b00      	cmp	r3, #0
 802e454:	d003      	beq.n	802e45e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 802e456:	69ba      	ldr	r2, [r7, #24]
 802e458:	693b      	ldr	r3, [r7, #16]
 802e45a:	4313      	orrs	r3, r2
 802e45c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 802e45e:	697b      	ldr	r3, [r7, #20]
 802e460:	69ba      	ldr	r2, [r7, #24]
 802e462:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 802e464:	69fb      	ldr	r3, [r7, #28]
 802e466:	3301      	adds	r3, #1
 802e468:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802e46a:	683b      	ldr	r3, [r7, #0]
 802e46c:	681a      	ldr	r2, [r3, #0]
 802e46e:	69fb      	ldr	r3, [r7, #28]
 802e470:	fa22 f303 	lsr.w	r3, r2, r3
 802e474:	2b00      	cmp	r3, #0
 802e476:	f47f ae63 	bne.w	802e140 <HAL_GPIO_Init+0x14>
  }
}
 802e47a:	bf00      	nop
 802e47c:	bf00      	nop
 802e47e:	3724      	adds	r7, #36	; 0x24
 802e480:	46bd      	mov	sp, r7
 802e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e486:	4770      	bx	lr
 802e488:	58000400 	.word	0x58000400

0802e48c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802e48c:	b480      	push	{r7}
 802e48e:	b083      	sub	sp, #12
 802e490:	af00      	add	r7, sp, #0
 802e492:	6078      	str	r0, [r7, #4]
 802e494:	460b      	mov	r3, r1
 802e496:	807b      	strh	r3, [r7, #2]
 802e498:	4613      	mov	r3, r2
 802e49a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 802e49c:	787b      	ldrb	r3, [r7, #1]
 802e49e:	2b00      	cmp	r3, #0
 802e4a0:	d003      	beq.n	802e4aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802e4a2:	887a      	ldrh	r2, [r7, #2]
 802e4a4:	687b      	ldr	r3, [r7, #4]
 802e4a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 802e4a8:	e003      	b.n	802e4b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802e4aa:	887b      	ldrh	r3, [r7, #2]
 802e4ac:	041a      	lsls	r2, r3, #16
 802e4ae:	687b      	ldr	r3, [r7, #4]
 802e4b0:	619a      	str	r2, [r3, #24]
}
 802e4b2:	bf00      	nop
 802e4b4:	370c      	adds	r7, #12
 802e4b6:	46bd      	mov	sp, r7
 802e4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e4bc:	4770      	bx	lr
	...

0802e4c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802e4c0:	b580      	push	{r7, lr}
 802e4c2:	b082      	sub	sp, #8
 802e4c4:	af00      	add	r7, sp, #0
 802e4c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802e4c8:	687b      	ldr	r3, [r7, #4]
 802e4ca:	2b00      	cmp	r3, #0
 802e4cc:	d101      	bne.n	802e4d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802e4ce:	2301      	movs	r3, #1
 802e4d0:	e07f      	b.n	802e5d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802e4d2:	687b      	ldr	r3, [r7, #4]
 802e4d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e4d8:	b2db      	uxtb	r3, r3
 802e4da:	2b00      	cmp	r3, #0
 802e4dc:	d106      	bne.n	802e4ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802e4de:	687b      	ldr	r3, [r7, #4]
 802e4e0:	2200      	movs	r2, #0
 802e4e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 802e4e6:	6878      	ldr	r0, [r7, #4]
 802e4e8:	f7fa ff98 	bl	802941c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802e4ec:	687b      	ldr	r3, [r7, #4]
 802e4ee:	2224      	movs	r2, #36	; 0x24
 802e4f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802e4f4:	687b      	ldr	r3, [r7, #4]
 802e4f6:	681b      	ldr	r3, [r3, #0]
 802e4f8:	681a      	ldr	r2, [r3, #0]
 802e4fa:	687b      	ldr	r3, [r7, #4]
 802e4fc:	681b      	ldr	r3, [r3, #0]
 802e4fe:	f022 0201 	bic.w	r2, r2, #1
 802e502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 802e504:	687b      	ldr	r3, [r7, #4]
 802e506:	685a      	ldr	r2, [r3, #4]
 802e508:	687b      	ldr	r3, [r7, #4]
 802e50a:	681b      	ldr	r3, [r3, #0]
 802e50c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802e510:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 802e512:	687b      	ldr	r3, [r7, #4]
 802e514:	681b      	ldr	r3, [r3, #0]
 802e516:	689a      	ldr	r2, [r3, #8]
 802e518:	687b      	ldr	r3, [r7, #4]
 802e51a:	681b      	ldr	r3, [r3, #0]
 802e51c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802e520:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802e522:	687b      	ldr	r3, [r7, #4]
 802e524:	68db      	ldr	r3, [r3, #12]
 802e526:	2b01      	cmp	r3, #1
 802e528:	d107      	bne.n	802e53a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 802e52a:	687b      	ldr	r3, [r7, #4]
 802e52c:	689a      	ldr	r2, [r3, #8]
 802e52e:	687b      	ldr	r3, [r7, #4]
 802e530:	681b      	ldr	r3, [r3, #0]
 802e532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802e536:	609a      	str	r2, [r3, #8]
 802e538:	e006      	b.n	802e548 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 802e53a:	687b      	ldr	r3, [r7, #4]
 802e53c:	689a      	ldr	r2, [r3, #8]
 802e53e:	687b      	ldr	r3, [r7, #4]
 802e540:	681b      	ldr	r3, [r3, #0]
 802e542:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 802e546:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802e548:	687b      	ldr	r3, [r7, #4]
 802e54a:	68db      	ldr	r3, [r3, #12]
 802e54c:	2b02      	cmp	r3, #2
 802e54e:	d104      	bne.n	802e55a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 802e550:	687b      	ldr	r3, [r7, #4]
 802e552:	681b      	ldr	r3, [r3, #0]
 802e554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802e558:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 802e55a:	687b      	ldr	r3, [r7, #4]
 802e55c:	681b      	ldr	r3, [r3, #0]
 802e55e:	6859      	ldr	r1, [r3, #4]
 802e560:	687b      	ldr	r3, [r7, #4]
 802e562:	681a      	ldr	r2, [r3, #0]
 802e564:	4b1d      	ldr	r3, [pc, #116]	; (802e5dc <HAL_I2C_Init+0x11c>)
 802e566:	430b      	orrs	r3, r1
 802e568:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 802e56a:	687b      	ldr	r3, [r7, #4]
 802e56c:	681b      	ldr	r3, [r3, #0]
 802e56e:	68da      	ldr	r2, [r3, #12]
 802e570:	687b      	ldr	r3, [r7, #4]
 802e572:	681b      	ldr	r3, [r3, #0]
 802e574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802e578:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802e57a:	687b      	ldr	r3, [r7, #4]
 802e57c:	691a      	ldr	r2, [r3, #16]
 802e57e:	687b      	ldr	r3, [r7, #4]
 802e580:	695b      	ldr	r3, [r3, #20]
 802e582:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 802e586:	687b      	ldr	r3, [r7, #4]
 802e588:	699b      	ldr	r3, [r3, #24]
 802e58a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802e58c:	687b      	ldr	r3, [r7, #4]
 802e58e:	681b      	ldr	r3, [r3, #0]
 802e590:	430a      	orrs	r2, r1
 802e592:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 802e594:	687b      	ldr	r3, [r7, #4]
 802e596:	69d9      	ldr	r1, [r3, #28]
 802e598:	687b      	ldr	r3, [r7, #4]
 802e59a:	6a1a      	ldr	r2, [r3, #32]
 802e59c:	687b      	ldr	r3, [r7, #4]
 802e59e:	681b      	ldr	r3, [r3, #0]
 802e5a0:	430a      	orrs	r2, r1
 802e5a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802e5a4:	687b      	ldr	r3, [r7, #4]
 802e5a6:	681b      	ldr	r3, [r3, #0]
 802e5a8:	681a      	ldr	r2, [r3, #0]
 802e5aa:	687b      	ldr	r3, [r7, #4]
 802e5ac:	681b      	ldr	r3, [r3, #0]
 802e5ae:	f042 0201 	orr.w	r2, r2, #1
 802e5b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802e5b4:	687b      	ldr	r3, [r7, #4]
 802e5b6:	2200      	movs	r2, #0
 802e5b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 802e5ba:	687b      	ldr	r3, [r7, #4]
 802e5bc:	2220      	movs	r2, #32
 802e5be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 802e5c2:	687b      	ldr	r3, [r7, #4]
 802e5c4:	2200      	movs	r2, #0
 802e5c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802e5c8:	687b      	ldr	r3, [r7, #4]
 802e5ca:	2200      	movs	r2, #0
 802e5cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 802e5d0:	2300      	movs	r3, #0
}
 802e5d2:	4618      	mov	r0, r3
 802e5d4:	3708      	adds	r7, #8
 802e5d6:	46bd      	mov	sp, r7
 802e5d8:	bd80      	pop	{r7, pc}
 802e5da:	bf00      	nop
 802e5dc:	02008000 	.word	0x02008000

0802e5e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802e5e0:	b580      	push	{r7, lr}
 802e5e2:	b084      	sub	sp, #16
 802e5e4:	af00      	add	r7, sp, #0
 802e5e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802e5e8:	687b      	ldr	r3, [r7, #4]
 802e5ea:	681b      	ldr	r3, [r3, #0]
 802e5ec:	699b      	ldr	r3, [r3, #24]
 802e5ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802e5f0:	687b      	ldr	r3, [r7, #4]
 802e5f2:	681b      	ldr	r3, [r3, #0]
 802e5f4:	681b      	ldr	r3, [r3, #0]
 802e5f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 802e5f8:	687b      	ldr	r3, [r7, #4]
 802e5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e5fc:	2b00      	cmp	r3, #0
 802e5fe:	d005      	beq.n	802e60c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 802e600:	687b      	ldr	r3, [r7, #4]
 802e602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e604:	68ba      	ldr	r2, [r7, #8]
 802e606:	68f9      	ldr	r1, [r7, #12]
 802e608:	6878      	ldr	r0, [r7, #4]
 802e60a:	4798      	blx	r3
  }
}
 802e60c:	bf00      	nop
 802e60e:	3710      	adds	r7, #16
 802e610:	46bd      	mov	sp, r7
 802e612:	bd80      	pop	{r7, pc}

0802e614 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802e614:	b580      	push	{r7, lr}
 802e616:	b086      	sub	sp, #24
 802e618:	af00      	add	r7, sp, #0
 802e61a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802e61c:	687b      	ldr	r3, [r7, #4]
 802e61e:	681b      	ldr	r3, [r3, #0]
 802e620:	699b      	ldr	r3, [r3, #24]
 802e622:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802e624:	687b      	ldr	r3, [r7, #4]
 802e626:	681b      	ldr	r3, [r3, #0]
 802e628:	681b      	ldr	r3, [r3, #0]
 802e62a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802e62c:	697b      	ldr	r3, [r7, #20]
 802e62e:	0a1b      	lsrs	r3, r3, #8
 802e630:	f003 0301 	and.w	r3, r3, #1
 802e634:	2b00      	cmp	r3, #0
 802e636:	d010      	beq.n	802e65a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e638:	693b      	ldr	r3, [r7, #16]
 802e63a:	09db      	lsrs	r3, r3, #7
 802e63c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802e640:	2b00      	cmp	r3, #0
 802e642:	d00a      	beq.n	802e65a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 802e644:	687b      	ldr	r3, [r7, #4]
 802e646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e648:	f043 0201 	orr.w	r2, r3, #1
 802e64c:	687b      	ldr	r3, [r7, #4]
 802e64e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 802e650:	687b      	ldr	r3, [r7, #4]
 802e652:	681b      	ldr	r3, [r3, #0]
 802e654:	f44f 7280 	mov.w	r2, #256	; 0x100
 802e658:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802e65a:	697b      	ldr	r3, [r7, #20]
 802e65c:	0a9b      	lsrs	r3, r3, #10
 802e65e:	f003 0301 	and.w	r3, r3, #1
 802e662:	2b00      	cmp	r3, #0
 802e664:	d010      	beq.n	802e688 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e666:	693b      	ldr	r3, [r7, #16]
 802e668:	09db      	lsrs	r3, r3, #7
 802e66a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802e66e:	2b00      	cmp	r3, #0
 802e670:	d00a      	beq.n	802e688 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 802e672:	687b      	ldr	r3, [r7, #4]
 802e674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e676:	f043 0208 	orr.w	r2, r3, #8
 802e67a:	687b      	ldr	r3, [r7, #4]
 802e67c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 802e67e:	687b      	ldr	r3, [r7, #4]
 802e680:	681b      	ldr	r3, [r3, #0]
 802e682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802e686:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802e688:	697b      	ldr	r3, [r7, #20]
 802e68a:	0a5b      	lsrs	r3, r3, #9
 802e68c:	f003 0301 	and.w	r3, r3, #1
 802e690:	2b00      	cmp	r3, #0
 802e692:	d010      	beq.n	802e6b6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e694:	693b      	ldr	r3, [r7, #16]
 802e696:	09db      	lsrs	r3, r3, #7
 802e698:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802e69c:	2b00      	cmp	r3, #0
 802e69e:	d00a      	beq.n	802e6b6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 802e6a0:	687b      	ldr	r3, [r7, #4]
 802e6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e6a4:	f043 0202 	orr.w	r2, r3, #2
 802e6a8:	687b      	ldr	r3, [r7, #4]
 802e6aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 802e6ac:	687b      	ldr	r3, [r7, #4]
 802e6ae:	681b      	ldr	r3, [r3, #0]
 802e6b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 802e6b4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 802e6b6:	687b      	ldr	r3, [r7, #4]
 802e6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e6ba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 802e6bc:	68fb      	ldr	r3, [r7, #12]
 802e6be:	f003 030b 	and.w	r3, r3, #11
 802e6c2:	2b00      	cmp	r3, #0
 802e6c4:	d003      	beq.n	802e6ce <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 802e6c6:	68f9      	ldr	r1, [r7, #12]
 802e6c8:	6878      	ldr	r0, [r7, #4]
 802e6ca:	f000 fc77 	bl	802efbc <I2C_ITError>
  }
}
 802e6ce:	bf00      	nop
 802e6d0:	3718      	adds	r7, #24
 802e6d2:	46bd      	mov	sp, r7
 802e6d4:	bd80      	pop	{r7, pc}

0802e6d6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e6d6:	b480      	push	{r7}
 802e6d8:	b083      	sub	sp, #12
 802e6da:	af00      	add	r7, sp, #0
 802e6dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 802e6de:	bf00      	nop
 802e6e0:	370c      	adds	r7, #12
 802e6e2:	46bd      	mov	sp, r7
 802e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e6e8:	4770      	bx	lr

0802e6ea <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e6ea:	b480      	push	{r7}
 802e6ec:	b083      	sub	sp, #12
 802e6ee:	af00      	add	r7, sp, #0
 802e6f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 802e6f2:	bf00      	nop
 802e6f4:	370c      	adds	r7, #12
 802e6f6:	46bd      	mov	sp, r7
 802e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e6fc:	4770      	bx	lr

0802e6fe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 802e6fe:	b480      	push	{r7}
 802e700:	b083      	sub	sp, #12
 802e702:	af00      	add	r7, sp, #0
 802e704:	6078      	str	r0, [r7, #4]
 802e706:	460b      	mov	r3, r1
 802e708:	70fb      	strb	r3, [r7, #3]
 802e70a:	4613      	mov	r3, r2
 802e70c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 802e70e:	bf00      	nop
 802e710:	370c      	adds	r7, #12
 802e712:	46bd      	mov	sp, r7
 802e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e718:	4770      	bx	lr

0802e71a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e71a:	b480      	push	{r7}
 802e71c:	b083      	sub	sp, #12
 802e71e:	af00      	add	r7, sp, #0
 802e720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 802e722:	bf00      	nop
 802e724:	370c      	adds	r7, #12
 802e726:	46bd      	mov	sp, r7
 802e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e72c:	4770      	bx	lr

0802e72e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 802e72e:	b480      	push	{r7}
 802e730:	b083      	sub	sp, #12
 802e732:	af00      	add	r7, sp, #0
 802e734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 802e736:	bf00      	nop
 802e738:	370c      	adds	r7, #12
 802e73a:	46bd      	mov	sp, r7
 802e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e740:	4770      	bx	lr

0802e742 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e742:	b480      	push	{r7}
 802e744:	b083      	sub	sp, #12
 802e746:	af00      	add	r7, sp, #0
 802e748:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 802e74a:	bf00      	nop
 802e74c:	370c      	adds	r7, #12
 802e74e:	46bd      	mov	sp, r7
 802e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e754:	4770      	bx	lr

0802e756 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 802e756:	b580      	push	{r7, lr}
 802e758:	b086      	sub	sp, #24
 802e75a:	af00      	add	r7, sp, #0
 802e75c:	60f8      	str	r0, [r7, #12]
 802e75e:	60b9      	str	r1, [r7, #8]
 802e760:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 802e762:	68fb      	ldr	r3, [r7, #12]
 802e764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e766:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 802e768:	68bb      	ldr	r3, [r7, #8]
 802e76a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 802e76c:	68fb      	ldr	r3, [r7, #12]
 802e76e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802e772:	2b01      	cmp	r3, #1
 802e774:	d101      	bne.n	802e77a <I2C_Slave_ISR_IT+0x24>
 802e776:	2302      	movs	r3, #2
 802e778:	e0ec      	b.n	802e954 <I2C_Slave_ISR_IT+0x1fe>
 802e77a:	68fb      	ldr	r3, [r7, #12]
 802e77c:	2201      	movs	r2, #1
 802e77e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 802e782:	693b      	ldr	r3, [r7, #16]
 802e784:	095b      	lsrs	r3, r3, #5
 802e786:	f003 0301 	and.w	r3, r3, #1
 802e78a:	2b00      	cmp	r3, #0
 802e78c:	d009      	beq.n	802e7a2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 802e78e:	687b      	ldr	r3, [r7, #4]
 802e790:	095b      	lsrs	r3, r3, #5
 802e792:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 802e796:	2b00      	cmp	r3, #0
 802e798:	d003      	beq.n	802e7a2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 802e79a:	6939      	ldr	r1, [r7, #16]
 802e79c:	68f8      	ldr	r0, [r7, #12]
 802e79e:	f000 f9bf 	bl	802eb20 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 802e7a2:	693b      	ldr	r3, [r7, #16]
 802e7a4:	091b      	lsrs	r3, r3, #4
 802e7a6:	f003 0301 	and.w	r3, r3, #1
 802e7aa:	2b00      	cmp	r3, #0
 802e7ac:	d04d      	beq.n	802e84a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 802e7ae:	687b      	ldr	r3, [r7, #4]
 802e7b0:	091b      	lsrs	r3, r3, #4
 802e7b2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 802e7b6:	2b00      	cmp	r3, #0
 802e7b8:	d047      	beq.n	802e84a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 802e7ba:	68fb      	ldr	r3, [r7, #12]
 802e7bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e7be:	b29b      	uxth	r3, r3
 802e7c0:	2b00      	cmp	r3, #0
 802e7c2:	d128      	bne.n	802e816 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 802e7c4:	68fb      	ldr	r3, [r7, #12]
 802e7c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e7ca:	b2db      	uxtb	r3, r3
 802e7cc:	2b28      	cmp	r3, #40	; 0x28
 802e7ce:	d108      	bne.n	802e7e2 <I2C_Slave_ISR_IT+0x8c>
 802e7d0:	697b      	ldr	r3, [r7, #20]
 802e7d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802e7d6:	d104      	bne.n	802e7e2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 802e7d8:	6939      	ldr	r1, [r7, #16]
 802e7da:	68f8      	ldr	r0, [r7, #12]
 802e7dc:	f000 fb98 	bl	802ef10 <I2C_ITListenCplt>
 802e7e0:	e032      	b.n	802e848 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 802e7e2:	68fb      	ldr	r3, [r7, #12]
 802e7e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e7e8:	b2db      	uxtb	r3, r3
 802e7ea:	2b29      	cmp	r3, #41	; 0x29
 802e7ec:	d10e      	bne.n	802e80c <I2C_Slave_ISR_IT+0xb6>
 802e7ee:	697b      	ldr	r3, [r7, #20]
 802e7f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802e7f4:	d00a      	beq.n	802e80c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802e7f6:	68fb      	ldr	r3, [r7, #12]
 802e7f8:	681b      	ldr	r3, [r3, #0]
 802e7fa:	2210      	movs	r2, #16
 802e7fc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 802e7fe:	68f8      	ldr	r0, [r7, #12]
 802e800:	f000 fcd3 	bl	802f1aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802e804:	68f8      	ldr	r0, [r7, #12]
 802e806:	f000 f92d 	bl	802ea64 <I2C_ITSlaveSeqCplt>
 802e80a:	e01d      	b.n	802e848 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802e80c:	68fb      	ldr	r3, [r7, #12]
 802e80e:	681b      	ldr	r3, [r3, #0]
 802e810:	2210      	movs	r2, #16
 802e812:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 802e814:	e096      	b.n	802e944 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802e816:	68fb      	ldr	r3, [r7, #12]
 802e818:	681b      	ldr	r3, [r3, #0]
 802e81a:	2210      	movs	r2, #16
 802e81c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802e81e:	68fb      	ldr	r3, [r7, #12]
 802e820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e822:	f043 0204 	orr.w	r2, r3, #4
 802e826:	68fb      	ldr	r3, [r7, #12]
 802e828:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 802e82a:	697b      	ldr	r3, [r7, #20]
 802e82c:	2b00      	cmp	r3, #0
 802e82e:	d004      	beq.n	802e83a <I2C_Slave_ISR_IT+0xe4>
 802e830:	697b      	ldr	r3, [r7, #20]
 802e832:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802e836:	f040 8085 	bne.w	802e944 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 802e83a:	68fb      	ldr	r3, [r7, #12]
 802e83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e83e:	4619      	mov	r1, r3
 802e840:	68f8      	ldr	r0, [r7, #12]
 802e842:	f000 fbbb 	bl	802efbc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 802e846:	e07d      	b.n	802e944 <I2C_Slave_ISR_IT+0x1ee>
 802e848:	e07c      	b.n	802e944 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 802e84a:	693b      	ldr	r3, [r7, #16]
 802e84c:	089b      	lsrs	r3, r3, #2
 802e84e:	f003 0301 	and.w	r3, r3, #1
 802e852:	2b00      	cmp	r3, #0
 802e854:	d030      	beq.n	802e8b8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 802e856:	687b      	ldr	r3, [r7, #4]
 802e858:	089b      	lsrs	r3, r3, #2
 802e85a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 802e85e:	2b00      	cmp	r3, #0
 802e860:	d02a      	beq.n	802e8b8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 802e862:	68fb      	ldr	r3, [r7, #12]
 802e864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e866:	b29b      	uxth	r3, r3
 802e868:	2b00      	cmp	r3, #0
 802e86a:	d018      	beq.n	802e89e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802e86c:	68fb      	ldr	r3, [r7, #12]
 802e86e:	681b      	ldr	r3, [r3, #0]
 802e870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802e872:	68fb      	ldr	r3, [r7, #12]
 802e874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e876:	b2d2      	uxtb	r2, r2
 802e878:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802e87a:	68fb      	ldr	r3, [r7, #12]
 802e87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e87e:	1c5a      	adds	r2, r3, #1
 802e880:	68fb      	ldr	r3, [r7, #12]
 802e882:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 802e884:	68fb      	ldr	r3, [r7, #12]
 802e886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802e888:	3b01      	subs	r3, #1
 802e88a:	b29a      	uxth	r2, r3
 802e88c:	68fb      	ldr	r3, [r7, #12]
 802e88e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802e890:	68fb      	ldr	r3, [r7, #12]
 802e892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e894:	b29b      	uxth	r3, r3
 802e896:	3b01      	subs	r3, #1
 802e898:	b29a      	uxth	r2, r3
 802e89a:	68fb      	ldr	r3, [r7, #12]
 802e89c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 802e89e:	68fb      	ldr	r3, [r7, #12]
 802e8a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e8a2:	b29b      	uxth	r3, r3
 802e8a4:	2b00      	cmp	r3, #0
 802e8a6:	d14f      	bne.n	802e948 <I2C_Slave_ISR_IT+0x1f2>
 802e8a8:	697b      	ldr	r3, [r7, #20]
 802e8aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802e8ae:	d04b      	beq.n	802e948 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 802e8b0:	68f8      	ldr	r0, [r7, #12]
 802e8b2:	f000 f8d7 	bl	802ea64 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 802e8b6:	e047      	b.n	802e948 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 802e8b8:	693b      	ldr	r3, [r7, #16]
 802e8ba:	08db      	lsrs	r3, r3, #3
 802e8bc:	f003 0301 	and.w	r3, r3, #1
 802e8c0:	2b00      	cmp	r3, #0
 802e8c2:	d00a      	beq.n	802e8da <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 802e8c4:	687b      	ldr	r3, [r7, #4]
 802e8c6:	08db      	lsrs	r3, r3, #3
 802e8c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 802e8cc:	2b00      	cmp	r3, #0
 802e8ce:	d004      	beq.n	802e8da <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 802e8d0:	6939      	ldr	r1, [r7, #16]
 802e8d2:	68f8      	ldr	r0, [r7, #12]
 802e8d4:	f000 f842 	bl	802e95c <I2C_ITAddrCplt>
 802e8d8:	e037      	b.n	802e94a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 802e8da:	693b      	ldr	r3, [r7, #16]
 802e8dc:	085b      	lsrs	r3, r3, #1
 802e8de:	f003 0301 	and.w	r3, r3, #1
 802e8e2:	2b00      	cmp	r3, #0
 802e8e4:	d031      	beq.n	802e94a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 802e8e6:	687b      	ldr	r3, [r7, #4]
 802e8e8:	085b      	lsrs	r3, r3, #1
 802e8ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 802e8ee:	2b00      	cmp	r3, #0
 802e8f0:	d02b      	beq.n	802e94a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 802e8f2:	68fb      	ldr	r3, [r7, #12]
 802e8f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e8f6:	b29b      	uxth	r3, r3
 802e8f8:	2b00      	cmp	r3, #0
 802e8fa:	d018      	beq.n	802e92e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 802e8fc:	68fb      	ldr	r3, [r7, #12]
 802e8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e900:	781a      	ldrb	r2, [r3, #0]
 802e902:	68fb      	ldr	r3, [r7, #12]
 802e904:	681b      	ldr	r3, [r3, #0]
 802e906:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802e908:	68fb      	ldr	r3, [r7, #12]
 802e90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802e90c:	1c5a      	adds	r2, r3, #1
 802e90e:	68fb      	ldr	r3, [r7, #12]
 802e910:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 802e912:	68fb      	ldr	r3, [r7, #12]
 802e914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e916:	b29b      	uxth	r3, r3
 802e918:	3b01      	subs	r3, #1
 802e91a:	b29a      	uxth	r2, r3
 802e91c:	68fb      	ldr	r3, [r7, #12]
 802e91e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 802e920:	68fb      	ldr	r3, [r7, #12]
 802e922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802e924:	3b01      	subs	r3, #1
 802e926:	b29a      	uxth	r2, r3
 802e928:	68fb      	ldr	r3, [r7, #12]
 802e92a:	851a      	strh	r2, [r3, #40]	; 0x28
 802e92c:	e00d      	b.n	802e94a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 802e92e:	697b      	ldr	r3, [r7, #20]
 802e930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802e934:	d002      	beq.n	802e93c <I2C_Slave_ISR_IT+0x1e6>
 802e936:	697b      	ldr	r3, [r7, #20]
 802e938:	2b00      	cmp	r3, #0
 802e93a:	d106      	bne.n	802e94a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802e93c:	68f8      	ldr	r0, [r7, #12]
 802e93e:	f000 f891 	bl	802ea64 <I2C_ITSlaveSeqCplt>
 802e942:	e002      	b.n	802e94a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 802e944:	bf00      	nop
 802e946:	e000      	b.n	802e94a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 802e948:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 802e94a:	68fb      	ldr	r3, [r7, #12]
 802e94c:	2200      	movs	r2, #0
 802e94e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 802e952:	2300      	movs	r3, #0
}
 802e954:	4618      	mov	r0, r3
 802e956:	3718      	adds	r7, #24
 802e958:	46bd      	mov	sp, r7
 802e95a:	bd80      	pop	{r7, pc}

0802e95c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802e95c:	b580      	push	{r7, lr}
 802e95e:	b084      	sub	sp, #16
 802e960:	af00      	add	r7, sp, #0
 802e962:	6078      	str	r0, [r7, #4]
 802e964:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 802e966:	687b      	ldr	r3, [r7, #4]
 802e968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e96c:	b2db      	uxtb	r3, r3
 802e96e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802e972:	2b28      	cmp	r3, #40	; 0x28
 802e974:	d16a      	bne.n	802ea4c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 802e976:	687b      	ldr	r3, [r7, #4]
 802e978:	681b      	ldr	r3, [r3, #0]
 802e97a:	699b      	ldr	r3, [r3, #24]
 802e97c:	0c1b      	lsrs	r3, r3, #16
 802e97e:	b2db      	uxtb	r3, r3
 802e980:	f003 0301 	and.w	r3, r3, #1
 802e984:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 802e986:	687b      	ldr	r3, [r7, #4]
 802e988:	681b      	ldr	r3, [r3, #0]
 802e98a:	699b      	ldr	r3, [r3, #24]
 802e98c:	0c1b      	lsrs	r3, r3, #16
 802e98e:	b29b      	uxth	r3, r3
 802e990:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 802e994:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 802e996:	687b      	ldr	r3, [r7, #4]
 802e998:	681b      	ldr	r3, [r3, #0]
 802e99a:	689b      	ldr	r3, [r3, #8]
 802e99c:	b29b      	uxth	r3, r3
 802e99e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802e9a2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 802e9a4:	687b      	ldr	r3, [r7, #4]
 802e9a6:	681b      	ldr	r3, [r3, #0]
 802e9a8:	68db      	ldr	r3, [r3, #12]
 802e9aa:	b29b      	uxth	r3, r3
 802e9ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 802e9b0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802e9b2:	687b      	ldr	r3, [r7, #4]
 802e9b4:	68db      	ldr	r3, [r3, #12]
 802e9b6:	2b02      	cmp	r3, #2
 802e9b8:	d138      	bne.n	802ea2c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 802e9ba:	897b      	ldrh	r3, [r7, #10]
 802e9bc:	09db      	lsrs	r3, r3, #7
 802e9be:	b29a      	uxth	r2, r3
 802e9c0:	89bb      	ldrh	r3, [r7, #12]
 802e9c2:	4053      	eors	r3, r2
 802e9c4:	b29b      	uxth	r3, r3
 802e9c6:	f003 0306 	and.w	r3, r3, #6
 802e9ca:	2b00      	cmp	r3, #0
 802e9cc:	d11c      	bne.n	802ea08 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 802e9ce:	897b      	ldrh	r3, [r7, #10]
 802e9d0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 802e9d2:	687b      	ldr	r3, [r7, #4]
 802e9d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e9d6:	1c5a      	adds	r2, r3, #1
 802e9d8:	687b      	ldr	r3, [r7, #4]
 802e9da:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 802e9dc:	687b      	ldr	r3, [r7, #4]
 802e9de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e9e0:	2b02      	cmp	r3, #2
 802e9e2:	d13b      	bne.n	802ea5c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 802e9e4:	687b      	ldr	r3, [r7, #4]
 802e9e6:	2200      	movs	r2, #0
 802e9e8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 802e9ea:	687b      	ldr	r3, [r7, #4]
 802e9ec:	681b      	ldr	r3, [r3, #0]
 802e9ee:	2208      	movs	r2, #8
 802e9f0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 802e9f2:	687b      	ldr	r3, [r7, #4]
 802e9f4:	2200      	movs	r2, #0
 802e9f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802e9fa:	89ba      	ldrh	r2, [r7, #12]
 802e9fc:	7bfb      	ldrb	r3, [r7, #15]
 802e9fe:	4619      	mov	r1, r3
 802ea00:	6878      	ldr	r0, [r7, #4]
 802ea02:	f7ff fe7c 	bl	802e6fe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 802ea06:	e029      	b.n	802ea5c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 802ea08:	893b      	ldrh	r3, [r7, #8]
 802ea0a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 802ea0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802ea10:	6878      	ldr	r0, [r7, #4]
 802ea12:	f000 fc0c 	bl	802f22e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 802ea16:	687b      	ldr	r3, [r7, #4]
 802ea18:	2200      	movs	r2, #0
 802ea1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802ea1e:	89ba      	ldrh	r2, [r7, #12]
 802ea20:	7bfb      	ldrb	r3, [r7, #15]
 802ea22:	4619      	mov	r1, r3
 802ea24:	6878      	ldr	r0, [r7, #4]
 802ea26:	f7ff fe6a 	bl	802e6fe <HAL_I2C_AddrCallback>
}
 802ea2a:	e017      	b.n	802ea5c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 802ea2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802ea30:	6878      	ldr	r0, [r7, #4]
 802ea32:	f000 fbfc 	bl	802f22e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 802ea36:	687b      	ldr	r3, [r7, #4]
 802ea38:	2200      	movs	r2, #0
 802ea3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802ea3e:	89ba      	ldrh	r2, [r7, #12]
 802ea40:	7bfb      	ldrb	r3, [r7, #15]
 802ea42:	4619      	mov	r1, r3
 802ea44:	6878      	ldr	r0, [r7, #4]
 802ea46:	f7ff fe5a 	bl	802e6fe <HAL_I2C_AddrCallback>
}
 802ea4a:	e007      	b.n	802ea5c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 802ea4c:	687b      	ldr	r3, [r7, #4]
 802ea4e:	681b      	ldr	r3, [r3, #0]
 802ea50:	2208      	movs	r2, #8
 802ea52:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 802ea54:	687b      	ldr	r3, [r7, #4]
 802ea56:	2200      	movs	r2, #0
 802ea58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 802ea5c:	bf00      	nop
 802ea5e:	3710      	adds	r7, #16
 802ea60:	46bd      	mov	sp, r7
 802ea62:	bd80      	pop	{r7, pc}

0802ea64 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 802ea64:	b580      	push	{r7, lr}
 802ea66:	b084      	sub	sp, #16
 802ea68:	af00      	add	r7, sp, #0
 802ea6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 802ea6c:	687b      	ldr	r3, [r7, #4]
 802ea6e:	681b      	ldr	r3, [r3, #0]
 802ea70:	681b      	ldr	r3, [r3, #0]
 802ea72:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802ea74:	687b      	ldr	r3, [r7, #4]
 802ea76:	2200      	movs	r2, #0
 802ea78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 802ea7c:	68fb      	ldr	r3, [r7, #12]
 802ea7e:	0b9b      	lsrs	r3, r3, #14
 802ea80:	f003 0301 	and.w	r3, r3, #1
 802ea84:	2b00      	cmp	r3, #0
 802ea86:	d008      	beq.n	802ea9a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802ea88:	687b      	ldr	r3, [r7, #4]
 802ea8a:	681b      	ldr	r3, [r3, #0]
 802ea8c:	681a      	ldr	r2, [r3, #0]
 802ea8e:	687b      	ldr	r3, [r7, #4]
 802ea90:	681b      	ldr	r3, [r3, #0]
 802ea92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802ea96:	601a      	str	r2, [r3, #0]
 802ea98:	e00d      	b.n	802eab6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 802ea9a:	68fb      	ldr	r3, [r7, #12]
 802ea9c:	0bdb      	lsrs	r3, r3, #15
 802ea9e:	f003 0301 	and.w	r3, r3, #1
 802eaa2:	2b00      	cmp	r3, #0
 802eaa4:	d007      	beq.n	802eab6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802eaa6:	687b      	ldr	r3, [r7, #4]
 802eaa8:	681b      	ldr	r3, [r3, #0]
 802eaaa:	681a      	ldr	r2, [r3, #0]
 802eaac:	687b      	ldr	r3, [r7, #4]
 802eaae:	681b      	ldr	r3, [r3, #0]
 802eab0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802eab4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 802eab6:	687b      	ldr	r3, [r7, #4]
 802eab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802eabc:	b2db      	uxtb	r3, r3
 802eabe:	2b29      	cmp	r3, #41	; 0x29
 802eac0:	d112      	bne.n	802eae8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802eac2:	687b      	ldr	r3, [r7, #4]
 802eac4:	2228      	movs	r2, #40	; 0x28
 802eac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802eaca:	687b      	ldr	r3, [r7, #4]
 802eacc:	2221      	movs	r2, #33	; 0x21
 802eace:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 802ead0:	2101      	movs	r1, #1
 802ead2:	6878      	ldr	r0, [r7, #4]
 802ead4:	f000 fbab 	bl	802f22e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802ead8:	687b      	ldr	r3, [r7, #4]
 802eada:	2200      	movs	r2, #0
 802eadc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 802eae0:	6878      	ldr	r0, [r7, #4]
 802eae2:	f7ff fdf8 	bl	802e6d6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 802eae6:	e017      	b.n	802eb18 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 802eae8:	687b      	ldr	r3, [r7, #4]
 802eaea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802eaee:	b2db      	uxtb	r3, r3
 802eaf0:	2b2a      	cmp	r3, #42	; 0x2a
 802eaf2:	d111      	bne.n	802eb18 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802eaf4:	687b      	ldr	r3, [r7, #4]
 802eaf6:	2228      	movs	r2, #40	; 0x28
 802eaf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802eafc:	687b      	ldr	r3, [r7, #4]
 802eafe:	2222      	movs	r2, #34	; 0x22
 802eb00:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 802eb02:	2102      	movs	r1, #2
 802eb04:	6878      	ldr	r0, [r7, #4]
 802eb06:	f000 fb92 	bl	802f22e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 802eb0a:	687b      	ldr	r3, [r7, #4]
 802eb0c:	2200      	movs	r2, #0
 802eb0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 802eb12:	6878      	ldr	r0, [r7, #4]
 802eb14:	f7ff fde9 	bl	802e6ea <HAL_I2C_SlaveRxCpltCallback>
}
 802eb18:	bf00      	nop
 802eb1a:	3710      	adds	r7, #16
 802eb1c:	46bd      	mov	sp, r7
 802eb1e:	bd80      	pop	{r7, pc}

0802eb20 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802eb20:	b580      	push	{r7, lr}
 802eb22:	b086      	sub	sp, #24
 802eb24:	af00      	add	r7, sp, #0
 802eb26:	6078      	str	r0, [r7, #4]
 802eb28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 802eb2a:	687b      	ldr	r3, [r7, #4]
 802eb2c:	681b      	ldr	r3, [r3, #0]
 802eb2e:	681b      	ldr	r3, [r3, #0]
 802eb30:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 802eb32:	683b      	ldr	r3, [r7, #0]
 802eb34:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 802eb36:	687b      	ldr	r3, [r7, #4]
 802eb38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802eb3c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802eb3e:	687b      	ldr	r3, [r7, #4]
 802eb40:	681b      	ldr	r3, [r3, #0]
 802eb42:	2220      	movs	r2, #32
 802eb44:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 802eb46:	7bfb      	ldrb	r3, [r7, #15]
 802eb48:	2b21      	cmp	r3, #33	; 0x21
 802eb4a:	d002      	beq.n	802eb52 <I2C_ITSlaveCplt+0x32>
 802eb4c:	7bfb      	ldrb	r3, [r7, #15]
 802eb4e:	2b29      	cmp	r3, #41	; 0x29
 802eb50:	d108      	bne.n	802eb64 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 802eb52:	f248 0101 	movw	r1, #32769	; 0x8001
 802eb56:	6878      	ldr	r0, [r7, #4]
 802eb58:	f000 fb69 	bl	802f22e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802eb5c:	687b      	ldr	r3, [r7, #4]
 802eb5e:	2221      	movs	r2, #33	; 0x21
 802eb60:	631a      	str	r2, [r3, #48]	; 0x30
 802eb62:	e00d      	b.n	802eb80 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802eb64:	7bfb      	ldrb	r3, [r7, #15]
 802eb66:	2b22      	cmp	r3, #34	; 0x22
 802eb68:	d002      	beq.n	802eb70 <I2C_ITSlaveCplt+0x50>
 802eb6a:	7bfb      	ldrb	r3, [r7, #15]
 802eb6c:	2b2a      	cmp	r3, #42	; 0x2a
 802eb6e:	d107      	bne.n	802eb80 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 802eb70:	f248 0102 	movw	r1, #32770	; 0x8002
 802eb74:	6878      	ldr	r0, [r7, #4]
 802eb76:	f000 fb5a 	bl	802f22e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802eb7a:	687b      	ldr	r3, [r7, #4]
 802eb7c:	2222      	movs	r2, #34	; 0x22
 802eb7e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 802eb80:	687b      	ldr	r3, [r7, #4]
 802eb82:	681b      	ldr	r3, [r3, #0]
 802eb84:	685a      	ldr	r2, [r3, #4]
 802eb86:	687b      	ldr	r3, [r7, #4]
 802eb88:	681b      	ldr	r3, [r3, #0]
 802eb8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802eb8e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 802eb90:	687b      	ldr	r3, [r7, #4]
 802eb92:	681b      	ldr	r3, [r3, #0]
 802eb94:	6859      	ldr	r1, [r3, #4]
 802eb96:	687b      	ldr	r3, [r7, #4]
 802eb98:	681a      	ldr	r2, [r3, #0]
 802eb9a:	4b80      	ldr	r3, [pc, #512]	; (802ed9c <I2C_ITSlaveCplt+0x27c>)
 802eb9c:	400b      	ands	r3, r1
 802eb9e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 802eba0:	6878      	ldr	r0, [r7, #4]
 802eba2:	f000 fb02 	bl	802f1aa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 802eba6:	693b      	ldr	r3, [r7, #16]
 802eba8:	0b9b      	lsrs	r3, r3, #14
 802ebaa:	f003 0301 	and.w	r3, r3, #1
 802ebae:	2b00      	cmp	r3, #0
 802ebb0:	d07a      	beq.n	802eca8 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802ebb2:	687b      	ldr	r3, [r7, #4]
 802ebb4:	681b      	ldr	r3, [r3, #0]
 802ebb6:	681a      	ldr	r2, [r3, #0]
 802ebb8:	687b      	ldr	r3, [r7, #4]
 802ebba:	681b      	ldr	r3, [r3, #0]
 802ebbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802ebc0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 802ebc2:	687b      	ldr	r3, [r7, #4]
 802ebc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ebc6:	2b00      	cmp	r3, #0
 802ebc8:	f000 8111 	beq.w	802edee <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 802ebcc:	687b      	ldr	r3, [r7, #4]
 802ebce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ebd0:	681b      	ldr	r3, [r3, #0]
 802ebd2:	4a73      	ldr	r2, [pc, #460]	; (802eda0 <I2C_ITSlaveCplt+0x280>)
 802ebd4:	4293      	cmp	r3, r2
 802ebd6:	d059      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ebd8:	687b      	ldr	r3, [r7, #4]
 802ebda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ebdc:	681b      	ldr	r3, [r3, #0]
 802ebde:	4a71      	ldr	r2, [pc, #452]	; (802eda4 <I2C_ITSlaveCplt+0x284>)
 802ebe0:	4293      	cmp	r3, r2
 802ebe2:	d053      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ebe4:	687b      	ldr	r3, [r7, #4]
 802ebe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ebe8:	681b      	ldr	r3, [r3, #0]
 802ebea:	4a6f      	ldr	r2, [pc, #444]	; (802eda8 <I2C_ITSlaveCplt+0x288>)
 802ebec:	4293      	cmp	r3, r2
 802ebee:	d04d      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ebf0:	687b      	ldr	r3, [r7, #4]
 802ebf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ebf4:	681b      	ldr	r3, [r3, #0]
 802ebf6:	4a6d      	ldr	r2, [pc, #436]	; (802edac <I2C_ITSlaveCplt+0x28c>)
 802ebf8:	4293      	cmp	r3, r2
 802ebfa:	d047      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ebfc:	687b      	ldr	r3, [r7, #4]
 802ebfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec00:	681b      	ldr	r3, [r3, #0]
 802ec02:	4a6b      	ldr	r2, [pc, #428]	; (802edb0 <I2C_ITSlaveCplt+0x290>)
 802ec04:	4293      	cmp	r3, r2
 802ec06:	d041      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ec08:	687b      	ldr	r3, [r7, #4]
 802ec0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec0c:	681b      	ldr	r3, [r3, #0]
 802ec0e:	4a69      	ldr	r2, [pc, #420]	; (802edb4 <I2C_ITSlaveCplt+0x294>)
 802ec10:	4293      	cmp	r3, r2
 802ec12:	d03b      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ec14:	687b      	ldr	r3, [r7, #4]
 802ec16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec18:	681b      	ldr	r3, [r3, #0]
 802ec1a:	4a67      	ldr	r2, [pc, #412]	; (802edb8 <I2C_ITSlaveCplt+0x298>)
 802ec1c:	4293      	cmp	r3, r2
 802ec1e:	d035      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ec20:	687b      	ldr	r3, [r7, #4]
 802ec22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec24:	681b      	ldr	r3, [r3, #0]
 802ec26:	4a65      	ldr	r2, [pc, #404]	; (802edbc <I2C_ITSlaveCplt+0x29c>)
 802ec28:	4293      	cmp	r3, r2
 802ec2a:	d02f      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ec2c:	687b      	ldr	r3, [r7, #4]
 802ec2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec30:	681b      	ldr	r3, [r3, #0]
 802ec32:	4a63      	ldr	r2, [pc, #396]	; (802edc0 <I2C_ITSlaveCplt+0x2a0>)
 802ec34:	4293      	cmp	r3, r2
 802ec36:	d029      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ec38:	687b      	ldr	r3, [r7, #4]
 802ec3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec3c:	681b      	ldr	r3, [r3, #0]
 802ec3e:	4a61      	ldr	r2, [pc, #388]	; (802edc4 <I2C_ITSlaveCplt+0x2a4>)
 802ec40:	4293      	cmp	r3, r2
 802ec42:	d023      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ec44:	687b      	ldr	r3, [r7, #4]
 802ec46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec48:	681b      	ldr	r3, [r3, #0]
 802ec4a:	4a5f      	ldr	r2, [pc, #380]	; (802edc8 <I2C_ITSlaveCplt+0x2a8>)
 802ec4c:	4293      	cmp	r3, r2
 802ec4e:	d01d      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ec50:	687b      	ldr	r3, [r7, #4]
 802ec52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec54:	681b      	ldr	r3, [r3, #0]
 802ec56:	4a5d      	ldr	r2, [pc, #372]	; (802edcc <I2C_ITSlaveCplt+0x2ac>)
 802ec58:	4293      	cmp	r3, r2
 802ec5a:	d017      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ec5c:	687b      	ldr	r3, [r7, #4]
 802ec5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec60:	681b      	ldr	r3, [r3, #0]
 802ec62:	4a5b      	ldr	r2, [pc, #364]	; (802edd0 <I2C_ITSlaveCplt+0x2b0>)
 802ec64:	4293      	cmp	r3, r2
 802ec66:	d011      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ec68:	687b      	ldr	r3, [r7, #4]
 802ec6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec6c:	681b      	ldr	r3, [r3, #0]
 802ec6e:	4a59      	ldr	r2, [pc, #356]	; (802edd4 <I2C_ITSlaveCplt+0x2b4>)
 802ec70:	4293      	cmp	r3, r2
 802ec72:	d00b      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ec74:	687b      	ldr	r3, [r7, #4]
 802ec76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec78:	681b      	ldr	r3, [r3, #0]
 802ec7a:	4a57      	ldr	r2, [pc, #348]	; (802edd8 <I2C_ITSlaveCplt+0x2b8>)
 802ec7c:	4293      	cmp	r3, r2
 802ec7e:	d005      	beq.n	802ec8c <I2C_ITSlaveCplt+0x16c>
 802ec80:	687b      	ldr	r3, [r7, #4]
 802ec82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec84:	681b      	ldr	r3, [r3, #0]
 802ec86:	4a55      	ldr	r2, [pc, #340]	; (802eddc <I2C_ITSlaveCplt+0x2bc>)
 802ec88:	4293      	cmp	r3, r2
 802ec8a:	d105      	bne.n	802ec98 <I2C_ITSlaveCplt+0x178>
 802ec8c:	687b      	ldr	r3, [r7, #4]
 802ec8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec90:	681b      	ldr	r3, [r3, #0]
 802ec92:	685b      	ldr	r3, [r3, #4]
 802ec94:	b29b      	uxth	r3, r3
 802ec96:	e004      	b.n	802eca2 <I2C_ITSlaveCplt+0x182>
 802ec98:	687b      	ldr	r3, [r7, #4]
 802ec9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ec9c:	681b      	ldr	r3, [r3, #0]
 802ec9e:	685b      	ldr	r3, [r3, #4]
 802eca0:	b29b      	uxth	r3, r3
 802eca2:	687a      	ldr	r2, [r7, #4]
 802eca4:	8553      	strh	r3, [r2, #42]	; 0x2a
 802eca6:	e0a2      	b.n	802edee <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 802eca8:	693b      	ldr	r3, [r7, #16]
 802ecaa:	0bdb      	lsrs	r3, r3, #15
 802ecac:	f003 0301 	and.w	r3, r3, #1
 802ecb0:	2b00      	cmp	r3, #0
 802ecb2:	f000 809c 	beq.w	802edee <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802ecb6:	687b      	ldr	r3, [r7, #4]
 802ecb8:	681b      	ldr	r3, [r3, #0]
 802ecba:	681a      	ldr	r2, [r3, #0]
 802ecbc:	687b      	ldr	r3, [r7, #4]
 802ecbe:	681b      	ldr	r3, [r3, #0]
 802ecc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802ecc4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 802ecc6:	687b      	ldr	r3, [r7, #4]
 802ecc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ecca:	2b00      	cmp	r3, #0
 802eccc:	f000 808f 	beq.w	802edee <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 802ecd0:	687b      	ldr	r3, [r7, #4]
 802ecd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ecd4:	681b      	ldr	r3, [r3, #0]
 802ecd6:	4a32      	ldr	r2, [pc, #200]	; (802eda0 <I2C_ITSlaveCplt+0x280>)
 802ecd8:	4293      	cmp	r3, r2
 802ecda:	d059      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ecdc:	687b      	ldr	r3, [r7, #4]
 802ecde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ece0:	681b      	ldr	r3, [r3, #0]
 802ece2:	4a30      	ldr	r2, [pc, #192]	; (802eda4 <I2C_ITSlaveCplt+0x284>)
 802ece4:	4293      	cmp	r3, r2
 802ece6:	d053      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ece8:	687b      	ldr	r3, [r7, #4]
 802ecea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ecec:	681b      	ldr	r3, [r3, #0]
 802ecee:	4a2e      	ldr	r2, [pc, #184]	; (802eda8 <I2C_ITSlaveCplt+0x288>)
 802ecf0:	4293      	cmp	r3, r2
 802ecf2:	d04d      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ecf4:	687b      	ldr	r3, [r7, #4]
 802ecf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ecf8:	681b      	ldr	r3, [r3, #0]
 802ecfa:	4a2c      	ldr	r2, [pc, #176]	; (802edac <I2C_ITSlaveCplt+0x28c>)
 802ecfc:	4293      	cmp	r3, r2
 802ecfe:	d047      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ed00:	687b      	ldr	r3, [r7, #4]
 802ed02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed04:	681b      	ldr	r3, [r3, #0]
 802ed06:	4a2a      	ldr	r2, [pc, #168]	; (802edb0 <I2C_ITSlaveCplt+0x290>)
 802ed08:	4293      	cmp	r3, r2
 802ed0a:	d041      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ed0c:	687b      	ldr	r3, [r7, #4]
 802ed0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed10:	681b      	ldr	r3, [r3, #0]
 802ed12:	4a28      	ldr	r2, [pc, #160]	; (802edb4 <I2C_ITSlaveCplt+0x294>)
 802ed14:	4293      	cmp	r3, r2
 802ed16:	d03b      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ed18:	687b      	ldr	r3, [r7, #4]
 802ed1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed1c:	681b      	ldr	r3, [r3, #0]
 802ed1e:	4a26      	ldr	r2, [pc, #152]	; (802edb8 <I2C_ITSlaveCplt+0x298>)
 802ed20:	4293      	cmp	r3, r2
 802ed22:	d035      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ed24:	687b      	ldr	r3, [r7, #4]
 802ed26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed28:	681b      	ldr	r3, [r3, #0]
 802ed2a:	4a24      	ldr	r2, [pc, #144]	; (802edbc <I2C_ITSlaveCplt+0x29c>)
 802ed2c:	4293      	cmp	r3, r2
 802ed2e:	d02f      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ed30:	687b      	ldr	r3, [r7, #4]
 802ed32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed34:	681b      	ldr	r3, [r3, #0]
 802ed36:	4a22      	ldr	r2, [pc, #136]	; (802edc0 <I2C_ITSlaveCplt+0x2a0>)
 802ed38:	4293      	cmp	r3, r2
 802ed3a:	d029      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ed3c:	687b      	ldr	r3, [r7, #4]
 802ed3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed40:	681b      	ldr	r3, [r3, #0]
 802ed42:	4a20      	ldr	r2, [pc, #128]	; (802edc4 <I2C_ITSlaveCplt+0x2a4>)
 802ed44:	4293      	cmp	r3, r2
 802ed46:	d023      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ed48:	687b      	ldr	r3, [r7, #4]
 802ed4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed4c:	681b      	ldr	r3, [r3, #0]
 802ed4e:	4a1e      	ldr	r2, [pc, #120]	; (802edc8 <I2C_ITSlaveCplt+0x2a8>)
 802ed50:	4293      	cmp	r3, r2
 802ed52:	d01d      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ed54:	687b      	ldr	r3, [r7, #4]
 802ed56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed58:	681b      	ldr	r3, [r3, #0]
 802ed5a:	4a1c      	ldr	r2, [pc, #112]	; (802edcc <I2C_ITSlaveCplt+0x2ac>)
 802ed5c:	4293      	cmp	r3, r2
 802ed5e:	d017      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ed60:	687b      	ldr	r3, [r7, #4]
 802ed62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed64:	681b      	ldr	r3, [r3, #0]
 802ed66:	4a1a      	ldr	r2, [pc, #104]	; (802edd0 <I2C_ITSlaveCplt+0x2b0>)
 802ed68:	4293      	cmp	r3, r2
 802ed6a:	d011      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ed6c:	687b      	ldr	r3, [r7, #4]
 802ed6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed70:	681b      	ldr	r3, [r3, #0]
 802ed72:	4a18      	ldr	r2, [pc, #96]	; (802edd4 <I2C_ITSlaveCplt+0x2b4>)
 802ed74:	4293      	cmp	r3, r2
 802ed76:	d00b      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ed78:	687b      	ldr	r3, [r7, #4]
 802ed7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed7c:	681b      	ldr	r3, [r3, #0]
 802ed7e:	4a16      	ldr	r2, [pc, #88]	; (802edd8 <I2C_ITSlaveCplt+0x2b8>)
 802ed80:	4293      	cmp	r3, r2
 802ed82:	d005      	beq.n	802ed90 <I2C_ITSlaveCplt+0x270>
 802ed84:	687b      	ldr	r3, [r7, #4]
 802ed86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed88:	681b      	ldr	r3, [r3, #0]
 802ed8a:	4a14      	ldr	r2, [pc, #80]	; (802eddc <I2C_ITSlaveCplt+0x2bc>)
 802ed8c:	4293      	cmp	r3, r2
 802ed8e:	d127      	bne.n	802ede0 <I2C_ITSlaveCplt+0x2c0>
 802ed90:	687b      	ldr	r3, [r7, #4]
 802ed92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ed94:	681b      	ldr	r3, [r3, #0]
 802ed96:	685b      	ldr	r3, [r3, #4]
 802ed98:	b29b      	uxth	r3, r3
 802ed9a:	e026      	b.n	802edea <I2C_ITSlaveCplt+0x2ca>
 802ed9c:	fe00e800 	.word	0xfe00e800
 802eda0:	40020010 	.word	0x40020010
 802eda4:	40020028 	.word	0x40020028
 802eda8:	40020040 	.word	0x40020040
 802edac:	40020058 	.word	0x40020058
 802edb0:	40020070 	.word	0x40020070
 802edb4:	40020088 	.word	0x40020088
 802edb8:	400200a0 	.word	0x400200a0
 802edbc:	400200b8 	.word	0x400200b8
 802edc0:	40020410 	.word	0x40020410
 802edc4:	40020428 	.word	0x40020428
 802edc8:	40020440 	.word	0x40020440
 802edcc:	40020458 	.word	0x40020458
 802edd0:	40020470 	.word	0x40020470
 802edd4:	40020488 	.word	0x40020488
 802edd8:	400204a0 	.word	0x400204a0
 802eddc:	400204b8 	.word	0x400204b8
 802ede0:	687b      	ldr	r3, [r7, #4]
 802ede2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ede4:	681b      	ldr	r3, [r3, #0]
 802ede6:	685b      	ldr	r3, [r3, #4]
 802ede8:	b29b      	uxth	r3, r3
 802edea:	687a      	ldr	r2, [r7, #4]
 802edec:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 802edee:	697b      	ldr	r3, [r7, #20]
 802edf0:	089b      	lsrs	r3, r3, #2
 802edf2:	f003 0301 	and.w	r3, r3, #1
 802edf6:	2b00      	cmp	r3, #0
 802edf8:	d020      	beq.n	802ee3c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 802edfa:	697b      	ldr	r3, [r7, #20]
 802edfc:	f023 0304 	bic.w	r3, r3, #4
 802ee00:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802ee02:	687b      	ldr	r3, [r7, #4]
 802ee04:	681b      	ldr	r3, [r3, #0]
 802ee06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802ee08:	687b      	ldr	r3, [r7, #4]
 802ee0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ee0c:	b2d2      	uxtb	r2, r2
 802ee0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802ee10:	687b      	ldr	r3, [r7, #4]
 802ee12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ee14:	1c5a      	adds	r2, r3, #1
 802ee16:	687b      	ldr	r3, [r7, #4]
 802ee18:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 802ee1a:	687b      	ldr	r3, [r7, #4]
 802ee1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ee1e:	2b00      	cmp	r3, #0
 802ee20:	d00c      	beq.n	802ee3c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 802ee22:	687b      	ldr	r3, [r7, #4]
 802ee24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ee26:	3b01      	subs	r3, #1
 802ee28:	b29a      	uxth	r2, r3
 802ee2a:	687b      	ldr	r3, [r7, #4]
 802ee2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802ee2e:	687b      	ldr	r3, [r7, #4]
 802ee30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ee32:	b29b      	uxth	r3, r3
 802ee34:	3b01      	subs	r3, #1
 802ee36:	b29a      	uxth	r2, r3
 802ee38:	687b      	ldr	r3, [r7, #4]
 802ee3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 802ee3c:	687b      	ldr	r3, [r7, #4]
 802ee3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ee40:	b29b      	uxth	r3, r3
 802ee42:	2b00      	cmp	r3, #0
 802ee44:	d005      	beq.n	802ee52 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802ee46:	687b      	ldr	r3, [r7, #4]
 802ee48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ee4a:	f043 0204 	orr.w	r2, r3, #4
 802ee4e:	687b      	ldr	r3, [r7, #4]
 802ee50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 802ee52:	687b      	ldr	r3, [r7, #4]
 802ee54:	2200      	movs	r2, #0
 802ee56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 802ee5a:	687b      	ldr	r3, [r7, #4]
 802ee5c:	2200      	movs	r2, #0
 802ee5e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 802ee60:	687b      	ldr	r3, [r7, #4]
 802ee62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ee64:	2b00      	cmp	r3, #0
 802ee66:	d010      	beq.n	802ee8a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 802ee68:	687b      	ldr	r3, [r7, #4]
 802ee6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ee6c:	4619      	mov	r1, r3
 802ee6e:	6878      	ldr	r0, [r7, #4]
 802ee70:	f000 f8a4 	bl	802efbc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 802ee74:	687b      	ldr	r3, [r7, #4]
 802ee76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ee7a:	b2db      	uxtb	r3, r3
 802ee7c:	2b28      	cmp	r3, #40	; 0x28
 802ee7e:	d141      	bne.n	802ef04 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 802ee80:	6979      	ldr	r1, [r7, #20]
 802ee82:	6878      	ldr	r0, [r7, #4]
 802ee84:	f000 f844 	bl	802ef10 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802ee88:	e03c      	b.n	802ef04 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 802ee8a:	687b      	ldr	r3, [r7, #4]
 802ee8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ee8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802ee92:	d014      	beq.n	802eebe <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 802ee94:	6878      	ldr	r0, [r7, #4]
 802ee96:	f7ff fde5 	bl	802ea64 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802ee9a:	687b      	ldr	r3, [r7, #4]
 802ee9c:	4a1b      	ldr	r2, [pc, #108]	; (802ef0c <I2C_ITSlaveCplt+0x3ec>)
 802ee9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 802eea0:	687b      	ldr	r3, [r7, #4]
 802eea2:	2220      	movs	r2, #32
 802eea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802eea8:	687b      	ldr	r3, [r7, #4]
 802eeaa:	2200      	movs	r2, #0
 802eeac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802eeae:	687b      	ldr	r3, [r7, #4]
 802eeb0:	2200      	movs	r2, #0
 802eeb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 802eeb6:	6878      	ldr	r0, [r7, #4]
 802eeb8:	f7ff fc2f 	bl	802e71a <HAL_I2C_ListenCpltCallback>
}
 802eebc:	e022      	b.n	802ef04 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 802eebe:	687b      	ldr	r3, [r7, #4]
 802eec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802eec4:	b2db      	uxtb	r3, r3
 802eec6:	2b22      	cmp	r3, #34	; 0x22
 802eec8:	d10e      	bne.n	802eee8 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 802eeca:	687b      	ldr	r3, [r7, #4]
 802eecc:	2220      	movs	r2, #32
 802eece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802eed2:	687b      	ldr	r3, [r7, #4]
 802eed4:	2200      	movs	r2, #0
 802eed6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802eed8:	687b      	ldr	r3, [r7, #4]
 802eeda:	2200      	movs	r2, #0
 802eedc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 802eee0:	6878      	ldr	r0, [r7, #4]
 802eee2:	f7ff fc02 	bl	802e6ea <HAL_I2C_SlaveRxCpltCallback>
}
 802eee6:	e00d      	b.n	802ef04 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 802eee8:	687b      	ldr	r3, [r7, #4]
 802eeea:	2220      	movs	r2, #32
 802eeec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802eef0:	687b      	ldr	r3, [r7, #4]
 802eef2:	2200      	movs	r2, #0
 802eef4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802eef6:	687b      	ldr	r3, [r7, #4]
 802eef8:	2200      	movs	r2, #0
 802eefa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 802eefe:	6878      	ldr	r0, [r7, #4]
 802ef00:	f7ff fbe9 	bl	802e6d6 <HAL_I2C_SlaveTxCpltCallback>
}
 802ef04:	bf00      	nop
 802ef06:	3718      	adds	r7, #24
 802ef08:	46bd      	mov	sp, r7
 802ef0a:	bd80      	pop	{r7, pc}
 802ef0c:	ffff0000 	.word	0xffff0000

0802ef10 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802ef10:	b580      	push	{r7, lr}
 802ef12:	b082      	sub	sp, #8
 802ef14:	af00      	add	r7, sp, #0
 802ef16:	6078      	str	r0, [r7, #4]
 802ef18:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802ef1a:	687b      	ldr	r3, [r7, #4]
 802ef1c:	4a26      	ldr	r2, [pc, #152]	; (802efb8 <I2C_ITListenCplt+0xa8>)
 802ef1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 802ef20:	687b      	ldr	r3, [r7, #4]
 802ef22:	2200      	movs	r2, #0
 802ef24:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 802ef26:	687b      	ldr	r3, [r7, #4]
 802ef28:	2220      	movs	r2, #32
 802ef2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802ef2e:	687b      	ldr	r3, [r7, #4]
 802ef30:	2200      	movs	r2, #0
 802ef32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 802ef36:	687b      	ldr	r3, [r7, #4]
 802ef38:	2200      	movs	r2, #0
 802ef3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 802ef3c:	683b      	ldr	r3, [r7, #0]
 802ef3e:	089b      	lsrs	r3, r3, #2
 802ef40:	f003 0301 	and.w	r3, r3, #1
 802ef44:	2b00      	cmp	r3, #0
 802ef46:	d022      	beq.n	802ef8e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802ef48:	687b      	ldr	r3, [r7, #4]
 802ef4a:	681b      	ldr	r3, [r3, #0]
 802ef4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802ef4e:	687b      	ldr	r3, [r7, #4]
 802ef50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ef52:	b2d2      	uxtb	r2, r2
 802ef54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802ef56:	687b      	ldr	r3, [r7, #4]
 802ef58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ef5a:	1c5a      	adds	r2, r3, #1
 802ef5c:	687b      	ldr	r3, [r7, #4]
 802ef5e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 802ef60:	687b      	ldr	r3, [r7, #4]
 802ef62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ef64:	2b00      	cmp	r3, #0
 802ef66:	d012      	beq.n	802ef8e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 802ef68:	687b      	ldr	r3, [r7, #4]
 802ef6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ef6c:	3b01      	subs	r3, #1
 802ef6e:	b29a      	uxth	r2, r3
 802ef70:	687b      	ldr	r3, [r7, #4]
 802ef72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802ef74:	687b      	ldr	r3, [r7, #4]
 802ef76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ef78:	b29b      	uxth	r3, r3
 802ef7a:	3b01      	subs	r3, #1
 802ef7c:	b29a      	uxth	r2, r3
 802ef7e:	687b      	ldr	r3, [r7, #4]
 802ef80:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802ef82:	687b      	ldr	r3, [r7, #4]
 802ef84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ef86:	f043 0204 	orr.w	r2, r3, #4
 802ef8a:	687b      	ldr	r3, [r7, #4]
 802ef8c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802ef8e:	f248 0103 	movw	r1, #32771	; 0x8003
 802ef92:	6878      	ldr	r0, [r7, #4]
 802ef94:	f000 f94b 	bl	802f22e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802ef98:	687b      	ldr	r3, [r7, #4]
 802ef9a:	681b      	ldr	r3, [r3, #0]
 802ef9c:	2210      	movs	r2, #16
 802ef9e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 802efa0:	687b      	ldr	r3, [r7, #4]
 802efa2:	2200      	movs	r2, #0
 802efa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 802efa8:	6878      	ldr	r0, [r7, #4]
 802efaa:	f7ff fbb6 	bl	802e71a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 802efae:	bf00      	nop
 802efb0:	3708      	adds	r7, #8
 802efb2:	46bd      	mov	sp, r7
 802efb4:	bd80      	pop	{r7, pc}
 802efb6:	bf00      	nop
 802efb8:	ffff0000 	.word	0xffff0000

0802efbc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 802efbc:	b580      	push	{r7, lr}
 802efbe:	b084      	sub	sp, #16
 802efc0:	af00      	add	r7, sp, #0
 802efc2:	6078      	str	r0, [r7, #4]
 802efc4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 802efc6:	687b      	ldr	r3, [r7, #4]
 802efc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802efcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 802efce:	687b      	ldr	r3, [r7, #4]
 802efd0:	2200      	movs	r2, #0
 802efd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 802efd6:	687b      	ldr	r3, [r7, #4]
 802efd8:	4a5d      	ldr	r2, [pc, #372]	; (802f150 <I2C_ITError+0x194>)
 802efda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 802efdc:	687b      	ldr	r3, [r7, #4]
 802efde:	2200      	movs	r2, #0
 802efe0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 802efe2:	687b      	ldr	r3, [r7, #4]
 802efe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802efe6:	683b      	ldr	r3, [r7, #0]
 802efe8:	431a      	orrs	r2, r3
 802efea:	687b      	ldr	r3, [r7, #4]
 802efec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 802efee:	7bfb      	ldrb	r3, [r7, #15]
 802eff0:	2b28      	cmp	r3, #40	; 0x28
 802eff2:	d005      	beq.n	802f000 <I2C_ITError+0x44>
 802eff4:	7bfb      	ldrb	r3, [r7, #15]
 802eff6:	2b29      	cmp	r3, #41	; 0x29
 802eff8:	d002      	beq.n	802f000 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 802effa:	7bfb      	ldrb	r3, [r7, #15]
 802effc:	2b2a      	cmp	r3, #42	; 0x2a
 802effe:	d10b      	bne.n	802f018 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f000:	2103      	movs	r1, #3
 802f002:	6878      	ldr	r0, [r7, #4]
 802f004:	f000 f913 	bl	802f22e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802f008:	687b      	ldr	r3, [r7, #4]
 802f00a:	2228      	movs	r2, #40	; 0x28
 802f00c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 802f010:	687b      	ldr	r3, [r7, #4]
 802f012:	4a50      	ldr	r2, [pc, #320]	; (802f154 <I2C_ITError+0x198>)
 802f014:	635a      	str	r2, [r3, #52]	; 0x34
 802f016:	e011      	b.n	802f03c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f018:	f248 0103 	movw	r1, #32771	; 0x8003
 802f01c:	6878      	ldr	r0, [r7, #4]
 802f01e:	f000 f906 	bl	802f22e <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 802f022:	687b      	ldr	r3, [r7, #4]
 802f024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f028:	b2db      	uxtb	r3, r3
 802f02a:	2b60      	cmp	r3, #96	; 0x60
 802f02c:	d003      	beq.n	802f036 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 802f02e:	687b      	ldr	r3, [r7, #4]
 802f030:	2220      	movs	r2, #32
 802f032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 802f036:	687b      	ldr	r3, [r7, #4]
 802f038:	2200      	movs	r2, #0
 802f03a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 802f03c:	687b      	ldr	r3, [r7, #4]
 802f03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802f040:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 802f042:	687b      	ldr	r3, [r7, #4]
 802f044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f046:	2b00      	cmp	r3, #0
 802f048:	d039      	beq.n	802f0be <I2C_ITError+0x102>
 802f04a:	68bb      	ldr	r3, [r7, #8]
 802f04c:	2b11      	cmp	r3, #17
 802f04e:	d002      	beq.n	802f056 <I2C_ITError+0x9a>
 802f050:	68bb      	ldr	r3, [r7, #8]
 802f052:	2b21      	cmp	r3, #33	; 0x21
 802f054:	d133      	bne.n	802f0be <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 802f056:	687b      	ldr	r3, [r7, #4]
 802f058:	681b      	ldr	r3, [r3, #0]
 802f05a:	681b      	ldr	r3, [r3, #0]
 802f05c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802f060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802f064:	d107      	bne.n	802f076 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802f066:	687b      	ldr	r3, [r7, #4]
 802f068:	681b      	ldr	r3, [r3, #0]
 802f06a:	681a      	ldr	r2, [r3, #0]
 802f06c:	687b      	ldr	r3, [r7, #4]
 802f06e:	681b      	ldr	r3, [r3, #0]
 802f070:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802f074:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f076:	687b      	ldr	r3, [r7, #4]
 802f078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f07a:	4618      	mov	r0, r3
 802f07c:	f7fe fc54 	bl	802d928 <HAL_DMA_GetState>
 802f080:	4603      	mov	r3, r0
 802f082:	2b01      	cmp	r3, #1
 802f084:	d017      	beq.n	802f0b6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 802f086:	687b      	ldr	r3, [r7, #4]
 802f088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f08a:	4a33      	ldr	r2, [pc, #204]	; (802f158 <I2C_ITError+0x19c>)
 802f08c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802f08e:	687b      	ldr	r3, [r7, #4]
 802f090:	2200      	movs	r2, #0
 802f092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 802f096:	687b      	ldr	r3, [r7, #4]
 802f098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f09a:	4618      	mov	r0, r3
 802f09c:	f7fd fad4 	bl	802c648 <HAL_DMA_Abort_IT>
 802f0a0:	4603      	mov	r3, r0
 802f0a2:	2b00      	cmp	r3, #0
 802f0a4:	d04d      	beq.n	802f142 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 802f0a6:	687b      	ldr	r3, [r7, #4]
 802f0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f0ac:	687a      	ldr	r2, [r7, #4]
 802f0ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802f0b0:	4610      	mov	r0, r2
 802f0b2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f0b4:	e045      	b.n	802f142 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 802f0b6:	6878      	ldr	r0, [r7, #4]
 802f0b8:	f000 f850 	bl	802f15c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f0bc:	e041      	b.n	802f142 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 802f0be:	687b      	ldr	r3, [r7, #4]
 802f0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f0c2:	2b00      	cmp	r3, #0
 802f0c4:	d039      	beq.n	802f13a <I2C_ITError+0x17e>
 802f0c6:	68bb      	ldr	r3, [r7, #8]
 802f0c8:	2b12      	cmp	r3, #18
 802f0ca:	d002      	beq.n	802f0d2 <I2C_ITError+0x116>
 802f0cc:	68bb      	ldr	r3, [r7, #8]
 802f0ce:	2b22      	cmp	r3, #34	; 0x22
 802f0d0:	d133      	bne.n	802f13a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 802f0d2:	687b      	ldr	r3, [r7, #4]
 802f0d4:	681b      	ldr	r3, [r3, #0]
 802f0d6:	681b      	ldr	r3, [r3, #0]
 802f0d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802f0dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f0e0:	d107      	bne.n	802f0f2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802f0e2:	687b      	ldr	r3, [r7, #4]
 802f0e4:	681b      	ldr	r3, [r3, #0]
 802f0e6:	681a      	ldr	r2, [r3, #0]
 802f0e8:	687b      	ldr	r3, [r7, #4]
 802f0ea:	681b      	ldr	r3, [r3, #0]
 802f0ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802f0f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f0f2:	687b      	ldr	r3, [r7, #4]
 802f0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f0f6:	4618      	mov	r0, r3
 802f0f8:	f7fe fc16 	bl	802d928 <HAL_DMA_GetState>
 802f0fc:	4603      	mov	r3, r0
 802f0fe:	2b01      	cmp	r3, #1
 802f100:	d017      	beq.n	802f132 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 802f102:	687b      	ldr	r3, [r7, #4]
 802f104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f106:	4a14      	ldr	r2, [pc, #80]	; (802f158 <I2C_ITError+0x19c>)
 802f108:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802f10a:	687b      	ldr	r3, [r7, #4]
 802f10c:	2200      	movs	r2, #0
 802f10e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 802f112:	687b      	ldr	r3, [r7, #4]
 802f114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f116:	4618      	mov	r0, r3
 802f118:	f7fd fa96 	bl	802c648 <HAL_DMA_Abort_IT>
 802f11c:	4603      	mov	r3, r0
 802f11e:	2b00      	cmp	r3, #0
 802f120:	d011      	beq.n	802f146 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 802f122:	687b      	ldr	r3, [r7, #4]
 802f124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f128:	687a      	ldr	r2, [r7, #4]
 802f12a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 802f12c:	4610      	mov	r0, r2
 802f12e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f130:	e009      	b.n	802f146 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 802f132:	6878      	ldr	r0, [r7, #4]
 802f134:	f000 f812 	bl	802f15c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f138:	e005      	b.n	802f146 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 802f13a:	6878      	ldr	r0, [r7, #4]
 802f13c:	f000 f80e 	bl	802f15c <I2C_TreatErrorCallback>
  }
}
 802f140:	e002      	b.n	802f148 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f142:	bf00      	nop
 802f144:	e000      	b.n	802f148 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f146:	bf00      	nop
}
 802f148:	bf00      	nop
 802f14a:	3710      	adds	r7, #16
 802f14c:	46bd      	mov	sp, r7
 802f14e:	bd80      	pop	{r7, pc}
 802f150:	ffff0000 	.word	0xffff0000
 802f154:	0802e757 	.word	0x0802e757
 802f158:	0802f1f3 	.word	0x0802f1f3

0802f15c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 802f15c:	b580      	push	{r7, lr}
 802f15e:	b082      	sub	sp, #8
 802f160:	af00      	add	r7, sp, #0
 802f162:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 802f164:	687b      	ldr	r3, [r7, #4]
 802f166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f16a:	b2db      	uxtb	r3, r3
 802f16c:	2b60      	cmp	r3, #96	; 0x60
 802f16e:	d10e      	bne.n	802f18e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 802f170:	687b      	ldr	r3, [r7, #4]
 802f172:	2220      	movs	r2, #32
 802f174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f178:	687b      	ldr	r3, [r7, #4]
 802f17a:	2200      	movs	r2, #0
 802f17c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f17e:	687b      	ldr	r3, [r7, #4]
 802f180:	2200      	movs	r2, #0
 802f182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 802f186:	6878      	ldr	r0, [r7, #4]
 802f188:	f7ff fadb 	bl	802e742 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802f18c:	e009      	b.n	802f1a2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 802f18e:	687b      	ldr	r3, [r7, #4]
 802f190:	2200      	movs	r2, #0
 802f192:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f194:	687b      	ldr	r3, [r7, #4]
 802f196:	2200      	movs	r2, #0
 802f198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 802f19c:	6878      	ldr	r0, [r7, #4]
 802f19e:	f7ff fac6 	bl	802e72e <HAL_I2C_ErrorCallback>
}
 802f1a2:	bf00      	nop
 802f1a4:	3708      	adds	r7, #8
 802f1a6:	46bd      	mov	sp, r7
 802f1a8:	bd80      	pop	{r7, pc}

0802f1aa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 802f1aa:	b480      	push	{r7}
 802f1ac:	b083      	sub	sp, #12
 802f1ae:	af00      	add	r7, sp, #0
 802f1b0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 802f1b2:	687b      	ldr	r3, [r7, #4]
 802f1b4:	681b      	ldr	r3, [r3, #0]
 802f1b6:	699b      	ldr	r3, [r3, #24]
 802f1b8:	f003 0302 	and.w	r3, r3, #2
 802f1bc:	2b02      	cmp	r3, #2
 802f1be:	d103      	bne.n	802f1c8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 802f1c0:	687b      	ldr	r3, [r7, #4]
 802f1c2:	681b      	ldr	r3, [r3, #0]
 802f1c4:	2200      	movs	r2, #0
 802f1c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802f1c8:	687b      	ldr	r3, [r7, #4]
 802f1ca:	681b      	ldr	r3, [r3, #0]
 802f1cc:	699b      	ldr	r3, [r3, #24]
 802f1ce:	f003 0301 	and.w	r3, r3, #1
 802f1d2:	2b01      	cmp	r3, #1
 802f1d4:	d007      	beq.n	802f1e6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 802f1d6:	687b      	ldr	r3, [r7, #4]
 802f1d8:	681b      	ldr	r3, [r3, #0]
 802f1da:	699a      	ldr	r2, [r3, #24]
 802f1dc:	687b      	ldr	r3, [r7, #4]
 802f1de:	681b      	ldr	r3, [r3, #0]
 802f1e0:	f042 0201 	orr.w	r2, r2, #1
 802f1e4:	619a      	str	r2, [r3, #24]
  }
}
 802f1e6:	bf00      	nop
 802f1e8:	370c      	adds	r7, #12
 802f1ea:	46bd      	mov	sp, r7
 802f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f1f0:	4770      	bx	lr

0802f1f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 802f1f2:	b580      	push	{r7, lr}
 802f1f4:	b084      	sub	sp, #16
 802f1f6:	af00      	add	r7, sp, #0
 802f1f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 802f1fa:	687b      	ldr	r3, [r7, #4]
 802f1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f1fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 802f200:	68fb      	ldr	r3, [r7, #12]
 802f202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f204:	2b00      	cmp	r3, #0
 802f206:	d003      	beq.n	802f210 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 802f208:	68fb      	ldr	r3, [r7, #12]
 802f20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f20c:	2200      	movs	r2, #0
 802f20e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 802f210:	68fb      	ldr	r3, [r7, #12]
 802f212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f214:	2b00      	cmp	r3, #0
 802f216:	d003      	beq.n	802f220 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 802f218:	68fb      	ldr	r3, [r7, #12]
 802f21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f21c:	2200      	movs	r2, #0
 802f21e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 802f220:	68f8      	ldr	r0, [r7, #12]
 802f222:	f7ff ff9b 	bl	802f15c <I2C_TreatErrorCallback>
}
 802f226:	bf00      	nop
 802f228:	3710      	adds	r7, #16
 802f22a:	46bd      	mov	sp, r7
 802f22c:	bd80      	pop	{r7, pc}

0802f22e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 802f22e:	b480      	push	{r7}
 802f230:	b085      	sub	sp, #20
 802f232:	af00      	add	r7, sp, #0
 802f234:	6078      	str	r0, [r7, #4]
 802f236:	460b      	mov	r3, r1
 802f238:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 802f23a:	2300      	movs	r3, #0
 802f23c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 802f23e:	887b      	ldrh	r3, [r7, #2]
 802f240:	f003 0301 	and.w	r3, r3, #1
 802f244:	2b00      	cmp	r3, #0
 802f246:	d00f      	beq.n	802f268 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 802f248:	68fb      	ldr	r3, [r7, #12]
 802f24a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 802f24e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 802f250:	687b      	ldr	r3, [r7, #4]
 802f252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f256:	b2db      	uxtb	r3, r3
 802f258:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802f25c:	2b28      	cmp	r3, #40	; 0x28
 802f25e:	d003      	beq.n	802f268 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f260:	68fb      	ldr	r3, [r7, #12]
 802f262:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802f266:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 802f268:	887b      	ldrh	r3, [r7, #2]
 802f26a:	f003 0302 	and.w	r3, r3, #2
 802f26e:	2b00      	cmp	r3, #0
 802f270:	d00f      	beq.n	802f292 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 802f272:	68fb      	ldr	r3, [r7, #12]
 802f274:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 802f278:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 802f27a:	687b      	ldr	r3, [r7, #4]
 802f27c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f280:	b2db      	uxtb	r3, r3
 802f282:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802f286:	2b28      	cmp	r3, #40	; 0x28
 802f288:	d003      	beq.n	802f292 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f28a:	68fb      	ldr	r3, [r7, #12]
 802f28c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802f290:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 802f292:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802f296:	2b00      	cmp	r3, #0
 802f298:	da03      	bge.n	802f2a2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f29a:	68fb      	ldr	r3, [r7, #12]
 802f29c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 802f2a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 802f2a2:	887b      	ldrh	r3, [r7, #2]
 802f2a4:	2b10      	cmp	r3, #16
 802f2a6:	d103      	bne.n	802f2b0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 802f2a8:	68fb      	ldr	r3, [r7, #12]
 802f2aa:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 802f2ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 802f2b0:	887b      	ldrh	r3, [r7, #2]
 802f2b2:	2b20      	cmp	r3, #32
 802f2b4:	d103      	bne.n	802f2be <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 802f2b6:	68fb      	ldr	r3, [r7, #12]
 802f2b8:	f043 0320 	orr.w	r3, r3, #32
 802f2bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 802f2be:	887b      	ldrh	r3, [r7, #2]
 802f2c0:	2b40      	cmp	r3, #64	; 0x40
 802f2c2:	d103      	bne.n	802f2cc <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 802f2c4:	68fb      	ldr	r3, [r7, #12]
 802f2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f2ca:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 802f2cc:	687b      	ldr	r3, [r7, #4]
 802f2ce:	681b      	ldr	r3, [r3, #0]
 802f2d0:	6819      	ldr	r1, [r3, #0]
 802f2d2:	68fb      	ldr	r3, [r7, #12]
 802f2d4:	43da      	mvns	r2, r3
 802f2d6:	687b      	ldr	r3, [r7, #4]
 802f2d8:	681b      	ldr	r3, [r3, #0]
 802f2da:	400a      	ands	r2, r1
 802f2dc:	601a      	str	r2, [r3, #0]
}
 802f2de:	bf00      	nop
 802f2e0:	3714      	adds	r7, #20
 802f2e2:	46bd      	mov	sp, r7
 802f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f2e8:	4770      	bx	lr

0802f2ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 802f2ea:	b480      	push	{r7}
 802f2ec:	b083      	sub	sp, #12
 802f2ee:	af00      	add	r7, sp, #0
 802f2f0:	6078      	str	r0, [r7, #4]
 802f2f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802f2f4:	687b      	ldr	r3, [r7, #4]
 802f2f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f2fa:	b2db      	uxtb	r3, r3
 802f2fc:	2b20      	cmp	r3, #32
 802f2fe:	d138      	bne.n	802f372 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802f300:	687b      	ldr	r3, [r7, #4]
 802f302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802f306:	2b01      	cmp	r3, #1
 802f308:	d101      	bne.n	802f30e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 802f30a:	2302      	movs	r3, #2
 802f30c:	e032      	b.n	802f374 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 802f30e:	687b      	ldr	r3, [r7, #4]
 802f310:	2201      	movs	r2, #1
 802f312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802f316:	687b      	ldr	r3, [r7, #4]
 802f318:	2224      	movs	r2, #36	; 0x24
 802f31a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802f31e:	687b      	ldr	r3, [r7, #4]
 802f320:	681b      	ldr	r3, [r3, #0]
 802f322:	681a      	ldr	r2, [r3, #0]
 802f324:	687b      	ldr	r3, [r7, #4]
 802f326:	681b      	ldr	r3, [r3, #0]
 802f328:	f022 0201 	bic.w	r2, r2, #1
 802f32c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 802f32e:	687b      	ldr	r3, [r7, #4]
 802f330:	681b      	ldr	r3, [r3, #0]
 802f332:	681a      	ldr	r2, [r3, #0]
 802f334:	687b      	ldr	r3, [r7, #4]
 802f336:	681b      	ldr	r3, [r3, #0]
 802f338:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802f33c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 802f33e:	687b      	ldr	r3, [r7, #4]
 802f340:	681b      	ldr	r3, [r3, #0]
 802f342:	6819      	ldr	r1, [r3, #0]
 802f344:	687b      	ldr	r3, [r7, #4]
 802f346:	681b      	ldr	r3, [r3, #0]
 802f348:	683a      	ldr	r2, [r7, #0]
 802f34a:	430a      	orrs	r2, r1
 802f34c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802f34e:	687b      	ldr	r3, [r7, #4]
 802f350:	681b      	ldr	r3, [r3, #0]
 802f352:	681a      	ldr	r2, [r3, #0]
 802f354:	687b      	ldr	r3, [r7, #4]
 802f356:	681b      	ldr	r3, [r3, #0]
 802f358:	f042 0201 	orr.w	r2, r2, #1
 802f35c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802f35e:	687b      	ldr	r3, [r7, #4]
 802f360:	2220      	movs	r2, #32
 802f362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f366:	687b      	ldr	r3, [r7, #4]
 802f368:	2200      	movs	r2, #0
 802f36a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802f36e:	2300      	movs	r3, #0
 802f370:	e000      	b.n	802f374 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 802f372:	2302      	movs	r3, #2
  }
}
 802f374:	4618      	mov	r0, r3
 802f376:	370c      	adds	r7, #12
 802f378:	46bd      	mov	sp, r7
 802f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f37e:	4770      	bx	lr

0802f380 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 802f380:	b480      	push	{r7}
 802f382:	b085      	sub	sp, #20
 802f384:	af00      	add	r7, sp, #0
 802f386:	6078      	str	r0, [r7, #4]
 802f388:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802f38a:	687b      	ldr	r3, [r7, #4]
 802f38c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f390:	b2db      	uxtb	r3, r3
 802f392:	2b20      	cmp	r3, #32
 802f394:	d139      	bne.n	802f40a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802f396:	687b      	ldr	r3, [r7, #4]
 802f398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802f39c:	2b01      	cmp	r3, #1
 802f39e:	d101      	bne.n	802f3a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 802f3a0:	2302      	movs	r3, #2
 802f3a2:	e033      	b.n	802f40c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 802f3a4:	687b      	ldr	r3, [r7, #4]
 802f3a6:	2201      	movs	r2, #1
 802f3a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802f3ac:	687b      	ldr	r3, [r7, #4]
 802f3ae:	2224      	movs	r2, #36	; 0x24
 802f3b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802f3b4:	687b      	ldr	r3, [r7, #4]
 802f3b6:	681b      	ldr	r3, [r3, #0]
 802f3b8:	681a      	ldr	r2, [r3, #0]
 802f3ba:	687b      	ldr	r3, [r7, #4]
 802f3bc:	681b      	ldr	r3, [r3, #0]
 802f3be:	f022 0201 	bic.w	r2, r2, #1
 802f3c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 802f3c4:	687b      	ldr	r3, [r7, #4]
 802f3c6:	681b      	ldr	r3, [r3, #0]
 802f3c8:	681b      	ldr	r3, [r3, #0]
 802f3ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 802f3cc:	68fb      	ldr	r3, [r7, #12]
 802f3ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 802f3d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 802f3d4:	683b      	ldr	r3, [r7, #0]
 802f3d6:	021b      	lsls	r3, r3, #8
 802f3d8:	68fa      	ldr	r2, [r7, #12]
 802f3da:	4313      	orrs	r3, r2
 802f3dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 802f3de:	687b      	ldr	r3, [r7, #4]
 802f3e0:	681b      	ldr	r3, [r3, #0]
 802f3e2:	68fa      	ldr	r2, [r7, #12]
 802f3e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802f3e6:	687b      	ldr	r3, [r7, #4]
 802f3e8:	681b      	ldr	r3, [r3, #0]
 802f3ea:	681a      	ldr	r2, [r3, #0]
 802f3ec:	687b      	ldr	r3, [r7, #4]
 802f3ee:	681b      	ldr	r3, [r3, #0]
 802f3f0:	f042 0201 	orr.w	r2, r2, #1
 802f3f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802f3f6:	687b      	ldr	r3, [r7, #4]
 802f3f8:	2220      	movs	r2, #32
 802f3fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f3fe:	687b      	ldr	r3, [r7, #4]
 802f400:	2200      	movs	r2, #0
 802f402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802f406:	2300      	movs	r3, #0
 802f408:	e000      	b.n	802f40c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 802f40a:	2302      	movs	r3, #2
  }
}
 802f40c:	4618      	mov	r0, r3
 802f40e:	3714      	adds	r7, #20
 802f410:	46bd      	mov	sp, r7
 802f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f416:	4770      	bx	lr

0802f418 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 802f418:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f41a:	b08f      	sub	sp, #60	; 0x3c
 802f41c:	af0a      	add	r7, sp, #40	; 0x28
 802f41e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 802f420:	687b      	ldr	r3, [r7, #4]
 802f422:	2b00      	cmp	r3, #0
 802f424:	d101      	bne.n	802f42a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 802f426:	2301      	movs	r3, #1
 802f428:	e116      	b.n	802f658 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 802f42a:	687b      	ldr	r3, [r7, #4]
 802f42c:	681b      	ldr	r3, [r3, #0]
 802f42e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 802f430:	687b      	ldr	r3, [r7, #4]
 802f432:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 802f436:	b2db      	uxtb	r3, r3
 802f438:	2b00      	cmp	r3, #0
 802f43a:	d106      	bne.n	802f44a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 802f43c:	687b      	ldr	r3, [r7, #4]
 802f43e:	2200      	movs	r2, #0
 802f440:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 802f444:	6878      	ldr	r0, [r7, #4]
 802f446:	f00c f82f 	bl	803b4a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 802f44a:	687b      	ldr	r3, [r7, #4]
 802f44c:	2203      	movs	r2, #3
 802f44e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 802f452:	68bb      	ldr	r3, [r7, #8]
 802f454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802f45a:	2b00      	cmp	r3, #0
 802f45c:	d102      	bne.n	802f464 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 802f45e:	687b      	ldr	r3, [r7, #4]
 802f460:	2200      	movs	r2, #0
 802f462:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 802f464:	687b      	ldr	r3, [r7, #4]
 802f466:	681b      	ldr	r3, [r3, #0]
 802f468:	4618      	mov	r0, r3
 802f46a:	f008 fb78 	bl	8037b5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802f46e:	687b      	ldr	r3, [r7, #4]
 802f470:	681b      	ldr	r3, [r3, #0]
 802f472:	603b      	str	r3, [r7, #0]
 802f474:	687e      	ldr	r6, [r7, #4]
 802f476:	466d      	mov	r5, sp
 802f478:	f106 0410 	add.w	r4, r6, #16
 802f47c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f47e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f484:	e894 0003 	ldmia.w	r4, {r0, r1}
 802f488:	e885 0003 	stmia.w	r5, {r0, r1}
 802f48c:	1d33      	adds	r3, r6, #4
 802f48e:	cb0e      	ldmia	r3, {r1, r2, r3}
 802f490:	6838      	ldr	r0, [r7, #0]
 802f492:	f008 fa43 	bl	803791c <USB_CoreInit>
 802f496:	4603      	mov	r3, r0
 802f498:	2b00      	cmp	r3, #0
 802f49a:	d005      	beq.n	802f4a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802f49c:	687b      	ldr	r3, [r7, #4]
 802f49e:	2202      	movs	r2, #2
 802f4a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 802f4a4:	2301      	movs	r3, #1
 802f4a6:	e0d7      	b.n	802f658 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 802f4a8:	687b      	ldr	r3, [r7, #4]
 802f4aa:	681b      	ldr	r3, [r3, #0]
 802f4ac:	2100      	movs	r1, #0
 802f4ae:	4618      	mov	r0, r3
 802f4b0:	f008 fb66 	bl	8037b80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f4b4:	2300      	movs	r3, #0
 802f4b6:	73fb      	strb	r3, [r7, #15]
 802f4b8:	e04a      	b.n	802f550 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 802f4ba:	7bfa      	ldrb	r2, [r7, #15]
 802f4bc:	6879      	ldr	r1, [r7, #4]
 802f4be:	4613      	mov	r3, r2
 802f4c0:	00db      	lsls	r3, r3, #3
 802f4c2:	4413      	add	r3, r2
 802f4c4:	009b      	lsls	r3, r3, #2
 802f4c6:	440b      	add	r3, r1
 802f4c8:	333d      	adds	r3, #61	; 0x3d
 802f4ca:	2201      	movs	r2, #1
 802f4cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 802f4ce:	7bfa      	ldrb	r2, [r7, #15]
 802f4d0:	6879      	ldr	r1, [r7, #4]
 802f4d2:	4613      	mov	r3, r2
 802f4d4:	00db      	lsls	r3, r3, #3
 802f4d6:	4413      	add	r3, r2
 802f4d8:	009b      	lsls	r3, r3, #2
 802f4da:	440b      	add	r3, r1
 802f4dc:	333c      	adds	r3, #60	; 0x3c
 802f4de:	7bfa      	ldrb	r2, [r7, #15]
 802f4e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 802f4e2:	7bfa      	ldrb	r2, [r7, #15]
 802f4e4:	7bfb      	ldrb	r3, [r7, #15]
 802f4e6:	b298      	uxth	r0, r3
 802f4e8:	6879      	ldr	r1, [r7, #4]
 802f4ea:	4613      	mov	r3, r2
 802f4ec:	00db      	lsls	r3, r3, #3
 802f4ee:	4413      	add	r3, r2
 802f4f0:	009b      	lsls	r3, r3, #2
 802f4f2:	440b      	add	r3, r1
 802f4f4:	3344      	adds	r3, #68	; 0x44
 802f4f6:	4602      	mov	r2, r0
 802f4f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 802f4fa:	7bfa      	ldrb	r2, [r7, #15]
 802f4fc:	6879      	ldr	r1, [r7, #4]
 802f4fe:	4613      	mov	r3, r2
 802f500:	00db      	lsls	r3, r3, #3
 802f502:	4413      	add	r3, r2
 802f504:	009b      	lsls	r3, r3, #2
 802f506:	440b      	add	r3, r1
 802f508:	3340      	adds	r3, #64	; 0x40
 802f50a:	2200      	movs	r2, #0
 802f50c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 802f50e:	7bfa      	ldrb	r2, [r7, #15]
 802f510:	6879      	ldr	r1, [r7, #4]
 802f512:	4613      	mov	r3, r2
 802f514:	00db      	lsls	r3, r3, #3
 802f516:	4413      	add	r3, r2
 802f518:	009b      	lsls	r3, r3, #2
 802f51a:	440b      	add	r3, r1
 802f51c:	3348      	adds	r3, #72	; 0x48
 802f51e:	2200      	movs	r2, #0
 802f520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 802f522:	7bfa      	ldrb	r2, [r7, #15]
 802f524:	6879      	ldr	r1, [r7, #4]
 802f526:	4613      	mov	r3, r2
 802f528:	00db      	lsls	r3, r3, #3
 802f52a:	4413      	add	r3, r2
 802f52c:	009b      	lsls	r3, r3, #2
 802f52e:	440b      	add	r3, r1
 802f530:	334c      	adds	r3, #76	; 0x4c
 802f532:	2200      	movs	r2, #0
 802f534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 802f536:	7bfa      	ldrb	r2, [r7, #15]
 802f538:	6879      	ldr	r1, [r7, #4]
 802f53a:	4613      	mov	r3, r2
 802f53c:	00db      	lsls	r3, r3, #3
 802f53e:	4413      	add	r3, r2
 802f540:	009b      	lsls	r3, r3, #2
 802f542:	440b      	add	r3, r1
 802f544:	3354      	adds	r3, #84	; 0x54
 802f546:	2200      	movs	r2, #0
 802f548:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f54a:	7bfb      	ldrb	r3, [r7, #15]
 802f54c:	3301      	adds	r3, #1
 802f54e:	73fb      	strb	r3, [r7, #15]
 802f550:	7bfa      	ldrb	r2, [r7, #15]
 802f552:	687b      	ldr	r3, [r7, #4]
 802f554:	685b      	ldr	r3, [r3, #4]
 802f556:	429a      	cmp	r2, r3
 802f558:	d3af      	bcc.n	802f4ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f55a:	2300      	movs	r3, #0
 802f55c:	73fb      	strb	r3, [r7, #15]
 802f55e:	e044      	b.n	802f5ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 802f560:	7bfa      	ldrb	r2, [r7, #15]
 802f562:	6879      	ldr	r1, [r7, #4]
 802f564:	4613      	mov	r3, r2
 802f566:	00db      	lsls	r3, r3, #3
 802f568:	4413      	add	r3, r2
 802f56a:	009b      	lsls	r3, r3, #2
 802f56c:	440b      	add	r3, r1
 802f56e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 802f572:	2200      	movs	r2, #0
 802f574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 802f576:	7bfa      	ldrb	r2, [r7, #15]
 802f578:	6879      	ldr	r1, [r7, #4]
 802f57a:	4613      	mov	r3, r2
 802f57c:	00db      	lsls	r3, r3, #3
 802f57e:	4413      	add	r3, r2
 802f580:	009b      	lsls	r3, r3, #2
 802f582:	440b      	add	r3, r1
 802f584:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 802f588:	7bfa      	ldrb	r2, [r7, #15]
 802f58a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 802f58c:	7bfa      	ldrb	r2, [r7, #15]
 802f58e:	6879      	ldr	r1, [r7, #4]
 802f590:	4613      	mov	r3, r2
 802f592:	00db      	lsls	r3, r3, #3
 802f594:	4413      	add	r3, r2
 802f596:	009b      	lsls	r3, r3, #2
 802f598:	440b      	add	r3, r1
 802f59a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 802f59e:	2200      	movs	r2, #0
 802f5a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 802f5a2:	7bfa      	ldrb	r2, [r7, #15]
 802f5a4:	6879      	ldr	r1, [r7, #4]
 802f5a6:	4613      	mov	r3, r2
 802f5a8:	00db      	lsls	r3, r3, #3
 802f5aa:	4413      	add	r3, r2
 802f5ac:	009b      	lsls	r3, r3, #2
 802f5ae:	440b      	add	r3, r1
 802f5b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802f5b4:	2200      	movs	r2, #0
 802f5b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 802f5b8:	7bfa      	ldrb	r2, [r7, #15]
 802f5ba:	6879      	ldr	r1, [r7, #4]
 802f5bc:	4613      	mov	r3, r2
 802f5be:	00db      	lsls	r3, r3, #3
 802f5c0:	4413      	add	r3, r2
 802f5c2:	009b      	lsls	r3, r3, #2
 802f5c4:	440b      	add	r3, r1
 802f5c6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 802f5ca:	2200      	movs	r2, #0
 802f5cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 802f5ce:	7bfa      	ldrb	r2, [r7, #15]
 802f5d0:	6879      	ldr	r1, [r7, #4]
 802f5d2:	4613      	mov	r3, r2
 802f5d4:	00db      	lsls	r3, r3, #3
 802f5d6:	4413      	add	r3, r2
 802f5d8:	009b      	lsls	r3, r3, #2
 802f5da:	440b      	add	r3, r1
 802f5dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 802f5e0:	2200      	movs	r2, #0
 802f5e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f5e4:	7bfb      	ldrb	r3, [r7, #15]
 802f5e6:	3301      	adds	r3, #1
 802f5e8:	73fb      	strb	r3, [r7, #15]
 802f5ea:	7bfa      	ldrb	r2, [r7, #15]
 802f5ec:	687b      	ldr	r3, [r7, #4]
 802f5ee:	685b      	ldr	r3, [r3, #4]
 802f5f0:	429a      	cmp	r2, r3
 802f5f2:	d3b5      	bcc.n	802f560 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802f5f4:	687b      	ldr	r3, [r7, #4]
 802f5f6:	681b      	ldr	r3, [r3, #0]
 802f5f8:	603b      	str	r3, [r7, #0]
 802f5fa:	687e      	ldr	r6, [r7, #4]
 802f5fc:	466d      	mov	r5, sp
 802f5fe:	f106 0410 	add.w	r4, r6, #16
 802f602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f60a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802f60e:	e885 0003 	stmia.w	r5, {r0, r1}
 802f612:	1d33      	adds	r3, r6, #4
 802f614:	cb0e      	ldmia	r3, {r1, r2, r3}
 802f616:	6838      	ldr	r0, [r7, #0]
 802f618:	f008 fafe 	bl	8037c18 <USB_DevInit>
 802f61c:	4603      	mov	r3, r0
 802f61e:	2b00      	cmp	r3, #0
 802f620:	d005      	beq.n	802f62e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802f622:	687b      	ldr	r3, [r7, #4]
 802f624:	2202      	movs	r2, #2
 802f626:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 802f62a:	2301      	movs	r3, #1
 802f62c:	e014      	b.n	802f658 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 802f62e:	687b      	ldr	r3, [r7, #4]
 802f630:	2200      	movs	r2, #0
 802f632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 802f636:	687b      	ldr	r3, [r7, #4]
 802f638:	2201      	movs	r2, #1
 802f63a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 802f63e:	687b      	ldr	r3, [r7, #4]
 802f640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f642:	2b01      	cmp	r3, #1
 802f644:	d102      	bne.n	802f64c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 802f646:	6878      	ldr	r0, [r7, #4]
 802f648:	f001 f98c 	bl	8030964 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 802f64c:	687b      	ldr	r3, [r7, #4]
 802f64e:	681b      	ldr	r3, [r3, #0]
 802f650:	4618      	mov	r0, r3
 802f652:	f009 fc4c 	bl	8038eee <USB_DevDisconnect>

  return HAL_OK;
 802f656:	2300      	movs	r3, #0
}
 802f658:	4618      	mov	r0, r3
 802f65a:	3714      	adds	r7, #20
 802f65c:	46bd      	mov	sp, r7
 802f65e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802f660 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 802f660:	b580      	push	{r7, lr}
 802f662:	b084      	sub	sp, #16
 802f664:	af00      	add	r7, sp, #0
 802f666:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802f668:	687b      	ldr	r3, [r7, #4]
 802f66a:	681b      	ldr	r3, [r3, #0]
 802f66c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 802f66e:	687b      	ldr	r3, [r7, #4]
 802f670:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802f674:	2b01      	cmp	r3, #1
 802f676:	d101      	bne.n	802f67c <HAL_PCD_Start+0x1c>
 802f678:	2302      	movs	r3, #2
 802f67a:	e020      	b.n	802f6be <HAL_PCD_Start+0x5e>
 802f67c:	687b      	ldr	r3, [r7, #4]
 802f67e:	2201      	movs	r2, #1
 802f680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 802f684:	687b      	ldr	r3, [r7, #4]
 802f686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f688:	2b01      	cmp	r3, #1
 802f68a:	d109      	bne.n	802f6a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 802f68c:	687b      	ldr	r3, [r7, #4]
 802f68e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 802f690:	2b01      	cmp	r3, #1
 802f692:	d005      	beq.n	802f6a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802f694:	68fb      	ldr	r3, [r7, #12]
 802f696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f698:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802f69c:	68fb      	ldr	r3, [r7, #12]
 802f69e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 802f6a0:	687b      	ldr	r3, [r7, #4]
 802f6a2:	681b      	ldr	r3, [r3, #0]
 802f6a4:	4618      	mov	r0, r3
 802f6a6:	f008 fa49 	bl	8037b3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 802f6aa:	687b      	ldr	r3, [r7, #4]
 802f6ac:	681b      	ldr	r3, [r3, #0]
 802f6ae:	4618      	mov	r0, r3
 802f6b0:	f009 fbfc 	bl	8038eac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 802f6b4:	687b      	ldr	r3, [r7, #4]
 802f6b6:	2200      	movs	r2, #0
 802f6b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 802f6bc:	2300      	movs	r3, #0
}
 802f6be:	4618      	mov	r0, r3
 802f6c0:	3710      	adds	r7, #16
 802f6c2:	46bd      	mov	sp, r7
 802f6c4:	bd80      	pop	{r7, pc}

0802f6c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 802f6c6:	b590      	push	{r4, r7, lr}
 802f6c8:	b08d      	sub	sp, #52	; 0x34
 802f6ca:	af00      	add	r7, sp, #0
 802f6cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802f6ce:	687b      	ldr	r3, [r7, #4]
 802f6d0:	681b      	ldr	r3, [r3, #0]
 802f6d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802f6d4:	6a3b      	ldr	r3, [r7, #32]
 802f6d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 802f6d8:	687b      	ldr	r3, [r7, #4]
 802f6da:	681b      	ldr	r3, [r3, #0]
 802f6dc:	4618      	mov	r0, r3
 802f6de:	f009 fcba 	bl	8039056 <USB_GetMode>
 802f6e2:	4603      	mov	r3, r0
 802f6e4:	2b00      	cmp	r3, #0
 802f6e6:	f040 84b7 	bne.w	8030058 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 802f6ea:	687b      	ldr	r3, [r7, #4]
 802f6ec:	681b      	ldr	r3, [r3, #0]
 802f6ee:	4618      	mov	r0, r3
 802f6f0:	f009 fc1e 	bl	8038f30 <USB_ReadInterrupts>
 802f6f4:	4603      	mov	r3, r0
 802f6f6:	2b00      	cmp	r3, #0
 802f6f8:	f000 84ad 	beq.w	8030056 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 802f6fc:	69fb      	ldr	r3, [r7, #28]
 802f6fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f702:	689b      	ldr	r3, [r3, #8]
 802f704:	0a1b      	lsrs	r3, r3, #8
 802f706:	f3c3 020d 	ubfx	r2, r3, #0, #14
 802f70a:	687b      	ldr	r3, [r7, #4]
 802f70c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 802f710:	687b      	ldr	r3, [r7, #4]
 802f712:	681b      	ldr	r3, [r3, #0]
 802f714:	4618      	mov	r0, r3
 802f716:	f009 fc0b 	bl	8038f30 <USB_ReadInterrupts>
 802f71a:	4603      	mov	r3, r0
 802f71c:	f003 0302 	and.w	r3, r3, #2
 802f720:	2b02      	cmp	r3, #2
 802f722:	d107      	bne.n	802f734 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 802f724:	687b      	ldr	r3, [r7, #4]
 802f726:	681b      	ldr	r3, [r3, #0]
 802f728:	695a      	ldr	r2, [r3, #20]
 802f72a:	687b      	ldr	r3, [r7, #4]
 802f72c:	681b      	ldr	r3, [r3, #0]
 802f72e:	f002 0202 	and.w	r2, r2, #2
 802f732:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 802f734:	687b      	ldr	r3, [r7, #4]
 802f736:	681b      	ldr	r3, [r3, #0]
 802f738:	4618      	mov	r0, r3
 802f73a:	f009 fbf9 	bl	8038f30 <USB_ReadInterrupts>
 802f73e:	4603      	mov	r3, r0
 802f740:	f003 0310 	and.w	r3, r3, #16
 802f744:	2b10      	cmp	r3, #16
 802f746:	d161      	bne.n	802f80c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802f748:	687b      	ldr	r3, [r7, #4]
 802f74a:	681b      	ldr	r3, [r3, #0]
 802f74c:	699a      	ldr	r2, [r3, #24]
 802f74e:	687b      	ldr	r3, [r7, #4]
 802f750:	681b      	ldr	r3, [r3, #0]
 802f752:	f022 0210 	bic.w	r2, r2, #16
 802f756:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 802f758:	6a3b      	ldr	r3, [r7, #32]
 802f75a:	6a1b      	ldr	r3, [r3, #32]
 802f75c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 802f75e:	69bb      	ldr	r3, [r7, #24]
 802f760:	f003 020f 	and.w	r2, r3, #15
 802f764:	4613      	mov	r3, r2
 802f766:	00db      	lsls	r3, r3, #3
 802f768:	4413      	add	r3, r2
 802f76a:	009b      	lsls	r3, r3, #2
 802f76c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802f770:	687a      	ldr	r2, [r7, #4]
 802f772:	4413      	add	r3, r2
 802f774:	3304      	adds	r3, #4
 802f776:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 802f778:	69bb      	ldr	r3, [r7, #24]
 802f77a:	0c5b      	lsrs	r3, r3, #17
 802f77c:	f003 030f 	and.w	r3, r3, #15
 802f780:	2b02      	cmp	r3, #2
 802f782:	d124      	bne.n	802f7ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 802f784:	69ba      	ldr	r2, [r7, #24]
 802f786:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 802f78a:	4013      	ands	r3, r2
 802f78c:	2b00      	cmp	r3, #0
 802f78e:	d035      	beq.n	802f7fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 802f790:	697b      	ldr	r3, [r7, #20]
 802f792:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 802f794:	69bb      	ldr	r3, [r7, #24]
 802f796:	091b      	lsrs	r3, r3, #4
 802f798:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 802f79a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f79e:	b29b      	uxth	r3, r3
 802f7a0:	461a      	mov	r2, r3
 802f7a2:	6a38      	ldr	r0, [r7, #32]
 802f7a4:	f009 fa30 	bl	8038c08 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f7a8:	697b      	ldr	r3, [r7, #20]
 802f7aa:	691a      	ldr	r2, [r3, #16]
 802f7ac:	69bb      	ldr	r3, [r7, #24]
 802f7ae:	091b      	lsrs	r3, r3, #4
 802f7b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f7b4:	441a      	add	r2, r3
 802f7b6:	697b      	ldr	r3, [r7, #20]
 802f7b8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f7ba:	697b      	ldr	r3, [r7, #20]
 802f7bc:	6a1a      	ldr	r2, [r3, #32]
 802f7be:	69bb      	ldr	r3, [r7, #24]
 802f7c0:	091b      	lsrs	r3, r3, #4
 802f7c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f7c6:	441a      	add	r2, r3
 802f7c8:	697b      	ldr	r3, [r7, #20]
 802f7ca:	621a      	str	r2, [r3, #32]
 802f7cc:	e016      	b.n	802f7fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 802f7ce:	69bb      	ldr	r3, [r7, #24]
 802f7d0:	0c5b      	lsrs	r3, r3, #17
 802f7d2:	f003 030f 	and.w	r3, r3, #15
 802f7d6:	2b06      	cmp	r3, #6
 802f7d8:	d110      	bne.n	802f7fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 802f7da:	687b      	ldr	r3, [r7, #4]
 802f7dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802f7e0:	2208      	movs	r2, #8
 802f7e2:	4619      	mov	r1, r3
 802f7e4:	6a38      	ldr	r0, [r7, #32]
 802f7e6:	f009 fa0f 	bl	8038c08 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f7ea:	697b      	ldr	r3, [r7, #20]
 802f7ec:	6a1a      	ldr	r2, [r3, #32]
 802f7ee:	69bb      	ldr	r3, [r7, #24]
 802f7f0:	091b      	lsrs	r3, r3, #4
 802f7f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f7f6:	441a      	add	r2, r3
 802f7f8:	697b      	ldr	r3, [r7, #20]
 802f7fa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802f7fc:	687b      	ldr	r3, [r7, #4]
 802f7fe:	681b      	ldr	r3, [r3, #0]
 802f800:	699a      	ldr	r2, [r3, #24]
 802f802:	687b      	ldr	r3, [r7, #4]
 802f804:	681b      	ldr	r3, [r3, #0]
 802f806:	f042 0210 	orr.w	r2, r2, #16
 802f80a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 802f80c:	687b      	ldr	r3, [r7, #4]
 802f80e:	681b      	ldr	r3, [r3, #0]
 802f810:	4618      	mov	r0, r3
 802f812:	f009 fb8d 	bl	8038f30 <USB_ReadInterrupts>
 802f816:	4603      	mov	r3, r0
 802f818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802f81c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 802f820:	f040 80a7 	bne.w	802f972 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 802f824:	2300      	movs	r3, #0
 802f826:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 802f828:	687b      	ldr	r3, [r7, #4]
 802f82a:	681b      	ldr	r3, [r3, #0]
 802f82c:	4618      	mov	r0, r3
 802f82e:	f009 fb92 	bl	8038f56 <USB_ReadDevAllOutEpInterrupt>
 802f832:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 802f834:	e099      	b.n	802f96a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 802f836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f838:	f003 0301 	and.w	r3, r3, #1
 802f83c:	2b00      	cmp	r3, #0
 802f83e:	f000 808e 	beq.w	802f95e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 802f842:	687b      	ldr	r3, [r7, #4]
 802f844:	681b      	ldr	r3, [r3, #0]
 802f846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802f848:	b2d2      	uxtb	r2, r2
 802f84a:	4611      	mov	r1, r2
 802f84c:	4618      	mov	r0, r3
 802f84e:	f009 fbb6 	bl	8038fbe <USB_ReadDevOutEPInterrupt>
 802f852:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 802f854:	693b      	ldr	r3, [r7, #16]
 802f856:	f003 0301 	and.w	r3, r3, #1
 802f85a:	2b00      	cmp	r3, #0
 802f85c:	d00c      	beq.n	802f878 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 802f85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f860:	015a      	lsls	r2, r3, #5
 802f862:	69fb      	ldr	r3, [r7, #28]
 802f864:	4413      	add	r3, r2
 802f866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f86a:	461a      	mov	r2, r3
 802f86c:	2301      	movs	r3, #1
 802f86e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 802f870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802f872:	6878      	ldr	r0, [r7, #4]
 802f874:	f000 fef0 	bl	8030658 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 802f878:	693b      	ldr	r3, [r7, #16]
 802f87a:	f003 0308 	and.w	r3, r3, #8
 802f87e:	2b00      	cmp	r3, #0
 802f880:	d00c      	beq.n	802f89c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 802f882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f884:	015a      	lsls	r2, r3, #5
 802f886:	69fb      	ldr	r3, [r7, #28]
 802f888:	4413      	add	r3, r2
 802f88a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f88e:	461a      	mov	r2, r3
 802f890:	2308      	movs	r3, #8
 802f892:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 802f894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802f896:	6878      	ldr	r0, [r7, #4]
 802f898:	f000 ffc6 	bl	8030828 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 802f89c:	693b      	ldr	r3, [r7, #16]
 802f89e:	f003 0310 	and.w	r3, r3, #16
 802f8a2:	2b00      	cmp	r3, #0
 802f8a4:	d008      	beq.n	802f8b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 802f8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f8a8:	015a      	lsls	r2, r3, #5
 802f8aa:	69fb      	ldr	r3, [r7, #28]
 802f8ac:	4413      	add	r3, r2
 802f8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f8b2:	461a      	mov	r2, r3
 802f8b4:	2310      	movs	r3, #16
 802f8b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 802f8b8:	693b      	ldr	r3, [r7, #16]
 802f8ba:	f003 0302 	and.w	r3, r3, #2
 802f8be:	2b00      	cmp	r3, #0
 802f8c0:	d030      	beq.n	802f924 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 802f8c2:	6a3b      	ldr	r3, [r7, #32]
 802f8c4:	695b      	ldr	r3, [r3, #20]
 802f8c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802f8ca:	2b80      	cmp	r3, #128	; 0x80
 802f8cc:	d109      	bne.n	802f8e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 802f8ce:	69fb      	ldr	r3, [r7, #28]
 802f8d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f8d4:	685b      	ldr	r3, [r3, #4]
 802f8d6:	69fa      	ldr	r2, [r7, #28]
 802f8d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802f8dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802f8e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 802f8e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802f8e4:	4613      	mov	r3, r2
 802f8e6:	00db      	lsls	r3, r3, #3
 802f8e8:	4413      	add	r3, r2
 802f8ea:	009b      	lsls	r3, r3, #2
 802f8ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802f8f0:	687a      	ldr	r2, [r7, #4]
 802f8f2:	4413      	add	r3, r2
 802f8f4:	3304      	adds	r3, #4
 802f8f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 802f8f8:	697b      	ldr	r3, [r7, #20]
 802f8fa:	78db      	ldrb	r3, [r3, #3]
 802f8fc:	2b01      	cmp	r3, #1
 802f8fe:	d108      	bne.n	802f912 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 802f900:	697b      	ldr	r3, [r7, #20]
 802f902:	2200      	movs	r2, #0
 802f904:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 802f906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f908:	b2db      	uxtb	r3, r3
 802f90a:	4619      	mov	r1, r3
 802f90c:	6878      	ldr	r0, [r7, #4]
 802f90e:	f00b fef7 	bl	803b700 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 802f912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f914:	015a      	lsls	r2, r3, #5
 802f916:	69fb      	ldr	r3, [r7, #28]
 802f918:	4413      	add	r3, r2
 802f91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f91e:	461a      	mov	r2, r3
 802f920:	2302      	movs	r3, #2
 802f922:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 802f924:	693b      	ldr	r3, [r7, #16]
 802f926:	f003 0320 	and.w	r3, r3, #32
 802f92a:	2b00      	cmp	r3, #0
 802f92c:	d008      	beq.n	802f940 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 802f92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f930:	015a      	lsls	r2, r3, #5
 802f932:	69fb      	ldr	r3, [r7, #28]
 802f934:	4413      	add	r3, r2
 802f936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f93a:	461a      	mov	r2, r3
 802f93c:	2320      	movs	r3, #32
 802f93e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 802f940:	693b      	ldr	r3, [r7, #16]
 802f942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802f946:	2b00      	cmp	r3, #0
 802f948:	d009      	beq.n	802f95e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 802f94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f94c:	015a      	lsls	r2, r3, #5
 802f94e:	69fb      	ldr	r3, [r7, #28]
 802f950:	4413      	add	r3, r2
 802f952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802f956:	461a      	mov	r2, r3
 802f958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802f95c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 802f95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f960:	3301      	adds	r3, #1
 802f962:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802f964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f966:	085b      	lsrs	r3, r3, #1
 802f968:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 802f96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f96c:	2b00      	cmp	r3, #0
 802f96e:	f47f af62 	bne.w	802f836 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 802f972:	687b      	ldr	r3, [r7, #4]
 802f974:	681b      	ldr	r3, [r3, #0]
 802f976:	4618      	mov	r0, r3
 802f978:	f009 fada 	bl	8038f30 <USB_ReadInterrupts>
 802f97c:	4603      	mov	r3, r0
 802f97e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802f982:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802f986:	f040 80db 	bne.w	802fb40 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 802f98a:	687b      	ldr	r3, [r7, #4]
 802f98c:	681b      	ldr	r3, [r3, #0]
 802f98e:	4618      	mov	r0, r3
 802f990:	f009 fafb 	bl	8038f8a <USB_ReadDevAllInEpInterrupt>
 802f994:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 802f996:	2300      	movs	r3, #0
 802f998:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 802f99a:	e0cd      	b.n	802fb38 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 802f99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802f99e:	f003 0301 	and.w	r3, r3, #1
 802f9a2:	2b00      	cmp	r3, #0
 802f9a4:	f000 80c2 	beq.w	802fb2c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 802f9a8:	687b      	ldr	r3, [r7, #4]
 802f9aa:	681b      	ldr	r3, [r3, #0]
 802f9ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802f9ae:	b2d2      	uxtb	r2, r2
 802f9b0:	4611      	mov	r1, r2
 802f9b2:	4618      	mov	r0, r3
 802f9b4:	f009 fb21 	bl	8038ffa <USB_ReadDevInEPInterrupt>
 802f9b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 802f9ba:	693b      	ldr	r3, [r7, #16]
 802f9bc:	f003 0301 	and.w	r3, r3, #1
 802f9c0:	2b00      	cmp	r3, #0
 802f9c2:	d057      	beq.n	802fa74 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 802f9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f9c6:	f003 030f 	and.w	r3, r3, #15
 802f9ca:	2201      	movs	r2, #1
 802f9cc:	fa02 f303 	lsl.w	r3, r2, r3
 802f9d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 802f9d2:	69fb      	ldr	r3, [r7, #28]
 802f9d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f9d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802f9da:	68fb      	ldr	r3, [r7, #12]
 802f9dc:	43db      	mvns	r3, r3
 802f9de:	69f9      	ldr	r1, [r7, #28]
 802f9e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802f9e4:	4013      	ands	r3, r2
 802f9e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 802f9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802f9ea:	015a      	lsls	r2, r3, #5
 802f9ec:	69fb      	ldr	r3, [r7, #28]
 802f9ee:	4413      	add	r3, r2
 802f9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802f9f4:	461a      	mov	r2, r3
 802f9f6:	2301      	movs	r3, #1
 802f9f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 802f9fa:	687b      	ldr	r3, [r7, #4]
 802f9fc:	691b      	ldr	r3, [r3, #16]
 802f9fe:	2b01      	cmp	r3, #1
 802fa00:	d132      	bne.n	802fa68 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 802fa02:	6879      	ldr	r1, [r7, #4]
 802fa04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fa06:	4613      	mov	r3, r2
 802fa08:	00db      	lsls	r3, r3, #3
 802fa0a:	4413      	add	r3, r2
 802fa0c:	009b      	lsls	r3, r3, #2
 802fa0e:	440b      	add	r3, r1
 802fa10:	334c      	adds	r3, #76	; 0x4c
 802fa12:	6819      	ldr	r1, [r3, #0]
 802fa14:	6878      	ldr	r0, [r7, #4]
 802fa16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fa18:	4613      	mov	r3, r2
 802fa1a:	00db      	lsls	r3, r3, #3
 802fa1c:	4413      	add	r3, r2
 802fa1e:	009b      	lsls	r3, r3, #2
 802fa20:	4403      	add	r3, r0
 802fa22:	3348      	adds	r3, #72	; 0x48
 802fa24:	681b      	ldr	r3, [r3, #0]
 802fa26:	4419      	add	r1, r3
 802fa28:	6878      	ldr	r0, [r7, #4]
 802fa2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fa2c:	4613      	mov	r3, r2
 802fa2e:	00db      	lsls	r3, r3, #3
 802fa30:	4413      	add	r3, r2
 802fa32:	009b      	lsls	r3, r3, #2
 802fa34:	4403      	add	r3, r0
 802fa36:	334c      	adds	r3, #76	; 0x4c
 802fa38:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 802fa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa3c:	2b00      	cmp	r3, #0
 802fa3e:	d113      	bne.n	802fa68 <HAL_PCD_IRQHandler+0x3a2>
 802fa40:	6879      	ldr	r1, [r7, #4]
 802fa42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fa44:	4613      	mov	r3, r2
 802fa46:	00db      	lsls	r3, r3, #3
 802fa48:	4413      	add	r3, r2
 802fa4a:	009b      	lsls	r3, r3, #2
 802fa4c:	440b      	add	r3, r1
 802fa4e:	3354      	adds	r3, #84	; 0x54
 802fa50:	681b      	ldr	r3, [r3, #0]
 802fa52:	2b00      	cmp	r3, #0
 802fa54:	d108      	bne.n	802fa68 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 802fa56:	687b      	ldr	r3, [r7, #4]
 802fa58:	6818      	ldr	r0, [r3, #0]
 802fa5a:	687b      	ldr	r3, [r7, #4]
 802fa5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802fa60:	461a      	mov	r2, r3
 802fa62:	2101      	movs	r1, #1
 802fa64:	f009 fb2a 	bl	80390bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 802fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa6a:	b2db      	uxtb	r3, r3
 802fa6c:	4619      	mov	r1, r3
 802fa6e:	6878      	ldr	r0, [r7, #4]
 802fa70:	f00b fdc1 	bl	803b5f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 802fa74:	693b      	ldr	r3, [r7, #16]
 802fa76:	f003 0308 	and.w	r3, r3, #8
 802fa7a:	2b00      	cmp	r3, #0
 802fa7c:	d008      	beq.n	802fa90 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 802fa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa80:	015a      	lsls	r2, r3, #5
 802fa82:	69fb      	ldr	r3, [r7, #28]
 802fa84:	4413      	add	r3, r2
 802fa86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fa8a:	461a      	mov	r2, r3
 802fa8c:	2308      	movs	r3, #8
 802fa8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 802fa90:	693b      	ldr	r3, [r7, #16]
 802fa92:	f003 0310 	and.w	r3, r3, #16
 802fa96:	2b00      	cmp	r3, #0
 802fa98:	d008      	beq.n	802faac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 802fa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa9c:	015a      	lsls	r2, r3, #5
 802fa9e:	69fb      	ldr	r3, [r7, #28]
 802faa0:	4413      	add	r3, r2
 802faa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802faa6:	461a      	mov	r2, r3
 802faa8:	2310      	movs	r3, #16
 802faaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 802faac:	693b      	ldr	r3, [r7, #16]
 802faae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802fab2:	2b00      	cmp	r3, #0
 802fab4:	d008      	beq.n	802fac8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 802fab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fab8:	015a      	lsls	r2, r3, #5
 802faba:	69fb      	ldr	r3, [r7, #28]
 802fabc:	4413      	add	r3, r2
 802fabe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fac2:	461a      	mov	r2, r3
 802fac4:	2340      	movs	r3, #64	; 0x40
 802fac6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 802fac8:	693b      	ldr	r3, [r7, #16]
 802faca:	f003 0302 	and.w	r3, r3, #2
 802face:	2b00      	cmp	r3, #0
 802fad0:	d023      	beq.n	802fb1a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 802fad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fad4:	6a38      	ldr	r0, [r7, #32]
 802fad6:	f008 f9fd 	bl	8037ed4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 802fada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fadc:	4613      	mov	r3, r2
 802fade:	00db      	lsls	r3, r3, #3
 802fae0:	4413      	add	r3, r2
 802fae2:	009b      	lsls	r3, r3, #2
 802fae4:	3338      	adds	r3, #56	; 0x38
 802fae6:	687a      	ldr	r2, [r7, #4]
 802fae8:	4413      	add	r3, r2
 802faea:	3304      	adds	r3, #4
 802faec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 802faee:	697b      	ldr	r3, [r7, #20]
 802faf0:	78db      	ldrb	r3, [r3, #3]
 802faf2:	2b01      	cmp	r3, #1
 802faf4:	d108      	bne.n	802fb08 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 802faf6:	697b      	ldr	r3, [r7, #20]
 802faf8:	2200      	movs	r2, #0
 802fafa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 802fafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fafe:	b2db      	uxtb	r3, r3
 802fb00:	4619      	mov	r1, r3
 802fb02:	6878      	ldr	r0, [r7, #4]
 802fb04:	f00b fe0e 	bl	803b724 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 802fb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb0a:	015a      	lsls	r2, r3, #5
 802fb0c:	69fb      	ldr	r3, [r7, #28]
 802fb0e:	4413      	add	r3, r2
 802fb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fb14:	461a      	mov	r2, r3
 802fb16:	2302      	movs	r3, #2
 802fb18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 802fb1a:	693b      	ldr	r3, [r7, #16]
 802fb1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802fb20:	2b00      	cmp	r3, #0
 802fb22:	d003      	beq.n	802fb2c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 802fb24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fb26:	6878      	ldr	r0, [r7, #4]
 802fb28:	f000 fd08 	bl	803053c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 802fb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb2e:	3301      	adds	r3, #1
 802fb30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802fb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fb34:	085b      	lsrs	r3, r3, #1
 802fb36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 802fb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fb3a:	2b00      	cmp	r3, #0
 802fb3c:	f47f af2e 	bne.w	802f99c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 802fb40:	687b      	ldr	r3, [r7, #4]
 802fb42:	681b      	ldr	r3, [r3, #0]
 802fb44:	4618      	mov	r0, r3
 802fb46:	f009 f9f3 	bl	8038f30 <USB_ReadInterrupts>
 802fb4a:	4603      	mov	r3, r0
 802fb4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802fb50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802fb54:	d122      	bne.n	802fb9c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802fb56:	69fb      	ldr	r3, [r7, #28]
 802fb58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fb5c:	685b      	ldr	r3, [r3, #4]
 802fb5e:	69fa      	ldr	r2, [r7, #28]
 802fb60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fb64:	f023 0301 	bic.w	r3, r3, #1
 802fb68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 802fb6a:	687b      	ldr	r3, [r7, #4]
 802fb6c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802fb70:	2b01      	cmp	r3, #1
 802fb72:	d108      	bne.n	802fb86 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 802fb74:	687b      	ldr	r3, [r7, #4]
 802fb76:	2200      	movs	r2, #0
 802fb78:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 802fb7c:	2100      	movs	r1, #0
 802fb7e:	6878      	ldr	r0, [r7, #4]
 802fb80:	f000 ff14 	bl	80309ac <HAL_PCDEx_LPM_Callback>
 802fb84:	e002      	b.n	802fb8c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 802fb86:	6878      	ldr	r0, [r7, #4]
 802fb88:	f00b fdac 	bl	803b6e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 802fb8c:	687b      	ldr	r3, [r7, #4]
 802fb8e:	681b      	ldr	r3, [r3, #0]
 802fb90:	695a      	ldr	r2, [r3, #20]
 802fb92:	687b      	ldr	r3, [r7, #4]
 802fb94:	681b      	ldr	r3, [r3, #0]
 802fb96:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802fb9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 802fb9c:	687b      	ldr	r3, [r7, #4]
 802fb9e:	681b      	ldr	r3, [r3, #0]
 802fba0:	4618      	mov	r0, r3
 802fba2:	f009 f9c5 	bl	8038f30 <USB_ReadInterrupts>
 802fba6:	4603      	mov	r3, r0
 802fba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802fbac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802fbb0:	d112      	bne.n	802fbd8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 802fbb2:	69fb      	ldr	r3, [r7, #28]
 802fbb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fbb8:	689b      	ldr	r3, [r3, #8]
 802fbba:	f003 0301 	and.w	r3, r3, #1
 802fbbe:	2b01      	cmp	r3, #1
 802fbc0:	d102      	bne.n	802fbc8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802fbc2:	6878      	ldr	r0, [r7, #4]
 802fbc4:	f00b fd68 	bl	803b698 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 802fbc8:	687b      	ldr	r3, [r7, #4]
 802fbca:	681b      	ldr	r3, [r3, #0]
 802fbcc:	695a      	ldr	r2, [r3, #20]
 802fbce:	687b      	ldr	r3, [r7, #4]
 802fbd0:	681b      	ldr	r3, [r3, #0]
 802fbd2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 802fbd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 802fbd8:	687b      	ldr	r3, [r7, #4]
 802fbda:	681b      	ldr	r3, [r3, #0]
 802fbdc:	4618      	mov	r0, r3
 802fbde:	f009 f9a7 	bl	8038f30 <USB_ReadInterrupts>
 802fbe2:	4603      	mov	r3, r0
 802fbe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802fbe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802fbec:	d121      	bne.n	802fc32 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 802fbee:	687b      	ldr	r3, [r7, #4]
 802fbf0:	681b      	ldr	r3, [r3, #0]
 802fbf2:	695a      	ldr	r2, [r3, #20]
 802fbf4:	687b      	ldr	r3, [r7, #4]
 802fbf6:	681b      	ldr	r3, [r3, #0]
 802fbf8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 802fbfc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 802fbfe:	687b      	ldr	r3, [r7, #4]
 802fc00:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802fc04:	2b00      	cmp	r3, #0
 802fc06:	d111      	bne.n	802fc2c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 802fc08:	687b      	ldr	r3, [r7, #4]
 802fc0a:	2201      	movs	r2, #1
 802fc0c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 802fc10:	687b      	ldr	r3, [r7, #4]
 802fc12:	681b      	ldr	r3, [r3, #0]
 802fc14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802fc16:	089b      	lsrs	r3, r3, #2
 802fc18:	f003 020f 	and.w	r2, r3, #15
 802fc1c:	687b      	ldr	r3, [r7, #4]
 802fc1e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 802fc22:	2101      	movs	r1, #1
 802fc24:	6878      	ldr	r0, [r7, #4]
 802fc26:	f000 fec1 	bl	80309ac <HAL_PCDEx_LPM_Callback>
 802fc2a:	e002      	b.n	802fc32 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802fc2c:	6878      	ldr	r0, [r7, #4]
 802fc2e:	f00b fd33 	bl	803b698 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 802fc32:	687b      	ldr	r3, [r7, #4]
 802fc34:	681b      	ldr	r3, [r3, #0]
 802fc36:	4618      	mov	r0, r3
 802fc38:	f009 f97a 	bl	8038f30 <USB_ReadInterrupts>
 802fc3c:	4603      	mov	r3, r0
 802fc3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802fc42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802fc46:	f040 80b7 	bne.w	802fdb8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802fc4a:	69fb      	ldr	r3, [r7, #28]
 802fc4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fc50:	685b      	ldr	r3, [r3, #4]
 802fc52:	69fa      	ldr	r2, [r7, #28]
 802fc54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fc58:	f023 0301 	bic.w	r3, r3, #1
 802fc5c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 802fc5e:	687b      	ldr	r3, [r7, #4]
 802fc60:	681b      	ldr	r3, [r3, #0]
 802fc62:	2110      	movs	r1, #16
 802fc64:	4618      	mov	r0, r3
 802fc66:	f008 f935 	bl	8037ed4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802fc6a:	2300      	movs	r3, #0
 802fc6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802fc6e:	e046      	b.n	802fcfe <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 802fc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fc72:	015a      	lsls	r2, r3, #5
 802fc74:	69fb      	ldr	r3, [r7, #28]
 802fc76:	4413      	add	r3, r2
 802fc78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fc7c:	461a      	mov	r2, r3
 802fc7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802fc82:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802fc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fc86:	015a      	lsls	r2, r3, #5
 802fc88:	69fb      	ldr	r3, [r7, #28]
 802fc8a:	4413      	add	r3, r2
 802fc8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fc90:	681b      	ldr	r3, [r3, #0]
 802fc92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fc94:	0151      	lsls	r1, r2, #5
 802fc96:	69fa      	ldr	r2, [r7, #28]
 802fc98:	440a      	add	r2, r1
 802fc9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fc9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802fca2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 802fca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fca6:	015a      	lsls	r2, r3, #5
 802fca8:	69fb      	ldr	r3, [r7, #28]
 802fcaa:	4413      	add	r3, r2
 802fcac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fcb0:	461a      	mov	r2, r3
 802fcb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802fcb6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802fcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fcba:	015a      	lsls	r2, r3, #5
 802fcbc:	69fb      	ldr	r3, [r7, #28]
 802fcbe:	4413      	add	r3, r2
 802fcc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fcc4:	681b      	ldr	r3, [r3, #0]
 802fcc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fcc8:	0151      	lsls	r1, r2, #5
 802fcca:	69fa      	ldr	r2, [r7, #28]
 802fccc:	440a      	add	r2, r1
 802fcce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802fcd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802fcd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802fcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fcda:	015a      	lsls	r2, r3, #5
 802fcdc:	69fb      	ldr	r3, [r7, #28]
 802fcde:	4413      	add	r3, r2
 802fce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fce4:	681b      	ldr	r3, [r3, #0]
 802fce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fce8:	0151      	lsls	r1, r2, #5
 802fcea:	69fa      	ldr	r2, [r7, #28]
 802fcec:	440a      	add	r2, r1
 802fcee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802fcf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802fcf6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802fcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fcfa:	3301      	adds	r3, #1
 802fcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 802fcfe:	687b      	ldr	r3, [r7, #4]
 802fd00:	685b      	ldr	r3, [r3, #4]
 802fd02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fd04:	429a      	cmp	r2, r3
 802fd06:	d3b3      	bcc.n	802fc70 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 802fd08:	69fb      	ldr	r3, [r7, #28]
 802fd0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fd0e:	69db      	ldr	r3, [r3, #28]
 802fd10:	69fa      	ldr	r2, [r7, #28]
 802fd12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fd16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 802fd1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 802fd1c:	687b      	ldr	r3, [r7, #4]
 802fd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802fd20:	2b00      	cmp	r3, #0
 802fd22:	d016      	beq.n	802fd52 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 802fd24:	69fb      	ldr	r3, [r7, #28]
 802fd26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fd2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802fd2e:	69fa      	ldr	r2, [r7, #28]
 802fd30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fd34:	f043 030b 	orr.w	r3, r3, #11
 802fd38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 802fd3c:	69fb      	ldr	r3, [r7, #28]
 802fd3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fd42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802fd44:	69fa      	ldr	r2, [r7, #28]
 802fd46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fd4a:	f043 030b 	orr.w	r3, r3, #11
 802fd4e:	6453      	str	r3, [r2, #68]	; 0x44
 802fd50:	e015      	b.n	802fd7e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 802fd52:	69fb      	ldr	r3, [r7, #28]
 802fd54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fd58:	695a      	ldr	r2, [r3, #20]
 802fd5a:	69fb      	ldr	r3, [r7, #28]
 802fd5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fd60:	4619      	mov	r1, r3
 802fd62:	f242 032b 	movw	r3, #8235	; 0x202b
 802fd66:	4313      	orrs	r3, r2
 802fd68:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 802fd6a:	69fb      	ldr	r3, [r7, #28]
 802fd6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fd70:	691b      	ldr	r3, [r3, #16]
 802fd72:	69fa      	ldr	r2, [r7, #28]
 802fd74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fd78:	f043 030b 	orr.w	r3, r3, #11
 802fd7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 802fd7e:	69fb      	ldr	r3, [r7, #28]
 802fd80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fd84:	681b      	ldr	r3, [r3, #0]
 802fd86:	69fa      	ldr	r2, [r7, #28]
 802fd88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fd8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802fd90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 802fd92:	687b      	ldr	r3, [r7, #4]
 802fd94:	6818      	ldr	r0, [r3, #0]
 802fd96:	687b      	ldr	r3, [r7, #4]
 802fd98:	691b      	ldr	r3, [r3, #16]
 802fd9a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 802fd9c:	687b      	ldr	r3, [r7, #4]
 802fd9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 802fda2:	461a      	mov	r2, r3
 802fda4:	f009 f98a 	bl	80390bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 802fda8:	687b      	ldr	r3, [r7, #4]
 802fdaa:	681b      	ldr	r3, [r3, #0]
 802fdac:	695a      	ldr	r2, [r3, #20]
 802fdae:	687b      	ldr	r3, [r7, #4]
 802fdb0:	681b      	ldr	r3, [r3, #0]
 802fdb2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 802fdb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 802fdb8:	687b      	ldr	r3, [r7, #4]
 802fdba:	681b      	ldr	r3, [r3, #0]
 802fdbc:	4618      	mov	r0, r3
 802fdbe:	f009 f8b7 	bl	8038f30 <USB_ReadInterrupts>
 802fdc2:	4603      	mov	r3, r0
 802fdc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802fdc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802fdcc:	d124      	bne.n	802fe18 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 802fdce:	687b      	ldr	r3, [r7, #4]
 802fdd0:	681b      	ldr	r3, [r3, #0]
 802fdd2:	4618      	mov	r0, r3
 802fdd4:	f009 f94e 	bl	8039074 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 802fdd8:	687b      	ldr	r3, [r7, #4]
 802fdda:	681b      	ldr	r3, [r3, #0]
 802fddc:	4618      	mov	r0, r3
 802fdde:	f008 f8f6 	bl	8037fce <USB_GetDevSpeed>
 802fde2:	4603      	mov	r3, r0
 802fde4:	461a      	mov	r2, r3
 802fde6:	687b      	ldr	r3, [r7, #4]
 802fde8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 802fdea:	687b      	ldr	r3, [r7, #4]
 802fdec:	681c      	ldr	r4, [r3, #0]
 802fdee:	f001 fd91 	bl	8031914 <HAL_RCC_GetHCLKFreq>
 802fdf2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 802fdf4:	687b      	ldr	r3, [r7, #4]
 802fdf6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 802fdf8:	b2db      	uxtb	r3, r3
 802fdfa:	461a      	mov	r2, r3
 802fdfc:	4620      	mov	r0, r4
 802fdfe:	f007 fdfb 	bl	80379f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 802fe02:	6878      	ldr	r0, [r7, #4]
 802fe04:	f00b fc1f 	bl	803b646 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 802fe08:	687b      	ldr	r3, [r7, #4]
 802fe0a:	681b      	ldr	r3, [r3, #0]
 802fe0c:	695a      	ldr	r2, [r3, #20]
 802fe0e:	687b      	ldr	r3, [r7, #4]
 802fe10:	681b      	ldr	r3, [r3, #0]
 802fe12:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 802fe16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 802fe18:	687b      	ldr	r3, [r7, #4]
 802fe1a:	681b      	ldr	r3, [r3, #0]
 802fe1c:	4618      	mov	r0, r3
 802fe1e:	f009 f887 	bl	8038f30 <USB_ReadInterrupts>
 802fe22:	4603      	mov	r3, r0
 802fe24:	f003 0308 	and.w	r3, r3, #8
 802fe28:	2b08      	cmp	r3, #8
 802fe2a:	d10a      	bne.n	802fe42 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 802fe2c:	6878      	ldr	r0, [r7, #4]
 802fe2e:	f00b fbfc 	bl	803b62a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 802fe32:	687b      	ldr	r3, [r7, #4]
 802fe34:	681b      	ldr	r3, [r3, #0]
 802fe36:	695a      	ldr	r2, [r3, #20]
 802fe38:	687b      	ldr	r3, [r7, #4]
 802fe3a:	681b      	ldr	r3, [r3, #0]
 802fe3c:	f002 0208 	and.w	r2, r2, #8
 802fe40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 802fe42:	687b      	ldr	r3, [r7, #4]
 802fe44:	681b      	ldr	r3, [r3, #0]
 802fe46:	4618      	mov	r0, r3
 802fe48:	f009 f872 	bl	8038f30 <USB_ReadInterrupts>
 802fe4c:	4603      	mov	r3, r0
 802fe4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802fe52:	2b80      	cmp	r3, #128	; 0x80
 802fe54:	d122      	bne.n	802fe9c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 802fe56:	6a3b      	ldr	r3, [r7, #32]
 802fe58:	699b      	ldr	r3, [r3, #24]
 802fe5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802fe5e:	6a3b      	ldr	r3, [r7, #32]
 802fe60:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802fe62:	2301      	movs	r3, #1
 802fe64:	627b      	str	r3, [r7, #36]	; 0x24
 802fe66:	e014      	b.n	802fe92 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 802fe68:	6879      	ldr	r1, [r7, #4]
 802fe6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fe6c:	4613      	mov	r3, r2
 802fe6e:	00db      	lsls	r3, r3, #3
 802fe70:	4413      	add	r3, r2
 802fe72:	009b      	lsls	r3, r3, #2
 802fe74:	440b      	add	r3, r1
 802fe76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 802fe7a:	781b      	ldrb	r3, [r3, #0]
 802fe7c:	2b01      	cmp	r3, #1
 802fe7e:	d105      	bne.n	802fe8c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 802fe80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fe82:	b2db      	uxtb	r3, r3
 802fe84:	4619      	mov	r1, r3
 802fe86:	6878      	ldr	r0, [r7, #4]
 802fe88:	f000 fb27 	bl	80304da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802fe8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fe8e:	3301      	adds	r3, #1
 802fe90:	627b      	str	r3, [r7, #36]	; 0x24
 802fe92:	687b      	ldr	r3, [r7, #4]
 802fe94:	685b      	ldr	r3, [r3, #4]
 802fe96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fe98:	429a      	cmp	r2, r3
 802fe9a:	d3e5      	bcc.n	802fe68 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 802fe9c:	687b      	ldr	r3, [r7, #4]
 802fe9e:	681b      	ldr	r3, [r3, #0]
 802fea0:	4618      	mov	r0, r3
 802fea2:	f009 f845 	bl	8038f30 <USB_ReadInterrupts>
 802fea6:	4603      	mov	r3, r0
 802fea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802feac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802feb0:	d13b      	bne.n	802ff2a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802feb2:	2301      	movs	r3, #1
 802feb4:	627b      	str	r3, [r7, #36]	; 0x24
 802feb6:	e02b      	b.n	802ff10 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 802feb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802feba:	015a      	lsls	r2, r3, #5
 802febc:	69fb      	ldr	r3, [r7, #28]
 802febe:	4413      	add	r3, r2
 802fec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fec4:	681b      	ldr	r3, [r3, #0]
 802fec6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 802fec8:	6879      	ldr	r1, [r7, #4]
 802feca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fecc:	4613      	mov	r3, r2
 802fece:	00db      	lsls	r3, r3, #3
 802fed0:	4413      	add	r3, r2
 802fed2:	009b      	lsls	r3, r3, #2
 802fed4:	440b      	add	r3, r1
 802fed6:	3340      	adds	r3, #64	; 0x40
 802fed8:	781b      	ldrb	r3, [r3, #0]
 802feda:	2b01      	cmp	r3, #1
 802fedc:	d115      	bne.n	802ff0a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 802fede:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 802fee0:	2b00      	cmp	r3, #0
 802fee2:	da12      	bge.n	802ff0a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 802fee4:	6879      	ldr	r1, [r7, #4]
 802fee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fee8:	4613      	mov	r3, r2
 802feea:	00db      	lsls	r3, r3, #3
 802feec:	4413      	add	r3, r2
 802feee:	009b      	lsls	r3, r3, #2
 802fef0:	440b      	add	r3, r1
 802fef2:	333f      	adds	r3, #63	; 0x3f
 802fef4:	2201      	movs	r2, #1
 802fef6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 802fef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fefa:	b2db      	uxtb	r3, r3
 802fefc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802ff00:	b2db      	uxtb	r3, r3
 802ff02:	4619      	mov	r1, r3
 802ff04:	6878      	ldr	r0, [r7, #4]
 802ff06:	f000 fae8 	bl	80304da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802ff0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ff0c:	3301      	adds	r3, #1
 802ff0e:	627b      	str	r3, [r7, #36]	; 0x24
 802ff10:	687b      	ldr	r3, [r7, #4]
 802ff12:	685b      	ldr	r3, [r3, #4]
 802ff14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ff16:	429a      	cmp	r2, r3
 802ff18:	d3ce      	bcc.n	802feb8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 802ff1a:	687b      	ldr	r3, [r7, #4]
 802ff1c:	681b      	ldr	r3, [r3, #0]
 802ff1e:	695a      	ldr	r2, [r3, #20]
 802ff20:	687b      	ldr	r3, [r7, #4]
 802ff22:	681b      	ldr	r3, [r3, #0]
 802ff24:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 802ff28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 802ff2a:	687b      	ldr	r3, [r7, #4]
 802ff2c:	681b      	ldr	r3, [r3, #0]
 802ff2e:	4618      	mov	r0, r3
 802ff30:	f008 fffe 	bl	8038f30 <USB_ReadInterrupts>
 802ff34:	4603      	mov	r3, r0
 802ff36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802ff3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802ff3e:	d155      	bne.n	802ffec <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802ff40:	2301      	movs	r3, #1
 802ff42:	627b      	str	r3, [r7, #36]	; 0x24
 802ff44:	e045      	b.n	802ffd2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 802ff46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ff48:	015a      	lsls	r2, r3, #5
 802ff4a:	69fb      	ldr	r3, [r7, #28]
 802ff4c:	4413      	add	r3, r2
 802ff4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ff52:	681b      	ldr	r3, [r3, #0]
 802ff54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 802ff56:	6879      	ldr	r1, [r7, #4]
 802ff58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ff5a:	4613      	mov	r3, r2
 802ff5c:	00db      	lsls	r3, r3, #3
 802ff5e:	4413      	add	r3, r2
 802ff60:	009b      	lsls	r3, r3, #2
 802ff62:	440b      	add	r3, r1
 802ff64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 802ff68:	781b      	ldrb	r3, [r3, #0]
 802ff6a:	2b01      	cmp	r3, #1
 802ff6c:	d12e      	bne.n	802ffcc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 802ff6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 802ff70:	2b00      	cmp	r3, #0
 802ff72:	da2b      	bge.n	802ffcc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 802ff74:	69bb      	ldr	r3, [r7, #24]
 802ff76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 802ff7a:	687b      	ldr	r3, [r7, #4]
 802ff7c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 802ff80:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 802ff84:	429a      	cmp	r2, r3
 802ff86:	d121      	bne.n	802ffcc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 802ff88:	6879      	ldr	r1, [r7, #4]
 802ff8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ff8c:	4613      	mov	r3, r2
 802ff8e:	00db      	lsls	r3, r3, #3
 802ff90:	4413      	add	r3, r2
 802ff92:	009b      	lsls	r3, r3, #2
 802ff94:	440b      	add	r3, r1
 802ff96:	f203 237f 	addw	r3, r3, #639	; 0x27f
 802ff9a:	2201      	movs	r2, #1
 802ff9c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 802ff9e:	6a3b      	ldr	r3, [r7, #32]
 802ffa0:	699b      	ldr	r3, [r3, #24]
 802ffa2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 802ffa6:	6a3b      	ldr	r3, [r7, #32]
 802ffa8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 802ffaa:	6a3b      	ldr	r3, [r7, #32]
 802ffac:	695b      	ldr	r3, [r3, #20]
 802ffae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802ffb2:	2b00      	cmp	r3, #0
 802ffb4:	d10a      	bne.n	802ffcc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 802ffb6:	69fb      	ldr	r3, [r7, #28]
 802ffb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ffbc:	685b      	ldr	r3, [r3, #4]
 802ffbe:	69fa      	ldr	r2, [r7, #28]
 802ffc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ffc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802ffc8:	6053      	str	r3, [r2, #4]
            break;
 802ffca:	e007      	b.n	802ffdc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802ffcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ffce:	3301      	adds	r3, #1
 802ffd0:	627b      	str	r3, [r7, #36]	; 0x24
 802ffd2:	687b      	ldr	r3, [r7, #4]
 802ffd4:	685b      	ldr	r3, [r3, #4]
 802ffd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ffd8:	429a      	cmp	r2, r3
 802ffda:	d3b4      	bcc.n	802ff46 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 802ffdc:	687b      	ldr	r3, [r7, #4]
 802ffde:	681b      	ldr	r3, [r3, #0]
 802ffe0:	695a      	ldr	r2, [r3, #20]
 802ffe2:	687b      	ldr	r3, [r7, #4]
 802ffe4:	681b      	ldr	r3, [r3, #0]
 802ffe6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 802ffea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 802ffec:	687b      	ldr	r3, [r7, #4]
 802ffee:	681b      	ldr	r3, [r3, #0]
 802fff0:	4618      	mov	r0, r3
 802fff2:	f008 ff9d 	bl	8038f30 <USB_ReadInterrupts>
 802fff6:	4603      	mov	r3, r0
 802fff8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802fffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8030000:	d10a      	bne.n	8030018 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8030002:	6878      	ldr	r0, [r7, #4]
 8030004:	f00b fba0 	bl	803b748 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8030008:	687b      	ldr	r3, [r7, #4]
 803000a:	681b      	ldr	r3, [r3, #0]
 803000c:	695a      	ldr	r2, [r3, #20]
 803000e:	687b      	ldr	r3, [r7, #4]
 8030010:	681b      	ldr	r3, [r3, #0]
 8030012:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8030016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8030018:	687b      	ldr	r3, [r7, #4]
 803001a:	681b      	ldr	r3, [r3, #0]
 803001c:	4618      	mov	r0, r3
 803001e:	f008 ff87 	bl	8038f30 <USB_ReadInterrupts>
 8030022:	4603      	mov	r3, r0
 8030024:	f003 0304 	and.w	r3, r3, #4
 8030028:	2b04      	cmp	r3, #4
 803002a:	d115      	bne.n	8030058 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 803002c:	687b      	ldr	r3, [r7, #4]
 803002e:	681b      	ldr	r3, [r3, #0]
 8030030:	685b      	ldr	r3, [r3, #4]
 8030032:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8030034:	69bb      	ldr	r3, [r7, #24]
 8030036:	f003 0304 	and.w	r3, r3, #4
 803003a:	2b00      	cmp	r3, #0
 803003c:	d002      	beq.n	8030044 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 803003e:	6878      	ldr	r0, [r7, #4]
 8030040:	f00b fb90 	bl	803b764 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8030044:	687b      	ldr	r3, [r7, #4]
 8030046:	681b      	ldr	r3, [r3, #0]
 8030048:	6859      	ldr	r1, [r3, #4]
 803004a:	687b      	ldr	r3, [r7, #4]
 803004c:	681b      	ldr	r3, [r3, #0]
 803004e:	69ba      	ldr	r2, [r7, #24]
 8030050:	430a      	orrs	r2, r1
 8030052:	605a      	str	r2, [r3, #4]
 8030054:	e000      	b.n	8030058 <HAL_PCD_IRQHandler+0x992>
      return;
 8030056:	bf00      	nop
    }
  }
}
 8030058:	3734      	adds	r7, #52	; 0x34
 803005a:	46bd      	mov	sp, r7
 803005c:	bd90      	pop	{r4, r7, pc}

0803005e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 803005e:	b580      	push	{r7, lr}
 8030060:	b082      	sub	sp, #8
 8030062:	af00      	add	r7, sp, #0
 8030064:	6078      	str	r0, [r7, #4]
 8030066:	460b      	mov	r3, r1
 8030068:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 803006a:	687b      	ldr	r3, [r7, #4]
 803006c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8030070:	2b01      	cmp	r3, #1
 8030072:	d101      	bne.n	8030078 <HAL_PCD_SetAddress+0x1a>
 8030074:	2302      	movs	r3, #2
 8030076:	e013      	b.n	80300a0 <HAL_PCD_SetAddress+0x42>
 8030078:	687b      	ldr	r3, [r7, #4]
 803007a:	2201      	movs	r2, #1
 803007c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8030080:	687b      	ldr	r3, [r7, #4]
 8030082:	78fa      	ldrb	r2, [r7, #3]
 8030084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8030088:	687b      	ldr	r3, [r7, #4]
 803008a:	681b      	ldr	r3, [r3, #0]
 803008c:	78fa      	ldrb	r2, [r7, #3]
 803008e:	4611      	mov	r1, r2
 8030090:	4618      	mov	r0, r3
 8030092:	f008 fee5 	bl	8038e60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8030096:	687b      	ldr	r3, [r7, #4]
 8030098:	2200      	movs	r2, #0
 803009a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 803009e:	2300      	movs	r3, #0
}
 80300a0:	4618      	mov	r0, r3
 80300a2:	3708      	adds	r7, #8
 80300a4:	46bd      	mov	sp, r7
 80300a6:	bd80      	pop	{r7, pc}

080300a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80300a8:	b580      	push	{r7, lr}
 80300aa:	b084      	sub	sp, #16
 80300ac:	af00      	add	r7, sp, #0
 80300ae:	6078      	str	r0, [r7, #4]
 80300b0:	4608      	mov	r0, r1
 80300b2:	4611      	mov	r1, r2
 80300b4:	461a      	mov	r2, r3
 80300b6:	4603      	mov	r3, r0
 80300b8:	70fb      	strb	r3, [r7, #3]
 80300ba:	460b      	mov	r3, r1
 80300bc:	803b      	strh	r3, [r7, #0]
 80300be:	4613      	mov	r3, r2
 80300c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80300c2:	2300      	movs	r3, #0
 80300c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80300c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80300ca:	2b00      	cmp	r3, #0
 80300cc:	da0f      	bge.n	80300ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80300ce:	78fb      	ldrb	r3, [r7, #3]
 80300d0:	f003 020f 	and.w	r2, r3, #15
 80300d4:	4613      	mov	r3, r2
 80300d6:	00db      	lsls	r3, r3, #3
 80300d8:	4413      	add	r3, r2
 80300da:	009b      	lsls	r3, r3, #2
 80300dc:	3338      	adds	r3, #56	; 0x38
 80300de:	687a      	ldr	r2, [r7, #4]
 80300e0:	4413      	add	r3, r2
 80300e2:	3304      	adds	r3, #4
 80300e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80300e6:	68fb      	ldr	r3, [r7, #12]
 80300e8:	2201      	movs	r2, #1
 80300ea:	705a      	strb	r2, [r3, #1]
 80300ec:	e00f      	b.n	803010e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80300ee:	78fb      	ldrb	r3, [r7, #3]
 80300f0:	f003 020f 	and.w	r2, r3, #15
 80300f4:	4613      	mov	r3, r2
 80300f6:	00db      	lsls	r3, r3, #3
 80300f8:	4413      	add	r3, r2
 80300fa:	009b      	lsls	r3, r3, #2
 80300fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030100:	687a      	ldr	r2, [r7, #4]
 8030102:	4413      	add	r3, r2
 8030104:	3304      	adds	r3, #4
 8030106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8030108:	68fb      	ldr	r3, [r7, #12]
 803010a:	2200      	movs	r2, #0
 803010c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 803010e:	78fb      	ldrb	r3, [r7, #3]
 8030110:	f003 030f 	and.w	r3, r3, #15
 8030114:	b2da      	uxtb	r2, r3
 8030116:	68fb      	ldr	r3, [r7, #12]
 8030118:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 803011a:	883a      	ldrh	r2, [r7, #0]
 803011c:	68fb      	ldr	r3, [r7, #12]
 803011e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8030120:	68fb      	ldr	r3, [r7, #12]
 8030122:	78ba      	ldrb	r2, [r7, #2]
 8030124:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8030126:	68fb      	ldr	r3, [r7, #12]
 8030128:	785b      	ldrb	r3, [r3, #1]
 803012a:	2b00      	cmp	r3, #0
 803012c:	d004      	beq.n	8030138 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 803012e:	68fb      	ldr	r3, [r7, #12]
 8030130:	781b      	ldrb	r3, [r3, #0]
 8030132:	b29a      	uxth	r2, r3
 8030134:	68fb      	ldr	r3, [r7, #12]
 8030136:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8030138:	78bb      	ldrb	r3, [r7, #2]
 803013a:	2b02      	cmp	r3, #2
 803013c:	d102      	bne.n	8030144 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 803013e:	68fb      	ldr	r3, [r7, #12]
 8030140:	2200      	movs	r2, #0
 8030142:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8030144:	687b      	ldr	r3, [r7, #4]
 8030146:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 803014a:	2b01      	cmp	r3, #1
 803014c:	d101      	bne.n	8030152 <HAL_PCD_EP_Open+0xaa>
 803014e:	2302      	movs	r3, #2
 8030150:	e00e      	b.n	8030170 <HAL_PCD_EP_Open+0xc8>
 8030152:	687b      	ldr	r3, [r7, #4]
 8030154:	2201      	movs	r2, #1
 8030156:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 803015a:	687b      	ldr	r3, [r7, #4]
 803015c:	681b      	ldr	r3, [r3, #0]
 803015e:	68f9      	ldr	r1, [r7, #12]
 8030160:	4618      	mov	r0, r3
 8030162:	f007 ff59 	bl	8038018 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8030166:	687b      	ldr	r3, [r7, #4]
 8030168:	2200      	movs	r2, #0
 803016a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 803016e:	7afb      	ldrb	r3, [r7, #11]
}
 8030170:	4618      	mov	r0, r3
 8030172:	3710      	adds	r7, #16
 8030174:	46bd      	mov	sp, r7
 8030176:	bd80      	pop	{r7, pc}

08030178 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8030178:	b580      	push	{r7, lr}
 803017a:	b084      	sub	sp, #16
 803017c:	af00      	add	r7, sp, #0
 803017e:	6078      	str	r0, [r7, #4]
 8030180:	460b      	mov	r3, r1
 8030182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8030184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8030188:	2b00      	cmp	r3, #0
 803018a:	da0f      	bge.n	80301ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 803018c:	78fb      	ldrb	r3, [r7, #3]
 803018e:	f003 020f 	and.w	r2, r3, #15
 8030192:	4613      	mov	r3, r2
 8030194:	00db      	lsls	r3, r3, #3
 8030196:	4413      	add	r3, r2
 8030198:	009b      	lsls	r3, r3, #2
 803019a:	3338      	adds	r3, #56	; 0x38
 803019c:	687a      	ldr	r2, [r7, #4]
 803019e:	4413      	add	r3, r2
 80301a0:	3304      	adds	r3, #4
 80301a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80301a4:	68fb      	ldr	r3, [r7, #12]
 80301a6:	2201      	movs	r2, #1
 80301a8:	705a      	strb	r2, [r3, #1]
 80301aa:	e00f      	b.n	80301cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80301ac:	78fb      	ldrb	r3, [r7, #3]
 80301ae:	f003 020f 	and.w	r2, r3, #15
 80301b2:	4613      	mov	r3, r2
 80301b4:	00db      	lsls	r3, r3, #3
 80301b6:	4413      	add	r3, r2
 80301b8:	009b      	lsls	r3, r3, #2
 80301ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80301be:	687a      	ldr	r2, [r7, #4]
 80301c0:	4413      	add	r3, r2
 80301c2:	3304      	adds	r3, #4
 80301c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80301c6:	68fb      	ldr	r3, [r7, #12]
 80301c8:	2200      	movs	r2, #0
 80301ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80301cc:	78fb      	ldrb	r3, [r7, #3]
 80301ce:	f003 030f 	and.w	r3, r3, #15
 80301d2:	b2da      	uxtb	r2, r3
 80301d4:	68fb      	ldr	r3, [r7, #12]
 80301d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80301d8:	687b      	ldr	r3, [r7, #4]
 80301da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80301de:	2b01      	cmp	r3, #1
 80301e0:	d101      	bne.n	80301e6 <HAL_PCD_EP_Close+0x6e>
 80301e2:	2302      	movs	r3, #2
 80301e4:	e00e      	b.n	8030204 <HAL_PCD_EP_Close+0x8c>
 80301e6:	687b      	ldr	r3, [r7, #4]
 80301e8:	2201      	movs	r2, #1
 80301ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80301ee:	687b      	ldr	r3, [r7, #4]
 80301f0:	681b      	ldr	r3, [r3, #0]
 80301f2:	68f9      	ldr	r1, [r7, #12]
 80301f4:	4618      	mov	r0, r3
 80301f6:	f007 ff97 	bl	8038128 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80301fa:	687b      	ldr	r3, [r7, #4]
 80301fc:	2200      	movs	r2, #0
 80301fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8030202:	2300      	movs	r3, #0
}
 8030204:	4618      	mov	r0, r3
 8030206:	3710      	adds	r7, #16
 8030208:	46bd      	mov	sp, r7
 803020a:	bd80      	pop	{r7, pc}

0803020c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 803020c:	b580      	push	{r7, lr}
 803020e:	b086      	sub	sp, #24
 8030210:	af00      	add	r7, sp, #0
 8030212:	60f8      	str	r0, [r7, #12]
 8030214:	607a      	str	r2, [r7, #4]
 8030216:	603b      	str	r3, [r7, #0]
 8030218:	460b      	mov	r3, r1
 803021a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 803021c:	7afb      	ldrb	r3, [r7, #11]
 803021e:	f003 020f 	and.w	r2, r3, #15
 8030222:	4613      	mov	r3, r2
 8030224:	00db      	lsls	r3, r3, #3
 8030226:	4413      	add	r3, r2
 8030228:	009b      	lsls	r3, r3, #2
 803022a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803022e:	68fa      	ldr	r2, [r7, #12]
 8030230:	4413      	add	r3, r2
 8030232:	3304      	adds	r3, #4
 8030234:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8030236:	697b      	ldr	r3, [r7, #20]
 8030238:	687a      	ldr	r2, [r7, #4]
 803023a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 803023c:	697b      	ldr	r3, [r7, #20]
 803023e:	683a      	ldr	r2, [r7, #0]
 8030240:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8030242:	697b      	ldr	r3, [r7, #20]
 8030244:	2200      	movs	r2, #0
 8030246:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8030248:	697b      	ldr	r3, [r7, #20]
 803024a:	2200      	movs	r2, #0
 803024c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 803024e:	7afb      	ldrb	r3, [r7, #11]
 8030250:	f003 030f 	and.w	r3, r3, #15
 8030254:	b2da      	uxtb	r2, r3
 8030256:	697b      	ldr	r3, [r7, #20]
 8030258:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 803025a:	68fb      	ldr	r3, [r7, #12]
 803025c:	691b      	ldr	r3, [r3, #16]
 803025e:	2b01      	cmp	r3, #1
 8030260:	d102      	bne.n	8030268 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8030262:	687a      	ldr	r2, [r7, #4]
 8030264:	697b      	ldr	r3, [r7, #20]
 8030266:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8030268:	7afb      	ldrb	r3, [r7, #11]
 803026a:	f003 030f 	and.w	r3, r3, #15
 803026e:	2b00      	cmp	r3, #0
 8030270:	d109      	bne.n	8030286 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8030272:	68fb      	ldr	r3, [r7, #12]
 8030274:	6818      	ldr	r0, [r3, #0]
 8030276:	68fb      	ldr	r3, [r7, #12]
 8030278:	691b      	ldr	r3, [r3, #16]
 803027a:	b2db      	uxtb	r3, r3
 803027c:	461a      	mov	r2, r3
 803027e:	6979      	ldr	r1, [r7, #20]
 8030280:	f008 fa7e 	bl	8038780 <USB_EP0StartXfer>
 8030284:	e008      	b.n	8030298 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8030286:	68fb      	ldr	r3, [r7, #12]
 8030288:	6818      	ldr	r0, [r3, #0]
 803028a:	68fb      	ldr	r3, [r7, #12]
 803028c:	691b      	ldr	r3, [r3, #16]
 803028e:	b2db      	uxtb	r3, r3
 8030290:	461a      	mov	r2, r3
 8030292:	6979      	ldr	r1, [r7, #20]
 8030294:	f008 f824 	bl	80382e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8030298:	2300      	movs	r3, #0
}
 803029a:	4618      	mov	r0, r3
 803029c:	3718      	adds	r7, #24
 803029e:	46bd      	mov	sp, r7
 80302a0:	bd80      	pop	{r7, pc}

080302a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80302a2:	b480      	push	{r7}
 80302a4:	b083      	sub	sp, #12
 80302a6:	af00      	add	r7, sp, #0
 80302a8:	6078      	str	r0, [r7, #4]
 80302aa:	460b      	mov	r3, r1
 80302ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80302ae:	78fb      	ldrb	r3, [r7, #3]
 80302b0:	f003 020f 	and.w	r2, r3, #15
 80302b4:	6879      	ldr	r1, [r7, #4]
 80302b6:	4613      	mov	r3, r2
 80302b8:	00db      	lsls	r3, r3, #3
 80302ba:	4413      	add	r3, r2
 80302bc:	009b      	lsls	r3, r3, #2
 80302be:	440b      	add	r3, r1
 80302c0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80302c4:	681b      	ldr	r3, [r3, #0]
}
 80302c6:	4618      	mov	r0, r3
 80302c8:	370c      	adds	r7, #12
 80302ca:	46bd      	mov	sp, r7
 80302cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80302d0:	4770      	bx	lr

080302d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80302d2:	b580      	push	{r7, lr}
 80302d4:	b086      	sub	sp, #24
 80302d6:	af00      	add	r7, sp, #0
 80302d8:	60f8      	str	r0, [r7, #12]
 80302da:	607a      	str	r2, [r7, #4]
 80302dc:	603b      	str	r3, [r7, #0]
 80302de:	460b      	mov	r3, r1
 80302e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80302e2:	7afb      	ldrb	r3, [r7, #11]
 80302e4:	f003 020f 	and.w	r2, r3, #15
 80302e8:	4613      	mov	r3, r2
 80302ea:	00db      	lsls	r3, r3, #3
 80302ec:	4413      	add	r3, r2
 80302ee:	009b      	lsls	r3, r3, #2
 80302f0:	3338      	adds	r3, #56	; 0x38
 80302f2:	68fa      	ldr	r2, [r7, #12]
 80302f4:	4413      	add	r3, r2
 80302f6:	3304      	adds	r3, #4
 80302f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80302fa:	697b      	ldr	r3, [r7, #20]
 80302fc:	687a      	ldr	r2, [r7, #4]
 80302fe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8030300:	697b      	ldr	r3, [r7, #20]
 8030302:	683a      	ldr	r2, [r7, #0]
 8030304:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8030306:	697b      	ldr	r3, [r7, #20]
 8030308:	2200      	movs	r2, #0
 803030a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 803030c:	697b      	ldr	r3, [r7, #20]
 803030e:	2201      	movs	r2, #1
 8030310:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8030312:	7afb      	ldrb	r3, [r7, #11]
 8030314:	f003 030f 	and.w	r3, r3, #15
 8030318:	b2da      	uxtb	r2, r3
 803031a:	697b      	ldr	r3, [r7, #20]
 803031c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 803031e:	68fb      	ldr	r3, [r7, #12]
 8030320:	691b      	ldr	r3, [r3, #16]
 8030322:	2b01      	cmp	r3, #1
 8030324:	d102      	bne.n	803032c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8030326:	687a      	ldr	r2, [r7, #4]
 8030328:	697b      	ldr	r3, [r7, #20]
 803032a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 803032c:	7afb      	ldrb	r3, [r7, #11]
 803032e:	f003 030f 	and.w	r3, r3, #15
 8030332:	2b00      	cmp	r3, #0
 8030334:	d109      	bne.n	803034a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8030336:	68fb      	ldr	r3, [r7, #12]
 8030338:	6818      	ldr	r0, [r3, #0]
 803033a:	68fb      	ldr	r3, [r7, #12]
 803033c:	691b      	ldr	r3, [r3, #16]
 803033e:	b2db      	uxtb	r3, r3
 8030340:	461a      	mov	r2, r3
 8030342:	6979      	ldr	r1, [r7, #20]
 8030344:	f008 fa1c 	bl	8038780 <USB_EP0StartXfer>
 8030348:	e008      	b.n	803035c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 803034a:	68fb      	ldr	r3, [r7, #12]
 803034c:	6818      	ldr	r0, [r3, #0]
 803034e:	68fb      	ldr	r3, [r7, #12]
 8030350:	691b      	ldr	r3, [r3, #16]
 8030352:	b2db      	uxtb	r3, r3
 8030354:	461a      	mov	r2, r3
 8030356:	6979      	ldr	r1, [r7, #20]
 8030358:	f007 ffc2 	bl	80382e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 803035c:	2300      	movs	r3, #0
}
 803035e:	4618      	mov	r0, r3
 8030360:	3718      	adds	r7, #24
 8030362:	46bd      	mov	sp, r7
 8030364:	bd80      	pop	{r7, pc}

08030366 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8030366:	b580      	push	{r7, lr}
 8030368:	b084      	sub	sp, #16
 803036a:	af00      	add	r7, sp, #0
 803036c:	6078      	str	r0, [r7, #4]
 803036e:	460b      	mov	r3, r1
 8030370:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8030372:	78fb      	ldrb	r3, [r7, #3]
 8030374:	f003 020f 	and.w	r2, r3, #15
 8030378:	687b      	ldr	r3, [r7, #4]
 803037a:	685b      	ldr	r3, [r3, #4]
 803037c:	429a      	cmp	r2, r3
 803037e:	d901      	bls.n	8030384 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8030380:	2301      	movs	r3, #1
 8030382:	e050      	b.n	8030426 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8030384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8030388:	2b00      	cmp	r3, #0
 803038a:	da0f      	bge.n	80303ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 803038c:	78fb      	ldrb	r3, [r7, #3]
 803038e:	f003 020f 	and.w	r2, r3, #15
 8030392:	4613      	mov	r3, r2
 8030394:	00db      	lsls	r3, r3, #3
 8030396:	4413      	add	r3, r2
 8030398:	009b      	lsls	r3, r3, #2
 803039a:	3338      	adds	r3, #56	; 0x38
 803039c:	687a      	ldr	r2, [r7, #4]
 803039e:	4413      	add	r3, r2
 80303a0:	3304      	adds	r3, #4
 80303a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80303a4:	68fb      	ldr	r3, [r7, #12]
 80303a6:	2201      	movs	r2, #1
 80303a8:	705a      	strb	r2, [r3, #1]
 80303aa:	e00d      	b.n	80303c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80303ac:	78fa      	ldrb	r2, [r7, #3]
 80303ae:	4613      	mov	r3, r2
 80303b0:	00db      	lsls	r3, r3, #3
 80303b2:	4413      	add	r3, r2
 80303b4:	009b      	lsls	r3, r3, #2
 80303b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80303ba:	687a      	ldr	r2, [r7, #4]
 80303bc:	4413      	add	r3, r2
 80303be:	3304      	adds	r3, #4
 80303c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80303c2:	68fb      	ldr	r3, [r7, #12]
 80303c4:	2200      	movs	r2, #0
 80303c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80303c8:	68fb      	ldr	r3, [r7, #12]
 80303ca:	2201      	movs	r2, #1
 80303cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80303ce:	78fb      	ldrb	r3, [r7, #3]
 80303d0:	f003 030f 	and.w	r3, r3, #15
 80303d4:	b2da      	uxtb	r2, r3
 80303d6:	68fb      	ldr	r3, [r7, #12]
 80303d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80303da:	687b      	ldr	r3, [r7, #4]
 80303dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80303e0:	2b01      	cmp	r3, #1
 80303e2:	d101      	bne.n	80303e8 <HAL_PCD_EP_SetStall+0x82>
 80303e4:	2302      	movs	r3, #2
 80303e6:	e01e      	b.n	8030426 <HAL_PCD_EP_SetStall+0xc0>
 80303e8:	687b      	ldr	r3, [r7, #4]
 80303ea:	2201      	movs	r2, #1
 80303ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80303f0:	687b      	ldr	r3, [r7, #4]
 80303f2:	681b      	ldr	r3, [r3, #0]
 80303f4:	68f9      	ldr	r1, [r7, #12]
 80303f6:	4618      	mov	r0, r3
 80303f8:	f008 fc5e 	bl	8038cb8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80303fc:	78fb      	ldrb	r3, [r7, #3]
 80303fe:	f003 030f 	and.w	r3, r3, #15
 8030402:	2b00      	cmp	r3, #0
 8030404:	d10a      	bne.n	803041c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8030406:	687b      	ldr	r3, [r7, #4]
 8030408:	6818      	ldr	r0, [r3, #0]
 803040a:	687b      	ldr	r3, [r7, #4]
 803040c:	691b      	ldr	r3, [r3, #16]
 803040e:	b2d9      	uxtb	r1, r3
 8030410:	687b      	ldr	r3, [r7, #4]
 8030412:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030416:	461a      	mov	r2, r3
 8030418:	f008 fe50 	bl	80390bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 803041c:	687b      	ldr	r3, [r7, #4]
 803041e:	2200      	movs	r2, #0
 8030420:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8030424:	2300      	movs	r3, #0
}
 8030426:	4618      	mov	r0, r3
 8030428:	3710      	adds	r7, #16
 803042a:	46bd      	mov	sp, r7
 803042c:	bd80      	pop	{r7, pc}

0803042e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 803042e:	b580      	push	{r7, lr}
 8030430:	b084      	sub	sp, #16
 8030432:	af00      	add	r7, sp, #0
 8030434:	6078      	str	r0, [r7, #4]
 8030436:	460b      	mov	r3, r1
 8030438:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 803043a:	78fb      	ldrb	r3, [r7, #3]
 803043c:	f003 020f 	and.w	r2, r3, #15
 8030440:	687b      	ldr	r3, [r7, #4]
 8030442:	685b      	ldr	r3, [r3, #4]
 8030444:	429a      	cmp	r2, r3
 8030446:	d901      	bls.n	803044c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8030448:	2301      	movs	r3, #1
 803044a:	e042      	b.n	80304d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 803044c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8030450:	2b00      	cmp	r3, #0
 8030452:	da0f      	bge.n	8030474 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8030454:	78fb      	ldrb	r3, [r7, #3]
 8030456:	f003 020f 	and.w	r2, r3, #15
 803045a:	4613      	mov	r3, r2
 803045c:	00db      	lsls	r3, r3, #3
 803045e:	4413      	add	r3, r2
 8030460:	009b      	lsls	r3, r3, #2
 8030462:	3338      	adds	r3, #56	; 0x38
 8030464:	687a      	ldr	r2, [r7, #4]
 8030466:	4413      	add	r3, r2
 8030468:	3304      	adds	r3, #4
 803046a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 803046c:	68fb      	ldr	r3, [r7, #12]
 803046e:	2201      	movs	r2, #1
 8030470:	705a      	strb	r2, [r3, #1]
 8030472:	e00f      	b.n	8030494 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8030474:	78fb      	ldrb	r3, [r7, #3]
 8030476:	f003 020f 	and.w	r2, r3, #15
 803047a:	4613      	mov	r3, r2
 803047c:	00db      	lsls	r3, r3, #3
 803047e:	4413      	add	r3, r2
 8030480:	009b      	lsls	r3, r3, #2
 8030482:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030486:	687a      	ldr	r2, [r7, #4]
 8030488:	4413      	add	r3, r2
 803048a:	3304      	adds	r3, #4
 803048c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 803048e:	68fb      	ldr	r3, [r7, #12]
 8030490:	2200      	movs	r2, #0
 8030492:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8030494:	68fb      	ldr	r3, [r7, #12]
 8030496:	2200      	movs	r2, #0
 8030498:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 803049a:	78fb      	ldrb	r3, [r7, #3]
 803049c:	f003 030f 	and.w	r3, r3, #15
 80304a0:	b2da      	uxtb	r2, r3
 80304a2:	68fb      	ldr	r3, [r7, #12]
 80304a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80304a6:	687b      	ldr	r3, [r7, #4]
 80304a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80304ac:	2b01      	cmp	r3, #1
 80304ae:	d101      	bne.n	80304b4 <HAL_PCD_EP_ClrStall+0x86>
 80304b0:	2302      	movs	r3, #2
 80304b2:	e00e      	b.n	80304d2 <HAL_PCD_EP_ClrStall+0xa4>
 80304b4:	687b      	ldr	r3, [r7, #4]
 80304b6:	2201      	movs	r2, #1
 80304b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80304bc:	687b      	ldr	r3, [r7, #4]
 80304be:	681b      	ldr	r3, [r3, #0]
 80304c0:	68f9      	ldr	r1, [r7, #12]
 80304c2:	4618      	mov	r0, r3
 80304c4:	f008 fc66 	bl	8038d94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80304c8:	687b      	ldr	r3, [r7, #4]
 80304ca:	2200      	movs	r2, #0
 80304cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80304d0:	2300      	movs	r3, #0
}
 80304d2:	4618      	mov	r0, r3
 80304d4:	3710      	adds	r7, #16
 80304d6:	46bd      	mov	sp, r7
 80304d8:	bd80      	pop	{r7, pc}

080304da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80304da:	b580      	push	{r7, lr}
 80304dc:	b084      	sub	sp, #16
 80304de:	af00      	add	r7, sp, #0
 80304e0:	6078      	str	r0, [r7, #4]
 80304e2:	460b      	mov	r3, r1
 80304e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80304e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80304ea:	2b00      	cmp	r3, #0
 80304ec:	da0c      	bge.n	8030508 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80304ee:	78fb      	ldrb	r3, [r7, #3]
 80304f0:	f003 020f 	and.w	r2, r3, #15
 80304f4:	4613      	mov	r3, r2
 80304f6:	00db      	lsls	r3, r3, #3
 80304f8:	4413      	add	r3, r2
 80304fa:	009b      	lsls	r3, r3, #2
 80304fc:	3338      	adds	r3, #56	; 0x38
 80304fe:	687a      	ldr	r2, [r7, #4]
 8030500:	4413      	add	r3, r2
 8030502:	3304      	adds	r3, #4
 8030504:	60fb      	str	r3, [r7, #12]
 8030506:	e00c      	b.n	8030522 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8030508:	78fb      	ldrb	r3, [r7, #3]
 803050a:	f003 020f 	and.w	r2, r3, #15
 803050e:	4613      	mov	r3, r2
 8030510:	00db      	lsls	r3, r3, #3
 8030512:	4413      	add	r3, r2
 8030514:	009b      	lsls	r3, r3, #2
 8030516:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803051a:	687a      	ldr	r2, [r7, #4]
 803051c:	4413      	add	r3, r2
 803051e:	3304      	adds	r3, #4
 8030520:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8030522:	687b      	ldr	r3, [r7, #4]
 8030524:	681b      	ldr	r3, [r3, #0]
 8030526:	68f9      	ldr	r1, [r7, #12]
 8030528:	4618      	mov	r0, r3
 803052a:	f008 fa85 	bl	8038a38 <USB_EPStopXfer>
 803052e:	4603      	mov	r3, r0
 8030530:	72fb      	strb	r3, [r7, #11]

  return ret;
 8030532:	7afb      	ldrb	r3, [r7, #11]
}
 8030534:	4618      	mov	r0, r3
 8030536:	3710      	adds	r7, #16
 8030538:	46bd      	mov	sp, r7
 803053a:	bd80      	pop	{r7, pc}

0803053c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 803053c:	b580      	push	{r7, lr}
 803053e:	b08a      	sub	sp, #40	; 0x28
 8030540:	af02      	add	r7, sp, #8
 8030542:	6078      	str	r0, [r7, #4]
 8030544:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030546:	687b      	ldr	r3, [r7, #4]
 8030548:	681b      	ldr	r3, [r3, #0]
 803054a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803054c:	697b      	ldr	r3, [r7, #20]
 803054e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8030550:	683a      	ldr	r2, [r7, #0]
 8030552:	4613      	mov	r3, r2
 8030554:	00db      	lsls	r3, r3, #3
 8030556:	4413      	add	r3, r2
 8030558:	009b      	lsls	r3, r3, #2
 803055a:	3338      	adds	r3, #56	; 0x38
 803055c:	687a      	ldr	r2, [r7, #4]
 803055e:	4413      	add	r3, r2
 8030560:	3304      	adds	r3, #4
 8030562:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8030564:	68fb      	ldr	r3, [r7, #12]
 8030566:	6a1a      	ldr	r2, [r3, #32]
 8030568:	68fb      	ldr	r3, [r7, #12]
 803056a:	699b      	ldr	r3, [r3, #24]
 803056c:	429a      	cmp	r2, r3
 803056e:	d901      	bls.n	8030574 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8030570:	2301      	movs	r3, #1
 8030572:	e06c      	b.n	803064e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8030574:	68fb      	ldr	r3, [r7, #12]
 8030576:	699a      	ldr	r2, [r3, #24]
 8030578:	68fb      	ldr	r3, [r7, #12]
 803057a:	6a1b      	ldr	r3, [r3, #32]
 803057c:	1ad3      	subs	r3, r2, r3
 803057e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8030580:	68fb      	ldr	r3, [r7, #12]
 8030582:	68db      	ldr	r3, [r3, #12]
 8030584:	69fa      	ldr	r2, [r7, #28]
 8030586:	429a      	cmp	r2, r3
 8030588:	d902      	bls.n	8030590 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 803058a:	68fb      	ldr	r3, [r7, #12]
 803058c:	68db      	ldr	r3, [r3, #12]
 803058e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8030590:	69fb      	ldr	r3, [r7, #28]
 8030592:	3303      	adds	r3, #3
 8030594:	089b      	lsrs	r3, r3, #2
 8030596:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8030598:	e02b      	b.n	80305f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 803059a:	68fb      	ldr	r3, [r7, #12]
 803059c:	699a      	ldr	r2, [r3, #24]
 803059e:	68fb      	ldr	r3, [r7, #12]
 80305a0:	6a1b      	ldr	r3, [r3, #32]
 80305a2:	1ad3      	subs	r3, r2, r3
 80305a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80305a6:	68fb      	ldr	r3, [r7, #12]
 80305a8:	68db      	ldr	r3, [r3, #12]
 80305aa:	69fa      	ldr	r2, [r7, #28]
 80305ac:	429a      	cmp	r2, r3
 80305ae:	d902      	bls.n	80305b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80305b0:	68fb      	ldr	r3, [r7, #12]
 80305b2:	68db      	ldr	r3, [r3, #12]
 80305b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80305b6:	69fb      	ldr	r3, [r7, #28]
 80305b8:	3303      	adds	r3, #3
 80305ba:	089b      	lsrs	r3, r3, #2
 80305bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80305be:	68fb      	ldr	r3, [r7, #12]
 80305c0:	6919      	ldr	r1, [r3, #16]
 80305c2:	683b      	ldr	r3, [r7, #0]
 80305c4:	b2da      	uxtb	r2, r3
 80305c6:	69fb      	ldr	r3, [r7, #28]
 80305c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80305ca:	687b      	ldr	r3, [r7, #4]
 80305cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80305ce:	b2db      	uxtb	r3, r3
 80305d0:	9300      	str	r3, [sp, #0]
 80305d2:	4603      	mov	r3, r0
 80305d4:	6978      	ldr	r0, [r7, #20]
 80305d6:	f008 fad9 	bl	8038b8c <USB_WritePacket>

    ep->xfer_buff  += len;
 80305da:	68fb      	ldr	r3, [r7, #12]
 80305dc:	691a      	ldr	r2, [r3, #16]
 80305de:	69fb      	ldr	r3, [r7, #28]
 80305e0:	441a      	add	r2, r3
 80305e2:	68fb      	ldr	r3, [r7, #12]
 80305e4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80305e6:	68fb      	ldr	r3, [r7, #12]
 80305e8:	6a1a      	ldr	r2, [r3, #32]
 80305ea:	69fb      	ldr	r3, [r7, #28]
 80305ec:	441a      	add	r2, r3
 80305ee:	68fb      	ldr	r3, [r7, #12]
 80305f0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80305f2:	683b      	ldr	r3, [r7, #0]
 80305f4:	015a      	lsls	r2, r3, #5
 80305f6:	693b      	ldr	r3, [r7, #16]
 80305f8:	4413      	add	r3, r2
 80305fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80305fe:	699b      	ldr	r3, [r3, #24]
 8030600:	b29b      	uxth	r3, r3
 8030602:	69ba      	ldr	r2, [r7, #24]
 8030604:	429a      	cmp	r2, r3
 8030606:	d809      	bhi.n	803061c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8030608:	68fb      	ldr	r3, [r7, #12]
 803060a:	6a1a      	ldr	r2, [r3, #32]
 803060c:	68fb      	ldr	r3, [r7, #12]
 803060e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8030610:	429a      	cmp	r2, r3
 8030612:	d203      	bcs.n	803061c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8030614:	68fb      	ldr	r3, [r7, #12]
 8030616:	699b      	ldr	r3, [r3, #24]
 8030618:	2b00      	cmp	r3, #0
 803061a:	d1be      	bne.n	803059a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 803061c:	68fb      	ldr	r3, [r7, #12]
 803061e:	699a      	ldr	r2, [r3, #24]
 8030620:	68fb      	ldr	r3, [r7, #12]
 8030622:	6a1b      	ldr	r3, [r3, #32]
 8030624:	429a      	cmp	r2, r3
 8030626:	d811      	bhi.n	803064c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8030628:	683b      	ldr	r3, [r7, #0]
 803062a:	f003 030f 	and.w	r3, r3, #15
 803062e:	2201      	movs	r2, #1
 8030630:	fa02 f303 	lsl.w	r3, r2, r3
 8030634:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8030636:	693b      	ldr	r3, [r7, #16]
 8030638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803063c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803063e:	68bb      	ldr	r3, [r7, #8]
 8030640:	43db      	mvns	r3, r3
 8030642:	6939      	ldr	r1, [r7, #16]
 8030644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8030648:	4013      	ands	r3, r2
 803064a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 803064c:	2300      	movs	r3, #0
}
 803064e:	4618      	mov	r0, r3
 8030650:	3720      	adds	r7, #32
 8030652:	46bd      	mov	sp, r7
 8030654:	bd80      	pop	{r7, pc}
	...

08030658 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8030658:	b580      	push	{r7, lr}
 803065a:	b088      	sub	sp, #32
 803065c:	af00      	add	r7, sp, #0
 803065e:	6078      	str	r0, [r7, #4]
 8030660:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030662:	687b      	ldr	r3, [r7, #4]
 8030664:	681b      	ldr	r3, [r3, #0]
 8030666:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030668:	69fb      	ldr	r3, [r7, #28]
 803066a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 803066c:	69fb      	ldr	r3, [r7, #28]
 803066e:	333c      	adds	r3, #60	; 0x3c
 8030670:	3304      	adds	r3, #4
 8030672:	681b      	ldr	r3, [r3, #0]
 8030674:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8030676:	683b      	ldr	r3, [r7, #0]
 8030678:	015a      	lsls	r2, r3, #5
 803067a:	69bb      	ldr	r3, [r7, #24]
 803067c:	4413      	add	r3, r2
 803067e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030682:	689b      	ldr	r3, [r3, #8]
 8030684:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8030686:	687b      	ldr	r3, [r7, #4]
 8030688:	691b      	ldr	r3, [r3, #16]
 803068a:	2b01      	cmp	r3, #1
 803068c:	d17b      	bne.n	8030786 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 803068e:	693b      	ldr	r3, [r7, #16]
 8030690:	f003 0308 	and.w	r3, r3, #8
 8030694:	2b00      	cmp	r3, #0
 8030696:	d015      	beq.n	80306c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030698:	697b      	ldr	r3, [r7, #20]
 803069a:	4a61      	ldr	r2, [pc, #388]	; (8030820 <PCD_EP_OutXfrComplete_int+0x1c8>)
 803069c:	4293      	cmp	r3, r2
 803069e:	f240 80b9 	bls.w	8030814 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80306a2:	693b      	ldr	r3, [r7, #16]
 80306a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80306a8:	2b00      	cmp	r3, #0
 80306aa:	f000 80b3 	beq.w	8030814 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80306ae:	683b      	ldr	r3, [r7, #0]
 80306b0:	015a      	lsls	r2, r3, #5
 80306b2:	69bb      	ldr	r3, [r7, #24]
 80306b4:	4413      	add	r3, r2
 80306b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80306ba:	461a      	mov	r2, r3
 80306bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80306c0:	6093      	str	r3, [r2, #8]
 80306c2:	e0a7      	b.n	8030814 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80306c4:	693b      	ldr	r3, [r7, #16]
 80306c6:	f003 0320 	and.w	r3, r3, #32
 80306ca:	2b00      	cmp	r3, #0
 80306cc:	d009      	beq.n	80306e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80306ce:	683b      	ldr	r3, [r7, #0]
 80306d0:	015a      	lsls	r2, r3, #5
 80306d2:	69bb      	ldr	r3, [r7, #24]
 80306d4:	4413      	add	r3, r2
 80306d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80306da:	461a      	mov	r2, r3
 80306dc:	2320      	movs	r3, #32
 80306de:	6093      	str	r3, [r2, #8]
 80306e0:	e098      	b.n	8030814 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80306e2:	693b      	ldr	r3, [r7, #16]
 80306e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80306e8:	2b00      	cmp	r3, #0
 80306ea:	f040 8093 	bne.w	8030814 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80306ee:	697b      	ldr	r3, [r7, #20]
 80306f0:	4a4b      	ldr	r2, [pc, #300]	; (8030820 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80306f2:	4293      	cmp	r3, r2
 80306f4:	d90f      	bls.n	8030716 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80306f6:	693b      	ldr	r3, [r7, #16]
 80306f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80306fc:	2b00      	cmp	r3, #0
 80306fe:	d00a      	beq.n	8030716 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8030700:	683b      	ldr	r3, [r7, #0]
 8030702:	015a      	lsls	r2, r3, #5
 8030704:	69bb      	ldr	r3, [r7, #24]
 8030706:	4413      	add	r3, r2
 8030708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803070c:	461a      	mov	r2, r3
 803070e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8030712:	6093      	str	r3, [r2, #8]
 8030714:	e07e      	b.n	8030814 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8030716:	683a      	ldr	r2, [r7, #0]
 8030718:	4613      	mov	r3, r2
 803071a:	00db      	lsls	r3, r3, #3
 803071c:	4413      	add	r3, r2
 803071e:	009b      	lsls	r3, r3, #2
 8030720:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030724:	687a      	ldr	r2, [r7, #4]
 8030726:	4413      	add	r3, r2
 8030728:	3304      	adds	r3, #4
 803072a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 803072c:	68fb      	ldr	r3, [r7, #12]
 803072e:	69da      	ldr	r2, [r3, #28]
 8030730:	683b      	ldr	r3, [r7, #0]
 8030732:	0159      	lsls	r1, r3, #5
 8030734:	69bb      	ldr	r3, [r7, #24]
 8030736:	440b      	add	r3, r1
 8030738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803073c:	691b      	ldr	r3, [r3, #16]
 803073e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8030742:	1ad2      	subs	r2, r2, r3
 8030744:	68fb      	ldr	r3, [r7, #12]
 8030746:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8030748:	683b      	ldr	r3, [r7, #0]
 803074a:	2b00      	cmp	r3, #0
 803074c:	d114      	bne.n	8030778 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 803074e:	68fb      	ldr	r3, [r7, #12]
 8030750:	699b      	ldr	r3, [r3, #24]
 8030752:	2b00      	cmp	r3, #0
 8030754:	d109      	bne.n	803076a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8030756:	687b      	ldr	r3, [r7, #4]
 8030758:	6818      	ldr	r0, [r3, #0]
 803075a:	687b      	ldr	r3, [r7, #4]
 803075c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030760:	461a      	mov	r2, r3
 8030762:	2101      	movs	r1, #1
 8030764:	f008 fcaa 	bl	80390bc <USB_EP0_OutStart>
 8030768:	e006      	b.n	8030778 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 803076a:	68fb      	ldr	r3, [r7, #12]
 803076c:	691a      	ldr	r2, [r3, #16]
 803076e:	68fb      	ldr	r3, [r7, #12]
 8030770:	6a1b      	ldr	r3, [r3, #32]
 8030772:	441a      	add	r2, r3
 8030774:	68fb      	ldr	r3, [r7, #12]
 8030776:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8030778:	683b      	ldr	r3, [r7, #0]
 803077a:	b2db      	uxtb	r3, r3
 803077c:	4619      	mov	r1, r3
 803077e:	6878      	ldr	r0, [r7, #4]
 8030780:	f00a ff1e 	bl	803b5c0 <HAL_PCD_DataOutStageCallback>
 8030784:	e046      	b.n	8030814 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8030786:	697b      	ldr	r3, [r7, #20]
 8030788:	4a26      	ldr	r2, [pc, #152]	; (8030824 <PCD_EP_OutXfrComplete_int+0x1cc>)
 803078a:	4293      	cmp	r3, r2
 803078c:	d124      	bne.n	80307d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 803078e:	693b      	ldr	r3, [r7, #16]
 8030790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8030794:	2b00      	cmp	r3, #0
 8030796:	d00a      	beq.n	80307ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8030798:	683b      	ldr	r3, [r7, #0]
 803079a:	015a      	lsls	r2, r3, #5
 803079c:	69bb      	ldr	r3, [r7, #24]
 803079e:	4413      	add	r3, r2
 80307a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80307a4:	461a      	mov	r2, r3
 80307a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80307aa:	6093      	str	r3, [r2, #8]
 80307ac:	e032      	b.n	8030814 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80307ae:	693b      	ldr	r3, [r7, #16]
 80307b0:	f003 0320 	and.w	r3, r3, #32
 80307b4:	2b00      	cmp	r3, #0
 80307b6:	d008      	beq.n	80307ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80307b8:	683b      	ldr	r3, [r7, #0]
 80307ba:	015a      	lsls	r2, r3, #5
 80307bc:	69bb      	ldr	r3, [r7, #24]
 80307be:	4413      	add	r3, r2
 80307c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80307c4:	461a      	mov	r2, r3
 80307c6:	2320      	movs	r3, #32
 80307c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80307ca:	683b      	ldr	r3, [r7, #0]
 80307cc:	b2db      	uxtb	r3, r3
 80307ce:	4619      	mov	r1, r3
 80307d0:	6878      	ldr	r0, [r7, #4]
 80307d2:	f00a fef5 	bl	803b5c0 <HAL_PCD_DataOutStageCallback>
 80307d6:	e01d      	b.n	8030814 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80307d8:	683b      	ldr	r3, [r7, #0]
 80307da:	2b00      	cmp	r3, #0
 80307dc:	d114      	bne.n	8030808 <PCD_EP_OutXfrComplete_int+0x1b0>
 80307de:	6879      	ldr	r1, [r7, #4]
 80307e0:	683a      	ldr	r2, [r7, #0]
 80307e2:	4613      	mov	r3, r2
 80307e4:	00db      	lsls	r3, r3, #3
 80307e6:	4413      	add	r3, r2
 80307e8:	009b      	lsls	r3, r3, #2
 80307ea:	440b      	add	r3, r1
 80307ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80307f0:	681b      	ldr	r3, [r3, #0]
 80307f2:	2b00      	cmp	r3, #0
 80307f4:	d108      	bne.n	8030808 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80307f6:	687b      	ldr	r3, [r7, #4]
 80307f8:	6818      	ldr	r0, [r3, #0]
 80307fa:	687b      	ldr	r3, [r7, #4]
 80307fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030800:	461a      	mov	r2, r3
 8030802:	2100      	movs	r1, #0
 8030804:	f008 fc5a 	bl	80390bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8030808:	683b      	ldr	r3, [r7, #0]
 803080a:	b2db      	uxtb	r3, r3
 803080c:	4619      	mov	r1, r3
 803080e:	6878      	ldr	r0, [r7, #4]
 8030810:	f00a fed6 	bl	803b5c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8030814:	2300      	movs	r3, #0
}
 8030816:	4618      	mov	r0, r3
 8030818:	3720      	adds	r7, #32
 803081a:	46bd      	mov	sp, r7
 803081c:	bd80      	pop	{r7, pc}
 803081e:	bf00      	nop
 8030820:	4f54300a 	.word	0x4f54300a
 8030824:	4f54310a 	.word	0x4f54310a

08030828 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8030828:	b580      	push	{r7, lr}
 803082a:	b086      	sub	sp, #24
 803082c:	af00      	add	r7, sp, #0
 803082e:	6078      	str	r0, [r7, #4]
 8030830:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030832:	687b      	ldr	r3, [r7, #4]
 8030834:	681b      	ldr	r3, [r3, #0]
 8030836:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030838:	697b      	ldr	r3, [r7, #20]
 803083a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 803083c:	697b      	ldr	r3, [r7, #20]
 803083e:	333c      	adds	r3, #60	; 0x3c
 8030840:	3304      	adds	r3, #4
 8030842:	681b      	ldr	r3, [r3, #0]
 8030844:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8030846:	683b      	ldr	r3, [r7, #0]
 8030848:	015a      	lsls	r2, r3, #5
 803084a:	693b      	ldr	r3, [r7, #16]
 803084c:	4413      	add	r3, r2
 803084e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030852:	689b      	ldr	r3, [r3, #8]
 8030854:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030856:	68fb      	ldr	r3, [r7, #12]
 8030858:	4a15      	ldr	r2, [pc, #84]	; (80308b0 <PCD_EP_OutSetupPacket_int+0x88>)
 803085a:	4293      	cmp	r3, r2
 803085c:	d90e      	bls.n	803087c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 803085e:	68bb      	ldr	r3, [r7, #8]
 8030860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030864:	2b00      	cmp	r3, #0
 8030866:	d009      	beq.n	803087c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8030868:	683b      	ldr	r3, [r7, #0]
 803086a:	015a      	lsls	r2, r3, #5
 803086c:	693b      	ldr	r3, [r7, #16]
 803086e:	4413      	add	r3, r2
 8030870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030874:	461a      	mov	r2, r3
 8030876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 803087a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 803087c:	6878      	ldr	r0, [r7, #4]
 803087e:	f00a fe8d 	bl	803b59c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8030882:	68fb      	ldr	r3, [r7, #12]
 8030884:	4a0a      	ldr	r2, [pc, #40]	; (80308b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8030886:	4293      	cmp	r3, r2
 8030888:	d90c      	bls.n	80308a4 <PCD_EP_OutSetupPacket_int+0x7c>
 803088a:	687b      	ldr	r3, [r7, #4]
 803088c:	691b      	ldr	r3, [r3, #16]
 803088e:	2b01      	cmp	r3, #1
 8030890:	d108      	bne.n	80308a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8030892:	687b      	ldr	r3, [r7, #4]
 8030894:	6818      	ldr	r0, [r3, #0]
 8030896:	687b      	ldr	r3, [r7, #4]
 8030898:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803089c:	461a      	mov	r2, r3
 803089e:	2101      	movs	r1, #1
 80308a0:	f008 fc0c 	bl	80390bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80308a4:	2300      	movs	r3, #0
}
 80308a6:	4618      	mov	r0, r3
 80308a8:	3718      	adds	r7, #24
 80308aa:	46bd      	mov	sp, r7
 80308ac:	bd80      	pop	{r7, pc}
 80308ae:	bf00      	nop
 80308b0:	4f54300a 	.word	0x4f54300a

080308b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80308b4:	b480      	push	{r7}
 80308b6:	b085      	sub	sp, #20
 80308b8:	af00      	add	r7, sp, #0
 80308ba:	6078      	str	r0, [r7, #4]
 80308bc:	460b      	mov	r3, r1
 80308be:	70fb      	strb	r3, [r7, #3]
 80308c0:	4613      	mov	r3, r2
 80308c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80308c4:	687b      	ldr	r3, [r7, #4]
 80308c6:	681b      	ldr	r3, [r3, #0]
 80308c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80308ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80308cc:	78fb      	ldrb	r3, [r7, #3]
 80308ce:	2b00      	cmp	r3, #0
 80308d0:	d107      	bne.n	80308e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80308d2:	883b      	ldrh	r3, [r7, #0]
 80308d4:	0419      	lsls	r1, r3, #16
 80308d6:	687b      	ldr	r3, [r7, #4]
 80308d8:	681b      	ldr	r3, [r3, #0]
 80308da:	68ba      	ldr	r2, [r7, #8]
 80308dc:	430a      	orrs	r2, r1
 80308de:	629a      	str	r2, [r3, #40]	; 0x28
 80308e0:	e028      	b.n	8030934 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80308e2:	687b      	ldr	r3, [r7, #4]
 80308e4:	681b      	ldr	r3, [r3, #0]
 80308e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80308e8:	0c1b      	lsrs	r3, r3, #16
 80308ea:	68ba      	ldr	r2, [r7, #8]
 80308ec:	4413      	add	r3, r2
 80308ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80308f0:	2300      	movs	r3, #0
 80308f2:	73fb      	strb	r3, [r7, #15]
 80308f4:	e00d      	b.n	8030912 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80308f6:	687b      	ldr	r3, [r7, #4]
 80308f8:	681a      	ldr	r2, [r3, #0]
 80308fa:	7bfb      	ldrb	r3, [r7, #15]
 80308fc:	3340      	adds	r3, #64	; 0x40
 80308fe:	009b      	lsls	r3, r3, #2
 8030900:	4413      	add	r3, r2
 8030902:	685b      	ldr	r3, [r3, #4]
 8030904:	0c1b      	lsrs	r3, r3, #16
 8030906:	68ba      	ldr	r2, [r7, #8]
 8030908:	4413      	add	r3, r2
 803090a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 803090c:	7bfb      	ldrb	r3, [r7, #15]
 803090e:	3301      	adds	r3, #1
 8030910:	73fb      	strb	r3, [r7, #15]
 8030912:	7bfa      	ldrb	r2, [r7, #15]
 8030914:	78fb      	ldrb	r3, [r7, #3]
 8030916:	3b01      	subs	r3, #1
 8030918:	429a      	cmp	r2, r3
 803091a:	d3ec      	bcc.n	80308f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 803091c:	883b      	ldrh	r3, [r7, #0]
 803091e:	0418      	lsls	r0, r3, #16
 8030920:	687b      	ldr	r3, [r7, #4]
 8030922:	6819      	ldr	r1, [r3, #0]
 8030924:	78fb      	ldrb	r3, [r7, #3]
 8030926:	3b01      	subs	r3, #1
 8030928:	68ba      	ldr	r2, [r7, #8]
 803092a:	4302      	orrs	r2, r0
 803092c:	3340      	adds	r3, #64	; 0x40
 803092e:	009b      	lsls	r3, r3, #2
 8030930:	440b      	add	r3, r1
 8030932:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8030934:	2300      	movs	r3, #0
}
 8030936:	4618      	mov	r0, r3
 8030938:	3714      	adds	r7, #20
 803093a:	46bd      	mov	sp, r7
 803093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030940:	4770      	bx	lr

08030942 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8030942:	b480      	push	{r7}
 8030944:	b083      	sub	sp, #12
 8030946:	af00      	add	r7, sp, #0
 8030948:	6078      	str	r0, [r7, #4]
 803094a:	460b      	mov	r3, r1
 803094c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 803094e:	687b      	ldr	r3, [r7, #4]
 8030950:	681b      	ldr	r3, [r3, #0]
 8030952:	887a      	ldrh	r2, [r7, #2]
 8030954:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8030956:	2300      	movs	r3, #0
}
 8030958:	4618      	mov	r0, r3
 803095a:	370c      	adds	r7, #12
 803095c:	46bd      	mov	sp, r7
 803095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030962:	4770      	bx	lr

08030964 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8030964:	b480      	push	{r7}
 8030966:	b085      	sub	sp, #20
 8030968:	af00      	add	r7, sp, #0
 803096a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 803096c:	687b      	ldr	r3, [r7, #4]
 803096e:	681b      	ldr	r3, [r3, #0]
 8030970:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8030972:	687b      	ldr	r3, [r7, #4]
 8030974:	2201      	movs	r2, #1
 8030976:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 803097a:	687b      	ldr	r3, [r7, #4]
 803097c:	2200      	movs	r2, #0
 803097e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8030982:	68fb      	ldr	r3, [r7, #12]
 8030984:	699b      	ldr	r3, [r3, #24]
 8030986:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 803098a:	68fb      	ldr	r3, [r7, #12]
 803098c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 803098e:	68fb      	ldr	r3, [r7, #12]
 8030990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8030992:	4b05      	ldr	r3, [pc, #20]	; (80309a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8030994:	4313      	orrs	r3, r2
 8030996:	68fa      	ldr	r2, [r7, #12]
 8030998:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 803099a:	2300      	movs	r3, #0
}
 803099c:	4618      	mov	r0, r3
 803099e:	3714      	adds	r7, #20
 80309a0:	46bd      	mov	sp, r7
 80309a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80309a6:	4770      	bx	lr
 80309a8:	10000003 	.word	0x10000003

080309ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80309ac:	b480      	push	{r7}
 80309ae:	b083      	sub	sp, #12
 80309b0:	af00      	add	r7, sp, #0
 80309b2:	6078      	str	r0, [r7, #4]
 80309b4:	460b      	mov	r3, r1
 80309b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80309b8:	bf00      	nop
 80309ba:	370c      	adds	r7, #12
 80309bc:	46bd      	mov	sp, r7
 80309be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80309c2:	4770      	bx	lr

080309c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80309c4:	b580      	push	{r7, lr}
 80309c6:	b084      	sub	sp, #16
 80309c8:	af00      	add	r7, sp, #0
 80309ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80309cc:	4b19      	ldr	r3, [pc, #100]	; (8030a34 <HAL_PWREx_ConfigSupply+0x70>)
 80309ce:	68db      	ldr	r3, [r3, #12]
 80309d0:	f003 0304 	and.w	r3, r3, #4
 80309d4:	2b04      	cmp	r3, #4
 80309d6:	d00a      	beq.n	80309ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80309d8:	4b16      	ldr	r3, [pc, #88]	; (8030a34 <HAL_PWREx_ConfigSupply+0x70>)
 80309da:	68db      	ldr	r3, [r3, #12]
 80309dc:	f003 0307 	and.w	r3, r3, #7
 80309e0:	687a      	ldr	r2, [r7, #4]
 80309e2:	429a      	cmp	r2, r3
 80309e4:	d001      	beq.n	80309ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80309e6:	2301      	movs	r3, #1
 80309e8:	e01f      	b.n	8030a2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80309ea:	2300      	movs	r3, #0
 80309ec:	e01d      	b.n	8030a2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80309ee:	4b11      	ldr	r3, [pc, #68]	; (8030a34 <HAL_PWREx_ConfigSupply+0x70>)
 80309f0:	68db      	ldr	r3, [r3, #12]
 80309f2:	f023 0207 	bic.w	r2, r3, #7
 80309f6:	490f      	ldr	r1, [pc, #60]	; (8030a34 <HAL_PWREx_ConfigSupply+0x70>)
 80309f8:	687b      	ldr	r3, [r7, #4]
 80309fa:	4313      	orrs	r3, r2
 80309fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80309fe:	f7fa f843 	bl	802aa88 <HAL_GetTick>
 8030a02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8030a04:	e009      	b.n	8030a1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8030a06:	f7fa f83f 	bl	802aa88 <HAL_GetTick>
 8030a0a:	4602      	mov	r2, r0
 8030a0c:	68fb      	ldr	r3, [r7, #12]
 8030a0e:	1ad3      	subs	r3, r2, r3
 8030a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8030a14:	d901      	bls.n	8030a1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8030a16:	2301      	movs	r3, #1
 8030a18:	e007      	b.n	8030a2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8030a1a:	4b06      	ldr	r3, [pc, #24]	; (8030a34 <HAL_PWREx_ConfigSupply+0x70>)
 8030a1c:	685b      	ldr	r3, [r3, #4]
 8030a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8030a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8030a26:	d1ee      	bne.n	8030a06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8030a28:	2300      	movs	r3, #0
}
 8030a2a:	4618      	mov	r0, r3
 8030a2c:	3710      	adds	r7, #16
 8030a2e:	46bd      	mov	sp, r7
 8030a30:	bd80      	pop	{r7, pc}
 8030a32:	bf00      	nop
 8030a34:	58024800 	.word	0x58024800

08030a38 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8030a38:	b480      	push	{r7}
 8030a3a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8030a3c:	4b05      	ldr	r3, [pc, #20]	; (8030a54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8030a3e:	68db      	ldr	r3, [r3, #12]
 8030a40:	4a04      	ldr	r2, [pc, #16]	; (8030a54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8030a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8030a46:	60d3      	str	r3, [r2, #12]
}
 8030a48:	bf00      	nop
 8030a4a:	46bd      	mov	sp, r7
 8030a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a50:	4770      	bx	lr
 8030a52:	bf00      	nop
 8030a54:	58024800 	.word	0x58024800

08030a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8030a58:	b580      	push	{r7, lr}
 8030a5a:	b08c      	sub	sp, #48	; 0x30
 8030a5c:	af00      	add	r7, sp, #0
 8030a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8030a60:	687b      	ldr	r3, [r7, #4]
 8030a62:	2b00      	cmp	r3, #0
 8030a64:	d102      	bne.n	8030a6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8030a66:	2301      	movs	r3, #1
 8030a68:	f000 bc1d 	b.w	80312a6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8030a6c:	687b      	ldr	r3, [r7, #4]
 8030a6e:	681b      	ldr	r3, [r3, #0]
 8030a70:	f003 0301 	and.w	r3, r3, #1
 8030a74:	2b00      	cmp	r3, #0
 8030a76:	f000 8087 	beq.w	8030b88 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030a7a:	4b99      	ldr	r3, [pc, #612]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030a7c:	691b      	ldr	r3, [r3, #16]
 8030a7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030a84:	4b96      	ldr	r3, [pc, #600]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030a88:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8030a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030a8c:	2b10      	cmp	r3, #16
 8030a8e:	d007      	beq.n	8030aa0 <HAL_RCC_OscConfig+0x48>
 8030a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030a92:	2b18      	cmp	r3, #24
 8030a94:	d110      	bne.n	8030ab8 <HAL_RCC_OscConfig+0x60>
 8030a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030a98:	f003 0303 	and.w	r3, r3, #3
 8030a9c:	2b02      	cmp	r3, #2
 8030a9e:	d10b      	bne.n	8030ab8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8030aa0:	4b8f      	ldr	r3, [pc, #572]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030aa2:	681b      	ldr	r3, [r3, #0]
 8030aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030aa8:	2b00      	cmp	r3, #0
 8030aaa:	d06c      	beq.n	8030b86 <HAL_RCC_OscConfig+0x12e>
 8030aac:	687b      	ldr	r3, [r7, #4]
 8030aae:	685b      	ldr	r3, [r3, #4]
 8030ab0:	2b00      	cmp	r3, #0
 8030ab2:	d168      	bne.n	8030b86 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8030ab4:	2301      	movs	r3, #1
 8030ab6:	e3f6      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8030ab8:	687b      	ldr	r3, [r7, #4]
 8030aba:	685b      	ldr	r3, [r3, #4]
 8030abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8030ac0:	d106      	bne.n	8030ad0 <HAL_RCC_OscConfig+0x78>
 8030ac2:	4b87      	ldr	r3, [pc, #540]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030ac4:	681b      	ldr	r3, [r3, #0]
 8030ac6:	4a86      	ldr	r2, [pc, #536]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8030acc:	6013      	str	r3, [r2, #0]
 8030ace:	e02e      	b.n	8030b2e <HAL_RCC_OscConfig+0xd6>
 8030ad0:	687b      	ldr	r3, [r7, #4]
 8030ad2:	685b      	ldr	r3, [r3, #4]
 8030ad4:	2b00      	cmp	r3, #0
 8030ad6:	d10c      	bne.n	8030af2 <HAL_RCC_OscConfig+0x9a>
 8030ad8:	4b81      	ldr	r3, [pc, #516]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030ada:	681b      	ldr	r3, [r3, #0]
 8030adc:	4a80      	ldr	r2, [pc, #512]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8030ae2:	6013      	str	r3, [r2, #0]
 8030ae4:	4b7e      	ldr	r3, [pc, #504]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030ae6:	681b      	ldr	r3, [r3, #0]
 8030ae8:	4a7d      	ldr	r2, [pc, #500]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8030aee:	6013      	str	r3, [r2, #0]
 8030af0:	e01d      	b.n	8030b2e <HAL_RCC_OscConfig+0xd6>
 8030af2:	687b      	ldr	r3, [r7, #4]
 8030af4:	685b      	ldr	r3, [r3, #4]
 8030af6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8030afa:	d10c      	bne.n	8030b16 <HAL_RCC_OscConfig+0xbe>
 8030afc:	4b78      	ldr	r3, [pc, #480]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030afe:	681b      	ldr	r3, [r3, #0]
 8030b00:	4a77      	ldr	r2, [pc, #476]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8030b06:	6013      	str	r3, [r2, #0]
 8030b08:	4b75      	ldr	r3, [pc, #468]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030b0a:	681b      	ldr	r3, [r3, #0]
 8030b0c:	4a74      	ldr	r2, [pc, #464]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8030b12:	6013      	str	r3, [r2, #0]
 8030b14:	e00b      	b.n	8030b2e <HAL_RCC_OscConfig+0xd6>
 8030b16:	4b72      	ldr	r3, [pc, #456]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030b18:	681b      	ldr	r3, [r3, #0]
 8030b1a:	4a71      	ldr	r2, [pc, #452]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8030b20:	6013      	str	r3, [r2, #0]
 8030b22:	4b6f      	ldr	r3, [pc, #444]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030b24:	681b      	ldr	r3, [r3, #0]
 8030b26:	4a6e      	ldr	r2, [pc, #440]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8030b2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8030b2e:	687b      	ldr	r3, [r7, #4]
 8030b30:	685b      	ldr	r3, [r3, #4]
 8030b32:	2b00      	cmp	r3, #0
 8030b34:	d013      	beq.n	8030b5e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030b36:	f7f9 ffa7 	bl	802aa88 <HAL_GetTick>
 8030b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8030b3c:	e008      	b.n	8030b50 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8030b3e:	f7f9 ffa3 	bl	802aa88 <HAL_GetTick>
 8030b42:	4602      	mov	r2, r0
 8030b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030b46:	1ad3      	subs	r3, r2, r3
 8030b48:	2b64      	cmp	r3, #100	; 0x64
 8030b4a:	d901      	bls.n	8030b50 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8030b4c:	2303      	movs	r3, #3
 8030b4e:	e3aa      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8030b50:	4b63      	ldr	r3, [pc, #396]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030b52:	681b      	ldr	r3, [r3, #0]
 8030b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030b58:	2b00      	cmp	r3, #0
 8030b5a:	d0f0      	beq.n	8030b3e <HAL_RCC_OscConfig+0xe6>
 8030b5c:	e014      	b.n	8030b88 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030b5e:	f7f9 ff93 	bl	802aa88 <HAL_GetTick>
 8030b62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8030b64:	e008      	b.n	8030b78 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8030b66:	f7f9 ff8f 	bl	802aa88 <HAL_GetTick>
 8030b6a:	4602      	mov	r2, r0
 8030b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030b6e:	1ad3      	subs	r3, r2, r3
 8030b70:	2b64      	cmp	r3, #100	; 0x64
 8030b72:	d901      	bls.n	8030b78 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8030b74:	2303      	movs	r3, #3
 8030b76:	e396      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8030b78:	4b59      	ldr	r3, [pc, #356]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030b7a:	681b      	ldr	r3, [r3, #0]
 8030b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030b80:	2b00      	cmp	r3, #0
 8030b82:	d1f0      	bne.n	8030b66 <HAL_RCC_OscConfig+0x10e>
 8030b84:	e000      	b.n	8030b88 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8030b86:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8030b88:	687b      	ldr	r3, [r7, #4]
 8030b8a:	681b      	ldr	r3, [r3, #0]
 8030b8c:	f003 0302 	and.w	r3, r3, #2
 8030b90:	2b00      	cmp	r3, #0
 8030b92:	f000 80cb 	beq.w	8030d2c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030b96:	4b52      	ldr	r3, [pc, #328]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030b98:	691b      	ldr	r3, [r3, #16]
 8030b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030b9e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030ba0:	4b4f      	ldr	r3, [pc, #316]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030ba4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8030ba6:	6a3b      	ldr	r3, [r7, #32]
 8030ba8:	2b00      	cmp	r3, #0
 8030baa:	d007      	beq.n	8030bbc <HAL_RCC_OscConfig+0x164>
 8030bac:	6a3b      	ldr	r3, [r7, #32]
 8030bae:	2b18      	cmp	r3, #24
 8030bb0:	d156      	bne.n	8030c60 <HAL_RCC_OscConfig+0x208>
 8030bb2:	69fb      	ldr	r3, [r7, #28]
 8030bb4:	f003 0303 	and.w	r3, r3, #3
 8030bb8:	2b00      	cmp	r3, #0
 8030bba:	d151      	bne.n	8030c60 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030bbc:	4b48      	ldr	r3, [pc, #288]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030bbe:	681b      	ldr	r3, [r3, #0]
 8030bc0:	f003 0304 	and.w	r3, r3, #4
 8030bc4:	2b00      	cmp	r3, #0
 8030bc6:	d005      	beq.n	8030bd4 <HAL_RCC_OscConfig+0x17c>
 8030bc8:	687b      	ldr	r3, [r7, #4]
 8030bca:	68db      	ldr	r3, [r3, #12]
 8030bcc:	2b00      	cmp	r3, #0
 8030bce:	d101      	bne.n	8030bd4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8030bd0:	2301      	movs	r3, #1
 8030bd2:	e368      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8030bd4:	4b42      	ldr	r3, [pc, #264]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030bd6:	681b      	ldr	r3, [r3, #0]
 8030bd8:	f023 0219 	bic.w	r2, r3, #25
 8030bdc:	687b      	ldr	r3, [r7, #4]
 8030bde:	68db      	ldr	r3, [r3, #12]
 8030be0:	493f      	ldr	r1, [pc, #252]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030be2:	4313      	orrs	r3, r2
 8030be4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8030be6:	f7f9 ff4f 	bl	802aa88 <HAL_GetTick>
 8030bea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030bec:	e008      	b.n	8030c00 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030bee:	f7f9 ff4b 	bl	802aa88 <HAL_GetTick>
 8030bf2:	4602      	mov	r2, r0
 8030bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030bf6:	1ad3      	subs	r3, r2, r3
 8030bf8:	2b02      	cmp	r3, #2
 8030bfa:	d901      	bls.n	8030c00 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8030bfc:	2303      	movs	r3, #3
 8030bfe:	e352      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030c00:	4b37      	ldr	r3, [pc, #220]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030c02:	681b      	ldr	r3, [r3, #0]
 8030c04:	f003 0304 	and.w	r3, r3, #4
 8030c08:	2b00      	cmp	r3, #0
 8030c0a:	d0f0      	beq.n	8030bee <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030c0c:	f7f9 ff6c 	bl	802aae8 <HAL_GetREVID>
 8030c10:	4603      	mov	r3, r0
 8030c12:	f241 0203 	movw	r2, #4099	; 0x1003
 8030c16:	4293      	cmp	r3, r2
 8030c18:	d817      	bhi.n	8030c4a <HAL_RCC_OscConfig+0x1f2>
 8030c1a:	687b      	ldr	r3, [r7, #4]
 8030c1c:	691b      	ldr	r3, [r3, #16]
 8030c1e:	2b40      	cmp	r3, #64	; 0x40
 8030c20:	d108      	bne.n	8030c34 <HAL_RCC_OscConfig+0x1dc>
 8030c22:	4b2f      	ldr	r3, [pc, #188]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030c24:	685b      	ldr	r3, [r3, #4]
 8030c26:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8030c2a:	4a2d      	ldr	r2, [pc, #180]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8030c30:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030c32:	e07b      	b.n	8030d2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030c34:	4b2a      	ldr	r3, [pc, #168]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030c36:	685b      	ldr	r3, [r3, #4]
 8030c38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8030c3c:	687b      	ldr	r3, [r7, #4]
 8030c3e:	691b      	ldr	r3, [r3, #16]
 8030c40:	031b      	lsls	r3, r3, #12
 8030c42:	4927      	ldr	r1, [pc, #156]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030c44:	4313      	orrs	r3, r2
 8030c46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030c48:	e070      	b.n	8030d2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030c4a:	4b25      	ldr	r3, [pc, #148]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030c4c:	685b      	ldr	r3, [r3, #4]
 8030c4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8030c52:	687b      	ldr	r3, [r7, #4]
 8030c54:	691b      	ldr	r3, [r3, #16]
 8030c56:	061b      	lsls	r3, r3, #24
 8030c58:	4921      	ldr	r1, [pc, #132]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030c5a:	4313      	orrs	r3, r2
 8030c5c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030c5e:	e065      	b.n	8030d2c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8030c60:	687b      	ldr	r3, [r7, #4]
 8030c62:	68db      	ldr	r3, [r3, #12]
 8030c64:	2b00      	cmp	r3, #0
 8030c66:	d048      	beq.n	8030cfa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8030c68:	4b1d      	ldr	r3, [pc, #116]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030c6a:	681b      	ldr	r3, [r3, #0]
 8030c6c:	f023 0219 	bic.w	r2, r3, #25
 8030c70:	687b      	ldr	r3, [r7, #4]
 8030c72:	68db      	ldr	r3, [r3, #12]
 8030c74:	491a      	ldr	r1, [pc, #104]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030c76:	4313      	orrs	r3, r2
 8030c78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030c7a:	f7f9 ff05 	bl	802aa88 <HAL_GetTick>
 8030c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030c80:	e008      	b.n	8030c94 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030c82:	f7f9 ff01 	bl	802aa88 <HAL_GetTick>
 8030c86:	4602      	mov	r2, r0
 8030c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030c8a:	1ad3      	subs	r3, r2, r3
 8030c8c:	2b02      	cmp	r3, #2
 8030c8e:	d901      	bls.n	8030c94 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8030c90:	2303      	movs	r3, #3
 8030c92:	e308      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030c94:	4b12      	ldr	r3, [pc, #72]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030c96:	681b      	ldr	r3, [r3, #0]
 8030c98:	f003 0304 	and.w	r3, r3, #4
 8030c9c:	2b00      	cmp	r3, #0
 8030c9e:	d0f0      	beq.n	8030c82 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030ca0:	f7f9 ff22 	bl	802aae8 <HAL_GetREVID>
 8030ca4:	4603      	mov	r3, r0
 8030ca6:	f241 0203 	movw	r2, #4099	; 0x1003
 8030caa:	4293      	cmp	r3, r2
 8030cac:	d81a      	bhi.n	8030ce4 <HAL_RCC_OscConfig+0x28c>
 8030cae:	687b      	ldr	r3, [r7, #4]
 8030cb0:	691b      	ldr	r3, [r3, #16]
 8030cb2:	2b40      	cmp	r3, #64	; 0x40
 8030cb4:	d108      	bne.n	8030cc8 <HAL_RCC_OscConfig+0x270>
 8030cb6:	4b0a      	ldr	r3, [pc, #40]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030cb8:	685b      	ldr	r3, [r3, #4]
 8030cba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8030cbe:	4a08      	ldr	r2, [pc, #32]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8030cc4:	6053      	str	r3, [r2, #4]
 8030cc6:	e031      	b.n	8030d2c <HAL_RCC_OscConfig+0x2d4>
 8030cc8:	4b05      	ldr	r3, [pc, #20]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030cca:	685b      	ldr	r3, [r3, #4]
 8030ccc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8030cd0:	687b      	ldr	r3, [r7, #4]
 8030cd2:	691b      	ldr	r3, [r3, #16]
 8030cd4:	031b      	lsls	r3, r3, #12
 8030cd6:	4902      	ldr	r1, [pc, #8]	; (8030ce0 <HAL_RCC_OscConfig+0x288>)
 8030cd8:	4313      	orrs	r3, r2
 8030cda:	604b      	str	r3, [r1, #4]
 8030cdc:	e026      	b.n	8030d2c <HAL_RCC_OscConfig+0x2d4>
 8030cde:	bf00      	nop
 8030ce0:	58024400 	.word	0x58024400
 8030ce4:	4b9a      	ldr	r3, [pc, #616]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030ce6:	685b      	ldr	r3, [r3, #4]
 8030ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8030cec:	687b      	ldr	r3, [r7, #4]
 8030cee:	691b      	ldr	r3, [r3, #16]
 8030cf0:	061b      	lsls	r3, r3, #24
 8030cf2:	4997      	ldr	r1, [pc, #604]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030cf4:	4313      	orrs	r3, r2
 8030cf6:	604b      	str	r3, [r1, #4]
 8030cf8:	e018      	b.n	8030d2c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8030cfa:	4b95      	ldr	r3, [pc, #596]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030cfc:	681b      	ldr	r3, [r3, #0]
 8030cfe:	4a94      	ldr	r2, [pc, #592]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030d00:	f023 0301 	bic.w	r3, r3, #1
 8030d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030d06:	f7f9 febf 	bl	802aa88 <HAL_GetTick>
 8030d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8030d0c:	e008      	b.n	8030d20 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030d0e:	f7f9 febb 	bl	802aa88 <HAL_GetTick>
 8030d12:	4602      	mov	r2, r0
 8030d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030d16:	1ad3      	subs	r3, r2, r3
 8030d18:	2b02      	cmp	r3, #2
 8030d1a:	d901      	bls.n	8030d20 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8030d1c:	2303      	movs	r3, #3
 8030d1e:	e2c2      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8030d20:	4b8b      	ldr	r3, [pc, #556]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030d22:	681b      	ldr	r3, [r3, #0]
 8030d24:	f003 0304 	and.w	r3, r3, #4
 8030d28:	2b00      	cmp	r3, #0
 8030d2a:	d1f0      	bne.n	8030d0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8030d2c:	687b      	ldr	r3, [r7, #4]
 8030d2e:	681b      	ldr	r3, [r3, #0]
 8030d30:	f003 0310 	and.w	r3, r3, #16
 8030d34:	2b00      	cmp	r3, #0
 8030d36:	f000 80a9 	beq.w	8030e8c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030d3a:	4b85      	ldr	r3, [pc, #532]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030d3c:	691b      	ldr	r3, [r3, #16]
 8030d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030d42:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030d44:	4b82      	ldr	r3, [pc, #520]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030d48:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8030d4a:	69bb      	ldr	r3, [r7, #24]
 8030d4c:	2b08      	cmp	r3, #8
 8030d4e:	d007      	beq.n	8030d60 <HAL_RCC_OscConfig+0x308>
 8030d50:	69bb      	ldr	r3, [r7, #24]
 8030d52:	2b18      	cmp	r3, #24
 8030d54:	d13a      	bne.n	8030dcc <HAL_RCC_OscConfig+0x374>
 8030d56:	697b      	ldr	r3, [r7, #20]
 8030d58:	f003 0303 	and.w	r3, r3, #3
 8030d5c:	2b01      	cmp	r3, #1
 8030d5e:	d135      	bne.n	8030dcc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030d60:	4b7b      	ldr	r3, [pc, #492]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030d62:	681b      	ldr	r3, [r3, #0]
 8030d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030d68:	2b00      	cmp	r3, #0
 8030d6a:	d005      	beq.n	8030d78 <HAL_RCC_OscConfig+0x320>
 8030d6c:	687b      	ldr	r3, [r7, #4]
 8030d6e:	69db      	ldr	r3, [r3, #28]
 8030d70:	2b80      	cmp	r3, #128	; 0x80
 8030d72:	d001      	beq.n	8030d78 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8030d74:	2301      	movs	r3, #1
 8030d76:	e296      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030d78:	f7f9 feb6 	bl	802aae8 <HAL_GetREVID>
 8030d7c:	4603      	mov	r3, r0
 8030d7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8030d82:	4293      	cmp	r3, r2
 8030d84:	d817      	bhi.n	8030db6 <HAL_RCC_OscConfig+0x35e>
 8030d86:	687b      	ldr	r3, [r7, #4]
 8030d88:	6a1b      	ldr	r3, [r3, #32]
 8030d8a:	2b20      	cmp	r3, #32
 8030d8c:	d108      	bne.n	8030da0 <HAL_RCC_OscConfig+0x348>
 8030d8e:	4b70      	ldr	r3, [pc, #448]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030d90:	685b      	ldr	r3, [r3, #4]
 8030d92:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8030d96:	4a6e      	ldr	r2, [pc, #440]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030d98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8030d9c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030d9e:	e075      	b.n	8030e8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030da0:	4b6b      	ldr	r3, [pc, #428]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030da2:	685b      	ldr	r3, [r3, #4]
 8030da4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8030da8:	687b      	ldr	r3, [r7, #4]
 8030daa:	6a1b      	ldr	r3, [r3, #32]
 8030dac:	069b      	lsls	r3, r3, #26
 8030dae:	4968      	ldr	r1, [pc, #416]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030db0:	4313      	orrs	r3, r2
 8030db2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030db4:	e06a      	b.n	8030e8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030db6:	4b66      	ldr	r3, [pc, #408]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030db8:	68db      	ldr	r3, [r3, #12]
 8030dba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8030dbe:	687b      	ldr	r3, [r7, #4]
 8030dc0:	6a1b      	ldr	r3, [r3, #32]
 8030dc2:	061b      	lsls	r3, r3, #24
 8030dc4:	4962      	ldr	r1, [pc, #392]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030dc6:	4313      	orrs	r3, r2
 8030dc8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030dca:	e05f      	b.n	8030e8c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8030dcc:	687b      	ldr	r3, [r7, #4]
 8030dce:	69db      	ldr	r3, [r3, #28]
 8030dd0:	2b00      	cmp	r3, #0
 8030dd2:	d042      	beq.n	8030e5a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8030dd4:	4b5e      	ldr	r3, [pc, #376]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030dd6:	681b      	ldr	r3, [r3, #0]
 8030dd8:	4a5d      	ldr	r2, [pc, #372]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030de0:	f7f9 fe52 	bl	802aa88 <HAL_GetTick>
 8030de4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8030de6:	e008      	b.n	8030dfa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8030de8:	f7f9 fe4e 	bl	802aa88 <HAL_GetTick>
 8030dec:	4602      	mov	r2, r0
 8030dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030df0:	1ad3      	subs	r3, r2, r3
 8030df2:	2b02      	cmp	r3, #2
 8030df4:	d901      	bls.n	8030dfa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8030df6:	2303      	movs	r3, #3
 8030df8:	e255      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8030dfa:	4b55      	ldr	r3, [pc, #340]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030dfc:	681b      	ldr	r3, [r3, #0]
 8030dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030e02:	2b00      	cmp	r3, #0
 8030e04:	d0f0      	beq.n	8030de8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030e06:	f7f9 fe6f 	bl	802aae8 <HAL_GetREVID>
 8030e0a:	4603      	mov	r3, r0
 8030e0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8030e10:	4293      	cmp	r3, r2
 8030e12:	d817      	bhi.n	8030e44 <HAL_RCC_OscConfig+0x3ec>
 8030e14:	687b      	ldr	r3, [r7, #4]
 8030e16:	6a1b      	ldr	r3, [r3, #32]
 8030e18:	2b20      	cmp	r3, #32
 8030e1a:	d108      	bne.n	8030e2e <HAL_RCC_OscConfig+0x3d6>
 8030e1c:	4b4c      	ldr	r3, [pc, #304]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030e1e:	685b      	ldr	r3, [r3, #4]
 8030e20:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8030e24:	4a4a      	ldr	r2, [pc, #296]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030e26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8030e2a:	6053      	str	r3, [r2, #4]
 8030e2c:	e02e      	b.n	8030e8c <HAL_RCC_OscConfig+0x434>
 8030e2e:	4b48      	ldr	r3, [pc, #288]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030e30:	685b      	ldr	r3, [r3, #4]
 8030e32:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8030e36:	687b      	ldr	r3, [r7, #4]
 8030e38:	6a1b      	ldr	r3, [r3, #32]
 8030e3a:	069b      	lsls	r3, r3, #26
 8030e3c:	4944      	ldr	r1, [pc, #272]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030e3e:	4313      	orrs	r3, r2
 8030e40:	604b      	str	r3, [r1, #4]
 8030e42:	e023      	b.n	8030e8c <HAL_RCC_OscConfig+0x434>
 8030e44:	4b42      	ldr	r3, [pc, #264]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030e46:	68db      	ldr	r3, [r3, #12]
 8030e48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8030e4c:	687b      	ldr	r3, [r7, #4]
 8030e4e:	6a1b      	ldr	r3, [r3, #32]
 8030e50:	061b      	lsls	r3, r3, #24
 8030e52:	493f      	ldr	r1, [pc, #252]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030e54:	4313      	orrs	r3, r2
 8030e56:	60cb      	str	r3, [r1, #12]
 8030e58:	e018      	b.n	8030e8c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8030e5a:	4b3d      	ldr	r3, [pc, #244]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030e5c:	681b      	ldr	r3, [r3, #0]
 8030e5e:	4a3c      	ldr	r2, [pc, #240]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8030e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030e66:	f7f9 fe0f 	bl	802aa88 <HAL_GetTick>
 8030e6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8030e6c:	e008      	b.n	8030e80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8030e6e:	f7f9 fe0b 	bl	802aa88 <HAL_GetTick>
 8030e72:	4602      	mov	r2, r0
 8030e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030e76:	1ad3      	subs	r3, r2, r3
 8030e78:	2b02      	cmp	r3, #2
 8030e7a:	d901      	bls.n	8030e80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8030e7c:	2303      	movs	r3, #3
 8030e7e:	e212      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8030e80:	4b33      	ldr	r3, [pc, #204]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030e82:	681b      	ldr	r3, [r3, #0]
 8030e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030e88:	2b00      	cmp	r3, #0
 8030e8a:	d1f0      	bne.n	8030e6e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8030e8c:	687b      	ldr	r3, [r7, #4]
 8030e8e:	681b      	ldr	r3, [r3, #0]
 8030e90:	f003 0308 	and.w	r3, r3, #8
 8030e94:	2b00      	cmp	r3, #0
 8030e96:	d036      	beq.n	8030f06 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8030e98:	687b      	ldr	r3, [r7, #4]
 8030e9a:	695b      	ldr	r3, [r3, #20]
 8030e9c:	2b00      	cmp	r3, #0
 8030e9e:	d019      	beq.n	8030ed4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8030ea0:	4b2b      	ldr	r3, [pc, #172]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8030ea4:	4a2a      	ldr	r2, [pc, #168]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030ea6:	f043 0301 	orr.w	r3, r3, #1
 8030eaa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8030eac:	f7f9 fdec 	bl	802aa88 <HAL_GetTick>
 8030eb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8030eb2:	e008      	b.n	8030ec6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8030eb4:	f7f9 fde8 	bl	802aa88 <HAL_GetTick>
 8030eb8:	4602      	mov	r2, r0
 8030eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030ebc:	1ad3      	subs	r3, r2, r3
 8030ebe:	2b02      	cmp	r3, #2
 8030ec0:	d901      	bls.n	8030ec6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8030ec2:	2303      	movs	r3, #3
 8030ec4:	e1ef      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8030ec6:	4b22      	ldr	r3, [pc, #136]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8030eca:	f003 0302 	and.w	r3, r3, #2
 8030ece:	2b00      	cmp	r3, #0
 8030ed0:	d0f0      	beq.n	8030eb4 <HAL_RCC_OscConfig+0x45c>
 8030ed2:	e018      	b.n	8030f06 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8030ed4:	4b1e      	ldr	r3, [pc, #120]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8030ed8:	4a1d      	ldr	r2, [pc, #116]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030eda:	f023 0301 	bic.w	r3, r3, #1
 8030ede:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8030ee0:	f7f9 fdd2 	bl	802aa88 <HAL_GetTick>
 8030ee4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8030ee6:	e008      	b.n	8030efa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8030ee8:	f7f9 fdce 	bl	802aa88 <HAL_GetTick>
 8030eec:	4602      	mov	r2, r0
 8030eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030ef0:	1ad3      	subs	r3, r2, r3
 8030ef2:	2b02      	cmp	r3, #2
 8030ef4:	d901      	bls.n	8030efa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8030ef6:	2303      	movs	r3, #3
 8030ef8:	e1d5      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8030efa:	4b15      	ldr	r3, [pc, #84]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8030efe:	f003 0302 	and.w	r3, r3, #2
 8030f02:	2b00      	cmp	r3, #0
 8030f04:	d1f0      	bne.n	8030ee8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8030f06:	687b      	ldr	r3, [r7, #4]
 8030f08:	681b      	ldr	r3, [r3, #0]
 8030f0a:	f003 0320 	and.w	r3, r3, #32
 8030f0e:	2b00      	cmp	r3, #0
 8030f10:	d039      	beq.n	8030f86 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8030f12:	687b      	ldr	r3, [r7, #4]
 8030f14:	699b      	ldr	r3, [r3, #24]
 8030f16:	2b00      	cmp	r3, #0
 8030f18:	d01c      	beq.n	8030f54 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8030f1a:	4b0d      	ldr	r3, [pc, #52]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030f1c:	681b      	ldr	r3, [r3, #0]
 8030f1e:	4a0c      	ldr	r2, [pc, #48]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8030f24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8030f26:	f7f9 fdaf 	bl	802aa88 <HAL_GetTick>
 8030f2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8030f2c:	e008      	b.n	8030f40 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8030f2e:	f7f9 fdab 	bl	802aa88 <HAL_GetTick>
 8030f32:	4602      	mov	r2, r0
 8030f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030f36:	1ad3      	subs	r3, r2, r3
 8030f38:	2b02      	cmp	r3, #2
 8030f3a:	d901      	bls.n	8030f40 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8030f3c:	2303      	movs	r3, #3
 8030f3e:	e1b2      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8030f40:	4b03      	ldr	r3, [pc, #12]	; (8030f50 <HAL_RCC_OscConfig+0x4f8>)
 8030f42:	681b      	ldr	r3, [r3, #0]
 8030f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8030f48:	2b00      	cmp	r3, #0
 8030f4a:	d0f0      	beq.n	8030f2e <HAL_RCC_OscConfig+0x4d6>
 8030f4c:	e01b      	b.n	8030f86 <HAL_RCC_OscConfig+0x52e>
 8030f4e:	bf00      	nop
 8030f50:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8030f54:	4b9b      	ldr	r3, [pc, #620]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8030f56:	681b      	ldr	r3, [r3, #0]
 8030f58:	4a9a      	ldr	r2, [pc, #616]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8030f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8030f5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8030f60:	f7f9 fd92 	bl	802aa88 <HAL_GetTick>
 8030f64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8030f66:	e008      	b.n	8030f7a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8030f68:	f7f9 fd8e 	bl	802aa88 <HAL_GetTick>
 8030f6c:	4602      	mov	r2, r0
 8030f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030f70:	1ad3      	subs	r3, r2, r3
 8030f72:	2b02      	cmp	r3, #2
 8030f74:	d901      	bls.n	8030f7a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8030f76:	2303      	movs	r3, #3
 8030f78:	e195      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8030f7a:	4b92      	ldr	r3, [pc, #584]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8030f7c:	681b      	ldr	r3, [r3, #0]
 8030f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8030f82:	2b00      	cmp	r3, #0
 8030f84:	d1f0      	bne.n	8030f68 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8030f86:	687b      	ldr	r3, [r7, #4]
 8030f88:	681b      	ldr	r3, [r3, #0]
 8030f8a:	f003 0304 	and.w	r3, r3, #4
 8030f8e:	2b00      	cmp	r3, #0
 8030f90:	f000 8081 	beq.w	8031096 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8030f94:	4b8c      	ldr	r3, [pc, #560]	; (80311c8 <HAL_RCC_OscConfig+0x770>)
 8030f96:	681b      	ldr	r3, [r3, #0]
 8030f98:	4a8b      	ldr	r2, [pc, #556]	; (80311c8 <HAL_RCC_OscConfig+0x770>)
 8030f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8030f9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8030fa0:	f7f9 fd72 	bl	802aa88 <HAL_GetTick>
 8030fa4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8030fa6:	e008      	b.n	8030fba <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8030fa8:	f7f9 fd6e 	bl	802aa88 <HAL_GetTick>
 8030fac:	4602      	mov	r2, r0
 8030fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030fb0:	1ad3      	subs	r3, r2, r3
 8030fb2:	2b64      	cmp	r3, #100	; 0x64
 8030fb4:	d901      	bls.n	8030fba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8030fb6:	2303      	movs	r3, #3
 8030fb8:	e175      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8030fba:	4b83      	ldr	r3, [pc, #524]	; (80311c8 <HAL_RCC_OscConfig+0x770>)
 8030fbc:	681b      	ldr	r3, [r3, #0]
 8030fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030fc2:	2b00      	cmp	r3, #0
 8030fc4:	d0f0      	beq.n	8030fa8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8030fc6:	687b      	ldr	r3, [r7, #4]
 8030fc8:	689b      	ldr	r3, [r3, #8]
 8030fca:	2b01      	cmp	r3, #1
 8030fcc:	d106      	bne.n	8030fdc <HAL_RCC_OscConfig+0x584>
 8030fce:	4b7d      	ldr	r3, [pc, #500]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8030fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8030fd2:	4a7c      	ldr	r2, [pc, #496]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8030fd4:	f043 0301 	orr.w	r3, r3, #1
 8030fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8030fda:	e02d      	b.n	8031038 <HAL_RCC_OscConfig+0x5e0>
 8030fdc:	687b      	ldr	r3, [r7, #4]
 8030fde:	689b      	ldr	r3, [r3, #8]
 8030fe0:	2b00      	cmp	r3, #0
 8030fe2:	d10c      	bne.n	8030ffe <HAL_RCC_OscConfig+0x5a6>
 8030fe4:	4b77      	ldr	r3, [pc, #476]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8030fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8030fe8:	4a76      	ldr	r2, [pc, #472]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8030fea:	f023 0301 	bic.w	r3, r3, #1
 8030fee:	6713      	str	r3, [r2, #112]	; 0x70
 8030ff0:	4b74      	ldr	r3, [pc, #464]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8030ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8030ff4:	4a73      	ldr	r2, [pc, #460]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8030ff6:	f023 0304 	bic.w	r3, r3, #4
 8030ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8030ffc:	e01c      	b.n	8031038 <HAL_RCC_OscConfig+0x5e0>
 8030ffe:	687b      	ldr	r3, [r7, #4]
 8031000:	689b      	ldr	r3, [r3, #8]
 8031002:	2b05      	cmp	r3, #5
 8031004:	d10c      	bne.n	8031020 <HAL_RCC_OscConfig+0x5c8>
 8031006:	4b6f      	ldr	r3, [pc, #444]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803100a:	4a6e      	ldr	r2, [pc, #440]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 803100c:	f043 0304 	orr.w	r3, r3, #4
 8031010:	6713      	str	r3, [r2, #112]	; 0x70
 8031012:	4b6c      	ldr	r3, [pc, #432]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031016:	4a6b      	ldr	r2, [pc, #428]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031018:	f043 0301 	orr.w	r3, r3, #1
 803101c:	6713      	str	r3, [r2, #112]	; 0x70
 803101e:	e00b      	b.n	8031038 <HAL_RCC_OscConfig+0x5e0>
 8031020:	4b68      	ldr	r3, [pc, #416]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031024:	4a67      	ldr	r2, [pc, #412]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031026:	f023 0301 	bic.w	r3, r3, #1
 803102a:	6713      	str	r3, [r2, #112]	; 0x70
 803102c:	4b65      	ldr	r3, [pc, #404]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 803102e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031030:	4a64      	ldr	r2, [pc, #400]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031032:	f023 0304 	bic.w	r3, r3, #4
 8031036:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8031038:	687b      	ldr	r3, [r7, #4]
 803103a:	689b      	ldr	r3, [r3, #8]
 803103c:	2b00      	cmp	r3, #0
 803103e:	d015      	beq.n	803106c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031040:	f7f9 fd22 	bl	802aa88 <HAL_GetTick>
 8031044:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8031046:	e00a      	b.n	803105e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8031048:	f7f9 fd1e 	bl	802aa88 <HAL_GetTick>
 803104c:	4602      	mov	r2, r0
 803104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031050:	1ad3      	subs	r3, r2, r3
 8031052:	f241 3288 	movw	r2, #5000	; 0x1388
 8031056:	4293      	cmp	r3, r2
 8031058:	d901      	bls.n	803105e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 803105a:	2303      	movs	r3, #3
 803105c:	e123      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 803105e:	4b59      	ldr	r3, [pc, #356]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031062:	f003 0302 	and.w	r3, r3, #2
 8031066:	2b00      	cmp	r3, #0
 8031068:	d0ee      	beq.n	8031048 <HAL_RCC_OscConfig+0x5f0>
 803106a:	e014      	b.n	8031096 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 803106c:	f7f9 fd0c 	bl	802aa88 <HAL_GetTick>
 8031070:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8031072:	e00a      	b.n	803108a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8031074:	f7f9 fd08 	bl	802aa88 <HAL_GetTick>
 8031078:	4602      	mov	r2, r0
 803107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803107c:	1ad3      	subs	r3, r2, r3
 803107e:	f241 3288 	movw	r2, #5000	; 0x1388
 8031082:	4293      	cmp	r3, r2
 8031084:	d901      	bls.n	803108a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8031086:	2303      	movs	r3, #3
 8031088:	e10d      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 803108a:	4b4e      	ldr	r3, [pc, #312]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 803108c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803108e:	f003 0302 	and.w	r3, r3, #2
 8031092:	2b00      	cmp	r3, #0
 8031094:	d1ee      	bne.n	8031074 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8031096:	687b      	ldr	r3, [r7, #4]
 8031098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803109a:	2b00      	cmp	r3, #0
 803109c:	f000 8102 	beq.w	80312a4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80310a0:	4b48      	ldr	r3, [pc, #288]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 80310a2:	691b      	ldr	r3, [r3, #16]
 80310a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80310a8:	2b18      	cmp	r3, #24
 80310aa:	f000 80bd 	beq.w	8031228 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80310ae:	687b      	ldr	r3, [r7, #4]
 80310b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80310b2:	2b02      	cmp	r3, #2
 80310b4:	f040 809e 	bne.w	80311f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80310b8:	4b42      	ldr	r3, [pc, #264]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 80310ba:	681b      	ldr	r3, [r3, #0]
 80310bc:	4a41      	ldr	r2, [pc, #260]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 80310be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80310c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80310c4:	f7f9 fce0 	bl	802aa88 <HAL_GetTick>
 80310c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80310ca:	e008      	b.n	80310de <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80310cc:	f7f9 fcdc 	bl	802aa88 <HAL_GetTick>
 80310d0:	4602      	mov	r2, r0
 80310d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80310d4:	1ad3      	subs	r3, r2, r3
 80310d6:	2b02      	cmp	r3, #2
 80310d8:	d901      	bls.n	80310de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80310da:	2303      	movs	r3, #3
 80310dc:	e0e3      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80310de:	4b39      	ldr	r3, [pc, #228]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 80310e0:	681b      	ldr	r3, [r3, #0]
 80310e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80310e6:	2b00      	cmp	r3, #0
 80310e8:	d1f0      	bne.n	80310cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80310ea:	4b36      	ldr	r3, [pc, #216]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 80310ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80310ee:	4b37      	ldr	r3, [pc, #220]	; (80311cc <HAL_RCC_OscConfig+0x774>)
 80310f0:	4013      	ands	r3, r2
 80310f2:	687a      	ldr	r2, [r7, #4]
 80310f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80310f6:	687a      	ldr	r2, [r7, #4]
 80310f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80310fa:	0112      	lsls	r2, r2, #4
 80310fc:	430a      	orrs	r2, r1
 80310fe:	4931      	ldr	r1, [pc, #196]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031100:	4313      	orrs	r3, r2
 8031102:	628b      	str	r3, [r1, #40]	; 0x28
 8031104:	687b      	ldr	r3, [r7, #4]
 8031106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031108:	3b01      	subs	r3, #1
 803110a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803110e:	687b      	ldr	r3, [r7, #4]
 8031110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031112:	3b01      	subs	r3, #1
 8031114:	025b      	lsls	r3, r3, #9
 8031116:	b29b      	uxth	r3, r3
 8031118:	431a      	orrs	r2, r3
 803111a:	687b      	ldr	r3, [r7, #4]
 803111c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803111e:	3b01      	subs	r3, #1
 8031120:	041b      	lsls	r3, r3, #16
 8031122:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8031126:	431a      	orrs	r2, r3
 8031128:	687b      	ldr	r3, [r7, #4]
 803112a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803112c:	3b01      	subs	r3, #1
 803112e:	061b      	lsls	r3, r3, #24
 8031130:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8031134:	4923      	ldr	r1, [pc, #140]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031136:	4313      	orrs	r3, r2
 8031138:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 803113a:	4b22      	ldr	r3, [pc, #136]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 803113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803113e:	4a21      	ldr	r2, [pc, #132]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031140:	f023 0301 	bic.w	r3, r3, #1
 8031144:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8031146:	4b1f      	ldr	r3, [pc, #124]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803114a:	4b21      	ldr	r3, [pc, #132]	; (80311d0 <HAL_RCC_OscConfig+0x778>)
 803114c:	4013      	ands	r3, r2
 803114e:	687a      	ldr	r2, [r7, #4]
 8031150:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8031152:	00d2      	lsls	r2, r2, #3
 8031154:	491b      	ldr	r1, [pc, #108]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031156:	4313      	orrs	r3, r2
 8031158:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 803115a:	4b1a      	ldr	r3, [pc, #104]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 803115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803115e:	f023 020c 	bic.w	r2, r3, #12
 8031162:	687b      	ldr	r3, [r7, #4]
 8031164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8031166:	4917      	ldr	r1, [pc, #92]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031168:	4313      	orrs	r3, r2
 803116a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 803116c:	4b15      	ldr	r3, [pc, #84]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 803116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031170:	f023 0202 	bic.w	r2, r3, #2
 8031174:	687b      	ldr	r3, [r7, #4]
 8031176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031178:	4912      	ldr	r1, [pc, #72]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 803117a:	4313      	orrs	r3, r2
 803117c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 803117e:	4b11      	ldr	r3, [pc, #68]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031182:	4a10      	ldr	r2, [pc, #64]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8031188:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803118a:	4b0e      	ldr	r3, [pc, #56]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 803118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803118e:	4a0d      	ldr	r2, [pc, #52]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031194:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8031196:	4b0b      	ldr	r3, [pc, #44]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 8031198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803119a:	4a0a      	ldr	r2, [pc, #40]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 803119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80311a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80311a2:	4b08      	ldr	r3, [pc, #32]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 80311a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80311a6:	4a07      	ldr	r2, [pc, #28]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 80311a8:	f043 0301 	orr.w	r3, r3, #1
 80311ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80311ae:	4b05      	ldr	r3, [pc, #20]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 80311b0:	681b      	ldr	r3, [r3, #0]
 80311b2:	4a04      	ldr	r2, [pc, #16]	; (80311c4 <HAL_RCC_OscConfig+0x76c>)
 80311b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80311b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80311ba:	f7f9 fc65 	bl	802aa88 <HAL_GetTick>
 80311be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80311c0:	e011      	b.n	80311e6 <HAL_RCC_OscConfig+0x78e>
 80311c2:	bf00      	nop
 80311c4:	58024400 	.word	0x58024400
 80311c8:	58024800 	.word	0x58024800
 80311cc:	fffffc0c 	.word	0xfffffc0c
 80311d0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80311d4:	f7f9 fc58 	bl	802aa88 <HAL_GetTick>
 80311d8:	4602      	mov	r2, r0
 80311da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80311dc:	1ad3      	subs	r3, r2, r3
 80311de:	2b02      	cmp	r3, #2
 80311e0:	d901      	bls.n	80311e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80311e2:	2303      	movs	r3, #3
 80311e4:	e05f      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80311e6:	4b32      	ldr	r3, [pc, #200]	; (80312b0 <HAL_RCC_OscConfig+0x858>)
 80311e8:	681b      	ldr	r3, [r3, #0]
 80311ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80311ee:	2b00      	cmp	r3, #0
 80311f0:	d0f0      	beq.n	80311d4 <HAL_RCC_OscConfig+0x77c>
 80311f2:	e057      	b.n	80312a4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80311f4:	4b2e      	ldr	r3, [pc, #184]	; (80312b0 <HAL_RCC_OscConfig+0x858>)
 80311f6:	681b      	ldr	r3, [r3, #0]
 80311f8:	4a2d      	ldr	r2, [pc, #180]	; (80312b0 <HAL_RCC_OscConfig+0x858>)
 80311fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80311fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8031200:	f7f9 fc42 	bl	802aa88 <HAL_GetTick>
 8031204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8031206:	e008      	b.n	803121a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8031208:	f7f9 fc3e 	bl	802aa88 <HAL_GetTick>
 803120c:	4602      	mov	r2, r0
 803120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031210:	1ad3      	subs	r3, r2, r3
 8031212:	2b02      	cmp	r3, #2
 8031214:	d901      	bls.n	803121a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8031216:	2303      	movs	r3, #3
 8031218:	e045      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 803121a:	4b25      	ldr	r3, [pc, #148]	; (80312b0 <HAL_RCC_OscConfig+0x858>)
 803121c:	681b      	ldr	r3, [r3, #0]
 803121e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031222:	2b00      	cmp	r3, #0
 8031224:	d1f0      	bne.n	8031208 <HAL_RCC_OscConfig+0x7b0>
 8031226:	e03d      	b.n	80312a4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8031228:	4b21      	ldr	r3, [pc, #132]	; (80312b0 <HAL_RCC_OscConfig+0x858>)
 803122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803122c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 803122e:	4b20      	ldr	r3, [pc, #128]	; (80312b0 <HAL_RCC_OscConfig+0x858>)
 8031230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031232:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8031234:	687b      	ldr	r3, [r7, #4]
 8031236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031238:	2b01      	cmp	r3, #1
 803123a:	d031      	beq.n	80312a0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 803123c:	693b      	ldr	r3, [r7, #16]
 803123e:	f003 0203 	and.w	r2, r3, #3
 8031242:	687b      	ldr	r3, [r7, #4]
 8031244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8031246:	429a      	cmp	r2, r3
 8031248:	d12a      	bne.n	80312a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 803124a:	693b      	ldr	r3, [r7, #16]
 803124c:	091b      	lsrs	r3, r3, #4
 803124e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8031252:	687b      	ldr	r3, [r7, #4]
 8031254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8031256:	429a      	cmp	r2, r3
 8031258:	d122      	bne.n	80312a0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 803125a:	68fb      	ldr	r3, [r7, #12]
 803125c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8031260:	687b      	ldr	r3, [r7, #4]
 8031262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031264:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8031266:	429a      	cmp	r2, r3
 8031268:	d11a      	bne.n	80312a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 803126a:	68fb      	ldr	r3, [r7, #12]
 803126c:	0a5b      	lsrs	r3, r3, #9
 803126e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8031272:	687b      	ldr	r3, [r7, #4]
 8031274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031276:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8031278:	429a      	cmp	r2, r3
 803127a:	d111      	bne.n	80312a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 803127c:	68fb      	ldr	r3, [r7, #12]
 803127e:	0c1b      	lsrs	r3, r3, #16
 8031280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8031284:	687b      	ldr	r3, [r7, #4]
 8031286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031288:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 803128a:	429a      	cmp	r2, r3
 803128c:	d108      	bne.n	80312a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 803128e:	68fb      	ldr	r3, [r7, #12]
 8031290:	0e1b      	lsrs	r3, r3, #24
 8031292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8031296:	687b      	ldr	r3, [r7, #4]
 8031298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803129a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 803129c:	429a      	cmp	r2, r3
 803129e:	d001      	beq.n	80312a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80312a0:	2301      	movs	r3, #1
 80312a2:	e000      	b.n	80312a6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80312a4:	2300      	movs	r3, #0
}
 80312a6:	4618      	mov	r0, r3
 80312a8:	3730      	adds	r7, #48	; 0x30
 80312aa:	46bd      	mov	sp, r7
 80312ac:	bd80      	pop	{r7, pc}
 80312ae:	bf00      	nop
 80312b0:	58024400 	.word	0x58024400

080312b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80312b4:	b580      	push	{r7, lr}
 80312b6:	b086      	sub	sp, #24
 80312b8:	af00      	add	r7, sp, #0
 80312ba:	6078      	str	r0, [r7, #4]
 80312bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80312be:	687b      	ldr	r3, [r7, #4]
 80312c0:	2b00      	cmp	r3, #0
 80312c2:	d101      	bne.n	80312c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80312c4:	2301      	movs	r3, #1
 80312c6:	e19c      	b.n	8031602 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80312c8:	4b8a      	ldr	r3, [pc, #552]	; (80314f4 <HAL_RCC_ClockConfig+0x240>)
 80312ca:	681b      	ldr	r3, [r3, #0]
 80312cc:	f003 030f 	and.w	r3, r3, #15
 80312d0:	683a      	ldr	r2, [r7, #0]
 80312d2:	429a      	cmp	r2, r3
 80312d4:	d910      	bls.n	80312f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80312d6:	4b87      	ldr	r3, [pc, #540]	; (80314f4 <HAL_RCC_ClockConfig+0x240>)
 80312d8:	681b      	ldr	r3, [r3, #0]
 80312da:	f023 020f 	bic.w	r2, r3, #15
 80312de:	4985      	ldr	r1, [pc, #532]	; (80314f4 <HAL_RCC_ClockConfig+0x240>)
 80312e0:	683b      	ldr	r3, [r7, #0]
 80312e2:	4313      	orrs	r3, r2
 80312e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80312e6:	4b83      	ldr	r3, [pc, #524]	; (80314f4 <HAL_RCC_ClockConfig+0x240>)
 80312e8:	681b      	ldr	r3, [r3, #0]
 80312ea:	f003 030f 	and.w	r3, r3, #15
 80312ee:	683a      	ldr	r2, [r7, #0]
 80312f0:	429a      	cmp	r2, r3
 80312f2:	d001      	beq.n	80312f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80312f4:	2301      	movs	r3, #1
 80312f6:	e184      	b.n	8031602 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80312f8:	687b      	ldr	r3, [r7, #4]
 80312fa:	681b      	ldr	r3, [r3, #0]
 80312fc:	f003 0304 	and.w	r3, r3, #4
 8031300:	2b00      	cmp	r3, #0
 8031302:	d010      	beq.n	8031326 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8031304:	687b      	ldr	r3, [r7, #4]
 8031306:	691a      	ldr	r2, [r3, #16]
 8031308:	4b7b      	ldr	r3, [pc, #492]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 803130a:	699b      	ldr	r3, [r3, #24]
 803130c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031310:	429a      	cmp	r2, r3
 8031312:	d908      	bls.n	8031326 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8031314:	4b78      	ldr	r3, [pc, #480]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031316:	699b      	ldr	r3, [r3, #24]
 8031318:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 803131c:	687b      	ldr	r3, [r7, #4]
 803131e:	691b      	ldr	r3, [r3, #16]
 8031320:	4975      	ldr	r1, [pc, #468]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031322:	4313      	orrs	r3, r2
 8031324:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8031326:	687b      	ldr	r3, [r7, #4]
 8031328:	681b      	ldr	r3, [r3, #0]
 803132a:	f003 0308 	and.w	r3, r3, #8
 803132e:	2b00      	cmp	r3, #0
 8031330:	d010      	beq.n	8031354 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8031332:	687b      	ldr	r3, [r7, #4]
 8031334:	695a      	ldr	r2, [r3, #20]
 8031336:	4b70      	ldr	r3, [pc, #448]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031338:	69db      	ldr	r3, [r3, #28]
 803133a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 803133e:	429a      	cmp	r2, r3
 8031340:	d908      	bls.n	8031354 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8031342:	4b6d      	ldr	r3, [pc, #436]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031344:	69db      	ldr	r3, [r3, #28]
 8031346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 803134a:	687b      	ldr	r3, [r7, #4]
 803134c:	695b      	ldr	r3, [r3, #20]
 803134e:	496a      	ldr	r1, [pc, #424]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031350:	4313      	orrs	r3, r2
 8031352:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8031354:	687b      	ldr	r3, [r7, #4]
 8031356:	681b      	ldr	r3, [r3, #0]
 8031358:	f003 0310 	and.w	r3, r3, #16
 803135c:	2b00      	cmp	r3, #0
 803135e:	d010      	beq.n	8031382 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8031360:	687b      	ldr	r3, [r7, #4]
 8031362:	699a      	ldr	r2, [r3, #24]
 8031364:	4b64      	ldr	r3, [pc, #400]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031366:	69db      	ldr	r3, [r3, #28]
 8031368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 803136c:	429a      	cmp	r2, r3
 803136e:	d908      	bls.n	8031382 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8031370:	4b61      	ldr	r3, [pc, #388]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031372:	69db      	ldr	r3, [r3, #28]
 8031374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8031378:	687b      	ldr	r3, [r7, #4]
 803137a:	699b      	ldr	r3, [r3, #24]
 803137c:	495e      	ldr	r1, [pc, #376]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 803137e:	4313      	orrs	r3, r2
 8031380:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8031382:	687b      	ldr	r3, [r7, #4]
 8031384:	681b      	ldr	r3, [r3, #0]
 8031386:	f003 0320 	and.w	r3, r3, #32
 803138a:	2b00      	cmp	r3, #0
 803138c:	d010      	beq.n	80313b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 803138e:	687b      	ldr	r3, [r7, #4]
 8031390:	69da      	ldr	r2, [r3, #28]
 8031392:	4b59      	ldr	r3, [pc, #356]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031394:	6a1b      	ldr	r3, [r3, #32]
 8031396:	f003 0370 	and.w	r3, r3, #112	; 0x70
 803139a:	429a      	cmp	r2, r3
 803139c:	d908      	bls.n	80313b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 803139e:	4b56      	ldr	r3, [pc, #344]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 80313a0:	6a1b      	ldr	r3, [r3, #32]
 80313a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80313a6:	687b      	ldr	r3, [r7, #4]
 80313a8:	69db      	ldr	r3, [r3, #28]
 80313aa:	4953      	ldr	r1, [pc, #332]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 80313ac:	4313      	orrs	r3, r2
 80313ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80313b0:	687b      	ldr	r3, [r7, #4]
 80313b2:	681b      	ldr	r3, [r3, #0]
 80313b4:	f003 0302 	and.w	r3, r3, #2
 80313b8:	2b00      	cmp	r3, #0
 80313ba:	d010      	beq.n	80313de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80313bc:	687b      	ldr	r3, [r7, #4]
 80313be:	68da      	ldr	r2, [r3, #12]
 80313c0:	4b4d      	ldr	r3, [pc, #308]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 80313c2:	699b      	ldr	r3, [r3, #24]
 80313c4:	f003 030f 	and.w	r3, r3, #15
 80313c8:	429a      	cmp	r2, r3
 80313ca:	d908      	bls.n	80313de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80313cc:	4b4a      	ldr	r3, [pc, #296]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 80313ce:	699b      	ldr	r3, [r3, #24]
 80313d0:	f023 020f 	bic.w	r2, r3, #15
 80313d4:	687b      	ldr	r3, [r7, #4]
 80313d6:	68db      	ldr	r3, [r3, #12]
 80313d8:	4947      	ldr	r1, [pc, #284]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 80313da:	4313      	orrs	r3, r2
 80313dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80313de:	687b      	ldr	r3, [r7, #4]
 80313e0:	681b      	ldr	r3, [r3, #0]
 80313e2:	f003 0301 	and.w	r3, r3, #1
 80313e6:	2b00      	cmp	r3, #0
 80313e8:	d055      	beq.n	8031496 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80313ea:	4b43      	ldr	r3, [pc, #268]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 80313ec:	699b      	ldr	r3, [r3, #24]
 80313ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80313f2:	687b      	ldr	r3, [r7, #4]
 80313f4:	689b      	ldr	r3, [r3, #8]
 80313f6:	4940      	ldr	r1, [pc, #256]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 80313f8:	4313      	orrs	r3, r2
 80313fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80313fc:	687b      	ldr	r3, [r7, #4]
 80313fe:	685b      	ldr	r3, [r3, #4]
 8031400:	2b02      	cmp	r3, #2
 8031402:	d107      	bne.n	8031414 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8031404:	4b3c      	ldr	r3, [pc, #240]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031406:	681b      	ldr	r3, [r3, #0]
 8031408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 803140c:	2b00      	cmp	r3, #0
 803140e:	d121      	bne.n	8031454 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031410:	2301      	movs	r3, #1
 8031412:	e0f6      	b.n	8031602 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8031414:	687b      	ldr	r3, [r7, #4]
 8031416:	685b      	ldr	r3, [r3, #4]
 8031418:	2b03      	cmp	r3, #3
 803141a:	d107      	bne.n	803142c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 803141c:	4b36      	ldr	r3, [pc, #216]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 803141e:	681b      	ldr	r3, [r3, #0]
 8031420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031424:	2b00      	cmp	r3, #0
 8031426:	d115      	bne.n	8031454 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031428:	2301      	movs	r3, #1
 803142a:	e0ea      	b.n	8031602 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 803142c:	687b      	ldr	r3, [r7, #4]
 803142e:	685b      	ldr	r3, [r3, #4]
 8031430:	2b01      	cmp	r3, #1
 8031432:	d107      	bne.n	8031444 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8031434:	4b30      	ldr	r3, [pc, #192]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031436:	681b      	ldr	r3, [r3, #0]
 8031438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803143c:	2b00      	cmp	r3, #0
 803143e:	d109      	bne.n	8031454 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031440:	2301      	movs	r3, #1
 8031442:	e0de      	b.n	8031602 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8031444:	4b2c      	ldr	r3, [pc, #176]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031446:	681b      	ldr	r3, [r3, #0]
 8031448:	f003 0304 	and.w	r3, r3, #4
 803144c:	2b00      	cmp	r3, #0
 803144e:	d101      	bne.n	8031454 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031450:	2301      	movs	r3, #1
 8031452:	e0d6      	b.n	8031602 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8031454:	4b28      	ldr	r3, [pc, #160]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031456:	691b      	ldr	r3, [r3, #16]
 8031458:	f023 0207 	bic.w	r2, r3, #7
 803145c:	687b      	ldr	r3, [r7, #4]
 803145e:	685b      	ldr	r3, [r3, #4]
 8031460:	4925      	ldr	r1, [pc, #148]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031462:	4313      	orrs	r3, r2
 8031464:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031466:	f7f9 fb0f 	bl	802aa88 <HAL_GetTick>
 803146a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 803146c:	e00a      	b.n	8031484 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 803146e:	f7f9 fb0b 	bl	802aa88 <HAL_GetTick>
 8031472:	4602      	mov	r2, r0
 8031474:	697b      	ldr	r3, [r7, #20]
 8031476:	1ad3      	subs	r3, r2, r3
 8031478:	f241 3288 	movw	r2, #5000	; 0x1388
 803147c:	4293      	cmp	r3, r2
 803147e:	d901      	bls.n	8031484 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8031480:	2303      	movs	r3, #3
 8031482:	e0be      	b.n	8031602 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8031484:	4b1c      	ldr	r3, [pc, #112]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 8031486:	691b      	ldr	r3, [r3, #16]
 8031488:	f003 0238 	and.w	r2, r3, #56	; 0x38
 803148c:	687b      	ldr	r3, [r7, #4]
 803148e:	685b      	ldr	r3, [r3, #4]
 8031490:	00db      	lsls	r3, r3, #3
 8031492:	429a      	cmp	r2, r3
 8031494:	d1eb      	bne.n	803146e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8031496:	687b      	ldr	r3, [r7, #4]
 8031498:	681b      	ldr	r3, [r3, #0]
 803149a:	f003 0302 	and.w	r3, r3, #2
 803149e:	2b00      	cmp	r3, #0
 80314a0:	d010      	beq.n	80314c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80314a2:	687b      	ldr	r3, [r7, #4]
 80314a4:	68da      	ldr	r2, [r3, #12]
 80314a6:	4b14      	ldr	r3, [pc, #80]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 80314a8:	699b      	ldr	r3, [r3, #24]
 80314aa:	f003 030f 	and.w	r3, r3, #15
 80314ae:	429a      	cmp	r2, r3
 80314b0:	d208      	bcs.n	80314c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80314b2:	4b11      	ldr	r3, [pc, #68]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 80314b4:	699b      	ldr	r3, [r3, #24]
 80314b6:	f023 020f 	bic.w	r2, r3, #15
 80314ba:	687b      	ldr	r3, [r7, #4]
 80314bc:	68db      	ldr	r3, [r3, #12]
 80314be:	490e      	ldr	r1, [pc, #56]	; (80314f8 <HAL_RCC_ClockConfig+0x244>)
 80314c0:	4313      	orrs	r3, r2
 80314c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80314c4:	4b0b      	ldr	r3, [pc, #44]	; (80314f4 <HAL_RCC_ClockConfig+0x240>)
 80314c6:	681b      	ldr	r3, [r3, #0]
 80314c8:	f003 030f 	and.w	r3, r3, #15
 80314cc:	683a      	ldr	r2, [r7, #0]
 80314ce:	429a      	cmp	r2, r3
 80314d0:	d214      	bcs.n	80314fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80314d2:	4b08      	ldr	r3, [pc, #32]	; (80314f4 <HAL_RCC_ClockConfig+0x240>)
 80314d4:	681b      	ldr	r3, [r3, #0]
 80314d6:	f023 020f 	bic.w	r2, r3, #15
 80314da:	4906      	ldr	r1, [pc, #24]	; (80314f4 <HAL_RCC_ClockConfig+0x240>)
 80314dc:	683b      	ldr	r3, [r7, #0]
 80314de:	4313      	orrs	r3, r2
 80314e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80314e2:	4b04      	ldr	r3, [pc, #16]	; (80314f4 <HAL_RCC_ClockConfig+0x240>)
 80314e4:	681b      	ldr	r3, [r3, #0]
 80314e6:	f003 030f 	and.w	r3, r3, #15
 80314ea:	683a      	ldr	r2, [r7, #0]
 80314ec:	429a      	cmp	r2, r3
 80314ee:	d005      	beq.n	80314fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80314f0:	2301      	movs	r3, #1
 80314f2:	e086      	b.n	8031602 <HAL_RCC_ClockConfig+0x34e>
 80314f4:	52002000 	.word	0x52002000
 80314f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80314fc:	687b      	ldr	r3, [r7, #4]
 80314fe:	681b      	ldr	r3, [r3, #0]
 8031500:	f003 0304 	and.w	r3, r3, #4
 8031504:	2b00      	cmp	r3, #0
 8031506:	d010      	beq.n	803152a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8031508:	687b      	ldr	r3, [r7, #4]
 803150a:	691a      	ldr	r2, [r3, #16]
 803150c:	4b3f      	ldr	r3, [pc, #252]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 803150e:	699b      	ldr	r3, [r3, #24]
 8031510:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031514:	429a      	cmp	r2, r3
 8031516:	d208      	bcs.n	803152a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8031518:	4b3c      	ldr	r3, [pc, #240]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 803151a:	699b      	ldr	r3, [r3, #24]
 803151c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8031520:	687b      	ldr	r3, [r7, #4]
 8031522:	691b      	ldr	r3, [r3, #16]
 8031524:	4939      	ldr	r1, [pc, #228]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 8031526:	4313      	orrs	r3, r2
 8031528:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 803152a:	687b      	ldr	r3, [r7, #4]
 803152c:	681b      	ldr	r3, [r3, #0]
 803152e:	f003 0308 	and.w	r3, r3, #8
 8031532:	2b00      	cmp	r3, #0
 8031534:	d010      	beq.n	8031558 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8031536:	687b      	ldr	r3, [r7, #4]
 8031538:	695a      	ldr	r2, [r3, #20]
 803153a:	4b34      	ldr	r3, [pc, #208]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 803153c:	69db      	ldr	r3, [r3, #28]
 803153e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031542:	429a      	cmp	r2, r3
 8031544:	d208      	bcs.n	8031558 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8031546:	4b31      	ldr	r3, [pc, #196]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 8031548:	69db      	ldr	r3, [r3, #28]
 803154a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 803154e:	687b      	ldr	r3, [r7, #4]
 8031550:	695b      	ldr	r3, [r3, #20]
 8031552:	492e      	ldr	r1, [pc, #184]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 8031554:	4313      	orrs	r3, r2
 8031556:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8031558:	687b      	ldr	r3, [r7, #4]
 803155a:	681b      	ldr	r3, [r3, #0]
 803155c:	f003 0310 	and.w	r3, r3, #16
 8031560:	2b00      	cmp	r3, #0
 8031562:	d010      	beq.n	8031586 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8031564:	687b      	ldr	r3, [r7, #4]
 8031566:	699a      	ldr	r2, [r3, #24]
 8031568:	4b28      	ldr	r3, [pc, #160]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 803156a:	69db      	ldr	r3, [r3, #28]
 803156c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8031570:	429a      	cmp	r2, r3
 8031572:	d208      	bcs.n	8031586 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8031574:	4b25      	ldr	r3, [pc, #148]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 8031576:	69db      	ldr	r3, [r3, #28]
 8031578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 803157c:	687b      	ldr	r3, [r7, #4]
 803157e:	699b      	ldr	r3, [r3, #24]
 8031580:	4922      	ldr	r1, [pc, #136]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 8031582:	4313      	orrs	r3, r2
 8031584:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8031586:	687b      	ldr	r3, [r7, #4]
 8031588:	681b      	ldr	r3, [r3, #0]
 803158a:	f003 0320 	and.w	r3, r3, #32
 803158e:	2b00      	cmp	r3, #0
 8031590:	d010      	beq.n	80315b4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8031592:	687b      	ldr	r3, [r7, #4]
 8031594:	69da      	ldr	r2, [r3, #28]
 8031596:	4b1d      	ldr	r3, [pc, #116]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 8031598:	6a1b      	ldr	r3, [r3, #32]
 803159a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 803159e:	429a      	cmp	r2, r3
 80315a0:	d208      	bcs.n	80315b4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80315a2:	4b1a      	ldr	r3, [pc, #104]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 80315a4:	6a1b      	ldr	r3, [r3, #32]
 80315a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80315aa:	687b      	ldr	r3, [r7, #4]
 80315ac:	69db      	ldr	r3, [r3, #28]
 80315ae:	4917      	ldr	r1, [pc, #92]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 80315b0:	4313      	orrs	r3, r2
 80315b2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80315b4:	f000 f834 	bl	8031620 <HAL_RCC_GetSysClockFreq>
 80315b8:	4602      	mov	r2, r0
 80315ba:	4b14      	ldr	r3, [pc, #80]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 80315bc:	699b      	ldr	r3, [r3, #24]
 80315be:	0a1b      	lsrs	r3, r3, #8
 80315c0:	f003 030f 	and.w	r3, r3, #15
 80315c4:	4912      	ldr	r1, [pc, #72]	; (8031610 <HAL_RCC_ClockConfig+0x35c>)
 80315c6:	5ccb      	ldrb	r3, [r1, r3]
 80315c8:	f003 031f 	and.w	r3, r3, #31
 80315cc:	fa22 f303 	lsr.w	r3, r2, r3
 80315d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80315d2:	4b0e      	ldr	r3, [pc, #56]	; (803160c <HAL_RCC_ClockConfig+0x358>)
 80315d4:	699b      	ldr	r3, [r3, #24]
 80315d6:	f003 030f 	and.w	r3, r3, #15
 80315da:	4a0d      	ldr	r2, [pc, #52]	; (8031610 <HAL_RCC_ClockConfig+0x35c>)
 80315dc:	5cd3      	ldrb	r3, [r2, r3]
 80315de:	f003 031f 	and.w	r3, r3, #31
 80315e2:	693a      	ldr	r2, [r7, #16]
 80315e4:	fa22 f303 	lsr.w	r3, r2, r3
 80315e8:	4a0a      	ldr	r2, [pc, #40]	; (8031614 <HAL_RCC_ClockConfig+0x360>)
 80315ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80315ec:	4a0a      	ldr	r2, [pc, #40]	; (8031618 <HAL_RCC_ClockConfig+0x364>)
 80315ee:	693b      	ldr	r3, [r7, #16]
 80315f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80315f2:	4b0a      	ldr	r3, [pc, #40]	; (803161c <HAL_RCC_ClockConfig+0x368>)
 80315f4:	681b      	ldr	r3, [r3, #0]
 80315f6:	4618      	mov	r0, r3
 80315f8:	f7f9 f9fc 	bl	802a9f4 <HAL_InitTick>
 80315fc:	4603      	mov	r3, r0
 80315fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8031600:	7bfb      	ldrb	r3, [r7, #15]
}
 8031602:	4618      	mov	r0, r3
 8031604:	3718      	adds	r7, #24
 8031606:	46bd      	mov	sp, r7
 8031608:	bd80      	pop	{r7, pc}
 803160a:	bf00      	nop
 803160c:	58024400 	.word	0x58024400
 8031610:	080582dc 	.word	0x080582dc
 8031614:	24000008 	.word	0x24000008
 8031618:	24000004 	.word	0x24000004
 803161c:	2400000c 	.word	0x2400000c

08031620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8031620:	b480      	push	{r7}
 8031622:	b089      	sub	sp, #36	; 0x24
 8031624:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8031626:	4bb3      	ldr	r3, [pc, #716]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031628:	691b      	ldr	r3, [r3, #16]
 803162a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803162e:	2b18      	cmp	r3, #24
 8031630:	f200 8155 	bhi.w	80318de <HAL_RCC_GetSysClockFreq+0x2be>
 8031634:	a201      	add	r2, pc, #4	; (adr r2, 803163c <HAL_RCC_GetSysClockFreq+0x1c>)
 8031636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803163a:	bf00      	nop
 803163c:	080316a1 	.word	0x080316a1
 8031640:	080318df 	.word	0x080318df
 8031644:	080318df 	.word	0x080318df
 8031648:	080318df 	.word	0x080318df
 803164c:	080318df 	.word	0x080318df
 8031650:	080318df 	.word	0x080318df
 8031654:	080318df 	.word	0x080318df
 8031658:	080318df 	.word	0x080318df
 803165c:	080316c7 	.word	0x080316c7
 8031660:	080318df 	.word	0x080318df
 8031664:	080318df 	.word	0x080318df
 8031668:	080318df 	.word	0x080318df
 803166c:	080318df 	.word	0x080318df
 8031670:	080318df 	.word	0x080318df
 8031674:	080318df 	.word	0x080318df
 8031678:	080318df 	.word	0x080318df
 803167c:	080316cd 	.word	0x080316cd
 8031680:	080318df 	.word	0x080318df
 8031684:	080318df 	.word	0x080318df
 8031688:	080318df 	.word	0x080318df
 803168c:	080318df 	.word	0x080318df
 8031690:	080318df 	.word	0x080318df
 8031694:	080318df 	.word	0x080318df
 8031698:	080318df 	.word	0x080318df
 803169c:	080316d3 	.word	0x080316d3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80316a0:	4b94      	ldr	r3, [pc, #592]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80316a2:	681b      	ldr	r3, [r3, #0]
 80316a4:	f003 0320 	and.w	r3, r3, #32
 80316a8:	2b00      	cmp	r3, #0
 80316aa:	d009      	beq.n	80316c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80316ac:	4b91      	ldr	r3, [pc, #580]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80316ae:	681b      	ldr	r3, [r3, #0]
 80316b0:	08db      	lsrs	r3, r3, #3
 80316b2:	f003 0303 	and.w	r3, r3, #3
 80316b6:	4a90      	ldr	r2, [pc, #576]	; (80318f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80316b8:	fa22 f303 	lsr.w	r3, r2, r3
 80316bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80316be:	e111      	b.n	80318e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80316c0:	4b8d      	ldr	r3, [pc, #564]	; (80318f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80316c2:	61bb      	str	r3, [r7, #24]
    break;
 80316c4:	e10e      	b.n	80318e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80316c6:	4b8d      	ldr	r3, [pc, #564]	; (80318fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80316c8:	61bb      	str	r3, [r7, #24]
    break;
 80316ca:	e10b      	b.n	80318e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80316cc:	4b8c      	ldr	r3, [pc, #560]	; (8031900 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80316ce:	61bb      	str	r3, [r7, #24]
    break;
 80316d0:	e108      	b.n	80318e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80316d2:	4b88      	ldr	r3, [pc, #544]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80316d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80316d6:	f003 0303 	and.w	r3, r3, #3
 80316da:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80316dc:	4b85      	ldr	r3, [pc, #532]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80316de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80316e0:	091b      	lsrs	r3, r3, #4
 80316e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80316e6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80316e8:	4b82      	ldr	r3, [pc, #520]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80316ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80316ec:	f003 0301 	and.w	r3, r3, #1
 80316f0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80316f2:	4b80      	ldr	r3, [pc, #512]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80316f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80316f6:	08db      	lsrs	r3, r3, #3
 80316f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80316fc:	68fa      	ldr	r2, [r7, #12]
 80316fe:	fb02 f303 	mul.w	r3, r2, r3
 8031702:	ee07 3a90 	vmov	s15, r3
 8031706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803170a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 803170e:	693b      	ldr	r3, [r7, #16]
 8031710:	2b00      	cmp	r3, #0
 8031712:	f000 80e1 	beq.w	80318d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8031716:	697b      	ldr	r3, [r7, #20]
 8031718:	2b02      	cmp	r3, #2
 803171a:	f000 8083 	beq.w	8031824 <HAL_RCC_GetSysClockFreq+0x204>
 803171e:	697b      	ldr	r3, [r7, #20]
 8031720:	2b02      	cmp	r3, #2
 8031722:	f200 80a1 	bhi.w	8031868 <HAL_RCC_GetSysClockFreq+0x248>
 8031726:	697b      	ldr	r3, [r7, #20]
 8031728:	2b00      	cmp	r3, #0
 803172a:	d003      	beq.n	8031734 <HAL_RCC_GetSysClockFreq+0x114>
 803172c:	697b      	ldr	r3, [r7, #20]
 803172e:	2b01      	cmp	r3, #1
 8031730:	d056      	beq.n	80317e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8031732:	e099      	b.n	8031868 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8031734:	4b6f      	ldr	r3, [pc, #444]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031736:	681b      	ldr	r3, [r3, #0]
 8031738:	f003 0320 	and.w	r3, r3, #32
 803173c:	2b00      	cmp	r3, #0
 803173e:	d02d      	beq.n	803179c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8031740:	4b6c      	ldr	r3, [pc, #432]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031742:	681b      	ldr	r3, [r3, #0]
 8031744:	08db      	lsrs	r3, r3, #3
 8031746:	f003 0303 	and.w	r3, r3, #3
 803174a:	4a6b      	ldr	r2, [pc, #428]	; (80318f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 803174c:	fa22 f303 	lsr.w	r3, r2, r3
 8031750:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031752:	687b      	ldr	r3, [r7, #4]
 8031754:	ee07 3a90 	vmov	s15, r3
 8031758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803175c:	693b      	ldr	r3, [r7, #16]
 803175e:	ee07 3a90 	vmov	s15, r3
 8031762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8031766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803176a:	4b62      	ldr	r3, [pc, #392]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803176e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8031772:	ee07 3a90 	vmov	s15, r3
 8031776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803177a:	ed97 6a02 	vldr	s12, [r7, #8]
 803177e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8031904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8031782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803178a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803178e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8031792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031796:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 803179a:	e087      	b.n	80318ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 803179c:	693b      	ldr	r3, [r7, #16]
 803179e:	ee07 3a90 	vmov	s15, r3
 80317a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80317a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8031908 <HAL_RCC_GetSysClockFreq+0x2e8>
 80317aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80317ae:	4b51      	ldr	r3, [pc, #324]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80317b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80317b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80317b6:	ee07 3a90 	vmov	s15, r3
 80317ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80317be:	ed97 6a02 	vldr	s12, [r7, #8]
 80317c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8031904 <HAL_RCC_GetSysClockFreq+0x2e4>
 80317c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80317ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80317ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80317d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80317d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80317da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80317de:	e065      	b.n	80318ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80317e0:	693b      	ldr	r3, [r7, #16]
 80317e2:	ee07 3a90 	vmov	s15, r3
 80317e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80317ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 803190c <HAL_RCC_GetSysClockFreq+0x2ec>
 80317ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80317f2:	4b40      	ldr	r3, [pc, #256]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80317f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80317f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80317fa:	ee07 3a90 	vmov	s15, r3
 80317fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031802:	ed97 6a02 	vldr	s12, [r7, #8]
 8031806:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8031904 <HAL_RCC_GetSysClockFreq+0x2e4>
 803180a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803180e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8031816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803181a:	ee67 7a27 	vmul.f32	s15, s14, s15
 803181e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031822:	e043      	b.n	80318ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031824:	693b      	ldr	r3, [r7, #16]
 8031826:	ee07 3a90 	vmov	s15, r3
 803182a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803182e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8031910 <HAL_RCC_GetSysClockFreq+0x2f0>
 8031832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8031836:	4b2f      	ldr	r3, [pc, #188]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803183a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803183e:	ee07 3a90 	vmov	s15, r3
 8031842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031846:	ed97 6a02 	vldr	s12, [r7, #8]
 803184a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8031904 <HAL_RCC_GetSysClockFreq+0x2e4>
 803184e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803185a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803185e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031866:	e021      	b.n	80318ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031868:	693b      	ldr	r3, [r7, #16]
 803186a:	ee07 3a90 	vmov	s15, r3
 803186e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8031872:	eddf 6a26 	vldr	s13, [pc, #152]	; 803190c <HAL_RCC_GetSysClockFreq+0x2ec>
 8031876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803187a:	4b1e      	ldr	r3, [pc, #120]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803187e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8031882:	ee07 3a90 	vmov	s15, r3
 8031886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803188a:	ed97 6a02 	vldr	s12, [r7, #8]
 803188e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8031904 <HAL_RCC_GetSysClockFreq+0x2e4>
 8031892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803189a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803189e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80318a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80318a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80318aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80318ac:	4b11      	ldr	r3, [pc, #68]	; (80318f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80318b0:	0a5b      	lsrs	r3, r3, #9
 80318b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80318b6:	3301      	adds	r3, #1
 80318b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80318ba:	683b      	ldr	r3, [r7, #0]
 80318bc:	ee07 3a90 	vmov	s15, r3
 80318c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80318c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80318c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80318cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80318d0:	ee17 3a90 	vmov	r3, s15
 80318d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80318d6:	e005      	b.n	80318e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80318d8:	2300      	movs	r3, #0
 80318da:	61bb      	str	r3, [r7, #24]
    break;
 80318dc:	e002      	b.n	80318e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80318de:	4b07      	ldr	r3, [pc, #28]	; (80318fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80318e0:	61bb      	str	r3, [r7, #24]
    break;
 80318e2:	bf00      	nop
  }

  return sysclockfreq;
 80318e4:	69bb      	ldr	r3, [r7, #24]
}
 80318e6:	4618      	mov	r0, r3
 80318e8:	3724      	adds	r7, #36	; 0x24
 80318ea:	46bd      	mov	sp, r7
 80318ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80318f0:	4770      	bx	lr
 80318f2:	bf00      	nop
 80318f4:	58024400 	.word	0x58024400
 80318f8:	03d09000 	.word	0x03d09000
 80318fc:	003d0900 	.word	0x003d0900
 8031900:	017d7840 	.word	0x017d7840
 8031904:	46000000 	.word	0x46000000
 8031908:	4c742400 	.word	0x4c742400
 803190c:	4a742400 	.word	0x4a742400
 8031910:	4bbebc20 	.word	0x4bbebc20

08031914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8031914:	b580      	push	{r7, lr}
 8031916:	b082      	sub	sp, #8
 8031918:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 803191a:	f7ff fe81 	bl	8031620 <HAL_RCC_GetSysClockFreq>
 803191e:	4602      	mov	r2, r0
 8031920:	4b10      	ldr	r3, [pc, #64]	; (8031964 <HAL_RCC_GetHCLKFreq+0x50>)
 8031922:	699b      	ldr	r3, [r3, #24]
 8031924:	0a1b      	lsrs	r3, r3, #8
 8031926:	f003 030f 	and.w	r3, r3, #15
 803192a:	490f      	ldr	r1, [pc, #60]	; (8031968 <HAL_RCC_GetHCLKFreq+0x54>)
 803192c:	5ccb      	ldrb	r3, [r1, r3]
 803192e:	f003 031f 	and.w	r3, r3, #31
 8031932:	fa22 f303 	lsr.w	r3, r2, r3
 8031936:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8031938:	4b0a      	ldr	r3, [pc, #40]	; (8031964 <HAL_RCC_GetHCLKFreq+0x50>)
 803193a:	699b      	ldr	r3, [r3, #24]
 803193c:	f003 030f 	and.w	r3, r3, #15
 8031940:	4a09      	ldr	r2, [pc, #36]	; (8031968 <HAL_RCC_GetHCLKFreq+0x54>)
 8031942:	5cd3      	ldrb	r3, [r2, r3]
 8031944:	f003 031f 	and.w	r3, r3, #31
 8031948:	687a      	ldr	r2, [r7, #4]
 803194a:	fa22 f303 	lsr.w	r3, r2, r3
 803194e:	4a07      	ldr	r2, [pc, #28]	; (803196c <HAL_RCC_GetHCLKFreq+0x58>)
 8031950:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8031952:	4a07      	ldr	r2, [pc, #28]	; (8031970 <HAL_RCC_GetHCLKFreq+0x5c>)
 8031954:	687b      	ldr	r3, [r7, #4]
 8031956:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8031958:	4b04      	ldr	r3, [pc, #16]	; (803196c <HAL_RCC_GetHCLKFreq+0x58>)
 803195a:	681b      	ldr	r3, [r3, #0]
}
 803195c:	4618      	mov	r0, r3
 803195e:	3708      	adds	r7, #8
 8031960:	46bd      	mov	sp, r7
 8031962:	bd80      	pop	{r7, pc}
 8031964:	58024400 	.word	0x58024400
 8031968:	080582dc 	.word	0x080582dc
 803196c:	24000008 	.word	0x24000008
 8031970:	24000004 	.word	0x24000004

08031974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8031974:	b580      	push	{r7, lr}
 8031976:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8031978:	f7ff ffcc 	bl	8031914 <HAL_RCC_GetHCLKFreq>
 803197c:	4602      	mov	r2, r0
 803197e:	4b06      	ldr	r3, [pc, #24]	; (8031998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8031980:	69db      	ldr	r3, [r3, #28]
 8031982:	091b      	lsrs	r3, r3, #4
 8031984:	f003 0307 	and.w	r3, r3, #7
 8031988:	4904      	ldr	r1, [pc, #16]	; (803199c <HAL_RCC_GetPCLK1Freq+0x28>)
 803198a:	5ccb      	ldrb	r3, [r1, r3]
 803198c:	f003 031f 	and.w	r3, r3, #31
 8031990:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8031994:	4618      	mov	r0, r3
 8031996:	bd80      	pop	{r7, pc}
 8031998:	58024400 	.word	0x58024400
 803199c:	080582dc 	.word	0x080582dc

080319a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80319a0:	b580      	push	{r7, lr}
 80319a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80319a4:	f7ff ffb6 	bl	8031914 <HAL_RCC_GetHCLKFreq>
 80319a8:	4602      	mov	r2, r0
 80319aa:	4b06      	ldr	r3, [pc, #24]	; (80319c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80319ac:	69db      	ldr	r3, [r3, #28]
 80319ae:	0a1b      	lsrs	r3, r3, #8
 80319b0:	f003 0307 	and.w	r3, r3, #7
 80319b4:	4904      	ldr	r1, [pc, #16]	; (80319c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80319b6:	5ccb      	ldrb	r3, [r1, r3]
 80319b8:	f003 031f 	and.w	r3, r3, #31
 80319bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80319c0:	4618      	mov	r0, r3
 80319c2:	bd80      	pop	{r7, pc}
 80319c4:	58024400 	.word	0x58024400
 80319c8:	080582dc 	.word	0x080582dc

080319cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80319cc:	b580      	push	{r7, lr}
 80319ce:	b086      	sub	sp, #24
 80319d0:	af00      	add	r7, sp, #0
 80319d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80319d4:	2300      	movs	r3, #0
 80319d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80319d8:	2300      	movs	r3, #0
 80319da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80319dc:	687b      	ldr	r3, [r7, #4]
 80319de:	681b      	ldr	r3, [r3, #0]
 80319e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80319e4:	2b00      	cmp	r3, #0
 80319e6:	d03f      	beq.n	8031a68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80319e8:	687b      	ldr	r3, [r7, #4]
 80319ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80319ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80319f0:	d02a      	beq.n	8031a48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80319f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80319f6:	d824      	bhi.n	8031a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80319f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80319fc:	d018      	beq.n	8031a30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80319fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031a02:	d81e      	bhi.n	8031a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8031a04:	2b00      	cmp	r3, #0
 8031a06:	d003      	beq.n	8031a10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8031a08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8031a0c:	d007      	beq.n	8031a1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8031a0e:	e018      	b.n	8031a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031a10:	4ba3      	ldr	r3, [pc, #652]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031a14:	4aa2      	ldr	r2, [pc, #648]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031a1c:	e015      	b.n	8031a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8031a1e:	687b      	ldr	r3, [r7, #4]
 8031a20:	3304      	adds	r3, #4
 8031a22:	2102      	movs	r1, #2
 8031a24:	4618      	mov	r0, r3
 8031a26:	f001 f9d5 	bl	8032dd4 <RCCEx_PLL2_Config>
 8031a2a:	4603      	mov	r3, r0
 8031a2c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031a2e:	e00c      	b.n	8031a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8031a30:	687b      	ldr	r3, [r7, #4]
 8031a32:	3324      	adds	r3, #36	; 0x24
 8031a34:	2102      	movs	r1, #2
 8031a36:	4618      	mov	r0, r3
 8031a38:	f001 fa7e 	bl	8032f38 <RCCEx_PLL3_Config>
 8031a3c:	4603      	mov	r3, r0
 8031a3e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031a40:	e003      	b.n	8031a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031a42:	2301      	movs	r3, #1
 8031a44:	75fb      	strb	r3, [r7, #23]
      break;
 8031a46:	e000      	b.n	8031a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8031a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031a4a:	7dfb      	ldrb	r3, [r7, #23]
 8031a4c:	2b00      	cmp	r3, #0
 8031a4e:	d109      	bne.n	8031a64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8031a50:	4b93      	ldr	r3, [pc, #588]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031a54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8031a58:	687b      	ldr	r3, [r7, #4]
 8031a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8031a5c:	4990      	ldr	r1, [pc, #576]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031a5e:	4313      	orrs	r3, r2
 8031a60:	650b      	str	r3, [r1, #80]	; 0x50
 8031a62:	e001      	b.n	8031a68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031a64:	7dfb      	ldrb	r3, [r7, #23]
 8031a66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8031a68:	687b      	ldr	r3, [r7, #4]
 8031a6a:	681b      	ldr	r3, [r3, #0]
 8031a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031a70:	2b00      	cmp	r3, #0
 8031a72:	d03d      	beq.n	8031af0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8031a74:	687b      	ldr	r3, [r7, #4]
 8031a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031a78:	2b04      	cmp	r3, #4
 8031a7a:	d826      	bhi.n	8031aca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8031a7c:	a201      	add	r2, pc, #4	; (adr r2, 8031a84 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8031a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8031a82:	bf00      	nop
 8031a84:	08031a99 	.word	0x08031a99
 8031a88:	08031aa7 	.word	0x08031aa7
 8031a8c:	08031ab9 	.word	0x08031ab9
 8031a90:	08031ad1 	.word	0x08031ad1
 8031a94:	08031ad1 	.word	0x08031ad1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031a98:	4b81      	ldr	r3, [pc, #516]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031a9c:	4a80      	ldr	r2, [pc, #512]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031aa4:	e015      	b.n	8031ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031aa6:	687b      	ldr	r3, [r7, #4]
 8031aa8:	3304      	adds	r3, #4
 8031aaa:	2100      	movs	r1, #0
 8031aac:	4618      	mov	r0, r3
 8031aae:	f001 f991 	bl	8032dd4 <RCCEx_PLL2_Config>
 8031ab2:	4603      	mov	r3, r0
 8031ab4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031ab6:	e00c      	b.n	8031ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031ab8:	687b      	ldr	r3, [r7, #4]
 8031aba:	3324      	adds	r3, #36	; 0x24
 8031abc:	2100      	movs	r1, #0
 8031abe:	4618      	mov	r0, r3
 8031ac0:	f001 fa3a 	bl	8032f38 <RCCEx_PLL3_Config>
 8031ac4:	4603      	mov	r3, r0
 8031ac6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031ac8:	e003      	b.n	8031ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031aca:	2301      	movs	r3, #1
 8031acc:	75fb      	strb	r3, [r7, #23]
      break;
 8031ace:	e000      	b.n	8031ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8031ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031ad2:	7dfb      	ldrb	r3, [r7, #23]
 8031ad4:	2b00      	cmp	r3, #0
 8031ad6:	d109      	bne.n	8031aec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8031ad8:	4b71      	ldr	r3, [pc, #452]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031adc:	f023 0207 	bic.w	r2, r3, #7
 8031ae0:	687b      	ldr	r3, [r7, #4]
 8031ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031ae4:	496e      	ldr	r1, [pc, #440]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031ae6:	4313      	orrs	r3, r2
 8031ae8:	650b      	str	r3, [r1, #80]	; 0x50
 8031aea:	e001      	b.n	8031af0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031aec:	7dfb      	ldrb	r3, [r7, #23]
 8031aee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8031af0:	687b      	ldr	r3, [r7, #4]
 8031af2:	681b      	ldr	r3, [r3, #0]
 8031af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8031af8:	2b00      	cmp	r3, #0
 8031afa:	d042      	beq.n	8031b82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8031afc:	687b      	ldr	r3, [r7, #4]
 8031afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8031b04:	d02b      	beq.n	8031b5e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8031b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8031b0a:	d825      	bhi.n	8031b58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031b0c:	2bc0      	cmp	r3, #192	; 0xc0
 8031b0e:	d028      	beq.n	8031b62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8031b10:	2bc0      	cmp	r3, #192	; 0xc0
 8031b12:	d821      	bhi.n	8031b58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031b14:	2b80      	cmp	r3, #128	; 0x80
 8031b16:	d016      	beq.n	8031b46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8031b18:	2b80      	cmp	r3, #128	; 0x80
 8031b1a:	d81d      	bhi.n	8031b58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031b1c:	2b00      	cmp	r3, #0
 8031b1e:	d002      	beq.n	8031b26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8031b20:	2b40      	cmp	r3, #64	; 0x40
 8031b22:	d007      	beq.n	8031b34 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8031b24:	e018      	b.n	8031b58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031b26:	4b5e      	ldr	r3, [pc, #376]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031b2a:	4a5d      	ldr	r2, [pc, #372]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031b30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031b32:	e017      	b.n	8031b64 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031b34:	687b      	ldr	r3, [r7, #4]
 8031b36:	3304      	adds	r3, #4
 8031b38:	2100      	movs	r1, #0
 8031b3a:	4618      	mov	r0, r3
 8031b3c:	f001 f94a 	bl	8032dd4 <RCCEx_PLL2_Config>
 8031b40:	4603      	mov	r3, r0
 8031b42:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031b44:	e00e      	b.n	8031b64 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031b46:	687b      	ldr	r3, [r7, #4]
 8031b48:	3324      	adds	r3, #36	; 0x24
 8031b4a:	2100      	movs	r1, #0
 8031b4c:	4618      	mov	r0, r3
 8031b4e:	f001 f9f3 	bl	8032f38 <RCCEx_PLL3_Config>
 8031b52:	4603      	mov	r3, r0
 8031b54:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031b56:	e005      	b.n	8031b64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031b58:	2301      	movs	r3, #1
 8031b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8031b5c:	e002      	b.n	8031b64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8031b5e:	bf00      	nop
 8031b60:	e000      	b.n	8031b64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8031b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031b64:	7dfb      	ldrb	r3, [r7, #23]
 8031b66:	2b00      	cmp	r3, #0
 8031b68:	d109      	bne.n	8031b7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8031b6a:	4b4d      	ldr	r3, [pc, #308]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031b6e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8031b72:	687b      	ldr	r3, [r7, #4]
 8031b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031b76:	494a      	ldr	r1, [pc, #296]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031b78:	4313      	orrs	r3, r2
 8031b7a:	650b      	str	r3, [r1, #80]	; 0x50
 8031b7c:	e001      	b.n	8031b82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031b7e:	7dfb      	ldrb	r3, [r7, #23]
 8031b80:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8031b82:	687b      	ldr	r3, [r7, #4]
 8031b84:	681b      	ldr	r3, [r3, #0]
 8031b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8031b8a:	2b00      	cmp	r3, #0
 8031b8c:	d049      	beq.n	8031c22 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8031b8e:	687b      	ldr	r3, [r7, #4]
 8031b90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8031b94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8031b98:	d030      	beq.n	8031bfc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8031b9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8031b9e:	d82a      	bhi.n	8031bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031ba0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8031ba4:	d02c      	beq.n	8031c00 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8031ba6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8031baa:	d824      	bhi.n	8031bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8031bb0:	d018      	beq.n	8031be4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8031bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8031bb6:	d81e      	bhi.n	8031bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031bb8:	2b00      	cmp	r3, #0
 8031bba:	d003      	beq.n	8031bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8031bbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031bc0:	d007      	beq.n	8031bd2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8031bc2:	e018      	b.n	8031bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031bc4:	4b36      	ldr	r3, [pc, #216]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031bc8:	4a35      	ldr	r2, [pc, #212]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031bce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031bd0:	e017      	b.n	8031c02 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031bd2:	687b      	ldr	r3, [r7, #4]
 8031bd4:	3304      	adds	r3, #4
 8031bd6:	2100      	movs	r1, #0
 8031bd8:	4618      	mov	r0, r3
 8031bda:	f001 f8fb 	bl	8032dd4 <RCCEx_PLL2_Config>
 8031bde:	4603      	mov	r3, r0
 8031be0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8031be2:	e00e      	b.n	8031c02 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031be4:	687b      	ldr	r3, [r7, #4]
 8031be6:	3324      	adds	r3, #36	; 0x24
 8031be8:	2100      	movs	r1, #0
 8031bea:	4618      	mov	r0, r3
 8031bec:	f001 f9a4 	bl	8032f38 <RCCEx_PLL3_Config>
 8031bf0:	4603      	mov	r3, r0
 8031bf2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031bf4:	e005      	b.n	8031c02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8031bf6:	2301      	movs	r3, #1
 8031bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8031bfa:	e002      	b.n	8031c02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8031bfc:	bf00      	nop
 8031bfe:	e000      	b.n	8031c02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8031c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031c02:	7dfb      	ldrb	r3, [r7, #23]
 8031c04:	2b00      	cmp	r3, #0
 8031c06:	d10a      	bne.n	8031c1e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8031c08:	4b25      	ldr	r3, [pc, #148]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031c0c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8031c10:	687b      	ldr	r3, [r7, #4]
 8031c12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8031c16:	4922      	ldr	r1, [pc, #136]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c18:	4313      	orrs	r3, r2
 8031c1a:	658b      	str	r3, [r1, #88]	; 0x58
 8031c1c:	e001      	b.n	8031c22 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031c1e:	7dfb      	ldrb	r3, [r7, #23]
 8031c20:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8031c22:	687b      	ldr	r3, [r7, #4]
 8031c24:	681b      	ldr	r3, [r3, #0]
 8031c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031c2a:	2b00      	cmp	r3, #0
 8031c2c:	d04b      	beq.n	8031cc6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8031c2e:	687b      	ldr	r3, [r7, #4]
 8031c30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8031c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8031c38:	d030      	beq.n	8031c9c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8031c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8031c3e:	d82a      	bhi.n	8031c96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031c40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8031c44:	d02e      	beq.n	8031ca4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8031c46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8031c4a:	d824      	bhi.n	8031c96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031c4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8031c50:	d018      	beq.n	8031c84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8031c52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8031c56:	d81e      	bhi.n	8031c96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031c58:	2b00      	cmp	r3, #0
 8031c5a:	d003      	beq.n	8031c64 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8031c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8031c60:	d007      	beq.n	8031c72 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8031c62:	e018      	b.n	8031c96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031c64:	4b0e      	ldr	r3, [pc, #56]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031c68:	4a0d      	ldr	r2, [pc, #52]	; (8031ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031c70:	e019      	b.n	8031ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031c72:	687b      	ldr	r3, [r7, #4]
 8031c74:	3304      	adds	r3, #4
 8031c76:	2100      	movs	r1, #0
 8031c78:	4618      	mov	r0, r3
 8031c7a:	f001 f8ab 	bl	8032dd4 <RCCEx_PLL2_Config>
 8031c7e:	4603      	mov	r3, r0
 8031c80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8031c82:	e010      	b.n	8031ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8031c84:	687b      	ldr	r3, [r7, #4]
 8031c86:	3324      	adds	r3, #36	; 0x24
 8031c88:	2100      	movs	r1, #0
 8031c8a:	4618      	mov	r0, r3
 8031c8c:	f001 f954 	bl	8032f38 <RCCEx_PLL3_Config>
 8031c90:	4603      	mov	r3, r0
 8031c92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031c94:	e007      	b.n	8031ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8031c96:	2301      	movs	r3, #1
 8031c98:	75fb      	strb	r3, [r7, #23]
      break;
 8031c9a:	e004      	b.n	8031ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8031c9c:	bf00      	nop
 8031c9e:	e002      	b.n	8031ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8031ca0:	58024400 	.word	0x58024400
      break;
 8031ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031ca6:	7dfb      	ldrb	r3, [r7, #23]
 8031ca8:	2b00      	cmp	r3, #0
 8031caa:	d10a      	bne.n	8031cc2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8031cac:	4b99      	ldr	r3, [pc, #612]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031cb0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8031cb4:	687b      	ldr	r3, [r7, #4]
 8031cb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8031cba:	4996      	ldr	r1, [pc, #600]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031cbc:	4313      	orrs	r3, r2
 8031cbe:	658b      	str	r3, [r1, #88]	; 0x58
 8031cc0:	e001      	b.n	8031cc6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031cc2:	7dfb      	ldrb	r3, [r7, #23]
 8031cc4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8031cc6:	687b      	ldr	r3, [r7, #4]
 8031cc8:	681b      	ldr	r3, [r3, #0]
 8031cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031cce:	2b00      	cmp	r3, #0
 8031cd0:	d032      	beq.n	8031d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8031cd2:	687b      	ldr	r3, [r7, #4]
 8031cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031cd6:	2b30      	cmp	r3, #48	; 0x30
 8031cd8:	d01c      	beq.n	8031d14 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8031cda:	2b30      	cmp	r3, #48	; 0x30
 8031cdc:	d817      	bhi.n	8031d0e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8031cde:	2b20      	cmp	r3, #32
 8031ce0:	d00c      	beq.n	8031cfc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8031ce2:	2b20      	cmp	r3, #32
 8031ce4:	d813      	bhi.n	8031d0e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8031ce6:	2b00      	cmp	r3, #0
 8031ce8:	d016      	beq.n	8031d18 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8031cea:	2b10      	cmp	r3, #16
 8031cec:	d10f      	bne.n	8031d0e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031cee:	4b89      	ldr	r3, [pc, #548]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031cf2:	4a88      	ldr	r2, [pc, #544]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8031cfa:	e00e      	b.n	8031d1a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8031cfc:	687b      	ldr	r3, [r7, #4]
 8031cfe:	3304      	adds	r3, #4
 8031d00:	2102      	movs	r1, #2
 8031d02:	4618      	mov	r0, r3
 8031d04:	f001 f866 	bl	8032dd4 <RCCEx_PLL2_Config>
 8031d08:	4603      	mov	r3, r0
 8031d0a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8031d0c:	e005      	b.n	8031d1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8031d0e:	2301      	movs	r3, #1
 8031d10:	75fb      	strb	r3, [r7, #23]
      break;
 8031d12:	e002      	b.n	8031d1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8031d14:	bf00      	nop
 8031d16:	e000      	b.n	8031d1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8031d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031d1a:	7dfb      	ldrb	r3, [r7, #23]
 8031d1c:	2b00      	cmp	r3, #0
 8031d1e:	d109      	bne.n	8031d34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8031d20:	4b7c      	ldr	r3, [pc, #496]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031d24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8031d28:	687b      	ldr	r3, [r7, #4]
 8031d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031d2c:	4979      	ldr	r1, [pc, #484]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031d2e:	4313      	orrs	r3, r2
 8031d30:	64cb      	str	r3, [r1, #76]	; 0x4c
 8031d32:	e001      	b.n	8031d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031d34:	7dfb      	ldrb	r3, [r7, #23]
 8031d36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8031d38:	687b      	ldr	r3, [r7, #4]
 8031d3a:	681b      	ldr	r3, [r3, #0]
 8031d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8031d40:	2b00      	cmp	r3, #0
 8031d42:	d047      	beq.n	8031dd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8031d44:	687b      	ldr	r3, [r7, #4]
 8031d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031d48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8031d4c:	d030      	beq.n	8031db0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8031d4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8031d52:	d82a      	bhi.n	8031daa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031d54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8031d58:	d02c      	beq.n	8031db4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8031d5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8031d5e:	d824      	bhi.n	8031daa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031d64:	d018      	beq.n	8031d98 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8031d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031d6a:	d81e      	bhi.n	8031daa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031d6c:	2b00      	cmp	r3, #0
 8031d6e:	d003      	beq.n	8031d78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8031d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8031d74:	d007      	beq.n	8031d86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8031d76:	e018      	b.n	8031daa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031d78:	4b66      	ldr	r3, [pc, #408]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031d7c:	4a65      	ldr	r2, [pc, #404]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031d82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031d84:	e017      	b.n	8031db6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031d86:	687b      	ldr	r3, [r7, #4]
 8031d88:	3304      	adds	r3, #4
 8031d8a:	2100      	movs	r1, #0
 8031d8c:	4618      	mov	r0, r3
 8031d8e:	f001 f821 	bl	8032dd4 <RCCEx_PLL2_Config>
 8031d92:	4603      	mov	r3, r0
 8031d94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031d96:	e00e      	b.n	8031db6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031d98:	687b      	ldr	r3, [r7, #4]
 8031d9a:	3324      	adds	r3, #36	; 0x24
 8031d9c:	2100      	movs	r1, #0
 8031d9e:	4618      	mov	r0, r3
 8031da0:	f001 f8ca 	bl	8032f38 <RCCEx_PLL3_Config>
 8031da4:	4603      	mov	r3, r0
 8031da6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031da8:	e005      	b.n	8031db6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031daa:	2301      	movs	r3, #1
 8031dac:	75fb      	strb	r3, [r7, #23]
      break;
 8031dae:	e002      	b.n	8031db6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8031db0:	bf00      	nop
 8031db2:	e000      	b.n	8031db6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8031db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031db6:	7dfb      	ldrb	r3, [r7, #23]
 8031db8:	2b00      	cmp	r3, #0
 8031dba:	d109      	bne.n	8031dd0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8031dbc:	4b55      	ldr	r3, [pc, #340]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031dc0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8031dc4:	687b      	ldr	r3, [r7, #4]
 8031dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031dc8:	4952      	ldr	r1, [pc, #328]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031dca:	4313      	orrs	r3, r2
 8031dcc:	650b      	str	r3, [r1, #80]	; 0x50
 8031dce:	e001      	b.n	8031dd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031dd0:	7dfb      	ldrb	r3, [r7, #23]
 8031dd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8031dd4:	687b      	ldr	r3, [r7, #4]
 8031dd6:	681b      	ldr	r3, [r3, #0]
 8031dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8031ddc:	2b00      	cmp	r3, #0
 8031dde:	d049      	beq.n	8031e74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8031de0:	687b      	ldr	r3, [r7, #4]
 8031de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8031de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8031de8:	d02e      	beq.n	8031e48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8031dea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8031dee:	d828      	bhi.n	8031e42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031df0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8031df4:	d02a      	beq.n	8031e4c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8031df6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8031dfa:	d822      	bhi.n	8031e42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031dfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8031e00:	d026      	beq.n	8031e50 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8031e02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8031e06:	d81c      	bhi.n	8031e42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031e08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8031e0c:	d010      	beq.n	8031e30 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8031e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8031e12:	d816      	bhi.n	8031e42 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031e14:	2b00      	cmp	r3, #0
 8031e16:	d01d      	beq.n	8031e54 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8031e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8031e1c:	d111      	bne.n	8031e42 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8031e1e:	687b      	ldr	r3, [r7, #4]
 8031e20:	3304      	adds	r3, #4
 8031e22:	2101      	movs	r1, #1
 8031e24:	4618      	mov	r0, r3
 8031e26:	f000 ffd5 	bl	8032dd4 <RCCEx_PLL2_Config>
 8031e2a:	4603      	mov	r3, r0
 8031e2c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8031e2e:	e012      	b.n	8031e56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8031e30:	687b      	ldr	r3, [r7, #4]
 8031e32:	3324      	adds	r3, #36	; 0x24
 8031e34:	2101      	movs	r1, #1
 8031e36:	4618      	mov	r0, r3
 8031e38:	f001 f87e 	bl	8032f38 <RCCEx_PLL3_Config>
 8031e3c:	4603      	mov	r3, r0
 8031e3e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8031e40:	e009      	b.n	8031e56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031e42:	2301      	movs	r3, #1
 8031e44:	75fb      	strb	r3, [r7, #23]
      break;
 8031e46:	e006      	b.n	8031e56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8031e48:	bf00      	nop
 8031e4a:	e004      	b.n	8031e56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8031e4c:	bf00      	nop
 8031e4e:	e002      	b.n	8031e56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8031e50:	bf00      	nop
 8031e52:	e000      	b.n	8031e56 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8031e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031e56:	7dfb      	ldrb	r3, [r7, #23]
 8031e58:	2b00      	cmp	r3, #0
 8031e5a:	d109      	bne.n	8031e70 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8031e5c:	4b2d      	ldr	r3, [pc, #180]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031e60:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8031e64:	687b      	ldr	r3, [r7, #4]
 8031e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8031e68:	492a      	ldr	r1, [pc, #168]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031e6a:	4313      	orrs	r3, r2
 8031e6c:	650b      	str	r3, [r1, #80]	; 0x50
 8031e6e:	e001      	b.n	8031e74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031e70:	7dfb      	ldrb	r3, [r7, #23]
 8031e72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8031e74:	687b      	ldr	r3, [r7, #4]
 8031e76:	681b      	ldr	r3, [r3, #0]
 8031e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8031e7c:	2b00      	cmp	r3, #0
 8031e7e:	d04d      	beq.n	8031f1c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8031e80:	687b      	ldr	r3, [r7, #4]
 8031e82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8031e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8031e8a:	d02e      	beq.n	8031eea <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8031e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8031e90:	d828      	bhi.n	8031ee4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8031e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8031e96:	d02a      	beq.n	8031eee <HAL_RCCEx_PeriphCLKConfig+0x522>
 8031e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8031e9c:	d822      	bhi.n	8031ee4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8031e9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8031ea2:	d026      	beq.n	8031ef2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8031ea4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8031ea8:	d81c      	bhi.n	8031ee4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8031eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8031eae:	d010      	beq.n	8031ed2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8031eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8031eb4:	d816      	bhi.n	8031ee4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8031eb6:	2b00      	cmp	r3, #0
 8031eb8:	d01d      	beq.n	8031ef6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8031eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8031ebe:	d111      	bne.n	8031ee4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8031ec0:	687b      	ldr	r3, [r7, #4]
 8031ec2:	3304      	adds	r3, #4
 8031ec4:	2101      	movs	r1, #1
 8031ec6:	4618      	mov	r0, r3
 8031ec8:	f000 ff84 	bl	8032dd4 <RCCEx_PLL2_Config>
 8031ecc:	4603      	mov	r3, r0
 8031ece:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8031ed0:	e012      	b.n	8031ef8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8031ed2:	687b      	ldr	r3, [r7, #4]
 8031ed4:	3324      	adds	r3, #36	; 0x24
 8031ed6:	2101      	movs	r1, #1
 8031ed8:	4618      	mov	r0, r3
 8031eda:	f001 f82d 	bl	8032f38 <RCCEx_PLL3_Config>
 8031ede:	4603      	mov	r3, r0
 8031ee0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8031ee2:	e009      	b.n	8031ef8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8031ee4:	2301      	movs	r3, #1
 8031ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8031ee8:	e006      	b.n	8031ef8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8031eea:	bf00      	nop
 8031eec:	e004      	b.n	8031ef8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8031eee:	bf00      	nop
 8031ef0:	e002      	b.n	8031ef8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8031ef2:	bf00      	nop
 8031ef4:	e000      	b.n	8031ef8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8031ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031ef8:	7dfb      	ldrb	r3, [r7, #23]
 8031efa:	2b00      	cmp	r3, #0
 8031efc:	d10c      	bne.n	8031f18 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8031efe:	4b05      	ldr	r3, [pc, #20]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031f02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8031f06:	687b      	ldr	r3, [r7, #4]
 8031f08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8031f0c:	4901      	ldr	r1, [pc, #4]	; (8031f14 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f0e:	4313      	orrs	r3, r2
 8031f10:	658b      	str	r3, [r1, #88]	; 0x58
 8031f12:	e003      	b.n	8031f1c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8031f14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031f18:	7dfb      	ldrb	r3, [r7, #23]
 8031f1a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8031f1c:	687b      	ldr	r3, [r7, #4]
 8031f1e:	681b      	ldr	r3, [r3, #0]
 8031f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8031f24:	2b00      	cmp	r3, #0
 8031f26:	d02f      	beq.n	8031f88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8031f28:	687b      	ldr	r3, [r7, #4]
 8031f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8031f30:	d00e      	beq.n	8031f50 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8031f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8031f36:	d814      	bhi.n	8031f62 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8031f38:	2b00      	cmp	r3, #0
 8031f3a:	d015      	beq.n	8031f68 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8031f3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8031f40:	d10f      	bne.n	8031f62 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031f42:	4baf      	ldr	r3, [pc, #700]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8031f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031f46:	4aae      	ldr	r2, [pc, #696]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8031f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8031f4e:	e00c      	b.n	8031f6a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8031f50:	687b      	ldr	r3, [r7, #4]
 8031f52:	3304      	adds	r3, #4
 8031f54:	2101      	movs	r1, #1
 8031f56:	4618      	mov	r0, r3
 8031f58:	f000 ff3c 	bl	8032dd4 <RCCEx_PLL2_Config>
 8031f5c:	4603      	mov	r3, r0
 8031f5e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8031f60:	e003      	b.n	8031f6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031f62:	2301      	movs	r3, #1
 8031f64:	75fb      	strb	r3, [r7, #23]
      break;
 8031f66:	e000      	b.n	8031f6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8031f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031f6a:	7dfb      	ldrb	r3, [r7, #23]
 8031f6c:	2b00      	cmp	r3, #0
 8031f6e:	d109      	bne.n	8031f84 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8031f70:	4ba3      	ldr	r3, [pc, #652]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8031f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031f74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8031f78:	687b      	ldr	r3, [r7, #4]
 8031f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8031f7c:	49a0      	ldr	r1, [pc, #640]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8031f7e:	4313      	orrs	r3, r2
 8031f80:	650b      	str	r3, [r1, #80]	; 0x50
 8031f82:	e001      	b.n	8031f88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031f84:	7dfb      	ldrb	r3, [r7, #23]
 8031f86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8031f88:	687b      	ldr	r3, [r7, #4]
 8031f8a:	681b      	ldr	r3, [r3, #0]
 8031f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8031f90:	2b00      	cmp	r3, #0
 8031f92:	d032      	beq.n	8031ffa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8031f94:	687b      	ldr	r3, [r7, #4]
 8031f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031f98:	2b03      	cmp	r3, #3
 8031f9a:	d81b      	bhi.n	8031fd4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8031f9c:	a201      	add	r2, pc, #4	; (adr r2, 8031fa4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8031f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8031fa2:	bf00      	nop
 8031fa4:	08031fdb 	.word	0x08031fdb
 8031fa8:	08031fb5 	.word	0x08031fb5
 8031fac:	08031fc3 	.word	0x08031fc3
 8031fb0:	08031fdb 	.word	0x08031fdb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031fb4:	4b92      	ldr	r3, [pc, #584]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8031fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031fb8:	4a91      	ldr	r2, [pc, #580]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8031fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8031fc0:	e00c      	b.n	8031fdc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8031fc2:	687b      	ldr	r3, [r7, #4]
 8031fc4:	3304      	adds	r3, #4
 8031fc6:	2102      	movs	r1, #2
 8031fc8:	4618      	mov	r0, r3
 8031fca:	f000 ff03 	bl	8032dd4 <RCCEx_PLL2_Config>
 8031fce:	4603      	mov	r3, r0
 8031fd0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8031fd2:	e003      	b.n	8031fdc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8031fd4:	2301      	movs	r3, #1
 8031fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8031fd8:	e000      	b.n	8031fdc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8031fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031fdc:	7dfb      	ldrb	r3, [r7, #23]
 8031fde:	2b00      	cmp	r3, #0
 8031fe0:	d109      	bne.n	8031ff6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8031fe2:	4b87      	ldr	r3, [pc, #540]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8031fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031fe6:	f023 0203 	bic.w	r2, r3, #3
 8031fea:	687b      	ldr	r3, [r7, #4]
 8031fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031fee:	4984      	ldr	r1, [pc, #528]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8031ff0:	4313      	orrs	r3, r2
 8031ff2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8031ff4:	e001      	b.n	8031ffa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031ff6:	7dfb      	ldrb	r3, [r7, #23]
 8031ff8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8031ffa:	687b      	ldr	r3, [r7, #4]
 8031ffc:	681b      	ldr	r3, [r3, #0]
 8031ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8032002:	2b00      	cmp	r3, #0
 8032004:	f000 8086 	beq.w	8032114 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8032008:	4b7e      	ldr	r3, [pc, #504]	; (8032204 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 803200a:	681b      	ldr	r3, [r3, #0]
 803200c:	4a7d      	ldr	r2, [pc, #500]	; (8032204 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 803200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8032012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8032014:	f7f8 fd38 	bl	802aa88 <HAL_GetTick>
 8032018:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 803201a:	e009      	b.n	8032030 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 803201c:	f7f8 fd34 	bl	802aa88 <HAL_GetTick>
 8032020:	4602      	mov	r2, r0
 8032022:	693b      	ldr	r3, [r7, #16]
 8032024:	1ad3      	subs	r3, r2, r3
 8032026:	2b64      	cmp	r3, #100	; 0x64
 8032028:	d902      	bls.n	8032030 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 803202a:	2303      	movs	r3, #3
 803202c:	75fb      	strb	r3, [r7, #23]
        break;
 803202e:	e005      	b.n	803203c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8032030:	4b74      	ldr	r3, [pc, #464]	; (8032204 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8032032:	681b      	ldr	r3, [r3, #0]
 8032034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032038:	2b00      	cmp	r3, #0
 803203a:	d0ef      	beq.n	803201c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 803203c:	7dfb      	ldrb	r3, [r7, #23]
 803203e:	2b00      	cmp	r3, #0
 8032040:	d166      	bne.n	8032110 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8032042:	4b6f      	ldr	r3, [pc, #444]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032044:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8032046:	687b      	ldr	r3, [r7, #4]
 8032048:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803204c:	4053      	eors	r3, r2
 803204e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8032052:	2b00      	cmp	r3, #0
 8032054:	d013      	beq.n	803207e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8032056:	4b6a      	ldr	r3, [pc, #424]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803205a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 803205e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8032060:	4b67      	ldr	r3, [pc, #412]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032064:	4a66      	ldr	r2, [pc, #408]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 803206a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 803206c:	4b64      	ldr	r3, [pc, #400]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803206e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032070:	4a63      	ldr	r2, [pc, #396]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8032076:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8032078:	4a61      	ldr	r2, [pc, #388]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803207a:	68fb      	ldr	r3, [r7, #12]
 803207c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 803207e:	687b      	ldr	r3, [r7, #4]
 8032080:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8032084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8032088:	d115      	bne.n	80320b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803208a:	f7f8 fcfd 	bl	802aa88 <HAL_GetTick>
 803208e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8032090:	e00b      	b.n	80320aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8032092:	f7f8 fcf9 	bl	802aa88 <HAL_GetTick>
 8032096:	4602      	mov	r2, r0
 8032098:	693b      	ldr	r3, [r7, #16]
 803209a:	1ad3      	subs	r3, r2, r3
 803209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80320a0:	4293      	cmp	r3, r2
 80320a2:	d902      	bls.n	80320aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80320a4:	2303      	movs	r3, #3
 80320a6:	75fb      	strb	r3, [r7, #23]
            break;
 80320a8:	e005      	b.n	80320b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80320aa:	4b55      	ldr	r3, [pc, #340]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80320ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80320ae:	f003 0302 	and.w	r3, r3, #2
 80320b2:	2b00      	cmp	r3, #0
 80320b4:	d0ed      	beq.n	8032092 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80320b6:	7dfb      	ldrb	r3, [r7, #23]
 80320b8:	2b00      	cmp	r3, #0
 80320ba:	d126      	bne.n	803210a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80320bc:	687b      	ldr	r3, [r7, #4]
 80320be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80320c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80320c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80320ca:	d10d      	bne.n	80320e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80320cc:	4b4c      	ldr	r3, [pc, #304]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80320ce:	691b      	ldr	r3, [r3, #16]
 80320d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80320d4:	687b      	ldr	r3, [r7, #4]
 80320d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80320da:	0919      	lsrs	r1, r3, #4
 80320dc:	4b4a      	ldr	r3, [pc, #296]	; (8032208 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80320de:	400b      	ands	r3, r1
 80320e0:	4947      	ldr	r1, [pc, #284]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80320e2:	4313      	orrs	r3, r2
 80320e4:	610b      	str	r3, [r1, #16]
 80320e6:	e005      	b.n	80320f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80320e8:	4b45      	ldr	r3, [pc, #276]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80320ea:	691b      	ldr	r3, [r3, #16]
 80320ec:	4a44      	ldr	r2, [pc, #272]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80320ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80320f2:	6113      	str	r3, [r2, #16]
 80320f4:	4b42      	ldr	r3, [pc, #264]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80320f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80320f8:	687b      	ldr	r3, [r7, #4]
 80320fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80320fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8032102:	493f      	ldr	r1, [pc, #252]	; (8032200 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032104:	4313      	orrs	r3, r2
 8032106:	670b      	str	r3, [r1, #112]	; 0x70
 8032108:	e004      	b.n	8032114 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 803210a:	7dfb      	ldrb	r3, [r7, #23]
 803210c:	75bb      	strb	r3, [r7, #22]
 803210e:	e001      	b.n	8032114 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032110:	7dfb      	ldrb	r3, [r7, #23]
 8032112:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8032114:	687b      	ldr	r3, [r7, #4]
 8032116:	681b      	ldr	r3, [r3, #0]
 8032118:	f003 0301 	and.w	r3, r3, #1
 803211c:	2b00      	cmp	r3, #0
 803211e:	f000 8085 	beq.w	803222c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8032122:	687b      	ldr	r3, [r7, #4]
 8032124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8032126:	2b28      	cmp	r3, #40	; 0x28
 8032128:	d866      	bhi.n	80321f8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 803212a:	a201      	add	r2, pc, #4	; (adr r2, 8032130 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 803212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032130:	0803220d 	.word	0x0803220d
 8032134:	080321f9 	.word	0x080321f9
 8032138:	080321f9 	.word	0x080321f9
 803213c:	080321f9 	.word	0x080321f9
 8032140:	080321f9 	.word	0x080321f9
 8032144:	080321f9 	.word	0x080321f9
 8032148:	080321f9 	.word	0x080321f9
 803214c:	080321f9 	.word	0x080321f9
 8032150:	080321d5 	.word	0x080321d5
 8032154:	080321f9 	.word	0x080321f9
 8032158:	080321f9 	.word	0x080321f9
 803215c:	080321f9 	.word	0x080321f9
 8032160:	080321f9 	.word	0x080321f9
 8032164:	080321f9 	.word	0x080321f9
 8032168:	080321f9 	.word	0x080321f9
 803216c:	080321f9 	.word	0x080321f9
 8032170:	080321e7 	.word	0x080321e7
 8032174:	080321f9 	.word	0x080321f9
 8032178:	080321f9 	.word	0x080321f9
 803217c:	080321f9 	.word	0x080321f9
 8032180:	080321f9 	.word	0x080321f9
 8032184:	080321f9 	.word	0x080321f9
 8032188:	080321f9 	.word	0x080321f9
 803218c:	080321f9 	.word	0x080321f9
 8032190:	0803220d 	.word	0x0803220d
 8032194:	080321f9 	.word	0x080321f9
 8032198:	080321f9 	.word	0x080321f9
 803219c:	080321f9 	.word	0x080321f9
 80321a0:	080321f9 	.word	0x080321f9
 80321a4:	080321f9 	.word	0x080321f9
 80321a8:	080321f9 	.word	0x080321f9
 80321ac:	080321f9 	.word	0x080321f9
 80321b0:	0803220d 	.word	0x0803220d
 80321b4:	080321f9 	.word	0x080321f9
 80321b8:	080321f9 	.word	0x080321f9
 80321bc:	080321f9 	.word	0x080321f9
 80321c0:	080321f9 	.word	0x080321f9
 80321c4:	080321f9 	.word	0x080321f9
 80321c8:	080321f9 	.word	0x080321f9
 80321cc:	080321f9 	.word	0x080321f9
 80321d0:	0803220d 	.word	0x0803220d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80321d4:	687b      	ldr	r3, [r7, #4]
 80321d6:	3304      	adds	r3, #4
 80321d8:	2101      	movs	r1, #1
 80321da:	4618      	mov	r0, r3
 80321dc:	f000 fdfa 	bl	8032dd4 <RCCEx_PLL2_Config>
 80321e0:	4603      	mov	r3, r0
 80321e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80321e4:	e013      	b.n	803220e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80321e6:	687b      	ldr	r3, [r7, #4]
 80321e8:	3324      	adds	r3, #36	; 0x24
 80321ea:	2101      	movs	r1, #1
 80321ec:	4618      	mov	r0, r3
 80321ee:	f000 fea3 	bl	8032f38 <RCCEx_PLL3_Config>
 80321f2:	4603      	mov	r3, r0
 80321f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80321f6:	e00a      	b.n	803220e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80321f8:	2301      	movs	r3, #1
 80321fa:	75fb      	strb	r3, [r7, #23]
      break;
 80321fc:	e007      	b.n	803220e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80321fe:	bf00      	nop
 8032200:	58024400 	.word	0x58024400
 8032204:	58024800 	.word	0x58024800
 8032208:	00ffffcf 	.word	0x00ffffcf
      break;
 803220c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803220e:	7dfb      	ldrb	r3, [r7, #23]
 8032210:	2b00      	cmp	r3, #0
 8032212:	d109      	bne.n	8032228 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8032214:	4b96      	ldr	r3, [pc, #600]	; (8032470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032218:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 803221c:	687b      	ldr	r3, [r7, #4]
 803221e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8032220:	4993      	ldr	r1, [pc, #588]	; (8032470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032222:	4313      	orrs	r3, r2
 8032224:	654b      	str	r3, [r1, #84]	; 0x54
 8032226:	e001      	b.n	803222c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032228:	7dfb      	ldrb	r3, [r7, #23]
 803222a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 803222c:	687b      	ldr	r3, [r7, #4]
 803222e:	681b      	ldr	r3, [r3, #0]
 8032230:	f003 0302 	and.w	r3, r3, #2
 8032234:	2b00      	cmp	r3, #0
 8032236:	d038      	beq.n	80322aa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8032238:	687b      	ldr	r3, [r7, #4]
 803223a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803223c:	2b05      	cmp	r3, #5
 803223e:	d821      	bhi.n	8032284 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8032240:	a201      	add	r2, pc, #4	; (adr r2, 8032248 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8032242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032246:	bf00      	nop
 8032248:	0803228b 	.word	0x0803228b
 803224c:	08032261 	.word	0x08032261
 8032250:	08032273 	.word	0x08032273
 8032254:	0803228b 	.word	0x0803228b
 8032258:	0803228b 	.word	0x0803228b
 803225c:	0803228b 	.word	0x0803228b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8032260:	687b      	ldr	r3, [r7, #4]
 8032262:	3304      	adds	r3, #4
 8032264:	2101      	movs	r1, #1
 8032266:	4618      	mov	r0, r3
 8032268:	f000 fdb4 	bl	8032dd4 <RCCEx_PLL2_Config>
 803226c:	4603      	mov	r3, r0
 803226e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8032270:	e00c      	b.n	803228c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032272:	687b      	ldr	r3, [r7, #4]
 8032274:	3324      	adds	r3, #36	; 0x24
 8032276:	2101      	movs	r1, #1
 8032278:	4618      	mov	r0, r3
 803227a:	f000 fe5d 	bl	8032f38 <RCCEx_PLL3_Config>
 803227e:	4603      	mov	r3, r0
 8032280:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8032282:	e003      	b.n	803228c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032284:	2301      	movs	r3, #1
 8032286:	75fb      	strb	r3, [r7, #23]
      break;
 8032288:	e000      	b.n	803228c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 803228a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803228c:	7dfb      	ldrb	r3, [r7, #23]
 803228e:	2b00      	cmp	r3, #0
 8032290:	d109      	bne.n	80322a6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8032292:	4b77      	ldr	r3, [pc, #476]	; (8032470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032296:	f023 0207 	bic.w	r2, r3, #7
 803229a:	687b      	ldr	r3, [r7, #4]
 803229c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803229e:	4974      	ldr	r1, [pc, #464]	; (8032470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80322a0:	4313      	orrs	r3, r2
 80322a2:	654b      	str	r3, [r1, #84]	; 0x54
 80322a4:	e001      	b.n	80322aa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80322a6:	7dfb      	ldrb	r3, [r7, #23]
 80322a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80322aa:	687b      	ldr	r3, [r7, #4]
 80322ac:	681b      	ldr	r3, [r3, #0]
 80322ae:	f003 0304 	and.w	r3, r3, #4
 80322b2:	2b00      	cmp	r3, #0
 80322b4:	d03a      	beq.n	803232c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80322b6:	687b      	ldr	r3, [r7, #4]
 80322b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80322bc:	2b05      	cmp	r3, #5
 80322be:	d821      	bhi.n	8032304 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80322c0:	a201      	add	r2, pc, #4	; (adr r2, 80322c8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80322c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80322c6:	bf00      	nop
 80322c8:	0803230b 	.word	0x0803230b
 80322cc:	080322e1 	.word	0x080322e1
 80322d0:	080322f3 	.word	0x080322f3
 80322d4:	0803230b 	.word	0x0803230b
 80322d8:	0803230b 	.word	0x0803230b
 80322dc:	0803230b 	.word	0x0803230b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80322e0:	687b      	ldr	r3, [r7, #4]
 80322e2:	3304      	adds	r3, #4
 80322e4:	2101      	movs	r1, #1
 80322e6:	4618      	mov	r0, r3
 80322e8:	f000 fd74 	bl	8032dd4 <RCCEx_PLL2_Config>
 80322ec:	4603      	mov	r3, r0
 80322ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80322f0:	e00c      	b.n	803230c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80322f2:	687b      	ldr	r3, [r7, #4]
 80322f4:	3324      	adds	r3, #36	; 0x24
 80322f6:	2101      	movs	r1, #1
 80322f8:	4618      	mov	r0, r3
 80322fa:	f000 fe1d 	bl	8032f38 <RCCEx_PLL3_Config>
 80322fe:	4603      	mov	r3, r0
 8032300:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8032302:	e003      	b.n	803230c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032304:	2301      	movs	r3, #1
 8032306:	75fb      	strb	r3, [r7, #23]
      break;
 8032308:	e000      	b.n	803230c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 803230a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803230c:	7dfb      	ldrb	r3, [r7, #23]
 803230e:	2b00      	cmp	r3, #0
 8032310:	d10a      	bne.n	8032328 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8032312:	4b57      	ldr	r3, [pc, #348]	; (8032470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032316:	f023 0207 	bic.w	r2, r3, #7
 803231a:	687b      	ldr	r3, [r7, #4]
 803231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8032320:	4953      	ldr	r1, [pc, #332]	; (8032470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032322:	4313      	orrs	r3, r2
 8032324:	658b      	str	r3, [r1, #88]	; 0x58
 8032326:	e001      	b.n	803232c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032328:	7dfb      	ldrb	r3, [r7, #23]
 803232a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 803232c:	687b      	ldr	r3, [r7, #4]
 803232e:	681b      	ldr	r3, [r3, #0]
 8032330:	f003 0320 	and.w	r3, r3, #32
 8032334:	2b00      	cmp	r3, #0
 8032336:	d04b      	beq.n	80323d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8032338:	687b      	ldr	r3, [r7, #4]
 803233a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803233e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8032342:	d02e      	beq.n	80323a2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8032344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8032348:	d828      	bhi.n	803239c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 803234a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803234e:	d02a      	beq.n	80323a6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8032350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8032354:	d822      	bhi.n	803239c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8032356:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 803235a:	d026      	beq.n	80323aa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 803235c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8032360:	d81c      	bhi.n	803239c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8032362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032366:	d010      	beq.n	803238a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8032368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803236c:	d816      	bhi.n	803239c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 803236e:	2b00      	cmp	r3, #0
 8032370:	d01d      	beq.n	80323ae <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8032372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8032376:	d111      	bne.n	803239c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8032378:	687b      	ldr	r3, [r7, #4]
 803237a:	3304      	adds	r3, #4
 803237c:	2100      	movs	r1, #0
 803237e:	4618      	mov	r0, r3
 8032380:	f000 fd28 	bl	8032dd4 <RCCEx_PLL2_Config>
 8032384:	4603      	mov	r3, r0
 8032386:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8032388:	e012      	b.n	80323b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 803238a:	687b      	ldr	r3, [r7, #4]
 803238c:	3324      	adds	r3, #36	; 0x24
 803238e:	2102      	movs	r1, #2
 8032390:	4618      	mov	r0, r3
 8032392:	f000 fdd1 	bl	8032f38 <RCCEx_PLL3_Config>
 8032396:	4603      	mov	r3, r0
 8032398:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 803239a:	e009      	b.n	80323b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803239c:	2301      	movs	r3, #1
 803239e:	75fb      	strb	r3, [r7, #23]
      break;
 80323a0:	e006      	b.n	80323b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80323a2:	bf00      	nop
 80323a4:	e004      	b.n	80323b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80323a6:	bf00      	nop
 80323a8:	e002      	b.n	80323b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80323aa:	bf00      	nop
 80323ac:	e000      	b.n	80323b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80323ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80323b0:	7dfb      	ldrb	r3, [r7, #23]
 80323b2:	2b00      	cmp	r3, #0
 80323b4:	d10a      	bne.n	80323cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80323b6:	4b2e      	ldr	r3, [pc, #184]	; (8032470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80323b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80323ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80323be:	687b      	ldr	r3, [r7, #4]
 80323c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80323c4:	492a      	ldr	r1, [pc, #168]	; (8032470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80323c6:	4313      	orrs	r3, r2
 80323c8:	654b      	str	r3, [r1, #84]	; 0x54
 80323ca:	e001      	b.n	80323d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80323cc:	7dfb      	ldrb	r3, [r7, #23]
 80323ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80323d0:	687b      	ldr	r3, [r7, #4]
 80323d2:	681b      	ldr	r3, [r3, #0]
 80323d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80323d8:	2b00      	cmp	r3, #0
 80323da:	d04d      	beq.n	8032478 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80323dc:	687b      	ldr	r3, [r7, #4]
 80323de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80323e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80323e6:	d02e      	beq.n	8032446 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80323e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80323ec:	d828      	bhi.n	8032440 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80323ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80323f2:	d02a      	beq.n	803244a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80323f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80323f8:	d822      	bhi.n	8032440 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80323fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80323fe:	d026      	beq.n	803244e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8032400:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8032404:	d81c      	bhi.n	8032440 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8032406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 803240a:	d010      	beq.n	803242e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 803240c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8032410:	d816      	bhi.n	8032440 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8032412:	2b00      	cmp	r3, #0
 8032414:	d01d      	beq.n	8032452 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8032416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 803241a:	d111      	bne.n	8032440 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803241c:	687b      	ldr	r3, [r7, #4]
 803241e:	3304      	adds	r3, #4
 8032420:	2100      	movs	r1, #0
 8032422:	4618      	mov	r0, r3
 8032424:	f000 fcd6 	bl	8032dd4 <RCCEx_PLL2_Config>
 8032428:	4603      	mov	r3, r0
 803242a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 803242c:	e012      	b.n	8032454 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 803242e:	687b      	ldr	r3, [r7, #4]
 8032430:	3324      	adds	r3, #36	; 0x24
 8032432:	2102      	movs	r1, #2
 8032434:	4618      	mov	r0, r3
 8032436:	f000 fd7f 	bl	8032f38 <RCCEx_PLL3_Config>
 803243a:	4603      	mov	r3, r0
 803243c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 803243e:	e009      	b.n	8032454 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032440:	2301      	movs	r3, #1
 8032442:	75fb      	strb	r3, [r7, #23]
      break;
 8032444:	e006      	b.n	8032454 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8032446:	bf00      	nop
 8032448:	e004      	b.n	8032454 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 803244a:	bf00      	nop
 803244c:	e002      	b.n	8032454 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 803244e:	bf00      	nop
 8032450:	e000      	b.n	8032454 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8032452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032454:	7dfb      	ldrb	r3, [r7, #23]
 8032456:	2b00      	cmp	r3, #0
 8032458:	d10c      	bne.n	8032474 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 803245a:	4b05      	ldr	r3, [pc, #20]	; (8032470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803245e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8032462:	687b      	ldr	r3, [r7, #4]
 8032464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8032468:	4901      	ldr	r1, [pc, #4]	; (8032470 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803246a:	4313      	orrs	r3, r2
 803246c:	658b      	str	r3, [r1, #88]	; 0x58
 803246e:	e003      	b.n	8032478 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8032470:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032474:	7dfb      	ldrb	r3, [r7, #23]
 8032476:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8032478:	687b      	ldr	r3, [r7, #4]
 803247a:	681b      	ldr	r3, [r3, #0]
 803247c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8032480:	2b00      	cmp	r3, #0
 8032482:	d04b      	beq.n	803251c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8032484:	687b      	ldr	r3, [r7, #4]
 8032486:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 803248a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 803248e:	d02e      	beq.n	80324ee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8032490:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8032494:	d828      	bhi.n	80324e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8032496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803249a:	d02a      	beq.n	80324f2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 803249c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80324a0:	d822      	bhi.n	80324e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80324a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80324a6:	d026      	beq.n	80324f6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80324a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80324ac:	d81c      	bhi.n	80324e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80324ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80324b2:	d010      	beq.n	80324d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80324b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80324b8:	d816      	bhi.n	80324e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80324ba:	2b00      	cmp	r3, #0
 80324bc:	d01d      	beq.n	80324fa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80324be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80324c2:	d111      	bne.n	80324e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80324c4:	687b      	ldr	r3, [r7, #4]
 80324c6:	3304      	adds	r3, #4
 80324c8:	2100      	movs	r1, #0
 80324ca:	4618      	mov	r0, r3
 80324cc:	f000 fc82 	bl	8032dd4 <RCCEx_PLL2_Config>
 80324d0:	4603      	mov	r3, r0
 80324d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80324d4:	e012      	b.n	80324fc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80324d6:	687b      	ldr	r3, [r7, #4]
 80324d8:	3324      	adds	r3, #36	; 0x24
 80324da:	2102      	movs	r1, #2
 80324dc:	4618      	mov	r0, r3
 80324de:	f000 fd2b 	bl	8032f38 <RCCEx_PLL3_Config>
 80324e2:	4603      	mov	r3, r0
 80324e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80324e6:	e009      	b.n	80324fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80324e8:	2301      	movs	r3, #1
 80324ea:	75fb      	strb	r3, [r7, #23]
      break;
 80324ec:	e006      	b.n	80324fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80324ee:	bf00      	nop
 80324f0:	e004      	b.n	80324fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80324f2:	bf00      	nop
 80324f4:	e002      	b.n	80324fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80324f6:	bf00      	nop
 80324f8:	e000      	b.n	80324fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80324fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80324fc:	7dfb      	ldrb	r3, [r7, #23]
 80324fe:	2b00      	cmp	r3, #0
 8032500:	d10a      	bne.n	8032518 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8032502:	4b9d      	ldr	r3, [pc, #628]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 803250a:	687b      	ldr	r3, [r7, #4]
 803250c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8032510:	4999      	ldr	r1, [pc, #612]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032512:	4313      	orrs	r3, r2
 8032514:	658b      	str	r3, [r1, #88]	; 0x58
 8032516:	e001      	b.n	803251c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032518:	7dfb      	ldrb	r3, [r7, #23]
 803251a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 803251c:	687b      	ldr	r3, [r7, #4]
 803251e:	681b      	ldr	r3, [r3, #0]
 8032520:	f003 0308 	and.w	r3, r3, #8
 8032524:	2b00      	cmp	r3, #0
 8032526:	d01a      	beq.n	803255e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8032528:	687b      	ldr	r3, [r7, #4]
 803252a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 803252e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8032532:	d10a      	bne.n	803254a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8032534:	687b      	ldr	r3, [r7, #4]
 8032536:	3324      	adds	r3, #36	; 0x24
 8032538:	2102      	movs	r1, #2
 803253a:	4618      	mov	r0, r3
 803253c:	f000 fcfc 	bl	8032f38 <RCCEx_PLL3_Config>
 8032540:	4603      	mov	r3, r0
 8032542:	2b00      	cmp	r3, #0
 8032544:	d001      	beq.n	803254a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8032546:	2301      	movs	r3, #1
 8032548:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 803254a:	4b8b      	ldr	r3, [pc, #556]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803254e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8032552:	687b      	ldr	r3, [r7, #4]
 8032554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8032558:	4987      	ldr	r1, [pc, #540]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803255a:	4313      	orrs	r3, r2
 803255c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 803255e:	687b      	ldr	r3, [r7, #4]
 8032560:	681b      	ldr	r3, [r3, #0]
 8032562:	f003 0310 	and.w	r3, r3, #16
 8032566:	2b00      	cmp	r3, #0
 8032568:	d01a      	beq.n	80325a0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 803256a:	687b      	ldr	r3, [r7, #4]
 803256c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8032570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8032574:	d10a      	bne.n	803258c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8032576:	687b      	ldr	r3, [r7, #4]
 8032578:	3324      	adds	r3, #36	; 0x24
 803257a:	2102      	movs	r1, #2
 803257c:	4618      	mov	r0, r3
 803257e:	f000 fcdb 	bl	8032f38 <RCCEx_PLL3_Config>
 8032582:	4603      	mov	r3, r0
 8032584:	2b00      	cmp	r3, #0
 8032586:	d001      	beq.n	803258c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8032588:	2301      	movs	r3, #1
 803258a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 803258c:	4b7a      	ldr	r3, [pc, #488]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8032594:	687b      	ldr	r3, [r7, #4]
 8032596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 803259a:	4977      	ldr	r1, [pc, #476]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803259c:	4313      	orrs	r3, r2
 803259e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80325a0:	687b      	ldr	r3, [r7, #4]
 80325a2:	681b      	ldr	r3, [r3, #0]
 80325a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80325a8:	2b00      	cmp	r3, #0
 80325aa:	d034      	beq.n	8032616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80325ac:	687b      	ldr	r3, [r7, #4]
 80325ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80325b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80325b6:	d01d      	beq.n	80325f4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80325b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80325bc:	d817      	bhi.n	80325ee <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80325be:	2b00      	cmp	r3, #0
 80325c0:	d003      	beq.n	80325ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80325c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80325c6:	d009      	beq.n	80325dc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80325c8:	e011      	b.n	80325ee <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80325ca:	687b      	ldr	r3, [r7, #4]
 80325cc:	3304      	adds	r3, #4
 80325ce:	2100      	movs	r1, #0
 80325d0:	4618      	mov	r0, r3
 80325d2:	f000 fbff 	bl	8032dd4 <RCCEx_PLL2_Config>
 80325d6:	4603      	mov	r3, r0
 80325d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80325da:	e00c      	b.n	80325f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80325dc:	687b      	ldr	r3, [r7, #4]
 80325de:	3324      	adds	r3, #36	; 0x24
 80325e0:	2102      	movs	r1, #2
 80325e2:	4618      	mov	r0, r3
 80325e4:	f000 fca8 	bl	8032f38 <RCCEx_PLL3_Config>
 80325e8:	4603      	mov	r3, r0
 80325ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80325ec:	e003      	b.n	80325f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80325ee:	2301      	movs	r3, #1
 80325f0:	75fb      	strb	r3, [r7, #23]
      break;
 80325f2:	e000      	b.n	80325f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80325f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80325f6:	7dfb      	ldrb	r3, [r7, #23]
 80325f8:	2b00      	cmp	r3, #0
 80325fa:	d10a      	bne.n	8032612 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80325fc:	4b5e      	ldr	r3, [pc, #376]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80325fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032600:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8032604:	687b      	ldr	r3, [r7, #4]
 8032606:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 803260a:	495b      	ldr	r1, [pc, #364]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803260c:	4313      	orrs	r3, r2
 803260e:	658b      	str	r3, [r1, #88]	; 0x58
 8032610:	e001      	b.n	8032616 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032612:	7dfb      	ldrb	r3, [r7, #23]
 8032614:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8032616:	687b      	ldr	r3, [r7, #4]
 8032618:	681b      	ldr	r3, [r3, #0]
 803261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 803261e:	2b00      	cmp	r3, #0
 8032620:	d033      	beq.n	803268a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8032622:	687b      	ldr	r3, [r7, #4]
 8032624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8032628:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 803262c:	d01c      	beq.n	8032668 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 803262e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8032632:	d816      	bhi.n	8032662 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8032634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8032638:	d003      	beq.n	8032642 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 803263a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803263e:	d007      	beq.n	8032650 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8032640:	e00f      	b.n	8032662 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8032642:	4b4d      	ldr	r3, [pc, #308]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032646:	4a4c      	ldr	r2, [pc, #304]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803264c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 803264e:	e00c      	b.n	803266a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032650:	687b      	ldr	r3, [r7, #4]
 8032652:	3324      	adds	r3, #36	; 0x24
 8032654:	2101      	movs	r1, #1
 8032656:	4618      	mov	r0, r3
 8032658:	f000 fc6e 	bl	8032f38 <RCCEx_PLL3_Config>
 803265c:	4603      	mov	r3, r0
 803265e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8032660:	e003      	b.n	803266a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032662:	2301      	movs	r3, #1
 8032664:	75fb      	strb	r3, [r7, #23]
      break;
 8032666:	e000      	b.n	803266a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8032668:	bf00      	nop
    }

    if(ret == HAL_OK)
 803266a:	7dfb      	ldrb	r3, [r7, #23]
 803266c:	2b00      	cmp	r3, #0
 803266e:	d10a      	bne.n	8032686 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8032670:	4b41      	ldr	r3, [pc, #260]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032674:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8032678:	687b      	ldr	r3, [r7, #4]
 803267a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803267e:	493e      	ldr	r1, [pc, #248]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032680:	4313      	orrs	r3, r2
 8032682:	654b      	str	r3, [r1, #84]	; 0x54
 8032684:	e001      	b.n	803268a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032686:	7dfb      	ldrb	r3, [r7, #23]
 8032688:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 803268a:	687b      	ldr	r3, [r7, #4]
 803268c:	681b      	ldr	r3, [r3, #0]
 803268e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8032692:	2b00      	cmp	r3, #0
 8032694:	d029      	beq.n	80326ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8032696:	687b      	ldr	r3, [r7, #4]
 8032698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803269a:	2b00      	cmp	r3, #0
 803269c:	d003      	beq.n	80326a6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 803269e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80326a2:	d007      	beq.n	80326b4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80326a4:	e00f      	b.n	80326c6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80326a6:	4b34      	ldr	r3, [pc, #208]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80326a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80326aa:	4a33      	ldr	r2, [pc, #204]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80326ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80326b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80326b2:	e00b      	b.n	80326cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80326b4:	687b      	ldr	r3, [r7, #4]
 80326b6:	3304      	adds	r3, #4
 80326b8:	2102      	movs	r1, #2
 80326ba:	4618      	mov	r0, r3
 80326bc:	f000 fb8a 	bl	8032dd4 <RCCEx_PLL2_Config>
 80326c0:	4603      	mov	r3, r0
 80326c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80326c4:	e002      	b.n	80326cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80326c6:	2301      	movs	r3, #1
 80326c8:	75fb      	strb	r3, [r7, #23]
      break;
 80326ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80326cc:	7dfb      	ldrb	r3, [r7, #23]
 80326ce:	2b00      	cmp	r3, #0
 80326d0:	d109      	bne.n	80326e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80326d2:	4b29      	ldr	r3, [pc, #164]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80326d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80326d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80326da:	687b      	ldr	r3, [r7, #4]
 80326dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80326de:	4926      	ldr	r1, [pc, #152]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80326e0:	4313      	orrs	r3, r2
 80326e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80326e4:	e001      	b.n	80326ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80326e6:	7dfb      	ldrb	r3, [r7, #23]
 80326e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80326ea:	687b      	ldr	r3, [r7, #4]
 80326ec:	681b      	ldr	r3, [r3, #0]
 80326ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80326f2:	2b00      	cmp	r3, #0
 80326f4:	d00a      	beq.n	803270c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80326f6:	687b      	ldr	r3, [r7, #4]
 80326f8:	3324      	adds	r3, #36	; 0x24
 80326fa:	2102      	movs	r1, #2
 80326fc:	4618      	mov	r0, r3
 80326fe:	f000 fc1b 	bl	8032f38 <RCCEx_PLL3_Config>
 8032702:	4603      	mov	r3, r0
 8032704:	2b00      	cmp	r3, #0
 8032706:	d001      	beq.n	803270c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8032708:	2301      	movs	r3, #1
 803270a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 803270c:	687b      	ldr	r3, [r7, #4]
 803270e:	681b      	ldr	r3, [r3, #0]
 8032710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032714:	2b00      	cmp	r3, #0
 8032716:	d033      	beq.n	8032780 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8032718:	687b      	ldr	r3, [r7, #4]
 803271a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803271c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8032720:	d017      	beq.n	8032752 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8032722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8032726:	d811      	bhi.n	803274c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8032728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803272c:	d013      	beq.n	8032756 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 803272e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8032732:	d80b      	bhi.n	803274c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8032734:	2b00      	cmp	r3, #0
 8032736:	d010      	beq.n	803275a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8032738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803273c:	d106      	bne.n	803274c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803273e:	4b0e      	ldr	r3, [pc, #56]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032742:	4a0d      	ldr	r2, [pc, #52]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8032748:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 803274a:	e007      	b.n	803275c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803274c:	2301      	movs	r3, #1
 803274e:	75fb      	strb	r3, [r7, #23]
      break;
 8032750:	e004      	b.n	803275c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8032752:	bf00      	nop
 8032754:	e002      	b.n	803275c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8032756:	bf00      	nop
 8032758:	e000      	b.n	803275c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 803275a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803275c:	7dfb      	ldrb	r3, [r7, #23]
 803275e:	2b00      	cmp	r3, #0
 8032760:	d10c      	bne.n	803277c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8032762:	4b05      	ldr	r3, [pc, #20]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032766:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 803276a:	687b      	ldr	r3, [r7, #4]
 803276c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803276e:	4902      	ldr	r1, [pc, #8]	; (8032778 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032770:	4313      	orrs	r3, r2
 8032772:	654b      	str	r3, [r1, #84]	; 0x54
 8032774:	e004      	b.n	8032780 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8032776:	bf00      	nop
 8032778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 803277c:	7dfb      	ldrb	r3, [r7, #23]
 803277e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8032780:	687b      	ldr	r3, [r7, #4]
 8032782:	681b      	ldr	r3, [r3, #0]
 8032784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8032788:	2b00      	cmp	r3, #0
 803278a:	d008      	beq.n	803279e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 803278c:	4b31      	ldr	r3, [pc, #196]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803278e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032790:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8032794:	687b      	ldr	r3, [r7, #4]
 8032796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032798:	492e      	ldr	r1, [pc, #184]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803279a:	4313      	orrs	r3, r2
 803279c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 803279e:	687b      	ldr	r3, [r7, #4]
 80327a0:	681b      	ldr	r3, [r3, #0]
 80327a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80327a6:	2b00      	cmp	r3, #0
 80327a8:	d009      	beq.n	80327be <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80327aa:	4b2a      	ldr	r3, [pc, #168]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80327ac:	691b      	ldr	r3, [r3, #16]
 80327ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80327b2:	687b      	ldr	r3, [r7, #4]
 80327b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80327b8:	4926      	ldr	r1, [pc, #152]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80327ba:	4313      	orrs	r3, r2
 80327bc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80327be:	687b      	ldr	r3, [r7, #4]
 80327c0:	681b      	ldr	r3, [r3, #0]
 80327c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80327c6:	2b00      	cmp	r3, #0
 80327c8:	d008      	beq.n	80327dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80327ca:	4b22      	ldr	r3, [pc, #136]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80327cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80327ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80327d2:	687b      	ldr	r3, [r7, #4]
 80327d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80327d6:	491f      	ldr	r1, [pc, #124]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80327d8:	4313      	orrs	r3, r2
 80327da:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80327dc:	687b      	ldr	r3, [r7, #4]
 80327de:	681b      	ldr	r3, [r3, #0]
 80327e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80327e4:	2b00      	cmp	r3, #0
 80327e6:	d00d      	beq.n	8032804 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80327e8:	4b1a      	ldr	r3, [pc, #104]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80327ea:	691b      	ldr	r3, [r3, #16]
 80327ec:	4a19      	ldr	r2, [pc, #100]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80327ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80327f2:	6113      	str	r3, [r2, #16]
 80327f4:	4b17      	ldr	r3, [pc, #92]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80327f6:	691a      	ldr	r2, [r3, #16]
 80327f8:	687b      	ldr	r3, [r7, #4]
 80327fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80327fe:	4915      	ldr	r1, [pc, #84]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032800:	4313      	orrs	r3, r2
 8032802:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8032804:	687b      	ldr	r3, [r7, #4]
 8032806:	681b      	ldr	r3, [r3, #0]
 8032808:	2b00      	cmp	r3, #0
 803280a:	da08      	bge.n	803281e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 803280c:	4b11      	ldr	r3, [pc, #68]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803280e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032810:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8032814:	687b      	ldr	r3, [r7, #4]
 8032816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032818:	490e      	ldr	r1, [pc, #56]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803281a:	4313      	orrs	r3, r2
 803281c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 803281e:	687b      	ldr	r3, [r7, #4]
 8032820:	681b      	ldr	r3, [r3, #0]
 8032822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8032826:	2b00      	cmp	r3, #0
 8032828:	d009      	beq.n	803283e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 803282a:	4b0a      	ldr	r3, [pc, #40]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803282e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8032832:	687b      	ldr	r3, [r7, #4]
 8032834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8032838:	4906      	ldr	r1, [pc, #24]	; (8032854 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803283a:	4313      	orrs	r3, r2
 803283c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 803283e:	7dbb      	ldrb	r3, [r7, #22]
 8032840:	2b00      	cmp	r3, #0
 8032842:	d101      	bne.n	8032848 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8032844:	2300      	movs	r3, #0
 8032846:	e000      	b.n	803284a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8032848:	2301      	movs	r3, #1
}
 803284a:	4618      	mov	r0, r3
 803284c:	3718      	adds	r7, #24
 803284e:	46bd      	mov	sp, r7
 8032850:	bd80      	pop	{r7, pc}
 8032852:	bf00      	nop
 8032854:	58024400 	.word	0x58024400

08032858 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8032858:	b580      	push	{r7, lr}
 803285a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 803285c:	f7ff f85a 	bl	8031914 <HAL_RCC_GetHCLKFreq>
 8032860:	4602      	mov	r2, r0
 8032862:	4b06      	ldr	r3, [pc, #24]	; (803287c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8032864:	6a1b      	ldr	r3, [r3, #32]
 8032866:	091b      	lsrs	r3, r3, #4
 8032868:	f003 0307 	and.w	r3, r3, #7
 803286c:	4904      	ldr	r1, [pc, #16]	; (8032880 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 803286e:	5ccb      	ldrb	r3, [r1, r3]
 8032870:	f003 031f 	and.w	r3, r3, #31
 8032874:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8032878:	4618      	mov	r0, r3
 803287a:	bd80      	pop	{r7, pc}
 803287c:	58024400 	.word	0x58024400
 8032880:	080582dc 	.word	0x080582dc

08032884 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8032884:	b480      	push	{r7}
 8032886:	b089      	sub	sp, #36	; 0x24
 8032888:	af00      	add	r7, sp, #0
 803288a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 803288c:	4ba1      	ldr	r3, [pc, #644]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 803288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032890:	f003 0303 	and.w	r3, r3, #3
 8032894:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8032896:	4b9f      	ldr	r3, [pc, #636]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803289a:	0b1b      	lsrs	r3, r3, #12
 803289c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80328a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80328a2:	4b9c      	ldr	r3, [pc, #624]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80328a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80328a6:	091b      	lsrs	r3, r3, #4
 80328a8:	f003 0301 	and.w	r3, r3, #1
 80328ac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80328ae:	4b99      	ldr	r3, [pc, #612]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80328b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80328b2:	08db      	lsrs	r3, r3, #3
 80328b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80328b8:	693a      	ldr	r2, [r7, #16]
 80328ba:	fb02 f303 	mul.w	r3, r2, r3
 80328be:	ee07 3a90 	vmov	s15, r3
 80328c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80328c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80328ca:	697b      	ldr	r3, [r7, #20]
 80328cc:	2b00      	cmp	r3, #0
 80328ce:	f000 8111 	beq.w	8032af4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80328d2:	69bb      	ldr	r3, [r7, #24]
 80328d4:	2b02      	cmp	r3, #2
 80328d6:	f000 8083 	beq.w	80329e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80328da:	69bb      	ldr	r3, [r7, #24]
 80328dc:	2b02      	cmp	r3, #2
 80328de:	f200 80a1 	bhi.w	8032a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80328e2:	69bb      	ldr	r3, [r7, #24]
 80328e4:	2b00      	cmp	r3, #0
 80328e6:	d003      	beq.n	80328f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80328e8:	69bb      	ldr	r3, [r7, #24]
 80328ea:	2b01      	cmp	r3, #1
 80328ec:	d056      	beq.n	803299c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80328ee:	e099      	b.n	8032a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80328f0:	4b88      	ldr	r3, [pc, #544]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80328f2:	681b      	ldr	r3, [r3, #0]
 80328f4:	f003 0320 	and.w	r3, r3, #32
 80328f8:	2b00      	cmp	r3, #0
 80328fa:	d02d      	beq.n	8032958 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80328fc:	4b85      	ldr	r3, [pc, #532]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80328fe:	681b      	ldr	r3, [r3, #0]
 8032900:	08db      	lsrs	r3, r3, #3
 8032902:	f003 0303 	and.w	r3, r3, #3
 8032906:	4a84      	ldr	r2, [pc, #528]	; (8032b18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8032908:	fa22 f303 	lsr.w	r3, r2, r3
 803290c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 803290e:	68bb      	ldr	r3, [r7, #8]
 8032910:	ee07 3a90 	vmov	s15, r3
 8032914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032918:	697b      	ldr	r3, [r7, #20]
 803291a:	ee07 3a90 	vmov	s15, r3
 803291e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032926:	4b7b      	ldr	r3, [pc, #492]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803292a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803292e:	ee07 3a90 	vmov	s15, r3
 8032932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032936:	ed97 6a03 	vldr	s12, [r7, #12]
 803293a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8032b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 803293e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803294a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032952:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8032956:	e087      	b.n	8032a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032958:	697b      	ldr	r3, [r7, #20]
 803295a:	ee07 3a90 	vmov	s15, r3
 803295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032962:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8032b20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8032966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803296a:	4b6a      	ldr	r3, [pc, #424]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 803296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803296e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032972:	ee07 3a90 	vmov	s15, r3
 8032976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803297a:	ed97 6a03 	vldr	s12, [r7, #12]
 803297e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8032b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803298a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803298e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803299a:	e065      	b.n	8032a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 803299c:	697b      	ldr	r3, [r7, #20]
 803299e:	ee07 3a90 	vmov	s15, r3
 80329a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80329a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8032b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80329aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80329ae:	4b59      	ldr	r3, [pc, #356]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80329b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80329b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80329b6:	ee07 3a90 	vmov	s15, r3
 80329ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80329be:	ed97 6a03 	vldr	s12, [r7, #12]
 80329c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8032b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80329c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80329ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80329ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80329d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80329d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80329da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80329de:	e043      	b.n	8032a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80329e0:	697b      	ldr	r3, [r7, #20]
 80329e2:	ee07 3a90 	vmov	s15, r3
 80329e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80329ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8032b28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80329ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80329f2:	4b48      	ldr	r3, [pc, #288]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80329f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80329f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80329fa:	ee07 3a90 	vmov	s15, r3
 80329fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8032a06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8032b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032a22:	e021      	b.n	8032a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032a24:	697b      	ldr	r3, [r7, #20]
 8032a26:	ee07 3a90 	vmov	s15, r3
 8032a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032a2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8032b24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8032a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032a36:	4b37      	ldr	r3, [pc, #220]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032a3e:	ee07 3a90 	vmov	s15, r3
 8032a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8032a4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8032b1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032a66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8032a68:	4b2a      	ldr	r3, [pc, #168]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a6c:	0a5b      	lsrs	r3, r3, #9
 8032a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032a72:	ee07 3a90 	vmov	s15, r3
 8032a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8032a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032a8e:	ee17 2a90 	vmov	r2, s15
 8032a92:	687b      	ldr	r3, [r7, #4]
 8032a94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8032a96:	4b1f      	ldr	r3, [pc, #124]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a9a:	0c1b      	lsrs	r3, r3, #16
 8032a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032aa0:	ee07 3a90 	vmov	s15, r3
 8032aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8032ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032abc:	ee17 2a90 	vmov	r2, s15
 8032ac0:	687b      	ldr	r3, [r7, #4]
 8032ac2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8032ac4:	4b13      	ldr	r3, [pc, #76]	; (8032b14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032ac8:	0e1b      	lsrs	r3, r3, #24
 8032aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032ace:	ee07 3a90 	vmov	s15, r3
 8032ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8032ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032aea:	ee17 2a90 	vmov	r2, s15
 8032aee:	687b      	ldr	r3, [r7, #4]
 8032af0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8032af2:	e008      	b.n	8032b06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8032af4:	687b      	ldr	r3, [r7, #4]
 8032af6:	2200      	movs	r2, #0
 8032af8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8032afa:	687b      	ldr	r3, [r7, #4]
 8032afc:	2200      	movs	r2, #0
 8032afe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8032b00:	687b      	ldr	r3, [r7, #4]
 8032b02:	2200      	movs	r2, #0
 8032b04:	609a      	str	r2, [r3, #8]
}
 8032b06:	bf00      	nop
 8032b08:	3724      	adds	r7, #36	; 0x24
 8032b0a:	46bd      	mov	sp, r7
 8032b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032b10:	4770      	bx	lr
 8032b12:	bf00      	nop
 8032b14:	58024400 	.word	0x58024400
 8032b18:	03d09000 	.word	0x03d09000
 8032b1c:	46000000 	.word	0x46000000
 8032b20:	4c742400 	.word	0x4c742400
 8032b24:	4a742400 	.word	0x4a742400
 8032b28:	4bbebc20 	.word	0x4bbebc20

08032b2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8032b2c:	b480      	push	{r7}
 8032b2e:	b089      	sub	sp, #36	; 0x24
 8032b30:	af00      	add	r7, sp, #0
 8032b32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8032b34:	4ba1      	ldr	r3, [pc, #644]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032b38:	f003 0303 	and.w	r3, r3, #3
 8032b3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8032b3e:	4b9f      	ldr	r3, [pc, #636]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032b42:	0d1b      	lsrs	r3, r3, #20
 8032b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032b48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8032b4a:	4b9c      	ldr	r3, [pc, #624]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032b4e:	0a1b      	lsrs	r3, r3, #8
 8032b50:	f003 0301 	and.w	r3, r3, #1
 8032b54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8032b56:	4b99      	ldr	r3, [pc, #612]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032b5a:	08db      	lsrs	r3, r3, #3
 8032b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8032b60:	693a      	ldr	r2, [r7, #16]
 8032b62:	fb02 f303 	mul.w	r3, r2, r3
 8032b66:	ee07 3a90 	vmov	s15, r3
 8032b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032b6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8032b72:	697b      	ldr	r3, [r7, #20]
 8032b74:	2b00      	cmp	r3, #0
 8032b76:	f000 8111 	beq.w	8032d9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8032b7a:	69bb      	ldr	r3, [r7, #24]
 8032b7c:	2b02      	cmp	r3, #2
 8032b7e:	f000 8083 	beq.w	8032c88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8032b82:	69bb      	ldr	r3, [r7, #24]
 8032b84:	2b02      	cmp	r3, #2
 8032b86:	f200 80a1 	bhi.w	8032ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8032b8a:	69bb      	ldr	r3, [r7, #24]
 8032b8c:	2b00      	cmp	r3, #0
 8032b8e:	d003      	beq.n	8032b98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8032b90:	69bb      	ldr	r3, [r7, #24]
 8032b92:	2b01      	cmp	r3, #1
 8032b94:	d056      	beq.n	8032c44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8032b96:	e099      	b.n	8032ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8032b98:	4b88      	ldr	r3, [pc, #544]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032b9a:	681b      	ldr	r3, [r3, #0]
 8032b9c:	f003 0320 	and.w	r3, r3, #32
 8032ba0:	2b00      	cmp	r3, #0
 8032ba2:	d02d      	beq.n	8032c00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8032ba4:	4b85      	ldr	r3, [pc, #532]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032ba6:	681b      	ldr	r3, [r3, #0]
 8032ba8:	08db      	lsrs	r3, r3, #3
 8032baa:	f003 0303 	and.w	r3, r3, #3
 8032bae:	4a84      	ldr	r2, [pc, #528]	; (8032dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8032bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8032bb4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032bb6:	68bb      	ldr	r3, [r7, #8]
 8032bb8:	ee07 3a90 	vmov	s15, r3
 8032bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032bc0:	697b      	ldr	r3, [r7, #20]
 8032bc2:	ee07 3a90 	vmov	s15, r3
 8032bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032bce:	4b7b      	ldr	r3, [pc, #492]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032bd6:	ee07 3a90 	vmov	s15, r3
 8032bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8032be2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8032dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032bfa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8032bfe:	e087      	b.n	8032d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032c00:	697b      	ldr	r3, [r7, #20]
 8032c02:	ee07 3a90 	vmov	s15, r3
 8032c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032c0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8032dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8032c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032c12:	4b6a      	ldr	r3, [pc, #424]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032c1a:	ee07 3a90 	vmov	s15, r3
 8032c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8032c26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8032dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032c42:	e065      	b.n	8032d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032c44:	697b      	ldr	r3, [r7, #20]
 8032c46:	ee07 3a90 	vmov	s15, r3
 8032c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032c4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8032dcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8032c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032c56:	4b59      	ldr	r3, [pc, #356]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032c5e:	ee07 3a90 	vmov	s15, r3
 8032c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8032c6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8032dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032c82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032c86:	e043      	b.n	8032d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032c88:	697b      	ldr	r3, [r7, #20]
 8032c8a:	ee07 3a90 	vmov	s15, r3
 8032c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032c92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8032dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8032c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032c9a:	4b48      	ldr	r3, [pc, #288]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032ca2:	ee07 3a90 	vmov	s15, r3
 8032ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8032cae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8032dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032cc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032cca:	e021      	b.n	8032d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032ccc:	697b      	ldr	r3, [r7, #20]
 8032cce:	ee07 3a90 	vmov	s15, r3
 8032cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032cd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8032dcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8032cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032cde:	4b37      	ldr	r3, [pc, #220]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032ce6:	ee07 3a90 	vmov	s15, r3
 8032cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8032cf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8032dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032d0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032d0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8032d10:	4b2a      	ldr	r3, [pc, #168]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032d14:	0a5b      	lsrs	r3, r3, #9
 8032d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032d1a:	ee07 3a90 	vmov	s15, r3
 8032d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8032d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032d36:	ee17 2a90 	vmov	r2, s15
 8032d3a:	687b      	ldr	r3, [r7, #4]
 8032d3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8032d3e:	4b1f      	ldr	r3, [pc, #124]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032d42:	0c1b      	lsrs	r3, r3, #16
 8032d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032d48:	ee07 3a90 	vmov	s15, r3
 8032d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032d54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8032d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032d64:	ee17 2a90 	vmov	r2, s15
 8032d68:	687b      	ldr	r3, [r7, #4]
 8032d6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8032d6c:	4b13      	ldr	r3, [pc, #76]	; (8032dbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032d70:	0e1b      	lsrs	r3, r3, #24
 8032d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032d76:	ee07 3a90 	vmov	s15, r3
 8032d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8032d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032d92:	ee17 2a90 	vmov	r2, s15
 8032d96:	687b      	ldr	r3, [r7, #4]
 8032d98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8032d9a:	e008      	b.n	8032dae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8032d9c:	687b      	ldr	r3, [r7, #4]
 8032d9e:	2200      	movs	r2, #0
 8032da0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8032da2:	687b      	ldr	r3, [r7, #4]
 8032da4:	2200      	movs	r2, #0
 8032da6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8032da8:	687b      	ldr	r3, [r7, #4]
 8032daa:	2200      	movs	r2, #0
 8032dac:	609a      	str	r2, [r3, #8]
}
 8032dae:	bf00      	nop
 8032db0:	3724      	adds	r7, #36	; 0x24
 8032db2:	46bd      	mov	sp, r7
 8032db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032db8:	4770      	bx	lr
 8032dba:	bf00      	nop
 8032dbc:	58024400 	.word	0x58024400
 8032dc0:	03d09000 	.word	0x03d09000
 8032dc4:	46000000 	.word	0x46000000
 8032dc8:	4c742400 	.word	0x4c742400
 8032dcc:	4a742400 	.word	0x4a742400
 8032dd0:	4bbebc20 	.word	0x4bbebc20

08032dd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8032dd4:	b580      	push	{r7, lr}
 8032dd6:	b084      	sub	sp, #16
 8032dd8:	af00      	add	r7, sp, #0
 8032dda:	6078      	str	r0, [r7, #4]
 8032ddc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8032dde:	2300      	movs	r3, #0
 8032de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8032de2:	4b53      	ldr	r3, [pc, #332]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032de6:	f003 0303 	and.w	r3, r3, #3
 8032dea:	2b03      	cmp	r3, #3
 8032dec:	d101      	bne.n	8032df2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8032dee:	2301      	movs	r3, #1
 8032df0:	e099      	b.n	8032f26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8032df2:	4b4f      	ldr	r3, [pc, #316]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032df4:	681b      	ldr	r3, [r3, #0]
 8032df6:	4a4e      	ldr	r2, [pc, #312]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032df8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8032dfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8032dfe:	f7f7 fe43 	bl	802aa88 <HAL_GetTick>
 8032e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8032e04:	e008      	b.n	8032e18 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8032e06:	f7f7 fe3f 	bl	802aa88 <HAL_GetTick>
 8032e0a:	4602      	mov	r2, r0
 8032e0c:	68bb      	ldr	r3, [r7, #8]
 8032e0e:	1ad3      	subs	r3, r2, r3
 8032e10:	2b02      	cmp	r3, #2
 8032e12:	d901      	bls.n	8032e18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8032e14:	2303      	movs	r3, #3
 8032e16:	e086      	b.n	8032f26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8032e18:	4b45      	ldr	r3, [pc, #276]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032e1a:	681b      	ldr	r3, [r3, #0]
 8032e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8032e20:	2b00      	cmp	r3, #0
 8032e22:	d1f0      	bne.n	8032e06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8032e24:	4b42      	ldr	r3, [pc, #264]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032e28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8032e2c:	687b      	ldr	r3, [r7, #4]
 8032e2e:	681b      	ldr	r3, [r3, #0]
 8032e30:	031b      	lsls	r3, r3, #12
 8032e32:	493f      	ldr	r1, [pc, #252]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032e34:	4313      	orrs	r3, r2
 8032e36:	628b      	str	r3, [r1, #40]	; 0x28
 8032e38:	687b      	ldr	r3, [r7, #4]
 8032e3a:	685b      	ldr	r3, [r3, #4]
 8032e3c:	3b01      	subs	r3, #1
 8032e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8032e42:	687b      	ldr	r3, [r7, #4]
 8032e44:	689b      	ldr	r3, [r3, #8]
 8032e46:	3b01      	subs	r3, #1
 8032e48:	025b      	lsls	r3, r3, #9
 8032e4a:	b29b      	uxth	r3, r3
 8032e4c:	431a      	orrs	r2, r3
 8032e4e:	687b      	ldr	r3, [r7, #4]
 8032e50:	68db      	ldr	r3, [r3, #12]
 8032e52:	3b01      	subs	r3, #1
 8032e54:	041b      	lsls	r3, r3, #16
 8032e56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8032e5a:	431a      	orrs	r2, r3
 8032e5c:	687b      	ldr	r3, [r7, #4]
 8032e5e:	691b      	ldr	r3, [r3, #16]
 8032e60:	3b01      	subs	r3, #1
 8032e62:	061b      	lsls	r3, r3, #24
 8032e64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8032e68:	4931      	ldr	r1, [pc, #196]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032e6a:	4313      	orrs	r3, r2
 8032e6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8032e6e:	4b30      	ldr	r3, [pc, #192]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032e72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8032e76:	687b      	ldr	r3, [r7, #4]
 8032e78:	695b      	ldr	r3, [r3, #20]
 8032e7a:	492d      	ldr	r1, [pc, #180]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032e7c:	4313      	orrs	r3, r2
 8032e7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8032e80:	4b2b      	ldr	r3, [pc, #172]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032e84:	f023 0220 	bic.w	r2, r3, #32
 8032e88:	687b      	ldr	r3, [r7, #4]
 8032e8a:	699b      	ldr	r3, [r3, #24]
 8032e8c:	4928      	ldr	r1, [pc, #160]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032e8e:	4313      	orrs	r3, r2
 8032e90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8032e92:	4b27      	ldr	r3, [pc, #156]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032e96:	4a26      	ldr	r2, [pc, #152]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032e98:	f023 0310 	bic.w	r3, r3, #16
 8032e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8032e9e:	4b24      	ldr	r3, [pc, #144]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8032ea2:	4b24      	ldr	r3, [pc, #144]	; (8032f34 <RCCEx_PLL2_Config+0x160>)
 8032ea4:	4013      	ands	r3, r2
 8032ea6:	687a      	ldr	r2, [r7, #4]
 8032ea8:	69d2      	ldr	r2, [r2, #28]
 8032eaa:	00d2      	lsls	r2, r2, #3
 8032eac:	4920      	ldr	r1, [pc, #128]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032eae:	4313      	orrs	r3, r2
 8032eb0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8032eb2:	4b1f      	ldr	r3, [pc, #124]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032eb6:	4a1e      	ldr	r2, [pc, #120]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032eb8:	f043 0310 	orr.w	r3, r3, #16
 8032ebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8032ebe:	683b      	ldr	r3, [r7, #0]
 8032ec0:	2b00      	cmp	r3, #0
 8032ec2:	d106      	bne.n	8032ed2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8032ec4:	4b1a      	ldr	r3, [pc, #104]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032ec8:	4a19      	ldr	r2, [pc, #100]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032eca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8032ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8032ed0:	e00f      	b.n	8032ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8032ed2:	683b      	ldr	r3, [r7, #0]
 8032ed4:	2b01      	cmp	r3, #1
 8032ed6:	d106      	bne.n	8032ee6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8032ed8:	4b15      	ldr	r3, [pc, #84]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032edc:	4a14      	ldr	r2, [pc, #80]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8032ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8032ee4:	e005      	b.n	8032ef2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8032ee6:	4b12      	ldr	r3, [pc, #72]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032eea:	4a11      	ldr	r2, [pc, #68]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8032ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8032ef2:	4b0f      	ldr	r3, [pc, #60]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032ef4:	681b      	ldr	r3, [r3, #0]
 8032ef6:	4a0e      	ldr	r2, [pc, #56]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032ef8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8032efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8032efe:	f7f7 fdc3 	bl	802aa88 <HAL_GetTick>
 8032f02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8032f04:	e008      	b.n	8032f18 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8032f06:	f7f7 fdbf 	bl	802aa88 <HAL_GetTick>
 8032f0a:	4602      	mov	r2, r0
 8032f0c:	68bb      	ldr	r3, [r7, #8]
 8032f0e:	1ad3      	subs	r3, r2, r3
 8032f10:	2b02      	cmp	r3, #2
 8032f12:	d901      	bls.n	8032f18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8032f14:	2303      	movs	r3, #3
 8032f16:	e006      	b.n	8032f26 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8032f18:	4b05      	ldr	r3, [pc, #20]	; (8032f30 <RCCEx_PLL2_Config+0x15c>)
 8032f1a:	681b      	ldr	r3, [r3, #0]
 8032f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8032f20:	2b00      	cmp	r3, #0
 8032f22:	d0f0      	beq.n	8032f06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8032f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8032f26:	4618      	mov	r0, r3
 8032f28:	3710      	adds	r7, #16
 8032f2a:	46bd      	mov	sp, r7
 8032f2c:	bd80      	pop	{r7, pc}
 8032f2e:	bf00      	nop
 8032f30:	58024400 	.word	0x58024400
 8032f34:	ffff0007 	.word	0xffff0007

08032f38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8032f38:	b580      	push	{r7, lr}
 8032f3a:	b084      	sub	sp, #16
 8032f3c:	af00      	add	r7, sp, #0
 8032f3e:	6078      	str	r0, [r7, #4]
 8032f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8032f42:	2300      	movs	r3, #0
 8032f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8032f46:	4b53      	ldr	r3, [pc, #332]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032f4a:	f003 0303 	and.w	r3, r3, #3
 8032f4e:	2b03      	cmp	r3, #3
 8032f50:	d101      	bne.n	8032f56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8032f52:	2301      	movs	r3, #1
 8032f54:	e099      	b.n	803308a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8032f56:	4b4f      	ldr	r3, [pc, #316]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032f58:	681b      	ldr	r3, [r3, #0]
 8032f5a:	4a4e      	ldr	r2, [pc, #312]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8032f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8032f62:	f7f7 fd91 	bl	802aa88 <HAL_GetTick>
 8032f66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8032f68:	e008      	b.n	8032f7c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8032f6a:	f7f7 fd8d 	bl	802aa88 <HAL_GetTick>
 8032f6e:	4602      	mov	r2, r0
 8032f70:	68bb      	ldr	r3, [r7, #8]
 8032f72:	1ad3      	subs	r3, r2, r3
 8032f74:	2b02      	cmp	r3, #2
 8032f76:	d901      	bls.n	8032f7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8032f78:	2303      	movs	r3, #3
 8032f7a:	e086      	b.n	803308a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8032f7c:	4b45      	ldr	r3, [pc, #276]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032f7e:	681b      	ldr	r3, [r3, #0]
 8032f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8032f84:	2b00      	cmp	r3, #0
 8032f86:	d1f0      	bne.n	8032f6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8032f88:	4b42      	ldr	r3, [pc, #264]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032f8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8032f90:	687b      	ldr	r3, [r7, #4]
 8032f92:	681b      	ldr	r3, [r3, #0]
 8032f94:	051b      	lsls	r3, r3, #20
 8032f96:	493f      	ldr	r1, [pc, #252]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032f98:	4313      	orrs	r3, r2
 8032f9a:	628b      	str	r3, [r1, #40]	; 0x28
 8032f9c:	687b      	ldr	r3, [r7, #4]
 8032f9e:	685b      	ldr	r3, [r3, #4]
 8032fa0:	3b01      	subs	r3, #1
 8032fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8032fa6:	687b      	ldr	r3, [r7, #4]
 8032fa8:	689b      	ldr	r3, [r3, #8]
 8032faa:	3b01      	subs	r3, #1
 8032fac:	025b      	lsls	r3, r3, #9
 8032fae:	b29b      	uxth	r3, r3
 8032fb0:	431a      	orrs	r2, r3
 8032fb2:	687b      	ldr	r3, [r7, #4]
 8032fb4:	68db      	ldr	r3, [r3, #12]
 8032fb6:	3b01      	subs	r3, #1
 8032fb8:	041b      	lsls	r3, r3, #16
 8032fba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8032fbe:	431a      	orrs	r2, r3
 8032fc0:	687b      	ldr	r3, [r7, #4]
 8032fc2:	691b      	ldr	r3, [r3, #16]
 8032fc4:	3b01      	subs	r3, #1
 8032fc6:	061b      	lsls	r3, r3, #24
 8032fc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8032fcc:	4931      	ldr	r1, [pc, #196]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032fce:	4313      	orrs	r3, r2
 8032fd0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8032fd2:	4b30      	ldr	r3, [pc, #192]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032fd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8032fda:	687b      	ldr	r3, [r7, #4]
 8032fdc:	695b      	ldr	r3, [r3, #20]
 8032fde:	492d      	ldr	r1, [pc, #180]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032fe0:	4313      	orrs	r3, r2
 8032fe2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8032fe4:	4b2b      	ldr	r3, [pc, #172]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032fe8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8032fec:	687b      	ldr	r3, [r7, #4]
 8032fee:	699b      	ldr	r3, [r3, #24]
 8032ff0:	4928      	ldr	r1, [pc, #160]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032ff2:	4313      	orrs	r3, r2
 8032ff4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8032ff6:	4b27      	ldr	r3, [pc, #156]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032ffa:	4a26      	ldr	r2, [pc, #152]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8032ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8033000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8033002:	4b24      	ldr	r3, [pc, #144]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8033004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8033006:	4b24      	ldr	r3, [pc, #144]	; (8033098 <RCCEx_PLL3_Config+0x160>)
 8033008:	4013      	ands	r3, r2
 803300a:	687a      	ldr	r2, [r7, #4]
 803300c:	69d2      	ldr	r2, [r2, #28]
 803300e:	00d2      	lsls	r2, r2, #3
 8033010:	4920      	ldr	r1, [pc, #128]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8033012:	4313      	orrs	r3, r2
 8033014:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8033016:	4b1f      	ldr	r3, [pc, #124]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8033018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803301a:	4a1e      	ldr	r2, [pc, #120]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 803301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8033020:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8033022:	683b      	ldr	r3, [r7, #0]
 8033024:	2b00      	cmp	r3, #0
 8033026:	d106      	bne.n	8033036 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8033028:	4b1a      	ldr	r3, [pc, #104]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 803302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803302c:	4a19      	ldr	r2, [pc, #100]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 803302e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8033032:	62d3      	str	r3, [r2, #44]	; 0x2c
 8033034:	e00f      	b.n	8033056 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8033036:	683b      	ldr	r3, [r7, #0]
 8033038:	2b01      	cmp	r3, #1
 803303a:	d106      	bne.n	803304a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 803303c:	4b15      	ldr	r3, [pc, #84]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 803303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033040:	4a14      	ldr	r2, [pc, #80]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8033042:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8033046:	62d3      	str	r3, [r2, #44]	; 0x2c
 8033048:	e005      	b.n	8033056 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 803304a:	4b12      	ldr	r3, [pc, #72]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 803304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803304e:	4a11      	ldr	r2, [pc, #68]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8033050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8033054:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8033056:	4b0f      	ldr	r3, [pc, #60]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 8033058:	681b      	ldr	r3, [r3, #0]
 803305a:	4a0e      	ldr	r2, [pc, #56]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 803305c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8033060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8033062:	f7f7 fd11 	bl	802aa88 <HAL_GetTick>
 8033066:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8033068:	e008      	b.n	803307c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 803306a:	f7f7 fd0d 	bl	802aa88 <HAL_GetTick>
 803306e:	4602      	mov	r2, r0
 8033070:	68bb      	ldr	r3, [r7, #8]
 8033072:	1ad3      	subs	r3, r2, r3
 8033074:	2b02      	cmp	r3, #2
 8033076:	d901      	bls.n	803307c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8033078:	2303      	movs	r3, #3
 803307a:	e006      	b.n	803308a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 803307c:	4b05      	ldr	r3, [pc, #20]	; (8033094 <RCCEx_PLL3_Config+0x15c>)
 803307e:	681b      	ldr	r3, [r3, #0]
 8033080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8033084:	2b00      	cmp	r3, #0
 8033086:	d0f0      	beq.n	803306a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8033088:	7bfb      	ldrb	r3, [r7, #15]
}
 803308a:	4618      	mov	r0, r3
 803308c:	3710      	adds	r7, #16
 803308e:	46bd      	mov	sp, r7
 8033090:	bd80      	pop	{r7, pc}
 8033092:	bf00      	nop
 8033094:	58024400 	.word	0x58024400
 8033098:	ffff0007 	.word	0xffff0007

0803309c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 803309c:	b580      	push	{r7, lr}
 803309e:	b084      	sub	sp, #16
 80330a0:	af00      	add	r7, sp, #0
 80330a2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80330a4:	687b      	ldr	r3, [r7, #4]
 80330a6:	2b00      	cmp	r3, #0
 80330a8:	d101      	bne.n	80330ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80330aa:	2301      	movs	r3, #1
 80330ac:	e0f1      	b.n	8033292 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80330ae:	687b      	ldr	r3, [r7, #4]
 80330b0:	2200      	movs	r2, #0
 80330b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80330b4:	687b      	ldr	r3, [r7, #4]
 80330b6:	681b      	ldr	r3, [r3, #0]
 80330b8:	4a78      	ldr	r2, [pc, #480]	; (803329c <HAL_SPI_Init+0x200>)
 80330ba:	4293      	cmp	r3, r2
 80330bc:	d00f      	beq.n	80330de <HAL_SPI_Init+0x42>
 80330be:	687b      	ldr	r3, [r7, #4]
 80330c0:	681b      	ldr	r3, [r3, #0]
 80330c2:	4a77      	ldr	r2, [pc, #476]	; (80332a0 <HAL_SPI_Init+0x204>)
 80330c4:	4293      	cmp	r3, r2
 80330c6:	d00a      	beq.n	80330de <HAL_SPI_Init+0x42>
 80330c8:	687b      	ldr	r3, [r7, #4]
 80330ca:	681b      	ldr	r3, [r3, #0]
 80330cc:	4a75      	ldr	r2, [pc, #468]	; (80332a4 <HAL_SPI_Init+0x208>)
 80330ce:	4293      	cmp	r3, r2
 80330d0:	d005      	beq.n	80330de <HAL_SPI_Init+0x42>
 80330d2:	687b      	ldr	r3, [r7, #4]
 80330d4:	68db      	ldr	r3, [r3, #12]
 80330d6:	2b0f      	cmp	r3, #15
 80330d8:	d901      	bls.n	80330de <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80330da:	2301      	movs	r3, #1
 80330dc:	e0d9      	b.n	8033292 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80330de:	6878      	ldr	r0, [r7, #4]
 80330e0:	f001 f8ee 	bl	80342c0 <SPI_GetPacketSize>
 80330e4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80330e6:	687b      	ldr	r3, [r7, #4]
 80330e8:	681b      	ldr	r3, [r3, #0]
 80330ea:	4a6c      	ldr	r2, [pc, #432]	; (803329c <HAL_SPI_Init+0x200>)
 80330ec:	4293      	cmp	r3, r2
 80330ee:	d00c      	beq.n	803310a <HAL_SPI_Init+0x6e>
 80330f0:	687b      	ldr	r3, [r7, #4]
 80330f2:	681b      	ldr	r3, [r3, #0]
 80330f4:	4a6a      	ldr	r2, [pc, #424]	; (80332a0 <HAL_SPI_Init+0x204>)
 80330f6:	4293      	cmp	r3, r2
 80330f8:	d007      	beq.n	803310a <HAL_SPI_Init+0x6e>
 80330fa:	687b      	ldr	r3, [r7, #4]
 80330fc:	681b      	ldr	r3, [r3, #0]
 80330fe:	4a69      	ldr	r2, [pc, #420]	; (80332a4 <HAL_SPI_Init+0x208>)
 8033100:	4293      	cmp	r3, r2
 8033102:	d002      	beq.n	803310a <HAL_SPI_Init+0x6e>
 8033104:	68fb      	ldr	r3, [r7, #12]
 8033106:	2b08      	cmp	r3, #8
 8033108:	d811      	bhi.n	803312e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 803310a:	687b      	ldr	r3, [r7, #4]
 803310c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 803310e:	4a63      	ldr	r2, [pc, #396]	; (803329c <HAL_SPI_Init+0x200>)
 8033110:	4293      	cmp	r3, r2
 8033112:	d009      	beq.n	8033128 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8033114:	687b      	ldr	r3, [r7, #4]
 8033116:	681b      	ldr	r3, [r3, #0]
 8033118:	4a61      	ldr	r2, [pc, #388]	; (80332a0 <HAL_SPI_Init+0x204>)
 803311a:	4293      	cmp	r3, r2
 803311c:	d004      	beq.n	8033128 <HAL_SPI_Init+0x8c>
 803311e:	687b      	ldr	r3, [r7, #4]
 8033120:	681b      	ldr	r3, [r3, #0]
 8033122:	4a60      	ldr	r2, [pc, #384]	; (80332a4 <HAL_SPI_Init+0x208>)
 8033124:	4293      	cmp	r3, r2
 8033126:	d104      	bne.n	8033132 <HAL_SPI_Init+0x96>
 8033128:	68fb      	ldr	r3, [r7, #12]
 803312a:	2b10      	cmp	r3, #16
 803312c:	d901      	bls.n	8033132 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 803312e:	2301      	movs	r3, #1
 8033130:	e0af      	b.n	8033292 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8033132:	687b      	ldr	r3, [r7, #4]
 8033134:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033138:	b2db      	uxtb	r3, r3
 803313a:	2b00      	cmp	r3, #0
 803313c:	d106      	bne.n	803314c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 803313e:	687b      	ldr	r3, [r7, #4]
 8033140:	2200      	movs	r2, #0
 8033142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8033146:	6878      	ldr	r0, [r7, #4]
 8033148:	f7f6 fc46 	bl	80299d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 803314c:	687b      	ldr	r3, [r7, #4]
 803314e:	2202      	movs	r2, #2
 8033150:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8033154:	687b      	ldr	r3, [r7, #4]
 8033156:	681b      	ldr	r3, [r3, #0]
 8033158:	681a      	ldr	r2, [r3, #0]
 803315a:	687b      	ldr	r3, [r7, #4]
 803315c:	681b      	ldr	r3, [r3, #0]
 803315e:	f022 0201 	bic.w	r2, r2, #1
 8033162:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8033164:	687b      	ldr	r3, [r7, #4]
 8033166:	681b      	ldr	r3, [r3, #0]
 8033168:	689b      	ldr	r3, [r3, #8]
 803316a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 803316e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8033170:	687b      	ldr	r3, [r7, #4]
 8033172:	699b      	ldr	r3, [r3, #24]
 8033174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8033178:	d119      	bne.n	80331ae <HAL_SPI_Init+0x112>
 803317a:	687b      	ldr	r3, [r7, #4]
 803317c:	685b      	ldr	r3, [r3, #4]
 803317e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033182:	d103      	bne.n	803318c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8033184:	687b      	ldr	r3, [r7, #4]
 8033186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8033188:	2b00      	cmp	r3, #0
 803318a:	d008      	beq.n	803319e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 803318c:	687b      	ldr	r3, [r7, #4]
 803318e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8033190:	2b00      	cmp	r3, #0
 8033192:	d10c      	bne.n	80331ae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8033194:	687b      	ldr	r3, [r7, #4]
 8033196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8033198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803319c:	d107      	bne.n	80331ae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 803319e:	687b      	ldr	r3, [r7, #4]
 80331a0:	681b      	ldr	r3, [r3, #0]
 80331a2:	681a      	ldr	r2, [r3, #0]
 80331a4:	687b      	ldr	r3, [r7, #4]
 80331a6:	681b      	ldr	r3, [r3, #0]
 80331a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80331ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80331ae:	687b      	ldr	r3, [r7, #4]
 80331b0:	69da      	ldr	r2, [r3, #28]
 80331b2:	687b      	ldr	r3, [r7, #4]
 80331b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80331b6:	431a      	orrs	r2, r3
 80331b8:	68bb      	ldr	r3, [r7, #8]
 80331ba:	431a      	orrs	r2, r3
 80331bc:	687b      	ldr	r3, [r7, #4]
 80331be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80331c0:	ea42 0103 	orr.w	r1, r2, r3
 80331c4:	687b      	ldr	r3, [r7, #4]
 80331c6:	68da      	ldr	r2, [r3, #12]
 80331c8:	687b      	ldr	r3, [r7, #4]
 80331ca:	681b      	ldr	r3, [r3, #0]
 80331cc:	430a      	orrs	r2, r1
 80331ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80331d0:	687b      	ldr	r3, [r7, #4]
 80331d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80331d4:	687b      	ldr	r3, [r7, #4]
 80331d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80331d8:	431a      	orrs	r2, r3
 80331da:	687b      	ldr	r3, [r7, #4]
 80331dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80331de:	431a      	orrs	r2, r3
 80331e0:	687b      	ldr	r3, [r7, #4]
 80331e2:	699b      	ldr	r3, [r3, #24]
 80331e4:	431a      	orrs	r2, r3
 80331e6:	687b      	ldr	r3, [r7, #4]
 80331e8:	691b      	ldr	r3, [r3, #16]
 80331ea:	431a      	orrs	r2, r3
 80331ec:	687b      	ldr	r3, [r7, #4]
 80331ee:	695b      	ldr	r3, [r3, #20]
 80331f0:	431a      	orrs	r2, r3
 80331f2:	687b      	ldr	r3, [r7, #4]
 80331f4:	6a1b      	ldr	r3, [r3, #32]
 80331f6:	431a      	orrs	r2, r3
 80331f8:	687b      	ldr	r3, [r7, #4]
 80331fa:	685b      	ldr	r3, [r3, #4]
 80331fc:	431a      	orrs	r2, r3
 80331fe:	687b      	ldr	r3, [r7, #4]
 8033200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033202:	431a      	orrs	r2, r3
 8033204:	687b      	ldr	r3, [r7, #4]
 8033206:	689b      	ldr	r3, [r3, #8]
 8033208:	431a      	orrs	r2, r3
 803320a:	687b      	ldr	r3, [r7, #4]
 803320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803320e:	ea42 0103 	orr.w	r1, r2, r3
 8033212:	687b      	ldr	r3, [r7, #4]
 8033214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8033216:	687b      	ldr	r3, [r7, #4]
 8033218:	681b      	ldr	r3, [r3, #0]
 803321a:	430a      	orrs	r2, r1
 803321c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 803321e:	687b      	ldr	r3, [r7, #4]
 8033220:	685b      	ldr	r3, [r3, #4]
 8033222:	2b00      	cmp	r3, #0
 8033224:	d113      	bne.n	803324e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8033226:	687b      	ldr	r3, [r7, #4]
 8033228:	681b      	ldr	r3, [r3, #0]
 803322a:	689b      	ldr	r3, [r3, #8]
 803322c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8033230:	687b      	ldr	r3, [r7, #4]
 8033232:	681b      	ldr	r3, [r3, #0]
 8033234:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033238:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 803323a:	687b      	ldr	r3, [r7, #4]
 803323c:	681b      	ldr	r3, [r3, #0]
 803323e:	689b      	ldr	r3, [r3, #8]
 8033240:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8033244:	687b      	ldr	r3, [r7, #4]
 8033246:	681b      	ldr	r3, [r3, #0]
 8033248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 803324c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 803324e:	687b      	ldr	r3, [r7, #4]
 8033250:	681b      	ldr	r3, [r3, #0]
 8033252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8033254:	687b      	ldr	r3, [r7, #4]
 8033256:	681b      	ldr	r3, [r3, #0]
 8033258:	f022 0201 	bic.w	r2, r2, #1
 803325c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 803325e:	687b      	ldr	r3, [r7, #4]
 8033260:	685b      	ldr	r3, [r3, #4]
 8033262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8033266:	2b00      	cmp	r3, #0
 8033268:	d00a      	beq.n	8033280 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 803326a:	687b      	ldr	r3, [r7, #4]
 803326c:	681b      	ldr	r3, [r3, #0]
 803326e:	68db      	ldr	r3, [r3, #12]
 8033270:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8033274:	687b      	ldr	r3, [r7, #4]
 8033276:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8033278:	687b      	ldr	r3, [r7, #4]
 803327a:	681b      	ldr	r3, [r3, #0]
 803327c:	430a      	orrs	r2, r1
 803327e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8033280:	687b      	ldr	r3, [r7, #4]
 8033282:	2200      	movs	r2, #0
 8033284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8033288:	687b      	ldr	r3, [r7, #4]
 803328a:	2201      	movs	r2, #1
 803328c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8033290:	2300      	movs	r3, #0
}
 8033292:	4618      	mov	r0, r3
 8033294:	3710      	adds	r7, #16
 8033296:	46bd      	mov	sp, r7
 8033298:	bd80      	pop	{r7, pc}
 803329a:	bf00      	nop
 803329c:	40013000 	.word	0x40013000
 80332a0:	40003800 	.word	0x40003800
 80332a4:	40003c00 	.word	0x40003c00

080332a8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80332a8:	b580      	push	{r7, lr}
 80332aa:	b086      	sub	sp, #24
 80332ac:	af00      	add	r7, sp, #0
 80332ae:	60f8      	str	r0, [r7, #12]
 80332b0:	60b9      	str	r1, [r7, #8]
 80332b2:	4613      	mov	r3, r2
 80332b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80332b6:	2300      	movs	r3, #0
 80332b8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80332ba:	68fb      	ldr	r3, [r7, #12]
 80332bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80332c0:	2b01      	cmp	r3, #1
 80332c2:	d101      	bne.n	80332c8 <HAL_SPI_Transmit_DMA+0x20>
 80332c4:	2302      	movs	r3, #2
 80332c6:	e12c      	b.n	8033522 <HAL_SPI_Transmit_DMA+0x27a>
 80332c8:	68fb      	ldr	r3, [r7, #12]
 80332ca:	2201      	movs	r2, #1
 80332cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80332d0:	68fb      	ldr	r3, [r7, #12]
 80332d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80332d6:	b2db      	uxtb	r3, r3
 80332d8:	2b01      	cmp	r3, #1
 80332da:	d007      	beq.n	80332ec <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 80332dc:	2302      	movs	r3, #2
 80332de:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80332e0:	68fb      	ldr	r3, [r7, #12]
 80332e2:	2200      	movs	r2, #0
 80332e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80332e8:	7dfb      	ldrb	r3, [r7, #23]
 80332ea:	e11a      	b.n	8033522 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 80332ec:	68bb      	ldr	r3, [r7, #8]
 80332ee:	2b00      	cmp	r3, #0
 80332f0:	d002      	beq.n	80332f8 <HAL_SPI_Transmit_DMA+0x50>
 80332f2:	88fb      	ldrh	r3, [r7, #6]
 80332f4:	2b00      	cmp	r3, #0
 80332f6:	d107      	bne.n	8033308 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80332f8:	2301      	movs	r3, #1
 80332fa:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80332fc:	68fb      	ldr	r3, [r7, #12]
 80332fe:	2200      	movs	r2, #0
 8033300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033304:	7dfb      	ldrb	r3, [r7, #23]
 8033306:	e10c      	b.n	8033522 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8033308:	68fb      	ldr	r3, [r7, #12]
 803330a:	2203      	movs	r2, #3
 803330c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8033310:	68fb      	ldr	r3, [r7, #12]
 8033312:	2200      	movs	r2, #0
 8033314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8033318:	68fb      	ldr	r3, [r7, #12]
 803331a:	68ba      	ldr	r2, [r7, #8]
 803331c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 803331e:	68fb      	ldr	r3, [r7, #12]
 8033320:	88fa      	ldrh	r2, [r7, #6]
 8033322:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8033326:	68fb      	ldr	r3, [r7, #12]
 8033328:	88fa      	ldrh	r2, [r7, #6]
 803332a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 803332e:	68fb      	ldr	r3, [r7, #12]
 8033330:	2200      	movs	r2, #0
 8033332:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8033334:	68fb      	ldr	r3, [r7, #12]
 8033336:	2200      	movs	r2, #0
 8033338:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 803333a:	68fb      	ldr	r3, [r7, #12]
 803333c:	2200      	movs	r2, #0
 803333e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8033340:	68fb      	ldr	r3, [r7, #12]
 8033342:	2200      	movs	r2, #0
 8033344:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8033348:	68fb      	ldr	r3, [r7, #12]
 803334a:	2200      	movs	r2, #0
 803334c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8033350:	68fb      	ldr	r3, [r7, #12]
 8033352:	689b      	ldr	r3, [r3, #8]
 8033354:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8033358:	d107      	bne.n	803336a <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 803335a:	68fb      	ldr	r3, [r7, #12]
 803335c:	681b      	ldr	r3, [r3, #0]
 803335e:	681a      	ldr	r2, [r3, #0]
 8033360:	68fb      	ldr	r3, [r7, #12]
 8033362:	681b      	ldr	r3, [r3, #0]
 8033364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033368:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 803336a:	68fb      	ldr	r3, [r7, #12]
 803336c:	68db      	ldr	r3, [r3, #12]
 803336e:	2b0f      	cmp	r3, #15
 8033370:	d905      	bls.n	803337e <HAL_SPI_Transmit_DMA+0xd6>
 8033372:	68fb      	ldr	r3, [r7, #12]
 8033374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033376:	699b      	ldr	r3, [r3, #24]
 8033378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803337c:	d10f      	bne.n	803339e <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 803337e:	68fb      	ldr	r3, [r7, #12]
 8033380:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033382:	2b07      	cmp	r3, #7
 8033384:	d913      	bls.n	80333ae <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033386:	68fb      	ldr	r3, [r7, #12]
 8033388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803338a:	699b      	ldr	r3, [r3, #24]
 803338c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033390:	d00d      	beq.n	80333ae <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8033392:	68fb      	ldr	r3, [r7, #12]
 8033394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033396:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803339c:	d007      	beq.n	80333ae <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 803339e:	2301      	movs	r3, #1
 80333a0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80333a2:	68fb      	ldr	r3, [r7, #12]
 80333a4:	2200      	movs	r2, #0
 80333a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80333aa:	7dfb      	ldrb	r3, [r7, #23]
 80333ac:	e0b9      	b.n	8033522 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80333ae:	68fb      	ldr	r3, [r7, #12]
 80333b0:	68db      	ldr	r3, [r3, #12]
 80333b2:	2b07      	cmp	r3, #7
 80333b4:	d820      	bhi.n	80333f8 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80333b6:	68fb      	ldr	r3, [r7, #12]
 80333b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80333ba:	699b      	ldr	r3, [r3, #24]
 80333bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80333c0:	d109      	bne.n	80333d6 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80333c2:	68fb      	ldr	r3, [r7, #12]
 80333c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80333c8:	b29b      	uxth	r3, r3
 80333ca:	3301      	adds	r3, #1
 80333cc:	105b      	asrs	r3, r3, #1
 80333ce:	b29a      	uxth	r2, r3
 80333d0:	68fb      	ldr	r3, [r7, #12]
 80333d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80333d6:	68fb      	ldr	r3, [r7, #12]
 80333d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80333da:	699b      	ldr	r3, [r3, #24]
 80333dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80333e0:	d11e      	bne.n	8033420 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80333e2:	68fb      	ldr	r3, [r7, #12]
 80333e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80333e8:	b29b      	uxth	r3, r3
 80333ea:	3303      	adds	r3, #3
 80333ec:	109b      	asrs	r3, r3, #2
 80333ee:	b29a      	uxth	r2, r3
 80333f0:	68fb      	ldr	r3, [r7, #12]
 80333f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80333f6:	e013      	b.n	8033420 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80333f8:	68fb      	ldr	r3, [r7, #12]
 80333fa:	68db      	ldr	r3, [r3, #12]
 80333fc:	2b0f      	cmp	r3, #15
 80333fe:	d80f      	bhi.n	8033420 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033400:	68fb      	ldr	r3, [r7, #12]
 8033402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033404:	699b      	ldr	r3, [r3, #24]
 8033406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803340a:	d109      	bne.n	8033420 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 803340c:	68fb      	ldr	r3, [r7, #12]
 803340e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033412:	b29b      	uxth	r3, r3
 8033414:	3301      	adds	r3, #1
 8033416:	105b      	asrs	r3, r3, #1
 8033418:	b29a      	uxth	r2, r3
 803341a:	68fb      	ldr	r3, [r7, #12]
 803341c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8033420:	68fb      	ldr	r3, [r7, #12]
 8033422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033424:	4a41      	ldr	r2, [pc, #260]	; (803352c <HAL_SPI_Transmit_DMA+0x284>)
 8033426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8033428:	68fb      	ldr	r3, [r7, #12]
 803342a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803342c:	4a40      	ldr	r2, [pc, #256]	; (8033530 <HAL_SPI_Transmit_DMA+0x288>)
 803342e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8033430:	68fb      	ldr	r3, [r7, #12]
 8033432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033434:	4a3f      	ldr	r2, [pc, #252]	; (8033534 <HAL_SPI_Transmit_DMA+0x28c>)
 8033436:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8033438:	68fb      	ldr	r3, [r7, #12]
 803343a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803343c:	2200      	movs	r2, #0
 803343e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8033440:	68fb      	ldr	r3, [r7, #12]
 8033442:	681b      	ldr	r3, [r3, #0]
 8033444:	689a      	ldr	r2, [r3, #8]
 8033446:	68fb      	ldr	r3, [r7, #12]
 8033448:	681b      	ldr	r3, [r3, #0]
 803344a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 803344e:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033450:	68fb      	ldr	r3, [r7, #12]
 8033452:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8033454:	68fb      	ldr	r3, [r7, #12]
 8033456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033458:	4619      	mov	r1, r3
 803345a:	68fb      	ldr	r3, [r7, #12]
 803345c:	681b      	ldr	r3, [r3, #0]
 803345e:	3320      	adds	r3, #32
 8033460:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8033462:	68fb      	ldr	r3, [r7, #12]
 8033464:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033468:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 803346a:	f7f8 fb65 	bl	802bb38 <HAL_DMA_Start_IT>
 803346e:	4603      	mov	r3, r0
 8033470:	2b00      	cmp	r3, #0
 8033472:	d013      	beq.n	803349c <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033474:	68fb      	ldr	r3, [r7, #12]
 8033476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803347a:	f043 0210 	orr.w	r2, r3, #16
 803347e:	68fb      	ldr	r3, [r7, #12]
 8033480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033484:	68fb      	ldr	r3, [r7, #12]
 8033486:	2200      	movs	r2, #0
 8033488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 803348c:	68fb      	ldr	r3, [r7, #12]
 803348e:	2201      	movs	r2, #1
 8033490:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033494:	2301      	movs	r3, #1
 8033496:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033498:	7dfb      	ldrb	r3, [r7, #23]
 803349a:	e042      	b.n	8033522 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 803349c:	68fb      	ldr	r3, [r7, #12]
 803349e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80334a0:	69db      	ldr	r3, [r3, #28]
 80334a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80334a6:	d108      	bne.n	80334ba <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80334a8:	68fb      	ldr	r3, [r7, #12]
 80334aa:	681b      	ldr	r3, [r3, #0]
 80334ac:	6859      	ldr	r1, [r3, #4]
 80334ae:	68fb      	ldr	r3, [r7, #12]
 80334b0:	681a      	ldr	r2, [r3, #0]
 80334b2:	4b21      	ldr	r3, [pc, #132]	; (8033538 <HAL_SPI_Transmit_DMA+0x290>)
 80334b4:	400b      	ands	r3, r1
 80334b6:	6053      	str	r3, [r2, #4]
 80334b8:	e009      	b.n	80334ce <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80334ba:	68fb      	ldr	r3, [r7, #12]
 80334bc:	681b      	ldr	r3, [r3, #0]
 80334be:	685a      	ldr	r2, [r3, #4]
 80334c0:	4b1d      	ldr	r3, [pc, #116]	; (8033538 <HAL_SPI_Transmit_DMA+0x290>)
 80334c2:	4013      	ands	r3, r2
 80334c4:	88f9      	ldrh	r1, [r7, #6]
 80334c6:	68fa      	ldr	r2, [r7, #12]
 80334c8:	6812      	ldr	r2, [r2, #0]
 80334ca:	430b      	orrs	r3, r1
 80334cc:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80334ce:	68fb      	ldr	r3, [r7, #12]
 80334d0:	681b      	ldr	r3, [r3, #0]
 80334d2:	689a      	ldr	r2, [r3, #8]
 80334d4:	68fb      	ldr	r3, [r7, #12]
 80334d6:	681b      	ldr	r3, [r3, #0]
 80334d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80334dc:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80334de:	68fb      	ldr	r3, [r7, #12]
 80334e0:	681b      	ldr	r3, [r3, #0]
 80334e2:	691a      	ldr	r2, [r3, #16]
 80334e4:	68fb      	ldr	r3, [r7, #12]
 80334e6:	681b      	ldr	r3, [r3, #0]
 80334e8:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80334ec:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80334ee:	68fb      	ldr	r3, [r7, #12]
 80334f0:	681b      	ldr	r3, [r3, #0]
 80334f2:	681a      	ldr	r2, [r3, #0]
 80334f4:	68fb      	ldr	r3, [r7, #12]
 80334f6:	681b      	ldr	r3, [r3, #0]
 80334f8:	f042 0201 	orr.w	r2, r2, #1
 80334fc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80334fe:	68fb      	ldr	r3, [r7, #12]
 8033500:	685b      	ldr	r3, [r3, #4]
 8033502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033506:	d107      	bne.n	8033518 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8033508:	68fb      	ldr	r3, [r7, #12]
 803350a:	681b      	ldr	r3, [r3, #0]
 803350c:	681a      	ldr	r2, [r3, #0]
 803350e:	68fb      	ldr	r3, [r7, #12]
 8033510:	681b      	ldr	r3, [r3, #0]
 8033512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8033516:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8033518:	68fb      	ldr	r3, [r7, #12]
 803351a:	2200      	movs	r2, #0
 803351c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8033520:	7dfb      	ldrb	r3, [r7, #23]
}
 8033522:	4618      	mov	r0, r3
 8033524:	3718      	adds	r7, #24
 8033526:	46bd      	mov	sp, r7
 8033528:	bd80      	pop	{r7, pc}
 803352a:	bf00      	nop
 803352c:	080340b3 	.word	0x080340b3
 8033530:	08033fe1 	.word	0x08033fe1
 8033534:	08034107 	.word	0x08034107
 8033538:	ffff0000 	.word	0xffff0000

0803353c <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 803353c:	b580      	push	{r7, lr}
 803353e:	b086      	sub	sp, #24
 8033540:	af00      	add	r7, sp, #0
 8033542:	60f8      	str	r0, [r7, #12]
 8033544:	60b9      	str	r1, [r7, #8]
 8033546:	4613      	mov	r3, r2
 8033548:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 803354a:	2300      	movs	r3, #0
 803354c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 803354e:	68fb      	ldr	r3, [r7, #12]
 8033550:	689b      	ldr	r3, [r3, #8]
 8033552:	2b00      	cmp	r3, #0
 8033554:	d110      	bne.n	8033578 <HAL_SPI_Receive_DMA+0x3c>
 8033556:	68fb      	ldr	r3, [r7, #12]
 8033558:	685b      	ldr	r3, [r3, #4]
 803355a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803355e:	d10b      	bne.n	8033578 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8033560:	68fb      	ldr	r3, [r7, #12]
 8033562:	2204      	movs	r2, #4
 8033564:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8033568:	88fb      	ldrh	r3, [r7, #6]
 803356a:	68ba      	ldr	r2, [r7, #8]
 803356c:	68b9      	ldr	r1, [r7, #8]
 803356e:	68f8      	ldr	r0, [r7, #12]
 8033570:	f000 f940 	bl	80337f4 <HAL_SPI_TransmitReceive_DMA>
 8033574:	4603      	mov	r3, r0
 8033576:	e130      	b.n	80337da <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8033578:	68fb      	ldr	r3, [r7, #12]
 803357a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803357e:	2b01      	cmp	r3, #1
 8033580:	d101      	bne.n	8033586 <HAL_SPI_Receive_DMA+0x4a>
 8033582:	2302      	movs	r3, #2
 8033584:	e129      	b.n	80337da <HAL_SPI_Receive_DMA+0x29e>
 8033586:	68fb      	ldr	r3, [r7, #12]
 8033588:	2201      	movs	r2, #1
 803358a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 803358e:	68fb      	ldr	r3, [r7, #12]
 8033590:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033594:	b2db      	uxtb	r3, r3
 8033596:	2b01      	cmp	r3, #1
 8033598:	d007      	beq.n	80335aa <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 803359a:	2302      	movs	r3, #2
 803359c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803359e:	68fb      	ldr	r3, [r7, #12]
 80335a0:	2200      	movs	r2, #0
 80335a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80335a6:	7dfb      	ldrb	r3, [r7, #23]
 80335a8:	e117      	b.n	80337da <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 80335aa:	68bb      	ldr	r3, [r7, #8]
 80335ac:	2b00      	cmp	r3, #0
 80335ae:	d002      	beq.n	80335b6 <HAL_SPI_Receive_DMA+0x7a>
 80335b0:	88fb      	ldrh	r3, [r7, #6]
 80335b2:	2b00      	cmp	r3, #0
 80335b4:	d107      	bne.n	80335c6 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 80335b6:	2301      	movs	r3, #1
 80335b8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80335ba:	68fb      	ldr	r3, [r7, #12]
 80335bc:	2200      	movs	r2, #0
 80335be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80335c2:	7dfb      	ldrb	r3, [r7, #23]
 80335c4:	e109      	b.n	80337da <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80335c6:	68fb      	ldr	r3, [r7, #12]
 80335c8:	2204      	movs	r2, #4
 80335ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80335ce:	68fb      	ldr	r3, [r7, #12]
 80335d0:	2200      	movs	r2, #0
 80335d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80335d6:	68fb      	ldr	r3, [r7, #12]
 80335d8:	68ba      	ldr	r2, [r7, #8]
 80335da:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80335dc:	68fb      	ldr	r3, [r7, #12]
 80335de:	88fa      	ldrh	r2, [r7, #6]
 80335e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80335e4:	68fb      	ldr	r3, [r7, #12]
 80335e6:	88fa      	ldrh	r2, [r7, #6]
 80335e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80335ec:	68fb      	ldr	r3, [r7, #12]
 80335ee:	2200      	movs	r2, #0
 80335f0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80335f2:	68fb      	ldr	r3, [r7, #12]
 80335f4:	2200      	movs	r2, #0
 80335f6:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 80335f8:	68fb      	ldr	r3, [r7, #12]
 80335fa:	2200      	movs	r2, #0
 80335fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8033600:	68fb      	ldr	r3, [r7, #12]
 8033602:	2200      	movs	r2, #0
 8033604:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8033608:	68fb      	ldr	r3, [r7, #12]
 803360a:	689b      	ldr	r3, [r3, #8]
 803360c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8033610:	d107      	bne.n	8033622 <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8033612:	68fb      	ldr	r3, [r7, #12]
 8033614:	681b      	ldr	r3, [r3, #0]
 8033616:	681a      	ldr	r2, [r3, #0]
 8033618:	68fb      	ldr	r3, [r7, #12]
 803361a:	681b      	ldr	r3, [r3, #0]
 803361c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8033620:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033622:	68fb      	ldr	r3, [r7, #12]
 8033624:	68db      	ldr	r3, [r3, #12]
 8033626:	2b0f      	cmp	r3, #15
 8033628:	d905      	bls.n	8033636 <HAL_SPI_Receive_DMA+0xfa>
 803362a:	68fb      	ldr	r3, [r7, #12]
 803362c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803362e:	699b      	ldr	r3, [r3, #24]
 8033630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033634:	d10f      	bne.n	8033656 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033636:	68fb      	ldr	r3, [r7, #12]
 8033638:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 803363a:	2b07      	cmp	r3, #7
 803363c:	d913      	bls.n	8033666 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 803363e:	68fb      	ldr	r3, [r7, #12]
 8033640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033642:	699b      	ldr	r3, [r3, #24]
 8033644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033648:	d00d      	beq.n	8033666 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 803364a:	68fb      	ldr	r3, [r7, #12]
 803364c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803364e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033654:	d007      	beq.n	8033666 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8033656:	2301      	movs	r3, #1
 8033658:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803365a:	68fb      	ldr	r3, [r7, #12]
 803365c:	2200      	movs	r2, #0
 803365e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033662:	7dfb      	ldrb	r3, [r7, #23]
 8033664:	e0b9      	b.n	80337da <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8033666:	68fb      	ldr	r3, [r7, #12]
 8033668:	681b      	ldr	r3, [r3, #0]
 803366a:	689a      	ldr	r2, [r3, #8]
 803366c:	68fb      	ldr	r3, [r7, #12]
 803366e:	681b      	ldr	r3, [r3, #0]
 8033670:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8033674:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8033676:	68fb      	ldr	r3, [r7, #12]
 8033678:	68db      	ldr	r3, [r3, #12]
 803367a:	2b07      	cmp	r3, #7
 803367c:	d820      	bhi.n	80336c0 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 803367e:	68fb      	ldr	r3, [r7, #12]
 8033680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033682:	699b      	ldr	r3, [r3, #24]
 8033684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033688:	d109      	bne.n	803369e <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 803368a:	68fb      	ldr	r3, [r7, #12]
 803368c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033690:	b29b      	uxth	r3, r3
 8033692:	3301      	adds	r3, #1
 8033694:	105b      	asrs	r3, r3, #1
 8033696:	b29a      	uxth	r2, r3
 8033698:	68fb      	ldr	r3, [r7, #12]
 803369a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 803369e:	68fb      	ldr	r3, [r7, #12]
 80336a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80336a2:	699b      	ldr	r3, [r3, #24]
 80336a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80336a8:	d11e      	bne.n	80336e8 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80336aa:	68fb      	ldr	r3, [r7, #12]
 80336ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80336b0:	b29b      	uxth	r3, r3
 80336b2:	3303      	adds	r3, #3
 80336b4:	109b      	asrs	r3, r3, #2
 80336b6:	b29a      	uxth	r2, r3
 80336b8:	68fb      	ldr	r3, [r7, #12]
 80336ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80336be:	e013      	b.n	80336e8 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80336c0:	68fb      	ldr	r3, [r7, #12]
 80336c2:	68db      	ldr	r3, [r3, #12]
 80336c4:	2b0f      	cmp	r3, #15
 80336c6:	d80f      	bhi.n	80336e8 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80336c8:	68fb      	ldr	r3, [r7, #12]
 80336ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80336cc:	699b      	ldr	r3, [r3, #24]
 80336ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80336d2:	d109      	bne.n	80336e8 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80336d4:	68fb      	ldr	r3, [r7, #12]
 80336d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80336da:	b29b      	uxth	r3, r3
 80336dc:	3301      	adds	r3, #1
 80336de:	105b      	asrs	r3, r3, #1
 80336e0:	b29a      	uxth	r2, r3
 80336e2:	68fb      	ldr	r3, [r7, #12]
 80336e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80336e8:	68fb      	ldr	r3, [r7, #12]
 80336ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80336ec:	4a3d      	ldr	r2, [pc, #244]	; (80337e4 <HAL_SPI_Receive_DMA+0x2a8>)
 80336ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80336f0:	68fb      	ldr	r3, [r7, #12]
 80336f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80336f4:	4a3c      	ldr	r2, [pc, #240]	; (80337e8 <HAL_SPI_Receive_DMA+0x2ac>)
 80336f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80336f8:	68fb      	ldr	r3, [r7, #12]
 80336fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80336fc:	4a3b      	ldr	r2, [pc, #236]	; (80337ec <HAL_SPI_Receive_DMA+0x2b0>)
 80336fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8033700:	68fb      	ldr	r3, [r7, #12]
 8033702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033704:	2200      	movs	r2, #0
 8033706:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033708:	68fb      	ldr	r3, [r7, #12]
 803370a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 803370c:	68fb      	ldr	r3, [r7, #12]
 803370e:	681b      	ldr	r3, [r3, #0]
 8033710:	3330      	adds	r3, #48	; 0x30
 8033712:	4619      	mov	r1, r3
 8033714:	68fb      	ldr	r3, [r7, #12]
 8033716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033718:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 803371a:	68fb      	ldr	r3, [r7, #12]
 803371c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033720:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033722:	f7f8 fa09 	bl	802bb38 <HAL_DMA_Start_IT>
 8033726:	4603      	mov	r3, r0
 8033728:	2b00      	cmp	r3, #0
 803372a:	d013      	beq.n	8033754 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 803372c:	68fb      	ldr	r3, [r7, #12]
 803372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033732:	f043 0210 	orr.w	r2, r3, #16
 8033736:	68fb      	ldr	r3, [r7, #12]
 8033738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 803373c:	68fb      	ldr	r3, [r7, #12]
 803373e:	2200      	movs	r2, #0
 8033740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033744:	68fb      	ldr	r3, [r7, #12]
 8033746:	2201      	movs	r2, #1
 8033748:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 803374c:	2301      	movs	r3, #1
 803374e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033750:	7dfb      	ldrb	r3, [r7, #23]
 8033752:	e042      	b.n	80337da <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8033754:	68fb      	ldr	r3, [r7, #12]
 8033756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033758:	69db      	ldr	r3, [r3, #28]
 803375a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803375e:	d108      	bne.n	8033772 <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8033760:	68fb      	ldr	r3, [r7, #12]
 8033762:	681b      	ldr	r3, [r3, #0]
 8033764:	6859      	ldr	r1, [r3, #4]
 8033766:	68fb      	ldr	r3, [r7, #12]
 8033768:	681a      	ldr	r2, [r3, #0]
 803376a:	4b21      	ldr	r3, [pc, #132]	; (80337f0 <HAL_SPI_Receive_DMA+0x2b4>)
 803376c:	400b      	ands	r3, r1
 803376e:	6053      	str	r3, [r2, #4]
 8033770:	e009      	b.n	8033786 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8033772:	68fb      	ldr	r3, [r7, #12]
 8033774:	681b      	ldr	r3, [r3, #0]
 8033776:	685a      	ldr	r2, [r3, #4]
 8033778:	4b1d      	ldr	r3, [pc, #116]	; (80337f0 <HAL_SPI_Receive_DMA+0x2b4>)
 803377a:	4013      	ands	r3, r2
 803377c:	88f9      	ldrh	r1, [r7, #6]
 803377e:	68fa      	ldr	r2, [r7, #12]
 8033780:	6812      	ldr	r2, [r2, #0]
 8033782:	430b      	orrs	r3, r1
 8033784:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8033786:	68fb      	ldr	r3, [r7, #12]
 8033788:	681b      	ldr	r3, [r3, #0]
 803378a:	689a      	ldr	r2, [r3, #8]
 803378c:	68fb      	ldr	r3, [r7, #12]
 803378e:	681b      	ldr	r3, [r3, #0]
 8033790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8033794:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8033796:	68fb      	ldr	r3, [r7, #12]
 8033798:	681b      	ldr	r3, [r3, #0]
 803379a:	691a      	ldr	r2, [r3, #16]
 803379c:	68fb      	ldr	r3, [r7, #12]
 803379e:	681b      	ldr	r3, [r3, #0]
 80337a0:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80337a4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80337a6:	68fb      	ldr	r3, [r7, #12]
 80337a8:	681b      	ldr	r3, [r3, #0]
 80337aa:	681a      	ldr	r2, [r3, #0]
 80337ac:	68fb      	ldr	r3, [r7, #12]
 80337ae:	681b      	ldr	r3, [r3, #0]
 80337b0:	f042 0201 	orr.w	r2, r2, #1
 80337b4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80337b6:	68fb      	ldr	r3, [r7, #12]
 80337b8:	685b      	ldr	r3, [r3, #4]
 80337ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80337be:	d107      	bne.n	80337d0 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80337c0:	68fb      	ldr	r3, [r7, #12]
 80337c2:	681b      	ldr	r3, [r3, #0]
 80337c4:	681a      	ldr	r2, [r3, #0]
 80337c6:	68fb      	ldr	r3, [r7, #12]
 80337c8:	681b      	ldr	r3, [r3, #0]
 80337ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80337ce:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80337d0:	68fb      	ldr	r3, [r7, #12]
 80337d2:	2200      	movs	r2, #0
 80337d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80337d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80337da:	4618      	mov	r0, r3
 80337dc:	3718      	adds	r7, #24
 80337de:	46bd      	mov	sp, r7
 80337e0:	bd80      	pop	{r7, pc}
 80337e2:	bf00      	nop
 80337e4:	080340cf 	.word	0x080340cf
 80337e8:	08034027 	.word	0x08034027
 80337ec:	08034107 	.word	0x08034107
 80337f0:	ffff0000 	.word	0xffff0000

080337f4 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80337f4:	b580      	push	{r7, lr}
 80337f6:	b086      	sub	sp, #24
 80337f8:	af00      	add	r7, sp, #0
 80337fa:	60f8      	str	r0, [r7, #12]
 80337fc:	60b9      	str	r1, [r7, #8]
 80337fe:	607a      	str	r2, [r7, #4]
 8033800:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8033802:	2300      	movs	r3, #0
 8033804:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8033806:	68fb      	ldr	r3, [r7, #12]
 8033808:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803380c:	2b01      	cmp	r3, #1
 803380e:	d101      	bne.n	8033814 <HAL_SPI_TransmitReceive_DMA+0x20>
 8033810:	2302      	movs	r3, #2
 8033812:	e1b4      	b.n	8033b7e <HAL_SPI_TransmitReceive_DMA+0x38a>
 8033814:	68fb      	ldr	r3, [r7, #12]
 8033816:	2201      	movs	r2, #1
 8033818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 803381c:	68fb      	ldr	r3, [r7, #12]
 803381e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033822:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8033824:	68fb      	ldr	r3, [r7, #12]
 8033826:	685b      	ldr	r3, [r3, #4]
 8033828:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 803382a:	7dbb      	ldrb	r3, [r7, #22]
 803382c:	2b01      	cmp	r3, #1
 803382e:	d012      	beq.n	8033856 <HAL_SPI_TransmitReceive_DMA+0x62>
 8033830:	693b      	ldr	r3, [r7, #16]
 8033832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033836:	d106      	bne.n	8033846 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8033838:	68fb      	ldr	r3, [r7, #12]
 803383a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 803383c:	2b00      	cmp	r3, #0
 803383e:	d102      	bne.n	8033846 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8033840:	7dbb      	ldrb	r3, [r7, #22]
 8033842:	2b04      	cmp	r3, #4
 8033844:	d007      	beq.n	8033856 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8033846:	2302      	movs	r3, #2
 8033848:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803384a:	68fb      	ldr	r3, [r7, #12]
 803384c:	2200      	movs	r2, #0
 803384e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033852:	7dfb      	ldrb	r3, [r7, #23]
 8033854:	e193      	b.n	8033b7e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8033856:	68bb      	ldr	r3, [r7, #8]
 8033858:	2b00      	cmp	r3, #0
 803385a:	d005      	beq.n	8033868 <HAL_SPI_TransmitReceive_DMA+0x74>
 803385c:	687b      	ldr	r3, [r7, #4]
 803385e:	2b00      	cmp	r3, #0
 8033860:	d002      	beq.n	8033868 <HAL_SPI_TransmitReceive_DMA+0x74>
 8033862:	887b      	ldrh	r3, [r7, #2]
 8033864:	2b00      	cmp	r3, #0
 8033866:	d107      	bne.n	8033878 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8033868:	2301      	movs	r3, #1
 803386a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803386c:	68fb      	ldr	r3, [r7, #12]
 803386e:	2200      	movs	r2, #0
 8033870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033874:	7dfb      	ldrb	r3, [r7, #23]
 8033876:	e182      	b.n	8033b7e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8033878:	68fb      	ldr	r3, [r7, #12]
 803387a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803387e:	b2db      	uxtb	r3, r3
 8033880:	2b04      	cmp	r3, #4
 8033882:	d003      	beq.n	803388c <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8033884:	68fb      	ldr	r3, [r7, #12]
 8033886:	2205      	movs	r2, #5
 8033888:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 803388c:	68fb      	ldr	r3, [r7, #12]
 803388e:	2200      	movs	r2, #0
 8033890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8033894:	68fb      	ldr	r3, [r7, #12]
 8033896:	68ba      	ldr	r2, [r7, #8]
 8033898:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 803389a:	68fb      	ldr	r3, [r7, #12]
 803389c:	887a      	ldrh	r2, [r7, #2]
 803389e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80338a2:	68fb      	ldr	r3, [r7, #12]
 80338a4:	887a      	ldrh	r2, [r7, #2]
 80338a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80338aa:	68fb      	ldr	r3, [r7, #12]
 80338ac:	687a      	ldr	r2, [r7, #4]
 80338ae:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80338b0:	68fb      	ldr	r3, [r7, #12]
 80338b2:	887a      	ldrh	r2, [r7, #2]
 80338b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80338b8:	68fb      	ldr	r3, [r7, #12]
 80338ba:	887a      	ldrh	r2, [r7, #2]
 80338bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80338c0:	68fb      	ldr	r3, [r7, #12]
 80338c2:	2200      	movs	r2, #0
 80338c4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80338c6:	68fb      	ldr	r3, [r7, #12]
 80338c8:	2200      	movs	r2, #0
 80338ca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80338cc:	68fb      	ldr	r3, [r7, #12]
 80338ce:	681b      	ldr	r3, [r3, #0]
 80338d0:	689a      	ldr	r2, [r3, #8]
 80338d2:	68fb      	ldr	r3, [r7, #12]
 80338d4:	681b      	ldr	r3, [r3, #0]
 80338d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80338da:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80338dc:	68fb      	ldr	r3, [r7, #12]
 80338de:	68db      	ldr	r3, [r3, #12]
 80338e0:	2b0f      	cmp	r3, #15
 80338e2:	d905      	bls.n	80338f0 <HAL_SPI_TransmitReceive_DMA+0xfc>
 80338e4:	68fb      	ldr	r3, [r7, #12]
 80338e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338e8:	699b      	ldr	r3, [r3, #24]
 80338ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80338ee:	d10f      	bne.n	8033910 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80338f0:	68fb      	ldr	r3, [r7, #12]
 80338f2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80338f4:	2b07      	cmp	r3, #7
 80338f6:	d913      	bls.n	8033920 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80338f8:	68fb      	ldr	r3, [r7, #12]
 80338fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338fc:	699b      	ldr	r3, [r3, #24]
 80338fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033902:	d00d      	beq.n	8033920 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8033904:	68fb      	ldr	r3, [r7, #12]
 8033906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033908:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 803390a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803390e:	d007      	beq.n	8033920 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8033910:	2301      	movs	r3, #1
 8033912:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033914:	68fb      	ldr	r3, [r7, #12]
 8033916:	2200      	movs	r2, #0
 8033918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 803391c:	7dfb      	ldrb	r3, [r7, #23]
 803391e:	e12e      	b.n	8033b7e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8033920:	68fb      	ldr	r3, [r7, #12]
 8033922:	68db      	ldr	r3, [r3, #12]
 8033924:	2b07      	cmp	r3, #7
 8033926:	d840      	bhi.n	80339aa <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8033928:	68fb      	ldr	r3, [r7, #12]
 803392a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803392c:	699b      	ldr	r3, [r3, #24]
 803392e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033932:	d109      	bne.n	8033948 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8033934:	68fb      	ldr	r3, [r7, #12]
 8033936:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 803393a:	b29b      	uxth	r3, r3
 803393c:	3301      	adds	r3, #1
 803393e:	105b      	asrs	r3, r3, #1
 8033940:	b29a      	uxth	r2, r3
 8033942:	68fb      	ldr	r3, [r7, #12]
 8033944:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033948:	68fb      	ldr	r3, [r7, #12]
 803394a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803394c:	699b      	ldr	r3, [r3, #24]
 803394e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033952:	d109      	bne.n	8033968 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8033954:	68fb      	ldr	r3, [r7, #12]
 8033956:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 803395a:	b29b      	uxth	r3, r3
 803395c:	3303      	adds	r3, #3
 803395e:	109b      	asrs	r3, r3, #2
 8033960:	b29a      	uxth	r2, r3
 8033962:	68fb      	ldr	r3, [r7, #12]
 8033964:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8033968:	68fb      	ldr	r3, [r7, #12]
 803396a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803396c:	699b      	ldr	r3, [r3, #24]
 803396e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033972:	d109      	bne.n	8033988 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8033974:	68fb      	ldr	r3, [r7, #12]
 8033976:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803397a:	b29b      	uxth	r3, r3
 803397c:	3301      	adds	r3, #1
 803397e:	105b      	asrs	r3, r3, #1
 8033980:	b29a      	uxth	r2, r3
 8033982:	68fb      	ldr	r3, [r7, #12]
 8033984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033988:	68fb      	ldr	r3, [r7, #12]
 803398a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803398c:	699b      	ldr	r3, [r3, #24]
 803398e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033992:	d12e      	bne.n	80339f2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8033994:	68fb      	ldr	r3, [r7, #12]
 8033996:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803399a:	b29b      	uxth	r3, r3
 803399c:	3303      	adds	r3, #3
 803399e:	109b      	asrs	r3, r3, #2
 80339a0:	b29a      	uxth	r2, r3
 80339a2:	68fb      	ldr	r3, [r7, #12]
 80339a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80339a8:	e023      	b.n	80339f2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80339aa:	68fb      	ldr	r3, [r7, #12]
 80339ac:	68db      	ldr	r3, [r3, #12]
 80339ae:	2b0f      	cmp	r3, #15
 80339b0:	d81f      	bhi.n	80339f2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80339b2:	68fb      	ldr	r3, [r7, #12]
 80339b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80339b6:	699b      	ldr	r3, [r3, #24]
 80339b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80339bc:	d109      	bne.n	80339d2 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80339be:	68fb      	ldr	r3, [r7, #12]
 80339c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80339c4:	b29b      	uxth	r3, r3
 80339c6:	3301      	adds	r3, #1
 80339c8:	105b      	asrs	r3, r3, #1
 80339ca:	b29a      	uxth	r2, r3
 80339cc:	68fb      	ldr	r3, [r7, #12]
 80339ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80339d2:	68fb      	ldr	r3, [r7, #12]
 80339d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80339d6:	699b      	ldr	r3, [r3, #24]
 80339d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80339dc:	d109      	bne.n	80339f2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80339de:	68fb      	ldr	r3, [r7, #12]
 80339e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80339e4:	b29b      	uxth	r3, r3
 80339e6:	3301      	adds	r3, #1
 80339e8:	105b      	asrs	r3, r3, #1
 80339ea:	b29a      	uxth	r2, r3
 80339ec:	68fb      	ldr	r3, [r7, #12]
 80339ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80339f2:	68fb      	ldr	r3, [r7, #12]
 80339f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80339f8:	b2db      	uxtb	r3, r3
 80339fa:	2b04      	cmp	r3, #4
 80339fc:	d108      	bne.n	8033a10 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80339fe:	68fb      	ldr	r3, [r7, #12]
 8033a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033a02:	4a61      	ldr	r2, [pc, #388]	; (8033b88 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8033a04:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8033a06:	68fb      	ldr	r3, [r7, #12]
 8033a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033a0a:	4a60      	ldr	r2, [pc, #384]	; (8033b8c <HAL_SPI_TransmitReceive_DMA+0x398>)
 8033a0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8033a0e:	e007      	b.n	8033a20 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8033a10:	68fb      	ldr	r3, [r7, #12]
 8033a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033a14:	4a5e      	ldr	r2, [pc, #376]	; (8033b90 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8033a16:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8033a18:	68fb      	ldr	r3, [r7, #12]
 8033a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033a1c:	4a5d      	ldr	r2, [pc, #372]	; (8033b94 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8033a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8033a20:	68fb      	ldr	r3, [r7, #12]
 8033a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033a24:	4a5c      	ldr	r2, [pc, #368]	; (8033b98 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8033a26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8033a28:	68fb      	ldr	r3, [r7, #12]
 8033a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033a2c:	2200      	movs	r2, #0
 8033a2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033a30:	68fb      	ldr	r3, [r7, #12]
 8033a32:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8033a34:	68fb      	ldr	r3, [r7, #12]
 8033a36:	681b      	ldr	r3, [r3, #0]
 8033a38:	3330      	adds	r3, #48	; 0x30
 8033a3a:	4619      	mov	r1, r3
 8033a3c:	68fb      	ldr	r3, [r7, #12]
 8033a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033a40:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8033a42:	68fb      	ldr	r3, [r7, #12]
 8033a44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033a48:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033a4a:	f7f8 f875 	bl	802bb38 <HAL_DMA_Start_IT>
 8033a4e:	4603      	mov	r3, r0
 8033a50:	2b00      	cmp	r3, #0
 8033a52:	d013      	beq.n	8033a7c <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033a54:	68fb      	ldr	r3, [r7, #12]
 8033a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033a5a:	f043 0210 	orr.w	r2, r3, #16
 8033a5e:	68fb      	ldr	r3, [r7, #12]
 8033a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033a64:	68fb      	ldr	r3, [r7, #12]
 8033a66:	2200      	movs	r2, #0
 8033a68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033a6c:	68fb      	ldr	r3, [r7, #12]
 8033a6e:	2201      	movs	r2, #1
 8033a70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033a74:	2301      	movs	r3, #1
 8033a76:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033a78:	7dfb      	ldrb	r3, [r7, #23]
 8033a7a:	e080      	b.n	8033b7e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8033a7c:	68fb      	ldr	r3, [r7, #12]
 8033a7e:	681b      	ldr	r3, [r3, #0]
 8033a80:	689a      	ldr	r2, [r3, #8]
 8033a82:	68fb      	ldr	r3, [r7, #12]
 8033a84:	681b      	ldr	r3, [r3, #0]
 8033a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8033a8a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8033a8c:	68fb      	ldr	r3, [r7, #12]
 8033a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033a90:	2200      	movs	r2, #0
 8033a92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8033a94:	68fb      	ldr	r3, [r7, #12]
 8033a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033a98:	2200      	movs	r2, #0
 8033a9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8033a9c:	68fb      	ldr	r3, [r7, #12]
 8033a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033aa0:	2200      	movs	r2, #0
 8033aa2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8033aa4:	68fb      	ldr	r3, [r7, #12]
 8033aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033aa8:	2200      	movs	r2, #0
 8033aaa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033aac:	68fb      	ldr	r3, [r7, #12]
 8033aae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8033ab0:	68fb      	ldr	r3, [r7, #12]
 8033ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033ab4:	4619      	mov	r1, r3
 8033ab6:	68fb      	ldr	r3, [r7, #12]
 8033ab8:	681b      	ldr	r3, [r3, #0]
 8033aba:	3320      	adds	r3, #32
 8033abc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8033abe:	68fb      	ldr	r3, [r7, #12]
 8033ac0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033ac4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033ac6:	f7f8 f837 	bl	802bb38 <HAL_DMA_Start_IT>
 8033aca:	4603      	mov	r3, r0
 8033acc:	2b00      	cmp	r3, #0
 8033ace:	d013      	beq.n	8033af8 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033ad0:	68fb      	ldr	r3, [r7, #12]
 8033ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033ad6:	f043 0210 	orr.w	r2, r3, #16
 8033ada:	68fb      	ldr	r3, [r7, #12]
 8033adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033ae0:	68fb      	ldr	r3, [r7, #12]
 8033ae2:	2200      	movs	r2, #0
 8033ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033ae8:	68fb      	ldr	r3, [r7, #12]
 8033aea:	2201      	movs	r2, #1
 8033aec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033af0:	2301      	movs	r3, #1
 8033af2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033af4:	7dfb      	ldrb	r3, [r7, #23]
 8033af6:	e042      	b.n	8033b7e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8033af8:	68fb      	ldr	r3, [r7, #12]
 8033afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033afc:	69db      	ldr	r3, [r3, #28]
 8033afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033b02:	d108      	bne.n	8033b16 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8033b04:	68fb      	ldr	r3, [r7, #12]
 8033b06:	681b      	ldr	r3, [r3, #0]
 8033b08:	6859      	ldr	r1, [r3, #4]
 8033b0a:	68fb      	ldr	r3, [r7, #12]
 8033b0c:	681a      	ldr	r2, [r3, #0]
 8033b0e:	4b23      	ldr	r3, [pc, #140]	; (8033b9c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8033b10:	400b      	ands	r3, r1
 8033b12:	6053      	str	r3, [r2, #4]
 8033b14:	e009      	b.n	8033b2a <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8033b16:	68fb      	ldr	r3, [r7, #12]
 8033b18:	681b      	ldr	r3, [r3, #0]
 8033b1a:	685a      	ldr	r2, [r3, #4]
 8033b1c:	4b1f      	ldr	r3, [pc, #124]	; (8033b9c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8033b1e:	4013      	ands	r3, r2
 8033b20:	8879      	ldrh	r1, [r7, #2]
 8033b22:	68fa      	ldr	r2, [r7, #12]
 8033b24:	6812      	ldr	r2, [r2, #0]
 8033b26:	430b      	orrs	r3, r1
 8033b28:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8033b2a:	68fb      	ldr	r3, [r7, #12]
 8033b2c:	681b      	ldr	r3, [r3, #0]
 8033b2e:	689a      	ldr	r2, [r3, #8]
 8033b30:	68fb      	ldr	r3, [r7, #12]
 8033b32:	681b      	ldr	r3, [r3, #0]
 8033b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8033b38:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8033b3a:	68fb      	ldr	r3, [r7, #12]
 8033b3c:	681b      	ldr	r3, [r3, #0]
 8033b3e:	691a      	ldr	r2, [r3, #16]
 8033b40:	68fb      	ldr	r3, [r7, #12]
 8033b42:	681b      	ldr	r3, [r3, #0]
 8033b44:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8033b48:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8033b4a:	68fb      	ldr	r3, [r7, #12]
 8033b4c:	681b      	ldr	r3, [r3, #0]
 8033b4e:	681a      	ldr	r2, [r3, #0]
 8033b50:	68fb      	ldr	r3, [r7, #12]
 8033b52:	681b      	ldr	r3, [r3, #0]
 8033b54:	f042 0201 	orr.w	r2, r2, #1
 8033b58:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8033b5a:	68fb      	ldr	r3, [r7, #12]
 8033b5c:	685b      	ldr	r3, [r3, #4]
 8033b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033b62:	d107      	bne.n	8033b74 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8033b64:	68fb      	ldr	r3, [r7, #12]
 8033b66:	681b      	ldr	r3, [r3, #0]
 8033b68:	681a      	ldr	r2, [r3, #0]
 8033b6a:	68fb      	ldr	r3, [r7, #12]
 8033b6c:	681b      	ldr	r3, [r3, #0]
 8033b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8033b72:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8033b74:	68fb      	ldr	r3, [r7, #12]
 8033b76:	2200      	movs	r2, #0
 8033b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8033b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8033b7e:	4618      	mov	r0, r3
 8033b80:	3718      	adds	r7, #24
 8033b82:	46bd      	mov	sp, r7
 8033b84:	bd80      	pop	{r7, pc}
 8033b86:	bf00      	nop
 8033b88:	080340cf 	.word	0x080340cf
 8033b8c:	08034027 	.word	0x08034027
 8033b90:	080340eb 	.word	0x080340eb
 8033b94:	0803406d 	.word	0x0803406d
 8033b98:	08034107 	.word	0x08034107
 8033b9c:	ffff0000 	.word	0xffff0000

08033ba0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8033ba0:	b580      	push	{r7, lr}
 8033ba2:	b08a      	sub	sp, #40	; 0x28
 8033ba4:	af00      	add	r7, sp, #0
 8033ba6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8033ba8:	687b      	ldr	r3, [r7, #4]
 8033baa:	681b      	ldr	r3, [r3, #0]
 8033bac:	691b      	ldr	r3, [r3, #16]
 8033bae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8033bb0:	687b      	ldr	r3, [r7, #4]
 8033bb2:	681b      	ldr	r3, [r3, #0]
 8033bb4:	695b      	ldr	r3, [r3, #20]
 8033bb6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8033bb8:	6a3a      	ldr	r2, [r7, #32]
 8033bba:	69fb      	ldr	r3, [r7, #28]
 8033bbc:	4013      	ands	r3, r2
 8033bbe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8033bc0:	687b      	ldr	r3, [r7, #4]
 8033bc2:	681b      	ldr	r3, [r3, #0]
 8033bc4:	689b      	ldr	r3, [r3, #8]
 8033bc6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8033bc8:	2300      	movs	r3, #0
 8033bca:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8033bcc:	687b      	ldr	r3, [r7, #4]
 8033bce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033bd2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8033bd4:	687b      	ldr	r3, [r7, #4]
 8033bd6:	681b      	ldr	r3, [r3, #0]
 8033bd8:	3330      	adds	r3, #48	; 0x30
 8033bda:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8033bdc:	69bb      	ldr	r3, [r7, #24]
 8033bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033be2:	2b00      	cmp	r3, #0
 8033be4:	d113      	bne.n	8033c0e <HAL_SPI_IRQHandler+0x6e>
 8033be6:	69bb      	ldr	r3, [r7, #24]
 8033be8:	f003 0320 	and.w	r3, r3, #32
 8033bec:	2b00      	cmp	r3, #0
 8033bee:	d10e      	bne.n	8033c0e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8033bf0:	69bb      	ldr	r3, [r7, #24]
 8033bf2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8033bf6:	2b00      	cmp	r3, #0
 8033bf8:	d009      	beq.n	8033c0e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8033bfa:	687b      	ldr	r3, [r7, #4]
 8033bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033bfe:	6878      	ldr	r0, [r7, #4]
 8033c00:	4798      	blx	r3
    hspi->RxISR(hspi);
 8033c02:	687b      	ldr	r3, [r7, #4]
 8033c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033c06:	6878      	ldr	r0, [r7, #4]
 8033c08:	4798      	blx	r3
    handled = 1UL;
 8033c0a:	2301      	movs	r3, #1
 8033c0c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8033c0e:	69bb      	ldr	r3, [r7, #24]
 8033c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033c14:	2b00      	cmp	r3, #0
 8033c16:	d10f      	bne.n	8033c38 <HAL_SPI_IRQHandler+0x98>
 8033c18:	69bb      	ldr	r3, [r7, #24]
 8033c1a:	f003 0301 	and.w	r3, r3, #1
 8033c1e:	2b00      	cmp	r3, #0
 8033c20:	d00a      	beq.n	8033c38 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8033c22:	69bb      	ldr	r3, [r7, #24]
 8033c24:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8033c28:	2b00      	cmp	r3, #0
 8033c2a:	d105      	bne.n	8033c38 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8033c2c:	687b      	ldr	r3, [r7, #4]
 8033c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033c30:	6878      	ldr	r0, [r7, #4]
 8033c32:	4798      	blx	r3
    handled = 1UL;
 8033c34:	2301      	movs	r3, #1
 8033c36:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8033c38:	69bb      	ldr	r3, [r7, #24]
 8033c3a:	f003 0320 	and.w	r3, r3, #32
 8033c3e:	2b00      	cmp	r3, #0
 8033c40:	d10f      	bne.n	8033c62 <HAL_SPI_IRQHandler+0xc2>
 8033c42:	69bb      	ldr	r3, [r7, #24]
 8033c44:	f003 0302 	and.w	r3, r3, #2
 8033c48:	2b00      	cmp	r3, #0
 8033c4a:	d00a      	beq.n	8033c62 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8033c4c:	69bb      	ldr	r3, [r7, #24]
 8033c4e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8033c52:	2b00      	cmp	r3, #0
 8033c54:	d105      	bne.n	8033c62 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8033c56:	687b      	ldr	r3, [r7, #4]
 8033c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033c5a:	6878      	ldr	r0, [r7, #4]
 8033c5c:	4798      	blx	r3
    handled = 1UL;
 8033c5e:	2301      	movs	r3, #1
 8033c60:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8033c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033c64:	2b00      	cmp	r3, #0
 8033c66:	f040 815a 	bne.w	8033f1e <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8033c6a:	69bb      	ldr	r3, [r7, #24]
 8033c6c:	f003 0308 	and.w	r3, r3, #8
 8033c70:	2b00      	cmp	r3, #0
 8033c72:	f000 808b 	beq.w	8033d8c <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8033c76:	687b      	ldr	r3, [r7, #4]
 8033c78:	681b      	ldr	r3, [r3, #0]
 8033c7a:	699a      	ldr	r2, [r3, #24]
 8033c7c:	687b      	ldr	r3, [r7, #4]
 8033c7e:	681b      	ldr	r3, [r3, #0]
 8033c80:	f042 0208 	orr.w	r2, r2, #8
 8033c84:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8033c86:	687b      	ldr	r3, [r7, #4]
 8033c88:	681b      	ldr	r3, [r3, #0]
 8033c8a:	699a      	ldr	r2, [r3, #24]
 8033c8c:	687b      	ldr	r3, [r7, #4]
 8033c8e:	681b      	ldr	r3, [r3, #0]
 8033c90:	f042 0210 	orr.w	r2, r2, #16
 8033c94:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8033c96:	687b      	ldr	r3, [r7, #4]
 8033c98:	681b      	ldr	r3, [r3, #0]
 8033c9a:	699a      	ldr	r2, [r3, #24]
 8033c9c:	687b      	ldr	r3, [r7, #4]
 8033c9e:	681b      	ldr	r3, [r3, #0]
 8033ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033ca4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8033ca6:	687b      	ldr	r3, [r7, #4]
 8033ca8:	681b      	ldr	r3, [r3, #0]
 8033caa:	691a      	ldr	r2, [r3, #16]
 8033cac:	687b      	ldr	r3, [r7, #4]
 8033cae:	681b      	ldr	r3, [r3, #0]
 8033cb0:	f022 0208 	bic.w	r2, r2, #8
 8033cb4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8033cb6:	687b      	ldr	r3, [r7, #4]
 8033cb8:	681b      	ldr	r3, [r3, #0]
 8033cba:	689b      	ldr	r3, [r3, #8]
 8033cbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8033cc0:	2b00      	cmp	r3, #0
 8033cc2:	d13d      	bne.n	8033d40 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8033cc4:	e036      	b.n	8033d34 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8033cc6:	687b      	ldr	r3, [r7, #4]
 8033cc8:	68db      	ldr	r3, [r3, #12]
 8033cca:	2b0f      	cmp	r3, #15
 8033ccc:	d90b      	bls.n	8033ce6 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8033cce:	687b      	ldr	r3, [r7, #4]
 8033cd0:	681a      	ldr	r2, [r3, #0]
 8033cd2:	687b      	ldr	r3, [r7, #4]
 8033cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033cd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8033cd8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8033cda:	687b      	ldr	r3, [r7, #4]
 8033cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033cde:	1d1a      	adds	r2, r3, #4
 8033ce0:	687b      	ldr	r3, [r7, #4]
 8033ce2:	665a      	str	r2, [r3, #100]	; 0x64
 8033ce4:	e01d      	b.n	8033d22 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8033ce6:	687b      	ldr	r3, [r7, #4]
 8033ce8:	68db      	ldr	r3, [r3, #12]
 8033cea:	2b07      	cmp	r3, #7
 8033cec:	d90b      	bls.n	8033d06 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8033cee:	687b      	ldr	r3, [r7, #4]
 8033cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033cf2:	68fa      	ldr	r2, [r7, #12]
 8033cf4:	8812      	ldrh	r2, [r2, #0]
 8033cf6:	b292      	uxth	r2, r2
 8033cf8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8033cfa:	687b      	ldr	r3, [r7, #4]
 8033cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033cfe:	1c9a      	adds	r2, r3, #2
 8033d00:	687b      	ldr	r3, [r7, #4]
 8033d02:	665a      	str	r2, [r3, #100]	; 0x64
 8033d04:	e00d      	b.n	8033d22 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8033d06:	687b      	ldr	r3, [r7, #4]
 8033d08:	681b      	ldr	r3, [r3, #0]
 8033d0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8033d0e:	687b      	ldr	r3, [r7, #4]
 8033d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033d12:	7812      	ldrb	r2, [r2, #0]
 8033d14:	b2d2      	uxtb	r2, r2
 8033d16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8033d18:	687b      	ldr	r3, [r7, #4]
 8033d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033d1c:	1c5a      	adds	r2, r3, #1
 8033d1e:	687b      	ldr	r3, [r7, #4]
 8033d20:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8033d22:	687b      	ldr	r3, [r7, #4]
 8033d24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033d28:	b29b      	uxth	r3, r3
 8033d2a:	3b01      	subs	r3, #1
 8033d2c:	b29a      	uxth	r2, r3
 8033d2e:	687b      	ldr	r3, [r7, #4]
 8033d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8033d34:	687b      	ldr	r3, [r7, #4]
 8033d36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033d3a:	b29b      	uxth	r3, r3
 8033d3c:	2b00      	cmp	r3, #0
 8033d3e:	d1c2      	bne.n	8033cc6 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8033d40:	6878      	ldr	r0, [r7, #4]
 8033d42:	f000 fa1d 	bl	8034180 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8033d46:	687b      	ldr	r3, [r7, #4]
 8033d48:	2201      	movs	r2, #1
 8033d4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8033d4e:	687b      	ldr	r3, [r7, #4]
 8033d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033d54:	2b00      	cmp	r3, #0
 8033d56:	d003      	beq.n	8033d60 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8033d58:	6878      	ldr	r0, [r7, #4]
 8033d5a:	f000 f929 	bl	8033fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8033d5e:	e0e3      	b.n	8033f28 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8033d60:	7cfb      	ldrb	r3, [r7, #19]
 8033d62:	2b05      	cmp	r3, #5
 8033d64:	d103      	bne.n	8033d6e <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8033d66:	6878      	ldr	r0, [r7, #4]
 8033d68:	f000 f8fa 	bl	8033f60 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8033d6c:	e0d9      	b.n	8033f22 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8033d6e:	7cfb      	ldrb	r3, [r7, #19]
 8033d70:	2b04      	cmp	r3, #4
 8033d72:	d103      	bne.n	8033d7c <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8033d74:	6878      	ldr	r0, [r7, #4]
 8033d76:	f000 f8e9 	bl	8033f4c <HAL_SPI_RxCpltCallback>
    return;
 8033d7a:	e0d2      	b.n	8033f22 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8033d7c:	7cfb      	ldrb	r3, [r7, #19]
 8033d7e:	2b03      	cmp	r3, #3
 8033d80:	f040 80cf 	bne.w	8033f22 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8033d84:	6878      	ldr	r0, [r7, #4]
 8033d86:	f000 f8d7 	bl	8033f38 <HAL_SPI_TxCpltCallback>
    return;
 8033d8a:	e0ca      	b.n	8033f22 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8033d8c:	69fb      	ldr	r3, [r7, #28]
 8033d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8033d92:	2b00      	cmp	r3, #0
 8033d94:	d00d      	beq.n	8033db2 <HAL_SPI_IRQHandler+0x212>
 8033d96:	6a3b      	ldr	r3, [r7, #32]
 8033d98:	f003 0308 	and.w	r3, r3, #8
 8033d9c:	2b00      	cmp	r3, #0
 8033d9e:	d008      	beq.n	8033db2 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8033da0:	687b      	ldr	r3, [r7, #4]
 8033da2:	681b      	ldr	r3, [r3, #0]
 8033da4:	699a      	ldr	r2, [r3, #24]
 8033da6:	687b      	ldr	r3, [r7, #4]
 8033da8:	681b      	ldr	r3, [r3, #0]
 8033daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033dae:	619a      	str	r2, [r3, #24]

    return;
 8033db0:	e0ba      	b.n	8033f28 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8033db2:	69bb      	ldr	r3, [r7, #24]
 8033db4:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8033db8:	2b00      	cmp	r3, #0
 8033dba:	f000 80b5 	beq.w	8033f28 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8033dbe:	69bb      	ldr	r3, [r7, #24]
 8033dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033dc4:	2b00      	cmp	r3, #0
 8033dc6:	d00f      	beq.n	8033de8 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8033dc8:	687b      	ldr	r3, [r7, #4]
 8033dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033dce:	f043 0204 	orr.w	r2, r3, #4
 8033dd2:	687b      	ldr	r3, [r7, #4]
 8033dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8033dd8:	687b      	ldr	r3, [r7, #4]
 8033dda:	681b      	ldr	r3, [r3, #0]
 8033ddc:	699a      	ldr	r2, [r3, #24]
 8033dde:	687b      	ldr	r3, [r7, #4]
 8033de0:	681b      	ldr	r3, [r3, #0]
 8033de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8033de6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8033de8:	69bb      	ldr	r3, [r7, #24]
 8033dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8033dee:	2b00      	cmp	r3, #0
 8033df0:	d00f      	beq.n	8033e12 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8033df2:	687b      	ldr	r3, [r7, #4]
 8033df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033df8:	f043 0201 	orr.w	r2, r3, #1
 8033dfc:	687b      	ldr	r3, [r7, #4]
 8033dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8033e02:	687b      	ldr	r3, [r7, #4]
 8033e04:	681b      	ldr	r3, [r3, #0]
 8033e06:	699a      	ldr	r2, [r3, #24]
 8033e08:	687b      	ldr	r3, [r7, #4]
 8033e0a:	681b      	ldr	r3, [r3, #0]
 8033e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8033e10:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8033e12:	69bb      	ldr	r3, [r7, #24]
 8033e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8033e18:	2b00      	cmp	r3, #0
 8033e1a:	d00f      	beq.n	8033e3c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8033e1c:	687b      	ldr	r3, [r7, #4]
 8033e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033e22:	f043 0208 	orr.w	r2, r3, #8
 8033e26:	687b      	ldr	r3, [r7, #4]
 8033e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8033e2c:	687b      	ldr	r3, [r7, #4]
 8033e2e:	681b      	ldr	r3, [r3, #0]
 8033e30:	699a      	ldr	r2, [r3, #24]
 8033e32:	687b      	ldr	r3, [r7, #4]
 8033e34:	681b      	ldr	r3, [r3, #0]
 8033e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8033e3a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8033e3c:	69bb      	ldr	r3, [r7, #24]
 8033e3e:	f003 0320 	and.w	r3, r3, #32
 8033e42:	2b00      	cmp	r3, #0
 8033e44:	d00f      	beq.n	8033e66 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8033e46:	687b      	ldr	r3, [r7, #4]
 8033e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033e4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8033e50:	687b      	ldr	r3, [r7, #4]
 8033e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8033e56:	687b      	ldr	r3, [r7, #4]
 8033e58:	681b      	ldr	r3, [r3, #0]
 8033e5a:	699a      	ldr	r2, [r3, #24]
 8033e5c:	687b      	ldr	r3, [r7, #4]
 8033e5e:	681b      	ldr	r3, [r3, #0]
 8033e60:	f042 0220 	orr.w	r2, r2, #32
 8033e64:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8033e66:	687b      	ldr	r3, [r7, #4]
 8033e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033e6c:	2b00      	cmp	r3, #0
 8033e6e:	d05a      	beq.n	8033f26 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8033e70:	687b      	ldr	r3, [r7, #4]
 8033e72:	681b      	ldr	r3, [r3, #0]
 8033e74:	681a      	ldr	r2, [r3, #0]
 8033e76:	687b      	ldr	r3, [r7, #4]
 8033e78:	681b      	ldr	r3, [r3, #0]
 8033e7a:	f022 0201 	bic.w	r2, r2, #1
 8033e7e:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8033e80:	687b      	ldr	r3, [r7, #4]
 8033e82:	681b      	ldr	r3, [r3, #0]
 8033e84:	6919      	ldr	r1, [r3, #16]
 8033e86:	687b      	ldr	r3, [r7, #4]
 8033e88:	681a      	ldr	r2, [r3, #0]
 8033e8a:	4b29      	ldr	r3, [pc, #164]	; (8033f30 <HAL_SPI_IRQHandler+0x390>)
 8033e8c:	400b      	ands	r3, r1
 8033e8e:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8033e90:	697b      	ldr	r3, [r7, #20]
 8033e92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8033e96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8033e9a:	d138      	bne.n	8033f0e <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8033e9c:	687b      	ldr	r3, [r7, #4]
 8033e9e:	681b      	ldr	r3, [r3, #0]
 8033ea0:	689a      	ldr	r2, [r3, #8]
 8033ea2:	687b      	ldr	r3, [r7, #4]
 8033ea4:	681b      	ldr	r3, [r3, #0]
 8033ea6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8033eaa:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8033eac:	687b      	ldr	r3, [r7, #4]
 8033eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033eb0:	2b00      	cmp	r3, #0
 8033eb2:	d013      	beq.n	8033edc <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8033eb4:	687b      	ldr	r3, [r7, #4]
 8033eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033eb8:	4a1e      	ldr	r2, [pc, #120]	; (8033f34 <HAL_SPI_IRQHandler+0x394>)
 8033eba:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8033ebc:	687b      	ldr	r3, [r7, #4]
 8033ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033ec0:	4618      	mov	r0, r3
 8033ec2:	f7f8 fbc1 	bl	802c648 <HAL_DMA_Abort_IT>
 8033ec6:	4603      	mov	r3, r0
 8033ec8:	2b00      	cmp	r3, #0
 8033eca:	d007      	beq.n	8033edc <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8033ecc:	687b      	ldr	r3, [r7, #4]
 8033ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033ed2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8033ed6:	687b      	ldr	r3, [r7, #4]
 8033ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8033edc:	687b      	ldr	r3, [r7, #4]
 8033ede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033ee0:	2b00      	cmp	r3, #0
 8033ee2:	d020      	beq.n	8033f26 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8033ee4:	687b      	ldr	r3, [r7, #4]
 8033ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033ee8:	4a12      	ldr	r2, [pc, #72]	; (8033f34 <HAL_SPI_IRQHandler+0x394>)
 8033eea:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8033eec:	687b      	ldr	r3, [r7, #4]
 8033eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033ef0:	4618      	mov	r0, r3
 8033ef2:	f7f8 fba9 	bl	802c648 <HAL_DMA_Abort_IT>
 8033ef6:	4603      	mov	r3, r0
 8033ef8:	2b00      	cmp	r3, #0
 8033efa:	d014      	beq.n	8033f26 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8033efc:	687b      	ldr	r3, [r7, #4]
 8033efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033f02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8033f06:	687b      	ldr	r3, [r7, #4]
 8033f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8033f0c:	e00b      	b.n	8033f26 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8033f0e:	687b      	ldr	r3, [r7, #4]
 8033f10:	2201      	movs	r2, #1
 8033f12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8033f16:	6878      	ldr	r0, [r7, #4]
 8033f18:	f000 f84a 	bl	8033fb0 <HAL_SPI_ErrorCallback>
    return;
 8033f1c:	e003      	b.n	8033f26 <HAL_SPI_IRQHandler+0x386>
    return;
 8033f1e:	bf00      	nop
 8033f20:	e002      	b.n	8033f28 <HAL_SPI_IRQHandler+0x388>
    return;
 8033f22:	bf00      	nop
 8033f24:	e000      	b.n	8033f28 <HAL_SPI_IRQHandler+0x388>
    return;
 8033f26:	bf00      	nop
  }
}
 8033f28:	3728      	adds	r7, #40	; 0x28
 8033f2a:	46bd      	mov	sp, r7
 8033f2c:	bd80      	pop	{r7, pc}
 8033f2e:	bf00      	nop
 8033f30:	fffffc94 	.word	0xfffffc94
 8033f34:	0803414d 	.word	0x0803414d

08033f38 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8033f38:	b480      	push	{r7}
 8033f3a:	b083      	sub	sp, #12
 8033f3c:	af00      	add	r7, sp, #0
 8033f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8033f40:	bf00      	nop
 8033f42:	370c      	adds	r7, #12
 8033f44:	46bd      	mov	sp, r7
 8033f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033f4a:	4770      	bx	lr

08033f4c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8033f4c:	b480      	push	{r7}
 8033f4e:	b083      	sub	sp, #12
 8033f50:	af00      	add	r7, sp, #0
 8033f52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8033f54:	bf00      	nop
 8033f56:	370c      	adds	r7, #12
 8033f58:	46bd      	mov	sp, r7
 8033f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033f5e:	4770      	bx	lr

08033f60 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8033f60:	b480      	push	{r7}
 8033f62:	b083      	sub	sp, #12
 8033f64:	af00      	add	r7, sp, #0
 8033f66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8033f68:	bf00      	nop
 8033f6a:	370c      	adds	r7, #12
 8033f6c:	46bd      	mov	sp, r7
 8033f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033f72:	4770      	bx	lr

08033f74 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8033f74:	b480      	push	{r7}
 8033f76:	b083      	sub	sp, #12
 8033f78:	af00      	add	r7, sp, #0
 8033f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8033f7c:	bf00      	nop
 8033f7e:	370c      	adds	r7, #12
 8033f80:	46bd      	mov	sp, r7
 8033f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033f86:	4770      	bx	lr

08033f88 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8033f88:	b480      	push	{r7}
 8033f8a:	b083      	sub	sp, #12
 8033f8c:	af00      	add	r7, sp, #0
 8033f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8033f90:	bf00      	nop
 8033f92:	370c      	adds	r7, #12
 8033f94:	46bd      	mov	sp, r7
 8033f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033f9a:	4770      	bx	lr

08033f9c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8033f9c:	b480      	push	{r7}
 8033f9e:	b083      	sub	sp, #12
 8033fa0:	af00      	add	r7, sp, #0
 8033fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8033fa4:	bf00      	nop
 8033fa6:	370c      	adds	r7, #12
 8033fa8:	46bd      	mov	sp, r7
 8033faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033fae:	4770      	bx	lr

08033fb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8033fb0:	b480      	push	{r7}
 8033fb2:	b083      	sub	sp, #12
 8033fb4:	af00      	add	r7, sp, #0
 8033fb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8033fb8:	bf00      	nop
 8033fba:	370c      	adds	r7, #12
 8033fbc:	46bd      	mov	sp, r7
 8033fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033fc2:	4770      	bx	lr

08033fc4 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8033fc4:	b480      	push	{r7}
 8033fc6:	b083      	sub	sp, #12
 8033fc8:	af00      	add	r7, sp, #0
 8033fca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8033fcc:	687b      	ldr	r3, [r7, #4]
 8033fce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033fd2:	b2db      	uxtb	r3, r3
}
 8033fd4:	4618      	mov	r0, r3
 8033fd6:	370c      	adds	r7, #12
 8033fd8:	46bd      	mov	sp, r7
 8033fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033fde:	4770      	bx	lr

08033fe0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8033fe0:	b580      	push	{r7, lr}
 8033fe2:	b084      	sub	sp, #16
 8033fe4:	af00      	add	r7, sp, #0
 8033fe6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8033fe8:	687b      	ldr	r3, [r7, #4]
 8033fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033fec:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8033fee:	68fb      	ldr	r3, [r7, #12]
 8033ff0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033ff4:	b2db      	uxtb	r3, r3
 8033ff6:	2b07      	cmp	r3, #7
 8033ff8:	d011      	beq.n	803401e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8033ffa:	68fb      	ldr	r3, [r7, #12]
 8033ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033ffe:	69db      	ldr	r3, [r3, #28]
 8034000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034004:	d103      	bne.n	803400e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8034006:	68f8      	ldr	r0, [r7, #12]
 8034008:	f7ff ff96 	bl	8033f38 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 803400c:	e007      	b.n	803401e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 803400e:	68fb      	ldr	r3, [r7, #12]
 8034010:	681b      	ldr	r3, [r3, #0]
 8034012:	691a      	ldr	r2, [r3, #16]
 8034014:	68fb      	ldr	r3, [r7, #12]
 8034016:	681b      	ldr	r3, [r3, #0]
 8034018:	f042 0208 	orr.w	r2, r2, #8
 803401c:	611a      	str	r2, [r3, #16]
}
 803401e:	bf00      	nop
 8034020:	3710      	adds	r7, #16
 8034022:	46bd      	mov	sp, r7
 8034024:	bd80      	pop	{r7, pc}

08034026 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8034026:	b580      	push	{r7, lr}
 8034028:	b084      	sub	sp, #16
 803402a:	af00      	add	r7, sp, #0
 803402c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803402e:	687b      	ldr	r3, [r7, #4]
 8034030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034032:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8034034:	68fb      	ldr	r3, [r7, #12]
 8034036:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803403a:	b2db      	uxtb	r3, r3
 803403c:	2b07      	cmp	r3, #7
 803403e:	d011      	beq.n	8034064 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8034040:	68fb      	ldr	r3, [r7, #12]
 8034042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034044:	69db      	ldr	r3, [r3, #28]
 8034046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803404a:	d103      	bne.n	8034054 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 803404c:	68f8      	ldr	r0, [r7, #12]
 803404e:	f7ff ff7d 	bl	8033f4c <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8034052:	e007      	b.n	8034064 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8034054:	68fb      	ldr	r3, [r7, #12]
 8034056:	681b      	ldr	r3, [r3, #0]
 8034058:	691a      	ldr	r2, [r3, #16]
 803405a:	68fb      	ldr	r3, [r7, #12]
 803405c:	681b      	ldr	r3, [r3, #0]
 803405e:	f042 0208 	orr.w	r2, r2, #8
 8034062:	611a      	str	r2, [r3, #16]
}
 8034064:	bf00      	nop
 8034066:	3710      	adds	r7, #16
 8034068:	46bd      	mov	sp, r7
 803406a:	bd80      	pop	{r7, pc}

0803406c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 803406c:	b580      	push	{r7, lr}
 803406e:	b084      	sub	sp, #16
 8034070:	af00      	add	r7, sp, #0
 8034072:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034074:	687b      	ldr	r3, [r7, #4]
 8034076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034078:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 803407a:	68fb      	ldr	r3, [r7, #12]
 803407c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034080:	b2db      	uxtb	r3, r3
 8034082:	2b07      	cmp	r3, #7
 8034084:	d011      	beq.n	80340aa <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8034086:	68fb      	ldr	r3, [r7, #12]
 8034088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803408a:	69db      	ldr	r3, [r3, #28]
 803408c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034090:	d103      	bne.n	803409a <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8034092:	68f8      	ldr	r0, [r7, #12]
 8034094:	f7ff ff64 	bl	8033f60 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8034098:	e007      	b.n	80340aa <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 803409a:	68fb      	ldr	r3, [r7, #12]
 803409c:	681b      	ldr	r3, [r3, #0]
 803409e:	691a      	ldr	r2, [r3, #16]
 80340a0:	68fb      	ldr	r3, [r7, #12]
 80340a2:	681b      	ldr	r3, [r3, #0]
 80340a4:	f042 0208 	orr.w	r2, r2, #8
 80340a8:	611a      	str	r2, [r3, #16]
}
 80340aa:	bf00      	nop
 80340ac:	3710      	adds	r7, #16
 80340ae:	46bd      	mov	sp, r7
 80340b0:	bd80      	pop	{r7, pc}

080340b2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80340b2:	b580      	push	{r7, lr}
 80340b4:	b084      	sub	sp, #16
 80340b6:	af00      	add	r7, sp, #0
 80340b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80340ba:	687b      	ldr	r3, [r7, #4]
 80340bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80340be:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80340c0:	68f8      	ldr	r0, [r7, #12]
 80340c2:	f7ff ff57 	bl	8033f74 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80340c6:	bf00      	nop
 80340c8:	3710      	adds	r7, #16
 80340ca:	46bd      	mov	sp, r7
 80340cc:	bd80      	pop	{r7, pc}

080340ce <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80340ce:	b580      	push	{r7, lr}
 80340d0:	b084      	sub	sp, #16
 80340d2:	af00      	add	r7, sp, #0
 80340d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80340d6:	687b      	ldr	r3, [r7, #4]
 80340d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80340da:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80340dc:	68f8      	ldr	r0, [r7, #12]
 80340de:	f7ff ff53 	bl	8033f88 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80340e2:	bf00      	nop
 80340e4:	3710      	adds	r7, #16
 80340e6:	46bd      	mov	sp, r7
 80340e8:	bd80      	pop	{r7, pc}

080340ea <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80340ea:	b580      	push	{r7, lr}
 80340ec:	b084      	sub	sp, #16
 80340ee:	af00      	add	r7, sp, #0
 80340f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80340f2:	687b      	ldr	r3, [r7, #4]
 80340f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80340f6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80340f8:	68f8      	ldr	r0, [r7, #12]
 80340fa:	f7ff ff4f 	bl	8033f9c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80340fe:	bf00      	nop
 8034100:	3710      	adds	r7, #16
 8034102:	46bd      	mov	sp, r7
 8034104:	bd80      	pop	{r7, pc}

08034106 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8034106:	b580      	push	{r7, lr}
 8034108:	b084      	sub	sp, #16
 803410a:	af00      	add	r7, sp, #0
 803410c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803410e:	687b      	ldr	r3, [r7, #4]
 8034110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034112:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8034114:	6878      	ldr	r0, [r7, #4]
 8034116:	f7f9 fc15 	bl	802d944 <HAL_DMA_GetError>
 803411a:	4603      	mov	r3, r0
 803411c:	2b02      	cmp	r3, #2
 803411e:	d011      	beq.n	8034144 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8034120:	68f8      	ldr	r0, [r7, #12]
 8034122:	f000 f82d 	bl	8034180 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8034126:	68fb      	ldr	r3, [r7, #12]
 8034128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803412c:	f043 0210 	orr.w	r2, r3, #16
 8034130:	68fb      	ldr	r3, [r7, #12]
 8034132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8034136:	68fb      	ldr	r3, [r7, #12]
 8034138:	2201      	movs	r2, #1
 803413a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 803413e:	68f8      	ldr	r0, [r7, #12]
 8034140:	f7ff ff36 	bl	8033fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8034144:	bf00      	nop
 8034146:	3710      	adds	r7, #16
 8034148:	46bd      	mov	sp, r7
 803414a:	bd80      	pop	{r7, pc}

0803414c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 803414c:	b580      	push	{r7, lr}
 803414e:	b084      	sub	sp, #16
 8034150:	af00      	add	r7, sp, #0
 8034152:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034154:	687b      	ldr	r3, [r7, #4]
 8034156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034158:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 803415a:	68fb      	ldr	r3, [r7, #12]
 803415c:	2200      	movs	r2, #0
 803415e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8034162:	68fb      	ldr	r3, [r7, #12]
 8034164:	2200      	movs	r2, #0
 8034166:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 803416a:	68fb      	ldr	r3, [r7, #12]
 803416c:	2201      	movs	r2, #1
 803416e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8034172:	68f8      	ldr	r0, [r7, #12]
 8034174:	f7ff ff1c 	bl	8033fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8034178:	bf00      	nop
 803417a:	3710      	adds	r7, #16
 803417c:	46bd      	mov	sp, r7
 803417e:	bd80      	pop	{r7, pc}

08034180 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8034180:	b480      	push	{r7}
 8034182:	b085      	sub	sp, #20
 8034184:	af00      	add	r7, sp, #0
 8034186:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8034188:	687b      	ldr	r3, [r7, #4]
 803418a:	681b      	ldr	r3, [r3, #0]
 803418c:	695b      	ldr	r3, [r3, #20]
 803418e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8034190:	687b      	ldr	r3, [r7, #4]
 8034192:	681b      	ldr	r3, [r3, #0]
 8034194:	699a      	ldr	r2, [r3, #24]
 8034196:	687b      	ldr	r3, [r7, #4]
 8034198:	681b      	ldr	r3, [r3, #0]
 803419a:	f042 0208 	orr.w	r2, r2, #8
 803419e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80341a0:	687b      	ldr	r3, [r7, #4]
 80341a2:	681b      	ldr	r3, [r3, #0]
 80341a4:	699a      	ldr	r2, [r3, #24]
 80341a6:	687b      	ldr	r3, [r7, #4]
 80341a8:	681b      	ldr	r3, [r3, #0]
 80341aa:	f042 0210 	orr.w	r2, r2, #16
 80341ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80341b0:	687b      	ldr	r3, [r7, #4]
 80341b2:	681b      	ldr	r3, [r3, #0]
 80341b4:	681a      	ldr	r2, [r3, #0]
 80341b6:	687b      	ldr	r3, [r7, #4]
 80341b8:	681b      	ldr	r3, [r3, #0]
 80341ba:	f022 0201 	bic.w	r2, r2, #1
 80341be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80341c0:	687b      	ldr	r3, [r7, #4]
 80341c2:	681b      	ldr	r3, [r3, #0]
 80341c4:	6919      	ldr	r1, [r3, #16]
 80341c6:	687b      	ldr	r3, [r7, #4]
 80341c8:	681a      	ldr	r2, [r3, #0]
 80341ca:	4b3c      	ldr	r3, [pc, #240]	; (80342bc <SPI_CloseTransfer+0x13c>)
 80341cc:	400b      	ands	r3, r1
 80341ce:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80341d0:	687b      	ldr	r3, [r7, #4]
 80341d2:	681b      	ldr	r3, [r3, #0]
 80341d4:	689a      	ldr	r2, [r3, #8]
 80341d6:	687b      	ldr	r3, [r7, #4]
 80341d8:	681b      	ldr	r3, [r3, #0]
 80341da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80341de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80341e0:	687b      	ldr	r3, [r7, #4]
 80341e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80341e6:	b2db      	uxtb	r3, r3
 80341e8:	2b04      	cmp	r3, #4
 80341ea:	d014      	beq.n	8034216 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80341ec:	68fb      	ldr	r3, [r7, #12]
 80341ee:	f003 0320 	and.w	r3, r3, #32
 80341f2:	2b00      	cmp	r3, #0
 80341f4:	d00f      	beq.n	8034216 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80341f6:	687b      	ldr	r3, [r7, #4]
 80341f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80341fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8034200:	687b      	ldr	r3, [r7, #4]
 8034202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8034206:	687b      	ldr	r3, [r7, #4]
 8034208:	681b      	ldr	r3, [r3, #0]
 803420a:	699a      	ldr	r2, [r3, #24]
 803420c:	687b      	ldr	r3, [r7, #4]
 803420e:	681b      	ldr	r3, [r3, #0]
 8034210:	f042 0220 	orr.w	r2, r2, #32
 8034214:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8034216:	687b      	ldr	r3, [r7, #4]
 8034218:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803421c:	b2db      	uxtb	r3, r3
 803421e:	2b03      	cmp	r3, #3
 8034220:	d014      	beq.n	803424c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8034222:	68fb      	ldr	r3, [r7, #12]
 8034224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8034228:	2b00      	cmp	r3, #0
 803422a:	d00f      	beq.n	803424c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 803422c:	687b      	ldr	r3, [r7, #4]
 803422e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034232:	f043 0204 	orr.w	r2, r3, #4
 8034236:	687b      	ldr	r3, [r7, #4]
 8034238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 803423c:	687b      	ldr	r3, [r7, #4]
 803423e:	681b      	ldr	r3, [r3, #0]
 8034240:	699a      	ldr	r2, [r3, #24]
 8034242:	687b      	ldr	r3, [r7, #4]
 8034244:	681b      	ldr	r3, [r3, #0]
 8034246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803424a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 803424c:	68fb      	ldr	r3, [r7, #12]
 803424e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8034252:	2b00      	cmp	r3, #0
 8034254:	d00f      	beq.n	8034276 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8034256:	687b      	ldr	r3, [r7, #4]
 8034258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803425c:	f043 0201 	orr.w	r2, r3, #1
 8034260:	687b      	ldr	r3, [r7, #4]
 8034262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8034266:	687b      	ldr	r3, [r7, #4]
 8034268:	681b      	ldr	r3, [r3, #0]
 803426a:	699a      	ldr	r2, [r3, #24]
 803426c:	687b      	ldr	r3, [r7, #4]
 803426e:	681b      	ldr	r3, [r3, #0]
 8034270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8034274:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8034276:	68fb      	ldr	r3, [r7, #12]
 8034278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803427c:	2b00      	cmp	r3, #0
 803427e:	d00f      	beq.n	80342a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8034280:	687b      	ldr	r3, [r7, #4]
 8034282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034286:	f043 0208 	orr.w	r2, r3, #8
 803428a:	687b      	ldr	r3, [r7, #4]
 803428c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8034290:	687b      	ldr	r3, [r7, #4]
 8034292:	681b      	ldr	r3, [r3, #0]
 8034294:	699a      	ldr	r2, [r3, #24]
 8034296:	687b      	ldr	r3, [r7, #4]
 8034298:	681b      	ldr	r3, [r3, #0]
 803429a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 803429e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80342a0:	687b      	ldr	r3, [r7, #4]
 80342a2:	2200      	movs	r2, #0
 80342a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80342a8:	687b      	ldr	r3, [r7, #4]
 80342aa:	2200      	movs	r2, #0
 80342ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80342b0:	bf00      	nop
 80342b2:	3714      	adds	r7, #20
 80342b4:	46bd      	mov	sp, r7
 80342b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80342ba:	4770      	bx	lr
 80342bc:	fffffc90 	.word	0xfffffc90

080342c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80342c0:	b480      	push	{r7}
 80342c2:	b085      	sub	sp, #20
 80342c4:	af00      	add	r7, sp, #0
 80342c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80342c8:	687b      	ldr	r3, [r7, #4]
 80342ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80342cc:	095b      	lsrs	r3, r3, #5
 80342ce:	3301      	adds	r3, #1
 80342d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80342d2:	687b      	ldr	r3, [r7, #4]
 80342d4:	68db      	ldr	r3, [r3, #12]
 80342d6:	3301      	adds	r3, #1
 80342d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80342da:	68bb      	ldr	r3, [r7, #8]
 80342dc:	3307      	adds	r3, #7
 80342de:	08db      	lsrs	r3, r3, #3
 80342e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80342e2:	68bb      	ldr	r3, [r7, #8]
 80342e4:	68fa      	ldr	r2, [r7, #12]
 80342e6:	fb02 f303 	mul.w	r3, r2, r3
}
 80342ea:	4618      	mov	r0, r3
 80342ec:	3714      	adds	r7, #20
 80342ee:	46bd      	mov	sp, r7
 80342f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80342f4:	4770      	bx	lr

080342f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80342f6:	b580      	push	{r7, lr}
 80342f8:	b082      	sub	sp, #8
 80342fa:	af00      	add	r7, sp, #0
 80342fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80342fe:	687b      	ldr	r3, [r7, #4]
 8034300:	2b00      	cmp	r3, #0
 8034302:	d101      	bne.n	8034308 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8034304:	2301      	movs	r3, #1
 8034306:	e049      	b.n	803439c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8034308:	687b      	ldr	r3, [r7, #4]
 803430a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803430e:	b2db      	uxtb	r3, r3
 8034310:	2b00      	cmp	r3, #0
 8034312:	d106      	bne.n	8034322 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8034314:	687b      	ldr	r3, [r7, #4]
 8034316:	2200      	movs	r2, #0
 8034318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 803431c:	6878      	ldr	r0, [r7, #4]
 803431e:	f7f5 ff5b 	bl	802a1d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8034322:	687b      	ldr	r3, [r7, #4]
 8034324:	2202      	movs	r2, #2
 8034326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 803432a:	687b      	ldr	r3, [r7, #4]
 803432c:	681a      	ldr	r2, [r3, #0]
 803432e:	687b      	ldr	r3, [r7, #4]
 8034330:	3304      	adds	r3, #4
 8034332:	4619      	mov	r1, r3
 8034334:	4610      	mov	r0, r2
 8034336:	f000 faed 	bl	8034914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 803433a:	687b      	ldr	r3, [r7, #4]
 803433c:	2201      	movs	r2, #1
 803433e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8034342:	687b      	ldr	r3, [r7, #4]
 8034344:	2201      	movs	r2, #1
 8034346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 803434a:	687b      	ldr	r3, [r7, #4]
 803434c:	2201      	movs	r2, #1
 803434e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8034352:	687b      	ldr	r3, [r7, #4]
 8034354:	2201      	movs	r2, #1
 8034356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 803435a:	687b      	ldr	r3, [r7, #4]
 803435c:	2201      	movs	r2, #1
 803435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8034362:	687b      	ldr	r3, [r7, #4]
 8034364:	2201      	movs	r2, #1
 8034366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 803436a:	687b      	ldr	r3, [r7, #4]
 803436c:	2201      	movs	r2, #1
 803436e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8034372:	687b      	ldr	r3, [r7, #4]
 8034374:	2201      	movs	r2, #1
 8034376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 803437a:	687b      	ldr	r3, [r7, #4]
 803437c:	2201      	movs	r2, #1
 803437e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8034382:	687b      	ldr	r3, [r7, #4]
 8034384:	2201      	movs	r2, #1
 8034386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 803438a:	687b      	ldr	r3, [r7, #4]
 803438c:	2201      	movs	r2, #1
 803438e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8034392:	687b      	ldr	r3, [r7, #4]
 8034394:	2201      	movs	r2, #1
 8034396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 803439a:	2300      	movs	r3, #0
}
 803439c:	4618      	mov	r0, r3
 803439e:	3708      	adds	r7, #8
 80343a0:	46bd      	mov	sp, r7
 80343a2:	bd80      	pop	{r7, pc}

080343a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80343a4:	b480      	push	{r7}
 80343a6:	b085      	sub	sp, #20
 80343a8:	af00      	add	r7, sp, #0
 80343aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80343ac:	687b      	ldr	r3, [r7, #4]
 80343ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80343b2:	b2db      	uxtb	r3, r3
 80343b4:	2b01      	cmp	r3, #1
 80343b6:	d001      	beq.n	80343bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80343b8:	2301      	movs	r3, #1
 80343ba:	e054      	b.n	8034466 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80343bc:	687b      	ldr	r3, [r7, #4]
 80343be:	2202      	movs	r2, #2
 80343c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80343c4:	687b      	ldr	r3, [r7, #4]
 80343c6:	681b      	ldr	r3, [r3, #0]
 80343c8:	68da      	ldr	r2, [r3, #12]
 80343ca:	687b      	ldr	r3, [r7, #4]
 80343cc:	681b      	ldr	r3, [r3, #0]
 80343ce:	f042 0201 	orr.w	r2, r2, #1
 80343d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80343d4:	687b      	ldr	r3, [r7, #4]
 80343d6:	681b      	ldr	r3, [r3, #0]
 80343d8:	4a26      	ldr	r2, [pc, #152]	; (8034474 <HAL_TIM_Base_Start_IT+0xd0>)
 80343da:	4293      	cmp	r3, r2
 80343dc:	d022      	beq.n	8034424 <HAL_TIM_Base_Start_IT+0x80>
 80343de:	687b      	ldr	r3, [r7, #4]
 80343e0:	681b      	ldr	r3, [r3, #0]
 80343e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80343e6:	d01d      	beq.n	8034424 <HAL_TIM_Base_Start_IT+0x80>
 80343e8:	687b      	ldr	r3, [r7, #4]
 80343ea:	681b      	ldr	r3, [r3, #0]
 80343ec:	4a22      	ldr	r2, [pc, #136]	; (8034478 <HAL_TIM_Base_Start_IT+0xd4>)
 80343ee:	4293      	cmp	r3, r2
 80343f0:	d018      	beq.n	8034424 <HAL_TIM_Base_Start_IT+0x80>
 80343f2:	687b      	ldr	r3, [r7, #4]
 80343f4:	681b      	ldr	r3, [r3, #0]
 80343f6:	4a21      	ldr	r2, [pc, #132]	; (803447c <HAL_TIM_Base_Start_IT+0xd8>)
 80343f8:	4293      	cmp	r3, r2
 80343fa:	d013      	beq.n	8034424 <HAL_TIM_Base_Start_IT+0x80>
 80343fc:	687b      	ldr	r3, [r7, #4]
 80343fe:	681b      	ldr	r3, [r3, #0]
 8034400:	4a1f      	ldr	r2, [pc, #124]	; (8034480 <HAL_TIM_Base_Start_IT+0xdc>)
 8034402:	4293      	cmp	r3, r2
 8034404:	d00e      	beq.n	8034424 <HAL_TIM_Base_Start_IT+0x80>
 8034406:	687b      	ldr	r3, [r7, #4]
 8034408:	681b      	ldr	r3, [r3, #0]
 803440a:	4a1e      	ldr	r2, [pc, #120]	; (8034484 <HAL_TIM_Base_Start_IT+0xe0>)
 803440c:	4293      	cmp	r3, r2
 803440e:	d009      	beq.n	8034424 <HAL_TIM_Base_Start_IT+0x80>
 8034410:	687b      	ldr	r3, [r7, #4]
 8034412:	681b      	ldr	r3, [r3, #0]
 8034414:	4a1c      	ldr	r2, [pc, #112]	; (8034488 <HAL_TIM_Base_Start_IT+0xe4>)
 8034416:	4293      	cmp	r3, r2
 8034418:	d004      	beq.n	8034424 <HAL_TIM_Base_Start_IT+0x80>
 803441a:	687b      	ldr	r3, [r7, #4]
 803441c:	681b      	ldr	r3, [r3, #0]
 803441e:	4a1b      	ldr	r2, [pc, #108]	; (803448c <HAL_TIM_Base_Start_IT+0xe8>)
 8034420:	4293      	cmp	r3, r2
 8034422:	d115      	bne.n	8034450 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8034424:	687b      	ldr	r3, [r7, #4]
 8034426:	681b      	ldr	r3, [r3, #0]
 8034428:	689a      	ldr	r2, [r3, #8]
 803442a:	4b19      	ldr	r3, [pc, #100]	; (8034490 <HAL_TIM_Base_Start_IT+0xec>)
 803442c:	4013      	ands	r3, r2
 803442e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8034430:	68fb      	ldr	r3, [r7, #12]
 8034432:	2b06      	cmp	r3, #6
 8034434:	d015      	beq.n	8034462 <HAL_TIM_Base_Start_IT+0xbe>
 8034436:	68fb      	ldr	r3, [r7, #12]
 8034438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803443c:	d011      	beq.n	8034462 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 803443e:	687b      	ldr	r3, [r7, #4]
 8034440:	681b      	ldr	r3, [r3, #0]
 8034442:	681a      	ldr	r2, [r3, #0]
 8034444:	687b      	ldr	r3, [r7, #4]
 8034446:	681b      	ldr	r3, [r3, #0]
 8034448:	f042 0201 	orr.w	r2, r2, #1
 803444c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 803444e:	e008      	b.n	8034462 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8034450:	687b      	ldr	r3, [r7, #4]
 8034452:	681b      	ldr	r3, [r3, #0]
 8034454:	681a      	ldr	r2, [r3, #0]
 8034456:	687b      	ldr	r3, [r7, #4]
 8034458:	681b      	ldr	r3, [r3, #0]
 803445a:	f042 0201 	orr.w	r2, r2, #1
 803445e:	601a      	str	r2, [r3, #0]
 8034460:	e000      	b.n	8034464 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8034462:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8034464:	2300      	movs	r3, #0
}
 8034466:	4618      	mov	r0, r3
 8034468:	3714      	adds	r7, #20
 803446a:	46bd      	mov	sp, r7
 803446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034470:	4770      	bx	lr
 8034472:	bf00      	nop
 8034474:	40010000 	.word	0x40010000
 8034478:	40000400 	.word	0x40000400
 803447c:	40000800 	.word	0x40000800
 8034480:	40000c00 	.word	0x40000c00
 8034484:	40010400 	.word	0x40010400
 8034488:	40001800 	.word	0x40001800
 803448c:	40014000 	.word	0x40014000
 8034490:	00010007 	.word	0x00010007

08034494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8034494:	b580      	push	{r7, lr}
 8034496:	b082      	sub	sp, #8
 8034498:	af00      	add	r7, sp, #0
 803449a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 803449c:	687b      	ldr	r3, [r7, #4]
 803449e:	681b      	ldr	r3, [r3, #0]
 80344a0:	691b      	ldr	r3, [r3, #16]
 80344a2:	f003 0302 	and.w	r3, r3, #2
 80344a6:	2b02      	cmp	r3, #2
 80344a8:	d122      	bne.n	80344f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80344aa:	687b      	ldr	r3, [r7, #4]
 80344ac:	681b      	ldr	r3, [r3, #0]
 80344ae:	68db      	ldr	r3, [r3, #12]
 80344b0:	f003 0302 	and.w	r3, r3, #2
 80344b4:	2b02      	cmp	r3, #2
 80344b6:	d11b      	bne.n	80344f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80344b8:	687b      	ldr	r3, [r7, #4]
 80344ba:	681b      	ldr	r3, [r3, #0]
 80344bc:	f06f 0202 	mvn.w	r2, #2
 80344c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80344c2:	687b      	ldr	r3, [r7, #4]
 80344c4:	2201      	movs	r2, #1
 80344c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80344c8:	687b      	ldr	r3, [r7, #4]
 80344ca:	681b      	ldr	r3, [r3, #0]
 80344cc:	699b      	ldr	r3, [r3, #24]
 80344ce:	f003 0303 	and.w	r3, r3, #3
 80344d2:	2b00      	cmp	r3, #0
 80344d4:	d003      	beq.n	80344de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80344d6:	6878      	ldr	r0, [r7, #4]
 80344d8:	f000 f9fe 	bl	80348d8 <HAL_TIM_IC_CaptureCallback>
 80344dc:	e005      	b.n	80344ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80344de:	6878      	ldr	r0, [r7, #4]
 80344e0:	f000 f9f0 	bl	80348c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80344e4:	6878      	ldr	r0, [r7, #4]
 80344e6:	f000 fa01 	bl	80348ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80344ea:	687b      	ldr	r3, [r7, #4]
 80344ec:	2200      	movs	r2, #0
 80344ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80344f0:	687b      	ldr	r3, [r7, #4]
 80344f2:	681b      	ldr	r3, [r3, #0]
 80344f4:	691b      	ldr	r3, [r3, #16]
 80344f6:	f003 0304 	and.w	r3, r3, #4
 80344fa:	2b04      	cmp	r3, #4
 80344fc:	d122      	bne.n	8034544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80344fe:	687b      	ldr	r3, [r7, #4]
 8034500:	681b      	ldr	r3, [r3, #0]
 8034502:	68db      	ldr	r3, [r3, #12]
 8034504:	f003 0304 	and.w	r3, r3, #4
 8034508:	2b04      	cmp	r3, #4
 803450a:	d11b      	bne.n	8034544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 803450c:	687b      	ldr	r3, [r7, #4]
 803450e:	681b      	ldr	r3, [r3, #0]
 8034510:	f06f 0204 	mvn.w	r2, #4
 8034514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8034516:	687b      	ldr	r3, [r7, #4]
 8034518:	2202      	movs	r2, #2
 803451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 803451c:	687b      	ldr	r3, [r7, #4]
 803451e:	681b      	ldr	r3, [r3, #0]
 8034520:	699b      	ldr	r3, [r3, #24]
 8034522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8034526:	2b00      	cmp	r3, #0
 8034528:	d003      	beq.n	8034532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 803452a:	6878      	ldr	r0, [r7, #4]
 803452c:	f000 f9d4 	bl	80348d8 <HAL_TIM_IC_CaptureCallback>
 8034530:	e005      	b.n	803453e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8034532:	6878      	ldr	r0, [r7, #4]
 8034534:	f000 f9c6 	bl	80348c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8034538:	6878      	ldr	r0, [r7, #4]
 803453a:	f000 f9d7 	bl	80348ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 803453e:	687b      	ldr	r3, [r7, #4]
 8034540:	2200      	movs	r2, #0
 8034542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8034544:	687b      	ldr	r3, [r7, #4]
 8034546:	681b      	ldr	r3, [r3, #0]
 8034548:	691b      	ldr	r3, [r3, #16]
 803454a:	f003 0308 	and.w	r3, r3, #8
 803454e:	2b08      	cmp	r3, #8
 8034550:	d122      	bne.n	8034598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8034552:	687b      	ldr	r3, [r7, #4]
 8034554:	681b      	ldr	r3, [r3, #0]
 8034556:	68db      	ldr	r3, [r3, #12]
 8034558:	f003 0308 	and.w	r3, r3, #8
 803455c:	2b08      	cmp	r3, #8
 803455e:	d11b      	bne.n	8034598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8034560:	687b      	ldr	r3, [r7, #4]
 8034562:	681b      	ldr	r3, [r3, #0]
 8034564:	f06f 0208 	mvn.w	r2, #8
 8034568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 803456a:	687b      	ldr	r3, [r7, #4]
 803456c:	2204      	movs	r2, #4
 803456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8034570:	687b      	ldr	r3, [r7, #4]
 8034572:	681b      	ldr	r3, [r3, #0]
 8034574:	69db      	ldr	r3, [r3, #28]
 8034576:	f003 0303 	and.w	r3, r3, #3
 803457a:	2b00      	cmp	r3, #0
 803457c:	d003      	beq.n	8034586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 803457e:	6878      	ldr	r0, [r7, #4]
 8034580:	f000 f9aa 	bl	80348d8 <HAL_TIM_IC_CaptureCallback>
 8034584:	e005      	b.n	8034592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8034586:	6878      	ldr	r0, [r7, #4]
 8034588:	f000 f99c 	bl	80348c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 803458c:	6878      	ldr	r0, [r7, #4]
 803458e:	f000 f9ad 	bl	80348ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8034592:	687b      	ldr	r3, [r7, #4]
 8034594:	2200      	movs	r2, #0
 8034596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8034598:	687b      	ldr	r3, [r7, #4]
 803459a:	681b      	ldr	r3, [r3, #0]
 803459c:	691b      	ldr	r3, [r3, #16]
 803459e:	f003 0310 	and.w	r3, r3, #16
 80345a2:	2b10      	cmp	r3, #16
 80345a4:	d122      	bne.n	80345ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80345a6:	687b      	ldr	r3, [r7, #4]
 80345a8:	681b      	ldr	r3, [r3, #0]
 80345aa:	68db      	ldr	r3, [r3, #12]
 80345ac:	f003 0310 	and.w	r3, r3, #16
 80345b0:	2b10      	cmp	r3, #16
 80345b2:	d11b      	bne.n	80345ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80345b4:	687b      	ldr	r3, [r7, #4]
 80345b6:	681b      	ldr	r3, [r3, #0]
 80345b8:	f06f 0210 	mvn.w	r2, #16
 80345bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80345be:	687b      	ldr	r3, [r7, #4]
 80345c0:	2208      	movs	r2, #8
 80345c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80345c4:	687b      	ldr	r3, [r7, #4]
 80345c6:	681b      	ldr	r3, [r3, #0]
 80345c8:	69db      	ldr	r3, [r3, #28]
 80345ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80345ce:	2b00      	cmp	r3, #0
 80345d0:	d003      	beq.n	80345da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80345d2:	6878      	ldr	r0, [r7, #4]
 80345d4:	f000 f980 	bl	80348d8 <HAL_TIM_IC_CaptureCallback>
 80345d8:	e005      	b.n	80345e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80345da:	6878      	ldr	r0, [r7, #4]
 80345dc:	f000 f972 	bl	80348c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80345e0:	6878      	ldr	r0, [r7, #4]
 80345e2:	f000 f983 	bl	80348ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80345e6:	687b      	ldr	r3, [r7, #4]
 80345e8:	2200      	movs	r2, #0
 80345ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80345ec:	687b      	ldr	r3, [r7, #4]
 80345ee:	681b      	ldr	r3, [r3, #0]
 80345f0:	691b      	ldr	r3, [r3, #16]
 80345f2:	f003 0301 	and.w	r3, r3, #1
 80345f6:	2b01      	cmp	r3, #1
 80345f8:	d10e      	bne.n	8034618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80345fa:	687b      	ldr	r3, [r7, #4]
 80345fc:	681b      	ldr	r3, [r3, #0]
 80345fe:	68db      	ldr	r3, [r3, #12]
 8034600:	f003 0301 	and.w	r3, r3, #1
 8034604:	2b01      	cmp	r3, #1
 8034606:	d107      	bne.n	8034618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8034608:	687b      	ldr	r3, [r7, #4]
 803460a:	681b      	ldr	r3, [r3, #0]
 803460c:	f06f 0201 	mvn.w	r2, #1
 8034610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8034612:	6878      	ldr	r0, [r7, #4]
 8034614:	f7f5 f96a 	bl	80298ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8034618:	687b      	ldr	r3, [r7, #4]
 803461a:	681b      	ldr	r3, [r3, #0]
 803461c:	691b      	ldr	r3, [r3, #16]
 803461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8034622:	2b80      	cmp	r3, #128	; 0x80
 8034624:	d10e      	bne.n	8034644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8034626:	687b      	ldr	r3, [r7, #4]
 8034628:	681b      	ldr	r3, [r3, #0]
 803462a:	68db      	ldr	r3, [r3, #12]
 803462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8034630:	2b80      	cmp	r3, #128	; 0x80
 8034632:	d107      	bne.n	8034644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8034634:	687b      	ldr	r3, [r7, #4]
 8034636:	681b      	ldr	r3, [r3, #0]
 8034638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 803463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 803463e:	6878      	ldr	r0, [r7, #4]
 8034640:	f000 fb38 	bl	8034cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8034644:	687b      	ldr	r3, [r7, #4]
 8034646:	681b      	ldr	r3, [r3, #0]
 8034648:	691b      	ldr	r3, [r3, #16]
 803464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803464e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034652:	d10e      	bne.n	8034672 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8034654:	687b      	ldr	r3, [r7, #4]
 8034656:	681b      	ldr	r3, [r3, #0]
 8034658:	68db      	ldr	r3, [r3, #12]
 803465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803465e:	2b80      	cmp	r3, #128	; 0x80
 8034660:	d107      	bne.n	8034672 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8034662:	687b      	ldr	r3, [r7, #4]
 8034664:	681b      	ldr	r3, [r3, #0]
 8034666:	f46f 7280 	mvn.w	r2, #256	; 0x100
 803466a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 803466c:	6878      	ldr	r0, [r7, #4]
 803466e:	f000 fb2b 	bl	8034cc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8034672:	687b      	ldr	r3, [r7, #4]
 8034674:	681b      	ldr	r3, [r3, #0]
 8034676:	691b      	ldr	r3, [r3, #16]
 8034678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803467c:	2b40      	cmp	r3, #64	; 0x40
 803467e:	d10e      	bne.n	803469e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8034680:	687b      	ldr	r3, [r7, #4]
 8034682:	681b      	ldr	r3, [r3, #0]
 8034684:	68db      	ldr	r3, [r3, #12]
 8034686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803468a:	2b40      	cmp	r3, #64	; 0x40
 803468c:	d107      	bne.n	803469e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 803468e:	687b      	ldr	r3, [r7, #4]
 8034690:	681b      	ldr	r3, [r3, #0]
 8034692:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8034696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8034698:	6878      	ldr	r0, [r7, #4]
 803469a:	f000 f931 	bl	8034900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 803469e:	687b      	ldr	r3, [r7, #4]
 80346a0:	681b      	ldr	r3, [r3, #0]
 80346a2:	691b      	ldr	r3, [r3, #16]
 80346a4:	f003 0320 	and.w	r3, r3, #32
 80346a8:	2b20      	cmp	r3, #32
 80346aa:	d10e      	bne.n	80346ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80346ac:	687b      	ldr	r3, [r7, #4]
 80346ae:	681b      	ldr	r3, [r3, #0]
 80346b0:	68db      	ldr	r3, [r3, #12]
 80346b2:	f003 0320 	and.w	r3, r3, #32
 80346b6:	2b20      	cmp	r3, #32
 80346b8:	d107      	bne.n	80346ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80346ba:	687b      	ldr	r3, [r7, #4]
 80346bc:	681b      	ldr	r3, [r3, #0]
 80346be:	f06f 0220 	mvn.w	r2, #32
 80346c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80346c4:	6878      	ldr	r0, [r7, #4]
 80346c6:	f000 faeb 	bl	8034ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80346ca:	bf00      	nop
 80346cc:	3708      	adds	r7, #8
 80346ce:	46bd      	mov	sp, r7
 80346d0:	bd80      	pop	{r7, pc}
	...

080346d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80346d4:	b580      	push	{r7, lr}
 80346d6:	b084      	sub	sp, #16
 80346d8:	af00      	add	r7, sp, #0
 80346da:	6078      	str	r0, [r7, #4]
 80346dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80346de:	2300      	movs	r3, #0
 80346e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80346e2:	687b      	ldr	r3, [r7, #4]
 80346e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80346e8:	2b01      	cmp	r3, #1
 80346ea:	d101      	bne.n	80346f0 <HAL_TIM_ConfigClockSource+0x1c>
 80346ec:	2302      	movs	r3, #2
 80346ee:	e0dc      	b.n	80348aa <HAL_TIM_ConfigClockSource+0x1d6>
 80346f0:	687b      	ldr	r3, [r7, #4]
 80346f2:	2201      	movs	r2, #1
 80346f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80346f8:	687b      	ldr	r3, [r7, #4]
 80346fa:	2202      	movs	r2, #2
 80346fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8034700:	687b      	ldr	r3, [r7, #4]
 8034702:	681b      	ldr	r3, [r3, #0]
 8034704:	689b      	ldr	r3, [r3, #8]
 8034706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8034708:	68ba      	ldr	r2, [r7, #8]
 803470a:	4b6a      	ldr	r3, [pc, #424]	; (80348b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 803470c:	4013      	ands	r3, r2
 803470e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8034710:	68bb      	ldr	r3, [r7, #8]
 8034712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8034716:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8034718:	687b      	ldr	r3, [r7, #4]
 803471a:	681b      	ldr	r3, [r3, #0]
 803471c:	68ba      	ldr	r2, [r7, #8]
 803471e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8034720:	683b      	ldr	r3, [r7, #0]
 8034722:	681b      	ldr	r3, [r3, #0]
 8034724:	4a64      	ldr	r2, [pc, #400]	; (80348b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8034726:	4293      	cmp	r3, r2
 8034728:	f000 80a9 	beq.w	803487e <HAL_TIM_ConfigClockSource+0x1aa>
 803472c:	4a62      	ldr	r2, [pc, #392]	; (80348b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 803472e:	4293      	cmp	r3, r2
 8034730:	f200 80ae 	bhi.w	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 8034734:	4a61      	ldr	r2, [pc, #388]	; (80348bc <HAL_TIM_ConfigClockSource+0x1e8>)
 8034736:	4293      	cmp	r3, r2
 8034738:	f000 80a1 	beq.w	803487e <HAL_TIM_ConfigClockSource+0x1aa>
 803473c:	4a5f      	ldr	r2, [pc, #380]	; (80348bc <HAL_TIM_ConfigClockSource+0x1e8>)
 803473e:	4293      	cmp	r3, r2
 8034740:	f200 80a6 	bhi.w	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 8034744:	4a5e      	ldr	r2, [pc, #376]	; (80348c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8034746:	4293      	cmp	r3, r2
 8034748:	f000 8099 	beq.w	803487e <HAL_TIM_ConfigClockSource+0x1aa>
 803474c:	4a5c      	ldr	r2, [pc, #368]	; (80348c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 803474e:	4293      	cmp	r3, r2
 8034750:	f200 809e 	bhi.w	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 8034754:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8034758:	f000 8091 	beq.w	803487e <HAL_TIM_ConfigClockSource+0x1aa>
 803475c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8034760:	f200 8096 	bhi.w	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 8034764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8034768:	f000 8089 	beq.w	803487e <HAL_TIM_ConfigClockSource+0x1aa>
 803476c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8034770:	f200 808e 	bhi.w	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 8034774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034778:	d03e      	beq.n	80347f8 <HAL_TIM_ConfigClockSource+0x124>
 803477a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803477e:	f200 8087 	bhi.w	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 8034782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034786:	f000 8086 	beq.w	8034896 <HAL_TIM_ConfigClockSource+0x1c2>
 803478a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803478e:	d87f      	bhi.n	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 8034790:	2b70      	cmp	r3, #112	; 0x70
 8034792:	d01a      	beq.n	80347ca <HAL_TIM_ConfigClockSource+0xf6>
 8034794:	2b70      	cmp	r3, #112	; 0x70
 8034796:	d87b      	bhi.n	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 8034798:	2b60      	cmp	r3, #96	; 0x60
 803479a:	d050      	beq.n	803483e <HAL_TIM_ConfigClockSource+0x16a>
 803479c:	2b60      	cmp	r3, #96	; 0x60
 803479e:	d877      	bhi.n	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 80347a0:	2b50      	cmp	r3, #80	; 0x50
 80347a2:	d03c      	beq.n	803481e <HAL_TIM_ConfigClockSource+0x14a>
 80347a4:	2b50      	cmp	r3, #80	; 0x50
 80347a6:	d873      	bhi.n	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 80347a8:	2b40      	cmp	r3, #64	; 0x40
 80347aa:	d058      	beq.n	803485e <HAL_TIM_ConfigClockSource+0x18a>
 80347ac:	2b40      	cmp	r3, #64	; 0x40
 80347ae:	d86f      	bhi.n	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 80347b0:	2b30      	cmp	r3, #48	; 0x30
 80347b2:	d064      	beq.n	803487e <HAL_TIM_ConfigClockSource+0x1aa>
 80347b4:	2b30      	cmp	r3, #48	; 0x30
 80347b6:	d86b      	bhi.n	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 80347b8:	2b20      	cmp	r3, #32
 80347ba:	d060      	beq.n	803487e <HAL_TIM_ConfigClockSource+0x1aa>
 80347bc:	2b20      	cmp	r3, #32
 80347be:	d867      	bhi.n	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
 80347c0:	2b00      	cmp	r3, #0
 80347c2:	d05c      	beq.n	803487e <HAL_TIM_ConfigClockSource+0x1aa>
 80347c4:	2b10      	cmp	r3, #16
 80347c6:	d05a      	beq.n	803487e <HAL_TIM_ConfigClockSource+0x1aa>
 80347c8:	e062      	b.n	8034890 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80347ca:	687b      	ldr	r3, [r7, #4]
 80347cc:	6818      	ldr	r0, [r3, #0]
 80347ce:	683b      	ldr	r3, [r7, #0]
 80347d0:	6899      	ldr	r1, [r3, #8]
 80347d2:	683b      	ldr	r3, [r7, #0]
 80347d4:	685a      	ldr	r2, [r3, #4]
 80347d6:	683b      	ldr	r3, [r7, #0]
 80347d8:	68db      	ldr	r3, [r3, #12]
 80347da:	f000 f9b3 	bl	8034b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80347de:	687b      	ldr	r3, [r7, #4]
 80347e0:	681b      	ldr	r3, [r3, #0]
 80347e2:	689b      	ldr	r3, [r3, #8]
 80347e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80347e6:	68bb      	ldr	r3, [r7, #8]
 80347e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80347ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80347ee:	687b      	ldr	r3, [r7, #4]
 80347f0:	681b      	ldr	r3, [r3, #0]
 80347f2:	68ba      	ldr	r2, [r7, #8]
 80347f4:	609a      	str	r2, [r3, #8]
      break;
 80347f6:	e04f      	b.n	8034898 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80347f8:	687b      	ldr	r3, [r7, #4]
 80347fa:	6818      	ldr	r0, [r3, #0]
 80347fc:	683b      	ldr	r3, [r7, #0]
 80347fe:	6899      	ldr	r1, [r3, #8]
 8034800:	683b      	ldr	r3, [r7, #0]
 8034802:	685a      	ldr	r2, [r3, #4]
 8034804:	683b      	ldr	r3, [r7, #0]
 8034806:	68db      	ldr	r3, [r3, #12]
 8034808:	f000 f99c 	bl	8034b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 803480c:	687b      	ldr	r3, [r7, #4]
 803480e:	681b      	ldr	r3, [r3, #0]
 8034810:	689a      	ldr	r2, [r3, #8]
 8034812:	687b      	ldr	r3, [r7, #4]
 8034814:	681b      	ldr	r3, [r3, #0]
 8034816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 803481a:	609a      	str	r2, [r3, #8]
      break;
 803481c:	e03c      	b.n	8034898 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 803481e:	687b      	ldr	r3, [r7, #4]
 8034820:	6818      	ldr	r0, [r3, #0]
 8034822:	683b      	ldr	r3, [r7, #0]
 8034824:	6859      	ldr	r1, [r3, #4]
 8034826:	683b      	ldr	r3, [r7, #0]
 8034828:	68db      	ldr	r3, [r3, #12]
 803482a:	461a      	mov	r2, r3
 803482c:	f000 f90c 	bl	8034a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8034830:	687b      	ldr	r3, [r7, #4]
 8034832:	681b      	ldr	r3, [r3, #0]
 8034834:	2150      	movs	r1, #80	; 0x50
 8034836:	4618      	mov	r0, r3
 8034838:	f000 f966 	bl	8034b08 <TIM_ITRx_SetConfig>
      break;
 803483c:	e02c      	b.n	8034898 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 803483e:	687b      	ldr	r3, [r7, #4]
 8034840:	6818      	ldr	r0, [r3, #0]
 8034842:	683b      	ldr	r3, [r7, #0]
 8034844:	6859      	ldr	r1, [r3, #4]
 8034846:	683b      	ldr	r3, [r7, #0]
 8034848:	68db      	ldr	r3, [r3, #12]
 803484a:	461a      	mov	r2, r3
 803484c:	f000 f92b 	bl	8034aa6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8034850:	687b      	ldr	r3, [r7, #4]
 8034852:	681b      	ldr	r3, [r3, #0]
 8034854:	2160      	movs	r1, #96	; 0x60
 8034856:	4618      	mov	r0, r3
 8034858:	f000 f956 	bl	8034b08 <TIM_ITRx_SetConfig>
      break;
 803485c:	e01c      	b.n	8034898 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 803485e:	687b      	ldr	r3, [r7, #4]
 8034860:	6818      	ldr	r0, [r3, #0]
 8034862:	683b      	ldr	r3, [r7, #0]
 8034864:	6859      	ldr	r1, [r3, #4]
 8034866:	683b      	ldr	r3, [r7, #0]
 8034868:	68db      	ldr	r3, [r3, #12]
 803486a:	461a      	mov	r2, r3
 803486c:	f000 f8ec 	bl	8034a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8034870:	687b      	ldr	r3, [r7, #4]
 8034872:	681b      	ldr	r3, [r3, #0]
 8034874:	2140      	movs	r1, #64	; 0x40
 8034876:	4618      	mov	r0, r3
 8034878:	f000 f946 	bl	8034b08 <TIM_ITRx_SetConfig>
      break;
 803487c:	e00c      	b.n	8034898 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 803487e:	687b      	ldr	r3, [r7, #4]
 8034880:	681a      	ldr	r2, [r3, #0]
 8034882:	683b      	ldr	r3, [r7, #0]
 8034884:	681b      	ldr	r3, [r3, #0]
 8034886:	4619      	mov	r1, r3
 8034888:	4610      	mov	r0, r2
 803488a:	f000 f93d 	bl	8034b08 <TIM_ITRx_SetConfig>
      break;
 803488e:	e003      	b.n	8034898 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8034890:	2301      	movs	r3, #1
 8034892:	73fb      	strb	r3, [r7, #15]
      break;
 8034894:	e000      	b.n	8034898 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8034896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8034898:	687b      	ldr	r3, [r7, #4]
 803489a:	2201      	movs	r2, #1
 803489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80348a0:	687b      	ldr	r3, [r7, #4]
 80348a2:	2200      	movs	r2, #0
 80348a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80348a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80348aa:	4618      	mov	r0, r3
 80348ac:	3710      	adds	r7, #16
 80348ae:	46bd      	mov	sp, r7
 80348b0:	bd80      	pop	{r7, pc}
 80348b2:	bf00      	nop
 80348b4:	ffceff88 	.word	0xffceff88
 80348b8:	00100040 	.word	0x00100040
 80348bc:	00100030 	.word	0x00100030
 80348c0:	00100020 	.word	0x00100020

080348c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80348c4:	b480      	push	{r7}
 80348c6:	b083      	sub	sp, #12
 80348c8:	af00      	add	r7, sp, #0
 80348ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80348cc:	bf00      	nop
 80348ce:	370c      	adds	r7, #12
 80348d0:	46bd      	mov	sp, r7
 80348d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80348d6:	4770      	bx	lr

080348d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80348d8:	b480      	push	{r7}
 80348da:	b083      	sub	sp, #12
 80348dc:	af00      	add	r7, sp, #0
 80348de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80348e0:	bf00      	nop
 80348e2:	370c      	adds	r7, #12
 80348e4:	46bd      	mov	sp, r7
 80348e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80348ea:	4770      	bx	lr

080348ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80348ec:	b480      	push	{r7}
 80348ee:	b083      	sub	sp, #12
 80348f0:	af00      	add	r7, sp, #0
 80348f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80348f4:	bf00      	nop
 80348f6:	370c      	adds	r7, #12
 80348f8:	46bd      	mov	sp, r7
 80348fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80348fe:	4770      	bx	lr

08034900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8034900:	b480      	push	{r7}
 8034902:	b083      	sub	sp, #12
 8034904:	af00      	add	r7, sp, #0
 8034906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8034908:	bf00      	nop
 803490a:	370c      	adds	r7, #12
 803490c:	46bd      	mov	sp, r7
 803490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034912:	4770      	bx	lr

08034914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8034914:	b480      	push	{r7}
 8034916:	b085      	sub	sp, #20
 8034918:	af00      	add	r7, sp, #0
 803491a:	6078      	str	r0, [r7, #4]
 803491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 803491e:	687b      	ldr	r3, [r7, #4]
 8034920:	681b      	ldr	r3, [r3, #0]
 8034922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8034924:	687b      	ldr	r3, [r7, #4]
 8034926:	4a40      	ldr	r2, [pc, #256]	; (8034a28 <TIM_Base_SetConfig+0x114>)
 8034928:	4293      	cmp	r3, r2
 803492a:	d013      	beq.n	8034954 <TIM_Base_SetConfig+0x40>
 803492c:	687b      	ldr	r3, [r7, #4]
 803492e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034932:	d00f      	beq.n	8034954 <TIM_Base_SetConfig+0x40>
 8034934:	687b      	ldr	r3, [r7, #4]
 8034936:	4a3d      	ldr	r2, [pc, #244]	; (8034a2c <TIM_Base_SetConfig+0x118>)
 8034938:	4293      	cmp	r3, r2
 803493a:	d00b      	beq.n	8034954 <TIM_Base_SetConfig+0x40>
 803493c:	687b      	ldr	r3, [r7, #4]
 803493e:	4a3c      	ldr	r2, [pc, #240]	; (8034a30 <TIM_Base_SetConfig+0x11c>)
 8034940:	4293      	cmp	r3, r2
 8034942:	d007      	beq.n	8034954 <TIM_Base_SetConfig+0x40>
 8034944:	687b      	ldr	r3, [r7, #4]
 8034946:	4a3b      	ldr	r2, [pc, #236]	; (8034a34 <TIM_Base_SetConfig+0x120>)
 8034948:	4293      	cmp	r3, r2
 803494a:	d003      	beq.n	8034954 <TIM_Base_SetConfig+0x40>
 803494c:	687b      	ldr	r3, [r7, #4]
 803494e:	4a3a      	ldr	r2, [pc, #232]	; (8034a38 <TIM_Base_SetConfig+0x124>)
 8034950:	4293      	cmp	r3, r2
 8034952:	d108      	bne.n	8034966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8034954:	68fb      	ldr	r3, [r7, #12]
 8034956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 803495a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 803495c:	683b      	ldr	r3, [r7, #0]
 803495e:	685b      	ldr	r3, [r3, #4]
 8034960:	68fa      	ldr	r2, [r7, #12]
 8034962:	4313      	orrs	r3, r2
 8034964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8034966:	687b      	ldr	r3, [r7, #4]
 8034968:	4a2f      	ldr	r2, [pc, #188]	; (8034a28 <TIM_Base_SetConfig+0x114>)
 803496a:	4293      	cmp	r3, r2
 803496c:	d01f      	beq.n	80349ae <TIM_Base_SetConfig+0x9a>
 803496e:	687b      	ldr	r3, [r7, #4]
 8034970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034974:	d01b      	beq.n	80349ae <TIM_Base_SetConfig+0x9a>
 8034976:	687b      	ldr	r3, [r7, #4]
 8034978:	4a2c      	ldr	r2, [pc, #176]	; (8034a2c <TIM_Base_SetConfig+0x118>)
 803497a:	4293      	cmp	r3, r2
 803497c:	d017      	beq.n	80349ae <TIM_Base_SetConfig+0x9a>
 803497e:	687b      	ldr	r3, [r7, #4]
 8034980:	4a2b      	ldr	r2, [pc, #172]	; (8034a30 <TIM_Base_SetConfig+0x11c>)
 8034982:	4293      	cmp	r3, r2
 8034984:	d013      	beq.n	80349ae <TIM_Base_SetConfig+0x9a>
 8034986:	687b      	ldr	r3, [r7, #4]
 8034988:	4a2a      	ldr	r2, [pc, #168]	; (8034a34 <TIM_Base_SetConfig+0x120>)
 803498a:	4293      	cmp	r3, r2
 803498c:	d00f      	beq.n	80349ae <TIM_Base_SetConfig+0x9a>
 803498e:	687b      	ldr	r3, [r7, #4]
 8034990:	4a29      	ldr	r2, [pc, #164]	; (8034a38 <TIM_Base_SetConfig+0x124>)
 8034992:	4293      	cmp	r3, r2
 8034994:	d00b      	beq.n	80349ae <TIM_Base_SetConfig+0x9a>
 8034996:	687b      	ldr	r3, [r7, #4]
 8034998:	4a28      	ldr	r2, [pc, #160]	; (8034a3c <TIM_Base_SetConfig+0x128>)
 803499a:	4293      	cmp	r3, r2
 803499c:	d007      	beq.n	80349ae <TIM_Base_SetConfig+0x9a>
 803499e:	687b      	ldr	r3, [r7, #4]
 80349a0:	4a27      	ldr	r2, [pc, #156]	; (8034a40 <TIM_Base_SetConfig+0x12c>)
 80349a2:	4293      	cmp	r3, r2
 80349a4:	d003      	beq.n	80349ae <TIM_Base_SetConfig+0x9a>
 80349a6:	687b      	ldr	r3, [r7, #4]
 80349a8:	4a26      	ldr	r2, [pc, #152]	; (8034a44 <TIM_Base_SetConfig+0x130>)
 80349aa:	4293      	cmp	r3, r2
 80349ac:	d108      	bne.n	80349c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80349ae:	68fb      	ldr	r3, [r7, #12]
 80349b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80349b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80349b6:	683b      	ldr	r3, [r7, #0]
 80349b8:	68db      	ldr	r3, [r3, #12]
 80349ba:	68fa      	ldr	r2, [r7, #12]
 80349bc:	4313      	orrs	r3, r2
 80349be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80349c0:	68fb      	ldr	r3, [r7, #12]
 80349c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80349c6:	683b      	ldr	r3, [r7, #0]
 80349c8:	695b      	ldr	r3, [r3, #20]
 80349ca:	4313      	orrs	r3, r2
 80349cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80349ce:	687b      	ldr	r3, [r7, #4]
 80349d0:	68fa      	ldr	r2, [r7, #12]
 80349d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80349d4:	683b      	ldr	r3, [r7, #0]
 80349d6:	689a      	ldr	r2, [r3, #8]
 80349d8:	687b      	ldr	r3, [r7, #4]
 80349da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80349dc:	683b      	ldr	r3, [r7, #0]
 80349de:	681a      	ldr	r2, [r3, #0]
 80349e0:	687b      	ldr	r3, [r7, #4]
 80349e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80349e4:	687b      	ldr	r3, [r7, #4]
 80349e6:	4a10      	ldr	r2, [pc, #64]	; (8034a28 <TIM_Base_SetConfig+0x114>)
 80349e8:	4293      	cmp	r3, r2
 80349ea:	d00f      	beq.n	8034a0c <TIM_Base_SetConfig+0xf8>
 80349ec:	687b      	ldr	r3, [r7, #4]
 80349ee:	4a12      	ldr	r2, [pc, #72]	; (8034a38 <TIM_Base_SetConfig+0x124>)
 80349f0:	4293      	cmp	r3, r2
 80349f2:	d00b      	beq.n	8034a0c <TIM_Base_SetConfig+0xf8>
 80349f4:	687b      	ldr	r3, [r7, #4]
 80349f6:	4a11      	ldr	r2, [pc, #68]	; (8034a3c <TIM_Base_SetConfig+0x128>)
 80349f8:	4293      	cmp	r3, r2
 80349fa:	d007      	beq.n	8034a0c <TIM_Base_SetConfig+0xf8>
 80349fc:	687b      	ldr	r3, [r7, #4]
 80349fe:	4a10      	ldr	r2, [pc, #64]	; (8034a40 <TIM_Base_SetConfig+0x12c>)
 8034a00:	4293      	cmp	r3, r2
 8034a02:	d003      	beq.n	8034a0c <TIM_Base_SetConfig+0xf8>
 8034a04:	687b      	ldr	r3, [r7, #4]
 8034a06:	4a0f      	ldr	r2, [pc, #60]	; (8034a44 <TIM_Base_SetConfig+0x130>)
 8034a08:	4293      	cmp	r3, r2
 8034a0a:	d103      	bne.n	8034a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8034a0c:	683b      	ldr	r3, [r7, #0]
 8034a0e:	691a      	ldr	r2, [r3, #16]
 8034a10:	687b      	ldr	r3, [r7, #4]
 8034a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8034a14:	687b      	ldr	r3, [r7, #4]
 8034a16:	2201      	movs	r2, #1
 8034a18:	615a      	str	r2, [r3, #20]
}
 8034a1a:	bf00      	nop
 8034a1c:	3714      	adds	r7, #20
 8034a1e:	46bd      	mov	sp, r7
 8034a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034a24:	4770      	bx	lr
 8034a26:	bf00      	nop
 8034a28:	40010000 	.word	0x40010000
 8034a2c:	40000400 	.word	0x40000400
 8034a30:	40000800 	.word	0x40000800
 8034a34:	40000c00 	.word	0x40000c00
 8034a38:	40010400 	.word	0x40010400
 8034a3c:	40014000 	.word	0x40014000
 8034a40:	40014400 	.word	0x40014400
 8034a44:	40014800 	.word	0x40014800

08034a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8034a48:	b480      	push	{r7}
 8034a4a:	b087      	sub	sp, #28
 8034a4c:	af00      	add	r7, sp, #0
 8034a4e:	60f8      	str	r0, [r7, #12]
 8034a50:	60b9      	str	r1, [r7, #8]
 8034a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8034a54:	68fb      	ldr	r3, [r7, #12]
 8034a56:	6a1b      	ldr	r3, [r3, #32]
 8034a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8034a5a:	68fb      	ldr	r3, [r7, #12]
 8034a5c:	6a1b      	ldr	r3, [r3, #32]
 8034a5e:	f023 0201 	bic.w	r2, r3, #1
 8034a62:	68fb      	ldr	r3, [r7, #12]
 8034a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034a66:	68fb      	ldr	r3, [r7, #12]
 8034a68:	699b      	ldr	r3, [r3, #24]
 8034a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8034a6c:	693b      	ldr	r3, [r7, #16]
 8034a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8034a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8034a74:	687b      	ldr	r3, [r7, #4]
 8034a76:	011b      	lsls	r3, r3, #4
 8034a78:	693a      	ldr	r2, [r7, #16]
 8034a7a:	4313      	orrs	r3, r2
 8034a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8034a7e:	697b      	ldr	r3, [r7, #20]
 8034a80:	f023 030a 	bic.w	r3, r3, #10
 8034a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8034a86:	697a      	ldr	r2, [r7, #20]
 8034a88:	68bb      	ldr	r3, [r7, #8]
 8034a8a:	4313      	orrs	r3, r2
 8034a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8034a8e:	68fb      	ldr	r3, [r7, #12]
 8034a90:	693a      	ldr	r2, [r7, #16]
 8034a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034a94:	68fb      	ldr	r3, [r7, #12]
 8034a96:	697a      	ldr	r2, [r7, #20]
 8034a98:	621a      	str	r2, [r3, #32]
}
 8034a9a:	bf00      	nop
 8034a9c:	371c      	adds	r7, #28
 8034a9e:	46bd      	mov	sp, r7
 8034aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034aa4:	4770      	bx	lr

08034aa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8034aa6:	b480      	push	{r7}
 8034aa8:	b087      	sub	sp, #28
 8034aaa:	af00      	add	r7, sp, #0
 8034aac:	60f8      	str	r0, [r7, #12]
 8034aae:	60b9      	str	r1, [r7, #8]
 8034ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8034ab2:	68fb      	ldr	r3, [r7, #12]
 8034ab4:	6a1b      	ldr	r3, [r3, #32]
 8034ab6:	f023 0210 	bic.w	r2, r3, #16
 8034aba:	68fb      	ldr	r3, [r7, #12]
 8034abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034abe:	68fb      	ldr	r3, [r7, #12]
 8034ac0:	699b      	ldr	r3, [r3, #24]
 8034ac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8034ac4:	68fb      	ldr	r3, [r7, #12]
 8034ac6:	6a1b      	ldr	r3, [r3, #32]
 8034ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8034aca:	697b      	ldr	r3, [r7, #20]
 8034acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8034ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8034ad2:	687b      	ldr	r3, [r7, #4]
 8034ad4:	031b      	lsls	r3, r3, #12
 8034ad6:	697a      	ldr	r2, [r7, #20]
 8034ad8:	4313      	orrs	r3, r2
 8034ada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8034adc:	693b      	ldr	r3, [r7, #16]
 8034ade:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8034ae2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8034ae4:	68bb      	ldr	r3, [r7, #8]
 8034ae6:	011b      	lsls	r3, r3, #4
 8034ae8:	693a      	ldr	r2, [r7, #16]
 8034aea:	4313      	orrs	r3, r2
 8034aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8034aee:	68fb      	ldr	r3, [r7, #12]
 8034af0:	697a      	ldr	r2, [r7, #20]
 8034af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034af4:	68fb      	ldr	r3, [r7, #12]
 8034af6:	693a      	ldr	r2, [r7, #16]
 8034af8:	621a      	str	r2, [r3, #32]
}
 8034afa:	bf00      	nop
 8034afc:	371c      	adds	r7, #28
 8034afe:	46bd      	mov	sp, r7
 8034b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b04:	4770      	bx	lr
	...

08034b08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8034b08:	b480      	push	{r7}
 8034b0a:	b085      	sub	sp, #20
 8034b0c:	af00      	add	r7, sp, #0
 8034b0e:	6078      	str	r0, [r7, #4]
 8034b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8034b12:	687b      	ldr	r3, [r7, #4]
 8034b14:	689b      	ldr	r3, [r3, #8]
 8034b16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8034b18:	68fa      	ldr	r2, [r7, #12]
 8034b1a:	4b09      	ldr	r3, [pc, #36]	; (8034b40 <TIM_ITRx_SetConfig+0x38>)
 8034b1c:	4013      	ands	r3, r2
 8034b1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8034b20:	683a      	ldr	r2, [r7, #0]
 8034b22:	68fb      	ldr	r3, [r7, #12]
 8034b24:	4313      	orrs	r3, r2
 8034b26:	f043 0307 	orr.w	r3, r3, #7
 8034b2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8034b2c:	687b      	ldr	r3, [r7, #4]
 8034b2e:	68fa      	ldr	r2, [r7, #12]
 8034b30:	609a      	str	r2, [r3, #8]
}
 8034b32:	bf00      	nop
 8034b34:	3714      	adds	r7, #20
 8034b36:	46bd      	mov	sp, r7
 8034b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b3c:	4770      	bx	lr
 8034b3e:	bf00      	nop
 8034b40:	ffcfff8f 	.word	0xffcfff8f

08034b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8034b44:	b480      	push	{r7}
 8034b46:	b087      	sub	sp, #28
 8034b48:	af00      	add	r7, sp, #0
 8034b4a:	60f8      	str	r0, [r7, #12]
 8034b4c:	60b9      	str	r1, [r7, #8]
 8034b4e:	607a      	str	r2, [r7, #4]
 8034b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8034b52:	68fb      	ldr	r3, [r7, #12]
 8034b54:	689b      	ldr	r3, [r3, #8]
 8034b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8034b58:	697b      	ldr	r3, [r7, #20]
 8034b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8034b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8034b60:	683b      	ldr	r3, [r7, #0]
 8034b62:	021a      	lsls	r2, r3, #8
 8034b64:	687b      	ldr	r3, [r7, #4]
 8034b66:	431a      	orrs	r2, r3
 8034b68:	68bb      	ldr	r3, [r7, #8]
 8034b6a:	4313      	orrs	r3, r2
 8034b6c:	697a      	ldr	r2, [r7, #20]
 8034b6e:	4313      	orrs	r3, r2
 8034b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8034b72:	68fb      	ldr	r3, [r7, #12]
 8034b74:	697a      	ldr	r2, [r7, #20]
 8034b76:	609a      	str	r2, [r3, #8]
}
 8034b78:	bf00      	nop
 8034b7a:	371c      	adds	r7, #28
 8034b7c:	46bd      	mov	sp, r7
 8034b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b82:	4770      	bx	lr

08034b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8034b84:	b480      	push	{r7}
 8034b86:	b085      	sub	sp, #20
 8034b88:	af00      	add	r7, sp, #0
 8034b8a:	6078      	str	r0, [r7, #4]
 8034b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8034b8e:	687b      	ldr	r3, [r7, #4]
 8034b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8034b94:	2b01      	cmp	r3, #1
 8034b96:	d101      	bne.n	8034b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8034b98:	2302      	movs	r3, #2
 8034b9a:	e06d      	b.n	8034c78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8034b9c:	687b      	ldr	r3, [r7, #4]
 8034b9e:	2201      	movs	r2, #1
 8034ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8034ba4:	687b      	ldr	r3, [r7, #4]
 8034ba6:	2202      	movs	r2, #2
 8034ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8034bac:	687b      	ldr	r3, [r7, #4]
 8034bae:	681b      	ldr	r3, [r3, #0]
 8034bb0:	685b      	ldr	r3, [r3, #4]
 8034bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8034bb4:	687b      	ldr	r3, [r7, #4]
 8034bb6:	681b      	ldr	r3, [r3, #0]
 8034bb8:	689b      	ldr	r3, [r3, #8]
 8034bba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8034bbc:	687b      	ldr	r3, [r7, #4]
 8034bbe:	681b      	ldr	r3, [r3, #0]
 8034bc0:	4a30      	ldr	r2, [pc, #192]	; (8034c84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8034bc2:	4293      	cmp	r3, r2
 8034bc4:	d004      	beq.n	8034bd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8034bc6:	687b      	ldr	r3, [r7, #4]
 8034bc8:	681b      	ldr	r3, [r3, #0]
 8034bca:	4a2f      	ldr	r2, [pc, #188]	; (8034c88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8034bcc:	4293      	cmp	r3, r2
 8034bce:	d108      	bne.n	8034be2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8034bd0:	68fb      	ldr	r3, [r7, #12]
 8034bd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8034bd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8034bd8:	683b      	ldr	r3, [r7, #0]
 8034bda:	685b      	ldr	r3, [r3, #4]
 8034bdc:	68fa      	ldr	r2, [r7, #12]
 8034bde:	4313      	orrs	r3, r2
 8034be0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8034be2:	68fb      	ldr	r3, [r7, #12]
 8034be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8034be8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8034bea:	683b      	ldr	r3, [r7, #0]
 8034bec:	681b      	ldr	r3, [r3, #0]
 8034bee:	68fa      	ldr	r2, [r7, #12]
 8034bf0:	4313      	orrs	r3, r2
 8034bf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8034bf4:	687b      	ldr	r3, [r7, #4]
 8034bf6:	681b      	ldr	r3, [r3, #0]
 8034bf8:	68fa      	ldr	r2, [r7, #12]
 8034bfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8034bfc:	687b      	ldr	r3, [r7, #4]
 8034bfe:	681b      	ldr	r3, [r3, #0]
 8034c00:	4a20      	ldr	r2, [pc, #128]	; (8034c84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8034c02:	4293      	cmp	r3, r2
 8034c04:	d022      	beq.n	8034c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034c06:	687b      	ldr	r3, [r7, #4]
 8034c08:	681b      	ldr	r3, [r3, #0]
 8034c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034c0e:	d01d      	beq.n	8034c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034c10:	687b      	ldr	r3, [r7, #4]
 8034c12:	681b      	ldr	r3, [r3, #0]
 8034c14:	4a1d      	ldr	r2, [pc, #116]	; (8034c8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8034c16:	4293      	cmp	r3, r2
 8034c18:	d018      	beq.n	8034c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034c1a:	687b      	ldr	r3, [r7, #4]
 8034c1c:	681b      	ldr	r3, [r3, #0]
 8034c1e:	4a1c      	ldr	r2, [pc, #112]	; (8034c90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8034c20:	4293      	cmp	r3, r2
 8034c22:	d013      	beq.n	8034c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034c24:	687b      	ldr	r3, [r7, #4]
 8034c26:	681b      	ldr	r3, [r3, #0]
 8034c28:	4a1a      	ldr	r2, [pc, #104]	; (8034c94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8034c2a:	4293      	cmp	r3, r2
 8034c2c:	d00e      	beq.n	8034c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034c2e:	687b      	ldr	r3, [r7, #4]
 8034c30:	681b      	ldr	r3, [r3, #0]
 8034c32:	4a15      	ldr	r2, [pc, #84]	; (8034c88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8034c34:	4293      	cmp	r3, r2
 8034c36:	d009      	beq.n	8034c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034c38:	687b      	ldr	r3, [r7, #4]
 8034c3a:	681b      	ldr	r3, [r3, #0]
 8034c3c:	4a16      	ldr	r2, [pc, #88]	; (8034c98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8034c3e:	4293      	cmp	r3, r2
 8034c40:	d004      	beq.n	8034c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034c42:	687b      	ldr	r3, [r7, #4]
 8034c44:	681b      	ldr	r3, [r3, #0]
 8034c46:	4a15      	ldr	r2, [pc, #84]	; (8034c9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8034c48:	4293      	cmp	r3, r2
 8034c4a:	d10c      	bne.n	8034c66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8034c4c:	68bb      	ldr	r3, [r7, #8]
 8034c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8034c52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8034c54:	683b      	ldr	r3, [r7, #0]
 8034c56:	689b      	ldr	r3, [r3, #8]
 8034c58:	68ba      	ldr	r2, [r7, #8]
 8034c5a:	4313      	orrs	r3, r2
 8034c5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8034c5e:	687b      	ldr	r3, [r7, #4]
 8034c60:	681b      	ldr	r3, [r3, #0]
 8034c62:	68ba      	ldr	r2, [r7, #8]
 8034c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8034c66:	687b      	ldr	r3, [r7, #4]
 8034c68:	2201      	movs	r2, #1
 8034c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8034c6e:	687b      	ldr	r3, [r7, #4]
 8034c70:	2200      	movs	r2, #0
 8034c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8034c76:	2300      	movs	r3, #0
}
 8034c78:	4618      	mov	r0, r3
 8034c7a:	3714      	adds	r7, #20
 8034c7c:	46bd      	mov	sp, r7
 8034c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034c82:	4770      	bx	lr
 8034c84:	40010000 	.word	0x40010000
 8034c88:	40010400 	.word	0x40010400
 8034c8c:	40000400 	.word	0x40000400
 8034c90:	40000800 	.word	0x40000800
 8034c94:	40000c00 	.word	0x40000c00
 8034c98:	40001800 	.word	0x40001800
 8034c9c:	40014000 	.word	0x40014000

08034ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8034ca0:	b480      	push	{r7}
 8034ca2:	b083      	sub	sp, #12
 8034ca4:	af00      	add	r7, sp, #0
 8034ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8034ca8:	bf00      	nop
 8034caa:	370c      	adds	r7, #12
 8034cac:	46bd      	mov	sp, r7
 8034cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034cb2:	4770      	bx	lr

08034cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8034cb4:	b480      	push	{r7}
 8034cb6:	b083      	sub	sp, #12
 8034cb8:	af00      	add	r7, sp, #0
 8034cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8034cbc:	bf00      	nop
 8034cbe:	370c      	adds	r7, #12
 8034cc0:	46bd      	mov	sp, r7
 8034cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034cc6:	4770      	bx	lr

08034cc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8034cc8:	b480      	push	{r7}
 8034cca:	b083      	sub	sp, #12
 8034ccc:	af00      	add	r7, sp, #0
 8034cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8034cd0:	bf00      	nop
 8034cd2:	370c      	adds	r7, #12
 8034cd4:	46bd      	mov	sp, r7
 8034cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034cda:	4770      	bx	lr

08034cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8034cdc:	b580      	push	{r7, lr}
 8034cde:	b082      	sub	sp, #8
 8034ce0:	af00      	add	r7, sp, #0
 8034ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8034ce4:	687b      	ldr	r3, [r7, #4]
 8034ce6:	2b00      	cmp	r3, #0
 8034ce8:	d101      	bne.n	8034cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8034cea:	2301      	movs	r3, #1
 8034cec:	e042      	b.n	8034d74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8034cee:	687b      	ldr	r3, [r7, #4]
 8034cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034cf4:	2b00      	cmp	r3, #0
 8034cf6:	d106      	bne.n	8034d06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8034cf8:	687b      	ldr	r3, [r7, #4]
 8034cfa:	2200      	movs	r2, #0
 8034cfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8034d00:	6878      	ldr	r0, [r7, #4]
 8034d02:	f7f5 fc65 	bl	802a5d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8034d06:	687b      	ldr	r3, [r7, #4]
 8034d08:	2224      	movs	r2, #36	; 0x24
 8034d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8034d0e:	687b      	ldr	r3, [r7, #4]
 8034d10:	681b      	ldr	r3, [r3, #0]
 8034d12:	681a      	ldr	r2, [r3, #0]
 8034d14:	687b      	ldr	r3, [r7, #4]
 8034d16:	681b      	ldr	r3, [r3, #0]
 8034d18:	f022 0201 	bic.w	r2, r2, #1
 8034d1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8034d1e:	6878      	ldr	r0, [r7, #4]
 8034d20:	f000 fdb2 	bl	8035888 <UART_SetConfig>
 8034d24:	4603      	mov	r3, r0
 8034d26:	2b01      	cmp	r3, #1
 8034d28:	d101      	bne.n	8034d2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8034d2a:	2301      	movs	r3, #1
 8034d2c:	e022      	b.n	8034d74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8034d2e:	687b      	ldr	r3, [r7, #4]
 8034d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034d32:	2b00      	cmp	r3, #0
 8034d34:	d002      	beq.n	8034d3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8034d36:	6878      	ldr	r0, [r7, #4]
 8034d38:	f001 fb0e 	bl	8036358 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8034d3c:	687b      	ldr	r3, [r7, #4]
 8034d3e:	681b      	ldr	r3, [r3, #0]
 8034d40:	685a      	ldr	r2, [r3, #4]
 8034d42:	687b      	ldr	r3, [r7, #4]
 8034d44:	681b      	ldr	r3, [r3, #0]
 8034d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8034d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8034d4c:	687b      	ldr	r3, [r7, #4]
 8034d4e:	681b      	ldr	r3, [r3, #0]
 8034d50:	689a      	ldr	r2, [r3, #8]
 8034d52:	687b      	ldr	r3, [r7, #4]
 8034d54:	681b      	ldr	r3, [r3, #0]
 8034d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8034d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8034d5c:	687b      	ldr	r3, [r7, #4]
 8034d5e:	681b      	ldr	r3, [r3, #0]
 8034d60:	681a      	ldr	r2, [r3, #0]
 8034d62:	687b      	ldr	r3, [r7, #4]
 8034d64:	681b      	ldr	r3, [r3, #0]
 8034d66:	f042 0201 	orr.w	r2, r2, #1
 8034d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8034d6c:	6878      	ldr	r0, [r7, #4]
 8034d6e:	f001 fb95 	bl	803649c <UART_CheckIdleState>
 8034d72:	4603      	mov	r3, r0
}
 8034d74:	4618      	mov	r0, r3
 8034d76:	3708      	adds	r7, #8
 8034d78:	46bd      	mov	sp, r7
 8034d7a:	bd80      	pop	{r7, pc}

08034d7c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8034d7c:	b580      	push	{r7, lr}
 8034d7e:	b08a      	sub	sp, #40	; 0x28
 8034d80:	af02      	add	r7, sp, #8
 8034d82:	60f8      	str	r0, [r7, #12]
 8034d84:	60b9      	str	r1, [r7, #8]
 8034d86:	603b      	str	r3, [r7, #0]
 8034d88:	4613      	mov	r3, r2
 8034d8a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8034d8c:	68fb      	ldr	r3, [r7, #12]
 8034d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8034d92:	2b20      	cmp	r3, #32
 8034d94:	f040 80c0 	bne.w	8034f18 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8034d98:	68bb      	ldr	r3, [r7, #8]
 8034d9a:	2b00      	cmp	r3, #0
 8034d9c:	d002      	beq.n	8034da4 <HAL_UART_Receive+0x28>
 8034d9e:	88fb      	ldrh	r3, [r7, #6]
 8034da0:	2b00      	cmp	r3, #0
 8034da2:	d101      	bne.n	8034da8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8034da4:	2301      	movs	r3, #1
 8034da6:	e0b8      	b.n	8034f1a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8034da8:	68fb      	ldr	r3, [r7, #12]
 8034daa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8034dae:	2b01      	cmp	r3, #1
 8034db0:	d101      	bne.n	8034db6 <HAL_UART_Receive+0x3a>
 8034db2:	2302      	movs	r3, #2
 8034db4:	e0b1      	b.n	8034f1a <HAL_UART_Receive+0x19e>
 8034db6:	68fb      	ldr	r3, [r7, #12]
 8034db8:	2201      	movs	r2, #1
 8034dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8034dbe:	68fb      	ldr	r3, [r7, #12]
 8034dc0:	2200      	movs	r2, #0
 8034dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8034dc6:	68fb      	ldr	r3, [r7, #12]
 8034dc8:	2222      	movs	r2, #34	; 0x22
 8034dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8034dce:	68fb      	ldr	r3, [r7, #12]
 8034dd0:	2200      	movs	r2, #0
 8034dd2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8034dd4:	f7f5 fe58 	bl	802aa88 <HAL_GetTick>
 8034dd8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8034dda:	68fb      	ldr	r3, [r7, #12]
 8034ddc:	88fa      	ldrh	r2, [r7, #6]
 8034dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8034de2:	68fb      	ldr	r3, [r7, #12]
 8034de4:	88fa      	ldrh	r2, [r7, #6]
 8034de6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8034dea:	68fb      	ldr	r3, [r7, #12]
 8034dec:	689b      	ldr	r3, [r3, #8]
 8034dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034df2:	d10e      	bne.n	8034e12 <HAL_UART_Receive+0x96>
 8034df4:	68fb      	ldr	r3, [r7, #12]
 8034df6:	691b      	ldr	r3, [r3, #16]
 8034df8:	2b00      	cmp	r3, #0
 8034dfa:	d105      	bne.n	8034e08 <HAL_UART_Receive+0x8c>
 8034dfc:	68fb      	ldr	r3, [r7, #12]
 8034dfe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8034e02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034e06:	e02d      	b.n	8034e64 <HAL_UART_Receive+0xe8>
 8034e08:	68fb      	ldr	r3, [r7, #12]
 8034e0a:	22ff      	movs	r2, #255	; 0xff
 8034e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034e10:	e028      	b.n	8034e64 <HAL_UART_Receive+0xe8>
 8034e12:	68fb      	ldr	r3, [r7, #12]
 8034e14:	689b      	ldr	r3, [r3, #8]
 8034e16:	2b00      	cmp	r3, #0
 8034e18:	d10d      	bne.n	8034e36 <HAL_UART_Receive+0xba>
 8034e1a:	68fb      	ldr	r3, [r7, #12]
 8034e1c:	691b      	ldr	r3, [r3, #16]
 8034e1e:	2b00      	cmp	r3, #0
 8034e20:	d104      	bne.n	8034e2c <HAL_UART_Receive+0xb0>
 8034e22:	68fb      	ldr	r3, [r7, #12]
 8034e24:	22ff      	movs	r2, #255	; 0xff
 8034e26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034e2a:	e01b      	b.n	8034e64 <HAL_UART_Receive+0xe8>
 8034e2c:	68fb      	ldr	r3, [r7, #12]
 8034e2e:	227f      	movs	r2, #127	; 0x7f
 8034e30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034e34:	e016      	b.n	8034e64 <HAL_UART_Receive+0xe8>
 8034e36:	68fb      	ldr	r3, [r7, #12]
 8034e38:	689b      	ldr	r3, [r3, #8]
 8034e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8034e3e:	d10d      	bne.n	8034e5c <HAL_UART_Receive+0xe0>
 8034e40:	68fb      	ldr	r3, [r7, #12]
 8034e42:	691b      	ldr	r3, [r3, #16]
 8034e44:	2b00      	cmp	r3, #0
 8034e46:	d104      	bne.n	8034e52 <HAL_UART_Receive+0xd6>
 8034e48:	68fb      	ldr	r3, [r7, #12]
 8034e4a:	227f      	movs	r2, #127	; 0x7f
 8034e4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034e50:	e008      	b.n	8034e64 <HAL_UART_Receive+0xe8>
 8034e52:	68fb      	ldr	r3, [r7, #12]
 8034e54:	223f      	movs	r2, #63	; 0x3f
 8034e56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8034e5a:	e003      	b.n	8034e64 <HAL_UART_Receive+0xe8>
 8034e5c:	68fb      	ldr	r3, [r7, #12]
 8034e5e:	2200      	movs	r2, #0
 8034e60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8034e64:	68fb      	ldr	r3, [r7, #12]
 8034e66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8034e6a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8034e6c:	68fb      	ldr	r3, [r7, #12]
 8034e6e:	689b      	ldr	r3, [r3, #8]
 8034e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034e74:	d108      	bne.n	8034e88 <HAL_UART_Receive+0x10c>
 8034e76:	68fb      	ldr	r3, [r7, #12]
 8034e78:	691b      	ldr	r3, [r3, #16]
 8034e7a:	2b00      	cmp	r3, #0
 8034e7c:	d104      	bne.n	8034e88 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8034e7e:	2300      	movs	r3, #0
 8034e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8034e82:	68bb      	ldr	r3, [r7, #8]
 8034e84:	61bb      	str	r3, [r7, #24]
 8034e86:	e003      	b.n	8034e90 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8034e88:	68bb      	ldr	r3, [r7, #8]
 8034e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8034e8c:	2300      	movs	r3, #0
 8034e8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8034e90:	68fb      	ldr	r3, [r7, #12]
 8034e92:	2200      	movs	r2, #0
 8034e94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8034e98:	e032      	b.n	8034f00 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8034e9a:	683b      	ldr	r3, [r7, #0]
 8034e9c:	9300      	str	r3, [sp, #0]
 8034e9e:	697b      	ldr	r3, [r7, #20]
 8034ea0:	2200      	movs	r2, #0
 8034ea2:	2120      	movs	r1, #32
 8034ea4:	68f8      	ldr	r0, [r7, #12]
 8034ea6:	f001 fb44 	bl	8036532 <UART_WaitOnFlagUntilTimeout>
 8034eaa:	4603      	mov	r3, r0
 8034eac:	2b00      	cmp	r3, #0
 8034eae:	d001      	beq.n	8034eb4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8034eb0:	2303      	movs	r3, #3
 8034eb2:	e032      	b.n	8034f1a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8034eb4:	69fb      	ldr	r3, [r7, #28]
 8034eb6:	2b00      	cmp	r3, #0
 8034eb8:	d10c      	bne.n	8034ed4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8034eba:	68fb      	ldr	r3, [r7, #12]
 8034ebc:	681b      	ldr	r3, [r3, #0]
 8034ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034ec0:	b29a      	uxth	r2, r3
 8034ec2:	8a7b      	ldrh	r3, [r7, #18]
 8034ec4:	4013      	ands	r3, r2
 8034ec6:	b29a      	uxth	r2, r3
 8034ec8:	69bb      	ldr	r3, [r7, #24]
 8034eca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8034ecc:	69bb      	ldr	r3, [r7, #24]
 8034ece:	3302      	adds	r3, #2
 8034ed0:	61bb      	str	r3, [r7, #24]
 8034ed2:	e00c      	b.n	8034eee <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8034ed4:	68fb      	ldr	r3, [r7, #12]
 8034ed6:	681b      	ldr	r3, [r3, #0]
 8034ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034eda:	b2da      	uxtb	r2, r3
 8034edc:	8a7b      	ldrh	r3, [r7, #18]
 8034ede:	b2db      	uxtb	r3, r3
 8034ee0:	4013      	ands	r3, r2
 8034ee2:	b2da      	uxtb	r2, r3
 8034ee4:	69fb      	ldr	r3, [r7, #28]
 8034ee6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8034ee8:	69fb      	ldr	r3, [r7, #28]
 8034eea:	3301      	adds	r3, #1
 8034eec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8034eee:	68fb      	ldr	r3, [r7, #12]
 8034ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8034ef4:	b29b      	uxth	r3, r3
 8034ef6:	3b01      	subs	r3, #1
 8034ef8:	b29a      	uxth	r2, r3
 8034efa:	68fb      	ldr	r3, [r7, #12]
 8034efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8034f00:	68fb      	ldr	r3, [r7, #12]
 8034f02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8034f06:	b29b      	uxth	r3, r3
 8034f08:	2b00      	cmp	r3, #0
 8034f0a:	d1c6      	bne.n	8034e9a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8034f0c:	68fb      	ldr	r3, [r7, #12]
 8034f0e:	2220      	movs	r2, #32
 8034f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8034f14:	2300      	movs	r3, #0
 8034f16:	e000      	b.n	8034f1a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8034f18:	2302      	movs	r3, #2
  }
}
 8034f1a:	4618      	mov	r0, r3
 8034f1c:	3720      	adds	r7, #32
 8034f1e:	46bd      	mov	sp, r7
 8034f20:	bd80      	pop	{r7, pc}
	...

08034f24 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8034f24:	b480      	push	{r7}
 8034f26:	b091      	sub	sp, #68	; 0x44
 8034f28:	af00      	add	r7, sp, #0
 8034f2a:	60f8      	str	r0, [r7, #12]
 8034f2c:	60b9      	str	r1, [r7, #8]
 8034f2e:	4613      	mov	r3, r2
 8034f30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8034f32:	68fb      	ldr	r3, [r7, #12]
 8034f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034f38:	2b20      	cmp	r3, #32
 8034f3a:	f040 808c 	bne.w	8035056 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8034f3e:	68bb      	ldr	r3, [r7, #8]
 8034f40:	2b00      	cmp	r3, #0
 8034f42:	d002      	beq.n	8034f4a <HAL_UART_Transmit_IT+0x26>
 8034f44:	88fb      	ldrh	r3, [r7, #6]
 8034f46:	2b00      	cmp	r3, #0
 8034f48:	d101      	bne.n	8034f4e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8034f4a:	2301      	movs	r3, #1
 8034f4c:	e084      	b.n	8035058 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8034f4e:	68fb      	ldr	r3, [r7, #12]
 8034f50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8034f54:	2b01      	cmp	r3, #1
 8034f56:	d101      	bne.n	8034f5c <HAL_UART_Transmit_IT+0x38>
 8034f58:	2302      	movs	r3, #2
 8034f5a:	e07d      	b.n	8035058 <HAL_UART_Transmit_IT+0x134>
 8034f5c:	68fb      	ldr	r3, [r7, #12]
 8034f5e:	2201      	movs	r2, #1
 8034f60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8034f64:	68fb      	ldr	r3, [r7, #12]
 8034f66:	68ba      	ldr	r2, [r7, #8]
 8034f68:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8034f6a:	68fb      	ldr	r3, [r7, #12]
 8034f6c:	88fa      	ldrh	r2, [r7, #6]
 8034f6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8034f72:	68fb      	ldr	r3, [r7, #12]
 8034f74:	88fa      	ldrh	r2, [r7, #6]
 8034f76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8034f7a:	68fb      	ldr	r3, [r7, #12]
 8034f7c:	2200      	movs	r2, #0
 8034f7e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8034f80:	68fb      	ldr	r3, [r7, #12]
 8034f82:	2200      	movs	r2, #0
 8034f84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8034f88:	68fb      	ldr	r3, [r7, #12]
 8034f8a:	2221      	movs	r2, #33	; 0x21
 8034f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8034f90:	68fb      	ldr	r3, [r7, #12]
 8034f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8034f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8034f98:	d12e      	bne.n	8034ff8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8034f9a:	68fb      	ldr	r3, [r7, #12]
 8034f9c:	689b      	ldr	r3, [r3, #8]
 8034f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034fa2:	d107      	bne.n	8034fb4 <HAL_UART_Transmit_IT+0x90>
 8034fa4:	68fb      	ldr	r3, [r7, #12]
 8034fa6:	691b      	ldr	r3, [r3, #16]
 8034fa8:	2b00      	cmp	r3, #0
 8034faa:	d103      	bne.n	8034fb4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8034fac:	68fb      	ldr	r3, [r7, #12]
 8034fae:	4a2d      	ldr	r2, [pc, #180]	; (8035064 <HAL_UART_Transmit_IT+0x140>)
 8034fb0:	675a      	str	r2, [r3, #116]	; 0x74
 8034fb2:	e002      	b.n	8034fba <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8034fb4:	68fb      	ldr	r3, [r7, #12]
 8034fb6:	4a2c      	ldr	r2, [pc, #176]	; (8035068 <HAL_UART_Transmit_IT+0x144>)
 8034fb8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8034fba:	68fb      	ldr	r3, [r7, #12]
 8034fbc:	2200      	movs	r2, #0
 8034fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8034fc2:	68fb      	ldr	r3, [r7, #12]
 8034fc4:	681b      	ldr	r3, [r3, #0]
 8034fc6:	3308      	adds	r3, #8
 8034fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8034fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034fcc:	e853 3f00 	ldrex	r3, [r3]
 8034fd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8034fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034fd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8034fd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8034fda:	68fb      	ldr	r3, [r7, #12]
 8034fdc:	681b      	ldr	r3, [r3, #0]
 8034fde:	3308      	adds	r3, #8
 8034fe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8034fe2:	637a      	str	r2, [r7, #52]	; 0x34
 8034fe4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8034fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8034fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8034fea:	e841 2300 	strex	r3, r2, [r1]
 8034fee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8034ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034ff2:	2b00      	cmp	r3, #0
 8034ff4:	d1e5      	bne.n	8034fc2 <HAL_UART_Transmit_IT+0x9e>
 8034ff6:	e02c      	b.n	8035052 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8034ff8:	68fb      	ldr	r3, [r7, #12]
 8034ffa:	689b      	ldr	r3, [r3, #8]
 8034ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035000:	d107      	bne.n	8035012 <HAL_UART_Transmit_IT+0xee>
 8035002:	68fb      	ldr	r3, [r7, #12]
 8035004:	691b      	ldr	r3, [r3, #16]
 8035006:	2b00      	cmp	r3, #0
 8035008:	d103      	bne.n	8035012 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 803500a:	68fb      	ldr	r3, [r7, #12]
 803500c:	4a17      	ldr	r2, [pc, #92]	; (803506c <HAL_UART_Transmit_IT+0x148>)
 803500e:	675a      	str	r2, [r3, #116]	; 0x74
 8035010:	e002      	b.n	8035018 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8035012:	68fb      	ldr	r3, [r7, #12]
 8035014:	4a16      	ldr	r2, [pc, #88]	; (8035070 <HAL_UART_Transmit_IT+0x14c>)
 8035016:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8035018:	68fb      	ldr	r3, [r7, #12]
 803501a:	2200      	movs	r2, #0
 803501c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8035020:	68fb      	ldr	r3, [r7, #12]
 8035022:	681b      	ldr	r3, [r3, #0]
 8035024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035026:	697b      	ldr	r3, [r7, #20]
 8035028:	e853 3f00 	ldrex	r3, [r3]
 803502c:	613b      	str	r3, [r7, #16]
   return(result);
 803502e:	693b      	ldr	r3, [r7, #16]
 8035030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8035034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8035036:	68fb      	ldr	r3, [r7, #12]
 8035038:	681b      	ldr	r3, [r3, #0]
 803503a:	461a      	mov	r2, r3
 803503c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803503e:	623b      	str	r3, [r7, #32]
 8035040:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035042:	69f9      	ldr	r1, [r7, #28]
 8035044:	6a3a      	ldr	r2, [r7, #32]
 8035046:	e841 2300 	strex	r3, r2, [r1]
 803504a:	61bb      	str	r3, [r7, #24]
   return(result);
 803504c:	69bb      	ldr	r3, [r7, #24]
 803504e:	2b00      	cmp	r3, #0
 8035050:	d1e6      	bne.n	8035020 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8035052:	2300      	movs	r3, #0
 8035054:	e000      	b.n	8035058 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8035056:	2302      	movs	r3, #2
  }
}
 8035058:	4618      	mov	r0, r3
 803505a:	3744      	adds	r7, #68	; 0x44
 803505c:	46bd      	mov	sp, r7
 803505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035062:	4770      	bx	lr
 8035064:	08036c6b 	.word	0x08036c6b
 8035068:	08036b8b 	.word	0x08036b8b
 803506c:	08036ac9 	.word	0x08036ac9
 8035070:	08036a11 	.word	0x08036a11

08035074 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8035074:	b580      	push	{r7, lr}
 8035076:	b08a      	sub	sp, #40	; 0x28
 8035078:	af00      	add	r7, sp, #0
 803507a:	60f8      	str	r0, [r7, #12]
 803507c:	60b9      	str	r1, [r7, #8]
 803507e:	4613      	mov	r3, r2
 8035080:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8035082:	68fb      	ldr	r3, [r7, #12]
 8035084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8035088:	2b20      	cmp	r3, #32
 803508a:	d142      	bne.n	8035112 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 803508c:	68bb      	ldr	r3, [r7, #8]
 803508e:	2b00      	cmp	r3, #0
 8035090:	d002      	beq.n	8035098 <HAL_UART_Receive_IT+0x24>
 8035092:	88fb      	ldrh	r3, [r7, #6]
 8035094:	2b00      	cmp	r3, #0
 8035096:	d101      	bne.n	803509c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8035098:	2301      	movs	r3, #1
 803509a:	e03b      	b.n	8035114 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 803509c:	68fb      	ldr	r3, [r7, #12]
 803509e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80350a2:	2b01      	cmp	r3, #1
 80350a4:	d101      	bne.n	80350aa <HAL_UART_Receive_IT+0x36>
 80350a6:	2302      	movs	r3, #2
 80350a8:	e034      	b.n	8035114 <HAL_UART_Receive_IT+0xa0>
 80350aa:	68fb      	ldr	r3, [r7, #12]
 80350ac:	2201      	movs	r2, #1
 80350ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80350b2:	68fb      	ldr	r3, [r7, #12]
 80350b4:	2200      	movs	r2, #0
 80350b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80350b8:	68fb      	ldr	r3, [r7, #12]
 80350ba:	681b      	ldr	r3, [r3, #0]
 80350bc:	4a17      	ldr	r2, [pc, #92]	; (803511c <HAL_UART_Receive_IT+0xa8>)
 80350be:	4293      	cmp	r3, r2
 80350c0:	d01f      	beq.n	8035102 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80350c2:	68fb      	ldr	r3, [r7, #12]
 80350c4:	681b      	ldr	r3, [r3, #0]
 80350c6:	685b      	ldr	r3, [r3, #4]
 80350c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80350cc:	2b00      	cmp	r3, #0
 80350ce:	d018      	beq.n	8035102 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80350d0:	68fb      	ldr	r3, [r7, #12]
 80350d2:	681b      	ldr	r3, [r3, #0]
 80350d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80350d6:	697b      	ldr	r3, [r7, #20]
 80350d8:	e853 3f00 	ldrex	r3, [r3]
 80350dc:	613b      	str	r3, [r7, #16]
   return(result);
 80350de:	693b      	ldr	r3, [r7, #16]
 80350e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80350e4:	627b      	str	r3, [r7, #36]	; 0x24
 80350e6:	68fb      	ldr	r3, [r7, #12]
 80350e8:	681b      	ldr	r3, [r3, #0]
 80350ea:	461a      	mov	r2, r3
 80350ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80350ee:	623b      	str	r3, [r7, #32]
 80350f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80350f2:	69f9      	ldr	r1, [r7, #28]
 80350f4:	6a3a      	ldr	r2, [r7, #32]
 80350f6:	e841 2300 	strex	r3, r2, [r1]
 80350fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80350fc:	69bb      	ldr	r3, [r7, #24]
 80350fe:	2b00      	cmp	r3, #0
 8035100:	d1e6      	bne.n	80350d0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8035102:	88fb      	ldrh	r3, [r7, #6]
 8035104:	461a      	mov	r2, r3
 8035106:	68b9      	ldr	r1, [r7, #8]
 8035108:	68f8      	ldr	r0, [r7, #12]
 803510a:	f001 fadb 	bl	80366c4 <UART_Start_Receive_IT>
 803510e:	4603      	mov	r3, r0
 8035110:	e000      	b.n	8035114 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8035112:	2302      	movs	r3, #2
  }
}
 8035114:	4618      	mov	r0, r3
 8035116:	3728      	adds	r7, #40	; 0x28
 8035118:	46bd      	mov	sp, r7
 803511a:	bd80      	pop	{r7, pc}
 803511c:	58000c00 	.word	0x58000c00

08035120 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8035120:	b580      	push	{r7, lr}
 8035122:	b0ba      	sub	sp, #232	; 0xe8
 8035124:	af00      	add	r7, sp, #0
 8035126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8035128:	687b      	ldr	r3, [r7, #4]
 803512a:	681b      	ldr	r3, [r3, #0]
 803512c:	69db      	ldr	r3, [r3, #28]
 803512e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8035132:	687b      	ldr	r3, [r7, #4]
 8035134:	681b      	ldr	r3, [r3, #0]
 8035136:	681b      	ldr	r3, [r3, #0]
 8035138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 803513c:	687b      	ldr	r3, [r7, #4]
 803513e:	681b      	ldr	r3, [r3, #0]
 8035140:	689b      	ldr	r3, [r3, #8]
 8035142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8035146:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 803514a:	f640 030f 	movw	r3, #2063	; 0x80f
 803514e:	4013      	ands	r3, r2
 8035150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8035154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8035158:	2b00      	cmp	r3, #0
 803515a:	d11b      	bne.n	8035194 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 803515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035160:	f003 0320 	and.w	r3, r3, #32
 8035164:	2b00      	cmp	r3, #0
 8035166:	d015      	beq.n	8035194 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8035168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803516c:	f003 0320 	and.w	r3, r3, #32
 8035170:	2b00      	cmp	r3, #0
 8035172:	d105      	bne.n	8035180 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8035174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8035178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 803517c:	2b00      	cmp	r3, #0
 803517e:	d009      	beq.n	8035194 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8035180:	687b      	ldr	r3, [r7, #4]
 8035182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035184:	2b00      	cmp	r3, #0
 8035186:	f000 835a 	beq.w	803583e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 803518a:	687b      	ldr	r3, [r7, #4]
 803518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803518e:	6878      	ldr	r0, [r7, #4]
 8035190:	4798      	blx	r3
      }
      return;
 8035192:	e354      	b.n	803583e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8035194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8035198:	2b00      	cmp	r3, #0
 803519a:	f000 811f 	beq.w	80353dc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 803519e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80351a2:	4b8b      	ldr	r3, [pc, #556]	; (80353d0 <HAL_UART_IRQHandler+0x2b0>)
 80351a4:	4013      	ands	r3, r2
 80351a6:	2b00      	cmp	r3, #0
 80351a8:	d106      	bne.n	80351b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80351aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80351ae:	4b89      	ldr	r3, [pc, #548]	; (80353d4 <HAL_UART_IRQHandler+0x2b4>)
 80351b0:	4013      	ands	r3, r2
 80351b2:	2b00      	cmp	r3, #0
 80351b4:	f000 8112 	beq.w	80353dc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80351b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80351bc:	f003 0301 	and.w	r3, r3, #1
 80351c0:	2b00      	cmp	r3, #0
 80351c2:	d011      	beq.n	80351e8 <HAL_UART_IRQHandler+0xc8>
 80351c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80351c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80351cc:	2b00      	cmp	r3, #0
 80351ce:	d00b      	beq.n	80351e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80351d0:	687b      	ldr	r3, [r7, #4]
 80351d2:	681b      	ldr	r3, [r3, #0]
 80351d4:	2201      	movs	r2, #1
 80351d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80351d8:	687b      	ldr	r3, [r7, #4]
 80351da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80351de:	f043 0201 	orr.w	r2, r3, #1
 80351e2:	687b      	ldr	r3, [r7, #4]
 80351e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80351e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80351ec:	f003 0302 	and.w	r3, r3, #2
 80351f0:	2b00      	cmp	r3, #0
 80351f2:	d011      	beq.n	8035218 <HAL_UART_IRQHandler+0xf8>
 80351f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80351f8:	f003 0301 	and.w	r3, r3, #1
 80351fc:	2b00      	cmp	r3, #0
 80351fe:	d00b      	beq.n	8035218 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8035200:	687b      	ldr	r3, [r7, #4]
 8035202:	681b      	ldr	r3, [r3, #0]
 8035204:	2202      	movs	r2, #2
 8035206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8035208:	687b      	ldr	r3, [r7, #4]
 803520a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803520e:	f043 0204 	orr.w	r2, r3, #4
 8035212:	687b      	ldr	r3, [r7, #4]
 8035214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8035218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803521c:	f003 0304 	and.w	r3, r3, #4
 8035220:	2b00      	cmp	r3, #0
 8035222:	d011      	beq.n	8035248 <HAL_UART_IRQHandler+0x128>
 8035224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8035228:	f003 0301 	and.w	r3, r3, #1
 803522c:	2b00      	cmp	r3, #0
 803522e:	d00b      	beq.n	8035248 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8035230:	687b      	ldr	r3, [r7, #4]
 8035232:	681b      	ldr	r3, [r3, #0]
 8035234:	2204      	movs	r2, #4
 8035236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8035238:	687b      	ldr	r3, [r7, #4]
 803523a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803523e:	f043 0202 	orr.w	r2, r3, #2
 8035242:	687b      	ldr	r3, [r7, #4]
 8035244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8035248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803524c:	f003 0308 	and.w	r3, r3, #8
 8035250:	2b00      	cmp	r3, #0
 8035252:	d017      	beq.n	8035284 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8035254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035258:	f003 0320 	and.w	r3, r3, #32
 803525c:	2b00      	cmp	r3, #0
 803525e:	d105      	bne.n	803526c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8035260:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8035264:	4b5a      	ldr	r3, [pc, #360]	; (80353d0 <HAL_UART_IRQHandler+0x2b0>)
 8035266:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8035268:	2b00      	cmp	r3, #0
 803526a:	d00b      	beq.n	8035284 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 803526c:	687b      	ldr	r3, [r7, #4]
 803526e:	681b      	ldr	r3, [r3, #0]
 8035270:	2208      	movs	r2, #8
 8035272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8035274:	687b      	ldr	r3, [r7, #4]
 8035276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803527a:	f043 0208 	orr.w	r2, r3, #8
 803527e:	687b      	ldr	r3, [r7, #4]
 8035280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8035284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 803528c:	2b00      	cmp	r3, #0
 803528e:	d012      	beq.n	80352b6 <HAL_UART_IRQHandler+0x196>
 8035290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8035298:	2b00      	cmp	r3, #0
 803529a:	d00c      	beq.n	80352b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 803529c:	687b      	ldr	r3, [r7, #4]
 803529e:	681b      	ldr	r3, [r3, #0]
 80352a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80352a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80352a6:	687b      	ldr	r3, [r7, #4]
 80352a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80352ac:	f043 0220 	orr.w	r2, r3, #32
 80352b0:	687b      	ldr	r3, [r7, #4]
 80352b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80352b6:	687b      	ldr	r3, [r7, #4]
 80352b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80352bc:	2b00      	cmp	r3, #0
 80352be:	f000 82c0 	beq.w	8035842 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80352c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80352c6:	f003 0320 	and.w	r3, r3, #32
 80352ca:	2b00      	cmp	r3, #0
 80352cc:	d013      	beq.n	80352f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80352ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80352d2:	f003 0320 	and.w	r3, r3, #32
 80352d6:	2b00      	cmp	r3, #0
 80352d8:	d105      	bne.n	80352e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80352da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80352de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80352e2:	2b00      	cmp	r3, #0
 80352e4:	d007      	beq.n	80352f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80352e6:	687b      	ldr	r3, [r7, #4]
 80352e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80352ea:	2b00      	cmp	r3, #0
 80352ec:	d003      	beq.n	80352f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80352ee:	687b      	ldr	r3, [r7, #4]
 80352f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80352f2:	6878      	ldr	r0, [r7, #4]
 80352f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80352f6:	687b      	ldr	r3, [r7, #4]
 80352f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80352fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8035300:	687b      	ldr	r3, [r7, #4]
 8035302:	681b      	ldr	r3, [r3, #0]
 8035304:	689b      	ldr	r3, [r3, #8]
 8035306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803530a:	2b40      	cmp	r3, #64	; 0x40
 803530c:	d005      	beq.n	803531a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 803530e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8035312:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8035316:	2b00      	cmp	r3, #0
 8035318:	d04f      	beq.n	80353ba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 803531a:	6878      	ldr	r0, [r7, #4]
 803531c:	f001 fafc 	bl	8036918 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8035320:	687b      	ldr	r3, [r7, #4]
 8035322:	681b      	ldr	r3, [r3, #0]
 8035324:	689b      	ldr	r3, [r3, #8]
 8035326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803532a:	2b40      	cmp	r3, #64	; 0x40
 803532c:	d141      	bne.n	80353b2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 803532e:	687b      	ldr	r3, [r7, #4]
 8035330:	681b      	ldr	r3, [r3, #0]
 8035332:	3308      	adds	r3, #8
 8035334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803533c:	e853 3f00 	ldrex	r3, [r3]
 8035340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8035344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8035348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803534c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8035350:	687b      	ldr	r3, [r7, #4]
 8035352:	681b      	ldr	r3, [r3, #0]
 8035354:	3308      	adds	r3, #8
 8035356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 803535a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 803535e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8035366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 803536a:	e841 2300 	strex	r3, r2, [r1]
 803536e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8035372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8035376:	2b00      	cmp	r3, #0
 8035378:	d1d9      	bne.n	803532e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 803537a:	687b      	ldr	r3, [r7, #4]
 803537c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803537e:	2b00      	cmp	r3, #0
 8035380:	d013      	beq.n	80353aa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8035382:	687b      	ldr	r3, [r7, #4]
 8035384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035386:	4a14      	ldr	r2, [pc, #80]	; (80353d8 <HAL_UART_IRQHandler+0x2b8>)
 8035388:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 803538a:	687b      	ldr	r3, [r7, #4]
 803538c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803538e:	4618      	mov	r0, r3
 8035390:	f7f7 f95a 	bl	802c648 <HAL_DMA_Abort_IT>
 8035394:	4603      	mov	r3, r0
 8035396:	2b00      	cmp	r3, #0
 8035398:	d017      	beq.n	80353ca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 803539a:	687b      	ldr	r3, [r7, #4]
 803539c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803539e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80353a0:	687a      	ldr	r2, [r7, #4]
 80353a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80353a4:	4610      	mov	r0, r2
 80353a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80353a8:	e00f      	b.n	80353ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80353aa:	6878      	ldr	r0, [r7, #4]
 80353ac:	f000 fa56 	bl	803585c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80353b0:	e00b      	b.n	80353ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80353b2:	6878      	ldr	r0, [r7, #4]
 80353b4:	f000 fa52 	bl	803585c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80353b8:	e007      	b.n	80353ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80353ba:	6878      	ldr	r0, [r7, #4]
 80353bc:	f000 fa4e 	bl	803585c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80353c0:	687b      	ldr	r3, [r7, #4]
 80353c2:	2200      	movs	r2, #0
 80353c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80353c8:	e23b      	b.n	8035842 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80353ca:	bf00      	nop
    return;
 80353cc:	e239      	b.n	8035842 <HAL_UART_IRQHandler+0x722>
 80353ce:	bf00      	nop
 80353d0:	10000001 	.word	0x10000001
 80353d4:	04000120 	.word	0x04000120
 80353d8:	080369e5 	.word	0x080369e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80353dc:	687b      	ldr	r3, [r7, #4]
 80353de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80353e0:	2b01      	cmp	r3, #1
 80353e2:	f040 81ce 	bne.w	8035782 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80353e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80353ea:	f003 0310 	and.w	r3, r3, #16
 80353ee:	2b00      	cmp	r3, #0
 80353f0:	f000 81c7 	beq.w	8035782 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80353f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80353f8:	f003 0310 	and.w	r3, r3, #16
 80353fc:	2b00      	cmp	r3, #0
 80353fe:	f000 81c0 	beq.w	8035782 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8035402:	687b      	ldr	r3, [r7, #4]
 8035404:	681b      	ldr	r3, [r3, #0]
 8035406:	2210      	movs	r2, #16
 8035408:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 803540a:	687b      	ldr	r3, [r7, #4]
 803540c:	681b      	ldr	r3, [r3, #0]
 803540e:	689b      	ldr	r3, [r3, #8]
 8035410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035414:	2b40      	cmp	r3, #64	; 0x40
 8035416:	f040 813b 	bne.w	8035690 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 803541a:	687b      	ldr	r3, [r7, #4]
 803541c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803541e:	681b      	ldr	r3, [r3, #0]
 8035420:	4a8b      	ldr	r2, [pc, #556]	; (8035650 <HAL_UART_IRQHandler+0x530>)
 8035422:	4293      	cmp	r3, r2
 8035424:	d059      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 8035426:	687b      	ldr	r3, [r7, #4]
 8035428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803542a:	681b      	ldr	r3, [r3, #0]
 803542c:	4a89      	ldr	r2, [pc, #548]	; (8035654 <HAL_UART_IRQHandler+0x534>)
 803542e:	4293      	cmp	r3, r2
 8035430:	d053      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 8035432:	687b      	ldr	r3, [r7, #4]
 8035434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035436:	681b      	ldr	r3, [r3, #0]
 8035438:	4a87      	ldr	r2, [pc, #540]	; (8035658 <HAL_UART_IRQHandler+0x538>)
 803543a:	4293      	cmp	r3, r2
 803543c:	d04d      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 803543e:	687b      	ldr	r3, [r7, #4]
 8035440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035442:	681b      	ldr	r3, [r3, #0]
 8035444:	4a85      	ldr	r2, [pc, #532]	; (803565c <HAL_UART_IRQHandler+0x53c>)
 8035446:	4293      	cmp	r3, r2
 8035448:	d047      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 803544a:	687b      	ldr	r3, [r7, #4]
 803544c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803544e:	681b      	ldr	r3, [r3, #0]
 8035450:	4a83      	ldr	r2, [pc, #524]	; (8035660 <HAL_UART_IRQHandler+0x540>)
 8035452:	4293      	cmp	r3, r2
 8035454:	d041      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 8035456:	687b      	ldr	r3, [r7, #4]
 8035458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803545a:	681b      	ldr	r3, [r3, #0]
 803545c:	4a81      	ldr	r2, [pc, #516]	; (8035664 <HAL_UART_IRQHandler+0x544>)
 803545e:	4293      	cmp	r3, r2
 8035460:	d03b      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 8035462:	687b      	ldr	r3, [r7, #4]
 8035464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035466:	681b      	ldr	r3, [r3, #0]
 8035468:	4a7f      	ldr	r2, [pc, #508]	; (8035668 <HAL_UART_IRQHandler+0x548>)
 803546a:	4293      	cmp	r3, r2
 803546c:	d035      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 803546e:	687b      	ldr	r3, [r7, #4]
 8035470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035472:	681b      	ldr	r3, [r3, #0]
 8035474:	4a7d      	ldr	r2, [pc, #500]	; (803566c <HAL_UART_IRQHandler+0x54c>)
 8035476:	4293      	cmp	r3, r2
 8035478:	d02f      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 803547a:	687b      	ldr	r3, [r7, #4]
 803547c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803547e:	681b      	ldr	r3, [r3, #0]
 8035480:	4a7b      	ldr	r2, [pc, #492]	; (8035670 <HAL_UART_IRQHandler+0x550>)
 8035482:	4293      	cmp	r3, r2
 8035484:	d029      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 8035486:	687b      	ldr	r3, [r7, #4]
 8035488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803548a:	681b      	ldr	r3, [r3, #0]
 803548c:	4a79      	ldr	r2, [pc, #484]	; (8035674 <HAL_UART_IRQHandler+0x554>)
 803548e:	4293      	cmp	r3, r2
 8035490:	d023      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 8035492:	687b      	ldr	r3, [r7, #4]
 8035494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035496:	681b      	ldr	r3, [r3, #0]
 8035498:	4a77      	ldr	r2, [pc, #476]	; (8035678 <HAL_UART_IRQHandler+0x558>)
 803549a:	4293      	cmp	r3, r2
 803549c:	d01d      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 803549e:	687b      	ldr	r3, [r7, #4]
 80354a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80354a2:	681b      	ldr	r3, [r3, #0]
 80354a4:	4a75      	ldr	r2, [pc, #468]	; (803567c <HAL_UART_IRQHandler+0x55c>)
 80354a6:	4293      	cmp	r3, r2
 80354a8:	d017      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 80354aa:	687b      	ldr	r3, [r7, #4]
 80354ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80354ae:	681b      	ldr	r3, [r3, #0]
 80354b0:	4a73      	ldr	r2, [pc, #460]	; (8035680 <HAL_UART_IRQHandler+0x560>)
 80354b2:	4293      	cmp	r3, r2
 80354b4:	d011      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 80354b6:	687b      	ldr	r3, [r7, #4]
 80354b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80354ba:	681b      	ldr	r3, [r3, #0]
 80354bc:	4a71      	ldr	r2, [pc, #452]	; (8035684 <HAL_UART_IRQHandler+0x564>)
 80354be:	4293      	cmp	r3, r2
 80354c0:	d00b      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 80354c2:	687b      	ldr	r3, [r7, #4]
 80354c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80354c6:	681b      	ldr	r3, [r3, #0]
 80354c8:	4a6f      	ldr	r2, [pc, #444]	; (8035688 <HAL_UART_IRQHandler+0x568>)
 80354ca:	4293      	cmp	r3, r2
 80354cc:	d005      	beq.n	80354da <HAL_UART_IRQHandler+0x3ba>
 80354ce:	687b      	ldr	r3, [r7, #4]
 80354d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80354d2:	681b      	ldr	r3, [r3, #0]
 80354d4:	4a6d      	ldr	r2, [pc, #436]	; (803568c <HAL_UART_IRQHandler+0x56c>)
 80354d6:	4293      	cmp	r3, r2
 80354d8:	d105      	bne.n	80354e6 <HAL_UART_IRQHandler+0x3c6>
 80354da:	687b      	ldr	r3, [r7, #4]
 80354dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80354de:	681b      	ldr	r3, [r3, #0]
 80354e0:	685b      	ldr	r3, [r3, #4]
 80354e2:	b29b      	uxth	r3, r3
 80354e4:	e004      	b.n	80354f0 <HAL_UART_IRQHandler+0x3d0>
 80354e6:	687b      	ldr	r3, [r7, #4]
 80354e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80354ea:	681b      	ldr	r3, [r3, #0]
 80354ec:	685b      	ldr	r3, [r3, #4]
 80354ee:	b29b      	uxth	r3, r3
 80354f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80354f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80354f8:	2b00      	cmp	r3, #0
 80354fa:	f000 81a4 	beq.w	8035846 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80354fe:	687b      	ldr	r3, [r7, #4]
 8035500:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8035504:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8035508:	429a      	cmp	r2, r3
 803550a:	f080 819c 	bcs.w	8035846 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 803550e:	687b      	ldr	r3, [r7, #4]
 8035510:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8035514:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8035518:	687b      	ldr	r3, [r7, #4]
 803551a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803551c:	69db      	ldr	r3, [r3, #28]
 803551e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035522:	f000 8086 	beq.w	8035632 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8035526:	687b      	ldr	r3, [r7, #4]
 8035528:	681b      	ldr	r3, [r3, #0]
 803552a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803552e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8035532:	e853 3f00 	ldrex	r3, [r3]
 8035536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 803553a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 803553e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8035542:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8035546:	687b      	ldr	r3, [r7, #4]
 8035548:	681b      	ldr	r3, [r3, #0]
 803554a:	461a      	mov	r2, r3
 803554c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8035550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8035554:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035558:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 803555c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8035560:	e841 2300 	strex	r3, r2, [r1]
 8035564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8035568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 803556c:	2b00      	cmp	r3, #0
 803556e:	d1da      	bne.n	8035526 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8035570:	687b      	ldr	r3, [r7, #4]
 8035572:	681b      	ldr	r3, [r3, #0]
 8035574:	3308      	adds	r3, #8
 8035576:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803557a:	e853 3f00 	ldrex	r3, [r3]
 803557e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8035580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8035582:	f023 0301 	bic.w	r3, r3, #1
 8035586:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 803558a:	687b      	ldr	r3, [r7, #4]
 803558c:	681b      	ldr	r3, [r3, #0]
 803558e:	3308      	adds	r3, #8
 8035590:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8035594:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8035598:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803559a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 803559c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80355a0:	e841 2300 	strex	r3, r2, [r1]
 80355a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80355a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80355a8:	2b00      	cmp	r3, #0
 80355aa:	d1e1      	bne.n	8035570 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80355ac:	687b      	ldr	r3, [r7, #4]
 80355ae:	681b      	ldr	r3, [r3, #0]
 80355b0:	3308      	adds	r3, #8
 80355b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80355b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80355b6:	e853 3f00 	ldrex	r3, [r3]
 80355ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80355bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80355be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80355c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80355c6:	687b      	ldr	r3, [r7, #4]
 80355c8:	681b      	ldr	r3, [r3, #0]
 80355ca:	3308      	adds	r3, #8
 80355cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80355d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80355d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80355d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80355d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80355d8:	e841 2300 	strex	r3, r2, [r1]
 80355dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80355de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80355e0:	2b00      	cmp	r3, #0
 80355e2:	d1e3      	bne.n	80355ac <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80355e4:	687b      	ldr	r3, [r7, #4]
 80355e6:	2220      	movs	r2, #32
 80355e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80355ec:	687b      	ldr	r3, [r7, #4]
 80355ee:	2200      	movs	r2, #0
 80355f0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80355f2:	687b      	ldr	r3, [r7, #4]
 80355f4:	681b      	ldr	r3, [r3, #0]
 80355f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80355f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80355fa:	e853 3f00 	ldrex	r3, [r3]
 80355fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8035600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8035602:	f023 0310 	bic.w	r3, r3, #16
 8035606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 803560a:	687b      	ldr	r3, [r7, #4]
 803560c:	681b      	ldr	r3, [r3, #0]
 803560e:	461a      	mov	r2, r3
 8035610:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8035614:	65bb      	str	r3, [r7, #88]	; 0x58
 8035616:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035618:	6d79      	ldr	r1, [r7, #84]	; 0x54
 803561a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 803561c:	e841 2300 	strex	r3, r2, [r1]
 8035620:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8035622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8035624:	2b00      	cmp	r3, #0
 8035626:	d1e4      	bne.n	80355f2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8035628:	687b      	ldr	r3, [r7, #4]
 803562a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803562c:	4618      	mov	r0, r3
 803562e:	f7f6 fced 	bl	802c00c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8035632:	687b      	ldr	r3, [r7, #4]
 8035634:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8035638:	687b      	ldr	r3, [r7, #4]
 803563a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803563e:	b29b      	uxth	r3, r3
 8035640:	1ad3      	subs	r3, r2, r3
 8035642:	b29b      	uxth	r3, r3
 8035644:	4619      	mov	r1, r3
 8035646:	6878      	ldr	r0, [r7, #4]
 8035648:	f000 f912 	bl	8035870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 803564c:	e0fb      	b.n	8035846 <HAL_UART_IRQHandler+0x726>
 803564e:	bf00      	nop
 8035650:	40020010 	.word	0x40020010
 8035654:	40020028 	.word	0x40020028
 8035658:	40020040 	.word	0x40020040
 803565c:	40020058 	.word	0x40020058
 8035660:	40020070 	.word	0x40020070
 8035664:	40020088 	.word	0x40020088
 8035668:	400200a0 	.word	0x400200a0
 803566c:	400200b8 	.word	0x400200b8
 8035670:	40020410 	.word	0x40020410
 8035674:	40020428 	.word	0x40020428
 8035678:	40020440 	.word	0x40020440
 803567c:	40020458 	.word	0x40020458
 8035680:	40020470 	.word	0x40020470
 8035684:	40020488 	.word	0x40020488
 8035688:	400204a0 	.word	0x400204a0
 803568c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8035690:	687b      	ldr	r3, [r7, #4]
 8035692:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8035696:	687b      	ldr	r3, [r7, #4]
 8035698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803569c:	b29b      	uxth	r3, r3
 803569e:	1ad3      	subs	r3, r2, r3
 80356a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80356a4:	687b      	ldr	r3, [r7, #4]
 80356a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80356aa:	b29b      	uxth	r3, r3
 80356ac:	2b00      	cmp	r3, #0
 80356ae:	f000 80cc 	beq.w	803584a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80356b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80356b6:	2b00      	cmp	r3, #0
 80356b8:	f000 80c7 	beq.w	803584a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80356bc:	687b      	ldr	r3, [r7, #4]
 80356be:	681b      	ldr	r3, [r3, #0]
 80356c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80356c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80356c4:	e853 3f00 	ldrex	r3, [r3]
 80356c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80356ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80356cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80356d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80356d4:	687b      	ldr	r3, [r7, #4]
 80356d6:	681b      	ldr	r3, [r3, #0]
 80356d8:	461a      	mov	r2, r3
 80356da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80356de:	647b      	str	r3, [r7, #68]	; 0x44
 80356e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80356e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80356e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80356e6:	e841 2300 	strex	r3, r2, [r1]
 80356ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80356ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80356ee:	2b00      	cmp	r3, #0
 80356f0:	d1e4      	bne.n	80356bc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80356f2:	687b      	ldr	r3, [r7, #4]
 80356f4:	681b      	ldr	r3, [r3, #0]
 80356f6:	3308      	adds	r3, #8
 80356f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80356fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80356fc:	e853 3f00 	ldrex	r3, [r3]
 8035700:	623b      	str	r3, [r7, #32]
   return(result);
 8035702:	6a3a      	ldr	r2, [r7, #32]
 8035704:	4b54      	ldr	r3, [pc, #336]	; (8035858 <HAL_UART_IRQHandler+0x738>)
 8035706:	4013      	ands	r3, r2
 8035708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 803570c:	687b      	ldr	r3, [r7, #4]
 803570e:	681b      	ldr	r3, [r3, #0]
 8035710:	3308      	adds	r3, #8
 8035712:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8035716:	633a      	str	r2, [r7, #48]	; 0x30
 8035718:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803571a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803571c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803571e:	e841 2300 	strex	r3, r2, [r1]
 8035722:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8035724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8035726:	2b00      	cmp	r3, #0
 8035728:	d1e3      	bne.n	80356f2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 803572a:	687b      	ldr	r3, [r7, #4]
 803572c:	2220      	movs	r2, #32
 803572e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8035732:	687b      	ldr	r3, [r7, #4]
 8035734:	2200      	movs	r2, #0
 8035736:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8035738:	687b      	ldr	r3, [r7, #4]
 803573a:	2200      	movs	r2, #0
 803573c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803573e:	687b      	ldr	r3, [r7, #4]
 8035740:	681b      	ldr	r3, [r3, #0]
 8035742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035744:	693b      	ldr	r3, [r7, #16]
 8035746:	e853 3f00 	ldrex	r3, [r3]
 803574a:	60fb      	str	r3, [r7, #12]
   return(result);
 803574c:	68fb      	ldr	r3, [r7, #12]
 803574e:	f023 0310 	bic.w	r3, r3, #16
 8035752:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8035756:	687b      	ldr	r3, [r7, #4]
 8035758:	681b      	ldr	r3, [r3, #0]
 803575a:	461a      	mov	r2, r3
 803575c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8035760:	61fb      	str	r3, [r7, #28]
 8035762:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035764:	69b9      	ldr	r1, [r7, #24]
 8035766:	69fa      	ldr	r2, [r7, #28]
 8035768:	e841 2300 	strex	r3, r2, [r1]
 803576c:	617b      	str	r3, [r7, #20]
   return(result);
 803576e:	697b      	ldr	r3, [r7, #20]
 8035770:	2b00      	cmp	r3, #0
 8035772:	d1e4      	bne.n	803573e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8035774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8035778:	4619      	mov	r1, r3
 803577a:	6878      	ldr	r0, [r7, #4]
 803577c:	f000 f878 	bl	8035870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8035780:	e063      	b.n	803584a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8035782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 803578a:	2b00      	cmp	r3, #0
 803578c:	d00e      	beq.n	80357ac <HAL_UART_IRQHandler+0x68c>
 803578e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8035792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8035796:	2b00      	cmp	r3, #0
 8035798:	d008      	beq.n	80357ac <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 803579a:	687b      	ldr	r3, [r7, #4]
 803579c:	681b      	ldr	r3, [r3, #0]
 803579e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80357a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80357a4:	6878      	ldr	r0, [r7, #4]
 80357a6:	f001 ff5d 	bl	8037664 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80357aa:	e051      	b.n	8035850 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80357ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80357b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80357b4:	2b00      	cmp	r3, #0
 80357b6:	d014      	beq.n	80357e2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80357b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80357bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80357c0:	2b00      	cmp	r3, #0
 80357c2:	d105      	bne.n	80357d0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80357c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80357c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80357cc:	2b00      	cmp	r3, #0
 80357ce:	d008      	beq.n	80357e2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80357d0:	687b      	ldr	r3, [r7, #4]
 80357d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80357d4:	2b00      	cmp	r3, #0
 80357d6:	d03a      	beq.n	803584e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80357d8:	687b      	ldr	r3, [r7, #4]
 80357da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80357dc:	6878      	ldr	r0, [r7, #4]
 80357de:	4798      	blx	r3
    }
    return;
 80357e0:	e035      	b.n	803584e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80357e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80357e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80357ea:	2b00      	cmp	r3, #0
 80357ec:	d009      	beq.n	8035802 <HAL_UART_IRQHandler+0x6e2>
 80357ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80357f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80357f6:	2b00      	cmp	r3, #0
 80357f8:	d003      	beq.n	8035802 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80357fa:	6878      	ldr	r0, [r7, #4]
 80357fc:	f001 faaa 	bl	8036d54 <UART_EndTransmit_IT>
    return;
 8035800:	e026      	b.n	8035850 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8035802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 803580a:	2b00      	cmp	r3, #0
 803580c:	d009      	beq.n	8035822 <HAL_UART_IRQHandler+0x702>
 803580e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035812:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8035816:	2b00      	cmp	r3, #0
 8035818:	d003      	beq.n	8035822 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 803581a:	6878      	ldr	r0, [r7, #4]
 803581c:	f001 ff36 	bl	803768c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8035820:	e016      	b.n	8035850 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8035822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 803582a:	2b00      	cmp	r3, #0
 803582c:	d010      	beq.n	8035850 <HAL_UART_IRQHandler+0x730>
 803582e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035832:	2b00      	cmp	r3, #0
 8035834:	da0c      	bge.n	8035850 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8035836:	6878      	ldr	r0, [r7, #4]
 8035838:	f001 ff1e 	bl	8037678 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 803583c:	e008      	b.n	8035850 <HAL_UART_IRQHandler+0x730>
      return;
 803583e:	bf00      	nop
 8035840:	e006      	b.n	8035850 <HAL_UART_IRQHandler+0x730>
    return;
 8035842:	bf00      	nop
 8035844:	e004      	b.n	8035850 <HAL_UART_IRQHandler+0x730>
      return;
 8035846:	bf00      	nop
 8035848:	e002      	b.n	8035850 <HAL_UART_IRQHandler+0x730>
      return;
 803584a:	bf00      	nop
 803584c:	e000      	b.n	8035850 <HAL_UART_IRQHandler+0x730>
    return;
 803584e:	bf00      	nop
  }
}
 8035850:	37e8      	adds	r7, #232	; 0xe8
 8035852:	46bd      	mov	sp, r7
 8035854:	bd80      	pop	{r7, pc}
 8035856:	bf00      	nop
 8035858:	effffffe 	.word	0xeffffffe

0803585c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 803585c:	b480      	push	{r7}
 803585e:	b083      	sub	sp, #12
 8035860:	af00      	add	r7, sp, #0
 8035862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8035864:	bf00      	nop
 8035866:	370c      	adds	r7, #12
 8035868:	46bd      	mov	sp, r7
 803586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803586e:	4770      	bx	lr

08035870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8035870:	b480      	push	{r7}
 8035872:	b083      	sub	sp, #12
 8035874:	af00      	add	r7, sp, #0
 8035876:	6078      	str	r0, [r7, #4]
 8035878:	460b      	mov	r3, r1
 803587a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 803587c:	bf00      	nop
 803587e:	370c      	adds	r7, #12
 8035880:	46bd      	mov	sp, r7
 8035882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035886:	4770      	bx	lr

08035888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8035888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 803588c:	b092      	sub	sp, #72	; 0x48
 803588e:	af00      	add	r7, sp, #0
 8035890:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8035892:	2300      	movs	r3, #0
 8035894:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8035898:	697b      	ldr	r3, [r7, #20]
 803589a:	689a      	ldr	r2, [r3, #8]
 803589c:	697b      	ldr	r3, [r7, #20]
 803589e:	691b      	ldr	r3, [r3, #16]
 80358a0:	431a      	orrs	r2, r3
 80358a2:	697b      	ldr	r3, [r7, #20]
 80358a4:	695b      	ldr	r3, [r3, #20]
 80358a6:	431a      	orrs	r2, r3
 80358a8:	697b      	ldr	r3, [r7, #20]
 80358aa:	69db      	ldr	r3, [r3, #28]
 80358ac:	4313      	orrs	r3, r2
 80358ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80358b0:	697b      	ldr	r3, [r7, #20]
 80358b2:	681b      	ldr	r3, [r3, #0]
 80358b4:	681a      	ldr	r2, [r3, #0]
 80358b6:	4bbe      	ldr	r3, [pc, #760]	; (8035bb0 <UART_SetConfig+0x328>)
 80358b8:	4013      	ands	r3, r2
 80358ba:	697a      	ldr	r2, [r7, #20]
 80358bc:	6812      	ldr	r2, [r2, #0]
 80358be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80358c0:	430b      	orrs	r3, r1
 80358c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80358c4:	697b      	ldr	r3, [r7, #20]
 80358c6:	681b      	ldr	r3, [r3, #0]
 80358c8:	685b      	ldr	r3, [r3, #4]
 80358ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80358ce:	697b      	ldr	r3, [r7, #20]
 80358d0:	68da      	ldr	r2, [r3, #12]
 80358d2:	697b      	ldr	r3, [r7, #20]
 80358d4:	681b      	ldr	r3, [r3, #0]
 80358d6:	430a      	orrs	r2, r1
 80358d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80358da:	697b      	ldr	r3, [r7, #20]
 80358dc:	699b      	ldr	r3, [r3, #24]
 80358de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80358e0:	697b      	ldr	r3, [r7, #20]
 80358e2:	681b      	ldr	r3, [r3, #0]
 80358e4:	4ab3      	ldr	r2, [pc, #716]	; (8035bb4 <UART_SetConfig+0x32c>)
 80358e6:	4293      	cmp	r3, r2
 80358e8:	d004      	beq.n	80358f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80358ea:	697b      	ldr	r3, [r7, #20]
 80358ec:	6a1b      	ldr	r3, [r3, #32]
 80358ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80358f0:	4313      	orrs	r3, r2
 80358f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80358f4:	697b      	ldr	r3, [r7, #20]
 80358f6:	681b      	ldr	r3, [r3, #0]
 80358f8:	689a      	ldr	r2, [r3, #8]
 80358fa:	4baf      	ldr	r3, [pc, #700]	; (8035bb8 <UART_SetConfig+0x330>)
 80358fc:	4013      	ands	r3, r2
 80358fe:	697a      	ldr	r2, [r7, #20]
 8035900:	6812      	ldr	r2, [r2, #0]
 8035902:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8035904:	430b      	orrs	r3, r1
 8035906:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8035908:	697b      	ldr	r3, [r7, #20]
 803590a:	681b      	ldr	r3, [r3, #0]
 803590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803590e:	f023 010f 	bic.w	r1, r3, #15
 8035912:	697b      	ldr	r3, [r7, #20]
 8035914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8035916:	697b      	ldr	r3, [r7, #20]
 8035918:	681b      	ldr	r3, [r3, #0]
 803591a:	430a      	orrs	r2, r1
 803591c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 803591e:	697b      	ldr	r3, [r7, #20]
 8035920:	681b      	ldr	r3, [r3, #0]
 8035922:	4aa6      	ldr	r2, [pc, #664]	; (8035bbc <UART_SetConfig+0x334>)
 8035924:	4293      	cmp	r3, r2
 8035926:	d177      	bne.n	8035a18 <UART_SetConfig+0x190>
 8035928:	4ba5      	ldr	r3, [pc, #660]	; (8035bc0 <UART_SetConfig+0x338>)
 803592a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803592c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8035930:	2b28      	cmp	r3, #40	; 0x28
 8035932:	d86d      	bhi.n	8035a10 <UART_SetConfig+0x188>
 8035934:	a201      	add	r2, pc, #4	; (adr r2, 803593c <UART_SetConfig+0xb4>)
 8035936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803593a:	bf00      	nop
 803593c:	080359e1 	.word	0x080359e1
 8035940:	08035a11 	.word	0x08035a11
 8035944:	08035a11 	.word	0x08035a11
 8035948:	08035a11 	.word	0x08035a11
 803594c:	08035a11 	.word	0x08035a11
 8035950:	08035a11 	.word	0x08035a11
 8035954:	08035a11 	.word	0x08035a11
 8035958:	08035a11 	.word	0x08035a11
 803595c:	080359e9 	.word	0x080359e9
 8035960:	08035a11 	.word	0x08035a11
 8035964:	08035a11 	.word	0x08035a11
 8035968:	08035a11 	.word	0x08035a11
 803596c:	08035a11 	.word	0x08035a11
 8035970:	08035a11 	.word	0x08035a11
 8035974:	08035a11 	.word	0x08035a11
 8035978:	08035a11 	.word	0x08035a11
 803597c:	080359f1 	.word	0x080359f1
 8035980:	08035a11 	.word	0x08035a11
 8035984:	08035a11 	.word	0x08035a11
 8035988:	08035a11 	.word	0x08035a11
 803598c:	08035a11 	.word	0x08035a11
 8035990:	08035a11 	.word	0x08035a11
 8035994:	08035a11 	.word	0x08035a11
 8035998:	08035a11 	.word	0x08035a11
 803599c:	080359f9 	.word	0x080359f9
 80359a0:	08035a11 	.word	0x08035a11
 80359a4:	08035a11 	.word	0x08035a11
 80359a8:	08035a11 	.word	0x08035a11
 80359ac:	08035a11 	.word	0x08035a11
 80359b0:	08035a11 	.word	0x08035a11
 80359b4:	08035a11 	.word	0x08035a11
 80359b8:	08035a11 	.word	0x08035a11
 80359bc:	08035a01 	.word	0x08035a01
 80359c0:	08035a11 	.word	0x08035a11
 80359c4:	08035a11 	.word	0x08035a11
 80359c8:	08035a11 	.word	0x08035a11
 80359cc:	08035a11 	.word	0x08035a11
 80359d0:	08035a11 	.word	0x08035a11
 80359d4:	08035a11 	.word	0x08035a11
 80359d8:	08035a11 	.word	0x08035a11
 80359dc:	08035a09 	.word	0x08035a09
 80359e0:	2301      	movs	r3, #1
 80359e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80359e6:	e222      	b.n	8035e2e <UART_SetConfig+0x5a6>
 80359e8:	2304      	movs	r3, #4
 80359ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80359ee:	e21e      	b.n	8035e2e <UART_SetConfig+0x5a6>
 80359f0:	2308      	movs	r3, #8
 80359f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80359f6:	e21a      	b.n	8035e2e <UART_SetConfig+0x5a6>
 80359f8:	2310      	movs	r3, #16
 80359fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80359fe:	e216      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035a00:	2320      	movs	r3, #32
 8035a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035a06:	e212      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035a08:	2340      	movs	r3, #64	; 0x40
 8035a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035a0e:	e20e      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035a10:	2380      	movs	r3, #128	; 0x80
 8035a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035a16:	e20a      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035a18:	697b      	ldr	r3, [r7, #20]
 8035a1a:	681b      	ldr	r3, [r3, #0]
 8035a1c:	4a69      	ldr	r2, [pc, #420]	; (8035bc4 <UART_SetConfig+0x33c>)
 8035a1e:	4293      	cmp	r3, r2
 8035a20:	d130      	bne.n	8035a84 <UART_SetConfig+0x1fc>
 8035a22:	4b67      	ldr	r3, [pc, #412]	; (8035bc0 <UART_SetConfig+0x338>)
 8035a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035a26:	f003 0307 	and.w	r3, r3, #7
 8035a2a:	2b05      	cmp	r3, #5
 8035a2c:	d826      	bhi.n	8035a7c <UART_SetConfig+0x1f4>
 8035a2e:	a201      	add	r2, pc, #4	; (adr r2, 8035a34 <UART_SetConfig+0x1ac>)
 8035a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035a34:	08035a4d 	.word	0x08035a4d
 8035a38:	08035a55 	.word	0x08035a55
 8035a3c:	08035a5d 	.word	0x08035a5d
 8035a40:	08035a65 	.word	0x08035a65
 8035a44:	08035a6d 	.word	0x08035a6d
 8035a48:	08035a75 	.word	0x08035a75
 8035a4c:	2300      	movs	r3, #0
 8035a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035a52:	e1ec      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035a54:	2304      	movs	r3, #4
 8035a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035a5a:	e1e8      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035a5c:	2308      	movs	r3, #8
 8035a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035a62:	e1e4      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035a64:	2310      	movs	r3, #16
 8035a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035a6a:	e1e0      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035a6c:	2320      	movs	r3, #32
 8035a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035a72:	e1dc      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035a74:	2340      	movs	r3, #64	; 0x40
 8035a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035a7a:	e1d8      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035a7c:	2380      	movs	r3, #128	; 0x80
 8035a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035a82:	e1d4      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035a84:	697b      	ldr	r3, [r7, #20]
 8035a86:	681b      	ldr	r3, [r3, #0]
 8035a88:	4a4f      	ldr	r2, [pc, #316]	; (8035bc8 <UART_SetConfig+0x340>)
 8035a8a:	4293      	cmp	r3, r2
 8035a8c:	d130      	bne.n	8035af0 <UART_SetConfig+0x268>
 8035a8e:	4b4c      	ldr	r3, [pc, #304]	; (8035bc0 <UART_SetConfig+0x338>)
 8035a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035a92:	f003 0307 	and.w	r3, r3, #7
 8035a96:	2b05      	cmp	r3, #5
 8035a98:	d826      	bhi.n	8035ae8 <UART_SetConfig+0x260>
 8035a9a:	a201      	add	r2, pc, #4	; (adr r2, 8035aa0 <UART_SetConfig+0x218>)
 8035a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035aa0:	08035ab9 	.word	0x08035ab9
 8035aa4:	08035ac1 	.word	0x08035ac1
 8035aa8:	08035ac9 	.word	0x08035ac9
 8035aac:	08035ad1 	.word	0x08035ad1
 8035ab0:	08035ad9 	.word	0x08035ad9
 8035ab4:	08035ae1 	.word	0x08035ae1
 8035ab8:	2300      	movs	r3, #0
 8035aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035abe:	e1b6      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035ac0:	2304      	movs	r3, #4
 8035ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ac6:	e1b2      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035ac8:	2308      	movs	r3, #8
 8035aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ace:	e1ae      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035ad0:	2310      	movs	r3, #16
 8035ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ad6:	e1aa      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035ad8:	2320      	movs	r3, #32
 8035ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ade:	e1a6      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035ae0:	2340      	movs	r3, #64	; 0x40
 8035ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ae6:	e1a2      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035ae8:	2380      	movs	r3, #128	; 0x80
 8035aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035aee:	e19e      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035af0:	697b      	ldr	r3, [r7, #20]
 8035af2:	681b      	ldr	r3, [r3, #0]
 8035af4:	4a35      	ldr	r2, [pc, #212]	; (8035bcc <UART_SetConfig+0x344>)
 8035af6:	4293      	cmp	r3, r2
 8035af8:	d130      	bne.n	8035b5c <UART_SetConfig+0x2d4>
 8035afa:	4b31      	ldr	r3, [pc, #196]	; (8035bc0 <UART_SetConfig+0x338>)
 8035afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035afe:	f003 0307 	and.w	r3, r3, #7
 8035b02:	2b05      	cmp	r3, #5
 8035b04:	d826      	bhi.n	8035b54 <UART_SetConfig+0x2cc>
 8035b06:	a201      	add	r2, pc, #4	; (adr r2, 8035b0c <UART_SetConfig+0x284>)
 8035b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035b0c:	08035b25 	.word	0x08035b25
 8035b10:	08035b2d 	.word	0x08035b2d
 8035b14:	08035b35 	.word	0x08035b35
 8035b18:	08035b3d 	.word	0x08035b3d
 8035b1c:	08035b45 	.word	0x08035b45
 8035b20:	08035b4d 	.word	0x08035b4d
 8035b24:	2300      	movs	r3, #0
 8035b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b2a:	e180      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035b2c:	2304      	movs	r3, #4
 8035b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b32:	e17c      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035b34:	2308      	movs	r3, #8
 8035b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b3a:	e178      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035b3c:	2310      	movs	r3, #16
 8035b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b42:	e174      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035b44:	2320      	movs	r3, #32
 8035b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b4a:	e170      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035b4c:	2340      	movs	r3, #64	; 0x40
 8035b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b52:	e16c      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035b54:	2380      	movs	r3, #128	; 0x80
 8035b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b5a:	e168      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035b5c:	697b      	ldr	r3, [r7, #20]
 8035b5e:	681b      	ldr	r3, [r3, #0]
 8035b60:	4a1b      	ldr	r2, [pc, #108]	; (8035bd0 <UART_SetConfig+0x348>)
 8035b62:	4293      	cmp	r3, r2
 8035b64:	d142      	bne.n	8035bec <UART_SetConfig+0x364>
 8035b66:	4b16      	ldr	r3, [pc, #88]	; (8035bc0 <UART_SetConfig+0x338>)
 8035b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035b6a:	f003 0307 	and.w	r3, r3, #7
 8035b6e:	2b05      	cmp	r3, #5
 8035b70:	d838      	bhi.n	8035be4 <UART_SetConfig+0x35c>
 8035b72:	a201      	add	r2, pc, #4	; (adr r2, 8035b78 <UART_SetConfig+0x2f0>)
 8035b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035b78:	08035b91 	.word	0x08035b91
 8035b7c:	08035b99 	.word	0x08035b99
 8035b80:	08035ba1 	.word	0x08035ba1
 8035b84:	08035ba9 	.word	0x08035ba9
 8035b88:	08035bd5 	.word	0x08035bd5
 8035b8c:	08035bdd 	.word	0x08035bdd
 8035b90:	2300      	movs	r3, #0
 8035b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b96:	e14a      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035b98:	2304      	movs	r3, #4
 8035b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035b9e:	e146      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035ba0:	2308      	movs	r3, #8
 8035ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ba6:	e142      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035ba8:	2310      	movs	r3, #16
 8035baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bae:	e13e      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035bb0:	cfff69f3 	.word	0xcfff69f3
 8035bb4:	58000c00 	.word	0x58000c00
 8035bb8:	11fff4ff 	.word	0x11fff4ff
 8035bbc:	40011000 	.word	0x40011000
 8035bc0:	58024400 	.word	0x58024400
 8035bc4:	40004400 	.word	0x40004400
 8035bc8:	40004800 	.word	0x40004800
 8035bcc:	40004c00 	.word	0x40004c00
 8035bd0:	40005000 	.word	0x40005000
 8035bd4:	2320      	movs	r3, #32
 8035bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bda:	e128      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035bdc:	2340      	movs	r3, #64	; 0x40
 8035bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035be2:	e124      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035be4:	2380      	movs	r3, #128	; 0x80
 8035be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bea:	e120      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035bec:	697b      	ldr	r3, [r7, #20]
 8035bee:	681b      	ldr	r3, [r3, #0]
 8035bf0:	4acb      	ldr	r2, [pc, #812]	; (8035f20 <UART_SetConfig+0x698>)
 8035bf2:	4293      	cmp	r3, r2
 8035bf4:	d176      	bne.n	8035ce4 <UART_SetConfig+0x45c>
 8035bf6:	4bcb      	ldr	r3, [pc, #812]	; (8035f24 <UART_SetConfig+0x69c>)
 8035bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8035bfe:	2b28      	cmp	r3, #40	; 0x28
 8035c00:	d86c      	bhi.n	8035cdc <UART_SetConfig+0x454>
 8035c02:	a201      	add	r2, pc, #4	; (adr r2, 8035c08 <UART_SetConfig+0x380>)
 8035c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035c08:	08035cad 	.word	0x08035cad
 8035c0c:	08035cdd 	.word	0x08035cdd
 8035c10:	08035cdd 	.word	0x08035cdd
 8035c14:	08035cdd 	.word	0x08035cdd
 8035c18:	08035cdd 	.word	0x08035cdd
 8035c1c:	08035cdd 	.word	0x08035cdd
 8035c20:	08035cdd 	.word	0x08035cdd
 8035c24:	08035cdd 	.word	0x08035cdd
 8035c28:	08035cb5 	.word	0x08035cb5
 8035c2c:	08035cdd 	.word	0x08035cdd
 8035c30:	08035cdd 	.word	0x08035cdd
 8035c34:	08035cdd 	.word	0x08035cdd
 8035c38:	08035cdd 	.word	0x08035cdd
 8035c3c:	08035cdd 	.word	0x08035cdd
 8035c40:	08035cdd 	.word	0x08035cdd
 8035c44:	08035cdd 	.word	0x08035cdd
 8035c48:	08035cbd 	.word	0x08035cbd
 8035c4c:	08035cdd 	.word	0x08035cdd
 8035c50:	08035cdd 	.word	0x08035cdd
 8035c54:	08035cdd 	.word	0x08035cdd
 8035c58:	08035cdd 	.word	0x08035cdd
 8035c5c:	08035cdd 	.word	0x08035cdd
 8035c60:	08035cdd 	.word	0x08035cdd
 8035c64:	08035cdd 	.word	0x08035cdd
 8035c68:	08035cc5 	.word	0x08035cc5
 8035c6c:	08035cdd 	.word	0x08035cdd
 8035c70:	08035cdd 	.word	0x08035cdd
 8035c74:	08035cdd 	.word	0x08035cdd
 8035c78:	08035cdd 	.word	0x08035cdd
 8035c7c:	08035cdd 	.word	0x08035cdd
 8035c80:	08035cdd 	.word	0x08035cdd
 8035c84:	08035cdd 	.word	0x08035cdd
 8035c88:	08035ccd 	.word	0x08035ccd
 8035c8c:	08035cdd 	.word	0x08035cdd
 8035c90:	08035cdd 	.word	0x08035cdd
 8035c94:	08035cdd 	.word	0x08035cdd
 8035c98:	08035cdd 	.word	0x08035cdd
 8035c9c:	08035cdd 	.word	0x08035cdd
 8035ca0:	08035cdd 	.word	0x08035cdd
 8035ca4:	08035cdd 	.word	0x08035cdd
 8035ca8:	08035cd5 	.word	0x08035cd5
 8035cac:	2301      	movs	r3, #1
 8035cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cb2:	e0bc      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035cb4:	2304      	movs	r3, #4
 8035cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cba:	e0b8      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035cbc:	2308      	movs	r3, #8
 8035cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cc2:	e0b4      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035cc4:	2310      	movs	r3, #16
 8035cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cca:	e0b0      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035ccc:	2320      	movs	r3, #32
 8035cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cd2:	e0ac      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035cd4:	2340      	movs	r3, #64	; 0x40
 8035cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cda:	e0a8      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035cdc:	2380      	movs	r3, #128	; 0x80
 8035cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ce2:	e0a4      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035ce4:	697b      	ldr	r3, [r7, #20]
 8035ce6:	681b      	ldr	r3, [r3, #0]
 8035ce8:	4a8f      	ldr	r2, [pc, #572]	; (8035f28 <UART_SetConfig+0x6a0>)
 8035cea:	4293      	cmp	r3, r2
 8035cec:	d130      	bne.n	8035d50 <UART_SetConfig+0x4c8>
 8035cee:	4b8d      	ldr	r3, [pc, #564]	; (8035f24 <UART_SetConfig+0x69c>)
 8035cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035cf2:	f003 0307 	and.w	r3, r3, #7
 8035cf6:	2b05      	cmp	r3, #5
 8035cf8:	d826      	bhi.n	8035d48 <UART_SetConfig+0x4c0>
 8035cfa:	a201      	add	r2, pc, #4	; (adr r2, 8035d00 <UART_SetConfig+0x478>)
 8035cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035d00:	08035d19 	.word	0x08035d19
 8035d04:	08035d21 	.word	0x08035d21
 8035d08:	08035d29 	.word	0x08035d29
 8035d0c:	08035d31 	.word	0x08035d31
 8035d10:	08035d39 	.word	0x08035d39
 8035d14:	08035d41 	.word	0x08035d41
 8035d18:	2300      	movs	r3, #0
 8035d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d1e:	e086      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035d20:	2304      	movs	r3, #4
 8035d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d26:	e082      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035d28:	2308      	movs	r3, #8
 8035d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d2e:	e07e      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035d30:	2310      	movs	r3, #16
 8035d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d36:	e07a      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035d38:	2320      	movs	r3, #32
 8035d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d3e:	e076      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035d40:	2340      	movs	r3, #64	; 0x40
 8035d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d46:	e072      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035d48:	2380      	movs	r3, #128	; 0x80
 8035d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d4e:	e06e      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035d50:	697b      	ldr	r3, [r7, #20]
 8035d52:	681b      	ldr	r3, [r3, #0]
 8035d54:	4a75      	ldr	r2, [pc, #468]	; (8035f2c <UART_SetConfig+0x6a4>)
 8035d56:	4293      	cmp	r3, r2
 8035d58:	d130      	bne.n	8035dbc <UART_SetConfig+0x534>
 8035d5a:	4b72      	ldr	r3, [pc, #456]	; (8035f24 <UART_SetConfig+0x69c>)
 8035d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035d5e:	f003 0307 	and.w	r3, r3, #7
 8035d62:	2b05      	cmp	r3, #5
 8035d64:	d826      	bhi.n	8035db4 <UART_SetConfig+0x52c>
 8035d66:	a201      	add	r2, pc, #4	; (adr r2, 8035d6c <UART_SetConfig+0x4e4>)
 8035d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035d6c:	08035d85 	.word	0x08035d85
 8035d70:	08035d8d 	.word	0x08035d8d
 8035d74:	08035d95 	.word	0x08035d95
 8035d78:	08035d9d 	.word	0x08035d9d
 8035d7c:	08035da5 	.word	0x08035da5
 8035d80:	08035dad 	.word	0x08035dad
 8035d84:	2300      	movs	r3, #0
 8035d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d8a:	e050      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035d8c:	2304      	movs	r3, #4
 8035d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d92:	e04c      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035d94:	2308      	movs	r3, #8
 8035d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d9a:	e048      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035d9c:	2310      	movs	r3, #16
 8035d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035da2:	e044      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035da4:	2320      	movs	r3, #32
 8035da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035daa:	e040      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035dac:	2340      	movs	r3, #64	; 0x40
 8035dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035db2:	e03c      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035db4:	2380      	movs	r3, #128	; 0x80
 8035db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dba:	e038      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035dbc:	697b      	ldr	r3, [r7, #20]
 8035dbe:	681b      	ldr	r3, [r3, #0]
 8035dc0:	4a5b      	ldr	r2, [pc, #364]	; (8035f30 <UART_SetConfig+0x6a8>)
 8035dc2:	4293      	cmp	r3, r2
 8035dc4:	d130      	bne.n	8035e28 <UART_SetConfig+0x5a0>
 8035dc6:	4b57      	ldr	r3, [pc, #348]	; (8035f24 <UART_SetConfig+0x69c>)
 8035dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035dca:	f003 0307 	and.w	r3, r3, #7
 8035dce:	2b05      	cmp	r3, #5
 8035dd0:	d826      	bhi.n	8035e20 <UART_SetConfig+0x598>
 8035dd2:	a201      	add	r2, pc, #4	; (adr r2, 8035dd8 <UART_SetConfig+0x550>)
 8035dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035dd8:	08035df1 	.word	0x08035df1
 8035ddc:	08035df9 	.word	0x08035df9
 8035de0:	08035e01 	.word	0x08035e01
 8035de4:	08035e09 	.word	0x08035e09
 8035de8:	08035e11 	.word	0x08035e11
 8035dec:	08035e19 	.word	0x08035e19
 8035df0:	2302      	movs	r3, #2
 8035df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035df6:	e01a      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035df8:	2304      	movs	r3, #4
 8035dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dfe:	e016      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035e00:	2308      	movs	r3, #8
 8035e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e06:	e012      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035e08:	2310      	movs	r3, #16
 8035e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e0e:	e00e      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035e10:	2320      	movs	r3, #32
 8035e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e16:	e00a      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035e18:	2340      	movs	r3, #64	; 0x40
 8035e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e1e:	e006      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035e20:	2380      	movs	r3, #128	; 0x80
 8035e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035e26:	e002      	b.n	8035e2e <UART_SetConfig+0x5a6>
 8035e28:	2380      	movs	r3, #128	; 0x80
 8035e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8035e2e:	697b      	ldr	r3, [r7, #20]
 8035e30:	681b      	ldr	r3, [r3, #0]
 8035e32:	4a3f      	ldr	r2, [pc, #252]	; (8035f30 <UART_SetConfig+0x6a8>)
 8035e34:	4293      	cmp	r3, r2
 8035e36:	f040 80f8 	bne.w	803602a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8035e3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8035e3e:	2b20      	cmp	r3, #32
 8035e40:	dc46      	bgt.n	8035ed0 <UART_SetConfig+0x648>
 8035e42:	2b02      	cmp	r3, #2
 8035e44:	f2c0 8082 	blt.w	8035f4c <UART_SetConfig+0x6c4>
 8035e48:	3b02      	subs	r3, #2
 8035e4a:	2b1e      	cmp	r3, #30
 8035e4c:	d87e      	bhi.n	8035f4c <UART_SetConfig+0x6c4>
 8035e4e:	a201      	add	r2, pc, #4	; (adr r2, 8035e54 <UART_SetConfig+0x5cc>)
 8035e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035e54:	08035ed7 	.word	0x08035ed7
 8035e58:	08035f4d 	.word	0x08035f4d
 8035e5c:	08035edf 	.word	0x08035edf
 8035e60:	08035f4d 	.word	0x08035f4d
 8035e64:	08035f4d 	.word	0x08035f4d
 8035e68:	08035f4d 	.word	0x08035f4d
 8035e6c:	08035eef 	.word	0x08035eef
 8035e70:	08035f4d 	.word	0x08035f4d
 8035e74:	08035f4d 	.word	0x08035f4d
 8035e78:	08035f4d 	.word	0x08035f4d
 8035e7c:	08035f4d 	.word	0x08035f4d
 8035e80:	08035f4d 	.word	0x08035f4d
 8035e84:	08035f4d 	.word	0x08035f4d
 8035e88:	08035f4d 	.word	0x08035f4d
 8035e8c:	08035eff 	.word	0x08035eff
 8035e90:	08035f4d 	.word	0x08035f4d
 8035e94:	08035f4d 	.word	0x08035f4d
 8035e98:	08035f4d 	.word	0x08035f4d
 8035e9c:	08035f4d 	.word	0x08035f4d
 8035ea0:	08035f4d 	.word	0x08035f4d
 8035ea4:	08035f4d 	.word	0x08035f4d
 8035ea8:	08035f4d 	.word	0x08035f4d
 8035eac:	08035f4d 	.word	0x08035f4d
 8035eb0:	08035f4d 	.word	0x08035f4d
 8035eb4:	08035f4d 	.word	0x08035f4d
 8035eb8:	08035f4d 	.word	0x08035f4d
 8035ebc:	08035f4d 	.word	0x08035f4d
 8035ec0:	08035f4d 	.word	0x08035f4d
 8035ec4:	08035f4d 	.word	0x08035f4d
 8035ec8:	08035f4d 	.word	0x08035f4d
 8035ecc:	08035f3f 	.word	0x08035f3f
 8035ed0:	2b40      	cmp	r3, #64	; 0x40
 8035ed2:	d037      	beq.n	8035f44 <UART_SetConfig+0x6bc>
 8035ed4:	e03a      	b.n	8035f4c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8035ed6:	f7fc fcbf 	bl	8032858 <HAL_RCCEx_GetD3PCLK1Freq>
 8035eda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8035edc:	e03c      	b.n	8035f58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8035ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8035ee2:	4618      	mov	r0, r3
 8035ee4:	f7fc fcce 	bl	8032884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8035ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8035eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8035eec:	e034      	b.n	8035f58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8035eee:	f107 0318 	add.w	r3, r7, #24
 8035ef2:	4618      	mov	r0, r3
 8035ef4:	f7fc fe1a 	bl	8032b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8035ef8:	69fb      	ldr	r3, [r7, #28]
 8035efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8035efc:	e02c      	b.n	8035f58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8035efe:	4b09      	ldr	r3, [pc, #36]	; (8035f24 <UART_SetConfig+0x69c>)
 8035f00:	681b      	ldr	r3, [r3, #0]
 8035f02:	f003 0320 	and.w	r3, r3, #32
 8035f06:	2b00      	cmp	r3, #0
 8035f08:	d016      	beq.n	8035f38 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8035f0a:	4b06      	ldr	r3, [pc, #24]	; (8035f24 <UART_SetConfig+0x69c>)
 8035f0c:	681b      	ldr	r3, [r3, #0]
 8035f0e:	08db      	lsrs	r3, r3, #3
 8035f10:	f003 0303 	and.w	r3, r3, #3
 8035f14:	4a07      	ldr	r2, [pc, #28]	; (8035f34 <UART_SetConfig+0x6ac>)
 8035f16:	fa22 f303 	lsr.w	r3, r2, r3
 8035f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8035f1c:	e01c      	b.n	8035f58 <UART_SetConfig+0x6d0>
 8035f1e:	bf00      	nop
 8035f20:	40011400 	.word	0x40011400
 8035f24:	58024400 	.word	0x58024400
 8035f28:	40007800 	.word	0x40007800
 8035f2c:	40007c00 	.word	0x40007c00
 8035f30:	58000c00 	.word	0x58000c00
 8035f34:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8035f38:	4b9d      	ldr	r3, [pc, #628]	; (80361b0 <UART_SetConfig+0x928>)
 8035f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8035f3c:	e00c      	b.n	8035f58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8035f3e:	4b9d      	ldr	r3, [pc, #628]	; (80361b4 <UART_SetConfig+0x92c>)
 8035f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8035f42:	e009      	b.n	8035f58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8035f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8035f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8035f4a:	e005      	b.n	8035f58 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8035f4c:	2300      	movs	r3, #0
 8035f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8035f50:	2301      	movs	r3, #1
 8035f52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8035f56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8035f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035f5a:	2b00      	cmp	r3, #0
 8035f5c:	f000 81de 	beq.w	803631c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8035f60:	697b      	ldr	r3, [r7, #20]
 8035f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035f64:	4a94      	ldr	r2, [pc, #592]	; (80361b8 <UART_SetConfig+0x930>)
 8035f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8035f6a:	461a      	mov	r2, r3
 8035f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8035f72:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8035f74:	697b      	ldr	r3, [r7, #20]
 8035f76:	685a      	ldr	r2, [r3, #4]
 8035f78:	4613      	mov	r3, r2
 8035f7a:	005b      	lsls	r3, r3, #1
 8035f7c:	4413      	add	r3, r2
 8035f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8035f80:	429a      	cmp	r2, r3
 8035f82:	d305      	bcc.n	8035f90 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8035f84:	697b      	ldr	r3, [r7, #20]
 8035f86:	685b      	ldr	r3, [r3, #4]
 8035f88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8035f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8035f8c:	429a      	cmp	r2, r3
 8035f8e:	d903      	bls.n	8035f98 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8035f90:	2301      	movs	r3, #1
 8035f92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8035f96:	e1c1      	b.n	803631c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8035f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035f9a:	2200      	movs	r2, #0
 8035f9c:	60bb      	str	r3, [r7, #8]
 8035f9e:	60fa      	str	r2, [r7, #12]
 8035fa0:	697b      	ldr	r3, [r7, #20]
 8035fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035fa4:	4a84      	ldr	r2, [pc, #528]	; (80361b8 <UART_SetConfig+0x930>)
 8035fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8035faa:	b29b      	uxth	r3, r3
 8035fac:	2200      	movs	r2, #0
 8035fae:	603b      	str	r3, [r7, #0]
 8035fb0:	607a      	str	r2, [r7, #4]
 8035fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8035fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8035fba:	f7ea f9e1 	bl	8020380 <__aeabi_uldivmod>
 8035fbe:	4602      	mov	r2, r0
 8035fc0:	460b      	mov	r3, r1
 8035fc2:	4610      	mov	r0, r2
 8035fc4:	4619      	mov	r1, r3
 8035fc6:	f04f 0200 	mov.w	r2, #0
 8035fca:	f04f 0300 	mov.w	r3, #0
 8035fce:	020b      	lsls	r3, r1, #8
 8035fd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8035fd4:	0202      	lsls	r2, r0, #8
 8035fd6:	6979      	ldr	r1, [r7, #20]
 8035fd8:	6849      	ldr	r1, [r1, #4]
 8035fda:	0849      	lsrs	r1, r1, #1
 8035fdc:	2000      	movs	r0, #0
 8035fde:	460c      	mov	r4, r1
 8035fe0:	4605      	mov	r5, r0
 8035fe2:	eb12 0804 	adds.w	r8, r2, r4
 8035fe6:	eb43 0905 	adc.w	r9, r3, r5
 8035fea:	697b      	ldr	r3, [r7, #20]
 8035fec:	685b      	ldr	r3, [r3, #4]
 8035fee:	2200      	movs	r2, #0
 8035ff0:	469a      	mov	sl, r3
 8035ff2:	4693      	mov	fp, r2
 8035ff4:	4652      	mov	r2, sl
 8035ff6:	465b      	mov	r3, fp
 8035ff8:	4640      	mov	r0, r8
 8035ffa:	4649      	mov	r1, r9
 8035ffc:	f7ea f9c0 	bl	8020380 <__aeabi_uldivmod>
 8036000:	4602      	mov	r2, r0
 8036002:	460b      	mov	r3, r1
 8036004:	4613      	mov	r3, r2
 8036006:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8036008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803600a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803600e:	d308      	bcc.n	8036022 <UART_SetConfig+0x79a>
 8036010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8036016:	d204      	bcs.n	8036022 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8036018:	697b      	ldr	r3, [r7, #20]
 803601a:	681b      	ldr	r3, [r3, #0]
 803601c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803601e:	60da      	str	r2, [r3, #12]
 8036020:	e17c      	b.n	803631c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8036022:	2301      	movs	r3, #1
 8036024:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8036028:	e178      	b.n	803631c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 803602a:	697b      	ldr	r3, [r7, #20]
 803602c:	69db      	ldr	r3, [r3, #28]
 803602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8036032:	f040 80c5 	bne.w	80361c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8036036:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 803603a:	2b20      	cmp	r3, #32
 803603c:	dc48      	bgt.n	80360d0 <UART_SetConfig+0x848>
 803603e:	2b00      	cmp	r3, #0
 8036040:	db7b      	blt.n	803613a <UART_SetConfig+0x8b2>
 8036042:	2b20      	cmp	r3, #32
 8036044:	d879      	bhi.n	803613a <UART_SetConfig+0x8b2>
 8036046:	a201      	add	r2, pc, #4	; (adr r2, 803604c <UART_SetConfig+0x7c4>)
 8036048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803604c:	080360d7 	.word	0x080360d7
 8036050:	080360df 	.word	0x080360df
 8036054:	0803613b 	.word	0x0803613b
 8036058:	0803613b 	.word	0x0803613b
 803605c:	080360e7 	.word	0x080360e7
 8036060:	0803613b 	.word	0x0803613b
 8036064:	0803613b 	.word	0x0803613b
 8036068:	0803613b 	.word	0x0803613b
 803606c:	080360f7 	.word	0x080360f7
 8036070:	0803613b 	.word	0x0803613b
 8036074:	0803613b 	.word	0x0803613b
 8036078:	0803613b 	.word	0x0803613b
 803607c:	0803613b 	.word	0x0803613b
 8036080:	0803613b 	.word	0x0803613b
 8036084:	0803613b 	.word	0x0803613b
 8036088:	0803613b 	.word	0x0803613b
 803608c:	08036107 	.word	0x08036107
 8036090:	0803613b 	.word	0x0803613b
 8036094:	0803613b 	.word	0x0803613b
 8036098:	0803613b 	.word	0x0803613b
 803609c:	0803613b 	.word	0x0803613b
 80360a0:	0803613b 	.word	0x0803613b
 80360a4:	0803613b 	.word	0x0803613b
 80360a8:	0803613b 	.word	0x0803613b
 80360ac:	0803613b 	.word	0x0803613b
 80360b0:	0803613b 	.word	0x0803613b
 80360b4:	0803613b 	.word	0x0803613b
 80360b8:	0803613b 	.word	0x0803613b
 80360bc:	0803613b 	.word	0x0803613b
 80360c0:	0803613b 	.word	0x0803613b
 80360c4:	0803613b 	.word	0x0803613b
 80360c8:	0803613b 	.word	0x0803613b
 80360cc:	0803612d 	.word	0x0803612d
 80360d0:	2b40      	cmp	r3, #64	; 0x40
 80360d2:	d02e      	beq.n	8036132 <UART_SetConfig+0x8aa>
 80360d4:	e031      	b.n	803613a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80360d6:	f7fb fc4d 	bl	8031974 <HAL_RCC_GetPCLK1Freq>
 80360da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80360dc:	e033      	b.n	8036146 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80360de:	f7fb fc5f 	bl	80319a0 <HAL_RCC_GetPCLK2Freq>
 80360e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80360e4:	e02f      	b.n	8036146 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80360e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80360ea:	4618      	mov	r0, r3
 80360ec:	f7fc fbca 	bl	8032884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80360f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80360f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80360f4:	e027      	b.n	8036146 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80360f6:	f107 0318 	add.w	r3, r7, #24
 80360fa:	4618      	mov	r0, r3
 80360fc:	f7fc fd16 	bl	8032b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8036100:	69fb      	ldr	r3, [r7, #28]
 8036102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036104:	e01f      	b.n	8036146 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8036106:	4b2d      	ldr	r3, [pc, #180]	; (80361bc <UART_SetConfig+0x934>)
 8036108:	681b      	ldr	r3, [r3, #0]
 803610a:	f003 0320 	and.w	r3, r3, #32
 803610e:	2b00      	cmp	r3, #0
 8036110:	d009      	beq.n	8036126 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8036112:	4b2a      	ldr	r3, [pc, #168]	; (80361bc <UART_SetConfig+0x934>)
 8036114:	681b      	ldr	r3, [r3, #0]
 8036116:	08db      	lsrs	r3, r3, #3
 8036118:	f003 0303 	and.w	r3, r3, #3
 803611c:	4a24      	ldr	r2, [pc, #144]	; (80361b0 <UART_SetConfig+0x928>)
 803611e:	fa22 f303 	lsr.w	r3, r2, r3
 8036122:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8036124:	e00f      	b.n	8036146 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8036126:	4b22      	ldr	r3, [pc, #136]	; (80361b0 <UART_SetConfig+0x928>)
 8036128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803612a:	e00c      	b.n	8036146 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 803612c:	4b21      	ldr	r3, [pc, #132]	; (80361b4 <UART_SetConfig+0x92c>)
 803612e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036130:	e009      	b.n	8036146 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8036132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8036136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036138:	e005      	b.n	8036146 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 803613a:	2300      	movs	r3, #0
 803613c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 803613e:	2301      	movs	r3, #1
 8036140:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8036144:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8036146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036148:	2b00      	cmp	r3, #0
 803614a:	f000 80e7 	beq.w	803631c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 803614e:	697b      	ldr	r3, [r7, #20]
 8036150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036152:	4a19      	ldr	r2, [pc, #100]	; (80361b8 <UART_SetConfig+0x930>)
 8036154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8036158:	461a      	mov	r2, r3
 803615a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803615c:	fbb3 f3f2 	udiv	r3, r3, r2
 8036160:	005a      	lsls	r2, r3, #1
 8036162:	697b      	ldr	r3, [r7, #20]
 8036164:	685b      	ldr	r3, [r3, #4]
 8036166:	085b      	lsrs	r3, r3, #1
 8036168:	441a      	add	r2, r3
 803616a:	697b      	ldr	r3, [r7, #20]
 803616c:	685b      	ldr	r3, [r3, #4]
 803616e:	fbb2 f3f3 	udiv	r3, r2, r3
 8036172:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8036174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036176:	2b0f      	cmp	r3, #15
 8036178:	d916      	bls.n	80361a8 <UART_SetConfig+0x920>
 803617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803617c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8036180:	d212      	bcs.n	80361a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8036182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036184:	b29b      	uxth	r3, r3
 8036186:	f023 030f 	bic.w	r3, r3, #15
 803618a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 803618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803618e:	085b      	lsrs	r3, r3, #1
 8036190:	b29b      	uxth	r3, r3
 8036192:	f003 0307 	and.w	r3, r3, #7
 8036196:	b29a      	uxth	r2, r3
 8036198:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 803619a:	4313      	orrs	r3, r2
 803619c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 803619e:	697b      	ldr	r3, [r7, #20]
 80361a0:	681b      	ldr	r3, [r3, #0]
 80361a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80361a4:	60da      	str	r2, [r3, #12]
 80361a6:	e0b9      	b.n	803631c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80361a8:	2301      	movs	r3, #1
 80361aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80361ae:	e0b5      	b.n	803631c <UART_SetConfig+0xa94>
 80361b0:	03d09000 	.word	0x03d09000
 80361b4:	003d0900 	.word	0x003d0900
 80361b8:	080582f4 	.word	0x080582f4
 80361bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80361c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80361c4:	2b20      	cmp	r3, #32
 80361c6:	dc49      	bgt.n	803625c <UART_SetConfig+0x9d4>
 80361c8:	2b00      	cmp	r3, #0
 80361ca:	db7c      	blt.n	80362c6 <UART_SetConfig+0xa3e>
 80361cc:	2b20      	cmp	r3, #32
 80361ce:	d87a      	bhi.n	80362c6 <UART_SetConfig+0xa3e>
 80361d0:	a201      	add	r2, pc, #4	; (adr r2, 80361d8 <UART_SetConfig+0x950>)
 80361d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80361d6:	bf00      	nop
 80361d8:	08036263 	.word	0x08036263
 80361dc:	0803626b 	.word	0x0803626b
 80361e0:	080362c7 	.word	0x080362c7
 80361e4:	080362c7 	.word	0x080362c7
 80361e8:	08036273 	.word	0x08036273
 80361ec:	080362c7 	.word	0x080362c7
 80361f0:	080362c7 	.word	0x080362c7
 80361f4:	080362c7 	.word	0x080362c7
 80361f8:	08036283 	.word	0x08036283
 80361fc:	080362c7 	.word	0x080362c7
 8036200:	080362c7 	.word	0x080362c7
 8036204:	080362c7 	.word	0x080362c7
 8036208:	080362c7 	.word	0x080362c7
 803620c:	080362c7 	.word	0x080362c7
 8036210:	080362c7 	.word	0x080362c7
 8036214:	080362c7 	.word	0x080362c7
 8036218:	08036293 	.word	0x08036293
 803621c:	080362c7 	.word	0x080362c7
 8036220:	080362c7 	.word	0x080362c7
 8036224:	080362c7 	.word	0x080362c7
 8036228:	080362c7 	.word	0x080362c7
 803622c:	080362c7 	.word	0x080362c7
 8036230:	080362c7 	.word	0x080362c7
 8036234:	080362c7 	.word	0x080362c7
 8036238:	080362c7 	.word	0x080362c7
 803623c:	080362c7 	.word	0x080362c7
 8036240:	080362c7 	.word	0x080362c7
 8036244:	080362c7 	.word	0x080362c7
 8036248:	080362c7 	.word	0x080362c7
 803624c:	080362c7 	.word	0x080362c7
 8036250:	080362c7 	.word	0x080362c7
 8036254:	080362c7 	.word	0x080362c7
 8036258:	080362b9 	.word	0x080362b9
 803625c:	2b40      	cmp	r3, #64	; 0x40
 803625e:	d02e      	beq.n	80362be <UART_SetConfig+0xa36>
 8036260:	e031      	b.n	80362c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8036262:	f7fb fb87 	bl	8031974 <HAL_RCC_GetPCLK1Freq>
 8036266:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8036268:	e033      	b.n	80362d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 803626a:	f7fb fb99 	bl	80319a0 <HAL_RCC_GetPCLK2Freq>
 803626e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8036270:	e02f      	b.n	80362d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8036272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8036276:	4618      	mov	r0, r3
 8036278:	f7fc fb04 	bl	8032884 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 803627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803627e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036280:	e027      	b.n	80362d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8036282:	f107 0318 	add.w	r3, r7, #24
 8036286:	4618      	mov	r0, r3
 8036288:	f7fc fc50 	bl	8032b2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 803628c:	69fb      	ldr	r3, [r7, #28]
 803628e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036290:	e01f      	b.n	80362d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8036292:	4b2d      	ldr	r3, [pc, #180]	; (8036348 <UART_SetConfig+0xac0>)
 8036294:	681b      	ldr	r3, [r3, #0]
 8036296:	f003 0320 	and.w	r3, r3, #32
 803629a:	2b00      	cmp	r3, #0
 803629c:	d009      	beq.n	80362b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 803629e:	4b2a      	ldr	r3, [pc, #168]	; (8036348 <UART_SetConfig+0xac0>)
 80362a0:	681b      	ldr	r3, [r3, #0]
 80362a2:	08db      	lsrs	r3, r3, #3
 80362a4:	f003 0303 	and.w	r3, r3, #3
 80362a8:	4a28      	ldr	r2, [pc, #160]	; (803634c <UART_SetConfig+0xac4>)
 80362aa:	fa22 f303 	lsr.w	r3, r2, r3
 80362ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80362b0:	e00f      	b.n	80362d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80362b2:	4b26      	ldr	r3, [pc, #152]	; (803634c <UART_SetConfig+0xac4>)
 80362b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80362b6:	e00c      	b.n	80362d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80362b8:	4b25      	ldr	r3, [pc, #148]	; (8036350 <UART_SetConfig+0xac8>)
 80362ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80362bc:	e009      	b.n	80362d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80362be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80362c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80362c4:	e005      	b.n	80362d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80362c6:	2300      	movs	r3, #0
 80362c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80362ca:	2301      	movs	r3, #1
 80362cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80362d0:	bf00      	nop
    }

    if (pclk != 0U)
 80362d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80362d4:	2b00      	cmp	r3, #0
 80362d6:	d021      	beq.n	803631c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80362d8:	697b      	ldr	r3, [r7, #20]
 80362da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80362dc:	4a1d      	ldr	r2, [pc, #116]	; (8036354 <UART_SetConfig+0xacc>)
 80362de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80362e2:	461a      	mov	r2, r3
 80362e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80362e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80362ea:	697b      	ldr	r3, [r7, #20]
 80362ec:	685b      	ldr	r3, [r3, #4]
 80362ee:	085b      	lsrs	r3, r3, #1
 80362f0:	441a      	add	r2, r3
 80362f2:	697b      	ldr	r3, [r7, #20]
 80362f4:	685b      	ldr	r3, [r3, #4]
 80362f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80362fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80362fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80362fe:	2b0f      	cmp	r3, #15
 8036300:	d909      	bls.n	8036316 <UART_SetConfig+0xa8e>
 8036302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8036308:	d205      	bcs.n	8036316 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 803630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803630c:	b29a      	uxth	r2, r3
 803630e:	697b      	ldr	r3, [r7, #20]
 8036310:	681b      	ldr	r3, [r3, #0]
 8036312:	60da      	str	r2, [r3, #12]
 8036314:	e002      	b.n	803631c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8036316:	2301      	movs	r3, #1
 8036318:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 803631c:	697b      	ldr	r3, [r7, #20]
 803631e:	2201      	movs	r2, #1
 8036320:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8036324:	697b      	ldr	r3, [r7, #20]
 8036326:	2201      	movs	r2, #1
 8036328:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 803632c:	697b      	ldr	r3, [r7, #20]
 803632e:	2200      	movs	r2, #0
 8036330:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8036332:	697b      	ldr	r3, [r7, #20]
 8036334:	2200      	movs	r2, #0
 8036336:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8036338:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 803633c:	4618      	mov	r0, r3
 803633e:	3748      	adds	r7, #72	; 0x48
 8036340:	46bd      	mov	sp, r7
 8036342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8036346:	bf00      	nop
 8036348:	58024400 	.word	0x58024400
 803634c:	03d09000 	.word	0x03d09000
 8036350:	003d0900 	.word	0x003d0900
 8036354:	080582f4 	.word	0x080582f4

08036358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8036358:	b480      	push	{r7}
 803635a:	b083      	sub	sp, #12
 803635c:	af00      	add	r7, sp, #0
 803635e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8036360:	687b      	ldr	r3, [r7, #4]
 8036362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036364:	f003 0301 	and.w	r3, r3, #1
 8036368:	2b00      	cmp	r3, #0
 803636a:	d00a      	beq.n	8036382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 803636c:	687b      	ldr	r3, [r7, #4]
 803636e:	681b      	ldr	r3, [r3, #0]
 8036370:	685b      	ldr	r3, [r3, #4]
 8036372:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8036376:	687b      	ldr	r3, [r7, #4]
 8036378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803637a:	687b      	ldr	r3, [r7, #4]
 803637c:	681b      	ldr	r3, [r3, #0]
 803637e:	430a      	orrs	r2, r1
 8036380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8036382:	687b      	ldr	r3, [r7, #4]
 8036384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036386:	f003 0302 	and.w	r3, r3, #2
 803638a:	2b00      	cmp	r3, #0
 803638c:	d00a      	beq.n	80363a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 803638e:	687b      	ldr	r3, [r7, #4]
 8036390:	681b      	ldr	r3, [r3, #0]
 8036392:	685b      	ldr	r3, [r3, #4]
 8036394:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8036398:	687b      	ldr	r3, [r7, #4]
 803639a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803639c:	687b      	ldr	r3, [r7, #4]
 803639e:	681b      	ldr	r3, [r3, #0]
 80363a0:	430a      	orrs	r2, r1
 80363a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80363a4:	687b      	ldr	r3, [r7, #4]
 80363a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80363a8:	f003 0304 	and.w	r3, r3, #4
 80363ac:	2b00      	cmp	r3, #0
 80363ae:	d00a      	beq.n	80363c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80363b0:	687b      	ldr	r3, [r7, #4]
 80363b2:	681b      	ldr	r3, [r3, #0]
 80363b4:	685b      	ldr	r3, [r3, #4]
 80363b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80363ba:	687b      	ldr	r3, [r7, #4]
 80363bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80363be:	687b      	ldr	r3, [r7, #4]
 80363c0:	681b      	ldr	r3, [r3, #0]
 80363c2:	430a      	orrs	r2, r1
 80363c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80363c6:	687b      	ldr	r3, [r7, #4]
 80363c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80363ca:	f003 0308 	and.w	r3, r3, #8
 80363ce:	2b00      	cmp	r3, #0
 80363d0:	d00a      	beq.n	80363e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80363d2:	687b      	ldr	r3, [r7, #4]
 80363d4:	681b      	ldr	r3, [r3, #0]
 80363d6:	685b      	ldr	r3, [r3, #4]
 80363d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80363dc:	687b      	ldr	r3, [r7, #4]
 80363de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80363e0:	687b      	ldr	r3, [r7, #4]
 80363e2:	681b      	ldr	r3, [r3, #0]
 80363e4:	430a      	orrs	r2, r1
 80363e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80363e8:	687b      	ldr	r3, [r7, #4]
 80363ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80363ec:	f003 0310 	and.w	r3, r3, #16
 80363f0:	2b00      	cmp	r3, #0
 80363f2:	d00a      	beq.n	803640a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80363f4:	687b      	ldr	r3, [r7, #4]
 80363f6:	681b      	ldr	r3, [r3, #0]
 80363f8:	689b      	ldr	r3, [r3, #8]
 80363fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80363fe:	687b      	ldr	r3, [r7, #4]
 8036400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8036402:	687b      	ldr	r3, [r7, #4]
 8036404:	681b      	ldr	r3, [r3, #0]
 8036406:	430a      	orrs	r2, r1
 8036408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 803640a:	687b      	ldr	r3, [r7, #4]
 803640c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803640e:	f003 0320 	and.w	r3, r3, #32
 8036412:	2b00      	cmp	r3, #0
 8036414:	d00a      	beq.n	803642c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8036416:	687b      	ldr	r3, [r7, #4]
 8036418:	681b      	ldr	r3, [r3, #0]
 803641a:	689b      	ldr	r3, [r3, #8]
 803641c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8036420:	687b      	ldr	r3, [r7, #4]
 8036422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8036424:	687b      	ldr	r3, [r7, #4]
 8036426:	681b      	ldr	r3, [r3, #0]
 8036428:	430a      	orrs	r2, r1
 803642a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 803642c:	687b      	ldr	r3, [r7, #4]
 803642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036434:	2b00      	cmp	r3, #0
 8036436:	d01a      	beq.n	803646e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8036438:	687b      	ldr	r3, [r7, #4]
 803643a:	681b      	ldr	r3, [r3, #0]
 803643c:	685b      	ldr	r3, [r3, #4]
 803643e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8036442:	687b      	ldr	r3, [r7, #4]
 8036444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8036446:	687b      	ldr	r3, [r7, #4]
 8036448:	681b      	ldr	r3, [r3, #0]
 803644a:	430a      	orrs	r2, r1
 803644c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 803644e:	687b      	ldr	r3, [r7, #4]
 8036450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8036452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8036456:	d10a      	bne.n	803646e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8036458:	687b      	ldr	r3, [r7, #4]
 803645a:	681b      	ldr	r3, [r3, #0]
 803645c:	685b      	ldr	r3, [r3, #4]
 803645e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8036462:	687b      	ldr	r3, [r7, #4]
 8036464:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8036466:	687b      	ldr	r3, [r7, #4]
 8036468:	681b      	ldr	r3, [r3, #0]
 803646a:	430a      	orrs	r2, r1
 803646c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 803646e:	687b      	ldr	r3, [r7, #4]
 8036470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036476:	2b00      	cmp	r3, #0
 8036478:	d00a      	beq.n	8036490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 803647a:	687b      	ldr	r3, [r7, #4]
 803647c:	681b      	ldr	r3, [r3, #0]
 803647e:	685b      	ldr	r3, [r3, #4]
 8036480:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8036484:	687b      	ldr	r3, [r7, #4]
 8036486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8036488:	687b      	ldr	r3, [r7, #4]
 803648a:	681b      	ldr	r3, [r3, #0]
 803648c:	430a      	orrs	r2, r1
 803648e:	605a      	str	r2, [r3, #4]
  }
}
 8036490:	bf00      	nop
 8036492:	370c      	adds	r7, #12
 8036494:	46bd      	mov	sp, r7
 8036496:	f85d 7b04 	ldr.w	r7, [sp], #4
 803649a:	4770      	bx	lr

0803649c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 803649c:	b580      	push	{r7, lr}
 803649e:	b086      	sub	sp, #24
 80364a0:	af02      	add	r7, sp, #8
 80364a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80364a4:	687b      	ldr	r3, [r7, #4]
 80364a6:	2200      	movs	r2, #0
 80364a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80364ac:	f7f4 faec 	bl	802aa88 <HAL_GetTick>
 80364b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80364b2:	687b      	ldr	r3, [r7, #4]
 80364b4:	681b      	ldr	r3, [r3, #0]
 80364b6:	681b      	ldr	r3, [r3, #0]
 80364b8:	f003 0308 	and.w	r3, r3, #8
 80364bc:	2b08      	cmp	r3, #8
 80364be:	d10e      	bne.n	80364de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80364c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80364c4:	9300      	str	r3, [sp, #0]
 80364c6:	68fb      	ldr	r3, [r7, #12]
 80364c8:	2200      	movs	r2, #0
 80364ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80364ce:	6878      	ldr	r0, [r7, #4]
 80364d0:	f000 f82f 	bl	8036532 <UART_WaitOnFlagUntilTimeout>
 80364d4:	4603      	mov	r3, r0
 80364d6:	2b00      	cmp	r3, #0
 80364d8:	d001      	beq.n	80364de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80364da:	2303      	movs	r3, #3
 80364dc:	e025      	b.n	803652a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80364de:	687b      	ldr	r3, [r7, #4]
 80364e0:	681b      	ldr	r3, [r3, #0]
 80364e2:	681b      	ldr	r3, [r3, #0]
 80364e4:	f003 0304 	and.w	r3, r3, #4
 80364e8:	2b04      	cmp	r3, #4
 80364ea:	d10e      	bne.n	803650a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80364ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80364f0:	9300      	str	r3, [sp, #0]
 80364f2:	68fb      	ldr	r3, [r7, #12]
 80364f4:	2200      	movs	r2, #0
 80364f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80364fa:	6878      	ldr	r0, [r7, #4]
 80364fc:	f000 f819 	bl	8036532 <UART_WaitOnFlagUntilTimeout>
 8036500:	4603      	mov	r3, r0
 8036502:	2b00      	cmp	r3, #0
 8036504:	d001      	beq.n	803650a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8036506:	2303      	movs	r3, #3
 8036508:	e00f      	b.n	803652a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 803650a:	687b      	ldr	r3, [r7, #4]
 803650c:	2220      	movs	r2, #32
 803650e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8036512:	687b      	ldr	r3, [r7, #4]
 8036514:	2220      	movs	r2, #32
 8036516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803651a:	687b      	ldr	r3, [r7, #4]
 803651c:	2200      	movs	r2, #0
 803651e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8036520:	687b      	ldr	r3, [r7, #4]
 8036522:	2200      	movs	r2, #0
 8036524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8036528:	2300      	movs	r3, #0
}
 803652a:	4618      	mov	r0, r3
 803652c:	3710      	adds	r7, #16
 803652e:	46bd      	mov	sp, r7
 8036530:	bd80      	pop	{r7, pc}

08036532 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8036532:	b580      	push	{r7, lr}
 8036534:	b09c      	sub	sp, #112	; 0x70
 8036536:	af00      	add	r7, sp, #0
 8036538:	60f8      	str	r0, [r7, #12]
 803653a:	60b9      	str	r1, [r7, #8]
 803653c:	603b      	str	r3, [r7, #0]
 803653e:	4613      	mov	r3, r2
 8036540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8036542:	e0a9      	b.n	8036698 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8036544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803654a:	f000 80a5 	beq.w	8036698 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 803654e:	f7f4 fa9b 	bl	802aa88 <HAL_GetTick>
 8036552:	4602      	mov	r2, r0
 8036554:	683b      	ldr	r3, [r7, #0]
 8036556:	1ad3      	subs	r3, r2, r3
 8036558:	6fba      	ldr	r2, [r7, #120]	; 0x78
 803655a:	429a      	cmp	r2, r3
 803655c:	d302      	bcc.n	8036564 <UART_WaitOnFlagUntilTimeout+0x32>
 803655e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036560:	2b00      	cmp	r3, #0
 8036562:	d140      	bne.n	80365e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8036564:	68fb      	ldr	r3, [r7, #12]
 8036566:	681b      	ldr	r3, [r3, #0]
 8036568:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803656a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803656c:	e853 3f00 	ldrex	r3, [r3]
 8036570:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8036572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036574:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8036578:	667b      	str	r3, [r7, #100]	; 0x64
 803657a:	68fb      	ldr	r3, [r7, #12]
 803657c:	681b      	ldr	r3, [r3, #0]
 803657e:	461a      	mov	r2, r3
 8036580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8036582:	65fb      	str	r3, [r7, #92]	; 0x5c
 8036584:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036586:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8036588:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 803658a:	e841 2300 	strex	r3, r2, [r1]
 803658e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8036590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8036592:	2b00      	cmp	r3, #0
 8036594:	d1e6      	bne.n	8036564 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036596:	68fb      	ldr	r3, [r7, #12]
 8036598:	681b      	ldr	r3, [r3, #0]
 803659a:	3308      	adds	r3, #8
 803659c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803659e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80365a0:	e853 3f00 	ldrex	r3, [r3]
 80365a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80365a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80365a8:	f023 0301 	bic.w	r3, r3, #1
 80365ac:	663b      	str	r3, [r7, #96]	; 0x60
 80365ae:	68fb      	ldr	r3, [r7, #12]
 80365b0:	681b      	ldr	r3, [r3, #0]
 80365b2:	3308      	adds	r3, #8
 80365b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80365b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80365b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80365ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80365bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80365be:	e841 2300 	strex	r3, r2, [r1]
 80365c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80365c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80365c6:	2b00      	cmp	r3, #0
 80365c8:	d1e5      	bne.n	8036596 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80365ca:	68fb      	ldr	r3, [r7, #12]
 80365cc:	2220      	movs	r2, #32
 80365ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80365d2:	68fb      	ldr	r3, [r7, #12]
 80365d4:	2220      	movs	r2, #32
 80365d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80365da:	68fb      	ldr	r3, [r7, #12]
 80365dc:	2200      	movs	r2, #0
 80365de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80365e2:	2303      	movs	r3, #3
 80365e4:	e069      	b.n	80366ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80365e6:	68fb      	ldr	r3, [r7, #12]
 80365e8:	681b      	ldr	r3, [r3, #0]
 80365ea:	681b      	ldr	r3, [r3, #0]
 80365ec:	f003 0304 	and.w	r3, r3, #4
 80365f0:	2b00      	cmp	r3, #0
 80365f2:	d051      	beq.n	8036698 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80365f4:	68fb      	ldr	r3, [r7, #12]
 80365f6:	681b      	ldr	r3, [r3, #0]
 80365f8:	69db      	ldr	r3, [r3, #28]
 80365fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80365fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8036602:	d149      	bne.n	8036698 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8036604:	68fb      	ldr	r3, [r7, #12]
 8036606:	681b      	ldr	r3, [r3, #0]
 8036608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 803660c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 803660e:	68fb      	ldr	r3, [r7, #12]
 8036610:	681b      	ldr	r3, [r3, #0]
 8036612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036616:	e853 3f00 	ldrex	r3, [r3]
 803661a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803661e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8036622:	66fb      	str	r3, [r7, #108]	; 0x6c
 8036624:	68fb      	ldr	r3, [r7, #12]
 8036626:	681b      	ldr	r3, [r3, #0]
 8036628:	461a      	mov	r2, r3
 803662a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803662c:	637b      	str	r3, [r7, #52]	; 0x34
 803662e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8036632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036634:	e841 2300 	strex	r3, r2, [r1]
 8036638:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 803663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803663c:	2b00      	cmp	r3, #0
 803663e:	d1e6      	bne.n	803660e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036640:	68fb      	ldr	r3, [r7, #12]
 8036642:	681b      	ldr	r3, [r3, #0]
 8036644:	3308      	adds	r3, #8
 8036646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036648:	697b      	ldr	r3, [r7, #20]
 803664a:	e853 3f00 	ldrex	r3, [r3]
 803664e:	613b      	str	r3, [r7, #16]
   return(result);
 8036650:	693b      	ldr	r3, [r7, #16]
 8036652:	f023 0301 	bic.w	r3, r3, #1
 8036656:	66bb      	str	r3, [r7, #104]	; 0x68
 8036658:	68fb      	ldr	r3, [r7, #12]
 803665a:	681b      	ldr	r3, [r3, #0]
 803665c:	3308      	adds	r3, #8
 803665e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8036660:	623a      	str	r2, [r7, #32]
 8036662:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036664:	69f9      	ldr	r1, [r7, #28]
 8036666:	6a3a      	ldr	r2, [r7, #32]
 8036668:	e841 2300 	strex	r3, r2, [r1]
 803666c:	61bb      	str	r3, [r7, #24]
   return(result);
 803666e:	69bb      	ldr	r3, [r7, #24]
 8036670:	2b00      	cmp	r3, #0
 8036672:	d1e5      	bne.n	8036640 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8036674:	68fb      	ldr	r3, [r7, #12]
 8036676:	2220      	movs	r2, #32
 8036678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 803667c:	68fb      	ldr	r3, [r7, #12]
 803667e:	2220      	movs	r2, #32
 8036680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8036684:	68fb      	ldr	r3, [r7, #12]
 8036686:	2220      	movs	r2, #32
 8036688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 803668c:	68fb      	ldr	r3, [r7, #12]
 803668e:	2200      	movs	r2, #0
 8036690:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8036694:	2303      	movs	r3, #3
 8036696:	e010      	b.n	80366ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8036698:	68fb      	ldr	r3, [r7, #12]
 803669a:	681b      	ldr	r3, [r3, #0]
 803669c:	69da      	ldr	r2, [r3, #28]
 803669e:	68bb      	ldr	r3, [r7, #8]
 80366a0:	4013      	ands	r3, r2
 80366a2:	68ba      	ldr	r2, [r7, #8]
 80366a4:	429a      	cmp	r2, r3
 80366a6:	bf0c      	ite	eq
 80366a8:	2301      	moveq	r3, #1
 80366aa:	2300      	movne	r3, #0
 80366ac:	b2db      	uxtb	r3, r3
 80366ae:	461a      	mov	r2, r3
 80366b0:	79fb      	ldrb	r3, [r7, #7]
 80366b2:	429a      	cmp	r2, r3
 80366b4:	f43f af46 	beq.w	8036544 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80366b8:	2300      	movs	r3, #0
}
 80366ba:	4618      	mov	r0, r3
 80366bc:	3770      	adds	r7, #112	; 0x70
 80366be:	46bd      	mov	sp, r7
 80366c0:	bd80      	pop	{r7, pc}
	...

080366c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80366c4:	b480      	push	{r7}
 80366c6:	b0a3      	sub	sp, #140	; 0x8c
 80366c8:	af00      	add	r7, sp, #0
 80366ca:	60f8      	str	r0, [r7, #12]
 80366cc:	60b9      	str	r1, [r7, #8]
 80366ce:	4613      	mov	r3, r2
 80366d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80366d2:	68fb      	ldr	r3, [r7, #12]
 80366d4:	68ba      	ldr	r2, [r7, #8]
 80366d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80366d8:	68fb      	ldr	r3, [r7, #12]
 80366da:	88fa      	ldrh	r2, [r7, #6]
 80366dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80366e0:	68fb      	ldr	r3, [r7, #12]
 80366e2:	88fa      	ldrh	r2, [r7, #6]
 80366e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80366e8:	68fb      	ldr	r3, [r7, #12]
 80366ea:	2200      	movs	r2, #0
 80366ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80366ee:	68fb      	ldr	r3, [r7, #12]
 80366f0:	689b      	ldr	r3, [r3, #8]
 80366f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80366f6:	d10e      	bne.n	8036716 <UART_Start_Receive_IT+0x52>
 80366f8:	68fb      	ldr	r3, [r7, #12]
 80366fa:	691b      	ldr	r3, [r3, #16]
 80366fc:	2b00      	cmp	r3, #0
 80366fe:	d105      	bne.n	803670c <UART_Start_Receive_IT+0x48>
 8036700:	68fb      	ldr	r3, [r7, #12]
 8036702:	f240 12ff 	movw	r2, #511	; 0x1ff
 8036706:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803670a:	e02d      	b.n	8036768 <UART_Start_Receive_IT+0xa4>
 803670c:	68fb      	ldr	r3, [r7, #12]
 803670e:	22ff      	movs	r2, #255	; 0xff
 8036710:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036714:	e028      	b.n	8036768 <UART_Start_Receive_IT+0xa4>
 8036716:	68fb      	ldr	r3, [r7, #12]
 8036718:	689b      	ldr	r3, [r3, #8]
 803671a:	2b00      	cmp	r3, #0
 803671c:	d10d      	bne.n	803673a <UART_Start_Receive_IT+0x76>
 803671e:	68fb      	ldr	r3, [r7, #12]
 8036720:	691b      	ldr	r3, [r3, #16]
 8036722:	2b00      	cmp	r3, #0
 8036724:	d104      	bne.n	8036730 <UART_Start_Receive_IT+0x6c>
 8036726:	68fb      	ldr	r3, [r7, #12]
 8036728:	22ff      	movs	r2, #255	; 0xff
 803672a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803672e:	e01b      	b.n	8036768 <UART_Start_Receive_IT+0xa4>
 8036730:	68fb      	ldr	r3, [r7, #12]
 8036732:	227f      	movs	r2, #127	; 0x7f
 8036734:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036738:	e016      	b.n	8036768 <UART_Start_Receive_IT+0xa4>
 803673a:	68fb      	ldr	r3, [r7, #12]
 803673c:	689b      	ldr	r3, [r3, #8]
 803673e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8036742:	d10d      	bne.n	8036760 <UART_Start_Receive_IT+0x9c>
 8036744:	68fb      	ldr	r3, [r7, #12]
 8036746:	691b      	ldr	r3, [r3, #16]
 8036748:	2b00      	cmp	r3, #0
 803674a:	d104      	bne.n	8036756 <UART_Start_Receive_IT+0x92>
 803674c:	68fb      	ldr	r3, [r7, #12]
 803674e:	227f      	movs	r2, #127	; 0x7f
 8036750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036754:	e008      	b.n	8036768 <UART_Start_Receive_IT+0xa4>
 8036756:	68fb      	ldr	r3, [r7, #12]
 8036758:	223f      	movs	r2, #63	; 0x3f
 803675a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803675e:	e003      	b.n	8036768 <UART_Start_Receive_IT+0xa4>
 8036760:	68fb      	ldr	r3, [r7, #12]
 8036762:	2200      	movs	r2, #0
 8036764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036768:	68fb      	ldr	r3, [r7, #12]
 803676a:	2200      	movs	r2, #0
 803676c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8036770:	68fb      	ldr	r3, [r7, #12]
 8036772:	2222      	movs	r2, #34	; 0x22
 8036774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036778:	68fb      	ldr	r3, [r7, #12]
 803677a:	681b      	ldr	r3, [r3, #0]
 803677c:	3308      	adds	r3, #8
 803677e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8036782:	e853 3f00 	ldrex	r3, [r3]
 8036786:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8036788:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803678a:	f043 0301 	orr.w	r3, r3, #1
 803678e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8036792:	68fb      	ldr	r3, [r7, #12]
 8036794:	681b      	ldr	r3, [r3, #0]
 8036796:	3308      	adds	r3, #8
 8036798:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 803679c:	673a      	str	r2, [r7, #112]	; 0x70
 803679e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80367a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80367a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80367a4:	e841 2300 	strex	r3, r2, [r1]
 80367a8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80367aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80367ac:	2b00      	cmp	r3, #0
 80367ae:	d1e3      	bne.n	8036778 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80367b0:	68fb      	ldr	r3, [r7, #12]
 80367b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80367b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80367b8:	d153      	bne.n	8036862 <UART_Start_Receive_IT+0x19e>
 80367ba:	68fb      	ldr	r3, [r7, #12]
 80367bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80367c0:	88fa      	ldrh	r2, [r7, #6]
 80367c2:	429a      	cmp	r2, r3
 80367c4:	d34d      	bcc.n	8036862 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80367c6:	68fb      	ldr	r3, [r7, #12]
 80367c8:	689b      	ldr	r3, [r3, #8]
 80367ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80367ce:	d107      	bne.n	80367e0 <UART_Start_Receive_IT+0x11c>
 80367d0:	68fb      	ldr	r3, [r7, #12]
 80367d2:	691b      	ldr	r3, [r3, #16]
 80367d4:	2b00      	cmp	r3, #0
 80367d6:	d103      	bne.n	80367e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80367d8:	68fb      	ldr	r3, [r7, #12]
 80367da:	4a4b      	ldr	r2, [pc, #300]	; (8036908 <UART_Start_Receive_IT+0x244>)
 80367dc:	671a      	str	r2, [r3, #112]	; 0x70
 80367de:	e002      	b.n	80367e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80367e0:	68fb      	ldr	r3, [r7, #12]
 80367e2:	4a4a      	ldr	r2, [pc, #296]	; (803690c <UART_Start_Receive_IT+0x248>)
 80367e4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80367e6:	68fb      	ldr	r3, [r7, #12]
 80367e8:	2200      	movs	r2, #0
 80367ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80367ee:	68fb      	ldr	r3, [r7, #12]
 80367f0:	691b      	ldr	r3, [r3, #16]
 80367f2:	2b00      	cmp	r3, #0
 80367f4:	d01a      	beq.n	803682c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80367f6:	68fb      	ldr	r3, [r7, #12]
 80367f8:	681b      	ldr	r3, [r3, #0]
 80367fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80367fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80367fe:	e853 3f00 	ldrex	r3, [r3]
 8036802:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8036804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803680a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803680e:	68fb      	ldr	r3, [r7, #12]
 8036810:	681b      	ldr	r3, [r3, #0]
 8036812:	461a      	mov	r2, r3
 8036814:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8036818:	65fb      	str	r3, [r7, #92]	; 0x5c
 803681a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803681c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 803681e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8036820:	e841 2300 	strex	r3, r2, [r1]
 8036824:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8036826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8036828:	2b00      	cmp	r3, #0
 803682a:	d1e4      	bne.n	80367f6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 803682c:	68fb      	ldr	r3, [r7, #12]
 803682e:	681b      	ldr	r3, [r3, #0]
 8036830:	3308      	adds	r3, #8
 8036832:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036836:	e853 3f00 	ldrex	r3, [r3]
 803683a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803683e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8036842:	67fb      	str	r3, [r7, #124]	; 0x7c
 8036844:	68fb      	ldr	r3, [r7, #12]
 8036846:	681b      	ldr	r3, [r3, #0]
 8036848:	3308      	adds	r3, #8
 803684a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 803684c:	64ba      	str	r2, [r7, #72]	; 0x48
 803684e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036850:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8036852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036854:	e841 2300 	strex	r3, r2, [r1]
 8036858:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 803685a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803685c:	2b00      	cmp	r3, #0
 803685e:	d1e5      	bne.n	803682c <UART_Start_Receive_IT+0x168>
 8036860:	e04a      	b.n	80368f8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036862:	68fb      	ldr	r3, [r7, #12]
 8036864:	689b      	ldr	r3, [r3, #8]
 8036866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803686a:	d107      	bne.n	803687c <UART_Start_Receive_IT+0x1b8>
 803686c:	68fb      	ldr	r3, [r7, #12]
 803686e:	691b      	ldr	r3, [r3, #16]
 8036870:	2b00      	cmp	r3, #0
 8036872:	d103      	bne.n	803687c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8036874:	68fb      	ldr	r3, [r7, #12]
 8036876:	4a26      	ldr	r2, [pc, #152]	; (8036910 <UART_Start_Receive_IT+0x24c>)
 8036878:	671a      	str	r2, [r3, #112]	; 0x70
 803687a:	e002      	b.n	8036882 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 803687c:	68fb      	ldr	r3, [r7, #12]
 803687e:	4a25      	ldr	r2, [pc, #148]	; (8036914 <UART_Start_Receive_IT+0x250>)
 8036880:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8036882:	68fb      	ldr	r3, [r7, #12]
 8036884:	2200      	movs	r2, #0
 8036886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 803688a:	68fb      	ldr	r3, [r7, #12]
 803688c:	691b      	ldr	r3, [r3, #16]
 803688e:	2b00      	cmp	r3, #0
 8036890:	d019      	beq.n	80368c6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8036892:	68fb      	ldr	r3, [r7, #12]
 8036894:	681b      	ldr	r3, [r3, #0]
 8036896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803689a:	e853 3f00 	ldrex	r3, [r3]
 803689e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80368a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80368a2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80368a6:	677b      	str	r3, [r7, #116]	; 0x74
 80368a8:	68fb      	ldr	r3, [r7, #12]
 80368aa:	681b      	ldr	r3, [r3, #0]
 80368ac:	461a      	mov	r2, r3
 80368ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80368b0:	637b      	str	r3, [r7, #52]	; 0x34
 80368b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80368b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80368b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80368b8:	e841 2300 	strex	r3, r2, [r1]
 80368bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80368be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80368c0:	2b00      	cmp	r3, #0
 80368c2:	d1e6      	bne.n	8036892 <UART_Start_Receive_IT+0x1ce>
 80368c4:	e018      	b.n	80368f8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80368c6:	68fb      	ldr	r3, [r7, #12]
 80368c8:	681b      	ldr	r3, [r3, #0]
 80368ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80368cc:	697b      	ldr	r3, [r7, #20]
 80368ce:	e853 3f00 	ldrex	r3, [r3]
 80368d2:	613b      	str	r3, [r7, #16]
   return(result);
 80368d4:	693b      	ldr	r3, [r7, #16]
 80368d6:	f043 0320 	orr.w	r3, r3, #32
 80368da:	67bb      	str	r3, [r7, #120]	; 0x78
 80368dc:	68fb      	ldr	r3, [r7, #12]
 80368de:	681b      	ldr	r3, [r3, #0]
 80368e0:	461a      	mov	r2, r3
 80368e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80368e4:	623b      	str	r3, [r7, #32]
 80368e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80368e8:	69f9      	ldr	r1, [r7, #28]
 80368ea:	6a3a      	ldr	r2, [r7, #32]
 80368ec:	e841 2300 	strex	r3, r2, [r1]
 80368f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80368f2:	69bb      	ldr	r3, [r7, #24]
 80368f4:	2b00      	cmp	r3, #0
 80368f6:	d1e6      	bne.n	80368c6 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 80368f8:	2300      	movs	r3, #0
}
 80368fa:	4618      	mov	r0, r3
 80368fc:	378c      	adds	r7, #140	; 0x8c
 80368fe:	46bd      	mov	sp, r7
 8036900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036904:	4770      	bx	lr
 8036906:	bf00      	nop
 8036908:	08037365 	.word	0x08037365
 803690c:	0803706d 	.word	0x0803706d
 8036910:	08036f0b 	.word	0x08036f0b
 8036914:	08036dab 	.word	0x08036dab

08036918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8036918:	b480      	push	{r7}
 803691a:	b095      	sub	sp, #84	; 0x54
 803691c:	af00      	add	r7, sp, #0
 803691e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8036920:	687b      	ldr	r3, [r7, #4]
 8036922:	681b      	ldr	r3, [r3, #0]
 8036924:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036928:	e853 3f00 	ldrex	r3, [r3]
 803692c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8036936:	687b      	ldr	r3, [r7, #4]
 8036938:	681b      	ldr	r3, [r3, #0]
 803693a:	461a      	mov	r2, r3
 803693c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803693e:	643b      	str	r3, [r7, #64]	; 0x40
 8036940:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8036944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8036946:	e841 2300 	strex	r3, r2, [r1]
 803694a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803694e:	2b00      	cmp	r3, #0
 8036950:	d1e6      	bne.n	8036920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8036952:	687b      	ldr	r3, [r7, #4]
 8036954:	681b      	ldr	r3, [r3, #0]
 8036956:	3308      	adds	r3, #8
 8036958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803695a:	6a3b      	ldr	r3, [r7, #32]
 803695c:	e853 3f00 	ldrex	r3, [r3]
 8036960:	61fb      	str	r3, [r7, #28]
   return(result);
 8036962:	69fa      	ldr	r2, [r7, #28]
 8036964:	4b1e      	ldr	r3, [pc, #120]	; (80369e0 <UART_EndRxTransfer+0xc8>)
 8036966:	4013      	ands	r3, r2
 8036968:	64bb      	str	r3, [r7, #72]	; 0x48
 803696a:	687b      	ldr	r3, [r7, #4]
 803696c:	681b      	ldr	r3, [r3, #0]
 803696e:	3308      	adds	r3, #8
 8036970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8036974:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803697a:	e841 2300 	strex	r3, r2, [r1]
 803697e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036982:	2b00      	cmp	r3, #0
 8036984:	d1e5      	bne.n	8036952 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8036986:	687b      	ldr	r3, [r7, #4]
 8036988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803698a:	2b01      	cmp	r3, #1
 803698c:	d118      	bne.n	80369c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803698e:	687b      	ldr	r3, [r7, #4]
 8036990:	681b      	ldr	r3, [r3, #0]
 8036992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036994:	68fb      	ldr	r3, [r7, #12]
 8036996:	e853 3f00 	ldrex	r3, [r3]
 803699a:	60bb      	str	r3, [r7, #8]
   return(result);
 803699c:	68bb      	ldr	r3, [r7, #8]
 803699e:	f023 0310 	bic.w	r3, r3, #16
 80369a2:	647b      	str	r3, [r7, #68]	; 0x44
 80369a4:	687b      	ldr	r3, [r7, #4]
 80369a6:	681b      	ldr	r3, [r3, #0]
 80369a8:	461a      	mov	r2, r3
 80369aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80369ac:	61bb      	str	r3, [r7, #24]
 80369ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80369b0:	6979      	ldr	r1, [r7, #20]
 80369b2:	69ba      	ldr	r2, [r7, #24]
 80369b4:	e841 2300 	strex	r3, r2, [r1]
 80369b8:	613b      	str	r3, [r7, #16]
   return(result);
 80369ba:	693b      	ldr	r3, [r7, #16]
 80369bc:	2b00      	cmp	r3, #0
 80369be:	d1e6      	bne.n	803698e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80369c0:	687b      	ldr	r3, [r7, #4]
 80369c2:	2220      	movs	r2, #32
 80369c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80369c8:	687b      	ldr	r3, [r7, #4]
 80369ca:	2200      	movs	r2, #0
 80369cc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80369ce:	687b      	ldr	r3, [r7, #4]
 80369d0:	2200      	movs	r2, #0
 80369d2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80369d4:	bf00      	nop
 80369d6:	3754      	adds	r7, #84	; 0x54
 80369d8:	46bd      	mov	sp, r7
 80369da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80369de:	4770      	bx	lr
 80369e0:	effffffe 	.word	0xeffffffe

080369e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80369e4:	b580      	push	{r7, lr}
 80369e6:	b084      	sub	sp, #16
 80369e8:	af00      	add	r7, sp, #0
 80369ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80369ec:	687b      	ldr	r3, [r7, #4]
 80369ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80369f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80369f2:	68fb      	ldr	r3, [r7, #12]
 80369f4:	2200      	movs	r2, #0
 80369f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80369fa:	68fb      	ldr	r3, [r7, #12]
 80369fc:	2200      	movs	r2, #0
 80369fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8036a02:	68f8      	ldr	r0, [r7, #12]
 8036a04:	f7fe ff2a 	bl	803585c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036a08:	bf00      	nop
 8036a0a:	3710      	adds	r7, #16
 8036a0c:	46bd      	mov	sp, r7
 8036a0e:	bd80      	pop	{r7, pc}

08036a10 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8036a10:	b480      	push	{r7}
 8036a12:	b08f      	sub	sp, #60	; 0x3c
 8036a14:	af00      	add	r7, sp, #0
 8036a16:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036a18:	687b      	ldr	r3, [r7, #4]
 8036a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036a1e:	2b21      	cmp	r3, #33	; 0x21
 8036a20:	d14c      	bne.n	8036abc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8036a22:	687b      	ldr	r3, [r7, #4]
 8036a24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036a28:	b29b      	uxth	r3, r3
 8036a2a:	2b00      	cmp	r3, #0
 8036a2c:	d132      	bne.n	8036a94 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8036a2e:	687b      	ldr	r3, [r7, #4]
 8036a30:	681b      	ldr	r3, [r3, #0]
 8036a32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036a34:	6a3b      	ldr	r3, [r7, #32]
 8036a36:	e853 3f00 	ldrex	r3, [r3]
 8036a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8036a3c:	69fb      	ldr	r3, [r7, #28]
 8036a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8036a42:	637b      	str	r3, [r7, #52]	; 0x34
 8036a44:	687b      	ldr	r3, [r7, #4]
 8036a46:	681b      	ldr	r3, [r3, #0]
 8036a48:	461a      	mov	r2, r3
 8036a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8036a4e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036a54:	e841 2300 	strex	r3, r2, [r1]
 8036a58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036a5c:	2b00      	cmp	r3, #0
 8036a5e:	d1e6      	bne.n	8036a2e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036a60:	687b      	ldr	r3, [r7, #4]
 8036a62:	681b      	ldr	r3, [r3, #0]
 8036a64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036a66:	68fb      	ldr	r3, [r7, #12]
 8036a68:	e853 3f00 	ldrex	r3, [r3]
 8036a6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8036a6e:	68bb      	ldr	r3, [r7, #8]
 8036a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036a74:	633b      	str	r3, [r7, #48]	; 0x30
 8036a76:	687b      	ldr	r3, [r7, #4]
 8036a78:	681b      	ldr	r3, [r3, #0]
 8036a7a:	461a      	mov	r2, r3
 8036a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036a7e:	61bb      	str	r3, [r7, #24]
 8036a80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036a82:	6979      	ldr	r1, [r7, #20]
 8036a84:	69ba      	ldr	r2, [r7, #24]
 8036a86:	e841 2300 	strex	r3, r2, [r1]
 8036a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8036a8c:	693b      	ldr	r3, [r7, #16]
 8036a8e:	2b00      	cmp	r3, #0
 8036a90:	d1e6      	bne.n	8036a60 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8036a92:	e013      	b.n	8036abc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8036a94:	687b      	ldr	r3, [r7, #4]
 8036a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036a98:	781a      	ldrb	r2, [r3, #0]
 8036a9a:	687b      	ldr	r3, [r7, #4]
 8036a9c:	681b      	ldr	r3, [r3, #0]
 8036a9e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8036aa0:	687b      	ldr	r3, [r7, #4]
 8036aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036aa4:	1c5a      	adds	r2, r3, #1
 8036aa6:	687b      	ldr	r3, [r7, #4]
 8036aa8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8036aaa:	687b      	ldr	r3, [r7, #4]
 8036aac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036ab0:	b29b      	uxth	r3, r3
 8036ab2:	3b01      	subs	r3, #1
 8036ab4:	b29a      	uxth	r2, r3
 8036ab6:	687b      	ldr	r3, [r7, #4]
 8036ab8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8036abc:	bf00      	nop
 8036abe:	373c      	adds	r7, #60	; 0x3c
 8036ac0:	46bd      	mov	sp, r7
 8036ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036ac6:	4770      	bx	lr

08036ac8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8036ac8:	b480      	push	{r7}
 8036aca:	b091      	sub	sp, #68	; 0x44
 8036acc:	af00      	add	r7, sp, #0
 8036ace:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036ad0:	687b      	ldr	r3, [r7, #4]
 8036ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036ad6:	2b21      	cmp	r3, #33	; 0x21
 8036ad8:	d151      	bne.n	8036b7e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8036ada:	687b      	ldr	r3, [r7, #4]
 8036adc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036ae0:	b29b      	uxth	r3, r3
 8036ae2:	2b00      	cmp	r3, #0
 8036ae4:	d132      	bne.n	8036b4c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8036ae6:	687b      	ldr	r3, [r7, #4]
 8036ae8:	681b      	ldr	r3, [r3, #0]
 8036aea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036aee:	e853 3f00 	ldrex	r3, [r3]
 8036af2:	623b      	str	r3, [r7, #32]
   return(result);
 8036af4:	6a3b      	ldr	r3, [r7, #32]
 8036af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8036afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8036afc:	687b      	ldr	r3, [r7, #4]
 8036afe:	681b      	ldr	r3, [r3, #0]
 8036b00:	461a      	mov	r2, r3
 8036b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b04:	633b      	str	r3, [r7, #48]	; 0x30
 8036b06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036b0c:	e841 2300 	strex	r3, r2, [r1]
 8036b10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036b14:	2b00      	cmp	r3, #0
 8036b16:	d1e6      	bne.n	8036ae6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036b18:	687b      	ldr	r3, [r7, #4]
 8036b1a:	681b      	ldr	r3, [r3, #0]
 8036b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036b1e:	693b      	ldr	r3, [r7, #16]
 8036b20:	e853 3f00 	ldrex	r3, [r3]
 8036b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8036b26:	68fb      	ldr	r3, [r7, #12]
 8036b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8036b2e:	687b      	ldr	r3, [r7, #4]
 8036b30:	681b      	ldr	r3, [r3, #0]
 8036b32:	461a      	mov	r2, r3
 8036b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036b36:	61fb      	str	r3, [r7, #28]
 8036b38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b3a:	69b9      	ldr	r1, [r7, #24]
 8036b3c:	69fa      	ldr	r2, [r7, #28]
 8036b3e:	e841 2300 	strex	r3, r2, [r1]
 8036b42:	617b      	str	r3, [r7, #20]
   return(result);
 8036b44:	697b      	ldr	r3, [r7, #20]
 8036b46:	2b00      	cmp	r3, #0
 8036b48:	d1e6      	bne.n	8036b18 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8036b4a:	e018      	b.n	8036b7e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8036b4c:	687b      	ldr	r3, [r7, #4]
 8036b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036b50:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8036b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036b54:	881b      	ldrh	r3, [r3, #0]
 8036b56:	461a      	mov	r2, r3
 8036b58:	687b      	ldr	r3, [r7, #4]
 8036b5a:	681b      	ldr	r3, [r3, #0]
 8036b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036b60:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8036b62:	687b      	ldr	r3, [r7, #4]
 8036b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036b66:	1c9a      	adds	r2, r3, #2
 8036b68:	687b      	ldr	r3, [r7, #4]
 8036b6a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8036b6c:	687b      	ldr	r3, [r7, #4]
 8036b6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036b72:	b29b      	uxth	r3, r3
 8036b74:	3b01      	subs	r3, #1
 8036b76:	b29a      	uxth	r2, r3
 8036b78:	687b      	ldr	r3, [r7, #4]
 8036b7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8036b7e:	bf00      	nop
 8036b80:	3744      	adds	r7, #68	; 0x44
 8036b82:	46bd      	mov	sp, r7
 8036b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036b88:	4770      	bx	lr

08036b8a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8036b8a:	b480      	push	{r7}
 8036b8c:	b091      	sub	sp, #68	; 0x44
 8036b8e:	af00      	add	r7, sp, #0
 8036b90:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036b92:	687b      	ldr	r3, [r7, #4]
 8036b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036b98:	2b21      	cmp	r3, #33	; 0x21
 8036b9a:	d160      	bne.n	8036c5e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036b9c:	687b      	ldr	r3, [r7, #4]
 8036b9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036ba2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036ba4:	e057      	b.n	8036c56 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8036ba6:	687b      	ldr	r3, [r7, #4]
 8036ba8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036bac:	b29b      	uxth	r3, r3
 8036bae:	2b00      	cmp	r3, #0
 8036bb0:	d133      	bne.n	8036c1a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8036bb2:	687b      	ldr	r3, [r7, #4]
 8036bb4:	681b      	ldr	r3, [r3, #0]
 8036bb6:	3308      	adds	r3, #8
 8036bb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036bbc:	e853 3f00 	ldrex	r3, [r3]
 8036bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8036bc2:	6a3b      	ldr	r3, [r7, #32]
 8036bc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8036bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8036bca:	687b      	ldr	r3, [r7, #4]
 8036bcc:	681b      	ldr	r3, [r3, #0]
 8036bce:	3308      	adds	r3, #8
 8036bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8036bd2:	633a      	str	r2, [r7, #48]	; 0x30
 8036bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036bda:	e841 2300 	strex	r3, r2, [r1]
 8036bde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036be2:	2b00      	cmp	r3, #0
 8036be4:	d1e5      	bne.n	8036bb2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036be6:	687b      	ldr	r3, [r7, #4]
 8036be8:	681b      	ldr	r3, [r3, #0]
 8036bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036bec:	693b      	ldr	r3, [r7, #16]
 8036bee:	e853 3f00 	ldrex	r3, [r3]
 8036bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8036bf4:	68fb      	ldr	r3, [r7, #12]
 8036bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8036bfc:	687b      	ldr	r3, [r7, #4]
 8036bfe:	681b      	ldr	r3, [r3, #0]
 8036c00:	461a      	mov	r2, r3
 8036c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036c04:	61fb      	str	r3, [r7, #28]
 8036c06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c08:	69b9      	ldr	r1, [r7, #24]
 8036c0a:	69fa      	ldr	r2, [r7, #28]
 8036c0c:	e841 2300 	strex	r3, r2, [r1]
 8036c10:	617b      	str	r3, [r7, #20]
   return(result);
 8036c12:	697b      	ldr	r3, [r7, #20]
 8036c14:	2b00      	cmp	r3, #0
 8036c16:	d1e6      	bne.n	8036be6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8036c18:	e021      	b.n	8036c5e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8036c1a:	687b      	ldr	r3, [r7, #4]
 8036c1c:	681b      	ldr	r3, [r3, #0]
 8036c1e:	69db      	ldr	r3, [r3, #28]
 8036c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036c24:	2b00      	cmp	r3, #0
 8036c26:	d013      	beq.n	8036c50 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8036c28:	687b      	ldr	r3, [r7, #4]
 8036c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036c2c:	781a      	ldrb	r2, [r3, #0]
 8036c2e:	687b      	ldr	r3, [r7, #4]
 8036c30:	681b      	ldr	r3, [r3, #0]
 8036c32:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8036c34:	687b      	ldr	r3, [r7, #4]
 8036c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036c38:	1c5a      	adds	r2, r3, #1
 8036c3a:	687b      	ldr	r3, [r7, #4]
 8036c3c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8036c3e:	687b      	ldr	r3, [r7, #4]
 8036c40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036c44:	b29b      	uxth	r3, r3
 8036c46:	3b01      	subs	r3, #1
 8036c48:	b29a      	uxth	r2, r3
 8036c4a:	687b      	ldr	r3, [r7, #4]
 8036c4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036c50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036c52:	3b01      	subs	r3, #1
 8036c54:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036c56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036c58:	2b00      	cmp	r3, #0
 8036c5a:	d1a4      	bne.n	8036ba6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8036c5c:	e7ff      	b.n	8036c5e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8036c5e:	bf00      	nop
 8036c60:	3744      	adds	r7, #68	; 0x44
 8036c62:	46bd      	mov	sp, r7
 8036c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036c68:	4770      	bx	lr

08036c6a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8036c6a:	b480      	push	{r7}
 8036c6c:	b091      	sub	sp, #68	; 0x44
 8036c6e:	af00      	add	r7, sp, #0
 8036c70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036c72:	687b      	ldr	r3, [r7, #4]
 8036c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036c78:	2b21      	cmp	r3, #33	; 0x21
 8036c7a:	d165      	bne.n	8036d48 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036c7c:	687b      	ldr	r3, [r7, #4]
 8036c7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036c82:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036c84:	e05c      	b.n	8036d40 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8036c86:	687b      	ldr	r3, [r7, #4]
 8036c88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036c8c:	b29b      	uxth	r3, r3
 8036c8e:	2b00      	cmp	r3, #0
 8036c90:	d133      	bne.n	8036cfa <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8036c92:	687b      	ldr	r3, [r7, #4]
 8036c94:	681b      	ldr	r3, [r3, #0]
 8036c96:	3308      	adds	r3, #8
 8036c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c9a:	6a3b      	ldr	r3, [r7, #32]
 8036c9c:	e853 3f00 	ldrex	r3, [r3]
 8036ca0:	61fb      	str	r3, [r7, #28]
   return(result);
 8036ca2:	69fb      	ldr	r3, [r7, #28]
 8036ca4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8036ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8036caa:	687b      	ldr	r3, [r7, #4]
 8036cac:	681b      	ldr	r3, [r3, #0]
 8036cae:	3308      	adds	r3, #8
 8036cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8036cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036cba:	e841 2300 	strex	r3, r2, [r1]
 8036cbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036cc2:	2b00      	cmp	r3, #0
 8036cc4:	d1e5      	bne.n	8036c92 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036cc6:	687b      	ldr	r3, [r7, #4]
 8036cc8:	681b      	ldr	r3, [r3, #0]
 8036cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036ccc:	68fb      	ldr	r3, [r7, #12]
 8036cce:	e853 3f00 	ldrex	r3, [r3]
 8036cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8036cd4:	68bb      	ldr	r3, [r7, #8]
 8036cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036cda:	633b      	str	r3, [r7, #48]	; 0x30
 8036cdc:	687b      	ldr	r3, [r7, #4]
 8036cde:	681b      	ldr	r3, [r3, #0]
 8036ce0:	461a      	mov	r2, r3
 8036ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036ce4:	61bb      	str	r3, [r7, #24]
 8036ce6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036ce8:	6979      	ldr	r1, [r7, #20]
 8036cea:	69ba      	ldr	r2, [r7, #24]
 8036cec:	e841 2300 	strex	r3, r2, [r1]
 8036cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8036cf2:	693b      	ldr	r3, [r7, #16]
 8036cf4:	2b00      	cmp	r3, #0
 8036cf6:	d1e6      	bne.n	8036cc6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8036cf8:	e026      	b.n	8036d48 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8036cfa:	687b      	ldr	r3, [r7, #4]
 8036cfc:	681b      	ldr	r3, [r3, #0]
 8036cfe:	69db      	ldr	r3, [r3, #28]
 8036d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036d04:	2b00      	cmp	r3, #0
 8036d06:	d018      	beq.n	8036d3a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8036d08:	687b      	ldr	r3, [r7, #4]
 8036d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036d0c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8036d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036d10:	881b      	ldrh	r3, [r3, #0]
 8036d12:	461a      	mov	r2, r3
 8036d14:	687b      	ldr	r3, [r7, #4]
 8036d16:	681b      	ldr	r3, [r3, #0]
 8036d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036d1c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8036d1e:	687b      	ldr	r3, [r7, #4]
 8036d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036d22:	1c9a      	adds	r2, r3, #2
 8036d24:	687b      	ldr	r3, [r7, #4]
 8036d26:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8036d28:	687b      	ldr	r3, [r7, #4]
 8036d2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036d2e:	b29b      	uxth	r3, r3
 8036d30:	3b01      	subs	r3, #1
 8036d32:	b29a      	uxth	r2, r3
 8036d34:	687b      	ldr	r3, [r7, #4]
 8036d36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036d3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036d3c:	3b01      	subs	r3, #1
 8036d3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036d40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036d42:	2b00      	cmp	r3, #0
 8036d44:	d19f      	bne.n	8036c86 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8036d46:	e7ff      	b.n	8036d48 <UART_TxISR_16BIT_FIFOEN+0xde>
 8036d48:	bf00      	nop
 8036d4a:	3744      	adds	r7, #68	; 0x44
 8036d4c:	46bd      	mov	sp, r7
 8036d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036d52:	4770      	bx	lr

08036d54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8036d54:	b580      	push	{r7, lr}
 8036d56:	b088      	sub	sp, #32
 8036d58:	af00      	add	r7, sp, #0
 8036d5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036d5c:	687b      	ldr	r3, [r7, #4]
 8036d5e:	681b      	ldr	r3, [r3, #0]
 8036d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036d62:	68fb      	ldr	r3, [r7, #12]
 8036d64:	e853 3f00 	ldrex	r3, [r3]
 8036d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8036d6a:	68bb      	ldr	r3, [r7, #8]
 8036d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8036d70:	61fb      	str	r3, [r7, #28]
 8036d72:	687b      	ldr	r3, [r7, #4]
 8036d74:	681b      	ldr	r3, [r3, #0]
 8036d76:	461a      	mov	r2, r3
 8036d78:	69fb      	ldr	r3, [r7, #28]
 8036d7a:	61bb      	str	r3, [r7, #24]
 8036d7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036d7e:	6979      	ldr	r1, [r7, #20]
 8036d80:	69ba      	ldr	r2, [r7, #24]
 8036d82:	e841 2300 	strex	r3, r2, [r1]
 8036d86:	613b      	str	r3, [r7, #16]
   return(result);
 8036d88:	693b      	ldr	r3, [r7, #16]
 8036d8a:	2b00      	cmp	r3, #0
 8036d8c:	d1e6      	bne.n	8036d5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8036d8e:	687b      	ldr	r3, [r7, #4]
 8036d90:	2220      	movs	r2, #32
 8036d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8036d96:	687b      	ldr	r3, [r7, #4]
 8036d98:	2200      	movs	r2, #0
 8036d9a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8036d9c:	6878      	ldr	r0, [r7, #4]
 8036d9e:	f7f2 fd81 	bl	80298a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036da2:	bf00      	nop
 8036da4:	3720      	adds	r7, #32
 8036da6:	46bd      	mov	sp, r7
 8036da8:	bd80      	pop	{r7, pc}

08036daa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8036daa:	b580      	push	{r7, lr}
 8036dac:	b096      	sub	sp, #88	; 0x58
 8036dae:	af00      	add	r7, sp, #0
 8036db0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8036db2:	687b      	ldr	r3, [r7, #4]
 8036db4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8036db8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8036dbc:	687b      	ldr	r3, [r7, #4]
 8036dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8036dc2:	2b22      	cmp	r3, #34	; 0x22
 8036dc4:	f040 8095 	bne.w	8036ef2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8036dc8:	687b      	ldr	r3, [r7, #4]
 8036dca:	681b      	ldr	r3, [r3, #0]
 8036dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036dce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8036dd2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8036dd6:	b2d9      	uxtb	r1, r3
 8036dd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8036ddc:	b2da      	uxtb	r2, r3
 8036dde:	687b      	ldr	r3, [r7, #4]
 8036de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036de2:	400a      	ands	r2, r1
 8036de4:	b2d2      	uxtb	r2, r2
 8036de6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8036de8:	687b      	ldr	r3, [r7, #4]
 8036dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036dec:	1c5a      	adds	r2, r3, #1
 8036dee:	687b      	ldr	r3, [r7, #4]
 8036df0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8036df2:	687b      	ldr	r3, [r7, #4]
 8036df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036df8:	b29b      	uxth	r3, r3
 8036dfa:	3b01      	subs	r3, #1
 8036dfc:	b29a      	uxth	r2, r3
 8036dfe:	687b      	ldr	r3, [r7, #4]
 8036e00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8036e04:	687b      	ldr	r3, [r7, #4]
 8036e06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036e0a:	b29b      	uxth	r3, r3
 8036e0c:	2b00      	cmp	r3, #0
 8036e0e:	d178      	bne.n	8036f02 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8036e10:	687b      	ldr	r3, [r7, #4]
 8036e12:	681b      	ldr	r3, [r3, #0]
 8036e14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036e18:	e853 3f00 	ldrex	r3, [r3]
 8036e1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8036e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036e24:	653b      	str	r3, [r7, #80]	; 0x50
 8036e26:	687b      	ldr	r3, [r7, #4]
 8036e28:	681b      	ldr	r3, [r3, #0]
 8036e2a:	461a      	mov	r2, r3
 8036e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8036e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8036e30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036e32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8036e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8036e36:	e841 2300 	strex	r3, r2, [r1]
 8036e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8036e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036e3e:	2b00      	cmp	r3, #0
 8036e40:	d1e6      	bne.n	8036e10 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036e42:	687b      	ldr	r3, [r7, #4]
 8036e44:	681b      	ldr	r3, [r3, #0]
 8036e46:	3308      	adds	r3, #8
 8036e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036e4c:	e853 3f00 	ldrex	r3, [r3]
 8036e50:	623b      	str	r3, [r7, #32]
   return(result);
 8036e52:	6a3b      	ldr	r3, [r7, #32]
 8036e54:	f023 0301 	bic.w	r3, r3, #1
 8036e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8036e5a:	687b      	ldr	r3, [r7, #4]
 8036e5c:	681b      	ldr	r3, [r3, #0]
 8036e5e:	3308      	adds	r3, #8
 8036e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8036e62:	633a      	str	r2, [r7, #48]	; 0x30
 8036e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036e6a:	e841 2300 	strex	r3, r2, [r1]
 8036e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036e72:	2b00      	cmp	r3, #0
 8036e74:	d1e5      	bne.n	8036e42 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8036e76:	687b      	ldr	r3, [r7, #4]
 8036e78:	2220      	movs	r2, #32
 8036e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8036e7e:	687b      	ldr	r3, [r7, #4]
 8036e80:	2200      	movs	r2, #0
 8036e82:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8036e84:	687b      	ldr	r3, [r7, #4]
 8036e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8036e88:	2b01      	cmp	r3, #1
 8036e8a:	d12e      	bne.n	8036eea <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036e8c:	687b      	ldr	r3, [r7, #4]
 8036e8e:	2200      	movs	r2, #0
 8036e90:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036e92:	687b      	ldr	r3, [r7, #4]
 8036e94:	681b      	ldr	r3, [r3, #0]
 8036e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036e98:	693b      	ldr	r3, [r7, #16]
 8036e9a:	e853 3f00 	ldrex	r3, [r3]
 8036e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8036ea0:	68fb      	ldr	r3, [r7, #12]
 8036ea2:	f023 0310 	bic.w	r3, r3, #16
 8036ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8036ea8:	687b      	ldr	r3, [r7, #4]
 8036eaa:	681b      	ldr	r3, [r3, #0]
 8036eac:	461a      	mov	r2, r3
 8036eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8036eb0:	61fb      	str	r3, [r7, #28]
 8036eb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036eb4:	69b9      	ldr	r1, [r7, #24]
 8036eb6:	69fa      	ldr	r2, [r7, #28]
 8036eb8:	e841 2300 	strex	r3, r2, [r1]
 8036ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8036ebe:	697b      	ldr	r3, [r7, #20]
 8036ec0:	2b00      	cmp	r3, #0
 8036ec2:	d1e6      	bne.n	8036e92 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8036ec4:	687b      	ldr	r3, [r7, #4]
 8036ec6:	681b      	ldr	r3, [r3, #0]
 8036ec8:	69db      	ldr	r3, [r3, #28]
 8036eca:	f003 0310 	and.w	r3, r3, #16
 8036ece:	2b10      	cmp	r3, #16
 8036ed0:	d103      	bne.n	8036eda <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8036ed2:	687b      	ldr	r3, [r7, #4]
 8036ed4:	681b      	ldr	r3, [r3, #0]
 8036ed6:	2210      	movs	r2, #16
 8036ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8036eda:	687b      	ldr	r3, [r7, #4]
 8036edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8036ee0:	4619      	mov	r1, r3
 8036ee2:	6878      	ldr	r0, [r7, #4]
 8036ee4:	f7fe fcc4 	bl	8035870 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8036ee8:	e00b      	b.n	8036f02 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8036eea:	6878      	ldr	r0, [r7, #4]
 8036eec:	f7f2 fcb6 	bl	802985c <HAL_UART_RxCpltCallback>
}
 8036ef0:	e007      	b.n	8036f02 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8036ef2:	687b      	ldr	r3, [r7, #4]
 8036ef4:	681b      	ldr	r3, [r3, #0]
 8036ef6:	699a      	ldr	r2, [r3, #24]
 8036ef8:	687b      	ldr	r3, [r7, #4]
 8036efa:	681b      	ldr	r3, [r3, #0]
 8036efc:	f042 0208 	orr.w	r2, r2, #8
 8036f00:	619a      	str	r2, [r3, #24]
}
 8036f02:	bf00      	nop
 8036f04:	3758      	adds	r7, #88	; 0x58
 8036f06:	46bd      	mov	sp, r7
 8036f08:	bd80      	pop	{r7, pc}

08036f0a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8036f0a:	b580      	push	{r7, lr}
 8036f0c:	b096      	sub	sp, #88	; 0x58
 8036f0e:	af00      	add	r7, sp, #0
 8036f10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8036f12:	687b      	ldr	r3, [r7, #4]
 8036f14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8036f18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8036f1c:	687b      	ldr	r3, [r7, #4]
 8036f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8036f22:	2b22      	cmp	r3, #34	; 0x22
 8036f24:	f040 8095 	bne.w	8037052 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8036f28:	687b      	ldr	r3, [r7, #4]
 8036f2a:	681b      	ldr	r3, [r3, #0]
 8036f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036f2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8036f32:	687b      	ldr	r3, [r7, #4]
 8036f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036f36:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8036f38:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8036f3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8036f40:	4013      	ands	r3, r2
 8036f42:	b29a      	uxth	r2, r3
 8036f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8036f46:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8036f48:	687b      	ldr	r3, [r7, #4]
 8036f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036f4c:	1c9a      	adds	r2, r3, #2
 8036f4e:	687b      	ldr	r3, [r7, #4]
 8036f50:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8036f52:	687b      	ldr	r3, [r7, #4]
 8036f54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036f58:	b29b      	uxth	r3, r3
 8036f5a:	3b01      	subs	r3, #1
 8036f5c:	b29a      	uxth	r2, r3
 8036f5e:	687b      	ldr	r3, [r7, #4]
 8036f60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8036f64:	687b      	ldr	r3, [r7, #4]
 8036f66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036f6a:	b29b      	uxth	r3, r3
 8036f6c:	2b00      	cmp	r3, #0
 8036f6e:	d178      	bne.n	8037062 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8036f70:	687b      	ldr	r3, [r7, #4]
 8036f72:	681b      	ldr	r3, [r3, #0]
 8036f74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036f78:	e853 3f00 	ldrex	r3, [r3]
 8036f7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8036f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036f80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036f84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8036f86:	687b      	ldr	r3, [r7, #4]
 8036f88:	681b      	ldr	r3, [r3, #0]
 8036f8a:	461a      	mov	r2, r3
 8036f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8036f90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036f92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8036f94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8036f96:	e841 2300 	strex	r3, r2, [r1]
 8036f9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8036f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036f9e:	2b00      	cmp	r3, #0
 8036fa0:	d1e6      	bne.n	8036f70 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036fa2:	687b      	ldr	r3, [r7, #4]
 8036fa4:	681b      	ldr	r3, [r3, #0]
 8036fa6:	3308      	adds	r3, #8
 8036fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036faa:	6a3b      	ldr	r3, [r7, #32]
 8036fac:	e853 3f00 	ldrex	r3, [r3]
 8036fb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8036fb2:	69fb      	ldr	r3, [r7, #28]
 8036fb4:	f023 0301 	bic.w	r3, r3, #1
 8036fb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8036fba:	687b      	ldr	r3, [r7, #4]
 8036fbc:	681b      	ldr	r3, [r3, #0]
 8036fbe:	3308      	adds	r3, #8
 8036fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8036fc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036fca:	e841 2300 	strex	r3, r2, [r1]
 8036fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036fd2:	2b00      	cmp	r3, #0
 8036fd4:	d1e5      	bne.n	8036fa2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8036fd6:	687b      	ldr	r3, [r7, #4]
 8036fd8:	2220      	movs	r2, #32
 8036fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8036fde:	687b      	ldr	r3, [r7, #4]
 8036fe0:	2200      	movs	r2, #0
 8036fe2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8036fe4:	687b      	ldr	r3, [r7, #4]
 8036fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8036fe8:	2b01      	cmp	r3, #1
 8036fea:	d12e      	bne.n	803704a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036fec:	687b      	ldr	r3, [r7, #4]
 8036fee:	2200      	movs	r2, #0
 8036ff0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036ff2:	687b      	ldr	r3, [r7, #4]
 8036ff4:	681b      	ldr	r3, [r3, #0]
 8036ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036ff8:	68fb      	ldr	r3, [r7, #12]
 8036ffa:	e853 3f00 	ldrex	r3, [r3]
 8036ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 8037000:	68bb      	ldr	r3, [r7, #8]
 8037002:	f023 0310 	bic.w	r3, r3, #16
 8037006:	647b      	str	r3, [r7, #68]	; 0x44
 8037008:	687b      	ldr	r3, [r7, #4]
 803700a:	681b      	ldr	r3, [r3, #0]
 803700c:	461a      	mov	r2, r3
 803700e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8037010:	61bb      	str	r3, [r7, #24]
 8037012:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037014:	6979      	ldr	r1, [r7, #20]
 8037016:	69ba      	ldr	r2, [r7, #24]
 8037018:	e841 2300 	strex	r3, r2, [r1]
 803701c:	613b      	str	r3, [r7, #16]
   return(result);
 803701e:	693b      	ldr	r3, [r7, #16]
 8037020:	2b00      	cmp	r3, #0
 8037022:	d1e6      	bne.n	8036ff2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8037024:	687b      	ldr	r3, [r7, #4]
 8037026:	681b      	ldr	r3, [r3, #0]
 8037028:	69db      	ldr	r3, [r3, #28]
 803702a:	f003 0310 	and.w	r3, r3, #16
 803702e:	2b10      	cmp	r3, #16
 8037030:	d103      	bne.n	803703a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8037032:	687b      	ldr	r3, [r7, #4]
 8037034:	681b      	ldr	r3, [r3, #0]
 8037036:	2210      	movs	r2, #16
 8037038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803703a:	687b      	ldr	r3, [r7, #4]
 803703c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8037040:	4619      	mov	r1, r3
 8037042:	6878      	ldr	r0, [r7, #4]
 8037044:	f7fe fc14 	bl	8035870 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037048:	e00b      	b.n	8037062 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803704a:	6878      	ldr	r0, [r7, #4]
 803704c:	f7f2 fc06 	bl	802985c <HAL_UART_RxCpltCallback>
}
 8037050:	e007      	b.n	8037062 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037052:	687b      	ldr	r3, [r7, #4]
 8037054:	681b      	ldr	r3, [r3, #0]
 8037056:	699a      	ldr	r2, [r3, #24]
 8037058:	687b      	ldr	r3, [r7, #4]
 803705a:	681b      	ldr	r3, [r3, #0]
 803705c:	f042 0208 	orr.w	r2, r2, #8
 8037060:	619a      	str	r2, [r3, #24]
}
 8037062:	bf00      	nop
 8037064:	3758      	adds	r7, #88	; 0x58
 8037066:	46bd      	mov	sp, r7
 8037068:	bd80      	pop	{r7, pc}
	...

0803706c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803706c:	b580      	push	{r7, lr}
 803706e:	b0a6      	sub	sp, #152	; 0x98
 8037070:	af00      	add	r7, sp, #0
 8037072:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8037074:	687b      	ldr	r3, [r7, #4]
 8037076:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803707a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 803707e:	687b      	ldr	r3, [r7, #4]
 8037080:	681b      	ldr	r3, [r3, #0]
 8037082:	69db      	ldr	r3, [r3, #28]
 8037084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8037088:	687b      	ldr	r3, [r7, #4]
 803708a:	681b      	ldr	r3, [r3, #0]
 803708c:	681b      	ldr	r3, [r3, #0]
 803708e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8037092:	687b      	ldr	r3, [r7, #4]
 8037094:	681b      	ldr	r3, [r3, #0]
 8037096:	689b      	ldr	r3, [r3, #8]
 8037098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803709c:	687b      	ldr	r3, [r7, #4]
 803709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80370a2:	2b22      	cmp	r3, #34	; 0x22
 80370a4:	f040 814d 	bne.w	8037342 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80370a8:	687b      	ldr	r3, [r7, #4]
 80370aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80370ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80370b2:	e0f4      	b.n	803729e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80370b4:	687b      	ldr	r3, [r7, #4]
 80370b6:	681b      	ldr	r3, [r3, #0]
 80370b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80370ba:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80370be:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80370c2:	b2d9      	uxtb	r1, r3
 80370c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80370c8:	b2da      	uxtb	r2, r3
 80370ca:	687b      	ldr	r3, [r7, #4]
 80370cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80370ce:	400a      	ands	r2, r1
 80370d0:	b2d2      	uxtb	r2, r2
 80370d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80370d4:	687b      	ldr	r3, [r7, #4]
 80370d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80370d8:	1c5a      	adds	r2, r3, #1
 80370da:	687b      	ldr	r3, [r7, #4]
 80370dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80370de:	687b      	ldr	r3, [r7, #4]
 80370e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80370e4:	b29b      	uxth	r3, r3
 80370e6:	3b01      	subs	r3, #1
 80370e8:	b29a      	uxth	r2, r3
 80370ea:	687b      	ldr	r3, [r7, #4]
 80370ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80370f0:	687b      	ldr	r3, [r7, #4]
 80370f2:	681b      	ldr	r3, [r3, #0]
 80370f4:	69db      	ldr	r3, [r3, #28]
 80370f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80370fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80370fe:	f003 0307 	and.w	r3, r3, #7
 8037102:	2b00      	cmp	r3, #0
 8037104:	d053      	beq.n	80371ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8037106:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803710a:	f003 0301 	and.w	r3, r3, #1
 803710e:	2b00      	cmp	r3, #0
 8037110:	d011      	beq.n	8037136 <UART_RxISR_8BIT_FIFOEN+0xca>
 8037112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8037116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803711a:	2b00      	cmp	r3, #0
 803711c:	d00b      	beq.n	8037136 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803711e:	687b      	ldr	r3, [r7, #4]
 8037120:	681b      	ldr	r3, [r3, #0]
 8037122:	2201      	movs	r2, #1
 8037124:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8037126:	687b      	ldr	r3, [r7, #4]
 8037128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803712c:	f043 0201 	orr.w	r2, r3, #1
 8037130:	687b      	ldr	r3, [r7, #4]
 8037132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037136:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803713a:	f003 0302 	and.w	r3, r3, #2
 803713e:	2b00      	cmp	r3, #0
 8037140:	d011      	beq.n	8037166 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8037142:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8037146:	f003 0301 	and.w	r3, r3, #1
 803714a:	2b00      	cmp	r3, #0
 803714c:	d00b      	beq.n	8037166 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803714e:	687b      	ldr	r3, [r7, #4]
 8037150:	681b      	ldr	r3, [r3, #0]
 8037152:	2202      	movs	r2, #2
 8037154:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8037156:	687b      	ldr	r3, [r7, #4]
 8037158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803715c:	f043 0204 	orr.w	r2, r3, #4
 8037160:	687b      	ldr	r3, [r7, #4]
 8037162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037166:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803716a:	f003 0304 	and.w	r3, r3, #4
 803716e:	2b00      	cmp	r3, #0
 8037170:	d011      	beq.n	8037196 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8037172:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8037176:	f003 0301 	and.w	r3, r3, #1
 803717a:	2b00      	cmp	r3, #0
 803717c:	d00b      	beq.n	8037196 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803717e:	687b      	ldr	r3, [r7, #4]
 8037180:	681b      	ldr	r3, [r3, #0]
 8037182:	2204      	movs	r2, #4
 8037184:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8037186:	687b      	ldr	r3, [r7, #4]
 8037188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803718c:	f043 0202 	orr.w	r2, r3, #2
 8037190:	687b      	ldr	r3, [r7, #4]
 8037192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8037196:	687b      	ldr	r3, [r7, #4]
 8037198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803719c:	2b00      	cmp	r3, #0
 803719e:	d006      	beq.n	80371ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80371a0:	6878      	ldr	r0, [r7, #4]
 80371a2:	f7fe fb5b 	bl	803585c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80371a6:	687b      	ldr	r3, [r7, #4]
 80371a8:	2200      	movs	r2, #0
 80371aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80371ae:	687b      	ldr	r3, [r7, #4]
 80371b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80371b4:	b29b      	uxth	r3, r3
 80371b6:	2b00      	cmp	r3, #0
 80371b8:	d171      	bne.n	803729e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80371ba:	687b      	ldr	r3, [r7, #4]
 80371bc:	681b      	ldr	r3, [r3, #0]
 80371be:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80371c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80371c2:	e853 3f00 	ldrex	r3, [r3]
 80371c6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80371c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80371ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80371ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80371d2:	687b      	ldr	r3, [r7, #4]
 80371d4:	681b      	ldr	r3, [r3, #0]
 80371d6:	461a      	mov	r2, r3
 80371d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80371dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80371de:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80371e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80371e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80371e4:	e841 2300 	strex	r3, r2, [r1]
 80371e8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80371ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80371ec:	2b00      	cmp	r3, #0
 80371ee:	d1e4      	bne.n	80371ba <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80371f0:	687b      	ldr	r3, [r7, #4]
 80371f2:	681b      	ldr	r3, [r3, #0]
 80371f4:	3308      	adds	r3, #8
 80371f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80371f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80371fa:	e853 3f00 	ldrex	r3, [r3]
 80371fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8037200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8037202:	4b56      	ldr	r3, [pc, #344]	; (803735c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8037204:	4013      	ands	r3, r2
 8037206:	67fb      	str	r3, [r7, #124]	; 0x7c
 8037208:	687b      	ldr	r3, [r7, #4]
 803720a:	681b      	ldr	r3, [r3, #0]
 803720c:	3308      	adds	r3, #8
 803720e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8037210:	657a      	str	r2, [r7, #84]	; 0x54
 8037212:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037214:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8037216:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8037218:	e841 2300 	strex	r3, r2, [r1]
 803721c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 803721e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037220:	2b00      	cmp	r3, #0
 8037222:	d1e5      	bne.n	80371f0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8037224:	687b      	ldr	r3, [r7, #4]
 8037226:	2220      	movs	r2, #32
 8037228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803722c:	687b      	ldr	r3, [r7, #4]
 803722e:	2200      	movs	r2, #0
 8037230:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037232:	687b      	ldr	r3, [r7, #4]
 8037234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8037236:	2b01      	cmp	r3, #1
 8037238:	d12e      	bne.n	8037298 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803723a:	687b      	ldr	r3, [r7, #4]
 803723c:	2200      	movs	r2, #0
 803723e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8037240:	687b      	ldr	r3, [r7, #4]
 8037242:	681b      	ldr	r3, [r3, #0]
 8037244:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037248:	e853 3f00 	ldrex	r3, [r3]
 803724c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037250:	f023 0310 	bic.w	r3, r3, #16
 8037254:	67bb      	str	r3, [r7, #120]	; 0x78
 8037256:	687b      	ldr	r3, [r7, #4]
 8037258:	681b      	ldr	r3, [r3, #0]
 803725a:	461a      	mov	r2, r3
 803725c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803725e:	643b      	str	r3, [r7, #64]	; 0x40
 8037260:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037262:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8037264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8037266:	e841 2300 	strex	r3, r2, [r1]
 803726a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803726e:	2b00      	cmp	r3, #0
 8037270:	d1e6      	bne.n	8037240 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8037272:	687b      	ldr	r3, [r7, #4]
 8037274:	681b      	ldr	r3, [r3, #0]
 8037276:	69db      	ldr	r3, [r3, #28]
 8037278:	f003 0310 	and.w	r3, r3, #16
 803727c:	2b10      	cmp	r3, #16
 803727e:	d103      	bne.n	8037288 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8037280:	687b      	ldr	r3, [r7, #4]
 8037282:	681b      	ldr	r3, [r3, #0]
 8037284:	2210      	movs	r2, #16
 8037286:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8037288:	687b      	ldr	r3, [r7, #4]
 803728a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803728e:	4619      	mov	r1, r3
 8037290:	6878      	ldr	r0, [r7, #4]
 8037292:	f7fe faed 	bl	8035870 <HAL_UARTEx_RxEventCallback>
 8037296:	e002      	b.n	803729e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8037298:	6878      	ldr	r0, [r7, #4]
 803729a:	f7f2 fadf 	bl	802985c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803729e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80372a2:	2b00      	cmp	r3, #0
 80372a4:	d006      	beq.n	80372b4 <UART_RxISR_8BIT_FIFOEN+0x248>
 80372a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80372aa:	f003 0320 	and.w	r3, r3, #32
 80372ae:	2b00      	cmp	r3, #0
 80372b0:	f47f af00 	bne.w	80370b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80372b4:	687b      	ldr	r3, [r7, #4]
 80372b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80372ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80372be:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80372c2:	2b00      	cmp	r3, #0
 80372c4:	d045      	beq.n	8037352 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80372c6:	687b      	ldr	r3, [r7, #4]
 80372c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80372cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80372d0:	429a      	cmp	r2, r3
 80372d2:	d23e      	bcs.n	8037352 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80372d4:	687b      	ldr	r3, [r7, #4]
 80372d6:	681b      	ldr	r3, [r3, #0]
 80372d8:	3308      	adds	r3, #8
 80372da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80372dc:	6a3b      	ldr	r3, [r7, #32]
 80372de:	e853 3f00 	ldrex	r3, [r3]
 80372e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80372e4:	69fb      	ldr	r3, [r7, #28]
 80372e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80372ea:	673b      	str	r3, [r7, #112]	; 0x70
 80372ec:	687b      	ldr	r3, [r7, #4]
 80372ee:	681b      	ldr	r3, [r3, #0]
 80372f0:	3308      	adds	r3, #8
 80372f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80372f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80372f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80372f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80372fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80372fc:	e841 2300 	strex	r3, r2, [r1]
 8037300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8037302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037304:	2b00      	cmp	r3, #0
 8037306:	d1e5      	bne.n	80372d4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8037308:	687b      	ldr	r3, [r7, #4]
 803730a:	4a15      	ldr	r2, [pc, #84]	; (8037360 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 803730c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803730e:	687b      	ldr	r3, [r7, #4]
 8037310:	681b      	ldr	r3, [r3, #0]
 8037312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037314:	68fb      	ldr	r3, [r7, #12]
 8037316:	e853 3f00 	ldrex	r3, [r3]
 803731a:	60bb      	str	r3, [r7, #8]
   return(result);
 803731c:	68bb      	ldr	r3, [r7, #8]
 803731e:	f043 0320 	orr.w	r3, r3, #32
 8037322:	66fb      	str	r3, [r7, #108]	; 0x6c
 8037324:	687b      	ldr	r3, [r7, #4]
 8037326:	681b      	ldr	r3, [r3, #0]
 8037328:	461a      	mov	r2, r3
 803732a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803732c:	61bb      	str	r3, [r7, #24]
 803732e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037330:	6979      	ldr	r1, [r7, #20]
 8037332:	69ba      	ldr	r2, [r7, #24]
 8037334:	e841 2300 	strex	r3, r2, [r1]
 8037338:	613b      	str	r3, [r7, #16]
   return(result);
 803733a:	693b      	ldr	r3, [r7, #16]
 803733c:	2b00      	cmp	r3, #0
 803733e:	d1e6      	bne.n	803730e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037340:	e007      	b.n	8037352 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037342:	687b      	ldr	r3, [r7, #4]
 8037344:	681b      	ldr	r3, [r3, #0]
 8037346:	699a      	ldr	r2, [r3, #24]
 8037348:	687b      	ldr	r3, [r7, #4]
 803734a:	681b      	ldr	r3, [r3, #0]
 803734c:	f042 0208 	orr.w	r2, r2, #8
 8037350:	619a      	str	r2, [r3, #24]
}
 8037352:	bf00      	nop
 8037354:	3798      	adds	r7, #152	; 0x98
 8037356:	46bd      	mov	sp, r7
 8037358:	bd80      	pop	{r7, pc}
 803735a:	bf00      	nop
 803735c:	effffffe 	.word	0xeffffffe
 8037360:	08036dab 	.word	0x08036dab

08037364 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8037364:	b580      	push	{r7, lr}
 8037366:	b0a8      	sub	sp, #160	; 0xa0
 8037368:	af00      	add	r7, sp, #0
 803736a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 803736c:	687b      	ldr	r3, [r7, #4]
 803736e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8037372:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8037376:	687b      	ldr	r3, [r7, #4]
 8037378:	681b      	ldr	r3, [r3, #0]
 803737a:	69db      	ldr	r3, [r3, #28]
 803737c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8037380:	687b      	ldr	r3, [r7, #4]
 8037382:	681b      	ldr	r3, [r3, #0]
 8037384:	681b      	ldr	r3, [r3, #0]
 8037386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 803738a:	687b      	ldr	r3, [r7, #4]
 803738c:	681b      	ldr	r3, [r3, #0]
 803738e:	689b      	ldr	r3, [r3, #8]
 8037390:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8037394:	687b      	ldr	r3, [r7, #4]
 8037396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803739a:	2b22      	cmp	r3, #34	; 0x22
 803739c:	f040 8151 	bne.w	8037642 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80373a0:	687b      	ldr	r3, [r7, #4]
 80373a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80373a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80373aa:	e0f8      	b.n	803759e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80373ac:	687b      	ldr	r3, [r7, #4]
 80373ae:	681b      	ldr	r3, [r3, #0]
 80373b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80373b2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80373b6:	687b      	ldr	r3, [r7, #4]
 80373b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80373ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80373be:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80373c2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80373c6:	4013      	ands	r3, r2
 80373c8:	b29a      	uxth	r2, r3
 80373ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80373ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80373d0:	687b      	ldr	r3, [r7, #4]
 80373d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80373d4:	1c9a      	adds	r2, r3, #2
 80373d6:	687b      	ldr	r3, [r7, #4]
 80373d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80373da:	687b      	ldr	r3, [r7, #4]
 80373dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80373e0:	b29b      	uxth	r3, r3
 80373e2:	3b01      	subs	r3, #1
 80373e4:	b29a      	uxth	r2, r3
 80373e6:	687b      	ldr	r3, [r7, #4]
 80373e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80373ec:	687b      	ldr	r3, [r7, #4]
 80373ee:	681b      	ldr	r3, [r3, #0]
 80373f0:	69db      	ldr	r3, [r3, #28]
 80373f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80373f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80373fa:	f003 0307 	and.w	r3, r3, #7
 80373fe:	2b00      	cmp	r3, #0
 8037400:	d053      	beq.n	80374aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8037402:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8037406:	f003 0301 	and.w	r3, r3, #1
 803740a:	2b00      	cmp	r3, #0
 803740c:	d011      	beq.n	8037432 <UART_RxISR_16BIT_FIFOEN+0xce>
 803740e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8037412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8037416:	2b00      	cmp	r3, #0
 8037418:	d00b      	beq.n	8037432 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803741a:	687b      	ldr	r3, [r7, #4]
 803741c:	681b      	ldr	r3, [r3, #0]
 803741e:	2201      	movs	r2, #1
 8037420:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8037422:	687b      	ldr	r3, [r7, #4]
 8037424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037428:	f043 0201 	orr.w	r2, r3, #1
 803742c:	687b      	ldr	r3, [r7, #4]
 803742e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037432:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8037436:	f003 0302 	and.w	r3, r3, #2
 803743a:	2b00      	cmp	r3, #0
 803743c:	d011      	beq.n	8037462 <UART_RxISR_16BIT_FIFOEN+0xfe>
 803743e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8037442:	f003 0301 	and.w	r3, r3, #1
 8037446:	2b00      	cmp	r3, #0
 8037448:	d00b      	beq.n	8037462 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803744a:	687b      	ldr	r3, [r7, #4]
 803744c:	681b      	ldr	r3, [r3, #0]
 803744e:	2202      	movs	r2, #2
 8037450:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8037452:	687b      	ldr	r3, [r7, #4]
 8037454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037458:	f043 0204 	orr.w	r2, r3, #4
 803745c:	687b      	ldr	r3, [r7, #4]
 803745e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037462:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8037466:	f003 0304 	and.w	r3, r3, #4
 803746a:	2b00      	cmp	r3, #0
 803746c:	d011      	beq.n	8037492 <UART_RxISR_16BIT_FIFOEN+0x12e>
 803746e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8037472:	f003 0301 	and.w	r3, r3, #1
 8037476:	2b00      	cmp	r3, #0
 8037478:	d00b      	beq.n	8037492 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803747a:	687b      	ldr	r3, [r7, #4]
 803747c:	681b      	ldr	r3, [r3, #0]
 803747e:	2204      	movs	r2, #4
 8037480:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8037482:	687b      	ldr	r3, [r7, #4]
 8037484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037488:	f043 0202 	orr.w	r2, r3, #2
 803748c:	687b      	ldr	r3, [r7, #4]
 803748e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8037492:	687b      	ldr	r3, [r7, #4]
 8037494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037498:	2b00      	cmp	r3, #0
 803749a:	d006      	beq.n	80374aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803749c:	6878      	ldr	r0, [r7, #4]
 803749e:	f7fe f9dd 	bl	803585c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80374a2:	687b      	ldr	r3, [r7, #4]
 80374a4:	2200      	movs	r2, #0
 80374a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80374aa:	687b      	ldr	r3, [r7, #4]
 80374ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80374b0:	b29b      	uxth	r3, r3
 80374b2:	2b00      	cmp	r3, #0
 80374b4:	d173      	bne.n	803759e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80374b6:	687b      	ldr	r3, [r7, #4]
 80374b8:	681b      	ldr	r3, [r3, #0]
 80374ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80374bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80374be:	e853 3f00 	ldrex	r3, [r3]
 80374c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80374c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80374c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80374ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80374ce:	687b      	ldr	r3, [r7, #4]
 80374d0:	681b      	ldr	r3, [r3, #0]
 80374d2:	461a      	mov	r2, r3
 80374d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80374d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80374da:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80374dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80374de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80374e0:	e841 2300 	strex	r3, r2, [r1]
 80374e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80374e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80374e8:	2b00      	cmp	r3, #0
 80374ea:	d1e4      	bne.n	80374b6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80374ec:	687b      	ldr	r3, [r7, #4]
 80374ee:	681b      	ldr	r3, [r3, #0]
 80374f0:	3308      	adds	r3, #8
 80374f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80374f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80374f6:	e853 3f00 	ldrex	r3, [r3]
 80374fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80374fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80374fe:	4b57      	ldr	r3, [pc, #348]	; (803765c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8037500:	4013      	ands	r3, r2
 8037502:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8037506:	687b      	ldr	r3, [r7, #4]
 8037508:	681b      	ldr	r3, [r3, #0]
 803750a:	3308      	adds	r3, #8
 803750c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8037510:	65ba      	str	r2, [r7, #88]	; 0x58
 8037512:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037514:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8037516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8037518:	e841 2300 	strex	r3, r2, [r1]
 803751c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 803751e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8037520:	2b00      	cmp	r3, #0
 8037522:	d1e3      	bne.n	80374ec <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8037524:	687b      	ldr	r3, [r7, #4]
 8037526:	2220      	movs	r2, #32
 8037528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803752c:	687b      	ldr	r3, [r7, #4]
 803752e:	2200      	movs	r2, #0
 8037530:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037532:	687b      	ldr	r3, [r7, #4]
 8037534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8037536:	2b01      	cmp	r3, #1
 8037538:	d12e      	bne.n	8037598 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803753a:	687b      	ldr	r3, [r7, #4]
 803753c:	2200      	movs	r2, #0
 803753e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8037540:	687b      	ldr	r3, [r7, #4]
 8037542:	681b      	ldr	r3, [r3, #0]
 8037544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037548:	e853 3f00 	ldrex	r3, [r3]
 803754c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803754e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037550:	f023 0310 	bic.w	r3, r3, #16
 8037554:	67fb      	str	r3, [r7, #124]	; 0x7c
 8037556:	687b      	ldr	r3, [r7, #4]
 8037558:	681b      	ldr	r3, [r3, #0]
 803755a:	461a      	mov	r2, r3
 803755c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 803755e:	647b      	str	r3, [r7, #68]	; 0x44
 8037560:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8037564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8037566:	e841 2300 	strex	r3, r2, [r1]
 803756a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803756c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803756e:	2b00      	cmp	r3, #0
 8037570:	d1e6      	bne.n	8037540 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8037572:	687b      	ldr	r3, [r7, #4]
 8037574:	681b      	ldr	r3, [r3, #0]
 8037576:	69db      	ldr	r3, [r3, #28]
 8037578:	f003 0310 	and.w	r3, r3, #16
 803757c:	2b10      	cmp	r3, #16
 803757e:	d103      	bne.n	8037588 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8037580:	687b      	ldr	r3, [r7, #4]
 8037582:	681b      	ldr	r3, [r3, #0]
 8037584:	2210      	movs	r2, #16
 8037586:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8037588:	687b      	ldr	r3, [r7, #4]
 803758a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803758e:	4619      	mov	r1, r3
 8037590:	6878      	ldr	r0, [r7, #4]
 8037592:	f7fe f96d 	bl	8035870 <HAL_UARTEx_RxEventCallback>
 8037596:	e002      	b.n	803759e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8037598:	6878      	ldr	r0, [r7, #4]
 803759a:	f7f2 f95f 	bl	802985c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803759e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80375a2:	2b00      	cmp	r3, #0
 80375a4:	d006      	beq.n	80375b4 <UART_RxISR_16BIT_FIFOEN+0x250>
 80375a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80375aa:	f003 0320 	and.w	r3, r3, #32
 80375ae:	2b00      	cmp	r3, #0
 80375b0:	f47f aefc 	bne.w	80373ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80375b4:	687b      	ldr	r3, [r7, #4]
 80375b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80375ba:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80375be:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80375c2:	2b00      	cmp	r3, #0
 80375c4:	d045      	beq.n	8037652 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80375c6:	687b      	ldr	r3, [r7, #4]
 80375c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80375cc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80375d0:	429a      	cmp	r2, r3
 80375d2:	d23e      	bcs.n	8037652 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80375d4:	687b      	ldr	r3, [r7, #4]
 80375d6:	681b      	ldr	r3, [r3, #0]
 80375d8:	3308      	adds	r3, #8
 80375da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80375dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80375de:	e853 3f00 	ldrex	r3, [r3]
 80375e2:	623b      	str	r3, [r7, #32]
   return(result);
 80375e4:	6a3b      	ldr	r3, [r7, #32]
 80375e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80375ea:	677b      	str	r3, [r7, #116]	; 0x74
 80375ec:	687b      	ldr	r3, [r7, #4]
 80375ee:	681b      	ldr	r3, [r3, #0]
 80375f0:	3308      	adds	r3, #8
 80375f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80375f4:	633a      	str	r2, [r7, #48]	; 0x30
 80375f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80375f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80375fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80375fc:	e841 2300 	strex	r3, r2, [r1]
 8037600:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8037602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037604:	2b00      	cmp	r3, #0
 8037606:	d1e5      	bne.n	80375d4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8037608:	687b      	ldr	r3, [r7, #4]
 803760a:	4a15      	ldr	r2, [pc, #84]	; (8037660 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 803760c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803760e:	687b      	ldr	r3, [r7, #4]
 8037610:	681b      	ldr	r3, [r3, #0]
 8037612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037614:	693b      	ldr	r3, [r7, #16]
 8037616:	e853 3f00 	ldrex	r3, [r3]
 803761a:	60fb      	str	r3, [r7, #12]
   return(result);
 803761c:	68fb      	ldr	r3, [r7, #12]
 803761e:	f043 0320 	orr.w	r3, r3, #32
 8037622:	673b      	str	r3, [r7, #112]	; 0x70
 8037624:	687b      	ldr	r3, [r7, #4]
 8037626:	681b      	ldr	r3, [r3, #0]
 8037628:	461a      	mov	r2, r3
 803762a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 803762c:	61fb      	str	r3, [r7, #28]
 803762e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037630:	69b9      	ldr	r1, [r7, #24]
 8037632:	69fa      	ldr	r2, [r7, #28]
 8037634:	e841 2300 	strex	r3, r2, [r1]
 8037638:	617b      	str	r3, [r7, #20]
   return(result);
 803763a:	697b      	ldr	r3, [r7, #20]
 803763c:	2b00      	cmp	r3, #0
 803763e:	d1e6      	bne.n	803760e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037640:	e007      	b.n	8037652 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037642:	687b      	ldr	r3, [r7, #4]
 8037644:	681b      	ldr	r3, [r3, #0]
 8037646:	699a      	ldr	r2, [r3, #24]
 8037648:	687b      	ldr	r3, [r7, #4]
 803764a:	681b      	ldr	r3, [r3, #0]
 803764c:	f042 0208 	orr.w	r2, r2, #8
 8037650:	619a      	str	r2, [r3, #24]
}
 8037652:	bf00      	nop
 8037654:	37a0      	adds	r7, #160	; 0xa0
 8037656:	46bd      	mov	sp, r7
 8037658:	bd80      	pop	{r7, pc}
 803765a:	bf00      	nop
 803765c:	effffffe 	.word	0xeffffffe
 8037660:	08036f0b 	.word	0x08036f0b

08037664 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8037664:	b480      	push	{r7}
 8037666:	b083      	sub	sp, #12
 8037668:	af00      	add	r7, sp, #0
 803766a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 803766c:	bf00      	nop
 803766e:	370c      	adds	r7, #12
 8037670:	46bd      	mov	sp, r7
 8037672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037676:	4770      	bx	lr

08037678 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8037678:	b480      	push	{r7}
 803767a:	b083      	sub	sp, #12
 803767c:	af00      	add	r7, sp, #0
 803767e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8037680:	bf00      	nop
 8037682:	370c      	adds	r7, #12
 8037684:	46bd      	mov	sp, r7
 8037686:	f85d 7b04 	ldr.w	r7, [sp], #4
 803768a:	4770      	bx	lr

0803768c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 803768c:	b480      	push	{r7}
 803768e:	b083      	sub	sp, #12
 8037690:	af00      	add	r7, sp, #0
 8037692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8037694:	bf00      	nop
 8037696:	370c      	adds	r7, #12
 8037698:	46bd      	mov	sp, r7
 803769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803769e:	4770      	bx	lr

080376a0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80376a0:	b580      	push	{r7, lr}
 80376a2:	b084      	sub	sp, #16
 80376a4:	af00      	add	r7, sp, #0
 80376a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80376a8:	687b      	ldr	r3, [r7, #4]
 80376aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80376ae:	2b01      	cmp	r3, #1
 80376b0:	d101      	bne.n	80376b6 <HAL_UARTEx_EnableFifoMode+0x16>
 80376b2:	2302      	movs	r3, #2
 80376b4:	e02b      	b.n	803770e <HAL_UARTEx_EnableFifoMode+0x6e>
 80376b6:	687b      	ldr	r3, [r7, #4]
 80376b8:	2201      	movs	r2, #1
 80376ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80376be:	687b      	ldr	r3, [r7, #4]
 80376c0:	2224      	movs	r2, #36	; 0x24
 80376c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80376c6:	687b      	ldr	r3, [r7, #4]
 80376c8:	681b      	ldr	r3, [r3, #0]
 80376ca:	681b      	ldr	r3, [r3, #0]
 80376cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80376ce:	687b      	ldr	r3, [r7, #4]
 80376d0:	681b      	ldr	r3, [r3, #0]
 80376d2:	681a      	ldr	r2, [r3, #0]
 80376d4:	687b      	ldr	r3, [r7, #4]
 80376d6:	681b      	ldr	r3, [r3, #0]
 80376d8:	f022 0201 	bic.w	r2, r2, #1
 80376dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80376de:	68fb      	ldr	r3, [r7, #12]
 80376e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80376e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80376e6:	687b      	ldr	r3, [r7, #4]
 80376e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80376ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80376ee:	687b      	ldr	r3, [r7, #4]
 80376f0:	681b      	ldr	r3, [r3, #0]
 80376f2:	68fa      	ldr	r2, [r7, #12]
 80376f4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80376f6:	6878      	ldr	r0, [r7, #4]
 80376f8:	f000 f8c2 	bl	8037880 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80376fc:	687b      	ldr	r3, [r7, #4]
 80376fe:	2220      	movs	r2, #32
 8037700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8037704:	687b      	ldr	r3, [r7, #4]
 8037706:	2200      	movs	r2, #0
 8037708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803770c:	2300      	movs	r3, #0
}
 803770e:	4618      	mov	r0, r3
 8037710:	3710      	adds	r7, #16
 8037712:	46bd      	mov	sp, r7
 8037714:	bd80      	pop	{r7, pc}

08037716 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8037716:	b480      	push	{r7}
 8037718:	b085      	sub	sp, #20
 803771a:	af00      	add	r7, sp, #0
 803771c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 803771e:	687b      	ldr	r3, [r7, #4]
 8037720:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037724:	2b01      	cmp	r3, #1
 8037726:	d101      	bne.n	803772c <HAL_UARTEx_DisableFifoMode+0x16>
 8037728:	2302      	movs	r3, #2
 803772a:	e027      	b.n	803777c <HAL_UARTEx_DisableFifoMode+0x66>
 803772c:	687b      	ldr	r3, [r7, #4]
 803772e:	2201      	movs	r2, #1
 8037730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8037734:	687b      	ldr	r3, [r7, #4]
 8037736:	2224      	movs	r2, #36	; 0x24
 8037738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803773c:	687b      	ldr	r3, [r7, #4]
 803773e:	681b      	ldr	r3, [r3, #0]
 8037740:	681b      	ldr	r3, [r3, #0]
 8037742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8037744:	687b      	ldr	r3, [r7, #4]
 8037746:	681b      	ldr	r3, [r3, #0]
 8037748:	681a      	ldr	r2, [r3, #0]
 803774a:	687b      	ldr	r3, [r7, #4]
 803774c:	681b      	ldr	r3, [r3, #0]
 803774e:	f022 0201 	bic.w	r2, r2, #1
 8037752:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8037754:	68fb      	ldr	r3, [r7, #12]
 8037756:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 803775a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 803775c:	687b      	ldr	r3, [r7, #4]
 803775e:	2200      	movs	r2, #0
 8037760:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8037762:	687b      	ldr	r3, [r7, #4]
 8037764:	681b      	ldr	r3, [r3, #0]
 8037766:	68fa      	ldr	r2, [r7, #12]
 8037768:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803776a:	687b      	ldr	r3, [r7, #4]
 803776c:	2220      	movs	r2, #32
 803776e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8037772:	687b      	ldr	r3, [r7, #4]
 8037774:	2200      	movs	r2, #0
 8037776:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803777a:	2300      	movs	r3, #0
}
 803777c:	4618      	mov	r0, r3
 803777e:	3714      	adds	r7, #20
 8037780:	46bd      	mov	sp, r7
 8037782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037786:	4770      	bx	lr

08037788 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8037788:	b580      	push	{r7, lr}
 803778a:	b084      	sub	sp, #16
 803778c:	af00      	add	r7, sp, #0
 803778e:	6078      	str	r0, [r7, #4]
 8037790:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8037792:	687b      	ldr	r3, [r7, #4]
 8037794:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037798:	2b01      	cmp	r3, #1
 803779a:	d101      	bne.n	80377a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 803779c:	2302      	movs	r3, #2
 803779e:	e02d      	b.n	80377fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80377a0:	687b      	ldr	r3, [r7, #4]
 80377a2:	2201      	movs	r2, #1
 80377a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80377a8:	687b      	ldr	r3, [r7, #4]
 80377aa:	2224      	movs	r2, #36	; 0x24
 80377ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80377b0:	687b      	ldr	r3, [r7, #4]
 80377b2:	681b      	ldr	r3, [r3, #0]
 80377b4:	681b      	ldr	r3, [r3, #0]
 80377b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80377b8:	687b      	ldr	r3, [r7, #4]
 80377ba:	681b      	ldr	r3, [r3, #0]
 80377bc:	681a      	ldr	r2, [r3, #0]
 80377be:	687b      	ldr	r3, [r7, #4]
 80377c0:	681b      	ldr	r3, [r3, #0]
 80377c2:	f022 0201 	bic.w	r2, r2, #1
 80377c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80377c8:	687b      	ldr	r3, [r7, #4]
 80377ca:	681b      	ldr	r3, [r3, #0]
 80377cc:	689b      	ldr	r3, [r3, #8]
 80377ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80377d2:	687b      	ldr	r3, [r7, #4]
 80377d4:	681b      	ldr	r3, [r3, #0]
 80377d6:	683a      	ldr	r2, [r7, #0]
 80377d8:	430a      	orrs	r2, r1
 80377da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80377dc:	6878      	ldr	r0, [r7, #4]
 80377de:	f000 f84f 	bl	8037880 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80377e2:	687b      	ldr	r3, [r7, #4]
 80377e4:	681b      	ldr	r3, [r3, #0]
 80377e6:	68fa      	ldr	r2, [r7, #12]
 80377e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80377ea:	687b      	ldr	r3, [r7, #4]
 80377ec:	2220      	movs	r2, #32
 80377ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80377f2:	687b      	ldr	r3, [r7, #4]
 80377f4:	2200      	movs	r2, #0
 80377f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80377fa:	2300      	movs	r3, #0
}
 80377fc:	4618      	mov	r0, r3
 80377fe:	3710      	adds	r7, #16
 8037800:	46bd      	mov	sp, r7
 8037802:	bd80      	pop	{r7, pc}

08037804 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8037804:	b580      	push	{r7, lr}
 8037806:	b084      	sub	sp, #16
 8037808:	af00      	add	r7, sp, #0
 803780a:	6078      	str	r0, [r7, #4]
 803780c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803780e:	687b      	ldr	r3, [r7, #4]
 8037810:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037814:	2b01      	cmp	r3, #1
 8037816:	d101      	bne.n	803781c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8037818:	2302      	movs	r3, #2
 803781a:	e02d      	b.n	8037878 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 803781c:	687b      	ldr	r3, [r7, #4]
 803781e:	2201      	movs	r2, #1
 8037820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8037824:	687b      	ldr	r3, [r7, #4]
 8037826:	2224      	movs	r2, #36	; 0x24
 8037828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803782c:	687b      	ldr	r3, [r7, #4]
 803782e:	681b      	ldr	r3, [r3, #0]
 8037830:	681b      	ldr	r3, [r3, #0]
 8037832:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8037834:	687b      	ldr	r3, [r7, #4]
 8037836:	681b      	ldr	r3, [r3, #0]
 8037838:	681a      	ldr	r2, [r3, #0]
 803783a:	687b      	ldr	r3, [r7, #4]
 803783c:	681b      	ldr	r3, [r3, #0]
 803783e:	f022 0201 	bic.w	r2, r2, #1
 8037842:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8037844:	687b      	ldr	r3, [r7, #4]
 8037846:	681b      	ldr	r3, [r3, #0]
 8037848:	689b      	ldr	r3, [r3, #8]
 803784a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 803784e:	687b      	ldr	r3, [r7, #4]
 8037850:	681b      	ldr	r3, [r3, #0]
 8037852:	683a      	ldr	r2, [r7, #0]
 8037854:	430a      	orrs	r2, r1
 8037856:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8037858:	6878      	ldr	r0, [r7, #4]
 803785a:	f000 f811 	bl	8037880 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803785e:	687b      	ldr	r3, [r7, #4]
 8037860:	681b      	ldr	r3, [r3, #0]
 8037862:	68fa      	ldr	r2, [r7, #12]
 8037864:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8037866:	687b      	ldr	r3, [r7, #4]
 8037868:	2220      	movs	r2, #32
 803786a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803786e:	687b      	ldr	r3, [r7, #4]
 8037870:	2200      	movs	r2, #0
 8037872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8037876:	2300      	movs	r3, #0
}
 8037878:	4618      	mov	r0, r3
 803787a:	3710      	adds	r7, #16
 803787c:	46bd      	mov	sp, r7
 803787e:	bd80      	pop	{r7, pc}

08037880 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8037880:	b480      	push	{r7}
 8037882:	b085      	sub	sp, #20
 8037884:	af00      	add	r7, sp, #0
 8037886:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8037888:	687b      	ldr	r3, [r7, #4]
 803788a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803788c:	2b00      	cmp	r3, #0
 803788e:	d108      	bne.n	80378a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8037890:	687b      	ldr	r3, [r7, #4]
 8037892:	2201      	movs	r2, #1
 8037894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8037898:	687b      	ldr	r3, [r7, #4]
 803789a:	2201      	movs	r2, #1
 803789c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80378a0:	e031      	b.n	8037906 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80378a2:	2310      	movs	r3, #16
 80378a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80378a6:	2310      	movs	r3, #16
 80378a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80378aa:	687b      	ldr	r3, [r7, #4]
 80378ac:	681b      	ldr	r3, [r3, #0]
 80378ae:	689b      	ldr	r3, [r3, #8]
 80378b0:	0e5b      	lsrs	r3, r3, #25
 80378b2:	b2db      	uxtb	r3, r3
 80378b4:	f003 0307 	and.w	r3, r3, #7
 80378b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80378ba:	687b      	ldr	r3, [r7, #4]
 80378bc:	681b      	ldr	r3, [r3, #0]
 80378be:	689b      	ldr	r3, [r3, #8]
 80378c0:	0f5b      	lsrs	r3, r3, #29
 80378c2:	b2db      	uxtb	r3, r3
 80378c4:	f003 0307 	and.w	r3, r3, #7
 80378c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80378ca:	7bbb      	ldrb	r3, [r7, #14]
 80378cc:	7b3a      	ldrb	r2, [r7, #12]
 80378ce:	4911      	ldr	r1, [pc, #68]	; (8037914 <UARTEx_SetNbDataToProcess+0x94>)
 80378d0:	5c8a      	ldrb	r2, [r1, r2]
 80378d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80378d6:	7b3a      	ldrb	r2, [r7, #12]
 80378d8:	490f      	ldr	r1, [pc, #60]	; (8037918 <UARTEx_SetNbDataToProcess+0x98>)
 80378da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80378dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80378e0:	b29a      	uxth	r2, r3
 80378e2:	687b      	ldr	r3, [r7, #4]
 80378e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80378e8:	7bfb      	ldrb	r3, [r7, #15]
 80378ea:	7b7a      	ldrb	r2, [r7, #13]
 80378ec:	4909      	ldr	r1, [pc, #36]	; (8037914 <UARTEx_SetNbDataToProcess+0x94>)
 80378ee:	5c8a      	ldrb	r2, [r1, r2]
 80378f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80378f4:	7b7a      	ldrb	r2, [r7, #13]
 80378f6:	4908      	ldr	r1, [pc, #32]	; (8037918 <UARTEx_SetNbDataToProcess+0x98>)
 80378f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80378fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80378fe:	b29a      	uxth	r2, r3
 8037900:	687b      	ldr	r3, [r7, #4]
 8037902:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8037906:	bf00      	nop
 8037908:	3714      	adds	r7, #20
 803790a:	46bd      	mov	sp, r7
 803790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037910:	4770      	bx	lr
 8037912:	bf00      	nop
 8037914:	0805830c 	.word	0x0805830c
 8037918:	08058314 	.word	0x08058314

0803791c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 803791c:	b084      	sub	sp, #16
 803791e:	b580      	push	{r7, lr}
 8037920:	b084      	sub	sp, #16
 8037922:	af00      	add	r7, sp, #0
 8037924:	6078      	str	r0, [r7, #4]
 8037926:	f107 001c 	add.w	r0, r7, #28
 803792a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 803792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037930:	2b01      	cmp	r3, #1
 8037932:	d120      	bne.n	8037976 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8037934:	687b      	ldr	r3, [r7, #4]
 8037936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 803793c:	687b      	ldr	r3, [r7, #4]
 803793e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8037940:	687b      	ldr	r3, [r7, #4]
 8037942:	68da      	ldr	r2, [r3, #12]
 8037944:	4b2a      	ldr	r3, [pc, #168]	; (80379f0 <USB_CoreInit+0xd4>)
 8037946:	4013      	ands	r3, r2
 8037948:	687a      	ldr	r2, [r7, #4]
 803794a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 803794c:	687b      	ldr	r3, [r7, #4]
 803794e:	68db      	ldr	r3, [r3, #12]
 8037950:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8037954:	687b      	ldr	r3, [r7, #4]
 8037956:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8037958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803795a:	2b01      	cmp	r3, #1
 803795c:	d105      	bne.n	803796a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 803795e:	687b      	ldr	r3, [r7, #4]
 8037960:	68db      	ldr	r3, [r3, #12]
 8037962:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8037966:	687b      	ldr	r3, [r7, #4]
 8037968:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 803796a:	6878      	ldr	r0, [r7, #4]
 803796c:	f001 fc04 	bl	8039178 <USB_CoreReset>
 8037970:	4603      	mov	r3, r0
 8037972:	73fb      	strb	r3, [r7, #15]
 8037974:	e01a      	b.n	80379ac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8037976:	687b      	ldr	r3, [r7, #4]
 8037978:	68db      	ldr	r3, [r3, #12]
 803797a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803797e:	687b      	ldr	r3, [r7, #4]
 8037980:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8037982:	6878      	ldr	r0, [r7, #4]
 8037984:	f001 fbf8 	bl	8039178 <USB_CoreReset>
 8037988:	4603      	mov	r3, r0
 803798a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 803798c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803798e:	2b00      	cmp	r3, #0
 8037990:	d106      	bne.n	80379a0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8037992:	687b      	ldr	r3, [r7, #4]
 8037994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037996:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 803799a:	687b      	ldr	r3, [r7, #4]
 803799c:	639a      	str	r2, [r3, #56]	; 0x38
 803799e:	e005      	b.n	80379ac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80379a0:	687b      	ldr	r3, [r7, #4]
 80379a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80379a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80379a8:	687b      	ldr	r3, [r7, #4]
 80379aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80379ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80379ae:	2b01      	cmp	r3, #1
 80379b0:	d116      	bne.n	80379e0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80379b2:	687b      	ldr	r3, [r7, #4]
 80379b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80379b6:	b29a      	uxth	r2, r3
 80379b8:	687b      	ldr	r3, [r7, #4]
 80379ba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80379bc:	687b      	ldr	r3, [r7, #4]
 80379be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80379c0:	4b0c      	ldr	r3, [pc, #48]	; (80379f4 <USB_CoreInit+0xd8>)
 80379c2:	4313      	orrs	r3, r2
 80379c4:	687a      	ldr	r2, [r7, #4]
 80379c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80379c8:	687b      	ldr	r3, [r7, #4]
 80379ca:	689b      	ldr	r3, [r3, #8]
 80379cc:	f043 0206 	orr.w	r2, r3, #6
 80379d0:	687b      	ldr	r3, [r7, #4]
 80379d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80379d4:	687b      	ldr	r3, [r7, #4]
 80379d6:	689b      	ldr	r3, [r3, #8]
 80379d8:	f043 0220 	orr.w	r2, r3, #32
 80379dc:	687b      	ldr	r3, [r7, #4]
 80379de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80379e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80379e2:	4618      	mov	r0, r3
 80379e4:	3710      	adds	r7, #16
 80379e6:	46bd      	mov	sp, r7
 80379e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80379ec:	b004      	add	sp, #16
 80379ee:	4770      	bx	lr
 80379f0:	ffbdffbf 	.word	0xffbdffbf
 80379f4:	03ee0000 	.word	0x03ee0000

080379f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80379f8:	b480      	push	{r7}
 80379fa:	b087      	sub	sp, #28
 80379fc:	af00      	add	r7, sp, #0
 80379fe:	60f8      	str	r0, [r7, #12]
 8037a00:	60b9      	str	r1, [r7, #8]
 8037a02:	4613      	mov	r3, r2
 8037a04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8037a06:	79fb      	ldrb	r3, [r7, #7]
 8037a08:	2b02      	cmp	r3, #2
 8037a0a:	d165      	bne.n	8037ad8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8037a0c:	68bb      	ldr	r3, [r7, #8]
 8037a0e:	4a41      	ldr	r2, [pc, #260]	; (8037b14 <USB_SetTurnaroundTime+0x11c>)
 8037a10:	4293      	cmp	r3, r2
 8037a12:	d906      	bls.n	8037a22 <USB_SetTurnaroundTime+0x2a>
 8037a14:	68bb      	ldr	r3, [r7, #8]
 8037a16:	4a40      	ldr	r2, [pc, #256]	; (8037b18 <USB_SetTurnaroundTime+0x120>)
 8037a18:	4293      	cmp	r3, r2
 8037a1a:	d202      	bcs.n	8037a22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8037a1c:	230f      	movs	r3, #15
 8037a1e:	617b      	str	r3, [r7, #20]
 8037a20:	e062      	b.n	8037ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8037a22:	68bb      	ldr	r3, [r7, #8]
 8037a24:	4a3c      	ldr	r2, [pc, #240]	; (8037b18 <USB_SetTurnaroundTime+0x120>)
 8037a26:	4293      	cmp	r3, r2
 8037a28:	d306      	bcc.n	8037a38 <USB_SetTurnaroundTime+0x40>
 8037a2a:	68bb      	ldr	r3, [r7, #8]
 8037a2c:	4a3b      	ldr	r2, [pc, #236]	; (8037b1c <USB_SetTurnaroundTime+0x124>)
 8037a2e:	4293      	cmp	r3, r2
 8037a30:	d202      	bcs.n	8037a38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8037a32:	230e      	movs	r3, #14
 8037a34:	617b      	str	r3, [r7, #20]
 8037a36:	e057      	b.n	8037ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8037a38:	68bb      	ldr	r3, [r7, #8]
 8037a3a:	4a38      	ldr	r2, [pc, #224]	; (8037b1c <USB_SetTurnaroundTime+0x124>)
 8037a3c:	4293      	cmp	r3, r2
 8037a3e:	d306      	bcc.n	8037a4e <USB_SetTurnaroundTime+0x56>
 8037a40:	68bb      	ldr	r3, [r7, #8]
 8037a42:	4a37      	ldr	r2, [pc, #220]	; (8037b20 <USB_SetTurnaroundTime+0x128>)
 8037a44:	4293      	cmp	r3, r2
 8037a46:	d202      	bcs.n	8037a4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8037a48:	230d      	movs	r3, #13
 8037a4a:	617b      	str	r3, [r7, #20]
 8037a4c:	e04c      	b.n	8037ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8037a4e:	68bb      	ldr	r3, [r7, #8]
 8037a50:	4a33      	ldr	r2, [pc, #204]	; (8037b20 <USB_SetTurnaroundTime+0x128>)
 8037a52:	4293      	cmp	r3, r2
 8037a54:	d306      	bcc.n	8037a64 <USB_SetTurnaroundTime+0x6c>
 8037a56:	68bb      	ldr	r3, [r7, #8]
 8037a58:	4a32      	ldr	r2, [pc, #200]	; (8037b24 <USB_SetTurnaroundTime+0x12c>)
 8037a5a:	4293      	cmp	r3, r2
 8037a5c:	d802      	bhi.n	8037a64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8037a5e:	230c      	movs	r3, #12
 8037a60:	617b      	str	r3, [r7, #20]
 8037a62:	e041      	b.n	8037ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8037a64:	68bb      	ldr	r3, [r7, #8]
 8037a66:	4a2f      	ldr	r2, [pc, #188]	; (8037b24 <USB_SetTurnaroundTime+0x12c>)
 8037a68:	4293      	cmp	r3, r2
 8037a6a:	d906      	bls.n	8037a7a <USB_SetTurnaroundTime+0x82>
 8037a6c:	68bb      	ldr	r3, [r7, #8]
 8037a6e:	4a2e      	ldr	r2, [pc, #184]	; (8037b28 <USB_SetTurnaroundTime+0x130>)
 8037a70:	4293      	cmp	r3, r2
 8037a72:	d802      	bhi.n	8037a7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8037a74:	230b      	movs	r3, #11
 8037a76:	617b      	str	r3, [r7, #20]
 8037a78:	e036      	b.n	8037ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8037a7a:	68bb      	ldr	r3, [r7, #8]
 8037a7c:	4a2a      	ldr	r2, [pc, #168]	; (8037b28 <USB_SetTurnaroundTime+0x130>)
 8037a7e:	4293      	cmp	r3, r2
 8037a80:	d906      	bls.n	8037a90 <USB_SetTurnaroundTime+0x98>
 8037a82:	68bb      	ldr	r3, [r7, #8]
 8037a84:	4a29      	ldr	r2, [pc, #164]	; (8037b2c <USB_SetTurnaroundTime+0x134>)
 8037a86:	4293      	cmp	r3, r2
 8037a88:	d802      	bhi.n	8037a90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8037a8a:	230a      	movs	r3, #10
 8037a8c:	617b      	str	r3, [r7, #20]
 8037a8e:	e02b      	b.n	8037ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8037a90:	68bb      	ldr	r3, [r7, #8]
 8037a92:	4a26      	ldr	r2, [pc, #152]	; (8037b2c <USB_SetTurnaroundTime+0x134>)
 8037a94:	4293      	cmp	r3, r2
 8037a96:	d906      	bls.n	8037aa6 <USB_SetTurnaroundTime+0xae>
 8037a98:	68bb      	ldr	r3, [r7, #8]
 8037a9a:	4a25      	ldr	r2, [pc, #148]	; (8037b30 <USB_SetTurnaroundTime+0x138>)
 8037a9c:	4293      	cmp	r3, r2
 8037a9e:	d202      	bcs.n	8037aa6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8037aa0:	2309      	movs	r3, #9
 8037aa2:	617b      	str	r3, [r7, #20]
 8037aa4:	e020      	b.n	8037ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8037aa6:	68bb      	ldr	r3, [r7, #8]
 8037aa8:	4a21      	ldr	r2, [pc, #132]	; (8037b30 <USB_SetTurnaroundTime+0x138>)
 8037aaa:	4293      	cmp	r3, r2
 8037aac:	d306      	bcc.n	8037abc <USB_SetTurnaroundTime+0xc4>
 8037aae:	68bb      	ldr	r3, [r7, #8]
 8037ab0:	4a20      	ldr	r2, [pc, #128]	; (8037b34 <USB_SetTurnaroundTime+0x13c>)
 8037ab2:	4293      	cmp	r3, r2
 8037ab4:	d802      	bhi.n	8037abc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8037ab6:	2308      	movs	r3, #8
 8037ab8:	617b      	str	r3, [r7, #20]
 8037aba:	e015      	b.n	8037ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8037abc:	68bb      	ldr	r3, [r7, #8]
 8037abe:	4a1d      	ldr	r2, [pc, #116]	; (8037b34 <USB_SetTurnaroundTime+0x13c>)
 8037ac0:	4293      	cmp	r3, r2
 8037ac2:	d906      	bls.n	8037ad2 <USB_SetTurnaroundTime+0xda>
 8037ac4:	68bb      	ldr	r3, [r7, #8]
 8037ac6:	4a1c      	ldr	r2, [pc, #112]	; (8037b38 <USB_SetTurnaroundTime+0x140>)
 8037ac8:	4293      	cmp	r3, r2
 8037aca:	d202      	bcs.n	8037ad2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8037acc:	2307      	movs	r3, #7
 8037ace:	617b      	str	r3, [r7, #20]
 8037ad0:	e00a      	b.n	8037ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8037ad2:	2306      	movs	r3, #6
 8037ad4:	617b      	str	r3, [r7, #20]
 8037ad6:	e007      	b.n	8037ae8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8037ad8:	79fb      	ldrb	r3, [r7, #7]
 8037ada:	2b00      	cmp	r3, #0
 8037adc:	d102      	bne.n	8037ae4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8037ade:	2309      	movs	r3, #9
 8037ae0:	617b      	str	r3, [r7, #20]
 8037ae2:	e001      	b.n	8037ae8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8037ae4:	2309      	movs	r3, #9
 8037ae6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8037ae8:	68fb      	ldr	r3, [r7, #12]
 8037aea:	68db      	ldr	r3, [r3, #12]
 8037aec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8037af0:	68fb      	ldr	r3, [r7, #12]
 8037af2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8037af4:	68fb      	ldr	r3, [r7, #12]
 8037af6:	68da      	ldr	r2, [r3, #12]
 8037af8:	697b      	ldr	r3, [r7, #20]
 8037afa:	029b      	lsls	r3, r3, #10
 8037afc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8037b00:	431a      	orrs	r2, r3
 8037b02:	68fb      	ldr	r3, [r7, #12]
 8037b04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8037b06:	2300      	movs	r3, #0
}
 8037b08:	4618      	mov	r0, r3
 8037b0a:	371c      	adds	r7, #28
 8037b0c:	46bd      	mov	sp, r7
 8037b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037b12:	4770      	bx	lr
 8037b14:	00d8acbf 	.word	0x00d8acbf
 8037b18:	00e4e1c0 	.word	0x00e4e1c0
 8037b1c:	00f42400 	.word	0x00f42400
 8037b20:	01067380 	.word	0x01067380
 8037b24:	011a499f 	.word	0x011a499f
 8037b28:	01312cff 	.word	0x01312cff
 8037b2c:	014ca43f 	.word	0x014ca43f
 8037b30:	016e3600 	.word	0x016e3600
 8037b34:	01a6ab1f 	.word	0x01a6ab1f
 8037b38:	01e84800 	.word	0x01e84800

08037b3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8037b3c:	b480      	push	{r7}
 8037b3e:	b083      	sub	sp, #12
 8037b40:	af00      	add	r7, sp, #0
 8037b42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8037b44:	687b      	ldr	r3, [r7, #4]
 8037b46:	689b      	ldr	r3, [r3, #8]
 8037b48:	f043 0201 	orr.w	r2, r3, #1
 8037b4c:	687b      	ldr	r3, [r7, #4]
 8037b4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8037b50:	2300      	movs	r3, #0
}
 8037b52:	4618      	mov	r0, r3
 8037b54:	370c      	adds	r7, #12
 8037b56:	46bd      	mov	sp, r7
 8037b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037b5c:	4770      	bx	lr

08037b5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8037b5e:	b480      	push	{r7}
 8037b60:	b083      	sub	sp, #12
 8037b62:	af00      	add	r7, sp, #0
 8037b64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8037b66:	687b      	ldr	r3, [r7, #4]
 8037b68:	689b      	ldr	r3, [r3, #8]
 8037b6a:	f023 0201 	bic.w	r2, r3, #1
 8037b6e:	687b      	ldr	r3, [r7, #4]
 8037b70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8037b72:	2300      	movs	r3, #0
}
 8037b74:	4618      	mov	r0, r3
 8037b76:	370c      	adds	r7, #12
 8037b78:	46bd      	mov	sp, r7
 8037b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037b7e:	4770      	bx	lr

08037b80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8037b80:	b580      	push	{r7, lr}
 8037b82:	b084      	sub	sp, #16
 8037b84:	af00      	add	r7, sp, #0
 8037b86:	6078      	str	r0, [r7, #4]
 8037b88:	460b      	mov	r3, r1
 8037b8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8037b8c:	2300      	movs	r3, #0
 8037b8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8037b90:	687b      	ldr	r3, [r7, #4]
 8037b92:	68db      	ldr	r3, [r3, #12]
 8037b94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8037b98:	687b      	ldr	r3, [r7, #4]
 8037b9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8037b9c:	78fb      	ldrb	r3, [r7, #3]
 8037b9e:	2b01      	cmp	r3, #1
 8037ba0:	d115      	bne.n	8037bce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8037ba2:	687b      	ldr	r3, [r7, #4]
 8037ba4:	68db      	ldr	r3, [r3, #12]
 8037ba6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8037baa:	687b      	ldr	r3, [r7, #4]
 8037bac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8037bae:	2001      	movs	r0, #1
 8037bb0:	f7f2 ff76 	bl	802aaa0 <HAL_Delay>
      ms++;
 8037bb4:	68fb      	ldr	r3, [r7, #12]
 8037bb6:	3301      	adds	r3, #1
 8037bb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8037bba:	6878      	ldr	r0, [r7, #4]
 8037bbc:	f001 fa4b 	bl	8039056 <USB_GetMode>
 8037bc0:	4603      	mov	r3, r0
 8037bc2:	2b01      	cmp	r3, #1
 8037bc4:	d01e      	beq.n	8037c04 <USB_SetCurrentMode+0x84>
 8037bc6:	68fb      	ldr	r3, [r7, #12]
 8037bc8:	2b31      	cmp	r3, #49	; 0x31
 8037bca:	d9f0      	bls.n	8037bae <USB_SetCurrentMode+0x2e>
 8037bcc:	e01a      	b.n	8037c04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8037bce:	78fb      	ldrb	r3, [r7, #3]
 8037bd0:	2b00      	cmp	r3, #0
 8037bd2:	d115      	bne.n	8037c00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8037bd4:	687b      	ldr	r3, [r7, #4]
 8037bd6:	68db      	ldr	r3, [r3, #12]
 8037bd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8037bdc:	687b      	ldr	r3, [r7, #4]
 8037bde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8037be0:	2001      	movs	r0, #1
 8037be2:	f7f2 ff5d 	bl	802aaa0 <HAL_Delay>
      ms++;
 8037be6:	68fb      	ldr	r3, [r7, #12]
 8037be8:	3301      	adds	r3, #1
 8037bea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8037bec:	6878      	ldr	r0, [r7, #4]
 8037bee:	f001 fa32 	bl	8039056 <USB_GetMode>
 8037bf2:	4603      	mov	r3, r0
 8037bf4:	2b00      	cmp	r3, #0
 8037bf6:	d005      	beq.n	8037c04 <USB_SetCurrentMode+0x84>
 8037bf8:	68fb      	ldr	r3, [r7, #12]
 8037bfa:	2b31      	cmp	r3, #49	; 0x31
 8037bfc:	d9f0      	bls.n	8037be0 <USB_SetCurrentMode+0x60>
 8037bfe:	e001      	b.n	8037c04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8037c00:	2301      	movs	r3, #1
 8037c02:	e005      	b.n	8037c10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8037c04:	68fb      	ldr	r3, [r7, #12]
 8037c06:	2b32      	cmp	r3, #50	; 0x32
 8037c08:	d101      	bne.n	8037c0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8037c0a:	2301      	movs	r3, #1
 8037c0c:	e000      	b.n	8037c10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8037c0e:	2300      	movs	r3, #0
}
 8037c10:	4618      	mov	r0, r3
 8037c12:	3710      	adds	r7, #16
 8037c14:	46bd      	mov	sp, r7
 8037c16:	bd80      	pop	{r7, pc}

08037c18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8037c18:	b084      	sub	sp, #16
 8037c1a:	b580      	push	{r7, lr}
 8037c1c:	b086      	sub	sp, #24
 8037c1e:	af00      	add	r7, sp, #0
 8037c20:	6078      	str	r0, [r7, #4]
 8037c22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8037c26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8037c2a:	2300      	movs	r3, #0
 8037c2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8037c2e:	687b      	ldr	r3, [r7, #4]
 8037c30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8037c32:	2300      	movs	r3, #0
 8037c34:	613b      	str	r3, [r7, #16]
 8037c36:	e009      	b.n	8037c4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8037c38:	687a      	ldr	r2, [r7, #4]
 8037c3a:	693b      	ldr	r3, [r7, #16]
 8037c3c:	3340      	adds	r3, #64	; 0x40
 8037c3e:	009b      	lsls	r3, r3, #2
 8037c40:	4413      	add	r3, r2
 8037c42:	2200      	movs	r2, #0
 8037c44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8037c46:	693b      	ldr	r3, [r7, #16]
 8037c48:	3301      	adds	r3, #1
 8037c4a:	613b      	str	r3, [r7, #16]
 8037c4c:	693b      	ldr	r3, [r7, #16]
 8037c4e:	2b0e      	cmp	r3, #14
 8037c50:	d9f2      	bls.n	8037c38 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8037c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037c54:	2b00      	cmp	r3, #0
 8037c56:	d11c      	bne.n	8037c92 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8037c58:	68fb      	ldr	r3, [r7, #12]
 8037c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037c5e:	685b      	ldr	r3, [r3, #4]
 8037c60:	68fa      	ldr	r2, [r7, #12]
 8037c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8037c66:	f043 0302 	orr.w	r3, r3, #2
 8037c6a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8037c6c:	687b      	ldr	r3, [r7, #4]
 8037c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037c70:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8037c74:	687b      	ldr	r3, [r7, #4]
 8037c76:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8037c78:	687b      	ldr	r3, [r7, #4]
 8037c7a:	681b      	ldr	r3, [r3, #0]
 8037c7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8037c80:	687b      	ldr	r3, [r7, #4]
 8037c82:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8037c84:	687b      	ldr	r3, [r7, #4]
 8037c86:	681b      	ldr	r3, [r3, #0]
 8037c88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8037c8c:	687b      	ldr	r3, [r7, #4]
 8037c8e:	601a      	str	r2, [r3, #0]
 8037c90:	e005      	b.n	8037c9e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8037c92:	687b      	ldr	r3, [r7, #4]
 8037c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037c96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8037c9a:	687b      	ldr	r3, [r7, #4]
 8037c9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8037c9e:	68fb      	ldr	r3, [r7, #12]
 8037ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8037ca4:	461a      	mov	r2, r3
 8037ca6:	2300      	movs	r3, #0
 8037ca8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8037caa:	68fb      	ldr	r3, [r7, #12]
 8037cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037cb0:	4619      	mov	r1, r3
 8037cb2:	68fb      	ldr	r3, [r7, #12]
 8037cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037cb8:	461a      	mov	r2, r3
 8037cba:	680b      	ldr	r3, [r1, #0]
 8037cbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8037cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037cc0:	2b01      	cmp	r3, #1
 8037cc2:	d10c      	bne.n	8037cde <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8037cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037cc6:	2b00      	cmp	r3, #0
 8037cc8:	d104      	bne.n	8037cd4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8037cca:	2100      	movs	r1, #0
 8037ccc:	6878      	ldr	r0, [r7, #4]
 8037cce:	f000 f965 	bl	8037f9c <USB_SetDevSpeed>
 8037cd2:	e008      	b.n	8037ce6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8037cd4:	2101      	movs	r1, #1
 8037cd6:	6878      	ldr	r0, [r7, #4]
 8037cd8:	f000 f960 	bl	8037f9c <USB_SetDevSpeed>
 8037cdc:	e003      	b.n	8037ce6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8037cde:	2103      	movs	r1, #3
 8037ce0:	6878      	ldr	r0, [r7, #4]
 8037ce2:	f000 f95b 	bl	8037f9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8037ce6:	2110      	movs	r1, #16
 8037ce8:	6878      	ldr	r0, [r7, #4]
 8037cea:	f000 f8f3 	bl	8037ed4 <USB_FlushTxFifo>
 8037cee:	4603      	mov	r3, r0
 8037cf0:	2b00      	cmp	r3, #0
 8037cf2:	d001      	beq.n	8037cf8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8037cf4:	2301      	movs	r3, #1
 8037cf6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8037cf8:	6878      	ldr	r0, [r7, #4]
 8037cfa:	f000 f91f 	bl	8037f3c <USB_FlushRxFifo>
 8037cfe:	4603      	mov	r3, r0
 8037d00:	2b00      	cmp	r3, #0
 8037d02:	d001      	beq.n	8037d08 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8037d04:	2301      	movs	r3, #1
 8037d06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8037d08:	68fb      	ldr	r3, [r7, #12]
 8037d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037d0e:	461a      	mov	r2, r3
 8037d10:	2300      	movs	r3, #0
 8037d12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8037d14:	68fb      	ldr	r3, [r7, #12]
 8037d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037d1a:	461a      	mov	r2, r3
 8037d1c:	2300      	movs	r3, #0
 8037d1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8037d20:	68fb      	ldr	r3, [r7, #12]
 8037d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037d26:	461a      	mov	r2, r3
 8037d28:	2300      	movs	r3, #0
 8037d2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037d2c:	2300      	movs	r3, #0
 8037d2e:	613b      	str	r3, [r7, #16]
 8037d30:	e043      	b.n	8037dba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8037d32:	693b      	ldr	r3, [r7, #16]
 8037d34:	015a      	lsls	r2, r3, #5
 8037d36:	68fb      	ldr	r3, [r7, #12]
 8037d38:	4413      	add	r3, r2
 8037d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037d3e:	681b      	ldr	r3, [r3, #0]
 8037d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8037d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8037d48:	d118      	bne.n	8037d7c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8037d4a:	693b      	ldr	r3, [r7, #16]
 8037d4c:	2b00      	cmp	r3, #0
 8037d4e:	d10a      	bne.n	8037d66 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8037d50:	693b      	ldr	r3, [r7, #16]
 8037d52:	015a      	lsls	r2, r3, #5
 8037d54:	68fb      	ldr	r3, [r7, #12]
 8037d56:	4413      	add	r3, r2
 8037d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037d5c:	461a      	mov	r2, r3
 8037d5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8037d62:	6013      	str	r3, [r2, #0]
 8037d64:	e013      	b.n	8037d8e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8037d66:	693b      	ldr	r3, [r7, #16]
 8037d68:	015a      	lsls	r2, r3, #5
 8037d6a:	68fb      	ldr	r3, [r7, #12]
 8037d6c:	4413      	add	r3, r2
 8037d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037d72:	461a      	mov	r2, r3
 8037d74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8037d78:	6013      	str	r3, [r2, #0]
 8037d7a:	e008      	b.n	8037d8e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8037d7c:	693b      	ldr	r3, [r7, #16]
 8037d7e:	015a      	lsls	r2, r3, #5
 8037d80:	68fb      	ldr	r3, [r7, #12]
 8037d82:	4413      	add	r3, r2
 8037d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037d88:	461a      	mov	r2, r3
 8037d8a:	2300      	movs	r3, #0
 8037d8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8037d8e:	693b      	ldr	r3, [r7, #16]
 8037d90:	015a      	lsls	r2, r3, #5
 8037d92:	68fb      	ldr	r3, [r7, #12]
 8037d94:	4413      	add	r3, r2
 8037d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037d9a:	461a      	mov	r2, r3
 8037d9c:	2300      	movs	r3, #0
 8037d9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8037da0:	693b      	ldr	r3, [r7, #16]
 8037da2:	015a      	lsls	r2, r3, #5
 8037da4:	68fb      	ldr	r3, [r7, #12]
 8037da6:	4413      	add	r3, r2
 8037da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037dac:	461a      	mov	r2, r3
 8037dae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8037db2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037db4:	693b      	ldr	r3, [r7, #16]
 8037db6:	3301      	adds	r3, #1
 8037db8:	613b      	str	r3, [r7, #16]
 8037dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037dbc:	693a      	ldr	r2, [r7, #16]
 8037dbe:	429a      	cmp	r2, r3
 8037dc0:	d3b7      	bcc.n	8037d32 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037dc2:	2300      	movs	r3, #0
 8037dc4:	613b      	str	r3, [r7, #16]
 8037dc6:	e043      	b.n	8037e50 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8037dc8:	693b      	ldr	r3, [r7, #16]
 8037dca:	015a      	lsls	r2, r3, #5
 8037dcc:	68fb      	ldr	r3, [r7, #12]
 8037dce:	4413      	add	r3, r2
 8037dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037dd4:	681b      	ldr	r3, [r3, #0]
 8037dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8037dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8037dde:	d118      	bne.n	8037e12 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8037de0:	693b      	ldr	r3, [r7, #16]
 8037de2:	2b00      	cmp	r3, #0
 8037de4:	d10a      	bne.n	8037dfc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8037de6:	693b      	ldr	r3, [r7, #16]
 8037de8:	015a      	lsls	r2, r3, #5
 8037dea:	68fb      	ldr	r3, [r7, #12]
 8037dec:	4413      	add	r3, r2
 8037dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037df2:	461a      	mov	r2, r3
 8037df4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8037df8:	6013      	str	r3, [r2, #0]
 8037dfa:	e013      	b.n	8037e24 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8037dfc:	693b      	ldr	r3, [r7, #16]
 8037dfe:	015a      	lsls	r2, r3, #5
 8037e00:	68fb      	ldr	r3, [r7, #12]
 8037e02:	4413      	add	r3, r2
 8037e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037e08:	461a      	mov	r2, r3
 8037e0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8037e0e:	6013      	str	r3, [r2, #0]
 8037e10:	e008      	b.n	8037e24 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8037e12:	693b      	ldr	r3, [r7, #16]
 8037e14:	015a      	lsls	r2, r3, #5
 8037e16:	68fb      	ldr	r3, [r7, #12]
 8037e18:	4413      	add	r3, r2
 8037e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037e1e:	461a      	mov	r2, r3
 8037e20:	2300      	movs	r3, #0
 8037e22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8037e24:	693b      	ldr	r3, [r7, #16]
 8037e26:	015a      	lsls	r2, r3, #5
 8037e28:	68fb      	ldr	r3, [r7, #12]
 8037e2a:	4413      	add	r3, r2
 8037e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037e30:	461a      	mov	r2, r3
 8037e32:	2300      	movs	r3, #0
 8037e34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8037e36:	693b      	ldr	r3, [r7, #16]
 8037e38:	015a      	lsls	r2, r3, #5
 8037e3a:	68fb      	ldr	r3, [r7, #12]
 8037e3c:	4413      	add	r3, r2
 8037e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037e42:	461a      	mov	r2, r3
 8037e44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8037e48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037e4a:	693b      	ldr	r3, [r7, #16]
 8037e4c:	3301      	adds	r3, #1
 8037e4e:	613b      	str	r3, [r7, #16]
 8037e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037e52:	693a      	ldr	r2, [r7, #16]
 8037e54:	429a      	cmp	r2, r3
 8037e56:	d3b7      	bcc.n	8037dc8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8037e58:	68fb      	ldr	r3, [r7, #12]
 8037e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037e5e:	691b      	ldr	r3, [r3, #16]
 8037e60:	68fa      	ldr	r2, [r7, #12]
 8037e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8037e66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8037e6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8037e6c:	687b      	ldr	r3, [r7, #4]
 8037e6e:	2200      	movs	r2, #0
 8037e70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8037e72:	687b      	ldr	r3, [r7, #4]
 8037e74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8037e78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8037e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037e7c:	2b00      	cmp	r3, #0
 8037e7e:	d105      	bne.n	8037e8c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8037e80:	687b      	ldr	r3, [r7, #4]
 8037e82:	699b      	ldr	r3, [r3, #24]
 8037e84:	f043 0210 	orr.w	r2, r3, #16
 8037e88:	687b      	ldr	r3, [r7, #4]
 8037e8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8037e8c:	687b      	ldr	r3, [r7, #4]
 8037e8e:	699a      	ldr	r2, [r3, #24]
 8037e90:	4b0e      	ldr	r3, [pc, #56]	; (8037ecc <USB_DevInit+0x2b4>)
 8037e92:	4313      	orrs	r3, r2
 8037e94:	687a      	ldr	r2, [r7, #4]
 8037e96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8037e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037e9a:	2b00      	cmp	r3, #0
 8037e9c:	d005      	beq.n	8037eaa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8037e9e:	687b      	ldr	r3, [r7, #4]
 8037ea0:	699b      	ldr	r3, [r3, #24]
 8037ea2:	f043 0208 	orr.w	r2, r3, #8
 8037ea6:	687b      	ldr	r3, [r7, #4]
 8037ea8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8037eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037eac:	2b01      	cmp	r3, #1
 8037eae:	d105      	bne.n	8037ebc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8037eb0:	687b      	ldr	r3, [r7, #4]
 8037eb2:	699a      	ldr	r2, [r3, #24]
 8037eb4:	4b06      	ldr	r3, [pc, #24]	; (8037ed0 <USB_DevInit+0x2b8>)
 8037eb6:	4313      	orrs	r3, r2
 8037eb8:	687a      	ldr	r2, [r7, #4]
 8037eba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8037ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8037ebe:	4618      	mov	r0, r3
 8037ec0:	3718      	adds	r7, #24
 8037ec2:	46bd      	mov	sp, r7
 8037ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8037ec8:	b004      	add	sp, #16
 8037eca:	4770      	bx	lr
 8037ecc:	803c3800 	.word	0x803c3800
 8037ed0:	40000004 	.word	0x40000004

08037ed4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8037ed4:	b480      	push	{r7}
 8037ed6:	b085      	sub	sp, #20
 8037ed8:	af00      	add	r7, sp, #0
 8037eda:	6078      	str	r0, [r7, #4]
 8037edc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8037ede:	2300      	movs	r3, #0
 8037ee0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8037ee2:	68fb      	ldr	r3, [r7, #12]
 8037ee4:	3301      	adds	r3, #1
 8037ee6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8037ee8:	68fb      	ldr	r3, [r7, #12]
 8037eea:	4a13      	ldr	r2, [pc, #76]	; (8037f38 <USB_FlushTxFifo+0x64>)
 8037eec:	4293      	cmp	r3, r2
 8037eee:	d901      	bls.n	8037ef4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8037ef0:	2303      	movs	r3, #3
 8037ef2:	e01b      	b.n	8037f2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8037ef4:	687b      	ldr	r3, [r7, #4]
 8037ef6:	691b      	ldr	r3, [r3, #16]
 8037ef8:	2b00      	cmp	r3, #0
 8037efa:	daf2      	bge.n	8037ee2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8037efc:	2300      	movs	r3, #0
 8037efe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8037f00:	683b      	ldr	r3, [r7, #0]
 8037f02:	019b      	lsls	r3, r3, #6
 8037f04:	f043 0220 	orr.w	r2, r3, #32
 8037f08:	687b      	ldr	r3, [r7, #4]
 8037f0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8037f0c:	68fb      	ldr	r3, [r7, #12]
 8037f0e:	3301      	adds	r3, #1
 8037f10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8037f12:	68fb      	ldr	r3, [r7, #12]
 8037f14:	4a08      	ldr	r2, [pc, #32]	; (8037f38 <USB_FlushTxFifo+0x64>)
 8037f16:	4293      	cmp	r3, r2
 8037f18:	d901      	bls.n	8037f1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8037f1a:	2303      	movs	r3, #3
 8037f1c:	e006      	b.n	8037f2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8037f1e:	687b      	ldr	r3, [r7, #4]
 8037f20:	691b      	ldr	r3, [r3, #16]
 8037f22:	f003 0320 	and.w	r3, r3, #32
 8037f26:	2b20      	cmp	r3, #32
 8037f28:	d0f0      	beq.n	8037f0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8037f2a:	2300      	movs	r3, #0
}
 8037f2c:	4618      	mov	r0, r3
 8037f2e:	3714      	adds	r7, #20
 8037f30:	46bd      	mov	sp, r7
 8037f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037f36:	4770      	bx	lr
 8037f38:	00030d40 	.word	0x00030d40

08037f3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8037f3c:	b480      	push	{r7}
 8037f3e:	b085      	sub	sp, #20
 8037f40:	af00      	add	r7, sp, #0
 8037f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8037f44:	2300      	movs	r3, #0
 8037f46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8037f48:	68fb      	ldr	r3, [r7, #12]
 8037f4a:	3301      	adds	r3, #1
 8037f4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8037f4e:	68fb      	ldr	r3, [r7, #12]
 8037f50:	4a11      	ldr	r2, [pc, #68]	; (8037f98 <USB_FlushRxFifo+0x5c>)
 8037f52:	4293      	cmp	r3, r2
 8037f54:	d901      	bls.n	8037f5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8037f56:	2303      	movs	r3, #3
 8037f58:	e018      	b.n	8037f8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8037f5a:	687b      	ldr	r3, [r7, #4]
 8037f5c:	691b      	ldr	r3, [r3, #16]
 8037f5e:	2b00      	cmp	r3, #0
 8037f60:	daf2      	bge.n	8037f48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8037f62:	2300      	movs	r3, #0
 8037f64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8037f66:	687b      	ldr	r3, [r7, #4]
 8037f68:	2210      	movs	r2, #16
 8037f6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8037f6c:	68fb      	ldr	r3, [r7, #12]
 8037f6e:	3301      	adds	r3, #1
 8037f70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8037f72:	68fb      	ldr	r3, [r7, #12]
 8037f74:	4a08      	ldr	r2, [pc, #32]	; (8037f98 <USB_FlushRxFifo+0x5c>)
 8037f76:	4293      	cmp	r3, r2
 8037f78:	d901      	bls.n	8037f7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8037f7a:	2303      	movs	r3, #3
 8037f7c:	e006      	b.n	8037f8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8037f7e:	687b      	ldr	r3, [r7, #4]
 8037f80:	691b      	ldr	r3, [r3, #16]
 8037f82:	f003 0310 	and.w	r3, r3, #16
 8037f86:	2b10      	cmp	r3, #16
 8037f88:	d0f0      	beq.n	8037f6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8037f8a:	2300      	movs	r3, #0
}
 8037f8c:	4618      	mov	r0, r3
 8037f8e:	3714      	adds	r7, #20
 8037f90:	46bd      	mov	sp, r7
 8037f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037f96:	4770      	bx	lr
 8037f98:	00030d40 	.word	0x00030d40

08037f9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8037f9c:	b480      	push	{r7}
 8037f9e:	b085      	sub	sp, #20
 8037fa0:	af00      	add	r7, sp, #0
 8037fa2:	6078      	str	r0, [r7, #4]
 8037fa4:	460b      	mov	r3, r1
 8037fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8037fa8:	687b      	ldr	r3, [r7, #4]
 8037faa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8037fac:	68fb      	ldr	r3, [r7, #12]
 8037fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037fb2:	681a      	ldr	r2, [r3, #0]
 8037fb4:	78fb      	ldrb	r3, [r7, #3]
 8037fb6:	68f9      	ldr	r1, [r7, #12]
 8037fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8037fbc:	4313      	orrs	r3, r2
 8037fbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8037fc0:	2300      	movs	r3, #0
}
 8037fc2:	4618      	mov	r0, r3
 8037fc4:	3714      	adds	r7, #20
 8037fc6:	46bd      	mov	sp, r7
 8037fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037fcc:	4770      	bx	lr

08037fce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8037fce:	b480      	push	{r7}
 8037fd0:	b087      	sub	sp, #28
 8037fd2:	af00      	add	r7, sp, #0
 8037fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8037fd6:	687b      	ldr	r3, [r7, #4]
 8037fd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8037fda:	693b      	ldr	r3, [r7, #16]
 8037fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037fe0:	689b      	ldr	r3, [r3, #8]
 8037fe2:	f003 0306 	and.w	r3, r3, #6
 8037fe6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8037fe8:	68fb      	ldr	r3, [r7, #12]
 8037fea:	2b00      	cmp	r3, #0
 8037fec:	d102      	bne.n	8037ff4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8037fee:	2300      	movs	r3, #0
 8037ff0:	75fb      	strb	r3, [r7, #23]
 8037ff2:	e00a      	b.n	803800a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8037ff4:	68fb      	ldr	r3, [r7, #12]
 8037ff6:	2b02      	cmp	r3, #2
 8037ff8:	d002      	beq.n	8038000 <USB_GetDevSpeed+0x32>
 8037ffa:	68fb      	ldr	r3, [r7, #12]
 8037ffc:	2b06      	cmp	r3, #6
 8037ffe:	d102      	bne.n	8038006 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8038000:	2302      	movs	r3, #2
 8038002:	75fb      	strb	r3, [r7, #23]
 8038004:	e001      	b.n	803800a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8038006:	230f      	movs	r3, #15
 8038008:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 803800a:	7dfb      	ldrb	r3, [r7, #23]
}
 803800c:	4618      	mov	r0, r3
 803800e:	371c      	adds	r7, #28
 8038010:	46bd      	mov	sp, r7
 8038012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038016:	4770      	bx	lr

08038018 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038018:	b480      	push	{r7}
 803801a:	b085      	sub	sp, #20
 803801c:	af00      	add	r7, sp, #0
 803801e:	6078      	str	r0, [r7, #4]
 8038020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038022:	687b      	ldr	r3, [r7, #4]
 8038024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038026:	683b      	ldr	r3, [r7, #0]
 8038028:	781b      	ldrb	r3, [r3, #0]
 803802a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803802c:	683b      	ldr	r3, [r7, #0]
 803802e:	785b      	ldrb	r3, [r3, #1]
 8038030:	2b01      	cmp	r3, #1
 8038032:	d139      	bne.n	80380a8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8038034:	68fb      	ldr	r3, [r7, #12]
 8038036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803803a:	69da      	ldr	r2, [r3, #28]
 803803c:	683b      	ldr	r3, [r7, #0]
 803803e:	781b      	ldrb	r3, [r3, #0]
 8038040:	f003 030f 	and.w	r3, r3, #15
 8038044:	2101      	movs	r1, #1
 8038046:	fa01 f303 	lsl.w	r3, r1, r3
 803804a:	b29b      	uxth	r3, r3
 803804c:	68f9      	ldr	r1, [r7, #12]
 803804e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038052:	4313      	orrs	r3, r2
 8038054:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8038056:	68bb      	ldr	r3, [r7, #8]
 8038058:	015a      	lsls	r2, r3, #5
 803805a:	68fb      	ldr	r3, [r7, #12]
 803805c:	4413      	add	r3, r2
 803805e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038062:	681b      	ldr	r3, [r3, #0]
 8038064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8038068:	2b00      	cmp	r3, #0
 803806a:	d153      	bne.n	8038114 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803806c:	68bb      	ldr	r3, [r7, #8]
 803806e:	015a      	lsls	r2, r3, #5
 8038070:	68fb      	ldr	r3, [r7, #12]
 8038072:	4413      	add	r3, r2
 8038074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038078:	681a      	ldr	r2, [r3, #0]
 803807a:	683b      	ldr	r3, [r7, #0]
 803807c:	68db      	ldr	r3, [r3, #12]
 803807e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8038082:	683b      	ldr	r3, [r7, #0]
 8038084:	791b      	ldrb	r3, [r3, #4]
 8038086:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8038088:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 803808a:	68bb      	ldr	r3, [r7, #8]
 803808c:	059b      	lsls	r3, r3, #22
 803808e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8038090:	431a      	orrs	r2, r3
 8038092:	68bb      	ldr	r3, [r7, #8]
 8038094:	0159      	lsls	r1, r3, #5
 8038096:	68fb      	ldr	r3, [r7, #12]
 8038098:	440b      	add	r3, r1
 803809a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803809e:	4619      	mov	r1, r3
 80380a0:	4b20      	ldr	r3, [pc, #128]	; (8038124 <USB_ActivateEndpoint+0x10c>)
 80380a2:	4313      	orrs	r3, r2
 80380a4:	600b      	str	r3, [r1, #0]
 80380a6:	e035      	b.n	8038114 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80380a8:	68fb      	ldr	r3, [r7, #12]
 80380aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80380ae:	69da      	ldr	r2, [r3, #28]
 80380b0:	683b      	ldr	r3, [r7, #0]
 80380b2:	781b      	ldrb	r3, [r3, #0]
 80380b4:	f003 030f 	and.w	r3, r3, #15
 80380b8:	2101      	movs	r1, #1
 80380ba:	fa01 f303 	lsl.w	r3, r1, r3
 80380be:	041b      	lsls	r3, r3, #16
 80380c0:	68f9      	ldr	r1, [r7, #12]
 80380c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80380c6:	4313      	orrs	r3, r2
 80380c8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80380ca:	68bb      	ldr	r3, [r7, #8]
 80380cc:	015a      	lsls	r2, r3, #5
 80380ce:	68fb      	ldr	r3, [r7, #12]
 80380d0:	4413      	add	r3, r2
 80380d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80380d6:	681b      	ldr	r3, [r3, #0]
 80380d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80380dc:	2b00      	cmp	r3, #0
 80380de:	d119      	bne.n	8038114 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80380e0:	68bb      	ldr	r3, [r7, #8]
 80380e2:	015a      	lsls	r2, r3, #5
 80380e4:	68fb      	ldr	r3, [r7, #12]
 80380e6:	4413      	add	r3, r2
 80380e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80380ec:	681a      	ldr	r2, [r3, #0]
 80380ee:	683b      	ldr	r3, [r7, #0]
 80380f0:	68db      	ldr	r3, [r3, #12]
 80380f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80380f6:	683b      	ldr	r3, [r7, #0]
 80380f8:	791b      	ldrb	r3, [r3, #4]
 80380fa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80380fc:	430b      	orrs	r3, r1
 80380fe:	431a      	orrs	r2, r3
 8038100:	68bb      	ldr	r3, [r7, #8]
 8038102:	0159      	lsls	r1, r3, #5
 8038104:	68fb      	ldr	r3, [r7, #12]
 8038106:	440b      	add	r3, r1
 8038108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803810c:	4619      	mov	r1, r3
 803810e:	4b05      	ldr	r3, [pc, #20]	; (8038124 <USB_ActivateEndpoint+0x10c>)
 8038110:	4313      	orrs	r3, r2
 8038112:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8038114:	2300      	movs	r3, #0
}
 8038116:	4618      	mov	r0, r3
 8038118:	3714      	adds	r7, #20
 803811a:	46bd      	mov	sp, r7
 803811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038120:	4770      	bx	lr
 8038122:	bf00      	nop
 8038124:	10008000 	.word	0x10008000

08038128 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038128:	b480      	push	{r7}
 803812a:	b085      	sub	sp, #20
 803812c:	af00      	add	r7, sp, #0
 803812e:	6078      	str	r0, [r7, #4]
 8038130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038132:	687b      	ldr	r3, [r7, #4]
 8038134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038136:	683b      	ldr	r3, [r7, #0]
 8038138:	781b      	ldrb	r3, [r3, #0]
 803813a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 803813c:	683b      	ldr	r3, [r7, #0]
 803813e:	785b      	ldrb	r3, [r3, #1]
 8038140:	2b01      	cmp	r3, #1
 8038142:	d161      	bne.n	8038208 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8038144:	68bb      	ldr	r3, [r7, #8]
 8038146:	015a      	lsls	r2, r3, #5
 8038148:	68fb      	ldr	r3, [r7, #12]
 803814a:	4413      	add	r3, r2
 803814c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038150:	681b      	ldr	r3, [r3, #0]
 8038152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803815a:	d11f      	bne.n	803819c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 803815c:	68bb      	ldr	r3, [r7, #8]
 803815e:	015a      	lsls	r2, r3, #5
 8038160:	68fb      	ldr	r3, [r7, #12]
 8038162:	4413      	add	r3, r2
 8038164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038168:	681b      	ldr	r3, [r3, #0]
 803816a:	68ba      	ldr	r2, [r7, #8]
 803816c:	0151      	lsls	r1, r2, #5
 803816e:	68fa      	ldr	r2, [r7, #12]
 8038170:	440a      	add	r2, r1
 8038172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803817a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 803817c:	68bb      	ldr	r3, [r7, #8]
 803817e:	015a      	lsls	r2, r3, #5
 8038180:	68fb      	ldr	r3, [r7, #12]
 8038182:	4413      	add	r3, r2
 8038184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038188:	681b      	ldr	r3, [r3, #0]
 803818a:	68ba      	ldr	r2, [r7, #8]
 803818c:	0151      	lsls	r1, r2, #5
 803818e:	68fa      	ldr	r2, [r7, #12]
 8038190:	440a      	add	r2, r1
 8038192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803819a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 803819c:	68fb      	ldr	r3, [r7, #12]
 803819e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80381a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80381a4:	683b      	ldr	r3, [r7, #0]
 80381a6:	781b      	ldrb	r3, [r3, #0]
 80381a8:	f003 030f 	and.w	r3, r3, #15
 80381ac:	2101      	movs	r1, #1
 80381ae:	fa01 f303 	lsl.w	r3, r1, r3
 80381b2:	b29b      	uxth	r3, r3
 80381b4:	43db      	mvns	r3, r3
 80381b6:	68f9      	ldr	r1, [r7, #12]
 80381b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80381bc:	4013      	ands	r3, r2
 80381be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80381c0:	68fb      	ldr	r3, [r7, #12]
 80381c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80381c6:	69da      	ldr	r2, [r3, #28]
 80381c8:	683b      	ldr	r3, [r7, #0]
 80381ca:	781b      	ldrb	r3, [r3, #0]
 80381cc:	f003 030f 	and.w	r3, r3, #15
 80381d0:	2101      	movs	r1, #1
 80381d2:	fa01 f303 	lsl.w	r3, r1, r3
 80381d6:	b29b      	uxth	r3, r3
 80381d8:	43db      	mvns	r3, r3
 80381da:	68f9      	ldr	r1, [r7, #12]
 80381dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80381e0:	4013      	ands	r3, r2
 80381e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80381e4:	68bb      	ldr	r3, [r7, #8]
 80381e6:	015a      	lsls	r2, r3, #5
 80381e8:	68fb      	ldr	r3, [r7, #12]
 80381ea:	4413      	add	r3, r2
 80381ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80381f0:	681a      	ldr	r2, [r3, #0]
 80381f2:	68bb      	ldr	r3, [r7, #8]
 80381f4:	0159      	lsls	r1, r3, #5
 80381f6:	68fb      	ldr	r3, [r7, #12]
 80381f8:	440b      	add	r3, r1
 80381fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80381fe:	4619      	mov	r1, r3
 8038200:	4b35      	ldr	r3, [pc, #212]	; (80382d8 <USB_DeactivateEndpoint+0x1b0>)
 8038202:	4013      	ands	r3, r2
 8038204:	600b      	str	r3, [r1, #0]
 8038206:	e060      	b.n	80382ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8038208:	68bb      	ldr	r3, [r7, #8]
 803820a:	015a      	lsls	r2, r3, #5
 803820c:	68fb      	ldr	r3, [r7, #12]
 803820e:	4413      	add	r3, r2
 8038210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038214:	681b      	ldr	r3, [r3, #0]
 8038216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803821a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803821e:	d11f      	bne.n	8038260 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8038220:	68bb      	ldr	r3, [r7, #8]
 8038222:	015a      	lsls	r2, r3, #5
 8038224:	68fb      	ldr	r3, [r7, #12]
 8038226:	4413      	add	r3, r2
 8038228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803822c:	681b      	ldr	r3, [r3, #0]
 803822e:	68ba      	ldr	r2, [r7, #8]
 8038230:	0151      	lsls	r1, r2, #5
 8038232:	68fa      	ldr	r2, [r7, #12]
 8038234:	440a      	add	r2, r1
 8038236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803823a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803823e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8038240:	68bb      	ldr	r3, [r7, #8]
 8038242:	015a      	lsls	r2, r3, #5
 8038244:	68fb      	ldr	r3, [r7, #12]
 8038246:	4413      	add	r3, r2
 8038248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803824c:	681b      	ldr	r3, [r3, #0]
 803824e:	68ba      	ldr	r2, [r7, #8]
 8038250:	0151      	lsls	r1, r2, #5
 8038252:	68fa      	ldr	r2, [r7, #12]
 8038254:	440a      	add	r2, r1
 8038256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803825a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803825e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8038260:	68fb      	ldr	r3, [r7, #12]
 8038262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8038268:	683b      	ldr	r3, [r7, #0]
 803826a:	781b      	ldrb	r3, [r3, #0]
 803826c:	f003 030f 	and.w	r3, r3, #15
 8038270:	2101      	movs	r1, #1
 8038272:	fa01 f303 	lsl.w	r3, r1, r3
 8038276:	041b      	lsls	r3, r3, #16
 8038278:	43db      	mvns	r3, r3
 803827a:	68f9      	ldr	r1, [r7, #12]
 803827c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038280:	4013      	ands	r3, r2
 8038282:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8038284:	68fb      	ldr	r3, [r7, #12]
 8038286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803828a:	69da      	ldr	r2, [r3, #28]
 803828c:	683b      	ldr	r3, [r7, #0]
 803828e:	781b      	ldrb	r3, [r3, #0]
 8038290:	f003 030f 	and.w	r3, r3, #15
 8038294:	2101      	movs	r1, #1
 8038296:	fa01 f303 	lsl.w	r3, r1, r3
 803829a:	041b      	lsls	r3, r3, #16
 803829c:	43db      	mvns	r3, r3
 803829e:	68f9      	ldr	r1, [r7, #12]
 80382a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80382a4:	4013      	ands	r3, r2
 80382a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80382a8:	68bb      	ldr	r3, [r7, #8]
 80382aa:	015a      	lsls	r2, r3, #5
 80382ac:	68fb      	ldr	r3, [r7, #12]
 80382ae:	4413      	add	r3, r2
 80382b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80382b4:	681a      	ldr	r2, [r3, #0]
 80382b6:	68bb      	ldr	r3, [r7, #8]
 80382b8:	0159      	lsls	r1, r3, #5
 80382ba:	68fb      	ldr	r3, [r7, #12]
 80382bc:	440b      	add	r3, r1
 80382be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80382c2:	4619      	mov	r1, r3
 80382c4:	4b05      	ldr	r3, [pc, #20]	; (80382dc <USB_DeactivateEndpoint+0x1b4>)
 80382c6:	4013      	ands	r3, r2
 80382c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80382ca:	2300      	movs	r3, #0
}
 80382cc:	4618      	mov	r0, r3
 80382ce:	3714      	adds	r7, #20
 80382d0:	46bd      	mov	sp, r7
 80382d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80382d6:	4770      	bx	lr
 80382d8:	ec337800 	.word	0xec337800
 80382dc:	eff37800 	.word	0xeff37800

080382e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80382e0:	b580      	push	{r7, lr}
 80382e2:	b08a      	sub	sp, #40	; 0x28
 80382e4:	af02      	add	r7, sp, #8
 80382e6:	60f8      	str	r0, [r7, #12]
 80382e8:	60b9      	str	r1, [r7, #8]
 80382ea:	4613      	mov	r3, r2
 80382ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80382ee:	68fb      	ldr	r3, [r7, #12]
 80382f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80382f2:	68bb      	ldr	r3, [r7, #8]
 80382f4:	781b      	ldrb	r3, [r3, #0]
 80382f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80382f8:	68bb      	ldr	r3, [r7, #8]
 80382fa:	785b      	ldrb	r3, [r3, #1]
 80382fc:	2b01      	cmp	r3, #1
 80382fe:	f040 8163 	bne.w	80385c8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8038302:	68bb      	ldr	r3, [r7, #8]
 8038304:	699b      	ldr	r3, [r3, #24]
 8038306:	2b00      	cmp	r3, #0
 8038308:	d132      	bne.n	8038370 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803830a:	69bb      	ldr	r3, [r7, #24]
 803830c:	015a      	lsls	r2, r3, #5
 803830e:	69fb      	ldr	r3, [r7, #28]
 8038310:	4413      	add	r3, r2
 8038312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038316:	691a      	ldr	r2, [r3, #16]
 8038318:	69bb      	ldr	r3, [r7, #24]
 803831a:	0159      	lsls	r1, r3, #5
 803831c:	69fb      	ldr	r3, [r7, #28]
 803831e:	440b      	add	r3, r1
 8038320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038324:	4619      	mov	r1, r3
 8038326:	4ba5      	ldr	r3, [pc, #660]	; (80385bc <USB_EPStartXfer+0x2dc>)
 8038328:	4013      	ands	r3, r2
 803832a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803832c:	69bb      	ldr	r3, [r7, #24]
 803832e:	015a      	lsls	r2, r3, #5
 8038330:	69fb      	ldr	r3, [r7, #28]
 8038332:	4413      	add	r3, r2
 8038334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038338:	691b      	ldr	r3, [r3, #16]
 803833a:	69ba      	ldr	r2, [r7, #24]
 803833c:	0151      	lsls	r1, r2, #5
 803833e:	69fa      	ldr	r2, [r7, #28]
 8038340:	440a      	add	r2, r1
 8038342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803834a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803834c:	69bb      	ldr	r3, [r7, #24]
 803834e:	015a      	lsls	r2, r3, #5
 8038350:	69fb      	ldr	r3, [r7, #28]
 8038352:	4413      	add	r3, r2
 8038354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038358:	691a      	ldr	r2, [r3, #16]
 803835a:	69bb      	ldr	r3, [r7, #24]
 803835c:	0159      	lsls	r1, r3, #5
 803835e:	69fb      	ldr	r3, [r7, #28]
 8038360:	440b      	add	r3, r1
 8038362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038366:	4619      	mov	r1, r3
 8038368:	4b95      	ldr	r3, [pc, #596]	; (80385c0 <USB_EPStartXfer+0x2e0>)
 803836a:	4013      	ands	r3, r2
 803836c:	610b      	str	r3, [r1, #16]
 803836e:	e074      	b.n	803845a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8038370:	69bb      	ldr	r3, [r7, #24]
 8038372:	015a      	lsls	r2, r3, #5
 8038374:	69fb      	ldr	r3, [r7, #28]
 8038376:	4413      	add	r3, r2
 8038378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803837c:	691a      	ldr	r2, [r3, #16]
 803837e:	69bb      	ldr	r3, [r7, #24]
 8038380:	0159      	lsls	r1, r3, #5
 8038382:	69fb      	ldr	r3, [r7, #28]
 8038384:	440b      	add	r3, r1
 8038386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803838a:	4619      	mov	r1, r3
 803838c:	4b8c      	ldr	r3, [pc, #560]	; (80385c0 <USB_EPStartXfer+0x2e0>)
 803838e:	4013      	ands	r3, r2
 8038390:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8038392:	69bb      	ldr	r3, [r7, #24]
 8038394:	015a      	lsls	r2, r3, #5
 8038396:	69fb      	ldr	r3, [r7, #28]
 8038398:	4413      	add	r3, r2
 803839a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803839e:	691a      	ldr	r2, [r3, #16]
 80383a0:	69bb      	ldr	r3, [r7, #24]
 80383a2:	0159      	lsls	r1, r3, #5
 80383a4:	69fb      	ldr	r3, [r7, #28]
 80383a6:	440b      	add	r3, r1
 80383a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80383ac:	4619      	mov	r1, r3
 80383ae:	4b83      	ldr	r3, [pc, #524]	; (80385bc <USB_EPStartXfer+0x2dc>)
 80383b0:	4013      	ands	r3, r2
 80383b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80383b4:	69bb      	ldr	r3, [r7, #24]
 80383b6:	015a      	lsls	r2, r3, #5
 80383b8:	69fb      	ldr	r3, [r7, #28]
 80383ba:	4413      	add	r3, r2
 80383bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80383c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80383c2:	68bb      	ldr	r3, [r7, #8]
 80383c4:	6999      	ldr	r1, [r3, #24]
 80383c6:	68bb      	ldr	r3, [r7, #8]
 80383c8:	68db      	ldr	r3, [r3, #12]
 80383ca:	440b      	add	r3, r1
 80383cc:	1e59      	subs	r1, r3, #1
 80383ce:	68bb      	ldr	r3, [r7, #8]
 80383d0:	68db      	ldr	r3, [r3, #12]
 80383d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80383d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80383d8:	4b7a      	ldr	r3, [pc, #488]	; (80385c4 <USB_EPStartXfer+0x2e4>)
 80383da:	400b      	ands	r3, r1
 80383dc:	69b9      	ldr	r1, [r7, #24]
 80383de:	0148      	lsls	r0, r1, #5
 80383e0:	69f9      	ldr	r1, [r7, #28]
 80383e2:	4401      	add	r1, r0
 80383e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80383e8:	4313      	orrs	r3, r2
 80383ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80383ec:	69bb      	ldr	r3, [r7, #24]
 80383ee:	015a      	lsls	r2, r3, #5
 80383f0:	69fb      	ldr	r3, [r7, #28]
 80383f2:	4413      	add	r3, r2
 80383f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80383f8:	691a      	ldr	r2, [r3, #16]
 80383fa:	68bb      	ldr	r3, [r7, #8]
 80383fc:	699b      	ldr	r3, [r3, #24]
 80383fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8038402:	69b9      	ldr	r1, [r7, #24]
 8038404:	0148      	lsls	r0, r1, #5
 8038406:	69f9      	ldr	r1, [r7, #28]
 8038408:	4401      	add	r1, r0
 803840a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803840e:	4313      	orrs	r3, r2
 8038410:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8038412:	68bb      	ldr	r3, [r7, #8]
 8038414:	791b      	ldrb	r3, [r3, #4]
 8038416:	2b01      	cmp	r3, #1
 8038418:	d11f      	bne.n	803845a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 803841a:	69bb      	ldr	r3, [r7, #24]
 803841c:	015a      	lsls	r2, r3, #5
 803841e:	69fb      	ldr	r3, [r7, #28]
 8038420:	4413      	add	r3, r2
 8038422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038426:	691b      	ldr	r3, [r3, #16]
 8038428:	69ba      	ldr	r2, [r7, #24]
 803842a:	0151      	lsls	r1, r2, #5
 803842c:	69fa      	ldr	r2, [r7, #28]
 803842e:	440a      	add	r2, r1
 8038430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038434:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8038438:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 803843a:	69bb      	ldr	r3, [r7, #24]
 803843c:	015a      	lsls	r2, r3, #5
 803843e:	69fb      	ldr	r3, [r7, #28]
 8038440:	4413      	add	r3, r2
 8038442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038446:	691b      	ldr	r3, [r3, #16]
 8038448:	69ba      	ldr	r2, [r7, #24]
 803844a:	0151      	lsls	r1, r2, #5
 803844c:	69fa      	ldr	r2, [r7, #28]
 803844e:	440a      	add	r2, r1
 8038450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038454:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8038458:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 803845a:	79fb      	ldrb	r3, [r7, #7]
 803845c:	2b01      	cmp	r3, #1
 803845e:	d14b      	bne.n	80384f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8038460:	68bb      	ldr	r3, [r7, #8]
 8038462:	695b      	ldr	r3, [r3, #20]
 8038464:	2b00      	cmp	r3, #0
 8038466:	d009      	beq.n	803847c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8038468:	69bb      	ldr	r3, [r7, #24]
 803846a:	015a      	lsls	r2, r3, #5
 803846c:	69fb      	ldr	r3, [r7, #28]
 803846e:	4413      	add	r3, r2
 8038470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038474:	461a      	mov	r2, r3
 8038476:	68bb      	ldr	r3, [r7, #8]
 8038478:	695b      	ldr	r3, [r3, #20]
 803847a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 803847c:	68bb      	ldr	r3, [r7, #8]
 803847e:	791b      	ldrb	r3, [r3, #4]
 8038480:	2b01      	cmp	r3, #1
 8038482:	d128      	bne.n	80384d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8038484:	69fb      	ldr	r3, [r7, #28]
 8038486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803848a:	689b      	ldr	r3, [r3, #8]
 803848c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038490:	2b00      	cmp	r3, #0
 8038492:	d110      	bne.n	80384b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8038494:	69bb      	ldr	r3, [r7, #24]
 8038496:	015a      	lsls	r2, r3, #5
 8038498:	69fb      	ldr	r3, [r7, #28]
 803849a:	4413      	add	r3, r2
 803849c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80384a0:	681b      	ldr	r3, [r3, #0]
 80384a2:	69ba      	ldr	r2, [r7, #24]
 80384a4:	0151      	lsls	r1, r2, #5
 80384a6:	69fa      	ldr	r2, [r7, #28]
 80384a8:	440a      	add	r2, r1
 80384aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80384ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80384b2:	6013      	str	r3, [r2, #0]
 80384b4:	e00f      	b.n	80384d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80384b6:	69bb      	ldr	r3, [r7, #24]
 80384b8:	015a      	lsls	r2, r3, #5
 80384ba:	69fb      	ldr	r3, [r7, #28]
 80384bc:	4413      	add	r3, r2
 80384be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80384c2:	681b      	ldr	r3, [r3, #0]
 80384c4:	69ba      	ldr	r2, [r7, #24]
 80384c6:	0151      	lsls	r1, r2, #5
 80384c8:	69fa      	ldr	r2, [r7, #28]
 80384ca:	440a      	add	r2, r1
 80384cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80384d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80384d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80384d6:	69bb      	ldr	r3, [r7, #24]
 80384d8:	015a      	lsls	r2, r3, #5
 80384da:	69fb      	ldr	r3, [r7, #28]
 80384dc:	4413      	add	r3, r2
 80384de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80384e2:	681b      	ldr	r3, [r3, #0]
 80384e4:	69ba      	ldr	r2, [r7, #24]
 80384e6:	0151      	lsls	r1, r2, #5
 80384e8:	69fa      	ldr	r2, [r7, #28]
 80384ea:	440a      	add	r2, r1
 80384ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80384f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80384f4:	6013      	str	r3, [r2, #0]
 80384f6:	e137      	b.n	8038768 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80384f8:	69bb      	ldr	r3, [r7, #24]
 80384fa:	015a      	lsls	r2, r3, #5
 80384fc:	69fb      	ldr	r3, [r7, #28]
 80384fe:	4413      	add	r3, r2
 8038500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038504:	681b      	ldr	r3, [r3, #0]
 8038506:	69ba      	ldr	r2, [r7, #24]
 8038508:	0151      	lsls	r1, r2, #5
 803850a:	69fa      	ldr	r2, [r7, #28]
 803850c:	440a      	add	r2, r1
 803850e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038516:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8038518:	68bb      	ldr	r3, [r7, #8]
 803851a:	791b      	ldrb	r3, [r3, #4]
 803851c:	2b01      	cmp	r3, #1
 803851e:	d015      	beq.n	803854c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8038520:	68bb      	ldr	r3, [r7, #8]
 8038522:	699b      	ldr	r3, [r3, #24]
 8038524:	2b00      	cmp	r3, #0
 8038526:	f000 811f 	beq.w	8038768 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803852a:	69fb      	ldr	r3, [r7, #28]
 803852c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8038532:	68bb      	ldr	r3, [r7, #8]
 8038534:	781b      	ldrb	r3, [r3, #0]
 8038536:	f003 030f 	and.w	r3, r3, #15
 803853a:	2101      	movs	r1, #1
 803853c:	fa01 f303 	lsl.w	r3, r1, r3
 8038540:	69f9      	ldr	r1, [r7, #28]
 8038542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038546:	4313      	orrs	r3, r2
 8038548:	634b      	str	r3, [r1, #52]	; 0x34
 803854a:	e10d      	b.n	8038768 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803854c:	69fb      	ldr	r3, [r7, #28]
 803854e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038552:	689b      	ldr	r3, [r3, #8]
 8038554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038558:	2b00      	cmp	r3, #0
 803855a:	d110      	bne.n	803857e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 803855c:	69bb      	ldr	r3, [r7, #24]
 803855e:	015a      	lsls	r2, r3, #5
 8038560:	69fb      	ldr	r3, [r7, #28]
 8038562:	4413      	add	r3, r2
 8038564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038568:	681b      	ldr	r3, [r3, #0]
 803856a:	69ba      	ldr	r2, [r7, #24]
 803856c:	0151      	lsls	r1, r2, #5
 803856e:	69fa      	ldr	r2, [r7, #28]
 8038570:	440a      	add	r2, r1
 8038572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038576:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803857a:	6013      	str	r3, [r2, #0]
 803857c:	e00f      	b.n	803859e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 803857e:	69bb      	ldr	r3, [r7, #24]
 8038580:	015a      	lsls	r2, r3, #5
 8038582:	69fb      	ldr	r3, [r7, #28]
 8038584:	4413      	add	r3, r2
 8038586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803858a:	681b      	ldr	r3, [r3, #0]
 803858c:	69ba      	ldr	r2, [r7, #24]
 803858e:	0151      	lsls	r1, r2, #5
 8038590:	69fa      	ldr	r2, [r7, #28]
 8038592:	440a      	add	r2, r1
 8038594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803859c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 803859e:	68bb      	ldr	r3, [r7, #8]
 80385a0:	6919      	ldr	r1, [r3, #16]
 80385a2:	68bb      	ldr	r3, [r7, #8]
 80385a4:	781a      	ldrb	r2, [r3, #0]
 80385a6:	68bb      	ldr	r3, [r7, #8]
 80385a8:	699b      	ldr	r3, [r3, #24]
 80385aa:	b298      	uxth	r0, r3
 80385ac:	79fb      	ldrb	r3, [r7, #7]
 80385ae:	9300      	str	r3, [sp, #0]
 80385b0:	4603      	mov	r3, r0
 80385b2:	68f8      	ldr	r0, [r7, #12]
 80385b4:	f000 faea 	bl	8038b8c <USB_WritePacket>
 80385b8:	e0d6      	b.n	8038768 <USB_EPStartXfer+0x488>
 80385ba:	bf00      	nop
 80385bc:	e007ffff 	.word	0xe007ffff
 80385c0:	fff80000 	.word	0xfff80000
 80385c4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80385c8:	69bb      	ldr	r3, [r7, #24]
 80385ca:	015a      	lsls	r2, r3, #5
 80385cc:	69fb      	ldr	r3, [r7, #28]
 80385ce:	4413      	add	r3, r2
 80385d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80385d4:	691a      	ldr	r2, [r3, #16]
 80385d6:	69bb      	ldr	r3, [r7, #24]
 80385d8:	0159      	lsls	r1, r3, #5
 80385da:	69fb      	ldr	r3, [r7, #28]
 80385dc:	440b      	add	r3, r1
 80385de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80385e2:	4619      	mov	r1, r3
 80385e4:	4b63      	ldr	r3, [pc, #396]	; (8038774 <USB_EPStartXfer+0x494>)
 80385e6:	4013      	ands	r3, r2
 80385e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80385ea:	69bb      	ldr	r3, [r7, #24]
 80385ec:	015a      	lsls	r2, r3, #5
 80385ee:	69fb      	ldr	r3, [r7, #28]
 80385f0:	4413      	add	r3, r2
 80385f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80385f6:	691a      	ldr	r2, [r3, #16]
 80385f8:	69bb      	ldr	r3, [r7, #24]
 80385fa:	0159      	lsls	r1, r3, #5
 80385fc:	69fb      	ldr	r3, [r7, #28]
 80385fe:	440b      	add	r3, r1
 8038600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038604:	4619      	mov	r1, r3
 8038606:	4b5c      	ldr	r3, [pc, #368]	; (8038778 <USB_EPStartXfer+0x498>)
 8038608:	4013      	ands	r3, r2
 803860a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 803860c:	68bb      	ldr	r3, [r7, #8]
 803860e:	699b      	ldr	r3, [r3, #24]
 8038610:	2b00      	cmp	r3, #0
 8038612:	d123      	bne.n	803865c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8038614:	69bb      	ldr	r3, [r7, #24]
 8038616:	015a      	lsls	r2, r3, #5
 8038618:	69fb      	ldr	r3, [r7, #28]
 803861a:	4413      	add	r3, r2
 803861c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038620:	691a      	ldr	r2, [r3, #16]
 8038622:	68bb      	ldr	r3, [r7, #8]
 8038624:	68db      	ldr	r3, [r3, #12]
 8038626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803862a:	69b9      	ldr	r1, [r7, #24]
 803862c:	0148      	lsls	r0, r1, #5
 803862e:	69f9      	ldr	r1, [r7, #28]
 8038630:	4401      	add	r1, r0
 8038632:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8038636:	4313      	orrs	r3, r2
 8038638:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803863a:	69bb      	ldr	r3, [r7, #24]
 803863c:	015a      	lsls	r2, r3, #5
 803863e:	69fb      	ldr	r3, [r7, #28]
 8038640:	4413      	add	r3, r2
 8038642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038646:	691b      	ldr	r3, [r3, #16]
 8038648:	69ba      	ldr	r2, [r7, #24]
 803864a:	0151      	lsls	r1, r2, #5
 803864c:	69fa      	ldr	r2, [r7, #28]
 803864e:	440a      	add	r2, r1
 8038650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038658:	6113      	str	r3, [r2, #16]
 803865a:	e037      	b.n	80386cc <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 803865c:	68bb      	ldr	r3, [r7, #8]
 803865e:	699a      	ldr	r2, [r3, #24]
 8038660:	68bb      	ldr	r3, [r7, #8]
 8038662:	68db      	ldr	r3, [r3, #12]
 8038664:	4413      	add	r3, r2
 8038666:	1e5a      	subs	r2, r3, #1
 8038668:	68bb      	ldr	r3, [r7, #8]
 803866a:	68db      	ldr	r3, [r3, #12]
 803866c:	fbb2 f3f3 	udiv	r3, r2, r3
 8038670:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8038672:	68bb      	ldr	r3, [r7, #8]
 8038674:	68db      	ldr	r3, [r3, #12]
 8038676:	8afa      	ldrh	r2, [r7, #22]
 8038678:	fb03 f202 	mul.w	r2, r3, r2
 803867c:	68bb      	ldr	r3, [r7, #8]
 803867e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8038680:	69bb      	ldr	r3, [r7, #24]
 8038682:	015a      	lsls	r2, r3, #5
 8038684:	69fb      	ldr	r3, [r7, #28]
 8038686:	4413      	add	r3, r2
 8038688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803868c:	691a      	ldr	r2, [r3, #16]
 803868e:	8afb      	ldrh	r3, [r7, #22]
 8038690:	04d9      	lsls	r1, r3, #19
 8038692:	4b3a      	ldr	r3, [pc, #232]	; (803877c <USB_EPStartXfer+0x49c>)
 8038694:	400b      	ands	r3, r1
 8038696:	69b9      	ldr	r1, [r7, #24]
 8038698:	0148      	lsls	r0, r1, #5
 803869a:	69f9      	ldr	r1, [r7, #28]
 803869c:	4401      	add	r1, r0
 803869e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80386a2:	4313      	orrs	r3, r2
 80386a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80386a6:	69bb      	ldr	r3, [r7, #24]
 80386a8:	015a      	lsls	r2, r3, #5
 80386aa:	69fb      	ldr	r3, [r7, #28]
 80386ac:	4413      	add	r3, r2
 80386ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80386b2:	691a      	ldr	r2, [r3, #16]
 80386b4:	68bb      	ldr	r3, [r7, #8]
 80386b6:	69db      	ldr	r3, [r3, #28]
 80386b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80386bc:	69b9      	ldr	r1, [r7, #24]
 80386be:	0148      	lsls	r0, r1, #5
 80386c0:	69f9      	ldr	r1, [r7, #28]
 80386c2:	4401      	add	r1, r0
 80386c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80386c8:	4313      	orrs	r3, r2
 80386ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80386cc:	79fb      	ldrb	r3, [r7, #7]
 80386ce:	2b01      	cmp	r3, #1
 80386d0:	d10d      	bne.n	80386ee <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80386d2:	68bb      	ldr	r3, [r7, #8]
 80386d4:	691b      	ldr	r3, [r3, #16]
 80386d6:	2b00      	cmp	r3, #0
 80386d8:	d009      	beq.n	80386ee <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80386da:	68bb      	ldr	r3, [r7, #8]
 80386dc:	6919      	ldr	r1, [r3, #16]
 80386de:	69bb      	ldr	r3, [r7, #24]
 80386e0:	015a      	lsls	r2, r3, #5
 80386e2:	69fb      	ldr	r3, [r7, #28]
 80386e4:	4413      	add	r3, r2
 80386e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80386ea:	460a      	mov	r2, r1
 80386ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80386ee:	68bb      	ldr	r3, [r7, #8]
 80386f0:	791b      	ldrb	r3, [r3, #4]
 80386f2:	2b01      	cmp	r3, #1
 80386f4:	d128      	bne.n	8038748 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80386f6:	69fb      	ldr	r3, [r7, #28]
 80386f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80386fc:	689b      	ldr	r3, [r3, #8]
 80386fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038702:	2b00      	cmp	r3, #0
 8038704:	d110      	bne.n	8038728 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8038706:	69bb      	ldr	r3, [r7, #24]
 8038708:	015a      	lsls	r2, r3, #5
 803870a:	69fb      	ldr	r3, [r7, #28]
 803870c:	4413      	add	r3, r2
 803870e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038712:	681b      	ldr	r3, [r3, #0]
 8038714:	69ba      	ldr	r2, [r7, #24]
 8038716:	0151      	lsls	r1, r2, #5
 8038718:	69fa      	ldr	r2, [r7, #28]
 803871a:	440a      	add	r2, r1
 803871c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8038724:	6013      	str	r3, [r2, #0]
 8038726:	e00f      	b.n	8038748 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8038728:	69bb      	ldr	r3, [r7, #24]
 803872a:	015a      	lsls	r2, r3, #5
 803872c:	69fb      	ldr	r3, [r7, #28]
 803872e:	4413      	add	r3, r2
 8038730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038734:	681b      	ldr	r3, [r3, #0]
 8038736:	69ba      	ldr	r2, [r7, #24]
 8038738:	0151      	lsls	r1, r2, #5
 803873a:	69fa      	ldr	r2, [r7, #28]
 803873c:	440a      	add	r2, r1
 803873e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8038746:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8038748:	69bb      	ldr	r3, [r7, #24]
 803874a:	015a      	lsls	r2, r3, #5
 803874c:	69fb      	ldr	r3, [r7, #28]
 803874e:	4413      	add	r3, r2
 8038750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038754:	681b      	ldr	r3, [r3, #0]
 8038756:	69ba      	ldr	r2, [r7, #24]
 8038758:	0151      	lsls	r1, r2, #5
 803875a:	69fa      	ldr	r2, [r7, #28]
 803875c:	440a      	add	r2, r1
 803875e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038762:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038766:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038768:	2300      	movs	r3, #0
}
 803876a:	4618      	mov	r0, r3
 803876c:	3720      	adds	r7, #32
 803876e:	46bd      	mov	sp, r7
 8038770:	bd80      	pop	{r7, pc}
 8038772:	bf00      	nop
 8038774:	fff80000 	.word	0xfff80000
 8038778:	e007ffff 	.word	0xe007ffff
 803877c:	1ff80000 	.word	0x1ff80000

08038780 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8038780:	b480      	push	{r7}
 8038782:	b087      	sub	sp, #28
 8038784:	af00      	add	r7, sp, #0
 8038786:	60f8      	str	r0, [r7, #12]
 8038788:	60b9      	str	r1, [r7, #8]
 803878a:	4613      	mov	r3, r2
 803878c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803878e:	68fb      	ldr	r3, [r7, #12]
 8038790:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8038792:	68bb      	ldr	r3, [r7, #8]
 8038794:	781b      	ldrb	r3, [r3, #0]
 8038796:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8038798:	68bb      	ldr	r3, [r7, #8]
 803879a:	785b      	ldrb	r3, [r3, #1]
 803879c:	2b01      	cmp	r3, #1
 803879e:	f040 80ce 	bne.w	803893e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80387a2:	68bb      	ldr	r3, [r7, #8]
 80387a4:	699b      	ldr	r3, [r3, #24]
 80387a6:	2b00      	cmp	r3, #0
 80387a8:	d132      	bne.n	8038810 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80387aa:	693b      	ldr	r3, [r7, #16]
 80387ac:	015a      	lsls	r2, r3, #5
 80387ae:	697b      	ldr	r3, [r7, #20]
 80387b0:	4413      	add	r3, r2
 80387b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80387b6:	691a      	ldr	r2, [r3, #16]
 80387b8:	693b      	ldr	r3, [r7, #16]
 80387ba:	0159      	lsls	r1, r3, #5
 80387bc:	697b      	ldr	r3, [r7, #20]
 80387be:	440b      	add	r3, r1
 80387c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80387c4:	4619      	mov	r1, r3
 80387c6:	4b9a      	ldr	r3, [pc, #616]	; (8038a30 <USB_EP0StartXfer+0x2b0>)
 80387c8:	4013      	ands	r3, r2
 80387ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80387cc:	693b      	ldr	r3, [r7, #16]
 80387ce:	015a      	lsls	r2, r3, #5
 80387d0:	697b      	ldr	r3, [r7, #20]
 80387d2:	4413      	add	r3, r2
 80387d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80387d8:	691b      	ldr	r3, [r3, #16]
 80387da:	693a      	ldr	r2, [r7, #16]
 80387dc:	0151      	lsls	r1, r2, #5
 80387de:	697a      	ldr	r2, [r7, #20]
 80387e0:	440a      	add	r2, r1
 80387e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80387e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80387ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80387ec:	693b      	ldr	r3, [r7, #16]
 80387ee:	015a      	lsls	r2, r3, #5
 80387f0:	697b      	ldr	r3, [r7, #20]
 80387f2:	4413      	add	r3, r2
 80387f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80387f8:	691a      	ldr	r2, [r3, #16]
 80387fa:	693b      	ldr	r3, [r7, #16]
 80387fc:	0159      	lsls	r1, r3, #5
 80387fe:	697b      	ldr	r3, [r7, #20]
 8038800:	440b      	add	r3, r1
 8038802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038806:	4619      	mov	r1, r3
 8038808:	4b8a      	ldr	r3, [pc, #552]	; (8038a34 <USB_EP0StartXfer+0x2b4>)
 803880a:	4013      	ands	r3, r2
 803880c:	610b      	str	r3, [r1, #16]
 803880e:	e04e      	b.n	80388ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8038810:	693b      	ldr	r3, [r7, #16]
 8038812:	015a      	lsls	r2, r3, #5
 8038814:	697b      	ldr	r3, [r7, #20]
 8038816:	4413      	add	r3, r2
 8038818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803881c:	691a      	ldr	r2, [r3, #16]
 803881e:	693b      	ldr	r3, [r7, #16]
 8038820:	0159      	lsls	r1, r3, #5
 8038822:	697b      	ldr	r3, [r7, #20]
 8038824:	440b      	add	r3, r1
 8038826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803882a:	4619      	mov	r1, r3
 803882c:	4b81      	ldr	r3, [pc, #516]	; (8038a34 <USB_EP0StartXfer+0x2b4>)
 803882e:	4013      	ands	r3, r2
 8038830:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8038832:	693b      	ldr	r3, [r7, #16]
 8038834:	015a      	lsls	r2, r3, #5
 8038836:	697b      	ldr	r3, [r7, #20]
 8038838:	4413      	add	r3, r2
 803883a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803883e:	691a      	ldr	r2, [r3, #16]
 8038840:	693b      	ldr	r3, [r7, #16]
 8038842:	0159      	lsls	r1, r3, #5
 8038844:	697b      	ldr	r3, [r7, #20]
 8038846:	440b      	add	r3, r1
 8038848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803884c:	4619      	mov	r1, r3
 803884e:	4b78      	ldr	r3, [pc, #480]	; (8038a30 <USB_EP0StartXfer+0x2b0>)
 8038850:	4013      	ands	r3, r2
 8038852:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8038854:	68bb      	ldr	r3, [r7, #8]
 8038856:	699a      	ldr	r2, [r3, #24]
 8038858:	68bb      	ldr	r3, [r7, #8]
 803885a:	68db      	ldr	r3, [r3, #12]
 803885c:	429a      	cmp	r2, r3
 803885e:	d903      	bls.n	8038868 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8038860:	68bb      	ldr	r3, [r7, #8]
 8038862:	68da      	ldr	r2, [r3, #12]
 8038864:	68bb      	ldr	r3, [r7, #8]
 8038866:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8038868:	693b      	ldr	r3, [r7, #16]
 803886a:	015a      	lsls	r2, r3, #5
 803886c:	697b      	ldr	r3, [r7, #20]
 803886e:	4413      	add	r3, r2
 8038870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038874:	691b      	ldr	r3, [r3, #16]
 8038876:	693a      	ldr	r2, [r7, #16]
 8038878:	0151      	lsls	r1, r2, #5
 803887a:	697a      	ldr	r2, [r7, #20]
 803887c:	440a      	add	r2, r1
 803887e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038882:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038886:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8038888:	693b      	ldr	r3, [r7, #16]
 803888a:	015a      	lsls	r2, r3, #5
 803888c:	697b      	ldr	r3, [r7, #20]
 803888e:	4413      	add	r3, r2
 8038890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038894:	691a      	ldr	r2, [r3, #16]
 8038896:	68bb      	ldr	r3, [r7, #8]
 8038898:	699b      	ldr	r3, [r3, #24]
 803889a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803889e:	6939      	ldr	r1, [r7, #16]
 80388a0:	0148      	lsls	r0, r1, #5
 80388a2:	6979      	ldr	r1, [r7, #20]
 80388a4:	4401      	add	r1, r0
 80388a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80388aa:	4313      	orrs	r3, r2
 80388ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80388ae:	79fb      	ldrb	r3, [r7, #7]
 80388b0:	2b01      	cmp	r3, #1
 80388b2:	d11e      	bne.n	80388f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80388b4:	68bb      	ldr	r3, [r7, #8]
 80388b6:	695b      	ldr	r3, [r3, #20]
 80388b8:	2b00      	cmp	r3, #0
 80388ba:	d009      	beq.n	80388d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80388bc:	693b      	ldr	r3, [r7, #16]
 80388be:	015a      	lsls	r2, r3, #5
 80388c0:	697b      	ldr	r3, [r7, #20]
 80388c2:	4413      	add	r3, r2
 80388c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80388c8:	461a      	mov	r2, r3
 80388ca:	68bb      	ldr	r3, [r7, #8]
 80388cc:	695b      	ldr	r3, [r3, #20]
 80388ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80388d0:	693b      	ldr	r3, [r7, #16]
 80388d2:	015a      	lsls	r2, r3, #5
 80388d4:	697b      	ldr	r3, [r7, #20]
 80388d6:	4413      	add	r3, r2
 80388d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80388dc:	681b      	ldr	r3, [r3, #0]
 80388de:	693a      	ldr	r2, [r7, #16]
 80388e0:	0151      	lsls	r1, r2, #5
 80388e2:	697a      	ldr	r2, [r7, #20]
 80388e4:	440a      	add	r2, r1
 80388e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80388ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80388ee:	6013      	str	r3, [r2, #0]
 80388f0:	e097      	b.n	8038a22 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80388f2:	693b      	ldr	r3, [r7, #16]
 80388f4:	015a      	lsls	r2, r3, #5
 80388f6:	697b      	ldr	r3, [r7, #20]
 80388f8:	4413      	add	r3, r2
 80388fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80388fe:	681b      	ldr	r3, [r3, #0]
 8038900:	693a      	ldr	r2, [r7, #16]
 8038902:	0151      	lsls	r1, r2, #5
 8038904:	697a      	ldr	r2, [r7, #20]
 8038906:	440a      	add	r2, r1
 8038908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803890c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038910:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8038912:	68bb      	ldr	r3, [r7, #8]
 8038914:	699b      	ldr	r3, [r3, #24]
 8038916:	2b00      	cmp	r3, #0
 8038918:	f000 8083 	beq.w	8038a22 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803891c:	697b      	ldr	r3, [r7, #20]
 803891e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8038924:	68bb      	ldr	r3, [r7, #8]
 8038926:	781b      	ldrb	r3, [r3, #0]
 8038928:	f003 030f 	and.w	r3, r3, #15
 803892c:	2101      	movs	r1, #1
 803892e:	fa01 f303 	lsl.w	r3, r1, r3
 8038932:	6979      	ldr	r1, [r7, #20]
 8038934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038938:	4313      	orrs	r3, r2
 803893a:	634b      	str	r3, [r1, #52]	; 0x34
 803893c:	e071      	b.n	8038a22 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 803893e:	693b      	ldr	r3, [r7, #16]
 8038940:	015a      	lsls	r2, r3, #5
 8038942:	697b      	ldr	r3, [r7, #20]
 8038944:	4413      	add	r3, r2
 8038946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803894a:	691a      	ldr	r2, [r3, #16]
 803894c:	693b      	ldr	r3, [r7, #16]
 803894e:	0159      	lsls	r1, r3, #5
 8038950:	697b      	ldr	r3, [r7, #20]
 8038952:	440b      	add	r3, r1
 8038954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038958:	4619      	mov	r1, r3
 803895a:	4b36      	ldr	r3, [pc, #216]	; (8038a34 <USB_EP0StartXfer+0x2b4>)
 803895c:	4013      	ands	r3, r2
 803895e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8038960:	693b      	ldr	r3, [r7, #16]
 8038962:	015a      	lsls	r2, r3, #5
 8038964:	697b      	ldr	r3, [r7, #20]
 8038966:	4413      	add	r3, r2
 8038968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803896c:	691a      	ldr	r2, [r3, #16]
 803896e:	693b      	ldr	r3, [r7, #16]
 8038970:	0159      	lsls	r1, r3, #5
 8038972:	697b      	ldr	r3, [r7, #20]
 8038974:	440b      	add	r3, r1
 8038976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803897a:	4619      	mov	r1, r3
 803897c:	4b2c      	ldr	r3, [pc, #176]	; (8038a30 <USB_EP0StartXfer+0x2b0>)
 803897e:	4013      	ands	r3, r2
 8038980:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8038982:	68bb      	ldr	r3, [r7, #8]
 8038984:	699b      	ldr	r3, [r3, #24]
 8038986:	2b00      	cmp	r3, #0
 8038988:	d003      	beq.n	8038992 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 803898a:	68bb      	ldr	r3, [r7, #8]
 803898c:	68da      	ldr	r2, [r3, #12]
 803898e:	68bb      	ldr	r3, [r7, #8]
 8038990:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8038992:	68bb      	ldr	r3, [r7, #8]
 8038994:	68da      	ldr	r2, [r3, #12]
 8038996:	68bb      	ldr	r3, [r7, #8]
 8038998:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803899a:	693b      	ldr	r3, [r7, #16]
 803899c:	015a      	lsls	r2, r3, #5
 803899e:	697b      	ldr	r3, [r7, #20]
 80389a0:	4413      	add	r3, r2
 80389a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80389a6:	691b      	ldr	r3, [r3, #16]
 80389a8:	693a      	ldr	r2, [r7, #16]
 80389aa:	0151      	lsls	r1, r2, #5
 80389ac:	697a      	ldr	r2, [r7, #20]
 80389ae:	440a      	add	r2, r1
 80389b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80389b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80389b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80389ba:	693b      	ldr	r3, [r7, #16]
 80389bc:	015a      	lsls	r2, r3, #5
 80389be:	697b      	ldr	r3, [r7, #20]
 80389c0:	4413      	add	r3, r2
 80389c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80389c6:	691a      	ldr	r2, [r3, #16]
 80389c8:	68bb      	ldr	r3, [r7, #8]
 80389ca:	69db      	ldr	r3, [r3, #28]
 80389cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80389d0:	6939      	ldr	r1, [r7, #16]
 80389d2:	0148      	lsls	r0, r1, #5
 80389d4:	6979      	ldr	r1, [r7, #20]
 80389d6:	4401      	add	r1, r0
 80389d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80389dc:	4313      	orrs	r3, r2
 80389de:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80389e0:	79fb      	ldrb	r3, [r7, #7]
 80389e2:	2b01      	cmp	r3, #1
 80389e4:	d10d      	bne.n	8038a02 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80389e6:	68bb      	ldr	r3, [r7, #8]
 80389e8:	691b      	ldr	r3, [r3, #16]
 80389ea:	2b00      	cmp	r3, #0
 80389ec:	d009      	beq.n	8038a02 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80389ee:	68bb      	ldr	r3, [r7, #8]
 80389f0:	6919      	ldr	r1, [r3, #16]
 80389f2:	693b      	ldr	r3, [r7, #16]
 80389f4:	015a      	lsls	r2, r3, #5
 80389f6:	697b      	ldr	r3, [r7, #20]
 80389f8:	4413      	add	r3, r2
 80389fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80389fe:	460a      	mov	r2, r1
 8038a00:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8038a02:	693b      	ldr	r3, [r7, #16]
 8038a04:	015a      	lsls	r2, r3, #5
 8038a06:	697b      	ldr	r3, [r7, #20]
 8038a08:	4413      	add	r3, r2
 8038a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038a0e:	681b      	ldr	r3, [r3, #0]
 8038a10:	693a      	ldr	r2, [r7, #16]
 8038a12:	0151      	lsls	r1, r2, #5
 8038a14:	697a      	ldr	r2, [r7, #20]
 8038a16:	440a      	add	r2, r1
 8038a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038a1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038a20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038a22:	2300      	movs	r3, #0
}
 8038a24:	4618      	mov	r0, r3
 8038a26:	371c      	adds	r7, #28
 8038a28:	46bd      	mov	sp, r7
 8038a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038a2e:	4770      	bx	lr
 8038a30:	e007ffff 	.word	0xe007ffff
 8038a34:	fff80000 	.word	0xfff80000

08038a38 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038a38:	b480      	push	{r7}
 8038a3a:	b087      	sub	sp, #28
 8038a3c:	af00      	add	r7, sp, #0
 8038a3e:	6078      	str	r0, [r7, #4]
 8038a40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8038a42:	2300      	movs	r3, #0
 8038a44:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8038a46:	2300      	movs	r3, #0
 8038a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038a4a:	687b      	ldr	r3, [r7, #4]
 8038a4c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8038a4e:	683b      	ldr	r3, [r7, #0]
 8038a50:	785b      	ldrb	r3, [r3, #1]
 8038a52:	2b01      	cmp	r3, #1
 8038a54:	d14a      	bne.n	8038aec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8038a56:	683b      	ldr	r3, [r7, #0]
 8038a58:	781b      	ldrb	r3, [r3, #0]
 8038a5a:	015a      	lsls	r2, r3, #5
 8038a5c:	693b      	ldr	r3, [r7, #16]
 8038a5e:	4413      	add	r3, r2
 8038a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a64:	681b      	ldr	r3, [r3, #0]
 8038a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038a6e:	f040 8086 	bne.w	8038b7e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8038a72:	683b      	ldr	r3, [r7, #0]
 8038a74:	781b      	ldrb	r3, [r3, #0]
 8038a76:	015a      	lsls	r2, r3, #5
 8038a78:	693b      	ldr	r3, [r7, #16]
 8038a7a:	4413      	add	r3, r2
 8038a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a80:	681b      	ldr	r3, [r3, #0]
 8038a82:	683a      	ldr	r2, [r7, #0]
 8038a84:	7812      	ldrb	r2, [r2, #0]
 8038a86:	0151      	lsls	r1, r2, #5
 8038a88:	693a      	ldr	r2, [r7, #16]
 8038a8a:	440a      	add	r2, r1
 8038a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038a90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8038a94:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8038a96:	683b      	ldr	r3, [r7, #0]
 8038a98:	781b      	ldrb	r3, [r3, #0]
 8038a9a:	015a      	lsls	r2, r3, #5
 8038a9c:	693b      	ldr	r3, [r7, #16]
 8038a9e:	4413      	add	r3, r2
 8038aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038aa4:	681b      	ldr	r3, [r3, #0]
 8038aa6:	683a      	ldr	r2, [r7, #0]
 8038aa8:	7812      	ldrb	r2, [r2, #0]
 8038aaa:	0151      	lsls	r1, r2, #5
 8038aac:	693a      	ldr	r2, [r7, #16]
 8038aae:	440a      	add	r2, r1
 8038ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8038ab8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8038aba:	68fb      	ldr	r3, [r7, #12]
 8038abc:	3301      	adds	r3, #1
 8038abe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8038ac0:	68fb      	ldr	r3, [r7, #12]
 8038ac2:	f242 7210 	movw	r2, #10000	; 0x2710
 8038ac6:	4293      	cmp	r3, r2
 8038ac8:	d902      	bls.n	8038ad0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8038aca:	2301      	movs	r3, #1
 8038acc:	75fb      	strb	r3, [r7, #23]
          break;
 8038ace:	e056      	b.n	8038b7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8038ad0:	683b      	ldr	r3, [r7, #0]
 8038ad2:	781b      	ldrb	r3, [r3, #0]
 8038ad4:	015a      	lsls	r2, r3, #5
 8038ad6:	693b      	ldr	r3, [r7, #16]
 8038ad8:	4413      	add	r3, r2
 8038ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038ade:	681b      	ldr	r3, [r3, #0]
 8038ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038ae8:	d0e7      	beq.n	8038aba <USB_EPStopXfer+0x82>
 8038aea:	e048      	b.n	8038b7e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8038aec:	683b      	ldr	r3, [r7, #0]
 8038aee:	781b      	ldrb	r3, [r3, #0]
 8038af0:	015a      	lsls	r2, r3, #5
 8038af2:	693b      	ldr	r3, [r7, #16]
 8038af4:	4413      	add	r3, r2
 8038af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038afa:	681b      	ldr	r3, [r3, #0]
 8038afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038b04:	d13b      	bne.n	8038b7e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8038b06:	683b      	ldr	r3, [r7, #0]
 8038b08:	781b      	ldrb	r3, [r3, #0]
 8038b0a:	015a      	lsls	r2, r3, #5
 8038b0c:	693b      	ldr	r3, [r7, #16]
 8038b0e:	4413      	add	r3, r2
 8038b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b14:	681b      	ldr	r3, [r3, #0]
 8038b16:	683a      	ldr	r2, [r7, #0]
 8038b18:	7812      	ldrb	r2, [r2, #0]
 8038b1a:	0151      	lsls	r1, r2, #5
 8038b1c:	693a      	ldr	r2, [r7, #16]
 8038b1e:	440a      	add	r2, r1
 8038b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038b24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8038b28:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8038b2a:	683b      	ldr	r3, [r7, #0]
 8038b2c:	781b      	ldrb	r3, [r3, #0]
 8038b2e:	015a      	lsls	r2, r3, #5
 8038b30:	693b      	ldr	r3, [r7, #16]
 8038b32:	4413      	add	r3, r2
 8038b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b38:	681b      	ldr	r3, [r3, #0]
 8038b3a:	683a      	ldr	r2, [r7, #0]
 8038b3c:	7812      	ldrb	r2, [r2, #0]
 8038b3e:	0151      	lsls	r1, r2, #5
 8038b40:	693a      	ldr	r2, [r7, #16]
 8038b42:	440a      	add	r2, r1
 8038b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038b48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8038b4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8038b4e:	68fb      	ldr	r3, [r7, #12]
 8038b50:	3301      	adds	r3, #1
 8038b52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8038b54:	68fb      	ldr	r3, [r7, #12]
 8038b56:	f242 7210 	movw	r2, #10000	; 0x2710
 8038b5a:	4293      	cmp	r3, r2
 8038b5c:	d902      	bls.n	8038b64 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8038b5e:	2301      	movs	r3, #1
 8038b60:	75fb      	strb	r3, [r7, #23]
          break;
 8038b62:	e00c      	b.n	8038b7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8038b64:	683b      	ldr	r3, [r7, #0]
 8038b66:	781b      	ldrb	r3, [r3, #0]
 8038b68:	015a      	lsls	r2, r3, #5
 8038b6a:	693b      	ldr	r3, [r7, #16]
 8038b6c:	4413      	add	r3, r2
 8038b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b72:	681b      	ldr	r3, [r3, #0]
 8038b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038b7c:	d0e7      	beq.n	8038b4e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8038b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8038b80:	4618      	mov	r0, r3
 8038b82:	371c      	adds	r7, #28
 8038b84:	46bd      	mov	sp, r7
 8038b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038b8a:	4770      	bx	lr

08038b8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8038b8c:	b480      	push	{r7}
 8038b8e:	b089      	sub	sp, #36	; 0x24
 8038b90:	af00      	add	r7, sp, #0
 8038b92:	60f8      	str	r0, [r7, #12]
 8038b94:	60b9      	str	r1, [r7, #8]
 8038b96:	4611      	mov	r1, r2
 8038b98:	461a      	mov	r2, r3
 8038b9a:	460b      	mov	r3, r1
 8038b9c:	71fb      	strb	r3, [r7, #7]
 8038b9e:	4613      	mov	r3, r2
 8038ba0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038ba2:	68fb      	ldr	r3, [r7, #12]
 8038ba4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8038ba6:	68bb      	ldr	r3, [r7, #8]
 8038ba8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8038baa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8038bae:	2b00      	cmp	r3, #0
 8038bb0:	d123      	bne.n	8038bfa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8038bb2:	88bb      	ldrh	r3, [r7, #4]
 8038bb4:	3303      	adds	r3, #3
 8038bb6:	089b      	lsrs	r3, r3, #2
 8038bb8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8038bba:	2300      	movs	r3, #0
 8038bbc:	61bb      	str	r3, [r7, #24]
 8038bbe:	e018      	b.n	8038bf2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8038bc0:	79fb      	ldrb	r3, [r7, #7]
 8038bc2:	031a      	lsls	r2, r3, #12
 8038bc4:	697b      	ldr	r3, [r7, #20]
 8038bc6:	4413      	add	r3, r2
 8038bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038bcc:	461a      	mov	r2, r3
 8038bce:	69fb      	ldr	r3, [r7, #28]
 8038bd0:	681b      	ldr	r3, [r3, #0]
 8038bd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8038bd4:	69fb      	ldr	r3, [r7, #28]
 8038bd6:	3301      	adds	r3, #1
 8038bd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038bda:	69fb      	ldr	r3, [r7, #28]
 8038bdc:	3301      	adds	r3, #1
 8038bde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038be0:	69fb      	ldr	r3, [r7, #28]
 8038be2:	3301      	adds	r3, #1
 8038be4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038be6:	69fb      	ldr	r3, [r7, #28]
 8038be8:	3301      	adds	r3, #1
 8038bea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8038bec:	69bb      	ldr	r3, [r7, #24]
 8038bee:	3301      	adds	r3, #1
 8038bf0:	61bb      	str	r3, [r7, #24]
 8038bf2:	69ba      	ldr	r2, [r7, #24]
 8038bf4:	693b      	ldr	r3, [r7, #16]
 8038bf6:	429a      	cmp	r2, r3
 8038bf8:	d3e2      	bcc.n	8038bc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8038bfa:	2300      	movs	r3, #0
}
 8038bfc:	4618      	mov	r0, r3
 8038bfe:	3724      	adds	r7, #36	; 0x24
 8038c00:	46bd      	mov	sp, r7
 8038c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038c06:	4770      	bx	lr

08038c08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8038c08:	b480      	push	{r7}
 8038c0a:	b08b      	sub	sp, #44	; 0x2c
 8038c0c:	af00      	add	r7, sp, #0
 8038c0e:	60f8      	str	r0, [r7, #12]
 8038c10:	60b9      	str	r1, [r7, #8]
 8038c12:	4613      	mov	r3, r2
 8038c14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038c16:	68fb      	ldr	r3, [r7, #12]
 8038c18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8038c1a:	68bb      	ldr	r3, [r7, #8]
 8038c1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8038c1e:	88fb      	ldrh	r3, [r7, #6]
 8038c20:	089b      	lsrs	r3, r3, #2
 8038c22:	b29b      	uxth	r3, r3
 8038c24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8038c26:	88fb      	ldrh	r3, [r7, #6]
 8038c28:	f003 0303 	and.w	r3, r3, #3
 8038c2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8038c2e:	2300      	movs	r3, #0
 8038c30:	623b      	str	r3, [r7, #32]
 8038c32:	e014      	b.n	8038c5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8038c34:	69bb      	ldr	r3, [r7, #24]
 8038c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038c3a:	681a      	ldr	r2, [r3, #0]
 8038c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038c3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8038c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038c42:	3301      	adds	r3, #1
 8038c44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038c48:	3301      	adds	r3, #1
 8038c4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038c4e:	3301      	adds	r3, #1
 8038c50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038c54:	3301      	adds	r3, #1
 8038c56:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8038c58:	6a3b      	ldr	r3, [r7, #32]
 8038c5a:	3301      	adds	r3, #1
 8038c5c:	623b      	str	r3, [r7, #32]
 8038c5e:	6a3a      	ldr	r2, [r7, #32]
 8038c60:	697b      	ldr	r3, [r7, #20]
 8038c62:	429a      	cmp	r2, r3
 8038c64:	d3e6      	bcc.n	8038c34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8038c66:	8bfb      	ldrh	r3, [r7, #30]
 8038c68:	2b00      	cmp	r3, #0
 8038c6a:	d01e      	beq.n	8038caa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8038c6c:	2300      	movs	r3, #0
 8038c6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8038c70:	69bb      	ldr	r3, [r7, #24]
 8038c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038c76:	461a      	mov	r2, r3
 8038c78:	f107 0310 	add.w	r3, r7, #16
 8038c7c:	6812      	ldr	r2, [r2, #0]
 8038c7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8038c80:	693a      	ldr	r2, [r7, #16]
 8038c82:	6a3b      	ldr	r3, [r7, #32]
 8038c84:	b2db      	uxtb	r3, r3
 8038c86:	00db      	lsls	r3, r3, #3
 8038c88:	fa22 f303 	lsr.w	r3, r2, r3
 8038c8c:	b2da      	uxtb	r2, r3
 8038c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038c90:	701a      	strb	r2, [r3, #0]
      i++;
 8038c92:	6a3b      	ldr	r3, [r7, #32]
 8038c94:	3301      	adds	r3, #1
 8038c96:	623b      	str	r3, [r7, #32]
      pDest++;
 8038c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038c9a:	3301      	adds	r3, #1
 8038c9c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8038c9e:	8bfb      	ldrh	r3, [r7, #30]
 8038ca0:	3b01      	subs	r3, #1
 8038ca2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8038ca4:	8bfb      	ldrh	r3, [r7, #30]
 8038ca6:	2b00      	cmp	r3, #0
 8038ca8:	d1ea      	bne.n	8038c80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8038caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8038cac:	4618      	mov	r0, r3
 8038cae:	372c      	adds	r7, #44	; 0x2c
 8038cb0:	46bd      	mov	sp, r7
 8038cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038cb6:	4770      	bx	lr

08038cb8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038cb8:	b480      	push	{r7}
 8038cba:	b085      	sub	sp, #20
 8038cbc:	af00      	add	r7, sp, #0
 8038cbe:	6078      	str	r0, [r7, #4]
 8038cc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038cc2:	687b      	ldr	r3, [r7, #4]
 8038cc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038cc6:	683b      	ldr	r3, [r7, #0]
 8038cc8:	781b      	ldrb	r3, [r3, #0]
 8038cca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8038ccc:	683b      	ldr	r3, [r7, #0]
 8038cce:	785b      	ldrb	r3, [r3, #1]
 8038cd0:	2b01      	cmp	r3, #1
 8038cd2:	d12c      	bne.n	8038d2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8038cd4:	68bb      	ldr	r3, [r7, #8]
 8038cd6:	015a      	lsls	r2, r3, #5
 8038cd8:	68fb      	ldr	r3, [r7, #12]
 8038cda:	4413      	add	r3, r2
 8038cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038ce0:	681b      	ldr	r3, [r3, #0]
 8038ce2:	2b00      	cmp	r3, #0
 8038ce4:	db12      	blt.n	8038d0c <USB_EPSetStall+0x54>
 8038ce6:	68bb      	ldr	r3, [r7, #8]
 8038ce8:	2b00      	cmp	r3, #0
 8038cea:	d00f      	beq.n	8038d0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8038cec:	68bb      	ldr	r3, [r7, #8]
 8038cee:	015a      	lsls	r2, r3, #5
 8038cf0:	68fb      	ldr	r3, [r7, #12]
 8038cf2:	4413      	add	r3, r2
 8038cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038cf8:	681b      	ldr	r3, [r3, #0]
 8038cfa:	68ba      	ldr	r2, [r7, #8]
 8038cfc:	0151      	lsls	r1, r2, #5
 8038cfe:	68fa      	ldr	r2, [r7, #12]
 8038d00:	440a      	add	r2, r1
 8038d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038d06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8038d0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8038d0c:	68bb      	ldr	r3, [r7, #8]
 8038d0e:	015a      	lsls	r2, r3, #5
 8038d10:	68fb      	ldr	r3, [r7, #12]
 8038d12:	4413      	add	r3, r2
 8038d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038d18:	681b      	ldr	r3, [r3, #0]
 8038d1a:	68ba      	ldr	r2, [r7, #8]
 8038d1c:	0151      	lsls	r1, r2, #5
 8038d1e:	68fa      	ldr	r2, [r7, #12]
 8038d20:	440a      	add	r2, r1
 8038d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8038d2a:	6013      	str	r3, [r2, #0]
 8038d2c:	e02b      	b.n	8038d86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8038d2e:	68bb      	ldr	r3, [r7, #8]
 8038d30:	015a      	lsls	r2, r3, #5
 8038d32:	68fb      	ldr	r3, [r7, #12]
 8038d34:	4413      	add	r3, r2
 8038d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038d3a:	681b      	ldr	r3, [r3, #0]
 8038d3c:	2b00      	cmp	r3, #0
 8038d3e:	db12      	blt.n	8038d66 <USB_EPSetStall+0xae>
 8038d40:	68bb      	ldr	r3, [r7, #8]
 8038d42:	2b00      	cmp	r3, #0
 8038d44:	d00f      	beq.n	8038d66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8038d46:	68bb      	ldr	r3, [r7, #8]
 8038d48:	015a      	lsls	r2, r3, #5
 8038d4a:	68fb      	ldr	r3, [r7, #12]
 8038d4c:	4413      	add	r3, r2
 8038d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038d52:	681b      	ldr	r3, [r3, #0]
 8038d54:	68ba      	ldr	r2, [r7, #8]
 8038d56:	0151      	lsls	r1, r2, #5
 8038d58:	68fa      	ldr	r2, [r7, #12]
 8038d5a:	440a      	add	r2, r1
 8038d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038d60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8038d64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8038d66:	68bb      	ldr	r3, [r7, #8]
 8038d68:	015a      	lsls	r2, r3, #5
 8038d6a:	68fb      	ldr	r3, [r7, #12]
 8038d6c:	4413      	add	r3, r2
 8038d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038d72:	681b      	ldr	r3, [r3, #0]
 8038d74:	68ba      	ldr	r2, [r7, #8]
 8038d76:	0151      	lsls	r1, r2, #5
 8038d78:	68fa      	ldr	r2, [r7, #12]
 8038d7a:	440a      	add	r2, r1
 8038d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8038d84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038d86:	2300      	movs	r3, #0
}
 8038d88:	4618      	mov	r0, r3
 8038d8a:	3714      	adds	r7, #20
 8038d8c:	46bd      	mov	sp, r7
 8038d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038d92:	4770      	bx	lr

08038d94 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038d94:	b480      	push	{r7}
 8038d96:	b085      	sub	sp, #20
 8038d98:	af00      	add	r7, sp, #0
 8038d9a:	6078      	str	r0, [r7, #4]
 8038d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038d9e:	687b      	ldr	r3, [r7, #4]
 8038da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038da2:	683b      	ldr	r3, [r7, #0]
 8038da4:	781b      	ldrb	r3, [r3, #0]
 8038da6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8038da8:	683b      	ldr	r3, [r7, #0]
 8038daa:	785b      	ldrb	r3, [r3, #1]
 8038dac:	2b01      	cmp	r3, #1
 8038dae:	d128      	bne.n	8038e02 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8038db0:	68bb      	ldr	r3, [r7, #8]
 8038db2:	015a      	lsls	r2, r3, #5
 8038db4:	68fb      	ldr	r3, [r7, #12]
 8038db6:	4413      	add	r3, r2
 8038db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038dbc:	681b      	ldr	r3, [r3, #0]
 8038dbe:	68ba      	ldr	r2, [r7, #8]
 8038dc0:	0151      	lsls	r1, r2, #5
 8038dc2:	68fa      	ldr	r2, [r7, #12]
 8038dc4:	440a      	add	r2, r1
 8038dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038dca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8038dce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8038dd0:	683b      	ldr	r3, [r7, #0]
 8038dd2:	791b      	ldrb	r3, [r3, #4]
 8038dd4:	2b03      	cmp	r3, #3
 8038dd6:	d003      	beq.n	8038de0 <USB_EPClearStall+0x4c>
 8038dd8:	683b      	ldr	r3, [r7, #0]
 8038dda:	791b      	ldrb	r3, [r3, #4]
 8038ddc:	2b02      	cmp	r3, #2
 8038dde:	d138      	bne.n	8038e52 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8038de0:	68bb      	ldr	r3, [r7, #8]
 8038de2:	015a      	lsls	r2, r3, #5
 8038de4:	68fb      	ldr	r3, [r7, #12]
 8038de6:	4413      	add	r3, r2
 8038de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038dec:	681b      	ldr	r3, [r3, #0]
 8038dee:	68ba      	ldr	r2, [r7, #8]
 8038df0:	0151      	lsls	r1, r2, #5
 8038df2:	68fa      	ldr	r2, [r7, #12]
 8038df4:	440a      	add	r2, r1
 8038df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8038dfe:	6013      	str	r3, [r2, #0]
 8038e00:	e027      	b.n	8038e52 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8038e02:	68bb      	ldr	r3, [r7, #8]
 8038e04:	015a      	lsls	r2, r3, #5
 8038e06:	68fb      	ldr	r3, [r7, #12]
 8038e08:	4413      	add	r3, r2
 8038e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038e0e:	681b      	ldr	r3, [r3, #0]
 8038e10:	68ba      	ldr	r2, [r7, #8]
 8038e12:	0151      	lsls	r1, r2, #5
 8038e14:	68fa      	ldr	r2, [r7, #12]
 8038e16:	440a      	add	r2, r1
 8038e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038e1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8038e20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8038e22:	683b      	ldr	r3, [r7, #0]
 8038e24:	791b      	ldrb	r3, [r3, #4]
 8038e26:	2b03      	cmp	r3, #3
 8038e28:	d003      	beq.n	8038e32 <USB_EPClearStall+0x9e>
 8038e2a:	683b      	ldr	r3, [r7, #0]
 8038e2c:	791b      	ldrb	r3, [r3, #4]
 8038e2e:	2b02      	cmp	r3, #2
 8038e30:	d10f      	bne.n	8038e52 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8038e32:	68bb      	ldr	r3, [r7, #8]
 8038e34:	015a      	lsls	r2, r3, #5
 8038e36:	68fb      	ldr	r3, [r7, #12]
 8038e38:	4413      	add	r3, r2
 8038e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038e3e:	681b      	ldr	r3, [r3, #0]
 8038e40:	68ba      	ldr	r2, [r7, #8]
 8038e42:	0151      	lsls	r1, r2, #5
 8038e44:	68fa      	ldr	r2, [r7, #12]
 8038e46:	440a      	add	r2, r1
 8038e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8038e50:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8038e52:	2300      	movs	r3, #0
}
 8038e54:	4618      	mov	r0, r3
 8038e56:	3714      	adds	r7, #20
 8038e58:	46bd      	mov	sp, r7
 8038e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038e5e:	4770      	bx	lr

08038e60 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8038e60:	b480      	push	{r7}
 8038e62:	b085      	sub	sp, #20
 8038e64:	af00      	add	r7, sp, #0
 8038e66:	6078      	str	r0, [r7, #4]
 8038e68:	460b      	mov	r3, r1
 8038e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038e6c:	687b      	ldr	r3, [r7, #4]
 8038e6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8038e70:	68fb      	ldr	r3, [r7, #12]
 8038e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038e76:	681b      	ldr	r3, [r3, #0]
 8038e78:	68fa      	ldr	r2, [r7, #12]
 8038e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8038e7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8038e82:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8038e84:	68fb      	ldr	r3, [r7, #12]
 8038e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038e8a:	681a      	ldr	r2, [r3, #0]
 8038e8c:	78fb      	ldrb	r3, [r7, #3]
 8038e8e:	011b      	lsls	r3, r3, #4
 8038e90:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8038e94:	68f9      	ldr	r1, [r7, #12]
 8038e96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038e9a:	4313      	orrs	r3, r2
 8038e9c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8038e9e:	2300      	movs	r3, #0
}
 8038ea0:	4618      	mov	r0, r3
 8038ea2:	3714      	adds	r7, #20
 8038ea4:	46bd      	mov	sp, r7
 8038ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038eaa:	4770      	bx	lr

08038eac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8038eac:	b480      	push	{r7}
 8038eae:	b085      	sub	sp, #20
 8038eb0:	af00      	add	r7, sp, #0
 8038eb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038eb4:	687b      	ldr	r3, [r7, #4]
 8038eb6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8038eb8:	68fb      	ldr	r3, [r7, #12]
 8038eba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8038ebe:	681b      	ldr	r3, [r3, #0]
 8038ec0:	68fa      	ldr	r2, [r7, #12]
 8038ec2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8038ec6:	f023 0303 	bic.w	r3, r3, #3
 8038eca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8038ecc:	68fb      	ldr	r3, [r7, #12]
 8038ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038ed2:	685b      	ldr	r3, [r3, #4]
 8038ed4:	68fa      	ldr	r2, [r7, #12]
 8038ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8038eda:	f023 0302 	bic.w	r3, r3, #2
 8038ede:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8038ee0:	2300      	movs	r3, #0
}
 8038ee2:	4618      	mov	r0, r3
 8038ee4:	3714      	adds	r7, #20
 8038ee6:	46bd      	mov	sp, r7
 8038ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038eec:	4770      	bx	lr

08038eee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8038eee:	b480      	push	{r7}
 8038ef0:	b085      	sub	sp, #20
 8038ef2:	af00      	add	r7, sp, #0
 8038ef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038ef6:	687b      	ldr	r3, [r7, #4]
 8038ef8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8038efa:	68fb      	ldr	r3, [r7, #12]
 8038efc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8038f00:	681b      	ldr	r3, [r3, #0]
 8038f02:	68fa      	ldr	r2, [r7, #12]
 8038f04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8038f08:	f023 0303 	bic.w	r3, r3, #3
 8038f0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8038f0e:	68fb      	ldr	r3, [r7, #12]
 8038f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038f14:	685b      	ldr	r3, [r3, #4]
 8038f16:	68fa      	ldr	r2, [r7, #12]
 8038f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8038f1c:	f043 0302 	orr.w	r3, r3, #2
 8038f20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8038f22:	2300      	movs	r3, #0
}
 8038f24:	4618      	mov	r0, r3
 8038f26:	3714      	adds	r7, #20
 8038f28:	46bd      	mov	sp, r7
 8038f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f2e:	4770      	bx	lr

08038f30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8038f30:	b480      	push	{r7}
 8038f32:	b085      	sub	sp, #20
 8038f34:	af00      	add	r7, sp, #0
 8038f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8038f38:	687b      	ldr	r3, [r7, #4]
 8038f3a:	695b      	ldr	r3, [r3, #20]
 8038f3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8038f3e:	687b      	ldr	r3, [r7, #4]
 8038f40:	699b      	ldr	r3, [r3, #24]
 8038f42:	68fa      	ldr	r2, [r7, #12]
 8038f44:	4013      	ands	r3, r2
 8038f46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8038f48:	68fb      	ldr	r3, [r7, #12]
}
 8038f4a:	4618      	mov	r0, r3
 8038f4c:	3714      	adds	r7, #20
 8038f4e:	46bd      	mov	sp, r7
 8038f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f54:	4770      	bx	lr

08038f56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8038f56:	b480      	push	{r7}
 8038f58:	b085      	sub	sp, #20
 8038f5a:	af00      	add	r7, sp, #0
 8038f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038f5e:	687b      	ldr	r3, [r7, #4]
 8038f60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8038f62:	68fb      	ldr	r3, [r7, #12]
 8038f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038f68:	699b      	ldr	r3, [r3, #24]
 8038f6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8038f6c:	68fb      	ldr	r3, [r7, #12]
 8038f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038f72:	69db      	ldr	r3, [r3, #28]
 8038f74:	68ba      	ldr	r2, [r7, #8]
 8038f76:	4013      	ands	r3, r2
 8038f78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8038f7a:	68bb      	ldr	r3, [r7, #8]
 8038f7c:	0c1b      	lsrs	r3, r3, #16
}
 8038f7e:	4618      	mov	r0, r3
 8038f80:	3714      	adds	r7, #20
 8038f82:	46bd      	mov	sp, r7
 8038f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f88:	4770      	bx	lr

08038f8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8038f8a:	b480      	push	{r7}
 8038f8c:	b085      	sub	sp, #20
 8038f8e:	af00      	add	r7, sp, #0
 8038f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038f92:	687b      	ldr	r3, [r7, #4]
 8038f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8038f96:	68fb      	ldr	r3, [r7, #12]
 8038f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038f9c:	699b      	ldr	r3, [r3, #24]
 8038f9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8038fa0:	68fb      	ldr	r3, [r7, #12]
 8038fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038fa6:	69db      	ldr	r3, [r3, #28]
 8038fa8:	68ba      	ldr	r2, [r7, #8]
 8038faa:	4013      	ands	r3, r2
 8038fac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8038fae:	68bb      	ldr	r3, [r7, #8]
 8038fb0:	b29b      	uxth	r3, r3
}
 8038fb2:	4618      	mov	r0, r3
 8038fb4:	3714      	adds	r7, #20
 8038fb6:	46bd      	mov	sp, r7
 8038fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038fbc:	4770      	bx	lr

08038fbe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8038fbe:	b480      	push	{r7}
 8038fc0:	b085      	sub	sp, #20
 8038fc2:	af00      	add	r7, sp, #0
 8038fc4:	6078      	str	r0, [r7, #4]
 8038fc6:	460b      	mov	r3, r1
 8038fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038fca:	687b      	ldr	r3, [r7, #4]
 8038fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8038fce:	78fb      	ldrb	r3, [r7, #3]
 8038fd0:	015a      	lsls	r2, r3, #5
 8038fd2:	68fb      	ldr	r3, [r7, #12]
 8038fd4:	4413      	add	r3, r2
 8038fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038fda:	689b      	ldr	r3, [r3, #8]
 8038fdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8038fde:	68fb      	ldr	r3, [r7, #12]
 8038fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038fe4:	695b      	ldr	r3, [r3, #20]
 8038fe6:	68ba      	ldr	r2, [r7, #8]
 8038fe8:	4013      	ands	r3, r2
 8038fea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8038fec:	68bb      	ldr	r3, [r7, #8]
}
 8038fee:	4618      	mov	r0, r3
 8038ff0:	3714      	adds	r7, #20
 8038ff2:	46bd      	mov	sp, r7
 8038ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038ff8:	4770      	bx	lr

08038ffa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8038ffa:	b480      	push	{r7}
 8038ffc:	b087      	sub	sp, #28
 8038ffe:	af00      	add	r7, sp, #0
 8039000:	6078      	str	r0, [r7, #4]
 8039002:	460b      	mov	r3, r1
 8039004:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039006:	687b      	ldr	r3, [r7, #4]
 8039008:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 803900a:	697b      	ldr	r3, [r7, #20]
 803900c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039010:	691b      	ldr	r3, [r3, #16]
 8039012:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8039014:	697b      	ldr	r3, [r7, #20]
 8039016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803901a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803901c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 803901e:	78fb      	ldrb	r3, [r7, #3]
 8039020:	f003 030f 	and.w	r3, r3, #15
 8039024:	68fa      	ldr	r2, [r7, #12]
 8039026:	fa22 f303 	lsr.w	r3, r2, r3
 803902a:	01db      	lsls	r3, r3, #7
 803902c:	b2db      	uxtb	r3, r3
 803902e:	693a      	ldr	r2, [r7, #16]
 8039030:	4313      	orrs	r3, r2
 8039032:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8039034:	78fb      	ldrb	r3, [r7, #3]
 8039036:	015a      	lsls	r2, r3, #5
 8039038:	697b      	ldr	r3, [r7, #20]
 803903a:	4413      	add	r3, r2
 803903c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039040:	689b      	ldr	r3, [r3, #8]
 8039042:	693a      	ldr	r2, [r7, #16]
 8039044:	4013      	ands	r3, r2
 8039046:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8039048:	68bb      	ldr	r3, [r7, #8]
}
 803904a:	4618      	mov	r0, r3
 803904c:	371c      	adds	r7, #28
 803904e:	46bd      	mov	sp, r7
 8039050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039054:	4770      	bx	lr

08039056 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8039056:	b480      	push	{r7}
 8039058:	b083      	sub	sp, #12
 803905a:	af00      	add	r7, sp, #0
 803905c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 803905e:	687b      	ldr	r3, [r7, #4]
 8039060:	695b      	ldr	r3, [r3, #20]
 8039062:	f003 0301 	and.w	r3, r3, #1
}
 8039066:	4618      	mov	r0, r3
 8039068:	370c      	adds	r7, #12
 803906a:	46bd      	mov	sp, r7
 803906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039070:	4770      	bx	lr
	...

08039074 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8039074:	b480      	push	{r7}
 8039076:	b085      	sub	sp, #20
 8039078:	af00      	add	r7, sp, #0
 803907a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803907c:	687b      	ldr	r3, [r7, #4]
 803907e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8039080:	68fb      	ldr	r3, [r7, #12]
 8039082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039086:	681a      	ldr	r2, [r3, #0]
 8039088:	68fb      	ldr	r3, [r7, #12]
 803908a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803908e:	4619      	mov	r1, r3
 8039090:	4b09      	ldr	r3, [pc, #36]	; (80390b8 <USB_ActivateSetup+0x44>)
 8039092:	4013      	ands	r3, r2
 8039094:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8039096:	68fb      	ldr	r3, [r7, #12]
 8039098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803909c:	685b      	ldr	r3, [r3, #4]
 803909e:	68fa      	ldr	r2, [r7, #12]
 80390a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80390a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80390a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80390aa:	2300      	movs	r3, #0
}
 80390ac:	4618      	mov	r0, r3
 80390ae:	3714      	adds	r7, #20
 80390b0:	46bd      	mov	sp, r7
 80390b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80390b6:	4770      	bx	lr
 80390b8:	fffff800 	.word	0xfffff800

080390bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80390bc:	b480      	push	{r7}
 80390be:	b087      	sub	sp, #28
 80390c0:	af00      	add	r7, sp, #0
 80390c2:	60f8      	str	r0, [r7, #12]
 80390c4:	460b      	mov	r3, r1
 80390c6:	607a      	str	r2, [r7, #4]
 80390c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80390ca:	68fb      	ldr	r3, [r7, #12]
 80390cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80390ce:	68fb      	ldr	r3, [r7, #12]
 80390d0:	333c      	adds	r3, #60	; 0x3c
 80390d2:	3304      	adds	r3, #4
 80390d4:	681b      	ldr	r3, [r3, #0]
 80390d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80390d8:	693b      	ldr	r3, [r7, #16]
 80390da:	4a26      	ldr	r2, [pc, #152]	; (8039174 <USB_EP0_OutStart+0xb8>)
 80390dc:	4293      	cmp	r3, r2
 80390de:	d90a      	bls.n	80390f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80390e0:	697b      	ldr	r3, [r7, #20]
 80390e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80390e6:	681b      	ldr	r3, [r3, #0]
 80390e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80390ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80390f0:	d101      	bne.n	80390f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80390f2:	2300      	movs	r3, #0
 80390f4:	e037      	b.n	8039166 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80390f6:	697b      	ldr	r3, [r7, #20]
 80390f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80390fc:	461a      	mov	r2, r3
 80390fe:	2300      	movs	r3, #0
 8039100:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8039102:	697b      	ldr	r3, [r7, #20]
 8039104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039108:	691b      	ldr	r3, [r3, #16]
 803910a:	697a      	ldr	r2, [r7, #20]
 803910c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8039114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8039116:	697b      	ldr	r3, [r7, #20]
 8039118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803911c:	691b      	ldr	r3, [r3, #16]
 803911e:	697a      	ldr	r2, [r7, #20]
 8039120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039124:	f043 0318 	orr.w	r3, r3, #24
 8039128:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 803912a:	697b      	ldr	r3, [r7, #20]
 803912c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039130:	691b      	ldr	r3, [r3, #16]
 8039132:	697a      	ldr	r2, [r7, #20]
 8039134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039138:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 803913c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 803913e:	7afb      	ldrb	r3, [r7, #11]
 8039140:	2b01      	cmp	r3, #1
 8039142:	d10f      	bne.n	8039164 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8039144:	697b      	ldr	r3, [r7, #20]
 8039146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803914a:	461a      	mov	r2, r3
 803914c:	687b      	ldr	r3, [r7, #4]
 803914e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8039150:	697b      	ldr	r3, [r7, #20]
 8039152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039156:	681b      	ldr	r3, [r3, #0]
 8039158:	697a      	ldr	r2, [r7, #20]
 803915a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803915e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8039162:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8039164:	2300      	movs	r3, #0
}
 8039166:	4618      	mov	r0, r3
 8039168:	371c      	adds	r7, #28
 803916a:	46bd      	mov	sp, r7
 803916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039170:	4770      	bx	lr
 8039172:	bf00      	nop
 8039174:	4f54300a 	.word	0x4f54300a

08039178 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8039178:	b480      	push	{r7}
 803917a:	b085      	sub	sp, #20
 803917c:	af00      	add	r7, sp, #0
 803917e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8039180:	2300      	movs	r3, #0
 8039182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8039184:	68fb      	ldr	r3, [r7, #12]
 8039186:	3301      	adds	r3, #1
 8039188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803918a:	68fb      	ldr	r3, [r7, #12]
 803918c:	4a13      	ldr	r2, [pc, #76]	; (80391dc <USB_CoreReset+0x64>)
 803918e:	4293      	cmp	r3, r2
 8039190:	d901      	bls.n	8039196 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8039192:	2303      	movs	r3, #3
 8039194:	e01b      	b.n	80391ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8039196:	687b      	ldr	r3, [r7, #4]
 8039198:	691b      	ldr	r3, [r3, #16]
 803919a:	2b00      	cmp	r3, #0
 803919c:	daf2      	bge.n	8039184 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 803919e:	2300      	movs	r3, #0
 80391a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80391a2:	687b      	ldr	r3, [r7, #4]
 80391a4:	691b      	ldr	r3, [r3, #16]
 80391a6:	f043 0201 	orr.w	r2, r3, #1
 80391aa:	687b      	ldr	r3, [r7, #4]
 80391ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80391ae:	68fb      	ldr	r3, [r7, #12]
 80391b0:	3301      	adds	r3, #1
 80391b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80391b4:	68fb      	ldr	r3, [r7, #12]
 80391b6:	4a09      	ldr	r2, [pc, #36]	; (80391dc <USB_CoreReset+0x64>)
 80391b8:	4293      	cmp	r3, r2
 80391ba:	d901      	bls.n	80391c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80391bc:	2303      	movs	r3, #3
 80391be:	e006      	b.n	80391ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80391c0:	687b      	ldr	r3, [r7, #4]
 80391c2:	691b      	ldr	r3, [r3, #16]
 80391c4:	f003 0301 	and.w	r3, r3, #1
 80391c8:	2b01      	cmp	r3, #1
 80391ca:	d0f0      	beq.n	80391ae <USB_CoreReset+0x36>

  return HAL_OK;
 80391cc:	2300      	movs	r3, #0
}
 80391ce:	4618      	mov	r0, r3
 80391d0:	3714      	adds	r7, #20
 80391d2:	46bd      	mov	sp, r7
 80391d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80391d8:	4770      	bx	lr
 80391da:	bf00      	nop
 80391dc:	00030d40 	.word	0x00030d40

080391e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80391e0:	b580      	push	{r7, lr}
 80391e2:	b084      	sub	sp, #16
 80391e4:	af00      	add	r7, sp, #0
 80391e6:	6078      	str	r0, [r7, #4]
 80391e8:	460b      	mov	r3, r1
 80391ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80391ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80391f0:	f002 fc54 	bl	803ba9c <USBD_static_malloc>
 80391f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80391f6:	68fb      	ldr	r3, [r7, #12]
 80391f8:	2b00      	cmp	r3, #0
 80391fa:	d109      	bne.n	8039210 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80391fc:	687b      	ldr	r3, [r7, #4]
 80391fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039202:	687b      	ldr	r3, [r7, #4]
 8039204:	32b0      	adds	r2, #176	; 0xb0
 8039206:	2100      	movs	r1, #0
 8039208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 803920c:	2302      	movs	r3, #2
 803920e:	e0d4      	b.n	80393ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8039210:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8039214:	2100      	movs	r1, #0
 8039216:	68f8      	ldr	r0, [r7, #12]
 8039218:	f002 fd42 	bl	803bca0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 803921c:	687b      	ldr	r3, [r7, #4]
 803921e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039222:	687b      	ldr	r3, [r7, #4]
 8039224:	32b0      	adds	r2, #176	; 0xb0
 8039226:	68f9      	ldr	r1, [r7, #12]
 8039228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 803922c:	687b      	ldr	r3, [r7, #4]
 803922e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039232:	687b      	ldr	r3, [r7, #4]
 8039234:	32b0      	adds	r2, #176	; 0xb0
 8039236:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 803923a:	687b      	ldr	r3, [r7, #4]
 803923c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8039240:	687b      	ldr	r3, [r7, #4]
 8039242:	7c1b      	ldrb	r3, [r3, #16]
 8039244:	2b00      	cmp	r3, #0
 8039246:	d138      	bne.n	80392ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8039248:	4b5e      	ldr	r3, [pc, #376]	; (80393c4 <USBD_CDC_Init+0x1e4>)
 803924a:	7819      	ldrb	r1, [r3, #0]
 803924c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8039250:	2202      	movs	r2, #2
 8039252:	6878      	ldr	r0, [r7, #4]
 8039254:	f002 faff 	bl	803b856 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8039258:	4b5a      	ldr	r3, [pc, #360]	; (80393c4 <USBD_CDC_Init+0x1e4>)
 803925a:	781b      	ldrb	r3, [r3, #0]
 803925c:	f003 020f 	and.w	r2, r3, #15
 8039260:	6879      	ldr	r1, [r7, #4]
 8039262:	4613      	mov	r3, r2
 8039264:	009b      	lsls	r3, r3, #2
 8039266:	4413      	add	r3, r2
 8039268:	009b      	lsls	r3, r3, #2
 803926a:	440b      	add	r3, r1
 803926c:	3324      	adds	r3, #36	; 0x24
 803926e:	2201      	movs	r2, #1
 8039270:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8039272:	4b55      	ldr	r3, [pc, #340]	; (80393c8 <USBD_CDC_Init+0x1e8>)
 8039274:	7819      	ldrb	r1, [r3, #0]
 8039276:	f44f 7300 	mov.w	r3, #512	; 0x200
 803927a:	2202      	movs	r2, #2
 803927c:	6878      	ldr	r0, [r7, #4]
 803927e:	f002 faea 	bl	803b856 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8039282:	4b51      	ldr	r3, [pc, #324]	; (80393c8 <USBD_CDC_Init+0x1e8>)
 8039284:	781b      	ldrb	r3, [r3, #0]
 8039286:	f003 020f 	and.w	r2, r3, #15
 803928a:	6879      	ldr	r1, [r7, #4]
 803928c:	4613      	mov	r3, r2
 803928e:	009b      	lsls	r3, r3, #2
 8039290:	4413      	add	r3, r2
 8039292:	009b      	lsls	r3, r3, #2
 8039294:	440b      	add	r3, r1
 8039296:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803929a:	2201      	movs	r2, #1
 803929c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 803929e:	4b4b      	ldr	r3, [pc, #300]	; (80393cc <USBD_CDC_Init+0x1ec>)
 80392a0:	781b      	ldrb	r3, [r3, #0]
 80392a2:	f003 020f 	and.w	r2, r3, #15
 80392a6:	6879      	ldr	r1, [r7, #4]
 80392a8:	4613      	mov	r3, r2
 80392aa:	009b      	lsls	r3, r3, #2
 80392ac:	4413      	add	r3, r2
 80392ae:	009b      	lsls	r3, r3, #2
 80392b0:	440b      	add	r3, r1
 80392b2:	3326      	adds	r3, #38	; 0x26
 80392b4:	2210      	movs	r2, #16
 80392b6:	801a      	strh	r2, [r3, #0]
 80392b8:	e035      	b.n	8039326 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80392ba:	4b42      	ldr	r3, [pc, #264]	; (80393c4 <USBD_CDC_Init+0x1e4>)
 80392bc:	7819      	ldrb	r1, [r3, #0]
 80392be:	2340      	movs	r3, #64	; 0x40
 80392c0:	2202      	movs	r2, #2
 80392c2:	6878      	ldr	r0, [r7, #4]
 80392c4:	f002 fac7 	bl	803b856 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80392c8:	4b3e      	ldr	r3, [pc, #248]	; (80393c4 <USBD_CDC_Init+0x1e4>)
 80392ca:	781b      	ldrb	r3, [r3, #0]
 80392cc:	f003 020f 	and.w	r2, r3, #15
 80392d0:	6879      	ldr	r1, [r7, #4]
 80392d2:	4613      	mov	r3, r2
 80392d4:	009b      	lsls	r3, r3, #2
 80392d6:	4413      	add	r3, r2
 80392d8:	009b      	lsls	r3, r3, #2
 80392da:	440b      	add	r3, r1
 80392dc:	3324      	adds	r3, #36	; 0x24
 80392de:	2201      	movs	r2, #1
 80392e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80392e2:	4b39      	ldr	r3, [pc, #228]	; (80393c8 <USBD_CDC_Init+0x1e8>)
 80392e4:	7819      	ldrb	r1, [r3, #0]
 80392e6:	2340      	movs	r3, #64	; 0x40
 80392e8:	2202      	movs	r2, #2
 80392ea:	6878      	ldr	r0, [r7, #4]
 80392ec:	f002 fab3 	bl	803b856 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80392f0:	4b35      	ldr	r3, [pc, #212]	; (80393c8 <USBD_CDC_Init+0x1e8>)
 80392f2:	781b      	ldrb	r3, [r3, #0]
 80392f4:	f003 020f 	and.w	r2, r3, #15
 80392f8:	6879      	ldr	r1, [r7, #4]
 80392fa:	4613      	mov	r3, r2
 80392fc:	009b      	lsls	r3, r3, #2
 80392fe:	4413      	add	r3, r2
 8039300:	009b      	lsls	r3, r3, #2
 8039302:	440b      	add	r3, r1
 8039304:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8039308:	2201      	movs	r2, #1
 803930a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 803930c:	4b2f      	ldr	r3, [pc, #188]	; (80393cc <USBD_CDC_Init+0x1ec>)
 803930e:	781b      	ldrb	r3, [r3, #0]
 8039310:	f003 020f 	and.w	r2, r3, #15
 8039314:	6879      	ldr	r1, [r7, #4]
 8039316:	4613      	mov	r3, r2
 8039318:	009b      	lsls	r3, r3, #2
 803931a:	4413      	add	r3, r2
 803931c:	009b      	lsls	r3, r3, #2
 803931e:	440b      	add	r3, r1
 8039320:	3326      	adds	r3, #38	; 0x26
 8039322:	2210      	movs	r2, #16
 8039324:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8039326:	4b29      	ldr	r3, [pc, #164]	; (80393cc <USBD_CDC_Init+0x1ec>)
 8039328:	7819      	ldrb	r1, [r3, #0]
 803932a:	2308      	movs	r3, #8
 803932c:	2203      	movs	r2, #3
 803932e:	6878      	ldr	r0, [r7, #4]
 8039330:	f002 fa91 	bl	803b856 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8039334:	4b25      	ldr	r3, [pc, #148]	; (80393cc <USBD_CDC_Init+0x1ec>)
 8039336:	781b      	ldrb	r3, [r3, #0]
 8039338:	f003 020f 	and.w	r2, r3, #15
 803933c:	6879      	ldr	r1, [r7, #4]
 803933e:	4613      	mov	r3, r2
 8039340:	009b      	lsls	r3, r3, #2
 8039342:	4413      	add	r3, r2
 8039344:	009b      	lsls	r3, r3, #2
 8039346:	440b      	add	r3, r1
 8039348:	3324      	adds	r3, #36	; 0x24
 803934a:	2201      	movs	r2, #1
 803934c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 803934e:	68fb      	ldr	r3, [r7, #12]
 8039350:	2200      	movs	r2, #0
 8039352:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8039356:	687b      	ldr	r3, [r7, #4]
 8039358:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803935c:	687a      	ldr	r2, [r7, #4]
 803935e:	33b0      	adds	r3, #176	; 0xb0
 8039360:	009b      	lsls	r3, r3, #2
 8039362:	4413      	add	r3, r2
 8039364:	685b      	ldr	r3, [r3, #4]
 8039366:	681b      	ldr	r3, [r3, #0]
 8039368:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 803936a:	68fb      	ldr	r3, [r7, #12]
 803936c:	2200      	movs	r2, #0
 803936e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8039372:	68fb      	ldr	r3, [r7, #12]
 8039374:	2200      	movs	r2, #0
 8039376:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 803937a:	68fb      	ldr	r3, [r7, #12]
 803937c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8039380:	2b00      	cmp	r3, #0
 8039382:	d101      	bne.n	8039388 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8039384:	2302      	movs	r3, #2
 8039386:	e018      	b.n	80393ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8039388:	687b      	ldr	r3, [r7, #4]
 803938a:	7c1b      	ldrb	r3, [r3, #16]
 803938c:	2b00      	cmp	r3, #0
 803938e:	d10a      	bne.n	80393a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039390:	4b0d      	ldr	r3, [pc, #52]	; (80393c8 <USBD_CDC_Init+0x1e8>)
 8039392:	7819      	ldrb	r1, [r3, #0]
 8039394:	68fb      	ldr	r3, [r7, #12]
 8039396:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803939a:	f44f 7300 	mov.w	r3, #512	; 0x200
 803939e:	6878      	ldr	r0, [r7, #4]
 80393a0:	f002 fb48 	bl	803ba34 <USBD_LL_PrepareReceive>
 80393a4:	e008      	b.n	80393b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80393a6:	4b08      	ldr	r3, [pc, #32]	; (80393c8 <USBD_CDC_Init+0x1e8>)
 80393a8:	7819      	ldrb	r1, [r3, #0]
 80393aa:	68fb      	ldr	r3, [r7, #12]
 80393ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80393b0:	2340      	movs	r3, #64	; 0x40
 80393b2:	6878      	ldr	r0, [r7, #4]
 80393b4:	f002 fb3e 	bl	803ba34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80393b8:	2300      	movs	r3, #0
}
 80393ba:	4618      	mov	r0, r3
 80393bc:	3710      	adds	r7, #16
 80393be:	46bd      	mov	sp, r7
 80393c0:	bd80      	pop	{r7, pc}
 80393c2:	bf00      	nop
 80393c4:	2400009b 	.word	0x2400009b
 80393c8:	2400009c 	.word	0x2400009c
 80393cc:	2400009d 	.word	0x2400009d

080393d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80393d0:	b580      	push	{r7, lr}
 80393d2:	b082      	sub	sp, #8
 80393d4:	af00      	add	r7, sp, #0
 80393d6:	6078      	str	r0, [r7, #4]
 80393d8:	460b      	mov	r3, r1
 80393da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80393dc:	4b3a      	ldr	r3, [pc, #232]	; (80394c8 <USBD_CDC_DeInit+0xf8>)
 80393de:	781b      	ldrb	r3, [r3, #0]
 80393e0:	4619      	mov	r1, r3
 80393e2:	6878      	ldr	r0, [r7, #4]
 80393e4:	f002 fa5d 	bl	803b8a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80393e8:	4b37      	ldr	r3, [pc, #220]	; (80394c8 <USBD_CDC_DeInit+0xf8>)
 80393ea:	781b      	ldrb	r3, [r3, #0]
 80393ec:	f003 020f 	and.w	r2, r3, #15
 80393f0:	6879      	ldr	r1, [r7, #4]
 80393f2:	4613      	mov	r3, r2
 80393f4:	009b      	lsls	r3, r3, #2
 80393f6:	4413      	add	r3, r2
 80393f8:	009b      	lsls	r3, r3, #2
 80393fa:	440b      	add	r3, r1
 80393fc:	3324      	adds	r3, #36	; 0x24
 80393fe:	2200      	movs	r2, #0
 8039400:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8039402:	4b32      	ldr	r3, [pc, #200]	; (80394cc <USBD_CDC_DeInit+0xfc>)
 8039404:	781b      	ldrb	r3, [r3, #0]
 8039406:	4619      	mov	r1, r3
 8039408:	6878      	ldr	r0, [r7, #4]
 803940a:	f002 fa4a 	bl	803b8a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 803940e:	4b2f      	ldr	r3, [pc, #188]	; (80394cc <USBD_CDC_DeInit+0xfc>)
 8039410:	781b      	ldrb	r3, [r3, #0]
 8039412:	f003 020f 	and.w	r2, r3, #15
 8039416:	6879      	ldr	r1, [r7, #4]
 8039418:	4613      	mov	r3, r2
 803941a:	009b      	lsls	r3, r3, #2
 803941c:	4413      	add	r3, r2
 803941e:	009b      	lsls	r3, r3, #2
 8039420:	440b      	add	r3, r1
 8039422:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8039426:	2200      	movs	r2, #0
 8039428:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 803942a:	4b29      	ldr	r3, [pc, #164]	; (80394d0 <USBD_CDC_DeInit+0x100>)
 803942c:	781b      	ldrb	r3, [r3, #0]
 803942e:	4619      	mov	r1, r3
 8039430:	6878      	ldr	r0, [r7, #4]
 8039432:	f002 fa36 	bl	803b8a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8039436:	4b26      	ldr	r3, [pc, #152]	; (80394d0 <USBD_CDC_DeInit+0x100>)
 8039438:	781b      	ldrb	r3, [r3, #0]
 803943a:	f003 020f 	and.w	r2, r3, #15
 803943e:	6879      	ldr	r1, [r7, #4]
 8039440:	4613      	mov	r3, r2
 8039442:	009b      	lsls	r3, r3, #2
 8039444:	4413      	add	r3, r2
 8039446:	009b      	lsls	r3, r3, #2
 8039448:	440b      	add	r3, r1
 803944a:	3324      	adds	r3, #36	; 0x24
 803944c:	2200      	movs	r2, #0
 803944e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8039450:	4b1f      	ldr	r3, [pc, #124]	; (80394d0 <USBD_CDC_DeInit+0x100>)
 8039452:	781b      	ldrb	r3, [r3, #0]
 8039454:	f003 020f 	and.w	r2, r3, #15
 8039458:	6879      	ldr	r1, [r7, #4]
 803945a:	4613      	mov	r3, r2
 803945c:	009b      	lsls	r3, r3, #2
 803945e:	4413      	add	r3, r2
 8039460:	009b      	lsls	r3, r3, #2
 8039462:	440b      	add	r3, r1
 8039464:	3326      	adds	r3, #38	; 0x26
 8039466:	2200      	movs	r2, #0
 8039468:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 803946a:	687b      	ldr	r3, [r7, #4]
 803946c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039470:	687b      	ldr	r3, [r7, #4]
 8039472:	32b0      	adds	r2, #176	; 0xb0
 8039474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039478:	2b00      	cmp	r3, #0
 803947a:	d01f      	beq.n	80394bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 803947c:	687b      	ldr	r3, [r7, #4]
 803947e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039482:	687a      	ldr	r2, [r7, #4]
 8039484:	33b0      	adds	r3, #176	; 0xb0
 8039486:	009b      	lsls	r3, r3, #2
 8039488:	4413      	add	r3, r2
 803948a:	685b      	ldr	r3, [r3, #4]
 803948c:	685b      	ldr	r3, [r3, #4]
 803948e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8039490:	687b      	ldr	r3, [r7, #4]
 8039492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039496:	687b      	ldr	r3, [r7, #4]
 8039498:	32b0      	adds	r2, #176	; 0xb0
 803949a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803949e:	4618      	mov	r0, r3
 80394a0:	f002 fb0a 	bl	803bab8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80394a4:	687b      	ldr	r3, [r7, #4]
 80394a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80394aa:	687b      	ldr	r3, [r7, #4]
 80394ac:	32b0      	adds	r2, #176	; 0xb0
 80394ae:	2100      	movs	r1, #0
 80394b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80394b4:	687b      	ldr	r3, [r7, #4]
 80394b6:	2200      	movs	r2, #0
 80394b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80394bc:	2300      	movs	r3, #0
}
 80394be:	4618      	mov	r0, r3
 80394c0:	3708      	adds	r7, #8
 80394c2:	46bd      	mov	sp, r7
 80394c4:	bd80      	pop	{r7, pc}
 80394c6:	bf00      	nop
 80394c8:	2400009b 	.word	0x2400009b
 80394cc:	2400009c 	.word	0x2400009c
 80394d0:	2400009d 	.word	0x2400009d

080394d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80394d4:	b580      	push	{r7, lr}
 80394d6:	b086      	sub	sp, #24
 80394d8:	af00      	add	r7, sp, #0
 80394da:	6078      	str	r0, [r7, #4]
 80394dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80394de:	687b      	ldr	r3, [r7, #4]
 80394e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80394e4:	687b      	ldr	r3, [r7, #4]
 80394e6:	32b0      	adds	r2, #176	; 0xb0
 80394e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80394ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80394ee:	2300      	movs	r3, #0
 80394f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80394f2:	2300      	movs	r3, #0
 80394f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80394f6:	2300      	movs	r3, #0
 80394f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80394fa:	693b      	ldr	r3, [r7, #16]
 80394fc:	2b00      	cmp	r3, #0
 80394fe:	d101      	bne.n	8039504 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8039500:	2303      	movs	r3, #3
 8039502:	e0bf      	b.n	8039684 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8039504:	683b      	ldr	r3, [r7, #0]
 8039506:	781b      	ldrb	r3, [r3, #0]
 8039508:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803950c:	2b00      	cmp	r3, #0
 803950e:	d050      	beq.n	80395b2 <USBD_CDC_Setup+0xde>
 8039510:	2b20      	cmp	r3, #32
 8039512:	f040 80af 	bne.w	8039674 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8039516:	683b      	ldr	r3, [r7, #0]
 8039518:	88db      	ldrh	r3, [r3, #6]
 803951a:	2b00      	cmp	r3, #0
 803951c:	d03a      	beq.n	8039594 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 803951e:	683b      	ldr	r3, [r7, #0]
 8039520:	781b      	ldrb	r3, [r3, #0]
 8039522:	b25b      	sxtb	r3, r3
 8039524:	2b00      	cmp	r3, #0
 8039526:	da1b      	bge.n	8039560 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8039528:	687b      	ldr	r3, [r7, #4]
 803952a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803952e:	687a      	ldr	r2, [r7, #4]
 8039530:	33b0      	adds	r3, #176	; 0xb0
 8039532:	009b      	lsls	r3, r3, #2
 8039534:	4413      	add	r3, r2
 8039536:	685b      	ldr	r3, [r3, #4]
 8039538:	689b      	ldr	r3, [r3, #8]
 803953a:	683a      	ldr	r2, [r7, #0]
 803953c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 803953e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8039540:	683a      	ldr	r2, [r7, #0]
 8039542:	88d2      	ldrh	r2, [r2, #6]
 8039544:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8039546:	683b      	ldr	r3, [r7, #0]
 8039548:	88db      	ldrh	r3, [r3, #6]
 803954a:	2b07      	cmp	r3, #7
 803954c:	bf28      	it	cs
 803954e:	2307      	movcs	r3, #7
 8039550:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8039552:	693b      	ldr	r3, [r7, #16]
 8039554:	89fa      	ldrh	r2, [r7, #14]
 8039556:	4619      	mov	r1, r3
 8039558:	6878      	ldr	r0, [r7, #4]
 803955a:	f001 fd43 	bl	803afe4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 803955e:	e090      	b.n	8039682 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8039560:	683b      	ldr	r3, [r7, #0]
 8039562:	785a      	ldrb	r2, [r3, #1]
 8039564:	693b      	ldr	r3, [r7, #16]
 8039566:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 803956a:	683b      	ldr	r3, [r7, #0]
 803956c:	88db      	ldrh	r3, [r3, #6]
 803956e:	2b3f      	cmp	r3, #63	; 0x3f
 8039570:	d803      	bhi.n	803957a <USBD_CDC_Setup+0xa6>
 8039572:	683b      	ldr	r3, [r7, #0]
 8039574:	88db      	ldrh	r3, [r3, #6]
 8039576:	b2da      	uxtb	r2, r3
 8039578:	e000      	b.n	803957c <USBD_CDC_Setup+0xa8>
 803957a:	2240      	movs	r2, #64	; 0x40
 803957c:	693b      	ldr	r3, [r7, #16]
 803957e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8039582:	6939      	ldr	r1, [r7, #16]
 8039584:	693b      	ldr	r3, [r7, #16]
 8039586:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 803958a:	461a      	mov	r2, r3
 803958c:	6878      	ldr	r0, [r7, #4]
 803958e:	f001 fd55 	bl	803b03c <USBD_CtlPrepareRx>
      break;
 8039592:	e076      	b.n	8039682 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8039594:	687b      	ldr	r3, [r7, #4]
 8039596:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803959a:	687a      	ldr	r2, [r7, #4]
 803959c:	33b0      	adds	r3, #176	; 0xb0
 803959e:	009b      	lsls	r3, r3, #2
 80395a0:	4413      	add	r3, r2
 80395a2:	685b      	ldr	r3, [r3, #4]
 80395a4:	689b      	ldr	r3, [r3, #8]
 80395a6:	683a      	ldr	r2, [r7, #0]
 80395a8:	7850      	ldrb	r0, [r2, #1]
 80395aa:	2200      	movs	r2, #0
 80395ac:	6839      	ldr	r1, [r7, #0]
 80395ae:	4798      	blx	r3
      break;
 80395b0:	e067      	b.n	8039682 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80395b2:	683b      	ldr	r3, [r7, #0]
 80395b4:	785b      	ldrb	r3, [r3, #1]
 80395b6:	2b0b      	cmp	r3, #11
 80395b8:	d851      	bhi.n	803965e <USBD_CDC_Setup+0x18a>
 80395ba:	a201      	add	r2, pc, #4	; (adr r2, 80395c0 <USBD_CDC_Setup+0xec>)
 80395bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80395c0:	080395f1 	.word	0x080395f1
 80395c4:	0803966d 	.word	0x0803966d
 80395c8:	0803965f 	.word	0x0803965f
 80395cc:	0803965f 	.word	0x0803965f
 80395d0:	0803965f 	.word	0x0803965f
 80395d4:	0803965f 	.word	0x0803965f
 80395d8:	0803965f 	.word	0x0803965f
 80395dc:	0803965f 	.word	0x0803965f
 80395e0:	0803965f 	.word	0x0803965f
 80395e4:	0803965f 	.word	0x0803965f
 80395e8:	0803961b 	.word	0x0803961b
 80395ec:	08039645 	.word	0x08039645
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80395f0:	687b      	ldr	r3, [r7, #4]
 80395f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80395f6:	b2db      	uxtb	r3, r3
 80395f8:	2b03      	cmp	r3, #3
 80395fa:	d107      	bne.n	803960c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80395fc:	f107 030a 	add.w	r3, r7, #10
 8039600:	2202      	movs	r2, #2
 8039602:	4619      	mov	r1, r3
 8039604:	6878      	ldr	r0, [r7, #4]
 8039606:	f001 fced 	bl	803afe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803960a:	e032      	b.n	8039672 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803960c:	6839      	ldr	r1, [r7, #0]
 803960e:	6878      	ldr	r0, [r7, #4]
 8039610:	f001 fc77 	bl	803af02 <USBD_CtlError>
            ret = USBD_FAIL;
 8039614:	2303      	movs	r3, #3
 8039616:	75fb      	strb	r3, [r7, #23]
          break;
 8039618:	e02b      	b.n	8039672 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803961a:	687b      	ldr	r3, [r7, #4]
 803961c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039620:	b2db      	uxtb	r3, r3
 8039622:	2b03      	cmp	r3, #3
 8039624:	d107      	bne.n	8039636 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8039626:	f107 030d 	add.w	r3, r7, #13
 803962a:	2201      	movs	r2, #1
 803962c:	4619      	mov	r1, r3
 803962e:	6878      	ldr	r0, [r7, #4]
 8039630:	f001 fcd8 	bl	803afe4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8039634:	e01d      	b.n	8039672 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8039636:	6839      	ldr	r1, [r7, #0]
 8039638:	6878      	ldr	r0, [r7, #4]
 803963a:	f001 fc62 	bl	803af02 <USBD_CtlError>
            ret = USBD_FAIL;
 803963e:	2303      	movs	r3, #3
 8039640:	75fb      	strb	r3, [r7, #23]
          break;
 8039642:	e016      	b.n	8039672 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8039644:	687b      	ldr	r3, [r7, #4]
 8039646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803964a:	b2db      	uxtb	r3, r3
 803964c:	2b03      	cmp	r3, #3
 803964e:	d00f      	beq.n	8039670 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8039650:	6839      	ldr	r1, [r7, #0]
 8039652:	6878      	ldr	r0, [r7, #4]
 8039654:	f001 fc55 	bl	803af02 <USBD_CtlError>
            ret = USBD_FAIL;
 8039658:	2303      	movs	r3, #3
 803965a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 803965c:	e008      	b.n	8039670 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 803965e:	6839      	ldr	r1, [r7, #0]
 8039660:	6878      	ldr	r0, [r7, #4]
 8039662:	f001 fc4e 	bl	803af02 <USBD_CtlError>
          ret = USBD_FAIL;
 8039666:	2303      	movs	r3, #3
 8039668:	75fb      	strb	r3, [r7, #23]
          break;
 803966a:	e002      	b.n	8039672 <USBD_CDC_Setup+0x19e>
          break;
 803966c:	bf00      	nop
 803966e:	e008      	b.n	8039682 <USBD_CDC_Setup+0x1ae>
          break;
 8039670:	bf00      	nop
      }
      break;
 8039672:	e006      	b.n	8039682 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8039674:	6839      	ldr	r1, [r7, #0]
 8039676:	6878      	ldr	r0, [r7, #4]
 8039678:	f001 fc43 	bl	803af02 <USBD_CtlError>
      ret = USBD_FAIL;
 803967c:	2303      	movs	r3, #3
 803967e:	75fb      	strb	r3, [r7, #23]
      break;
 8039680:	bf00      	nop
  }

  return (uint8_t)ret;
 8039682:	7dfb      	ldrb	r3, [r7, #23]
}
 8039684:	4618      	mov	r0, r3
 8039686:	3718      	adds	r7, #24
 8039688:	46bd      	mov	sp, r7
 803968a:	bd80      	pop	{r7, pc}

0803968c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803968c:	b580      	push	{r7, lr}
 803968e:	b084      	sub	sp, #16
 8039690:	af00      	add	r7, sp, #0
 8039692:	6078      	str	r0, [r7, #4]
 8039694:	460b      	mov	r3, r1
 8039696:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8039698:	687b      	ldr	r3, [r7, #4]
 803969a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803969e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80396a0:	687b      	ldr	r3, [r7, #4]
 80396a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80396a6:	687b      	ldr	r3, [r7, #4]
 80396a8:	32b0      	adds	r2, #176	; 0xb0
 80396aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80396ae:	2b00      	cmp	r3, #0
 80396b0:	d101      	bne.n	80396b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80396b2:	2303      	movs	r3, #3
 80396b4:	e065      	b.n	8039782 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80396b6:	687b      	ldr	r3, [r7, #4]
 80396b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80396bc:	687b      	ldr	r3, [r7, #4]
 80396be:	32b0      	adds	r2, #176	; 0xb0
 80396c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80396c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80396c6:	78fb      	ldrb	r3, [r7, #3]
 80396c8:	f003 020f 	and.w	r2, r3, #15
 80396cc:	6879      	ldr	r1, [r7, #4]
 80396ce:	4613      	mov	r3, r2
 80396d0:	009b      	lsls	r3, r3, #2
 80396d2:	4413      	add	r3, r2
 80396d4:	009b      	lsls	r3, r3, #2
 80396d6:	440b      	add	r3, r1
 80396d8:	3318      	adds	r3, #24
 80396da:	681b      	ldr	r3, [r3, #0]
 80396dc:	2b00      	cmp	r3, #0
 80396de:	d02f      	beq.n	8039740 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80396e0:	78fb      	ldrb	r3, [r7, #3]
 80396e2:	f003 020f 	and.w	r2, r3, #15
 80396e6:	6879      	ldr	r1, [r7, #4]
 80396e8:	4613      	mov	r3, r2
 80396ea:	009b      	lsls	r3, r3, #2
 80396ec:	4413      	add	r3, r2
 80396ee:	009b      	lsls	r3, r3, #2
 80396f0:	440b      	add	r3, r1
 80396f2:	3318      	adds	r3, #24
 80396f4:	681a      	ldr	r2, [r3, #0]
 80396f6:	78fb      	ldrb	r3, [r7, #3]
 80396f8:	f003 010f 	and.w	r1, r3, #15
 80396fc:	68f8      	ldr	r0, [r7, #12]
 80396fe:	460b      	mov	r3, r1
 8039700:	00db      	lsls	r3, r3, #3
 8039702:	440b      	add	r3, r1
 8039704:	009b      	lsls	r3, r3, #2
 8039706:	4403      	add	r3, r0
 8039708:	3348      	adds	r3, #72	; 0x48
 803970a:	681b      	ldr	r3, [r3, #0]
 803970c:	fbb2 f1f3 	udiv	r1, r2, r3
 8039710:	fb01 f303 	mul.w	r3, r1, r3
 8039714:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8039716:	2b00      	cmp	r3, #0
 8039718:	d112      	bne.n	8039740 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 803971a:	78fb      	ldrb	r3, [r7, #3]
 803971c:	f003 020f 	and.w	r2, r3, #15
 8039720:	6879      	ldr	r1, [r7, #4]
 8039722:	4613      	mov	r3, r2
 8039724:	009b      	lsls	r3, r3, #2
 8039726:	4413      	add	r3, r2
 8039728:	009b      	lsls	r3, r3, #2
 803972a:	440b      	add	r3, r1
 803972c:	3318      	adds	r3, #24
 803972e:	2200      	movs	r2, #0
 8039730:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8039732:	78f9      	ldrb	r1, [r7, #3]
 8039734:	2300      	movs	r3, #0
 8039736:	2200      	movs	r2, #0
 8039738:	6878      	ldr	r0, [r7, #4]
 803973a:	f002 f95a 	bl	803b9f2 <USBD_LL_Transmit>
 803973e:	e01f      	b.n	8039780 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8039740:	68bb      	ldr	r3, [r7, #8]
 8039742:	2200      	movs	r2, #0
 8039744:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8039748:	687b      	ldr	r3, [r7, #4]
 803974a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803974e:	687a      	ldr	r2, [r7, #4]
 8039750:	33b0      	adds	r3, #176	; 0xb0
 8039752:	009b      	lsls	r3, r3, #2
 8039754:	4413      	add	r3, r2
 8039756:	685b      	ldr	r3, [r3, #4]
 8039758:	691b      	ldr	r3, [r3, #16]
 803975a:	2b00      	cmp	r3, #0
 803975c:	d010      	beq.n	8039780 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 803975e:	687b      	ldr	r3, [r7, #4]
 8039760:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039764:	687a      	ldr	r2, [r7, #4]
 8039766:	33b0      	adds	r3, #176	; 0xb0
 8039768:	009b      	lsls	r3, r3, #2
 803976a:	4413      	add	r3, r2
 803976c:	685b      	ldr	r3, [r3, #4]
 803976e:	691b      	ldr	r3, [r3, #16]
 8039770:	68ba      	ldr	r2, [r7, #8]
 8039772:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8039776:	68ba      	ldr	r2, [r7, #8]
 8039778:	f502 7104 	add.w	r1, r2, #528	; 0x210
 803977c:	78fa      	ldrb	r2, [r7, #3]
 803977e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8039780:	2300      	movs	r3, #0
}
 8039782:	4618      	mov	r0, r3
 8039784:	3710      	adds	r7, #16
 8039786:	46bd      	mov	sp, r7
 8039788:	bd80      	pop	{r7, pc}

0803978a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803978a:	b580      	push	{r7, lr}
 803978c:	b084      	sub	sp, #16
 803978e:	af00      	add	r7, sp, #0
 8039790:	6078      	str	r0, [r7, #4]
 8039792:	460b      	mov	r3, r1
 8039794:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039796:	687b      	ldr	r3, [r7, #4]
 8039798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803979c:	687b      	ldr	r3, [r7, #4]
 803979e:	32b0      	adds	r2, #176	; 0xb0
 80397a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80397a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80397a6:	687b      	ldr	r3, [r7, #4]
 80397a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80397ac:	687b      	ldr	r3, [r7, #4]
 80397ae:	32b0      	adds	r2, #176	; 0xb0
 80397b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80397b4:	2b00      	cmp	r3, #0
 80397b6:	d101      	bne.n	80397bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80397b8:	2303      	movs	r3, #3
 80397ba:	e01a      	b.n	80397f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80397bc:	78fb      	ldrb	r3, [r7, #3]
 80397be:	4619      	mov	r1, r3
 80397c0:	6878      	ldr	r0, [r7, #4]
 80397c2:	f002 f958 	bl	803ba76 <USBD_LL_GetRxDataSize>
 80397c6:	4602      	mov	r2, r0
 80397c8:	68fb      	ldr	r3, [r7, #12]
 80397ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80397ce:	687b      	ldr	r3, [r7, #4]
 80397d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80397d4:	687a      	ldr	r2, [r7, #4]
 80397d6:	33b0      	adds	r3, #176	; 0xb0
 80397d8:	009b      	lsls	r3, r3, #2
 80397da:	4413      	add	r3, r2
 80397dc:	685b      	ldr	r3, [r3, #4]
 80397de:	68db      	ldr	r3, [r3, #12]
 80397e0:	68fa      	ldr	r2, [r7, #12]
 80397e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80397e6:	68fa      	ldr	r2, [r7, #12]
 80397e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80397ec:	4611      	mov	r1, r2
 80397ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80397f0:	2300      	movs	r3, #0
}
 80397f2:	4618      	mov	r0, r3
 80397f4:	3710      	adds	r7, #16
 80397f6:	46bd      	mov	sp, r7
 80397f8:	bd80      	pop	{r7, pc}

080397fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80397fa:	b580      	push	{r7, lr}
 80397fc:	b084      	sub	sp, #16
 80397fe:	af00      	add	r7, sp, #0
 8039800:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039802:	687b      	ldr	r3, [r7, #4]
 8039804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039808:	687b      	ldr	r3, [r7, #4]
 803980a:	32b0      	adds	r2, #176	; 0xb0
 803980c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039810:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8039812:	68fb      	ldr	r3, [r7, #12]
 8039814:	2b00      	cmp	r3, #0
 8039816:	d101      	bne.n	803981c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8039818:	2303      	movs	r3, #3
 803981a:	e025      	b.n	8039868 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 803981c:	687b      	ldr	r3, [r7, #4]
 803981e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039822:	687a      	ldr	r2, [r7, #4]
 8039824:	33b0      	adds	r3, #176	; 0xb0
 8039826:	009b      	lsls	r3, r3, #2
 8039828:	4413      	add	r3, r2
 803982a:	685b      	ldr	r3, [r3, #4]
 803982c:	2b00      	cmp	r3, #0
 803982e:	d01a      	beq.n	8039866 <USBD_CDC_EP0_RxReady+0x6c>
 8039830:	68fb      	ldr	r3, [r7, #12]
 8039832:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8039836:	2bff      	cmp	r3, #255	; 0xff
 8039838:	d015      	beq.n	8039866 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803983a:	687b      	ldr	r3, [r7, #4]
 803983c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039840:	687a      	ldr	r2, [r7, #4]
 8039842:	33b0      	adds	r3, #176	; 0xb0
 8039844:	009b      	lsls	r3, r3, #2
 8039846:	4413      	add	r3, r2
 8039848:	685b      	ldr	r3, [r3, #4]
 803984a:	689b      	ldr	r3, [r3, #8]
 803984c:	68fa      	ldr	r2, [r7, #12]
 803984e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8039852:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8039854:	68fa      	ldr	r2, [r7, #12]
 8039856:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803985a:	b292      	uxth	r2, r2
 803985c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 803985e:	68fb      	ldr	r3, [r7, #12]
 8039860:	22ff      	movs	r2, #255	; 0xff
 8039862:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8039866:	2300      	movs	r3, #0
}
 8039868:	4618      	mov	r0, r3
 803986a:	3710      	adds	r7, #16
 803986c:	46bd      	mov	sp, r7
 803986e:	bd80      	pop	{r7, pc}

08039870 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8039870:	b580      	push	{r7, lr}
 8039872:	b086      	sub	sp, #24
 8039874:	af00      	add	r7, sp, #0
 8039876:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039878:	2182      	movs	r1, #130	; 0x82
 803987a:	4818      	ldr	r0, [pc, #96]	; (80398dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 803987c:	f000 fd09 	bl	803a292 <USBD_GetEpDesc>
 8039880:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039882:	2101      	movs	r1, #1
 8039884:	4815      	ldr	r0, [pc, #84]	; (80398dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8039886:	f000 fd04 	bl	803a292 <USBD_GetEpDesc>
 803988a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803988c:	2181      	movs	r1, #129	; 0x81
 803988e:	4813      	ldr	r0, [pc, #76]	; (80398dc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8039890:	f000 fcff 	bl	803a292 <USBD_GetEpDesc>
 8039894:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039896:	697b      	ldr	r3, [r7, #20]
 8039898:	2b00      	cmp	r3, #0
 803989a:	d002      	beq.n	80398a2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 803989c:	697b      	ldr	r3, [r7, #20]
 803989e:	2210      	movs	r2, #16
 80398a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80398a2:	693b      	ldr	r3, [r7, #16]
 80398a4:	2b00      	cmp	r3, #0
 80398a6:	d006      	beq.n	80398b6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80398a8:	693b      	ldr	r3, [r7, #16]
 80398aa:	2200      	movs	r2, #0
 80398ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80398b0:	711a      	strb	r2, [r3, #4]
 80398b2:	2200      	movs	r2, #0
 80398b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80398b6:	68fb      	ldr	r3, [r7, #12]
 80398b8:	2b00      	cmp	r3, #0
 80398ba:	d006      	beq.n	80398ca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80398bc:	68fb      	ldr	r3, [r7, #12]
 80398be:	2200      	movs	r2, #0
 80398c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80398c4:	711a      	strb	r2, [r3, #4]
 80398c6:	2200      	movs	r2, #0
 80398c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80398ca:	687b      	ldr	r3, [r7, #4]
 80398cc:	2243      	movs	r2, #67	; 0x43
 80398ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80398d0:	4b02      	ldr	r3, [pc, #8]	; (80398dc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80398d2:	4618      	mov	r0, r3
 80398d4:	3718      	adds	r7, #24
 80398d6:	46bd      	mov	sp, r7
 80398d8:	bd80      	pop	{r7, pc}
 80398da:	bf00      	nop
 80398dc:	24000058 	.word	0x24000058

080398e0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80398e0:	b580      	push	{r7, lr}
 80398e2:	b086      	sub	sp, #24
 80398e4:	af00      	add	r7, sp, #0
 80398e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80398e8:	2182      	movs	r1, #130	; 0x82
 80398ea:	4818      	ldr	r0, [pc, #96]	; (803994c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80398ec:	f000 fcd1 	bl	803a292 <USBD_GetEpDesc>
 80398f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80398f2:	2101      	movs	r1, #1
 80398f4:	4815      	ldr	r0, [pc, #84]	; (803994c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80398f6:	f000 fccc 	bl	803a292 <USBD_GetEpDesc>
 80398fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80398fc:	2181      	movs	r1, #129	; 0x81
 80398fe:	4813      	ldr	r0, [pc, #76]	; (803994c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039900:	f000 fcc7 	bl	803a292 <USBD_GetEpDesc>
 8039904:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039906:	697b      	ldr	r3, [r7, #20]
 8039908:	2b00      	cmp	r3, #0
 803990a:	d002      	beq.n	8039912 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 803990c:	697b      	ldr	r3, [r7, #20]
 803990e:	2210      	movs	r2, #16
 8039910:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039912:	693b      	ldr	r3, [r7, #16]
 8039914:	2b00      	cmp	r3, #0
 8039916:	d006      	beq.n	8039926 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8039918:	693b      	ldr	r3, [r7, #16]
 803991a:	2200      	movs	r2, #0
 803991c:	711a      	strb	r2, [r3, #4]
 803991e:	2200      	movs	r2, #0
 8039920:	f042 0202 	orr.w	r2, r2, #2
 8039924:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039926:	68fb      	ldr	r3, [r7, #12]
 8039928:	2b00      	cmp	r3, #0
 803992a:	d006      	beq.n	803993a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 803992c:	68fb      	ldr	r3, [r7, #12]
 803992e:	2200      	movs	r2, #0
 8039930:	711a      	strb	r2, [r3, #4]
 8039932:	2200      	movs	r2, #0
 8039934:	f042 0202 	orr.w	r2, r2, #2
 8039938:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803993a:	687b      	ldr	r3, [r7, #4]
 803993c:	2243      	movs	r2, #67	; 0x43
 803993e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039940:	4b02      	ldr	r3, [pc, #8]	; (803994c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8039942:	4618      	mov	r0, r3
 8039944:	3718      	adds	r7, #24
 8039946:	46bd      	mov	sp, r7
 8039948:	bd80      	pop	{r7, pc}
 803994a:	bf00      	nop
 803994c:	24000058 	.word	0x24000058

08039950 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8039950:	b580      	push	{r7, lr}
 8039952:	b086      	sub	sp, #24
 8039954:	af00      	add	r7, sp, #0
 8039956:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039958:	2182      	movs	r1, #130	; 0x82
 803995a:	4818      	ldr	r0, [pc, #96]	; (80399bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803995c:	f000 fc99 	bl	803a292 <USBD_GetEpDesc>
 8039960:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039962:	2101      	movs	r1, #1
 8039964:	4815      	ldr	r0, [pc, #84]	; (80399bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039966:	f000 fc94 	bl	803a292 <USBD_GetEpDesc>
 803996a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803996c:	2181      	movs	r1, #129	; 0x81
 803996e:	4813      	ldr	r0, [pc, #76]	; (80399bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039970:	f000 fc8f 	bl	803a292 <USBD_GetEpDesc>
 8039974:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039976:	697b      	ldr	r3, [r7, #20]
 8039978:	2b00      	cmp	r3, #0
 803997a:	d002      	beq.n	8039982 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 803997c:	697b      	ldr	r3, [r7, #20]
 803997e:	2210      	movs	r2, #16
 8039980:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039982:	693b      	ldr	r3, [r7, #16]
 8039984:	2b00      	cmp	r3, #0
 8039986:	d006      	beq.n	8039996 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039988:	693b      	ldr	r3, [r7, #16]
 803998a:	2200      	movs	r2, #0
 803998c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039990:	711a      	strb	r2, [r3, #4]
 8039992:	2200      	movs	r2, #0
 8039994:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039996:	68fb      	ldr	r3, [r7, #12]
 8039998:	2b00      	cmp	r3, #0
 803999a:	d006      	beq.n	80399aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803999c:	68fb      	ldr	r3, [r7, #12]
 803999e:	2200      	movs	r2, #0
 80399a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80399a4:	711a      	strb	r2, [r3, #4]
 80399a6:	2200      	movs	r2, #0
 80399a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80399aa:	687b      	ldr	r3, [r7, #4]
 80399ac:	2243      	movs	r2, #67	; 0x43
 80399ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80399b0:	4b02      	ldr	r3, [pc, #8]	; (80399bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80399b2:	4618      	mov	r0, r3
 80399b4:	3718      	adds	r7, #24
 80399b6:	46bd      	mov	sp, r7
 80399b8:	bd80      	pop	{r7, pc}
 80399ba:	bf00      	nop
 80399bc:	24000058 	.word	0x24000058

080399c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80399c0:	b480      	push	{r7}
 80399c2:	b083      	sub	sp, #12
 80399c4:	af00      	add	r7, sp, #0
 80399c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80399c8:	687b      	ldr	r3, [r7, #4]
 80399ca:	220a      	movs	r2, #10
 80399cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80399ce:	4b03      	ldr	r3, [pc, #12]	; (80399dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80399d0:	4618      	mov	r0, r3
 80399d2:	370c      	adds	r7, #12
 80399d4:	46bd      	mov	sp, r7
 80399d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80399da:	4770      	bx	lr
 80399dc:	24000014 	.word	0x24000014

080399e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80399e0:	b480      	push	{r7}
 80399e2:	b083      	sub	sp, #12
 80399e4:	af00      	add	r7, sp, #0
 80399e6:	6078      	str	r0, [r7, #4]
 80399e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80399ea:	683b      	ldr	r3, [r7, #0]
 80399ec:	2b00      	cmp	r3, #0
 80399ee:	d101      	bne.n	80399f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80399f0:	2303      	movs	r3, #3
 80399f2:	e009      	b.n	8039a08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80399f4:	687b      	ldr	r3, [r7, #4]
 80399f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80399fa:	687a      	ldr	r2, [r7, #4]
 80399fc:	33b0      	adds	r3, #176	; 0xb0
 80399fe:	009b      	lsls	r3, r3, #2
 8039a00:	4413      	add	r3, r2
 8039a02:	683a      	ldr	r2, [r7, #0]
 8039a04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8039a06:	2300      	movs	r3, #0
}
 8039a08:	4618      	mov	r0, r3
 8039a0a:	370c      	adds	r7, #12
 8039a0c:	46bd      	mov	sp, r7
 8039a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039a12:	4770      	bx	lr

08039a14 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8039a14:	b480      	push	{r7}
 8039a16:	b087      	sub	sp, #28
 8039a18:	af00      	add	r7, sp, #0
 8039a1a:	60f8      	str	r0, [r7, #12]
 8039a1c:	60b9      	str	r1, [r7, #8]
 8039a1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039a20:	68fb      	ldr	r3, [r7, #12]
 8039a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039a26:	68fb      	ldr	r3, [r7, #12]
 8039a28:	32b0      	adds	r2, #176	; 0xb0
 8039a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039a2e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8039a30:	697b      	ldr	r3, [r7, #20]
 8039a32:	2b00      	cmp	r3, #0
 8039a34:	d101      	bne.n	8039a3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8039a36:	2303      	movs	r3, #3
 8039a38:	e008      	b.n	8039a4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8039a3a:	697b      	ldr	r3, [r7, #20]
 8039a3c:	68ba      	ldr	r2, [r7, #8]
 8039a3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8039a42:	697b      	ldr	r3, [r7, #20]
 8039a44:	687a      	ldr	r2, [r7, #4]
 8039a46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8039a4a:	2300      	movs	r3, #0
}
 8039a4c:	4618      	mov	r0, r3
 8039a4e:	371c      	adds	r7, #28
 8039a50:	46bd      	mov	sp, r7
 8039a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039a56:	4770      	bx	lr

08039a58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8039a58:	b480      	push	{r7}
 8039a5a:	b085      	sub	sp, #20
 8039a5c:	af00      	add	r7, sp, #0
 8039a5e:	6078      	str	r0, [r7, #4]
 8039a60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039a62:	687b      	ldr	r3, [r7, #4]
 8039a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039a68:	687b      	ldr	r3, [r7, #4]
 8039a6a:	32b0      	adds	r2, #176	; 0xb0
 8039a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039a70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8039a72:	68fb      	ldr	r3, [r7, #12]
 8039a74:	2b00      	cmp	r3, #0
 8039a76:	d101      	bne.n	8039a7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8039a78:	2303      	movs	r3, #3
 8039a7a:	e004      	b.n	8039a86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8039a7c:	68fb      	ldr	r3, [r7, #12]
 8039a7e:	683a      	ldr	r2, [r7, #0]
 8039a80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8039a84:	2300      	movs	r3, #0
}
 8039a86:	4618      	mov	r0, r3
 8039a88:	3714      	adds	r7, #20
 8039a8a:	46bd      	mov	sp, r7
 8039a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039a90:	4770      	bx	lr
	...

08039a94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8039a94:	b580      	push	{r7, lr}
 8039a96:	b084      	sub	sp, #16
 8039a98:	af00      	add	r7, sp, #0
 8039a9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039a9c:	687b      	ldr	r3, [r7, #4]
 8039a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039aa2:	687b      	ldr	r3, [r7, #4]
 8039aa4:	32b0      	adds	r2, #176	; 0xb0
 8039aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039aaa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8039aac:	687b      	ldr	r3, [r7, #4]
 8039aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039ab2:	687b      	ldr	r3, [r7, #4]
 8039ab4:	32b0      	adds	r2, #176	; 0xb0
 8039ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039aba:	2b00      	cmp	r3, #0
 8039abc:	d101      	bne.n	8039ac2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8039abe:	2303      	movs	r3, #3
 8039ac0:	e018      	b.n	8039af4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8039ac2:	687b      	ldr	r3, [r7, #4]
 8039ac4:	7c1b      	ldrb	r3, [r3, #16]
 8039ac6:	2b00      	cmp	r3, #0
 8039ac8:	d10a      	bne.n	8039ae0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039aca:	4b0c      	ldr	r3, [pc, #48]	; (8039afc <USBD_CDC_ReceivePacket+0x68>)
 8039acc:	7819      	ldrb	r1, [r3, #0]
 8039ace:	68fb      	ldr	r3, [r7, #12]
 8039ad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8039ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8039ad8:	6878      	ldr	r0, [r7, #4]
 8039ada:	f001 ffab 	bl	803ba34 <USBD_LL_PrepareReceive>
 8039ade:	e008      	b.n	8039af2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039ae0:	4b06      	ldr	r3, [pc, #24]	; (8039afc <USBD_CDC_ReceivePacket+0x68>)
 8039ae2:	7819      	ldrb	r1, [r3, #0]
 8039ae4:	68fb      	ldr	r3, [r7, #12]
 8039ae6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8039aea:	2340      	movs	r3, #64	; 0x40
 8039aec:	6878      	ldr	r0, [r7, #4]
 8039aee:	f001 ffa1 	bl	803ba34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8039af2:	2300      	movs	r3, #0
}
 8039af4:	4618      	mov	r0, r3
 8039af6:	3710      	adds	r7, #16
 8039af8:	46bd      	mov	sp, r7
 8039afa:	bd80      	pop	{r7, pc}
 8039afc:	2400009c 	.word	0x2400009c

08039b00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8039b00:	b580      	push	{r7, lr}
 8039b02:	b086      	sub	sp, #24
 8039b04:	af00      	add	r7, sp, #0
 8039b06:	60f8      	str	r0, [r7, #12]
 8039b08:	60b9      	str	r1, [r7, #8]
 8039b0a:	4613      	mov	r3, r2
 8039b0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8039b0e:	68fb      	ldr	r3, [r7, #12]
 8039b10:	2b00      	cmp	r3, #0
 8039b12:	d101      	bne.n	8039b18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8039b14:	2303      	movs	r3, #3
 8039b16:	e01f      	b.n	8039b58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8039b18:	68fb      	ldr	r3, [r7, #12]
 8039b1a:	2200      	movs	r2, #0
 8039b1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8039b20:	68fb      	ldr	r3, [r7, #12]
 8039b22:	2200      	movs	r2, #0
 8039b24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8039b28:	68fb      	ldr	r3, [r7, #12]
 8039b2a:	2200      	movs	r2, #0
 8039b2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8039b30:	68bb      	ldr	r3, [r7, #8]
 8039b32:	2b00      	cmp	r3, #0
 8039b34:	d003      	beq.n	8039b3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8039b36:	68fb      	ldr	r3, [r7, #12]
 8039b38:	68ba      	ldr	r2, [r7, #8]
 8039b3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8039b3e:	68fb      	ldr	r3, [r7, #12]
 8039b40:	2201      	movs	r2, #1
 8039b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8039b46:	68fb      	ldr	r3, [r7, #12]
 8039b48:	79fa      	ldrb	r2, [r7, #7]
 8039b4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8039b4c:	68f8      	ldr	r0, [r7, #12]
 8039b4e:	f001 fe17 	bl	803b780 <USBD_LL_Init>
 8039b52:	4603      	mov	r3, r0
 8039b54:	75fb      	strb	r3, [r7, #23]

  return ret;
 8039b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8039b58:	4618      	mov	r0, r3
 8039b5a:	3718      	adds	r7, #24
 8039b5c:	46bd      	mov	sp, r7
 8039b5e:	bd80      	pop	{r7, pc}

08039b60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8039b60:	b580      	push	{r7, lr}
 8039b62:	b084      	sub	sp, #16
 8039b64:	af00      	add	r7, sp, #0
 8039b66:	6078      	str	r0, [r7, #4]
 8039b68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8039b6a:	2300      	movs	r3, #0
 8039b6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8039b6e:	683b      	ldr	r3, [r7, #0]
 8039b70:	2b00      	cmp	r3, #0
 8039b72:	d101      	bne.n	8039b78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8039b74:	2303      	movs	r3, #3
 8039b76:	e025      	b.n	8039bc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8039b78:	687b      	ldr	r3, [r7, #4]
 8039b7a:	683a      	ldr	r2, [r7, #0]
 8039b7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8039b80:	687b      	ldr	r3, [r7, #4]
 8039b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039b86:	687b      	ldr	r3, [r7, #4]
 8039b88:	32ae      	adds	r2, #174	; 0xae
 8039b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039b90:	2b00      	cmp	r3, #0
 8039b92:	d00f      	beq.n	8039bb4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8039b94:	687b      	ldr	r3, [r7, #4]
 8039b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039b9a:	687b      	ldr	r3, [r7, #4]
 8039b9c:	32ae      	adds	r2, #174	; 0xae
 8039b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039ba4:	f107 020e 	add.w	r2, r7, #14
 8039ba8:	4610      	mov	r0, r2
 8039baa:	4798      	blx	r3
 8039bac:	4602      	mov	r2, r0
 8039bae:	687b      	ldr	r3, [r7, #4]
 8039bb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8039bb4:	687b      	ldr	r3, [r7, #4]
 8039bb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8039bba:	1c5a      	adds	r2, r3, #1
 8039bbc:	687b      	ldr	r3, [r7, #4]
 8039bbe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8039bc2:	2300      	movs	r3, #0
}
 8039bc4:	4618      	mov	r0, r3
 8039bc6:	3710      	adds	r7, #16
 8039bc8:	46bd      	mov	sp, r7
 8039bca:	bd80      	pop	{r7, pc}

08039bcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8039bcc:	b580      	push	{r7, lr}
 8039bce:	b082      	sub	sp, #8
 8039bd0:	af00      	add	r7, sp, #0
 8039bd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8039bd4:	6878      	ldr	r0, [r7, #4]
 8039bd6:	f001 fe23 	bl	803b820 <USBD_LL_Start>
 8039bda:	4603      	mov	r3, r0
}
 8039bdc:	4618      	mov	r0, r3
 8039bde:	3708      	adds	r7, #8
 8039be0:	46bd      	mov	sp, r7
 8039be2:	bd80      	pop	{r7, pc}

08039be4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8039be4:	b480      	push	{r7}
 8039be6:	b083      	sub	sp, #12
 8039be8:	af00      	add	r7, sp, #0
 8039bea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8039bec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8039bee:	4618      	mov	r0, r3
 8039bf0:	370c      	adds	r7, #12
 8039bf2:	46bd      	mov	sp, r7
 8039bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039bf8:	4770      	bx	lr

08039bfa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039bfa:	b580      	push	{r7, lr}
 8039bfc:	b084      	sub	sp, #16
 8039bfe:	af00      	add	r7, sp, #0
 8039c00:	6078      	str	r0, [r7, #4]
 8039c02:	460b      	mov	r3, r1
 8039c04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8039c06:	2300      	movs	r3, #0
 8039c08:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8039c0a:	687b      	ldr	r3, [r7, #4]
 8039c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039c10:	2b00      	cmp	r3, #0
 8039c12:	d009      	beq.n	8039c28 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8039c14:	687b      	ldr	r3, [r7, #4]
 8039c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039c1a:	681b      	ldr	r3, [r3, #0]
 8039c1c:	78fa      	ldrb	r2, [r7, #3]
 8039c1e:	4611      	mov	r1, r2
 8039c20:	6878      	ldr	r0, [r7, #4]
 8039c22:	4798      	blx	r3
 8039c24:	4603      	mov	r3, r0
 8039c26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8039c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8039c2a:	4618      	mov	r0, r3
 8039c2c:	3710      	adds	r7, #16
 8039c2e:	46bd      	mov	sp, r7
 8039c30:	bd80      	pop	{r7, pc}

08039c32 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039c32:	b580      	push	{r7, lr}
 8039c34:	b084      	sub	sp, #16
 8039c36:	af00      	add	r7, sp, #0
 8039c38:	6078      	str	r0, [r7, #4]
 8039c3a:	460b      	mov	r3, r1
 8039c3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8039c3e:	2300      	movs	r3, #0
 8039c40:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8039c42:	687b      	ldr	r3, [r7, #4]
 8039c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039c48:	685b      	ldr	r3, [r3, #4]
 8039c4a:	78fa      	ldrb	r2, [r7, #3]
 8039c4c:	4611      	mov	r1, r2
 8039c4e:	6878      	ldr	r0, [r7, #4]
 8039c50:	4798      	blx	r3
 8039c52:	4603      	mov	r3, r0
 8039c54:	2b00      	cmp	r3, #0
 8039c56:	d001      	beq.n	8039c5c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8039c58:	2303      	movs	r3, #3
 8039c5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8039c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8039c5e:	4618      	mov	r0, r3
 8039c60:	3710      	adds	r7, #16
 8039c62:	46bd      	mov	sp, r7
 8039c64:	bd80      	pop	{r7, pc}

08039c66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8039c66:	b580      	push	{r7, lr}
 8039c68:	b084      	sub	sp, #16
 8039c6a:	af00      	add	r7, sp, #0
 8039c6c:	6078      	str	r0, [r7, #4]
 8039c6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8039c70:	687b      	ldr	r3, [r7, #4]
 8039c72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039c76:	6839      	ldr	r1, [r7, #0]
 8039c78:	4618      	mov	r0, r3
 8039c7a:	f001 f908 	bl	803ae8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8039c7e:	687b      	ldr	r3, [r7, #4]
 8039c80:	2201      	movs	r2, #1
 8039c82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8039c86:	687b      	ldr	r3, [r7, #4]
 8039c88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8039c8c:	461a      	mov	r2, r3
 8039c8e:	687b      	ldr	r3, [r7, #4]
 8039c90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8039c94:	687b      	ldr	r3, [r7, #4]
 8039c96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039c9a:	f003 031f 	and.w	r3, r3, #31
 8039c9e:	2b02      	cmp	r3, #2
 8039ca0:	d01a      	beq.n	8039cd8 <USBD_LL_SetupStage+0x72>
 8039ca2:	2b02      	cmp	r3, #2
 8039ca4:	d822      	bhi.n	8039cec <USBD_LL_SetupStage+0x86>
 8039ca6:	2b00      	cmp	r3, #0
 8039ca8:	d002      	beq.n	8039cb0 <USBD_LL_SetupStage+0x4a>
 8039caa:	2b01      	cmp	r3, #1
 8039cac:	d00a      	beq.n	8039cc4 <USBD_LL_SetupStage+0x5e>
 8039cae:	e01d      	b.n	8039cec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8039cb0:	687b      	ldr	r3, [r7, #4]
 8039cb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039cb6:	4619      	mov	r1, r3
 8039cb8:	6878      	ldr	r0, [r7, #4]
 8039cba:	f000 fb5f 	bl	803a37c <USBD_StdDevReq>
 8039cbe:	4603      	mov	r3, r0
 8039cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8039cc2:	e020      	b.n	8039d06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8039cc4:	687b      	ldr	r3, [r7, #4]
 8039cc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039cca:	4619      	mov	r1, r3
 8039ccc:	6878      	ldr	r0, [r7, #4]
 8039cce:	f000 fbc7 	bl	803a460 <USBD_StdItfReq>
 8039cd2:	4603      	mov	r3, r0
 8039cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8039cd6:	e016      	b.n	8039d06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8039cd8:	687b      	ldr	r3, [r7, #4]
 8039cda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039cde:	4619      	mov	r1, r3
 8039ce0:	6878      	ldr	r0, [r7, #4]
 8039ce2:	f000 fc29 	bl	803a538 <USBD_StdEPReq>
 8039ce6:	4603      	mov	r3, r0
 8039ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8039cea:	e00c      	b.n	8039d06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8039cec:	687b      	ldr	r3, [r7, #4]
 8039cee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039cf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8039cf6:	b2db      	uxtb	r3, r3
 8039cf8:	4619      	mov	r1, r3
 8039cfa:	6878      	ldr	r0, [r7, #4]
 8039cfc:	f001 fdf0 	bl	803b8e0 <USBD_LL_StallEP>
 8039d00:	4603      	mov	r3, r0
 8039d02:	73fb      	strb	r3, [r7, #15]
      break;
 8039d04:	bf00      	nop
  }

  return ret;
 8039d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8039d08:	4618      	mov	r0, r3
 8039d0a:	3710      	adds	r7, #16
 8039d0c:	46bd      	mov	sp, r7
 8039d0e:	bd80      	pop	{r7, pc}

08039d10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8039d10:	b580      	push	{r7, lr}
 8039d12:	b086      	sub	sp, #24
 8039d14:	af00      	add	r7, sp, #0
 8039d16:	60f8      	str	r0, [r7, #12]
 8039d18:	460b      	mov	r3, r1
 8039d1a:	607a      	str	r2, [r7, #4]
 8039d1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8039d1e:	2300      	movs	r3, #0
 8039d20:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8039d22:	7afb      	ldrb	r3, [r7, #11]
 8039d24:	2b00      	cmp	r3, #0
 8039d26:	d16e      	bne.n	8039e06 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8039d28:	68fb      	ldr	r3, [r7, #12]
 8039d2a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8039d2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8039d30:	68fb      	ldr	r3, [r7, #12]
 8039d32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8039d36:	2b03      	cmp	r3, #3
 8039d38:	f040 8098 	bne.w	8039e6c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8039d3c:	693b      	ldr	r3, [r7, #16]
 8039d3e:	689a      	ldr	r2, [r3, #8]
 8039d40:	693b      	ldr	r3, [r7, #16]
 8039d42:	68db      	ldr	r3, [r3, #12]
 8039d44:	429a      	cmp	r2, r3
 8039d46:	d913      	bls.n	8039d70 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8039d48:	693b      	ldr	r3, [r7, #16]
 8039d4a:	689a      	ldr	r2, [r3, #8]
 8039d4c:	693b      	ldr	r3, [r7, #16]
 8039d4e:	68db      	ldr	r3, [r3, #12]
 8039d50:	1ad2      	subs	r2, r2, r3
 8039d52:	693b      	ldr	r3, [r7, #16]
 8039d54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8039d56:	693b      	ldr	r3, [r7, #16]
 8039d58:	68da      	ldr	r2, [r3, #12]
 8039d5a:	693b      	ldr	r3, [r7, #16]
 8039d5c:	689b      	ldr	r3, [r3, #8]
 8039d5e:	4293      	cmp	r3, r2
 8039d60:	bf28      	it	cs
 8039d62:	4613      	movcs	r3, r2
 8039d64:	461a      	mov	r2, r3
 8039d66:	6879      	ldr	r1, [r7, #4]
 8039d68:	68f8      	ldr	r0, [r7, #12]
 8039d6a:	f001 f984 	bl	803b076 <USBD_CtlContinueRx>
 8039d6e:	e07d      	b.n	8039e6c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8039d70:	68fb      	ldr	r3, [r7, #12]
 8039d72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039d76:	f003 031f 	and.w	r3, r3, #31
 8039d7a:	2b02      	cmp	r3, #2
 8039d7c:	d014      	beq.n	8039da8 <USBD_LL_DataOutStage+0x98>
 8039d7e:	2b02      	cmp	r3, #2
 8039d80:	d81d      	bhi.n	8039dbe <USBD_LL_DataOutStage+0xae>
 8039d82:	2b00      	cmp	r3, #0
 8039d84:	d002      	beq.n	8039d8c <USBD_LL_DataOutStage+0x7c>
 8039d86:	2b01      	cmp	r3, #1
 8039d88:	d003      	beq.n	8039d92 <USBD_LL_DataOutStage+0x82>
 8039d8a:	e018      	b.n	8039dbe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8039d8c:	2300      	movs	r3, #0
 8039d8e:	75bb      	strb	r3, [r7, #22]
            break;
 8039d90:	e018      	b.n	8039dc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8039d92:	68fb      	ldr	r3, [r7, #12]
 8039d94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8039d98:	b2db      	uxtb	r3, r3
 8039d9a:	4619      	mov	r1, r3
 8039d9c:	68f8      	ldr	r0, [r7, #12]
 8039d9e:	f000 fa5e 	bl	803a25e <USBD_CoreFindIF>
 8039da2:	4603      	mov	r3, r0
 8039da4:	75bb      	strb	r3, [r7, #22]
            break;
 8039da6:	e00d      	b.n	8039dc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8039da8:	68fb      	ldr	r3, [r7, #12]
 8039daa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8039dae:	b2db      	uxtb	r3, r3
 8039db0:	4619      	mov	r1, r3
 8039db2:	68f8      	ldr	r0, [r7, #12]
 8039db4:	f000 fa60 	bl	803a278 <USBD_CoreFindEP>
 8039db8:	4603      	mov	r3, r0
 8039dba:	75bb      	strb	r3, [r7, #22]
            break;
 8039dbc:	e002      	b.n	8039dc4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8039dbe:	2300      	movs	r3, #0
 8039dc0:	75bb      	strb	r3, [r7, #22]
            break;
 8039dc2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8039dc4:	7dbb      	ldrb	r3, [r7, #22]
 8039dc6:	2b00      	cmp	r3, #0
 8039dc8:	d119      	bne.n	8039dfe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8039dca:	68fb      	ldr	r3, [r7, #12]
 8039dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039dd0:	b2db      	uxtb	r3, r3
 8039dd2:	2b03      	cmp	r3, #3
 8039dd4:	d113      	bne.n	8039dfe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8039dd6:	7dba      	ldrb	r2, [r7, #22]
 8039dd8:	68fb      	ldr	r3, [r7, #12]
 8039dda:	32ae      	adds	r2, #174	; 0xae
 8039ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039de0:	691b      	ldr	r3, [r3, #16]
 8039de2:	2b00      	cmp	r3, #0
 8039de4:	d00b      	beq.n	8039dfe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8039de6:	7dba      	ldrb	r2, [r7, #22]
 8039de8:	68fb      	ldr	r3, [r7, #12]
 8039dea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8039dee:	7dba      	ldrb	r2, [r7, #22]
 8039df0:	68fb      	ldr	r3, [r7, #12]
 8039df2:	32ae      	adds	r2, #174	; 0xae
 8039df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039df8:	691b      	ldr	r3, [r3, #16]
 8039dfa:	68f8      	ldr	r0, [r7, #12]
 8039dfc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8039dfe:	68f8      	ldr	r0, [r7, #12]
 8039e00:	f001 f94a 	bl	803b098 <USBD_CtlSendStatus>
 8039e04:	e032      	b.n	8039e6c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8039e06:	7afb      	ldrb	r3, [r7, #11]
 8039e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8039e0c:	b2db      	uxtb	r3, r3
 8039e0e:	4619      	mov	r1, r3
 8039e10:	68f8      	ldr	r0, [r7, #12]
 8039e12:	f000 fa31 	bl	803a278 <USBD_CoreFindEP>
 8039e16:	4603      	mov	r3, r0
 8039e18:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8039e1a:	7dbb      	ldrb	r3, [r7, #22]
 8039e1c:	2bff      	cmp	r3, #255	; 0xff
 8039e1e:	d025      	beq.n	8039e6c <USBD_LL_DataOutStage+0x15c>
 8039e20:	7dbb      	ldrb	r3, [r7, #22]
 8039e22:	2b00      	cmp	r3, #0
 8039e24:	d122      	bne.n	8039e6c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8039e26:	68fb      	ldr	r3, [r7, #12]
 8039e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039e2c:	b2db      	uxtb	r3, r3
 8039e2e:	2b03      	cmp	r3, #3
 8039e30:	d117      	bne.n	8039e62 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8039e32:	7dba      	ldrb	r2, [r7, #22]
 8039e34:	68fb      	ldr	r3, [r7, #12]
 8039e36:	32ae      	adds	r2, #174	; 0xae
 8039e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039e3c:	699b      	ldr	r3, [r3, #24]
 8039e3e:	2b00      	cmp	r3, #0
 8039e40:	d00f      	beq.n	8039e62 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8039e42:	7dba      	ldrb	r2, [r7, #22]
 8039e44:	68fb      	ldr	r3, [r7, #12]
 8039e46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8039e4a:	7dba      	ldrb	r2, [r7, #22]
 8039e4c:	68fb      	ldr	r3, [r7, #12]
 8039e4e:	32ae      	adds	r2, #174	; 0xae
 8039e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039e54:	699b      	ldr	r3, [r3, #24]
 8039e56:	7afa      	ldrb	r2, [r7, #11]
 8039e58:	4611      	mov	r1, r2
 8039e5a:	68f8      	ldr	r0, [r7, #12]
 8039e5c:	4798      	blx	r3
 8039e5e:	4603      	mov	r3, r0
 8039e60:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8039e62:	7dfb      	ldrb	r3, [r7, #23]
 8039e64:	2b00      	cmp	r3, #0
 8039e66:	d001      	beq.n	8039e6c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8039e68:	7dfb      	ldrb	r3, [r7, #23]
 8039e6a:	e000      	b.n	8039e6e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8039e6c:	2300      	movs	r3, #0
}
 8039e6e:	4618      	mov	r0, r3
 8039e70:	3718      	adds	r7, #24
 8039e72:	46bd      	mov	sp, r7
 8039e74:	bd80      	pop	{r7, pc}

08039e76 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8039e76:	b580      	push	{r7, lr}
 8039e78:	b086      	sub	sp, #24
 8039e7a:	af00      	add	r7, sp, #0
 8039e7c:	60f8      	str	r0, [r7, #12]
 8039e7e:	460b      	mov	r3, r1
 8039e80:	607a      	str	r2, [r7, #4]
 8039e82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8039e84:	7afb      	ldrb	r3, [r7, #11]
 8039e86:	2b00      	cmp	r3, #0
 8039e88:	d16f      	bne.n	8039f6a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8039e8a:	68fb      	ldr	r3, [r7, #12]
 8039e8c:	3314      	adds	r3, #20
 8039e8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8039e90:	68fb      	ldr	r3, [r7, #12]
 8039e92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8039e96:	2b02      	cmp	r3, #2
 8039e98:	d15a      	bne.n	8039f50 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8039e9a:	693b      	ldr	r3, [r7, #16]
 8039e9c:	689a      	ldr	r2, [r3, #8]
 8039e9e:	693b      	ldr	r3, [r7, #16]
 8039ea0:	68db      	ldr	r3, [r3, #12]
 8039ea2:	429a      	cmp	r2, r3
 8039ea4:	d914      	bls.n	8039ed0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8039ea6:	693b      	ldr	r3, [r7, #16]
 8039ea8:	689a      	ldr	r2, [r3, #8]
 8039eaa:	693b      	ldr	r3, [r7, #16]
 8039eac:	68db      	ldr	r3, [r3, #12]
 8039eae:	1ad2      	subs	r2, r2, r3
 8039eb0:	693b      	ldr	r3, [r7, #16]
 8039eb2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8039eb4:	693b      	ldr	r3, [r7, #16]
 8039eb6:	689b      	ldr	r3, [r3, #8]
 8039eb8:	461a      	mov	r2, r3
 8039eba:	6879      	ldr	r1, [r7, #4]
 8039ebc:	68f8      	ldr	r0, [r7, #12]
 8039ebe:	f001 f8ac 	bl	803b01a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8039ec2:	2300      	movs	r3, #0
 8039ec4:	2200      	movs	r2, #0
 8039ec6:	2100      	movs	r1, #0
 8039ec8:	68f8      	ldr	r0, [r7, #12]
 8039eca:	f001 fdb3 	bl	803ba34 <USBD_LL_PrepareReceive>
 8039ece:	e03f      	b.n	8039f50 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8039ed0:	693b      	ldr	r3, [r7, #16]
 8039ed2:	68da      	ldr	r2, [r3, #12]
 8039ed4:	693b      	ldr	r3, [r7, #16]
 8039ed6:	689b      	ldr	r3, [r3, #8]
 8039ed8:	429a      	cmp	r2, r3
 8039eda:	d11c      	bne.n	8039f16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8039edc:	693b      	ldr	r3, [r7, #16]
 8039ede:	685a      	ldr	r2, [r3, #4]
 8039ee0:	693b      	ldr	r3, [r7, #16]
 8039ee2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8039ee4:	429a      	cmp	r2, r3
 8039ee6:	d316      	bcc.n	8039f16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8039ee8:	693b      	ldr	r3, [r7, #16]
 8039eea:	685a      	ldr	r2, [r3, #4]
 8039eec:	68fb      	ldr	r3, [r7, #12]
 8039eee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8039ef2:	429a      	cmp	r2, r3
 8039ef4:	d20f      	bcs.n	8039f16 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8039ef6:	2200      	movs	r2, #0
 8039ef8:	2100      	movs	r1, #0
 8039efa:	68f8      	ldr	r0, [r7, #12]
 8039efc:	f001 f88d 	bl	803b01a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8039f00:	68fb      	ldr	r3, [r7, #12]
 8039f02:	2200      	movs	r2, #0
 8039f04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8039f08:	2300      	movs	r3, #0
 8039f0a:	2200      	movs	r2, #0
 8039f0c:	2100      	movs	r1, #0
 8039f0e:	68f8      	ldr	r0, [r7, #12]
 8039f10:	f001 fd90 	bl	803ba34 <USBD_LL_PrepareReceive>
 8039f14:	e01c      	b.n	8039f50 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8039f16:	68fb      	ldr	r3, [r7, #12]
 8039f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039f1c:	b2db      	uxtb	r3, r3
 8039f1e:	2b03      	cmp	r3, #3
 8039f20:	d10f      	bne.n	8039f42 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8039f22:	68fb      	ldr	r3, [r7, #12]
 8039f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039f28:	68db      	ldr	r3, [r3, #12]
 8039f2a:	2b00      	cmp	r3, #0
 8039f2c:	d009      	beq.n	8039f42 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8039f2e:	68fb      	ldr	r3, [r7, #12]
 8039f30:	2200      	movs	r2, #0
 8039f32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8039f36:	68fb      	ldr	r3, [r7, #12]
 8039f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039f3c:	68db      	ldr	r3, [r3, #12]
 8039f3e:	68f8      	ldr	r0, [r7, #12]
 8039f40:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8039f42:	2180      	movs	r1, #128	; 0x80
 8039f44:	68f8      	ldr	r0, [r7, #12]
 8039f46:	f001 fccb 	bl	803b8e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8039f4a:	68f8      	ldr	r0, [r7, #12]
 8039f4c:	f001 f8b7 	bl	803b0be <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8039f50:	68fb      	ldr	r3, [r7, #12]
 8039f52:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8039f56:	2b00      	cmp	r3, #0
 8039f58:	d03a      	beq.n	8039fd0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8039f5a:	68f8      	ldr	r0, [r7, #12]
 8039f5c:	f7ff fe42 	bl	8039be4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8039f60:	68fb      	ldr	r3, [r7, #12]
 8039f62:	2200      	movs	r2, #0
 8039f64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8039f68:	e032      	b.n	8039fd0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8039f6a:	7afb      	ldrb	r3, [r7, #11]
 8039f6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8039f70:	b2db      	uxtb	r3, r3
 8039f72:	4619      	mov	r1, r3
 8039f74:	68f8      	ldr	r0, [r7, #12]
 8039f76:	f000 f97f 	bl	803a278 <USBD_CoreFindEP>
 8039f7a:	4603      	mov	r3, r0
 8039f7c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8039f7e:	7dfb      	ldrb	r3, [r7, #23]
 8039f80:	2bff      	cmp	r3, #255	; 0xff
 8039f82:	d025      	beq.n	8039fd0 <USBD_LL_DataInStage+0x15a>
 8039f84:	7dfb      	ldrb	r3, [r7, #23]
 8039f86:	2b00      	cmp	r3, #0
 8039f88:	d122      	bne.n	8039fd0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8039f8a:	68fb      	ldr	r3, [r7, #12]
 8039f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039f90:	b2db      	uxtb	r3, r3
 8039f92:	2b03      	cmp	r3, #3
 8039f94:	d11c      	bne.n	8039fd0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8039f96:	7dfa      	ldrb	r2, [r7, #23]
 8039f98:	68fb      	ldr	r3, [r7, #12]
 8039f9a:	32ae      	adds	r2, #174	; 0xae
 8039f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039fa0:	695b      	ldr	r3, [r3, #20]
 8039fa2:	2b00      	cmp	r3, #0
 8039fa4:	d014      	beq.n	8039fd0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8039fa6:	7dfa      	ldrb	r2, [r7, #23]
 8039fa8:	68fb      	ldr	r3, [r7, #12]
 8039faa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8039fae:	7dfa      	ldrb	r2, [r7, #23]
 8039fb0:	68fb      	ldr	r3, [r7, #12]
 8039fb2:	32ae      	adds	r2, #174	; 0xae
 8039fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039fb8:	695b      	ldr	r3, [r3, #20]
 8039fba:	7afa      	ldrb	r2, [r7, #11]
 8039fbc:	4611      	mov	r1, r2
 8039fbe:	68f8      	ldr	r0, [r7, #12]
 8039fc0:	4798      	blx	r3
 8039fc2:	4603      	mov	r3, r0
 8039fc4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8039fc6:	7dbb      	ldrb	r3, [r7, #22]
 8039fc8:	2b00      	cmp	r3, #0
 8039fca:	d001      	beq.n	8039fd0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8039fcc:	7dbb      	ldrb	r3, [r7, #22]
 8039fce:	e000      	b.n	8039fd2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8039fd0:	2300      	movs	r3, #0
}
 8039fd2:	4618      	mov	r0, r3
 8039fd4:	3718      	adds	r7, #24
 8039fd6:	46bd      	mov	sp, r7
 8039fd8:	bd80      	pop	{r7, pc}

08039fda <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8039fda:	b580      	push	{r7, lr}
 8039fdc:	b084      	sub	sp, #16
 8039fde:	af00      	add	r7, sp, #0
 8039fe0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8039fe2:	2300      	movs	r3, #0
 8039fe4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8039fe6:	687b      	ldr	r3, [r7, #4]
 8039fe8:	2201      	movs	r2, #1
 8039fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8039fee:	687b      	ldr	r3, [r7, #4]
 8039ff0:	2200      	movs	r2, #0
 8039ff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8039ff6:	687b      	ldr	r3, [r7, #4]
 8039ff8:	2200      	movs	r2, #0
 8039ffa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8039ffc:	687b      	ldr	r3, [r7, #4]
 8039ffe:	2200      	movs	r2, #0
 803a000:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 803a004:	687b      	ldr	r3, [r7, #4]
 803a006:	2200      	movs	r2, #0
 803a008:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 803a00c:	687b      	ldr	r3, [r7, #4]
 803a00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a012:	2b00      	cmp	r3, #0
 803a014:	d014      	beq.n	803a040 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 803a016:	687b      	ldr	r3, [r7, #4]
 803a018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a01c:	685b      	ldr	r3, [r3, #4]
 803a01e:	2b00      	cmp	r3, #0
 803a020:	d00e      	beq.n	803a040 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 803a022:	687b      	ldr	r3, [r7, #4]
 803a024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a028:	685b      	ldr	r3, [r3, #4]
 803a02a:	687a      	ldr	r2, [r7, #4]
 803a02c:	6852      	ldr	r2, [r2, #4]
 803a02e:	b2d2      	uxtb	r2, r2
 803a030:	4611      	mov	r1, r2
 803a032:	6878      	ldr	r0, [r7, #4]
 803a034:	4798      	blx	r3
 803a036:	4603      	mov	r3, r0
 803a038:	2b00      	cmp	r3, #0
 803a03a:	d001      	beq.n	803a040 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 803a03c:	2303      	movs	r3, #3
 803a03e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803a040:	2340      	movs	r3, #64	; 0x40
 803a042:	2200      	movs	r2, #0
 803a044:	2100      	movs	r1, #0
 803a046:	6878      	ldr	r0, [r7, #4]
 803a048:	f001 fc05 	bl	803b856 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 803a04c:	687b      	ldr	r3, [r7, #4]
 803a04e:	2201      	movs	r2, #1
 803a050:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 803a054:	687b      	ldr	r3, [r7, #4]
 803a056:	2240      	movs	r2, #64	; 0x40
 803a058:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803a05c:	2340      	movs	r3, #64	; 0x40
 803a05e:	2200      	movs	r2, #0
 803a060:	2180      	movs	r1, #128	; 0x80
 803a062:	6878      	ldr	r0, [r7, #4]
 803a064:	f001 fbf7 	bl	803b856 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 803a068:	687b      	ldr	r3, [r7, #4]
 803a06a:	2201      	movs	r2, #1
 803a06c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 803a06e:	687b      	ldr	r3, [r7, #4]
 803a070:	2240      	movs	r2, #64	; 0x40
 803a072:	621a      	str	r2, [r3, #32]

  return ret;
 803a074:	7bfb      	ldrb	r3, [r7, #15]
}
 803a076:	4618      	mov	r0, r3
 803a078:	3710      	adds	r7, #16
 803a07a:	46bd      	mov	sp, r7
 803a07c:	bd80      	pop	{r7, pc}

0803a07e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 803a07e:	b480      	push	{r7}
 803a080:	b083      	sub	sp, #12
 803a082:	af00      	add	r7, sp, #0
 803a084:	6078      	str	r0, [r7, #4]
 803a086:	460b      	mov	r3, r1
 803a088:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 803a08a:	687b      	ldr	r3, [r7, #4]
 803a08c:	78fa      	ldrb	r2, [r7, #3]
 803a08e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 803a090:	2300      	movs	r3, #0
}
 803a092:	4618      	mov	r0, r3
 803a094:	370c      	adds	r7, #12
 803a096:	46bd      	mov	sp, r7
 803a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a09c:	4770      	bx	lr

0803a09e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 803a09e:	b480      	push	{r7}
 803a0a0:	b083      	sub	sp, #12
 803a0a2:	af00      	add	r7, sp, #0
 803a0a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 803a0a6:	687b      	ldr	r3, [r7, #4]
 803a0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a0ac:	b2da      	uxtb	r2, r3
 803a0ae:	687b      	ldr	r3, [r7, #4]
 803a0b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 803a0b4:	687b      	ldr	r3, [r7, #4]
 803a0b6:	2204      	movs	r2, #4
 803a0b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 803a0bc:	2300      	movs	r3, #0
}
 803a0be:	4618      	mov	r0, r3
 803a0c0:	370c      	adds	r7, #12
 803a0c2:	46bd      	mov	sp, r7
 803a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a0c8:	4770      	bx	lr

0803a0ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 803a0ca:	b480      	push	{r7}
 803a0cc:	b083      	sub	sp, #12
 803a0ce:	af00      	add	r7, sp, #0
 803a0d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 803a0d2:	687b      	ldr	r3, [r7, #4]
 803a0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a0d8:	b2db      	uxtb	r3, r3
 803a0da:	2b04      	cmp	r3, #4
 803a0dc:	d106      	bne.n	803a0ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 803a0de:	687b      	ldr	r3, [r7, #4]
 803a0e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 803a0e4:	b2da      	uxtb	r2, r3
 803a0e6:	687b      	ldr	r3, [r7, #4]
 803a0e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 803a0ec:	2300      	movs	r3, #0
}
 803a0ee:	4618      	mov	r0, r3
 803a0f0:	370c      	adds	r7, #12
 803a0f2:	46bd      	mov	sp, r7
 803a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a0f8:	4770      	bx	lr

0803a0fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 803a0fa:	b580      	push	{r7, lr}
 803a0fc:	b082      	sub	sp, #8
 803a0fe:	af00      	add	r7, sp, #0
 803a100:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a102:	687b      	ldr	r3, [r7, #4]
 803a104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a108:	b2db      	uxtb	r3, r3
 803a10a:	2b03      	cmp	r3, #3
 803a10c:	d110      	bne.n	803a130 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 803a10e:	687b      	ldr	r3, [r7, #4]
 803a110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a114:	2b00      	cmp	r3, #0
 803a116:	d00b      	beq.n	803a130 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 803a118:	687b      	ldr	r3, [r7, #4]
 803a11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a11e:	69db      	ldr	r3, [r3, #28]
 803a120:	2b00      	cmp	r3, #0
 803a122:	d005      	beq.n	803a130 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 803a124:	687b      	ldr	r3, [r7, #4]
 803a126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a12a:	69db      	ldr	r3, [r3, #28]
 803a12c:	6878      	ldr	r0, [r7, #4]
 803a12e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 803a130:	2300      	movs	r3, #0
}
 803a132:	4618      	mov	r0, r3
 803a134:	3708      	adds	r7, #8
 803a136:	46bd      	mov	sp, r7
 803a138:	bd80      	pop	{r7, pc}

0803a13a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 803a13a:	b580      	push	{r7, lr}
 803a13c:	b082      	sub	sp, #8
 803a13e:	af00      	add	r7, sp, #0
 803a140:	6078      	str	r0, [r7, #4]
 803a142:	460b      	mov	r3, r1
 803a144:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803a146:	687b      	ldr	r3, [r7, #4]
 803a148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a14c:	687b      	ldr	r3, [r7, #4]
 803a14e:	32ae      	adds	r2, #174	; 0xae
 803a150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a154:	2b00      	cmp	r3, #0
 803a156:	d101      	bne.n	803a15c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 803a158:	2303      	movs	r3, #3
 803a15a:	e01c      	b.n	803a196 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a15c:	687b      	ldr	r3, [r7, #4]
 803a15e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a162:	b2db      	uxtb	r3, r3
 803a164:	2b03      	cmp	r3, #3
 803a166:	d115      	bne.n	803a194 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 803a168:	687b      	ldr	r3, [r7, #4]
 803a16a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a16e:	687b      	ldr	r3, [r7, #4]
 803a170:	32ae      	adds	r2, #174	; 0xae
 803a172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a176:	6a1b      	ldr	r3, [r3, #32]
 803a178:	2b00      	cmp	r3, #0
 803a17a:	d00b      	beq.n	803a194 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 803a17c:	687b      	ldr	r3, [r7, #4]
 803a17e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a182:	687b      	ldr	r3, [r7, #4]
 803a184:	32ae      	adds	r2, #174	; 0xae
 803a186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a18a:	6a1b      	ldr	r3, [r3, #32]
 803a18c:	78fa      	ldrb	r2, [r7, #3]
 803a18e:	4611      	mov	r1, r2
 803a190:	6878      	ldr	r0, [r7, #4]
 803a192:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803a194:	2300      	movs	r3, #0
}
 803a196:	4618      	mov	r0, r3
 803a198:	3708      	adds	r7, #8
 803a19a:	46bd      	mov	sp, r7
 803a19c:	bd80      	pop	{r7, pc}

0803a19e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 803a19e:	b580      	push	{r7, lr}
 803a1a0:	b082      	sub	sp, #8
 803a1a2:	af00      	add	r7, sp, #0
 803a1a4:	6078      	str	r0, [r7, #4]
 803a1a6:	460b      	mov	r3, r1
 803a1a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803a1aa:	687b      	ldr	r3, [r7, #4]
 803a1ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a1b0:	687b      	ldr	r3, [r7, #4]
 803a1b2:	32ae      	adds	r2, #174	; 0xae
 803a1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a1b8:	2b00      	cmp	r3, #0
 803a1ba:	d101      	bne.n	803a1c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 803a1bc:	2303      	movs	r3, #3
 803a1be:	e01c      	b.n	803a1fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a1c0:	687b      	ldr	r3, [r7, #4]
 803a1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a1c6:	b2db      	uxtb	r3, r3
 803a1c8:	2b03      	cmp	r3, #3
 803a1ca:	d115      	bne.n	803a1f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 803a1cc:	687b      	ldr	r3, [r7, #4]
 803a1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a1d2:	687b      	ldr	r3, [r7, #4]
 803a1d4:	32ae      	adds	r2, #174	; 0xae
 803a1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a1dc:	2b00      	cmp	r3, #0
 803a1de:	d00b      	beq.n	803a1f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 803a1e0:	687b      	ldr	r3, [r7, #4]
 803a1e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a1e6:	687b      	ldr	r3, [r7, #4]
 803a1e8:	32ae      	adds	r2, #174	; 0xae
 803a1ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a1f0:	78fa      	ldrb	r2, [r7, #3]
 803a1f2:	4611      	mov	r1, r2
 803a1f4:	6878      	ldr	r0, [r7, #4]
 803a1f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803a1f8:	2300      	movs	r3, #0
}
 803a1fa:	4618      	mov	r0, r3
 803a1fc:	3708      	adds	r7, #8
 803a1fe:	46bd      	mov	sp, r7
 803a200:	bd80      	pop	{r7, pc}

0803a202 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 803a202:	b480      	push	{r7}
 803a204:	b083      	sub	sp, #12
 803a206:	af00      	add	r7, sp, #0
 803a208:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803a20a:	2300      	movs	r3, #0
}
 803a20c:	4618      	mov	r0, r3
 803a20e:	370c      	adds	r7, #12
 803a210:	46bd      	mov	sp, r7
 803a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a216:	4770      	bx	lr

0803a218 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 803a218:	b580      	push	{r7, lr}
 803a21a:	b084      	sub	sp, #16
 803a21c:	af00      	add	r7, sp, #0
 803a21e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 803a220:	2300      	movs	r3, #0
 803a222:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803a224:	687b      	ldr	r3, [r7, #4]
 803a226:	2201      	movs	r2, #1
 803a228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803a22c:	687b      	ldr	r3, [r7, #4]
 803a22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a232:	2b00      	cmp	r3, #0
 803a234:	d00e      	beq.n	803a254 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 803a236:	687b      	ldr	r3, [r7, #4]
 803a238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a23c:	685b      	ldr	r3, [r3, #4]
 803a23e:	687a      	ldr	r2, [r7, #4]
 803a240:	6852      	ldr	r2, [r2, #4]
 803a242:	b2d2      	uxtb	r2, r2
 803a244:	4611      	mov	r1, r2
 803a246:	6878      	ldr	r0, [r7, #4]
 803a248:	4798      	blx	r3
 803a24a:	4603      	mov	r3, r0
 803a24c:	2b00      	cmp	r3, #0
 803a24e:	d001      	beq.n	803a254 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 803a250:	2303      	movs	r3, #3
 803a252:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803a254:	7bfb      	ldrb	r3, [r7, #15]
}
 803a256:	4618      	mov	r0, r3
 803a258:	3710      	adds	r7, #16
 803a25a:	46bd      	mov	sp, r7
 803a25c:	bd80      	pop	{r7, pc}

0803a25e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803a25e:	b480      	push	{r7}
 803a260:	b083      	sub	sp, #12
 803a262:	af00      	add	r7, sp, #0
 803a264:	6078      	str	r0, [r7, #4]
 803a266:	460b      	mov	r3, r1
 803a268:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803a26a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803a26c:	4618      	mov	r0, r3
 803a26e:	370c      	adds	r7, #12
 803a270:	46bd      	mov	sp, r7
 803a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a276:	4770      	bx	lr

0803a278 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803a278:	b480      	push	{r7}
 803a27a:	b083      	sub	sp, #12
 803a27c:	af00      	add	r7, sp, #0
 803a27e:	6078      	str	r0, [r7, #4]
 803a280:	460b      	mov	r3, r1
 803a282:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803a284:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803a286:	4618      	mov	r0, r3
 803a288:	370c      	adds	r7, #12
 803a28a:	46bd      	mov	sp, r7
 803a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a290:	4770      	bx	lr

0803a292 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 803a292:	b580      	push	{r7, lr}
 803a294:	b086      	sub	sp, #24
 803a296:	af00      	add	r7, sp, #0
 803a298:	6078      	str	r0, [r7, #4]
 803a29a:	460b      	mov	r3, r1
 803a29c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 803a29e:	687b      	ldr	r3, [r7, #4]
 803a2a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 803a2a2:	687b      	ldr	r3, [r7, #4]
 803a2a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 803a2a6:	2300      	movs	r3, #0
 803a2a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 803a2aa:	68fb      	ldr	r3, [r7, #12]
 803a2ac:	885b      	ldrh	r3, [r3, #2]
 803a2ae:	b29a      	uxth	r2, r3
 803a2b0:	68fb      	ldr	r3, [r7, #12]
 803a2b2:	781b      	ldrb	r3, [r3, #0]
 803a2b4:	b29b      	uxth	r3, r3
 803a2b6:	429a      	cmp	r2, r3
 803a2b8:	d920      	bls.n	803a2fc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 803a2ba:	68fb      	ldr	r3, [r7, #12]
 803a2bc:	781b      	ldrb	r3, [r3, #0]
 803a2be:	b29b      	uxth	r3, r3
 803a2c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 803a2c2:	e013      	b.n	803a2ec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 803a2c4:	f107 030a 	add.w	r3, r7, #10
 803a2c8:	4619      	mov	r1, r3
 803a2ca:	6978      	ldr	r0, [r7, #20]
 803a2cc:	f000 f81b 	bl	803a306 <USBD_GetNextDesc>
 803a2d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 803a2d2:	697b      	ldr	r3, [r7, #20]
 803a2d4:	785b      	ldrb	r3, [r3, #1]
 803a2d6:	2b05      	cmp	r3, #5
 803a2d8:	d108      	bne.n	803a2ec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 803a2da:	697b      	ldr	r3, [r7, #20]
 803a2dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 803a2de:	693b      	ldr	r3, [r7, #16]
 803a2e0:	789b      	ldrb	r3, [r3, #2]
 803a2e2:	78fa      	ldrb	r2, [r7, #3]
 803a2e4:	429a      	cmp	r2, r3
 803a2e6:	d008      	beq.n	803a2fa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 803a2e8:	2300      	movs	r3, #0
 803a2ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 803a2ec:	68fb      	ldr	r3, [r7, #12]
 803a2ee:	885b      	ldrh	r3, [r3, #2]
 803a2f0:	b29a      	uxth	r2, r3
 803a2f2:	897b      	ldrh	r3, [r7, #10]
 803a2f4:	429a      	cmp	r2, r3
 803a2f6:	d8e5      	bhi.n	803a2c4 <USBD_GetEpDesc+0x32>
 803a2f8:	e000      	b.n	803a2fc <USBD_GetEpDesc+0x6a>
          break;
 803a2fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 803a2fc:	693b      	ldr	r3, [r7, #16]
}
 803a2fe:	4618      	mov	r0, r3
 803a300:	3718      	adds	r7, #24
 803a302:	46bd      	mov	sp, r7
 803a304:	bd80      	pop	{r7, pc}

0803a306 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 803a306:	b480      	push	{r7}
 803a308:	b085      	sub	sp, #20
 803a30a:	af00      	add	r7, sp, #0
 803a30c:	6078      	str	r0, [r7, #4]
 803a30e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 803a310:	687b      	ldr	r3, [r7, #4]
 803a312:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 803a314:	683b      	ldr	r3, [r7, #0]
 803a316:	881a      	ldrh	r2, [r3, #0]
 803a318:	68fb      	ldr	r3, [r7, #12]
 803a31a:	781b      	ldrb	r3, [r3, #0]
 803a31c:	b29b      	uxth	r3, r3
 803a31e:	4413      	add	r3, r2
 803a320:	b29a      	uxth	r2, r3
 803a322:	683b      	ldr	r3, [r7, #0]
 803a324:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 803a326:	68fb      	ldr	r3, [r7, #12]
 803a328:	781b      	ldrb	r3, [r3, #0]
 803a32a:	461a      	mov	r2, r3
 803a32c:	687b      	ldr	r3, [r7, #4]
 803a32e:	4413      	add	r3, r2
 803a330:	60fb      	str	r3, [r7, #12]

  return (pnext);
 803a332:	68fb      	ldr	r3, [r7, #12]
}
 803a334:	4618      	mov	r0, r3
 803a336:	3714      	adds	r7, #20
 803a338:	46bd      	mov	sp, r7
 803a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a33e:	4770      	bx	lr

0803a340 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 803a340:	b480      	push	{r7}
 803a342:	b087      	sub	sp, #28
 803a344:	af00      	add	r7, sp, #0
 803a346:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 803a348:	687b      	ldr	r3, [r7, #4]
 803a34a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 803a34c:	697b      	ldr	r3, [r7, #20]
 803a34e:	781b      	ldrb	r3, [r3, #0]
 803a350:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 803a352:	697b      	ldr	r3, [r7, #20]
 803a354:	3301      	adds	r3, #1
 803a356:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 803a358:	697b      	ldr	r3, [r7, #20]
 803a35a:	781b      	ldrb	r3, [r3, #0]
 803a35c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 803a35e:	8a3b      	ldrh	r3, [r7, #16]
 803a360:	021b      	lsls	r3, r3, #8
 803a362:	b21a      	sxth	r2, r3
 803a364:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803a368:	4313      	orrs	r3, r2
 803a36a:	b21b      	sxth	r3, r3
 803a36c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 803a36e:	89fb      	ldrh	r3, [r7, #14]
}
 803a370:	4618      	mov	r0, r3
 803a372:	371c      	adds	r7, #28
 803a374:	46bd      	mov	sp, r7
 803a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a37a:	4770      	bx	lr

0803a37c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a37c:	b580      	push	{r7, lr}
 803a37e:	b084      	sub	sp, #16
 803a380:	af00      	add	r7, sp, #0
 803a382:	6078      	str	r0, [r7, #4]
 803a384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803a386:	2300      	movs	r3, #0
 803a388:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a38a:	683b      	ldr	r3, [r7, #0]
 803a38c:	781b      	ldrb	r3, [r3, #0]
 803a38e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a392:	2b40      	cmp	r3, #64	; 0x40
 803a394:	d005      	beq.n	803a3a2 <USBD_StdDevReq+0x26>
 803a396:	2b40      	cmp	r3, #64	; 0x40
 803a398:	d857      	bhi.n	803a44a <USBD_StdDevReq+0xce>
 803a39a:	2b00      	cmp	r3, #0
 803a39c:	d00f      	beq.n	803a3be <USBD_StdDevReq+0x42>
 803a39e:	2b20      	cmp	r3, #32
 803a3a0:	d153      	bne.n	803a44a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 803a3a2:	687b      	ldr	r3, [r7, #4]
 803a3a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a3a8:	687b      	ldr	r3, [r7, #4]
 803a3aa:	32ae      	adds	r2, #174	; 0xae
 803a3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a3b0:	689b      	ldr	r3, [r3, #8]
 803a3b2:	6839      	ldr	r1, [r7, #0]
 803a3b4:	6878      	ldr	r0, [r7, #4]
 803a3b6:	4798      	blx	r3
 803a3b8:	4603      	mov	r3, r0
 803a3ba:	73fb      	strb	r3, [r7, #15]
      break;
 803a3bc:	e04a      	b.n	803a454 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803a3be:	683b      	ldr	r3, [r7, #0]
 803a3c0:	785b      	ldrb	r3, [r3, #1]
 803a3c2:	2b09      	cmp	r3, #9
 803a3c4:	d83b      	bhi.n	803a43e <USBD_StdDevReq+0xc2>
 803a3c6:	a201      	add	r2, pc, #4	; (adr r2, 803a3cc <USBD_StdDevReq+0x50>)
 803a3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a3cc:	0803a421 	.word	0x0803a421
 803a3d0:	0803a435 	.word	0x0803a435
 803a3d4:	0803a43f 	.word	0x0803a43f
 803a3d8:	0803a42b 	.word	0x0803a42b
 803a3dc:	0803a43f 	.word	0x0803a43f
 803a3e0:	0803a3ff 	.word	0x0803a3ff
 803a3e4:	0803a3f5 	.word	0x0803a3f5
 803a3e8:	0803a43f 	.word	0x0803a43f
 803a3ec:	0803a417 	.word	0x0803a417
 803a3f0:	0803a409 	.word	0x0803a409
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 803a3f4:	6839      	ldr	r1, [r7, #0]
 803a3f6:	6878      	ldr	r0, [r7, #4]
 803a3f8:	f000 fa3c 	bl	803a874 <USBD_GetDescriptor>
          break;
 803a3fc:	e024      	b.n	803a448 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 803a3fe:	6839      	ldr	r1, [r7, #0]
 803a400:	6878      	ldr	r0, [r7, #4]
 803a402:	f000 fba1 	bl	803ab48 <USBD_SetAddress>
          break;
 803a406:	e01f      	b.n	803a448 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 803a408:	6839      	ldr	r1, [r7, #0]
 803a40a:	6878      	ldr	r0, [r7, #4]
 803a40c:	f000 fbe0 	bl	803abd0 <USBD_SetConfig>
 803a410:	4603      	mov	r3, r0
 803a412:	73fb      	strb	r3, [r7, #15]
          break;
 803a414:	e018      	b.n	803a448 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 803a416:	6839      	ldr	r1, [r7, #0]
 803a418:	6878      	ldr	r0, [r7, #4]
 803a41a:	f000 fc83 	bl	803ad24 <USBD_GetConfig>
          break;
 803a41e:	e013      	b.n	803a448 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 803a420:	6839      	ldr	r1, [r7, #0]
 803a422:	6878      	ldr	r0, [r7, #4]
 803a424:	f000 fcb4 	bl	803ad90 <USBD_GetStatus>
          break;
 803a428:	e00e      	b.n	803a448 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 803a42a:	6839      	ldr	r1, [r7, #0]
 803a42c:	6878      	ldr	r0, [r7, #4]
 803a42e:	f000 fce3 	bl	803adf8 <USBD_SetFeature>
          break;
 803a432:	e009      	b.n	803a448 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 803a434:	6839      	ldr	r1, [r7, #0]
 803a436:	6878      	ldr	r0, [r7, #4]
 803a438:	f000 fd07 	bl	803ae4a <USBD_ClrFeature>
          break;
 803a43c:	e004      	b.n	803a448 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 803a43e:	6839      	ldr	r1, [r7, #0]
 803a440:	6878      	ldr	r0, [r7, #4]
 803a442:	f000 fd5e 	bl	803af02 <USBD_CtlError>
          break;
 803a446:	bf00      	nop
      }
      break;
 803a448:	e004      	b.n	803a454 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 803a44a:	6839      	ldr	r1, [r7, #0]
 803a44c:	6878      	ldr	r0, [r7, #4]
 803a44e:	f000 fd58 	bl	803af02 <USBD_CtlError>
      break;
 803a452:	bf00      	nop
  }

  return ret;
 803a454:	7bfb      	ldrb	r3, [r7, #15]
}
 803a456:	4618      	mov	r0, r3
 803a458:	3710      	adds	r7, #16
 803a45a:	46bd      	mov	sp, r7
 803a45c:	bd80      	pop	{r7, pc}
 803a45e:	bf00      	nop

0803a460 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a460:	b580      	push	{r7, lr}
 803a462:	b084      	sub	sp, #16
 803a464:	af00      	add	r7, sp, #0
 803a466:	6078      	str	r0, [r7, #4]
 803a468:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803a46a:	2300      	movs	r3, #0
 803a46c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a46e:	683b      	ldr	r3, [r7, #0]
 803a470:	781b      	ldrb	r3, [r3, #0]
 803a472:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a476:	2b40      	cmp	r3, #64	; 0x40
 803a478:	d005      	beq.n	803a486 <USBD_StdItfReq+0x26>
 803a47a:	2b40      	cmp	r3, #64	; 0x40
 803a47c:	d852      	bhi.n	803a524 <USBD_StdItfReq+0xc4>
 803a47e:	2b00      	cmp	r3, #0
 803a480:	d001      	beq.n	803a486 <USBD_StdItfReq+0x26>
 803a482:	2b20      	cmp	r3, #32
 803a484:	d14e      	bne.n	803a524 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 803a486:	687b      	ldr	r3, [r7, #4]
 803a488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a48c:	b2db      	uxtb	r3, r3
 803a48e:	3b01      	subs	r3, #1
 803a490:	2b02      	cmp	r3, #2
 803a492:	d840      	bhi.n	803a516 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 803a494:	683b      	ldr	r3, [r7, #0]
 803a496:	889b      	ldrh	r3, [r3, #4]
 803a498:	b2db      	uxtb	r3, r3
 803a49a:	2b01      	cmp	r3, #1
 803a49c:	d836      	bhi.n	803a50c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 803a49e:	683b      	ldr	r3, [r7, #0]
 803a4a0:	889b      	ldrh	r3, [r3, #4]
 803a4a2:	b2db      	uxtb	r3, r3
 803a4a4:	4619      	mov	r1, r3
 803a4a6:	6878      	ldr	r0, [r7, #4]
 803a4a8:	f7ff fed9 	bl	803a25e <USBD_CoreFindIF>
 803a4ac:	4603      	mov	r3, r0
 803a4ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a4b0:	7bbb      	ldrb	r3, [r7, #14]
 803a4b2:	2bff      	cmp	r3, #255	; 0xff
 803a4b4:	d01d      	beq.n	803a4f2 <USBD_StdItfReq+0x92>
 803a4b6:	7bbb      	ldrb	r3, [r7, #14]
 803a4b8:	2b00      	cmp	r3, #0
 803a4ba:	d11a      	bne.n	803a4f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 803a4bc:	7bba      	ldrb	r2, [r7, #14]
 803a4be:	687b      	ldr	r3, [r7, #4]
 803a4c0:	32ae      	adds	r2, #174	; 0xae
 803a4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a4c6:	689b      	ldr	r3, [r3, #8]
 803a4c8:	2b00      	cmp	r3, #0
 803a4ca:	d00f      	beq.n	803a4ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 803a4cc:	7bba      	ldrb	r2, [r7, #14]
 803a4ce:	687b      	ldr	r3, [r7, #4]
 803a4d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803a4d4:	7bba      	ldrb	r2, [r7, #14]
 803a4d6:	687b      	ldr	r3, [r7, #4]
 803a4d8:	32ae      	adds	r2, #174	; 0xae
 803a4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a4de:	689b      	ldr	r3, [r3, #8]
 803a4e0:	6839      	ldr	r1, [r7, #0]
 803a4e2:	6878      	ldr	r0, [r7, #4]
 803a4e4:	4798      	blx	r3
 803a4e6:	4603      	mov	r3, r0
 803a4e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803a4ea:	e004      	b.n	803a4f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 803a4ec:	2303      	movs	r3, #3
 803a4ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803a4f0:	e001      	b.n	803a4f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 803a4f2:	2303      	movs	r3, #3
 803a4f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 803a4f6:	683b      	ldr	r3, [r7, #0]
 803a4f8:	88db      	ldrh	r3, [r3, #6]
 803a4fa:	2b00      	cmp	r3, #0
 803a4fc:	d110      	bne.n	803a520 <USBD_StdItfReq+0xc0>
 803a4fe:	7bfb      	ldrb	r3, [r7, #15]
 803a500:	2b00      	cmp	r3, #0
 803a502:	d10d      	bne.n	803a520 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 803a504:	6878      	ldr	r0, [r7, #4]
 803a506:	f000 fdc7 	bl	803b098 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 803a50a:	e009      	b.n	803a520 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 803a50c:	6839      	ldr	r1, [r7, #0]
 803a50e:	6878      	ldr	r0, [r7, #4]
 803a510:	f000 fcf7 	bl	803af02 <USBD_CtlError>
          break;
 803a514:	e004      	b.n	803a520 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 803a516:	6839      	ldr	r1, [r7, #0]
 803a518:	6878      	ldr	r0, [r7, #4]
 803a51a:	f000 fcf2 	bl	803af02 <USBD_CtlError>
          break;
 803a51e:	e000      	b.n	803a522 <USBD_StdItfReq+0xc2>
          break;
 803a520:	bf00      	nop
      }
      break;
 803a522:	e004      	b.n	803a52e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 803a524:	6839      	ldr	r1, [r7, #0]
 803a526:	6878      	ldr	r0, [r7, #4]
 803a528:	f000 fceb 	bl	803af02 <USBD_CtlError>
      break;
 803a52c:	bf00      	nop
  }

  return ret;
 803a52e:	7bfb      	ldrb	r3, [r7, #15]
}
 803a530:	4618      	mov	r0, r3
 803a532:	3710      	adds	r7, #16
 803a534:	46bd      	mov	sp, r7
 803a536:	bd80      	pop	{r7, pc}

0803a538 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a538:	b580      	push	{r7, lr}
 803a53a:	b084      	sub	sp, #16
 803a53c:	af00      	add	r7, sp, #0
 803a53e:	6078      	str	r0, [r7, #4]
 803a540:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 803a542:	2300      	movs	r3, #0
 803a544:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 803a546:	683b      	ldr	r3, [r7, #0]
 803a548:	889b      	ldrh	r3, [r3, #4]
 803a54a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a54c:	683b      	ldr	r3, [r7, #0]
 803a54e:	781b      	ldrb	r3, [r3, #0]
 803a550:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a554:	2b40      	cmp	r3, #64	; 0x40
 803a556:	d007      	beq.n	803a568 <USBD_StdEPReq+0x30>
 803a558:	2b40      	cmp	r3, #64	; 0x40
 803a55a:	f200 817f 	bhi.w	803a85c <USBD_StdEPReq+0x324>
 803a55e:	2b00      	cmp	r3, #0
 803a560:	d02a      	beq.n	803a5b8 <USBD_StdEPReq+0x80>
 803a562:	2b20      	cmp	r3, #32
 803a564:	f040 817a 	bne.w	803a85c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 803a568:	7bbb      	ldrb	r3, [r7, #14]
 803a56a:	4619      	mov	r1, r3
 803a56c:	6878      	ldr	r0, [r7, #4]
 803a56e:	f7ff fe83 	bl	803a278 <USBD_CoreFindEP>
 803a572:	4603      	mov	r3, r0
 803a574:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a576:	7b7b      	ldrb	r3, [r7, #13]
 803a578:	2bff      	cmp	r3, #255	; 0xff
 803a57a:	f000 8174 	beq.w	803a866 <USBD_StdEPReq+0x32e>
 803a57e:	7b7b      	ldrb	r3, [r7, #13]
 803a580:	2b00      	cmp	r3, #0
 803a582:	f040 8170 	bne.w	803a866 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 803a586:	7b7a      	ldrb	r2, [r7, #13]
 803a588:	687b      	ldr	r3, [r7, #4]
 803a58a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 803a58e:	7b7a      	ldrb	r2, [r7, #13]
 803a590:	687b      	ldr	r3, [r7, #4]
 803a592:	32ae      	adds	r2, #174	; 0xae
 803a594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a598:	689b      	ldr	r3, [r3, #8]
 803a59a:	2b00      	cmp	r3, #0
 803a59c:	f000 8163 	beq.w	803a866 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 803a5a0:	7b7a      	ldrb	r2, [r7, #13]
 803a5a2:	687b      	ldr	r3, [r7, #4]
 803a5a4:	32ae      	adds	r2, #174	; 0xae
 803a5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a5aa:	689b      	ldr	r3, [r3, #8]
 803a5ac:	6839      	ldr	r1, [r7, #0]
 803a5ae:	6878      	ldr	r0, [r7, #4]
 803a5b0:	4798      	blx	r3
 803a5b2:	4603      	mov	r3, r0
 803a5b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 803a5b6:	e156      	b.n	803a866 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803a5b8:	683b      	ldr	r3, [r7, #0]
 803a5ba:	785b      	ldrb	r3, [r3, #1]
 803a5bc:	2b03      	cmp	r3, #3
 803a5be:	d008      	beq.n	803a5d2 <USBD_StdEPReq+0x9a>
 803a5c0:	2b03      	cmp	r3, #3
 803a5c2:	f300 8145 	bgt.w	803a850 <USBD_StdEPReq+0x318>
 803a5c6:	2b00      	cmp	r3, #0
 803a5c8:	f000 809b 	beq.w	803a702 <USBD_StdEPReq+0x1ca>
 803a5cc:	2b01      	cmp	r3, #1
 803a5ce:	d03c      	beq.n	803a64a <USBD_StdEPReq+0x112>
 803a5d0:	e13e      	b.n	803a850 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 803a5d2:	687b      	ldr	r3, [r7, #4]
 803a5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a5d8:	b2db      	uxtb	r3, r3
 803a5da:	2b02      	cmp	r3, #2
 803a5dc:	d002      	beq.n	803a5e4 <USBD_StdEPReq+0xac>
 803a5de:	2b03      	cmp	r3, #3
 803a5e0:	d016      	beq.n	803a610 <USBD_StdEPReq+0xd8>
 803a5e2:	e02c      	b.n	803a63e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a5e4:	7bbb      	ldrb	r3, [r7, #14]
 803a5e6:	2b00      	cmp	r3, #0
 803a5e8:	d00d      	beq.n	803a606 <USBD_StdEPReq+0xce>
 803a5ea:	7bbb      	ldrb	r3, [r7, #14]
 803a5ec:	2b80      	cmp	r3, #128	; 0x80
 803a5ee:	d00a      	beq.n	803a606 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803a5f0:	7bbb      	ldrb	r3, [r7, #14]
 803a5f2:	4619      	mov	r1, r3
 803a5f4:	6878      	ldr	r0, [r7, #4]
 803a5f6:	f001 f973 	bl	803b8e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803a5fa:	2180      	movs	r1, #128	; 0x80
 803a5fc:	6878      	ldr	r0, [r7, #4]
 803a5fe:	f001 f96f 	bl	803b8e0 <USBD_LL_StallEP>
 803a602:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803a604:	e020      	b.n	803a648 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 803a606:	6839      	ldr	r1, [r7, #0]
 803a608:	6878      	ldr	r0, [r7, #4]
 803a60a:	f000 fc7a 	bl	803af02 <USBD_CtlError>
              break;
 803a60e:	e01b      	b.n	803a648 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803a610:	683b      	ldr	r3, [r7, #0]
 803a612:	885b      	ldrh	r3, [r3, #2]
 803a614:	2b00      	cmp	r3, #0
 803a616:	d10e      	bne.n	803a636 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 803a618:	7bbb      	ldrb	r3, [r7, #14]
 803a61a:	2b00      	cmp	r3, #0
 803a61c:	d00b      	beq.n	803a636 <USBD_StdEPReq+0xfe>
 803a61e:	7bbb      	ldrb	r3, [r7, #14]
 803a620:	2b80      	cmp	r3, #128	; 0x80
 803a622:	d008      	beq.n	803a636 <USBD_StdEPReq+0xfe>
 803a624:	683b      	ldr	r3, [r7, #0]
 803a626:	88db      	ldrh	r3, [r3, #6]
 803a628:	2b00      	cmp	r3, #0
 803a62a:	d104      	bne.n	803a636 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 803a62c:	7bbb      	ldrb	r3, [r7, #14]
 803a62e:	4619      	mov	r1, r3
 803a630:	6878      	ldr	r0, [r7, #4]
 803a632:	f001 f955 	bl	803b8e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 803a636:	6878      	ldr	r0, [r7, #4]
 803a638:	f000 fd2e 	bl	803b098 <USBD_CtlSendStatus>

              break;
 803a63c:	e004      	b.n	803a648 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 803a63e:	6839      	ldr	r1, [r7, #0]
 803a640:	6878      	ldr	r0, [r7, #4]
 803a642:	f000 fc5e 	bl	803af02 <USBD_CtlError>
              break;
 803a646:	bf00      	nop
          }
          break;
 803a648:	e107      	b.n	803a85a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 803a64a:	687b      	ldr	r3, [r7, #4]
 803a64c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a650:	b2db      	uxtb	r3, r3
 803a652:	2b02      	cmp	r3, #2
 803a654:	d002      	beq.n	803a65c <USBD_StdEPReq+0x124>
 803a656:	2b03      	cmp	r3, #3
 803a658:	d016      	beq.n	803a688 <USBD_StdEPReq+0x150>
 803a65a:	e04b      	b.n	803a6f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a65c:	7bbb      	ldrb	r3, [r7, #14]
 803a65e:	2b00      	cmp	r3, #0
 803a660:	d00d      	beq.n	803a67e <USBD_StdEPReq+0x146>
 803a662:	7bbb      	ldrb	r3, [r7, #14]
 803a664:	2b80      	cmp	r3, #128	; 0x80
 803a666:	d00a      	beq.n	803a67e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803a668:	7bbb      	ldrb	r3, [r7, #14]
 803a66a:	4619      	mov	r1, r3
 803a66c:	6878      	ldr	r0, [r7, #4]
 803a66e:	f001 f937 	bl	803b8e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803a672:	2180      	movs	r1, #128	; 0x80
 803a674:	6878      	ldr	r0, [r7, #4]
 803a676:	f001 f933 	bl	803b8e0 <USBD_LL_StallEP>
 803a67a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803a67c:	e040      	b.n	803a700 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 803a67e:	6839      	ldr	r1, [r7, #0]
 803a680:	6878      	ldr	r0, [r7, #4]
 803a682:	f000 fc3e 	bl	803af02 <USBD_CtlError>
              break;
 803a686:	e03b      	b.n	803a700 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803a688:	683b      	ldr	r3, [r7, #0]
 803a68a:	885b      	ldrh	r3, [r3, #2]
 803a68c:	2b00      	cmp	r3, #0
 803a68e:	d136      	bne.n	803a6fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 803a690:	7bbb      	ldrb	r3, [r7, #14]
 803a692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803a696:	2b00      	cmp	r3, #0
 803a698:	d004      	beq.n	803a6a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 803a69a:	7bbb      	ldrb	r3, [r7, #14]
 803a69c:	4619      	mov	r1, r3
 803a69e:	6878      	ldr	r0, [r7, #4]
 803a6a0:	f001 f93d 	bl	803b91e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 803a6a4:	6878      	ldr	r0, [r7, #4]
 803a6a6:	f000 fcf7 	bl	803b098 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 803a6aa:	7bbb      	ldrb	r3, [r7, #14]
 803a6ac:	4619      	mov	r1, r3
 803a6ae:	6878      	ldr	r0, [r7, #4]
 803a6b0:	f7ff fde2 	bl	803a278 <USBD_CoreFindEP>
 803a6b4:	4603      	mov	r3, r0
 803a6b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a6b8:	7b7b      	ldrb	r3, [r7, #13]
 803a6ba:	2bff      	cmp	r3, #255	; 0xff
 803a6bc:	d01f      	beq.n	803a6fe <USBD_StdEPReq+0x1c6>
 803a6be:	7b7b      	ldrb	r3, [r7, #13]
 803a6c0:	2b00      	cmp	r3, #0
 803a6c2:	d11c      	bne.n	803a6fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 803a6c4:	7b7a      	ldrb	r2, [r7, #13]
 803a6c6:	687b      	ldr	r3, [r7, #4]
 803a6c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 803a6cc:	7b7a      	ldrb	r2, [r7, #13]
 803a6ce:	687b      	ldr	r3, [r7, #4]
 803a6d0:	32ae      	adds	r2, #174	; 0xae
 803a6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a6d6:	689b      	ldr	r3, [r3, #8]
 803a6d8:	2b00      	cmp	r3, #0
 803a6da:	d010      	beq.n	803a6fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803a6dc:	7b7a      	ldrb	r2, [r7, #13]
 803a6de:	687b      	ldr	r3, [r7, #4]
 803a6e0:	32ae      	adds	r2, #174	; 0xae
 803a6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a6e6:	689b      	ldr	r3, [r3, #8]
 803a6e8:	6839      	ldr	r1, [r7, #0]
 803a6ea:	6878      	ldr	r0, [r7, #4]
 803a6ec:	4798      	blx	r3
 803a6ee:	4603      	mov	r3, r0
 803a6f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 803a6f2:	e004      	b.n	803a6fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 803a6f4:	6839      	ldr	r1, [r7, #0]
 803a6f6:	6878      	ldr	r0, [r7, #4]
 803a6f8:	f000 fc03 	bl	803af02 <USBD_CtlError>
              break;
 803a6fc:	e000      	b.n	803a700 <USBD_StdEPReq+0x1c8>
              break;
 803a6fe:	bf00      	nop
          }
          break;
 803a700:	e0ab      	b.n	803a85a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 803a702:	687b      	ldr	r3, [r7, #4]
 803a704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a708:	b2db      	uxtb	r3, r3
 803a70a:	2b02      	cmp	r3, #2
 803a70c:	d002      	beq.n	803a714 <USBD_StdEPReq+0x1dc>
 803a70e:	2b03      	cmp	r3, #3
 803a710:	d032      	beq.n	803a778 <USBD_StdEPReq+0x240>
 803a712:	e097      	b.n	803a844 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a714:	7bbb      	ldrb	r3, [r7, #14]
 803a716:	2b00      	cmp	r3, #0
 803a718:	d007      	beq.n	803a72a <USBD_StdEPReq+0x1f2>
 803a71a:	7bbb      	ldrb	r3, [r7, #14]
 803a71c:	2b80      	cmp	r3, #128	; 0x80
 803a71e:	d004      	beq.n	803a72a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 803a720:	6839      	ldr	r1, [r7, #0]
 803a722:	6878      	ldr	r0, [r7, #4]
 803a724:	f000 fbed 	bl	803af02 <USBD_CtlError>
                break;
 803a728:	e091      	b.n	803a84e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a72a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a72e:	2b00      	cmp	r3, #0
 803a730:	da0b      	bge.n	803a74a <USBD_StdEPReq+0x212>
 803a732:	7bbb      	ldrb	r3, [r7, #14]
 803a734:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803a738:	4613      	mov	r3, r2
 803a73a:	009b      	lsls	r3, r3, #2
 803a73c:	4413      	add	r3, r2
 803a73e:	009b      	lsls	r3, r3, #2
 803a740:	3310      	adds	r3, #16
 803a742:	687a      	ldr	r2, [r7, #4]
 803a744:	4413      	add	r3, r2
 803a746:	3304      	adds	r3, #4
 803a748:	e00b      	b.n	803a762 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803a74a:	7bbb      	ldrb	r3, [r7, #14]
 803a74c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a750:	4613      	mov	r3, r2
 803a752:	009b      	lsls	r3, r3, #2
 803a754:	4413      	add	r3, r2
 803a756:	009b      	lsls	r3, r3, #2
 803a758:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803a75c:	687a      	ldr	r2, [r7, #4]
 803a75e:	4413      	add	r3, r2
 803a760:	3304      	adds	r3, #4
 803a762:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 803a764:	68bb      	ldr	r3, [r7, #8]
 803a766:	2200      	movs	r2, #0
 803a768:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803a76a:	68bb      	ldr	r3, [r7, #8]
 803a76c:	2202      	movs	r2, #2
 803a76e:	4619      	mov	r1, r3
 803a770:	6878      	ldr	r0, [r7, #4]
 803a772:	f000 fc37 	bl	803afe4 <USBD_CtlSendData>
              break;
 803a776:	e06a      	b.n	803a84e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 803a778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a77c:	2b00      	cmp	r3, #0
 803a77e:	da11      	bge.n	803a7a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 803a780:	7bbb      	ldrb	r3, [r7, #14]
 803a782:	f003 020f 	and.w	r2, r3, #15
 803a786:	6879      	ldr	r1, [r7, #4]
 803a788:	4613      	mov	r3, r2
 803a78a:	009b      	lsls	r3, r3, #2
 803a78c:	4413      	add	r3, r2
 803a78e:	009b      	lsls	r3, r3, #2
 803a790:	440b      	add	r3, r1
 803a792:	3324      	adds	r3, #36	; 0x24
 803a794:	881b      	ldrh	r3, [r3, #0]
 803a796:	2b00      	cmp	r3, #0
 803a798:	d117      	bne.n	803a7ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803a79a:	6839      	ldr	r1, [r7, #0]
 803a79c:	6878      	ldr	r0, [r7, #4]
 803a79e:	f000 fbb0 	bl	803af02 <USBD_CtlError>
                  break;
 803a7a2:	e054      	b.n	803a84e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 803a7a4:	7bbb      	ldrb	r3, [r7, #14]
 803a7a6:	f003 020f 	and.w	r2, r3, #15
 803a7aa:	6879      	ldr	r1, [r7, #4]
 803a7ac:	4613      	mov	r3, r2
 803a7ae:	009b      	lsls	r3, r3, #2
 803a7b0:	4413      	add	r3, r2
 803a7b2:	009b      	lsls	r3, r3, #2
 803a7b4:	440b      	add	r3, r1
 803a7b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803a7ba:	881b      	ldrh	r3, [r3, #0]
 803a7bc:	2b00      	cmp	r3, #0
 803a7be:	d104      	bne.n	803a7ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803a7c0:	6839      	ldr	r1, [r7, #0]
 803a7c2:	6878      	ldr	r0, [r7, #4]
 803a7c4:	f000 fb9d 	bl	803af02 <USBD_CtlError>
                  break;
 803a7c8:	e041      	b.n	803a84e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a7ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a7ce:	2b00      	cmp	r3, #0
 803a7d0:	da0b      	bge.n	803a7ea <USBD_StdEPReq+0x2b2>
 803a7d2:	7bbb      	ldrb	r3, [r7, #14]
 803a7d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803a7d8:	4613      	mov	r3, r2
 803a7da:	009b      	lsls	r3, r3, #2
 803a7dc:	4413      	add	r3, r2
 803a7de:	009b      	lsls	r3, r3, #2
 803a7e0:	3310      	adds	r3, #16
 803a7e2:	687a      	ldr	r2, [r7, #4]
 803a7e4:	4413      	add	r3, r2
 803a7e6:	3304      	adds	r3, #4
 803a7e8:	e00b      	b.n	803a802 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803a7ea:	7bbb      	ldrb	r3, [r7, #14]
 803a7ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a7f0:	4613      	mov	r3, r2
 803a7f2:	009b      	lsls	r3, r3, #2
 803a7f4:	4413      	add	r3, r2
 803a7f6:	009b      	lsls	r3, r3, #2
 803a7f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803a7fc:	687a      	ldr	r2, [r7, #4]
 803a7fe:	4413      	add	r3, r2
 803a800:	3304      	adds	r3, #4
 803a802:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 803a804:	7bbb      	ldrb	r3, [r7, #14]
 803a806:	2b00      	cmp	r3, #0
 803a808:	d002      	beq.n	803a810 <USBD_StdEPReq+0x2d8>
 803a80a:	7bbb      	ldrb	r3, [r7, #14]
 803a80c:	2b80      	cmp	r3, #128	; 0x80
 803a80e:	d103      	bne.n	803a818 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 803a810:	68bb      	ldr	r3, [r7, #8]
 803a812:	2200      	movs	r2, #0
 803a814:	601a      	str	r2, [r3, #0]
 803a816:	e00e      	b.n	803a836 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 803a818:	7bbb      	ldrb	r3, [r7, #14]
 803a81a:	4619      	mov	r1, r3
 803a81c:	6878      	ldr	r0, [r7, #4]
 803a81e:	f001 f89d 	bl	803b95c <USBD_LL_IsStallEP>
 803a822:	4603      	mov	r3, r0
 803a824:	2b00      	cmp	r3, #0
 803a826:	d003      	beq.n	803a830 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 803a828:	68bb      	ldr	r3, [r7, #8]
 803a82a:	2201      	movs	r2, #1
 803a82c:	601a      	str	r2, [r3, #0]
 803a82e:	e002      	b.n	803a836 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 803a830:	68bb      	ldr	r3, [r7, #8]
 803a832:	2200      	movs	r2, #0
 803a834:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803a836:	68bb      	ldr	r3, [r7, #8]
 803a838:	2202      	movs	r2, #2
 803a83a:	4619      	mov	r1, r3
 803a83c:	6878      	ldr	r0, [r7, #4]
 803a83e:	f000 fbd1 	bl	803afe4 <USBD_CtlSendData>
              break;
 803a842:	e004      	b.n	803a84e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 803a844:	6839      	ldr	r1, [r7, #0]
 803a846:	6878      	ldr	r0, [r7, #4]
 803a848:	f000 fb5b 	bl	803af02 <USBD_CtlError>
              break;
 803a84c:	bf00      	nop
          }
          break;
 803a84e:	e004      	b.n	803a85a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 803a850:	6839      	ldr	r1, [r7, #0]
 803a852:	6878      	ldr	r0, [r7, #4]
 803a854:	f000 fb55 	bl	803af02 <USBD_CtlError>
          break;
 803a858:	bf00      	nop
      }
      break;
 803a85a:	e005      	b.n	803a868 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 803a85c:	6839      	ldr	r1, [r7, #0]
 803a85e:	6878      	ldr	r0, [r7, #4]
 803a860:	f000 fb4f 	bl	803af02 <USBD_CtlError>
      break;
 803a864:	e000      	b.n	803a868 <USBD_StdEPReq+0x330>
      break;
 803a866:	bf00      	nop
  }

  return ret;
 803a868:	7bfb      	ldrb	r3, [r7, #15]
}
 803a86a:	4618      	mov	r0, r3
 803a86c:	3710      	adds	r7, #16
 803a86e:	46bd      	mov	sp, r7
 803a870:	bd80      	pop	{r7, pc}
	...

0803a874 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a874:	b580      	push	{r7, lr}
 803a876:	b084      	sub	sp, #16
 803a878:	af00      	add	r7, sp, #0
 803a87a:	6078      	str	r0, [r7, #4]
 803a87c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803a87e:	2300      	movs	r3, #0
 803a880:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 803a882:	2300      	movs	r3, #0
 803a884:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 803a886:	2300      	movs	r3, #0
 803a888:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 803a88a:	683b      	ldr	r3, [r7, #0]
 803a88c:	885b      	ldrh	r3, [r3, #2]
 803a88e:	0a1b      	lsrs	r3, r3, #8
 803a890:	b29b      	uxth	r3, r3
 803a892:	3b01      	subs	r3, #1
 803a894:	2b06      	cmp	r3, #6
 803a896:	f200 8128 	bhi.w	803aaea <USBD_GetDescriptor+0x276>
 803a89a:	a201      	add	r2, pc, #4	; (adr r2, 803a8a0 <USBD_GetDescriptor+0x2c>)
 803a89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a8a0:	0803a8bd 	.word	0x0803a8bd
 803a8a4:	0803a8d5 	.word	0x0803a8d5
 803a8a8:	0803a915 	.word	0x0803a915
 803a8ac:	0803aaeb 	.word	0x0803aaeb
 803a8b0:	0803aaeb 	.word	0x0803aaeb
 803a8b4:	0803aa8b 	.word	0x0803aa8b
 803a8b8:	0803aab7 	.word	0x0803aab7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 803a8bc:	687b      	ldr	r3, [r7, #4]
 803a8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803a8c2:	681b      	ldr	r3, [r3, #0]
 803a8c4:	687a      	ldr	r2, [r7, #4]
 803a8c6:	7c12      	ldrb	r2, [r2, #16]
 803a8c8:	f107 0108 	add.w	r1, r7, #8
 803a8cc:	4610      	mov	r0, r2
 803a8ce:	4798      	blx	r3
 803a8d0:	60f8      	str	r0, [r7, #12]
      break;
 803a8d2:	e112      	b.n	803aafa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803a8d4:	687b      	ldr	r3, [r7, #4]
 803a8d6:	7c1b      	ldrb	r3, [r3, #16]
 803a8d8:	2b00      	cmp	r3, #0
 803a8da:	d10d      	bne.n	803a8f8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 803a8dc:	687b      	ldr	r3, [r7, #4]
 803a8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803a8e4:	f107 0208 	add.w	r2, r7, #8
 803a8e8:	4610      	mov	r0, r2
 803a8ea:	4798      	blx	r3
 803a8ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803a8ee:	68fb      	ldr	r3, [r7, #12]
 803a8f0:	3301      	adds	r3, #1
 803a8f2:	2202      	movs	r2, #2
 803a8f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 803a8f6:	e100      	b.n	803aafa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 803a8f8:	687b      	ldr	r3, [r7, #4]
 803a8fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a900:	f107 0208 	add.w	r2, r7, #8
 803a904:	4610      	mov	r0, r2
 803a906:	4798      	blx	r3
 803a908:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803a90a:	68fb      	ldr	r3, [r7, #12]
 803a90c:	3301      	adds	r3, #1
 803a90e:	2202      	movs	r2, #2
 803a910:	701a      	strb	r2, [r3, #0]
      break;
 803a912:	e0f2      	b.n	803aafa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 803a914:	683b      	ldr	r3, [r7, #0]
 803a916:	885b      	ldrh	r3, [r3, #2]
 803a918:	b2db      	uxtb	r3, r3
 803a91a:	2b05      	cmp	r3, #5
 803a91c:	f200 80ac 	bhi.w	803aa78 <USBD_GetDescriptor+0x204>
 803a920:	a201      	add	r2, pc, #4	; (adr r2, 803a928 <USBD_GetDescriptor+0xb4>)
 803a922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a926:	bf00      	nop
 803a928:	0803a941 	.word	0x0803a941
 803a92c:	0803a975 	.word	0x0803a975
 803a930:	0803a9a9 	.word	0x0803a9a9
 803a934:	0803a9dd 	.word	0x0803a9dd
 803a938:	0803aa11 	.word	0x0803aa11
 803a93c:	0803aa45 	.word	0x0803aa45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 803a940:	687b      	ldr	r3, [r7, #4]
 803a942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803a946:	685b      	ldr	r3, [r3, #4]
 803a948:	2b00      	cmp	r3, #0
 803a94a:	d00b      	beq.n	803a964 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 803a94c:	687b      	ldr	r3, [r7, #4]
 803a94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803a952:	685b      	ldr	r3, [r3, #4]
 803a954:	687a      	ldr	r2, [r7, #4]
 803a956:	7c12      	ldrb	r2, [r2, #16]
 803a958:	f107 0108 	add.w	r1, r7, #8
 803a95c:	4610      	mov	r0, r2
 803a95e:	4798      	blx	r3
 803a960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803a962:	e091      	b.n	803aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803a964:	6839      	ldr	r1, [r7, #0]
 803a966:	6878      	ldr	r0, [r7, #4]
 803a968:	f000 facb 	bl	803af02 <USBD_CtlError>
            err++;
 803a96c:	7afb      	ldrb	r3, [r7, #11]
 803a96e:	3301      	adds	r3, #1
 803a970:	72fb      	strb	r3, [r7, #11]
          break;
 803a972:	e089      	b.n	803aa88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 803a974:	687b      	ldr	r3, [r7, #4]
 803a976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803a97a:	689b      	ldr	r3, [r3, #8]
 803a97c:	2b00      	cmp	r3, #0
 803a97e:	d00b      	beq.n	803a998 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 803a980:	687b      	ldr	r3, [r7, #4]
 803a982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803a986:	689b      	ldr	r3, [r3, #8]
 803a988:	687a      	ldr	r2, [r7, #4]
 803a98a:	7c12      	ldrb	r2, [r2, #16]
 803a98c:	f107 0108 	add.w	r1, r7, #8
 803a990:	4610      	mov	r0, r2
 803a992:	4798      	blx	r3
 803a994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803a996:	e077      	b.n	803aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803a998:	6839      	ldr	r1, [r7, #0]
 803a99a:	6878      	ldr	r0, [r7, #4]
 803a99c:	f000 fab1 	bl	803af02 <USBD_CtlError>
            err++;
 803a9a0:	7afb      	ldrb	r3, [r7, #11]
 803a9a2:	3301      	adds	r3, #1
 803a9a4:	72fb      	strb	r3, [r7, #11]
          break;
 803a9a6:	e06f      	b.n	803aa88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 803a9a8:	687b      	ldr	r3, [r7, #4]
 803a9aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803a9ae:	68db      	ldr	r3, [r3, #12]
 803a9b0:	2b00      	cmp	r3, #0
 803a9b2:	d00b      	beq.n	803a9cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 803a9b4:	687b      	ldr	r3, [r7, #4]
 803a9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803a9ba:	68db      	ldr	r3, [r3, #12]
 803a9bc:	687a      	ldr	r2, [r7, #4]
 803a9be:	7c12      	ldrb	r2, [r2, #16]
 803a9c0:	f107 0108 	add.w	r1, r7, #8
 803a9c4:	4610      	mov	r0, r2
 803a9c6:	4798      	blx	r3
 803a9c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803a9ca:	e05d      	b.n	803aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803a9cc:	6839      	ldr	r1, [r7, #0]
 803a9ce:	6878      	ldr	r0, [r7, #4]
 803a9d0:	f000 fa97 	bl	803af02 <USBD_CtlError>
            err++;
 803a9d4:	7afb      	ldrb	r3, [r7, #11]
 803a9d6:	3301      	adds	r3, #1
 803a9d8:	72fb      	strb	r3, [r7, #11]
          break;
 803a9da:	e055      	b.n	803aa88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 803a9dc:	687b      	ldr	r3, [r7, #4]
 803a9de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803a9e2:	691b      	ldr	r3, [r3, #16]
 803a9e4:	2b00      	cmp	r3, #0
 803a9e6:	d00b      	beq.n	803aa00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 803a9e8:	687b      	ldr	r3, [r7, #4]
 803a9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803a9ee:	691b      	ldr	r3, [r3, #16]
 803a9f0:	687a      	ldr	r2, [r7, #4]
 803a9f2:	7c12      	ldrb	r2, [r2, #16]
 803a9f4:	f107 0108 	add.w	r1, r7, #8
 803a9f8:	4610      	mov	r0, r2
 803a9fa:	4798      	blx	r3
 803a9fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803a9fe:	e043      	b.n	803aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803aa00:	6839      	ldr	r1, [r7, #0]
 803aa02:	6878      	ldr	r0, [r7, #4]
 803aa04:	f000 fa7d 	bl	803af02 <USBD_CtlError>
            err++;
 803aa08:	7afb      	ldrb	r3, [r7, #11]
 803aa0a:	3301      	adds	r3, #1
 803aa0c:	72fb      	strb	r3, [r7, #11]
          break;
 803aa0e:	e03b      	b.n	803aa88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 803aa10:	687b      	ldr	r3, [r7, #4]
 803aa12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aa16:	695b      	ldr	r3, [r3, #20]
 803aa18:	2b00      	cmp	r3, #0
 803aa1a:	d00b      	beq.n	803aa34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 803aa1c:	687b      	ldr	r3, [r7, #4]
 803aa1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aa22:	695b      	ldr	r3, [r3, #20]
 803aa24:	687a      	ldr	r2, [r7, #4]
 803aa26:	7c12      	ldrb	r2, [r2, #16]
 803aa28:	f107 0108 	add.w	r1, r7, #8
 803aa2c:	4610      	mov	r0, r2
 803aa2e:	4798      	blx	r3
 803aa30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803aa32:	e029      	b.n	803aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803aa34:	6839      	ldr	r1, [r7, #0]
 803aa36:	6878      	ldr	r0, [r7, #4]
 803aa38:	f000 fa63 	bl	803af02 <USBD_CtlError>
            err++;
 803aa3c:	7afb      	ldrb	r3, [r7, #11]
 803aa3e:	3301      	adds	r3, #1
 803aa40:	72fb      	strb	r3, [r7, #11]
          break;
 803aa42:	e021      	b.n	803aa88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 803aa44:	687b      	ldr	r3, [r7, #4]
 803aa46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aa4a:	699b      	ldr	r3, [r3, #24]
 803aa4c:	2b00      	cmp	r3, #0
 803aa4e:	d00b      	beq.n	803aa68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 803aa50:	687b      	ldr	r3, [r7, #4]
 803aa52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aa56:	699b      	ldr	r3, [r3, #24]
 803aa58:	687a      	ldr	r2, [r7, #4]
 803aa5a:	7c12      	ldrb	r2, [r2, #16]
 803aa5c:	f107 0108 	add.w	r1, r7, #8
 803aa60:	4610      	mov	r0, r2
 803aa62:	4798      	blx	r3
 803aa64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803aa66:	e00f      	b.n	803aa88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803aa68:	6839      	ldr	r1, [r7, #0]
 803aa6a:	6878      	ldr	r0, [r7, #4]
 803aa6c:	f000 fa49 	bl	803af02 <USBD_CtlError>
            err++;
 803aa70:	7afb      	ldrb	r3, [r7, #11]
 803aa72:	3301      	adds	r3, #1
 803aa74:	72fb      	strb	r3, [r7, #11]
          break;
 803aa76:	e007      	b.n	803aa88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 803aa78:	6839      	ldr	r1, [r7, #0]
 803aa7a:	6878      	ldr	r0, [r7, #4]
 803aa7c:	f000 fa41 	bl	803af02 <USBD_CtlError>
          err++;
 803aa80:	7afb      	ldrb	r3, [r7, #11]
 803aa82:	3301      	adds	r3, #1
 803aa84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 803aa86:	bf00      	nop
      }
      break;
 803aa88:	e037      	b.n	803aafa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803aa8a:	687b      	ldr	r3, [r7, #4]
 803aa8c:	7c1b      	ldrb	r3, [r3, #16]
 803aa8e:	2b00      	cmp	r3, #0
 803aa90:	d109      	bne.n	803aaa6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 803aa92:	687b      	ldr	r3, [r7, #4]
 803aa94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803aa98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803aa9a:	f107 0208 	add.w	r2, r7, #8
 803aa9e:	4610      	mov	r0, r2
 803aaa0:	4798      	blx	r3
 803aaa2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803aaa4:	e029      	b.n	803aafa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803aaa6:	6839      	ldr	r1, [r7, #0]
 803aaa8:	6878      	ldr	r0, [r7, #4]
 803aaaa:	f000 fa2a 	bl	803af02 <USBD_CtlError>
        err++;
 803aaae:	7afb      	ldrb	r3, [r7, #11]
 803aab0:	3301      	adds	r3, #1
 803aab2:	72fb      	strb	r3, [r7, #11]
      break;
 803aab4:	e021      	b.n	803aafa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803aab6:	687b      	ldr	r3, [r7, #4]
 803aab8:	7c1b      	ldrb	r3, [r3, #16]
 803aaba:	2b00      	cmp	r3, #0
 803aabc:	d10d      	bne.n	803aada <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 803aabe:	687b      	ldr	r3, [r7, #4]
 803aac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803aac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803aac6:	f107 0208 	add.w	r2, r7, #8
 803aaca:	4610      	mov	r0, r2
 803aacc:	4798      	blx	r3
 803aace:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 803aad0:	68fb      	ldr	r3, [r7, #12]
 803aad2:	3301      	adds	r3, #1
 803aad4:	2207      	movs	r2, #7
 803aad6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803aad8:	e00f      	b.n	803aafa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803aada:	6839      	ldr	r1, [r7, #0]
 803aadc:	6878      	ldr	r0, [r7, #4]
 803aade:	f000 fa10 	bl	803af02 <USBD_CtlError>
        err++;
 803aae2:	7afb      	ldrb	r3, [r7, #11]
 803aae4:	3301      	adds	r3, #1
 803aae6:	72fb      	strb	r3, [r7, #11]
      break;
 803aae8:	e007      	b.n	803aafa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 803aaea:	6839      	ldr	r1, [r7, #0]
 803aaec:	6878      	ldr	r0, [r7, #4]
 803aaee:	f000 fa08 	bl	803af02 <USBD_CtlError>
      err++;
 803aaf2:	7afb      	ldrb	r3, [r7, #11]
 803aaf4:	3301      	adds	r3, #1
 803aaf6:	72fb      	strb	r3, [r7, #11]
      break;
 803aaf8:	bf00      	nop
  }

  if (err != 0U)
 803aafa:	7afb      	ldrb	r3, [r7, #11]
 803aafc:	2b00      	cmp	r3, #0
 803aafe:	d11e      	bne.n	803ab3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 803ab00:	683b      	ldr	r3, [r7, #0]
 803ab02:	88db      	ldrh	r3, [r3, #6]
 803ab04:	2b00      	cmp	r3, #0
 803ab06:	d016      	beq.n	803ab36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 803ab08:	893b      	ldrh	r3, [r7, #8]
 803ab0a:	2b00      	cmp	r3, #0
 803ab0c:	d00e      	beq.n	803ab2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 803ab0e:	683b      	ldr	r3, [r7, #0]
 803ab10:	88da      	ldrh	r2, [r3, #6]
 803ab12:	893b      	ldrh	r3, [r7, #8]
 803ab14:	4293      	cmp	r3, r2
 803ab16:	bf28      	it	cs
 803ab18:	4613      	movcs	r3, r2
 803ab1a:	b29b      	uxth	r3, r3
 803ab1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 803ab1e:	893b      	ldrh	r3, [r7, #8]
 803ab20:	461a      	mov	r2, r3
 803ab22:	68f9      	ldr	r1, [r7, #12]
 803ab24:	6878      	ldr	r0, [r7, #4]
 803ab26:	f000 fa5d 	bl	803afe4 <USBD_CtlSendData>
 803ab2a:	e009      	b.n	803ab40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 803ab2c:	6839      	ldr	r1, [r7, #0]
 803ab2e:	6878      	ldr	r0, [r7, #4]
 803ab30:	f000 f9e7 	bl	803af02 <USBD_CtlError>
 803ab34:	e004      	b.n	803ab40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 803ab36:	6878      	ldr	r0, [r7, #4]
 803ab38:	f000 faae 	bl	803b098 <USBD_CtlSendStatus>
 803ab3c:	e000      	b.n	803ab40 <USBD_GetDescriptor+0x2cc>
    return;
 803ab3e:	bf00      	nop
  }
}
 803ab40:	3710      	adds	r7, #16
 803ab42:	46bd      	mov	sp, r7
 803ab44:	bd80      	pop	{r7, pc}
 803ab46:	bf00      	nop

0803ab48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803ab48:	b580      	push	{r7, lr}
 803ab4a:	b084      	sub	sp, #16
 803ab4c:	af00      	add	r7, sp, #0
 803ab4e:	6078      	str	r0, [r7, #4]
 803ab50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803ab52:	683b      	ldr	r3, [r7, #0]
 803ab54:	889b      	ldrh	r3, [r3, #4]
 803ab56:	2b00      	cmp	r3, #0
 803ab58:	d131      	bne.n	803abbe <USBD_SetAddress+0x76>
 803ab5a:	683b      	ldr	r3, [r7, #0]
 803ab5c:	88db      	ldrh	r3, [r3, #6]
 803ab5e:	2b00      	cmp	r3, #0
 803ab60:	d12d      	bne.n	803abbe <USBD_SetAddress+0x76>
 803ab62:	683b      	ldr	r3, [r7, #0]
 803ab64:	885b      	ldrh	r3, [r3, #2]
 803ab66:	2b7f      	cmp	r3, #127	; 0x7f
 803ab68:	d829      	bhi.n	803abbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 803ab6a:	683b      	ldr	r3, [r7, #0]
 803ab6c:	885b      	ldrh	r3, [r3, #2]
 803ab6e:	b2db      	uxtb	r3, r3
 803ab70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803ab74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ab76:	687b      	ldr	r3, [r7, #4]
 803ab78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ab7c:	b2db      	uxtb	r3, r3
 803ab7e:	2b03      	cmp	r3, #3
 803ab80:	d104      	bne.n	803ab8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 803ab82:	6839      	ldr	r1, [r7, #0]
 803ab84:	6878      	ldr	r0, [r7, #4]
 803ab86:	f000 f9bc 	bl	803af02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ab8a:	e01d      	b.n	803abc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 803ab8c:	687b      	ldr	r3, [r7, #4]
 803ab8e:	7bfa      	ldrb	r2, [r7, #15]
 803ab90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803ab94:	7bfb      	ldrb	r3, [r7, #15]
 803ab96:	4619      	mov	r1, r3
 803ab98:	6878      	ldr	r0, [r7, #4]
 803ab9a:	f000 ff0b 	bl	803b9b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 803ab9e:	6878      	ldr	r0, [r7, #4]
 803aba0:	f000 fa7a 	bl	803b098 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803aba4:	7bfb      	ldrb	r3, [r7, #15]
 803aba6:	2b00      	cmp	r3, #0
 803aba8:	d004      	beq.n	803abb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803abaa:	687b      	ldr	r3, [r7, #4]
 803abac:	2202      	movs	r2, #2
 803abae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803abb2:	e009      	b.n	803abc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803abb4:	687b      	ldr	r3, [r7, #4]
 803abb6:	2201      	movs	r2, #1
 803abb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803abbc:	e004      	b.n	803abc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 803abbe:	6839      	ldr	r1, [r7, #0]
 803abc0:	6878      	ldr	r0, [r7, #4]
 803abc2:	f000 f99e 	bl	803af02 <USBD_CtlError>
  }
}
 803abc6:	bf00      	nop
 803abc8:	bf00      	nop
 803abca:	3710      	adds	r7, #16
 803abcc:	46bd      	mov	sp, r7
 803abce:	bd80      	pop	{r7, pc}

0803abd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803abd0:	b580      	push	{r7, lr}
 803abd2:	b084      	sub	sp, #16
 803abd4:	af00      	add	r7, sp, #0
 803abd6:	6078      	str	r0, [r7, #4]
 803abd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803abda:	2300      	movs	r3, #0
 803abdc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 803abde:	683b      	ldr	r3, [r7, #0]
 803abe0:	885b      	ldrh	r3, [r3, #2]
 803abe2:	b2da      	uxtb	r2, r3
 803abe4:	4b4e      	ldr	r3, [pc, #312]	; (803ad20 <USBD_SetConfig+0x150>)
 803abe6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 803abe8:	4b4d      	ldr	r3, [pc, #308]	; (803ad20 <USBD_SetConfig+0x150>)
 803abea:	781b      	ldrb	r3, [r3, #0]
 803abec:	2b01      	cmp	r3, #1
 803abee:	d905      	bls.n	803abfc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 803abf0:	6839      	ldr	r1, [r7, #0]
 803abf2:	6878      	ldr	r0, [r7, #4]
 803abf4:	f000 f985 	bl	803af02 <USBD_CtlError>
    return USBD_FAIL;
 803abf8:	2303      	movs	r3, #3
 803abfa:	e08c      	b.n	803ad16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 803abfc:	687b      	ldr	r3, [r7, #4]
 803abfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ac02:	b2db      	uxtb	r3, r3
 803ac04:	2b02      	cmp	r3, #2
 803ac06:	d002      	beq.n	803ac0e <USBD_SetConfig+0x3e>
 803ac08:	2b03      	cmp	r3, #3
 803ac0a:	d029      	beq.n	803ac60 <USBD_SetConfig+0x90>
 803ac0c:	e075      	b.n	803acfa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 803ac0e:	4b44      	ldr	r3, [pc, #272]	; (803ad20 <USBD_SetConfig+0x150>)
 803ac10:	781b      	ldrb	r3, [r3, #0]
 803ac12:	2b00      	cmp	r3, #0
 803ac14:	d020      	beq.n	803ac58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803ac16:	4b42      	ldr	r3, [pc, #264]	; (803ad20 <USBD_SetConfig+0x150>)
 803ac18:	781b      	ldrb	r3, [r3, #0]
 803ac1a:	461a      	mov	r2, r3
 803ac1c:	687b      	ldr	r3, [r7, #4]
 803ac1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 803ac20:	4b3f      	ldr	r3, [pc, #252]	; (803ad20 <USBD_SetConfig+0x150>)
 803ac22:	781b      	ldrb	r3, [r3, #0]
 803ac24:	4619      	mov	r1, r3
 803ac26:	6878      	ldr	r0, [r7, #4]
 803ac28:	f7fe ffe7 	bl	8039bfa <USBD_SetClassConfig>
 803ac2c:	4603      	mov	r3, r0
 803ac2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 803ac30:	7bfb      	ldrb	r3, [r7, #15]
 803ac32:	2b00      	cmp	r3, #0
 803ac34:	d008      	beq.n	803ac48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 803ac36:	6839      	ldr	r1, [r7, #0]
 803ac38:	6878      	ldr	r0, [r7, #4]
 803ac3a:	f000 f962 	bl	803af02 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803ac3e:	687b      	ldr	r3, [r7, #4]
 803ac40:	2202      	movs	r2, #2
 803ac42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803ac46:	e065      	b.n	803ad14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803ac48:	6878      	ldr	r0, [r7, #4]
 803ac4a:	f000 fa25 	bl	803b098 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 803ac4e:	687b      	ldr	r3, [r7, #4]
 803ac50:	2203      	movs	r2, #3
 803ac52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803ac56:	e05d      	b.n	803ad14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803ac58:	6878      	ldr	r0, [r7, #4]
 803ac5a:	f000 fa1d 	bl	803b098 <USBD_CtlSendStatus>
      break;
 803ac5e:	e059      	b.n	803ad14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 803ac60:	4b2f      	ldr	r3, [pc, #188]	; (803ad20 <USBD_SetConfig+0x150>)
 803ac62:	781b      	ldrb	r3, [r3, #0]
 803ac64:	2b00      	cmp	r3, #0
 803ac66:	d112      	bne.n	803ac8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803ac68:	687b      	ldr	r3, [r7, #4]
 803ac6a:	2202      	movs	r2, #2
 803ac6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 803ac70:	4b2b      	ldr	r3, [pc, #172]	; (803ad20 <USBD_SetConfig+0x150>)
 803ac72:	781b      	ldrb	r3, [r3, #0]
 803ac74:	461a      	mov	r2, r3
 803ac76:	687b      	ldr	r3, [r7, #4]
 803ac78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 803ac7a:	4b29      	ldr	r3, [pc, #164]	; (803ad20 <USBD_SetConfig+0x150>)
 803ac7c:	781b      	ldrb	r3, [r3, #0]
 803ac7e:	4619      	mov	r1, r3
 803ac80:	6878      	ldr	r0, [r7, #4]
 803ac82:	f7fe ffd6 	bl	8039c32 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 803ac86:	6878      	ldr	r0, [r7, #4]
 803ac88:	f000 fa06 	bl	803b098 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803ac8c:	e042      	b.n	803ad14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 803ac8e:	4b24      	ldr	r3, [pc, #144]	; (803ad20 <USBD_SetConfig+0x150>)
 803ac90:	781b      	ldrb	r3, [r3, #0]
 803ac92:	461a      	mov	r2, r3
 803ac94:	687b      	ldr	r3, [r7, #4]
 803ac96:	685b      	ldr	r3, [r3, #4]
 803ac98:	429a      	cmp	r2, r3
 803ac9a:	d02a      	beq.n	803acf2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803ac9c:	687b      	ldr	r3, [r7, #4]
 803ac9e:	685b      	ldr	r3, [r3, #4]
 803aca0:	b2db      	uxtb	r3, r3
 803aca2:	4619      	mov	r1, r3
 803aca4:	6878      	ldr	r0, [r7, #4]
 803aca6:	f7fe ffc4 	bl	8039c32 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 803acaa:	4b1d      	ldr	r3, [pc, #116]	; (803ad20 <USBD_SetConfig+0x150>)
 803acac:	781b      	ldrb	r3, [r3, #0]
 803acae:	461a      	mov	r2, r3
 803acb0:	687b      	ldr	r3, [r7, #4]
 803acb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 803acb4:	4b1a      	ldr	r3, [pc, #104]	; (803ad20 <USBD_SetConfig+0x150>)
 803acb6:	781b      	ldrb	r3, [r3, #0]
 803acb8:	4619      	mov	r1, r3
 803acba:	6878      	ldr	r0, [r7, #4]
 803acbc:	f7fe ff9d 	bl	8039bfa <USBD_SetClassConfig>
 803acc0:	4603      	mov	r3, r0
 803acc2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803acc4:	7bfb      	ldrb	r3, [r7, #15]
 803acc6:	2b00      	cmp	r3, #0
 803acc8:	d00f      	beq.n	803acea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 803acca:	6839      	ldr	r1, [r7, #0]
 803accc:	6878      	ldr	r0, [r7, #4]
 803acce:	f000 f918 	bl	803af02 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803acd2:	687b      	ldr	r3, [r7, #4]
 803acd4:	685b      	ldr	r3, [r3, #4]
 803acd6:	b2db      	uxtb	r3, r3
 803acd8:	4619      	mov	r1, r3
 803acda:	6878      	ldr	r0, [r7, #4]
 803acdc:	f7fe ffa9 	bl	8039c32 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803ace0:	687b      	ldr	r3, [r7, #4]
 803ace2:	2202      	movs	r2, #2
 803ace4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803ace8:	e014      	b.n	803ad14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803acea:	6878      	ldr	r0, [r7, #4]
 803acec:	f000 f9d4 	bl	803b098 <USBD_CtlSendStatus>
      break;
 803acf0:	e010      	b.n	803ad14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803acf2:	6878      	ldr	r0, [r7, #4]
 803acf4:	f000 f9d0 	bl	803b098 <USBD_CtlSendStatus>
      break;
 803acf8:	e00c      	b.n	803ad14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 803acfa:	6839      	ldr	r1, [r7, #0]
 803acfc:	6878      	ldr	r0, [r7, #4]
 803acfe:	f000 f900 	bl	803af02 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803ad02:	4b07      	ldr	r3, [pc, #28]	; (803ad20 <USBD_SetConfig+0x150>)
 803ad04:	781b      	ldrb	r3, [r3, #0]
 803ad06:	4619      	mov	r1, r3
 803ad08:	6878      	ldr	r0, [r7, #4]
 803ad0a:	f7fe ff92 	bl	8039c32 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 803ad0e:	2303      	movs	r3, #3
 803ad10:	73fb      	strb	r3, [r7, #15]
      break;
 803ad12:	bf00      	nop
  }

  return ret;
 803ad14:	7bfb      	ldrb	r3, [r7, #15]
}
 803ad16:	4618      	mov	r0, r3
 803ad18:	3710      	adds	r7, #16
 803ad1a:	46bd      	mov	sp, r7
 803ad1c:	bd80      	pop	{r7, pc}
 803ad1e:	bf00      	nop
 803ad20:	24024bc8 	.word	0x24024bc8

0803ad24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803ad24:	b580      	push	{r7, lr}
 803ad26:	b082      	sub	sp, #8
 803ad28:	af00      	add	r7, sp, #0
 803ad2a:	6078      	str	r0, [r7, #4]
 803ad2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 803ad2e:	683b      	ldr	r3, [r7, #0]
 803ad30:	88db      	ldrh	r3, [r3, #6]
 803ad32:	2b01      	cmp	r3, #1
 803ad34:	d004      	beq.n	803ad40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803ad36:	6839      	ldr	r1, [r7, #0]
 803ad38:	6878      	ldr	r0, [r7, #4]
 803ad3a:	f000 f8e2 	bl	803af02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 803ad3e:	e023      	b.n	803ad88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 803ad40:	687b      	ldr	r3, [r7, #4]
 803ad42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ad46:	b2db      	uxtb	r3, r3
 803ad48:	2b02      	cmp	r3, #2
 803ad4a:	dc02      	bgt.n	803ad52 <USBD_GetConfig+0x2e>
 803ad4c:	2b00      	cmp	r3, #0
 803ad4e:	dc03      	bgt.n	803ad58 <USBD_GetConfig+0x34>
 803ad50:	e015      	b.n	803ad7e <USBD_GetConfig+0x5a>
 803ad52:	2b03      	cmp	r3, #3
 803ad54:	d00b      	beq.n	803ad6e <USBD_GetConfig+0x4a>
 803ad56:	e012      	b.n	803ad7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 803ad58:	687b      	ldr	r3, [r7, #4]
 803ad5a:	2200      	movs	r2, #0
 803ad5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803ad5e:	687b      	ldr	r3, [r7, #4]
 803ad60:	3308      	adds	r3, #8
 803ad62:	2201      	movs	r2, #1
 803ad64:	4619      	mov	r1, r3
 803ad66:	6878      	ldr	r0, [r7, #4]
 803ad68:	f000 f93c 	bl	803afe4 <USBD_CtlSendData>
        break;
 803ad6c:	e00c      	b.n	803ad88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803ad6e:	687b      	ldr	r3, [r7, #4]
 803ad70:	3304      	adds	r3, #4
 803ad72:	2201      	movs	r2, #1
 803ad74:	4619      	mov	r1, r3
 803ad76:	6878      	ldr	r0, [r7, #4]
 803ad78:	f000 f934 	bl	803afe4 <USBD_CtlSendData>
        break;
 803ad7c:	e004      	b.n	803ad88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 803ad7e:	6839      	ldr	r1, [r7, #0]
 803ad80:	6878      	ldr	r0, [r7, #4]
 803ad82:	f000 f8be 	bl	803af02 <USBD_CtlError>
        break;
 803ad86:	bf00      	nop
}
 803ad88:	bf00      	nop
 803ad8a:	3708      	adds	r7, #8
 803ad8c:	46bd      	mov	sp, r7
 803ad8e:	bd80      	pop	{r7, pc}

0803ad90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803ad90:	b580      	push	{r7, lr}
 803ad92:	b082      	sub	sp, #8
 803ad94:	af00      	add	r7, sp, #0
 803ad96:	6078      	str	r0, [r7, #4]
 803ad98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803ad9a:	687b      	ldr	r3, [r7, #4]
 803ad9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ada0:	b2db      	uxtb	r3, r3
 803ada2:	3b01      	subs	r3, #1
 803ada4:	2b02      	cmp	r3, #2
 803ada6:	d81e      	bhi.n	803ade6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 803ada8:	683b      	ldr	r3, [r7, #0]
 803adaa:	88db      	ldrh	r3, [r3, #6]
 803adac:	2b02      	cmp	r3, #2
 803adae:	d004      	beq.n	803adba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 803adb0:	6839      	ldr	r1, [r7, #0]
 803adb2:	6878      	ldr	r0, [r7, #4]
 803adb4:	f000 f8a5 	bl	803af02 <USBD_CtlError>
        break;
 803adb8:	e01a      	b.n	803adf0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 803adba:	687b      	ldr	r3, [r7, #4]
 803adbc:	2201      	movs	r2, #1
 803adbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 803adc0:	687b      	ldr	r3, [r7, #4]
 803adc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803adc6:	2b00      	cmp	r3, #0
 803adc8:	d005      	beq.n	803add6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 803adca:	687b      	ldr	r3, [r7, #4]
 803adcc:	68db      	ldr	r3, [r3, #12]
 803adce:	f043 0202 	orr.w	r2, r3, #2
 803add2:	687b      	ldr	r3, [r7, #4]
 803add4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803add6:	687b      	ldr	r3, [r7, #4]
 803add8:	330c      	adds	r3, #12
 803adda:	2202      	movs	r2, #2
 803addc:	4619      	mov	r1, r3
 803adde:	6878      	ldr	r0, [r7, #4]
 803ade0:	f000 f900 	bl	803afe4 <USBD_CtlSendData>
      break;
 803ade4:	e004      	b.n	803adf0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803ade6:	6839      	ldr	r1, [r7, #0]
 803ade8:	6878      	ldr	r0, [r7, #4]
 803adea:	f000 f88a 	bl	803af02 <USBD_CtlError>
      break;
 803adee:	bf00      	nop
  }
}
 803adf0:	bf00      	nop
 803adf2:	3708      	adds	r7, #8
 803adf4:	46bd      	mov	sp, r7
 803adf6:	bd80      	pop	{r7, pc}

0803adf8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803adf8:	b580      	push	{r7, lr}
 803adfa:	b082      	sub	sp, #8
 803adfc:	af00      	add	r7, sp, #0
 803adfe:	6078      	str	r0, [r7, #4]
 803ae00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803ae02:	683b      	ldr	r3, [r7, #0]
 803ae04:	885b      	ldrh	r3, [r3, #2]
 803ae06:	2b01      	cmp	r3, #1
 803ae08:	d107      	bne.n	803ae1a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 803ae0a:	687b      	ldr	r3, [r7, #4]
 803ae0c:	2201      	movs	r2, #1
 803ae0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803ae12:	6878      	ldr	r0, [r7, #4]
 803ae14:	f000 f940 	bl	803b098 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 803ae18:	e013      	b.n	803ae42 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 803ae1a:	683b      	ldr	r3, [r7, #0]
 803ae1c:	885b      	ldrh	r3, [r3, #2]
 803ae1e:	2b02      	cmp	r3, #2
 803ae20:	d10b      	bne.n	803ae3a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803ae22:	683b      	ldr	r3, [r7, #0]
 803ae24:	889b      	ldrh	r3, [r3, #4]
 803ae26:	0a1b      	lsrs	r3, r3, #8
 803ae28:	b29b      	uxth	r3, r3
 803ae2a:	b2da      	uxtb	r2, r3
 803ae2c:	687b      	ldr	r3, [r7, #4]
 803ae2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 803ae32:	6878      	ldr	r0, [r7, #4]
 803ae34:	f000 f930 	bl	803b098 <USBD_CtlSendStatus>
}
 803ae38:	e003      	b.n	803ae42 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 803ae3a:	6839      	ldr	r1, [r7, #0]
 803ae3c:	6878      	ldr	r0, [r7, #4]
 803ae3e:	f000 f860 	bl	803af02 <USBD_CtlError>
}
 803ae42:	bf00      	nop
 803ae44:	3708      	adds	r7, #8
 803ae46:	46bd      	mov	sp, r7
 803ae48:	bd80      	pop	{r7, pc}

0803ae4a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803ae4a:	b580      	push	{r7, lr}
 803ae4c:	b082      	sub	sp, #8
 803ae4e:	af00      	add	r7, sp, #0
 803ae50:	6078      	str	r0, [r7, #4]
 803ae52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803ae54:	687b      	ldr	r3, [r7, #4]
 803ae56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ae5a:	b2db      	uxtb	r3, r3
 803ae5c:	3b01      	subs	r3, #1
 803ae5e:	2b02      	cmp	r3, #2
 803ae60:	d80b      	bhi.n	803ae7a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803ae62:	683b      	ldr	r3, [r7, #0]
 803ae64:	885b      	ldrh	r3, [r3, #2]
 803ae66:	2b01      	cmp	r3, #1
 803ae68:	d10c      	bne.n	803ae84 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 803ae6a:	687b      	ldr	r3, [r7, #4]
 803ae6c:	2200      	movs	r2, #0
 803ae6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 803ae72:	6878      	ldr	r0, [r7, #4]
 803ae74:	f000 f910 	bl	803b098 <USBD_CtlSendStatus>
      }
      break;
 803ae78:	e004      	b.n	803ae84 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 803ae7a:	6839      	ldr	r1, [r7, #0]
 803ae7c:	6878      	ldr	r0, [r7, #4]
 803ae7e:	f000 f840 	bl	803af02 <USBD_CtlError>
      break;
 803ae82:	e000      	b.n	803ae86 <USBD_ClrFeature+0x3c>
      break;
 803ae84:	bf00      	nop
  }
}
 803ae86:	bf00      	nop
 803ae88:	3708      	adds	r7, #8
 803ae8a:	46bd      	mov	sp, r7
 803ae8c:	bd80      	pop	{r7, pc}

0803ae8e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803ae8e:	b580      	push	{r7, lr}
 803ae90:	b084      	sub	sp, #16
 803ae92:	af00      	add	r7, sp, #0
 803ae94:	6078      	str	r0, [r7, #4]
 803ae96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 803ae98:	683b      	ldr	r3, [r7, #0]
 803ae9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 803ae9c:	68fb      	ldr	r3, [r7, #12]
 803ae9e:	781a      	ldrb	r2, [r3, #0]
 803aea0:	687b      	ldr	r3, [r7, #4]
 803aea2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 803aea4:	68fb      	ldr	r3, [r7, #12]
 803aea6:	3301      	adds	r3, #1
 803aea8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 803aeaa:	68fb      	ldr	r3, [r7, #12]
 803aeac:	781a      	ldrb	r2, [r3, #0]
 803aeae:	687b      	ldr	r3, [r7, #4]
 803aeb0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803aeb2:	68fb      	ldr	r3, [r7, #12]
 803aeb4:	3301      	adds	r3, #1
 803aeb6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 803aeb8:	68f8      	ldr	r0, [r7, #12]
 803aeba:	f7ff fa41 	bl	803a340 <SWAPBYTE>
 803aebe:	4603      	mov	r3, r0
 803aec0:	461a      	mov	r2, r3
 803aec2:	687b      	ldr	r3, [r7, #4]
 803aec4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803aec6:	68fb      	ldr	r3, [r7, #12]
 803aec8:	3301      	adds	r3, #1
 803aeca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803aecc:	68fb      	ldr	r3, [r7, #12]
 803aece:	3301      	adds	r3, #1
 803aed0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803aed2:	68f8      	ldr	r0, [r7, #12]
 803aed4:	f7ff fa34 	bl	803a340 <SWAPBYTE>
 803aed8:	4603      	mov	r3, r0
 803aeda:	461a      	mov	r2, r3
 803aedc:	687b      	ldr	r3, [r7, #4]
 803aede:	809a      	strh	r2, [r3, #4]

  pbuff++;
 803aee0:	68fb      	ldr	r3, [r7, #12]
 803aee2:	3301      	adds	r3, #1
 803aee4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803aee6:	68fb      	ldr	r3, [r7, #12]
 803aee8:	3301      	adds	r3, #1
 803aeea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 803aeec:	68f8      	ldr	r0, [r7, #12]
 803aeee:	f7ff fa27 	bl	803a340 <SWAPBYTE>
 803aef2:	4603      	mov	r3, r0
 803aef4:	461a      	mov	r2, r3
 803aef6:	687b      	ldr	r3, [r7, #4]
 803aef8:	80da      	strh	r2, [r3, #6]
}
 803aefa:	bf00      	nop
 803aefc:	3710      	adds	r7, #16
 803aefe:	46bd      	mov	sp, r7
 803af00:	bd80      	pop	{r7, pc}

0803af02 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803af02:	b580      	push	{r7, lr}
 803af04:	b082      	sub	sp, #8
 803af06:	af00      	add	r7, sp, #0
 803af08:	6078      	str	r0, [r7, #4]
 803af0a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 803af0c:	2180      	movs	r1, #128	; 0x80
 803af0e:	6878      	ldr	r0, [r7, #4]
 803af10:	f000 fce6 	bl	803b8e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803af14:	2100      	movs	r1, #0
 803af16:	6878      	ldr	r0, [r7, #4]
 803af18:	f000 fce2 	bl	803b8e0 <USBD_LL_StallEP>
}
 803af1c:	bf00      	nop
 803af1e:	3708      	adds	r7, #8
 803af20:	46bd      	mov	sp, r7
 803af22:	bd80      	pop	{r7, pc}

0803af24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803af24:	b580      	push	{r7, lr}
 803af26:	b086      	sub	sp, #24
 803af28:	af00      	add	r7, sp, #0
 803af2a:	60f8      	str	r0, [r7, #12]
 803af2c:	60b9      	str	r1, [r7, #8]
 803af2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 803af30:	2300      	movs	r3, #0
 803af32:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803af34:	68fb      	ldr	r3, [r7, #12]
 803af36:	2b00      	cmp	r3, #0
 803af38:	d036      	beq.n	803afa8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 803af3a:	68fb      	ldr	r3, [r7, #12]
 803af3c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 803af3e:	6938      	ldr	r0, [r7, #16]
 803af40:	f000 f836 	bl	803afb0 <USBD_GetLen>
 803af44:	4603      	mov	r3, r0
 803af46:	3301      	adds	r3, #1
 803af48:	b29b      	uxth	r3, r3
 803af4a:	005b      	lsls	r3, r3, #1
 803af4c:	b29a      	uxth	r2, r3
 803af4e:	687b      	ldr	r3, [r7, #4]
 803af50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 803af52:	7dfb      	ldrb	r3, [r7, #23]
 803af54:	68ba      	ldr	r2, [r7, #8]
 803af56:	4413      	add	r3, r2
 803af58:	687a      	ldr	r2, [r7, #4]
 803af5a:	7812      	ldrb	r2, [r2, #0]
 803af5c:	701a      	strb	r2, [r3, #0]
  idx++;
 803af5e:	7dfb      	ldrb	r3, [r7, #23]
 803af60:	3301      	adds	r3, #1
 803af62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 803af64:	7dfb      	ldrb	r3, [r7, #23]
 803af66:	68ba      	ldr	r2, [r7, #8]
 803af68:	4413      	add	r3, r2
 803af6a:	2203      	movs	r2, #3
 803af6c:	701a      	strb	r2, [r3, #0]
  idx++;
 803af6e:	7dfb      	ldrb	r3, [r7, #23]
 803af70:	3301      	adds	r3, #1
 803af72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 803af74:	e013      	b.n	803af9e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 803af76:	7dfb      	ldrb	r3, [r7, #23]
 803af78:	68ba      	ldr	r2, [r7, #8]
 803af7a:	4413      	add	r3, r2
 803af7c:	693a      	ldr	r2, [r7, #16]
 803af7e:	7812      	ldrb	r2, [r2, #0]
 803af80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803af82:	693b      	ldr	r3, [r7, #16]
 803af84:	3301      	adds	r3, #1
 803af86:	613b      	str	r3, [r7, #16]
    idx++;
 803af88:	7dfb      	ldrb	r3, [r7, #23]
 803af8a:	3301      	adds	r3, #1
 803af8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803af8e:	7dfb      	ldrb	r3, [r7, #23]
 803af90:	68ba      	ldr	r2, [r7, #8]
 803af92:	4413      	add	r3, r2
 803af94:	2200      	movs	r2, #0
 803af96:	701a      	strb	r2, [r3, #0]
    idx++;
 803af98:	7dfb      	ldrb	r3, [r7, #23]
 803af9a:	3301      	adds	r3, #1
 803af9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803af9e:	693b      	ldr	r3, [r7, #16]
 803afa0:	781b      	ldrb	r3, [r3, #0]
 803afa2:	2b00      	cmp	r3, #0
 803afa4:	d1e7      	bne.n	803af76 <USBD_GetString+0x52>
 803afa6:	e000      	b.n	803afaa <USBD_GetString+0x86>
    return;
 803afa8:	bf00      	nop
  }
}
 803afaa:	3718      	adds	r7, #24
 803afac:	46bd      	mov	sp, r7
 803afae:	bd80      	pop	{r7, pc}

0803afb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 803afb0:	b480      	push	{r7}
 803afb2:	b085      	sub	sp, #20
 803afb4:	af00      	add	r7, sp, #0
 803afb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 803afb8:	2300      	movs	r3, #0
 803afba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 803afbc:	687b      	ldr	r3, [r7, #4]
 803afbe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 803afc0:	e005      	b.n	803afce <USBD_GetLen+0x1e>
  {
    len++;
 803afc2:	7bfb      	ldrb	r3, [r7, #15]
 803afc4:	3301      	adds	r3, #1
 803afc6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 803afc8:	68bb      	ldr	r3, [r7, #8]
 803afca:	3301      	adds	r3, #1
 803afcc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803afce:	68bb      	ldr	r3, [r7, #8]
 803afd0:	781b      	ldrb	r3, [r3, #0]
 803afd2:	2b00      	cmp	r3, #0
 803afd4:	d1f5      	bne.n	803afc2 <USBD_GetLen+0x12>
  }

  return len;
 803afd6:	7bfb      	ldrb	r3, [r7, #15]
}
 803afd8:	4618      	mov	r0, r3
 803afda:	3714      	adds	r7, #20
 803afdc:	46bd      	mov	sp, r7
 803afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 803afe2:	4770      	bx	lr

0803afe4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803afe4:	b580      	push	{r7, lr}
 803afe6:	b084      	sub	sp, #16
 803afe8:	af00      	add	r7, sp, #0
 803afea:	60f8      	str	r0, [r7, #12]
 803afec:	60b9      	str	r1, [r7, #8]
 803afee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 803aff0:	68fb      	ldr	r3, [r7, #12]
 803aff2:	2202      	movs	r2, #2
 803aff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 803aff8:	68fb      	ldr	r3, [r7, #12]
 803affa:	687a      	ldr	r2, [r7, #4]
 803affc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 803affe:	68fb      	ldr	r3, [r7, #12]
 803b000:	687a      	ldr	r2, [r7, #4]
 803b002:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803b004:	687b      	ldr	r3, [r7, #4]
 803b006:	68ba      	ldr	r2, [r7, #8]
 803b008:	2100      	movs	r1, #0
 803b00a:	68f8      	ldr	r0, [r7, #12]
 803b00c:	f000 fcf1 	bl	803b9f2 <USBD_LL_Transmit>

  return USBD_OK;
 803b010:	2300      	movs	r3, #0
}
 803b012:	4618      	mov	r0, r3
 803b014:	3710      	adds	r7, #16
 803b016:	46bd      	mov	sp, r7
 803b018:	bd80      	pop	{r7, pc}

0803b01a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 803b01a:	b580      	push	{r7, lr}
 803b01c:	b084      	sub	sp, #16
 803b01e:	af00      	add	r7, sp, #0
 803b020:	60f8      	str	r0, [r7, #12]
 803b022:	60b9      	str	r1, [r7, #8]
 803b024:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803b026:	687b      	ldr	r3, [r7, #4]
 803b028:	68ba      	ldr	r2, [r7, #8]
 803b02a:	2100      	movs	r1, #0
 803b02c:	68f8      	ldr	r0, [r7, #12]
 803b02e:	f000 fce0 	bl	803b9f2 <USBD_LL_Transmit>

  return USBD_OK;
 803b032:	2300      	movs	r3, #0
}
 803b034:	4618      	mov	r0, r3
 803b036:	3710      	adds	r7, #16
 803b038:	46bd      	mov	sp, r7
 803b03a:	bd80      	pop	{r7, pc}

0803b03c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 803b03c:	b580      	push	{r7, lr}
 803b03e:	b084      	sub	sp, #16
 803b040:	af00      	add	r7, sp, #0
 803b042:	60f8      	str	r0, [r7, #12]
 803b044:	60b9      	str	r1, [r7, #8]
 803b046:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 803b048:	68fb      	ldr	r3, [r7, #12]
 803b04a:	2203      	movs	r2, #3
 803b04c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 803b050:	68fb      	ldr	r3, [r7, #12]
 803b052:	687a      	ldr	r2, [r7, #4]
 803b054:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 803b058:	68fb      	ldr	r3, [r7, #12]
 803b05a:	687a      	ldr	r2, [r7, #4]
 803b05c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803b060:	687b      	ldr	r3, [r7, #4]
 803b062:	68ba      	ldr	r2, [r7, #8]
 803b064:	2100      	movs	r1, #0
 803b066:	68f8      	ldr	r0, [r7, #12]
 803b068:	f000 fce4 	bl	803ba34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b06c:	2300      	movs	r3, #0
}
 803b06e:	4618      	mov	r0, r3
 803b070:	3710      	adds	r7, #16
 803b072:	46bd      	mov	sp, r7
 803b074:	bd80      	pop	{r7, pc}

0803b076 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 803b076:	b580      	push	{r7, lr}
 803b078:	b084      	sub	sp, #16
 803b07a:	af00      	add	r7, sp, #0
 803b07c:	60f8      	str	r0, [r7, #12]
 803b07e:	60b9      	str	r1, [r7, #8]
 803b080:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803b082:	687b      	ldr	r3, [r7, #4]
 803b084:	68ba      	ldr	r2, [r7, #8]
 803b086:	2100      	movs	r1, #0
 803b088:	68f8      	ldr	r0, [r7, #12]
 803b08a:	f000 fcd3 	bl	803ba34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b08e:	2300      	movs	r3, #0
}
 803b090:	4618      	mov	r0, r3
 803b092:	3710      	adds	r7, #16
 803b094:	46bd      	mov	sp, r7
 803b096:	bd80      	pop	{r7, pc}

0803b098 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 803b098:	b580      	push	{r7, lr}
 803b09a:	b082      	sub	sp, #8
 803b09c:	af00      	add	r7, sp, #0
 803b09e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 803b0a0:	687b      	ldr	r3, [r7, #4]
 803b0a2:	2204      	movs	r2, #4
 803b0a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 803b0a8:	2300      	movs	r3, #0
 803b0aa:	2200      	movs	r2, #0
 803b0ac:	2100      	movs	r1, #0
 803b0ae:	6878      	ldr	r0, [r7, #4]
 803b0b0:	f000 fc9f 	bl	803b9f2 <USBD_LL_Transmit>

  return USBD_OK;
 803b0b4:	2300      	movs	r3, #0
}
 803b0b6:	4618      	mov	r0, r3
 803b0b8:	3708      	adds	r7, #8
 803b0ba:	46bd      	mov	sp, r7
 803b0bc:	bd80      	pop	{r7, pc}

0803b0be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803b0be:	b580      	push	{r7, lr}
 803b0c0:	b082      	sub	sp, #8
 803b0c2:	af00      	add	r7, sp, #0
 803b0c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803b0c6:	687b      	ldr	r3, [r7, #4]
 803b0c8:	2205      	movs	r2, #5
 803b0ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803b0ce:	2300      	movs	r3, #0
 803b0d0:	2200      	movs	r2, #0
 803b0d2:	2100      	movs	r1, #0
 803b0d4:	6878      	ldr	r0, [r7, #4]
 803b0d6:	f000 fcad 	bl	803ba34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b0da:	2300      	movs	r3, #0
}
 803b0dc:	4618      	mov	r0, r3
 803b0de:	3708      	adds	r7, #8
 803b0e0:	46bd      	mov	sp, r7
 803b0e2:	bd80      	pop	{r7, pc}

0803b0e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803b0e4:	b580      	push	{r7, lr}
 803b0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 803b0e8:	2200      	movs	r2, #0
 803b0ea:	4913      	ldr	r1, [pc, #76]	; (803b138 <MX_USB_DEVICE_Init+0x54>)
 803b0ec:	4813      	ldr	r0, [pc, #76]	; (803b13c <MX_USB_DEVICE_Init+0x58>)
 803b0ee:	f7fe fd07 	bl	8039b00 <USBD_Init>
 803b0f2:	4603      	mov	r3, r0
 803b0f4:	2b00      	cmp	r3, #0
 803b0f6:	d001      	beq.n	803b0fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 803b0f8:	f7ee fc10 	bl	802991c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 803b0fc:	4910      	ldr	r1, [pc, #64]	; (803b140 <MX_USB_DEVICE_Init+0x5c>)
 803b0fe:	480f      	ldr	r0, [pc, #60]	; (803b13c <MX_USB_DEVICE_Init+0x58>)
 803b100:	f7fe fd2e 	bl	8039b60 <USBD_RegisterClass>
 803b104:	4603      	mov	r3, r0
 803b106:	2b00      	cmp	r3, #0
 803b108:	d001      	beq.n	803b10e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 803b10a:	f7ee fc07 	bl	802991c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 803b10e:	490d      	ldr	r1, [pc, #52]	; (803b144 <MX_USB_DEVICE_Init+0x60>)
 803b110:	480a      	ldr	r0, [pc, #40]	; (803b13c <MX_USB_DEVICE_Init+0x58>)
 803b112:	f7fe fc65 	bl	80399e0 <USBD_CDC_RegisterInterface>
 803b116:	4603      	mov	r3, r0
 803b118:	2b00      	cmp	r3, #0
 803b11a:	d001      	beq.n	803b120 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 803b11c:	f7ee fbfe 	bl	802991c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 803b120:	4806      	ldr	r0, [pc, #24]	; (803b13c <MX_USB_DEVICE_Init+0x58>)
 803b122:	f7fe fd53 	bl	8039bcc <USBD_Start>
 803b126:	4603      	mov	r3, r0
 803b128:	2b00      	cmp	r3, #0
 803b12a:	d001      	beq.n	803b130 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 803b12c:	f7ee fbf6 	bl	802991c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 803b130:	f7f5 fc82 	bl	8030a38 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 803b134:	bf00      	nop
 803b136:	bd80      	pop	{r7, pc}
 803b138:	240000b4 	.word	0x240000b4
 803b13c:	24024bcc 	.word	0x24024bcc
 803b140:	24000020 	.word	0x24000020
 803b144:	240000a0 	.word	0x240000a0

0803b148 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 803b148:	b580      	push	{r7, lr}
 803b14a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 803b14c:	2200      	movs	r2, #0
 803b14e:	4905      	ldr	r1, [pc, #20]	; (803b164 <CDC_Init_FS+0x1c>)
 803b150:	4805      	ldr	r0, [pc, #20]	; (803b168 <CDC_Init_FS+0x20>)
 803b152:	f7fe fc5f 	bl	8039a14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803b156:	4905      	ldr	r1, [pc, #20]	; (803b16c <CDC_Init_FS+0x24>)
 803b158:	4803      	ldr	r0, [pc, #12]	; (803b168 <CDC_Init_FS+0x20>)
 803b15a:	f7fe fc7d 	bl	8039a58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 803b15e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 803b160:	4618      	mov	r0, r3
 803b162:	bd80      	pop	{r7, pc}
 803b164:	240256a8 	.word	0x240256a8
 803b168:	24024bcc 	.word	0x24024bcc
 803b16c:	24024ea8 	.word	0x24024ea8

0803b170 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 803b170:	b480      	push	{r7}
 803b172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803b174:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803b176:	4618      	mov	r0, r3
 803b178:	46bd      	mov	sp, r7
 803b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b17e:	4770      	bx	lr

0803b180 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 803b180:	b480      	push	{r7}
 803b182:	b083      	sub	sp, #12
 803b184:	af00      	add	r7, sp, #0
 803b186:	4603      	mov	r3, r0
 803b188:	6039      	str	r1, [r7, #0]
 803b18a:	71fb      	strb	r3, [r7, #7]
 803b18c:	4613      	mov	r3, r2
 803b18e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 803b190:	79fb      	ldrb	r3, [r7, #7]
 803b192:	2b23      	cmp	r3, #35	; 0x23
 803b194:	d84a      	bhi.n	803b22c <CDC_Control_FS+0xac>
 803b196:	a201      	add	r2, pc, #4	; (adr r2, 803b19c <CDC_Control_FS+0x1c>)
 803b198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803b19c:	0803b22d 	.word	0x0803b22d
 803b1a0:	0803b22d 	.word	0x0803b22d
 803b1a4:	0803b22d 	.word	0x0803b22d
 803b1a8:	0803b22d 	.word	0x0803b22d
 803b1ac:	0803b22d 	.word	0x0803b22d
 803b1b0:	0803b22d 	.word	0x0803b22d
 803b1b4:	0803b22d 	.word	0x0803b22d
 803b1b8:	0803b22d 	.word	0x0803b22d
 803b1bc:	0803b22d 	.word	0x0803b22d
 803b1c0:	0803b22d 	.word	0x0803b22d
 803b1c4:	0803b22d 	.word	0x0803b22d
 803b1c8:	0803b22d 	.word	0x0803b22d
 803b1cc:	0803b22d 	.word	0x0803b22d
 803b1d0:	0803b22d 	.word	0x0803b22d
 803b1d4:	0803b22d 	.word	0x0803b22d
 803b1d8:	0803b22d 	.word	0x0803b22d
 803b1dc:	0803b22d 	.word	0x0803b22d
 803b1e0:	0803b22d 	.word	0x0803b22d
 803b1e4:	0803b22d 	.word	0x0803b22d
 803b1e8:	0803b22d 	.word	0x0803b22d
 803b1ec:	0803b22d 	.word	0x0803b22d
 803b1f0:	0803b22d 	.word	0x0803b22d
 803b1f4:	0803b22d 	.word	0x0803b22d
 803b1f8:	0803b22d 	.word	0x0803b22d
 803b1fc:	0803b22d 	.word	0x0803b22d
 803b200:	0803b22d 	.word	0x0803b22d
 803b204:	0803b22d 	.word	0x0803b22d
 803b208:	0803b22d 	.word	0x0803b22d
 803b20c:	0803b22d 	.word	0x0803b22d
 803b210:	0803b22d 	.word	0x0803b22d
 803b214:	0803b22d 	.word	0x0803b22d
 803b218:	0803b22d 	.word	0x0803b22d
 803b21c:	0803b22d 	.word	0x0803b22d
 803b220:	0803b22d 	.word	0x0803b22d
 803b224:	0803b22d 	.word	0x0803b22d
 803b228:	0803b22d 	.word	0x0803b22d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 803b22c:	bf00      	nop
  }

  return (USBD_OK);
 803b22e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 803b230:	4618      	mov	r0, r3
 803b232:	370c      	adds	r7, #12
 803b234:	46bd      	mov	sp, r7
 803b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b23a:	4770      	bx	lr

0803b23c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 803b23c:	b580      	push	{r7, lr}
 803b23e:	b082      	sub	sp, #8
 803b240:	af00      	add	r7, sp, #0
 803b242:	6078      	str	r0, [r7, #4]
 803b244:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803b246:	6879      	ldr	r1, [r7, #4]
 803b248:	4805      	ldr	r0, [pc, #20]	; (803b260 <CDC_Receive_FS+0x24>)
 803b24a:	f7fe fc05 	bl	8039a58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 803b24e:	4804      	ldr	r0, [pc, #16]	; (803b260 <CDC_Receive_FS+0x24>)
 803b250:	f7fe fc20 	bl	8039a94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803b254:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803b256:	4618      	mov	r0, r3
 803b258:	3708      	adds	r7, #8
 803b25a:	46bd      	mov	sp, r7
 803b25c:	bd80      	pop	{r7, pc}
 803b25e:	bf00      	nop
 803b260:	24024bcc 	.word	0x24024bcc

0803b264 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803b264:	b480      	push	{r7}
 803b266:	b087      	sub	sp, #28
 803b268:	af00      	add	r7, sp, #0
 803b26a:	60f8      	str	r0, [r7, #12]
 803b26c:	60b9      	str	r1, [r7, #8]
 803b26e:	4613      	mov	r3, r2
 803b270:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803b272:	2300      	movs	r3, #0
 803b274:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803b276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803b27a:	4618      	mov	r0, r3
 803b27c:	371c      	adds	r7, #28
 803b27e:	46bd      	mov	sp, r7
 803b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b284:	4770      	bx	lr
	...

0803b288 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b288:	b480      	push	{r7}
 803b28a:	b083      	sub	sp, #12
 803b28c:	af00      	add	r7, sp, #0
 803b28e:	4603      	mov	r3, r0
 803b290:	6039      	str	r1, [r7, #0]
 803b292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 803b294:	683b      	ldr	r3, [r7, #0]
 803b296:	2212      	movs	r2, #18
 803b298:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 803b29a:	4b03      	ldr	r3, [pc, #12]	; (803b2a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 803b29c:	4618      	mov	r0, r3
 803b29e:	370c      	adds	r7, #12
 803b2a0:	46bd      	mov	sp, r7
 803b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b2a6:	4770      	bx	lr
 803b2a8:	240000d0 	.word	0x240000d0

0803b2ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b2ac:	b480      	push	{r7}
 803b2ae:	b083      	sub	sp, #12
 803b2b0:	af00      	add	r7, sp, #0
 803b2b2:	4603      	mov	r3, r0
 803b2b4:	6039      	str	r1, [r7, #0]
 803b2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 803b2b8:	683b      	ldr	r3, [r7, #0]
 803b2ba:	2204      	movs	r2, #4
 803b2bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 803b2be:	4b03      	ldr	r3, [pc, #12]	; (803b2cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 803b2c0:	4618      	mov	r0, r3
 803b2c2:	370c      	adds	r7, #12
 803b2c4:	46bd      	mov	sp, r7
 803b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b2ca:	4770      	bx	lr
 803b2cc:	240000e4 	.word	0x240000e4

0803b2d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b2d0:	b580      	push	{r7, lr}
 803b2d2:	b082      	sub	sp, #8
 803b2d4:	af00      	add	r7, sp, #0
 803b2d6:	4603      	mov	r3, r0
 803b2d8:	6039      	str	r1, [r7, #0]
 803b2da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803b2dc:	79fb      	ldrb	r3, [r7, #7]
 803b2de:	2b00      	cmp	r3, #0
 803b2e0:	d105      	bne.n	803b2ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803b2e2:	683a      	ldr	r2, [r7, #0]
 803b2e4:	4907      	ldr	r1, [pc, #28]	; (803b304 <USBD_FS_ProductStrDescriptor+0x34>)
 803b2e6:	4808      	ldr	r0, [pc, #32]	; (803b308 <USBD_FS_ProductStrDescriptor+0x38>)
 803b2e8:	f7ff fe1c 	bl	803af24 <USBD_GetString>
 803b2ec:	e004      	b.n	803b2f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803b2ee:	683a      	ldr	r2, [r7, #0]
 803b2f0:	4904      	ldr	r1, [pc, #16]	; (803b304 <USBD_FS_ProductStrDescriptor+0x34>)
 803b2f2:	4805      	ldr	r0, [pc, #20]	; (803b308 <USBD_FS_ProductStrDescriptor+0x38>)
 803b2f4:	f7ff fe16 	bl	803af24 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b2f8:	4b02      	ldr	r3, [pc, #8]	; (803b304 <USBD_FS_ProductStrDescriptor+0x34>)
}
 803b2fa:	4618      	mov	r0, r3
 803b2fc:	3708      	adds	r7, #8
 803b2fe:	46bd      	mov	sp, r7
 803b300:	bd80      	pop	{r7, pc}
 803b302:	bf00      	nop
 803b304:	24025ea8 	.word	0x24025ea8
 803b308:	0803dc1c 	.word	0x0803dc1c

0803b30c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b30c:	b580      	push	{r7, lr}
 803b30e:	b082      	sub	sp, #8
 803b310:	af00      	add	r7, sp, #0
 803b312:	4603      	mov	r3, r0
 803b314:	6039      	str	r1, [r7, #0]
 803b316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 803b318:	683a      	ldr	r2, [r7, #0]
 803b31a:	4904      	ldr	r1, [pc, #16]	; (803b32c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 803b31c:	4804      	ldr	r0, [pc, #16]	; (803b330 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 803b31e:	f7ff fe01 	bl	803af24 <USBD_GetString>
  return USBD_StrDesc;
 803b322:	4b02      	ldr	r3, [pc, #8]	; (803b32c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 803b324:	4618      	mov	r0, r3
 803b326:	3708      	adds	r7, #8
 803b328:	46bd      	mov	sp, r7
 803b32a:	bd80      	pop	{r7, pc}
 803b32c:	24025ea8 	.word	0x24025ea8
 803b330:	0803dc34 	.word	0x0803dc34

0803b334 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b334:	b580      	push	{r7, lr}
 803b336:	b082      	sub	sp, #8
 803b338:	af00      	add	r7, sp, #0
 803b33a:	4603      	mov	r3, r0
 803b33c:	6039      	str	r1, [r7, #0]
 803b33e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 803b340:	683b      	ldr	r3, [r7, #0]
 803b342:	221a      	movs	r2, #26
 803b344:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803b346:	f000 f843 	bl	803b3d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 803b34a:	4b02      	ldr	r3, [pc, #8]	; (803b354 <USBD_FS_SerialStrDescriptor+0x20>)
}
 803b34c:	4618      	mov	r0, r3
 803b34e:	3708      	adds	r7, #8
 803b350:	46bd      	mov	sp, r7
 803b352:	bd80      	pop	{r7, pc}
 803b354:	240000e8 	.word	0x240000e8

0803b358 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b358:	b580      	push	{r7, lr}
 803b35a:	b082      	sub	sp, #8
 803b35c:	af00      	add	r7, sp, #0
 803b35e:	4603      	mov	r3, r0
 803b360:	6039      	str	r1, [r7, #0]
 803b362:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 803b364:	79fb      	ldrb	r3, [r7, #7]
 803b366:	2b00      	cmp	r3, #0
 803b368:	d105      	bne.n	803b376 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803b36a:	683a      	ldr	r2, [r7, #0]
 803b36c:	4907      	ldr	r1, [pc, #28]	; (803b38c <USBD_FS_ConfigStrDescriptor+0x34>)
 803b36e:	4808      	ldr	r0, [pc, #32]	; (803b390 <USBD_FS_ConfigStrDescriptor+0x38>)
 803b370:	f7ff fdd8 	bl	803af24 <USBD_GetString>
 803b374:	e004      	b.n	803b380 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803b376:	683a      	ldr	r2, [r7, #0]
 803b378:	4904      	ldr	r1, [pc, #16]	; (803b38c <USBD_FS_ConfigStrDescriptor+0x34>)
 803b37a:	4805      	ldr	r0, [pc, #20]	; (803b390 <USBD_FS_ConfigStrDescriptor+0x38>)
 803b37c:	f7ff fdd2 	bl	803af24 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b380:	4b02      	ldr	r3, [pc, #8]	; (803b38c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 803b382:	4618      	mov	r0, r3
 803b384:	3708      	adds	r7, #8
 803b386:	46bd      	mov	sp, r7
 803b388:	bd80      	pop	{r7, pc}
 803b38a:	bf00      	nop
 803b38c:	24025ea8 	.word	0x24025ea8
 803b390:	0803dc48 	.word	0x0803dc48

0803b394 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b394:	b580      	push	{r7, lr}
 803b396:	b082      	sub	sp, #8
 803b398:	af00      	add	r7, sp, #0
 803b39a:	4603      	mov	r3, r0
 803b39c:	6039      	str	r1, [r7, #0]
 803b39e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803b3a0:	79fb      	ldrb	r3, [r7, #7]
 803b3a2:	2b00      	cmp	r3, #0
 803b3a4:	d105      	bne.n	803b3b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803b3a6:	683a      	ldr	r2, [r7, #0]
 803b3a8:	4907      	ldr	r1, [pc, #28]	; (803b3c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803b3aa:	4808      	ldr	r0, [pc, #32]	; (803b3cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 803b3ac:	f7ff fdba 	bl	803af24 <USBD_GetString>
 803b3b0:	e004      	b.n	803b3bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803b3b2:	683a      	ldr	r2, [r7, #0]
 803b3b4:	4904      	ldr	r1, [pc, #16]	; (803b3c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803b3b6:	4805      	ldr	r0, [pc, #20]	; (803b3cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 803b3b8:	f7ff fdb4 	bl	803af24 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b3bc:	4b02      	ldr	r3, [pc, #8]	; (803b3c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 803b3be:	4618      	mov	r0, r3
 803b3c0:	3708      	adds	r7, #8
 803b3c2:	46bd      	mov	sp, r7
 803b3c4:	bd80      	pop	{r7, pc}
 803b3c6:	bf00      	nop
 803b3c8:	24025ea8 	.word	0x24025ea8
 803b3cc:	0803dc54 	.word	0x0803dc54

0803b3d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 803b3d0:	b580      	push	{r7, lr}
 803b3d2:	b084      	sub	sp, #16
 803b3d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 803b3d6:	4b0f      	ldr	r3, [pc, #60]	; (803b414 <Get_SerialNum+0x44>)
 803b3d8:	681b      	ldr	r3, [r3, #0]
 803b3da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 803b3dc:	4b0e      	ldr	r3, [pc, #56]	; (803b418 <Get_SerialNum+0x48>)
 803b3de:	681b      	ldr	r3, [r3, #0]
 803b3e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 803b3e2:	4b0e      	ldr	r3, [pc, #56]	; (803b41c <Get_SerialNum+0x4c>)
 803b3e4:	681b      	ldr	r3, [r3, #0]
 803b3e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 803b3e8:	68fa      	ldr	r2, [r7, #12]
 803b3ea:	687b      	ldr	r3, [r7, #4]
 803b3ec:	4413      	add	r3, r2
 803b3ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803b3f0:	68fb      	ldr	r3, [r7, #12]
 803b3f2:	2b00      	cmp	r3, #0
 803b3f4:	d009      	beq.n	803b40a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 803b3f6:	2208      	movs	r2, #8
 803b3f8:	4909      	ldr	r1, [pc, #36]	; (803b420 <Get_SerialNum+0x50>)
 803b3fa:	68f8      	ldr	r0, [r7, #12]
 803b3fc:	f000 f814 	bl	803b428 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 803b400:	2204      	movs	r2, #4
 803b402:	4908      	ldr	r1, [pc, #32]	; (803b424 <Get_SerialNum+0x54>)
 803b404:	68b8      	ldr	r0, [r7, #8]
 803b406:	f000 f80f 	bl	803b428 <IntToUnicode>
  }
}
 803b40a:	bf00      	nop
 803b40c:	3710      	adds	r7, #16
 803b40e:	46bd      	mov	sp, r7
 803b410:	bd80      	pop	{r7, pc}
 803b412:	bf00      	nop
 803b414:	1ff1e800 	.word	0x1ff1e800
 803b418:	1ff1e804 	.word	0x1ff1e804
 803b41c:	1ff1e808 	.word	0x1ff1e808
 803b420:	240000ea 	.word	0x240000ea
 803b424:	240000fa 	.word	0x240000fa

0803b428 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 803b428:	b480      	push	{r7}
 803b42a:	b087      	sub	sp, #28
 803b42c:	af00      	add	r7, sp, #0
 803b42e:	60f8      	str	r0, [r7, #12]
 803b430:	60b9      	str	r1, [r7, #8]
 803b432:	4613      	mov	r3, r2
 803b434:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 803b436:	2300      	movs	r3, #0
 803b438:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 803b43a:	2300      	movs	r3, #0
 803b43c:	75fb      	strb	r3, [r7, #23]
 803b43e:	e027      	b.n	803b490 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 803b440:	68fb      	ldr	r3, [r7, #12]
 803b442:	0f1b      	lsrs	r3, r3, #28
 803b444:	2b09      	cmp	r3, #9
 803b446:	d80b      	bhi.n	803b460 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 803b448:	68fb      	ldr	r3, [r7, #12]
 803b44a:	0f1b      	lsrs	r3, r3, #28
 803b44c:	b2da      	uxtb	r2, r3
 803b44e:	7dfb      	ldrb	r3, [r7, #23]
 803b450:	005b      	lsls	r3, r3, #1
 803b452:	4619      	mov	r1, r3
 803b454:	68bb      	ldr	r3, [r7, #8]
 803b456:	440b      	add	r3, r1
 803b458:	3230      	adds	r2, #48	; 0x30
 803b45a:	b2d2      	uxtb	r2, r2
 803b45c:	701a      	strb	r2, [r3, #0]
 803b45e:	e00a      	b.n	803b476 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 803b460:	68fb      	ldr	r3, [r7, #12]
 803b462:	0f1b      	lsrs	r3, r3, #28
 803b464:	b2da      	uxtb	r2, r3
 803b466:	7dfb      	ldrb	r3, [r7, #23]
 803b468:	005b      	lsls	r3, r3, #1
 803b46a:	4619      	mov	r1, r3
 803b46c:	68bb      	ldr	r3, [r7, #8]
 803b46e:	440b      	add	r3, r1
 803b470:	3237      	adds	r2, #55	; 0x37
 803b472:	b2d2      	uxtb	r2, r2
 803b474:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 803b476:	68fb      	ldr	r3, [r7, #12]
 803b478:	011b      	lsls	r3, r3, #4
 803b47a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 803b47c:	7dfb      	ldrb	r3, [r7, #23]
 803b47e:	005b      	lsls	r3, r3, #1
 803b480:	3301      	adds	r3, #1
 803b482:	68ba      	ldr	r2, [r7, #8]
 803b484:	4413      	add	r3, r2
 803b486:	2200      	movs	r2, #0
 803b488:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803b48a:	7dfb      	ldrb	r3, [r7, #23]
 803b48c:	3301      	adds	r3, #1
 803b48e:	75fb      	strb	r3, [r7, #23]
 803b490:	7dfa      	ldrb	r2, [r7, #23]
 803b492:	79fb      	ldrb	r3, [r7, #7]
 803b494:	429a      	cmp	r2, r3
 803b496:	d3d3      	bcc.n	803b440 <IntToUnicode+0x18>
  }
}
 803b498:	bf00      	nop
 803b49a:	bf00      	nop
 803b49c:	371c      	adds	r7, #28
 803b49e:	46bd      	mov	sp, r7
 803b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b4a4:	4770      	bx	lr
	...

0803b4a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 803b4a8:	b580      	push	{r7, lr}
 803b4aa:	b0b8      	sub	sp, #224	; 0xe0
 803b4ac:	af00      	add	r7, sp, #0
 803b4ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803b4b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803b4b4:	2200      	movs	r2, #0
 803b4b6:	601a      	str	r2, [r3, #0]
 803b4b8:	605a      	str	r2, [r3, #4]
 803b4ba:	609a      	str	r2, [r3, #8]
 803b4bc:	60da      	str	r2, [r3, #12]
 803b4be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 803b4c0:	f107 0310 	add.w	r3, r7, #16
 803b4c4:	22bc      	movs	r2, #188	; 0xbc
 803b4c6:	2100      	movs	r1, #0
 803b4c8:	4618      	mov	r0, r3
 803b4ca:	f000 fbe9 	bl	803bca0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 803b4ce:	687b      	ldr	r3, [r7, #4]
 803b4d0:	681b      	ldr	r3, [r3, #0]
 803b4d2:	4a2f      	ldr	r2, [pc, #188]	; (803b590 <HAL_PCD_MspInit+0xe8>)
 803b4d4:	4293      	cmp	r3, r2
 803b4d6:	d156      	bne.n	803b586 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 803b4d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803b4dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 803b4de:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 803b4e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 803b4e6:	f107 0310 	add.w	r3, r7, #16
 803b4ea:	4618      	mov	r0, r3
 803b4ec:	f7f6 fa6e 	bl	80319cc <HAL_RCCEx_PeriphCLKConfig>
 803b4f0:	4603      	mov	r3, r0
 803b4f2:	2b00      	cmp	r3, #0
 803b4f4:	d001      	beq.n	803b4fa <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 803b4f6:	f7ee fa11 	bl	802991c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 803b4fa:	f7f5 fa9d 	bl	8030a38 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 803b4fe:	4b25      	ldr	r3, [pc, #148]	; (803b594 <HAL_PCD_MspInit+0xec>)
 803b500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803b504:	4a23      	ldr	r2, [pc, #140]	; (803b594 <HAL_PCD_MspInit+0xec>)
 803b506:	f043 0301 	orr.w	r3, r3, #1
 803b50a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 803b50e:	4b21      	ldr	r3, [pc, #132]	; (803b594 <HAL_PCD_MspInit+0xec>)
 803b510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803b514:	f003 0301 	and.w	r3, r3, #1
 803b518:	60fb      	str	r3, [r7, #12]
 803b51a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 803b51c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 803b520:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803b524:	2302      	movs	r3, #2
 803b526:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803b52a:	2300      	movs	r3, #0
 803b52c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803b530:	2300      	movs	r3, #0
 803b532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 803b536:	230a      	movs	r3, #10
 803b538:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803b53c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803b540:	4619      	mov	r1, r3
 803b542:	4815      	ldr	r0, [pc, #84]	; (803b598 <HAL_PCD_MspInit+0xf0>)
 803b544:	f7f2 fdf2 	bl	802e12c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 803b548:	4b12      	ldr	r3, [pc, #72]	; (803b594 <HAL_PCD_MspInit+0xec>)
 803b54a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803b54e:	4a11      	ldr	r2, [pc, #68]	; (803b594 <HAL_PCD_MspInit+0xec>)
 803b550:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803b554:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 803b558:	4b0e      	ldr	r3, [pc, #56]	; (803b594 <HAL_PCD_MspInit+0xec>)
 803b55a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803b55e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803b562:	60bb      	str	r3, [r7, #8]
 803b564:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 803b566:	2200      	movs	r2, #0
 803b568:	2100      	movs	r1, #0
 803b56a:	2062      	movs	r0, #98	; 0x62
 803b56c:	f7ef fd8b 	bl	802b086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 803b570:	2062      	movs	r0, #98	; 0x62
 803b572:	f7ef fda2 	bl	802b0ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 803b576:	2200      	movs	r2, #0
 803b578:	2100      	movs	r1, #0
 803b57a:	2065      	movs	r0, #101	; 0x65
 803b57c:	f7ef fd83 	bl	802b086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 803b580:	2065      	movs	r0, #101	; 0x65
 803b582:	f7ef fd9a 	bl	802b0ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 803b586:	bf00      	nop
 803b588:	37e0      	adds	r7, #224	; 0xe0
 803b58a:	46bd      	mov	sp, r7
 803b58c:	bd80      	pop	{r7, pc}
 803b58e:	bf00      	nop
 803b590:	40080000 	.word	0x40080000
 803b594:	58024400 	.word	0x58024400
 803b598:	58020000 	.word	0x58020000

0803b59c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b59c:	b580      	push	{r7, lr}
 803b59e:	b082      	sub	sp, #8
 803b5a0:	af00      	add	r7, sp, #0
 803b5a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 803b5a4:	687b      	ldr	r3, [r7, #4]
 803b5a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 803b5aa:	687b      	ldr	r3, [r7, #4]
 803b5ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803b5b0:	4619      	mov	r1, r3
 803b5b2:	4610      	mov	r0, r2
 803b5b4:	f7fe fb57 	bl	8039c66 <USBD_LL_SetupStage>
}
 803b5b8:	bf00      	nop
 803b5ba:	3708      	adds	r7, #8
 803b5bc:	46bd      	mov	sp, r7
 803b5be:	bd80      	pop	{r7, pc}

0803b5c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b5c0:	b580      	push	{r7, lr}
 803b5c2:	b082      	sub	sp, #8
 803b5c4:	af00      	add	r7, sp, #0
 803b5c6:	6078      	str	r0, [r7, #4]
 803b5c8:	460b      	mov	r3, r1
 803b5ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 803b5cc:	687b      	ldr	r3, [r7, #4]
 803b5ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803b5d2:	78fa      	ldrb	r2, [r7, #3]
 803b5d4:	6879      	ldr	r1, [r7, #4]
 803b5d6:	4613      	mov	r3, r2
 803b5d8:	00db      	lsls	r3, r3, #3
 803b5da:	4413      	add	r3, r2
 803b5dc:	009b      	lsls	r3, r3, #2
 803b5de:	440b      	add	r3, r1
 803b5e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 803b5e4:	681a      	ldr	r2, [r3, #0]
 803b5e6:	78fb      	ldrb	r3, [r7, #3]
 803b5e8:	4619      	mov	r1, r3
 803b5ea:	f7fe fb91 	bl	8039d10 <USBD_LL_DataOutStage>
}
 803b5ee:	bf00      	nop
 803b5f0:	3708      	adds	r7, #8
 803b5f2:	46bd      	mov	sp, r7
 803b5f4:	bd80      	pop	{r7, pc}

0803b5f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b5f6:	b580      	push	{r7, lr}
 803b5f8:	b082      	sub	sp, #8
 803b5fa:	af00      	add	r7, sp, #0
 803b5fc:	6078      	str	r0, [r7, #4]
 803b5fe:	460b      	mov	r3, r1
 803b600:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 803b602:	687b      	ldr	r3, [r7, #4]
 803b604:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803b608:	78fa      	ldrb	r2, [r7, #3]
 803b60a:	6879      	ldr	r1, [r7, #4]
 803b60c:	4613      	mov	r3, r2
 803b60e:	00db      	lsls	r3, r3, #3
 803b610:	4413      	add	r3, r2
 803b612:	009b      	lsls	r3, r3, #2
 803b614:	440b      	add	r3, r1
 803b616:	334c      	adds	r3, #76	; 0x4c
 803b618:	681a      	ldr	r2, [r3, #0]
 803b61a:	78fb      	ldrb	r3, [r7, #3]
 803b61c:	4619      	mov	r1, r3
 803b61e:	f7fe fc2a 	bl	8039e76 <USBD_LL_DataInStage>
}
 803b622:	bf00      	nop
 803b624:	3708      	adds	r7, #8
 803b626:	46bd      	mov	sp, r7
 803b628:	bd80      	pop	{r7, pc}

0803b62a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b62a:	b580      	push	{r7, lr}
 803b62c:	b082      	sub	sp, #8
 803b62e:	af00      	add	r7, sp, #0
 803b630:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803b632:	687b      	ldr	r3, [r7, #4]
 803b634:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b638:	4618      	mov	r0, r3
 803b63a:	f7fe fd5e 	bl	803a0fa <USBD_LL_SOF>
}
 803b63e:	bf00      	nop
 803b640:	3708      	adds	r7, #8
 803b642:	46bd      	mov	sp, r7
 803b644:	bd80      	pop	{r7, pc}

0803b646 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b646:	b580      	push	{r7, lr}
 803b648:	b084      	sub	sp, #16
 803b64a:	af00      	add	r7, sp, #0
 803b64c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 803b64e:	2301      	movs	r3, #1
 803b650:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 803b652:	687b      	ldr	r3, [r7, #4]
 803b654:	68db      	ldr	r3, [r3, #12]
 803b656:	2b00      	cmp	r3, #0
 803b658:	d102      	bne.n	803b660 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 803b65a:	2300      	movs	r3, #0
 803b65c:	73fb      	strb	r3, [r7, #15]
 803b65e:	e008      	b.n	803b672 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 803b660:	687b      	ldr	r3, [r7, #4]
 803b662:	68db      	ldr	r3, [r3, #12]
 803b664:	2b02      	cmp	r3, #2
 803b666:	d102      	bne.n	803b66e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 803b668:	2301      	movs	r3, #1
 803b66a:	73fb      	strb	r3, [r7, #15]
 803b66c:	e001      	b.n	803b672 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 803b66e:	f7ee f955 	bl	802991c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 803b672:	687b      	ldr	r3, [r7, #4]
 803b674:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b678:	7bfa      	ldrb	r2, [r7, #15]
 803b67a:	4611      	mov	r1, r2
 803b67c:	4618      	mov	r0, r3
 803b67e:	f7fe fcfe 	bl	803a07e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 803b682:	687b      	ldr	r3, [r7, #4]
 803b684:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b688:	4618      	mov	r0, r3
 803b68a:	f7fe fca6 	bl	8039fda <USBD_LL_Reset>
}
 803b68e:	bf00      	nop
 803b690:	3710      	adds	r7, #16
 803b692:	46bd      	mov	sp, r7
 803b694:	bd80      	pop	{r7, pc}
	...

0803b698 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b698:	b580      	push	{r7, lr}
 803b69a:	b082      	sub	sp, #8
 803b69c:	af00      	add	r7, sp, #0
 803b69e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803b6a0:	687b      	ldr	r3, [r7, #4]
 803b6a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b6a6:	4618      	mov	r0, r3
 803b6a8:	f7fe fcf9 	bl	803a09e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 803b6ac:	687b      	ldr	r3, [r7, #4]
 803b6ae:	681b      	ldr	r3, [r3, #0]
 803b6b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803b6b4:	681b      	ldr	r3, [r3, #0]
 803b6b6:	687a      	ldr	r2, [r7, #4]
 803b6b8:	6812      	ldr	r2, [r2, #0]
 803b6ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803b6be:	f043 0301 	orr.w	r3, r3, #1
 803b6c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 803b6c4:	687b      	ldr	r3, [r7, #4]
 803b6c6:	6a1b      	ldr	r3, [r3, #32]
 803b6c8:	2b00      	cmp	r3, #0
 803b6ca:	d005      	beq.n	803b6d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803b6cc:	4b04      	ldr	r3, [pc, #16]	; (803b6e0 <HAL_PCD_SuspendCallback+0x48>)
 803b6ce:	691b      	ldr	r3, [r3, #16]
 803b6d0:	4a03      	ldr	r2, [pc, #12]	; (803b6e0 <HAL_PCD_SuspendCallback+0x48>)
 803b6d2:	f043 0306 	orr.w	r3, r3, #6
 803b6d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 803b6d8:	bf00      	nop
 803b6da:	3708      	adds	r7, #8
 803b6dc:	46bd      	mov	sp, r7
 803b6de:	bd80      	pop	{r7, pc}
 803b6e0:	e000ed00 	.word	0xe000ed00

0803b6e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b6e4:	b580      	push	{r7, lr}
 803b6e6:	b082      	sub	sp, #8
 803b6e8:	af00      	add	r7, sp, #0
 803b6ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 803b6ec:	687b      	ldr	r3, [r7, #4]
 803b6ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b6f2:	4618      	mov	r0, r3
 803b6f4:	f7fe fce9 	bl	803a0ca <USBD_LL_Resume>
}
 803b6f8:	bf00      	nop
 803b6fa:	3708      	adds	r7, #8
 803b6fc:	46bd      	mov	sp, r7
 803b6fe:	bd80      	pop	{r7, pc}

0803b700 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b700:	b580      	push	{r7, lr}
 803b702:	b082      	sub	sp, #8
 803b704:	af00      	add	r7, sp, #0
 803b706:	6078      	str	r0, [r7, #4]
 803b708:	460b      	mov	r3, r1
 803b70a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803b70c:	687b      	ldr	r3, [r7, #4]
 803b70e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b712:	78fa      	ldrb	r2, [r7, #3]
 803b714:	4611      	mov	r1, r2
 803b716:	4618      	mov	r0, r3
 803b718:	f7fe fd41 	bl	803a19e <USBD_LL_IsoOUTIncomplete>
}
 803b71c:	bf00      	nop
 803b71e:	3708      	adds	r7, #8
 803b720:	46bd      	mov	sp, r7
 803b722:	bd80      	pop	{r7, pc}

0803b724 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b724:	b580      	push	{r7, lr}
 803b726:	b082      	sub	sp, #8
 803b728:	af00      	add	r7, sp, #0
 803b72a:	6078      	str	r0, [r7, #4]
 803b72c:	460b      	mov	r3, r1
 803b72e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803b730:	687b      	ldr	r3, [r7, #4]
 803b732:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b736:	78fa      	ldrb	r2, [r7, #3]
 803b738:	4611      	mov	r1, r2
 803b73a:	4618      	mov	r0, r3
 803b73c:	f7fe fcfd 	bl	803a13a <USBD_LL_IsoINIncomplete>
}
 803b740:	bf00      	nop
 803b742:	3708      	adds	r7, #8
 803b744:	46bd      	mov	sp, r7
 803b746:	bd80      	pop	{r7, pc}

0803b748 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b748:	b580      	push	{r7, lr}
 803b74a:	b082      	sub	sp, #8
 803b74c:	af00      	add	r7, sp, #0
 803b74e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 803b750:	687b      	ldr	r3, [r7, #4]
 803b752:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b756:	4618      	mov	r0, r3
 803b758:	f7fe fd53 	bl	803a202 <USBD_LL_DevConnected>
}
 803b75c:	bf00      	nop
 803b75e:	3708      	adds	r7, #8
 803b760:	46bd      	mov	sp, r7
 803b762:	bd80      	pop	{r7, pc}

0803b764 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b764:	b580      	push	{r7, lr}
 803b766:	b082      	sub	sp, #8
 803b768:	af00      	add	r7, sp, #0
 803b76a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 803b76c:	687b      	ldr	r3, [r7, #4]
 803b76e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b772:	4618      	mov	r0, r3
 803b774:	f7fe fd50 	bl	803a218 <USBD_LL_DevDisconnected>
}
 803b778:	bf00      	nop
 803b77a:	3708      	adds	r7, #8
 803b77c:	46bd      	mov	sp, r7
 803b77e:	bd80      	pop	{r7, pc}

0803b780 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 803b780:	b580      	push	{r7, lr}
 803b782:	b082      	sub	sp, #8
 803b784:	af00      	add	r7, sp, #0
 803b786:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 803b788:	687b      	ldr	r3, [r7, #4]
 803b78a:	781b      	ldrb	r3, [r3, #0]
 803b78c:	2b00      	cmp	r3, #0
 803b78e:	d13e      	bne.n	803b80e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 803b790:	4a21      	ldr	r2, [pc, #132]	; (803b818 <USBD_LL_Init+0x98>)
 803b792:	687b      	ldr	r3, [r7, #4]
 803b794:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 803b798:	687b      	ldr	r3, [r7, #4]
 803b79a:	4a1f      	ldr	r2, [pc, #124]	; (803b818 <USBD_LL_Init+0x98>)
 803b79c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 803b7a0:	4b1d      	ldr	r3, [pc, #116]	; (803b818 <USBD_LL_Init+0x98>)
 803b7a2:	4a1e      	ldr	r2, [pc, #120]	; (803b81c <USBD_LL_Init+0x9c>)
 803b7a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 803b7a6:	4b1c      	ldr	r3, [pc, #112]	; (803b818 <USBD_LL_Init+0x98>)
 803b7a8:	2209      	movs	r2, #9
 803b7aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803b7ac:	4b1a      	ldr	r3, [pc, #104]	; (803b818 <USBD_LL_Init+0x98>)
 803b7ae:	2202      	movs	r2, #2
 803b7b0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 803b7b2:	4b19      	ldr	r3, [pc, #100]	; (803b818 <USBD_LL_Init+0x98>)
 803b7b4:	2200      	movs	r2, #0
 803b7b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803b7b8:	4b17      	ldr	r3, [pc, #92]	; (803b818 <USBD_LL_Init+0x98>)
 803b7ba:	2202      	movs	r2, #2
 803b7bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 803b7be:	4b16      	ldr	r3, [pc, #88]	; (803b818 <USBD_LL_Init+0x98>)
 803b7c0:	2200      	movs	r2, #0
 803b7c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 803b7c4:	4b14      	ldr	r3, [pc, #80]	; (803b818 <USBD_LL_Init+0x98>)
 803b7c6:	2200      	movs	r2, #0
 803b7c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 803b7ca:	4b13      	ldr	r3, [pc, #76]	; (803b818 <USBD_LL_Init+0x98>)
 803b7cc:	2200      	movs	r2, #0
 803b7ce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 803b7d0:	4b11      	ldr	r3, [pc, #68]	; (803b818 <USBD_LL_Init+0x98>)
 803b7d2:	2200      	movs	r2, #0
 803b7d4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 803b7d6:	4b10      	ldr	r3, [pc, #64]	; (803b818 <USBD_LL_Init+0x98>)
 803b7d8:	2200      	movs	r2, #0
 803b7da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 803b7dc:	4b0e      	ldr	r3, [pc, #56]	; (803b818 <USBD_LL_Init+0x98>)
 803b7de:	2200      	movs	r2, #0
 803b7e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803b7e2:	480d      	ldr	r0, [pc, #52]	; (803b818 <USBD_LL_Init+0x98>)
 803b7e4:	f7f3 fe18 	bl	802f418 <HAL_PCD_Init>
 803b7e8:	4603      	mov	r3, r0
 803b7ea:	2b00      	cmp	r3, #0
 803b7ec:	d001      	beq.n	803b7f2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 803b7ee:	f7ee f895 	bl	802991c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803b7f2:	2180      	movs	r1, #128	; 0x80
 803b7f4:	4808      	ldr	r0, [pc, #32]	; (803b818 <USBD_LL_Init+0x98>)
 803b7f6:	f7f5 f8a4 	bl	8030942 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 803b7fa:	2240      	movs	r2, #64	; 0x40
 803b7fc:	2100      	movs	r1, #0
 803b7fe:	4806      	ldr	r0, [pc, #24]	; (803b818 <USBD_LL_Init+0x98>)
 803b800:	f7f5 f858 	bl	80308b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 803b804:	2280      	movs	r2, #128	; 0x80
 803b806:	2101      	movs	r1, #1
 803b808:	4803      	ldr	r0, [pc, #12]	; (803b818 <USBD_LL_Init+0x98>)
 803b80a:	f7f5 f853 	bl	80308b4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 803b80e:	2300      	movs	r3, #0
}
 803b810:	4618      	mov	r0, r3
 803b812:	3708      	adds	r7, #8
 803b814:	46bd      	mov	sp, r7
 803b816:	bd80      	pop	{r7, pc}
 803b818:	240260a8 	.word	0x240260a8
 803b81c:	40080000 	.word	0x40080000

0803b820 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 803b820:	b580      	push	{r7, lr}
 803b822:	b084      	sub	sp, #16
 803b824:	af00      	add	r7, sp, #0
 803b826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803b828:	2300      	movs	r3, #0
 803b82a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803b82c:	2300      	movs	r3, #0
 803b82e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 803b830:	687b      	ldr	r3, [r7, #4]
 803b832:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803b836:	4618      	mov	r0, r3
 803b838:	f7f3 ff12 	bl	802f660 <HAL_PCD_Start>
 803b83c:	4603      	mov	r3, r0
 803b83e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803b840:	7bfb      	ldrb	r3, [r7, #15]
 803b842:	4618      	mov	r0, r3
 803b844:	f000 f942 	bl	803bacc <USBD_Get_USB_Status>
 803b848:	4603      	mov	r3, r0
 803b84a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803b84c:	7bbb      	ldrb	r3, [r7, #14]
}
 803b84e:	4618      	mov	r0, r3
 803b850:	3710      	adds	r7, #16
 803b852:	46bd      	mov	sp, r7
 803b854:	bd80      	pop	{r7, pc}

0803b856 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 803b856:	b580      	push	{r7, lr}
 803b858:	b084      	sub	sp, #16
 803b85a:	af00      	add	r7, sp, #0
 803b85c:	6078      	str	r0, [r7, #4]
 803b85e:	4608      	mov	r0, r1
 803b860:	4611      	mov	r1, r2
 803b862:	461a      	mov	r2, r3
 803b864:	4603      	mov	r3, r0
 803b866:	70fb      	strb	r3, [r7, #3]
 803b868:	460b      	mov	r3, r1
 803b86a:	70bb      	strb	r3, [r7, #2]
 803b86c:	4613      	mov	r3, r2
 803b86e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803b870:	2300      	movs	r3, #0
 803b872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803b874:	2300      	movs	r3, #0
 803b876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 803b878:	687b      	ldr	r3, [r7, #4]
 803b87a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803b87e:	78bb      	ldrb	r3, [r7, #2]
 803b880:	883a      	ldrh	r2, [r7, #0]
 803b882:	78f9      	ldrb	r1, [r7, #3]
 803b884:	f7f4 fc10 	bl	80300a8 <HAL_PCD_EP_Open>
 803b888:	4603      	mov	r3, r0
 803b88a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803b88c:	7bfb      	ldrb	r3, [r7, #15]
 803b88e:	4618      	mov	r0, r3
 803b890:	f000 f91c 	bl	803bacc <USBD_Get_USB_Status>
 803b894:	4603      	mov	r3, r0
 803b896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803b898:	7bbb      	ldrb	r3, [r7, #14]
}
 803b89a:	4618      	mov	r0, r3
 803b89c:	3710      	adds	r7, #16
 803b89e:	46bd      	mov	sp, r7
 803b8a0:	bd80      	pop	{r7, pc}

0803b8a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803b8a2:	b580      	push	{r7, lr}
 803b8a4:	b084      	sub	sp, #16
 803b8a6:	af00      	add	r7, sp, #0
 803b8a8:	6078      	str	r0, [r7, #4]
 803b8aa:	460b      	mov	r3, r1
 803b8ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803b8ae:	2300      	movs	r3, #0
 803b8b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803b8b2:	2300      	movs	r3, #0
 803b8b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 803b8b6:	687b      	ldr	r3, [r7, #4]
 803b8b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803b8bc:	78fa      	ldrb	r2, [r7, #3]
 803b8be:	4611      	mov	r1, r2
 803b8c0:	4618      	mov	r0, r3
 803b8c2:	f7f4 fc59 	bl	8030178 <HAL_PCD_EP_Close>
 803b8c6:	4603      	mov	r3, r0
 803b8c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803b8ca:	7bfb      	ldrb	r3, [r7, #15]
 803b8cc:	4618      	mov	r0, r3
 803b8ce:	f000 f8fd 	bl	803bacc <USBD_Get_USB_Status>
 803b8d2:	4603      	mov	r3, r0
 803b8d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803b8d6:	7bbb      	ldrb	r3, [r7, #14]
}
 803b8d8:	4618      	mov	r0, r3
 803b8da:	3710      	adds	r7, #16
 803b8dc:	46bd      	mov	sp, r7
 803b8de:	bd80      	pop	{r7, pc}

0803b8e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803b8e0:	b580      	push	{r7, lr}
 803b8e2:	b084      	sub	sp, #16
 803b8e4:	af00      	add	r7, sp, #0
 803b8e6:	6078      	str	r0, [r7, #4]
 803b8e8:	460b      	mov	r3, r1
 803b8ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803b8ec:	2300      	movs	r3, #0
 803b8ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803b8f0:	2300      	movs	r3, #0
 803b8f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 803b8f4:	687b      	ldr	r3, [r7, #4]
 803b8f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803b8fa:	78fa      	ldrb	r2, [r7, #3]
 803b8fc:	4611      	mov	r1, r2
 803b8fe:	4618      	mov	r0, r3
 803b900:	f7f4 fd31 	bl	8030366 <HAL_PCD_EP_SetStall>
 803b904:	4603      	mov	r3, r0
 803b906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803b908:	7bfb      	ldrb	r3, [r7, #15]
 803b90a:	4618      	mov	r0, r3
 803b90c:	f000 f8de 	bl	803bacc <USBD_Get_USB_Status>
 803b910:	4603      	mov	r3, r0
 803b912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803b914:	7bbb      	ldrb	r3, [r7, #14]
}
 803b916:	4618      	mov	r0, r3
 803b918:	3710      	adds	r7, #16
 803b91a:	46bd      	mov	sp, r7
 803b91c:	bd80      	pop	{r7, pc}

0803b91e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803b91e:	b580      	push	{r7, lr}
 803b920:	b084      	sub	sp, #16
 803b922:	af00      	add	r7, sp, #0
 803b924:	6078      	str	r0, [r7, #4]
 803b926:	460b      	mov	r3, r1
 803b928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803b92a:	2300      	movs	r3, #0
 803b92c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803b92e:	2300      	movs	r3, #0
 803b930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803b932:	687b      	ldr	r3, [r7, #4]
 803b934:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803b938:	78fa      	ldrb	r2, [r7, #3]
 803b93a:	4611      	mov	r1, r2
 803b93c:	4618      	mov	r0, r3
 803b93e:	f7f4 fd76 	bl	803042e <HAL_PCD_EP_ClrStall>
 803b942:	4603      	mov	r3, r0
 803b944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803b946:	7bfb      	ldrb	r3, [r7, #15]
 803b948:	4618      	mov	r0, r3
 803b94a:	f000 f8bf 	bl	803bacc <USBD_Get_USB_Status>
 803b94e:	4603      	mov	r3, r0
 803b950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803b952:	7bbb      	ldrb	r3, [r7, #14]
}
 803b954:	4618      	mov	r0, r3
 803b956:	3710      	adds	r7, #16
 803b958:	46bd      	mov	sp, r7
 803b95a:	bd80      	pop	{r7, pc}

0803b95c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803b95c:	b480      	push	{r7}
 803b95e:	b085      	sub	sp, #20
 803b960:	af00      	add	r7, sp, #0
 803b962:	6078      	str	r0, [r7, #4]
 803b964:	460b      	mov	r3, r1
 803b966:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 803b968:	687b      	ldr	r3, [r7, #4]
 803b96a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803b96e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 803b970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803b974:	2b00      	cmp	r3, #0
 803b976:	da0b      	bge.n	803b990 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 803b978:	78fb      	ldrb	r3, [r7, #3]
 803b97a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803b97e:	68f9      	ldr	r1, [r7, #12]
 803b980:	4613      	mov	r3, r2
 803b982:	00db      	lsls	r3, r3, #3
 803b984:	4413      	add	r3, r2
 803b986:	009b      	lsls	r3, r3, #2
 803b988:	440b      	add	r3, r1
 803b98a:	333e      	adds	r3, #62	; 0x3e
 803b98c:	781b      	ldrb	r3, [r3, #0]
 803b98e:	e00b      	b.n	803b9a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 803b990:	78fb      	ldrb	r3, [r7, #3]
 803b992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803b996:	68f9      	ldr	r1, [r7, #12]
 803b998:	4613      	mov	r3, r2
 803b99a:	00db      	lsls	r3, r3, #3
 803b99c:	4413      	add	r3, r2
 803b99e:	009b      	lsls	r3, r3, #2
 803b9a0:	440b      	add	r3, r1
 803b9a2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 803b9a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 803b9a8:	4618      	mov	r0, r3
 803b9aa:	3714      	adds	r7, #20
 803b9ac:	46bd      	mov	sp, r7
 803b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b9b2:	4770      	bx	lr

0803b9b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 803b9b4:	b580      	push	{r7, lr}
 803b9b6:	b084      	sub	sp, #16
 803b9b8:	af00      	add	r7, sp, #0
 803b9ba:	6078      	str	r0, [r7, #4]
 803b9bc:	460b      	mov	r3, r1
 803b9be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803b9c0:	2300      	movs	r3, #0
 803b9c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803b9c4:	2300      	movs	r3, #0
 803b9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 803b9c8:	687b      	ldr	r3, [r7, #4]
 803b9ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803b9ce:	78fa      	ldrb	r2, [r7, #3]
 803b9d0:	4611      	mov	r1, r2
 803b9d2:	4618      	mov	r0, r3
 803b9d4:	f7f4 fb43 	bl	803005e <HAL_PCD_SetAddress>
 803b9d8:	4603      	mov	r3, r0
 803b9da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803b9dc:	7bfb      	ldrb	r3, [r7, #15]
 803b9de:	4618      	mov	r0, r3
 803b9e0:	f000 f874 	bl	803bacc <USBD_Get_USB_Status>
 803b9e4:	4603      	mov	r3, r0
 803b9e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803b9e8:	7bbb      	ldrb	r3, [r7, #14]
}
 803b9ea:	4618      	mov	r0, r3
 803b9ec:	3710      	adds	r7, #16
 803b9ee:	46bd      	mov	sp, r7
 803b9f0:	bd80      	pop	{r7, pc}

0803b9f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803b9f2:	b580      	push	{r7, lr}
 803b9f4:	b086      	sub	sp, #24
 803b9f6:	af00      	add	r7, sp, #0
 803b9f8:	60f8      	str	r0, [r7, #12]
 803b9fa:	607a      	str	r2, [r7, #4]
 803b9fc:	603b      	str	r3, [r7, #0]
 803b9fe:	460b      	mov	r3, r1
 803ba00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ba02:	2300      	movs	r3, #0
 803ba04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ba06:	2300      	movs	r3, #0
 803ba08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 803ba0a:	68fb      	ldr	r3, [r7, #12]
 803ba0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803ba10:	7af9      	ldrb	r1, [r7, #11]
 803ba12:	683b      	ldr	r3, [r7, #0]
 803ba14:	687a      	ldr	r2, [r7, #4]
 803ba16:	f7f4 fc5c 	bl	80302d2 <HAL_PCD_EP_Transmit>
 803ba1a:	4603      	mov	r3, r0
 803ba1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ba1e:	7dfb      	ldrb	r3, [r7, #23]
 803ba20:	4618      	mov	r0, r3
 803ba22:	f000 f853 	bl	803bacc <USBD_Get_USB_Status>
 803ba26:	4603      	mov	r3, r0
 803ba28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803ba2a:	7dbb      	ldrb	r3, [r7, #22]
}
 803ba2c:	4618      	mov	r0, r3
 803ba2e:	3718      	adds	r7, #24
 803ba30:	46bd      	mov	sp, r7
 803ba32:	bd80      	pop	{r7, pc}

0803ba34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803ba34:	b580      	push	{r7, lr}
 803ba36:	b086      	sub	sp, #24
 803ba38:	af00      	add	r7, sp, #0
 803ba3a:	60f8      	str	r0, [r7, #12]
 803ba3c:	607a      	str	r2, [r7, #4]
 803ba3e:	603b      	str	r3, [r7, #0]
 803ba40:	460b      	mov	r3, r1
 803ba42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ba44:	2300      	movs	r3, #0
 803ba46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ba48:	2300      	movs	r3, #0
 803ba4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 803ba4c:	68fb      	ldr	r3, [r7, #12]
 803ba4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803ba52:	7af9      	ldrb	r1, [r7, #11]
 803ba54:	683b      	ldr	r3, [r7, #0]
 803ba56:	687a      	ldr	r2, [r7, #4]
 803ba58:	f7f4 fbd8 	bl	803020c <HAL_PCD_EP_Receive>
 803ba5c:	4603      	mov	r3, r0
 803ba5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ba60:	7dfb      	ldrb	r3, [r7, #23]
 803ba62:	4618      	mov	r0, r3
 803ba64:	f000 f832 	bl	803bacc <USBD_Get_USB_Status>
 803ba68:	4603      	mov	r3, r0
 803ba6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803ba6c:	7dbb      	ldrb	r3, [r7, #22]
}
 803ba6e:	4618      	mov	r0, r3
 803ba70:	3718      	adds	r7, #24
 803ba72:	46bd      	mov	sp, r7
 803ba74:	bd80      	pop	{r7, pc}

0803ba76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803ba76:	b580      	push	{r7, lr}
 803ba78:	b082      	sub	sp, #8
 803ba7a:	af00      	add	r7, sp, #0
 803ba7c:	6078      	str	r0, [r7, #4]
 803ba7e:	460b      	mov	r3, r1
 803ba80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 803ba82:	687b      	ldr	r3, [r7, #4]
 803ba84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ba88:	78fa      	ldrb	r2, [r7, #3]
 803ba8a:	4611      	mov	r1, r2
 803ba8c:	4618      	mov	r0, r3
 803ba8e:	f7f4 fc08 	bl	80302a2 <HAL_PCD_EP_GetRxCount>
 803ba92:	4603      	mov	r3, r0
}
 803ba94:	4618      	mov	r0, r3
 803ba96:	3708      	adds	r7, #8
 803ba98:	46bd      	mov	sp, r7
 803ba9a:	bd80      	pop	{r7, pc}

0803ba9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 803ba9c:	b480      	push	{r7}
 803ba9e:	b083      	sub	sp, #12
 803baa0:	af00      	add	r7, sp, #0
 803baa2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 803baa4:	4b03      	ldr	r3, [pc, #12]	; (803bab4 <USBD_static_malloc+0x18>)
}
 803baa6:	4618      	mov	r0, r3
 803baa8:	370c      	adds	r7, #12
 803baaa:	46bd      	mov	sp, r7
 803baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bab0:	4770      	bx	lr
 803bab2:	bf00      	nop
 803bab4:	240265b4 	.word	0x240265b4

0803bab8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 803bab8:	b480      	push	{r7}
 803baba:	b083      	sub	sp, #12
 803babc:	af00      	add	r7, sp, #0
 803babe:	6078      	str	r0, [r7, #4]

}
 803bac0:	bf00      	nop
 803bac2:	370c      	adds	r7, #12
 803bac4:	46bd      	mov	sp, r7
 803bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803baca:	4770      	bx	lr

0803bacc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 803bacc:	b480      	push	{r7}
 803bace:	b085      	sub	sp, #20
 803bad0:	af00      	add	r7, sp, #0
 803bad2:	4603      	mov	r3, r0
 803bad4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bad6:	2300      	movs	r3, #0
 803bad8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 803bada:	79fb      	ldrb	r3, [r7, #7]
 803badc:	2b03      	cmp	r3, #3
 803bade:	d817      	bhi.n	803bb10 <USBD_Get_USB_Status+0x44>
 803bae0:	a201      	add	r2, pc, #4	; (adr r2, 803bae8 <USBD_Get_USB_Status+0x1c>)
 803bae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803bae6:	bf00      	nop
 803bae8:	0803baf9 	.word	0x0803baf9
 803baec:	0803baff 	.word	0x0803baff
 803baf0:	0803bb05 	.word	0x0803bb05
 803baf4:	0803bb0b 	.word	0x0803bb0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 803baf8:	2300      	movs	r3, #0
 803bafa:	73fb      	strb	r3, [r7, #15]
    break;
 803bafc:	e00b      	b.n	803bb16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 803bafe:	2303      	movs	r3, #3
 803bb00:	73fb      	strb	r3, [r7, #15]
    break;
 803bb02:	e008      	b.n	803bb16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 803bb04:	2301      	movs	r3, #1
 803bb06:	73fb      	strb	r3, [r7, #15]
    break;
 803bb08:	e005      	b.n	803bb16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 803bb0a:	2303      	movs	r3, #3
 803bb0c:	73fb      	strb	r3, [r7, #15]
    break;
 803bb0e:	e002      	b.n	803bb16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 803bb10:	2303      	movs	r3, #3
 803bb12:	73fb      	strb	r3, [r7, #15]
    break;
 803bb14:	bf00      	nop
  }
  return usb_status;
 803bb16:	7bfb      	ldrb	r3, [r7, #15]
}
 803bb18:	4618      	mov	r0, r3
 803bb1a:	3714      	adds	r7, #20
 803bb1c:	46bd      	mov	sp, r7
 803bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bb22:	4770      	bx	lr

0803bb24 <_ZdlPvj>:
 803bb24:	f000 b817 	b.w	803bb56 <_ZdlPv>

0803bb28 <_Znwj>:
 803bb28:	2801      	cmp	r0, #1
 803bb2a:	bf38      	it	cc
 803bb2c:	2001      	movcc	r0, #1
 803bb2e:	b510      	push	{r4, lr}
 803bb30:	4604      	mov	r4, r0
 803bb32:	4620      	mov	r0, r4
 803bb34:	f000 f87c 	bl	803bc30 <malloc>
 803bb38:	b930      	cbnz	r0, 803bb48 <_Znwj+0x20>
 803bb3a:	f000 f80f 	bl	803bb5c <_ZSt15get_new_handlerv>
 803bb3e:	b908      	cbnz	r0, 803bb44 <_Znwj+0x1c>
 803bb40:	f000 f814 	bl	803bb6c <abort>
 803bb44:	4780      	blx	r0
 803bb46:	e7f4      	b.n	803bb32 <_Znwj+0xa>
 803bb48:	bd10      	pop	{r4, pc}

0803bb4a <_ZSt17__throw_bad_allocv>:
 803bb4a:	b508      	push	{r3, lr}
 803bb4c:	f000 f80e 	bl	803bb6c <abort>

0803bb50 <_ZSt20__throw_length_errorPKc>:
 803bb50:	b508      	push	{r3, lr}
 803bb52:	f000 f80b 	bl	803bb6c <abort>

0803bb56 <_ZdlPv>:
 803bb56:	f000 b873 	b.w	803bc40 <free>
	...

0803bb5c <_ZSt15get_new_handlerv>:
 803bb5c:	4b02      	ldr	r3, [pc, #8]	; (803bb68 <_ZSt15get_new_handlerv+0xc>)
 803bb5e:	6818      	ldr	r0, [r3, #0]
 803bb60:	f3bf 8f5b 	dmb	ish
 803bb64:	4770      	bx	lr
 803bb66:	bf00      	nop
 803bb68:	240267d4 	.word	0x240267d4

0803bb6c <abort>:
 803bb6c:	b508      	push	{r3, lr}
 803bb6e:	2006      	movs	r0, #6
 803bb70:	f000 fca4 	bl	803c4bc <raise>
 803bb74:	2001      	movs	r0, #1
 803bb76:	f7ee f90f 	bl	8029d98 <_exit>
	...

0803bb7c <__assert_func>:
 803bb7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803bb7e:	4614      	mov	r4, r2
 803bb80:	461a      	mov	r2, r3
 803bb82:	4b09      	ldr	r3, [pc, #36]	; (803bba8 <__assert_func+0x2c>)
 803bb84:	681b      	ldr	r3, [r3, #0]
 803bb86:	4605      	mov	r5, r0
 803bb88:	68d8      	ldr	r0, [r3, #12]
 803bb8a:	b14c      	cbz	r4, 803bba0 <__assert_func+0x24>
 803bb8c:	4b07      	ldr	r3, [pc, #28]	; (803bbac <__assert_func+0x30>)
 803bb8e:	9100      	str	r1, [sp, #0]
 803bb90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803bb94:	4906      	ldr	r1, [pc, #24]	; (803bbb0 <__assert_func+0x34>)
 803bb96:	462b      	mov	r3, r5
 803bb98:	f000 f814 	bl	803bbc4 <fiprintf>
 803bb9c:	f7ff ffe6 	bl	803bb6c <abort>
 803bba0:	4b04      	ldr	r3, [pc, #16]	; (803bbb4 <__assert_func+0x38>)
 803bba2:	461c      	mov	r4, r3
 803bba4:	e7f3      	b.n	803bb8e <__assert_func+0x12>
 803bba6:	bf00      	nop
 803bba8:	24000104 	.word	0x24000104
 803bbac:	0805831c 	.word	0x0805831c
 803bbb0:	08058329 	.word	0x08058329
 803bbb4:	08058357 	.word	0x08058357

0803bbb8 <__errno>:
 803bbb8:	4b01      	ldr	r3, [pc, #4]	; (803bbc0 <__errno+0x8>)
 803bbba:	6818      	ldr	r0, [r3, #0]
 803bbbc:	4770      	bx	lr
 803bbbe:	bf00      	nop
 803bbc0:	24000104 	.word	0x24000104

0803bbc4 <fiprintf>:
 803bbc4:	b40e      	push	{r1, r2, r3}
 803bbc6:	b503      	push	{r0, r1, lr}
 803bbc8:	4601      	mov	r1, r0
 803bbca:	ab03      	add	r3, sp, #12
 803bbcc:	4805      	ldr	r0, [pc, #20]	; (803bbe4 <fiprintf+0x20>)
 803bbce:	f853 2b04 	ldr.w	r2, [r3], #4
 803bbd2:	6800      	ldr	r0, [r0, #0]
 803bbd4:	9301      	str	r3, [sp, #4]
 803bbd6:	f000 f975 	bl	803bec4 <_vfiprintf_r>
 803bbda:	b002      	add	sp, #8
 803bbdc:	f85d eb04 	ldr.w	lr, [sp], #4
 803bbe0:	b003      	add	sp, #12
 803bbe2:	4770      	bx	lr
 803bbe4:	24000104 	.word	0x24000104

0803bbe8 <__libc_init_array>:
 803bbe8:	b570      	push	{r4, r5, r6, lr}
 803bbea:	4d0d      	ldr	r5, [pc, #52]	; (803bc20 <__libc_init_array+0x38>)
 803bbec:	4c0d      	ldr	r4, [pc, #52]	; (803bc24 <__libc_init_array+0x3c>)
 803bbee:	1b64      	subs	r4, r4, r5
 803bbf0:	10a4      	asrs	r4, r4, #2
 803bbf2:	2600      	movs	r6, #0
 803bbf4:	42a6      	cmp	r6, r4
 803bbf6:	d109      	bne.n	803bc0c <__libc_init_array+0x24>
 803bbf8:	4d0b      	ldr	r5, [pc, #44]	; (803bc28 <__libc_init_array+0x40>)
 803bbfa:	4c0c      	ldr	r4, [pc, #48]	; (803bc2c <__libc_init_array+0x44>)
 803bbfc:	f001 f812 	bl	803cc24 <_init>
 803bc00:	1b64      	subs	r4, r4, r5
 803bc02:	10a4      	asrs	r4, r4, #2
 803bc04:	2600      	movs	r6, #0
 803bc06:	42a6      	cmp	r6, r4
 803bc08:	d105      	bne.n	803bc16 <__libc_init_array+0x2e>
 803bc0a:	bd70      	pop	{r4, r5, r6, pc}
 803bc0c:	f855 3b04 	ldr.w	r3, [r5], #4
 803bc10:	4798      	blx	r3
 803bc12:	3601      	adds	r6, #1
 803bc14:	e7ee      	b.n	803bbf4 <__libc_init_array+0xc>
 803bc16:	f855 3b04 	ldr.w	r3, [r5], #4
 803bc1a:	4798      	blx	r3
 803bc1c:	3601      	adds	r6, #1
 803bc1e:	e7f2      	b.n	803bc06 <__libc_init_array+0x1e>
 803bc20:	080583f8 	.word	0x080583f8
 803bc24:	080583f8 	.word	0x080583f8
 803bc28:	080583f8 	.word	0x080583f8
 803bc2c:	08058400 	.word	0x08058400

0803bc30 <malloc>:
 803bc30:	4b02      	ldr	r3, [pc, #8]	; (803bc3c <malloc+0xc>)
 803bc32:	4601      	mov	r1, r0
 803bc34:	6818      	ldr	r0, [r3, #0]
 803bc36:	f000 b8a7 	b.w	803bd88 <_malloc_r>
 803bc3a:	bf00      	nop
 803bc3c:	24000104 	.word	0x24000104

0803bc40 <free>:
 803bc40:	4b02      	ldr	r3, [pc, #8]	; (803bc4c <free+0xc>)
 803bc42:	4601      	mov	r1, r0
 803bc44:	6818      	ldr	r0, [r3, #0]
 803bc46:	f000 b833 	b.w	803bcb0 <_free_r>
 803bc4a:	bf00      	nop
 803bc4c:	24000104 	.word	0x24000104

0803bc50 <memcpy>:
 803bc50:	440a      	add	r2, r1
 803bc52:	4291      	cmp	r1, r2
 803bc54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 803bc58:	d100      	bne.n	803bc5c <memcpy+0xc>
 803bc5a:	4770      	bx	lr
 803bc5c:	b510      	push	{r4, lr}
 803bc5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 803bc62:	f803 4f01 	strb.w	r4, [r3, #1]!
 803bc66:	4291      	cmp	r1, r2
 803bc68:	d1f9      	bne.n	803bc5e <memcpy+0xe>
 803bc6a:	bd10      	pop	{r4, pc}

0803bc6c <memmove>:
 803bc6c:	4288      	cmp	r0, r1
 803bc6e:	b510      	push	{r4, lr}
 803bc70:	eb01 0402 	add.w	r4, r1, r2
 803bc74:	d902      	bls.n	803bc7c <memmove+0x10>
 803bc76:	4284      	cmp	r4, r0
 803bc78:	4623      	mov	r3, r4
 803bc7a:	d807      	bhi.n	803bc8c <memmove+0x20>
 803bc7c:	1e43      	subs	r3, r0, #1
 803bc7e:	42a1      	cmp	r1, r4
 803bc80:	d008      	beq.n	803bc94 <memmove+0x28>
 803bc82:	f811 2b01 	ldrb.w	r2, [r1], #1
 803bc86:	f803 2f01 	strb.w	r2, [r3, #1]!
 803bc8a:	e7f8      	b.n	803bc7e <memmove+0x12>
 803bc8c:	4402      	add	r2, r0
 803bc8e:	4601      	mov	r1, r0
 803bc90:	428a      	cmp	r2, r1
 803bc92:	d100      	bne.n	803bc96 <memmove+0x2a>
 803bc94:	bd10      	pop	{r4, pc}
 803bc96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803bc9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803bc9e:	e7f7      	b.n	803bc90 <memmove+0x24>

0803bca0 <memset>:
 803bca0:	4402      	add	r2, r0
 803bca2:	4603      	mov	r3, r0
 803bca4:	4293      	cmp	r3, r2
 803bca6:	d100      	bne.n	803bcaa <memset+0xa>
 803bca8:	4770      	bx	lr
 803bcaa:	f803 1b01 	strb.w	r1, [r3], #1
 803bcae:	e7f9      	b.n	803bca4 <memset+0x4>

0803bcb0 <_free_r>:
 803bcb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803bcb2:	2900      	cmp	r1, #0
 803bcb4:	d044      	beq.n	803bd40 <_free_r+0x90>
 803bcb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803bcba:	9001      	str	r0, [sp, #4]
 803bcbc:	2b00      	cmp	r3, #0
 803bcbe:	f1a1 0404 	sub.w	r4, r1, #4
 803bcc2:	bfb8      	it	lt
 803bcc4:	18e4      	addlt	r4, r4, r3
 803bcc6:	f000 fef5 	bl	803cab4 <__malloc_lock>
 803bcca:	4a1e      	ldr	r2, [pc, #120]	; (803bd44 <_free_r+0x94>)
 803bccc:	9801      	ldr	r0, [sp, #4]
 803bcce:	6813      	ldr	r3, [r2, #0]
 803bcd0:	b933      	cbnz	r3, 803bce0 <_free_r+0x30>
 803bcd2:	6063      	str	r3, [r4, #4]
 803bcd4:	6014      	str	r4, [r2, #0]
 803bcd6:	b003      	add	sp, #12
 803bcd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803bcdc:	f000 bef0 	b.w	803cac0 <__malloc_unlock>
 803bce0:	42a3      	cmp	r3, r4
 803bce2:	d908      	bls.n	803bcf6 <_free_r+0x46>
 803bce4:	6825      	ldr	r5, [r4, #0]
 803bce6:	1961      	adds	r1, r4, r5
 803bce8:	428b      	cmp	r3, r1
 803bcea:	bf01      	itttt	eq
 803bcec:	6819      	ldreq	r1, [r3, #0]
 803bcee:	685b      	ldreq	r3, [r3, #4]
 803bcf0:	1949      	addeq	r1, r1, r5
 803bcf2:	6021      	streq	r1, [r4, #0]
 803bcf4:	e7ed      	b.n	803bcd2 <_free_r+0x22>
 803bcf6:	461a      	mov	r2, r3
 803bcf8:	685b      	ldr	r3, [r3, #4]
 803bcfa:	b10b      	cbz	r3, 803bd00 <_free_r+0x50>
 803bcfc:	42a3      	cmp	r3, r4
 803bcfe:	d9fa      	bls.n	803bcf6 <_free_r+0x46>
 803bd00:	6811      	ldr	r1, [r2, #0]
 803bd02:	1855      	adds	r5, r2, r1
 803bd04:	42a5      	cmp	r5, r4
 803bd06:	d10b      	bne.n	803bd20 <_free_r+0x70>
 803bd08:	6824      	ldr	r4, [r4, #0]
 803bd0a:	4421      	add	r1, r4
 803bd0c:	1854      	adds	r4, r2, r1
 803bd0e:	42a3      	cmp	r3, r4
 803bd10:	6011      	str	r1, [r2, #0]
 803bd12:	d1e0      	bne.n	803bcd6 <_free_r+0x26>
 803bd14:	681c      	ldr	r4, [r3, #0]
 803bd16:	685b      	ldr	r3, [r3, #4]
 803bd18:	6053      	str	r3, [r2, #4]
 803bd1a:	4421      	add	r1, r4
 803bd1c:	6011      	str	r1, [r2, #0]
 803bd1e:	e7da      	b.n	803bcd6 <_free_r+0x26>
 803bd20:	d902      	bls.n	803bd28 <_free_r+0x78>
 803bd22:	230c      	movs	r3, #12
 803bd24:	6003      	str	r3, [r0, #0]
 803bd26:	e7d6      	b.n	803bcd6 <_free_r+0x26>
 803bd28:	6825      	ldr	r5, [r4, #0]
 803bd2a:	1961      	adds	r1, r4, r5
 803bd2c:	428b      	cmp	r3, r1
 803bd2e:	bf04      	itt	eq
 803bd30:	6819      	ldreq	r1, [r3, #0]
 803bd32:	685b      	ldreq	r3, [r3, #4]
 803bd34:	6063      	str	r3, [r4, #4]
 803bd36:	bf04      	itt	eq
 803bd38:	1949      	addeq	r1, r1, r5
 803bd3a:	6021      	streq	r1, [r4, #0]
 803bd3c:	6054      	str	r4, [r2, #4]
 803bd3e:	e7ca      	b.n	803bcd6 <_free_r+0x26>
 803bd40:	b003      	add	sp, #12
 803bd42:	bd30      	pop	{r4, r5, pc}
 803bd44:	240267d8 	.word	0x240267d8

0803bd48 <sbrk_aligned>:
 803bd48:	b570      	push	{r4, r5, r6, lr}
 803bd4a:	4e0e      	ldr	r6, [pc, #56]	; (803bd84 <sbrk_aligned+0x3c>)
 803bd4c:	460c      	mov	r4, r1
 803bd4e:	6831      	ldr	r1, [r6, #0]
 803bd50:	4605      	mov	r5, r0
 803bd52:	b911      	cbnz	r1, 803bd5a <sbrk_aligned+0x12>
 803bd54:	f000 fb7a 	bl	803c44c <_sbrk_r>
 803bd58:	6030      	str	r0, [r6, #0]
 803bd5a:	4621      	mov	r1, r4
 803bd5c:	4628      	mov	r0, r5
 803bd5e:	f000 fb75 	bl	803c44c <_sbrk_r>
 803bd62:	1c43      	adds	r3, r0, #1
 803bd64:	d00a      	beq.n	803bd7c <sbrk_aligned+0x34>
 803bd66:	1cc4      	adds	r4, r0, #3
 803bd68:	f024 0403 	bic.w	r4, r4, #3
 803bd6c:	42a0      	cmp	r0, r4
 803bd6e:	d007      	beq.n	803bd80 <sbrk_aligned+0x38>
 803bd70:	1a21      	subs	r1, r4, r0
 803bd72:	4628      	mov	r0, r5
 803bd74:	f000 fb6a 	bl	803c44c <_sbrk_r>
 803bd78:	3001      	adds	r0, #1
 803bd7a:	d101      	bne.n	803bd80 <sbrk_aligned+0x38>
 803bd7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803bd80:	4620      	mov	r0, r4
 803bd82:	bd70      	pop	{r4, r5, r6, pc}
 803bd84:	240267dc 	.word	0x240267dc

0803bd88 <_malloc_r>:
 803bd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803bd8c:	1ccd      	adds	r5, r1, #3
 803bd8e:	f025 0503 	bic.w	r5, r5, #3
 803bd92:	3508      	adds	r5, #8
 803bd94:	2d0c      	cmp	r5, #12
 803bd96:	bf38      	it	cc
 803bd98:	250c      	movcc	r5, #12
 803bd9a:	2d00      	cmp	r5, #0
 803bd9c:	4607      	mov	r7, r0
 803bd9e:	db01      	blt.n	803bda4 <_malloc_r+0x1c>
 803bda0:	42a9      	cmp	r1, r5
 803bda2:	d905      	bls.n	803bdb0 <_malloc_r+0x28>
 803bda4:	230c      	movs	r3, #12
 803bda6:	603b      	str	r3, [r7, #0]
 803bda8:	2600      	movs	r6, #0
 803bdaa:	4630      	mov	r0, r6
 803bdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803bdb0:	4e2e      	ldr	r6, [pc, #184]	; (803be6c <_malloc_r+0xe4>)
 803bdb2:	f000 fe7f 	bl	803cab4 <__malloc_lock>
 803bdb6:	6833      	ldr	r3, [r6, #0]
 803bdb8:	461c      	mov	r4, r3
 803bdba:	bb34      	cbnz	r4, 803be0a <_malloc_r+0x82>
 803bdbc:	4629      	mov	r1, r5
 803bdbe:	4638      	mov	r0, r7
 803bdc0:	f7ff ffc2 	bl	803bd48 <sbrk_aligned>
 803bdc4:	1c43      	adds	r3, r0, #1
 803bdc6:	4604      	mov	r4, r0
 803bdc8:	d14d      	bne.n	803be66 <_malloc_r+0xde>
 803bdca:	6834      	ldr	r4, [r6, #0]
 803bdcc:	4626      	mov	r6, r4
 803bdce:	2e00      	cmp	r6, #0
 803bdd0:	d140      	bne.n	803be54 <_malloc_r+0xcc>
 803bdd2:	6823      	ldr	r3, [r4, #0]
 803bdd4:	4631      	mov	r1, r6
 803bdd6:	4638      	mov	r0, r7
 803bdd8:	eb04 0803 	add.w	r8, r4, r3
 803bddc:	f000 fb36 	bl	803c44c <_sbrk_r>
 803bde0:	4580      	cmp	r8, r0
 803bde2:	d13a      	bne.n	803be5a <_malloc_r+0xd2>
 803bde4:	6821      	ldr	r1, [r4, #0]
 803bde6:	3503      	adds	r5, #3
 803bde8:	1a6d      	subs	r5, r5, r1
 803bdea:	f025 0503 	bic.w	r5, r5, #3
 803bdee:	3508      	adds	r5, #8
 803bdf0:	2d0c      	cmp	r5, #12
 803bdf2:	bf38      	it	cc
 803bdf4:	250c      	movcc	r5, #12
 803bdf6:	4629      	mov	r1, r5
 803bdf8:	4638      	mov	r0, r7
 803bdfa:	f7ff ffa5 	bl	803bd48 <sbrk_aligned>
 803bdfe:	3001      	adds	r0, #1
 803be00:	d02b      	beq.n	803be5a <_malloc_r+0xd2>
 803be02:	6823      	ldr	r3, [r4, #0]
 803be04:	442b      	add	r3, r5
 803be06:	6023      	str	r3, [r4, #0]
 803be08:	e00e      	b.n	803be28 <_malloc_r+0xa0>
 803be0a:	6822      	ldr	r2, [r4, #0]
 803be0c:	1b52      	subs	r2, r2, r5
 803be0e:	d41e      	bmi.n	803be4e <_malloc_r+0xc6>
 803be10:	2a0b      	cmp	r2, #11
 803be12:	d916      	bls.n	803be42 <_malloc_r+0xba>
 803be14:	1961      	adds	r1, r4, r5
 803be16:	42a3      	cmp	r3, r4
 803be18:	6025      	str	r5, [r4, #0]
 803be1a:	bf18      	it	ne
 803be1c:	6059      	strne	r1, [r3, #4]
 803be1e:	6863      	ldr	r3, [r4, #4]
 803be20:	bf08      	it	eq
 803be22:	6031      	streq	r1, [r6, #0]
 803be24:	5162      	str	r2, [r4, r5]
 803be26:	604b      	str	r3, [r1, #4]
 803be28:	4638      	mov	r0, r7
 803be2a:	f104 060b 	add.w	r6, r4, #11
 803be2e:	f000 fe47 	bl	803cac0 <__malloc_unlock>
 803be32:	f026 0607 	bic.w	r6, r6, #7
 803be36:	1d23      	adds	r3, r4, #4
 803be38:	1af2      	subs	r2, r6, r3
 803be3a:	d0b6      	beq.n	803bdaa <_malloc_r+0x22>
 803be3c:	1b9b      	subs	r3, r3, r6
 803be3e:	50a3      	str	r3, [r4, r2]
 803be40:	e7b3      	b.n	803bdaa <_malloc_r+0x22>
 803be42:	6862      	ldr	r2, [r4, #4]
 803be44:	42a3      	cmp	r3, r4
 803be46:	bf0c      	ite	eq
 803be48:	6032      	streq	r2, [r6, #0]
 803be4a:	605a      	strne	r2, [r3, #4]
 803be4c:	e7ec      	b.n	803be28 <_malloc_r+0xa0>
 803be4e:	4623      	mov	r3, r4
 803be50:	6864      	ldr	r4, [r4, #4]
 803be52:	e7b2      	b.n	803bdba <_malloc_r+0x32>
 803be54:	4634      	mov	r4, r6
 803be56:	6876      	ldr	r6, [r6, #4]
 803be58:	e7b9      	b.n	803bdce <_malloc_r+0x46>
 803be5a:	230c      	movs	r3, #12
 803be5c:	603b      	str	r3, [r7, #0]
 803be5e:	4638      	mov	r0, r7
 803be60:	f000 fe2e 	bl	803cac0 <__malloc_unlock>
 803be64:	e7a1      	b.n	803bdaa <_malloc_r+0x22>
 803be66:	6025      	str	r5, [r4, #0]
 803be68:	e7de      	b.n	803be28 <_malloc_r+0xa0>
 803be6a:	bf00      	nop
 803be6c:	240267d8 	.word	0x240267d8

0803be70 <__sfputc_r>:
 803be70:	6893      	ldr	r3, [r2, #8]
 803be72:	3b01      	subs	r3, #1
 803be74:	2b00      	cmp	r3, #0
 803be76:	b410      	push	{r4}
 803be78:	6093      	str	r3, [r2, #8]
 803be7a:	da08      	bge.n	803be8e <__sfputc_r+0x1e>
 803be7c:	6994      	ldr	r4, [r2, #24]
 803be7e:	42a3      	cmp	r3, r4
 803be80:	db01      	blt.n	803be86 <__sfputc_r+0x16>
 803be82:	290a      	cmp	r1, #10
 803be84:	d103      	bne.n	803be8e <__sfputc_r+0x1e>
 803be86:	f85d 4b04 	ldr.w	r4, [sp], #4
 803be8a:	f000 bb33 	b.w	803c4f4 <__swbuf_r>
 803be8e:	6813      	ldr	r3, [r2, #0]
 803be90:	1c58      	adds	r0, r3, #1
 803be92:	6010      	str	r0, [r2, #0]
 803be94:	7019      	strb	r1, [r3, #0]
 803be96:	4608      	mov	r0, r1
 803be98:	f85d 4b04 	ldr.w	r4, [sp], #4
 803be9c:	4770      	bx	lr

0803be9e <__sfputs_r>:
 803be9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803bea0:	4606      	mov	r6, r0
 803bea2:	460f      	mov	r7, r1
 803bea4:	4614      	mov	r4, r2
 803bea6:	18d5      	adds	r5, r2, r3
 803bea8:	42ac      	cmp	r4, r5
 803beaa:	d101      	bne.n	803beb0 <__sfputs_r+0x12>
 803beac:	2000      	movs	r0, #0
 803beae:	e007      	b.n	803bec0 <__sfputs_r+0x22>
 803beb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 803beb4:	463a      	mov	r2, r7
 803beb6:	4630      	mov	r0, r6
 803beb8:	f7ff ffda 	bl	803be70 <__sfputc_r>
 803bebc:	1c43      	adds	r3, r0, #1
 803bebe:	d1f3      	bne.n	803bea8 <__sfputs_r+0xa>
 803bec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803bec4 <_vfiprintf_r>:
 803bec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803bec8:	460d      	mov	r5, r1
 803beca:	b09d      	sub	sp, #116	; 0x74
 803becc:	4614      	mov	r4, r2
 803bece:	4698      	mov	r8, r3
 803bed0:	4606      	mov	r6, r0
 803bed2:	b118      	cbz	r0, 803bedc <_vfiprintf_r+0x18>
 803bed4:	6983      	ldr	r3, [r0, #24]
 803bed6:	b90b      	cbnz	r3, 803bedc <_vfiprintf_r+0x18>
 803bed8:	f000 fce6 	bl	803c8a8 <__sinit>
 803bedc:	4b89      	ldr	r3, [pc, #548]	; (803c104 <_vfiprintf_r+0x240>)
 803bede:	429d      	cmp	r5, r3
 803bee0:	d11b      	bne.n	803bf1a <_vfiprintf_r+0x56>
 803bee2:	6875      	ldr	r5, [r6, #4]
 803bee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803bee6:	07d9      	lsls	r1, r3, #31
 803bee8:	d405      	bmi.n	803bef6 <_vfiprintf_r+0x32>
 803beea:	89ab      	ldrh	r3, [r5, #12]
 803beec:	059a      	lsls	r2, r3, #22
 803beee:	d402      	bmi.n	803bef6 <_vfiprintf_r+0x32>
 803bef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803bef2:	f000 fd77 	bl	803c9e4 <__retarget_lock_acquire_recursive>
 803bef6:	89ab      	ldrh	r3, [r5, #12]
 803bef8:	071b      	lsls	r3, r3, #28
 803befa:	d501      	bpl.n	803bf00 <_vfiprintf_r+0x3c>
 803befc:	692b      	ldr	r3, [r5, #16]
 803befe:	b9eb      	cbnz	r3, 803bf3c <_vfiprintf_r+0x78>
 803bf00:	4629      	mov	r1, r5
 803bf02:	4630      	mov	r0, r6
 803bf04:	f000 fb48 	bl	803c598 <__swsetup_r>
 803bf08:	b1c0      	cbz	r0, 803bf3c <_vfiprintf_r+0x78>
 803bf0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803bf0c:	07dc      	lsls	r4, r3, #31
 803bf0e:	d50e      	bpl.n	803bf2e <_vfiprintf_r+0x6a>
 803bf10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803bf14:	b01d      	add	sp, #116	; 0x74
 803bf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803bf1a:	4b7b      	ldr	r3, [pc, #492]	; (803c108 <_vfiprintf_r+0x244>)
 803bf1c:	429d      	cmp	r5, r3
 803bf1e:	d101      	bne.n	803bf24 <_vfiprintf_r+0x60>
 803bf20:	68b5      	ldr	r5, [r6, #8]
 803bf22:	e7df      	b.n	803bee4 <_vfiprintf_r+0x20>
 803bf24:	4b79      	ldr	r3, [pc, #484]	; (803c10c <_vfiprintf_r+0x248>)
 803bf26:	429d      	cmp	r5, r3
 803bf28:	bf08      	it	eq
 803bf2a:	68f5      	ldreq	r5, [r6, #12]
 803bf2c:	e7da      	b.n	803bee4 <_vfiprintf_r+0x20>
 803bf2e:	89ab      	ldrh	r3, [r5, #12]
 803bf30:	0598      	lsls	r0, r3, #22
 803bf32:	d4ed      	bmi.n	803bf10 <_vfiprintf_r+0x4c>
 803bf34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803bf36:	f000 fd56 	bl	803c9e6 <__retarget_lock_release_recursive>
 803bf3a:	e7e9      	b.n	803bf10 <_vfiprintf_r+0x4c>
 803bf3c:	2300      	movs	r3, #0
 803bf3e:	9309      	str	r3, [sp, #36]	; 0x24
 803bf40:	2320      	movs	r3, #32
 803bf42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803bf46:	f8cd 800c 	str.w	r8, [sp, #12]
 803bf4a:	2330      	movs	r3, #48	; 0x30
 803bf4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803c110 <_vfiprintf_r+0x24c>
 803bf50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803bf54:	f04f 0901 	mov.w	r9, #1
 803bf58:	4623      	mov	r3, r4
 803bf5a:	469a      	mov	sl, r3
 803bf5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 803bf60:	b10a      	cbz	r2, 803bf66 <_vfiprintf_r+0xa2>
 803bf62:	2a25      	cmp	r2, #37	; 0x25
 803bf64:	d1f9      	bne.n	803bf5a <_vfiprintf_r+0x96>
 803bf66:	ebba 0b04 	subs.w	fp, sl, r4
 803bf6a:	d00b      	beq.n	803bf84 <_vfiprintf_r+0xc0>
 803bf6c:	465b      	mov	r3, fp
 803bf6e:	4622      	mov	r2, r4
 803bf70:	4629      	mov	r1, r5
 803bf72:	4630      	mov	r0, r6
 803bf74:	f7ff ff93 	bl	803be9e <__sfputs_r>
 803bf78:	3001      	adds	r0, #1
 803bf7a:	f000 80aa 	beq.w	803c0d2 <_vfiprintf_r+0x20e>
 803bf7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803bf80:	445a      	add	r2, fp
 803bf82:	9209      	str	r2, [sp, #36]	; 0x24
 803bf84:	f89a 3000 	ldrb.w	r3, [sl]
 803bf88:	2b00      	cmp	r3, #0
 803bf8a:	f000 80a2 	beq.w	803c0d2 <_vfiprintf_r+0x20e>
 803bf8e:	2300      	movs	r3, #0
 803bf90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803bf94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803bf98:	f10a 0a01 	add.w	sl, sl, #1
 803bf9c:	9304      	str	r3, [sp, #16]
 803bf9e:	9307      	str	r3, [sp, #28]
 803bfa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803bfa4:	931a      	str	r3, [sp, #104]	; 0x68
 803bfa6:	4654      	mov	r4, sl
 803bfa8:	2205      	movs	r2, #5
 803bfaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 803bfae:	4858      	ldr	r0, [pc, #352]	; (803c110 <_vfiprintf_r+0x24c>)
 803bfb0:	f7e4 f996 	bl	80202e0 <memchr>
 803bfb4:	9a04      	ldr	r2, [sp, #16]
 803bfb6:	b9d8      	cbnz	r0, 803bff0 <_vfiprintf_r+0x12c>
 803bfb8:	06d1      	lsls	r1, r2, #27
 803bfba:	bf44      	itt	mi
 803bfbc:	2320      	movmi	r3, #32
 803bfbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803bfc2:	0713      	lsls	r3, r2, #28
 803bfc4:	bf44      	itt	mi
 803bfc6:	232b      	movmi	r3, #43	; 0x2b
 803bfc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803bfcc:	f89a 3000 	ldrb.w	r3, [sl]
 803bfd0:	2b2a      	cmp	r3, #42	; 0x2a
 803bfd2:	d015      	beq.n	803c000 <_vfiprintf_r+0x13c>
 803bfd4:	9a07      	ldr	r2, [sp, #28]
 803bfd6:	4654      	mov	r4, sl
 803bfd8:	2000      	movs	r0, #0
 803bfda:	f04f 0c0a 	mov.w	ip, #10
 803bfde:	4621      	mov	r1, r4
 803bfe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 803bfe4:	3b30      	subs	r3, #48	; 0x30
 803bfe6:	2b09      	cmp	r3, #9
 803bfe8:	d94e      	bls.n	803c088 <_vfiprintf_r+0x1c4>
 803bfea:	b1b0      	cbz	r0, 803c01a <_vfiprintf_r+0x156>
 803bfec:	9207      	str	r2, [sp, #28]
 803bfee:	e014      	b.n	803c01a <_vfiprintf_r+0x156>
 803bff0:	eba0 0308 	sub.w	r3, r0, r8
 803bff4:	fa09 f303 	lsl.w	r3, r9, r3
 803bff8:	4313      	orrs	r3, r2
 803bffa:	9304      	str	r3, [sp, #16]
 803bffc:	46a2      	mov	sl, r4
 803bffe:	e7d2      	b.n	803bfa6 <_vfiprintf_r+0xe2>
 803c000:	9b03      	ldr	r3, [sp, #12]
 803c002:	1d19      	adds	r1, r3, #4
 803c004:	681b      	ldr	r3, [r3, #0]
 803c006:	9103      	str	r1, [sp, #12]
 803c008:	2b00      	cmp	r3, #0
 803c00a:	bfbb      	ittet	lt
 803c00c:	425b      	neglt	r3, r3
 803c00e:	f042 0202 	orrlt.w	r2, r2, #2
 803c012:	9307      	strge	r3, [sp, #28]
 803c014:	9307      	strlt	r3, [sp, #28]
 803c016:	bfb8      	it	lt
 803c018:	9204      	strlt	r2, [sp, #16]
 803c01a:	7823      	ldrb	r3, [r4, #0]
 803c01c:	2b2e      	cmp	r3, #46	; 0x2e
 803c01e:	d10c      	bne.n	803c03a <_vfiprintf_r+0x176>
 803c020:	7863      	ldrb	r3, [r4, #1]
 803c022:	2b2a      	cmp	r3, #42	; 0x2a
 803c024:	d135      	bne.n	803c092 <_vfiprintf_r+0x1ce>
 803c026:	9b03      	ldr	r3, [sp, #12]
 803c028:	1d1a      	adds	r2, r3, #4
 803c02a:	681b      	ldr	r3, [r3, #0]
 803c02c:	9203      	str	r2, [sp, #12]
 803c02e:	2b00      	cmp	r3, #0
 803c030:	bfb8      	it	lt
 803c032:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803c036:	3402      	adds	r4, #2
 803c038:	9305      	str	r3, [sp, #20]
 803c03a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803c120 <_vfiprintf_r+0x25c>
 803c03e:	7821      	ldrb	r1, [r4, #0]
 803c040:	2203      	movs	r2, #3
 803c042:	4650      	mov	r0, sl
 803c044:	f7e4 f94c 	bl	80202e0 <memchr>
 803c048:	b140      	cbz	r0, 803c05c <_vfiprintf_r+0x198>
 803c04a:	2340      	movs	r3, #64	; 0x40
 803c04c:	eba0 000a 	sub.w	r0, r0, sl
 803c050:	fa03 f000 	lsl.w	r0, r3, r0
 803c054:	9b04      	ldr	r3, [sp, #16]
 803c056:	4303      	orrs	r3, r0
 803c058:	3401      	adds	r4, #1
 803c05a:	9304      	str	r3, [sp, #16]
 803c05c:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c060:	482c      	ldr	r0, [pc, #176]	; (803c114 <_vfiprintf_r+0x250>)
 803c062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803c066:	2206      	movs	r2, #6
 803c068:	f7e4 f93a 	bl	80202e0 <memchr>
 803c06c:	2800      	cmp	r0, #0
 803c06e:	d03f      	beq.n	803c0f0 <_vfiprintf_r+0x22c>
 803c070:	4b29      	ldr	r3, [pc, #164]	; (803c118 <_vfiprintf_r+0x254>)
 803c072:	bb1b      	cbnz	r3, 803c0bc <_vfiprintf_r+0x1f8>
 803c074:	9b03      	ldr	r3, [sp, #12]
 803c076:	3307      	adds	r3, #7
 803c078:	f023 0307 	bic.w	r3, r3, #7
 803c07c:	3308      	adds	r3, #8
 803c07e:	9303      	str	r3, [sp, #12]
 803c080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803c082:	443b      	add	r3, r7
 803c084:	9309      	str	r3, [sp, #36]	; 0x24
 803c086:	e767      	b.n	803bf58 <_vfiprintf_r+0x94>
 803c088:	fb0c 3202 	mla	r2, ip, r2, r3
 803c08c:	460c      	mov	r4, r1
 803c08e:	2001      	movs	r0, #1
 803c090:	e7a5      	b.n	803bfde <_vfiprintf_r+0x11a>
 803c092:	2300      	movs	r3, #0
 803c094:	3401      	adds	r4, #1
 803c096:	9305      	str	r3, [sp, #20]
 803c098:	4619      	mov	r1, r3
 803c09a:	f04f 0c0a 	mov.w	ip, #10
 803c09e:	4620      	mov	r0, r4
 803c0a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 803c0a4:	3a30      	subs	r2, #48	; 0x30
 803c0a6:	2a09      	cmp	r2, #9
 803c0a8:	d903      	bls.n	803c0b2 <_vfiprintf_r+0x1ee>
 803c0aa:	2b00      	cmp	r3, #0
 803c0ac:	d0c5      	beq.n	803c03a <_vfiprintf_r+0x176>
 803c0ae:	9105      	str	r1, [sp, #20]
 803c0b0:	e7c3      	b.n	803c03a <_vfiprintf_r+0x176>
 803c0b2:	fb0c 2101 	mla	r1, ip, r1, r2
 803c0b6:	4604      	mov	r4, r0
 803c0b8:	2301      	movs	r3, #1
 803c0ba:	e7f0      	b.n	803c09e <_vfiprintf_r+0x1da>
 803c0bc:	ab03      	add	r3, sp, #12
 803c0be:	9300      	str	r3, [sp, #0]
 803c0c0:	462a      	mov	r2, r5
 803c0c2:	4b16      	ldr	r3, [pc, #88]	; (803c11c <_vfiprintf_r+0x258>)
 803c0c4:	a904      	add	r1, sp, #16
 803c0c6:	4630      	mov	r0, r6
 803c0c8:	f3af 8000 	nop.w
 803c0cc:	4607      	mov	r7, r0
 803c0ce:	1c78      	adds	r0, r7, #1
 803c0d0:	d1d6      	bne.n	803c080 <_vfiprintf_r+0x1bc>
 803c0d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c0d4:	07d9      	lsls	r1, r3, #31
 803c0d6:	d405      	bmi.n	803c0e4 <_vfiprintf_r+0x220>
 803c0d8:	89ab      	ldrh	r3, [r5, #12]
 803c0da:	059a      	lsls	r2, r3, #22
 803c0dc:	d402      	bmi.n	803c0e4 <_vfiprintf_r+0x220>
 803c0de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c0e0:	f000 fc81 	bl	803c9e6 <__retarget_lock_release_recursive>
 803c0e4:	89ab      	ldrh	r3, [r5, #12]
 803c0e6:	065b      	lsls	r3, r3, #25
 803c0e8:	f53f af12 	bmi.w	803bf10 <_vfiprintf_r+0x4c>
 803c0ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 803c0ee:	e711      	b.n	803bf14 <_vfiprintf_r+0x50>
 803c0f0:	ab03      	add	r3, sp, #12
 803c0f2:	9300      	str	r3, [sp, #0]
 803c0f4:	462a      	mov	r2, r5
 803c0f6:	4b09      	ldr	r3, [pc, #36]	; (803c11c <_vfiprintf_r+0x258>)
 803c0f8:	a904      	add	r1, sp, #16
 803c0fa:	4630      	mov	r0, r6
 803c0fc:	f000 f880 	bl	803c200 <_printf_i>
 803c100:	e7e4      	b.n	803c0cc <_vfiprintf_r+0x208>
 803c102:	bf00      	nop
 803c104:	080583b0 	.word	0x080583b0
 803c108:	080583d0 	.word	0x080583d0
 803c10c:	08058390 	.word	0x08058390
 803c110:	0805835c 	.word	0x0805835c
 803c114:	08058366 	.word	0x08058366
 803c118:	00000000 	.word	0x00000000
 803c11c:	0803be9f 	.word	0x0803be9f
 803c120:	08058362 	.word	0x08058362

0803c124 <_printf_common>:
 803c124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803c128:	4616      	mov	r6, r2
 803c12a:	4699      	mov	r9, r3
 803c12c:	688a      	ldr	r2, [r1, #8]
 803c12e:	690b      	ldr	r3, [r1, #16]
 803c130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803c134:	4293      	cmp	r3, r2
 803c136:	bfb8      	it	lt
 803c138:	4613      	movlt	r3, r2
 803c13a:	6033      	str	r3, [r6, #0]
 803c13c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803c140:	4607      	mov	r7, r0
 803c142:	460c      	mov	r4, r1
 803c144:	b10a      	cbz	r2, 803c14a <_printf_common+0x26>
 803c146:	3301      	adds	r3, #1
 803c148:	6033      	str	r3, [r6, #0]
 803c14a:	6823      	ldr	r3, [r4, #0]
 803c14c:	0699      	lsls	r1, r3, #26
 803c14e:	bf42      	ittt	mi
 803c150:	6833      	ldrmi	r3, [r6, #0]
 803c152:	3302      	addmi	r3, #2
 803c154:	6033      	strmi	r3, [r6, #0]
 803c156:	6825      	ldr	r5, [r4, #0]
 803c158:	f015 0506 	ands.w	r5, r5, #6
 803c15c:	d106      	bne.n	803c16c <_printf_common+0x48>
 803c15e:	f104 0a19 	add.w	sl, r4, #25
 803c162:	68e3      	ldr	r3, [r4, #12]
 803c164:	6832      	ldr	r2, [r6, #0]
 803c166:	1a9b      	subs	r3, r3, r2
 803c168:	42ab      	cmp	r3, r5
 803c16a:	dc26      	bgt.n	803c1ba <_printf_common+0x96>
 803c16c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803c170:	1e13      	subs	r3, r2, #0
 803c172:	6822      	ldr	r2, [r4, #0]
 803c174:	bf18      	it	ne
 803c176:	2301      	movne	r3, #1
 803c178:	0692      	lsls	r2, r2, #26
 803c17a:	d42b      	bmi.n	803c1d4 <_printf_common+0xb0>
 803c17c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803c180:	4649      	mov	r1, r9
 803c182:	4638      	mov	r0, r7
 803c184:	47c0      	blx	r8
 803c186:	3001      	adds	r0, #1
 803c188:	d01e      	beq.n	803c1c8 <_printf_common+0xa4>
 803c18a:	6823      	ldr	r3, [r4, #0]
 803c18c:	68e5      	ldr	r5, [r4, #12]
 803c18e:	6832      	ldr	r2, [r6, #0]
 803c190:	f003 0306 	and.w	r3, r3, #6
 803c194:	2b04      	cmp	r3, #4
 803c196:	bf08      	it	eq
 803c198:	1aad      	subeq	r5, r5, r2
 803c19a:	68a3      	ldr	r3, [r4, #8]
 803c19c:	6922      	ldr	r2, [r4, #16]
 803c19e:	bf0c      	ite	eq
 803c1a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803c1a4:	2500      	movne	r5, #0
 803c1a6:	4293      	cmp	r3, r2
 803c1a8:	bfc4      	itt	gt
 803c1aa:	1a9b      	subgt	r3, r3, r2
 803c1ac:	18ed      	addgt	r5, r5, r3
 803c1ae:	2600      	movs	r6, #0
 803c1b0:	341a      	adds	r4, #26
 803c1b2:	42b5      	cmp	r5, r6
 803c1b4:	d11a      	bne.n	803c1ec <_printf_common+0xc8>
 803c1b6:	2000      	movs	r0, #0
 803c1b8:	e008      	b.n	803c1cc <_printf_common+0xa8>
 803c1ba:	2301      	movs	r3, #1
 803c1bc:	4652      	mov	r2, sl
 803c1be:	4649      	mov	r1, r9
 803c1c0:	4638      	mov	r0, r7
 803c1c2:	47c0      	blx	r8
 803c1c4:	3001      	adds	r0, #1
 803c1c6:	d103      	bne.n	803c1d0 <_printf_common+0xac>
 803c1c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c1d0:	3501      	adds	r5, #1
 803c1d2:	e7c6      	b.n	803c162 <_printf_common+0x3e>
 803c1d4:	18e1      	adds	r1, r4, r3
 803c1d6:	1c5a      	adds	r2, r3, #1
 803c1d8:	2030      	movs	r0, #48	; 0x30
 803c1da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803c1de:	4422      	add	r2, r4
 803c1e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803c1e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803c1e8:	3302      	adds	r3, #2
 803c1ea:	e7c7      	b.n	803c17c <_printf_common+0x58>
 803c1ec:	2301      	movs	r3, #1
 803c1ee:	4622      	mov	r2, r4
 803c1f0:	4649      	mov	r1, r9
 803c1f2:	4638      	mov	r0, r7
 803c1f4:	47c0      	blx	r8
 803c1f6:	3001      	adds	r0, #1
 803c1f8:	d0e6      	beq.n	803c1c8 <_printf_common+0xa4>
 803c1fa:	3601      	adds	r6, #1
 803c1fc:	e7d9      	b.n	803c1b2 <_printf_common+0x8e>
	...

0803c200 <_printf_i>:
 803c200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803c204:	7e0f      	ldrb	r7, [r1, #24]
 803c206:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803c208:	2f78      	cmp	r7, #120	; 0x78
 803c20a:	4691      	mov	r9, r2
 803c20c:	4680      	mov	r8, r0
 803c20e:	460c      	mov	r4, r1
 803c210:	469a      	mov	sl, r3
 803c212:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803c216:	d807      	bhi.n	803c228 <_printf_i+0x28>
 803c218:	2f62      	cmp	r7, #98	; 0x62
 803c21a:	d80a      	bhi.n	803c232 <_printf_i+0x32>
 803c21c:	2f00      	cmp	r7, #0
 803c21e:	f000 80d8 	beq.w	803c3d2 <_printf_i+0x1d2>
 803c222:	2f58      	cmp	r7, #88	; 0x58
 803c224:	f000 80a3 	beq.w	803c36e <_printf_i+0x16e>
 803c228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803c22c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803c230:	e03a      	b.n	803c2a8 <_printf_i+0xa8>
 803c232:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803c236:	2b15      	cmp	r3, #21
 803c238:	d8f6      	bhi.n	803c228 <_printf_i+0x28>
 803c23a:	a101      	add	r1, pc, #4	; (adr r1, 803c240 <_printf_i+0x40>)
 803c23c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803c240:	0803c299 	.word	0x0803c299
 803c244:	0803c2ad 	.word	0x0803c2ad
 803c248:	0803c229 	.word	0x0803c229
 803c24c:	0803c229 	.word	0x0803c229
 803c250:	0803c229 	.word	0x0803c229
 803c254:	0803c229 	.word	0x0803c229
 803c258:	0803c2ad 	.word	0x0803c2ad
 803c25c:	0803c229 	.word	0x0803c229
 803c260:	0803c229 	.word	0x0803c229
 803c264:	0803c229 	.word	0x0803c229
 803c268:	0803c229 	.word	0x0803c229
 803c26c:	0803c3b9 	.word	0x0803c3b9
 803c270:	0803c2dd 	.word	0x0803c2dd
 803c274:	0803c39b 	.word	0x0803c39b
 803c278:	0803c229 	.word	0x0803c229
 803c27c:	0803c229 	.word	0x0803c229
 803c280:	0803c3db 	.word	0x0803c3db
 803c284:	0803c229 	.word	0x0803c229
 803c288:	0803c2dd 	.word	0x0803c2dd
 803c28c:	0803c229 	.word	0x0803c229
 803c290:	0803c229 	.word	0x0803c229
 803c294:	0803c3a3 	.word	0x0803c3a3
 803c298:	682b      	ldr	r3, [r5, #0]
 803c29a:	1d1a      	adds	r2, r3, #4
 803c29c:	681b      	ldr	r3, [r3, #0]
 803c29e:	602a      	str	r2, [r5, #0]
 803c2a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803c2a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803c2a8:	2301      	movs	r3, #1
 803c2aa:	e0a3      	b.n	803c3f4 <_printf_i+0x1f4>
 803c2ac:	6820      	ldr	r0, [r4, #0]
 803c2ae:	6829      	ldr	r1, [r5, #0]
 803c2b0:	0606      	lsls	r6, r0, #24
 803c2b2:	f101 0304 	add.w	r3, r1, #4
 803c2b6:	d50a      	bpl.n	803c2ce <_printf_i+0xce>
 803c2b8:	680e      	ldr	r6, [r1, #0]
 803c2ba:	602b      	str	r3, [r5, #0]
 803c2bc:	2e00      	cmp	r6, #0
 803c2be:	da03      	bge.n	803c2c8 <_printf_i+0xc8>
 803c2c0:	232d      	movs	r3, #45	; 0x2d
 803c2c2:	4276      	negs	r6, r6
 803c2c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803c2c8:	485e      	ldr	r0, [pc, #376]	; (803c444 <_printf_i+0x244>)
 803c2ca:	230a      	movs	r3, #10
 803c2cc:	e019      	b.n	803c302 <_printf_i+0x102>
 803c2ce:	680e      	ldr	r6, [r1, #0]
 803c2d0:	602b      	str	r3, [r5, #0]
 803c2d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 803c2d6:	bf18      	it	ne
 803c2d8:	b236      	sxthne	r6, r6
 803c2da:	e7ef      	b.n	803c2bc <_printf_i+0xbc>
 803c2dc:	682b      	ldr	r3, [r5, #0]
 803c2de:	6820      	ldr	r0, [r4, #0]
 803c2e0:	1d19      	adds	r1, r3, #4
 803c2e2:	6029      	str	r1, [r5, #0]
 803c2e4:	0601      	lsls	r1, r0, #24
 803c2e6:	d501      	bpl.n	803c2ec <_printf_i+0xec>
 803c2e8:	681e      	ldr	r6, [r3, #0]
 803c2ea:	e002      	b.n	803c2f2 <_printf_i+0xf2>
 803c2ec:	0646      	lsls	r6, r0, #25
 803c2ee:	d5fb      	bpl.n	803c2e8 <_printf_i+0xe8>
 803c2f0:	881e      	ldrh	r6, [r3, #0]
 803c2f2:	4854      	ldr	r0, [pc, #336]	; (803c444 <_printf_i+0x244>)
 803c2f4:	2f6f      	cmp	r7, #111	; 0x6f
 803c2f6:	bf0c      	ite	eq
 803c2f8:	2308      	moveq	r3, #8
 803c2fa:	230a      	movne	r3, #10
 803c2fc:	2100      	movs	r1, #0
 803c2fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803c302:	6865      	ldr	r5, [r4, #4]
 803c304:	60a5      	str	r5, [r4, #8]
 803c306:	2d00      	cmp	r5, #0
 803c308:	bfa2      	ittt	ge
 803c30a:	6821      	ldrge	r1, [r4, #0]
 803c30c:	f021 0104 	bicge.w	r1, r1, #4
 803c310:	6021      	strge	r1, [r4, #0]
 803c312:	b90e      	cbnz	r6, 803c318 <_printf_i+0x118>
 803c314:	2d00      	cmp	r5, #0
 803c316:	d04d      	beq.n	803c3b4 <_printf_i+0x1b4>
 803c318:	4615      	mov	r5, r2
 803c31a:	fbb6 f1f3 	udiv	r1, r6, r3
 803c31e:	fb03 6711 	mls	r7, r3, r1, r6
 803c322:	5dc7      	ldrb	r7, [r0, r7]
 803c324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803c328:	4637      	mov	r7, r6
 803c32a:	42bb      	cmp	r3, r7
 803c32c:	460e      	mov	r6, r1
 803c32e:	d9f4      	bls.n	803c31a <_printf_i+0x11a>
 803c330:	2b08      	cmp	r3, #8
 803c332:	d10b      	bne.n	803c34c <_printf_i+0x14c>
 803c334:	6823      	ldr	r3, [r4, #0]
 803c336:	07de      	lsls	r6, r3, #31
 803c338:	d508      	bpl.n	803c34c <_printf_i+0x14c>
 803c33a:	6923      	ldr	r3, [r4, #16]
 803c33c:	6861      	ldr	r1, [r4, #4]
 803c33e:	4299      	cmp	r1, r3
 803c340:	bfde      	ittt	le
 803c342:	2330      	movle	r3, #48	; 0x30
 803c344:	f805 3c01 	strble.w	r3, [r5, #-1]
 803c348:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 803c34c:	1b52      	subs	r2, r2, r5
 803c34e:	6122      	str	r2, [r4, #16]
 803c350:	f8cd a000 	str.w	sl, [sp]
 803c354:	464b      	mov	r3, r9
 803c356:	aa03      	add	r2, sp, #12
 803c358:	4621      	mov	r1, r4
 803c35a:	4640      	mov	r0, r8
 803c35c:	f7ff fee2 	bl	803c124 <_printf_common>
 803c360:	3001      	adds	r0, #1
 803c362:	d14c      	bne.n	803c3fe <_printf_i+0x1fe>
 803c364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c368:	b004      	add	sp, #16
 803c36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c36e:	4835      	ldr	r0, [pc, #212]	; (803c444 <_printf_i+0x244>)
 803c370:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 803c374:	6829      	ldr	r1, [r5, #0]
 803c376:	6823      	ldr	r3, [r4, #0]
 803c378:	f851 6b04 	ldr.w	r6, [r1], #4
 803c37c:	6029      	str	r1, [r5, #0]
 803c37e:	061d      	lsls	r5, r3, #24
 803c380:	d514      	bpl.n	803c3ac <_printf_i+0x1ac>
 803c382:	07df      	lsls	r7, r3, #31
 803c384:	bf44      	itt	mi
 803c386:	f043 0320 	orrmi.w	r3, r3, #32
 803c38a:	6023      	strmi	r3, [r4, #0]
 803c38c:	b91e      	cbnz	r6, 803c396 <_printf_i+0x196>
 803c38e:	6823      	ldr	r3, [r4, #0]
 803c390:	f023 0320 	bic.w	r3, r3, #32
 803c394:	6023      	str	r3, [r4, #0]
 803c396:	2310      	movs	r3, #16
 803c398:	e7b0      	b.n	803c2fc <_printf_i+0xfc>
 803c39a:	6823      	ldr	r3, [r4, #0]
 803c39c:	f043 0320 	orr.w	r3, r3, #32
 803c3a0:	6023      	str	r3, [r4, #0]
 803c3a2:	2378      	movs	r3, #120	; 0x78
 803c3a4:	4828      	ldr	r0, [pc, #160]	; (803c448 <_printf_i+0x248>)
 803c3a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803c3aa:	e7e3      	b.n	803c374 <_printf_i+0x174>
 803c3ac:	0659      	lsls	r1, r3, #25
 803c3ae:	bf48      	it	mi
 803c3b0:	b2b6      	uxthmi	r6, r6
 803c3b2:	e7e6      	b.n	803c382 <_printf_i+0x182>
 803c3b4:	4615      	mov	r5, r2
 803c3b6:	e7bb      	b.n	803c330 <_printf_i+0x130>
 803c3b8:	682b      	ldr	r3, [r5, #0]
 803c3ba:	6826      	ldr	r6, [r4, #0]
 803c3bc:	6961      	ldr	r1, [r4, #20]
 803c3be:	1d18      	adds	r0, r3, #4
 803c3c0:	6028      	str	r0, [r5, #0]
 803c3c2:	0635      	lsls	r5, r6, #24
 803c3c4:	681b      	ldr	r3, [r3, #0]
 803c3c6:	d501      	bpl.n	803c3cc <_printf_i+0x1cc>
 803c3c8:	6019      	str	r1, [r3, #0]
 803c3ca:	e002      	b.n	803c3d2 <_printf_i+0x1d2>
 803c3cc:	0670      	lsls	r0, r6, #25
 803c3ce:	d5fb      	bpl.n	803c3c8 <_printf_i+0x1c8>
 803c3d0:	8019      	strh	r1, [r3, #0]
 803c3d2:	2300      	movs	r3, #0
 803c3d4:	6123      	str	r3, [r4, #16]
 803c3d6:	4615      	mov	r5, r2
 803c3d8:	e7ba      	b.n	803c350 <_printf_i+0x150>
 803c3da:	682b      	ldr	r3, [r5, #0]
 803c3dc:	1d1a      	adds	r2, r3, #4
 803c3de:	602a      	str	r2, [r5, #0]
 803c3e0:	681d      	ldr	r5, [r3, #0]
 803c3e2:	6862      	ldr	r2, [r4, #4]
 803c3e4:	2100      	movs	r1, #0
 803c3e6:	4628      	mov	r0, r5
 803c3e8:	f7e3 ff7a 	bl	80202e0 <memchr>
 803c3ec:	b108      	cbz	r0, 803c3f2 <_printf_i+0x1f2>
 803c3ee:	1b40      	subs	r0, r0, r5
 803c3f0:	6060      	str	r0, [r4, #4]
 803c3f2:	6863      	ldr	r3, [r4, #4]
 803c3f4:	6123      	str	r3, [r4, #16]
 803c3f6:	2300      	movs	r3, #0
 803c3f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803c3fc:	e7a8      	b.n	803c350 <_printf_i+0x150>
 803c3fe:	6923      	ldr	r3, [r4, #16]
 803c400:	462a      	mov	r2, r5
 803c402:	4649      	mov	r1, r9
 803c404:	4640      	mov	r0, r8
 803c406:	47d0      	blx	sl
 803c408:	3001      	adds	r0, #1
 803c40a:	d0ab      	beq.n	803c364 <_printf_i+0x164>
 803c40c:	6823      	ldr	r3, [r4, #0]
 803c40e:	079b      	lsls	r3, r3, #30
 803c410:	d413      	bmi.n	803c43a <_printf_i+0x23a>
 803c412:	68e0      	ldr	r0, [r4, #12]
 803c414:	9b03      	ldr	r3, [sp, #12]
 803c416:	4298      	cmp	r0, r3
 803c418:	bfb8      	it	lt
 803c41a:	4618      	movlt	r0, r3
 803c41c:	e7a4      	b.n	803c368 <_printf_i+0x168>
 803c41e:	2301      	movs	r3, #1
 803c420:	4632      	mov	r2, r6
 803c422:	4649      	mov	r1, r9
 803c424:	4640      	mov	r0, r8
 803c426:	47d0      	blx	sl
 803c428:	3001      	adds	r0, #1
 803c42a:	d09b      	beq.n	803c364 <_printf_i+0x164>
 803c42c:	3501      	adds	r5, #1
 803c42e:	68e3      	ldr	r3, [r4, #12]
 803c430:	9903      	ldr	r1, [sp, #12]
 803c432:	1a5b      	subs	r3, r3, r1
 803c434:	42ab      	cmp	r3, r5
 803c436:	dcf2      	bgt.n	803c41e <_printf_i+0x21e>
 803c438:	e7eb      	b.n	803c412 <_printf_i+0x212>
 803c43a:	2500      	movs	r5, #0
 803c43c:	f104 0619 	add.w	r6, r4, #25
 803c440:	e7f5      	b.n	803c42e <_printf_i+0x22e>
 803c442:	bf00      	nop
 803c444:	0805836d 	.word	0x0805836d
 803c448:	0805837e 	.word	0x0805837e

0803c44c <_sbrk_r>:
 803c44c:	b538      	push	{r3, r4, r5, lr}
 803c44e:	4d06      	ldr	r5, [pc, #24]	; (803c468 <_sbrk_r+0x1c>)
 803c450:	2300      	movs	r3, #0
 803c452:	4604      	mov	r4, r0
 803c454:	4608      	mov	r0, r1
 803c456:	602b      	str	r3, [r5, #0]
 803c458:	f7ed fd16 	bl	8029e88 <_sbrk>
 803c45c:	1c43      	adds	r3, r0, #1
 803c45e:	d102      	bne.n	803c466 <_sbrk_r+0x1a>
 803c460:	682b      	ldr	r3, [r5, #0]
 803c462:	b103      	cbz	r3, 803c466 <_sbrk_r+0x1a>
 803c464:	6023      	str	r3, [r4, #0]
 803c466:	bd38      	pop	{r3, r4, r5, pc}
 803c468:	240267e4 	.word	0x240267e4

0803c46c <_raise_r>:
 803c46c:	291f      	cmp	r1, #31
 803c46e:	b538      	push	{r3, r4, r5, lr}
 803c470:	4604      	mov	r4, r0
 803c472:	460d      	mov	r5, r1
 803c474:	d904      	bls.n	803c480 <_raise_r+0x14>
 803c476:	2316      	movs	r3, #22
 803c478:	6003      	str	r3, [r0, #0]
 803c47a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c47e:	bd38      	pop	{r3, r4, r5, pc}
 803c480:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803c482:	b112      	cbz	r2, 803c48a <_raise_r+0x1e>
 803c484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803c488:	b94b      	cbnz	r3, 803c49e <_raise_r+0x32>
 803c48a:	4620      	mov	r0, r4
 803c48c:	f000 f830 	bl	803c4f0 <_getpid_r>
 803c490:	462a      	mov	r2, r5
 803c492:	4601      	mov	r1, r0
 803c494:	4620      	mov	r0, r4
 803c496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803c49a:	f000 b817 	b.w	803c4cc <_kill_r>
 803c49e:	2b01      	cmp	r3, #1
 803c4a0:	d00a      	beq.n	803c4b8 <_raise_r+0x4c>
 803c4a2:	1c59      	adds	r1, r3, #1
 803c4a4:	d103      	bne.n	803c4ae <_raise_r+0x42>
 803c4a6:	2316      	movs	r3, #22
 803c4a8:	6003      	str	r3, [r0, #0]
 803c4aa:	2001      	movs	r0, #1
 803c4ac:	e7e7      	b.n	803c47e <_raise_r+0x12>
 803c4ae:	2400      	movs	r4, #0
 803c4b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803c4b4:	4628      	mov	r0, r5
 803c4b6:	4798      	blx	r3
 803c4b8:	2000      	movs	r0, #0
 803c4ba:	e7e0      	b.n	803c47e <_raise_r+0x12>

0803c4bc <raise>:
 803c4bc:	4b02      	ldr	r3, [pc, #8]	; (803c4c8 <raise+0xc>)
 803c4be:	4601      	mov	r1, r0
 803c4c0:	6818      	ldr	r0, [r3, #0]
 803c4c2:	f7ff bfd3 	b.w	803c46c <_raise_r>
 803c4c6:	bf00      	nop
 803c4c8:	24000104 	.word	0x24000104

0803c4cc <_kill_r>:
 803c4cc:	b538      	push	{r3, r4, r5, lr}
 803c4ce:	4d07      	ldr	r5, [pc, #28]	; (803c4ec <_kill_r+0x20>)
 803c4d0:	2300      	movs	r3, #0
 803c4d2:	4604      	mov	r4, r0
 803c4d4:	4608      	mov	r0, r1
 803c4d6:	4611      	mov	r1, r2
 803c4d8:	602b      	str	r3, [r5, #0]
 803c4da:	f7ed fc4d 	bl	8029d78 <_kill>
 803c4de:	1c43      	adds	r3, r0, #1
 803c4e0:	d102      	bne.n	803c4e8 <_kill_r+0x1c>
 803c4e2:	682b      	ldr	r3, [r5, #0]
 803c4e4:	b103      	cbz	r3, 803c4e8 <_kill_r+0x1c>
 803c4e6:	6023      	str	r3, [r4, #0]
 803c4e8:	bd38      	pop	{r3, r4, r5, pc}
 803c4ea:	bf00      	nop
 803c4ec:	240267e4 	.word	0x240267e4

0803c4f0 <_getpid_r>:
 803c4f0:	f7ed bc3a 	b.w	8029d68 <_getpid>

0803c4f4 <__swbuf_r>:
 803c4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803c4f6:	460e      	mov	r6, r1
 803c4f8:	4614      	mov	r4, r2
 803c4fa:	4605      	mov	r5, r0
 803c4fc:	b118      	cbz	r0, 803c506 <__swbuf_r+0x12>
 803c4fe:	6983      	ldr	r3, [r0, #24]
 803c500:	b90b      	cbnz	r3, 803c506 <__swbuf_r+0x12>
 803c502:	f000 f9d1 	bl	803c8a8 <__sinit>
 803c506:	4b21      	ldr	r3, [pc, #132]	; (803c58c <__swbuf_r+0x98>)
 803c508:	429c      	cmp	r4, r3
 803c50a:	d12b      	bne.n	803c564 <__swbuf_r+0x70>
 803c50c:	686c      	ldr	r4, [r5, #4]
 803c50e:	69a3      	ldr	r3, [r4, #24]
 803c510:	60a3      	str	r3, [r4, #8]
 803c512:	89a3      	ldrh	r3, [r4, #12]
 803c514:	071a      	lsls	r2, r3, #28
 803c516:	d52f      	bpl.n	803c578 <__swbuf_r+0x84>
 803c518:	6923      	ldr	r3, [r4, #16]
 803c51a:	b36b      	cbz	r3, 803c578 <__swbuf_r+0x84>
 803c51c:	6923      	ldr	r3, [r4, #16]
 803c51e:	6820      	ldr	r0, [r4, #0]
 803c520:	1ac0      	subs	r0, r0, r3
 803c522:	6963      	ldr	r3, [r4, #20]
 803c524:	b2f6      	uxtb	r6, r6
 803c526:	4283      	cmp	r3, r0
 803c528:	4637      	mov	r7, r6
 803c52a:	dc04      	bgt.n	803c536 <__swbuf_r+0x42>
 803c52c:	4621      	mov	r1, r4
 803c52e:	4628      	mov	r0, r5
 803c530:	f000 f926 	bl	803c780 <_fflush_r>
 803c534:	bb30      	cbnz	r0, 803c584 <__swbuf_r+0x90>
 803c536:	68a3      	ldr	r3, [r4, #8]
 803c538:	3b01      	subs	r3, #1
 803c53a:	60a3      	str	r3, [r4, #8]
 803c53c:	6823      	ldr	r3, [r4, #0]
 803c53e:	1c5a      	adds	r2, r3, #1
 803c540:	6022      	str	r2, [r4, #0]
 803c542:	701e      	strb	r6, [r3, #0]
 803c544:	6963      	ldr	r3, [r4, #20]
 803c546:	3001      	adds	r0, #1
 803c548:	4283      	cmp	r3, r0
 803c54a:	d004      	beq.n	803c556 <__swbuf_r+0x62>
 803c54c:	89a3      	ldrh	r3, [r4, #12]
 803c54e:	07db      	lsls	r3, r3, #31
 803c550:	d506      	bpl.n	803c560 <__swbuf_r+0x6c>
 803c552:	2e0a      	cmp	r6, #10
 803c554:	d104      	bne.n	803c560 <__swbuf_r+0x6c>
 803c556:	4621      	mov	r1, r4
 803c558:	4628      	mov	r0, r5
 803c55a:	f000 f911 	bl	803c780 <_fflush_r>
 803c55e:	b988      	cbnz	r0, 803c584 <__swbuf_r+0x90>
 803c560:	4638      	mov	r0, r7
 803c562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803c564:	4b0a      	ldr	r3, [pc, #40]	; (803c590 <__swbuf_r+0x9c>)
 803c566:	429c      	cmp	r4, r3
 803c568:	d101      	bne.n	803c56e <__swbuf_r+0x7a>
 803c56a:	68ac      	ldr	r4, [r5, #8]
 803c56c:	e7cf      	b.n	803c50e <__swbuf_r+0x1a>
 803c56e:	4b09      	ldr	r3, [pc, #36]	; (803c594 <__swbuf_r+0xa0>)
 803c570:	429c      	cmp	r4, r3
 803c572:	bf08      	it	eq
 803c574:	68ec      	ldreq	r4, [r5, #12]
 803c576:	e7ca      	b.n	803c50e <__swbuf_r+0x1a>
 803c578:	4621      	mov	r1, r4
 803c57a:	4628      	mov	r0, r5
 803c57c:	f000 f80c 	bl	803c598 <__swsetup_r>
 803c580:	2800      	cmp	r0, #0
 803c582:	d0cb      	beq.n	803c51c <__swbuf_r+0x28>
 803c584:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 803c588:	e7ea      	b.n	803c560 <__swbuf_r+0x6c>
 803c58a:	bf00      	nop
 803c58c:	080583b0 	.word	0x080583b0
 803c590:	080583d0 	.word	0x080583d0
 803c594:	08058390 	.word	0x08058390

0803c598 <__swsetup_r>:
 803c598:	4b32      	ldr	r3, [pc, #200]	; (803c664 <__swsetup_r+0xcc>)
 803c59a:	b570      	push	{r4, r5, r6, lr}
 803c59c:	681d      	ldr	r5, [r3, #0]
 803c59e:	4606      	mov	r6, r0
 803c5a0:	460c      	mov	r4, r1
 803c5a2:	b125      	cbz	r5, 803c5ae <__swsetup_r+0x16>
 803c5a4:	69ab      	ldr	r3, [r5, #24]
 803c5a6:	b913      	cbnz	r3, 803c5ae <__swsetup_r+0x16>
 803c5a8:	4628      	mov	r0, r5
 803c5aa:	f000 f97d 	bl	803c8a8 <__sinit>
 803c5ae:	4b2e      	ldr	r3, [pc, #184]	; (803c668 <__swsetup_r+0xd0>)
 803c5b0:	429c      	cmp	r4, r3
 803c5b2:	d10f      	bne.n	803c5d4 <__swsetup_r+0x3c>
 803c5b4:	686c      	ldr	r4, [r5, #4]
 803c5b6:	89a3      	ldrh	r3, [r4, #12]
 803c5b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c5bc:	0719      	lsls	r1, r3, #28
 803c5be:	d42c      	bmi.n	803c61a <__swsetup_r+0x82>
 803c5c0:	06dd      	lsls	r5, r3, #27
 803c5c2:	d411      	bmi.n	803c5e8 <__swsetup_r+0x50>
 803c5c4:	2309      	movs	r3, #9
 803c5c6:	6033      	str	r3, [r6, #0]
 803c5c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803c5cc:	81a3      	strh	r3, [r4, #12]
 803c5ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c5d2:	e03e      	b.n	803c652 <__swsetup_r+0xba>
 803c5d4:	4b25      	ldr	r3, [pc, #148]	; (803c66c <__swsetup_r+0xd4>)
 803c5d6:	429c      	cmp	r4, r3
 803c5d8:	d101      	bne.n	803c5de <__swsetup_r+0x46>
 803c5da:	68ac      	ldr	r4, [r5, #8]
 803c5dc:	e7eb      	b.n	803c5b6 <__swsetup_r+0x1e>
 803c5de:	4b24      	ldr	r3, [pc, #144]	; (803c670 <__swsetup_r+0xd8>)
 803c5e0:	429c      	cmp	r4, r3
 803c5e2:	bf08      	it	eq
 803c5e4:	68ec      	ldreq	r4, [r5, #12]
 803c5e6:	e7e6      	b.n	803c5b6 <__swsetup_r+0x1e>
 803c5e8:	0758      	lsls	r0, r3, #29
 803c5ea:	d512      	bpl.n	803c612 <__swsetup_r+0x7a>
 803c5ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803c5ee:	b141      	cbz	r1, 803c602 <__swsetup_r+0x6a>
 803c5f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803c5f4:	4299      	cmp	r1, r3
 803c5f6:	d002      	beq.n	803c5fe <__swsetup_r+0x66>
 803c5f8:	4630      	mov	r0, r6
 803c5fa:	f7ff fb59 	bl	803bcb0 <_free_r>
 803c5fe:	2300      	movs	r3, #0
 803c600:	6363      	str	r3, [r4, #52]	; 0x34
 803c602:	89a3      	ldrh	r3, [r4, #12]
 803c604:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803c608:	81a3      	strh	r3, [r4, #12]
 803c60a:	2300      	movs	r3, #0
 803c60c:	6063      	str	r3, [r4, #4]
 803c60e:	6923      	ldr	r3, [r4, #16]
 803c610:	6023      	str	r3, [r4, #0]
 803c612:	89a3      	ldrh	r3, [r4, #12]
 803c614:	f043 0308 	orr.w	r3, r3, #8
 803c618:	81a3      	strh	r3, [r4, #12]
 803c61a:	6923      	ldr	r3, [r4, #16]
 803c61c:	b94b      	cbnz	r3, 803c632 <__swsetup_r+0x9a>
 803c61e:	89a3      	ldrh	r3, [r4, #12]
 803c620:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803c624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803c628:	d003      	beq.n	803c632 <__swsetup_r+0x9a>
 803c62a:	4621      	mov	r1, r4
 803c62c:	4630      	mov	r0, r6
 803c62e:	f000 fa01 	bl	803ca34 <__smakebuf_r>
 803c632:	89a0      	ldrh	r0, [r4, #12]
 803c634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c638:	f010 0301 	ands.w	r3, r0, #1
 803c63c:	d00a      	beq.n	803c654 <__swsetup_r+0xbc>
 803c63e:	2300      	movs	r3, #0
 803c640:	60a3      	str	r3, [r4, #8]
 803c642:	6963      	ldr	r3, [r4, #20]
 803c644:	425b      	negs	r3, r3
 803c646:	61a3      	str	r3, [r4, #24]
 803c648:	6923      	ldr	r3, [r4, #16]
 803c64a:	b943      	cbnz	r3, 803c65e <__swsetup_r+0xc6>
 803c64c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803c650:	d1ba      	bne.n	803c5c8 <__swsetup_r+0x30>
 803c652:	bd70      	pop	{r4, r5, r6, pc}
 803c654:	0781      	lsls	r1, r0, #30
 803c656:	bf58      	it	pl
 803c658:	6963      	ldrpl	r3, [r4, #20]
 803c65a:	60a3      	str	r3, [r4, #8]
 803c65c:	e7f4      	b.n	803c648 <__swsetup_r+0xb0>
 803c65e:	2000      	movs	r0, #0
 803c660:	e7f7      	b.n	803c652 <__swsetup_r+0xba>
 803c662:	bf00      	nop
 803c664:	24000104 	.word	0x24000104
 803c668:	080583b0 	.word	0x080583b0
 803c66c:	080583d0 	.word	0x080583d0
 803c670:	08058390 	.word	0x08058390

0803c674 <__sflush_r>:
 803c674:	898a      	ldrh	r2, [r1, #12]
 803c676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803c67a:	4605      	mov	r5, r0
 803c67c:	0710      	lsls	r0, r2, #28
 803c67e:	460c      	mov	r4, r1
 803c680:	d458      	bmi.n	803c734 <__sflush_r+0xc0>
 803c682:	684b      	ldr	r3, [r1, #4]
 803c684:	2b00      	cmp	r3, #0
 803c686:	dc05      	bgt.n	803c694 <__sflush_r+0x20>
 803c688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803c68a:	2b00      	cmp	r3, #0
 803c68c:	dc02      	bgt.n	803c694 <__sflush_r+0x20>
 803c68e:	2000      	movs	r0, #0
 803c690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803c694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803c696:	2e00      	cmp	r6, #0
 803c698:	d0f9      	beq.n	803c68e <__sflush_r+0x1a>
 803c69a:	2300      	movs	r3, #0
 803c69c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803c6a0:	682f      	ldr	r7, [r5, #0]
 803c6a2:	602b      	str	r3, [r5, #0]
 803c6a4:	d032      	beq.n	803c70c <__sflush_r+0x98>
 803c6a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803c6a8:	89a3      	ldrh	r3, [r4, #12]
 803c6aa:	075a      	lsls	r2, r3, #29
 803c6ac:	d505      	bpl.n	803c6ba <__sflush_r+0x46>
 803c6ae:	6863      	ldr	r3, [r4, #4]
 803c6b0:	1ac0      	subs	r0, r0, r3
 803c6b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803c6b4:	b10b      	cbz	r3, 803c6ba <__sflush_r+0x46>
 803c6b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803c6b8:	1ac0      	subs	r0, r0, r3
 803c6ba:	2300      	movs	r3, #0
 803c6bc:	4602      	mov	r2, r0
 803c6be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803c6c0:	6a21      	ldr	r1, [r4, #32]
 803c6c2:	4628      	mov	r0, r5
 803c6c4:	47b0      	blx	r6
 803c6c6:	1c43      	adds	r3, r0, #1
 803c6c8:	89a3      	ldrh	r3, [r4, #12]
 803c6ca:	d106      	bne.n	803c6da <__sflush_r+0x66>
 803c6cc:	6829      	ldr	r1, [r5, #0]
 803c6ce:	291d      	cmp	r1, #29
 803c6d0:	d82c      	bhi.n	803c72c <__sflush_r+0xb8>
 803c6d2:	4a2a      	ldr	r2, [pc, #168]	; (803c77c <__sflush_r+0x108>)
 803c6d4:	40ca      	lsrs	r2, r1
 803c6d6:	07d6      	lsls	r6, r2, #31
 803c6d8:	d528      	bpl.n	803c72c <__sflush_r+0xb8>
 803c6da:	2200      	movs	r2, #0
 803c6dc:	6062      	str	r2, [r4, #4]
 803c6de:	04d9      	lsls	r1, r3, #19
 803c6e0:	6922      	ldr	r2, [r4, #16]
 803c6e2:	6022      	str	r2, [r4, #0]
 803c6e4:	d504      	bpl.n	803c6f0 <__sflush_r+0x7c>
 803c6e6:	1c42      	adds	r2, r0, #1
 803c6e8:	d101      	bne.n	803c6ee <__sflush_r+0x7a>
 803c6ea:	682b      	ldr	r3, [r5, #0]
 803c6ec:	b903      	cbnz	r3, 803c6f0 <__sflush_r+0x7c>
 803c6ee:	6560      	str	r0, [r4, #84]	; 0x54
 803c6f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803c6f2:	602f      	str	r7, [r5, #0]
 803c6f4:	2900      	cmp	r1, #0
 803c6f6:	d0ca      	beq.n	803c68e <__sflush_r+0x1a>
 803c6f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803c6fc:	4299      	cmp	r1, r3
 803c6fe:	d002      	beq.n	803c706 <__sflush_r+0x92>
 803c700:	4628      	mov	r0, r5
 803c702:	f7ff fad5 	bl	803bcb0 <_free_r>
 803c706:	2000      	movs	r0, #0
 803c708:	6360      	str	r0, [r4, #52]	; 0x34
 803c70a:	e7c1      	b.n	803c690 <__sflush_r+0x1c>
 803c70c:	6a21      	ldr	r1, [r4, #32]
 803c70e:	2301      	movs	r3, #1
 803c710:	4628      	mov	r0, r5
 803c712:	47b0      	blx	r6
 803c714:	1c41      	adds	r1, r0, #1
 803c716:	d1c7      	bne.n	803c6a8 <__sflush_r+0x34>
 803c718:	682b      	ldr	r3, [r5, #0]
 803c71a:	2b00      	cmp	r3, #0
 803c71c:	d0c4      	beq.n	803c6a8 <__sflush_r+0x34>
 803c71e:	2b1d      	cmp	r3, #29
 803c720:	d001      	beq.n	803c726 <__sflush_r+0xb2>
 803c722:	2b16      	cmp	r3, #22
 803c724:	d101      	bne.n	803c72a <__sflush_r+0xb6>
 803c726:	602f      	str	r7, [r5, #0]
 803c728:	e7b1      	b.n	803c68e <__sflush_r+0x1a>
 803c72a:	89a3      	ldrh	r3, [r4, #12]
 803c72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803c730:	81a3      	strh	r3, [r4, #12]
 803c732:	e7ad      	b.n	803c690 <__sflush_r+0x1c>
 803c734:	690f      	ldr	r7, [r1, #16]
 803c736:	2f00      	cmp	r7, #0
 803c738:	d0a9      	beq.n	803c68e <__sflush_r+0x1a>
 803c73a:	0793      	lsls	r3, r2, #30
 803c73c:	680e      	ldr	r6, [r1, #0]
 803c73e:	bf08      	it	eq
 803c740:	694b      	ldreq	r3, [r1, #20]
 803c742:	600f      	str	r7, [r1, #0]
 803c744:	bf18      	it	ne
 803c746:	2300      	movne	r3, #0
 803c748:	eba6 0807 	sub.w	r8, r6, r7
 803c74c:	608b      	str	r3, [r1, #8]
 803c74e:	f1b8 0f00 	cmp.w	r8, #0
 803c752:	dd9c      	ble.n	803c68e <__sflush_r+0x1a>
 803c754:	6a21      	ldr	r1, [r4, #32]
 803c756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803c758:	4643      	mov	r3, r8
 803c75a:	463a      	mov	r2, r7
 803c75c:	4628      	mov	r0, r5
 803c75e:	47b0      	blx	r6
 803c760:	2800      	cmp	r0, #0
 803c762:	dc06      	bgt.n	803c772 <__sflush_r+0xfe>
 803c764:	89a3      	ldrh	r3, [r4, #12]
 803c766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803c76a:	81a3      	strh	r3, [r4, #12]
 803c76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c770:	e78e      	b.n	803c690 <__sflush_r+0x1c>
 803c772:	4407      	add	r7, r0
 803c774:	eba8 0800 	sub.w	r8, r8, r0
 803c778:	e7e9      	b.n	803c74e <__sflush_r+0xda>
 803c77a:	bf00      	nop
 803c77c:	20400001 	.word	0x20400001

0803c780 <_fflush_r>:
 803c780:	b538      	push	{r3, r4, r5, lr}
 803c782:	690b      	ldr	r3, [r1, #16]
 803c784:	4605      	mov	r5, r0
 803c786:	460c      	mov	r4, r1
 803c788:	b913      	cbnz	r3, 803c790 <_fflush_r+0x10>
 803c78a:	2500      	movs	r5, #0
 803c78c:	4628      	mov	r0, r5
 803c78e:	bd38      	pop	{r3, r4, r5, pc}
 803c790:	b118      	cbz	r0, 803c79a <_fflush_r+0x1a>
 803c792:	6983      	ldr	r3, [r0, #24]
 803c794:	b90b      	cbnz	r3, 803c79a <_fflush_r+0x1a>
 803c796:	f000 f887 	bl	803c8a8 <__sinit>
 803c79a:	4b14      	ldr	r3, [pc, #80]	; (803c7ec <_fflush_r+0x6c>)
 803c79c:	429c      	cmp	r4, r3
 803c79e:	d11b      	bne.n	803c7d8 <_fflush_r+0x58>
 803c7a0:	686c      	ldr	r4, [r5, #4]
 803c7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803c7a6:	2b00      	cmp	r3, #0
 803c7a8:	d0ef      	beq.n	803c78a <_fflush_r+0xa>
 803c7aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803c7ac:	07d0      	lsls	r0, r2, #31
 803c7ae:	d404      	bmi.n	803c7ba <_fflush_r+0x3a>
 803c7b0:	0599      	lsls	r1, r3, #22
 803c7b2:	d402      	bmi.n	803c7ba <_fflush_r+0x3a>
 803c7b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803c7b6:	f000 f915 	bl	803c9e4 <__retarget_lock_acquire_recursive>
 803c7ba:	4628      	mov	r0, r5
 803c7bc:	4621      	mov	r1, r4
 803c7be:	f7ff ff59 	bl	803c674 <__sflush_r>
 803c7c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803c7c4:	07da      	lsls	r2, r3, #31
 803c7c6:	4605      	mov	r5, r0
 803c7c8:	d4e0      	bmi.n	803c78c <_fflush_r+0xc>
 803c7ca:	89a3      	ldrh	r3, [r4, #12]
 803c7cc:	059b      	lsls	r3, r3, #22
 803c7ce:	d4dd      	bmi.n	803c78c <_fflush_r+0xc>
 803c7d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803c7d2:	f000 f908 	bl	803c9e6 <__retarget_lock_release_recursive>
 803c7d6:	e7d9      	b.n	803c78c <_fflush_r+0xc>
 803c7d8:	4b05      	ldr	r3, [pc, #20]	; (803c7f0 <_fflush_r+0x70>)
 803c7da:	429c      	cmp	r4, r3
 803c7dc:	d101      	bne.n	803c7e2 <_fflush_r+0x62>
 803c7de:	68ac      	ldr	r4, [r5, #8]
 803c7e0:	e7df      	b.n	803c7a2 <_fflush_r+0x22>
 803c7e2:	4b04      	ldr	r3, [pc, #16]	; (803c7f4 <_fflush_r+0x74>)
 803c7e4:	429c      	cmp	r4, r3
 803c7e6:	bf08      	it	eq
 803c7e8:	68ec      	ldreq	r4, [r5, #12]
 803c7ea:	e7da      	b.n	803c7a2 <_fflush_r+0x22>
 803c7ec:	080583b0 	.word	0x080583b0
 803c7f0:	080583d0 	.word	0x080583d0
 803c7f4:	08058390 	.word	0x08058390

0803c7f8 <std>:
 803c7f8:	2300      	movs	r3, #0
 803c7fa:	b510      	push	{r4, lr}
 803c7fc:	4604      	mov	r4, r0
 803c7fe:	e9c0 3300 	strd	r3, r3, [r0]
 803c802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803c806:	6083      	str	r3, [r0, #8]
 803c808:	8181      	strh	r1, [r0, #12]
 803c80a:	6643      	str	r3, [r0, #100]	; 0x64
 803c80c:	81c2      	strh	r2, [r0, #14]
 803c80e:	6183      	str	r3, [r0, #24]
 803c810:	4619      	mov	r1, r3
 803c812:	2208      	movs	r2, #8
 803c814:	305c      	adds	r0, #92	; 0x5c
 803c816:	f7ff fa43 	bl	803bca0 <memset>
 803c81a:	4b05      	ldr	r3, [pc, #20]	; (803c830 <std+0x38>)
 803c81c:	6263      	str	r3, [r4, #36]	; 0x24
 803c81e:	4b05      	ldr	r3, [pc, #20]	; (803c834 <std+0x3c>)
 803c820:	62a3      	str	r3, [r4, #40]	; 0x28
 803c822:	4b05      	ldr	r3, [pc, #20]	; (803c838 <std+0x40>)
 803c824:	62e3      	str	r3, [r4, #44]	; 0x2c
 803c826:	4b05      	ldr	r3, [pc, #20]	; (803c83c <std+0x44>)
 803c828:	6224      	str	r4, [r4, #32]
 803c82a:	6323      	str	r3, [r4, #48]	; 0x30
 803c82c:	bd10      	pop	{r4, pc}
 803c82e:	bf00      	nop
 803c830:	0803cacd 	.word	0x0803cacd
 803c834:	0803caef 	.word	0x0803caef
 803c838:	0803cb27 	.word	0x0803cb27
 803c83c:	0803cb4b 	.word	0x0803cb4b

0803c840 <_cleanup_r>:
 803c840:	4901      	ldr	r1, [pc, #4]	; (803c848 <_cleanup_r+0x8>)
 803c842:	f000 b8af 	b.w	803c9a4 <_fwalk_reent>
 803c846:	bf00      	nop
 803c848:	0803c781 	.word	0x0803c781

0803c84c <__sfmoreglue>:
 803c84c:	b570      	push	{r4, r5, r6, lr}
 803c84e:	2268      	movs	r2, #104	; 0x68
 803c850:	1e4d      	subs	r5, r1, #1
 803c852:	4355      	muls	r5, r2
 803c854:	460e      	mov	r6, r1
 803c856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803c85a:	f7ff fa95 	bl	803bd88 <_malloc_r>
 803c85e:	4604      	mov	r4, r0
 803c860:	b140      	cbz	r0, 803c874 <__sfmoreglue+0x28>
 803c862:	2100      	movs	r1, #0
 803c864:	e9c0 1600 	strd	r1, r6, [r0]
 803c868:	300c      	adds	r0, #12
 803c86a:	60a0      	str	r0, [r4, #8]
 803c86c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803c870:	f7ff fa16 	bl	803bca0 <memset>
 803c874:	4620      	mov	r0, r4
 803c876:	bd70      	pop	{r4, r5, r6, pc}

0803c878 <__sfp_lock_acquire>:
 803c878:	4801      	ldr	r0, [pc, #4]	; (803c880 <__sfp_lock_acquire+0x8>)
 803c87a:	f000 b8b3 	b.w	803c9e4 <__retarget_lock_acquire_recursive>
 803c87e:	bf00      	nop
 803c880:	240267e1 	.word	0x240267e1

0803c884 <__sfp_lock_release>:
 803c884:	4801      	ldr	r0, [pc, #4]	; (803c88c <__sfp_lock_release+0x8>)
 803c886:	f000 b8ae 	b.w	803c9e6 <__retarget_lock_release_recursive>
 803c88a:	bf00      	nop
 803c88c:	240267e1 	.word	0x240267e1

0803c890 <__sinit_lock_acquire>:
 803c890:	4801      	ldr	r0, [pc, #4]	; (803c898 <__sinit_lock_acquire+0x8>)
 803c892:	f000 b8a7 	b.w	803c9e4 <__retarget_lock_acquire_recursive>
 803c896:	bf00      	nop
 803c898:	240267e2 	.word	0x240267e2

0803c89c <__sinit_lock_release>:
 803c89c:	4801      	ldr	r0, [pc, #4]	; (803c8a4 <__sinit_lock_release+0x8>)
 803c89e:	f000 b8a2 	b.w	803c9e6 <__retarget_lock_release_recursive>
 803c8a2:	bf00      	nop
 803c8a4:	240267e2 	.word	0x240267e2

0803c8a8 <__sinit>:
 803c8a8:	b510      	push	{r4, lr}
 803c8aa:	4604      	mov	r4, r0
 803c8ac:	f7ff fff0 	bl	803c890 <__sinit_lock_acquire>
 803c8b0:	69a3      	ldr	r3, [r4, #24]
 803c8b2:	b11b      	cbz	r3, 803c8bc <__sinit+0x14>
 803c8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803c8b8:	f7ff bff0 	b.w	803c89c <__sinit_lock_release>
 803c8bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803c8c0:	6523      	str	r3, [r4, #80]	; 0x50
 803c8c2:	4b13      	ldr	r3, [pc, #76]	; (803c910 <__sinit+0x68>)
 803c8c4:	4a13      	ldr	r2, [pc, #76]	; (803c914 <__sinit+0x6c>)
 803c8c6:	681b      	ldr	r3, [r3, #0]
 803c8c8:	62a2      	str	r2, [r4, #40]	; 0x28
 803c8ca:	42a3      	cmp	r3, r4
 803c8cc:	bf04      	itt	eq
 803c8ce:	2301      	moveq	r3, #1
 803c8d0:	61a3      	streq	r3, [r4, #24]
 803c8d2:	4620      	mov	r0, r4
 803c8d4:	f000 f820 	bl	803c918 <__sfp>
 803c8d8:	6060      	str	r0, [r4, #4]
 803c8da:	4620      	mov	r0, r4
 803c8dc:	f000 f81c 	bl	803c918 <__sfp>
 803c8e0:	60a0      	str	r0, [r4, #8]
 803c8e2:	4620      	mov	r0, r4
 803c8e4:	f000 f818 	bl	803c918 <__sfp>
 803c8e8:	2200      	movs	r2, #0
 803c8ea:	60e0      	str	r0, [r4, #12]
 803c8ec:	2104      	movs	r1, #4
 803c8ee:	6860      	ldr	r0, [r4, #4]
 803c8f0:	f7ff ff82 	bl	803c7f8 <std>
 803c8f4:	68a0      	ldr	r0, [r4, #8]
 803c8f6:	2201      	movs	r2, #1
 803c8f8:	2109      	movs	r1, #9
 803c8fa:	f7ff ff7d 	bl	803c7f8 <std>
 803c8fe:	68e0      	ldr	r0, [r4, #12]
 803c900:	2202      	movs	r2, #2
 803c902:	2112      	movs	r1, #18
 803c904:	f7ff ff78 	bl	803c7f8 <std>
 803c908:	2301      	movs	r3, #1
 803c90a:	61a3      	str	r3, [r4, #24]
 803c90c:	e7d2      	b.n	803c8b4 <__sinit+0xc>
 803c90e:	bf00      	nop
 803c910:	08058358 	.word	0x08058358
 803c914:	0803c841 	.word	0x0803c841

0803c918 <__sfp>:
 803c918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803c91a:	4607      	mov	r7, r0
 803c91c:	f7ff ffac 	bl	803c878 <__sfp_lock_acquire>
 803c920:	4b1e      	ldr	r3, [pc, #120]	; (803c99c <__sfp+0x84>)
 803c922:	681e      	ldr	r6, [r3, #0]
 803c924:	69b3      	ldr	r3, [r6, #24]
 803c926:	b913      	cbnz	r3, 803c92e <__sfp+0x16>
 803c928:	4630      	mov	r0, r6
 803c92a:	f7ff ffbd 	bl	803c8a8 <__sinit>
 803c92e:	3648      	adds	r6, #72	; 0x48
 803c930:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803c934:	3b01      	subs	r3, #1
 803c936:	d503      	bpl.n	803c940 <__sfp+0x28>
 803c938:	6833      	ldr	r3, [r6, #0]
 803c93a:	b30b      	cbz	r3, 803c980 <__sfp+0x68>
 803c93c:	6836      	ldr	r6, [r6, #0]
 803c93e:	e7f7      	b.n	803c930 <__sfp+0x18>
 803c940:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803c944:	b9d5      	cbnz	r5, 803c97c <__sfp+0x64>
 803c946:	4b16      	ldr	r3, [pc, #88]	; (803c9a0 <__sfp+0x88>)
 803c948:	60e3      	str	r3, [r4, #12]
 803c94a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803c94e:	6665      	str	r5, [r4, #100]	; 0x64
 803c950:	f000 f847 	bl	803c9e2 <__retarget_lock_init_recursive>
 803c954:	f7ff ff96 	bl	803c884 <__sfp_lock_release>
 803c958:	e9c4 5501 	strd	r5, r5, [r4, #4]
 803c95c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803c960:	6025      	str	r5, [r4, #0]
 803c962:	61a5      	str	r5, [r4, #24]
 803c964:	2208      	movs	r2, #8
 803c966:	4629      	mov	r1, r5
 803c968:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 803c96c:	f7ff f998 	bl	803bca0 <memset>
 803c970:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803c974:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 803c978:	4620      	mov	r0, r4
 803c97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803c97c:	3468      	adds	r4, #104	; 0x68
 803c97e:	e7d9      	b.n	803c934 <__sfp+0x1c>
 803c980:	2104      	movs	r1, #4
 803c982:	4638      	mov	r0, r7
 803c984:	f7ff ff62 	bl	803c84c <__sfmoreglue>
 803c988:	4604      	mov	r4, r0
 803c98a:	6030      	str	r0, [r6, #0]
 803c98c:	2800      	cmp	r0, #0
 803c98e:	d1d5      	bne.n	803c93c <__sfp+0x24>
 803c990:	f7ff ff78 	bl	803c884 <__sfp_lock_release>
 803c994:	230c      	movs	r3, #12
 803c996:	603b      	str	r3, [r7, #0]
 803c998:	e7ee      	b.n	803c978 <__sfp+0x60>
 803c99a:	bf00      	nop
 803c99c:	08058358 	.word	0x08058358
 803c9a0:	ffff0001 	.word	0xffff0001

0803c9a4 <_fwalk_reent>:
 803c9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803c9a8:	4606      	mov	r6, r0
 803c9aa:	4688      	mov	r8, r1
 803c9ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803c9b0:	2700      	movs	r7, #0
 803c9b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803c9b6:	f1b9 0901 	subs.w	r9, r9, #1
 803c9ba:	d505      	bpl.n	803c9c8 <_fwalk_reent+0x24>
 803c9bc:	6824      	ldr	r4, [r4, #0]
 803c9be:	2c00      	cmp	r4, #0
 803c9c0:	d1f7      	bne.n	803c9b2 <_fwalk_reent+0xe>
 803c9c2:	4638      	mov	r0, r7
 803c9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803c9c8:	89ab      	ldrh	r3, [r5, #12]
 803c9ca:	2b01      	cmp	r3, #1
 803c9cc:	d907      	bls.n	803c9de <_fwalk_reent+0x3a>
 803c9ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803c9d2:	3301      	adds	r3, #1
 803c9d4:	d003      	beq.n	803c9de <_fwalk_reent+0x3a>
 803c9d6:	4629      	mov	r1, r5
 803c9d8:	4630      	mov	r0, r6
 803c9da:	47c0      	blx	r8
 803c9dc:	4307      	orrs	r7, r0
 803c9de:	3568      	adds	r5, #104	; 0x68
 803c9e0:	e7e9      	b.n	803c9b6 <_fwalk_reent+0x12>

0803c9e2 <__retarget_lock_init_recursive>:
 803c9e2:	4770      	bx	lr

0803c9e4 <__retarget_lock_acquire_recursive>:
 803c9e4:	4770      	bx	lr

0803c9e6 <__retarget_lock_release_recursive>:
 803c9e6:	4770      	bx	lr

0803c9e8 <__swhatbuf_r>:
 803c9e8:	b570      	push	{r4, r5, r6, lr}
 803c9ea:	460e      	mov	r6, r1
 803c9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803c9f0:	2900      	cmp	r1, #0
 803c9f2:	b096      	sub	sp, #88	; 0x58
 803c9f4:	4614      	mov	r4, r2
 803c9f6:	461d      	mov	r5, r3
 803c9f8:	da08      	bge.n	803ca0c <__swhatbuf_r+0x24>
 803c9fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803c9fe:	2200      	movs	r2, #0
 803ca00:	602a      	str	r2, [r5, #0]
 803ca02:	061a      	lsls	r2, r3, #24
 803ca04:	d410      	bmi.n	803ca28 <__swhatbuf_r+0x40>
 803ca06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803ca0a:	e00e      	b.n	803ca2a <__swhatbuf_r+0x42>
 803ca0c:	466a      	mov	r2, sp
 803ca0e:	f000 f8c3 	bl	803cb98 <_fstat_r>
 803ca12:	2800      	cmp	r0, #0
 803ca14:	dbf1      	blt.n	803c9fa <__swhatbuf_r+0x12>
 803ca16:	9a01      	ldr	r2, [sp, #4]
 803ca18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803ca1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803ca20:	425a      	negs	r2, r3
 803ca22:	415a      	adcs	r2, r3
 803ca24:	602a      	str	r2, [r5, #0]
 803ca26:	e7ee      	b.n	803ca06 <__swhatbuf_r+0x1e>
 803ca28:	2340      	movs	r3, #64	; 0x40
 803ca2a:	2000      	movs	r0, #0
 803ca2c:	6023      	str	r3, [r4, #0]
 803ca2e:	b016      	add	sp, #88	; 0x58
 803ca30:	bd70      	pop	{r4, r5, r6, pc}
	...

0803ca34 <__smakebuf_r>:
 803ca34:	898b      	ldrh	r3, [r1, #12]
 803ca36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803ca38:	079d      	lsls	r5, r3, #30
 803ca3a:	4606      	mov	r6, r0
 803ca3c:	460c      	mov	r4, r1
 803ca3e:	d507      	bpl.n	803ca50 <__smakebuf_r+0x1c>
 803ca40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803ca44:	6023      	str	r3, [r4, #0]
 803ca46:	6123      	str	r3, [r4, #16]
 803ca48:	2301      	movs	r3, #1
 803ca4a:	6163      	str	r3, [r4, #20]
 803ca4c:	b002      	add	sp, #8
 803ca4e:	bd70      	pop	{r4, r5, r6, pc}
 803ca50:	ab01      	add	r3, sp, #4
 803ca52:	466a      	mov	r2, sp
 803ca54:	f7ff ffc8 	bl	803c9e8 <__swhatbuf_r>
 803ca58:	9900      	ldr	r1, [sp, #0]
 803ca5a:	4605      	mov	r5, r0
 803ca5c:	4630      	mov	r0, r6
 803ca5e:	f7ff f993 	bl	803bd88 <_malloc_r>
 803ca62:	b948      	cbnz	r0, 803ca78 <__smakebuf_r+0x44>
 803ca64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803ca68:	059a      	lsls	r2, r3, #22
 803ca6a:	d4ef      	bmi.n	803ca4c <__smakebuf_r+0x18>
 803ca6c:	f023 0303 	bic.w	r3, r3, #3
 803ca70:	f043 0302 	orr.w	r3, r3, #2
 803ca74:	81a3      	strh	r3, [r4, #12]
 803ca76:	e7e3      	b.n	803ca40 <__smakebuf_r+0xc>
 803ca78:	4b0d      	ldr	r3, [pc, #52]	; (803cab0 <__smakebuf_r+0x7c>)
 803ca7a:	62b3      	str	r3, [r6, #40]	; 0x28
 803ca7c:	89a3      	ldrh	r3, [r4, #12]
 803ca7e:	6020      	str	r0, [r4, #0]
 803ca80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803ca84:	81a3      	strh	r3, [r4, #12]
 803ca86:	9b00      	ldr	r3, [sp, #0]
 803ca88:	6163      	str	r3, [r4, #20]
 803ca8a:	9b01      	ldr	r3, [sp, #4]
 803ca8c:	6120      	str	r0, [r4, #16]
 803ca8e:	b15b      	cbz	r3, 803caa8 <__smakebuf_r+0x74>
 803ca90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803ca94:	4630      	mov	r0, r6
 803ca96:	f000 f891 	bl	803cbbc <_isatty_r>
 803ca9a:	b128      	cbz	r0, 803caa8 <__smakebuf_r+0x74>
 803ca9c:	89a3      	ldrh	r3, [r4, #12]
 803ca9e:	f023 0303 	bic.w	r3, r3, #3
 803caa2:	f043 0301 	orr.w	r3, r3, #1
 803caa6:	81a3      	strh	r3, [r4, #12]
 803caa8:	89a0      	ldrh	r0, [r4, #12]
 803caaa:	4305      	orrs	r5, r0
 803caac:	81a5      	strh	r5, [r4, #12]
 803caae:	e7cd      	b.n	803ca4c <__smakebuf_r+0x18>
 803cab0:	0803c841 	.word	0x0803c841

0803cab4 <__malloc_lock>:
 803cab4:	4801      	ldr	r0, [pc, #4]	; (803cabc <__malloc_lock+0x8>)
 803cab6:	f7ff bf95 	b.w	803c9e4 <__retarget_lock_acquire_recursive>
 803caba:	bf00      	nop
 803cabc:	240267e0 	.word	0x240267e0

0803cac0 <__malloc_unlock>:
 803cac0:	4801      	ldr	r0, [pc, #4]	; (803cac8 <__malloc_unlock+0x8>)
 803cac2:	f7ff bf90 	b.w	803c9e6 <__retarget_lock_release_recursive>
 803cac6:	bf00      	nop
 803cac8:	240267e0 	.word	0x240267e0

0803cacc <__sread>:
 803cacc:	b510      	push	{r4, lr}
 803cace:	460c      	mov	r4, r1
 803cad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cad4:	f000 f894 	bl	803cc00 <_read_r>
 803cad8:	2800      	cmp	r0, #0
 803cada:	bfab      	itete	ge
 803cadc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803cade:	89a3      	ldrhlt	r3, [r4, #12]
 803cae0:	181b      	addge	r3, r3, r0
 803cae2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803cae6:	bfac      	ite	ge
 803cae8:	6563      	strge	r3, [r4, #84]	; 0x54
 803caea:	81a3      	strhlt	r3, [r4, #12]
 803caec:	bd10      	pop	{r4, pc}

0803caee <__swrite>:
 803caee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803caf2:	461f      	mov	r7, r3
 803caf4:	898b      	ldrh	r3, [r1, #12]
 803caf6:	05db      	lsls	r3, r3, #23
 803caf8:	4605      	mov	r5, r0
 803cafa:	460c      	mov	r4, r1
 803cafc:	4616      	mov	r6, r2
 803cafe:	d505      	bpl.n	803cb0c <__swrite+0x1e>
 803cb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cb04:	2302      	movs	r3, #2
 803cb06:	2200      	movs	r2, #0
 803cb08:	f000 f868 	bl	803cbdc <_lseek_r>
 803cb0c:	89a3      	ldrh	r3, [r4, #12]
 803cb0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803cb12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803cb16:	81a3      	strh	r3, [r4, #12]
 803cb18:	4632      	mov	r2, r6
 803cb1a:	463b      	mov	r3, r7
 803cb1c:	4628      	mov	r0, r5
 803cb1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803cb22:	f000 b817 	b.w	803cb54 <_write_r>

0803cb26 <__sseek>:
 803cb26:	b510      	push	{r4, lr}
 803cb28:	460c      	mov	r4, r1
 803cb2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cb2e:	f000 f855 	bl	803cbdc <_lseek_r>
 803cb32:	1c43      	adds	r3, r0, #1
 803cb34:	89a3      	ldrh	r3, [r4, #12]
 803cb36:	bf15      	itete	ne
 803cb38:	6560      	strne	r0, [r4, #84]	; 0x54
 803cb3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803cb3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803cb42:	81a3      	strheq	r3, [r4, #12]
 803cb44:	bf18      	it	ne
 803cb46:	81a3      	strhne	r3, [r4, #12]
 803cb48:	bd10      	pop	{r4, pc}

0803cb4a <__sclose>:
 803cb4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cb4e:	f000 b813 	b.w	803cb78 <_close_r>
	...

0803cb54 <_write_r>:
 803cb54:	b538      	push	{r3, r4, r5, lr}
 803cb56:	4d07      	ldr	r5, [pc, #28]	; (803cb74 <_write_r+0x20>)
 803cb58:	4604      	mov	r4, r0
 803cb5a:	4608      	mov	r0, r1
 803cb5c:	4611      	mov	r1, r2
 803cb5e:	2200      	movs	r2, #0
 803cb60:	602a      	str	r2, [r5, #0]
 803cb62:	461a      	mov	r2, r3
 803cb64:	f7ed f93f 	bl	8029de6 <_write>
 803cb68:	1c43      	adds	r3, r0, #1
 803cb6a:	d102      	bne.n	803cb72 <_write_r+0x1e>
 803cb6c:	682b      	ldr	r3, [r5, #0]
 803cb6e:	b103      	cbz	r3, 803cb72 <_write_r+0x1e>
 803cb70:	6023      	str	r3, [r4, #0]
 803cb72:	bd38      	pop	{r3, r4, r5, pc}
 803cb74:	240267e4 	.word	0x240267e4

0803cb78 <_close_r>:
 803cb78:	b538      	push	{r3, r4, r5, lr}
 803cb7a:	4d06      	ldr	r5, [pc, #24]	; (803cb94 <_close_r+0x1c>)
 803cb7c:	2300      	movs	r3, #0
 803cb7e:	4604      	mov	r4, r0
 803cb80:	4608      	mov	r0, r1
 803cb82:	602b      	str	r3, [r5, #0]
 803cb84:	f7ed f94b 	bl	8029e1e <_close>
 803cb88:	1c43      	adds	r3, r0, #1
 803cb8a:	d102      	bne.n	803cb92 <_close_r+0x1a>
 803cb8c:	682b      	ldr	r3, [r5, #0]
 803cb8e:	b103      	cbz	r3, 803cb92 <_close_r+0x1a>
 803cb90:	6023      	str	r3, [r4, #0]
 803cb92:	bd38      	pop	{r3, r4, r5, pc}
 803cb94:	240267e4 	.word	0x240267e4

0803cb98 <_fstat_r>:
 803cb98:	b538      	push	{r3, r4, r5, lr}
 803cb9a:	4d07      	ldr	r5, [pc, #28]	; (803cbb8 <_fstat_r+0x20>)
 803cb9c:	2300      	movs	r3, #0
 803cb9e:	4604      	mov	r4, r0
 803cba0:	4608      	mov	r0, r1
 803cba2:	4611      	mov	r1, r2
 803cba4:	602b      	str	r3, [r5, #0]
 803cba6:	f7ed f946 	bl	8029e36 <_fstat>
 803cbaa:	1c43      	adds	r3, r0, #1
 803cbac:	d102      	bne.n	803cbb4 <_fstat_r+0x1c>
 803cbae:	682b      	ldr	r3, [r5, #0]
 803cbb0:	b103      	cbz	r3, 803cbb4 <_fstat_r+0x1c>
 803cbb2:	6023      	str	r3, [r4, #0]
 803cbb4:	bd38      	pop	{r3, r4, r5, pc}
 803cbb6:	bf00      	nop
 803cbb8:	240267e4 	.word	0x240267e4

0803cbbc <_isatty_r>:
 803cbbc:	b538      	push	{r3, r4, r5, lr}
 803cbbe:	4d06      	ldr	r5, [pc, #24]	; (803cbd8 <_isatty_r+0x1c>)
 803cbc0:	2300      	movs	r3, #0
 803cbc2:	4604      	mov	r4, r0
 803cbc4:	4608      	mov	r0, r1
 803cbc6:	602b      	str	r3, [r5, #0]
 803cbc8:	f7ed f945 	bl	8029e56 <_isatty>
 803cbcc:	1c43      	adds	r3, r0, #1
 803cbce:	d102      	bne.n	803cbd6 <_isatty_r+0x1a>
 803cbd0:	682b      	ldr	r3, [r5, #0]
 803cbd2:	b103      	cbz	r3, 803cbd6 <_isatty_r+0x1a>
 803cbd4:	6023      	str	r3, [r4, #0]
 803cbd6:	bd38      	pop	{r3, r4, r5, pc}
 803cbd8:	240267e4 	.word	0x240267e4

0803cbdc <_lseek_r>:
 803cbdc:	b538      	push	{r3, r4, r5, lr}
 803cbde:	4d07      	ldr	r5, [pc, #28]	; (803cbfc <_lseek_r+0x20>)
 803cbe0:	4604      	mov	r4, r0
 803cbe2:	4608      	mov	r0, r1
 803cbe4:	4611      	mov	r1, r2
 803cbe6:	2200      	movs	r2, #0
 803cbe8:	602a      	str	r2, [r5, #0]
 803cbea:	461a      	mov	r2, r3
 803cbec:	f7ed f93e 	bl	8029e6c <_lseek>
 803cbf0:	1c43      	adds	r3, r0, #1
 803cbf2:	d102      	bne.n	803cbfa <_lseek_r+0x1e>
 803cbf4:	682b      	ldr	r3, [r5, #0]
 803cbf6:	b103      	cbz	r3, 803cbfa <_lseek_r+0x1e>
 803cbf8:	6023      	str	r3, [r4, #0]
 803cbfa:	bd38      	pop	{r3, r4, r5, pc}
 803cbfc:	240267e4 	.word	0x240267e4

0803cc00 <_read_r>:
 803cc00:	b538      	push	{r3, r4, r5, lr}
 803cc02:	4d07      	ldr	r5, [pc, #28]	; (803cc20 <_read_r+0x20>)
 803cc04:	4604      	mov	r4, r0
 803cc06:	4608      	mov	r0, r1
 803cc08:	4611      	mov	r1, r2
 803cc0a:	2200      	movs	r2, #0
 803cc0c:	602a      	str	r2, [r5, #0]
 803cc0e:	461a      	mov	r2, r3
 803cc10:	f7ed f8cc 	bl	8029dac <_read>
 803cc14:	1c43      	adds	r3, r0, #1
 803cc16:	d102      	bne.n	803cc1e <_read_r+0x1e>
 803cc18:	682b      	ldr	r3, [r5, #0]
 803cc1a:	b103      	cbz	r3, 803cc1e <_read_r+0x1e>
 803cc1c:	6023      	str	r3, [r4, #0]
 803cc1e:	bd38      	pop	{r3, r4, r5, pc}
 803cc20:	240267e4 	.word	0x240267e4

0803cc24 <_init>:
 803cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803cc26:	bf00      	nop
 803cc28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803cc2a:	bc08      	pop	{r3}
 803cc2c:	469e      	mov	lr, r3
 803cc2e:	4770      	bx	lr

0803cc30 <_fini>:
 803cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803cc32:	bf00      	nop
 803cc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803cc36:	bc08      	pop	{r3}
 803cc38:	469e      	mov	lr, r3
 803cc3a:	4770      	bx	lr
